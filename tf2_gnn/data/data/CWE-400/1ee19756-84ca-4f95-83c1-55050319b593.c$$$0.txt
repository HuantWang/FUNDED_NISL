-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_06_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
38,39
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
98,99
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,41,45,46,50,52,57,59,65,66,67,68,74,75,76,77,81,85,87,91,92,96,97,99
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
40,41
40,42
48,49
48,50
61,62
61,63
70,71
70,72
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_06_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_06_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_06_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(39,13,0)
(24,33,0)
(21,28,0)
(40,45,0)
(14,19,0)
(13,39,0)
(45,32,0)
(23,29,0)
(30,40,0)
(1,46,0)
(28,25,0)
(20,22,0)
(31,49,0)
(2,14,0)
(46,34,0)
(14,29,0)
(8,46,0)
(37,6,0)
(16,32,0)
(1,49,0)
(39,16,0)
(36,11,0)
(22,20,0)
(34,46,0)
(26,49,0)
(3,32,0)
(7,45,0)
(41,39,0)
(27,26,0)
(48,13,0)
(33,16,0)
(46,1,0)
(0,43,0)
(32,45,0)
(6,8,0)
(45,11,0)
(32,3,0)
(52,19,0)
(12,39,0)
(11,43,0)
(32,16,0)
(15,19,0)
(28,21,0)
(29,49,0)
(53,16,0)
(16,49,0)
(17,50,0)
(19,16,0)
(19,14,0)
(9,5,0)
(35,33,0)
(46,8,0)
(42,43,0)
(13,26,0)
(38,43,0)
(47,50,0)
(8,6,0)
(51,21,0)
(40,20,0)
(45,40,0)
(4,6,0)
(18,5,0)
(20,40,0)
(6,16,0)
(44,11,0)
(53,5,1)
(32,3,1)
(20,30,1)
(40,20,1)
(14,19,1)
(19,15,1)
(13,48,1)
(13,39,1)
(6,16,1)
(45,11,1)
(14,2,1)
(7,53,1)
(39,12,1)
(35,24,1)
(46,8,1)
(37,26,1)
(27,13,1)
(41,29,1)
(36,44,1)
(33,16,1)
(24,16,1)
(29,23,1)
(12,41,1)
(6,4,1)
(46,34,1)
(18,9,1)
(45,40,1)
(52,28,1)
(50,47,1)
(17,5,1)
(2,19,1)
(19,16,1)
(39,16,1)
(23,14,1)
(10,50,1)
(28,21,1)
(26,27,1)
(32,45,1)
(20,22,1)
(48,39,1)
(8,6,1)
(16,32,1)
(30,7,1)
(15,52,1)
(21,51,1)
(11,36,1)
(4,37,1)
(47,17,1)
(9,11,1)
(5,18,1)
(52,33,1)
(33,35,1)
(51,33,1)
(1,46,1)
(17,1,1)
(7,5,2)
(8,6,2)
(32,5,2)
(53,5,2)
(40,5,2)
(51,33,2)
(13,5,2)
(52,5,2)
(35,5,2)
(6,5,2)
(39,16,2)
(14,19,2)
(39,5,2)
(27,5,2)
(16,5,2)
(1,5,2)
(20,5,2)
(45,40,2)
(28,33,2)
(29,5,2)
(19,16,2)
(26,5,2)
(6,16,2)
(4,5,2)
(45,11,2)
(46,8,2)
(33,16,2)
(32,45,2)
(14,5,2)
(37,5,2)
(32,3,2)
(20,22,2)
(8,5,2)
(40,20,2)
(1,46,2)
(33,5,2)
(24,5,2)
(21,33,2)
(41,5,2)
(2,5,2)
(12,5,2)
(13,39,2)
(48,5,2)
(46,34,2)
(15,5,2)
(46,5,2)
(30,5,2)
(45,5,2)
(19,5,2)
(28,21,2)
(23,5,2)
(16,32,2)
-----------------------------------
(0,if(STATIC_CONST_FIVE==5)
(1,printStructLine((twoIntsStruct *)
(2,intOne)
(3,struct _twoIntsStruct *)
(4,0)
(5,STATIC_CONST_FIVE==5)
(6,data[0])
(7,data)
(8,&data[0])
(9,STATIC_CONST_FIVE)
(10,RET)
(11,data = NULL)
(12,0)
(13,data[0].intTwo)
(14,data[0].intOne)
(15,0)
(16,data = (struct _twoIntsStruct *)
(17,STATIC_CONST_FIVE)
(18,5)
(19,data[0])
(20,sizeof(struct _twoIntsStruct)
(21,-1)
(22,struct _twoIntsStruct)
(23,0)
(24,data)
(25,)
(26,data[0].intTwo = 0)
(27,0)
(28,exit(-1)
(29,data[0].intOne = 0)
(30,100)
(31,if (data == NULL)
(32,(struct _twoIntsStruct *)
(33,data == NULL)
(34,twoIntsStruct *)
(35,NULL)
(36,NULL)
(37,data)
(38,if(STATIC_CONST_FIVE==5)
(39,data[0])
(40,100*sizeof(struct _twoIntsStruct)
(41,data)
(42,data)
(43,)
(44,data)
(45,realloc(data, 100*sizeof(struct _twoIntsStruct)
(46,(twoIntsStruct *)
(47,5)
(48,intTwo)
(49,)
(50,STATIC_CONST_FIVE==5)
(51,1)
(52,data)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^