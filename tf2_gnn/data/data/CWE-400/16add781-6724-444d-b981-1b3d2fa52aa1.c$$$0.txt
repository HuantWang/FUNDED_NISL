-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_08_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
70,71
71,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,72,74
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_08_bad(){    wchar_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_realloc_08_bad()
CWE401_Memory_Leak__wchar_t_realloc_08_bad
{    wchar_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(5,17,0)
(30,17,0)
(27,13,0)
(30,8,0)
(26,11,0)
(6,30,0)
(13,11,0)
(18,21,0)
(5,20,0)
(8,30,0)
(24,11,0)
(28,2,0)
(16,5,0)
(17,5,0)
(21,18,0)
(10,13,0)
(15,20,0)
(12,14,0)
(19,17,0)
(14,20,0)
(30,13,0)
(0,18,0)
(17,30,0)
(7,11,0)
(3,8,0)
(17,19,0)
(23,8,0)
(4,3,0)
(21,1,0)
(8,3,0)
(14,5,0)
(2,5,0)
(29,2,0)
(14,5,1)
(12,21,1)
(29,28,1)
(12,2,1)
(30,8,1)
(5,17,1)
(9,14,1)
(8,3,1)
(3,4,1)
(6,16,1)
(27,10,1)
(25,13,1)
(16,25,1)
(30,13,1)
(2,29,1)
(23,6,1)
(9,25,1)
(13,27,1)
(22,9,1)
(4,23,1)
(17,19,1)
(21,18,1)
(17,30,1)
(14,12,1)
(18,0,1)
(28,5,1)
(2,5,1)
(0,2,1)
(2,5,2)
(12,25,2)
(17,25,2)
(17,30,2)
(21,18,2)
(14,25,2)
(5,17,2)
(28,25,2)
(3,25,2)
(21,2,2)
(5,25,2)
(0,2,2)
(30,13,2)
(4,25,2)
(30,8,2)
(17,19,2)
(18,2,2)
(8,25,2)
(6,25,2)
(30,25,2)
(16,25,2)
(14,5,2)
(8,3,2)
(23,25,2)
(29,25,2)
(2,25,2)
-----------------------------------
(0,1)
(1,)
(2,data == NULL)
(3,sizeof(wchar_t)
(4,wchar_t)
(5,data = (wchar_t *)
(6,data)
(7,if(staticReturnsTrue()
(8,100*sizeof(wchar_t)
(9,staticReturnsTrue()
(10,data)
(11,)
(12,data)
(13,data = NULL)
(14,printWLine(data)
(15,if (data == NULL)
(16,data)
(17,(wchar_t *)
(18,-1)
(19,wchar_t *)
(20,)
(21,exit(-1)
(22,RET)
(23,100)
(24,if(staticReturnsTrue()
(25,staticReturnsTrue()
(26,data)
(27,NULL)
(28,data)
(29,NULL)
(30,realloc(data, 100*sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^