-----label-----
1
-----code-----
bool
winimg_new(imglist **ppimg, unsigned char *pixels,
           int left, int top, int width, int height,
           int pixelwidth, int pixelheight)
{
  imglist *img = (imglist *)malloc(sizeof(imglist));
  //printf("winimg alloc %d -> %p\n", (int)sizeof(imglist), img);
  if (!img)
    return false;

  img->pixels = pixels;
  img->hdc = NULL;
  img->hbmp = NULL;
  img->left = left;
  img->top = top;
  img->width = width;
  img->height = height;
  img->pixelwidth = pixelwidth;
  img->pixelheight = pixelheight;
  img->next = NULL;
  img->strage = NULL;

  *ppimg = img;

  return true;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
5,6
5,7
6,7
8,9
8,10
8,11
12,13
12,14
14,15
14,16
17,18
17,19
19,20
21,22
21,23
23,24
25,26
25,27
27,28
29,30
29,31
31,32
33,34
33,35
35,36
37,38
37,39
39,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
41,49
41,50
41,51
41,52
41,53
41,54
41,55
41,56
42,43
43,44
43,45
44,45
46,47
46,48
46,49
49,50
50,51
50,52
51,52
51,53
52,53
54,55
56,57
56,58
57,58
59,60
60,61
60,62
61,62
64,65
64,66
65,66
66,67
68,69
70,71
71,72
71,73
72,73
72,74
73,74
76,77
78,79
79,80
79,81
80,81
80,82
81,82
84,85
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
96,98
97,98
100,101
102,103
103,104
103,105
104,105
104,106
105,106
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
118,119
119,120
119,121
120,121
120,122
121,122
124,125
126,127
127,128
127,129
128,129
128,130
129,130
132,133
134,135
135,136
135,137
136,137
136,138
137,138
140,141
142,143
143,144
143,145
144,145
144,146
145,146
148,149
150,151
151,152
151,153
152,153
152,154
153,154
156,157
158,159
159,160
159,161
160,161
161,162
163,164
165,166
-----nextToken-----
2,4,7,9,10,11,13,15,16,18,20,22,24,26,28,30,32,34,36,38,40,45,47,48,53,55,58,62,63,67,69,74,75,77,82,83,85,90,91,93,98,99,101,106,107,109,114,115,117,122,123,125,130,131,133,138,139,141,146,147,149,154,155,157,162,164,166
-----computeFrom-----
71,72
71,73
79,80
79,81
87,88
87,89
95,96
95,97
103,104
103,105
111,112
111,113
119,120
119,121
127,128
127,129
135,136
135,137
143,144
143,145
151,152
151,153
159,160
159,161
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
boolwinimg_new(imglist **ppimg, unsigned char *pixels,           int left, int top, int width, int height,           int pixelwidth, int pixelheight){  imglist *img = (imglist *)malloc(sizeof(imglist));  //printf("winimg alloc %d -> %p\n", (int)sizeof(imglist), img);  if (!img)    return false;  img->pixels = pixels;  img->hdc = NULL;  img->hbmp = NULL;  img->left = left;  img->top = top;  img->width = width;  img->height = height;  img->pixelwidth = pixelwidth;  img->pixelheight = pixelheight;  img->next = NULL;  img->strage = NULL;  *ppimg = img;  return true;}
bool
winimg_new(imglist **ppimg, unsigned char *pixels,           int left, int top, int width, int height,           int pixelwidth, int pixelheight)
winimg_new
imglist **ppimg
imglist
imglist
**ppimg
*
*
ppimg
unsigned char *pixels
unsigned char
*pixels
*
pixels
int left
int
left
left
int top
int
top
top
int width
int
width
width
int height
int
height
height
int pixelwidth
int
pixelwidth
pixelwidth
int pixelheight
int
pixelheight
pixelheight
{  imglist *img = (imglist *)malloc(sizeof(imglist));  //printf("winimg alloc %d -> %p\n", (int)sizeof(imglist), img);  if (!img)    return false;  img->pixels = pixels;  img->hdc = NULL;  img->hbmp = NULL;  img->left = left;  img->top = top;  img->width = width;  img->height = height;  img->pixelwidth = pixelwidth;  img->pixelheight = pixelheight;  img->next = NULL;  img->strage = NULL;  *ppimg = img;  return true;}
imglist *img = (imglist *)malloc(sizeof(imglist));
imglist *img = (imglist *)malloc(sizeof(imglist));
imglist
imglist
*img = (imglist *)malloc(sizeof(imglist))
*
img
= (imglist *)malloc(sizeof(imglist))
(imglist *)malloc(sizeof(imglist))
imglist *
imglist
imglist
*
*
malloc(sizeof(imglist))
malloc
malloc
sizeof(imglist)
imglist
imglist
imglist

if (!img)    return false;
!img
img
img
return false;
false
img->pixels = pixels;
img->pixels = pixels
img->pixels
img
img
pixels
pixels
pixels
img->hdc = NULL;
img->hdc = NULL
img->hdc
img
img
hdc
NULL
NULL
img->hbmp = NULL;
img->hbmp = NULL
img->hbmp
img
img
hbmp
NULL
NULL
img->left = left;
img->left = left
img->left
img
img
left
left
left
img->top = top;
img->top = top
img->top
img
img
top
top
top
img->width = width;
img->width = width
img->width
img
img
width
width
width
img->height = height;
img->height = height
img->height
img
img
height
height
height
img->pixelwidth = pixelwidth;
img->pixelwidth = pixelwidth
img->pixelwidth
img
img
pixelwidth
pixelwidth
pixelwidth
img->pixelheight = pixelheight;
img->pixelheight = pixelheight
img->pixelheight
img
img
pixelheight
pixelheight
pixelheight
img->next = NULL;
img->next = NULL
img->next
img
img
next
NULL
NULL
img->strage = NULL;
img->strage = NULL
img->strage
img
img
strage
NULL
NULL
*ppimg = img;
*ppimg = img
*ppimg
ppimg
ppimg
img
img
return true;
true
-----joern-----
(55,37,0)
(46,47,0)
(66,71,0)
(1,55,0)
(32,79,0)
(49,30,0)
(45,55,0)
(35,20,0)
(26,51,0)
(16,74,0)
(82,2,0)
(4,41,0)
(27,47,0)
(56,51,0)
(29,56,0)
(20,35,0)
(69,49,0)
(63,33,0)
(73,74,0)
(43,56,0)
(49,64,0)
(12,35,0)
(28,73,0)
(0,47,0)
(31,47,0)
(70,51,0)
(43,55,0)
(44,64,0)
(43,8,0)
(13,51,0)
(53,51,0)
(37,47,0)
(8,51,0)
(8,79,0)
(51,47,0)
(58,43,0)
(41,83,0)
(38,43,0)
(64,47,0)
(77,24,0)
(52,59,0)
(42,70,0)
(10,12,0)
(80,56,0)
(68,0,0)
(53,31,0)
(62,51,0)
(72,25,0)
(71,51,0)
(43,24,0)
(31,81,0)
(43,73,0)
(43,53,0)
(64,51,0)
(25,47,0)
(40,46,0)
(33,41,0)
(33,51,0)
(35,12,0)
(43,13,0)
(19,33,0)
(74,47,0)
(59,51,0)
(39,27,0)
(7,37,0)
(0,75,0)
(24,51,0)
(24,2,0)
(26,27,0)
(5,47,0)
(50,70,0)
(61,31,0)
(59,0,0)
(73,51,0)
(51,12,0)
(67,59,0)
(43,33,0)
(55,51,0)
(79,47,0)
(27,22,0)
(43,47,0)
(48,73,0)
(14,8,0)
(43,49,0)
(17,5,0)
(56,46,0)
(43,70,0)
(60,13,0)
(78,20,0)
(43,59,0)
(34,26,0)
(70,5,0)
(2,3,0)
(12,51,0)
(21,47,0)
(65,47,0)
(57,26,0)
(12,10,0)
(41,47,0)
(54,53,0)
(58,18,0)
(15,53,0)
(2,47,0)
(5,36,0)
(13,25,0)
(76,13,0)
(11,8,0)
(37,9,0)
(43,26,0)
(23,18,0)
(6,24,0)
(68,59,1)
(64,44,1)
(27,22,1)
(51,12,1)
(33,63,1)
(56,51,1)
(24,51,1)
(1,71,1)
(17,70,1)
(69,25,1)
(61,53,1)
(42,50,1)
(48,37,1)
(45,1,1)
(43,26,1)
(29,0,1)
(49,30,1)
(77,6,1)
(74,16,1)
(32,8,1)
(23,71,1)
(70,51,1)
(18,23,1)
(80,29,1)
(43,73,1)
(4,33,1)
(82,24,1)
(43,38,1)
(55,51,1)
(35,20,1)
(43,8,1)
(43,55,1)
(67,5,1)
(78,62,1)
(60,46,1)
(7,55,1)
(44,49,1)
(39,26,1)
(5,17,1)
(70,42,1)
(43,53,1)
(20,78,1)
(41,4,1)
(24,77,1)
(27,39,1)
(38,64,1)
(59,51,1)
(71,51,1)
(26,57,1)
(40,56,1)
(43,49,1)
(5,36,1)
(31,81,1)
(59,52,1)
(66,51,1)
(13,76,1)
(2,3,1)
(53,15,1)
(37,9,1)
(58,43,1)
(46,40,1)
(16,73,1)
(58,18,1)
(79,32,1)
(50,2,1)
(76,60,1)
(13,51,1)
(26,51,1)
(71,66,1)
(25,72,1)
(43,56,1)
(53,51,1)
(52,67,1)
(55,45,1)
(56,80,1)
(54,79,1)
(43,13,1)
(43,59,1)
(41,83,1)
(43,24,1)
(73,51,1)
(11,74,1)
(12,10,1)
(8,14,1)
(19,27,1)
(31,61,1)
(63,19,1)
(33,51,1)
(28,48,1)
(72,13,1)
(49,69,1)
(43,70,1)
(43,33,1)
(64,51,1)
(2,82,1)
(12,35,1)
(8,51,1)
(73,28,1)
(0,68,1)
(34,31,1)
(57,34,1)
(6,41,1)
(37,7,1)
(15,54,1)
(14,11,1)
(0,75,1)
(72,71,2)
(54,71,2)
(48,71,2)
(19,71,2)
(35,20,2)
(59,71,2)
(33,51,2)
(31,81,2)
(12,35,2)
(44,71,2)
(64,51,2)
(43,55,2)
(68,71,2)
(2,71,2)
(23,71,2)
(50,71,2)
(55,71,2)
(0,75,2)
(56,71,2)
(70,71,2)
(18,71,2)
(76,71,2)
(69,71,2)
(8,71,2)
(24,71,2)
(41,71,2)
(12,10,2)
(61,71,2)
(67,71,2)
(53,51,2)
(2,3,2)
(64,71,2)
(59,51,2)
(79,71,2)
(13,71,2)
(24,51,2)
(1,71,2)
(13,51,2)
(34,71,2)
(57,71,2)
(16,71,2)
(27,71,2)
(33,71,2)
(11,71,2)
(80,71,2)
(43,33,2)
(15,71,2)
(5,71,2)
(28,71,2)
(60,71,2)
(27,22,2)
(82,71,2)
(43,59,2)
(43,53,2)
(40,71,2)
(6,71,2)
(43,24,2)
(43,26,2)
(5,36,2)
(52,71,2)
(55,51,2)
(73,71,2)
(43,73,2)
(26,51,2)
(43,70,2)
(53,71,2)
(49,30,2)
(14,71,2)
(7,71,2)
(43,8,2)
(49,71,2)
(37,71,2)
(17,71,2)
(41,83,2)
(58,18,2)
(42,71,2)
(43,56,2)
(58,43,2)
(73,51,2)
(31,71,2)
(70,51,2)
(29,71,2)
(71,51,2)
(32,71,2)
(63,71,2)
(46,71,2)
(39,71,2)
(0,71,2)
(25,71,2)
(74,71,2)
(77,71,2)
(4,71,2)
(43,49,2)
(38,71,2)
(26,71,2)
(8,51,2)
(43,71,2)
(37,9,2)
(43,13,2)
(51,12,2)
(56,51,2)
(45,71,2)
-----------------------------------
(0,img->pixelheight = pixelheight)
(1,img)
(2,img->height = height)
(3,int height)
(4,width)
(5,img->pixelwidth = pixelwidth)
(6,img)
(7,pixels)
(8,img->hbmp)
(9,unsigned char *pixels)
(10,imglist *)
(11,img)
(12,(imglist *)
(13,img->strage)
(14,hbmp)
(15,left)
(16,NULL)
(17,pixelwidth)
(18,return false;)
(19,img)
(20,sizeof(imglist)
(21,img)
(22,int top)
(23,false)
(24,img->height)
(25,img->strage = NULL)
(26,img->top)
(27,img->top = top)
(28,hdc)
(29,img)
(30,imglist **ppimg)
(31,img->left = left)
(32,NULL)
(33,img->width)
(34,img)
(35,malloc(sizeof(imglist)
(36,int pixelwidth)
(37,img->pixels = pixels)
(38,true)
(39,top)
(40,NULL)
(41,img->width = width)
(42,pixelwidth)
(43,return true;)
(44,img)
(45,pixels)
(46,img->next = NULL)
(47,)
(48,img)
(49,*ppimg)
(50,img)
(51,*img = (imglist *)
(52,pixelheight)
(53,img->left)
(54,img)
(55,img->pixels)
(56,img->next)
(57,top)
(58,RET)
(59,img->pixelheight)
(60,img)
(61,left)
(62,img)
(63,width)
(64,*ppimg = img)
(65,if (!img)
(66,img)
(67,img)
(68,pixelheight)
(69,ppimg)
(70,img->pixelwidth)
(71,!img)
(72,NULL)
(73,img->hdc)
(74,img->hdc = NULL)
(75,int pixelheight)
(76,strage)
(77,height)
(78,imglist)
(79,img->hbmp = NULL)
(80,next)
(81,int left)
(82,height)
(83,int width)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^