-----label-----
0
-----code-----
static void goodG2B()
{
    int h,j;
    int64_t * data;
    data = NULL;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
51,52
53,54
53,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
71,73
72,73
75,76
75,77
75,78
75,79
76,77
77,78
77,79
78,79
81,82
81,83
82,83
85,86
86,87
88,89
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,58,59,64,65,66,70,73,74,79,80,83,84,87,89
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
53,54
53,55
61,62
61,63
77,78
77,79
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B(){    int h,j;    int64_t * data;    data = NULL;    for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    int h,j;    int64_t * data;    data = NULL;    for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int h,j;
int h,j;
int
h
h
j
j
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(27,38,0)
(26,18,0)
(31,21,0)
(6,30,0)
(33,38,0)
(7,30,0)
(1,21,0)
(2,16,0)
(35,38,0)
(35,1,0)
(8,18,0)
(13,17,0)
(24,39,0)
(22,16,0)
(23,21,0)
(40,30,0)
(10,33,0)
(20,14,0)
(38,33,0)
(23,36,0)
(28,1,0)
(4,16,0)
(18,16,0)
(15,3,0)
(21,17,0)
(0,23,0)
(36,17,0)
(38,35,0)
(21,1,0)
(14,39,0)
(1,28,0)
(34,30,0)
(36,23,0)
(3,30,0)
(19,25,0)
(25,39,0)
(29,3,0)
(32,30,0)
(37,23,0)
(12,39,0)
(11,25,0)
(1,35,0)
(5,2,0)
(21,1,1)
(18,16,1)
(39,12,1)
(8,26,1)
(31,18,1)
(14,20,1)
(15,29,1)
(25,11,1)
(13,21,1)
(26,16,1)
(19,14,1)
(23,21,1)
(37,13,1)
(9,25,1)
(11,19,1)
(18,8,1)
(4,3,1)
(22,4,1)
(36,23,1)
(27,31,1)
(2,5,1)
(12,24,1)
(5,36,1)
(35,38,1)
(25,39,1)
(24,18,1)
(33,10,1)
(14,39,1)
(0,37,1)
(1,28,1)
(23,0,1)
(19,39,1)
(16,22,1)
(20,25,1)
(2,16,1)
(10,27,1)
(3,15,1)
(1,35,1)
(26,2,1)
(38,33,1)
(38,33,2)
(21,18,2)
(36,23,2)
(37,18,2)
(27,18,2)
(1,18,2)
(38,18,2)
(21,1,2)
(8,18,2)
(35,18,2)
(35,38,2)
(25,25,2)
(13,18,2)
(26,18,2)
(0,18,2)
(1,28,2)
(2,16,2)
(31,18,2)
(36,18,2)
(10,18,2)
(2,18,2)
(14,25,2)
(25,39,2)
(14,39,2)
(18,16,2)
(23,18,2)
(18,18,2)
(23,21,2)
(11,25,2)
(5,18,2)
(19,25,2)
(20,25,2)
(1,35,2)
(33,18,2)
-----------------------------------
(0,0)
(1,(int64_t *)
(2,h++)
(3,data = NULL)
(4,h)
(5,h)
(6,data)
(7,for(h = 0; h < 1; h++)
(8,1)
(9,RET)
(10,int64_t)
(11,1)
(12,0)
(13,L)
(14,j++)
(15,NULL)
(16,h = 0)
(17,)
(18,h < 1)
(19,j)
(20,j)
(21,data = (int64_t *)
(22,0)
(23,data[0])
(24,j)
(25,j < 1)
(26,h)
(27,100)
(28,int64_t *)
(29,data)
(30,)
(31,data)
(32,j)
(33,sizeof(int64_t)
(34,h)
(35,ALLOCA(100*sizeof(int64_t)
(36,printLongLongLine(data[0])
(37,data)
(38,100*sizeof(int64_t)
(39,j = 0)
(40,for(j = 0; j < 1; j++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^