-----label-----
0
-----code-----
static int __issue_discard_cmd(struct f2fs_sb_info *sbi,
					struct discard_policy *dpolicy)
{
	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
	struct list_head *pend_list;
	struct discard_cmd *dc, *tmp;
	struct blk_plug plug;
	int i, iter = 0, issued = 0;
	bool io_interrupted = false;

	mutex_lock(&dcc->cmd_lock);
	f2fs_bug_on(sbi,
		!__check_rb_tree_consistence(sbi, &dcc->root));
	blk_start_plug(&plug);
	for (i = MAX_PLIST_NUM - 1; i >= 0; i--) {
		if (i + 1 < dpolicy->granularity)
			break;
		pend_list = &dcc->pend_list[i];
		list_for_each_entry_safe(dc, tmp, pend_list, list) {
			f2fs_bug_on(sbi, dc->state != D_PREP);

			if (dpolicy->io_aware && i < dpolicy->io_aware_gran &&
								!is_idle(sbi)) {
				io_interrupted = true;
				goto skip;
			}

			__submit_discard_cmd(sbi, dpolicy, dc);
			issued++;
skip:
			if (++iter >= dpolicy->max_requests)
				goto out;
		}
	}
out:
	blk_finish_plug(&plug);
	mutex_unlock(&dcc->cmd_lock);

	if (!issued && io_interrupted)
		issued = -1;

	return issued;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
26,28
27,28
27,29
28,29
30,31
33,34
34,35
34,36
35,36
37,38
37,39
40,41
41,42
41,43
41,44
42,43
44,45
44,46
47,48
47,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
59,60
61,62
61,63
63,64
65,66
65,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
86,87
86,88
86,89
87,88
89,90
91,92
92,93
92,94
92,95
93,94
95,96
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
106,107
107,108
109,110
109,111
109,112
109,113
110,111
111,112
111,113
112,113
114,115
114,116
115,116
118,119
118,120
119,120
122,123
123,124
125,126
125,127
125,128
125,129
125,130
126,127
126,128
127,128
127,129
128,129
128,130
129,130
132,133
132,134
133,134
137,138
138,139
138,140
139,140
141,142
142,143
142,144
143,144
143,145
144,145
147,148
149,150
150,151
150,152
150,153
150,154
150,155
151,152
153,154
155,156
157,158
159,160
161,162
162,163
162,164
162,165
162,166
162,167
163,164
164,165
164,166
164,167
165,166
167,168
169,170
169,171
170,171
170,172
171,172
174,175
176,177
176,178
177,178
177,179
178,179
178,180
179,180
179,181
180,181
183,184
183,185
184,185
186,187
186,188
187,188
190,191
191,192
191,193
192,193
194,195
196,197
196,198
197,198
198,199
198,200
199,200
202,203
204,205
205,206
205,207
205,208
205,209
206,207
208,209
210,211
212,213
214,215
215,216
216,217
218,219
218,220
220,221
220,222
221,222
221,223
222,223
223,224
225,226
225,227
226,227
229,230
231,232
231,233
233,234
234,235
234,236
235,236
237,238
238,239
240,241
241,242
241,243
242,243
244,245
245,246
245,247
246,247
249,250
249,251
250,251
250,252
251,252
252,253
254,255
256,257
257,258
257,259
258,259
260,261
262,263
263,264
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,29,31,32,36,38,39,43,45,46,48,49,53,55,58,60,62,64,66,68,71,73,75,79,83,84,88,90,94,96,100,101,105,108,113,116,117,120,121,124,130,131,134,135,136,140,145,146,148,152,154,156,158,160,166,168,172,173,175,181,182,185,188,189,193,195,200,201,203,207,209,211,213,217,219,224,227,228,230,232,236,239,243,247,248,253,255,259,261,264
-----computeFrom-----
111,112
111,113
114,115
114,116
118,119
118,120
127,128
127,129
128,129
128,130
138,139
138,140
169,170
169,171
177,178
177,179
178,179
178,180
183,184
183,185
198,199
198,200
221,222
221,223
250,251
250,252
257,258
257,259
-----guardedBy-----
253,259
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;LabelStatement;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int __issue_discard_cmd(struct f2fs_sb_info *sbi,					struct discard_policy *dpolicy){	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;	struct list_head *pend_list;	struct discard_cmd *dc, *tmp;	struct blk_plug plug;	int i, iter = 0, issued = 0;	bool io_interrupted = false;	mutex_lock(&dcc->cmd_lock);	f2fs_bug_on(sbi,		!__check_rb_tree_consistence(sbi, &dcc->root));	blk_start_plug(&plug);	for (i = MAX_PLIST_NUM - 1; i >= 0; i--) {		if (i + 1 < dpolicy->granularity)			break;		pend_list = &dcc->pend_list[i];		list_for_each_entry_safe(dc, tmp, pend_list, list) {			f2fs_bug_on(sbi, dc->state != D_PREP);			if (dpolicy->io_aware && i < dpolicy->io_aware_gran &&								!is_idle(sbi)) {				io_interrupted = true;				goto skip;			}			__submit_discard_cmd(sbi, dpolicy, dc);			issued++;skip:			if (++iter >= dpolicy->max_requests)				goto out;		}	}out:	blk_finish_plug(&plug);	mutex_unlock(&dcc->cmd_lock);	if (!issued && io_interrupted)		issued = -1;	return issued;}
static int
__issue_discard_cmd(struct f2fs_sb_info *sbi,					struct discard_policy *dpolicy)
__issue_discard_cmd
struct f2fs_sb_info *sbi
struct f2fs_sb_info
f2fs_sb_info
*sbi
*
sbi
struct discard_policy *dpolicy
struct discard_policy
discard_policy
*dpolicy
*
dpolicy
{	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;	struct list_head *pend_list;	struct discard_cmd *dc, *tmp;	struct blk_plug plug;	int i, iter = 0, issued = 0;	bool io_interrupted = false;	mutex_lock(&dcc->cmd_lock);	f2fs_bug_on(sbi,		!__check_rb_tree_consistence(sbi, &dcc->root));	blk_start_plug(&plug);	for (i = MAX_PLIST_NUM - 1; i >= 0; i--) {		if (i + 1 < dpolicy->granularity)			break;		pend_list = &dcc->pend_list[i];		list_for_each_entry_safe(dc, tmp, pend_list, list) {			f2fs_bug_on(sbi, dc->state != D_PREP);			if (dpolicy->io_aware && i < dpolicy->io_aware_gran &&								!is_idle(sbi)) {				io_interrupted = true;				goto skip;			}			__submit_discard_cmd(sbi, dpolicy, dc);			issued++;skip:			if (++iter >= dpolicy->max_requests)				goto out;		}	}out:	blk_finish_plug(&plug);	mutex_unlock(&dcc->cmd_lock);	if (!issued && io_interrupted)		issued = -1;	return issued;}
struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
struct discard_cmd_control
discard_cmd_control
*dcc = SM_I(sbi)->dcc_info
*
dcc
= SM_I(sbi)->dcc_info
SM_I(sbi)->dcc_info
SM_I(sbi)
SM_I
SM_I
sbi
sbi
dcc_info
struct list_head *pend_list;
struct list_head *pend_list;
struct list_head
list_head
*pend_list
*
pend_list
struct discard_cmd *dc, *tmp;
struct discard_cmd *dc, *tmp;
struct discard_cmd
discard_cmd
*dc
*
dc
*tmp
*
tmp
struct blk_plug plug;
struct blk_plug plug;
struct blk_plug
blk_plug
plug
plug
int i, iter = 0, issued = 0;
int i, iter = 0, issued = 0;
int
i
i
iter = 0
iter
= 0
0
issued = 0
issued
= 0
0
bool io_interrupted = false;
bool io_interrupted = false;
bool
io_interrupted = false
io_interrupted
= false
false
mutex_lock(&dcc->cmd_lock);
mutex_lock(&dcc->cmd_lock)
mutex_lock
mutex_lock
&dcc->cmd_lock
dcc->cmd_lock
dcc
dcc
cmd_lock
f2fs_bug_on(sbi,		!__check_rb_tree_consistence(sbi, &dcc->root));
f2fs_bug_on(sbi,		!__check_rb_tree_consistence(sbi, &dcc->root))
f2fs_bug_on
f2fs_bug_on
sbi
sbi
!__check_rb_tree_consistence(sbi, &dcc->root)
__check_rb_tree_consistence(sbi, &dcc->root)
__check_rb_tree_consistence
__check_rb_tree_consistence
sbi
sbi
&dcc->root
dcc->root
dcc
dcc
root
blk_start_plug(&plug);
blk_start_plug(&plug)
blk_start_plug
blk_start_plug
&plug
plug
plug
for (i = MAX_PLIST_NUM - 1; i >= 0; i--) {		if (i + 1 < dpolicy->granularity)			break;		pend_list = &dcc->pend_list[i];		list_for_each_entry_safe(dc, tmp, pend_list, list) {			f2fs_bug_on(sbi, dc->state != D_PREP);			if (dpolicy->io_aware && i < dpolicy->io_aware_gran &&								!is_idle(sbi)) {				io_interrupted = true;				goto skip;			}			__submit_discard_cmd(sbi, dpolicy, dc);			issued++;skip:			if (++iter >= dpolicy->max_requests)				goto out;		}	}
i = MAX_PLIST_NUM - 1;
i = MAX_PLIST_NUM - 1
i
i
MAX_PLIST_NUM - 1
MAX_PLIST_NUM
MAX_PLIST_NUM
1
i >= 0
i
i
0
i--
i
i
{		if (i + 1 < dpolicy->granularity)			break;		pend_list = &dcc->pend_list[i];		list_for_each_entry_safe(dc, tmp, pend_list, list) {			f2fs_bug_on(sbi, dc->state != D_PREP);			if (dpolicy->io_aware && i < dpolicy->io_aware_gran &&								!is_idle(sbi)) {				io_interrupted = true;				goto skip;			}			__submit_discard_cmd(sbi, dpolicy, dc);			issued++;skip:			if (++iter >= dpolicy->max_requests)				goto out;		}	}
if (i + 1 < dpolicy->granularity)			break;
i + 1 < dpolicy->granularity
i + 1
i
i
1
dpolicy->granularity
dpolicy
dpolicy
granularity
break;
pend_list = &dcc->pend_list[i];
pend_list = &dcc->pend_list[i]
pend_list
pend_list
&dcc->pend_list[i]
dcc->pend_list[i]
dcc->pend_list
dcc
dcc
pend_list
i
i
list_for_each_entry_safe(dc, tmp, pend_list, list)
list_for_each_entry_safe(dc, tmp, pend_list, list)
list_for_each_entry_safe
list_for_each_entry_safe
dc
dc
tmp
tmp
pend_list
pend_list
list
list
)
{			f2fs_bug_on(sbi, dc->state != D_PREP);			if (dpolicy->io_aware && i < dpolicy->io_aware_gran &&								!is_idle(sbi)) {				io_interrupted = true;				goto skip;			}			__submit_discard_cmd(sbi, dpolicy, dc);			issued++;skip:			if (++iter >= dpolicy->max_requests)				goto out;		}
f2fs_bug_on(sbi, dc->state != D_PREP);
f2fs_bug_on(sbi, dc->state != D_PREP)
f2fs_bug_on
f2fs_bug_on
sbi
sbi
dc->state != D_PREP
dc->state
dc
dc
state
D_PREP
D_PREP
if (dpolicy->io_aware && i < dpolicy->io_aware_gran &&								!is_idle(sbi)) {				io_interrupted = true;				goto skip;			}
dpolicy->io_aware && i < dpolicy->io_aware_gran &&								!is_idle(sbi)
dpolicy->io_aware && i < dpolicy->io_aware_gran
dpolicy->io_aware
dpolicy
dpolicy
io_aware
i < dpolicy->io_aware_gran
i
i
dpolicy->io_aware_gran
dpolicy
dpolicy
io_aware_gran
!is_idle(sbi)
is_idle(sbi)
is_idle
is_idle
sbi
sbi
{				io_interrupted = true;				goto skip;			}
io_interrupted = true;
io_interrupted = true
io_interrupted
io_interrupted
true
goto skip;
skip
__submit_discard_cmd(sbi, dpolicy, dc);
__submit_discard_cmd(sbi, dpolicy, dc)
__submit_discard_cmd
__submit_discard_cmd
sbi
sbi
dpolicy
dpolicy
dc
dc
issued++;
issued++
issued
issued
skip:			if (++iter >= dpolicy->max_requests)				goto out;
skip
if (++iter >= dpolicy->max_requests)				goto out;
++iter >= dpolicy->max_requests
++iter
iter
iter
dpolicy->max_requests
dpolicy
dpolicy
max_requests
goto out;
out
out:	blk_finish_plug(&plug);
out
blk_finish_plug(&plug);
blk_finish_plug(&plug)
blk_finish_plug
blk_finish_plug
&plug
plug
plug
mutex_unlock(&dcc->cmd_lock);
mutex_unlock(&dcc->cmd_lock)
mutex_unlock
mutex_unlock
&dcc->cmd_lock
dcc->cmd_lock
dcc
dcc
cmd_lock
if (!issued && io_interrupted)		issued = -1;
!issued && io_interrupted
!issued
issued
issued
io_interrupted
io_interrupted
issued = -1;
issued = -1
issued
issued
-1
1
return issued;
issued
issued
-----joern-----
(58,37,0)
(103,84,0)
(8,13,0)
(21,77,0)
(84,60,0)
(47,64,0)
(123,41,0)
(7,110,0)
(44,64,0)
(5,22,0)
(4,108,0)
(85,135,0)
(1,16,0)
(10,70,0)
(91,86,0)
(82,32,0)
(60,93,0)
(113,117,0)
(135,37,0)
(129,19,0)
(107,4,0)
(17,119,0)
(112,25,0)
(66,83,0)
(49,33,0)
(33,64,0)
(8,14,0)
(65,104,0)
(31,103,0)
(48,133,0)
(128,64,0)
(101,120,0)
(104,83,0)
(14,118,0)
(89,84,0)
(102,80,0)
(25,50,0)
(61,50,0)
(122,93,0)
(86,91,0)
(59,49,0)
(9,105,0)
(80,125,0)
(98,108,0)
(48,64,0)
(22,50,0)
(111,93,0)
(31,18,0)
(87,69,0)
(103,64,0)
(28,105,0)
(32,13,0)
(7,16,0)
(119,110,0)
(77,103,0)
(54,64,0)
(72,70,0)
(37,135,0)
(18,86,0)
(20,2,0)
(16,64,0)
(55,122,0)
(99,16,0)
(19,103,0)
(36,16,0)
(68,64,0)
(13,41,0)
(106,64,0)
(29,125,0)
(3,86,0)
(77,90,0)
(97,64,0)
(100,32,0)
(22,116,0)
(53,122,0)
(104,105,0)
(90,107,0)
(132,54,0)
(11,7,0)
(8,25,0)
(120,54,0)
(134,24,0)
(79,93,0)
(19,46,0)
(130,64,0)
(70,50,0)
(107,90,0)
(83,16,0)
(122,125,0)
(92,63,0)
(18,31,0)
(14,8,0)
(78,7,0)
(38,122,0)
(118,14,0)
(131,31,0)
(115,14,0)
(61,115,0)
(34,41,0)
(73,69,0)
(86,18,0)
(52,64,0)
(91,79,0)
(25,8,0)
(126,120,0)
(56,125,0)
(71,125,0)
(114,64,0)
(120,126,0)
(79,64,0)
(60,84,0)
(90,77,0)
(6,79,0)
(43,90,0)
(111,118,0)
(96,117,0)
(133,48,0)
(40,77,0)
(42,61,0)
(118,111,0)
(33,49,0)
(67,54,0)
(106,63,0)
(7,64,0)
(125,108,0)
(62,64,0)
(81,25,0)
(27,31,0)
(70,126,0)
(116,69,0)
(124,64,0)
(24,13,0)
(69,13,0)
(95,64,0)
(14,115,0)
(35,64,0)
(4,107,0)
(86,93,0)
(84,103,0)
(116,22,0)
(57,103,0)
(26,111,0)
(133,2,0)
(41,13,0)
(15,22,0)
(104,117,0)
(110,119,0)
(122,50,0)
(90,13,0)
(74,4,0)
(109,8,0)
(79,91,0)
(23,60,0)
(105,75,0)
(63,106,0)
(83,104,0)
(121,110,0)
(62,46,0)
(46,19,0)
(80,93,0)
(46,62,0)
(30,19,0)
(39,99,0)
(99,125,0)
(0,61,0)
(80,135,0)
(51,2,0)
(69,116,0)
(117,64,0)
(76,75,0)
(94,13,0)
(135,80,0)
(2,133,0)
(2,103,0)
(12,64,0)
(88,37,0)
(115,61,0)
(126,70,0)
(22,5,1)
(39,122,1)
(89,60,1)
(126,120,1)
(122,93,1)
(65,83,1)
(30,129,1)
(62,46,1)
(122,50,1)
(113,16,1)
(54,132,1)
(99,16,1)
(8,25,1)
(120,101,1)
(117,96,1)
(73,32,1)
(131,3,1)
(78,110,1)
(81,112,1)
(122,53,1)
(66,62,1)
(55,38,1)
(80,135,1)
(60,23,1)
(86,93,1)
(22,50,1)
(116,69,1)
(41,123,1)
(31,103,1)
(37,58,1)
(28,115,1)
(88,102,1)
(118,111,1)
(110,119,1)
(4,107,1)
(91,86,1)
(96,113,1)
(90,77,1)
(77,103,1)
(119,17,1)
(84,89,1)
(94,106,1)
(59,45,1)
(104,65,1)
(46,19,1)
(67,103,1)
(16,1,1)
(72,10,1)
(32,13,1)
(79,91,1)
(53,55,1)
(133,2,1)
(8,13,1)
(132,67,1)
(107,90,1)
(99,39,1)
(100,82,1)
(90,43,1)
(82,24,1)
(17,121,1)
(109,61,1)
(69,87,1)
(78,104,1)
(63,92,1)
(3,6,1)
(20,117,1)
(129,33,1)
(27,131,1)
(84,60,1)
(25,50,1)
(112,109,1)
(6,48,1)
(11,7,1)
(83,16,1)
(106,63,1)
(135,37,1)
(105,9,1)
(92,79,1)
(70,50,1)
(111,26,1)
(0,80,1)
(38,115,1)
(7,16,1)
(61,42,1)
(48,133,1)
(135,85,1)
(49,59,1)
(13,41,1)
(79,93,1)
(87,73,1)
(23,57,1)
(19,30,1)
(36,54,1)
(101,76,1)
(59,32,1)
(21,74,1)
(24,13,1)
(15,69,1)
(32,100,1)
(59,127,1)
(104,83,1)
(127,126,1)
(24,134,1)
(90,13,1)
(5,15,1)
(40,21,1)
(58,88,1)
(7,78,1)
(45,116,1)
(102,4,1)
(61,50,1)
(9,28,1)
(25,81,1)
(10,120,1)
(115,14,1)
(51,20,1)
(111,93,1)
(86,18,1)
(74,116,1)
(123,34,1)
(103,84,1)
(69,13,1)
(14,118,1)
(31,27,1)
(115,61,1)
(34,94,1)
(82,13,1)
(43,77,1)
(85,37,1)
(7,110,1)
(77,40,1)
(121,104,1)
(126,70,1)
(70,72,1)
(26,8,1)
(120,54,1)
(104,117,1)
(42,0,1)
(2,103,1)
(134,126,1)
(14,8,1)
(104,105,1)
(116,22,1)
(1,36,1)
(18,31,1)
(33,49,1)
(101,99,1)
(80,93,1)
(60,93,1)
(76,105,1)
(19,103,1)
(83,66,1)
(2,51,1)
(33,49,2)
(122,93,2)
(115,116,2)
(127,126,2)
(4,107,2)
(82,126,2)
(13,41,2)
(76,115,2)
(26,8,2)
(120,116,2)
(80,116,2)
(109,61,2)
(46,19,2)
(110,119,2)
(4,116,2)
(81,61,2)
(115,14,2)
(112,61,2)
(7,16,2)
(104,117,2)
(58,116,2)
(110,104,2)
(122,115,2)
(133,2,2)
(77,103,2)
(31,103,2)
(22,50,2)
(119,104,2)
(107,116,2)
(104,105,2)
(88,116,2)
(104,83,2)
(61,116,2)
(118,111,2)
(103,84,2)
(8,61,2)
(62,46,2)
(135,37,2)
(74,116,2)
(0,116,2)
(102,116,2)
(73,32,2)
(90,116,2)
(99,115,2)
(24,126,2)
(37,116,2)
(135,116,2)
(134,126,2)
(118,8,2)
(48,133,2)
(9,115,2)
(19,103,2)
(86,18,2)
(126,120,2)
(115,61,2)
(2,103,2)
(84,60,2)
(99,16,2)
(85,116,2)
(11,7,2)
(53,115,2)
(25,61,2)
(80,135,2)
(126,116,2)
(122,50,2)
(83,16,2)
(120,54,2)
(42,116,2)
(18,31,2)
(80,93,2)
(70,116,2)
(69,13,2)
(8,13,2)
(10,116,2)
(70,50,2)
(116,22,2)
(126,70,2)
(69,32,2)
(40,116,2)
(38,115,2)
(28,115,2)
(24,13,2)
(116,69,2)
(25,50,2)
(45,116,2)
(90,77,2)
(91,86,2)
(87,32,2)
(65,83,2)
(86,93,2)
(43,116,2)
(121,104,2)
(77,116,2)
(32,13,2)
(79,93,2)
(60,93,2)
(111,93,2)
(22,32,2)
(100,126,2)
(61,50,2)
(79,91,2)
(116,32,2)
(107,90,2)
(72,116,2)
(32,126,2)
(90,13,2)
(111,8,2)
(14,61,2)
(101,116,2)
(8,25,2)
(55,115,2)
(39,115,2)
(7,110,2)
(14,8,2)
(105,115,2)
(21,116,2)
(17,104,2)
(5,32,2)
(14,118,2)
(106,63,2)
(15,32,2)
-----------------------------------
(0,dpolicy)
(1,0)
(2,dcc->cmd_lock)
(3,sbi)
(4,pend_list = &dcc->pend_list[i])
(5,granularity)
(6,sbi)
(7,return issued;)
(8,i < dpolicy->io_aware_gran)
(9,true)
(10,dpolicy)
(11,RET)
(12,iter)
(13,i = MAX_PLIST_NUM - 1)
(14,i < dpolicy->io_aware_gran &&\n\\n\\t\\t\\t\\t\\t\\t\\t\\t!is_idle(sbi)
(15,dpolicy)
(16,issued = 0)
(17,1)
(18,&dcc->root)
(19,dcc->cmd_lock)
(20,dcc)
(21,dcc)
(22,dpolicy->granularity)
(23,sbi)
(24,i--)
(25,dpolicy->io_aware_gran)
(26,sbi)
(27,root)
(28,io_interrupted)
(29,if (dpolicy->io_aware && i < dpolicy->io_aware_gran &&\n\\n\\t\\t\\t\\t\\t\\t\\t\\t!is_idle(sbi)
(30,cmd_lock)
(31,dcc->root)
(32,i >= 0)
(33,blk_finish_plug(&plug)
(34,MAX_PLIST_NUM)
(35,plug)
(36,issued)
(37,dc->state)
(38,sbi)
(39,issued)
(40,pend_list)
(41,MAX_PLIST_NUM - 1)
(42,io_aware)
(43,i)
(44,issued)
(45,break;)
(46,&dcc->cmd_lock)
(47,tmp)
(48,mutex_lock(&dcc->cmd_lock)
(49,&plug)
(50,struct discard_policy *dpolicy)
(51,cmd_lock)
(52,out:)
(53,dc)
(54,iter = 0)
(55,dpolicy)
(56,skip:)
(57,dcc)
(58,state)
(59,plug)
(60,SM_I(sbi)
(61,dpolicy->io_aware)
(62,mutex_unlock(&dcc->cmd_lock)
(63,&plug)
(64,)
(65,io_interrupted)
(66,issued)
(67,iter)
(68,dcc)
(69,i + 1)
(70,dpolicy->max_requests)
(71,if (++iter >= dpolicy->max_requests)
(72,max_requests)
(73,i)
(74,pend_list)
(75,)
(76,goto skip;)
(77,dcc->pend_list)
(78,issued)
(79,f2fs_bug_on(sbi,\n\\n\\t\\t!__check_rb_tree_consistence(sbi, &dcc->root)
(80,f2fs_bug_on(sbi, dc->state != D_PREP)
(81,io_aware_gran)
(82,i)
(83,!issued)
(84,SM_I(sbi)
(85,D_PREP)
(86,__check_rb_tree_consistence(sbi, &dcc->root)
(87,1)
(88,dc)
(89,dcc_info)
(90,dcc->pend_list[i])
(91,!__check_rb_tree_consistence(sbi, &dcc->root)
(92,plug)
(93,struct f2fs_sb_info *sbi)
(94,i)
(95,dc)
(96,false)
(97,pend_list)
(98,if (i + 1 < dpolicy->granularity)
(99,issued++)
(100,0)
(101,iter)
(102,sbi)
(103,*dcc = SM_I(sbi)
(104,!issued && io_interrupted)
(105,io_interrupted = true)
(106,blk_start_plug(&plug)
(107,&dcc->pend_list[i])
(108,)
(109,i)
(110,issued = -1)
(111,is_idle(sbi)
(112,dpolicy)
(113,io_interrupted)
(114,i)
(115,dpolicy->io_aware && i < dpolicy->io_aware_gran &&\n\\n\\t\\t\\t\\t\\t\\t\\t\\t!is_idle(sbi)
(116,i + 1 < dpolicy->granularity)
(117,io_interrupted = false)
(118,!is_idle(sbi)
(119,-1)
(120,++iter)
(121,issued)
(122,__submit_discard_cmd(sbi, dpolicy, dc)
(123,1)
(124,io_interrupted)
(125,)
(126,++iter >= dpolicy->max_requests)
(127,goto out;)
(128,for (i = MAX_PLIST_NUM - 1; i >= 0; i--)
(129,dcc)
(130,if (!issued && io_interrupted)
(131,dcc)
(132,0)
(133,&dcc->cmd_lock)
(134,i)
(135,dc->state != D_PREP)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^