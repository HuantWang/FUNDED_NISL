-----label-----
0
-----code-----
static void goodB2G()
{
    int * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    }
    while(1)
    {
        /* FIX: Deallocate memory */
        free(data);
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
68,69
68,70
70,71
70,72
71,72
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,56,57,58,62,65,66,67,69,74,76,77
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G(){    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }}
static void
goodB2G()
goodB2G
{    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }
1
{        /* FIX: Deallocate memory */        free(data);        break;    }
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(5,18,0)
(19,15,0)
(10,31,0)
(40,19,0)
(13,7,0)
(40,32,0)
(22,19,0)
(37,12,0)
(25,36,0)
(26,19,0)
(1,27,0)
(32,31,0)
(20,40,0)
(33,5,0)
(30,27,0)
(37,19,0)
(32,40,0)
(3,28,0)
(18,5,0)
(5,41,0)
(37,1,0)
(31,36,0)
(36,31,0)
(16,37,0)
(28,3,0)
(38,15,0)
(39,5,0)
(24,7,0)
(29,27,0)
(31,32,0)
(5,19,0)
(7,41,0)
(0,26,0)
(23,12,0)
(14,26,0)
(18,15,0)
(41,15,0)
(34,1,0)
(17,27,0)
(21,15,0)
(19,40,0)
(8,3,0)
(28,2,0)
(40,20,0)
(35,1,0)
(7,19,0)
(6,41,0)
(37,1,1)
(25,10,1)
(4,23,1)
(41,6,1)
(7,19,1)
(5,39,1)
(40,20,1)
(39,33,1)
(23,37,1)
(37,16,1)
(5,41,1)
(11,21,1)
(6,7,1)
(34,35,1)
(24,28,1)
(16,11,1)
(3,8,1)
(9,1,1)
(32,31,1)
(4,11,1)
(40,32,1)
(26,0,1)
(1,34,1)
(21,18,1)
(22,9,1)
(0,14,1)
(10,22,1)
(8,26,1)
(11,9,1)
(13,24,1)
(33,41,1)
(18,5,1)
(37,19,1)
(26,19,1)
(36,25,1)
(5,19,1)
(7,13,1)
(28,3,1)
(31,36,1)
(24,26,1)
(19,40,1)
(14,19,1)
(7,9,2)
(19,40,2)
(23,11,2)
(26,19,2)
(32,31,2)
(40,20,2)
(40,9,2)
(19,9,2)
(18,5,2)
(13,9,2)
(16,11,2)
(28,3,2)
(10,9,2)
(31,9,2)
(3,26,2)
(5,9,2)
(37,11,2)
(36,9,2)
(0,9,2)
(18,9,2)
(5,19,2)
(39,9,2)
(8,26,2)
(40,32,2)
(5,41,2)
(24,9,2)
(22,9,2)
(14,9,2)
(41,9,2)
(6,9,2)
(31,36,2)
(25,9,2)
(37,19,2)
(33,9,2)
(7,19,2)
(28,26,2)
(26,9,2)
(37,1,2)
(21,9,2)
(32,9,2)
-----------------------------------
(0,NULL)
(1,data = NULL)
(2,)
(3,-1)
(4,RET)
(5,data[0])
(6,5)
(7,data[0])
(8,1)
(9,1)
(10,100)
(11,1)
(12,)
(13,0)
(14,data)
(15,)
(16,data)
(17,while(1)
(18,printIntLine(data[0])
(19,data = (int *)
(20,int *)
(21,break;)
(22,data)
(23,break;)
(24,data)
(25,int)
(26,data == NULL)
(27,)
(28,exit(-1)
(29,while(1)
(30,data)
(31,100*sizeof(int)
(32,malloc(100*sizeof(int)
(33,data)
(34,NULL)
(35,data)
(36,sizeof(int)
(37,free(data)
(38,if (data == NULL)
(39,0)
(40,(int *)
(41,data[0] = 5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^