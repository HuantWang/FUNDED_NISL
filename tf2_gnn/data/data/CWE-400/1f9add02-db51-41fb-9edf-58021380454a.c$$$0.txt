-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_03_bad()
{
    int64_t * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
73,75
76,77
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,38,42,43,47,49,54,56,61,62,63,67,70,71,74,75,77
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_03_bad(){    int64_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_malloc_03_bad()
CWE401_Memory_Leak__int64_t_malloc_03_bad
{    int64_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(11,9,0)
(10,24,0)
(24,32,0)
(1,32,0)
(27,15,0)
(29,14,0)
(34,9,0)
(12,27,0)
(7,19,0)
(25,14,0)
(17,3,0)
(5,33,0)
(15,26,0)
(6,14,0)
(35,24,0)
(30,21,0)
(34,20,0)
(18,33,0)
(22,28,0)
(15,27,0)
(23,16,0)
(0,26,0)
(3,26,0)
(13,19,0)
(32,27,0)
(26,3,0)
(36,19,0)
(4,28,0)
(7,24,0)
(2,16,0)
(8,21,0)
(24,7,0)
(21,32,0)
(9,34,0)
(32,19,0)
(33,14,0)
(26,15,0)
(27,32,0)
(27,12,0)
(18,5,1)
(32,27,1)
(22,4,1)
(16,23,1)
(30,32,1)
(26,3,1)
(7,24,1)
(4,7,1)
(10,13,1)
(9,11,1)
(21,8,1)
(21,32,1)
(13,21,1)
(24,32,1)
(3,17,1)
(33,18,1)
(23,2,1)
(8,30,1)
(28,22,1)
(4,16,1)
(11,21,1)
(34,9,1)
(24,35,1)
(35,10,1)
(31,28,1)
(15,26,1)
(0,1,1)
(27,12,1)
(17,0,1)
(1,16,1)
(13,34,1)
(2,33,1)
(27,15,1)
(32,16,2)
(27,16,2)
(26,3,2)
(15,26,2)
(34,21,2)
(27,15,2)
(21,16,2)
(15,16,2)
(30,16,2)
(27,12,2)
(24,16,2)
(26,16,2)
(21,32,2)
(7,24,2)
(10,16,2)
(32,27,2)
(0,16,2)
(34,9,2)
(17,16,2)
(13,16,2)
(9,21,2)
(7,16,2)
(24,32,2)
(35,16,2)
(11,21,2)
(1,16,2)
(8,16,2)
(3,16,2)
-----------------------------------
(0,100)
(1,data)
(2,5)
(3,sizeof(int64_t)
(4,5)
(5,data)
(6,if(5==5)
(7,printLongLongLine(data[0])
(8,NULL)
(9,-1)
(10,data)
(11,1)
(12,int64_t *)
(13,L)
(14,)
(15,malloc(100*sizeof(int64_t)
(16,5==5)
(17,int64_t)
(18,NULL)
(19,)
(20,)
(21,data == NULL)
(22,5)
(23,5)
(24,data[0])
(25,if(5==5)
(26,100*sizeof(int64_t)
(27,(int64_t *)
(28,5==5)
(29,data)
(30,data)
(31,RET)
(32,data = (int64_t *)
(33,data = NULL)
(34,exit(-1)
(35,0)
(36,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^