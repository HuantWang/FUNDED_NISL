-----label-----
0
-----code-----
static struct rack_sendmap *
rack_alloc(struct tcp_rack *rack)
{
	struct rack_sendmap *rsm;

	rsm = uma_zalloc(rack_zone, M_NOWAIT);
	if (rsm) {
alloc_done:
		counter_u64_add(rack_to_alloc, 1);
		rack->r_ctl.rc_num_maps_alloced++;
		return (rsm);
	}
	if (rack->rc_free_cnt) {
		counter_u64_add(rack_to_alloc_emerg, 1);
		rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);
		TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);
		rack->rc_free_cnt--;
		goto alloc_done;
	}
	return (NULL);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
14,15
15,16
15,17
16,17
18,19
18,20
21,22
22,23
22,24
23,24
25,26
25,27
25,28
26,27
28,29
30,31
32,33
32,34
33,34
35,36
35,37
35,38
36,37
36,38
38,39
39,40
39,41
39,42
40,41
42,43
45,46
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
55,56
57,58
57,59
58,59
58,60
59,60
62,63
62,64
62,65
62,66
62,67
63,64
64,65
64,66
64,67
65,66
67,68
70,71
71,72
71,73
72,73
74,75
74,76
75,76
77,78
78,79
78,80
79,80
79,81
80,81
84,85
85,86
85,87
85,88
85,89
86,87
88,89
89,90
89,91
90,91
90,92
91,92
95,96
97,98
99,100
100,101
101,102
101,103
102,103
105,106
107,108
108,109
109,110
-----nextToken-----
3,5,6,9,11,12,17,19,20,24,27,29,31,34,37,41,43,44,50,51,52,56,60,61,66,68,69,73,76,81,82,83,87,92,93,94,96,98,103,104,106,110
-----computeFrom-----
22,23
22,24
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static struct rack_sendmap *rack_alloc(struct tcp_rack *rack){	struct rack_sendmap *rsm;	rsm = uma_zalloc(rack_zone, M_NOWAIT);	if (rsm) {alloc_done:		counter_u64_add(rack_to_alloc, 1);		rack->r_ctl.rc_num_maps_alloced++;		return (rsm);	}	if (rack->rc_free_cnt) {		counter_u64_add(rack_to_alloc_emerg, 1);		rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);		TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);		rack->rc_free_cnt--;		goto alloc_done;	}	return (NULL);}
static struct rack_sendmap
rack_sendmap
*rack_alloc(struct tcp_rack *rack)
*
rack_alloc
struct tcp_rack *rack
struct tcp_rack
tcp_rack
*rack
*
rack
{	struct rack_sendmap *rsm;	rsm = uma_zalloc(rack_zone, M_NOWAIT);	if (rsm) {alloc_done:		counter_u64_add(rack_to_alloc, 1);		rack->r_ctl.rc_num_maps_alloced++;		return (rsm);	}	if (rack->rc_free_cnt) {		counter_u64_add(rack_to_alloc_emerg, 1);		rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);		TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);		rack->rc_free_cnt--;		goto alloc_done;	}	return (NULL);}
struct rack_sendmap *rsm;
struct rack_sendmap *rsm;
struct rack_sendmap
rack_sendmap
*rsm
*
rsm
rsm = uma_zalloc(rack_zone, M_NOWAIT);
rsm = uma_zalloc(rack_zone, M_NOWAIT)
rsm
rsm
uma_zalloc(rack_zone, M_NOWAIT)
uma_zalloc
uma_zalloc
rack_zone
rack_zone
M_NOWAIT
M_NOWAIT
if (rsm) {alloc_done:		counter_u64_add(rack_to_alloc, 1);		rack->r_ctl.rc_num_maps_alloced++;		return (rsm);	}
rsm
rsm
{alloc_done:		counter_u64_add(rack_to_alloc, 1);		rack->r_ctl.rc_num_maps_alloced++;		return (rsm);	}
alloc_done:		counter_u64_add(rack_to_alloc, 1);
alloc_done
counter_u64_add(rack_to_alloc, 1);
counter_u64_add(rack_to_alloc, 1)
counter_u64_add
counter_u64_add
rack_to_alloc
rack_to_alloc
1
rack->r_ctl.rc_num_maps_alloced++;
rack->r_ctl.rc_num_maps_alloced++
rack->r_ctl.rc_num_maps_alloced
rack->r_ctl
rack
rack
r_ctl
rc_num_maps_alloced
return (rsm);
(rsm)
rsm
rsm
if (rack->rc_free_cnt) {		counter_u64_add(rack_to_alloc_emerg, 1);		rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);		TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);		rack->rc_free_cnt--;		goto alloc_done;	}
rack->rc_free_cnt
rack
rack
rc_free_cnt
{		counter_u64_add(rack_to_alloc_emerg, 1);		rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);		TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);		rack->rc_free_cnt--;		goto alloc_done;	}
counter_u64_add(rack_to_alloc_emerg, 1);
counter_u64_add(rack_to_alloc_emerg, 1)
counter_u64_add
counter_u64_add
rack_to_alloc_emerg
rack_to_alloc_emerg
1
rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);
rsm = TAILQ_FIRST(&rack->r_ctl.rc_free)
rsm
rsm
TAILQ_FIRST(&rack->r_ctl.rc_free)
TAILQ_FIRST
TAILQ_FIRST
&rack->r_ctl.rc_free
rack->r_ctl.rc_free
rack->r_ctl
rack
rack
r_ctl
rc_free
TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);
TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next)
TAILQ_REMOVE
TAILQ_REMOVE
&rack->r_ctl.rc_free
rack->r_ctl.rc_free
rack->r_ctl
rack
rack
r_ctl
rc_free
rsm
rsm
r_next
r_next
rack->rc_free_cnt--;
rack->rc_free_cnt--
rack->rc_free_cnt
rack
rack
rc_free_cnt
goto alloc_done;
alloc_done
return (NULL);
(NULL)
NULL
NULL
-----joern-----
(23,5,0)
(4,46,0)
(3,53,0)
(31,15,0)
(10,15,0)
(48,53,0)
(44,45,0)
(8,28,0)
(47,36,0)
(50,42,0)
(26,29,0)
(46,21,0)
(30,11,0)
(12,21,0)
(24,17,0)
(10,17,0)
(6,42,0)
(42,6,0)
(51,53,0)
(49,19,0)
(53,51,0)
(25,51,0)
(20,31,0)
(36,47,0)
(39,11,0)
(40,30,0)
(1,19,0)
(54,10,0)
(53,10,0)
(32,11,0)
(9,29,0)
(19,5,0)
(56,28,0)
(33,56,0)
(55,20,0)
(22,20,0)
(20,28,0)
(56,25,0)
(43,25,0)
(13,47,0)
(53,15,0)
(5,11,0)
(7,36,0)
(17,24,0)
(52,56,0)
(5,19,0)
(37,8,0)
(0,36,0)
(45,21,0)
(13,21,0)
(17,10,0)
(41,45,0)
(38,8,0)
(34,6,0)
(27,11,0)
(46,10,0)
(29,15,0)
(42,28,0)
(51,25,0)
(6,24,0)
(25,56,0)
(31,20,0)
(47,13,0)
(36,28,0)
(46,5,0)
(2,15,0)
(16,46,0)
(35,42,0)
(18,47,0)
(4,30,0)
(24,6,0)
(40,8,1)
(17,24,1)
(41,44,1)
(2,31,1)
(31,20,1)
(52,33,1)
(20,28,1)
(14,5,1)
(10,17,1)
(48,51,1)
(3,48,1)
(46,10,1)
(53,51,1)
(36,7,1)
(47,36,1)
(4,30,1)
(6,34,1)
(36,28,1)
(16,13,1)
(42,28,1)
(24,6,1)
(56,52,1)
(33,10,1)
(42,35,1)
(19,1,1)
(5,19,1)
(37,14,1)
(7,0,1)
(8,38,1)
(50,54,1)
(51,25,1)
(0,45,1)
(18,36,1)
(26,9,1)
(4,46,1)
(8,28,1)
(44,2,1)
(29,26,1)
(53,3,1)
(47,18,1)
(13,47,1)
(20,22,1)
(54,29,1)
(25,43,1)
(49,23,1)
(46,16,1)
(22,55,1)
(25,56,1)
(43,56,1)
(53,10,1)
(35,50,1)
(9,8,1)
(1,49,1)
(55,53,1)
(44,14,1)
(56,28,1)
(34,42,1)
(30,40,1)
(38,37,1)
(6,42,1)
(46,5,1)
(45,41,1)
(31,8,2)
(38,14,2)
(51,25,2)
(56,8,2)
(53,8,2)
(4,30,2)
(34,8,2)
(13,8,2)
(43,8,2)
(25,56,2)
(45,8,2)
(47,36,2)
(47,8,2)
(48,8,2)
(8,28,2)
(22,8,2)
(6,8,2)
(0,8,2)
(47,14,2)
(37,14,2)
(30,8,2)
(29,8,2)
(7,8,2)
(10,8,2)
(36,28,2)
(45,14,2)
(20,8,2)
(8,14,2)
(41,14,2)
(54,8,2)
(35,8,2)
(17,8,2)
(46,8,2)
(44,14,2)
(55,8,2)
(18,14,2)
(16,14,2)
(42,8,2)
(13,14,2)
(51,8,2)
(46,10,2)
(16,8,2)
(40,8,2)
(9,8,2)
(3,8,2)
(24,8,2)
(31,20,2)
(4,46,2)
(46,5,2)
(17,24,2)
(56,28,2)
(36,8,2)
(13,47,2)
(10,17,2)
(41,8,2)
(53,10,2)
(6,42,2)
(24,6,2)
(25,8,2)
(33,8,2)
(0,14,2)
(53,51,2)
(18,8,2)
(26,8,2)
(44,8,2)
(5,19,2)
(52,8,2)
(50,8,2)
(36,14,2)
(20,28,2)
(7,14,2)
(42,28,2)
(2,8,2)
(46,14,2)
-----------------------------------
(0,rack)
(1,M_NOWAIT)
(2,goto alloc_done;)
(3,r_next)
(4,RET)
(5,rsm = uma_zalloc(rack_zone, M_NOWAIT)
(6,rack->r_ctl.rc_free)
(7,r_ctl)
(8,rack->rc_free_cnt)
(9,rack_to_alloc_emerg)
(10,rsm = TAILQ_FIRST(&rack->r_ctl.rc_free)
(11,)
(12,alloc_done:)
(13,rack->r_ctl.rc_num_maps_alloced++)
(14,rsm)
(15,)
(16,rsm)
(17,TAILQ_FIRST(&rack->r_ctl.rc_free)
(18,rc_num_maps_alloced)
(19,uma_zalloc(rack_zone, M_NOWAIT)
(20,rack->rc_free_cnt)
(21,)
(22,rc_free_cnt)
(23,rsm)
(24,&rack->r_ctl.rc_free)
(25,rack->r_ctl.rc_free)
(26,1)
(27,if (rsm)
(28,struct tcp_rack *rack)
(29,counter_u64_add(rack_to_alloc_emerg, 1)
(30,return (NULL)
(31,rack->rc_free_cnt--)
(32,rsm)
(33,rack)
(34,rc_free)
(35,r_ctl)
(36,rack->r_ctl)
(37,rack)
(38,rc_free_cnt)
(39,if (rack->rc_free_cnt)
(40,NULL)
(41,1)
(42,rack->r_ctl)
(43,rc_free)
(44,rack_to_alloc)
(45,counter_u64_add(rack_to_alloc, 1)
(46,return (rsm)
(47,rack->r_ctl.rc_num_maps_alloced)
(48,rsm)
(49,rack_zone)
(50,rack)
(51,&rack->r_ctl.rc_free)
(52,r_ctl)
(53,TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next)
(54,rsm)
(55,rack)
(56,rack->r_ctl)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^