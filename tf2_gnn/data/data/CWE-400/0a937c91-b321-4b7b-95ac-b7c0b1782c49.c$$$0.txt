-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(staticReturnsTrue())
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
41,42
43,44
43,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
56,57
56,58
57,58
57,59
58,59
61,62
63,64
64,65
66,67
67,68
68,69
68,70
69,70
-----nextToken-----
2,4,8,10,14,16,20,25,26,31,32,36,42,44,46,51,52,55,59,60,62,65,70,71
-----computeFrom-----
12,13
12,14
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
staticReturnsFalse()
staticReturnsFalse
staticReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(staticReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(29,8,0)
(28,0,0)
(36,10,0)
(3,0,0)
(17,14,0)
(12,11,0)
(10,24,0)
(18,5,0)
(22,33,0)
(9,35,0)
(10,0,0)
(31,8,0)
(34,13,0)
(37,36,0)
(24,13,0)
(0,16,0)
(32,30,0)
(10,36,0)
(7,10,0)
(35,25,0)
(11,8,0)
(1,14,0)
(6,14,0)
(19,32,0)
(36,8,0)
(24,14,0)
(10,23,0)
(23,10,0)
(26,32,0)
(20,5,0)
(4,22,0)
(5,32,0)
(13,24,0)
(21,24,0)
(5,20,1)
(4,27,1)
(10,0,1)
(37,11,1)
(28,3,1)
(18,15,1)
(11,12,1)
(37,8,1)
(9,36,1)
(10,23,1)
(3,27,1)
(36,10,1)
(12,35,1)
(15,22,1)
(24,13,1)
(2,36,1)
(34,21,1)
(7,37,1)
(10,24,1)
(0,28,1)
(22,4,1)
(29,31,1)
(13,34,1)
(31,5,1)
(36,8,1)
(10,7,1)
(2,15,1)
(11,8,1)
(8,29,1)
(27,24,1)
(20,18,1)
(15,0,1)
(35,9,1)
(10,24,2)
(37,15,2)
(36,15,2)
(7,15,2)
(11,36,2)
(36,10,2)
(8,15,2)
(10,23,2)
(31,15,2)
(35,36,2)
(11,8,2)
(37,36,2)
(12,36,2)
(3,27,2)
(4,27,2)
(10,36,2)
(36,36,2)
(5,15,2)
(29,15,2)
(28,27,2)
(20,15,2)
(22,27,2)
(10,0,2)
(18,15,2)
(9,36,2)
(7,36,2)
(0,27,2)
(36,8,2)
(24,13,2)
(10,15,2)
-----------------------------------
(0,count = 20)
(1,if(staticReturnsFalse()
(2,RET)
(3,count)
(4,"Benign, fixed string")
(5,i = 0)
(6,if(staticReturnsTrue()
(7,count)
(8,i = 0)
(9,"Hello")
(10,(size_t)
(11,i++)
(12,i)
(13,-1)
(14,)
(15,staticReturnsTrue()
(16,)
(17,count)
(18,i)
(19,for (i = 0; i < (size_t)
(20,0)
(21,count)
(22,printLine("Benign, fixed string")
(23,size_t)
(24,count = -1)
(25,)
(26,i)
(27,staticReturnsFalse()
(28,20)
(29,0)
(30,)
(31,i)
(32,)
(33,)
(34,1)
(35,printLine("Hello")
(36,i < (size_t)
(37,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^