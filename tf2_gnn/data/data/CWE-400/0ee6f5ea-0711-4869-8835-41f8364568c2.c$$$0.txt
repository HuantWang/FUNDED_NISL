-----label-----
1
-----code-----
int peer_queue_unicast(PolicySnapshot *sender_policy, NameSet *sender_names, ReplyOwner *sender_replies, User *sender_user, uint64_t sender_id, Peer *receiver, Message *message) {
        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;
        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
        uint32_t serial;
        int r;

        serial = message_read_serial(message);

        if (sender_replies && serial) {
                r = reply_slot_new(&slot, &receiver->replies, sender_replies,
                                   receiver->user, sender_user, sender_id, serial);
                if (r == REPLY_E_EXISTS)
                        return PEER_E_EXPECTED_REPLY_EXISTS;
                else if (r == REPLY_E_QUOTA)
                        return PEER_E_QUOTA;
                else if (r)
                        return error_fold(r);
        }

        r = policy_snapshot_check_receive(receiver->policy,
                                          sender_names,
                                          message->metadata.fields.interface,
                                          message->metadata.fields.member,
                                          message->metadata.fields.path,
                                          message->header->type,
                                          false,
                                          message->metadata.fields.unix_fds);
        if (r) {
                if (r == POLICY_E_ACCESS_DENIED) {
                        log_append_here(receiver->bus->log, LOG_WARNING, 0);
                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);
                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",
                                        message->metadata.fields.destination,
                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",
                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,
                                        sender_id);
                        if (r)
                                return error_fold(r);

                        return PEER_E_RECEIVE_DENIED;
                }

                return error_fold(r);
        }

        r = policy_snapshot_check_send(sender_policy,
                                       receiver->seclabel,
                                       &receiver_names,
                                       message->metadata.fields.interface,
                                       message->metadata.fields.member,
                                       message->metadata.fields.path,
                                       message->header->type,
                                       false,
                                       message->metadata.fields.unix_fds);
        if (r) {
                if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {
                        log_append_here(receiver->bus->log, LOG_WARNING, 0);
                        bus_log_append_policy_send(receiver->bus,
                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),
                                                   sender_id, receiver->id, sender_names, &receiver_names,
                                                   sender_policy->seclabel, receiver->policy->seclabel, message);
                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",
                                        sender_id,
                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",
                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,
                                        message->metadata.fields.destination);
                        if (r)
                                return error_fold(r);

                        return PEER_E_SEND_DENIED;
                }

                return error_fold(r);
        }

        r = connection_queue(&receiver->connection, sender_user, message);
        if (r) {
                if (r == CONNECTION_E_QUOTA)
                        return PEER_E_QUOTA;
                else if (r == CONNECTION_E_UNEXPECTED_FDS)
                        return PEER_E_UNEXPECTED_FDS;

                return error_fold(r);
        }

        slot = NULL;
        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
24,25
26,27
26,28
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
40,41
40,42
41,42
43,44
43,45
46,47
46,48
46,49
46,50
46,51
46,52
46,53
46,54
46,55
46,56
46,57
46,58
46,59
46,60
46,61
46,62
47,48
48,49
48,50
49,50
51,52
52,53
54,55
55,56
56,57
56,58
57,58
59,60
59,61
59,62
62,63
63,64
65,66
66,67
66,68
67,68
69,70
69,71
71,72
72,73
72,74
73,74
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
96,97
98,99
100,101
100,102
101,102
101,103
102,103
104,105
106,107
106,108
107,108
108,109
108,110
109,110
111,112
111,113
111,114
111,115
111,116
111,117
111,118
111,119
112,113
114,115
115,116
117,118
118,119
118,120
119,120
122,123
124,125
124,126
125,126
128,129
130,131
132,133
134,135
134,136
134,137
135,136
135,137
136,137
138,139
140,141
141,142
143,144
143,145
143,146
144,145
144,146
145,146
147,148
149,150
150,151
152,153
152,154
153,154
155,156
156,157
156,158
157,158
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
165,170
165,171
165,172
165,173
165,174
166,167
168,169
168,170
169,170
172,173
174,175
174,176
175,176
175,177
176,177
176,178
177,178
182,183
182,184
183,184
183,185
184,185
184,186
185,186
190,191
190,192
191,192
191,193
192,193
192,194
193,194
198,199
198,200
199,200
199,201
200,201
205,206
205,207
206,207
206,208
207,208
207,209
208,209
213,214
213,215
214,215
216,217
216,218
217,218
217,219
218,219
218,220
219,220
221,222
223,224
223,225
223,226
223,227
223,228
224,225
225,226
225,227
225,228
225,229
226,227
228,229
228,230
229,230
229,231
230,231
234,235
237,238
238,239
238,240
238,241
238,242
238,243
238,244
238,245
239,240
241,242
241,243
242,243
245,246
245,247
246,247
249,250
251,252
253,254
254,255
256,257
258,259
259,260
259,261
260,261
262,263
262,264
262,265
262,266
262,267
262,268
262,269
262,270
262,271
263,264
265,266
265,267
266,267
266,268
267,268
272,273
272,274
273,274
273,275
274,275
274,276
275,276
280,281
280,282
280,283
281,282
281,283
282,283
282,284
283,284
283,285
284,285
288,289
292,293
292,294
293,294
293,295
294,295
294,296
295,296
300,301
300,302
301,302
301,303
302,303
302,304
303,304
308,309
308,310
309,310
309,311
310,311
310,312
311,312
316,317
318,319
318,320
319,320
321,322
322,323
322,324
323,324
325,326
327,328
328,329
330,331
331,332
331,333
332,333
334,335
336,337
337,338
337,339
338,339
340,341
340,342
340,343
340,344
340,345
340,346
340,347
340,348
340,349
340,350
341,342
343,344
345,346
345,347
346,347
349,350
350,351
352,353
352,354
353,354
353,355
354,355
354,356
355,356
360,361
360,362
361,362
361,363
362,363
362,364
363,364
368,369
368,370
369,370
369,371
370,371
370,372
371,372
376,377
376,378
377,378
377,379
378,379
383,384
383,385
384,385
384,386
385,386
385,387
386,387
391,392
391,393
392,393
394,395
394,396
395,396
395,397
396,397
396,398
397,398
397,399
398,399
400,401
402,403
402,404
403,404
405,406
407,408
407,409
407,410
407,411
407,412
408,409
409,410
409,411
409,412
409,413
410,411
412,413
412,414
413,414
413,415
414,415
418,419
421,422
422,423
422,424
422,425
422,426
422,427
422,428
422,429
422,430
422,431
422,432
423,424
425,426
425,427
426,427
429,430
430,431
430,432
430,433
431,432
431,433
432,433
434,435
436,437
438,439
440,441
442,443
442,444
443,444
446,447
448,449
449,450
451,452
451,453
452,453
455,456
455,457
456,457
456,458
457,458
461,462
463,464
464,465
464,466
465,466
467,468
467,469
467,470
467,471
467,472
467,473
467,474
467,475
467,476
468,469
470,471
470,472
471,472
471,473
472,473
477,478
479,480
479,481
479,482
480,481
480,482
481,482
481,483
482,483
482,484
483,484
487,488
491,492
491,493
492,493
492,494
493,494
493,495
494,495
499,500
499,501
500,501
500,502
501,502
501,503
502,503
507,508
507,509
508,509
508,510
509,510
509,511
510,511
515,516
515,517
516,517
516,518
517,518
517,519
518,519
523,524
523,525
524,525
526,527
527,528
527,529
528,529
530,531
532,533
533,534
535,536
536,537
536,538
537,538
539,540
541,542
542,543
542,544
543,544
545,546
545,547
545,548
545,549
546,547
548,549
549,550
549,551
550,551
553,554
555,556
557,558
557,559
558,559
560,561
560,562
561,562
561,563
561,564
562,563
562,564
563,564
565,566
567,568
568,569
570,571
570,572
571,572
571,573
572,573
574,575
576,577
577,578
579,580
580,581
580,582
581,582
583,584
585,586
586,587
586,588
587,588
589,590
591,592
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,25,27,28,31,33,36,38,39,42,44,45,50,53,58,60,61,64,68,70,74,78,79,83,85,88,90,94,97,99,103,105,110,113,116,120,121,123,126,127,129,131,133,137,139,142,146,148,151,154,158,160,164,167,170,171,173,178,179,180,181,186,187,188,189,194,195,196,197,201,202,203,204,209,210,211,212,215,220,222,227,231,232,233,235,236,240,243,244,247,248,250,252,255,257,261,264,268,269,270,271,276,277,278,279,285,286,287,289,290,291,296,297,298,299,304,305,306,307,312,313,314,315,317,320,324,326,329,333,335,339,342,344,347,348,351,356,357,358,359,364,365,366,367,372,373,374,375,379,380,381,382,387,388,389,390,393,399,401,404,406,411,415,416,417,419,420,424,427,428,433,435,437,439,441,444,445,447,450,453,454,458,459,460,462,466,469,473,474,475,476,478,484,485,486,488,489,490,495,496,497,498,503,504,505,506,511,512,513,514,519,520,521,522,525,529,531,534,538,540,544,547,551,552,554,556,559,564,566,569,573,575,578,582,584,588,590,592
-----computeFrom-----
92,93
92,94
101,102
101,103
108,109
108,110
135,136
135,137
144,145
144,146
162,163
162,164
218,219
218,220
259,260
259,261
281,282
281,283
337,338
337,339
396,397
396,398
397,398
397,399
402,403
402,404
431,432
431,433
464,465
464,466
480,481
480,482
542,543
542,544
562,563
562,564
571,572
571,573
586,587
586,588
-----guardedBy-----
103,123
105,133
220,326
404,531
401,435
-----guardedByNegation-----
137,160
146,160
564,573
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ConditionalExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int peer_queue_unicast(PolicySnapshot *sender_policy, NameSet *sender_names, ReplyOwner *sender_replies, User *sender_user, uint64_t sender_id, Peer *receiver, Message *message) {        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);        uint32_t serial;        int r;        serial = message_read_serial(message);        if (sender_replies && serial) {                r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial);                if (r == REPLY_E_EXISTS)                        return PEER_E_EXPECTED_REPLY_EXISTS;                else if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);        }        r = policy_snapshot_check_receive(receiver->policy,                                          sender_names,                                          message->metadata.fields.interface,                                          message->metadata.fields.member,                                          message->metadata.fields.path,                                          message->header->type,                                          false,                                          message->metadata.fields.unix_fds);        if (r) {                if (r == POLICY_E_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }                return error_fold(r);        }        r = policy_snapshot_check_send(sender_policy,                                       receiver->seclabel,                                       &receiver_names,                                       message->metadata.fields.interface,                                       message->metadata.fields.member,                                       message->metadata.fields.path,                                       message->header->type,                                       false,                                       message->metadata.fields.unix_fds);        if (r) {                if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }                return error_fold(r);        }        r = connection_queue(&receiver->connection, sender_user, message);        if (r) {                if (r == CONNECTION_E_QUOTA)                        return PEER_E_QUOTA;                else if (r == CONNECTION_E_UNEXPECTED_FDS)                        return PEER_E_UNEXPECTED_FDS;                return error_fold(r);        }        slot = NULL;        return 0;}
int
peer_queue_unicast(PolicySnapshot *sender_policy, NameSet *sender_names, ReplyOwner *sender_replies, User *sender_user, uint64_t sender_id, Peer *receiver, Message *message)
peer_queue_unicast
PolicySnapshot *sender_policy
PolicySnapshot
PolicySnapshot
*sender_policy
*
sender_policy
NameSet *sender_names
NameSet
NameSet
*sender_names
*
sender_names
ReplyOwner *sender_replies
ReplyOwner
ReplyOwner
*sender_replies
*
sender_replies
User *sender_user
User
User
*sender_user
*
sender_user
uint64_t sender_id
uint64_t
uint64_t
sender_id
sender_id
Peer *receiver
Peer
Peer
*receiver
*
receiver
Message *message
Message
Message
*message
*
message
{        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);        uint32_t serial;        int r;        serial = message_read_serial(message);        if (sender_replies && serial) {                r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial);                if (r == REPLY_E_EXISTS)                        return PEER_E_EXPECTED_REPLY_EXISTS;                else if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);        }        r = policy_snapshot_check_receive(receiver->policy,                                          sender_names,                                          message->metadata.fields.interface,                                          message->metadata.fields.member,                                          message->metadata.fields.path,                                          message->header->type,                                          false,                                          message->metadata.fields.unix_fds);        if (r) {                if (r == POLICY_E_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }                return error_fold(r);        }        r = policy_snapshot_check_send(sender_policy,                                       receiver->seclabel,                                       &receiver_names,                                       message->metadata.fields.interface,                                       message->metadata.fields.member,                                       message->metadata.fields.path,                                       message->header->type,                                       false,                                       message->metadata.fields.unix_fds);        if (r) {                if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }                return error_fold(r);        }        r = connection_queue(&receiver->connection, sender_user, message);        if (r) {                if (r == CONNECTION_E_QUOTA)                        return PEER_E_QUOTA;                else if (r == CONNECTION_E_UNEXPECTED_FDS)                        return PEER_E_UNEXPECTED_FDS;                return error_fold(r);        }        slot = NULL;        return 0;}
_c_cleanup_(reply_slot_freep)
_c_cleanup_(reply_slot_freep)
_c_cleanup_
_c_cleanup_
(reply_slot_freep)
reply_slot_freep
reply_slot_freep
)
ReplySlot *slot = NULL;
ReplySlot *slot = NULL;
ReplySlot
ReplySlot
*slot = NULL
*
slot
= NULL
NULL
NULL
NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
NameSet
NameSet
receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
receiver_names
= NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
NAME_SET_INIT_FROM_OWNER
NAME_SET_INIT_FROM_OWNER
&receiver->owned_names
receiver->owned_names
receiver
receiver
owned_names
uint32_t serial;
uint32_t serial;
uint32_t
uint32_t
serial
serial
int r;
int r;
int
r
r
serial = message_read_serial(message);
serial = message_read_serial(message)
serial
serial
message_read_serial(message)
message_read_serial
message_read_serial
message
message
if (sender_replies && serial) {                r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial);                if (r == REPLY_E_EXISTS)                        return PEER_E_EXPECTED_REPLY_EXISTS;                else if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);        }
sender_replies && serial
sender_replies
sender_replies
serial
serial
{                r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial);                if (r == REPLY_E_EXISTS)                        return PEER_E_EXPECTED_REPLY_EXISTS;                else if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);        }
r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial);
r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial)
r
r
reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial)
reply_slot_new
reply_slot_new
&slot
slot
slot
&receiver->replies
receiver->replies
receiver
receiver
replies
sender_replies
sender_replies
receiver->user
receiver
receiver
user
sender_user
sender_user
sender_id
sender_id
serial
serial
if (r == REPLY_E_EXISTS)                        return PEER_E_EXPECTED_REPLY_EXISTS;                else if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);
r == REPLY_E_EXISTS
r
r
REPLY_E_EXISTS
REPLY_E_EXISTS
return PEER_E_EXPECTED_REPLY_EXISTS;
PEER_E_EXPECTED_REPLY_EXISTS
PEER_E_EXPECTED_REPLY_EXISTS
if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);
r == REPLY_E_QUOTA
r
r
REPLY_E_QUOTA
REPLY_E_QUOTA
return PEER_E_QUOTA;
PEER_E_QUOTA
PEER_E_QUOTA
if (r)                        return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
r = policy_snapshot_check_receive(receiver->policy,                                          sender_names,                                          message->metadata.fields.interface,                                          message->metadata.fields.member,                                          message->metadata.fields.path,                                          message->header->type,                                          false,                                          message->metadata.fields.unix_fds);
r = policy_snapshot_check_receive(receiver->policy,                                          sender_names,                                          message->metadata.fields.interface,                                          message->metadata.fields.member,                                          message->metadata.fields.path,                                          message->header->type,                                          false,                                          message->metadata.fields.unix_fds)
r
r
policy_snapshot_check_receive(receiver->policy,                                          sender_names,                                          message->metadata.fields.interface,                                          message->metadata.fields.member,                                          message->metadata.fields.path,                                          message->header->type,                                          false,                                          message->metadata.fields.unix_fds)
policy_snapshot_check_receive
policy_snapshot_check_receive
receiver->policy
receiver
receiver
policy
sender_names
sender_names
message->metadata.fields.interface
message->metadata.fields
message->metadata
message
message
metadata
fields
interface
message->metadata.fields.member
message->metadata.fields
message->metadata
message
message
metadata
fields
member
message->metadata.fields.path
message->metadata.fields
message->metadata
message
message
metadata
fields
path
message->header->type
message->header
message
message
header
type
false
message->metadata.fields.unix_fds
message->metadata.fields
message->metadata
message
message
metadata
fields
unix_fds
if (r) {                if (r == POLICY_E_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }                return error_fold(r);        }
r
r
{                if (r == POLICY_E_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }                return error_fold(r);        }
if (r == POLICY_E_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }
r == POLICY_E_ACCESS_DENIED
r
r
POLICY_E_ACCESS_DENIED
POLICY_E_ACCESS_DENIED
{                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }
log_append_here(receiver->bus->log, LOG_WARNING, 0);
log_append_here(receiver->bus->log, LOG_WARNING, 0)
log_append_here
log_append_here
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
LOG_WARNING
LOG_WARNING
0
bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);
bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message)
bus_log_append_policy_receive
bus_log_append_policy_receive
receiver->bus
receiver
receiver
bus
receiver->id
receiver
receiver
id
sender_id
sender_id
sender_names
sender_names
&receiver_names
receiver_names
receiver_names
message
message
r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);
r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id)
r
r
log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id)
log_commitf
log_commitf
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
"A security policy denied %s to receive %s %s:%s.%s from :1.%llu."
message->metadata.fields.destination
message->metadata.fields
message->metadata
message
message
metadata
fields
destination
message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal"
message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL
message->header->type
message->header
message
message
header
type
DBUS_MESSAGE_TYPE_METHOD_CALL
DBUS_MESSAGE_TYPE_METHOD_CALL
"method call"
"signal"
message->metadata.fields.path
message->metadata.fields
message->metadata
message
message
metadata
fields
path
message->metadata.fields.interface
message->metadata.fields
message->metadata
message
message
metadata
fields
interface
message->metadata.fields.member
message->metadata.fields
message->metadata
message
message
metadata
fields
member
sender_id
sender_id
if (r)                                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return PEER_E_RECEIVE_DENIED;
PEER_E_RECEIVE_DENIED
PEER_E_RECEIVE_DENIED
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
r = policy_snapshot_check_send(sender_policy,                                       receiver->seclabel,                                       &receiver_names,                                       message->metadata.fields.interface,                                       message->metadata.fields.member,                                       message->metadata.fields.path,                                       message->header->type,                                       false,                                       message->metadata.fields.unix_fds);
r = policy_snapshot_check_send(sender_policy,                                       receiver->seclabel,                                       &receiver_names,                                       message->metadata.fields.interface,                                       message->metadata.fields.member,                                       message->metadata.fields.path,                                       message->header->type,                                       false,                                       message->metadata.fields.unix_fds)
r
r
policy_snapshot_check_send(sender_policy,                                       receiver->seclabel,                                       &receiver_names,                                       message->metadata.fields.interface,                                       message->metadata.fields.member,                                       message->metadata.fields.path,                                       message->header->type,                                       false,                                       message->metadata.fields.unix_fds)
policy_snapshot_check_send
policy_snapshot_check_send
sender_policy
sender_policy
receiver->seclabel
receiver
receiver
seclabel
&receiver_names
receiver_names
receiver_names
message->metadata.fields.interface
message->metadata.fields
message->metadata
message
message
metadata
fields
interface
message->metadata.fields.member
message->metadata.fields
message->metadata
message
message
metadata
fields
member
message->metadata.fields.path
message->metadata.fields
message->metadata
message
message
metadata
fields
path
message->header->type
message->header
message
message
header
type
false
message->metadata.fields.unix_fds
message->metadata.fields
message->metadata
message
message
metadata
fields
unix_fds
if (r) {                if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }                return error_fold(r);        }
r
r
{                if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }                return error_fold(r);        }
if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }
r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED
r == POLICY_E_ACCESS_DENIED
r
r
POLICY_E_ACCESS_DENIED
POLICY_E_ACCESS_DENIED
r == POLICY_E_SELINUX_ACCESS_DENIED
r
r
POLICY_E_SELINUX_ACCESS_DENIED
POLICY_E_SELINUX_ACCESS_DENIED
{                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }
log_append_here(receiver->bus->log, LOG_WARNING, 0);
log_append_here(receiver->bus->log, LOG_WARNING, 0)
log_append_here
log_append_here
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
LOG_WARNING
LOG_WARNING
0
bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);
bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message)
bus_log_append_policy_send
bus_log_append_policy_send
receiver->bus
receiver
receiver
bus
(r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX)
r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX
r == POLICY_E_ACCESS_DENIED
r
r
POLICY_E_ACCESS_DENIED
POLICY_E_ACCESS_DENIED
BUS_LOG_POLICY_TYPE_INTERNAL
BUS_LOG_POLICY_TYPE_INTERNAL
BUS_LOG_POLICY_TYPE_SELINUX
BUS_LOG_POLICY_TYPE_SELINUX
sender_id
sender_id
receiver->id
receiver
receiver
id
sender_names
sender_names
&receiver_names
receiver_names
receiver_names
sender_policy->seclabel
sender_policy
sender_policy
seclabel
receiver->policy->seclabel
receiver->policy
receiver
receiver
policy
seclabel
message
message
r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);
r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination)
r
r
log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination)
log_commitf
log_commitf
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
"A security policy denied :1.%llu to send %s %s:%s.%s to %s."
sender_id
sender_id
message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal"
message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL
message->header->type
message->header
message
message
header
type
DBUS_MESSAGE_TYPE_METHOD_CALL
DBUS_MESSAGE_TYPE_METHOD_CALL
"method call"
"signal"
message->metadata.fields.path
message->metadata.fields
message->metadata
message
message
metadata
fields
path
message->metadata.fields.interface
message->metadata.fields
message->metadata
message
message
metadata
fields
interface
message->metadata.fields.member
message->metadata.fields
message->metadata
message
message
metadata
fields
member
message->metadata.fields.destination
message->metadata.fields
message->metadata
message
message
metadata
fields
destination
if (r)                                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return PEER_E_SEND_DENIED;
PEER_E_SEND_DENIED
PEER_E_SEND_DENIED
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
r = connection_queue(&receiver->connection, sender_user, message);
r = connection_queue(&receiver->connection, sender_user, message)
r
r
connection_queue(&receiver->connection, sender_user, message)
connection_queue
connection_queue
&receiver->connection
receiver->connection
receiver
receiver
connection
sender_user
sender_user
message
message
if (r) {                if (r == CONNECTION_E_QUOTA)                        return PEER_E_QUOTA;                else if (r == CONNECTION_E_UNEXPECTED_FDS)                        return PEER_E_UNEXPECTED_FDS;                return error_fold(r);        }
r
r
{                if (r == CONNECTION_E_QUOTA)                        return PEER_E_QUOTA;                else if (r == CONNECTION_E_UNEXPECTED_FDS)                        return PEER_E_UNEXPECTED_FDS;                return error_fold(r);        }
if (r == CONNECTION_E_QUOTA)                        return PEER_E_QUOTA;                else if (r == CONNECTION_E_UNEXPECTED_FDS)                        return PEER_E_UNEXPECTED_FDS;
r == CONNECTION_E_QUOTA
r
r
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
return PEER_E_QUOTA;
PEER_E_QUOTA
PEER_E_QUOTA
if (r == CONNECTION_E_UNEXPECTED_FDS)                        return PEER_E_UNEXPECTED_FDS;
r == CONNECTION_E_UNEXPECTED_FDS
r
r
CONNECTION_E_UNEXPECTED_FDS
CONNECTION_E_UNEXPECTED_FDS
return PEER_E_UNEXPECTED_FDS;
PEER_E_UNEXPECTED_FDS
PEER_E_UNEXPECTED_FDS
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
slot = NULL;
slot = NULL
slot
slot
NULL
NULL
return 0;
0
-----joern-----
(30,80,0)
(242,346,0)
(282,252,0)
(274,331,0)
(362,252,0)
(113,314,0)
(138,35,0)
(10,367,0)
(125,35,0)
(364,276,0)
(234,159,0)
(370,339,0)
(262,266,0)
(310,138,0)
(314,35,0)
(226,346,0)
(159,223,0)
(286,339,0)
(107,4,0)
(25,35,0)
(128,350,0)
(123,187,0)
(189,35,0)
(330,101,0)
(142,101,0)
(220,353,0)
(277,107,0)
(206,246,0)
(368,147,0)
(295,124,0)
(60,303,0)
(171,27,0)
(159,350,0)
(339,286,0)
(229,86,0)
(67,301,0)
(206,96,0)
(0,65,0)
(159,234,0)
(18,327,0)
(357,186,0)
(65,330,0)
(84,24,0)
(83,212,0)
(266,144,0)
(77,161,0)
(115,162,0)
(357,55,0)
(339,35,0)
(357,238,0)
(96,206,0)
(105,144,0)
(330,65,0)
(9,125,0)
(55,253,0)
(211,341,0)
(252,119,0)
(139,50,0)
(368,332,0)
(246,235,0)
(201,350,0)
(249,301,0)
(175,33,0)
(330,223,0)
(359,204,0)
(143,27,0)
(252,249,0)
(233,18,0)
(134,235,0)
(193,121,0)
(27,303,0)
(132,35,0)
(86,42,0)
(202,334,0)
(117,143,0)
(114,95,0)
(170,96,0)
(55,357,0)
(283,235,0)
(95,35,0)
(290,177,0)
(357,323,0)
(297,13,0)
(182,57,0)
(138,54,0)
(355,143,0)
(303,270,0)
(60,177,0)
(328,162,0)
(78,235,0)
(214,71,0)
(213,24,0)
(327,250,0)
(261,88,0)
(249,252,0)
(5,24,0)
(158,205,0)
(320,213,0)
(334,50,0)
(311,31,0)
(17,88,0)
(303,46,0)
(274,95,0)
(68,205,0)
(159,313,0)
(31,311,0)
(317,303,0)
(112,249,0)
(33,194,0)
(18,31,0)
(350,128,0)
(320,358,0)
(328,159,0)
(19,27,0)
(294,314,0)
(227,84,0)
(80,357,0)
(155,141,0)
(251,159,0)
(104,303,0)
(327,18,0)
(179,338,0)
(188,210,0)
(357,184,0)
(219,24,0)
(230,367,0)
(314,244,0)
(42,132,0)
(156,94,0)
(225,362,0)
(218,298,0)
(343,102,0)
(313,159,0)
(39,33,0)
(57,182,0)
(134,159,0)
(43,255,0)
(87,330,0)
(102,207,0)
(270,303,0)
(172,35,0)
(177,25,0)
(122,270,0)
(298,161,0)
(101,330,0)
(309,199,0)
(111,147,0)
(99,234,0)
(303,94,0)
(81,314,0)
(178,134,0)
(348,118,0)
(330,35,0)
(309,330,0)
(168,144,0)
(28,271,0)
(358,187,0)
(50,334,0)
(89,246,0)
(194,144,0)
(26,250,0)
(61,141,0)
(270,367,0)
(354,35,0)
(345,339,0)
(181,96,0)
(210,35,0)
(258,32,0)
(314,346,0)
(320,4,0)
(129,144,0)
(334,367,0)
(325,314,0)
(57,24,0)
(249,333,0)
(186,367,0)
(19,358,0)
(121,159,0)
(159,7,0)
(194,102,0)
(16,36,0)
(74,172,0)
(107,226,0)
(249,207,0)
(330,64,0)
(196,104,0)
(354,47,0)
(101,367,0)
(360,126,0)
(98,230,0)
(20,88,0)
(115,35,0)
(256,64,0)
(82,363,0)
(62,232,0)
(154,367,0)
(298,150,0)
(70,271,0)
(102,35,0)
(314,223,0)
(186,357,0)
(245,186,0)
(154,152,0)
(34,327,0)
(338,35,0)
(335,286,0)
(330,244,0)
(94,303,0)
(205,68,0)
(45,144,0)
(13,242,0)
(303,60,0)
(369,128,0)
(365,60,0)
(332,368,0)
(300,140,0)
(153,58,0)
(32,323,0)
(351,140,0)
(164,184,0)
(198,46,0)
(169,234,0)
(314,22,0)
(331,18,0)
(7,159,0)
(319,303,0)
(18,71,0)
(249,230,0)
(149,144,0)
(85,169,0)
(88,35,0)
(13,297,0)
(125,185,0)
(236,77,0)
(291,143,0)
(25,177,0)
(106,135,0)
(250,367,0)
(320,11,0)
(160,144,0)
(363,348,0)
(148,287,0)
(184,164,0)
(51,21,0)
(306,18,0)
(322,129,0)
(362,11,0)
(36,311,0)
(177,60,0)
(204,32,0)
(94,199,0)
(3,354,0)
(237,12,0)
(276,252,0)
(330,309,0)
(226,18,0)
(24,57,0)
(132,42,0)
(352,147,0)
(209,210,0)
(129,149,0)
(146,119,0)
(281,118,0)
(272,219,0)
(320,216,0)
(1,216,0)
(329,249,0)
(79,124,0)
(49,226,0)
(167,184,0)
(165,246,0)
(15,121,0)
(56,57,0)
(53,36,0)
(320,283,0)
(31,18,0)
(250,327,0)
(80,144,0)
(145,115,0)
(268,10,0)
(126,199,0)
(271,360,0)
(64,330,0)
(303,259,0)
(22,199,0)
(316,198,0)
(62,194,0)
(73,230,0)
(162,115,0)
(22,314,0)
(353,314,0)
(143,355,0)
(299,346,0)
(147,27,0)
(253,338,0)
(50,330,0)
(18,331,0)
(350,159,0)
(54,255,0)
(215,189,0)
(183,13,0)
(314,353,0)
(257,357,0)
(140,35,0)
(46,303,0)
(232,24,0)
(6,303,0)
(242,13,0)
(361,115,0)
(296,67,0)
(243,135,0)
(180,159,0)
(7,286,0)
(97,25,0)
(267,7,0)
(269,101,0)
(147,368,0)
(312,46,0)
(189,212,0)
(161,77,0)
(136,172,0)
(159,328,0)
(36,35,0)
(297,367,0)
(92,330,0)
(18,243,0)
(241,275,0)
(169,210,0)
(116,259,0)
(330,235,0)
(184,357,0)
(52,144,0)
(59,355,0)
(228,249,0)
(205,238,0)
(10,313,0)
(100,206,0)
(249,150,0)
(152,154,0)
(289,354,0)
(212,317,0)
(95,274,0)
(302,186,0)
(317,212,0)
(71,18,0)
(224,323,0)
(4,24,0)
(24,266,0)
(320,232,0)
(127,242,0)
(48,154,0)
(199,144,0)
(333,249,0)
(212,189,0)
(159,134,0)
(88,17,0)
(163,355,0)
(17,259,0)
(72,189,0)
(355,330,0)
(108,297,0)
(69,309,0)
(71,47,0)
(331,274,0)
(304,95,0)
(81,367,0)
(2,328,0)
(330,50,0)
(315,199,0)
(208,204,0)
(140,104,0)
(38,24,0)
(44,31,0)
(320,129,0)
(65,90,0)
(249,223,0)
(314,81,0)
(337,283,0)
(366,331,0)
(311,36,0)
(216,24,0)
(240,338,0)
(332,27,0)
(76,62,0)
(91,185,0)
(318,65,0)
(159,121,0)
(303,27,0)
(27,144,0)
(198,172,0)
(126,360,0)
(58,135,0)
(254,287,0)
(109,58,0)
(307,68,0)
(199,126,0)
(232,151,0)
(66,164,0)
(58,35,0)
(77,35,0)
(342,313,0)
(210,169,0)
(278,125,0)
(320,275,0)
(241,134,0)
(195,317,0)
(344,81,0)
(243,18,0)
(221,241,0)
(255,54,0)
(286,7,0)
(190,311,0)
(301,67,0)
(285,250,0)
(347,17,0)
(164,35,0)
(287,128,0)
(120,154,0)
(141,252,0)
(23,243,0)
(124,18,0)
(275,24,0)
(313,10,0)
(321,149,0)
(230,249,0)
(284,47,0)
(75,341,0)
(264,22,0)
(305,151,0)
(263,161,0)
(303,90,0)
(293,330,0)
(185,21,0)
(308,274,0)
(222,102,0)
(86,124,0)
(301,249,0)
(41,332,0)
(273,249,0)
(137,270,0)
(200,213,0)
(47,354,0)
(104,140,0)
(283,24,0)
(271,367,0)
(234,169,0)
(42,86,0)
(249,161,0)
(37,194,0)
(21,121,0)
(357,80,0)
(358,24,0)
(363,80,0)
(320,348,0)
(54,138,0)
(102,152,0)
(173,132,0)
(176,54,0)
(128,287,0)
(259,303,0)
(11,24,0)
(303,317,0)
(129,24,0)
(287,35,0)
(253,55,0)
(96,367,0)
(320,38,0)
(162,328,0)
(192,333,0)
(238,357,0)
(32,204,0)
(204,35,0)
(239,64,0)
(68,35,0)
(84,346,0)
(18,223,0)
(12,80,0)
(203,42,0)
(64,367,0)
(323,32,0)
(130,19,0)
(63,68,0)
(326,297,0)
(360,271,0)
(247,38,0)
(172,198,0)
(174,357,0)
(303,104,0)
(356,132,0)
(255,357,0)
(185,125,0)
(18,226,0)
(260,55,0)
(166,353,0)
(152,102,0)
(320,219,0)
(121,21,0)
(338,253,0)
(197,25,0)
(238,205,0)
(29,149,0)
(47,71,0)
(336,253,0)
(357,255,0)
(161,144,0)
(288,276,0)
(231,10,0)
(246,206,0)
(248,67,0)
(357,244,0)
(40,81,0)
(8,144,0)
(18,124,0)
(320,84,0)
(67,367,0)
(103,238,0)
(348,24,0)
(292,138,0)
(14,332,0)
(21,185,0)
(353,367,0)
(110,162,0)
(217,334,0)
(340,12,0)
(135,58,0)
(324,242,0)
(102,194,0)
(135,243,0)
(133,144,0)
(131,164,0)
(191,298,0)
(323,357,0)
(124,86,0)
(46,198,0)
(341,194,0)
(330,355,0)
(259,17,0)
(172,136,1)
(65,90,1)
(92,101,1)
(323,224,1)
(63,307,1)
(121,15,1)
(50,334,1)
(122,319,1)
(336,338,1)
(129,24,1)
(303,259,1)
(234,169,1)
(69,92,1)
(53,331,1)
(213,200,1)
(159,313,1)
(257,184,1)
(204,359,1)
(48,37,1)
(238,103,1)
(111,332,1)
(243,135,1)
(330,309,1)
(28,315,1)
(74,6,1)
(332,41,1)
(270,367,1)
(350,201,1)
(30,298,1)
(171,280,1)
(357,184,1)
(249,228,1)
(309,199,1)
(274,308,1)
(4,107,1)
(89,206,1)
(103,205,1)
(353,367,1)
(132,35,1)
(164,66,1)
(218,191,1)
(363,80,1)
(232,24,1)
(153,109,1)
(102,207,1)
(128,369,1)
(231,178,1)
(230,367,1)
(64,256,1)
(129,322,1)
(260,253,1)
(320,283,1)
(303,104,1)
(205,158,1)
(108,12,1)
(169,210,1)
(233,327,1)
(57,56,1)
(279,27,1)
(159,121,1)
(20,261,1)
(159,234,1)
(334,367,1)
(286,335,1)
(222,343,1)
(117,291,1)
(275,24,1)
(18,71,1)
(154,120,1)
(198,172,1)
(6,104,1)
(344,353,1)
(143,27,1)
(247,341,1)
(330,50,1)
(110,115,1)
(239,246,1)
(102,35,1)
(152,154,1)
(81,40,1)
(188,209,1)
(334,217,1)
(14,279,1)
(191,161,1)
(341,194,1)
(42,203,1)
(321,29,1)
(362,252,1)
(147,352,1)
(58,153,1)
(96,181,1)
(80,357,1)
(100,96,1)
(131,55,1)
(11,362,1)
(298,150,1)
(30,265,1)
(47,354,1)
(314,353,1)
(242,13,1)
(163,143,1)
(303,46,1)
(320,232,1)
(212,189,1)
(91,125,1)
(136,74,1)
(132,173,1)
(340,237,1)
(67,367,1)
(317,195,1)
(54,176,1)
(282,298,1)
(224,32,1)
(138,35,1)
(242,127,1)
(310,257,1)
(107,277,1)
(102,152,1)
(85,210,1)
(320,4,1)
(18,124,1)
(164,35,1)
(112,230,1)
(7,267,1)
(274,95,1)
(137,122,1)
(104,196,1)
(352,111,1)
(19,130,1)
(357,255,1)
(155,61,1)
(250,26,1)
(283,337,1)
(145,361,1)
(199,126,1)
(211,33,1)
(294,325,1)
(269,87,1)
(177,25,1)
(286,339,1)
(165,89,1)
(67,296,1)
(265,276,1)
(226,18,1)
(259,17,1)
(162,115,1)
(84,24,1)
(116,17,1)
(208,174,1)
(339,370,1)
(11,24,1)
(312,198,1)
(285,49,1)
(287,148,1)
(126,360,1)
(173,356,1)
(357,55,1)
(219,272,1)
(141,155,1)
(22,264,1)
(58,35,1)
(41,14,1)
(127,324,1)
(322,149,1)
(59,143,1)
(359,208,1)
(49,314,1)
(96,367,1)
(292,310,1)
(368,332,1)
(304,114,1)
(358,24,1)
(99,169,1)
(300,351,1)
(9,278,1)
(40,344,1)
(216,1,1)
(62,76,1)
(33,175,1)
(200,33,1)
(62,194,1)
(246,165,1)
(193,21,1)
(181,170,1)
(33,194,1)
(270,137,1)
(32,258,1)
(333,192,1)
(320,219,1)
(309,69,1)
(135,106,1)
(159,223,1)
(308,95,1)
(88,20,1)
(329,301,1)
(121,193,1)
(324,13,1)
(325,81,1)
(13,183,1)
(73,98,1)
(255,43,1)
(97,197,1)
(215,72,1)
(68,63,1)
(38,24,1)
(354,289,1)
(248,333,1)
(280,80,1)
(143,117,1)
(51,185,1)
(337,93,1)
(264,294,1)
(330,355,1)
(314,35,1)
(189,35,1)
(357,323,1)
(39,349,1)
(82,12,1)
(301,67,1)
(363,82,1)
(25,35,1)
(345,121,1)
(44,311,1)
(88,35,1)
(216,24,1)
(234,99,1)
(296,248,1)
(174,186,1)
(249,161,1)
(124,79,1)
(21,185,1)
(353,220,1)
(357,238,1)
(298,218,1)
(338,35,1)
(320,11,1)
(186,367,1)
(170,368,1)
(263,199,1)
(271,70,1)
(19,27,1)
(314,113,1)
(128,287,1)
(77,35,1)
(21,51,1)
(284,354,1)
(277,157,1)
(338,240,1)
(355,59,1)
(369,287,1)
(295,86,1)
(158,68,1)
(314,22,1)
(176,138,1)
(348,24,1)
(290,25,1)
(38,247,1)
(331,366,1)
(154,367,1)
(298,191,1)
(306,31,1)
(18,243,1)
(365,177,1)
(323,32,1)
(348,363,1)
(330,223,1)
(197,317,1)
(355,143,1)
(330,65,1)
(320,129,1)
(125,35,1)
(140,300,1)
(186,302,1)
(43,54,1)
(180,313,1)
(94,199,1)
(246,206,1)
(227,157,1)
(220,166,1)
(221,93,1)
(228,273,1)
(10,367,1)
(225,265,1)
(36,35,1)
(241,221,1)
(252,249,1)
(262,24,1)
(120,48,1)
(314,244,1)
(135,58,1)
(46,198,1)
(314,223,1)
(278,251,1)
(315,266,1)
(202,65,1)
(314,81,1)
(272,141,1)
(10,268,1)
(253,338,1)
(159,328,1)
(29,349,1)
(361,234,1)
(320,348,1)
(157,226,1)
(106,58,1)
(341,75,1)
(22,199,1)
(46,312,1)
(357,244,1)
(251,180,1)
(201,128,1)
(68,35,1)
(335,339,1)
(212,83,1)
(330,101,1)
(347,88,1)
(101,142,1)
(320,38,1)
(124,295,1)
(102,222,1)
(287,35,1)
(213,24,1)
(249,301,1)
(83,189,1)
(139,334,1)
(297,367,1)
(370,345,1)
(196,140,1)
(217,202,1)
(368,147,1)
(179,238,1)
(219,24,1)
(357,186,1)
(18,331,1)
(12,80,1)
(320,216,1)
(328,2,1)
(320,358,1)
(303,94,1)
(84,227,1)
(249,333,1)
(194,102,1)
(71,47,1)
(283,24,1)
(320,84,1)
(288,364,1)
(253,336,1)
(27,303,1)
(114,243,1)
(316,172,1)
(95,35,1)
(60,177,1)
(159,7,1)
(5,57,1)
(93,134,1)
(192,282,1)
(303,60,1)
(65,318,1)
(15,21,1)
(140,35,1)
(148,254,1)
(276,288,1)
(178,330,1)
(256,239,1)
(141,252,1)
(23,135,1)
(351,259,1)
(261,60,1)
(70,28,1)
(47,284,1)
(81,367,1)
(26,285,1)
(166,242,1)
(162,110,1)
(24,5,1)
(1,276,1)
(17,347,1)
(34,250,1)
(13,297,1)
(138,292,1)
(245,30,1)
(303,270,1)
(268,231,1)
(115,35,1)
(147,27,1)
(249,230,1)
(54,138,1)
(230,73,1)
(16,53,1)
(7,286,1)
(2,162,1)
(175,39,1)
(72,94,1)
(204,35,1)
(205,68,1)
(12,340,1)
(86,229,1)
(32,204,1)
(330,35,1)
(307,323,1)
(276,252,1)
(343,152,1)
(172,35,1)
(66,131,1)
(214,47,1)
(37,279,1)
(130,368,1)
(241,134,1)
(362,225,1)
(339,35,1)
(320,275,1)
(203,132,1)
(115,145,1)
(113,22,1)
(232,62,1)
(61,252,1)
(142,269,1)
(356,71,1)
(79,86,1)
(354,35,1)
(121,21,1)
(319,171,1)
(258,204,1)
(57,182,1)
(313,342,1)
(87,355,1)
(275,241,1)
(95,304,1)
(240,179,1)
(330,64,1)
(124,86,1)
(75,211,1)
(156,270,1)
(36,16,1)
(94,156,1)
(17,88,1)
(4,24,1)
(210,35,1)
(50,139,1)
(311,190,1)
(273,112,1)
(55,253,1)
(177,290,1)
(159,350,1)
(42,132,1)
(303,317,1)
(297,326,1)
(198,316,1)
(238,205,1)
(149,321,1)
(349,194,1)
(98,329,1)
(55,260,1)
(125,9,1)
(18,327,1)
(267,286,1)
(195,212,1)
(184,167,1)
(293,50,1)
(331,274,1)
(250,367,1)
(169,85,1)
(313,10,1)
(289,3,1)
(206,96,1)
(86,42,1)
(71,214,1)
(302,245,1)
(358,19,1)
(31,311,1)
(350,128,1)
(330,244,1)
(342,10,1)
(134,159,1)
(31,44,1)
(185,91,1)
(249,150,1)
(364,141,1)
(318,0,1)
(183,297,1)
(332,27,1)
(18,223,1)
(60,365,1)
(101,367,1)
(327,250,1)
(0,309,1)
(25,97,1)
(254,7,1)
(327,34,1)
(3,233,1)
(320,213,1)
(109,124,1)
(129,149,1)
(190,36,1)
(311,36,1)
(366,274,1)
(243,23,1)
(64,367,1)
(209,350,1)
(330,293,1)
(236,263,1)
(167,164,1)
(355,163,1)
(360,271,1)
(77,236,1)
(266,262,1)
(76,341,1)
(24,57,1)
(210,188,1)
(18,31,1)
(189,215,1)
(104,140,1)
(18,306,1)
(184,164,1)
(317,212,1)
(326,108,1)
(249,207,1)
(271,367,1)
(185,125,1)
(298,161,1)
(303,90,1)
(249,223,1)
(161,77,1)
(259,116,1)
(291,64,1)
(229,42,1)
(328,162,1)
(255,54,1)
(237,280,1)
(107,226,1)
(206,100,1)
(253,265,2)
(38,341,2)
(24,57,2)
(131,265,2)
(126,360,2)
(345,368,2)
(200,33,2)
(210,35,2)
(301,298,2)
(65,368,2)
(261,280,2)
(121,368,2)
(327,12,2)
(284,12,2)
(87,368,2)
(331,274,2)
(147,332,2)
(257,265,2)
(249,333,2)
(355,368,2)
(120,279,2)
(54,298,2)
(330,368,2)
(288,141,2)
(338,265,2)
(208,298,2)
(259,280,2)
(249,161,2)
(249,150,2)
(62,194,2)
(159,234,2)
(357,298,2)
(357,238,2)
(368,332,2)
(22,199,2)
(357,55,2)
(55,298,2)
(33,194,2)
(68,265,2)
(184,298,2)
(241,134,2)
(34,12,2)
(55,253,2)
(334,367,2)
(163,143,2)
(197,280,2)
(33,349,2)
(86,12,2)
(177,25,2)
(175,349,2)
(44,12,2)
(204,298,2)
(32,204,2)
(354,35,2)
(30,298,2)
(212,189,2)
(353,12,2)
(337,93,2)
(149,349,2)
(11,265,2)
(238,265,2)
(153,12,2)
(310,298,2)
(198,172,2)
(80,298,2)
(122,280,2)
(102,207,2)
(27,303,2)
(38,24,2)
(251,368,2)
(108,12,2)
(349,279,2)
(209,368,2)
(63,298,2)
(249,230,2)
(343,279,2)
(62,341,2)
(71,12,2)
(71,47,2)
(204,35,2)
(60,177,2)
(138,298,2)
(96,367,2)
(18,331,2)
(74,280,2)
(246,206,2)
(368,279,2)
(205,68,2)
(310,265,2)
(289,12,2)
(128,368,2)
(348,24,2)
(77,35,2)
(145,368,2)
(111,332,2)
(158,298,2)
(140,35,2)
(117,368,2)
(210,368,2)
(25,280,2)
(245,265,2)
(225,265,2)
(19,368,2)
(272,141,2)
(162,115,2)
(219,141,2)
(48,279,2)
(295,86,2)
(275,93,2)
(329,298,2)
(216,276,2)
(115,35,2)
(303,94,2)
(54,265,2)
(81,367,2)
(18,223,2)
(85,368,2)
(240,265,2)
(30,265,2)
(325,12,2)
(143,368,2)
(324,12,2)
(64,368,2)
(340,280,2)
(254,368,2)
(336,298,2)
(93,368,2)
(333,298,2)
(91,368,2)
(232,341,2)
(249,207,2)
(99,368,2)
(193,21,2)
(330,64,2)
(177,280,2)
(57,182,2)
(174,265,2)
(352,332,2)
(4,24,2)
(138,265,2)
(60,280,2)
(7,286,2)
(80,265,2)
(257,298,2)
(94,199,2)
(255,298,2)
(139,368,2)
(157,12,2)
(18,124,2)
(3,12,2)
(58,35,2)
(4,157,2)
(320,348,2)
(50,334,2)
(100,368,2)
(112,298,2)
(302,298,2)
(9,368,2)
(314,35,2)
(55,265,2)
(313,368,2)
(232,24,2)
(167,265,2)
(320,4,2)
(313,10,2)
(229,12,2)
(1,276,2)
(132,12,2)
(129,24,2)
(273,298,2)
(303,270,2)
(206,368,2)
(84,24,2)
(183,12,2)
(32,265,2)
(154,367,2)
(109,12,2)
(294,12,2)
(148,368,2)
(2,368,2)
(203,12,2)
(186,367,2)
(179,298,2)
(252,249,2)
(338,298,2)
(66,265,2)
(320,275,2)
(241,93,2)
(314,22,2)
(36,35,2)
(36,12,2)
(135,12,2)
(320,129,2)
(204,265,2)
(361,368,2)
(302,265,2)
(41,279,2)
(128,287,2)
(347,280,2)
(286,339,2)
(27,280,2)
(114,12,2)
(350,368,2)
(64,367,2)
(330,223,2)
(152,154,2)
(330,50,2)
(82,12,2)
(84,157,2)
(125,368,2)
(129,149,2)
(97,280,2)
(309,368,2)
(359,265,2)
(230,298,2)
(102,279,2)
(287,35,2)
(69,368,2)
(326,12,2)
(102,35,2)
(12,280,2)
(31,311,2)
(104,140,2)
(13,297,2)
(113,12,2)
(59,143,2)
(368,147,2)
(230,367,2)
(356,12,2)
(303,317,2)
(66,298,2)
(320,283,2)
(19,27,2)
(276,252,2)
(331,12,2)
(252,298,2)
(330,35,2)
(282,298,2)
(125,35,2)
(65,90,2)
(136,280,2)
(242,13,2)
(43,298,2)
(314,12,2)
(365,280,2)
(362,265,2)
(141,252,2)
(268,368,2)
(92,368,2)
(169,368,2)
(211,33,2)
(131,298,2)
(301,67,2)
(167,298,2)
(277,157,2)
(188,368,2)
(339,368,2)
(201,368,2)
(184,265,2)
(279,280,2)
(267,368,2)
(29,349,2)
(13,12,2)
(179,265,2)
(189,280,2)
(155,298,2)
(68,35,2)
(88,280,2)
(31,12,2)
(274,95,2)
(39,349,2)
(124,86,2)
(276,141,2)
(338,35,2)
(16,12,2)
(37,279,2)
(357,186,2)
(18,12,2)
(250,12,2)
(174,298,2)
(322,349,2)
(124,12,2)
(341,194,2)
(258,298,2)
(147,27,2)
(238,205,2)
(226,18,2)
(323,265,2)
(243,12,2)
(330,65,2)
(176,265,2)
(334,368,2)
(195,280,2)
(283,24,2)
(233,12,2)
(218,191,2)
(89,368,2)
(280,298,2)
(214,12,2)
(270,367,2)
(328,162,2)
(309,199,2)
(291,368,2)
(58,12,2)
(43,265,2)
(67,298,2)
(42,12,2)
(312,280,2)
(103,298,2)
(198,280,2)
(237,280,2)
(320,38,2)
(303,259,2)
(297,12,2)
(222,279,2)
(178,368,2)
(189,35,2)
(216,24,2)
(81,12,2)
(186,265,2)
(357,244,2)
(275,24,2)
(264,12,2)
(132,35,2)
(68,298,2)
(11,24,2)
(255,265,2)
(363,12,2)
(10,368,2)
(335,368,2)
(115,368,2)
(172,35,2)
(76,341,2)
(72,280,2)
(364,141,2)
(320,216,2)
(185,125,2)
(248,298,2)
(137,280,2)
(320,232,2)
(156,280,2)
(359,298,2)
(357,184,2)
(285,12,2)
(231,368,2)
(171,280,2)
(205,265,2)
(63,265,2)
(141,298,2)
(358,24,2)
(332,27,2)
(353,367,2)
(327,250,2)
(116,280,2)
(205,298,2)
(162,368,2)
(20,280,2)
(83,280,2)
(212,280,2)
(73,298,2)
(79,86,2)
(320,213,2)
(363,80,2)
(46,198,2)
(86,42,2)
(208,265,2)
(80,357,2)
(130,368,2)
(0,368,2)
(224,298,2)
(303,280,2)
(107,226,2)
(319,280,2)
(159,350,2)
(234,368,2)
(67,367,2)
(336,265,2)
(129,349,2)
(159,121,2)
(265,276,2)
(249,301,2)
(258,265,2)
(278,368,2)
(323,298,2)
(219,24,2)
(101,367,2)
(228,298,2)
(40,12,2)
(18,31,2)
(75,33,2)
(250,367,2)
(318,368,2)
(14,279,2)
(18,71,2)
(307,298,2)
(314,81,2)
(354,12,2)
(142,368,2)
(213,33,2)
(127,12,2)
(306,12,2)
(18,243,2)
(51,368,2)
(18,327,2)
(194,279,2)
(217,368,2)
(25,35,2)
(311,36,2)
(314,223,2)
(12,80,2)
(314,353,2)
(308,12,2)
(339,35,2)
(240,298,2)
(7,368,2)
(249,298,2)
(227,157,2)
(180,368,2)
(46,280,2)
(307,265,2)
(256,368,2)
(110,368,2)
(196,280,2)
(330,101,2)
(53,12,2)
(164,265,2)
(357,255,2)
(303,90,2)
(159,313,2)
(330,309,2)
(135,58,2)
(172,280,2)
(328,368,2)
(286,368,2)
(61,298,2)
(165,368,2)
(186,298,2)
(159,7,2)
(362,252,2)
(332,279,2)
(351,280,2)
(370,368,2)
(330,244,2)
(280,265,2)
(224,265,2)
(274,12,2)
(32,298,2)
(270,280,2)
(247,341,2)
(21,368,2)
(181,368,2)
(360,271,2)
(287,368,2)
(49,12,2)
(292,265,2)
(107,157,2)
(159,328,2)
(246,368,2)
(94,280,2)
(26,12,2)
(173,12,2)
(293,368,2)
(253,298,2)
(298,161,2)
(226,12,2)
(199,126,2)
(206,96,2)
(121,21,2)
(290,280,2)
(259,17,2)
(47,354,2)
(95,35,2)
(317,280,2)
(220,12,2)
(161,77,2)
(297,367,2)
(23,12,2)
(140,280,2)
(42,132,2)
(134,159,2)
(238,298,2)
(341,33,2)
(138,35,2)
(239,368,2)
(17,280,2)
(320,219,2)
(355,143,2)
(320,84,2)
(176,298,2)
(10,367,2)
(158,265,2)
(215,280,2)
(96,368,2)
(303,104,2)
(260,265,2)
(192,298,2)
(221,93,2)
(317,212,2)
(50,368,2)
(164,35,2)
(271,367,2)
(369,368,2)
(303,46,2)
(292,298,2)
(357,265,2)
(154,279,2)
(303,60,2)
(245,298,2)
(54,138,2)
(194,102,2)
(366,12,2)
(102,152,2)
(166,12,2)
(321,349,2)
(342,368,2)
(152,279,2)
(323,32,2)
(98,298,2)
(88,35,2)
(348,12,2)
(358,368,2)
(253,338,2)
(213,24,2)
(320,358,2)
(6,280,2)
(106,12,2)
(169,210,2)
(311,12,2)
(298,150,2)
(314,244,2)
(357,323,2)
(344,12,2)
(134,368,2)
(269,368,2)
(164,298,2)
(296,298,2)
(234,169,2)
(101,368,2)
(300,280,2)
(202,368,2)
(47,12,2)
(21,185,2)
(190,12,2)
(243,135,2)
(15,21,2)
(283,93,2)
(185,368,2)
(304,12,2)
(316,280,2)
(350,128,2)
(320,11,2)
(242,12,2)
(330,355,2)
(255,54,2)
(170,368,2)
(260,298,2)
(184,164,2)
(104,280,2)
(249,223,2)
(159,368,2)
(159,223,2)
(22,12,2)
(17,88,2)
(143,27,2)
(95,12,2)
(103,265,2)
-----------------------------------
(0,sender_policy)
(1,PEER_E_QUOTA)
(2,destination)
(3,message)
(4,return error_fold(r)
(5,slot)
(6,false)
(7,message->metadata.fields.path)
(8,r)
(9,header)
(10,receiver->bus)
(11,return error_fold(r)
(12,r == POLICY_E_ACCESS_DENIED)
(13,receiver->bus->log)
(14,r)
(15,"signal")
(16,metadata)
(17,message->metadata.fields)
(18,log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",\n\\n                                        message->metadata.fields.destination,\n\\n                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",\n\\n                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,\n\\n                                        sender_id)
(19,error_fold(r)
(20,metadata)
(21,message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL)
(22,&receiver_names)
(23,path)
(24,(reply_slot_freep)
(25,message->metadata)
(26,bus)
(27,r = policy_snapshot_check_send(sender_policy,\n\\n                                       receiver->seclabel,\n\\n                                       &receiver_names,\n\\n                                       message->metadata.fields.interface,\n\\n                                       message->metadata.fields.member,\n\\n                                       message->metadata.fields.path,\n\\n                                       message->header->type,\n\\n                                       false,\n\\n                                       message->metadata.fields.unix_fds)
(28,receiver)
(29,slot)
(30,r)
(31,message->metadata.fields.member)
(32,message->metadata.fields)
(33,r == CONNECTION_E_QUOTA)
(34,log)
(35,Message *message)
(36,message->metadata)
(37,r)
(38,return PEER_E_UNEXPECTED_FDS;)
(39,r)
(40,id)
(41,POLICY_E_ACCESS_DENIED)
(42,message->header->type)
(43,unix_fds)
(44,member)
(45,if (r)
(46,message->metadata.fields.unix_fds)
(47,message->metadata.fields)
(48,receiver)
(49,r)
(50,receiver->policy->seclabel)
(51,DBUS_MESSAGE_TYPE_METHOD_CALL)
(52,if (sender_replies && serial)
(53,message)
(54,message->metadata.fields)
(55,message->metadata.fields.path)
(56,ReplySlot)
(57,(reply_slot_freep)
(58,message->metadata)
(59,BUS_LOG_POLICY_TYPE_INTERNAL)
(60,message->metadata.fields.member)
(61,r)
(62,error_fold(r)
(63,metadata)
(64,receiver->bus)
(65,sender_policy->seclabel)
(66,header)
(67,receiver->replies)
(68,message->metadata)
(69,receiver_names)
(70,owned_names)
(71,message->metadata.fields.destination)
(72,message)
(73,user)
(74,message)
(75,CONNECTION_E_UNEXPECTED_FDS)
(76,r)
(77,message_read_serial(message)
(78,if (r)
(79,"signal")
(80,r = policy_snapshot_check_receive(receiver->policy,\n\\n                                          sender_names,\n\\n                                          message->metadata.fields.interface,\n\\n                                          message->metadata.fields.member,\n\\n                                          message->metadata.fields.path,\n\\n                                          message->header->type,\n\\n                                          false,\n\\n                                          message->metadata.fields.unix_fds)
(81,receiver->id)
(82,r)
(83,fields)
(84,return PEER_E_RECEIVE_DENIED;)
(85,fields)
(86,message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL)
(87,sender_id)
(88,message->metadata)
(89,LOG_WARNING)
(90,PolicySnapshot *sender_policy)
(91,type)
(92,sender_names)
(93,r)
(94,&receiver_names)
(95,message->metadata)
(96,receiver->bus)
(97,metadata)
(98,receiver)
(99,member)
(100,log)
(101,receiver->id)
(102,connection_queue(&receiver->connection, sender_user, message)
(103,member)
(104,message->header->type)
(105,if (r)
(106,fields)
(107,error_fold(r)
(108,receiver)
(109,message)
(110,fields)
(111,r)
(112,sender_user)
(113,message)
(114,message)
(115,message->metadata)
(116,path)
(117,POLICY_E_ACCESS_DENIED)
(118,)
(119,)
(120,connection)
(121,message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal")
(122,receiver)
(123,if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)
(124,message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal")
(125,message->header)
(126,NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
(127,0)
(128,message->metadata.fields)
(129,return 0;)
(130,r)
(131,message)
(132,message->header)
(133,receiver_names)
(134,r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",\n\\n                                        sender_id,\n\\n                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",\n\\n                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,\n\\n                                        message->metadata.fields.destination)
(135,message->metadata.fields)
(136,metadata)
(137,seclabel)
(138,message->metadata)
(139,seclabel)
(140,message->header)
(141,r == REPLY_E_EXISTS)
(142,id)
(143,r == POLICY_E_ACCESS_DENIED)
(144,)
(145,metadata)
(146,if (r == REPLY_E_EXISTS)
(147,r == POLICY_E_SELINUX_ACCESS_DENIED)
(148,metadata)
(149,slot = NULL)
(150,ReplyOwner *sender_replies)
(151,)
(152,&receiver->connection)
(153,metadata)
(154,receiver->connection)
(155,REPLY_E_EXISTS)
(156,receiver_names)
(157,r)
(158,fields)
(159,log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",\n\\n                                        sender_id,\n\\n                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",\n\\n                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,\n\\n                                        message->metadata.fields.destination)
(160,if (r)
(161,serial = message_read_serial(message)
(162,message->metadata.fields)
(163,BUS_LOG_POLICY_TYPE_SELINUX)
(164,message->header)
(165,0)
(166,receiver)
(167,type)
(168,serial)
(169,message->metadata.fields)
(170,receiver)
(171,r)
(172,message->metadata)
(173,header)
(174,sender_names)
(175,CONNECTION_E_QUOTA)
(176,fields)
(177,message->metadata.fields)
(178,r)
(179,message)
(180,"A security policy denied :1.%llu to send %s %s:%s.%s to %s.")
(181,bus)
(182,reply_slot_freep)
(183,log)
(184,message->header->type)
(185,message->header->type)
(186,receiver->policy)
(187,)
(188,metadata)
(189,message->metadata)
(190,fields)
(191,sender_replies)
(192,slot)
(193,"method call")
(194,r = connection_queue(&receiver->connection, sender_user, message)
(195,interface)
(196,type)
(197,message)
(198,message->metadata.fields)
(199,receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
(200,PEER_E_QUOTA)
(201,interface)
(202,receiver)
(203,type)
(204,message->metadata)
(205,message->metadata.fields)
(206,receiver->bus->log)
(207,User *sender_user)
(208,message)
(209,message)
(210,message->metadata)
(211,r)
(212,message->metadata.fields)
(213,return PEER_E_QUOTA;)
(214,destination)
(215,metadata)
(216,return PEER_E_QUOTA;)
(217,policy)
(218,serial)
(219,return PEER_E_EXPECTED_REPLY_EXISTS;)
(220,bus)
(221,r)
(222,message)
(223,uint64_t sender_id)
(224,interface)
(225,r)
(226,r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",\n\\n                                        message->metadata.fields.destination,\n\\n                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",\n\\n                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,\n\\n                                        sender_id)
(227,PEER_E_RECEIVE_DENIED)
(228,serial)
(229,DBUS_MESSAGE_TYPE_METHOD_CALL)
(230,receiver->user)
(231,receiver)
(232,return error_fold(r)
(233,"A security policy denied %s to receive %s %s:%s.%s from :1.%llu.")
(234,message->metadata.fields.member)
(235,)
(236,message)
(237,r)
(238,message->metadata.fields.member)
(239,receiver)
(240,metadata)
(241,error_fold(r)
(242,log_append_here(receiver->bus->log, LOG_WARNING, 0)
(243,message->metadata.fields.path)
(244,NameSet *sender_names)
(245,receiver)
(246,log_append_here(receiver->bus->log, LOG_WARNING, 0)
(247,PEER_E_UNEXPECTED_FDS)
(248,receiver)
(249,reply_slot_new(&slot, &receiver->replies, sender_replies,\n\\n                                   receiver->user, sender_user, sender_id, serial)
(250,receiver->bus)
(251,sender_id)
(252,r = reply_slot_new(&slot, &receiver->replies, sender_replies,\n\\n                                   receiver->user, sender_user, sender_id, serial)
(253,message->metadata.fields)
(254,message)
(255,message->metadata.fields.unix_fds)
(256,bus)
(257,false)
(258,fields)
(259,message->metadata.fields.path)
(260,path)
(261,message)
(262,NULL)
(263,serial)
(264,receiver_names)
(265,r)
(266,(reply_slot_freep)
(267,path)
(268,bus)
(269,receiver)
(270,receiver->seclabel)
(271,receiver->owned_names)
(272,PEER_E_EXPECTED_REPLY_EXISTS)
(273,sender_id)
(274,message->metadata.fields)
(275,return error_fold(r)
(276,r == REPLY_E_QUOTA)
(277,r)
(278,message)
(279,r)
(280,r)
(281,if (r == POLICY_E_ACCESS_DENIED)
(282,r)
(283,return PEER_E_SEND_DENIED;)
(284,fields)
(285,receiver)
(286,message->metadata.fields)
(287,message->metadata)
(288,REPLY_E_QUOTA)
(289,metadata)
(290,fields)
(291,r)
(292,metadata)
(293,message)
(294,sender_names)
(295,"method call")
(296,replies)
(297,receiver->bus)
(298,sender_replies && serial)
(299,if (r)
(300,header)
(301,&receiver->replies)
(302,policy)
(303,policy_snapshot_check_send(sender_policy,\n\\n                                       receiver->seclabel,\n\\n                                       &receiver_names,\n\\n                                       message->metadata.fields.interface,\n\\n                                       message->metadata.fields.member,\n\\n                                       message->metadata.fields.path,\n\\n                                       message->header->type,\n\\n                                       false,\n\\n                                       message->metadata.fields.unix_fds)
(304,metadata)
(305,if (r == CONNECTION_E_QUOTA)
(306,sender_id)
(307,message)
(308,fields)
(309,&receiver_names)
(310,message)
(311,message->metadata.fields)
(312,unix_fds)
(313,receiver->bus->log)
(314,bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message)
(315,receiver_names)
(316,fields)
(317,message->metadata.fields.interface)
(318,seclabel)
(319,sender_policy)
(320,RET)
(321,NULL)
(322,0)
(323,message->metadata.fields.interface)
(324,LOG_WARNING)
(325,sender_id)
(326,bus)
(327,receiver->bus->log)
(328,message->metadata.fields.destination)
(329,sender_replies)
(330,bus_log_append_policy_send(receiver->bus,\n\\n                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX)
(331,message->metadata.fields.interface)
(332,r == POLICY_E_ACCESS_DENIED)
(333,&slot)
(334,receiver->policy)
(335,fields)
(336,fields)
(337,PEER_E_SEND_DENIED)
(338,message->metadata)
(339,message->metadata)
(340,POLICY_E_ACCESS_DENIED)
(341,r == CONNECTION_E_UNEXPECTED_FDS)
(342,log)
(343,sender_user)
(344,receiver)
(345,message)
(346,)
(347,fields)
(348,return error_fold(r)
(349,r)
(350,message->metadata.fields.interface)
(351,message)
(352,POLICY_E_SELINUX_ACCESS_DENIED)
(353,receiver->bus)
(354,message->metadata)
(355,r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX)
(356,message)
(357,policy_snapshot_check_receive(receiver->policy,\n\\n                                          sender_names,\n\\n                                          message->metadata.fields.interface,\n\\n                                          message->metadata.fields.member,\n\\n                                          message->metadata.fields.path,\n\\n                                          message->header->type,\n\\n                                          false,\n\\n                                          message->metadata.fields.unix_fds)
(358,return error_fold(r)
(359,metadata)
(360,&receiver->owned_names)
(361,message)
(362,error_fold(r)
(363,error_fold(r)
(364,r)
(365,member)
(366,interface)
(367,Peer *receiver)
(368,r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)
(369,fields)
(370,metadata)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^