-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_goodG2BSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData;
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_goodG2BSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_goodG2BSink()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_goodG2BSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(5,13,0)
(12,17,0)
(26,36,0)
(29,40,0)
(34,20,0)
(17,36,0)
(35,9,0)
(20,30,0)
(19,36,0)
(9,33,0)
(4,8,0)
(7,33,0)
(24,33,0)
(23,26,0)
(28,22,0)
(32,36,0)
(26,23,0)
(37,9,0)
(31,2,0)
(39,17,0)
(36,26,0)
(17,30,0)
(22,24,0)
(20,36,0)
(9,13,0)
(6,18,0)
(35,26,0)
(18,29,0)
(9,35,0)
(16,30,0)
(21,4,0)
(15,36,0)
(26,35,0)
(25,19,0)
(13,9,0)
(36,30,0)
(27,15,0)
(24,22,0)
(2,3,0)
(29,18,0)
(11,24,0)
(0,3,0)
(14,2,0)
(33,3,0)
(1,19,0)
(10,33,0)
(15,30,0)
(15,36,1)
(7,10,1)
(9,13,1)
(11,33,1)
(35,9,1)
(12,19,1)
(36,26,1)
(19,36,1)
(4,21,1)
(37,32,1)
(9,33,1)
(21,24,1)
(20,36,1)
(1,36,1)
(28,11,1)
(12,29,1)
(39,12,1)
(33,7,1)
(32,24,1)
(38,4,1)
(29,18,1)
(15,27,1)
(24,33,1)
(17,36,1)
(24,22,1)
(27,20,1)
(22,28,1)
(5,37,1)
(25,1,1)
(34,17,1)
(26,23,1)
(17,39,1)
(19,25,1)
(20,34,1)
(13,5,1)
(6,19,1)
(26,35,1)
(18,6,1)
(38,15,1)
(35,9,2)
(29,19,2)
(39,24,2)
(15,24,2)
(35,24,2)
(26,23,2)
(24,33,2)
(19,24,2)
(21,24,2)
(36,24,2)
(26,24,2)
(27,24,2)
(37,24,2)
(36,26,2)
(9,24,2)
(12,24,2)
(9,33,2)
(17,24,2)
(9,13,2)
(17,36,2)
(6,19,2)
(32,24,2)
(20,36,2)
(4,24,2)
(24,22,2)
(29,18,2)
(19,36,2)
(26,35,2)
(18,19,2)
(34,24,2)
(13,24,2)
(1,24,2)
(25,24,2)
(20,24,2)
(15,36,2)
(5,24,2)
-----------------------------------
(0,data)
(1,myString)
(2,)
(3,)
(4,printLine("Input is less than the length of the source string")
(5,char)
(6,1)
(7,CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData)
(8,)
(9,data*sizeof(char)
(10,data)
(11,data)
(12,myString)
(13,sizeof(char)
(14,if (data > strlen(HELLO_STRING)
(15,free(myString)
(16,if (myString == NULL)
(17,strcpy(myString, HELLO_STRING)
(18,-1)
(19,myString == NULL)
(20,printLine(myString)
(21,"Input is less than the length of the source string")
(22,strlen(HELLO_STRING)
(23,char *)
(24,data > strlen(HELLO_STRING)
(25,NULL)
(26,(char *)
(27,myString)
(28,HELLO_STRING)
(29,exit(-1)
(30,)
(31,myString)
(32,myString)
(33,data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData)
(34,myString)
(35,malloc(data*sizeof(char)
(36,myString = (char *)
(37,data)
(38,RET)
(39,HELLO_STRING)
(40,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^