-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_31_bad()
{
    twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    {
        twoIntsStruct * dataCopy = data;
        twoIntsStruct * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
70,71
71,72
71,73
72,73
74,75
75,76
75,77
76,77
79,80
79,81
79,82
80,81
81,82
81,83
82,83
84,85
84,86
84,87
87,88
88,89
90,91
91,92
91,93
92,93
94,95
94,96
94,97
97,98
98,99
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,57,58,59,60,66,67,68,69,73,77,78,83,85,86,89,93,95,96,99,100
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
53,54
53,55
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_31_bad(){    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_31_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_31_bad
{    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
{        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
twoIntsStruct * dataCopy = data;
twoIntsStruct * dataCopy = data;
twoIntsStruct
twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
twoIntsStruct * data = dataCopy;
twoIntsStruct * data = dataCopy;
twoIntsStruct
twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(40,46,0)
(21,40,0)
(30,13,0)
(7,48,0)
(29,16,0)
(34,40,0)
(41,17,0)
(45,3,0)
(32,13,0)
(12,10,0)
(28,47,0)
(43,19,0)
(23,13,0)
(38,26,0)
(3,14,0)
(33,30,0)
(32,19,0)
(47,43,0)
(17,46,0)
(8,14,0)
(50,12,0)
(18,46,0)
(13,46,0)
(19,32,0)
(36,3,0)
(14,46,0)
(26,23,0)
(25,2,0)
(32,0,0)
(23,26,0)
(22,43,0)
(9,34,0)
(43,47,0)
(24,30,0)
(42,17,0)
(2,13,0)
(5,14,0)
(6,1,0)
(13,32,0)
(38,46,0)
(31,23,0)
(11,16,0)
(19,43,0)
(12,50,0)
(49,1,0)
(35,2,0)
(16,41,0)
(20,48,0)
(26,38,0)
(16,13,0)
(48,13,0)
(0,32,0)
(41,16,0)
(37,23,0)
(27,46,0)
(3,48,0)
(30,34,0)
(1,46,0)
(15,41,0)
(48,14,0)
(34,30,0)
(39,50,0)
(44,13,0)
(13,32,1)
(44,1,1)
(36,45,1)
(45,48,1)
(26,23,1)
(38,26,1)
(30,33,1)
(2,13,1)
(19,43,1)
(23,31,1)
(33,24,1)
(43,47,1)
(50,39,1)
(2,35,1)
(21,34,1)
(37,40,1)
(39,2,1)
(32,0,1)
(12,50,1)
(15,16,1)
(34,9,1)
(28,22,1)
(16,13,1)
(32,19,1)
(48,20,1)
(41,16,1)
(42,41,1)
(9,30,1)
(35,25,1)
(29,2,1)
(23,13,1)
(24,17,1)
(25,13,1)
(4,3,1)
(48,13,1)
(41,15,1)
(11,29,1)
(3,36,1)
(47,28,1)
(22,44,1)
(1,49,1)
(16,11,1)
(49,6,1)
(17,42,1)
(7,38,1)
(34,30,1)
(31,37,1)
(20,7,1)
(3,48,1)
(40,21,1)
(29,12,1)
(30,13,1)
(12,50,2)
(43,47,2)
(12,2,2)
(32,19,2)
(41,16,2)
(30,13,2)
(16,13,2)
(38,26,2)
(48,13,2)
(19,43,2)
(34,30,2)
(2,13,2)
(32,0,2)
(13,32,2)
(50,2,2)
(3,48,2)
(39,2,2)
(26,23,2)
(23,13,2)
-----------------------------------
(0,twoIntsStruct *)
(1,data = NULL)
(2,data == NULL)
(3,* data = dataCopy)
(4,RET)
(5,dataCopy)
(6,data)
(7,dataCopy)
(8,data)
(9,intTwo)
(10,)
(11,0)
(12,exit(-1)
(13,data = (twoIntsStruct *)
(14,)
(15,intOne)
(16,data[0])
(17,data[0].intOne = 0)
(18,if (data == NULL)
(19,malloc(100*sizeof(twoIntsStruct)
(20,data)
(21,0)
(22,100)
(23,data[0])
(24,data)
(25,data)
(26,&data[0])
(27,data)
(28,twoIntsStruct)
(29,data)
(30,data[0])
(31,0)
(32,(twoIntsStruct *)
(33,0)
(34,data[0].intTwo)
(35,NULL)
(36,dataCopy)
(37,data)
(38,printStructLine(&data[0])
(39,1)
(40,data[0].intTwo = 0)
(41,data[0].intOne)
(42,0)
(43,100*sizeof(twoIntsStruct)
(44,data)
(45,data)
(46,)
(47,sizeof(twoIntsStruct)
(48,* dataCopy = data)
(49,NULL)
(50,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^