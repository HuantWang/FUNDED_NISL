-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_17_bad()
{
    int i,j;
    size_t data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    for(j = 0; j < 1; j++)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
38,40
38,41
38,42
38,43
38,44
39,40
40,41
40,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
54,56
56,57
57,58
59,60
60,61
60,62
62,63
62,64
64,65
65,66
67,68
67,69
68,69
68,70
68,71
68,72
68,73
68,74
68,75
68,76
68,77
68,78
68,79
69,70
70,71
70,72
71,72
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
95,96
98,99
99,100
100,101
102,103
103,104
103,105
104,105
104,106
105,106
108,109
110,111
111,112
111,113
112,113
112,114
113,114
113,115
114,115
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
125,127
126,127
129,130
129,131
130,131
132,133
134,135
134,136
135,136
135,137
136,137
136,138
136,139
136,140
137,138
139,140
141,142
141,143
142,143
142,144
143,144
145,146
147,148
148,149
150,151
151,152
152,153
154,155
156,157
158,159
159,160
159,161
160,161
162,163
162,164
162,165
162,166
162,167
163,164
165,166
167,168
169,170
169,171
170,171
174,175
174,176
175,176
175,177
176,177
176,178
177,178
179,180
181,182
181,183
182,183
185,186
187,188
188,189
188,190
189,190
189,191
190,191
192,193
195,196
196,197
196,198
197,198
199,200
199,201
199,202
199,203
200,201
202,203
204,205
208,209
208,210
209,210
209,211
210,211
212,213
214,215
215,216
216,217
216,218
217,218
219,220
221,222
221,223
221,224
221,225
222,223
223,224
223,225
224,225
227,228
227,229
228,229
231,232
232,233
234,235
235,236
235,237
236,237
237,238
237,239
239,240
239,241
242,243
242,244
242,245
243,244
243,245
244,245
246,247
246,248
247,248
249,250
251,252
251,253
251,254
251,255
251,256
252,253
253,254
253,255
254,255
256,257
256,258
257,258
257,259
259,260
261,262
261,263
262,263
264,265
264,266
265,266
267,268
268,269
268,270
271,272
271,273
272,273
272,274
273,274
275,276
277,278
278,279
279,280
279,281
280,281
282,283
284,285
285,286
285,287
285,288
286,287
288,289
290,291
292,293
293,294
293,295
294,295
296,297
298,299
299,300
299,301
300,301
302,303
304,305
305,306
306,307
306,308
307,308
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,43,47,49,53,55,58,61,63,66,72,75,77,79,81,85,87,89,93,96,97,101,106,107,109,115,116,117,120,122,127,128,131,133,138,140,144,146,149,153,155,157,161,164,166,168,171,172,173,178,180,183,184,186,191,193,194,198,201,203,205,206,207,211,213,218,220,225,226,229,230,233,238,240,241,245,248,250,255,258,260,263,266,269,270,274,276,281,283,287,289,291,295,297,301,303,308,309
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
70,71
70,72
83,84
83,85
103,104
103,105
111,112
111,113
124,125
124,126
135,136
135,137
159,160
159,161
169,170
169,171
175,176
175,177
176,177
176,178
181,182
181,183
188,189
188,190
196,197
196,198
209,210
209,211
223,224
223,225
227,228
227,229
243,244
243,245
253,254
253,255
264,265
264,266
272,273
272,274
-----guardedBy-----
211,220
250,291
245,266
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_17_bad(){    int i,j;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(j = 0; j < 1; j++)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_17_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_17_bad
{    int i,j;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(j = 0; j < 1; j++)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
for(j = 0; j < 1; j++)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(57,170,0)
(32,14,0)
(6,88,0)
(79,131,0)
(110,118,0)
(147,33,0)
(30,22,0)
(167,181,0)
(50,30,0)
(103,59,0)
(29,180,0)
(170,122,0)
(52,180,0)
(118,110,0)
(135,22,0)
(108,52,0)
(18,181,0)
(25,10,0)
(49,73,0)
(4,173,0)
(26,63,0)
(48,59,0)
(100,103,0)
(67,110,0)
(125,143,0)
(118,176,0)
(65,97,0)
(22,30,0)
(110,83,0)
(103,141,0)
(94,4,0)
(178,97,0)
(176,118,0)
(148,22,0)
(144,72,0)
(103,100,0)
(82,95,0)
(71,97,0)
(28,22,0)
(24,14,0)
(140,97,0)
(19,4,0)
(146,152,0)
(95,40,0)
(68,180,0)
(23,73,0)
(109,169,0)
(136,69,0)
(110,67,0)
(70,154,0)
(129,18,0)
(160,155,0)
(114,3,0)
(152,163,0)
(3,43,0)
(66,74,0)
(52,158,0)
(152,146,0)
(154,180,0)
(30,180,0)
(132,95,0)
(10,123,0)
(35,85,0)
(131,163,0)
(21,165,0)
(118,107,0)
(155,40,0)
(173,21,0)
(113,36,0)
(75,71,0)
(131,52,0)
(1,97,0)
(49,173,0)
(141,103,0)
(138,72,0)
(159,163,0)
(170,180,0)
(33,173,0)
(93,173,0)
(69,154,0)
(81,97,0)
(42,86,0)
(131,143,0)
(40,180,0)
(133,177,0)
(143,131,0)
(99,72,0)
(84,97,0)
(127,180,0)
(47,100,0)
(12,114,0)
(2,97,0)
(124,20,0)
(45,50,0)
(37,40,0)
(21,79,0)
(86,30,0)
(55,30,0)
(182,70,0)
(38,175,0)
(24,180,0)
(153,180,0)
(119,10,0)
(79,21,0)
(128,163,0)
(122,170,0)
(18,30,0)
(149,50,0)
(145,20,0)
(76,112,0)
(165,21,0)
(116,23,0)
(123,180,0)
(88,20,0)
(137,33,0)
(63,120,0)
(120,24,0)
(150,39,0)
(39,121,0)
(15,155,0)
(87,152,0)
(181,97,0)
(61,180,0)
(59,103,0)
(175,177,0)
(97,27,0)
(40,50,0)
(13,46,0)
(183,95,0)
(142,177,0)
(89,97,0)
(56,50,0)
(170,169,0)
(155,29,0)
(111,83,0)
(105,131,0)
(77,96,0)
(164,71,0)
(120,63,0)
(0,120,0)
(152,52,0)
(131,79,0)
(16,158,0)
(83,110,0)
(74,50,0)
(86,181,0)
(158,52,0)
(86,53,0)
(162,181,0)
(17,142,0)
(62,39,0)
(169,170,0)
(50,40,0)
(139,123,0)
(101,74,0)
(179,112,0)
(98,141,0)
(90,49,0)
(134,130,0)
(174,145,0)
(23,173,0)
(34,158,0)
(157,85,0)
(50,74,0)
(54,158,0)
(7,145,0)
(21,173,0)
(46,161,0)
(58,96,0)
(14,24,0)
(173,73,0)
(44,146,0)
(11,175,0)
(92,122,0)
(112,30,0)
(126,63,0)
(3,114,0)
(154,69,0)
(95,132,0)
(64,97,0)
(51,67,0)
(96,180,0)
(117,72,0)
(107,118,0)
(104,20,0)
(156,18,0)
(9,110,0)
(85,132,0)
(110,30,0)
(115,177,0)
(106,70,0)
(31,107,0)
(8,168,0)
(41,100,0)
(132,85,0)
(5,72,0)
(172,73,0)
(85,40,0)
(102,29,0)
(166,91,0)
(163,72,0)
(78,60,0)
(33,73,0)
(58,77,1)
(34,108,1)
(52,158,1)
(106,24,1)
(132,85,1)
(75,164,1)
(123,139,1)
(182,106,1)
(136,70,1)
(74,66,1)
(59,48,1)
(171,175,1)
(10,119,1)
(134,112,1)
(183,40,1)
(152,163,1)
(67,51,1)
(102,155,1)
(174,88,1)
(103,100,1)
(21,79,1)
(30,22,1)
(28,135,1)
(83,110,1)
(131,52,1)
(42,18,1)
(139,10,1)
(131,163,1)
(142,177,1)
(33,147,1)
(152,146,1)
(47,181,1)
(35,95,1)
(167,71,1)
(6,166,1)
(40,50,1)
(38,142,1)
(80,52,1)
(142,17,1)
(24,14,1)
(50,30,1)
(151,18,1)
(26,123,1)
(133,145,1)
(128,159,1)
(170,122,1)
(18,129,1)
(33,173,1)
(18,181,1)
(50,74,1)
(20,104,1)
(13,152,1)
(111,110,1)
(107,31,1)
(70,182,1)
(11,38,1)
(19,173,1)
(141,103,1)
(175,177,1)
(141,98,1)
(156,8,1)
(110,67,1)
(18,30,1)
(76,179,1)
(17,46,1)
(103,59,1)
(173,21,1)
(96,58,1)
(120,63,1)
(48,100,1)
(148,55,1)
(105,93,1)
(164,145,1)
(22,28,1)
(56,37,1)
(109,57,1)
(14,32,1)
(93,152,1)
(137,4,1)
(92,112,1)
(8,141,1)
(83,111,1)
(32,120,1)
(157,35,1)
(16,54,1)
(4,94,1)
(156,113,1)
(158,16,1)
(163,128,1)
(100,41,1)
(147,137,1)
(44,87,1)
(49,173,1)
(135,148,1)
(132,95,1)
(174,20,1)
(86,42,1)
(87,175,1)
(124,163,1)
(55,96,1)
(156,134,1)
(129,156,1)
(152,52,1)
(104,124,1)
(41,47,1)
(21,165,1)
(122,92,1)
(156,78,1)
(177,115,1)
(12,4,1)
(108,29,1)
(126,26,1)
(110,30,1)
(3,114,1)
(86,30,1)
(181,162,1)
(166,151,1)
(169,109,1)
(63,126,1)
(125,105,1)
(78,83,1)
(154,69,1)
(120,0,1)
(114,12,1)
(51,118,1)
(37,83,1)
(0,63,1)
(119,25,1)
(175,11,1)
(115,133,1)
(155,40,1)
(4,173,1)
(118,107,1)
(145,20,1)
(77,141,1)
(17,49,1)
(54,34,1)
(98,103,1)
(6,151,1)
(143,125,1)
(145,7,1)
(88,6,1)
(156,80,1)
(79,131,1)
(118,176,1)
(23,116,1)
(137,3,1)
(23,173,1)
(9,154,1)
(46,13,1)
(94,19,1)
(162,167,1)
(179,30,1)
(95,82,1)
(82,183,1)
(149,74,1)
(170,169,1)
(155,160,1)
(151,86,1)
(90,23,1)
(110,118,1)
(113,132,1)
(85,157,1)
(131,143,1)
(112,30,1)
(50,149,1)
(85,40,1)
(31,9,1)
(71,75,1)
(112,76,1)
(47,80,1)
(49,90,1)
(160,15,1)
(69,136,1)
(15,132,1)
(7,174,1)
(101,45,1)
(116,33,1)
(57,122,1)
(25,170,1)
(95,40,1)
(86,181,1)
(29,102,1)
(146,44,1)
(38,177,1)
(66,101,1)
(88,20,1)
(45,56,1)
(152,146,2)
(111,112,2)
(12,4,2)
(155,40,2)
(167,145,2)
(131,143,2)
(112,30,2)
(15,132,2)
(142,175,2)
(14,112,2)
(134,112,2)
(83,112,2)
(181,145,2)
(33,152,2)
(123,112,2)
(41,145,2)
(110,67,2)
(100,80,2)
(21,79,2)
(141,103,2)
(98,80,2)
(23,173,2)
(71,145,2)
(76,141,2)
(32,112,2)
(135,141,2)
(30,141,2)
(42,18,2)
(95,40,2)
(49,152,2)
(7,145,2)
(13,152,2)
(79,152,2)
(79,131,2)
(154,112,2)
(179,141,2)
(46,152,2)
(21,165,2)
(154,69,2)
(142,177,2)
(131,152,2)
(3,4,2)
(148,141,2)
(114,4,2)
(59,80,2)
(139,112,2)
(44,175,2)
(58,141,2)
(47,80,2)
(9,112,2)
(126,112,2)
(120,63,2)
(118,112,2)
(17,175,2)
(106,112,2)
(66,83,2)
(162,145,2)
(93,152,2)
(67,112,2)
(170,169,2)
(152,175,2)
(55,141,2)
(87,175,2)
(92,112,2)
(175,175,2)
(141,145,2)
(21,152,2)
(164,145,2)
(4,173,2)
(112,141,2)
(57,112,2)
(119,112,2)
(10,112,2)
(98,145,2)
(136,112,2)
(19,152,2)
(103,59,2)
(131,163,2)
(113,132,2)
(108,132,2)
(160,132,2)
(3,114,2)
(132,85,2)
(94,152,2)
(147,152,2)
(50,30,2)
(88,145,2)
(85,95,2)
(59,145,2)
(95,83,2)
(122,112,2)
(45,83,2)
(90,152,2)
(86,181,2)
(35,95,2)
(183,83,2)
(152,163,2)
(33,173,2)
(86,18,2)
(157,95,2)
(37,83,2)
(110,118,2)
(75,145,2)
(40,50,2)
(146,175,2)
(70,112,2)
(38,175,2)
(152,52,2)
(22,141,2)
(18,145,2)
(173,21,2)
(110,112,2)
(151,145,2)
(52,158,2)
(16,132,2)
(170,112,2)
(6,145,2)
(137,152,2)
(100,145,2)
(51,112,2)
(105,152,2)
(103,145,2)
(120,112,2)
(129,145,2)
(169,112,2)
(18,30,2)
(80,132,2)
(118,107,2)
(145,145,2)
(0,112,2)
(131,52,2)
(54,132,2)
(103,100,2)
(101,83,2)
(173,152,2)
(85,40,2)
(109,112,2)
(31,112,2)
(170,122,2)
(141,80,2)
(166,151,2)
(4,152,2)
(49,173,2)
(118,176,2)
(149,83,2)
(82,83,2)
(96,141,2)
(125,152,2)
(8,141,2)
(145,20,2)
(174,145,2)
(34,132,2)
(41,80,2)
(182,112,2)
(48,145,2)
(143,152,2)
(132,83,2)
(132,95,2)
(29,132,2)
(78,83,2)
(86,30,2)
(50,74,2)
(24,112,2)
(26,112,2)
(107,112,2)
(25,112,2)
(23,152,2)
(69,112,2)
(28,141,2)
(102,132,2)
(52,132,2)
(88,20,2)
(116,152,2)
(50,83,2)
(74,83,2)
(155,132,2)
(175,177,2)
(83,110,2)
(40,83,2)
(11,175,2)
(30,22,2)
(63,112,2)
(24,14,2)
(77,141,2)
(158,132,2)
(156,145,2)
(110,30,2)
(103,80,2)
(18,181,2)
(56,83,2)
(47,145,2)
(48,80,2)
-----------------------------------
(0,s_addr)
(1,connectSocket)
(2,if (wsaDataInit)
(3,exit(-1)
(4,myString == NULL)
(5,for(i = 0; i < 1; i++)
(6,i)
(7,1)
(8,break;)
(9,connectSocket)
(10,service.sin_family)
(11,1)
(12,1)
(13,"Input is less than the length of the source string")
(14,inet_addr(IP_ADDRESS)
(15,inputBuffer)
(16,0)
(17,j)
(18,connectSocket != INVALID_SOCKET)
(19,myString)
(20,i = 0)
(21,(wchar_t *)
(22,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(23,printWLine(myString)
(24,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(25,service)
(26,service)
(27,)
(28,IPPROTO_TCP)
(29,inputBuffer[recvResult] = \'\\0\')
(30,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(31,service)
(32,IP_ADDRESS)
(33,wcscpy(myString, HELLO_STRING)
(34,inputBuffer)
(35,recvResult)
(36,)
(37,recvResult)
(38,j)
(39,)
(40,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(41,2)
(42,connectSocket)
(43,)
(44,HELLO_STRING)
(45,inputBuffer)
(46,printLine("Input is less than the length of the source string")
(47,2)
(48,wsaData)
(49,free(myString)
(50,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(51,service)
(52,data = strtoul(inputBuffer, NULL, 0)
(53,)
(54,NULL)
(55,connectSocket)
(56,connectSocket)
(57,0)
(58,1)
(59,&wsaData)
(60,)
(61,if (connectSocket == INVALID_SOCKET)
(62,if (data > wcslen(HELLO_STRING)
(63,service.sin_addr)
(64,service)
(65,recvResult)
(66,1)
(67,sizeof(service)
(68,if (connect(connectSocket, (struct sockaddr*)
(69,htons(TCP_PORT)
(70,service.sin_port)
(71,wsaDataInit = 0)
(72,)
(73,)
(74,CHAR_ARRAY_SIZE - 1)
(75,0)
(76,INVALID_SOCKET)
(77,wsaDataInit)
(78,break;)
(79,malloc(data*sizeof(wchar_t)
(80,0)
(81,inputBuffer)
(82,SOCKET_ERROR)
(83,connect(connectSocket, (struct sockaddr*)
(84,wsaDataInit)
(85,recvResult == 0)
(86,CLOSE_SOCKET(connectSocket)
(87,data)
(88,i++)
(89,do)
(90,myString)
(91,)
(92,service)
(93,myString)
(94,NULL)
(95,recvResult == SOCKET_ERROR)
(96,wsaDataInit = 1)
(97,)
(98,NO_ERROR)
(99,j)
(100,MAKEWORD(2,2)
(101,CHAR_ARRAY_SIZE)
(102,\'\\0\')
(103,WSAStartup(MAKEWORD(2,2)
(104,0)
(105,data)
(106,service)
(107,&service)
(108,data)
(109,service)
(110,connect(connectSocket, (struct sockaddr*)
(111,SOCKET_ERROR)
(112,connectSocket == INVALID_SOCKET)
(113,break;)
(114,-1)
(115,0)
(116,myString)
(117,i)
(118,(struct sockaddr*)
(119,sin_family)
(120,service.sin_addr.s_addr)
(121,)
(122,&service)
(123,service.sin_family = AF_INET)
(124,i)
(125,wchar_t)
(126,sin_addr)
(127,if (recvResult == SOCKET_ERROR || recvResult == 0)
(128,0)
(129,INVALID_SOCKET)
(130,)
(131,data*sizeof(wchar_t)
(132,recvResult == SOCKET_ERROR || recvResult == 0)
(133,j)
(134,break;)
(135,SOCK_STREAM)
(136,TCP_PORT)
(137,myString)
(138,for(j = 0; j < 1; j++)
(139,AF_INET)
(140,if (connectSocket != INVALID_SOCKET)
(141,WSAStartup(MAKEWORD(2,2)
(142,j++)
(143,sizeof(wchar_t)
(144,data)
(145,i < 1)
(146,wcslen(HELLO_STRING)
(147,HELLO_STRING)
(148,AF_INET)
(149,0)
(150,myString)
(151,wsaDataInit)
(152,data > wcslen(HELLO_STRING)
(153,if (WSAStartup(MAKEWORD(2,2)
(154,service.sin_port = htons(TCP_PORT)
(155,inputBuffer[recvResult])
(156,connectSocket)
(157,0)
(158,strtoul(inputBuffer, NULL, 0)
(159,data)
(160,recvResult)
(161,)
(162,INVALID_SOCKET)
(163,data = 0)
(164,wsaDataInit)
(165,wchar_t *)
(166,WSACleanup()
(167,connectSocket)
(168,)
(169,sizeof(service)
(170,memset(&service, 0, sizeof(service)
(171,RET)
(172,if (myString == NULL)
(173,myString = (wchar_t *)
(174,i)
(175,j < 1)
(176,struct sockaddr*)
(177,j = 0)
(178,wsaData)
(179,connectSocket)
(180,)
(181,connectSocket = INVALID_SOCKET)
(182,sin_port)
(183,recvResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^