-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__listen_socket_for_loop_18_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    goto source;
source:
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read count using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    goto sink;
sink:
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
51,52
52,53
52,54
54,55
54,56
56,57
57,58
59,60
59,61
60,61
60,62
60,63
60,64
60,65
60,66
60,67
60,68
60,69
60,70
60,71
60,72
60,73
60,74
61,62
62,63
62,64
63,64
65,66
65,67
65,68
65,69
66,67
68,69
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
87,88
90,91
91,92
92,93
94,95
95,96
95,97
96,97
96,98
97,98
100,101
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
110,111
112,113
113,114
113,115
114,115
114,116
115,116
118,119
118,120
119,120
121,122
123,124
123,125
124,125
124,126
125,126
125,127
125,128
125,129
126,127
128,129
130,131
130,132
131,132
131,133
132,133
134,135
136,137
137,138
139,140
140,141
141,142
143,144
145,146
147,148
147,149
148,149
148,150
149,150
149,151
149,152
150,151
152,153
154,155
156,157
158,159
160,161
161,162
161,163
162,163
164,165
164,166
164,167
164,168
165,166
167,168
169,170
171,172
173,174
173,175
174,175
174,176
175,176
177,178
179,180
181,182
182,183
182,184
183,184
185,186
185,187
185,188
185,189
185,190
186,187
188,189
190,191
192,193
192,194
193,194
197,198
197,199
198,199
198,200
199,200
199,201
200,201
202,203
204,205
204,206
205,206
208,209
210,211
211,212
211,213
212,213
212,214
213,214
215,216
218,219
219,220
219,221
220,221
222,223
222,224
223,224
225,226
228,229
228,230
229,230
229,231
230,231
232,233
234,235
235,236
236,237
236,238
237,238
239,240
241,242
241,243
242,243
242,244
243,244
245,246
247,248
248,249
249,250
249,251
250,251
252,253
254,255
256,257
256,258
258,259
258,260
259,260
260,261
260,262
261,262
263,264
263,265
265,266
267,268
267,269
267,270
267,271
268,269
269,270
269,271
270,271
273,274
273,275
274,275
276,277
276,278
277,278
277,279
278,279
281,282
283,284
284,285
286,287
287,288
288,289
288,290
289,290
-----nextToken-----
2,4,8,10,14,16,18,20,24,26,30,32,36,38,41,45,47,50,53,55,58,64,67,69,71,73,77,79,81,85,88,89,93,98,99,101,107,108,109,111,116,117,120,122,127,129,133,135,138,142,144,146,151,153,155,157,159,163,166,168,170,172,176,178,180,184,187,189,191,194,195,196,201,203,206,207,209,214,216,217,221,224,226,227,231,233,238,240,244,246,251,253,255,257,262,264,266,271,272,275,279,280,282,285,290,291
-----computeFrom-----
12,13
12,14
62,63
62,64
75,76
75,77
95,96
95,97
103,104
103,105
113,114
113,115
124,125
124,126
148,149
148,150
161,162
161,163
174,175
174,176
182,183
182,184
192,193
192,194
198,199
198,200
199,200
199,201
204,205
204,206
211,212
211,213
219,220
219,221
229,230
229,231
242,243
242,244
269,270
269,271
273,274
273,275
-----guardedBy-----
231,240
244,253
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__listen_socket_for_loop_18_bad(){    int count;    /* Initialize count */    count = -1;    goto source;source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    goto sink;sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
void
CWE400_Resource_Exhaustion__listen_socket_for_loop_18_bad()
CWE400_Resource_Exhaustion__listen_socket_for_loop_18_bad
{    int count;    /* Initialize count */    count = -1;    goto source;source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    goto sink;sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
goto source;
source
source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
source
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
goto sink;
sink
sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
sink
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(156,151,0)
(92,114,0)
(97,171,0)
(24,84,0)
(152,13,0)
(101,98,0)
(10,178,0)
(133,3,0)
(83,124,0)
(2,8,0)
(72,93,0)
(94,33,0)
(151,130,0)
(103,29,0)
(20,3,0)
(29,103,0)
(0,140,0)
(129,41,0)
(134,140,0)
(151,65,0)
(155,14,0)
(63,93,0)
(48,36,0)
(59,13,0)
(6,43,0)
(127,3,0)
(1,165,0)
(71,134,0)
(31,19,0)
(128,84,0)
(95,3,0)
(5,0,0)
(86,14,0)
(29,24,0)
(82,12,0)
(15,20,0)
(43,157,0)
(167,144,0)
(100,130,0)
(118,140,0)
(42,29,0)
(149,134,0)
(164,135,0)
(13,14,0)
(12,20,0)
(108,132,0)
(63,146,0)
(112,13,0)
(57,140,0)
(94,92,0)
(124,84,0)
(166,175,0)
(131,142,0)
(50,157,0)
(121,3,0)
(61,154,0)
(68,161,0)
(19,144,0)
(12,0,0)
(43,20,0)
(177,150,0)
(175,14,0)
(172,151,0)
(136,140,0)
(78,63,0)
(47,165,0)
(24,29,0)
(157,43,0)
(144,167,0)
(120,114,0)
(30,171,0)
(109,134,0)
(148,130,0)
(163,3,0)
(51,152,0)
(9,3,0)
(130,3,0)
(34,94,0)
(153,8,0)
(54,3,0)
(87,130,0)
(110,2,0)
(164,3,0)
(91,43,0)
(67,138,0)
(52,3,0)
(64,2,0)
(7,129,0)
(39,140,0)
(33,94,0)
(162,146,0)
(8,3,0)
(88,43,0)
(117,84,0)
(116,157,0)
(171,52,0)
(115,75,0)
(165,36,0)
(178,150,0)
(60,100,0)
(85,164,0)
(25,3,0)
(147,161,0)
(119,149,0)
(45,167,0)
(114,92,0)
(173,140,0)
(29,41,0)
(140,14,0)
(123,47,0)
(46,41,0)
(92,26,0)
(135,164,0)
(35,140,0)
(125,140,0)
(28,92,0)
(76,100,0)
(93,63,0)
(89,33,0)
(36,165,0)
(175,138,0)
(111,178,0)
(176,136,0)
(102,65,0)
(104,85,0)
(99,53,0)
(144,19,0)
(149,130,0)
(38,140,0)
(138,175,0)
(80,20,0)
(165,3,0)
(170,15,0)
(37,14,0)
(161,130,0)
(43,9,0)
(73,15,0)
(69,106,0)
(113,27,0)
(11,133,0)
(74,135,0)
(146,63,0)
(90,85,0)
(145,24,0)
(44,140,0)
(26,92,0)
(71,130,0)
(58,140,0)
(70,64,0)
(169,64,0)
(41,129,0)
(168,0,0)
(139,14,0)
(130,100,0)
(5,20,0)
(126,87,0)
(63,78,0)
(107,167,0)
(29,175,0)
(96,140,0)
(55,133,0)
(49,19,0)
(56,115,0)
(92,94,0)
(79,149,0)
(40,71,0)
(62,100,0)
(5,143,0)
(137,5,0)
(18,14,0)
(19,9,0)
(158,0,0)
(161,20,0)
(150,3,0)
(41,3,0)
(16,26,0)
(94,34,0)
(9,43,0)
(92,130,0)
(165,47,0)
(32,78,0)
(17,136,0)
(159,9,0)
(167,9,0)
(23,134,0)
(174,140,0)
(171,9,0)
(4,12,0)
(2,64,0)
(71,21,0)
(65,151,0)
(81,93,0)
(20,161,0)
(22,161,0)
(105,87,0)
(77,152,0)
(122,52,0)
(47,123,1)
(46,52,1)
(51,86,1)
(1,36,1)
(72,0,1)
(150,177,1)
(43,20,1)
(79,119,1)
(2,64,1)
(74,85,1)
(84,117,1)
(66,41,1)
(153,2,1)
(4,149,1)
(123,1,1)
(29,42,1)
(134,109,1)
(176,17,1)
(23,136,1)
(32,63,1)
(178,111,1)
(64,169,1)
(108,15,1)
(26,16,1)
(161,22,1)
(55,78,1)
(169,70,1)
(5,0,1)
(115,56,1)
(87,130,1)
(12,0,1)
(29,41,1)
(105,126,1)
(119,101,1)
(147,68,1)
(152,77,1)
(145,124,1)
(162,93,1)
(0,168,1)
(11,55,1)
(24,84,1)
(94,33,1)
(17,155,1)
(122,171,1)
(141,5,1)
(12,20,1)
(41,129,1)
(9,43,1)
(94,34,1)
(40,149,1)
(29,103,1)
(67,166,1)
(175,138,1)
(16,94,1)
(144,19,1)
(71,134,1)
(141,12,1)
(151,156,1)
(82,4,1)
(91,159,1)
(119,66,1)
(49,31,1)
(131,144,1)
(164,135,1)
(15,73,1)
(43,157,1)
(109,23,1)
(171,9,1)
(81,72,1)
(100,76,1)
(99,141,1)
(70,150,1)
(29,175,1)
(92,94,1)
(71,40,1)
(149,134,1)
(88,157,1)
(78,32,1)
(78,63,1)
(69,87,1)
(86,141,1)
(6,91,1)
(161,130,1)
(68,80,1)
(56,24,1)
(124,84,1)
(101,114,1)
(149,79,1)
(138,67,1)
(102,151,1)
(83,115,1)
(12,82,1)
(15,20,1)
(136,176,1)
(76,60,1)
(30,97,1)
(22,147,1)
(151,130,1)
(90,8,1)
(170,20,1)
(71,130,1)
(130,100,1)
(63,93,1)
(2,110,1)
(155,175,1)
(80,65,1)
(114,120,1)
(60,62,1)
(165,47,1)
(92,130,1)
(144,167,1)
(133,11,1)
(119,108,1)
(62,148,1)
(129,7,1)
(120,92,1)
(97,144,1)
(116,50,1)
(119,131,1)
(160,24,1)
(19,49,1)
(5,137,1)
(20,161,1)
(128,152,1)
(4,71,1)
(63,146,1)
(172,114,1)
(86,99,1)
(72,66,1)
(119,69,1)
(52,122,1)
(65,102,1)
(31,167,1)
(119,113,1)
(85,104,1)
(48,87,1)
(50,6,1)
(24,29,1)
(177,178,1)
(167,45,1)
(114,92,1)
(159,15,1)
(171,30,1)
(165,36,1)
(45,107,1)
(65,151,1)
(61,78,1)
(87,105,1)
(77,51,1)
(89,28,1)
(73,170,1)
(117,128,1)
(43,88,1)
(157,116,1)
(8,153,1)
(33,89,1)
(149,130,1)
(7,46,1)
(145,84,1)
(113,65,1)
(119,61,1)
(126,130,1)
(42,145,1)
(110,64,1)
(111,10,1)
(158,134,1)
(19,9,1)
(10,165,1)
(28,164,1)
(5,20,1)
(167,9,1)
(36,48,1)
(148,133,1)
(104,90,1)
(92,26,1)
(168,158,1)
(146,162,1)
(93,81,1)
(137,12,1)
(156,172,1)
(124,83,1)
(135,74,1)
(107,9,1)
(149,130,2)
(157,15,2)
(151,130,2)
(170,65,2)
(43,157,2)
(122,144,2)
(81,66,2)
(151,114,2)
(63,93,2)
(63,66,2)
(177,87,2)
(129,144,2)
(55,78,2)
(6,15,2)
(47,87,2)
(76,78,2)
(167,9,2)
(71,149,2)
(71,130,2)
(9,15,2)
(89,87,2)
(159,15,2)
(162,66,2)
(64,87,2)
(12,0,2)
(24,84,2)
(78,66,2)
(32,66,2)
(61,78,2)
(46,144,2)
(124,84,2)
(115,24,2)
(101,114,2)
(24,29,2)
(92,87,2)
(171,144,2)
(15,65,2)
(161,65,2)
(1,87,2)
(130,100,2)
(165,36,2)
(40,149,2)
(164,135,2)
(92,130,2)
(105,78,2)
(144,167,2)
(20,161,2)
(87,78,2)
(123,87,2)
(88,15,2)
(9,43,2)
(92,94,2)
(74,87,2)
(2,87,2)
(156,114,2)
(43,20,2)
(120,87,2)
(10,87,2)
(31,167,2)
(85,87,2)
(45,15,2)
(80,65,2)
(72,66,2)
(165,47,2)
(94,34,2)
(49,167,2)
(29,24,2)
(100,78,2)
(52,144,2)
(92,26,2)
(65,114,2)
(107,15,2)
(69,87,2)
(63,146,2)
(126,78,2)
(42,24,2)
(30,144,2)
(111,87,2)
(19,167,2)
(165,87,2)
(12,20,2)
(146,66,2)
(56,24,2)
(28,87,2)
(171,9,2)
(73,65,2)
(70,87,2)
(153,87,2)
(114,87,2)
(144,15,2)
(11,78,2)
(91,15,2)
(148,78,2)
(94,87,2)
(41,129,2)
(99,141,2)
(93,66,2)
(65,151,2)
(130,78,2)
(172,114,2)
(19,9,2)
(68,65,2)
(164,87,2)
(48,87,2)
(83,24,2)
(8,87,2)
(131,144,2)
(169,87,2)
(7,144,2)
(144,19,2)
(26,87,2)
(94,33,2)
(43,15,2)
(149,134,2)
(108,15,2)
(135,87,2)
(167,15,2)
(22,65,2)
(124,24,2)
(62,78,2)
(29,103,2)
(150,87,2)
(114,92,2)
(145,24,2)
(2,64,2)
(90,87,2)
(71,134,2)
(178,87,2)
(147,65,2)
(161,130,2)
(5,0,2)
(113,65,2)
(102,114,2)
(137,12,2)
(78,63,2)
(104,87,2)
(41,144,2)
(110,87,2)
(5,20,2)
(133,78,2)
(66,144,2)
(97,144,2)
(15,20,2)
(5,12,2)
(29,175,2)
(33,87,2)
(60,78,2)
(175,138,2)
(87,130,2)
(29,41,2)
(24,24,2)
(20,65,2)
(116,15,2)
(16,87,2)
(50,15,2)
(36,87,2)
-----------------------------------
(0,acceptSocket = INVALID_SOCKET)
(1,0)
(2,service.sin_addr.s_addr)
(3,)
(4,acceptSocket)
(5,CLOSE_SOCKET(acceptSocket)
(6,inputBuffer)
(7,inputBuffer)
(8,service.sin_addr.s_addr = INADDR_ANY)
(9,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(10,service)
(11,1)
(12,acceptSocket != INVALID_SOCKET)
(13,)
(14,)
(15,acceptSocket == SOCKET_ERROR)
(16,service)
(17,wsaDataInit)
(18,sink:)
(19,recvResult == 0)
(20,acceptSocket = accept(listenSocket, NULL, NULL)
(21,)
(22,NULL)
(23,listenSocket)
(24,i < (size_t)
(25,if (acceptSocket == SOCKET_ERROR)
(26,sizeof(service)
(27,)
(28,listenSocket)
(29,(size_t)
(30,recvResult)
(31,recvResult)
(32,NO_ERROR)
(33,&service)
(34,struct sockaddr*)
(35,recvResult)
(36,&service)
(37,source:)
(38,do)
(39,acceptSocket)
(40,listenSocket)
(41,count = atoi(inputBuffer)
(42,count)
(43,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(44,wsaData)
(45,SOCKET_ERROR)
(46,count)
(47,sizeof(service)
(48,service)
(49,0)
(50,CHAR_ARRAY_SIZE)
(51,i)
(52,inputBuffer[recvResult] = \'\\0\')
(53,)
(54,if (WSAStartup(MAKEWORD(2,2)
(55,wsaDataInit)
(56,"Hello")
(57,service)
(58,listenSocket)
(59,i)
(60,SOCK_STREAM)
(61,break;)
(62,AF_INET)
(63,WSAStartup(MAKEWORD(2,2)
(64,service.sin_addr)
(65,listen(listenSocket, LISTEN_BACKLOG)
(66,0)
(67,1)
(68,listenSocket)
(69,break;)
(70,service)
(71,CLOSE_SOCKET(listenSocket)
(72,2)
(73,SOCKET_ERROR)
(74,TCP_PORT)
(75,)
(76,IPPROTO_TCP)
(77,0)
(78,WSAStartup(MAKEWORD(2,2)
(79,INVALID_SOCKET)
(80,acceptSocket)
(81,2)
(82,INVALID_SOCKET)
(83,i)
(84,i = 0)
(85,service.sin_port)
(86,goto sink;)
(87,listenSocket == INVALID_SOCKET)
(88,0)
(89,service)
(90,service)
(91,acceptSocket)
(92,bind(listenSocket, (struct sockaddr*)
(93,MAKEWORD(2,2)
(94,(struct sockaddr*)
(95,if (recvResult == SOCKET_ERROR || recvResult == 0)
(96,if (acceptSocket != INVALID_SOCKET)
(97,inputBuffer)
(98,)
(99,WSACleanup()
(100,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(101,break;)
(102,SOCKET_ERROR)
(103,size_t)
(104,sin_port)
(105,INVALID_SOCKET)
(106,)
(107,recvResult)
(108,break;)
(109,INVALID_SOCKET)
(110,s_addr)
(111,sin_family)
(112,for (i = 0; i < (size_t)
(113,break;)
(114,bind(listenSocket, (struct sockaddr*)
(115,printLine("Hello")
(116,1)
(117,0)
(118,if (listenSocket != INVALID_SOCKET)
(119,listenSocket)
(120,SOCKET_ERROR)
(121,if (listen(listenSocket, LISTEN_BACKLOG)
(122,\'\\0\')
(123,service)
(124,i++)
(125,if (wsaDataInit)
(126,listenSocket)
(127,if (bind(listenSocket, (struct sockaddr*)
(128,i)
(129,atoi(inputBuffer)
(130,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(131,break;)
(132,)
(133,wsaDataInit = 1)
(134,listenSocket = INVALID_SOCKET)
(135,htons(TCP_PORT)
(136,wsaDataInit = 0)
(137,acceptSocket)
(138,-1)
(139,count)
(140,)
(141,wsaDataInit)
(142,)
(143,)
(144,recvResult == SOCKET_ERROR || recvResult == 0)
(145,i)
(146,&wsaData)
(147,NULL)
(148,listenSocket)
(149,listenSocket != INVALID_SOCKET)
(150,service.sin_family = AF_INET)
(151,listen(listenSocket, LISTEN_BACKLOG)
(152,i = 0)
(153,INADDR_ANY)
(154,)
(155,goto source;)
(156,LISTEN_BACKLOG)
(157,CHAR_ARRAY_SIZE - 1)
(158,acceptSocket)
(159,recvResult)
(160,RET)
(161,accept(listenSocket, NULL, NULL)
(162,wsaData)
(163,if (listenSocket == INVALID_SOCKET)
(164,service.sin_port = htons(TCP_PORT)
(165,memset(&service, 0, sizeof(service)
(166,count)
(167,recvResult == SOCKET_ERROR)
(168,INVALID_SOCKET)
(169,sin_addr)
(170,acceptSocket)
(171,inputBuffer[recvResult])
(172,listenSocket)
(173,wsaDataInit)
(174,inputBuffer)
(175,count = -1)
(176,0)
(177,AF_INET)
(178,service.sin_family)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^