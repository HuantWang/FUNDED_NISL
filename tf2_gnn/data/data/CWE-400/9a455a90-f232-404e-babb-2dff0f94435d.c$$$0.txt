-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_14_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalFive==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
68,69
69,70
69,71
70,71
71,72
71,73
72,73
74,75
74,76
76,77
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
84,85
84,86
85,86
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,61,62,66,67,73,75,77,82,83,86,90,91,93,96,101,102
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
80,81
80,82
84,85
84,86
-----guardedBy-----
40,56
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_14_bad(){    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_14_bad()
CWE400_Resource_Exhaustion__fgets_for_loop_14_bad
{    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(8,51,0)
(25,13,0)
(22,40,0)
(36,30,0)
(23,51,0)
(55,9,0)
(14,18,0)
(19,18,0)
(12,39,0)
(17,42,0)
(40,41,0)
(32,46,0)
(28,30,0)
(42,17,0)
(17,30,0)
(31,17,0)
(10,9,0)
(38,36,0)
(44,42,0)
(1,33,0)
(13,25,0)
(35,13,0)
(34,3,0)
(45,36,0)
(2,5,0)
(47,40,0)
(54,6,0)
(42,11,0)
(48,30,0)
(36,33,0)
(24,46,0)
(25,43,0)
(15,23,0)
(27,46,0)
(13,46,0)
(29,24,0)
(0,53,0)
(26,3,0)
(3,53,0)
(33,36,0)
(30,40,0)
(49,5,0)
(39,50,0)
(16,53,0)
(53,7,0)
(21,18,0)
(25,51,0)
(51,23,0)
(43,25,0)
(37,36,0)
(20,25,0)
(4,54,0)
(25,42,0)
(51,18,0)
(24,46,1)
(45,37,1)
(25,20,1)
(27,32,1)
(24,29,1)
(36,38,1)
(10,55,1)
(52,5,1)
(31,44,1)
(12,13,1)
(51,23,1)
(32,3,1)
(1,36,1)
(33,36,1)
(25,42,1)
(37,30,1)
(35,46,1)
(5,2,1)
(2,49,1)
(33,1,1)
(44,33,1)
(13,25,1)
(35,24,1)
(42,17,1)
(15,8,1)
(46,27,1)
(49,9,1)
(54,4,1)
(49,54,1)
(28,48,1)
(48,9,1)
(23,15,1)
(25,43,1)
(38,45,1)
(4,33,1)
(52,13,1)
(29,39,1)
(36,30,1)
(39,12,1)
(9,10,1)
(17,31,1)
(17,30,1)
(25,51,1)
(20,35,1)
(34,26,1)
(49,42,1)
(3,34,1)
(26,5,1)
(13,46,1)
(30,28,1)
(55,51,1)
(27,5,2)
(45,9,2)
(25,43,2)
(20,13,2)
(4,33,2)
(1,9,2)
(42,17,2)
(33,9,2)
(51,23,2)
(35,5,2)
(35,13,2)
(25,51,2)
(3,5,2)
(29,13,2)
(30,9,2)
(32,5,2)
(17,30,2)
(36,9,2)
(39,13,2)
(26,5,2)
(25,5,2)
(24,13,2)
(33,36,2)
(13,13,2)
(13,46,2)
(36,30,2)
(34,5,2)
(37,9,2)
(46,5,2)
(25,42,2)
(54,33,2)
(17,33,2)
(20,5,2)
(13,25,2)
(12,13,2)
(28,9,2)
(25,13,2)
(24,46,2)
(48,9,2)
(13,5,2)
(38,9,2)
(44,33,2)
(42,33,2)
(31,33,2)
-----------------------------------
(0,i)
(1,NULL)
(2,5)
(3,i = 0)
(4,"fgets()
(5,globalFive==5)
(6,)
(7,)
(8,count)
(9,globalFive==5)
(10,5)
(11,)
(12,"Hello")
(13,i < (size_t)
(14,if(globalFive==5)
(15,1)
(16,for (i = 0; i < (size_t)
(17,atoi(inputBuffer)
(18,)
(19,count)
(20,count)
(21,if(globalFive==5)
(22,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(23,-1)
(24,i++)
(25,(size_t)
(26,i)
(27,0)
(28,"")
(29,i)
(30,inputBuffer[CHAR_ARRAY_SIZE] = "")
(31,inputBuffer)
(32,i)
(33,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(34,0)
(35,i)
(36,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(37,inputBuffer)
(38,stdin)
(39,printLine("Hello")
(40,)
(41,)
(42,count = atoi(inputBuffer)
(43,size_t)
(44,count)
(45,CHAR_ARRAY_SIZE)
(46,i = 0)
(47,inputBuffer)
(48,inputBuffer)
(49,globalFive)
(50,)
(51,count = -1)
(52,RET)
(53,)
(54,printLine("fgets()
(55,globalFive)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^