-----label-----
0
-----code-----
static struct peer_chr *
peer_chr_add(struct peer *peer,  uint16_t svc_start_handle,
             const struct ble_gatt_chr *gatt_chr)
{
    struct peer_chr *prev;
    struct peer_chr *chr;
    struct peer_svc *svc;

    svc = peer_svc_find(peer, svc_start_handle, NULL);
    if (svc == NULL) {
        /* Can't find service for discovered characteristic; this shouldn't
         * happen.
         */
        assert(0);
        return NULL;
    }

    chr = peer_chr_find(svc, gatt_chr->def_handle, &prev);
    if (chr != NULL) {
        /* Characteristic already discovered. */
        return chr;
    }

    chr = os_memblock_get(&peer_chr_pool);
    if (chr == NULL) {
        /* Out of memory. */
        return NULL;
    }
    memset(chr, 0, sizeof *chr);

    chr->chr = *gatt_chr;

    if (prev == NULL) {
        SLIST_INSERT_HEAD(&svc->chrs, chr, next);
    } else {
        SLIST_NEXT(prev, next) = chr;
    }

    return chr;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
24,25
24,26
24,27
24,28
24,29
24,30
24,31
24,32
24,33
24,34
24,35
24,36
24,37
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
34,35
36,37
36,38
39,40
40,41
40,42
41,42
43,44
43,45
46,47
47,48
47,49
48,49
50,51
50,52
50,53
50,54
51,52
53,54
55,56
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
67,68
67,69
68,69
71,72
72,73
74,75
75,76
75,77
76,77
78,79
78,80
78,81
78,82
79,80
81,82
83,84
83,85
84,85
87,88
88,89
90,91
90,92
91,92
91,93
92,93
94,95
96,97
97,98
98,99
100,101
101,102
101,103
102,103
104,105
104,106
105,106
107,108
108,109
110,111
110,112
111,112
111,113
112,113
114,115
116,117
117,118
118,119
120,121
121,122
121,123
121,124
121,125
122,123
124,125
127,128
128,129
129,130
131,132
132,133
132,134
133,134
133,135
134,135
137,138
138,139
140,141
140,142
140,143
141,142
141,143
142,143
144,145
146,147
147,148
148,149
148,150
148,151
148,152
149,150
151,152
152,153
152,154
153,154
156,157
158,159
160,161
161,162
162,163
162,164
163,164
163,165
163,166
164,165
166,167
168,169
170,171
172,173
173,174
-----nextToken-----
3,5,6,9,11,12,15,17,20,22,23,28,30,31,35,37,38,42,44,45,49,52,54,56,58,62,64,69,70,73,77,80,82,85,86,89,93,95,99,103,106,109,113,115,119,123,125,126,130,135,136,139,143,145,150,154,155,157,159,165,167,169,171,174
-----computeFrom-----
47,48
47,49
60,61
60,62
75,76
75,77
91,92
91,93
101,102
101,103
111,112
111,113
132,133
132,134
141,142
141,143
162,163
162,164
-----guardedBy-----
64,73
93,99
115,119
-----guardedByNegation-----
143,167
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct peer_chr *peer_chr_add(struct peer *peer,  uint16_t svc_start_handle,             const struct ble_gatt_chr *gatt_chr){    struct peer_chr *prev;    struct peer_chr *chr;    struct peer_svc *svc;    svc = peer_svc_find(peer, svc_start_handle, NULL);    if (svc == NULL) {        /* Can't find service for discovered characteristic; this shouldn't         * happen.         */        assert(0);        return NULL;    }    chr = peer_chr_find(svc, gatt_chr->def_handle, &prev);    if (chr != NULL) {        /* Characteristic already discovered. */        return chr;    }    chr = os_memblock_get(&peer_chr_pool);    if (chr == NULL) {        /* Out of memory. */        return NULL;    }    memset(chr, 0, sizeof *chr);    chr->chr = *gatt_chr;    if (prev == NULL) {        SLIST_INSERT_HEAD(&svc->chrs, chr, next);    } else {        SLIST_NEXT(prev, next) = chr;    }    return chr;}
static struct peer_chr
peer_chr
*peer_chr_add(struct peer *peer,  uint16_t svc_start_handle,             const struct ble_gatt_chr *gatt_chr)
*
peer_chr_add
struct peer *peer
struct peer
peer
*peer
*
peer
uint16_t svc_start_handle
uint16_t
uint16_t
svc_start_handle
svc_start_handle
const struct ble_gatt_chr *gatt_chr
const struct ble_gatt_chr
ble_gatt_chr
*gatt_chr
*
gatt_chr
{    struct peer_chr *prev;    struct peer_chr *chr;    struct peer_svc *svc;    svc = peer_svc_find(peer, svc_start_handle, NULL);    if (svc == NULL) {        /* Can't find service for discovered characteristic; this shouldn't         * happen.         */        assert(0);        return NULL;    }    chr = peer_chr_find(svc, gatt_chr->def_handle, &prev);    if (chr != NULL) {        /* Characteristic already discovered. */        return chr;    }    chr = os_memblock_get(&peer_chr_pool);    if (chr == NULL) {        /* Out of memory. */        return NULL;    }    memset(chr, 0, sizeof *chr);    chr->chr = *gatt_chr;    if (prev == NULL) {        SLIST_INSERT_HEAD(&svc->chrs, chr, next);    } else {        SLIST_NEXT(prev, next) = chr;    }    return chr;}
struct peer_chr *prev;
struct peer_chr *prev;
struct peer_chr
peer_chr
*prev
*
prev
struct peer_chr *chr;
struct peer_chr *chr;
struct peer_chr
peer_chr
*chr
*
chr
struct peer_svc *svc;
struct peer_svc *svc;
struct peer_svc
peer_svc
*svc
*
svc
svc = peer_svc_find(peer, svc_start_handle, NULL);
svc = peer_svc_find(peer, svc_start_handle, NULL)
svc
svc
peer_svc_find(peer, svc_start_handle, NULL)
peer_svc_find
peer_svc_find
peer
peer
svc_start_handle
svc_start_handle
NULL
NULL
if (svc == NULL) {        /* Can't find service for discovered characteristic; this shouldn't         * happen.         */        assert(0);        return NULL;    }
svc == NULL
svc
svc
NULL
NULL
{        /* Can't find service for discovered characteristic; this shouldn't         * happen.         */        assert(0);        return NULL;    }
assert(0);
assert(0)
assert
assert
0
return NULL;
NULL
NULL
chr = peer_chr_find(svc, gatt_chr->def_handle, &prev);
chr = peer_chr_find(svc, gatt_chr->def_handle, &prev)
chr
chr
peer_chr_find(svc, gatt_chr->def_handle, &prev)
peer_chr_find
peer_chr_find
svc
svc
gatt_chr->def_handle
gatt_chr
gatt_chr
def_handle
&prev
prev
prev
if (chr != NULL) {        /* Characteristic already discovered. */        return chr;    }
chr != NULL
chr
chr
NULL
NULL
{        /* Characteristic already discovered. */        return chr;    }
return chr;
chr
chr
chr = os_memblock_get(&peer_chr_pool);
chr = os_memblock_get(&peer_chr_pool)
chr
chr
os_memblock_get(&peer_chr_pool)
os_memblock_get
os_memblock_get
&peer_chr_pool
peer_chr_pool
peer_chr_pool
if (chr == NULL) {        /* Out of memory. */        return NULL;    }
chr == NULL
chr
chr
NULL
NULL
{        /* Out of memory. */        return NULL;    }
return NULL;
NULL
NULL
memset(chr, 0, sizeof *chr);
memset(chr, 0, sizeof *chr)
memset
memset
chr
chr
0
sizeof *chr
*chr
chr
chr
chr->chr = *gatt_chr;
chr->chr = *gatt_chr
chr->chr
chr
chr
chr
*gatt_chr
gatt_chr
gatt_chr
if (prev == NULL) {        SLIST_INSERT_HEAD(&svc->chrs, chr, next);    } else {        SLIST_NEXT(prev, next) = chr;    }
prev == NULL
prev
prev
NULL
NULL
{        SLIST_INSERT_HEAD(&svc->chrs, chr, next);    }
SLIST_INSERT_HEAD(&svc->chrs, chr, next);
SLIST_INSERT_HEAD(&svc->chrs, chr, next)
SLIST_INSERT_HEAD
SLIST_INSERT_HEAD
&svc->chrs
svc->chrs
svc
svc
chrs
chr
chr
next
next
{        SLIST_NEXT(prev, next) = chr;    }
SLIST_NEXT(prev, next) = chr;
SLIST_NEXT(prev, next) = chr
SLIST_NEXT(prev, next)
SLIST_NEXT
SLIST_NEXT
prev
prev
next
next
chr
chr
return chr;
chr
chr
-----joern-----
(43,53,0)
(73,63,0)
(19,9,0)
(0,12,0)
(11,69,0)
(7,44,0)
(42,18,0)
(57,50,0)
(52,66,0)
(62,75,0)
(71,30,0)
(12,25,0)
(33,62,0)
(11,30,0)
(37,82,0)
(21,30,0)
(75,27,0)
(80,30,0)
(53,24,0)
(65,22,0)
(16,24,0)
(69,11,0)
(20,40,0)
(44,75,0)
(36,11,0)
(17,28,0)
(42,57,0)
(39,56,0)
(79,30,0)
(9,23,0)
(27,30,0)
(29,57,0)
(69,82,0)
(66,11,0)
(1,34,0)
(63,30,0)
(61,30,0)
(62,23,0)
(38,40,0)
(15,24,0)
(2,36,0)
(75,63,0)
(48,3,0)
(8,75,0)
(31,46,0)
(12,58,0)
(77,28,0)
(35,36,0)
(66,77,0)
(68,18,0)
(60,11,0)
(77,66,0)
(45,2,0)
(42,21,0)
(34,63,0)
(22,27,0)
(5,30,0)
(75,44,0)
(64,43,0)
(67,63,0)
(28,30,0)
(12,27,0)
(36,59,0)
(49,62,0)
(19,30,0)
(73,70,0)
(9,19,0)
(10,30,0)
(32,2,0)
(63,75,0)
(43,11,0)
(55,12,0)
(76,22,0)
(47,56,0)
(28,77,0)
(28,11,0)
(41,28,0)
(72,30,0)
(53,43,0)
(56,11,0)
(14,73,0)
(40,11,0)
(43,6,0)
(42,73,0)
(81,9,0)
(4,12,0)
(27,12,0)
(21,11,0)
(54,27,0)
(74,43,0)
(13,46,0)
(56,19,0)
(78,34,0)
(24,27,0)
(18,51,0)
(24,53,0)
(26,21,0)
(75,62,0)
(82,69,0)
(3,50,0)
(8,67,1)
(26,43,1)
(34,63,1)
(49,33,1)
(9,81,1)
(62,49,1)
(65,76,1)
(47,28,1)
(1,78,1)
(53,24,1)
(34,1,1)
(55,0,1)
(69,82,1)
(43,64,1)
(31,13,1)
(27,12,1)
(26,36,1)
(81,56,1)
(60,34,1)
(62,23,1)
(36,35,1)
(52,41,1)
(41,17,1)
(39,47,1)
(24,16,1)
(4,54,1)
(32,45,1)
(11,69,1)
(16,15,1)
(42,73,1)
(36,11,1)
(12,25,1)
(19,9,1)
(63,75,1)
(57,29,1)
(17,40,1)
(21,11,1)
(9,23,1)
(29,3,1)
(42,18,1)
(2,32,1)
(73,63,1)
(24,27,1)
(14,34,1)
(40,11,1)
(22,65,1)
(42,21,1)
(20,38,1)
(21,26,1)
(3,48,1)
(48,22,1)
(15,46,1)
(13,19,1)
(28,77,1)
(56,11,1)
(33,8,1)
(45,46,1)
(0,4,1)
(75,44,1)
(66,11,1)
(75,62,1)
(35,2,1)
(76,27,1)
(12,55,1)
(18,68,1)
(67,22,1)
(78,63,1)
(68,40,1)
(43,53,1)
(12,58,1)
(77,66,1)
(42,57,1)
(37,60,1)
(22,27,1)
(7,62,1)
(46,31,1)
(66,52,1)
(73,14,1)
(28,11,1)
(64,74,1)
(56,39,1)
(43,11,1)
(44,7,1)
(75,27,1)
(40,20,1)
(38,11,1)
(74,53,1)
(82,37,1)
(52,40,2)
(29,22,2)
(44,22,2)
(46,40,2)
(40,11,2)
(35,46,2)
(53,24,2)
(8,22,2)
(62,23,2)
(41,40,2)
(43,46,2)
(49,22,2)
(21,11,2)
(62,22,2)
(56,11,2)
(17,40,2)
(26,40,2)
(63,75,2)
(69,34,2)
(53,46,2)
(60,34,2)
(82,34,2)
(12,58,2)
(81,40,2)
(64,46,2)
(36,46,2)
(56,40,2)
(19,40,2)
(75,22,2)
(42,73,2)
(77,40,2)
(34,63,2)
(28,11,2)
(2,46,2)
(31,40,2)
(74,46,2)
(68,40,2)
(32,46,2)
(14,34,2)
(39,40,2)
(11,34,2)
(18,40,2)
(34,22,2)
(73,63,2)
(78,22,2)
(43,11,2)
(13,40,2)
(75,62,2)
(66,40,2)
(40,34,2)
(45,46,2)
(20,34,2)
(75,44,2)
(12,25,2)
(21,40,2)
(36,11,2)
(9,40,2)
(33,22,2)
(73,34,2)
(66,11,2)
(16,46,2)
(42,18,2)
(15,46,2)
(38,34,2)
(27,12,2)
(63,22,2)
(7,22,2)
(22,27,2)
(28,40,2)
(9,23,2)
(28,77,2)
(75,27,2)
(57,22,2)
(11,69,2)
(19,9,2)
(24,46,2)
(67,22,2)
(3,22,2)
(24,27,2)
(48,22,2)
(42,21,2)
(77,66,2)
(1,22,2)
(43,53,2)
(47,40,2)
(37,34,2)
(69,82,2)
(42,57,2)
-----------------------------------
(0,svc_start_handle)
(1,NULL)
(2,SLIST_NEXT(prev, next)
(3,assert(0)
(4,peer)
(5,prev)
(6,)
(7,prev)
(8,svc)
(9,*gatt_chr)
(10,if (chr == NULL)
(11,chr = os_memblock_get(&peer_chr_pool)
(12,peer_svc_find(peer, svc_start_handle, NULL)
(13,prev)
(14,chr)
(15,svc)
(16,chrs)
(17,chr)
(18,return NULL;)
(19,chr->chr = *gatt_chr)
(20,NULL)
(21,return chr;)
(22,svc == NULL)
(23,const struct ble_gatt_chr *gatt_chr)
(24,svc->chrs)
(25,uint16_t svc_start_handle)
(26,chr)
(27,svc = peer_svc_find(peer, svc_start_handle, NULL)
(28,memset(chr, 0, sizeof *chr)
(29,NULL)
(30,)
(31,NULL)
(32,next)
(33,gatt_chr)
(34,chr != NULL)
(35,chr)
(36,SLIST_NEXT(prev, next)
(37,peer_chr_pool)
(38,chr)
(39,chr)
(40,chr == NULL)
(41,0)
(42,RET)
(43,SLIST_INSERT_HEAD(&svc->chrs, chr, next)
(44,&prev)
(45,prev)
(46,prev == NULL)
(47,chr)
(48,0)
(49,def_handle)
(50,)
(51,)
(52,chr)
(53,&svc->chrs)
(54,svc)
(55,NULL)
(56,chr->chr)
(57,return NULL;)
(58,struct peer *peer)
(59,)
(60,chr)
(61,chr)
(62,gatt_chr->def_handle)
(63,chr = peer_chr_find(svc, gatt_chr->def_handle, &prev)
(64,next)
(65,NULL)
(66,*chr)
(67,chr)
(68,NULL)
(69,os_memblock_get(&peer_chr_pool)
(70,)
(71,if (svc == NULL)
(72,svc)
(73,return chr;)
(74,chr)
(75,peer_chr_find(svc, gatt_chr->def_handle, &prev)
(76,svc)
(77,sizeof *chr)
(78,chr)
(79,if (chr != NULL)
(80,if (prev == NULL)
(81,gatt_chr)
(82,&peer_chr_pool)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^