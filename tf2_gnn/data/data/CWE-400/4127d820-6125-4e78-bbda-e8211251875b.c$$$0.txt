-----label-----
1
-----code-----
int read_client_line(int fd, struct client_data* cli_data, char** line) {
	int n, i;

	*line = NULL;
	n = recv( fd, cli_data->buffer + cli_data->used_buffer, sizeof( cli_data->buffer ) - cli_data->used_buffer, 0 );
	if ( n == 0 ) {
		return -1;
	}
	if ( n == -1 ) {
		if (errno == EAGAIN) {
			/* This shouldn't happen... */
			return 0;
		} else {
			return -2;
		}
	}

	for ( i=cli_data->used_buffer; i < cli_data->used_buffer+n; i++ ) {
		if ( cli_data->buffer[i] == '\n' ) {
			cli_data->buffer[i] = '\0';
			*line = cli_data->buffer;
			return i;
		}
	}

	/* Wait for the rest of the line */
	event_add( &cli_data->ev, NULL );
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
9,10
9,11
10,11
12,13
12,14
15,16
15,17
17,18
17,19
17,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
23,24
23,25
23,26
25,26
27,28
29,30
30,31
30,32
31,32
32,33
34,35
36,37
37,38
37,39
38,39
40,41
40,42
40,43
40,44
40,45
41,42
43,44
45,46
45,47
46,47
46,48
47,48
50,51
50,52
51,52
54,55
54,56
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
66,67
66,68
67,68
67,69
68,69
71,72
72,73
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
83,85
84,85
86,87
88,89
89,90
91,92
92,93
93,94
95,96
95,97
95,98
95,99
96,97
97,98
97,99
98,99
100,101
100,102
101,102
104,105
104,106
105,106
107,108
107,109
108,109
108,110
109,110
112,113
114,115
115,116
117,118
118,119
118,120
119,120
119,121
120,121
120,122
121,122
121,123
122,123
125,126
128,129
128,130
128,131
129,130
130,131
130,132
131,132
131,133
132,133
132,134
133,134
136,137
139,140
140,141
140,142
141,142
142,143
144,145
144,146
145,146
148,149
149,150
151,152
152,153
152,154
152,155
153,154
155,156
156,157
156,158
157,158
160,161
162,163
-----nextToken-----
2,4,6,8,11,13,14,16,18,19,20,24,26,28,33,35,39,42,44,48,49,52,53,59,60,63,64,65,69,70,74,78,80,85,87,90,94,99,102,103,106,110,111,113,116,123,124,126,127,134,135,137,138,143,146,147,150,154,158,159,161,163
-----computeFrom-----
30,31
30,32
37,38
37,39
45,46
45,47
54,55
54,56
67,68
67,69
76,77
76,78
83,84
83,85
97,98
97,99
104,105
104,106
107,108
107,109
119,120
119,121
130,131
130,132
140,141
140,142
-----guardedBy-----
123,146
126,150
124,147
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int read_client_line(int fd, struct client_data* cli_data, char** line) {	int n, i;	*line = NULL;	n = recv( fd, cli_data->buffer + cli_data->used_buffer, sizeof( cli_data->buffer ) - cli_data->used_buffer, 0 );	if ( n == 0 ) {		return -1;	}	if ( n == -1 ) {		if (errno == EAGAIN) {			/* This shouldn't happen... */			return 0;		} else {			return -2;		}	}	for ( i=cli_data->used_buffer; i < cli_data->used_buffer+n; i++ ) {		if ( cli_data->buffer[i] == '\n' ) {			cli_data->buffer[i] = '\0';			*line = cli_data->buffer;			return i;		}	}	/* Wait for the rest of the line */	event_add( &cli_data->ev, NULL );	return 0;}
int
read_client_line(int fd, struct client_data* cli_data, char** line)
read_client_line
int fd
int
fd
fd
struct client_data* cli_data
struct client_data
client_data
* cli_data
*
cli_data
char** line
char
** line
*
*
line
{	int n, i;	*line = NULL;	n = recv( fd, cli_data->buffer + cli_data->used_buffer, sizeof( cli_data->buffer ) - cli_data->used_buffer, 0 );	if ( n == 0 ) {		return -1;	}	if ( n == -1 ) {		if (errno == EAGAIN) {			/* This shouldn't happen... */			return 0;		} else {			return -2;		}	}	for ( i=cli_data->used_buffer; i < cli_data->used_buffer+n; i++ ) {		if ( cli_data->buffer[i] == '\n' ) {			cli_data->buffer[i] = '\0';			*line = cli_data->buffer;			return i;		}	}	/* Wait for the rest of the line */	event_add( &cli_data->ev, NULL );	return 0;}
int n, i;
int n, i;
int
n
n
i
i
*line = NULL;
*line = NULL
*line
line
line
NULL
NULL
n = recv( fd, cli_data->buffer + cli_data->used_buffer, sizeof( cli_data->buffer ) - cli_data->used_buffer, 0 );
n = recv( fd, cli_data->buffer + cli_data->used_buffer, sizeof( cli_data->buffer ) - cli_data->used_buffer, 0 )
n
n
recv( fd, cli_data->buffer + cli_data->used_buffer, sizeof( cli_data->buffer ) - cli_data->used_buffer, 0 )
recv
recv
fd
fd
cli_data->buffer + cli_data->used_buffer
cli_data->buffer
cli_data
cli_data
buffer
cli_data->used_buffer
cli_data
cli_data
used_buffer
sizeof( cli_data->buffer ) - cli_data->used_buffer
sizeof( cli_data->buffer )
( cli_data->buffer )
cli_data->buffer
cli_data
cli_data
buffer
cli_data->used_buffer
cli_data
cli_data
used_buffer
0
if ( n == 0 ) {		return -1;	}
n == 0
n
n
0
{		return -1;	}
return -1;
-1
1
if ( n == -1 ) {		if (errno == EAGAIN) {			/* This shouldn't happen... */			return 0;		} else {			return -2;		}	}
n == -1
n
n
-1
1
{		if (errno == EAGAIN) {			/* This shouldn't happen... */			return 0;		} else {			return -2;		}	}
if (errno == EAGAIN) {			/* This shouldn't happen... */			return 0;		} else {			return -2;		}
errno == EAGAIN
errno
errno
EAGAIN
EAGAIN
{			/* This shouldn't happen... */			return 0;		}
return 0;
0
{			return -2;		}
return -2;
-2
2
for ( i=cli_data->used_buffer; i < cli_data->used_buffer+n; i++ ) {		if ( cli_data->buffer[i] == '\n' ) {			cli_data->buffer[i] = '\0';			*line = cli_data->buffer;			return i;		}	}
i=cli_data->used_buffer;
i=cli_data->used_buffer
i
i
cli_data->used_buffer
cli_data
cli_data
used_buffer
i < cli_data->used_buffer+n
i
i
cli_data->used_buffer+n
cli_data->used_buffer
cli_data
cli_data
used_buffer
n
n
i++
i
i
{		if ( cli_data->buffer[i] == '\n' ) {			cli_data->buffer[i] = '\0';			*line = cli_data->buffer;			return i;		}	}
if ( cli_data->buffer[i] == '\n' ) {			cli_data->buffer[i] = '\0';			*line = cli_data->buffer;			return i;		}
cli_data->buffer[i] == '\n'
cli_data->buffer[i]
cli_data->buffer
cli_data
cli_data
buffer
i
i
'\n'
{			cli_data->buffer[i] = '\0';			*line = cli_data->buffer;			return i;		}
cli_data->buffer[i] = '\0';
cli_data->buffer[i] = '\0'
cli_data->buffer[i]
cli_data->buffer
cli_data
cli_data
buffer
i
i
'\0'
*line = cli_data->buffer;
*line = cli_data->buffer
*line
line
line
cli_data->buffer
cli_data
cli_data
buffer
return i;
i
i
event_add( &cli_data->ev, NULL );
event_add( &cli_data->ev, NULL )
event_add
event_add
&cli_data->ev
cli_data->ev
cli_data
cli_data
ev
NULL
NULL
return 0;
0
-----joern-----
(49,86,0)
(54,72,0)
(35,72,0)
(88,56,0)
(1,34,0)
(4,25,0)
(57,49,0)
(92,62,0)
(72,35,0)
(3,10,0)
(72,46,0)
(70,11,0)
(78,69,0)
(33,81,0)
(52,94,0)
(57,93,0)
(77,94,0)
(34,29,0)
(7,21,0)
(101,95,0)
(10,20,0)
(84,90,0)
(6,62,0)
(82,54,0)
(46,8,0)
(15,10,0)
(71,36,0)
(66,10,0)
(90,11,0)
(97,100,0)
(60,70,0)
(19,8,0)
(90,6,0)
(94,36,0)
(51,89,0)
(37,90,0)
(56,20,0)
(21,56,0)
(63,35,0)
(94,63,0)
(80,26,0)
(16,24,0)
(59,35,0)
(63,62,0)
(8,46,0)
(83,62,0)
(56,21,0)
(100,85,0)
(93,29,0)
(72,54,0)
(25,81,0)
(85,90,0)
(65,62,0)
(23,69,0)
(55,52,0)
(93,25,0)
(3,29,0)
(35,63,0)
(78,20,0)
(95,26,0)
(32,7,0)
(81,25,0)
(40,74,0)
(70,3,0)
(48,96,0)
(43,41,0)
(22,49,0)
(99,95,0)
(13,62,0)
(21,7,0)
(13,9,0)
(17,25,0)
(58,74,0)
(31,22,0)
(75,8,0)
(61,93,0)
(87,24,0)
(67,6,0)
(42,52,0)
(26,25,0)
(27,17,0)
(9,13,0)
(69,25,0)
(53,7,0)
(37,2,0)
(89,20,0)
(57,85,0)
(38,54,0)
(36,94,0)
(26,34,0)
(9,89,0)
(35,21,0)
(76,13,0)
(39,96,0)
(35,44,0)
(57,41,0)
(98,35,0)
(41,90,0)
(69,78,0)
(14,62,0)
(64,56,0)
(21,35,0)
(49,90,0)
(73,78,0)
(36,25,0)
(50,89,0)
(52,20,0)
(69,12,0)
(8,20,0)
(0,63,0)
(26,95,0)
(95,20,0)
(46,72,0)
(47,12,0)
(96,63,0)
(94,52,0)
(30,48,0)
(45,28,0)
(81,20,0)
(12,69,0)
(96,48,0)
(10,3,0)
(89,9,0)
(102,81,0)
(79,37,0)
(7,20,0)
(57,37,0)
(74,63,0)
(5,68,0)
(54,20,0)
(41,62,0)
(85,91,0)
(18,78,0)
(103,62,0)
(35,44,1)
(17,25,1)
(74,63,1)
(67,90,1)
(21,56,1)
(93,25,1)
(25,81,1)
(30,39,1)
(69,78,1)
(51,50,1)
(42,71,1)
(71,25,1)
(38,82,1)
(96,63,1)
(71,17,1)
(72,46,1)
(100,97,1)
(57,49,1)
(72,54,1)
(54,38,1)
(27,12,1)
(39,74,1)
(54,20,1)
(87,96,1)
(70,60,1)
(22,31,1)
(36,94,1)
(69,23,1)
(99,101,1)
(61,3,1)
(70,11,1)
(81,20,1)
(35,98,1)
(35,21,1)
(50,36,1)
(26,25,1)
(81,33,1)
(37,90,1)
(1,26,1)
(93,61,1)
(59,0,1)
(56,64,1)
(94,52,1)
(10,20,1)
(82,46,1)
(66,15,1)
(9,89,1)
(16,87,1)
(19,75,1)
(8,20,1)
(26,95,1)
(46,8,1)
(12,69,1)
(36,25,1)
(57,37,1)
(97,24,1)
(0,6,1)
(90,11,1)
(40,63,1)
(58,40,1)
(98,72,1)
(17,27,1)
(74,58,1)
(15,70,1)
(52,55,1)
(3,10,1)
(57,85,1)
(41,90,1)
(95,20,1)
(10,66,1)
(24,16,1)
(8,19,1)
(79,24,1)
(102,4,1)
(7,20,1)
(63,35,1)
(85,90,1)
(89,20,1)
(37,79,1)
(60,34,1)
(35,72,1)
(85,100,1)
(53,56,1)
(6,67,1)
(80,95,1)
(94,63,1)
(52,20,1)
(73,18,1)
(34,1,1)
(32,53,1)
(101,12,1)
(49,22,1)
(41,43,1)
(26,80,1)
(64,88,1)
(31,74,1)
(95,99,1)
(94,77,1)
(47,69,1)
(18,36,1)
(13,76,1)
(96,48,1)
(43,13,1)
(33,102,1)
(77,52,1)
(89,51,1)
(12,47,1)
(78,73,1)
(75,21,1)
(7,32,1)
(57,41,1)
(69,25,1)
(56,20,1)
(4,96,1)
(90,84,1)
(57,93,1)
(48,30,1)
(49,90,1)
(21,7,1)
(13,9,1)
(55,42,1)
(76,9,1)
(78,20,1)
(88,59,1)
(23,78,1)
(36,96,2)
(47,36,2)
(36,12,2)
(8,20,2)
(34,12,2)
(12,69,2)
(57,37,2)
(7,20,2)
(42,12,2)
(17,25,2)
(81,20,2)
(3,10,2)
(96,48,2)
(94,63,2)
(70,11,2)
(56,20,2)
(101,12,2)
(36,25,2)
(76,36,2)
(78,36,2)
(94,96,2)
(26,25,2)
(97,24,2)
(96,63,2)
(25,96,2)
(12,36,2)
(43,36,2)
(3,12,2)
(102,96,2)
(25,81,2)
(77,12,2)
(21,7,2)
(37,90,2)
(41,36,2)
(26,12,2)
(21,56,2)
(74,63,2)
(9,36,2)
(16,96,2)
(42,96,2)
(61,12,2)
(69,36,2)
(72,46,2)
(22,74,2)
(4,96,2)
(37,24,2)
(78,20,2)
(90,11,2)
(30,74,2)
(10,20,2)
(9,89,2)
(46,8,2)
(49,90,2)
(36,94,2)
(81,96,2)
(94,12,2)
(54,20,2)
(89,36,2)
(100,24,2)
(18,36,2)
(73,36,2)
(41,90,2)
(87,96,2)
(39,74,2)
(70,12,2)
(35,72,2)
(66,12,2)
(69,78,2)
(57,41,2)
(93,25,2)
(57,85,2)
(85,90,2)
(52,12,2)
(95,12,2)
(50,36,2)
(85,24,2)
(57,93,2)
(96,74,2)
(1,12,2)
(93,12,2)
(52,20,2)
(55,12,2)
(60,12,2)
(63,35,2)
(71,96,2)
(77,96,2)
(71,12,2)
(24,96,2)
(23,36,2)
(33,96,2)
(49,74,2)
(72,54,2)
(52,96,2)
(89,20,2)
(26,95,2)
(57,49,2)
(48,74,2)
(31,74,2)
(69,25,2)
(35,44,2)
(51,36,2)
(95,20,2)
(80,12,2)
(94,52,2)
(13,9,2)
(10,12,2)
(55,96,2)
(99,12,2)
(15,12,2)
(35,21,2)
(17,12,2)
(13,36,2)
(79,24,2)
(27,12,2)
-----------------------------------
(0,n)
(1,'\\0')
(2,)
(3,*line = cli_data->buffer)
(4,i)
(5,if ( cli_data->buffer[i] == '\\n' )
(6,*line = NULL)
(7,cli_data->used_buffer)
(8,cli_data->buffer)
(9,&cli_data->ev)
(10,cli_data->buffer)
(11,char** line)
(12,cli_data->buffer[i] == '\\n')
(13,event_add( &cli_data->ev, NULL )
(14,i)
(15,cli_data)
(16,EAGAIN)
(17,i++)
(18,cli_data)
(19,buffer)
(20,struct client_data* cli_data)
(21,cli_data->buffer + cli_data->used_buffer)
(22,-1)
(23,i)
(24,errno == EAGAIN)
(25,i=cli_data->used_buffer)
(26,cli_data->buffer[i])
(27,i)
(28,)
(29,)
(30,1)
(31,1)
(32,used_buffer)
(33,used_buffer)
(34,cli_data->buffer[i] = '\\0')
(35,recv( fd, cli_data->buffer + cli_data->used_buffer, sizeof( cli_data->buffer )
(36,i < cli_data->used_buffer+n)
(37,return 0;)
(38,used_buffer)
(39,n)
(40,n)
(41,return 0;)
(42,cli_data)
(43,0)
(44,int fd)
(45,if (errno == EAGAIN)
(46,sizeof( cli_data->buffer )
(47,'\\n')
(48,-1)
(49,return -1;)
(50,cli_data)
(51,ev)
(52,cli_data->used_buffer)
(53,cli_data)
(54,cli_data->used_buffer)
(55,used_buffer)
(56,cli_data->buffer)
(57,RET)
(58,0)
(59,fd)
(60,line)
(61,i)
(62,)
(63,n = recv( fd, cli_data->buffer + cli_data->used_buffer, sizeof( cli_data->buffer )
(64,buffer)
(65,n)
(66,buffer)
(67,NULL)
(68,)
(69,cli_data->buffer[i])
(70,*line)
(71,i)
(72,sizeof( cli_data->buffer )
(73,buffer)
(74,n == 0)
(75,cli_data)
(76,NULL)
(77,n)
(78,cli_data->buffer)
(79,0)
(80,i)
(81,cli_data->used_buffer)
(82,cli_data)
(83,if ( n == 0 )
(84,line)
(85,return -2;)
(86,)
(87,errno)
(88,cli_data)
(89,cli_data->ev)
(90,*line)
(91,)
(92,if ( n == -1 )
(93,return i;)
(94,cli_data->used_buffer+n)
(95,cli_data->buffer)
(96,n == -1)
(97,2)
(98,0)
(99,buffer)
(100,-2)
(101,cli_data)
(102,cli_data)
(103,for ( i=cli_data->used_buffer; i < cli_data->used_buffer+n; i++ )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^