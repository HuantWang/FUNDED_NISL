-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_51b_badSink(int count)
{
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
19,20
19,21
19,22
19,23
20,21
21,22
21,23
22,23
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
33,34
35,36
36,37
38,39
39,40
40,41
40,42
41,42
-----nextToken-----
2,4,6,8,14,16,18,23,24,27,31,32,34,37,42,43
-----computeFrom-----
21,22
21,23
25,26
25,27
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_51b_badSink(int count){    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_51b_badSink(int count)
CWE400_Resource_Exhaustion__fgets_for_loop_51b_badSink
int count
int
count
count
{    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(16,20,0)
(14,11,0)
(8,5,0)
(9,2,0)
(17,9,0)
(4,20,0)
(6,9,0)
(10,16,0)
(15,20,0)
(13,12,0)
(0,9,0)
(5,20,0)
(16,13,0)
(13,7,0)
(13,16,0)
(11,21,0)
(19,13,0)
(12,13,0)
(3,6,0)
(18,6,0)
(18,3,1)
(10,20,1)
(16,13,1)
(15,4,1)
(5,8,1)
(6,18,1)
(16,20,1)
(13,12,1)
(5,20,1)
(8,11,1)
(10,5,1)
(1,16,1)
(13,19,1)
(20,15,1)
(14,16,1)
(4,6,1)
(11,14,1)
(19,10,1)
(13,7,1)
(16,13,2)
(13,7,2)
(13,12,2)
(19,16,2)
(16,16,2)
(8,16,2)
(10,16,2)
(16,20,2)
(14,16,2)
(5,16,2)
(11,16,2)
(5,20,2)
(13,16,2)
-----------------------------------
(0,for (i = 0; i < (size_t)
(1,RET)
(2,)
(3,i)
(4,i)
(5,i++)
(6,i = 0)
(7,int count)
(8,i)
(9,)
(10,i)
(11,printLine("Hello")
(12,size_t)
(13,(size_t)
(14,"Hello")
(15,0)
(16,i < (size_t)
(17,i)
(18,0)
(19,count)
(20,i = 0)
(21,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^