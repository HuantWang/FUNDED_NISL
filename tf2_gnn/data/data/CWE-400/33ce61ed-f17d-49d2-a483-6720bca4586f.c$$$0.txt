-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    data = NULL;
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
27,30
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
62,63
-----nextToken-----
2,4,8,10,11,15,17,20,25,26,31,34,36,39,41,44,45,49,51,52,56,58,61,63
-----computeFrom-----
13,14
13,15
29,30
29,31
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    char * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    char * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(3,24,0)
(27,1,0)
(6,10,0)
(12,25,0)
(10,11,0)
(10,24,0)
(24,11,0)
(13,9,0)
(8,16,0)
(12,27,0)
(1,27,0)
(5,1,0)
(1,5,0)
(0,12,0)
(1,24,0)
(9,16,0)
(19,23,0)
(18,10,0)
(7,16,0)
(27,12,0)
(15,9,0)
(26,16,0)
(17,25,0)
(3,11,0)
(2,19,0)
(14,3,0)
(24,1,0)
(25,12,0)
(22,24,0)
(20,19,1)
(18,6,1)
(10,18,1)
(25,17,1)
(1,27,1)
(2,21,1)
(4,20,1)
(22,21,1)
(27,12,1)
(10,24,1)
(12,25,1)
(6,24,1)
(20,3,1)
(9,13,1)
(14,10,1)
(21,9,1)
(3,14,1)
(0,22,1)
(17,0,1)
(1,5,1)
(3,24,1)
(24,1,1)
(19,2,1)
(13,15,1)
(1,21,2)
(24,21,2)
(22,21,2)
(24,1,2)
(10,24,2)
(6,21,2)
(12,25,2)
(17,21,2)
(25,21,2)
(27,12,2)
(0,21,2)
(1,27,2)
(2,21,2)
(10,21,2)
(12,21,2)
(14,21,2)
(3,24,2)
(1,5,2)
(27,21,2)
(19,21,2)
(3,21,2)
(18,21,2)
-----------------------------------
(0,100)
(1,(char *)
(2,"Benign, fixed string")
(3,printLine(data)
(4,RET)
(5,char *)
(6,data)
(7,if(staticFalse)
(8,data)
(9,data = NULL)
(10,strcpy(data, "A String")
(11,)
(12,100*sizeof(char)
(13,NULL)
(14,data)
(15,data)
(16,)
(17,char)
(18,"A String")
(19,printLine("Benign, fixed string")
(20,staticTrue)
(21,staticFalse)
(22,data)
(23,)
(24,data = (char *)
(25,sizeof(char)
(26,if(staticTrue)
(27,ALLOCA(100*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^