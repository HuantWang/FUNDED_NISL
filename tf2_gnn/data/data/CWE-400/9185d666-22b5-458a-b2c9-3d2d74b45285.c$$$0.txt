-----label-----
1
-----code-----
static int * badSource(int * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
21,24
22,23
25,26
26,27
26,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
44,46
45,46
49,50
50,51
50,52
51,52
53,54
53,55
54,55
57,58
58,59
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,24,27,28,32,34,39,41,46,47,48,52,55,56,59
-----computeFrom-----
13,14
13,15
30,31
30,32
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int * badSource(int * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
static int
* badSource(int * data)
*
badSource
int * data
int
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(22,20,0)
(12,19,0)
(8,24,0)
(26,25,0)
(0,24,0)
(18,25,0)
(19,15,0)
(20,16,0)
(2,28,0)
(2,16,0)
(25,16,0)
(10,0,0)
(6,16,0)
(6,20,0)
(28,9,0)
(2,20,0)
(29,6,0)
(7,28,0)
(20,9,0)
(30,20,0)
(24,0,0)
(1,30,0)
(0,20,0)
(3,9,0)
(30,16,0)
(5,30,0)
(15,19,0)
(17,24,0)
(21,2,0)
(3,2,0)
(13,9,0)
(20,0,0)
(15,11,0)
(24,8,0)
(14,8,0)
(25,20,0)
(27,6,0)
(0,10,0)
(25,28,0)
(6,9,0)
(2,3,0)
(23,2,0)
(28,7,1)
(1,20,1)
(0,10,1)
(6,16,1)
(3,2,1)
(30,16,1)
(20,16,1)
(15,19,1)
(5,1,1)
(23,28,1)
(21,23,1)
(26,18,1)
(6,27,1)
(14,17,1)
(2,21,1)
(8,14,1)
(7,25,1)
(17,22,1)
(25,26,1)
(0,24,1)
(19,12,1)
(24,8,1)
(29,6,1)
(2,28,1)
(25,20,1)
(25,16,1)
(30,5,1)
(2,20,1)
(18,30,1)
(30,20,1)
(20,0,1)
(27,3,1)
(18,15,1)
(6,20,1)
(12,30,1)
(2,16,1)
(15,19,2)
(20,0,2)
(15,30,2)
(24,8,2)
(25,20,2)
(19,30,2)
(30,16,2)
(6,20,2)
(29,6,2)
(20,16,2)
(2,16,2)
(0,10,2)
(2,20,2)
(2,28,2)
(30,20,2)
(6,16,2)
(0,24,2)
(3,2,2)
(12,30,2)
(25,16,2)
-----------------------------------
(0,(int *)
(1,data)
(2,data[0])
(3,printIntLine(data[0])
(4, sizeof(int)
(5,NULL)
(6,return data;)
(7,5)
(8,sizeof(int)
(9,)
(10,int *)
(11,)
(12,1)
(13,if (data == NULL)
(14,int)
(15,exit(-1)
(16,int * data)
(17,100)
(18,data)
(19,-1)
(20,data = (int *)
(21,0)
(22,data)
(23,data)
(24,calloc(100, sizeof(int)
(25,data[0])
(26,0)
(27,data)
(28,data[0] = 5)
(29,RET)
(30,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^