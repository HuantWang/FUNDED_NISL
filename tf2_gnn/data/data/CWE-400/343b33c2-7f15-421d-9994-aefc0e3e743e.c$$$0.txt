-----label-----
0
-----code-----
static void goodG2B2()
{
    int64_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
46,48
47,48
51,52
52,53
52,54
53,54
55,56
55,57
56,57
61,62
62,63
62,64
63,64
67,68
67,69
69,70
69,71
69,72
69,73
69,74
69,75
70,71
75,76
76,77
76,78
77,78
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,38,42,43,48,49,50,54,57,58,59,60,64,65,66,68,71,72,73,74,78,79,80
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B2(){    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B2()
goodG2B2
{    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(35,8,0)
(33,30,0)
(0,4,0)
(7,14,0)
(10,14,0)
(17,35,0)
(8,35,0)
(30,24,0)
(31,20,0)
(3,28,0)
(6,24,0)
(35,17,0)
(11,21,0)
(34,23,0)
(13,28,0)
(31,17,0)
(27,30,0)
(26,31,0)
(4,28,0)
(29,24,0)
(18,24,0)
(2,28,0)
(8,14,0)
(15,14,0)
(21,8,0)
(35,32,0)
(23,14,0)
(21,37,0)
(37,14,0)
(1,28,0)
(16,21,0)
(25,8,0)
(17,31,0)
(9,20,0)
(5,14,0)
(20,31,0)
(22,14,0)
(37,21,0)
(32,35,0)
(5,23,1)
(36,30,1)
(30,33,1)
(17,31,1)
(31,20,1)
(1,4,1)
(37,21,1)
(9,26,1)
(21,8,1)
(0,19,1)
(19,5,1)
(22,8,1)
(20,9,1)
(33,27,1)
(3,19,1)
(4,0,1)
(15,37,1)
(21,16,1)
(35,32,1)
(23,34,1)
(11,22,1)
(12,3,1)
(34,36,1)
(25,36,1)
(19,15,1)
(26,25,1)
(8,35,1)
(35,17,1)
(12,1,1)
(16,11,1)
(3,19,2)
(21,36,2)
(26,36,2)
(31,36,2)
(35,36,2)
(15,36,2)
(34,36,2)
(31,20,2)
(9,36,2)
(21,8,2)
(37,21,2)
(11,36,2)
(35,32,2)
(20,36,2)
(4,19,2)
(23,36,2)
(17,31,2)
(37,36,2)
(25,36,2)
(1,19,2)
(0,19,2)
(35,17,2)
(17,36,2)
(22,36,2)
(16,36,2)
(8,36,2)
(5,36,2)
(8,35,2)
-----------------------------------
(0,"Benign, fixed string")
(1,break;)
(2,case 7:)
(3,break;)
(4,printLine("Benign, fixed string")
(5,break;)
(6,data)
(7,default:)
(8,data = (int64_t *)
(9,int64_t)
(10,case 6:)
(11,data)
(12,RET)
(13,default:)
(14,)
(15,break;)
(16,0)
(17,ALLOCA(100*sizeof(int64_t)
(18,switch(7)
(19,7)
(20,sizeof(int64_t)
(21,data[0])
(22,L)
(23,printLine("Benign, fixed string")
(24,)
(25,data)
(26,100)
(27,data)
(28,)
(29,switch(6)
(30,data = NULL)
(31,100*sizeof(int64_t)
(32,int64_t *)
(33,NULL)
(34,"Benign, fixed string")
(35,(int64_t *)
(36,6)
(37,printLongLongLine(data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^