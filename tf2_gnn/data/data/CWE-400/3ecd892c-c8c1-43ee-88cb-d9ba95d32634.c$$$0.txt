-----label-----
0
-----code-----
static void good1()
{
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
            if (data == NULL) {exit(-1);}
            twoIntsStruct * tmpData;
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine(&data[0]);
            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine(&data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
65,67
66,67
71,72
72,73
72,74
73,74
73,75
74,75
74,76
75,76
80,81
81,82
81,83
82,83
84,85
85,86
85,87
86,87
89,90
90,91
90,92
91,92
93,94
93,95
94,95
94,96
95,96
97,98
99,100
99,101
99,102
100,101
102,103
104,105
104,106
105,106
107,108
108,109
108,110
109,110
112,113
112,114
113,114
113,115
114,115
116,117
118,119
118,120
118,121
118,122
119,120
120,121
120,122
121,122
123,124
125,126
126,127
126,128
127,128
127,129
128,129
128,130
129,130
134,135
135,136
135,137
136,137
136,138
137,138
137,139
138,139
143,144
144,145
144,146
145,146
147,148
148,149
148,150
149,150
152,153
153,154
153,155
154,155
156,157
-----nextToken-----
2,4,9,14,15,21,23,24,29,31,34,36,40,41,45,47,52,54,58,60,61,67,68,69,70,76,77,78,79,83,87,88,92,96,98,101,103,106,110,111,115,117,122,124,130,131,132,133,139,140,141,142,146,150,151,155,157
-----computeFrom-----
35,36
35,37
43,44
43,45
63,64
63,65
72,73
72,74
90,91
90,92
104,105
104,106
113,114
113,115
120,121
120,122
126,127
126,128
135,136
135,137
-----guardedBy-----
115,124
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }}
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }
{            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
*
data
= (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
twoIntsStruct * tmpData;
twoIntsStruct * tmpData;
twoIntsStruct
twoIntsStruct
* tmpData
*
tmpData
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
tmpData
tmpData
(twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, (130000)*sizeof(twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(twoIntsStruct)
(130000)
130000
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(42,71,0)
(75,9,0)
(81,17,0)
(73,77,0)
(48,71,0)
(8,65,0)
(23,19,0)
(12,18,0)
(39,38,0)
(57,36,0)
(64,53,0)
(32,80,0)
(63,71,0)
(49,37,0)
(9,71,0)
(44,81,0)
(78,17,0)
(36,64,0)
(21,81,0)
(0,66,0)
(16,64,0)
(62,7,0)
(68,80,0)
(32,34,0)
(13,7,0)
(21,67,0)
(35,17,0)
(46,8,0)
(30,60,0)
(80,32,0)
(72,70,0)
(37,36,0)
(82,55,0)
(40,48,0)
(28,32,0)
(43,20,0)
(59,51,0)
(37,17,0)
(45,39,0)
(70,53,0)
(80,74,0)
(8,71,0)
(65,66,0)
(66,83,0)
(9,82,0)
(14,63,0)
(23,83,0)
(41,60,0)
(71,83,0)
(34,32,0)
(63,17,0)
(61,20,0)
(41,71,0)
(17,53,0)
(10,58,0)
(77,83,0)
(55,82,0)
(3,22,0)
(31,74,0)
(36,37,0)
(60,77,0)
(82,9,0)
(1,41,0)
(20,61,0)
(11,48,0)
(25,41,0)
(69,51,0)
(7,18,0)
(79,83,0)
(83,24,0)
(47,55,0)
(19,48,0)
(18,83,0)
(26,20,0)
(61,70,0)
(65,8,0)
(56,34,0)
(84,83,0)
(54,8,0)
(67,21,0)
(60,41,0)
(52,37,0)
(74,80,0)
(29,45,0)
(71,9,0)
(50,81,0)
(19,23,0)
(85,83,0)
(17,18,0)
(27,55,0)
(63,83,0)
(18,74,0)
(51,71,0)
(74,18,0)
(48,19,0)
(9,75,0)
(80,71,0)
(55,47,0)
(81,21,0)
(4,65,0)
(67,53,0)
(2,61,0)
(20,17,0)
(76,83,0)
(74,31,0)
(39,45,0)
(6,47,0)
(58,5,0)
(37,17,1)
(10,15,1)
(1,25,1)
(42,15,1)
(78,35,1)
(17,78,1)
(63,17,1)
(6,27,1)
(9,75,1)
(65,8,1)
(16,36,1)
(34,56,1)
(47,6,1)
(64,16,1)
(21,81,1)
(49,52,1)
(33,63,1)
(58,10,1)
(74,80,1)
(26,64,1)
(67,21,1)
(36,57,1)
(36,37,1)
(81,17,1)
(72,61,1)
(55,47,1)
(8,46,1)
(68,12,1)
(74,31,1)
(11,66,1)
(7,18,1)
(46,54,1)
(62,18,1)
(13,62,1)
(2,20,1)
(60,30,1)
(82,55,1)
(27,42,1)
(81,50,1)
(12,23,1)
(39,45,1)
(65,4,1)
(80,71,1)
(29,51,1)
(25,51,1)
(66,0,1)
(57,37,1)
(41,71,1)
(40,11,1)
(7,13,1)
(51,71,1)
(23,19,1)
(73,60,1)
(59,71,1)
(9,82,1)
(63,71,1)
(60,41,1)
(20,17,1)
(35,7,1)
(54,77,1)
(17,18,1)
(52,17,1)
(14,67,1)
(18,74,1)
(45,29,1)
(37,49,1)
(71,9,1)
(61,20,1)
(77,73,1)
(80,32,1)
(48,71,1)
(70,72,1)
(44,70,1)
(14,7,1)
(43,26,1)
(48,40,1)
(20,43,1)
(69,59,1)
(4,8,1)
(30,41,1)
(50,44,1)
(8,71,1)
(19,48,1)
(51,69,1)
(0,65,1)
(56,28,1)
(61,2,1)
(28,68,1)
(33,58,1)
(25,39,1)
(63,14,1)
(41,1,1)
(32,34,1)
(6,15,2)
(58,15,2)
(55,47,2)
(0,15,2)
(21,7,2)
(63,15,2)
(59,15,2)
(80,32,2)
(14,15,2)
(1,15,2)
(25,15,2)
(72,7,2)
(13,15,2)
(27,15,2)
(16,7,2)
(34,15,2)
(26,7,2)
(18,15,2)
(18,74,2)
(32,34,2)
(78,7,2)
(60,41,2)
(80,71,2)
(8,71,2)
(44,7,2)
(19,15,2)
(48,71,2)
(57,7,2)
(55,15,2)
(20,17,2)
(67,7,2)
(36,37,2)
(56,15,2)
(19,48,2)
(7,18,2)
(36,7,2)
(80,15,2)
(68,15,2)
(2,7,2)
(71,15,2)
(62,15,2)
(32,15,2)
(37,7,2)
(73,15,2)
(60,15,2)
(10,15,2)
(39,51,2)
(54,15,2)
(52,7,2)
(74,31,2)
(9,75,2)
(46,15,2)
(65,15,2)
(11,15,2)
(64,7,2)
(47,15,2)
(21,81,2)
(71,9,2)
(70,7,2)
(82,15,2)
(7,15,2)
(29,51,2)
(74,15,2)
(67,21,2)
(43,7,2)
(9,15,2)
(23,15,2)
(82,55,2)
(61,20,2)
(61,7,2)
(8,15,2)
(77,15,2)
(65,8,2)
(41,15,2)
(66,15,2)
(51,71,2)
(45,51,2)
(30,15,2)
(69,15,2)
(41,71,2)
(74,80,2)
(9,82,2)
(35,7,2)
(17,7,2)
(28,15,2)
(50,7,2)
(49,7,2)
(81,17,2)
(12,15,2)
(42,15,2)
(51,15,2)
(81,7,2)
(37,17,2)
(23,19,2)
(20,7,2)
(17,18,2)
(63,17,2)
(63,71,2)
(40,15,2)
(48,15,2)
(39,45,2)
(4,15,2)
-----------------------------------
(0,0)
(1,0)
(2,intTwo)
(3,if(globalReturnsFalse()
(4,intTwo)
(5,)
(6,twoIntsStruct)
(7,tmpData != NULL)
(8,data[0])
(9,(twoIntsStruct *)
(10,"Benign, fixed string")
(11,data)
(12,tmpData)
(13,NULL)
(14,data)
(15,globalReturnsFalse()
(16,1)
(17,data = tmpData)
(18,tmpData = (twoIntsStruct *)
(19,&data[0])
(20,data[0])
(21,&data[0])
(22,)
(23,printStructLine(&data[0])
(24,)
(25,data)
(26,data)
(27,100)
(28,130000)
(29,1)
(30,intOne)
(31,twoIntsStruct *)
(32,(130000)
(33,RET)
(34,sizeof(twoIntsStruct)
(35,data)
(36,data[0].intOne)
(37,data[0])
(38,)
(39,exit(-1)
(40,0)
(41,data[0])
(42,data)
(43,0)
(44,data)
(45,-1)
(46,0)
(47,sizeof(twoIntsStruct)
(48,data[0])
(49,0)
(50,0)
(51,data == NULL)
(52,data)
(53,)
(54,data)
(55,100*sizeof(twoIntsStruct)
(56,twoIntsStruct)
(57,intOne)
(58,printLine("Benign, fixed string")
(59,data)
(60,data[0].intOne)
(61,data[0].intTwo)
(62,tmpData)
(63,free(data)
(64,data[0].intOne = 1)
(65,data[0].intTwo)
(66,data[0].intTwo = 0)
(67,printStructLine(&data[0])
(68,data)
(69,NULL)
(70,data[0].intTwo = 1)
(71,* data = (twoIntsStruct *)
(72,1)
(73,0)
(74,(twoIntsStruct *)
(75,twoIntsStruct *)
(76,data)
(77,data[0].intOne = 0)
(78,tmpData)
(79,if (data == NULL)
(80,realloc(data, (130000)
(81,data[0])
(82,malloc(100*sizeof(twoIntsStruct)
(83,)
(84,tmpData)
(85,if (tmpData != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^