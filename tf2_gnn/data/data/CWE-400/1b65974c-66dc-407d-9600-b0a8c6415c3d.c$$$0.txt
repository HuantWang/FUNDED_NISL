-----label-----
0
-----code-----
static void goodG2B()
{
    int h,j;
    wchar_t * data;
    data = NULL;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
57,58
58,59
58,60
58,61
59,60
61,62
64,65
65,66
65,67
66,67
68,69
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
80,81
81,82
83,84
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,52,55,56,60,62,63,67,69,74,75,78,79,82,84
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
51,52
51,53
72,73
72,74
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B(){    int h,j;    wchar_t * data;    data = NULL;    for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    int h,j;    wchar_t * data;    data = NULL;    for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int h,j;
int h,j;
int
h
h
j
j
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,29,0)
(23,15,0)
(37,8,0)
(8,2,0)
(28,30,0)
(5,18,0)
(7,3,0)
(11,13,0)
(2,0,0)
(22,16,0)
(36,3,0)
(9,29,0)
(1,10,0)
(10,2,0)
(14,8,0)
(13,3,0)
(4,30,0)
(31,1,0)
(10,1,0)
(2,10,0)
(35,15,0)
(14,12,0)
(32,29,0)
(19,1,0)
(21,14,0)
(30,15,0)
(16,29,0)
(1,19,0)
(6,3,0)
(17,13,0)
(24,19,0)
(26,23,0)
(27,3,0)
(8,12,0)
(2,8,0)
(34,18,0)
(20,15,0)
(25,3,0)
(0,2,0)
(2,0,1)
(37,18,1)
(22,14,1)
(14,8,1)
(5,34,1)
(34,29,1)
(16,22,1)
(11,17,1)
(23,15,1)
(13,11,1)
(28,15,1)
(23,26,1)
(21,8,1)
(33,30,1)
(4,28,1)
(35,20,1)
(18,29,1)
(2,10,1)
(10,1,1)
(28,23,1)
(14,21,1)
(29,9,1)
(20,18,1)
(9,32,1)
(15,35,1)
(8,2,1)
(1,19,1)
(19,24,1)
(18,5,1)
(30,4,1)
(16,29,1)
(26,30,1)
(30,15,1)
(24,31,1)
(34,16,1)
(31,37,1)
(32,13,1)
(1,19,2)
(2,18,2)
(31,18,2)
(37,18,2)
(23,30,2)
(10,1,2)
(18,29,2)
(18,18,2)
(5,18,2)
(28,30,2)
(30,15,2)
(1,18,2)
(2,0,2)
(30,30,2)
(14,18,2)
(19,18,2)
(10,18,2)
(34,18,2)
(22,18,2)
(2,10,2)
(8,18,2)
(24,18,2)
(16,18,2)
(14,8,2)
(26,30,2)
(4,30,2)
(16,29,2)
(8,2,2)
(23,15,2)
(21,18,2)
-----------------------------------
(0,wchar_t *)
(1,100*sizeof(wchar_t)
(2,(wchar_t *)
(3,)
(4,1)
(5,1)
(6,h)
(7,for(j = 0; j < 1; j++)
(8,data = (wchar_t *)
(9,0)
(10,ALLOCA(100*sizeof(wchar_t)
(11,NULL)
(12,)
(13,data = NULL)
(14,printWLine(data)
(15,j = 0)
(16,h++)
(17,data)
(18,h < 1)
(19,sizeof(wchar_t)
(20,j)
(21,data)
(22,h)
(23,j++)
(24,wchar_t)
(25,for(h = 0; h < 1; h++)
(26,j)
(27,data)
(28,j)
(29,h = 0)
(30,j < 1)
(31,100)
(32,h)
(33,RET)
(34,h)
(35,0)
(36,j)
(37,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^