-----label-----
0
-----code-----
static void post_process_linkages(Sentence sent, Parse_Options opts) {

	int *indices;
	int in, block_bottom, block_top;
	int N_linkages_found, N_linkages_alloced;
	int N_linkages_post_processed, N_valid_linkages;
	int overflowed, only_canonical_allowed;
	double denom;
	Linkage_info *link_info;
	int canonical;

	free_post_processing(sent);

	overflowed = build_parse_set(sent, sent->null_count, opts);
	print_time(opts, "Built parse set");

	if (overflowed) {
		/* We know that sent->num_linkages_found is bogus, possibly negative */
		sent->num_linkages_found = opts->linkage_limit;
		if (opts->verbosity > 1)
		  fprintf(stdout,
				  "Warning: Count overflow.\n"
				  "Considering a random subset of %d of an unknown and large number of linkages\n",
				  opts->linkage_limit);
	}
	N_linkages_found = sent->num_linkages_found;

	if (sent->num_linkages_found == 0) {
		sent->num_linkages_alloced = 0;
		sent->num_linkages_post_processed = 0;
		sent->num_valid_linkages = 0;
		sent->link_info = NULL;
		return;
	}

	if (N_linkages_found > opts->linkage_limit)
	  {
		N_linkages_alloced = opts->linkage_limit;
		if (opts->verbosity > 1) {
		  fprintf(stdout,
				  "Warning: Considering a random subset of %d of %d linkages\n",
				  N_linkages_alloced, N_linkages_found);
		}
	  }
	else N_linkages_alloced = N_linkages_found;

	link_info=(Linkage_info *)xalloc(N_linkages_alloced * sizeof(Linkage_info));
	N_linkages_post_processed = N_valid_linkages = 0;

	/* generate an array of linkage indices to examine */
	indices = (int *) xalloc(N_linkages_alloced * sizeof(int));
	if (overflowed) {
		for (in=0; in<N_linkages_alloced; in++) {
			indices[in] = -(in+1);
		}
	}
	else {
		my_random_initialize(N_linkages_found + sent->length);
		for (in=0; in<N_linkages_alloced; in++) {
			denom = (double) N_linkages_alloced;
			block_bottom = (int) (((double)in*(double) N_linkages_found)/denom);
			block_top = (int) (((double)(in+1)*(double)N_linkages_found)/denom);
			indices[in] = block_bottom + (my_random() % (block_top-block_bottom));
		}
		my_random_finalize();
	}

	only_canonical_allowed = (!(overflowed || (N_linkages_found > 2*opts->linkage_limit)));
	/* When we're processing only a small subset of the linkages, don't worry
	   about restricting the set we consider to be canonical ones.  In the extreme
	   case where we are only generating 1 in a million linkages, it's very unlikely
	   that we'll hit two symmetric variants of the same linkage anyway. */

	/* (optional) first pass: just visit the linkages */
	/* The purpose of these two passes is to make the post-processing more
	   efficient.  Because (hopefully) by the time you do the real work
	   in the 2nd pass you've pruned the relevant rule set in the first pass. */
	if (sent->length >= opts->twopass_length) {
		for (in=0; (in < N_linkages_alloced) &&
				   (!resources_exhausted(opts->resources)); in++) {
			extract_links(indices[in], sent->null_count, sent->parse_info);
			if (set_has_fat_down(sent)) {
				if (only_canonical_allowed && !is_canonical_linkage(sent)) continue;
				analyze_fat_linkage(sent, opts, PP_FIRST_PASS);
			}
			else {
				analyze_thin_linkage(sent, opts, PP_FIRST_PASS);
			}
		}
	}

	/* second pass: actually perform post-processing */
	for (in=0; (in < N_linkages_alloced) &&
			   (!resources_exhausted(opts->resources)); in++) {
		extract_links(indices[in], sent->null_count, sent->parse_info);
		if (set_has_fat_down(sent)) {
			canonical = is_canonical_linkage(sent);
			if (only_canonical_allowed && !canonical) continue;
			link_info[N_linkages_post_processed] =
				analyze_fat_linkage(sent, opts, PP_SECOND_PASS);
			link_info[N_linkages_post_processed].fat = TRUE;
			link_info[N_linkages_post_processed].canonical = canonical;
		}
		else {
			link_info[N_linkages_post_processed] =
				analyze_thin_linkage(sent, opts, PP_SECOND_PASS);
			link_info[N_linkages_post_processed].fat = FALSE;
			link_info[N_linkages_post_processed].canonical = TRUE;
		}
		if (link_info[N_linkages_post_processed].N_violations==0)
			N_valid_linkages++;
		link_info[N_linkages_post_processed].index = indices[in];
		N_linkages_post_processed++;
	}

	print_time(opts, "Postprocessed all linkages");
	qsort((void *)link_info, N_linkages_post_processed, sizeof(Linkage_info),
		  (int (*)(const void *, const void *)) opts->cost_model.compare_fn);

	if (!resources_exhausted(opts->resources)) {
		assert(! ((N_linkages_post_processed == 0) &&
				  (N_linkages_found > 0) &&
				  (N_linkages_found < opts->linkage_limit)),
			   "None of the linkages is canonical");
	}

	if (opts->verbosity > 1) {
		fprintf(stdout, "%d of %d linkages with no P.P. violations\n",
				N_valid_linkages, N_linkages_post_processed);
	}

	print_time(opts, "Sorted all linkages");

	sent->num_linkages_alloced = N_linkages_alloced;
	sent->num_linkages_post_processed = N_linkages_post_processed;
	sent->num_valid_linkages = N_valid_linkages;
	sent->link_info = link_info;

	xfree(indices, N_linkages_alloced * sizeof(int));
	/*if(N_valid_linkages == 0) free_andlists(sent); */
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
10,11
10,12
11,12
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
15,34
15,35
15,36
15,37
15,38
15,39
15,40
15,41
15,42
15,43
15,44
15,45
15,46
15,47
16,17
17,18
17,19
19,20
19,21
22,23
23,24
23,25
23,26
23,27
25,26
27,28
29,30
31,32
32,33
32,34
32,35
34,35
36,37
38,39
39,40
39,41
39,42
41,42
43,44
45,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
64,65
65,66
65,67
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
79,80
79,81
79,82
79,83
80,81
82,83
84,85
84,86
85,86
88,89
90,91
91,92
91,93
91,94
92,93
94,95
97,98
97,99
98,99
100,101
100,102
101,102
102,103
102,104
103,104
103,105
104,105
107,108
107,109
108,109
111,112
111,113
112,113
112,114
113,114
113,115
114,115
118,119
119,120
119,121
119,122
119,123
120,121
122,123
125,126
125,127
126,127
129,130
130,131
130,132
131,132
133,134
133,135
134,135
137,138
137,139
138,139
138,140
139,140
139,141
140,141
144,145
144,146
144,147
144,148
144,149
145,146
146,147
146,148
147,148
147,149
148,149
152,153
153,154
153,155
154,155
154,156
155,156
159,160
160,161
160,162
161,162
161,163
162,163
166,167
167,168
167,169
168,169
168,170
169,170
172,173
175,176
175,177
175,178
176,177
176,178
177,178
179,180
179,181
180,181
183,184
183,185
184,185
185,186
185,187
186,187
188,189
188,190
189,190
192,193
192,194
193,194
193,195
194,195
194,196
195,196
199,200
200,201
201,202
201,203
201,204
201,205
201,206
202,203
204,205
207,208
209,210
211,212
212,213
212,214
213,214
215,216
217,218
218,219
218,220
219,220
221,222
221,223
222,223
222,224
223,224
225,226
227,228
227,229
228,229
230,231
230,232
231,232
233,234
234,235
234,236
235,236
238,239
239,240
239,241
240,241
242,243
242,244
243,244
246,247
247,248
247,249
248,249
250,251
250,252
251,252
251,253
253,254
255,256
255,257
256,257
258,259
258,260
259,260
261,262
262,263
262,264
265,266
265,267
265,268
266,267
268,269
269,270
269,271
269,272
269,273
270,271
271,272
271,273
272,273
275,276
275,277
276,277
278,279
280,281
281,282
283,284
284,285
285,286
285,287
286,287
286,288
287,288
289,290
291,292
292,293
293,294
293,295
294,295
297,298
297,299
297,300
298,299
299,300
299,301
300,301
302,303
302,304
303,304
305,306
305,307
306,307
309,310
309,311
309,312
309,313
310,311
311,312
311,313
312,313
315,316
315,317
316,317
318,319
320,321
321,322
323,324
323,325
323,326
323,327
324,325
325,326
325,327
326,327
328,329
328,330
329,330
329,331
332,333
334,335
335,336
335,337
336,337
338,339
338,340
339,340
339,341
342,343
343,344
343,345
344,345
345,346
345,347
346,347
346,348
347,348
347,349
350,351
352,353
352,354
353,354
353,355
356,357
358,359
360,361
361,362
361,363
362,363
364,365
364,366
365,366
365,367
368,369
369,370
369,371
370,371
371,372
371,373
372,373
372,374
373,374
373,375
376,377
377,378
377,379
378,379
381,382
381,383
382,383
382,384
385,386
387,388
389,390
390,391
390,392
391,392
391,393
392,393
394,395
396,397
396,398
397,398
399,400
400,401
400,402
401,402
402,403
404,405
405,406
405,407
406,407
408,409
410,411
411,412
412,413
414,415
415,416
415,417
416,417
418,419
419,420
420,421
421,422
421,423
422,423
424,425
425,426
425,427
426,427
428,429
428,430
430,431
430,432
431,432
434,435
434,436
435,436
435,437
436,437
436,438
437,438
440,441
440,442
441,442
444,445
445,446
445,447
445,448
445,449
446,447
447,448
447,449
448,449
451,452
451,453
452,453
453,454
453,455
454,455
456,457
458,459
459,460
460,461
460,462
461,462
463,464
463,465
464,465
467,468
468,469
470,471
470,472
471,472
472,473
472,474
472,475
472,476
473,474
475,476
475,477
476,477
478,479
480,481
480,482
481,482
484,485
484,486
485,486
488,489
488,490
488,491
489,490
489,491
490,491
492,493
494,495
494,496
495,496
495,497
496,497
496,498
497,498
499,500
500,501
500,502
501,502
503,504
506,507
507,508
507,509
507,510
507,511
508,509
510,511
512,513
514,515
516,517
517,518
518,519
518,520
518,521
518,522
519,520
521,522
523,524
525,526
527,528
527,529
527,530
527,531
528,529
529,530
529,531
530,531
533,534
533,535
534,535
535,536
535,537
536,537
538,539
540,541
541,542
542,543
542,544
543,544
545,546
545,547
546,547
549,550
550,551
552,553
552,554
552,555
552,556
552,557
553,554
554,555
554,556
554,557
554,558
555,556
557,558
557,559
558,559
560,561
562,563
562,564
563,564
566,567
566,568
567,568
570,571
570,572
570,573
571,572
571,573
572,573
574,575
576,577
576,578
576,579
576,580
576,581
577,578
578,579
578,580
579,580
581,582
581,583
582,583
584,585
586,587
586,588
587,588
587,589
588,589
590,591
591,592
594,595
595,596
595,597
596,597
596,598
597,598
599,600
601,602
601,603
601,604
601,605
602,603
604,605
606,607
608,609
610,611
611,612
611,613
612,613
612,614
613,614
613,615
614,615
616,617
619,620
621,622
622,623
622,624
623,624
623,625
624,625
624,626
625,626
627,628
630,631
632,633
632,634
632,635
633,634
634,635
634,636
635,636
635,637
636,637
638,639
640,641
640,642
640,643
640,644
641,642
643,644
645,646
647,648
649,650
650,651
650,652
651,652
651,653
652,653
652,654
653,654
655,656
658,659
660,661
661,662
661,663
662,663
662,664
663,664
663,665
664,665
666,667
669,670
671,672
671,673
672,673
672,674
673,674
673,675
674,675
674,676
675,676
677,678
681,682
682,683
683,684
685,686
686,687
686,688
687,688
687,689
688,689
688,690
689,690
691,692
694,695
694,696
695,696
697,698
699,700
700,701
701,702
703,704
704,705
704,706
704,707
705,706
707,708
710,711
711,712
711,713
711,714
711,715
711,716
712,713
714,715
714,716
715,716
715,717
717,718
719,720
721,722
723,724
724,725
724,726
725,726
728,729
728,730
729,730
729,731
731,732
731,733
731,734
732,733
734,735
734,736
736,737
736,738
739,740
739,741
741,742
741,743
744,745
744,746
745,746
745,747
746,747
750,751
750,752
751,752
752,753
752,754
753,754
755,756
755,757
756,757
759,760
760,761
761,762
761,763
761,764
762,763
764,765
765,766
766,767
766,768
767,768
767,769
768,769
769,770
769,771
770,771
773,774
774,775
774,776
775,776
778,779
779,780
779,781
780,781
782,783
782,784
783,784
787,788
787,789
788,789
788,790
789,790
789,791
790,791
794,795
795,796
796,797
796,798
796,799
796,800
796,801
797,798
799,800
802,803
804,805
806,807
807,808
807,809
807,810
808,809
810,811
813,814
814,815
814,816
815,816
815,817
816,817
819,820
821,822
822,823
822,824
823,824
823,825
824,825
827,828
829,830
830,831
830,832
831,832
831,833
832,833
835,836
837,838
838,839
838,840
839,840
839,841
840,841
843,844
845,846
846,847
846,848
846,849
847,848
849,850
851,852
851,853
852,853
854,855
855,856
855,857
-----nextToken-----

-----computeFrom-----
76,77
76,78
102,103
102,104
112,113
112,114
130,131
130,132
138,139
138,140
146,147
146,148
153,154
153,155
160,161
160,162
167,168
167,169
176,177
176,178
185,186
185,187
193,194
193,195
212,213
212,214
218,219
218,220
230,231
230,232
239,240
239,241
242,243
242,244
247,248
247,249
258,259
258,260
271,272
271,273
275,276
275,277
285,286
285,287
293,294
293,295
302,303
302,304
311,312
311,313
315,316
315,317
325,326
325,327
335,336
335,337
343,344
343,345
345,346
345,347
361,362
361,363
369,370
369,371
371,372
371,373
377,378
377,379
390,391
390,392
396,397
396,398
400,401
400,402
405,406
405,407
415,416
415,417
421,422
421,423
425,426
425,427
428,429
428,430
435,436
435,437
447,448
447,449
451,452
451,453
453,454
453,455
496,497
496,498
529,530
529,531
533,534
533,535
535,536
535,537
578,579
578,580
587,588
587,589
595,596
595,597
611,612
611,613
622,623
622,624
634,635
634,636
650,651
650,652
661,662
661,663
672,673
672,674
686,687
686,688
766,767
766,768
767,768
767,769
769,770
769,771
774,775
774,776
779,780
779,781
788,789
788,790
814,815
814,816
822,823
822,824
830,831
830,832
838,839
838,840
851,852
851,853
-----guardedBy-----
115,127
141,170
178,210
181,196
182,191
442,524
438,522
-----guardedByNegation-----
178,216
-----lastLexicalUse-----
178,216
-----jump-----
178,216
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CastExpression;TypeId;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;
-----ast_node-----
static void post_process_linkages(Sentence sent, Parse_Options opts) {	int *indices;	int in, block_bottom, block_top;	int N_linkages_found, N_linkages_alloced;	int N_linkages_post_processed, N_valid_linkages;	int overflowed, only_canonical_allowed;	double denom;	Linkage_info *link_info;	int canonical;	free_post_processing(sent);	overflowed = build_parse_set(sent, sent->null_count, opts);	print_time(opts, "Built parse set");	if (overflowed) {		/* We know that sent->num_linkages_found is bogus, possibly negative */		sent->num_linkages_found = opts->linkage_limit;		if (opts->verbosity > 1)		  fprintf(stdout,				  "Warning: Count overflow.\n"				  "Considering a random subset of %d of an unknown and large number of linkages\n",				  opts->linkage_limit);	}	N_linkages_found = sent->num_linkages_found;	if (sent->num_linkages_found == 0) {		sent->num_linkages_alloced = 0;		sent->num_linkages_post_processed = 0;		sent->num_valid_linkages = 0;		sent->link_info = NULL;		return;	}	if (N_linkages_found > opts->linkage_limit)	  {		N_linkages_alloced = opts->linkage_limit;		if (opts->verbosity > 1) {		  fprintf(stdout,				  "Warning: Considering a random subset of %d of %d linkages\n",				  N_linkages_alloced, N_linkages_found);		}	  }	else N_linkages_alloced = N_linkages_found;	link_info=(Linkage_info *)xalloc(N_linkages_alloced * sizeof(Linkage_info));	N_linkages_post_processed = N_valid_linkages = 0;	/* generate an array of linkage indices to examine */	indices = (int *) xalloc(N_linkages_alloced * sizeof(int));	if (overflowed) {		for (in=0; in<N_linkages_alloced; in++) {			indices[in] = -(in+1);		}	}	else {		my_random_initialize(N_linkages_found + sent->length);		for (in=0; in<N_linkages_alloced; in++) {			denom = (double) N_linkages_alloced;			block_bottom = (int) (((double)in*(double) N_linkages_found)/denom);			block_top = (int) (((double)(in+1)*(double)N_linkages_found)/denom);			indices[in] = block_bottom + (my_random() % (block_top-block_bottom));		}		my_random_finalize();	}	only_canonical_allowed = (!(overflowed || (N_linkages_found > 2*opts->linkage_limit)));	/* When we're processing only a small subset of the linkages, don't worry	   about restricting the set we consider to be canonical ones.  In the extreme	   case where we are only generating 1 in a million linkages, it's very unlikely	   that we'll hit two symmetric variants of the same linkage anyway. */	/* (optional) first pass: just visit the linkages */	/* The purpose of these two passes is to make the post-processing more	   efficient.  Because (hopefully) by the time you do the real work	   in the 2nd pass you've pruned the relevant rule set in the first pass. */	if (sent->length >= opts->twopass_length) {		for (in=0; (in < N_linkages_alloced) &&				   (!resources_exhausted(opts->resources)); in++) {			extract_links(indices[in], sent->null_count, sent->parse_info);			if (set_has_fat_down(sent)) {				if (only_canonical_allowed && !is_canonical_linkage(sent)) continue;				analyze_fat_linkage(sent, opts, PP_FIRST_PASS);			}			else {				analyze_thin_linkage(sent, opts, PP_FIRST_PASS);			}		}	}	/* second pass: actually perform post-processing */	for (in=0; (in < N_linkages_alloced) &&			   (!resources_exhausted(opts->resources)); in++) {		extract_links(indices[in], sent->null_count, sent->parse_info);		if (set_has_fat_down(sent)) {			canonical = is_canonical_linkage(sent);			if (only_canonical_allowed && !canonical) continue;			link_info[N_linkages_post_processed] =				analyze_fat_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = TRUE;			link_info[N_linkages_post_processed].canonical = canonical;		}		else {			link_info[N_linkages_post_processed] =				analyze_thin_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = FALSE;			link_info[N_linkages_post_processed].canonical = TRUE;		}		if (link_info[N_linkages_post_processed].N_violations==0)			N_valid_linkages++;		link_info[N_linkages_post_processed].index = indices[in];		N_linkages_post_processed++;	}	print_time(opts, "Postprocessed all linkages");	qsort((void *)link_info, N_linkages_post_processed, sizeof(Linkage_info),		  (int (*)(const void *, const void *)) opts->cost_model.compare_fn);	if (!resources_exhausted(opts->resources)) {		assert(! ((N_linkages_post_processed == 0) &&				  (N_linkages_found > 0) &&				  (N_linkages_found < opts->linkage_limit)),			   "None of the linkages is canonical");	}	if (opts->verbosity > 1) {		fprintf(stdout, "%d of %d linkages with no P.P. violations\n",				N_valid_linkages, N_linkages_post_processed);	}	print_time(opts, "Sorted all linkages");	sent->num_linkages_alloced = N_linkages_alloced;	sent->num_linkages_post_processed = N_linkages_post_processed;	sent->num_valid_linkages = N_valid_linkages;	sent->link_info = link_info;	xfree(indices, N_linkages_alloced * sizeof(int));	/*if(N_valid_linkages == 0) free_andlists(sent); */}
static void
post_process_linkages(Sentence sent, Parse_Options opts)
post_process_linkages
Sentence sent
Sentence
Sentence
sent
sent
Parse_Options opts
Parse_Options
Parse_Options
opts
opts
{	int *indices;	int in, block_bottom, block_top;	int N_linkages_found, N_linkages_alloced;	int N_linkages_post_processed, N_valid_linkages;	int overflowed, only_canonical_allowed;	double denom;	Linkage_info *link_info;	int canonical;	free_post_processing(sent);	overflowed = build_parse_set(sent, sent->null_count, opts);	print_time(opts, "Built parse set");	if (overflowed) {		/* We know that sent->num_linkages_found is bogus, possibly negative */		sent->num_linkages_found = opts->linkage_limit;		if (opts->verbosity > 1)		  fprintf(stdout,				  "Warning: Count overflow.\n"				  "Considering a random subset of %d of an unknown and large number of linkages\n",				  opts->linkage_limit);	}	N_linkages_found = sent->num_linkages_found;	if (sent->num_linkages_found == 0) {		sent->num_linkages_alloced = 0;		sent->num_linkages_post_processed = 0;		sent->num_valid_linkages = 0;		sent->link_info = NULL;		return;	}	if (N_linkages_found > opts->linkage_limit)	  {		N_linkages_alloced = opts->linkage_limit;		if (opts->verbosity > 1) {		  fprintf(stdout,				  "Warning: Considering a random subset of %d of %d linkages\n",				  N_linkages_alloced, N_linkages_found);		}	  }	else N_linkages_alloced = N_linkages_found;	link_info=(Linkage_info *)xalloc(N_linkages_alloced * sizeof(Linkage_info));	N_linkages_post_processed = N_valid_linkages = 0;	/* generate an array of linkage indices to examine */	indices = (int *) xalloc(N_linkages_alloced * sizeof(int));	if (overflowed) {		for (in=0; in<N_linkages_alloced; in++) {			indices[in] = -(in+1);		}	}	else {		my_random_initialize(N_linkages_found + sent->length);		for (in=0; in<N_linkages_alloced; in++) {			denom = (double) N_linkages_alloced;			block_bottom = (int) (((double)in*(double) N_linkages_found)/denom);			block_top = (int) (((double)(in+1)*(double)N_linkages_found)/denom);			indices[in] = block_bottom + (my_random() % (block_top-block_bottom));		}		my_random_finalize();	}	only_canonical_allowed = (!(overflowed || (N_linkages_found > 2*opts->linkage_limit)));	/* When we're processing only a small subset of the linkages, don't worry	   about restricting the set we consider to be canonical ones.  In the extreme	   case where we are only generating 1 in a million linkages, it's very unlikely	   that we'll hit two symmetric variants of the same linkage anyway. */	/* (optional) first pass: just visit the linkages */	/* The purpose of these two passes is to make the post-processing more	   efficient.  Because (hopefully) by the time you do the real work	   in the 2nd pass you've pruned the relevant rule set in the first pass. */	if (sent->length >= opts->twopass_length) {		for (in=0; (in < N_linkages_alloced) &&				   (!resources_exhausted(opts->resources)); in++) {			extract_links(indices[in], sent->null_count, sent->parse_info);			if (set_has_fat_down(sent)) {				if (only_canonical_allowed && !is_canonical_linkage(sent)) continue;				analyze_fat_linkage(sent, opts, PP_FIRST_PASS);			}			else {				analyze_thin_linkage(sent, opts, PP_FIRST_PASS);			}		}	}	/* second pass: actually perform post-processing */	for (in=0; (in < N_linkages_alloced) &&			   (!resources_exhausted(opts->resources)); in++) {		extract_links(indices[in], sent->null_count, sent->parse_info);		if (set_has_fat_down(sent)) {			canonical = is_canonical_linkage(sent);			if (only_canonical_allowed && !canonical) continue;			link_info[N_linkages_post_processed] =				analyze_fat_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = TRUE;			link_info[N_linkages_post_processed].canonical = canonical;		}		else {			link_info[N_linkages_post_processed] =				analyze_thin_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = FALSE;			link_info[N_linkages_post_processed].canonical = TRUE;		}		if (link_info[N_linkages_post_processed].N_violations==0)			N_valid_linkages++;		link_info[N_linkages_post_processed].index = indices[in];		N_linkages_post_processed++;	}	print_time(opts, "Postprocessed all linkages");	qsort((void *)link_info, N_linkages_post_processed, sizeof(Linkage_info),		  (int (*)(const void *, const void *)) opts->cost_model.compare_fn);	if (!resources_exhausted(opts->resources)) {		assert(! ((N_linkages_post_processed == 0) &&				  (N_linkages_found > 0) &&				  (N_linkages_found < opts->linkage_limit)),			   "None of the linkages is canonical");	}	if (opts->verbosity > 1) {		fprintf(stdout, "%d of %d linkages with no P.P. violations\n",				N_valid_linkages, N_linkages_post_processed);	}	print_time(opts, "Sorted all linkages");	sent->num_linkages_alloced = N_linkages_alloced;	sent->num_linkages_post_processed = N_linkages_post_processed;	sent->num_valid_linkages = N_valid_linkages;	sent->link_info = link_info;	xfree(indices, N_linkages_alloced * sizeof(int));	/*if(N_valid_linkages == 0) free_andlists(sent); */}
int *indices;
int *indices;
int
*indices
*
indices
int in, block_bottom, block_top;
int in, block_bottom, block_top;
int
in
in
block_bottom
block_bottom
block_top
block_top
int N_linkages_found, N_linkages_alloced;
int N_linkages_found, N_linkages_alloced;
int
N_linkages_found
N_linkages_found
N_linkages_alloced
N_linkages_alloced
int N_linkages_post_processed, N_valid_linkages;
int N_linkages_post_processed, N_valid_linkages;
int
N_linkages_post_processed
N_linkages_post_processed
N_valid_linkages
N_valid_linkages
int overflowed, only_canonical_allowed;
int overflowed, only_canonical_allowed;
int
overflowed
overflowed
only_canonical_allowed
only_canonical_allowed
double denom;
double denom;
double
denom
denom
Linkage_info *link_info;
Linkage_info *link_info;
Linkage_info
Linkage_info
*link_info
*
link_info
int canonical;
int canonical;
int
canonical
canonical
free_post_processing(sent);
free_post_processing(sent)
free_post_processing
free_post_processing
sent
sent
overflowed = build_parse_set(sent, sent->null_count, opts);
overflowed = build_parse_set(sent, sent->null_count, opts)
overflowed
overflowed
build_parse_set(sent, sent->null_count, opts)
build_parse_set
build_parse_set
sent
sent
sent->null_count
sent
sent
null_count
opts
opts
print_time(opts, "Built parse set");
print_time(opts, "Built parse set")
print_time
print_time
opts
opts
"Built parse set"
if (overflowed) {		/* We know that sent->num_linkages_found is bogus, possibly negative */		sent->num_linkages_found = opts->linkage_limit;		if (opts->verbosity > 1)		  fprintf(stdout,				  "Warning: Count overflow.\n"				  "Considering a random subset of %d of an unknown and large number of linkages\n",				  opts->linkage_limit);	}
overflowed
overflowed
{		/* We know that sent->num_linkages_found is bogus, possibly negative */		sent->num_linkages_found = opts->linkage_limit;		if (opts->verbosity > 1)		  fprintf(stdout,				  "Warning: Count overflow.\n"				  "Considering a random subset of %d of an unknown and large number of linkages\n",				  opts->linkage_limit);	}
sent->num_linkages_found = opts->linkage_limit;
sent->num_linkages_found = opts->linkage_limit
sent->num_linkages_found
sent
sent
num_linkages_found
opts->linkage_limit
opts
opts
linkage_limit
if (opts->verbosity > 1)		  fprintf(stdout,				  "Warning: Count overflow.\n"				  "Considering a random subset of %d of an unknown and large number of linkages\n",				  opts->linkage_limit);
opts->verbosity > 1
opts->verbosity
opts
opts
verbosity
1
fprintf(stdout,				  "Warning: Count overflow.\n"				  "Considering a random subset of %d of an unknown and large number of linkages\n",				  opts->linkage_limit);
fprintf(stdout,				  "Warning: Count overflow.\n"				  "Considering a random subset of %d of an unknown and large number of linkages\n",				  opts->linkage_limit)
fprintf
fprintf
stdout
stdout
"Warning: Count overflow.\n"				  "Considering a random subset of %d of an unknown and large number of linkages\n"
opts->linkage_limit
opts
opts
linkage_limit
N_linkages_found = sent->num_linkages_found;
N_linkages_found = sent->num_linkages_found
N_linkages_found
N_linkages_found
sent->num_linkages_found
sent
sent
num_linkages_found
if (sent->num_linkages_found == 0) {		sent->num_linkages_alloced = 0;		sent->num_linkages_post_processed = 0;		sent->num_valid_linkages = 0;		sent->link_info = NULL;		return;	}
sent->num_linkages_found == 0
sent->num_linkages_found
sent
sent
num_linkages_found
0
{		sent->num_linkages_alloced = 0;		sent->num_linkages_post_processed = 0;		sent->num_valid_linkages = 0;		sent->link_info = NULL;		return;	}
sent->num_linkages_alloced = 0;
sent->num_linkages_alloced = 0
sent->num_linkages_alloced
sent
sent
num_linkages_alloced
0
sent->num_linkages_post_processed = 0;
sent->num_linkages_post_processed = 0
sent->num_linkages_post_processed
sent
sent
num_linkages_post_processed
0
sent->num_valid_linkages = 0;
sent->num_valid_linkages = 0
sent->num_valid_linkages
sent
sent
num_valid_linkages
0
sent->link_info = NULL;
sent->link_info = NULL
sent->link_info
sent
sent
link_info
NULL
NULL
return;
if (N_linkages_found > opts->linkage_limit)	  {		N_linkages_alloced = opts->linkage_limit;		if (opts->verbosity > 1) {		  fprintf(stdout,				  "Warning: Considering a random subset of %d of %d linkages\n",				  N_linkages_alloced, N_linkages_found);		}	  }	else N_linkages_alloced = N_linkages_found;
N_linkages_found > opts->linkage_limit
N_linkages_found
N_linkages_found
opts->linkage_limit
opts
opts
linkage_limit
{		N_linkages_alloced = opts->linkage_limit;		if (opts->verbosity > 1) {		  fprintf(stdout,				  "Warning: Considering a random subset of %d of %d linkages\n",				  N_linkages_alloced, N_linkages_found);		}	  }
N_linkages_alloced = opts->linkage_limit;
N_linkages_alloced = opts->linkage_limit
N_linkages_alloced
N_linkages_alloced
opts->linkage_limit
opts
opts
linkage_limit
if (opts->verbosity > 1) {		  fprintf(stdout,				  "Warning: Considering a random subset of %d of %d linkages\n",				  N_linkages_alloced, N_linkages_found);		}
opts->verbosity > 1
opts->verbosity
opts
opts
verbosity
1
{		  fprintf(stdout,				  "Warning: Considering a random subset of %d of %d linkages\n",				  N_linkages_alloced, N_linkages_found);		}
fprintf(stdout,				  "Warning: Considering a random subset of %d of %d linkages\n",				  N_linkages_alloced, N_linkages_found);
fprintf(stdout,				  "Warning: Considering a random subset of %d of %d linkages\n",				  N_linkages_alloced, N_linkages_found)
fprintf
fprintf
stdout
stdout
"Warning: Considering a random subset of %d of %d linkages\n"
N_linkages_alloced
N_linkages_alloced
N_linkages_found
N_linkages_found
N_linkages_alloced = N_linkages_found;
N_linkages_alloced = N_linkages_found
N_linkages_alloced
N_linkages_alloced
N_linkages_found
N_linkages_found
link_info=(Linkage_info *)xalloc(N_linkages_alloced * sizeof(Linkage_info));
link_info=(Linkage_info *)xalloc(N_linkages_alloced * sizeof(Linkage_info))
link_info
link_info
(Linkage_info *)xalloc(N_linkages_alloced * sizeof(Linkage_info))
Linkage_info *
Linkage_info
Linkage_info
*
*
xalloc(N_linkages_alloced * sizeof(Linkage_info))
xalloc
xalloc
N_linkages_alloced * sizeof(Linkage_info)
N_linkages_alloced
N_linkages_alloced
sizeof(Linkage_info)
Linkage_info
Linkage_info
Linkage_info

N_linkages_post_processed = N_valid_linkages = 0;
N_linkages_post_processed = N_valid_linkages = 0
N_linkages_post_processed
N_linkages_post_processed
N_valid_linkages = 0
N_valid_linkages
N_valid_linkages
0
indices = (int *) xalloc(N_linkages_alloced * sizeof(int));
indices = (int *) xalloc(N_linkages_alloced * sizeof(int))
indices
indices
(int *) xalloc(N_linkages_alloced * sizeof(int))
int *
int
*
*
xalloc(N_linkages_alloced * sizeof(int))
xalloc
xalloc
N_linkages_alloced * sizeof(int)
N_linkages_alloced
N_linkages_alloced
sizeof(int)
int
int

if (overflowed) {		for (in=0; in<N_linkages_alloced; in++) {			indices[in] = -(in+1);		}	}	else {		my_random_initialize(N_linkages_found + sent->length);		for (in=0; in<N_linkages_alloced; in++) {			denom = (double) N_linkages_alloced;			block_bottom = (int) (((double)in*(double) N_linkages_found)/denom);			block_top = (int) (((double)(in+1)*(double)N_linkages_found)/denom);			indices[in] = block_bottom + (my_random() % (block_top-block_bottom));		}		my_random_finalize();	}
overflowed
overflowed
{		for (in=0; in<N_linkages_alloced; in++) {			indices[in] = -(in+1);		}	}
for (in=0; in<N_linkages_alloced; in++) {			indices[in] = -(in+1);		}
in=0;
in=0
in
in
0
in<N_linkages_alloced
in
in
N_linkages_alloced
N_linkages_alloced
in++
in
in
{			indices[in] = -(in+1);		}
indices[in] = -(in+1);
indices[in] = -(in+1)
indices[in]
indices
indices
in
in
-(in+1)
(in+1)
in+1
in
in
1
{		my_random_initialize(N_linkages_found + sent->length);		for (in=0; in<N_linkages_alloced; in++) {			denom = (double) N_linkages_alloced;			block_bottom = (int) (((double)in*(double) N_linkages_found)/denom);			block_top = (int) (((double)(in+1)*(double)N_linkages_found)/denom);			indices[in] = block_bottom + (my_random() % (block_top-block_bottom));		}		my_random_finalize();	}
my_random_initialize(N_linkages_found + sent->length);
my_random_initialize(N_linkages_found + sent->length)
my_random_initialize
my_random_initialize
N_linkages_found + sent->length
N_linkages_found
N_linkages_found
sent->length
sent
sent
length
for (in=0; in<N_linkages_alloced; in++) {			denom = (double) N_linkages_alloced;			block_bottom = (int) (((double)in*(double) N_linkages_found)/denom);			block_top = (int) (((double)(in+1)*(double)N_linkages_found)/denom);			indices[in] = block_bottom + (my_random() % (block_top-block_bottom));		}
in=0;
in=0
in
in
0
in<N_linkages_alloced
in
in
N_linkages_alloced
N_linkages_alloced
in++
in
in
{			denom = (double) N_linkages_alloced;			block_bottom = (int) (((double)in*(double) N_linkages_found)/denom);			block_top = (int) (((double)(in+1)*(double)N_linkages_found)/denom);			indices[in] = block_bottom + (my_random() % (block_top-block_bottom));		}
denom = (double) N_linkages_alloced;
denom = (double) N_linkages_alloced
denom
denom
(double) N_linkages_alloced
double
double

N_linkages_alloced
N_linkages_alloced
block_bottom = (int) (((double)in*(double) N_linkages_found)/denom);
block_bottom = (int) (((double)in*(double) N_linkages_found)/denom)
block_bottom
block_bottom
(int) (((double)in*(double) N_linkages_found)/denom)
int
int

(((double)in*(double) N_linkages_found)/denom)
((double)in*(double) N_linkages_found)/denom
((double)in*(double) N_linkages_found)
(double)in*(double) N_linkages_found
(double)in
double
double

in
in
(double) N_linkages_found
double
double

N_linkages_found
N_linkages_found
denom
denom
block_top = (int) (((double)(in+1)*(double)N_linkages_found)/denom);
block_top = (int) (((double)(in+1)*(double)N_linkages_found)/denom)
block_top
block_top
(int) (((double)(in+1)*(double)N_linkages_found)/denom)
int
int

(((double)(in+1)*(double)N_linkages_found)/denom)
((double)(in+1)*(double)N_linkages_found)/denom
((double)(in+1)*(double)N_linkages_found)
(double)(in+1)*(double)N_linkages_found
(double)(in+1)
double
double

(in+1)
in+1
in
in
1
(double)N_linkages_found
double
double

N_linkages_found
N_linkages_found
denom
denom
indices[in] = block_bottom + (my_random() % (block_top-block_bottom));
indices[in] = block_bottom + (my_random() % (block_top-block_bottom))
indices[in]
indices
indices
in
in
block_bottom + (my_random() % (block_top-block_bottom))
block_bottom
block_bottom
(my_random() % (block_top-block_bottom))
my_random() % (block_top-block_bottom)
my_random()
my_random
my_random
(block_top-block_bottom)
block_top-block_bottom
block_top
block_top
block_bottom
block_bottom
my_random_finalize();
my_random_finalize()
my_random_finalize
my_random_finalize
only_canonical_allowed = (!(overflowed || (N_linkages_found > 2*opts->linkage_limit)));
only_canonical_allowed = (!(overflowed || (N_linkages_found > 2*opts->linkage_limit)))
only_canonical_allowed
only_canonical_allowed
(!(overflowed || (N_linkages_found > 2*opts->linkage_limit)))
!(overflowed || (N_linkages_found > 2*opts->linkage_limit))
(overflowed || (N_linkages_found > 2*opts->linkage_limit))
overflowed || (N_linkages_found > 2*opts->linkage_limit)
overflowed
overflowed
(N_linkages_found > 2*opts->linkage_limit)
N_linkages_found > 2*opts->linkage_limit
N_linkages_found
N_linkages_found
2*opts->linkage_limit
2
opts->linkage_limit
opts
opts
linkage_limit
if (sent->length >= opts->twopass_length) {		for (in=0; (in < N_linkages_alloced) &&				   (!resources_exhausted(opts->resources)); in++) {			extract_links(indices[in], sent->null_count, sent->parse_info);			if (set_has_fat_down(sent)) {				if (only_canonical_allowed && !is_canonical_linkage(sent)) continue;				analyze_fat_linkage(sent, opts, PP_FIRST_PASS);			}			else {				analyze_thin_linkage(sent, opts, PP_FIRST_PASS);			}		}	}
sent->length >= opts->twopass_length
sent->length
sent
sent
length
opts->twopass_length
opts
opts
twopass_length
{		for (in=0; (in < N_linkages_alloced) &&				   (!resources_exhausted(opts->resources)); in++) {			extract_links(indices[in], sent->null_count, sent->parse_info);			if (set_has_fat_down(sent)) {				if (only_canonical_allowed && !is_canonical_linkage(sent)) continue;				analyze_fat_linkage(sent, opts, PP_FIRST_PASS);			}			else {				analyze_thin_linkage(sent, opts, PP_FIRST_PASS);			}		}	}
for (in=0; (in < N_linkages_alloced) &&				   (!resources_exhausted(opts->resources)); in++) {			extract_links(indices[in], sent->null_count, sent->parse_info);			if (set_has_fat_down(sent)) {				if (only_canonical_allowed && !is_canonical_linkage(sent)) continue;				analyze_fat_linkage(sent, opts, PP_FIRST_PASS);			}			else {				analyze_thin_linkage(sent, opts, PP_FIRST_PASS);			}		}
in=0;
in=0
in
in
0
(in < N_linkages_alloced) &&				   (!resources_exhausted(opts->resources))
(in < N_linkages_alloced)
in < N_linkages_alloced
in
in
N_linkages_alloced
N_linkages_alloced
(!resources_exhausted(opts->resources))
!resources_exhausted(opts->resources)
resources_exhausted(opts->resources)
resources_exhausted
resources_exhausted
opts->resources
opts
opts
resources
in++
in
in
{			extract_links(indices[in], sent->null_count, sent->parse_info);			if (set_has_fat_down(sent)) {				if (only_canonical_allowed && !is_canonical_linkage(sent)) continue;				analyze_fat_linkage(sent, opts, PP_FIRST_PASS);			}			else {				analyze_thin_linkage(sent, opts, PP_FIRST_PASS);			}		}
extract_links(indices[in], sent->null_count, sent->parse_info);
extract_links(indices[in], sent->null_count, sent->parse_info)
extract_links
extract_links
indices[in]
indices
indices
in
in
sent->null_count
sent
sent
null_count
sent->parse_info
sent
sent
parse_info
if (set_has_fat_down(sent)) {				if (only_canonical_allowed && !is_canonical_linkage(sent)) continue;				analyze_fat_linkage(sent, opts, PP_FIRST_PASS);			}			else {				analyze_thin_linkage(sent, opts, PP_FIRST_PASS);			}
set_has_fat_down(sent)
set_has_fat_down
set_has_fat_down
sent
sent
{				if (only_canonical_allowed && !is_canonical_linkage(sent)) continue;				analyze_fat_linkage(sent, opts, PP_FIRST_PASS);			}
if (only_canonical_allowed && !is_canonical_linkage(sent)) continue;
only_canonical_allowed && !is_canonical_linkage(sent)
only_canonical_allowed
only_canonical_allowed
!is_canonical_linkage(sent)
is_canonical_linkage(sent)
is_canonical_linkage
is_canonical_linkage
sent
sent
continue;
analyze_fat_linkage(sent, opts, PP_FIRST_PASS);
analyze_fat_linkage(sent, opts, PP_FIRST_PASS)
analyze_fat_linkage
analyze_fat_linkage
sent
sent
opts
opts
PP_FIRST_PASS
PP_FIRST_PASS
{				analyze_thin_linkage(sent, opts, PP_FIRST_PASS);			}
analyze_thin_linkage(sent, opts, PP_FIRST_PASS);
analyze_thin_linkage(sent, opts, PP_FIRST_PASS)
analyze_thin_linkage
analyze_thin_linkage
sent
sent
opts
opts
PP_FIRST_PASS
PP_FIRST_PASS
for (in=0; (in < N_linkages_alloced) &&			   (!resources_exhausted(opts->resources)); in++) {		extract_links(indices[in], sent->null_count, sent->parse_info);		if (set_has_fat_down(sent)) {			canonical = is_canonical_linkage(sent);			if (only_canonical_allowed && !canonical) continue;			link_info[N_linkages_post_processed] =				analyze_fat_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = TRUE;			link_info[N_linkages_post_processed].canonical = canonical;		}		else {			link_info[N_linkages_post_processed] =				analyze_thin_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = FALSE;			link_info[N_linkages_post_processed].canonical = TRUE;		}		if (link_info[N_linkages_post_processed].N_violations==0)			N_valid_linkages++;		link_info[N_linkages_post_processed].index = indices[in];		N_linkages_post_processed++;	}
in=0;
in=0
in
in
0
(in < N_linkages_alloced) &&			   (!resources_exhausted(opts->resources))
(in < N_linkages_alloced)
in < N_linkages_alloced
in
in
N_linkages_alloced
N_linkages_alloced
(!resources_exhausted(opts->resources))
!resources_exhausted(opts->resources)
resources_exhausted(opts->resources)
resources_exhausted
resources_exhausted
opts->resources
opts
opts
resources
in++
in
in
{		extract_links(indices[in], sent->null_count, sent->parse_info);		if (set_has_fat_down(sent)) {			canonical = is_canonical_linkage(sent);			if (only_canonical_allowed && !canonical) continue;			link_info[N_linkages_post_processed] =				analyze_fat_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = TRUE;			link_info[N_linkages_post_processed].canonical = canonical;		}		else {			link_info[N_linkages_post_processed] =				analyze_thin_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = FALSE;			link_info[N_linkages_post_processed].canonical = TRUE;		}		if (link_info[N_linkages_post_processed].N_violations==0)			N_valid_linkages++;		link_info[N_linkages_post_processed].index = indices[in];		N_linkages_post_processed++;	}
extract_links(indices[in], sent->null_count, sent->parse_info);
extract_links(indices[in], sent->null_count, sent->parse_info)
extract_links
extract_links
indices[in]
indices
indices
in
in
sent->null_count
sent
sent
null_count
sent->parse_info
sent
sent
parse_info
if (set_has_fat_down(sent)) {			canonical = is_canonical_linkage(sent);			if (only_canonical_allowed && !canonical) continue;			link_info[N_linkages_post_processed] =				analyze_fat_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = TRUE;			link_info[N_linkages_post_processed].canonical = canonical;		}		else {			link_info[N_linkages_post_processed] =				analyze_thin_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = FALSE;			link_info[N_linkages_post_processed].canonical = TRUE;		}
set_has_fat_down(sent)
set_has_fat_down
set_has_fat_down
sent
sent
{			canonical = is_canonical_linkage(sent);			if (only_canonical_allowed && !canonical) continue;			link_info[N_linkages_post_processed] =				analyze_fat_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = TRUE;			link_info[N_linkages_post_processed].canonical = canonical;		}
canonical = is_canonical_linkage(sent);
canonical = is_canonical_linkage(sent)
canonical
canonical
is_canonical_linkage(sent)
is_canonical_linkage
is_canonical_linkage
sent
sent
if (only_canonical_allowed && !canonical) continue;
only_canonical_allowed && !canonical
only_canonical_allowed
only_canonical_allowed
!canonical
canonical
canonical
continue;
link_info[N_linkages_post_processed] =				analyze_fat_linkage(sent, opts, PP_SECOND_PASS);
link_info[N_linkages_post_processed] =				analyze_fat_linkage(sent, opts, PP_SECOND_PASS)
link_info[N_linkages_post_processed]
link_info
link_info
N_linkages_post_processed
N_linkages_post_processed
analyze_fat_linkage(sent, opts, PP_SECOND_PASS)
analyze_fat_linkage
analyze_fat_linkage
sent
sent
opts
opts
PP_SECOND_PASS
PP_SECOND_PASS
link_info[N_linkages_post_processed].fat = TRUE;
link_info[N_linkages_post_processed].fat = TRUE
link_info[N_linkages_post_processed].fat
link_info[N_linkages_post_processed]
link_info
link_info
N_linkages_post_processed
N_linkages_post_processed
fat
TRUE
TRUE
link_info[N_linkages_post_processed].canonical = canonical;
link_info[N_linkages_post_processed].canonical = canonical
link_info[N_linkages_post_processed].canonical
link_info[N_linkages_post_processed]
link_info
link_info
N_linkages_post_processed
N_linkages_post_processed
canonical
canonical
canonical
{			link_info[N_linkages_post_processed] =				analyze_thin_linkage(sent, opts, PP_SECOND_PASS);			link_info[N_linkages_post_processed].fat = FALSE;			link_info[N_linkages_post_processed].canonical = TRUE;		}
link_info[N_linkages_post_processed] =				analyze_thin_linkage(sent, opts, PP_SECOND_PASS);
link_info[N_linkages_post_processed] =				analyze_thin_linkage(sent, opts, PP_SECOND_PASS)
link_info[N_linkages_post_processed]
link_info
link_info
N_linkages_post_processed
N_linkages_post_processed
analyze_thin_linkage(sent, opts, PP_SECOND_PASS)
analyze_thin_linkage
analyze_thin_linkage
sent
sent
opts
opts
PP_SECOND_PASS
PP_SECOND_PASS
link_info[N_linkages_post_processed].fat = FALSE;
link_info[N_linkages_post_processed].fat = FALSE
link_info[N_linkages_post_processed].fat
link_info[N_linkages_post_processed]
link_info
link_info
N_linkages_post_processed
N_linkages_post_processed
fat
FALSE
FALSE
link_info[N_linkages_post_processed].canonical = TRUE;
link_info[N_linkages_post_processed].canonical = TRUE
link_info[N_linkages_post_processed].canonical
link_info[N_linkages_post_processed]
link_info
link_info
N_linkages_post_processed
N_linkages_post_processed
canonical
TRUE
TRUE
if (link_info[N_linkages_post_processed].N_violations==0)			N_valid_linkages++;
link_info[N_linkages_post_processed].N_violations==0
link_info[N_linkages_post_processed].N_violations
link_info[N_linkages_post_processed]
link_info
link_info
N_linkages_post_processed
N_linkages_post_processed
N_violations
0
N_valid_linkages++;
N_valid_linkages++
N_valid_linkages
N_valid_linkages
link_info[N_linkages_post_processed].index = indices[in];
link_info[N_linkages_post_processed].index = indices[in]
link_info[N_linkages_post_processed].index
link_info[N_linkages_post_processed]
link_info
link_info
N_linkages_post_processed
N_linkages_post_processed
index
indices[in]
indices
indices
in
in
N_linkages_post_processed++;
N_linkages_post_processed++
N_linkages_post_processed
N_linkages_post_processed
print_time(opts, "Postprocessed all linkages");
print_time(opts, "Postprocessed all linkages")
print_time
print_time
opts
opts
"Postprocessed all linkages"
qsort((void *)link_info, N_linkages_post_processed, sizeof(Linkage_info),		  (int (*)(const void *, const void *)) opts->cost_model.compare_fn);
qsort((void *)link_info, N_linkages_post_processed, sizeof(Linkage_info),		  (int (*)(const void *, const void *)) opts->cost_model.compare_fn)
qsort
qsort
(void *)link_info
void *
void
*
*
link_info
link_info
N_linkages_post_processed
N_linkages_post_processed
sizeof(Linkage_info)
Linkage_info
Linkage_info
Linkage_info

(int (*)(const void *, const void *)) opts->cost_model.compare_fn
int (*)(const void *, const void *)
int
(*)(const void *, const void *)
*
*
const void *
const void
*
*

const void *
const void
*
*

opts->cost_model.compare_fn
opts->cost_model
opts
opts
cost_model
compare_fn
if (!resources_exhausted(opts->resources)) {		assert(! ((N_linkages_post_processed == 0) &&				  (N_linkages_found > 0) &&				  (N_linkages_found < opts->linkage_limit)),			   "None of the linkages is canonical");	}
!resources_exhausted(opts->resources)
resources_exhausted(opts->resources)
resources_exhausted
resources_exhausted
opts->resources
opts
opts
resources
{		assert(! ((N_linkages_post_processed == 0) &&				  (N_linkages_found > 0) &&				  (N_linkages_found < opts->linkage_limit)),			   "None of the linkages is canonical");	}
assert(! ((N_linkages_post_processed == 0) &&				  (N_linkages_found > 0) &&				  (N_linkages_found < opts->linkage_limit)),			   "None of the linkages is canonical");
assert(! ((N_linkages_post_processed == 0) &&				  (N_linkages_found > 0) &&				  (N_linkages_found < opts->linkage_limit)),			   "None of the linkages is canonical")
assert
assert
! ((N_linkages_post_processed == 0) &&				  (N_linkages_found > 0) &&				  (N_linkages_found < opts->linkage_limit))
((N_linkages_post_processed == 0) &&				  (N_linkages_found > 0) &&				  (N_linkages_found < opts->linkage_limit))
(N_linkages_post_processed == 0) &&				  (N_linkages_found > 0) &&				  (N_linkages_found < opts->linkage_limit)
(N_linkages_post_processed == 0) &&				  (N_linkages_found > 0)
(N_linkages_post_processed == 0)
N_linkages_post_processed == 0
N_linkages_post_processed
N_linkages_post_processed
0
(N_linkages_found > 0)
N_linkages_found > 0
N_linkages_found
N_linkages_found
0
(N_linkages_found < opts->linkage_limit)
N_linkages_found < opts->linkage_limit
N_linkages_found
N_linkages_found
opts->linkage_limit
opts
opts
linkage_limit
"None of the linkages is canonical"
if (opts->verbosity > 1) {		fprintf(stdout, "%d of %d linkages with no P.P. violations\n",				N_valid_linkages, N_linkages_post_processed);	}
opts->verbosity > 1
opts->verbosity
opts
opts
verbosity
1
{		fprintf(stdout, "%d of %d linkages with no P.P. violations\n",				N_valid_linkages, N_linkages_post_processed);	}
fprintf(stdout, "%d of %d linkages with no P.P. violations\n",				N_valid_linkages, N_linkages_post_processed);
fprintf(stdout, "%d of %d linkages with no P.P. violations\n",				N_valid_linkages, N_linkages_post_processed)
fprintf
fprintf
stdout
stdout
"%d of %d linkages with no P.P. violations\n"
N_valid_linkages
N_valid_linkages
N_linkages_post_processed
N_linkages_post_processed
print_time(opts, "Sorted all linkages");
print_time(opts, "Sorted all linkages")
print_time
print_time
opts
opts
"Sorted all linkages"
sent->num_linkages_alloced = N_linkages_alloced;
sent->num_linkages_alloced = N_linkages_alloced
sent->num_linkages_alloced
sent
sent
num_linkages_alloced
N_linkages_alloced
N_linkages_alloced
sent->num_linkages_post_processed = N_linkages_post_processed;
sent->num_linkages_post_processed = N_linkages_post_processed
sent->num_linkages_post_processed
sent
sent
num_linkages_post_processed
N_linkages_post_processed
N_linkages_post_processed
sent->num_valid_linkages = N_valid_linkages;
sent->num_valid_linkages = N_valid_linkages
sent->num_valid_linkages
sent
sent
num_valid_linkages
N_valid_linkages
N_valid_linkages
sent->link_info = link_info;
sent->link_info = link_info
sent->link_info
sent
sent
link_info
link_info
link_info
xfree(indices, N_linkages_alloced * sizeof(int));
xfree(indices, N_linkages_alloced * sizeof(int))
xfree
xfree
indices
indices
N_linkages_alloced * sizeof(int)
N_linkages_alloced
N_linkages_alloced
sizeof(int)
int
int

-----joern-----
(433,7,0)
(325,338,0)
(415,92,0)
(307,328,0)
(402,369,0)
(121,338,0)
(335,260,0)
(195,328,0)
(2,388,0)
(426,313,0)
(127,364,0)
(378,229,0)
(226,339,0)
(271,113,0)
(359,396,0)
(40,244,0)
(321,176,0)
(225,46,0)
(169,77,0)
(258,204,0)
(326,297,0)
(11,338,0)
(290,10,0)
(349,218,0)
(15,194,0)
(288,450,0)
(3,184,0)
(206,0,0)
(354,182,0)
(195,178,0)
(152,424,0)
(198,205,0)
(246,324,0)
(251,395,0)
(241,104,0)
(334,260,0)
(259,73,0)
(273,395,0)
(256,292,0)
(202,0,0)
(19,435,0)
(217,379,0)
(339,200,0)
(249,143,0)
(354,388,0)
(121,253,0)
(373,28,0)
(52,191,0)
(318,152,0)
(31,3,0)
(72,313,0)
(186,121,0)
(138,131,0)
(175,125,0)
(194,222,0)
(55,3,0)
(239,308,0)
(95,351,0)
(345,368,0)
(380,328,0)
(228,104,0)
(66,313,0)
(131,262,0)
(443,307,0)
(48,145,0)
(367,33,0)
(345,328,0)
(109,424,0)
(198,66,0)
(187,182,0)
(428,309,0)
(251,261,0)
(250,12,0)
(390,413,0)
(253,121,0)
(450,328,0)
(30,395,0)
(147,259,0)
(0,202,0)
(135,145,0)
(438,114,0)
(272,366,0)
(21,33,0)
(300,315,0)
(38,368,0)
(432,76,0)
(143,73,0)
(215,156,0)
(32,200,0)
(235,240,0)
(90,41,0)
(56,241,0)
(381,73,0)
(218,349,0)
(278,350,0)
(197,146,0)
(368,328,0)
(397,409,0)
(427,104,0)
(16,51,0)
(444,111,0)
(312,374,0)
(251,33,0)
(318,51,0)
(346,38,0)
(87,104,0)
(76,108,0)
(154,143,0)
(2,158,0)
(42,354,0)
(299,36,0)
(174,215,0)
(198,73,0)
(143,194,0)
(33,156,0)
(349,328,0)
(323,108,0)
(404,269,0)
(46,152,0)
(273,277,0)
(227,393,0)
(269,104,0)
(255,1,0)
(308,344,0)
(259,194,0)
(15,37,0)
(441,125,0)
(280,212,0)
(73,313,0)
(414,440,0)
(18,349,0)
(64,211,0)
(180,320,0)
(416,318,0)
(309,136,0)
(107,222,0)
(336,328,0)
(394,194,0)
(338,297,0)
(203,354,0)
(255,328,0)
(177,28,0)
(124,66,0)
(392,450,0)
(166,229,0)
(366,374,0)
(158,391,0)
(258,431,0)
(126,313,0)
(184,3,0)
(354,19,0)
(21,439,0)
(152,365,0)
(412,311,0)
(207,313,0)
(178,68,0)
(185,1,0)
(451,34,0)
(62,380,0)
(119,438,0)
(347,228,0)
(134,269,0)
(284,149,0)
(391,158,0)
(263,46,0)
(337,156,0)
(364,259,0)
(125,68,0)
(308,124,0)
(119,47,0)
(67,336,0)
(277,273,0)
(287,328,0)
(424,104,0)
(111,156,0)
(29,237,0)
(380,104,0)
(369,182,0)
(59,313,0)
(29,233,0)
(350,156,0)
(51,318,0)
(387,69,0)
(331,251,0)
(17,407,0)
(128,339,0)
(236,315,0)
(354,133,0)
(449,143,0)
(296,393,0)
(179,421,0)
(86,357,0)
(438,119,0)
(172,328,0)
(118,389,0)
(293,200,0)
(7,73,0)
(302,69,0)
(161,455,0)
(105,75,0)
(372,313,0)
(400,258,0)
(396,8,0)
(165,104,0)
(276,385,0)
(379,133,0)
(144,306,0)
(396,204,0)
(47,156,0)
(102,180,0)
(282,313,0)
(297,84,0)
(369,405,0)
(456,87,0)
(424,152,0)
(362,441,0)
(60,457,0)
(0,357,0)
(129,238,0)
(53,10,0)
(170,33,0)
(41,90,0)
(311,313,0)
(450,133,0)
(307,443,0)
(292,156,0)
(385,389,0)
(28,328,0)
(379,328,0)
(366,52,0)
(98,222,0)
(243,369,0)
(82,302,0)
(189,304,0)
(415,253,0)
(342,293,0)
(407,455,0)
(237,29,0)
(314,276,0)
(442,19,0)
(380,110,0)
(119,337,0)
(427,411,0)
(310,262,0)
(429,394,0)
(441,328,0)
(36,182,0)
(101,368,0)
(407,104,0)
(232,307,0)
(25,215,0)
(205,283,0)
(148,259,0)
(3,104,0)
(60,339,0)
(403,372,0)
(428,165,0)
(201,30,0)
(87,437,0)
(83,185,0)
(445,219,0)
(253,396,0)
(131,328,0)
(442,214,0)
(198,152,0)
(75,218,0)
(353,452,0)
(142,29,0)
(316,415,0)
(413,389,0)
(139,313,0)
(64,395,0)
(201,328,0)
(369,388,0)
(302,77,0)
(332,292,0)
(30,33,0)
(267,407,0)
(8,396,0)
(171,307,0)
(114,66,0)
(219,445,0)
(411,386,0)
(259,364,0)
(446,292,0)
(329,337,0)
(361,2,0)
(295,379,0)
(77,365,0)
(15,66,0)
(318,66,0)
(76,328,0)
(156,313,0)
(413,222,0)
(15,73,0)
(149,261,0)
(438,237,0)
(292,395,0)
(425,287,0)
(360,424,0)
(330,184,0)
(269,393,0)
(4,419,0)
(417,110,0)
(236,66,0)
(285,277,0)
(248,135,0)
(415,156,0)
(47,119,0)
(339,33,0)
(309,156,0)
(81,313,0)
(259,152,0)
(71,111,0)
(420,114,0)
(351,260,0)
(336,34,0)
(70,66,0)
(155,261,0)
(374,191,0)
(151,368,0)
(112,117,0)
(453,436,0)
(439,21,0)
(162,117,0)
(252,68,0)
(339,395,0)
(244,68,0)
(279,241,0)
(440,104,0)
(193,385,0)
(294,345,0)
(192,258,0)
(221,47,0)
(22,275,0)
(35,200,0)
(358,313,0)
(158,366,0)
(351,313,0)
(114,438,0)
(167,439,0)
(173,374,0)
(69,73,0)
(15,152,0)
(291,311,0)
(363,185,0)
(245,19,0)
(108,313,0)
(69,194,0)
(215,174,0)
(247,124,0)
(202,113,0)
(259,66,0)
(64,182,0)
(21,395,0)
(70,194,0)
(366,158,0)
(327,313,0)
(283,205,0)
(254,214,0)
(156,350,0)
(240,228,0)
(445,104,0)
(411,427,0)
(133,379,0)
(5,178,0)
(21,320,0)
(61,261,0)
(94,394,0)
(90,52,0)
(136,309,0)
(34,336,0)
(305,201,0)
(38,313,0)
(452,104,0)
(215,25,0)
(306,204,0)
(90,121,0)
(116,19,0)
(133,315,0)
(84,297,0)
(276,139,0)
(13,365,0)
(49,313,0)
(377,394,0)
(208,445,0)
(356,136,0)
(270,252,0)
(143,66,0)
(340,116,0)
(418,308,0)
(99,21,0)
(47,304,0)
(242,287,0)
(139,301,0)
(238,313,0)
(11,173,0)
(409,452,0)
(69,152,0)
(69,302,0)
(116,388,0)
(423,37,0)
(454,443,0)
(74,245,0)
(229,104,0)
(116,260,0)
(311,104,0)
(180,102,0)
(399,424,0)
(292,183,0)
(157,335,0)
(341,248,0)
(343,273,0)
(51,98,0)
(100,30,0)
(136,38,0)
(262,68,0)
(140,441,0)
(405,315,0)
(424,328,0)
(211,64,0)
(88,428,0)
(320,180,0)
(389,355,0)
(108,124,0)
(7,313,0)
(368,38,0)
(287,252,0)
(265,131,0)
(350,135,0)
(234,355,0)
(10,313,0)
(113,202,0)
(174,431,0)
(309,428,0)
(333,87,0)
(372,328,0)
(196,313,0)
(43,116,0)
(273,351,0)
(0,395,0)
(335,388,0)
(154,413,0)
(436,229,0)
(111,444,0)
(30,313,0)
(355,328,0)
(188,64,0)
(348,160,0)
(431,174,0)
(382,87,0)
(214,261,0)
(91,366,0)
(231,337,0)
(320,21,0)
(457,60,0)
(135,248,0)
(268,15,0)
(364,13,0)
(317,176,0)
(121,90,0)
(318,194,0)
(198,194,0)
(37,405,0)
(286,245,0)
(281,201,0)
(37,15,0)
(27,292,0)
(273,33,0)
(26,313,0)
(354,260,0)
(228,240,0)
(69,66,0)
(85,195,0)
(355,389,0)
(408,204,0)
(406,15,0)
(386,411,0)
(303,313,0)
(106,309,0)
(388,2,0)
(357,0,0)
(75,104,0)
(304,47,0)
(57,313,0)
(80,451,0)
(65,182,0)
(210,255,0)
(1,146,0)
(369,19,0)
(199,172,0)
(440,313,0)
(395,241,0)
(297,395,0)
(275,33,0)
(73,180,0)
(394,328,0)
(431,258,0)
(2,52,0)
(24,318,0)
(218,75,0)
(396,253,0)
(405,369,0)
(97,76,0)
(159,395,0)
(230,380,0)
(1,185,0)
(130,165,0)
(297,338,0)
(12,124,0)
(224,345,0)
(370,251,0)
(383,313,0)
(241,395,0)
(240,156,0)
(211,161,0)
(376,350,0)
(457,219,0)
(451,139,0)
(275,395,0)
(430,427,0)
(318,73,0)
(115,69,0)
(374,173,0)
(120,335,0)
(28,238,0)
(6,156,0)
(64,33,0)
(133,450,0)
(14,11,0)
(34,451,0)
(308,66,0)
(173,11,0)
(339,60,0)
(431,63,0)
(394,104,0)
(11,174,0)
(338,191,0)
(113,260,0)
(214,442,0)
(245,261,0)
(257,384,0)
(163,248,0)
(164,313,0)
(103,195,0)
(422,313,0)
(160,7,0)
(237,438,0)
(393,269,0)
(398,64,0)
(301,136,0)
(289,440,0)
(117,328,0)
(20,204,0)
(319,349,0)
(209,98,0)
(297,33,0)
(66,124,0)
(351,273,0)
(54,275,0)
(298,421,0)
(371,165,0)
(229,436,0)
(194,394,0)
(212,328,0)
(176,135,0)
(113,271,0)
(369,260,0)
(158,2,0)
(141,13,0)
(46,66,0)
(0,33,0)
(10,104,0)
(447,427,0)
(266,154,0)
(58,315,0)
(275,204,0)
(264,236,0)
(19,442,0)
(160,328,0)
(304,104,0)
(132,304,0)
(219,457,0)
(395,419,0)
(401,114,0)
(46,73,0)
(136,301,0)
(260,113,0)
(253,415,0)
(1,255,0)
(375,52,0)
(9,214,0)
(368,345,0)
(39,313,0)
(301,139,0)
(153,308,0)
(1,116,0)
(116,1,0)
(248,104,0)
(92,415,0)
(452,409,0)
(176,328,0)
(143,154,0)
(137,75,0)
(388,191,0)
(335,204,0)
(44,313,0)
(165,428,0)
(45,283,0)
(23,124,0)
(216,228,0)
(50,173,0)
(173,50,0)
(93,70,0)
(260,313,0)
(368,104,0)
(455,407,0)
(190,160,0)
(337,119,0)
(122,70,0)
(174,11,0)
(350,328,0)
(455,161,0)
(274,313,0)
(444,421,0)
(181,445,0)
(245,260,0)
(223,139,0)
(352,308,0)
(150,205,0)
(238,66,0)
(96,198,0)
(70,73,0)
(410,215,0)
(185,328,0)
(111,117,0)
(180,73,0)
(448,313,0)
(117,111,0)
(123,380,0)
(87,328,0)
(133,354,0)
(143,152,0)
(385,276,0)
(63,431,0)
(161,211,0)
(220,198,0)
(307,135,0)
(213,452,0)
(116,200,0)
(89,66,0)
(205,198,0)
(52,90,0)
(322,255,0)
(389,222,0)
(116,43,1)
(174,431,1)
(236,264,1)
(247,89,1)
(259,147,1)
(38,368,1)
(46,263,1)
(427,104,1)
(46,73,1)
(240,228,1)
(103,85,1)
(319,139,1)
(228,104,1)
(108,124,1)
(369,19,1)
(226,128,1)
(237,438,1)
(232,171,1)
(147,148,1)
(275,395,1)
(51,16,1)
(186,253,1)
(2,158,1)
(66,124,1)
(42,211,1)
(407,17,1)
(75,104,1)
(305,281,1)
(184,3,1)
(310,131,1)
(74,251,1)
(37,423,1)
(43,340,1)
(228,347,1)
(445,104,1)
(281,10,1)
(116,260,1)
(75,137,1)
(427,447,1)
(144,388,1)
(53,308,1)
(243,37,1)
(62,451,1)
(180,102,1)
(262,310,1)
(162,71,1)
(7,433,1)
(360,46,1)
(256,184,1)
(109,399,1)
(354,388,1)
(143,73,1)
(255,210,1)
(47,304,1)
(133,450,1)
(326,325,1)
(69,152,1)
(410,431,1)
(166,386,1)
(452,104,1)
(152,424,1)
(395,241,1)
(335,260,1)
(455,407,1)
(121,253,1)
(45,205,1)
(114,66,1)
(29,237,1)
(97,238,1)
(333,456,1)
(184,330,1)
(348,108,1)
(366,272,1)
(76,328,1)
(387,13,1)
(339,200,1)
(132,189,1)
(399,360,1)
(441,328,1)
(428,165,1)
(379,328,1)
(261,61,1)
(318,66,1)
(415,92,1)
(64,398,1)
(388,2,1)
(12,124,1)
(129,28,1)
(91,391,1)
(438,114,1)
(349,18,1)
(211,64,1)
(325,275,1)
(368,104,1)
(374,173,1)
(251,331,1)
(34,336,1)
(309,428,1)
(316,396,1)
(0,33,1)
(18,319,1)
(368,101,1)
(430,440,1)
(98,209,1)
(444,111,1)
(250,283,1)
(355,234,1)
(406,283,1)
(15,152,1)
(429,377,1)
(409,452,1)
(391,361,1)
(188,182,1)
(276,139,1)
(194,394,1)
(143,249,1)
(296,227,1)
(52,90,1)
(297,326,1)
(307,135,1)
(438,119,1)
(372,328,1)
(414,211,1)
(114,401,1)
(354,182,1)
(193,314,1)
(94,429,1)
(317,168,1)
(111,117,1)
(337,329,1)
(408,20,1)
(266,143,1)
(87,104,1)
(443,454,1)
(150,198,1)
(69,194,1)
(380,104,1)
(136,38,1)
(424,104,1)
(11,338,1)
(136,356,1)
(198,152,1)
(398,188,1)
(251,33,1)
(336,328,1)
(292,395,1)
(364,127,1)
(227,409,1)
(372,403,1)
(452,213,1)
(148,152,1)
(306,204,1)
(32,35,1)
(284,19,1)
(294,151,1)
(407,104,1)
(265,138,1)
(245,261,1)
(173,11,1)
(350,135,1)
(354,203,1)
(82,69,1)
(318,152,1)
(223,251,1)
(297,84,1)
(13,141,1)
(273,277,1)
(321,317,1)
(117,112,1)
(128,293,1)
(9,245,1)
(314,389,1)
(342,380,1)
(2,52,1)
(439,167,1)
(450,328,1)
(101,345,1)
(166,29,1)
(290,53,1)
(119,47,1)
(28,328,1)
(456,172,1)
(224,294,1)
(339,395,1)
(143,66,1)
(60,339,1)
(275,54,1)
(158,391,1)
(61,155,1)
(413,389,1)
(215,25,1)
(113,271,1)
(286,74,1)
(143,194,1)
(342,87,1)
(73,180,1)
(65,187,1)
(339,33,1)
(318,24,1)
(218,75,1)
(116,200,1)
(169,302,1)
(273,395,1)
(397,452,1)
(394,328,1)
(67,80,1)
(269,404,1)
(69,115,1)
(70,73,1)
(259,152,1)
(198,66,1)
(87,328,1)
(259,194,1)
(345,224,1)
(69,73,1)
(40,244,1)
(258,400,1)
(359,375,1)
(420,386,1)
(121,338,1)
(436,229,1)
(133,354,1)
(350,328,1)
(53,436,1)
(334,66,1)
(245,260,1)
(6,168,1)
(343,95,1)
(396,359,1)
(279,56,1)
(440,289,1)
(376,6,1)
(434,451,1)
(192,312,1)
(318,73,1)
(411,427,1)
(441,362,1)
(451,34,1)
(276,385,1)
(220,77,1)
(394,104,1)
(200,32,1)
(413,390,1)
(433,160,1)
(442,214,1)
(124,23,1)
(14,174,1)
(241,104,1)
(11,174,1)
(283,45,1)
(56,159,1)
(241,279,1)
(133,379,1)
(346,372,1)
(292,156,1)
(350,278,1)
(329,231,1)
(21,439,1)
(418,436,1)
(16,318,1)
(120,157,1)
(215,410,1)
(370,149,1)
(30,100,1)
(432,97,1)
(17,267,1)
(20,444,1)
(165,130,1)
(24,416,1)
(341,176,1)
(248,104,1)
(29,142,1)
(10,104,1)
(113,202,1)
(302,69,1)
(171,156,1)
(308,352,1)
(270,287,1)
(7,73,1)
(46,66,1)
(351,273,1)
(275,204,1)
(277,285,1)
(214,261,1)
(322,185,1)
(371,88,1)
(392,379,1)
(37,15,1)
(116,19,1)
(15,66,1)
(168,311,1)
(242,425,1)
(161,455,1)
(337,156,1)
(100,201,1)
(121,186,1)
(15,268,1)
(187,218,1)
(302,82,1)
(335,120,1)
(450,288,1)
(299,79,1)
(293,342,1)
(405,369,1)
(139,301,1)
(174,215,1)
(363,116,1)
(181,208,1)
(195,103,1)
(366,52,1)
(131,265,1)
(188,36,1)
(35,218,1)
(175,441,1)
(253,396,1)
(140,443,1)
(252,270,1)
(225,212,1)
(6,409,1)
(108,323,1)
(215,156,1)
(268,406,1)
(170,240,1)
(400,192,1)
(293,200,1)
(393,269,1)
(15,194,1)
(117,328,1)
(40,351,1)
(151,346,1)
(3,104,1)
(308,66,1)
(272,91,1)
(451,80,1)
(309,156,1)
(299,236,1)
(238,66,1)
(30,33,1)
(367,170,1)
(425,125,1)
(446,332,1)
(258,204,1)
(130,371,1)
(199,1,1)
(33,156,1)
(424,328,1)
(306,144,1)
(127,259,1)
(208,339,1)
(312,52,1)
(273,33,1)
(22,306,1)
(285,343,1)
(185,328,1)
(64,33,1)
(205,198,1)
(369,388,1)
(154,266,1)
(185,83,1)
(409,397,1)
(283,205,1)
(396,204,1)
(71,78,1)
(236,66,1)
(311,104,1)
(345,328,1)
(366,374,1)
(292,27,1)
(338,297,1)
(255,328,1)
(375,338,1)
(361,335,1)
(154,143,1)
(142,237,1)
(416,194,1)
(245,286,1)
(380,230,1)
(70,66,1)
(373,177,1)
(93,122,1)
(27,446,1)
(149,261,1)
(220,413,1)
(86,206,1)
(131,328,1)
(83,363,1)
(111,156,1)
(211,161,1)
(28,373,1)
(12,250,1)
(253,415,1)
(90,41,1)
(269,104,1)
(212,328,1)
(336,67,1)
(106,356,1)
(254,9,1)
(204,408,1)
(115,387,1)
(304,132,1)
(172,199,1)
(201,328,1)
(51,318,1)
(15,73,1)
(229,378,1)
(229,104,1)
(0,357,1)
(64,182,1)
(209,51,1)
(368,345,1)
(447,430,1)
(412,291,1)
(297,395,1)
(385,389,1)
(436,453,1)
(288,392,1)
(6,393,1)
(404,134,1)
(210,322,1)
(216,235,1)
(311,412,1)
(287,242,1)
(205,150,1)
(3,31,1)
(201,305,1)
(180,320,1)
(406,12,1)
(244,262,1)
(390,154,1)
(158,366,1)
(182,65,1)
(443,307,1)
(280,133,1)
(149,284,1)
(378,166,1)
(156,350,1)
(385,193,1)
(354,19,1)
(135,248,1)
(445,181,1)
(95,7,1)
(356,223,1)
(21,33,1)
(221,337,1)
(21,395,1)
(160,328,1)
(357,86,1)
(259,66,1)
(238,129,1)
(157,374,1)
(267,64,1)
(203,42,1)
(159,240,1)
(291,38,1)
(369,182,1)
(47,156,1)
(415,316,1)
(112,162,1)
(198,96,1)
(323,76,1)
(275,33,1)
(382,333,1)
(331,370,1)
(457,219,1)
(380,328,1)
(123,62,1)
(88,106,1)
(96,220,1)
(260,113,1)
(64,395,1)
(202,0,1)
(138,178,1)
(23,247,1)
(77,169,1)
(178,5,1)
(401,420,1)
(449,98,1)
(153,418,1)
(0,395,1)
(217,354,1)
(90,121,1)
(1,185,1)
(235,443,1)
(70,93,1)
(10,290,1)
(198,73,1)
(231,114,1)
(234,118,1)
(364,259,1)
(79,276,1)
(87,382,1)
(369,402,1)
(22,204,1)
(394,94,1)
(176,321,1)
(289,414,1)
(307,232,1)
(423,15,1)
(259,73,1)
(172,328,1)
(249,449,1)
(143,152,1)
(55,395,1)
(206,334,1)
(78,260,1)
(379,295,1)
(362,140,1)
(278,376,1)
(80,172,1)
(165,104,1)
(453,229,1)
(353,135,1)
(451,139,1)
(69,66,1)
(248,163,1)
(89,73,1)
(431,258,1)
(141,364,1)
(396,8,1)
(352,239,1)
(155,78,1)
(105,349,1)
(297,33,1)
(424,109,1)
(118,212,1)
(177,30,1)
(11,14,1)
(213,353,1)
(198,194,1)
(381,33,1)
(76,432,1)
(119,337,1)
(355,328,1)
(1,255,1)
(276,314,1)
(389,355,1)
(134,296,1)
(30,395,1)
(369,260,1)
(368,328,1)
(128,200,1)
(33,367,1)
(1,116,1)
(160,190,1)
(85,252,1)
(122,276,1)
(36,182,1)
(163,341,1)
(304,104,1)
(295,217,1)
(308,124,1)
(349,328,1)
(332,256,1)
(342,434,1)
(189,221,1)
(264,405,1)
(370,261,1)
(251,261,1)
(116,388,1)
(187,60,1)
(240,156,1)
(60,457,1)
(136,309,1)
(340,60,1)
(214,254,1)
(99,381,1)
(454,307,1)
(125,175,1)
(239,153,1)
(402,243,1)
(440,104,1)
(19,442,1)
(176,328,1)
(5,195,1)
(381,292,1)
(218,349,1)
(54,22,1)
(195,328,1)
(386,411,1)
(301,136,1)
(320,21,1)
(230,123,1)
(223,298,1)
(31,55,1)
(330,3,1)
(137,105,1)
(307,328,1)
(167,99,1)
(219,445,1)
(251,395,1)
(354,260,1)
(377,70,1)
(263,225,1)
(381,184,1)
(431,63,1)
(347,216,1)
(190,348,1)
(415,156,1)
(339,226,1)
(318,194,1)
(351,260,1)
(335,204,1)
(287,328,1)
(36,299,1)
(298,275,1)
(212,280,1)
(173,50,1)
(391,275,2)
(206,443,2)
(85,443,2)
(160,443,2)
(295,211,2)
(298,78,2)
(3,104,2)
(361,275,2)
(237,438,2)
(259,194,2)
(292,156,2)
(281,443,2)
(111,78,2)
(338,297,2)
(36,211,2)
(442,214,2)
(51,276,2)
(302,212,2)
(367,240,2)
(15,194,2)
(398,443,2)
(37,15,2)
(306,275,2)
(368,328,2)
(2,158,2)
(272,275,2)
(447,443,2)
(35,218,2)
(370,78,2)
(247,443,2)
(411,427,2)
(444,111,2)
(181,339,2)
(123,451,2)
(452,168,2)
(399,212,2)
(305,443,2)
(21,439,2)
(414,443,2)
(94,276,2)
(283,212,2)
(205,198,2)
(357,443,2)
(143,73,2)
(380,328,2)
(143,152,2)
(28,328,2)
(163,168,2)
(216,443,2)
(150,212,2)
(5,443,2)
(362,443,2)
(415,156,2)
(360,212,2)
(372,328,2)
(270,443,2)
(307,135,2)
(78,443,2)
(114,386,2)
(95,443,2)
(105,443,2)
(114,66,2)
(188,443,2)
(30,443,2)
(259,73,2)
(335,260,2)
(66,443,2)
(136,38,2)
(76,443,2)
(116,200,2)
(218,75,2)
(198,194,2)
(382,172,2)
(241,104,2)
(456,172,2)
(99,443,2)
(37,276,2)
(339,60,2)
(301,136,2)
(275,204,2)
(89,443,2)
(347,443,2)
(158,366,2)
(363,60,2)
(214,251,2)
(60,457,2)
(438,114,2)
(202,0,2)
(10,104,2)
(157,275,2)
(106,356,2)
(450,211,2)
(152,424,2)
(147,212,2)
(64,395,2)
(47,156,2)
(30,395,2)
(9,251,2)
(160,328,2)
(125,443,2)
(136,443,2)
(260,443,2)
(250,283,2)
(135,248,2)
(445,104,2)
(161,64,2)
(173,275,2)
(195,328,2)
(276,139,2)
(97,443,2)
(143,66,2)
(14,275,2)
(119,337,2)
(336,80,2)
(442,251,2)
(24,276,2)
(240,156,2)
(46,73,2)
(32,218,2)
(287,328,2)
(134,409,2)
(415,275,2)
(379,328,2)
(73,180,2)
(255,328,2)
(254,251,2)
(318,73,2)
(244,443,2)
(127,212,2)
(424,104,2)
(15,276,2)
(333,172,2)
(212,328,2)
(318,66,2)
(172,328,2)
(0,395,2)
(219,445,2)
(351,443,2)
(275,78,2)
(45,276,2)
(36,182,2)
(318,152,2)
(436,443,2)
(339,33,2)
(308,66,2)
(69,212,2)
(174,275,2)
(406,276,2)
(440,443,2)
(21,395,2)
(380,104,2)
(268,212,2)
(378,443,2)
(308,436,2)
(220,276,2)
(2,275,2)
(371,356,2)
(43,60,2)
(158,391,2)
(405,369,2)
(71,78,2)
(201,328,2)
(387,212,2)
(186,275,2)
(22,275,2)
(369,388,2)
(338,275,2)
(173,11,2)
(309,428,2)
(93,276,2)
(325,275,2)
(65,443,2)
(180,320,2)
(33,156,2)
(28,443,2)
(380,451,2)
(343,443,2)
(82,212,2)
(15,73,2)
(154,143,2)
(174,215,2)
(345,328,2)
(70,73,2)
(91,275,2)
(54,275,2)
(56,240,2)
(120,275,2)
(241,240,2)
(119,47,2)
(385,389,2)
(205,212,2)
(455,64,2)
(285,443,2)
(172,60,2)
(355,328,2)
(122,276,2)
(258,204,2)
(354,388,2)
(7,443,2)
(374,173,2)
(121,338,2)
(406,212,2)
(404,409,2)
(245,261,2)
(339,395,2)
(208,339,2)
(229,104,2)
(436,229,2)
(350,328,2)
(296,409,2)
(131,328,2)
(133,211,2)
(116,388,2)
(148,212,2)
(187,443,2)
(188,211,2)
(131,443,2)
(87,104,2)
(450,328,2)
(194,394,2)
(156,350,2)
(451,172,2)
(133,379,2)
(293,200,2)
(342,60,2)
(200,218,2)
(75,443,2)
(132,337,2)
(411,443,2)
(76,328,2)
(369,276,2)
(154,276,2)
(420,386,2)
(248,104,2)
(124,443,2)
(408,78,2)
(215,25,2)
(273,277,2)
(33,240,2)
(297,395,2)
(390,276,2)
(45,212,2)
(309,356,2)
(400,275,2)
(431,258,2)
(418,436,2)
(52,275,2)
(354,19,2)
(108,124,2)
(359,275,2)
(283,276,2)
(108,443,2)
(111,156,2)
(139,301,2)
(299,211,2)
(374,275,2)
(115,212,2)
(142,386,2)
(86,443,2)
(61,78,2)
(37,212,2)
(290,443,2)
(369,260,2)
(90,275,2)
(46,66,2)
(117,78,2)
(140,443,2)
(268,276,2)
(64,182,2)
(308,124,2)
(269,104,2)
(385,314,2)
(40,244,2)
(395,241,2)
(12,124,2)
(215,156,2)
(259,212,2)
(0,357,2)
(1,185,2)
(165,104,2)
(27,184,2)
(392,211,2)
(167,443,2)
(211,443,2)
(88,356,2)
(175,443,2)
(366,275,2)
(319,443,2)
(109,212,2)
(262,443,2)
(323,443,2)
(236,276,2)
(375,275,2)
(349,328,2)
(47,337,2)
(280,211,2)
(354,211,2)
(180,443,2)
(79,276,2)
(87,172,2)
(67,80,2)
(194,276,2)
(143,194,2)
(185,60,2)
(321,168,2)
(286,251,2)
(205,276,2)
(311,104,2)
(69,66,2)
(273,33,2)
(332,184,2)
(388,275,2)
(243,212,2)
(1,116,2)
(245,260,2)
(62,451,2)
(379,211,2)
(351,260,2)
(267,64,2)
(166,443,2)
(96,212,2)
(21,33,2)
(301,443,2)
(377,276,2)
(128,218,2)
(409,452,2)
(2,52,2)
(201,443,2)
(424,212,2)
(230,451,2)
(158,275,2)
(60,218,2)
(318,194,2)
(441,328,2)
(407,64,2)
(297,275,2)
(116,19,2)
(210,60,2)
(11,275,2)
(289,443,2)
(433,443,2)
(413,276,2)
(339,218,2)
(388,2,2)
(42,211,2)
(427,104,2)
(139,443,2)
(195,443,2)
(16,276,2)
(397,168,2)
(217,211,2)
(416,276,2)
(185,328,2)
(60,60,2)
(409,168,2)
(113,202,2)
(155,78,2)
(266,276,2)
(198,66,2)
(30,33,2)
(369,19,2)
(69,73,2)
(423,276,2)
(441,443,2)
(428,356,2)
(228,443,2)
(51,318,2)
(161,455,2)
(111,117,2)
(307,328,2)
(80,172,2)
(54,78,2)
(234,212,2)
(90,121,2)
(52,90,2)
(3,240,2)
(69,152,2)
(245,251,2)
(369,212,2)
(19,442,2)
(446,184,2)
(396,275,2)
(407,104,2)
(121,275,2)
(396,8,2)
(430,443,2)
(287,443,2)
(152,212,2)
(393,409,2)
(221,337,2)
(135,168,2)
(7,73,2)
(302,69,2)
(198,212,2)
(336,328,2)
(11,338,2)
(356,443,2)
(174,431,2)
(439,443,2)
(273,443,2)
(18,443,2)
(12,283,2)
(310,443,2)
(228,104,2)
(401,386,2)
(293,60,2)
(339,200,2)
(119,114,2)
(427,443,2)
(204,78,2)
(431,63,2)
(352,436,2)
(29,386,2)
(355,212,2)
(405,276,2)
(231,114,2)
(169,212,2)
(256,184,2)
(214,261,2)
(192,275,2)
(381,443,2)
(317,168,2)
(103,443,2)
(64,211,2)
(19,251,2)
(264,212,2)
(198,152,2)
(15,212,2)
(83,60,2)
(337,156,2)
(223,443,2)
(227,409,2)
(237,386,2)
(90,41,2)
(259,152,2)
(211,211,2)
(405,212,2)
(176,168,2)
(202,443,2)
(235,443,2)
(306,204,2)
(176,328,2)
(364,259,2)
(117,328,2)
(318,276,2)
(348,443,2)
(47,304,2)
(165,356,2)
(248,168,2)
(184,240,2)
(304,337,2)
(297,33,2)
(276,385,2)
(275,395,2)
(265,443,2)
(260,113,2)
(118,212,2)
(74,251,2)
(331,251,2)
(21,443,2)
(180,102,2)
(218,349,2)
(199,60,2)
(209,276,2)
(133,354,2)
(253,415,2)
(292,395,2)
(38,368,2)
(66,124,2)
(0,33,2)
(162,78,2)
(349,443,2)
(143,276,2)
(453,443,2)
(434,451,2)
(218,443,2)
(251,395,2)
(190,443,2)
(149,251,2)
(229,443,2)
(369,182,2)
(331,78,2)
(96,276,2)
(264,276,2)
(238,66,2)
(77,212,2)
(373,443,2)
(239,436,2)
(457,339,2)
(116,60,2)
(17,64,2)
(70,66,2)
(341,168,2)
(364,212,2)
(215,275,2)
(53,443,2)
(141,212,2)
(277,443,2)
(440,104,2)
(243,276,2)
(452,104,2)
(178,443,2)
(64,443,2)
(253,275,2)
(309,156,2)
(34,80,2)
(386,443,2)
(153,436,2)
(211,64,2)
(87,328,2)
(326,275,2)
(15,152,2)
(353,168,2)
(252,443,2)
(432,443,2)
(184,3,2)
(138,443,2)
(177,443,2)
(20,78,2)
(393,269,2)
(219,339,2)
(428,165,2)
(193,314,2)
(242,443,2)
(240,443,2)
(251,251,2)
(258,275,2)
(144,275,2)
(368,104,2)
(253,396,2)
(263,212,2)
(366,374,2)
(398,211,2)
(425,443,2)
(429,276,2)
(100,443,2)
(415,92,2)
(402,276,2)
(316,275,2)
(22,78,2)
(424,328,2)
(240,228,2)
(150,276,2)
(11,174,2)
(1,255,2)
(273,395,2)
(112,78,2)
(304,104,2)
(137,443,2)
(238,443,2)
(337,114,2)
(31,240,2)
(413,389,2)
(396,204,2)
(46,212,2)
(113,443,2)
(443,307,2)
(23,443,2)
(226,60,2)
(438,119,2)
(279,240,2)
(251,78,2)
(330,240,2)
(136,309,2)
(354,260,2)
(211,161,2)
(335,275,2)
(259,66,2)
(314,212,2)
(368,345,2)
(236,212,2)
(213,168,2)
(116,260,2)
(292,184,2)
(128,60,2)
(69,194,2)
(389,355,2)
(75,104,2)
(64,33,2)
(10,443,2)
(73,443,2)
(431,275,2)
(276,212,2)
(198,73,2)
(121,253,2)
(159,240,2)
(198,276,2)
(334,443,2)
(170,240,2)
(15,66,2)
(451,34,2)
(389,212,2)
(444,78,2)
(251,33,2)
(288,211,2)
(34,336,2)
(451,139,2)
(173,50,2)
(203,211,2)
(370,251,2)
(284,251,2)
(275,275,2)
(395,240,2)
(249,276,2)
(320,443,2)
(394,104,2)
(149,261,2)
(297,84,2)
(350,135,2)
(220,212,2)
(251,261,2)
(351,273,2)
(340,60,2)
(455,407,2)
(212,211,2)
(236,66,2)
(226,218,2)
(275,33,2)
(423,212,2)
(445,339,2)
(283,205,2)
(130,356,2)
(410,275,2)
(320,21,2)
(366,52,2)
(129,443,2)
(394,328,2)
(457,219,2)
(449,276,2)
(182,443,2)
(0,443,2)
(402,212,2)
(255,60,2)
(438,386,2)
(225,212,2)
(60,339,2)
(269,409,2)
(386,411,2)
(189,337,2)
(70,276,2)
(29,237,2)
(98,276,2)
(113,271,2)
(13,212,2)
(329,114,2)
(261,78,2)
(133,450,2)
(312,275,2)
(55,240,2)
(1,60,2)
(335,204,2)
(354,182,2)
(394,276,2)
(322,60,2)
-----------------------------------
(0,N_linkages_alloced * sizeof(int)
(1,extract_links(indices[in], sent->null_count, sent->parse_info)
(2,block_bottom + (my_random()
(3,opts->verbosity)
(4,if (opts->verbosity > 1)
(5,0)
(6,N_linkages_found)
(7,sent->link_info = link_info)
(8,double)
(9,in)
(10,print_time(opts, "Sorted all linkages")
(11,((double)
(12,N_valid_linkages++)
(13,link_info[N_linkages_post_processed].fat = FALSE)
(14,denom)
(15,link_info[N_linkages_post_processed])
(16,fat)
(17,resources)
(18,length)
(19,indices[in] = -(in+1)
(20,in)
(21,N_linkages_alloced * sizeof(Linkage_info)
(22,in)
(23,0)
(24,N_linkages_post_processed)
(25,double)
(26,block_top)
(27,N_linkages_found)
(28,sent->num_linkages_post_processed)
(29,assert(! ((N_linkages_post_processed == 0)
(30,sent->num_linkages_alloced = N_linkages_alloced)
(31,verbosity)
(32,0)
(33,N_linkages_alloced = N_linkages_found)
(34,!is_canonical_linkage(sent)
(35,in)
(36,in++)
(37,link_info[N_linkages_post_processed].index)
(38,overflowed = build_parse_set(sent, sent->null_count, opts)
(39,if (overflowed)
(40,RET)
(41,int)
(42,indices)
(43,in)
(44,N_linkages_post_processed)
(45,0)
(46,link_info[N_linkages_post_processed])
(47,N_linkages_found < opts->linkage_limit)
(48,if (opts->verbosity > 1)
(49,denom)
(50,int)
(51,link_info[N_linkages_post_processed].fat)
(52,block_bottom = (int)
(53,opts)
(54,N_linkages_alloced)
(55,opts)
(56,opts)
(57,indices)
(58,if (link_info[N_linkages_post_processed].N_violations==0)
(59,only_canonical_allowed)
(60,(in < N_linkages_alloced)
(61,0)
(62,sent)
(63,double)
(64,in < N_linkages_alloced)
(65,0)
(66,N_linkages_post_processed = N_valid_linkages = 0)
(67,sent)
(68,)
(69,link_info[N_linkages_post_processed])
(70,link_info[N_linkages_post_processed])
(71,N_linkages_found)
(72,if (N_linkages_found > opts->linkage_limit)
(73,link_info=(Linkage_info *)
(74,indices)
(75,opts->twopass_length)
(76,sent->num_valid_linkages)
(77,link_info[N_linkages_post_processed].canonical = TRUE)
(78,overflowed)
(79,continue;)
(80,only_canonical_allowed)
(81,for (in=0; (in < N_linkages_alloced)
(82,canonical)
(83,null_count)
(84,double)
(85,sent)
(86,int)
(87,analyze_thin_linkage(sent, opts, PP_FIRST_PASS)
(88,2)
(89,N_linkages_post_processed)
(90,(int)
(91,block_top)
(92,double)
(93,N_linkages_post_processed)
(94,PP_SECOND_PASS)
(95,indices)
(96,N_linkages_post_processed)
(97,sent)
(98,link_info[N_linkages_post_processed].fat = TRUE)
(99,N_linkages_alloced)
(100,N_linkages_alloced)
(101,opts)
(102,Linkage_info *)
(103,num_valid_linkages)
(104,Parse_Options opts)
(105,opts)
(106,N_linkages_found)
(107,if (only_canonical_allowed && !canonical)
(108,sent->num_valid_linkages = N_valid_linkages)
(109,PP_SECOND_PASS)
(110,)
(111,N_linkages_found + sent->length)
(112,length)
(113,(int *)
(114,N_linkages_post_processed == 0)
(115,N_linkages_post_processed)
(116,indices[in])
(117,sent->length)
(118,canonical)
(119,(N_linkages_found > 0)
(120,in)
(121,((double)
(122,link_info)
(123,opts)
(124,N_valid_linkages = 0)
(125,sent->num_linkages_alloced = 0)
(126,if (sent->num_linkages_found == 0)
(127,fat)
(128,in)
(129,N_linkages_post_processed)
(130,linkage_limit)
(131,sent->link_info)
(132,linkage_limit)
(133,extract_links(indices[in], sent->null_count, sent->parse_info)
(134,opts)
(135,sent->num_linkages_found = opts->linkage_limit)
(136,overflowed || (N_linkages_found > 2*opts->linkage_limit)
(137,twopass_length)
(138,sent)
(139,only_canonical_allowed = (!(overflowed || (N_linkages_found > 2*opts->linkage_limit)
(140,sent)
(141,FALSE)
(142,"None of the linkages is canonical")
(143,link_info[N_linkages_post_processed])
(144,in)
(145,)
(146,)
(147,N_linkages_post_processed)
(148,link_info)
(149,in++)
(150,N_violations)
(151,sent)
(152,link_info[N_linkages_post_processed] =\n\\n\\t\\t\\t\\tanalyze_thin_linkage(sent, opts, PP_SECOND_PASS)
(153,"%d of %d linkages with no P.P. violations\\n")
(154,link_info[N_linkages_post_processed].canonical)
(155,in)
(156,N_linkages_found = sent->num_linkages_found)
(157,indices)
(158,my_random()
(159,N_linkages_alloced)
(160,sent->link_info)
(161,!resources_exhausted(opts->resources)
(162,sent)
(163,linkage_limit)
(164,if (sent->length >= opts->twopass_length)
(165,opts->linkage_limit)
(166,opts)
(167,Linkage_info)
(168,overflowed)
(169,TRUE)
(170,N_linkages_alloced)
(171,sent)
(172,set_has_fat_down(sent)
(173,(int)
(174,(double)
(175,0)
(176,sent->num_linkages_found)
(177,sent)
(178,sent->num_valid_linkages = 0)
(179,for (in=0; in<N_linkages_alloced; in++)
(180,(Linkage_info *)
(181,resources)
(182,in=0)
(183,)
(184,opts->verbosity > 1)
(185,sent->null_count)
(186,denom)
(187,in)
(188,in)
(189,opts)
(190,link_info)
(191,)
(192,in)
(193,canonical)
(194,link_info[N_linkages_post_processed] =\n\\n\\t\\t\\t\\tanalyze_fat_linkage(sent, opts, PP_SECOND_PASS)
(195,sent->num_valid_linkages)
(196,if (overflowed)
(197,if (set_has_fat_down(sent)
(198,link_info[N_linkages_post_processed])
(199,sent)
(200,in=0)
(201,sent->num_linkages_alloced)
(202,xalloc(N_linkages_alloced * sizeof(int)
(203,in)
(204,in=0)
(205,link_info[N_linkages_post_processed].N_violations)
(206,N_linkages_alloced)
(207,N_valid_linkages)
(208,opts)
(209,TRUE)
(210,parse_info)
(211,(in < N_linkages_alloced)
(212,set_has_fat_down(sent)
(213,verbosity)
(214,in+1)
(215,(double)
(216,opts)
(217,sent)
(218,sent->length >= opts->twopass_length)
(219,resources_exhausted(opts->resources)
(220,link_info)
(221,N_linkages_found)
(222,)
(223,only_canonical_allowed)
(224,null_count)
(225,link_info)
(226,N_linkages_alloced)
(227,stdout)
(228,opts->linkage_limit)
(229,opts->verbosity)
(230,PP_FIRST_PASS)
(231,N_linkages_found)
(232,num_linkages_found)
(233,)
(234,sent)
(235,N_linkages_found)
(236,N_linkages_post_processed++)
(237,! ((N_linkages_post_processed == 0)
(238,sent->num_linkages_post_processed = N_linkages_post_processed)
(239,N_valid_linkages)
(240,N_linkages_found > opts->linkage_limit)
(241,opts->linkage_limit)
(242,num_linkages_post_processed)
(243,indices)
(244,return;)
(245,indices[in])
(246,for (in=0; (in < N_linkages_alloced)
(247,N_valid_linkages)
(248,opts->linkage_limit)
(249,N_linkages_post_processed)
(250,N_valid_linkages)
(251,in<N_linkages_alloced)
(252,sent->num_linkages_post_processed = 0)
(253,(double)
(254,1)
(255,sent->parse_info)
(256,stdout)
(257,for (in=0; in<N_linkages_alloced; in++)
(258,in+1)
(259,link_info[N_linkages_post_processed])
(260,indices = (int *)
(261,in=0)
(262,sent->link_info = NULL)
(263,N_linkages_post_processed)
(264,N_linkages_post_processed)
(265,link_info)
(266,canonical)
(267,opts)
(268,N_linkages_post_processed)
(269,opts->linkage_limit)
(270,0)
(271,int *)
(272,block_bottom)
(273,N_linkages_alloced * sizeof(int)
(274,link_info)
(275,in<N_linkages_alloced)
(276,only_canonical_allowed && !canonical)
(277,sizeof(int)
(278,num_linkages_found)
(279,linkage_limit)
(280,sent)
(281,sent)
(282,canonical)
(283,link_info[N_linkages_post_processed].N_violations==0)
(284,in)
(285,int)
(286,in)
(287,sent->num_linkages_post_processed)
(288,parse_info)
(289,"Postprocessed all linkages")
(290,"Sorted all linkages")
(291,opts)
(292,fprintf(stdout,\n\\n\\t\\t\\t\\t  "Warning: Considering a random subset of %d of %d linkages\\n",\n\\n\\t\\t\\t\\t  N_linkages_alloced, N_linkages_found)
(293,in++)
(294,sent)
(295,null_count)
(296,"Warning: Count overflow.\\n"\n\\n\\t\\t\\t\\t  "Considering a random subset of %d of an unknown and large number of linkages\\n")
(297,(double)
(298,my_random_finalize()
(299,in)
(300,if (set_has_fat_down(sent)
(301,!(overflowed || (N_linkages_found > 2*opts->linkage_limit)
(302,link_info[N_linkages_post_processed].canonical)
(303,if (!resources_exhausted(opts->resources)
(304,opts->linkage_limit)
(305,num_linkages_alloced)
(306,in++)
(307,sent->num_linkages_found)
(308,fprintf(stdout, "%d of %d linkages with no P.P. violations\\n",\n\\n\\t\\t\\t\\tN_valid_linkages, N_linkages_post_processed)
(309,N_linkages_found > 2*opts->linkage_limit)
(310,NULL)
(311,print_time(opts, "Built parse set")
(312,block_top)
(313,)
(314,only_canonical_allowed)
(315,)
(316,N_linkages_found)
(317,sent)
(318,link_info[N_linkages_post_processed])
(319,sent)
(320,xalloc(N_linkages_alloced * sizeof(Linkage_info)
(321,num_linkages_found)
(322,sent)
(323,N_valid_linkages)
(324,)
(325,denom)
(326,N_linkages_alloced)
(327,block_bottom)
(328,Sentence sent)
(329,0)
(330,1)
(331,N_linkages_alloced)
(332,"Warning: Considering a random subset of %d of %d linkages\\n")
(333,opts)
(334,indices)
(335,indices[in])
(336,is_canonical_linkage(sent)
(337,N_linkages_found > 0)
(338,denom = (double)
(339,in < N_linkages_alloced)
(340,indices)
(341,opts)
(342,in)
(343,N_linkages_alloced)
(344,)
(345,sent->null_count)
(346,overflowed)
(347,linkage_limit)
(348,sent)
(349,sent->length)
(350,sent->num_linkages_found)
(351,xfree(indices, N_linkages_alloced * sizeof(int)
(352,N_linkages_post_processed)
(353,opts)
(354,indices[in])
(355,is_canonical_linkage(sent)
(356,overflowed)
(357,sizeof(int)
(358,N_linkages_alloced)
(359,in)
(360,sent)
(361,block_bottom)
(362,num_linkages_alloced)
(363,sent)
(364,link_info[N_linkages_post_processed].fat)
(365,)
(366,block_top-block_bottom)
(367,N_linkages_found)
(368,build_parse_set(sent, sent->null_count, opts)
(369,indices[in])
(370,in)
(371,opts)
(372,free_post_processing(sent)
(373,num_linkages_post_processed)
(374,block_top = (int)
(375,block_bottom)
(376,sent)
(377,sent)
(378,verbosity)
(379,sent->null_count)
(380,analyze_fat_linkage(sent, opts, PP_FIRST_PASS)
(381,link_info)
(382,PP_FIRST_PASS)
(383,if (opts->verbosity > 1)
(384,)
(385,!canonical)
(386,!resources_exhausted(opts->resources)
(387,link_info)
(388,indices[in] = block_bottom + (my_random()
(389,canonical = is_canonical_linkage(sent)
(390,canonical)
(391,my_random()
(392,sent)
(393,fprintf(stdout,\n\\n\\t\\t\\t\\t  "Warning: Count overflow.\\n"\n\\n\\t\\t\\t\\t  "Considering a random subset of %d of an unknown and large number of linkages\\n",\n\\n\\t\\t\\t\\t  opts->linkage_limit)
(394,analyze_fat_linkage(sent, opts, PP_SECOND_PASS)
(395,N_linkages_alloced = opts->linkage_limit)
(396,(double)
(397,1)
(398,N_linkages_alloced)
(399,opts)
(400,1)
(401,0)
(402,in)
(403,sent)
(404,linkage_limit)
(405,link_info[N_linkages_post_processed].index = indices[in])
(406,link_info)
(407,opts->resources)
(408,0)
(409,opts->verbosity > 1)
(410,N_linkages_found)
(411,resources_exhausted(opts->resources)
(412,"Built parse set")
(413,link_info[N_linkages_post_processed].canonical = canonical)
(414,opts)
(415,(double)
(416,link_info)
(417,if (only_canonical_allowed && !is_canonical_linkage(sent)
(418,stdout)
(419,)
(420,N_linkages_post_processed)
(421,)
(422,overflowed)
(423,index)
(424,analyze_thin_linkage(sent, opts, PP_SECOND_PASS)
(425,sent)
(426,in)
(427,opts->resources)
(428,2*opts->linkage_limit)
(429,opts)
(430,opts)
(431,(double)
(432,num_valid_linkages)
(433,link_info)
(434,continue;)
(435,)
(436,opts->verbosity > 1)
(437,)
(438,(N_linkages_post_processed == 0)
(439,sizeof(Linkage_info)
(440,print_time(opts, "Postprocessed all linkages")
(441,sent->num_linkages_alloced)
(442,-(in+1)
(443,sent->num_linkages_found == 0)
(444,my_random_initialize(N_linkages_found + sent->length)
(445,opts->resources)
(446,N_linkages_alloced)
(447,resources)
(448,N_linkages_found)
(449,link_info)
(450,sent->parse_info)
(451,only_canonical_allowed && !is_canonical_linkage(sent)
(452,opts->verbosity)
(453,1)
(454,0)
(455,resources_exhausted(opts->resources)
(456,sent)
(457,!resources_exhausted(opts->resources)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^