-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_18_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    goto source;
source:
    /* POTENTIAL FLAW: Read count from the console using fscanf() */
    fscanf(stdin, "%d", &count);
    goto sink;
sink:
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
33,34
33,35
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
53,54
53,55
54,55
54,56
55,56
58,59
60,61
61,62
63,64
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,16,18,20,24,26,27,30,32,34,39,41,43,48,49,52,56,57,59,62,67,68
-----computeFrom-----
12,13
12,14
46,47
46,48
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_18_bad(){    int count;    /* Initialize count */    count = -1;    goto source;source:    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    goto sink;sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_18_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_18_bad
{    int count;    /* Initialize count */    count = -1;    goto source;source:    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    goto sink;sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
goto source;
source
source:    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);
source
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
goto sink;
sink
sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
sink
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(11,25,0)
(29,5,0)
(12,18,0)
(27,1,0)
(31,19,0)
(14,1,0)
(28,4,0)
(2,19,0)
(25,5,0)
(25,18,0)
(7,19,0)
(6,13,0)
(26,23,0)
(3,25,0)
(24,23,0)
(5,25,0)
(16,33,0)
(13,4,0)
(19,7,0)
(1,23,0)
(9,23,0)
(10,4,0)
(18,23,0)
(5,4,0)
(30,27,0)
(22,27,0)
(7,18,0)
(18,12,0)
(8,23,0)
(20,16,0)
(19,23,0)
(17,18,0)
(32,23,0)
(34,12,0)
(25,3,0)
(21,7,0)
(15,1,0)
(16,20,1)
(18,12,1)
(34,17,1)
(30,22,1)
(13,4,1)
(21,2,1)
(2,31,1)
(4,10,1)
(5,4,1)
(5,25,1)
(7,21,1)
(7,18,1)
(19,7,1)
(0,5,1)
(22,8,1)
(28,27,1)
(29,13,1)
(20,5,1)
(11,29,1)
(29,4,1)
(13,6,1)
(8,19,1)
(25,18,1)
(6,16,1)
(31,24,1)
(25,3,1)
(10,28,1)
(12,34,1)
(24,18,1)
(27,30,1)
(25,11,1)
(25,3,2)
(29,5,2)
(19,7,2)
(25,5,2)
(5,4,2)
(11,5,2)
(7,18,2)
(5,25,2)
(6,5,2)
(18,12,2)
(16,5,2)
(25,18,2)
(5,5,2)
(20,5,2)
(13,5,2)
(13,4,2)
-----------------------------------
(0,RET)
(1,)
(2,"%d")
(3,size_t)
(4,i = 0)
(5,i < (size_t)
(6,i)
(7,&count)
(8,goto sink;)
(9,source:)
(10,0)
(11,count)
(12,-1)
(13,i++)
(14,i)
(15,for (i = 0; i < (size_t)
(16,printLine("Hello")
(17,count)
(18,count = -1)
(19,fscanf(stdin, "%d", &count)
(20,"Hello")
(21,count)
(22,i)
(23,)
(24,goto source;)
(25,(size_t)
(26,count)
(27,i = 0)
(28,i)
(29,i)
(30,0)
(31,stdin)
(32,sink:)
(33,)
(34,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^