-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_31_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    /* POTENTIAL FLAW: Read count from the console using fscanf() */
    fscanf(stdin, "%d", &count);
    {
        int countCopy = count;
        int count = countCopy;
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
44,47
44,48
44,49
44,50
44,51
45,46
46,47
46,48
47,48
49,50
49,51
51,52
53,54
54,55
54,56
55,56
57,58
57,59
57,60
60,61
61,62
63,64
64,65
64,66
66,67
66,68
66,69
69,70
71,72
72,73
72,74
73,74
75,76
75,77
75,78
76,77
78,79
81,82
81,83
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
93,94
93,95
93,96
93,97
94,95
95,96
95,97
96,97
99,100
99,101
100,101
102,103
102,104
103,104
103,105
104,105
107,108
109,110
110,111
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
118,119
120,121
120,122
120,123
120,124
120,125
121,122
123,124
125,126
126,127
126,128
129,130
129,131
130,131
132,133
134,135
136,137
137,138
138,139
138,140
139,140
142,143
142,144
143,144
145,146
146,147
147,148
147,149
148,149
150,151
-----nextToken-----
2,4,8,10,14,16,20,22,23,26,30,32,35,38,40,43,48,50,52,56,58,59,62,65,67,68,70,74,77,79,80,84,86,91,92,97,98,101,105,106,108,111,117,119,122,124,127,128,131,133,135,140,141,144,149,151
-----computeFrom-----
12,13
12,14
72,73
72,74
82,83
82,84
95,96
95,97
99,100
99,101
114,115
114,116
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_31_bad(){    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_fwrite_31_bad()
CWE400_Resource_Exhaustion__fscanf_fwrite_31_bad
{    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
{        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
int countCopy = count;
int countCopy = count;
int
countCopy = count
countCopy
= count
count
count
int count = countCopy;
int count = countCopy;
int
count = countCopy
count
= countCopy
countCopy
countCopy
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(71,74,0)
(22,48,0)
(21,48,0)
(54,57,0)
(9,50,0)
(6,18,0)
(41,75,0)
(12,76,0)
(63,76,0)
(11,21,0)
(75,35,0)
(17,76,0)
(20,49,0)
(56,17,0)
(37,18,0)
(49,52,0)
(35,48,0)
(25,22,0)
(44,54,0)
(17,16,0)
(64,34,0)
(0,35,0)
(38,18,0)
(65,9,0)
(39,66,0)
(18,35,0)
(15,18,0)
(29,22,0)
(27,21,0)
(30,57,0)
(50,9,0)
(42,57,0)
(2,45,0)
(22,24,0)
(74,35,0)
(9,34,0)
(9,76,0)
(72,2,0)
(43,18,0)
(3,9,0)
(74,22,0)
(76,69,0)
(58,37,0)
(31,18,0)
(69,76,0)
(36,75,0)
(33,67,0)
(76,18,0)
(19,63,0)
(23,18,0)
(9,65,0)
(28,35,0)
(69,23,0)
(21,29,0)
(75,74,0)
(32,6,0)
(5,52,0)
(14,74,0)
(26,6,0)
(65,66,0)
(53,24,0)
(34,9,0)
(7,23,0)
(55,29,0)
(51,63,0)
(66,65,0)
(70,18,0)
(59,4,0)
(24,22,0)
(57,54,0)
(68,48,0)
(54,52,0)
(61,69,0)
(4,73,0)
(57,30,0)
(57,75,0)
(46,23,0)
(13,69,0)
(8,18,0)
(47,52,0)
(10,9,0)
(1,50,0)
(29,21,0)
(40,37,0)
(56,62,1)
(74,22,1)
(9,34,1)
(19,76,1)
(64,50,1)
(49,52,1)
(54,52,1)
(27,11,1)
(69,61,1)
(7,37,1)
(59,65,1)
(5,47,1)
(65,9,1)
(58,6,1)
(40,58,1)
(53,25,1)
(20,65,1)
(39,54,1)
(37,40,1)
(23,46,1)
(9,50,1)
(57,30,1)
(71,14,1)
(2,72,1)
(24,53,1)
(49,20,1)
(51,19,1)
(57,42,1)
(9,3,1)
(69,23,1)
(42,44,1)
(52,5,1)
(11,22,1)
(66,39,1)
(22,24,1)
(9,76,1)
(61,13,1)
(60,62,1)
(72,63,1)
(47,2,1)
(3,34,1)
(29,55,1)
(1,10,1)
(29,22,1)
(21,29,1)
(36,41,1)
(4,59,1)
(47,63,1)
(63,51,1)
(76,69,1)
(74,71,1)
(54,57,1)
(46,7,1)
(63,76,1)
(57,75,1)
(10,66,1)
(44,49,1)
(34,64,1)
(14,21,1)
(50,1,1)
(55,27,1)
(75,74,1)
(44,52,1)
(32,26,1)
(6,32,1)
(62,54,1)
(17,76,1)
(17,56,1)
(65,66,1)
(60,17,1)
(75,36,1)
(12,23,1)
(26,75,1)
(13,12,1)
(41,74,1)
(20,4,1)
(42,54,2)
(75,74,2)
(29,22,2)
(54,52,2)
(65,66,2)
(9,54,2)
(1,54,2)
(66,54,2)
(76,69,2)
(9,76,2)
(2,63,2)
(9,50,2)
(9,34,2)
(39,54,2)
(20,54,2)
(65,9,2)
(44,54,2)
(17,62,2)
(65,54,2)
(49,54,2)
(4,65,2)
(22,24,2)
(54,54,2)
(21,29,2)
(72,63,2)
(54,57,2)
(69,23,2)
(57,54,2)
(34,54,2)
(57,75,2)
(74,22,2)
(10,54,2)
(50,54,2)
(49,52,2)
(56,62,2)
(57,30,2)
(59,65,2)
(17,76,2)
(63,76,2)
(64,54,2)
(3,54,2)
-----------------------------------
(0,count)
(1,char)
(2,exit(1)
(3,pFile)
(4,exit(1)
(5,0)
(6,i = 0)
(7,filename)
(8,for (i = 0; i < (size_t)
(9,fwrite(SENTENCE, sizeof(char)
(10,SENTENCE)
(11,stdin)
(12,pFile)
(13,filename)
(14,countCopy)
(15,pFile)
(16,)
(17,fclose(pFile)
(18,)
(19,pFile)
(20,i)
(21,fscanf(stdin, "%d", &count)
(22,count = -1)
(23,*filename = "output_bad.txt")
(24,-1)
(25,count)
(26,i)
(27,"%d")
(28,countCopy)
(29,&count)
(30,size_t)
(31,i)
(32,0)
(33,if (strlen(SENTENCE)
(34,strlen(SENTENCE)
(35,)
(36,countCopy)
(37,*pFile = NULL)
(38,filename)
(39,SENTENCE)
(40,NULL)
(41,count)
(42,count)
(43,if (pFile)
(44,i)
(45,)
(46,"output_bad.txt")
(47,i)
(48,)
(49,i++)
(50,sizeof(char)
(51,NULL)
(52,i = 0)
(53,1)
(54,i < (size_t)
(55,count)
(56,pFile)
(57,(size_t)
(58,pFile)
(59,1)
(60,RET)
(61,"w+")
(62,pFile)
(63,pFile == NULL)
(64,SENTENCE)
(65,strlen(SENTENCE)
(66,strlen(SENTENCE)
(67,)
(68,count)
(69,fopen(filename, "w+")
(70,if (pFile == NULL)
(71,count)
(72,1)
(73,)
(74,countCopy = count)
(75,count = countCopy)
(76,pFile = fopen(filename, "w+")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^