-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_53d_badSink(size_t data)
{
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
41,42
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,14,16,17,21,24,26,31,34,36,39,42,45,46,50,52,57,59,63,65,67,71,73,77,79,84,85
-----computeFrom-----
19,20
19,21
29,30
29,31
40,41
40,42
48,49
48,50
-----guardedBy-----
26,67
21,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_53d_badSink(size_t data){    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_53d_badSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_53d_badSink
size_t data
size_t
size_t
data
data
{    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(2,8,0)
(8,34,0)
(25,15,0)
(16,26,0)
(2,37,0)
(8,6,0)
(11,37,0)
(32,7,0)
(35,23,0)
(31,6,0)
(0,6,0)
(0,15,0)
(9,32,0)
(7,32,0)
(19,13,0)
(10,6,0)
(8,2,0)
(6,15,0)
(30,15,0)
(20,1,0)
(36,10,0)
(25,6,0)
(27,10,0)
(21,18,0)
(18,15,0)
(28,37,0)
(22,11,0)
(4,25,0)
(29,16,0)
(33,19,0)
(24,1,0)
(1,12,0)
(18,6,0)
(3,0,0)
(17,0,0)
(34,8,0)
(7,14,0)
(37,2,0)
(6,8,0)
(23,19,0)
(37,13,0)
(37,11,0)
(19,23,0)
(3,10,1)
(16,29,1)
(37,13,1)
(8,34,1)
(19,23,1)
(10,6,1)
(7,32,1)
(19,13,1)
(37,11,1)
(5,25,1)
(25,4,1)
(0,17,1)
(23,35,1)
(2,37,1)
(18,6,1)
(32,9,1)
(5,16,1)
(35,33,1)
(21,0,1)
(6,8,1)
(8,2,1)
(18,21,1)
(10,27,1)
(4,18,1)
(25,6,1)
(22,28,1)
(9,10,1)
(0,6,1)
(3,7,1)
(29,19,1)
(11,22,1)
(28,31,1)
(17,3,1)
(31,19,1)
(27,36,1)
(36,6,1)
(6,19,2)
(31,19,2)
(8,19,2)
(0,19,2)
(28,19,2)
(9,10,2)
(16,19,2)
(21,19,2)
(10,6,2)
(37,11,2)
(8,34,2)
(22,19,2)
(19,13,2)
(27,19,2)
(29,19,2)
(36,19,2)
(18,19,2)
(18,6,2)
(25,19,2)
(6,8,2)
(2,19,2)
(8,2,2)
(3,19,2)
(2,37,2)
(37,19,2)
(7,10,2)
(11,19,2)
(0,6,2)
(4,19,2)
(25,6,2)
(19,23,2)
(37,13,2)
(10,19,2)
(17,19,2)
(7,32,2)
(32,10,2)
-----------------------------------
(0,wcscpy(myString, HELLO_STRING)
(1,)
(2,malloc(data*sizeof(wchar_t)
(3,myString)
(4,myString)
(5,RET)
(6,myString = (wchar_t *)
(7,exit(-1)
(8,(wchar_t *)
(9,1)
(10,myString == NULL)
(11,sizeof(wchar_t)
(12,)
(13,size_t data)
(14,)
(15,)
(16,printLine("Input is less than the length of the source string")
(17,HELLO_STRING)
(18,printWLine(myString)
(19,data > wcslen(HELLO_STRING)
(20,myString)
(21,myString)
(22,wchar_t)
(23,wcslen(HELLO_STRING)
(24,if (data > wcslen(HELLO_STRING)
(25,free(myString)
(26,)
(27,NULL)
(28,data)
(29,"Input is less than the length of the source string")
(30,if (myString == NULL)
(31,myString)
(32,-1)
(33,data)
(34,wchar_t *)
(35,HELLO_STRING)
(36,myString)
(37,data*sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^