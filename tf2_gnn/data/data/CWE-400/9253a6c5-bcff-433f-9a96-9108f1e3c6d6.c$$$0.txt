-----label-----
1
-----code-----
static void badSink(int count)
{
    if(badStatic)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
14,17
14,18
14,19
14,20
14,21
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
45,48
46,47
48,49
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
72,73
72,74
73,74
73,75
74,75
77,78
79,80
80,81
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
88,89
90,91
90,92
90,93
90,94
90,95
91,92
93,94
95,96
96,97
96,98
99,100
99,101
100,101
102,103
104,105
106,107
107,108
108,109
108,110
109,110
112,113
112,114
113,114
115,116
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,6,8,12,18,20,22,26,28,29,32,35,37,38,40,44,47,49,50,54,56,61,62,67,68,71,75,76,78,81,87,89,92,94,97,98,101,103,105,110,111,114,119,121
-----computeFrom-----
42,43
42,44
52,53
52,54
65,66
65,67
69,70
69,71
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(int count){    if(badStatic)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
badSink(int count)
badSink
int count
int
count
count
{    if(badStatic)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
if(badStatic)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
badStatic
badStatic
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(46,24,0)
(0,43,0)
(22,43,0)
(33,43,0)
(10,23,0)
(51,24,0)
(26,43,0)
(17,43,0)
(29,13,0)
(24,51,0)
(27,54,0)
(16,37,0)
(55,8,0)
(42,31,0)
(31,58,0)
(37,31,0)
(58,31,0)
(51,56,0)
(49,22,0)
(19,17,0)
(41,36,0)
(43,44,0)
(56,51,0)
(24,33,0)
(24,3,0)
(4,43,0)
(24,13,0)
(54,14,0)
(61,22,0)
(3,24,0)
(37,48,0)
(20,33,0)
(1,21,0)
(53,43,0)
(40,33,0)
(52,40,0)
(5,12,0)
(9,43,0)
(28,0,0)
(25,0,0)
(32,56,0)
(30,48,0)
(39,5,0)
(18,48,0)
(11,38,0)
(60,43,0)
(8,33,0)
(34,3,0)
(23,0,0)
(2,23,0)
(33,23,0)
(47,17,0)
(31,37,0)
(45,43,0)
(23,33,0)
(6,40,0)
(31,35,0)
(21,48,0)
(13,24,0)
(50,24,0)
(8,15,0)
(18,40,1)
(24,3,1)
(51,56,1)
(7,37,1)
(27,51,1)
(52,33,1)
(0,28,1)
(37,48,1)
(31,42,1)
(5,39,1)
(51,24,1)
(8,33,1)
(55,7,1)
(22,61,1)
(23,10,1)
(2,20,1)
(8,55,1)
(40,33,1)
(25,22,1)
(34,50,1)
(46,13,1)
(32,37,1)
(42,16,1)
(31,58,1)
(16,21,1)
(16,48,1)
(49,17,1)
(18,5,1)
(61,49,1)
(54,27,1)
(59,8,1)
(24,13,1)
(29,3,1)
(30,18,1)
(47,57,1)
(48,30,1)
(13,29,1)
(3,34,1)
(1,51,1)
(23,0,1)
(40,6,1)
(20,0,1)
(1,54,1)
(31,35,1)
(33,23,1)
(39,40,1)
(10,2,1)
(21,48,1)
(59,7,1)
(21,1,1)
(6,52,1)
(56,32,1)
(17,19,1)
(19,47,1)
(50,56,1)
(28,25,1)
(24,46,1)
(37,31,1)
(24,33,1)
(59,57,1)
(29,37,2)
(24,3,2)
(37,37,2)
(55,7,2)
(48,57,2)
(61,57,2)
(33,23,2)
(24,13,2)
(30,57,2)
(54,51,2)
(56,37,2)
(7,57,2)
(5,40,2)
(42,57,2)
(18,57,2)
(23,57,2)
(8,33,2)
(31,37,2)
(2,57,2)
(27,51,2)
(3,37,2)
(22,57,2)
(39,40,2)
(21,37,2)
(46,37,2)
(0,57,2)
(8,7,2)
(50,37,2)
(37,57,2)
(19,57,2)
(25,57,2)
(20,57,2)
(51,24,2)
(37,31,2)
(16,57,2)
(6,57,2)
(47,57,2)
(1,37,2)
(40,57,2)
(23,0,2)
(28,57,2)
(21,48,2)
(10,57,2)
(17,57,2)
(31,57,2)
(16,37,2)
(13,37,2)
(40,33,2)
(34,37,2)
(24,33,2)
(31,58,2)
(49,57,2)
(51,37,2)
(33,57,2)
(52,57,2)
(51,56,2)
(24,37,2)
(37,48,2)
(31,35,2)
(42,37,2)
(32,37,2)
-----------------------------------
(0,*filename = "output_bad.txt")
(1,i)
(2,filename)
(3,sizeof(char)
(4,filename)
(5,exit(1)
(6,NULL)
(7,pFile)
(8,fclose(pFile)
(9,if (pFile == NULL)
(10,"w+")
(11,if (strlen(SENTENCE)
(12,)
(13,strlen(SENTENCE)
(14,)
(15,)
(16,i)
(17,i = 0)
(18,i)
(19,0)
(20,pFile)
(21,i++)
(22,*pFile = NULL)
(23,fopen(filename, "w+")
(24,fwrite(SENTENCE, sizeof(char)
(25,filename)
(26,pFile)
(27,1)
(28,"output_bad.txt")
(29,SENTENCE)
(30,0)
(31,(size_t)
(32,SENTENCE)
(33,pFile = fopen(filename, "w+")
(34,char)
(35,int count)
(36,)
(37,i < (size_t)
(38,)
(39,1)
(40,pFile == NULL)
(41,if(badStatic)
(42,count)
(43,)
(44,)
(45,if (pFile)
(46,pFile)
(47,i)
(48,i = 0)
(49,pFile)
(50,SENTENCE)
(51,strlen(SENTENCE)
(52,pFile)
(53,i)
(54,exit(1)
(55,pFile)
(56,strlen(SENTENCE)
(57,badStatic)
(58,size_t)
(59,RET)
(60,for (i = 0; i < (size_t)
(61,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^