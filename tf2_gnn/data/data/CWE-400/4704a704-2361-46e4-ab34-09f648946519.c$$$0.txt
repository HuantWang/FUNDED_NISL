-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
19,20
20,21
21,22
21,23
22,23
25,26
26,27
27,28
27,29
28,29
31,32
31,33
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,18,23,24,29,30,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108
-----computeFrom-----
13,14
13,15
27,28
27,29
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(17,3,0)
(47,17,0)
(40,26,0)
(37,16,0)
(29,30,0)
(14,0,0)
(42,33,0)
(1,50,0)
(26,40,0)
(15,36,0)
(22,7,0)
(22,3,0)
(3,7,0)
(0,46,0)
(37,50,0)
(15,5,0)
(17,7,0)
(5,26,0)
(15,3,0)
(12,52,0)
(4,7,0)
(51,6,0)
(49,22,0)
(31,51,0)
(6,51,0)
(24,10,0)
(41,33,0)
(38,10,0)
(44,26,0)
(50,43,0)
(13,37,0)
(26,5,0)
(26,50,0)
(48,16,0)
(10,8,0)
(18,23,0)
(11,52,0)
(33,3,0)
(3,15,0)
(26,16,0)
(20,16,0)
(5,15,0)
(6,27,0)
(16,30,0)
(2,40,0)
(33,7,0)
(36,15,0)
(21,50,0)
(23,39,0)
(25,30,0)
(52,3,0)
(19,30,0)
(37,13,0)
(32,3,0)
(28,37,0)
(35,13,0)
(23,18,1)
(51,31,1)
(9,0,1)
(52,12,1)
(37,13,1)
(12,11,1)
(32,37,1)
(20,48,1)
(37,16,1)
(33,41,1)
(28,45,1)
(41,42,1)
(26,50,1)
(17,3,1)
(13,35,1)
(40,2,1)
(15,36,1)
(45,50,1)
(50,21,1)
(26,40,1)
(1,34,1)
(16,20,1)
(9,45,1)
(15,5,1)
(17,47,1)
(49,33,1)
(37,50,1)
(26,16,1)
(22,49,1)
(2,44,1)
(11,3,1)
(34,16,1)
(35,28,1)
(33,3,1)
(5,26,1)
(45,23,1)
(42,6,1)
(47,22,1)
(44,32,1)
(21,1,1)
(52,3,1)
(0,14,1)
(18,34,1)
(6,51,1)
(3,15,1)
(42,52,1)
(31,52,1)
(22,3,1)
(9,17,1)
(14,37,1)
(14,37,2)
(37,50,2)
(23,34,2)
(52,3,2)
(50,34,2)
(6,51,2)
(28,45,2)
(26,50,2)
(5,37,2)
(33,3,2)
(5,26,2)
(31,52,2)
(6,52,2)
(26,37,2)
(37,13,2)
(1,34,2)
(41,37,2)
(49,37,2)
(37,45,2)
(12,37,2)
(22,3,2)
(15,36,2)
(18,34,2)
(0,37,2)
(47,37,2)
(17,37,2)
(51,52,2)
(40,37,2)
(13,45,2)
(42,37,2)
(52,37,2)
(21,34,2)
(3,15,2)
(3,37,2)
(32,37,2)
(2,37,2)
(15,5,2)
(33,37,2)
(26,16,2)
(44,37,2)
(11,37,2)
(15,37,2)
(35,45,2)
(37,16,2)
(26,40,2)
(22,37,2)
(17,3,2)
-----------------------------------
(0,printLine("Input is less than the length of the source string")
(1,data)
(2,char)
(3,myString = (char *)
(4,if (myString == NULL)
(5,malloc(data*sizeof(char)
(6,exit(-1)
(7,)
(8,)
(9,RET)
(10,)
(11,myString)
(12,NULL)
(13,strlen(HELLO_STRING)
(14,"Input is less than the length of the source string")
(15,(char *)
(16,data = 0)
(17,free(myString)
(18,"Benign, fixed string")
(19,if(0)
(20,0)
(21,20)
(22,printLine(myString)
(23,printLine("Benign, fixed string")
(24,myString)
(25,if(1)
(26,data*sizeof(char)
(27,)
(28,data)
(29,data)
(30,)
(31,1)
(32,myString)
(33,strcpy(myString, HELLO_STRING)
(34,0)
(35,HELLO_STRING)
(36,char *)
(37,data > strlen(HELLO_STRING)
(38,if (data > strlen(HELLO_STRING)
(39,)
(40,sizeof(char)
(41,HELLO_STRING)
(42,myString)
(43,)
(44,data)
(45,1)
(46,)
(47,myString)
(48,data)
(49,myString)
(50,data = 20)
(51,-1)
(52,myString == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^