-----label-----
1
-----code-----
int
tcp_output(struct tcpcb *tp)
{
	struct socket *so = tp->t_inpcb->inp_socket;
	long len, recwin, sendwin;
	int off, flags, error = 0;	/* Keep compiler happy */
	struct mbuf *m;
	struct ip *ip = NULL;
	struct ipovly *ipov = NULL;
	struct tcphdr *th;
	u_char opt[TCP_MAXOLEN];
	unsigned ipoptlen, optlen, hdrlen;
#ifdef IPSEC
	unsigned ipsec_optlen = 0;
#endif
	int idle, sendalot;
	int sack_rxmit, sack_bytes_rxmt;
	struct sackhole *p;
	int tso, mtu;
	struct tcpopt to;
#if 0
	int maxburst = TCP_MAXBURST;
#endif
#ifdef INET6
	struct ip6_hdr *ip6 = NULL;
	int isipv6;

	isipv6 = (tp->t_inpcb->inp_vflag & INP_IPV6) != 0;
#endif

	INP_WLOCK_ASSERT(tp->t_inpcb);

#ifdef TCP_OFFLOAD
	if (tp->t_flags & TF_TOE)
		return (tcp_offload_output(tp));
#endif

	/*
	 * Determine length of data that should be transmitted,
	 * and flags that will be used.
	 * If there is some data or critical controls (SYN, RST)
	 * to send, then transmit; otherwise, investigate further.
	 */
	idle = (tp->t_flags & TF_LASTIDLE) || (tp->snd_max == tp->snd_una);
	if (idle && ticks - tp->t_rcvtime >= tp->t_rxtcur)
		cc_after_idle(tp);
	tp->t_flags &= ~TF_LASTIDLE;
	if (idle) {
		if (tp->t_flags & TF_MORETOCOME) {
			tp->t_flags |= TF_LASTIDLE;
			idle = 0;
		}
	}
again:
	/*
	 * If we've recently taken a timeout, snd_max will be greater than
	 * snd_nxt.  There may be SACK information that allows us to avoid
	 * resending already delivered data.  Adjust snd_nxt accordingly.
	 */
	if ((tp->t_flags & TF_SACK_PERMIT) &&
	    SEQ_LT(tp->snd_nxt, tp->snd_max))
		tcp_sack_adjust(tp);
	sendalot = 0;
	tso = 0;
	mtu = 0;
	off = tp->snd_nxt - tp->snd_una;
	sendwin = min(tp->snd_wnd, tp->snd_cwnd);

	flags = tcp_outflags[tp->t_state];
	/*
	 * Send any SACK-generated retransmissions.  If we're explicitly trying
	 * to send out new data (when sendalot is 1), bypass this function.
	 * If we retransmit in fast recovery mode, decrement snd_cwnd, since
	 * we're replacing a (future) new transmission with a retransmission
	 * now, and we previously incremented snd_cwnd in tcp_input().
	 */
	/*
	 * Still in sack recovery , reset rxmit flag to zero.
	 */
	sack_rxmit = 0;
	sack_bytes_rxmt = 0;
	len = 0;
	p = NULL;
	if ((tp->t_flags & TF_SACK_PERMIT) && IN_FASTRECOVERY(tp->t_flags) &&
	    (p = tcp_sack_output(tp, &sack_bytes_rxmt))) {
		long cwin;

		cwin = min(tp->snd_wnd, tp->snd_cwnd) - sack_bytes_rxmt;
		if (cwin < 0)
			cwin = 0;
		/* Do not retransmit SACK segments beyond snd_recover */
		if (SEQ_GT(p->end, tp->snd_recover)) {
			/*
			 * (At least) part of sack hole extends beyond
			 * snd_recover. Check to see if we can rexmit data
			 * for this hole.
			 */
			if (SEQ_GEQ(p->rxmit, tp->snd_recover)) {
				/*
				 * Can't rexmit any more data for this hole.
				 * That data will be rexmitted in the next
				 * sack recovery episode, when snd_recover
				 * moves past p->rxmit.
				 */
				p = NULL;
				goto after_sack_rexmit;
			} else
				/* Can rexmit part of the current hole */
				len = ((long)ulmin(cwin,
						   tp->snd_recover - p->rxmit));
		} else
			len = ((long)ulmin(cwin, p->end - p->rxmit));
		off = p->rxmit - tp->snd_una;
		KASSERT(off >= 0,("%s: sack block to the left of una : %d",
		    __func__, off));
		if (len > 0) {
			sack_rxmit = 1;
			sendalot = 1;
			TCPSTAT_INC(tcps_sack_rexmits);
			TCPSTAT_ADD(tcps_sack_rexmit_bytes,
			    min(len, tp->t_maxseg));
		}
	}
after_sack_rexmit:
	/*
	 * Get standard flags, and add SYN or FIN if requested by 'hidden'
	 * state flags.
	 */
	if (tp->t_flags & TF_NEEDFIN)
		flags |= TH_FIN;
	if (tp->t_flags & TF_NEEDSYN)
		flags |= TH_SYN;

	SOCKBUF_LOCK(&so->so_snd);
	/*
	 * If in persist timeout with window of 0, send 1 byte.
	 * Otherwise, if window is small but nonzero
	 * and timer expired, we will send what we can
	 * and go to transmit state.
	 */
	if (tp->t_flags & TF_FORCEDATA) {
		if (sendwin == 0) {
			/*
			 * If we still have some data to send, then
			 * clear the FIN bit.  Usually this would
			 * happen below when it realizes that we
			 * aren't sending all the data.  However,
			 * if we have exactly 1 byte of unsent data,
			 * then it won't clear the FIN bit below,
			 * and if we are in persist state, we wind
			 * up sending the packet without recording
			 * that we sent the FIN bit.
			 *
			 * We can't just blindly clear the FIN bit,
			 * because if we don't have any more data
			 * to send then the probe will be the FIN
			 * itself.
			 */
			if (off < so->so_snd.sb_cc)
				flags &= ~TH_FIN;
			sendwin = 1;
		} else {
			tcp_timer_activate(tp, TT_PERSIST, 0);
			tp->t_rxtshift = 0;
		}
	}

	/*
	 * If snd_nxt == snd_max and we have transmitted a FIN, the
	 * offset will be > 0 even if so_snd.sb_cc is 0, resulting in
	 * a negative length.  This can also occur when TCP opens up
	 * its congestion window while receiving additional duplicate
	 * acks after fast-retransmit because TCP will reset snd_nxt
	 * to snd_max after the fast-retransmit.
	 *
	 * In the normal retransmit-FIN-only case, however, snd_nxt will
	 * be set to snd_una, the offset will be 0, and the length may
	 * wind up 0.
	 *
	 * If sack_rxmit is true we are retransmitting from the scoreboard
	 * in which case len is already set.
	 */
	if (sack_rxmit == 0) {
		if (sack_bytes_rxmt == 0)
			len = ((long)ulmin(so->so_snd.sb_cc, sendwin) - off);
		else {
			long cwin;

                        /*
			 * We are inside of a SACK recovery episode and are
			 * sending new data, having retransmitted all the
			 * data possible in the scoreboard.
			 */
			len = ((long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)
			       - off);
			/*
			 * Don't remove this (len > 0) check !
			 * We explicitly check for len > 0 here (although it
			 * isn't really necessary), to work around a gcc
			 * optimization issue - to force gcc to compute
			 * len above. Without this check, the computation
			 * of len is bungled by the optimizer.
			 */
			if (len > 0) {
				cwin = tp->snd_cwnd -
					(tp->snd_nxt - tp->sack_newdata) -
					sack_bytes_rxmt;
				if (cwin < 0)
					cwin = 0;
				len = lmin(len, cwin);
			}
		}
	}

	/*
	 * Lop off SYN bit if it has already been sent.  However, if this
	 * is SYN-SENT state and if segment contains data and if we don't
	 * know that foreign host supports TAO, suppress sending segment.
	 */
	if ((flags & TH_SYN) && SEQ_GT(tp->snd_nxt, tp->snd_una)) {
		if (tp->t_state != TCPS_SYN_RECEIVED)
			flags &= ~TH_SYN;
		off--, len++;
	}

	/*
	 * Be careful not to send data and/or FIN on SYN segments.
	 * This measure is needed to prevent interoperability problems
	 * with not fully conformant TCP implementations.
	 */
	if ((flags & TH_SYN) && (tp->t_flags & TF_NOOPT)) {
		len = 0;
		flags &= ~TH_FIN;
	}

	if (len < 0) {
		/*
		 * If FIN has been sent but not acked,
		 * but we haven't been called to retransmit,
		 * len will be < 0.  Otherwise, window shrank
		 * after we sent into it.  If window shrank to 0,
		 * cancel pending retransmit, pull snd_nxt back
		 * to (closed) window, and set the persist timer
		 * if it isn't already going.  If the window didn't
		 * close completely, just wait for an ACK.
		 */
		len = 0;
		if (sendwin == 0) {
			tcp_timer_activate(tp, TT_REXMT, 0);
			tp->t_rxtshift = 0;
			tp->snd_nxt = tp->snd_una;
			if (!tcp_timer_active(tp, TT_PERSIST))
				tcp_setpersist(tp);
		}
	}

	/* len will be >= 0 after this point. */
	KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__));

	/*
	 * Automatic sizing of send socket buffer.  Often the send buffer
	 * size is not optimally adjusted to the actual network conditions
	 * at hand (delay bandwidth product).  Setting the buffer size too
	 * small limits throughput on links with high bandwidth and high
	 * delay (eg. trans-continental/oceanic links).  Setting the
	 * buffer size too big consumes too much real kernel memory,
	 * especially with many connections on busy servers.
	 *
	 * The criteria to step up the send buffer one notch are:
	 *  1. receive window of remote host is larger than send buffer
	 *     (with a fudge factor of 5/4th);
	 *  2. send buffer is filled to 7/8th with data (so we actually
	 *     have data to make use of it);
	 *  3. send buffer fill has not hit maximal automatic size;
	 *  4. our send window (slow start and cogestion controlled) is
	 *     larger than sent but unacknowledged data in send buffer.
	 *
	 * The remote host receive window scaling factor may limit the
	 * growing of the send buffer before it reaches its allowed
	 * maximum.
	 *
	 * It scales directly with slow start or congestion window
	 * and does at most one step per received ACK.  This fast
	 * scaling has the drawback of growing the send buffer beyond
	 * what is strictly necessary to make full use of a given
	 * delay*bandwith product.  However testing has shown this not
	 * to be much of an problem.  At worst we are trading wasting
	 * of available bandwith (the non-use of it) for wasting some
	 * socket buffer memory.
	 *
	 * TODO: Shrink send buffer during idle periods together
	 * with congestion window.  Requires another timer.  Has to
	 * wait for upcoming tcp timer rewrite.
	 */
	if (V_tcp_do_autosndbuf && so->so_snd.sb_flags & SB_AUTOSIZE) {
		if ((tp->snd_wnd / 4 * 5) >= so->so_snd.sb_hiwat &&
		    so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7) &&
		    so->so_snd.sb_cc < V_tcp_autosndbuf_max &&
		    sendwin >= (so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una))) {
			if (!sbreserve_locked(&so->so_snd,
			    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,
			     V_tcp_autosndbuf_max), so, curthread))
				so->so_snd.sb_flags &= ~SB_AUTOSIZE;
		}
	}

	/*
	 * Decide if we can use TCP Segmentation Offloading (if supported by
	 * hardware).
	 *
	 * TSO may only be used if we are in a pure bulk sending state.  The
	 * presence of TCP-MD5, SACK retransmits, SACK advertizements and
	 * IP options prevent using TSO.  With TSO the TCP header is the same
	 * (except for the sequence number) for all generated packets.  This
	 * makes it impossible to transmit any options which vary per generated
	 * segment or packet.
	 */
#ifdef IPSEC
	/*
	 * Pre-calculate here as we save another lookup into the darknesses
	 * of IPsec that way and can actually decide if TSO is ok.
	 */
	ipsec_optlen = ipsec_hdrsiz_tcp(tp);
#endif
	if ((tp->t_flags & TF_TSO) && V_tcp_do_tso && len > tp->t_maxseg &&
	    ((tp->t_flags & TF_SIGNATURE) == 0) &&
	    tp->rcv_numsacks == 0 && sack_rxmit == 0 &&
#ifdef IPSEC
	    ipsec_optlen == 0 &&
#endif
	    tp->t_inpcb->inp_options == NULL &&
	    tp->t_inpcb->in6p_options == NULL)
		tso = 1;

	if (sack_rxmit) {
		if (SEQ_LT(p->rxmit + len, tp->snd_una + so->so_snd.sb_cc))
			flags &= ~TH_FIN;
	} else {
		if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
			flags &= ~TH_FIN;
	}

	recwin = sbspace(&so->so_rcv);

	/*
	 * Sender silly window avoidance.   We transmit under the following
	 * conditions when len is non-zero:
	 *
	 *	- We have a full segment (or more with TSO)
	 *	- This is the last buffer in a write()/send() and we are
	 *	  either idle or running NODELAY
	 *	- we've timed out (e.g. persist timer)
	 *	- we have more then 1/2 the maximum send window's worth of
	 *	  data (receiver may be limited the window size)
	 *	- we need to retransmit
	 */
	if (len) {
		if (len >= tp->t_maxseg)
			goto send;
		/*
		 * NOTE! on localhost connections an 'ack' from the remote
		 * end may occur synchronously with the output and cause
		 * us to flush a buffer queued with moretocome.  XXX
		 *
		 * note: the len + off check is almost certainly unnecessary.
		 */
		if (!(tp->t_flags & TF_MORETOCOME) &&	/* normal case */
		    (idle || (tp->t_flags & TF_NODELAY)) &&
		    len + off >= so->so_snd.sb_cc &&
		    (tp->t_flags & TF_NOPUSH) == 0) {
			goto send;
		}
		if (tp->t_flags & TF_FORCEDATA)		/* typ. timeout case */
			goto send;
		if (len >= tp->max_sndwnd / 2 && tp->max_sndwnd > 0)
			goto send;
		if (SEQ_LT(tp->snd_nxt, tp->snd_max))	/* retransmit case */
			goto send;
		if (sack_rxmit)
			goto send;
	}

	/*
	 * Sending of standalone window updates.
	 *
	 * Window updates are important when we close our window due to a
	 * full socket buffer and are opening it again after the application
	 * reads data from it.  Once the window has opened again and the
	 * remote end starts to send again the ACK clock takes over and
	 * provides the most current window information.
	 *
	 * We must avoid the silly window syndrome whereas every read
	 * from the receive buffer, no matter how small, causes a window
	 * update to be sent.  We also should avoid sending a flurry of
	 * window updates when the socket buffer had queued a lot of data
	 * and the application is doing small reads.
	 *
	 * Prevent a flurry of pointless window updates by only sending
	 * an update when we can increase the advertized window by more
	 * than 1/4th of the socket buffer capacity.  When the buffer is
	 * getting full or is very small be more aggressive and send an
	 * update whenever we can increase by two mss sized segments.
	 * In all other situations the ACK's to new incoming data will
	 * carry further window increases.
	 *
	 * Don't send an independent window update if a delayed
	 * ACK is pending (it will get piggy-backed on it) or the
	 * remote side already has done a half-close and won't send
	 * more data.  Skip this if the connection is in T/TCP
	 * half-open state.
	 */
	if (recwin > 0 && !(tp->t_flags & TF_NEEDSYN) &&
	    !(tp->t_flags & TF_DELACK) &&
	    !TCPS_HAVERCVDFIN(tp->t_state)) {
		/*
		 * "adv" is the amount we could increase the window,
		 * taking into account that we are limited by
		 * TCP_MAXWIN << tp->rcv_scale.
		 */
		long adv;
		int oldwin;

		adv = min(recwin, (long)TCP_MAXWIN << tp->rcv_scale);
		if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt)) {
			oldwin = (tp->rcv_adv - tp->rcv_nxt);
			adv -= oldwin;
		} else
			oldwin = 0;

		/*
		 * If the new window size ends up being the same as the old
		 * size when it is scaled, then don't force a window update.
		 */
		if (oldwin >> tp->rcv_scale == (adv + oldwin) >> tp->rcv_scale)
			goto dontupdate;

		if (adv >= (long)(2 * tp->t_maxseg) &&
		    (adv >= (long)(so->so_rcv.sb_hiwat / 4) ||
		     recwin <= (long)(so->so_rcv.sb_hiwat / 8) ||
		     so->so_rcv.sb_hiwat <= 8 * tp->t_maxseg))
			goto send;
	}
dontupdate:

	/*
	 * Send if we owe the peer an ACK, RST, SYN, or urgent data.  ACKNOW
	 * is also a catch-all for the retransmit timer timeout case.
	 */
	if (tp->t_flags & TF_ACKNOW)
		goto send;
	if ((flags & TH_RST) ||
	    ((flags & TH_SYN) && (tp->t_flags & TF_NEEDSYN) == 0))
		goto send;
	if (SEQ_GT(tp->snd_up, tp->snd_una))
		goto send;
	/*
	 * If our state indicates that FIN should be sent
	 * and we have not yet done so, then we need to send.
	 */
	if (flags & TH_FIN &&
	    ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una))
		goto send;
	/*
	 * In SACK, it is possible for tcp_output to fail to send a segment
	 * after the retransmission timer has been turned off.  Make sure
	 * that the retransmission timer is set.
	 */
	if ((tp->t_flags & TF_SACK_PERMIT) &&
	    SEQ_GT(tp->snd_max, tp->snd_una) &&
	    !tcp_timer_active(tp, TT_REXMT) &&
	    !tcp_timer_active(tp, TT_PERSIST)) {
		tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);
		goto just_return;
	}
	/*
	 * TCP window updates are not reliable, rather a polling protocol
	 * using ``persist'' packets is used to insure receipt of window
	 * updates.  The three ``states'' for the output side are:
	 *	idle			not doing retransmits or persists
	 *	persisting		to move a small or zero window
	 *	(re)transmitting	and thereby not persisting
	 *
	 * tcp_timer_active(tp, TT_PERSIST)
	 *	is true when we are in persist state.
	 * (tp->t_flags & TF_FORCEDATA)
	 *	is set when we are called to send a persist packet.
	 * tcp_timer_active(tp, TT_REXMT)
	 *	is set when we are retransmitting
	 * The output side is idle when both timers are zero.
	 *
	 * If send window is too small, there is data to transmit, and no
	 * retransmit or persist is pending, then go to persist state.
	 * If nothing happens soon, send when timer expires:
	 * if window is nonzero, transmit what we can,
	 * otherwise force out a byte.
	 */
	if (so->so_snd.sb_cc && !tcp_timer_active(tp, TT_REXMT) &&
	    !tcp_timer_active(tp, TT_PERSIST)) {
		tp->t_rxtshift = 0;
		tcp_setpersist(tp);
	}

	/*
	 * No reason to send a segment, just return.
	 */
just_return:
	SOCKBUF_UNLOCK(&so->so_snd);
	return (0);

send:
	SOCKBUF_LOCK_ASSERT(&so->so_snd);
	if (len > 0) {
		if (len >= tp->t_maxseg)
			tp->t_flags2 |= TF2_PLPMTU_MAXSEGSNT;
		else
			tp->t_flags2 &= ~TF2_PLPMTU_MAXSEGSNT;
	}
	/*
	 * Before ESTABLISHED, force sending of initial options
	 * unless TCP set not to do any options.
	 * NOTE: we assume that the IP/TCP header plus TCP options
	 * always fit in a single mbuf, leaving room for a maximum
	 * link header, i.e.
	 *	max_linkhdr + sizeof (struct tcpiphdr) + optlen <= MCLBYTES
	 */
	optlen = 0;
#ifdef INET6
	if (isipv6)
		hdrlen = sizeof (struct ip6_hdr) + sizeof (struct tcphdr);
	else
#endif
		hdrlen = sizeof (struct tcpiphdr);

	/*
	 * Compute options for segment.
	 * We only have to care about SYN and established connection
	 * segments.  Options for SYN-ACK segments are handled in TCP
	 * syncache.
	 */
	if ((tp->t_flags & TF_NOOPT) == 0) {
		to.to_flags = 0;
		/* Maximum segment size. */
		if (flags & TH_SYN) {
			tp->snd_nxt = tp->iss;
			to.to_mss = tcp_mssopt(&tp->t_inpcb->inp_inc);
			to.to_flags |= TOF_MSS;
		}
		/* Window scaling. */
		if ((flags & TH_SYN) && (tp->t_flags & TF_REQ_SCALE)) {
			to.to_wscale = tp->request_r_scale;
			to.to_flags |= TOF_SCALE;
		}
		/* Timestamps. */
		if ((tp->t_flags & TF_RCVD_TSTMP) ||
		    ((flags & TH_SYN) && (tp->t_flags & TF_REQ_TSTMP))) {
			to.to_tsval = tcp_ts_getticks() + tp->ts_offset;
			to.to_tsecr = tp->ts_recent;
			to.to_flags |= TOF_TS;
			/* Set receive buffer autosizing timestamp. */
			if (tp->rfbuf_ts == 0 &&
			    (so->so_rcv.sb_flags & SB_AUTOSIZE))
				tp->rfbuf_ts = tcp_ts_getticks();
		}
		/* Selective ACK's. */
		if (tp->t_flags & TF_SACK_PERMIT) {
			if (flags & TH_SYN)
				to.to_flags |= TOF_SACKPERM;
			else if (TCPS_HAVEESTABLISHED(tp->t_state) &&
			    (tp->t_flags & TF_SACK_PERMIT) &&
			    tp->rcv_numsacks > 0) {
				to.to_flags |= TOF_SACK;
				to.to_nsacks = tp->rcv_numsacks;
				to.to_sacks = (u_char *)tp->sackblks;
			}
		}
#ifdef TCP_SIGNATURE
		/* TCP-MD5 (RFC2385). */
		if (tp->t_flags & TF_SIGNATURE)
			to.to_flags |= TOF_SIGNATURE;
#endif /* TCP_SIGNATURE */

		/* Processing the options. */
		hdrlen += optlen = tcp_addoptions(&to, opt);
	}

#ifdef INET6
	if (isipv6)
		ipoptlen = ip6_optlen(tp->t_inpcb);
	else
#endif
	if (tp->t_inpcb->inp_options)
		ipoptlen = tp->t_inpcb->inp_options->m_len -
				offsetof(struct ipoption, ipopt_list);
	else
		ipoptlen = 0;
#ifdef IPSEC
	ipoptlen += ipsec_optlen;
#endif

	/*
	 * Adjust data length if insertion of options will
	 * bump the packet length beyond the t_maxopd length.
	 * Clear the FIN bit because we cut off the tail of
	 * the segment.
	 */
	if (len + optlen + ipoptlen > tp->t_maxopd) {
		flags &= ~TH_FIN;

		if (tso) {
			u_int if_hw_tsomax;
			u_int if_hw_tsomaxsegcount;
			u_int if_hw_tsomaxsegsize;
			struct mbuf *mb;
			u_int moff;
			int max_len;

			/* extract TSO information */
			if_hw_tsomax = tp->t_tsomax;
			if_hw_tsomaxsegcount = tp->t_tsomaxsegcount;
			if_hw_tsomaxsegsize = tp->t_tsomaxsegsize;

			/*
			 * Limit a TSO burst to prevent it from
			 * overflowing or exceeding the maximum length
			 * allowed by the network interface:
			 */
			KASSERT(ipoptlen == 0,
			    ("%s: TSO can't do IP options", __func__));

			/*
			 * Check if we should limit by maximum payload
			 * length:
			 */
			if (if_hw_tsomax != 0) {
				/* compute maximum TSO length */
				max_len = (if_hw_tsomax - hdrlen);
				if (max_len <= 0) {
					len = 0;
				} else if (len > max_len) {
					sendalot = 1;
					len = max_len;
				}
			}

			/*
			 * Check if we should limit by maximum segment
			 * size and count:
			 */
			if (if_hw_tsomaxsegcount != 0 &&
			    if_hw_tsomaxsegsize != 0) {
				max_len = 0;
				mb = sbsndmbuf(&so->so_snd, off, &moff);

				while (mb != NULL && max_len < len) {
					u_int mlen;
					u_int frags;

					/*
					 * Get length of mbuf fragment
					 * and how many hardware frags,
					 * rounded up, it would use:
					 */
					mlen = (mb->m_len - moff);
					frags = howmany(mlen,
					    if_hw_tsomaxsegsize);

					/* Handle special case: Zero Length Mbuf */
					if (frags == 0)
						frags = 1;

					/*
					 * Check if the fragment limit
					 * will be reached or exceeded:
					 */
					if (frags >= if_hw_tsomaxsegcount) {
						max_len += min(mlen,
						    if_hw_tsomaxsegcount *
						    if_hw_tsomaxsegsize);
						break;
					}
					max_len += mlen;
					if_hw_tsomaxsegcount -= frags;
					moff = 0;
					mb = mb->m_next;
				}
				if (max_len <= 0) {
					len = 0;
				} else if (len > max_len) {
					sendalot = 1;
					len = max_len;
				}
			}

			/*
			 * Prevent the last segment from being
			 * fractional unless the send sockbuf can be
			 * emptied:
			 */
			max_len = (tp->t_maxopd - optlen);
			if ((off + len) < so->so_snd.sb_cc) {
				moff = len % max_len;
				if (moff != 0) {
					len -= moff;
					sendalot = 1;
				}
			}

			/*
			 * In case there are too many small fragments
			 * don't use TSO:
			 */
			if (len <= max_len) {
				len = max_len;
				sendalot = 1;
				tso = 0;
			}

			/*
			 * Send the FIN in a separate segment
			 * after the bulk sending is done.
			 * We don't trust the TSO implementations
			 * to clear the FIN flag on all but the
			 * last segment.
			 */
			if (tp->t_flags & TF_NEEDFIN)
				sendalot = 1;

		} else {
			len = tp->t_maxopd - optlen - ipoptlen;
			sendalot = 1;
		}
	} else
		tso = 0;

	KASSERT(len + hdrlen + ipoptlen <= IP_MAXPACKET,
	    ("%s: len > IP_MAXPACKET", __func__));

/*#ifdef DIAGNOSTIC*/
#ifdef INET6
	if (max_linkhdr + hdrlen > MCLBYTES)
#else
	if (max_linkhdr + hdrlen > MHLEN)
#endif
		panic("tcphdr too big");
/*#endif*/

	/*
	 * This KASSERT is here to catch edge cases at a well defined place.
	 * Before, those had triggered (random) panic conditions further down.
	 */
	KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__));

	/*
	 * Grab a header mbuf, attaching a copy of data to
	 * be transmitted, and initialize the header from
	 * the template for sends on this connection.
	 */
	if (len) {
		struct mbuf *mb;
		u_int moff;

		if ((tp->t_flags & TF_FORCEDATA) && len == 1)
			TCPSTAT_INC(tcps_sndprobe);
		else if (SEQ_LT(tp->snd_nxt, tp->snd_max) || sack_rxmit) {
			tp->t_sndrexmitpack++;
			TCPSTAT_INC(tcps_sndrexmitpack);
			TCPSTAT_ADD(tcps_sndrexmitbyte, len);
		} else {
			TCPSTAT_INC(tcps_sndpack);
			TCPSTAT_ADD(tcps_sndbyte, len);
		}
#ifdef INET6
		if (MHLEN < hdrlen + max_linkhdr)
			m = m_getcl(M_NOWAIT, MT_DATA, M_PKTHDR);
		else
#endif
			m = m_gethdr(M_NOWAIT, MT_DATA);

		if (m == NULL) {
			SOCKBUF_UNLOCK(&so->so_snd);
			error = ENOBUFS;
			sack_rxmit = 0;
			goto out;
		}

		m->m_data += max_linkhdr;
		m->m_len = hdrlen;

		/*
		 * Start the m_copy functions from the closest mbuf
		 * to the offset in the socket buffer chain.
		 */
		mb = sbsndptr(&so->so_snd, off, len, &moff);

		if (len <= MHLEN - hdrlen - max_linkhdr) {
			m_copydata(mb, moff, (int)len,
			    mtod(m, caddr_t) + hdrlen);
			m->m_len += len;
		} else {
			m->m_next = m_copy(mb, moff, (int)len);
			if (m->m_next == NULL) {
				SOCKBUF_UNLOCK(&so->so_snd);
				(void) m_free(m);
				error = ENOBUFS;
				sack_rxmit = 0;
				goto out;
			}
		}

		/*
		 * If we're sending everything we've got, set PUSH.
		 * (This will keep happy those implementations which only
		 * give data to the user when a buffer fills or
		 * a PUSH comes in.)
		 */
		if (off + len == so->so_snd.sb_cc)
			flags |= TH_PUSH;
		SOCKBUF_UNLOCK(&so->so_snd);
	} else {
		SOCKBUF_UNLOCK(&so->so_snd);
		if (tp->t_flags & TF_ACKNOW)
			TCPSTAT_INC(tcps_sndacks);
		else if (flags & (TH_SYN|TH_FIN|TH_RST))
			TCPSTAT_INC(tcps_sndctrl);
		else if (SEQ_GT(tp->snd_up, tp->snd_una))
			TCPSTAT_INC(tcps_sndurg);
		else
			TCPSTAT_INC(tcps_sndwinup);

		m = m_gethdr(M_NOWAIT, MT_DATA);
		if (m == NULL) {
			error = ENOBUFS;
			sack_rxmit = 0;
			goto out;
		}
#ifdef INET6
		if (isipv6 && (MHLEN < hdrlen + max_linkhdr) &&
		    MHLEN >= hdrlen) {
			MH_ALIGN(m, hdrlen);
		} else
#endif
		m->m_data += max_linkhdr;
		m->m_len = hdrlen;
	}
	SOCKBUF_UNLOCK_ASSERT(&so->so_snd);
	m->m_pkthdr.rcvif = (struct ifnet *)0;
#ifdef MAC
	mac_inpcb_create_mbuf(tp->t_inpcb, m);
#endif
#ifdef INET6
	if (isipv6) {
		ip6 = mtod(m, struct ip6_hdr *);
		th = (struct tcphdr *)(ip6 + 1);
		tcpip_fillheaders(tp->t_inpcb, ip6, th);
	} else
#endif /* INET6 */
	{
		ip = mtod(m, struct ip *);
		ipov = (struct ipovly *)ip;
		th = (struct tcphdr *)(ip + 1);
		tcpip_fillheaders(tp->t_inpcb, ip, th);
	}

	/*
	 * Fill in fields, remembering maximum advertised
	 * window for use in delaying messages about window sizes.
	 * If resending a FIN, be sure not to use a new sequence number.
	 */
	if (flags & TH_FIN && tp->t_flags & TF_SENTFIN &&
	    tp->snd_nxt == tp->snd_max)
		tp->snd_nxt--;
	/*
	 * If we are starting a connection, send ECN setup
	 * SYN packet. If we are on a retransmit, we may
	 * resend those bits a number of times as per
	 * RFC 3168.
	 */
	if (tp->t_state == TCPS_SYN_SENT && V_tcp_do_ecn) {
		if (tp->t_rxtshift >= 1) {
			if (tp->t_rxtshift <= V_tcp_ecn_maxretries)
				flags |= TH_ECE|TH_CWR;
		} else
			flags |= TH_ECE|TH_CWR;
	}

	if (tp->t_state == TCPS_ESTABLISHED &&
	    (tp->t_flags & TF_ECN_PERMIT)) {
		/*
		 * If the peer has ECN, mark data packets with
		 * ECN capable transmission (ECT).
		 * Ignore pure ack packets, retransmissions and window probes.
		 */
		if (len > 0 && SEQ_GEQ(tp->snd_nxt, tp->snd_max) &&
		    !((tp->t_flags & TF_FORCEDATA) && len == 1)) {
#ifdef INET6
			if (isipv6)
				ip6->ip6_flow |= htonl(IPTOS_ECN_ECT0 << 20);
			else
#endif
				ip->ip_tos |= IPTOS_ECN_ECT0;
			TCPSTAT_INC(tcps_ecn_ect0);
		}

		/*
		 * Reply with proper ECN notifications.
		 */
		if (tp->t_flags & TF_ECN_SND_CWR) {
			flags |= TH_CWR;
			tp->t_flags &= ~TF_ECN_SND_CWR;
		}
		if (tp->t_flags & TF_ECN_SND_ECE)
			flags |= TH_ECE;
	}

	/*
	 * If we are doing retransmissions, then snd_nxt will
	 * not reflect the first unsent octet.  For ACK only
	 * packets, we do not want the sequence number of the
	 * retransmitted packet, we want the sequence number
	 * of the next unsent octet.  So, if there is no data
	 * (and no SYN or FIN), use snd_max instead of snd_nxt
	 * when filling in ti_seq.  But if we are in persist
	 * state, snd_max might reflect one byte beyond the
	 * right edge of the window, so use snd_nxt in that
	 * case, since we know we aren't doing a retransmission.
	 * (retransmit and persist are mutually exclusive...)
	 */
	if (sack_rxmit == 0) {
		if (len || (flags & (TH_SYN|TH_FIN)) ||
		    tcp_timer_active(tp, TT_PERSIST))
			th->th_seq = htonl(tp->snd_nxt);
		else
			th->th_seq = htonl(tp->snd_max);
	} else {
		th->th_seq = htonl(p->rxmit);
		p->rxmit += len;
		tp->sackhint.sack_bytes_rexmit += len;
	}
	th->th_ack = htonl(tp->rcv_nxt);
	if (optlen) {
		bcopy(opt, th + 1, optlen);
		th->th_off = (sizeof (struct tcphdr) + optlen) >> 2;
	}
	th->th_flags = flags;
	/*
	 * Calculate receive window.  Don't shrink window,
	 * but avoid silly window syndrome.
	 */
	if (recwin < (long)(so->so_rcv.sb_hiwat / 4) &&
	    recwin < (long)tp->t_maxseg)
		recwin = 0;
	if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt) &&
	    recwin < (long)(tp->rcv_adv - tp->rcv_nxt))
		recwin = (long)(tp->rcv_adv - tp->rcv_nxt);
	if (recwin > (long)TCP_MAXWIN << tp->rcv_scale)
		recwin = (long)TCP_MAXWIN << tp->rcv_scale;

	/*
	 * According to RFC1323 the window field in a SYN (i.e., a <SYN>
	 * or <SYN,ACK>) segment itself is never scaled.  The <SYN,ACK>
	 * case is handled in syncache.
	 */
	if (flags & TH_SYN)
		th->th_win = htons((u_short)
				(min(sbspace(&so->so_rcv), TCP_MAXWIN)));
	else
		th->th_win = htons((u_short)(recwin >> tp->rcv_scale));

	/*
	 * Adjust the RXWIN0SENT flag - indicate that we have advertised
	 * a 0 window.  This may cause the remote transmitter to stall.  This
	 * flag tells soreceive() to disable delayed acknowledgements when
	 * draining the buffer.  This can occur if the receiver is attempting
	 * to read more data than can be buffered prior to transmitting on
	 * the connection.
	 */
	if (th->th_win == 0) {
		tp->t_sndzerowin++;
		tp->t_flags |= TF_RXWIN0SENT;
	} else
		tp->t_flags &= ~TF_RXWIN0SENT;
	if (SEQ_GT(tp->snd_up, tp->snd_nxt)) {
		th->th_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));
		th->th_flags |= TH_URG;
	} else
		/*
		 * If no urgent pointer to send, then we pull
		 * the urgent pointer to the left edge of the send window
		 * so that it doesn't drift into the send window on sequence
		 * number wraparound.
		 */
		tp->snd_up = tp->snd_una;		/* drag it along */

#ifdef TCP_SIGNATURE
	if (tp->t_flags & TF_SIGNATURE) {
		int sigoff = to.to_signature - opt;
		tcp_signature_compute(m, 0, len, optlen,
		    (u_char *)(th + 1) + sigoff, IPSEC_DIR_OUTBOUND);
	}
#endif

	/*
	 * Put TCP length in extended header, and then
	 * checksum extended header and data.
	 */
	m->m_pkthdr.len = hdrlen + len; /* in6_cksum() need this */
	m->m_pkthdr.csum_data = offsetof(struct tcphdr, th_sum);
#ifdef INET6
	if (isipv6) {
		/*
		 * ip6_plen is not need to be filled now, and will be filled
		 * in ip6_output.
		 */
		m->m_pkthdr.csum_flags = CSUM_TCP_IPV6;
		th->th_sum = in6_cksum_pseudo(ip6, sizeof(struct tcphdr) +
		    optlen + len, IPPROTO_TCP, 0);
	}
#endif
#if defined(INET6) && defined(INET)
	else
#endif
#ifdef INET
	{
		m->m_pkthdr.csum_flags = CSUM_TCP;
		th->th_sum = in_pseudo(ip->ip_src.s_addr, ip->ip_dst.s_addr,
		    htons(sizeof(struct tcphdr) + IPPROTO_TCP + len + optlen));

		/* IP version must be set here for ipv4/ipv6 checking later */
		KASSERT(ip->ip_v == IPVERSION,
		    ("%s: IP version incorrect: %d", __func__, ip->ip_v));
	}
#endif

	/*
	 * Enable TSO and specify the size of the segments.
	 * The TCP pseudo header checksum is always provided.
	 * XXX: Fixme: This is currently not the case for IPv6.
	 */
	if (tso) {
		KASSERT(len > tp->t_maxopd - optlen,
		    ("%s: len <= tso_segsz", __func__));
		m->m_pkthdr.csum_flags |= CSUM_TSO;
		m->m_pkthdr.tso_segsz = tp->t_maxopd - optlen;
	}

#ifdef IPSEC
	KASSERT(len + hdrlen + ipoptlen - ipsec_optlen == m_length(m, NULL),
	    ("%s: mbuf chain shorter than expected: %ld + %u + %u - %u != %u",
	    __func__, len, hdrlen, ipoptlen, ipsec_optlen, m_length(m, NULL)));
#else
	KASSERT(len + hdrlen + ipoptlen == m_length(m, NULL),
	    ("%s: mbuf chain shorter than expected: %ld + %u + %u != %u",
	    __func__, len, hdrlen, ipoptlen, m_length(m, NULL)));
#endif

	/* Run HHOOK_TCP_ESTABLISHED_OUT helper hooks. */
	hhook_run_tcp_est_out(tp, th, &to, len, tso);

#ifdef TCPDEBUG
	/*
	 * Trace.
	 */
	if (so->so_options & SO_DEBUG) {
		u_short save = 0;
#ifdef INET6
		if (!isipv6)
#endif
		{
			save = ipov->ih_len;
			ipov->ih_len = htons(m->m_pkthdr.len /* - hdrlen + (th->th_off << 2) */);
		}
		tcp_trace(TA_OUTPUT, tp->t_state, tp, mtod(m, void *), th, 0);
#ifdef INET6
		if (!isipv6)
#endif
		ipov->ih_len = save;
	}
#endif /* TCPDEBUG */

	/*
	 * Fill in IP length and desired time to live and
	 * send to IP level.  There should be a better way
	 * to handle ttl and tos; we could keep them in
	 * the template, but need a way to checksum without them.
	 */
	/*
	 * m->m_pkthdr.len should have been set before cksum calcuration,
	 * because in6_cksum() need it.
	 */
#ifdef INET6
	if (isipv6) {
		struct route_in6 ro;

		bzero(&ro, sizeof(ro));
		/*
		 * we separately set hoplimit for every segment, since the
		 * user might want to change the value via setsockopt.
		 * Also, desired default hop limit might be changed via
		 * Neighbor Discovery.
		 */
		ip6->ip6_hlim = in6_selecthlim(tp->t_inpcb, NULL);

		/*
		 * Set the packet size here for the benefit of DTrace probes.
		 * ip6_output() will set it properly; it's supposed to include
		 * the option header lengths as well.
		 */
		ip6->ip6_plen = htons(m->m_pkthdr.len - sizeof(*ip6));

		if (V_path_mtu_discovery && tp->t_maxopd > V_tcp_minmss)
			tp->t_flags2 |= TF2_PLPMTU_PMTUD;
		else
			tp->t_flags2 &= ~TF2_PLPMTU_PMTUD;

		if (tp->t_state == TCPS_SYN_SENT)
			TCP_PROBE5(connect__request, NULL, tp, ip6, tp, th);

		TCP_PROBE5(send, NULL, tp, ip6, tp, th);

		/* TODO: IPv6 IP6TOS_ECT bit on */
		error = ip6_output(m, tp->t_inpcb->in6p_outputopts, &ro,
		    ((so->so_options & SO_DONTROUTE) ?  IP_ROUTETOIF : 0),
		    NULL, NULL, tp->t_inpcb);

		if (error == EMSGSIZE && ro.ro_rt != NULL)
			mtu = ro.ro_rt->rt_mtu;
		RO_RTFREE(&ro);
	}
#endif /* INET6 */
#if defined(INET) && defined(INET6)
	else
#endif
#ifdef INET
    {
	struct route ro;

	bzero(&ro, sizeof(ro));
	ip->ip_len = htons(m->m_pkthdr.len);
#ifdef INET6
	if (tp->t_inpcb->inp_vflag & INP_IPV6PROTO)
		ip->ip_ttl = in6_selecthlim(tp->t_inpcb, NULL);
#endif /* INET6 */
	/*
	 * If we do path MTU discovery, then we set DF on every packet.
	 * This might not be the best thing to do according to RFC3390
	 * Section 2. However the tcp hostcache migitates the problem
	 * so it affects only the first tcp connection with a host.
	 *
	 * NB: Don't set DF on small MTU/MSS to have a safe fallback.
	 */
	if (V_path_mtu_discovery && tp->t_maxopd > V_tcp_minmss) {
		ip->ip_off |= htons(IP_DF);
		tp->t_flags2 |= TF2_PLPMTU_PMTUD;
	} else {
		tp->t_flags2 &= ~TF2_PLPMTU_PMTUD;
	}

	if (tp->t_state == TCPS_SYN_SENT)
		TCP_PROBE5(connect__request, NULL, tp, ip, tp, th);

	TCP_PROBE5(send, NULL, tp, ip, tp, th);

	error = ip_output(m, tp->t_inpcb->inp_options, &ro,
	    ((so->so_options & SO_DONTROUTE) ? IP_ROUTETOIF : 0), 0,
	    tp->t_inpcb);

	if (error == EMSGSIZE && ro.ro_rt != NULL)
		mtu = ro.ro_rt->rt_mtu;
	RO_RTFREE(&ro);
    }
#endif /* INET */

out:
	/*
	 * In transmit state, time the transmission and arrange for
	 * the retransmit.  In persist state, just set snd_max.
	 */
	if ((tp->t_flags & TF_FORCEDATA) == 0 ||
	    !tcp_timer_active(tp, TT_PERSIST)) {
		tcp_seq startseq = tp->snd_nxt;

		/*
		 * Advance snd_nxt over sequence space of this segment.
		 */
		if (flags & (TH_SYN|TH_FIN)) {
			if (flags & TH_SYN)
				tp->snd_nxt++;
			if (flags & TH_FIN) {
				tp->snd_nxt++;
				tp->t_flags |= TF_SENTFIN;
			}
		}
		if (sack_rxmit)
			goto timer;
		tp->snd_nxt += len;
		if (SEQ_GT(tp->snd_nxt, tp->snd_max)) {
			tp->snd_max = tp->snd_nxt;
			/*
			 * Time this transmission if not a retransmission and
			 * not currently timing anything.
			 */
			if (tp->t_rtttime == 0) {
				tp->t_rtttime = ticks;
				tp->t_rtseq = startseq;
				TCPSTAT_INC(tcps_segstimed);
			}
		}

		/*
		 * Set retransmit timer if not currently set,
		 * and not doing a pure ack or a keep-alive probe.
		 * Initial value for retransmit timer is smoothed
		 * round-trip time + 2 * round-trip time variance.
		 * Initialize shift counter which is used for backoff
		 * of retransmit time.
		 */
timer:
		if (!tcp_timer_active(tp, TT_REXMT) &&
		    ((sack_rxmit && tp->snd_nxt != tp->snd_max) ||
		     (tp->snd_nxt != tp->snd_una))) {
			if (tcp_timer_active(tp, TT_PERSIST)) {
				tcp_timer_activate(tp, TT_PERSIST, 0);
				tp->t_rxtshift = 0;
			}
			tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);
		}
	} else {
		/*
		 * Persist case, update snd_max but since we are in
		 * persist mode (no window) we do not update snd_nxt.
		 */
		int xlen = len;
		if (flags & TH_SYN)
			++xlen;
		if (flags & TH_FIN) {
			++xlen;
			tp->t_flags |= TF_SENTFIN;
		}
		if (SEQ_GT(tp->snd_nxt + xlen, tp->snd_max))
			tp->snd_max = tp->snd_nxt + len;
	}

	if (error) {

		/*
		 * We know that the packet was lost, so back out the
		 * sequence number advance, if any.
		 *
		 * If the error is EPERM the packet got blocked by the
		 * local firewall.  Normally we should terminate the
		 * connection but the blocking may have been spurious
		 * due to a firewall reconfiguration cycle.  So we treat
		 * it like a packet loss and let the retransmit timer and
		 * timeouts do their work over time.
		 * XXX: It is a POLA question whether calling tcp_drop right
		 * away would be the really correct behavior instead.
		 */
		if (((tp->t_flags & TF_FORCEDATA) == 0 ||
		    !tcp_timer_active(tp, TT_PERSIST)) &&
		    ((flags & TH_SYN) == 0) &&
		    (error != EPERM)) {
			if (sack_rxmit) {
				p->rxmit -= len;
				tp->sackhint.sack_bytes_rexmit -= len;
				KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,
				    ("sackhint bytes rtx >= 0"));
			} else
				tp->snd_nxt -= len;
		}
		SOCKBUF_UNLOCK_ASSERT(&so->so_snd);	/* Check gotos. */
		switch (error) {
		case EPERM:
			tp->t_softerror = error;
			return (error);
		case ENOBUFS:
	                if (!tcp_timer_active(tp, TT_REXMT) &&
			    !tcp_timer_active(tp, TT_PERSIST))
	                        tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);
			tp->snd_cwnd = tp->t_maxseg;
			return (0);
		case EMSGSIZE:
			/*
			 * For some reason the interface we used initially
			 * to send segments changed to another or lowered
			 * its MTU.
			 * If TSO was active we either got an interface
			 * without TSO capabilits or TSO was turned off.
			 * If we obtained mtu from ip_output() then update
			 * it and try again.
			 */
			if (tso)
				tp->t_flags &= ~TF_TSO;
			if (mtu != 0) {
				tcp_mss_update(tp, -1, mtu, NULL, NULL);
				goto again;
			}
			return (error);
		case EHOSTDOWN:
		case EHOSTUNREACH:
		case ENETDOWN:
		case ENETUNREACH:
			if (TCPS_HAVERCVDSYN(tp->t_state)) {
				tp->t_softerror = error;
				return (0);
			}
			/* FALLTHROUGH */
		default:
			return (error);
		}
	}
	TCPSTAT_INC(tcps_sndtotal);

	/*
	 * Data sent (as far as we can tell).
	 * If this advertises a larger window than any other segment,
	 * then remember the size of the advertised window.
	 * Any pending ACK has now been sent.
	 */
	if (recwin >= 0 && SEQ_GT(tp->rcv_nxt + recwin, tp->rcv_adv))
		tp->rcv_adv = tp->rcv_nxt + recwin;
	tp->last_ack_sent = tp->rcv_nxt;
	tp->t_flags &= ~(TF_ACKNOW | TF_DELACK);
	if (tcp_timer_active(tp, TT_DELACK))
		tcp_timer_activate(tp, TT_DELACK, 0);
#if 0
	/*
	 * This completely breaks TCP if newreno is turned on.  What happens
	 * is that if delayed-acks are turned on on the receiver, this code
	 * on the transmitter effectively destroys the TCP window, forcing
	 * it to four packets (1.5Kx4 = 6K window).
	 */
	if (sendalot && --maxburst)
		goto again;
#endif
	if (sendalot)
		goto again;
	return (0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
11,44
11,45
11,46
11,47
11,48
11,49
11,50
11,51
11,52
11,53
11,54
11,55
11,56
11,57
11,58
11,59
11,60
11,61
11,62
11,63
11,64
11,65
11,66
11,67
11,68
11,69
11,70
11,71
11,72
11,73
11,74
11,75
11,76
11,77
11,78
11,79
11,80
11,81
11,82
11,83
11,84
11,85
11,86
11,87
11,88
11,89
11,90
11,91
11,92
11,93
11,94
11,95
11,96
11,97
11,98
11,99
11,100
11,101
11,102
11,103
11,104
11,105
11,106
11,107
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
22,23
26,27
27,28
27,29
27,30
27,31
29,30
31,32
33,34
35,36
36,37
36,38
36,39
36,40
38,39
40,41
42,43
42,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
54,55
54,56
55,56
57,58
57,59
57,60
60,61
61,62
63,64
64,65
64,66
65,66
67,68
67,69
67,70
70,71
71,72
73,74
74,75
74,76
75,76
77,78
77,79
80,81
81,82
81,83
82,83
84,85
84,86
86,87
87,88
89,90
90,91
90,92
90,93
90,94
92,93
94,95
96,97
98,99
99,100
99,101
99,102
101,102
103,104
105,106
106,107
106,108
106,109
108,109
110,111
112,113
113,114
113,115
114,115
116,117
116,118
119,120
120,121
120,122
120,123
122,123
124,125
126,127
127,128
127,129
128,129
130,131
132,133
133,134
133,135
134,135
136,137
136,138
137,138
140,141
141,142
141,143
142,143
144,145
144,146
145,146
146,147
146,148
147,148
147,149
148,149
151,152
153,154
154,155
154,156
155,156
155,157
156,157
159,160
159,161
160,161
163,164
163,165
164,165
164,166
165,166
167,168
167,169
168,169
168,170
169,170
171,172
171,173
172,173
175,176
175,177
176,177
179,180
180,181
180,182
181,182
183,184
185,186
186,187
186,188
187,188
187,189
188,189
191,192
192,193
194,195
194,196
195,196
197,198
198,199
198,200
199,200
199,201
200,201
200,202
201,202
204,205
206,207
206,208
207,208
208,209
208,210
209,210
209,211
210,211
213,214
215,216
216,217
216,218
217,218
220,221
220,222
222,223
222,224
223,224
223,225
224,225
225,226
225,227
226,227
226,228
227,228
230,231
232,233
232,234
232,235
233,234
235,236
235,237
236,237
239,240
239,241
240,241
243,244
244,245
244,246
245,246
247,248
249,250
250,251
250,252
251,252
254,255
255,256
255,257
256,257
259,260
260,261
260,262
261,262
264,265
265,266
265,267
266,267
268,269
268,270
269,270
269,271
270,271
273,274
273,275
274,275
277,278
278,279
278,280
279,280
281,282
281,283
281,284
282,283
284,285
284,286
285,286
288,289
288,290
289,290
292,293
293,294
293,295
294,295
296,297
296,298
297,298
299,300
299,301
300,301
303,304
304,305
304,306
305,306
308,309
309,310
309,311
310,311
313,314
314,315
314,316
315,316
318,319
319,320
319,321
320,321
322,323
324,325
324,326
325,326
325,327
326,327
326,328
327,328
328,329
328,330
329,330
329,331
330,331
333,334
335,336
335,337
336,337
338,339
338,340
339,340
342,343
343,344
343,345
344,345
346,347
346,348
346,349
347,348
349,350
351,352
352,353
354,355
354,356
354,357
354,358
354,359
354,360
354,361
355,356
356,357
356,358
358,359
360,361
361,362
361,363
362,363
364,365
364,366
365,366
365,367
365,368
366,367
368,369
368,370
369,370
372,373
372,374
373,374
376,377
378,379
378,380
379,380
379,381
380,381
383,384
384,385
384,386
385,386
388,389
388,390
388,391
389,390
389,391
389,392
390,391
392,393
392,394
393,394
396,397
396,398
397,398
400,401
401,402
401,403
401,404
402,403
402,404
402,405
403,404
405,406
405,407
406,407
409,410
409,411
410,411
413,414
413,415
414,415
415,416
415,417
416,417
418,419
420,421
422,423
423,424
423,425
424,425
426,427
427,428
427,429
428,429
428,430
431,432
431,433
431,434
432,433
434,435
436,437
436,438
437,438
437,439
438,439
441,442
441,443
442,443
445,446
446,447
446,448
447,448
449,450
450,451
450,452
451,452
451,453
454,455
454,456
454,457
455,456
457,458
459,460
459,461
460,461
460,462
461,462
464,465
464,466
465,466
468,469
469,470
469,471
470,471
472,473
472,474
473,474
473,475
474,475
477,478
477,479
478,479
481,482
482,483
482,484
482,485
483,484
485,486
485,487
486,487
489,490
490,491
490,492
490,493
492,493
494,495
496,497
496,498
497,498
497,499
498,499
501,502
501,503
501,504
501,505
502,503
503,504
503,505
504,505
507,508
508,509
508,510
509,510
512,513
513,514
513,515
514,515
516,517
517,518
519,520
520,521
520,522
520,523
521,522
523,524
525,526
525,527
525,528
526,527
528,529
530,531
530,532
531,532
534,535
534,536
536,537
536,538
537,538
537,539
538,539
538,540
539,540
542,543
544,545
545,546
545,547
546,547
548,549
550,551
550,552
551,552
551,553
552,553
552,554
553,554
556,557
558,559
559,560
559,561
560,561
562,563
564,565
565,566
565,567
566,567
568,569
569,570
569,571
570,571
573,574
573,575
574,575
574,576
575,576
575,577
576,577
579,580
581,582
582,583
582,584
582,585
583,584
583,585
584,585
587,588
587,589
588,589
588,590
589,590
589,591
590,591
592,593
592,594
593,594
593,595
594,595
598,599
599,600
599,601
600,601
602,603
603,604
605,606
606,607
606,608
607,608
610,611
610,612
611,612
612,613
612,614
612,615
612,616
613,614
615,616
617,618
620,621
621,622
621,623
622,623
622,624
623,624
627,628
627,629
628,629
628,630
629,630
632,633
633,634
633,635
633,636
634,635
634,636
635,636
638,639
639,640
639,641
640,641
642,643
643,644
643,645
644,645
644,646
645,646
645,647
648,649
648,650
648,651
649,650
651,652
651,653
652,653
652,654
653,654
657,658
659,660
661,662
661,663
661,664
662,663
663,664
663,665
665,666
667,668
668,669
668,670
669,670
671,672
672,673
672,674
673,674
673,675
674,675
674,676
677,678
677,679
677,680
678,679
680,681
680,682
681,682
681,683
682,683
686,687
686,688
687,688
690,691
692,693
692,694
693,694
693,695
694,695
697,698
697,699
697,700
698,699
699,700
699,701
700,701
702,703
702,704
703,704
703,705
704,705
704,706
705,706
708,709
709,710
709,711
710,711
710,712
711,712
714,715
714,716
715,716
718,719
720,721
720,722
721,722
721,723
722,723
725,726
726,727
726,728
727,728
730,731
731,732
731,733
732,733
734,735
734,736
734,737
735,736
737,738
739,740
741,742
741,743
742,743
742,744
743,744
744,745
744,746
745,746
747,748
749,750
749,751
749,752
750,751
752,753
752,754
753,754
756,757
756,758
757,758
760,761
760,762
761,762
761,763
762,763
762,764
763,764
763,765
764,765
767,768
769,770
770,771
770,772
771,772
773,774
774,775
776,777
777,778
777,779
778,779
779,780
781,782
782,783
784,785
784,786
785,786
785,787
786,787
787,788
787,789
788,789
790,791
792,793
793,794
793,795
794,795
794,796
795,796
798,799
800,801
800,802
801,802
802,803
802,804
803,804
806,807
807,808
807,809
808,809
810,811
811,812
813,814
813,815
814,815
814,816
815,816
818,819
818,820
819,820
820,821
820,822
821,822
824,825
824,826
825,826
825,827
826,827
829,830
829,831
829,832
829,833
830,831
831,832
831,833
831,834
831,835
832,833
834,835
836,837
839,840
840,841
840,842
841,842
841,843
842,843
846,847
847,848
847,849
848,849
848,850
849,850
852,853
852,854
853,854
856,857
856,858
857,858
858,859
858,860
858,861
859,860
861,862
863,864
865,866
866,867
866,868
867,868
869,870
871,872
872,873
872,874
872,875
873,874
875,876
875,877
876,877
879,880
880,881
880,882
880,883
882,883
885,886
885,887
886,887
886,888
887,888
889,890
889,891
890,891
890,892
891,892
891,893
892,893
896,897
898,899
899,900
899,901
900,901
900,902
901,902
901,903
902,903
902,904
903,904
903,905
904,905
905,906
905,907
906,907
906,908
907,908
907,909
908,909
913,914
913,915
914,915
914,916
915,916
919,920
919,921
920,921
920,922
921,922
921,923
922,923
926,927
927,928
927,929
928,929
928,930
929,930
929,931
930,931
930,932
931,932
937,938
937,939
938,939
938,940
939,940
939,941
940,941
944,945
946,947
946,948
947,948
949,950
950,951
950,952
951,952
951,953
952,953
952,954
953,954
957,958
958,959
958,960
959,960
959,961
960,961
963,964
963,965
964,965
967,968
968,969
968,970
969,970
970,971
970,972
970,973
970,974
970,975
971,972
973,974
974,975
974,976
975,976
978,979
978,980
978,981
979,980
981,982
981,983
982,983
982,984
983,984
983,985
984,985
988,989
990,991
992,993
994,995
996,997
997,998
997,999
998,999
998,1000
999,1000
999,1001
1000,1001
1004,1005
1005,1006
1007,1008
1007,1009
1008,1009
1008,1010
1009,1010
1009,1011
1010,1011
1010,1012
1011,1012
1011,1013
1012,1013
1012,1014
1013,1014
1013,1015
1014,1015
1014,1016
1015,1016
1016,1017
1016,1018
1017,1018
1017,1019
1018,1019
1021,1022
1023,1024
1025,1026
1025,1027
1026,1027
1028,1029
1028,1030
1029,1030
1032,1033
1033,1034
1033,1035
1034,1035
1035,1036
1035,1037
1036,1037
1036,1038
1037,1038
1040,1041
1043,1044
1043,1045
1044,1045
1044,1046
1045,1046
1049,1050
1049,1051
1050,1051
1053,1054
1053,1055
1054,1055
1054,1056
1055,1056
1055,1057
1056,1057
1060,1061
1062,1063
1062,1064
1063,1064
1063,1065
1064,1065
1064,1066
1065,1066
1069,1070
1071,1072
1072,1073
1072,1074
1073,1074
1076,1077
1076,1078
1076,1079
1077,1078
1079,1080
1080,1081
1080,1082
1081,1082
1081,1083
1081,1084
1082,1083
1084,1085
1084,1086
1085,1086
1085,1087
1086,1087
1089,1090
1091,1092
1091,1093
1092,1093
1092,1094
1093,1094
1096,1097
1096,1098
1097,1098
1097,1099
1098,1099
1102,1103
1103,1104
1103,1105
1104,1105
1106,1107
1107,1108
1109,1110
1110,1111
1110,1112
1111,1112
1111,1113
1111,1114
1112,1113
1114,1115
1114,1116
1115,1116
1115,1117
1116,1117
1119,1120
1121,1122
1121,1123
1122,1123
1122,1124
1123,1124
1126,1127
1126,1128
1127,1128
1127,1129
1128,1129
1132,1133
1133,1134
1133,1135
1134,1135
1136,1137
1137,1138
1139,1140
1140,1141
1140,1142
1141,1142
1143,1144
1143,1145
1144,1145
1146,1147
1147,1148
1147,1149
1148,1149
1151,1152
1151,1153
1152,1153
1154,1155
1154,1156
1154,1157
1154,1158
1154,1159
1154,1160
1155,1156
1155,1157
1156,1157
1156,1158
1157,1158
1159,1160
1159,1161
1160,1161
1163,1164
1165,1166
1165,1167
1166,1167
1166,1168
1167,1168
1167,1169
1168,1169
1168,1170
1169,1170
1170,1171
1171,1172
1171,1173
1172,1173
1172,1174
1173,1174
1176,1177
1178,1179
1179,1180
1179,1181
1180,1181
1182,1183
1183,1184
1183,1185
1184,1185
1184,1186
1185,1186
1188,1189
1190,1191
1190,1192
1191,1192
1191,1193
1192,1193
1194,1195
1196,1197
1196,1198
1197,1198
1197,1199
1198,1199
1202,1203
1202,1204
1203,1204
1204,1205
1204,1206
1205,1206
1205,1207
1206,1207
1209,1210
1212,1213
1213,1214
1215,1216
1215,1217
1216,1217
1216,1218
1217,1218
1217,1219
1218,1219
1221,1222
1223,1224
1225,1226
1225,1227
1226,1227
1226,1228
1227,1228
1227,1229
1228,1229
1230,1231
1230,1232
1231,1232
1231,1233
1232,1233
1236,1237
1236,1238
1237,1238
1237,1239
1238,1239
1242,1243
1244,1245
1244,1246
1245,1246
1245,1247
1245,1248
1246,1247
1248,1249
1248,1250
1249,1250
1252,1253
1252,1254
1253,1254
1256,1257
1258,1259
1258,1260
1259,1260
1261,1262
1263,1264
1263,1265
1264,1265
1264,1266
1265,1266
1265,1267
1266,1267
1266,1268
1267,1268
1267,1269
1268,1269
1271,1272
1272,1273
1273,1274
1273,1275
1274,1275
1274,1276
1275,1276
1278,1279
1280,1281
1281,1282
1282,1283
1282,1284
1283,1284
1283,1285
1284,1285
1287,1288
1289,1290
1290,1291
1290,1292
1291,1292
1293,1294
1293,1295
1294,1295
1297,1298
1297,1299
1297,1300
1297,1301
1297,1302
1297,1303
1298,1299
1299,1300
1299,1301
1301,1302
1303,1304
1304,1305
1304,1306
1306,1307
1308,1309
1309,1310
1309,1311
1310,1311
1312,1313
1312,1314
1312,1315
1313,1314
1315,1316
1317,1318
1317,1319
1318,1319
1318,1320
1319,1320
1319,1321
1322,1323
1324,1325
1324,1326
1325,1326
1328,1329
1328,1330
1328,1331
1329,1330
1329,1331
1329,1332
1330,1331
1332,1333
1332,1334
1333,1334
1336,1337
1336,1338
1337,1338
1340,1341
1340,1342
1341,1342
1342,1343
1342,1344
1343,1344
1345,1346
1346,1347
1346,1348
1347,1348
1347,1349
1348,1349
1351,1352
1351,1353
1352,1353
1355,1356
1356,1357
1356,1358
1357,1358
1359,1360
1361,1362
1362,1363
1362,1364
1363,1364
1366,1367
1366,1368
1367,1368
1367,1369
1368,1369
1368,1370
1369,1370
1371,1372
1371,1373
1372,1373
1375,1376
1375,1377
1376,1377
1377,1378
1377,1379
1378,1379
1380,1381
1382,1383
1382,1384
1383,1384
1386,1387
1388,1389
1388,1390
1389,1390
1389,1391
1390,1391
1390,1392
1391,1392
1393,1394
1393,1395
1394,1395
1394,1396
1397,1398
1398,1399
1398,1400
1400,1401
1400,1402
1401,1402
1404,1405
1405,1406
1405,1407
1406,1407
1406,1408
1407,1408
1407,1409
1408,1409
1410,1411
1410,1412
1411,1412
1411,1413
1414,1415
1415,1416
1415,1417
1416,1417
1416,1418
1417,1418
1417,1419
1418,1419
1423,1424
1423,1425
1424,1425
1426,1427
1426,1428
1427,1428
1427,1429
1430,1431
1431,1432
1431,1433
1432,1433
1432,1434
1433,1434
1433,1435
1434,1435
1439,1440
1439,1441
1440,1441
1440,1442
1441,1442
1441,1443
1442,1443
1446,1447
1446,1448
1448,1449
1448,1450
1449,1450
1452,1453
1454,1455
1454,1456
1456,1457
1456,1458
1457,1458
1457,1459
1458,1459
1458,1460
1459,1460
1462,1463
1464,1465
1466,1467
1466,1468
1467,1468
1467,1469
1468,1469
1469,1470
1469,1471
1470,1471
1472,1473
1474,1475
1475,1476
1475,1477
1476,1477
1477,1478
1477,1479
1478,1479
1480,1481
1482,1483
1482,1484
1483,1484
1484,1485
1484,1486
1485,1486
1485,1487
1486,1487
1489,1490
1492,1493
1494,1495
1494,1496
1495,1496
1495,1497
1495,1498
1496,1497
1498,1499
1498,1500
1499,1500
1502,1503
1502,1504
1503,1504
1506,1507
1508,1509
1508,1510
1509,1510
1509,1511
1510,1511
1510,1512
1511,1512
1513,1514
1515,1516
1516,1517
1516,1518
1517,1518
1517,1519
1518,1519
1519,1520
1519,1521
1520,1521
1520,1522
1521,1522
1524,1525
1527,1528
1527,1529
1528,1529
1528,1530
1529,1530
1532,1533
1532,1534
1533,1534
1536,1537
1538,1539
1538,1540
1539,1540
1539,1541
1540,1541
1540,1542
1541,1542
1541,1543
1542,1543
1543,1544
1543,1545
1544,1545
1544,1546
1545,1546
1548,1549
1550,1551
1550,1552
1550,1553
1551,1552
1553,1554
1553,1555
1554,1555
1557,1558
1557,1559
1558,1559
1561,1562
1562,1563
1562,1564
1562,1565
1563,1564
1565,1566
1567,1568
1569,1570
1570,1571
1570,1572
1570,1573
1571,1572
1573,1574
1575,1576
1577,1578
1577,1579
1578,1579
1579,1580
1579,1581
1579,1582
1579,1583
1580,1581
1582,1583
1584,1585
1586,1587
1586,1588
1587,1588
1590,1591
1592,1593
1592,1594
1593,1594
1593,1595
1594,1595
1594,1596
1595,1596
1595,1597
1596,1597
1596,1598
1597,1598
1601,1602
1602,1603
1602,1604
1602,1605
1603,1604
1605,1606
1607,1608
1609,1610
1610,1611
1610,1612
1610,1613
1611,1612
1613,1614
1615,1616
1617,1618
1617,1619
1618,1619
1619,1620
1619,1621
1620,1621
1620,1622
1621,1622
1625,1626
1626,1627
1626,1628
1627,1628
1629,1630
1631,1632
1631,1633
1633,1634
1634,1635
1634,1636
1635,1636
1637,1638
1638,1639
1638,1640
1639,1640
1642,1643
1643,1644
1645,1646
1645,1647
1647,1648
1648,1649
1648,1650
1649,1650
1651,1652
1652,1653
1652,1654
1653,1654
1656,1657
1656,1658
1657,1658
1657,1659
1658,1659
1661,1662
1662,1663
1662,1664
1662,1665
1663,1664
1663,1665
1664,1665
1666,1667
1666,1668
1667,1668
1670,1671
1671,1672
1671,1673
1672,1673
1672,1674
1673,1674
1676,1677
1678,1679
1679,1680
1679,1681
1680,1681
1680,1682
1681,1682
1684,1685
1685,1686
1687,1688
1688,1689
1688,1690
1689,1690
1692,1693
1693,1694
1693,1695
1694,1695
1696,1697
1697,1698
1697,1699
1698,1699
1701,1702
1701,1703
1702,1703
1702,1704
1703,1704
1704,1705
1704,1706
1705,1706
1705,1707
1706,1707
1709,1710
1712,1713
1712,1714
1712,1715
1712,1716
1712,1717
1712,1718
1713,1714
1714,1715
1714,1716
1715,1716
1715,1717
1716,1717
1720,1721
1720,1722
1721,1722
1721,1723
1722,1723
1724,1725
1726,1727
1726,1728
1726,1729
1727,1728
1728,1729
1728,1730
1729,1730
1729,1731
1730,1731
1733,1734
1733,1735
1734,1735
1737,1738
1738,1739
1738,1740
1739,1740
1739,1741
1740,1741
1743,1744
1743,1745
1744,1745
1746,1747
1747,1748
1747,1749
1748,1749
1748,1750
1749,1750
1753,1754
1754,1755
1754,1756
1755,1756
1755,1757
1756,1757
1759,1760
1761,1762
1761,1763
1762,1763
1762,1764
1763,1764
1764,1765
1764,1766
1765,1766
1767,1768
1769,1770
1770,1771
1770,1772
1771,1772
1771,1773
1772,1773
1775,1776
1777,1778
1777,1779
1778,1779
1779,1780
1779,1781
1780,1781
1780,1782
1781,1782
1784,1785
1784,1786
1785,1786
1788,1789
1789,1790
1789,1791
1790,1791
1790,1792
1791,1792
1794,1795
1796,1797
1796,1798
1797,1798
1797,1799
1798,1799
1799,1800
1799,1801
1800,1801
1800,1802
1801,1802
1804,1805
1806,1807
1807,1808
1807,1809
1808,1809
1809,1810
1809,1811
1810,1811
1812,1813
1814,1815
1815,1816
1815,1817
1816,1817
1816,1818
1817,1818
1820,1821
1822,1823
1822,1824
1822,1825
1822,1826
1823,1824
1824,1825
1824,1826
1825,1826
1825,1827
1826,1827
1829,1830
1829,1831
1830,1831
1831,1832
1833,1834
1833,1835
1834,1835
1837,1838
1838,1839
1838,1840
1839,1840
1839,1841
1840,1841
1843,1844
1843,1845
1844,1845
1847,1848
1848,1849
1848,1850
1849,1850
1849,1851
1850,1851
1853,1854
1855,1856
1855,1857
1856,1857
1856,1858
1857,1858
1857,1859
1858,1859
1858,1860
1859,1860
1863,1864
1864,1865
1864,1866
1865,1866
1865,1867
1866,1867
1866,1868
1867,1868
1871,1872
1873,1874
1874,1875
1874,1876
1875,1876
1875,1877
1876,1877
1879,1880
1880,1881
1882,1883
1882,1884
1883,1884
1883,1885
1884,1885
1884,1886
1885,1886
1888,1889
1890,1891
1891,1892
1891,1893
1891,1894
1892,1893
1892,1894
1893,1894
1895,1896
1897,1898
1898,1899
1898,1900
1899,1900
1899,1901
1900,1901
1903,1904
1905,1906
1905,1907
1906,1907
1906,1908
1907,1908
1907,1909
1908,1909
1908,1910
1909,1910
1911,1912
1911,1913
1912,1913
1915,1916
1916,1917
1916,1918
1917,1918
1917,1919
1918,1919
1921,1922
1923,1924
1923,1925
1924,1925
1924,1926
1925,1926
1929,1930
1929,1931
1929,1932
1930,1931
1931,1932
1931,1933
1932,1933
1932,1934
1933,1934
1936,1937
1938,1939
1939,1940
1939,1941
1940,1941
1940,1942
1941,1942
1944,1945
1944,1946
1945,1946
1948,1949
1949,1950
1949,1951
1950,1951
1950,1952
1951,1952
1954,1955
1954,1956
1955,1956
1955,1957
1956,1957
1958,1959
1960,1961
1960,1962
1961,1962
1964,1965
1965,1966
1965,1967
1966,1967
1968,1969
1968,1970
1969,1970
1971,1972
1971,1973
1971,1974
1972,1973
1974,1975
1975,1976
1977,1978
1979,1980
1980,1981
1981,1982
1981,1983
1981,1984
1982,1983
1982,1984
1983,1984
1983,1985
1984,1985
1984,1986
1985,1986
1987,1988
1989,1990
1991,1992
1991,1993
1992,1993
1995,1996
1995,1997
1996,1997
1997,1998
1997,1999
1998,1999
2000,2001
2001,2002
2003,2004
2003,2005
2003,2006
2004,2005
2006,2007
2006,2008
2006,2009
2006,2010
2006,2011
2006,2012
2006,2013
2006,2014
2006,2015
2006,2016
2006,2017
2006,2018
2006,2019
2006,2020
2006,2021
2006,2022
2007,2008
2008,2009
2008,2010
2009,2010
2011,2012
2013,2014
2014,2015
2014,2016
2015,2016
2017,2018
2019,2020
2020,2021
2020,2022
2021,2022
2023,2024
2025,2026
2026,2027
2026,2028
2027,2028
2029,2030
2029,2031
2032,2033
2033,2034
2033,2035
2034,2035
2036,2037
2038,2039
2039,2040
2039,2041
2041,2042
2043,2044
2044,2045
2044,2046
2045,2046
2047,2048
2047,2049
2048,2049
2051,2052
2052,2053
2052,2054
2053,2054
2055,2056
2055,2057
2056,2057
2059,2060
2060,2061
2060,2062
2061,2062
2063,2064
2063,2065
2064,2065
2067,2068
2068,2069
2068,2070
2068,2071
2069,2070
2071,2072
2071,2073
2072,2073
2075,2076
2076,2077
2076,2078
2078,2079
2080,2081
2080,2082
2081,2082
2081,2083
2082,2083
2085,2086
2085,2087
2086,2087
2087,2088
2087,2089
2088,2089
2090,2091
2091,2092
2091,2093
2092,2093
2094,2095
2096,2097
2096,2098
2096,2099
2097,2098
2097,2099
2098,2099
2101,2102
2102,2103
2103,2104
2103,2105
2104,2105
2107,2108
2107,2109
2108,2109
2108,2110
2109,2110
2111,2112
2113,2114
2113,2115
2114,2115
2115,2116
2115,2117
2116,2117
2119,2120
2120,2121
2120,2122
2121,2122
2123,2124
2125,2126
2125,2127
2126,2127
2126,2128
2127,2128
2127,2129
2128,2129
2131,2132
2131,2133
2132,2133
2135,2136
2135,2137
2135,2138
2135,2139
2136,2137
2137,2138
2137,2139
2138,2139
2141,2142
2142,2143
2142,2144
2143,2144
2145,2146
2145,2147
2145,2148
2145,2149
2146,2147
2148,2149
2149,2150
2149,2151
2150,2151
2153,2154
2155,2156
2156,2157
2158,2159
2158,2160
2159,2160
2159,2161
2160,2161
2160,2162
2161,2162
2163,2164
2165,2166
2165,2167
2166,2167
2168,2169
2170,2171
2170,2172
2170,2173
2170,2174
2170,2175
2170,2176
2170,2177
2170,2178
2170,2179
2170,2180
2171,2172
2172,2173
2172,2174
2173,2174
2175,2176
2177,2178
2178,2179
2178,2180
2179,2180
2181,2182
2183,2184
2184,2185
2184,2186
2185,2186
2187,2188
2188,2189
2188,2190
2189,2190
2189,2191
2190,2191
2193,2194
2195,2196
2196,2197
2196,2198
2197,2198
2199,2200
2199,2201
2199,2202
2200,2201
2202,2203
2204,2205
2206,2207
2206,2208
2207,2208
2207,2209
2208,2209
2211,2212
2212,2213
2212,2214
2213,2214
2216,2217
2216,2218
2217,2218
2217,2219
2218,2219
2220,2221
2222,2223
2222,2224
2223,2224
2224,2225
2224,2226
2225,2226
2227,2228
2227,2229
2227,2230
2228,2229
2230,2231
2232,2233
2232,2234
2233,2234
2235,2236
2238,2239
2239,2240
2239,2241
2240,2241
2242,2243
2244,2245
2245,2246
2245,2247
2246,2247
2248,2249
2250,2251
2251,2252
2251,2253
2252,2253
2255,2256
2256,2257
2256,2258
2257,2258
2259,2260
2259,2261
2260,2261
2263,2264
2263,2265
2263,2266
2264,2265
2264,2266
2265,2266
2268,2269
2269,2270
2270,2271
2270,2272
2271,2272
2274,2275
2274,2276
2275,2276
2275,2277
2276,2277
2278,2279
2280,2281
2280,2282
2281,2282
2282,2283
2282,2284
2283,2284
2286,2287
2287,2288
2287,2289
2288,2289
2290,2291
2292,2293
2293,2294
2293,2295
2294,2295
2296,2297
2297,2298
2297,2299
2298,2299
2298,2300
2299,2300
2302,2303
2304,2305
2304,2306
2305,2306
2305,2307
2306,2307
2307,2308
2307,2309
2308,2309
2310,2311
2312,2313
2312,2314
2313,2314
2313,2315
2314,2315
2318,2319
2318,2320
2319,2320
2320,2321
2320,2322
2321,2322
2323,2324
2323,2325
2324,2325
2326,2327
2328,2329
2328,2330
2329,2330
2329,2331
2330,2331
2333,2334
2333,2335
2334,2335
2335,2336
2335,2337
2336,2337
2338,2339
2340,2341
2341,2342
2341,2343
2342,2343
2345,2346
2345,2347
2346,2347
2346,2348
2347,2348
2349,2350
2351,2352
2351,2353
2351,2354
2352,2353
2353,2354
2353,2355
2354,2355
2356,2357
2358,2359
2359,2360
2359,2361
2360,2361
2363,2364
2364,2365
2364,2366
2365,2366
2368,2369
2368,2370
2369,2370
2369,2371
2370,2371
2370,2372
2371,2372
2374,2375
2376,2377
2377,2378
2377,2379
2378,2379
2381,2382
2381,2383
2382,2383
2383,2384
2383,2385
2384,2385
2386,2387
2386,2388
2387,2388
2387,2389
2388,2389
2388,2390
2389,2390
2392,2393
2394,2395
2396,2397
2397,2398
2397,2399
2398,2399
2401,2402
2402,2403
2402,2404
2403,2404
2406,2407
2407,2408
2407,2409
2407,2410
2408,2409
2410,2411
2410,2412
2411,2412
2411,2413
2412,2413
2412,2414
2413,2414
2415,2416
2417,2418
2419,2420
2421,2422
2422,2423
2422,2424
2424,2425
2426,2427
2426,2428
2427,2428
2427,2429
2428,2429
2428,2430
2429,2430
2431,2432
2433,2434
2435,2436
2436,2437
2436,2438
2437,2438
2440,2441
2441,2442
2441,2443
2441,2444
2442,2443
2444,2445
2444,2446
2445,2446
2448,2449
2449,2450
2449,2451
2449,2452
2451,2452
2454,2455
2454,2456
2454,2457
2455,2456
2457,2458
2457,2459
2457,2460
2457,2461
2457,2462
2457,2463
2457,2464
2457,2465
2457,2466
2457,2467
2457,2468
2458,2459
2459,2460
2459,2461
2460,2461
2462,2463
2462,2464
2465,2466
2466,2467
2466,2468
2467,2468
2469,2470
2471,2472
2471,2473
2471,2474
2472,2473
2472,2474
2473,2474
2474,2475
2474,2476
2475,2476
2475,2477
2476,2477
2479,2480
2481,2482
2481,2483
2482,2483
2485,2486
2486,2487
2486,2488
2487,2488
2489,2490
2490,2491
2492,2493
2492,2494
2492,2495
2493,2494
2493,2495
2494,2495
2494,2496
2494,2497
2495,2496
2497,2498
2497,2499
2498,2499
2501,2502
2501,2503
2502,2503
2505,2506
2507,2508
2507,2509
2507,2510
2508,2509
2509,2510
2510,2511
2510,2512
2511,2512
2514,2515
2515,2516
2515,2517
2516,2517
2518,2519
2519,2520
2521,2522
2522,2523
2522,2524
2522,2525
2523,2524
2525,2526
2527,2528
2529,2530
2529,2531
2530,2531
2531,2532
2531,2533
2532,2533
2534,2535
2535,2536
2537,2538
2538,2539
2538,2540
2538,2541
2539,2540
2541,2542
2543,2544
2545,2546
2546,2547
2546,2548
2547,2548
2549,2550
2549,2551
2549,2552
2550,2551
2552,2553
2554,2555
2556,2557
2556,2558
2557,2558
2557,2559
2558,2559
2560,2561
2562,2563
2562,2564
2562,2565
2562,2566
2563,2564
2564,2565
2564,2566
2565,2566
2567,2568
2568,2569
2568,2570
2569,2570
2572,2573
2573,2574
2573,2575
2574,2575
2576,2577
2578,2579
2579,2580
2579,2581
2580,2581
2583,2584
2585,2586
2586,2587
2586,2588
2587,2588
2587,2589
2588,2589
2591,2592
2593,2594
2594,2595
2594,2596
2595,2596
2595,2597
2596,2597
2599,2600
2601,2602
2602,2603
2602,2604
2603,2604
2605,2606
2605,2607
2605,2608
2605,2609
2605,2610
2606,2607
2608,2609
2609,2610
2609,2611
2610,2611
2613,2614
2615,2616
2617,2618
2618,2619
2620,2621
2620,2622
2620,2623
2621,2622
2621,2623
2622,2623
2624,2625
2624,2626
2625,2626
2625,2627
2626,2627
2628,2629
2630,2631
2632,2633
2632,2634
2633,2634
2634,2635
2634,2636
2634,2637
2634,2638
2634,2639
2635,2636
2637,2638
2639,2640
2641,2642
2641,2643
2642,2643
2642,2644
2645,2646
2647,2648
2647,2649
2648,2649
2648,2650
2648,2651
2649,2650
2651,2652
2653,2654
2655,2656
2657,2658
2658,2659
2658,2660
2659,2660
2659,2661
2660,2661
2663,2664
2665,2666
2665,2667
2666,2667
2667,2668
2667,2669
2668,2669
2668,2670
2669,2670
2672,2673
2672,2674
2672,2675
2672,2676
2673,2674
2675,2676
2677,2678
2679,2680
2679,2681
2680,2681
2680,2682
2683,2684
2685,2686
2685,2687
2686,2687
2686,2688
2687,2688
2687,2689
2688,2689
2691,2692
2693,2694
2693,2695
2693,2696
2693,2697
2693,2698
2694,2695
2695,2696
2695,2697
2696,2697
2698,2699
2699,2700
2699,2701
2700,2701
2703,2704
2704,2705
2704,2706
2705,2706
2705,2707
2708,2709
2708,2710
2709,2710
2711,2712
2713,2714
2714,2715
2714,2716
2715,2716
2717,2718
2719,2720
2720,2721
2720,2722
2721,2722
2724,2725
2726,2727
2726,2728
2727,2728
2727,2729
2728,2729
2728,2730
2729,2730
2731,2732
2733,2734
2733,2735
2734,2735
2734,2736
2735,2736
2739,2740
2740,2741
2740,2742
2741,2742
2743,2744
2745,2746
2746,2747
2746,2748
2747,2748
2749,2750
2750,2751
2750,2752
2751,2752
2754,2755
2754,2756
2754,2757
2754,2758
2754,2759
2754,2760
2755,2756
2756,2757
2756,2758
2757,2758
2759,2760
2760,2761
2760,2762
2761,2762
2764,2765
2764,2766
2764,2767
2765,2766
2765,2767
2766,2767
2766,2768
2767,2768
2770,2771
2772,2773
2773,2774
2773,2775
2774,2775
2776,2777
2777,2778
2779,2780
2779,2781
2779,2782
2780,2781
2780,2782
2781,2782
2783,2784
2784,2785
2784,2786
2785,2786
2785,2787
2786,2787
2788,2789
2790,2791
2792,2793
2793,2794
2793,2795
2794,2795
2796,2797
2797,2798
2799,2800
2799,2801
2799,2802
2800,2801
2800,2802
2800,2803
2801,2802
2803,2804
2803,2805
2804,2805
2807,2808
2807,2809
2808,2809
2811,2812
2812,2813
2812,2814
2813,2814
2815,2816
2816,2817
2818,2819
2819,2820
2819,2821
2820,2821
2822,2823
2823,2824
2825,2826
2826,2827
2826,2828
2827,2828
2829,2830
2829,2831
2829,2832
2830,2831
2832,2833
2834,2835
2836,2837
2836,2838
2837,2838
2837,2839
2838,2839
2840,2841
2842,2843
2842,2844
2842,2845
2843,2844
2844,2845
2844,2846
2845,2846
2847,2848
2849,2850
2850,2851
2850,2852
2851,2852
2854,2855
2856,2857
2857,2858
2857,2859
2858,2859
2858,2860
2859,2860
2862,2863
2864,2865
2865,2866
2865,2867
2866,2867
2866,2868
2867,2868
2870,2871
2872,2873
2873,2874
2873,2875
2874,2875
2876,2877
2877,2878
2877,2879
2878,2879
2881,2882
2882,2883
2882,2884
2883,2884
2883,2885
2884,2885
2884,2886
2885,2886
2889,2890
2889,2891
2890,2891
2890,2892
2891,2892
2893,2894
2896,2897
2896,2898
2896,2899
2896,2900
2897,2898
2898,2899
2899,2900
2899,2901
2900,2901
2902,2903
2902,2904
2903,2904
2903,2905
2904,2905
2906,2907
2908,2909
2910,2911
2911,2912
2911,2913
2912,2913
2914,2915
2914,2916
2915,2916
2915,2917
2916,2917
2918,2919
2920,2921
2921,2922
2921,2923
2922,2923
2925,2926
2926,2927
2926,2928
2926,2929
2926,2930
2927,2928
2929,2930
2929,2931
2930,2931
2933,2934
2935,2936
2937,2938
2937,2939
2938,2939
2938,2940
2939,2940
2939,2941
2940,2941
2940,2942
2941,2942
2943,2944
2945,2946
2945,2947
2946,2947
2946,2948
2947,2948
2950,2951
2952,2953
2952,2954
2953,2954
2953,2955
2954,2955
2957,2958
2957,2959
2958,2959
2961,2962
2962,2963
2963,2964
2963,2965
2964,2965
2967,2968
2967,2969
2968,2969
2968,2970
2969,2970
2969,2971
2970,2971
2970,2972
2971,2972
2974,2975
2976,2977
2978,2979
2979,2980
2979,2981
2979,2982
2980,2981
2980,2982
2981,2982
2981,2983
2982,2983
2986,2987
2987,2988
2987,2989
2988,2989
2988,2990
2989,2990
2989,2991
2990,2991
2993,2994
2995,2996
2996,2997
2996,2998
2997,2998
2999,3000
2999,3001
3000,3001
3002,3003
3004,3005
3005,3006
3005,3007
3006,3007
3008,3009
3008,3010
3009,3010
3011,3012
3013,3014
3013,3015
3014,3015
3014,3016
3015,3016
3015,3017
3016,3017
3016,3018
3017,3018
3020,3021
3022,3023
3023,3024
3023,3025
3024,3025
3024,3026
3025,3026
3028,3029
3030,3031
3030,3032
3030,3033
3031,3032
3031,3033
3032,3033
3032,3034
3033,3034
3033,3035
3034,3035
3034,3036
3035,3036
3038,3039
3038,3040
3038,3041
3039,3040
3041,3042
3041,3043
3042,3043
3045,3046
3045,3047
3046,3047
3049,3050
3050,3051
3051,3052
3051,3053
3052,3053
3053,3054
3053,3055
3054,3055
3054,3056
3055,3056
3058,3059
3060,3061
3060,3062
3061,3062
3064,3065
3064,3066
3065,3066
3066,3067
3066,3068
3067,3068
3067,3069
3068,3069
3071,3072
3073,3074
3074,3075
3074,3076
3075,3076
3077,3078
3078,3079
3080,3081
3080,3082
3081,3082
3081,3083
3082,3083
3082,3084
3083,3084
3086,3087
3088,3089
3088,3090
3089,3090
3090,3091
3090,3092
3091,3092
3093,3094
3095,3096
3096,3097
3096,3098
3097,3098
3097,3099
3098,3099
3101,3102
3102,3103
3104,3105
3104,3106
3105,3106
3105,3107
3106,3107
3106,3108
3107,3108
3110,3111
3112,3113
3113,3114
3113,3115
3114,3115
3116,3117
3118,3119
3118,3120
3118,3121
3119,3120
3119,3121
3120,3121
3123,3124
3124,3125
3124,3126
3124,3127
3125,3126
3125,3127
3126,3127
3126,3128
3127,3128
3129,3130
3130,3131
3130,3132
3131,3132
3133,3134
3134,3135
3134,3136
3135,3136
3137,3138
3139,3140
3139,3141
3139,3142
3140,3141
3142,3143
3144,3145
3146,3147
3147,3148
3147,3149
3148,3149
3148,3150
3149,3150
3152,3153
3152,3154
3153,3154
3155,3156
3155,3157
3156,3157
3159,3160
3160,3161
3160,3162
3161,3162
3161,3163
3162,3163
3165,3166
3165,3167
3166,3167
3168,3169
3168,3170
3169,3170
3172,3173
3172,3174
3172,3175
3173,3174
3174,3175
3174,3176
3175,3176
3175,3177
3176,3177
3179,3180
3179,3181
3180,3181
3182,3183
3182,3184
3183,3184
3186,3187
3187,3188
3187,3189
3188,3189
3188,3190
3189,3190
3192,3193
3194,3195
3195,3196
3195,3197
3196,3197
3196,3198
3197,3198
3197,3199
3198,3199
3202,3203
3204,3205
3205,3206
3205,3207
3206,3207
3206,3208
3207,3208
3210,3211
3210,3212
3211,3212
3213,3214
3213,3215
3214,3215
3217,3218
3217,3219
3218,3219
3220,3221
3220,3222
3221,3222
3222,3223
3222,3224
3222,3225
3222,3226
3223,3224
3225,3226
3227,3228
3227,3229
3228,3229
3231,3232
3233,3234
3234,3235
3234,3236
3235,3236
3235,3237
3236,3237
3239,3240
3239,3241
3240,3241
3241,3242
3241,3243
3242,3243
3243,3244
3243,3245
3244,3245
3247,3248
3250,3251
3251,3252
3251,3253
3252,3253
3252,3254
3253,3254
3256,3257
3258,3259
3258,3260
3259,3260
3259,3261
3260,3261
3260,3262
3261,3262
3263,3264
3263,3265
3264,3265
3264,3266
3267,3268
3268,3269
3268,3270
3269,3270
3269,3271
3270,3271
3270,3272
3271,3272
3276,3277
3276,3278
3277,3278
3279,3280
3279,3281
3280,3281
3280,3282
3283,3284
3283,3285
3284,3285
3287,3288
3288,3289
3288,3290
3289,3290
3292,3293
3292,3294
3293,3294
3293,3295
3294,3295
3294,3296
3294,3297
3295,3296
3297,3298
3297,3299
3298,3299
3301,3302
3301,3303
3302,3303
3305,3306
3305,3307
3306,3307
3308,3309
3308,3310
3309,3310
3309,3311
3312,3313
3313,3314
3313,3315
3314,3315
3314,3316
3315,3316
3318,3319
3318,3320
3319,3320
3322,3323
3323,3324
3323,3325
3324,3325
3326,3327
3326,3328
3327,3328
3327,3329
3330,3331
3331,3332
3331,3333
3332,3333
3332,3334
3333,3334
3336,3337
3336,3338
3337,3338
3340,3341
3340,3342
3341,3342
3341,3343
3342,3343
3344,3345
3344,3346
3345,3346
3345,3347
3346,3347
3346,3348
3349,3350
3351,3352
3351,3353
3352,3353
3355,3356
3356,3357
3356,3358
3357,3358
3359,3360
3359,3361
3360,3361
3360,3362
3361,3362
3361,3363
3364,3365
3366,3367
3366,3368
3367,3368
3370,3371
3370,3372
3370,3373
3371,3372
3371,3373
3372,3373
3374,3375
3376,3377
3377,3378
3377,3379
3378,3379
3378,3380
3379,3380
3382,3383
3382,3384
3383,3384
3385,3386
3385,3387
3386,3387
3387,3388
3389,3390
3389,3391
3389,3392
3390,3391
3392,3393
3392,3394
3393,3394
3395,3396
3396,3397
3396,3398
3397,3398
3400,3401
3402,3403
3403,3404
3403,3405
3404,3405
3404,3406
3405,3406
3408,3409
3408,3410
3409,3410
3411,3412
3411,3413
3412,3413
3413,3414
3415,3416
3415,3417
3416,3417
3418,3419
3418,3420
3419,3420
3422,3423
3422,3424
3422,3425
3423,3424
3423,3425
3424,3425
3424,3426
3425,3426
3429,3430
3429,3431
3430,3431
3431,3432
3432,3433
3432,3434
3433,3434
3436,3437
3437,3438
3437,3439
3438,3439
3438,3440
3439,3440
3442,3443
3444,3445
3445,3446
3445,3447
3446,3447
3446,3448
3447,3448
3450,3451
3451,3452
3453,3454
3453,3455
3453,3456
3454,3455
3454,3456
3454,3457
3455,3456
3457,3458
3457,3459
3458,3459
3461,3462
3461,3463
3462,3463
3465,3466
3465,3467
3466,3467
3467,3468
3467,3469
3468,3469
3468,3470
3469,3470
3472,3473
3472,3474
3473,3474
3475,3476
3475,3477
3476,3477
3477,3478
3479,3480
3479,3481
3480,3481
3480,3482
3481,3482
3484,3485
3484,3486
3485,3486
3488,3489
3489,3490
3489,3491
3490,3491
3490,3492
3491,3492
3494,3495
3496,3497
3497,3498
3497,3499
3498,3499
3498,3500
3499,3500
3502,3503
3502,3504
3503,3504
3506,3507
3507,3508
3507,3509
3508,3509
3508,3510
3509,3510
3509,3511
3510,3511
3514,3515
3514,3516
3515,3516
3517,3518
3519,3520
3520,3521
3520,3522
3521,3522
3523,3524
3523,3525
3523,3526
3524,3525
3525,3526
3525,3527
3525,3528
3526,3527
3528,3529
3528,3530
3529,3530
3531,3532
3531,3533
3532,3533
3532,3534
3533,3534
3536,3537
3538,3539
3539,3540
3539,3541
3541,3542
3543,3544
3544,3545
3544,3546
3545,3546
3545,3547
3546,3547
3546,3548
3547,3548
3551,3552
3553,3554
3554,3555
3554,3556
3555,3556
3555,3557
3556,3557
3556,3558
3557,3558
3561,3562
3561,3563
3562,3563
3562,3564
3563,3564
3566,3567
3568,3569
3569,3570
3569,3571
3569,3572
3570,3571
3572,3573
3572,3574
3573,3574
3573,3575
3574,3575
3574,3576
3575,3576
3577,3578
3579,3580
3581,3582
3581,3583
3581,3584
3582,3583
3584,3585
3586,3587
3588,3589
3589,3590
3589,3591
3589,3592
3589,3593
3589,3594
3589,3595
3591,3592
3593,3594
3595,3596
3597,3598
3599,3600
3599,3601
3599,3602
3600,3601
3602,3603
3604,3605
3606,3607
3607,3608
3607,3609
3607,3610
3607,3611
3607,3612
3607,3613
3608,3609
3610,3611
3612,3613
3614,3615
3615,3616
3617,3618
3619,3620
3621,3622
3621,3623
3623,3624
3623,3625
3623,3626
3624,3625
3624,3626
3625,3626
3625,3627
3626,3627
3627,3628
3627,3629
3628,3629
3628,3630
3629,3630
3632,3633
3635,3636
3636,3637
3636,3638
3636,3639
3637,3638
3639,3640
3641,3642
3643,3644
3643,3645
3643,3646
3643,3647
3643,3648
3643,3649
3644,3645
3645,3646
3645,3647
3646,3647
3648,3649
3648,3650
3650,3651
3651,3652
3651,3653
3652,3653
3655,3656
3655,3657
3656,3657
3656,3658
3657,3658
3659,3660
3660,3661
3660,3662
3661,3662
3663,3664
3665,3666
3665,3667
3666,3667
3666,3668
3667,3668
3667,3669
3668,3669
3670,3671
3672,3673
3673,3674
3674,3675
3674,3676
3675,3676
3678,3679
3678,3680
3679,3680
3679,3681
3680,3681
3682,3683
3684,3685
3684,3686
3685,3686
3686,3687
3687,3688
3687,3689
3688,3689
3691,3692
3692,3693
3692,3694
3693,3694
3693,3695
3694,3695
3697,3698
3699,3700
3699,3701
3700,3701
3702,3703
3704,3705
3705,3706
3705,3707
3706,3707
3706,3708
3707,3708
3710,3711
3712,3713
3712,3714
3713,3714
3713,3715
3713,3716
3714,3715
3716,3717
3716,3718
3717,3718
3720,3721
3720,3722
3721,3722
3724,3725
3724,3726
3725,3726
3726,3727
3726,3728
3727,3728
3727,3729
3728,3729
3731,3732
3731,3733
3732,3733
3735,3736
3735,3737
3736,3737
3736,3738
3737,3738
3737,3739
3738,3739
3742,3743
3742,3744
3742,3745
3743,3744
3744,3745
3744,3746
3745,3746
3745,3747
3746,3747
3749,3750
3751,3752
3752,3753
3752,3754
3753,3754
3753,3755
3754,3755
3757,3758
3759,3760
3760,3761
3760,3762
3761,3762
3763,3764
3764,3765
3766,3767
3766,3768
3768,3769
3768,3770
3769,3770
3769,3771
3770,3771
3771,3772
3771,3773
3771,3774
3772,3773
3774,3775
3776,3777
3778,3779
3779,3780
3779,3781
3780,3781
3781,3782
3781,3783
3782,3783
3784,3785
3784,3786
3785,3786
3785,3787
3786,3787
3789,3790
3789,3791
3790,3791
3793,3794
3794,3795
3794,3796
3795,3796
3795,3797
3796,3797
3799,3800
3799,3801
3800,3801
3803,3804
3803,3805
3804,3805
3804,3806
3805,3806
3805,3807
3805,3808
3806,3807
3808,3809
3810,3811
3812,3813
3812,3814
3813,3814
3814,3815
3814,3816
3814,3817
3814,3818
3815,3816
3817,3818
3819,3820
3822,3823
3823,3824
3823,3825
3824,3825
3824,3826
3825,3826
3829,3830
3830,3831
3830,3832
3830,3833
3830,3834
3831,3832
3833,3834
3835,3836
3837,3838
3837,3839
3838,3839
3841,3842
3841,3843
3841,3844
3841,3845
3842,3843
3843,3844
3843,3845
3845,3846
3845,3847
3847,3848
3848,3849
3850,3851
3850,3852
3851,3852
3851,3853
3852,3853
3854,3855
3856,3857
3857,3858
3858,3859
3860,3861
3860,3862
3861,3862
3861,3863
3862,3863
3864,3865
3866,3867
3866,3868
3867,3868
3868,3869
3869,3870
3871,3872
3872,3873
3872,3874
3873,3874
3873,3875
3874,3875
3877,3878
3879,3880
3879,3881
3880,3881
3880,3882
3880,3883
3881,3882
3883,3884
3883,3885
3884,3885
3884,3886
3885,3886
3888,3889
3890,3891
3890,3892
3891,3892
3894,3895
3895,3896
3895,3897
3896,3897
3896,3898
3897,3898
3900,3901
3900,3902
3901,3902
3901,3903
3902,3903
3905,3906
3907,3908
3907,3909
3908,3909
3910,3911
3910,3912
3910,3913
3911,3912
3911,3913
3912,3913
3912,3914
3913,3914
3913,3915
3914,3915
3915,3916
3915,3917
3916,3917
3916,3918
3917,3918
3918,3919
3918,3920
3919,3920
3919,3921
3920,3921
3923,3924
3926,3927
3927,3928
3927,3929
3927,3930
3928,3929
3930,3931
3932,3933
3934,3935
3935,3936
3935,3937
3936,3937
3937,3938
3937,3939
3938,3939
3940,3941
3943,3944
3944,3945
3944,3946
3945,3946
3947,3948
3949,3950
3950,3951
3950,3952
3950,3953
3951,3952
3953,3954
3953,3955
3953,3956
3954,3955
3955,3956
3955,3957
3956,3957
3956,3958
3957,3958
3960,3961
3962,3963
3963,3964
3963,3965
3964,3965
3964,3966
3965,3966
3965,3967
3966,3967
3970,3971
3972,3973
3973,3974
3973,3975
3973,3976
3974,3975
3976,3977
3976,3978
3977,3978
3977,3979
3978,3979
3978,3980
3979,3980
3984,3985
3986,3987
3987,3988
3987,3989
3988,3989
3988,3990
3989,3990
3992,3993
3994,3995
3995,3996
3995,3997
3996,3997
3998,3999
3999,4000
3999,4001
4000,4001
4003,4004
4003,4005
4004,4005
4006,4007
4006,4008
4006,4009
4006,4010
4006,4011
4006,4012
4006,4013
4006,4014
4006,4015
4006,4016
4006,4017
4006,4018
4006,4019
4006,4020
4006,4021
4006,4022
4006,4023
4006,4024
4007,4008
4008,4009
4010,4011
4011,4012
4011,4013
4012,4013
4012,4014
4013,4014
4016,4017
4018,4019
4019,4020
4020,4021
4022,4023
4023,4024
4025,4026
4025,4027
4026,4027
4026,4028
4027,4028
4028,4029
4028,4030
4028,4031
4029,4030
4031,4032
4033,4034
4035,4036
4036,4037
4036,4038
4036,4039
4037,4038
4039,4040
4041,4042
4043,4044
4044,4045
4044,4046
4044,4047
4044,4048
4045,4046
4047,4048
4049,4050
4051,4052
4051,4053
4052,4053
4055,4056
4056,4057
4056,4058
4057,4058
4057,4059
4058,4059
4061,4062
4061,4063
4062,4063
4065,4066
4066,4067
4068,4069
4069,4070
4071,4072
4071,4073
4072,4073
4074,4075
4075,4076
4075,4077
4076,4077
4076,4078
4077,4078
4080,4081
4081,4082
4083,4084
4083,4085
4084,4085
4084,4086
4085,4086
4088,4089
4088,4090
4089,4090
4090,4091
4090,4092
4090,4093
4090,4094
4090,4095
4090,4096
4091,4092
4093,4094
4095,4096
4097,4098
4099,4100
4101,4102
4103,4104
4105,4106
4106,4107
4107,4108
4109,4110
4110,4111
4112,4113
4113,4114
4115,4116
4116,4117
4118,4119
4119,4120
4121,4122
4121,4123
4122,4123
4122,4124
4123,4124
4125,4126
4125,4127
4126,4127
4129,4130
4129,4131
4130,4131
4131,4132
4131,4133
4132,4133
4132,4134
4133,4134
4136,4137
4138,4139
4139,4140
4142,4143
4143,4144
4144,4145
4146,4147
4147,4148
4147,4149
4148,4149
4150,4151
4151,4152
4153,4154
4153,4155
4154,4155
4154,4156
4155,4156
4155,4157
4156,4157
4159,4160
4159,4161
4159,4162
4160,4161
4162,4163
4162,4164
4163,4164
4163,4165
4164,4165
4167,4168
4169,4170
4169,4171
4170,4171
4173,4174
4174,4175
4174,4176
4175,4176
4175,4177
4176,4177
4179,4180
4179,4181
4180,4181
4180,4182
4181,4182
4184,4185
4186,4187
4187,4188
4187,4189
4188,4189
4188,4190
4189,4190
4192,4193
4192,4194
4193,4194
4196,4197
4197,4198
4197,4199
4198,4199
4198,4200
4199,4200
4202,4203
4203,4204
4204,4205
4204,4206
4205,4206
4207,4208
4209,4210
4209,4211
4210,4211
4210,4212
4210,4213
4211,4212
4213,4214
4215,4216
4217,4218
4218,4219
4218,4220
4218,4221
4218,4222
4219,4220
4221,4222
4223,4224
4226,4227
4226,4228
4227,4228
4229,4230
4231,4232
4232,4233
-----nextToken-----
2,4,7,9,10,15,17,18,23,24,25,28,30,32,34,37,39,41,43,45,49,51,52,56,58,59,62,66,68,69,72,76,78,79,83,85,88,91,93,95,97,100,102,104,107,109,111,115,117,118,121,123,125,129,131,135,138,139,143,149,150,152,157,158,161,162,166,170,173,174,177,178,182,184,189,190,193,196,202,203,205,211,212,214,218,219,221,228,229,231,234,237,238,241,242,246,248,252,253,257,258,262,263,267,271,272,275,276,280,283,286,287,290,291,295,298,301,302,306,307,311,312,316,317,321,323,331,332,334,337,340,341,345,348,350,353,357,359,363,367,370,371,374,375,377,381,382,386,387,391,394,395,398,399,404,407,408,411,412,417,419,421,425,429,430,433,435,439,440,443,444,448,452,453,456,458,462,463,466,467,471,475,476,479,480,484,487,488,491,493,495,499,500,505,506,510,511,515,518,522,524,527,529,532,533,535,540,541,543,547,549,554,555,557,561,563,567,571,572,577,578,580,585,586,591,595,596,597,601,604,608,609,614,616,618,619,624,625,626,630,631,636,637,641,646,647,650,654,655,656,658,660,664,666,670,675,676,679,683,684,685,688,689,691,695,696,701,706,707,712,713,716,717,719,723,724,728,729,733,736,738,740,746,748,751,754,755,758,759,765,766,768,772,775,780,783,789,791,796,797,799,804,805,809,812,816,817,822,823,827,828,833,835,837,838,843,844,845,850,851,854,855,860,862,864,868,870,874,877,878,881,883,884,888,893,894,895,897,909,910,911,912,916,917,918,923,924,925,932,933,934,935,936,941,942,943,945,948,954,955,956,961,962,965,966,972,976,977,980,985,986,987,989,991,993,995,1001,1002,1003,1006,1019,1020,1022,1024,1027,1030,1031,1038,1039,1041,1042,1046,1047,1048,1051,1052,1057,1058,1059,1061,1066,1067,1068,1070,1074,1075,1078,1083,1087,1088,1090,1094,1095,1099,1100,1101,1105,1108,1113,1117,1118,1120,1124,1125,1129,1130,1131,1135,1138,1142,1145,1149,1150,1153,1158,1161,1162,1164,1174,1175,1177,1181,1186,1187,1189,1193,1195,1199,1200,1201,1207,1208,1210,1211,1214,1219,1220,1222,1224,1229,1233,1234,1235,1239,1240,1241,1243,1247,1250,1251,1254,1255,1257,1260,1262,1269,1270,1276,1277,1279,1285,1286,1288,1292,1295,1296,1300,1302,1305,1307,1311,1314,1316,1320,1321,1323,1326,1327,1331,1334,1335,1338,1339,1344,1349,1350,1353,1354,1358,1360,1364,1365,1370,1373,1374,1379,1381,1384,1385,1387,1392,1395,1396,1399,1402,1403,1409,1412,1413,1419,1420,1421,1422,1425,1428,1429,1435,1436,1437,1438,1443,1444,1445,1447,1450,1451,1453,1455,1460,1461,1463,1465,1471,1473,1479,1481,1487,1488,1490,1491,1493,1497,1500,1501,1504,1505,1507,1512,1514,1522,1523,1525,1526,1530,1531,1534,1535,1537,1546,1547,1549,1552,1555,1556,1559,1560,1564,1566,1568,1572,1574,1576,1581,1583,1585,1588,1589,1591,1598,1599,1600,1604,1606,1608,1612,1614,1616,1622,1623,1624,1628,1630,1632,1636,1640,1641,1644,1646,1650,1654,1655,1659,1660,1665,1668,1669,1674,1675,1677,1682,1683,1686,1690,1691,1695,1699,1700,1707,1708,1710,1711,1717,1718,1719,1723,1725,1731,1732,1735,1736,1741,1742,1745,1750,1751,1752,1757,1758,1760,1766,1768,1773,1774,1776,1782,1783,1786,1787,1792,1793,1795,1802,1803,1805,1811,1813,1818,1819,1821,1827,1828,1832,1835,1836,1841,1842,1845,1846,1851,1852,1854,1860,1861,1862,1868,1869,1870,1872,1877,1878,1881,1886,1887,1889,1894,1896,1901,1902,1904,1910,1913,1914,1919,1920,1922,1926,1927,1928,1934,1935,1937,1942,1943,1946,1947,1952,1953,1957,1959,1962,1963,1967,1970,1973,1976,1978,1986,1988,1990,1993,1994,1999,2002,2005,2010,2012,2016,2018,2022,2024,2028,2030,2031,2035,2037,2040,2042,2046,2049,2050,2054,2057,2058,2062,2065,2066,2070,2073,2074,2077,2079,2083,2084,2089,2093,2095,2099,2100,2105,2106,2110,2112,2117,2118,2122,2124,2129,2130,2133,2134,2139,2140,2144,2147,2151,2152,2154,2157,2162,2164,2167,2169,2174,2176,2180,2182,2186,2191,2192,2194,2198,2201,2203,2205,2209,2210,2214,2215,2219,2221,2226,2229,2231,2234,2236,2237,2241,2243,2247,2249,2253,2254,2258,2261,2262,2266,2267,2272,2273,2277,2279,2284,2285,2289,2291,2295,2300,2301,2303,2309,2311,2315,2316,2317,2322,2325,2327,2331,2332,2337,2339,2343,2344,2348,2350,2355,2357,2361,2362,2366,2367,2372,2373,2375,2379,2380,2385,2390,2391,2393,2395,2399,2400,2404,2405,2409,2414,2416,2418,2420,2423,2425,2430,2432,2434,2438,2439,2443,2446,2447,2450,2452,2453,2456,2461,2463,2464,2468,2470,2477,2478,2480,2483,2484,2488,2491,2496,2499,2500,2503,2504,2506,2512,2513,2517,2520,2524,2526,2528,2533,2536,2540,2542,2544,2548,2551,2553,2555,2559,2561,2566,2570,2571,2575,2577,2581,2582,2584,2589,2590,2592,2597,2598,2600,2604,2607,2611,2612,2614,2616,2619,2623,2627,2629,2631,2636,2638,2640,2643,2644,2646,2650,2652,2654,2656,2661,2662,2664,2670,2671,2674,2676,2678,2681,2682,2684,2689,2690,2692,2697,2701,2702,2706,2707,2710,2712,2716,2718,2722,2723,2725,2730,2732,2736,2737,2738,2742,2744,2748,2752,2753,2758,2762,2763,2768,2769,2771,2775,2778,2782,2787,2789,2791,2795,2798,2802,2805,2806,2809,2810,2814,2817,2821,2824,2828,2831,2833,2835,2839,2841,2846,2848,2852,2853,2855,2860,2861,2863,2868,2869,2871,2875,2879,2880,2886,2887,2888,2892,2894,2895,2901,2905,2907,2909,2913,2917,2919,2923,2924,2928,2931,2932,2934,2936,2942,2944,2948,2949,2951,2955,2956,2959,2960,2965,2966,2972,2973,2975,2977,2983,2984,2985,2991,2992,2994,2998,3001,3003,3007,3010,3012,3018,3019,3021,3026,3027,3029,3036,3037,3040,3043,3044,3047,3048,3056,3057,3059,3062,3063,3069,3070,3072,3076,3079,3084,3085,3087,3092,3094,3099,3100,3103,3108,3109,3111,3115,3117,3121,3122,3128,3132,3136,3138,3141,3143,3145,3150,3151,3154,3157,3158,3163,3164,3167,3170,3171,3177,3178,3181,3184,3185,3190,3191,3193,3199,3200,3201,3203,3208,3209,3212,3215,3216,3219,3224,3226,3229,3230,3232,3237,3238,3245,3246,3248,3249,3254,3255,3257,3262,3265,3266,3272,3273,3274,3275,3278,3281,3282,3285,3286,3290,3291,3296,3299,3300,3303,3304,3307,3310,3311,3316,3317,3320,3321,3325,3328,3329,3334,3335,3338,3339,3343,3347,3348,3350,3353,3354,3358,3362,3363,3365,3368,3369,3373,3375,3380,3381,3384,3388,3391,3394,3398,3399,3401,3406,3407,3410,3414,3417,3420,3421,3426,3427,3428,3434,3435,3440,3441,3443,3448,3449,3452,3456,3459,3460,3463,3464,3470,3471,3474,3478,3482,3483,3486,3487,3492,3493,3495,3500,3501,3504,3505,3511,3512,3513,3516,3518,3522,3527,3530,3534,3535,3537,3540,3542,3548,3549,3550,3552,3558,3559,3560,3564,3565,3567,3571,3576,3578,3580,3583,3585,3587,3590,3592,3594,3596,3598,3601,3603,3605,3609,3611,3613,3616,3618,3620,3622,3630,3631,3633,3634,3638,3640,3642,3647,3649,3653,3654,3658,3662,3664,3669,3671,3676,3677,3681,3683,3689,3690,3695,3696,3698,3701,3703,3708,3709,3711,3715,3718,3719,3722,3723,3729,3730,3733,3734,3739,3740,3741,3747,3748,3750,3755,3756,3758,3762,3765,3767,3773,3775,3777,3783,3787,3788,3791,3792,3797,3798,3801,3802,3807,3809,3811,3816,3818,3820,3821,3826,3827,3828,3832,3834,3836,3839,3840,3844,3846,3849,3853,3855,3859,3863,3865,3870,3875,3876,3878,3882,3886,3887,3889,3892,3893,3898,3899,3903,3904,3906,3909,3921,3922,3924,3925,3929,3931,3933,3939,3941,3942,3946,3948,3952,3958,3959,3961,3967,3968,3969,3971,3975,3980,3981,3982,3983,3985,3990,3991,3993,3997,4001,4002,4005,4009,4014,4015,4017,4021,4024,4030,4032,4034,4038,4040,4042,4046,4048,4050,4053,4054,4059,4060,4063,4064,4067,4070,4073,4078,4079,4082,4086,4087,4092,4094,4096,4098,4100,4102,4104,4108,4111,4114,4117,4120,4124,4127,4128,4134,4135,4137,4140,4141,4145,4149,4152,4157,4158,4161,4165,4166,4168,4171,4172,4177,4178,4182,4183,4185,4190,4191,4194,4195,4200,4201,4206,4208,4212,4214,4216,4220,4222,4224,4225,4228,4230,4233
-----computeFrom-----
141,142
141,143
144,145
144,146
146,147
146,148
154,155
154,156
164,165
164,166
167,168
167,169
168,169
168,170
186,187
186,188
199,200
199,201
208,209
208,210
216,217
216,218
223,224
223,225
225,226
225,227
250,251
250,252
255,256
255,257
260,261
260,262
265,266
265,267
268,269
268,270
278,279
278,280
293,294
293,295
304,305
304,306
309,310
309,311
314,315
314,316
319,320
319,321
325,326
325,327
326,327
326,328
328,329
328,330
343,344
343,345
361,362
361,363
364,365
364,366
379,380
379,381
384,385
384,386
415,416
415,417
423,424
423,425
436,437
436,438
446,447
446,448
459,460
459,461
469,470
469,471
472,473
472,474
485,486
485,487
497,498
497,499
503,504
503,505
508,509
508,510
537,538
537,539
545,546
545,547
551,552
551,553
559,560
559,561
574,575
574,576
583,584
583,585
589,590
589,591
599,600
599,601
606,607
606,608
621,622
621,623
628,629
628,630
634,635
634,636
639,640
639,641
643,644
643,645
668,669
668,670
672,673
672,674
693,694
693,695
699,700
699,701
702,703
702,704
703,704
703,705
709,710
709,711
721,722
721,723
726,727
726,728
731,732
731,733
742,743
742,744
744,745
744,746
762,763
762,764
770,771
770,772
785,786
785,787
787,788
787,789
793,794
793,795
802,803
802,804
807,808
807,809
814,815
814,816
820,821
820,822
825,826
825,827
840,841
840,842
847,848
847,849
875,876
875,877
886,887
886,888
889,890
889,891
900,901
900,902
901,902
901,903
902,903
902,904
903,904
903,905
905,906
905,907
906,907
906,908
919,920
919,921
927,928
927,929
928,929
928,930
937,938
937,939
946,947
946,948
950,951
950,952
958,959
958,960
981,982
981,983
997,998
997,999
1008,1009
1008,1010
1009,1010
1009,1011
1010,1011
1010,1012
1011,1012
1011,1013
1012,1013
1012,1014
1013,1014
1013,1015
1014,1015
1014,1016
1016,1017
1016,1018
1025,1026
1025,1027
1033,1034
1033,1035
1035,1036
1035,1037
1043,1044
1043,1045
1049,1050
1049,1051
1053,1054
1053,1055
1062,1063
1062,1064
1072,1073
1072,1074
1084,1085
1084,1086
1091,1092
1091,1093
1103,1104
1103,1105
1114,1115
1114,1116
1121,1122
1121,1123
1133,1134
1133,1135
1140,1141
1140,1142
1156,1157
1156,1158
1166,1167
1166,1168
1167,1168
1167,1169
1168,1169
1168,1170
1171,1172
1171,1173
1179,1180
1179,1181
1183,1184
1183,1185
1190,1191
1190,1192
1191,1192
1191,1193
1202,1203
1202,1204
1204,1205
1204,1206
1216,1217
1216,1218
1226,1227
1226,1228
1227,1228
1227,1229
1230,1231
1230,1232
1236,1237
1236,1238
1264,1265
1264,1266
1265,1266
1265,1267
1266,1267
1266,1268
1267,1268
1267,1269
1273,1274
1273,1275
1282,1283
1282,1284
1309,1310
1309,1311
1317,1318
1317,1319
1342,1343
1342,1344
1346,1347
1346,1348
1356,1357
1356,1358
1362,1363
1362,1364
1367,1368
1367,1369
1368,1369
1368,1370
1375,1376
1375,1377
1377,1378
1377,1379
1389,1390
1389,1391
1390,1391
1390,1392
1398,1399
1398,1400
1405,1406
1405,1407
1406,1407
1406,1408
1407,1408
1407,1409
1415,1416
1415,1417
1423,1424
1423,1425
1431,1432
1431,1433
1439,1440
1439,1441
1446,1447
1446,1448
1457,1458
1457,1459
1467,1468
1467,1469
1469,1470
1469,1471
1475,1476
1475,1477
1477,1478
1477,1479
1482,1483
1482,1484
1484,1485
1484,1486
1509,1510
1509,1511
1510,1511
1510,1512
1516,1517
1516,1518
1517,1518
1517,1519
1519,1520
1519,1521
1527,1528
1527,1529
1539,1540
1539,1541
1540,1541
1540,1542
1541,1542
1541,1543
1543,1544
1543,1545
1593,1594
1593,1595
1594,1595
1594,1596
1619,1620
1619,1621
1657,1658
1657,1659
1663,1664
1663,1665
1671,1672
1671,1673
1679,1680
1679,1681
1688,1689
1688,1690
1693,1694
1693,1695
1702,1703
1702,1704
1704,1705
1704,1706
1714,1715
1714,1716
1721,1722
1721,1723
1728,1729
1728,1730
1738,1739
1738,1740
1754,1755
1754,1756
1762,1763
1762,1764
1764,1765
1764,1766
1770,1771
1770,1772
1779,1780
1779,1781
1789,1790
1789,1791
1797,1798
1797,1799
1799,1800
1799,1801
1807,1808
1807,1809
1809,1810
1809,1811
1815,1816
1815,1817
1824,1825
1824,1826
1829,1830
1829,1831
1838,1839
1838,1840
1848,1849
1848,1850
1856,1857
1856,1858
1857,1858
1857,1859
1864,1865
1864,1866
1874,1875
1874,1876
1883,1884
1883,1885
1892,1893
1892,1894
1898,1899
1898,1900
1906,1907
1906,1908
1907,1908
1907,1909
1916,1917
1916,1918
1923,1924
1923,1925
1931,1932
1931,1933
1939,1940
1939,1941
1949,1950
1949,1951
1965,1966
1965,1967
1968,1969
1968,1970
1982,1983
1982,1984
1983,1984
1983,1985
1984,1985
1984,1986
1997,1998
1997,1999
2044,2045
2044,2046
2052,2053
2052,2054
2060,2061
2060,2062
2071,2072
2071,2073
2081,2082
2081,2083
2087,2088
2087,2089
2091,2092
2091,2093
2097,2098
2097,2099
2103,2104
2103,2105
2108,2109
2108,2110
2115,2116
2115,2117
2120,2121
2120,2122
2126,2127
2126,2128
2127,2128
2127,2129
2131,2132
2131,2133
2137,2138
2137,2139
2142,2143
2142,2144
2159,2160
2159,2161
2160,2161
2160,2162
2165,2166
2165,2167
2184,2185
2184,2186
2188,2189
2188,2190
2196,2197
2196,2198
2207,2208
2207,2209
2212,2213
2212,2214
2217,2218
2217,2219
2224,2225
2224,2226
2232,2233
2232,2234
2239,2240
2239,2241
2245,2246
2245,2247
2251,2252
2251,2253
2256,2257
2256,2258
2264,2265
2264,2266
2270,2271
2270,2272
2275,2276
2275,2277
2282,2283
2282,2284
2287,2288
2287,2289
2293,2294
2293,2295
2297,2298
2297,2299
2305,2306
2305,2307
2307,2308
2307,2309
2320,2321
2320,2322
2323,2324
2323,2325
2329,2330
2329,2331
2335,2336
2335,2337
2341,2342
2341,2343
2346,2347
2346,2348
2353,2354
2353,2355
2359,2360
2359,2361
2364,2365
2364,2366
2369,2370
2369,2371
2377,2378
2377,2379
2383,2384
2383,2385
2386,2387
2386,2388
2387,2388
2387,2389
2397,2398
2397,2399
2402,2403
2402,2404
2410,2411
2410,2412
2411,2412
2411,2413
2412,2413
2412,2414
2427,2428
2427,2429
2428,2429
2428,2430
2444,2445
2444,2446
2472,2473
2472,2474
2474,2475
2474,2476
2481,2482
2481,2483
2493,2494
2493,2495
2546,2547
2546,2548
2557,2558
2557,2559
2573,2574
2573,2575
2579,2580
2579,2581
2586,2587
2586,2588
2594,2595
2594,2596
2602,2603
2602,2604
2621,2622
2621,2623
2624,2625
2624,2626
2625,2626
2625,2627
2647,2648
2647,2649
2658,2659
2658,2660
2667,2668
2667,2669
2686,2687
2686,2688
2714,2715
2714,2716
2720,2721
2720,2722
2727,2728
2727,2729
2728,2729
2728,2730
2740,2741
2740,2742
2765,2766
2765,2767
2780,2781
2780,2782
2784,2785
2784,2786
2785,2786
2785,2787
2826,2827
2826,2828
2837,2838
2837,2839
2844,2845
2844,2846
2850,2851
2850,2852
2857,2858
2857,2859
2865,2866
2865,2867
2882,2883
2882,2884
2899,2900
2899,2901
2911,2912
2911,2913
2921,2922
2921,2923
2938,2939
2938,2940
2939,2940
2939,2941
2940,2941
2940,2942
2945,2946
2945,2947
2952,2953
2952,2954
2968,2969
2968,2970
2969,2970
2969,2971
2980,2981
2980,2982
2988,2989
2988,2990
2996,2997
2996,2998
2999,3000
2999,3001
3005,3006
3005,3007
3008,3009
3008,3010
3014,3015
3014,3016
3015,3016
3015,3017
3023,3024
3023,3025
3032,3033
3032,3034
3033,3034
3033,3035
3034,3035
3034,3036
3051,3052
3051,3053
3053,3054
3053,3055
3060,3061
3060,3062
3066,3067
3066,3068
3081,3082
3081,3083
3090,3091
3090,3092
3096,3097
3096,3098
3105,3106
3105,3107
3113,3114
3113,3115
3119,3120
3119,3121
3125,3126
3125,3127
3126,3127
3126,3128
3130,3131
3130,3132
3134,3135
3134,3136
3147,3148
3147,3149
3160,3161
3160,3162
3174,3175
3174,3176
3187,3188
3187,3189
3195,3196
3195,3197
3205,3206
3205,3207
3227,3228
3227,3229
3234,3235
3234,3236
3239,3240
3239,3241
3241,3242
3241,3243
3251,3252
3251,3253
3259,3260
3259,3261
3260,3261
3260,3262
3268,3269
3268,3270
3276,3277
3276,3278
3288,3289
3288,3290
3293,3294
3293,3295
3305,3306
3305,3307
3313,3314
3313,3315
3323,3324
3323,3325
3331,3332
3331,3333
3341,3342
3341,3343
3344,3345
3344,3346
3356,3357
3356,3358
3359,3360
3359,3361
3371,3372
3371,3373
3377,3378
3377,3379
3403,3404
3403,3405
3415,3416
3415,3417
3423,3424
3423,3425
3437,3438
3437,3439
3445,3446
3445,3447
3467,3468
3467,3469
3479,3480
3479,3481
3489,3490
3489,3491
3497,3498
3497,3499
3507,3508
3507,3509
3514,3515
3514,3516
3528,3529
3528,3530
3531,3532
3531,3533
3544,3545
3544,3546
3554,3555
3554,3556
3561,3562
3561,3563
3572,3573
3572,3574
3573,3574
3573,3575
3574,3575
3574,3576
3624,3625
3624,3626
3625,3626
3625,3627
3627,3628
3627,3629
3656,3657
3656,3658
3660,3661
3660,3662
3667,3668
3667,3669
3679,3680
3679,3681
3692,3693
3692,3694
3705,3706
3705,3707
3726,3727
3726,3728
3736,3737
3736,3738
3744,3745
3744,3746
3752,3753
3752,3754
3769,3770
3769,3771
3779,3780
3779,3781
3781,3782
3781,3783
3784,3785
3784,3786
3794,3795
3794,3796
3823,3824
3823,3825
3851,3852
3851,3853
3861,3862
3861,3863
3872,3873
3872,3874
3883,3884
3883,3885
3895,3896
3895,3897
3900,3901
3900,3902
3912,3913
3912,3914
3913,3914
3913,3915
3915,3916
3915,3917
3916,3917
3916,3918
3918,3919
3918,3920
3935,3936
3935,3937
3937,3938
3937,3939
3944,3945
3944,3946
3955,3956
3955,3957
3963,3964
3963,3965
3976,3977
3976,3978
3987,3988
3987,3989
4011,4012
4011,4013
4026,4027
4026,4028
4056,4057
4056,4058
4075,4076
4075,4077
4084,4085
4084,4086
4131,4132
4131,4133
4154,4155
4154,4156
4155,4156
4155,4157
4162,4163
4162,4164
4174,4175
4174,4176
4179,4180
4179,4181
4187,4188
4187,4189
4197,4198
4197,4199
4204,4205
4204,4206
-----guardedBy-----
177,184
203,212
202,211
241,248
345,475
350,532
353,377
381,386
499,529
577,624
585,608
695,738
723,728
748,775
746,772
758,765
789,809
816,822
894,1002
895,1003
893,1001
897,1006
955,1002
945,991
934,987
954,1001
1269,1425
1295,1450
1568,1585
1574,1588
1614,1630
1659,1665
1668,1674
1708,1920
1707,1962
1773,1786
1818,1877
1861,1878
1860,1877
1887,1920
1886,1962
1889,1922
1927,1947
1926,1962
1986,2385
1990,2395
1988,2393
1993,2390
1994,2391
2083,2093
2110,2122
2112,2124
2133,2236
2129,2247
2209,2214
2221,2234
2277,2289
2279,2291
2311,2337
2331,2339
2348,2355
2350,2357
2503,2512
2629,2656
2623,2664
2689,2712
2956,2966
2959,2965
2972,2991
2984,2992
2983,2991
3027,3109
3026,3108
3085,3100
3087,3103
3084,3099
3143,3157
3278,3290
3321,3339
3317,3335
3307,3325
3320,3338
3350,3365
3343,3358
3353,3368
3354,3369
3631,3696
3640,3839
3642,3820
3638,3807
3662,3671
3658,3681
3664,3683
3740,3748
3739,3755
3777,3836
3801,3839
3773,3807
3931,3990
4034,4050
4040,4053
4086,4098
4166,4183
4172,4178
4168,4185
4171,4182
-----guardedByNegation-----
636,719
1668,1682
2099,2124
2266,2291
2483,2544
2477,2512
2623,2684
2768,2809
3143,3170
3631,3876
3640,3903
-----lastLexicalUse-----
1668,1682
2623,2684
3143,3170
3631,3876
3640,3903
-----jump-----
1668,1682
2623,2684
3143,3170
3631,3876
3640,3903
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;LabelStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;ProblemStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;WhileStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;LiteralExpression;CompoundStatement;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LabelStatement;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;LabelStatement;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;CaseStatement;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ReturnStatement;UnaryExpression;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;DefaultStatement;ReturnStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;GotoStatement;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
inttcp_output(struct tcpcb *tp){	struct socket *so = tp->t_inpcb->inp_socket;	long len, recwin, sendwin;	int off, flags, error = 0;	/* Keep compiler happy */	struct mbuf *m;	struct ip *ip = NULL;	struct ipovly *ipov = NULL;	struct tcphdr *th;	u_char opt[TCP_MAXOLEN];	unsigned ipoptlen, optlen, hdrlen;#ifdef IPSEC	unsigned ipsec_optlen = 0;#endif	int idle, sendalot;	int sack_rxmit, sack_bytes_rxmt;	struct sackhole *p;	int tso, mtu;	struct tcpopt to;#if 0	int maxburst = TCP_MAXBURST;#endif#ifdef INET6	struct ip6_hdr *ip6 = NULL;	int isipv6;	isipv6 = (tp->t_inpcb->inp_vflag & INP_IPV6) != 0;#endif	INP_WLOCK_ASSERT(tp->t_inpcb);#ifdef TCP_OFFLOAD	if (tp->t_flags & TF_TOE)		return (tcp_offload_output(tp));#endif	/*	 * Determine length of data that should be transmitted,	 * and flags that will be used.	 * If there is some data or critical controls (SYN, RST)	 * to send, then transmit; otherwise, investigate further.	 */	idle = (tp->t_flags & TF_LASTIDLE) || (tp->snd_max == tp->snd_una);	if (idle && ticks - tp->t_rcvtime >= tp->t_rxtcur)		cc_after_idle(tp);	tp->t_flags &= ~TF_LASTIDLE;	if (idle) {		if (tp->t_flags & TF_MORETOCOME) {			tp->t_flags |= TF_LASTIDLE;			idle = 0;		}	}again:	/*	 * If we've recently taken a timeout, snd_max will be greater than	 * snd_nxt.  There may be SACK information that allows us to avoid	 * resending already delivered data.  Adjust snd_nxt accordingly.	 */	if ((tp->t_flags & TF_SACK_PERMIT) &&	    SEQ_LT(tp->snd_nxt, tp->snd_max))		tcp_sack_adjust(tp);	sendalot = 0;	tso = 0;	mtu = 0;	off = tp->snd_nxt - tp->snd_una;	sendwin = min(tp->snd_wnd, tp->snd_cwnd);	flags = tcp_outflags[tp->t_state];	/*	 * Send any SACK-generated retransmissions.  If we're explicitly trying	 * to send out new data (when sendalot is 1), bypass this function.	 * If we retransmit in fast recovery mode, decrement snd_cwnd, since	 * we're replacing a (future) new transmission with a retransmission	 * now, and we previously incremented snd_cwnd in tcp_input().	 */	/*	 * Still in sack recovery , reset rxmit flag to zero.	 */	sack_rxmit = 0;	sack_bytes_rxmt = 0;	len = 0;	p = NULL;	if ((tp->t_flags & TF_SACK_PERMIT) && IN_FASTRECOVERY(tp->t_flags) &&	    (p = tcp_sack_output(tp, &sack_bytes_rxmt))) {		long cwin;		cwin = min(tp->snd_wnd, tp->snd_cwnd) - sack_bytes_rxmt;		if (cwin < 0)			cwin = 0;		/* Do not retransmit SACK segments beyond snd_recover */		if (SEQ_GT(p->end, tp->snd_recover)) {			/*			 * (At least) part of sack hole extends beyond			 * snd_recover. Check to see if we can rexmit data			 * for this hole.			 */			if (SEQ_GEQ(p->rxmit, tp->snd_recover)) {				/*				 * Can't rexmit any more data for this hole.				 * That data will be rexmitted in the next				 * sack recovery episode, when snd_recover				 * moves past p->rxmit.				 */				p = NULL;				goto after_sack_rexmit;			} else				/* Can rexmit part of the current hole */				len = ((long)ulmin(cwin,						   tp->snd_recover - p->rxmit));		} else			len = ((long)ulmin(cwin, p->end - p->rxmit));		off = p->rxmit - tp->snd_una;		KASSERT(off >= 0,("%s: sack block to the left of una : %d",		    __func__, off));		if (len > 0) {			sack_rxmit = 1;			sendalot = 1;			TCPSTAT_INC(tcps_sack_rexmits);			TCPSTAT_ADD(tcps_sack_rexmit_bytes,			    min(len, tp->t_maxseg));		}	}after_sack_rexmit:	/*	 * Get standard flags, and add SYN or FIN if requested by 'hidden'	 * state flags.	 */	if (tp->t_flags & TF_NEEDFIN)		flags |= TH_FIN;	if (tp->t_flags & TF_NEEDSYN)		flags |= TH_SYN;	SOCKBUF_LOCK(&so->so_snd);	/*	 * If in persist timeout with window of 0, send 1 byte.	 * Otherwise, if window is small but nonzero	 * and timer expired, we will send what we can	 * and go to transmit state.	 */	if (tp->t_flags & TF_FORCEDATA) {		if (sendwin == 0) {			/*			 * If we still have some data to send, then			 * clear the FIN bit.  Usually this would			 * happen below when it realizes that we			 * aren't sending all the data.  However,			 * if we have exactly 1 byte of unsent data,			 * then it won't clear the FIN bit below,			 * and if we are in persist state, we wind			 * up sending the packet without recording			 * that we sent the FIN bit.			 *			 * We can't just blindly clear the FIN bit,			 * because if we don't have any more data			 * to send then the probe will be the FIN			 * itself.			 */			if (off < so->so_snd.sb_cc)				flags &= ~TH_FIN;			sendwin = 1;		} else {			tcp_timer_activate(tp, TT_PERSIST, 0);			tp->t_rxtshift = 0;		}	}	/*	 * If snd_nxt == snd_max and we have transmitted a FIN, the	 * offset will be > 0 even if so_snd.sb_cc is 0, resulting in	 * a negative length.  This can also occur when TCP opens up	 * its congestion window while receiving additional duplicate	 * acks after fast-retransmit because TCP will reset snd_nxt	 * to snd_max after the fast-retransmit.	 *	 * In the normal retransmit-FIN-only case, however, snd_nxt will	 * be set to snd_una, the offset will be 0, and the length may	 * wind up 0.	 *	 * If sack_rxmit is true we are retransmitting from the scoreboard	 * in which case len is already set.	 */	if (sack_rxmit == 0) {		if (sack_bytes_rxmt == 0)			len = ((long)ulmin(so->so_snd.sb_cc, sendwin) - off);		else {			long cwin;                        /*			 * We are inside of a SACK recovery episode and are			 * sending new data, having retransmitted all the			 * data possible in the scoreboard.			 */			len = ((long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)			       - off);			/*			 * Don't remove this (len > 0) check !			 * We explicitly check for len > 0 here (although it			 * isn't really necessary), to work around a gcc			 * optimization issue - to force gcc to compute			 * len above. Without this check, the computation			 * of len is bungled by the optimizer.			 */			if (len > 0) {				cwin = tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata) -					sack_bytes_rxmt;				if (cwin < 0)					cwin = 0;				len = lmin(len, cwin);			}		}	}	/*	 * Lop off SYN bit if it has already been sent.  However, if this	 * is SYN-SENT state and if segment contains data and if we don't	 * know that foreign host supports TAO, suppress sending segment.	 */	if ((flags & TH_SYN) && SEQ_GT(tp->snd_nxt, tp->snd_una)) {		if (tp->t_state != TCPS_SYN_RECEIVED)			flags &= ~TH_SYN;		off--, len++;	}	/*	 * Be careful not to send data and/or FIN on SYN segments.	 * This measure is needed to prevent interoperability problems	 * with not fully conformant TCP implementations.	 */	if ((flags & TH_SYN) && (tp->t_flags & TF_NOOPT)) {		len = 0;		flags &= ~TH_FIN;	}	if (len < 0) {		/*		 * If FIN has been sent but not acked,		 * but we haven't been called to retransmit,		 * len will be < 0.  Otherwise, window shrank		 * after we sent into it.  If window shrank to 0,		 * cancel pending retransmit, pull snd_nxt back		 * to (closed) window, and set the persist timer		 * if it isn't already going.  If the window didn't		 * close completely, just wait for an ACK.		 */		len = 0;		if (sendwin == 0) {			tcp_timer_activate(tp, TT_REXMT, 0);			tp->t_rxtshift = 0;			tp->snd_nxt = tp->snd_una;			if (!tcp_timer_active(tp, TT_PERSIST))				tcp_setpersist(tp);		}	}	/* len will be >= 0 after this point. */	KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__));	/*	 * Automatic sizing of send socket buffer.  Often the send buffer	 * size is not optimally adjusted to the actual network conditions	 * at hand (delay bandwidth product).  Setting the buffer size too	 * small limits throughput on links with high bandwidth and high	 * delay (eg. trans-continental/oceanic links).  Setting the	 * buffer size too big consumes too much real kernel memory,	 * especially with many connections on busy servers.	 *	 * The criteria to step up the send buffer one notch are:	 *  1. receive window of remote host is larger than send buffer	 *     (with a fudge factor of 5/4th);	 *  2. send buffer is filled to 7/8th with data (so we actually	 *     have data to make use of it);	 *  3. send buffer fill has not hit maximal automatic size;	 *  4. our send window (slow start and cogestion controlled) is	 *     larger than sent but unacknowledged data in send buffer.	 *	 * The remote host receive window scaling factor may limit the	 * growing of the send buffer before it reaches its allowed	 * maximum.	 *	 * It scales directly with slow start or congestion window	 * and does at most one step per received ACK.  This fast	 * scaling has the drawback of growing the send buffer beyond	 * what is strictly necessary to make full use of a given	 * delay*bandwith product.  However testing has shown this not	 * to be much of an problem.  At worst we are trading wasting	 * of available bandwith (the non-use of it) for wasting some	 * socket buffer memory.	 *	 * TODO: Shrink send buffer during idle periods together	 * with congestion window.  Requires another timer.  Has to	 * wait for upcoming tcp timer rewrite.	 */	if (V_tcp_do_autosndbuf && so->so_snd.sb_flags & SB_AUTOSIZE) {		if ((tp->snd_wnd / 4 * 5) >= so->so_snd.sb_hiwat &&		    so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7) &&		    so->so_snd.sb_cc < V_tcp_autosndbuf_max &&		    sendwin >= (so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una))) {			if (!sbreserve_locked(&so->so_snd,			    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,			     V_tcp_autosndbuf_max), so, curthread))				so->so_snd.sb_flags &= ~SB_AUTOSIZE;		}	}	/*	 * Decide if we can use TCP Segmentation Offloading (if supported by	 * hardware).	 *	 * TSO may only be used if we are in a pure bulk sending state.  The	 * presence of TCP-MD5, SACK retransmits, SACK advertizements and	 * IP options prevent using TSO.  With TSO the TCP header is the same	 * (except for the sequence number) for all generated packets.  This	 * makes it impossible to transmit any options which vary per generated	 * segment or packet.	 */#ifdef IPSEC	/*	 * Pre-calculate here as we save another lookup into the darknesses	 * of IPsec that way and can actually decide if TSO is ok.	 */	ipsec_optlen = ipsec_hdrsiz_tcp(tp);#endif	if ((tp->t_flags & TF_TSO) && V_tcp_do_tso && len > tp->t_maxseg &&	    ((tp->t_flags & TF_SIGNATURE) == 0) &&	    tp->rcv_numsacks == 0 && sack_rxmit == 0 &&#ifdef IPSEC	    ipsec_optlen == 0 &&#endif	    tp->t_inpcb->inp_options == NULL &&	    tp->t_inpcb->in6p_options == NULL)		tso = 1;	if (sack_rxmit) {		if (SEQ_LT(p->rxmit + len, tp->snd_una + so->so_snd.sb_cc))			flags &= ~TH_FIN;	} else {		if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))			flags &= ~TH_FIN;	}	recwin = sbspace(&so->so_rcv);	/*	 * Sender silly window avoidance.   We transmit under the following	 * conditions when len is non-zero:	 *	 *	- We have a full segment (or more with TSO)	 *	- This is the last buffer in a write()/send() and we are	 *	  either idle or running NODELAY	 *	- we've timed out (e.g. persist timer)	 *	- we have more then 1/2 the maximum send window's worth of	 *	  data (receiver may be limited the window size)	 *	- we need to retransmit	 */	if (len) {		if (len >= tp->t_maxseg)			goto send;		/*		 * NOTE! on localhost connections an 'ack' from the remote		 * end may occur synchronously with the output and cause		 * us to flush a buffer queued with moretocome.  XXX		 *		 * note: the len + off check is almost certainly unnecessary.		 */		if (!(tp->t_flags & TF_MORETOCOME) &&	/* normal case */		    (idle || (tp->t_flags & TF_NODELAY)) &&		    len + off >= so->so_snd.sb_cc &&		    (tp->t_flags & TF_NOPUSH) == 0) {			goto send;		}		if (tp->t_flags & TF_FORCEDATA)		/* typ. timeout case */			goto send;		if (len >= tp->max_sndwnd / 2 && tp->max_sndwnd > 0)			goto send;		if (SEQ_LT(tp->snd_nxt, tp->snd_max))	/* retransmit case */			goto send;		if (sack_rxmit)			goto send;	}	/*	 * Sending of standalone window updates.	 *	 * Window updates are important when we close our window due to a	 * full socket buffer and are opening it again after the application	 * reads data from it.  Once the window has opened again and the	 * remote end starts to send again the ACK clock takes over and	 * provides the most current window information.	 *	 * We must avoid the silly window syndrome whereas every read	 * from the receive buffer, no matter how small, causes a window	 * update to be sent.  We also should avoid sending a flurry of	 * window updates when the socket buffer had queued a lot of data	 * and the application is doing small reads.	 *	 * Prevent a flurry of pointless window updates by only sending	 * an update when we can increase the advertized window by more	 * than 1/4th of the socket buffer capacity.  When the buffer is	 * getting full or is very small be more aggressive and send an	 * update whenever we can increase by two mss sized segments.	 * In all other situations the ACK's to new incoming data will	 * carry further window increases.	 *	 * Don't send an independent window update if a delayed	 * ACK is pending (it will get piggy-backed on it) or the	 * remote side already has done a half-close and won't send	 * more data.  Skip this if the connection is in T/TCP	 * half-open state.	 */	if (recwin > 0 && !(tp->t_flags & TF_NEEDSYN) &&	    !(tp->t_flags & TF_DELACK) &&	    !TCPS_HAVERCVDFIN(tp->t_state)) {		/*		 * "adv" is the amount we could increase the window,		 * taking into account that we are limited by		 * TCP_MAXWIN << tp->rcv_scale.		 */		long adv;		int oldwin;		adv = min(recwin, (long)TCP_MAXWIN << tp->rcv_scale);		if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt)) {			oldwin = (tp->rcv_adv - tp->rcv_nxt);			adv -= oldwin;		} else			oldwin = 0;		/*		 * If the new window size ends up being the same as the old		 * size when it is scaled, then don't force a window update.		 */		if (oldwin >> tp->rcv_scale == (adv + oldwin) >> tp->rcv_scale)			goto dontupdate;		if (adv >= (long)(2 * tp->t_maxseg) &&		    (adv >= (long)(so->so_rcv.sb_hiwat / 4) ||		     recwin <= (long)(so->so_rcv.sb_hiwat / 8) ||		     so->so_rcv.sb_hiwat <= 8 * tp->t_maxseg))			goto send;	}dontupdate:	/*	 * Send if we owe the peer an ACK, RST, SYN, or urgent data.  ACKNOW	 * is also a catch-all for the retransmit timer timeout case.	 */	if (tp->t_flags & TF_ACKNOW)		goto send;	if ((flags & TH_RST) ||	    ((flags & TH_SYN) && (tp->t_flags & TF_NEEDSYN) == 0))		goto send;	if (SEQ_GT(tp->snd_up, tp->snd_una))		goto send;	/*	 * If our state indicates that FIN should be sent	 * and we have not yet done so, then we need to send.	 */	if (flags & TH_FIN &&	    ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una))		goto send;	/*	 * In SACK, it is possible for tcp_output to fail to send a segment	 * after the retransmission timer has been turned off.  Make sure	 * that the retransmission timer is set.	 */	if ((tp->t_flags & TF_SACK_PERMIT) &&	    SEQ_GT(tp->snd_max, tp->snd_una) &&	    !tcp_timer_active(tp, TT_REXMT) &&	    !tcp_timer_active(tp, TT_PERSIST)) {		tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		goto just_return;	}	/*	 * TCP window updates are not reliable, rather a polling protocol	 * using ``persist'' packets is used to insure receipt of window	 * updates.  The three ``states'' for the output side are:	 *	idle			not doing retransmits or persists	 *	persisting		to move a small or zero window	 *	(re)transmitting	and thereby not persisting	 *	 * tcp_timer_active(tp, TT_PERSIST)	 *	is true when we are in persist state.	 * (tp->t_flags & TF_FORCEDATA)	 *	is set when we are called to send a persist packet.	 * tcp_timer_active(tp, TT_REXMT)	 *	is set when we are retransmitting	 * The output side is idle when both timers are zero.	 *	 * If send window is too small, there is data to transmit, and no	 * retransmit or persist is pending, then go to persist state.	 * If nothing happens soon, send when timer expires:	 * if window is nonzero, transmit what we can,	 * otherwise force out a byte.	 */	if (so->so_snd.sb_cc && !tcp_timer_active(tp, TT_REXMT) &&	    !tcp_timer_active(tp, TT_PERSIST)) {		tp->t_rxtshift = 0;		tcp_setpersist(tp);	}	/*	 * No reason to send a segment, just return.	 */just_return:	SOCKBUF_UNLOCK(&so->so_snd);	return (0);send:	SOCKBUF_LOCK_ASSERT(&so->so_snd);	if (len > 0) {		if (len >= tp->t_maxseg)			tp->t_flags2 |= TF2_PLPMTU_MAXSEGSNT;		else			tp->t_flags2 &= ~TF2_PLPMTU_MAXSEGSNT;	}	/*	 * Before ESTABLISHED, force sending of initial options	 * unless TCP set not to do any options.	 * NOTE: we assume that the IP/TCP header plus TCP options	 * always fit in a single mbuf, leaving room for a maximum	 * link header, i.e.	 *	max_linkhdr + sizeof (struct tcpiphdr) + optlen <= MCLBYTES	 */	optlen = 0;#ifdef INET6	if (isipv6)		hdrlen = sizeof (struct ip6_hdr) + sizeof (struct tcphdr);	else#endif		hdrlen = sizeof (struct tcpiphdr);	/*	 * Compute options for segment.	 * We only have to care about SYN and established connection	 * segments.  Options for SYN-ACK segments are handled in TCP	 * syncache.	 */	if ((tp->t_flags & TF_NOOPT) == 0) {		to.to_flags = 0;		/* Maximum segment size. */		if (flags & TH_SYN) {			tp->snd_nxt = tp->iss;			to.to_mss = tcp_mssopt(&tp->t_inpcb->inp_inc);			to.to_flags |= TOF_MSS;		}		/* Window scaling. */		if ((flags & TH_SYN) && (tp->t_flags & TF_REQ_SCALE)) {			to.to_wscale = tp->request_r_scale;			to.to_flags |= TOF_SCALE;		}		/* Timestamps. */		if ((tp->t_flags & TF_RCVD_TSTMP) ||		    ((flags & TH_SYN) && (tp->t_flags & TF_REQ_TSTMP))) {			to.to_tsval = tcp_ts_getticks() + tp->ts_offset;			to.to_tsecr = tp->ts_recent;			to.to_flags |= TOF_TS;			/* Set receive buffer autosizing timestamp. */			if (tp->rfbuf_ts == 0 &&			    (so->so_rcv.sb_flags & SB_AUTOSIZE))				tp->rfbuf_ts = tcp_ts_getticks();		}		/* Selective ACK's. */		if (tp->t_flags & TF_SACK_PERMIT) {			if (flags & TH_SYN)				to.to_flags |= TOF_SACKPERM;			else if (TCPS_HAVEESTABLISHED(tp->t_state) &&			    (tp->t_flags & TF_SACK_PERMIT) &&			    tp->rcv_numsacks > 0) {				to.to_flags |= TOF_SACK;				to.to_nsacks = tp->rcv_numsacks;				to.to_sacks = (u_char *)tp->sackblks;			}		}#ifdef TCP_SIGNATURE		/* TCP-MD5 (RFC2385). */		if (tp->t_flags & TF_SIGNATURE)			to.to_flags |= TOF_SIGNATURE;#endif /* TCP_SIGNATURE */		/* Processing the options. */		hdrlen += optlen = tcp_addoptions(&to, opt);	}#ifdef INET6	if (isipv6)		ipoptlen = ip6_optlen(tp->t_inpcb);	else#endif	if (tp->t_inpcb->inp_options)		ipoptlen = tp->t_inpcb->inp_options->m_len -				offsetof(struct ipoption, ipopt_list);	else		ipoptlen = 0;#ifdef IPSEC	ipoptlen += ipsec_optlen;#endif	/*	 * Adjust data length if insertion of options will	 * bump the packet length beyond the t_maxopd length.	 * Clear the FIN bit because we cut off the tail of	 * the segment.	 */	if (len + optlen + ipoptlen > tp->t_maxopd) {		flags &= ~TH_FIN;		if (tso) {			u_int if_hw_tsomax;			u_int if_hw_tsomaxsegcount;			u_int if_hw_tsomaxsegsize;			struct mbuf *mb;			u_int moff;			int max_len;			/* extract TSO information */			if_hw_tsomax = tp->t_tsomax;			if_hw_tsomaxsegcount = tp->t_tsomaxsegcount;			if_hw_tsomaxsegsize = tp->t_tsomaxsegsize;			/*			 * Limit a TSO burst to prevent it from			 * overflowing or exceeding the maximum length			 * allowed by the network interface:			 */			KASSERT(ipoptlen == 0,			    ("%s: TSO can't do IP options", __func__));			/*			 * Check if we should limit by maximum payload			 * length:			 */			if (if_hw_tsomax != 0) {				/* compute maximum TSO length */				max_len = (if_hw_tsomax - hdrlen);				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Check if we should limit by maximum segment			 * size and count:			 */			if (if_hw_tsomaxsegcount != 0 &&			    if_hw_tsomaxsegsize != 0) {				max_len = 0;				mb = sbsndmbuf(&so->so_snd, off, &moff);				while (mb != NULL && max_len < len) {					u_int mlen;					u_int frags;					/*					 * Get length of mbuf fragment					 * and how many hardware frags,					 * rounded up, it would use:					 */					mlen = (mb->m_len - moff);					frags = howmany(mlen,					    if_hw_tsomaxsegsize);					/* Handle special case: Zero Length Mbuf */					if (frags == 0)						frags = 1;					/*					 * Check if the fragment limit					 * will be reached or exceeded:					 */					if (frags >= if_hw_tsomaxsegcount) {						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}					max_len += mlen;					if_hw_tsomaxsegcount -= frags;					moff = 0;					mb = mb->m_next;				}				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Prevent the last segment from being			 * fractional unless the send sockbuf can be			 * emptied:			 */			max_len = (tp->t_maxopd - optlen);			if ((off + len) < so->so_snd.sb_cc) {				moff = len % max_len;				if (moff != 0) {					len -= moff;					sendalot = 1;				}			}			/*			 * In case there are too many small fragments			 * don't use TSO:			 */			if (len <= max_len) {				len = max_len;				sendalot = 1;				tso = 0;			}			/*			 * Send the FIN in a separate segment			 * after the bulk sending is done.			 * We don't trust the TSO implementations			 * to clear the FIN flag on all but the			 * last segment.			 */			if (tp->t_flags & TF_NEEDFIN)				sendalot = 1;		} else {			len = tp->t_maxopd - optlen - ipoptlen;			sendalot = 1;		}	} else		tso = 0;	KASSERT(len + hdrlen + ipoptlen <= IP_MAXPACKET,	    ("%s: len > IP_MAXPACKET", __func__));/*#ifdef DIAGNOSTIC*/#ifdef INET6	if (max_linkhdr + hdrlen > MCLBYTES)#else	if (max_linkhdr + hdrlen > MHLEN)#endif		panic("tcphdr too big");/*#endif*/	/*	 * This KASSERT is here to catch edge cases at a well defined place.	 * Before, those had triggered (random) panic conditions further down.	 */	KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__));	/*	 * Grab a header mbuf, attaching a copy of data to	 * be transmitted, and initialize the header from	 * the template for sends on this connection.	 */	if (len) {		struct mbuf *mb;		u_int moff;		if ((tp->t_flags & TF_FORCEDATA) && len == 1)			TCPSTAT_INC(tcps_sndprobe);		else if (SEQ_LT(tp->snd_nxt, tp->snd_max) || sack_rxmit) {			tp->t_sndrexmitpack++;			TCPSTAT_INC(tcps_sndrexmitpack);			TCPSTAT_ADD(tcps_sndrexmitbyte, len);		} else {			TCPSTAT_INC(tcps_sndpack);			TCPSTAT_ADD(tcps_sndbyte, len);		}#ifdef INET6		if (MHLEN < hdrlen + max_linkhdr)			m = m_getcl(M_NOWAIT, MT_DATA, M_PKTHDR);		else#endif			m = m_gethdr(M_NOWAIT, MT_DATA);		if (m == NULL) {			SOCKBUF_UNLOCK(&so->so_snd);			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}		m->m_data += max_linkhdr;		m->m_len = hdrlen;		/*		 * Start the m_copy functions from the closest mbuf		 * to the offset in the socket buffer chain.		 */		mb = sbsndptr(&so->so_snd, off, len, &moff);		if (len <= MHLEN - hdrlen - max_linkhdr) {			m_copydata(mb, moff, (int)len,			    mtod(m, caddr_t) + hdrlen);			m->m_len += len;		} else {			m->m_next = m_copy(mb, moff, (int)len);			if (m->m_next == NULL) {				SOCKBUF_UNLOCK(&so->so_snd);				(void) m_free(m);				error = ENOBUFS;				sack_rxmit = 0;				goto out;			}		}		/*		 * If we're sending everything we've got, set PUSH.		 * (This will keep happy those implementations which only		 * give data to the user when a buffer fills or		 * a PUSH comes in.)		 */		if (off + len == so->so_snd.sb_cc)			flags |= TH_PUSH;		SOCKBUF_UNLOCK(&so->so_snd);	} else {		SOCKBUF_UNLOCK(&so->so_snd);		if (tp->t_flags & TF_ACKNOW)			TCPSTAT_INC(tcps_sndacks);		else if (flags & (TH_SYN|TH_FIN|TH_RST))			TCPSTAT_INC(tcps_sndctrl);		else if (SEQ_GT(tp->snd_up, tp->snd_una))			TCPSTAT_INC(tcps_sndurg);		else			TCPSTAT_INC(tcps_sndwinup);		m = m_gethdr(M_NOWAIT, MT_DATA);		if (m == NULL) {			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}#ifdef INET6		if (isipv6 && (MHLEN < hdrlen + max_linkhdr) &&		    MHLEN >= hdrlen) {			MH_ALIGN(m, hdrlen);		} else#endif		m->m_data += max_linkhdr;		m->m_len = hdrlen;	}	SOCKBUF_UNLOCK_ASSERT(&so->so_snd);	m->m_pkthdr.rcvif = (struct ifnet *)0;#ifdef MAC	mac_inpcb_create_mbuf(tp->t_inpcb, m);#endif#ifdef INET6	if (isipv6) {		ip6 = mtod(m, struct ip6_hdr *);		th = (struct tcphdr *)(ip6 + 1);		tcpip_fillheaders(tp->t_inpcb, ip6, th);	} else#endif /* INET6 */	{		ip = mtod(m, struct ip *);		ipov = (struct ipovly *)ip;		th = (struct tcphdr *)(ip + 1);		tcpip_fillheaders(tp->t_inpcb, ip, th);	}	/*	 * Fill in fields, remembering maximum advertised	 * window for use in delaying messages about window sizes.	 * If resending a FIN, be sure not to use a new sequence number.	 */	if (flags & TH_FIN && tp->t_flags & TF_SENTFIN &&	    tp->snd_nxt == tp->snd_max)		tp->snd_nxt--;	/*	 * If we are starting a connection, send ECN setup	 * SYN packet. If we are on a retransmit, we may	 * resend those bits a number of times as per	 * RFC 3168.	 */	if (tp->t_state == TCPS_SYN_SENT && V_tcp_do_ecn) {		if (tp->t_rxtshift >= 1) {			if (tp->t_rxtshift <= V_tcp_ecn_maxretries)				flags |= TH_ECE|TH_CWR;		} else			flags |= TH_ECE|TH_CWR;	}	if (tp->t_state == TCPS_ESTABLISHED &&	    (tp->t_flags & TF_ECN_PERMIT)) {		/*		 * If the peer has ECN, mark data packets with		 * ECN capable transmission (ECT).		 * Ignore pure ack packets, retransmissions and window probes.		 */		if (len > 0 && SEQ_GEQ(tp->snd_nxt, tp->snd_max) &&		    !((tp->t_flags & TF_FORCEDATA) && len == 1)) {#ifdef INET6			if (isipv6)				ip6->ip6_flow |= htonl(IPTOS_ECN_ECT0 << 20);			else#endif				ip->ip_tos |= IPTOS_ECN_ECT0;			TCPSTAT_INC(tcps_ecn_ect0);		}		/*		 * Reply with proper ECN notifications.		 */		if (tp->t_flags & TF_ECN_SND_CWR) {			flags |= TH_CWR;			tp->t_flags &= ~TF_ECN_SND_CWR;		}		if (tp->t_flags & TF_ECN_SND_ECE)			flags |= TH_ECE;	}	/*	 * If we are doing retransmissions, then snd_nxt will	 * not reflect the first unsent octet.  For ACK only	 * packets, we do not want the sequence number of the	 * retransmitted packet, we want the sequence number	 * of the next unsent octet.  So, if there is no data	 * (and no SYN or FIN), use snd_max instead of snd_nxt	 * when filling in ti_seq.  But if we are in persist	 * state, snd_max might reflect one byte beyond the	 * right edge of the window, so use snd_nxt in that	 * case, since we know we aren't doing a retransmission.	 * (retransmit and persist are mutually exclusive...)	 */	if (sack_rxmit == 0) {		if (len || (flags & (TH_SYN|TH_FIN)) ||		    tcp_timer_active(tp, TT_PERSIST))			th->th_seq = htonl(tp->snd_nxt);		else			th->th_seq = htonl(tp->snd_max);	} else {		th->th_seq = htonl(p->rxmit);		p->rxmit += len;		tp->sackhint.sack_bytes_rexmit += len;	}	th->th_ack = htonl(tp->rcv_nxt);	if (optlen) {		bcopy(opt, th + 1, optlen);		th->th_off = (sizeof (struct tcphdr) + optlen) >> 2;	}	th->th_flags = flags;	/*	 * Calculate receive window.  Don't shrink window,	 * but avoid silly window syndrome.	 */	if (recwin < (long)(so->so_rcv.sb_hiwat / 4) &&	    recwin < (long)tp->t_maxseg)		recwin = 0;	if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt) &&	    recwin < (long)(tp->rcv_adv - tp->rcv_nxt))		recwin = (long)(tp->rcv_adv - tp->rcv_nxt);	if (recwin > (long)TCP_MAXWIN << tp->rcv_scale)		recwin = (long)TCP_MAXWIN << tp->rcv_scale;	/*	 * According to RFC1323 the window field in a SYN (i.e., a <SYN>	 * or <SYN,ACK>) segment itself is never scaled.  The <SYN,ACK>	 * case is handled in syncache.	 */	if (flags & TH_SYN)		th->th_win = htons((u_short)				(min(sbspace(&so->so_rcv), TCP_MAXWIN)));	else		th->th_win = htons((u_short)(recwin >> tp->rcv_scale));	/*	 * Adjust the RXWIN0SENT flag - indicate that we have advertised	 * a 0 window.  This may cause the remote transmitter to stall.  This	 * flag tells soreceive() to disable delayed acknowledgements when	 * draining the buffer.  This can occur if the receiver is attempting	 * to read more data than can be buffered prior to transmitting on	 * the connection.	 */	if (th->th_win == 0) {		tp->t_sndzerowin++;		tp->t_flags |= TF_RXWIN0SENT;	} else		tp->t_flags &= ~TF_RXWIN0SENT;	if (SEQ_GT(tp->snd_up, tp->snd_nxt)) {		th->th_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));		th->th_flags |= TH_URG;	} else		/*		 * If no urgent pointer to send, then we pull		 * the urgent pointer to the left edge of the send window		 * so that it doesn't drift into the send window on sequence		 * number wraparound.		 */		tp->snd_up = tp->snd_una;		/* drag it along */#ifdef TCP_SIGNATURE	if (tp->t_flags & TF_SIGNATURE) {		int sigoff = to.to_signature - opt;		tcp_signature_compute(m, 0, len, optlen,		    (u_char *)(th + 1) + sigoff, IPSEC_DIR_OUTBOUND);	}#endif	/*	 * Put TCP length in extended header, and then	 * checksum extended header and data.	 */	m->m_pkthdr.len = hdrlen + len; /* in6_cksum() need this */	m->m_pkthdr.csum_data = offsetof(struct tcphdr, th_sum);#ifdef INET6	if (isipv6) {		/*		 * ip6_plen is not need to be filled now, and will be filled		 * in ip6_output.		 */		m->m_pkthdr.csum_flags = CSUM_TCP_IPV6;		th->th_sum = in6_cksum_pseudo(ip6, sizeof(struct tcphdr) +		    optlen + len, IPPROTO_TCP, 0);	}#endif#if defined(INET6) && defined(INET)	else#endif#ifdef INET	{		m->m_pkthdr.csum_flags = CSUM_TCP;		th->th_sum = in_pseudo(ip->ip_src.s_addr, ip->ip_dst.s_addr,		    htons(sizeof(struct tcphdr) + IPPROTO_TCP + len + optlen));		/* IP version must be set here for ipv4/ipv6 checking later */		KASSERT(ip->ip_v == IPVERSION,		    ("%s: IP version incorrect: %d", __func__, ip->ip_v));	}#endif	/*	 * Enable TSO and specify the size of the segments.	 * The TCP pseudo header checksum is always provided.	 * XXX: Fixme: This is currently not the case for IPv6.	 */	if (tso) {		KASSERT(len > tp->t_maxopd - optlen,		    ("%s: len <= tso_segsz", __func__));		m->m_pkthdr.csum_flags |= CSUM_TSO;		m->m_pkthdr.tso_segsz = tp->t_maxopd - optlen;	}#ifdef IPSEC	KASSERT(len + hdrlen + ipoptlen - ipsec_optlen == m_length(m, NULL),	    ("%s: mbuf chain shorter than expected: %ld + %u + %u - %u != %u",	    __func__, len, hdrlen, ipoptlen, ipsec_optlen, m_length(m, NULL)));#else	KASSERT(len + hdrlen + ipoptlen == m_length(m, NULL),	    ("%s: mbuf chain shorter than expected: %ld + %u + %u != %u",	    __func__, len, hdrlen, ipoptlen, m_length(m, NULL)));#endif	/* Run HHOOK_TCP_ESTABLISHED_OUT helper hooks. */	hhook_run_tcp_est_out(tp, th, &to, len, tso);#ifdef TCPDEBUG	/*	 * Trace.	 */	if (so->so_options & SO_DEBUG) {		u_short save = 0;#ifdef INET6		if (!isipv6)#endif		{			save = ipov->ih_len;			ipov->ih_len = htons(m->m_pkthdr.len /* - hdrlen + (th->th_off << 2) */);		}		tcp_trace(TA_OUTPUT, tp->t_state, tp, mtod(m, void *), th, 0);#ifdef INET6		if (!isipv6)#endif		ipov->ih_len = save;	}#endif /* TCPDEBUG */	/*	 * Fill in IP length and desired time to live and	 * send to IP level.  There should be a better way	 * to handle ttl and tos; we could keep them in	 * the template, but need a way to checksum without them.	 */	/*	 * m->m_pkthdr.len should have been set before cksum calcuration,	 * because in6_cksum() need it.	 */#ifdef INET6	if (isipv6) {		struct route_in6 ro;		bzero(&ro, sizeof(ro));		/*		 * we separately set hoplimit for every segment, since the		 * user might want to change the value via setsockopt.		 * Also, desired default hop limit might be changed via		 * Neighbor Discovery.		 */		ip6->ip6_hlim = in6_selecthlim(tp->t_inpcb, NULL);		/*		 * Set the packet size here for the benefit of DTrace probes.		 * ip6_output() will set it properly; it's supposed to include		 * the option header lengths as well.		 */		ip6->ip6_plen = htons(m->m_pkthdr.len - sizeof(*ip6));		if (V_path_mtu_discovery && tp->t_maxopd > V_tcp_minmss)			tp->t_flags2 |= TF2_PLPMTU_PMTUD;		else			tp->t_flags2 &= ~TF2_PLPMTU_PMTUD;		if (tp->t_state == TCPS_SYN_SENT)			TCP_PROBE5(connect__request, NULL, tp, ip6, tp, th);		TCP_PROBE5(send, NULL, tp, ip6, tp, th);		/* TODO: IPv6 IP6TOS_ECT bit on */		error = ip6_output(m, tp->t_inpcb->in6p_outputopts, &ro,		    ((so->so_options & SO_DONTROUTE) ?  IP_ROUTETOIF : 0),		    NULL, NULL, tp->t_inpcb);		if (error == EMSGSIZE && ro.ro_rt != NULL)			mtu = ro.ro_rt->rt_mtu;		RO_RTFREE(&ro);	}#endif /* INET6 */#if defined(INET) && defined(INET6)	else#endif#ifdef INET    {	struct route ro;	bzero(&ro, sizeof(ro));	ip->ip_len = htons(m->m_pkthdr.len);#ifdef INET6	if (tp->t_inpcb->inp_vflag & INP_IPV6PROTO)		ip->ip_ttl = in6_selecthlim(tp->t_inpcb, NULL);#endif /* INET6 */	/*	 * If we do path MTU discovery, then we set DF on every packet.	 * This might not be the best thing to do according to RFC3390	 * Section 2. However the tcp hostcache migitates the problem	 * so it affects only the first tcp connection with a host.	 *	 * NB: Don't set DF on small MTU/MSS to have a safe fallback.	 */	if (V_path_mtu_discovery && tp->t_maxopd > V_tcp_minmss) {		ip->ip_off |= htons(IP_DF);		tp->t_flags2 |= TF2_PLPMTU_PMTUD;	} else {		tp->t_flags2 &= ~TF2_PLPMTU_PMTUD;	}	if (tp->t_state == TCPS_SYN_SENT)		TCP_PROBE5(connect__request, NULL, tp, ip, tp, th);	TCP_PROBE5(send, NULL, tp, ip, tp, th);	error = ip_output(m, tp->t_inpcb->inp_options, &ro,	    ((so->so_options & SO_DONTROUTE) ? IP_ROUTETOIF : 0), 0,	    tp->t_inpcb);	if (error == EMSGSIZE && ro.ro_rt != NULL)		mtu = ro.ro_rt->rt_mtu;	RO_RTFREE(&ro);    }#endif /* INET */out:	/*	 * In transmit state, time the transmission and arrange for	 * the retransmit.  In persist state, just set snd_max.	 */	if ((tp->t_flags & TF_FORCEDATA) == 0 ||	    !tcp_timer_active(tp, TT_PERSIST)) {		tcp_seq startseq = tp->snd_nxt;		/*		 * Advance snd_nxt over sequence space of this segment.		 */		if (flags & (TH_SYN|TH_FIN)) {			if (flags & TH_SYN)				tp->snd_nxt++;			if (flags & TH_FIN) {				tp->snd_nxt++;				tp->t_flags |= TF_SENTFIN;			}		}		if (sack_rxmit)			goto timer;		tp->snd_nxt += len;		if (SEQ_GT(tp->snd_nxt, tp->snd_max)) {			tp->snd_max = tp->snd_nxt;			/*			 * Time this transmission if not a retransmission and			 * not currently timing anything.			 */			if (tp->t_rtttime == 0) {				tp->t_rtttime = ticks;				tp->t_rtseq = startseq;				TCPSTAT_INC(tcps_segstimed);			}		}		/*		 * Set retransmit timer if not currently set,		 * and not doing a pure ack or a keep-alive probe.		 * Initial value for retransmit timer is smoothed		 * round-trip time + 2 * round-trip time variance.		 * Initialize shift counter which is used for backoff		 * of retransmit time.		 */timer:		if (!tcp_timer_active(tp, TT_REXMT) &&		    ((sack_rxmit && tp->snd_nxt != tp->snd_max) ||		     (tp->snd_nxt != tp->snd_una))) {			if (tcp_timer_active(tp, TT_PERSIST)) {				tcp_timer_activate(tp, TT_PERSIST, 0);				tp->t_rxtshift = 0;			}			tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		}	} else {		/*		 * Persist case, update snd_max but since we are in		 * persist mode (no window) we do not update snd_nxt.		 */		int xlen = len;		if (flags & TH_SYN)			++xlen;		if (flags & TH_FIN) {			++xlen;			tp->t_flags |= TF_SENTFIN;		}		if (SEQ_GT(tp->snd_nxt + xlen, tp->snd_max))			tp->snd_max = tp->snd_nxt + len;	}	if (error) {		/*		 * We know that the packet was lost, so back out the		 * sequence number advance, if any.		 *		 * If the error is EPERM the packet got blocked by the		 * local firewall.  Normally we should terminate the		 * connection but the blocking may have been spurious		 * due to a firewall reconfiguration cycle.  So we treat		 * it like a packet loss and let the retransmit timer and		 * timeouts do their work over time.		 * XXX: It is a POLA question whether calling tcp_drop right		 * away would be the really correct behavior instead.		 */		if (((tp->t_flags & TF_FORCEDATA) == 0 ||		    !tcp_timer_active(tp, TT_PERSIST)) &&		    ((flags & TH_SYN) == 0) &&		    (error != EPERM)) {			if (sack_rxmit) {				p->rxmit -= len;				tp->sackhint.sack_bytes_rexmit -= len;				KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,				    ("sackhint bytes rtx >= 0"));			} else				tp->snd_nxt -= len;		}		SOCKBUF_UNLOCK_ASSERT(&so->so_snd);	/* Check gotos. */		switch (error) {		case EPERM:			tp->t_softerror = error;			return (error);		case ENOBUFS:	                if (!tcp_timer_active(tp, TT_REXMT) &&			    !tcp_timer_active(tp, TT_PERSIST))	                        tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);			tp->snd_cwnd = tp->t_maxseg;			return (0);		case EMSGSIZE:			/*			 * For some reason the interface we used initially			 * to send segments changed to another or lowered			 * its MTU.			 * If TSO was active we either got an interface			 * without TSO capabilits or TSO was turned off.			 * If we obtained mtu from ip_output() then update			 * it and try again.			 */			if (tso)				tp->t_flags &= ~TF_TSO;			if (mtu != 0) {				tcp_mss_update(tp, -1, mtu, NULL, NULL);				goto again;			}			return (error);		case EHOSTDOWN:		case EHOSTUNREACH:		case ENETDOWN:		case ENETUNREACH:			if (TCPS_HAVERCVDSYN(tp->t_state)) {				tp->t_softerror = error;				return (0);			}			/* FALLTHROUGH */		default:			return (error);		}	}	TCPSTAT_INC(tcps_sndtotal);	/*	 * Data sent (as far as we can tell).	 * If this advertises a larger window than any other segment,	 * then remember the size of the advertised window.	 * Any pending ACK has now been sent.	 */	if (recwin >= 0 && SEQ_GT(tp->rcv_nxt + recwin, tp->rcv_adv))		tp->rcv_adv = tp->rcv_nxt + recwin;	tp->last_ack_sent = tp->rcv_nxt;	tp->t_flags &= ~(TF_ACKNOW | TF_DELACK);	if (tcp_timer_active(tp, TT_DELACK))		tcp_timer_activate(tp, TT_DELACK, 0);#if 0	/*	 * This completely breaks TCP if newreno is turned on.  What happens	 * is that if delayed-acks are turned on on the receiver, this code	 * on the transmitter effectively destroys the TCP window, forcing	 * it to four packets (1.5Kx4 = 6K window).	 */	if (sendalot && --maxburst)		goto again;#endif	if (sendalot)		goto again;	return (0);}
int
tcp_output(struct tcpcb *tp)
tcp_output
struct tcpcb *tp
struct tcpcb
tcpcb
*tp
*
tp
{	struct socket *so = tp->t_inpcb->inp_socket;	long len, recwin, sendwin;	int off, flags, error = 0;	/* Keep compiler happy */	struct mbuf *m;	struct ip *ip = NULL;	struct ipovly *ipov = NULL;	struct tcphdr *th;	u_char opt[TCP_MAXOLEN];	unsigned ipoptlen, optlen, hdrlen;#ifdef IPSEC	unsigned ipsec_optlen = 0;#endif	int idle, sendalot;	int sack_rxmit, sack_bytes_rxmt;	struct sackhole *p;	int tso, mtu;	struct tcpopt to;#if 0	int maxburst = TCP_MAXBURST;#endif#ifdef INET6	struct ip6_hdr *ip6 = NULL;	int isipv6;	isipv6 = (tp->t_inpcb->inp_vflag & INP_IPV6) != 0;#endif	INP_WLOCK_ASSERT(tp->t_inpcb);#ifdef TCP_OFFLOAD	if (tp->t_flags & TF_TOE)		return (tcp_offload_output(tp));#endif	/*	 * Determine length of data that should be transmitted,	 * and flags that will be used.	 * If there is some data or critical controls (SYN, RST)	 * to send, then transmit; otherwise, investigate further.	 */	idle = (tp->t_flags & TF_LASTIDLE) || (tp->snd_max == tp->snd_una);	if (idle && ticks - tp->t_rcvtime >= tp->t_rxtcur)		cc_after_idle(tp);	tp->t_flags &= ~TF_LASTIDLE;	if (idle) {		if (tp->t_flags & TF_MORETOCOME) {			tp->t_flags |= TF_LASTIDLE;			idle = 0;		}	}again:	/*	 * If we've recently taken a timeout, snd_max will be greater than	 * snd_nxt.  There may be SACK information that allows us to avoid	 * resending already delivered data.  Adjust snd_nxt accordingly.	 */	if ((tp->t_flags & TF_SACK_PERMIT) &&	    SEQ_LT(tp->snd_nxt, tp->snd_max))		tcp_sack_adjust(tp);	sendalot = 0;	tso = 0;	mtu = 0;	off = tp->snd_nxt - tp->snd_una;	sendwin = min(tp->snd_wnd, tp->snd_cwnd);	flags = tcp_outflags[tp->t_state];	/*	 * Send any SACK-generated retransmissions.  If we're explicitly trying	 * to send out new data (when sendalot is 1), bypass this function.	 * If we retransmit in fast recovery mode, decrement snd_cwnd, since	 * we're replacing a (future) new transmission with a retransmission	 * now, and we previously incremented snd_cwnd in tcp_input().	 */	/*	 * Still in sack recovery , reset rxmit flag to zero.	 */	sack_rxmit = 0;	sack_bytes_rxmt = 0;	len = 0;	p = NULL;	if ((tp->t_flags & TF_SACK_PERMIT) && IN_FASTRECOVERY(tp->t_flags) &&	    (p = tcp_sack_output(tp, &sack_bytes_rxmt))) {		long cwin;		cwin = min(tp->snd_wnd, tp->snd_cwnd) - sack_bytes_rxmt;		if (cwin < 0)			cwin = 0;		/* Do not retransmit SACK segments beyond snd_recover */		if (SEQ_GT(p->end, tp->snd_recover)) {			/*			 * (At least) part of sack hole extends beyond			 * snd_recover. Check to see if we can rexmit data			 * for this hole.			 */			if (SEQ_GEQ(p->rxmit, tp->snd_recover)) {				/*				 * Can't rexmit any more data for this hole.				 * That data will be rexmitted in the next				 * sack recovery episode, when snd_recover				 * moves past p->rxmit.				 */				p = NULL;				goto after_sack_rexmit;			} else				/* Can rexmit part of the current hole */				len = ((long)ulmin(cwin,						   tp->snd_recover - p->rxmit));		} else			len = ((long)ulmin(cwin, p->end - p->rxmit));		off = p->rxmit - tp->snd_una;		KASSERT(off >= 0,("%s: sack block to the left of una : %d",		    __func__, off));		if (len > 0) {			sack_rxmit = 1;			sendalot = 1;			TCPSTAT_INC(tcps_sack_rexmits);			TCPSTAT_ADD(tcps_sack_rexmit_bytes,			    min(len, tp->t_maxseg));		}	}after_sack_rexmit:	/*	 * Get standard flags, and add SYN or FIN if requested by 'hidden'	 * state flags.	 */	if (tp->t_flags & TF_NEEDFIN)		flags |= TH_FIN;	if (tp->t_flags & TF_NEEDSYN)		flags |= TH_SYN;	SOCKBUF_LOCK(&so->so_snd);	/*	 * If in persist timeout with window of 0, send 1 byte.	 * Otherwise, if window is small but nonzero	 * and timer expired, we will send what we can	 * and go to transmit state.	 */	if (tp->t_flags & TF_FORCEDATA) {		if (sendwin == 0) {			/*			 * If we still have some data to send, then			 * clear the FIN bit.  Usually this would			 * happen below when it realizes that we			 * aren't sending all the data.  However,			 * if we have exactly 1 byte of unsent data,			 * then it won't clear the FIN bit below,			 * and if we are in persist state, we wind			 * up sending the packet without recording			 * that we sent the FIN bit.			 *			 * We can't just blindly clear the FIN bit,			 * because if we don't have any more data			 * to send then the probe will be the FIN			 * itself.			 */			if (off < so->so_snd.sb_cc)				flags &= ~TH_FIN;			sendwin = 1;		} else {			tcp_timer_activate(tp, TT_PERSIST, 0);			tp->t_rxtshift = 0;		}	}	/*	 * If snd_nxt == snd_max and we have transmitted a FIN, the	 * offset will be > 0 even if so_snd.sb_cc is 0, resulting in	 * a negative length.  This can also occur when TCP opens up	 * its congestion window while receiving additional duplicate	 * acks after fast-retransmit because TCP will reset snd_nxt	 * to snd_max after the fast-retransmit.	 *	 * In the normal retransmit-FIN-only case, however, snd_nxt will	 * be set to snd_una, the offset will be 0, and the length may	 * wind up 0.	 *	 * If sack_rxmit is true we are retransmitting from the scoreboard	 * in which case len is already set.	 */	if (sack_rxmit == 0) {		if (sack_bytes_rxmt == 0)			len = ((long)ulmin(so->so_snd.sb_cc, sendwin) - off);		else {			long cwin;                        /*			 * We are inside of a SACK recovery episode and are			 * sending new data, having retransmitted all the			 * data possible in the scoreboard.			 */			len = ((long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)			       - off);			/*			 * Don't remove this (len > 0) check !			 * We explicitly check for len > 0 here (although it			 * isn't really necessary), to work around a gcc			 * optimization issue - to force gcc to compute			 * len above. Without this check, the computation			 * of len is bungled by the optimizer.			 */			if (len > 0) {				cwin = tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata) -					sack_bytes_rxmt;				if (cwin < 0)					cwin = 0;				len = lmin(len, cwin);			}		}	}	/*	 * Lop off SYN bit if it has already been sent.  However, if this	 * is SYN-SENT state and if segment contains data and if we don't	 * know that foreign host supports TAO, suppress sending segment.	 */	if ((flags & TH_SYN) && SEQ_GT(tp->snd_nxt, tp->snd_una)) {		if (tp->t_state != TCPS_SYN_RECEIVED)			flags &= ~TH_SYN;		off--, len++;	}	/*	 * Be careful not to send data and/or FIN on SYN segments.	 * This measure is needed to prevent interoperability problems	 * with not fully conformant TCP implementations.	 */	if ((flags & TH_SYN) && (tp->t_flags & TF_NOOPT)) {		len = 0;		flags &= ~TH_FIN;	}	if (len < 0) {		/*		 * If FIN has been sent but not acked,		 * but we haven't been called to retransmit,		 * len will be < 0.  Otherwise, window shrank		 * after we sent into it.  If window shrank to 0,		 * cancel pending retransmit, pull snd_nxt back		 * to (closed) window, and set the persist timer		 * if it isn't already going.  If the window didn't		 * close completely, just wait for an ACK.		 */		len = 0;		if (sendwin == 0) {			tcp_timer_activate(tp, TT_REXMT, 0);			tp->t_rxtshift = 0;			tp->snd_nxt = tp->snd_una;			if (!tcp_timer_active(tp, TT_PERSIST))				tcp_setpersist(tp);		}	}	/* len will be >= 0 after this point. */	KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__));	/*	 * Automatic sizing of send socket buffer.  Often the send buffer	 * size is not optimally adjusted to the actual network conditions	 * at hand (delay bandwidth product).  Setting the buffer size too	 * small limits throughput on links with high bandwidth and high	 * delay (eg. trans-continental/oceanic links).  Setting the	 * buffer size too big consumes too much real kernel memory,	 * especially with many connections on busy servers.	 *	 * The criteria to step up the send buffer one notch are:	 *  1. receive window of remote host is larger than send buffer	 *     (with a fudge factor of 5/4th);	 *  2. send buffer is filled to 7/8th with data (so we actually	 *     have data to make use of it);	 *  3. send buffer fill has not hit maximal automatic size;	 *  4. our send window (slow start and cogestion controlled) is	 *     larger than sent but unacknowledged data in send buffer.	 *	 * The remote host receive window scaling factor may limit the	 * growing of the send buffer before it reaches its allowed	 * maximum.	 *	 * It scales directly with slow start or congestion window	 * and does at most one step per received ACK.  This fast	 * scaling has the drawback of growing the send buffer beyond	 * what is strictly necessary to make full use of a given	 * delay*bandwith product.  However testing has shown this not	 * to be much of an problem.  At worst we are trading wasting	 * of available bandwith (the non-use of it) for wasting some	 * socket buffer memory.	 *	 * TODO: Shrink send buffer during idle periods together	 * with congestion window.  Requires another timer.  Has to	 * wait for upcoming tcp timer rewrite.	 */	if (V_tcp_do_autosndbuf && so->so_snd.sb_flags & SB_AUTOSIZE) {		if ((tp->snd_wnd / 4 * 5) >= so->so_snd.sb_hiwat &&		    so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7) &&		    so->so_snd.sb_cc < V_tcp_autosndbuf_max &&		    sendwin >= (so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una))) {			if (!sbreserve_locked(&so->so_snd,			    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,			     V_tcp_autosndbuf_max), so, curthread))				so->so_snd.sb_flags &= ~SB_AUTOSIZE;		}	}	/*	 * Decide if we can use TCP Segmentation Offloading (if supported by	 * hardware).	 *	 * TSO may only be used if we are in a pure bulk sending state.  The	 * presence of TCP-MD5, SACK retransmits, SACK advertizements and	 * IP options prevent using TSO.  With TSO the TCP header is the same	 * (except for the sequence number) for all generated packets.  This	 * makes it impossible to transmit any options which vary per generated	 * segment or packet.	 */#ifdef IPSEC	/*	 * Pre-calculate here as we save another lookup into the darknesses	 * of IPsec that way and can actually decide if TSO is ok.	 */	ipsec_optlen = ipsec_hdrsiz_tcp(tp);#endif	if ((tp->t_flags & TF_TSO) && V_tcp_do_tso && len > tp->t_maxseg &&	    ((tp->t_flags & TF_SIGNATURE) == 0) &&	    tp->rcv_numsacks == 0 && sack_rxmit == 0 &&#ifdef IPSEC	    ipsec_optlen == 0 &&#endif	    tp->t_inpcb->inp_options == NULL &&	    tp->t_inpcb->in6p_options == NULL)		tso = 1;	if (sack_rxmit) {		if (SEQ_LT(p->rxmit + len, tp->snd_una + so->so_snd.sb_cc))			flags &= ~TH_FIN;	} else {		if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))			flags &= ~TH_FIN;	}	recwin = sbspace(&so->so_rcv);	/*	 * Sender silly window avoidance.   We transmit under the following	 * conditions when len is non-zero:	 *	 *	- We have a full segment (or more with TSO)	 *	- This is the last buffer in a write()/send() and we are	 *	  either idle or running NODELAY	 *	- we've timed out (e.g. persist timer)	 *	- we have more then 1/2 the maximum send window's worth of	 *	  data (receiver may be limited the window size)	 *	- we need to retransmit	 */	if (len) {		if (len >= tp->t_maxseg)			goto send;		/*		 * NOTE! on localhost connections an 'ack' from the remote		 * end may occur synchronously with the output and cause		 * us to flush a buffer queued with moretocome.  XXX		 *		 * note: the len + off check is almost certainly unnecessary.		 */		if (!(tp->t_flags & TF_MORETOCOME) &&	/* normal case */		    (idle || (tp->t_flags & TF_NODELAY)) &&		    len + off >= so->so_snd.sb_cc &&		    (tp->t_flags & TF_NOPUSH) == 0) {			goto send;		}		if (tp->t_flags & TF_FORCEDATA)		/* typ. timeout case */			goto send;		if (len >= tp->max_sndwnd / 2 && tp->max_sndwnd > 0)			goto send;		if (SEQ_LT(tp->snd_nxt, tp->snd_max))	/* retransmit case */			goto send;		if (sack_rxmit)			goto send;	}	/*	 * Sending of standalone window updates.	 *	 * Window updates are important when we close our window due to a	 * full socket buffer and are opening it again after the application	 * reads data from it.  Once the window has opened again and the	 * remote end starts to send again the ACK clock takes over and	 * provides the most current window information.	 *	 * We must avoid the silly window syndrome whereas every read	 * from the receive buffer, no matter how small, causes a window	 * update to be sent.  We also should avoid sending a flurry of	 * window updates when the socket buffer had queued a lot of data	 * and the application is doing small reads.	 *	 * Prevent a flurry of pointless window updates by only sending	 * an update when we can increase the advertized window by more	 * than 1/4th of the socket buffer capacity.  When the buffer is	 * getting full or is very small be more aggressive and send an	 * update whenever we can increase by two mss sized segments.	 * In all other situations the ACK's to new incoming data will	 * carry further window increases.	 *	 * Don't send an independent window update if a delayed	 * ACK is pending (it will get piggy-backed on it) or the	 * remote side already has done a half-close and won't send	 * more data.  Skip this if the connection is in T/TCP	 * half-open state.	 */	if (recwin > 0 && !(tp->t_flags & TF_NEEDSYN) &&	    !(tp->t_flags & TF_DELACK) &&	    !TCPS_HAVERCVDFIN(tp->t_state)) {		/*		 * "adv" is the amount we could increase the window,		 * taking into account that we are limited by		 * TCP_MAXWIN << tp->rcv_scale.		 */		long adv;		int oldwin;		adv = min(recwin, (long)TCP_MAXWIN << tp->rcv_scale);		if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt)) {			oldwin = (tp->rcv_adv - tp->rcv_nxt);			adv -= oldwin;		} else			oldwin = 0;		/*		 * If the new window size ends up being the same as the old		 * size when it is scaled, then don't force a window update.		 */		if (oldwin >> tp->rcv_scale == (adv + oldwin) >> tp->rcv_scale)			goto dontupdate;		if (adv >= (long)(2 * tp->t_maxseg) &&		    (adv >= (long)(so->so_rcv.sb_hiwat / 4) ||		     recwin <= (long)(so->so_rcv.sb_hiwat / 8) ||		     so->so_rcv.sb_hiwat <= 8 * tp->t_maxseg))			goto send;	}dontupdate:	/*	 * Send if we owe the peer an ACK, RST, SYN, or urgent data.  ACKNOW	 * is also a catch-all for the retransmit timer timeout case.	 */	if (tp->t_flags & TF_ACKNOW)		goto send;	if ((flags & TH_RST) ||	    ((flags & TH_SYN) && (tp->t_flags & TF_NEEDSYN) == 0))		goto send;	if (SEQ_GT(tp->snd_up, tp->snd_una))		goto send;	/*	 * If our state indicates that FIN should be sent	 * and we have not yet done so, then we need to send.	 */	if (flags & TH_FIN &&	    ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una))		goto send;	/*	 * In SACK, it is possible for tcp_output to fail to send a segment	 * after the retransmission timer has been turned off.  Make sure	 * that the retransmission timer is set.	 */	if ((tp->t_flags & TF_SACK_PERMIT) &&	    SEQ_GT(tp->snd_max, tp->snd_una) &&	    !tcp_timer_active(tp, TT_REXMT) &&	    !tcp_timer_active(tp, TT_PERSIST)) {		tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		goto just_return;	}	/*	 * TCP window updates are not reliable, rather a polling protocol	 * using ``persist'' packets is used to insure receipt of window	 * updates.  The three ``states'' for the output side are:	 *	idle			not doing retransmits or persists	 *	persisting		to move a small or zero window	 *	(re)transmitting	and thereby not persisting	 *	 * tcp_timer_active(tp, TT_PERSIST)	 *	is true when we are in persist state.	 * (tp->t_flags & TF_FORCEDATA)	 *	is set when we are called to send a persist packet.	 * tcp_timer_active(tp, TT_REXMT)	 *	is set when we are retransmitting	 * The output side is idle when both timers are zero.	 *	 * If send window is too small, there is data to transmit, and no	 * retransmit or persist is pending, then go to persist state.	 * If nothing happens soon, send when timer expires:	 * if window is nonzero, transmit what we can,	 * otherwise force out a byte.	 */	if (so->so_snd.sb_cc && !tcp_timer_active(tp, TT_REXMT) &&	    !tcp_timer_active(tp, TT_PERSIST)) {		tp->t_rxtshift = 0;		tcp_setpersist(tp);	}	/*	 * No reason to send a segment, just return.	 */just_return:	SOCKBUF_UNLOCK(&so->so_snd);	return (0);send:	SOCKBUF_LOCK_ASSERT(&so->so_snd);	if (len > 0) {		if (len >= tp->t_maxseg)			tp->t_flags2 |= TF2_PLPMTU_MAXSEGSNT;		else			tp->t_flags2 &= ~TF2_PLPMTU_MAXSEGSNT;	}	/*	 * Before ESTABLISHED, force sending of initial options	 * unless TCP set not to do any options.	 * NOTE: we assume that the IP/TCP header plus TCP options	 * always fit in a single mbuf, leaving room for a maximum	 * link header, i.e.	 *	max_linkhdr + sizeof (struct tcpiphdr) + optlen <= MCLBYTES	 */	optlen = 0;#ifdef INET6	if (isipv6)		hdrlen = sizeof (struct ip6_hdr) + sizeof (struct tcphdr);	else#endif		hdrlen = sizeof (struct tcpiphdr);	/*	 * Compute options for segment.	 * We only have to care about SYN and established connection	 * segments.  Options for SYN-ACK segments are handled in TCP	 * syncache.	 */	if ((tp->t_flags & TF_NOOPT) == 0) {		to.to_flags = 0;		/* Maximum segment size. */		if (flags & TH_SYN) {			tp->snd_nxt = tp->iss;			to.to_mss = tcp_mssopt(&tp->t_inpcb->inp_inc);			to.to_flags |= TOF_MSS;		}		/* Window scaling. */		if ((flags & TH_SYN) && (tp->t_flags & TF_REQ_SCALE)) {			to.to_wscale = tp->request_r_scale;			to.to_flags |= TOF_SCALE;		}		/* Timestamps. */		if ((tp->t_flags & TF_RCVD_TSTMP) ||		    ((flags & TH_SYN) && (tp->t_flags & TF_REQ_TSTMP))) {			to.to_tsval = tcp_ts_getticks() + tp->ts_offset;			to.to_tsecr = tp->ts_recent;			to.to_flags |= TOF_TS;			/* Set receive buffer autosizing timestamp. */			if (tp->rfbuf_ts == 0 &&			    (so->so_rcv.sb_flags & SB_AUTOSIZE))				tp->rfbuf_ts = tcp_ts_getticks();		}		/* Selective ACK's. */		if (tp->t_flags & TF_SACK_PERMIT) {			if (flags & TH_SYN)				to.to_flags |= TOF_SACKPERM;			else if (TCPS_HAVEESTABLISHED(tp->t_state) &&			    (tp->t_flags & TF_SACK_PERMIT) &&			    tp->rcv_numsacks > 0) {				to.to_flags |= TOF_SACK;				to.to_nsacks = tp->rcv_numsacks;				to.to_sacks = (u_char *)tp->sackblks;			}		}#ifdef TCP_SIGNATURE		/* TCP-MD5 (RFC2385). */		if (tp->t_flags & TF_SIGNATURE)			to.to_flags |= TOF_SIGNATURE;#endif /* TCP_SIGNATURE */		/* Processing the options. */		hdrlen += optlen = tcp_addoptions(&to, opt);	}#ifdef INET6	if (isipv6)		ipoptlen = ip6_optlen(tp->t_inpcb);	else#endif	if (tp->t_inpcb->inp_options)		ipoptlen = tp->t_inpcb->inp_options->m_len -				offsetof(struct ipoption, ipopt_list);	else		ipoptlen = 0;#ifdef IPSEC	ipoptlen += ipsec_optlen;#endif	/*	 * Adjust data length if insertion of options will	 * bump the packet length beyond the t_maxopd length.	 * Clear the FIN bit because we cut off the tail of	 * the segment.	 */	if (len + optlen + ipoptlen > tp->t_maxopd) {		flags &= ~TH_FIN;		if (tso) {			u_int if_hw_tsomax;			u_int if_hw_tsomaxsegcount;			u_int if_hw_tsomaxsegsize;			struct mbuf *mb;			u_int moff;			int max_len;			/* extract TSO information */			if_hw_tsomax = tp->t_tsomax;			if_hw_tsomaxsegcount = tp->t_tsomaxsegcount;			if_hw_tsomaxsegsize = tp->t_tsomaxsegsize;			/*			 * Limit a TSO burst to prevent it from			 * overflowing or exceeding the maximum length			 * allowed by the network interface:			 */			KASSERT(ipoptlen == 0,			    ("%s: TSO can't do IP options", __func__));			/*			 * Check if we should limit by maximum payload			 * length:			 */			if (if_hw_tsomax != 0) {				/* compute maximum TSO length */				max_len = (if_hw_tsomax - hdrlen);				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Check if we should limit by maximum segment			 * size and count:			 */			if (if_hw_tsomaxsegcount != 0 &&			    if_hw_tsomaxsegsize != 0) {				max_len = 0;				mb = sbsndmbuf(&so->so_snd, off, &moff);				while (mb != NULL && max_len < len) {					u_int mlen;					u_int frags;					/*					 * Get length of mbuf fragment					 * and how many hardware frags,					 * rounded up, it would use:					 */					mlen = (mb->m_len - moff);					frags = howmany(mlen,					    if_hw_tsomaxsegsize);					/* Handle special case: Zero Length Mbuf */					if (frags == 0)						frags = 1;					/*					 * Check if the fragment limit					 * will be reached or exceeded:					 */					if (frags >= if_hw_tsomaxsegcount) {						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}					max_len += mlen;					if_hw_tsomaxsegcount -= frags;					moff = 0;					mb = mb->m_next;				}				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Prevent the last segment from being			 * fractional unless the send sockbuf can be			 * emptied:			 */			max_len = (tp->t_maxopd - optlen);			if ((off + len) < so->so_snd.sb_cc) {				moff = len % max_len;				if (moff != 0) {					len -= moff;					sendalot = 1;				}			}			/*			 * In case there are too many small fragments			 * don't use TSO:			 */			if (len <= max_len) {				len = max_len;				sendalot = 1;				tso = 0;			}			/*			 * Send the FIN in a separate segment			 * after the bulk sending is done.			 * We don't trust the TSO implementations			 * to clear the FIN flag on all but the			 * last segment.			 */			if (tp->t_flags & TF_NEEDFIN)				sendalot = 1;		} else {			len = tp->t_maxopd - optlen - ipoptlen;			sendalot = 1;		}	} else		tso = 0;	KASSERT(len + hdrlen + ipoptlen <= IP_MAXPACKET,	    ("%s: len > IP_MAXPACKET", __func__));/*#ifdef DIAGNOSTIC*/#ifdef INET6	if (max_linkhdr + hdrlen > MCLBYTES)#else	if (max_linkhdr + hdrlen > MHLEN)#endif		panic("tcphdr too big");/*#endif*/	/*	 * This KASSERT is here to catch edge cases at a well defined place.	 * Before, those had triggered (random) panic conditions further down.	 */	KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__));	/*	 * Grab a header mbuf, attaching a copy of data to	 * be transmitted, and initialize the header from	 * the template for sends on this connection.	 */	if (len) {		struct mbuf *mb;		u_int moff;		if ((tp->t_flags & TF_FORCEDATA) && len == 1)			TCPSTAT_INC(tcps_sndprobe);		else if (SEQ_LT(tp->snd_nxt, tp->snd_max) || sack_rxmit) {			tp->t_sndrexmitpack++;			TCPSTAT_INC(tcps_sndrexmitpack);			TCPSTAT_ADD(tcps_sndrexmitbyte, len);		} else {			TCPSTAT_INC(tcps_sndpack);			TCPSTAT_ADD(tcps_sndbyte, len);		}#ifdef INET6		if (MHLEN < hdrlen + max_linkhdr)			m = m_getcl(M_NOWAIT, MT_DATA, M_PKTHDR);		else#endif			m = m_gethdr(M_NOWAIT, MT_DATA);		if (m == NULL) {			SOCKBUF_UNLOCK(&so->so_snd);			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}		m->m_data += max_linkhdr;		m->m_len = hdrlen;		/*		 * Start the m_copy functions from the closest mbuf		 * to the offset in the socket buffer chain.		 */		mb = sbsndptr(&so->so_snd, off, len, &moff);		if (len <= MHLEN - hdrlen - max_linkhdr) {			m_copydata(mb, moff, (int)len,			    mtod(m, caddr_t) + hdrlen);			m->m_len += len;		} else {			m->m_next = m_copy(mb, moff, (int)len);			if (m->m_next == NULL) {				SOCKBUF_UNLOCK(&so->so_snd);				(void) m_free(m);				error = ENOBUFS;				sack_rxmit = 0;				goto out;			}		}		/*		 * If we're sending everything we've got, set PUSH.		 * (This will keep happy those implementations which only		 * give data to the user when a buffer fills or		 * a PUSH comes in.)		 */		if (off + len == so->so_snd.sb_cc)			flags |= TH_PUSH;		SOCKBUF_UNLOCK(&so->so_snd);	} else {		SOCKBUF_UNLOCK(&so->so_snd);		if (tp->t_flags & TF_ACKNOW)			TCPSTAT_INC(tcps_sndacks);		else if (flags & (TH_SYN|TH_FIN|TH_RST))			TCPSTAT_INC(tcps_sndctrl);		else if (SEQ_GT(tp->snd_up, tp->snd_una))			TCPSTAT_INC(tcps_sndurg);		else			TCPSTAT_INC(tcps_sndwinup);		m = m_gethdr(M_NOWAIT, MT_DATA);		if (m == NULL) {			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}#ifdef INET6		if (isipv6 && (MHLEN < hdrlen + max_linkhdr) &&		    MHLEN >= hdrlen) {			MH_ALIGN(m, hdrlen);		} else#endif		m->m_data += max_linkhdr;		m->m_len = hdrlen;	}	SOCKBUF_UNLOCK_ASSERT(&so->so_snd);	m->m_pkthdr.rcvif = (struct ifnet *)0;#ifdef MAC	mac_inpcb_create_mbuf(tp->t_inpcb, m);#endif#ifdef INET6	if (isipv6) {		ip6 = mtod(m, struct ip6_hdr *);		th = (struct tcphdr *)(ip6 + 1);		tcpip_fillheaders(tp->t_inpcb, ip6, th);	} else#endif /* INET6 */	{		ip = mtod(m, struct ip *);		ipov = (struct ipovly *)ip;		th = (struct tcphdr *)(ip + 1);		tcpip_fillheaders(tp->t_inpcb, ip, th);	}	/*	 * Fill in fields, remembering maximum advertised	 * window for use in delaying messages about window sizes.	 * If resending a FIN, be sure not to use a new sequence number.	 */	if (flags & TH_FIN && tp->t_flags & TF_SENTFIN &&	    tp->snd_nxt == tp->snd_max)		tp->snd_nxt--;	/*	 * If we are starting a connection, send ECN setup	 * SYN packet. If we are on a retransmit, we may	 * resend those bits a number of times as per	 * RFC 3168.	 */	if (tp->t_state == TCPS_SYN_SENT && V_tcp_do_ecn) {		if (tp->t_rxtshift >= 1) {			if (tp->t_rxtshift <= V_tcp_ecn_maxretries)				flags |= TH_ECE|TH_CWR;		} else			flags |= TH_ECE|TH_CWR;	}	if (tp->t_state == TCPS_ESTABLISHED &&	    (tp->t_flags & TF_ECN_PERMIT)) {		/*		 * If the peer has ECN, mark data packets with		 * ECN capable transmission (ECT).		 * Ignore pure ack packets, retransmissions and window probes.		 */		if (len > 0 && SEQ_GEQ(tp->snd_nxt, tp->snd_max) &&		    !((tp->t_flags & TF_FORCEDATA) && len == 1)) {#ifdef INET6			if (isipv6)				ip6->ip6_flow |= htonl(IPTOS_ECN_ECT0 << 20);			else#endif				ip->ip_tos |= IPTOS_ECN_ECT0;			TCPSTAT_INC(tcps_ecn_ect0);		}		/*		 * Reply with proper ECN notifications.		 */		if (tp->t_flags & TF_ECN_SND_CWR) {			flags |= TH_CWR;			tp->t_flags &= ~TF_ECN_SND_CWR;		}		if (tp->t_flags & TF_ECN_SND_ECE)			flags |= TH_ECE;	}	/*	 * If we are doing retransmissions, then snd_nxt will	 * not reflect the first unsent octet.  For ACK only	 * packets, we do not want the sequence number of the	 * retransmitted packet, we want the sequence number	 * of the next unsent octet.  So, if there is no data	 * (and no SYN or FIN), use snd_max instead of snd_nxt	 * when filling in ti_seq.  But if we are in persist	 * state, snd_max might reflect one byte beyond the	 * right edge of the window, so use snd_nxt in that	 * case, since we know we aren't doing a retransmission.	 * (retransmit and persist are mutually exclusive...)	 */	if (sack_rxmit == 0) {		if (len || (flags & (TH_SYN|TH_FIN)) ||		    tcp_timer_active(tp, TT_PERSIST))			th->th_seq = htonl(tp->snd_nxt);		else			th->th_seq = htonl(tp->snd_max);	} else {		th->th_seq = htonl(p->rxmit);		p->rxmit += len;		tp->sackhint.sack_bytes_rexmit += len;	}	th->th_ack = htonl(tp->rcv_nxt);	if (optlen) {		bcopy(opt, th + 1, optlen);		th->th_off = (sizeof (struct tcphdr) + optlen) >> 2;	}	th->th_flags = flags;	/*	 * Calculate receive window.  Don't shrink window,	 * but avoid silly window syndrome.	 */	if (recwin < (long)(so->so_rcv.sb_hiwat / 4) &&	    recwin < (long)tp->t_maxseg)		recwin = 0;	if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt) &&	    recwin < (long)(tp->rcv_adv - tp->rcv_nxt))		recwin = (long)(tp->rcv_adv - tp->rcv_nxt);	if (recwin > (long)TCP_MAXWIN << tp->rcv_scale)		recwin = (long)TCP_MAXWIN << tp->rcv_scale;	/*	 * According to RFC1323 the window field in a SYN (i.e., a <SYN>	 * or <SYN,ACK>) segment itself is never scaled.  The <SYN,ACK>	 * case is handled in syncache.	 */	if (flags & TH_SYN)		th->th_win = htons((u_short)				(min(sbspace(&so->so_rcv), TCP_MAXWIN)));	else		th->th_win = htons((u_short)(recwin >> tp->rcv_scale));	/*	 * Adjust the RXWIN0SENT flag - indicate that we have advertised	 * a 0 window.  This may cause the remote transmitter to stall.  This	 * flag tells soreceive() to disable delayed acknowledgements when	 * draining the buffer.  This can occur if the receiver is attempting	 * to read more data than can be buffered prior to transmitting on	 * the connection.	 */	if (th->th_win == 0) {		tp->t_sndzerowin++;		tp->t_flags |= TF_RXWIN0SENT;	} else		tp->t_flags &= ~TF_RXWIN0SENT;	if (SEQ_GT(tp->snd_up, tp->snd_nxt)) {		th->th_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));		th->th_flags |= TH_URG;	} else		/*		 * If no urgent pointer to send, then we pull		 * the urgent pointer to the left edge of the send window		 * so that it doesn't drift into the send window on sequence		 * number wraparound.		 */		tp->snd_up = tp->snd_una;		/* drag it along */#ifdef TCP_SIGNATURE	if (tp->t_flags & TF_SIGNATURE) {		int sigoff = to.to_signature - opt;		tcp_signature_compute(m, 0, len, optlen,		    (u_char *)(th + 1) + sigoff, IPSEC_DIR_OUTBOUND);	}#endif	/*	 * Put TCP length in extended header, and then	 * checksum extended header and data.	 */	m->m_pkthdr.len = hdrlen + len; /* in6_cksum() need this */	m->m_pkthdr.csum_data = offsetof(struct tcphdr, th_sum);#ifdef INET6	if (isipv6) {		/*		 * ip6_plen is not need to be filled now, and will be filled		 * in ip6_output.		 */		m->m_pkthdr.csum_flags = CSUM_TCP_IPV6;		th->th_sum = in6_cksum_pseudo(ip6, sizeof(struct tcphdr) +		    optlen + len, IPPROTO_TCP, 0);	}#endif#if defined(INET6) && defined(INET)	else#endif#ifdef INET	{		m->m_pkthdr.csum_flags = CSUM_TCP;		th->th_sum = in_pseudo(ip->ip_src.s_addr, ip->ip_dst.s_addr,		    htons(sizeof(struct tcphdr) + IPPROTO_TCP + len + optlen));		/* IP version must be set here for ipv4/ipv6 checking later */		KASSERT(ip->ip_v == IPVERSION,		    ("%s: IP version incorrect: %d", __func__, ip->ip_v));	}#endif	/*	 * Enable TSO and specify the size of the segments.	 * The TCP pseudo header checksum is always provided.	 * XXX: Fixme: This is currently not the case for IPv6.	 */	if (tso) {		KASSERT(len > tp->t_maxopd - optlen,		    ("%s: len <= tso_segsz", __func__));		m->m_pkthdr.csum_flags |= CSUM_TSO;		m->m_pkthdr.tso_segsz = tp->t_maxopd - optlen;	}#ifdef IPSEC	KASSERT(len + hdrlen + ipoptlen - ipsec_optlen == m_length(m, NULL),	    ("%s: mbuf chain shorter than expected: %ld + %u + %u - %u != %u",	    __func__, len, hdrlen, ipoptlen, ipsec_optlen, m_length(m, NULL)));#else	KASSERT(len + hdrlen + ipoptlen == m_length(m, NULL),	    ("%s: mbuf chain shorter than expected: %ld + %u + %u != %u",	    __func__, len, hdrlen, ipoptlen, m_length(m, NULL)));#endif	/* Run HHOOK_TCP_ESTABLISHED_OUT helper hooks. */	hhook_run_tcp_est_out(tp, th, &to, len, tso);#ifdef TCPDEBUG	/*	 * Trace.	 */	if (so->so_options & SO_DEBUG) {		u_short save = 0;#ifdef INET6		if (!isipv6)#endif		{			save = ipov->ih_len;			ipov->ih_len = htons(m->m_pkthdr.len /* - hdrlen + (th->th_off << 2) */);		}		tcp_trace(TA_OUTPUT, tp->t_state, tp, mtod(m, void *), th, 0);#ifdef INET6		if (!isipv6)#endif		ipov->ih_len = save;	}#endif /* TCPDEBUG */	/*	 * Fill in IP length and desired time to live and	 * send to IP level.  There should be a better way	 * to handle ttl and tos; we could keep them in	 * the template, but need a way to checksum without them.	 */	/*	 * m->m_pkthdr.len should have been set before cksum calcuration,	 * because in6_cksum() need it.	 */#ifdef INET6	if (isipv6) {		struct route_in6 ro;		bzero(&ro, sizeof(ro));		/*		 * we separately set hoplimit for every segment, since the		 * user might want to change the value via setsockopt.		 * Also, desired default hop limit might be changed via		 * Neighbor Discovery.		 */		ip6->ip6_hlim = in6_selecthlim(tp->t_inpcb, NULL);		/*		 * Set the packet size here for the benefit of DTrace probes.		 * ip6_output() will set it properly; it's supposed to include		 * the option header lengths as well.		 */		ip6->ip6_plen = htons(m->m_pkthdr.len - sizeof(*ip6));		if (V_path_mtu_discovery && tp->t_maxopd > V_tcp_minmss)			tp->t_flags2 |= TF2_PLPMTU_PMTUD;		else			tp->t_flags2 &= ~TF2_PLPMTU_PMTUD;		if (tp->t_state == TCPS_SYN_SENT)			TCP_PROBE5(connect__request, NULL, tp, ip6, tp, th);		TCP_PROBE5(send, NULL, tp, ip6, tp, th);		/* TODO: IPv6 IP6TOS_ECT bit on */		error = ip6_output(m, tp->t_inpcb->in6p_outputopts, &ro,		    ((so->so_options & SO_DONTROUTE) ?  IP_ROUTETOIF : 0),		    NULL, NULL, tp->t_inpcb);		if (error == EMSGSIZE && ro.ro_rt != NULL)			mtu = ro.ro_rt->rt_mtu;		RO_RTFREE(&ro);	}#endif /* INET6 */#if defined(INET) && defined(INET6)	else#endif#ifdef INET    {	struct route ro;	bzero(&ro, sizeof(ro));	ip->ip_len = htons(m->m_pkthdr.len);#ifdef INET6	if (tp->t_inpcb->inp_vflag & INP_IPV6PROTO)		ip->ip_ttl = in6_selecthlim(tp->t_inpcb, NULL);#endif /* INET6 */	/*	 * If we do path MTU discovery, then we set DF on every packet.	 * This might not be the best thing to do according to RFC3390	 * Section 2. However the tcp hostcache migitates the problem	 * so it affects only the first tcp connection with a host.	 *	 * NB: Don't set DF on small MTU/MSS to have a safe fallback.	 */	if (V_path_mtu_discovery && tp->t_maxopd > V_tcp_minmss) {		ip->ip_off |= htons(IP_DF);		tp->t_flags2 |= TF2_PLPMTU_PMTUD;	} else {		tp->t_flags2 &= ~TF2_PLPMTU_PMTUD;	}	if (tp->t_state == TCPS_SYN_SENT)		TCP_PROBE5(connect__request, NULL, tp, ip, tp, th);	TCP_PROBE5(send, NULL, tp, ip, tp, th);	error = ip_output(m, tp->t_inpcb->inp_options, &ro,	    ((so->so_options & SO_DONTROUTE) ? IP_ROUTETOIF : 0), 0,	    tp->t_inpcb);	if (error == EMSGSIZE && ro.ro_rt != NULL)		mtu = ro.ro_rt->rt_mtu;	RO_RTFREE(&ro);    }#endif /* INET */out:	/*	 * In transmit state, time the transmission and arrange for	 * the retransmit.  In persist state, just set snd_max.	 */	if ((tp->t_flags & TF_FORCEDATA) == 0 ||	    !tcp_timer_active(tp, TT_PERSIST)) {		tcp_seq startseq = tp->snd_nxt;		/*		 * Advance snd_nxt over sequence space of this segment.		 */		if (flags & (TH_SYN|TH_FIN)) {			if (flags & TH_SYN)				tp->snd_nxt++;			if (flags & TH_FIN) {				tp->snd_nxt++;				tp->t_flags |= TF_SENTFIN;			}		}		if (sack_rxmit)			goto timer;		tp->snd_nxt += len;		if (SEQ_GT(tp->snd_nxt, tp->snd_max)) {			tp->snd_max = tp->snd_nxt;			/*			 * Time this transmission if not a retransmission and			 * not currently timing anything.			 */			if (tp->t_rtttime == 0) {				tp->t_rtttime = ticks;				tp->t_rtseq = startseq;				TCPSTAT_INC(tcps_segstimed);			}		}		/*		 * Set retransmit timer if not currently set,		 * and not doing a pure ack or a keep-alive probe.		 * Initial value for retransmit timer is smoothed		 * round-trip time + 2 * round-trip time variance.		 * Initialize shift counter which is used for backoff		 * of retransmit time.		 */timer:		if (!tcp_timer_active(tp, TT_REXMT) &&		    ((sack_rxmit && tp->snd_nxt != tp->snd_max) ||		     (tp->snd_nxt != tp->snd_una))) {			if (tcp_timer_active(tp, TT_PERSIST)) {				tcp_timer_activate(tp, TT_PERSIST, 0);				tp->t_rxtshift = 0;			}			tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		}	} else {		/*		 * Persist case, update snd_max but since we are in		 * persist mode (no window) we do not update snd_nxt.		 */		int xlen = len;		if (flags & TH_SYN)			++xlen;		if (flags & TH_FIN) {			++xlen;			tp->t_flags |= TF_SENTFIN;		}		if (SEQ_GT(tp->snd_nxt + xlen, tp->snd_max))			tp->snd_max = tp->snd_nxt + len;	}	if (error) {		/*		 * We know that the packet was lost, so back out the		 * sequence number advance, if any.		 *		 * If the error is EPERM the packet got blocked by the		 * local firewall.  Normally we should terminate the		 * connection but the blocking may have been spurious		 * due to a firewall reconfiguration cycle.  So we treat		 * it like a packet loss and let the retransmit timer and		 * timeouts do their work over time.		 * XXX: It is a POLA question whether calling tcp_drop right		 * away would be the really correct behavior instead.		 */		if (((tp->t_flags & TF_FORCEDATA) == 0 ||		    !tcp_timer_active(tp, TT_PERSIST)) &&		    ((flags & TH_SYN) == 0) &&		    (error != EPERM)) {			if (sack_rxmit) {				p->rxmit -= len;				tp->sackhint.sack_bytes_rexmit -= len;				KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,				    ("sackhint bytes rtx >= 0"));			} else				tp->snd_nxt -= len;		}		SOCKBUF_UNLOCK_ASSERT(&so->so_snd);	/* Check gotos. */		switch (error) {		case EPERM:			tp->t_softerror = error;			return (error);		case ENOBUFS:	                if (!tcp_timer_active(tp, TT_REXMT) &&			    !tcp_timer_active(tp, TT_PERSIST))	                        tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);			tp->snd_cwnd = tp->t_maxseg;			return (0);		case EMSGSIZE:			/*			 * For some reason the interface we used initially			 * to send segments changed to another or lowered			 * its MTU.			 * If TSO was active we either got an interface			 * without TSO capabilits or TSO was turned off.			 * If we obtained mtu from ip_output() then update			 * it and try again.			 */			if (tso)				tp->t_flags &= ~TF_TSO;			if (mtu != 0) {				tcp_mss_update(tp, -1, mtu, NULL, NULL);				goto again;			}			return (error);		case EHOSTDOWN:		case EHOSTUNREACH:		case ENETDOWN:		case ENETUNREACH:			if (TCPS_HAVERCVDSYN(tp->t_state)) {				tp->t_softerror = error;				return (0);			}			/* FALLTHROUGH */		default:			return (error);		}	}	TCPSTAT_INC(tcps_sndtotal);	/*	 * Data sent (as far as we can tell).	 * If this advertises a larger window than any other segment,	 * then remember the size of the advertised window.	 * Any pending ACK has now been sent.	 */	if (recwin >= 0 && SEQ_GT(tp->rcv_nxt + recwin, tp->rcv_adv))		tp->rcv_adv = tp->rcv_nxt + recwin;	tp->last_ack_sent = tp->rcv_nxt;	tp->t_flags &= ~(TF_ACKNOW | TF_DELACK);	if (tcp_timer_active(tp, TT_DELACK))		tcp_timer_activate(tp, TT_DELACK, 0);#if 0	/*	 * This completely breaks TCP if newreno is turned on.  What happens	 * is that if delayed-acks are turned on on the receiver, this code	 * on the transmitter effectively destroys the TCP window, forcing	 * it to four packets (1.5Kx4 = 6K window).	 */	if (sendalot && --maxburst)		goto again;#endif	if (sendalot)		goto again;	return (0);}
struct socket *so = tp->t_inpcb->inp_socket;
struct socket *so = tp->t_inpcb->inp_socket;
struct socket
socket
*so = tp->t_inpcb->inp_socket
*
so
= tp->t_inpcb->inp_socket
tp->t_inpcb->inp_socket
tp->t_inpcb
tp
tp
t_inpcb
inp_socket
long len, recwin, sendwin;
long len, recwin, sendwin;
long
len
len
recwin
recwin
sendwin
sendwin
int off, flags, error = 0;
int off, flags, error = 0;
int
off
off
flags
flags
error = 0
error
= 0
0
struct mbuf *m;
struct mbuf *m;
struct mbuf
mbuf
*m
*
m
struct ip *ip = NULL;
struct ip *ip = NULL;
struct ip
ip
*ip = NULL
*
ip
= NULL
NULL
NULL
struct ipovly *ipov = NULL;
struct ipovly *ipov = NULL;
struct ipovly
ipovly
*ipov = NULL
*
ipov
= NULL
NULL
NULL
struct tcphdr *th;
struct tcphdr *th;
struct tcphdr
tcphdr
*th
*
th
u_char opt[TCP_MAXOLEN];
u_char opt[TCP_MAXOLEN];
u_char
u_char
opt[TCP_MAXOLEN]
opt
[TCP_MAXOLEN]
TCP_MAXOLEN
TCP_MAXOLEN
unsigned ipoptlen, optlen, hdrlen;
unsigned ipoptlen, optlen, hdrlen;
unsigned
ipoptlen
ipoptlen
optlen
optlen
hdrlen
hdrlen
int idle, sendalot;
int idle, sendalot;
int
idle
idle
sendalot
sendalot
int sack_rxmit, sack_bytes_rxmt;
int sack_rxmit, sack_bytes_rxmt;
int
sack_rxmit
sack_rxmit
sack_bytes_rxmt
sack_bytes_rxmt
struct sackhole *p;
struct sackhole *p;
struct sackhole
sackhole
*p
*
p
int tso, mtu;
int tso, mtu;
int
tso
tso
mtu
mtu
struct tcpopt to;
struct tcpopt to;
struct tcpopt
tcpopt
to
to
INP_WLOCK_ASSERT(tp->t_inpcb);
INP_WLOCK_ASSERT(tp->t_inpcb)
INP_WLOCK_ASSERT
INP_WLOCK_ASSERT
tp->t_inpcb
tp
tp
t_inpcb
idle = (tp->t_flags & TF_LASTIDLE) || (tp->snd_max == tp->snd_una);
idle = (tp->t_flags & TF_LASTIDLE) || (tp->snd_max == tp->snd_una)
idle
idle
(tp->t_flags & TF_LASTIDLE) || (tp->snd_max == tp->snd_una)
(tp->t_flags & TF_LASTIDLE)
tp->t_flags & TF_LASTIDLE
tp->t_flags
tp
tp
t_flags
TF_LASTIDLE
TF_LASTIDLE
(tp->snd_max == tp->snd_una)
tp->snd_max == tp->snd_una
tp->snd_max
tp
tp
snd_max
tp->snd_una
tp
tp
snd_una
if (idle && ticks - tp->t_rcvtime >= tp->t_rxtcur)		cc_after_idle(tp);
idle && ticks - tp->t_rcvtime >= tp->t_rxtcur
idle
idle
ticks - tp->t_rcvtime >= tp->t_rxtcur
ticks - tp->t_rcvtime
ticks
ticks
tp->t_rcvtime
tp
tp
t_rcvtime
tp->t_rxtcur
tp
tp
t_rxtcur
cc_after_idle(tp);
cc_after_idle(tp)
cc_after_idle
cc_after_idle
tp
tp
tp->t_flags &= ~TF_LASTIDLE;
tp->t_flags &= ~TF_LASTIDLE
tp->t_flags
tp
tp
t_flags
~TF_LASTIDLE
TF_LASTIDLE
TF_LASTIDLE
if (idle) {		if (tp->t_flags & TF_MORETOCOME) {			tp->t_flags |= TF_LASTIDLE;			idle = 0;		}	}
idle
idle
{		if (tp->t_flags & TF_MORETOCOME) {			tp->t_flags |= TF_LASTIDLE;			idle = 0;		}	}
if (tp->t_flags & TF_MORETOCOME) {			tp->t_flags |= TF_LASTIDLE;			idle = 0;		}
tp->t_flags & TF_MORETOCOME
tp->t_flags
tp
tp
t_flags
TF_MORETOCOME
TF_MORETOCOME
{			tp->t_flags |= TF_LASTIDLE;			idle = 0;		}
tp->t_flags |= TF_LASTIDLE;
tp->t_flags |= TF_LASTIDLE
tp->t_flags
tp
tp
t_flags
TF_LASTIDLE
TF_LASTIDLE
idle = 0;
idle = 0
idle
idle
0
again:	/*	 * If we've recently taken a timeout, snd_max will be greater than	 * snd_nxt.  There may be SACK information that allows us to avoid	 * resending already delivered data.  Adjust snd_nxt accordingly.	 */	if ((tp->t_flags & TF_SACK_PERMIT) &&	    SEQ_LT(tp->snd_nxt, tp->snd_max))		tcp_sack_adjust(tp);
again
if ((tp->t_flags & TF_SACK_PERMIT) &&	    SEQ_LT(tp->snd_nxt, tp->snd_max))		tcp_sack_adjust(tp);
(tp->t_flags & TF_SACK_PERMIT) &&	    SEQ_LT(tp->snd_nxt, tp->snd_max)
(tp->t_flags & TF_SACK_PERMIT)
tp->t_flags & TF_SACK_PERMIT
tp->t_flags
tp
tp
t_flags
TF_SACK_PERMIT
TF_SACK_PERMIT
SEQ_LT(tp->snd_nxt, tp->snd_max)
SEQ_LT
SEQ_LT
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_max
tp
tp
snd_max
tcp_sack_adjust(tp);
tcp_sack_adjust(tp)
tcp_sack_adjust
tcp_sack_adjust
tp
tp
sendalot = 0;
sendalot = 0
sendalot
sendalot
0
tso = 0;
tso = 0
tso
tso
0
mtu = 0;
mtu = 0
mtu
mtu
0
off = tp->snd_nxt - tp->snd_una;
off = tp->snd_nxt - tp->snd_una
off
off
tp->snd_nxt - tp->snd_una
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_una
tp
tp
snd_una
sendwin = min(tp->snd_wnd, tp->snd_cwnd);
sendwin = min(tp->snd_wnd, tp->snd_cwnd)
sendwin
sendwin
min(tp->snd_wnd, tp->snd_cwnd)
min
min
tp->snd_wnd
tp
tp
snd_wnd
tp->snd_cwnd
tp
tp
snd_cwnd
flags = tcp_outflags[tp->t_state];
flags = tcp_outflags[tp->t_state]
flags
flags
tcp_outflags[tp->t_state]
tcp_outflags
tcp_outflags
tp->t_state
tp
tp
t_state
sack_rxmit = 0;
sack_rxmit = 0
sack_rxmit
sack_rxmit
0
sack_bytes_rxmt = 0;
sack_bytes_rxmt = 0
sack_bytes_rxmt
sack_bytes_rxmt
0
len = 0;
len = 0
len
len
0
p = NULL;
p = NULL
p
p
NULL
NULL
if ((tp->t_flags & TF_SACK_PERMIT) && IN_FASTRECOVERY(tp->t_flags) &&	    (p = tcp_sack_output(tp, &sack_bytes_rxmt))) {		long cwin;		cwin = min(tp->snd_wnd, tp->snd_cwnd) - sack_bytes_rxmt;		if (cwin < 0)			cwin = 0;		/* Do not retransmit SACK segments beyond snd_recover */		if (SEQ_GT(p->end, tp->snd_recover)) {			/*			 * (At least) part of sack hole extends beyond			 * snd_recover. Check to see if we can rexmit data			 * for this hole.			 */			if (SEQ_GEQ(p->rxmit, tp->snd_recover)) {				/*				 * Can't rexmit any more data for this hole.				 * That data will be rexmitted in the next				 * sack recovery episode, when snd_recover				 * moves past p->rxmit.				 */				p = NULL;				goto after_sack_rexmit;			} else				/* Can rexmit part of the current hole */				len = ((long)ulmin(cwin,						   tp->snd_recover - p->rxmit));		} else			len = ((long)ulmin(cwin, p->end - p->rxmit));		off = p->rxmit - tp->snd_una;		KASSERT(off >= 0,("%s: sack block to the left of una : %d",		    __func__, off));		if (len > 0) {			sack_rxmit = 1;			sendalot = 1;			TCPSTAT_INC(tcps_sack_rexmits);			TCPSTAT_ADD(tcps_sack_rexmit_bytes,			    min(len, tp->t_maxseg));		}	}
(tp->t_flags & TF_SACK_PERMIT) && IN_FASTRECOVERY(tp->t_flags) &&	    (p = tcp_sack_output(tp, &sack_bytes_rxmt))
(tp->t_flags & TF_SACK_PERMIT) && IN_FASTRECOVERY(tp->t_flags)
(tp->t_flags & TF_SACK_PERMIT)
tp->t_flags & TF_SACK_PERMIT
tp->t_flags
tp
tp
t_flags
TF_SACK_PERMIT
TF_SACK_PERMIT
IN_FASTRECOVERY(tp->t_flags)
IN_FASTRECOVERY
IN_FASTRECOVERY
tp->t_flags
tp
tp
t_flags
(p = tcp_sack_output(tp, &sack_bytes_rxmt))
p = tcp_sack_output(tp, &sack_bytes_rxmt)
p
p
tcp_sack_output(tp, &sack_bytes_rxmt)
tcp_sack_output
tcp_sack_output
tp
tp
&sack_bytes_rxmt
sack_bytes_rxmt
sack_bytes_rxmt
{		long cwin;		cwin = min(tp->snd_wnd, tp->snd_cwnd) - sack_bytes_rxmt;		if (cwin < 0)			cwin = 0;		/* Do not retransmit SACK segments beyond snd_recover */		if (SEQ_GT(p->end, tp->snd_recover)) {			/*			 * (At least) part of sack hole extends beyond			 * snd_recover. Check to see if we can rexmit data			 * for this hole.			 */			if (SEQ_GEQ(p->rxmit, tp->snd_recover)) {				/*				 * Can't rexmit any more data for this hole.				 * That data will be rexmitted in the next				 * sack recovery episode, when snd_recover				 * moves past p->rxmit.				 */				p = NULL;				goto after_sack_rexmit;			} else				/* Can rexmit part of the current hole */				len = ((long)ulmin(cwin,						   tp->snd_recover - p->rxmit));		} else			len = ((long)ulmin(cwin, p->end - p->rxmit));		off = p->rxmit - tp->snd_una;		KASSERT(off >= 0,("%s: sack block to the left of una : %d",		    __func__, off));		if (len > 0) {			sack_rxmit = 1;			sendalot = 1;			TCPSTAT_INC(tcps_sack_rexmits);			TCPSTAT_ADD(tcps_sack_rexmit_bytes,			    min(len, tp->t_maxseg));		}	}
long cwin;
long cwin;
long
cwin
cwin
cwin = min(tp->snd_wnd, tp->snd_cwnd) - sack_bytes_rxmt;
cwin = min(tp->snd_wnd, tp->snd_cwnd) - sack_bytes_rxmt
cwin
cwin
min(tp->snd_wnd, tp->snd_cwnd) - sack_bytes_rxmt
min(tp->snd_wnd, tp->snd_cwnd)
min
min
tp->snd_wnd
tp
tp
snd_wnd
tp->snd_cwnd
tp
tp
snd_cwnd
sack_bytes_rxmt
sack_bytes_rxmt
if (cwin < 0)			cwin = 0;
cwin < 0
cwin
cwin
0
cwin = 0;
cwin = 0
cwin
cwin
0
if (SEQ_GT(p->end, tp->snd_recover)) {			/*			 * (At least) part of sack hole extends beyond			 * snd_recover. Check to see if we can rexmit data			 * for this hole.			 */			if (SEQ_GEQ(p->rxmit, tp->snd_recover)) {				/*				 * Can't rexmit any more data for this hole.				 * That data will be rexmitted in the next				 * sack recovery episode, when snd_recover				 * moves past p->rxmit.				 */				p = NULL;				goto after_sack_rexmit;			} else				/* Can rexmit part of the current hole */				len = ((long)ulmin(cwin,						   tp->snd_recover - p->rxmit));		} else			len = ((long)ulmin(cwin, p->end - p->rxmit));
SEQ_GT(p->end, tp->snd_recover)
SEQ_GT
SEQ_GT
p->end
p
p
end
tp->snd_recover
tp
tp
snd_recover
{			/*			 * (At least) part of sack hole extends beyond			 * snd_recover. Check to see if we can rexmit data			 * for this hole.			 */			if (SEQ_GEQ(p->rxmit, tp->snd_recover)) {				/*				 * Can't rexmit any more data for this hole.				 * That data will be rexmitted in the next				 * sack recovery episode, when snd_recover				 * moves past p->rxmit.				 */				p = NULL;				goto after_sack_rexmit;			} else				/* Can rexmit part of the current hole */				len = ((long)ulmin(cwin,						   tp->snd_recover - p->rxmit));		}
if (SEQ_GEQ(p->rxmit, tp->snd_recover)) {				/*				 * Can't rexmit any more data for this hole.				 * That data will be rexmitted in the next				 * sack recovery episode, when snd_recover				 * moves past p->rxmit.				 */				p = NULL;				goto after_sack_rexmit;			} else				/* Can rexmit part of the current hole */				len = ((long)ulmin(cwin,						   tp->snd_recover - p->rxmit));
SEQ_GEQ(p->rxmit, tp->snd_recover)
SEQ_GEQ
SEQ_GEQ
p->rxmit
p
p
rxmit
tp->snd_recover
tp
tp
snd_recover
{				/*				 * Can't rexmit any more data for this hole.				 * That data will be rexmitted in the next				 * sack recovery episode, when snd_recover				 * moves past p->rxmit.				 */				p = NULL;				goto after_sack_rexmit;			}
p = NULL;
p = NULL
p
p
NULL
NULL
goto after_sack_rexmit;
after_sack_rexmit
len = ((long)ulmin(cwin,						   tp->snd_recover - p->rxmit));
len = ((long)ulmin(cwin,						   tp->snd_recover - p->rxmit))
len
len
((long)ulmin(cwin,						   tp->snd_recover - p->rxmit))
(long)ulmin(cwin,						   tp->snd_recover - p->rxmit)
long
long

ulmin(cwin,						   tp->snd_recover - p->rxmit)
ulmin
ulmin
cwin
cwin
tp->snd_recover - p->rxmit
tp->snd_recover
tp
tp
snd_recover
p->rxmit
p
p
rxmit
len = ((long)ulmin(cwin, p->end - p->rxmit));
len = ((long)ulmin(cwin, p->end - p->rxmit))
len
len
((long)ulmin(cwin, p->end - p->rxmit))
(long)ulmin(cwin, p->end - p->rxmit)
long
long

ulmin(cwin, p->end - p->rxmit)
ulmin
ulmin
cwin
cwin
p->end - p->rxmit
p->end
p
p
end
p->rxmit
p
p
rxmit
off = p->rxmit - tp->snd_una;
off = p->rxmit - tp->snd_una
off
off
p->rxmit - tp->snd_una
p->rxmit
p
p
rxmit
tp->snd_una
tp
tp
snd_una
KASSERT(off >= 0,("%s: sack block to the left of una : %d",		    __func__, off));
KASSERT(off >= 0,("%s: sack block to the left of una : %d",		    __func__, off))
KASSERT
KASSERT
off >= 0
off
off
0
("%s: sack block to the left of una : %d",		    __func__, off)
"%s: sack block to the left of una : %d",		    __func__, off
"%s: sack block to the left of una : %d"
__func__
__func__
off
off
if (len > 0) {			sack_rxmit = 1;			sendalot = 1;			TCPSTAT_INC(tcps_sack_rexmits);			TCPSTAT_ADD(tcps_sack_rexmit_bytes,			    min(len, tp->t_maxseg));		}
len > 0
len
len
0
{			sack_rxmit = 1;			sendalot = 1;			TCPSTAT_INC(tcps_sack_rexmits);			TCPSTAT_ADD(tcps_sack_rexmit_bytes,			    min(len, tp->t_maxseg));		}
sack_rxmit = 1;
sack_rxmit = 1
sack_rxmit
sack_rxmit
1
sendalot = 1;
sendalot = 1
sendalot
sendalot
1
TCPSTAT_INC(tcps_sack_rexmits);
TCPSTAT_INC(tcps_sack_rexmits);
TCPSTAT_INC
TCPSTAT_INC
(tcps_sack_rexmits)
tcps_sack_rexmits
tcps_sack_rexmits
TCPSTAT_ADD(tcps_sack_rexmit_bytes,			    min(len, tp->t_maxseg));
TCPSTAT_ADD(tcps_sack_rexmit_bytes,			    min(len, tp->t_maxseg))
TCPSTAT_ADD
TCPSTAT_ADD
tcps_sack_rexmit_bytes
tcps_sack_rexmit_bytes
min(len, tp->t_maxseg)
min
min
len
len
tp->t_maxseg
tp
tp
t_maxseg
after_sack_rexmit:	/*	 * Get standard flags, and add SYN or FIN if requested by 'hidden'	 * state flags.	 */	if (tp->t_flags & TF_NEEDFIN)		flags |= TH_FIN;
after_sack_rexmit
if (tp->t_flags & TF_NEEDFIN)		flags |= TH_FIN;
tp->t_flags & TF_NEEDFIN
tp->t_flags
tp
tp
t_flags
TF_NEEDFIN
TF_NEEDFIN
flags |= TH_FIN;
flags |= TH_FIN
flags
flags
TH_FIN
TH_FIN
if (tp->t_flags & TF_NEEDSYN)		flags |= TH_SYN;
tp->t_flags & TF_NEEDSYN
tp->t_flags
tp
tp
t_flags
TF_NEEDSYN
TF_NEEDSYN
flags |= TH_SYN;
flags |= TH_SYN
flags
flags
TH_SYN
TH_SYN
SOCKBUF_LOCK(&so->so_snd);
SOCKBUF_LOCK(&so->so_snd)
SOCKBUF_LOCK
SOCKBUF_LOCK
&so->so_snd
so->so_snd
so
so
so_snd
if (tp->t_flags & TF_FORCEDATA) {		if (sendwin == 0) {			/*			 * If we still have some data to send, then			 * clear the FIN bit.  Usually this would			 * happen below when it realizes that we			 * aren't sending all the data.  However,			 * if we have exactly 1 byte of unsent data,			 * then it won't clear the FIN bit below,			 * and if we are in persist state, we wind			 * up sending the packet without recording			 * that we sent the FIN bit.			 *			 * We can't just blindly clear the FIN bit,			 * because if we don't have any more data			 * to send then the probe will be the FIN			 * itself.			 */			if (off < so->so_snd.sb_cc)				flags &= ~TH_FIN;			sendwin = 1;		} else {			tcp_timer_activate(tp, TT_PERSIST, 0);			tp->t_rxtshift = 0;		}	}
tp->t_flags & TF_FORCEDATA
tp->t_flags
tp
tp
t_flags
TF_FORCEDATA
TF_FORCEDATA
{		if (sendwin == 0) {			/*			 * If we still have some data to send, then			 * clear the FIN bit.  Usually this would			 * happen below when it realizes that we			 * aren't sending all the data.  However,			 * if we have exactly 1 byte of unsent data,			 * then it won't clear the FIN bit below,			 * and if we are in persist state, we wind			 * up sending the packet without recording			 * that we sent the FIN bit.			 *			 * We can't just blindly clear the FIN bit,			 * because if we don't have any more data			 * to send then the probe will be the FIN			 * itself.			 */			if (off < so->so_snd.sb_cc)				flags &= ~TH_FIN;			sendwin = 1;		} else {			tcp_timer_activate(tp, TT_PERSIST, 0);			tp->t_rxtshift = 0;		}	}
if (sendwin == 0) {			/*			 * If we still have some data to send, then			 * clear the FIN bit.  Usually this would			 * happen below when it realizes that we			 * aren't sending all the data.  However,			 * if we have exactly 1 byte of unsent data,			 * then it won't clear the FIN bit below,			 * and if we are in persist state, we wind			 * up sending the packet without recording			 * that we sent the FIN bit.			 *			 * We can't just blindly clear the FIN bit,			 * because if we don't have any more data			 * to send then the probe will be the FIN			 * itself.			 */			if (off < so->so_snd.sb_cc)				flags &= ~TH_FIN;			sendwin = 1;		} else {			tcp_timer_activate(tp, TT_PERSIST, 0);			tp->t_rxtshift = 0;		}
sendwin == 0
sendwin
sendwin
0
{			/*			 * If we still have some data to send, then			 * clear the FIN bit.  Usually this would			 * happen below when it realizes that we			 * aren't sending all the data.  However,			 * if we have exactly 1 byte of unsent data,			 * then it won't clear the FIN bit below,			 * and if we are in persist state, we wind			 * up sending the packet without recording			 * that we sent the FIN bit.			 *			 * We can't just blindly clear the FIN bit,			 * because if we don't have any more data			 * to send then the probe will be the FIN			 * itself.			 */			if (off < so->so_snd.sb_cc)				flags &= ~TH_FIN;			sendwin = 1;		}
if (off < so->so_snd.sb_cc)				flags &= ~TH_FIN;
off < so->so_snd.sb_cc
off
off
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
flags &= ~TH_FIN;
flags &= ~TH_FIN
flags
flags
~TH_FIN
TH_FIN
TH_FIN
sendwin = 1;
sendwin = 1
sendwin
sendwin
1
{			tcp_timer_activate(tp, TT_PERSIST, 0);			tp->t_rxtshift = 0;		}
tcp_timer_activate(tp, TT_PERSIST, 0);
tcp_timer_activate(tp, TT_PERSIST, 0)
tcp_timer_activate
tcp_timer_activate
tp
tp
TT_PERSIST
TT_PERSIST
0
tp->t_rxtshift = 0;
tp->t_rxtshift = 0
tp->t_rxtshift
tp
tp
t_rxtshift
0
if (sack_rxmit == 0) {		if (sack_bytes_rxmt == 0)			len = ((long)ulmin(so->so_snd.sb_cc, sendwin) - off);		else {			long cwin;                        /*			 * We are inside of a SACK recovery episode and are			 * sending new data, having retransmitted all the			 * data possible in the scoreboard.			 */			len = ((long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)			       - off);			/*			 * Don't remove this (len > 0) check !			 * We explicitly check for len > 0 here (although it			 * isn't really necessary), to work around a gcc			 * optimization issue - to force gcc to compute			 * len above. Without this check, the computation			 * of len is bungled by the optimizer.			 */			if (len > 0) {				cwin = tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata) -					sack_bytes_rxmt;				if (cwin < 0)					cwin = 0;				len = lmin(len, cwin);			}		}	}
sack_rxmit == 0
sack_rxmit
sack_rxmit
0
{		if (sack_bytes_rxmt == 0)			len = ((long)ulmin(so->so_snd.sb_cc, sendwin) - off);		else {			long cwin;                        /*			 * We are inside of a SACK recovery episode and are			 * sending new data, having retransmitted all the			 * data possible in the scoreboard.			 */			len = ((long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)			       - off);			/*			 * Don't remove this (len > 0) check !			 * We explicitly check for len > 0 here (although it			 * isn't really necessary), to work around a gcc			 * optimization issue - to force gcc to compute			 * len above. Without this check, the computation			 * of len is bungled by the optimizer.			 */			if (len > 0) {				cwin = tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata) -					sack_bytes_rxmt;				if (cwin < 0)					cwin = 0;				len = lmin(len, cwin);			}		}	}
if (sack_bytes_rxmt == 0)			len = ((long)ulmin(so->so_snd.sb_cc, sendwin) - off);		else {			long cwin;                        /*			 * We are inside of a SACK recovery episode and are			 * sending new data, having retransmitted all the			 * data possible in the scoreboard.			 */			len = ((long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)			       - off);			/*			 * Don't remove this (len > 0) check !			 * We explicitly check for len > 0 here (although it			 * isn't really necessary), to work around a gcc			 * optimization issue - to force gcc to compute			 * len above. Without this check, the computation			 * of len is bungled by the optimizer.			 */			if (len > 0) {				cwin = tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata) -					sack_bytes_rxmt;				if (cwin < 0)					cwin = 0;				len = lmin(len, cwin);			}		}
sack_bytes_rxmt == 0
sack_bytes_rxmt
sack_bytes_rxmt
0
len = ((long)ulmin(so->so_snd.sb_cc, sendwin) - off);
len = ((long)ulmin(so->so_snd.sb_cc, sendwin) - off)
len
len
((long)ulmin(so->so_snd.sb_cc, sendwin) - off)
(long)ulmin(so->so_snd.sb_cc, sendwin) - off
(long)ulmin(so->so_snd.sb_cc, sendwin)
long
long

ulmin(so->so_snd.sb_cc, sendwin)
ulmin
ulmin
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
sendwin
sendwin
off
off
{			long cwin;                        /*			 * We are inside of a SACK recovery episode and are			 * sending new data, having retransmitted all the			 * data possible in the scoreboard.			 */			len = ((long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)			       - off);			/*			 * Don't remove this (len > 0) check !			 * We explicitly check for len > 0 here (although it			 * isn't really necessary), to work around a gcc			 * optimization issue - to force gcc to compute			 * len above. Without this check, the computation			 * of len is bungled by the optimizer.			 */			if (len > 0) {				cwin = tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata) -					sack_bytes_rxmt;				if (cwin < 0)					cwin = 0;				len = lmin(len, cwin);			}		}
long cwin;
long cwin;
long
cwin
cwin
len = ((long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)			       - off);
len = ((long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)			       - off)
len
len
((long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)			       - off)
(long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)			       - off
(long)ulmin(so->so_snd.sb_cc, tp->snd_wnd)
long
long

ulmin(so->so_snd.sb_cc, tp->snd_wnd)
ulmin
ulmin
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
tp->snd_wnd
tp
tp
snd_wnd
off
off
if (len > 0) {				cwin = tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata) -					sack_bytes_rxmt;				if (cwin < 0)					cwin = 0;				len = lmin(len, cwin);			}
len > 0
len
len
0
{				cwin = tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata) -					sack_bytes_rxmt;				if (cwin < 0)					cwin = 0;				len = lmin(len, cwin);			}
cwin = tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata) -					sack_bytes_rxmt;
cwin = tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata) -					sack_bytes_rxmt
cwin
cwin
tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata) -					sack_bytes_rxmt
tp->snd_cwnd -					(tp->snd_nxt - tp->sack_newdata)
tp->snd_cwnd
tp
tp
snd_cwnd
(tp->snd_nxt - tp->sack_newdata)
tp->snd_nxt - tp->sack_newdata
tp->snd_nxt
tp
tp
snd_nxt
tp->sack_newdata
tp
tp
sack_newdata
sack_bytes_rxmt
sack_bytes_rxmt
if (cwin < 0)					cwin = 0;
cwin < 0
cwin
cwin
0
cwin = 0;
cwin = 0
cwin
cwin
0
len = lmin(len, cwin);
len = lmin(len, cwin)
len
len
lmin(len, cwin)
lmin
lmin
len
len
cwin
cwin
if ((flags & TH_SYN) && SEQ_GT(tp->snd_nxt, tp->snd_una)) {		if (tp->t_state != TCPS_SYN_RECEIVED)			flags &= ~TH_SYN;		off--, len++;	}
(flags & TH_SYN) && SEQ_GT(tp->snd_nxt, tp->snd_una)
(flags & TH_SYN)
flags & TH_SYN
flags
flags
TH_SYN
TH_SYN
SEQ_GT(tp->snd_nxt, tp->snd_una)
SEQ_GT
SEQ_GT
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_una
tp
tp
snd_una
{		if (tp->t_state != TCPS_SYN_RECEIVED)			flags &= ~TH_SYN;		off--, len++;	}
if (tp->t_state != TCPS_SYN_RECEIVED)			flags &= ~TH_SYN;
tp->t_state != TCPS_SYN_RECEIVED
tp->t_state
tp
tp
t_state
TCPS_SYN_RECEIVED
TCPS_SYN_RECEIVED
flags &= ~TH_SYN;
flags &= ~TH_SYN
flags
flags
~TH_SYN
TH_SYN
TH_SYN
off--, len++;
off--, len++
off--
off
off
len++
len
len
if ((flags & TH_SYN) && (tp->t_flags & TF_NOOPT)) {		len = 0;		flags &= ~TH_FIN;	}
(flags & TH_SYN) && (tp->t_flags & TF_NOOPT)
(flags & TH_SYN)
flags & TH_SYN
flags
flags
TH_SYN
TH_SYN
(tp->t_flags & TF_NOOPT)
tp->t_flags & TF_NOOPT
tp->t_flags
tp
tp
t_flags
TF_NOOPT
TF_NOOPT
{		len = 0;		flags &= ~TH_FIN;	}
len = 0;
len = 0
len
len
0
flags &= ~TH_FIN;
flags &= ~TH_FIN
flags
flags
~TH_FIN
TH_FIN
TH_FIN
if (len < 0) {		/*		 * If FIN has been sent but not acked,		 * but we haven't been called to retransmit,		 * len will be < 0.  Otherwise, window shrank		 * after we sent into it.  If window shrank to 0,		 * cancel pending retransmit, pull snd_nxt back		 * to (closed) window, and set the persist timer		 * if it isn't already going.  If the window didn't		 * close completely, just wait for an ACK.		 */		len = 0;		if (sendwin == 0) {			tcp_timer_activate(tp, TT_REXMT, 0);			tp->t_rxtshift = 0;			tp->snd_nxt = tp->snd_una;			if (!tcp_timer_active(tp, TT_PERSIST))				tcp_setpersist(tp);		}	}
len < 0
len
len
0
{		/*		 * If FIN has been sent but not acked,		 * but we haven't been called to retransmit,		 * len will be < 0.  Otherwise, window shrank		 * after we sent into it.  If window shrank to 0,		 * cancel pending retransmit, pull snd_nxt back		 * to (closed) window, and set the persist timer		 * if it isn't already going.  If the window didn't		 * close completely, just wait for an ACK.		 */		len = 0;		if (sendwin == 0) {			tcp_timer_activate(tp, TT_REXMT, 0);			tp->t_rxtshift = 0;			tp->snd_nxt = tp->snd_una;			if (!tcp_timer_active(tp, TT_PERSIST))				tcp_setpersist(tp);		}	}
len = 0;
len = 0
len
len
0
if (sendwin == 0) {			tcp_timer_activate(tp, TT_REXMT, 0);			tp->t_rxtshift = 0;			tp->snd_nxt = tp->snd_una;			if (!tcp_timer_active(tp, TT_PERSIST))				tcp_setpersist(tp);		}
sendwin == 0
sendwin
sendwin
0
{			tcp_timer_activate(tp, TT_REXMT, 0);			tp->t_rxtshift = 0;			tp->snd_nxt = tp->snd_una;			if (!tcp_timer_active(tp, TT_PERSIST))				tcp_setpersist(tp);		}
tcp_timer_activate(tp, TT_REXMT, 0);
tcp_timer_activate(tp, TT_REXMT, 0)
tcp_timer_activate
tcp_timer_activate
tp
tp
TT_REXMT
TT_REXMT
0
tp->t_rxtshift = 0;
tp->t_rxtshift = 0
tp->t_rxtshift
tp
tp
t_rxtshift
0
tp->snd_nxt = tp->snd_una;
tp->snd_nxt = tp->snd_una
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_una
tp
tp
snd_una
if (!tcp_timer_active(tp, TT_PERSIST))				tcp_setpersist(tp);
!tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active
tcp_timer_active
tp
tp
TT_PERSIST
TT_PERSIST
tcp_setpersist(tp);
tcp_setpersist(tp)
tcp_setpersist
tcp_setpersist
tp
tp
KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__));
KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__))
KASSERT
KASSERT
len >= 0
len
len
0
("[%s:%d]: len < 0", __func__, __LINE__)
"[%s:%d]: len < 0", __func__, __LINE__
"[%s:%d]: len < 0"
__func__
__func__
__LINE__
if (V_tcp_do_autosndbuf && so->so_snd.sb_flags & SB_AUTOSIZE) {		if ((tp->snd_wnd / 4 * 5) >= so->so_snd.sb_hiwat &&		    so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7) &&		    so->so_snd.sb_cc < V_tcp_autosndbuf_max &&		    sendwin >= (so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una))) {			if (!sbreserve_locked(&so->so_snd,			    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,			     V_tcp_autosndbuf_max), so, curthread))				so->so_snd.sb_flags &= ~SB_AUTOSIZE;		}	}
V_tcp_do_autosndbuf && so->so_snd.sb_flags & SB_AUTOSIZE
V_tcp_do_autosndbuf
V_tcp_do_autosndbuf
so->so_snd.sb_flags & SB_AUTOSIZE
so->so_snd.sb_flags
so->so_snd
so
so
so_snd
sb_flags
SB_AUTOSIZE
SB_AUTOSIZE
{		if ((tp->snd_wnd / 4 * 5) >= so->so_snd.sb_hiwat &&		    so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7) &&		    so->so_snd.sb_cc < V_tcp_autosndbuf_max &&		    sendwin >= (so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una))) {			if (!sbreserve_locked(&so->so_snd,			    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,			     V_tcp_autosndbuf_max), so, curthread))				so->so_snd.sb_flags &= ~SB_AUTOSIZE;		}	}
if ((tp->snd_wnd / 4 * 5) >= so->so_snd.sb_hiwat &&		    so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7) &&		    so->so_snd.sb_cc < V_tcp_autosndbuf_max &&		    sendwin >= (so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una))) {			if (!sbreserve_locked(&so->so_snd,			    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,			     V_tcp_autosndbuf_max), so, curthread))				so->so_snd.sb_flags &= ~SB_AUTOSIZE;		}
(tp->snd_wnd / 4 * 5) >= so->so_snd.sb_hiwat &&		    so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7) &&		    so->so_snd.sb_cc < V_tcp_autosndbuf_max &&		    sendwin >= (so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una))
(tp->snd_wnd / 4 * 5) >= so->so_snd.sb_hiwat &&		    so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7) &&		    so->so_snd.sb_cc < V_tcp_autosndbuf_max
(tp->snd_wnd / 4 * 5) >= so->so_snd.sb_hiwat &&		    so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7)
(tp->snd_wnd / 4 * 5) >= so->so_snd.sb_hiwat
(tp->snd_wnd / 4 * 5)
tp->snd_wnd / 4 * 5
tp->snd_wnd / 4
tp->snd_wnd
tp
tp
snd_wnd
4
5
so->so_snd.sb_hiwat
so->so_snd
so
so
so_snd
sb_hiwat
so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7)
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
(so->so_snd.sb_hiwat / 8 * 7)
so->so_snd.sb_hiwat / 8 * 7
so->so_snd.sb_hiwat / 8
so->so_snd.sb_hiwat
so->so_snd
so
so
so_snd
sb_hiwat
8
7
so->so_snd.sb_cc < V_tcp_autosndbuf_max
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
V_tcp_autosndbuf_max
V_tcp_autosndbuf_max
sendwin >= (so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una))
sendwin
sendwin
(so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una))
so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una)
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
(tp->snd_nxt - tp->snd_una)
tp->snd_nxt - tp->snd_una
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_una
tp
tp
snd_una
{			if (!sbreserve_locked(&so->so_snd,			    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,			     V_tcp_autosndbuf_max), so, curthread))				so->so_snd.sb_flags &= ~SB_AUTOSIZE;		}
if (!sbreserve_locked(&so->so_snd,			    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,			     V_tcp_autosndbuf_max), so, curthread))				so->so_snd.sb_flags &= ~SB_AUTOSIZE;
!sbreserve_locked(&so->so_snd,			    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,			     V_tcp_autosndbuf_max), so, curthread)
sbreserve_locked(&so->so_snd,			    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,			     V_tcp_autosndbuf_max), so, curthread)
sbreserve_locked
sbreserve_locked
&so->so_snd
so->so_snd
so
so
so_snd
min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,			     V_tcp_autosndbuf_max)
min
min
so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc
so->so_snd.sb_hiwat
so->so_snd
so
so
so_snd
sb_hiwat
V_tcp_autosndbuf_inc
V_tcp_autosndbuf_inc
V_tcp_autosndbuf_max
V_tcp_autosndbuf_max
so
so
curthread
curthread
so->so_snd.sb_flags &= ~SB_AUTOSIZE;
so->so_snd.sb_flags &= ~SB_AUTOSIZE
so->so_snd.sb_flags
so->so_snd
so
so
so_snd
sb_flags
~SB_AUTOSIZE
SB_AUTOSIZE
SB_AUTOSIZE
if ((tp->t_flags & TF_TSO) && V_tcp_do_tso && len > tp->t_maxseg &&	    ((tp->t_flags & TF_SIGNATURE) == 0) &&	    tp->rcv_numsacks == 0 && sack_rxmit == 0 &&#ifdef IPSEC	    ipsec_optlen == 0 &&#endif	    tp->t_inpcb->inp_options == NULL &&	    tp->t_inpcb->in6p_options == NULL)		tso = 1;
(tp->t_flags & TF_TSO) && V_tcp_do_tso && len > tp->t_maxseg &&	    ((tp->t_flags & TF_SIGNATURE) == 0) &&	    tp->rcv_numsacks == 0 && sack_rxmit == 0 &&#ifdef IPSEC	    ipsec_optlen == 0 &&#endif	    tp->t_inpcb->inp_options == NULL &&	    tp->t_inpcb->in6p_options == NULL
(tp->t_flags & TF_TSO) && V_tcp_do_tso && len > tp->t_maxseg &&	    ((tp->t_flags & TF_SIGNATURE) == 0) &&	    tp->rcv_numsacks == 0 && sack_rxmit == 0 &&#ifdef IPSEC	    ipsec_optlen == 0 &&#endif	    tp->t_inpcb->inp_options == NULL
(tp->t_flags & TF_TSO) && V_tcp_do_tso && len > tp->t_maxseg &&	    ((tp->t_flags & TF_SIGNATURE) == 0) &&	    tp->rcv_numsacks == 0 && sack_rxmit == 0
(tp->t_flags & TF_TSO) && V_tcp_do_tso && len > tp->t_maxseg &&	    ((tp->t_flags & TF_SIGNATURE) == 0) &&	    tp->rcv_numsacks == 0
(tp->t_flags & TF_TSO) && V_tcp_do_tso && len > tp->t_maxseg &&	    ((tp->t_flags & TF_SIGNATURE) == 0)
(tp->t_flags & TF_TSO) && V_tcp_do_tso && len > tp->t_maxseg
(tp->t_flags & TF_TSO) && V_tcp_do_tso
(tp->t_flags & TF_TSO)
tp->t_flags & TF_TSO
tp->t_flags
tp
tp
t_flags
TF_TSO
TF_TSO
V_tcp_do_tso
V_tcp_do_tso
len > tp->t_maxseg
len
len
tp->t_maxseg
tp
tp
t_maxseg
((tp->t_flags & TF_SIGNATURE) == 0)
(tp->t_flags & TF_SIGNATURE) == 0
(tp->t_flags & TF_SIGNATURE)
tp->t_flags & TF_SIGNATURE
tp->t_flags
tp
tp
t_flags
TF_SIGNATURE
TF_SIGNATURE
0
tp->rcv_numsacks == 0
tp->rcv_numsacks
tp
tp
rcv_numsacks
0
sack_rxmit == 0
sack_rxmit
sack_rxmit
0
tp->t_inpcb->inp_options == NULL
tp->t_inpcb->inp_options
tp->t_inpcb
tp
tp
t_inpcb
inp_options
NULL
NULL
tp->t_inpcb->in6p_options == NULL
tp->t_inpcb->in6p_options
tp->t_inpcb
tp
tp
t_inpcb
in6p_options
NULL
NULL
tso = 1;
tso = 1
tso
tso
1
if (sack_rxmit) {		if (SEQ_LT(p->rxmit + len, tp->snd_una + so->so_snd.sb_cc))			flags &= ~TH_FIN;	} else {		if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))			flags &= ~TH_FIN;	}
sack_rxmit
sack_rxmit
{		if (SEQ_LT(p->rxmit + len, tp->snd_una + so->so_snd.sb_cc))			flags &= ~TH_FIN;	}
if (SEQ_LT(p->rxmit + len, tp->snd_una + so->so_snd.sb_cc))			flags &= ~TH_FIN;
SEQ_LT(p->rxmit + len, tp->snd_una + so->so_snd.sb_cc)
SEQ_LT
SEQ_LT
p->rxmit + len
p->rxmit
p
p
rxmit
len
len
tp->snd_una + so->so_snd.sb_cc
tp->snd_una
tp
tp
snd_una
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
flags &= ~TH_FIN;
flags &= ~TH_FIN
flags
flags
~TH_FIN
TH_FIN
TH_FIN
{		if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))			flags &= ~TH_FIN;	}
if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))			flags &= ~TH_FIN;
SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc)
SEQ_LT
SEQ_LT
tp->snd_nxt + len
tp->snd_nxt
tp
tp
snd_nxt
len
len
tp->snd_una + so->so_snd.sb_cc
tp->snd_una
tp
tp
snd_una
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
flags &= ~TH_FIN;
flags &= ~TH_FIN
flags
flags
~TH_FIN
TH_FIN
TH_FIN
recwin = sbspace(&so->so_rcv);
recwin = sbspace(&so->so_rcv)
recwin
recwin
sbspace(&so->so_rcv)
sbspace
sbspace
&so->so_rcv
so->so_rcv
so
so
so_rcv
if (len) {		if (len >= tp->t_maxseg)			goto send;		/*		 * NOTE! on localhost connections an 'ack' from the remote		 * end may occur synchronously with the output and cause		 * us to flush a buffer queued with moretocome.  XXX		 *		 * note: the len + off check is almost certainly unnecessary.		 */		if (!(tp->t_flags & TF_MORETOCOME) &&	/* normal case */		    (idle || (tp->t_flags & TF_NODELAY)) &&		    len + off >= so->so_snd.sb_cc &&		    (tp->t_flags & TF_NOPUSH) == 0) {			goto send;		}		if (tp->t_flags & TF_FORCEDATA)		/* typ. timeout case */			goto send;		if (len >= tp->max_sndwnd / 2 && tp->max_sndwnd > 0)			goto send;		if (SEQ_LT(tp->snd_nxt, tp->snd_max))	/* retransmit case */			goto send;		if (sack_rxmit)			goto send;	}
len
len
{		if (len >= tp->t_maxseg)			goto send;		/*		 * NOTE! on localhost connections an 'ack' from the remote		 * end may occur synchronously with the output and cause		 * us to flush a buffer queued with moretocome.  XXX		 *		 * note: the len + off check is almost certainly unnecessary.		 */		if (!(tp->t_flags & TF_MORETOCOME) &&	/* normal case */		    (idle || (tp->t_flags & TF_NODELAY)) &&		    len + off >= so->so_snd.sb_cc &&		    (tp->t_flags & TF_NOPUSH) == 0) {			goto send;		}		if (tp->t_flags & TF_FORCEDATA)		/* typ. timeout case */			goto send;		if (len >= tp->max_sndwnd / 2 && tp->max_sndwnd > 0)			goto send;		if (SEQ_LT(tp->snd_nxt, tp->snd_max))	/* retransmit case */			goto send;		if (sack_rxmit)			goto send;	}
if (len >= tp->t_maxseg)			goto send;
len >= tp->t_maxseg
len
len
tp->t_maxseg
tp
tp
t_maxseg
goto send;
send
if (!(tp->t_flags & TF_MORETOCOME) &&	/* normal case */		    (idle || (tp->t_flags & TF_NODELAY)) &&		    len + off >= so->so_snd.sb_cc &&		    (tp->t_flags & TF_NOPUSH) == 0) {			goto send;		}
!(tp->t_flags & TF_MORETOCOME) &&	/* normal case */		    (idle || (tp->t_flags & TF_NODELAY)) &&		    len + off >= so->so_snd.sb_cc &&		    (tp->t_flags & TF_NOPUSH) == 0
!(tp->t_flags & TF_MORETOCOME) &&	/* normal case */		    (idle || (tp->t_flags & TF_NODELAY)) &&		    len + off >= so->so_snd.sb_cc
!(tp->t_flags & TF_MORETOCOME) &&	/* normal case */		    (idle || (tp->t_flags & TF_NODELAY))
!(tp->t_flags & TF_MORETOCOME)
(tp->t_flags & TF_MORETOCOME)
tp->t_flags & TF_MORETOCOME
tp->t_flags
tp
tp
t_flags
TF_MORETOCOME
TF_MORETOCOME
(idle || (tp->t_flags & TF_NODELAY))
idle || (tp->t_flags & TF_NODELAY)
idle
idle
(tp->t_flags & TF_NODELAY)
tp->t_flags & TF_NODELAY
tp->t_flags
tp
tp
t_flags
TF_NODELAY
TF_NODELAY
len + off >= so->so_snd.sb_cc
len + off
len
len
off
off
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
(tp->t_flags & TF_NOPUSH) == 0
(tp->t_flags & TF_NOPUSH)
tp->t_flags & TF_NOPUSH
tp->t_flags
tp
tp
t_flags
TF_NOPUSH
TF_NOPUSH
0
{			goto send;		}
goto send;
send
if (tp->t_flags & TF_FORCEDATA)		/* typ. timeout case */			goto send;
tp->t_flags & TF_FORCEDATA
tp->t_flags
tp
tp
t_flags
TF_FORCEDATA
TF_FORCEDATA
goto send;
send
if (len >= tp->max_sndwnd / 2 && tp->max_sndwnd > 0)			goto send;
len >= tp->max_sndwnd / 2 && tp->max_sndwnd > 0
len >= tp->max_sndwnd / 2
len
len
tp->max_sndwnd / 2
tp->max_sndwnd
tp
tp
max_sndwnd
2
tp->max_sndwnd > 0
tp->max_sndwnd
tp
tp
max_sndwnd
0
goto send;
send
if (SEQ_LT(tp->snd_nxt, tp->snd_max))	/* retransmit case */			goto send;
SEQ_LT(tp->snd_nxt, tp->snd_max)
SEQ_LT
SEQ_LT
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_max
tp
tp
snd_max
goto send;
send
if (sack_rxmit)			goto send;
sack_rxmit
sack_rxmit
goto send;
send
if (recwin > 0 && !(tp->t_flags & TF_NEEDSYN) &&	    !(tp->t_flags & TF_DELACK) &&	    !TCPS_HAVERCVDFIN(tp->t_state)) {		/*		 * "adv" is the amount we could increase the window,		 * taking into account that we are limited by		 * TCP_MAXWIN << tp->rcv_scale.		 */		long adv;		int oldwin;		adv = min(recwin, (long)TCP_MAXWIN << tp->rcv_scale);		if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt)) {			oldwin = (tp->rcv_adv - tp->rcv_nxt);			adv -= oldwin;		} else			oldwin = 0;		/*		 * If the new window size ends up being the same as the old		 * size when it is scaled, then don't force a window update.		 */		if (oldwin >> tp->rcv_scale == (adv + oldwin) >> tp->rcv_scale)			goto dontupdate;		if (adv >= (long)(2 * tp->t_maxseg) &&		    (adv >= (long)(so->so_rcv.sb_hiwat / 4) ||		     recwin <= (long)(so->so_rcv.sb_hiwat / 8) ||		     so->so_rcv.sb_hiwat <= 8 * tp->t_maxseg))			goto send;	}
recwin > 0 && !(tp->t_flags & TF_NEEDSYN) &&	    !(tp->t_flags & TF_DELACK) &&	    !TCPS_HAVERCVDFIN(tp->t_state)
recwin > 0 && !(tp->t_flags & TF_NEEDSYN) &&	    !(tp->t_flags & TF_DELACK)
recwin > 0 && !(tp->t_flags & TF_NEEDSYN)
recwin > 0
recwin
recwin
0
!(tp->t_flags & TF_NEEDSYN)
(tp->t_flags & TF_NEEDSYN)
tp->t_flags & TF_NEEDSYN
tp->t_flags
tp
tp
t_flags
TF_NEEDSYN
TF_NEEDSYN
!(tp->t_flags & TF_DELACK)
(tp->t_flags & TF_DELACK)
tp->t_flags & TF_DELACK
tp->t_flags
tp
tp
t_flags
TF_DELACK
TF_DELACK
!TCPS_HAVERCVDFIN(tp->t_state)
TCPS_HAVERCVDFIN(tp->t_state)
TCPS_HAVERCVDFIN
TCPS_HAVERCVDFIN
tp->t_state
tp
tp
t_state
{		/*		 * "adv" is the amount we could increase the window,		 * taking into account that we are limited by		 * TCP_MAXWIN << tp->rcv_scale.		 */		long adv;		int oldwin;		adv = min(recwin, (long)TCP_MAXWIN << tp->rcv_scale);		if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt)) {			oldwin = (tp->rcv_adv - tp->rcv_nxt);			adv -= oldwin;		} else			oldwin = 0;		/*		 * If the new window size ends up being the same as the old		 * size when it is scaled, then don't force a window update.		 */		if (oldwin >> tp->rcv_scale == (adv + oldwin) >> tp->rcv_scale)			goto dontupdate;		if (adv >= (long)(2 * tp->t_maxseg) &&		    (adv >= (long)(so->so_rcv.sb_hiwat / 4) ||		     recwin <= (long)(so->so_rcv.sb_hiwat / 8) ||		     so->so_rcv.sb_hiwat <= 8 * tp->t_maxseg))			goto send;	}
long adv;
long adv;
long
adv
adv
int oldwin;
int oldwin;
int
oldwin
oldwin
adv = min(recwin, (long)TCP_MAXWIN << tp->rcv_scale);
adv = min(recwin, (long)TCP_MAXWIN << tp->rcv_scale)
adv
adv
min(recwin, (long)TCP_MAXWIN << tp->rcv_scale)
min
min
recwin
recwin
(long)TCP_MAXWIN << tp->rcv_scale
(long)TCP_MAXWIN
long
long

TCP_MAXWIN
TCP_MAXWIN
tp->rcv_scale
tp
tp
rcv_scale
if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt)) {			oldwin = (tp->rcv_adv - tp->rcv_nxt);			adv -= oldwin;		} else			oldwin = 0;
SEQ_GT(tp->rcv_adv, tp->rcv_nxt)
SEQ_GT
SEQ_GT
tp->rcv_adv
tp
tp
rcv_adv
tp->rcv_nxt
tp
tp
rcv_nxt
{			oldwin = (tp->rcv_adv - tp->rcv_nxt);			adv -= oldwin;		}
oldwin = (tp->rcv_adv - tp->rcv_nxt);
oldwin = (tp->rcv_adv - tp->rcv_nxt)
oldwin
oldwin
(tp->rcv_adv - tp->rcv_nxt)
tp->rcv_adv - tp->rcv_nxt
tp->rcv_adv
tp
tp
rcv_adv
tp->rcv_nxt
tp
tp
rcv_nxt
adv -= oldwin;
adv -= oldwin
adv
adv
oldwin
oldwin
oldwin = 0;
oldwin = 0
oldwin
oldwin
0
if (oldwin >> tp->rcv_scale == (adv + oldwin) >> tp->rcv_scale)			goto dontupdate;
oldwin >> tp->rcv_scale == (adv + oldwin) >> tp->rcv_scale
oldwin >> tp->rcv_scale
oldwin
oldwin
tp->rcv_scale
tp
tp
rcv_scale
(adv + oldwin) >> tp->rcv_scale
(adv + oldwin)
adv + oldwin
adv
adv
oldwin
oldwin
tp->rcv_scale
tp
tp
rcv_scale
goto dontupdate;
dontupdate
if (adv >= (long)(2 * tp->t_maxseg) &&		    (adv >= (long)(so->so_rcv.sb_hiwat / 4) ||		     recwin <= (long)(so->so_rcv.sb_hiwat / 8) ||		     so->so_rcv.sb_hiwat <= 8 * tp->t_maxseg))			goto send;
adv >= (long)(2 * tp->t_maxseg) &&		    (adv >= (long)(so->so_rcv.sb_hiwat / 4) ||		     recwin <= (long)(so->so_rcv.sb_hiwat / 8) ||		     so->so_rcv.sb_hiwat <= 8 * tp->t_maxseg)
adv >= (long)(2 * tp->t_maxseg)
adv
adv
(long)(2 * tp->t_maxseg)
long
long

(2 * tp->t_maxseg)
2 * tp->t_maxseg
2
tp->t_maxseg
tp
tp
t_maxseg
(adv >= (long)(so->so_rcv.sb_hiwat / 4) ||		     recwin <= (long)(so->so_rcv.sb_hiwat / 8) ||		     so->so_rcv.sb_hiwat <= 8 * tp->t_maxseg)
adv >= (long)(so->so_rcv.sb_hiwat / 4) ||		     recwin <= (long)(so->so_rcv.sb_hiwat / 8) ||		     so->so_rcv.sb_hiwat <= 8 * tp->t_maxseg
adv >= (long)(so->so_rcv.sb_hiwat / 4) ||		     recwin <= (long)(so->so_rcv.sb_hiwat / 8)
adv >= (long)(so->so_rcv.sb_hiwat / 4)
adv
adv
(long)(so->so_rcv.sb_hiwat / 4)
long
long

(so->so_rcv.sb_hiwat / 4)
so->so_rcv.sb_hiwat / 4
so->so_rcv.sb_hiwat
so->so_rcv
so
so
so_rcv
sb_hiwat
4
recwin <= (long)(so->so_rcv.sb_hiwat / 8)
recwin
recwin
(long)(so->so_rcv.sb_hiwat / 8)
long
long

(so->so_rcv.sb_hiwat / 8)
so->so_rcv.sb_hiwat / 8
so->so_rcv.sb_hiwat
so->so_rcv
so
so
so_rcv
sb_hiwat
8
so->so_rcv.sb_hiwat <= 8 * tp->t_maxseg
so->so_rcv.sb_hiwat
so->so_rcv
so
so
so_rcv
sb_hiwat
8 * tp->t_maxseg
8
tp->t_maxseg
tp
tp
t_maxseg
goto send;
send
dontupdate:	/*	 * Send if we owe the peer an ACK, RST, SYN, or urgent data.  ACKNOW	 * is also a catch-all for the retransmit timer timeout case.	 */	if (tp->t_flags & TF_ACKNOW)		goto send;
dontupdate
if (tp->t_flags & TF_ACKNOW)		goto send;
tp->t_flags & TF_ACKNOW
tp->t_flags
tp
tp
t_flags
TF_ACKNOW
TF_ACKNOW
goto send;
send
if ((flags & TH_RST) ||	    ((flags & TH_SYN) && (tp->t_flags & TF_NEEDSYN) == 0))		goto send;
(flags & TH_RST) ||	    ((flags & TH_SYN) && (tp->t_flags & TF_NEEDSYN) == 0)
(flags & TH_RST)
flags & TH_RST
flags
flags
TH_RST
TH_RST
((flags & TH_SYN) && (tp->t_flags & TF_NEEDSYN) == 0)
(flags & TH_SYN) && (tp->t_flags & TF_NEEDSYN) == 0
(flags & TH_SYN)
flags & TH_SYN
flags
flags
TH_SYN
TH_SYN
(tp->t_flags & TF_NEEDSYN) == 0
(tp->t_flags & TF_NEEDSYN)
tp->t_flags & TF_NEEDSYN
tp->t_flags
tp
tp
t_flags
TF_NEEDSYN
TF_NEEDSYN
0
goto send;
send
if (SEQ_GT(tp->snd_up, tp->snd_una))		goto send;
SEQ_GT(tp->snd_up, tp->snd_una)
SEQ_GT
SEQ_GT
tp->snd_up
tp
tp
snd_up
tp->snd_una
tp
tp
snd_una
goto send;
send
if (flags & TH_FIN &&	    ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una))		goto send;
flags & TH_FIN &&	    ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una)
flags & TH_FIN
flags
flags
TH_FIN
TH_FIN
((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una)
(tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una
(tp->t_flags & TF_SENTFIN) == 0
(tp->t_flags & TF_SENTFIN)
tp->t_flags & TF_SENTFIN
tp->t_flags
tp
tp
t_flags
TF_SENTFIN
TF_SENTFIN
0
tp->snd_nxt == tp->snd_una
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_una
tp
tp
snd_una
goto send;
send
if ((tp->t_flags & TF_SACK_PERMIT) &&	    SEQ_GT(tp->snd_max, tp->snd_una) &&	    !tcp_timer_active(tp, TT_REXMT) &&	    !tcp_timer_active(tp, TT_PERSIST)) {		tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		goto just_return;	}
(tp->t_flags & TF_SACK_PERMIT) &&	    SEQ_GT(tp->snd_max, tp->snd_una) &&	    !tcp_timer_active(tp, TT_REXMT) &&	    !tcp_timer_active(tp, TT_PERSIST)
(tp->t_flags & TF_SACK_PERMIT) &&	    SEQ_GT(tp->snd_max, tp->snd_una) &&	    !tcp_timer_active(tp, TT_REXMT)
(tp->t_flags & TF_SACK_PERMIT) &&	    SEQ_GT(tp->snd_max, tp->snd_una)
(tp->t_flags & TF_SACK_PERMIT)
tp->t_flags & TF_SACK_PERMIT
tp->t_flags
tp
tp
t_flags
TF_SACK_PERMIT
TF_SACK_PERMIT
SEQ_GT(tp->snd_max, tp->snd_una)
SEQ_GT
SEQ_GT
tp->snd_max
tp
tp
snd_max
tp->snd_una
tp
tp
snd_una
!tcp_timer_active(tp, TT_REXMT)
tcp_timer_active(tp, TT_REXMT)
tcp_timer_active
tcp_timer_active
tp
tp
TT_REXMT
TT_REXMT
!tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active
tcp_timer_active
tp
tp
TT_PERSIST
TT_PERSIST
{		tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		goto just_return;	}
tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);
tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur)
tcp_timer_activate
tcp_timer_activate
tp
tp
TT_REXMT
TT_REXMT
tp->t_rxtcur
tp
tp
t_rxtcur
goto just_return;
just_return
if (so->so_snd.sb_cc && !tcp_timer_active(tp, TT_REXMT) &&	    !tcp_timer_active(tp, TT_PERSIST)) {		tp->t_rxtshift = 0;		tcp_setpersist(tp);	}
so->so_snd.sb_cc && !tcp_timer_active(tp, TT_REXMT) &&	    !tcp_timer_active(tp, TT_PERSIST)
so->so_snd.sb_cc && !tcp_timer_active(tp, TT_REXMT)
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
!tcp_timer_active(tp, TT_REXMT)
tcp_timer_active(tp, TT_REXMT)
tcp_timer_active
tcp_timer_active
tp
tp
TT_REXMT
TT_REXMT
!tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active
tcp_timer_active
tp
tp
TT_PERSIST
TT_PERSIST
{		tp->t_rxtshift = 0;		tcp_setpersist(tp);	}
tp->t_rxtshift = 0;
tp->t_rxtshift = 0
tp->t_rxtshift
tp
tp
t_rxtshift
0
tcp_setpersist(tp);
tcp_setpersist(tp)
tcp_setpersist
tcp_setpersist
tp
tp
just_return:	SOCKBUF_UNLOCK(&so->so_snd);
just_return
SOCKBUF_UNLOCK(&so->so_snd);
SOCKBUF_UNLOCK(&so->so_snd)
SOCKBUF_UNLOCK
SOCKBUF_UNLOCK
&so->so_snd
so->so_snd
so
so
so_snd
return (0);
(0)
0
send:	SOCKBUF_LOCK_ASSERT(&so->so_snd);
send
SOCKBUF_LOCK_ASSERT(&so->so_snd);
SOCKBUF_LOCK_ASSERT(&so->so_snd)
SOCKBUF_LOCK_ASSERT
SOCKBUF_LOCK_ASSERT
&so->so_snd
so->so_snd
so
so
so_snd
if (len > 0) {		if (len >= tp->t_maxseg)			tp->t_flags2 |= TF2_PLPMTU_MAXSEGSNT;		else			tp->t_flags2 &= ~TF2_PLPMTU_MAXSEGSNT;	}
len > 0
len
len
0
{		if (len >= tp->t_maxseg)			tp->t_flags2 |= TF2_PLPMTU_MAXSEGSNT;		else			tp->t_flags2 &= ~TF2_PLPMTU_MAXSEGSNT;	}
if (len >= tp->t_maxseg)			tp->t_flags2 |= TF2_PLPMTU_MAXSEGSNT;		else			tp->t_flags2 &= ~TF2_PLPMTU_MAXSEGSNT;
len >= tp->t_maxseg
len
len
tp->t_maxseg
tp
tp
t_maxseg
tp->t_flags2 |= TF2_PLPMTU_MAXSEGSNT;
tp->t_flags2 |= TF2_PLPMTU_MAXSEGSNT
tp->t_flags2
tp
tp
t_flags2
TF2_PLPMTU_MAXSEGSNT
TF2_PLPMTU_MAXSEGSNT
tp->t_flags2 &= ~TF2_PLPMTU_MAXSEGSNT;
tp->t_flags2 &= ~TF2_PLPMTU_MAXSEGSNT
tp->t_flags2
tp
tp
t_flags2
~TF2_PLPMTU_MAXSEGSNT
TF2_PLPMTU_MAXSEGSNT
TF2_PLPMTU_MAXSEGSNT
optlen = 0;
optlen = 0
optlen
optlen
0
hdrlen = sizeof (struct tcpiphdr);
hdrlen = sizeof (struct tcpiphdr)
hdrlen
hdrlen
sizeof (struct tcpiphdr)
struct tcpiphdr
struct tcpiphdr
tcpiphdr

if ((tp->t_flags & TF_NOOPT) == 0) {		to.to_flags = 0;		/* Maximum segment size. */		if (flags & TH_SYN) {			tp->snd_nxt = tp->iss;			to.to_mss = tcp_mssopt(&tp->t_inpcb->inp_inc);			to.to_flags |= TOF_MSS;		}		/* Window scaling. */		if ((flags & TH_SYN) && (tp->t_flags & TF_REQ_SCALE)) {			to.to_wscale = tp->request_r_scale;			to.to_flags |= TOF_SCALE;		}		/* Timestamps. */		if ((tp->t_flags & TF_RCVD_TSTMP) ||		    ((flags & TH_SYN) && (tp->t_flags & TF_REQ_TSTMP))) {			to.to_tsval = tcp_ts_getticks() + tp->ts_offset;			to.to_tsecr = tp->ts_recent;			to.to_flags |= TOF_TS;			/* Set receive buffer autosizing timestamp. */			if (tp->rfbuf_ts == 0 &&			    (so->so_rcv.sb_flags & SB_AUTOSIZE))				tp->rfbuf_ts = tcp_ts_getticks();		}		/* Selective ACK's. */		if (tp->t_flags & TF_SACK_PERMIT) {			if (flags & TH_SYN)				to.to_flags |= TOF_SACKPERM;			else if (TCPS_HAVEESTABLISHED(tp->t_state) &&			    (tp->t_flags & TF_SACK_PERMIT) &&			    tp->rcv_numsacks > 0) {				to.to_flags |= TOF_SACK;				to.to_nsacks = tp->rcv_numsacks;				to.to_sacks = (u_char *)tp->sackblks;			}		}#ifdef TCP_SIGNATURE		/* TCP-MD5 (RFC2385). */		if (tp->t_flags & TF_SIGNATURE)			to.to_flags |= TOF_SIGNATURE;#endif /* TCP_SIGNATURE */		/* Processing the options. */		hdrlen += optlen = tcp_addoptions(&to, opt);	}
(tp->t_flags & TF_NOOPT) == 0
(tp->t_flags & TF_NOOPT)
tp->t_flags & TF_NOOPT
tp->t_flags
tp
tp
t_flags
TF_NOOPT
TF_NOOPT
0
{		to.to_flags = 0;		/* Maximum segment size. */		if (flags & TH_SYN) {			tp->snd_nxt = tp->iss;			to.to_mss = tcp_mssopt(&tp->t_inpcb->inp_inc);			to.to_flags |= TOF_MSS;		}		/* Window scaling. */		if ((flags & TH_SYN) && (tp->t_flags & TF_REQ_SCALE)) {			to.to_wscale = tp->request_r_scale;			to.to_flags |= TOF_SCALE;		}		/* Timestamps. */		if ((tp->t_flags & TF_RCVD_TSTMP) ||		    ((flags & TH_SYN) && (tp->t_flags & TF_REQ_TSTMP))) {			to.to_tsval = tcp_ts_getticks() + tp->ts_offset;			to.to_tsecr = tp->ts_recent;			to.to_flags |= TOF_TS;			/* Set receive buffer autosizing timestamp. */			if (tp->rfbuf_ts == 0 &&			    (so->so_rcv.sb_flags & SB_AUTOSIZE))				tp->rfbuf_ts = tcp_ts_getticks();		}		/* Selective ACK's. */		if (tp->t_flags & TF_SACK_PERMIT) {			if (flags & TH_SYN)				to.to_flags |= TOF_SACKPERM;			else if (TCPS_HAVEESTABLISHED(tp->t_state) &&			    (tp->t_flags & TF_SACK_PERMIT) &&			    tp->rcv_numsacks > 0) {				to.to_flags |= TOF_SACK;				to.to_nsacks = tp->rcv_numsacks;				to.to_sacks = (u_char *)tp->sackblks;			}		}#ifdef TCP_SIGNATURE		/* TCP-MD5 (RFC2385). */		if (tp->t_flags & TF_SIGNATURE)			to.to_flags |= TOF_SIGNATURE;#endif /* TCP_SIGNATURE */		/* Processing the options. */		hdrlen += optlen = tcp_addoptions(&to, opt);	}
to.to_flags = 0;
to.to_flags = 0
to.to_flags
to
to
to_flags
0
if (flags & TH_SYN) {			tp->snd_nxt = tp->iss;			to.to_mss = tcp_mssopt(&tp->t_inpcb->inp_inc);			to.to_flags |= TOF_MSS;		}
flags & TH_SYN
flags
flags
TH_SYN
TH_SYN
{			tp->snd_nxt = tp->iss;			to.to_mss = tcp_mssopt(&tp->t_inpcb->inp_inc);			to.to_flags |= TOF_MSS;		}
tp->snd_nxt = tp->iss;
tp->snd_nxt = tp->iss
tp->snd_nxt
tp
tp
snd_nxt
tp->iss
tp
tp
iss
to.to_mss = tcp_mssopt(&tp->t_inpcb->inp_inc);
to.to_mss = tcp_mssopt(&tp->t_inpcb->inp_inc)
to.to_mss
to
to
to_mss
tcp_mssopt(&tp->t_inpcb->inp_inc)
tcp_mssopt
tcp_mssopt
&tp->t_inpcb->inp_inc
tp->t_inpcb->inp_inc
tp->t_inpcb
tp
tp
t_inpcb
inp_inc
to.to_flags |= TOF_MSS;
to.to_flags |= TOF_MSS
to.to_flags
to
to
to_flags
TOF_MSS
TOF_MSS
if ((flags & TH_SYN) && (tp->t_flags & TF_REQ_SCALE)) {			to.to_wscale = tp->request_r_scale;			to.to_flags |= TOF_SCALE;		}
(flags & TH_SYN) && (tp->t_flags & TF_REQ_SCALE)
(flags & TH_SYN)
flags & TH_SYN
flags
flags
TH_SYN
TH_SYN
(tp->t_flags & TF_REQ_SCALE)
tp->t_flags & TF_REQ_SCALE
tp->t_flags
tp
tp
t_flags
TF_REQ_SCALE
TF_REQ_SCALE
{			to.to_wscale = tp->request_r_scale;			to.to_flags |= TOF_SCALE;		}
to.to_wscale = tp->request_r_scale;
to.to_wscale = tp->request_r_scale
to.to_wscale
to
to
to_wscale
tp->request_r_scale
tp
tp
request_r_scale
to.to_flags |= TOF_SCALE;
to.to_flags |= TOF_SCALE
to.to_flags
to
to
to_flags
TOF_SCALE
TOF_SCALE
if ((tp->t_flags & TF_RCVD_TSTMP) ||		    ((flags & TH_SYN) && (tp->t_flags & TF_REQ_TSTMP))) {			to.to_tsval = tcp_ts_getticks() + tp->ts_offset;			to.to_tsecr = tp->ts_recent;			to.to_flags |= TOF_TS;			/* Set receive buffer autosizing timestamp. */			if (tp->rfbuf_ts == 0 &&			    (so->so_rcv.sb_flags & SB_AUTOSIZE))				tp->rfbuf_ts = tcp_ts_getticks();		}
(tp->t_flags & TF_RCVD_TSTMP) ||		    ((flags & TH_SYN) && (tp->t_flags & TF_REQ_TSTMP))
(tp->t_flags & TF_RCVD_TSTMP)
tp->t_flags & TF_RCVD_TSTMP
tp->t_flags
tp
tp
t_flags
TF_RCVD_TSTMP
TF_RCVD_TSTMP
((flags & TH_SYN) && (tp->t_flags & TF_REQ_TSTMP))
(flags & TH_SYN) && (tp->t_flags & TF_REQ_TSTMP)
(flags & TH_SYN)
flags & TH_SYN
flags
flags
TH_SYN
TH_SYN
(tp->t_flags & TF_REQ_TSTMP)
tp->t_flags & TF_REQ_TSTMP
tp->t_flags
tp
tp
t_flags
TF_REQ_TSTMP
TF_REQ_TSTMP
{			to.to_tsval = tcp_ts_getticks() + tp->ts_offset;			to.to_tsecr = tp->ts_recent;			to.to_flags |= TOF_TS;			/* Set receive buffer autosizing timestamp. */			if (tp->rfbuf_ts == 0 &&			    (so->so_rcv.sb_flags & SB_AUTOSIZE))				tp->rfbuf_ts = tcp_ts_getticks();		}
to.to_tsval = tcp_ts_getticks() + tp->ts_offset;
to.to_tsval = tcp_ts_getticks() + tp->ts_offset
to.to_tsval
to
to
to_tsval
tcp_ts_getticks() + tp->ts_offset
tcp_ts_getticks()
tcp_ts_getticks
tcp_ts_getticks
tp->ts_offset
tp
tp
ts_offset
to.to_tsecr = tp->ts_recent;
to.to_tsecr = tp->ts_recent
to.to_tsecr
to
to
to_tsecr
tp->ts_recent
tp
tp
ts_recent
to.to_flags |= TOF_TS;
to.to_flags |= TOF_TS
to.to_flags
to
to
to_flags
TOF_TS
TOF_TS
if (tp->rfbuf_ts == 0 &&			    (so->so_rcv.sb_flags & SB_AUTOSIZE))				tp->rfbuf_ts = tcp_ts_getticks();
tp->rfbuf_ts == 0 &&			    (so->so_rcv.sb_flags & SB_AUTOSIZE)
tp->rfbuf_ts == 0
tp->rfbuf_ts
tp
tp
rfbuf_ts
0
(so->so_rcv.sb_flags & SB_AUTOSIZE)
so->so_rcv.sb_flags & SB_AUTOSIZE
so->so_rcv.sb_flags
so->so_rcv
so
so
so_rcv
sb_flags
SB_AUTOSIZE
SB_AUTOSIZE
tp->rfbuf_ts = tcp_ts_getticks();
tp->rfbuf_ts = tcp_ts_getticks()
tp->rfbuf_ts
tp
tp
rfbuf_ts
tcp_ts_getticks()
tcp_ts_getticks
tcp_ts_getticks
if (tp->t_flags & TF_SACK_PERMIT) {			if (flags & TH_SYN)				to.to_flags |= TOF_SACKPERM;			else if (TCPS_HAVEESTABLISHED(tp->t_state) &&			    (tp->t_flags & TF_SACK_PERMIT) &&			    tp->rcv_numsacks > 0) {				to.to_flags |= TOF_SACK;				to.to_nsacks = tp->rcv_numsacks;				to.to_sacks = (u_char *)tp->sackblks;			}		}
tp->t_flags & TF_SACK_PERMIT
tp->t_flags
tp
tp
t_flags
TF_SACK_PERMIT
TF_SACK_PERMIT
{			if (flags & TH_SYN)				to.to_flags |= TOF_SACKPERM;			else if (TCPS_HAVEESTABLISHED(tp->t_state) &&			    (tp->t_flags & TF_SACK_PERMIT) &&			    tp->rcv_numsacks > 0) {				to.to_flags |= TOF_SACK;				to.to_nsacks = tp->rcv_numsacks;				to.to_sacks = (u_char *)tp->sackblks;			}		}
if (flags & TH_SYN)				to.to_flags |= TOF_SACKPERM;			else if (TCPS_HAVEESTABLISHED(tp->t_state) &&			    (tp->t_flags & TF_SACK_PERMIT) &&			    tp->rcv_numsacks > 0) {				to.to_flags |= TOF_SACK;				to.to_nsacks = tp->rcv_numsacks;				to.to_sacks = (u_char *)tp->sackblks;			}
flags & TH_SYN
flags
flags
TH_SYN
TH_SYN
to.to_flags |= TOF_SACKPERM;
to.to_flags |= TOF_SACKPERM
to.to_flags
to
to
to_flags
TOF_SACKPERM
TOF_SACKPERM
if (TCPS_HAVEESTABLISHED(tp->t_state) &&			    (tp->t_flags & TF_SACK_PERMIT) &&			    tp->rcv_numsacks > 0) {				to.to_flags |= TOF_SACK;				to.to_nsacks = tp->rcv_numsacks;				to.to_sacks = (u_char *)tp->sackblks;			}
TCPS_HAVEESTABLISHED(tp->t_state) &&			    (tp->t_flags & TF_SACK_PERMIT) &&			    tp->rcv_numsacks > 0
TCPS_HAVEESTABLISHED(tp->t_state) &&			    (tp->t_flags & TF_SACK_PERMIT)
TCPS_HAVEESTABLISHED(tp->t_state)
TCPS_HAVEESTABLISHED
TCPS_HAVEESTABLISHED
tp->t_state
tp
tp
t_state
(tp->t_flags & TF_SACK_PERMIT)
tp->t_flags & TF_SACK_PERMIT
tp->t_flags
tp
tp
t_flags
TF_SACK_PERMIT
TF_SACK_PERMIT
tp->rcv_numsacks > 0
tp->rcv_numsacks
tp
tp
rcv_numsacks
0
{				to.to_flags |= TOF_SACK;				to.to_nsacks = tp->rcv_numsacks;				to.to_sacks = (u_char *)tp->sackblks;			}
to.to_flags |= TOF_SACK;
to.to_flags |= TOF_SACK
to.to_flags
to
to
to_flags
TOF_SACK
TOF_SACK
to.to_nsacks = tp->rcv_numsacks;
to.to_nsacks = tp->rcv_numsacks
to.to_nsacks
to
to
to_nsacks
tp->rcv_numsacks
tp
tp
rcv_numsacks
to.to_sacks = (u_char *)tp->sackblks;
to.to_sacks = (u_char *)tp->sackblks
to.to_sacks
to
to
to_sacks
(u_char *)tp->sackblks
u_char *
u_char
u_char
*
*
tp->sackblks
tp
tp
sackblks
hdrlen += optlen = tcp_addoptions(&to, opt);
hdrlen += optlen = tcp_addoptions(&to, opt)
hdrlen
hdrlen
optlen = tcp_addoptions(&to, opt)
optlen
optlen
tcp_addoptions(&to, opt)
tcp_addoptions
tcp_addoptions
&to
to
to
opt
opt
if (tp->t_inpcb->inp_options)		ipoptlen = tp->t_inpcb->inp_options->m_len -				offsetof(struct ipoption, ipopt_list);
else		ipoptlen = 0;
if (len + optlen + ipoptlen > tp->t_maxopd) {		flags &= ~TH_FIN;		if (tso) {			u_int if_hw_tsomax;			u_int if_hw_tsomaxsegcount;			u_int if_hw_tsomaxsegsize;			struct mbuf *mb;			u_int moff;			int max_len;			/* extract TSO information */			if_hw_tsomax = tp->t_tsomax;			if_hw_tsomaxsegcount = tp->t_tsomaxsegcount;			if_hw_tsomaxsegsize = tp->t_tsomaxsegsize;			/*			 * Limit a TSO burst to prevent it from			 * overflowing or exceeding the maximum length			 * allowed by the network interface:			 */			KASSERT(ipoptlen == 0,			    ("%s: TSO can't do IP options", __func__));			/*			 * Check if we should limit by maximum payload			 * length:			 */			if (if_hw_tsomax != 0) {				/* compute maximum TSO length */				max_len = (if_hw_tsomax - hdrlen);				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Check if we should limit by maximum segment			 * size and count:			 */			if (if_hw_tsomaxsegcount != 0 &&			    if_hw_tsomaxsegsize != 0) {				max_len = 0;				mb = sbsndmbuf(&so->so_snd, off, &moff);				while (mb != NULL && max_len < len) {					u_int mlen;					u_int frags;					/*					 * Get length of mbuf fragment					 * and how many hardware frags,					 * rounded up, it would use:					 */					mlen = (mb->m_len - moff);					frags = howmany(mlen,					    if_hw_tsomaxsegsize);					/* Handle special case: Zero Length Mbuf */					if (frags == 0)						frags = 1;					/*					 * Check if the fragment limit					 * will be reached or exceeded:					 */					if (frags >= if_hw_tsomaxsegcount) {						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}					max_len += mlen;					if_hw_tsomaxsegcount -= frags;					moff = 0;					mb = mb->m_next;				}				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Prevent the last segment from being			 * fractional unless the send sockbuf can be			 * emptied:			 */			max_len = (tp->t_maxopd - optlen);			if ((off + len) < so->so_snd.sb_cc) {				moff = len % max_len;				if (moff != 0) {					len -= moff;					sendalot = 1;				}			}			/*			 * In case there are too many small fragments			 * don't use TSO:			 */			if (len <= max_len) {				len = max_len;				sendalot = 1;				tso = 0;			}			/*			 * Send the FIN in a separate segment			 * after the bulk sending is done.			 * We don't trust the TSO implementations			 * to clear the FIN flag on all but the			 * last segment.			 */			if (tp->t_flags & TF_NEEDFIN)				sendalot = 1;		} else {			len = tp->t_maxopd - optlen - ipoptlen;			sendalot = 1;		}	} else		tso = 0;
len + optlen + ipoptlen > tp->t_maxopd
len + optlen + ipoptlen
len + optlen
len
len
optlen
optlen
ipoptlen
ipoptlen
tp->t_maxopd
tp
tp
t_maxopd
{		flags &= ~TH_FIN;		if (tso) {			u_int if_hw_tsomax;			u_int if_hw_tsomaxsegcount;			u_int if_hw_tsomaxsegsize;			struct mbuf *mb;			u_int moff;			int max_len;			/* extract TSO information */			if_hw_tsomax = tp->t_tsomax;			if_hw_tsomaxsegcount = tp->t_tsomaxsegcount;			if_hw_tsomaxsegsize = tp->t_tsomaxsegsize;			/*			 * Limit a TSO burst to prevent it from			 * overflowing or exceeding the maximum length			 * allowed by the network interface:			 */			KASSERT(ipoptlen == 0,			    ("%s: TSO can't do IP options", __func__));			/*			 * Check if we should limit by maximum payload			 * length:			 */			if (if_hw_tsomax != 0) {				/* compute maximum TSO length */				max_len = (if_hw_tsomax - hdrlen);				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Check if we should limit by maximum segment			 * size and count:			 */			if (if_hw_tsomaxsegcount != 0 &&			    if_hw_tsomaxsegsize != 0) {				max_len = 0;				mb = sbsndmbuf(&so->so_snd, off, &moff);				while (mb != NULL && max_len < len) {					u_int mlen;					u_int frags;					/*					 * Get length of mbuf fragment					 * and how many hardware frags,					 * rounded up, it would use:					 */					mlen = (mb->m_len - moff);					frags = howmany(mlen,					    if_hw_tsomaxsegsize);					/* Handle special case: Zero Length Mbuf */					if (frags == 0)						frags = 1;					/*					 * Check if the fragment limit					 * will be reached or exceeded:					 */					if (frags >= if_hw_tsomaxsegcount) {						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}					max_len += mlen;					if_hw_tsomaxsegcount -= frags;					moff = 0;					mb = mb->m_next;				}				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Prevent the last segment from being			 * fractional unless the send sockbuf can be			 * emptied:			 */			max_len = (tp->t_maxopd - optlen);			if ((off + len) < so->so_snd.sb_cc) {				moff = len % max_len;				if (moff != 0) {					len -= moff;					sendalot = 1;				}			}			/*			 * In case there are too many small fragments			 * don't use TSO:			 */			if (len <= max_len) {				len = max_len;				sendalot = 1;				tso = 0;			}			/*			 * Send the FIN in a separate segment			 * after the bulk sending is done.			 * We don't trust the TSO implementations			 * to clear the FIN flag on all but the			 * last segment.			 */			if (tp->t_flags & TF_NEEDFIN)				sendalot = 1;		} else {			len = tp->t_maxopd - optlen - ipoptlen;			sendalot = 1;		}	}
flags &= ~TH_FIN;
flags &= ~TH_FIN
flags
flags
~TH_FIN
TH_FIN
TH_FIN
if (tso) {			u_int if_hw_tsomax;			u_int if_hw_tsomaxsegcount;			u_int if_hw_tsomaxsegsize;			struct mbuf *mb;			u_int moff;			int max_len;			/* extract TSO information */			if_hw_tsomax = tp->t_tsomax;			if_hw_tsomaxsegcount = tp->t_tsomaxsegcount;			if_hw_tsomaxsegsize = tp->t_tsomaxsegsize;			/*			 * Limit a TSO burst to prevent it from			 * overflowing or exceeding the maximum length			 * allowed by the network interface:			 */			KASSERT(ipoptlen == 0,			    ("%s: TSO can't do IP options", __func__));			/*			 * Check if we should limit by maximum payload			 * length:			 */			if (if_hw_tsomax != 0) {				/* compute maximum TSO length */				max_len = (if_hw_tsomax - hdrlen);				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Check if we should limit by maximum segment			 * size and count:			 */			if (if_hw_tsomaxsegcount != 0 &&			    if_hw_tsomaxsegsize != 0) {				max_len = 0;				mb = sbsndmbuf(&so->so_snd, off, &moff);				while (mb != NULL && max_len < len) {					u_int mlen;					u_int frags;					/*					 * Get length of mbuf fragment					 * and how many hardware frags,					 * rounded up, it would use:					 */					mlen = (mb->m_len - moff);					frags = howmany(mlen,					    if_hw_tsomaxsegsize);					/* Handle special case: Zero Length Mbuf */					if (frags == 0)						frags = 1;					/*					 * Check if the fragment limit					 * will be reached or exceeded:					 */					if (frags >= if_hw_tsomaxsegcount) {						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}					max_len += mlen;					if_hw_tsomaxsegcount -= frags;					moff = 0;					mb = mb->m_next;				}				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Prevent the last segment from being			 * fractional unless the send sockbuf can be			 * emptied:			 */			max_len = (tp->t_maxopd - optlen);			if ((off + len) < so->so_snd.sb_cc) {				moff = len % max_len;				if (moff != 0) {					len -= moff;					sendalot = 1;				}			}			/*			 * In case there are too many small fragments			 * don't use TSO:			 */			if (len <= max_len) {				len = max_len;				sendalot = 1;				tso = 0;			}			/*			 * Send the FIN in a separate segment			 * after the bulk sending is done.			 * We don't trust the TSO implementations			 * to clear the FIN flag on all but the			 * last segment.			 */			if (tp->t_flags & TF_NEEDFIN)				sendalot = 1;		} else {			len = tp->t_maxopd - optlen - ipoptlen;			sendalot = 1;		}
tso
tso
{			u_int if_hw_tsomax;			u_int if_hw_tsomaxsegcount;			u_int if_hw_tsomaxsegsize;			struct mbuf *mb;			u_int moff;			int max_len;			/* extract TSO information */			if_hw_tsomax = tp->t_tsomax;			if_hw_tsomaxsegcount = tp->t_tsomaxsegcount;			if_hw_tsomaxsegsize = tp->t_tsomaxsegsize;			/*			 * Limit a TSO burst to prevent it from			 * overflowing or exceeding the maximum length			 * allowed by the network interface:			 */			KASSERT(ipoptlen == 0,			    ("%s: TSO can't do IP options", __func__));			/*			 * Check if we should limit by maximum payload			 * length:			 */			if (if_hw_tsomax != 0) {				/* compute maximum TSO length */				max_len = (if_hw_tsomax - hdrlen);				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Check if we should limit by maximum segment			 * size and count:			 */			if (if_hw_tsomaxsegcount != 0 &&			    if_hw_tsomaxsegsize != 0) {				max_len = 0;				mb = sbsndmbuf(&so->so_snd, off, &moff);				while (mb != NULL && max_len < len) {					u_int mlen;					u_int frags;					/*					 * Get length of mbuf fragment					 * and how many hardware frags,					 * rounded up, it would use:					 */					mlen = (mb->m_len - moff);					frags = howmany(mlen,					    if_hw_tsomaxsegsize);					/* Handle special case: Zero Length Mbuf */					if (frags == 0)						frags = 1;					/*					 * Check if the fragment limit					 * will be reached or exceeded:					 */					if (frags >= if_hw_tsomaxsegcount) {						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}					max_len += mlen;					if_hw_tsomaxsegcount -= frags;					moff = 0;					mb = mb->m_next;				}				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}			/*			 * Prevent the last segment from being			 * fractional unless the send sockbuf can be			 * emptied:			 */			max_len = (tp->t_maxopd - optlen);			if ((off + len) < so->so_snd.sb_cc) {				moff = len % max_len;				if (moff != 0) {					len -= moff;					sendalot = 1;				}			}			/*			 * In case there are too many small fragments			 * don't use TSO:			 */			if (len <= max_len) {				len = max_len;				sendalot = 1;				tso = 0;			}			/*			 * Send the FIN in a separate segment			 * after the bulk sending is done.			 * We don't trust the TSO implementations			 * to clear the FIN flag on all but the			 * last segment.			 */			if (tp->t_flags & TF_NEEDFIN)				sendalot = 1;		}
u_int if_hw_tsomax;
u_int if_hw_tsomax;
u_int
u_int
if_hw_tsomax
if_hw_tsomax
u_int if_hw_tsomaxsegcount;
u_int if_hw_tsomaxsegcount;
u_int
u_int
if_hw_tsomaxsegcount
if_hw_tsomaxsegcount
u_int if_hw_tsomaxsegsize;
u_int if_hw_tsomaxsegsize;
u_int
u_int
if_hw_tsomaxsegsize
if_hw_tsomaxsegsize
struct mbuf *mb;
struct mbuf *mb;
struct mbuf
mbuf
*mb
*
mb
u_int moff;
u_int moff;
u_int
u_int
moff
moff
int max_len;
int max_len;
int
max_len
max_len
if_hw_tsomax = tp->t_tsomax;
if_hw_tsomax = tp->t_tsomax
if_hw_tsomax
if_hw_tsomax
tp->t_tsomax
tp
tp
t_tsomax
if_hw_tsomaxsegcount = tp->t_tsomaxsegcount;
if_hw_tsomaxsegcount = tp->t_tsomaxsegcount
if_hw_tsomaxsegcount
if_hw_tsomaxsegcount
tp->t_tsomaxsegcount
tp
tp
t_tsomaxsegcount
if_hw_tsomaxsegsize = tp->t_tsomaxsegsize;
if_hw_tsomaxsegsize = tp->t_tsomaxsegsize
if_hw_tsomaxsegsize
if_hw_tsomaxsegsize
tp->t_tsomaxsegsize
tp
tp
t_tsomaxsegsize
KASSERT(ipoptlen == 0,			    ("%s: TSO can't do IP options", __func__));
KASSERT(ipoptlen == 0,			    ("%s: TSO can't do IP options", __func__))
KASSERT
KASSERT
ipoptlen == 0
ipoptlen
ipoptlen
0
("%s: TSO can't do IP options", __func__)
"%s: TSO can't do IP options", __func__
"%s: TSO can't do IP options"
__func__
__func__
if (if_hw_tsomax != 0) {				/* compute maximum TSO length */				max_len = (if_hw_tsomax - hdrlen);				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}
if_hw_tsomax != 0
if_hw_tsomax
if_hw_tsomax
0
{				/* compute maximum TSO length */				max_len = (if_hw_tsomax - hdrlen);				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}
max_len = (if_hw_tsomax - hdrlen);
max_len = (if_hw_tsomax - hdrlen)
max_len
max_len
(if_hw_tsomax - hdrlen)
if_hw_tsomax - hdrlen
if_hw_tsomax
if_hw_tsomax
hdrlen
hdrlen
if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}
max_len <= 0
max_len
max_len
0
{					len = 0;				}
len = 0;
len = 0
len
len
0
if (len > max_len) {					sendalot = 1;					len = max_len;				}
len > max_len
len
len
max_len
max_len
{					sendalot = 1;					len = max_len;				}
sendalot = 1;
sendalot = 1
sendalot
sendalot
1
len = max_len;
len = max_len
len
len
max_len
max_len
if (if_hw_tsomaxsegcount != 0 &&			    if_hw_tsomaxsegsize != 0) {				max_len = 0;				mb = sbsndmbuf(&so->so_snd, off, &moff);				while (mb != NULL && max_len < len) {					u_int mlen;					u_int frags;					/*					 * Get length of mbuf fragment					 * and how many hardware frags,					 * rounded up, it would use:					 */					mlen = (mb->m_len - moff);					frags = howmany(mlen,					    if_hw_tsomaxsegsize);					/* Handle special case: Zero Length Mbuf */					if (frags == 0)						frags = 1;					/*					 * Check if the fragment limit					 * will be reached or exceeded:					 */					if (frags >= if_hw_tsomaxsegcount) {						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}					max_len += mlen;					if_hw_tsomaxsegcount -= frags;					moff = 0;					mb = mb->m_next;				}				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}
if_hw_tsomaxsegcount != 0 &&			    if_hw_tsomaxsegsize != 0
if_hw_tsomaxsegcount != 0
if_hw_tsomaxsegcount
if_hw_tsomaxsegcount
0
if_hw_tsomaxsegsize != 0
if_hw_tsomaxsegsize
if_hw_tsomaxsegsize
0
{				max_len = 0;				mb = sbsndmbuf(&so->so_snd, off, &moff);				while (mb != NULL && max_len < len) {					u_int mlen;					u_int frags;					/*					 * Get length of mbuf fragment					 * and how many hardware frags,					 * rounded up, it would use:					 */					mlen = (mb->m_len - moff);					frags = howmany(mlen,					    if_hw_tsomaxsegsize);					/* Handle special case: Zero Length Mbuf */					if (frags == 0)						frags = 1;					/*					 * Check if the fragment limit					 * will be reached or exceeded:					 */					if (frags >= if_hw_tsomaxsegcount) {						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}					max_len += mlen;					if_hw_tsomaxsegcount -= frags;					moff = 0;					mb = mb->m_next;				}				if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}			}
max_len = 0;
max_len = 0
max_len
max_len
0
mb = sbsndmbuf(&so->so_snd, off, &moff);
mb = sbsndmbuf(&so->so_snd, off, &moff)
mb
mb
sbsndmbuf(&so->so_snd, off, &moff)
sbsndmbuf
sbsndmbuf
&so->so_snd
so->so_snd
so
so
so_snd
off
off
&moff
moff
moff
while (mb != NULL && max_len < len) {					u_int mlen;					u_int frags;					/*					 * Get length of mbuf fragment					 * and how many hardware frags,					 * rounded up, it would use:					 */					mlen = (mb->m_len - moff);					frags = howmany(mlen,					    if_hw_tsomaxsegsize);					/* Handle special case: Zero Length Mbuf */					if (frags == 0)						frags = 1;					/*					 * Check if the fragment limit					 * will be reached or exceeded:					 */					if (frags >= if_hw_tsomaxsegcount) {						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}					max_len += mlen;					if_hw_tsomaxsegcount -= frags;					moff = 0;					mb = mb->m_next;				}
mb != NULL && max_len < len
mb != NULL
mb
mb
NULL
NULL
max_len < len
max_len
max_len
len
len
{					u_int mlen;					u_int frags;					/*					 * Get length of mbuf fragment					 * and how many hardware frags,					 * rounded up, it would use:					 */					mlen = (mb->m_len - moff);					frags = howmany(mlen,					    if_hw_tsomaxsegsize);					/* Handle special case: Zero Length Mbuf */					if (frags == 0)						frags = 1;					/*					 * Check if the fragment limit					 * will be reached or exceeded:					 */					if (frags >= if_hw_tsomaxsegcount) {						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}					max_len += mlen;					if_hw_tsomaxsegcount -= frags;					moff = 0;					mb = mb->m_next;				}
u_int mlen;
u_int mlen;
u_int
u_int
mlen
mlen
u_int frags;
u_int frags;
u_int
u_int
frags
frags
mlen = (mb->m_len - moff);
mlen = (mb->m_len - moff)
mlen
mlen
(mb->m_len - moff)
mb->m_len - moff
mb->m_len
mb
mb
m_len
moff
moff
frags = howmany(mlen,					    if_hw_tsomaxsegsize);
frags = howmany(mlen,					    if_hw_tsomaxsegsize)
frags
frags
howmany(mlen,					    if_hw_tsomaxsegsize)
howmany
howmany
mlen
mlen
if_hw_tsomaxsegsize
if_hw_tsomaxsegsize
if (frags == 0)						frags = 1;
frags == 0
frags
frags
0
frags = 1;
frags = 1
frags
frags
1
if (frags >= if_hw_tsomaxsegcount) {						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}
frags >= if_hw_tsomaxsegcount
frags
frags
if_hw_tsomaxsegcount
if_hw_tsomaxsegcount
{						max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);						break;					}
max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize);
max_len += min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize)
max_len
max_len
min(mlen,						    if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize)
min
min
mlen
mlen
if_hw_tsomaxsegcount *						    if_hw_tsomaxsegsize
if_hw_tsomaxsegcount
if_hw_tsomaxsegcount
if_hw_tsomaxsegsize
if_hw_tsomaxsegsize
break;
max_len += mlen;
max_len += mlen
max_len
max_len
mlen
mlen
if_hw_tsomaxsegcount -= frags;
if_hw_tsomaxsegcount -= frags
if_hw_tsomaxsegcount
if_hw_tsomaxsegcount
frags
frags
moff = 0;
moff = 0
moff
moff
0
mb = mb->m_next;
mb = mb->m_next
mb
mb
mb->m_next
mb
mb
m_next
if (max_len <= 0) {					len = 0;				} else if (len > max_len) {					sendalot = 1;					len = max_len;				}
max_len <= 0
max_len
max_len
0
{					len = 0;				}
len = 0;
len = 0
len
len
0
if (len > max_len) {					sendalot = 1;					len = max_len;				}
len > max_len
len
len
max_len
max_len
{					sendalot = 1;					len = max_len;				}
sendalot = 1;
sendalot = 1
sendalot
sendalot
1
len = max_len;
len = max_len
len
len
max_len
max_len
max_len = (tp->t_maxopd - optlen);
max_len = (tp->t_maxopd - optlen)
max_len
max_len
(tp->t_maxopd - optlen)
tp->t_maxopd - optlen
tp->t_maxopd
tp
tp
t_maxopd
optlen
optlen
if ((off + len) < so->so_snd.sb_cc) {				moff = len % max_len;				if (moff != 0) {					len -= moff;					sendalot = 1;				}			}
(off + len) < so->so_snd.sb_cc
(off + len)
off + len
off
off
len
len
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
{				moff = len % max_len;				if (moff != 0) {					len -= moff;					sendalot = 1;				}			}
moff = len % max_len;
moff = len % max_len
moff
moff
len % max_len
len
len
max_len
max_len
if (moff != 0) {					len -= moff;					sendalot = 1;				}
moff != 0
moff
moff
0
{					len -= moff;					sendalot = 1;				}
len -= moff;
len -= moff
len
len
moff
moff
sendalot = 1;
sendalot = 1
sendalot
sendalot
1
if (len <= max_len) {				len = max_len;				sendalot = 1;				tso = 0;			}
len <= max_len
len
len
max_len
max_len
{				len = max_len;				sendalot = 1;				tso = 0;			}
len = max_len;
len = max_len
len
len
max_len
max_len
sendalot = 1;
sendalot = 1
sendalot
sendalot
1
tso = 0;
tso = 0
tso
tso
0
if (tp->t_flags & TF_NEEDFIN)				sendalot = 1;
tp->t_flags & TF_NEEDFIN
tp->t_flags
tp
tp
t_flags
TF_NEEDFIN
TF_NEEDFIN
sendalot = 1;
sendalot = 1
sendalot
sendalot
1
{			len = tp->t_maxopd - optlen - ipoptlen;			sendalot = 1;		}
len = tp->t_maxopd - optlen - ipoptlen;
len = tp->t_maxopd - optlen - ipoptlen
len
len
tp->t_maxopd - optlen - ipoptlen
tp->t_maxopd - optlen
tp->t_maxopd
tp
tp
t_maxopd
optlen
optlen
ipoptlen
ipoptlen
sendalot = 1;
sendalot = 1
sendalot
sendalot
1
tso = 0;
tso = 0
tso
tso
0
KASSERT(len + hdrlen + ipoptlen <= IP_MAXPACKET,	    ("%s: len > IP_MAXPACKET", __func__));
KASSERT(len + hdrlen + ipoptlen <= IP_MAXPACKET,	    ("%s: len > IP_MAXPACKET", __func__))
KASSERT
KASSERT
len + hdrlen + ipoptlen <= IP_MAXPACKET
len + hdrlen + ipoptlen
len + hdrlen
len
len
hdrlen
hdrlen
ipoptlen
ipoptlen
IP_MAXPACKET
IP_MAXPACKET
("%s: len > IP_MAXPACKET", __func__)
"%s: len > IP_MAXPACKET", __func__
"%s: len > IP_MAXPACKET"
__func__
__func__
if (max_linkhdr + hdrlen > MHLEN)#endif		panic("tcphdr too big");
max_linkhdr + hdrlen > MHLEN
max_linkhdr + hdrlen
max_linkhdr
max_linkhdr
hdrlen
hdrlen
MHLEN
MHLEN
panic("tcphdr too big");
panic("tcphdr too big")
panic
panic
"tcphdr too big"
KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__));
KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__))
KASSERT
KASSERT
len >= 0
len
len
0
("[%s:%d]: len < 0", __func__, __LINE__)
"[%s:%d]: len < 0", __func__, __LINE__
"[%s:%d]: len < 0"
__func__
__func__
__LINE__
if (len) {		struct mbuf *mb;		u_int moff;		if ((tp->t_flags & TF_FORCEDATA) && len == 1)			TCPSTAT_INC(tcps_sndprobe);		else if (SEQ_LT(tp->snd_nxt, tp->snd_max) || sack_rxmit) {			tp->t_sndrexmitpack++;			TCPSTAT_INC(tcps_sndrexmitpack);			TCPSTAT_ADD(tcps_sndrexmitbyte, len);		} else {			TCPSTAT_INC(tcps_sndpack);			TCPSTAT_ADD(tcps_sndbyte, len);		}#ifdef INET6		if (MHLEN < hdrlen + max_linkhdr)			m = m_getcl(M_NOWAIT, MT_DATA, M_PKTHDR);		else#endif			m = m_gethdr(M_NOWAIT, MT_DATA);		if (m == NULL) {			SOCKBUF_UNLOCK(&so->so_snd);			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}		m->m_data += max_linkhdr;		m->m_len = hdrlen;		/*		 * Start the m_copy functions from the closest mbuf		 * to the offset in the socket buffer chain.		 */		mb = sbsndptr(&so->so_snd, off, len, &moff);		if (len <= MHLEN - hdrlen - max_linkhdr) {			m_copydata(mb, moff, (int)len,			    mtod(m, caddr_t) + hdrlen);			m->m_len += len;		} else {			m->m_next = m_copy(mb, moff, (int)len);			if (m->m_next == NULL) {				SOCKBUF_UNLOCK(&so->so_snd);				(void) m_free(m);				error = ENOBUFS;				sack_rxmit = 0;				goto out;			}		}		/*		 * If we're sending everything we've got, set PUSH.		 * (This will keep happy those implementations which only		 * give data to the user when a buffer fills or		 * a PUSH comes in.)		 */		if (off + len == so->so_snd.sb_cc)			flags |= TH_PUSH;		SOCKBUF_UNLOCK(&so->so_snd);	} else {		SOCKBUF_UNLOCK(&so->so_snd);		if (tp->t_flags & TF_ACKNOW)			TCPSTAT_INC(tcps_sndacks);		else if (flags & (TH_SYN|TH_FIN|TH_RST))			TCPSTAT_INC(tcps_sndctrl);		else if (SEQ_GT(tp->snd_up, tp->snd_una))			TCPSTAT_INC(tcps_sndurg);		else			TCPSTAT_INC(tcps_sndwinup);		m = m_gethdr(M_NOWAIT, MT_DATA);		if (m == NULL) {			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}#ifdef INET6		if (isipv6 && (MHLEN < hdrlen + max_linkhdr) &&		    MHLEN >= hdrlen) {			MH_ALIGN(m, hdrlen);		} else#endif		m->m_data += max_linkhdr;		m->m_len = hdrlen;	}
len
len
{		struct mbuf *mb;		u_int moff;		if ((tp->t_flags & TF_FORCEDATA) && len == 1)			TCPSTAT_INC(tcps_sndprobe);		else if (SEQ_LT(tp->snd_nxt, tp->snd_max) || sack_rxmit) {			tp->t_sndrexmitpack++;			TCPSTAT_INC(tcps_sndrexmitpack);			TCPSTAT_ADD(tcps_sndrexmitbyte, len);		} else {			TCPSTAT_INC(tcps_sndpack);			TCPSTAT_ADD(tcps_sndbyte, len);		}#ifdef INET6		if (MHLEN < hdrlen + max_linkhdr)			m = m_getcl(M_NOWAIT, MT_DATA, M_PKTHDR);		else#endif			m = m_gethdr(M_NOWAIT, MT_DATA);		if (m == NULL) {			SOCKBUF_UNLOCK(&so->so_snd);			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}		m->m_data += max_linkhdr;		m->m_len = hdrlen;		/*		 * Start the m_copy functions from the closest mbuf		 * to the offset in the socket buffer chain.		 */		mb = sbsndptr(&so->so_snd, off, len, &moff);		if (len <= MHLEN - hdrlen - max_linkhdr) {			m_copydata(mb, moff, (int)len,			    mtod(m, caddr_t) + hdrlen);			m->m_len += len;		} else {			m->m_next = m_copy(mb, moff, (int)len);			if (m->m_next == NULL) {				SOCKBUF_UNLOCK(&so->so_snd);				(void) m_free(m);				error = ENOBUFS;				sack_rxmit = 0;				goto out;			}		}		/*		 * If we're sending everything we've got, set PUSH.		 * (This will keep happy those implementations which only		 * give data to the user when a buffer fills or		 * a PUSH comes in.)		 */		if (off + len == so->so_snd.sb_cc)			flags |= TH_PUSH;		SOCKBUF_UNLOCK(&so->so_snd);	}
struct mbuf *mb;
struct mbuf *mb;
struct mbuf
mbuf
*mb
*
mb
u_int moff;
u_int moff;
u_int
u_int
moff
moff
if ((tp->t_flags & TF_FORCEDATA) && len == 1)			TCPSTAT_INC(tcps_sndprobe);		else if (SEQ_LT(tp->snd_nxt, tp->snd_max) || sack_rxmit) {			tp->t_sndrexmitpack++;			TCPSTAT_INC(tcps_sndrexmitpack);			TCPSTAT_ADD(tcps_sndrexmitbyte, len);		} else {			TCPSTAT_INC(tcps_sndpack);			TCPSTAT_ADD(tcps_sndbyte, len);		}
(tp->t_flags & TF_FORCEDATA) && len == 1
(tp->t_flags & TF_FORCEDATA)
tp->t_flags & TF_FORCEDATA
tp->t_flags
tp
tp
t_flags
TF_FORCEDATA
TF_FORCEDATA
len == 1
len
len
1
TCPSTAT_INC(tcps_sndprobe);
TCPSTAT_INC(tcps_sndprobe);
TCPSTAT_INC
TCPSTAT_INC
(tcps_sndprobe)
tcps_sndprobe
tcps_sndprobe
if (SEQ_LT(tp->snd_nxt, tp->snd_max) || sack_rxmit) {			tp->t_sndrexmitpack++;			TCPSTAT_INC(tcps_sndrexmitpack);			TCPSTAT_ADD(tcps_sndrexmitbyte, len);		} else {			TCPSTAT_INC(tcps_sndpack);			TCPSTAT_ADD(tcps_sndbyte, len);		}
SEQ_LT(tp->snd_nxt, tp->snd_max) || sack_rxmit
SEQ_LT(tp->snd_nxt, tp->snd_max)
SEQ_LT
SEQ_LT
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_max
tp
tp
snd_max
sack_rxmit
sack_rxmit
{			tp->t_sndrexmitpack++;			TCPSTAT_INC(tcps_sndrexmitpack);			TCPSTAT_ADD(tcps_sndrexmitbyte, len);		}
tp->t_sndrexmitpack++;
tp->t_sndrexmitpack++
tp->t_sndrexmitpack
tp
tp
t_sndrexmitpack
TCPSTAT_INC(tcps_sndrexmitpack);
TCPSTAT_INC(tcps_sndrexmitpack);
TCPSTAT_INC
TCPSTAT_INC
(tcps_sndrexmitpack)
tcps_sndrexmitpack
tcps_sndrexmitpack
TCPSTAT_ADD(tcps_sndrexmitbyte, len);
TCPSTAT_ADD(tcps_sndrexmitbyte, len)
TCPSTAT_ADD
TCPSTAT_ADD
tcps_sndrexmitbyte
tcps_sndrexmitbyte
len
len
{			TCPSTAT_INC(tcps_sndpack);			TCPSTAT_ADD(tcps_sndbyte, len);		}
TCPSTAT_INC(tcps_sndpack);
TCPSTAT_INC(tcps_sndpack);
TCPSTAT_INC
TCPSTAT_INC
(tcps_sndpack)
tcps_sndpack
tcps_sndpack
TCPSTAT_ADD(tcps_sndbyte, len);
TCPSTAT_ADD(tcps_sndbyte, len)
TCPSTAT_ADD
TCPSTAT_ADD
tcps_sndbyte
tcps_sndbyte
len
len
m = m_gethdr(M_NOWAIT, MT_DATA);
m = m_gethdr(M_NOWAIT, MT_DATA)
m
m
m_gethdr(M_NOWAIT, MT_DATA)
m_gethdr
m_gethdr
M_NOWAIT
M_NOWAIT
MT_DATA
MT_DATA
if (m == NULL) {			SOCKBUF_UNLOCK(&so->so_snd);			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}
m == NULL
m
m
NULL
NULL
{			SOCKBUF_UNLOCK(&so->so_snd);			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}
SOCKBUF_UNLOCK(&so->so_snd);
SOCKBUF_UNLOCK(&so->so_snd)
SOCKBUF_UNLOCK
SOCKBUF_UNLOCK
&so->so_snd
so->so_snd
so
so
so_snd
error = ENOBUFS;
error = ENOBUFS
error
error
ENOBUFS
ENOBUFS
sack_rxmit = 0;
sack_rxmit = 0
sack_rxmit
sack_rxmit
0
goto out;
out
m->m_data += max_linkhdr;
m->m_data += max_linkhdr
m->m_data
m
m
m_data
max_linkhdr
max_linkhdr
m->m_len = hdrlen;
m->m_len = hdrlen
m->m_len
m
m
m_len
hdrlen
hdrlen
mb = sbsndptr(&so->so_snd, off, len, &moff);
mb = sbsndptr(&so->so_snd, off, len, &moff)
mb
mb
sbsndptr(&so->so_snd, off, len, &moff)
sbsndptr
sbsndptr
&so->so_snd
so->so_snd
so
so
so_snd
off
off
len
len
&moff
moff
moff
if (len <= MHLEN - hdrlen - max_linkhdr) {			m_copydata(mb, moff, (int)len,			    mtod(m, caddr_t) + hdrlen);			m->m_len += len;		} else {			m->m_next = m_copy(mb, moff, (int)len);			if (m->m_next == NULL) {				SOCKBUF_UNLOCK(&so->so_snd);				(void) m_free(m);				error = ENOBUFS;				sack_rxmit = 0;				goto out;			}		}
len <= MHLEN - hdrlen - max_linkhdr
len
len
MHLEN - hdrlen - max_linkhdr
MHLEN - hdrlen
MHLEN
MHLEN
hdrlen
hdrlen
max_linkhdr
max_linkhdr
{			m_copydata(mb, moff, (int)len,			    mtod(m, caddr_t) + hdrlen);			m->m_len += len;		}
m_copydata(mb, moff, (int)len,			    mtod(m, caddr_t) + hdrlen);
m_copydata(mb, moff, (int)len,			    mtod(m, caddr_t) + hdrlen)
m_copydata
m_copydata
mb
mb
moff
moff
(int)len
int
int

len
len
mtod(m, caddr_t) + hdrlen
mtod(m, caddr_t)
mtod
mtod
m
m
caddr_t
caddr_t
hdrlen
hdrlen
m->m_len += len;
m->m_len += len
m->m_len
m
m
m_len
len
len
{			m->m_next = m_copy(mb, moff, (int)len);			if (m->m_next == NULL) {				SOCKBUF_UNLOCK(&so->so_snd);				(void) m_free(m);				error = ENOBUFS;				sack_rxmit = 0;				goto out;			}		}
m->m_next = m_copy(mb, moff, (int)len);
m->m_next = m_copy(mb, moff, (int)len)
m->m_next
m
m
m_next
m_copy(mb, moff, (int)len)
m_copy
m_copy
mb
mb
moff
moff
(int)len
int
int

len
len
if (m->m_next == NULL) {				SOCKBUF_UNLOCK(&so->so_snd);				(void) m_free(m);				error = ENOBUFS;				sack_rxmit = 0;				goto out;			}
m->m_next == NULL
m->m_next
m
m
m_next
NULL
NULL
{				SOCKBUF_UNLOCK(&so->so_snd);				(void) m_free(m);				error = ENOBUFS;				sack_rxmit = 0;				goto out;			}
SOCKBUF_UNLOCK(&so->so_snd);
SOCKBUF_UNLOCK(&so->so_snd)
SOCKBUF_UNLOCK
SOCKBUF_UNLOCK
&so->so_snd
so->so_snd
so
so
so_snd
(void) m_free(m);
(void) m_free(m)
void
void

m_free(m)
m_free
m_free
m
m
error = ENOBUFS;
error = ENOBUFS
error
error
ENOBUFS
ENOBUFS
sack_rxmit = 0;
sack_rxmit = 0
sack_rxmit
sack_rxmit
0
goto out;
out
if (off + len == so->so_snd.sb_cc)			flags |= TH_PUSH;
off + len == so->so_snd.sb_cc
off + len
off
off
len
len
so->so_snd.sb_cc
so->so_snd
so
so
so_snd
sb_cc
flags |= TH_PUSH;
flags |= TH_PUSH
flags
flags
TH_PUSH
TH_PUSH
SOCKBUF_UNLOCK(&so->so_snd);
SOCKBUF_UNLOCK(&so->so_snd)
SOCKBUF_UNLOCK
SOCKBUF_UNLOCK
&so->so_snd
so->so_snd
so
so
so_snd
{		SOCKBUF_UNLOCK(&so->so_snd);		if (tp->t_flags & TF_ACKNOW)			TCPSTAT_INC(tcps_sndacks);		else if (flags & (TH_SYN|TH_FIN|TH_RST))			TCPSTAT_INC(tcps_sndctrl);		else if (SEQ_GT(tp->snd_up, tp->snd_una))			TCPSTAT_INC(tcps_sndurg);		else			TCPSTAT_INC(tcps_sndwinup);		m = m_gethdr(M_NOWAIT, MT_DATA);		if (m == NULL) {			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}#ifdef INET6		if (isipv6 && (MHLEN < hdrlen + max_linkhdr) &&		    MHLEN >= hdrlen) {			MH_ALIGN(m, hdrlen);		} else#endif		m->m_data += max_linkhdr;		m->m_len = hdrlen;	}
SOCKBUF_UNLOCK(&so->so_snd);
SOCKBUF_UNLOCK(&so->so_snd)
SOCKBUF_UNLOCK
SOCKBUF_UNLOCK
&so->so_snd
so->so_snd
so
so
so_snd
if (tp->t_flags & TF_ACKNOW)			TCPSTAT_INC(tcps_sndacks);		else if (flags & (TH_SYN|TH_FIN|TH_RST))			TCPSTAT_INC(tcps_sndctrl);		else if (SEQ_GT(tp->snd_up, tp->snd_una))			TCPSTAT_INC(tcps_sndurg);		else			TCPSTAT_INC(tcps_sndwinup);
tp->t_flags & TF_ACKNOW
tp->t_flags
tp
tp
t_flags
TF_ACKNOW
TF_ACKNOW
TCPSTAT_INC(tcps_sndacks);
TCPSTAT_INC(tcps_sndacks);
TCPSTAT_INC
TCPSTAT_INC
(tcps_sndacks)
tcps_sndacks
tcps_sndacks
if (flags & (TH_SYN|TH_FIN|TH_RST))			TCPSTAT_INC(tcps_sndctrl);		else if (SEQ_GT(tp->snd_up, tp->snd_una))			TCPSTAT_INC(tcps_sndurg);		else			TCPSTAT_INC(tcps_sndwinup);
flags & (TH_SYN|TH_FIN|TH_RST)
flags
flags
(TH_SYN|TH_FIN|TH_RST)
TH_SYN|TH_FIN|TH_RST
TH_SYN|TH_FIN
TH_SYN
TH_SYN
TH_FIN
TH_FIN
TH_RST
TH_RST
TCPSTAT_INC(tcps_sndctrl);
TCPSTAT_INC(tcps_sndctrl);
TCPSTAT_INC
TCPSTAT_INC
(tcps_sndctrl)
tcps_sndctrl
tcps_sndctrl
if (SEQ_GT(tp->snd_up, tp->snd_una))			TCPSTAT_INC(tcps_sndurg);		else			TCPSTAT_INC(tcps_sndwinup);
SEQ_GT(tp->snd_up, tp->snd_una)
SEQ_GT
SEQ_GT
tp->snd_up
tp
tp
snd_up
tp->snd_una
tp
tp
snd_una
TCPSTAT_INC(tcps_sndurg);
TCPSTAT_INC(tcps_sndurg);
TCPSTAT_INC
TCPSTAT_INC
(tcps_sndurg)
tcps_sndurg
tcps_sndurg
TCPSTAT_INC(tcps_sndwinup);
TCPSTAT_INC(tcps_sndwinup);
TCPSTAT_INC
TCPSTAT_INC
(tcps_sndwinup)
tcps_sndwinup
tcps_sndwinup
m = m_gethdr(M_NOWAIT, MT_DATA);
m = m_gethdr(M_NOWAIT, MT_DATA)
m
m
m_gethdr(M_NOWAIT, MT_DATA)
m_gethdr
m_gethdr
M_NOWAIT
M_NOWAIT
MT_DATA
MT_DATA
if (m == NULL) {			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}
m == NULL
m
m
NULL
NULL
{			error = ENOBUFS;			sack_rxmit = 0;			goto out;		}
error = ENOBUFS;
error = ENOBUFS
error
error
ENOBUFS
ENOBUFS
sack_rxmit = 0;
sack_rxmit = 0
sack_rxmit
sack_rxmit
0
goto out;
out
m->m_data += max_linkhdr;
m->m_data += max_linkhdr
m->m_data
m
m
m_data
max_linkhdr
max_linkhdr
m->m_len = hdrlen;
m->m_len = hdrlen
m->m_len
m
m
m_len
hdrlen
hdrlen
SOCKBUF_UNLOCK_ASSERT(&so->so_snd);
SOCKBUF_UNLOCK_ASSERT(&so->so_snd)
SOCKBUF_UNLOCK_ASSERT
SOCKBUF_UNLOCK_ASSERT
&so->so_snd
so->so_snd
so
so
so_snd
m->m_pkthdr.rcvif = (struct ifnet *)0;
m->m_pkthdr.rcvif = (struct ifnet *)0
m->m_pkthdr.rcvif
m->m_pkthdr
m
m
m_pkthdr
rcvif
(struct ifnet *)0
struct ifnet *
struct ifnet
ifnet
*
*
0
{		ip = mtod(m, struct ip *);		ipov = (struct ipovly *)ip;		th = (struct tcphdr *)(ip + 1);		tcpip_fillheaders(tp->t_inpcb, ip, th);	}
ip = mtod(m, struct ip *);
ipov = (struct ipovly *)ip;
ipov = (struct ipovly *)ip
ipov
ipov
(struct ipovly *)ip
struct ipovly *
struct ipovly
ipovly
*
*
ip
ip
th = (struct tcphdr *)(ip + 1);
th = (struct tcphdr *)(ip + 1)
th
th
(struct tcphdr *)(ip + 1)
struct tcphdr *
struct tcphdr
tcphdr
*
*
(ip + 1)
ip + 1
ip
ip
1
tcpip_fillheaders(tp->t_inpcb, ip, th);
tcpip_fillheaders(tp->t_inpcb, ip, th)
tcpip_fillheaders
tcpip_fillheaders
tp->t_inpcb
tp
tp
t_inpcb
ip
ip
th
th
if (flags & TH_FIN && tp->t_flags & TF_SENTFIN &&	    tp->snd_nxt == tp->snd_max)		tp->snd_nxt--;
flags & TH_FIN && tp->t_flags & TF_SENTFIN &&	    tp->snd_nxt == tp->snd_max
flags & TH_FIN && tp->t_flags & TF_SENTFIN
flags & TH_FIN
flags
flags
TH_FIN
TH_FIN
tp->t_flags & TF_SENTFIN
tp->t_flags
tp
tp
t_flags
TF_SENTFIN
TF_SENTFIN
tp->snd_nxt == tp->snd_max
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_max
tp
tp
snd_max
tp->snd_nxt--;
tp->snd_nxt--
tp->snd_nxt
tp
tp
snd_nxt
if (tp->t_state == TCPS_SYN_SENT && V_tcp_do_ecn) {		if (tp->t_rxtshift >= 1) {			if (tp->t_rxtshift <= V_tcp_ecn_maxretries)				flags |= TH_ECE|TH_CWR;		} else			flags |= TH_ECE|TH_CWR;	}
tp->t_state == TCPS_SYN_SENT && V_tcp_do_ecn
tp->t_state == TCPS_SYN_SENT
tp->t_state
tp
tp
t_state
TCPS_SYN_SENT
TCPS_SYN_SENT
V_tcp_do_ecn
V_tcp_do_ecn
{		if (tp->t_rxtshift >= 1) {			if (tp->t_rxtshift <= V_tcp_ecn_maxretries)				flags |= TH_ECE|TH_CWR;		} else			flags |= TH_ECE|TH_CWR;	}
if (tp->t_rxtshift >= 1) {			if (tp->t_rxtshift <= V_tcp_ecn_maxretries)				flags |= TH_ECE|TH_CWR;		} else			flags |= TH_ECE|TH_CWR;
tp->t_rxtshift >= 1
tp->t_rxtshift
tp
tp
t_rxtshift
1
{			if (tp->t_rxtshift <= V_tcp_ecn_maxretries)				flags |= TH_ECE|TH_CWR;		}
if (tp->t_rxtshift <= V_tcp_ecn_maxretries)				flags |= TH_ECE|TH_CWR;
tp->t_rxtshift <= V_tcp_ecn_maxretries
tp->t_rxtshift
tp
tp
t_rxtshift
V_tcp_ecn_maxretries
V_tcp_ecn_maxretries
flags |= TH_ECE|TH_CWR;
flags |= TH_ECE|TH_CWR
flags
flags
TH_ECE|TH_CWR
TH_ECE
TH_ECE
TH_CWR
TH_CWR
flags |= TH_ECE|TH_CWR;
flags |= TH_ECE|TH_CWR
flags
flags
TH_ECE|TH_CWR
TH_ECE
TH_ECE
TH_CWR
TH_CWR
if (tp->t_state == TCPS_ESTABLISHED &&	    (tp->t_flags & TF_ECN_PERMIT)) {		/*		 * If the peer has ECN, mark data packets with		 * ECN capable transmission (ECT).		 * Ignore pure ack packets, retransmissions and window probes.		 */		if (len > 0 && SEQ_GEQ(tp->snd_nxt, tp->snd_max) &&		    !((tp->t_flags & TF_FORCEDATA) && len == 1)) {#ifdef INET6			if (isipv6)				ip6->ip6_flow |= htonl(IPTOS_ECN_ECT0 << 20);			else#endif				ip->ip_tos |= IPTOS_ECN_ECT0;			TCPSTAT_INC(tcps_ecn_ect0);		}		/*		 * Reply with proper ECN notifications.		 */		if (tp->t_flags & TF_ECN_SND_CWR) {			flags |= TH_CWR;			tp->t_flags &= ~TF_ECN_SND_CWR;		}		if (tp->t_flags & TF_ECN_SND_ECE)			flags |= TH_ECE;	}
tp->t_state == TCPS_ESTABLISHED &&	    (tp->t_flags & TF_ECN_PERMIT)
tp->t_state == TCPS_ESTABLISHED
tp->t_state
tp
tp
t_state
TCPS_ESTABLISHED
TCPS_ESTABLISHED
(tp->t_flags & TF_ECN_PERMIT)
tp->t_flags & TF_ECN_PERMIT
tp->t_flags
tp
tp
t_flags
TF_ECN_PERMIT
TF_ECN_PERMIT
{		/*		 * If the peer has ECN, mark data packets with		 * ECN capable transmission (ECT).		 * Ignore pure ack packets, retransmissions and window probes.		 */		if (len > 0 && SEQ_GEQ(tp->snd_nxt, tp->snd_max) &&		    !((tp->t_flags & TF_FORCEDATA) && len == 1)) {#ifdef INET6			if (isipv6)				ip6->ip6_flow |= htonl(IPTOS_ECN_ECT0 << 20);			else#endif				ip->ip_tos |= IPTOS_ECN_ECT0;			TCPSTAT_INC(tcps_ecn_ect0);		}		/*		 * Reply with proper ECN notifications.		 */		if (tp->t_flags & TF_ECN_SND_CWR) {			flags |= TH_CWR;			tp->t_flags &= ~TF_ECN_SND_CWR;		}		if (tp->t_flags & TF_ECN_SND_ECE)			flags |= TH_ECE;	}
if (len > 0 && SEQ_GEQ(tp->snd_nxt, tp->snd_max) &&		    !((tp->t_flags & TF_FORCEDATA) && len == 1)) {#ifdef INET6			if (isipv6)				ip6->ip6_flow |= htonl(IPTOS_ECN_ECT0 << 20);			else#endif				ip->ip_tos |= IPTOS_ECN_ECT0;			TCPSTAT_INC(tcps_ecn_ect0);		}
len > 0 && SEQ_GEQ(tp->snd_nxt, tp->snd_max) &&		    !((tp->t_flags & TF_FORCEDATA) && len == 1)
len > 0 && SEQ_GEQ(tp->snd_nxt, tp->snd_max)
len > 0
len
len
0
SEQ_GEQ(tp->snd_nxt, tp->snd_max)
SEQ_GEQ
SEQ_GEQ
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_max
tp
tp
snd_max
!((tp->t_flags & TF_FORCEDATA) && len == 1)
((tp->t_flags & TF_FORCEDATA) && len == 1)
(tp->t_flags & TF_FORCEDATA) && len == 1
(tp->t_flags & TF_FORCEDATA)
tp->t_flags & TF_FORCEDATA
tp->t_flags
tp
tp
t_flags
TF_FORCEDATA
TF_FORCEDATA
len == 1
len
len
1
{#ifdef INET6			if (isipv6)				ip6->ip6_flow |= htonl(IPTOS_ECN_ECT0 << 20);			else#endif				ip->ip_tos |= IPTOS_ECN_ECT0;			TCPSTAT_INC(tcps_ecn_ect0);		}
ip->ip_tos |= IPTOS_ECN_ECT0;
ip->ip_tos |= IPTOS_ECN_ECT0
ip->ip_tos
ip
ip
ip_tos
IPTOS_ECN_ECT0
IPTOS_ECN_ECT0
TCPSTAT_INC(tcps_ecn_ect0);
TCPSTAT_INC(tcps_ecn_ect0);
TCPSTAT_INC
TCPSTAT_INC
(tcps_ecn_ect0)
tcps_ecn_ect0
tcps_ecn_ect0
if (tp->t_flags & TF_ECN_SND_CWR) {			flags |= TH_CWR;			tp->t_flags &= ~TF_ECN_SND_CWR;		}
tp->t_flags & TF_ECN_SND_CWR
tp->t_flags
tp
tp
t_flags
TF_ECN_SND_CWR
TF_ECN_SND_CWR
{			flags |= TH_CWR;			tp->t_flags &= ~TF_ECN_SND_CWR;		}
flags |= TH_CWR;
flags |= TH_CWR
flags
flags
TH_CWR
TH_CWR
tp->t_flags &= ~TF_ECN_SND_CWR;
tp->t_flags &= ~TF_ECN_SND_CWR
tp->t_flags
tp
tp
t_flags
~TF_ECN_SND_CWR
TF_ECN_SND_CWR
TF_ECN_SND_CWR
if (tp->t_flags & TF_ECN_SND_ECE)			flags |= TH_ECE;
tp->t_flags & TF_ECN_SND_ECE
tp->t_flags
tp
tp
t_flags
TF_ECN_SND_ECE
TF_ECN_SND_ECE
flags |= TH_ECE;
flags |= TH_ECE
flags
flags
TH_ECE
TH_ECE
if (sack_rxmit == 0) {		if (len || (flags & (TH_SYN|TH_FIN)) ||		    tcp_timer_active(tp, TT_PERSIST))			th->th_seq = htonl(tp->snd_nxt);		else			th->th_seq = htonl(tp->snd_max);	} else {		th->th_seq = htonl(p->rxmit);		p->rxmit += len;		tp->sackhint.sack_bytes_rexmit += len;	}
sack_rxmit == 0
sack_rxmit
sack_rxmit
0
{		if (len || (flags & (TH_SYN|TH_FIN)) ||		    tcp_timer_active(tp, TT_PERSIST))			th->th_seq = htonl(tp->snd_nxt);		else			th->th_seq = htonl(tp->snd_max);	}
if (len || (flags & (TH_SYN|TH_FIN)) ||		    tcp_timer_active(tp, TT_PERSIST))			th->th_seq = htonl(tp->snd_nxt);		else			th->th_seq = htonl(tp->snd_max);
len || (flags & (TH_SYN|TH_FIN)) ||		    tcp_timer_active(tp, TT_PERSIST)
len || (flags & (TH_SYN|TH_FIN))
len
len
(flags & (TH_SYN|TH_FIN))
flags & (TH_SYN|TH_FIN)
flags
flags
(TH_SYN|TH_FIN)
TH_SYN|TH_FIN
TH_SYN
TH_SYN
TH_FIN
TH_FIN
tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active
tcp_timer_active
tp
tp
TT_PERSIST
TT_PERSIST
th->th_seq = htonl(tp->snd_nxt);
th->th_seq = htonl(tp->snd_nxt)
th->th_seq
th
th
th_seq
htonl(tp->snd_nxt)
htonl
htonl
tp->snd_nxt
tp
tp
snd_nxt
th->th_seq = htonl(tp->snd_max);
th->th_seq = htonl(tp->snd_max)
th->th_seq
th
th
th_seq
htonl(tp->snd_max)
htonl
htonl
tp->snd_max
tp
tp
snd_max
{		th->th_seq = htonl(p->rxmit);		p->rxmit += len;		tp->sackhint.sack_bytes_rexmit += len;	}
th->th_seq = htonl(p->rxmit);
th->th_seq = htonl(p->rxmit)
th->th_seq
th
th
th_seq
htonl(p->rxmit)
htonl
htonl
p->rxmit
p
p
rxmit
p->rxmit += len;
p->rxmit += len
p->rxmit
p
p
rxmit
len
len
tp->sackhint.sack_bytes_rexmit += len;
tp->sackhint.sack_bytes_rexmit += len
tp->sackhint.sack_bytes_rexmit
tp->sackhint
tp
tp
sackhint
sack_bytes_rexmit
len
len
th->th_ack = htonl(tp->rcv_nxt);
th->th_ack = htonl(tp->rcv_nxt)
th->th_ack
th
th
th_ack
htonl(tp->rcv_nxt)
htonl
htonl
tp->rcv_nxt
tp
tp
rcv_nxt
if (optlen) {		bcopy(opt, th + 1, optlen);		th->th_off = (sizeof (struct tcphdr) + optlen) >> 2;	}
optlen
optlen
{		bcopy(opt, th + 1, optlen);		th->th_off = (sizeof (struct tcphdr) + optlen) >> 2;	}
bcopy(opt, th + 1, optlen);
bcopy(opt, th + 1, optlen)
bcopy
bcopy
opt
opt
th + 1
th
th
1
optlen
optlen
th->th_off = (sizeof (struct tcphdr) + optlen) >> 2;
th->th_off = (sizeof (struct tcphdr) + optlen) >> 2
th->th_off
th
th
th_off
(sizeof (struct tcphdr) + optlen) >> 2
(sizeof (struct tcphdr) + optlen)
sizeof (struct tcphdr) + optlen
sizeof (struct tcphdr)
struct tcphdr
struct tcphdr
tcphdr

optlen
optlen
2
th->th_flags = flags;
th->th_flags = flags
th->th_flags
th
th
th_flags
flags
flags
if (recwin < (long)(so->so_rcv.sb_hiwat / 4) &&	    recwin < (long)tp->t_maxseg)		recwin = 0;
recwin < (long)(so->so_rcv.sb_hiwat / 4) &&	    recwin < (long)tp->t_maxseg
recwin < (long)(so->so_rcv.sb_hiwat / 4)
recwin
recwin
(long)(so->so_rcv.sb_hiwat / 4)
long
long

(so->so_rcv.sb_hiwat / 4)
so->so_rcv.sb_hiwat / 4
so->so_rcv.sb_hiwat
so->so_rcv
so
so
so_rcv
sb_hiwat
4
recwin < (long)tp->t_maxseg
recwin
recwin
(long)tp->t_maxseg
long
long

tp->t_maxseg
tp
tp
t_maxseg
recwin = 0;
recwin = 0
recwin
recwin
0
if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt) &&	    recwin < (long)(tp->rcv_adv - tp->rcv_nxt))		recwin = (long)(tp->rcv_adv - tp->rcv_nxt);
SEQ_GT(tp->rcv_adv, tp->rcv_nxt) &&	    recwin < (long)(tp->rcv_adv - tp->rcv_nxt)
SEQ_GT(tp->rcv_adv, tp->rcv_nxt)
SEQ_GT
SEQ_GT
tp->rcv_adv
tp
tp
rcv_adv
tp->rcv_nxt
tp
tp
rcv_nxt
recwin < (long)(tp->rcv_adv - tp->rcv_nxt)
recwin
recwin
(long)(tp->rcv_adv - tp->rcv_nxt)
long
long

(tp->rcv_adv - tp->rcv_nxt)
tp->rcv_adv - tp->rcv_nxt
tp->rcv_adv
tp
tp
rcv_adv
tp->rcv_nxt
tp
tp
rcv_nxt
recwin = (long)(tp->rcv_adv - tp->rcv_nxt);
recwin = (long)(tp->rcv_adv - tp->rcv_nxt)
recwin
recwin
(long)(tp->rcv_adv - tp->rcv_nxt)
long
long

(tp->rcv_adv - tp->rcv_nxt)
tp->rcv_adv - tp->rcv_nxt
tp->rcv_adv
tp
tp
rcv_adv
tp->rcv_nxt
tp
tp
rcv_nxt
if (recwin > (long)TCP_MAXWIN << tp->rcv_scale)		recwin = (long)TCP_MAXWIN << tp->rcv_scale;
recwin > (long)TCP_MAXWIN << tp->rcv_scale
recwin
recwin
(long)TCP_MAXWIN << tp->rcv_scale
(long)TCP_MAXWIN
long
long

TCP_MAXWIN
TCP_MAXWIN
tp->rcv_scale
tp
tp
rcv_scale
recwin = (long)TCP_MAXWIN << tp->rcv_scale;
recwin = (long)TCP_MAXWIN << tp->rcv_scale
recwin
recwin
(long)TCP_MAXWIN << tp->rcv_scale
(long)TCP_MAXWIN
long
long

TCP_MAXWIN
TCP_MAXWIN
tp->rcv_scale
tp
tp
rcv_scale
if (flags & TH_SYN)		th->th_win = htons((u_short)				(min(sbspace(&so->so_rcv), TCP_MAXWIN)));	else		th->th_win = htons((u_short)(recwin >> tp->rcv_scale));
flags & TH_SYN
flags
flags
TH_SYN
TH_SYN
th->th_win = htons((u_short)				(min(sbspace(&so->so_rcv), TCP_MAXWIN)));
th->th_win = htons((u_short)				(min(sbspace(&so->so_rcv), TCP_MAXWIN)))
th->th_win
th
th
th_win
htons((u_short)				(min(sbspace(&so->so_rcv), TCP_MAXWIN)))
htons
htons
(u_short)				(min(sbspace(&so->so_rcv), TCP_MAXWIN))
(u_short)
u_short
u_short
min(sbspace(&so->so_rcv), TCP_MAXWIN)
min
min
sbspace(&so->so_rcv)
sbspace
sbspace
&so->so_rcv
so->so_rcv
so
so
so_rcv
TCP_MAXWIN
TCP_MAXWIN
th->th_win = htons((u_short)(recwin >> tp->rcv_scale));
th->th_win = htons((u_short)(recwin >> tp->rcv_scale))
th->th_win
th
th
th_win
htons((u_short)(recwin >> tp->rcv_scale))
htons
htons
(u_short)(recwin >> tp->rcv_scale)
(u_short)
u_short
u_short
recwin >> tp->rcv_scale
recwin
recwin
tp->rcv_scale
tp
tp
rcv_scale
if (th->th_win == 0) {		tp->t_sndzerowin++;		tp->t_flags |= TF_RXWIN0SENT;	} else		tp->t_flags &= ~TF_RXWIN0SENT;
th->th_win == 0
th->th_win
th
th
th_win
0
{		tp->t_sndzerowin++;		tp->t_flags |= TF_RXWIN0SENT;	}
tp->t_sndzerowin++;
tp->t_sndzerowin++
tp->t_sndzerowin
tp
tp
t_sndzerowin
tp->t_flags |= TF_RXWIN0SENT;
tp->t_flags |= TF_RXWIN0SENT
tp->t_flags
tp
tp
t_flags
TF_RXWIN0SENT
TF_RXWIN0SENT
tp->t_flags &= ~TF_RXWIN0SENT;
tp->t_flags &= ~TF_RXWIN0SENT
tp->t_flags
tp
tp
t_flags
~TF_RXWIN0SENT
TF_RXWIN0SENT
TF_RXWIN0SENT
if (SEQ_GT(tp->snd_up, tp->snd_nxt)) {		th->th_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));		th->th_flags |= TH_URG;	} else		/*		 * If no urgent pointer to send, then we pull		 * the urgent pointer to the left edge of the send window		 * so that it doesn't drift into the send window on sequence		 * number wraparound.		 */		tp->snd_up = tp->snd_una;
SEQ_GT(tp->snd_up, tp->snd_nxt)
SEQ_GT
SEQ_GT
tp->snd_up
tp
tp
snd_up
tp->snd_nxt
tp
tp
snd_nxt
{		th->th_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));		th->th_flags |= TH_URG;	}
th->th_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));
th->th_urp = htons((u_short)(tp->snd_up - tp->snd_nxt))
th->th_urp
th
th
th_urp
htons((u_short)(tp->snd_up - tp->snd_nxt))
htons
htons
(u_short)(tp->snd_up - tp->snd_nxt)
(u_short)
u_short
u_short
tp->snd_up - tp->snd_nxt
tp->snd_up
tp
tp
snd_up
tp->snd_nxt
tp
tp
snd_nxt
th->th_flags |= TH_URG;
th->th_flags |= TH_URG
th->th_flags
th
th
th_flags
TH_URG
TH_URG
tp->snd_up = tp->snd_una;
tp->snd_up = tp->snd_una
tp->snd_up
tp
tp
snd_up
tp->snd_una
tp
tp
snd_una
m->m_pkthdr.len = hdrlen + len;
m->m_pkthdr.len = hdrlen + len
m->m_pkthdr.len
m->m_pkthdr
m
m
m_pkthdr
len
hdrlen + len
hdrlen
hdrlen
len
len
m->m_pkthdr.csum_data = offsetof(struct tcphdr, th_sum);
if (tso) {		KASSERT(len > tp->t_maxopd - optlen,		    ("%s: len <= tso_segsz", __func__));		m->m_pkthdr.csum_flags |= CSUM_TSO;		m->m_pkthdr.tso_segsz = tp->t_maxopd - optlen;	}
tso
tso
{		KASSERT(len > tp->t_maxopd - optlen,		    ("%s: len <= tso_segsz", __func__));		m->m_pkthdr.csum_flags |= CSUM_TSO;		m->m_pkthdr.tso_segsz = tp->t_maxopd - optlen;	}
KASSERT(len > tp->t_maxopd - optlen,		    ("%s: len <= tso_segsz", __func__));
KASSERT(len > tp->t_maxopd - optlen,		    ("%s: len <= tso_segsz", __func__))
KASSERT
KASSERT
len > tp->t_maxopd - optlen
len
len
tp->t_maxopd - optlen
tp->t_maxopd
tp
tp
t_maxopd
optlen
optlen
("%s: len <= tso_segsz", __func__)
"%s: len <= tso_segsz", __func__
"%s: len <= tso_segsz"
__func__
__func__
m->m_pkthdr.csum_flags |= CSUM_TSO;
m->m_pkthdr.csum_flags |= CSUM_TSO
m->m_pkthdr.csum_flags
m->m_pkthdr
m
m
m_pkthdr
csum_flags
CSUM_TSO
CSUM_TSO
m->m_pkthdr.tso_segsz = tp->t_maxopd - optlen;
m->m_pkthdr.tso_segsz = tp->t_maxopd - optlen
m->m_pkthdr.tso_segsz
m->m_pkthdr
m
m
m_pkthdr
tso_segsz
tp->t_maxopd - optlen
tp->t_maxopd
tp
tp
t_maxopd
optlen
optlen
KASSERT(len + hdrlen + ipoptlen == m_length(m, NULL),	    ("%s: mbuf chain shorter than expected: %ld + %u + %u != %u",	    __func__, len, hdrlen, ipoptlen, m_length(m, NULL)));
KASSERT(len + hdrlen + ipoptlen == m_length(m, NULL),	    ("%s: mbuf chain shorter than expected: %ld + %u + %u != %u",	    __func__, len, hdrlen, ipoptlen, m_length(m, NULL)))
KASSERT
KASSERT
len + hdrlen + ipoptlen == m_length(m, NULL)
len + hdrlen + ipoptlen
len + hdrlen
len
len
hdrlen
hdrlen
ipoptlen
ipoptlen
m_length(m, NULL)
m_length
m_length
m
m
NULL
NULL
("%s: mbuf chain shorter than expected: %ld + %u + %u != %u",	    __func__, len, hdrlen, ipoptlen, m_length(m, NULL))
"%s: mbuf chain shorter than expected: %ld + %u + %u != %u",	    __func__, len, hdrlen, ipoptlen, m_length(m, NULL)
"%s: mbuf chain shorter than expected: %ld + %u + %u != %u"
__func__
__func__
len
len
hdrlen
hdrlen
ipoptlen
ipoptlen
m_length(m, NULL)
m_length
m_length
m
m
NULL
NULL
hhook_run_tcp_est_out(tp, th, &to, len, tso);
hhook_run_tcp_est_out(tp, th, &to, len, tso)
hhook_run_tcp_est_out
hhook_run_tcp_est_out
tp
tp
th
th
&to
to
to
len
len
tso
tso
out:	/*	 * In transmit state, time the transmission and arrange for	 * the retransmit.  In persist state, just set snd_max.	 */	if ((tp->t_flags & TF_FORCEDATA) == 0 ||	    !tcp_timer_active(tp, TT_PERSIST)) {		tcp_seq startseq = tp->snd_nxt;		/*		 * Advance snd_nxt over sequence space of this segment.		 */		if (flags & (TH_SYN|TH_FIN)) {			if (flags & TH_SYN)				tp->snd_nxt++;			if (flags & TH_FIN) {				tp->snd_nxt++;				tp->t_flags |= TF_SENTFIN;			}		}		if (sack_rxmit)			goto timer;		tp->snd_nxt += len;		if (SEQ_GT(tp->snd_nxt, tp->snd_max)) {			tp->snd_max = tp->snd_nxt;			/*			 * Time this transmission if not a retransmission and			 * not currently timing anything.			 */			if (tp->t_rtttime == 0) {				tp->t_rtttime = ticks;				tp->t_rtseq = startseq;				TCPSTAT_INC(tcps_segstimed);			}		}		/*		 * Set retransmit timer if not currently set,		 * and not doing a pure ack or a keep-alive probe.		 * Initial value for retransmit timer is smoothed		 * round-trip time + 2 * round-trip time variance.		 * Initialize shift counter which is used for backoff		 * of retransmit time.		 */timer:		if (!tcp_timer_active(tp, TT_REXMT) &&		    ((sack_rxmit && tp->snd_nxt != tp->snd_max) ||		     (tp->snd_nxt != tp->snd_una))) {			if (tcp_timer_active(tp, TT_PERSIST)) {				tcp_timer_activate(tp, TT_PERSIST, 0);				tp->t_rxtshift = 0;			}			tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		}	} else {		/*		 * Persist case, update snd_max but since we are in		 * persist mode (no window) we do not update snd_nxt.		 */		int xlen = len;		if (flags & TH_SYN)			++xlen;		if (flags & TH_FIN) {			++xlen;			tp->t_flags |= TF_SENTFIN;		}		if (SEQ_GT(tp->snd_nxt + xlen, tp->snd_max))			tp->snd_max = tp->snd_nxt + len;	}
out
if ((tp->t_flags & TF_FORCEDATA) == 0 ||	    !tcp_timer_active(tp, TT_PERSIST)) {		tcp_seq startseq = tp->snd_nxt;		/*		 * Advance snd_nxt over sequence space of this segment.		 */		if (flags & (TH_SYN|TH_FIN)) {			if (flags & TH_SYN)				tp->snd_nxt++;			if (flags & TH_FIN) {				tp->snd_nxt++;				tp->t_flags |= TF_SENTFIN;			}		}		if (sack_rxmit)			goto timer;		tp->snd_nxt += len;		if (SEQ_GT(tp->snd_nxt, tp->snd_max)) {			tp->snd_max = tp->snd_nxt;			/*			 * Time this transmission if not a retransmission and			 * not currently timing anything.			 */			if (tp->t_rtttime == 0) {				tp->t_rtttime = ticks;				tp->t_rtseq = startseq;				TCPSTAT_INC(tcps_segstimed);			}		}		/*		 * Set retransmit timer if not currently set,		 * and not doing a pure ack or a keep-alive probe.		 * Initial value for retransmit timer is smoothed		 * round-trip time + 2 * round-trip time variance.		 * Initialize shift counter which is used for backoff		 * of retransmit time.		 */timer:		if (!tcp_timer_active(tp, TT_REXMT) &&		    ((sack_rxmit && tp->snd_nxt != tp->snd_max) ||		     (tp->snd_nxt != tp->snd_una))) {			if (tcp_timer_active(tp, TT_PERSIST)) {				tcp_timer_activate(tp, TT_PERSIST, 0);				tp->t_rxtshift = 0;			}			tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		}	} else {		/*		 * Persist case, update snd_max but since we are in		 * persist mode (no window) we do not update snd_nxt.		 */		int xlen = len;		if (flags & TH_SYN)			++xlen;		if (flags & TH_FIN) {			++xlen;			tp->t_flags |= TF_SENTFIN;		}		if (SEQ_GT(tp->snd_nxt + xlen, tp->snd_max))			tp->snd_max = tp->snd_nxt + len;	}
(tp->t_flags & TF_FORCEDATA) == 0 ||	    !tcp_timer_active(tp, TT_PERSIST)
(tp->t_flags & TF_FORCEDATA) == 0
(tp->t_flags & TF_FORCEDATA)
tp->t_flags & TF_FORCEDATA
tp->t_flags
tp
tp
t_flags
TF_FORCEDATA
TF_FORCEDATA
0
!tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active
tcp_timer_active
tp
tp
TT_PERSIST
TT_PERSIST
{		tcp_seq startseq = tp->snd_nxt;		/*		 * Advance snd_nxt over sequence space of this segment.		 */		if (flags & (TH_SYN|TH_FIN)) {			if (flags & TH_SYN)				tp->snd_nxt++;			if (flags & TH_FIN) {				tp->snd_nxt++;				tp->t_flags |= TF_SENTFIN;			}		}		if (sack_rxmit)			goto timer;		tp->snd_nxt += len;		if (SEQ_GT(tp->snd_nxt, tp->snd_max)) {			tp->snd_max = tp->snd_nxt;			/*			 * Time this transmission if not a retransmission and			 * not currently timing anything.			 */			if (tp->t_rtttime == 0) {				tp->t_rtttime = ticks;				tp->t_rtseq = startseq;				TCPSTAT_INC(tcps_segstimed);			}		}		/*		 * Set retransmit timer if not currently set,		 * and not doing a pure ack or a keep-alive probe.		 * Initial value for retransmit timer is smoothed		 * round-trip time + 2 * round-trip time variance.		 * Initialize shift counter which is used for backoff		 * of retransmit time.		 */timer:		if (!tcp_timer_active(tp, TT_REXMT) &&		    ((sack_rxmit && tp->snd_nxt != tp->snd_max) ||		     (tp->snd_nxt != tp->snd_una))) {			if (tcp_timer_active(tp, TT_PERSIST)) {				tcp_timer_activate(tp, TT_PERSIST, 0);				tp->t_rxtshift = 0;			}			tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		}	}
tcp_seq startseq = tp->snd_nxt;
tcp_seq startseq = tp->snd_nxt;
tcp_seq
tcp_seq
startseq = tp->snd_nxt
startseq
= tp->snd_nxt
tp->snd_nxt
tp
tp
snd_nxt
if (flags & (TH_SYN|TH_FIN)) {			if (flags & TH_SYN)				tp->snd_nxt++;			if (flags & TH_FIN) {				tp->snd_nxt++;				tp->t_flags |= TF_SENTFIN;			}		}
flags & (TH_SYN|TH_FIN)
flags
flags
(TH_SYN|TH_FIN)
TH_SYN|TH_FIN
TH_SYN
TH_SYN
TH_FIN
TH_FIN
{			if (flags & TH_SYN)				tp->snd_nxt++;			if (flags & TH_FIN) {				tp->snd_nxt++;				tp->t_flags |= TF_SENTFIN;			}		}
if (flags & TH_SYN)				tp->snd_nxt++;
flags & TH_SYN
flags
flags
TH_SYN
TH_SYN
tp->snd_nxt++;
tp->snd_nxt++
tp->snd_nxt
tp
tp
snd_nxt
if (flags & TH_FIN) {				tp->snd_nxt++;				tp->t_flags |= TF_SENTFIN;			}
flags & TH_FIN
flags
flags
TH_FIN
TH_FIN
{				tp->snd_nxt++;				tp->t_flags |= TF_SENTFIN;			}
tp->snd_nxt++;
tp->snd_nxt++
tp->snd_nxt
tp
tp
snd_nxt
tp->t_flags |= TF_SENTFIN;
tp->t_flags |= TF_SENTFIN
tp->t_flags
tp
tp
t_flags
TF_SENTFIN
TF_SENTFIN
if (sack_rxmit)			goto timer;
sack_rxmit
sack_rxmit
goto timer;
timer
tp->snd_nxt += len;
tp->snd_nxt += len
tp->snd_nxt
tp
tp
snd_nxt
len
len
if (SEQ_GT(tp->snd_nxt, tp->snd_max)) {			tp->snd_max = tp->snd_nxt;			/*			 * Time this transmission if not a retransmission and			 * not currently timing anything.			 */			if (tp->t_rtttime == 0) {				tp->t_rtttime = ticks;				tp->t_rtseq = startseq;				TCPSTAT_INC(tcps_segstimed);			}		}
SEQ_GT(tp->snd_nxt, tp->snd_max)
SEQ_GT
SEQ_GT
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_max
tp
tp
snd_max
{			tp->snd_max = tp->snd_nxt;			/*			 * Time this transmission if not a retransmission and			 * not currently timing anything.			 */			if (tp->t_rtttime == 0) {				tp->t_rtttime = ticks;				tp->t_rtseq = startseq;				TCPSTAT_INC(tcps_segstimed);			}		}
tp->snd_max = tp->snd_nxt;
tp->snd_max = tp->snd_nxt
tp->snd_max
tp
tp
snd_max
tp->snd_nxt
tp
tp
snd_nxt
if (tp->t_rtttime == 0) {				tp->t_rtttime = ticks;				tp->t_rtseq = startseq;				TCPSTAT_INC(tcps_segstimed);			}
tp->t_rtttime == 0
tp->t_rtttime
tp
tp
t_rtttime
0
{				tp->t_rtttime = ticks;				tp->t_rtseq = startseq;				TCPSTAT_INC(tcps_segstimed);			}
tp->t_rtttime = ticks;
tp->t_rtttime = ticks
tp->t_rtttime
tp
tp
t_rtttime
ticks
ticks
tp->t_rtseq = startseq;
tp->t_rtseq = startseq
tp->t_rtseq
tp
tp
t_rtseq
startseq
startseq
TCPSTAT_INC(tcps_segstimed);
TCPSTAT_INC(tcps_segstimed);
TCPSTAT_INC
TCPSTAT_INC
(tcps_segstimed)
tcps_segstimed
tcps_segstimed
timer:		if (!tcp_timer_active(tp, TT_REXMT) &&		    ((sack_rxmit && tp->snd_nxt != tp->snd_max) ||		     (tp->snd_nxt != tp->snd_una))) {			if (tcp_timer_active(tp, TT_PERSIST)) {				tcp_timer_activate(tp, TT_PERSIST, 0);				tp->t_rxtshift = 0;			}			tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		}
timer
if (!tcp_timer_active(tp, TT_REXMT) &&		    ((sack_rxmit && tp->snd_nxt != tp->snd_max) ||		     (tp->snd_nxt != tp->snd_una))) {			if (tcp_timer_active(tp, TT_PERSIST)) {				tcp_timer_activate(tp, TT_PERSIST, 0);				tp->t_rxtshift = 0;			}			tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		}
!tcp_timer_active(tp, TT_REXMT) &&		    ((sack_rxmit && tp->snd_nxt != tp->snd_max) ||		     (tp->snd_nxt != tp->snd_una))
!tcp_timer_active(tp, TT_REXMT)
tcp_timer_active(tp, TT_REXMT)
tcp_timer_active
tcp_timer_active
tp
tp
TT_REXMT
TT_REXMT
((sack_rxmit && tp->snd_nxt != tp->snd_max) ||		     (tp->snd_nxt != tp->snd_una))
(sack_rxmit && tp->snd_nxt != tp->snd_max) ||		     (tp->snd_nxt != tp->snd_una)
(sack_rxmit && tp->snd_nxt != tp->snd_max)
sack_rxmit && tp->snd_nxt != tp->snd_max
sack_rxmit
sack_rxmit
tp->snd_nxt != tp->snd_max
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_max
tp
tp
snd_max
(tp->snd_nxt != tp->snd_una)
tp->snd_nxt != tp->snd_una
tp->snd_nxt
tp
tp
snd_nxt
tp->snd_una
tp
tp
snd_una
{			if (tcp_timer_active(tp, TT_PERSIST)) {				tcp_timer_activate(tp, TT_PERSIST, 0);				tp->t_rxtshift = 0;			}			tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);		}
if (tcp_timer_active(tp, TT_PERSIST)) {				tcp_timer_activate(tp, TT_PERSIST, 0);				tp->t_rxtshift = 0;			}
tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active
tcp_timer_active
tp
tp
TT_PERSIST
TT_PERSIST
{				tcp_timer_activate(tp, TT_PERSIST, 0);				tp->t_rxtshift = 0;			}
tcp_timer_activate(tp, TT_PERSIST, 0);
tcp_timer_activate(tp, TT_PERSIST, 0)
tcp_timer_activate
tcp_timer_activate
tp
tp
TT_PERSIST
TT_PERSIST
0
tp->t_rxtshift = 0;
tp->t_rxtshift = 0
tp->t_rxtshift
tp
tp
t_rxtshift
0
tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);
tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur)
tcp_timer_activate
tcp_timer_activate
tp
tp
TT_REXMT
TT_REXMT
tp->t_rxtcur
tp
tp
t_rxtcur
{		/*		 * Persist case, update snd_max but since we are in		 * persist mode (no window) we do not update snd_nxt.		 */		int xlen = len;		if (flags & TH_SYN)			++xlen;		if (flags & TH_FIN) {			++xlen;			tp->t_flags |= TF_SENTFIN;		}		if (SEQ_GT(tp->snd_nxt + xlen, tp->snd_max))			tp->snd_max = tp->snd_nxt + len;	}
int xlen = len;
int xlen = len;
int
xlen = len
xlen
= len
len
len
if (flags & TH_SYN)			++xlen;
flags & TH_SYN
flags
flags
TH_SYN
TH_SYN
++xlen;
++xlen
xlen
xlen
if (flags & TH_FIN) {			++xlen;			tp->t_flags |= TF_SENTFIN;		}
flags & TH_FIN
flags
flags
TH_FIN
TH_FIN
{			++xlen;			tp->t_flags |= TF_SENTFIN;		}
++xlen;
++xlen
xlen
xlen
tp->t_flags |= TF_SENTFIN;
tp->t_flags |= TF_SENTFIN
tp->t_flags
tp
tp
t_flags
TF_SENTFIN
TF_SENTFIN
if (SEQ_GT(tp->snd_nxt + xlen, tp->snd_max))			tp->snd_max = tp->snd_nxt + len;
SEQ_GT(tp->snd_nxt + xlen, tp->snd_max)
SEQ_GT
SEQ_GT
tp->snd_nxt + xlen
tp->snd_nxt
tp
tp
snd_nxt
xlen
xlen
tp->snd_max
tp
tp
snd_max
tp->snd_max = tp->snd_nxt + len;
tp->snd_max = tp->snd_nxt + len
tp->snd_max
tp
tp
snd_max
tp->snd_nxt + len
tp->snd_nxt
tp
tp
snd_nxt
len
len
if (error) {		/*		 * We know that the packet was lost, so back out the		 * sequence number advance, if any.		 *		 * If the error is EPERM the packet got blocked by the		 * local firewall.  Normally we should terminate the		 * connection but the blocking may have been spurious		 * due to a firewall reconfiguration cycle.  So we treat		 * it like a packet loss and let the retransmit timer and		 * timeouts do their work over time.		 * XXX: It is a POLA question whether calling tcp_drop right		 * away would be the really correct behavior instead.		 */		if (((tp->t_flags & TF_FORCEDATA) == 0 ||		    !tcp_timer_active(tp, TT_PERSIST)) &&		    ((flags & TH_SYN) == 0) &&		    (error != EPERM)) {			if (sack_rxmit) {				p->rxmit -= len;				tp->sackhint.sack_bytes_rexmit -= len;				KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,				    ("sackhint bytes rtx >= 0"));			} else				tp->snd_nxt -= len;		}		SOCKBUF_UNLOCK_ASSERT(&so->so_snd);	/* Check gotos. */		switch (error) {		case EPERM:			tp->t_softerror = error;			return (error);		case ENOBUFS:	                if (!tcp_timer_active(tp, TT_REXMT) &&			    !tcp_timer_active(tp, TT_PERSIST))	                        tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);			tp->snd_cwnd = tp->t_maxseg;			return (0);		case EMSGSIZE:			/*			 * For some reason the interface we used initially			 * to send segments changed to another or lowered			 * its MTU.			 * If TSO was active we either got an interface			 * without TSO capabilits or TSO was turned off.			 * If we obtained mtu from ip_output() then update			 * it and try again.			 */			if (tso)				tp->t_flags &= ~TF_TSO;			if (mtu != 0) {				tcp_mss_update(tp, -1, mtu, NULL, NULL);				goto again;			}			return (error);		case EHOSTDOWN:		case EHOSTUNREACH:		case ENETDOWN:		case ENETUNREACH:			if (TCPS_HAVERCVDSYN(tp->t_state)) {				tp->t_softerror = error;				return (0);			}			/* FALLTHROUGH */		default:			return (error);		}	}
error
error
{		/*		 * We know that the packet was lost, so back out the		 * sequence number advance, if any.		 *		 * If the error is EPERM the packet got blocked by the		 * local firewall.  Normally we should terminate the		 * connection but the blocking may have been spurious		 * due to a firewall reconfiguration cycle.  So we treat		 * it like a packet loss and let the retransmit timer and		 * timeouts do their work over time.		 * XXX: It is a POLA question whether calling tcp_drop right		 * away would be the really correct behavior instead.		 */		if (((tp->t_flags & TF_FORCEDATA) == 0 ||		    !tcp_timer_active(tp, TT_PERSIST)) &&		    ((flags & TH_SYN) == 0) &&		    (error != EPERM)) {			if (sack_rxmit) {				p->rxmit -= len;				tp->sackhint.sack_bytes_rexmit -= len;				KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,				    ("sackhint bytes rtx >= 0"));			} else				tp->snd_nxt -= len;		}		SOCKBUF_UNLOCK_ASSERT(&so->so_snd);	/* Check gotos. */		switch (error) {		case EPERM:			tp->t_softerror = error;			return (error);		case ENOBUFS:	                if (!tcp_timer_active(tp, TT_REXMT) &&			    !tcp_timer_active(tp, TT_PERSIST))	                        tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);			tp->snd_cwnd = tp->t_maxseg;			return (0);		case EMSGSIZE:			/*			 * For some reason the interface we used initially			 * to send segments changed to another or lowered			 * its MTU.			 * If TSO was active we either got an interface			 * without TSO capabilits or TSO was turned off.			 * If we obtained mtu from ip_output() then update			 * it and try again.			 */			if (tso)				tp->t_flags &= ~TF_TSO;			if (mtu != 0) {				tcp_mss_update(tp, -1, mtu, NULL, NULL);				goto again;			}			return (error);		case EHOSTDOWN:		case EHOSTUNREACH:		case ENETDOWN:		case ENETUNREACH:			if (TCPS_HAVERCVDSYN(tp->t_state)) {				tp->t_softerror = error;				return (0);			}			/* FALLTHROUGH */		default:			return (error);		}	}
if (((tp->t_flags & TF_FORCEDATA) == 0 ||		    !tcp_timer_active(tp, TT_PERSIST)) &&		    ((flags & TH_SYN) == 0) &&		    (error != EPERM)) {			if (sack_rxmit) {				p->rxmit -= len;				tp->sackhint.sack_bytes_rexmit -= len;				KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,				    ("sackhint bytes rtx >= 0"));			} else				tp->snd_nxt -= len;		}
((tp->t_flags & TF_FORCEDATA) == 0 ||		    !tcp_timer_active(tp, TT_PERSIST)) &&		    ((flags & TH_SYN) == 0) &&		    (error != EPERM)
((tp->t_flags & TF_FORCEDATA) == 0 ||		    !tcp_timer_active(tp, TT_PERSIST)) &&		    ((flags & TH_SYN) == 0)
((tp->t_flags & TF_FORCEDATA) == 0 ||		    !tcp_timer_active(tp, TT_PERSIST))
(tp->t_flags & TF_FORCEDATA) == 0 ||		    !tcp_timer_active(tp, TT_PERSIST)
(tp->t_flags & TF_FORCEDATA) == 0
(tp->t_flags & TF_FORCEDATA)
tp->t_flags & TF_FORCEDATA
tp->t_flags
tp
tp
t_flags
TF_FORCEDATA
TF_FORCEDATA
0
!tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active
tcp_timer_active
tp
tp
TT_PERSIST
TT_PERSIST
((flags & TH_SYN) == 0)
(flags & TH_SYN) == 0
(flags & TH_SYN)
flags & TH_SYN
flags
flags
TH_SYN
TH_SYN
0
(error != EPERM)
error != EPERM
error
error
EPERM
EPERM
{			if (sack_rxmit) {				p->rxmit -= len;				tp->sackhint.sack_bytes_rexmit -= len;				KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,				    ("sackhint bytes rtx >= 0"));			} else				tp->snd_nxt -= len;		}
if (sack_rxmit) {				p->rxmit -= len;				tp->sackhint.sack_bytes_rexmit -= len;				KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,				    ("sackhint bytes rtx >= 0"));			} else				tp->snd_nxt -= len;
sack_rxmit
sack_rxmit
{				p->rxmit -= len;				tp->sackhint.sack_bytes_rexmit -= len;				KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,				    ("sackhint bytes rtx >= 0"));			}
p->rxmit -= len;
p->rxmit -= len
p->rxmit
p
p
rxmit
len
len
tp->sackhint.sack_bytes_rexmit -= len;
tp->sackhint.sack_bytes_rexmit -= len
tp->sackhint.sack_bytes_rexmit
tp->sackhint
tp
tp
sackhint
sack_bytes_rexmit
len
len
KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,				    ("sackhint bytes rtx >= 0"));
KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,				    ("sackhint bytes rtx >= 0"))
KASSERT
KASSERT
tp->sackhint.sack_bytes_rexmit >= 0
tp->sackhint.sack_bytes_rexmit
tp->sackhint
tp
tp
sackhint
sack_bytes_rexmit
0
("sackhint bytes rtx >= 0")
"sackhint bytes rtx >= 0"
tp->snd_nxt -= len;
tp->snd_nxt -= len
tp->snd_nxt
tp
tp
snd_nxt
len
len
SOCKBUF_UNLOCK_ASSERT(&so->so_snd);
SOCKBUF_UNLOCK_ASSERT(&so->so_snd)
SOCKBUF_UNLOCK_ASSERT
SOCKBUF_UNLOCK_ASSERT
&so->so_snd
so->so_snd
so
so
so_snd
switch (error) {		case EPERM:			tp->t_softerror = error;			return (error);		case ENOBUFS:	                if (!tcp_timer_active(tp, TT_REXMT) &&			    !tcp_timer_active(tp, TT_PERSIST))	                        tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);			tp->snd_cwnd = tp->t_maxseg;			return (0);		case EMSGSIZE:			/*			 * For some reason the interface we used initially			 * to send segments changed to another or lowered			 * its MTU.			 * If TSO was active we either got an interface			 * without TSO capabilits or TSO was turned off.			 * If we obtained mtu from ip_output() then update			 * it and try again.			 */			if (tso)				tp->t_flags &= ~TF_TSO;			if (mtu != 0) {				tcp_mss_update(tp, -1, mtu, NULL, NULL);				goto again;			}			return (error);		case EHOSTDOWN:		case EHOSTUNREACH:		case ENETDOWN:		case ENETUNREACH:			if (TCPS_HAVERCVDSYN(tp->t_state)) {				tp->t_softerror = error;				return (0);			}			/* FALLTHROUGH */		default:			return (error);		}
error
error
{		case EPERM:			tp->t_softerror = error;			return (error);		case ENOBUFS:	                if (!tcp_timer_active(tp, TT_REXMT) &&			    !tcp_timer_active(tp, TT_PERSIST))	                        tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);			tp->snd_cwnd = tp->t_maxseg;			return (0);		case EMSGSIZE:			/*			 * For some reason the interface we used initially			 * to send segments changed to another or lowered			 * its MTU.			 * If TSO was active we either got an interface			 * without TSO capabilits or TSO was turned off.			 * If we obtained mtu from ip_output() then update			 * it and try again.			 */			if (tso)				tp->t_flags &= ~TF_TSO;			if (mtu != 0) {				tcp_mss_update(tp, -1, mtu, NULL, NULL);				goto again;			}			return (error);		case EHOSTDOWN:		case EHOSTUNREACH:		case ENETDOWN:		case ENETUNREACH:			if (TCPS_HAVERCVDSYN(tp->t_state)) {				tp->t_softerror = error;				return (0);			}			/* FALLTHROUGH */		default:			return (error);		}
case EPERM:
EPERM
EPERM
tp->t_softerror = error;
tp->t_softerror = error
tp->t_softerror
tp
tp
t_softerror
error
error
return (error);
(error)
error
error
case ENOBUFS:
ENOBUFS
ENOBUFS
if (!tcp_timer_active(tp, TT_REXMT) &&			    !tcp_timer_active(tp, TT_PERSIST))	                        tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);
!tcp_timer_active(tp, TT_REXMT) &&			    !tcp_timer_active(tp, TT_PERSIST)
!tcp_timer_active(tp, TT_REXMT)
tcp_timer_active(tp, TT_REXMT)
tcp_timer_active
tcp_timer_active
tp
tp
TT_REXMT
TT_REXMT
!tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active(tp, TT_PERSIST)
tcp_timer_active
tcp_timer_active
tp
tp
TT_PERSIST
TT_PERSIST
tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur);
tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur)
tcp_timer_activate
tcp_timer_activate
tp
tp
TT_REXMT
TT_REXMT
tp->t_rxtcur
tp
tp
t_rxtcur
tp->snd_cwnd = tp->t_maxseg;
tp->snd_cwnd = tp->t_maxseg
tp->snd_cwnd
tp
tp
snd_cwnd
tp->t_maxseg
tp
tp
t_maxseg
return (0);
(0)
0
case EMSGSIZE:
EMSGSIZE
EMSGSIZE
if (tso)				tp->t_flags &= ~TF_TSO;
tso
tso
tp->t_flags &= ~TF_TSO;
tp->t_flags &= ~TF_TSO
tp->t_flags
tp
tp
t_flags
~TF_TSO
TF_TSO
TF_TSO
if (mtu != 0) {				tcp_mss_update(tp, -1, mtu, NULL, NULL);				goto again;			}
mtu != 0
mtu
mtu
0
{				tcp_mss_update(tp, -1, mtu, NULL, NULL);				goto again;			}
tcp_mss_update(tp, -1, mtu, NULL, NULL);
tcp_mss_update(tp, -1, mtu, NULL, NULL)
tcp_mss_update
tcp_mss_update
tp
tp
-1
1
mtu
mtu
NULL
NULL
NULL
NULL
goto again;
again
return (error);
(error)
error
error
case EHOSTDOWN:
EHOSTDOWN
EHOSTDOWN
case EHOSTUNREACH:
EHOSTUNREACH
EHOSTUNREACH
case ENETDOWN:
ENETDOWN
ENETDOWN
case ENETUNREACH:
ENETUNREACH
ENETUNREACH
if (TCPS_HAVERCVDSYN(tp->t_state)) {				tp->t_softerror = error;				return (0);			}
TCPS_HAVERCVDSYN(tp->t_state)
TCPS_HAVERCVDSYN
TCPS_HAVERCVDSYN
tp->t_state
tp
tp
t_state
{				tp->t_softerror = error;				return (0);			}
tp->t_softerror = error;
tp->t_softerror = error
tp->t_softerror
tp
tp
t_softerror
error
error
return (0);
(0)
0
default:
return (error);
(error)
error
error
TCPSTAT_INC(tcps_sndtotal);
TCPSTAT_INC(tcps_sndtotal);
TCPSTAT_INC
TCPSTAT_INC
(tcps_sndtotal)
tcps_sndtotal
tcps_sndtotal
if (recwin >= 0 && SEQ_GT(tp->rcv_nxt + recwin, tp->rcv_adv))		tp->rcv_adv = tp->rcv_nxt + recwin;
recwin >= 0 && SEQ_GT(tp->rcv_nxt + recwin, tp->rcv_adv)
recwin >= 0
recwin
recwin
0
SEQ_GT(tp->rcv_nxt + recwin, tp->rcv_adv)
SEQ_GT
SEQ_GT
tp->rcv_nxt + recwin
tp->rcv_nxt
tp
tp
rcv_nxt
recwin
recwin
tp->rcv_adv
tp
tp
rcv_adv
tp->rcv_adv = tp->rcv_nxt + recwin;
tp->rcv_adv = tp->rcv_nxt + recwin
tp->rcv_adv
tp
tp
rcv_adv
tp->rcv_nxt + recwin
tp->rcv_nxt
tp
tp
rcv_nxt
recwin
recwin
tp->last_ack_sent = tp->rcv_nxt;
tp->last_ack_sent = tp->rcv_nxt
tp->last_ack_sent
tp
tp
last_ack_sent
tp->rcv_nxt
tp
tp
rcv_nxt
tp->t_flags &= ~(TF_ACKNOW | TF_DELACK);
tp->t_flags &= ~(TF_ACKNOW | TF_DELACK)
tp->t_flags
tp
tp
t_flags
~(TF_ACKNOW | TF_DELACK)
(TF_ACKNOW | TF_DELACK)
TF_ACKNOW | TF_DELACK
TF_ACKNOW
TF_ACKNOW
TF_DELACK
TF_DELACK
if (tcp_timer_active(tp, TT_DELACK))		tcp_timer_activate(tp, TT_DELACK, 0);
tcp_timer_active(tp, TT_DELACK)
tcp_timer_active
tcp_timer_active
tp
tp
TT_DELACK
TT_DELACK
tcp_timer_activate(tp, TT_DELACK, 0);
tcp_timer_activate(tp, TT_DELACK, 0)
tcp_timer_activate
tcp_timer_activate
tp
tp
TT_DELACK
TT_DELACK
0
if (sendalot)		goto again;
sendalot
sendalot
goto again;
again
return (0);
(0)
0
-----joern-----
(126,371,0)
(126,1349,0)
(2742,1974,0)
(1924,1349,0)
(2854,1944,0)
(956,1178,0)
(1035,1962,0)
(1355,15,0)
(1786,898,0)
(668,1991,0)
(3001,1751,0)
(1490,1931,0)
(1687,1186,0)
(593,2607,0)
(1326,2458,0)
(1210,579,0)
(2759,2745,0)
(126,1900,0)
(476,2954,0)
(2893,2139,0)
(2639,429,0)
(2133,1533,0)
(354,468,0)
(2594,2950,0)
(876,1074,0)
(2607,1946,0)
(1358,319,0)
(2736,1991,0)
(2479,113,0)
(202,1442,0)
(1269,1185,0)
(965,2395,0)
(1950,1349,0)
(1321,1991,0)
(2649,1425,0)
(205,362,0)
(2759,2588,0)
(1687,2674,0)
(1860,1960,0)
(2607,2588,0)
(2162,2700,0)
(301,1749,0)
(2722,17,0)
(478,181,0)
(1418,2824,0)
(354,2174,0)
(758,1991,0)
(1503,2222,0)
(2809,1874,0)
(2167,2633,0)
(2650,468,0)
(835,117,0)
(2229,1700,0)
(1937,202,0)
(1906,2997,0)
(2589,2469,0)
(1687,2441,0)
(1698,1161,0)
(117,1874,0)
(668,2167,0)
(2477,64,0)
(2812,1586,0)
(3014,515,0)
(2964,1474,0)
(1089,2143,0)
(1825,1917,0)
(2317,1349,0)
(1003,1156,0)
(2150,2275,0)
(1315,898,0)
(717,2036,0)
(1318,1700,0)
(1216,1298,0)
(29,352,0)
(2571,1162,0)
(1687,726,0)
(29,1566,0)
(1653,2982,0)
(1707,1991,0)
(3011,223,0)
(2759,2921,0)
(2681,1823,0)
(1409,102,0)
(2635,1429,0)
(2573,46,0)
(117,1074,0)
(2530,1931,0)
(126,2885,0)
(2713,980,0)
(309,2257,0)
(1993,1232,0)
(640,27,0)
(455,2686,0)
(1950,596,0)
(3018,2631,0)
(1951,1423,0)
(1162,2921,0)
(1962,1927,0)
(2526,1539,0)
(117,1875,0)
(2813,1991,0)
(1769,1991,0)
(2271,2614,0)
(590,1160,0)
(196,117,0)
(211,839,0)
(2607,187,0)
(1330,2674,0)
(1741,2831,0)
(2524,1700,0)
(2556,1612,0)
(871,1533,0)
(2141,976,0)
(814,2915,0)
(216,1549,0)
(2036,473,0)
(126,2935,0)
(2945,2117,0)
(2607,1856,0)
(1822,2674,0)
(180,54,0)
(342,1534,0)
(2799,44,0)
(2607,1568,0)
(2109,1686,0)
(505,2650,0)
(876,1534,0)
(2114,408,0)
(2650,402,0)
(1346,2441,0)
(89,955,0)
(1815,2779,0)
(2759,2480,0)
(2081,354,0)
(714,1594,0)
(911,2143,0)
(1506,1070,0)
(2543,2674,0)
(129,117,0)
(2018,385,0)
(1687,468,0)
(1304,1700,0)
(1687,2588,0)
(630,2108,0)
(1315,2674,0)
(2809,545,0)
(1822,3041,0)
(1687,1417,0)
(83,4,0)
(1031,1471,0)
(1631,2733,0)
(11,3015,0)
(1326,898,0)
(117,685,0)
(2229,441,0)
(329,468,0)
(2551,1874,0)
(1030,1555,0)
(2103,1322,0)
(354,1349,0)
(691,1160,0)
(410,2067,0)
(2759,2940,0)
(2527,74,0)
(1756,1898,0)
(2656,2593,0)
(1171,2492,0)
(1917,1160,0)
(1778,1901,0)
(2120,2287,0)
(2077,117,0)
(1214,3002,0)
(2765,2387,0)
(576,1877,0)
(2598,2918,0)
(2785,1530,0)
(504,839,0)
(1950,827,0)
(165,957,0)
(876,2256,0)
(6,1991,0)
(1214,575,0)
(661,1700,0)
(1197,1534,0)
(1806,2971,0)
(2571,1931,0)
(492,3009,0)
(1786,1972,0)
(2551,1476,0)
(1540,858,0)
(1315,472,0)
(2345,223,0)
(2376,2019,0)
(1725,2458,0)
(2571,1700,0)
(2910,104,0)
(2434,53,0)
(227,1874,0)
(2331,2888,0)
(358,1889,0)
(2887,1991,0)
(2796,2722,0)
(126,1960,0)
(569,1972,0)
(1027,876,0)
(2398,1282,0)
(10,146,0)
(880,2492,0)
(1786,685,0)
(307,2134,0)
(2130,2256,0)
(1860,1856,0)
(2893,187,0)
(955,2519,0)
(2965,1323,0)
(1786,2222,0)
(1950,1960,0)
(1960,1088,0)
(1503,1530,0)
(1593,1467,0)
(2134,307,0)
(2120,1910,0)
(2026,2699,0)
(573,844,0)
(1698,681,0)
(2317,2755,0)
(1047,1476,0)
(2192,412,0)
(2643,503,0)
(1330,187,0)
(1822,1972,0)
(2785,1745,0)
(2152,1476,0)
(627,2272,0)
(829,881,0)
(2752,1914,0)
(1068,1534,0)
(651,1991,0)
(2320,149,0)
(2317,1530,0)
(2377,303,0)
(1315,980,0)
(1631,1442,0)
(126,2233,0)
(2650,1137,0)
(1503,1417,0)
(449,750,0)
(1556,956,0)
(1315,2755,0)
(2225,2451,0)
(422,1972,0)
(441,53,0)
(1741,1124,0)
(329,2222,0)
(2322,547,0)
(2943,2456,0)
(1363,1714,0)
(1068,11,0)
(1125,705,0)
(540,2809,0)
(2720,1388,0)
(375,1991,0)
(2607,2843,0)
(292,1991,0)
(1752,1004,0)
(2271,1692,0)
(2999,2441,0)
(2686,440,0)
(2239,1520,0)
(1578,2117,0)
(3031,977,0)
(222,2668,0)
(2271,1349,0)
(28,2239,0)
(984,1409,0)
(1315,2779,0)
(310,1700,0)
(2110,1574,0)
(1772,1433,0)
(1950,2048,0)
(2010,1476,0)
(1260,499,0)
(1314,267,0)
(2759,596,0)
(1354,1655,0)
(2964,2930,0)
(1063,2907,0)
(140,263,0)
(1315,3041,0)
(215,839,0)
(3039,1509,0)
(1780,1975,0)
(1162,107,0)
(1996,149,0)
(734,149,0)
(977,1343,0)
(1822,2233,0)
(1402,2152,0)
(2924,515,0)
(2809,1074,0)
(157,149,0)
(2271,1960,0)
(2444,2997,0)
(281,360,0)
(342,2500,0)
(1046,2230,0)
(2099,1699,0)
(117,2935,0)
(2271,1377,0)
(705,1842,0)
(354,2233,0)
(1860,149,0)
(2964,377,0)
(1238,2809,0)
(1815,2500,0)
(594,1344,0)
(2779,1736,0)
(1915,850,0)
(1822,44,0)
(902,1700,0)
(2545,2451,0)
(2010,2500,0)
(176,1634,0)
(2246,2272,0)
(844,1948,0)
(1232,137,0)
(1026,1901,0)
(2964,327,0)
(691,2650,0)
(1907,1700,0)
(876,2480,0)
(1860,545,0)
(2675,1160,0)
(613,147,0)
(2219,1147,0)
(1732,1151,0)
(117,1972,0)
(2885,99,0)
(1330,2480,0)
(2687,1734,0)
(1808,2843,0)
(876,11,0)
(215,2950,0)
(1822,1056,0)
(876,1156,0)
(1614,931,0)
(1172,3000,0)
(1124,11,0)
(1513,2082,0)
(1687,2458,0)
(1889,659,0)
(237,367,0)
(2317,2067,0)
(2356,2474,0)
(2893,3041,0)
(1835,1014,0)
(1162,1568,0)
(2659,1714,0)
(569,2447,0)
(420,1489,0)
(174,805,0)
(1533,1742,0)
(2317,2139,0)
(2809,1156,0)
(2551,2447,0)
(988,1357,0)
(1217,1901,0)
(1087,470,0)
(1460,1361,0)
(64,156,0)
(1207,2809,0)
(354,1568,0)
(2650,2614,0)
(2985,1134,0)
(1222,1972,0)
(329,1056,0)
(2828,344,0)
(780,1953,0)
(153,1991,0)
(1219,110,0)
(860,1124,0)
(957,162,0)
(126,149,0)
(354,2155,0)
(916,1577,0)
(329,1946,0)
(354,402,0)
(1838,1910,0)
(598,557,0)
(443,2128,0)
(1330,256,0)
(687,1256,0)
(1330,801,0)
(1539,826,0)
(2865,1889,0)
(1815,17,0)
(1815,2674,0)
(117,44,0)
(673,368,0)
(53,441,0)
(2907,2459,0)
(896,1534,0)
(1068,1901,0)
(2557,1991,0)
(2759,2233,0)
(2563,2553,0)
(2551,912,0)
(1565,2091,0)
(1822,1568,0)
(2320,84,0)
(410,898,0)
(286,2814,0)
(335,1445,0)
(2932,1274,0)
(667,1700,0)
(280,2385,0)
(1781,3014,0)
(2551,1417,0)
(1795,2843,0)
(1159,1692,0)
(1503,1407,0)
(2317,1692,0)
(556,2607,0)
(1477,2699,0)
(2036,1169,0)
(927,1700,0)
(2807,1160,0)
(1495,2519,0)
(849,1702,0)
(915,1991,0)
(2149,1007,0)
(2713,1013,0)
(1315,1156,0)
(2893,980,0)
(2289,1991,0)
(2119,2004,0)
(1950,2837,0)
(876,1972,0)
(357,1772,0)
(1892,1654,0)
(3034,236,0)
(1162,1056,0)
(494,2087,0)
(2130,2588,0)
(896,2699,0)
(2130,377,0)
(2785,327,0)
(1710,1135,0)
(2746,101,0)
(1860,2256,0)
(931,134,0)
(837,2681,0)
(113,1700,0)
(2271,2256,0)
(545,2238,0)
(410,1074,0)
(1268,17,0)
(1786,1568,0)
(1860,2048,0)
(1860,2067,0)
(293,1485,0)
(2061,2824,0)
(1822,2480,0)
(1482,692,0)
(2517,1470,0)
(864,362,0)
(53,2434,0)
(2109,2843,0)
(339,1178,0)
(2680,3002,0)
(1687,912,0)
(2576,1028,0)
(1815,402,0)
(1315,1137,0)
(2411,126,0)
(354,187,0)
(2893,726,0)
(1162,2519,0)
(1482,2275,0)
(1326,1875,0)
(1815,2155,0)
(1598,2777,0)
(2988,2143,0)
(1554,2128,0)
(1832,642,0)
(429,1700,0)
(2575,222,0)
(876,2447,0)
(450,2149,0)
(1822,2447,0)
(1248,1700,0)
(2317,898,0)
(2336,2997,0)
(1326,2256,0)
(2819,1899,0)
(1315,596,0)
(87,1582,0)
(2964,187,0)
(1970,810,0)
(1950,2222,0)
(931,266,0)
(2306,1934,0)
(1730,1438,0)
(1221,511,0)
(354,1013,0)
(2120,146,0)
(2650,327,0)
(2809,2155,0)
(2875,1700,0)
(593,1815,0)
(2650,2971,0)
(2551,2971,0)
(2019,1378,0)
(2010,307,0)
(1162,2222,0)
(2271,2935,0)
(2592,2128,0)
(2190,2806,0)
(526,951,0)
(836,117,0)
(2271,1417,0)
(1544,2272,0)
(839,1842,0)
(569,371,0)
(1822,472,0)
(1351,2519,0)
(1496,1700,0)
(1687,2971,0)
(58,1698,0)
(2964,2441,0)
(60,1982,0)
(470,2379,0)
(926,1476,0)
(2514,2030,0)
(211,2143,0)
(926,2519,0)
(2607,2458,0)
(1330,107,0)
(2469,2589,0)
(2893,165,0)
(668,2128,0)
(1996,2699,0)
(2441,1815,0)
(1326,2614,0)
(2556,1132,0)
(2785,2048,0)
(323,1353,0)
(1123,2872,0)
(2809,2139,0)
(344,67,0)
(1457,824,0)
(2800,1647,0)
(599,2167,0)
(841,550,0)
(400,1160,0)
(354,2588,0)
(1576,2143,0)
(2291,1700,0)
(2964,1692,0)
(1025,2379,0)
(778,840,0)
(2374,1433,0)
(1315,906,0)
(1768,402,0)
(1881,1068,0)
(2371,2514,0)
(2758,1160,0)
(863,2048,0)
(1844,760,0)
(185,1700,0)
(126,1474,0)
(796,1281,0)
(126,1901,0)
(1326,3041,0)
(1687,371,0)
(360,1160,0)
(928,2678,0)
(2964,1884,0)
(755,1311,0)
(2650,2458,0)
(386,2137,0)
(2713,1692,0)
(2236,1570,0)
(1503,801,0)
(2248,1700,0)
(1996,84,0)
(2893,1186,0)
(505,1700,0)
(346,34,0)
(1503,1186,0)
(1828,2623,0)
(2809,377,0)
(1786,1884,0)
(812,2641,0)
(2854,1700,0)
(2130,187,0)
(1162,1526,0)
(2774,1700,0)
(371,2700,0)
(266,2952,0)
(1162,906,0)
(1337,1433,0)
(1315,371,0)
(410,107,0)
(2536,2556,0)
(1889,2865,0)
(2607,2519,0)
(1815,2935,0)
(495,1742,0)
(1332,2843,0)
(516,2552,0)
(2130,2441,0)
(2388,1431,0)
(2561,2415,0)
(1041,1181,0)
(2759,2779,0)
(122,1162,0)
(194,2345,0)
(896,1686,0)
(674,741,0)
(1108,2924,0)
(2797,1104,0)
(1004,1901,0)
(1483,1490,0)
(1029,1163,0)
(1865,659,0)
(324,1357,0)
(779,2419,0)
(569,1634,0)
(410,1417,0)
(2964,912,0)
(2113,1700,0)
(496,557,0)
(238,2866,0)
(2249,2336,0)
(485,1161,0)
(2335,1088,0)
(397,2056,0)
(2271,256,0)
(2943,3000,0)
(1579,2679,0)
(590,358,0)
(911,1842,0)
(214,2367,0)
(2691,1104,0)
(742,692,0)
(2893,912,0)
(2551,545,0)
(1326,2233,0)
(410,2174,0)
(2308,1901,0)
(1330,1874,0)
(1315,2048,0)
(307,2010,0)
(2594,705,0)
(2722,2393,0)
(2964,898,0)
(2188,636,0)
(1496,643,0)
(2013,1370,0)
(1607,1991,0)
(1332,84,0)
(2215,2595,0)
(2650,1900,0)
(2116,2950,0)
(2069,1834,0)
(1687,377,0)
(2792,1736,0)
(2809,468,0)
(2526,1582,0)
(1697,2666,0)
(2255,540,0)
(2931,691,0)
(1217,2519,0)
(1950,187,0)
(1286,2690,0)
(1138,1898,0)
(239,668,0)
(2964,2067,0)
(1360,2877,0)
(617,1104,0)
(2212,2340,0)
(229,2857,0)
(1012,1985,0)
(2607,1901,0)
(265,383,0)
(567,705,0)
(2597,92,0)
(2551,84,0)
(731,2158,0)
(117,2256,0)
(1471,1858,0)
(215,503,0)
(587,2345,0)
(2154,473,0)
(2129,1700,0)
(2420,1441,0)
(1865,1815,0)
(1890,2410,0)
(1365,2272,0)
(1330,1900,0)
(2230,102,0)
(117,1974,0)
(1017,2526,0)
(1315,2943,0)
(876,1474,0)
(1027,2110,0)
(2785,1692,0)
(2367,1842,0)
(2785,2837,0)
(2604,1238,0)
(126,2174,0)
(2845,2769,0)
(589,2946,0)
(569,2971,0)
(1963,2843,0)
(564,3032,0)
(2924,876,0)
(1695,1802,0)
(2607,2256,0)
(1503,906,0)
(2867,515,0)
(3004,2699,0)
(329,1013,0)
(410,2921,0)
(1527,2699,0)
(1256,3000,0)
(1246,2607,0)
(1674,2886,0)
(1860,1745,0)
(2809,1972,0)
(2801,1906,0)
(1326,256,0)
(2409,1991,0)
(1675,671,0)
(1950,256,0)
(1202,1362,0)
(1588,105,0)
(19,2022,0)
(2269,1300,0)
(1351,84,0)
(569,1875,0)
(1439,2129,0)
(2785,1474,0)
(2607,1745,0)
(1587,1322,0)
(2607,2755,0)
(130,1991,0)
(2713,2256,0)
(1858,272,0)
(1687,187,0)
(2759,402,0)
(2759,327,0)
(3016,1842,0)
(2607,545,0)
(2809,2458,0)
(1204,2372,0)
(1944,2854,0)
(1860,107,0)
(490,640,0)
(2893,1745,0)
(1643,147,0)
(1881,1214,0)
(2271,726,0)
(1326,2067,0)
(2785,371,0)
(1822,1946,0)
(2795,1592,0)
(1815,2699,0)
(2153,1207,0)
(713,3000,0)
(2833,819,0)
(2728,2622,0)
(2675,2809,0)
(2848,2880,0)
(2785,1137,0)
(2846,1614,0)
(2130,1377,0)
(2759,1530,0)
(766,1794,0)
(2791,2167,0)
(193,2798,0)
(1259,2162,0)
(1285,1901,0)
(1887,989,0)
(1459,2410,0)
(2060,2328,0)
(1326,2971,0)
(2520,1104,0)
(366,403,0)
(2945,512,0)
(2585,1991,0)
(1503,2256,0)
(2583,1467,0)
(2924,1162,0)
(696,827,0)
(1073,2512,0)
(260,2451,0)
(362,864,0)
(655,369,0)
(1616,2830,0)
(1417,1953,0)
(329,1960,0)
(896,2512,0)
(354,2971,0)
(569,596,0)
(2755,1953,0)
(2337,2133,0)
(2195,1963,0)
(2805,1660,0)
(1521,2500,0)
(2237,1489,0)
(74,2272,0)
(1876,1183,0)
(1194,2152,0)
(159,2056,0)
(2675,2280,0)
(2010,2519,0)
(1945,2995,0)
(531,2790,0)
(2347,608,0)
(2603,2447,0)
(1869,1085,0)
(2130,1013,0)
(1503,726,0)
(92,1700,0)
(2440,2733,0)
(1162,1474,0)
(930,2786,0)
(1687,2745,0)
(2713,1974,0)
(2090,1991,0)
(1503,2155,0)
(433,2993,0)
(1074,3000,0)
(1162,2480,0)
(1815,2755,0)
(2367,2143,0)
(757,117,0)
(1066,2262,0)
(1522,384,0)
(2191,371,0)
(2650,596,0)
(2317,377,0)
(354,898,0)
(288,1263,0)
(2383,215,0)
(2130,1156,0)
(2320,2699,0)
(2773,2809,0)
(2607,1156,0)
(823,1991,0)
(1176,2296,0)
(1860,377,0)
(410,980,0)
(710,2809,0)
(1534,1250,0)
(1207,2650,0)
(1901,1991,0)
(354,1056,0)
(1786,1874,0)
(882,2720,0)
(2582,46,0)
(1162,2139,0)
(63,2375,0)
(1996,2500,0)
(1326,1874,0)
(1083,1498,0)
(2414,1654,0)
(313,977,0)
(2804,1054,0)
(2473,814,0)
(2248,722,0)
(856,1464,0)
(709,1072,0)
(1428,2150,0)
(1034,332,0)
(2139,515,0)
(1795,11,0)
(1881,1378,0)
(1407,1700,0)
(1489,2157,0)
(287,1104,0)
(148,2116,0)
(1786,2921,0)
(1950,726,0)
(91,1653,0)
(2814,1378,0)
(876,2971,0)
(1330,1972,0)
(2271,107,0)
(1228,2042,0)
(1815,187,0)
(2505,2511,0)
(1785,346,0)
(466,1658,0)
(2044,2273,0)
(1411,2574,0)
(2236,2785,0)
(1326,1474,0)
(1495,11,0)
(2635,689,0)
(13,642,0)
(354,596,0)
(104,723,0)
(2910,684,0)
(2649,3025,0)
(1351,1901,0)
(1822,685,0)
(400,111,0)
(782,1048,0)
(880,624,0)
(2130,2971,0)
(1048,1842,0)
(2258,2592,0)
(2692,2502,0)
(2271,1568,0)
(1315,1974,0)
(2317,596,0)
(2830,1238,0)
(2785,1186,0)
(1659,659,0)
(1815,1874,0)
(1285,2843,0)
(2663,359,0)
(2910,1780,0)
(2699,723,0)
(1351,1476,0)
(1736,1991,0)
(1386,930,0)
(1950,2139,0)
(1860,1884,0)
(129,2809,0)
(117,898,0)
(2152,1526,0)
(2893,1974,0)
(2710,2045,0)
(41,1516,0)
(263,2272,0)
(200,2947,0)
(569,2674,0)
(1477,2843,0)
(896,499,0)
(1815,1745,0)
(473,1173,0)
(2247,2009,0)
(329,2971,0)
(354,1884,0)
(2957,1991,0)
(569,1377,0)
(1875,2149,0)
(1642,1697,0)
(1829,17,0)
(908,1939,0)
(2317,2921,0)
(3025,1442,0)
(1268,2519,0)
(510,1859,0)
(764,2273,0)
(1907,2809,0)
(1943,840,0)
(876,2441,0)
(2130,2501,0)
(2399,624,0)
(2989,2428,0)
(1534,1506,0)
(1940,2177,0)
(1503,377,0)
(518,3015,0)
(1555,1030,0)
(340,149,0)
(1532,876,0)
(956,604,0)
(1895,2850,0)
(1840,1700,0)
(209,2809,0)
(1356,932,0)
(704,792,0)
(109,996,0)
(2997,2336,0)
(1014,46,0)
(1660,369,0)
(3025,2009,0)
(1550,2462,0)
(550,1667,0)
(2777,2972,0)
(131,876,0)
(2713,472,0)
(1490,515,0)
(3035,2167,0)
(2814,1214,0)
(562,78,0)
(2785,685,0)
(2807,959,0)
(2910,1300,0)
(2055,2519,0)
(608,2809,0)
(1833,1899,0)
(1721,1700,0)
(2764,3011,0)
(117,402,0)
(15,2861,0)
(101,2293,0)
(926,1581,0)
(2543,2128,0)
(1239,691,0)
(2893,1013,0)
(685,881,0)
(1911,1700,0)
(1935,1631,0)
(2650,726,0)
(2690,813,0)
(838,2812,0)
(2607,1530,0)
(2117,2945,0)
(1326,1692,0)
(757,1700,0)
(1279,1377,0)
(319,1534,0)
(1265,1991,0)
(1162,2588,0)
(1860,187,0)
(2628,1120,0)
(1068,1124,0)
(1822,2222,0)
(1950,2674,0)
(1224,2733,0)
(2650,2139,0)
(725,763,0)
(1472,1160,0)
(555,2773,0)
(134,1700,0)
(220,1065,0)
(2650,2779,0)
(1162,1972,0)
(2236,2759,0)
(2574,1411,0)
(429,117,0)
(702,579,0)
(1173,473,0)
(2759,1991,0)
(2809,906,0)
(2607,2139,0)
(2328,1442,0)
(1074,965,0)
(964,2246,0)
(633,681,0)
(653,1190,0)
(2551,1407,0)
(2607,256,0)
(640,2087,0)
(2535,1506,0)
(2078,1991,0)
(1298,1216,0)
(43,1721,0)
(1180,1901,0)
(1234,1137,0)
(1378,900,0)
(1987,226,0)
(2893,2779,0)
(1351,499,0)
(2961,1349,0)
(2072,1700,0)
(2955,2480,0)
(1326,2885,0)
(1068,1881,0)
(410,2614,0)
(2271,468,0)
(2650,1874,0)
(1503,1156,0)
(2809,2837,0)
(1740,2109,0)
(1860,1074,0)
(2607,2674,0)
(458,210,0)
(876,801,0)
(75,1093,0)
(1503,1972,0)
(2317,472,0)
(1860,1056,0)
(2233,3000,0)
(2042,1700,0)
(354,1377,0)
(3032,564,0)
(1859,510,0)
(2713,3041,0)
(1260,2519,0)
(2650,1745,0)
(1516,2118,0)
(303,1304,0)
(1125,503,0)
(2523,1365,0)
(1503,1349,0)
(1027,1931,0)
(969,1718,0)
(1343,1991,0)
(360,117,0)
(1618,1686,0)
(1070,2050,0)
(165,1953,0)
(354,2447,0)
(2382,2157,0)
(569,2067,0)
(2074,2688,0)
(1822,801,0)
(2133,1700,0)
(1881,137,0)
(2010,11,0)
(2631,2843,0)
(1815,1377,0)
(974,2239,0)
(1679,1648,0)
(1246,659,0)
(117,2943,0)
(117,2921,0)
(1815,110,0)
(2785,377,0)
(1056,1700,0)
(77,634,0)
(1180,499,0)
(2130,1634,0)
(1594,722,0)
(1950,545,0)
(249,46,0)
(2130,596,0)
(370,1697,0)
(210,2866,0)
(354,1186,0)
(390,1991,0)
(578,1409,0)
(820,1700,0)
(1306,2170,0)
(1330,1056,0)
(2124,2903,0)
(2248,517,0)
(2487,1072,0)
(1503,187,0)
(329,1407,0)
(489,2579,0)
(737,1873,0)
(1326,1349,0)
(1822,2943,0)
(2672,1311,0)
(1054,1840,0)
(1093,1931,0)
(384,2662,0)
(2152,2519,0)
(2652,1173,0)
(2287,1898,0)
(2779,2700,0)
(2713,2921,0)
(2954,2455,0)
(2964,402,0)
(126,187,0)
(1815,1476,0)
(2356,499,0)
(2152,1194,0)
(2833,1671,0)
(925,1326,0)
(2030,52,0)
(1394,857,0)
(2607,1692,0)
(2785,2674,0)
(2706,1996,0)
(2650,1056,0)
(2880,2848,0)
(2698,1024,0)
(342,11,0)
(1545,2270,0)
(1895,2809,0)
(380,1991,0)
(2910,792,0)
(1996,27,0)
(2130,2222,0)
(2257,2469,0)
(1798,1475,0)
(2785,1974,0)
(2294,2246,0)
(2055,1476,0)
(186,2899,0)
(368,673,0)
(1330,912,0)
(354,2441,0)
(1326,101,0)
(1503,2885,0)
(277,2883,0)
(1276,2230,0)
(2809,1748,0)
(2320,1686,0)
(2607,371,0)
(2886,1674,0)
(1477,1534,0)
(2964,1417,0)
(2759,1074,0)
(2809,3041,0)
(2974,2715,0)
(1039,1129,0)
(1477,84,0)
(410,377,0)
(1362,2272,0)
(2650,377,0)
(432,1700,0)
(2177,1940,0)
(3023,1753,0)
(1605,107,0)
(2542,776,0)
(647,1700,0)
(876,2935,0)
(2008,2013,0)
(2352,1165,0)
(433,979,0)
(1566,29,0)
(329,801,0)
(210,2415,0)
(461,2093,0)
(1330,2139,0)
(82,456,0)
(445,1162,0)
(2809,1900,0)
(2871,2950,0)
(2893,545,0)
(2893,1407,0)
(503,2143,0)
(1268,2699,0)
(2774,876,0)
(831,1174,0)
(289,705,0)
(121,516,0)
(1815,1013,0)
(2794,1657,0)
(1280,1393,0)
(503,69,0)
(1815,1634,0)
(428,1273,0)
(971,1365,0)
(2548,662,0)
(1541,2839,0)
(1815,499,0)
(354,1407,0)
(1236,457,0)
(1227,2306,0)
(939,2152,0)
(1237,8,0)
(1811,1942,0)
(1687,2048,0)
(560,1776,0)
(2123,2893,0)
(185,892,0)
(952,840,0)
(111,1823,0)
(2996,1268,0)
(371,1736,0)
(2019,1214,0)
(1778,1476,0)
(2933,1335,0)
(1950,44,0)
(1315,2930,0)
(471,266,0)
(424,403,0)
(834,860,0)
(1162,1875,0)
(1881,977,0)
(2088,1574,0)
(599,2128,0)
(1268,499,0)
(2551,1856,0)
(1186,2167,0)
(2751,357,0)
(2271,165,0)
(2509,980,0)
(1139,355,0)
(2893,2921,0)
(861,836,0)
(1996,17,0)
(2250,625,0)
(1495,1901,0)
(2714,969,0)
(1815,1974,0)
(973,221,0)
(1423,1700,0)
(2372,2272,0)
(1326,2755,0)
(1190,653,0)
(42,245,0)
(1403,2650,0)
(1950,1074,0)
(1420,600,0)
(695,1363,0)
(2723,2181,0)
(1822,2935,0)
(1236,140,0)
(410,726,0)
(1822,187,0)
(1315,107,0)
(2785,2885,0)
(1815,1534,0)
(600,1420,0)
(2631,84,0)
(2453,2451,0)
(759,59,0)
(2993,979,0)
(202,1899,0)
(2236,1335,0)
(1260,149,0)
(1110,360,0)
(1880,381,0)
(2713,2971,0)
(408,2114,0)
(354,2480,0)
(1285,1476,0)
(1794,1700,0)
(2551,1972,0)
(2192,120,0)
(1344,703,0)
(2001,713,0)
(256,2087,0)
(1786,256,0)
(682,2120,0)
(2387,2270,0)
(765,1700,0)
(1038,1612,0)
(2462,1842,0)
(2939,1991,0)
(1860,327,0)
(1912,1433,0)
(1248,2627,0)
(1822,371,0)
(1178,1170,0)
(2143,1991,0)
(1741,84,0)
(1330,2943,0)
(1506,1265,0)
(354,1972,0)
(117,1349,0)
(1330,2885,0)
(437,2619,0)
(1357,1700,0)
(2713,2480,0)
(2123,1700,0)
(1860,2588,0)
(1357,381,0)
(1860,2745,0)
(2759,468,0)
(760,2512,0)
(1150,826,0)
(2785,1377,0)
(1315,1474,0)
(2607,1534,0)
(1950,1745,0)
(1147,1220,0)
(1687,2174,0)
(2317,2971,0)
(625,2250,0)
(296,590,0)
(1438,60,0)
(374,1312,0)
(2979,2418,0)
(2809,1417,0)
(117,2067,0)
(2582,53,0)
(961,2272,0)
(2940,1700,0)
(2930,1420,0)
(2789,1686,0)
(691,1700,0)
(694,2543,0)
(1786,1074,0)
(8,1700,0)
(117,1474,0)
(2354,2256,0)
(1192,661,0)
(1950,377,0)
(776,1160,0)
(2386,933,0)
(634,77,0)
(986,1991,0)
(69,2143,0)
(2763,2866,0)
(1503,1960,0)
(1537,1574,0)
(975,1224,0)
(2881,2287,0)
(2607,2930,0)
(772,743,0)
(2475,912,0)
(926,17,0)
(2624,2219,0)
(2130,2233,0)
(264,1388,0)
(2607,1377,0)
(2893,2441,0)
(2824,2061,0)
(2964,980,0)
(1330,1349,0)
(894,2102,0)
(1803,1991,0)
(2679,1579,0)
(114,1682,0)
(1162,2837,0)
(913,856,0)
(2807,2650,0)
(2298,795,0)
(1826,2996,0)
(230,2127,0)
(653,226,0)
(1536,46,0)
(1393,2197,0)
(2893,110,0)
(1182,235,0)
(117,1056,0)
(2903,1214,0)
(2270,1991,0)
(1963,1901,0)
(3029,635,0)
(2713,2233,0)
(596,1687,0)
(810,2272,0)
(1330,1634,0)
(2271,2048,0)
(2893,2233,0)
(1658,1678,0)
(2240,2270,0)
(1795,1534,0)
(1589,80,0)
(2759,2222,0)
(142,1318,0)
(1162,1686,0)
(2385,280,0)
(1319,187,0)
(569,1156,0)
(126,2480,0)
(2618,1907,0)
(154,1911,0)
(569,906,0)
(354,1856,0)
(2109,1901,0)
(2986,2729,0)
(1680,2542,0)
(1684,1790,0)
(869,129,0)
(2345,2128,0)
(2650,1568,0)
(365,2598,0)
(2726,2247,0)
(1860,2139,0)
(1162,11,0)
(1162,2256,0)
(1786,1056,0)
(1853,229,0)
(876,84,0)
(1502,859,0)
(2130,2614,0)
(593,659,0)
(2551,1377,0)
(1794,798,0)
(3015,1468,0)
(1964,2930,0)
(2050,1789,0)
(508,1603,0)
(2713,1874,0)
(384,1700,0)
(523,1954,0)
(2964,1972,0)
(1486,327,0)
(2809,2779,0)
(2317,2480,0)
(1786,472,0)
(1162,1745,0)
(95,369,0)
(2632,3010,0)
(2648,223,0)
(400,2809,0)
(2179,1700,0)
(2832,1050,0)
(569,468,0)
(1860,685,0)
(1131,359,0)
(1958,1263,0)
(2551,1074,0)
(2871,1842,0)
(410,801,0)
(1332,2903,0)
(2271,2139,0)
(2130,2480,0)
(2823,780,0)
(1656,211,0)
(126,468,0)
(2010,1686,0)
(1326,2048,0)
(2937,989,0)
(2293,1104,0)
(703,1344,0)
(569,2155,0)
(876,327,0)
(3043,224,0)
(926,2167,0)
(2441,895,0)
(1152,426,0)
(2356,1476,0)
(3029,2024,0)
(1888,102,0)
(1503,1946,0)
(569,1900,0)
(1815,1875,0)
(1815,2174,0)
(662,2857,0)
(1231,1434,0)
(2130,3041,0)
(1611,2839,0)
(2785,1884,0)
(2964,1946,0)
(2758,2650,0)
(1411,1048,0)
(119,580,0)
(1983,2072,0)
(2964,107,0)
(995,1498,0)
(2317,912,0)
(1315,1745,0)
(2321,710,0)
(580,336,0)
(522,2924,0)
(876,107,0)
(788,2744,0)
(117,107,0)
(1147,2219,0)
(1477,1124,0)
(49,2903,0)
(2130,2048,0)
(1510,1520,0)
(1149,910,0)
(1351,1686,0)
(1379,2950,0)
(2551,1186,0)
(2607,1013,0)
(1315,2155,0)
(329,1974,0)
(126,1377,0)
(1124,1686,0)
(840,102,0)
(2010,1526,0)
(2650,107,0)
(1786,906,0)
(139,2779,0)
(541,1274,0)
(927,2512,0)
(410,2588,0)
(893,868,0)
(2387,1815,0)
(2607,499,0)
(1257,2340,0)
(2245,1996,0)
(645,1581,0)
(432,1324,0)
(2426,2123,0)
(2863,2872,0)
(2367,69,0)
(268,69,0)
(817,644,0)
(1442,1991,0)
(354,2755,0)
(1556,338,0)
(1221,630,0)
(1463,2791,0)
(2713,1407,0)
(876,2837,0)
(2759,2048,0)
(2379,470,0)
(1330,2837,0)
(1238,117,0)
(1864,295,0)
(2234,2633,0)
(1786,2256,0)
(2387,1918,0)
(2867,1700,0)
(138,2240,0)
(569,187,0)
(2791,2468,0)
(2741,2826,0)
(367,2272,0)
(1268,1124,0)
(2380,2204,0)
(1850,1700,0)
(2130,1972,0)
(1950,2755,0)
(922,1151,0)
(2271,1972,0)
(750,449,0)
(2650,2745,0)
(1385,137,0)
(1198,8,0)
(2263,1700,0)
(1815,726,0)
(553,1545,0)
(2112,1850,0)
(1877,1700,0)
(2729,1429,0)
(467,1838,0)
(3019,1991,0)
(904,927,0)
(3003,2242,0)
(1085,835,0)
(2774,515,0)
(1860,2837,0)
(213,744,0)
(1687,1856,0)
(1815,2256,0)
(2613,310,0)
(2759,1692,0)
(2343,2143,0)
(2551,402,0)
(2156,1180,0)
(1024,2143,0)
(569,1884,0)
(1687,2256,0)
(1532,1700,0)
(569,726,0)
(331,856,0)
(1698,378,0)
(2317,14,0)
(1125,2871,0)
(2907,1700,0)
(1230,2137,0)
(10,2582,0)
(1162,165,0)
(158,2024,0)
(1687,2779,0)
(1809,1162,0)
(1332,2500,0)
(1057,575,0)
(2356,1534,0)
(1687,2139,0)
(2317,1946,0)
(2470,1877,0)
(1477,149,0)
(211,2871,0)
(1789,2050,0)
(2759,1474,0)
(1860,11,0)
(2650,1974,0)
(906,2128,0)
(1950,2501,0)
(1268,920,0)
(1174,831,0)
(1326,2588,0)
(3012,560,0)
(2551,2930,0)
(1214,1378,0)
(2577,1700,0)
(410,402,0)
(2271,1474,0)
(2569,1065,0)
(647,1162,0)
(2617,1762,0)
(2756,1830,0)
(2155,1944,0)
(1170,1178,0)
(1727,2769,0)
(235,1182,0)
(926,11,0)
(126,1874,0)
(668,239,0)
(1917,2650,0)
(2512,896,0)
(529,69,0)
(1144,46,0)
(2130,165,0)
(1184,1672,0)
(302,1068,0)
(453,2466,0)
(1822,2837,0)
(2893,2943,0)
(2607,2921,0)
(2964,2588,0)
(2130,801,0)
(1878,575,0)
(2964,1634,0)
(873,117,0)
(2279,2305,0)
(2867,831,0)
(2713,2139,0)
(423,1496,0)
(902,1931,0)
(2301,1070,0)
(1002,3014,0)
(1162,912,0)
(1860,1875,0)
(2338,2771,0)
(892,1721,0)
(1326,187,0)
(2005,1987,0)
(689,210,0)
(1815,2222,0)
(2079,1124,0)
(2964,44,0)
(2935,1700,0)
(2809,44,0)
(211,69,0)
(1162,149,0)
(569,2943,0)
(285,1442,0)
(2915,1545,0)
(2127,1700,0)
(473,2128,0)
(2024,158,0)
(2405,2860,0)
(2791,1378,0)
(642,2519,0)
(1330,1946,0)
(1503,685,0)
(1652,1700,0)
(2835,2291,0)
(1098,1530,0)
(7,2229,0)
(2758,1700,0)
(2964,906,0)
(196,2052,0)
(3014,1931,0)
(1815,107,0)
(2607,377,0)
(1562,1478,0)
(2317,402,0)
(215,2143,0)
(1815,1124,0)
(1980,2116,0)
(2785,1156,0)
(977,1759,0)
(1503,898,0)
(1749,1050,0)
(2773,1700,0)
(926,1686,0)
(2010,499,0)
(2466,2650,0)
(2737,2109,0)
(126,294,0)
(117,110,0)
(2158,1842,0)
(2759,2256,0)
(2130,898,0)
(2271,1874,0)
(126,726,0)
(1907,117,0)
(602,730,0)
(1658,1201,0)
(2256,257,0)
(491,2622,0)
(2067,1732,0)
(2251,1879,0)
(2130,2943,0)
(2317,2458,0)
(1268,1526,0)
(2607,1186,0)
(354,1634,0)
(1950,2745,0)
(1162,2843,0)
(2317,371,0)
(259,2883,0)
(1258,1700,0)
(71,795,0)
(2893,1900,0)
(980,895,0)
(2584,1991,0)
(2607,1124,0)
(1068,84,0)
(1554,2921,0)
(319,1901,0)
(889,464,0)
(2860,2128,0)
(1326,2745,0)
(209,2650,0)
(675,1440,0)
(494,1953,0)
(1189,2222,0)
(2571,515,0)
(2606,2896,0)
(1953,2803,0)
(876,1874,0)
(3004,1526,0)
(297,1700,0)
(2713,1884,0)
(1860,1474,0)
(2729,2525,0)
(1809,1700,0)
(745,2686,0)
(1950,1056,0)
(2271,1156,0)
(55,201,0)
(481,2947,0)
(1458,841,0)
(1687,898,0)
(15,2167,0)
(2499,2155,0)
(1165,876,0)
(410,1884,0)
(876,596,0)
(903,111,0)
(1786,2935,0)
(2720,1700,0)
(1299,620,0)
(2085,2423,0)
(2423,158,0)
(540,1160,0)
(1380,1700,0)
(713,721,0)
(2293,442,0)
(626,2460,0)
(1004,1526,0)
(2607,1474,0)
(2809,1349,0)
(876,2500,0)
(326,1902,0)
(2317,2745,0)
(1532,1931,0)
(2893,2067,0)
(2363,2798,0)
(567,69,0)
(2300,1007,0)
(1942,1362,0)
(2701,1440,0)
(2445,2909,0)
(1564,1898,0)
(124,158,0)
(2759,545,0)
(2713,898,0)
(117,2458,0)
(2551,1013,0)
(2271,1856,0)
(1573,219,0)
(1734,2687,0)
(1370,375,0)
(117,2779,0)
(2124,1343,0)
(876,2519,0)
(352,29,0)
(505,1160,0)
(1330,2174,0)
(1917,1700,0)
(313,1324,0)
(1148,1682,0)
(2370,123,0)
(1815,1856,0)
(1996,11,0)
(329,2588,0)
(1822,2588,0)
(2650,165,0)
(412,2096,0)
(1711,1700,0)
(1545,2915,0)
(126,402,0)
(66,2287,0)
(1574,2512,0)
(2157,2382,0)
(1760,1991,0)
(2126,1281,0)
(638,534,0)
(1125,69,0)
(2467,3031,0)
(876,3041,0)
(2600,2916,0)
(131,1931,0)
(926,2616,0)
(1860,2174,0)
(2555,1700,0)
(157,2091,0)
(2341,1700,0)
(812,2577,0)
(2123,2426,0)
(2759,1874,0)
(752,1571,0)
(876,2885,0)
(2130,1530,0)
(2707,2927,0)
(2541,1160,0)
(583,137,0)
(1786,2971,0)
(1955,396,0)
(1641,2872,0)
(1130,2807,0)
(353,374,0)
(1180,2699,0)
(494,46,0)
(2817,1733,0)
(1224,1776,0)
(1838,2287,0)
(126,472,0)
(1499,2794,0)
(1124,2519,0)
(1786,1900,0)
(2872,2863,0)
(2551,2480,0)
(1330,468,0)
(2131,371,0)
(569,2930,0)
(282,1351,0)
(2317,468,0)
(2096,839,0)
(2779,2008,0)
(1815,545,0)
(528,2715,0)
(410,1875,0)
(1860,1137,0)
(2105,2659,0)
(1755,1795,0)
(429,2809,0)
(1950,2067,0)
(2281,1991,0)
(2084,2123,0)
(1266,534,0)
(1197,1209,0)
(2607,2480,0)
(1443,730,0)
(876,545,0)
(378,1105,0)
(959,2250,0)
(946,2473,0)
(410,1634,0)
(1124,499,0)
(2953,1700,0)
(2809,1056,0)
(2713,2048,0)
(1326,1137,0)
(1208,2158,0)
(2441,2270,0)
(1477,2500,0)
(503,839,0)
(2178,2558,0)
(2893,377,0)
(731,2470,0)
(1050,1749,0)
(2197,1030,0)
(934,3035,0)
(2882,910,0)
(126,1745,0)
(1871,419,0)
(1860,1013,0)
(2045,2710,0)
(1303,2518,0)
(418,2710,0)
(1330,2745,0)
(569,1745,0)
(955,1901,0)
(672,1518,0)
(1330,1407,0)
(329,2447,0)
(951,526,0)
(2964,1960,0)
(2540,2019,0)
(2578,478,0)
(1058,902,0)
(2235,1123,0)
(1764,790,0)
(1174,1700,0)
(734,2519,0)
(2152,1124,0)
(2785,165,0)
(2567,691,0)
(2701,1264,0)
(2759,1013,0)
(3040,926,0)
(342,2250,0)
(959,2807,0)
(1741,2519,0)
(652,1686,0)
(2197,1393,0)
(410,1900,0)
(1761,687,0)
(59,759,0)
(2713,1530,0)
(289,69,0)
(1162,472,0)
(2121,2179,0)
(1503,3041,0)
(1711,1217,0)
(1751,1865,0)
(1815,2837,0)
(1101,741,0)
(1315,1530,0)
(1477,375,0)
(1849,1429,0)
(330,2061,0)
(2903,2124,0)
(429,2650,0)
(2162,1259,0)
(1815,2480,0)
(2688,1284,0)
(2594,2871,0)
(1397,2809,0)
(2115,228,0)
(472,1700,0)
(1822,2155,0)
(2809,1377,0)
(1750,534,0)
(1572,1296,0)
(1918,965,0)
(2607,1074,0)
(2343,705,0)
(1471,2809,0)
(2650,1884,0)
(2525,1902,0)
(1877,2650,0)
(126,2519,0)
(876,1974,0)
(1786,187,0)
(757,2650,0)
(1403,117,0)
(2873,2434,0)
(2917,160,0)
(765,1359,0)
(1323,2965,0)
(981,1750,0)
(2330,1214,0)
(2605,2313,0)
(1326,545,0)
(876,1946,0)
(569,2745,0)
(354,2048,0)
(549,476,0)
(354,2139,0)
(1995,822,0)
(444,2909,0)
(460,2017,0)
(716,1268,0)
(1245,14,0)
(1974,366,0)
(524,1338,0)
(625,2134,0)
(667,1420,0)
(2022,1214,0)
(1503,1692,0)
(1644,2322,0)
(868,1065,0)
(2199,2035,0)
(1122,779,0)
(2166,1856,0)
(2713,377,0)
(263,140,0)
(1340,2878,0)
(61,1331,0)
(842,2809,0)
(2893,2935,0)
(1629,643,0)
(1989,440,0)
(2500,979,0)
(2981,1541,0)
(2668,2487,0)
(2713,2755,0)
(2650,906,0)
(1677,2943,0)
(354,2837,0)
(2964,545,0)
(1822,2745,0)
(2713,2174,0)
(347,351,0)
(2809,596,0)
(3001,1700,0)
(2416,494,0)
(2466,1700,0)
(886,1650,0)
(1950,1474,0)
(126,11,0)
(2161,2077,0)
(1741,17,0)
(327,1211,0)
(1790,1700,0)
(2055,1265,0)
(2659,1700,0)
(1326,2139,0)
(1577,916,0)
(642,2843,0)
(846,1049,0)
(1304,303,0)
(1745,2592,0)
(1963,11,0)
(2042,2794,0)
(1950,2447,0)
(2050,198,0)
(2964,2480,0)
(1950,1530,0)
(1950,107,0)
(126,1634,0)
(9,1013,0)
(2548,822,0)
(791,2157,0)
(410,2745,0)
(2773,555,0)
(2053,804,0)
(2908,646,0)
(4,83,0)
(2093,156,0)
(3004,1686,0)
(2152,2843,0)
(817,121,0)
(2893,44,0)
(710,2650,0)
(1315,256,0)
(926,2500,0)
(2224,172,0)
(1134,245,0)
(1866,1186,0)
(2418,2842,0)
(1330,371,0)
(122,1700,0)
(905,2727,0)
(608,117,0)
(2555,1420,0)
(644,2650,0)
(1330,596,0)
(860,84,0)
(1503,165,0)
(1471,2650,0)
(1440,675,0)
(2788,721,0)
(2759,912,0)
(1516,41,0)
(1197,2843,0)
(1326,1407,0)
(1091,652,0)
(67,918,0)
(2341,515,0)
(2010,2843,0)
(2785,2233,0)
(1816,1618,0)
(1749,301,0)
(2507,442,0)
(1799,884,0)
(162,1042,0)
(2964,801,0)
(1928,98,0)
(1330,327,0)
(1997,2675,0)
(642,1526,0)
(2964,1530,0)
(1260,1686,0)
(2593,866,0)
(126,107,0)
(2176,1207,0)
(1782,2356,0)
(2658,205,0)
(126,256,0)
(1509,876,0)
(3031,2722,0)
(1950,2930,0)
(2187,2263,0)
(410,2139,0)
(1283,2809,0)
(416,1408,0)
(2574,3016,0)
(1786,327,0)
(126,2441,0)
(354,1137,0)
(569,107,0)
(2789,1526,0)
(1517,2057,0)
(329,1634,0)
(604,1597,0)
(2893,1875,0)
(1162,980,0)
(2389,1991,0)
(1353,857,0)
(2207,2826,0)
(1315,685,0)
(1238,1700,0)
(2759,2837,0)
(2425,969,0)
(2599,916,0)
(2759,2447,0)
(1103,596,0)
(329,1074,0)
(2814,137,0)
(2909,2167,0)
(2809,1875,0)
(569,2779,0)
(1495,84,0)
(1773,1253,0)
(734,17,0)
(126,3041,0)
(2893,1056,0)
(2320,1901,0)
(1124,2500,0)
(329,3041,0)
(2657,1404,0)
(1786,1013,0)
(368,1332,0)
(1503,327,0)
(1797,593,0)
(1956,1991,0)
(1424,777,0)
(2218,1617,0)
(1674,820,0)
(219,1770,0)
(1741,11,0)
(1815,1900,0)
(2789,2843,0)
(1786,1856,0)
(391,2918,0)
(1162,256,0)
(2551,165,0)
(354,1692,0)
(1285,499,0)
(628,1450,0)
(1012,310,0)
(1503,2458,0)
(1687,2755,0)
(856,2272,0)
(1778,1534,0)
(1762,923,0)
(1838,146,0)
(1301,2571,0)
(1922,2880,0)
(1687,2067,0)
(1822,545,0)
(2650,685,0)
(53,2167,0)
(1351,1581,0)
(2607,44,0)
(52,2030,0)
(2204,463,0)
(1124,1901,0)
(1722,628,0)
(211,1842,0)
(1815,165,0)
(2785,110,0)
(2130,2935,0)
(1326,44,0)
(329,2256,0)
(2438,1789,0)
(2343,2871,0)
(1285,2500,0)
(2188,1365,0)
(2964,1875,0)
(1950,2935,0)
(1954,2997,0)
(876,2699,0)
(1391,1991,0)
(117,2588,0)
(2759,2943,0)
(1822,2067,0)
(1815,468,0)
(2580,2642,0)
(970,157,0)
(329,2745,0)
(2848,3002,0)
(1884,1700,0)
(557,496,0)
(2893,1156,0)
(1330,1074,0)
(1331,1700,0)
(1326,1417,0)
(1503,2588,0)
(2013,2008,0)
(284,2502,0)
(3011,1960,0)
(2833,2519,0)
(2040,1700,0)
(673,1991,0)
(955,1336,0)
(590,2650,0)
(1843,1842,0)
(357,3009,0)
(1238,1160,0)
(329,2067,0)
(1973,658,0)
(2305,223,0)
(2394,1700,0)
(519,999,0)
(2713,2155,0)
(1660,2115,0)
(527,53,0)
(117,2971,0)
(2552,1576,0)
(2152,11,0)
(2785,2155,0)
(418,2660,0)
(1809,876,0)
(2396,433,0)
(476,549,0)
(2964,371,0)
(1786,912,0)
(2785,1637,0)
(535,1361,0)
(658,1686,0)
(567,2950,0)
(2152,1686,0)
(2098,991,0)
(1096,433,0)
(1437,4,0)
(99,575,0)
(818,991,0)
(1503,2943,0)
(2028,1059,0)
(1036,1939,0)
(2631,1124,0)
(2777,223,0)
(2006,2988,0)
(1264,2701,0)
(1963,1476,0)
(1860,1417,0)
(2713,726,0)
(1224,1442,0)
(1162,726,0)
(157,2843,0)
(1503,2139,0)
(876,2048,0)
(2773,117,0)
(569,2458,0)
(2700,1896,0)
(956,2997,0)
(163,2072,0)
(2719,135,0)
(1851,1361,0)
(767,1559,0)
(2607,11,0)
(1860,2699,0)
(1330,2614,0)
(775,1353,0)
(2759,377,0)
(239,1700,0)
(2809,1634,0)
(2382,1991,0)
(1498,2948,0)
(2271,2067,0)
(2483,1982,0)
(2661,124,0)
(1297,2885,0)
(2174,2964,0)
(2893,2588,0)
(399,1265,0)
(569,1407,0)
(2250,959,0)
(2785,1013,0)
(1815,1137,0)
(2130,2921,0)
(2327,1214,0)
(2492,2525,0)
(2551,2843,0)
(2252,342,0)
(1822,2256,0)
(2964,2745,0)
(410,1349,0)
(1687,906,0)
(569,1946,0)
(1860,1946,0)
(1408,416,0)
(1691,2555,0)
(1528,1700,0)
(1591,2946,0)
(503,705,0)
(1872,52,0)
(2964,256,0)
(156,2093,0)
(2607,2745,0)
(2921,2075,0)
(569,1137,0)
(1978,2860,0)
(1105,378,0)
(887,876,0)
(958,2492,0)
(786,1201,0)
(1332,499,0)
(801,2860,0)
(2607,472,0)
(1105,235,0)
(1435,983,0)
(1985,3009,0)
(780,57,0)
(1218,268,0)
(402,1700,0)
(357,2984,0)
(1043,1974,0)
(860,2699,0)
(2759,165,0)
(818,52,0)
(538,223,0)
(2551,2699,0)
(2834,689,0)
(329,1900,0)
(2631,2500,0)
(935,494,0)
(911,2815,0)
(1081,1991,0)
(848,301,0)
(2551,1884,0)
(1839,1991,0)
(860,17,0)
(366,2996,0)
(2853,1473,0)
(2782,122,0)
(28,1259,0)
(1315,2614,0)
(1786,2837,0)
(1195,210,0)
(2893,2930,0)
(2341,1162,0)
(2271,545,0)
(665,1700,0)
(1860,499,0)
(356,1263,0)
(1311,755,0)
(2094,1322,0)
(1976,1874,0)
(839,2143,0)
(1860,84,0)
(1972,1700,0)
(1260,1124,0)
(2010,1124,0)
(852,1749,0)
(2843,2460,0)
(69,1842,0)
(976,1503,0)
(569,110,0)
(2833,1686,0)
(608,1700,0)
(1326,1568,0)
(2921,1554,0)
(2130,2155,0)
(1044,2940,0)
(1277,1089,0)
(1254,165,0)
(2759,2885,0)
(1495,17,0)
(2729,2883,0)
(2303,2650,0)
(2809,1960,0)
(1968,426,0)
(624,2415,0)
(2893,2048,0)
(1180,1124,0)
(50,2321,0)
(2320,499,0)
(2241,2406,0)
(96,1802,0)
(693,1991,0)
(280,1340,0)
(131,1162,0)
(8,2512,0)
(2607,2174,0)
(1845,2146,0)
(1316,1120,0)
(80,1589,0)
(919,294,0)
(1362,1942,0)
(2634,223,0)
(2631,2699,0)
(2367,3006,0)
(129,1700,0)
(827,1950,0)
(550,841,0)
(2267,114,0)
(354,2921,0)
(2893,2837,0)
(2696,1700,0)
(1359,1991,0)
(1950,1874,0)
(1207,1700,0)
(2003,1554,0)
(2090,1296,0)
(1322,1587,0)
(584,1657,0)
(413,1300,0)
(902,876,0)
(2809,2067,0)
(1927,2385,0)
(354,107,0)
(1899,3003,0)
(569,1349,0)
(2317,545,0)
(2923,835,0)
(830,445,0)
(1990,2272,0)
(1370,2013,0)
(117,2755,0)
(2833,1901,0)
(2109,122,0)
(160,1709,0)
(2230,1953,0)
(1124,2843,0)
(156,64,0)
(2259,1125,0)
(253,1378,0)
(2791,137,0)
(329,2837,0)
(2650,187,0)
(2294,2111,0)
(2785,2222,0)
(1967,1442,0)
(2571,876,0)
(2594,2143,0)
(1326,371,0)
(2861,1703,0)
(1162,499,0)
(1802,95,0)
(354,726,0)
(2713,1745,0)
(2295,640,0)
(175,2982,0)
(2998,78,0)
(117,2930,0)
(410,1874,0)
(1478,2859,0)
(1600,2543,0)
(1503,2779,0)
(979,979,0)
(1332,1534,0)
(679,297,0)
(1330,1692,0)
(943,1169,0)
(860,1686,0)
(505,1485,0)
(2192,2542,0)
(189,1865,0)
(2530,876,0)
(1315,1056,0)
(627,845,0)
(1,1991,0)
(2427,2803,0)
(760,1700,0)
(774,2226,0)
(410,2447,0)
(354,377,0)
(2607,110,0)
(80,1700,0)
(1338,1188,0)
(2759,1156,0)
(2456,752,0)
(126,110,0)
(126,2614,0)
(2117,1578,0)
(1815,2139,0)
(1805,1895,0)
(2216,2272,0)
(399,2296,0)
(917,2241,0)
(692,1700,0)
(410,2256,0)
(926,818,0)
(860,1526,0)
(2551,2885,0)
(569,801,0)
(2356,17,0)
(1129,671,0)
(1251,1555,0)
(222,1442,0)
(1344,2272,0)
(1950,685,0)
(2551,1349,0)
(209,1700,0)
(2607,2614,0)
(2858,1067,0)
(2713,2067,0)
(862,822,0)
(2862,839,0)
(2607,912,0)
(126,327,0)
(836,1700,0)
(3004,2500,0)
(603,1982,0)
(1283,117,0)
(410,2480,0)
(2008,2626,0)
(1923,499,0)
(2678,1142,0)
(2946,149,0)
(2820,1221,0)
(1659,2270,0)
(876,685,0)
(1042,487,0)
(652,1901,0)
(933,1216,0)
(2650,2620,0)
(1860,44,0)
(2804,186,0)
(1610,2899,0)
(126,2458,0)
(1514,898,0)
(2964,2885,0)
(1746,2914,0)
(539,34,0)
(2551,17,0)
(1786,2048,0)
(496,1581,0)
(1484,970,0)
(623,2341,0)
(2055,1901,0)
(2500,2993,0)
(2230,1700,0)
(2220,119,0)
(2893,1874,0)
(1229,1795,0)
(876,35,0)
(2785,107,0)
(1094,2679,0)
(2010,1534,0)
(1687,2930,0)
(1786,1377,0)
(2809,2222,0)
(547,1700,0)
(497,503,0)
(2853,2663,0)
(2189,2096,0)
(1786,1407,0)
(1315,2458,0)
(2988,1842,0)
(1162,1530,0)
(1037,2111,0)
(876,468,0)
(1815,2441,0)
(1846,267,0)
(1815,371,0)
(569,1530,0)
(2547,2155,0)
(1815,1417,0)
(1687,1946,0)
(1921,1539,0)
(647,876,0)
(1330,1960,0)
(1953,1896,0)
(2573,1262,0)
(1907,1160,0)
(224,2663,0)
(569,1692,0)
(2082,2143,0)
(963,710,0)
(2767,906,0)
(2650,898,0)
(1048,1411,0)
(1473,1948,0)
(2946,1526,0)
(2790,1183,0)
(790,1481,0)
(1950,468,0)
(631,989,0)
(1332,1476,0)
(150,473,0)
(2397,652,0)
(505,2809,0)
(1904,661,0)
(411,1477,0)
(10,2287,0)
(341,2648,0)
(2379,1025,0)
(1307,1380,0)
(375,1477,0)
(2892,1840,0)
(530,1659,0)
(354,165,0)
(117,726,0)
(157,17,0)
(1547,2343,0)
(1815,1186,0)
(1092,2573,0)
(1631,2816,0)
(2964,2614,0)
(1429,2866,0)
(2442,1856,0)
(1162,1974,0)
(948,1589,0)
(283,1850,0)
(569,2256,0)
(2642,2580,0)
(2551,1960,0)
(1040,2470,0)
(126,17,0)
(1687,1137,0)
(1195,2415,0)
(1617,2330,0)
(1180,592,0)
(1860,1407,0)
(2572,1545,0)
(2055,1534,0)
(647,515,0)
(2650,2256,0)
(2964,2233,0)
(2785,2930,0)
(1068,2500,0)
(2551,1156,0)
(876,1124,0)
(1992,1248,0)
(876,2155,0)
(122,2109,0)
(1824,3005,0)
(600,1700,0)
(569,2139,0)
(2516,1582,0)
(410,110,0)
(1952,2143,0)
(932,1700,0)
(1332,1901,0)
(2968,2179,0)
(2271,1900,0)
(2650,1634,0)
(2271,1074,0)
(1822,1186,0)
(1583,146,0)
(354,545,0)
(1840,1054,0)
(410,2779,0)
(750,645,0)
(2650,1530,0)
(1330,1875,0)
(1669,1877,0)
(683,237,0)
(115,1559,0)
(1583,1910,0)
(2130,1692,0)
(1330,165,0)
(1315,1874,0)
(2864,487,0)
(1504,1759,0)
(691,2931,0)
(112,1729,0)
(463,445,0)
(2607,1476,0)
(363,1840,0)
(2910,1200,0)
(2551,2935,0)
(1180,11,0)
(569,165,0)
(2844,1809,0)
(2366,534,0)
(2781,1700,0)
(410,1156,0)
(315,1989,0)
(2809,1013,0)
(1162,1856,0)
(2631,2519,0)
(257,1589,0)
(813,1532,0)
(117,327,0)
(2283,215,0)
(734,11,0)
(430,2819,0)
(2930,1700,0)
(2504,2347,0)
(475,1566,0)
(1576,1842,0)
(2607,1526,0)
(1620,1700,0)
(126,545,0)
(78,303,0)
(1042,162,0)
(2070,600,0)
(1815,256,0)
(222,2733,0)
(2304,313,0)
(1687,2935,0)
(2881,1910,0)
(2650,1856,0)
(2964,1568,0)
(1860,898,0)
(2065,1474,0)
(487,1042,0)
(2893,906,0)
(2785,1972,0)
(1326,1156,0)
(2809,2441,0)
(567,839,0)
(1682,2713,0)
(354,472,0)
(1180,1526,0)
(107,2128,0)
(811,1362,0)
(1687,980,0)
(577,2943,0)
(179,1556,0)
(2809,1884,0)
(18,692,0)
(2343,1842,0)
(918,67,0)
(2317,1745,0)
(1687,327,0)
(1129,734,0)
(2564,2503,0)
(900,1378,0)
(2713,596,0)
(2785,898,0)
(1822,906,0)
(2784,2880,0)
(2594,69,0)
(1380,1307,0)
(329,596,0)
(1822,107,0)
(357,759,0)
(569,898,0)
(200,1700,0)
(126,898,0)
(74,1789,0)
(266,471,0)
(109,2487,0)
(1709,160,0)
(199,1559,0)
(569,1974,0)
(1860,1186,0)
(2332,79,0)
(2713,110,0)
(1136,1584,0)
(1326,1530,0)
(2146,1223,0)
(464,1403,0)
(807,494,0)
(211,2950,0)
(1348,583,0)
(1475,418,0)
(2883,2866,0)
(2317,906,0)
(167,719,0)
(48,2314,0)
(126,685,0)
(1093,876,0)
(2317,1568,0)
(329,187,0)
(2320,2843,0)
(976,2141,0)
(478,3033,0)
(1281,1700,0)
(2993,1541,0)
(1683,2525,0)
(2423,2763,0)
(1262,2573,0)
(2996,366,0)
(2196,611,0)
(2662,384,0)
(691,2809,0)
(2118,1516,0)
(289,1842,0)
(1895,1160,0)
(697,547,0)
(202,2668,0)
(354,1530,0)
(2120,2582,0)
(2650,2233,0)
(1687,1056,0)
(2129,2375,0)
(2899,95,0)
(734,1686,0)
(2550,555,0)
(2511,2621,0)
(131,515,0)
(2152,84,0)
(1197,1686,0)
(2607,1686,0)
(926,1901,0)
(1727,1363,0)
(1432,79,0)
(2463,472,0)
(1481,790,0)
(2368,172,0)
(261,979,0)
(1351,2699,0)
(1315,2067,0)
(1743,2662,0)
(1209,895,0)
(2134,1373,0)
(2022,1378,0)
(131,517,0)
(90,998,0)
(1686,658,0)
(1622,1991,0)
(2650,980,0)
(2819,894,0)
(1815,801,0)
(2757,1421,0)
(1182,540,0)
(640,47,0)
(2629,956,0)
(2842,2418,0)
(1330,2779,0)
(780,3000,0)
(1687,44,0)
(2250,342,0)
(2969,734,0)
(1822,402,0)
(361,11,0)
(2946,1901,0)
(2785,2745,0)
(2809,1186,0)
(1330,2447,0)
(2713,2614,0)
(2848,1581,0)
(198,2050,0)
(2334,80,0)
(1315,1013,0)
(814,1582,0)
(2759,1634,0)
(329,1349,0)
(1423,819,0)
(2055,1526,0)
(896,1476,0)
(1950,402,0)
(956,1556,0)
(619,1991,0)
(2010,17,0)
(3020,1216,0)
(1579,1700,0)
(567,2871,0)
(1626,1407,0)
(1124,1450,0)
(319,1686,0)
(1141,2216,0)
(2809,2930,0)
(1795,950,0)
(1322,1700,0)
(2130,2745,0)
(2791,1214,0)
(906,410,0)
(1087,2197,0)
(126,1013,0)
(1481,744,0)
(588,1232,0)
(1468,1214,0)
(2162,1736,0)
(129,2650,0)
(2809,187,0)
(1261,1952,0)
(126,1856,0)
(2106,567,0)
(2963,1315,0)
(1477,1901,0)
(1068,1526,0)
(329,1156,0)
(126,912,0)
(1257,2272,0)
(378,550,0)
(2271,685,0)
(929,297,0)
(410,1377,0)
(2035,1900,0)
(1503,110,0)
(342,17,0)
(1786,1349,0)
(1512,2789,0)
(383,1991,0)
(2818,268,0)
(743,27,0)
(569,1874,0)
(1315,1634,0)
(583,1348,0)
(98,566,0)
(1902,2525,0)
(876,2755,0)
(457,1307,0)
(1930,1700,0)
(2650,2067,0)
(1645,721,0)
(1381,2112,0)
(1967,1067,0)
(1950,1377,0)
(126,499,0)
(1458,961,0)
(2677,2466,0)
(1984,1770,0)
(2594,839,0)
(2118,2272,0)
(1590,2177,0)
(2130,1974,0)
(2785,1417,0)
(1815,1526,0)
(401,2781,0)
(1530,2087,0)
(2712,2387,0)
(1950,371,0)
(2948,1498,0)
(908,1575,0)
(2574,50,0)
(590,1700,0)
(1162,1349,0)
(872,1370,0)
(157,1265,0)
(2529,35,0)
(146,777,0)
(1093,1844,0)
(336,1285,0)
(1185,517,0)
(1287,1834,0)
(2711,526,0)
(2741,2053,0)
(781,4,0)
(2551,2233,0)
(2466,117,0)
(605,494,0)
(1185,2621,0)
(2097,2274,0)
(3004,1534,0)
(1086,408,0)
(10,2637,0)
(184,634,0)
(1800,122,0)
(2651,1991,0)
(2964,2458,0)
(2406,2241,0)
(1950,912,0)
(684,1991,0)
(1315,1856,0)
(2341,1931,0)
(2271,898,0)
(2976,2972,0)
(2551,2441,0)
(642,1901,0)
(2785,906,0)
(2551,2139,0)
(2953,1160,0)
(565,655,0)
(1836,710,0)
(354,2935,0)
(1180,84,0)
(1326,327,0)
(719,1700,0)
(338,1556,0)
(2759,1974,0)
(2147,195,0)
(2213,2668,0)
(569,256,0)
(1024,69,0)
(1468,303,0)
(354,1900,0)
(1361,1851,0)
(1264,2186,0)
(2679,82,0)
(124,2763,0)
(1200,2502,0)
(1030,2197,0)
(1070,1506,0)
(1461,2637,0)
(2577,812,0)
(1950,2233,0)
(2033,1991,0)
(410,2935,0)
(2243,2881,0)
(1126,1822,0)
(1503,1884,0)
(2607,1417,0)
(1335,1910,0)
(838,1207,0)
(1618,2519,0)
(2614,876,0)
(3032,2056,0)
(3014,876,0)
(343,1528,0)
(2317,107,0)
(1235,1114,0)
(329,2943,0)
(1860,2458,0)
(410,327,0)
(1330,906,0)
(2925,2685,0)
(354,980,0)
(1950,110,0)
(1882,2774,0)
(1620,2472,0)
(734,2896,0)
(196,1700,0)
(1197,1526,0)
(354,3041,0)
(2869,1397,0)
(1778,1526,0)
(2317,2441,0)
(1019,2370,0)
(2402,2556,0)
(1652,2195,0)
(2833,2843,0)
(2713,1856,0)
(2607,2885,0)
(713,2001,0)
(410,2155,0)
(402,2690,0)
(1506,1913,0)
(5,1991,0)
(1477,137,0)
(1407,1363,0)
(876,2745,0)
(860,499,0)
(354,1974,0)
(1285,1686,0)
(1334,2579,0)
(354,912,0)
(2428,1700,0)
(907,2623,0)
(268,1842,0)
(2317,1960,0)
(2964,2048,0)
(1401,338,0)
(2271,1974,0)
(2077,1700,0)
(2431,534,0)
(1860,2921,0)
(416,1700,0)
(2759,1349,0)
(2980,2995,0)
(2807,2809,0)
(409,1581,0)
(1326,402,0)
(2773,1160,0)
(126,1526,0)
(926,2699,0)
(2809,2971,0)
(705,69,0)
(1559,1700,0)
(2755,3000,0)
(2010,149,0)
(2822,1417,0)
(557,1700,0)
(2607,2048,0)
(1503,2971,0)
(1950,165,0)
(117,1884,0)
(1503,2614,0)
(86,312,0)
(215,705,0)
(875,4,0)
(671,876,0)
(2556,1201,0)
(2343,503,0)
(2731,1700,0)
(551,1649,0)
(2341,876,0)
(2881,146,0)
(321,2530,0)
(2236,1583,0)
(2407,1209,0)
(1155,1421,0)
(1166,2866,0)
(818,926,0)
(2524,2415,0)
(1048,69,0)
(23,1991,0)
(2759,2755,0)
(2951,1169,0)
(2964,1137,0)
(2687,2881,0)
(186,2804,0)
(2152,3000,0)
(2271,2745,0)
(876,1349,0)
(2170,10,0)
(145,873,0)
(1751,3001,0)
(528,2024,0)
(2217,103,0)
(2893,2458,0)
(2759,1946,0)
(2004,1700,0)
(1114,1379,0)
(1162,1013,0)
(2187,1647,0)
(126,1692,0)
(2317,187,0)
(1687,2447,0)
(2871,839,0)
(876,402,0)
(1822,1960,0)
(669,2964,0)
(1815,2930,0)
(2713,187,0)
(2972,2777,0)
(224,1526,0)
(2753,1846,0)
(2109,2737,0)
(2130,1137,0)
(2330,1378,0)
(2609,868,0)
(1631,1935,0)
(1860,1900,0)
(1662,3005,0)
(354,371,0)
(2034,240,0)
(1033,1165,0)
(2551,2256,0)
(2964,2447,0)
(969,2705,0)
(1497,1898,0)
(2148,2385,0)
(2551,11,0)
(329,2935,0)
(2759,1884,0)
(626,1842,0)
(1870,932,0)
(1787,150,0)
(2673,2294,0)
(1118,80,0)
(876,1417,0)
(2686,1700,0)
(1950,1856,0)
(2186,1264,0)
(992,2480,0)
(1848,858,0)
(2631,149,0)
(1893,804,0)
(1603,876,0)
(2381,1137,0)
(2809,110,0)
(126,2588,0)
(59,1518,0)
(705,2143,0)
(1503,1874,0)
(2317,1856,0)
(734,1901,0)
(2551,685,0)
(257,1454,0)
(2593,1700,0)
(354,1946,0)
(2727,905,0)
(2759,1137,0)
(2271,2588,0)
(1815,2395,0)
(2347,1667,0)
(2785,472,0)
(297,2681,0)
(1001,1905,0)
(1960,3011,0)
(1503,2674,0)
(2130,2139,0)
(977,1404,0)
(770,2256,0)
(2238,1898,0)
(342,84,0)
(3005,1662,0)
(912,1700,0)
(894,2766,0)
(2317,1186,0)
(1326,2935,0)
(1916,211,0)
(2607,2222,0)
(954,977,0)
(68,2280,0)
(2893,2674,0)
(1678,1517,0)
(1332,1526,0)
(2271,2779,0)
(1903,2129,0)
(53,2582,0)
(329,906,0)
(166,580,0)
(3004,1124,0)
(150,355,0)
(1330,377,0)
(2025,200,0)
(2137,391,0)
(876,1900,0)
(1048,2143,0)
(1860,2755,0)
(2785,1568,0)
(1330,2067,0)
(119,158,0)
(385,2379,0)
(1268,1686,0)
(1268,149,0)
(1786,596,0)
(533,860,0)
(1427,351,0)
(2909,2128,0)
(228,1700,0)
(204,2971,0)
(126,2779,0)
(2317,2256,0)
(2375,2129,0)
(1260,1750,0)
(839,69,0)
(2893,2745,0)
(1352,1433,0)
(746,1991,0)
(2002,2072,0)
(2273,764,0)
(2522,3025,0)
(517,2248,0)
(173,780,0)
(1285,1750,0)
(499,832,0)
(1822,327,0)
(1124,17,0)
(599,223,0)
(2503,2564,0)
(2364,1991,0)
(1330,1568,0)
(2722,1686,0)
(2530,515,0)
(1495,2500,0)
(513,260,0)
(354,906,0)
(821,1246,0)
(667,2326,0)
(126,2256,0)
(1073,1538,0)
(2826,2272,0)
(4,1437,0)
(2610,2950,0)
(2607,2067,0)
(2924,1931,0)
(1939,2582,0)
(2715,2866,0)
(236,2744,0)
(245,1134,0)
(1207,838,0)
(117,2233,0)
(2759,44,0)
(544,2174,0)
(2244,1991,0)
(431,911,0)
(1585,757,0)
(107,223,0)
(840,1898,0)
(533,2273,0)
(2320,1534,0)
(537,2427,0)
(2518,1303,0)
(902,515,0)
(2759,1407,0)
(1815,149,0)
(126,1534,0)
(2809,2480,0)
(1603,1162,0)
(202,2733,0)
(1837,1452,0)
(2037,1939,0)
(1503,545,0)
(2481,104,0)
(1162,187,0)
(1574,1700,0)
(2865,2313,0)
(1225,1395,0)
(2785,1946,0)
(2124,977,0)
(371,28,0)
(3004,1901,0)
(2809,256,0)
(1687,256,0)
(1315,2588,0)
(1285,336,0)
(1662,225,0)
(2705,1378,0)
(1786,801,0)
(689,2525,0)
(2713,468,0)
(1786,1530,0)
(757,1160,0)
(475,2984,0)
(1687,1568,0)
(1804,456,0)
(808,640,0)
(2785,801,0)
(475,2009,0)
(757,456,0)
(845,1649,0)
(367,237,0)
(1809,515,0)
(1801,1579,0)
(991,2884,0)
(2591,1311,0)
(1682,114,0)
(2893,1377,0)
(1738,345,0)
(2913,3006,0)
(2713,1074,0)
(876,1901,0)
(427,1991,0)
(2766,894,0)
(1786,2614,0)
(1717,2843,0)
(1490,1162,0)
(473,983,0)
(828,1028,0)
(2964,2139,0)
(410,1972,0)
(1716,2713,0)
(2941,1609,0)
(2000,1414,0)
(2960,2731,0)
(329,726,0)
(2855,35,0)
(2568,2022,0)
(1403,1160,0)
(1224,1899,0)
(126,84,0)
(1330,685,0)
(1387,1991,0)
(1315,1900,0)
(2222,2130,0)
(2580,1700,0)
(2508,1794,0)
(1950,1972,0)
(360,86,0)
(2722,1476,0)
(1762,126,0)
(2541,2809,0)
(1165,1700,0)
(1477,1378,0)
(1285,17,0)
(2899,2621,0)
(126,2943,0)
(1471,117,0)
(1786,377,0)
(172,2451,0)
(2209,1073,0)
(503,2871,0)
(1815,1074,0)
(1446,1331,0)
(8,722,0)
(2357,2642,0)
(1860,2222,0)
(84,1324,0)
(2393,2722,0)
(522,2731,0)
(2785,187,0)
(1950,2174,0)
(299,319,0)
(955,1686,0)
(1687,1972,0)
(2964,1377,0)
(569,2837,0)
(2271,1013,0)
(2551,1137,0)
(2815,911,0)
(620,2726,0)
(2759,898,0)
(493,685,0)
(329,1417,0)
(1860,1634,0)
(1904,1509,0)
(2878,2466,0)
(1687,472,0)
(701,2128,0)
(1815,1972,0)
(494,1700,0)
(874,2241,0)
(3021,2423,0)
(1917,1962,0)
(207,2885,0)
(2071,2558,0)
(759,690,0)
(2884,1953,0)
(2737,2053,0)
(1328,3013,0)
(1275,1679,0)
(1950,2588,0)
(328,2754,0)
(2726,620,0)
(2946,1686,0)
(1495,499,0)
(1950,980,0)
(329,1568,0)
(1366,1711,0)
(329,545,0)
(410,906,0)
(836,1160,0)
(1065,1700,0)
(892,1586,0)
(2607,1056,0)
(1815,1692,0)
(1168,773,0)
(1815,327,0)
(1206,209,0)
(385,1774,0)
(303,534,0)
(705,839,0)
(538,2128,0)
(879,1180,0)
(1815,44,0)
(2696,1931,0)
(1548,2848,0)
(1931,2696,0)
(876,1960,0)
(1766,1520,0)
(1162,545,0)
(2889,2571,0)
(2602,224,0)
(2466,1160,0)
(1741,1534,0)
(1526,224,0)
(1089,69,0)
(2650,1960,0)
(53,223,0)
(2745,2503,0)
(2317,1884,0)
(685,2167,0)
(2607,898,0)
(1822,1137,0)
(2867,876,0)
(1062,1991,0)
(2713,2458,0)
(2541,1076,0)
(2809,2921,0)
(290,1773,0)
(705,910,0)
(38,1511,0)
(950,1795,0)
(896,84,0)
(117,1946,0)
(2631,1526,0)
(342,1686,0)
(2808,256,0)
(2950,1842,0)
(410,1692,0)
(1503,1856,0)
(1324,313,0)
(2158,69,0)
(2077,2809,0)
(2993,3008,0)
(2785,2779,0)
(2774,1162,0)
(2397,2553,0)
(2946,11,0)
(2759,2971,0)
(2607,165,0)
(2705,969,0)
(2022,137,0)
(1479,1658,0)
(337,1991,0)
(1651,917,0)
(1014,1835,0)
(1586,2589,0)
(1778,149,0)
(1332,1124,0)
(1786,1692,0)
(1619,1059,0)
(1132,2556,0)
(593,123,0)
(1687,2480,0)
(1687,801,0)
(1568,3000,0)
(168,1991,0)
(2236,1326,0)
(2785,2447,0)
(2319,416,0)
(2607,2779,0)
(1657,2794,0)
(2809,685,0)
(251,301,0)
(2759,2155,0)
(866,2274,0)
(3014,1162,0)
(117,1417,0)
(1776,560,0)
(221,2272,0)
(686,1991,0)
(2317,2885,0)
(1815,1056,0)
(2702,209,0)
(2607,107,0)
(998,90,0)
(2650,110,0)
(2893,898,0)
(2551,898,0)
(3004,2848,0)
(1326,1056,0)
(2713,2745,0)
(865,2455,0)
(1659,2915,0)
(1258,1940,0)
(329,2174,0)
(2898,1982,0)
(329,2755,0)
(2785,402,0)
(909,210,0)
(1786,1417,0)
(2035,1700,0)
(2650,1474,0)
(2754,1700,0)
(1326,726,0)
(1503,2067,0)
(2713,2588,0)
(1339,2222,0)
(1283,1160,0)
(841,1458,0)
(1464,856,0)
(154,1603,0)
(1060,1532,0)
(855,1487,0)
(569,44,0)
(1815,2943,0)
(2964,1156,0)
(1438,1730,0)
(1501,2754,0)
(62,1302,0)
(1571,2532,0)
(1609,336,0)
(2559,1952,0)
(1900,2035,0)
(2551,980,0)
(288,3003,0)
(1340,280,0)
(1687,685,0)
(3026,1780,0)
(2612,86,0)
(1633,795,0)
(825,776,0)
(860,1265,0)
(739,2965,0)
(334,2167,0)
(2650,2048,0)
(236,2713,0)
(1884,722,0)
(1687,1407,0)
(978,2663,0)
(2914,2336,0)
(689,2635,0)
(1371,665,0)
(126,980,0)
(2777,366,0)
(354,2614,0)
(2130,1417,0)
(1815,472,0)
(1741,149,0)
(79,1432,0)
(1162,1186,0)
(2867,1162,0)
(1009,2067,0)
(2082,1842,0)
(452,2727,0)
(1715,1246,0)
(1532,813,0)
(759,357,0)
(1985,1772,0)
(1815,685,0)
(1770,219,0)
(1260,2843,0)
(1466,304,0)
(1860,3041,0)
(860,1476,0)
(2906,912,0)
(3004,2843,0)
(2580,2650,0)
(1860,165,0)
(215,2871,0)
(2740,1770,0)
(196,2650,0)
(1260,1901,0)
(2554,2785,0)
(2109,17,0)
(1309,380,0)
(1560,57,0)
(1457,2530,0)
(567,2143,0)
(2785,1634,0)
(3014,1781,0)
(3013,1700,0)
(2455,2954,0)
(1557,1709,0)
(273,647,0)
(1143,349,0)
(118,818,0)
(3035,549,0)
(2061,1700,0)
(983,473,0)
(2010,2699,0)
(1509,515,0)
(2148,1396,0)
(1487,723,0)
(1737,1991,0)
(1481,1898,0)
(1687,2614,0)
(122,515,0)
(2341,2135,0)
(342,2699,0)
(550,378,0)
(2666,1454,0)
(1938,119,0)
(2152,1953,0)
(2551,2500,0)
(2551,2588,0)
(687,16,0)
(2274,866,0)
(1381,1700,0)
(1068,1686,0)
(1315,912,0)
(2793,608,0)
(1296,2090,0)
(2785,2971,0)
(1477,11,0)
(410,596,0)
(1971,1343,0)
(2785,468,0)
(2328,1662,0)
(590,2809,0)
(1442,1255,0)
(1330,1884,0)
(2017,1024,0)
(2397,1991,0)
(2592,2167,0)
(1119,534,0)
(2988,69,0)
(126,2500,0)
(1815,1960,0)
(1307,457,0)
(1784,734,0)
(1860,1901,0)
(2650,2222,0)
(2809,402,0)
(794,1729,0)
(354,1874,0)
(117,2447,0)
(652,2843,0)
(1815,1407,0)
(1705,2292,0)
(1162,17,0)
(2713,1972,0)
(1856,2814,0)
(1503,44,0)
(2809,1407,0)
(197,1884,0)
(1786,1186,0)
(2743,2720,0)
(354,685,0)
(650,2262,0)
(1315,1186,0)
(3024,2317,0)
(1860,1530,0)
(1255,1442,0)
(54,2272,0)
(668,223,0)
(711,1902,0)
(329,472,0)
(262,432,0)
(2713,1186,0)
(2551,1526,0)
(2647,1246,0)
(201,223,0)
(748,1881,0)
(1503,256,0)
(2915,1659,0)
(2977,1603,0)
(1326,165,0)
(1056,1160,0)
(1583,2637,0)
(1506,1534,0)
(1786,44,0)
(1592,2831,0)
(2130,107,0)
(876,1692,0)
(1335,146,0)
(1860,371,0)
(1207,117,0)
(2666,1697,0)
(1774,2272,0)
(2253,637,0)
(636,2188,0)
(896,2500,0)
(2443,1476,0)
(1312,1734,0)
(1796,705,0)
(351,1427,0)
(2120,2637,0)
(1809,1931,0)
(196,2809,0)
(1145,930,0)
(1379,1114,0)
(2785,1407,0)
(1178,956,0)
(1315,2233,0)
(888,583,0)
(2922,977,0)
(1672,2392,0)
(134,876,0)
(1052,923,0)
(1687,2222,0)
(2242,3003,0)
(2130,468,0)
(271,543,0)
(3031,1581,0)
(2271,2837,0)
(439,1772,0)
(53,2128,0)
(1823,1676,0)
(1326,2174,0)
(133,644,0)
(2607,2971,0)
(802,2263,0)
(1413,236,0)
(126,1156,0)
(2809,2935,0)
(2130,256,0)
(2868,1843,0)
(2472,2668,0)
(40,1991,0)
(2910,2306,0)
(1930,1570,0)
(2130,1900,0)
(1064,2233,0)
(710,1160,0)
(815,1078,0)
(3004,2519,0)
(982,659,0)
(1156,511,0)
(2291,1445,0)
(1161,406,0)
(1315,2837,0)
(1268,1534,0)
(2167,1982,0)
(2317,1417,0)
(456,757,0)
(1649,845,0)
(1137,2893,0)
(1326,1186,0)
(2650,2930,0)
(2161,2017,0)
(2231,1991,0)
(2747,1843,0)
(721,2087,0)
(2964,2256,0)
(2648,2128,0)
(570,1905,0)
(2809,1974,0)
(833,400,0)
(644,2809,0)
(677,813,0)
(2373,1991,0)
(1908,599,0)
(2482,2004,0)
(2645,2896,0)
(2466,2878,0)
(1778,739,0)
(1268,2500,0)
(329,2048,0)
(1950,1137,0)
(805,1184,0)
(885,2514,0)
(1950,2943,0)
(664,2921,0)
(2317,980,0)
(2130,402,0)
(2996,970,0)
(126,801,0)
(1926,2663,0)
(2043,2087,0)
(1539,844,0)
(2759,1745,0)
(763,1700,0)
(3004,17,0)
(1855,1699,0)
(1655,1416,0)
(1518,59,0)
(517,1185,0)
(2403,1780,0)
(2050,1070,0)
(784,2700,0)
(1687,107,0)
(1072,2487,0)
(2713,1417,0)
(2689,147,0)
(671,515,0)
(2022,513,0)
(2136,814,0)
(876,1875,0)
(2650,912,0)
(1326,1377,0)
(1162,2943,0)
(1503,107,0)
(1815,906,0)
(2401,2969,0)
(2838,2705,0)
(1778,2843,0)
(2534,668,0)
(2860,223,0)
(2607,2837,0)
(1162,1874,0)
(614,1700,0)
(1815,2921,0)
(876,499,0)
(860,11,0)
(8,1373,0)
(2551,2614,0)
(1405,69,0)
(1125,2143,0)
(538,368,0)
(1315,44,0)
(1822,1974,0)
(522,1473,0)
(3011,2128,0)
(2046,1487,0)
(2816,1631,0)
(1688,1910,0)
(117,1960,0)
(2111,29,0)
(329,2674,0)
(2774,1931,0)
(451,494,0)
(1822,2139,0)
(1860,2935,0)
(494,3000,0)
(1559,115,0)
(734,2500,0)
(729,1736,0)
(2271,912,0)
(1965,101,0)
(2685,102,0)
(2317,1474,0)
(1343,2040,0)
(2144,538,0)
(17,1170,0)
(2268,2688,0)
(1162,2174,0)
(2816,440,0)
(1232,1214,0)
(1124,1534,0)
(1336,2465,0)
(2825,2953,0)
(2592,223,0)
(741,1948,0)
(2317,2779,0)
(2317,1156,0)
(34,2991,0)
(945,2621,0)
(1067,2858,0)
(2412,1194,0)
(1169,2036,0)
(1170,1913,0)
(1226,2272,0)
(2809,1856,0)
(1586,2812,0)
(1503,1074,0)
(2851,534,0)
(967,2758,0)
(806,98,0)
(1100,526,0)
(2831,1592,0)
(2240,659,0)
(2759,801,0)
(1162,1634,0)
(1263,288,0)
(1576,69,0)
(1950,801,0)
(1217,17,0)
(2109,1526,0)
(2083,1323,0)
(2893,1946,0)
(2627,1248,0)
(608,2650,0)
(39,2162,0)
(1907,1592,0)
(2556,1700,0)
(2943,1953,0)
(2551,2779,0)
(1421,69,0)
(2720,117,0)
(1345,205,0)
(652,2397,0)
(1950,2614,0)
(2320,1124,0)
(1741,2699,0)
(2899,154,0)
(1704,2321,0)
(410,1013,0)
(2152,1487,0)
(2893,2614,0)
(2650,1156,0)
(743,772,0)
(1162,1377,0)
(2654,131,0)
(2785,2256,0)
(157,2699,0)
(1860,1874,0)
(2551,2174,0)
(548,443,0)
(2819,1442,0)
(2695,2087,0)
(2228,1188,0)
(637,2253,0)
(2607,2935,0)
(426,2553,0)
(2713,44,0)
(662,2548,0)
(1089,1842,0)
(1603,515,0)
(569,1417,0)
(117,256,0)
(126,2837,0)
(970,1650,0)
(1891,157,0)
(1996,1534,0)
(2809,371,0)
(1667,2347,0)
(1335,1104,0)
(2641,812,0)
(2551,801,0)
(2317,2930,0)
(2893,2755,0)
(1107,419,0)
(88,1048,0)
(1845,223,0)
(121,817,0)
(2321,50,0)
(240,1700,0)
(1503,2480,0)
(1778,499,0)
(1283,1630,0)
(1860,1476,0)
(691,117,0)
(1326,1974,0)
(1247,1790,0)
(2570,2807,0)
(1326,1884,0)
(404,1650,0)
(2241,917,0)
(123,1913,0)
(1417,3000,0)
(803,1875,0)
(1097,826,0)
(342,1901,0)
(2340,1700,0)
(1258,511,0)
(580,119,0)
(223,201,0)
(354,44,0)
(1162,898,0)
(1374,228,0)
(881,1378,0)
(1365,2188,0)
(1860,1534,0)
(126,1875,0)
(1786,1137,0)
(792,369,0)
(2903,1332,0)
(2893,2174,0)
(1950,472,0)
(2650,1013,0)
(2663,2853,0)
(410,1568,0)
(2650,2174,0)
(989,2087,0)
(1687,1634,0)
(1326,1946,0)
(1895,117,0)
(1815,2588,0)
(93,1875,0)
(1260,1476,0)
(926,149,0)
(2336,2914,0)
(117,468,0)
(2297,1495,0)
(1067,1967,0)
(569,402,0)
(2650,1417,0)
(2987,873,0)
(342,149,0)
(1330,726,0)
(876,1137,0)
(2356,1686,0)
(2309,1403,0)
(1331,884,0)
(2291,579,0)
(1088,1706,0)
(2819,2733,0)
(2052,374,0)
(2130,1884,0)
(1767,1727,0)
(2253,2565,0)
(2455,2087,0)
(236,1700,0)
(2803,2762,0)
(2912,2230,0)
(2858,1775,0)
(351,1700,0)
(2130,1349,0)
(1268,84,0)
(2580,2809,0)
(950,2423,0)
(1315,2222,0)
(2480,1062,0)
(1246,2270,0)
(546,345,0)
(2458,1786,0)
(1538,1129,0)
(2785,2067,0)
(2946,1541,0)
(2722,3031,0)
(1681,338,0)
(27,1996,0)
(1455,1464,0)
(2648,377,0)
(236,2893,0)
(2713,2837,0)
(2329,1700,0)
(1209,659,0)
(876,1186,0)
(1495,1476,0)
(2899,186,0)
(2964,2935,0)
(2271,2930,0)
(1950,1568,0)
(1786,2174,0)
(2551,1530,0)
(1165,1931,0)
(410,2930,0)
(1421,2143,0)
(710,117,0)
(2317,2233,0)
(2918,2598,0)
(876,165,0)
(1726,575,0)
(2271,327,0)
(2644,1175,0)
(1996,1526,0)
(2935,2348,0)
(62,812,0)
(2833,17,0)
(1089,2871,0)
(2785,44,0)
(1728,2010,0)
(501,2139,0)
(2607,980,0)
(1109,590,0)
(1699,2853,0)
(400,2650,0)
(2551,2048,0)
(1315,402,0)
(1315,468,0)
(730,355,0)
(569,2174,0)
(2130,912,0)
(329,1745,0)
(2710,418,0)
(670,1377,0)
(2146,2786,0)
(569,545,0)
(1503,2755,0)
(2785,980,0)
(614,2632,0)
(2922,1643,0)
(1330,1745,0)
(1213,1703,0)
(1957,1898,0)
(1892,2595,0)
(1860,256,0)
(2893,107,0)
(2573,1092,0)
(2621,1991,0)
(446,1991,0)
(977,977,0)
(2109,2519,0)
(1786,107,0)
(1820,2161,0)
(157,2500,0)
(1089,705,0)
(101,1700,0)
(2202,11,0)
(2589,1586,0)
(739,1778,0)
(319,17,0)
(2688,722,0)
(1874,1953,0)
(1778,11,0)
(1368,1027,0)
(2989,1880,0)
(1568,1915,0)
(1895,2650,0)
(1940,1258,0)
(2288,2733,0)
(2410,1890,0)
(2530,1457,0)
(395,826,0)
(1634,1931,0)
(2361,1250,0)
(355,730,0)
(445,1700,0)
(187,2632,0)
(1496,2348,0)
(1162,377,0)
(2763,124,0)
(2093,3017,0)
(876,1526,0)
(2833,1476,0)
(2317,327,0)
(1692,329,0)
(1815,1156,0)
(445,876,0)
(2177,1700,0)
(2964,2174,0)
(1847,2786,0)
(876,110,0)
(569,2921,0)
(2271,1056,0)
(2713,2930,0)
(2024,1265,0)
(2271,2441,0)
(2108,1700,0)
(313,3002,0)
(1158,1650,0)
(892,185,0)
(2928,1320,0)
(1330,2971,0)
(1786,2441,0)
(2607,1974,0)
(1376,1741,0)
(1596,2577,0)
(2650,2943,0)
(1117,1068,0)
(2317,2674,0)
(2964,1900,0)
(1860,110,0)
(1326,110,0)
(1528,343,0)
(1942,3005,0)
(991,2098,0)
(313,1581,0)
(1877,117,0)
(1860,1686,0)
(1815,1686,0)
(1566,3009,0)
(3031,3002,0)
(2848,3004,0)
(2971,1655,0)
(1389,2729,0)
(1577,798,0)
(1623,764,0)
(1315,165,0)
(566,98,0)
(2158,731,0)
(1351,1124,0)
(3022,2540,0)
(1315,1349,0)
(1030,240,0)
(1393,2927,0)
(1671,2833,0)
(1687,1745,0)
(1491,2410,0)
(642,1832,0)
(1315,2441,0)
(1268,2843,0)
(1913,826,0)
(2971,1700,0)
(1941,115,0)
(1952,1842,0)
(722,1809,0)
(1857,726,0)
(1747,2257,0)
(1533,1700,0)
(209,2702,0)
(53,859,0)
(27,640,0)
(2280,2675,0)
(2159,1778,0)
(2051,2594,0)
(2809,801,0)
(2819,2668,0)
(2662,102,0)
(117,2441,0)
(1351,149,0)
(2607,402,0)
(1566,1772,0)
(2783,2368,0)
(873,1700,0)
(2836,1858,0)
(393,684,0)
(218,1304,0)
(2317,1972,0)
(21,2230,0)
(1687,3010,0)
(2774,1303,0)
(140,1236,0)
(500,1468,0)
(126,2843,0)
(1095,2123,0)
(896,149,0)
(1822,1349,0)
(1765,760,0)
(1778,2519,0)
(410,1186,0)
(72,1963,0)
(2749,820,0)
(410,1474,0)
(2893,2222,0)
(1741,499,0)
(2713,2674,0)
(1950,1900,0)
(994,1778,0)
(2946,1534,0)
(1863,2773,0)
(644,117,0)
(521,1583,0)
(2326,667,0)
(474,1850,0)
(1427,1062,0)
(2650,801,0)
(329,107,0)
(354,110,0)
(2336,2249,0)
(1025,2806,0)
(2406,2564,0)
(164,869,0)
(2809,1137,0)
(421,2674,0)
(1468,137,0)
(1815,1474,0)
(1810,926,0)
(1049,162,0)
(2927,1393,0)
(2946,2993,0)
(951,1312,0)
(2454,1991,0)
(120,2192,0)
(1425,2649,0)
(1493,445,0)
(2310,1650,0)
(117,377,0)
(126,1884,0)
(2464,1576,0)
(1554,223,0)
(2713,545,0)
(2110,1027,0)
(658,1973,0)
(1832,1700,0)
(2042,2809,0)
(1786,2480,0)
(1398,804,0)
(734,1526,0)
(1877,2809,0)
(804,2053,0)
(569,472,0)
(1950,2155,0)
(2949,332,0)
(84,1975,0)
(117,1745,0)
(1778,2500,0)
(2871,705,0)
(898,1162,0)
(2734,1991,0)
(157,970,0)
(1317,1953,0)
(715,2871,0)
(1879,1906,0)
(1786,468,0)
(2168,2627,0)
(615,2500,0)
(1786,1474,0)
(1477,2519,0)
(243,79,0)
(2964,596,0)
(569,2588,0)
(2893,1417,0)
(2271,2480,0)
(1974,2128,0)
(469,1991,0)
(2964,2155,0)
(1676,1851,0)
(1169,1700,0)
(1449,3031,0)
(329,1692,0)
(1209,1815,0)
(1162,1946,0)
(2607,1960,0)
(1505,2789,0)
(2439,73,0)
(1112,2555,0)
(2759,1417,0)
(202,2945,0)
(1843,69,0)
(2521,2368,0)
(2964,1874,0)
(182,2108,0)
(2824,1750,0)
(1838,1104,0)
(1162,468,0)
(1260,1534,0)
(2777,2128,0)
(2211,1256,0)
(1326,1745,0)
(209,1160,0)
(1503,912,0)
(2497,472,0)
(1288,1907,0)
(2762,2803,0)
(1822,2930,0)
(2473,946,0)
(1388,2720,0)
(873,1160,0)
(1595,3041,0)
(445,515,0)
(2551,1634,0)
(2130,1856,0)
(836,1873,0)
(134,1931,0)
(2759,3041,0)
(1860,1568,0)
(60,1438,0)
(2100,2274,0)
(157,2519,0)
(1315,726,0)
(2958,2685,0)
(2130,1745,0)
(1692,102,0)
(2021,2040,0)
(1844,1093,0)
(1770,1700,0)
(2348,2316,0)
(2009,475,0)
(1291,64,0)
(2789,1901,0)
(876,17,0)
(760,1844,0)
(2809,2614,0)
(154,2899,0)
(1741,1476,0)
(1905,2272,0)
(2837,2512,0)
(2650,2155,0)
(1822,468,0)
(1381,1162,0)
(1900,126,0)
(2343,839,0)
(2004,1067,0)
(442,1700,0)
(2891,1991,0)
(1583,2287,0)
(134,515,0)
(972,2839,0)
(1162,2755,0)
(1162,2699,0)
(1850,2112,0)
(2770,110,0)
(1860,2447,0)
(1293,34,0)
(1364,1711,0)
(32,2375,0)
(2210,2953,0)
(329,2458,0)
(2317,1013,0)
(816,765,0)
(410,2048,0)
(435,410,0)
(1315,377,0)
(545,102,0)
(1518,1700,0)
(1073,722,0)
(1379,839,0)
(1852,1991,0)
(1687,2943,0)
(53,1654,0)
(2641,1197,0)
(932,2447,0)
(1687,2885,0)
(1791,1991,0)
(1948,1991,0)
(540,2650,0)
(1795,1541,0)
(1822,256,0)
(1477,1526,0)
(2130,685,0)
(387,1197,0)
(188,2139,0)
(2152,17,0)
(2607,1900,0)
(1160,406,0)
(1950,1407,0)
(2551,1474,0)
(1757,2409,0)
(2042,1160,0)
(569,1056,0)
(1682,2130,0)
(410,1530,0)
(1815,1349,0)
(1719,1528,0)
(1068,499,0)
(2062,1991,0)
(1186,1315,0)
(1525,2102,0)
(593,2270,0)
(2650,2447,0)
(1860,2930,0)
(2543,2167,0)
(1786,2745,0)
(2066,1517,0)
(2660,162,0)
(1963,84,0)
(26,1991,0)
(2317,2935,0)
(1860,402,0)
(117,1900,0)
(911,69,0)
(1856,2128,0)
(2102,894,0)
(1963,2195,0)
(1682,2893,0)
(98,1700,0)
(607,295,0)
(440,2816,0)
(4,1494,0)
(528,336,0)
(229,1700,0)
(798,1794,0)
(752,2456,0)
(2709,146,0)
(76,1682,0)
(1268,1476,0)
(924,1518,0)
(1727,1655,0)
(1996,1124,0)
(1326,2447,0)
(2902,2162,0)
(1326,2480,0)
(543,1991,0)
(2893,2447,0)
(2525,534,0)
(2317,1137,0)
(2551,1946,0)
(991,818,0)
(1963,17,0)
(1890,3004,0)
(2194,599,0)
(410,472,0)
(354,2067,0)
(360,2650,0)
(126,1186,0)
(3016,69,0)
(410,2233,0)
(129,1160,0)
(1851,1676,0)
(329,1474,0)
(1089,503,0)
(117,1156,0)
(639,2991,0)
(1632,10,0)
(2607,1407,0)
(2551,377,0)
(2551,110,0)
(876,44,0)
(1361,1700,0)
(2365,2043,0)
(1260,1526,0)
(876,2588,0)
(897,2177,0)
(1327,628,0)
(2551,2222,0)
(329,1377,0)
(1015,62,0)
(473,150,0)
(2759,1186,0)
(876,1407,0)
(2358,417,0)
(1441,1700,0)
(2682,1359,0)
(3004,499,0)
(342,2843,0)
(1216,933,0)
(1503,468,0)
(117,1186,0)
(1977,2580,0)
(410,165,0)
(580,1429,0)
(2713,2943,0)
(819,1423,0)
(2551,44,0)
(1822,2174,0)
(2653,2113,0)
(2700,858,0)
(1417,2317,0)
(1315,1884,0)
(2893,402,0)
(1315,2885,0)
(516,121,0)
(1162,596,0)
(1326,1856,0)
(149,914,0)
(876,2233,0)
(1162,2745,0)
(1310,54,0)
(203,1913,0)
(652,17,0)
(2500,1541,0)
(1217,1534,0)
(726,102,0)
(329,1874,0)
(332,202,0)
(117,801,0)
(1000,2055,0)
(921,1238,0)
(1099,289,0)
(876,2843,0)
(1125,2950,0)
(1954,604,0)
(2016,1285,0)
(876,2067,0)
(143,1576,0)
(161,626,0)
(1268,2996,0)
(662,2863,0)
(2789,1534,0)
(2130,1946,0)
(2163,1946,0)
(1963,149,0)
(2713,371,0)
(3004,11,0)
(502,1407,0)
(2950,2143,0)
(1256,1953,0)
(2580,1160,0)
(661,1904,0)
(2032,1332,0)
(2675,117,0)
(1183,2790,0)
(1558,1434,0)
(1162,1137,0)
(327,102,0)
(1495,2382,0)
(2271,1634,0)
(700,2204,0)
(2773,2650,0)
(1792,1086,0)
(2077,2650,0)
(2607,2441,0)
(659,998,0)
(410,1137,0)
(117,980,0)
(912,216,0)
(2320,1476,0)
(2459,2907,0)
(1687,1074,0)
(2857,229,0)
(1795,1476,0)
(835,2650,0)
(1379,705,0)
(2553,2397,0)
(2551,2155,0)
(1515,2940,0)
(3014,1700,0)
(1503,976,0)
(2393,1281,0)
(2271,2943,0)
(1330,2458,0)
(1914,2219,0)
(410,1407,0)
(486,2300,0)
(1511,280,0)
(2125,1809,0)
(2108,630,0)
(2107,1509,0)
(1127,2320,0)
(1860,472,0)
(116,74,0)
(2271,980,0)
(10,1910,0)
(2317,1377,0)
(2713,906,0)
(2607,17,0)
(2195,1379,0)
(2476,2595,0)
(1822,1377,0)
(642,1534,0)
(2964,1856,0)
(2091,157,0)
(2954,476,0)
(329,377,0)
(1786,2930,0)
(1835,476,0)
(2713,912,0)
(354,1156,0)
(2607,2500,0)
(1473,2853,0)
(1753,1700,0)
(2833,1534,0)
(1773,290,0)
(517,131,0)
(572,919,0)
(2650,1377,0)
(571,1532,0)
(2382,1495,0)
(570,651,0)
(1379,2195,0)
(1147,1706,0)
(2841,1652,0)
(473,2287,0)
(681,1698,0)
(876,2458,0)
(1815,2447,0)
(1330,2755,0)
(1581,1991,0)
(2552,516,0)
(2362,1470,0)
(2488,124,0)
(2317,3041,0)
(1815,2843,0)
(1162,2441,0)
(244,917,0)
(1822,2755,0)
(301,2272,0)
(2964,726,0)
(1406,113,0)
(1197,17,0)
(869,916,0)
(3033,478,0)
(799,989,0)
(2650,472,0)
(342,1476,0)
(47,640,0)
(429,1160,0)
(1441,2326,0)
(2313,2865,0)
(2127,181,0)
(681,2758,0)
(1330,44,0)
(1179,103,0)
(636,1650,0)
(1697,1700,0)
(2807,117,0)
(780,2456,0)
(1599,2462,0)
(354,1960,0)
(1786,1745,0)
(2759,980,0)
(1693,860,0)
(1162,1124,0)
(2130,2837,0)
(2254,1990,0)
(2152,2500,0)
(1702,288,0)
(1184,805,0)
(224,1534,0)
(2607,1884,0)
(34,346,0)
(2857,662,0)
(126,2930,0)
(2422,53,0)
(2115,1686,0)
(1986,2453,0)
(325,575,0)
(151,1381,0)
(1333,157,0)
(3028,1727,0)
(1786,3041,0)
(2662,1896,0)
(2451,1991,0)
(2903,1378,0)
(2722,1901,0)
(1574,2110,0)
(2785,726,0)
(2375,63,0)
(1315,2174,0)
(358,590,0)
(1162,1884,0)
(2342,1881,0)
(1054,2804,0)
(2660,418,0)
(2878,1340,0)
(813,35,0)
(876,1686,0)
(1308,1745,0)
(1739,2185,0)
(1273,1913,0)
(910,705,0)
(1351,3002,0)
(2271,1884,0)
(329,2930,0)
(2785,2588,0)
(117,371,0)
(2759,2674,0)
(1080,1991,0)
(1906,1184,0)
(1373,2134,0)
(1315,2139,0)
(2628,826,0)
(2064,2614,0)
(47,1142,0)
(1508,2741,0)
(2285,1865,0)
(797,845,0)
(195,102,0)
(926,1534,0)
(1495,1124,0)
(445,1931,0)
(472,2713,0)
(1436,1528,0)
(1403,2809,0)
(2607,149,0)
(1255,1167,0)
(2953,2650,0)
(687,3002,0)
(410,2837,0)
(1911,154,0)
(1575,908,0)
(1696,201,0)
(30,1753,0)
(1875,1700,0)
(1068,2519,0)
(2331,1700,0)
(329,2614,0)
(1125,2975,0)
(2580,117,0)
(979,1541,0)
(1687,1974,0)
(126,2755,0)
(1503,980,0)
(1238,2830,0)
(1795,149,0)
(2531,1568,0)
(236,2130,0)
(117,906,0)
(1379,2871,0)
(1730,2272,0)
(192,2240,0)
(2623,1120,0)
(2158,2143,0)
(2368,2783,0)
(2638,2530,0)
(205,2272,0)
(2893,468,0)
(1640,1581,0)
(2130,1056,0)
(1989,511,0)
(2785,3041,0)
(2809,726,0)
(1594,1700,0)
(2075,2992,0)
(860,1913,0)
(126,2674,0)
(2964,685,0)
(997,2201,0)
(1519,1990,0)
(405,2043,0)
(2,1842,0)
(252,2271,0)
(1654,53,0)
(1332,1686,0)
(2271,44,0)
(2317,2588,0)
(2271,596,0)
(2964,1349,0)
(1963,2519,0)
(2423,950,0)
(2814,1650,0)
(1500,560,0)
(2469,2257,0)
(566,1846,0)
(1341,2884,0)
(2462,69,0)
(117,1407,0)
(1871,268,0)
(1018,185,0)
(927,722,0)
(373,1774,0)
(2920,2246,0)
(1589,948,0)
(1004,17,0)
(70,1285,0)
(1503,402,0)
(372,1991,0)
(1330,2441,0)
(2130,726,0)
(2446,1930,0)
(1196,2348,0)
(1124,336,0)
(1312,374,0)
(1776,2418,0)
(895,349,0)
(329,2233,0)
(3,15,0)
(247,2758,0)
(1183,1700,0)
(1326,1074,0)
(1075,2996,0)
(1778,1913,0)
(2633,2167,0)
(532,1832,0)
(242,1262,0)
(1313,1123,0)
(1004,1686,0)
(2631,2275,0)
(2372,1859,0)
(2785,1960,0)
(1509,1904,0)
(1503,2233,0)
(308,2229,0)
(2137,2272,0)
(2758,2809,0)
(2897,2124,0)
(2096,412,0)
(195,1220,0)
(1552,2637,0)
(647,1931,0)
(2428,2989,0)
(722,304,0)
(876,1568,0)
(2271,377,0)
(224,2622,0)
(876,1377,0)
(1687,545,0)
(2551,2519,0)
(2964,1013,0)
(1326,912,0)
(1381,876,0)
(63,866,0)
(1032,1884,0)
(240,1030,0)
(606,2588,0)
(459,1296,0)
(2560,1257,0)
(1265,463,0)
(1238,2650,0)
(644,817,0)
(354,2745,0)
(329,2779,0)
(1963,2500,0)
(1162,2885,0)
(987,2322,0)
(2803,2427,0)
(1786,2588,0)
(2590,2593,0)
(1786,2233,0)
(515,960,0)
(876,2614,0)
(1452,1242,0)
(850,1594,0)
(1981,1991,0)
(2143,2627,0)
(2390,763,0)
(2542,2192,0)
(2785,2614,0)
(157,703,0)
(727,1170,0)
(181,2127,0)
(2631,1686,0)
(2246,2294,0)
(2470,731,0)
(1860,468,0)
(1950,327,0)
(1027,1162,0)
(2809,912,0)
(2579,1575,0)
(1860,801,0)
(1162,1901,0)
(2112,516,0)
(85,2124,0)
(516,2112,0)
(2323,2621,0)
(1639,196,0)
(2871,272,0)
(1330,1856,0)
(1199,2392,0)
(354,2885,0)
(2894,1609,0)
(3009,1772,0)
(2494,2506,0)
(1815,2971,0)
(2877,805,0)
(618,1125,0)
(648,1520,0)
(2138,367,0)
(1180,2519,0)
(1311,1700,0)
(1326,2779,0)
(2175,2511,0)
(1285,1526,0)
(1950,1634,0)
(2650,2441,0)
(931,1614,0)
(1944,1151,0)
(2102,1700,0)
(186,1483,0)
(1776,1224,0)
(649,1496,0)
(354,327,0)
(1315,2447,0)
(2184,1730,0)
(1243,2230,0)
(2415,2524,0)
(2271,402,0)
(2881,2687,0)
(2055,17,0)
(117,1692,0)
(1822,110,0)
(2130,110,0)
(171,1114,0)
(656,1985,0)
(1961,2965,0)
(117,165,0)
(831,2815,0)
(1741,2500,0)
(1795,979,0)
(1906,604,0)
(2356,2519,0)
(2271,3041,0)
(590,117,0)
(1822,2885,0)
(1330,1377,0)
(2082,69,0)
(2330,1617,0)
(2151,3009,0)
(1392,2745,0)
(276,2077,0)
(1395,1225,0)
(279,2580,0)
(354,1875,0)
(1496,1363,0)
(1326,2222,0)
(2486,3017,0)
(1672,1165,0)
(319,2843,0)
(1966,2102,0)
(1483,2724,0)
(410,3041,0)
(410,256,0)
(2114,1397,0)
(757,2809,0)
(2821,1593,0)
(1330,1417,0)
(2356,84,0)
(2480,1953,0)
(320,1283,0)
(2893,1856,0)
(1490,1483,0)
(2881,2637,0)
(1055,1991,0)
(2271,2222,0)
(2809,2588,0)
(1601,959,0)
(2160,2141,0)
(1576,2552,0)
(117,1856,0)
(2664,977,0)
(2888,2331,0)
(1324,432,0)
(536,1265,0)
(2492,880,0)
(1950,1692,0)
(1929,840,0)
(2717,1526,0)
(1604,263,0)
(329,2921,0)
(876,256,0)
(2759,2935,0)
(33,1954,0)
(1295,2662,0)
(2055,841,0)
(126,44,0)
(1503,2447,0)
(2236,1330,0)
(1735,2866,0)
(642,1686,0)
(2713,402,0)
(2759,2067,0)
(1822,2458,0)
(2946,17,0)
(2487,2668,0)
(1860,2441,0)
(876,1013,0)
(2436,1467,0)
(1860,2843,0)
(1494,4,0)
(2549,496,0)
(1315,110,0)
(3035,2128,0)
(157,1476,0)
(1079,399,0)
(853,2226,0)
(1702,511,0)
(1786,1960,0)
(1073,1700,0)
(1474,1503,0)
(2130,1186,0)
(1470,1700,0)
(1492,757,0)
(1568,1953,0)
(2769,1727,0)
(1996,1476,0)
(3003,1899,0)
(864,2786,0)
(2392,1700,0)
(1734,1312,0)
(568,1404,0)
(117,1377,0)
(2650,371,0)
(1567,774,0)
(34,2253,0)
(1874,3000,0)
(209,117,0)
(1305,2991,0)
(2302,432,0)
(2910,628,0)
(2964,1056,0)
(1495,1526,0)
(703,157,0)
(513,2022,0)
(835,1700,0)
(2924,522,0)
(102,1991,0)
(896,17,0)
(250,2582,0)
(2983,2127,0)
(898,1700,0)
(2627,2143,0)
(860,149,0)
(1268,1901,0)
(381,1880,0)
(1021,2745,0)
(1318,637,0)
(255,2871,0)
(736,961,0)
(1093,515,0)
(2995,2272,0)
(1315,2745,0)
(2421,2249,0)
(1409,1914,0)
(1750,2824,0)
(1985,2253,0)
(774,1700,0)
(2511,95,0)
(665,1762,0)
(1860,596,0)
(549,3035,0)
(996,109,0)
(1384,652,0)
(771,31,0)
(936,1175,0)
(569,2222,0)
(2017,460,0)
(2607,596,0)
(1503,2837,0)
(1822,1874,0)
(2356,1124,0)
(1004,1476,0)
(1996,3002,0)
(3016,2143,0)
(2551,2674,0)
(1162,2779,0)
(2893,685,0)
(870,614,0)
(563,2426,0)
(2893,2480,0)
(1865,1751,0)
(1723,3041,0)
(1868,661,0)
(567,2106,0)
(979,2866,0)
(1950,2441,0)
(410,2441,0)
(1687,2921,0)
(410,1960,0)
(2809,2256,0)
(2315,1220,0)
(2551,107,0)
(1709,2990,0)
(1602,2253,0)
(2759,1856,0)
(1963,1526,0)
(652,1526,0)
(2010,1901,0)
(569,2233,0)
(329,2139,0)
(2271,1530,0)
(820,1674,0)
(1662,2328,0)
(2496,2659,0)
(1860,17,0)
(34,1293,0)
(926,223,0)
(876,1530,0)
(2962,895,0)
(1284,2688,0)
(2833,1526,0)
(2778,2774,0)
(392,1842,0)
(944,1541,0)
(1273,2628,0)
(968,3008,0)
(1952,69,0)
(2675,2650,0)
(2959,2781,0)
(1822,726,0)
(2901,1477,0)
(1217,1526,0)
(643,1496,0)
(2929,226,0)
(2705,137,0)
(1795,1686,0)
(2904,505,0)
(407,2861,0)
(2859,1478,0)
(1223,2146,0)
(1897,644,0)
(1745,290,0)
(2472,1620,0)
(835,1160,0)
(111,400,0)
(878,1468,0)
(780,1578,0)
(1180,1476,0)
(1712,117,0)
(1330,402,0)
(1330,2048,0)
(1068,1476,0)
(1950,1974,0)
(354,2930,0)
(2317,256,0)
(1529,2152,0)
(1326,2837,0)
(1809,722,0)
(215,1842,0)
(626,2143,0)
(332,1700,0)
(2152,1700,0)
(1399,31,0)
(1854,667,0)
(2271,1745,0)
(585,2057,0)
(1146,2877,0)
(117,545,0)
(1879,2251,0)
(1822,1156,0)
(1721,722,0)
(329,1856,0)
(1203,2545,0)
(876,912,0)
(747,2428,0)
(2096,1842,0)
(377,569,0)
(1694,1985,0)
(2724,1700,0)
(896,1124,0)
(2946,2843,0)
(2966,1078,0)
(1209,2270,0)
(761,634,0)
(2139,1700,0)
(457,1236,0)
(2946,1476,0)
(147,1643,0)
(1911,722,0)
(1972,2090,0)
(1603,154,0)
(1217,1686,0)
(1184,1906,0)
(896,1753,0)
(2942,181,0)
(2713,1875,0)
(289,2950,0)
(2893,1972,0)
(1240,195,0)
(2324,2816,0)
(2271,371,0)
(2543,223,0)
(1315,2935,0)
(1634,1700,0)
(2812,838,0)
(1919,608,0)
(2628,1273,0)
(1815,1530,0)
(989,1700,0)
(1315,1692,0)
(354,1417,0)
(1326,1972,0)
(410,468,0)
(488,260,0)
(2915,814,0)
(985,2696,0)
(1330,1013,0)
(1822,1692,0)
(419,1871,0)
(1815,2519,0)
(1185,95,0)
(2785,1875,0)
(1338,2143,0)
(947,545,0)
(1643,2922,0)
(2646,263,0)
(2956,2727,0)
(1638,2340,0)
(346,1700,0)
(896,1526,0)
(850,1915,0)
(1282,2620,0)
(1351,2843,0)
(2248,2512,0)
(1268,11,0)
(2130,1874,0)
(2607,1137,0)
(1326,1634,0)
(843,121,0)
(1880,2989,0)
(2748,836,0)
(1786,2447,0)
(1323,2272,0)
(2890,1226,0)
(2759,2614,0)
(2615,792,0)
(1375,2524,0)
(2317,2222,0)
(2379,385,0)
(2317,801,0)
(1687,2837,0)
(117,1530,0)
(483,187,0)
(1859,2372,0)
(1996,2519,0)
(776,1700,0)
(2713,801,0)
(1644,46,0)
(1162,2971,0)
(1315,545,0)
(2500,1934,0)
(569,1960,0)
(2893,1349,0)
(1687,596,0)
(1753,896,0)
(515,1028,0)
(1351,17,0)
(2810,635,0)
(2759,906,0)
(876,371,0)
(2230,3000,0)
(354,1745,0)
(1554,2167,0)
(3003,288,0)
(2826,2741,0)
(822,2548,0)
(876,1884,0)
(1624,2867,0)
(552,1594,0)
(2130,371,0)
(1580,647,0)
(1670,1307,0)
(2447,932,0)
(1370,2909,0)
(429,419,0)
(1330,2222,0)
(2776,738,0)
(1335,2637,0)
(2369,198,0)
(2759,2930,0)
(1744,2896,0)
(540,1182,0)
(270,1104,0)
(2320,969,0)
(2271,1407,0)
(1272,2152,0)
(1242,1452,0)
(1395,599,0)
(11,2068,0)
(2994,1845,0)
(1988,896,0)
(1823,2681,0)
(2203,2249,0)
(1860,2519,0)
(2809,1568,0)
(2607,1349,0)
(31,771,0)
(412,2192,0)
(1682,1700,0)
(1178,339,0)
(2953,117,0)
(2789,2519,0)
(1027,1700,0)
(1503,2745,0)
(2271,2233,0)
(1246,1815,0)
(2092,2519,0)
(126,906,0)
(1162,402,0)
(2551,256,0)
(1822,1900,0)
(2607,2699,0)
(1883,1473,0)
(1480,1815,0)
(2122,240,0)
(926,1526,0)
(2785,2943,0)
(1503,2441,0)
(927,120,0)
(3005,1942,0)
(2754,2043,0)
(2934,310,0)
(415,1721,0)
(410,1974,0)
(1838,2582,0)
(1271,2292,0)
(2171,1380,0)
(496,2075,0)
(2489,1265,0)
(1162,2048,0)
(692,1482,0)
(2693,239,0)
(2387,895,0)
(1373,8,0)
(1330,110,0)
(926,1124,0)
(2162,28,0)
(162,2660,0)
(460,2280,0)
(2489,1913,0)
(1419,146,0)
(2759,110,0)
(2809,2233,0)
(1390,2035,0)
(1503,1745,0)
(2135,2341,0)
(425,2427,0)
(258,760,0)
(1330,3041,0)
(2670,528,0)
(342,499,0)
(44,1953,0)
(2317,2837,0)
(2809,898,0)
(2010,84,0)
(1963,1124,0)
(652,2519,0)
(1906,1879,0)
(1326,1013,0)
(666,1027,0)
(2491,926,0)
(1689,2988,0)
(2964,2971,0)
(1950,1884,0)
(479,1900,0)
(1503,472,0)
(354,2222,0)
(1936,2372,0)
(2911,95,0)
(2556,1678,0)
(1786,1974,0)
(1877,2470,0)
(1379,69,0)
(2271,2447,0)
(2759,2174,0)
(1860,1972,0)
(329,898,0)
(755,2555,0)
(1856,223,0)
(2019,137,0)
(2112,1381,0)
(3036,1175,0)
(2498,201,0)
(1469,2263,0)
(1509,1931,0)
(569,2614,0)
(1815,2067,0)
(1786,980,0)
(3035,223,0)
(2619,245,0)
(1332,149,0)
(1049,2685,0)
(400,1700,0)
(2271,906,0)
(2183,380,0)
(289,503,0)
(2555,755,0)
(1326,596,0)
(2233,1953,0)
(1721,2512,0)
(1326,801,0)
(2893,2155,0)
(202,332,0)
(1860,2614,0)
(645,3002,0)
(966,2465,0)
(2053,2741,0)
(1708,2341,0)
(2946,2519,0)
(1786,545,0)
(1495,1534,0)
(1674,1732,0)
(749,665,0)
(1698,267,0)
(776,2542,0)
(122,876,0)
(329,256,0)
(876,2222,0)
(1163,1539,0)
(2439,645,0)
(561,1104,0)
(1676,1823,0)
(1315,1568,0)
(804,1700,0)
(1907,2650,0)
(1996,1581,0)
(51,2200,0)
(810,2982,0)
(1302,62,0)
(2115,2519,0)
(876,2674,0)
(1815,2233,0)
(1330,2233,0)
(2650,1407,0)
(1330,2256,0)
(117,2222,0)
(2739,2306,0)
(2087,1991,0)
(1996,1686,0)
(1812,2143,0)
(2952,1245,0)
(2713,1056,0)
(564,221,0)
(1397,2650,0)
(689,2415,0)
(1687,1900,0)
(2750,2230,0)
(2096,69,0)
(410,187,0)
(2827,104,0)
(1302,2272,0)
(2713,1946,0)
(448,1344,0)
(117,2745,0)
(2594,1842,0)
(2551,187,0)
(2418,1776,0)
(2115,1660,0)
(2785,1074,0)
(333,1917,0)
(198,1700,0)
(1470,1347,0)
(41,1991,0)
(503,1842,0)
(221,564,0)
(103,673,0)
(1303,2774,0)
(1180,149,0)
(2787,2042,0)
(2024,528,0)
(260,513,0)
(1270,2837,0)
(1162,84,0)
(343,2589,0)
(329,371,0)
(1860,2779,0)
(2043,2754,0)
(740,689,0)
(2054,3017,0)
(659,1889,0)
(2317,2614,0)
(2111,2294,0)
(2193,1013,0)
(621,1260,0)
(2484,2472,0)
(1330,898,0)
(410,2885,0)
(178,2896,0)
(2208,810,0)
(44,3000,0)
(117,2614,0)
(1532,1162,0)
(2449,2930,0)
(2551,468,0)
(1815,2048,0)
(1332,11,0)
(1846,566,0)
(1950,1156,0)
(1786,371,0)
(2713,165,0)
(1421,1842,0)
(126,1476,0)
(1342,911,0)
(840,3000,0)
(2690,1007,0)
(1053,667,0)
(801,375,0)
(2893,327,0)
(256,1644,0)
(1815,1946,0)
(364,1089,0)
(1813,2106,0)
(1985,2991,0)
(1324,84,0)
(1503,1875,0)
(2785,1900,0)
(1490,1700,0)
(329,2480,0)
(2123,2713,0)
(1191,1351,0)
(876,906,0)
(1078,2068,0)
(1713,2990,0)
(2551,596,0)
(789,416,0)
(671,1931,0)
(2798,1635,0)
(2317,685,0)
(231,1898,0)
(2278,2270,0)
(2735,1991,0)
(1687,1156,0)
(860,2843,0)
(1815,596,0)
(597,1905,0)
(127,2755,0)
(1215,1132,0)
(776,2809,0)
(2551,371,0)
(1062,1427,0)
(2551,2837,0)
(1197,1901,0)
(22,384,0)
(1503,2048,0)
(876,472,0)
(2472,511,0)
(1162,1417,0)
(1447,1555,0)
(2152,1534,0)
(509,2975,0)
(379,1179,0)
(1440,2701,0)
(1822,1013,0)
(2130,472,0)
(1353,1700,0)
(162,1049,0)
(1382,67,0)
(1950,1186,0)
(232,2458,0)
(117,3041,0)
(2538,1650,0)
(1330,1530,0)
(2551,1056,0)
(876,2930,0)
(268,1871,0)
(2180,2893,0)
(525,2777,0)
(2320,482,0)
(1860,2395,0)
(1715,2526,0)
(1845,2128,0)
(2551,2067,0)
(1165,515,0)
(275,2675,0)
(626,69,0)
(2152,1901,0)
(2271,801,0)
(410,1650,0)
(2809,165,0)
(734,2843,0)
(2384,534,0)
(106,1134,0)
(100,2082,0)
(117,1634,0)
(1285,149,0)
(288,1702,0)
(1819,1991,0)
(1403,464,0)
(1786,165,0)
(629,1042,0)
(2387,659,0)
(1665,1948,0)
(1326,1900,0)
(569,2935,0)
(2073,1991,0)
(547,2322,0)
(1285,11,0)
(513,1348,0)
(1621,2087,0)
(2472,2733,0)
(1786,2458,0)
(660,2806,0)
(977,1991,0)
(1473,522,0)
(3017,2093,0)
(1822,596,0)
(866,63,0)
(1383,2924,0)
(2635,2993,0)
(1330,1474,0)
(1162,371,0)
(661,1420,0)
(1190,2216,0)
(2263,2187,0)
(2152,149,0)
(2519,2473,0)
(3004,149,0)
(1778,1265,0)
(2863,662,0)
(2607,726,0)
(1860,906,0)
(1326,2155,0)
(1369,926,0)
(2351,1183,0)
(844,1539,0)
(734,499,0)
(1495,2699,0)
(1093,1162,0)
(1753,876,0)
(2415,534,0)
(1326,472,0)
(2551,1534,0)
(2120,1637,0)
(2809,2447,0)
(2669,2113,0)
(609,2077,0)
(764,2272,0)
(1890,2992,0)
(814,1539,0)
(3041,1700,0)
(2145,35,0)
(2665,1395,0)
(569,2480,0)
(1217,1476,0)
(2893,1530,0)
(2671,228,0)
(3030,1832,0)
(989,3000,0)
(1165,1672,0)
(579,1700,0)
(38,1442,0)
(2924,1700,0)
(1028,515,0)
(654,3001,0)
(2759,187,0)
(2761,1554,0)
(2474,2356,0)
(2012,2048,0)
(1195,1059,0)
(2541,1700,0)
(1815,2458,0)
(1860,2971,0)
(785,1650,0)
(1465,1437,0)
(2587,2635,0)
(1947,2702,0)
(1162,327,0)
(487,102,0)
(873,2809,0)
(2140,1217,0)
(2551,1692,0)
(1162,2614,0)
(2317,44,0)
(1162,1156,0)
(1817,3014,0)
(2614,1700,0)
(1415,441,0)
(642,17,0)
(2322,1644,0)
(1326,107,0)
(1347,1470,0)
(1661,1991,0)
(329,912,0)
(753,575,0)
(254,1579,0)
(1902,1700,0)
(558,1991,0)
(698,2096,0)
(362,205,0)
(1606,2616,0)
(1885,2724,0)
(2650,2921,0)
(1860,1974,0)
(120,2571,0)
(2007,2631,0)
(117,824,0)
(2785,912,0)
(2759,472,0)
(329,2155,0)
(2261,801,0)
(2130,1407,0)
(1403,1700,0)
(1124,149,0)
(2236,1838,0)
(389,2108,0)
(248,1786,0)
(117,912,0)
(2648,2167,0)
(867,3015,0)
(117,2048,0)
(905,566,0)
(787,2331,0)
(1503,2930,0)
(319,1476,0)
(1795,17,0)
(1451,1273,0)
(132,895,0)
(2551,1745,0)
(569,2048,0)
(599,1395,0)
(2530,1700,0)
(1786,2885,0)
(354,2674,0)
(2551,1568,0)
(117,2674,0)
(2632,614,0)
(65,1991,0)
(1233,2779,0)
(1137,1700,0)
(2130,906,0)
(876,149,0)
(1267,2759,0)
(2650,1946,0)
(2152,2699,0)
(107,2551,0)
(1485,505,0)
(1753,515,0)
(126,377,0)
(2487,109,0)
(391,2137,0)
(136,429,0)
(854,158,0)
(2226,774,0)
(2964,2943,0)
(2722,2519,0)
(1687,1960,0)
(844,725,0)
(1372,826,0)
(465,221,0)
(329,1186,0)
(2759,1960,0)
(998,659,0)
(884,2247,0)
(2320,17,0)
(1283,2650,0)
(1998,1397,0)
(1950,2971,0)
(2688,1700,0)
(2893,1474,0)
(2650,2935,0)
(1214,137,0)
(2551,2943,0)
(2063,1652,0)
(1318,511,0)
(433,1541,0)
(1330,472,0)
(2893,1137,0)
(2785,1056,0)
(1205,2875,0)
(1120,2628,0)
(1815,912,0)
(2343,69,0)
(2893,801,0)
(2130,2930,0)
(733,1417,0)
(776,2650,0)
(1011,165,0)
(1989,1700,0)
(129,869,0)
(344,1700,0)
(1379,2143,0)
(1220,1147,0)
(2353,596,0)
(1795,2519,0)
(2077,1160,0)
(680,2179,0)
(2607,685,0)
(1786,110,0)
(1326,2674,0)
(2716,980,0)
(1822,912,0)
(1815,1884,0)
(1162,2458,0)
(1232,2474,0)
(876,898,0)
(1488,1086,0)
(876,1476,0)
(82,2679,0)
(2408,107,0)
(949,28,0)
(620,2272,0)
(2130,327,0)
(2049,487,0)
(2755,1245,0)
(1754,1248,0)
(2650,44,0)
(2964,2779,0)
(1643,534,0)
(805,2877,0)
(2356,11,0)
(2320,2500,0)
(233,2251,0)
(1950,1946,0)
(574,1991,0)
(980,2270,0)
(906,223,0)
(2277,1260,0)
(410,1946,0)
(2871,69,0)
(2893,256,0)
(718,239,0)
(316,1348,0)
(2744,236,0)
(1503,1377,0)
(1180,1534,0)
(1858,1471,0)
(1349,1700,0)
(1950,1875,0)
(1329,2055,0)
(2815,831,0)
(1471,1700,0)
(2607,84,0)
(876,1745,0)
(1822,1474,0)
(1563,2394,0)
(1326,2930,0)
(1860,2155,0)
(2655,817,0)
(2055,2843,0)
(2247,2726,0)
(183,1575,0)
(840,1953,0)
(1687,2155,0)
(2964,1454,0)
(601,2910,0)
(1822,2614,0)
(177,200,0)
(2780,1177,0)
(1659,1815,0)
(510,1991,0)
(1260,2500,0)
(1195,2883,0)
(1490,876,0)
(1574,722,0)
(1263,1700,0)
(1589,257,0)
(1067,2004,0)
(881,1982,0)
(468,2271,0)
(1400,1283,0)
(2598,1571,0)
(1702,1700,0)
(2355,2506,0)
(1332,2519,0)
(2447,1860,0)
(1193,671,0)
(857,1353,0)
(2429,2343,0)
(1123,2272,0)
(1503,2921,0)
(2530,1162,0)
(2837,1700,0)
(2982,1653,0)
(2607,906,0)
(2699,1750,0)
(2684,545,0)
(410,2755,0)
(1687,1349,0)
(374,2052,0)
(1862,54,0)
(354,960,0)
(998,1700,0)
(1860,912,0)
(191,1403,0)
(329,402,0)
(2893,472,0)
(2809,980,0)
(2759,2139,0)
(955,1526,0)
(157,1526,0)
(1814,989,0)
(1974,223,0)
(1795,1526,0)
(410,2222,0)
(2759,371,0)
(2853,1699,0)
(442,2293,0)
(2114,1991,0)
(1860,1124,0)
(2441,659,0)
(2945,202,0)
(2385,1927,0)
(873,1414,0)
(137,2701,0)
(311,734,0)
(2328,3033,0)
(2807,1700,0)
(2811,543,0)
(2356,2699,0)
(676,726,0)
(1503,2174,0)
(2650,1875,0)
(2513,329,0)
(569,2885,0)
(1211,77,0)
(2533,38,0)
(1102,102,0)
(1162,44,0)
(1969,1076,0)
(2055,1913,0)
(1285,2519,0)
(2343,2950,0)
(2759,1972,0)
(2607,3041,0)
(579,2291,0)
(2785,1874,0)
(1220,195,0)
(1889,358,0)
(876,377,0)
(134,931,0)
(1636,2471,0)
(644,1700,0)
(2982,810,0)
(1542,1093,0)
(2592,1745,0)
(624,880,0)
(2973,1620,0)
(858,102,0)
(1950,2779,0)
(1050,2649,0)
(2214,1182,0)
(2919,1991,0)
(2967,1024,0)
(1315,2256,0)
(1072,1700,0)
(1860,2480,0)
(751,2755,0)
(56,2330,0)
(1873,836,0)
(1495,2843,0)
(295,1864,0)
(206,1991,0)
(2271,2458,0)
(342,1526,0)
(2109,1476,0)
(289,2143,0)
(1759,1587,0)
(1396,719,0)
(1162,1900,0)
(2809,1474,0)
(1530,1014,0)
(1315,801,0)
(2472,1899,0)
(1532,515,0)
(120,927,0)
(2130,1875,0)
(2607,2233,0)
(2964,2222,0)
(2551,472,0)
(2317,1900,0)
(329,1972,0)
(190,1991,0)
(2506,2783,0)
(1326,906,0)
(126,1407,0)
(760,722,0)
(2152,499,0)
(354,2779,0)
(969,970,0)
(1330,545,0)
(1822,1530,0)
(57,780,0)
(2713,2447,0)
(381,1357,0)
(1571,2598,0)
(2227,906,0)
(771,2281,0)
(569,377,0)
(1594,850,0)
(1658,383,0)
(2173,2551,0)
(1786,402,0)
(847,635,0)
(410,2971,0)
(1397,117,0)
(456,82,0)
(1359,765,0)
(228,2115,0)
(2271,2971,0)
(1162,801,0)
(1162,685,0)
(1603,1700,0)
(1495,149,0)
(2551,1900,0)
(1877,1160,0)
(2427,102,0)
(86,360,0)
(2893,1884,0)
(1004,2843,0)
(157,84,0)
(2852,327,0)
(2434,1700,0)
(2759,1377,0)
(1315,1407,0)
(2918,391,0)
(919,923,0)
(1822,980,0)
(831,2867,0)
(1315,2971,0)
(2964,2921,0)
(2720,2809,0)
(645,750,0)
(2876,684,0)
(329,165,0)
(2551,327,0)
(2551,1124,0)
(1135,2120,0)
(1253,1773,0)
(1503,1974,0)
(2558,1991,0)
(1721,892,0)
(630,1221,0)
(730,2272,0)
(2340,1257,0)
(1249,1441,0)
(2713,1137,0)
(20,1259,0)
(1090,383,0)
(1170,1265,0)
(77,1211,0)
(1326,980,0)
(569,1568,0)
(2537,1258,0)
(1074,1953,0)
(1687,402,0)
(1790,2819,0)
(1950,1013,0)
(1140,902,0)
(2023,1124,0)
(2893,596,0)
(2650,2674,0)
(110,3000,0)
(1351,1534,0)
(1165,1162,0)
(2273,533,0)
(720,961,0)
(1138,712,0)
(1561,2424,0)
(1330,1974,0)
(117,596,0)
(876,2921,0)
(27,743,0)
(1545,659,0)
(725,113,0)
(15,223,0)
(1699,1700,0)
(2027,604,0)
(2713,1960,0)
(1535,2854,0)
(1162,2155,0)
(2197,1087,0)
(2685,1049,0)
(1025,1464,0)
(354,1474,0)
(329,110,0)
(554,840,0)
(2485,1686,0)
(2356,1901,0)
(1089,839,0)
(2029,1991,0)
(2349,3016,0)
(1569,2024,0)
(1111,1946,0)
(83,1226,0)
(1283,1700,0)
(210,210,0)
(1950,2480,0)
(1381,515,0)
(505,117,0)
(2317,2447,0)
(1326,1960,0)
(1815,980,0)
(876,726,0)
(2803,1953,0)
(866,2593,0)
(329,1884,0)
(957,1706,0)
(1963,1534,0)
(1312,951,0)
(1628,645,0)
(2413,134,0)
(2683,838,0)
(2893,371,0)
(1330,1186,0)
(1762,1860,0)
(2990,1700,0)
(2544,1188,0)
(1004,1534,0)
(1967,1772,0)
(608,1160,0)
(2650,1692,0)
(126,2155,0)
(123,2370,0)
(2017,2161,0)
(2809,1530,0)
(2271,2155,0)
(210,2883,0)
(2179,1416,0)
(569,2441,0)
(44,47,0)
(126,2745,0)
(1477,17,0)
(1913,123,0)
(688,1991,0)
(2385,2148,0)
(410,2458,0)
(1326,2441,0)
(1379,1842,0)
(1315,1946,0)
(1613,367,0)
(2697,627,0)
(1246,1715,0)
(329,1875,0)
(2984,357,0)
(511,2472,0)
(1188,2228,0)
(2713,1900,0)
(632,2935,0)
(1133,1910,0)
(1860,1526,0)
(2271,1186,0)
(926,499,0)
(222,2766,0)
(2650,2885,0)
(2674,2543,0)
(1351,1475,0)
(860,533,0)
(3038,1478,0)
(1134,2272,0)
(1822,1745,0)
(891,2419,0)
(463,2204,0)
(1315,1972,0)
(1315,1417,0)
(24,259,0)
(1920,2367,0)
(225,1662,0)
(2205,1074,0)
(2132,1256,0)
(1786,2755,0)
(1397,2114,0)
(1245,2952,0)
(1373,647,0)
(2317,1074,0)
(1815,3041,0)
(876,2174,0)
(1201,2948,0)
(1543,2850,0)
(2607,2943,0)
(2953,2809,0)
(923,919,0)
(2759,1568,0)
(126,596,0)
(2551,2745,0)
(858,1540,0)
(962,1774,0)
(2721,2614,0)
(2162,2008,0)
(2435,377,0)
(378,1698,0)
(470,1879,0)
(117,2837,0)
(1834,1991,0)
(2701,137,0)
(2595,2272,0)
(2080,1304,0)
(1946,3000,0)
(2038,2392,0)
(569,1186,0)
(2417,198,0)
(1188,1338,0)
(2009,2247,0)
(141,978,0)
(295,3002,0)
(1509,1700,0)
(2130,2674,0)
(591,900,0)
(1217,2843,0)
(2607,2447,0)
(302,1432,0)
(2072,2316,0)
(1822,2441,0)
(1959,134,0)
(581,1614,0)
(990,719,0)
(582,1991,0)
(2198,344,0)
(314,1991,0)
(2785,2458,0)
(3002,1214,0)
(724,2907,0)
(1795,1901,0)
(73,2439,0)
(280,1511,0)
(1023,2130,0)
(2551,3041,0)
(840,1700,0)
(289,839,0)
(630,1935,0)
(2130,44,0)
(1950,2458,0)
(2758,117,0)
(1894,2935,0)
(2450,50,0)
(2526,1715,0)
(2681,297,0)
(336,646,0)
(707,90,0)
(2404,1991,0)
(212,1630,0)
(2495,77,0)
(2809,2745,0)
(835,2809,0)
(1326,685,0)
(1786,2674,0)
(899,2541,0)
(2165,2783,0)
(2944,2878,0)
(1687,1692,0)
(445,463,0)
(126,1946,0)
(890,44,0)
(157,1913,0)
(25,109,0)
(763,725,0)
(1950,2921,0)
(2608,1258,0)
(1860,2233,0)
(1170,17,0)
(2128,443,0)
(110,1953,0)
(2607,294,0)
(1647,2187,0)
(1865,2607,0)
(181,478,0)
(400,117,0)
(953,604,0)
(1315,2480,0)
(37,140,0)
(1315,1960,0)
(503,2950,0)
(2551,1875,0)
(2759,726,0)
(2964,3041,0)
(652,1476,0)
(2964,1407,0)
(569,1856,0)
(2350,1631,0)
(1786,1156,0)
(110,2518,0)
(410,1056,0)
(1822,2779,0)
(876,187,0)
(0,978,0)
(3002,295,0)
(1614,1420,0)
(1167,2995,0)
(1330,1137,0)
(64,2287,0)
(1068,302,0)
(1200,2910,0)
(473,2036,0)
(211,705,0)
(2713,2779,0)
(1162,1476,0)
(117,2174,0)
(208,2248,0)
(2997,1991,0)
(2502,1991,0)
(2339,1911,0)
(1815,2614,0)
(2042,2650,0)
(1467,1593,0)
(1917,2809,0)
(157,1124,0)
(165,3000,0)
(940,229,0)
(1608,209,0)
(2359,1634,0)
(1496,1655,0)
(1164,1862,0)
(734,84,0)
(2783,2506,0)
(2667,685,0)
(1586,892,0)
(1162,1960,0)
(2914,1700,0)
(2893,1960,0)
(2204,1700,0)
(2859,2240,0)
(923,1762,0)
(134,1162,0)
(1162,110,0)
(2296,399,0)
(1549,216,0)
(2947,200,0)
(1822,377,0)
(1068,2699,0)
(3016,2574,0)
(2394,637,0)
(1627,105,0)
(360,2809,0)
(2990,1709,0)
(1004,2519,0)
(278,468,0)
(1788,1620,0)
(480,256,0)
(1115,2041,0)
(108,3035,0)
(1841,2331,0)
(2713,1377,0)
(580,2715,0)
(2317,2943,0)
(1950,898,0)
(567,503,0)
(447,1175,0)
(2320,11,0)
(2926,2556,0)
(896,2843,0)
(549,375,0)
(1350,1379,0)
(2086,2019,0)
(2720,2650,0)
(2356,2500,0)
(2370,1700,0)
(329,2885,0)
(117,1568,0)
(3007,538,0)
(1290,1667,0)
(1789,74,0)
(1162,1534,0)
(512,2945,0)
(1006,1991,0)
(2984,475,0)
(2287,473,0)
(345,1534,0)
(1444,614,0)
(329,1530,0)
(1503,1013,0)
(52,2616,0)
(2809,1946,0)
(1315,2921,0)
(841,2055,0)
(637,2394,0)
(113,725,0)
(2024,1913,0)
(1256,687,0)
(3011,2167,0)
(2317,1875,0)
(1985,1012,0)
(2562,289,0)
(1666,149,0)
(2472,1442,0)
(2650,2837,0)
(105,1700,0)
(2595,1892,0)
(312,86,0)
(2727,1700,0)
(2589,343,0)
(1772,1967,0)
(1162,1692,0)
(734,1534,0)
(1464,1025,0)
(126,2447,0)
(1197,2641,0)
(1763,1174,0)
(2276,840,0)
(2768,1948,0)
(1571,752,0)
(1815,2885,0)
(319,2519,0)
(2619,1437,0)
(876,980,0)
(507,2061,0)
(1068,17,0)
(298,2696,0)
(2130,1568,0)
(1946,1953,0)
(2280,460,0)
(814,2473,0)
(2766,222,0)
(1004,3015,0)
(1396,2148,0)
(1474,2087,0)
(2731,522,0)
(440,1989,0)
(651,570,0)
(2264,35,0)
(2503,960,0)
(2271,2755,0)
(1786,1875,0)
(2965,739,0)
(2318,927,0)
(979,1429,0)
(329,44,0)
(217,3004,0)
(2809,2048,0)
(2631,11,0)
(1298,1700,0)
(1332,2699,0)
(1468,3015,0)
(1154,1323,0)
(926,84,0)
(2448,989,0)
(1950,906,0)
(2964,1074,0)
(2142,1568,0)
(2970,1989,0)
(2055,1686,0)
(1779,1860,0)
(2317,2174,0)
(635,2272,0)
(569,1474,0)
(2282,2541,0)
(162,957,0)
(2195,1652,0)
(1822,2921,0)
(920,1268,0)
(566,905,0)
(2713,1634,0)
(1477,1476,0)
(1397,1700,0)
(2938,2592,0)
(169,1991,0)
(2109,1534,0)
(1377,1700,0)
(1157,1534,0)
(1338,1842,0)
(2296,1990,0)
(1027,515,0)
(2785,2441,0)
(45,712,0)
(583,1378,0)
(2317,1974,0)
(1663,2922,0)
(269,2216,0)
(2247,884,0)
(2077,2161,0)
(2738,2715,0)
(883,1991,0)
(157,499,0)
(671,1162,0)
(438,1104,0)
(1471,1160,0)
(1167,1255,0)
(2806,1025,0)
(2713,107,0)
(2724,1483,0)
(410,545,0)
(2284,1175,0)
(2772,2011,0)
(126,1686,0)
(955,1534,0)
(1822,165,0)
(2075,496,0)
(965,1918,0)
(1476,1181,0)
(712,1138,0)
(642,1476,0)
(1687,1013,0)
(2867,1931,0)
(157,11,0)
(2893,2885,0)
(2785,1135,0)
(2964,1186,0)
(410,44,0)
(125,95,0)
(1209,2607,0)
(3009,2565,0)
(2785,2480,0)
(241,35,0)
(1315,327,0)
(1503,1568,0)
(1162,2447,0)
(1822,1856,0)
(2392,1672,0)
(1259,2626,0)
(902,1284,0)
(1045,1654,0)
(350,1163,0)
(2899,1987,0)
(12,2115,0)
(2631,1476,0)
(2326,1441,0)
(1778,17,0)
(382,2370,0)
(1379,503,0)
(319,1526,0)
(329,685,0)
(1180,2843,0)
(1326,468,0)
(1315,1875,0)
(246,129,0)
(2272,1257,0)
(1217,1711,0)
(2759,1056,0)
(1615,569,0)
(2546,2659,0)
(822,1700,0)
(2024,3029,0)
(1732,1674,0)
(559,2113,0)
(2014,557,0)
(4,2272,0)
(1635,2798,0)
(473,223,0)
(2320,1526,0)
(1786,726,0)
(1351,2500,0)
(2649,1050,0)
(1635,1748,0)
(2451,172,0)
(1687,110,0)
(3000,2870,0)
(2130,545,0)
(1077,1471,0)
(2506,1700,0)
(1162,3041,0)
(399,1913,0)
(896,2519,0)
(2759,1900,0)
(610,867,0)
(1153,2248,0)
(980,2607,0)
(2819,1790,0)
(2809,2943,0)
(2360,1186,0)
(734,2699,0)
(1614,1700,0)
(219,1671,0)
(2674,2678,0)
(2233,449,0)
(2722,1526,0)
(2809,1692,0)
(289,2871,0)
(520,2726,0)
(1523,2556,0)
(2172,1678,0)
(732,129,0)
(1162,2233,0)
(306,1702,0)
(2713,2885,0)
(1774,385,0)
(119,2763,0)
(291,400,0)
(2042,117,0)
(2164,2993,0)
(2705,2305,0)
(67,344,0)
(170,1162,0)
(1551,2922,0)
(560,1700,0)
(2152,1991,0)
(876,2943,0)
(881,1214,0)
(310,1012,0)
(2759,256,0)
(117,2155,0)
(1822,1151,0)
(408,1086,0)
(1860,726,0)
(2130,2885,0)
(1351,11,0)
(2271,1946,0)
(961,1458,0)
(1162,2500,0)
(2466,2809,0)
(2459,1991,0)
(1483,186,0)
(305,2305,0)
(2950,69,0)
(1685,196,0)
(2272,1991,0)
(1294,1298,0)
(126,2048,0)
(673,103,0)
(329,1137,0)
(2271,1137,0)
(687,1581,0)
(645,2439,0)
(2130,2779,0)
(2152,2558,0)
(312,1844,0)
(2940,1679,0)
(2732,1104,0)
(2317,2155,0)
(1180,2500,0)
(2551,906,0)
(2948,1201,0)
(1673,2394,0)
(1278,2228,0)
(1315,1377,0)
(2824,1581,0)
(1818,2474,0)
(126,2222,0)
(3015,1106,0)
(1895,1700,0)
(2705,1214,0)
(2356,149,0)
(1741,2843,0)
(2688,2512,0)
(1672,1184,0)
(2899,930,0)
(419,429,0)
(1061,687,0)
(2636,442,0)
(410,685,0)
(126,1137,0)
(2874,1490,0)
(2102,511,0)
(2840,1530,0)
(1028,1700,0)
(1326,2943,0)
(2829,1226,0)
(1125,1842,0)
(1162,2067,0)
(2713,1156,0)
(2872,1123,0)
(783,2170,0)
(1068,149,0)
(2607,801,0)
(2317,110,0)
(1815,84,0)
(2694,1073,0)
(235,1105,0)
(342,2519,0)
(2039,2588,0)
(1173,1700,0)
(2048,2666,0)
(1783,2489,0)
(860,2500,0)
(938,1730,0)
(2631,1534,0)
(478,1442,0)
(2478,2270,0)
(410,1745,0)
(348,1074,0)
(410,912,0)
(2871,2143,0)
(2541,2650,0)
(436,1895,0)
(734,1476,0)
(2607,468,0)
(126,1568,0)
(2169,2291,0)
(2860,2167,0)
(2223,31,0)
(94,1221,0)
(117,1013,0)
(2785,2935,0)
(1939,908,0)
(728,567,0)
(2566,2884,0)
(2009,3025,0)
(2480,3000,0)
(1292,346,0)
(126,1124,0)
(1905,570,0)
(2884,991,0)
(2551,1686,0)
(506,2174,0)
(172,2368,0)
(2708,765,0)
(2325,2052,0)
(3009,2253,0)
(215,69,0)
(641,1298,0)
(3041,2809,0)
(744,1481,0)
(2426,2730,0)
(2152,2292,0)
(2333,2228,0)
(2785,2755,0)
(671,1129,0)
(266,931,0)
(1860,2885,0)
(836,2809,0)
(2816,2324,0)
(1197,1476,0)
(396,2041,0)
(105,1715,0)
(1860,1349,0)
(1084,2858,0)
(2551,499,0)
(622,1687,0)
(900,591,0)
(2809,2755,0)
(2916,1700,0)
(1646,494,0)
(1069,1004,0)
(135,1653,0)
(1242,46,0)
(2043,2870,0)
(2528,2648,0)
(2104,2931,0)
(2809,107,0)
(980,659,0)
(1070,2301,0)
(1842,2143,0)
(1462,1104,0)
(29,2111,0)
(2687,2975,0)
(484,1650,0)
(1367,468,0)
(1786,2779,0)
(2964,110,0)
(1284,902,0)
(2785,596,0)
(1687,2233,0)
(1221,1700,0)
(1687,1377,0)
(2950,2116,0)
(2880,1700,0)
(454,2010,0)
(354,801,0)
(1495,1686,0)
(583,1214,0)
(1778,1686,0)
(2713,1568,0)
(1603,1931,0)
(809,1195,0)
(1332,368,0)
(2130,2458,0)
(2879,1597,0)
(1293,1012,0)
(36,3016,0)
(926,2843,0)
(3042,84,0)
(586,2428,0)
(2240,2859,0)
(1918,2387,0)
(2964,2674,0)
(1822,898,0)
(2222,1700,0)
(1429,580,0)
(157,1686,0)
(1793,763,0)
(2713,2441,0)
(1777,918,0)
(2317,726,0)
(1687,1874,0)
(2809,1745,0)
(342,1124,0)
(896,11,0)
(2249,1700,0)
(2031,600,0)
(1005,2763,0)
(2631,17,0)
(1860,980,0)
(1671,219,0)
(2675,1700,0)
(3004,1476,0)
(800,998,0)
(2271,1875,0)
(1082,626,0)
(2271,2674,0)
(1935,630,0)
(1503,2935,0)
(1979,1433,0)
(2785,2921,0)
(1089,2950,0)
(2809,2885,0)
(117,1137,0)
(1012,1293,0)
(2893,2256,0)
(3004,84,0)
(1241,402,0)
(2130,1474,0)
(2312,2724,0)
(1822,1875,0)
(1990,2296,0)
(876,2139,0)
(894,2819,0)
(1180,1686,0)
(876,1856,0)
(657,1741,0)
(462,2791,0)
(690,759,0)
(1822,1634,0)
(1507,2633,0)
(2631,499,0)
(769,443,0)
(322,2329,0)
(2964,468,0)
(2317,1407,0)
(612,1173,0)
(117,2139,0)
(2452,1381,0)
(2785,2174,0)
(2317,165,0)
(2650,3041,0)
(434,1056,0)
(210,1059,0)
(1162,2674,0)
(1996,499,0)
(3013,1648,0)
(1950,2885,0)
(2650,256,0)
(2581,1911,0)
(699,1991,0)
(2551,2458,0)
(2607,1875,0)
(360,1700,0)
(1867,534,0)
(2232,1380,0)
(1815,377,0)
(1949,1831,0)
(2346,627,0)
(2650,2480,0)
(2551,1718,0)
(441,2229,0)
(377,2648,0)
(2650,1972,0)
(1180,17,0)
(2847,1106,0)
(2356,2843,0)
(1503,1056,0)
(726,1950,0)
(1946,1578,0)
(268,2143,0)
(876,1056,0)
(1860,1692,0)
(2884,3000,0)
(1022,1104,0)
(329,327,0)
(1232,1378,0)
(440,2686,0)
(1332,17,0)
(410,2674,0)
(1124,1526,0)
(1741,1901,0)
(873,2650,0)
(2095,1056,0)
(1380,216,0)
(196,1160,0)
(63,267,0)
(418,1475,0)
(2850,1895,0)
(155,351,0)
(1016,1458,0)
(2274,1700,0)
(123,593,0)
(2720,1160,0)
(2785,256,0)
(2058,1991,0)
(2758,681,0)
(1996,2843,0)
(117,2480,0)
(2130,980,0)
(126,2067,0)
(1010,2106,0)
(2271,2885,0)
(860,1901,0)
(2307,867,0)
(2759,107,0)
(2601,776,0)
(2515,2118,0)
(1517,1678,0)
(819,2833,0)
(1910,2786,0)
(1162,1407,0)
(410,371,0)
(1187,1490,0)
(776,117,0)
(2170,1700,0)
(836,2650,0)
(1477,1686,0)
(2704,547,0)
(1587,1759,0)
(2785,2139,0)
(1762,665,0)
(126,1530,0)
(2317,1874,0)
(10,1104,0)
(798,1577,0)
(2713,2935,0)
(569,685,0)
(2824,3002,0)
(2271,2921,0)
(2251,237,0)
(2130,2755,0)
(1453,2141,0)
(1430,1566,0)
(50,2574,0)
(2849,46,0)
(90,1948,0)
(2611,1200,0)
(1838,2637,0)
(126,2699,0)
(2718,1072,0)
(463,1265,0)
(117,187,0)
(1008,1302,0)
(1583,1104,0)
(671,1700,0)
(1468,1378,0)
(1664,1209,0)
(1503,596,0)
(2978,1135,0)
(663,1991,0)
(2462,2143,0)
(1860,1156,0)
(473,2167,0)
(1822,1884,0)
(1252,820,0)
(644,1160,0)
(1330,980,0)
(2725,905,0)
(608,2347,0)
(2216,1190,0)
(1162,1074,0)
(756,473,0)
(989,1953,0)
(1927,1962,0)
(2015,1773,0)
(15,2128,0)
(1886,59,0)
(1994,1092,0)
(1925,2888,0)
(2785,1349,0)
(1911,2512,0)
(1822,2048,0)
(1860,2500,0)
(2052,196,0)
(937,534,0)
(2964,1745,0)
(2964,2837,0)
(126,2921,0)
(354,2256,0)
(1121,2773,0)
(1860,2674,0)
(1594,2512,0)
(2130,1074,0)
(1503,1634,0)
(1687,1530,0)
(2317,2048,0)
(725,844,0)
(398,1250,0)
(1729,777,0)
(2473,2519,0)
(1348,513,0)
(2551,726,0)
(354,256,0)
(1950,1417,0)
(1654,1892,0)
(2946,979,0)
(1823,111,0)
(1703,396,0)
(2650,1186,0)
(2607,1874,0)
(2266,2187,0)
(1753,1162,0)
(2271,472,0)
(2650,1074,0)
(567,1842,0)
(658,2526,0)
(2146,1845,0)
(1625,1195,0)
(1822,1074,0)
(449,16,0)
(1687,1884,0)
(2713,327,0)
(637,1318,0)
(1524,2577,0)
(2313,2953,0)
(2041,1179,0)
(2271,110,0)
(926,2128,0)
(2130,2174,0)
(540,1700,0)
(1843,2143,0)
(1296,1700,0)
(877,2067,0)
(1422,342,0)
(131,1700,0)
(1827,1495,0)
(2130,2447,0)
(1377,2650,0)
(1687,165,0)
(482,2320,0)
(290,1991,0)
(774,2149,0)
(1509,1162,0)
(1274,2167,0)
(1197,2519,0)
(1129,1538,0)
(1786,1634,0)
(1124,1476,0)
(2650,2755,0)
(1690,1302,0)
(2290,1236,0)
(1381,1931,0)
(2893,2971,0)
(916,869,0)
(2883,2729,0)
(2238,1225,0)
(1511,38,0)
(1071,620,0)
(2713,685,0)
(1727,1700,0)
(1448,583,0)
(1503,1900,0)
(2020,131,0)
(338,2272,0)
(1076,2541,0)
(2964,472,0)
(1963,499,0)
(126,1074,0)
(1315,1074,0)
(845,627,0)
(2809,2174,0)
(1207,1160,0)
(1659,2607,0)
(2607,327,0)
(754,534,0)
(1503,1474,0)
(569,980,0)
(2474,1232,0)
(969,2320,0)
(1475,1351,0)
(410,1856,0)
(2556,383,0)
(1135,1700,0)
(835,1085,0)
(1553,2330,0)
(1330,2921,0)
(222,1899,0)
(3027,2914,0)
(1583,2582,0)
(1999,185,0)
(97,3011,0)
(1478,1700,0)
(1051,1892,0)
(1575,2579,0)
(126,1974,0)
(1068,2843,0)
(858,2700,0)
(2927,2272,0)
(762,1474,0)
(1330,1991,0)
(354,2458,0)
(2043,3000,0)
(721,713,0)
(2964,2755,0)
(1546,313,0)
(1503,371,0)
(2030,2514,0)
(1477,499,0)
(1209,1197,0)
(926,3002,0)
(1477,1214,0)
(1260,11,0)
(2299,259,0)
(2532,1571,0)
(2551,149,0)
(1963,1686,0)
(1807,1174,0)
(181,2942,0)
(329,980,0)
(2265,1987,0)
(1802,2621,0)
(2096,2143,0)
(300,499,0)
(2356,1526,0)
(1822,1407,0)
(735,926,0)
(355,150,0)
(710,1700,0)
(1860,2943,0)
(616,38,0)
(1687,1474,0)
(1741,1686,0)
(2047,1659,0)
(1330,2155,0)
(2260,2866,0)
(2387,2607,0)
(1996,1901,0)
(1326,1104,0)
(2936,764,0)
(2271,2174,0)
(2130,2067,0)
(1630,1283,0)
(2320,2519,0)
(1566,475,0)
(860,1534,0)
(1844,312,0)
(2893,1568,0)
(2856,2344,0)
(896,1901,0)
(2317,1634,0)
(354,2943,0)
(1963,2699,0)
(2881,2582,0)
(157,1534,0)
(1285,1534,0)
(2551,2921,0)
(2134,625,0)
(1786,1946,0)
(2305,2705,0)
(1667,550,0)
(1414,873,0)
(1212,2233,0)
(1687,3041,0)
(1330,2588,0)
(1653,135,0)
(1786,2155,0)
(1538,1073,0)
(2457,2030,0)
(2607,1972,0)
(1592,1907,0)
(1156,1700,0)
(126,165,0)
(1950,2256,0)
(354,1074,0)
(2607,2155,0)
(1753,1931,0)
(678,222,0)
(2271,187,0)
(126,1417,0)
(2759,2458,0)
(1432,302,0)
(1315,187,0)
(2899,1729,0)
(1432,1991,0)
(2400,2837,0)
(3000,713,0)
(860,2519,0)
(1741,1526,0)
(708,1960,0)
(868,1700,0)
(634,1700,0)
(2877,2272,0)
(1668,1533,0)
(245,2619,0)
(318,2867,0)
(144,2833,0)
(2650,2588,0)
(2564,2406,0)
(1821,1318,0)
(1786,2067,0)
(2893,1692,0)
(526,1700,0)
(1326,2921,0)
(267,63,0)
(1395,375,0)
(2257,1700,0)
(710,2321,0)
(2330,137,0)
(477,2948,0)
(2759,685,0)
(2794,2042,0)
(876,2779,0)
(1503,1137,0)
(2123,2130,0)
(2053,2737,0)
(2551,1974,0)
(2809,2674,0)
(1437,2619,0)
(1225,2238,0)
(267,1991,0)
(2703,1864,0)
(569,2992,0)
(2893,1634,0)
(917,1700,0)
(2551,1901,0)
(126,1972,0)
(1865,2270,0)
(1024,1842,0)
(2909,1370,0)
(1128,549,0)
(569,327,0)
(1879,470,0)
(1289,1967,0)
(1786,2943,0)
(719,1396,0)
(1786,2139,0)
(1526,359,0)
(128,2916,0)
(2760,1104,0)
(942,1161,0)
(734,1124,0)
(2975,2687,0)
(569,1074,0)
(1815,1901,0)
(2182,2239,0)
(1861,774,0)
(2526,658,0)
(1931,1416,0)
(2541,117,0)
(1860,1377,0)
(1715,105,0)
(540,117,0)
(2910,1078,0)
(2378,2927,0)
(157,1901,0)
(122,1931,0)
(2437,624,0)
(54,1862,0)
(1815,1568,0)
(1815,898,0)
(2722,1534,0)
(1125,839,0)
(2893,1074,0)
(955,17,0)
(1335,2287,0)
(2594,1991,0)
(1113,2990,0)
(1260,17,0)
(1724,979,0)
(2311,3001,0)
(1815,2745,0)
(1533,2133,0)
(881,137,0)
(2662,1953,0)
(1349,117,0)
(1093,1700,0)
(2809,327,0)
(2802,99,0)
(152,2881,0)
(1917,117,0)
(2995,1167,0)
(768,2158,0)
(2059,1416,0)
(884,1331,0)
(1932,2731,0)
(2076,1330,0)
(1282,734,0)
(542,1156,0)
(2905,150,0)
(812,62,0)
(1162,2930,0)
(2489,1336,0)
(1013,354,0)
(2785,1856,0)
(1531,1175,0)
(1822,2971,0)
(1909,750,0)
(1326,377,0)
(2040,1343,0)
(2586,2133,0)
(2950,839,0)
(2953,2313,0)
(2975,1125,0)
(1874,2594,0)
(1815,11,0)
(1024,2017,0)
(2594,503,0)
(1727,2348,0)
(1065,868,0)
(2571,120,0)
(2798,1700,0)
(569,1013,0)
(635,3029,0)
(3025,2649,0)
(538,2167,0)
(876,1634,0)
(2637,226,0)
(569,3041,0)
(1330,2930,0)
(2952,266,0)
(2759,1875,0)
(2631,1901,0)
(2625,35,0)
(2713,1474,0)
(2281,771,0)
(2900,302,0)
(3033,2328,0)
(2759,2441,0)
(388,1423,0)
(1162,2935,0)
(1397,1160,0)
(2964,165,0)
(2181,592,0)
(1330,2935,0)
(2993,2635,0)
(2860,801,0)
(2551,2755,0)
(470,1087,0)
(496,3002,0)
(1962,1917,0)
(2432,819,0)
(3004,1890,0)
(31,2272,0)
(2831,1741,0)
(569,912,0)
(2057,1517,0)
(1226,83,0)
(2903,137,0)
(1771,534,0)
(1456,2118,0)
(2588,1822,0)
(2317,1056,0)
(1330,1156,0)
(1412,898,0)
(647,1373,0)
(851,2057,0)
(126,2971,0)
(237,2251,0)
(1351,1526,0)
(1822,1417,0)
(2430,540,0)
(1950,3041,0)
(1338,69,0)
(2909,223,0)
(2789,17,0)
(394,2434,0)
(2809,472,0)
(1281,2393,0)
(1116,53,0)
(1434,2997,0)
(1335,2582,0)
(368,538,0)
(569,2755,0)
(117,472,0)
(2713,256,0)
(902,1162,0)
(2596,2826,0)
(2650,1349,0)
(2713,1349,0)
(2607,1634,0)
(126,1056,0)
(2722,2843,0)
(2539,835,0)
(329,2441,0)
(1720,2854,0)
(476,1835,0)
(2089,1692,0)
(2019,2540,0)
(211,503,0)
(2785,545,0)
(1467,1700,0)
(410,2943,0)
(81,1618,0)
(2305,2128,0)
(2650,545,0)
(1687,1875,0)
(1933,505,0)
(652,1534,0)
(2713,2222,0)
(2461,2524,0)
(158,2839,0)
(2964,1974,0)
(859,53,0)
(1775,2858,0)
(117,2885,0)
(2130,1960,0)
(126,2139,0)
(376,593,0)
(2775,336,0)
(740,2834,1)
(126,1476,1)
(94,2733,1)
(884,1331,1)
(1162,1875,1)
(600,1700,1)
(1242,1452,1)
(1437,1465,1)
(541,2167,1)
(1326,1568,1)
(1050,1749,1)
(2487,1072,1)
(2964,2930,1)
(1162,906,1)
(1045,1892,1)
(2785,2588,1)
(1939,1036,1)
(2086,2376,1)
(2833,2519,1)
(1643,2689,1)
(1963,84,1)
(1301,2542,1)
(1786,545,1)
(1260,1534,1)
(583,137,1)
(1312,951,1)
(108,934,1)
(2271,2614,1)
(363,1426,1)
(2607,1156,1)
(2010,1476,1)
(1338,1188,1)
(1302,2272,1)
(2556,2402,1)
(2777,223,1)
(1809,2125,1)
(876,1686,1)
(944,2981,1)
(3004,149,1)
(1368,1671,1)
(2222,1700,1)
(2492,958,1)
(1698,1161,1)
(2317,1568,1)
(440,1989,1)
(717,1169,1)
(1786,1856,1)
(1421,69,1)
(2160,1474,1)
(1330,2921,1)
(1815,1874,1)
(691,117,1)
(2759,371,1)
(319,17,1)
(92,2597,1)
(644,117,1)
(533,2273,1)
(2713,2048,1)
(1887,2937,1)
(1786,3041,1)
(1331,1700,1)
(2930,1964,1)
(926,1810,1)
(1873,737,1)
(1315,1568,1)
(2551,2588,1)
(1503,402,1)
(1033,2352,1)
(2650,1900,1)
(876,2843,1)
(1124,499,1)
(876,1534,1)
(1860,1377,1)
(1922,2784,1)
(1786,1474,1)
(1186,2167,1)
(1332,84,1)
(2785,1692,1)
(2271,2447,1)
(2796,977,1)
(2639,268,1)
(1687,2480,1)
(2964,906,1)
(1162,2067,1)
(1315,472,1)
(1786,1692,1)
(681,2758,1)
(1989,1700,1)
(2152,2500,1)
(876,1013,1)
(1687,2943,1)
(2318,904,1)
(2312,1885,1)
(1465,2619,1)
(1307,1670,1)
(2969,2401,1)
(2271,377,1)
(763,1793,1)
(1260,1124,1)
(329,980,1)
(2317,2155,1)
(1894,2072,1)
(1860,1530,1)
(2910,104,1)
(1860,726,1)
(1114,1235,1)
(1326,2588,1)
(1162,327,1)
(2893,1013,1)
(2132,1061,1)
(1601,2807,1)
(1822,2930,1)
(1815,187,1)
(329,596,1)
(117,2921,1)
(1687,726,1)
(1804,757,1)
(569,327,1)
(1197,1686,1)
(1285,17,1)
(133,1897,1)
(2607,685,1)
(975,1935,1)
(2458,232,1)
(1559,767,1)
(494,935,1)
(2607,2519,1)
(2981,880,1)
(2162,1736,1)
(442,1700,1)
(2096,698,1)
(1029,1539,1)
(1860,596,1)
(1326,2755,1)
(776,2650,1)
(2759,596,1)
(1786,1960,1)
(2996,970,1)
(91,2982,1)
(2713,2745,1)
(1268,1534,1)
(1285,1476,1)
(326,1683,1)
(342,1422,1)
(1877,2650,1)
(2722,1534,1)
(134,876,1)
(662,2548,1)
(2271,1960,1)
(981,2500,1)
(157,2699,1)
(1294,641,1)
(2607,1056,1)
(2964,2885,1)
(1786,1377,1)
(820,2749,1)
(1950,912,1)
(478,1442,1)
(1747,892,1)
(1326,165,1)
(2551,980,1)
(1576,1842,1)
(1890,3004,1)
(2809,1960,1)
(1070,2301,1)
(2000,873,1)
(2167,2633,1)
(671,1162,1)
(117,2614,1)
(487,2864,1)
(2794,1499,1)
(2875,1205,1)
(2984,475,1)
(1860,1476,1)
(2591,2672,1)
(2317,2067,1)
(2556,1201,1)
(1156,1003,1)
(2758,1700,1)
(1824,1942,1)
(2789,1901,1)
(1342,17,1)
(2990,1713,1)
(2551,2441,1)
(1675,1193,1)
(876,2745,1)
(876,2222,1)
(817,644,1)
(2785,1186,1)
(1503,2779,1)
(705,910,1)
(2449,1904,1)
(1693,2972,1)
(410,2174,1)
(1634,176,1)
(926,1901,1)
(806,905,1)
(2713,2458,1)
(1326,2921,1)
(2248,1700,1)
(1503,2943,1)
(9,2503,1)
(220,1880,1)
(2269,1414,1)
(2271,1156,1)
(2130,1056,1)
(2444,1265,1)
(958,1171,1)
(198,1700,1)
(1687,2233,1)
(1930,2446,1)
(1162,1137,1)
(1326,1974,1)
(2785,377,1)
(2413,1959,1)
(400,2650,1)
(2705,137,1)
(117,2458,1)
(354,187,1)
(410,1634,1)
(2945,202,1)
(1786,1874,1)
(1866,260,1)
(630,2108,1)
(285,2737,1)
(148,2610,1)
(1503,596,1)
(2317,1900,1)
(959,2807,1)
(1764,2676,1)
(2759,187,1)
(2370,1019,1)
(2217,368,1)
(57,1560,1)
(1502,441,1)
(1907,117,1)
(2130,1417,1)
(1950,1946,1)
(378,550,1)
(804,1398,1)
(1545,2270,1)
(1725,2702,1)
(1330,1960,1)
(1989,2970,1)
(1881,977,1)
(117,1377,1)
(3009,2253,1)
(2343,503,1)
(1053,1854,1)
(215,2143,1)
(2893,107,1)
(860,1265,1)
(708,3011,1)
(691,2809,1)
(2607,1074,1)
(2791,2167,1)
(1860,1349,1)
(1917,117,1)
(411,2901,1)
(734,1534,1)
(1822,1745,1)
(2003,2761,1)
(2317,2233,1)
(1950,1377,1)
(1503,1568,1)
(2409,1757,1)
(2387,895,1)
(700,2380,1)
(505,1700,1)
(1439,1903,1)
(473,150,1)
(2317,2885,1)
(1971,135,1)
(2320,482,1)
(2540,2019,1)
(1258,1700,1)
(860,84,1)
(1822,1874,1)
(1073,1700,1)
(2650,2174,1)
(926,84,1)
(2607,165,1)
(2130,1156,1)
(2995,2980,1)
(1361,1460,1)
(1002,1817,1)
(2545,1203,1)
(392,1388,1)
(1197,2843,1)
(1687,1377,1)
(1892,1051,1)
(2234,1507,1)
(1330,3041,1)
(2976,2777,1)
(1687,2745,1)
(2713,187,1)
(2317,2674,1)
(598,2014,1)
(2836,1471,1)
(224,1534,1)
(902,1931,1)
(307,2010,1)
(1421,2757,1)
(1503,2155,1)
(881,829,1)
(2130,2930,1)
(306,849,1)
(2991,639,1)
(2824,2061,1)
(952,778,1)
(1099,1224,1)
(117,2441,1)
(2964,2588,1)
(2785,468,1)
(1860,1056,1)
(1190,2216,1)
(2406,2241,1)
(126,2745,1)
(136,2639,1)
(553,2572,1)
(2809,1875,1)
(867,3015,1)
(2451,172,1)
(2417,2369,1)
(1229,1755,1)
(987,547,1)
(126,1634,1)
(2805,655,1)
(1330,1407,1)
(908,1939,1)
(540,1160,1)
(2466,2650,1)
(2010,1526,1)
(1786,2048,1)
(237,367,1)
(10,2582,1)
(124,2763,1)
(547,2704,1)
(122,515,1)
(329,256,1)
(2713,2837,1)
(410,1884,1)
(1019,382,1)
(218,2080,1)
(1654,1045,1)
(2130,2441,1)
(251,848,1)
(2573,1262,1)
(1165,1162,1)
(2320,1526,1)
(1326,1856,1)
(373,962,1)
(2148,1396,1)
(1473,1883,1)
(1503,2139,1)
(2947,200,1)
(138,1582,1)
(1687,685,1)
(833,291,1)
(1950,2745,1)
(2429,1781,1)
(2964,545,1)
(371,1736,1)
(2392,1700,1)
(117,472,1)
(2893,2614,1)
(2858,1775,1)
(2789,2519,1)
(2816,440,1)
(2894,336,1)
(2337,2586,1)
(2650,468,1)
(1654,1892,1)
(1772,1967,1)
(2370,1700,1)
(1260,2500,1)
(2421,2444,1)
(2631,2500,1)
(1197,387,1)
(400,833,1)
(511,2472,1)
(117,898,1)
(200,177,1)
(1125,503,1)
(1394,1353,1)
(1494,4,1)
(1413,3034,1)
(1503,2885,1)
(1185,2621,1)
(1977,2984,1)
(2271,468,1)
(1162,84,1)
(2387,2607,1)
(1741,1686,1)
(1293,1012,1)
(354,1875,1)
(626,69,1)
(840,3000,1)
(1464,856,1)
(2953,1160,1)
(1503,371,1)
(2441,2270,1)
(1467,2436,1)
(252,468,1)
(1162,1530,1)
(445,515,1)
(569,1692,1)
(463,445,1)
(1117,2292,1)
(1056,2095,1)
(1199,2038,1)
(332,1034,1)
(1730,938,1)
(2257,1700,1)
(2113,559,1)
(460,2280,1)
(807,989,1)
(1687,2755,1)
(31,2272,1)
(126,1568,1)
(354,2480,1)
(441,1415,1)
(2713,1407,1)
(2652,612,1)
(1858,2836,1)
(1860,2588,1)
(1397,117,1)
(2356,1901,1)
(126,1137,1)
(2543,223,1)
(1217,17,1)
(1833,1935,1)
(410,1974,1)
(2650,2755,1)
(321,2343,1)
(1495,2500,1)
(692,742,1)
(608,2809,1)
(887,2614,1)
(1326,906,1)
(2759,2745,1)
(978,141,1)
(2607,1901,1)
(776,2809,1)
(310,2934,1)
(876,596,1)
(3001,1700,1)
(2351,2713,1)
(1365,2272,1)
(317,117,1)
(2500,979,1)
(2964,2174,1)
(1507,334,1)
(1741,84,1)
(269,2345,1)
(1461,1552,1)
(876,726,1)
(2722,17,1)
(2109,1686,1)
(2759,3041,1)
(1822,2048,1)
(60,1438,1)
(2807,117,1)
(1162,2233,1)
(2785,1349,1)
(1889,358,1)
(562,1643,1)
(2393,1281,1)
(1162,2971,1)
(2071,2178,1)
(969,2320,1)
(1124,2500,1)
(531,1183,1)
(1206,1873,1)
(2317,912,1)
(485,1160,1)
(113,2479,1)
(2365,405,1)
(1311,1700,1)
(535,2988,1)
(734,1784,1)
(2809,2971,1)
(1687,371,1)
(1304,1700,1)
(1315,2441,1)
(2192,120,1)
(1950,402,1)
(2893,2447,1)
(2352,805,1)
(1596,1197,1)
(2456,752,1)
(2964,3041,1)
(2759,801,1)
(2249,2203,1)
(532,13,1)
(126,2256,1)
(2392,1199,1)
(1348,583,1)
(1135,2978,1)
(1495,1686,1)
(599,2167,1)
(733,1245,1)
(2631,1476,1)
(2317,726,1)
(567,69,1)
(812,62,1)
(1389,277,1)
(117,2139,1)
(1315,44,1)
(1780,2403,1)
(1326,1946,1)
(2759,256,1)
(329,1568,1)
(1618,81,1)
(1503,165,1)
(1315,906,1)
(364,1277,1)
(1162,980,1)
(2387,659,1)
(2607,726,1)
(2598,365,1)
(876,468,1)
(2803,2762,1)
(1452,1837,1)
(2426,2123,1)
(2964,2921,1)
(1162,3041,1)
(2593,2590,1)
(479,2035,1)
(2684,1481,1)
(1971,1087,1)
(2513,1692,1)
(2317,2458,1)
(2595,2272,1)
(1044,2863,1)
(1495,2699,1)
(2530,2638,1)
(2675,1160,1)
(1380,216,1)
(2594,503,1)
(990,1927,1)
(2643,497,1)
(2050,1789,1)
(286,1856,1)
(2571,2889,1)
(1503,1874,1)
(991,2884,1)
(876,912,1)
(2867,1931,1)
(654,2311,1)
(1161,942,1)
(1669,2158,1)
(2650,2155,1)
(789,2319,1)
(876,1530,1)
(2809,842,1)
(743,490,1)
(1845,2128,1)
(3,407,1)
(911,1842,1)
(1778,1686,1)
(2809,980,1)
(679,111,1)
(517,131,1)
(599,223,1)
(2694,2209,1)
(2485,1751,1)
(266,931,1)
(329,2174,1)
(2865,1889,1)
(117,1745,1)
(2650,801,1)
(1326,107,1)
(2964,110,1)
(569,2935,1)
(3004,2519,1)
(2893,1407,1)
(2317,2745,1)
(1285,2843,1)
(1503,1530,1)
(278,1367,1)
(77,634,1)
(2971,1806,1)
(1822,1126,1)
(2607,1526,1)
(529,2850,1)
(1815,2174,1)
(2115,2519,1)
(1423,1700,1)
(672,924,1)
(1468,878,1)
(1583,2582,1)
(539,2991,1)
(1822,3041,1)
(835,2809,1)
(38,616,1)
(2713,685,1)
(2769,1727,1)
(126,2411,1)
(1085,835,1)
(2399,11,1)
(2996,1268,1)
(2716,2630,1)
(1795,1229,1)
(876,402,1)
(1594,722,1)
(1074,3000,1)
(2809,2155,1)
(1767,3028,1)
(2713,912,1)
(1950,1960,1)
(1315,110,1)
(2650,256,1)
(1283,117,1)
(317,2343,1)
(33,523,1)
(2271,2745,1)
(2343,69,1)
(1699,1700,1)
(385,2018,1)
(2747,2868,1)
(1162,472,1)
(621,739,1)
(1678,1517,1)
(2759,1960,1)
(126,1875,1)
(2809,1692,1)
(2809,2921,1)
(2713,2222,1)
(1815,2755,1)
(2320,1686,1)
(2320,1901,1)
(2317,980,1)
(2300,486,1)
(1846,267,1)
(1963,149,1)
(1687,1530,1)
(2343,839,1)
(2724,2312,1)
(876,2519,1)
(925,2293,1)
(1950,1568,1)
(2224,2368,1)
(440,2686,1)
(1696,2634,1)
(810,2272,1)
(2759,468,1)
(1341,2566,1)
(1298,1294,1)
(2573,1092,1)
(410,912,1)
(1351,1581,1)
(2937,1814,1)
(2964,187,1)
(117,2155,1)
(99,2802,1)
(2014,2921,1)
(1351,11,1)
(496,557,1)
(1575,2579,1)
(1326,801,1)
(1854,1338,1)
(2888,2331,1)
(1298,1700,1)
(69,1842,1)
(1326,726,1)
(126,1686,1)
(2685,2925,1)
(955,1901,1)
(1315,2048,1)
(329,165,1)
(1859,2372,1)
(25,2213,1)
(135,2719,1)
(1978,1085,1)
(669,2174,1)
(1815,912,1)
(2137,1230,1)
(1602,1940,1)
(1961,1323,1)
(1138,712,1)
(129,246,1)
(2317,2588,1)
(569,2885,1)
(1295,384,1)
(399,1265,1)
(1197,17,1)
(2236,1335,1)
(1963,11,1)
(2961,1924,1)
(1495,499,1)
(1574,1537,1)
(695,1407,1)
(2018,1774,1)
(682,1135,1)
(1871,419,1)
(2848,1581,1)
(2759,2174,1)
(1950,2943,1)
(1460,535,1)
(1881,1214,1)
(2759,2480,1)
(1884,1032,1)
(642,1686,1)
(1401,1829,1)
(2397,2553,1)
(1786,2943,1)
(608,117,1)
(2607,2139,1)
(1815,685,1)
(1355,3,1)
(1877,1160,1)
(2650,2222,1)
(117,685,1)
(896,1988,1)
(1477,2843,1)
(2134,625,1)
(860,2699,1)
(629,487,1)
(2974,210,1)
(2713,1960,1)
(1509,1162,1)
(2833,1526,1)
(2296,1990,1)
(2915,1545,1)
(2202,1078,1)
(356,1702,1)
(854,1541,1)
(2809,1137,1)
(1503,976,1)
(1477,1534,1)
(2893,2155,1)
(1162,2935,1)
(2650,2971,1)
(2809,472,1)
(2387,2765,1)
(2271,2674,1)
(2343,1842,1)
(1786,107,1)
(1815,2233,1)
(2801,2251,1)
(971,533,1)
(2607,107,1)
(211,503,1)
(354,165,1)
(876,2935,1)
(341,1890,1)
(3041,1700,1)
(779,1122,1)
(455,745,1)
(1860,912,1)
(2631,1901,1)
(44,2799,1)
(1889,659,1)
(703,1344,1)
(2785,2048,1)
(367,2138,1)
(1449,2467,1)
(1877,1700,1)
(2053,2741,1)
(354,2256,1)
(185,1018,1)
(876,2755,1)
(1503,1417,1)
(289,839,1)
(1278,2544,1)
(2010,1686,1)
(2273,764,1)
(2130,1349,1)
(2601,825,1)
(1950,2779,1)
(788,236,1)
(2785,1074,1)
(196,1639,1)
(1532,1700,1)
(869,129,1)
(1687,2155,1)
(134,2413,1)
(548,769,1)
(354,2048,1)
(1778,499,1)
(569,1156,1)
(2055,1534,1)
(263,1604,1)
(900,253,1)
(1180,2843,1)
(848,2522,1)
(2752,2624,1)
(1503,898,1)
(940,1853,1)
(2854,1700,1)
(1477,11,1)
(2236,1326,1)
(1332,149,1)
(1693,2551,1)
(410,1900,1)
(2124,1343,1)
(414,2552,1)
(1048,69,1)
(1093,1162,1)
(1963,1686,1)
(2607,2233,1)
(2270,2478,1)
(126,256,1)
(1860,2500,1)
(549,375,1)
(1860,187,1)
(1264,2186,1)
(1326,2222,1)
(1232,1214,1)
(2152,2292,1)
(347,2480,1)
(2130,906,1)
(781,875,1)
(639,1305,1)
(2130,980,1)
(1687,2837,1)
(2938,2258,1)
(2759,2222,1)
(409,1640,1)
(2607,801,1)
(2004,2482,1)
(354,1056,1)
(2713,1900,1)
(1662,3005,1)
(1815,1526,1)
(2360,1866,1)
(2466,2677,1)
(2785,1013,1)
(2750,1046,1)
(609,1024,1)
(2248,208,1)
(1950,1407,1)
(1211,77,1)
(567,503,1)
(416,789,1)
(1330,1417,1)
(1410,1657,1)
(2550,2773,1)
(569,1568,1)
(2686,1700,1)
(757,2650,1)
(2759,1530,1)
(1335,2933,1)
(1268,1476,1)
(1330,2779,1)
(2930,1700,1)
(586,747,1)
(876,2480,1)
(1652,1700,1)
(454,82,1)
(1860,801,1)
(1326,912,1)
(2012,863,1)
(1093,515,1)
(1330,1745,1)
(1068,1686,1)
(2594,2143,1)
(2709,1274,1)
(2611,601,1)
(462,260,1)
(1351,1901,1)
(2607,1692,1)
(2924,1108,1)
(2343,2143,1)
(104,2481,1)
(2130,596,1)
(1068,1881,1)
(2551,2458,1)
(1843,2143,1)
(2800,933,1)
(1702,306,1)
(652,1686,1)
(2706,2245,1)
(2320,149,1)
(1371,749,1)
(2820,94,1)
(1822,377,1)
(1162,1972,1)
(921,57,1)
(1143,895,1)
(829,685,1)
(2368,2521,1)
(2785,980,1)
(2009,2247,1)
(652,1476,1)
(126,2447,1)
(876,1526,1)
(2795,1907,1)
(2785,2447,1)
(1822,1972,1)
(2713,1417,1)
(2863,2872,1)
(1068,499,1)
(662,2857,1)
(2346,2697,1)
(1753,3023,1)
(8,1700,1)
(2322,987,1)
(774,2149,1)
(1674,820,1)
(410,801,1)
(2479,1406,1)
(1315,980,1)
(126,1972,1)
(2869,2090,1)
(2785,1884,1)
(2387,2270,1)
(211,1842,1)
(2951,2154,1)
(296,1109,1)
(624,2437,1)
(266,471,1)
(1303,2774,1)
(1883,522,1)
(876,107,1)
(194,2128,1)
(2109,17,1)
(1094,1579,1)
(2758,2650,1)
(2317,2930,1)
(2555,1420,1)
(2809,1417,1)
(117,327,1)
(329,906,1)
(1468,1214,1)
(2109,1534,1)
(890,2678,1)
(1517,2057,1)
(2860,223,1)
(2085,158,1)
(1928,806,1)
(283,1381,1)
(1944,2854,1)
(354,2139,1)
(1701,1538,1)
(2272,1257,1)
(2650,2614,1)
(1330,165,1)
(2233,1953,1)
(2754,1700,1)
(2993,2635,1)
(1963,2500,1)
(307,2134,1)
(2826,2272,1)
(835,1160,1)
(2380,445,1)
(338,2272,1)
(2893,545,1)
(1432,79,1)
(1996,1124,1)
(1506,1913,1)
(2749,1252,1)
(1167,2995,1)
(117,1530,1)
(2603,932,1)
(1064,687,1)
(2759,1874,1)
(329,1972,1)
(245,42,1)
(1503,110,1)
(926,499,1)
(1950,980,1)
(2733,2288,1)
(1658,466,1)
(2785,1530,1)
(1815,545,1)
(2713,1137,1)
(250,494,1)
(2471,1636,1)
(2317,377,1)
(1121,1858,1)
(101,1700,1)
(1860,2779,1)
(569,898,1)
(1226,2272,1)
(2340,2212,1)
(1315,2447,1)
(2635,689,1)
(1492,2679,1)
(2659,1700,1)
(2785,1946,1)
(1330,545,1)
(2127,1700,1)
(1860,2067,1)
(1860,1534,1)
(569,545,1)
(2492,2525,1)
(109,25,1)
(520,620,1)
(889,1403,1)
(474,283,1)
(2128,443,1)
(1860,472,1)
(2966,1004,1)
(1647,2800,1)
(2331,1700,1)
(2998,562,1)
(1949,2326,1)
(1880,381,1)
(1860,11,1)
(1195,1059,1)
(126,371,1)
(1963,2195,1)
(1963,1476,1)
(436,1805,1)
(726,102,1)
(1786,187,1)
(762,234,1)
(1330,726,1)
(2271,1884,1)
(2964,912,1)
(456,1804,1)
(1285,149,1)
(2905,355,1)
(329,44,1)
(1996,2706,1)
(144,2931,1)
(2022,137,1)
(1554,2167,1)
(1708,412,1)
(1815,165,1)
(1315,2233,1)
(1093,75,1)
(680,2121,1)
(1315,1417,1)
(1563,1318,1)
(1908,545,1)
(487,102,1)
(1495,84,1)
(2916,2600,1)
(1180,149,1)
(78,2998,1)
(222,1899,1)
(2667,493,1)
(1977,1511,1)
(164,129,1)
(554,952,1)
(902,1162,1)
(1315,726,1)
(1326,402,1)
(764,2272,1)
(2964,1407,1)
(859,1502,1)
(1330,2233,1)
(1822,327,1)
(2964,2447,1)
(621,628,1)
(1786,1974,1)
(1906,604,1)
(2558,2071,1)
(117,2930,1)
(2893,726,1)
(593,659,1)
(2130,2480,1)
(2666,1697,1)
(1963,2519,1)
(2843,1808,1)
(219,1770,1)
(2607,2155,1)
(1608,1206,1)
(8,722,1)
(126,912,1)
(1732,1674,1)
(2317,1137,1)
(892,185,1)
(1003,542,1)
(1727,1767,1)
(1012,1985,1)
(3016,2349,1)
(1127,2425,1)
(1639,1685,1)
(2042,2787,1)
(329,1974,1)
(866,2274,1)
(2551,2233,1)
(1316,1273,1)
(2707,1030,1)
(2656,2375,1)
(2158,1208,1)
(1959,1614,1)
(2893,596,1)
(2311,1865,1)
(1913,123,1)
(2489,1783,1)
(2077,2809,1)
(1623,2936,1)
(569,1530,1)
(2118,2272,1)
(289,69,1)
(1624,318,1)
(1603,1162,1)
(2926,1132,1)
(1950,371,1)
(918,1777,1)
(1972,1700,1)
(13,2490,1)
(2356,2519,1)
(284,2692,1)
(2718,109,1)
(2436,2583,1)
(1503,912,1)
(475,2009,1)
(129,1160,1)
(2489,1265,1)
(2809,1056,1)
(1330,2971,1)
(2649,1425,1)
(2277,621,1)
(1162,2921,1)
(2650,1946,1)
(2867,1624,1)
(1822,2614,1)
(979,979,1)
(1687,2971,1)
(1351,2519,1)
(2254,1079,1)
(207,1657,1)
(786,156,1)
(222,1442,1)
(842,3041,1)
(1503,2222,1)
(2964,2971,1)
(410,1407,1)
(2130,726,1)
(1801,643,1)
(1255,1167,1)
(3015,1468,1)
(1315,2674,1)
(802,1469,1)
(687,3002,1)
(2551,1974,1)
(1399,1244,1)
(117,1074,1)
(2502,284,1)
(1018,1999,1)
(2133,1700,1)
(2964,1137,1)
(1588,1627,1)
(1705,1271,1)
(2785,2885,1)
(1860,468,1)
(2964,107,1)
(2989,2428,1)
(2882,1796,1)
(329,2943,1)
(3025,1442,1)
(2317,1972,1)
(1865,2607,1)
(1822,2458,1)
(2271,2067,1)
(2130,2779,1)
(382,593,1)
(1125,2259,1)
(1786,1972,1)
(2607,1417,1)
(126,1056,1)
(449,750,1)
(633,2758,1)
(2271,2837,1)
(2650,2048,1)
(410,3041,1)
(794,112,1)
(1217,2519,1)
(2130,1634,1)
(1326,685,1)
(1326,2935,1)
(157,2519,1)
(2211,2132,1)
(2434,394,1)
(445,830,1)
(1315,1875,1)
(2759,1946,1)
(2124,2897,1)
(8,2512,1)
(1232,137,1)
(1268,1686,1)
(2650,1156,1)
(1659,659,1)
(2809,1946,1)
(329,2447,1)
(2103,2094,1)
(1381,151,1)
(1193,2650,1)
(1855,1926,1)
(1755,2423,1)
(1567,722,1)
(1778,2519,1)
(2526,1715,1)
(2152,1476,1)
(2607,1013,1)
(1815,2921,1)
(2893,1874,1)
(1147,2219,1)
(1509,515,1)
(555,2550,1)
(50,2450,1)
(329,1474,1)
(126,2971,1)
(2983,2578,1)
(1238,1160,1)
(1929,2276,1)
(876,1856,1)
(2650,2930,1)
(1259,2162,1)
(187,483,1)
(569,44,1)
(1815,2458,1)
(668,2167,1)
(2695,2502,1)
(1950,1900,1)
(2335,1960,1)
(926,1124,1)
(2607,44,1)
(2897,85,1)
(2271,685,1)
(2271,2139,1)
(2903,1378,1)
(719,167,1)
(1963,1901,1)
(1579,254,1)
(1017,2485,1)
(732,1847,1)
(2857,229,1)
(1753,515,1)
(126,2843,1)
(652,1534,1)
(1117,1414,1)
(2809,110,1)
(289,2143,1)
(2759,2614,1)
(1860,2674,1)
(2675,1700,1)
(843,817,1)
(301,2272,1)
(1776,560,1)
(593,1815,1)
(1566,3009,1)
(765,1700,1)
(117,1712,1)
(1962,1917,1)
(1801,2950,1)
(329,2885,1)
(494,1700,1)
(342,149,1)
(1687,2067,1)
(1026,2308,1)
(1535,1720,1)
(1162,685,1)
(354,1156,1)
(1503,545,1)
(2399,78,1)
(494,3000,1)
(2693,718,1)
(2995,2272,1)
(2713,1013,1)
(1329,1698,1)
(2398,211,1)
(2777,2128,1)
(2758,1160,1)
(1786,2921,1)
(2699,1527,1)
(210,1059,1)
(1110,2433,1)
(2120,2637,1)
(1172,2286,1)
(1021,515,1)
(2964,2458,1)
(1511,280,1)
(612,756,1)
(131,1931,1)
(2650,2745,1)
(2032,2075,1)
(857,1394,1)
(1890,1491,1)
(2130,1972,1)
(1162,2441,1)
(400,1160,1)
(1162,2480,1)
(673,368,1)
(1471,2650,1)
(1595,1723,1)
(1185,95,1)
(388,1951,1)
(687,1761,1)
(2688,2512,1)
(1241,1768,1)
(649,2769,1)
(1315,187,1)
(83,1226,1)
(2247,2726,1)
(1687,2222,1)
(2720,1160,1)
(1124,1901,1)
(215,839,1)
(465,1734,1)
(2102,1700,1)
(22,1953,1)
(2785,1974,1)
(2187,2263,1)
(2677,453,1)
(569,2480,1)
(1325,1671,1)
(1503,1875,1)
(1815,2930,1)
(2650,110,1)
(876,1186,1)
(780,173,1)
(2713,898,1)
(931,1614,1)
(425,1317,1)
(2955,992,1)
(1834,2069,1)
(1330,1972,1)
(867,610,1)
(1326,1377,1)
(2785,110,1)
(1734,2687,1)
(1274,2167,1)
(205,1345,1)
(2946,979,1)
(2343,2950,1)
(157,1534,1)
(1232,1378,1)
(2285,2859,1)
(2787,1228,1)
(1969,2541,1)
(977,954,1)
(2774,2778,1)
(1132,1215,1)
(1530,1098,1)
(1162,1013,1)
(2161,1820,1)
(450,1875,1)
(1996,1581,1)
(2602,2717,1)
(329,327,1)
(2382,420,1)
(1815,110,1)
(117,2174,1)
(1380,2171,1)
(2722,1686,1)
(412,2192,1)
(202,1899,1)
(2612,360,1)
(2271,2779,1)
(334,2424,1)
(2809,726,1)
(2773,117,1)
(820,1700,1)
(809,259,1)
(126,545,1)
(927,2512,1)
(1749,852,1)
(2650,1417,1)
(1264,1440,1)
(1122,329,1)
(1100,2711,1)
(2112,1381,1)
(836,1700,1)
(1330,1530,1)
(3004,2843,1)
(2793,841,1)
(422,2766,1)
(734,17,1)
(1245,2952,1)
(2759,107,1)
(3003,288,1)
(1367,2988,1)
(1185,517,1)
(1782,970,1)
(2943,577,1)
(2220,1938,1)
(2982,810,1)
(2757,1155,1)
(1292,539,1)
(2466,1160,1)
(1932,2924,1)
(2424,1561,1)
(2245,743,1)
(876,2441,1)
(43,838,1)
(38,1442,1)
(2785,2174,1)
(2317,2921,1)
(1330,906,1)
(1945,285,1)
(2580,117,1)
(2317,327,1)
(1048,1842,1)
(2607,11,1)
(268,2143,1)
(1954,604,1)
(1556,179,1)
(1815,2067,1)
(608,1919,1)
(2604,921,1)
(1180,1526,1)
(410,1137,1)
(1950,2458,1)
(1900,479,1)
(707,800,1)
(1162,2930,1)
(74,2272,1)
(971,839,1)
(1374,12,1)
(2151,2253,1)
(2191,2453,1)
(1403,2809,1)
(2356,2500,1)
(2988,2143,1)
(876,3041,1)
(2759,1417,1)
(2022,1214,1)
(1715,105,1)
(1644,2322,1)
(36,1048,1)
(410,1745,1)
(2007,2150,1)
(8,1198,1)
(2205,2511,1)
(1634,1700,1)
(2759,545,1)
(126,2222,1)
(117,1474,1)
(2162,2008,1)
(955,2519,1)
(453,38,1)
(2152,2519,1)
(2077,1160,1)
(1743,1295,1)
(1822,110,1)
(569,2048,1)
(437,245,1)
(876,110,1)
(210,458,1)
(68,2675,1)
(749,126,1)
(876,2048,1)
(2121,1954,1)
(1822,1692,1)
(1326,110,1)
(822,862,1)
(1330,2076,1)
(126,1407,1)
(1950,1875,1)
(1217,1686,1)
(2053,804,1)
(2240,192,1)
(876,2256,1)
(2282,899,1)
(1178,956,1)
(1155,115,1)
(685,2667,1)
(2559,399,1)
(1727,1700,1)
(2447,2603,1)
(1270,2400,1)
(90,707,1)
(2759,1568,1)
(540,2650,1)
(117,980,1)
(513,2022,1)
(2872,1641,1)
(1884,1700,1)
(555,2773,1)
(1293,34,1)
(196,1160,1)
(757,2809,1)
(1444,187,1)
(2689,613,1)
(157,703,1)
(3004,2699,1)
(569,906,1)
(329,2921,1)
(211,705,1)
(1860,2256,1)
(2317,1056,1)
(126,1349,1)
(569,1186,1)
(75,1542,1)
(1089,2950,1)
(539,3009,1)
(2551,1349,1)
(2941,2894,1)
(1786,1530,1)
(2379,1025,1)
(329,1900,1)
(157,2843,1)
(2320,17,1)
(1604,2646,1)
(647,876,1)
(2405,1978,1)
(1503,1186,1)
(1687,1874,1)
(2317,1856,1)
(1208,768,1)
(2317,1186,1)
(2759,1407,1)
(470,1879,1)
(354,2441,1)
(2515,2863,1)
(1330,2935,1)
(2397,652,1)
(704,2615,1)
(524,1630,1)
(2650,1960,1)
(1027,1162,1)
(1805,1842,1)
(2447,932,1)
(974,1862,1)
(2893,1156,1)
(876,1634,1)
(1687,1013,1)
(1911,2339,1)
(2291,1700,1)
(2613,1985,1)
(2542,776,1)
(1822,1137,1)
(1162,726,1)
(354,1013,1)
(631,1887,1)
(1923,300,1)
(2382,2157,1)
(1786,1900,1)
(34,2991,1)
(1860,2921,1)
(655,565,1)
(2713,1530,1)
(1086,1792,1)
(2287,473,1)
(1688,2146,1)
(1324,313,1)
(126,2930,1)
(1996,11,1)
(1046,1243,1)
(107,2128,1)
(1356,1870,1)
(17,1170,1)
(1580,273,1)
(2077,2650,1)
(2152,1700,1)
(647,1700,1)
(606,1944,1)
(642,1901,1)
(209,1160,1)
(694,595,1)
(334,2185,1)
(876,2943,1)
(2165,2506,1)
(1162,2843,1)
(1946,1953,1)
(1815,1013,1)
(2759,1186,1)
(1162,2139,1)
(2676,1862,1)
(2333,1278,1)
(1815,2500,1)
(212,1283,1)
(354,2174,1)
(647,1580,1)
(1525,2819,1)
(2551,1074,1)
(2881,2637,1)
(1000,1329,1)
(2708,816,1)
(410,402,1)
(1339,1950,1)
(384,1700,1)
(1503,1856,1)
(671,1931,1)
(2166,410,1)
(1985,3009,1)
(569,256,1)
(668,239,1)
(1162,1407,1)
(1571,2532,1)
(1815,1692,1)
(1330,1568,1)
(2699,1750,1)
(412,2096,1)
(2785,1745,1)
(850,1594,1)
(2910,601,1)
(2650,726,1)
(1260,2519,1)
(2650,912,1)
(787,1410,1)
(410,2755,1)
(1631,1442,1)
(2229,7,1)
(1300,413,1)
(354,2674,1)
(1881,137,1)
(275,731,1)
(329,1186,1)
(2428,1700,1)
(2320,84,1)
(2759,472,1)
(1822,1156,1)
(757,117,1)
(1823,111,1)
(2964,1417,1)
(2860,2405,1)
(2737,2109,1)
(1877,576,1)
(3026,84,1)
(1109,2313,1)
(2097,2593,1)
(731,2470,1)
(1763,1807,1)
(2705,2838,1)
(2317,1946,1)
(737,836,1)
(1860,1013,1)
(1030,1555,1)
(836,117,1)
(1162,2745,1)
(3011,223,1)
(2653,2781,1)
(1330,1156,1)
(2163,1111,1)
(1632,2170,1)
(2785,1156,1)
(1302,1008,1)
(410,2588,1)
(125,2911,1)
(2895,2558,1)
(1495,1534,1)
(2401,1089,1)
(3004,17,1)
(1838,2582,1)
(410,2048,1)
(1004,1476,1)
(1024,1842,1)
(2246,964,1)
(2755,1953,1)
(1315,2963,1)
(1257,2340,1)
(1326,2155,1)
(329,898,1)
(1786,1186,1)
(674,1101,1)
(1474,2065,1)
(497,555,1)
(876,327,1)
(2622,491,1)
(2570,1373,1)
(2472,2484,1)
(2480,3000,1)
(2893,44,1)
(2785,545,1)
(668,2128,1)
(1522,22,1)
(1800,2895,1)
(2130,371,1)
(2036,1169,1)
(665,1700,1)
(3029,635,1)
(1687,1186,1)
(467,10,1)
(1786,44,1)
(2271,726,1)
(2607,2067,1)
(115,1941,1)
(2758,2809,1)
(1180,17,1)
(215,503,1)
(1286,402,1)
(1687,377,1)
(822,1700,1)
(569,2174,1)
(354,2745,1)
(2193,9,1)
(2050,198,1)
(1322,2103,1)
(1964,2449,1)
(2964,2067,1)
(2152,1124,1)
(1786,596,1)
(1687,1900,1)
(1427,351,1)
(1047,2789,1)
(2715,2738,1)
(1020,2910,1)
(2236,1838,1)
(2317,3041,1)
(1141,269,1)
(1376,657,1)
(896,1476,1)
(2096,2143,1)
(2759,1900,1)
(2607,980,1)
(1600,694,1)
(2723,1185,1)
(2655,644,1)
(982,358,1)
(1122,1503,1)
(1778,1534,1)
(2664,2888,1)
(2945,512,1)
(77,2495,1)
(2069,1287,1)
(2713,1856,1)
(2893,1972,1)
(1617,2218,1)
(493,1315,1)
(28,1259,1)
(2349,36,1)
(2130,1186,1)
(2899,1987,1)
(876,2885,1)
(1822,1974,1)
(1651,244,1)
(2809,801,1)
(1653,91,1)
(1370,375,1)
(1180,1534,1)
(1258,511,1)
(1783,115,1)
(2893,1974,1)
(1942,1811,1)
(1687,2921,1)
(2130,187,1)
(1162,1476,1)
(1950,2935,1)
(2271,1875,1)
(2884,3000,1)
(569,165,1)
(80,1700,1)
(55,2498,1)
(505,1933,1)
(354,1349,1)
(2551,1013,1)
(1687,2441,1)
(329,2222,1)
(1860,1124,1)
(1505,626,1)
(569,1974,1)
(2350,630,1)
(377,2435,1)
(2679,1094,1)
(1417,3000,1)
(1906,1184,1)
(1125,1842,1)
(244,2745,1)
(734,2843,1)
(1683,2415,1)
(2886,2067,1)
(2106,1813,1)
(911,69,1)
(1182,540,1)
(2271,2921,1)
(1326,2971,1)
(1503,685,1)
(691,1160,1)
(1832,1700,1)
(429,136,1)
(792,704,1)
(1950,1884,1)
(1173,1700,1)
(1716,472,1)
(1477,1526,1)
(2530,515,1)
(1477,1686,1)
(721,2087,1)
(311,1577,1)
(2788,1645,1)
(2556,1678,1)
(2713,327,1)
(1837,908,1)
(876,2174,1)
(280,1340,1)
(874,917,1)
(117,1972,1)
(126,107,1)
(2551,1634,1)
(2924,1700,1)
(1315,107,1)
(2721,2064,1)
(2091,1565,1)
(1224,1442,1)
(1931,2696,1)
(10,146,1)
(1206,1676,1)
(1330,2139,1)
(1698,681,1)
(350,1029,1)
(1379,1114,1)
(516,121,1)
(480,2808,1)
(642,2843,1)
(429,2650,1)
(1203,2239,1)
(1843,2747,1)
(1399,2206,1)
(1603,1931,1)
(710,2650,1)
(2607,1972,1)
(2271,187,1)
(110,1953,1)
(1160,1472,1)
(1409,578,1)
(2631,1534,1)
(342,84,1)
(2418,2979,1)
(1950,468,1)
(2607,556,1)
(1838,2287,1)
(1995,2857,1)
(1397,1998,1)
(1171,624,1)
(2356,17,1)
(2505,503,1)
(2964,2233,1)
(1153,131,1)
(2214,540,1)
(2607,1946,1)
(2746,1065,1)
(608,1700,1)
(1938,1849,1)
(3011,2128,1)
(1222,422,1)
(2878,2944,1)
(246,732,1)
(774,1700,1)
(569,2779,1)
(2571,1700,1)
(2650,1530,1)
(2307,3015,1)
(841,1458,1)
(1275,2940,1)
(389,182,1)
(1332,2519,1)
(3016,69,1)
(1655,1354,1)
(1822,472,1)
(1399,414,1)
(2759,2458,1)
(1798,2710,1)
(126,898,1)
(357,759,1)
(410,685,1)
(1162,596,1)
(938,2184,1)
(1815,1974,1)
(1260,2843,1)
(810,1970,1)
(413,2269,1)
(2407,1664,1)
(354,1137,1)
(2551,2779,1)
(1822,2588,1)
(2110,1574,1)
(69,2143,1)
(2802,2885,1)
(2236,2759,1)
(101,1965,1)
(2526,1582,1)
(2648,2167,1)
(2607,2674,1)
(329,1634,1)
(1822,2943,1)
(1359,2682,1)
(1315,2921,1)
(2013,1370,1)
(2010,11,1)
(860,149,1)
(1162,1884,1)
(2650,3041,1)
(2903,137,1)
(1822,596,1)
(1503,1407,1)
(2925,2958,1)
(410,1186,1)
(2551,1900,1)
(734,1686,1)
(1503,2755,1)
(1062,1427,1)
(319,2843,1)
(839,2862,1)
(215,2871,1)
(1165,876,1)
(734,1526,1)
(1974,1043,1)
(894,2102,1)
(2713,2930,1)
(1438,1730,1)
(2607,149,1)
(1381,1931,1)
(1786,472,1)
(2785,726,1)
(1224,1899,1)
(2701,1264,1)
(126,2233,1)
(1555,1447,1)
(2295,808,1)
(2990,1700,1)
(2785,107,1)
(2675,2650,1)
(2964,1074,1)
(569,3041,1)
(2809,377,1)
(2678,928,1)
(3038,2240,1)
(896,1901,1)
(126,1013,1)
(200,1700,1)
(354,472,1)
(3028,918,1)
(1656,1916,1)
(342,499,1)
(2111,1037,1)
(1246,659,1)
(2144,1332,1)
(2946,1541,1)
(583,888,1)
(1862,1164,1)
(2759,2447,1)
(289,2950,1)
(1311,2591,1)
(1905,597,1)
(1495,1526,1)
(3041,1595,1)
(1505,1871,1)
(2713,1474,1)
(126,1884,1)
(1068,1901,1)
(3033,2328,1)
(245,1134,1)
(1907,1700,1)
(329,2930,1)
(2910,1200,1)
(910,1149,1)
(569,2447,1)
(2759,44,1)
(1860,165,1)
(876,472,1)
(929,679,1)
(1162,1634,1)
(1124,11,1)
(354,1974,1)
(2115,1686,1)
(126,3041,1)
(354,377,1)
(2226,853,1)
(3004,84,1)
(2964,1474,1)
(2881,146,1)
(151,2452,1)
(1326,1634,1)
(456,757,1)
(327,102,1)
(2271,2755,1)
(1710,1347,1)
(632,1894,1)
(127,1904,1)
(1860,44,1)
(1533,1700,1)
(24,2883,1)
(1330,2458,1)
(399,1913,1)
(2662,1953,1)
(354,1530,1)
(273,2010,1)
(1074,348,1)
(2909,223,1)
(2774,876,1)
(1660,2115,1)
(2785,801,1)
(410,2779,1)
(1192,1868,1)
(765,2708,1)
(2530,876,1)
(354,1874,1)
(1315,1074,1)
(393,2329,1)
(329,1946,1)
(2330,1378,1)
(1860,2699,1)
(1911,2512,1)
(3005,1942,1)
(705,1842,1)
(419,429,1)
(896,1124,1)
(1809,1162,1)
(1996,149,1)
(926,2699,1)
(2671,1374,1)
(476,549,1)
(2960,1932,1)
(1739,2326,1)
(1207,117,1)
(1860,371,1)
(1528,1436,1)
(2340,1700,1)
(1351,2699,1)
(2713,1568,1)
(192,138,1)
(605,2416,1)
(1565,1333,1)
(1616,1238,1)
(1695,1363,1)
(2742,2356,1)
(2551,2500,1)
(1125,2143,1)
(1950,110,1)
(2546,2496,1)
(2607,499,1)
(1862,54,1)
(687,1581,1)
(879,2156,1)
(1702,511,1)
(1230,386,1)
(2218,2330,1)
(1085,1869,1)
(2713,801,1)
(2743,1660,1)
(1197,1526,1)
(1723,1635,1)
(2817,2831,1)
(2130,1407,1)
(1468,1378,1)
(2918,391,1)
(1093,1931,1)
(526,1700,1)
(1787,355,1)
(876,2155,1)
(578,984,1)
(1503,1960,1)
(126,1377,1)
(1399,2391,1)
(2271,2174,1)
(1091,1384,1)
(2556,1700,1)
(254,1801,1)
(839,1842,1)
(2469,2257,1)
(117,1874,1)
(906,2767,1)
(710,1700,1)
(1326,327,1)
(509,1125,1)
(1699,2099,1)
(2968,680,1)
(1822,898,1)
(2662,102,1)
(205,2272,1)
(2722,3031,1)
(2827,2699,1)
(2317,107,1)
(1335,2637,1)
(115,1559,1)
(2713,2943,1)
(2551,1568,1)
(1822,44,1)
(2271,898,1)
(2809,2048,1)
(2317,2480,1)
(476,2954,1)
(911,2143,1)
(815,2966,1)
(362,205,1)
(1822,726,1)
(2893,2935,1)
(222,2668,1)
(658,2526,1)
(1815,1474,1)
(2198,2135,1)
(1741,2500,1)
(2818,955,1)
(2175,2505,1)
(1903,1314,1)
(706,2910,1)
(1539,844,1)
(264,2720,1)
(1326,44,1)
(1860,3041,1)
(2650,2233,1)
(1815,2256,1)
(2893,2779,1)
(1822,2935,1)
(2628,1273,1)
(3039,661,1)
(180,2152,1)
(1625,809,1)
(1048,88,1)
(876,2139,1)
(1950,726,1)
(909,979,1)
(354,2779,1)
(332,1700,1)
(448,594,1)
(2662,384,1)
(219,1573,1)
(761,184,1)
(953,1952,1)
(1232,588,1)
(410,1377,1)
(2910,684,1)
(2024,1913,1)
(1315,2885,1)
(2634,2540,1)
(2924,515,1)
(956,604,1)
(1315,2139,1)
(1500,2418,1)
(229,940,1)
(89,2489,1)
(135,1653,1)
(3013,1700,1)
(799,2790,1)
(3022,2631,1)
(2437,2399,1)
(312,86,1)
(1687,2174,1)
(2288,2440,1)
(1870,1815,1)
(594,1484,1)
(196,2809,1)
(123,593,1)
(202,2733,1)
(1194,2412,1)
(1349,2961,1)
(852,301,1)
(2439,73,1)
(1174,1700,1)
(1860,2745,1)
(1643,147,1)
(1315,1974,1)
(2130,256,1)
(329,2513,1)
(1872,1085,1)
(126,1156,1)
(2924,1931,1)
(2871,69,1)
(569,2256,1)
(1477,411,1)
(2605,2953,1)
(610,2307,1)
(1860,1901,1)
(1283,2809,1)
(2698,2967,1)
(1925,2331,1)
(2130,1884,1)
(1795,17,1)
(2650,2885,1)
(2899,930,1)
(1826,1974,1)
(1843,1842,1)
(1786,980,1)
(2607,2256,1)
(1715,1246,1)
(197,1284,1)
(2317,2441,1)
(2809,1972,1)
(1815,1884,1)
(2759,1056,1)
(2052,196,1)
(2759,377,1)
(1351,149,1)
(1043,2742,1)
(1068,1124,1)
(803,93,1)
(117,1884,1)
(129,2650,1)
(1860,1137,1)
(576,1669,1)
(2809,2745,1)
(2893,2755,1)
(763,1700,1)
(117,545,1)
(2759,1856,1)
(2551,801,1)
(3005,1824,1)
(45,156,1)
(2246,2272,1)
(1330,801,1)
(876,377,1)
(280,2385,1)
(550,1667,1)
(1195,2415,1)
(57,780,1)
(2964,726,1)
(776,1700,1)
(1214,3002,1)
(2505,82,1)
(1534,1506,1)
(117,906,1)
(2170,1700,1)
(199,2815,1)
(410,2447,1)
(776,2601,1)
(903,400,1)
(410,1960,1)
(2317,2048,1)
(1268,84,1)
(569,402,1)
(383,265,1)
(1315,165,1)
(285,2641,1)
(410,1156,1)
(567,2106,1)
(955,89,1)
(2789,17,1)
(1815,2971,1)
(1545,553,1)
(2137,2272,1)
(1004,1526,1)
(1745,1308,1)
(1838,467,1)
(710,2809,1)
(2594,839,1)
(2271,472,1)
(941,2367,1)
(1503,2674,1)
(1207,2650,1)
(1503,1074,1)
(710,1836,1)
(518,78,1)
(354,1474,1)
(2176,2153,1)
(1147,1409,1)
(329,2139,1)
(1671,219,1)
(1899,3003,1)
(2931,2104,1)
(2727,2956,1)
(912,1700,1)
(1330,1692,1)
(2341,1162,1)
(858,1540,1)
(354,2447,1)
(2963,1186,1)
(1315,2755,1)
(861,216,1)
(876,1074,1)
(2607,2837,1)
(2824,1581,1)
(117,1900,1)
(2809,2885,1)
(117,2745,1)
(602,1443,1)
(1786,912,1)
(354,2222,1)
(465,919,1)
(2130,2921,1)
(1822,2174,1)
(329,1745,1)
(2607,256,1)
(896,499,1)
(2785,1417,1)
(2893,1745,1)
(2341,876,1)
(15,223,1)
(2329,322,1)
(2356,499,1)
(1430,357,1)
(2096,69,1)
(705,839,1)
(354,1946,1)
(1381,1700,1)
(1786,1745,1)
(2010,17,1)
(2777,366,1)
(970,157,1)
(1815,107,1)
(1687,3041,1)
(526,1100,1)
(1687,906,1)
(1950,1074,1)
(2162,39,1)
(1697,1700,1)
(2136,2092,1)
(1477,149,1)
(1835,476,1)
(2720,2809,1)
(1537,2088,1)
(1263,1700,1)
(642,1832,1)
(1326,1745,1)
(1180,1124,1)
(2066,2057,1)
(386,2943,1)
(860,17,1)
(253,3037,1)
(979,1724,1)
(896,2500,1)
(1358,299,1)
(184,327,1)
(329,2067,1)
(2130,2943,1)
(354,2755,1)
(2077,276,1)
(757,1585,1)
(1375,2461,1)
(1412,2630,1)
(1758,2493,1)
(107,223,1)
(2846,2755,1)
(2571,876,1)
(1853,2872,1)
(1818,1782,1)
(1613,2379,1)
(2152,2843,1)
(1399,2776,1)
(817,2655,1)
(1083,786,1)
(640,2295,1)
(2114,1397,1)
(626,1082,1)
(2893,898,1)
(1837,1678,1)
(557,598,1)
(410,2441,1)
(1059,2028,1)
(2943,3000,1)
(1068,1534,1)
(549,3035,1)
(1733,2817,1)
(1815,1875,1)
(608,2650,1)
(1847,930,1)
(329,726,1)
(2946,1901,1)
(569,2588,1)
(2748,861,1)
(1751,3001,1)
(1680,776,1)
(353,2052,1)
(1687,2139,1)
(2060,2594,1)
(876,11,1)
(2759,2935,1)
(1105,378,1)
(2551,499,1)
(2594,2950,1)
(150,1787,1)
(433,2993,1)
(1815,1156,1)
(1377,1279,1)
(1868,2809,1)
(1815,371,1)
(2551,468,1)
(860,1913,1)
(2973,1788,1)
(1498,995,1)
(2675,2809,1)
(2809,1349,1)
(1963,17,1)
(1162,2155,1)
(74,116,1)
(1955,1115,1)
(750,645,1)
(1815,2935,1)
(277,1429,1)
(1874,1976,1)
(1260,149,1)
(1950,44,1)
(2809,107,1)
(1281,2126,1)
(2964,1974,1)
(2130,1013,1)
(980,659,1)
(2988,69,1)
(2607,1476,1)
(868,2609,1)
(809,1059,1)
(53,2128,1)
(2354,2666,1)
(2964,2480,1)
(2631,84,1)
(2641,812,1)
(117,2674,1)
(1640,2744,1)
(335,2291,1)
(3035,2128,1)
(117,2935,1)
(801,2860,1)
(896,11,1)
(1330,1856,1)
(1829,741,1)
(2650,1013,1)
(2729,2525,1)
(2357,2580,1)
(126,906,1)
(840,554,1)
(1523,1658,1)
(129,1700,1)
(1330,371,1)
(2551,2222,1)
(1815,2139,1)
(11,3015,1)
(1789,74,1)
(1795,1476,1)
(329,2755,1)
(1573,1770,1)
(908,1575,1)
(1895,1160,1)
(1841,787,1)
(1128,3035,1)
(1306,783,1)
(1952,1261,1)
(1682,1148,1)
(1285,1526,1)
(2822,733,1)
(400,117,1)
(475,1566,1)
(771,31,1)
(569,1972,1)
(2567,1239,1)
(1262,242,1)
(2551,1124,1)
(1950,1349,1)
(2809,912,1)
(1921,2865,1)
(2216,2272,1)
(1994,1262,1)
(1815,1686,1)
(2903,2124,1)
(2551,2930,1)
(1351,2500,1)
(2948,477,1)
(172,2224,1)
(2713,2755,1)
(117,371,1)
(2932,541,1)
(433,979,1)
(2785,1568,1)
(2524,1700,1)
(1786,327,1)
(2790,1183,1)
(2710,2045,1)
(627,2272,1)
(2472,2733,1)
(2950,2116,1)
(2607,1530,1)
(2551,1856,1)
(1687,980,1)
(2241,874,1)
(2809,1530,1)
(969,2705,1)
(53,2167,1)
(2785,912,1)
(2576,2139,1)
(595,375,1)
(2042,117,1)
(3003,2242,1)
(2766,222,1)
(2650,2935,1)
(2583,2426,1)
(1741,1901,1)
(2758,117,1)
(402,1241,1)
(1815,1960,1)
(410,726,1)
(2317,685,1)
(2317,906,1)
(2403,3026,1)
(2809,1634,1)
(2809,2755,1)
(1035,1917,1)
(2893,1474,1)
(15,2167,1)
(1088,2335,1)
(1586,2589,1)
(590,296,1)
(569,1615,1)
(342,1686,1)
(2580,2650,1)
(126,2935,1)
(354,545,1)
(547,1700,1)
(2119,2858,1)
(323,775,1)
(2474,1232,1)
(2411,1900,1)
(54,1310,1)
(2382,1495,1)
(1860,1779,1)
(1950,256,1)
(2152,17,1)
(1741,2699,1)
(1315,1530,1)
(2271,107,1)
(1823,2681,1)
(2443,1047,1)
(2810,847,1)
(1786,2480,1)
(1332,1476,1)
(1802,96,1)
(2551,2256,1)
(568,2888,1)
(2055,1913,1)
(1810,818,1)
(410,898,1)
(1503,1377,1)
(1919,2793,1)
(126,165,1)
(2317,898,1)
(2893,1074,1)
(2809,371,1)
(860,1124,1)
(419,1107,1)
(2809,685,1)
(876,1407,1)
(490,44,1)
(1495,1827,1)
(1846,2753,1)
(1231,1558,1)
(644,2650,1)
(2763,124,1)
(2893,2837,1)
(691,2650,1)
(2809,1474,1)
(2317,1074,1)
(2317,44,1)
(1025,1464,1)
(856,2272,1)
(2464,755,1)
(807,2790,1)
(122,1700,1)
(124,158,1)
(798,1794,1)
(2551,1526,1)
(2089,1159,1)
(134,1931,1)
(567,2871,1)
(32,2129,1)
(2864,2049,1)
(344,2828,1)
(2676,28,1)
(1330,2588,1)
(165,1254,1)
(2893,2588,1)
(416,1700,1)
(109,996,1)
(739,2965,1)
(1643,2922,1)
(354,898,1)
(64,1291,1)
(2489,1913,1)
(1377,1700,1)
(1249,667,1)
(2759,110,1)
(2399,1004,1)
(1162,187,1)
(2271,2233,1)
(1319,731,1)
(1890,2410,1)
(1326,1407,1)
(1315,1946,1)
(2271,3041,1)
(2803,2427,1)
(2236,1570,1)
(2317,2837,1)
(2607,3041,1)
(2130,1900,1)
(1126,2588,1)
(1089,1842,1)
(1694,34,1)
(2267,1682,1)
(2713,1745,1)
(2964,1900,1)
(2123,2893,1)
(1398,1893,1)
(2180,1137,1)
(2209,1129,1)
(1950,2480,1)
(2526,1539,1)
(473,983,1)
(2893,1856,1)
(122,1931,1)
(3034,1217,1)
(2551,2971,1)
(1326,3041,1)
(1285,499,1)
(899,1758,1)
(2741,1508,1)
(1200,2611,1)
(2785,2139,1)
(540,1700,1)
(2125,2844,1)
(835,2650,1)
(1786,726,1)
(2893,2674,1)
(1822,1960,1)
(239,1700,1)
(569,371,1)
(2819,1442,1)
(2759,2943,1)
(1815,898,1)
(628,1722,1)
(1788,1156,1)
(1157,741,1)
(432,1700,1)
(2759,685,1)
(1574,1700,1)
(360,281,1)
(126,2614,1)
(2953,1700,1)
(1960,708,1)
(2093,461,1)
(2893,2971,1)
(2130,1692,1)
(2789,1526,1)
(2317,3024,1)
(962,2197,1)
(263,2272,1)
(2183,1309,1)
(2965,1961,1)
(1665,2768,1)
(1863,1121,1)
(2958,165,1)
(2789,1534,1)
(730,602,1)
(410,2139,1)
(2593,1700,1)
(2569,220,1)
(1822,2779,1)
(459,1572,1)
(202,332,1)
(790,1764,1)
(876,801,1)
(873,1700,1)
(1846,566,1)
(1682,1700,1)
(1248,1754,1)
(1821,1602,1)
(2785,256,1)
(2607,110,1)
(2334,2256,1)
(2462,1842,1)
(126,402,1)
(2614,1700,1)
(2650,371,1)
(2130,1960,1)
(2713,2447,1)
(557,1700,1)
(2347,2504,1)
(2208,2719,1)
(2042,1160,1)
(1815,17,1)
(503,2143,1)
(1963,499,1)
(2317,1745,1)
(1682,2893,1)
(410,2067,1)
(569,2674,1)
(926,223,1)
(410,1875,1)
(2552,516,1)
(354,2885,1)
(2964,801,1)
(2317,2222,1)
(2453,1986,1)
(1436,1719,1)
(319,2519,1)
(2323,945,1)
(1815,2447,1)
(410,377,1)
(354,371,1)
(1687,2256,1)
(2650,2441,1)
(1424,1729,1)
(2161,2077,1)
(2893,2222,1)
(2412,939,1)
(2327,1786,1)
(871,1668,1)
(860,2500,1)
(486,2690,1)
(303,1304,1)
(2744,788,1)
(2809,468,1)
(538,2128,1)
(2659,2546,1)
(1576,2143,1)
(2850,1543,1)
(1503,2480,1)
(1137,1700,1)
(2809,1156,1)
(1180,2519,1)
(670,1282,1)
(360,1700,1)
(90,1948,1)
(2986,1389,1)
(546,1738,1)
(870,1444,1)
(2759,2067,1)
(288,1702,1)
(1831,1949,1)
(1860,898,1)
(1958,356,1)
(2713,2935,1)
(215,69,1)
(1617,2330,1)
(329,2971,1)
(1496,1700,1)
(1687,1884,1)
(1503,2067,1)
(1117,1780,1)
(2687,2881,1)
(1653,2982,1)
(1423,388,1)
(569,726,1)
(713,2001,1)
(354,107,1)
(498,2382,1)
(2713,1056,1)
(1135,1700,1)
(1860,1156,1)
(678,2409,1)
(1074,1953,1)
(1359,765,1)
(1950,1745,1)
(94,3033,1)
(126,377,1)
(659,998,1)
(126,1186,1)
(1950,827,1)
(991,2098,1)
(993,47,1)
(2223,1399,1)
(1916,2969,1)
(2785,1634,1)
(907,1316,1)
(1532,515,1)
(2594,69,1)
(538,223,1)
(1140,876,1)
(2102,1966,1)
(2082,1513,1)
(1260,11,1)
(2713,726,1)
(47,640,1)
(2607,1377,1)
(1762,1860,1)
(126,1946,1)
(2931,691,1)
(1937,1946,1)
(126,2699,1)
(2297,1617,1)
(2149,450,1)
(2809,898,1)
(2964,1692,1)
(2317,1884,1)
(2607,1960,1)
(2779,1233,1)
(917,1651,1)
(1936,1204,1)
(1860,2233,1)
(2785,906,1)
(1879,1906,1)
(1521,615,1)
(2672,2555,1)
(926,2128,1)
(1205,1846,1)
(2964,596,1)
(1360,1146,1)
(1330,2447,1)
(1860,2614,1)
(1089,705,1)
(2729,1429,1)
(319,1686,1)
(2743,1143,1)
(1499,2042,1)
(329,2674,1)
(2814,286,1)
(636,2188,1)
(967,247,1)
(1815,2048,1)
(1152,2563,1)
(1326,2458,1)
(2448,799,1)
(2964,2837,1)
(1503,2458,1)
(1162,2048,1)
(896,2699,1)
(2339,2581,1)
(2713,2155,1)
(1326,2779,1)
(1786,2233,1)
(1315,2480,1)
(2833,17,1)
(2130,2447,1)
(3017,2486,1)
(2230,1700,1)
(355,1139,1)
(1566,29,1)
(976,2141,1)
(1332,499,1)
(1299,3025,1)
(858,102,1)
(210,2415,1)
(2408,969,1)
(2669,2653,1)
(1952,69,1)
(1940,1258,1)
(2512,896,1)
(1330,1875,1)
(496,2549,1)
(2271,1856,1)
(1918,2387,1)
(1599,2641,1)
(569,110,1)
(1873,836,1)
(1490,1162,1)
(1950,2930,1)
(1004,1686,1)
(1379,2871,1)
(2123,2130,1)
(2607,468,1)
(1966,1525,1)
(1268,2519,1)
(1795,1901,1)
(839,2143,1)
(2551,402,1)
(2862,504,1)
(2877,1360,1)
(503,705,1)
(410,165,1)
(1384,2789,1)
(1963,2843,1)
(366,2996,1)
(1629,1496,1)
(652,1091,1)
(888,1448,1)
(2681,297,1)
(2759,2940,1)
(69,1405,1)
(1720,2155,1)
(1326,1474,1)
(1496,423,1)
(2341,1931,1)
(1490,1700,1)
(191,2309,1)
(2650,1407,1)
(105,1588,1)
(2130,1137,1)
(2271,2256,1)
(110,3000,1)
(2665,599,1)
(1590,897,1)
(329,2935,1)
(627,2346,1)
(421,2543,1)
(876,84,1)
(1154,2083,1)
(126,472,1)
(1437,2619,1)
(1647,2187,1)
(835,117,1)
(1687,110,1)
(1254,1011,1)
(211,69,1)
(117,1568,1)
(1290,2347,1)
(1901,1026,1)
(860,2519,1)
(354,1407,1)
(1950,545,1)
(1146,2801,1)
(2130,377,1)
(1682,2130,1)
(608,1160,1)
(1598,366,1)
(913,331,1)
(1860,1874,1)
(1269,517,1)
(1571,2598,1)
(102,1102,1)
(1027,666,1)
(1315,2174,1)
(233,237,1)
(2759,2139,1)
(4,1437,1)
(2035,1700,1)
(2720,117,1)
(2551,44,1)
(1778,149,1)
(268,1842,1)
(1631,2816,1)
(560,3012,1)
(1778,17,1)
(1895,1700,1)
(2579,489,1)
(1201,2948,1)
(1217,2843,1)
(885,1872,1)
(923,1052,1)
(932,1356,1)
(1390,2607,1)
(1799,2726,1)
(1594,1700,1)
(214,2393,1)
(2116,1980,1)
(2416,451,1)
(2650,1874,1)
(1159,234,1)
(1943,1929,1)
(1809,515,1)
(1124,2843,1)
(2355,2225,1)
(2834,2587,1)
(816,1846,1)
(1875,1700,1)
(774,1861,1)
(652,2519,1)
(2713,2921,1)
(410,596,1)
(2785,2458,1)
(1315,1137,1)
(2294,2246,1)
(645,2439,1)
(2109,1476,1)
(2922,1551,1)
(1326,1186,1)
(2195,1379,1)
(567,705,1)
(53,1654,1)
(2168,1812,1)
(2867,1162,1)
(1180,1476,1)
(876,887,1)
(2953,117,1)
(2500,1541,1)
(2844,1884,1)
(3012,1500,1)
(1822,1856,1)
(1024,2143,1)
(2315,195,1)
(1318,511,1)
(2109,1526,1)
(2155,2499,1)
(1162,1377,1)
(334,1831,1)
(2607,2755,1)
(1815,2614,1)
(2511,2175,1)
(1315,545,1)
(1687,1692,1)
(2993,1541,1)
(2767,2227,1)
(2759,2674,1)
(2130,1974,1)
(2785,1056,1)
(2701,1440,1)
(2440,3033,1)
(1314,2947,1)
(342,1534,1)
(407,1213,1)
(2948,1498,1)
(2607,2588,1)
(2713,2614,1)
(1554,2128,1)
(528,336,1)
(119,2220,1)
(1893,2109,1)
(569,187,1)
(1068,1526,1)
(2292,1705,1)
(1786,2779,1)
(1657,584,1)
(2230,102,1)
(170,898,1)
(1552,653,1)
(530,1545,1)
(2777,525,1)
(734,499,1)
(1124,336,1)
(2004,1700,1)
(2317,256,1)
(860,1526,1)
(324,988,1)
(569,980,1)
(1815,1349,1)
(1052,1762,1)
(1503,1349,1)
(2650,1074,1)
(126,1526,1)
(600,2031,1)
(415,43,1)
(2042,1700,1)
(540,117,1)
(569,2458,1)
(1687,1407,1)
(1950,2174,1)
(2607,1875,1)
(928,2674,1)
(1795,1534,1)
(783,2493,1)
(1236,2290,1)
(1773,2015,1)
(149,340,1)
(2130,2588,1)
(1512,1505,1)
(93,2226,1)
(0,2663,1)
(410,2614,1)
(1860,2755,1)
(897,1258,1)
(1330,1900,1)
(1963,72,1)
(1307,1380,1)
(126,84,1)
(2130,1875,1)
(2867,876,1)
(2150,1428,1)
(2010,2699,1)
(1773,1253,1)
(726,1857,1)
(2628,1120,1)
(1687,44,1)
(2648,2528,1)
(2441,659,1)
(2759,2930,1)
(1183,1876,1)
(876,1884,1)
(1110,1161,1)
(873,1160,1)
(597,1001,1)
(1941,1559,1)
(1753,876,1)
(2829,2890,1)
(1089,364,1)
(2809,2930,1)
(1162,801,1)
(3022,1733,1)
(329,2048,1)
(2650,980,1)
(3031,3002,1)
(342,1124,1)
(2690,813,1)
(1554,223,1)
(2791,1214,1)
(2972,2777,1)
(215,2950,1)
(2964,2441,1)
(2551,1972,1)
(1204,636,1)
(2859,1478,1)
(1882,110,1)
(537,425,1)
(1330,110,1)
(2607,1349,1)
(2798,2363,1)
(1822,1186,1)
(1786,1417,1)
(521,2493,1)
(1032,197,1)
(1073,2694,1)
(2975,509,1)
(2964,2745,1)
(919,923,1)
(1343,2040,1)
(2197,1393,1)
(2759,2441,1)
(2759,2837,1)
(896,2843,1)
(2964,2779,1)
(1815,1856,1)
(2785,2441,1)
(543,271,1)
(2947,481,1)
(1235,171,1)
(2607,2930,1)
(1503,1137,1)
(2923,1420,1)
(297,1700,1)
(2713,165,1)
(1001,2850,1)
(1011,1088,1)
(451,1646,1)
(2031,2070,1)
(2425,2714,1)
(463,2204,1)
(2549,557,1)
(2853,1699,1)
(2675,117,1)
(1162,1874,1)
(849,1833,1)
(661,1700,1)
(2433,706,1)
(1687,1974,1)
(160,2917,1)
(560,1700,1)
(126,1745,1)
(1315,2155,1)
(1860,2971,1)
(1225,1395,1)
(860,1534,1)
(1815,468,1)
(1379,839,1)
(37,263,1)
(1741,499,1)
(587,194,1)
(1345,2658,1)
(1789,2438,1)
(1794,1700,1)
(1324,432,1)
(131,2654,1)
(111,903,1)
(748,2342,1)
(2893,1568,1)
(420,2237,1)
(1217,1901,1)
(428,1451,1)
(1568,1953,1)
(1402,673,1)
(1777,67,1)
(2317,2174,1)
(1397,1700,1)
(315,2350,1)
(1357,324,1)
(354,1745,1)
(1736,729,1)
(2291,579,1)
(1757,1701,1)
(1483,2724,1)
(902,515,1)
(1075,1826,1)
(1282,2398,1)
(2017,2161,1)
(2107,3039,1)
(1117,1300,1)
(302,1068,1)
(2650,2067,1)
(2032,993,1)
(354,2921,1)
(1197,1901,1)
(1950,2155,1)
(333,1825,1)
(800,982,1)
(981,2946,1)
(2804,1054,1)
(2831,1741,1)
(210,2883,1)
(1815,980,1)
(271,2811,1)
(157,1901,1)
(329,2779,1)
(759,690,1)
(408,1086,1)
(329,2256,1)
(1197,1476,1)
(2650,1568,1)
(2850,1895,1)
(126,1692,1)
(1786,2139,1)
(2283,567,1)
(1332,11,1)
(1315,2779,1)
(143,2464,1)
(468,278,1)
(988,2989,1)
(1227,2946,1)
(117,1417,1)
(1330,1974,1)
(1077,2871,1)
(2204,700,1)
(1247,222,1)
(505,2809,1)
(1843,69,1)
(2251,233,1)
(1162,1526,1)
(981,880,1)
(926,149,1)
(2317,1634,1)
(445,1931,1)
(340,1666,1)
(1687,2458,1)
(1687,1349,1)
(2061,1700,1)
(2271,1186,1)
(2985,83,1)
(1950,2139,1)
(2964,2222,1)
(1566,1772,1)
(2022,19,1)
(2883,2729,1)
(2860,2167,1)
(1031,1077,1)
(354,1074,1)
(1395,375,1)
(579,1700,1)
(995,1083,1)
(1815,2155,1)
(1068,11,1)
(300,433,1)
(926,2167,1)
(2541,1160,1)
(2792,102,1)
(354,1568,1)
(1786,2674,1)
(117,2588,1)
(876,499,1)
(1860,2519,1)
(2481,2827,1)
(1330,187,1)
(1711,1700,1)
(1484,2814,1)
(1409,102,1)
(126,2458,1)
(2713,377,1)
(1315,2222,1)
(329,1692,1)
(2893,1692,1)
(445,1162,1)
(3016,2143,1)
(2759,165,1)
(2770,1963,1)
(2607,2480,1)
(29,2111,1)
(1060,571,1)
(131,876,1)
(1162,44,1)
(831,1174,1)
(377,2648,1)
(540,2255,1)
(2632,614,1)
(1162,1156,1)
(1379,2950,1)
(410,2256,1)
(503,2950,1)
(1815,1407,1)
(2555,1700,1)
(117,2256,1)
(2893,2048,1)
(1315,468,1)
(1004,1534,1)
(342,1526,1)
(2675,1997,1)
(2271,2930,1)
(1490,876,1)
(1330,898,1)
(2953,2650,1)
(1238,2604,1)
(2785,2921,1)
(2629,1556,1)
(1330,980,1)
(394,2873,1)
(1996,499,1)
(1350,72,1)
(157,2500,1)
(410,1568,1)
(305,2320,1)
(2927,2272,1)
(1822,2745,1)
(2551,1946,1)
(1659,2607,1)
(2356,1476,1)
(1428,1482,1)
(569,1884,1)
(2607,545,1)
(540,2809,1)
(2764,97,1)
(117,596,1)
(2987,1487,1)
(2833,1901,1)
(1815,1074,1)
(1741,1124,1)
(2755,3000,1)
(2320,2500,1)
(1815,906,1)
(1815,1480,1)
(117,1960,1)
(268,1218,1)
(1950,2447,1)
(2092,2859,1)
(1515,1044,1)
(1384,92,1)
(2472,1899,1)
(1310,180,1)
(2271,1137,1)
(2713,1874,1)
(950,1795,1)
(1065,1700,1)
(1684,1247,1)
(2807,1700,1)
(955,1534,1)
(2809,2458,1)
(2551,596,1)
(2321,1704,1)
(441,2229,1)
(2893,468,1)
(1165,1931,1)
(2372,2272,1)
(2123,1095,1)
(126,1074,1)
(2178,1343,1)
(211,839,1)
(355,730,1)
(3014,1700,1)
(1503,1692,1)
(1992,2168,1)
(354,596,1)
(2551,2447,1)
(1162,371,1)
(880,2492,1)
(1312,374,1)
(2759,1972,1)
(1268,1124,1)
(289,503,1)
(2094,1504,1)
(2964,1013,1)
(1950,685,1)
(2628,1828,1)
(1220,2315,1)
(2713,110,1)
(224,2622,1)
(579,702,1)
(1124,2079,1)
(1095,2084,1)
(2271,980,1)
(67,1382,1)
(1692,2089,1)
(452,2725,1)
(713,721,1)
(750,1909,1)
(354,2837,1)
(1495,2519,1)
(2221,2931,1)
(2551,545,1)
(2935,1700,1)
(2477,2287,1)
(1950,2233,1)
(2893,2233,1)
(1332,1124,1)
(2713,1377,1)
(126,980,1)
(257,1589,1)
(2467,2796,1)
(2488,2661,1)
(1658,383,1)
(2809,402,1)
(1069,1752,1)
(2040,2021,1)
(1786,2174,1)
(494,1953,1)
(1574,2512,1)
(522,2924,1)
(1989,511,1)
(747,2493,1)
(943,2951,1)
(2950,1842,1)
(255,464,1)
(2650,1884,1)
(2439,2233,1)
(1326,898,1)
(2722,1476,1)
(2109,2843,1)
(1332,2843,1)
(2964,327,1)
(2547,1732,1)
(2495,634,1)
(1950,1856,1)
(379,2217,1)
(2010,499,1)
(1196,2935,1)
(3035,108,1)
(2515,335,1)
(1260,1476,1)
(1822,1074,1)
(2394,1673,1)
(1844,1093,1)
(1962,1035,1)
(117,110,1)
(2610,2769,1)
(876,1946,1)
(1741,1376,1)
(994,2159,1)
(2920,1430,1)
(2877,2272,1)
(1315,1960,1)
(1786,2755,1)
(2759,1745,1)
(63,866,1)
(329,2745,1)
(2581,1603,1)
(691,2567,1)
(989,1700,1)
(1547,2429,1)
(769,701,1)
(1974,2128,1)
(2893,165,1)
(1909,645,1)
(1209,2607,1)
(898,1700,1)
(2043,3000,1)
(1076,1969,1)
(1315,2067,1)
(2785,327,1)
(313,3002,1)
(1668,2348,1)
(1509,2107,1)
(734,2519,1)
(1746,2249,1)
(1860,110,1)
(1971,1649,1)
(2147,1240,1)
(1687,2614,1)
(1550,1599,1)
(626,1842,1)
(2271,801,1)
(1237,647,1)
(2785,187,1)
(117,1013,1)
(126,2048,1)
(2043,2087,1)
(117,1875,1)
(860,1901,1)
(1441,2420,1)
(640,2087,1)
(510,1859,1)
(1911,722,1)
(2367,1920,1)
(588,1993,1)
(2130,2048,1)
(92,1700,1)
(2700,858,1)
(1257,2560,1)
(1503,1474,1)
(2531,1963,1)
(2466,2809,1)
(542,2766,1)
(2650,107,1)
(1220,195,1)
(2680,2327,1)
(2825,2210,1)
(860,834,1)
(2336,2249,1)
(1840,1700,1)
(1327,1124,1)
(2743,2865,1)
(2631,2843,1)
(2809,2837,1)
(2487,109,1)
(138,1163,1)
(1260,499,1)
(2785,1874,1)
(2130,468,1)
(2230,1953,1)
(1209,659,1)
(228,2671,1)
(1583,2287,1)
(1815,1972,1)
(1907,2650,1)
(2561,303,1)
(1435,2036,1)
(2821,1467,1)
(1315,256,1)
(1332,1901,1)
(410,1856,1)
(1365,2523,1)
(1860,1974,1)
(2152,1901,1)
(2101,2110,1)
(896,1526,1)
(1429,580,1)
(760,1765,1)
(134,515,1)
(645,1628,1)
(2819,2733,1)
(2019,1214,1)
(3007,2144,1)
(2131,2191,1)
(1013,2193,1)
(1162,898,1)
(1786,1349,1)
(1950,2441,1)
(1331,61,1)
(1224,1776,1)
(1267,41,1)
(2317,1960,1)
(728,813,1)
(1721,722,1)
(2631,11,1)
(812,2577,1)
(1740,122,1)
(1570,1930,1)
(876,1974,1)
(203,1686,1)
(1513,100,1)
(2804,186,1)
(876,187,1)
(2773,1160,1)
(2010,1534,1)
(989,1953,1)
(2809,2935,1)
(1134,106,1)
(1048,2143,1)
(1815,2699,1)
(1672,2392,1)
(1551,1663,1)
(1822,2067,1)
(1381,1162,1)
(601,2113,1)
(2015,1745,1)
(1030,240,1)
(1477,2699,1)
(1687,622,1)
(1459,3004,1)
(1005,2715,1)
(2633,2234,1)
(429,117,1)
(2713,2885,1)
(1180,1686,1)
(1216,1298,1)
(2714,2356,1)
(599,2194,1)
(2008,2013,1)
(1162,1534,1)
(1503,1946,1)
(2741,2826,1)
(198,2417,1)
(1210,2169,1)
(2317,1692,1)
(2551,1686,1)
(1687,107,1)
(780,3000,1)
(329,1874,1)
(1221,511,1)
(126,2588,1)
(236,2130,1)
(117,3041,1)
(1206,257,1)
(1687,1745,1)
(1495,2843,1)
(1952,1842,1)
(1786,1875,1)
(1556,338,1)
(3004,1686,1)
(1238,2650,1)
(2104,691,1)
(1895,117,1)
(2551,17,1)
(2631,149,1)
(117,2480,1)
(2720,1700,1)
(265,1090,1)
(818,52,1)
(2480,1953,1)
(1822,801,1)
(1514,1412,1)
(319,1901,1)
(2583,2130,1)
(126,1856,1)
(1280,2927,1)
(732,1424,1)
(873,117,1)
(2271,1900,1)
(405,2754,1)
(1786,2067,1)
(569,2943,1)
(2190,1464,1)
(410,1349,1)
(58,235,1)
(876,1156,1)
(1860,2447,1)
(2129,1439,1)
(209,1608,1)
(2884,1953,1)
(157,1476,1)
(2506,1700,1)
(2759,2588,1)
(281,1110,1)
(2577,1700,1)
(2309,307,1)
(2607,472,1)
(53,859,1)
(2676,2453,1)
(140,263,1)
(876,2458,1)
(2607,906,1)
(644,1160,1)
(2434,1700,1)
(157,1526,1)
(1920,214,1)
(1384,1954,1)
(955,1526,1)
(1638,1544,1)
(344,1700,1)
(61,1446,1)
(1860,1407,1)
(129,2809,1)
(2705,1378,1)
(1695,604,1)
(1822,1634,1)
(256,480,1)
(2543,2128,1)
(1796,643,1)
(86,2612,1)
(2809,2256,1)
(156,2093,1)
(1741,2843,1)
(1285,1750,1)
(1526,224,1)
(1879,2251,1)
(814,2915,1)
(3014,876,1)
(117,2067,1)
(1721,2512,1)
(1344,448,1)
(2893,2441,1)
(2577,1524,1)
(1996,3002,1)
(1860,1634,1)
(1125,69,1)
(1068,2699,1)
(400,2809,1)
(926,818,1)
(374,353,1)
(570,1905,1)
(947,2684,1)
(1089,69,1)
(1039,671,1)
(701,2540,1)
(478,181,1)
(1875,803,1)
(2984,357,1)
(1330,327,1)
(2356,149,1)
(1734,1312,1)
(1985,1772,1)
(2631,2519,1)
(1687,402,1)
(2650,2921,1)
(2258,510,1)
(319,1476,1)
(2112,1850,1)
(1068,1476,1)
(1125,705,1)
(522,2731,1)
(1860,2885,1)
(2543,1600,1)
(2005,2637,1)
(338,1681,1)
(1162,2699,1)
(1701,2804,1)
(2893,980,1)
(1817,215,1)
(1687,1875,1)
(1326,2256,1)
(410,2921,1)
(876,2500,1)
(1268,2843,1)
(705,2143,1)
(1662,225,1)
(835,2539,1)
(505,2650,1)
(329,1156,1)
(293,505,1)
(2317,472,1)
(2017,1024,1)
(165,1953,1)
(776,117,1)
(354,256,1)
(2271,906,1)
(1089,839,1)
(211,2143,1)
(1453,2160,1)
(2809,2674,1)
(204,2179,1)
(120,927,1)
(1786,2837,1)
(2722,2843,1)
(2871,839,1)
(236,2893,1)
(2418,2842,1)
(2785,2971,1)
(1895,2650,1)
(1121,464,1)
(957,162,1)
(1762,665,1)
(2595,2215,1)
(2713,2256,1)
(1326,2447,1)
(3011,2167,1)
(1576,69,1)
(2396,950,1)
(2320,1476,1)
(2713,2480,1)
(2759,402,1)
(2912,1593,1)
(2130,1745,1)
(569,801,1)
(402,1700,1)
(2009,3025,1)
(1315,2971,1)
(1162,2674,1)
(1860,1875,1)
(2271,2588,1)
(410,2155,1)
(1464,1455,1)
(354,1377,1)
(2511,2621,1)
(327,2852,1)
(2184,498,1)
(2037,2582,1)
(2876,393,1)
(2987,1260,1)
(742,18,1)
(2785,1407,1)
(2809,165,1)
(2789,1686,1)
(1240,957,1)
(2482,2119,1)
(643,1496,1)
(2731,1700,1)
(1162,149,1)
(354,44,1)
(363,2226,1)
(117,1349,1)
(2551,472,1)
(2575,678,1)
(460,2017,1)
(616,2533,1)
(1219,2770,1)
(569,2441,1)
(1838,146,1)
(299,2281,1)
(652,1526,1)
(1309,1736,1)
(2435,2648,1)
(3016,1842,1)
(876,256,1)
(2964,2256,1)
(2271,1946,1)
(1686,658,1)
(126,1960,1)
(2271,1074,1)
(54,2272,1)
(1495,1124,1)
(2185,1739,1)
(584,2794,1)
(2785,1900,1)
(502,1626,1)
(2271,2480,1)
(1162,1974,1)
(647,1162,1)
(1795,1686,1)
(2432,1423,1)
(3037,1581,1)
(1326,2233,1)
(122,876,1)
(1687,1960,1)
(2252,959,1)
(1503,2588,1)
(1851,1361,1)
(978,2663,1)
(1221,1700,1)
(1822,2233,1)
(401,2959,1)
(2065,762,1)
(1388,2720,1)
(1217,1526,1)
(2114,408,1)
(2253,637,1)
(2607,2921,1)
(2027,953,1)
(1379,69,1)
(1326,1874,1)
(1099,2668,1)
(1234,2381,1)
(2642,2357,1)
(2713,2174,1)
(796,2722,1)
(2343,2871,1)
(150,355,1)
(569,1137,1)
(2551,3041,1)
(545,102,1)
(66,840,1)
(2819,1790,1)
(1849,950,1)
(2356,2699,1)
(1162,170,1)
(876,1124,1)
(1687,2935,1)
(195,2147,1)
(1860,1474,1)
(1904,1509,1)
(2975,1125,1)
(2670,1569,1)
(1351,1534,1)
(614,870,1)
(2522,1566,1)
(2146,1845,1)
(157,17,1)
(604,2027,1)
(2809,1745,1)
(1315,1634,1)
(2330,1553,1)
(2551,1137,1)
(221,2272,1)
(2964,669,1)
(1822,2139,1)
(581,2846,1)
(1315,2930,1)
(126,499,1)
(2893,472,1)
(2169,2835,1)
(1963,1534,1)
(2890,1087,1)
(2776,1105,1)
(2809,1974,1)
(410,2745,1)
(2320,1534,1)
(1503,1634,1)
(1103,2632,1)
(876,2588,1)
(2970,315,1)
(1978,926,1)
(2138,1613,1)
(569,2837,1)
(2881,1910,1)
(2885,1297,1)
(744,213,1)
(734,11,1)
(2123,1700,1)
(851,2172,1)
(128,2804,1)
(2181,2723,1)
(625,2250,1)
(2650,1056,1)
(1538,1129,1)
(2607,2222,1)
(2650,2837,1)
(1397,2650,1)
(2907,1700,1)
(2679,1579,1)
(2809,2441,1)
(2551,1186,1)
(840,1953,1)
(964,2920,1)
(2946,1686,1)
(2964,1530,1)
(731,2158,1)
(896,1534,1)
(2607,2174,1)
(2158,69,1)
(876,2674,1)
(926,1526,1)
(1156,1700,1)
(933,1216,1)
(317,567,1)
(98,1700,1)
(900,591,1)
(1207,1700,1)
(2348,1196,1)
(2317,1874,1)
(288,1263,1)
(124,2488,1)
(2551,1407,1)
(1353,323,1)
(525,1598,1)
(319,1534,1)
(2809,3041,1)
(1860,1186,1)
(1315,2588,1)
(1315,2935,1)
(1793,2390,1)
(1698,58,1)
(2871,705,1)
(1304,218,1)
(1963,2699,1)
(2673,2246,1)
(2317,1156,1)
(2997,2336,1)
(805,2877,1)
(2807,1160,1)
(1351,1686,1)
(1822,2222,1)
(1451,1913,1)
(2174,506,1)
(2442,2166,1)
(1170,1178,1)
(1671,2833,1)
(2759,2971,1)
(410,1056,1)
(2504,608,1)
(2120,2287,1)
(2809,1377,1)
(1369,735,1)
(457,1307,1)
(1178,339,1)
(2807,2809,1)
(1448,316,1)
(2329,1700,1)
(2130,110,1)
(567,2950,1)
(1338,69,1)
(202,1442,1)
(2500,2993,1)
(117,912,1)
(1333,1891,1)
(1072,709,1)
(2130,545,1)
(2445,2779,1)
(171,1350,1)
(791,1495,1)
(926,17,1)
(1162,1960,1)
(1129,671,1)
(2624,1220,1)
(1626,2659,1)
(117,187,1)
(1447,1251,1)
(2551,898,1)
(363,1284,1)
(1471,1160,1)
(2171,2232,1)
(126,2519,1)
(1381,515,1)
(876,2837,1)
(2713,906,1)
(2685,102,1)
(1822,1349,1)
(1351,2843,1)
(85,49,1)
(2934,2613,1)
(193,57,1)
(860,2843,1)
(2130,2233,1)
(1822,1407,1)
(2607,1874,1)
(2964,685,1)
(345,1534,1)
(2910,1300,1)
(2946,2843,1)
(1315,912,1)
(1692,102,1)
(1822,1875,1)
(2607,1534,1)
(2594,2051,1)
(1865,189,1)
(122,2782,1)
(2893,1377,1)
(1473,522,1)
(126,2921,1)
(380,2183,1)
(1162,1474,1)
(1477,1901,1)
(2130,2837,1)
(2377,941,1)
(2759,2048,1)
(489,1334,1)
(1779,2447,1)
(1137,1234,1)
(583,1214,1)
(2956,452,1)
(2356,1526,1)
(1243,1276,1)
(1985,2253,1)
(2019,137,1)
(1068,17,1)
(593,2270,1)
(667,1420,1)
(1162,1686,1)
(804,1700,1)
(3027,1746,1)
(2642,2580,1)
(117,256,1)
(2815,831,1)
(1583,1910,1)
(2130,912,1)
(2541,117,1)
(1426,317,1)
(1084,1289,1)
(689,740,1)
(2322,547,1)
(2809,1856,1)
(1860,1526,1)
(2074,2268,1)
(847,854,1)
(3031,977,1)
(1950,1474,1)
(2758,967,1)
(1400,60,1)
(126,2755,1)
(916,869,1)
(2281,771,1)
(2044,764,1)
(371,2131,1)
(1330,2048,1)
(1805,1388,1)
(745,1989,1)
(1479,1758,1)
(2922,977,1)
(1753,1162,1)
(117,1056,1)
(2551,906,1)
(174,2877,1)
(1880,2989,1)
(162,2660,1)
(1503,1972,1)
(2759,1267,1)
(142,1821,1)
(1574,722,1)
(569,1634,1)
(126,2779,1)
(126,685,1)
(1326,1137,1)
(759,59,1)
(757,1160,1)
(2722,1901,1)
(1527,2026,1)
(1330,1377,1)
(1274,2932,1)
(2047,530,1)
(1568,3000,1)
(121,817,1)
(2713,2971,1)
(1004,17,1)
(2055,2843,1)
(1268,2500,1)
(2305,2128,1)
(528,2715,1)
(506,544,1)
(2921,1554,1)
(1089,2871,1)
(1895,2809,1)
(1403,1160,1)
(1421,1842,1)
(2240,659,1)
(1545,659,1)
(2785,2155,1)
(117,2779,1)
(2785,2256,1)
(621,1609,1)
(2102,511,1)
(2868,2737,1)
(1754,1992,1)
(956,2997,1)
(2650,1349,1)
(2809,1874,1)
(1687,327,1)
(1685,1701,1)
(2317,2755,1)
(1089,2143,1)
(501,188,1)
(2140,319,1)
(932,1700,1)
(329,1530,1)
(2704,697,1)
(1115,379,1)
(2225,2087,1)
(1687,165,1)
(1330,912,1)
(780,1953,1)
(2720,2650,1)
(1761,1256,1)
(1581,409,1)
(1822,1417,1)
(1503,2930,1)
(2713,1716,1)
(2551,1530,1)
(2528,341,1)
(131,1700,1)
(712,45,1)
(1330,1474,1)
(2631,3018,1)
(1815,499,1)
(2952,266,1)
(410,327,1)
(1308,2592,1)
(410,2480,1)
(1719,2469,1)
(876,1692,1)
(839,69,1)
(1797,203,1)
(2607,1856,1)
(139,1259,1)
(1162,1946,1)
(869,164,1)
(1822,2971,1)
(2657,568,1)
(1503,44,1)
(1125,2950,1)
(2271,1530,1)
(2130,2155,1)
(1164,54,1)
(2964,402,1)
(1586,892,1)
(2794,2042,1)
(472,1700,1)
(2544,524,1)
(2791,137,1)
(2650,187,1)
(2491,52,1)
(175,810,1)
(1865,2270,1)
(2271,1013,1)
(119,158,1)
(137,2701,1)
(2551,165,1)
(2551,107,1)
(671,515,1)
(410,1474,1)
(2650,2779,1)
(569,1377,1)
(29,352,1)
(2551,377,1)
(2893,327,1)
(876,906,1)
(2096,1842,1)
(2133,2337,1)
(53,441,1)
(2818,2815,1)
(1023,2222,1)
(2893,2458,1)
(2663,2853,1)
(2785,165,1)
(1184,1672,1)
(1366,1364,1)
(569,1474,1)
(2010,1901,1)
(2462,2143,1)
(1822,2480,1)
(248,2458,1)
(2317,545,1)
(876,149,1)
(1524,1596,1)
(1330,2755,1)
(1687,801,1)
(2915,1659,1)
(1786,2935,1)
(1246,2647,1)
(227,449,1)
(977,1343,1)
(2969,734,1)
(841,2055,1)
(1323,2272,1)
(2568,1348,1)
(569,2222,1)
(342,2843,1)
(1860,17,1)
(2210,2270,1)
(545,947,1)
(2229,1700,1)
(2251,237,1)
(434,857,1)
(549,1128,1)
(2809,2779,1)
(3031,1449,1)
(2372,1936,1)
(1440,1385,1)
(410,2233,1)
(443,548,1)
(313,1581,1)
(155,347,1)
(2320,2519,1)
(1260,1526,1)
(514,1359,1)
(644,133,1)
(59,1518,1)
(88,782,1)
(2964,980,1)
(336,1285,1)
(2946,1476,1)
(1315,2837,1)
(836,2748,1)
(2551,371,1)
(2381,1217,1)
(1364,2140,1)
(309,1747,1)
(1673,1563,1)
(667,1700,1)
(1950,1156,1)
(1822,2256,1)
(2266,2263,1)
(157,499,1)
(1506,1265,1)
(1822,165,1)
(1403,191,1)
(2461,2561,1)
(1996,1901,1)
(1110,857,1)
(569,1900,1)
(435,906,1)
(2964,371,1)
(2872,1123,1)
(1967,1442,1)
(2759,2233,1)
(2785,2745,1)
(342,11,1)
(2940,1515,1)
(1950,1056,1)
(2500,1521,1)
(2523,971,1)
(2511,95,1)
(2067,877,1)
(1778,1913,1)
(181,2942,1)
(158,2024,1)
(2893,377,1)
(1326,1960,1)
(2893,1884,1)
(2152,1686,1)
(126,2067,1)
(1503,1900,1)
(2369,1789,1)
(126,1901,1)
(2263,802,1)
(1548,2880,1)
(1162,1417,1)
(1170,1913,1)
(354,2930,1)
(668,223,1)
(196,1700,1)
(18,1185,1)
(709,2718,1)
(2271,2935,1)
(237,683,1)
(2271,1745,1)
(1490,1931,1)
(2551,2935,1)
(2055,1686,1)
(2021,1971,1)
(1330,256,1)
(2717,978,1)
(1822,2755,1)
(126,149,1)
(313,2304,1)
(1326,1884,1)
(2713,2139,1)
(927,2318,1)
(2551,2067,1)
(1950,2048,1)
(876,1474,1)
(2809,906,1)
(2978,1710,1)
(117,2755,1)
(1778,1476,1)
(1658,1678,1)
(2590,2656,1)
(756,150,1)
(2356,11,1)
(1952,2143,1)
(1207,2176,1)
(1674,2886,1)
(2551,1474,1)
(1774,373,1)
(620,2272,1)
(1317,2700,1)
(2580,1160,1)
(2903,1214,1)
(1016,961,1)
(1162,1074,1)
(984,2752,1)
(2874,2899,1)
(1315,1745,1)
(1370,872,1)
(2077,1700,1)
(2893,1417,1)
(2152,11,1)
(1687,912,1)
(1248,1700,1)
(2893,187,1)
(1532,876,1)
(114,2267,1)
(1163,1539,1)
(2753,267,1)
(2271,110,1)
(2799,890,1)
(195,102,1)
(129,117,1)
(1503,2935,1)
(410,980,1)
(801,2261,1)
(1330,1884,1)
(410,1530,1)
(1470,2362,1)
(1442,1255,1)
(1014,1835,1)
(1842,2143,1)
(2371,885,1)
(1399,274,1)
(1315,1056,1)
(556,980,1)
(651,570,1)
(2319,1931,1)
(2880,1700,1)
(2935,632,1)
(2472,1620,1)
(376,1797,1)
(657,1592,1)
(2109,122,1)
(1162,545,1)
(2607,2935,1)
(2759,2779,1)
(2541,2650,1)
(569,2745,1)
(1860,107,1)
(572,923,1)
(1721,415,1)
(696,726,1)
(1822,685,1)
(2692,380,1)
(1806,204,1)
(354,2155,1)
(2130,1946,1)
(697,256,1)
(956,2629,1)
(1860,2155,1)
(217,993,1)
(2152,1953,1)
(1753,1700,1)
(329,110,1)
(2055,1000,1)
(2775,739,1)
(267,63,1)
(329,187,1)
(363,2300,1)
(1351,1124,1)
(2785,596,1)
(2233,1212,1)
(1036,2037,1)
(1071,1299,1)
(1403,2650,1)
(1315,1474,1)
(2472,2668,1)
(1731,2640,1)
(329,2837,1)
(2034,135,1)
(1950,327,1)
(2833,1534,1)
(1260,2277,1)
(1822,1013,1)
(1322,1700,1)
(2152,499,1)
(1935,1631,1)
(892,1721,1)
(3011,2764,1)
(2376,3022,1)
(1050,2832,1)
(527,250,1)
(2785,2554,1)
(234,307,1)
(2946,2993,1)
(1795,2843,1)
(503,839,1)
(1415,2229,1)
(2713,1349,1)
(1724,261,1)
(894,2819,1)
(2279,305,1)
(329,1856,1)
(2893,912,1)
(2980,1945,1)
(1677,289,1)
(2090,1296,1)
(114,1682,1)
(2130,327,1)
(1180,11,1)
(2188,1365,1)
(1414,2000,1)
(2607,1745,1)
(473,2167,1)
(2597,1408,1)
(1162,1901,1)
(2345,587,1)
(3020,1298,1)
(1856,2128,1)
(2785,1135,1)
(1495,17,1)
(1180,1901,1)
(126,327,1)
(2212,1638,1)
(1642,370,1)
(368,538,1)
(30,2837,1)
(354,1417,1)
(1950,472,1)
(42,1134,1)
(734,2500,1)
(126,17,1)
(1986,2545,1)
(1065,868,1)
(860,499,1)
(2964,1634,1)
(1332,17,1)
(896,1686,1)
(2607,1124,1)
(410,2674,1)
(1659,1815,1)
(1139,730,1)
(685,2167,1)
(573,725,1)
(2305,2279,1)
(1296,459,1)
(2608,1772,1)
(716,1075,1)
(2964,1874,1)
(2271,402,1)
(140,37,1)
(2036,717,1)
(1562,3038,1)
(569,107,1)
(2317,1407,1)
(1741,1476,1)
(2785,2935,1)
(2375,32,1)
(1838,2637,1)
(2427,102,1)
(1503,1745,1)
(1503,2745,1)
(2785,1856,1)
(1330,2067,1)
(1765,258,1)
(290,1773,1)
(1947,209,1)
(1569,3029,1)
(2774,1162,1)
(1560,780,1)
(876,371,1)
(2450,2321,1)
(1561,1630,1)
(410,110,1)
(1786,2930,1)
(2206,642,1)
(1750,2824,1)
(1687,1417,1)
(2130,2935,1)
(2710,1042,1)
(329,472,1)
(1477,499,1)
(329,1417,1)
(1162,110,1)
(2524,1375,1)
(1213,1955,1)
(1383,1699,1)
(1209,2407,1)
(507,330,1)
(1238,117,1)
(1795,979,1)
(2893,2139,1)
(117,2971,1)
(2636,2507,1)
(1351,1526,1)
(2607,327,1)
(2551,84,1)
(2154,66,1)
(1840,2892,1)
(1786,165,1)
(2779,1736,1)
(1107,429,1)
(2814,1214,1)
(445,1700,1)
(1687,898,1)
(329,3041,1)
(473,1173,1)
(1361,1700,1)
(1778,1526,1)
(2964,1745,1)
(2725,2753,1)
(243,2332,1)
(2025,2459,1)
(2305,223,1)
(1785,1292,1)
(2506,2494,1)
(692,1700,1)
(1130,2570,1)
(569,685,1)
(2999,965,1)
(1529,1194,1)
(2356,1534,1)
(902,876,1)
(110,1219,1)
(1860,377,1)
(63,2375,1)
(2040,1700,1)
(2809,1186,1)
(1049,2685,1)
(2852,1486,1)
(2271,1972,1)
(2713,1974,1)
(1762,126,1)
(1110,514,1)
(2650,402,1)
(210,210,1)
(410,468,1)
(4,781,1)
(2769,2845,1)
(634,1700,1)
(906,223,1)
(2428,586,1)
(256,2087,1)
(1615,377,1)
(1397,1160,1)
(126,726,1)
(2809,327,1)
(3004,11,1)
(2759,726,1)
(1815,1137,1)
(2893,1056,1)
(2779,2700,1)
(2271,327,1)
(354,685,1)
(1996,17,1)
(1701,2512,1)
(1687,1474,1)
(2819,2668,1)
(2871,2950,1)
(1169,943,1)
(1330,1013,1)
(2187,2266,1)
(2341,623,1)
(1745,2592,1)
(876,1874,1)
(154,1911,1)
(64,2287,1)
(834,1693,1)
(1950,2067,1)
(992,1860,1)
(1363,695,1)
(2271,256,1)
(1749,301,1)
(2964,1056,1)
(2130,1377,1)
(2893,1530,1)
(1263,1958,1)
(1326,2441,1)
(2515,3013,1)
(1778,11,1)
(2158,2143,1)
(2072,1983,1)
(354,2458,1)
(1384,1408,1)
(855,104,1)
(2745,1392,1)
(2359,1655,1)
(385,1774,1)
(1399,2101,1)
(2130,685,1)
(202,2668,1)
(2320,499,1)
(1326,371,1)
(1885,1490,1)
(98,1928,1)
(1380,1700,1)
(2317,402,1)
(2537,2608,1)
(1105,235,1)
(2755,751,1)
(1028,1700,1)
(21,2750,1)
(845,627,1)
(951,526,1)
(1822,107,1)
(2023,1609,1)
(1407,1700,1)
(2892,363,1)
(1335,2582,1)
(1169,1700,1)
(1024,69,1)
(2713,107,1)
(1801,705,1)
(2024,528,1)
(2596,804,1)
(2789,2843,1)
(2551,2519,1)
(329,371,1)
(2899,154,1)
(2555,1112,1)
(2177,1590,1)
(2330,137,1)
(1162,1568,1)
(1860,1960,1)
(1076,2541,1)
(2619,245,1)
(2809,2447,1)
(2774,1700,1)
(876,1417,1)
(1379,705,1)
(2313,2953,1)
(1965,2746,1)
(1440,675,1)
(882,2743,1)
(1900,2035,1)
(2614,2721,1)
(1330,1946,1)
(173,2823,1)
(2179,2968,1)
(844,1948,1)
(2599,869,1)
(1950,165,1)
(528,2670,1)
(2378,2707,1)
(1687,1856,1)
(2545,2451,1)
(464,889,1)
(2490,1442,1)
(2662,1743,1)
(1848,784,1)
(2551,2480,1)
(2197,1030,1)
(2556,1132,1)
(215,1842,1)
(1503,2441,1)
(1592,2795,1)
(274,2984,1)
(2507,101,1)
(1988,1753,1)
(775,514,1)
(410,44,1)
(367,2272,1)
(2909,2128,1)
(2631,499,1)
(1860,1972,1)
(3004,1526,1)
(1860,256,1)
(2761,569,1)
(1296,1700,1)
(593,376,1)
(1871,268,1)
(1246,1815,1)
(2387,1815,1)
(1946,3000,1)
(1468,137,1)
(3014,1931,1)
(1915,850,1)
(2533,2490,1)
(1687,1634,1)
(2884,1341,1)
(1395,2665,1)
(2759,327,1)
(1216,3020,1)
(2530,1162,1)
(2142,2531,1)
(2646,1307,1)
(919,572,1)
(1173,2652,1)
(117,1692,1)
(2271,371,1)
(2964,2155,1)
(1025,2806,1)
(1946,2163,1)
(289,705,1)
(2713,980,1)
(2959,2114,1)
(1950,801,1)
(653,1190,1)
(1382,344,1)
(2423,3021,1)
(735,2491,1)
(2508,766,1)
(684,2876,1)
(1326,1349,1)
(1652,2841,1)
(461,3017,1)
(1786,371,1)
(308,527,1)
(1636,1617,1)
(2530,1700,1)
(2317,468,1)
(2130,2458,1)
(2674,2543,1)
(1508,2826,1)
(933,2386,1)
(2028,1619,1)
(1469,2800,1)
(1283,1160,1)
(2909,444,1)
(2784,217,1)
(2893,1960,1)
(1950,906,1)
(1162,1900,1)
(3013,1328,1)
(2363,193,1)
(2172,908,1)
(1024,2698,1)
(2607,1568,1)
(569,2971,1)
(2833,1686,1)
(1786,1634,1)
(117,1137,1)
(2130,1530,1)
(2592,223,1)
(2650,377,1)
(2385,1927,1)
(2686,455,1)
(2650,685,1)
(2152,1526,1)
(2607,2843,1)
(3014,1002,1)
(1477,1476,1)
(2110,1027,1)
(1129,734,1)
(508,1610,1)
(2551,1476,1)
(126,2139,1)
(2594,1842,1)
(1397,2809,1)
(1486,933,1)
(329,2441,1)
(2130,44,1)
(1954,33,1)
(2809,1884,1)
(876,1349,1)
(2498,1696,1)
(1815,2745,1)
(2871,715,1)
(2551,2885,1)
(1874,3000,1)
(1811,1362,1)
(768,2082,1)
(1822,2674,1)
(760,2512,1)
(2598,2918,1)
(1326,1530,1)
(1386,1145,1)
(2317,187,1)
(2216,1141,1)
(1532,1931,1)
(1224,2733,1)
(1170,1265,1)
(667,1053,1)
(814,1539,1)
(2551,2139,1)
(2120,682,1)
(1404,2657,1)
(1027,876,1)
(1687,1568,1)
(878,500,1)
(1330,2943,1)
(1326,1972,1)
(1197,1209,1)
(926,11,1)
(1399,1325,1)
(1950,107,1)
(1518,672,1)
(1635,2798,1)
(1455,856,1)
(458,909,1)
(1676,1851,1)
(2759,2256,1)
(1503,2174,1)
(2759,2885,1)
(734,1476,1)
(623,1708,1)
(1503,801,1)
(2806,660,1)
(2551,2048,1)
(2459,2907,1)
(503,1842,1)
(985,298,1)
(2858,1084,1)
(2759,1474,1)
(1774,2272,1)
(285,1843,1)
(2809,1900,1)
(2321,710,1)
(2317,1875,1)
(1874,1953,1)
(1911,1700,1)
(2865,2313,1)
(1385,3037,1)
(28,2239,1)
(1417,1953,1)
(2143,2627,1)
(2006,1689,1)
(876,2447,1)
(49,2032,1)
(2093,3017,1)
(1063,724,1)
(868,1700,1)
(1410,1214,1)
(1474,2087,1)
(2789,1512,1)
(1092,1994,1)
(901,1062,1)
(1162,256,1)
(2130,2256,1)
(172,2368,1)
(564,221,1)
(2057,585,1)
(2517,2493,1)
(1640,319,1)
(1812,2997,1)
(896,17,1)
(2020,2831,1)
(2130,2971,1)
(80,1118,1)
(1315,2745,1)
(2719,2397,1)
(2243,2975,1)
(1458,961,1)
(1162,2500,1)
(1809,1700,1)
(1603,876,1)
(2607,1407,1)
(647,515,1)
(116,2527,1)
(2271,545,1)
(2929,1987,1)
(1860,2139,1)
(1807,2867,1)
(844,573,1)
(126,1417,1)
(1185,1269,1)
(1326,1692,1)
(1318,1700,1)
(1972,1222,1)
(1123,2272,1)
(1741,11,1)
(714,1568,1)
(2571,1162,1)
(2713,1634,1)
(1786,2155,1)
(845,797,1)
(2317,1377,1)
(1495,1901,1)
(410,1874,1)
(1184,805,1)
(2893,2745,1)
(905,2727,1)
(2195,1652,1)
(2356,1124,1)
(354,2067,1)
(1990,1519,1)
(1090,543,1)
(2809,2174,1)
(2024,3029,1)
(1786,1056,1)
(1297,207,1)
(1845,2994,1)
(1200,2502,1)
(334,773,1)
(1950,2885,1)
(1654,2414,1)
(1860,402,1)
(2759,1156,1)
(2586,871,1)
(2141,1453,1)
(2580,279,1)
(2809,2614,1)
(209,2650,1)
(1403,1700,1)
(3030,532,1)
(2867,515,1)
(939,1402,1)
(1330,2256,1)
(755,2555,1)
(2030,2514,1)
(1406,763,1)
(1702,1700,1)
(2809,2067,1)
(410,2971,1)
(1491,1459,1)
(2152,1272,1)
(1781,3014,1)
(1983,163,1)
(457,1236,1)
(1950,2674,1)
(1860,2222,1)
(2152,2699,1)
(1605,2408,1)
(2964,1946,1)
(2551,1875,1)
(725,763,1)
(711,326,1)
(209,2809,1)
(2362,2517,1)
(689,210,1)
(1268,149,1)
(1093,876,1)
(1977,2510,1)
(2705,2305,1)
(569,596,1)
(1162,1056,1)
(1463,462,1)
(1786,1568,1)
(2964,2614,1)
(1330,472,1)
(1667,2347,1)
(1881,1378,1)
(181,2127,1)
(2341,515,1)
(1963,1526,1)
(1860,2837,1)
(1326,1900,1)
(1246,2270,1)
(298,1634,1)
(1338,2143,1)
(645,1581,1)
(880,624,1)
(1183,1700,1)
(1628,2439,1)
(1147,1220,1)
(927,722,1)
(1786,248,1)
(2061,507,1)
(1015,1302,1)
(1786,2222,1)
(2130,402,1)
(1844,760,1)
(2551,1692,1)
(2809,256,1)
(2236,1330,1)
(1786,110,1)
(1326,472,1)
(1860,906,1)
(494,2087,1)
(2631,1526,1)
(2268,902,1)
(1009,460,1)
(1687,1946,1)
(1488,1397,1)
(2848,3002,1)
(983,1435,1)
(1816,2628,1)
(1422,2252,1)
(1108,1383,1)
(1189,1339,1)
(1614,1700,1)
(1832,3030,1)
(1709,2990,1)
(117,2233,1)
(211,1656,1)
(1996,2699,1)
(1682,2713,1)
(1939,2582,1)
(2162,28,1)
(2809,187,1)
(2499,2547,1)
(1795,149,1)
(1786,906,1)
(993,1147,1)
(1845,223,1)
(1971,1494,1)
(1260,1901,1)
(1276,2912,1)
(208,1153,1)
(2271,1568,1)
(1594,2512,1)
(2393,2722,1)
(1124,17,1)
(1116,2422,1)
(656,1694,1)
(2302,262,1)
(683,367,1)
(2130,2139,1)
(2564,2406,1)
(1815,2674,1)
(2521,2783,1)
(2783,2165,1)
(1815,2885,1)
(2921,664,1)
(1712,1349,1)
(661,1420,1)
(1504,1410,1)
(1950,1634,1)
(1188,2228,1)
(2819,1899,1)
(533,860,1)
(1315,1874,1)
(433,1541,1)
(1417,2822,1)
(1349,1700,1)
(2320,11,1)
(1315,327,1)
(1503,377,1)
(1124,2519,1)
(1649,845,1)
(2728,978,1)
(2607,1634,1)
(2650,2588,1)
(2893,3041,1)
(1004,2843,1)
(289,2871,1)
(1326,2674,1)
(2273,2044,1)
(2236,1583,1)
(1357,1700,1)
(2893,1900,1)
(1905,2272,1)
(1860,327,1)
(2878,2466,1)
(1950,596,1)
(410,107,1)
(2551,912,1)
(2330,1214,1)
(1902,1700,1)
(1068,149,1)
(1221,2820,1)
(1217,1476,1)
(718,290,1)
(2519,2473,1)
(1176,1990,1)
(1815,1530,1)
(351,1700,1)
(2139,501,1)
(1315,3041,1)
(1490,1187,1)
(896,2519,1)
(15,1355,1)
(757,1700,1)
(1326,2943,1)
(2271,2048,1)
(56,1432,1)
(1392,1021,1)
(1373,647,1)
(1040,1877,1)
(126,596,1)
(131,515,1)
(2111,2294,1)
(2863,662,1)
(2226,774,1)
(2303,1377,1)
(259,2299,1)
(2690,1286,1)
(2317,1349,1)
(624,2415,1)
(1054,1840,1)
(1332,1534,1)
(2294,2673,1)
(2317,2935,1)
(2152,84,1)
(2946,1534,1)
(1815,2588,1)
(2248,722,1)
(2164,1195,1)
(665,1371,1)
(569,1074,1)
(295,607,1)
(196,117,1)
(1762,2617,1)
(1315,2256,1)
(1123,1313,1)
(1330,1634,1)
(2759,2921,1)
(2427,537,1)
(410,2837,1)
(1786,1407,1)
(329,2233,1)
(2681,837,1)
(357,3009,1)
(1786,2885,1)
(3035,2167,1)
(2964,468,1)
(2320,2699,1)
(1162,1124,1)
(1842,2,1)
(569,1349,1)
(1326,1056,1)
(2607,2745,1)
(10,2287,1)
(2516,1163,1)
(2317,110,1)
(2345,223,1)
(2893,801,1)
(1197,1534,1)
(2630,1734,1)
(1689,1873,1)
(1195,1625,1)
(635,2810,1)
(1378,900,1)
(1877,117,1)
(980,895,1)
(2038,1165,1)
(2203,2421,1)
(196,2650,1)
(301,251,1)
(2785,2943,1)
(965,1918,1)
(1111,289,1)
(977,1404,1)
(1180,2699,1)
(1279,670,1)
(538,3007,1)
(2035,2199,1)
(2724,1700,1)
(836,1160,1)
(329,402,1)
(1786,1013,1)
(1577,798,1)
(361,2202,1)
(1687,1056,1)
(793,2642,1)
(126,1124,1)
(950,2423,1)
(1326,2614,1)
(1695,1485,1)
(1795,2519,1)
(492,2151,1)
(2486,2054,1)
(2173,107,1)
(2824,3002,1)
(767,199,1)
(1073,722,1)
(2429,215,1)
(410,1074,1)
(768,354,1)
(2356,1686,1)
(360,2650,1)
(1542,86,1)
(926,2500,1)
(2518,1303,1)
(1950,2971,1)
(1815,2222,1)
(1326,468,1)
(1825,1340,1)
(2661,1005,1)
(2917,1014,1)
(1399,2221,1)
(1379,503,1)
(2964,377,1)
(2543,2167,1)
(569,1960,1)
(2759,1074,1)
(2773,1863,1)
(1315,1407,1)
(2179,1700,1)
(41,1516,1)
(1985,2991,1)
(1778,1901,1)
(2293,442,1)
(186,1483,1)
(780,2456,1)
(2422,1654,1)
(2551,1884,1)
(2713,1186,1)
(1218,2818,1)
(329,1074,1)
(640,27,1)
(2452,121,1)
(1704,710,1)
(2809,2139,1)
(1162,2222,1)
(1687,2930,1)
(2713,545,1)
(429,1700,1)
(1330,1186,1)
(2875,1700,1)
(626,2143,1)
(2075,496,1)
(2010,2500,1)
(2010,1124,1)
(2765,2712,1)
(1822,468,1)
(1478,1700,1)
(2664,1404,1)
(1042,629,1)
(1860,1900,1)
(2607,1686,1)
(82,456,1)
(2650,2943,1)
(2170,1306,1)
(1332,1526,1)
(2063,1379,1)
(566,98,1)
(1589,80,1)
(12,2805,1)
(236,1700,1)
(2910,628,1)
(2566,3040,1)
(1516,2118,1)
(1351,1191,1)
(710,117,1)
(213,790,1)
(2228,2333,1)
(1886,2751,1)
(1477,137,1)
(1891,703,1)
(1315,377,1)
(710,1160,1)
(893,2569,1)
(2580,1700,1)
(329,468,1)
(1687,1074,1)
(1815,2837,1)
(1495,1476,1)
(1470,1700,1)
(1827,2297,1)
(590,2650,1)
(2317,1013,1)
(2830,1616,1)
(117,1856,1)
(1786,898,1)
(2650,1745,1)
(2650,2303,1)
(2607,912,1)
(1815,377,1)
(2950,839,1)
(1326,2139,1)
(167,990,1)
(1326,1013,1)
(157,1265,1)
(10,1910,1)
(1860,2930,1)
(1326,2048,1)
(1485,505,1)
(1482,692,1)
(780,1578,1)
(569,1056,1)
(354,1634,1)
(329,2480,1)
(3004,2848,1)
(2650,545,1)
(329,1875,1)
(3022,1180,1)
(1815,596,1)
(1170,727,1)
(1251,240,1)
(1004,1901,1)
(1284,902,1)
(1828,907,1)
(1342,1526,1)
(2556,383,1)
(1315,1856,1)
(2607,1974,1)
(493,2791,1)
(569,2067,1)
(805,174,1)
(1627,1017,1)
(1620,1700,1)
(2840,1644,1)
(186,2899,1)
(2713,1692,1)
(473,2036,1)
(2964,1875,1)
(1479,1076,1)
(2971,1700,1)
(433,1096,1)
(2470,1877,1)
(1795,11,1)
(1776,2418,1)
(1864,2703,1)
(2055,1265,1)
(2893,1186,1)
(1786,1137,1)
(2722,2519,1)
(157,149,1)
(2781,1700,1)
(2880,1922,1)
(1786,377,1)
(1079,1434,1)
(2697,1494,1)
(1815,1901,1)
(95,125,1)
(1687,1156,1)
(313,977,1)
(1809,876,1)
(2096,839,1)
(2043,2754,1)
(1315,1377,1)
(1917,2809,1)
(2766,894,1)
(1993,1818,1)
(989,3000,1)
(410,472,1)
(1407,502,1)
(2809,44,1)
(2271,1377,1)
(1268,1901,1)
(2720,882,1)
(354,1692,1)
(569,1745,1)
(2152,1194,1)
(2893,685,1)
(2759,1884,1)
(3004,1476,1)
(1027,1931,1)
(1910,1133,1)
(2391,755,1)
(2054,64,1)
(1281,1700,1)
(1246,2607,1)
(429,1160,1)
(1641,1123,1)
(1741,1534,1)
(1576,143,1)
(2082,69,1)
(2271,596,1)
(2619,437,1)
(642,1534,1)
(316,488,1)
(569,1417,1)
(538,2167,1)
(2551,2174,1)
(276,609,1)
(1603,515,1)
(1323,1154,1)
(430,1790,1)
(1532,1060,1)
(569,1875,1)
(1509,1931,1)
(618,1312,1)
(1124,1526,1)
(814,1582,1)
(821,105,1)
(2713,1156,1)
(2541,2282,1)
(2785,2779,1)
(2615,95,1)
(876,1900,1)
(1506,2535,1)
(2713,1946,1)
(666,1368,1)
(1950,1186,1)
(2607,596,1)
(2722,1526,1)
(2713,3041,1)
(734,2699,1)
(2900,1068,1)
(862,1995,1)
(117,165,1)
(1950,898,1)
(3018,2007,1)
(2250,342,1)
(1124,149,1)
(1283,1700,1)
(1691,1411,1)
(2551,110,1)
(961,736,1)
(1282,734,1)
(157,1124,1)
(2914,3027,1)
(1313,2235,1)
(260,513,1)
(209,117,1)
(2727,1700,1)
(1162,17,1)
(285,2462,1)
(1790,1684,1)
(2249,1700,1)
(371,2700,1)
(1162,2837,1)
(1974,223,1)
(2954,2455,1)
(1268,11,1)
(2650,2139,1)
(365,2918,1)
(2326,1441,1)
(1609,336,1)
(2893,2943,1)
(927,1700,1)
(1687,1972,1)
(819,2432,1)
(911,431,1)
(27,1996,1)
(126,1530,1)
(2274,2100,1)
(1822,2921,1)
(1328,1679,1)
(1996,1534,1)
(1727,1363,1)
(741,1948,1)
(354,2614,1)
(2936,860,1)
(1256,1953,1)
(2759,906,1)
(2497,160,1)
(1477,1378,1)
(2,392,1)
(1217,1534,1)
(569,2233,1)
(117,801,1)
(2368,2783,1)
(2299,24,1)
(1056,1700,1)
(876,1056,1)
(752,1571,1)
(1481,790,1)
(1273,1913,1)
(477,1498,1)
(342,1901,1)
(1822,2447,1)
(818,991,1)
(1690,2577,1)
(523,1476,1)
(1476,2443,1)
(2631,2699,1)
(1503,2256,1)
(963,3016,1)
(1687,2588,1)
(209,1700,1)
(2964,2048,1)
(2910,792,1)
(661,1192,1)
(2317,2614,1)
(228,1700,1)
(1326,2174,1)
(2117,2945,1)
(2785,1137,1)
(1951,144,1)
(2893,1875,1)
(2964,1349,1)
(2317,1974,1)
(2081,1013,1)
(1421,2143,1)
(1850,474,1)
(2809,1013,1)
(1786,1946,1)
(1162,2458,1)
(1163,350,1)
(898,1514,1)
(1027,1700,1)
(145,2987,1)
(100,99,1)
(2551,2755,1)
(2130,2614,1)
(1330,2222,1)
(53,223,1)
(2774,1931,1)
(1467,1700,1)
(1728,454,1)
(1997,275,1)
(2130,2674,1)
(1098,2840,1)
(1815,1056,1)
(668,2534,1)
(2055,1526,1)
(2134,1373,1)
(2105,1434,1)
(354,726,1)
(2328,1662,1)
(1585,1492,1)
(2271,1874,1)
(445,876,1)
(496,1581,1)
(1134,2272,1)
(1124,1534,1)
(342,2519,1)
(2650,1692,1)
(1786,1156,1)
(1495,11,1)
(569,1407,1)
(1658,1201,1)
(2396,968,1)
(876,1972,1)
(2271,1974,1)
(876,1568,1)
(117,726,1)
(552,714,1)
(1860,1856,1)
(1475,1351,1)
(2317,371,1)
(1770,1984,1)
(1330,1349,1)
(969,970,1)
(2230,3000,1)
(1729,794,1)
(11,361,1)
(2536,2926,1)
(96,1695,1)
(105,1700,1)
(1403,117,1)
(2476,859,1)
(2759,1377,1)
(2192,2542,1)
(2052,2325,1)
(516,2112,1)
(1509,876,1)
(1722,1327,1)
(1168,1338,1)
(2109,1740,1)
(876,2614,1)
(1162,912,1)
(2563,652,1)
(1687,472,1)
(1110,1020,1)
(2812,838,1)
(312,1844,1)
(1784,311,1)
(569,1013,1)
(2650,2256,1)
(1215,1523,1)
(732,1138,1)
(1659,2047,1)
(784,2286,1)
(1786,2447,1)
(1907,1160,1)
(1786,2458,1)
(2271,2441,1)
(2627,1248,1)
(3004,499,1)
(1518,1700,1)
(1753,1931,1)
(2835,2812,1)
(84,1324,1)
(1860,2935,1)
(1741,2519,1)
(860,1686,1)
(1202,811,1)
(2650,1974,1)
(1950,1137,1)
(2726,620,1)
(1815,2779,1)
(671,1700,1)
(2509,2716,1)
(2551,1056,1)
(410,2222,1)
(117,402,1)
(2505,555,1)
(2079,2023,1)
(500,518,1)
(1786,2588,1)
(1687,2674,1)
(2055,2519,1)
(1503,1056,1)
(70,2775,1)
(2953,2809,1)
(2744,236,1)
(760,1700,1)
(2308,1948,1)
(3009,492,1)
(2668,2487,1)
(1950,1974,1)
(318,911,1)
(1926,345,1)
(721,2788,1)
(2607,1137,1)
(2617,665,1)
(876,2921,1)
(2082,2143,1)
(1472,1056,1)
(1950,1417,1)
(2551,2843,1)
(1315,2943,1)
(1340,2878,1)
(1815,256,1)
(1187,2874,1)
(1815,1568,1)
(1795,1526,1)
(2083,1778,1)
(1124,1476,1)
(410,1972,1)
(1326,2480,1)
(240,2122,1)
(1815,2480,1)
(2977,508,1)
(2916,1700,1)
(81,1816,1)
(1330,2837,1)
(1330,2674,1)
(410,2935,1)
(2345,2128,1)
(902,1058,1)
(590,2809,1)
(1907,2618,1)
(1288,498,1)
(2554,2120,1)
(873,2650,1)
(1418,2061,1)
(2933,1658,1)
(1326,1074,1)
(2904,651,1)
(1330,2441,1)
(1786,2256,1)
(2077,117,1)
(1186,2360,1)
(62,1015,1)
(2100,2097,1)
(358,590,1)
(2759,2755,1)
(258,1093,1)
(729,2792,1)
(1538,1073,1)
(2824,1418,1)
(1335,2287,1)
(2055,17,1)
(2271,252,1)
(2551,685,1)
(1456,2515,1)
(466,1479,1)
(1001,69,1)
(1783,1421,1)
(1640,2893,1)
(2152,149,1)
(2135,2341,1)
(2317,165,1)
(2809,1568,1)
(2650,1137,1)
(2466,117,1)
(2893,1349,1)
(2738,2974,1)
(1950,2837,1)
(876,2067,1)
(320,1400,1)
(2759,1974,1)
(1558,1485,1)
(2232,1822,1)
(2650,44,1)
(1285,1534,1)
(2809,2233,1)
(876,2699,1)
(816,2875,1)
(1354,2971,1)
(2759,912,1)
(2650,1474,1)
(1778,2843,1)
(1935,630,1)
(926,1686,1)
(1207,2809,1)
(2493,3032,1)
(1061,901,1)
(1618,1686,1)
(2551,1534,1)
(873,2809,1)
(1125,839,1)
(593,2607,1)
(2785,1960,1)
(1907,2809,1)
(97,595,1)
(1113,2917,1)
(1408,416,1)
(1786,1074,1)
(953,399,1)
(157,2091,1)
(3040,1369,1)
(1532,1162,1)
(580,119,1)
(1948,1665,1)
(2207,2596,1)
(123,2370,1)
(117,1974,1)
(1860,980,1)
(126,801,1)
(1330,2155,1)
(658,1973,1)
(1672,1165,1)
(354,110,1)
(835,1700,1)
(3021,2085,1)
(2551,256,1)
(279,1977,1)
(2048,2012,1)
(2551,327,1)
(1326,1156,1)
(211,2950,1)
(831,2867,1)
(410,256,1)
(1326,187,1)
(2967,2280,1)
(2962,132,1)
(881,1214,1)
(1687,2779,1)
(2607,377,1)
(72,2511,1)
(881,137,1)
(1511,38,1)
(2317,596,1)
(2320,2843,1)
(2236,2785,1)
(734,1901,1)
(2551,2943,1)
(2213,1224,1)
(422,511,1)
(117,1946,1)
(2637,1461,1)
(895,2962,1)
(2162,2700,1)
(1315,685,1)
(444,2445,1)
(1326,1875,1)
(1477,84,1)
(589,433,1)
(992,1915,1)
(2130,898,1)
(1528,1700,1)
(1162,402,1)
(926,2843,1)
(1396,719,1)
(1182,2214,1)
(126,2837,1)
(2746,1880,1)
(1118,2334,1)
(78,303,1)
(240,1700,1)
(1353,1700,1)
(1738,1534,1)
(1996,1526,1)
(2248,2512,1)
(1786,468,1)
(1315,2614,1)
(2828,2198,1)
(2712,1074,1)
(2541,1700,1)
(2177,1700,1)
(2198,412,1)
(2551,2614,1)
(112,146,1)
(2317,801,1)
(2809,1407,1)
(2650,472,1)
(2356,2474,1)
(734,1124,1)
(739,1778,1)
(117,1634,1)
(1503,107,1)
(1687,187,1)
(1860,84,1)
(2109,1901,1)
(2130,1023,1)
(2130,3041,1)
(1326,2930,1)
(2261,2860,1)
(2848,1548,1)
(45,1201,1)
(1768,2149,1)
(1950,2222,1)
(1351,84,1)
(1124,1686,1)
(1344,2272,1)
(2064,317,1)
(1283,320,1)
(2022,1378,1)
(1493,536,1)
(1326,596,1)
(1888,1834,1)
(1927,1962,1)
(2503,2564,1)
(1917,333,1)
(1630,1283,1)
(1381,876,1)
(517,2248,1)
(1549,912,1)
(1698,267,1)
(354,1960,1)
(1670,1380,1)
(2276,2230,1)
(1822,1946,1)
(2867,1700,1)
(1553,56,1)
(2759,1634,1)
(673,103,1)
(836,2809,1)
(410,2930,1)
(2759,898,1)
(819,1423,1)
(2759,1013,1)
(876,1377,1)
(2113,1700,1)
(1860,1568,1)
(121,843,1)
(1162,2614,1)
(1503,2233,1)
(2924,1162,1)
(2785,685,1)
(2320,1124,1)
(1503,726,1)
(2964,1884,1)
(2130,2745,1)
(2309,779,1)
(2222,1189,1)
(977,977,1)
(1950,2588,1)
(926,3002,1)
(2574,3016,1)
(585,851,1)
(755,1311,1)
(141,0,1)
(483,1319,1)
(2271,165,1)
(117,2885,1)
(1968,1152,1)
(1589,948,1)
(1477,1214,1)
(1578,2117,1)
(2964,1568,1)
(876,1875,1)
(329,1884,1)
(3004,2500,1)
(1326,377,1)
(2551,1156,1)
(1487,2046,1)
(2353,1103,1)
(3000,713,1)
(2964,1377,1)
(1865,1815,1)
(2881,152,1)
(569,2155,1)
(2551,2173,1)
(615,2306,1)
(1067,2858,1)
(2351,114,1)
(642,1476,1)
(644,1700,1)
(1471,1700,1)
(1815,1534,1)
(2785,2755,1)
(1503,2614,1)
(2964,1186,1)
(590,1700,1)
(1503,187,1)
(1986,2008,1)
(111,400,1)
(1815,84,1)
(1236,140,1)
(2910,2306,1)
(1191,282,1)
(473,2128,1)
(329,1056,1)
(980,2509,1)
(1950,1874,1)
(2650,2458,1)
(1503,1013,1)
(876,1960,1)
(2713,2674,1)
(1082,161,1)
(1206,2271,1)
(2640,2110,1)
(2271,1407,1)
(2541,2809,1)
(2574,50,1)
(2385,2148,1)
(876,165,1)
(1802,2621,1)
(2823,2456,1)
(2470,1040,1)
(858,1848,1)
(2791,1378,1)
(2551,11,1)
(2713,1884,1)
(924,1886,1)
(1285,1686,1)
(1917,1160,1)
(215,705,1)
(1663,2525,1)
(2189,2043,1)
(981,499,1)
(2589,2469,1)
(222,2575,1)
(2341,1700,1)
(117,377,1)
(62,1302,1)
(330,981,1)
(1162,2943,1)
(1471,2809,1)
(1770,1700,1)
(1503,1974,1)
(2153,2552,1)
(189,2285,1)
(637,1318,1)
(521,1347,1)
(2271,1417,1)
(7,308,1)
(1587,1322,1)
(2463,2497,1)
(1815,327,1)
(2379,385,1)
(979,1429,1)
(2592,2938,1)
(1996,2519,1)
(2964,472,1)
(838,1207,1)
(724,2451,1)
(53,2434,1)
(2130,165,1)
(1822,1474,1)
(1940,2177,1)
(1960,3011,1)
(2118,1456,1)
(1326,2885,1)
(580,2715,1)
(1857,676,1)
(1330,2745,1)
(2414,1892,1)
(1496,2348,1)
(2592,2128,1)
(2647,821,1)
(2453,2451,1)
(2043,2365,1)
(577,1677,1)
(989,631,1)
(224,3043,1)
(1315,1692,1)
(176,2359,1)
(2683,1207,1)
(926,1581,1)
(1411,1048,1)
(1283,2650,1)
(2893,2067,1)
(106,2985,1)
(567,839,1)
(2386,1216,1)
(1330,1874,1)
(157,11,1)
(844,725,1)
(1330,2885,1)
(876,980,1)
(2383,2283,1)
(227,901,1)
(1214,1378,1)
(635,2272,1)
(2702,1947,1)
(3014,515,1)
(289,2562,1)
(1346,2999,1)
(2781,401,1)
(2893,2256,1)
(1072,1700,1)
(3023,30,1)
(1473,1948,1)
(1792,1488,1)
(166,119,1)
(1315,596,1)
(1162,2885,1)
(622,596,1)
(2785,1474,1)
(2271,2885,1)
(1260,17,1)
(1917,1700,1)
(1162,1349,1)
(221,973,1)
(360,117,1)
(1751,1865,1)
(260,2451,1)
(2286,668,1)
(3032,564,1)
(2152,1534,1)
(2713,256,1)
(1621,2695,1)
(1330,1074,1)
(319,1358,1)
(329,1013,1)
(1503,472,1)
(877,1009,1)
(1778,2500,1)
(1008,1690,1)
(1457,2530,1)
(2480,2955,1)
(2688,722,1)
(2271,2458,1)
(1687,468,1)
(1815,2441,1)
(1778,994,1)
(2317,2943,1)
(2076,706,1)
(126,1900,1)
(1815,1900,1)
(2088,1027,1)
(354,2943,1)
(601,2781,1)
(580,166,1)
(2356,84,1)
(1291,2477,1)
(1713,1113,1)
(2809,545,1)
(410,1946,1)
(1162,2174,1)
(2899,1729,1)
(1058,1140,1)
(664,1554,1)
(2785,2930,1)
(1305,1940,1)
(2130,107,1)
(1786,256,1)
(2343,1547,1)
(2785,1875,1)
(1657,2794,1)
(1815,1124,1)
(2949,1937,1)
(117,44,1)
(3004,1534,1)
(1687,596,1)
(2650,2447,1)
(838,2683,1)
(1814,2448,1)
(146,1419,1)
(2551,2674,1)
(319,1526,1)
(2871,2143,1)
(216,1549,1)
(2943,1953,1)
(1268,499,1)
(2347,608,1)
(1954,2997,1)
(2551,1377,1)
(720,2055,1)
(1856,2442,1)
(836,2650,1)
(429,2809,1)
(1950,2256,1)
(2833,819,1)
(354,2588,1)
(652,2843,1)
(1379,2143,1)
(1996,2843,1)
(1332,2500,1)
(1701,1533,1)
(515,1028,1)
(2768,2621,1)
(2462,1550,1)
(2737,2053,1)
(1950,187,1)
(614,1700,1)
(156,64,1)
(329,1960,1)
(2473,814,1)
(677,1577,1)
(1490,515,1)
(1820,2077,1)
(2415,2524,1)
(188,2082,1)
(2713,596,1)
(1209,2270,1)
(1614,581,1)
(1049,846,1)
(1089,503,1)
(1815,44,1)
(2042,2809,1)
(569,1946,1)
(917,1700,1)
(2713,2588,1)
(2607,2441,1)
(491,2728,1)
(1326,1417,1)
(2024,1265,1)
(2785,1377,1)
(126,187,1)
(1162,2755,1)
(354,402,1)
(1860,2174,1)
(1790,1700,1)
(162,1049,1)
(52,2030,1)
(856,913,1)
(1073,2512,1)
(1950,1692,1)
(2607,187,1)
(837,297,1)
(2702,209,1)
(2130,2755,1)
(329,1137,1)
(1315,1900,1)
(2759,1875,1)
(1786,685,1)
(348,2205,1)
(2893,110,1)
(2785,472,1)
(481,200,1)
(904,2571,1)
(2397,1968,1)
(2019,1378,1)
(896,149,1)
(1342,345,1)
(160,1709,1)
(2607,2447,1)
(1068,2519,1)
(1477,2500,1)
(1942,1362,1)
(354,1884,1)
(797,627,1)
(1577,916,1)
(2785,2233,1)
(1285,2519,1)
(2542,1680,1)
(1815,1186,1)
(2964,44,1)
(2215,2476,1)
(687,1256,1)
(329,2588,1)
(107,1605,1)
(223,201,1)
(1950,1530,1)
(2039,606,1)
(2785,2674,1)
(840,102,1)
(118,991,1)
(2751,1293,1)
(1860,1745,1)
(2095,434,1)
(1284,2688,1)
(1399,793,1)
(689,2525,1)
(1815,1745,1)
(764,1623,1)
(2773,2650,1)
(503,2871,1)
(1388,264,1)
(896,1753,1)
(923,1762,1)
(725,113,1)
(1125,2871,1)
(1260,1686,1)
(329,107,1)
(185,1700,1)
(1579,1700,1)
(1996,2500,1)
(1609,2941,1)
(2562,1099,1)
(930,1386,1)
(563,2123,1)
(2713,1972,1)
(2965,1323,1)
(1042,487,1)
(2713,1074,1)
(2120,2582,1)
(1110,1038,1)
(1028,828,1)
(2030,2457,1)
(671,876,1)
(926,1476,1)
(229,1700,1)
(1860,2843,1)
(2809,1074,1)
(126,2500,1)
(2594,705,1)
(126,1474,1)
(177,2025,1)
(1721,1700,1)
(2740,2833,1)
(15,2128,1)
(1393,1280,1)
(1681,1401,1)
(1778,1265,1)
(1268,2699,1)
(2510,1293,1)
(2964,165,1)
(464,1403,1)
(2743,1618,1)
(2631,1124,1)
(1741,17,1)
(247,58,1)
(1070,2050,1)
(1503,1884,1)
(642,1526,1)
(2964,1972,1)
(2587,2164,1)
(1268,17,1)
(1330,402,1)
(902,1700,1)
(2194,1908,1)
(357,1772,1)
(2304,1546,1)
(813,1532,1)
(261,1195,1)
(1010,728,1)
(2906,2475,1)
(2754,1501,1)
(1860,2441,1)
(375,1477,1)
(117,107,1)
(1362,2272,1)
(360,2809,1)
(329,2614,1)
(2607,1884,1)
(1162,2779,1)
(20,2545,1)
(2713,2067,1)
(1786,402,1)
(2635,1429,1)
(1727,2348,1)
(3043,2602,1)
(2713,1875,1)
(232,1725,1)
(1458,1016,1)
(1815,3041,1)
(1162,1692,1)
(496,3002,1)
(2257,309,1)
(1895,436,1)
(354,468,1)
(876,1745,1)
(120,2571,1)
(513,1348,1)
(2256,770,1)
(2703,2680,1)
(875,1437,1)
(876,1476,1)
(1902,711,1)
(1162,2256,1)
(569,2614,1)
(2130,1568,1)
(2964,256,1)
(1004,2519,1)
(1330,44,1)
(2964,2139,1)
(551,845,1)
(1822,187,1)
(736,720,1)
(2082,1842,1)
(2650,2480,1)
(2055,1476,1)
(2130,1874,1)
(1483,1490,1)
(1815,2519,1)
(2927,2378,1)
(1519,2254,1)
(2739,1227,1)
(2911,1618,1)
(876,898,1)
(2785,402,1)
(2607,2048,1)
(1285,11,1)
(2466,1700,1)
(1087,2197,1)
(1238,2809,1)
(2533,2640,1)
(1226,2829,1)
(2650,2674,1)
(2527,1157,1)
(260,488,1)
(236,2713,1)
(157,1686,1)
(2816,2324,1)
(2833,1476,1)
(876,685,1)
(2814,1378,1)
(2964,1156,1)
(3033,478,1)
(1594,552,1)
(1233,139,1)
(10,1632,1)
(1856,223,1)
(959,1601,1)
(329,2155,1)
(949,371,1)
(1795,1541,1)
(2607,371,1)
(119,2763,1)
(1258,2537,1)
(194,223,1)
(2607,84,1)
(2535,1070,1)
(2478,2278,1)
(2650,1972,1)
(642,17,1)
(2833,2843,1)
(613,2922,1)
(67,344,1)
(1850,1700,1)
(931,134,1)
(3004,1124,1)
(3035,223,1)
(1399,1731,1)
(2893,2480,1)
(2688,2074,1)
(2785,2480,1)
(1503,1156,1)
(1351,499,1)
(2807,2650,1)
(322,312,1)
(1860,1946,1)
(2239,2182,1)
(872,2909,1)
(117,468,1)
(2042,2650,1)
(722,1809,1)
(499,1923,1)
(2129,1700,1)
(2367,1842,1)
(1434,2997,1)
(1330,468,1)
(1591,589,1)
(342,17,1)
(934,1530,1)
(861,460,1)
(2705,1214,1)
(354,327,1)
(201,55,1)
(235,1182,1)
(730,2272,1)
(117,2837,1)
(1727,1655,1)
(1379,1842,1)
(76,160,1)
(1985,656,1)
(1330,685,1)
(1592,1907,1)
(2525,1902,1)
(351,155,1)
(1260,1750,1)
(1967,1067,1)
(1593,2821,1)
(1815,1946,1)
(1503,2048,1)
(955,17,1)
(1506,1070,1)
(34,346,1)
(431,1342,1)
(3042,941,1)
(1481,744,1)
(2571,515,1)
(1212,1064,1)
(126,1534,1)
(2457,2514,1)
(2087,1621,1)
(1335,1910,1)
(472,2463,1)
(2811,684,1)
(2400,1538,1)
(126,44,1)
(918,67,1)
(354,1900,1)
(536,383,1)
(1432,302,1)
(926,2519,1)
(2713,2441,1)
(1214,137,1)
(2881,2582,1)
(1351,1476,1)
(2979,975,1)
(1822,1884,1)
(2785,3041,1)
(289,1842,1)
(354,906,1)
(607,1864,1)
(117,1407,1)
(2250,959,1)
(2607,2885,1)
(1752,867,1)
(2274,1700,1)
(1822,2885,1)
(1268,716,1)
(580,336,1)
(705,69,1)
(1330,107,1)
(2785,2067,1)
(2773,2809,1)
(2290,140,1)
(1559,1700,1)
(1256,3000,1)
(1165,515,1)
(732,2929,1)
(1347,1470,1)
(2430,642,1)
(2993,979,1)
(126,2674,1)
(179,338,1)
(2711,374,1)
(2247,884,1)
(1860,149,1)
(3001,654,1)
(1930,1700,1)
(182,1221,1)
(773,1168,1)
(1330,1056,1)
(1687,545,1)
(2713,2779,1)
(2893,256,1)
(2860,2128,1)
(2233,3000,1)
(470,2379,1)
(1503,256,1)
(1533,2133,1)
(39,2902,1)
(825,2096,1)
(2873,1116,1)
(82,2679,1)
(1004,3015,1)
(2551,1960,1)
(1815,149,1)
(968,2993,1)
(2336,2914,1)
(2496,2105,1)
(977,1759,1)
(1860,1884,1)
(1897,1576,1)
(778,1943,1)
(926,1534,1)
(2946,2519,1)
(2914,1700,1)
(643,1629,1)
(354,3041,1)
(645,3002,1)
(1822,2837,1)
(1687,2447,1)
(1051,2595,1)
(1836,963,1)
(2946,149,1)
(942,485,1)
(27,743,1)
(2551,1901,1)
(1687,2885,1)
(979,1541,1)
(2988,2006,1)
(1315,801,1)
(973,465,1)
(2607,2971,1)
(224,2663,1)
(1583,146,1)
(117,2943,1)
(2317,2779,1)
(734,84,1)
(1860,2048,1)
(673,15,1)
(652,1901,1)
(2130,472,1)
(569,2930,1)
(1362,1202,1)
(2838,2305,1)
(331,385,1)
(2696,1700,1)
(1822,1568,1)
(1815,402,1)
(360,1160,1)
(743,772,1)
(2650,1856,1)
(876,1137,1)
(2654,2020,1)
(734,149,1)
(1285,2500,1)
(1478,1562,1)
(2551,2699,1)
(473,223,1)
(2791,1463,1)
(2650,898,1)
(2964,898,1)
(44,1953,1)
(2280,68,1)
(1822,912,1)
(354,801,1)
(1503,2447,1)
(2785,2614,1)
(2551,1417,1)
(830,1493,1)
(2638,321,1)
(368,1332,1)
(3031,1581,1)
(2306,2739,1)
(2296,1176,1)
(1741,1526,1)
(1815,1417,1)
(2899,95,1)
(1332,2699,1)
(211,2871,1)
(912,2906,1)
(2809,596,1)
(1990,2272,1)
(916,2599,1)
(1717,1871,1)
(1432,243,1)
(2774,515,1)
(1815,11,1)
(2548,822,1)
(2674,421,1)
(1330,2174,1)
(346,1700,1)
(1815,726,1)
(2798,1700,1)
(980,2270,1)
(215,2383,1)
(863,2964,1)
(346,1785,1)
(715,255,1)
(811,2060,1)
(1315,1156,1)
(2055,1901,1)
(3004,1901,1)
(2271,1056,1)
(2115,228,1)
(2551,2155,1)
(2551,2745,1)
(1165,1700,1)
(644,2809,1)
(1162,377,1)
(566,905,1)
(808,27,1)
(1198,1237,1)
(163,2002,1)
(2826,2207,1)
(387,1209,1)
(1477,17,1)
(1503,2837,1)
(1568,2142,1)
(2713,2233,1)
(906,2128,1)
(1924,1457,1)
(1575,183,1)
(569,2755,1)
(154,1603,1)
(1906,2997,1)
(2658,2972,1)
(2648,223,1)
(550,841,1)
(1509,1700,1)
(1068,84,1)
(282,1798,1)
(410,2943,1)
(1034,2949,1)
(2146,1223,1)
(1501,328,1)
(2641,1197,1)
(2571,1931,1)
(2946,11,1)
(2317,1474,1)
(2649,1050,1)
(637,2394,1)
(2271,912,1)
(117,1156,1)
(2664,1759,1)
(1332,2903,1)
(2713,472,1)
(2099,1855,1)
(410,1013,1)
(569,912,1)
(1330,377,1)
(410,1417,1)
(3009,1772,1)
(1315,1349,1)
(1239,1105,1)
(239,2693,1)
(328,3000,1)
(2235,2812,1)
(2964,1960,1)
(2271,1474,1)
(1860,1417,1)
(165,3000,1)
(2551,726,1)
(1485,293,1)
(1759,1587,1)
(2964,2935,1)
(329,685,1)
(113,1700,1)
(1950,1013,1)
(590,1160,1)
(410,906,1)
(2390,1921,1)
(1996,84,1)
(1162,468,1)
(1129,1039,1)
(975,1899,1)
(569,1874,1)
(1209,895,1)
(776,1160,1)
(853,774,1)
(1892,2595,1)
(2551,1745,1)
(1950,2614,1)
(2841,2063,1)
(2687,2975,1)
(1630,212,1)
(2123,2713,1)
(157,84,1)
(2399,149,1)
(1917,2650,1)
(354,2233,1)
(2713,468,1)
(2901,801,1)
(410,371,1)
(1503,327,1)
(262,3042,1)
(2893,906,1)
(342,2500,1)
(342,1476,1)
(2660,418,1)
(1503,2921,1)
(1393,2927,1)
(2600,128,1)
(1420,600,1)
(1256,2211,1)
(2473,946,1)
(410,1692,1)
(2893,1946,1)
(1351,17,1)
(1370,2909,1)
(567,1842,1)
(2902,20,1)
(2809,2588,1)
(1326,101,1)
(2782,1800,1)
(1877,2809,1)
(2893,1137,1)
(1916,1089,1)
(2853,1473,1)
(122,1162,1)
(2964,2943,1)
(410,2885,1)
(1645,1172,1)
(1351,3002,1)
(2552,1576,1)
(1786,2745,1)
(2910,1780,1)
(2462,69,1)
(1822,1900,1)
(2423,2763,1)
(2950,2143,1)
(1860,2458,1)
(2607,1474,1)
(1261,2559,1)
(1503,468,1)
(2809,2943,1)
(634,761,1)
(117,1186,1)
(126,468,1)
(1342,1802,1)
(1802,95,1)
(1468,303,1)
(2426,563,1)
(828,2576,1)
(1209,1815,1)
(329,1377,1)
(2551,2921,1)
(329,545,1)
(1148,76,1)
(126,2885,1)
(1815,2843,1)
(961,2272,1)
(126,11,1)
(329,1349,1)
(2807,1130,1)
(2729,2986,1)
(2046,855,1)
(2713,371,1)
(2893,402,1)
(86,360,1)
(2271,1692,1)
(1860,499,1)
(1865,659,1)
(2881,2287,1)
(126,1974,1)
(2731,2960,1)
(1593,1467,1)
(998,1700,1)
(2484,1620,1)
(583,1378,1)
(2812,1586,1)
(2280,2675,1)
(2475,457,1)
(954,2664,1)
(1162,1745,1)
(2438,74,1)
(1252,2886,1)
(1195,210,1)
(630,1221,1)
(1659,2270,1)
(1664,2895,1)
(2759,1692,1)
(876,545,1)
(2130,1474,1)
(2156,2181,1)
(1676,1823,1)
(2317,1530,1)
(2759,980,1)
(399,2296,1)
(702,1210,1)
(1583,521,1)
(2297,2471,1)
(571,677,1)
(2420,1249,1)
(992,2518,1)
(391,2137,1)
(2909,2167,1)
(2607,2943,1)
(1709,1557,1)
(1822,2155,1)
(2560,2340,1)
(2582,53,1)
(1162,2588,1)
(1162,1856,1)
(2994,864,1)
(117,2222,1)
(2607,17,1)
(2130,2222,1)
(2814,137,1)
(2819,430,1)
(152,2243,1)
(2631,17,1)
(1133,1688,1)
(2650,596,1)
(2785,1972,1)
(1801,918,1)
(596,2353,1)
(117,2048,1)
(2327,2702,1)
(1330,2614,1)
(1730,2272,1)
(2621,2323,1)
(1614,1420,1)
(1950,2921,1)
(1858,1471,1)
(569,2921,1)
(660,2190,1)
(1197,2519,1)
(1860,2480,1)
(1822,2441,1)
(559,2669,1)
(2650,1875,1)
(2539,2923,1)
(354,2081,1)
(1950,1972,1)
(1950,3041,1)
(865,549,1)
(1620,2973,1)
(1228,1378,1)
(876,2971,1)
(1822,980,1)
(2124,977,1)
(1204,881,1)
(2893,2921,1)
(1149,2882,1)
(1078,815,1)
(4,83,1)
(126,2174,1)
(1631,2733,1)
(1649,551,1)
(19,2568,1)
(3024,1417,1)
(1517,2066,1)
(2317,2139,1)
(1987,2265,1)
(1786,2971,1)
(2317,2256,1)
(590,117,1)
(50,2321,1)
(1101,1802,1)
(310,1700,1)
(1165,1033,1)
(10,2637,1)
(44,3000,1)
(569,2139,1)
(2609,893,1)
(345,546,1)
(599,2128,1)
(1228,137,1)
(2317,1417,1)
(1093,1700,1)
(2946,1526,1)
(1373,8,1)
(1162,2519,1)
(1330,1137,1)
(1446,1799,1)
(2019,2086,1)
(2122,2034,1)
(2126,796,1)
(2940,1700,1)
(1881,748,1)
(2237,791,1)
(1087,470,1)
(2650,1634,1)
(1068,2500,1)
(1869,835,1)
(2588,2039,1)
(2696,985,1)
(1315,1013,1)
(1495,149,1)
(989,2087,1)
(569,468,1)
(1950,377,1)
(2859,2240,1)
(354,980,1)
(2572,2136,1)
(1933,2904,1)
(1285,2016,1)
(1326,2745,1)
(259,2883,1)
(1557,2990,1)
(1503,980,1)
(2785,44,1)
(2944,2466,1)
(1326,925,1)
(1405,529,1)
(2899,1610,1)
(2356,2843,1)
(620,1071,1)
(2402,2536,1)
(2271,1349,1)
(2455,865,1)
(504,533,1)
(1667,1290,1)
(2271,1634,1)
(329,912,1)
(132,1751,1)
(741,674,1)
(2594,2871,1)
(2084,1647,1)
(1822,371,1)
(2717,2622,1)
(1443,983,1)
(1838,1910,1)
(1315,402,1)
(2010,84,1)
(1860,2943,1)
(222,2733,1)
(2648,2128,1)
(117,2447,1)
(1953,2803,1)
(28,949,1)
(2982,175,1)
(2778,1882,1)
(1268,920,1)
(1272,1529,1)
(1998,2869,1)
(2893,2180,1)
(354,2971,1)
(410,545,1)
(1554,2003,1)
(2607,1900,1)
(2394,1700,1)
(1315,371,1)
(381,1357,1)
(1583,2637,1)
(2271,2155,1)
(1786,2441,1)
(2607,2614,1)
(1496,1655,1)
(2199,1390,1)
(370,2048,1)
(1822,256,1)
(2953,2825,1)
(860,11,1)
(2002,2916,1)
(2607,898,1)
(2010,2519,1)
(2551,1874,1)
(1326,2067,1)
(2080,2377,1)
(1822,545,1)
(2551,2837,1)
(2120,146,1)
(2534,239,1)
(439,1511,1)
(1815,1377,1)
(161,2843,1)
(2326,667,1)
(1822,1530,1)
(2688,1700,1)
(2130,2885,1)
(1480,2441,1)
(2888,1925,1)
(1572,1972,1)
(1822,906,1)
(1217,1711,1)
(881,1378,1)
(569,377,1)
(329,377,1)
(2607,2458,1)
(503,2643,1)
(2950,69,1)
(2893,2885,1)
(1996,1476,1)
(1794,2508,1)
(2276,1593,1)
(2923,2317,1)
(1963,1124,1)
(760,722,1)
(503,69,1)
(1326,545,1)
(1687,2048,1)
(1904,661,1)
(876,17,1)
(2010,149,1)
(1315,2458,1)
(2278,1901,1)
(384,1522,1)
(1180,2500,1)
(2871,1842,1)
(1618,2519,1)
(410,187,1)
(465,1162,1)
(1687,256,1)
(641,2238,1)
(955,1686,1)
(1610,1054,1)
(2367,69,1)
(1145,1910,1)
(1326,2837,1)
(1265,463,1)
(1603,1700,1)
(857,1353,1)
(2108,389,1)
(488,1274,1)
(2650,1186,1)
(935,605,1)
(1102,1888,1)
(2332,302,1)
(297,929,1)
(1273,428,1)
(782,2642,1)
(2441,895,1)
(505,1160,1)
(2759,1349,1)
(846,2685,1)
(2127,230,1)
(150,2905,1)
(1067,2004,1)
(410,435,1)
(400,1700,1)
(1162,499,1)
(2650,165,1)
(2271,2943,1)
(1687,1137,1)
(840,1700,1)
(2809,2480,1)
(203,2519,1)
(2159,1750,1)
(2972,2976,1)
(1162,107,1)
(1330,2480,1)
(2893,1634,1)
(2837,1270,1)
(1037,2294,1)
(2182,974,1)
(567,2143,1)
(1287,2272,1)
(2317,2447,1)
(2815,911,1)
(1741,149,1)
(1112,1691,1)
(866,2593,1)
(1822,1056,1)
(1860,1686,1)
(1162,1186,1)
(2785,898,1)
(2016,70,1)
(1277,734,1)
(2580,2809,1)
(2263,1700,1)
(2367,2143,1)
(2158,1842,1)
(1582,87,1)
(2051,1874,1)
(2130,1074,1)
(126,1874,1)
(1338,1842,1)
(2120,1910,1)
(1697,1642,1)
(2964,2674,1)
(1619,259,1)
(1860,1074,1)
(2375,2129,1)
(2108,1700,1)
(876,1901,1)
(1996,1686,1)
(1238,1700,1)
(505,117,1)
(1541,944,1)
(2832,1749,1)
(732,1242,1)
(3002,295,1)
(2423,158,1)
(2441,1346,1)
(998,90,1)
(1441,1700,1)
(1419,2709,1)
(183,2579,1)
(2109,2519,1)
(1860,685,1)
(681,633,1)
(751,127,1)
(2964,1856,1)
(1162,11,1)
(2650,327,1)
(1860,1692,1)
(1503,906,1)
(896,84,1)
(647,1931,1)
(329,1407,1)
(268,69,1)
(2589,343,1)
(418,2710,1)
(1326,980,1)
(2893,2174,1)
(2130,2174,1)
(569,472,1)
(2682,765,1)
(2809,2222,1)
(2607,2500,1)
(1195,2883,1)
(2325,196,1)
(2785,371,1)
(2152,3000,1)
(4,2272,1)
(3025,2649,1)
(1027,515,1)
(1815,1634,1)
(766,916,1)
(1603,2977,1)
(1012,310,1)
(1646,807,1)
(354,912,1)
(126,2155,1)
(354,1186,1)
(2893,371,1)
(1815,2943,1)
(275,1687,1)
(157,1913,1)
(2592,2167,1)
(2271,2222,1)
(652,17,1)
(691,1700,1)
(1822,402,1)
(1999,1721,1)
(1207,1160,1)
(1822,1377,1)
(1180,499,1)
(1411,2574,1)
(410,2458,1)
(2607,402,1)
(1496,1363,1)
(2072,1700,1)
(876,2930,1)
(2152,2558,1)
(1876,2351,1)
(2514,2371,1)
(2085,2763,1)
(1503,2971,1)
(2800,1211,1)
(1786,1884,1)
(1244,1411,1)
(860,1476,1)
(2848,2880,1)
(818,118,1)
(2010,2843,1)
(1984,2740,1)
(442,2636,1)
(544,1676,1)
(1332,1686,1)
(329,2458,1)
(1471,1031,1)
(1315,898,1)
(2455,2087,1)
(698,2189,1)
(2759,2155,1)
(126,110,1)
(2240,2270,1)
(2026,1260,1)
(2726,520,1)
(1815,801,1)
(2494,2355,1)
(31,2223,1)
(342,2699,1)
(2808,2573,1)
(864,362,1)
(876,2233,1)
(1271,2393,1)
(1546,432,1)
(432,2302,1)
(1503,3041,1)
(1334,1939,1)
(126,2441,1)
(956,1556,1)
(2255,2430,1)
(343,1528,1)
(2988,1842,1)
(2130,1856,1)
(1395,599,1)
(642,2519,1)
(1315,1186,1)
(1315,1884,1)
(1096,2396,1)
(1815,1476,1)
(2446,2947,1)
(2551,187,1)
(565,792,1)
(1786,801,1)
(1976,227,1)
(676,1647,1)
(1193,211,1)
(2785,2222,1)
(2907,1063,1)
(1950,2755,1)
(2837,1700,1)
(1530,2087,1)
(1543,1895,1)
(2889,1301,1)
(770,2354,1)
(2964,2755,1)
(162,1042,1)
(418,1475,1)
(1668,2916,1)
(2899,2621,1)
(2845,1727,1)
(295,1864,1)
(2265,2005,1)
(2578,2328,1)
(2893,2930,1)
(354,1972,1)
(1786,2614,1)
(2631,1686,1)
(126,2943,1)
(1174,1763,1)
(2759,1137,1)
(945,2143,1)
(2238,1225,1)
(1477,1124,1)
(569,1856,1)
(1861,1567,1)
(2551,149,1)
(354,2935,1)
(1326,256,1)
(1980,148,1)
(1970,2208,1)
(393,312,1)
(126,2480,1)
(2790,531,1)
(1666,867,1)
(2783,2506,1)
(2607,1186,1)
(1815,472,1)
(2946,17,1)
(2227,2345,1)
(2530,1931,1)
(2010,1728,1)
(2910,1078,1)
(876,44,1)
(671,1675,1)
(2139,1700,1)
(329,801,1)
(2618,1288,1)
(230,2983,1)
(2823,1578,1)
(727,1178,1)
(1471,117,1)
(1711,1366,1)
(2650,1377,1)
(1180,84,1)
(2924,876,1)
(2328,1442,1)
(236,1413,1)
(861,457,1)
(378,1698,1)
(1180,879,1)
(1477,2519,1)
(2189,2662,1)
(291,1851,1)
(1860,545,1)
(3014,1162,1)
(423,649,1)
(2713,402,1)
(1434,1231,1)
(2713,44,1)
(2946,1591,1)
(87,2516,1)
(354,1856,1)
(2271,44,1)
(1330,2930,1)
(827,696,1)
(1038,2556,1)
(2130,801,1)
(2785,2837,1)
(1808,1717,1)
(2342,1117,1)
(876,2779,1)
(2320,1127,1)
(2152,1487,1)
(2313,2605,1)
(1289,439,1)
(2607,2779,1)
(134,1700,1)
(1330,596,1)
(374,2052,1)
(1068,2843,1)
(1414,873,1)
(1318,142,1)
(2271,2971,1)
(2070,2930,1)
(873,145,1)
(1004,1069,1)
(2230,21,1)
(2773,1700,1)
(1285,1901,1)
(134,1162,1)
(1809,1931,1)
(131,1162,1)
(1335,146,1)
(2830,1238,1)
(2204,1700,1)
(1679,1275,1)
(1162,165,1)
(2317,2971,1)
(1868,2830,1)
(2472,1442,1)
(2343,705,1)
(2831,1592,1)
(2049,1049,1)
(2331,1841,1)
(1315,1972,1)
(302,2900,1)
(2130,2067,1)
(1162,2447,1)
(719,1700,1)
(2259,618,1)
(2607,2699,1)
(1813,1010,1)
(2241,917,1)
(1268,1526,1)
(242,2676,1)
(34,2253,1)
(2854,1535,1)
(689,2415,1)
(2650,906,1)
(457,1236,2)
(2328,1662,2)
(2297,1671,2)
(126,1960,2)
(2589,892,2)
(2868,2737,2)
(767,2815,2)
(2010,499,2)
(2474,2345,2)
(2271,2921,2)
(435,2345,2)
(2208,2719,2)
(513,1348,2)
(626,69,2)
(319,1526,2)
(1950,1156,2)
(2592,223,2)
(82,2972,2)
(2218,2552,2)
(687,901,2)
(117,110,2)
(126,1946,2)
(2113,2781,2)
(2270,2910,2)
(1786,1156,2)
(2332,2640,2)
(1115,2972,2)
(2551,2614,2)
(457,460,2)
(1746,706,2)
(2043,2754,2)
(876,2779,2)
(1503,472,2)
(1048,2642,2)
(410,187,2)
(2148,1396,2)
(712,2676,2)
(2223,642,2)
(1094,2356,2)
(377,2648,2)
(2599,1105,2)
(2893,44,2)
(1197,1686,2)
(1357,2989,2)
(2607,44,2)
(916,2110,2)
(2220,950,2)
(2727,2753,2)
(236,1700,2)
(1285,1750,2)
(858,1540,2)
(2893,2067,2)
(1860,1901,2)
(1180,1901,2)
(1950,1377,2)
(730,2676,2)
(2854,1700,2)
(2595,2676,2)
(393,2947,2)
(2759,801,2)
(1881,1671,2)
(2893,256,2)
(2893,2779,2)
(1503,402,2)
(2218,1671,2)
(1901,2910,2)
(857,514,2)
(2964,1568,2)
(2964,2779,2)
(1135,1347,2)
(280,38,2)
(2650,44,2)
(2138,2379,2)
(2607,906,2)
(2848,2880,2)
(794,1274,2)
(1231,1485,2)
(1168,1338,2)
(2758,1160,2)
(522,345,2)
(2857,229,2)
(1916,1577,2)
(1945,2910,2)
(1112,1411,2)
(1386,2972,2)
(67,1274,2)
(533,2972,2)
(1286,2226,2)
(510,2356,2)
(2237,2642,2)
(1260,1124,2)
(2874,2899,2)
(122,1700,2)
(2900,2640,2)
(1917,2650,2)
(80,1676,2)
(1860,2222,2)
(184,933,2)
(2619,245,2)
(2047,2859,2)
(876,1474,2)
(814,1582,2)
(1343,706,2)
(330,941,2)
(2713,468,2)
(354,256,2)
(1950,726,2)
(476,549,2)
(847,880,2)
(1950,1745,2)
(2953,706,2)
(93,2226,2)
(1786,1900,2)
(1985,3009,2)
(1518,1700,2)
(876,2755,2)
(129,1671,2)
(748,2931,2)
(1326,1960,2)
(354,44,2)
(1037,357,2)
(2551,912,2)
(2348,2916,2)
(2964,2067,2)
(2863,662,2)
(239,2356,2)
(164,1411,2)
(1778,499,2)
(1506,1913,2)
(1786,2930,2)
(2893,2943,2)
(2564,2082,2)
(1162,2843,2)
(2964,1974,2)
(2809,1349,2)
(836,1160,2)
(383,706,2)
(1255,706,2)
(1248,2910,2)
(2346,1494,2)
(1370,2909,2)
(2964,2155,2)
(2759,2480,2)
(1773,2972,2)
(1950,2614,2)
(2789,2910,2)
(334,498,2)
(1326,1874,2)
(1194,2356,2)
(1165,1700,2)
(2893,2837,2)
(569,1900,2)
(1996,149,2)
(126,596,2)
(933,1216,2)
(343,2469,2)
(163,2916,2)
(2976,2356,2)
(3009,2253,2)
(2659,1434,2)
(1217,1901,2)
(1816,1751,2)
(3025,1566,2)
(117,1530,2)
(734,1124,2)
(419,429,2)
(791,2642,2)
(1874,1274,2)
(1330,256,2)
(750,901,2)
(776,117,2)
(354,1568,2)
(1731,2640,2)
(2204,1700,2)
(2427,102,2)
(2320,1476,2)
(408,1086,2)
(1935,1631,2)
(498,2552,2)
(329,980,2)
(2777,2356,2)
(2386,2676,2)
(411,1274,2)
(1338,1188,2)
(59,1518,2)
(1827,2640,2)
(1260,1750,2)
(2237,2552,2)
(892,838,2)
(1105,378,2)
(660,2197,2)
(1950,3041,2)
(1815,912,2)
(1687,1137,2)
(2964,472,2)
(126,110,2)
(876,256,2)
(2281,771,2)
(1381,1162,2)
(1598,2356,2)
(796,2931,2)
(1506,741,2)
(2811,2947,2)
(1950,1972,2)
(810,2719,2)
(2317,2048,2)
(1657,2931,2)
(2349,1048,2)
(1869,2356,2)
(876,1856,2)
(453,38,2)
(473,2167,2)
(2162,2700,2)
(1894,2916,2)
(2871,705,2)
(2807,2809,2)
(1315,545,2)
(1024,69,2)
(1687,1874,2)
(1255,1167,2)
(2317,906,2)
(1787,355,2)
(695,1434,2)
(651,2947,2)
(2675,117,2)
(2650,402,2)
(1432,1105,2)
(246,1105,2)
(1087,470,2)
(2551,1900,2)
(2405,2972,2)
(1822,2943,2)
(2168,1658,2)
(2127,1700,2)
(1954,604,2)
(1529,2972,2)
(2759,1186,2)
(2271,256,2)
(2447,932,2)
(209,1160,2)
(2924,345,2)
(1815,17,2)
(2282,1758,2)
(1815,1156,2)
(1865,2859,2)
(2450,3016,2)
(2785,685,2)
(2841,1379,2)
(1209,2895,2)
(400,2809,2)
(2759,1884,2)
(1761,901,2)
(1188,1630,2)
(1399,2640,2)
(126,2745,2)
(1110,2910,2)
(2357,1511,2)
(276,1024,2)
(1170,1913,2)
(726,102,2)
(1554,993,2)
(2317,2588,2)
(1134,2272,2)
(1815,2971,2)
(1595,57,2)
(2112,1381,2)
(630,1221,2)
(1330,2921,2)
(2317,545,2)
(644,1160,2)
(2878,38,2)
(1822,1900,2)
(1330,2067,2)
(1543,2910,2)
(491,978,2)
(2985,1087,2)
(2230,1593,2)
(2713,2155,2)
(2789,1526,2)
(815,1004,2)
(2317,1974,2)
(157,1476,2)
(2675,1160,2)
(2144,2356,2)
(207,1657,2)
(2558,2910,2)
(1477,137,2)
(126,472,2)
(1996,499,2)
(2042,642,2)
(1795,1534,2)
(2621,1658,2)
(1860,2699,2)
(1101,1802,2)
(1687,110,2)
(2136,2859,2)
(2109,2843,2)
(830,2910,2)
(1996,1581,2)
(1534,741,2)
(567,69,2)
(876,1900,2)
(1503,1056,2)
(254,1274,2)
(129,2640,2)
(1326,1972,2)
(1228,642,2)
(3033,478,2)
(612,2676,2)
(1874,3000,2)
(67,2356,2)
(474,121,2)
(569,107,2)
(86,360,2)
(1424,1274,2)
(2921,1554,2)
(543,706,2)
(2551,1568,2)
(2551,2519,2)
(1605,2356,2)
(2130,1056,2)
(2741,2895,2)
(1016,1698,2)
(2305,223,2)
(806,2753,2)
(1701,2110,2)
(1283,1700,2)
(2895,706,2)
(1197,1209,2)
(732,2931,2)
(2236,1335,2)
(1246,1815,2)
(2811,706,2)
(503,2871,2)
(1786,327,2)
(1963,11,2)
(938,498,2)
(876,912,2)
(1459,993,2)
(2650,2233,2)
(2650,1074,2)
(1228,2110,2)
(2910,1078,2)
(1268,2843,2)
(2551,1186,2)
(1614,1904,2)
(2317,1417,2)
(998,90,2)
(2363,57,2)
(308,2676,2)
(123,1751,2)
(2893,2935,2)
(2046,1260,2)
(1875,1700,2)
(2785,1875,2)
(1801,2356,2)
(876,801,2)
(2130,545,2)
(2840,2676,2)
(1702,511,2)
(1162,2755,2)
(1027,1671,2)
(2130,2885,2)
(1330,801,2)
(933,2676,2)
(1480,2511,2)
(1860,1349,2)
(2599,2931,2)
(1091,706,2)
(1281,1105,2)
(2317,2256,2)
(1315,2614,2)
(1930,1700,2)
(2472,2766,2)
(3031,3002,2)
(569,2155,2)
(457,1307,2)
(2893,1407,2)
(2688,2512,2)
(2834,1195,2)
(319,2931,2)
(1260,17,2)
(98,1700,2)
(1315,2745,2)
(117,2233,2)
(863,1676,2)
(644,1576,2)
(1815,2447,2)
(893,1880,2)
(2092,2859,2)
(1326,101,2)
(2675,1700,2)
(2214,642,2)
(1062,1427,2)
(2899,1987,2)
(2833,17,2)
(2005,2345,2)
(2308,1658,2)
(1777,67,2)
(354,1692,2)
(1671,2833,2)
(2347,608,2)
(2480,2356,2)
(2339,1610,2)
(1952,69,2)
(258,86,2)
(1203,1862,2)
(1232,1214,2)
(2271,2222,2)
(2607,1972,2)
(590,117,2)
(192,2865,2)
(1343,2947,2)
(1778,1913,2)
(2035,2630,2)
(2809,2458,2)
(1000,1698,2)
(1762,665,2)
(919,923,2)
(1065,1700,2)
(1095,1647,2)
(1225,1395,2)
(662,2857,2)
(1838,1910,2)
(2300,2226,2)
(2236,1326,2)
(698,1274,2)
(2809,402,2)
(2964,402,2)
(945,1658,2)
(2713,2588,2)
(2526,1539,2)
(2130,468,2)
(1324,432,2)
(2525,941,2)
(840,102,2)
(2055,1686,2)
(1315,377,2)
(429,268,2)
(2124,2356,2)
(2785,2139,2)
(2809,1856,2)
(2055,17,2)
(2715,1195,2)
(1533,2133,2)
(2469,2257,2)
(2342,2642,2)
(2130,2233,2)
(2580,2650,2)
(1687,1349,2)
(1577,1105,2)
(2118,2272,2)
(2777,223,2)
(285,2910,2)
(2551,2943,2)
(1499,2984,2)
(1124,2519,2)
(2060,2972,2)
(303,941,2)
(2650,726,2)
(60,498,2)
(1822,1875,2)
(105,1751,2)
(1222,1701,2)
(1472,857,2)
(2789,1901,2)
(970,2345,2)
(354,980,2)
(2137,2272,2)
(1815,1349,2)
(1301,2542,2)
(243,2552,2)
(2910,1701,2)
(442,2493,2)
(2815,831,2)
(880,941,2)
(126,84,2)
(791,2984,2)
(1868,2972,2)
(776,2096,2)
(126,898,2)
(152,2975,2)
(956,604,2)
(2594,2950,2)
(835,1274,2)
(1342,2947,2)
(2607,2458,2)
(1330,2614,2)
(3035,223,2)
(285,1658,2)
(2713,187,2)
(1379,2950,2)
(2990,2917,2)
(2654,2831,2)
(1285,149,2)
(2954,2676,2)
(2713,1972,2)
(1308,2356,2)
(2809,801,2)
(212,498,2)
(10,2287,2)
(1315,107,2)
(1500,2972,2)
(817,644,2)
(3024,1904,2)
(462,260,2)
(1642,1676,2)
(1701,1105,2)
(1963,1526,2)
(658,2526,2)
(2650,1972,2)
(371,2453,2)
(2114,1397,2)
(894,2819,2)
(384,2286,2)
(1815,1960,2)
(336,739,2)
(2826,2272,2)
(2328,2972,2)
(1929,2676,2)
(2607,2779,2)
(2297,2984,2)
(1604,1307,2)
(1330,2441,2)
(2383,567,2)
(1815,468,2)
(710,2650,2)
(697,2676,2)
(1816,2859,2)
(1216,2676,2)
(1807,911,2)
(2103,1410,2)
(2687,1312,2)
(329,2067,2)
(3004,2519,2)
(2709,1274,2)
(1449,2931,2)
(1410,2110,2)
(410,906,2)
(387,2895,2)
(2713,2614,2)
(527,2676,2)
(651,706,2)
(949,2453,2)
(900,3037,2)
(264,2910,2)
(94,1274,2)
(2484,2766,2)
(1185,2621,2)
(2096,1274,2)
(410,1692,2)
(2117,289,2)
(2236,1330,2)
(1365,2272,2)
(1533,1700,2)
(1167,2995,2)
(2831,1592,2)
(8,722,2)
(2290,1307,2)
(2382,2642,2)
(692,1185,2)
(1860,1974,2)
(2789,706,2)
(2964,2447,2)
(2313,2910,2)
(1977,1293,2)
(1822,2447,2)
(280,1340,2)
(1950,980,2)
(1795,2519,2)
(1338,69,2)
(2955,1274,2)
(926,149,2)
(185,1700,2)
(1890,2410,2)
(1291,2676,2)
(1822,402,2)
(1640,2931,2)
(1332,1476,2)
(1512,706,2)
(473,150,2)
(1351,1526,2)
(2123,1700,2)
(400,1700,2)
(2075,496,2)
(1460,2988,2)
(2962,1751,2)
(1920,2393,2)
(2964,2048,2)
(2473,2859,2)
(432,941,2)
(1996,17,2)
(2996,970,2)
(1490,876,2)
(2342,642,2)
(2317,2480,2)
(1701,1411,2)
(2785,2943,2)
(569,2458,2)
(2631,2699,2)
(2285,2859,2)
(1668,2804,2)
(569,1946,2)
(2705,2356,2)
(1078,1004,2)
(126,1056,2)
(431,2910,2)
(2809,2048,2)
(402,1700,2)
(1822,2614,2)
(2670,880,2)
(1153,2831,2)
(1012,1985,2)
(2713,1692,2)
(2803,2427,2)
(2341,876,2)
(2009,2247,2)
(1955,1274,2)
(354,2222,2)
(2785,1884,2)
(872,2545,2)
(1860,371,2)
(1379,839,2)
(642,17,2)
(1315,1634,2)
(2320,1901,2)
(505,706,2)
(2809,2139,2)
(884,3025,2)
(2271,2155,2)
(2470,2158,2)
(2893,2441,2)
(1901,706,2)
(2764,595,2)
(2313,2953,2)
(876,2139,2)
(2402,1658,2)
(187,731,2)
(109,1224,2)
(734,2699,2)
(1907,498,2)
(329,2174,2)
(2393,755,2)
(2950,69,2)
(759,59,2)
(1654,2676,2)
(2893,1156,2)
(1618,2519,2)
(2234,498,2)
(2713,1745,2)
(3037,2984,2)
(1303,1963,2)
(1776,1274,2)
(157,2500,2)
(2893,1568,2)
(988,2989,2)
(2719,1658,2)
(1326,2256,2)
(1342,1658,2)
(2523,2972,2)
(1115,2356,2)
(126,2519,2)
(1579,1274,2)
(328,2286,2)
(1767,918,2)
(1093,1700,2)
(3012,2356,2)
(732,1105,2)
(1315,2048,2)
(1384,706,2)
(1532,876,2)
(1822,3041,2)
(916,1105,2)
(1432,2931,2)
(1330,545,2)
(2382,2157,2)
(873,2650,2)
(700,2947,2)
(1877,2158,2)
(2950,2116,2)
(2773,82,2)
(2130,2067,2)
(2271,1974,2)
(2759,2837,2)
(2551,1686,2)
(569,2588,2)
(963,3016,2)
(885,1085,2)
(63,866,2)
(869,1105,2)
(273,2010,2)
(2096,839,2)
(1326,1900,2)
(1503,2139,2)
(2551,1137,2)
(1326,2971,2)
(2628,1120,2)
(569,2447,2)
(2317,1692,2)
(2650,898,2)
(2320,1534,2)
(926,1686,2)
(203,2859,2)
(1477,1901,2)
(881,1274,2)
(333,1340,2)
(2265,2345,2)
(25,1224,2)
(1314,2947,2)
(1822,906,2)
(1860,499,2)
(1326,2458,2)
(1860,107,2)
(1268,11,2)
(354,2755,2)
(1317,2286,2)
(2650,2885,2)
(2812,838,2)
(1889,2313,2)
(1282,734,2)
(1565,2345,2)
(2491,1085,2)
(1963,149,2)
(2750,1593,2)
(570,2910,2)
(1003,2766,2)
(2711,374,2)
(2551,2971,2)
(2551,2935,2)
(2542,776,2)
(1218,2947,2)
(585,908,2)
(524,1630,2)
(684,1658,2)
(2271,801,2)
(2648,223,2)
(1111,289,2)
(180,2972,2)
(569,2885,2)
(1100,374,2)
(2084,1647,2)
(2785,107,2)
(1379,72,2)
(892,1721,2)
(1163,1539,2)
(590,2650,2)
(902,1700,2)
(2311,2859,2)
(1224,1899,2)
(53,859,2)
(1747,892,2)
(652,2910,2)
(1116,2676,2)
(57,1274,2)
(410,1960,2)
(2526,1751,2)
(29,352,2)
(3030,2490,2)
(719,1700,2)
(2796,1105,2)
(2280,2675,2)
(1976,2356,2)
(711,941,2)
(2683,2552,2)
(245,1134,2)
(2964,1856,2)
(2332,755,2)
(13,2490,2)
(2607,1530,2)
(2787,2984,2)
(1860,377,2)
(1625,950,2)
(2893,2971,2)
(2713,1349,2)
(637,1318,2)
(2893,980,2)
(2243,2975,2)
(117,1856,2)
(3037,642,2)
(2608,1511,2)
(791,2110,2)
(652,1526,2)
(3020,2676,2)
(671,876,2)
(2893,2480,2)
(1950,1634,2)
(2865,2910,2)
(213,2676,2)
(400,1851,2)
(399,1265,2)
(2607,1186,2)
(876,472,2)
(240,1700,2)
(875,1087,2)
(2809,2441,2)
(85,2356,2)
(2130,912,2)
(2317,1960,2)
(2871,69,2)
(1838,2493,2)
(1162,17,2)
(2893,2885,2)
(1927,1962,2)
(2685,102,2)
(1649,1494,2)
(329,726,2)
(1603,1162,2)
(2271,371,2)
(1217,2843,2)
(498,2642,2)
(2249,2947,2)
(2819,2733,2)
(1503,2745,2)
(121,817,2)
(1085,2972,2)
(381,2989,2)
(266,1904,2)
(569,906,2)
(243,642,2)
(2271,2480,2)
(134,876,2)
(2720,2809,2)
(156,64,2)
(1326,165,2)
(1036,2676,2)
(220,1880,2)
(2308,706,2)
(492,1940,2)
(2356,84,2)
(2271,1856,2)
(485,857,2)
(223,201,2)
(1950,1013,2)
(2982,2719,2)
(2713,1013,2)
(977,2110,2)
(1358,2110,2)
(1786,2702,2)
(1741,84,2)
(1315,1417,2)
(2777,2128,2)
(857,1353,2)
(2441,2270,2)
(2860,2167,2)
(2546,1434,2)
(2107,2356,2)
(1379,705,2)
(2690,813,2)
(301,1566,2)
(2551,1530,2)
(1392,2082,2)
(2713,107,2)
(90,358,2)
(1822,472,2)
(1860,2935,2)
(881,1214,2)
(2713,44,2)
(2130,1960,2)
(354,402,2)
(2996,2356,2)
(1381,1700,2)
(2173,2356,2)
(2997,2336,2)
(2837,1700,2)
(2761,993,2)
(876,1634,2)
(745,630,2)
(2079,1609,2)
(2010,2699,2)
(796,2640,2)
(2238,1225,2)
(2182,1862,2)
(2728,978,2)
(1248,1700,2)
(410,2174,2)
(1582,1163,2)
(1879,1906,2)
(1815,596,2)
(408,1701,2)
(1197,1901,2)
(2042,2809,2)
(1335,2582,2)
(1786,726,2)
(1679,2863,2)
(2115,1618,2)
(2467,755,2)
(2785,472,2)
(505,2809,2)
(1124,17,2)
(1616,57,2)
(1432,2984,2)
(2759,2233,2)
(2198,1274,2)
(1895,1160,2)
(410,1974,2)
(2091,2345,2)
(1276,1593,2)
(2759,327,2)
(820,1700,2)
(2123,1647,2)
(1005,1195,2)
(331,2197,2)
(141,345,2)
(1326,1856,2)
(1823,2681,2)
(498,1671,2)
(243,755,2)
(825,2096,2)
(1221,511,2)
(838,1207,2)
(780,2972,2)
(771,1671,2)
(2382,642,2)
(2551,2356,2)
(2024,880,2)
(2578,2328,2)
(2474,1232,2)
(1268,2519,2)
(1503,1377,2)
(2353,731,2)
(2900,2931,2)
(2130,187,2)
(3000,2286,2)
(1330,2674,2)
(2865,1889,2)
(354,2048,2)
(860,17,2)
(2705,1214,2)
(1162,2500,2)
(836,1700,2)
(1840,1700,2)
(1822,1417,2)
(876,1692,2)
(1125,2871,2)
(635,2272,2)
(290,1274,2)
(2297,2642,2)
(1953,2803,2)
(1513,1657,2)
(1449,2552,2)
(1260,1526,2)
(1797,1751,2)
(2095,857,2)
(2980,2910,2)
(726,1647,2)
(2860,2356,2)
(2869,1701,2)
(1687,731,2)
(1434,1485,2)
(2239,1862,2)
(15,2356,2)
(2875,1846,2)
(2082,1657,2)
(2650,2155,2)
(1293,1511,2)
(1332,2843,2)
(117,2447,2)
(2804,186,2)
(72,2511,2)
(1373,647,2)
(2333,1630,2)
(320,498,2)
(2820,2356,2)
(1099,2972,2)
(1164,1274,2)
(1332,1686,2)
(329,165,2)
(2043,2087,2)
(905,2727,2)
(2071,2910,2)
(2152,17,2)
(2904,2947,2)
(2664,642,2)
(2320,482,2)
(1822,44,2)
(2489,1913,2)
(2850,2947,2)
(770,1676,2)
(620,3025,2)
(365,289,2)
(3004,993,2)
(1877,1700,2)
(117,596,2)
(3004,149,2)
(2543,223,2)
(2336,706,2)
(2650,1856,2)
(1860,1156,2)
(505,2650,2)
(1519,1434,2)
(559,2781,2)
(210,2415,2)
(579,2812,2)
(2551,2441,2)
(215,2950,2)
(236,2893,2)
(2134,2010,2)
(1167,2910,2)
(2053,2895,2)
(2469,892,2)
(566,98,2)
(771,2984,2)
(1358,2931,2)
(2237,2110,2)
(1576,2143,2)
(498,2984,2)
(463,2204,2)
(1315,165,2)
(1687,256,2)
(513,2022,2)
(1563,1940,2)
(246,755,2)
(2187,2263,2)
(2330,642,2)
(1551,941,2)
(515,2082,2)
(2650,1634,2)
(1786,2943,2)
(1315,2067,2)
(2793,841,2)
(2607,2614,2)
(81,2859,2)
(926,1476,2)
(2649,1425,2)
(1729,1274,2)
(1687,1884,2)
(224,1534,2)
(1117,642,2)
(2130,110,2)
(1252,460,2)
(329,2155,2)
(1434,2997,2)
(1683,941,2)
(2438,741,2)
(954,2931,2)
(1558,1485,2)
(2230,1700,2)
(1860,545,2)
(2893,1349,2)
(1024,1842,2)
(1163,2865,2)
(2392,2251,2)
(1741,11,2)
(1411,2574,2)
(2317,1875,2)
(117,2048,2)
(1815,980,2)
(2964,1745,2)
(1495,149,2)
(636,2972,2)
(2900,2552,2)
(319,17,2)
(3014,515,2)
(1892,2595,2)
(2372,2356,2)
(828,2082,2)
(2635,1195,2)
(798,916,2)
(2936,2972,2)
(1315,596,2)
(1815,2614,2)
(2545,2451,2)
(2867,876,2)
(378,1698,2)
(394,2676,2)
(2713,2222,2)
(1799,3025,2)
(1802,2947,2)
(2607,898,2)
(569,2139,2)
(606,460,2)
(791,755,2)
(1117,2931,2)
(731,1657,2)
(507,941,2)
(2893,2447,2)
(1923,433,2)
(757,2809,2)
(2271,2588,2)
(1815,1901,2)
(2379,2197,2)
(2720,2910,2)
(1960,595,2)
(2850,2910,2)
(538,2356,2)
(1248,2947,2)
(1873,836,2)
(2574,1048,2)
(1553,2110,2)
(2152,2292,2)
(2455,2676,2)
(597,706,2)
(1647,2676,2)
(552,1963,2)
(1272,2972,2)
(1809,1931,2)
(876,2745,2)
(1180,1185,2)
(1164,2356,2)
(2722,2552,2)
(1353,514,2)
(1395,2676,2)
(1330,1349,2)
(734,1577,2)
(410,2048,2)
(1303,2774,2)
(2444,2947,2)
(2178,706,2)
(1351,149,2)
(1503,1530,2)
(1822,1745,2)
(441,2229,2)
(1996,3002,2)
(2004,1511,2)
(53,2167,2)
(926,1526,2)
(1880,2493,2)
(2049,595,2)
(1886,1293,2)
(188,2082,2)
(312,86,2)
(1089,503,2)
(2235,2812,2)
(2010,149,2)
(1786,1634,2)
(319,1686,2)
(2499,460,2)
(584,1671,2)
(1027,515,2)
(569,2943,2)
(2246,2272,2)
(1943,2676,2)
(721,2087,2)
(1228,2984,2)
(645,3002,2)
(1992,2947,2)
(2563,706,2)
(538,223,2)
(602,2676,2)
(2168,2910,2)
(410,898,2)
(1822,1349,2)
(219,2833,2)
(2551,44,2)
(2930,1700,2)
(954,2984,2)
(2155,460,2)
(2923,1274,2)
(608,841,2)
(1930,2947,2)
(2965,1323,2)
(2055,1265,2)
(1617,1105,2)
(1218,2910,2)
(1118,1676,2)
(1174,1700,2)
(1068,2642,2)
(1137,1700,2)
(1495,2519,2)
(2320,1526,2)
(47,595,2)
(1407,1434,2)
(2812,1586,2)
(1380,1700,2)
(1613,2379,2)
(1180,11,2)
(164,1105,2)
(1687,1568,2)
(1881,755,2)
(2722,755,2)
(2130,2458,2)
(2664,1105,2)
(1204,2972,2)
(126,912,2)
(2551,1960,2)
(2317,371,2)
(2973,2766,2)
(1162,726,2)
(860,1265,2)
(652,1686,2)
(2648,993,2)
(2671,1618,2)
(1995,2857,2)
(3033,2972,2)
(1786,2048,2)
(763,1700,2)
(1162,1349,2)
(2576,2082,2)
(202,2668,2)
(186,2899,2)
(584,2640,2)
(1351,2699,2)
(2130,685,2)
(1381,121,2)
(473,2128,2)
(354,2139,2)
(523,2789,2)
(410,3041,2)
(2451,172,2)
(2910,1780,2)
(2679,1274,2)
(2038,2251,2)
(2357,2984,2)
(244,2082,2)
(1672,1165,2)
(432,1700,2)
(126,2843,2)
(1370,2545,2)
(126,1417,2)
(2713,2256,2)
(2893,1137,2)
(1432,2552,2)
(2541,2809,2)
(1950,2256,2)
(289,2972,2)
(2794,1671,2)
(405,2286,2)
(1577,755,2)
(2423,880,2)
(157,1686,2)
(410,2755,2)
(2134,625,2)
(1013,2082,2)
(1420,600,2)
(1503,187,2)
(243,1671,2)
(2367,69,2)
(1881,2642,2)
(597,2910,2)
(2051,2972,2)
(1224,1776,2)
(143,755,2)
(1503,2458,2)
(1264,3037,2)
(780,1274,2)
(1583,2637,2)
(1432,642,2)
(1812,1658,2)
(1687,3041,2)
(2785,1972,2)
(117,2174,2)
(939,2356,2)
(1099,1274,2)
(1082,1871,2)
(288,1935,2)
(21,1593,2)
(2188,1365,2)
(1786,3041,2)
(2720,2650,2)
(538,2972,2)
(1079,1434,2)
(1065,1880,2)
(860,1476,2)
(791,2552,2)
(1068,2500,2)
(897,1511,2)
(1477,2519,2)
(2607,1884,2)
(1907,117,2)
(1162,2930,2)
(1232,137,2)
(584,2552,2)
(1935,1274,2)
(1040,2158,2)
(1162,2441,2)
(1001,2910,2)
(2903,1214,2)
(2759,1056,2)
(1214,3002,2)
(1162,256,2)
(2964,906,2)
(1054,1840,2)
(980,2270,2)
(1985,2991,2)
(930,2972,2)
(2271,1900,2)
(2664,2552,2)
(2130,2837,2)
(927,1700,2)
(450,2226,2)
(515,1028,2)
(2794,1105,2)
(1576,755,2)
(2850,1658,2)
(3037,2931,2)
(2650,1960,2)
(1315,1874,2)
(642,1686,2)
(1221,1700,2)
(748,1671,2)
(2903,2972,2)
(2713,1960,2)
(3011,2128,2)
(2119,1511,2)
(1195,210,2)
(1399,2110,2)
(2313,1658,2)
(2130,1137,2)
(2322,2676,2)
(594,2345,2)
(1566,1772,2)
(2342,755,2)
(2142,1963,2)
(410,371,2)
(926,1534,2)
(671,1700,2)
(277,950,2)
(261,1195,2)
(1162,2174,2)
(1732,1674,2)
(1687,1972,2)
(2964,726,2)
(1326,2067,2)
(1657,755,2)
(150,355,2)
(173,1274,2)
(1815,377,2)
(243,2110,2)
(2109,1901,2)
(876,726,2)
(126,2447,2)
(916,869,2)
(1502,2676,2)
(1662,2356,2)
(1860,11,2)
(319,1534,2)
(126,1156,2)
(2143,2627,2)
(676,1647,2)
(1503,327,2)
(2130,1974,2)
(2042,755,2)
(3004,1901,2)
(1490,2899,2)
(2785,1186,2)
(2511,2972,2)
(1162,2745,2)
(2893,912,2)
(354,2971,2)
(3016,2143,2)
(126,1476,2)
(1805,2947,2)
(1676,1823,2)
(368,2972,2)
(656,1511,2)
(2323,2910,2)
(1495,1411,2)
(146,1274,2)
(299,755,2)
(1499,642,2)
(540,117,2)
(131,1162,2)
(2964,898,2)
(1574,1671,2)
(876,2843,2)
(1074,3000,2)
(410,2256,2)
(1657,1411,2)
(2467,2984,2)
(420,1671,2)
(1701,2640,2)
(2759,2222,2)
(2650,110,2)
(452,2753,2)
(1815,2755,2)
(3012,1274,2)
(194,498,2)
(191,82,2)
(98,2753,2)
(1986,1862,2)
(1528,1700,2)
(302,2642,2)
(2791,260,2)
(1786,912,2)
(195,595,2)
(2599,2984,2)
(1064,901,2)
(869,2640,2)
(1901,2947,2)
(1326,912,2)
(1583,146,2)
(860,2356,2)
(1162,1074,2)
(3002,1657,2)
(2720,706,2)
(2130,1156,2)
(54,1274,2)
(126,2067,2)
(1889,358,2)
(2782,2895,2)
(876,499,2)
(1906,2997,2)
(2120,2582,2)
(1907,1700,2)
(2593,2375,2)
(2650,2971,2)
(2317,256,2)
(2171,460,2)
(1315,1074,2)
(1522,2286,2)
(1442,1658,2)
(1477,1274,2)
(2785,2588,2)
(1822,2174,2)
(268,1842,2)
(209,2650,2)
(691,2650,2)
(731,2470,2)
(791,1105,2)
(473,2036,2)
(2356,1686,2)
(771,2552,2)
(221,1701,2)
(2924,515,2)
(1178,741,2)
(2482,1511,2)
(208,2831,2)
(135,1653,2)
(431,1658,2)
(1315,2155,2)
(1503,1474,2)
(1399,2984,2)
(1133,2972,2)
(2512,896,2)
(2393,2722,2)
(126,2630,2)
(2659,1700,2)
(2192,2542,2)
(2713,1474,2)
(506,1676,2)
(1437,1087,2)
(290,1773,2)
(1073,1577,2)
(3015,78,2)
(2937,2790,2)
(410,2458,2)
(1786,1056,2)
(641,2676,2)
(916,1671,2)
(844,725,2)
(1358,2642,2)
(2676,2972,2)
(2320,11,2)
(2317,472,2)
(1919,841,2)
(117,2067,2)
(2932,498,2)
(1214,1657,2)
(1709,2917,2)
(569,993,2)
(1265,2910,2)
(157,1534,2)
(1842,1388,2)
(1030,1555,2)
(2722,1411,2)
(1471,1700,2)
(1689,1873,2)
(2807,1700,2)
(1503,1186,2)
(411,2972,2)
(1113,2917,2)
(164,2642,2)
(1909,901,2)
(2922,941,2)
(1786,1972,2)
(2675,2809,2)
(2927,2272,2)
(2184,498,2)
(354,2745,2)
(1477,2972,2)
(8,2010,2)
(1124,1609,2)
(468,2988,2)
(2785,906,2)
(400,2650,2)
(218,941,2)
(2893,1960,2)
(965,1918,2)
(876,2837,2)
(2123,2713,2)
(1073,2512,2)
(354,1156,2)
(302,1671,2)
(590,2313,2)
(2551,2048,2)
(1294,2676,2)
(1190,2345,2)
(2321,710,2)
(2997,706,2)
(1687,2256,2)
(2796,1411,2)
(1664,2895,2)
(2146,1845,2)
(1165,2251,2)
(2921,993,2)
(1246,659,2)
(2809,898,2)
(2809,2447,2)
(1402,2972,2)
(2964,2614,2)
(771,755,2)
(569,545,2)
(2566,1085,2)
(2759,726,2)
(896,2699,2)
(157,84,2)
(1315,2930,2)
(4,1087,2)
(126,2614,2)
(797,1494,2)
(1962,1917,2)
(1358,1411,2)
(954,755,2)
(2790,1183,2)
(2607,1974,2)
(642,1832,2)
(1182,642,2)
(126,1474,2)
(802,2800,2)
(2893,1692,2)
(2713,2885,2)
(329,1417,2)
(1509,1931,2)
(1815,1946,2)
(2139,1700,2)
(2794,755,2)
(2946,17,2)
(160,1709,2)
(2317,2674,2)
(1940,1258,2)
(1815,1856,2)
(1581,755,2)
(2434,1700,2)
(1326,906,2)
(569,2674,2)
(1539,844,2)
(911,1842,2)
(2831,1741,2)
(2130,2139,2)
(412,2972,2)
(1315,2139,2)
(1802,1658,2)
(2650,377,2)
(2664,1671,2)
(137,3037,2)
(2330,1378,2)
(931,134,2)
(2336,2947,2)
(1268,1534,2)
(1388,1658,2)
(2271,2745,2)
(917,1700,2)
(1503,1074,2)
(2789,1534,2)
(1330,1407,2)
(1092,2676,2)
(1963,1901,2)
(137,2701,2)
(257,1676,2)
(266,471,2)
(1822,1056,2)
(876,1946,2)
(1260,2519,2)
(2809,2745,2)
(1873,1657,2)
(2223,2984,2)
(1678,1517,2)
(1477,1526,2)
(1946,289,2)
(2675,2650,2)
(2422,2676,2)
(2492,624,2)
(1860,1568,2)
(2551,898,2)
(1815,11,2)
(2950,2769,2)
(11,1004,2)
(2599,1671,2)
(3041,57,2)
(1672,2251,2)
(2071,706,2)
(2662,384,2)
(351,2356,2)
(263,2272,2)
(2210,706,2)
(1353,1700,2)
(319,1476,2)
(2512,1538,2)
(1815,1377,2)
(2650,2921,2)
(1571,2598,2)
(1493,2910,2)
(1403,1700,2)
(182,2972,2)
(2271,1156,2)
(2910,792,2)
(969,2320,2)
(1152,706,2)
(1213,2972,2)
(775,514,2)
(736,1698,2)
(1284,2688,2)
(2130,1074,2)
(645,1581,2)
(2689,941,2)
(2042,1671,2)
(1693,2356,2)
(1470,2493,2)
(1226,1087,2)
(281,706,2)
(613,941,2)
(414,2552,2)
(2650,187,2)
(211,69,2)
(1265,1658,2)
(354,2779,2)
(2759,2885,2)
(2489,1265,2)
(1465,1087,2)
(329,2441,2)
(2077,2650,2)
(145,941,2)
(420,2110,2)
(2317,2779,2)
(742,1185,2)
(115,2815,2)
(835,2356,2)
(436,2910,2)
(1358,2640,2)
(2650,545,2)
(989,2790,2)
(410,327,2)
(1234,1217,2)
(1379,1114,2)
(2759,44,2)
(1117,755,2)
(1315,898,2)
(2903,2356,2)
(2317,2447,2)
(2203,1658,2)
(644,1700,2)
(429,117,2)
(2317,2139,2)
(1330,1692,2)
(819,1423,2)
(1330,2745,2)
(360,2947,2)
(1406,2865,2)
(1827,1105,2)
(1614,1700,2)
(1895,2809,2)
(1004,2843,2)
(436,1658,2)
(260,1274,2)
(2758,2809,2)
(1577,2110,2)
(2130,1417,2)
(117,2971,2)
(1306,2493,2)
(924,1293,2)
(691,117,2)
(1470,1700,2)
(1330,472,2)
(1786,801,2)
(896,1901,2)
(2099,345,2)
(1881,1378,2)
(1068,1105,2)
(1628,901,2)
(1089,1842,2)
(354,2067,2)
(687,3002,2)
(1885,2899,2)
(860,1686,2)
(1963,2843,2)
(1185,517,2)
(2713,1856,2)
(2816,440,2)
(1971,2947,2)
(1377,211,2)
(2271,187,2)
(1326,801,2)
(2859,2240,2)
(107,2128,2)
(2766,1701,2)
(1438,1730,2)
(830,706,2)
(2809,110,2)
(288,1263,2)
(2795,498,2)
(413,1414,2)
(494,2087,2)
(1315,2779,2)
(1699,1700,2)
(1860,2930,2)
(318,911,2)
(2899,95,2)
(2964,1186,2)
(1285,11,2)
(2759,980,2)
(1418,941,2)
(1103,731,2)
(549,3035,2)
(2302,941,2)
(540,1700,2)
(2551,1972,2)
(1184,1672,2)
(1786,472,2)
(2528,993,2)
(2037,2676,2)
(1338,1630,2)
(899,1758,2)
(1162,1417,2)
(2809,2885,2)
(3000,713,2)
(2594,69,2)
(2607,1960,2)
(2392,1700,2)
(593,2270,2)
(1503,2930,2)
(2541,2650,2)
(842,57,2)
(1039,1577,2)
(876,1972,2)
(2592,1274,2)
(2809,906,2)
(569,2921,2)
(1500,2356,2)
(171,72,2)
(1631,1442,2)
(2245,595,2)
(2551,187,2)
(1503,1137,2)
(107,2356,2)
(2607,2843,2)
(53,441,2)
(2607,2630,2)
(57,780,2)
(2759,402,2)
(2330,2642,2)
(1326,2745,2)
(1687,1074,2)
(2977,1610,2)
(209,1700,2)
(335,2812,2)
(1384,1658,2)
(157,11,2)
(2607,596,2)
(2143,2947,2)
(1326,2155,2)
(642,2519,2)
(876,1349,2)
(1134,1087,2)
(312,2947,2)
(1485,2910,2)
(1483,2724,2)
(2759,377,2)
(1543,2947,2)
(1858,1471,2)
(114,1682,2)
(2770,1963,2)
(1858,464,2)
(566,2753,2)
(1687,2441,2)
(2126,1671,2)
(2372,2272,2)
(2390,2865,2)
(1485,505,2)
(1952,2143,2)
(410,2921,2)
(1754,2910,2)
(2809,2779,2)
(1482,692,2)
(1162,165,2)
(2105,1434,2)
(1603,1700,2)
(354,2674,2)
(293,1658,2)
(1285,2843,2)
(1950,1186,2)
(1162,1856,2)
(583,1378,2)
(96,706,2)
(713,721,2)
(2765,2511,2)
(342,2519,2)
(289,503,2)
(1004,1534,2)
(2317,912,2)
(2607,1137,2)
(1619,259,2)
(2964,1349,2)
(2684,2676,2)
(2650,2745,2)
(876,1137,2)
(1687,2447,2)
(2809,1074,2)
(734,11,2)
(503,69,2)
(1467,2676,2)
(2114,408,2)
(2152,2972,2)
(2519,2473,2)
(876,1745,2)
(1117,2642,2)
(1521,2946,2)
(860,499,2)
(1259,2162,2)
(2237,1671,2)
(1950,2155,2)
(2130,1874,2)
(410,2588,2)
(2650,1013,2)
(117,2779,2)
(2024,3029,2)
(1574,722,2)
(409,755,2)
(2271,1568,2)
(2607,2048,2)
(1571,2532,2)
(2223,2552,2)
(1812,706,2)
(618,1312,2)
(477,156,2)
(2809,107,2)
(2106,1577,2)
(2480,3000,2)
(2121,1954,2)
(2380,706,2)
(134,1700,2)
(83,1226,2)
(2227,2345,2)
(1143,1751,2)
(470,2197,2)
(957,595,2)
(1794,916,2)
(1822,2779,2)
(1448,488,2)
(2602,345,2)
(2152,2519,2)
(1068,1901,2)
(1478,1700,2)
(2893,545,2)
(840,2676,2)
(319,2552,2)
(2607,187,2)
(2129,2947,2)
(2189,1274,2)
(714,1963,2)
(1966,222,2)
(1260,1686,2)
(2547,460,2)
(579,1700,2)
(1481,2676,2)
(3037,2640,2)
(2190,2197,2)
(126,256,2)
(329,1377,2)
(1950,1946,2)
(2657,2888,2)
(1358,642,2)
(1815,2155,2)
(2893,1900,2)
(2513,234,2)
(1268,1124,2)
(2650,2943,2)
(2779,1736,2)
(2769,1727,2)
(154,1610,2)
(2320,1686,2)
(2,1388,2)
(860,2843,2)
(196,1700,2)
(3003,288,2)
(566,905,2)
(876,317,2)
(1157,741,2)
(409,1411,2)
(2055,1476,2)
(2789,2519,2)
(1110,706,2)
(2204,706,2)
(1351,1124,2)
(1224,2733,2)
(2508,916,2)
(2650,468,2)
(503,839,2)
(2785,2447,2)
(926,84,2)
(560,2972,2)
(38,2490,2)
(170,2630,2)
(1162,545,2)
(1741,1124,2)
(126,2139,2)
(2621,2910,2)
(2571,515,2)
(1783,2815,2)
(1326,1056,2)
(2893,3041,2)
(2504,841,2)
(165,3000,2)
(1591,433,2)
(1068,1686,2)
(1786,545,2)
(1970,2719,2)
(126,1534,2)
(1822,165,2)
(2291,1700,2)
(2317,2233,2)
(876,2441,2)
(2551,2921,2)
(668,1274,2)
(2886,460,2)
(117,2930,2)
(1326,468,2)
(1318,1700,2)
(131,1931,2)
(1881,2110,2)
(2744,1217,2)
(2110,1671,2)
(2271,472,2)
(92,1408,2)
(629,595,2)
(2271,2885,2)
(2759,2256,2)
(2650,1875,2)
(2705,1378,2)
(1096,880,2)
(1155,115,2)
(880,2492,2)
(2893,1946,2)
(360,1658,2)
(2650,2480,2)
(135,706,2)
(2863,2872,2)
(2393,2640,2)
(876,1568,2)
(1091,2947,2)
(2552,755,2)
(430,222,2)
(354,685,2)
(2903,1274,2)
(2382,2984,2)
(2946,1526,2)
(418,595,2)
(2198,2356,2)
(1617,755,2)
(876,1124,2)
(2204,2947,2)
(873,117,2)
(2040,706,2)
(140,263,2)
(734,149,2)
(1251,135,2)
(329,596,2)
(2984,357,2)
(1162,1156,2)
(509,1312,2)
(2375,2947,2)
(1577,916,2)
(1871,268,2)
(1822,685,2)
(1315,327,2)
(1442,2947,2)
(1988,1538,2)
(1326,1692,2)
(2152,84,2)
(884,1331,2)
(466,2493,2)
(329,402,2)
(1399,2552,2)
(239,1274,2)
(1939,2582,2)
(2317,1900,2)
(1509,1700,2)
(538,2167,2)
(2559,399,2)
(1950,2971,2)
(473,1173,2)
(980,659,2)
(1815,499,2)
(375,2972,2)
(1477,2843,2)
(2237,2931,2)
(354,2256,2)
(1085,2356,2)
(1549,457,2)
(2592,2356,2)
(1323,941,2)
(2650,2458,2)
(2356,17,2)
(1665,1658,2)
(2297,1105,2)
(1162,980,2)
(1863,82,2)
(998,1700,2)
(412,2356,2)
(2524,941,2)
(327,102,2)
(1964,1904,2)
(126,1634,2)
(1312,951,2)
(1746,1658,2)
(2329,1700,2)
(2981,880,2)
(1503,1349,2)
(1741,1476,2)
(1162,912,2)
(1643,147,2)
(2010,2500,2)
(1164,2972,2)
(2631,11,2)
(2607,11,2)
(2815,1658,2)
(1996,1526,2)
(760,722,2)
(896,1526,2)
(1795,1476,2)
(1004,1526,2)
(2945,202,2)
(211,705,2)
(2970,630,2)
(2737,2109,2)
(876,371,2)
(1640,2110,2)
(1280,135,2)
(1358,755,2)
(196,1160,2)
(1741,1592,2)
(2271,2256,2)
(2563,1658,2)
(1315,371,2)
(587,498,2)
(445,2910,2)
(1815,2256,2)
(1371,2630,2)
(2833,1901,2)
(876,2930,2)
(1152,1658,2)
(844,1948,2)
(410,1874,2)
(911,706,2)
(1145,2972,2)
(840,3000,2)
(2904,1658,2)
(1024,2280,2)
(2893,1186,2)
(2071,2947,2)
(2785,1156,2)
(1349,1700,2)
(2931,1105,2)
(2548,2857,2)
(1399,1105,2)
(1881,1105,2)
(2356,2519,2)
(1687,1692,2)
(640,595,2)
(124,1195,2)
(2607,1534,2)
(953,1434,2)
(126,2480,2)
(329,685,2)
(1381,1931,2)
(991,2098,2)
(2320,17,2)
(2946,1901,2)
(354,3041,2)
(2444,2910,2)
(2356,11,2)
(3009,1940,2)
(1228,755,2)
(2766,222,2)
(246,2110,2)
(951,526,2)
(860,11,2)
(1503,976,2)
(2789,2843,2)
(2004,1700,2)
(3011,223,2)
(2739,2946,2)
(1786,1013,2)
(2010,2843,2)
(85,1274,2)
(181,2942,2)
(1326,726,2)
(2401,1089,2)
(2120,146,2)
(1114,72,2)
(1704,3016,2)
(2387,659,2)
(2042,1160,2)
(765,2947,2)
(2757,115,2)
(2152,3000,2)
(360,1160,2)
(569,1974,2)
(1881,2931,2)
(118,1085,2)
(1822,2935,2)
(568,2888,2)
(2713,2745,2)
(1075,2356,2)
(2681,111,2)
(977,977,2)
(2343,2871,2)
(2281,2552,2)
(2713,2943,2)
(1687,1900,2)
(1895,2910,2)
(1211,77,2)
(876,1874,2)
(1056,1700,2)
(1785,1511,2)
(2152,2500,2)
(1969,1758,2)
(2218,1105,2)
(569,1530,2)
(2964,1474,2)
(437,1087,2)
(1743,2286,2)
(1496,2348,2)
(1586,2589,2)
(2271,1692,2)
(528,336,2)
(1495,1901,2)
(725,763,2)
(2650,2048,2)
(812,2577,2)
(2067,460,2)
(2787,2552,2)
(56,1105,2)
(514,2947,2)
(1860,2458,2)
(1822,468,2)
(2617,2630,2)
(1950,1137,2)
(401,1701,2)
(1034,289,2)
(1860,1686,2)
(2271,1186,2)
(1305,1940,2)
(1193,1577,2)
(652,2519,2)
(2118,2552,2)
(2551,2174,2)
(175,2719,2)
(2237,2984,2)
(2130,2943,2)
(2737,2053,2)
(2109,1476,2)
(1268,1526,2)
(264,706,2)
(2315,595,2)
(1047,2789,2)
(1741,17,2)
(2197,135,2)
(647,515,2)
(1778,2519,2)
(2791,137,2)
(1129,734,2)
(2893,468,2)
(1925,1410,2)
(678,1701,2)
(329,1974,2)
(329,2943,2)
(1490,1700,2)
(1281,1411,2)
(1860,2447,2)
(1676,2988,2)
(157,2519,2)
(2017,2280,2)
(1989,630,2)
(1068,2552,2)
(569,110,2)
(2271,2139,2)
(743,595,2)
(1373,8,2)
(2101,2110,2)
(1859,2372,2)
(1290,841,2)
(1655,1954,2)
(2820,2972,2)
(1326,2233,2)
(2130,3041,2)
(1258,1511,2)
(1045,1892,2)
(2995,706,2)
(94,2972,2)
(1347,2493,2)
(246,642,2)
(1822,2155,2)
(360,2650,2)
(570,1658,2)
(1971,706,2)
(1471,1160,2)
(1367,2988,2)
(2785,2921,2)
(329,1856,2)
(1574,2512,2)
(3032,564,2)
(567,2143,2)
(239,2972,2)
(1950,827,2)
(2328,1442,2)
(1326,402,2)
(2763,1195,2)
(1838,146,2)
(1004,1476,2)
(2197,1030,2)
(1860,801,2)
(2722,1476,2)
(409,2110,2)
(385,2197,2)
(126,1377,2)
(2950,839,2)
(1928,2753,2)
(2785,2174,2)
(1822,2930,2)
(1162,1534,2)
(1950,2837,2)
(1076,2541,2)
(2722,2640,2)
(1477,1378,2)
(931,1614,2)
(445,876,2)
(28,2453,2)
(239,1700,2)
(2130,2935,2)
(977,1759,2)
(569,1013,2)
(1315,2480,2)
(1315,2441,2)
(2850,706,2)
(1860,1530,2)
(2825,1658,2)
(908,2676,2)
(124,158,2)
(1728,82,2)
(2317,1856,2)
(2914,706,2)
(1874,1953,2)
(2511,95,2)
(1011,595,2)
(228,1700,2)
(633,58,2)
(460,2017,2)
(117,1013,2)
(410,2067,2)
(2745,2082,2)
(2042,2552,2)
(1410,1105,2)
(1950,2885,2)
(691,1160,2)
(2128,2540,2)
(467,2493,2)
(1879,2379,2)
(1379,69,2)
(642,1534,2)
(1630,1283,2)
(1004,17,2)
(2607,912,2)
(538,1274,2)
(1974,2356,2)
(126,1875,2)
(202,332,2)
(2725,2753,2)
(1572,1701,2)
(531,2676,2)
(2248,2512,2)
(1560,2972,2)
(1068,84,2)
(1900,2630,2)
(2323,2947,2)
(560,1700,2)
(2500,2946,2)
(2051,1274,2)
(2918,391,2)
(1326,596,2)
(836,117,2)
(532,2490,2)
(771,1411,2)
(2418,2972,2)
(2222,1700,2)
(1587,1322,2)
(2582,2676,2)
(2731,1700,2)
(2583,2676,2)
(354,912,2)
(2317,1407,2)
(668,2356,2)
(1315,1530,2)
(354,1875,2)
(1687,1407,2)
(2804,1577,2)
(2152,1686,2)
(1701,2984,2)
(1009,460,2)
(1838,2637,2)
(2909,223,2)
(2903,1378,2)
(2230,1953,2)
(1860,1634,2)
(1976,1274,2)
(2551,1074,2)
(2823,1274,2)
(649,2769,2)
(2036,2676,2)
(2456,752,2)
(1315,1972,2)
(1592,1907,2)
(1666,867,2)
(1173,2676,2)
(1068,1124,2)
(2759,1856,2)
(2010,1476,2)
(1643,941,2)
(1992,2910,2)
(1228,1671,2)
(502,1434,2)
(2833,2519,2)
(197,1284,2)
(2226,774,2)
(410,980,2)
(1214,1378,2)
(1721,2512,2)
(2555,1411,2)
(215,1842,2)
(2297,1411,2)
(3014,876,2)
(1974,2128,2)
(1330,2233,2)
(1745,2972,2)
(161,1871,2)
(1640,2552,2)
(56,642,2)
(1985,2253,2)
(1786,1407,2)
(2577,2895,2)
(1844,760,2)
(2785,2067,2)
(739,1778,2)
(717,2676,2)
(504,533,2)
(2720,117,2)
(725,2865,2)
(2050,1789,2)
(1503,371,2)
(1950,1974,2)
(1048,2143,2)
(898,1700,2)
(383,2910,2)
(2785,2837,2)
(1162,1692,2)
(1242,1452,2)
(567,2871,2)
(1449,1105,2)
(2022,1214,2)
(2281,2640,2)
(200,1700,2)
(129,2984,2)
(2916,2804,2)
(1822,371,2)
(1687,1186,2)
(1268,2356,2)
(1946,3000,2)
(313,941,2)
(838,2552,2)
(1254,595,2)
(1822,2458,2)
(1285,1686,2)
(876,2067,2)
(1014,2676,2)
(2953,2809,2)
(2871,464,2)
(2650,3041,2)
(1023,1647,2)
(1596,2895,2)
(1486,933,2)
(2893,2930,2)
(29,2111,2)
(1452,2676,2)
(2393,1281,2)
(1360,2251,2)
(2107,1274,2)
(2096,2972,2)
(1315,2837,2)
(1658,1201,2)
(998,358,2)
(583,137,2)
(720,1698,2)
(2871,2950,2)
(117,685,2)
(2794,642,2)
(1614,1420,2)
(329,1186,2)
(2271,1407,2)
(505,1160,2)
(1860,1074,2)
(148,2769,2)
(202,1899,2)
(2551,402,2)
(496,557,2)
(1216,1298,2)
(1905,706,2)
(391,289,2)
(1207,2809,2)
(329,1056,2)
(1815,2139,2)
(569,596,2)
(158,880,2)
(1950,110,2)
(2249,1658,2)
(2662,1953,2)
(2175,1274,2)
(2787,2642,2)
(1338,2143,2)
(1162,2458,2)
(2393,2931,2)
(2909,2167,2)
(1477,1476,2)
(41,2552,2)
(1651,2082,2)
(583,1214,2)
(780,1953,2)
(2551,1417,2)
(2130,1349,2)
(2713,2921,2)
(1589,1676,2)
(126,327,2)
(1860,1946,2)
(1237,2010,2)
(732,755,2)
(2605,706,2)
(542,2766,2)
(1374,1618,2)
(2237,1105,2)
(1578,289,2)
(340,867,2)
(2607,1946,2)
(569,472,2)
(1268,1901,2)
(1762,126,2)
(2638,2343,2)
(876,1901,2)
(800,358,2)
(2228,1630,2)
(1860,2843,2)
(2564,2406,2)
(478,2328,2)
(1688,2972,2)
(1871,2947,2)
(3014,1162,2)
(1862,2972,2)
(2382,2552,2)
(901,2356,2)
(1030,135,2)
(2397,1658,2)
(342,1476,2)
(2607,2441,2)
(2923,2356,2)
(1579,2356,2)
(86,2947,2)
(2807,117,2)
(1846,267,2)
(1268,1476,2)
(2152,1124,2)
(2719,2947,2)
(1405,2850,2)
(1076,1758,2)
(1162,1745,2)
(1189,1647,2)
(2317,107,2)
(117,1186,2)
(1008,2895,2)
(1556,338,2)
(2478,2910,2)
(1786,165,2)
(354,2837,2)
(2291,2812,2)
(1302,2272,2)
(2268,317,2)
(1795,1901,2)
(410,1634,2)
(2477,2676,2)
(926,11,2)
(499,433,2)
(2964,165,2)
(393,706,2)
(2643,555,2)
(1527,1260,2)
(1282,211,2)
(1860,912,2)
(1162,499,2)
(374,2052,2)
(2424,1630,2)
(117,472,2)
(1822,256,2)
(734,2500,2)
(2490,1658,2)
(1238,1700,2)
(707,358,2)
(2072,1700,2)
(807,2676,2)
(876,545,2)
(1496,2769,2)
(236,2130,2)
(1734,2687,2)
(2271,1960,2)
(2964,596,2)
(2223,2642,2)
(1644,2322,2)
(2130,2048,2)
(1499,2640,2)
(869,1671,2)
(2825,2947,2)
(1260,2843,2)
(1815,898,2)
(1741,1686,2)
(1593,1467,2)
(1281,2984,2)
(1056,857,2)
(2552,516,2)
(563,1647,2)
(383,2947,2)
(2356,149,2)
(3004,1526,2)
(1208,1657,2)
(312,2910,2)
(329,472,2)
(935,2676,2)
(1687,165,2)
(1950,1875,2)
(3033,2328,2)
(860,149,2)
(1162,1874,2)
(1996,595,2)
(668,2972,2)
(3031,642,2)
(2713,2458,2)
(1483,2899,2)
(245,1087,2)
(1182,540,2)
(54,2356,2)
(876,2233,2)
(2318,2542,2)
(2120,2287,2)
(1351,499,2)
(2382,1495,2)
(1330,1875,2)
(1789,74,2)
(1149,643,2)
(1132,1658,2)
(2130,980,2)
(926,2500,2)
(2152,1274,2)
(262,941,2)
(122,1162,2)
(1379,2143,2)
(267,2947,2)
(1687,1377,2)
(2785,1135,2)
(2237,2640,2)
(1476,2789,2)
(2161,2077,2)
(1680,2096,2)
(420,2984,2)
(199,2815,2)
(2120,1910,2)
(2019,498,2)
(941,2393,2)
(126,2441,2)
(1449,2642,2)
(2104,1105,2)
(1950,1417,2)
(665,1700,2)
(584,2110,2)
(2256,1676,2)
(2362,2493,2)
(1786,1974,2)
(1026,2947,2)
(1677,289,2)
(2054,64,2)
(2688,317,2)
(1950,912,2)
(172,2368,2)
(836,2650,2)
(538,2128,2)
(2599,2552,2)
(830,1658,2)
(1786,1692,2)
(876,1974,2)
(2077,117,2)
(947,2676,2)
(1860,2837,2)
(319,1671,2)
(801,2972,2)
(876,1534,2)
(2352,2251,2)
(1590,1511,2)
(126,1900,2)
(2978,1347,2)
(1860,149,2)
(1138,712,2)
(1860,2048,2)
(1244,1411,2)
(2152,1476,2)
(257,1589,2)
(1796,643,2)
(1248,706,2)
(2650,1407,2)
(1015,2895,2)
(2815,2910,2)
(1209,2270,2)
(2987,941,2)
(1745,2592,2)
(2664,755,2)
(1786,685,2)
(2286,2356,2)
(911,1658,2)
(2551,1856,2)
(818,52,2)
(1300,1414,2)
(1856,2128,2)
(1640,1105,2)
(2713,2930,2)
(927,722,2)
(2697,1494,2)
(117,1137,2)
(2884,1085,2)
(2664,2642,2)
(2713,256,2)
(1477,11,2)
(860,2500,2)
(1658,1678,2)
(1554,2128,2)
(2503,2082,2)
(2964,377,2)
(1152,2910,2)
(2800,2676,2)
(2236,2759,2)
(599,2676,2)
(1217,17,2)
(1950,2480,2)
(2759,2067,2)
(1402,2356,2)
(1423,2931,2)
(668,239,2)
(1330,107,2)
(2551,980,2)
(448,2345,2)
(2223,1671,2)
(1753,1538,2)
(1815,2511,2)
(2880,993,2)
(2607,1745,2)
(1197,1526,2)
(1942,2972,2)
(2130,2441,2)
(1503,912,2)
(1503,2447,2)
(2317,2441,2)
(1503,1946,2)
(869,2552,2)
(1859,2356,2)
(2893,187,2)
(570,2947,2)
(1490,1931,2)
(2123,2893,2)
(840,1700,2)
(2713,726,2)
(399,2296,2)
(1091,2910,2)
(2833,1476,2)
(2679,2972,2)
(2490,706,2)
(516,1576,2)
(1188,2228,2)
(1147,2219,2)
(2759,2174,2)
(1786,256,2)
(1503,2885,2)
(643,2769,2)
(569,1692,2)
(2574,50,2)
(8,1700,2)
(1843,1842,2)
(596,731,2)
(1786,468,2)
(1340,38,2)
(1534,1506,2)
(2893,1875,2)
(1820,1024,2)
(1241,2226,2)
(1515,2863,2)
(117,1875,2)
(2580,1700,2)
(1468,137,2)
(1204,1274,2)
(1328,2863,2)
(569,327,2)
(1262,2676,2)
(1173,1700,2)
(1503,256,2)
(1860,726,2)
(382,1751,2)
(1692,234,2)
(1815,2067,2)
(926,1901,2)
(945,706,2)
(2915,1659,2)
(2713,1156,2)
(545,102,2)
(1421,2143,2)
(2407,2895,2)
(1128,2676,2)
(9,2082,2)
(1802,95,2)
(1786,371,2)
(211,2950,2)
(2872,1123,2)
(860,1124,2)
(2308,2910,2)
(565,1618,2)
(362,205,2)
(2946,2843,2)
(2871,839,2)
(3031,2642,2)
(1491,993,2)
(1848,2286,2)
(2573,1092,2)
(1499,2642,2)
(2809,2588,2)
(1971,1658,2)
(1126,460,2)
(687,1581,2)
(1315,2588,2)
(299,2642,2)
(39,2545,2)
(1326,1377,2)
(1996,1534,2)
(1227,2946,2)
(1786,187,2)
(2332,1105,2)
(2580,1293,2)
(2032,1274,2)
(2759,2930,2)
(1905,1658,2)
(2018,2197,2)
(1822,1013,2)
(319,1411,2)
(329,371,2)
(2809,1407,2)
(1482,1185,2)
(2317,801,2)
(2551,2885,2)
(2591,1411,2)
(2607,801,2)
(1813,1577,2)
(420,2642,2)
(2785,912,2)
(2336,2910,2)
(741,1802,2)
(1827,2552,2)
(1147,595,2)
(216,457,2)
(1827,2931,2)
(134,1162,2)
(2893,2139,2)
(2631,1526,2)
(2680,1657,2)
(1373,2010,2)
(2787,2640,2)
(56,2984,2)
(483,731,2)
(2192,120,2)
(410,1377,2)
(1492,2679,2)
(53,2434,2)
(1570,2947,2)
(977,1671,2)
(2271,2930,2)
(2551,2745,2)
(1265,2947,2)
(1786,2222,2)
(126,2837,2)
(354,545,2)
(651,570,2)
(2146,1223,2)
(1860,898,2)
(2607,1056,2)
(569,187,2)
(1939,2676,2)
(2785,2256,2)
(1421,1842,2)
(1545,2270,2)
(888,488,2)
(2551,84,2)
(1972,1701,2)
(2785,545,2)
(2785,2885,2)
(1326,2755,2)
(1105,235,2)
(1495,2110,2)
(1932,345,2)
(685,2167,2)
(1350,72,2)
(418,1475,2)
(2871,2143,2)
(246,1411,2)
(1330,468,2)
(1156,2766,2)
(2218,2640,2)
(2442,2345,2)
(1815,2500,2)
(2130,2921,2)
(2178,1658,2)
(2964,1530,2)
(2252,959,2)
(1589,80,2)
(599,223,2)
(1822,2588,2)
(1795,149,2)
(1687,1875,2)
(2901,1274,2)
(329,1156,2)
(2809,377,2)
(119,158,2)
(1860,1056,2)
(1815,187,2)
(703,2345,2)
(954,1105,2)
(63,2947,2)
(811,1274,2)
(126,187,2)
(243,2984,2)
(607,1657,2)
(2444,1658,2)
(2822,1904,2)
(2892,1577,2)
(410,1530,2)
(126,2174,2)
(1895,706,2)
(1361,1700,2)
(2368,2783,2)
(2323,1658,2)
(1330,2155,2)
(476,2954,2)
(1906,604,2)
(1815,1186,2)
(1517,908,2)
(299,2640,2)
(2818,706,2)
(1162,685,2)
(358,590,2)
(344,2972,2)
(2080,941,2)
(2192,2096,2)
(63,2375,2)
(329,2755,2)
(3031,2640,2)
(2130,1946,2)
(2789,2947,2)
(1027,1700,2)
(2439,901,2)
(2722,2843,2)
(2785,1874,2)
(932,2511,2)
(1326,2174,2)
(1750,2824,2)
(1068,2110,2)
(1326,371,2)
(410,2447,2)
(2785,468,2)
(1217,1711,2)
(2696,1954,2)
(117,545,2)
(1382,2356,2)
(569,371,2)
(1267,2552,2)
(1053,1338,2)
(1202,1274,2)
(2668,2487,2)
(246,2552,2)
(2664,2640,2)
(1380,460,2)
(1532,1931,2)
(1162,3041,2)
(1503,980,2)
(354,1013,2)
(2500,979,2)
(2082,2143,2)
(2817,2831,2)
(366,2996,2)
(373,2197,2)
(1396,1927,2)
(2405,1274,2)
(980,895,2)
(60,1438,2)
(3040,1085,2)
(569,1745,2)
(2108,1274,2)
(2598,289,2)
(2317,1904,2)
(3031,1105,2)
(126,149,2)
(2946,1686,2)
(2713,1884,2)
(829,1274,2)
(2271,107,2)
(379,2972,2)
(1545,659,2)
(2229,2676,2)
(1516,2552,2)
(503,705,2)
(310,1700,2)
(2611,601,2)
(1330,327,2)
(1553,2642,2)
(1687,2174,2)
(329,1692,2)
(2718,1224,2)
(771,2931,2)
(422,1701,2)
(2116,2769,2)
(126,1137,2)
(2893,2222,2)
(2579,1939,2)
(1162,898,2)
(1556,741,2)
(1822,1186,2)
(2551,1349,2)
(569,1874,2)
(354,472,2)
(392,1388,2)
(977,2642,2)
(410,1156,2)
(2964,2458,2)
(569,2779,2)
(1860,1874,2)
(1860,2139,2)
(1850,1700,2)
(1093,1931,2)
(410,1568,2)
(1822,912,2)
(1687,2155,2)
(2540,498,2)
(923,2630,2)
(198,741,2)
(1162,371,2)
(734,1901,2)
(2167,2633,2)
(2271,402,2)
(845,1494,2)
(1905,2910,2)
(1162,1875,2)
(1602,1940,2)
(2233,1953,2)
(1950,472,2)
(2865,2947,2)
(1881,2640,2)
(347,2972,2)
(869,129,2)
(2031,1904,2)
(2607,17,2)
(2743,1658,2)
(1212,901,2)
(1843,2737,2)
(2332,2984,2)
(2809,187,2)
(1477,2356,2)
(2794,2984,2)
(1162,149,2)
(993,1274,2)
(1917,117,2)
(2570,1373,2)
(866,2375,2)
(896,84,2)
(2126,2984,2)
(2317,110,2)
(2759,2674,2)
(1950,187,2)
(569,2174,2)
(835,2650,2)
(354,1349,2)
(2650,2256,2)
(117,1634,2)
(1793,2865,2)
(776,2809,2)
(2950,2143,2)
(2946,1476,2)
(117,912,2)
(1162,44,2)
(520,3025,2)
(1815,1874,2)
(2607,2935,2)
(347,2356,2)
(2574,3016,2)
(2456,289,2)
(1618,2859,2)
(1815,2222,2)
(630,1274,2)
(3026,941,2)
(1453,234,2)
(2938,2356,2)
(1860,256,2)
(1860,2174,2)
(1125,1312,2)
(1656,1577,2)
(1043,2356,2)
(2551,906,2)
(31,2272,2)
(1004,2519,2)
(2179,1700,2)
(1178,956,2)
(97,595,2)
(2631,1686,2)
(630,2108,2)
(1895,2947,2)
(2724,2899,2)
(2809,2935,2)
(1315,44,2)
(486,2226,2)
(126,2885,2)
(569,2755,2)
(2785,110,2)
(876,149,2)
(2258,1274,2)
(1496,1655,2)
(316,488,2)
(2781,1700,2)
(2809,1874,2)
(138,2865,2)
(1209,2607,2)
(2370,2859,2)
(302,1068,2)
(505,2947,2)
(1860,44,2)
(1518,1293,2)
(2641,812,2)
(1626,1434,2)
(2382,1411,2)
(2893,2256,2)
(911,2947,2)
(2687,2975,2)
(3005,2356,2)
(1822,187,2)
(1553,2931,2)
(2135,2341,2)
(1503,110,2)
(2759,110,2)
(2551,1156,2)
(2467,1671,2)
(1555,135,2)
(2975,1125,2)
(1860,1900,2)
(2884,1953,2)
(911,2143,2)
(2809,2921,2)
(2249,1700,2)
(1315,2921,2)
(2964,1407,2)
(769,2540,2)
(1058,317,2)
(2599,2110,2)
(368,538,2)
(1942,1274,2)
(1687,402,2)
(2523,2356,2)
(2607,2480,2)
(2607,1526,2)
(1968,2910,2)
(2609,1880,2)
(1822,2480,2)
(1162,2233,2)
(460,1657,2)
(117,1074,2)
(911,69,2)
(849,1935,2)
(2649,1566,2)
(1950,2935,2)
(1687,1745,2)
(299,642,2)
(2759,1074,2)
(275,1657,2)
(2281,642,2)
(2811,2910,2)
(2551,545,2)
(669,1676,2)
(2900,2642,2)
(1124,149,2)
(2964,1056,2)
(2356,1476,2)
(3003,1935,2)
(329,2447,2)
(1627,1751,2)
(400,1160,2)
(2367,2143,2)
(705,2143,2)
(2964,1156,2)
(2152,2699,2)
(2370,1700,2)
(2742,2356,2)
(1162,2067,2)
(1427,351,2)
(2551,1534,2)
(2551,801,2)
(511,2766,2)
(2785,327,2)
(569,2971,2)
(410,1946,2)
(1880,2989,2)
(2910,628,2)
(1911,1700,2)
(1025,2197,2)
(1503,1634,2)
(671,1162,2)
(2012,1676,2)
(557,993,2)
(440,630,2)
(584,1411,2)
(2776,1105,2)
(1940,1511,2)
(1860,2943,2)
(1288,498,2)
(819,2931,2)
(2650,2935,2)
(895,1751,2)
(1827,2110,2)
(747,2493,2)
(518,78,2)
(2500,2993,2)
(221,2272,2)
(1641,2812,2)
(96,2947,2)
(1665,2910,2)
(2809,1972,2)
(1351,2500,2)
(1038,1658,2)
(2320,84,2)
(1349,2343,2)
(1815,726,2)
(2814,1214,2)
(433,979,2)
(2607,1692,2)
(1326,2837,2)
(2744,236,2)
(1770,1700,2)
(1315,402,2)
(760,86,2)
(1330,1634,2)
(1996,1901,2)
(315,630,2)
(2592,2128,2)
(410,110,2)
(215,705,2)
(1461,2345,2)
(1674,2886,2)
(1330,2935,2)
(1990,1434,2)
(382,2859,2)
(2785,1056,2)
(429,1700,2)
(2102,511,2)
(992,1274,2)
(2271,2614,2)
(2093,64,2)
(2815,2947,2)
(2459,2907,2)
(2759,1634,2)
(873,941,2)
(734,499,2)
(410,256,2)
(1429,950,2)
(289,839,2)
(580,336,2)
(569,2480,2)
(1283,2809,2)
(2809,256,2)
(1795,11,2)
(1326,2921,2)
(135,2947,2)
(1162,2588,2)
(1753,876,2)
(50,3016,2)
(3015,1468,2)
(1382,1274,2)
(2292,2393,2)
(2267,160,2)
(1815,165,2)
(1950,2233,2)
(2000,941,2)
(860,2699,2)
(2331,1410,2)
(1913,1751,2)
(119,950,2)
(1125,839,2)
(2261,1274,2)
(1967,1511,2)
(1330,906,2)
(1698,235,2)
(53,2676,2)
(2774,1162,2)
(1631,2816,2)
(1659,1815,2)
(1577,1671,2)
(1410,2931,2)
(2120,1347,2)
(2462,69,2)
(1815,371,2)
(126,1856,2)
(2188,2972,2)
(2743,2910,2)
(2648,2128,2)
(268,2947,2)
(1815,1972,2)
(66,2676,2)
(1950,402,2)
(680,1954,2)
(2551,110,2)
(994,941,2)
(34,2991,2)
(1838,2582,2)
(329,2480,2)
(2759,1568,2)
(1786,1137,2)
(2169,2812,2)
(1773,1253,2)
(3021,1195,2)
(299,1105,2)
(536,2910,2)
(931,1904,2)
(1805,1658,2)
(1368,1671,2)
(805,2877,2)
(1815,84,2)
(2766,894,2)
(2556,383,2)
(2749,460,2)
(202,1442,2)
(980,2630,2)
(2953,1700,2)
(1195,1059,2)
(2759,472,2)
(164,2640,2)
(1809,1284,2)
(2607,685,2)
(718,2356,2)
(647,1162,2)
(126,1124,2)
(1258,1700,2)
(1375,941,2)
(36,1048,2)
(2111,2294,2)
(265,2910,2)
(1256,3000,2)
(113,1700,2)
(376,2859,2)
(2273,2356,2)
(354,1186,2)
(384,1700,2)
(297,111,2)
(2433,706,2)
(3004,1534,2)
(902,515,2)
(295,1864,2)
(1577,798,2)
(2313,706,2)
(31,2642,2)
(2946,1541,2)
(1860,1417,2)
(1687,371,2)
(2130,1568,2)
(354,906,2)
(1440,675,2)
(2241,2082,2)
(1950,1407,2)
(2796,755,2)
(2281,1671,2)
(2387,1815,2)
(2716,2630,2)
(1232,2345,2)
(881,1378,2)
(487,102,2)
(2605,2910,2)
(918,2972,2)
(662,2872,2)
(2418,2842,2)
(977,2931,2)
(1186,260,2)
(2273,764,2)
(1815,110,2)
(876,2614,2)
(1330,980,2)
(2567,1105,2)
(2152,1194,2)
(1068,2640,2)
(2893,685,2)
(1220,595,2)
(1165,876,2)
(1332,84,2)
(95,1618,2)
(157,1124,2)
(2607,2222,2)
(1815,545,2)
(2910,1300,2)
(1511,2640,2)
(2112,1850,2)
(761,933,2)
(630,2356,2)
(2955,2356,2)
(1856,223,2)
(411,2356,2)
(2722,1105,2)
(285,706,2)
(126,906,2)
(1945,1658,2)
(1739,2326,2)
(3025,1442,2)
(126,499,2)
(1776,560,2)
(1364,319,2)
(2809,468,2)
(2129,1700,2)
(584,2984,2)
(2505,1274,2)
(1503,2755,2)
(185,838,2)
(1107,268,2)
(2552,1576,2)
(263,1307,2)
(180,2356,2)
(757,2650,2)
(1399,755,2)
(91,2719,2)
(305,2356,2)
(31,1671,2)
(873,1160,2)
(1931,2696,2)
(126,2921,2)
(52,1085,2)
(1326,1417,2)
(1315,2971,2)
(122,515,2)
(420,2640,2)
(3029,635,2)
(1687,2139,2)
(869,2642,2)
(2860,2972,2)
(2428,1700,2)
(2330,1105,2)
(896,149,2)
(2320,499,2)
(1180,2843,2)
(2819,2668,2)
(389,1274,2)
(1376,1592,2)
(1162,906,2)
(2758,2650,2)
(2860,223,2)
(2541,1758,2)
(1330,2256,2)
(302,1105,2)
(2889,2542,2)
(410,801,2)
(2130,1634,2)
(1274,498,2)
(3005,2972,2)
(2188,2356,2)
(110,1953,2)
(1162,107,2)
(1326,2493,2)
(329,1407,2)
(2829,1087,2)
(202,2733,2)
(1447,135,2)
(2698,2280,2)
(1574,1700,2)
(267,63,2)
(2297,2931,2)
(1701,2642,2)
(780,3000,2)
(290,2972,2)
(876,377,2)
(19,1348,2)
(354,726,2)
(289,2871,2)
(1963,2511,2)
(653,2345,2)
(2551,1692,2)
(841,1698,2)
(2618,498,2)
(2748,1657,2)
(1808,1871,2)
(889,82,2)
(2569,1880,2)
(1315,726,2)
(844,2865,2)
(2755,3000,2)
(354,2155,2)
(1525,222,2)
(2778,1963,2)
(1230,289,2)
(2236,1583,2)
(1899,3003,2)
(2594,2356,2)
(319,1105,2)
(1403,117,2)
(2648,2167,2)
(1162,2614,2)
(2860,1274,2)
(2281,2642,2)
(1281,642,2)
(2971,1700,2)
(2621,706,2)
(2130,2480,2)
(1283,1160,2)
(1825,1340,2)
(2458,2702,2)
(126,468,2)
(456,2679,2)
(2722,2984,2)
(2713,1974,2)
(1711,319,2)
(1815,2843,2)
(2271,2067,2)
(1950,2779,2)
(1944,460,2)
(2308,2947,2)
(2210,2947,2)
(2787,642,2)
(2798,57,2)
(456,757,2)
(2650,2614,2)
(1195,2415,2)
(2130,402,2)
(1543,1658,2)
(251,1566,2)
(2964,685,2)
(1781,215,2)
(1115,1274,2)
(1070,2301,2)
(329,2935,2)
(2713,402,2)
(354,2480,2)
(1347,1470,2)
(2130,1407,2)
(2794,2640,2)
(876,2048,2)
(361,1004,2)
(1137,1217,2)
(259,2883,2)
(2655,1576,2)
(2785,1856,2)
(1012,1511,2)
(569,1056,2)
(1659,2859,2)
(1786,1884,2)
(776,1160,2)
(1741,1901,2)
(393,1658,2)
(55,2540,2)
(70,739,2)
(155,2356,2)
(2050,741,2)
(1907,2650,2)
(2332,2110,2)
(2270,2947,2)
(1180,1534,2)
(1273,2859,2)
(1408,416,2)
(731,2158,2)
(1860,2519,2)
(2544,1630,2)
(956,2997,2)
(1550,2641,2)
(945,2947,2)
(1822,2745,2)
(1941,2815,2)
(2713,1137,2)
(841,2055,2)
(1086,1701,2)
(2836,464,2)
(117,2588,2)
(748,755,2)
(2156,1185,2)
(1192,2972,2)
(2213,1224,2)
(2072,2916,2)
(329,2256,2)
(1687,468,2)
(1822,1692,2)
(1401,741,2)
(354,1856,2)
(2498,2540,2)
(1001,2947,2)
(2150,1185,2)
(210,1195,2)
(1503,1407,2)
(367,2379,2)
(2439,73,2)
(2615,1618,2)
(2382,2110,2)
(1548,993,2)
(2844,1284,2)
(2317,898,2)
(1822,1156,2)
(2607,1417,2)
(1687,2222,2)
(2575,1701,2)
(329,1074,2)
(876,1056,2)
(1618,1751,2)
(2519,2859,2)
(2664,2110,2)
(1698,267,2)
(812,62,2)
(126,1407,2)
(1862,1274,2)
(950,880,2)
(813,1577,2)
(354,377,2)
(2713,165,2)
(443,2540,2)
(1950,2139,2)
(2598,2918,2)
(2007,1185,2)
(1495,2931,2)
(583,488,2)
(2535,741,2)
(2357,1293,2)
(3035,2128,2)
(567,1842,2)
(1437,2619,2)
(1844,86,2)
(496,3002,2)
(2787,2931,2)
(2551,1013,2)
(2628,1273,2)
(869,1411,2)
(1657,642,2)
(2954,2455,2)
(1860,2256,2)
(4,1437,2)
(1734,1312,2)
(1594,2512,2)
(2360,260,2)
(569,685,2)
(2233,901,2)
(677,1577,2)
(1876,2676,2)
(1140,317,2)
(1812,2910,2)
(2785,187,2)
(861,1657,2)
(211,1577,2)
(3038,2865,2)
(117,1156,2)
(1795,1686,2)
(1218,706,2)
(117,2885,2)
(151,121,2)
(1963,84,2)
(1763,911,2)
(2152,1901,2)
(2317,468,2)
(730,2272,2)
(117,2441,2)
(1326,1407,2)
(1170,1178,2)
(876,980,2)
(2650,1137,2)
(2197,1393,2)
(1315,110,2)
(2343,2950,2)
(2217,1274,2)
(1542,86,2)
(1499,1105,2)
(407,2972,2)
(595,2356,2)
(2703,1657,2)
(734,1534,2)
(1477,2699,2)
(2109,17,2)
(3018,1185,2)
(31,2110,2)
(307,82,2)
(111,400,2)
(2195,1652,2)
(1201,2948,2)
(1432,2640,2)
(1568,3000,2)
(755,2555,2)
(2421,2947,2)
(1963,2519,2)
(2650,1900,2)
(1017,1751,2)
(1503,44,2)
(2785,1900,2)
(2607,110,2)
(1786,2458,2)
(2713,1530,2)
(1355,1274,2)
(379,2356,2)
(1530,2676,2)
(2614,317,2)
(1315,472,2)
(410,2930,2)
(2964,2256,2)
(1315,1056,2)
(1409,595,2)
(1260,941,2)
(896,1476,2)
(1665,706,2)
(599,2167,2)
(970,157,2)
(2809,2155,2)
(2809,980,2)
(216,1549,2)
(2328,2356,2)
(1326,2222,2)
(2607,2588,2)
(2809,2233,2)
(876,2674,2)
(1931,1954,2)
(1495,2843,2)
(126,801,2)
(2507,2493,2)
(329,2779,2)
(2177,1700,2)
(1860,1377,2)
(410,1349,2)
(2759,1946,2)
(2926,1658,2)
(2785,2155,2)
(1135,1700,2)
(1358,2552,2)
(1411,1048,2)
(2893,1417,2)
(1786,44,2)
(2759,2779,2)
(2946,979,2)
(864,2972,2)
(2893,596,2)
(129,1700,2)
(1701,1671,2)
(92,1700,2)
(2088,1671,2)
(760,1700,2)
(1125,1842,2)
(1315,2674,2)
(2478,1658,2)
(2293,2493,2)
(732,2984,2)
(17,741,2)
(1968,706,2)
(755,1411,2)
(354,898,2)
(478,181,2)
(2785,1013,2)
(164,755,2)
(718,2972,2)
(2920,357,2)
(2759,912,2)
(1090,2947,2)
(1809,515,2)
(1778,1534,2)
(329,3041,2)
(1846,2947,2)
(2109,122,2)
(876,402,2)
(1503,107,2)
(569,1186,2)
(1684,222,2)
(735,1085,2)
(96,1658,2)
(2421,706,2)
(2485,1751,2)
(1687,2921,2)
(1860,2511,2)
(2893,2588,2)
(117,402,2)
(1085,835,2)
(1068,149,2)
(354,596,2)
(1261,399,2)
(1687,1974,2)
(476,2676,2)
(2809,1137,2)
(760,2512,2)
(673,103,2)
(2897,1274,2)
(2759,1960,2)
(976,2141,2)
(99,1657,2)
(186,1054,2)
(1358,1671,2)
(28,1259,2)
(289,2356,2)
(1183,2676,2)
(2010,1124,2)
(271,1658,2)
(2713,1568,2)
(78,941,2)
(1778,149,2)
(15,1274,2)
(2714,2356,2)
(2397,706,2)
(1815,1534,2)
(2809,2837,2)
(1420,1904,2)
(2111,357,2)
(1162,1476,2)
(1199,2251,2)
(1235,72,2)
(1125,705,2)
(2785,1407,2)
(1617,2640,2)
(2281,755,2)
(600,1700,2)
(2060,1274,2)
(256,2676,2)
(1499,1411,2)
(2010,11,2)
(1822,1568,2)
(2607,1900,2)
(281,1658,2)
(2303,211,2)
(155,1274,2)
(2600,2804,2)
(1567,1284,2)
(2996,1268,2)
(710,1700,2)
(1326,2930,2)
(1438,498,2)
(1302,2895,2)
(1162,2139,2)
(2631,17,2)
(327,933,2)
(1001,1658,2)
(2713,377,2)
(2112,121,2)
(1745,1274,2)
(555,2773,2)
(1162,11,2)
(1089,839,2)
(180,1274,2)
(498,2110,2)
(2785,2614,2)
(1687,1530,2)
(1263,1935,2)
(1422,959,2)
(410,2222,2)
(319,2640,2)
(2785,1974,2)
(1786,2256,2)
(84,941,2)
(1755,2423,2)
(1697,1700,2)
(2488,1195,2)
(1713,2917,2)
(2791,1214,2)
(1477,1686,2)
(2223,2640,2)
(2788,2286,2)
(3025,2649,2)
(3039,1274,2)
(2986,950,2)
(971,2972,2)
(1326,898,2)
(2893,107,2)
(1882,1963,2)
(34,346,2)
(8,2512,2)
(2218,642,2)
(2317,2755,2)
(2759,1349,2)
(3037,2642,2)
(1442,1255,2)
(2572,2859,2)
(715,464,2)
(673,1274,2)
(811,2972,2)
(642,2843,2)
(906,2345,2)
(49,2972,2)
(2713,2674,2)
(529,2850,2)
(2900,755,2)
(2995,1658,2)
(1615,993,2)
(2126,2640,2)
(517,2248,2)
(1936,1274,2)
(1213,2356,2)
(1950,377,2)
(2551,2699,2)
(1881,977,2)
(1042,487,2)
(117,2155,2)
(774,1284,2)
(2533,2640,2)
(1332,149,2)
(409,642,2)
(463,706,2)
(1474,234,2)
(135,1658,2)
(1786,898,2)
(2893,1874,2)
(916,1411,2)
(1881,1411,2)
(2787,1411,2)
(2713,1074,2)
(1268,84,2)
(1051,2676,2)
(757,117,2)
(1026,1658,2)
(1315,980,2)
(2472,2733,2)
(748,1411,2)
(2385,1927,2)
(2133,1700,2)
(56,755,2)
(1162,2447,2)
(110,3000,2)
(1330,377,2)
(1068,1476,2)
(1815,1407,2)
(2895,2910,2)
(1904,1509,2)
(1623,2356,2)
(2754,2286,2)
(2785,2458,2)
(1908,2676,2)
(1538,1073,2)
(2551,1884,2)
(201,2540,2)
(1889,659,2)
(2785,726,2)
(2505,2972,2)
(3023,1538,2)
(2811,1658,2)
(117,371,2)
(1240,595,2)
(1617,1671,2)
(248,2702,2)
(1533,2804,2)
(1326,2779,2)
(2607,468,2)
(232,2702,2)
(2467,2931,2)
(2785,3041,2)
(2010,2519,2)
(62,1302,2)
(2832,1566,2)
(1180,499,2)
(101,2493,2)
(2125,1284,2)
(2726,620,2)
(2964,980,2)
(1217,1526,2)
(1503,2935,2)
(2096,69,2)
(2236,1838,2)
(2809,1013,2)
(2052,1701,2)
(475,2009,2)
(934,2676,2)
(2857,2872,2)
(2042,2640,2)
(2785,801,2)
(1705,2393,2)
(2596,2895,2)
(2674,2543,2)
(1790,1700,2)
(2785,402,2)
(375,1477,2)
(2330,755,2)
(1332,2903,2)
(1410,2640,2)
(219,1770,2)
(3002,295,2)
(2731,345,2)
(1860,187,2)
(1933,2910,2)
(1162,402,2)
(56,2640,2)
(2394,1940,2)
(47,640,2)
(1129,671,2)
(2017,1024,2)
(1025,2806,2)
(1989,511,2)
(1062,1274,2)
(2551,1056,2)
(1030,240,2)
(2081,2082,2)
(3033,2356,2)
(329,2588,2)
(2563,2947,2)
(355,2676,2)
(2261,2972,2)
(129,642,2)
(1330,1974,2)
(1963,1124,2)
(2423,1195,2)
(1485,2947,2)
(264,1658,2)
(2335,595,2)
(2218,2110,2)
(1397,2809,2)
(2330,2640,2)
(644,117,2)
(126,44,2)
(956,741,2)
(1332,1124,2)
(2276,2676,2)
(2599,642,2)
(1503,1884,2)
(1890,3004,2)
(833,1851,2)
(117,1960,2)
(31,642,2)
(1117,2110,2)
(1842,2143,2)
(157,1526,2)
(2337,2804,2)
(2958,595,2)
(69,1842,2)
(569,2837,2)
(215,567,2)
(1330,110,2)
(2359,1954,2)
(83,1087,2)
(410,2745,2)
(2904,706,2)
(2152,1953,2)
(2042,2984,2)
(614,731,2)
(593,2859,2)
(876,468,2)
(1980,2769,2)
(2345,223,2)
(734,1526,2)
(433,880,2)
(1757,1701,2)
(293,2947,2)
(860,2519,2)
(1025,1464,2)
(285,2947,2)
(189,2859,2)
(1351,84,2)
(3005,1274,2)
(2042,2642,2)
(950,1795,2)
(2794,2042,2)
(2964,256,2)
(588,2345,2)
(2013,1370,2)
(2551,2843,2)
(1351,11,2)
(2589,343,2)
(2881,1910,2)
(1004,3015,2)
(378,550,2)
(215,2871,2)
(3037,755,2)
(691,2809,2)
(1822,2837,2)
(134,515,2)
(876,2222,2)
(1860,110,2)
(2759,2935,2)
(76,160,2)
(659,998,2)
(2342,2984,2)
(1493,706,2)
(2180,1217,2)
(2071,1658,2)
(1529,1274,2)
(1977,1511,2)
(1167,1658,2)
(402,2226,2)
(2126,2110,2)
(601,1701,2)
(2759,2441,2)
(902,876,2)
(2317,1884,2)
(1503,801,2)
(1581,2110,2)
(1403,2809,2)
(2918,289,2)
(2446,2947,2)
(1905,2272,2)
(1503,1874,2)
(2759,2048,2)
(354,327,2)
(412,1274,2)
(2964,2588,2)
(2130,1474,2)
(1225,2676,2)
(1202,2356,2)
(1672,2392,2)
(2466,117,2)
(928,595,2)
(2893,2048,2)
(344,2356,2)
(1662,1274,2)
(916,2984,2)
(2964,2480,2)
(2627,2910,2)
(1117,1105,2)
(2170,1700,2)
(732,642,2)
(2317,1634,2)
(2710,2045,2)
(1881,642,2)
(1786,2174,2)
(354,2447,2)
(569,2233,2)
(977,2640,2)
(2293,442,2)
(2271,2458,2)
(926,3002,2)
(2317,2174,2)
(1918,2511,2)
(2247,3025,2)
(2688,1700,2)
(1577,2931,2)
(876,2885,2)
(1950,1056,2)
(1950,596,2)
(266,931,2)
(1330,1186,2)
(1860,1692,2)
(1495,1526,2)
(2342,1411,2)
(1089,2871,2)
(2271,2988,2)
(2816,630,2)
(2263,2800,2)
(1829,741,2)
(522,2731,2)
(31,2552,2)
(410,1875,2)
(929,111,2)
(2759,2588,2)
(126,2233,2)
(1822,980,2)
(1068,1881,2)
(971,2356,2)
(2984,475,2)
(2130,1692,2)
(410,2139,2)
(1174,911,2)
(2317,1137,2)
(1238,2650,2)
(569,1884,2)
(129,2931,2)
(2551,1946,2)
(1754,1658,2)
(952,2676,2)
(2809,685,2)
(2130,1647,2)
(2455,2087,2)
(44,3000,2)
(1817,215,2)
(1124,11,2)
(1828,1751,2)
(1594,1700,2)
(2899,154,2)
(2603,2511,2)
(360,1700,2)
(2467,2642,2)
(894,222,2)
(2678,595,2)
(1464,856,2)
(421,595,2)
(995,156,2)
(1330,726,2)
(1950,906,2)
(1511,38,2)
(313,3002,2)
(876,84,2)
(2330,2931,2)
(2621,2947,2)
(1485,1658,2)
(1786,1874,2)
(217,993,2)
(1410,642,2)
(1495,1671,2)
(1795,979,2)
(1481,790,2)
(2189,2972,2)
(1326,545,2)
(1996,2699,2)
(126,545,2)
(354,2233,2)
(2426,2123,2)
(329,1568,2)
(2785,1946,2)
(2573,1262,2)
(2457,1085,2)
(671,1577,2)
(882,1658,2)
(2274,1700,2)
(768,1657,2)
(2722,1901,2)
(1494,1087,2)
(354,1884,2)
(1341,1085,2)
(2705,137,2)
(56,1671,2)
(2833,1686,2)
(1890,993,2)
(2010,1901,2)
(1243,1593,2)
(7,2676,2)
(126,2500,2)
(1772,1967,2)
(2415,2524,2)
(236,2713,2)
(620,2272,2)
(1868,1274,2)
(1330,2174,2)
(1335,146,2)
(564,1701,2)
(1575,1939,2)
(2010,1686,2)
(2500,1541,2)
(1477,1534,2)
(1877,1160,2)
(2722,2519,2)
(981,941,2)
(1653,2982,2)
(1330,1874,2)
(2551,2779,2)
(3005,1942,2)
(1996,1476,2)
(1784,1577,2)
(625,1373,2)
(2995,2947,2)
(801,2860,2)
(104,1260,2)
(329,1349,2)
(2806,2197,2)
(992,2356,2)
(329,545,2)
(1293,34,2)
(1068,2984,2)
(1685,1701,2)
(1517,2057,2)
(1285,1526,2)
(958,624,2)
(3037,1671,2)
(1271,2393,2)
(2254,1434,2)
(1410,2552,2)
(1326,1156,2)
(2690,2226,2)
(1246,2270,2)
(2271,2674,2)
(1792,1701,2)
(681,2758,2)
(3001,1700,2)
(2143,706,2)
(182,2356,2)
(1281,2552,2)
(1125,503,2)
(734,1686,2)
(2551,596,2)
(1687,187,2)
(909,1195,2)
(2650,2447,2)
(1815,1686,2)
(757,2679,2)
(876,1377,2)
(2055,2519,2)
(840,1953,2)
(1495,1476,2)
(739,941,2)
(2249,706,2)
(1494,4,2)
(1794,1700,2)
(1399,642,2)
(2021,2947,2)
(2759,107,2)
(1326,44,2)
(1330,1960,2)
(2713,1875,2)
(319,2642,2)
(100,1657,2)
(1331,3025,2)
(1974,223,2)
(1495,1105,2)
(1698,1161,2)
(149,867,2)
(2317,187,2)
(1860,2885,2)
(1847,2972,2)
(162,2660,2)
(1860,2971,2)
(528,880,2)
(1124,1534,2)
(1315,256,2)
(1788,2766,2)
(2997,2947,2)
(1702,1935,2)
(3,2972,2)
(1260,2500,2)
(796,2110,2)
(1224,2972,2)
(2571,2542,2)
(1495,2500,2)
(604,1434,2)
(1449,2110,2)
(3004,2500,2)
(2527,741,2)
(1184,2251,2)
(281,2910,2)
(2400,1538,2)
(2809,2930,2)
(1640,642,2)
(329,2674,2)
(2124,1274,2)
(445,1658,2)
(2250,959,2)
(900,591,2)
(2042,1105,2)
(635,880,2)
(734,84,2)
(2833,2931,2)
(1170,741,2)
(1197,1534,2)
(317,1577,2)
(2405,2356,2)
(347,1274,2)
(2900,2110,2)
(2964,2943,2)
(2790,2676,2)
(1072,1700,2)
(1087,2197,2)
(1806,1954,2)
(1697,1676,2)
(1989,1700,2)
(2034,135,2)
(918,67,2)
(752,1571,2)
(2952,266,2)
(2964,801,2)
(2271,2779,2)
(329,2222,2)
(1822,2441,2)
(2436,2676,2)
(2035,1700,2)
(1399,2931,2)
(1687,801,2)
(1553,1105,2)
(1304,941,2)
(243,2640,2)
(839,69,2)
(2785,1568,2)
(2317,3041,2)
(53,1654,2)
(2026,1260,2)
(1503,2256,2)
(1815,1745,2)
(2015,1274,2)
(129,2809,2)
(2216,2345,2)
(2713,685,2)
(465,1701,2)
(550,1667,2)
(1098,2676,2)
(1773,2356,2)
(338,2272,2)
(1835,2676,2)
(2914,1700,2)
(2147,595,2)
(954,2552,2)
(2042,2650,2)
(2964,1900,2)
(2378,135,2)
(2758,117,2)
(319,1901,2)
(1657,2110,2)
(173,2972,2)
(1403,1160,2)
(2955,2972,2)
(2381,1217,2)
(1255,1658,2)
(222,2668,2)
(2664,2984,2)
(702,2812,2)
(1330,2943,2)
(921,57,2)
(354,371,2)
(1971,2910,2)
(1281,2640,2)
(1124,2500,2)
(2391,755,2)
(2496,1434,2)
(1165,1162,2)
(1046,1593,2)
(2627,706,2)
(2542,2096,2)
(1996,1124,2)
(2551,1875,2)
(53,223,2)
(2126,755,2)
(2287,473,2)
(2309,82,2)
(2175,2972,2)
(1197,2519,2)
(342,1534,2)
(1786,2779,2)
(892,185,2)
(1815,2588,2)
(1274,2167,2)
(2130,2779,2)
(1657,2642,2)
(705,910,2)
(651,1658,2)
(2863,2812,2)
(2452,121,2)
(1553,642,2)
(2551,468,2)
(2975,1312,2)
(1907,2809,2)
(577,289,2)
(379,1274,2)
(1326,2935,2)
(1687,2755,2)
(2785,2048,2)
(2802,1657,2)
(1978,2356,2)
(106,1087,2)
(354,1407,2)
(876,3041,2)
(1344,2345,2)
(637,1940,2)
(916,642,2)
(1471,117,2)
(202,289,2)
(1319,731,2)
(299,2931,2)
(860,1901,2)
(2077,1024,2)
(376,1751,2)
(1815,2458,2)
(2271,2441,2)
(2809,726,2)
(1162,2971,2)
(354,2588,2)
(2759,468,2)
(1860,1526,2)
(2437,941,2)
(902,1162,2)
(2258,2356,2)
(2809,2943,2)
(1665,2947,2)
(2907,1700,2)
(2248,722,2)
(1068,1534,2)
(1906,2251,2)
(2167,498,2)
(1815,2233,2)
(567,1577,2)
(569,2441,2)
(126,2935,2)
(907,1751,2)
(420,1411,2)
(2805,1618,2)
(1687,545,2)
(1530,2087,2)
(464,82,2)
(2768,706,2)
(727,741,2)
(2057,908,2)
(796,642,2)
(3004,1124,2)
(2867,1700,2)
(1332,2519,2)
(2607,2500,2)
(1727,918,2)
(2257,1700,2)
(1881,1214,2)
(1902,1700,2)
(858,102,2)
(2713,801,2)
(625,2250,2)
(126,11,2)
(1948,2910,2)
(2759,2552,2)
(1278,1630,2)
(1330,1474,2)
(1860,2480,2)
(222,1701,2)
(2250,342,2)
(1093,86,2)
(916,2642,2)
(791,1411,2)
(1822,2222,2)
(1822,1974,2)
(569,2256,2)
(354,2921,2)
(1853,2872,2)
(584,2642,2)
(1631,630,2)
(2650,1474,2)
(2580,1160,2)
(1657,1105,2)
(2953,1658,2)
(2558,2947,2)
(2271,1056,2)
(2783,2506,2)
(2729,1429,2)
(2055,1913,2)
(1553,2640,2)
(319,755,2)
(2759,2447,2)
(2317,1874,2)
(652,1534,2)
(1326,685,2)
(15,223,2)
(2580,2984,2)
(1512,1658,2)
(2342,2110,2)
(1786,1417,2)
(665,2630,2)
(2774,515,2)
(1815,2837,2)
(299,2552,2)
(569,1960,2)
(2781,1701,2)
(1822,2885,2)
(1117,1671,2)
(1958,1935,2)
(968,1195,2)
(2607,2256,2)
(644,2809,2)
(2445,2545,2)
(1951,2931,2)
(351,1700,2)
(1224,2356,2)
(2249,2910,2)
(2480,2972,2)
(350,2865,2)
(1298,1700,2)
(1624,911,2)
(535,2988,2)
(2580,1511,2)
(1594,1963,2)
(2096,2356,2)
(10,146,2)
(2511,2621,2)
(1162,596,2)
(1669,2158,2)
(1786,2921,2)
(2321,3016,2)
(2696,1700,2)
(549,2676,2)
(1315,1137,2)
(117,1972,2)
(2271,685,2)
(1543,706,2)
(1950,107,2)
(2946,149,2)
(2833,819,2)
(979,1429,2)
(3013,2863,2)
(616,2640,2)
(1330,2885,2)
(836,2809,2)
(2177,1511,2)
(2554,1347,2)
(1845,223,2)
(268,2143,2)
(2313,2947,2)
(2042,2110,2)
(2997,1658,2)
(1432,2110,2)
(2650,1156,2)
(737,1657,2)
(955,1534,2)
(2933,1658,2)
(2787,1105,2)
(415,838,2)
(2899,1054,2)
(626,1871,2)
(2551,1474,2)
(1535,460,2)
(1275,2863,2)
(569,1875,2)
(354,187,2)
(1162,1526,2)
(2271,596,2)
(268,69,2)
(533,2273,2)
(2966,1004,2)
(1026,2910,2)
(689,1195,2)
(1067,2858,2)
(2330,1671,2)
(2809,1474,2)
(2809,2614,2)
(2631,84,2)
(120,2542,2)
(843,1576,2)
(810,2272,2)
(410,1884,2)
(1285,1534,2)
(578,595,2)
(87,1163,2)
(2785,1474,2)
(2233,3000,2)
(713,2001,2)
(2799,595,2)
(1860,1875,2)
(2271,2048,2)
(1202,2972,2)
(1780,941,2)
(2809,2755,2)
(658,1973,2)
(326,941,2)
(1362,2356,2)
(1670,460,2)
(62,2895,2)
(1509,2972,2)
(3017,64,2)
(1580,2010,2)
(2181,1185,2)
(913,2197,2)
(569,2222,2)
(2640,2110,2)
(2317,327,2)
(1506,1070,2)
(1762,1860,2)
(1870,2511,2)
(739,2965,2)
(1183,1700,2)
(117,327,2)
(2785,2935,2)
(1233,2545,2)
(2399,941,2)
(1865,1815,2)
(1687,2458,2)
(2551,2755,2)
(2531,1963,2)
(1600,595,2)
(1125,69,2)
(1575,2579,2)
(1804,2679,2)
(371,2700,2)
(2277,941,2)
(1996,1686,2)
(1362,1274,2)
(1004,867,2)
(791,2931,2)
(2837,1538,2)
(2964,1634,2)
(31,755,2)
(1161,857,2)
(2271,2755,2)
(541,498,2)
(302,642,2)
(126,726,2)
(494,1953,2)
(1822,545,2)
(666,1671,2)
(698,2972,2)
(2884,3000,2)
(1397,1160,2)
(1719,2469,2)
(420,1105,2)
(721,2286,2)
(2271,1530,2)
(2704,2676,2)
(2607,472,2)
(626,1842,2)
(1815,1568,2)
(1162,2779,2)
(1326,1875,2)
(876,1074,2)
(673,2972,2)
(1855,345,2)
(2326,667,2)
(289,2143,2)
(1609,336,2)
(2713,1186,2)
(2551,2256,2)
(1786,2233,2)
(1845,2972,2)
(2713,371,2)
(378,235,2)
(1681,741,2)
(2743,706,2)
(2317,1474,2)
(1442,2910,2)
(1682,160,2)
(1998,1701,2)
(517,2831,2)
(2865,1658,2)
(1495,2984,2)
(1289,1511,2)
(173,2356,2)
(2317,1013,2)
(1335,1658,2)
(2662,102,2)
(652,1901,2)
(1414,873,2)
(75,86,2)
(2830,1238,2)
(2551,1407,2)
(2416,2676,2)
(2789,1686,2)
(253,3037,2)
(1865,2270,2)
(1701,2931,2)
(410,2935,2)
(781,1087,2)
(2833,1526,2)
(2320,2699,2)
(876,2480,2)
(1709,2990,2)
(1860,2233,2)
(1918,2387,2)
(2814,2345,2)
(1815,2519,2)
(2130,1856,2)
(2713,1056,2)
(1640,1671,2)
(2223,755,2)
(2202,1004,2)
(2444,706,2)
(2873,2676,2)
(2741,2826,2)
(2607,2699,2)
(876,1417,2)
(1315,801,2)
(2759,165,2)
(1378,3037,2)
(1815,2174,2)
(1710,1347,2)
(2791,2167,2)
(1245,2952,2)
(1860,1013,2)
(211,2143,2)
(2042,2931,2)
(1758,2493,2)
(1797,2859,2)
(1332,2500,2)
(2429,567,2)
(2924,876,2)
(2420,1338,2)
(31,2640,2)
(3042,941,2)
(1815,1474,2)
(796,755,2)
(2430,642,2)
(1687,1056,2)
(2032,2972,2)
(2627,1658,2)
(1293,1012,2)
(1330,1884,2)
(2713,545,2)
(1399,2642,2)
(156,2093,2)
(268,1658,2)
(1093,1162,2)
(126,165,2)
(2480,1953,2)
(1503,2441,2)
(869,642,2)
(926,2128,2)
(1162,1407,2)
(763,2865,2)
(3031,1411,2)
(2330,2984,2)
(2893,1377,2)
(133,1576,2)
(2415,941,2)
(2287,2676,2)
(1184,805,2)
(346,1511,2)
(2342,2640,2)
(1762,2630,2)
(2204,1658,2)
(2061,941,2)
(2881,146,2)
(2667,1274,2)
(2144,2972,2)
(1330,2837,2)
(1715,1751,2)
(2713,912,2)
(1050,1566,2)
(2464,755,2)
(1296,1701,2)
(1503,2233,2)
(2178,2910,2)
(2893,2921,2)
(1617,2110,2)
(236,1217,2)
(2322,547,2)
(2722,1534,2)
(1162,110,2)
(1334,1939,2)
(1255,2910,2)
(1687,377,2)
(1162,1634,2)
(77,933,2)
(2490,2947,2)
(1504,1410,2)
(876,2155,2)
(2759,1692,2)
(126,2930,2)
(1379,1842,2)
(2130,2174,2)
(1815,1074,2)
(1942,1362,2)
(505,1658,2)
(274,2984,2)
(1503,2971,2)
(1049,595,2)
(1467,1700,2)
(1822,2971,2)
(2551,2588,2)
(1738,741,2)
(2677,38,2)
(2753,2947,2)
(1860,2155,2)
(1326,1974,2)
(342,2699,2)
(1327,1609,2)
(1922,993,2)
(209,1657,2)
(1576,69,2)
(876,1476,2)
(2152,1534,2)
(2152,499,2)
(271,2910,2)
(1662,2972,2)
(783,2493,2)
(1343,1658,2)
(2516,1163,2)
(2441,2511,2)
(2825,706,2)
(498,755,2)
(2370,1751,2)
(329,2921,2)
(2271,1417,2)
(901,1274,2)
(2785,1692,2)
(2281,1411,2)
(716,2356,2)
(2835,2812,2)
(759,690,2)
(2710,595,2)
(2248,2831,2)
(1786,2674,2)
(1547,567,2)
(2017,2161,2)
(1315,2222,2)
(1162,1137,2)
(569,1474,2)
(1751,3001,2)
(979,1195,2)
(2130,906,2)
(1539,2865,2)
(876,2971,2)
(210,2883,2)
(2660,595,2)
(1824,2972,2)
(2317,1156,2)
(1733,2831,2)
(1348,488,2)
(1255,2947,2)
(1741,1534,2)
(1950,545,2)
(1815,1974,2)
(329,1960,2)
(2914,2947,2)
(2950,1842,2)
(2647,1751,2)
(2317,1186,2)
(2911,1618,2)
(1326,377,2)
(2915,2859,2)
(431,2947,2)
(2904,2910,2)
(1815,2943,2)
(2117,2945,2)
(2759,898,2)
(818,991,2)
(2551,1476,2)
(230,2328,2)
(1315,260,2)
(3007,2972,2)
(1846,566,2)
(15,2128,2)
(803,2226,2)
(1503,1156,2)
(269,2345,2)
(2894,739,2)
(2774,1963,2)
(2619,1087,2)
(667,1338,2)
(2660,418,2)
(1505,706,2)
(1660,1618,2)
(329,1946,2)
(2130,1377,2)
(2821,2676,2)
(1162,2674,2)
(2356,2474,2)
(3035,2167,2)
(410,2674,2)
(4,2272,2)
(440,2686,2)
(1950,2458,2)
(1753,515,2)
(2803,2286,2)
(1552,2345,2)
(536,2947,2)
(1948,1658,2)
(2016,739,2)
(1256,1953,2)
(835,1700,2)
(2934,1511,2)
(1259,2545,2)
(1365,2356,2)
(2551,685,2)
(2819,1442,2)
(1860,3041,2)
(1059,259,2)
(1503,1013,2)
(182,1274,2)
(1996,2843,2)
(45,2676,2)
(1499,2110,2)
(580,119,2)
(1232,1378,2)
(790,2676,2)
(751,1904,2)
(1815,402,2)
(268,2910,2)
(1503,726,2)
(1942,2356,2)
(2044,2972,2)
(2785,2441,2)
(1195,2883,2)
(1357,1700,2)
(1692,102,2)
(2130,2447,2)
(1330,1900,2)
(1687,107,2)
(1822,2755,2)
(1950,468,2)
(2019,1214,2)
(674,1802,2)
(1343,2910,2)
(354,2943,2)
(1284,902,2)
(2964,2837,2)
(1073,722,2)
(1130,1373,2)
(1493,2947,2)
(289,2950,2)
(2635,689,2)
(748,2984,2)
(493,1274,2)
(410,2441,2)
(1516,2118,2)
(121,1576,2)
(2594,2143,2)
(2562,1274,2)
(1512,2947,2)
(77,634,2)
(445,1162,2)
(700,706,2)
(1330,371,2)
(814,1539,2)
(2545,1862,2)
(1351,1901,2)
(2601,2096,2)
(82,2679,2)
(2414,1892,2)
(470,1879,2)
(1950,2755,2)
(1786,1530,2)
(1815,1875,2)
(1860,165,2)
(2946,433,2)
(2271,327,2)
(162,1049,2)
(1505,1658,2)
(1815,1056,2)
(1893,2895,2)
(2295,595,2)
(1117,2552,2)
(114,160,2)
(694,595,2)
(2040,2910,2)
(2317,1745,2)
(2043,2286,2)
(129,2650,2)
(1936,2356,2)
(2278,706,2)
(1734,1701,2)
(877,460,2)
(1822,2233,2)
(876,1186,2)
(3031,755,2)
(835,2809,2)
(1495,17,2)
(2676,2356,2)
(528,2715,2)
(1068,17,2)
(2027,1434,2)
(3034,1217,2)
(162,595,2)
(1330,44,2)
(2259,1312,2)
(445,1700,2)
(2888,1410,2)
(2831,498,2)
(2024,1265,2)
(1315,1568,2)
(2024,1913,2)
(1583,1910,2)
(1342,2910,2)
(2008,2013,2)
(2794,2552,2)
(1503,545,2)
(2759,2921,2)
(1326,980,2)
(126,2458,2)
(1413,1217,2)
(409,1671,2)
(2607,2233,2)
(1822,1407,2)
(1332,1534,2)
(923,1762,2)
(1069,867,2)
(1640,1411,2)
(1811,2972,2)
(2382,2931,2)
(2871,1842,2)
(927,2542,2)
(1815,1900,2)
(1342,706,2)
(2130,1900,2)
(2530,876,2)
(801,2356,2)
(1963,2699,2)
(608,2650,2)
(796,1411,2)
(1499,755,2)
(2967,2280,2)
(1997,1657,2)
(762,234,2)
(1200,2502,2)
(29,357,2)
(959,1373,2)
(2486,64,2)
(126,1745,2)
(1815,1137,2)
(2350,630,2)
(2804,1054,2)
(1682,2893,2)
(2476,2676,2)
(876,1407,2)
(643,1496,2)
(2964,2441,2)
(551,1494,2)
(2518,1963,2)
(2833,2843,2)
(1378,900,2)
(2809,1875,2)
(117,1745,2)
(198,1700,2)
(1581,642,2)
(410,2614,2)
(2890,1087,2)
(2130,898,2)
(2668,1224,2)
(1326,2614,2)
(2343,2143,2)
(503,555,2)
(955,17,2)
(1344,2272,2)
(827,1647,2)
(2893,1056,2)
(1283,498,2)
(1162,2943,2)
(2702,1657,2)
(1727,1363,2)
(1421,115,2)
(991,1085,2)
(2271,545,2)
(1835,476,2)
(1827,2984,2)
(2317,2921,2)
(1546,941,2)
(1810,1085,2)
(1532,515,2)
(1180,17,2)
(1473,522,2)
(2801,2251,2)
(2607,499,2)
(722,1284,2)
(2810,880,2)
(2845,918,2)
(903,1851,2)
(260,2451,2)
(2899,1729,2)
(126,2779,2)
(1511,280,2)
(1786,1186,2)
(1501,2286,2)
(2281,2110,2)
(2217,2972,2)
(1238,117,2)
(2109,2519,2)
(2713,2447,2)
(2809,1634,2)
(1764,2676,2)
(1330,1530,2)
(1687,726,2)
(254,2356,2)
(1326,327,2)
(1695,1658,2)
(139,2545,2)
(1407,1700,2)
(1884,1700,2)
(351,2972,2)
(2830,57,2)
(1432,2642,2)
(2462,2143,2)
(2230,102,2)
(1871,706,2)
(683,2379,2)
(1268,1686,2)
(2312,2899,2)
(1978,1274,2)
(37,1307,2)
(237,367,2)
(628,1609,2)
(804,2895,2)
(2086,498,2)
(312,1658,2)
(386,289,2)
(2102,222,2)
(2897,2972,2)
(1588,1751,2)
(357,1772,2)
(360,706,2)
(196,117,2)
(1961,941,2)
(1162,327,2)
(2953,1160,2)
(2385,1340,2)
(154,1603,2)
(860,1526,2)
(1330,2971,2)
(2713,1377,2)
(410,2971,2)
(2472,2668,2)
(363,1577,2)
(204,1954,2)
(2530,515,2)
(1089,2143,2)
(673,2356,2)
(1687,2674,2)
(550,1698,2)
(2551,1124,2)
(2533,2490,2)
(57,2356,2)
(661,1274,2)
(2130,1875,2)
(1197,2895,2)
(1093,876,2)
(2722,2931,2)
(2158,1657,2)
(86,706,2)
(2669,2781,2)
(569,2745,2)
(2899,2621,2)
(2595,2272,2)
(860,2972,2)
(2707,135,2)
(2152,2843,2)
(2109,2895,2)
(157,2345,2)
(1509,1162,2)
(2803,2762,2)
(2984,1293,2)
(348,2511,2)
(265,706,2)
(1065,868,2)
(564,221,2)
(433,2993,2)
(1528,2469,2)
(246,2640,2)
(2317,1074,2)
(1498,156,2)
(117,187,2)
(3014,1931,2)
(1836,3016,2)
(227,2356,2)
(2865,2313,2)
(3027,706,2)
(235,642,2)
(1730,498,2)
(2946,11,2)
(2628,1751,2)
(1702,1700,2)
(1577,2642,2)
(2924,1162,2)
(165,1953,2)
(342,1526,2)
(1860,1884,2)
(1279,211,2)
(2255,642,2)
(2893,1972,2)
(2713,2935,2)
(609,1024,2)
(2627,1248,2)
(2449,1904,2)
(3016,1842,2)
(1581,2984,2)
(367,2272,2)
(2152,1487,2)
(1084,1511,2)
(1042,595,2)
(117,2614,2)
(1508,2895,2)
(918,1274,2)
(2607,2067,2)
(126,2971,2)
(1503,2588,2)
(2650,2779,2)
(2266,2800,2)
(567,705,2)
(801,1274,2)
(1676,1851,2)
(1432,1671,2)
(1313,2812,2)
(2332,1411,2)
(472,160,2)
(1330,2480,2)
(123,2370,2)
(2759,2458,2)
(2910,104,2)
(1722,1609,2)
(2961,2343,2)
(410,2233,2)
(108,2676,2)
(2342,1671,2)
(2141,234,2)
(400,117,2)
(2271,2447,2)
(472,1700,2)
(2867,911,2)
(1687,2930,2)
(1904,2972,2)
(2759,1974,2)
(569,1407,2)
(2774,1700,2)
(642,1526,2)
(1594,722,2)
(2467,2110,2)
(2599,2642,2)
(814,2859,2)
(926,1581,2)
(537,2286,2)
(1185,95,2)
(2964,2674,2)
(2166,2345,2)
(1815,2674,2)
(1822,2067,2)
(2848,1581,2)
(2999,2511,2)
(2662,2286,2)
(181,2328,2)
(2408,2356,2)
(1397,1701,2)
(2387,2607,2)
(1362,2972,2)
(69,2850,2)
(2551,2674,2)
(2130,2930,2)
(876,1875,2)
(2964,545,2)
(1147,1220,2)
(1860,2500,2)
(2983,2328,2)
(2317,2067,2)
(1754,2947,2)
(157,2699,2)
(281,2947,2)
(978,345,2)
(2789,1658,2)
(368,1274,2)
(569,1568,2)
(186,1483,2)
(410,1474,2)
(1049,2685,2)
(3009,1772,2)
(3031,2552,2)
(1822,460,2)
(1436,2469,2)
(1124,2843,2)
(410,2155,2)
(2758,1700,2)
(2354,1676,2)
(2901,2356,2)
(2881,2975,2)
(2785,256,2)
(1945,706,2)
(1410,2642,2)
(2356,499,2)
(2931,691,2)
(1503,898,2)
(2876,2947,2)
(410,2779,2)
(1950,2447,2)
(2006,1873,2)
(1509,876,2)
(2271,110,2)
(96,2910,2)
(68,1657,2)
(1417,3000,2)
(818,1085,2)
(2203,2947,2)
(490,595,2)
(1351,17,2)
(2809,165,2)
(672,1293,2)
(2726,3025,2)
(1315,1349,2)
(2055,1526,2)
(2809,3041,2)
(1682,2713,2)
(1786,107,2)
(1399,1411,2)
(126,107,2)
(1298,2676,2)
(1117,2640,2)
(4,83,2)
(1330,1745,2)
(1446,3025,2)
(1343,2040,2)
(223,2540,2)
(2551,107,2)
(584,2931,2)
(420,2931,2)
(1162,2935,2)
(2294,357,2)
(1110,1658,2)
(329,2139,2)
(876,1884,2)
(2713,2067,2)
(1950,801,2)
(2708,2947,2)
(1667,2347,2)
(1054,1577,2)
(2850,1895,2)
(2759,2614,2)
(1295,2286,2)
(1778,1686,2)
(2042,1411,2)
(1162,1186,2)
(2815,706,2)
(112,1274,2)
(2650,980,2)
(846,595,2)
(554,2676,2)
(2664,2931,2)
(2558,1658,2)
(2607,256,2)
(3043,345,2)
(2152,1526,2)
(64,2287,2)
(2650,1946,2)
(374,1701,2)
(2271,165,2)
(302,2110,2)
(461,64,2)
(608,1700,2)
(117,1474,2)
(786,156,2)
(593,2607,2)
(2759,2755,2)
(299,1671,2)
(1326,1884,2)
(2893,1884,2)
(2472,1620,2)
(1083,156,2)
(154,1911,2)
(215,503,2)
(569,1417,2)
(459,1701,2)
(2134,1373,2)
(539,1511,2)
(526,374,2)
(242,2676,2)
(1915,1963,2)
(3001,2859,2)
(1503,468,2)
(1786,402,2)
(1268,2500,2)
(2551,1377,2)
(926,17,2)
(2589,2469,2)
(1860,402,2)
(2700,858,2)
(2443,2789,2)
(126,2943,2)
(2979,2972,2)
(917,2082,2)
(2993,1541,2)
(2759,1530,2)
(2646,1307,2)
(85,2972,2)
(2207,2895,2)
(1503,1692,2)
(1623,2972,2)
(2441,895,2)
(1884,1284,2)
(2759,545,2)
(2607,2139,2)
(2814,1378,2)
(2048,1676,2)
(157,2843,2)
(2607,2837,2)
(876,2699,2)
(651,2910,2)
(2206,642,2)
(2594,503,2)
(2636,2493,2)
(342,959,2)
(608,2809,2)
(54,2972,2)
(1146,2251,2)
(2679,2356,2)
(410,1137,2)
(569,912,2)
(1004,1686,2)
(1238,2809,2)
(940,2872,2)
(1910,2972,2)
(2633,498,2)
(839,533,2)
(1950,2067,2)
(2522,1566,2)
(1746,2910,2)
(2511,2356,2)
(1247,222,2)
(1559,2815,2)
(1068,1671,2)
(2271,468,2)
(2769,918,2)
(1326,472,2)
(684,2947,2)
(2317,2943,2)
(2823,2356,2)
(2271,44,2)
(741,1948,2)
(1895,1658,2)
(2825,2910,2)
(2809,2222,2)
(653,1190,2)
(2876,1658,2)
(2549,993,2)
(733,1904,2)
(410,1013,2)
(2759,187,2)
(176,1954,2)
(2540,2019,2)
(2326,1338,2)
(732,2110,2)
(1430,357,2)
(1786,980,2)
(1268,2699,2)
(1562,2865,2)
(773,1338,2)
(510,1274,2)
(129,2552,2)
(2964,2930,2)
(2759,256,2)
(1330,1137,2)
(117,1884,2)
(117,2935,2)
(1827,2642,2)
(210,210,2)
(2110,1027,2)
(360,2809,2)
(2893,1634,2)
(1553,1671,2)
(1786,2971,2)
(2713,980,2)
(1996,2500,2)
(2341,412,2)
(1983,2916,2)
(916,2640,2)
(3037,1411,2)
(3016,1048,2)
(338,741,2)
(2729,2525,2)
(354,1417,2)
(2380,2910,2)
(1532,1162,2)
(608,1160,2)
(2610,2769,2)
(2752,595,2)
(1315,1856,2)
(662,2548,2)
(2699,1260,2)
(57,2972,2)
(2130,377,2)
(2551,2222,2)
(1751,2859,2)
(1471,464,2)
(1162,1901,2)
(2271,2971,2)
(497,555,2)
(1786,1745,2)
(550,841,2)
(545,2676,2)
(569,1856,2)
(329,2048,2)
(150,2676,2)
(1307,460,2)
(354,1377,2)
(567,2106,2)
(2607,2519,2)
(293,706,2)
(2297,2110,2)
(2328,1274,2)
(2327,1657,2)
(433,1541,2)
(2740,2833,2)
(992,2972,2)
(1824,2356,2)
(780,2456,2)
(1423,1700,2)
(2215,2676,2)
(1217,1686,2)
(876,165,2)
(1326,2943,2)
(1495,2640,2)
(1603,1931,2)
(1826,2356,2)
(2824,2061,2)
(1786,1946,2)
(2607,1874,2)
(129,2110,2)
(329,234,2)
(912,1700,2)
(1503,596,2)
(2594,1842,2)
(771,31,2)
(876,2588,2)
(1671,219,2)
(2759,1972,2)
(1581,2642,2)
(2168,2947,2)
(2406,2241,2)
(791,642,2)
(1581,1105,2)
(2367,2393,2)
(1503,2943,2)
(1201,156,2)
(33,2789,2)
(2713,2441,2)
(3007,2356,2)
(10,2493,2)
(1068,2843,2)
(1811,2356,2)
(982,358,2)
(2885,1657,2)
(2122,135,2)
(464,1403,2)
(1917,1160,2)
(1809,1162,2)
(2250,1373,2)
(1962,1340,2)
(540,2650,2)
(2758,58,2)
(2900,2984,2)
(2991,1940,2)
(942,857,2)
(2858,1511,2)
(2759,2940,2)
(876,11,2)
(1281,755,2)
(2893,898,2)
(1727,1700,2)
(1950,2441,2)
(1354,1954,2)
(1441,1338,2)
(2759,1745,2)
(2819,1790,2)
(969,2356,2)
(2875,1700,2)
(117,1900,2)
(2997,2910,2)
(2759,596,2)
(569,402,2)
(1579,1700,2)
(1917,2809,2)
(1035,1340,2)
(2008,2545,2)
(2421,1658,2)
(725,113,2)
(822,2857,2)
(1860,17,2)
(234,307,2)
(346,1700,2)
(2253,637,2)
(1108,345,2)
(1860,1186,2)
(2330,1411,2)
(979,979,2)
(1315,2447,2)
(916,755,2)
(2713,596,2)
(2164,1195,2)
(1265,706,2)
(1715,105,2)
(2949,289,2)
(362,2972,2)
(1634,1954,2)
(1351,1686,2)
(2965,941,2)
(1162,2921,2)
(2471,1617,2)
(1881,2552,2)
(1639,1701,2)
(1537,1671,2)
(286,2345,2)
(1701,2552,2)
(2650,2222,2)
(2124,1343,2)
(222,2733,2)
(1495,1686,2)
(109,996,2)
(2630,1734,2)
(1583,2287,2)
(302,1411,2)
(1701,642,2)
(1330,2447,2)
(2418,1274,2)
(449,901,2)
(3037,1105,2)
(2582,53,2)
(391,2137,2)
(2627,2947,2)
(2341,515,2)
(659,358,2)
(110,1963,2)
(1631,2733,2)
(1950,1884,2)
(2130,2674,2)
(1818,2345,2)
(2426,1647,2)
(2713,906,2)
(1824,1274,2)
(2108,2356,2)
(2218,1411,2)
(2980,706,2)
(1815,2699,2)
(2003,993,2)
(2650,165,2)
(2964,1884,2)
(2085,1195,2)
(2774,1931,2)
(836,1657,2)
(1965,2493,2)
(2809,2674,2)
(1933,706,2)
(2819,1899,2)
(479,2630,2)
(1277,1577,2)
(2935,2916,2)
(2393,2984,2)
(211,1842,2)
(1953,2286,2)
(1355,2972,2)
(1419,1274,2)
(2964,2885,2)
(2487,109,2)
(2010,82,2)
(2759,1417,2)
(2556,1132,2)
(2824,941,2)
(1955,2972,2)
(1828,2859,2)
(2403,941,2)
(2551,11,2)
(1329,1698,2)
(2759,2971,2)
(1687,2745,2)
(2979,1274,2)
(1062,2356,2)
(1660,2115,2)
(162,1042,2)
(692,1700,2)
(2556,1658,2)
(684,2910,2)
(2650,256,2)
(2210,2910,2)
(117,2745,2)
(595,1274,2)
(117,1407,2)
(570,706,2)
(1877,2650,2)
(1968,2947,2)
(1950,2674,2)
(1695,706,2)
(410,545,2)
(1708,412,2)
(2002,2916,2)
(1326,2588,2)
(1815,2930,2)
(3004,1686,2)
(2713,2480,2)
(2631,149,2)
(1752,867,2)
(1741,2699,2)
(2379,1025,2)
(1221,2356,2)
(1963,17,2)
(2356,1534,2)
(2418,2356,2)
(1773,1274,2)
(2551,2233,2)
(896,1686,2)
(876,44,2)
(117,2458,2)
(157,2091,2)
(1330,1417,2)
(1052,2630,2)
(1351,595,2)
(2162,28,2)
(1165,515,2)
(2551,2500,2)
(2787,1671,2)
(3004,11,2)
(1675,1577,2)
(1503,1568,2)
(569,2935,2)
(2090,1296,2)
(1632,2493,2)
(2759,1137,2)
(2100,2375,2)
(2947,200,2)
(1950,2745,2)
(1954,2789,2)
(313,977,2)
(1578,2117,2)
(978,2663,2)
(2032,2356,2)
(1141,2345,2)
(2759,906,2)
(2701,3037,2)
(2216,2272,2)
(1659,2607,2)
(902,317,2)
(59,1293,2)
(126,1874,2)
(1428,1185,2)
(734,1476,2)
(658,1751,2)
(2271,2174,2)
(2278,1658,2)
(866,2593,2)
(2785,1137,2)
(2899,930,2)
(868,1700,2)
(991,2884,2)
(701,2540,2)
(410,1972,2)
(543,2910,2)
(342,1686,2)
(2798,1700,2)
(428,1751,2)
(2307,78,2)
(2860,2128,2)
(1577,2552,2)
(2759,2139,2)
(1822,726,2)
(2858,1775,2)
(2010,17,2)
(569,165,2)
(1950,2588,2)
(1050,1749,2)
(569,801,2)
(3011,595,2)
(2785,1377,2)
(661,2972,2)
(1503,2155,2)
(791,2640,2)
(500,78,2)
(1312,374,2)
(1786,2614,2)
(1432,755,2)
(1167,2947,2)
(160,2676,2)
(2607,2674,2)
(1326,2885,2)
(1415,2676,2)
(1647,2187,2)
(2824,1581,2)
(478,1442,2)
(1048,69,2)
(908,1575,2)
(2773,1700,2)
(624,2415,2)
(2927,135,2)
(2809,371,2)
(2218,2642,2)
(2632,731,2)
(2305,2356,2)
(2607,980,2)
(81,1751,2)
(748,1105,2)
(1207,2552,2)
(2551,327,2)
(2759,1875,2)
(354,468,2)
(689,2415,2)
(88,2642,2)
(356,1935,2)
(615,2946,2)
(2650,1417,2)
(2964,2174,2)
(796,1105,2)
(1877,2809,2)
(2815,911,2)
(1786,2935,2)
(2010,1526,2)
(354,1960,2)
(1663,941,2)
(1308,2972,2)
(1917,1700,2)
(848,1566,2)
(1617,2642,2)
(752,289,2)
(2903,137,2)
(1228,1411,2)
(671,1931,2)
(2945,289,2)
(117,2139,2)
(1554,223,2)
(2115,1686,2)
(2650,2441,2)
(1950,371,2)
(569,468,2)
(2785,898,2)
(1541,880,2)
(2020,2831,2)
(1315,1013,2)
(1786,2745,2)
(1210,2812,2)
(896,1124,2)
(1110,2947,2)
(780,2356,2)
(2556,1201,2)
(985,1954,2)
(1296,1700,2)
(1862,2356,2)
(855,1260,2)
(1071,3025,2)
(3004,2848,2)
(2143,1658,2)
(1695,2947,2)
(2463,160,2)
(1946,1953,2)
(2673,357,2)
(2022,1348,2)
(2796,2552,2)
(1776,2418,2)
(926,1124,2)
(569,1137,2)
(2551,377,2)
(1388,2720,2)
(1281,2642,2)
(2130,801,2)
(1315,2885,2)
(142,1940,2)
(796,2552,2)
(1822,1884,2)
(1490,515,2)
(876,1013,2)
(835,1160,2)
(2964,1875,2)
(2286,1274,2)
(1963,1476,2)
(1687,906,2)
(590,2809,2)
(2551,17,2)
(2612,1658,2)
(2694,1577,2)
(2785,2222,2)
(684,706,2)
(1456,2552,2)
(1412,2630,2)
(2551,2155,2)
(440,1989,2)
(271,2947,2)
(1815,1124,2)
(593,1751,2)
(2356,2500,2)
(1077,464,2)
(2085,880,2)
(2607,2174,2)
(2796,2984,2)
(1822,1856,2)
(2650,1377,2)
(2238,2676,2)
(214,2393,2)
(2796,1671,2)
(302,2984,2)
(2281,2984,2)
(774,1700,2)
(1716,160,2)
(2326,1441,2)
(329,906,2)
(2558,706,2)
(804,1700,2)
(1032,1284,2)
(1246,2607,2)
(1048,1842,2)
(668,2167,2)
(2126,2552,2)
(1687,2837,2)
(779,307,2)
(2862,533,2)
(2612,706,2)
(1315,2233,2)
(2551,2067,2)
(2713,898,2)
(164,1671,2)
(1326,1186,2)
(571,1577,2)
(2642,1293,2)
(354,110,2)
(375,2356,2)
(410,1856,2)
(2979,2356,2)
(1473,345,2)
(1554,2167,2)
(2940,1700,2)
(1711,1700,2)
(1662,225,2)
(1877,117,2)
(410,912,2)
(1162,1474,2)
(1593,2676,2)
(771,2110,2)
(1411,2642,2)
(74,2272,2)
(1617,2552,2)
(1822,1530,2)
(2551,2930,2)
(2022,137,2)
(3027,2910,2)
(1860,1745,2)
(2317,2935,2)
(955,1526,2)
(1809,876,2)
(1687,685,2)
(1180,149,2)
(126,2699,2)
(74,741,2)
(2149,2226,2)
(2411,2630,2)
(722,1809,2)
(2785,371,2)
(816,2947,2)
(1209,1815,2)
(2665,2676,2)
(2571,1931,2)
(1860,596,2)
(2126,642,2)
(2713,327,2)
(814,2915,2)
(1315,187,2)
(503,2143,2)
(1315,468,2)
(2226,1284,2)
(1815,472,2)
(1326,187,2)
(1948,2947,2)
(894,2102,2)
(1972,1700,2)
(2867,1162,2)
(1451,2859,2)
(932,1700,2)
(969,970,2)
(543,2947,2)
(954,2642,2)
(1324,941,2)
(2241,917,2)
(2819,222,2)
(2773,2650,2)
(1315,1960,2)
(235,1182,2)
(2162,1736,2)
(2787,755,2)
(409,2642,2)
(860,84,2)
(1397,2650,2)
(1712,2343,2)
(3037,2552,2)
(2895,2947,2)
(1815,2779,2)
(1687,596,2)
(1169,2676,2)
(296,2313,2)
(1715,1246,2)
(590,1160,2)
(2900,1105,2)
(2269,1414,2)
(1495,642,2)
(871,2804,2)
(956,1556,2)
(2466,1160,2)
(360,117,2)
(2130,327,2)
(123,593,2)
(2030,2514,2)
(2628,2859,2)
(1044,2863,2)
(310,1511,2)
(2406,2082,2)
(1478,2865,2)
(2893,1217,2)
(511,2472,2)
(2534,2972,2)
(2387,2511,2)
(410,1417,2)
(2906,457,2)
(1458,1698,2)
(644,2650,2)
(1162,1056,2)
(2846,1904,2)
(2594,839,2)
(117,2837,2)
(2152,2558,2)
(2130,2222,2)
(926,2519,2)
(1204,2356,2)
(1074,2511,2)
(2883,950,2)
(329,1884,2)
(645,901,2)
(2964,2745,2)
(2679,1579,2)
(1950,1647,2)
(1395,599,2)
(2876,2910,2)
(1432,302,2)
(1926,345,2)
(2467,2552,2)
(771,1105,2)
(1881,2984,2)
(1577,1411,2)
(750,645,2)
(1074,1953,2)
(817,1576,2)
(246,2984,2)
(498,1411,2)
(2534,2356,2)
(2809,1568,2)
(1678,908,2)
(2785,2779,2)
(1935,2356,2)
(2317,2837,2)
(2162,2545,2)
(1871,2910,2)
(1727,2348,2)
(2808,2676,2)
(1409,102,2)
(1857,1647,2)
(2189,2356,2)
(896,1753,2)
(2767,2345,2)
(2901,2972,2)
(2607,1349,2)
(1630,498,2)
(2340,1700,2)
(3039,2356,2)
(2925,595,2)
(876,1530,2)
(732,2642,2)
(710,1160,2)
(2998,941,2)
(718,1274,2)
(1228,2642,2)
(845,627,2)
(1268,17,2)
(2700,2286,2)
(117,2480,2)
(1781,3014,2)
(1351,2519,2)
(926,499,2)
(1326,1074,2)
(1935,2972,2)
(2435,993,2)
(1449,1411,2)
(2317,2971,2)
(2475,457,2)
(1849,950,2)
(560,1274,2)
(1581,1671,2)
(127,1904,2)
(2013,2545,2)
(2555,1700,2)
(597,1658,2)
(2278,2910,2)
(1581,2931,2)
(2317,980,2)
(1999,838,2)
(1860,472,2)
(1263,1700,2)
(560,2356,2)
(2693,2356,2)
(630,2972,2)
(126,1074,2)
(2686,630,2)
(2247,2726,2)
(569,1349,2)
(2960,345,2)
(439,1511,2)
(1860,685,2)
(798,1794,2)
(366,2356,2)
(2607,545,2)
(126,17,2)
(2539,2356,2)
(2586,2804,2)
(1330,1946,2)
(329,1875,2)
(637,2394,2)
(1573,2833,2)
(977,2984,2)
(1952,399,2)
(1503,1972,2)
(1583,2582,2)
(1822,1946,2)
(1444,731,2)
(2807,2650,2)
(105,1700,2)
(2759,685,2)
(2650,2139,2)
(2223,2110,2)
(1891,2345,2)
(354,165,2)
(129,755,2)
(1477,1124,2)
(977,1343,2)
(1377,1700,2)
(2650,685,2)
(2650,1692,2)
(345,741,2)
(2517,2493,2)
(2543,595,2)
(2946,2519,2)
(1904,1274,2)
(2759,1156,2)
(1389,950,2)
(1532,1700,2)
(1815,327,2)
(2551,726,2)
(1577,2984,2)
(2015,2356,2)
(1687,1634,2)
(2631,2500,2)
(2341,1700,2)
(2713,2779,2)
(2356,2843,2)
(977,642,2)
(117,2755,2)
(977,755,2)
(2943,1953,2)
(510,2972,2)
(1246,1751,2)
(3,1274,2)
(31,2931,2)
(1310,1274,2)
(1935,630,2)
(652,2947,2)
(329,801,2)
(2432,2931,2)
(3004,1476,2)
(2702,209,2)
(700,2910,2)
(1421,69,2)
(1560,2356,2)
(640,2087,2)
(2009,3025,2)
(525,2356,2)
(1315,1745,2)
(3035,2676,2)
(1800,2895,2)
(2317,685,2)
(49,1274,2)
(2317,2885,2)
(771,2640,2)
(215,839,2)
(1272,1274,2)
(954,1671,2)
(1089,1577,2)
(2330,2110,2)
(1315,1946,2)
(399,1434,2)
(1316,1751,2)
(1967,1067,2)
(1603,515,2)
(1724,1195,2)
(689,210,2)
(1657,2794,2)
(2650,912,2)
(2332,2642,2)
(1586,892,2)
(2631,2843,2)
(2893,2233,2)
(1326,2441,2)
(126,402,2)
(1963,1686,2)
(1950,1568,2)
(2317,2745,2)
(2964,2755,2)
(1310,2972,2)
(839,1842,2)
(1105,642,2)
(2848,3002,2)
(667,1700,2)
(2867,515,2)
(2159,941,2)
(2787,2110,2)
(2658,2972,2)
(2096,1842,2)
(1315,2943,2)
(2964,1417,2)
(2417,741,2)
(120,927,2)
(164,642,2)
(354,2935,2)
(2515,2552,2)
(2097,2375,2)
(2146,2972,2)
(1805,2910,2)
(2040,2947,2)
(2066,908,2)
(2664,1411,2)
(1479,2493,2)
(584,755,2)
(910,643,2)
(302,2640,2)
(1646,2676,2)
(1911,2512,2)
(342,17,2)
(2935,1700,2)
(1449,2984,2)
(1950,1074,2)
(1915,850,2)
(410,596,2)
(1281,1700,2)
(1811,1274,2)
(2015,2972,2)
(2263,1700,2)
(1635,57,2)
(870,731,2)
(1815,2921,2)
(1228,2640,2)
(2959,1701,2)
(2382,1105,2)
(2102,1700,2)
(2271,1874,2)
(125,1618,2)
(1474,2087,2)
(1589,948,2)
(342,499,2)
(1759,1410,2)
(2543,2128,2)
(1815,149,2)
(2130,2745,2)
(1085,1274,2)
(907,2859,2)
(757,1700,2)
(1992,706,2)
(329,1530,2)
(1599,2641,2)
(1851,2988,2)
(1617,2330,2)
(955,1901,2)
(1822,1474,2)
(796,2984,2)
(1741,2843,2)
(1871,419,2)
(2143,2910,2)
(700,1658,2)
(1070,2050,2)
(195,102,2)
(1741,499,2)
(584,1105,2)
(2203,706,2)
(1933,1658,2)
(2530,1700,2)
(2236,1570,2)
(3021,880,2)
(748,642,2)
(2158,1842,2)
(896,2500,2)
(2341,1162,2)
(664,993,2)
(2055,1901,2)
(2650,107,2)
(2427,2286,2)
(1381,876,2)
(2818,1658,2)
(1031,464,2)
(1906,1184,2)
(357,759,2)
(2719,2910,2)
(1657,1671,2)
(229,2872,2)
(2650,1056,2)
(2964,44,2)
(1214,137,2)
(1693,2972,2)
(2972,2777,2)
(2385,2148,2)
(1285,499,2)
(764,2972,2)
(2271,2233,2)
(343,1528,2)
(134,1931,2)
(1751,1865,2)
(117,906,2)
(2607,1124,2)
(904,2542,2)
(734,2519,2)
(1960,3011,2)
(547,1700,2)
(126,2222,2)
(2833,1534,2)
(2209,1577,2)
(2342,2931,2)
(1068,499,2)
(2865,706,2)
(2956,2753,2)
(2393,1671,2)
(1315,1974,2)
(547,2676,2)
(1495,11,2)
(2010,1534,2)
(2398,211,2)
(2705,2305,2)
(740,1195,2)
(1473,1948,2)
(1363,1434,2)
(2154,2676,2)
(311,1577,2)
(1608,1657,2)
(1236,140,2)
(2562,2356,2)
(3022,498,2)
(2240,2865,2)
(2487,1072,2)
(1124,1476,2)
(227,1274,2)
(1180,2500,2)
(2953,2650,2)
(420,755,2)
(874,2082,2)
(2880,1700,2)
(2556,1700,2)
(1658,2493,2)
(1493,1658,2)
(2551,2139,2)
(1822,1874,2)
(2571,1162,2)
(329,1634,2)
(2893,377,2)
(131,1700,2)
(279,2984,2)
(2568,1348,2)
(2720,1160,2)
(1786,1377,2)
(27,1996,2)
(2893,165,2)
(1815,2048,2)
(1815,1013,2)
(685,1274,2)
(289,1842,2)
(1862,54,2)
(2077,2809,2)
(1566,3009,2)
(117,1874,2)
(2631,1534,2)
(265,2947,2)
(2551,2447,2)
(1260,11,2)
(129,117,2)
(1449,755,2)
(2953,2947,2)
(876,187,2)
(2809,1530,2)
(1720,460,2)
(1330,1013,2)
(1228,2931,2)
(1996,84,2)
(860,1534,2)
(329,110,2)
(2393,2642,2)
(2993,2635,2)
(354,2885,2)
(117,2256,2)
(580,2715,2)
(264,2947,2)
(2639,268,2)
(2759,2943,2)
(950,2423,2)
(866,2274,2)
(2759,1900,2)
(2722,1526,2)
(1749,301,2)
(811,2356,2)
(1385,3037,2)
(1162,2256,2)
(1860,1407,2)
(2809,1946,2)
(926,818,2)
(2759,2745,2)
(2336,1658,2)
(1843,2143,2)
(69,2143,2)
(494,3000,2)
(1822,898,2)
(126,371,2)
(979,1541,2)
(1503,1856,2)
(799,2790,2)
(2893,327,2)
(209,2809,2)
(2022,1378,2)
(1207,1160,2)
(1330,2458,2)
(1860,1972,2)
(1687,2935,2)
(2843,1871,2)
(1477,17,2)
(2074,317,2)
(117,726,2)
(2631,1124,2)
(516,121,2)
(211,503,2)
(1073,1700,2)
(144,2931,2)
(586,2493,2)
(916,2552,2)
(2649,1050,2)
(2257,892,2)
(555,82,2)
(647,876,2)
(912,457,2)
(1723,57,2)
(329,1972,2)
(2148,1927,2)
(117,165,2)
(1477,499,2)
(2988,1842,2)
(950,1195,2)
(1698,681,2)
(1937,289,2)
(876,2256,2)
(916,2931,2)
(329,2930,2)
(1369,1085,2)
(3011,2167,2)
(289,705,2)
(771,2642,2)
(2930,1904,2)
(480,2676,2)
(329,256,2)
(2893,1013,2)
(1822,1137,2)
(876,17,2)
(670,211,2)
(993,2356,2)
(2859,1478,2)
(1265,463,2)
(2332,2931,2)
(1503,165,2)
(2938,2972,2)
(2614,1700,2)
(126,1972,2)
(2094,1410,2)
(1471,2650,2)
(1356,2511,2)
(1503,3041,2)
(279,1511,2)
(375,1274,2)
(2052,196,2)
(1503,2048,2)
(1753,1700,2)
(329,2885,2)
(1526,224,2)
(2163,289,2)
(1921,2865,2)
(1186,2167,2)
(784,2286,2)
(1860,327,2)
(2473,814,2)
(1326,1349,2)
(166,950,2)
(297,1700,2)
(2423,2763,2)
(961,2272,2)
(34,2253,2)
(2720,2947,2)
(965,2511,2)
(1315,2755,2)
(463,2910,2)
(1152,2947,2)
(2650,211,2)
(132,1751,2)
(2995,2910,2)
(1394,514,2)
(233,2379,2)
(117,898,2)
(1955,2356,2)
(605,2676,2)
(412,2192,2)
(84,1324,2)
(24,950,2)
(2467,1411,2)
(117,107,2)
(1996,11,2)
(1180,2699,2)
(576,2158,2)
(2650,371,2)
(86,1658,2)
(1822,1972,2)
(2467,642,2)
(1439,2947,2)
(1285,17,2)
(1270,1538,2)
(610,78,2)
(1326,2674,2)
(2809,596,2)
(1730,2272,2)
(652,1658,2)
(1786,596,2)
(2237,755,2)
(1162,1686,2)
(1741,1526,2)
(1532,1577,2)
(1895,1700,2)
(2393,2110,2)
(1815,2935,2)
(1248,1658,2)
(1832,1700,2)
(710,117,2)
(2607,1377,2)
(2130,44,2)
(2115,228,2)
(2864,595,2)
(2912,1593,2)
(835,2972,2)
(134,1904,2)
(2061,1700,2)
(1281,1671,2)
(2345,498,2)
(2019,1378,2)
(90,1948,2)
(2320,2519,2)
(2394,1700,2)
(939,2972,2)
(332,1700,2)
(1348,583,2)
(2130,2588,2)
(2893,1856,2)
(516,2112,2)
(1315,2174,2)
(1795,1526,2)
(1603,876,2)
(354,2930,2)
(1652,1700,2)
(117,2343,2)
(344,1700,2)
(2995,2272,2)
(2317,1530,2)
(1499,2552,2)
(1273,1913,2)
(598,993,2)
(342,2843,2)
(129,1105,2)
(1812,2947,2)
(1127,2356,2)
(2021,2910,2)
(319,2110,2)
(2577,1700,2)
(2650,906,2)
(1332,2699,2)
(1315,685,2)
(324,2989,2)
(300,433,2)
(1553,2552,2)
(1778,1526,2)
(2653,2781,2)
(1388,2910,2)
(1441,1700,2)
(1745,2356,2)
(1148,160,2)
(1330,1377,2)
(1644,2676,2)
(876,327,2)
(2814,137,2)
(2968,1954,2)
(955,1686,2)
(2951,2676,2)
(1859,2972,2)
(1950,2174,2)
(1089,705,2)
(2768,1658,2)
(1427,2356,2)
(2666,1676,2)
(2172,908,2)
(1304,1700,2)
(1481,744,2)
(2187,2800,2)
(1226,2272,2)
(2768,2947,2)
(667,1420,2)
(1192,2356,2)
(2897,2356,2)
(2724,1700,2)
(1315,1474,2)
(2174,1676,2)
(1495,1534,2)
(3027,2947,2)
(993,2972,2)
(1950,898,2)
(410,726,2)
(1260,1901,2)
(1822,2048,2)
(2237,642,2)
(1778,2500,2)
(329,2614,2)
(1658,383,2)
(1895,2650,2)
(329,1474,2)
(2317,1349,2)
(2682,2947,2)
(2130,1013,2)
(2785,1347,2)
(1451,1751,2)
(2650,1186,2)
(2785,2755,2)
(2663,345,2)
(1786,2441,2)
(1496,1363,2)
(2809,1186,2)
(1815,1417,2)
(1511,2490,2)
(2548,822,2)
(342,11,2)
(1823,1851,2)
(1221,1274,2)
(2652,2676,2)
(259,950,2)
(1396,719,2)
(1218,1658,2)
(410,402,2)
(2240,659,2)
(463,1658,2)
(2964,3041,2)
(126,1686,2)
(1786,2155,2)
(2397,2910,2)
(1950,1874,2)
(2551,3041,2)
(2036,1169,2)
(974,1862,2)
(2809,1745,2)
(1442,706,2)
(2812,2552,2)
(1162,1974,2)
(2272,1257,2)
(126,1349,2)
(1831,2326,2)
(1330,685,2)
(419,268,2)
(1503,2614,2)
(2722,2110,2)
(2571,876,2)
(1330,402,2)
(1592,498,2)
(246,1671,2)
(1162,1013,2)
(2893,2755,2)
(533,2356,2)
(2713,1946,2)
(2905,355,2)
(710,3016,2)
(1495,2642,2)
(969,2705,2)
(654,2859,2)
(505,2910,2)
(1268,499,2)
(1238,57,2)
(2641,2895,2)
(388,2931,2)
(1507,498,2)
(627,1494,2)
(705,643,2)
(859,2676,2)
(1927,1340,2)
(1950,256,2)
(1326,1946,2)
(1690,2895,2)
(2412,2972,2)
(2332,1671,2)
(1786,1074,2)
(652,2843,2)
(2893,110,2)
(1326,2447,2)
(2511,1274,2)
(973,1701,2)
(1686,658,2)
(496,993,2)
(911,2910,2)
(1753,1931,2)
(581,1904,2)
(1333,2345,2)
(1332,1901,2)
(860,1913,2)
(1297,1657,2)
(1749,1566,2)
(809,950,2)
(1351,3002,2)
(1577,2640,2)
(2060,2356,2)
(2809,1692,2)
(203,1751,2)
(44,1953,2)
(2185,2326,2)
(2320,1124,2)
(2356,1526,2)
(2599,755,2)
(1180,1124,2)
(876,2519,2)
(429,2650,2)
(2964,2935,2)
(1860,1474,2)
(2785,1417,2)
(2964,1972,2)
(2964,1874,2)
(1687,1474,2)
(2722,642,2)
(2809,1056,2)
(354,2614,2)
(905,2753,2)
(1315,912,2)
(1330,898,2)
(647,1700,2)
(2943,289,2)
(2809,1900,2)
(1851,1361,2)
(1610,1054,2)
(2065,234,2)
(2774,876,2)
(1950,2930,2)
(1505,2910,2)
(2473,946,2)
(1014,1835,2)
(2720,1658,2)
(409,2640,2)
(1185,2831,2)
(329,1745,2)
(1162,377,2)
(2380,1658,2)
(2133,2804,2)
(1197,17,2)
(2393,2552,2)
(2607,2755,2)
(2253,1940,2)
(1643,2922,2)
(2607,1901,2)
(2273,2972,2)
(1911,722,2)
(56,1411,2)
(2126,2931,2)
(299,2984,2)
(977,1404,2)
(2612,2947,2)
(1795,17,2)
(1568,1963,2)
(1833,1935,2)
(215,69,2)
(873,1700,2)
(38,2640,2)
(2467,2640,2)
(126,1530,2)
(2900,1671,2)
(927,2512,2)
(1815,906,2)
(1586,838,2)
(1954,2997,2)
(2280,1657,2)
(687,1256,2)
(329,2837,2)
(1024,2143,2)
(1351,1476,2)
(2283,567,2)
(1587,1410,2)
(2479,2865,2)
(642,1476,2)
(283,121,2)
(622,731,2)
(167,1927,2)
(2924,1931,2)
(3031,1581,2)
(28,2239,2)
(2317,44,2)
(355,730,2)
(2218,755,2)
(976,234,2)
(1938,950,2)
(2893,402,2)
(1028,2082,2)
(344,1274,2)
(1362,2272,2)
(2809,2971,2)
(228,1618,2)
(3004,84,2)
(2396,880,2)
(1860,1137,2)
(67,344,2)
(473,223,2)
(2876,706,2)
(1332,1274,2)
(1822,2674,2)
(1180,2519,2)
(1585,2679,2)
(2240,2270,2)
(1841,1410,2)
(1860,980,2)
(1503,2222,2)
(2271,980,2)
(416,1954,2)
(1904,2356,2)
(1162,2155,2)
(1887,2790,2)
(1649,845,2)
(460,2280,2)
(2924,1700,2)
(1330,1056,2)
(2126,1105,2)
(2271,1013,2)
(2127,2328,2)
(1495,2699,2)
(1440,3037,2)
(117,468,2)
(778,2676,2)
(2650,1530,2)
(2223,1105,2)
(1822,327,2)
(1786,2067,2)
(2713,2174,2)
(463,445,2)
(2607,726,2)
(734,17,2)
(126,1692,2)
(1122,307,2)
(2607,2971,2)
(521,1347,2)
(1503,1960,2)
(82,456,2)
(1162,1884,2)
(2271,2935,2)
(2964,327,2)
(1322,1410,2)
(1687,1856,2)
(989,1700,2)
(2466,1700,2)
(1090,1658,2)
(853,1284,2)
(1561,1630,2)
(1224,1442,2)
(2342,1105,2)
(876,2447,2)
(2722,1686,2)
(1315,3041,2)
(2599,2640,2)
(1721,1700,2)
(728,1577,2)
(632,2916,2)
(345,1534,2)
(52,2030,2)
(410,468,2)
(1950,1856,2)
(1977,2984,2)
(1495,84,2)
(131,876,2)
(2397,2947,2)
(2613,1511,2)
(94,2356,2)
(1950,2222,2)
(2130,1186,2)
(1617,2984,2)
(2605,2947,2)
(1172,2286,2)
(1994,2676,2)
(796,2642,2)
(668,2128,2)
(126,1901,2)
(1950,685,2)
(1495,2552,2)
(319,642,2)
(896,2519,2)
(2878,2466,2)
(791,1671,2)
(2380,2947,2)
(1963,2500,2)
(876,2458,2)
(1503,2837,2)
(31,2984,2)
(2943,3000,2)
(867,3015,2)
(2297,642,2)
(2763,124,2)
(835,117,2)
(954,2110,2)
(569,3041,2)
(1815,2885,2)
(2607,1634,2)
(282,595,2)
(1687,1417,2)
(2039,460,2)
(20,2545,2)
(682,1347,2)
(1194,2972,2)
(2130,1530,2)
(2323,706,2)
(1326,256,2)
(513,488,2)
(522,2924,2)
(1260,499,2)
(757,1160,2)
(2794,1411,2)
(2347,841,2)
(1351,1581,2)
(2607,1686,2)
(1503,1745,2)
(2120,2637,2)
(1786,1960,2)
(164,2552,2)
(58,235,2)
(1366,319,2)
(1860,906,2)
(2110,1574,2)
(2372,2972,2)
(2706,595,2)
(636,2188,2)
(2809,2256,2)
(2140,319,2)
(1860,1960,2)
(3014,1700,2)
(1503,1900,2)
(111,1851,2)
(354,1074,2)
(1601,1373,2)
(2988,2143,2)
(2642,1511,2)
(1815,107,2)
(2828,1274,2)
(2461,941,2)
(2130,1972,2)
(2881,2637,2)
(876,110,2)
(1805,706,2)
(2055,1534,2)
(1687,912,2)
(1687,2233,2)
(498,2640,2)
(732,1671,2)
(409,2931,2)
(2551,256,2)
(1895,117,2)
(2123,2130,2)
(764,2356,2)
(1033,2251,2)
(2317,165,2)
(1786,2885,2)
(867,78,2)
(2964,1377,2)
(429,1160,2)
(1741,149,2)
(1330,2139,2)
(1260,1476,2)
(196,2809,2)
(1403,82,2)
(2650,1874,2)
(1635,2798,2)
(1358,2984,2)
(1417,1904,2)
(181,2127,2)
(703,1344,2)
(1617,642,2)
(1485,706,2)
(1156,1700,2)
(2964,1960,2)
(876,1526,2)
(117,3041,2)
(1402,1274,2)
(2237,1411,2)
(1571,289,2)
(2738,1195,2)
(2893,2174,2)
(1802,2621,2)
(2818,2947,2)
(3004,499,2)
(2336,2249,2)
(668,223,2)
(640,27,2)
(2592,2167,2)
(2537,1511,2)
(2152,1700,2)
(2130,256,2)
(126,2674,2)
(370,1676,2)
(2040,1658,2)
(3003,2242,2)
(157,1265,2)
(831,2867,2)
(2915,1545,2)
(1789,741,2)
(2969,1089,2)
(1200,601,2)
(2317,2155,2)
(1695,2910,2)
(1557,2917,2)
(410,472,2)
(2124,977,2)
(2650,2674,2)
(117,1056,2)
(2917,2676,2)
(1725,2702,2)
(1167,706,2)
(1786,2139,2)
(652,706,2)
(1786,1474,2)
(789,1954,2)
(265,1658,2)
(215,2143,2)
(2551,1901,2)
(2271,1745,2)
(1950,327,2)
(1950,2048,2)
(2382,1671,2)
(2964,1946,2)
(2379,385,2)
(1640,2984,2)
(962,2197,2)
(2824,3002,2)
(1090,2910,2)
(1652,1379,2)
(1427,1274,2)
(1860,2674,2)
(1020,2910,2)
(1560,1274,2)
(3039,2972,2)
(2580,117,2)
(2993,979,2)
(2675,1657,2)
(2809,2174,2)
(2989,2493,2)
(354,801,2)
(2809,1884,2)
(410,2885,2)
(1524,2895,2)
(3004,2843,2)
(533,860,2)
(2130,472,2)
(2631,2519,2)
(2130,165,2)
(1786,2837,2)
(708,595,2)
(260,513,2)
(1027,1931,2)
(354,1946,2)
(813,1532,2)
(354,2441,2)
(126,2588,2)
(306,1935,2)
(1162,187,2)
(1865,2607,2)
(2042,1700,2)
(1768,2226,2)
(2317,2614,2)
(1091,1658,2)
(1463,260,2)
(2713,2755,2)
(2809,1960,2)
(2021,706,2)
(2953,117,2)
(1654,1892,2)
(494,2676,2)
(2785,1074,2)
(864,362,2)
(2317,402,2)
(1503,377,2)
(332,289,2)
(631,2790,2)
(2175,2356,2)
(984,595,2)
(2722,3031,2)
(661,1700,2)
(1815,2745,2)
(120,2571,2)
(1382,2972,2)
(2964,110,2)
(211,2871,2)
(412,2096,2)
(2612,2910,2)
(50,2321,2)
(1822,377,2)
(1786,1875,2)
(1746,2947,2)
(2599,1411,2)
(1027,876,2)
(1701,755,2)
(696,1647,2)
(1070,741,2)
(1090,706,2)
(1330,1074,2)
(505,1700,2)
(1249,1338,2)
(2989,2428,2)
(2042,117,2)
(1229,2423,2)
(1162,2048,2)
(2848,993,2)
(1332,499,2)
(1545,2859,2)
(117,1692,2)
(2796,2110,2)
(2594,1274,2)
(410,1074,2)
(1330,3041,2)
(1245,1904,2)
(812,2895,2)
(289,1274,2)
(1776,2356,2)
(2634,2540,2)
(521,2493,2)
(2607,1875,2)
(1500,1274,2)
(2607,1856,2)
(2794,2642,2)
(901,2972,2)
(850,1594,2)
(2712,2511,2)
(303,1304,2)
(354,2174,2)
(410,1186,2)
(1207,1700,2)
(2785,1634,2)
(1815,256,2)
(1124,1526,2)
(2573,2676,2)
(2551,2837,2)
(1772,1511,2)
(1318,511,2)
(1879,2251,2)
(2541,1160,2)
(1117,1411,2)
(1260,1534,2)
(2194,2676,2)
(1312,1701,2)
(2990,1700,2)
(2727,1700,2)
(977,1105,2)
(2223,2931,2)
(2375,2129,2)
(1213,1274,2)
(193,57,2)
(1307,1380,2)
(2343,705,2)
(1871,1658,2)
(2809,327,2)
(2343,69,2)
(1653,2719,2)
(1209,895,2)
(1815,2480,2)
(2971,1954,2)
(782,2642,2)
(431,706,2)
(389,2356,2)
(569,256,2)
(1330,912,2)
(123,2859,2)
(2251,237,2)
(1068,642,2)
(501,2082,2)
(410,2480,2)
(1094,1274,2)
(1687,2048,2)
(774,2149,2)
(129,1160,2)
(342,84,2)
(2530,2343,2)
(122,876,2)
(2555,1420,2)
(830,2947,2)
(389,2972,2)
(2470,1877,2)
(1640,2642,2)
(2330,1214,2)
(473,2676,2)
(1326,1013,2)
(2650,1568,2)
(2466,2809,2)
(2130,371,2)
(445,1931,2)
(1786,1349,2)
(1662,3005,2)
(2929,2345,2)
(2028,259,2)
(569,1074,2)
(1950,44,2)
(1315,1875,2)
(1568,1953,2)
(2271,898,2)
(2397,2553,2)
(441,2676,2)
(2518,1303,2)
(2291,579,2)
(850,1963,2)
(1219,1963,2)
(1217,1534,2)
(354,2458,2)
(2317,2222,2)
(1124,1901,2)
(2581,1610,2)
(1326,107,2)
(2296,1990,2)
(1778,1901,2)
(2019,137,2)
(987,2676,2)
(671,515,2)
(3004,17,2)
(1765,86,2)
(636,2356,2)
(2900,642,2)
(27,743,2)
(548,2540,2)
(1776,2972,2)
(1326,1137,2)
(759,1293,2)
(2195,1379,2)
(2902,2545,2)
(157,703,2)
(1384,2910,2)
(2759,1474,2)
(2893,2458,2)
(2130,2614,2)
(1123,2812,2)
(2773,117,2)
(329,898,2)
(2317,596,2)
(2044,2356,2)
(652,17,2)
(1088,595,2)
(1985,1511,2)
(709,1224,2)
(876,2943,2)
(2152,149,2)
(1477,1214,2)
(2747,2737,2)
(1323,2272,2)
(1483,1490,2)
(2796,2640,2)
(2650,2174,2)
(1292,1511,2)
(1618,1686,2)
(1721,838,2)
(2428,2493,2)
(2964,1676,2)
(569,377,2)
(2607,107,2)
(322,312,2)
(321,2343,2)
(852,1566,2)
(329,377,2)
(2713,1900,2)
(822,1700,2)
(2423,158,2)
(101,1700,2)
(2743,2947,2)
(2334,1676,2)
(2505,2356,2)
(1272,2356,2)
(868,1880,2)
(2493,1701,2)
(1897,1576,2)
(1397,1700,2)
(1667,841,2)
(876,1156,2)
(1326,1745,2)
(329,468,2)
(2594,2871,2)
(1330,187,2)
(445,2947,2)
(1195,950,2)
(2746,2493,2)
(2342,2552,2)
(887,317,2)
(2938,1274,2)
(621,941,2)
(155,2972,2)
(1180,1686,2)
(1950,1349,2)
(2809,57,2)
(549,375,2)
(2796,2642,2)
(1963,1534,2)
(2818,2910,2)
(126,2048,2)
(205,2972,2)
(1124,499,2)
(3031,2110,2)
(2607,1407,2)
(2922,977,2)
(1170,1265,2)
(2713,2837,2)
(1815,685,2)
(2809,472,2)
(862,2857,2)
(2650,2930,2)
(80,1700,2)
(2972,2356,2)
(1207,2650,2)
(2109,1534,2)
(302,2931,2)
(1125,2950,2)
(1027,1162,2)
(463,2947,2)
(2261,2356,2)
(1603,1610,2)
(661,1420,2)
(1844,1093,2)
(1162,1946,2)
(2893,1745,2)
(1503,2067,2)
(2556,1678,2)
(2607,377,2)
(2107,2972,2)
(590,1700,2)
(1822,1960,2)
(1068,11,2)
(1949,2326,2)
(2304,941,2)
(1087,135,2)
(1458,961,2)
(569,726,2)
(2916,1700,2)
(989,2087,2)
(2551,1874,2)
(3031,977,2)
(2785,2930,2)
(243,1105,2)
(1503,2480,2)
(642,1901,2)
(312,1844,2)
(896,1538,2)
(209,117,2)
(1215,1658,2)
(944,880,2)
(409,2552,2)
(1457,2530,2)
(1162,2885,2)
(3031,1671,2)
(2478,706,2)
(307,2010,2)
(1468,78,2)
(1162,1568,2)
(2281,1105,2)
(2551,1745,2)
(2794,2110,2)
(1169,1700,2)
(608,117,2)
(1281,2110,2)
(1864,1657,2)
(1843,69,2)
(2893,726,2)
(1496,1700,2)
(2271,1137,2)
(756,2676,2)
(1687,1960,2)
(31,1411,2)
(2773,1160,2)
(1162,1124,2)
(1860,468,2)
(1786,2588,2)
(1384,2947,2)
(951,374,2)
(517,131,2)
(805,2251,2)
(22,2286,2)
(734,2843,2)
(2635,1429,2)
(122,2895,2)
(2759,1874,2)
(2888,2331,2)
(157,17,2)
(1950,2921,2)
(2964,2222,2)
(353,1701,2)
(2271,1074,2)
(410,107,2)
(647,2010,2)
(210,1059,2)
(2964,2233,2)
(1192,1274,2)
(2982,810,2)
(2895,1658,2)
(2729,950,2)
(1759,1587,2)
(393,2910,2)
(2108,1700,2)
(247,58,2)
(436,2947,2)
(2021,1658,2)
(117,377,2)
(1209,659,2)
(2622,978,2)
(122,1931,2)
(429,2809,2)
(1827,1671,2)
(1815,1526,2)
(1959,1904,2)
(399,1913,2)
(1860,2921,2)
(569,2614,2)
(2877,2251,2)
(705,1842,2)
(2317,1056,2)
(329,1874,2)
(2854,460,2)
(2377,941,2)
(354,1972,2)
(1581,2640,2)
(1380,216,2)
(955,2815,2)
(1950,1692,2)
(1311,1700,2)
(2114,1701,2)
(2687,2881,2)
(135,2910,2)
(290,2356,2)
(1198,2010,2)
(1860,2779,2)
(2791,1378,2)
(1795,2843,2)
(1673,1940,2)
(1400,498,2)
(2964,1013,2)
(410,1407,2)
(1390,2630,2)
(2271,1946,2)
(2893,1074,2)
(1905,2947,2)
(2607,2447,2)
(1881,137,2)
(2588,460,2)
(1583,2493,2)
(67,2972,2)
(2152,2356,2)
(116,741,2)
(1330,165,2)
(1696,2540,2)
(131,515,2)
(1162,472,2)
(2317,1568,2)
(2883,2729,2)
(975,2972,2)
(1509,1274,2)
(43,838,2)
(2137,289,2)
(211,839,2)
(1330,1568,2)
(878,78,2)
(2607,1156,2)
(2478,2947,2)
(1860,84,2)
(595,2972,2)
(10,2582,2)
(2130,2755,2)
(1950,1530,2)
(1860,1476,2)
(540,642,2)
(2674,595,2)
(2541,1700,2)
(2693,2972,2)
(410,44,2)
(2387,895,2)
(319,2519,2)
(1687,1946,2)
(787,1410,2)
(3041,1700,2)
(2030,1085,2)
(1264,2186,2)
(2893,1530,2)
(593,1815,2)
(2543,2167,2)
(1285,1901,2)
(357,3009,2)
(2852,933,2)
(1659,659,2)
(2089,234,2)
(3012,2972,2)
(126,1884,2)
(1617,1411,2)
(119,2763,2)
(2988,69,2)
(2525,1902,2)
(157,1901,2)
(174,2251,2)
(2964,1074,2)
(623,412,2)
(2053,804,2)
(2530,1162,2)
(1427,2972,2)
(126,685,2)
(3032,1701,2)
(299,2110,2)
(2551,499,2)
(1727,1655,2)
(2271,1349,2)
(56,2552,2)
(557,1700,2)
(2270,706,2)
(342,2500,2)
(2597,1408,2)
(732,2552,2)
(2158,69,2)
(1509,2356,2)
(1903,2947,2)
(1865,659,2)
(2382,755,2)
(354,107,2)
(2126,1411,2)
(1206,1657,2)
(1326,1568,2)
(256,2087,2)
(1845,2128,2)
(869,2110,2)
(1822,1634,2)
(2946,1534,2)
(1636,1617,2)
(2247,884,2)
(329,912,2)
(793,2642,2)
(1124,336,2)
(18,1185,2)
(597,2947,2)
(1162,1960,2)
(425,2286,2)
(1566,357,2)
(1072,1224,2)
(1283,117,2)
(1687,2588,2)
(536,1658,2)
(569,898,2)
(131,2831,2)
(1010,1577,2)
(2043,3000,2)
(2199,2630,2)
(2128,443,2)
(126,2755,2)
(1129,1577,2)
(2755,1953,2)
(1162,1530,2)
(86,2910,2)
(2320,2356,2)
(2893,801,2)
(329,2458,2)
(2330,2552,2)
(2592,2972,2)
(1634,1700,2)
(1162,2630,2)
(442,1700,2)
(1904,661,2)
(1741,2500,2)
(749,2630,2)
(455,630,2)
(766,916,2)
(957,162,2)
(569,1377,2)
(1029,2865,2)
(1503,2779,2)
(2472,1899,2)
(1860,2067,2)
(164,2984,2)
(410,2837,2)
(1657,2552,2)
(1346,2511,2)
(945,2910,2)
(624,941,2)
(1330,2222,2)
(876,596,2)
(2785,1530,2)
(567,839,2)
(2297,2552,2)
(1068,2519,2)
(1687,472,2)
(2331,1700,2)
(2320,2843,2)
(371,1736,2)
(2988,1873,2)
(2631,1901,2)
(342,1901,2)
(3013,1700,2)
(689,2525,2)
(1002,215,2)
(1239,1105,2)
(407,2356,2)
(961,1698,2)
(1687,44,2)
(268,706,2)
(428,2859,2)
(2198,2972,2)
(2909,2128,2)
(2881,2582,2)
(1854,1338,2)
(354,1137,2)
(2607,1476,2)
(2218,2931,2)
(2587,1195,2)
(1822,2139,2)
(1330,2588,2)
(2607,371,2)
(1559,1700,2)
(53,2128,2)
(2936,2356,2)
(2317,1946,2)
(126,2155,2)
(31,1105,2)
(1687,2614,2)
(2317,1972,2)
(2317,377,2)
(526,1700,2)
(10,2637,2)
(2882,643,2)
(1815,801,2)
(1162,1972,2)
(2365,2286,2)
(2070,1904,2)
(1260,149,2)
(858,2286,2)
(11,3015,2)
(1359,2947,2)
(1178,339,2)
(808,595,2)
(1217,319,2)
(126,377,2)
(27,595,2)
(2893,2614,2)
(196,2650,2)
(573,2865,2)
(2713,1417,2)
(796,1671,2)
(494,1700,2)
(354,1745,2)
(34,1511,2)
(2109,1526,2)
(821,1751,2)
(1099,2356,2)
(876,1960,2)
(2144,1274,2)
(1786,906,2)
(1687,2067,2)
(876,2174,2)
(61,3025,2)
(2526,1582,2)
(1629,2769,2)
(117,44,2)
(56,2931,2)
(2713,472,2)
(1315,1377,2)
(1774,2272,2)
(1221,2972,2)
(444,2545,2)
(1917,1340,2)
(126,3041,2)
(1976,2972,2)
(2881,2287,2)
(2441,659,2)
(2650,2755,2)
(2453,1862,2)
(1315,1407,2)
(1220,195,2)
(1093,515,2)
(2607,149,2)
(896,2843,2)
(2785,980,2)
(964,357,2)
(1162,1900,2)
(1315,1156,2)
(2963,260,2)
(2064,317,2)
(1860,2441,2)
(600,1904,2)
(498,1105,2)
(1901,1658,2)
(2809,44,2)
(2893,2745,2)
(2607,2155,2)
(1061,901,2)
(1162,801,2)
(1256,901,2)
(562,941,2)
(1004,1901,2)
(2624,595,2)
(1322,1700,2)
(1514,2630,2)
(32,2947,2)
(2785,1745,2)
(1687,2971,2)
(2492,2525,2)
(1750,941,2)
(458,1195,2)
(2631,1185,2)
(1699,345,2)
(925,2493,2)
(298,1954,2)
(1162,2519,2)
(3,2356,2)
(1657,2640,2)
(1815,1634,2)
(418,2710,2)
(2274,2375,2)
(2367,1842,2)
(246,2642,2)
(2551,2480,2)
(2514,1085,2)
(2193,2082,2)
(719,1927,2)
(15,2167,2)
(1228,2552,2)
(157,149,2)
(939,1274,2)
(1236,1307,2)
(2023,1609,2)
(2412,2356,2)
(977,1411,2)
(2151,1940,2)
(2222,1647,2)
(2232,460,2)
(614,1700,2)
(2701,1440,2)
(368,1332,2)
(1429,580,2)
(1526,345,2)
(2218,2984,2)
(1538,1129,2)
(954,642,2)
(2650,1349,2)
(1388,2947,2)
(1217,2519,2)
(1477,2500,2)
(2827,1260,2)
(1162,2699,2)
(2944,38,2)
(1576,1842,2)
(2204,2910,2)
(1315,1692,2)
(1160,857,2)
(881,137,2)
(983,2676,2)
(2271,1377,2)
(475,357,2)
(2480,1274,2)
(2964,107,2)
(1924,2343,2)
(1019,1751,2)
(2382,2640,2)
(2893,1474,2)
(1933,2947,2)
(1495,499,2)
(2607,3041,2)
(1395,375,2)
(1948,706,2)
(2278,2947,2)
(2816,2324,2)
(410,377,2)
(360,2910,2)
(3004,2699,2)
(1191,595,2)
(445,706,2)
(3014,215,2)
(3033,1274,2)
(2607,2885,2)
(2343,503,2)
(1503,2174,2)
(64,2676,2)
(2075,993,2)
(2759,2155,2)
(2713,2139,2)
(1691,1411,2)
(661,2356,2)
(776,1700,2)
(713,2286,2)
(2785,596,2)
(2139,2082,2)
(2551,165,2)
(2796,642,2)
(2713,2233,2)
(1012,310,2)
(2541,117,2)
(2055,1698,2)
(540,2809,2)
(2828,2972,2)
(117,1349,2)
(2317,1377,2)
(2317,726,2)
(498,642,2)
(1801,2972,2)
(876,898,2)
(279,1293,2)
(1139,2676,2)
(856,2272,2)
(354,1474,2)
(876,906,2)
(1553,1411,2)
(831,1174,2)
(240,135,2)
(445,515,2)
(2853,1473,2)
(2946,2993,2)
(2115,2519,2)
(1940,2177,2)
(2205,2511,2)
(1361,2988,2)
(2964,2139,2)
(990,1927,2)
(2170,2493,2)
(890,595,2)
(82,1274,2)
(358,2313,2)
(1620,2766,2)
(2642,2580,2)
(1837,2676,2)
(2024,528,2)
(698,2356,2)
(1475,1351,2)
(1566,29,2)
(1569,880,2)
(2130,726,2)
(2755,1904,2)
(898,2630,2)
(2551,371,2)
(2113,1700,2)
(243,1411,2)
(2809,545,2)
(1659,2270,2)
(2271,3041,2)
(841,1458,2)
(503,1842,2)
(1778,2843,2)
(1815,1476,2)
(570,1905,2)
(17,1170,2)
(869,755,2)
(2152,11,2)
(313,1581,2)
(1355,2356,2)
(1950,1474,2)
(1068,2699,2)
(2980,1658,2)
(2809,1377,2)
(1581,1411,2)
(2077,1160,2)
(2270,1658,2)
(383,1658,2)
(704,1618,2)
(1801,1274,2)
(2779,2545,2)
(2867,1931,2)
(488,1274,2)
(158,2024,2)
(2607,327,2)
(1207,117,2)
(2893,371,2)
(1778,1265,2)
(2393,1411,2)
(2779,2700,2)
(2914,1658,2)
(2296,1434,2)
(129,1411,2)
(2785,44,2)
(1381,515,2)
(470,2379,2)
(569,980,2)
(2211,901,2)
(1330,2779,2)
(354,1056,2)
(1512,2910,2)
(49,2356,2)
(2176,2552,2)
(2489,2815,2)
(926,1085,2)
(2271,1884,2)
(2796,2931,2)
(1682,2130,2)
(1869,2972,2)
(2807,1160,2)
(1224,1274,2)
(1325,1671,2)
(1822,107,2)
(543,1658,2)
(2807,1373,2)
(536,706,2)
(743,772,2)
(1640,2640,2)
(1326,110,2)
(2271,1634,2)
(2210,1658,2)
(156,2676,2)
(546,741,2)
(473,983,2)
(309,892,2)
(329,187,2)
(896,11,2)
(2462,1842,2)
(250,2676,2)
(1171,624,2)
(2828,2356,2)
(2964,2971,2)
(2666,1697,2)
(776,2650,2)
(126,2256,2)
(2964,468,2)
(1506,1265,2)
(1640,755,2)
(2325,1701,2)
(2785,1960,2)
(1315,1186,2)
(1505,2947,2)
(2952,1904,2)
(2130,2256,2)
(1138,2676,2)
(2413,1904,2)
(1529,2356,2)
(831,911,2)
(1021,2082,2)
(764,2272,2)
(1187,2899,2)
(2425,2356,2)
(1840,1577,2)
(1257,2340,2)
(567,2950,2)
(908,1939,2)
(2809,2067,2)
(1620,1700,2)
(1194,1274,2)
(496,1581,2)
(115,1559,2)
(354,1530,2)
(410,2345,2)
(1950,1900,2)
(1217,1476,2)
(1326,2048,2)
(1779,2511,2)
(2650,1745,2)
(2809,1974,2)
(1408,1954,2)
(2040,1700,2)
(291,1851,2)
(1968,1658,2)
(2447,2511,2)
(1332,17,2)
(254,2972,2)
(1338,1842,2)
(1860,2614,2)
(2534,1274,2)
(1283,2650,2)
(2271,912,2)
(876,107,2)
(243,2642,2)
(323,514,2)
(2632,614,2)
(873,2809,2)
(2131,2453,2)
(1028,1700,2)
(2453,2451,2)
(42,1087,2)
(2179,1954,2)
(1579,2972,2)
(1435,2676,2)
(896,1534,2)
(926,223,2)
(1414,941,2)
(1123,2272,2)
(126,1186,2)
(2859,2865,2)
(1358,1105,2)
(1815,3041,2)
(2158,2143,2)
(126,1013,2)
(780,1578,2)
(2686,1700,2)
(1645,2286,2)
(1335,1910,2)
(1335,2637,2)
(1786,1856,2)
(771,642,2)
(926,2167,2)
(2009,1566,2)
(416,1700,2)
(224,2622,2)
(580,950,2)
(420,2552,2)
(2785,165,2)
(2332,2552,2)
(336,1285,2)
(839,2143,2)
(1822,1074,2)
(919,2630,2)
(1397,117,2)
(165,595,2)
(2495,933,2)
(410,165,2)
(2713,1407,2)
(1399,1671,2)
(2332,642,2)
(1228,1105,2)
(1687,1156,2)
(227,2972,2)
(1950,2943,2)
(647,1931,2)
(307,2134,2)
(1345,2972,2)
(943,2676,2)
(377,993,2)
(1815,1692,2)
(354,1900,2)
(278,2988,2)
(1315,906,2)
(2809,1156,2)
(1827,755,2)
(1907,1160,2)
(1315,1884,2)
(183,1939,2)
(117,1568,2)
(2297,2640,2)
(1162,2222,2)
(2356,1124,2)
(540,1160,2)
(1838,2287,2)
(2271,1972,2)
(1822,801,2)
(1778,17,2)
(1268,920,2)
(2941,739,2)
(1180,1526,2)
(1963,2195,2)
(2720,1700,2)
(329,1013,2)
(2010,84,2)
(1393,135,2)
(117,2674,2)
(2497,160,2)
(2510,1293,2)
(1477,84,2)
(879,1185,2)
(2713,110,2)
(1432,1411,2)
(2203,2910,2)
(252,2988,2)
(2838,2356,2)
(1457,2343,2)
(2893,2674,2)
(1258,511,2)
(955,2519,2)
(410,1056,2)
(1089,2950,2)
(989,3000,2)
(2676,1274,2)
(2351,2676,2)
(2317,2458,2)
(876,2935,2)
(409,1105,2)
(113,2865,2)
(117,2222,2)
(1868,2356,2)
(56,2642,2)
(1330,1972,2)
(117,1377,2)
(89,2815,2)
(2082,1842,2)
(354,2082,2)
(487,595,2)
(2759,3041,2)
(1308,1274,2)
(2785,1349,2)
(1911,1610,2)
(691,1700,2)
(1832,2490,2)
(2230,3000,2)
(2509,2630,2)
(865,2676,2)
(1583,1347,2)
(1410,755,2)
(1180,84,2)
(2607,1568,2)
(1068,2931,2)
(1062,2972,2)
(2551,149,2)
(1284,317,2)
(1687,327,2)
(255,464,2)
(2672,1411,2)
(3031,2984,2)
(1332,1526,2)
(1330,1156,2)
(2356,2699,2)
(1318,1940,2)
(2607,402,2)
(2319,1954,2)
(2526,1715,2)
(2090,1701,2)
(1068,1526,2)
(288,1702,2)
(1205,1846,2)
(351,1274,2)
(1340,2878,2)
(299,1411,2)
(475,1566,2)
(2663,2853,2)
(2593,1700,2)
(2397,652,2)
(451,2676,2)
(544,1676,2)
(503,2950,2)
(1449,642,2)
(569,2048,2)
(224,2663,2)
(2014,993,2)
(2055,2843,2)
(1786,110,2)
(1861,1284,2)
(1786,377,2)
(2130,596,2)
(1860,1534,2)
(407,1274,2)
(1503,1974,2)
(2713,1874,2)
(2605,1658,2)
(876,685,2)
(2320,2500,2)
(1410,1411,2)
(1782,2345,2)
(126,1526,2)
(2306,2946,2)
(1159,234,2)
(2539,1274,2)
(1778,11,2)
(229,1700,2)
(2248,1700,2)
(2964,1137,2)
(2768,2910,2)
(2130,2971,2)
(2343,567,2)
(117,1974,2)
(2650,1884,2)
(2076,706,2)
(1860,1856,2)
(2130,107,2)
(1468,303,2)
(837,111,2)
(567,503,2)
(2809,1417,2)
(645,2439,2)
(2082,69,2)
(975,1274,2)
(2607,2930,2)
(2168,706,2)
(1311,1411,2)
(2893,2155,2)
(1950,1960,2)
(2305,2128,2)
(2487,1224,2)
(2271,906,2)
(1503,685,2)
(1503,1417,2)
(2789,17,2)
(854,880,2)
(1609,739,2)
(2271,726,2)
(3007,1274,2)
(2161,1024,2)
(1992,1658,2)
(2872,2812,2)
(222,1442,2)
(2607,84,2)
(2721,317,2)
(705,69,2)
(2607,165,2)
(1068,755,2)
(2685,595,2)
(2723,1185,2)
(2688,722,2)
(1993,2345,2)
(2650,2837,2)
(341,993,2)
(436,706,2)
(1001,706,2)
(1740,2895,2)
(117,256,2)
(1393,2927,2)
(3037,2110,2)
(975,2356,2)
(2369,741,2)
(626,2143,2)
(2580,2809,2)
(1883,345,2)
(2717,345,2)
(1495,755,2)
(1332,11,2)
(1196,2916,2)
(1426,317,2)
(1330,2048,2)
(0,345,2)
(1162,2837,2)
(2462,2641,2)
(1285,2519,2)
(1019,2859,2)
(2785,2745,2)
(1332,2972,2)
(329,107,2)
(2650,596,2)
(954,1411,2)
(301,2272,2)
(368,2356,2)
(1330,2930,2)
(2893,1974,2)
(2356,2345,2)
(1330,1856,2)
(1947,1657,2)
(78,303,2)
(2387,2270,2)
(1351,1534,2)
(679,111,2)
(2551,2458,2)
(639,1940,2)
(1553,2984,2)
(2050,198,2)
(2893,472,2)
(1687,2779,2)
(1162,1377,2)
(3029,880,2)
(1795,2423,2)
(2607,2921,2)
(1874,2972,2)
(2877,2272,2)
(2551,472,2)
(876,1686,2)
(1827,1411,2)
(1180,1476,2)
(1880,381,2)
(10,1910,2)
(2524,1700,2)
(2784,993,2)
(1310,2356,2)
(2271,2837,2)
(2953,2910,2)
(117,2921,2)
(1124,1686,2)
(1687,1013,2)
(205,2272,2)
(2162,2008,2)
(2910,684,2)
(423,2769,2)
(1859,1274,2)
(896,17,2)
(2629,741,2)
(224,345,2)
(2969,734,2)
(126,1974,2)
(2376,498,2)
(2372,1274,2)
(2607,2745,2)
(1741,2519,2)
(2631,1476,2)
(2124,2972,2)
(128,2804,2)
(593,659,2)
(1523,1658,2)
(1109,2313,2)
(1117,2984,2)
(1067,2004,2)
(1410,1671,2)
(1383,345,2)
(2656,2375,2)
(706,2910,2)
(312,706,2)
(2330,137,2)
(1687,2943,2)
(2421,2910,2)
(1860,2588,2)
(710,2809,2)
(1717,1871,2)
(126,1568,2)
(748,2640,2)
(2217,2356,2)
(1475,595,2)
(1827,642,2)
(902,1931,2)
(280,2385,2)
(2909,2545,2)
(1495,1124,2)
(2853,345,2)
(1786,2480,2)
(2809,912,2)
(1379,2871,2)
(246,2931,2)
(271,706,2)
(157,1913,2)
(2551,1634,2)
(2607,1074,2)
(1404,2888,2)
(2539,2972,2)
(2109,1686,2)
(2948,1498,2)
(1753,1162,2)
(1674,460,2)
(2551,1526,2)
(1068,1411,2)
(1121,82,2)
(1094,2972,2)
(748,2110,2)
(319,2984,2)
(2279,2356,2)
(329,2233,2)
(967,58,2)
(2317,2930,2)
(1326,1474,2)
(129,2642,2)
(1866,260,2)
(434,857,2)
(1125,2143,2)
(2650,2588,2)
(1326,3041,2)
(1469,2800,2)
(1778,1476,2)
(673,368,2)
(2467,1105,2)
(2550,82,2)
(1860,1124,2)
(164,2110,2)
(3027,1658,2)
(1403,2650,2)
(381,1357,2)
(1351,2843,2)
(1449,1671,2)
(1786,2447,2)
(1464,2197,2)
(1324,313,2)
(2341,1931,2)
(1018,838,2)
(2132,901,2)
(1211,933,2)
(1490,1162,2)
(2820,1274,2)
(354,1634,2)
(1388,706,2)
(2826,2895,2)
(880,624,2)
(1687,898,2)
(2229,1700,2)
(1162,468,2)
(1963,499,2)
(1815,44,2)
(616,2490,2)
(1503,234,2)
(293,2910,2)
(556,2630,2)
(2356,1901,2)
(2191,2453,2)
(2195,72,2)
(1432,79,2)
(572,2630,2)
(2737,2895,2)
(410,1745,2)
(1455,2197,2)
(1721,722,2)
(1657,2984,2)
(2722,17,2)
(2246,357,2)
(1687,2480,2)
(882,2910,2)
(820,460,2)
(2785,2233,2)
(329,1137,2)
(834,2972,2)
(329,44,2)
(2853,1699,2)
(869,2931,2)
(1815,1884,2)
(2809,2480,2)
(2093,3017,2)
(1952,1842,2)
(2980,2947,2)
(41,1516,2)
(1499,1671,2)
(385,1774,2)
(1671,2931,2)
(906,2128,2)
(1798,595,2)
(1802,2910,2)
(82,2356,2)
(530,2859,2)
(1330,596,2)
(420,642,2)
(851,908,2)
(2299,950,2)
(1686,1751,2)
(652,1476,2)
(2775,739,2)
(869,2984,2)
(2297,755,2)
(926,2843,2)
(329,327,2)
(2271,1474,2)
(1786,2755,2)
(117,1946,2)
(243,2931,2)
(2288,3033,2)
(1814,2790,2)
(569,1634,2)
(1509,515,2)
(642,2490,2)
(977,2552,2)
(1339,1647,2)
(329,1900,2)
(3028,918,2)
(1774,2197,2)
(2563,2910,2)
(1330,2755,2)
(2940,2863,2)
(2336,2914,2)
(2964,371,2)
(1299,3025,2)
(2964,187,2)
(657,1592,2)
(2607,1013,2)
(2893,906,2)
(1990,2272,2)
(1795,1541,2)
(1822,110,2)
(1449,2640,2)
(2371,1085,2)
(1913,2859,2)
(289,69,2)
(1477,149,2)
(1687,2885,2)
(2722,2642,2)
(157,499,2)
(124,2763,2)
(1732,460,2)
(1330,706,2)
(1869,1274,2)
(508,1610,2)
(1326,2480,2)
(2641,1197,2)
(1162,84,2)
(126,980,2)
(2713,1634,2)
(2536,1658,2)
(2681,297,2)
(2785,377,2)
(2466,38,2)
(691,1105,2)
(117,1417,2)
(2223,1411,2)
(589,433,2)
(918,2356,2)
(1242,2676,2)
(1786,1568,2)
(1503,2674,2)
(2571,1700,2)
(1770,2833,2)
(498,2931,2)
(1503,1875,2)
(1950,165,2)
(926,2699,2)
(1484,2345,2)
(1326,1530,2)
(1778,941,2)
(1269,517,2)
(1802,706,2)
(1892,2676,2)
(1860,2755,2)
(1365,2972,2)
(2506,1700,2)
(896,499,2)
(329,2971,2)
(1899,1935,2)
(1815,2441,2)
(2759,1013,2)
(2701,1264,2)
(117,980,2)
(1944,2854,2)
(2130,1745,2)
(2910,1200,2)
(2733,3033,2)
(1822,1377,2)
(2271,1875,2)
(569,44,2)
(2236,2785,2)
(1682,1700,2)
(2130,2155,2)
(1281,2931,2)
(140,1307,2)
(834,2356,2)
(876,2921,2)
(1790,222,2)
(364,1577,2)
(2650,801,2)
(319,2843,2)
(2551,1974,2)
(2135,412,2)
(2108,2972,2)
(569,1156,2)
(1443,2676,2)
(1996,2519,2)
(30,1538,2)
(489,1939,2)
(1176,1434,2)
(357,1293,2)
(1809,1700,2)
(2719,706,2)
(2562,2972,2)
(2903,2124,2)
(856,2197,2)
(1067,1511,2)
(410,685,2)
(295,1657,2)
(1822,596,2)
(2713,2048,2)
(1822,2921,2)
(2637,2345,2)
(2063,1379,2)
(584,642,2)
(237,2379,2)
(1326,2139,2)
(2409,1701,2)
(1315,2935,2)
(2594,705,2)
(2393,642,2)
(410,1900,2)
(1331,1700,2)
(2777,366,2)
(732,2640,2)
(959,2807,2)
(107,223,2)
(655,1618,2)
(1900,2035,2)
(2759,1377,2)
(1089,69,2)
(1370,375,2)
(2561,941,2)
(2320,149,2)
(1197,1476,2)
(2221,2931,2)
(3016,69,2)
(906,223,2)
(38,1442,2)
(1860,2745,2)
(2440,3033,2)
(2053,2741,2)
(2713,3041,2)
(744,2676,2)
(2343,1842,2)
(2604,57,2)
(765,1700,2)
(2914,2910,2)
(2160,234,2)
(2258,2972,2)
(164,2931,2)
(634,933,2)
(2900,1411,2)
(2964,912,2)
(179,741,2)
(2607,1474,2)
(2051,2356,2)
(1978,2972,2)
(302,2552,2)
(449,750,2)
(2503,2564,2)
(2271,377,2)
(2178,2947,2)
(1985,1772,2)
(2693,1274,2)
(1154,941,2)
(1060,1577,2)
(2650,1974,2)
(2759,371,2)
(1874,2356,2)
(1967,1442,2)
(1190,2216,2)
(1694,1511,2)
(634,1700,2)
(1359,765,2)
(56,2110,2)
(1984,2833,2)
(2650,2067,2)
(2993,1195,2)
(302,755,2)
(1315,2458,2)
(2083,941,2)
(1822,2256,2)
(1872,1085,2)
(627,2272,2)
(2713,2971,2)
(569,2930,2)
(792,1618,2)
(1987,2345,2)
(2153,2552,2)
(2773,2809,2)
(1754,706,2)
(196,1701,2)
(2699,1750,2)
(954,2640,2)
(599,2128,2)
(2345,2128,2)
(2077,1700,2)
(1285,739,2)
(2964,2921,2)
(1417,1953,2)
(705,839,2)
(1913,123,2)
(1162,2480,2)
(2722,1671,2)
(2251,2379,2)
(1617,2931,2)
(1471,2809,2)
(2130,1884,2)
(2751,1293,2)
(2343,839,2)
(342,1124,2)
(2923,2972,2)
(1197,2843,2)
(1856,2345,2)
(1315,1900,2)
(748,2642,2)
(1503,2921,2)
(755,1311,2)
(2472,1442,2)
(2294,2246,2)
(882,706,2)
(876,2500,2)
(2910,2306,2)
(1687,980,2)
(1823,111,2)
(510,1859,2)
(1268,149,2)
(2785,2480,2)
(681,58,2)
(2481,1260,2)
(788,1217,2)
(1902,941,2)
(1285,2500,2)
(2964,1692,2)
(1488,1701,2)
(117,2943,2)
(2281,2931,2)
(2785,2674,2)
(3031,2931,2)
(1273,1751,2)
(2974,1195,2)
(2590,2375,2)
(2631,499,2)
(1875,2226,2)
(454,82,2)
(505,117,2)
(1468,1214,2)
(15,2972,2)
(1499,2931,2)
(54,2272,2)
(2785,2971,2)
(1410,2984,2)
(2650,327,2)
(2271,2943,2)
(1315,2256,2)
(2434,2676,2)
(2126,2642,2)
(1238,1160,2)
(1581,2552,2)
(44,595,2)
(1379,503,2)
(354,1974,2)
(409,2984,2)
(2713,160,2)
(2948,156,2)
(12,1618,2)
(2650,472,2)
(2607,2943,2)
(2994,2972,2)
(222,1899,2)
(2393,1105,2)
(1538,1577,2)
(989,1953,2)
(2754,1700,2)
(2466,2650,2)
(410,2943,2)
(569,2067,2)
(1821,1940,2)
(1026,706,2)
(136,268,2)
(1503,906,2)
(2759,1407,2)
(2448,2790,2)
(569,1972,2)
(2661,1195,2)
(1165,1931,2)
(2490,2910,2)
(1577,642,2)
(1332,2356,2)
(1326,1634,2)
(732,1411,2)
(2642,2984,2)
(342,149,2)
(2096,2143,2)
(1674,820,2)
(1553,755,2)
(1487,1260,2)
(1285,1476,2)
(329,2745,2)
(748,2552,2)
(2412,1274,2)
(2530,1931,2)
(354,1874,2)
(882,2947,2)
(2794,2931,2)
(1815,1530,2)
(1850,121,2)
(1468,1378,2)
(2945,512,2)
(1335,2287,2)
(2823,2972,2)
(2329,312,2)
(2594,2972,2)
(2286,2972,2)
(1936,2972,2)
(117,801,2)
(1316,2859,2)
(553,2859,2)
(1945,2947,2)
(1398,2895,2)
-----------------------------------
(0,cwin)
(1,if (tp->t_flags & TF_ACKNOW)
(2,TH_FIN)
(3,m)
(4,sbreserve_locked(&so->so_snd,\n\\n\\t\\t\\t    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,\n\\n\\t\\t\\t     V_tcp_autosndbuf_max)
(5,sack_bytes_rxmt)
(6,just_return:)
(7,t_inpcb)
(8,tp->snd_max)
(9,to)
(10,tp->t_softerror = error)
(11,len = max_len)
(12,len)
(13,len)
(14,)
(15,m_length(m, NULL)
(16,)
(17,len = ((long)
(18,tp)
(19,hdrlen)
(20,save)
(21,th)
(22,tp)
(23,if (tp->t_flags & TF_NEEDFIN)
(24,frags)
(25,TCP_MAXWIN)
(26,so)
(27,sizeof(struct tcphdr)
(28,ipov->ih_len = save)
(29,(long)
(30,tp)
(31,so->so_snd)
(32,TF_LASTIDLE)
(33,0)
(34,oldwin >> tp->rcv_scale)
(35,)
(36,flags)
(37,sb_flags)
(38,recwin > 0)
(39,ih_len)
(40,if (tp->t_flags & TF_SIGNATURE)
(41,SOCKBUF_UNLOCK(&so->so_snd)
(42,sb_hiwat)
(43,tp)
(44,th->th_sum)
(45,ro)
(46,)
(47,th->th_sum = in6_cksum_pseudo(ip6, sizeof(struct tcphdr)
(48,if (sack_rxmit)
(49,hdrlen)
(50,(tp->t_flags & TF_NEEDSYN)
(51,if (!sbreserve_locked(&so->so_snd,\n\\n\\t\\t\\t    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,\n\\n\\t\\t\\t     V_tcp_autosndbuf_max)
(52,sigoff = to.to_signature - opt)
(53,ip6_output(m, tp->t_inpcb->in6p_outputopts, &ro,\n\\n\\t\\t    ((so->so_options & SO_DONTROUTE)
(54,so->so_options)
(55,M_PKTHDR)
(56,max_linkhdr)
(57,th->th_win == 0)
(58,idle)
(59,2 * tp->t_maxseg)
(60,SOCKBUF_UNLOCK(&so->so_snd)
(61,t_maxseg)
(62,so->so_snd.sb_cc)
(63,(tp->t_flags & TF_LASTIDLE)
(64,error == EMSGSIZE)
(65,if (isipv6)
(66,error)
(67,tp->t_state == TCPS_SYN_SENT)
(68,TF_RCVD_TSTMP)
(69,flags |= TH_SYN)
(70,len)
(71,if (len > 0 && SEQ_GEQ(tp->snd_nxt, tp->snd_max)
(72,len)
(73,struct tcphdr)
(74,so->so_snd)
(75,snd_nxt)
(76,tp)
(77,in6_selecthlim(tp->t_inpcb, NULL)
(78,if_hw_tsomax != 0)
(79,)
(80,tp->sackblks)
(81,0)
(82,tp->t_state == TCPS_ESTABLISHED &&\n\\n\\t    (tp->t_flags & TF_ECN_PERMIT)
(83,&so->so_snd)
(84,len = tp->t_maxopd - optlen - ipoptlen)
(85,ipoptlen)
(86,tp->t_flags & TF_SACK_PERMIT)
(87,0)
(88,TH_RST)
(89,len)
(90,&sack_bytes_rxmt)
(91,SB_AUTOSIZE)
(92,tcp_setpersist(tp)
(93,tp)
(94,tp)
(95,sack_rxmit = 1)
(96,0)
(97,m)
(98,tp->t_rxtcur)
(99,to.to_flags = 0)
(100,flags)
(101,tp->snd_cwnd)
(102,*ip = NULL)
(103,)
(104,sendalot = 1)
(105,tp->snd_recover)
(106,so_snd)
(107,m->m_len)
(108,m_pkthdr)
(109,(long)
(110,th->th_seq)
(111,tp->t_flags & TF_SACK_PERMIT)
(112,sack_rxmit)
(113,tp->snd_cwnd)
(114,tp->t_flags2 &= ~TF2_PLPMTU_PMTUD)
(115,tp->t_state != TCPS_SYN_RECEIVED)
(116,so_snd)
(117,tp->t_flags |= TF_SENTFIN)
(118,sigoff)
(119,mb->m_len)
(120,tp->snd_nxt == tp->snd_max)
(121,(tp->t_flags & TF_SENTFIN)
(122,tp->snd_nxt)
(123,p->rxmit - tp->snd_una)
(124,mb->m_next)
(125,1)
(126,tp->sackhint.sack_bytes_rexmit -= len)
(127,th)
(128,tp)
(129,tp->t_flags)
(130,opt)
(131,tp->snd_nxt)
(132,p)
(133,t_flags)
(134,tp->snd_nxt)
(135,V_tcp_do_autosndbuf && so->so_snd.sb_flags & SB_AUTOSIZE)
(136,t_flags)
(137,hdrlen = sizeof (struct ip6_hdr)
(138,p)
(139,ipov)
(140,so->so_rcv.sb_flags)
(141,0)
(142,rcv_adv)
(143,TH_FIN)
(144,len)
(145,t_flags)
(146,error = ENOBUFS)
(147,)
(148,TH_ECE)
(149,len = 0)
(150,(so->so_options & SO_DONTROUTE)
(151,snd_nxt)
(152,EPERM)
(153,if (recwin >= 0 && SEQ_GT(tp->rcv_nxt + recwin, tp->rcv_adv)
(154,tp->snd_nxt != tp->snd_max)
(155,rcv_nxt)
(156,error == EMSGSIZE && ro.ro_rt != NULL)
(157,sbsndptr(&so->so_snd, off, len, &moff)
(158,mb = sbsndmbuf(&so->so_snd, off, &moff)
(159,if (((tp->t_flags & TF_FORCEDATA)
(160,V_path_mtu_discovery && tp->t_maxopd > V_tcp_minmss)
(161,flags)
(162,in_pseudo(ip->ip_src.s_addr, ip->ip_dst.s_addr,\n\\n\\t\\t    htons(sizeof(struct tcphdr)
(163,TT_PERSIST)
(164,TF_FORCEDATA)
(165,th->th_sum)
(166,moff)
(167,t_state)
(168,off)
(169,flags)
(170,len)
(171,TH_SYN)
(172,(tp->t_inpcb->inp_vflag & INP_IPV6)
(173,th_win)
(174,sb_cc)
(175,sb_flags)
(176,snd_nxt)
(177,t_flags)
(178,if (SEQ_GT(tp->snd_nxt + xlen, tp->snd_max)
(179,sb_cc)
(180,so)
(181,(long)
(182,tp)
(183,NULL)
(184,tp)
(185,tp->snd_una)
(186,(sack_rxmit && tp->snd_nxt != tp->snd_max)
(187,to.to_wscale)
(188,tp)
(189,rxmit)
(190,ipsec_optlen)
(191,t_flags)
(192,end)
(193,tp)
(194,m)
(195,ip->ip_v)
(196,tp->t_flags)
(197,tp)
(198,tp->snd_wnd)
(199,tp)
(200,tp->t_flags)
(201,m_getcl(M_NOWAIT, MT_DATA, M_PKTHDR)
(202,recwin >> tp->rcv_scale)
(203,off)
(204,tp)
(205,so->so_snd)
(206,if (tp->t_state == TCPS_ESTABLISHED &&\n\\n\\t    (tp->t_flags & TF_ECN_PERMIT)
(207,to)
(208,snd_max)
(209,tp->t_flags)
(210,if_hw_tsomaxsegcount -= frags)
(211,flags & TH_FIN)
(212,TF_ACKNOW)
(213,ro)
(214,flags)
(215,flags & TH_SYN)
(216,tp->rfbuf_ts = tcp_ts_getticks()
(217,len)
(218,t_tsomax)
(219,tp->max_sndwnd > 0)
(220,tp)
(221,so->so_snd)
(222,recwin >= 0)
(223,m = m_getcl(M_NOWAIT, MT_DATA, M_PKTHDR)
(224,lmin(len, cwin)
(225,long)
(226,)
(227,th)
(228,tp->t_maxseg)
(229,tcp_timer_active(tp, TT_REXMT)
(230,t_maxseg)
(231,if (V_path_mtu_discovery && tp->t_maxopd > V_tcp_minmss)
(232,to_flags)
(233,V_tcp_autosndbuf_max)
(234,isipv6)
(235,!(tp->t_flags & TF_MORETOCOME)
(236,tp->t_flags2)
(237,so->so_snd.sb_cc)
(238,if (frags == 0)
(239,tp->t_inpcb)
(240,tp->snd_wnd)
(241,startseq)
(242,ro)
(243,__func__)
(244,tp)
(245,so->so_snd.sb_hiwat)
(246,t_flags)
(247,tp)
(248,TOF_SIGNATURE)
(249,if (tp->t_state == TCPS_SYN_SENT)
(250,error)
(251,so_rcv)
(252,TOF_SACKPERM)
(253,hdrlen)
(254,t_state)
(255,flags)
(256,ip6->ip6_hlim)
(257,to.to_sacks = (u_char *)
(258,tp)
(259,frags == 0)
(260,isipv6 && (MHLEN < hdrlen + max_linkhdr)
(261,max_len)
(262,tp)
(263,so->so_rcv)
(264,TF_NEEDFIN)
(265,0)
(266,(u_short)
(267,idle = (tp->t_flags & TF_LASTIDLE)
(268,flags & TH_SYN)
(269,so)
(270,default:)
(271,0)
(272,)
(273,tp)
(274,goto send;)
(275,tp)
(276,t_flags)
(277,frags)
(278,to_flags)
(279,t_flags)
(280,!(tp->t_flags & TF_NEEDSYN)
(281,t_flags)
(282,len)
(283,tp)
(284,TCP_MAXBURST)
(285,recwin)
(286,hdrlen)
(287,case ENETUNREACH:)
(288,tp->rcv_adv - tp->rcv_nxt)
(289,flags & TH_SYN)
(290,m->m_pkthdr.rcvif = (struct ifnet *)
(291,tp)
(292,ipoptlen)
(293,TF_FORCEDATA)
(294,)
(295,tcp_addoptions(&to, opt)
(296,t_flags)
(297,tp->rcv_numsacks)
(298,tp)
(299,len)
(300,len)
(301,so->so_rcv)
(302,len + hdrlen + ipoptlen <= IP_MAXPACKET)
(303,if_hw_tsomax = tp->t_tsomax)
(304,)
(305,m)
(306,rcv_adv)
(307,len > 0 && SEQ_GEQ(tp->snd_nxt, tp->snd_max)
(308,tp)
(309,TT_REXMT)
(310,tp->rcv_scale)
(311,xlen)
(312,(tp->t_flags & TF_SACK_PERMIT)
(313,optlen - ipoptlen)
(314,ipov)
(315,tp)
(316,MHLEN)
(317,sack_rxmit)
(318,tp)
(319,len > 0)
(320,t_flags)
(321,tp)
(322,tp)
(323,t_flags)
(324,TT_PERSIST)
(325,if (tp->t_flags & TF_SIGNATURE)
(326,tp)
(327,ip->ip_ttl)
(328,tp)
(329,ip->ip_tos |= IPTOS_ECN_ECT0)
(330,tp)
(331,so)
(332,tp->rcv_scale)
(333,t_flags)
(334,m)
(335,goto just_return;)
(336,moff = len % max_len)
(337,if (idle && ticks - tp->t_rcvtime >= tp->t_rxtcur)
(338,so->so_snd)
(339,long)
(340,0)
(341,m)
(342,len == 1)
(343,!tcp_timer_active(tp, TT_PERSIST)
(344,tp->t_state)
(345,len > 0)
(346,tp->rcv_scale)
(347,tp)
(348,th_seq)
(349,)
(350,0)
(351,tp->rcv_nxt)
(352,long)
(353,0)
(354,to.to_flags |= TOF_MSS)
(355,so->so_options & SO_DONTROUTE)
(356,tp)
(357,adv >= (long)
(358,IN_FASTRECOVERY(tp->t_flags)
(359,)
(360,tp->t_flags)
(361,max_len)
(362,&so->so_snd)
(363,tp)
(364,TH_SYN)
(365,TCP_MAXWIN)
(366,m->m_next = m_copy(mb, moff, (int)
(367,so->so_snd)
(368,len + hdrlen + ipoptlen - ipsec_optlen == m_length(m, NULL)
(369,)
(370,tp)
(371,ipov->ih_len)
(372,th)
(373,so_snd)
(374,(tp->t_flags & TF_FORCEDATA)
(375,m->m_pkthdr.len = hdrlen + len)
(376,rxmit)
(377,m->m_pkthdr.csum_flags)
(378,(idle || (tp->t_flags & TF_NODELAY)
(379,__func__)
(380,ipsec_optlen = 0)
(381,!tcp_timer_active(tp, TT_PERSIST)
(382,tp)
(383,mtu = 0)
(384,tp->t_inpcb)
(385,so->so_snd.sb_cc)
(386,so)
(387,len)
(388,max_sndwnd)
(389,rcv_nxt)
(390,sack_rxmit)
(391,&so->so_rcv)
(392,flags)
(393,sendalot)
(394,t_inpcb)
(395,cwin)
(396,)
(397,switch (error)
(398,if (len > 0)
(399,off < so->so_snd.sb_cc)
(400,tp->t_flags)
(401,TT_DELACK)
(402,tp->t_rtseq)
(403,)
(404,if (len <= MHLEN - hdrlen - max_linkhdr)
(405,ip6)
(406,)
(407,ipsec_optlen)
(408,~(TF_ACKNOW | TF_DELACK)
(409,0)
(410,m->m_data += max_linkhdr)
(411,len)
(412,flags & TH_FIN && tp->t_flags & TF_SENTFIN &&\n\\n\\t    tp->snd_nxt == tp->snd_max)
(413,1)
(414,goto send;)
(415,snd_max)
(416,tcp_timer_active(tp, TT_PERSIST)
(417,)
(418,sizeof(struct tcphdr)
(419,tp->t_flags & TF_NOOPT)
(420,__LINE__)
(421,csum_flags)
(422,tp)
(423,t_rxtshift)
(424,if (m->m_next == NULL)
(425,ip)
(426,)
(427,if (th->th_win == 0)
(428,0)
(429,tp->t_flags)
(430,recwin)
(431,TH_SYN)
(432,tp->t_maxopd)
(433,max_len <= 0)
(434,tp)
(435,max_linkhdr)
(436,t_flags)
(437,V_tcp_autosndbuf_inc)
(438,if (TCPS_HAVERCVDSYN(tp->t_state)
(439,adv)
(440,tp->rcv_adv - tp->rcv_nxt)
(441,tp->t_inpcb->in6p_outputopts)
(442,tp->t_maxseg)
(443,m_gethdr(M_NOWAIT, MT_DATA)
(444,m_pkthdr)
(445,tp->snd_nxt)
(446,maxburst)
(447,if (tp->t_flags & TF_FORCEDATA)
(448,so_snd)
(449,th->th_off = (sizeof (struct tcphdr)
(450,ticks)
(451,tp)
(452,tp)
(453,tp)
(454,len)
(455,rcv_nxt)
(456,tp->t_flags & TF_ECN_PERMIT)
(457,tp->rfbuf_ts == 0 &&\n\\n\\t\\t\\t    (so->so_rcv.sb_flags & SB_AUTOSIZE)
(458,frags)
(459,rcv_nxt)
(460,(tp->t_flags & TF_RCVD_TSTMP)
(461,NULL)
(462,m)
(463,tp->snd_nxt - tp->snd_una)
(464,tp->t_flags & TF_ECN_SND_CWR)
(465,so)
(466,0)
(467,error)
(468,to.to_flags)
(469,if (SEQ_GT(tp->snd_up, tp->snd_nxt)
(470,so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7)
(471,u_short)
(472,tp->t_flags2)
(473,ip_output(m, tp->t_inpcb->inp_options, &ro,\n\\n\\t    ((so->so_options & SO_DONTROUTE)
(474,snd_una)
(475,adv >= (long)
(476,m->m_pkthdr.len - sizeof(*ip6)
(477,rt_mtu)
(478,recwin < (long)
(479,sack_bytes_rexmit)
(480,ip6_hlim)
(481,TF_TOE)
(482,int)
(483,to_wscale)
(484,if (m == NULL)
(485,idle)
(486,tcps_segstimed)
(487,ip->ip_dst)
(488,isipv6)
(489,ro_rt)
(490,ip6)
(491,0)
(492,oldwin)
(493,m)
(494,TCP_PROBE5(send, NULL, tp, ip6, tp, th)
(495,if (tcp_timer_active(tp, TT_PERSIST)
(496,tp->t_maxopd - optlen)
(497,flags)
(498,len)
(499,len = 0)
(500,if_hw_tsomax)
(501,snd_nxt)
(502,t_rxtshift)
(503,flags |= TH_ECE)
(504,flags)
(505,tp->t_flags)
(506,to_flags)
(507,t_maxopd)
(508,tp)
(509,0)
(510,SOCKBUF_UNLOCK_ASSERT(&so->so_snd)
(511,tp->rcv_adv = tp->rcv_nxt + recwin)
(512,u_short)
(513,(MHLEN < hdrlen + max_linkhdr)
(514,idle)
(515,tp->snd_nxt = tp->iss)
(516,(tp->t_flags & TF_SENTFIN)
(517,SEQ_LT(tp->snd_nxt, tp->snd_max)
(518,max_len)
(519,if (tp->t_rxtshift <= V_tcp_ecn_maxretries)
(520,sb_hiwat)
(521,error)
(522,tp->snd_nxt - tp->sack_newdata)
(523,sendwin)
(524,flags)
(525,m_next)
(526,tcp_timer_active(tp, TT_PERSIST)
(527,m)
(528,&moff)
(529,flags)
(530,p)
(531,TCPS_SYN_SENT)
(532,tp)
(533,off + len == so->so_snd.sb_cc)
(534,)
(535,tp)
(536,off)
(537,1)
(538,m_length(m, NULL)
(539,oldwin)
(540,tp->t_flags)
(541,m)
(542,tp)
(543,tso = 0)
(544,to)
(545,ip->ip_len)
(546,0)
(547,tp->t_inpcb)
(548,MT_DATA)
(549,m->m_pkthdr.len)
(550,len + off >= so->so_snd.sb_cc &&\n\\n\\t\\t    (tp->t_flags & TF_NOPUSH)
(551,~SB_AUTOSIZE)
(552,snd_max)
(553,end)
(554,th)
(555,tp->t_flags & TF_ECN_SND_ECE)
(556,len)
(557,tp->t_maxopd)
(558,if (sack_rxmit)
(559,0)
(560,tp->rcv_scale)
(561,if (tso)
(562,if_hw_tsomax)
(563,~TF2_PLPMTU_PMTUD)
(564,&so->so_snd)
(565,tcps_sack_rexmits)
(566,ticks - tp->t_rcvtime >= tp->t_rxtcur)
(567,flags & (TH_SYN|TH_FIN)
(568,ipoptlen)
(569,m->m_pkthdr.csum_flags |= CSUM_TSO)
(570,&so->so_snd)
(571,tp)
(572,"sackhint bytes rtx >= 0")
(573,sack_bytes_rxmt)
(574,m)
(575,)
(576,t_flags)
(577,th_win)
(578,ip_v)
(579,tp->t_rxtcur)
(580,mb->m_len - moff)
(581,snd_up)
(582,to)
(583,hdrlen + max_linkhdr)
(584,0)
(585,ro_rt)
(586,TT_REXMT)
(587,NULL)
(588,max_linkhdr)
(589,len)
(590,tp->t_flags)
(591,struct tcpiphdr)
(592,)
(593,p->rxmit)
(594,so)
(595,isipv6)
(596,to.to_flags)
(597,so_snd)
(598,t_maxopd)
(599,m->m_pkthdr)
(600,tp->snd_una)
(601,sendalot)
(602,so_options)
(603,if (isipv6 && (MHLEN < hdrlen + max_linkhdr)
(604,sendwin = 1)
(605,tp)
(606,to)
(607,opt)
(608,tp->t_flags)
(609,tp)
(610,0)
(611,)
(612,tp)
(613,"%s: TSO can\'t do IP options")
(614,tp->request_r_scale)
(615,len)
(616,0)
(617,if (!tcp_timer_active(tp, TT_REXMT)
(618,flags)
(619,sendalot)
(620,so->so_rcv)
(621,len)
(622,TOF_SCALE)
(623,snd_nxt)
(624,if_hw_tsomaxsegcount != 0)
(625,!((tp->t_flags & TF_FORCEDATA)
(626,flags &= ~TH_FIN)
(627,so->so_snd)
(628,sendalot = 1)
(629,s_addr)
(630,SEQ_GT(tp->rcv_adv, tp->rcv_nxt)
(631,th)
(632,t_rxtshift)
(633,TF_NODELAY)
(634,tp->t_inpcb)
(635,so->so_snd)
(636,SOCKBUF_UNLOCK(&so->so_snd)
(637,tp->rcv_adv - tp->rcv_nxt)
(638,if_hw_tsomax)
(639,0)
(640,in6_cksum_pseudo(ip6, sizeof(struct tcphdr)
(641,tp)
(642,len >= tp->t_maxseg)
(643,tp->t_rxtshift <= V_tcp_ecn_maxretries)
(644,tp->t_flags)
(645,sizeof (struct tcphdr)
(646,)
(647,tp->snd_nxt)
(648,save)
(649,tp)
(650,if (flags & TH_SYN)
(651,SOCKBUF_LOCK(&so->so_snd)
(652,len >= 0)
(653,SOCKBUF_UNLOCK(&so->so_snd)
(654,snd_recover)
(655,TCPSTAT_INC(tcps_sack_rexmits)
(656,oldwin)
(657,len)
(658,(long)
(659,p = tcp_sack_output(tp, &sack_bytes_rxmt)
(660,7)
(661,tp->snd_up)
(662,!tcp_timer_active(tp, TT_REXMT)
(663,if (recwin < (long)
(664,tso_segsz)
(665,tp->sackhint)
(666,snd_nxt)
(667,tp->snd_up)
(668,mac_inpcb_create_mbuf(tp->t_inpcb, m)
(669,TOF_SACK)
(670,tp)
(671,tp->snd_nxt)
(672,t_maxseg)
(673,KASSERT(len + hdrlen + ipoptlen - ipsec_optlen == m_length(m, NULL)
(674,0)
(675,struct ip6_hdr)
(676,ip)
(677,startseq)
(678,recwin)
(679,tp)
(680,TT_REXMT)
(681,tp->t_flags & TF_NODELAY)
(682,error)
(683,sb_cc)
(684,sendalot = 0)
(685,m->m_len)
(686,if ((flags & TH_RST)
(687,bcopy(opt, th + 1, optlen)
(688,idle)
(689,if_hw_tsomaxsegcount *\n\\n\\t\\t\\t\\t\\t\\t    if_hw_tsomaxsegsize)
(690,long)
(691,tp->t_flags)
(692,tp->t_sndrexmitpack)
(693,if (flags & TH_FIN &&\n\\n\\t    ((tp->t_flags & TF_SENTFIN)
(694,m)
(695,0)
(696,IP_DF)
(697,tp)
(698,TH_FIN)
(699,if (len > 0)
(700,snd_una)
(701,m)
(702,t_rxtcur)
(703,&so->so_snd)
(704,1)
(705,flags |= TH_ECE|TH_CWR)
(706,sendalot)
(707,sack_bytes_rxmt)
(708,csum_flags)
(709,rcv_scale)
(710,tp->t_flags)
(711,t_tsomaxsegsize)
(712,&ro)
(713,(struct tcphdr *)
(714,tp)
(715,TH_CWR)
(716,len)
(717,inp_options)
(718,tp)
(719,tp->t_state)
(720,so)
(721,ip6 + 1)
(722,tp->snd_max = tp->snd_nxt)
(723,)
(724,tp)
(725,min(tp->snd_wnd, tp->snd_cwnd)
(726,ip->ip_off)
(727,off)
(728,flags)
(729,NULL)
(730,so->so_options)
(731,(flags & TH_SYN)
(732,tp)
(733,th)
(734,xlen = len)
(735,0)
(736,so_snd)
(737,TF_SACK_PERMIT)
(738,)
(739,(off + len)
(740,if_hw_tsomaxsegsize)
(741,sack_bytes_rxmt == 0)
(742,t_sndrexmitpack)
(743,sizeof(struct tcphdr)
(744,sizeof(ro)
(745,tp)
(746,if (recwin > 0 && !(tp->t_flags & TF_NEEDSYN)
(747,tp)
(748,ipoptlen)
(749,tp)
(750,(sizeof (struct tcphdr)
(751,th_urp)
(752,htons((u_short)
(753,if ((flags & TH_SYN)
(754,if (if_hw_tsomaxsegcount != 0 &&\n\\n\\t\\t\\t    if_hw_tsomaxsegsize != 0)
(755,SEQ_GT(tp->snd_up, tp->snd_una)
(756,0)
(757,tp->t_flags)
(758,if ((tp->t_flags & TF_SACK_PERMIT)
(759,(long)
(760,tp->snd_max)
(761,t_inpcb)
(762,ip6)
(763,tp->snd_wnd)
(764,so->so_snd)
(765,tp->t_flags)
(766,tp)
(767,t_state)
(768,flags)
(769,M_NOWAIT)
(770,to_sacks)
(771,&so->so_snd)
(772,struct tcphdr)
(773,TCPSTAT_INC(tcps_sndctrl)
(774,tp->t_rtttime)
(775,tp)
(776,tp->t_flags)
(777,)
(778,ip)
(779,TCPSTAT_INC(tcps_ecn_ect0)
(780,th->th_win)
(781,curthread)
(782,flags)
(783,tp)
(784,ipov)
(785,if (off + len == so->so_snd.sb_cc)
(786,mtu)
(787,tp)
(788,~TF2_PLPMTU_MAXSEGSNT)
(789,TT_PERSIST)
(790,&ro)
(791,"[%s:%d]: len < 0")
(792,sendalot = 1)
(793,goto send;)
(794,0)
(795,)
(796,tp)
(797,sb_flags)
(798,!tcp_timer_active(tp, TT_PERSIST)
(799,connect__request)
(800,tp)
(801,m->m_pkthdr.len)
(802,t_maxopd)
(803,t_rtttime)
(804,tp->snd_una)
(805,so->so_snd.sb_cc)
(806,tp)
(807,send)
(808,IPPROTO_TCP)
(809,frags)
(810,so->so_snd)
(811,so)
(812,tp->snd_una + so->so_snd.sb_cc)
(813,startseq = tp->snd_nxt)
(814,ulmin(cwin, p->end - p->rxmit)
(815,1)
(816,tp)
(817,tp->t_flags & TF_SENTFIN)
(818,(u_char *)
(819,tp->max_sndwnd / 2)
(820,tp->ts_offset)
(821,p)
(822,tcp_timer_active(tp, TT_PERSIST)
(823,if (tp->t_flags & TF_FORCEDATA)
(824,)
(825,tp)
(826,)
(827,htons(IP_DF)
(828,iss)
(829,hdrlen)
(830,snd_nxt)
(831,SEQ_GT(tp->snd_nxt, tp->snd_una)
(832,)
(833,t_flags)
(834,len)
(835,tp->t_flags)
(836,tp->t_flags)
(837,0)
(838,tp->t_flags & TF_SACK_PERMIT)
(839,flags |= TH_PUSH)
(840,TCP_PROBE5(send, NULL, tp, ip, tp, th)
(841,len + off >= so->so_snd.sb_cc)
(842,TF_RXWIN0SENT)
(843,0)
(844,min(tp->snd_wnd, tp->snd_cwnd)
(845,so->so_snd.sb_flags)
(846,s_addr)
(847,so)
(848,so)
(849,tp)
(850,htonl(tp->snd_max)
(851,ro)
(852,sb_hiwat)
(853,0)
(854,mb)
(855,tso)
(856,so->so_snd)
(857,tp->t_flags & TF_MORETOCOME)
(858,(struct ipovly *)
(859,&ro)
(860,off + len)
(861,tp)
(862,TT_PERSIST)
(863,to)
(864,SOCKBUF_UNLOCK(&so->so_snd)
(865,ip6)
(866,tp->snd_max == tp->snd_una)
(867,max_len <= 0)
(868,tp->t_rxtcur)
(869,tp->t_flags & TF_FORCEDATA)
(870,request_r_scale)
(871,TT_REXMT)
(872,len)
(873,tp->t_flags)
(874,inp_inc)
(875,so)
(876,tp->snd_nxt += len)
(877,to_tsval)
(878,hdrlen)
(879,len)
(880,if_hw_tsomaxsegcount != 0 &&\n\\n\\t\\t\\t    if_hw_tsomaxsegsize != 0)
(881,m->m_len = hdrlen)
(882,t_flags)
(883,if (sendalot && --maxburst)
(884,8 * tp->t_maxseg)
(885,to)
(886,moff)
(887,len)
(888,max_linkhdr)
(889,TF_ECN_SND_CWR)
(890,th)
(891,if (isipv6)
(892,SEQ_GT(tp->snd_max, tp->snd_una)
(893,tp)
(894,SEQ_GT(tp->rcv_nxt + recwin, tp->rcv_adv)
(895,p = NULL)
(896,tp->snd_nxt + len)
(897,tp)
(898,tp->snd_nxt)
(899,tp)
(900,sizeof (struct tcpiphdr)
(901,optlen)
(902,tp->snd_nxt)
(903,TF_SACK_PERMIT)
(904,tp)
(905,ticks - tp->t_rcvtime)
(906,m->m_data)
(907,__func__)
(908,error == EMSGSIZE && ro.ro_rt != NULL)
(909,if_hw_tsomaxsegcount)
(910,TH_ECE|TH_CWR)
(911,flags & TH_SYN)
(912,tp->rfbuf_ts)
(913,so_snd)
(914,)
(915,if (flags & TH_SYN)
(916,(tp->t_flags & TF_FORCEDATA)
(917,tp->t_inpcb)
(918,tp->t_state == TCPS_SYN_SENT && V_tcp_do_ecn)
(919,KASSERT(tp->sackhint.sack_bytes_rexmit >= 0,\n\\n\\t\\t\\t\\t    ("sackhint bytes rtx >= 0")
(920,int)
(921,tp)
(922,if (tp->rfbuf_ts == 0 &&\n\\n\\t\\t\\t    (so->so_rcv.sb_flags & SB_AUTOSIZE)
(923,tp->sackhint.sack_bytes_rexmit >= 0)
(924,tp)
(925,0)
(926,tcp_signature_compute(m, 0, len, optlen,\n\\n\\t\\t    (u_char *)
(927,tp->snd_max)
(928,CSUM_TCP_IPV6)
(929,rcv_numsacks)
(930,sack_rxmit = 0)
(931,tp->snd_up - tp->snd_nxt)
(932,tp->sackhint)
(933,tp->t_inpcb->inp_vflag & INP_IPV6PROTO)
(934,m)
(935,th)
(936,if (sack_rxmit)
(937,moff)
(938,so_snd)
(939,th)
(940,TT_REXMT)
(941,tso)
(942,0)
(943,t_inpcb)
(944,0)
(945,sack_rxmit)
(946,long)
(947,ip_len)
(948,u_char *)
(949,save)
(950,mb != NULL && max_len < len)
(951,!tcp_timer_active(tp, TT_PERSIST)
(952,tp)
(953,sendwin)
(954,ipsec_optlen)
(955,len++)
(956,ulmin(so->so_snd.sb_cc, sendwin)
(957,th->th_sum = in_pseudo(ip->ip_src.s_addr, ip->ip_dst.s_addr,\n\\n\\t\\t    htons(sizeof(struct tcphdr)
(958,0)
(959,tp->t_flags & TF_FORCEDATA)
(960,)
(961,so->so_snd)
(962,so)
(963,tp)
(964,so_rcv)
(965,th->th_seq = htonl(p->rxmit)
(966,if (tp->t_state != TCPS_SYN_RECEIVED)
(967,t_flags)
(968,break;)
(969,m_copydata(mb, moff, (int)
(970,mb = sbsndptr(&so->so_snd, off, len, &moff)
(971,so)
(972,while (mb != NULL && max_len < len)
(973,so_snd)
(974,save)
(975,recwin)
(976,htonl(IPTOS_ECN_ECT0 << 20)
(977,ipoptlen += ipsec_optlen)
(978,cwin < 0)
(979,max_len += mlen)
(980,p->rxmit)
(981,max_len)
(982,p)
(983,&ro)
(984,ip)
(985,snd_una)
(986,if (len)
(987,NULL)
(988,tp)
(989,TCP_PROBE5(connect__request, NULL, tp, ip6, tp, th)
(990,tp)
(991,(u_char *)
(992,th)
(993,tso)
(994,len)
(995,ro_rt)
(996,long)
(997,if (sendwin == 0)
(998,tcp_sack_output(tp, &sack_bytes_rxmt)
(999,)
(1000,off)
(1001,so)
(1002,snd_nxt)
(1003,rcv_adv)
(1004,len > max_len)
(1005,mb)
(1006,if (tso)
(1007,)
(1008,so_snd)
(1009,to)
(1010,TH_SYN)
(1011,th)
(1012,(adv + oldwin)
(1013,to.to_flags)
(1014,ip6->ip6_plen = htons(m->m_pkthdr.len - sizeof(*ip6)
(1015,sb_cc)
(1016,sb_cc)
(1017,cwin)
(1018,snd_una)
(1019,snd_una)
(1020,goto again;)
(1021,to)
(1022,case EMSGSIZE:)
(1023,TF2_PLPMTU_PMTUD)
(1024,flags & TH_SYN)
(1025,so->so_snd.sb_hiwat / 8 * 7)
(1026,0)
(1027,tp->snd_nxt)
(1028,tp->iss)
(1029,cwin)
(1030,tp->snd_wnd / 4 * 5)
(1031,t_flags)
(1032,snd_max)
(1033,snd_nxt)
(1034,rcv_scale)
(1035,TF_DELACK)
(1036,EMSGSIZE)
(1037,4)
(1038,goto again;)
(1039,xlen)
(1040,TF_REQ_SCALE)
(1041,if (sendwin == 0)
(1042,ip->ip_dst.s_addr)
(1043,m_next)
(1044,tp)
(1045,IP_ROUTETOIF)
(1046,ip)
(1047,len)
(1048,flags & TH_RST)
(1049,ip->ip_src.s_addr)
(1050,so->so_rcv.sb_hiwat / 8)
(1051,SO_DONTROUTE)
(1052,0)
(1053,snd_up)
(1054,!tcp_timer_active(tp, TT_REXMT)
(1055,if (SEQ_GT(tp->snd_up, tp->snd_una)
(1056,tp->t_flags)
(1057,if ((tp->t_flags & TF_RCVD_TSTMP)
(1058,snd_nxt)
(1059,frags = 1)
(1060,snd_nxt)
(1061,opt)
(1062,th->th_ack = htonl(tp->rcv_nxt)
(1063,t_inpcb)
(1064,th)
(1065,tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur)
(1066,if (flags & TH_FIN)
(1067,(long)
(1068,len + hdrlen + ipoptlen)
(1069,max_len)
(1070,(long)
(1071,so_rcv)
(1072,tp->rcv_scale)
(1073,tp->snd_max)
(1074,th->th_seq)
(1075,moff)
(1076,tp->t_flags &= ~TF_TSO)
(1077,tp)
(1078,sendalot = 1)
(1079,off)
(1080,if (recwin > (long)
(1081,if ((flags & TH_SYN)
(1082,~TH_FIN)
(1083,ro)
(1084,TCP_MAXWIN)
(1085,tp->t_flags & TF_SIGNATURE)
(1086,TF_ACKNOW | TF_DELACK)
(1087,(tp->snd_wnd / 4 * 5)
(1088,m->m_pkthdr.csum_flags = CSUM_TCP)
(1089,flags & TH_SYN)
(1090,mtu)
(1091,0)
(1092,sizeof(ro)
(1093,tp->snd_nxt)
(1094,TCPS_ESTABLISHED)
(1095,t_flags2)
(1096,0)
(1097,if (cwin < 0)
(1098,ip6_plen)
(1099,flags)
(1100,TT_PERSIST)
(1101,sack_bytes_rxmt)
(1102,NULL)
(1103,to)
(1104,)
(1105,!(tp->t_flags & TF_MORETOCOME)
(1106,)
(1107,TF_NOOPT)
(1108,snd_nxt)
(1109,tp)
(1110,tp)
(1111,th)
(1112,snd_up)
(1113,tp)
(1114,TH_SYN|TH_FIN)
(1115,len)
(1116,NULL)
(1117,len)
(1118,sackblks)
(1119,if (len <= max_len)
(1120,)
(1121,tp)
(1122,tcps_ecn_ect0)
(1123,so->so_snd)
(1124,len -= moff)
(1125,flags & TH_SYN)
(1126,TOF_TS)
(1127,len)
(1128,len)
(1129,tp->snd_nxt + xlen)
(1130,t_flags)
(1131,if (cwin < 0)
(1132,-1)
(1133,ENOBUFS)
(1134,so->so_snd)
(1135,tp->t_softerror)
(1136,if (SEQ_LT(p->rxmit + len, tp->snd_una + so->so_snd.sb_cc)
(1137,tp->t_flags2)
(1138,RO_RTFREE(&ro)
(1139,SO_DONTROUTE)
(1140,tp)
(1141,so_snd)
(1142,)
(1143,goto after_sack_rexmit;)
(1144,if (V_path_mtu_discovery && tp->t_maxopd > V_tcp_minmss)
(1145,sack_rxmit)
(1146,so)
(1147,KASSERT(ip->ip_v == IPVERSION,\n\\n\\t\\t    ("%s: IP version incorrect: %d", __func__, ip->ip_v)
(1148,t_flags2)
(1149,TH_CWR)
(1150,if (len > 0)
(1151,)
(1152,__func__)
(1153,tp)
(1154,so_snd)
(1155,flags)
(1156,tp->rcv_adv)
(1157,len)
(1158,mb)
(1159,ip)
(1160,tp->t_flags |= TF_LASTIDLE)
(1161,idle = 0)
(1162,tp->snd_nxt -= len)
(1163,cwin < 0)
(1164,SO_DEBUG)
(1165,tp->snd_nxt)
(1166,if (frags >= if_hw_tsomaxsegcount)
(1167,&so->so_rcv)
(1168,tcps_sndctrl)
(1169,tp->t_inpcb)
(1170,(long)
(1171,if_hw_tsomaxsegsize)
(1172,th)
(1173,tp->t_inpcb)
(1174,tp->snd_una)
(1175,)
(1176,sb_cc)
(1177,)
(1178,(long)
(1179,)
(1180,TCPSTAT_ADD(tcps_sndbyte, len)
(1181,)
(1182,tp->t_flags & TF_MORETOCOME)
(1183,tp->t_state)
(1184,so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una)
(1185,SEQ_LT(tp->snd_nxt, tp->snd_max)
(1186,m->m_data)
(1187,snd_nxt)
(1188,TH_SYN|TH_FIN|TH_RST)
(1189,t_flags2)
(1190,&so->so_snd)
(1191,optlen)
(1192,snd_up)
(1193,tp)
(1194,&to)
(1195,frags >= if_hw_tsomaxsegcount)
(1196,0)
(1197,p->rxmit + len)
(1198,snd_max)
(1199,snd_una)
(1200,--maxburst)
(1201,mtu = ro.ro_rt->rt_mtu)
(1202,so_rcv)
(1203,isipv6)
(1204,so)
(1205,tp)
(1206,tp)
(1207,tp->t_flags)
(1208,TH_SYN)
(1209,p->rxmit)
(1210,tp)
(1211,ip->ip_ttl = in6_selecthlim(tp->t_inpcb, NULL)
(1212,th_off)
(1213,ipoptlen)
(1214,hdrlen += optlen = tcp_addoptions(&to, opt)
(1215,1)
(1216,tp->t_inpcb->inp_vflag)
(1217,len >= tp->t_maxseg)
(1218,TH_SYN)
(1219,th_seq)
(1220,ip->ip_v == IPVERSION)
(1221,tp->rcv_adv)
(1222,last_ack_sent)
(1223,void)
(1224,recwin > (long)
(1225,htons(m->m_pkthdr.len)
(1226,so->so_snd)
(1227,sendalot)
(1228,tp)
(1229,len)
(1230,so_rcv)
(1231,0)
(1232,hdrlen - max_linkhdr)
(1233,ih_len)
(1234,t_flags2)
(1235,TH_FIN)
(1236,so->so_rcv.sb_flags & SB_AUTOSIZE)
(1237,tp)
(1238,tp->t_flags)
(1239,tp)
(1240,ip)
(1241,t_rtseq)
(1242,RO_RTFREE(&ro)
(1243,tp)
(1244,goto send;)
(1245,th->th_urp = htons((u_short)
(1246,p->rxmit)
(1247,tp)
(1248,tp->t_state)
(1249,tp)
(1250,)
(1251,4)
(1252,tp)
(1253,struct ifnet *)
(1254,th_sum)
(1255,sbspace(&so->so_rcv)
(1256,th + 1)
(1257,tp->t_inpcb->inp_socket)
(1258,tp->rcv_adv)
(1259,save = ipov->ih_len)
(1260,len <= max_len)
(1261,~TH_FIN)
(1262,&ro)
(1263,tp->rcv_nxt)
(1264,sizeof (struct tcphdr)
(1265,off = tp->snd_nxt - tp->snd_una)
(1266,if (tp->t_flags & TF_NEEDFIN)
(1267,0)
(1268,(int)
(1269,sack_rxmit)
(1270,snd_max)
(1271,tso)
(1272,tso)
(1273,off >= 0)
(1274,m == NULL)
(1275,0)
(1276,NULL)
(1277,flags)
(1278,TH_FIN)
(1279,t_flags)
(1280,sb_hiwat)
(1281,tp->t_maxopd)
(1282,++xlen)
(1283,tp->t_flags)
(1284,SEQ_GT(tp->snd_nxt, tp->snd_max)
(1285,len % max_len)
(1286,startseq)
(1287,error)
(1288,tp)
(1289,recwin)
(1290,0)
(1291,EMSGSIZE)
(1292,tp)
(1293,oldwin >> tp->rcv_scale == (adv + oldwin)
(1294,t_inpcb)
(1295,ip)
(1296,tp->rcv_nxt)
(1297,to_flags)
(1298,tp->t_inpcb)
(1299,so)
(1300,sendalot = 1)
(1301,tp)
(1302,so->so_snd)
(1303,htonl(tp->snd_nxt)
(1304,tp->t_tsomax)
(1305,oldwin)
(1306,t_softerror)
(1307,tp->rfbuf_ts == 0)
(1308,rcvif)
(1309,ipsec_optlen)
(1310,so_options)
(1311,tp->snd_una)
(1312,(tp->t_flags & TF_FORCEDATA)
(1313,so_snd)
(1314,idle)
(1315,m->m_data += max_linkhdr)
(1316,"%s: sack block to the left of una : %d")
(1317,th)
(1318,tp->rcv_adv)
(1319,to)
(1320,)
(1321,p)
(1322,tp->t_inpcb)
(1323,so->so_snd)
(1324,tp->t_maxopd - optlen - ipoptlen)
(1325,goto send;)
(1326,return (0)
(1327,sendalot)
(1328,tp)
(1329,len)
(1330,return (0)
(1331,tp->t_maxseg)
(1332,len + hdrlen + ipoptlen - ipsec_optlen)
(1333,len)
(1334,ro)
(1335,return (error)
(1336,)
(1337,if (oldwin >> tp->rcv_scale == (adv + oldwin)
(1338,flags & (TH_SYN|TH_FIN|TH_RST)
(1339,tp)
(1340,!(tp->t_flags & TF_NEEDSYN)
(1341,1)
(1342,flags)
(1343,ipsec_optlen = ipsec_hdrsiz_tcp(tp)
(1344,so->so_snd)
(1345,so_snd)
(1346,rxmit)
(1347,TCPS_HAVERCVDSYN(tp->t_state)
(1348,MHLEN < hdrlen + max_linkhdr)
(1349,tp->t_flags)
(1350,flags)
(1351,len + optlen)
(1352,if (adv >= (long)
(1353,tp->t_flags)
(1354,0)
(1355,NULL)
(1356,sackhint)
(1357,tcp_timer_active(tp, TT_PERSIST)
(1358,0)
(1359,tp->t_flags &= ~TF_LASTIDLE)
(1360,so_snd)
(1361,tp->t_state)
(1362,so->so_rcv)
(1363,tp->t_rxtshift = 0)
(1364,tp)
(1365,so->so_snd)
(1366,t_maxseg)
(1367,to)
(1368,tp)
(1369,len)
(1370,m->m_pkthdr.len)
(1371,sackhint)
(1372,if (SEQ_GT(p->end, tp->snd_recover)
(1373,SEQ_GEQ(tp->snd_nxt, tp->snd_max)
(1374,tp)
(1375,t_tsomaxsegcount)
(1376,1)
(1377,tp->t_flags)
(1378,hdrlen = sizeof (struct tcpiphdr)
(1379,flags & (TH_SYN|TH_FIN)
(1380,tp->rfbuf_ts)
(1381,tp->snd_nxt)
(1382,TCPS_SYN_SENT)
(1383,tp)
(1384,len)
(1385,hdrlen)
(1386,0)
(1387,if (len < 0)
(1388,tp->t_flags & TF_NEEDFIN)
(1389,mlen)
(1390,tp)
(1391,if (isipv6)
(1392,to_mss)
(1393,so->so_snd.sb_hiwat)
(1394,TF_MORETOCOME)
(1395,m->m_pkthdr.len)
(1396,TCPS_HAVERCVDFIN(tp->t_state)
(1397,tp->t_flags)
(1398,snd_una)
(1399,so)
(1400,tp)
(1401,so)
(1402,tp)
(1403,tp->t_flags)
(1404,ipoptlen = 0)
(1405,TH_SYN)
(1406,tp)
(1407,tp->t_rxtshift)
(1408,!tcp_timer_active(tp, TT_PERSIST)
(1409,ip->ip_v)
(1410,isipv6)
(1411,(flags & TH_RST)
(1412,tp)
(1413,t_flags2)
(1414,tp->t_flags & TF_NEEDFIN)
(1415,in6p_outputopts)
(1416,)
(1417,th->th_flags)
(1418,optlen)
(1419,ENOBUFS)
(1420,tp->snd_up = tp->snd_una)
(1421,flags &= ~TH_SYN)
(1422,1)
(1423,tp->max_sndwnd)
(1424,goto out;)
(1425,long)
(1426,goto timer;)
(1427,htonl(tp->rcv_nxt)
(1428,tcps_sndrexmitpack)
(1429,mlen = (mb->m_len - moff)
(1430,adv)
(1431,)
(1432,KASSERT(len + hdrlen + ipoptlen <= IP_MAXPACKET,\n\\n\\t    ("%s: len > IP_MAXPACKET", __func__)
(1433,)
(1434,sendwin == 0)
(1435,ro)
(1436,TT_PERSIST)
(1437,min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,\n\\n\\t\\t\\t     V_tcp_autosndbuf_max)
(1438,&so->so_snd)
(1439,t_flags)
(1440,sizeof (struct ip6_hdr)
(1441,tp->snd_una)
(1442,recwin = sbspace(&so->so_rcv)
(1443,so)
(1444,tp)
(1445,)
(1446,tp)
(1447,5)
(1448,hdrlen)
(1449,ipoptlen)
(1450,)
(1451,off)
(1452,&ro)
(1453,20)
(1454,)
(1455,sb_hiwat)
(1456,so_snd)
(1457,tp->snd_nxt++)
(1458,so->so_snd.sb_cc)
(1459,"%s: len <= tso_segsz")
(1460,t_state)
(1461,ENOBUFS)
(1462,if (mtu != 0)
(1463,hdrlen)
(1464,so->so_snd.sb_hiwat)
(1465,V_tcp_autosndbuf_max)
(1466,if (tp->t_rtttime == 0)
(1467,tp->t_state)
(1468,if_hw_tsomax - hdrlen)
(1469,tp)
(1470,tp->t_state)
(1471,tp->t_flags)
(1472,TF_LASTIDLE)
(1473,(tp->snd_nxt - tp->sack_newdata)
(1474,ip6->ip6_flow)
(1475,IPPROTO_TCP + len + optlen)
(1476,len = 0)
(1477,hdrlen + len)
(1478,tp->snd_recover)
(1479,mtu)
(1480,len)
(1481,bzero(&ro, sizeof(ro)
(1482,tp->t_sndrexmitpack++)
(1483,tp->snd_nxt != tp->snd_una)
(1484,mb)
(1485,tp->t_flags & TF_FORCEDATA)
(1486,ip)
(1487,tso = 0)
(1488,TF_ACKNOW)
(1489,)
(1490,tp->snd_nxt)
(1491,__func__)
(1492,tp)
(1493,tp)
(1494,!sbreserve_locked(&so->so_snd,\n\\n\\t\\t\\t    min(so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc,\n\\n\\t\\t\\t     V_tcp_autosndbuf_max)
(1495,len >= 0)
(1496,tp->t_rxtshift)
(1497,if (tp->t_state == TCPS_SYN_SENT)
(1498,ro.ro_rt)
(1499,TF_NOOPT)
(1500,tp)
(1501,t_inpcb)
(1502,ro)
(1503,ip6->ip6_flow |= htonl(IPTOS_ECN_ECT0 << 20)
(1504,ipoptlen)
(1505,len)
(1506,(long)
(1507,M_NOWAIT)
(1508,sb_cc)
(1509,tp->snd_nxt)
(1510,if (!isipv6)
(1511,recwin > 0 && !(tp->t_flags & TF_NEEDSYN)
(1512,0)
(1513,TH_SYN)
(1514,snd_nxt)
(1515,t_rxtshift)
(1516,&so->so_snd)
(1517,ro.ro_rt->rt_mtu)
(1518,tp->t_maxseg)
(1519,so_snd)
(1520,)
(1521,max_len)
(1522,t_inpcb)
(1523,tp)
(1524,snd_una)
(1525,tp)
(1526,len = lmin(len, cwin)
(1527,max_len)
(1528,tcp_timer_active(tp, TT_PERSIST)
(1529,len)
(1530,ip6->ip6_plen)
(1531,if (SEQ_LT(tp->snd_nxt, tp->snd_max)
(1532,tp->snd_nxt)
(1533,tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur)
(1534,len = ((long)
(1535,ts_recent)
(1536,ro)
(1537,snd_max)
(1538,SEQ_GT(tp->snd_nxt + xlen, tp->snd_max)
(1539,cwin = min(tp->snd_wnd, tp->snd_cwnd)
(1540,struct ipovly *)
(1541,max_len = 0)
(1542,tp)
(1543,TF_NEEDSYN)
(1544,so)
(1545,p->end)
(1546,optlen)
(1547,TH_FIN)
(1548,optlen)
(1549,tcp_ts_getticks()
(1550,~TH_FIN)
(1551,0)
(1552,error)
(1553,hdrlen)
(1554,m->m_pkthdr)
(1555,4 * 5)
(1556,so->so_snd.sb_cc)
(1557,V_tcp_minmss)
(1558,sendwin)
(1559,tp->t_state)
(1560,0)
(1561,tcps_sndacks)
(1562,snd_recover)
(1563,tp)
(1564,if (error == EMSGSIZE && ro.ro_rt != NULL)
(1565,moff)
(1566,adv >= (long)
(1567,tp)
(1568,th->th_seq)
(1569,off)
(1570,return (tcp_offload_output(tp)
(1571,(u_short)
(1572,tp)
(1573,0)
(1574,tp->snd_max)
(1575,ro.ro_rt != NULL)
(1576,flags & TH_FIN)
(1577,(tp->t_flags & TF_FORCEDATA)
(1578,th->th_win = htons((u_short)
(1579,tp->t_state)
(1580,snd_nxt)
(1581,optlen = 0)
(1582,cwin = 0)
(1583,return (error)
(1584,)
(1585,t_flags)
(1586,SEQ_GT(tp->snd_max, tp->snd_una)
(1587,ip6_optlen(tp->t_inpcb)
(1588,snd_recover)
(1589,(u_char *)
(1590,rcv_nxt)
(1591,max_len)
(1592,tp->t_flags & TF_FORCEDATA)
(1593,tp->t_state == TCPS_SYN_SENT)
(1594,tp->snd_max)
(1595,t_flags)
(1596,tp)
(1597,)
(1598,m)
(1599,flags)
(1600,m_pkthdr)
(1601,TF_FORCEDATA)
(1602,oldwin)
(1603,tp->snd_nxt)
(1604,so_rcv)
(1605,m_len)
(1606,sigoff)
(1607,error)
(1608,t_flags)
(1609,moff != 0)
(1610,sack_rxmit)
(1611,if (max_len <= 0)
(1612,)
(1613,so)
(1614,tp->snd_up)
(1615,CSUM_TSO)
(1616,~TF_RXWIN0SENT)
(1617,max_linkhdr + hdrlen > MCLBYTES)
(1618,len > 0)
(1619,frags)
(1620,tp->rcv_nxt)
(1621,NULL)
(1622,recwin)
(1623,so_snd)
(1624,snd_nxt)
(1625,if_hw_tsomaxsegcount)
(1626,tp)
(1627,tp)
(1628,optlen)
(1629,V_tcp_ecn_maxretries)
(1630,tp->t_flags & TF_ACKNOW)
(1631,recwin < (long)
(1632,error)
(1633,if (tp->t_flags & TF_ECN_SND_ECE)
(1634,tp->snd_nxt)
(1635,tp->t_sndzerowin++)
(1636,"tcphdr too big")
(1637,)
(1638,tp)
(1639,t_flags)
(1640,optlen)
(1641,sb_cc)
(1642,rcv_numsacks)
(1643,KASSERT(ipoptlen == 0,\n\\n\\t\\t\\t    ("%s: TSO can\'t do IP options", __func__)
(1644,ip6->ip6_hlim = in6_selecthlim(tp->t_inpcb, NULL)
(1645,ip6)
(1646,NULL)
(1647,V_path_mtu_discovery && tp->t_maxopd > V_tcp_minmss)
(1648,)
(1649,so->so_snd.sb_flags &= ~SB_AUTOSIZE)
(1650,)
(1651,t_inpcb)
(1652,tcp_timer_active(tp, TT_PERSIST)
(1653,so->so_snd.sb_flags & SB_AUTOSIZE)
(1654,(so->so_options & SO_DONTROUTE)
(1655,tp->t_rxtshift = 0)
(1656,TH_FIN)
(1657,(tp->t_flags & TF_NOOPT)
(1658,mtu != 0)
(1659,p->rxmit)
(1660,TCPSTAT_ADD(tcps_sack_rexmit_bytes,\n\\n\\t\\t\\t    min(len, tp->t_maxseg)
(1661,if (len + optlen + ipoptlen > tp->t_maxopd)
(1662,(long)
(1663,ipoptlen)
(1664,p)
(1665,0)
(1666,len)
(1667,(tp->t_flags & TF_NOPUSH)
(1668,tp)
(1669,tp)
(1670,0)
(1671,len >= tp->max_sndwnd / 2 && tp->max_sndwnd > 0)
(1672,tp->snd_nxt - tp->snd_una)
(1673,rcv_nxt)
(1674,tcp_ts_getticks()
(1675,snd_nxt)
(1676,TCPS_HAVEESTABLISHED(tp->t_state)
(1677,th)
(1678,mtu = ro.ro_rt->rt_mtu)
(1679,tp->t_rxtshift = 0)
(1680,TF_SENTFIN)
(1681,so_snd)
(1682,tp->t_flags2)
(1683,if_hw_tsomaxsegsize)
(1684,rcv_nxt)
(1685,tp)
(1686,len = ((long)
(1687,to.to_flags |= TOF_SCALE)
(1688,error)
(1689,flags)
(1690,so)
(1691,tp)
(1692,ip->ip_tos)
(1693,off)
(1694,adv)
(1695,sack_rxmit)
(1696,M_NOWAIT)
(1697,tp->rcv_numsacks)
(1698,idle || (tp->t_flags & TF_NODELAY)
(1699,tp->snd_cwnd)
(1700,struct tcpcb *tp)
(1701,error)
(1702,tp->rcv_adv)
(1703,)
(1704,TF_NEEDSYN)
(1705,0)
(1706,)
(1707,out:)
(1708,tp)
(1709,tp->t_maxopd > V_tcp_minmss)
(1710,tp)
(1711,tp->t_maxseg)
(1712,TF_SENTFIN)
(1713,t_maxopd)
(1714,)
(1715,tp->snd_recover - p->rxmit)
(1716,TF2_PLPMTU_PMTUD)
(1717,len)
(1718,)
(1719,tp)
(1720,tp)
(1721,tp->snd_max)
(1722,1)
(1723,tp)
(1724,mlen)
(1725,to)
(1726,if (tp->t_flags & TF_SACK_PERMIT)
(1727,tp->t_rxtshift)
(1728,0)
(1729,sack_rxmit = 0)
(1730,so->so_snd)
(1731,goto send;)
(1732,to.to_tsval = tcp_ts_getticks()
(1733,TCPSTAT_INC(tcps_sndprobe)
(1734,((tp->t_flags & TF_FORCEDATA)
(1735,mlen)
(1736,*ipov = NULL)
(1737,send:)
(1738,len)
(1739,tcps_sndurg)
(1740,len)
(1741,len == 1)
(1742,)
(1743,th)
(1744,if (flags & TH_SYN)
(1745,m->m_pkthdr.rcvif)
(1746,tp)
(1747,tp)
(1748,)
(1749,so->so_rcv.sb_hiwat)
(1750,max_len = (tp->t_maxopd - optlen)
(1751,SEQ_GEQ(p->rxmit, tp->snd_recover)
(1752,len)
(1753,tp->snd_nxt)
(1754,t_state)
(1755,max_len)
(1756,if (tp->t_inpcb->inp_vflag & INP_IPV6PROTO)
(1757,tcps_sndtotal)
(1758,tso)
(1759,ipoptlen = ip6_optlen(tp->t_inpcb)
(1760,mtu)
(1761,optlen)
(1762,tp->sackhint.sack_bytes_rexmit)
(1763,snd_una)
(1764,ro)
(1765,snd_max)
(1766,if (!isipv6)
(1767,t_rxtshift)
(1768,tp)
(1769,sendwin)
(1770,tp->max_sndwnd)
(1771,if_hw_tsomaxsegsize)
(1772,adv = min(recwin, (long)
(1773,(struct ifnet *)
(1774,so->so_snd)
(1775,long)
(1776,(long)
(1777,V_tcp_do_ecn)
(1778,off + len)
(1779,len)
(1780,sendalot = 1)
(1781,tp->snd_nxt++)
(1782,len)
(1783,off)
(1784,len)
(1785,rcv_scale)
(1786,to.to_flags |= TOF_SIGNATURE)
(1787,IP_ROUTETOIF)
(1788,tp)
(1789,so->so_snd.sb_cc)
(1790,tp->rcv_nxt)
(1791,if (flags & TH_FIN && tp->t_flags & TF_SENTFIN &&\n\\n\\t    tp->snd_nxt == tp->snd_max)
(1792,TF_DELACK)
(1793,snd_wnd)
(1794,tcp_timer_active(tp, TT_PERSIST)
(1795,max_len < len)
(1796,flags)
(1797,p)
(1798,IPPROTO_TCP)
(1799,8)
(1800,tp)
(1801,tp)
(1802,sack_rxmit == 0)
(1803,if (optlen)
(1804,TF_ECN_PERMIT)
(1805,tp)
(1806,t_rxtshift)
(1807,tp)
(1808,0)
(1809,tp->snd_nxt)
(1810,IPSEC_DIR_OUTBOUND)
(1811,sb_hiwat)
(1812,flags)
(1813,TH_FIN)
(1814,tp)
(1815,p->rxmit += len)
(1816,len)
(1817,tp)
(1818,MHLEN)
(1819,hdrlen)
(1820,TF_REQ_TSTMP)
(1821,tp)
(1822,to.to_flags |= TOF_TS)
(1823,(tp->t_flags & TF_SACK_PERMIT)
(1824,4)
(1825,tp)
(1826,mb)
(1827,0)
(1828,off)
(1829,len)
(1830,)
(1831,TCPSTAT_INC(tcps_sndwinup)
(1832,tp->t_maxseg)
(1833,recwin)
(1834,error = 0)
(1835,htons(m->m_pkthdr.len - sizeof(*ip6)
(1836,t_flags)
(1837,ro)
(1838,return (error)
(1839,if (sack_rxmit == 0)
(1840,tcp_timer_active(tp, TT_REXMT)
(1841,t_inpcb)
(1842,flags |= TH_FIN)
(1843,flags &= ~TH_FIN)
(1844,SEQ_LT(tp->snd_nxt, tp->snd_max)
(1845,m_free(m)
(1846,idle && ticks - tp->t_rcvtime >= tp->t_rxtcur)
(1847,goto out;)
(1848,ip)
(1849,mlen)
(1850,tp->snd_una)
(1851,TCPS_HAVEESTABLISHED(tp->t_state)
(1852,after_sack_rexmit:)
(1853,tp)
(1854,tp)
(1855,tp)
(1856,m->m_len)
(1857,ip_off)
(1858,tp->t_flags &= ~TF_ECN_SND_CWR)
(1859,&so->so_snd)
(1860,tp->sackhint.sack_bytes_rexmit += len)
(1861,t_rtttime)
(1862,so->so_options & SO_DEBUG)
(1863,t_flags)
(1864,&to)
(1865,p->rxmit)
(1866,m)
(1867,if_hw_tsomaxsegcount)
(1868,tp)
(1869,TF_SIGNATURE)
(1870,tp)
(1871,(flags & TH_SYN)
(1872,sigoff)
(1873,tp->t_flags & TF_SACK_PERMIT)
(1874,th->th_flags)
(1875,tp->t_rtttime)
(1876,t_state)
(1877,tp->t_flags)
(1878,if (flags & TH_SYN)
(1879,so->so_snd.sb_cc < V_tcp_autosndbuf_max &&\n\\n\\t\\t    sendwin >= (so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una)
(1880,!tcp_timer_active(tp, TT_REXMT)
(1881,hdrlen + ipoptlen)
(1882,tp)
(1883,sack_bytes_rxmt)
(1884,tp->snd_max)
(1885,tp)
(1886,2)
(1887,tp)
(1888,ip)
(1889,IN_FASTRECOVERY(tp->t_flags)
(1890,KASSERT(len > tp->t_maxopd - optlen,\n\\n\\t\\t    ("%s: len <= tso_segsz", __func__)
(1891,off)
(1892,so->so_options & SO_DONTROUTE)
(1893,tp)
(1894,tp)
(1895,tp->t_flags)
(1896,)
(1897,tp)
(1898,)
(1899,recwin = (long)
(1900,tp->sackhint.sack_bytes_rexmit)
(1901,len = 0)
(1902,tp->t_tsomaxsegsize)
(1903,tp)
(1904,SEQ_GT(tp->snd_up, tp->snd_nxt)
(1905,so->so_snd)
(1906,sendwin >= (so->so_snd.sb_cc - (tp->snd_nxt - tp->snd_una)
(1907,tp->t_flags)
(1908,m)
(1909,2)
(1910,error = ENOBUFS)
(1911,tp->snd_max)
(1912,adv)
(1913,off = p->rxmit - tp->snd_una)
(1914,)
(1915,th->th_seq = htonl(tp->snd_max)
(1916,flags)
(1917,tp->t_flags)
(1918,htonl(p->rxmit)
(1919,t_flags)
(1920,~TH_FIN)
(1921,cwin)
(1922,t_maxopd)
(1923,0)
(1924,tp)
(1925,inp_options)
(1926,cwin)
(1927,!(tp->t_flags & TF_DELACK)
(1928,t_rxtcur)
(1929,NULL)
(1930,tcp_offload_output(tp)
(1931,tp->snd_nxt = tp->snd_una)
(1932,tp)
(1933,t_flags)
(1934,)
(1935,SEQ_GT(tp->rcv_adv, tp->rcv_nxt)
(1936,so_snd)
(1937,recwin)
(1938,mb)
(1939,error == EMSGSIZE)
(1940,SEQ_GT(tp->rcv_adv, tp->rcv_nxt)
(1941,TCPS_SYN_RECEIVED)
(1942,so->so_rcv.sb_hiwat)
(1943,tp)
(1944,to.to_tsecr = tp->ts_recent)
(1945,so)
(1946,th->th_win)
(1947,TF_SIGNATURE)
(1948,sack_bytes_rxmt = 0)
(1949,tcps_sndwinup)
(1950,ip->ip_off |= htons(IP_DF)
(1951,tp)
(1952,flags &= ~TH_FIN)
(1953,th = (struct tcphdr *)
(1954,sendwin == 0)
(1955,hdrlen)
(1956,if (error)
(1957,ro)
(1958,rcv_nxt)
(1959,tp)
(1960,m->m_pkthdr.csum_flags)
(1961,sb_cc)
(1962,tp->t_flags & TF_DELACK)
(1963,len || (flags & (TH_SYN|TH_FIN)
(1964,snd_up)
(1965,snd_cwnd)
(1966,rcv_adv)
(1967,min(recwin, (long)
(1968,__LINE__)
(1969,~TF_TSO)
(1970,so_snd)
(1971,ipsec_optlen)
(1972,tp->last_ack_sent)
(1973,long)
(1974,m->m_next)
(1975,)
(1976,th_flags)
(1977,tp)
(1978,m)
(1979,oldwin)
(1980,TH_CWR)
(1981,if (isipv6)
(1982,)
(1983,0)
(1984,max_sndwnd)
(1985,adv + oldwin)
(1986,isipv6)
(1987,sack_rxmit = 0)
(1988,len)
(1989,tp->rcv_adv)
(1990,so->so_snd)
(1991,)
(1992,tp)
(1993,hdrlen)
(1994,ro)
(1995,tp)
(1996,optlen + len)
(1997,t_flags)
(1998,t_flags)
(1999,tp)
(2000,TF_NEEDFIN)
(2001,struct tcphdr *)
(2002,tp)
(2003,m_pkthdr)
(2004,tp->rcv_scale)
(2005,sack_rxmit)
(2006,TH_SYN)
(2007,tcps_sndrexmitbyte)
(2008,ipov->ih_len = htons(m->m_pkthdr.len /* - hdrlen + (th->th_off << 2)
(2009,recwin <= (long)
(2010,len > 0)
(2011,)
(2012,to_nsacks)
(2013,htons(m->m_pkthdr.len /* - hdrlen + (th->th_off << 2)
(2014,tp)
(2015,0)
(2016,max_len)
(2017,(flags & TH_SYN)
(2018,sb_cc)
(2019,hdrlen + max_linkhdr)
(2020,tp)
(2021,tp)
(2022,MHLEN >= hdrlen)
(2023,len)
(2024,sbsndmbuf(&so->so_snd, off, &moff)
(2025,tp)
(2026,len)
(2027,1)
(2028,1)
(2029,tso)
(2030,to.to_signature - opt)
(2031,snd_una)
(2032,len)
(2033,if (tp->t_flags & TF_TOE)
(2034,tp)
(2035,tp->sackhint)
(2036,tp->t_inpcb->inp_options)
(2037,error)
(2038,tp)
(2039,to_flags)
(2040,ipsec_hdrsiz_tcp(tp)
(2041,)
(2042,tp->t_flags)
(2043,tcpip_fillheaders(tp->t_inpcb, ip6, th)
(2044,sb_cc)
(2045,struct tcphdr)
(2046,0)
(2047,rxmit)
(2048,to.to_nsacks)
(2049,ip)
(2050,ulmin(so->so_snd.sb_cc, tp->snd_wnd)
(2051,flags)
(2052,tp->t_flags & TF_FORCEDATA)
(2053,tp->snd_una + so->so_snd.sb_cc)
(2054,ro)
(2055,len + off)
(2056,)
(2057,ro.ro_rt)
(2058,if (so->so_options & SO_DEBUG)
(2059,if (!tcp_timer_active(tp, TT_PERSIST)
(2060,recwin)
(2061,tp->t_maxopd)
(2062,if (isipv6)
(2063,tp)
(2064,tp)
(2065,ip6_flow)
(2066,rt_mtu)
(2067,to.to_tsval)
(2068,)
(2069,0)
(2070,tp)
(2071,1)
(2072,tcp_timer_activate(tp, TT_PERSIST, 0)
(2073,if ((flags & TH_SYN)
(2074,snd_max)
(2075,m->m_pkthdr.tso_segsz = tp->t_maxopd - optlen)
(2076,0)
(2077,tp->t_flags)
(2078,if ((tp->t_flags & TF_FORCEDATA)
(2079,moff)
(2080,tp)
(2081,TOF_MSS)
(2082,flags & TH_SYN)
(2083,so)
(2084,tp)
(2085,mb)
(2086,max_linkhdr)
(2087,*ip6 = NULL)
(2088,tp)
(2089,ip_tos)
(2090,tp->last_ack_sent = tp->rcv_nxt)
(2091,&moff)
(2092,len)
(2093,ro.ro_rt != NULL)
(2094,tp)
(2095,t_flags)
(2096,flags & TH_FIN)
(2097,tp)
(2098,u_char *)
(2099,snd_cwnd)
(2100,snd_una)
(2101,goto send;)
(2102,tp->rcv_adv)
(2103,t_inpcb)
(2104,TF_FORCEDATA)
(2105,tp)
(2106,TH_SYN|TH_FIN)
(2107,snd_nxt)
(2108,tp->rcv_nxt)
(2109,tp->snd_nxt + len)
(2110,SEQ_LT(tp->snd_nxt, tp->snd_max)
(2111,so->so_rcv.sb_hiwat / 4)
(2112,tp->snd_nxt == tp->snd_una)
(2113,tcp_timer_activate(tp, TT_DELACK, 0)
(2114,tp->t_flags &= ~(TF_ACKNOW | TF_DELACK)
(2115,min(len, tp->t_maxseg)
(2116,TH_ECE|TH_CWR)
(2117,htons((u_short)
(2118,so->so_snd)
(2119,tp)
(2120,tp->t_softerror = error)
(2121,tp)
(2122,snd_wnd)
(2123,tp->t_flags2)
(2124,ipoptlen - ipsec_optlen)
(2125,snd_nxt)
(2126,t_maxopd)
(2127,tp->t_maxseg)
(2128,m = m_gethdr(M_NOWAIT, MT_DATA)
(2129,tp->t_flags)
(2130,tp->t_flags2 |= TF2_PLPMTU_PMTUD)
(2131,ih_len)
(2132,th)
(2133,tp->t_rxtcur)
(2134,SEQ_GEQ(tp->snd_nxt, tp->snd_max)
(2135,tp->snd_nxt--)
(2136,cwin)
(2137,so->so_rcv)
(2138,so_snd)
(2139,tp->snd_nxt)
(2140,len)
(2141,IPTOS_ECN_ECT0 << 20)
(2142,th_seq)
(2143,flags = tcp_outflags[tp->t_state])
(2144,m)
(2145,if (!tcp_timer_active(tp, TT_REXMT)
(2146,(void)
(2147,ip_v)
(2148,!TCPS_HAVERCVDFIN(tp->t_state)
(2149,tp->t_rtttime = ticks)
(2150,TCPSTAT_INC(tcps_sndrexmitpack)
(2151,adv)
(2152,hhook_run_tcp_est_out(tp, th, &to, len, tso)
(2153,tp)
(2154,m)
(2155,to.to_tsecr)
(2156,tcps_sndbyte)
(2157,)
(2158,flags & TH_SYN)
(2159,off)
(2160,IPTOS_ECN_ECT0)
(2161,tp->t_flags & TF_REQ_TSTMP)
(2162,ipov->ih_len)
(2163,th_win)
(2164,max_len)
(2165,inp_vflag)
(2166,m)
(2167,m = m_gethdr(M_NOWAIT, MT_DATA)
(2168,tcp_outflags)
(2169,TT_REXMT)
(2170,tp->t_softerror)
(2171,rfbuf_ts)
(2172,mtu)
(2173,len)
(2174,to.to_flags)
(2175,0)
(2176,t_flags)
(2177,tp->rcv_nxt)
(2178,tso)
(2179,tcp_timer_activate(tp, TT_REXMT, 0)
(2180,TF2_PLPMTU_MAXSEGSNT)
(2181,TCPSTAT_INC(tcps_sndpack)
(2182,0)
(2183,0)
(2184,so)
(2185,TCPSTAT_INC(tcps_sndurg)
(2186,struct tcphdr)
(2187,tp->t_maxopd > V_tcp_minmss)
(2188,&so->so_snd)
(2189,flags)
(2190,8)
(2191,ipov)
(2192,tp->t_flags & TF_SENTFIN &&\n\\n\\t    tp->snd_nxt == tp->snd_max)
(2193,to_flags)
(2194,m_pkthdr)
(2195,(flags & (TH_SYN|TH_FIN)
(2196,if (SEQ_GEQ(p->rxmit, tp->snd_recover)
(2197,(tp->snd_wnd / 4 * 5)
(2198,tp)
(2199,sackhint)
(2200,)
(2201,)
(2202,len)
(2203,snd_wnd)
(2204,tp->snd_una)
(2205,th)
(2206,goto send;)
(2207,so_snd)
(2208,so)
(2209,tp)
(2210,tp)
(2211,1)
(2212,t_inpcb)
(2213,recwin)
(2214,TF_MORETOCOME)
(2215,so_options)
(2216,so->so_snd)
(2217,"%s: mbuf chain shorter than expected: %ld + %u + %u - %u != %u")
(2218,MCLBYTES)
(2219,)
(2220,m_len)
(2221,goto send;)
(2222,tp->t_flags2)
(2223,so_snd)
(2224,0)
(2225,isipv6)
(2226,tp->t_rtttime == 0)
(2227,m)
(2228,TH_FIN|TH_RST)
(2229,tp->t_inpcb)
(2230,TCP_PROBE5(connect__request, NULL, tp, ip, tp, th)
(2231,if ((tp->t_flags & TF_NOOPT)
(2232,tp)
(2233,th->th_off)
(2234,MT_DATA)
(2235,so)
(2236,RET)
(2237,__func__)
(2238,ip->ip_len = htons(m->m_pkthdr.len)
(2239,save = 0)
(2240,p->end)
(2241,tp->t_inpcb->inp_inc)
(2242,long)
(2243,error)
(2244,if (V_tcp_do_autosndbuf && so->so_snd.sb_flags & SB_AUTOSIZE)
(2245,optlen)
(2246,so->so_rcv)
(2247,so->so_rcv.sb_hiwat <= 8 * tp->t_maxseg)
(2248,tp->snd_max)
(2249,tp->snd_wnd)
(2250,(tp->t_flags & TF_FORCEDATA)
(2251,so->so_snd.sb_cc < V_tcp_autosndbuf_max)
(2252,len)
(2253,oldwin = (tp->rcv_adv - tp->rcv_nxt)
(2254,so)
(2255,t_flags)
(2256,to.to_sacks)
(2257,tcp_timer_active(tp, TT_REXMT)
(2258,m)
(2259,TH_SYN)
(2260,frags)
(2261,len)
(2262,)
(2263,tp->t_maxopd)
(2264,timer:)
(2265,0)
(2266,V_tcp_minmss)
(2267,~TF2_PLPMTU_PMTUD)
(2268,tp)
(2269,sendalot)
(2270,p = NULL)
(2271,to.to_flags |= TOF_SACKPERM)
(2272,*so = tp->t_inpcb->inp_socket)
(2273,so->so_snd.sb_cc)
(2274,tp->snd_una)
(2275,)
(2276,send)
(2277,max_len)
(2278,p)
(2279,caddr_t)
(2280,tp->t_flags & TF_RCVD_TSTMP)
(2281,SOCKBUF_LOCK_ASSERT(&so->so_snd)
(2282,t_flags)
(2283,flags)
(2284,if (!(tp->t_flags & TF_MORETOCOME)
(2285,p)
(2286,isipv6)
(2287,error = ip_output(m, tp->t_inpcb->inp_options, &ro,\n\\n\\t    ((so->so_options & SO_DONTROUTE)
(2288,0)
(2289,if (tp->t_flags & TF_NEEDSYN)
(2290,SB_AUTOSIZE)
(2291,tcp_timer_activate(tp, TT_REXMT, tp->t_rxtcur)
(2292,tso = 0)
(2293,tp->snd_cwnd = tp->t_maxseg)
(2294,so->so_rcv.sb_hiwat)
(2295,0)
(2296,so->so_snd.sb_cc)
(2297,len)
(2298,if (tp->t_flags & TF_ECN_SND_CWR)
(2299,0)
(2300,TCPSTAT_INC(tcps_segstimed)
(2301,long)
(2302,t_maxopd)
(2303,TF_SENTFIN)
(2304,ipoptlen)
(2305,mtod(m, caddr_t)
(2306,sendalot = 1)
(2307,max_len)
(2308,len)
(2309,tp)
(2310,if ((tp->t_flags & TF_FORCEDATA)
(2311,tp)
(2312,snd_una)
(2313,tp->t_flags & TF_SACK_PERMIT)
(2314,)
(2315,IPVERSION)
(2316,)
(2317,th->th_flags |= TH_URG)
(2318,snd_max)
(2319,tp)
(2320,(int)
(2321,tp->t_flags & TF_NEEDSYN)
(2322,in6_selecthlim(tp->t_inpcb, NULL)
(2323,0)
(2324,long)
(2325,TF_FORCEDATA)
(2326,SEQ_GT(tp->snd_up, tp->snd_una)
(2327,hdrlen)
(2328,recwin < (long)
(2329,tcp_sack_adjust(tp)
(2330,max_linkhdr + hdrlen)
(2331,tp->t_inpcb)
(2332,"%s: len > IP_MAXPACKET")
(2333,TH_RST)
(2334,tp)
(2335,CSUM_TCP)
(2336,min(tp->snd_wnd, tp->snd_cwnd)
(2337,t_rxtcur)
(2338,if (tp->t_flags & TF_MORETOCOME)
(2339,snd_max)
(2340,tp->t_inpcb)
(2341,tp->snd_nxt)
(2342,hdrlen)
(2343,flags & TH_FIN)
(2344,)
(2345,m == NULL)
(2346,so_snd)
(2347,tp->t_flags & TF_NOPUSH)
(2348,tp->t_rxtshift = 0)
(2349,TH_SYN)
(2350,recwin)
(2351,tp)
(2352,tp)
(2353,to_flags)
(2354,to)
(2355,tp)
(2356,len <= MHLEN - hdrlen - max_linkhdr)
(2357,TF_ACKNOW)
(2358,if ((tp->snd_wnd / 4 * 5)
(2359,tp)
(2360,m_data)
(2361,cwin)
(2362,t_state)
(2363,t_sndzerowin)
(2364,if (idle)
(2365,th)
(2366,mb)
(2367,flags &= ~TH_FIN)
(2368,tp->t_inpcb->inp_vflag & INP_IPV6)
(2369,tp)
(2370,tp->snd_una)
(2371,to_signature)
(2372,so->so_snd)
(2373,ip)
(2374,if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt)
(2375,tp->t_flags & TF_LASTIDLE)
(2376,hdrlen)
(2377,if_hw_tsomax)
(2378,so_snd)
(2379,so->so_snd.sb_cc >= (so->so_snd.sb_hiwat / 8 * 7)
(2380,tp)
(2381,tp)
(2382,KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__)
(2383,TH_SYN)
(2384,if (if_hw_tsomax != 0)
(2385,!(tp->t_flags & TF_DELACK)
(2386,INP_IPV6PROTO)
(2387,p->rxmit)
(2388,if (sack_bytes_rxmt == 0)
(2389,if ((tp->t_flags & TF_SACK_PERMIT)
(2390,tp)
(2391,goto send;)
(2392,tp->snd_una)
(2393,len + optlen + ipoptlen > tp->t_maxopd)
(2394,tp->rcv_nxt)
(2395,)
(2396,max_len)
(2397,KASSERT(len >= 0, ("[%s:%d]: len < 0", __func__, __LINE__)
(2398,xlen)
(2399,if_hw_tsomaxsegcount)
(2400,tp)
(2401,xlen)
(2402,NULL)
(2403,1)
(2404,if (sack_rxmit == 0)
(2405,m_pkthdr)
(2406,&tp->t_inpcb->inp_inc)
(2407,rxmit)
(2408,m)
(2409,TCPSTAT_INC(tcps_sndtotal)
(2410,)
(2411,len)
(2412,to)
(2413,snd_nxt)
(2414,0)
(2415,if_hw_tsomaxsegcount = tp->t_tsomaxsegcount)
(2416,ip6)
(2417,snd_wnd)
(2418,(long)
(2419,)
(2420,snd_una)
(2421,tp)
(2422,NULL)
(2423,mb != NULL)
(2424,TCPSTAT_INC(tcps_sndacks)
(2425,moff)
(2426,tp->t_flags2 &= ~TF2_PLPMTU_PMTUD)
(2427,ip + 1)
(2428,tcp_timer_active(tp, TT_REXMT)
(2429,flags)
(2430,tp)
(2431,max_len)
(2432,2)
(2433,goto again;)
(2434,tp->t_inpcb)
(2435,csum_flags)
(2436,t_state)
(2437,0)
(2438,sb_cc)
(2439,sizeof (struct tcphdr)
(2440,recwin)
(2441,p->rxmit)
(2442,m_len)
(2443,0)
(2444,sendwin)
(2445,m)
(2446,tp)
(2447,tp->sackhint.sack_bytes_rexmit)
(2448,NULL)
(2449,tp)
(2450,0)
(2451,isipv6 = (tp->t_inpcb->inp_vflag & INP_IPV6)
(2452,tp)
(2453,!isipv6)
(2454,if (so->so_snd.sb_cc && !tcp_timer_active(tp, TT_REXMT)
(2455,*ip6)
(2456,th->th_win = htons((u_short)
(2457,opt)
(2458,to.to_flags)
(2459,INP_WLOCK_ASSERT(tp->t_inpcb)
(2460,)
(2461,tp)
(2462,flags &= ~TH_FIN)
(2463,t_flags2)
(2464,flags)
(2465,)
(2466,tp->t_flags)
(2467,optlen)
(2468,)
(2469,!tcp_timer_active(tp, TT_REXMT)
(2470,tp->t_flags & TF_REQ_SCALE)
(2471,panic("tcphdr too big")
(2472,tp->rcv_nxt + recwin)
(2473,(long)
(2474,MHLEN - hdrlen - max_linkhdr)
(2475,tp)
(2476,so)
(2477,error)
(2478,NULL)
(2479,snd_cwnd)
(2480,th->th_ack)
(2481,1)
(2482,rcv_scale)
(2483,if (tp->t_flags & TF_ACKNOW)
(2484,recwin)
(2485,len)
(2486,ro_rt)
(2487,(long)
(2488,m_next)
(2489,off--)
(2490,len)
(2491,m)
(2492,if_hw_tsomaxsegsize != 0)
(2493,error)
(2494,t_inpcb)
(2495,NULL)
(2496,TT_PERSIST)
(2497,tp)
(2498,MT_DATA)
(2499,to_tsecr)
(2500,len = max_len)
(2501,)
(2502,maxburst = TCP_MAXBURST)
(2503,to.to_mss = tcp_mssopt(&tp->t_inpcb->inp_inc)
(2504,TF_NOPUSH)
(2505,sack_rxmit)
(2506,tp->t_inpcb)
(2507,tp)
(2508,TT_PERSIST)
(2509,rxmit)
(2510,goto dontupdate;)
(2511,sack_rxmit == 0)
(2512,tp->snd_max = tp->snd_nxt + len)
(2513,IPTOS_ECN_ECT0)
(2514,to.to_signature)
(2515,so)
(2516,cwin)
(2517,tp)
(2518,th->th_seq = htonl(tp->snd_nxt)
(2519,len = ((long)
(2520,case ENOBUFS:)
(2521,INP_IPV6)
(2522,recwin)
(2523,so_snd)
(2524,tp->t_tsomaxsegcount)
(2525,if_hw_tsomaxsegsize = tp->t_tsomaxsegsize)
(2526,ulmin(cwin,\n\\n\\t\\t\\t\\t\\t\\t   tp->snd_recover - p->rxmit)
(2527,so)
(2528,m_pkthdr)
(2529,if (flags & (TH_SYN|TH_FIN)
(2530,tp->snd_nxt)
(2531,th)
(2532,u_short)
(2533,recwin)
(2534,m)
(2535,off)
(2536,NULL)
(2537,rcv_adv)
(2538,if (MHLEN < hdrlen + max_linkhdr)
(2539,t_flags)
(2540,MHLEN < hdrlen + max_linkhdr)
(2541,tp->t_flags)
(2542,tp->t_flags & TF_SENTFIN)
(2543,m->m_pkthdr)
(2544,TH_SYN)
(2545,!isipv6)
(2546,0)
(2547,to)
(2548,!tcp_timer_active(tp, TT_PERSIST)
(2549,optlen)
(2550,TF_ECN_SND_ECE)
(2551,m->m_len += len)
(2552,flags & TH_FIN &&\n\\n\\t    ((tp->t_flags & TF_SENTFIN)
(2553,)
(2554,0)
(2555,tp->snd_up)
(2556,tcp_mss_update(tp, -1, mtu, NULL, NULL)
(2557,if (sendalot)
(2558,tso = 1)
(2559,flags)
(2560,inp_socket)
(2561,if_hw_tsomaxsegcount)
(2562,TH_SYN)
(2563,"[%s:%d]: len < 0")
(2564,tcp_mssopt(&tp->t_inpcb->inp_inc)
(2565,)
(2566,th)
(2567,t_flags)
(2568,MHLEN)
(2569,TT_REXMT)
(2570,tp)
(2571,tp->snd_nxt)
(2572,p)
(2573,bzero(&ro, sizeof(ro)
(2574,(flags & TH_SYN)
(2575,0)
(2576,tp)
(2577,tp->snd_una)
(2578,recwin)
(2579,ro.ro_rt)
(2580,tp->t_flags)
(2581,tp)
(2582,error = ip6_output(m, tp->t_inpcb->in6p_outputopts, &ro,\n\\n\\t\\t    ((so->so_options & SO_DONTROUTE)
(2583,tp)
(2584,if (max_linkhdr + hdrlen > MCLBYTES)
(2585,if (SEQ_GT(tp->rcv_adv, tp->rcv_nxt)
(2586,tp)
(2587,mlen)
(2588,to.to_flags)
(2589,!tcp_timer_active(tp, TT_REXMT)
(2590,snd_max)
(2591,snd_una)
(2592,m->m_pkthdr)
(2593,tp->snd_max)
(2594,th->th_flags = flags)
(2595,so->so_options)
(2596,so)
(2597,tp)
(2598,min(sbspace(&so->so_rcv)
(2599,0)
(2600,TT_PERSIST)
(2601,t_flags)
(2602,len)
(2603,sack_bytes_rexmit)
(2604,t_flags)
(2605,TF_SACK_PERMIT)
(2606,xlen)
(2607,p->rxmit -= len)
(2608,tp)
(2609,t_rxtcur)
(2610,flags)
(2611,maxburst)
(2612,TF_SACK_PERMIT)
(2613,tp)
(2614,tp->snd_nxt)
(2615,sendalot)
(2616,)
(2617,sack_bytes_rexmit)
(2618,t_flags)
(2619,so->so_snd.sb_hiwat + V_tcp_autosndbuf_inc)
(2620,)
(2621,sack_rxmit = 0)
(2622,cwin = 0)
(2623,)
(2624,"%s: IP version incorrect: %d")
(2625,if (SEQ_GT(tp->snd_nxt, tp->snd_max)
(2626,)
(2627,tcp_outflags[tp->t_state])
(2628,KASSERT(off >= 0,("%s: sack block to the left of una : %d",\n\\n\\t\\t    __func__, off)
(2629,sendwin)
(2630,sack_rxmit)
(2631,TCPSTAT_ADD(tcps_sndrexmitbyte, len)
(2632,to.to_wscale = tp->request_r_scale)
(2633,m_gethdr(M_NOWAIT, MT_DATA)
(2634,m)
(2635,min(mlen,\n\\n\\t\\t\\t\\t\\t\\t    if_hw_tsomaxsegcount *\n\\n\\t\\t\\t\\t\\t\\t    if_hw_tsomaxsegsize)
(2636,t_maxseg)
(2637,error = ENOBUFS)
(2638,snd_nxt)
(2639,tp)
(2640,sack_rxmit)
(2641,SEQ_LT(p->rxmit + len, tp->snd_una + so->so_snd.sb_cc)
(2642,tp->t_flags & TF_ACKNOW)
(2643,TH_ECE)
(2644,if (len >= tp->max_sndwnd / 2 && tp->max_sndwnd > 0)
(2645,if (flags & TH_FIN)
(2646,so)
(2647,rxmit)
(2648,m->m_pkthdr)
(2649,(long)
(2650,tp->t_flags |= TF_SENTFIN)
(2651,if (len)
(2652,t_inpcb)
(2653,tp)
(2654,snd_nxt)
(2655,TF_SENTFIN)
(2656,tp)
(2657,0)
(2658,so)
(2659,tcp_timer_activate(tp, TT_PERSIST, 0)
(2660,htons(sizeof(struct tcphdr)
(2661,mb)
(2662,tcpip_fillheaders(tp->t_inpcb, ip, th)
(2663,cwin = tp->snd_cwnd -\n\\n\\t\\t\\t\\t\\t(tp->snd_nxt - tp->sack_newdata)
(2664,ipoptlen)
(2665,len)
(2666,to.to_nsacks = tp->rcv_numsacks)
(2667,m_len)
(2668,recwin = (long)
(2669,TT_DELACK)
(2670,moff)
(2671,t_maxseg)
(2672,tp)
(2673,sb_hiwat)
(2674,m->m_pkthdr.csum_flags)
(2675,tp->t_flags)
(2676,isipv6)
(2677,t_flags)
(2678,m->m_pkthdr.csum_flags = CSUM_TCP_IPV6)
(2679,tp->t_state == TCPS_ESTABLISHED)
(2680,optlen)
(2681,tp->rcv_numsacks > 0)
(2682,~TF_LASTIDLE)
(2683,TF_SACK_PERMIT)
(2684,ip)
(2685,ip->ip_src)
(2686,tp->rcv_nxt)
(2687,((flags & TH_SYN)
(2688,tp->snd_max)
(2689,__func__)
(2690,tp->t_rtseq = startseq)
(2691,case ENETDOWN:)
(2692,maxburst)
(2693,t_inpcb)
(2694,snd_max)
(2695,ip6)
(2696,tp->snd_una)
(2697,so)
(2698,TH_SYN)
(2699,len = max_len)
(2700,ipov = (struct ipovly *)
(2701,sizeof (struct ip6_hdr)
(2702,tp->t_flags & TF_SIGNATURE)
(2703,to)
(2704,t_inpcb)
(2705,mtod(m, caddr_t)
(2706,len)
(2707,so)
(2708,t_flags)
(2709,error)
(2710,sizeof(struct tcphdr)
(2711,tp)
(2712,p)
(2713,tp->t_flags2 |= TF2_PLPMTU_PMTUD)
(2714,mb)
(2715,moff = 0)
(2716,p)
(2717,len)
(2718,tp)
(2719,V_tcp_do_autosndbuf)
(2720,tp->t_flags)
(2721,snd_nxt)
(2722,len + optlen + ipoptlen)
(2723,tcps_sndpack)
(2724,tp->snd_una)
(2725,ticks)
(2726,so->so_rcv.sb_hiwat)
(2727,tp->t_rcvtime)
(2728,cwin)
(2729,howmany(mlen,\n\\n\\t\\t\\t\\t\\t    if_hw_tsomaxsegsize)
(2730,)
(2731,tp->sack_newdata)
(2732,case EHOSTDOWN:)
(2733,recwin = 0)
(2734,ip6)
(2735,if (tcp_timer_active(tp, TT_DELACK)
(2736,again:)
(2737,SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc)
(2738,0)
(2739,1)
(2740,tp)
(2741,so->so_snd.sb_cc)
(2742,m)
(2743,tp)
(2744,tp->t_flags2 &= ~TF2_PLPMTU_MAXSEGSNT)
(2745,to.to_mss)
(2746,tp)
(2747,~TH_FIN)
(2748,t_flags)
(2749,ts_offset)
(2750,tp)
(2751,adv)
(2752,__func__)
(2753,idle)
(2754,tp->t_inpcb)
(2755,th->th_urp)
(2756,if (len >= tp->t_maxseg)
(2757,~TH_SYN)
(2758,tp->t_flags)
(2759,return (0)
(2760,case EHOSTUNREACH:)
(2761,m)
(2762,struct tcphdr *)
(2763,mb = mb->m_next)
(2764,m_pkthdr)
(2765,rxmit)
(2766,recwin >= 0 && SEQ_GT(tp->rcv_nxt + recwin, tp->rcv_adv)
(2767,m_data)
(2768,sack_bytes_rxmt)
(2769,tp->t_rxtshift >= 1)
(2770,th)
(2771,)
(2772,if (len || (flags & (TH_SYN|TH_FIN)
(2773,tp->t_flags)
(2774,tp->snd_nxt)
(2775,moff)
(2776,goto send;)
(2777,m->m_next)
(2778,snd_nxt)
(2779,ipov->ih_len)
(2780,if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc)
(2781,tcp_timer_active(tp, TT_DELACK)
(2782,snd_nxt)
(2783,tp->t_inpcb->inp_vflag)
(2784,tp)
(2785,return (0)
(2786,)
(2787,t_flags)
(2788,1)
(2789,len < 0)
(2790,tp->t_state == TCPS_SYN_SENT)
(2791,MH_ALIGN(m, hdrlen)
(2792,ipov)
(2793,tp)
(2794,tp->t_flags & TF_NOOPT)
(2795,TF_FORCEDATA)
(2796,len)
(2797,case EPERM:)
(2798,tp->t_sndzerowin)
(2799,th_sum)
(2800,V_path_mtu_discovery)
(2801,sendwin)
(2802,0)
(2803,(struct tcphdr *)
(2804,!tcp_timer_active(tp, TT_REXMT)
(2805,tcps_sack_rexmit_bytes)
(2806,8 * 7)
(2807,tp->t_flags)
(2808,ip6)
(2809,tp->t_flags |= TF_RXWIN0SENT)
(2810,so_snd)
(2811,tso)
(2812,(tp->t_flags & TF_SACK_PERMIT)
(2813,if ((tp->t_flags & TF_SACK_PERMIT)
(2814,m->m_len = hdrlen)
(2815,(flags & TH_SYN)
(2816,(long)
(2817,tcps_sndprobe)
(2818,flags)
(2819,tp->rcv_nxt + recwin)
(2820,rcv_adv)
(2821,TCPS_SYN_SENT)
(2822,th_flags)
(2823,th)
(2824,tp->t_maxopd - optlen)
(2825,t_flags)
(2826,so->so_snd)
(2827,sendalot)
(2828,t_state)
(2829,so_snd)
(2830,tp->t_flags &= ~TF_RXWIN0SENT)
(2831,(tp->t_flags & TF_FORCEDATA)
(2832,8)
(2833,len >= tp->max_sndwnd / 2)
(2834,if_hw_tsomaxsegcount)
(2835,tp)
(2836,~TF_ECN_SND_CWR)
(2837,tp->snd_max)
(2838,hdrlen)
(2839,)
(2840,ip6)
(2841,TT_PERSIST)
(2842,long)
(2843,len = 0)
(2844,tp)
(2845,1)
(2846,tp)
(2847,if (max_len <= 0)
(2848,tp->t_maxopd - optlen)
(2849,if (error == EMSGSIZE && ro.ro_rt != NULL)
(2850,tp->t_flags & TF_NEEDSYN)
(2851,if ((off + len)
(2852,ip_ttl)
(2853,tp->snd_cwnd -\n\\n\\t\\t\\t\\t\\t(tp->snd_nxt - tp->sack_newdata)
(2854,tp->ts_recent)
(2855,if (sack_rxmit)
(2856,if (tp->t_rxtshift >= 1)
(2857,!tcp_timer_active(tp, TT_REXMT)
(2858,(long)
(2859,SEQ_GT(p->end, tp->snd_recover)
(2860,m->m_pkthdr)
(2861,)
(2862,TH_PUSH)
(2863,so->so_snd.sb_cc && !tcp_timer_active(tp, TT_REXMT)
(2864,ip_dst)
(2865,(tp->t_flags & TF_SACK_PERMIT)
(2866,)
(2867,tp->snd_nxt)
(2868,flags)
(2869,tp)
(2870,)
(2871,flags |= TH_CWR)
(2872,so->so_snd.sb_cc)
(2873,tp)
(2874,tp)
(2875,cc_after_idle(tp)
(2876,0)
(2877,so->so_snd)
(2878,tp->t_flags & TF_NEEDSYN)
(2879,if (off < so->so_snd.sb_cc)
(2880,tp->t_maxopd)
(2881,error != EPERM)
(2882,TH_ECE)
(2883,frags = howmany(mlen,\n\\n\\t\\t\\t\\t\\t    if_hw_tsomaxsegsize)
(2884,th + 1)
(2885,to.to_flags)
(2886,tcp_ts_getticks()
(2887,dontupdate:)
(2888,tp->t_inpcb->inp_options)
(2889,snd_nxt)
(2890,so)
(2891,if (tp->t_state == TCPS_SYN_SENT && V_tcp_do_ecn)
(2892,TT_REXMT)
(2893,tp->t_flags2 |= TF2_PLPMTU_MAXSEGSNT)
(2894,moff)
(2895,sack_rxmit)
(2896,)
(2897,ipsec_optlen)
(2898,if (m == NULL)
(2899,sack_rxmit && tp->snd_nxt != tp->snd_max)
(2900,IP_MAXPACKET)
(2901,hdrlen)
(2902,ipov)
(2903,hdrlen + ipoptlen - ipsec_optlen)
(2904,tp)
(2905,0)
(2906,rfbuf_ts)
(2907,tp->t_inpcb)
(2908,if (moff != 0)
(2909,m->m_pkthdr)
(2910,sendalot && --maxburst)
(2911,sack_rxmit)
(2912,connect__request)
(2913,if (tso)
(2914,tp->snd_cwnd)
(2915,p->end - p->rxmit)
(2916,tcp_timer_active(tp, TT_PERSIST)
(2917,V_path_mtu_discovery)
(2918,sbspace(&so->so_rcv)
(2919,if (isipv6)
(2920,so)
(2921,m->m_pkthdr.tso_segsz)
(2922,ipoptlen == 0)
(2923,tp)
(2924,tp->snd_nxt)
(2925,ip_src)
(2926,mtu)
(2927,so->so_snd)
(2928,if (flags & TH_SYN)
(2929,goto out;)
(2930,tp->snd_up)
(2931,tp->t_flags & TF_FORCEDATA)
(2932,NULL)
(2933,error)
(2934,rcv_scale)
(2935,tp->t_rxtshift)
(2936,so)
(2937,ip6)
(2938,m_pkthdr)
(2939,isipv6)
(2940,tp->t_rxtshift)
(2941,0)
(2942,long)
(2943,th->th_win)
(2944,TF_NEEDSYN)
(2945,(u_short)
(2946,len > max_len)
(2947,tp->t_flags & TF_TOE)
(2948,ro.ro_rt->rt_mtu)
(2949,tp)
(2950,flags |= TH_ECE|TH_CWR)
(2951,tp)
(2952,htons((u_short)
(2953,tp->t_flags)
(2954,sizeof(*ip6)
(2955,th_ack)
(2956,t_rcvtime)
(2957,len)
(2958,ip)
(2959,tp)
(2960,sack_newdata)
(2961,t_flags)
(2962,NULL)
(2963,max_linkhdr)
(2964,to.to_flags |= TOF_SACK)
(2965,so->so_snd.sb_cc)
(2966,sendalot)
(2967,flags)
(2968,0)
(2969,++xlen)
(2970,rcv_adv)
(2971,tp->t_rxtshift)
(2972,m->m_next == NULL)
(2973,rcv_nxt)
(2974,moff)
(2975,(flags & TH_SYN)
(2976,NULL)
(2977,snd_nxt)
(2978,t_softerror)
(2979,TCP_MAXWIN)
(2980,so_rcv)
(2981,max_len)
(2982,so->so_snd.sb_flags)
(2983,tp)
(2984,adv >= (long)
(2985,so)
(2986,if_hw_tsomaxsegsize)
(2987,tp)
(2988,flags & TH_SYN)
(2989,!tcp_timer_active(tp, TT_REXMT)
(2990,tp->t_maxopd)
(2991,oldwin = 0)
(2992,)
(2993,max_len += min(mlen,\n\\n\\t\\t\\t\\t\\t\\t    if_hw_tsomaxsegcount *\n\\n\\t\\t\\t\\t\\t\\t    if_hw_tsomaxsegsize)
(2994,m)
(2995,so->so_rcv)
(2996,m_copy(mb, moff, (int)
(2997,sendwin = min(tp->snd_wnd, tp->snd_cwnd)
(2998,0)
(2999,p)
(3000,th = (struct tcphdr *)
(3001,tp->snd_recover)
(3002,optlen = tcp_addoptions(&to, opt)
(3003,(long)
(3004,len > tp->t_maxopd - optlen)
(3005,so->so_rcv.sb_hiwat / 4)
(3006,)
(3007,NULL)
(3008,)
(3009,adv -= oldwin)
(3010,)
(3011,m->m_pkthdr)
(3012,rcv_scale)
(3013,tcp_setpersist(tp)
(3014,tp->snd_nxt)
(3015,max_len = (if_hw_tsomax - hdrlen)
(3016,flags & TH_SYN)
(3017,ro.ro_rt)
(3018,len)
(3019,optlen)
(3020,inp_vflag)
(3021,NULL)
(3022,MHLEN)
(3023,snd_nxt)
(3024,TH_URG)
(3025,recwin <= (long)
(3026,sendalot)
(3027,snd_cwnd)
(3028,tp)
(3029,&so->so_snd)
(3030,t_maxseg)
(3031,optlen + ipoptlen)
(3032,SOCKBUF_UNLOCK_ASSERT(&so->so_snd)
(3033,recwin < (long)
(3034,tp)
(3035,m->m_pkthdr)
(3036,if (len >= tp->t_maxseg)
(3037,isipv6)
(3038,tp)
(3039,tp)
(3040,optlen)
(3041,tp->t_flags)
(3042,len)
(3043,cwin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^