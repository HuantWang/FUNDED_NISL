-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_16_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        break;
    }
    while(1)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
47,48
48,49
50,51
51,52
51,53
53,54
53,55
55,56
56,57
58,59
58,60
59,60
59,61
59,62
59,63
59,64
59,65
59,66
59,67
59,68
59,69
59,70
59,71
59,72
59,73
60,61
61,62
61,63
62,63
64,65
64,66
64,67
64,68
65,66
67,68
69,70
71,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
86,87
89,90
90,91
91,92
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
102,104
103,104
103,105
104,105
104,106
105,106
109,110
111,112
112,113
112,114
113,114
113,115
114,115
117,118
117,119
118,119
120,121
122,123
122,124
123,124
123,125
124,125
124,126
124,127
124,128
125,126
127,128
129,130
129,131
130,131
130,132
131,132
133,134
135,136
136,137
138,139
139,140
140,141
142,143
144,145
146,147
146,148
147,148
147,149
148,149
148,150
148,151
149,150
151,152
153,154
155,156
157,158
159,160
160,161
160,162
161,162
163,164
163,165
163,166
163,167
164,165
166,167
168,169
170,171
172,173
172,174
173,174
173,175
174,175
176,177
178,179
180,181
181,182
181,183
182,183
184,185
184,186
184,187
184,188
184,189
185,186
187,188
189,190
191,192
191,193
192,193
196,197
196,198
197,198
197,199
198,199
198,200
199,200
201,202
203,204
203,205
204,205
207,208
209,210
210,211
210,212
211,212
211,213
212,213
214,215
217,218
218,219
218,220
219,220
221,222
221,223
221,224
221,225
222,223
224,225
226,227
230,231
230,232
231,232
231,233
232,233
234,235
236,237
237,238
238,239
238,240
239,240
241,242
243,244
243,245
244,245
244,246
245,246
247,248
249,250
250,251
251,252
251,253
252,253
254,255
257,258
257,259
259,260
259,261
260,261
260,262
261,262
262,263
262,264
264,265
264,266
267,268
267,269
267,270
268,269
268,270
269,270
271,272
271,273
272,273
274,275
276,277
276,278
276,279
276,280
276,281
277,278
278,279
278,280
279,280
281,282
281,283
282,283
282,284
284,285
286,287
286,288
287,288
289,290
289,291
290,291
292,293
293,294
293,295
296,297
296,298
297,298
297,299
298,299
300,301
302,303
303,304
304,305
304,306
305,306
307,308
309,310
310,311
310,312
310,313
311,312
313,314
315,316
317,318
318,319
318,320
319,320
321,322
323,324
324,325
324,326
325,326
327,328
329,330
330,331
331,332
331,333
332,333
-----nextToken-----
2,4,9,11,15,16,18,23,25,29,31,35,37,40,44,46,49,52,54,57,63,66,68,70,72,76,78,80,84,87,88,92,97,98,100,106,107,108,110,115,116,119,121,126,128,132,134,137,141,143,145,150,152,154,156,158,162,165,167,169,171,175,177,179,183,186,188,190,193,194,195,200,202,205,206,208,213,215,216,220,223,225,227,228,229,233,235,240,242,246,248,253,255,256,258,263,265,266,270,273,275,280,283,285,288,291,294,295,299,301,306,308,312,314,316,320,322,326,328,333,334,335
-----computeFrom-----
13,14
13,15
61,62
61,63
74,75
74,76
94,95
94,96
102,103
102,104
112,113
112,114
123,124
123,125
147,148
147,149
160,161
160,162
173,174
173,175
181,182
181,183
191,192
191,193
197,198
197,199
198,199
198,200
203,204
203,205
210,211
210,212
218,219
218,220
231,232
231,233
244,245
244,246
268,269
268,270
278,279
278,280
289,290
289,291
297,298
297,299
-----guardedBy-----
233,242
246,255
275,316
270,291
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_16_bad(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_16_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_16_bad
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
break;
while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
1
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
-----joern-----
(124,144,0)
(131,81,0)
(60,193,0)
(194,127,0)
(154,150,0)
(56,162,0)
(172,26,0)
(87,26,0)
(179,65,0)
(69,11,0)
(21,41,0)
(91,142,0)
(140,74,0)
(12,144,0)
(45,162,0)
(135,159,0)
(15,150,0)
(44,131,0)
(62,179,0)
(140,26,0)
(52,150,0)
(196,144,0)
(107,21,0)
(142,159,0)
(30,162,0)
(190,26,0)
(0,15,0)
(53,176,0)
(139,26,0)
(163,38,0)
(97,26,0)
(127,98,0)
(168,54,0)
(147,43,0)
(161,198,0)
(198,161,0)
(101,108,0)
(180,72,0)
(94,150,0)
(29,15,0)
(150,185,0)
(196,65,0)
(121,14,0)
(156,27,0)
(125,192,0)
(76,46,0)
(115,114,0)
(159,142,0)
(78,34,0)
(193,65,0)
(13,130,0)
(9,179,0)
(169,11,0)
(110,4,0)
(181,144,0)
(11,159,0)
(1,65,0)
(69,23,0)
(163,26,0)
(104,65,0)
(176,121,0)
(28,113,0)
(95,26,0)
(128,12,0)
(59,37,0)
(88,7,0)
(42,98,0)
(193,172,0)
(71,74,0)
(189,114,0)
(98,127,0)
(155,139,0)
(83,150,0)
(164,122,0)
(22,4,0)
(50,198,0)
(103,150,0)
(61,35,0)
(133,152,0)
(89,65,0)
(152,177,0)
(131,44,0)
(126,193,0)
(8,74,0)
(198,11,0)
(121,176,0)
(123,41,0)
(48,150,0)
(161,178,0)
(192,21,0)
(32,194,0)
(96,16,0)
(90,46,0)
(141,120,0)
(81,131,0)
(145,150,0)
(10,177,0)
(7,121,0)
(25,18,0)
(85,45,0)
(136,179,0)
(177,131,0)
(63,80,0)
(5,72,0)
(63,104,0)
(134,30,0)
(22,140,0)
(157,76,0)
(195,80,0)
(64,159,0)
(113,17,0)
(30,177,0)
(178,161,0)
(74,140,0)
(51,46,0)
(159,172,0)
(100,89,0)
(137,104,0)
(79,21,0)
(158,38,0)
(12,65,0)
(191,76,0)
(27,104,0)
(11,26,0)
(23,26,0)
(118,150,0)
(70,185,0)
(112,180,0)
(80,63,0)
(109,93,0)
(82,26,0)
(174,186,0)
(76,172,0)
(4,22,0)
(3,184,0)
(173,150,0)
(170,41,0)
(127,194,0)
(55,41,0)
(72,180,0)
(68,184,0)
(65,179,0)
(175,43,0)
(33,12,0)
(36,150,0)
(66,178,0)
(39,74,0)
(14,121,0)
(22,21,0)
(130,132,0)
(102,49,0)
(84,77,0)
(192,140,0)
(148,92,0)
(165,89,0)
(93,102,0)
(159,11,0)
(57,140,0)
(35,163,0)
(46,150,0)
(37,26,0)
(104,63,0)
(54,162,0)
(43,65,0)
(44,22,0)
(104,27,0)
(73,43,0)
(183,178,0)
(22,44,0)
(178,11,0)
(149,175,0)
(131,177,0)
(77,19,0)
(196,188,0)
(86,23,0)
(172,193,0)
(113,46,0)
(75,150,0)
(143,159,0)
(102,93,0)
(144,150,0)
(187,142,0)
(111,69,0)
(104,138,0)
(105,22,0)
(122,26,0)
(65,26,0)
(180,139,0)
(43,175,0)
(151,72,0)
(197,69,0)
(146,122,0)
(121,7,0)
(47,127,0)
(40,193,0)
(31,196,0)
(58,19,0)
(54,177,0)
(184,37,0)
(16,192,0)
(177,162,0)
(182,14,0)
(129,138,0)
(24,26,0)
(138,104,0)
(45,177,0)
(20,45,0)
(199,152,0)
(113,172,0)
(63,6,0)
(67,198,0)
(38,163,0)
(127,26,0)
(2,77,0)
(192,16,0)
(6,63,0)
(106,35,0)
(116,7,0)
(117,160,0)
(153,172,0)
(114,172,0)
(159,135,1)
(80,195,1)
(127,194,1)
(99,70,1)
(139,155,1)
(158,35,1)
(180,112,1)
(159,172,1)
(47,98,1)
(106,139,1)
(167,58,1)
(187,91,1)
(33,128,1)
(45,177,1)
(174,161,1)
(171,76,1)
(129,104,1)
(104,27,1)
(14,182,1)
(21,79,1)
(39,71,1)
(110,105,1)
(16,96,1)
(85,20,1)
(7,116,1)
(152,133,1)
(54,168,1)
(168,45,1)
(156,63,1)
(119,21,1)
(50,11,1)
(138,129,1)
(126,40,1)
(140,74,1)
(128,25,1)
(88,46,1)
(90,51,1)
(72,5,1)
(46,90,1)
(60,126,1)
(155,180,1)
(131,81,1)
(30,134,1)
(148,171,1)
(171,113,1)
(12,33,1)
(135,142,1)
(64,143,1)
(136,62,1)
(31,12,1)
(198,11,1)
(182,121,1)
(101,114,1)
(130,13,1)
(131,44,1)
(113,28,1)
(112,72,1)
(165,65,1)
(79,107,1)
(121,176,1)
(142,187,1)
(30,177,1)
(114,172,1)
(193,65,1)
(176,53,1)
(134,54,1)
(175,43,1)
(45,85,1)
(175,149,1)
(111,161,1)
(153,175,1)
(199,177,1)
(63,80,1)
(38,158,1)
(159,142,1)
(151,37,1)
(116,88,1)
(164,14,1)
(61,106,1)
(14,121,1)
(178,183,1)
(149,43,1)
(12,144,1)
(58,30,1)
(141,175,1)
(22,140,1)
(105,10,1)
(76,46,1)
(161,178,1)
(89,100,1)
(37,59,1)
(25,14,1)
(91,64,1)
(71,57,1)
(121,7,1)
(113,46,1)
(29,119,1)
(28,76,1)
(23,86,1)
(122,146,1)
(196,31,1)
(138,104,1)
(196,65,1)
(35,61,1)
(100,165,1)
(99,119,1)
(63,6,1)
(70,171,1)
(198,67,1)
(183,66,1)
(180,72,1)
(102,93,1)
(137,163,1)
(124,15,1)
(104,63,1)
(27,156,1)
(167,99,1)
(178,11,1)
(15,0,1)
(191,196,1)
(40,153,1)
(70,148,1)
(59,184,1)
(179,9,1)
(43,73,1)
(184,68,1)
(98,42,1)
(163,38,1)
(54,177,1)
(146,164,1)
(172,193,1)
(86,69,1)
(68,3,1)
(78,89,1)
(128,101,1)
(20,152,1)
(67,50,1)
(13,192,1)
(115,189,1)
(12,65,1)
(127,98,1)
(147,138,1)
(42,89,1)
(69,197,1)
(66,198,1)
(8,39,1)
(166,140,1)
(3,127,1)
(65,179,1)
(192,21,1)
(0,29,1)
(196,144,1)
(128,166,1)
(152,177,1)
(20,102,1)
(10,192,1)
(104,65,1)
(128,117,1)
(88,166,1)
(58,130,1)
(117,138,1)
(192,16,1)
(144,181,1)
(114,115,1)
(157,191,1)
(191,12,1)
(44,22,1)
(22,21,1)
(113,172,1)
(192,140,1)
(143,169,1)
(93,109,1)
(1,122,1)
(197,111,1)
(128,141,1)
(161,198,1)
(128,78,1)
(96,125,1)
(76,172,1)
(195,137,1)
(125,99,1)
(11,159,1)
(189,172,1)
(169,114,1)
(4,110,1)
(57,23,1)
(43,65,1)
(32,47,1)
(133,199,1)
(62,1,1)
(69,11,1)
(9,136,1)
(128,174,1)
(53,7,1)
(193,60,1)
(51,144,1)
(109,152,1)
(22,4,1)
(181,124,1)
(76,157,1)
(177,131,1)
(5,151,1)
(74,8,1)
(89,65,1)
(73,147,1)
(194,32,1)
(105,192,2)
(130,192,2)
(196,65,2)
(16,99,2)
(146,14,2)
(156,89,2)
(121,119,2)
(7,166,2)
(14,119,2)
(129,89,2)
(91,114,2)
(89,65,2)
(175,138,2)
(22,140,2)
(62,14,2)
(86,161,2)
(153,175,2)
(42,89,2)
(20,192,2)
(187,114,2)
(29,119,2)
(117,138,2)
(126,175,2)
(78,89,2)
(169,114,2)
(11,159,2)
(161,114,2)
(192,21,2)
(102,93,2)
(178,198,2)
(43,65,2)
(125,99,2)
(163,89,2)
(51,119,2)
(127,98,2)
(196,12,2)
(149,138,2)
(76,46,2)
(199,192,2)
(192,16,2)
(88,119,2)
(58,99,2)
(69,11,2)
(38,89,2)
(66,198,2)
(109,152,2)
(71,161,2)
(180,72,2)
(178,11,2)
(127,89,2)
(168,192,2)
(192,140,2)
(4,192,2)
(63,6,2)
(157,119,2)
(114,172,2)
(161,198,2)
(161,178,2)
(25,14,2)
(23,161,2)
(50,114,2)
(5,89,2)
(44,22,2)
(181,119,2)
(165,14,2)
(177,131,2)
(104,63,2)
(101,114,2)
(68,89,2)
(196,144,2)
(179,14,2)
(54,192,2)
(115,175,2)
(136,14,2)
(152,192,2)
(11,114,2)
(14,166,2)
(54,177,2)
(139,89,2)
(159,172,2)
(65,14,2)
(57,161,2)
(63,80,2)
(191,119,2)
(142,114,2)
(140,161,2)
(90,119,2)
(80,89,2)
(64,114,2)
(116,166,2)
(174,161,2)
(88,166,2)
(96,99,2)
(93,152,2)
(59,89,2)
(67,114,2)
(193,175,2)
(127,194,2)
(14,121,2)
(189,175,2)
(3,89,2)
(12,65,2)
(177,192,2)
(121,166,2)
(128,119,2)
(106,89,2)
(22,4,2)
(135,114,2)
(60,175,2)
(148,171,2)
(164,14,2)
(22,21,2)
(10,192,2)
(138,89,2)
(30,192,2)
(138,104,2)
(28,76,2)
(113,46,2)
(195,89,2)
(113,172,2)
(44,192,2)
(182,166,2)
(35,89,2)
(13,192,2)
(47,89,2)
(89,14,2)
(182,119,2)
(122,14,2)
(46,119,2)
(166,161,2)
(152,177,2)
(113,76,2)
(121,176,2)
(30,177,2)
(114,175,2)
(171,119,2)
(159,114,2)
(45,177,2)
(100,14,2)
(131,81,2)
(158,89,2)
(144,119,2)
(137,89,2)
(121,7,2)
(192,99,2)
(72,89,2)
(27,89,2)
(112,89,2)
(73,138,2)
(172,175,2)
(70,119,2)
(15,119,2)
(8,161,2)
(198,11,2)
(40,175,2)
(176,166,2)
(155,89,2)
(33,119,2)
(184,89,2)
(22,192,2)
(110,192,2)
(74,161,2)
(69,161,2)
(104,89,2)
(12,119,2)
(124,119,2)
(61,89,2)
(176,119,2)
(7,119,2)
(12,144,2)
(151,89,2)
(134,192,2)
(104,27,2)
(0,119,2)
(32,89,2)
(39,161,2)
(133,192,2)
(53,166,2)
(43,138,2)
(116,119,2)
(140,74,2)
(193,65,2)
(143,114,2)
(31,12,2)
(147,138,2)
(1,14,2)
(63,89,2)
(85,192,2)
(197,161,2)
(76,172,2)
(104,65,2)
(180,89,2)
(98,89,2)
(194,89,2)
(65,179,2)
(111,161,2)
(131,44,2)
(141,175,2)
(53,119,2)
(131,192,2)
(172,193,2)
(183,198,2)
(102,152,2)
(198,114,2)
(9,14,2)
(175,43,2)
(37,89,2)
(45,192,2)
(163,38,2)
(76,119,2)
(159,142,2)
-----------------------------------
(0,0)
(1,listenSocket)
(2,myString)
(3,service)
(4,sizeof(wchar_t)
(5,sin_addr)
(6,struct sockaddr*)
(7,MAKEWORD(2,2)
(8,0)
(9,IPPROTO_TCP)
(10,myString)
(11,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(12,listenSocket != INVALID_SOCKET)
(13,"Input is less than the length of the source string")
(14,WSAStartup(MAKEWORD(2,2)
(15,wsaDataInit = 0)
(16,wcslen(HELLO_STRING)
(17,)
(18,)
(19,)
(20,myString)
(21,data = 0)
(22,data*sizeof(wchar_t)
(23,inputBuffer[recvResult] = \'\\0\')
(24,if (recvResult == SOCKET_ERROR || recvResult == 0)
(25,break;)
(26,)
(27,sizeof(service)
(28,acceptSocket)
(29,wsaDataInit)
(30,free(myString)
(31,listenSocket)
(32,service)
(33,INVALID_SOCKET)
(34,)
(35,service.sin_port)
(36,if (listenSocket != INVALID_SOCKET)
(37,service.sin_family = AF_INET)
(38,htons(TCP_PORT)
(39,NULL)
(40,listenSocket)
(41,)
(42,service)
(43,listen(listenSocket, LISTEN_BACKLOG)
(44,malloc(data*sizeof(wchar_t)
(45,wcscpy(myString, HELLO_STRING)
(46,acceptSocket = INVALID_SOCKET)
(47,0)
(48,listenSocket)
(49,)
(50,recvResult)
(51,acceptSocket)
(52,wsaData)
(53,wsaData)
(54,printWLine(myString)
(55,while(1)
(56,if (myString == NULL)
(57,data)
(58,break;)
(59,AF_INET)
(60,NULL)
(61,sin_port)
(62,AF_INET)
(63,(struct sockaddr*)
(64,inputBuffer)
(65,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(66,recvResult)
(67,SOCKET_ERROR)
(68,sin_family)
(69,inputBuffer[recvResult])
(70,break;)
(71,inputBuffer)
(72,service.sin_addr)
(73,LISTEN_BACKLOG)
(74,strtoul(inputBuffer, NULL, 0)
(75,recvResult)
(76,acceptSocket != INVALID_SOCKET)
(77,)
(78,break;)
(79,0)
(80,&service)
(81,wchar_t *)
(82,if (listenSocket == INVALID_SOCKET)
(83,service)
(84,if (data > wcslen(HELLO_STRING)
(85,HELLO_STRING)
(86,\'\\0\')
(87,if (bind(listenSocket, (struct sockaddr*)
(88,2)
(89,listenSocket == INVALID_SOCKET)
(90,INVALID_SOCKET)
(91,CHAR_ARRAY_SIZE)
(92,)
(93,-1)
(94,inputBuffer)
(95,if (WSAStartup(MAKEWORD(2,2)
(96,HELLO_STRING)
(97,if (listen(listenSocket, LISTEN_BACKLOG)
(98,&service)
(99,1)
(100,INVALID_SOCKET)
(101,break;)
(102,exit(-1)
(103,wsaDataInit)
(104,bind(listenSocket, (struct sockaddr*)
(105,data)
(106,service)
(107,data)
(108,)
(109,1)
(110,wchar_t)
(111,inputBuffer)
(112,s_addr)
(113,CLOSE_SOCKET(acceptSocket)
(114,acceptSocket == SOCKET_ERROR)
(115,SOCKET_ERROR)
(116,2)
(117,break;)
(118,acceptSocket)
(119,1)
(120,)
(121,WSAStartup(MAKEWORD(2,2)
(122,wsaDataInit = 1)
(123,data)
(124,listenSocket)
(125,data)
(126,NULL)
(127,memset(&service, 0, sizeof(service)
(128,listenSocket)
(129,SOCKET_ERROR)
(130,printLine("Input is less than the length of the source string")
(131,(wchar_t *)
(132,)
(133,NULL)
(134,myString)
(135,0)
(136,SOCK_STREAM)
(137,listenSocket)
(138,bind(listenSocket, (struct sockaddr*)
(139,service.sin_addr.s_addr = INADDR_ANY)
(140,data = strtoul(inputBuffer, NULL, 0)
(141,break;)
(142,CHAR_ARRAY_SIZE - 1)
(143,acceptSocket)
(144,listenSocket = INVALID_SOCKET)
(145,do)
(146,1)
(147,listenSocket)
(148,WSACleanup()
(149,SOCKET_ERROR)
(150,)
(151,service)
(152,myString == NULL)
(153,acceptSocket)
(154,if (wsaDataInit)
(155,INADDR_ANY)
(156,service)
(157,INVALID_SOCKET)
(158,TCP_PORT)
(159,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(160,)
(161,recvResult == SOCKET_ERROR || recvResult == 0)
(162,)
(163,service.sin_port = htons(TCP_PORT)
(164,wsaDataInit)
(165,listenSocket)
(166,0)
(167,RET)
(168,myString)
(169,recvResult)
(170,while(1)
(171,wsaDataInit)
(172,acceptSocket = accept(listenSocket, NULL, NULL)
(173,if (acceptSocket != INVALID_SOCKET)
(174,break;)
(175,listen(listenSocket, LISTEN_BACKLOG)
(176,&wsaData)
(177,myString = (wchar_t *)
(178,recvResult == 0)
(179,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(180,service.sin_addr.s_addr)
(181,INVALID_SOCKET)
(182,NO_ERROR)
(183,0)
(184,service.sin_family)
(185,)
(186,)
(187,1)
(188,)
(189,acceptSocket)
(190,if (acceptSocket == SOCKET_ERROR)
(191,acceptSocket)
(192,data > wcslen(HELLO_STRING)
(193,accept(listenSocket, NULL, NULL)
(194,sizeof(service)
(195,service)
(196,CLOSE_SOCKET(listenSocket)
(197,recvResult)
(198,recvResult == SOCKET_ERROR)
(199,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^