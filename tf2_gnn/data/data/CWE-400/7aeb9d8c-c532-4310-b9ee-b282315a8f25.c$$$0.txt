-----label-----
1
-----code-----
static void badSink(int count)
{
    if(badStatic)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
32,33
32,34
33,34
33,35
34,35
37,38
39,40
40,41
42,43
43,44
44,45
44,46
45,46
-----nextToken-----
2,4,6,8,12,18,20,22,27,28,31,35,36,38,41,46,47
-----computeFrom-----
25,26
25,27
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(int count){    if(badStatic)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
badSink(int count)
badSink
int count
int
count
count
{    if(badStatic)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
if(badStatic)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
badStatic
badStatic
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(6,22,0)
(5,10,0)
(3,1,0)
(6,7,0)
(7,6,0)
(16,4,0)
(15,10,0)
(23,22,0)
(10,3,0)
(4,8,0)
(0,11,0)
(12,11,0)
(17,11,0)
(14,3,0)
(22,6,0)
(18,17,0)
(6,2,0)
(22,11,0)
(21,19,0)
(24,6,0)
(20,3,0)
(22,11,1)
(12,0,1)
(11,12,1)
(13,22,1)
(23,17,1)
(6,2,1)
(17,11,1)
(4,16,1)
(17,18,1)
(6,7,1)
(15,5,1)
(24,23,1)
(5,9,1)
(0,10,1)
(13,9,1)
(16,22,1)
(18,4,1)
(22,6,1)
(23,11,1)
(10,15,1)
(6,24,1)
(4,22,2)
(11,9,2)
(22,9,2)
(0,9,2)
(6,7,2)
(17,22,2)
(23,22,2)
(15,9,2)
(23,9,2)
(16,22,2)
(24,22,2)
(6,9,2)
(22,6,2)
(18,22,2)
(24,9,2)
(6,2,2)
(17,11,2)
(5,9,2)
(22,11,2)
(10,9,2)
(12,9,2)
(22,22,2)
(6,22,2)
-----------------------------------
(0,i)
(1,)
(2,int count)
(3,)
(4,printLine("Hello")
(5,i)
(6,(size_t)
(7,size_t)
(8,)
(9,badStatic)
(10,i = 0)
(11,i = 0)
(12,0)
(13,RET)
(14,i)
(15,0)
(16,"Hello")
(17,i++)
(18,i)
(19,)
(20,for (i = 0; i < (size_t)
(21,if(badStatic)
(22,i < (size_t)
(23,i)
(24,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^