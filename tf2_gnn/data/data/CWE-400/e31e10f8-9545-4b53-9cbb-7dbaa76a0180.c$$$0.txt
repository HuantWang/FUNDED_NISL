-----label-----
0
-----code-----
static int driver_monitor(Bus *bus, Peer *sender, Message *message) {
        _c_cleanup_(c_list_flush) CList destinations = C_LIST_INIT(destinations);
        MatchOwner *match_owner;
        int r;

        if (!bus->n_monitors)
                return 0;

        r = message_parse_metadata(message);
        if (r)
                return error_fold(r);

        bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata);

        while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {
                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);

                c_list_unlink(&match_owner->destinations_link);

                r = connection_queue(&receiver->connection, NULL, message);
                if (r) {
                        if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {
                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);

                                connection_shutdown(&receiver->connection);

                                log_append_here(bus->log, LOG_WARNING, 0);
                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,
                                                           &sender_names, NULL,
                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,
                                                           message);
                                if (r == CONNECTION_E_QUOTA)
                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);
                                else
                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id);
                                if (r)
                                        return error_fold(r);
                        } else {
                                return error_fold(r);
                        }
                }
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
24,25
25,26
25,27
26,27
28,29
29,30
31,32
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
52,53
52,54
54,55
56,57
56,58
57,58
58,59
58,60
59,60
62,63
64,65
65,66
65,67
66,67
68,69
68,70
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
83,88
84,85
86,87
88,89
89,90
91,92
93,94
94,95
94,96
95,96
98,99
98,100
99,100
100,101
100,102
101,102
103,104
103,105
103,106
103,107
104,105
106,107
107,108
109,110
111,112
113,114
113,115
113,116
113,117
114,115
115,116
115,117
116,117
118,119
118,120
118,121
121,122
122,123
122,124
122,125
122,126
123,124
125,126
127,128
129,130
131,132
132,133
132,134
133,134
135,136
136,137
136,138
137,138
140,141
141,142
141,143
142,143
144,145
144,146
144,147
144,148
145,146
147,148
148,149
148,150
149,150
152,153
154,155
156,157
156,158
157,158
159,160
160,161
160,162
160,163
161,162
161,163
162,163
162,164
163,164
165,166
167,168
167,169
168,169
170,171
172,173
172,174
172,175
172,176
172,177
172,178
173,174
174,175
174,176
175,176
177,178
177,179
179,180
180,181
180,182
181,182
183,184
183,185
183,186
184,185
186,187
187,188
187,189
188,189
191,192
193,194
194,195
194,196
195,196
197,198
198,199
198,200
199,200
202,203
203,204
203,205
203,206
203,207
204,205
206,207
206,208
207,208
210,211
213,214
214,215
214,216
214,217
214,218
214,219
214,220
214,221
214,222
214,223
215,216
217,218
219,220
219,221
219,222
220,221
222,223
222,224
223,224
226,227
228,229
228,230
229,230
232,233
233,234
235,236
237,238
237,239
237,240
238,239
240,241
240,242
241,242
241,243
242,243
246,247
246,248
247,248
250,251
250,252
251,252
251,253
252,253
256,257
258,259
258,260
258,261
259,260
259,261
260,261
262,263
264,265
265,266
265,267
266,267
268,269
268,270
268,271
268,272
269,270
271,272
271,273
272,273
276,277
276,278
277,278
280,281
281,282
281,283
282,283
284,285
284,286
284,287
284,288
285,286
287,288
287,289
288,289
292,293
292,294
293,294
296,297
296,298
297,298
299,300
300,301
300,302
301,302
303,304
305,306
306,307
307,308
307,309
308,309
310,311
312,313
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,27,30,35,37,41,43,47,49,50,53,55,60,61,63,67,70,72,75,79,81,85,87,90,92,96,97,102,105,108,110,112,117,119,120,124,126,128,130,134,138,139,143,146,150,151,153,155,158,164,166,169,171,176,178,182,185,189,190,192,196,200,201,205,208,209,211,212,216,218,221,224,225,227,230,231,234,236,239,243,244,245,248,249,253,254,255,257,261,263,267,270,273,274,275,278,279,283,286,289,290,291,294,295,298,302,304,309,311,313
-----computeFrom-----
65,66
65,67
100,101
100,102
141,142
141,143
161,162
161,163
162,163
162,164
167,168
167,169
259,260
259,261
265,266
265,267
281,282
281,283
-----guardedBy-----
169,304
166,263
261,267
-----guardedByNegation-----
169,311
261,283
-----lastLexicalUse-----
169,311
261,283
-----jump-----
169,311
261,283
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int driver_monitor(Bus *bus, Peer *sender, Message *message) {        _c_cleanup_(c_list_flush) CList destinations = C_LIST_INIT(destinations);        MatchOwner *match_owner;        int r;        if (!bus->n_monitors)                return 0;        r = message_parse_metadata(message);        if (r)                return error_fold(r);        bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata);        while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                c_list_unlink(&match_owner->destinations_link);                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                if (r == CONNECTION_E_QUOTA)                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                else                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }        return 0;}
static int
driver_monitor(Bus *bus, Peer *sender, Message *message)
driver_monitor
Bus *bus
Bus
Bus
*bus
*
bus
Peer *sender
Peer
Peer
*sender
*
sender
Message *message
Message
Message
*message
*
message
{        _c_cleanup_(c_list_flush) CList destinations = C_LIST_INIT(destinations);        MatchOwner *match_owner;        int r;        if (!bus->n_monitors)                return 0;        r = message_parse_metadata(message);        if (r)                return error_fold(r);        bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata);        while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                c_list_unlink(&match_owner->destinations_link);                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                if (r == CONNECTION_E_QUOTA)                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                else                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }        return 0;}
_c_cleanup_(c_list_flush)
_c_cleanup_(c_list_flush)
_c_cleanup_
_c_cleanup_
(c_list_flush)
c_list_flush
c_list_flush
)
CList destinations = C_LIST_INIT(destinations);
CList destinations = C_LIST_INIT(destinations);
CList
CList
destinations = C_LIST_INIT(destinations)
destinations
= C_LIST_INIT(destinations)
C_LIST_INIT(destinations)
C_LIST_INIT
C_LIST_INIT
destinations
destinations
MatchOwner *match_owner;
MatchOwner *match_owner;
MatchOwner
MatchOwner
*match_owner
*
match_owner
int r;
int r;
int
r
r
if (!bus->n_monitors)                return 0;
!bus->n_monitors
bus->n_monitors
bus
bus
n_monitors
return 0;
0
r = message_parse_metadata(message);
r = message_parse_metadata(message)
r
r
message_parse_metadata(message)
message_parse_metadata
message_parse_metadata
message
message
if (r)                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata);
bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata)
bus_get_monitor_destinations
bus_get_monitor_destinations
bus
bus
&destinations
destinations
destinations
sender
sender
&message->metadata
message->metadata
message
message
metadata
while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                c_list_unlink(&match_owner->destinations_link);                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                if (r == CONNECTION_E_QUOTA)                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                else                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }
(match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))
match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link)
match_owner
match_owner
c_list_first_entry(&destinations, MatchOwner, destinations_link)
c_list_first_entry
c_list_first_entry
&destinations
destinations
destinations
MatchOwner
MatchOwner
destinations_link
destinations_link
{                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                c_list_unlink(&match_owner->destinations_link);                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                if (r == CONNECTION_E_QUOTA)                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                else                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }
Peer *receiver = c_container_of(match_owner, Peer, owned_matches);
Peer *receiver = c_container_of(match_owner, Peer, owned_matches);
Peer
Peer
*receiver = c_container_of(match_owner, Peer, owned_matches)
*
receiver
= c_container_of(match_owner, Peer, owned_matches)
c_container_of(match_owner, Peer, owned_matches)
c_container_of
c_container_of
match_owner
match_owner
Peer
Peer
owned_matches
owned_matches
c_list_unlink(&match_owner->destinations_link);
c_list_unlink(&match_owner->destinations_link)
c_list_unlink
c_list_unlink
&match_owner->destinations_link
match_owner->destinations_link
match_owner
match_owner
destinations_link
r = connection_queue(&receiver->connection, NULL, message);
r = connection_queue(&receiver->connection, NULL, message)
r
r
connection_queue(&receiver->connection, NULL, message)
connection_queue
connection_queue
&receiver->connection
receiver->connection
receiver
receiver
connection
NULL
NULL
message
message
if (r) {                        if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                if (r == CONNECTION_E_QUOTA)                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                else                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }
r
r
{                        if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                if (r == CONNECTION_E_QUOTA)                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                else                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }
if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                if (r == CONNECTION_E_QUOTA)                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                else                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }
r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS
r == CONNECTION_E_QUOTA
r
r
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
r == CONNECTION_E_UNEXPECTED_FDS
r
r
CONNECTION_E_UNEXPECTED_FDS
CONNECTION_E_UNEXPECTED_FDS
{                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                if (r == CONNECTION_E_QUOTA)                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                else                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        }
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);
NameSet
NameSet
sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL)
sender_names
= NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL)
NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL)
NAME_SET_INIT_FROM_OWNER
NAME_SET_INIT_FROM_OWNER
sender ? &sender->owned_names : NULL
sender
sender
&sender->owned_names
sender->owned_names
sender
sender
owned_names
NULL
NULL
connection_shutdown(&receiver->connection);
connection_shutdown(&receiver->connection)
connection_shutdown
connection_shutdown
&receiver->connection
receiver->connection
receiver
receiver
connection
log_append_here(bus->log, LOG_WARNING, 0);
log_append_here(bus->log, LOG_WARNING, 0)
log_append_here
log_append_here
bus->log
bus
bus
log
LOG_WARNING
LOG_WARNING
0
bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);
bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message)
bus_log_append_transaction
bus_log_append_transaction
bus
bus
sender ? sender->id : ADDRESS_ID_INVALID
sender
sender
sender->id
sender
sender
id
ADDRESS_ID_INVALID
ADDRESS_ID_INVALID
receiver->id
receiver
receiver
id
&sender_names
sender_names
sender_names
NULL
NULL
sender ? sender->policy->seclabel : bus->seclabel
sender
sender
sender->policy->seclabel
sender->policy
sender
sender
policy
seclabel
bus->seclabel
bus
bus
seclabel
receiver->policy->seclabel
receiver->policy
receiver
receiver
policy
seclabel
message
message
if (r == CONNECTION_E_QUOTA)                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                else                                        r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id);
r == CONNECTION_E_QUOTA
r
r
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);
r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id)
r
r
log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id)
log_commitf
log_commitf
bus->log
bus
bus
log
"Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to."
receiver->id
receiver
receiver
id
r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id);
r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id)
r
r
log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id)
log_commitf
log_commitf
bus->log
bus
bus
log
"Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to."
receiver->id
receiver
receiver
id
if (r)                                        return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
{                                return error_fold(r);                        }
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(32,68,0)
(96,15,0)
(93,29,0)
(159,85,0)
(161,150,0)
(105,36,0)
(55,165,0)
(58,110,0)
(127,46,0)
(53,158,0)
(44,112,0)
(143,102,0)
(102,143,0)
(47,88,0)
(29,17,0)
(9,2,0)
(161,30,0)
(106,21,0)
(163,134,0)
(11,98,0)
(23,2,0)
(78,17,0)
(131,15,0)
(56,68,0)
(125,8,0)
(21,100,0)
(96,153,0)
(115,161,0)
(68,10,0)
(43,90,0)
(165,132,0)
(161,138,0)
(118,2,0)
(96,102,0)
(98,96,0)
(75,24,0)
(105,13,0)
(15,96,0)
(75,29,0)
(29,156,0)
(15,138,0)
(109,110,0)
(63,112,0)
(120,13,0)
(54,118,0)
(40,102,0)
(99,41,0)
(88,17,0)
(122,38,0)
(117,90,0)
(95,67,0)
(76,23,0)
(105,88,0)
(129,52,0)
(136,38,0)
(98,138,0)
(165,153,0)
(7,17,0)
(100,34,0)
(78,104,0)
(133,114,0)
(79,156,0)
(135,20,0)
(157,36,0)
(126,96,0)
(67,104,0)
(102,96,0)
(148,2,0)
(5,80,0)
(132,165,0)
(13,68,0)
(35,42,0)
(96,126,0)
(117,147,0)
(90,156,0)
(110,96,0)
(155,52,0)
(1,156,0)
(104,78,0)
(144,21,0)
(137,143,0)
(23,31,0)
(69,104,0)
(36,105,0)
(92,8,0)
(14,41,0)
(126,108,0)
(45,2,0)
(70,2,0)
(104,69,0)
(89,67,0)
(141,78,0)
(157,69,0)
(110,68,0)
(94,147,0)
(67,68,0)
(64,38,0)
(4,56,0)
(16,143,0)
(38,64,0)
(103,46,0)
(98,134,0)
(152,156,0)
(112,44,0)
(86,29,0)
(18,8,0)
(6,103,0)
(117,84,0)
(2,10,0)
(116,156,0)
(146,138,0)
(140,45,0)
(112,52,0)
(96,17,0)
(20,80,0)
(74,69,0)
(38,17,0)
(12,15,0)
(134,98,0)
(80,138,0)
(52,156,0)
(72,148,0)
(72,70,0)
(21,46,0)
(30,108,0)
(46,44,0)
(48,80,0)
(111,56,0)
(24,75,0)
(124,104,0)
(96,98,0)
(123,103,0)
(50,70,0)
(34,10,0)
(57,45,0)
(19,24,0)
(108,30,0)
(81,84,0)
(35,41,0)
(66,44,0)
(29,158,0)
(42,35,0)
(51,8,0)
(7,125,0)
(15,146,0)
(83,126,0)
(71,7,0)
(52,155,0)
(41,35,0)
(104,67,0)
(29,138,0)
(117,31,0)
(119,148,0)
(96,110,0)
(30,161,0)
(132,156,0)
(130,105,0)
(88,105,0)
(0,78,0)
(20,98,0)
(150,161,0)
(45,140,0)
(31,65,0)
(107,96,0)
(22,132,0)
(108,8,0)
(2,45,0)
(151,157,0)
(91,108,0)
(97,45,0)
(62,10,0)
(37,134,0)
(27,10,0)
(45,153,0)
(33,96,0)
(154,148,0)
(42,8,0)
(73,24,0)
(98,20,0)
(142,85,0)
(28,146,0)
(87,94,0)
(49,125,0)
(39,7,0)
(146,15,0)
(25,125,0)
(96,8,0)
(157,82,0)
(56,140,0)
(3,44,0)
(158,52,0)
(143,68,0)
(162,146,0)
(80,20,0)
(139,36,0)
(70,72,0)
(68,103,0)
(101,155,0)
(59,161,0)
(94,132,0)
(85,150,0)
(158,29,0)
(44,46,0)
(13,105,0)
(34,100,0)
(29,75,0)
(117,82,0)
(77,70,0)
(103,68,0)
(121,103,0)
(24,153,0)
(85,138,0)
(148,72,0)
(140,56,0)
(134,17,0)
(160,96,0)
(100,21,0)
(149,13,0)
(26,118,0)
(150,85,0)
(125,7,0)
(61,156,0)
(41,68,0)
(128,88,0)
(164,156,0)
(96,126,1)
(143,137,1)
(125,7,1)
(81,64,1)
(136,52,1)
(53,93,1)
(96,17,1)
(162,12,1)
(72,70,1)
(39,42,1)
(11,160,1)
(95,124,1)
(124,78,1)
(31,23,1)
(161,150,1)
(70,2,1)
(118,26,1)
(165,153,1)
(64,38,1)
(165,55,1)
(15,146,1)
(111,9,1)
(161,138,1)
(94,132,1)
(122,136,1)
(38,122,1)
(96,102,1)
(135,80,1)
(90,43,1)
(29,158,1)
(137,16,1)
(15,138,1)
(47,128,1)
(78,0,1)
(45,140,1)
(2,45,1)
(120,130,1)
(70,50,1)
(131,12,1)
(115,91,1)
(132,165,1)
(0,141,1)
(117,82,1)
(157,69,1)
(101,129,1)
(40,143,1)
(110,109,1)
(128,139,1)
(158,52,1)
(88,17,1)
(149,120,1)
(157,36,1)
(121,6,1)
(3,66,1)
(146,138,1)
(32,46,1)
(91,72,1)
(105,88,1)
(24,19,1)
(54,96,1)
(58,15,1)
(55,22,1)
(23,2,1)
(125,25,1)
(161,59,1)
(71,39,1)
(20,80,1)
(89,95,1)
(104,67,1)
(104,78,1)
(103,121,1)
(75,24,1)
(93,113,1)
(67,68,1)
(74,118,1)
(123,32,1)
(41,68,1)
(154,70,1)
(36,105,1)
(80,48,1)
(109,58,1)
(38,17,1)
(148,2,1)
(73,86,1)
(102,40,1)
(48,5,1)
(50,77,1)
(77,60,1)
(159,115,1)
(72,148,1)
(29,75,1)
(15,131,1)
(97,140,1)
(147,94,1)
(150,85,1)
(23,76,1)
(96,153,1)
(44,3,1)
(21,46,1)
(37,11,1)
(126,108,1)
(33,125,1)
(19,73,1)
(35,41,1)
(141,74,1)
(56,68,1)
(13,149,1)
(85,142,1)
(112,63,1)
(25,49,1)
(148,119,1)
(56,4,1)
(52,155,1)
(82,157,1)
(83,110,1)
(66,112,1)
(99,108,1)
(4,111,1)
(110,68,1)
(41,14,1)
(24,153,1)
(146,28,1)
(68,103,1)
(139,118,1)
(59,115,1)
(84,81,1)
(117,90,1)
(87,113,1)
(46,44,1)
(45,57,1)
(7,71,1)
(43,46,1)
(29,17,1)
(42,35,1)
(140,56,1)
(96,110,1)
(134,163,1)
(143,68,1)
(155,101,1)
(151,145,1)
(108,30,1)
(20,135,1)
(126,83,1)
(163,37,1)
(160,126,1)
(127,145,1)
(96,15,1)
(13,68,1)
(80,138,1)
(98,20,1)
(9,34,1)
(88,47,1)
(117,84,1)
(30,161,1)
(113,132,1)
(106,144,1)
(5,11,1)
(60,2,1)
(69,104,1)
(96,98,1)
(22,64,1)
(86,158,1)
(130,88,1)
(44,112,1)
(63,127,1)
(45,153,1)
(105,13,1)
(6,123,1)
(127,29,1)
(49,7,1)
(102,143,1)
(117,147,1)
(21,106,1)
(85,138,1)
(67,89,1)
(14,99,1)
(112,52,1)
(107,102,1)
(94,87,1)
(127,60,1)
(119,154,1)
(158,53,1)
(118,2,1)
(100,21,1)
(28,162,1)
(157,151,1)
(16,98,1)
(144,68,1)
(98,134,1)
(76,72,1)
(117,31,1)
(12,33,1)
(78,17,1)
(134,17,1)
(98,138,1)
(29,138,1)
(7,17,1)
(145,69,1)
(26,54,1)
(103,46,1)
(96,107,1)
(142,159,1)
(57,97,1)
(34,100,1)
(145,36,1)
(9,46,2)
(90,46,2)
(48,11,2)
(68,103,2)
(159,115,2)
(157,145,2)
(42,35,2)
(134,11,2)
(80,11,2)
(83,72,2)
(33,72,2)
(76,72,2)
(71,72,2)
(37,11,2)
(88,17,2)
(25,72,2)
(97,46,2)
(41,68,2)
(13,68,2)
(80,138,2)
(96,126,2)
(15,72,2)
(69,118,2)
(95,118,2)
(66,145,2)
(103,46,2)
(23,2,2)
(157,69,2)
(74,118,2)
(124,118,2)
(123,46,2)
(63,145,2)
(78,17,2)
(40,72,2)
(20,11,2)
(22,64,2)
(6,46,2)
(137,72,2)
(29,75,2)
(148,70,2)
(32,46,2)
(38,17,2)
(42,72,2)
(132,165,2)
(2,46,2)
(165,153,2)
(72,60,2)
(36,105,2)
(161,138,2)
(112,145,2)
(128,118,2)
(15,146,2)
(112,60,2)
(113,64,2)
(78,118,2)
(91,72,2)
(29,138,2)
(146,138,2)
(161,150,2)
(63,113,2)
(86,113,2)
(140,56,2)
(85,115,2)
(29,17,2)
(132,64,2)
(94,113,2)
(96,17,2)
(139,118,2)
(46,44,2)
(117,84,2)
(73,113,2)
(127,113,2)
(110,68,2)
(45,140,2)
(158,113,2)
(98,72,2)
(150,115,2)
(112,113,2)
(67,68,2)
(117,147,2)
(96,15,2)
(127,145,2)
(56,68,2)
(30,72,2)
(142,115,2)
(135,11,2)
(120,118,2)
(14,72,2)
(106,46,2)
(147,113,2)
(117,82,2)
(44,113,2)
(149,118,2)
(151,145,2)
(96,153,2)
(45,46,2)
(117,90,2)
(100,21,2)
(145,72,2)
(127,60,2)
(29,158,2)
(72,148,2)
(148,2,2)
(24,153,2)
(144,46,2)
(52,155,2)
(34,46,2)
(24,113,2)
(158,52,2)
(130,118,2)
(87,113,2)
(13,118,2)
(2,45,2)
(104,118,2)
(96,102,2)
(154,70,2)
(125,72,2)
(39,72,2)
(30,161,2)
(118,2,2)
(99,72,2)
(66,60,2)
(64,38,2)
(63,60,2)
(44,145,2)
(98,138,2)
(46,60,2)
(54,72,2)
(98,134,2)
(7,17,2)
(140,46,2)
(157,36,2)
(20,80,2)
(88,118,2)
(102,72,2)
(44,60,2)
(84,64,2)
(161,72,2)
(81,64,2)
(46,113,2)
(141,118,2)
(143,68,2)
(12,72,2)
(70,60,2)
(126,108,2)
(94,132,2)
(58,72,2)
(75,113,2)
(70,2,2)
(134,17,2)
(19,113,2)
(117,31,2)
(28,12,2)
(82,145,2)
(98,20,2)
(44,112,2)
(105,13,2)
(69,104,2)
(43,46,2)
(16,72,2)
(46,145,2)
(85,138,2)
(109,72,2)
(36,118,2)
(96,72,2)
(93,113,2)
(119,70,2)
(111,46,2)
(105,88,2)
(165,64,2)
(102,143,2)
(67,118,2)
(77,60,2)
(115,72,2)
(125,7,2)
(26,72,2)
(72,70,2)
(11,72,2)
(21,46,2)
(7,72,2)
(75,24,2)
(150,85,2)
(68,46,2)
(34,100,2)
(112,52,2)
(29,113,2)
(47,118,2)
(3,60,2)
(146,12,2)
(4,46,2)
(53,113,2)
(3,145,2)
(110,72,2)
(60,46,2)
(104,78,2)
(126,72,2)
(59,115,2)
(105,118,2)
(23,72,2)
(3,113,2)
(96,110,2)
(66,113,2)
(89,118,2)
(56,46,2)
(121,46,2)
(96,98,2)
(45,153,2)
(143,72,2)
(131,12,2)
(162,12,2)
(163,11,2)
(31,72,2)
(15,138,2)
(160,72,2)
(107,72,2)
(104,67,2)
(57,46,2)
(5,11,2)
(49,72,2)
(108,72,2)
(35,41,2)
(118,72,2)
(35,72,2)
(108,30,2)
(100,46,2)
(0,118,2)
(50,60,2)
(41,72,2)
(55,64,2)
-----------------------------------
(0,log)
(1,r)
(2,r = connection_queue(&receiver->connection, NULL, message)
(3,destinations_link)
(4,connection)
(5,sender)
(6,Peer)
(7,bus->log)
(8,)
(9,r)
(10,)
(11,sender)
(12,sender)
(13,receiver->id)
(14,connection)
(15,sender ? sender->id : ADDRESS_ID_INVALID)
(16,receiver)
(17,Bus *bus)
(18,sender_names)
(19,metadata)
(20,sender->policy->seclabel)
(21,match_owner->destinations_link)
(22,r)
(23,error_fold(r)
(24,message->metadata)
(25,0)
(26,CONNECTION_E_QUOTA)
(27,receiver)
(28,id)
(29,bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata)
(30,NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL)
(31,return error_fold(r)
(32,receiver)
(33,bus)
(34,c_list_unlink(&match_owner->destinations_link)
(35,&receiver->connection)
(36,r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id)
(37,bus)
(38,bus->n_monitors)
(39,bus)
(40,seclabel)
(41,receiver->connection)
(42,connection_shutdown(&receiver->connection)
(43,0)
(44,c_list_first_entry(&destinations, MatchOwner, destinations_link)
(45,connection_queue(&receiver->connection, NULL, message)
(46,match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link)
(47,log)
(48,policy)
(49,LOG_WARNING)
(50,CONNECTION_E_QUOTA)
(51,if (r == CONNECTION_E_QUOTA)
(52,destinations = C_LIST_INIT(destinations)
(53,destinations)
(54,r)
(55,message)
(56,receiver->connection)
(57,message)
(58,receiver)
(59,NULL)
(60,r)
(61,while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link)
(62,if (r)
(63,destinations)
(64,!bus->n_monitors)
(65,)
(66,MatchOwner)
(67,receiver->id)
(68,*receiver = c_container_of(match_owner, Peer, owned_matches)
(69,r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id)
(70,r == CONNECTION_E_QUOTA)
(71,log)
(72,r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS)
(73,message)
(74,r)
(75,&message->metadata)
(76,r)
(77,r)
(78,bus->log)
(79,destinations)
(80,sender->policy)
(81,0)
(82,return error_fold(r)
(83,sender_names)
(84,return 0;)
(85,sender->owned_names)
(86,sender)
(87,r)
(88,bus->log)
(89,id)
(90,return 0;)
(91,sender_names)
(92,if (r)
(93,bus)
(94,error_fold(r)
(95,receiver)
(96,bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,\n\\n                                                           &sender_names, NULL,\n\\n                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,\n\\n                                                           message)
(97,NULL)
(98,sender ? sender->policy->seclabel : bus->seclabel)
(99,receiver)
(100,&match_owner->destinations_link)
(101,destinations)
(102,receiver->policy->seclabel)
(103,c_container_of(match_owner, Peer, owned_matches)
(104,log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id)
(105,log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.", receiver->id)
(106,destinations_link)
(107,message)
(108,sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL)
(109,id)
(110,receiver->id)
(111,receiver)
(112,&destinations)
(113,r)
(114,)
(115,sender)
(116,match_owner)
(117,RET)
(118,r == CONNECTION_E_QUOTA)
(119,CONNECTION_E_UNEXPECTED_FDS)
(120,receiver)
(121,owned_matches)
(122,n_monitors)
(123,match_owner)
(124,"Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.")
(125,log_append_here(bus->log, LOG_WARNING, 0)
(126,&sender_names)
(127,match_owner)
(128,bus)
(129,destinations)
(130,"Monitor :1.%llu is being disconnected as it does not support receiving file descriptors it subscribed to.")
(131,ADDRESS_ID_INVALID)
(132,r = message_parse_metadata(message)
(133,if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS)
(134,bus->seclabel)
(135,seclabel)
(136,bus)
(137,policy)
(138,Peer *sender)
(139,r)
(140,&receiver->connection)
(141,bus)
(142,owned_names)
(143,receiver->policy)
(144,match_owner)
(145,r)
(146,sender->id)
(147,return error_fold(r)
(148,r == CONNECTION_E_UNEXPECTED_FDS)
(149,id)
(150,&sender->owned_names)
(151,r)
(152,if (!bus->n_monitors)
(153,Message *message)
(154,r)
(155,C_LIST_INIT(destinations)
(156,)
(157,error_fold(r)
(158,&destinations)
(159,sender)
(160,NULL)
(161,sender ? &sender->owned_names : NULL)
(162,sender)
(163,seclabel)
(164,if (r)
(165,message_parse_metadata(message)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^