-----label-----
0
-----code-----
static struct peer_dsc *
peer_dsc_add(struct peer *peer, uint16_t chr_val_handle,
             const struct ble_gatt_dsc *gatt_dsc)
{
    struct peer_dsc *prev;
    struct peer_dsc *dsc;
    struct peer_svc *svc;
    struct peer_chr *chr;

    svc = peer_svc_find_range(peer, chr_val_handle);
    if (svc == NULL) {
        /* Can't find service for discovered descriptor; this shouldn't
         * happen.
         */
        assert(0);
        return NULL;
    }

    chr = peer_chr_find(svc, chr_val_handle, NULL);
    if (chr == NULL) {
        /* Can't find characteristic for discovered descriptor; this shouldn't
         * happen.
         */
        assert(0);
        return NULL;
    }

    dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev);
    if (dsc != NULL) {
        /* Descriptor already discovered. */
        return dsc;
    }

    dsc = os_memblock_get(&peer_dsc_pool);
    if (dsc == NULL) {
        /* Out of memory. */
        return NULL;
    }
    memset(dsc, 0, sizeof *dsc);

    dsc->dsc = *gatt_dsc;

    if (prev == NULL) {
        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);
    } else {
        SLIST_NEXT(prev, next) = dsc;
    }

    return dsc;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
24,25
24,26
24,27
24,28
24,29
24,30
24,31
24,32
24,33
24,34
24,35
24,36
24,37
24,38
24,39
24,40
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
34,35
36,37
36,38
39,40
40,41
40,42
41,42
43,44
43,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
54,55
54,56
55,56
57,58
57,59
57,60
58,59
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
70,72
71,72
72,73
72,74
73,74
76,77
77,78
79,80
80,81
80,82
81,82
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
92,93
92,94
93,94
93,95
94,95
96,97
98,99
98,100
99,100
100,101
100,102
101,102
104,105
105,106
107,108
108,109
108,110
109,110
111,112
111,113
111,114
111,115
112,113
114,115
116,117
116,118
117,118
120,121
121,122
123,124
123,125
124,125
124,126
125,126
127,128
129,130
130,131
131,132
133,134
134,135
134,136
135,136
137,138
137,139
138,139
140,141
141,142
143,144
143,145
144,145
144,146
145,146
147,148
149,150
150,151
151,152
153,154
154,155
154,156
154,157
154,158
155,156
157,158
160,161
161,162
162,163
164,165
165,166
165,167
166,167
166,168
167,168
170,171
171,172
173,174
173,175
173,176
174,175
174,176
175,176
177,178
179,180
180,181
181,182
181,183
181,184
181,185
182,183
184,185
185,186
185,187
186,187
189,190
191,192
193,194
194,195
195,196
195,197
196,197
196,198
196,199
197,198
199,200
201,202
203,204
205,206
206,207
-----nextToken-----
3,5,6,9,11,12,15,17,20,22,23,28,30,31,35,37,38,42,44,45,49,51,52,56,59,61,63,67,69,74,75,78,82,85,87,89,91,95,97,102,103,106,110,113,115,118,119,122,126,128,132,136,139,142,146,148,152,156,158,159,163,168,169,172,176,178,183,187,188,190,192,198,200,202,204,207
-----computeFrom-----
54,55
54,56
65,66
65,67
80,81
80,82
93,94
93,95
108,109
108,110
124,125
124,126
134,135
134,136
144,145
144,146
165,166
165,167
174,175
174,176
195,196
195,197
-----guardedBy-----
69,78
97,106
126,132
148,152
-----guardedByNegation-----
176,200
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct peer_dsc *peer_dsc_add(struct peer *peer, uint16_t chr_val_handle,             const struct ble_gatt_dsc *gatt_dsc){    struct peer_dsc *prev;    struct peer_dsc *dsc;    struct peer_svc *svc;    struct peer_chr *chr;    svc = peer_svc_find_range(peer, chr_val_handle);    if (svc == NULL) {        /* Can't find service for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return NULL;    }    chr = peer_chr_find(svc, chr_val_handle, NULL);    if (chr == NULL) {        /* Can't find characteristic for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return NULL;    }    dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev);    if (dsc != NULL) {        /* Descriptor already discovered. */        return dsc;    }    dsc = os_memblock_get(&peer_dsc_pool);    if (dsc == NULL) {        /* Out of memory. */        return NULL;    }    memset(dsc, 0, sizeof *dsc);    dsc->dsc = *gatt_dsc;    if (prev == NULL) {        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);    } else {        SLIST_NEXT(prev, next) = dsc;    }    return dsc;}
static struct peer_dsc
peer_dsc
*peer_dsc_add(struct peer *peer, uint16_t chr_val_handle,             const struct ble_gatt_dsc *gatt_dsc)
*
peer_dsc_add
struct peer *peer
struct peer
peer
*peer
*
peer
uint16_t chr_val_handle
uint16_t
uint16_t
chr_val_handle
chr_val_handle
const struct ble_gatt_dsc *gatt_dsc
const struct ble_gatt_dsc
ble_gatt_dsc
*gatt_dsc
*
gatt_dsc
{    struct peer_dsc *prev;    struct peer_dsc *dsc;    struct peer_svc *svc;    struct peer_chr *chr;    svc = peer_svc_find_range(peer, chr_val_handle);    if (svc == NULL) {        /* Can't find service for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return NULL;    }    chr = peer_chr_find(svc, chr_val_handle, NULL);    if (chr == NULL) {        /* Can't find characteristic for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return NULL;    }    dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev);    if (dsc != NULL) {        /* Descriptor already discovered. */        return dsc;    }    dsc = os_memblock_get(&peer_dsc_pool);    if (dsc == NULL) {        /* Out of memory. */        return NULL;    }    memset(dsc, 0, sizeof *dsc);    dsc->dsc = *gatt_dsc;    if (prev == NULL) {        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);    } else {        SLIST_NEXT(prev, next) = dsc;    }    return dsc;}
struct peer_dsc *prev;
struct peer_dsc *prev;
struct peer_dsc
peer_dsc
*prev
*
prev
struct peer_dsc *dsc;
struct peer_dsc *dsc;
struct peer_dsc
peer_dsc
*dsc
*
dsc
struct peer_svc *svc;
struct peer_svc *svc;
struct peer_svc
peer_svc
*svc
*
svc
struct peer_chr *chr;
struct peer_chr *chr;
struct peer_chr
peer_chr
*chr
*
chr
svc = peer_svc_find_range(peer, chr_val_handle);
svc = peer_svc_find_range(peer, chr_val_handle)
svc
svc
peer_svc_find_range(peer, chr_val_handle)
peer_svc_find_range
peer_svc_find_range
peer
peer
chr_val_handle
chr_val_handle
if (svc == NULL) {        /* Can't find service for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return NULL;    }
svc == NULL
svc
svc
NULL
NULL
{        /* Can't find service for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return NULL;    }
assert(0);
assert(0)
assert
assert
0
return NULL;
NULL
NULL
chr = peer_chr_find(svc, chr_val_handle, NULL);
chr = peer_chr_find(svc, chr_val_handle, NULL)
chr
chr
peer_chr_find(svc, chr_val_handle, NULL)
peer_chr_find
peer_chr_find
svc
svc
chr_val_handle
chr_val_handle
NULL
NULL
if (chr == NULL) {        /* Can't find characteristic for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return NULL;    }
chr == NULL
chr
chr
NULL
NULL
{        /* Can't find characteristic for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return NULL;    }
assert(0);
assert(0)
assert
assert
0
return NULL;
NULL
NULL
dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev);
dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev)
dsc
dsc
peer_dsc_find(chr, gatt_dsc->handle, &prev)
peer_dsc_find
peer_dsc_find
chr
chr
gatt_dsc->handle
gatt_dsc
gatt_dsc
handle
&prev
prev
prev
if (dsc != NULL) {        /* Descriptor already discovered. */        return dsc;    }
dsc != NULL
dsc
dsc
NULL
NULL
{        /* Descriptor already discovered. */        return dsc;    }
return dsc;
dsc
dsc
dsc = os_memblock_get(&peer_dsc_pool);
dsc = os_memblock_get(&peer_dsc_pool)
dsc
dsc
os_memblock_get(&peer_dsc_pool)
os_memblock_get
os_memblock_get
&peer_dsc_pool
peer_dsc_pool
peer_dsc_pool
if (dsc == NULL) {        /* Out of memory. */        return NULL;    }
dsc == NULL
dsc
dsc
NULL
NULL
{        /* Out of memory. */        return NULL;    }
return NULL;
NULL
NULL
memset(dsc, 0, sizeof *dsc);
memset(dsc, 0, sizeof *dsc)
memset
memset
dsc
dsc
0
sizeof *dsc
*dsc
dsc
dsc
dsc->dsc = *gatt_dsc;
dsc->dsc = *gatt_dsc
dsc->dsc
dsc
dsc
dsc
*gatt_dsc
gatt_dsc
gatt_dsc
if (prev == NULL) {        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);    } else {        SLIST_NEXT(prev, next) = dsc;    }
prev == NULL
prev
prev
NULL
NULL
{        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);    }
SLIST_INSERT_HEAD(&chr->dscs, dsc, next);
SLIST_INSERT_HEAD(&chr->dscs, dsc, next)
SLIST_INSERT_HEAD
SLIST_INSERT_HEAD
&chr->dscs
chr->dscs
chr
chr
dscs
dsc
dsc
next
next
{        SLIST_NEXT(prev, next) = dsc;    }
SLIST_NEXT(prev, next) = dsc;
SLIST_NEXT(prev, next) = dsc
SLIST_NEXT(prev, next)
SLIST_NEXT
SLIST_NEXT
prev
prev
next
next
dsc
dsc
return dsc;
dsc
dsc
-----joern-----
(72,26,0)
(46,0,0)
(37,24,0)
(39,58,0)
(87,11,0)
(0,22,0)
(4,41,0)
(82,92,0)
(59,39,0)
(6,97,0)
(47,52,0)
(31,41,0)
(43,85,0)
(24,38,0)
(24,2,0)
(1,84,0)
(43,34,0)
(88,35,0)
(3,83,0)
(78,17,0)
(45,60,0)
(34,15,0)
(36,57,0)
(26,52,0)
(61,59,0)
(43,67,0)
(15,83,0)
(44,40,0)
(58,38,0)
(92,38,0)
(71,60,0)
(17,52,0)
(83,19,0)
(20,6,0)
(76,54,0)
(62,58,0)
(19,83,0)
(75,15,0)
(58,39,0)
(39,59,0)
(21,24,0)
(91,60,0)
(12,60,0)
(15,60,0)
(80,28,0)
(5,28,0)
(41,52,0)
(0,63,0)
(48,19,0)
(85,52,0)
(29,92,0)
(83,16,0)
(65,60,0)
(34,73,0)
(94,60,0)
(4,90,0)
(59,52,0)
(81,70,0)
(52,76,0)
(66,2,0)
(8,67,0)
(23,60,0)
(32,90,0)
(9,60,0)
(25,55,0)
(85,60,0)
(28,15,0)
(90,52,0)
(89,60,0)
(11,52,0)
(41,4,0)
(57,49,0)
(76,52,0)
(52,60,0)
(96,24,0)
(13,30,0)
(40,17,0)
(24,63,0)
(79,38,0)
(68,54,0)
(90,4,0)
(54,76,0)
(30,70,0)
(18,16,0)
(59,10,0)
(7,85,0)
(77,81,0)
(2,0,0)
(43,81,0)
(93,16,0)
(38,60,0)
(64,40,0)
(2,60,0)
(95,26,0)
(11,89,0)
(90,60,0)
(69,34,0)
(14,55,0)
(83,15,0)
(55,2,0)
(86,0,0)
(67,33,0)
(42,59,0)
(35,33,0)
(6,89,0)
(43,57,0)
(17,74,0)
(50,58,0)
(53,60,0)
(51,84,0)
(0,2,0)
(38,24,0)
(16,83,0)
(56,11,0)
(16,97,0)
(83,38,0)
(27,90,0)
(89,6,0)
(58,50,1)
(87,56,1)
(29,82,1)
(41,31,1)
(43,85,1)
(57,36,1)
(85,7,1)
(4,41,1)
(18,93,1)
(79,55,1)
(34,69,1)
(11,52,1)
(27,32,1)
(84,1,1)
(43,67,1)
(62,84,1)
(36,26,1)
(59,52,1)
(25,14,1)
(50,62,1)
(5,80,1)
(8,35,1)
(82,38,1)
(34,15,1)
(40,64,1)
(17,78,1)
(56,90,1)
(6,97,1)
(78,40,1)
(81,77,1)
(43,81,1)
(26,95,1)
(69,28,1)
(83,38,1)
(21,37,1)
(46,66,1)
(19,48,1)
(54,68,1)
(95,72,1)
(11,87,1)
(47,28,1)
(85,52,1)
(24,2,1)
(72,52,1)
(2,0,1)
(38,24,1)
(59,61,1)
(58,38,1)
(24,63,1)
(0,63,1)
(61,42,1)
(89,6,1)
(52,76,1)
(77,30,1)
(96,79,1)
(64,44,1)
(28,15,1)
(59,39,1)
(55,2,1)
(0,86,1)
(43,57,1)
(90,52,1)
(28,5,1)
(20,11,1)
(42,39,1)
(35,88,1)
(17,52,1)
(26,52,1)
(48,16,1)
(37,96,1)
(68,47,1)
(0,22,1)
(43,34,1)
(14,2,1)
(55,25,1)
(16,18,1)
(24,21,1)
(30,13,1)
(7,59,1)
(80,15,1)
(75,92,1)
(3,75,1)
(31,27,1)
(41,52,1)
(51,89,1)
(83,16,1)
(86,46,1)
(32,26,1)
(88,92,1)
(76,54,1)
(92,38,1)
(39,58,1)
(44,84,1)
(16,97,1)
(7,17,1)
(1,51,1)
(15,83,1)
(67,8,1)
(83,19,1)
(93,3,1)
(6,20,1)
(90,4,1)
(92,29,1)
(13,55,1)
(7,26,2)
(69,28,2)
(92,55,2)
(39,84,2)
(83,92,2)
(41,52,2)
(52,28,2)
(38,24,2)
(0,63,2)
(17,84,2)
(76,54,2)
(37,55,2)
(68,28,2)
(84,26,2)
(78,84,2)
(28,15,2)
(19,92,2)
(90,26,2)
(27,26,2)
(35,92,2)
(58,38,2)
(67,92,2)
(43,85,2)
(88,92,2)
(59,52,2)
(0,22,2)
(5,92,2)
(30,55,2)
(83,16,2)
(59,84,2)
(57,26,2)
(95,28,2)
(48,92,2)
(58,84,2)
(92,38,2)
(11,52,2)
(38,55,2)
(13,55,2)
(90,4,2)
(11,26,2)
(77,55,2)
(87,26,2)
(50,84,2)
(21,55,2)
(44,84,2)
(15,83,2)
(56,26,2)
(41,26,2)
(34,28,2)
(43,34,2)
(64,84,2)
(31,26,2)
(59,39,2)
(42,84,2)
(43,57,2)
(43,67,2)
(16,92,2)
(18,92,2)
(75,92,2)
(6,97,2)
(24,55,2)
(62,84,2)
(16,97,2)
(85,52,2)
(82,55,2)
(15,92,2)
(80,92,2)
(40,84,2)
(96,55,2)
(3,92,2)
(1,26,2)
(39,58,2)
(32,26,2)
(43,81,2)
(61,84,2)
(47,28,2)
(72,28,2)
(54,28,2)
(83,38,2)
(36,26,2)
(26,28,2)
(4,41,2)
(85,26,2)
(20,26,2)
(29,55,2)
(52,76,2)
(79,55,2)
(26,52,2)
(24,2,2)
(24,63,2)
(89,6,2)
(2,0,2)
(89,26,2)
(34,15,2)
(81,55,2)
(28,92,2)
(76,28,2)
(93,92,2)
(8,92,2)
(55,2,2)
(17,52,2)
(6,26,2)
(4,26,2)
(90,52,2)
(83,19,2)
(51,26,2)
-----------------------------------
(0,peer_svc_find_range(peer, chr_val_handle)
(1,NULL)
(2,svc = peer_svc_find_range(peer, chr_val_handle)
(3,chr)
(4,sizeof *dsc)
(5,NULL)
(6,*gatt_dsc)
(7,dsc)
(8,NULL)
(9,if (dsc != NULL)
(10,)
(11,dsc->dsc)
(12,if (svc == NULL)
(13,0)
(14,svc)
(15,dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev)
(16,gatt_dsc->handle)
(17,SLIST_NEXT(prev, next)
(18,handle)
(19,&prev)
(20,gatt_dsc)
(21,NULL)
(22,struct peer *peer)
(23,dsc)
(24,peer_chr_find(svc, chr_val_handle, NULL)
(25,NULL)
(26,dsc == NULL)
(27,0)
(28,dsc != NULL)
(29,NULL)
(30,assert(0)
(31,dsc)
(32,dsc)
(33,)
(34,return dsc;)
(35,assert(0)
(36,NULL)
(37,chr_val_handle)
(38,chr = peer_chr_find(svc, chr_val_handle, NULL)
(39,&chr->dscs)
(40,SLIST_NEXT(prev, next)
(41,*dsc)
(42,dsc)
(43,RET)
(44,prev)
(45,prev)
(46,peer)
(47,dsc)
(48,prev)
(49,)
(50,dscs)
(51,prev)
(52,dsc = os_memblock_get(&peer_dsc_pool)
(53,if (dsc == NULL)
(54,&peer_dsc_pool)
(55,svc == NULL)
(56,dsc)
(57,return NULL;)
(58,chr->dscs)
(59,SLIST_INSERT_HEAD(&chr->dscs, dsc, next)
(60,)
(61,next)
(62,chr)
(63,uint16_t chr_val_handle)
(64,next)
(65,if (chr == NULL)
(66,svc)
(67,return NULL;)
(68,peer_dsc_pool)
(69,dsc)
(70,)
(71,chr)
(72,dsc)
(73,)
(74,)
(75,dsc)
(76,os_memblock_get(&peer_dsc_pool)
(77,NULL)
(78,dsc)
(79,chr)
(80,dsc)
(81,return NULL;)
(82,chr)
(83,peer_dsc_find(chr, gatt_dsc->handle, &prev)
(84,prev == NULL)
(85,return dsc;)
(86,chr_val_handle)
(87,dsc)
(88,0)
(89,dsc->dsc = *gatt_dsc)
(90,memset(dsc, 0, sizeof *dsc)
(91,if (prev == NULL)
(92,chr == NULL)
(93,gatt_dsc)
(94,svc)
(95,NULL)
(96,svc)
(97,const struct ble_gatt_dsc *gatt_dsc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^