-----label-----
0
-----code-----
static void goodB2G1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
90,93
91,92
91,93
92,93
95,96
96,97
97,98
97,99
98,99
101,102
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,94,99,100,105,107
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
staticFive!=5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(52,20,0)
(1,40,0)
(18,39,0)
(10,22,0)
(15,16,0)
(58,51,0)
(38,45,0)
(10,3,0)
(9,31,0)
(12,25,0)
(20,0,0)
(17,40,0)
(3,16,0)
(57,12,0)
(10,37,0)
(39,40,0)
(0,11,0)
(54,37,0)
(24,12,0)
(44,19,0)
(49,20,0)
(0,40,0)
(37,10,0)
(55,14,0)
(50,31,0)
(4,47,0)
(1,41,0)
(2,54,0)
(51,56,0)
(26,47,0)
(48,39,0)
(12,40,0)
(6,25,0)
(33,42,0)
(43,49,0)
(37,54,0)
(0,20,0)
(44,40,0)
(21,42,0)
(23,55,0)
(31,42,0)
(11,0,0)
(29,42,0)
(25,12,0)
(56,36,0)
(20,49,0)
(28,1,0)
(19,44,0)
(25,8,0)
(40,16,0)
(1,31,0)
(8,16,0)
(54,40,0)
(13,19,0)
(3,10,0)
(30,44,0)
(35,53,0)
(45,16,0)
(32,44,0)
(49,43,0)
(22,10,0)
(7,54,0)
(19,45,0)
(56,51,0)
(40,0,0)
(46,8,0)
(27,53,0)
(9,50,1)
(7,45,1)
(32,8,1)
(46,25,1)
(48,40,1)
(34,1,1)
(55,23,1)
(3,10,1)
(1,28,1)
(27,47,1)
(1,40,1)
(34,55,1)
(2,7,1)
(57,24,1)
(30,32,1)
(44,40,1)
(24,39,1)
(28,53,1)
(26,4,1)
(13,44,1)
(10,22,1)
(4,31,1)
(1,31,1)
(24,56,1)
(25,12,1)
(56,51,1)
(8,46,1)
(12,40,1)
(38,19,1)
(18,48,1)
(58,39,1)
(0,20,1)
(0,11,1)
(20,49,1)
(40,0,1)
(25,6,1)
(27,3,1)
(10,37,1)
(19,44,1)
(19,13,1)
(17,47,1)
(49,43,1)
(54,40,1)
(35,27,1)
(52,17,1)
(39,40,1)
(23,53,1)
(6,12,1)
(53,35,1)
(31,9,1)
(54,2,1)
(51,58,1)
(37,54,1)
(39,18,1)
(12,57,1)
(47,26,1)
(49,52,1)
(45,38,1)
(44,30,1)
(0,47,2)
(30,47,2)
(37,54,2)
(23,53,2)
(45,47,2)
(0,11,2)
(38,47,2)
(54,47,2)
(49,47,2)
(25,47,2)
(10,22,2)
(10,47,2)
(1,31,2)
(40,0,2)
(55,53,2)
(56,39,2)
(19,47,2)
(49,43,2)
(24,47,2)
(25,12,2)
(20,49,2)
(44,47,2)
(10,37,2)
(12,40,2)
(6,47,2)
(40,47,2)
(48,47,2)
(28,53,2)
(18,47,2)
(44,40,2)
(46,47,2)
(51,39,2)
(56,51,2)
(12,47,2)
(3,47,2)
(39,40,2)
(37,47,2)
(54,40,2)
(19,44,2)
(1,53,2)
(7,47,2)
(0,20,2)
(13,47,2)
(20,47,2)
(52,47,2)
(17,47,2)
(3,10,2)
(1,40,2)
(2,47,2)
(32,47,2)
(58,39,2)
(8,47,2)
(39,47,2)
(57,47,2)
-----------------------------------
(0,(struct _twoIntsStruct *)
(1,free(data)
(2,0)
(3,printStructLine((twoIntsStruct *)
(4,staticFive)
(5, sizeof(struct _twoIntsStruct)
(6,intOne)
(7,data)
(8,data[0].intOne = 0)
(9,NULL)
(10,(twoIntsStruct *)
(11,struct _twoIntsStruct *)
(12,data[0])
(13,intTwo)
(14,)
(15,if (data == NULL)
(16,)
(17,data)
(18,NULL)
(19,data[0].intTwo)
(20,calloc(100, sizeof(struct _twoIntsStruct)
(21,data)
(22,twoIntsStruct *)
(23,"Benign, fixed string")
(24,data)
(25,data[0].intOne)
(26,5)
(27,staticFive)
(28,data)
(29,if(staticFive!=5)
(30,0)
(31,data = NULL)
(32,data)
(33,if(staticFive==5)
(34,RET)
(35,5)
(36,)
(37,&data[0])
(38,0)
(39,data == NULL)
(40,data = (struct _twoIntsStruct *)
(41,)
(42,)
(43,struct _twoIntsStruct)
(44,data[0])
(45,data[0].intTwo = 0)
(46,0)
(47,staticFive==5)
(48,data)
(49,sizeof(struct _twoIntsStruct)
(50,data)
(51,-1)
(52,100)
(53,staticFive!=5)
(54,data[0])
(55,printLine("Benign, fixed string")
(56,exit(-1)
(57,0)
(58,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^