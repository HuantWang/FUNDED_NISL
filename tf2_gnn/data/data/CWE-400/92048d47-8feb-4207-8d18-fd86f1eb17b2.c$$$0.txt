-----label-----
0
-----code-----
int
verify_host_key(char *host, struct sockaddr *hostaddr, Key *host_key)
{
	int flags = 0;
	char *fp;

	fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);
	debug("Server host key: %s %s", key_type(host_key), fp);
	free(fp);

	/* XXX certs are not yet supported for DNS */
	if (!key_is_cert(host_key) && options.verify_host_key_dns &&
	    verify_host_key_dns(host, hostaddr, host_key, &flags) == 0) {
		if (flags & DNS_VERIFY_FOUND) {

			if (options.verify_host_key_dns == 1 &&
			    flags & DNS_VERIFY_MATCH &&
			    flags & DNS_VERIFY_SECURE)
				return 0;

			if (flags & DNS_VERIFY_MATCH) {
				matching_host_key_dns = 1;
			} else {
				warn_changed_key(host_key);
				error("Update the SSHFP RR in DNS with the new "
				    "host key to get rid of this message.");
			}
		}
	}

	return check_host_key(host, hostaddr, options.port, host_key, RDRW,
	    options.user_hostfiles, options.num_user_hostfiles,
	    options.system_hostfiles, options.num_system_hostfiles);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
23,24
24,25
24,26
26,27
26,28
28,29
30,31
31,32
31,33
33,34
33,35
36,37
37,38
37,39
38,39
40,41
40,42
40,43
40,44
41,42
43,44
45,46
47,48
49,50
50,51
50,52
50,53
50,54
51,52
54,55
54,56
55,56
57,58
59,60
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
69,71
70,71
71,72
71,73
72,73
74,75
76,77
76,78
77,78
80,81
80,82
81,82
81,83
81,84
81,85
81,86
82,83
84,85
86,87
88,89
90,91
91,92
94,95
95,96
95,97
96,97
96,98
97,98
99,100
101,102
101,103
102,103
102,104
103,104
103,105
104,105
104,106
105,106
105,107
106,107
106,108
107,108
111,112
111,113
112,113
114,115
116,117
116,118
117,118
119,120
121,122
123,124
123,125
123,126
124,125
124,126
125,126
127,128
129,130
130,131
131,132
131,133
132,133
135,136
135,137
136,137
137,138
137,139
138,139
140,141
142,143
143,144
143,145
144,145
147,148
148,149
148,150
148,151
148,152
148,153
148,154
148,155
148,156
148,157
148,158
149,150
151,152
153,154
155,156
155,157
156,157
159,160
161,162
163,164
163,165
164,165
167,168
167,169
168,169
171,172
171,173
172,173
175,176
175,177
176,177
-----nextToken-----
2,4,6,8,9,12,14,15,18,20,21,25,27,29,32,34,35,39,42,44,46,48,52,53,56,58,60,64,66,73,75,78,79,83,85,87,89,92,93,98,100,108,109,110,113,115,118,120,122,126,128,133,134,139,141,145,146,150,152,154,157,158,160,162,165,166,169,170,173,174,177,178
-----computeFrom-----
37,38
37,39
68,69
68,70
69,70
69,71
80,81
80,82
96,97
96,98
103,104
103,105
104,105
104,106
105,106
105,107
111,112
111,113
116,117
116,118
124,125
124,126
131,132
131,133
-----guardedBy-----
89,141
83,109
78,108
92,126
98,126
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
intverify_host_key(char *host, struct sockaddr *hostaddr, Key *host_key){	int flags = 0;	char *fp;	fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);	debug("Server host key: %s %s", key_type(host_key), fp);	free(fp);	/* XXX certs are not yet supported for DNS */	if (!key_is_cert(host_key) && options.verify_host_key_dns &&	    verify_host_key_dns(host, hostaddr, host_key, &flags) == 0) {		if (flags & DNS_VERIFY_FOUND) {			if (options.verify_host_key_dns == 1 &&			    flags & DNS_VERIFY_MATCH &&			    flags & DNS_VERIFY_SECURE)				return 0;			if (flags & DNS_VERIFY_MATCH) {				matching_host_key_dns = 1;			} else {				warn_changed_key(host_key);				error("Update the SSHFP RR in DNS with the new "				    "host key to get rid of this message.");			}		}	}	return check_host_key(host, hostaddr, options.port, host_key, RDRW,	    options.user_hostfiles, options.num_user_hostfiles,	    options.system_hostfiles, options.num_system_hostfiles);}
int
verify_host_key(char *host, struct sockaddr *hostaddr, Key *host_key)
verify_host_key
char *host
char
*host
*
host
struct sockaddr *hostaddr
struct sockaddr
sockaddr
*hostaddr
*
hostaddr
Key *host_key
Key
Key
*host_key
*
host_key
{	int flags = 0;	char *fp;	fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);	debug("Server host key: %s %s", key_type(host_key), fp);	free(fp);	/* XXX certs are not yet supported for DNS */	if (!key_is_cert(host_key) && options.verify_host_key_dns &&	    verify_host_key_dns(host, hostaddr, host_key, &flags) == 0) {		if (flags & DNS_VERIFY_FOUND) {			if (options.verify_host_key_dns == 1 &&			    flags & DNS_VERIFY_MATCH &&			    flags & DNS_VERIFY_SECURE)				return 0;			if (flags & DNS_VERIFY_MATCH) {				matching_host_key_dns = 1;			} else {				warn_changed_key(host_key);				error("Update the SSHFP RR in DNS with the new "				    "host key to get rid of this message.");			}		}	}	return check_host_key(host, hostaddr, options.port, host_key, RDRW,	    options.user_hostfiles, options.num_user_hostfiles,	    options.system_hostfiles, options.num_system_hostfiles);}
int flags = 0;
int flags = 0;
int
flags = 0
flags
= 0
0
char *fp;
char *fp;
char
*fp
*
fp
fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);
fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX)
fp
fp
key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX)
key_fingerprint
key_fingerprint
host_key
host_key
SSH_FP_MD5
SSH_FP_MD5
SSH_FP_HEX
SSH_FP_HEX
debug("Server host key: %s %s", key_type(host_key), fp);
debug("Server host key: %s %s", key_type(host_key), fp)
debug
debug
"Server host key: %s %s"
key_type(host_key)
key_type
key_type
host_key
host_key
fp
fp
free(fp);
free(fp)
free
free
fp
fp
if (!key_is_cert(host_key) && options.verify_host_key_dns &&	    verify_host_key_dns(host, hostaddr, host_key, &flags) == 0) {		if (flags & DNS_VERIFY_FOUND) {			if (options.verify_host_key_dns == 1 &&			    flags & DNS_VERIFY_MATCH &&			    flags & DNS_VERIFY_SECURE)				return 0;			if (flags & DNS_VERIFY_MATCH) {				matching_host_key_dns = 1;			} else {				warn_changed_key(host_key);				error("Update the SSHFP RR in DNS with the new "				    "host key to get rid of this message.");			}		}	}
!key_is_cert(host_key) && options.verify_host_key_dns &&	    verify_host_key_dns(host, hostaddr, host_key, &flags) == 0
!key_is_cert(host_key) && options.verify_host_key_dns
!key_is_cert(host_key)
key_is_cert(host_key)
key_is_cert
key_is_cert
host_key
host_key
options.verify_host_key_dns
options
options
verify_host_key_dns
verify_host_key_dns(host, hostaddr, host_key, &flags) == 0
verify_host_key_dns(host, hostaddr, host_key, &flags)
verify_host_key_dns
verify_host_key_dns
host
host
hostaddr
hostaddr
host_key
host_key
&flags
flags
flags
0
{		if (flags & DNS_VERIFY_FOUND) {			if (options.verify_host_key_dns == 1 &&			    flags & DNS_VERIFY_MATCH &&			    flags & DNS_VERIFY_SECURE)				return 0;			if (flags & DNS_VERIFY_MATCH) {				matching_host_key_dns = 1;			} else {				warn_changed_key(host_key);				error("Update the SSHFP RR in DNS with the new "				    "host key to get rid of this message.");			}		}	}
if (flags & DNS_VERIFY_FOUND) {			if (options.verify_host_key_dns == 1 &&			    flags & DNS_VERIFY_MATCH &&			    flags & DNS_VERIFY_SECURE)				return 0;			if (flags & DNS_VERIFY_MATCH) {				matching_host_key_dns = 1;			} else {				warn_changed_key(host_key);				error("Update the SSHFP RR in DNS with the new "				    "host key to get rid of this message.");			}		}
flags & DNS_VERIFY_FOUND
flags
flags
DNS_VERIFY_FOUND
DNS_VERIFY_FOUND
{			if (options.verify_host_key_dns == 1 &&			    flags & DNS_VERIFY_MATCH &&			    flags & DNS_VERIFY_SECURE)				return 0;			if (flags & DNS_VERIFY_MATCH) {				matching_host_key_dns = 1;			} else {				warn_changed_key(host_key);				error("Update the SSHFP RR in DNS with the new "				    "host key to get rid of this message.");			}		}
if (options.verify_host_key_dns == 1 &&			    flags & DNS_VERIFY_MATCH &&			    flags & DNS_VERIFY_SECURE)				return 0;
options.verify_host_key_dns == 1 &&			    flags & DNS_VERIFY_MATCH &&			    flags & DNS_VERIFY_SECURE
options.verify_host_key_dns == 1 &&			    flags & DNS_VERIFY_MATCH
options.verify_host_key_dns == 1
options.verify_host_key_dns
options
options
verify_host_key_dns
1
flags & DNS_VERIFY_MATCH
flags
flags
DNS_VERIFY_MATCH
DNS_VERIFY_MATCH
flags & DNS_VERIFY_SECURE
flags
flags
DNS_VERIFY_SECURE
DNS_VERIFY_SECURE
return 0;
0
if (flags & DNS_VERIFY_MATCH) {				matching_host_key_dns = 1;			} else {				warn_changed_key(host_key);				error("Update the SSHFP RR in DNS with the new "				    "host key to get rid of this message.");			}
flags & DNS_VERIFY_MATCH
flags
flags
DNS_VERIFY_MATCH
DNS_VERIFY_MATCH
{				matching_host_key_dns = 1;			}
matching_host_key_dns = 1;
matching_host_key_dns = 1
matching_host_key_dns
matching_host_key_dns
1
{				warn_changed_key(host_key);				error("Update the SSHFP RR in DNS with the new "				    "host key to get rid of this message.");			}
warn_changed_key(host_key);
warn_changed_key(host_key)
warn_changed_key
warn_changed_key
host_key
host_key
error("Update the SSHFP RR in DNS with the new "				    "host key to get rid of this message.");
error("Update the SSHFP RR in DNS with the new "				    "host key to get rid of this message.")
error
error
"Update the SSHFP RR in DNS with the new "				    "host key to get rid of this message."
return check_host_key(host, hostaddr, options.port, host_key, RDRW,	    options.user_hostfiles, options.num_user_hostfiles,	    options.system_hostfiles, options.num_system_hostfiles);
check_host_key(host, hostaddr, options.port, host_key, RDRW,	    options.user_hostfiles, options.num_user_hostfiles,	    options.system_hostfiles, options.num_system_hostfiles)
check_host_key
check_host_key
host
host
hostaddr
hostaddr
options.port
options
options
port
host_key
host_key
RDRW
RDRW
options.user_hostfiles
options
options
user_hostfiles
options.num_user_hostfiles
options
options
num_user_hostfiles
options.system_hostfiles
options
options
system_hostfiles
options.num_system_hostfiles
options
options
num_system_hostfiles
-----joern-----
(9,57,0)
(59,23,0)
(66,36,0)
(45,84,0)
(16,29,0)
(51,91,0)
(11,84,0)
(42,46,0)
(79,73,0)
(4,51,0)
(23,35,0)
(83,51,0)
(25,11,0)
(17,84,0)
(70,51,0)
(18,45,0)
(23,65,0)
(29,89,0)
(90,48,0)
(14,42,0)
(92,17,0)
(37,47,0)
(41,7,0)
(49,16,0)
(80,48,0)
(39,67,0)
(37,77,0)
(21,12,0)
(79,84,0)
(4,61,0)
(63,65,0)
(29,16,0)
(32,33,0)
(24,36,0)
(47,85,0)
(51,4,0)
(64,35,0)
(86,35,0)
(80,10,0)
(81,90,0)
(8,27,0)
(89,73,0)
(65,23,0)
(23,36,0)
(26,59,0)
(23,60,0)
(23,47,0)
(67,90,0)
(23,91,0)
(90,85,0)
(22,29,0)
(52,84,0)
(44,46,0)
(89,29,0)
(12,31,0)
(73,89,0)
(51,10,0)
(72,80,0)
(48,80,0)
(46,44,0)
(23,59,0)
(88,84,0)
(33,10,0)
(95,19,0)
(74,4,0)
(93,73,0)
(28,51,0)
(19,61,0)
(0,23,0)
(46,42,0)
(48,85,0)
(94,80,0)
(76,77,0)
(23,27,0)
(34,85,0)
(93,84,0)
(23,10,0)
(27,23,0)
(30,23,0)
(38,11,0)
(71,90,0)
(51,45,0)
(1,48,0)
(73,79,0)
(55,41,0)
(84,85,0)
(6,23,0)
(78,27,0)
(75,23,0)
(42,10,0)
(53,34,0)
(82,19,0)
(33,31,0)
(45,51,0)
(61,44,0)
(56,16,0)
(2,79,0)
(40,54,0)
(13,93,0)
(51,60,0)
(67,10,0)
(69,85,0)
(3,85,0)
(73,93,0)
(87,41,0)
(34,48,0)
(58,80,0)
(90,67,0)
(44,61,0)
(61,19,0)
(61,4,0)
(36,23,0)
(43,59,0)
(35,23,0)
(50,17,0)
(68,85,0)
(5,65,0)
(20,54,0)
(47,41,0)
(15,79,0)
(62,93,0)
(41,87,1)
(23,10,1)
(17,92,1)
(75,35,1)
(22,16,1)
(71,48,1)
(92,50,1)
(53,90,1)
(0,41,1)
(16,49,1)
(23,91,1)
(58,72,1)
(80,58,1)
(33,10,1)
(50,89,1)
(93,13,1)
(42,14,1)
(19,95,1)
(56,11,1)
(89,73,1)
(45,18,1)
(39,71,1)
(46,42,1)
(67,39,1)
(14,34,1)
(88,52,1)
(90,81,1)
(44,61,1)
(4,51,1)
(11,38,1)
(80,10,1)
(93,84,1)
(2,29,1)
(74,51,1)
(32,17,1)
(21,33,1)
(17,84,1)
(23,59,1)
(13,62,1)
(90,67,1)
(84,88,1)
(15,2,1)
(78,8,1)
(34,48,1)
(79,15,1)
(44,46,1)
(65,63,1)
(77,76,1)
(51,45,1)
(67,10,1)
(35,86,1)
(24,66,1)
(76,89,1)
(5,59,1)
(70,19,1)
(81,67,1)
(66,65,1)
(28,70,1)
(23,65,1)
(48,80,1)
(0,12,1)
(47,23,1)
(37,47,1)
(23,60,1)
(29,22,1)
(51,10,1)
(36,24,1)
(61,4,1)
(73,93,1)
(18,83,1)
(62,79,1)
(49,56,1)
(27,78,1)
(38,25,1)
(87,55,1)
(25,44,1)
(23,36,1)
(83,28,1)
(23,27,1)
(86,64,1)
(0,44,1)
(12,21,1)
(72,94,1)
(6,75,1)
(42,10,1)
(55,17,1)
(79,84,1)
(59,43,1)
(51,91,1)
(95,82,1)
(73,79,1)
(4,74,1)
(33,32,1)
(64,30,1)
(94,1,1)
(63,5,1)
(1,84,1)
(51,60,1)
(8,6,1)
(30,0,1)
(90,48,1)
(29,16,1)
(0,11,1)
(43,26,1)
(26,27,1)
(82,46,1)
(89,29,1)
(34,53,1)
(23,35,1)
(11,84,1)
(45,84,1)
(47,41,1)
(61,19,1)
(37,77,1)
(50,89,2)
(23,35,2)
(75,89,2)
(79,29,2)
(62,79,2)
(5,89,2)
(59,11,2)
(4,51,2)
(73,79,2)
(86,89,2)
(49,11,2)
(67,10,2)
(43,89,2)
(64,11,2)
(89,29,2)
(25,44,2)
(93,84,2)
(30,11,2)
(8,44,2)
(89,11,2)
(90,67,2)
(33,17,2)
(65,89,2)
(12,17,2)
(17,89,2)
(43,11,2)
(34,48,2)
(78,44,2)
(51,91,2)
(35,11,2)
(4,19,2)
(23,65,2)
(33,10,2)
(79,84,2)
(8,11,2)
(45,19,2)
(23,59,2)
(80,10,2)
(26,44,2)
(73,93,2)
(28,19,2)
(90,48,2)
(63,44,2)
(8,89,2)
(44,46,2)
(27,11,2)
(19,46,2)
(24,44,2)
(47,89,2)
(0,44,2)
(21,17,2)
(66,11,2)
(70,19,2)
(17,84,2)
(83,19,2)
(93,79,2)
(45,84,2)
(56,11,2)
(87,17,2)
(2,29,2)
(26,11,2)
(5,11,2)
(0,89,2)
(86,44,2)
(23,44,2)
(22,11,2)
(38,44,2)
(5,44,2)
(61,4,2)
(47,41,2)
(26,89,2)
(75,11,2)
(23,91,2)
(37,77,2)
(24,11,2)
(63,11,2)
(35,89,2)
(24,89,2)
(86,11,2)
(16,11,2)
(46,42,2)
(11,44,2)
(61,19,2)
(76,89,2)
(51,19,2)
(23,27,2)
(48,80,2)
(36,44,2)
(89,73,2)
(23,10,2)
(35,44,2)
(95,46,2)
(23,36,2)
(23,11,2)
(75,44,2)
(63,89,2)
(51,10,2)
(36,89,2)
(65,11,2)
(55,17,2)
(29,16,2)
(44,61,2)
(0,11,2)
(36,11,2)
(51,45,2)
(23,60,2)
(64,89,2)
(65,44,2)
(82,46,2)
(30,89,2)
(59,89,2)
(32,17,2)
(23,89,2)
(74,19,2)
(64,44,2)
(6,44,2)
(47,11,2)
(66,89,2)
(6,11,2)
(43,44,2)
(27,89,2)
(73,29,2)
(15,29,2)
(41,17,2)
(59,44,2)
(61,46,2)
(78,89,2)
(42,10,2)
(66,44,2)
(37,47,2)
(29,11,2)
(11,84,2)
(27,44,2)
(51,60,2)
(92,89,2)
(18,19,2)
(13,79,2)
(30,44,2)
(6,89,2)
(78,11,2)
(77,89,2)
(47,44,2)
-----------------------------------
(0,host)
(1,fp)
(2,flags)
(3,fp)
(4,verify_host_key_dns(host, hostaddr, host_key, &flags)
(5,options)
(6,RDRW)
(7,)
(8,options)
(9,if (flags & DNS_VERIFY_FOUND)
(10,Key *host_key)
(11,flags & DNS_VERIFY_FOUND)
(12,error("Update the SSHFP RR in DNS with the new "\n\\n\\t\\t\\t\\t    "host key to get rid of this message.")
(13,DNS_VERIFY_SECURE)
(14,host_key)
(15,DNS_VERIFY_MATCH)
(16,options.verify_host_key_dns)
(17,flags & DNS_VERIFY_MATCH)
(18,flags)
(19,options.verify_host_key_dns)
(20,if (options.verify_host_key_dns == 1 &&\n\\n\\t\\t\\t    flags & DNS_VERIFY_MATCH &&\n\\n\\t\\t\\t    flags & DNS_VERIFY_SECURE)
(21,"Update the SSHFP RR in DNS with the new "\n\\n\\t\\t\\t\\t    "host key to get rid of this message.")
(22,1)
(23,check_host_key(host, hostaddr, options.port, host_key, RDRW,\n\\n\\t    options.user_hostfiles, options.num_user_hostfiles,\n\\n\\t    options.system_hostfiles, options.num_system_hostfiles)
(24,num_system_hostfiles)
(25,flags)
(26,options)
(27,options.user_hostfiles)
(28,hostaddr)
(29,options.verify_host_key_dns == 1)
(30,hostaddr)
(31,)
(32,host_key)
(33,warn_changed_key(host_key)
(34,free(fp)
(35,options.port)
(36,options.num_system_hostfiles)
(37,RET)
(38,DNS_VERIFY_FOUND)
(39,host_key)
(40,if (flags & DNS_VERIFY_MATCH)
(41,matching_host_key_dns = 1)
(42,key_is_cert(host_key)
(43,num_user_hostfiles)
(44,!key_is_cert(host_key)
(45,&flags)
(46,!key_is_cert(host_key)
(47,return check_host_key(host, hostaddr, options.port, host_key, RDRW,\n\\n\\t    options.user_hostfiles, options.num_user_hostfiles,\n\\n\\t    options.system_hostfiles, options.num_system_hostfiles)
(48,fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX)
(49,verify_host_key_dns)
(50,flags)
(51,verify_host_key_dns(host, hostaddr, host_key, &flags)
(52,flags)
(53,fp)
(54,)
(55,matching_host_key_dns)
(56,options)
(57,)
(58,SSH_FP_HEX)
(59,options.num_user_hostfiles)
(60,char *host)
(61,options.verify_host_key_dns &&\n\\n\\t    verify_host_key_dns(host, hostaddr, host_key, &flags)
(62,flags)
(63,system_hostfiles)
(64,options)
(65,options.system_hostfiles)
(66,options)
(67,key_type(host_key)
(68,flags)
(69,if (!key_is_cert(host_key)
(70,host)
(71,"Server host key: %s %s")
(72,SSH_FP_MD5)
(73,flags & DNS_VERIFY_MATCH &&\n\\n\\t\\t\\t    flags & DNS_VERIFY_SECURE)
(74,0)
(75,host_key)
(76,0)
(77,return 0;)
(78,user_hostfiles)
(79,flags & DNS_VERIFY_MATCH)
(80,key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX)
(81,fp)
(82,options)
(83,host_key)
(84,flags = 0)
(85,)
(86,port)
(87,1)
(88,0)
(89,options.verify_host_key_dns == 1 &&\n\\n\\t\\t\\t    flags & DNS_VERIFY_MATCH &&\n\\n\\t\\t\\t    flags & DNS_VERIFY_SECURE)
(90,debug("Server host key: %s %s", key_type(host_key)
(91,struct sockaddr *hostaddr)
(92,DNS_VERIFY_MATCH)
(93,flags & DNS_VERIFY_SECURE)
(94,host_key)
(95,verify_host_key_dns)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^