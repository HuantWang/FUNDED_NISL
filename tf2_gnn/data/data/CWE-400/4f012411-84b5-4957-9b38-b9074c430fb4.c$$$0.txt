-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
39,40
39,41
39,42
39,43
39,44
39,45
40,41
42,43
42,44
42,45
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
64,65
65,66
66,67
66,68
67,68
72,73
73,74
73,75
74,75
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,34,35,36,38,41,46,47,50,51,56,58,62,63,68,69,70,71,75,76,77
-----computeFrom-----
12,13
12,14
23,24
23,25
43,44
43,45
44,45
44,46
48,49
48,50
-----guardedBy-----
50,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(15,23,0)
(24,15,0)
(14,32,0)
(17,26,0)
(43,9,0)
(12,35,0)
(36,9,0)
(19,32,0)
(23,26,0)
(1,29,0)
(27,29,0)
(18,5,0)
(15,32,0)
(4,9,0)
(20,15,0)
(31,23,0)
(11,31,0)
(16,41,0)
(32,29,0)
(32,19,0)
(25,26,0)
(23,8,0)
(38,17,0)
(31,24,0)
(37,16,0)
(15,24,0)
(10,26,0)
(6,9,0)
(30,9,0)
(5,39,0)
(24,31,0)
(33,15,0)
(35,41,0)
(21,29,0)
(7,26,0)
(40,26,0)
(13,30,0)
(35,23,0)
(34,9,0)
(31,32,0)
(2,23,0)
(0,31,0)
(8,23,0)
(22,19,0)
(35,32,0)
(8,2,1)
(15,23,1)
(0,11,1)
(2,28,1)
(28,32,1)
(42,7,1)
(13,42,1)
(38,28,1)
(7,17,1)
(3,36,1)
(35,32,1)
(16,37,1)
(34,16,1)
(30,13,1)
(22,14,1)
(18,24,1)
(23,8,1)
(32,19,1)
(31,0,1)
(24,31,1)
(34,5,1)
(24,15,1)
(15,32,1)
(3,34,1)
(12,24,1)
(20,33,1)
(17,38,1)
(35,12,1)
(35,23,1)
(37,35,1)
(19,22,1)
(42,25,1)
(33,42,1)
(25,23,1)
(31,32,1)
(36,30,1)
(11,15,1)
(31,23,1)
(5,18,1)
(15,20,1)
(15,23,2)
(38,28,2)
(5,24,2)
(0,15,2)
(24,31,2)
(17,28,2)
(23,28,2)
(31,32,2)
(15,42,2)
(35,32,2)
(31,15,2)
(32,19,2)
(31,23,2)
(7,28,2)
(35,24,2)
(15,32,2)
(36,42,2)
(2,28,2)
(12,24,2)
(34,42,2)
(33,42,2)
(25,28,2)
(18,24,2)
(8,28,2)
(24,15,2)
(16,24,2)
(23,8,2)
(30,42,2)
(13,42,2)
(11,15,2)
(37,24,2)
(35,23,2)
(24,42,2)
(20,42,2)
-----------------------------------
(0,2000)
(1,switch(7)
(2,count)
(3,RET)
(4,case 7:)
(5,printLine("Sleep time too long")
(6,default:)
(7,break;)
(8,RAND32()
(9,)
(10,case 6:)
(11,count)
(12,count)
(13,"Benign, fixed string")
(14,count)
(15,count > 0)
(16,printLine("Sleep time OK")
(17,printLine("Benign, fixed string")
(18,"Sleep time too long")
(19,-1)
(20,0)
(21,switch(6)
(22,1)
(23,count = RAND32()
(24,count > 0 && count <= 2000)
(25,break;)
(26,)
(27,count)
(28,6)
(29,)
(30,printLine("Benign, fixed string")
(31,count <= 2000)
(32,count = -1)
(33,count)
(34,break;)
(35,SLEEP(count)
(36,break;)
(37,"Sleep time OK")
(38,"Benign, fixed string")
(39,)
(40,default:)
(41,)
(42,7)
(43,if (count > 0 && count <= 2000)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^