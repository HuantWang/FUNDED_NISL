-----label-----
0
-----code-----
static void goodG2BSink(int count)
{
    if(goodG2BStatic)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
14,17
14,18
14,19
14,20
14,21
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
45,48
46,47
48,49
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
72,73
72,74
73,74
73,75
74,75
77,78
79,80
80,81
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
88,89
90,91
90,92
90,93
90,94
90,95
91,92
93,94
95,96
96,97
96,98
99,100
99,101
100,101
102,103
104,105
106,107
107,108
108,109
108,110
109,110
112,113
112,114
113,114
115,116
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,6,8,12,18,20,22,26,28,29,32,35,37,38,40,44,47,49,50,54,56,61,62,67,68,71,75,76,78,81,87,89,92,94,97,98,101,103,105,110,111,114,119,121
-----computeFrom-----
42,43
42,44
52,53
52,54
65,66
65,67
69,70
69,71
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2BSink(int count){    if(goodG2BStatic)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodG2BSink(int count)
goodG2BSink
int count
int
count
count
{    if(goodG2BStatic)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
if(goodG2BStatic)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
goodG2BStatic
goodG2BStatic
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(12,0,0)
(58,19,0)
(20,22,0)
(59,57,0)
(11,60,0)
(56,46,0)
(7,42,0)
(23,5,0)
(0,36,0)
(54,22,0)
(15,10,0)
(51,6,0)
(25,22,0)
(21,20,0)
(18,42,0)
(45,39,0)
(3,57,0)
(6,20,0)
(36,0,0)
(57,22,0)
(61,47,0)
(36,20,0)
(27,16,0)
(9,20,0)
(53,35,0)
(20,21,0)
(46,56,0)
(48,34,0)
(21,42,0)
(22,26,0)
(44,19,0)
(43,22,0)
(52,61,0)
(60,13,0)
(42,22,0)
(2,6,0)
(41,22,0)
(17,5,0)
(1,35,0)
(49,50,0)
(16,36,0)
(36,56,0)
(58,5,0)
(32,46,0)
(31,21,0)
(39,5,0)
(24,22,0)
(29,36,0)
(35,22,0)
(33,58,0)
(50,30,0)
(19,40,0)
(38,36,0)
(19,58,0)
(19,44,0)
(50,20,0)
(14,19,0)
(36,16,0)
(28,22,0)
(56,36,0)
(4,21,0)
(6,51,1)
(58,5,1)
(49,55,1)
(51,2,1)
(36,16,1)
(5,23,1)
(6,20,1)
(57,59,1)
(14,33,1)
(36,0,1)
(2,20,1)
(17,60,1)
(59,3,1)
(1,53,1)
(3,35,1)
(17,6,1)
(42,18,1)
(38,16,1)
(53,8,1)
(55,58,1)
(56,36,1)
(19,14,1)
(12,29,1)
(18,7,1)
(7,57,1)
(0,12,1)
(46,32,1)
(20,21,1)
(37,8,1)
(19,40,1)
(36,20,1)
(4,31,1)
(21,42,1)
(61,52,1)
(37,55,1)
(50,20,1)
(9,42,1)
(50,49,1)
(32,58,1)
(52,56,1)
(16,27,1)
(29,46,1)
(33,39,1)
(36,38,1)
(33,5,1)
(35,1,1)
(19,44,1)
(45,56,1)
(58,19,1)
(45,61,1)
(21,4,1)
(39,45,1)
(31,9,1)
(23,17,1)
(56,46,1)
(27,0,1)
(60,11,1)
(37,50,1)
(11,6,1)
(39,5,1)
(52,56,2)
(14,8,2)
(51,8,2)
(35,8,2)
(20,8,2)
(57,8,2)
(53,8,2)
(29,58,2)
(6,20,2)
(33,58,2)
(0,58,2)
(19,40,2)
(59,8,2)
(19,8,2)
(12,58,2)
(3,8,2)
(58,19,2)
(45,58,2)
(36,0,2)
(21,8,2)
(56,36,2)
(39,58,2)
(36,16,2)
(58,8,2)
(50,55,2)
(9,8,2)
(31,8,2)
(38,58,2)
(27,58,2)
(11,6,2)
(2,8,2)
(55,8,2)
(49,55,2)
(42,8,2)
(17,8,2)
(19,58,2)
(50,20,2)
(58,5,2)
(19,44,2)
(36,20,2)
(16,58,2)
(56,46,2)
(14,58,2)
(58,58,2)
(60,6,2)
(39,5,2)
(23,8,2)
(56,58,2)
(21,42,2)
(18,8,2)
(1,8,2)
(6,8,2)
(7,8,2)
(4,8,2)
(33,8,2)
(46,58,2)
(5,8,2)
(36,58,2)
(20,21,2)
(32,58,2)
(61,56,2)
-----------------------------------
(0,sizeof(char)
(1,0)
(2,pFile)
(3,pFile)
(4,"w+")
(5,i = 0)
(6,pFile == NULL)
(7,filename)
(8,goodG2BStatic)
(9,pFile)
(10,)
(11,1)
(12,char)
(13,)
(14,count)
(15,if (strlen(SENTENCE)
(16,strlen(SENTENCE)
(17,i)
(18,"output_bad.txt")
(19,(size_t)
(20,pFile = fopen(filename, "w+")
(21,fopen(filename, "w+")
(22,)
(23,0)
(24,if (pFile)
(25,pFile)
(26,)
(27,SENTENCE)
(28,for (i = 0; i < (size_t)
(29,SENTENCE)
(30,)
(31,filename)
(32,SENTENCE)
(33,i)
(34,)
(35,i = 0)
(36,fwrite(SENTENCE, sizeof(char)
(37,RET)
(38,pFile)
(39,i++)
(40,int count)
(41,if (pFile == NULL)
(42,*filename = "output_bad.txt")
(43,i)
(44,size_t)
(45,i)
(46,strlen(SENTENCE)
(47,)
(48,if(goodG2BStatic)
(49,pFile)
(50,fclose(pFile)
(51,NULL)
(52,1)
(53,i)
(54,filename)
(55,pFile)
(56,strlen(SENTENCE)
(57,*pFile = NULL)
(58,i < (size_t)
(59,NULL)
(60,exit(1)
(61,exit(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^