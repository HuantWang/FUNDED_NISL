-----label-----
0
-----code-----
static void goodG2B1()
{
    int64_t * data;
    data = NULL;
    if(globalFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
22,23
23,24
24,25
24,26
25,26
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
60,62
61,62
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,9,11,12,16,18,21,26,27,32,36,38,41,43,47,48,53,54,55,59,62,63,66,68
-----computeFrom-----
14,15
14,16
30,31
30,32
42,43
42,44
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    int64_t * data;    data = NULL;    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    int64_t * data;    data = NULL;    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalFalse
globalFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,0,0)
(24,6,0)
(0,15,0)
(12,3,0)
(0,20,0)
(11,19,0)
(9,3,0)
(21,14,0)
(2,3,0)
(1,24,0)
(16,20,0)
(15,0,0)
(13,14,0)
(6,24,0)
(7,26,0)
(17,8,0)
(14,13,0)
(10,6,0)
(25,0,0)
(15,19,0)
(8,3,0)
(24,21,0)
(20,19,0)
(14,20,0)
(4,8,0)
(22,7,0)
(21,24,0)
(20,14,0)
(14,21,0)
(25,11,1)
(18,25,1)
(4,17,1)
(1,16,1)
(24,6,1)
(5,15,1)
(5,7,1)
(23,8,1)
(14,21,1)
(21,24,1)
(11,20,1)
(8,4,1)
(10,1,1)
(15,0,1)
(0,20,1)
(0,18,1)
(14,13,1)
(27,5,1)
(22,23,1)
(16,23,1)
(6,10,1)
(20,14,1)
(7,22,1)
(20,14,2)
(18,23,2)
(14,23,2)
(1,23,2)
(24,23,2)
(11,23,2)
(16,23,2)
(0,23,2)
(0,20,2)
(6,23,2)
(24,6,2)
(7,23,2)
(15,23,2)
(20,23,2)
(15,0,2)
(21,24,2)
(10,23,2)
(22,23,2)
(21,23,2)
(14,21,2)
(14,13,2)
(25,23,2)
-----------------------------------
(0,data[0])
(1,100)
(2,if(globalTrue)
(3,)
(4,NULL)
(5,globalTrue)
(6,sizeof(int64_t)
(7,printLine("Benign, fixed string")
(8,data = NULL)
(9,if(globalFalse)
(10,int64_t)
(11,L)
(12,data)
(13,int64_t *)
(14,(int64_t *)
(15,printLongLongLine(data[0])
(16,data)
(17,data)
(18,0)
(19,)
(20,data = (int64_t *)
(21,ALLOCA(100*sizeof(int64_t)
(22,"Benign, fixed string")
(23,globalFalse)
(24,100*sizeof(int64_t)
(25,data)
(26,)
(27,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^