-----label-----
0
-----code-----
static void goodB2G1Sink(size_t data)
{
    if(goodB2G1Static)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
11,14
12,13
14,15
15,16
16,17
16,18
17,18
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
39,40
42,43
42,44
42,45
42,46
42,47
43,44
44,45
44,46
45,46
47,48
47,49
48,49
48,50
50,51
52,53
52,54
53,54
55,56
55,57
56,57
58,59
59,60
59,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
-----nextToken-----
2,4,7,9,13,18,19,24,26,27,32,35,37,40,41,46,49,51,54,57,60,61,65,67,72,74,78,80,82,86,88,92,94,99,100
-----computeFrom-----
29,30
29,31
30,31
30,32
38,39
38,40
44,45
44,46
55,56
55,57
63,64
63,65
-----guardedBy-----
37,82
40,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1Sink(size_t data){    if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G1Sink(size_t data)
goodB2G1Sink
size_t data
size_t
size_t
data
data
{    if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
goodB2G1Static
goodB2G1Static
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(13,3,0)
(39,47,0)
(26,22,0)
(25,20,0)
(22,44,0)
(29,8,0)
(15,42,0)
(19,27,0)
(35,20,0)
(8,15,0)
(18,20,0)
(42,37,0)
(32,0,0)
(5,6,0)
(42,47,0)
(46,8,0)
(2,41,0)
(32,4,0)
(34,2,0)
(47,42,0)
(36,45,0)
(6,12,0)
(45,20,0)
(17,4,0)
(15,8,0)
(33,9,0)
(38,42,0)
(12,20,0)
(16,33,0)
(42,15,0)
(4,32,0)
(41,37,0)
(24,41,0)
(41,2,0)
(6,5,0)
(12,6,0)
(11,12,0)
(14,27,0)
(1,18,0)
(35,12,0)
(23,6,0)
(27,7,0)
(45,12,0)
(40,3,0)
(6,23,0)
(10,35,0)
(18,12,0)
(8,37,0)
(3,12,0)
(30,45,0)
(41,23,0)
(23,41,0)
(28,21,0)
(39,38,1)
(4,17,1)
(40,12,1)
(17,3,1)
(35,12,1)
(6,5,1)
(32,4,1)
(31,33,1)
(13,40,1)
(3,13,1)
(11,15,1)
(22,26,1)
(30,36,1)
(10,45,1)
(6,23,1)
(41,37,1)
(36,3,1)
(42,47,1)
(45,12,1)
(16,43,1)
(38,43,1)
(2,34,1)
(26,15,1)
(41,2,1)
(34,24,1)
(47,39,1)
(15,42,1)
(46,42,1)
(8,37,1)
(42,37,1)
(1,35,1)
(23,41,1)
(35,10,1)
(33,16,1)
(15,8,1)
(45,30,1)
(12,6,1)
(31,22,1)
(36,32,1)
(31,18,1)
(18,1,1)
(3,12,1)
(8,29,1)
(18,12,1)
(29,46,1)
(24,11,1)
(42,43,2)
(42,47,2)
(15,43,2)
(36,15,2)
(22,15,2)
(1,15,2)
(13,15,2)
(35,12,2)
(33,43,2)
(15,8,2)
(47,43,2)
(46,42,2)
(12,15,2)
(40,15,2)
(18,15,2)
(30,15,2)
(23,41,2)
(32,3,2)
(41,15,2)
(6,5,2)
(34,15,2)
(45,15,2)
(6,23,2)
(8,42,2)
(3,15,2)
(4,3,2)
(29,42,2)
(41,2,2)
(18,12,2)
(38,43,2)
(32,4,2)
(39,43,2)
(8,37,2)
(15,42,2)
(35,15,2)
(10,15,2)
(24,15,2)
(17,3,2)
(45,12,2)
(6,15,2)
(16,43,2)
(12,6,2)
(26,15,2)
(42,37,2)
(41,37,2)
(3,12,2)
(23,15,2)
(2,15,2)
(11,15,2)
-----------------------------------
(0,)
(1,myString)
(2,sizeof(char)
(3,myString == NULL)
(4,-1)
(5,char *)
(6,(char *)
(7,)
(8,data < 100)
(9,)
(10,myString)
(11,myString)
(12,myString = (char *)
(13,NULL)
(14,if (data > strlen(HELLO_STRING)
(15,data > strlen(HELLO_STRING)
(16,"Benign, fixed string")
(17,1)
(18,free(myString)
(19,myString)
(20,)
(21,)
(22,printLine("Input is less than the length of the source string or too large")
(23,malloc(data*sizeof(char)
(24,data)
(25,if (myString == NULL)
(26,"Input is less than the length of the source string or too large")
(27,)
(28,if(goodB2G1Static)
(29,100)
(30,HELLO_STRING)
(31,RET)
(32,exit(-1)
(33,printLine("Benign, fixed string")
(34,char)
(35,printLine(myString)
(36,myString)
(37,size_t data)
(38,data)
(39,HELLO_STRING)
(40,myString)
(41,data*sizeof(char)
(42,data > strlen(HELLO_STRING)
(43,goodB2G1Static)
(44,)
(45,strcpy(myString, HELLO_STRING)
(46,data)
(47,strlen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^