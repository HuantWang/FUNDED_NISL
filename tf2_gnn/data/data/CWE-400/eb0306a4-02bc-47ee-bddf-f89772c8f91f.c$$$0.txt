-----label-----
0
-----code-----
int
main (int argc, char **argv)
{
  int c;
  int retval;

#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)
  setlocale (LC_MESSAGES, "");
#endif
#if defined (HAVE_SETLOCALE)
  setlocale (LC_CTYPE, "");
  setlocale (LC_COLLATE, "");
#endif
  bindtextdomain (PACKAGE, LOCALEDIR);
  textdomain (PACKAGE);

  program_name = *argv;
  xmalloc_set_program_name (program_name);
  bfd_set_error_program_name (program_name);
#if BFD_SUPPORTS_PLUGINS
  bfd_plugin_set_program_name (program_name);
#endif

  START_PROGRESS (program_name, 0);

  expandargv (&argc, &argv);

  if (bfd_init () != BFD_INIT_MAGIC)
    fatal (_("fatal error: libbfd ABI mismatch"));
  set_default_bfd_target ();

  while ((c = getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",
			   long_options, (int *) 0)) != EOF)
    {
      switch (c)
	{
	case 'a':
	  print_debug_syms = 1;
	  break;
	case 'A':
	case 'o':
	  filename_per_symbol = 1;
	  break;
	case 'B':		/* For MIPS compatibility.  */
	  set_output_format ("bsd");
	  break;
	case 'C':
	  do_demangle = 1;
	  if (optarg != NULL)
	    {
	      enum demangling_styles style;

	      style = cplus_demangle_name_to_style (optarg);
	      if (style == unknown_demangling)
		fatal (_("unknown demangling style `%s'"),
		       optarg);

	      cplus_demangle_set_style (style);
	    }
	  break;
	case OPTION_RECURSE_LIMIT:
	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;
	  break;
	case OPTION_NO_RECURSE_LIMIT:
	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;
	  break;
	case 'D':
	  dynamic = 1;
	  break;
	case 'e':
	  /* Ignored for HP/UX compatibility.  */
	  break;
	case 'f':
	  set_output_format (optarg);
	  break;
	case 'g':
	  external_only = 1;
	  break;
	case 'H':
	case 'h':
	  usage (stdout, 0);
	case 'l':
	  line_numbers = 1;
	  break;
	case 'n':
	case 'v':
	  no_sort = 0;
	  sort_numerically = 1;
	  sort_by_size = 0;
	  break;
	case 'p':
	  no_sort = 1;
	  sort_numerically = 0;
	  sort_by_size = 0;
	  break;
	case OPTION_SIZE_SORT:
	  no_sort = 0;
	  sort_numerically = 0;
	  sort_by_size = 1;
	  break;
	case 'P':
	  set_output_format ("posix");
	  break;
	case 'r':
	  reverse_sort = 1;
	  break;
	case 's':
	  print_armap = 1;
	  break;
	case 'S':
	  print_size = 1;
	  break;
	case 't':
	  set_print_radix (optarg);
	  break;
	case 'u':
	  undefined_only = 1;
	  break;
	case 'V':
	  show_version = 1;
	  break;
	case 'X':
	  /* Ignored for (partial) AIX compatibility.  On AIX, the
	     argument has values 32, 64, or 32_64, and specifies that
	     only 32-bit, only 64-bit, or both kinds of objects should
	     be examined.  The default is 32.  So plain AIX nm on a
	     library archive with both kinds of objects will ignore
	     the 64-bit ones.  For GNU nm, the default is and always
	     has been -X 32_64, and other options are not supported.  */
	  if (strcmp (optarg, "32_64") != 0)
	    fatal (_("Only -X 32_64 is supported"));
	  break;

	case OPTION_TARGET:	/* --target */
	  target = optarg;
	  break;

	case OPTION_PLUGIN:	/* --plugin */
#if BFD_SUPPORTS_PLUGINS
	  bfd_plugin_set_plugin (optarg);
#else
	  fatal (_("sorry - this program has been built without plugin support\n"));
#endif
	  break;

	case 0:		/* A long option that just sets a flag.  */
	  break;

	default:
	  usage (stderr, 1);
	}
    }

  if (show_version)
    print_version ("nm");

  if (sort_by_size && undefined_only)
    {
      non_fatal (_("Using the --size-sort and --undefined-only options together"));
      non_fatal (_("will produce no output, since undefined symbols have no size."));
      return 0;
    }

  /* OK, all options now parsed.  If no filename specified, do a.out.  */
  if (optind == argc)
    return !display_file ("a.out");

  retval = 0;

  if (argc - optind > 1)
    filename_per_file = 1;

  /* We were given several filenames to do.  */
  while (optind < argc)
    {
      PROGRESS (1);
      if (!display_file (argv[optind++]))
	retval++;
    }

  END_PROGRESS (program_name);

  exit (retval);
  return retval;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
11,12
11,13
11,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
15,34
15,35
15,36
16,17
17,18
17,19
19,20
21,22
22,23
22,24
24,25
26,27
27,28
27,29
27,30
28,29
30,31
32,33
34,35
35,36
35,37
36,37
38,39
39,40
41,42
42,43
42,44
43,44
45,46
46,47
48,49
49,50
49,51
50,51
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
69,72
70,71
72,73
73,74
75,76
76,77
78,79
78,80
79,80
79,81
80,81
81,82
83,84
85,86
86,87
86,88
87,88
89,90
89,91
90,91
93,94
94,95
95,96
97,98
97,99
98,99
98,100
99,100
100,101
100,102
101,102
103,104
103,105
103,106
103,107
103,108
103,109
104,105
106,107
108,109
111,112
113,114
113,115
114,115
114,116
116,117
119,120
121,122
122,123
122,124
123,124
125,126
125,127
125,128
125,129
125,130
125,131
125,132
125,133
125,134
125,135
125,136
125,137
125,138
125,139
125,140
125,141
125,142
125,143
125,144
125,145
125,146
125,147
125,148
125,149
125,150
125,151
125,152
125,153
125,154
125,155
125,156
125,157
125,158
125,159
125,160
125,161
125,162
125,163
125,164
125,165
125,166
125,167
125,168
125,169
125,170
125,171
125,172
125,173
125,174
125,175
125,176
125,177
125,178
125,179
125,180
125,181
125,182
125,183
125,184
125,185
125,186
125,187
125,188
125,189
125,190
125,191
125,192
125,193
125,194
125,195
125,196
125,197
125,198
125,199
125,200
125,201
125,202
125,203
125,204
125,205
125,206
125,207
125,208
125,209
125,210
125,211
125,212
126,127
128,129
129,130
129,131
130,131
134,135
136,137
138,139
139,140
139,141
140,141
144,145
146,147
147,148
147,149
148,149
152,153
154,155
155,156
155,157
156,157
159,160
159,161
160,161
160,162
161,162
163,164
165,166
165,167
165,168
165,169
166,167
167,168
167,169
168,169
170,171
172,173
173,174
173,175
174,175
176,177
176,178
177,178
179,180
181,182
181,183
182,183
182,184
183,184
185,186
187,188
188,189
188,190
188,191
189,190
191,192
191,193
192,193
195,196
197,198
198,199
198,200
199,200
201,202
204,205
205,206
207,208
208,209
208,210
209,210
211,212
212,213
215,216
216,217
218,219
219,220
219,221
220,221
222,223
225,226
227,228
228,229
228,230
229,230
233,234
236,237
238,239
239,240
239,241
240,241
242,243
243,244
246,247
248,249
249,250
249,251
250,251
254,255
256,257
258,259
259,260
259,261
259,262
260,261
262,263
265,266
267,268
268,269
268,270
269,270
273,274
275,276
277,278
278,279
278,280
279,280
282,283
283,284
283,285
284,285
287,288
288,289
288,290
289,290
293,294
295,296
296,297
296,298
297,298
300,301
301,302
301,303
302,303
305,306
306,307
306,308
307,308
311,312
312,313
314,315
315,316
315,317
316,317
319,320
320,321
320,322
321,322
324,325
325,326
325,327
326,327
330,331
332,333
333,334
333,335
334,335
338,339
340,341
341,342
341,343
342,343
346,347
348,349
349,350
349,351
350,351
354,355
356,357
357,358
357,359
358,359
362,363
364,365
365,366
365,367
366,367
368,369
371,372
373,374
374,375
374,376
375,376
379,380
381,382
382,383
382,384
383,384
387,388
389,390
389,391
390,391
390,392
391,392
391,393
391,394
392,393
394,395
398,399
399,400
399,401
400,401
402,403
402,404
403,404
407,408
408,409
410,411
411,412
411,413
412,413
414,415
417,418
418,419
420,421
421,422
421,423
422,423
424,425
424,426
425,426
429,430
433,434
434,435
434,436
434,437
435,436
437,438
440,441
440,442
441,442
443,444
444,445
444,446
445,446
448,449
448,450
449,450
449,451
450,451
452,453
452,454
455,456
455,457
455,458
456,457
457,458
457,459
458,459
460,461
460,462
461,462
464,465
465,466
465,467
466,467
468,469
468,470
469,470
472,473
474,475
474,476
475,476
475,477
476,477
478,479
480,481
481,482
482,483
482,484
483,484
486,487
487,488
487,489
488,489
491,492
491,493
492,493
492,494
493,494
493,495
494,495
496,497
499,500
500,501
500,502
501,502
504,505
504,506
505,506
505,507
506,507
508,509
510,511
510,512
511,512
512,513
512,514
513,514
516,517
516,518
517,518
518,519
518,520
519,520
521,522
521,523
522,523
524,525
525,526
527,528
528,529
529,530
531,532
532,533
532,534
533,534
535,536
537,538
538,539
538,540
539,540
541,542
543,544
544,545
-----nextToken-----
2,4,6,8,10,12,13,14,18,20,23,25,29,31,33,37,40,44,47,51,54,58,60,64,66,67,71,74,77,82,84,88,91,92,96,102,105,107,109,110,112,115,117,118,120,124,127,131,132,133,135,137,141,142,143,145,149,150,151,153,157,158,162,164,169,171,175,178,180,184,186,190,193,194,196,200,202,203,206,210,213,214,217,221,223,224,226,230,231,232,234,235,237,241,244,245,247,251,252,253,255,257,261,263,264,266,270,271,272,274,276,280,281,285,286,290,291,292,294,298,299,303,304,308,309,310,313,317,318,322,323,327,328,329,331,335,336,337,339,343,344,345,347,351,352,353,355,359,360,361,363,367,369,370,372,376,377,378,380,384,385,386,388,393,395,396,397,401,404,405,406,409,413,415,416,419,423,426,427,428,430,431,432,436,438,439,442,446,447,451,453,454,459,462,463,467,470,471,473,477,479,484,485,489,490,495,497,498,502,503,507,509,514,515,520,523,526,530,534,536,540,542,545
-----computeFrom-----
42,43
42,44
79,80
79,81
98,99
98,100
100,101
100,102
129,130
129,131
139,140
139,141
155,156
155,157
160,161
160,162
173,174
173,175
182,183
182,184
208,209
208,210
219,220
219,221
228,229
228,230
249,250
249,251
268,269
268,270
278,279
278,280
283,284
283,285
288,289
288,290
296,297
296,298
301,302
301,303
306,307
306,308
315,316
315,317
320,321
320,322
325,326
325,327
341,342
341,343
349,350
349,351
357,358
357,359
374,375
374,376
382,383
382,384
390,391
390,392
411,412
411,413
475,476
475,477
487,488
487,489
492,493
492,494
493,494
493,495
500,501
500,502
505,506
505,507
-----guardedBy-----
162,196
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;IdExpression;Name;CompoundStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ReferenceOperator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
intmain (int argc, char **argv){  int c;  int retval;#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)  setlocale (LC_MESSAGES, "");#endif#if defined (HAVE_SETLOCALE)  setlocale (LC_CTYPE, "");  setlocale (LC_COLLATE, "");#endif  bindtextdomain (PACKAGE, LOCALEDIR);  textdomain (PACKAGE);  program_name = *argv;  xmalloc_set_program_name (program_name);  bfd_set_error_program_name (program_name);#if BFD_SUPPORTS_PLUGINS  bfd_plugin_set_program_name (program_name);#endif  START_PROGRESS (program_name, 0);  expandargv (&argc, &argv);  if (bfd_init () != BFD_INIT_MAGIC)    fatal (_("fatal error: libbfd ABI mismatch"));  set_default_bfd_target ();  while ((c = getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",			   long_options, (int *) 0)) != EOF)    {      switch (c)	{	case 'a':	  print_debug_syms = 1;	  break;	case 'A':	case 'o':	  filename_per_symbol = 1;	  break;	case 'B':		/* For MIPS compatibility.  */	  set_output_format ("bsd");	  break;	case 'C':	  do_demangle = 1;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case OPTION_RECURSE_LIMIT:	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case OPTION_NO_RECURSE_LIMIT:	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'D':	  dynamic = 1;	  break;	case 'e':	  /* Ignored for HP/UX compatibility.  */	  break;	case 'f':	  set_output_format (optarg);	  break;	case 'g':	  external_only = 1;	  break;	case 'H':	case 'h':	  usage (stdout, 0);	case 'l':	  line_numbers = 1;	  break;	case 'n':	case 'v':	  no_sort = 0;	  sort_numerically = 1;	  sort_by_size = 0;	  break;	case 'p':	  no_sort = 1;	  sort_numerically = 0;	  sort_by_size = 0;	  break;	case OPTION_SIZE_SORT:	  no_sort = 0;	  sort_numerically = 0;	  sort_by_size = 1;	  break;	case 'P':	  set_output_format ("posix");	  break;	case 'r':	  reverse_sort = 1;	  break;	case 's':	  print_armap = 1;	  break;	case 'S':	  print_size = 1;	  break;	case 't':	  set_print_radix (optarg);	  break;	case 'u':	  undefined_only = 1;	  break;	case 'V':	  show_version = 1;	  break;	case 'X':	  /* Ignored for (partial) AIX compatibility.  On AIX, the	     argument has values 32, 64, or 32_64, and specifies that	     only 32-bit, only 64-bit, or both kinds of objects should	     be examined.  The default is 32.  So plain AIX nm on a	     library archive with both kinds of objects will ignore	     the 64-bit ones.  For GNU nm, the default is and always	     has been -X 32_64, and other options are not supported.  */	  if (strcmp (optarg, "32_64") != 0)	    fatal (_("Only -X 32_64 is supported"));	  break;	case OPTION_TARGET:	/* --target */	  target = optarg;	  break;	case OPTION_PLUGIN:	/* --plugin */#if BFD_SUPPORTS_PLUGINS	  bfd_plugin_set_plugin (optarg);#else	  fatal (_("sorry - this program has been built without plugin support\n"));#endif	  break;	case 0:		/* A long option that just sets a flag.  */	  break;	default:	  usage (stderr, 1);	}    }  if (show_version)    print_version ("nm");  if (sort_by_size && undefined_only)    {      non_fatal (_("Using the --size-sort and --undefined-only options together"));      non_fatal (_("will produce no output, since undefined symbols have no size."));      return 0;    }  /* OK, all options now parsed.  If no filename specified, do a.out.  */  if (optind == argc)    return !display_file ("a.out");  retval = 0;  if (argc - optind > 1)    filename_per_file = 1;  /* We were given several filenames to do.  */  while (optind < argc)    {      PROGRESS (1);      if (!display_file (argv[optind++]))	retval++;    }  END_PROGRESS (program_name);  exit (retval);  return retval;}
int
main (int argc, char **argv)
main
int argc
int
argc
argc
char **argv
char
**argv
*
*
argv
{  int c;  int retval;#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)  setlocale (LC_MESSAGES, "");#endif#if defined (HAVE_SETLOCALE)  setlocale (LC_CTYPE, "");  setlocale (LC_COLLATE, "");#endif  bindtextdomain (PACKAGE, LOCALEDIR);  textdomain (PACKAGE);  program_name = *argv;  xmalloc_set_program_name (program_name);  bfd_set_error_program_name (program_name);#if BFD_SUPPORTS_PLUGINS  bfd_plugin_set_program_name (program_name);#endif  START_PROGRESS (program_name, 0);  expandargv (&argc, &argv);  if (bfd_init () != BFD_INIT_MAGIC)    fatal (_("fatal error: libbfd ABI mismatch"));  set_default_bfd_target ();  while ((c = getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",			   long_options, (int *) 0)) != EOF)    {      switch (c)	{	case 'a':	  print_debug_syms = 1;	  break;	case 'A':	case 'o':	  filename_per_symbol = 1;	  break;	case 'B':		/* For MIPS compatibility.  */	  set_output_format ("bsd");	  break;	case 'C':	  do_demangle = 1;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case OPTION_RECURSE_LIMIT:	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case OPTION_NO_RECURSE_LIMIT:	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'D':	  dynamic = 1;	  break;	case 'e':	  /* Ignored for HP/UX compatibility.  */	  break;	case 'f':	  set_output_format (optarg);	  break;	case 'g':	  external_only = 1;	  break;	case 'H':	case 'h':	  usage (stdout, 0);	case 'l':	  line_numbers = 1;	  break;	case 'n':	case 'v':	  no_sort = 0;	  sort_numerically = 1;	  sort_by_size = 0;	  break;	case 'p':	  no_sort = 1;	  sort_numerically = 0;	  sort_by_size = 0;	  break;	case OPTION_SIZE_SORT:	  no_sort = 0;	  sort_numerically = 0;	  sort_by_size = 1;	  break;	case 'P':	  set_output_format ("posix");	  break;	case 'r':	  reverse_sort = 1;	  break;	case 's':	  print_armap = 1;	  break;	case 'S':	  print_size = 1;	  break;	case 't':	  set_print_radix (optarg);	  break;	case 'u':	  undefined_only = 1;	  break;	case 'V':	  show_version = 1;	  break;	case 'X':	  /* Ignored for (partial) AIX compatibility.  On AIX, the	     argument has values 32, 64, or 32_64, and specifies that	     only 32-bit, only 64-bit, or both kinds of objects should	     be examined.  The default is 32.  So plain AIX nm on a	     library archive with both kinds of objects will ignore	     the 64-bit ones.  For GNU nm, the default is and always	     has been -X 32_64, and other options are not supported.  */	  if (strcmp (optarg, "32_64") != 0)	    fatal (_("Only -X 32_64 is supported"));	  break;	case OPTION_TARGET:	/* --target */	  target = optarg;	  break;	case OPTION_PLUGIN:	/* --plugin */#if BFD_SUPPORTS_PLUGINS	  bfd_plugin_set_plugin (optarg);#else	  fatal (_("sorry - this program has been built without plugin support\n"));#endif	  break;	case 0:		/* A long option that just sets a flag.  */	  break;	default:	  usage (stderr, 1);	}    }  if (show_version)    print_version ("nm");  if (sort_by_size && undefined_only)    {      non_fatal (_("Using the --size-sort and --undefined-only options together"));      non_fatal (_("will produce no output, since undefined symbols have no size."));      return 0;    }  /* OK, all options now parsed.  If no filename specified, do a.out.  */  if (optind == argc)    return !display_file ("a.out");  retval = 0;  if (argc - optind > 1)    filename_per_file = 1;  /* We were given several filenames to do.  */  while (optind < argc)    {      PROGRESS (1);      if (!display_file (argv[optind++]))	retval++;    }  END_PROGRESS (program_name);  exit (retval);  return retval;}
int c;
int c;
int
c
c
int retval;
int retval;
int
retval
retval
bindtextdomain (PACKAGE, LOCALEDIR);
bindtextdomain (PACKAGE, LOCALEDIR)
bindtextdomain
bindtextdomain
PACKAGE
PACKAGE
LOCALEDIR
LOCALEDIR
textdomain (PACKAGE);
textdomain (PACKAGE);
textdomain
textdomain
(PACKAGE)
PACKAGE
PACKAGE
program_name = *argv;
program_name = *argv
program_name
program_name
*argv
argv
argv
xmalloc_set_program_name (program_name);
xmalloc_set_program_name (program_name);
xmalloc_set_program_name
xmalloc_set_program_name
(program_name)
program_name
program_name
bfd_set_error_program_name (program_name);
bfd_set_error_program_name (program_name)
bfd_set_error_program_name
bfd_set_error_program_name
program_name
program_name
START_PROGRESS (program_name, 0);
START_PROGRESS (program_name, 0)
START_PROGRESS
START_PROGRESS
program_name
program_name
0
expandargv (&argc, &argv);
expandargv (&argc, &argv)
expandargv
expandargv
&argc
argc
argc
&argv
argv
argv
if (bfd_init () != BFD_INIT_MAGIC)    fatal (_("fatal error: libbfd ABI mismatch"));
bfd_init () != BFD_INIT_MAGIC
bfd_init ()
bfd_init
bfd_init
BFD_INIT_MAGIC
BFD_INIT_MAGIC
fatal (_("fatal error: libbfd ABI mismatch"));
fatal (_("fatal error: libbfd ABI mismatch"))
fatal
fatal
_("fatal error: libbfd ABI mismatch")
_
_
"fatal error: libbfd ABI mismatch"
set_default_bfd_target ();
set_default_bfd_target ()
set_default_bfd_target
set_default_bfd_target
while ((c = getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",			   long_options, (int *) 0)) != EOF)    {      switch (c)	{	case 'a':	  print_debug_syms = 1;	  break;	case 'A':	case 'o':	  filename_per_symbol = 1;	  break;	case 'B':		/* For MIPS compatibility.  */	  set_output_format ("bsd");	  break;	case 'C':	  do_demangle = 1;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case OPTION_RECURSE_LIMIT:	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case OPTION_NO_RECURSE_LIMIT:	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'D':	  dynamic = 1;	  break;	case 'e':	  /* Ignored for HP/UX compatibility.  */	  break;	case 'f':	  set_output_format (optarg);	  break;	case 'g':	  external_only = 1;	  break;	case 'H':	case 'h':	  usage (stdout, 0);	case 'l':	  line_numbers = 1;	  break;	case 'n':	case 'v':	  no_sort = 0;	  sort_numerically = 1;	  sort_by_size = 0;	  break;	case 'p':	  no_sort = 1;	  sort_numerically = 0;	  sort_by_size = 0;	  break;	case OPTION_SIZE_SORT:	  no_sort = 0;	  sort_numerically = 0;	  sort_by_size = 1;	  break;	case 'P':	  set_output_format ("posix");	  break;	case 'r':	  reverse_sort = 1;	  break;	case 's':	  print_armap = 1;	  break;	case 'S':	  print_size = 1;	  break;	case 't':	  set_print_radix (optarg);	  break;	case 'u':	  undefined_only = 1;	  break;	case 'V':	  show_version = 1;	  break;	case 'X':	  /* Ignored for (partial) AIX compatibility.  On AIX, the	     argument has values 32, 64, or 32_64, and specifies that	     only 32-bit, only 64-bit, or both kinds of objects should	     be examined.  The default is 32.  So plain AIX nm on a	     library archive with both kinds of objects will ignore	     the 64-bit ones.  For GNU nm, the default is and always	     has been -X 32_64, and other options are not supported.  */	  if (strcmp (optarg, "32_64") != 0)	    fatal (_("Only -X 32_64 is supported"));	  break;	case OPTION_TARGET:	/* --target */	  target = optarg;	  break;	case OPTION_PLUGIN:	/* --plugin */#if BFD_SUPPORTS_PLUGINS	  bfd_plugin_set_plugin (optarg);#else	  fatal (_("sorry - this program has been built without plugin support\n"));#endif	  break;	case 0:		/* A long option that just sets a flag.  */	  break;	default:	  usage (stderr, 1);	}    }
(c = getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",			   long_options, (int *) 0)) != EOF
(c = getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",			   long_options, (int *) 0))
c = getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",			   long_options, (int *) 0)
c
c
getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",			   long_options, (int *) 0)
getopt_long
getopt_long
argc
argc
argv
argv
"aABCDef:gHhlnopPrSst:uvVvX:"
long_options
long_options
(int *) 0
int *
int
*
*
0
EOF
EOF
{      switch (c)	{	case 'a':	  print_debug_syms = 1;	  break;	case 'A':	case 'o':	  filename_per_symbol = 1;	  break;	case 'B':		/* For MIPS compatibility.  */	  set_output_format ("bsd");	  break;	case 'C':	  do_demangle = 1;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case OPTION_RECURSE_LIMIT:	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case OPTION_NO_RECURSE_LIMIT:	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'D':	  dynamic = 1;	  break;	case 'e':	  /* Ignored for HP/UX compatibility.  */	  break;	case 'f':	  set_output_format (optarg);	  break;	case 'g':	  external_only = 1;	  break;	case 'H':	case 'h':	  usage (stdout, 0);	case 'l':	  line_numbers = 1;	  break;	case 'n':	case 'v':	  no_sort = 0;	  sort_numerically = 1;	  sort_by_size = 0;	  break;	case 'p':	  no_sort = 1;	  sort_numerically = 0;	  sort_by_size = 0;	  break;	case OPTION_SIZE_SORT:	  no_sort = 0;	  sort_numerically = 0;	  sort_by_size = 1;	  break;	case 'P':	  set_output_format ("posix");	  break;	case 'r':	  reverse_sort = 1;	  break;	case 's':	  print_armap = 1;	  break;	case 'S':	  print_size = 1;	  break;	case 't':	  set_print_radix (optarg);	  break;	case 'u':	  undefined_only = 1;	  break;	case 'V':	  show_version = 1;	  break;	case 'X':	  /* Ignored for (partial) AIX compatibility.  On AIX, the	     argument has values 32, 64, or 32_64, and specifies that	     only 32-bit, only 64-bit, or both kinds of objects should	     be examined.  The default is 32.  So plain AIX nm on a	     library archive with both kinds of objects will ignore	     the 64-bit ones.  For GNU nm, the default is and always	     has been -X 32_64, and other options are not supported.  */	  if (strcmp (optarg, "32_64") != 0)	    fatal (_("Only -X 32_64 is supported"));	  break;	case OPTION_TARGET:	/* --target */	  target = optarg;	  break;	case OPTION_PLUGIN:	/* --plugin */#if BFD_SUPPORTS_PLUGINS	  bfd_plugin_set_plugin (optarg);#else	  fatal (_("sorry - this program has been built without plugin support\n"));#endif	  break;	case 0:		/* A long option that just sets a flag.  */	  break;	default:	  usage (stderr, 1);	}    }
switch (c)	{	case 'a':	  print_debug_syms = 1;	  break;	case 'A':	case 'o':	  filename_per_symbol = 1;	  break;	case 'B':		/* For MIPS compatibility.  */	  set_output_format ("bsd");	  break;	case 'C':	  do_demangle = 1;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case OPTION_RECURSE_LIMIT:	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case OPTION_NO_RECURSE_LIMIT:	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'D':	  dynamic = 1;	  break;	case 'e':	  /* Ignored for HP/UX compatibility.  */	  break;	case 'f':	  set_output_format (optarg);	  break;	case 'g':	  external_only = 1;	  break;	case 'H':	case 'h':	  usage (stdout, 0);	case 'l':	  line_numbers = 1;	  break;	case 'n':	case 'v':	  no_sort = 0;	  sort_numerically = 1;	  sort_by_size = 0;	  break;	case 'p':	  no_sort = 1;	  sort_numerically = 0;	  sort_by_size = 0;	  break;	case OPTION_SIZE_SORT:	  no_sort = 0;	  sort_numerically = 0;	  sort_by_size = 1;	  break;	case 'P':	  set_output_format ("posix");	  break;	case 'r':	  reverse_sort = 1;	  break;	case 's':	  print_armap = 1;	  break;	case 'S':	  print_size = 1;	  break;	case 't':	  set_print_radix (optarg);	  break;	case 'u':	  undefined_only = 1;	  break;	case 'V':	  show_version = 1;	  break;	case 'X':	  /* Ignored for (partial) AIX compatibility.  On AIX, the	     argument has values 32, 64, or 32_64, and specifies that	     only 32-bit, only 64-bit, or both kinds of objects should	     be examined.  The default is 32.  So plain AIX nm on a	     library archive with both kinds of objects will ignore	     the 64-bit ones.  For GNU nm, the default is and always	     has been -X 32_64, and other options are not supported.  */	  if (strcmp (optarg, "32_64") != 0)	    fatal (_("Only -X 32_64 is supported"));	  break;	case OPTION_TARGET:	/* --target */	  target = optarg;	  break;	case OPTION_PLUGIN:	/* --plugin */#if BFD_SUPPORTS_PLUGINS	  bfd_plugin_set_plugin (optarg);#else	  fatal (_("sorry - this program has been built without plugin support\n"));#endif	  break;	case 0:		/* A long option that just sets a flag.  */	  break;	default:	  usage (stderr, 1);	}
c
c
{	case 'a':	  print_debug_syms = 1;	  break;	case 'A':	case 'o':	  filename_per_symbol = 1;	  break;	case 'B':		/* For MIPS compatibility.  */	  set_output_format ("bsd");	  break;	case 'C':	  do_demangle = 1;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case OPTION_RECURSE_LIMIT:	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case OPTION_NO_RECURSE_LIMIT:	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'D':	  dynamic = 1;	  break;	case 'e':	  /* Ignored for HP/UX compatibility.  */	  break;	case 'f':	  set_output_format (optarg);	  break;	case 'g':	  external_only = 1;	  break;	case 'H':	case 'h':	  usage (stdout, 0);	case 'l':	  line_numbers = 1;	  break;	case 'n':	case 'v':	  no_sort = 0;	  sort_numerically = 1;	  sort_by_size = 0;	  break;	case 'p':	  no_sort = 1;	  sort_numerically = 0;	  sort_by_size = 0;	  break;	case OPTION_SIZE_SORT:	  no_sort = 0;	  sort_numerically = 0;	  sort_by_size = 1;	  break;	case 'P':	  set_output_format ("posix");	  break;	case 'r':	  reverse_sort = 1;	  break;	case 's':	  print_armap = 1;	  break;	case 'S':	  print_size = 1;	  break;	case 't':	  set_print_radix (optarg);	  break;	case 'u':	  undefined_only = 1;	  break;	case 'V':	  show_version = 1;	  break;	case 'X':	  /* Ignored for (partial) AIX compatibility.  On AIX, the	     argument has values 32, 64, or 32_64, and specifies that	     only 32-bit, only 64-bit, or both kinds of objects should	     be examined.  The default is 32.  So plain AIX nm on a	     library archive with both kinds of objects will ignore	     the 64-bit ones.  For GNU nm, the default is and always	     has been -X 32_64, and other options are not supported.  */	  if (strcmp (optarg, "32_64") != 0)	    fatal (_("Only -X 32_64 is supported"));	  break;	case OPTION_TARGET:	/* --target */	  target = optarg;	  break;	case OPTION_PLUGIN:	/* --plugin */#if BFD_SUPPORTS_PLUGINS	  bfd_plugin_set_plugin (optarg);#else	  fatal (_("sorry - this program has been built without plugin support\n"));#endif	  break;	case 0:		/* A long option that just sets a flag.  */	  break;	default:	  usage (stderr, 1);	}
case 'a':
'a'
print_debug_syms = 1;
print_debug_syms = 1
print_debug_syms
print_debug_syms
1
break;
case 'A':
'A'
case 'o':
'o'
filename_per_symbol = 1;
filename_per_symbol = 1
filename_per_symbol
filename_per_symbol
1
break;
case 'B':
'B'
set_output_format ("bsd");
set_output_format ("bsd")
set_output_format
set_output_format
"bsd"
break;
case 'C':
'C'
do_demangle = 1;
do_demangle = 1
do_demangle
do_demangle
1
if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }
optarg != NULL
optarg
optarg
NULL
NULL
{	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }
enum demangling_styles style;
enum demangling_styles style;
enum demangling_styles
demangling_styles
style
style
style = cplus_demangle_name_to_style (optarg);
style = cplus_demangle_name_to_style (optarg)
style
style
cplus_demangle_name_to_style (optarg)
cplus_demangle_name_to_style
cplus_demangle_name_to_style
optarg
optarg
if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);
style == unknown_demangling
style
style
unknown_demangling
unknown_demangling
fatal (_("unknown demangling style `%s'"),		       optarg);
fatal (_("unknown demangling style `%s'"),		       optarg)
fatal
fatal
_("unknown demangling style `%s'")
_
_
"unknown demangling style `%s'"
optarg
optarg
cplus_demangle_set_style (style);
cplus_demangle_set_style (style)
cplus_demangle_set_style
cplus_demangle_set_style
style
style
break;
case OPTION_RECURSE_LIMIT:
OPTION_RECURSE_LIMIT
OPTION_RECURSE_LIMIT
demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;
demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT
demangle_flags
demangle_flags
~ DMGL_NO_RECURSE_LIMIT
DMGL_NO_RECURSE_LIMIT
DMGL_NO_RECURSE_LIMIT
break;
case OPTION_NO_RECURSE_LIMIT:
OPTION_NO_RECURSE_LIMIT
OPTION_NO_RECURSE_LIMIT
demangle_flags |= DMGL_NO_RECURSE_LIMIT;
demangle_flags |= DMGL_NO_RECURSE_LIMIT
demangle_flags
demangle_flags
DMGL_NO_RECURSE_LIMIT
DMGL_NO_RECURSE_LIMIT
break;
case 'D':
'D'
dynamic = 1;
dynamic = 1
dynamic
dynamic
1
break;
case 'e':
'e'
break;
case 'f':
'f'
set_output_format (optarg);
set_output_format (optarg);
set_output_format
set_output_format
(optarg)
optarg
optarg
break;
case 'g':
'g'
external_only = 1;
external_only = 1
external_only
external_only
1
break;
case 'H':
'H'
case 'h':
'h'
usage (stdout, 0);
usage (stdout, 0)
usage
usage
stdout
stdout
0
case 'l':
'l'
line_numbers = 1;
line_numbers = 1
line_numbers
line_numbers
1
break;
case 'n':
'n'
case 'v':
'v'
no_sort = 0;
no_sort = 0
no_sort
no_sort
0
sort_numerically = 1;
sort_numerically = 1
sort_numerically
sort_numerically
1
sort_by_size = 0;
sort_by_size = 0
sort_by_size
sort_by_size
0
break;
case 'p':
'p'
no_sort = 1;
no_sort = 1
no_sort
no_sort
1
sort_numerically = 0;
sort_numerically = 0
sort_numerically
sort_numerically
0
sort_by_size = 0;
sort_by_size = 0
sort_by_size
sort_by_size
0
break;
case OPTION_SIZE_SORT:
OPTION_SIZE_SORT
OPTION_SIZE_SORT
no_sort = 0;
no_sort = 0
no_sort
no_sort
0
sort_numerically = 0;
sort_numerically = 0
sort_numerically
sort_numerically
0
sort_by_size = 1;
sort_by_size = 1
sort_by_size
sort_by_size
1
break;
case 'P':
'P'
set_output_format ("posix");
set_output_format ("posix")
set_output_format
set_output_format
"posix"
break;
case 'r':
'r'
reverse_sort = 1;
reverse_sort = 1
reverse_sort
reverse_sort
1
break;
case 's':
's'
print_armap = 1;
print_armap = 1
print_armap
print_armap
1
break;
case 'S':
'S'
print_size = 1;
print_size = 1
print_size
print_size
1
break;
case 't':
't'
set_print_radix (optarg);
set_print_radix (optarg)
set_print_radix
set_print_radix
optarg
optarg
break;
case 'u':
'u'
undefined_only = 1;
undefined_only = 1
undefined_only
undefined_only
1
break;
case 'V':
'V'
show_version = 1;
show_version = 1
show_version
show_version
1
break;
case 'X':
'X'
if (strcmp (optarg, "32_64") != 0)	    fatal (_("Only -X 32_64 is supported"));
strcmp (optarg, "32_64") != 0
strcmp (optarg, "32_64")
strcmp
strcmp
optarg
optarg
"32_64"
0
fatal (_("Only -X 32_64 is supported"));
fatal (_("Only -X 32_64 is supported"))
fatal
fatal
_("Only -X 32_64 is supported")
_
_
"Only -X 32_64 is supported"
break;
case OPTION_TARGET:
OPTION_TARGET
OPTION_TARGET
target = optarg;
target = optarg
target
target
optarg
optarg
break;
case OPTION_PLUGIN:
OPTION_PLUGIN
OPTION_PLUGIN
fatal (_("sorry - this program has been built without plugin support\n"));
fatal (_("sorry - this program has been built without plugin support\n"))
fatal
fatal
_("sorry - this program has been built without plugin support\n")
_
_
"sorry - this program has been built without plugin support\n"
break;
case 0:
0
break;
default:
usage (stderr, 1);
usage (stderr, 1)
usage
usage
stderr
stderr
1
if (show_version)    print_version ("nm");
show_version
show_version
print_version ("nm");
print_version ("nm")
print_version
print_version
"nm"
if (sort_by_size && undefined_only)    {      non_fatal (_("Using the --size-sort and --undefined-only options together"));      non_fatal (_("will produce no output, since undefined symbols have no size."));      return 0;    }
sort_by_size && undefined_only
sort_by_size
sort_by_size
&& undefined_only
&&
undefined_only
{      non_fatal (_("Using the --size-sort and --undefined-only options together"));      non_fatal (_("will produce no output, since undefined symbols have no size."));      return 0;    }
non_fatal (_("Using the --size-sort and --undefined-only options together"));
non_fatal (_("Using the --size-sort and --undefined-only options together"))
non_fatal
non_fatal
_("Using the --size-sort and --undefined-only options together")
_
_
"Using the --size-sort and --undefined-only options together"
non_fatal (_("will produce no output, since undefined symbols have no size."));
non_fatal (_("will produce no output, since undefined symbols have no size."))
non_fatal
non_fatal
_("will produce no output, since undefined symbols have no size.")
_
_
"will produce no output, since undefined symbols have no size."
return 0;
0
if (optind == argc)    return !display_file ("a.out");
optind == argc
optind
optind
argc
argc
return !display_file ("a.out");
!display_file ("a.out")
display_file ("a.out")
display_file
display_file
"a.out"
retval = 0;
retval = 0
retval
retval
0
if (argc - optind > 1)    filename_per_file = 1;
argc - optind > 1
argc - optind
argc
argc
optind
optind
1
filename_per_file = 1;
filename_per_file = 1
filename_per_file
filename_per_file
1
while (optind < argc)    {      PROGRESS (1);      if (!display_file (argv[optind++]))	retval++;    }
optind < argc
optind
optind
argc
argc
{      PROGRESS (1);      if (!display_file (argv[optind++]))	retval++;    }
PROGRESS (1);
PROGRESS (1)
PROGRESS
PROGRESS
1
if (!display_file (argv[optind++]))	retval++;
!display_file (argv[optind++])
display_file (argv[optind++])
display_file
display_file
argv[optind++]
argv
argv
optind++
optind
optind
retval++;
retval++
retval
retval
END_PROGRESS (program_name);
END_PROGRESS (program_name)
END_PROGRESS
END_PROGRESS
program_name
program_name
exit (retval);
exit (retval)
exit
exit
retval
retval
return retval;
retval
retval
-----joern-----
(95,57,0)
(246,10,0)
(117,101,0)
(286,214,0)
(225,266,0)
(110,279,0)
(237,184,0)
(250,214,0)
(151,61,0)
(82,214,0)
(177,235,0)
(271,170,0)
(92,214,0)
(95,266,0)
(156,214,0)
(85,214,0)
(29,214,0)
(24,214,0)
(203,257,0)
(203,289,0)
(218,72,0)
(203,116,0)
(246,143,0)
(56,190,0)
(242,143,0)
(142,45,0)
(113,214,0)
(26,98,0)
(61,269,0)
(203,10,0)
(220,96,0)
(132,239,0)
(26,81,0)
(57,266,0)
(191,87,0)
(173,117,0)
(127,214,0)
(53,186,0)
(242,85,0)
(246,245,0)
(246,45,0)
(69,266,0)
(176,143,0)
(270,214,0)
(265,274,0)
(43,214,0)
(73,105,0)
(160,239,0)
(277,211,0)
(125,246,0)
(212,116,0)
(126,85,0)
(99,213,0)
(141,163,0)
(278,77,0)
(279,266,0)
(63,87,0)
(242,45,0)
(248,10,0)
(11,214,0)
(285,237,0)
(203,45,0)
(67,155,0)
(226,101,0)
(34,270,0)
(155,214,0)
(13,214,0)
(4,143,0)
(71,139,0)
(17,152,0)
(217,214,0)
(275,211,0)
(274,265,0)
(203,143,0)
(128,155,0)
(202,101,0)
(246,24,0)
(222,153,0)
(167,197,0)
(100,242,0)
(287,95,0)
(227,60,0)
(102,214,0)
(242,245,0)
(264,214,0)
(215,124,0)
(242,72,0)
(49,214,0)
(203,91,0)
(231,214,0)
(137,139,0)
(241,266,0)
(246,21,0)
(18,21,0)
(23,147,0)
(146,60,0)
(38,214,0)
(118,214,0)
(54,214,0)
(233,101,0)
(178,214,0)
(187,273,0)
(41,124,0)
(194,74,0)
(42,214,0)
(16,79,0)
(229,170,0)
(271,157,0)
(242,270,0)
(224,136,0)
(59,22,0)
(246,85,0)
(255,266,0)
(232,45,0)
(262,79,0)
(72,214,0)
(140,26,0)
(77,266,0)
(234,214,0)
(168,163,0)
(47,203,0)
(246,289,0)
(251,214,0)
(98,26,0)
(247,214,0)
(246,91,0)
(84,172,0)
(112,91,0)
(186,214,0)
(105,266,0)
(223,214,0)
(204,86,0)
(203,170,0)
(242,116,0)
(208,59,0)
(281,253,0)
(46,213,0)
(209,30,0)
(137,289,0)
(269,22,0)
(256,157,0)
(203,155,0)
(158,214,0)
(242,10,0)
(143,214,0)
(64,37,0)
(76,22,0)
(246,253,0)
(263,266,0)
(101,139,0)
(280,214,0)
(65,266,0)
(257,214,0)
(203,246,0)
(239,213,0)
(189,57,0)
(152,214,0)
(105,73,0)
(149,270,0)
(246,178,0)
(45,214,0)
(203,72,0)
(123,214,0)
(133,116,0)
(199,57,0)
(236,274,0)
(124,239,0)
(79,214,0)
(203,211,0)
(3,20,0)
(36,214,0)
(198,263,0)
(50,160,0)
(289,137,0)
(44,214,0)
(246,270,0)
(219,214,0)
(33,21,0)
(268,74,0)
(66,59,0)
(221,214,0)
(51,207,0)
(9,266,0)
(83,266,0)
(162,27,0)
(283,81,0)
(105,71,0)
(147,266,0)
(28,36,0)
(111,214,0)
(228,175,0)
(246,214,0)
(15,214,0)
(183,172,0)
(245,214,0)
(114,85,0)
(144,10,0)
(138,184,0)
(246,210,0)
(242,257,0)
(235,214,0)
(48,190,0)
(230,266,0)
(121,117,0)
(26,139,0)
(240,229,0)
(288,199,0)
(210,214,0)
(19,214,0)
(174,69,0)
(246,152,0)
(203,270,0)
(91,214,0)
(193,266,0)
(179,214,0)
(181,37,0)
(157,271,0)
(148,71,0)
(242,190,0)
(203,253,0)
(242,79,0)
(200,257,0)
(242,289,0)
(86,130,0)
(203,24,0)
(243,266,0)
(101,117,0)
(159,214,0)
(160,213,0)
(107,214,0)
(154,269,0)
(169,91,0)
(75,131,0)
(39,246,0)
(115,268,0)
(242,178,0)
(188,57,0)
(21,214,0)
(274,101,0)
(122,137,0)
(185,240,0)
(180,214,0)
(242,210,0)
(242,246,0)
(246,246,0)
(27,100,0)
(196,214,0)
(150,266,0)
(242,211,0)
(163,141,0)
(136,214,0)
(182,197,0)
(267,96,0)
(203,178,0)
(254,103,0)
(31,73,0)
(7,214,0)
(60,214,0)
(192,244,0)
(52,214,0)
(2,269,0)
(249,98,0)
(206,214,0)
(229,240,0)
(14,152,0)
(246,211,0)
(88,257,0)
(211,214,0)
(73,22,0)
(12,6,0)
(81,283,0)
(175,214,0)
(253,214,0)
(235,20,0)
(93,58,0)
(203,245,0)
(145,153,0)
(104,214,0)
(273,214,0)
(261,210,0)
(269,61,0)
(172,266,0)
(216,214,0)
(246,190,0)
(20,235,0)
(272,214,0)
(134,214,0)
(106,214,0)
(203,85,0)
(71,105,0)
(55,245,0)
(101,22,0)
(135,245,0)
(201,244,0)
(284,178,0)
(0,203,0)
(96,266,0)
(164,178,0)
(282,273,0)
(0,9,0)
(203,186,0)
(165,82,0)
(120,24,0)
(101,274,0)
(239,207,0)
(8,214,0)
(0,242,0)
(244,266,0)
(62,72,0)
(246,79,0)
(100,27,0)
(242,253,0)
(291,265,0)
(25,237,0)
(276,266,0)
(195,214,0)
(203,21,0)
(246,155,0)
(103,254,0)
(35,214,0)
(246,257,0)
(74,268,0)
(242,152,0)
(242,186,0)
(242,21,0)
(161,103,0)
(203,210,0)
(32,210,0)
(131,75,0)
(252,214,0)
(246,72,0)
(109,130,0)
(116,214,0)
(5,131,0)
(242,91,0)
(242,155,0)
(78,76,0)
(203,79,0)
(108,214,0)
(80,9,0)
(238,214,0)
(81,26,0)
(190,214,0)
(203,152,0)
(68,76,0)
(290,119,0)
(94,214,0)
(89,214,0)
(117,173,0)
(10,214,0)
(1,186,0)
(207,239,0)
(258,214,0)
(203,190,0)
(30,214,0)
(166,101,0)
(87,266,0)
(260,253,0)
(97,214,0)
(70,289,0)
(242,24,0)
(246,116,0)
(184,237,0)
(171,214,0)
(153,266,0)
(205,214,0)
(246,186,0)
(9,57,0)
(40,24,0)
(90,58,0)
(289,266,0)
(232,259,1)
(280,259,1)
(246,210,1)
(104,37,1)
(59,22,1)
(95,287,1)
(252,253,1)
(126,178,1)
(0,9,1)
(236,221,1)
(191,172,1)
(267,87,1)
(199,57,1)
(69,174,1)
(240,185,1)
(25,285,1)
(203,152,1)
(18,259,1)
(47,271,1)
(26,139,1)
(284,259,1)
(101,117,1)
(227,146,1)
(242,10,1)
(218,259,1)
(192,201,1)
(73,31,1)
(278,76,1)
(166,226,1)
(208,197,1)
(78,61,1)
(164,284,1)
(212,133,1)
(23,279,1)
(45,142,1)
(274,101,1)
(247,136,1)
(24,40,1)
(236,92,1)
(203,85,1)
(203,47,1)
(198,96,1)
(202,233,1)
(91,169,1)
(200,88,1)
(225,75,1)
(73,22,1)
(12,129,1)
(236,219,1)
(0,203,1)
(285,259,1)
(236,247,1)
(174,147,1)
(217,210,1)
(117,173,1)
(246,270,1)
(236,171,1)
(236,89,1)
(167,129,1)
(160,50,1)
(194,268,1)
(242,270,1)
(116,212,1)
(203,10,1)
(143,4,1)
(236,118,1)
(187,259,1)
(70,263,1)
(122,70,1)
(26,98,1)
(93,61,1)
(237,25,1)
(82,165,1)
(246,211,1)
(75,131,1)
(242,72,1)
(105,71,1)
(92,45,1)
(246,39,1)
(44,82,1)
(9,80,1)
(171,190,1)
(203,143,1)
(203,253,1)
(20,3,1)
(263,198,1)
(151,269,1)
(203,79,1)
(178,164,1)
(203,190,1)
(13,36,1)
(203,45,1)
(124,41,1)
(209,259,1)
(236,52,1)
(220,267,1)
(186,1,1)
(117,121,1)
(259,265,1)
(19,152,1)
(165,259,1)
(196,72,1)
(76,22,1)
(246,143,1)
(58,90,1)
(236,280,1)
(203,210,1)
(228,259,1)
(201,69,1)
(242,245,1)
(249,140,1)
(248,259,1)
(102,246,1)
(71,139,1)
(246,116,1)
(221,91,1)
(48,259,1)
(288,283,1)
(128,259,1)
(236,102,1)
(203,91,1)
(203,186,1)
(52,254,1)
(236,111,1)
(203,155,1)
(203,24,1)
(62,218,1)
(242,85,1)
(273,282,1)
(78,199,1)
(246,155,1)
(17,14,1)
(236,225,1)
(50,124,1)
(254,103,1)
(112,259,1)
(246,91,1)
(242,211,1)
(54,259,1)
(242,178,1)
(236,60,1)
(4,176,1)
(246,289,1)
(180,155,1)
(229,240,1)
(9,57,1)
(125,259,1)
(163,168,1)
(242,253,1)
(129,265,1)
(253,260,1)
(224,259,1)
(147,23,1)
(236,49,1)
(39,125,1)
(146,259,1)
(160,239,1)
(71,148,1)
(148,73,1)
(145,222,1)
(86,204,1)
(66,208,1)
(265,274,1)
(34,21,1)
(0,242,1)
(157,256,1)
(3,177,1)
(14,259,1)
(77,278,1)
(67,128,1)
(242,116,1)
(283,81,1)
(137,122,1)
(281,259,1)
(149,34,1)
(6,12,1)
(236,217,1)
(277,270,1)
(185,197,1)
(120,143,1)
(256,229,1)
(81,26,1)
(203,257,1)
(177,259,1)
(246,245,1)
(197,182,1)
(40,120,1)
(88,259,1)
(104,160,1)
(184,138,1)
(275,277,1)
(236,44,1)
(78,283,1)
(242,210,1)
(105,73,1)
(235,20,1)
(98,249,1)
(30,209,1)
(168,141,1)
(246,72,1)
(242,100,1)
(203,211,1)
(76,68,1)
(36,28,1)
(268,115,1)
(236,195,1)
(161,184,1)
(16,262,1)
(63,191,1)
(152,17,1)
(189,188,1)
(203,21,1)
(188,59,1)
(51,132,1)
(242,190,1)
(203,72,1)
(95,57,1)
(33,18,1)
(132,37,1)
(21,33,1)
(2,154,1)
(100,27,1)
(246,246,1)
(182,167,1)
(31,244,1)
(219,245,1)
(155,67,1)
(246,85,1)
(57,189,1)
(203,270,1)
(269,2,1)
(245,55,1)
(236,54,1)
(246,178,1)
(68,78,1)
(203,289,1)
(233,166,1)
(90,93,1)
(84,183,1)
(248,273,1)
(262,24,1)
(114,126,1)
(135,259,1)
(269,22,1)
(210,261,1)
(287,77,1)
(50,74,1)
(101,139,1)
(41,215,1)
(181,64,1)
(101,22,1)
(27,162,1)
(199,288,1)
(190,56,1)
(246,257,1)
(236,104,1)
(242,155,1)
(56,48,1)
(261,32,1)
(291,274,1)
(28,259,1)
(211,275,1)
(203,178,1)
(124,239,1)
(59,66,1)
(61,269,1)
(74,194,1)
(79,16,1)
(242,152,1)
(207,51,1)
(154,57,1)
(37,181,1)
(226,236,1)
(242,246,1)
(172,84,1)
(236,19,1)
(55,135,1)
(242,91,1)
(271,157,1)
(10,144,1)
(236,180,1)
(138,237,1)
(242,289,1)
(203,245,1)
(87,63,1)
(246,45,1)
(203,116,1)
(236,134,1)
(246,190,1)
(236,8,1)
(32,85,1)
(140,86,1)
(169,112,1)
(153,145,1)
(85,114,1)
(246,186,1)
(265,291,1)
(289,137,1)
(118,186,1)
(244,192,1)
(260,281,1)
(270,149,1)
(176,259,1)
(111,175,1)
(163,141,1)
(282,187,1)
(246,21,1)
(133,259,1)
(80,95,1)
(52,184,1)
(78,58,1)
(162,59,1)
(134,235,1)
(236,156,1)
(257,200,1)
(137,139,1)
(115,124,1)
(60,227,1)
(184,237,1)
(175,228,1)
(215,239,1)
(74,268,1)
(72,62,1)
(89,211,1)
(61,151,1)
(203,246,1)
(8,257,1)
(5,163,1)
(167,6,1)
(246,79,1)
(242,79,1)
(136,224,1)
(195,30,1)
(183,153,1)
(246,152,1)
(103,161,1)
(279,110,1)
(142,232,1)
(246,253,1)
(1,53,1)
(242,257,1)
(242,24,1)
(96,220,1)
(242,186,1)
(144,248,1)
(242,143,1)
(236,13,1)
(53,259,1)
(236,252,1)
(49,10,1)
(64,116,1)
(242,45,1)
(246,10,1)
(246,24,1)
(141,105,1)
(242,21,1)
(225,163,1)
(121,202,1)
(110,289,1)
(131,5,1)
(204,76,1)
(236,196,1)
(239,207,1)
(156,79,1)
(197,167,1)
(270,259,2)
(253,259,2)
(248,259,2)
(20,259,2)
(55,259,2)
(278,59,2)
(163,141,2)
(265,274,2)
(260,259,2)
(245,259,2)
(89,259,2)
(242,257,2)
(178,259,2)
(261,259,2)
(224,259,2)
(19,259,2)
(82,259,2)
(242,21,2)
(26,76,2)
(274,101,2)
(242,72,2)
(161,184,2)
(90,61,2)
(242,246,2)
(269,59,2)
(1,259,2)
(246,270,2)
(58,61,2)
(262,259,2)
(219,259,2)
(242,211,2)
(204,76,2)
(246,91,2)
(246,246,2)
(93,61,2)
(246,253,2)
(271,157,2)
(246,116,2)
(246,190,2)
(203,253,2)
(233,265,2)
(203,79,2)
(124,37,2)
(101,117,2)
(13,259,2)
(180,259,2)
(44,259,2)
(203,245,2)
(137,139,2)
(242,190,2)
(210,259,2)
(140,76,2)
(30,259,2)
(203,178,2)
(246,257,2)
(37,259,2)
(242,210,2)
(126,259,2)
(124,239,2)
(32,259,2)
(282,259,2)
(68,76,2)
(14,259,2)
(246,85,2)
(235,20,2)
(85,259,2)
(116,259,2)
(207,37,2)
(128,259,2)
(246,45,2)
(144,259,2)
(184,259,2)
(54,259,2)
(26,139,2)
(76,59,2)
(95,57,2)
(246,143,2)
(25,259,2)
(254,103,2)
(246,10,2)
(208,197,2)
(242,186,2)
(51,37,2)
(101,265,2)
(98,76,2)
(103,184,2)
(181,259,2)
(265,265,2)
(242,143,2)
(240,197,2)
(136,259,2)
(61,59,2)
(154,59,2)
(194,124,2)
(67,259,2)
(105,73,2)
(184,237,2)
(6,129,2)
(5,163,2)
(162,59,2)
(4,259,2)
(284,259,2)
(80,59,2)
(135,259,2)
(169,259,2)
(131,163,2)
(246,186,2)
(164,259,2)
(242,253,2)
(203,91,2)
(105,71,2)
(246,289,2)
(48,259,2)
(246,211,2)
(88,259,2)
(81,76,2)
(202,265,2)
(226,265,2)
(229,240,2)
(273,259,2)
(203,24,2)
(242,178,2)
(81,26,2)
(246,79,2)
(66,197,2)
(56,259,2)
(283,81,2)
(256,197,2)
(242,24,2)
(86,76,2)
(21,259,2)
(199,283,2)
(152,259,2)
(27,59,2)
(182,167,2)
(187,259,2)
(242,45,2)
(218,259,2)
(246,24,2)
(254,184,2)
(242,116,2)
(45,259,2)
(59,197,2)
(0,242,2)
(199,57,2)
(242,10,2)
(64,259,2)
(0,9,2)
(157,197,2)
(72,259,2)
(120,259,2)
(33,259,2)
(8,259,2)
(203,85,2)
(24,259,2)
(39,259,2)
(203,210,2)
(203,270,2)
(95,59,2)
(242,79,2)
(59,22,2)
(78,59,2)
(91,259,2)
(269,22,2)
(101,22,2)
(277,259,2)
(60,259,2)
(257,259,2)
(73,22,2)
(203,72,2)
(200,259,2)
(156,259,2)
(242,289,2)
(165,259,2)
(246,155,2)
(239,37,2)
(50,37,2)
(61,269,2)
(190,259,2)
(34,259,2)
(62,259,2)
(185,197,2)
(203,197,2)
(26,98,2)
(252,259,2)
(78,76,2)
(177,259,2)
(246,245,2)
(176,259,2)
(79,259,2)
(203,289,2)
(115,124,2)
(186,259,2)
(117,265,2)
(211,259,2)
(289,137,2)
(138,259,2)
(133,259,2)
(149,259,2)
(146,259,2)
(9,59,2)
(47,197,2)
(0,203,2)
(9,57,2)
(111,259,2)
(203,45,2)
(242,155,2)
(288,283,2)
(242,245,2)
(49,259,2)
(246,178,2)
(239,207,2)
(160,239,2)
(215,37,2)
(118,259,2)
(246,72,2)
(41,37,2)
(104,259,2)
(268,124,2)
(259,265,2)
(196,259,2)
(203,155,2)
(171,259,2)
(12,129,2)
(71,139,2)
(229,197,2)
(155,259,2)
(151,59,2)
(68,59,2)
(102,259,2)
(18,259,2)
(40,259,2)
(57,59,2)
(36,259,2)
(10,259,2)
(203,10,2)
(77,59,2)
(275,259,2)
(237,259,2)
(76,76,2)
(160,37,2)
(287,59,2)
(203,21,2)
(242,91,2)
(28,259,2)
(221,259,2)
(203,143,2)
(189,59,2)
(235,259,2)
(100,59,2)
(132,37,2)
(74,124,2)
(242,270,2)
(142,259,2)
(209,259,2)
(112,259,2)
(188,59,2)
(203,211,2)
(114,259,2)
(271,197,2)
(228,259,2)
(232,259,2)
(121,265,2)
(247,259,2)
(242,59,2)
(203,190,2)
(74,268,2)
(125,259,2)
(203,186,2)
(203,116,2)
(117,173,2)
(227,259,2)
(246,152,2)
(285,259,2)
(203,257,2)
(175,259,2)
(203,246,2)
(246,210,2)
(143,259,2)
(249,76,2)
(212,259,2)
(217,259,2)
(76,22,2)
(246,259,2)
(280,259,2)
(203,152,2)
(236,265,2)
(52,259,2)
(16,259,2)
(92,259,2)
(283,76,2)
(3,259,2)
(2,59,2)
(274,265,2)
(242,85,2)
(246,21,2)
(75,131,2)
(195,259,2)
(281,259,2)
(75,163,2)
(242,152,2)
(100,27,2)
(53,259,2)
(134,259,2)
(166,265,2)
(17,259,2)
(291,265,2)
(101,139,2)
-----------------------------------
(0,RET)
(1,1)
(2,optind)
(3,DMGL_NO_RECURSE_LIMIT)
(4,0)
(5,"fatal error: libbfd ABI mismatch")
(6,print_version ("nm")
(7,case \'H\':)
(8,break;)
(9,return retval;)
(10,line_numbers = 1)
(11,default:)
(12,"nm")
(13,break;)
(14,dynamic)
(15,case \'A\':)
(16,1)
(17,1)
(18,no_sort)
(19,break;)
(20,~ DMGL_NO_RECURSE_LIMIT)
(21,no_sort = 0)
(22,int argc)
(23,program_name)
(24,sort_numerically = 0)
(25,"32_64")
(26,argv[optind++])
(27,display_file ("a.out")
(28,"posix")
(29,case OPTION_SIZE_SORT:)
(30,set_print_radix (optarg)
(31,argc)
(32,sort_by_size)
(33,0)
(34,sort_numerically)
(35,case OPTION_NO_RECURSE_LIMIT:)
(36,set_output_format ("posix")
(37,optarg != NULL)
(38,case \'f\':)
(39,DMGL_NO_RECURSE_LIMIT)
(40,0)
(41,unknown_demangling)
(42,case \'C\':)
(43,case OPTION_PLUGIN:)
(44,break;)
(45,external_only = 1)
(46,if (style == unknown_demangling)
(47,0)
(48,print_debug_syms)
(49,break;)
(50,style)
(51,optarg)
(52,break;)
(53,print_armap)
(54,break;)
(55,1)
(56,1)
(57,retval = 0)
(58,filename_per_file = 1)
(59,optind == argc)
(60,usage (stderr, 1)
(61,argc - optind > 1)
(62,optarg)
(63,"")
(64,optarg)
(65,if (sort_by_size && undefined_only)
(66,argc)
(67,1)
(68,argc)
(69,bfd_plugin_set_program_name (program_name)
(70,program_name)
(71,&argv)
(72,target = optarg)
(73,&argc)
(74,fatal (_("unknown demangling style `%s\'")
(75,fatal (_("fatal error: libbfd ABI mismatch")
(76,optind < argc)
(77,END_PROGRESS (program_name)
(78,optind)
(79,sort_by_size = 1)
(80,retval)
(81,display_file (argv[optind++])
(82,set_output_format (optarg)
(83,c)
(84,"")
(85,sort_numerically = 0)
(86,PROGRESS (1)
(87,setlocale (LC_COLLATE, "")
(88,show_version)
(89,break;)
(90,1)
(91,reverse_sort = 1)
(92,break;)
(93,filename_per_file)
(94,case \'h\':)
(95,exit (retval)
(96,bindtextdomain (PACKAGE, LOCALEDIR)
(97,case \'n\':)
(98,optind++)
(99,style)
(100,!display_file ("a.out")
(101,getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",\n\\n\\t\\t\\t   long_options, (int *)
(102,break;)
(103,_("Only -X 32_64 is supported")
(104,break;)
(105,expandargv (&argc, &argv)
(106,case \'r\':)
(107,if (strcmp (optarg, "32_64")
(108,case \'P\':)
(109,if (!display_file (argv[optind++])
(110,program_name)
(111,break;)
(112,reverse_sort)
(113,case \'s\':)
(114,0)
(115,"unknown demangling style `%s\'")
(116,do_demangle = 1)
(117,(int *)
(118,break;)
(119,)
(120,sort_numerically)
(121,0)
(122,argv)
(123,case \'l\':)
(124,style == unknown_demangling)
(125,demangle_flags)
(126,sort_numerically)
(127,case \'B\':)
(128,filename_per_symbol)
(129,show_version)
(130,)
(131,_("fatal error: libbfd ABI mismatch")
(132,style)
(133,do_demangle)
(134,break;)
(135,undefined_only)
(136,bfd_plugin_set_plugin (optarg)
(137,*argv)
(138,0)
(139,char **argv)
(140,argv)
(141,bfd_init ()
(142,1)
(143,no_sort = 0)
(144,1)
(145,"")
(146,stderr)
(147,bfd_set_error_program_name (program_name)
(148,argv)
(149,1)
(150,if (optind == argc)
(151,1)
(152,dynamic = 1)
(153,setlocale (LC_MESSAGES, "")
(154,argc)
(155,filename_per_symbol = 1)
(156,break;)
(157,_("will produce no output, since undefined symbols have no size.")
(158,case \'a\':)
(159,case OPTION_TARGET:)
(160,cplus_demangle_set_style (style)
(161,"Only -X 32_64 is supported")
(162,"a.out")
(163,bfd_init ()
(164,1)
(165,optarg)
(166,argv)
(167,sort_by_size)
(168,BFD_INIT_MAGIC)
(169,1)
(170,)
(171,break;)
(172,setlocale (LC_CTYPE, "")
(173,int *)
(174,program_name)
(175,set_output_format ("bsd")
(176,no_sort)
(177,demangle_flags)
(178,no_sort = 1)
(179,if (optarg != NULL)
(180,break;)
(181,NULL)
(182,undefined_only)
(183,LC_CTYPE)
(184,strcmp (optarg, "32_64")
(185,"Using the --size-sort and --undefined-only options together")
(186,print_armap = 1)
(187,stdout)
(188,retval)
(189,0)
(190,print_debug_syms = 1)
(191,LC_COLLATE)
(192,0)
(193,while ((c = getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",\n\\n\\t\\t\\t   long_options, (int *)
(194,optarg)
(195,break;)
(196,break;)
(197,sort_by_size && undefined_only)
(198,PACKAGE)
(199,retval++)
(200,1)
(201,program_name)
(202,long_options)
(203,return 0;)
(204,1)
(205,case \'v\':)
(206,case \'p\':)
(207,cplus_demangle_name_to_style (optarg)
(208,optind)
(209,optarg)
(210,sort_by_size = 0)
(211,sort_by_size = 0)
(212,1)
(213,)
(214,)
(215,style)
(216,case 0:)
(217,break;)
(218,target)
(219,break;)
(220,LOCALEDIR)
(221,break;)
(222,LC_MESSAGES)
(223,case \'t\':)
(224,optarg)
(225,set_default_bfd_target ()
(226,argc)
(227,1)
(228,"bsd")
(229,non_fatal (_("Using the --size-sort and --undefined-only options together")
(230,while (optind < argc)
(231,case OPTION_RECURSE_LIMIT:)
(232,external_only)
(233,"aABCDef:gHhlnopPrSst:uvVvX:")
(234,case \'V\':)
(235,demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT)
(236,c)
(237,strcmp (optarg, "32_64")
(238,case \'g\':)
(239,style = cplus_demangle_name_to_style (optarg)
(240,_("Using the --size-sort and --undefined-only options together")
(241,if (argc - optind > 1)
(242,return !display_file ("a.out")
(243,if (bfd_init ()
(244,START_PROGRESS (program_name, 0)
(245,undefined_only = 1)
(246,demangle_flags |= DMGL_NO_RECURSE_LIMIT)
(247,break;)
(248,line_numbers)
(249,optind)
(250,case \'X\':)
(251,case \'S\':)
(252,break;)
(253,print_size = 1)
(254,fatal (_("Only -X 32_64 is supported")
(255,if (show_version)
(256,"will produce no output, since undefined symbols have no size.")
(257,show_version = 1)
(258,case \'o\':)
(259,c)
(260,1)
(261,0)
(262,sort_by_size)
(263,textdomain (PACKAGE)
(264,case \'D\':)
(265,(c = getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",\n\\n\\t\\t\\t   long_options, (int *)
(266,)
(267,PACKAGE)
(268,_("unknown demangling style `%s\'")
(269,argc - optind)
(270,sort_numerically = 1)
(271,non_fatal (_("will produce no output, since undefined symbols have no size.")
(272,case \'u\':)
(273,usage (stdout, 0)
(274,c = getopt_long (argc, argv, "aABCDef:gHhlnopPrSst:uvVvX:",\n\\n\\t\\t\\t   long_options, (int *)
(275,0)
(276,retval)
(277,sort_by_size)
(278,program_name)
(279,xmalloc_set_program_name (program_name)
(280,break;)
(281,print_size)
(282,0)
(283,!display_file (argv[optind++])
(284,no_sort)
(285,optarg)
(286,case \'e\':)
(287,retval)
(288,retval)
(289,program_name = *argv)
(290,switch (c)
(291,EOF)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^