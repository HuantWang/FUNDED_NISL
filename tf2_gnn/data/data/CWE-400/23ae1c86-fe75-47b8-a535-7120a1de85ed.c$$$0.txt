-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize then use data */
        strcpy(data, "a string");
        printLine(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
27,30
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
62,63
-----nextToken-----
2,4,8,10,11,15,17,20,25,26,31,34,36,39,41,44,45,49,51,52,56,58,61,63
-----computeFrom-----
13,14
13,15
29,30
29,31
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    char * data;    data = NULL;    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    char * data;    data = NULL;    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }
GLOBAL_CONST_FALSE
GLOBAL_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "a string");
strcpy(data, "a string")
strcpy
strcpy
data
data
"a string"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(27,19,0)
(18,26,0)
(0,8,0)
(10,3,0)
(2,11,0)
(11,2,0)
(6,19,0)
(2,3,0)
(20,26,0)
(4,0,0)
(11,8,0)
(9,5,0)
(8,11,0)
(13,8,0)
(10,15,0)
(7,1,0)
(22,5,0)
(23,26,0)
(3,15,0)
(5,26,0)
(24,2,0)
(3,2,0)
(2,24,0)
(16,7,0)
(8,0,0)
(19,15,0)
(12,10,0)
(19,3,0)
(14,3,0)
(6,27,1)
(3,2,1)
(16,17,1)
(11,8,1)
(21,10,1)
(19,6,1)
(2,24,1)
(17,5,1)
(14,17,1)
(10,12,1)
(13,14,1)
(19,3,1)
(22,9,1)
(4,13,1)
(12,19,1)
(27,3,1)
(0,4,1)
(5,22,1)
(10,3,1)
(25,21,1)
(8,0,1)
(21,7,1)
(2,11,1)
(7,16,1)
(14,17,2)
(16,17,2)
(2,17,2)
(3,17,2)
(12,17,2)
(6,17,2)
(7,17,2)
(11,8,2)
(19,17,2)
(0,17,2)
(10,3,2)
(11,17,2)
(8,0,2)
(2,11,2)
(3,2,2)
(8,17,2)
(13,17,2)
(10,17,2)
(27,17,2)
(4,17,2)
(19,3,2)
(2,24,2)
-----------------------------------
(0,sizeof(char)
(1,)
(2,(char *)
(3,data = (char *)
(4,char)
(5,data = NULL)
(6,"a string")
(7,printLine("Benign, fixed string")
(8,100*sizeof(char)
(9,data)
(10,printLine(data)
(11,ALLOCA(100*sizeof(char)
(12,data)
(13,100)
(14,data)
(15,)
(16,"Benign, fixed string")
(17,GLOBAL_CONST_FALSE)
(18,data)
(19,strcpy(data, "a string")
(20,if(GLOBAL_CONST_TRUE)
(21,GLOBAL_CONST_TRUE)
(22,NULL)
(23,if(GLOBAL_CONST_FALSE)
(24,char *)
(25,RET)
(26,)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^