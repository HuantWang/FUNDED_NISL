-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_05_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(staticTrue)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
42,43
42,44
42,45
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
51,53
51,54
51,55
51,56
52,53
53,54
53,55
54,55
56,57
56,58
57,58
57,59
59,60
61,62
61,63
62,63
64,65
64,66
65,66
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
85,88
86,87
88,89
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,9,11,15,16,19,24,26,27,30,33,38,40,41,45,48,50,55,58,60,63,66,69,70,74,76,81,83,87,89,91,95,97,101,103,108,109
-----computeFrom-----
13,14
13,15
43,44
43,45
53,54
53,55
64,65
64,66
72,73
72,74
-----guardedBy-----
50,91
45,66
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_05_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_05_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_05_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(staticTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticTrue
staticTrue
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(49,22,0)
(43,14,0)
(21,10,0)
(27,16,0)
(21,3,0)
(8,51,0)
(0,15,0)
(36,28,0)
(7,15,0)
(38,14,0)
(2,18,0)
(45,28,0)
(48,15,0)
(10,45,0)
(12,25,0)
(3,21,0)
(23,22,0)
(4,31,0)
(25,12,0)
(17,51,0)
(29,4,0)
(14,3,0)
(21,40,0)
(19,32,0)
(40,21,0)
(41,35,0)
(39,48,0)
(37,18,0)
(42,16,0)
(25,11,0)
(30,18,0)
(47,49,0)
(50,35,0)
(44,3,0)
(51,33,0)
(13,20,0)
(45,10,0)
(50,15,0)
(6,20,0)
(49,3,0)
(14,22,0)
(35,50,0)
(9,50,0)
(15,18,0)
(16,3,0)
(3,22,0)
(20,24,0)
(32,22,0)
(48,51,0)
(51,48,0)
(34,12,0)
(45,15,0)
(28,45,0)
(46,45,0)
(10,21,0)
(32,3,0)
(9,1,1)
(15,7,1)
(43,25,1)
(38,43,1)
(29,50,1)
(12,34,1)
(47,32,1)
(32,3,1)
(35,41,1)
(42,27,1)
(41,9,1)
(45,28,1)
(48,39,1)
(27,3,1)
(46,44,1)
(45,15,1)
(5,49,1)
(21,10,1)
(3,21,1)
(10,45,1)
(4,29,1)
(19,14,1)
(50,35,1)
(5,4,1)
(49,3,1)
(14,3,1)
(34,16,1)
(16,3,1)
(7,0,1)
(39,8,1)
(28,36,1)
(26,15,1)
(1,51,1)
(36,46,1)
(14,38,1)
(5,1,1)
(48,15,1)
(16,42,1)
(32,19,1)
(49,47,1)
(51,48,1)
(44,50,1)
(43,16,1)
(50,15,1)
(8,17,1)
(17,26,1)
(1,26,1)
(25,12,1)
(21,40,1)
(51,26,2)
(49,50,2)
(16,50,2)
(21,50,2)
(21,40,2)
(50,1,2)
(14,3,2)
(29,50,2)
(3,21,2)
(38,50,2)
(12,16,2)
(32,3,2)
(3,50,2)
(19,50,2)
(10,45,2)
(25,16,2)
(45,28,2)
(4,50,2)
(44,50,2)
(45,50,2)
(48,15,2)
(51,48,2)
(46,50,2)
(17,26,2)
(14,50,2)
(49,3,2)
(45,15,2)
(28,50,2)
(34,16,2)
(42,50,2)
(48,26,2)
(16,3,2)
(39,26,2)
(21,10,2)
(43,50,2)
(50,35,2)
(27,50,2)
(10,50,2)
(32,50,2)
(35,1,2)
(8,26,2)
(47,50,2)
(25,12,2)
(9,1,2)
(36,50,2)
(41,1,2)
(50,15,2)
-----------------------------------
(0,data)
(1,staticTrue)
(2,data)
(3,myString = (wchar_t *)
(4,printLine("Input is less than the length of the source string")
(5,RET)
(6,myString)
(7,0)
(8,"%zu")
(9,data)
(10,malloc(data*sizeof(wchar_t)
(11,)
(12,-1)
(13,if (data > wcslen(HELLO_STRING)
(14,wcscpy(myString, HELLO_STRING)
(15,data = 0)
(16,myString == NULL)
(17,stdin)
(18,)
(19,myString)
(20,)
(21,(wchar_t *)
(22,)
(23,if (myString == NULL)
(24,)
(25,exit(-1)
(26,staticTrue)
(27,myString)
(28,sizeof(wchar_t)
(29,"Input is less than the length of the source string")
(30,if(staticTrue)
(31,)
(32,printWLine(myString)
(33,)
(34,1)
(35,wcslen(HELLO_STRING)
(36,wchar_t)
(37,if(staticTrue)
(38,HELLO_STRING)
(39,data)
(40,wchar_t *)
(41,HELLO_STRING)
(42,NULL)
(43,myString)
(44,myString)
(45,data*sizeof(wchar_t)
(46,data)
(47,myString)
(48,&data)
(49,free(myString)
(50,data > wcslen(HELLO_STRING)
(51,fscanf(stdin, "%zu", &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^