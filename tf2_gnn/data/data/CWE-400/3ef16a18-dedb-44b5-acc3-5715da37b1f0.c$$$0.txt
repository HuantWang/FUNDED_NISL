-----label-----
0
-----code-----
static void goodB2G1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(STATIC_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
28,31
29,30
31,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
59,60
59,61
59,62
59,63
59,64
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
93,96
94,95
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
112,113
113,114
114,115
114,116
115,116
-----nextToken-----
2,4,9,11,15,16,19,24,27,30,35,36,41,43,44,49,52,54,57,58,63,66,68,71,74,77,78,82,84,89,91,95,97,99,103,105,109,111,116,117
-----computeFrom-----
13,14
13,15
22,23
22,24
46,47
46,48
47,48
47,49
55,56
55,57
61,62
61,63
72,73
72,74
80,81
80,82
-----guardedBy-----
54,99
57,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G1()
goodB2G1
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
STATIC_CONST_FALSE
STATIC_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(21,36,0)
(23,55,0)
(14,22,0)
(4,0,0)
(14,9,0)
(34,3,0)
(29,9,0)
(18,19,0)
(44,45,0)
(3,34,0)
(14,3,0)
(16,23,0)
(48,0,0)
(14,51,0)
(24,0,0)
(52,36,0)
(43,36,0)
(47,3,0)
(1,51,0)
(3,33,0)
(8,19,0)
(41,4,0)
(25,48,0)
(51,14,0)
(45,0,0)
(22,14,0)
(15,10,0)
(40,5,0)
(54,45,0)
(46,32,0)
(4,45,0)
(46,40,0)
(48,45,0)
(22,54,0)
(54,27,0)
(2,37,0)
(13,14,0)
(38,0,0)
(19,17,0)
(40,46,0)
(20,37,0)
(40,9,0)
(12,15,0)
(40,3,0)
(39,12,0)
(11,48,0)
(28,40,0)
(5,40,0)
(37,45,0)
(7,32,0)
(32,3,0)
(27,54,0)
(6,24,0)
(24,45,0)
(15,12,0)
(45,54,0)
(50,32,0)
(42,5,0)
(54,22,0)
(32,46,0)
(32,9,0)
(56,9,0)
(9,36,0)
(31,49,0)
(26,31,0)
(46,40,1)
(53,31,1)
(29,56,1)
(32,50,1)
(54,22,1)
(54,27,1)
(30,35,1)
(44,46,1)
(5,42,1)
(4,45,1)
(4,41,1)
(12,39,1)
(11,25,1)
(48,45,1)
(34,47,1)
(40,3,1)
(30,3,1)
(1,13,1)
(32,3,1)
(7,40,1)
(41,24,1)
(24,45,1)
(6,48,1)
(48,11,1)
(28,30,1)
(50,7,1)
(26,30,1)
(14,51,1)
(20,2,1)
(22,14,1)
(25,37,1)
(45,54,1)
(14,9,1)
(39,37,1)
(23,16,1)
(53,4,1)
(24,6,1)
(14,3,1)
(46,32,1)
(37,45,1)
(53,23,1)
(16,46,1)
(15,12,1)
(31,26,1)
(37,20,1)
(35,9,1)
(42,28,1)
(25,15,1)
(13,44,1)
(40,5,1)
(32,9,1)
(40,9,1)
(51,1,1)
(2,45,1)
(3,34,1)
(47,35,1)
(9,29,1)
(7,40,2)
(54,27,2)
(54,46,2)
(32,3,2)
(11,46,2)
(44,46,2)
(42,30,2)
(15,37,2)
(14,51,2)
(24,45,2)
(54,22,2)
(15,12,2)
(39,37,2)
(37,46,2)
(45,54,2)
(26,30,2)
(46,32,2)
(34,35,2)
(45,46,2)
(3,35,2)
(20,46,2)
(16,46,2)
(22,46,2)
(40,3,2)
(2,46,2)
(4,45,2)
(14,3,2)
(40,9,2)
(6,46,2)
(13,46,2)
(48,46,2)
(24,46,2)
(28,30,2)
(31,30,2)
(47,35,2)
(46,30,2)
(48,45,2)
(25,46,2)
(50,40,2)
(1,46,2)
(37,45,2)
(4,46,2)
(14,46,2)
(12,37,2)
(3,34,2)
(14,9,2)
(40,5,2)
(5,30,2)
(22,14,2)
(40,30,2)
(51,46,2)
(32,9,2)
(46,40,2)
(32,40,2)
(41,46,2)
(23,46,2)
-----------------------------------
(0,)
(1,char)
(2,myString)
(3,data = rand()
(4,free(myString)
(5,strlen(HELLO_STRING)
(6,myString)
(7,data)
(8,myString)
(9,data = 0)
(10,)
(11,HELLO_STRING)
(12,-1)
(13,data)
(14,data*sizeof(char)
(15,exit(-1)
(16,"Input is less than the length of the source string or too large")
(17,)
(18,if (data > strlen(HELLO_STRING)
(19,)
(20,NULL)
(21,data)
(22,malloc(data*sizeof(char)
(23,printLine("Input is less than the length of the source string or too large")
(24,printLine(myString)
(25,myString)
(26,"Benign, fixed string")
(27,char *)
(28,data)
(29,0)
(30,STATIC_CONST_FALSE)
(31,printLine("Benign, fixed string")
(32,data < 100)
(33,)
(34,rand()
(35,STATIC_CONST_TRUE)
(36,)
(37,myString == NULL)
(38,if (myString == NULL)
(39,1)
(40,data > strlen(HELLO_STRING)
(41,myString)
(42,HELLO_STRING)
(43,if(STATIC_CONST_TRUE)
(44,myString)
(45,myString = (char *)
(46,data > strlen(HELLO_STRING)
(47,data)
(48,strcpy(myString, HELLO_STRING)
(49,)
(50,100)
(51,sizeof(char)
(52,if(STATIC_CONST_FALSE)
(53,RET)
(54,(char *)
(55,)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^