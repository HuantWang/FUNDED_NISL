-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_08_bad()
{
    int * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
70,71
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,71,73
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_08_bad(){    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_08_bad()
CWE401_Memory_Leak__int_calloc_08_bad
{    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(32,28,0)
(12,25,0)
(15,19,0)
(1,34,0)
(21,22,0)
(6,28,0)
(13,25,0)
(33,22,0)
(35,2,0)
(17,28,0)
(31,11,0)
(9,7,0)
(16,28,0)
(22,21,0)
(0,22,0)
(20,6,0)
(7,6,0)
(7,32,0)
(16,7,0)
(22,33,0)
(6,33,0)
(19,25,0)
(4,7,0)
(7,16,0)
(14,31,0)
(34,32,0)
(2,6,0)
(26,19,0)
(34,6,0)
(18,2,0)
(33,6,0)
(3,21,0)
(36,33,0)
(33,36,0)
(30,34,0)
(11,31,0)
(27,32,0)
(11,29,0)
(10,25,0)
(21,3,1)
(9,4,1)
(32,27,1)
(7,9,1)
(8,19,1)
(34,6,1)
(6,33,1)
(23,24,1)
(30,2,1)
(35,18,1)
(19,15,1)
(0,20,1)
(24,16,1)
(2,6,1)
(27,34,1)
(11,31,1)
(30,11,1)
(15,26,1)
(22,21,1)
(7,32,1)
(7,6,1)
(18,6,1)
(2,35,1)
(16,7,1)
(33,36,1)
(33,22,1)
(4,32,1)
(31,14,1)
(3,0,1)
(20,8,1)
(34,1,1)
(1,30,1)
(14,2,1)
(24,8,1)
(22,21,2)
(33,8,2)
(7,32,2)
(11,31,2)
(33,22,2)
(16,8,2)
(9,8,2)
(18,8,2)
(35,8,2)
(20,8,2)
(22,8,2)
(1,8,2)
(34,6,2)
(14,2,2)
(3,8,2)
(27,8,2)
(33,36,2)
(30,8,2)
(6,33,2)
(7,8,2)
(16,7,2)
(34,8,2)
(31,2,2)
(11,2,2)
(32,8,2)
(2,6,2)
(2,8,2)
(7,6,2)
(21,8,2)
(6,8,2)
(4,8,2)
(0,8,2)
-----------------------------------
(0,100)
(1,0)
(2,data == NULL)
(3,int)
(4,data)
(5, sizeof(int)
(6,data = (int *)
(7,data[0])
(8,staticReturnsTrue()
(9,0)
(10,data)
(11,exit(-1)
(12,if(staticReturnsTrue()
(13,if(staticReturnsTrue()
(14,1)
(15,NULL)
(16,printIntLine(data[0])
(17,if (data == NULL)
(18,data)
(19,data = NULL)
(20,data)
(21,sizeof(int)
(22,calloc(100, sizeof(int)
(23,RET)
(24,staticReturnsTrue()
(25,)
(26,data)
(27,5)
(28,)
(29,)
(30,data)
(31,-1)
(32,data[0] = 5)
(33,(int *)
(34,data[0])
(35,NULL)
(36,int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^