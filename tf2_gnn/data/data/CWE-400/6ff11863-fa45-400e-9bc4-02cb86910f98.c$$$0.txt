-----label-----
1
-----code-----
static int agent_call(struct ast_channel *ast, const char *dest, int timeout)
{
	struct agent_pvt *p = ast_channel_tech_pvt(ast);
	int res = -1;
	int newstate=0;
	struct ast_channel *chan;

	ast_mutex_lock(&p->lock);
	p->acknowledged = 0;

	if (p->pending) {
		ast_log(LOG_DEBUG, "Pretending to dial on pending agent\n");
		ast_mutex_unlock(&p->lock);
		ast_setstate(ast, AST_STATE_DIALING);
		return 0;
	}

	if (!p->chan) {
		ast_log(LOG_DEBUG, "Agent disconnected while we were connecting the call\n");
		ast_mutex_unlock(&p->lock);
		return res;
	}
	ast_verb(3, "agent_call, call to agent '%s' call on '%s'\n", p->agent, ast_channel_name(p->chan));
	ast_debug(3, "Playing beep, lang '%s'\n", ast_channel_language(p->chan));

	chan = p->chan;
	ast_mutex_unlock(&p->lock);

	res = ast_streamfile(chan, beep, ast_channel_language(chan));
	ast_debug(3, "Played beep, result '%d'\n", res);
	if (!res) {
		res = ast_waitstream(chan, "");
		ast_debug(3, "Waited for stream, result '%d'\n", res);
	}

	ast_mutex_lock(&p->lock);
	if (!p->chan) {
		/* chan went away while we were streaming, this shouldn't be possible */
		res = -1;
	}

	if (!res) {
		struct ast_format tmpfmt;
		res = ast_set_read_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));
		ast_debug(3, "Set read format, result '%d'\n", res);
		if (res)
			ast_log(LOG_WARNING, "Unable to set read format to %s\n", ast_getformatname(&tmpfmt));
	} else {
		/* Agent hung-up */
		p->chan = NULL;
		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "Agent/%s", p->agent);
	}

	if (!res) {
		struct ast_format tmpfmt;
		res = ast_set_write_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));
		ast_debug(3, "Set write format, result '%d'\n", res);
		if (res)
			ast_log(LOG_WARNING, "Unable to set write format to %s\n", ast_getformatname(&tmpfmt));
	}
	if(!res) {
		/* Call is immediately up, or might need ack */
		if (p->ackcall) {
			newstate = AST_STATE_RINGING;
		} else {
			newstate = AST_STATE_UP;
			if (recordagentcalls)
				agent_start_monitoring(ast, 0);
			p->acknowledged = 1;
		}
		res = 0;
	}
	CLEANUP(ast, p);
	ast_mutex_unlock(&p->lock);
	if (newstate)
		ast_setstate(ast, newstate);
	return res;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
20,30
20,31
20,32
20,33
20,34
20,35
20,36
20,37
20,38
20,39
20,40
20,41
20,42
20,43
20,44
21,22
22,23
22,24
23,24
25,26
25,27
25,28
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
37,38
37,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
56,57
57,58
57,59
58,59
60,61
61,62
61,63
62,63
65,66
66,67
66,68
67,68
67,69
68,69
72,73
72,74
73,74
73,75
74,75
77,78
77,79
77,80
77,81
78,79
79,80
79,81
79,82
80,81
82,83
85,86
86,87
86,88
87,88
89,90
90,91
90,92
91,92
94,95
95,96
95,97
95,98
96,97
98,99
100,101
102,103
104,105
104,106
105,106
106,107
106,108
107,108
110,111
110,112
110,113
111,112
112,113
112,114
112,115
113,114
115,116
118,119
119,120
119,121
120,121
122,123
123,124
123,125
124,125
127,128
128,129
130,131
131,132
131,133
131,134
131,135
131,136
132,133
136,137
136,138
137,138
140,141
140,142
141,142
143,144
143,145
144,145
147,148
148,149
148,150
148,151
148,152
149,150
153,154
153,155
154,155
156,157
156,158
157,158
160,161
161,162
161,163
162,163
164,165
164,166
165,166
168,169
169,170
169,171
170,171
172,173
173,174
173,175
174,175
177,178
178,179
178,180
179,180
181,182
181,183
181,184
181,185
182,183
184,185
186,187
188,189
188,190
189,190
191,192
193,194
194,195
194,196
194,197
194,198
195,196
199,200
201,202
201,203
202,203
203,204
205,206
205,207
206,207
207,208
207,209
208,209
210,211
210,212
210,213
211,212
213,214
216,217
217,218
217,219
217,220
217,221
218,219
222,223
224,225
225,226
225,227
226,227
228,229
229,230
229,231
230,231
233,234
233,235
234,235
235,236
235,237
236,237
239,240
240,241
241,242
241,243
242,243
244,245
246,247
246,248
246,249
247,248
248,249
250,251
250,252
250,253
250,254
251,252
252,253
252,254
253,254
255,256
257,258
258,259
258,260
259,260
261,262
261,263
261,264
262,263
264,265
264,266
265,266
268,269
268,270
269,270
271,272
271,273
272,273
275,276
276,277
276,278
276,279
276,280
277,278
281,282
283,284
283,285
284,285
286,287
287,288
287,289
287,290
287,291
288,289
290,291
293,294
293,295
294,295
296,297
297,298
299,300
299,301
300,301
301,302
301,303
302,303
302,304
303,304
306,307
308,309
309,310
309,311
309,312
309,313
309,314
310,311
312,313
314,315
317,318
317,319
318,319
321,322
321,323
322,323
323,324
325,326
325,327
325,328
325,329
326,327
327,328
327,329
328,329
330,331
332,333
333,334
333,335
334,335
336,337
336,338
336,339
337,338
339,340
339,341
340,341
343,344
343,345
344,345
346,347
346,348
347,348
350,351
351,352
351,353
351,354
351,355
352,353
356,357
358,359
358,360
359,360
361,362
362,363
362,364
362,365
362,366
363,364
365,366
368,369
368,370
369,370
371,372
372,373
374,375
374,376
375,376
376,377
378,379
378,380
379,380
379,381
379,382
380,381
380,382
381,382
384,385
385,386
386,387
386,388
387,388
389,390
391,392
391,393
391,394
392,393
393,394
393,395
394,395
396,397
398,399
398,400
399,400
401,402
402,403
402,404
402,405
403,404
405,406
408,409
409,410
409,411
410,411
410,412
411,412
415,416
416,417
416,418
417,418
420,421
421,422
421,423
421,424
422,423
424,425
426,427
428,429
429,430
429,431
430,431
432,433
433,434
433,435
434,435
437,438
437,439
438,439
440,441
441,442
441,443
441,444
442,443
444,445
446,447
448,449
449,450
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,24,26,27,31,33,36,38,41,44,46,48,52,54,55,59,63,64,69,70,71,75,76,81,83,84,88,92,93,97,99,101,103,108,109,114,116,117,121,125,126,129,133,134,135,138,139,142,145,146,150,151,152,155,158,159,163,166,167,171,175,176,180,183,185,187,190,192,196,197,198,200,204,209,212,214,215,219,220,221,223,227,231,232,237,238,243,245,249,254,256,260,263,266,267,270,273,274,278,279,280,282,285,289,291,292,295,298,304,305,307,311,313,315,316,319,320,324,329,331,335,338,341,342,345,348,349,353,354,355,357,360,364,366,367,370,373,377,382,383,388,390,395,397,400,404,406,407,412,413,414,418,419,423,425,427,431,435,436,439,443,445,447,450
-----computeFrom-----
66,67
66,68
161,162
161,163
178,179
178,180
207,208
207,209
241,242
241,243
258,259
258,260
301,302
301,303
333,334
333,335
386,387
386,388
393,394
393,395
409,410
409,411
416,417
416,418
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int agent_call(struct ast_channel *ast, const char *dest, int timeout){	struct agent_pvt *p = ast_channel_tech_pvt(ast);	int res = -1;	int newstate=0;	struct ast_channel *chan;	ast_mutex_lock(&p->lock);	p->acknowledged = 0;	if (p->pending) {		ast_log(LOG_DEBUG, "Pretending to dial on pending agent\n");		ast_mutex_unlock(&p->lock);		ast_setstate(ast, AST_STATE_DIALING);		return 0;	}	if (!p->chan) {		ast_log(LOG_DEBUG, "Agent disconnected while we were connecting the call\n");		ast_mutex_unlock(&p->lock);		return res;	}	ast_verb(3, "agent_call, call to agent '%s' call on '%s'\n", p->agent, ast_channel_name(p->chan));	ast_debug(3, "Playing beep, lang '%s'\n", ast_channel_language(p->chan));	chan = p->chan;	ast_mutex_unlock(&p->lock);	res = ast_streamfile(chan, beep, ast_channel_language(chan));	ast_debug(3, "Played beep, result '%d'\n", res);	if (!res) {		res = ast_waitstream(chan, "");		ast_debug(3, "Waited for stream, result '%d'\n", res);	}	ast_mutex_lock(&p->lock);	if (!p->chan) {		/* chan went away while we were streaming, this shouldn't be possible */		res = -1;	}	if (!res) {		struct ast_format tmpfmt;		res = ast_set_read_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));		ast_debug(3, "Set read format, result '%d'\n", res);		if (res)			ast_log(LOG_WARNING, "Unable to set read format to %s\n", ast_getformatname(&tmpfmt));	} else {		/* Agent hung-up */		p->chan = NULL;		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "Agent/%s", p->agent);	}	if (!res) {		struct ast_format tmpfmt;		res = ast_set_write_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));		ast_debug(3, "Set write format, result '%d'\n", res);		if (res)			ast_log(LOG_WARNING, "Unable to set write format to %s\n", ast_getformatname(&tmpfmt));	}	if(!res) {		/* Call is immediately up, or might need ack */		if (p->ackcall) {			newstate = AST_STATE_RINGING;		} else {			newstate = AST_STATE_UP;			if (recordagentcalls)				agent_start_monitoring(ast, 0);			p->acknowledged = 1;		}		res = 0;	}	CLEANUP(ast, p);	ast_mutex_unlock(&p->lock);	if (newstate)		ast_setstate(ast, newstate);	return res;}
static int
agent_call(struct ast_channel *ast, const char *dest, int timeout)
agent_call
struct ast_channel *ast
struct ast_channel
ast_channel
*ast
*
ast
const char *dest
const char
*dest
*
dest
int timeout
int
timeout
timeout
{	struct agent_pvt *p = ast_channel_tech_pvt(ast);	int res = -1;	int newstate=0;	struct ast_channel *chan;	ast_mutex_lock(&p->lock);	p->acknowledged = 0;	if (p->pending) {		ast_log(LOG_DEBUG, "Pretending to dial on pending agent\n");		ast_mutex_unlock(&p->lock);		ast_setstate(ast, AST_STATE_DIALING);		return 0;	}	if (!p->chan) {		ast_log(LOG_DEBUG, "Agent disconnected while we were connecting the call\n");		ast_mutex_unlock(&p->lock);		return res;	}	ast_verb(3, "agent_call, call to agent '%s' call on '%s'\n", p->agent, ast_channel_name(p->chan));	ast_debug(3, "Playing beep, lang '%s'\n", ast_channel_language(p->chan));	chan = p->chan;	ast_mutex_unlock(&p->lock);	res = ast_streamfile(chan, beep, ast_channel_language(chan));	ast_debug(3, "Played beep, result '%d'\n", res);	if (!res) {		res = ast_waitstream(chan, "");		ast_debug(3, "Waited for stream, result '%d'\n", res);	}	ast_mutex_lock(&p->lock);	if (!p->chan) {		/* chan went away while we were streaming, this shouldn't be possible */		res = -1;	}	if (!res) {		struct ast_format tmpfmt;		res = ast_set_read_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));		ast_debug(3, "Set read format, result '%d'\n", res);		if (res)			ast_log(LOG_WARNING, "Unable to set read format to %s\n", ast_getformatname(&tmpfmt));	} else {		/* Agent hung-up */		p->chan = NULL;		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "Agent/%s", p->agent);	}	if (!res) {		struct ast_format tmpfmt;		res = ast_set_write_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));		ast_debug(3, "Set write format, result '%d'\n", res);		if (res)			ast_log(LOG_WARNING, "Unable to set write format to %s\n", ast_getformatname(&tmpfmt));	}	if(!res) {		/* Call is immediately up, or might need ack */		if (p->ackcall) {			newstate = AST_STATE_RINGING;		} else {			newstate = AST_STATE_UP;			if (recordagentcalls)				agent_start_monitoring(ast, 0);			p->acknowledged = 1;		}		res = 0;	}	CLEANUP(ast, p);	ast_mutex_unlock(&p->lock);	if (newstate)		ast_setstate(ast, newstate);	return res;}
struct agent_pvt *p = ast_channel_tech_pvt(ast);
struct agent_pvt *p = ast_channel_tech_pvt(ast);
struct agent_pvt
agent_pvt
*p = ast_channel_tech_pvt(ast)
*
p
= ast_channel_tech_pvt(ast)
ast_channel_tech_pvt(ast)
ast_channel_tech_pvt
ast_channel_tech_pvt
ast
ast
int res = -1;
int res = -1;
int
res = -1
res
= -1
-1
1
int newstate=0;
int newstate=0;
int
newstate=0
newstate
=0
0
struct ast_channel *chan;
struct ast_channel *chan;
struct ast_channel
ast_channel
*chan
*
chan
ast_mutex_lock(&p->lock);
ast_mutex_lock(&p->lock)
ast_mutex_lock
ast_mutex_lock
&p->lock
p->lock
p
p
lock
p->acknowledged = 0;
p->acknowledged = 0
p->acknowledged
p
p
acknowledged
0
if (p->pending) {		ast_log(LOG_DEBUG, "Pretending to dial on pending agent\n");		ast_mutex_unlock(&p->lock);		ast_setstate(ast, AST_STATE_DIALING);		return 0;	}
p->pending
p
p
pending
{		ast_log(LOG_DEBUG, "Pretending to dial on pending agent\n");		ast_mutex_unlock(&p->lock);		ast_setstate(ast, AST_STATE_DIALING);		return 0;	}
ast_log(LOG_DEBUG, "Pretending to dial on pending agent\n");
ast_log(LOG_DEBUG, "Pretending to dial on pending agent\n")
ast_log
ast_log
LOG_DEBUG
LOG_DEBUG
"Pretending to dial on pending agent\n"
ast_mutex_unlock(&p->lock);
ast_mutex_unlock(&p->lock)
ast_mutex_unlock
ast_mutex_unlock
&p->lock
p->lock
p
p
lock
ast_setstate(ast, AST_STATE_DIALING);
ast_setstate(ast, AST_STATE_DIALING)
ast_setstate
ast_setstate
ast
ast
AST_STATE_DIALING
AST_STATE_DIALING
return 0;
0
if (!p->chan) {		ast_log(LOG_DEBUG, "Agent disconnected while we were connecting the call\n");		ast_mutex_unlock(&p->lock);		return res;	}
!p->chan
p->chan
p
p
chan
{		ast_log(LOG_DEBUG, "Agent disconnected while we were connecting the call\n");		ast_mutex_unlock(&p->lock);		return res;	}
ast_log(LOG_DEBUG, "Agent disconnected while we were connecting the call\n");
ast_log(LOG_DEBUG, "Agent disconnected while we were connecting the call\n")
ast_log
ast_log
LOG_DEBUG
LOG_DEBUG
"Agent disconnected while we were connecting the call\n"
ast_mutex_unlock(&p->lock);
ast_mutex_unlock(&p->lock)
ast_mutex_unlock
ast_mutex_unlock
&p->lock
p->lock
p
p
lock
return res;
res
res
ast_verb(3, "agent_call, call to agent '%s' call on '%s'\n", p->agent, ast_channel_name(p->chan));
ast_verb(3, "agent_call, call to agent '%s' call on '%s'\n", p->agent, ast_channel_name(p->chan))
ast_verb
ast_verb
3
"agent_call, call to agent '%s' call on '%s'\n"
p->agent
p
p
agent
ast_channel_name(p->chan)
ast_channel_name
ast_channel_name
p->chan
p
p
chan
ast_debug(3, "Playing beep, lang '%s'\n", ast_channel_language(p->chan));
ast_debug(3, "Playing beep, lang '%s'\n", ast_channel_language(p->chan))
ast_debug
ast_debug
3
"Playing beep, lang '%s'\n"
ast_channel_language(p->chan)
ast_channel_language
ast_channel_language
p->chan
p
p
chan
chan = p->chan;
chan = p->chan
chan
chan
p->chan
p
p
chan
ast_mutex_unlock(&p->lock);
ast_mutex_unlock(&p->lock)
ast_mutex_unlock
ast_mutex_unlock
&p->lock
p->lock
p
p
lock
res = ast_streamfile(chan, beep, ast_channel_language(chan));
res = ast_streamfile(chan, beep, ast_channel_language(chan))
res
res
ast_streamfile(chan, beep, ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
beep
beep
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_debug(3, "Played beep, result '%d'\n", res);
ast_debug(3, "Played beep, result '%d'\n", res)
ast_debug
ast_debug
3
"Played beep, result '%d'\n"
res
res
if (!res) {		res = ast_waitstream(chan, "");		ast_debug(3, "Waited for stream, result '%d'\n", res);	}
!res
res
res
{		res = ast_waitstream(chan, "");		ast_debug(3, "Waited for stream, result '%d'\n", res);	}
res = ast_waitstream(chan, "");
res = ast_waitstream(chan, "")
res
res
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
ast_debug(3, "Waited for stream, result '%d'\n", res);
ast_debug(3, "Waited for stream, result '%d'\n", res)
ast_debug
ast_debug
3
"Waited for stream, result '%d'\n"
res
res
ast_mutex_lock(&p->lock);
ast_mutex_lock(&p->lock)
ast_mutex_lock
ast_mutex_lock
&p->lock
p->lock
p
p
lock
if (!p->chan) {		/* chan went away while we were streaming, this shouldn't be possible */		res = -1;	}
!p->chan
p->chan
p
p
chan
{		/* chan went away while we were streaming, this shouldn't be possible */		res = -1;	}
res = -1;
res = -1
res
res
-1
1
if (!res) {		struct ast_format tmpfmt;		res = ast_set_read_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));		ast_debug(3, "Set read format, result '%d'\n", res);		if (res)			ast_log(LOG_WARNING, "Unable to set read format to %s\n", ast_getformatname(&tmpfmt));	} else {		/* Agent hung-up */		p->chan = NULL;		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "Agent/%s", p->agent);	}
!res
res
res
{		struct ast_format tmpfmt;		res = ast_set_read_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));		ast_debug(3, "Set read format, result '%d'\n", res);		if (res)			ast_log(LOG_WARNING, "Unable to set read format to %s\n", ast_getformatname(&tmpfmt));	}
struct ast_format tmpfmt;
struct ast_format tmpfmt;
struct ast_format
ast_format
tmpfmt
tmpfmt
res = ast_set_read_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));
res = ast_set_read_format_from_cap(p->chan, ast_channel_nativeformats(p->chan))
res
res
ast_set_read_format_from_cap(p->chan, ast_channel_nativeformats(p->chan))
ast_set_read_format_from_cap
ast_set_read_format_from_cap
p->chan
p
p
chan
ast_channel_nativeformats(p->chan)
ast_channel_nativeformats
ast_channel_nativeformats
p->chan
p
p
chan
ast_debug(3, "Set read format, result '%d'\n", res);
ast_debug(3, "Set read format, result '%d'\n", res)
ast_debug
ast_debug
3
"Set read format, result '%d'\n"
res
res
if (res)			ast_log(LOG_WARNING, "Unable to set read format to %s\n", ast_getformatname(&tmpfmt));
res
res
ast_log(LOG_WARNING, "Unable to set read format to %s\n", ast_getformatname(&tmpfmt));
ast_log(LOG_WARNING, "Unable to set read format to %s\n", ast_getformatname(&tmpfmt))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to set read format to %s\n"
ast_getformatname(&tmpfmt)
ast_getformatname
ast_getformatname
&tmpfmt
tmpfmt
tmpfmt
{		/* Agent hung-up */		p->chan = NULL;		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "Agent/%s", p->agent);	}
p->chan = NULL;
p->chan = NULL
p->chan
p
p
chan
NULL
NULL
ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "Agent/%s", p->agent);
ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "Agent/%s", p->agent)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_UNAVAILABLE
AST_DEVICE_UNAVAILABLE
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
"Agent/%s"
p->agent
p
p
agent
if (!res) {		struct ast_format tmpfmt;		res = ast_set_write_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));		ast_debug(3, "Set write format, result '%d'\n", res);		if (res)			ast_log(LOG_WARNING, "Unable to set write format to %s\n", ast_getformatname(&tmpfmt));	}
!res
res
res
{		struct ast_format tmpfmt;		res = ast_set_write_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));		ast_debug(3, "Set write format, result '%d'\n", res);		if (res)			ast_log(LOG_WARNING, "Unable to set write format to %s\n", ast_getformatname(&tmpfmt));	}
struct ast_format tmpfmt;
struct ast_format tmpfmt;
struct ast_format
ast_format
tmpfmt
tmpfmt
res = ast_set_write_format_from_cap(p->chan, ast_channel_nativeformats(p->chan));
res = ast_set_write_format_from_cap(p->chan, ast_channel_nativeformats(p->chan))
res
res
ast_set_write_format_from_cap(p->chan, ast_channel_nativeformats(p->chan))
ast_set_write_format_from_cap
ast_set_write_format_from_cap
p->chan
p
p
chan
ast_channel_nativeformats(p->chan)
ast_channel_nativeformats
ast_channel_nativeformats
p->chan
p
p
chan
ast_debug(3, "Set write format, result '%d'\n", res);
ast_debug(3, "Set write format, result '%d'\n", res)
ast_debug
ast_debug
3
"Set write format, result '%d'\n"
res
res
if (res)			ast_log(LOG_WARNING, "Unable to set write format to %s\n", ast_getformatname(&tmpfmt));
res
res
ast_log(LOG_WARNING, "Unable to set write format to %s\n", ast_getformatname(&tmpfmt));
ast_log(LOG_WARNING, "Unable to set write format to %s\n", ast_getformatname(&tmpfmt))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to set write format to %s\n"
ast_getformatname(&tmpfmt)
ast_getformatname
ast_getformatname
&tmpfmt
tmpfmt
tmpfmt
if(!res) {		/* Call is immediately up, or might need ack */		if (p->ackcall) {			newstate = AST_STATE_RINGING;		} else {			newstate = AST_STATE_UP;			if (recordagentcalls)				agent_start_monitoring(ast, 0);			p->acknowledged = 1;		}		res = 0;	}
!res
res
res
{		/* Call is immediately up, or might need ack */		if (p->ackcall) {			newstate = AST_STATE_RINGING;		} else {			newstate = AST_STATE_UP;			if (recordagentcalls)				agent_start_monitoring(ast, 0);			p->acknowledged = 1;		}		res = 0;	}
if (p->ackcall) {			newstate = AST_STATE_RINGING;		} else {			newstate = AST_STATE_UP;			if (recordagentcalls)				agent_start_monitoring(ast, 0);			p->acknowledged = 1;		}
p->ackcall
p
p
ackcall
{			newstate = AST_STATE_RINGING;		}
newstate = AST_STATE_RINGING;
newstate = AST_STATE_RINGING
newstate
newstate
AST_STATE_RINGING
AST_STATE_RINGING
{			newstate = AST_STATE_UP;			if (recordagentcalls)				agent_start_monitoring(ast, 0);			p->acknowledged = 1;		}
newstate = AST_STATE_UP;
newstate = AST_STATE_UP
newstate
newstate
AST_STATE_UP
AST_STATE_UP
if (recordagentcalls)				agent_start_monitoring(ast, 0);
recordagentcalls
recordagentcalls
agent_start_monitoring(ast, 0);
agent_start_monitoring(ast, 0)
agent_start_monitoring
agent_start_monitoring
ast
ast
0
p->acknowledged = 1;
p->acknowledged = 1
p->acknowledged
p
p
acknowledged
1
res = 0;
res = 0
res
res
0
CLEANUP(ast, p);
CLEANUP(ast, p)
CLEANUP
CLEANUP
ast
ast
p
p
ast_mutex_unlock(&p->lock);
ast_mutex_unlock(&p->lock)
ast_mutex_unlock
ast_mutex_unlock
&p->lock
p->lock
p
p
lock
if (newstate)		ast_setstate(ast, newstate);
newstate
newstate
ast_setstate(ast, newstate);
ast_setstate(ast, newstate)
ast_setstate
ast_setstate
ast
ast
newstate
newstate
return res;
res
res
-----joern-----
(214,110,0)
(64,139,0)
(78,126,0)
(41,59,0)
(43,157,0)
(38,18,0)
(192,14,0)
(202,35,0)
(234,200,0)
(129,73,0)
(3,178,0)
(26,23,0)
(93,112,0)
(8,189,0)
(64,109,0)
(94,148,0)
(44,156,0)
(5,26,0)
(71,153,0)
(110,214,0)
(47,186,0)
(94,24,0)
(148,94,0)
(206,78,0)
(104,184,0)
(27,41,0)
(108,126,0)
(181,166,0)
(10,27,0)
(140,139,0)
(172,140,0)
(182,157,0)
(182,106,0)
(74,183,0)
(134,172,0)
(232,178,0)
(38,233,0)
(51,113,0)
(80,184,0)
(55,53,0)
(90,195,0)
(73,9,0)
(49,9,0)
(53,106,0)
(75,47,0)
(82,41,0)
(156,140,0)
(99,191,0)
(169,217,0)
(98,233,0)
(87,169,0)
(213,41,0)
(37,122,0)
(125,108,0)
(158,143,0)
(118,213,0)
(46,184,0)
(66,184,0)
(199,184,0)
(173,150,0)
(30,61,0)
(92,96,0)
(229,60,0)
(154,238,0)
(4,208,0)
(157,208,0)
(23,26,0)
(104,68,0)
(224,14,0)
(31,112,0)
(56,42,0)
(172,41,0)
(217,169,0)
(139,140,0)
(81,68,0)
(146,44,0)
(54,32,0)
(121,168,0)
(2,184,0)
(112,18,0)
(169,41,0)
(182,109,0)
(26,122,0)
(111,0,0)
(236,86,0)
(97,182,0)
(203,184,0)
(133,106,0)
(22,73,0)
(14,42,0)
(105,25,0)
(47,139,0)
(122,12,0)
(152,30,0)
(147,155,0)
(208,157,0)
(45,169,0)
(151,41,0)
(21,41,0)
(210,184,0)
(157,6,0)
(34,190,0)
(228,184,0)
(79,109,0)
(106,63,0)
(133,122,0)
(198,189,0)
(78,41,0)
(126,78,0)
(220,109,0)
(185,44,0)
(143,141,0)
(123,151,0)
(225,35,0)
(77,32,0)
(177,71,0)
(154,19,0)
(82,147,0)
(203,41,0)
(178,41,0)
(88,184,0)
(197,195,0)
(139,186,0)
(168,41,0)
(76,38,0)
(72,47,0)
(115,23,0)
(137,148,0)
(17,110,0)
(145,41,0)
(222,170,0)
(129,41,0)
(116,78,0)
(133,14,0)
(81,41,0)
(194,106,0)
(155,147,0)
(36,25,0)
(237,143,0)
(211,12,0)
(48,2,0)
(193,0,0)
(5,215,0)
(29,108,0)
(50,19,0)
(183,12,0)
(143,30,0)
(120,184,0)
(150,101,0)
(62,208,0)
(167,133,0)
(133,109,0)
(13,203,0)
(140,172,0)
(149,199,0)
(204,94,0)
(217,69,0)
(124,113,0)
(160,184,0)
(59,101,0)
(39,27,0)
(125,126,0)
(140,156,0)
(58,82,0)
(35,225,0)
(127,46,0)
(68,81,0)
(221,30,0)
(183,122,0)
(223,19,0)
(44,41,0)
(35,202,0)
(60,142,0)
(143,101,0)
(190,122,0)
(84,195,0)
(215,200,0)
(141,184,0)
(67,183,0)
(147,82,0)
(215,41,0)
(207,38,0)
(190,109,0)
(212,184,0)
(205,178,0)
(114,145,0)
(164,94,0)
(1,113,0)
(233,170,0)
(89,86,0)
(175,141,0)
(19,154,0)
(162,215,0)
(91,184,0)
(168,127,0)
(160,214,0)
(189,96,0)
(131,23,0)
(163,202,0)
(190,106,0)
(179,213,0)
(133,184,0)
(170,233,0)
(96,189,0)
(213,200,0)
(200,24,0)
(11,2,0)
(188,186,0)
(64,106,0)
(109,184,0)
(181,151,0)
(108,109,0)
(151,181,0)
(208,126,0)
(68,104,0)
(233,184,0)
(15,12,0)
(219,126,0)
(226,81,0)
(216,47,0)
(117,139,0)
(69,217,0)
(133,157,0)
(26,5,0)
(201,184,0)
(133,139,0)
(189,41,0)
(155,142,0)
(64,157,0)
(203,101,0)
(132,145,0)
(70,238,0)
(165,160,0)
(108,125,0)
(109,108,0)
(196,202,0)
(195,157,0)
(191,32,0)
(23,41,0)
(52,148,0)
(195,6,0)
(83,141,0)
(231,81,0)
(161,71,0)
(25,142,0)
(166,184,0)
(148,41,0)
(106,53,0)
(76,191,0)
(127,168,0)
(187,96,0)
(209,82,0)
(96,184,0)
(176,2,0)
(71,41,0)
(23,200,0)
(0,9,0)
(59,41,0)
(135,129,0)
(32,41,0)
(191,142,0)
(166,181,0)
(27,107,0)
(2,109,0)
(16,150,0)
(20,108,0)
(126,184,0)
(144,79,0)
(57,184,0)
(85,184,0)
(107,212,0)
(46,127,0)
(113,1,0)
(60,101,0)
(214,160,0)
(190,157,0)
(153,71,0)
(110,41,0)
(171,183,0)
(128,184,0)
(102,172,0)
(107,27,0)
(178,205,0)
(238,154,0)
(215,5,0)
(69,18,0)
(100,94,0)
(76,133,0)
(136,129,0)
(32,199,0)
(230,215,0)
(190,139,0)
(122,26,0)
(180,125,0)
(218,186,0)
(174,225,0)
(156,44,0)
(96,153,0)
(235,203,0)
(212,107,0)
(143,0,0)
(86,41,0)
(7,64,0)
(95,168,0)
(33,184,0)
(153,96,0)
(113,41,0)
(103,151,0)
(40,60,0)
(227,110,0)
(41,184,0)
(28,59,0)
(130,160,0)
(190,34,1)
(41,59,1)
(231,226,1)
(190,139,1)
(172,134,1)
(221,152,1)
(10,195,1)
(64,157,1)
(73,22,1)
(190,106,1)
(62,43,1)
(64,109,1)
(17,227,1)
(53,55,1)
(69,217,1)
(135,65,1)
(64,106,1)
(157,208,1)
(202,35,1)
(207,69,1)
(205,178,1)
(96,189,1)
(51,212,1)
(156,44,1)
(64,139,1)
(215,162,1)
(148,41,1)
(31,205,1)
(229,155,1)
(191,99,1)
(22,129,1)
(84,90,1)
(234,213,1)
(167,159,1)
(141,83,1)
(103,126,1)
(167,143,1)
(206,219,1)
(116,206,1)
(203,235,1)
(7,19,1)
(124,51,1)
(153,71,1)
(13,14,1)
(129,41,1)
(168,121,1)
(93,31,1)
(217,169,1)
(236,190,1)
(160,214,1)
(20,29,1)
(13,190,1)
(23,115,1)
(168,41,1)
(82,41,1)
(97,106,1)
(180,20,1)
(39,10,1)
(7,94,1)
(182,109,1)
(7,119,1)
(16,173,1)
(154,238,1)
(32,41,1)
(52,137,1)
(111,193,1)
(34,202,1)
(10,79,1)
(177,189,1)
(131,37,1)
(72,139,1)
(199,149,1)
(135,150,1)
(213,179,1)
(222,98,1)
(163,138,1)
(50,223,1)
(23,200,1)
(105,36,1)
(38,233,1)
(139,140,1)
(44,146,1)
(47,75,1)
(185,172,1)
(60,40,1)
(203,101,1)
(151,123,1)
(178,232,1)
(187,92,1)
(173,65,1)
(34,138,1)
(40,229,1)
(133,167,1)
(146,185,1)
(45,112,1)
(92,205,1)
(147,82,1)
(192,73,1)
(81,41,1)
(94,148,1)
(77,104,1)
(44,41,1)
(208,126,1)
(48,109,1)
(182,97,1)
(192,30,1)
(127,168,1)
(220,166,1)
(133,14,1)
(183,74,1)
(189,8,1)
(190,122,1)
(198,187,1)
(143,30,1)
(213,41,1)
(75,216,1)
(35,225,1)
(195,197,1)
(79,109,1)
(95,203,1)
(233,170,1)
(133,122,1)
(190,157,1)
(133,139,1)
(104,68,1)
(90,157,1)
(59,28,1)
(148,52,1)
(149,32,1)
(138,183,1)
(143,0,1)
(110,41,1)
(190,109,1)
(28,21,1)
(162,230,1)
(134,102,1)
(106,53,1)
(123,103,1)
(108,126,1)
(83,175,1)
(8,198,1)
(196,163,1)
(32,54,1)
(151,41,1)
(23,41,1)
(86,89,1)
(119,47,1)
(79,144,1)
(118,182,1)
(71,161,1)
(203,41,1)
(25,105,1)
(113,41,1)
(143,101,1)
(27,41,1)
(197,84,1)
(174,196,1)
(78,41,1)
(189,41,1)
(223,119,1)
(158,159,1)
(150,16,1)
(208,4,1)
(26,5,1)
(152,86,1)
(169,87,1)
(140,156,1)
(193,86,1)
(195,157,1)
(54,77,1)
(99,60,1)
(59,101,1)
(70,50,1)
(172,41,1)
(175,233,1)
(82,209,1)
(194,1,1)
(129,136,1)
(204,200,1)
(113,124,1)
(143,141,1)
(136,135,1)
(200,234,1)
(165,96,1)
(4,62,1)
(232,3,1)
(191,32,1)
(2,109,1)
(126,78,1)
(43,79,1)
(224,192,1)
(64,7,1)
(155,147,1)
(209,58,1)
(176,11,1)
(96,153,1)
(115,131,1)
(71,41,1)
(125,180,1)
(109,108,1)
(46,127,1)
(102,117,1)
(171,67,1)
(182,106,1)
(14,224,1)
(212,107,1)
(132,114,1)
(97,1,1)
(107,27,1)
(26,23,1)
(27,39,1)
(237,158,1)
(108,125,1)
(226,141,1)
(5,215,1)
(19,154,1)
(166,181,1)
(137,100,1)
(55,194,1)
(219,160,1)
(170,222,1)
(183,122,1)
(78,116,1)
(0,111,1)
(121,95,1)
(238,70,1)
(181,151,1)
(145,41,1)
(38,207,1)
(3,145,1)
(159,46,1)
(182,157,1)
(117,182,1)
(58,25,1)
(30,221,1)
(144,2,1)
(11,48,1)
(86,41,1)
(235,13,1)
(74,171,1)
(215,200,1)
(161,177,1)
(37,64,1)
(29,220,1)
(215,41,1)
(179,118,1)
(150,101,1)
(140,172,1)
(34,64,1)
(216,72,1)
(98,41,1)
(76,38,1)
(1,113,1)
(2,176,1)
(143,237,1)
(81,231,1)
(65,0,1)
(68,81,1)
(164,204,1)
(133,106,1)
(225,174,1)
(178,41,1)
(227,130,1)
(76,191,1)
(76,133,1)
(110,17,1)
(122,26,1)
(114,199,1)
(230,23,1)
(89,236,1)
(145,132,1)
(125,126,1)
(112,93,1)
(130,165,1)
(87,45,1)
(60,101,1)
(133,109,1)
(47,139,1)
(100,164,1)
(67,122,1)
(36,145,1)
(133,157,1)
(169,41,1)
(214,110,1)
(96,205,2)
(139,182,2)
(140,182,2)
(112,205,2)
(41,59,2)
(156,182,2)
(25,145,2)
(129,41,2)
(227,205,2)
(153,71,2)
(167,205,2)
(113,205,2)
(3,145,2)
(79,205,2)
(129,86,2)
(76,191,2)
(79,109,2)
(215,200,2)
(180,205,2)
(133,109,2)
(119,182,2)
(36,145,2)
(197,79,2)
(190,106,2)
(191,145,2)
(23,41,2)
(157,208,2)
(163,138,2)
(69,217,2)
(195,79,2)
(26,5,2)
(73,86,2)
(64,139,2)
(190,109,2)
(190,205,2)
(179,182,2)
(176,205,2)
(198,205,2)
(65,86,2)
(169,41,2)
(155,145,2)
(214,205,2)
(189,41,2)
(107,27,2)
(202,35,2)
(68,81,2)
(125,126,2)
(71,205,2)
(133,205,2)
(64,205,2)
(233,170,2)
(143,141,2)
(154,238,2)
(169,205,2)
(134,182,2)
(158,159,2)
(94,182,2)
(51,205,2)
(171,64,2)
(206,205,2)
(13,205,2)
(225,138,2)
(52,182,2)
(125,205,2)
(154,119,2)
(106,1,2)
(47,139,2)
(50,119,2)
(76,133,2)
(104,68,2)
(133,157,2)
(182,109,2)
(144,205,2)
(192,190,2)
(35,225,2)
(162,64,2)
(181,205,2)
(203,101,2)
(17,205,2)
(86,190,2)
(203,205,2)
(131,64,2)
(58,145,2)
(94,148,2)
(97,205,2)
(43,79,2)
(156,44,2)
(100,182,2)
(205,178,2)
(143,0,2)
(27,41,2)
(151,41,2)
(2,205,2)
(92,205,2)
(164,182,2)
(221,86,2)
(195,157,2)
(160,205,2)
(155,147,2)
(103,205,2)
(23,64,2)
(135,86,2)
(126,205,2)
(136,86,2)
(32,41,2)
(84,79,2)
(35,138,2)
(133,122,2)
(215,64,2)
(64,106,2)
(64,109,2)
(5,64,2)
(168,41,2)
(191,32,2)
(71,41,2)
(1,205,2)
(82,41,2)
(187,205,2)
(172,41,2)
(74,64,2)
(207,205,2)
(96,189,2)
(69,205,2)
(235,205,2)
(31,205,2)
(178,41,2)
(38,233,2)
(127,205,2)
(118,182,2)
(121,205,2)
(140,172,2)
(40,145,2)
(89,190,2)
(146,182,2)
(196,138,2)
(185,182,2)
(143,30,2)
(109,205,2)
(166,205,2)
(152,86,2)
(183,64,2)
(39,205,2)
(130,205,2)
(106,53,2)
(81,41,2)
(193,86,2)
(105,145,2)
(178,145,2)
(190,122,2)
(99,145,2)
(212,205,2)
(27,205,2)
(229,145,2)
(53,1,2)
(208,79,2)
(189,205,2)
(60,101,2)
(116,205,2)
(95,205,2)
(147,82,2)
(82,145,2)
(10,205,2)
(0,86,2)
(44,182,2)
(161,205,2)
(168,205,2)
(19,154,2)
(215,41,2)
(232,145,2)
(70,119,2)
(194,1,2)
(108,126,2)
(202,138,2)
(5,215,2)
(166,181,2)
(139,140,2)
(145,41,2)
(208,126,2)
(182,106,2)
(236,190,2)
(34,205,2)
(217,169,2)
(200,182,2)
(143,101,2)
(38,205,2)
(223,119,2)
(234,182,2)
(214,110,2)
(64,157,2)
(148,41,2)
(212,107,2)
(217,205,2)
(160,214,2)
(177,205,2)
(220,205,2)
(20,205,2)
(133,14,2)
(204,182,2)
(2,109,2)
(75,182,2)
(150,101,2)
(7,205,2)
(62,79,2)
(60,145,2)
(76,38,2)
(122,26,2)
(181,151,2)
(183,122,2)
(30,86,2)
(102,182,2)
(123,205,2)
(237,159,2)
(47,182,2)
(209,145,2)
(224,190,2)
(122,64,2)
(219,205,2)
(190,139,2)
(113,41,2)
(203,41,2)
(137,182,2)
(138,64,2)
(165,205,2)
(67,64,2)
(23,200,2)
(124,205,2)
(11,205,2)
(108,205,2)
(86,41,2)
(205,145,2)
(133,106,2)
(190,157,2)
(153,205,2)
(157,79,2)
(90,79,2)
(59,101,2)
(22,86,2)
(172,182,2)
(96,153,2)
(115,64,2)
(110,205,2)
(26,23,2)
(230,64,2)
(150,65,2)
(173,65,2)
(143,159,2)
(44,41,2)
(148,182,2)
(238,119,2)
(107,205,2)
(16,65,2)
(117,182,2)
(182,157,2)
(182,205,2)
(216,182,2)
(109,108,2)
(151,205,2)
(174,138,2)
(37,64,2)
(213,41,2)
(14,190,2)
(45,205,2)
(1,113,2)
(127,168,2)
(87,205,2)
(8,205,2)
(110,41,2)
(213,182,2)
(140,156,2)
(126,78,2)
(55,1,2)
(72,182,2)
(26,64,2)
(111,86,2)
(4,79,2)
(147,145,2)
(108,125,2)
(78,41,2)
(93,205,2)
(78,205,2)
(159,205,2)
(46,127,2)
(29,205,2)
(48,205,2)
(46,205,2)
(19,119,2)
(133,139,2)
-----------------------------------
(0,newstate = AST_STATE_UP)
(1,!p->chan)
(2,ast_debug(3, "Played beep, result \'%d\'\\n", res)
(3,p)
(4,"")
(5,ast_channel_nativeformats(p->chan)
(6,)
(7,res)
(8,agent)
(9,)
(10,p)
(11,"Played beep, result \'%d\'\\n")
(12,)
(13,ast)
(14,res = 0)
(15,tmpfmt)
(16,0)
(17,chan)
(18,)
(19,ast_log(LOG_WARNING, "Unable to set read format to %s\\n", ast_getformatname(&tmpfmt)
(20,beep)
(21,p)
(22,1)
(23,p->chan)
(24,)
(25,ast_log(LOG_DEBUG, "Pretending to dial on pending agent\\n")
(26,ast_set_write_format_from_cap(p->chan, ast_channel_nativeformats(p->chan)
(27,p->lock)
(28,ast)
(29,chan)
(30,newstate = AST_STATE_RINGING)
(31,LOG_DEBUG)
(32,p->acknowledged)
(33,if (!res)
(34,res)
(35,ast_getformatname(&tmpfmt)
(36,LOG_DEBUG)
(37,res)
(38,return res;)
(39,lock)
(40,AST_STATE_DIALING)
(41,*p = ast_channel_tech_pvt(ast)
(42,)
(43,res)
(44,p->chan)
(45,p)
(46,ast_mutex_unlock(&p->lock)
(47,ast_debug(3, "Set read format, result \'%d\'\\n", res)
(48,3)
(49,if (recordagentcalls)
(50,"Unable to set read format to %s\\n")
(51,p)
(52,agent)
(53,-1)
(54,acknowledged)
(55,1)
(56,if (p->ackcall)
(57,chan)
(58,p)
(59,ast_channel_tech_pvt(ast)
(60,ast_setstate(ast, AST_STATE_DIALING)
(61,)
(62,chan)
(63,)
(64,!res)
(65,recordagentcalls)
(66,if (p->pending)
(67,3)
(68,&p->lock)
(69,ast_mutex_unlock(&p->lock)
(70,tmpfmt)
(71,p->chan)
(72,3)
(73,p->acknowledged = 1)
(74,res)
(75,res)
(76,RET)
(77,p)
(78,p->chan)
(79,!res)
(80,if(!res)
(81,p->lock)
(82,p->lock)
(83,0)
(84,"Waited for stream, result \'%d\'\\n")
(85,if (!res)
(86,p->ackcall)
(87,lock)
(88,res)
(89,ackcall)
(90,3)
(91,if (!p->chan)
(92,3)
(93,"Agent disconnected while we were connecting the call\\n")
(94,ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "Agent/%s", p->agent)
(95,p)
(96,ast_verb(3, "agent_call, call to agent \'%s\' call on \'%s\'\\n", p->agent, ast_channel_name(p->chan)
(97,res)
(98,res)
(99,0)
(100,"Agent/%s")
(101,struct ast_channel *ast)
(102,p)
(103,p)
(104,ast_mutex_lock(&p->lock)
(105,"Pretending to dial on pending agent\\n")
(106,res = -1)
(107,&p->lock)
(108,ast_streamfile(chan, beep, ast_channel_language(chan)
(109,res = ast_streamfile(chan, beep, ast_channel_language(chan)
(110,p->chan)
(111,AST_STATE_UP)
(112,ast_log(LOG_DEBUG, "Agent disconnected while we were connecting the call\\n")
(113,p->chan)
(114,p)
(115,chan)
(116,chan)
(117,res)
(118,p)
(119,res)
(120,if (newstate)
(121,lock)
(122,res = ast_set_write_format_from_cap(p->chan, ast_channel_nativeformats(p->chan)
(123,lock)
(124,chan)
(125,ast_channel_language(chan)
(126,chan = p->chan)
(127,&p->lock)
(128,if (!p->chan)
(129,p->acknowledged)
(130,"Playing beep, lang \'%s\'\\n")
(131,p)
(132,pending)
(133,return res;)
(134,chan)
(135,p)
(136,acknowledged)
(137,p)
(138,res)
(139,res = ast_set_read_format_from_cap(p->chan, ast_channel_nativeformats(p->chan)
(140,ast_set_read_format_from_cap(p->chan, ast_channel_nativeformats(p->chan)
(141,newstate=0)
(142,)
(143,ast_setstate(ast, newstate)
(144,res)
(145,p->pending)
(146,chan)
(147,&p->lock)
(148,p->agent)
(149,0)
(150,agent_start_monitoring(ast, 0)
(151,p->lock)
(152,newstate)
(153,ast_channel_name(p->chan)
(154,ast_getformatname(&tmpfmt)
(155,ast_mutex_unlock(&p->lock)
(156,ast_channel_nativeformats(p->chan)
(157,res = ast_waitstream(chan, "")
(158,ast)
(159,newstate)
(160,ast_debug(3, "Playing beep, lang \'%s\'\\n", ast_channel_language(p->chan)
(161,chan)
(162,chan)
(163,LOG_WARNING)
(164,AST_DEVSTATE_CACHABLE)
(165,3)
(166,ast_mutex_unlock(&p->lock)
(167,res)
(168,p->lock)
(169,p->lock)
(170,-1)
(171,"Set write format, result \'%d\'\\n")
(172,p->chan)
(173,ast)
(174,tmpfmt)
(175,newstate)
(176,res)
(177,p)
(178,p->chan)
(179,chan)
(180,chan)
(181,&p->lock)
(182,!res)
(183,ast_debug(3, "Set write format, result \'%d\'\\n", res)
(184,)
(185,p)
(186,)
(187,"agent_call, call to agent \'%s\' call on \'%s\'\\n")
(188,tmpfmt)
(189,p->agent)
(190,!res)
(191,return 0;)
(192,res)
(193,newstate)
(194,res)
(195,ast_debug(3, "Waited for stream, result \'%d\'\\n", res)
(196,"Unable to set write format to %s\\n")
(197,res)
(198,p)
(199,p->acknowledged = 0)
(200,p->chan = NULL)
(201,newstate)
(202,ast_log(LOG_WARNING, "Unable to set write format to %s\\n", ast_getformatname(&tmpfmt)
(203,CLEANUP(ast, p)
(204,AST_DEVICE_UNAVAILABLE)
(205,!p->chan)
(206,p)
(207,res)
(208,ast_waitstream(chan, "")
(209,lock)
(210,if (!res)
(211,if (res)
(212,ast_mutex_lock(&p->lock)
(213,p->chan)
(214,ast_channel_language(p->chan)
(215,p->chan)
(216,"Set read format, result \'%d\'\\n")
(217,&p->lock)
(218,if (res)
(219,chan)
(220,res)
(221,AST_STATE_RINGING)
(222,1)
(223,LOG_WARNING)
(224,0)
(225,&tmpfmt)
(226,p)
(227,p)
(228,p)
(229,ast)
(230,p)
(231,lock)
(232,chan)
(233,res = -1)
(234,NULL)
(235,p)
(236,p)
(237,newstate)
(238,&tmpfmt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^