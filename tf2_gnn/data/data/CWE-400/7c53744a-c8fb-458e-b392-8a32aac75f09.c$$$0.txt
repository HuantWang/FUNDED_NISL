-----label-----
0
-----code-----
int
verify_host_key(char *host, struct sockaddr *hostaddr, Key *host_key)
{
	int flags = 0;
	char *fp;
	Key *plain = NULL;

	fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);
	debug("Server host key: %s %s", key_type(host_key), fp);
	free(fp);

	if (options.verify_host_key_dns) {
		/*
		 * XXX certs are not yet supported for DNS, so downgrade
		 * them and try the plain key.
		 */
		plain = key_from_private(host_key);
		if (key_is_cert(plain))
			key_drop_cert(plain);
		if (verify_host_key_dns(host, hostaddr, plain, &flags) == 0) {
			if (flags & DNS_VERIFY_FOUND) {
				if (options.verify_host_key_dns == 1 &&
				    flags & DNS_VERIFY_MATCH &&
				    flags & DNS_VERIFY_SECURE) {
					key_free(plain);
					return 0;
				}
				if (flags & DNS_VERIFY_MATCH) {
					matching_host_key_dns = 1;
				} else {
					warn_changed_key(plain);
					error("Update the SSHFP RR in DNS "
					    "with the new host key to get rid "
					    "of this message.");
				}
			}
		}
		key_free(plain);
	}

	return check_host_key(host, hostaddr, options.port, host_key, RDRW,
	    options.user_hostfiles, options.num_user_hostfiles,
	    options.system_hostfiles, options.num_system_hostfiles);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
23,24
24,25
24,26
26,27
26,28
28,29
30,31
31,32
31,33
33,34
33,35
36,37
37,38
37,39
38,39
40,41
40,42
40,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
50,53
50,54
51,52
53,54
55,56
57,58
59,60
60,61
60,62
60,63
60,64
61,62
64,65
64,66
65,66
67,68
69,70
71,72
72,73
72,74
73,74
75,76
77,78
77,79
78,79
78,80
79,80
82,83
82,84
82,85
82,86
83,84
84,85
84,86
85,86
87,88
87,89
88,89
90,91
92,93
92,94
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
104,106
105,106
105,107
106,107
106,108
106,109
106,110
106,111
107,108
109,110
111,112
113,114
115,116
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
126,127
126,128
127,128
127,129
128,129
128,130
129,130
129,131
130,131
130,132
131,132
131,133
132,133
136,137
136,138
137,138
139,140
141,142
141,143
142,143
144,145
146,147
146,148
147,148
148,149
148,150
149,150
151,152
153,154
155,156
155,157
155,158
156,157
156,158
157,158
159,160
161,162
162,163
163,164
163,165
164,165
167,168
167,169
168,169
169,170
169,171
170,171
172,173
174,175
175,176
175,177
176,177
179,180
180,181
180,182
181,182
183,184
185,186
186,187
186,188
186,189
186,190
186,191
186,192
186,193
186,194
186,195
186,196
187,188
189,190
191,192
193,194
193,195
194,195
197,198
199,200
201,202
201,203
202,203
205,206
205,207
206,207
209,210
209,211
210,211
213,214
213,215
214,215
-----nextToken-----
2,4,6,8,9,12,14,15,18,20,21,25,27,29,32,34,35,39,41,42,45,49,52,54,56,58,62,63,66,68,70,74,76,80,81,86,89,91,95,97,101,103,108,110,112,114,117,118,123,125,133,134,135,138,140,143,145,150,152,154,158,160,165,166,171,173,177,178,182,184,188,190,192,195,196,198,200,203,204,207,208,211,212,215,216
-----computeFrom-----
47,48
47,49
84,85
84,86
105,106
105,107
121,122
121,123
128,129
128,130
129,130
129,131
130,131
130,132
136,137
136,138
141,142
141,143
156,157
156,158
163,164
163,165
-----guardedBy-----
108,134
114,173
117,158
123,158
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
intverify_host_key(char *host, struct sockaddr *hostaddr, Key *host_key){	int flags = 0;	char *fp;	Key *plain = NULL;	fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);	debug("Server host key: %s %s", key_type(host_key), fp);	free(fp);	if (options.verify_host_key_dns) {		/*		 * XXX certs are not yet supported for DNS, so downgrade		 * them and try the plain key.		 */		plain = key_from_private(host_key);		if (key_is_cert(plain))			key_drop_cert(plain);		if (verify_host_key_dns(host, hostaddr, plain, &flags) == 0) {			if (flags & DNS_VERIFY_FOUND) {				if (options.verify_host_key_dns == 1 &&				    flags & DNS_VERIFY_MATCH &&				    flags & DNS_VERIFY_SECURE) {					key_free(plain);					return 0;				}				if (flags & DNS_VERIFY_MATCH) {					matching_host_key_dns = 1;				} else {					warn_changed_key(plain);					error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.");				}			}		}		key_free(plain);	}	return check_host_key(host, hostaddr, options.port, host_key, RDRW,	    options.user_hostfiles, options.num_user_hostfiles,	    options.system_hostfiles, options.num_system_hostfiles);}
int
verify_host_key(char *host, struct sockaddr *hostaddr, Key *host_key)
verify_host_key
char *host
char
*host
*
host
struct sockaddr *hostaddr
struct sockaddr
sockaddr
*hostaddr
*
hostaddr
Key *host_key
Key
Key
*host_key
*
host_key
{	int flags = 0;	char *fp;	Key *plain = NULL;	fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);	debug("Server host key: %s %s", key_type(host_key), fp);	free(fp);	if (options.verify_host_key_dns) {		/*		 * XXX certs are not yet supported for DNS, so downgrade		 * them and try the plain key.		 */		plain = key_from_private(host_key);		if (key_is_cert(plain))			key_drop_cert(plain);		if (verify_host_key_dns(host, hostaddr, plain, &flags) == 0) {			if (flags & DNS_VERIFY_FOUND) {				if (options.verify_host_key_dns == 1 &&				    flags & DNS_VERIFY_MATCH &&				    flags & DNS_VERIFY_SECURE) {					key_free(plain);					return 0;				}				if (flags & DNS_VERIFY_MATCH) {					matching_host_key_dns = 1;				} else {					warn_changed_key(plain);					error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.");				}			}		}		key_free(plain);	}	return check_host_key(host, hostaddr, options.port, host_key, RDRW,	    options.user_hostfiles, options.num_user_hostfiles,	    options.system_hostfiles, options.num_system_hostfiles);}
int flags = 0;
int flags = 0;
int
flags = 0
flags
= 0
0
char *fp;
char *fp;
char
*fp
*
fp
Key *plain = NULL;
Key *plain = NULL;
Key
Key
*plain = NULL
*
plain
= NULL
NULL
NULL
fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);
fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX)
fp
fp
key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX)
key_fingerprint
key_fingerprint
host_key
host_key
SSH_FP_MD5
SSH_FP_MD5
SSH_FP_HEX
SSH_FP_HEX
debug("Server host key: %s %s", key_type(host_key), fp);
debug("Server host key: %s %s", key_type(host_key), fp)
debug
debug
"Server host key: %s %s"
key_type(host_key)
key_type
key_type
host_key
host_key
fp
fp
free(fp);
free(fp)
free
free
fp
fp
if (options.verify_host_key_dns) {		/*		 * XXX certs are not yet supported for DNS, so downgrade		 * them and try the plain key.		 */		plain = key_from_private(host_key);		if (key_is_cert(plain))			key_drop_cert(plain);		if (verify_host_key_dns(host, hostaddr, plain, &flags) == 0) {			if (flags & DNS_VERIFY_FOUND) {				if (options.verify_host_key_dns == 1 &&				    flags & DNS_VERIFY_MATCH &&				    flags & DNS_VERIFY_SECURE) {					key_free(plain);					return 0;				}				if (flags & DNS_VERIFY_MATCH) {					matching_host_key_dns = 1;				} else {					warn_changed_key(plain);					error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.");				}			}		}		key_free(plain);	}
options.verify_host_key_dns
options
options
verify_host_key_dns
{		/*		 * XXX certs are not yet supported for DNS, so downgrade		 * them and try the plain key.		 */		plain = key_from_private(host_key);		if (key_is_cert(plain))			key_drop_cert(plain);		if (verify_host_key_dns(host, hostaddr, plain, &flags) == 0) {			if (flags & DNS_VERIFY_FOUND) {				if (options.verify_host_key_dns == 1 &&				    flags & DNS_VERIFY_MATCH &&				    flags & DNS_VERIFY_SECURE) {					key_free(plain);					return 0;				}				if (flags & DNS_VERIFY_MATCH) {					matching_host_key_dns = 1;				} else {					warn_changed_key(plain);					error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.");				}			}		}		key_free(plain);	}
plain = key_from_private(host_key);
plain = key_from_private(host_key)
plain
plain
key_from_private(host_key)
key_from_private
key_from_private
host_key
host_key
if (key_is_cert(plain))			key_drop_cert(plain);
key_is_cert(plain)
key_is_cert
key_is_cert
plain
plain
key_drop_cert(plain);
key_drop_cert(plain)
key_drop_cert
key_drop_cert
plain
plain
if (verify_host_key_dns(host, hostaddr, plain, &flags) == 0) {			if (flags & DNS_VERIFY_FOUND) {				if (options.verify_host_key_dns == 1 &&				    flags & DNS_VERIFY_MATCH &&				    flags & DNS_VERIFY_SECURE) {					key_free(plain);					return 0;				}				if (flags & DNS_VERIFY_MATCH) {					matching_host_key_dns = 1;				} else {					warn_changed_key(plain);					error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.");				}			}		}
verify_host_key_dns(host, hostaddr, plain, &flags) == 0
verify_host_key_dns(host, hostaddr, plain, &flags)
verify_host_key_dns
verify_host_key_dns
host
host
hostaddr
hostaddr
plain
plain
&flags
flags
flags
0
{			if (flags & DNS_VERIFY_FOUND) {				if (options.verify_host_key_dns == 1 &&				    flags & DNS_VERIFY_MATCH &&				    flags & DNS_VERIFY_SECURE) {					key_free(plain);					return 0;				}				if (flags & DNS_VERIFY_MATCH) {					matching_host_key_dns = 1;				} else {					warn_changed_key(plain);					error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.");				}			}		}
if (flags & DNS_VERIFY_FOUND) {				if (options.verify_host_key_dns == 1 &&				    flags & DNS_VERIFY_MATCH &&				    flags & DNS_VERIFY_SECURE) {					key_free(plain);					return 0;				}				if (flags & DNS_VERIFY_MATCH) {					matching_host_key_dns = 1;				} else {					warn_changed_key(plain);					error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.");				}			}
flags & DNS_VERIFY_FOUND
flags
flags
DNS_VERIFY_FOUND
DNS_VERIFY_FOUND
{				if (options.verify_host_key_dns == 1 &&				    flags & DNS_VERIFY_MATCH &&				    flags & DNS_VERIFY_SECURE) {					key_free(plain);					return 0;				}				if (flags & DNS_VERIFY_MATCH) {					matching_host_key_dns = 1;				} else {					warn_changed_key(plain);					error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.");				}			}
if (options.verify_host_key_dns == 1 &&				    flags & DNS_VERIFY_MATCH &&				    flags & DNS_VERIFY_SECURE) {					key_free(plain);					return 0;				}
options.verify_host_key_dns == 1 &&				    flags & DNS_VERIFY_MATCH &&				    flags & DNS_VERIFY_SECURE
options.verify_host_key_dns == 1 &&				    flags & DNS_VERIFY_MATCH
options.verify_host_key_dns == 1
options.verify_host_key_dns
options
options
verify_host_key_dns
1
flags & DNS_VERIFY_MATCH
flags
flags
DNS_VERIFY_MATCH
DNS_VERIFY_MATCH
flags & DNS_VERIFY_SECURE
flags
flags
DNS_VERIFY_SECURE
DNS_VERIFY_SECURE
{					key_free(plain);					return 0;				}
key_free(plain);
key_free(plain)
key_free
key_free
plain
plain
return 0;
0
if (flags & DNS_VERIFY_MATCH) {					matching_host_key_dns = 1;				} else {					warn_changed_key(plain);					error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.");				}
flags & DNS_VERIFY_MATCH
flags
flags
DNS_VERIFY_MATCH
DNS_VERIFY_MATCH
{					matching_host_key_dns = 1;				}
matching_host_key_dns = 1;
matching_host_key_dns = 1
matching_host_key_dns
matching_host_key_dns
1
{					warn_changed_key(plain);					error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.");				}
warn_changed_key(plain);
warn_changed_key(plain)
warn_changed_key
warn_changed_key
plain
plain
error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.");
error("Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message.")
error
error
"Update the SSHFP RR in DNS "					    "with the new host key to get rid "					    "of this message."
key_free(plain);
key_free(plain)
key_free
key_free
plain
plain
return check_host_key(host, hostaddr, options.port, host_key, RDRW,	    options.user_hostfiles, options.num_user_hostfiles,	    options.system_hostfiles, options.num_system_hostfiles);
check_host_key(host, hostaddr, options.port, host_key, RDRW,	    options.user_hostfiles, options.num_user_hostfiles,	    options.system_hostfiles, options.num_system_hostfiles)
check_host_key
check_host_key
host
host
hostaddr
hostaddr
options.port
options
options
port
host_key
host_key
RDRW
RDRW
options.user_hostfiles
options
options
user_hostfiles
options.num_user_hostfiles
options
options
num_user_hostfiles
options.system_hostfiles
options
options
system_hostfiles
options.num_system_hostfiles
options
options
num_system_hostfiles
-----joern-----
(103,19,0)
(40,54,0)
(14,73,0)
(20,80,0)
(64,87,0)
(108,35,0)
(100,73,0)
(10,70,0)
(34,38,0)
(101,90,0)
(84,52,0)
(35,107,0)
(8,46,0)
(48,38,0)
(35,61,0)
(107,35,0)
(81,40,0)
(17,40,0)
(99,95,0)
(41,33,0)
(81,96,0)
(12,73,0)
(60,6,0)
(35,33,0)
(13,23,0)
(76,80,0)
(46,61,0)
(21,67,0)
(35,6,0)
(91,109,0)
(96,20,0)
(68,54,0)
(98,48,0)
(25,39,0)
(79,40,0)
(96,81,0)
(32,13,0)
(71,68,0)
(106,59,0)
(65,39,0)
(80,20,0)
(1,33,0)
(59,38,0)
(28,110,0)
(85,34,0)
(35,86,0)
(11,57,0)
(52,40,0)
(60,38,0)
(5,80,0)
(0,46,0)
(80,5,0)
(22,5,0)
(92,68,0)
(109,35,0)
(39,40,0)
(35,69,0)
(38,90,0)
(59,90,0)
(58,46,0)
(26,108,0)
(47,54,0)
(97,54,0)
(49,107,0)
(110,96,0)
(33,35,0)
(78,35,0)
(35,78,0)
(82,108,0)
(69,54,0)
(38,60,0)
(44,78,0)
(7,9,0)
(4,90,0)
(93,13,0)
(68,73,0)
(9,54,0)
(9,55,0)
(35,108,0)
(77,104,0)
(45,17,0)
(53,87,0)
(46,38,0)
(9,68,0)
(24,54,0)
(17,46,0)
(95,38,0)
(19,36,0)
(20,96,0)
(18,19,0)
(15,54,0)
(73,68,0)
(57,38,0)
(50,35,0)
(104,54,0)
(29,81,0)
(2,89,0)
(16,21,0)
(72,35,0)
(69,19,0)
(66,104,0)
(105,52,0)
(94,78,0)
(96,110,0)
(95,67,0)
(46,17,0)
(3,107,0)
(46,8,0)
(75,70,0)
(71,54,0)
(102,35,0)
(62,60,0)
(110,40,0)
(27,55,0)
(73,6,0)
(32,69,0)
(88,109,0)
(48,23,0)
(55,9,0)
(74,71,0)
(31,5,0)
(56,9,0)
(83,8,0)
(46,86,0)
(51,35,0)
(42,40,0)
(63,38,0)
(30,110,0)
(37,46,0)
(43,81,0)
(35,109,0)
(55,6,0)
(75,10,1)
(73,6,1)
(100,14,1)
(20,96,1)
(62,63,1)
(37,57,1)
(35,78,1)
(20,80,1)
(104,66,1)
(106,19,1)
(76,5,1)
(35,33,1)
(46,61,1)
(35,107,1)
(41,102,1)
(74,9,1)
(82,26,1)
(69,19,1)
(57,38,1)
(39,40,1)
(59,38,1)
(46,17,1)
(35,109,1)
(25,20,1)
(88,91,1)
(60,62,1)
(80,5,1)
(48,38,1)
(13,93,1)
(26,72,1)
(95,38,1)
(22,31,1)
(34,85,1)
(21,16,1)
(103,18,1)
(32,13,1)
(9,68,1)
(73,100,1)
(56,55,1)
(8,83,1)
(79,42,1)
(1,41,1)
(34,38,1)
(28,30,1)
(35,86,1)
(109,88,1)
(84,105,1)
(11,38,1)
(107,3,1)
(106,8,1)
(99,39,1)
(78,94,1)
(51,33,1)
(38,60,1)
(10,71,1)
(44,107,1)
(69,35,1)
(66,77,1)
(95,99,1)
(77,40,1)
(46,86,1)
(106,52,1)
(52,40,1)
(32,69,1)
(50,70,1)
(68,73,1)
(3,49,1)
(85,57,1)
(58,37,1)
(96,110,1)
(35,108,1)
(98,20,1)
(59,106,1)
(45,0,1)
(35,61,1)
(57,11,1)
(50,59,1)
(9,55,1)
(30,80,1)
(72,51,1)
(94,44,1)
(5,22,1)
(83,46,1)
(31,52,1)
(71,74,1)
(60,6,1)
(49,109,1)
(39,65,1)
(35,6,1)
(52,84,1)
(55,27,1)
(110,40,1)
(93,48,1)
(29,110,1)
(40,79,1)
(81,40,1)
(105,8,1)
(12,92,1)
(80,76,1)
(9,56,1)
(71,68,1)
(63,70,1)
(106,21,1)
(16,95,1)
(17,40,1)
(65,25,1)
(110,28,1)
(48,98,1)
(96,81,1)
(8,46,1)
(108,82,1)
(37,34,1)
(0,58,1)
(7,68,1)
(43,29,1)
(91,108,1)
(55,6,1)
(70,75,1)
(46,38,1)
(19,103,1)
(14,12,1)
(33,1,1)
(81,43,1)
(18,39,1)
(27,7,1)
(17,45,1)
(92,104,1)
(102,50,1)
(102,52,2)
(51,20,2)
(49,70,2)
(103,39,2)
(58,70,2)
(82,20,2)
(44,52,2)
(62,70,2)
(88,70,2)
(41,70,2)
(26,20,2)
(46,61,2)
(38,70,2)
(51,70,2)
(9,55,2)
(35,86,2)
(98,20,2)
(76,52,2)
(26,52,2)
(22,52,2)
(80,5,2)
(33,70,2)
(17,40,2)
(107,52,2)
(32,69,2)
(55,6,2)
(110,40,2)
(78,52,2)
(35,78,2)
(33,8,2)
(0,70,2)
(106,20,2)
(69,19,2)
(50,52,2)
(35,107,2)
(99,39,2)
(48,20,2)
(1,20,2)
(102,20,2)
(1,8,2)
(44,20,2)
(33,20,2)
(69,8,2)
(57,38,2)
(81,40,2)
(94,20,2)
(9,68,2)
(65,20,2)
(57,70,2)
(29,110,2)
(94,52,2)
(108,70,2)
(59,20,2)
(39,40,2)
(94,70,2)
(49,20,2)
(88,8,2)
(91,70,2)
(35,52,2)
(11,70,2)
(59,38,2)
(60,70,2)
(46,70,2)
(30,80,2)
(51,52,2)
(18,39,2)
(50,8,2)
(51,8,2)
(50,20,2)
(46,38,2)
(105,8,2)
(69,52,2)
(8,46,2)
(60,6,2)
(107,8,2)
(48,38,2)
(37,70,2)
(107,70,2)
(41,52,2)
(33,52,2)
(46,86,2)
(109,8,2)
(44,8,2)
(25,20,2)
(46,17,2)
(109,70,2)
(82,8,2)
(20,52,2)
(83,70,2)
(26,8,2)
(106,52,2)
(26,70,2)
(31,52,2)
(69,20,2)
(20,96,2)
(91,52,2)
(49,8,2)
(3,70,2)
(3,20,2)
(96,110,2)
(106,8,2)
(69,70,2)
(102,8,2)
(78,20,2)
(72,8,2)
(72,20,2)
(91,8,2)
(59,8,2)
(35,108,2)
(13,20,2)
(28,80,2)
(88,20,2)
(35,109,2)
(109,52,2)
(44,70,2)
(108,8,2)
(96,80,2)
(35,8,2)
(43,110,2)
(72,70,2)
(20,80,2)
(91,20,2)
(16,39,2)
(72,52,2)
(109,20,2)
(85,57,2)
(38,60,2)
(35,6,2)
(41,8,2)
(78,70,2)
(41,20,2)
(82,70,2)
(95,38,2)
(19,39,2)
(81,110,2)
(80,52,2)
(63,70,2)
(52,40,2)
(110,80,2)
(59,52,2)
(35,70,2)
(8,70,2)
(52,8,2)
(5,52,2)
(49,52,2)
(35,20,2)
(35,33,2)
(35,61,2)
(1,52,2)
(96,81,2)
(39,20,2)
(21,39,2)
(102,70,2)
(34,57,2)
(73,6,2)
(93,20,2)
(50,70,2)
(108,52,2)
(3,52,2)
(71,68,2)
(34,38,2)
(17,70,2)
(94,8,2)
(88,52,2)
(78,8,2)
(68,73,2)
(45,70,2)
(95,39,2)
(108,20,2)
(3,8,2)
(32,13,2)
(82,52,2)
(84,8,2)
(1,70,2)
(107,20,2)
-----------------------------------
(0,plain)
(1,port)
(2,if (flags & DNS_VERIFY_FOUND)
(3,system_hostfiles)
(4,if (key_is_cert(plain)
(5,options.verify_host_key_dns)
(6,Key *host_key)
(7,"Server host key: %s %s")
(8,verify_host_key_dns(host, hostaddr, plain, &flags)
(9,debug("Server host key: %s %s", key_type(host_key)
(10,options)
(11,plain)
(12,host_key)
(13,return 0;)
(14,SSH_FP_MD5)
(15,fp)
(16,"Update the SSHFP RR in DNS "\n\\n\\t\\t\\t\\t\\t    "with the new host key to get rid "\n\\n\\t\\t\\t\\t\\t    "of this message.")
(17,&flags)
(18,matching_host_key_dns)
(19,matching_host_key_dns = 1)
(20,options.verify_host_key_dns == 1 &&\n\\n\\t\\t\\t\\t    flags & DNS_VERIFY_MATCH &&\n\\n\\t\\t\\t\\t    flags & DNS_VERIFY_SECURE)
(21,error("Update the SSHFP RR in DNS "\n\\n\\t\\t\\t\\t\\t    "with the new host key to get rid "\n\\n\\t\\t\\t\\t\\t    "of this message.")
(22,verify_host_key_dns)
(23,)
(24,if (options.verify_host_key_dns)
(25,flags)
(26,options)
(27,host_key)
(28,DNS_VERIFY_MATCH)
(29,flags)
(30,flags)
(31,options)
(32,RET)
(33,options.port)
(34,key_drop_cert(plain)
(35,check_host_key(host, hostaddr, options.port, host_key, RDRW,\n\\n\\t    options.user_hostfiles, options.num_user_hostfiles,\n\\n\\t    options.system_hostfiles, options.num_system_hostfiles)
(36,)
(37,host)
(38,plain = key_from_private(host_key)
(39,flags & DNS_VERIFY_MATCH)
(40,flags = 0)
(41,options)
(42,flags)
(43,DNS_VERIFY_SECURE)
(44,options)
(45,flags)
(46,verify_host_key_dns(host, hostaddr, plain, &flags)
(47,flags)
(48,key_free(plain)
(49,options)
(50,host)
(51,host_key)
(52,flags & DNS_VERIFY_FOUND)
(53,if (flags & DNS_VERIFY_MATCH)
(54,)
(55,key_type(host_key)
(56,fp)
(57,key_is_cert(plain)
(58,hostaddr)
(59,key_free(plain)
(60,key_from_private(host_key)
(61,struct sockaddr *hostaddr)
(62,host_key)
(63,plain)
(64,if (options.verify_host_key_dns == 1 &&\n\\n\\t\\t\\t\\t    flags & DNS_VERIFY_MATCH &&\n\\n\\t\\t\\t\\t    flags & DNS_VERIFY_SECURE)
(65,DNS_VERIFY_MATCH)
(66,NULL)
(67,)
(68,fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX)
(69,return check_host_key(host, hostaddr, options.port, host_key, RDRW,\n\\n\\t    options.user_hostfiles, options.num_user_hostfiles,\n\\n\\t    options.system_hostfiles, options.num_system_hostfiles)
(70,options.verify_host_key_dns)
(71,free(fp)
(72,RDRW)
(73,key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX)
(74,fp)
(75,verify_host_key_dns)
(76,1)
(77,plain)
(78,options.num_system_hostfiles)
(79,0)
(80,options.verify_host_key_dns == 1)
(81,flags & DNS_VERIFY_SECURE)
(82,user_hostfiles)
(83,0)
(84,DNS_VERIFY_FOUND)
(85,plain)
(86,char *host)
(87,)
(88,num_user_hostfiles)
(89,)
(90,)
(91,options)
(92,fp)
(93,0)
(94,num_system_hostfiles)
(95,warn_changed_key(plain)
(96,flags & DNS_VERIFY_MATCH &&\n\\n\\t\\t\\t\\t    flags & DNS_VERIFY_SECURE)
(97,plain)
(98,plain)
(99,plain)
(100,SSH_FP_HEX)
(101,if (verify_host_key_dns(host, hostaddr, plain, &flags)
(102,hostaddr)
(103,1)
(104,*plain = NULL)
(105,flags)
(106,plain)
(107,options.system_hostfiles)
(108,options.user_hostfiles)
(109,options.num_user_hostfiles)
(110,flags & DNS_VERIFY_MATCH)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^