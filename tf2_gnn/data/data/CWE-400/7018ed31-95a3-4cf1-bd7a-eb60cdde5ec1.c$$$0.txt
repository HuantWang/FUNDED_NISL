-----label-----
0
-----code-----
static inline int
riemann_recv_ack(struct riemann_host *host)
{
	int status = 0;
	Msg *msg = NULL;
	uint32_t header;

	status = (int) sread (host->s, &header, 4);

	if (status != 0)
		return -1;

	size_t size = ntohl(header);

	// Buffer on the stack since acknowledges are typically small.
	u_char buffer[size];
	memset (buffer, 0, size);

	status = (int) sread (host->s, buffer, size);

	if (status != 0)
		return status;

	msg = msg__unpack (NULL, size, buffer);

	if (msg == NULL)
		return -1;

	if (!msg->ok)
	{
		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s acknowledgement message reported error: %s",
				(host->node != NULL) ? host->node : RIEMANN_HOST,
				(host->service != NULL) ? host->service : RIEMANN_PORT,
				msg->error);

		msg__free_unpacked(msg, NULL);
		return -1;
	}

	msg__free_unpacked (msg, NULL);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
40,41
40,42
43,44
43,45
43,46
43,47
44,45
46,47
46,48
47,48
50,51
51,52
54,55
54,56
55,56
55,57
56,57
59,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
78,80
80,81
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
90,91
92,93
93,94
93,95
94,95
96,97
96,98
97,98
97,99
100,101
100,102
100,103
100,104
101,102
103,104
103,105
104,105
107,108
109,110
111,112
111,113
112,113
112,114
113,114
116,117
117,118
119,120
120,121
120,122
121,122
123,124
123,125
123,126
123,127
124,125
126,127
128,129
130,131
132,133
132,134
133,134
133,135
134,135
136,137
138,139
139,140
141,142
141,143
142,143
143,144
143,145
144,145
147,148
147,149
147,150
148,149
149,150
149,151
149,152
149,153
149,154
150,151
153,154
153,155
153,156
154,155
155,156
155,157
156,157
156,158
157,158
160,161
162,163
162,164
163,164
166,167
168,169
168,170
168,171
169,170
170,171
170,172
171,172
171,173
172,173
175,176
177,178
177,179
178,179
181,182
183,184
183,185
184,185
187,188
188,189
188,190
188,191
189,190
191,192
193,194
195,196
196,197
198,199
199,200
199,201
199,202
200,201
202,203
204,205
206,207
-----nextToken-----
2,4,7,9,10,14,16,18,22,24,25,28,32,34,38,41,42,45,48,49,52,53,57,58,61,65,67,71,73,77,79,82,86,88,89,91,95,98,99,102,105,106,108,110,114,115,118,122,125,127,129,131,135,137,140,145,146,151,152,158,159,161,164,165,167,173,174,176,179,180,182,185,186,190,192,194,197,201,203,205,207
-----computeFrom-----
36,37
36,38
55,56
55,57
93,94
93,95
112,113
112,114
120,121
120,122
133,134
133,135
155,156
155,157
170,171
170,172
-----guardedBy-----
114,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static inline intriemann_recv_ack(struct riemann_host *host){	int status = 0;	Msg *msg = NULL;	uint32_t header;	status = (int) sread (host->s, &header, 4);	if (status != 0)		return -1;	size_t size = ntohl(header);	// Buffer on the stack since acknowledges are typically small.	u_char buffer[size];	memset (buffer, 0, size);	status = (int) sread (host->s, buffer, size);	if (status != 0)		return status;	msg = msg__unpack (NULL, size, buffer);	if (msg == NULL)		return -1;	if (!msg->ok)	{		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s acknowledgement message reported error: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				msg->error);		msg__free_unpacked(msg, NULL);		return -1;	}	msg__free_unpacked (msg, NULL);	return 0;}
static inline int
riemann_recv_ack(struct riemann_host *host)
riemann_recv_ack
struct riemann_host *host
struct riemann_host
riemann_host
*host
*
host
{	int status = 0;	Msg *msg = NULL;	uint32_t header;	status = (int) sread (host->s, &header, 4);	if (status != 0)		return -1;	size_t size = ntohl(header);	// Buffer on the stack since acknowledges are typically small.	u_char buffer[size];	memset (buffer, 0, size);	status = (int) sread (host->s, buffer, size);	if (status != 0)		return status;	msg = msg__unpack (NULL, size, buffer);	if (msg == NULL)		return -1;	if (!msg->ok)	{		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s acknowledgement message reported error: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				msg->error);		msg__free_unpacked(msg, NULL);		return -1;	}	msg__free_unpacked (msg, NULL);	return 0;}
int status = 0;
int status = 0;
int
status = 0
status
= 0
0
Msg *msg = NULL;
Msg *msg = NULL;
Msg
Msg
*msg = NULL
*
msg
= NULL
NULL
NULL
uint32_t header;
uint32_t header;
uint32_t
uint32_t
header
header
status = (int) sread (host->s, &header, 4);
status = (int) sread (host->s, &header, 4)
status
status
(int) sread (host->s, &header, 4)
int
int

sread (host->s, &header, 4)
sread
sread
host->s
host
host
s
&header
header
header
4
if (status != 0)		return -1;
status != 0
status
status
0
return -1;
-1
1
size_t size = ntohl(header);
size_t size = ntohl(header);
size_t
size_t
size = ntohl(header)
size
= ntohl(header)
ntohl(header)
ntohl
ntohl
header
header
u_char buffer[size];
u_char buffer[size];
u_char
u_char
buffer[size]
buffer
[size]
size
size
memset (buffer, 0, size);
memset (buffer, 0, size)
memset
memset
buffer
buffer
0
size
size
status = (int) sread (host->s, buffer, size);
status = (int) sread (host->s, buffer, size)
status
status
(int) sread (host->s, buffer, size)
int
int

sread (host->s, buffer, size)
sread
sread
host->s
host
host
s
buffer
buffer
size
size
if (status != 0)		return status;
status != 0
status
status
0
return status;
status
status
msg = msg__unpack (NULL, size, buffer);
msg = msg__unpack (NULL, size, buffer)
msg
msg
msg__unpack (NULL, size, buffer)
msg__unpack
msg__unpack
NULL
NULL
size
size
buffer
buffer
if (msg == NULL)		return -1;
msg == NULL
msg
msg
NULL
NULL
return -1;
-1
1
if (!msg->ok)	{		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s acknowledgement message reported error: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				msg->error);		msg__free_unpacked(msg, NULL);		return -1;	}
!msg->ok
msg->ok
msg
msg
ok
{		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s acknowledgement message reported error: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				msg->error);		msg__free_unpacked(msg, NULL);		return -1;	}
ERROR ("write_riemann plugin: Sending to Riemann at %s:%s acknowledgement message reported error: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				msg->error);
ERROR ("write_riemann plugin: Sending to Riemann at %s:%s acknowledgement message reported error: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				msg->error)
ERROR
ERROR
"write_riemann plugin: Sending to Riemann at %s:%s acknowledgement message reported error: %s"
(host->node != NULL) ? host->node : RIEMANN_HOST
(host->node != NULL)
host->node != NULL
host->node
host
host
node
NULL
NULL
host->node
host
host
node
RIEMANN_HOST
RIEMANN_HOST
(host->service != NULL) ? host->service : RIEMANN_PORT
(host->service != NULL)
host->service != NULL
host->service
host
host
service
NULL
NULL
host->service
host
host
service
RIEMANN_PORT
RIEMANN_PORT
msg->error
msg
msg
error
msg__free_unpacked(msg, NULL);
msg__free_unpacked(msg, NULL)
msg__free_unpacked
msg__free_unpacked
msg
msg
NULL
NULL
return -1;
-1
1
msg__free_unpacked (msg, NULL);
msg__free_unpacked (msg, NULL)
msg__free_unpacked
msg__free_unpacked
msg
msg
NULL
NULL
return 0;
0
-----joern-----
(68,39,0)
(48,14,0)
(34,35,0)
(31,12,0)
(48,76,0)
(51,9,0)
(37,100,0)
(96,5,0)
(5,10,0)
(17,34,0)
(89,100,0)
(77,56,0)
(53,67,0)
(8,29,0)
(78,29,0)
(76,12,0)
(107,56,0)
(97,30,0)
(103,104,0)
(32,100,0)
(71,107,0)
(28,10,0)
(15,35,0)
(33,61,0)
(44,92,0)
(63,35,0)
(93,102,0)
(78,103,0)
(39,12,0)
(30,14,0)
(34,100,0)
(5,48,0)
(42,29,0)
(61,29,0)
(82,18,0)
(30,12,0)
(88,40,0)
(41,78,0)
(108,30,0)
(62,42,0)
(52,61,0)
(60,78,0)
(10,5,0)
(44,99,0)
(38,13,0)
(35,15,0)
(22,66,0)
(90,29,0)
(9,92,0)
(44,91,0)
(69,15,0)
(56,105,0)
(45,100,0)
(76,48,0)
(70,109,0)
(1,45,0)
(50,69,0)
(40,34,0)
(12,13,0)
(79,45,0)
(67,12,0)
(25,103,0)
(95,16,0)
(39,20,0)
(104,42,0)
(8,10,0)
(48,5,0)
(109,100,0)
(103,48,0)
(103,78,0)
(4,66,0)
(15,69,0)
(42,104,0)
(18,109,0)
(104,103,0)
(75,87,0)
(23,64,0)
(3,100,0)
(58,100,0)
(35,63,0)
(15,61,0)
(110,105,0)
(44,26,0)
(85,12,0)
(61,15,0)
(74,90,0)
(105,109,0)
(72,100,0)
(6,105,0)
(94,39,0)
(0,100,0)
(56,77,0)
(86,87,0)
(13,12,0)
(57,15,0)
(21,85,0)
(27,105,0)
(90,5,0)
(12,100,0)
(67,100,0)
(44,16,0)
(106,8,0)
(16,100,0)
(18,100,0)
(48,103,0)
(101,27,0)
(105,27,0)
(105,56,0)
(102,91,0)
(11,27,0)
(43,76,0)
(107,100,0)
(81,109,0)
(83,67,0)
(10,8,0)
(66,107,0)
(27,29,0)
(20,39,0)
(98,42,0)
(87,100,0)
(92,14,0)
(47,104,0)
(54,13,0)
(99,107,0)
(35,34,0)
(59,90,0)
(46,81,0)
(64,26,0)
(109,81,0)
(56,107,0)
(36,18,0)
(2,13,0)
(7,18,0)
(5,90,0)
(13,109,0)
(49,8,0)
(73,48,0)
(19,76,0)
(65,99,0)
(55,40,0)
(24,100,0)
(84,85,0)
(80,100,0)
(90,29,1)
(71,18,1)
(52,17,1)
(64,23,1)
(27,101,1)
(67,12,1)
(68,94,1)
(44,16,1)
(90,59,1)
(21,12,1)
(98,62,1)
(49,106,1)
(104,47,1)
(55,34,1)
(65,66,1)
(40,34,1)
(105,110,1)
(30,12,1)
(109,81,1)
(19,103,1)
(95,67,1)
(13,109,1)
(85,84,1)
(106,73,1)
(46,70,1)
(99,107,1)
(51,30,1)
(105,27,1)
(39,68,1)
(56,105,1)
(99,65,1)
(97,108,1)
(75,86,1)
(96,10,1)
(44,91,1)
(60,104,1)
(87,75,1)
(10,8,1)
(85,12,1)
(15,61,1)
(82,36,1)
(45,1,1)
(2,38,1)
(27,29,1)
(17,87,1)
(42,98,1)
(8,29,1)
(83,53,1)
(78,29,1)
(74,10,1)
(101,11,1)
(56,77,1)
(44,99,1)
(102,93,1)
(48,103,1)
(7,82,1)
(11,71,1)
(54,2,1)
(23,85,1)
(93,40,1)
(103,104,1)
(18,7,1)
(81,46,1)
(107,56,1)
(22,4,1)
(108,48,1)
(61,29,1)
(86,45,1)
(6,27,1)
(103,78,1)
(42,29,1)
(66,22,1)
(53,20,1)
(35,63,1)
(44,92,1)
(40,88,1)
(47,42,1)
(67,83,1)
(61,33,1)
(33,52,1)
(91,102,1)
(76,43,1)
(5,90,1)
(15,69,1)
(48,5,1)
(18,109,1)
(70,40,1)
(50,61,1)
(5,96,1)
(8,49,1)
(10,28,1)
(103,25,1)
(41,60,1)
(36,109,1)
(94,85,1)
(57,69,1)
(44,26,1)
(76,12,1)
(16,95,1)
(48,76,1)
(88,55,1)
(38,31,1)
(31,66,1)
(78,41,1)
(34,35,1)
(35,15,1)
(4,107,1)
(39,12,1)
(12,13,1)
(104,42,1)
(84,21,1)
(73,20,1)
(28,8,1)
(43,19,1)
(26,64,1)
(25,104,1)
(30,97,1)
(110,6,1)
(9,51,1)
(13,54,1)
(15,57,1)
(1,79,1)
(20,39,1)
(59,74,1)
(69,50,1)
(105,109,1)
(66,107,1)
(62,5,1)
(5,10,1)
(92,9,1)
(28,20,2)
(64,85,2)
(39,85,2)
(102,40,2)
(71,40,2)
(92,20,2)
(4,40,2)
(95,20,2)
(20,85,2)
(13,66,2)
(44,92,2)
(18,109,2)
(10,8,2)
(62,20,2)
(106,20,2)
(66,40,2)
(67,12,2)
(53,20,2)
(5,10,2)
(25,104,2)
(2,66,2)
(68,85,2)
(15,61,2)
(44,99,2)
(16,20,2)
(44,26,2)
(27,40,2)
(84,66,2)
(108,20,2)
(60,104,2)
(35,63,2)
(48,20,2)
(61,29,2)
(104,20,2)
(5,20,2)
(67,20,2)
(82,40,2)
(12,13,2)
(103,20,2)
(78,104,2)
(70,40,2)
(6,40,2)
(93,40,2)
(73,20,2)
(31,66,2)
(76,12,2)
(85,66,2)
(48,5,2)
(35,15,2)
(99,66,2)
(44,16,2)
(90,29,2)
(48,76,2)
(104,42,2)
(36,40,2)
(41,104,2)
(56,105,2)
(42,20,2)
(12,66,2)
(103,104,2)
(30,12,2)
(15,69,2)
(7,40,2)
(56,77,2)
(30,20,2)
(54,66,2)
(44,91,2)
(13,109,2)
(39,12,2)
(59,10,2)
(81,40,2)
(43,20,2)
(40,34,2)
(9,20,2)
(97,20,2)
(109,40,2)
(110,40,2)
(98,20,2)
(18,40,2)
(5,90,2)
(42,29,2)
(20,39,2)
(105,27,2)
(96,10,2)
(22,40,2)
(21,66,2)
(8,29,2)
(34,35,2)
(19,20,2)
(27,29,2)
(11,40,2)
(56,40,2)
(105,40,2)
(74,10,2)
(65,66,2)
(101,40,2)
(107,40,2)
(109,81,2)
(78,29,2)
(83,20,2)
(47,20,2)
(49,20,2)
(105,109,2)
(26,85,2)
(51,20,2)
(76,20,2)
(107,56,2)
(23,85,2)
(8,20,2)
(66,107,2)
(91,40,2)
(103,78,2)
(48,103,2)
(94,85,2)
(90,10,2)
(99,107,2)
(10,20,2)
(85,12,2)
(38,66,2)
(46,40,2)
-----------------------------------
(0,if (msg == NULL)
(1,0)
(2,size)
(3,msg)
(4,status)
(5,(host->node != NULL)
(6,buffer)
(7,size)
(8,host->node)
(9,-1)
(10,host->node != NULL)
(11,host)
(12,msg = msg__unpack (NULL, size, buffer)
(13,msg__unpack (NULL, size, buffer)
(14,)
(15,sread (host->s, &header, 4)
(16,return 0;)
(17,status)
(18,memset (buffer, 0, size)
(19,msg)
(20,!msg->ok)
(21,msg)
(22,0)
(23,1)
(24,size)
(25,RIEMANN_PORT)
(26,return -1;)
(27,host->s)
(28,NULL)
(29,struct riemann_host *host)
(30,msg__free_unpacked(msg, NULL)
(31,msg)
(32,if (status != 0)
(33,s)
(34,status = (int)
(35,(int)
(36,buffer)
(37,if (!msg->ok)
(38,NULL)
(39,msg->ok)
(40,status != 0)
(41,service)
(42,host->service)
(43,error)
(44,RET)
(45,status = 0)
(46,header)
(47,NULL)
(48,ERROR ("write_riemann plugin: Sending to Riemann at %s:%s acknowledgement message reported error: %s",\n\\n\\t\\t\\t\\t(host->node != NULL)
(49,node)
(50,header)
(51,1)
(52,host)
(53,msg)
(54,buffer)
(55,status)
(56,(int)
(57,4)
(58,buffer)
(59,node)
(60,host)
(61,host->s)
(62,host)
(63,int)
(64,-1)
(65,status)
(66,status != 0)
(67,msg__free_unpacked (msg, NULL)
(68,ok)
(69,&header)
(70,size)
(71,status)
(72,header)
(73,"write_riemann plugin: Sending to Riemann at %s:%s acknowledgement message reported error: %s")
(74,host)
(75,NULL)
(76,msg->error)
(77,int)
(78,host->service)
(79,status)
(80,if (status != 0)
(81,ntohl(header)
(82,0)
(83,NULL)
(84,NULL)
(85,msg == NULL)
(86,msg)
(87,*msg = NULL)
(88,0)
(89,status)
(90,host->node)
(91,return -1;)
(92,return -1;)
(93,1)
(94,msg)
(95,0)
(96,RIEMANN_HOST)
(97,NULL)
(98,service)
(99,return status;)
(100,)
(101,s)
(102,-1)
(103,(host->service != NULL)
(104,host->service != NULL)
(105,sread (host->s, buffer, size)
(106,host)
(107,status = (int)
(108,msg)
(109,size = ntohl(header)
(110,size)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^