-----label-----
0
-----code-----
static void goodG2B1()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
20,22
21,22
24,25
25,26
26,27
26,28
27,28
30,31
30,32
30,33
30,34
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
78,80
79,80
79,81
80,81
83,84
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,29,34,38,40,43,45,49,50,56,57,58,59,65,66,67,68,72,76,77,81,82,84
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
44,45
44,46
52,53
52,54
61,62
61,63
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(10,3,0)
(24,15,0)
(9,25,0)
(16,45,0)
(5,25,0)
(27,37,0)
(19,45,0)
(34,32,0)
(33,31,0)
(43,25,0)
(21,14,0)
(33,14,0)
(8,39,0)
(35,24,0)
(39,30,0)
(33,38,0)
(16,21,0)
(22,30,0)
(44,8,0)
(0,14,0)
(38,33,0)
(4,37,0)
(1,18,0)
(2,32,0)
(31,15,0)
(17,15,0)
(7,25,0)
(14,3,0)
(29,16,0)
(30,3,0)
(45,3,0)
(20,39,0)
(14,33,0)
(40,37,0)
(8,14,0)
(10,40,0)
(15,31,0)
(28,6,0)
(12,21,0)
(42,6,0)
(37,14,0)
(13,21,0)
(11,8,0)
(39,8,0)
(40,10,0)
(18,23,0)
(37,40,0)
(31,33,0)
(41,7,0)
(36,7,0)
(21,16,0)
(15,24,0)
(10,40,1)
(11,14,1)
(29,21,1)
(33,38,1)
(44,11,1)
(30,22,1)
(2,10,1)
(21,14,1)
(39,20,1)
(20,8,1)
(13,30,1)
(7,36,1)
(37,14,1)
(35,17,1)
(17,0,1)
(39,8,1)
(21,12,1)
(6,42,1)
(14,33,1)
(34,2,1)
(37,4,1)
(16,21,1)
(42,28,1)
(26,32,1)
(40,37,1)
(22,39,1)
(16,29,1)
(24,35,1)
(4,27,1)
(27,45,1)
(1,6,1)
(8,14,1)
(18,1,1)
(12,13,1)
(32,34,1)
(2,18,1)
(8,44,1)
(45,19,1)
(28,7,1)
(0,6,1)
(19,16,1)
(31,15,1)
(15,24,1)
(36,41,1)
(33,31,1)
(37,6,2)
(39,6,2)
(11,6,2)
(31,15,2)
(44,6,2)
(40,6,2)
(14,6,2)
(39,8,2)
(15,6,2)
(1,6,2)
(29,6,2)
(8,6,2)
(24,6,2)
(33,38,2)
(40,37,2)
(45,6,2)
(15,24,2)
(35,6,2)
(10,40,2)
(21,6,2)
(31,6,2)
(13,6,2)
(8,14,2)
(27,6,2)
(18,6,2)
(33,31,2)
(12,6,2)
(16,21,2)
(19,6,2)
(16,6,2)
(22,6,2)
(20,6,2)
(17,6,2)
(4,6,2)
(30,6,2)
(10,6,2)
(14,33,2)
(37,14,2)
(21,14,2)
(0,6,2)
(33,6,2)
-----------------------------------
(0,data)
(1,"Benign, fixed string")
(2,GLOBAL_CONST_FIVE)
(3,)
(4,0)
(5,if(GLOBAL_CONST_FIVE!=5)
(6,GLOBAL_CONST_FIVE!=5)
(7,data = NULL)
(8,data[0])
(9,if(GLOBAL_CONST_FIVE==5)
(10,printStructLine(&data[0])
(11,data)
(12,0)
(13,data)
(14,data = (twoIntsStruct *)
(15,100*sizeof(twoIntsStruct)
(16,data[0].intTwo)
(17,100)
(18,printLine("Benign, fixed string")
(19,0)
(20,intOne)
(21,data[0])
(22,0)
(23,)
(24,sizeof(twoIntsStruct)
(25,)
(26,RET)
(27,data)
(28,GLOBAL_CONST_FIVE)
(29,intTwo)
(30,data[0].intOne = 0)
(31,ALLOCA(100*sizeof(twoIntsStruct)
(32,GLOBAL_CONST_FIVE==5)
(33,(twoIntsStruct *)
(34,5)
(35,twoIntsStruct)
(36,NULL)
(37,data[0])
(38,twoIntsStruct *)
(39,data[0].intOne)
(40,&data[0])
(41,data)
(42,5)
(43,data)
(44,0)
(45,data[0].intTwo = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^