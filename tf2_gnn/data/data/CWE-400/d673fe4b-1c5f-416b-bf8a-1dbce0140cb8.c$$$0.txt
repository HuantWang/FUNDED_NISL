-----label-----
0
-----code-----
static int ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies)
{
	int res;
	int status;
	char tech[256];
	char *location;
	const char *macrocontext, *macroexten;
	enum ast_device_state newstate;

	/* on entry here, we know that tmp->chan == NULL */
	if (tmp->member->paused) {
		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||
		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {
		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",
				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	if (!tmp->member->ringinuse) {
		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {
			newstate = ast_device_state(tmp->member->interface);
			if (newstate != tmp->member->status) {
				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",
					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));
				ast_devstate_changed_literal(newstate, tmp->member->interface);
			}
		}
		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {
			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);
			tmp->stillgoing = 0;
			(*busies)++;
			return 0;
		}
	}

	if (use_weight && compare_weight(qe->parent,tmp->member)) {
		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	ast_copy_string(tech, tmp->interface, sizeof(tech));
	if ((location = strchr(tech, '/'))) {
		*location++ = '\0';
	} else {
		location = "";
	}

	/* Request the peer */
	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);
	if (!tmp->chan) {			/* If we can't, just go on to the next call */
		if (ast_channel_cdr(qe->chan)) {
			ast_cdr_busy(ast_channel_cdr(qe->chan));
		}
		tmp->stillgoing = 0;

		ao2_lock(qe->parent);
		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
		qe->parent->rrpos++;
		qe->linpos++;
		ao2_unlock(qe->parent);

		(*busies)++;
		return 0;
	}

	ast_channel_lock_both(tmp->chan, qe->chan);

	if (qe->cancel_answered_elsewhere) {
		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);
	}
	ast_channel_appl_set(tmp->chan, "AppQueue");
	ast_channel_data_set(tmp->chan, "(Outgoing Line)");
	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));

	/* If the new channel has no callerid, try to guess what it should be */
	if (!ast_channel_caller(tmp->chan)->id.number.valid) {
		if (ast_channel_connected(qe->chan)->id.number.valid) {
			struct ast_party_caller caller;

			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));
			caller.id = ast_channel_connected(qe->chan)->id;
			caller.ani = ast_channel_connected(qe->chan)->ani;
			ast_channel_set_caller_event(tmp->chan, &caller, NULL);
		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {
			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);
		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {
			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 
		}
		tmp->dial_callerid_absent = 1;
	}

	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));

	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;

	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));

	/* Inherit specially named variables from parent channel */
	ast_channel_inherit_variables(qe->chan, tmp->chan);
	ast_channel_datastore_inherit(qe->chan, tmp->chan);

	/* Presense of ADSI CPE on outgoing channel follows ours */
	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));

	/* Inherit context and extension */
	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");
	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);
	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");
	if (!ast_strlen_zero(macroexten)) {
		ast_channel_exten_set(tmp->chan, macroexten);
	} else {
		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));
	}
	if (ast_cdr_isset_unanswered()) {
		/* they want to see the unanswered dial attempts! */
		/* set up the CDR fields on all the CDRs to give sensical information */
		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));
		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);
		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);
		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);
		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));
		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));
		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);
		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);
		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;
		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);
		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);
	}

	ast_channel_unlock(tmp->chan);
	ast_channel_unlock(qe->chan);

	/* Place the call, but don't wait on the answer */
	if ((res = ast_call(tmp->chan, location, 0))) {
		/* Again, keep going even if there's an error */
		ast_verb(3, "Couldn't call %s\n", tmp->interface);
		do_hang(tmp);
		(*busies)++;
		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
		return 0;
	} else if (qe->parent->eventwhencalled) {
		char vars[2048];

		ast_channel_lock_both(tmp->chan, qe->chan);

		/*** DOCUMENTATION
		<managerEventInstance>
			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>
			<syntax>
				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />
				<parameter name="AgentCalled">
					<para>The agent's technology or location.</para>
				</parameter>
				<parameter name="AgentName">
					<para>The name of the agent.</para>
				</parameter>
				<parameter name="Variable" required="no" multiple="yes">
					<para>Optional channel variables from the ChannelCalling channel</para>
				</parameter>
			</syntax>
			<see-also>
				<ref type="managerEvent">AgentRingNoAnswer</ref>
				<ref type="managerEvent">AgentComplete</ref>
				<ref type="managerEvent">AgentConnect</ref>
			</see-also>
		</managerEventInstance>
		***/
		manager_event(EVENT_FLAG_AGENT, "AgentCalled",
			"Queue: %s\r\n"
			"AgentCalled: %s\r\n"
			"AgentName: %s\r\n"
			"ChannelCalling: %s\r\n"
			"DestinationChannel: %s\r\n"
			"CallerIDNum: %s\r\n"
			"CallerIDName: %s\r\n"
			"ConnectedLineNum: %s\r\n"
			"ConnectedLineName: %s\r\n"
			"Context: %s\r\n"
			"Extension: %s\r\n"
			"Priority: %d\r\n"
			"Uniqueid: %s\r\n"
			"%s",
			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),
			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),
			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),
			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),
			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),
			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),
			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");

		ast_channel_unlock(tmp->chan);
		ast_channel_unlock(qe->chan);

		ast_verb(3, "Called %s\n", tmp->interface);
	}

	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
22,38
22,39
22,40
22,41
22,42
22,43
22,44
22,45
22,46
22,47
22,48
22,49
22,50
22,51
22,52
22,53
22,54
22,55
22,56
22,57
22,58
23,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
40,41
41,42
41,43
43,44
43,45
46,47
47,48
47,49
47,50
49,50
49,51
52,53
52,54
55,56
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
63,65
64,65
68,69
68,70
68,71
68,72
69,70
70,71
70,72
70,73
70,74
71,72
75,76
75,77
76,77
79,80
80,81
80,82
81,82
81,83
82,83
86,87
87,88
88,89
89,90
90,91
92,93
94,95
94,96
95,96
95,97
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
104,106
105,106
109,110
110,111
110,112
111,112
111,113
112,113
112,114
113,114
115,116
117,118
117,119
118,119
121,122
121,123
122,123
122,124
123,124
127,128
128,129
128,130
129,130
129,131
130,131
131,132
131,133
132,133
135,136
135,137
136,137
136,138
137,138
141,142
142,143
142,144
143,144
143,145
144,145
144,146
145,146
147,148
149,150
149,151
150,151
153,154
153,155
154,155
154,156
155,156
159,160
159,161
159,162
159,163
160,161
161,162
161,163
161,164
161,165
161,166
162,163
166,167
167,168
167,169
167,170
168,169
168,170
169,170
172,173
172,174
173,174
173,175
174,175
178,179
178,180
179,180
179,181
180,181
184,185
184,186
185,186
188,189
189,190
189,191
190,191
190,192
191,192
195,196
196,197
197,198
198,199
199,200
201,202
203,204
203,205
204,205
205,206
205,207
206,207
206,208
207,208
211,212
211,213
212,213
212,214
213,214
213,215
214,215
216,217
217,218
217,219
218,219
218,220
219,220
219,221
220,221
224,225
226,227
226,228
227,228
228,229
228,230
229,230
231,232
231,233
232,233
234,235
234,236
235,236
235,237
236,237
240,241
240,242
241,242
241,243
242,243
244,245
244,246
245,246
245,247
246,247
250,251
250,252
251,252
252,253
252,254
252,255
252,256
252,257
252,258
253,254
255,256
258,259
258,260
259,260
259,261
260,261
264,265
264,266
265,266
267,268
267,269
268,269
268,270
269,270
273,274
273,275
274,275
276,277
278,279
279,280
279,281
279,282
280,281
282,283
284,285
284,286
285,286
285,287
286,287
290,291
290,292
291,292
291,293
292,293
293,294
293,295
294,295
294,296
295,296
295,297
296,297
300,301
302,303
303,304
303,305
304,305
304,306
305,306
305,307
306,307
310,311
312,313
312,314
312,315
312,316
313,314
314,315
314,316
314,317
314,318
315,316
319,320
319,321
320,321
323,324
324,325
324,326
325,326
325,327
326,327
330,331
331,332
332,333
333,334
334,335
336,337
338,339
338,340
339,340
339,341
340,341
342,343
342,344
342,345
343,344
345,346
345,347
346,347
349,350
349,351
350,351
353,354
353,355
353,356
353,357
354,355
355,356
355,357
355,358
355,359
355,360
356,357
360,361
360,362
361,362
361,363
362,363
366,367
366,368
367,368
370,371
371,372
371,373
372,373
372,374
373,374
377,378
378,379
379,380
380,381
381,382
383,384
385,386
386,387
386,388
386,389
386,390
387,388
389,390
391,392
391,393
392,393
395,396
396,397
397,398
399,400
399,401
399,402
400,401
401,402
401,403
402,403
404,405
404,406
404,407
405,406
407,408
410,411
411,412
412,413
412,414
413,414
414,415
415,416
418,419
419,420
420,421
420,422
421,422
424,425
425,426
425,427
426,427
426,428
427,428
430,431
430,432
430,433
430,434
430,435
430,436
431,432
433,434
435,436
435,437
436,437
438,439
438,440
439,440
442,443
442,444
443,444
446,447
448,449
449,450
451,452
451,453
452,453
453,454
453,455
454,455
457,458
457,459
457,460
457,461
457,462
457,463
457,464
457,465
457,466
458,459
458,460
459,460
459,461
460,461
462,463
462,464
463,464
466,467
467,468
468,469
468,470
469,470
471,472
471,473
472,473
474,475
474,476
475,476
478,479
479,480
479,481
480,481
480,482
481,482
485,486
486,487
486,488
487,488
489,490
489,491
490,491
493,494
494,495
494,496
494,497
494,498
495,496
497,498
497,499
498,499
501,502
501,503
502,503
505,506
505,507
506,507
508,509
508,510
509,510
512,513
513,514
514,515
514,516
515,516
515,517
516,517
520,521
521,522
522,523
522,524
523,524
526,527
527,528
527,529
528,529
530,531
530,532
531,532
534,535
535,536
536,537
537,538
538,539
540,541
542,543
543,544
543,545
543,546
544,545
546,547
546,548
547,548
550,551
550,552
551,552
554,555
554,556
555,556
555,557
556,557
559,560
560,561
561,562
561,563
561,564
562,563
564,565
564,566
565,566
568,569
570,571
571,572
571,573
571,574
572,573
574,575
574,576
575,576
579,580
580,581
580,582
580,583
581,582
583,584
583,585
584,585
588,589
589,590
589,591
589,592
589,593
590,591
592,593
592,594
593,594
595,596
595,597
596,597
600,601
601,602
602,603
603,604
603,605
604,605
606,607
606,608
607,608
610,611
610,612
611,612
612,613
612,614
613,614
613,615
614,615
614,616
615,616
615,617
616,617
618,619
618,620
619,620
625,626
625,627
626,627
626,628
626,629
627,628
627,629
628,629
628,630
629,630
629,631
630,631
630,632
631,632
633,634
633,635
634,635
640,641
640,642
640,643
640,644
640,645
641,642
642,643
642,644
643,644
645,646
647,648
648,649
648,650
648,651
649,650
651,652
652,653
654,655
654,656
655,656
657,658
657,659
658,659
661,662
662,663
662,664
663,664
663,665
664,665
667,668
667,669
668,669
668,670
669,670
671,672
671,673
672,673
676,677
677,678
677,679
678,679
678,680
679,680
682,683
682,684
683,684
683,685
684,685
686,687
686,688
687,688
691,692
692,693
692,694
692,695
692,696
693,694
695,696
695,697
696,697
699,700
700,701
702,703
704,705
704,706
704,707
705,706
706,707
706,708
707,708
709,710
709,711
710,711
710,712
711,712
711,713
712,713
714,715
714,716
715,716
720,721
721,722
722,723
722,724
722,725
722,726
722,727
723,724
725,726
725,727
726,727
729,730
729,731
730,731
730,732
731,732
731,733
732,733
734,735
734,736
735,736
740,741
742,743
744,745
744,746
745,746
746,747
746,748
747,748
749,750
749,751
749,752
750,751
752,753
752,754
753,754
755,756
755,757
756,757
759,760
759,761
760,761
762,763
762,764
763,764
766,767
767,768
768,769
768,770
768,771
768,772
768,773
769,770
771,772
771,773
772,773
775,776
775,777
775,778
776,777
778,779
778,780
779,780
781,782
781,783
782,783
785,786
785,787
786,787
788,789
788,790
789,790
792,793
794,795
796,797
797,798
797,799
798,799
798,800
799,800
803,804
804,805
804,806
804,807
805,806
807,808
807,809
808,809
810,811
810,812
811,812
814,815
814,816
815,816
817,818
817,819
818,819
821,822
822,823
822,824
823,824
823,825
824,825
824,826
825,826
827,828
827,829
828,829
832,833
832,834
833,834
833,835
834,835
836,837
836,838
837,838
841,842
842,843
842,844
842,845
843,844
845,846
845,847
846,847
848,849
848,850
849,850
852,853
852,854
853,854
855,856
855,857
856,857
859,860
860,861
860,862
860,863
861,862
863,864
863,865
864,865
867,868
867,869
868,869
871,872
872,873
872,874
872,875
873,874
875,876
875,877
876,877
879,880
879,881
880,881
883,884
884,885
884,886
884,887
885,886
887,888
887,889
888,889
891,892
891,893
892,893
894,895
894,896
895,896
898,899
899,900
899,901
900,901
902,903
902,904
902,905
903,904
905,906
905,907
906,907
910,911
911,912
911,913
911,914
912,913
914,915
914,916
915,916
918,919
918,920
918,921
919,920
919,921
920,921
922,923
924,925
924,926
925,926
927,928
927,929
928,929
931,932
933,934
934,935
934,936
935,936
937,938
937,939
937,940
938,939
940,941
940,942
941,942
945,946
945,947
945,948
946,947
947,948
947,949
948,949
950,951
952,953
953,954
954,955
954,956
954,957
955,956
957,958
957,959
958,959
961,962
963,964
964,965
965,966
965,967
965,968
966,967
968,969
968,970
969,970
972,973
972,974
973,974
975,976
975,977
976,977
979,980
979,981
980,981
981,982
983,984
983,985
983,986
983,987
983,988
983,989
983,990
983,991
983,992
983,993
983,994
984,985
985,986
985,987
985,988
986,987
988,989
988,990
989,990
991,992
991,993
992,993
995,996
995,997
996,997
998,999
998,1000
999,1000
1002,1003
1003,1004
1003,1005
1003,1006
1004,1005
1006,1007
1006,1008
1007,1008
1007,1009
1008,1009
1010,1011
1010,1012
1011,1012
1015,1016
1015,1017
1016,1017
1016,1018
1017,1018
1019,1020
1019,1021
1020,1021
1024,1025
1025,1026
1025,1027
1025,1028
1026,1027
1028,1029
1028,1030
1029,1030
1029,1031
1030,1031
1032,1033
1032,1034
1033,1034
1037,1038
1037,1039
1038,1039
1038,1040
1039,1040
1041,1042
1041,1043
1042,1043
1046,1047
1047,1048
1047,1049
1047,1050
1048,1049
1050,1051
1050,1052
1051,1052
1051,1053
1052,1053
1054,1055
1054,1056
1055,1056
1059,1060
1059,1061
1060,1061
1060,1062
1061,1062
1063,1064
1063,1065
1064,1065
1068,1069
1069,1070
1069,1071
1069,1072
1070,1071
1072,1073
1072,1074
1073,1074
1073,1075
1074,1075
1076,1077
1076,1078
1077,1078
1081,1082
1081,1083
1082,1083
1084,1085
1084,1086
1085,1086
1088,1089
1089,1090
1089,1091
1089,1092
1090,1091
1092,1093
1092,1094
1093,1094
1093,1095
1094,1095
1096,1097
1096,1098
1097,1098
1101,1102
1101,1103
1102,1103
1104,1105
1104,1106
1105,1106
1108,1109
1109,1110
1109,1111
1109,1112
1110,1111
1112,1113
1112,1114
1113,1114
1113,1115
1114,1115
1116,1117
1116,1118
1117,1118
1121,1122
1121,1123
1122,1123
1122,1124
1123,1124
1125,1126
1125,1127
1126,1127
1130,1131
1131,1132
1131,1133
1131,1134
1132,1133
1134,1135
1134,1136
1135,1136
1135,1137
1136,1137
1138,1139
1138,1140
1139,1140
1143,1144
1143,1145
1144,1145
1144,1146
1145,1146
1147,1148
1147,1149
1148,1149
1152,1153
1153,1154
1153,1155
1154,1155
1154,1156
1155,1156
1155,1157
1156,1157
1158,1159
1158,1160
1159,1160
1163,1164
1163,1165
1164,1165
1164,1166
1165,1166
1167,1168
1167,1169
1168,1169
1172,1173
1173,1174
1173,1175
1173,1176
1174,1175
1176,1177
1176,1178
1177,1178
1177,1179
1178,1179
1180,1181
1180,1182
1181,1182
1185,1186
1185,1187
1186,1187
1186,1188
1187,1188
1189,1190
1189,1191
1190,1191
1194,1195
1195,1196
1195,1197
1195,1198
1196,1197
1198,1199
1198,1200
1199,1200
1199,1201
1200,1201
1202,1203
1202,1204
1203,1204
1207,1208
1207,1209
1208,1209
1208,1210
1209,1210
1211,1212
1211,1213
1212,1213
1216,1217
1217,1218
1217,1219
1218,1219
1220,1221
1220,1222
1221,1222
1224,1225
1225,1226
1225,1227
1226,1227
1228,1229
1228,1230
1229,1230
1232,1233
1232,1234
1232,1235
1233,1234
1234,1235
1234,1236
1235,1236
1237,1238
1237,1239
1237,1240
1237,1241
1238,1239
1240,1241
1240,1242
1241,1242
1244,1245
1247,1248
1247,1249
1247,1250
1247,1251
1247,1252
1248,1249
1249,1250
1249,1251
1249,1252
1249,1253
1250,1251
1254,1255
1254,1256
1255,1256
1258,1259
1259,1260
1259,1261
1260,1261
1262,1263
1264,1265
1265,1266
1266,1267
1267,1268
1268,1269
1270,1271
1271,1272
1271,1273
1271,1274
1271,1275
1272,1273
1274,1275
1274,1276
1275,1276
1278,1279
1278,1280
1279,1280
1282,1283
1282,1284
1283,1284
1285,1286
1285,1287
1286,1287
1289,1290
1291,1292
1291,1293
1292,1293
1292,1294
1293,1294
1293,1295
1294,1295
1298,1299
1298,1300
1298,1301
1298,1302
1298,1303
1298,1304
1299,1300
1300,1301
1300,1302
1302,1303
1302,1304
1304,1305
1306,1307
1307,1308
1307,1309
1307,1310
1308,1309
1310,1311
1310,1312
1311,1312
1314,1315
1314,1316
1315,1316
1318,1319
1319,1320
1319,1321
1319,1322
1319,1323
1319,1324
1319,1325
1319,1326
1319,1327
1319,1328
1319,1329
1319,1330
1319,1331
1319,1332
1319,1333
1319,1334
1319,1335
1319,1336
1319,1337
1320,1321
1322,1323
1326,1327
1326,1328
1327,1328
1327,1329
1328,1329
1332,1333
1332,1334
1333,1334
1336,1337
1336,1338
1337,1338
1337,1339
1338,1339
1342,1343
1342,1344
1343,1344
1345,1346
1345,1347
1346,1347
1349,1350
1349,1351
1350,1351
1352,1353
1352,1354
1353,1354
1356,1357
1356,1358
1356,1359
1356,1360
1357,1358
1359,1360
1359,1361
1360,1361
1360,1362
1361,1362
1361,1363
1362,1363
1362,1364
1363,1364
1365,1366
1365,1367
1366,1367
1372,1373
1372,1374
1373,1374
1373,1375
1374,1375
1374,1376
1375,1376
1375,1377
1376,1377
1378,1379
1378,1380
1379,1380
1386,1387
1386,1388
1386,1389
1386,1390
1387,1388
1389,1390
1389,1391
1390,1391
1390,1392
1391,1392
1391,1393
1392,1393
1392,1394
1393,1394
1395,1396
1395,1397
1396,1397
1402,1403
1402,1404
1403,1404
1403,1405
1404,1405
1404,1406
1405,1406
1405,1407
1406,1407
1408,1409
1408,1410
1409,1410
1416,1417
1416,1418
1416,1419
1416,1420
1417,1418
1419,1420
1419,1421
1420,1421
1420,1422
1421,1422
1421,1423
1422,1423
1422,1424
1423,1424
1425,1426
1425,1427
1426,1427
1432,1433
1432,1434
1433,1434
1433,1435
1434,1435
1434,1436
1435,1436
1435,1437
1436,1437
1438,1439
1438,1440
1439,1440
1446,1447
1446,1448
1446,1449
1446,1450
1447,1448
1449,1450
1449,1451
1450,1451
1450,1452
1451,1452
1451,1453
1452,1453
1452,1454
1453,1454
1455,1456
1455,1457
1456,1457
1462,1463
1462,1464
1463,1464
1463,1465
1464,1465
1464,1466
1465,1466
1465,1467
1466,1467
1468,1469
1468,1470
1469,1470
1476,1477
1476,1478
1477,1478
1479,1480
1479,1481
1480,1481
1483,1484
1483,1485
1484,1485
1486,1487
1486,1488
1487,1488
1490,1491
1490,1492
1491,1492
1493,1494
1493,1495
1494,1495
1497,1498
1497,1499
1498,1499
1500,1501
1500,1502
1501,1502
1504,1505
1504,1506
1504,1507
1505,1506
1505,1507
1506,1507
1506,1508
1507,1508
1507,1509
1508,1509
1512,1513
1514,1515
1514,1516
1514,1517
1514,1518
1515,1516
1517,1518
1517,1519
1518,1519
1521,1522
1523,1524
1524,1525
1525,1526
1528,1529
1529,1530
1529,1531
1530,1531
1532,1533
1532,1534
1533,1534
1536,1537
1537,1538
1537,1539
1538,1539
1540,1541
1540,1542
1541,1542
1544,1545
1545,1546
1545,1547
1545,1548
1545,1549
1546,1547
1550,1551
1550,1552
1551,1552
1554,1555
1555,1556
1555,1557
1555,1558
1555,1559
1556,1557
1558,1559
1558,1560
1559,1560
1562,1563
1562,1564
1563,1564
1566,1567
1566,1568
1567,1568
1569,1570
1569,1571
1570,1571
1573,1574
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,21,25,27,30,32,35,37,39,42,44,45,48,50,51,53,54,58,60,65,66,67,72,73,74,77,78,83,84,85,91,93,101,102,106,107,108,114,116,119,120,124,125,126,133,134,138,139,140,146,148,151,152,156,157,158,163,164,165,170,171,175,176,177,181,182,183,186,187,192,193,194,200,202,208,209,210,215,221,222,223,225,230,233,237,238,239,243,247,248,249,254,256,257,261,262,263,266,270,271,272,275,277,281,283,287,288,289,297,298,299,301,307,308,309,311,316,317,318,321,322,327,328,329,335,337,341,344,347,348,351,352,357,358,359,363,364,365,368,369,374,375,376,382,384,388,390,393,394,398,403,406,408,409,416,417,422,423,428,429,432,434,437,440,441,444,445,447,450,455,456,461,464,465,470,473,476,477,482,483,484,488,491,492,496,499,500,503,504,507,510,511,517,518,519,524,525,529,532,533,539,541,545,548,549,552,553,557,558,563,566,567,569,573,576,577,578,582,585,586,587,591,594,597,598,599,605,608,609,617,620,621,622,623,624,632,635,636,637,638,639,644,646,650,653,656,659,660,665,666,670,673,674,675,680,681,685,688,689,690,694,697,698,701,703,708,713,716,717,718,719,724,727,728,733,736,737,738,739,741,743,748,751,754,757,758,761,764,765,770,773,774,777,780,783,784,787,790,791,793,795,800,801,802,806,809,812,813,816,819,820,826,829,830,831,835,838,839,840,844,847,850,851,854,857,858,862,865,866,869,870,874,877,878,881,882,886,889,890,893,896,897,901,904,907,908,909,913,916,917,921,923,926,929,930,932,936,939,942,943,944,949,951,956,959,960,962,967,970,971,974,977,978,982,987,990,993,994,997,1000,1001,1005,1009,1012,1013,1014,1018,1021,1022,1023,1027,1031,1034,1035,1036,1040,1043,1044,1045,1049,1053,1056,1057,1058,1062,1065,1066,1067,1071,1075,1078,1079,1080,1083,1086,1087,1091,1095,1098,1099,1100,1103,1106,1107,1111,1115,1118,1119,1120,1124,1127,1128,1129,1133,1137,1140,1141,1142,1146,1149,1150,1151,1157,1160,1161,1162,1166,1169,1170,1171,1175,1179,1182,1183,1184,1188,1191,1192,1193,1197,1201,1204,1205,1206,1210,1213,1214,1215,1219,1222,1223,1227,1230,1231,1236,1239,1242,1243,1245,1246,1251,1252,1253,1256,1257,1261,1263,1269,1273,1276,1277,1280,1281,1284,1287,1288,1290,1295,1296,1297,1301,1303,1305,1309,1312,1313,1316,1317,1321,1323,1324,1325,1329,1330,1331,1334,1335,1339,1340,1341,1344,1347,1348,1351,1354,1355,1358,1364,1367,1368,1369,1370,1371,1377,1380,1381,1382,1383,1384,1385,1388,1394,1397,1398,1399,1400,1401,1407,1410,1411,1412,1413,1414,1415,1418,1424,1427,1428,1429,1430,1431,1437,1440,1441,1442,1443,1444,1445,1448,1454,1457,1458,1459,1460,1461,1467,1470,1471,1472,1473,1474,1475,1478,1481,1482,1485,1488,1489,1492,1495,1496,1499,1502,1503,1509,1510,1511,1513,1516,1519,1520,1522,1526,1527,1531,1534,1535,1539,1542,1543,1547,1548,1549,1552,1553,1557,1560,1561,1564,1565,1568,1571,1572,1574
-----computeFrom-----
80,81
80,82
95,96
95,97
97,98
97,99
98,99
98,100
110,111
110,112
111,112
111,113
128,129
128,130
129,130
129,131
142,143
142,144
143,144
143,145
189,190
189,191
213,214
213,215
217,218
217,219
228,229
228,230
241,242
241,243
291,292
291,293
293,294
293,295
303,304
303,305
324,325
324,326
339,340
339,341
371,372
371,373
401,402
401,403
412,413
412,414
420,421
420,422
425,426
425,427
479,480
479,481
662,663
662,664
677,678
677,679
797,798
797,799
822,823
822,824
899,900
899,901
934,935
934,936
1153,1154
1153,1155
1234,1235
1234,1236
1505,1506
1505,1507
-----guardedBy-----
157,182
156,181
134,176
151,192
221,287
222,288
223,272
243,283
247,287
248,288
249,272
307,327
348,364
347,363
351,374
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;IfStatement;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ConditionalExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies){	int res;	int status;	char tech[256];	char *location;	const char *macrocontext, *macroexten;	enum ast_device_state newstate;	/* on entry here, we know that tmp->chan == NULL */	if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}	if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	ast_copy_string(tech, tmp->interface, sizeof(tech));	if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}	/* Request the peer */	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);	if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}	ast_channel_lock_both(tmp->chan, qe->chan);	if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}	ast_channel_appl_set(tmp->chan, "AppQueue");	ast_channel_data_set(tmp->chan, "(Outgoing Line)");	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));	/* If the new channel has no callerid, try to guess what it should be */	if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));	/* Inherit specially named variables from parent channel */	ast_channel_inherit_variables(qe->chan, tmp->chan);	ast_channel_datastore_inherit(qe->chan, tmp->chan);	/* Presense of ADSI CPE on outgoing channel follows ours */	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));	/* Inherit context and extension */	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");	if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}	if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}	ast_channel_unlock(tmp->chan);	ast_channel_unlock(qe->chan);	/* Place the call, but don't wait on the answer */	if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));	return 1;}
static int
ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies)
ring_entry
struct queue_ent *qe
struct queue_ent
queue_ent
*qe
*
qe
struct callattempt *tmp
struct callattempt
callattempt
*tmp
*
tmp
int *busies
int
*busies
*
busies
{	int res;	int status;	char tech[256];	char *location;	const char *macrocontext, *macroexten;	enum ast_device_state newstate;	/* on entry here, we know that tmp->chan == NULL */	if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}	if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	ast_copy_string(tech, tmp->interface, sizeof(tech));	if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}	/* Request the peer */	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);	if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}	ast_channel_lock_both(tmp->chan, qe->chan);	if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}	ast_channel_appl_set(tmp->chan, "AppQueue");	ast_channel_data_set(tmp->chan, "(Outgoing Line)");	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));	/* If the new channel has no callerid, try to guess what it should be */	if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));	/* Inherit specially named variables from parent channel */	ast_channel_inherit_variables(qe->chan, tmp->chan);	ast_channel_datastore_inherit(qe->chan, tmp->chan);	/* Presense of ADSI CPE on outgoing channel follows ours */	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));	/* Inherit context and extension */	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");	if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}	if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}	ast_channel_unlock(tmp->chan);	ast_channel_unlock(qe->chan);	/* Place the call, but don't wait on the answer */	if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));	return 1;}
int res;
int res;
int
res
res
int status;
int status;
int
status
status
char tech[256];
char tech[256];
char
tech[256]
tech
[256]
256
char *location;
char *location;
char
*location
*
location
const char *macrocontext, *macroexten;
const char *macrocontext, *macroexten;
const char
*macrocontext
*
macrocontext
*macroexten
*
macroexten
enum ast_device_state newstate;
enum ast_device_state newstate;
enum ast_device_state
ast_device_state
newstate
newstate
if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
tmp->member->paused
tmp->member
tmp
tmp
member
paused
{		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "%s paused, can't receive call\n", tmp->interface);
ast_debug(1, "%s paused, can't receive call\n", tmp->interface)
ast_debug
ast_debug
1
"%s paused, can't receive call\n"
tmp->interface
tmp
tmp
interface
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))
(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime))
tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)
tmp->lastqueue && tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
wrapuptime
(time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)
time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime
time(NULL) - tmp->lastcall
time(NULL)
time
time
NULL
NULL
tmp->lastcall
tmp
tmp
lastcall
tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
wrapuptime
(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))
!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime)
!tmp->lastqueue && qe->parent->wrapuptime
!tmp->lastqueue
tmp->lastqueue
tmp
tmp
lastqueue
qe->parent->wrapuptime
qe->parent
qe
qe
parent
wrapuptime
(time(NULL) - tmp->lastcall < qe->parent->wrapuptime)
time(NULL) - tmp->lastcall < qe->parent->wrapuptime
time(NULL) - tmp->lastcall
time(NULL)
time
time
NULL
NULL
tmp->lastcall
tmp
tmp
lastcall
qe->parent->wrapuptime
qe->parent
qe
qe
parent
wrapuptime
{		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);
ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface)
ast_debug
ast_debug
1
"Wrapuptime not yet expired on queue %s for %s\n"
(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name
tmp->lastqueue
tmp
tmp
lastqueue
tmp->lastqueue->name
tmp->lastqueue
tmp
tmp
lastqueue
name
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}
!tmp->member->ringinuse
tmp->member->ringinuse
tmp->member
tmp
tmp
member
ringinuse
{		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}
if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}
check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
check_state_unknown
check_state_unknown
(tmp->member->status == AST_DEVICE_UNKNOWN)
tmp->member->status == AST_DEVICE_UNKNOWN
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_UNKNOWN
AST_DEVICE_UNKNOWN
{			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}
newstate = ast_device_state(tmp->member->interface);
newstate = ast_device_state(tmp->member->interface)
newstate
newstate
ast_device_state(tmp->member->interface)
ast_device_state
ast_device_state
tmp->member->interface
tmp->member
tmp
tmp
member
interface
if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}
newstate != tmp->member->status
newstate
newstate
tmp->member->status
tmp->member
tmp
tmp
member
status
{				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}
ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));
ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Found a channel matching iterface %s while status was %s changed to %s\n"
tmp->member->interface
tmp->member
tmp
tmp
member
interface
ast_devstate2str(tmp->member->status)
ast_devstate2str
ast_devstate2str
tmp->member->status
tmp->member
tmp
tmp
member
status
ast_devstate2str(newstate)
ast_devstate2str
ast_devstate2str
newstate
newstate
ast_devstate_changed_literal(newstate, tmp->member->interface);
ast_devstate_changed_literal(newstate, tmp->member->interface)
ast_devstate_changed_literal
ast_devstate_changed_literal
newstate
newstate
tmp->member->interface
tmp->member
tmp
tmp
member
interface
if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}
(tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)
(tmp->member->status != AST_DEVICE_NOT_INUSE)
tmp->member->status != AST_DEVICE_NOT_INUSE
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_NOT_INUSE
AST_DEVICE_NOT_INUSE
(tmp->member->status != AST_DEVICE_UNKNOWN)
tmp->member->status != AST_DEVICE_UNKNOWN
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_UNKNOWN
AST_DEVICE_UNKNOWN
{			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}
ast_debug(1, "%s in use, can't receive call\n", tmp->interface);
ast_debug(1, "%s in use, can't receive call\n", tmp->interface)
ast_debug
ast_debug
1
"%s in use, can't receive call\n"
tmp->interface
tmp
tmp
interface
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
use_weight && compare_weight(qe->parent,tmp->member)
use_weight
use_weight
compare_weight(qe->parent,tmp->member)
compare_weight
compare_weight
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
{		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);
ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface)
ast_debug
ast_debug
1
"Priority queue delaying call to %s:%s\n"
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
ast_copy_string(tech, tmp->interface, sizeof(tech));
ast_copy_string(tech, tmp->interface, sizeof(tech))
ast_copy_string
ast_copy_string
tech
tech
tmp->interface
tmp
tmp
interface
sizeof(tech)
(tech)
tech
tech
if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}
(location = strchr(tech, '/'))
location = strchr(tech, '/')
location
location
strchr(tech, '/')
strchr
strchr
tech
tech
'/'
{		*location++ = '\0';	}
*location++ = '\0';
*location++ = '\0'
*location++
location++
location
location
'\0'
{		location = "";	}
location = "";
location = ""
location
location
""
tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);
tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status)
tmp->chan
tmp
tmp
chan
ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status)
ast_request
ast_request
tech
tech
ast_channel_nativeformats(qe->chan)
ast_channel_nativeformats
ast_channel_nativeformats
qe->chan
qe
qe
chan
qe->chan
qe
qe
chan
location
location
&status
status
status
if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}
!tmp->chan
tmp->chan
tmp
tmp
chan
{			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}
if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
ao2_lock(qe->parent);
ao2_lock(qe->parent)
ao2_lock
ao2_lock
qe->parent
qe
qe
parent
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
qe->parent->rrpos++;
qe->parent->rrpos++
qe->parent->rrpos
qe->parent
qe
qe
parent
rrpos
qe->linpos++;
qe->linpos++
qe->linpos
qe
qe
linpos
ao2_unlock(qe->parent);
ao2_unlock(qe->parent)
ao2_unlock
ao2_unlock
qe->parent
qe
qe
parent
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
ast_channel_lock_both(tmp->chan, qe->chan);
ast_channel_lock_both(tmp->chan, qe->chan)
ast_channel_lock_both
ast_channel_lock_both
tmp->chan
tmp
tmp
chan
qe->chan
qe
qe
chan
if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}
qe->cancel_answered_elsewhere
qe
qe
cancel_answered_elsewhere
{		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}
ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);
ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE)
ast_channel_hangupcause_set
ast_channel_hangupcause_set
tmp->chan
tmp
tmp
chan
AST_CAUSE_ANSWERED_ELSEWHERE
AST_CAUSE_ANSWERED_ELSEWHERE
ast_channel_appl_set(tmp->chan, "AppQueue");
ast_channel_appl_set(tmp->chan, "AppQueue")
ast_channel_appl_set
ast_channel_appl_set
tmp->chan
tmp
tmp
chan
"AppQueue"
ast_channel_data_set(tmp->chan, "(Outgoing Line)");
ast_channel_data_set(tmp->chan, "(Outgoing Line)")
ast_channel_data_set
ast_channel_data_set
tmp->chan
tmp
tmp
chan
"(Outgoing Line)"
memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));
memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)))
memset
memset
ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup
ast_channel_whentohangup
tmp->chan
tmp
tmp
chan
0
sizeof(*ast_channel_whentohangup(tmp->chan))
(*ast_channel_whentohangup(tmp->chan))
*ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup
ast_channel_whentohangup
tmp->chan
tmp
tmp
chan
if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}
!ast_channel_caller(tmp->chan)->id.number.valid
ast_channel_caller(tmp->chan)->id.number.valid
ast_channel_caller(tmp->chan)->id.number
ast_channel_caller(tmp->chan)->id
ast_channel_caller(tmp->chan)
ast_channel_caller
ast_channel_caller
tmp->chan
tmp
tmp
chan
id
number
valid
{		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}
if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
ast_channel_connected(qe->chan)->id.number.valid
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
valid
{			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		}
struct ast_party_caller caller;
struct ast_party_caller caller;
struct ast_party_caller
ast_party_caller
caller
caller
ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));
ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan))
ast_party_caller_set_init
ast_party_caller_set_init
&caller
caller
caller
ast_channel_caller(tmp->chan)
ast_channel_caller
ast_channel_caller
tmp->chan
tmp
tmp
chan
caller.id = ast_channel_connected(qe->chan)->id;
caller.id = ast_channel_connected(qe->chan)->id
caller.id
caller
caller
id
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
caller.ani = ast_channel_connected(qe->chan)->ani;
caller.ani = ast_channel_connected(qe->chan)->ani
caller.ani
caller
caller
ani
ast_channel_connected(qe->chan)->ani
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
ani
ast_channel_set_caller_event(tmp->chan, &caller, NULL);
ast_channel_set_caller_event(tmp->chan, &caller, NULL)
ast_channel_set_caller_event
ast_channel_set_caller_event
tmp->chan
tmp
tmp
chan
&caller
caller
caller
NULL
NULL
if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)
ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)
ast_strlen_zero
ast_strlen_zero
ast_channel_dialed(qe->chan)->number.str
ast_channel_dialed(qe->chan)->number
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
number
str
{			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		}
ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);
ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL)
ast_set_callerid
ast_set_callerid
tmp->chan
tmp
tmp
chan
ast_channel_dialed(qe->chan)->number.str
ast_channel_dialed(qe->chan)->number
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
number
str
NULL
NULL
NULL
NULL
if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))
ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))
ast_strlen_zero
ast_strlen_zero
S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan))
S_OR
S_OR
ast_channel_macroexten(qe->chan)
ast_channel_macroexten
ast_channel_macroexten
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
{			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL);
ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL)
ast_set_callerid
ast_set_callerid
tmp->chan
tmp
tmp
chan
S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan))
S_OR
S_OR
ast_channel_macroexten(qe->chan)
ast_channel_macroexten
ast_channel_macroexten
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
NULL
NULL
NULL
NULL
tmp->dial_callerid_absent = 1;
tmp->dial_callerid_absent = 1
tmp->dial_callerid_absent
tmp
tmp
dial_callerid_absent
1
ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));
ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan))
ast_party_redirecting_copy
ast_party_redirecting_copy
ast_channel_redirecting(tmp->chan)
ast_channel_redirecting
ast_channel_redirecting
tmp->chan
tmp
tmp
chan
ast_channel_redirecting(qe->chan)
ast_channel_redirecting
ast_channel_redirecting
qe->chan
qe
qe
chan
ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;
ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select
ast_channel_dialed(tmp->chan)->transit_network_select
ast_channel_dialed(tmp->chan)
ast_channel_dialed
ast_channel_dialed
tmp->chan
tmp
tmp
chan
transit_network_select
ast_channel_dialed(qe->chan)->transit_network_select
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
transit_network_select
ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));
ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan))
ast_connected_line_copy_from_caller
ast_connected_line_copy_from_caller
ast_channel_connected(tmp->chan)
ast_channel_connected
ast_channel_connected
tmp->chan
tmp
tmp
chan
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
ast_channel_inherit_variables(qe->chan, tmp->chan);
ast_channel_inherit_variables(qe->chan, tmp->chan)
ast_channel_inherit_variables
ast_channel_inherit_variables
qe->chan
qe
qe
chan
tmp->chan
tmp
tmp
chan
ast_channel_datastore_inherit(qe->chan, tmp->chan);
ast_channel_datastore_inherit(qe->chan, tmp->chan)
ast_channel_datastore_inherit
ast_channel_datastore_inherit
qe->chan
qe
qe
chan
tmp->chan
tmp
tmp
chan
ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));
ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan))
ast_channel_adsicpe_set
ast_channel_adsicpe_set
tmp->chan
tmp
tmp
chan
ast_channel_adsicpe(qe->chan)
ast_channel_adsicpe
ast_channel_adsicpe
qe->chan
qe
qe
chan
macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");
macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
macrocontext
macrocontext
pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
qe->chan
qe
qe
chan
"MACRO_CONTEXT"
ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);
ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext)
ast_channel_dialcontext_set
ast_channel_dialcontext_set
tmp->chan
tmp
tmp
chan
ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext
ast_strlen_zero(macrocontext)
ast_strlen_zero
ast_strlen_zero
macrocontext
macrocontext
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
macrocontext
macrocontext
macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");
macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
macroexten
macroexten
pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
qe->chan
qe
qe
chan
"MACRO_EXTEN"
if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}
!ast_strlen_zero(macroexten)
ast_strlen_zero(macroexten)
ast_strlen_zero
ast_strlen_zero
macroexten
macroexten
{		ast_channel_exten_set(tmp->chan, macroexten);	}
ast_channel_exten_set(tmp->chan, macroexten);
ast_channel_exten_set(tmp->chan, macroexten)
ast_channel_exten_set
ast_channel_exten_set
tmp->chan
tmp
tmp
chan
macroexten
macroexten
{		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}
ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));
ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan))
ast_channel_exten_set
ast_channel_exten_set
tmp->chan
tmp
tmp
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}
ast_cdr_isset_unanswered()
ast_cdr_isset_unanswered
ast_cdr_isset_unanswered
{		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}
ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));
ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan))
ast_cdr_setdestchan
ast_cdr_setdestchan
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
ast_channel_name(tmp->chan)
ast_channel_name
ast_channel_name
tmp->chan
tmp
tmp
chan
strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);
strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->clid
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
clid
ast_channel_cdr(qe->chan)->clid
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
clid
strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);
strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->channel
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
channel
ast_channel_cdr(qe->chan)->channel
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
channel
strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);
strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->src
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
src
ast_channel_cdr(qe->chan)->src
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
src
strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));
strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan))
strcpy
strcpy
ast_channel_cdr(tmp->chan)->dst
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
dst
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));
strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan))
strcpy
strcpy
ast_channel_cdr(tmp->chan)->dcontext
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
dcontext
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);
strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->lastapp
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
lastapp
ast_channel_cdr(qe->chan)->lastapp
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
lastapp
strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);
strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->lastdata
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
lastdata
ast_channel_cdr(qe->chan)->lastdata
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
lastdata
ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;
ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags
ast_channel_cdr(tmp->chan)->amaflags
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
amaflags
ast_channel_cdr(qe->chan)->amaflags
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
amaflags
strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);
strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->accountcode
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
accountcode
ast_channel_cdr(qe->chan)->accountcode
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
accountcode
strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);
strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->userfield
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
userfield
ast_channel_cdr(qe->chan)->userfield
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
userfield
ast_channel_unlock(tmp->chan);
ast_channel_unlock(tmp->chan)
ast_channel_unlock
ast_channel_unlock
tmp->chan
tmp
tmp
chan
ast_channel_unlock(qe->chan);
ast_channel_unlock(qe->chan)
ast_channel_unlock
ast_channel_unlock
qe->chan
qe
qe
chan
if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
(res = ast_call(tmp->chan, location, 0))
res = ast_call(tmp->chan, location, 0)
res
res
ast_call(tmp->chan, location, 0)
ast_call
ast_call
tmp->chan
tmp
tmp
chan
location
location
0
{		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	}
ast_verb(3, "Couldn't call %s\n", tmp->interface);
ast_verb(3, "Couldn't call %s\n", tmp->interface)
ast_verb
ast_verb
3
"Couldn't call %s\n"
tmp->interface
tmp
tmp
interface
do_hang(tmp);
do_hang(tmp)
do_hang
do_hang
tmp
tmp
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
return 0;
0
if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
qe->parent->eventwhencalled
qe->parent
qe
qe
parent
eventwhencalled
{		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
char vars[2048];
char vars[2048];
char
vars[2048]
vars
[2048]
2048
ast_channel_lock_both(tmp->chan, qe->chan);
ast_channel_lock_both(tmp->chan, qe->chan)
ast_channel_lock_both
ast_channel_lock_both
tmp->chan
tmp
tmp
chan
qe->chan
qe
qe
chan
manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");
manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "")
manager_event
manager_event
EVENT_FLAG_AGENT
EVENT_FLAG_AGENT
"AgentCalled"
"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s"
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
tmp->member->membername
tmp->member
tmp
tmp
member
membername
ast_channel_name(qe->chan)
ast_channel_name
ast_channel_name
qe->chan
qe
qe
chan
ast_channel_name(tmp->chan)
ast_channel_name
ast_channel_name
tmp->chan
tmp
tmp
chan
S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown")
S_COR
S_COR
ast_channel_caller(qe->chan)->id.number.valid
ast_channel_caller(qe->chan)->id.number
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
number
valid
ast_channel_caller(qe->chan)->id.number.str
ast_channel_caller(qe->chan)->id.number
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
number
str
"unknown"
S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown")
S_COR
S_COR
ast_channel_caller(qe->chan)->id.name.valid
ast_channel_caller(qe->chan)->id.name
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
name
valid
ast_channel_caller(qe->chan)->id.name.str
ast_channel_caller(qe->chan)->id.name
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
name
str
"unknown"
S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown")
S_COR
S_COR
ast_channel_connected(qe->chan)->id.number.valid
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
valid
ast_channel_connected(qe->chan)->id.number.str
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
str
"unknown"
S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown")
S_COR
S_COR
ast_channel_connected(qe->chan)->id.name.valid
ast_channel_connected(qe->chan)->id.name
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
name
valid
ast_channel_connected(qe->chan)->id.name.str
ast_channel_connected(qe->chan)->id.name
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
name
str
"unknown"
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
ast_channel_priority(qe->chan)
ast_channel_priority
ast_channel_priority
qe->chan
qe
qe
chan
ast_channel_uniqueid(qe->chan)
ast_channel_uniqueid
ast_channel_uniqueid
qe->chan
qe
qe
chan
qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : ""
qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES
qe->parent->eventwhencalled
qe->parent
qe
qe
parent
eventwhencalled
QUEUE_EVENT_VARIABLES
QUEUE_EVENT_VARIABLES
vars2manager(qe->chan, vars, sizeof(vars))
vars2manager
vars2manager
qe->chan
qe
qe
chan
vars
vars
sizeof(vars)
(vars)
vars
vars
""
ast_channel_unlock(tmp->chan);
ast_channel_unlock(tmp->chan)
ast_channel_unlock
ast_channel_unlock
tmp->chan
tmp
tmp
chan
ast_channel_unlock(qe->chan);
ast_channel_unlock(qe->chan)
ast_channel_unlock
ast_channel_unlock
qe->chan
qe
qe
chan
ast_verb(3, "Called %s\n", tmp->interface);
ast_verb(3, "Called %s\n", tmp->interface)
ast_verb
ast_verb
3
"Called %s\n"
tmp->interface
tmp
tmp
interface
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
return 1;
1
-----joern-----
(834,136,0)
(417,684,0)
(29,23,0)
(687,103,0)
(259,891,0)
(485,439,0)
(735,495,0)
(143,103,0)
(621,901,0)
(764,891,0)
(322,594,0)
(545,589,0)
(176,61,0)
(587,158,0)
(28,622,0)
(749,47,0)
(233,26,0)
(268,674,0)
(436,323,0)
(835,90,0)
(18,564,0)
(512,143,0)
(756,81,0)
(439,313,0)
(762,363,0)
(802,132,0)
(931,805,0)
(56,810,0)
(424,285,0)
(877,583,0)
(323,583,0)
(762,292,0)
(13,911,0)
(879,891,0)
(810,56,0)
(310,914,0)
(86,627,0)
(882,737,0)
(433,466,0)
(825,337,0)
(427,893,0)
(272,902,0)
(237,771,0)
(166,666,0)
(186,398,0)
(750,411,0)
(50,466,0)
(119,80,0)
(232,499,0)
(142,951,0)
(818,810,0)
(808,852,0)
(910,921,0)
(22,563,0)
(691,43,0)
(129,103,0)
(818,620,0)
(589,891,0)
(782,843,0)
(936,802,0)
(329,566,0)
(940,760,0)
(339,97,0)
(388,874,0)
(179,627,0)
(648,866,0)
(760,259,0)
(866,648,0)
(722,703,0)
(902,372,0)
(59,743,0)
(755,620,0)
(396,874,0)
(36,932,0)
(679,48,0)
(873,921,0)
(461,485,0)
(184,891,0)
(87,214,0)
(791,246,0)
(892,5,0)
(174,747,0)
(691,707,0)
(0,401,0)
(336,705,0)
(882,613,0)
(37,893,0)
(707,691,0)
(933,145,0)
(171,620,0)
(748,939,0)
(744,752,0)
(867,610,0)
(76,915,0)
(869,204,0)
(217,11,0)
(311,874,0)
(218,891,0)
(730,632,0)
(482,227,0)
(117,143,0)
(770,947,0)
(817,71,0)
(809,41,0)
(941,200,0)
(643,866,0)
(665,562,0)
(915,216,0)
(29,363,0)
(56,333,0)
(609,481,0)
(839,47,0)
(896,536,0)
(523,564,0)
(820,313,0)
(703,903,0)
(897,831,0)
(263,687,0)
(417,583,0)
(622,830,0)
(147,122,0)
(830,622,0)
(525,143,0)
(792,36,0)
(553,266,0)
(287,254,0)
(677,397,0)
(802,936,0)
(946,22,0)
(527,897,0)
(926,933,0)
(805,620,0)
(363,29,0)
(718,593,0)
(352,660,0)
(517,743,0)
(689,687,0)
(159,690,0)
(831,21,0)
(738,214,0)
(710,543,0)
(711,161,0)
(939,102,0)
(149,891,0)
(924,571,0)
(165,943,0)
(704,103,0)
(303,561,0)
(93,138,0)
(920,940,0)
(938,306,0)
(202,921,0)
(13,620,0)
(692,938,0)
(453,346,0)
(596,313,0)
(586,786,0)
(443,669,0)
(243,244,0)
(334,859,0)
(660,910,0)
(168,822,0)
(146,27,0)
(364,417,0)
(205,120,0)
(787,704,0)
(803,313,0)
(451,901,0)
(690,620,0)
(909,896,0)
(97,642,0)
(509,250,0)
(720,922,0)
(229,789,0)
(674,268,0)
(633,172,0)
(477,736,0)
(635,295,0)
(880,134,0)
(796,629,0)
(266,620,0)
(700,59,0)
(467,485,0)
(138,325,0)
(685,201,0)
(313,885,0)
(594,61,0)
(23,29,0)
(280,522,0)
(626,721,0)
(161,891,0)
(48,143,0)
(474,620,0)
(215,891,0)
(746,620,0)
(190,143,0)
(680,557,0)
(899,891,0)
(628,325,0)
(463,724,0)
(670,487,0)
(674,307,0)
(114,755,0)
(133,132,0)
(747,563,0)
(784,789,0)
(513,793,0)
(463,777,0)
(416,800,0)
(429,815,0)
(450,620,0)
(456,416,0)
(177,779,0)
(446,618,0)
(621,184,0)
(360,349,0)
(558,701,0)
(652,891,0)
(499,620,0)
(518,607,0)
(675,587,0)
(5,652,0)
(489,377,0)
(328,149,0)
(885,631,0)
(94,301,0)
(385,631,0)
(538,269,0)
(726,279,0)
(913,675,0)
(399,476,0)
(589,528,0)
(78,487,0)
(790,563,0)
(613,882,0)
(499,444,0)
(484,639,0)
(173,103,0)
(105,899,0)
(267,399,0)
(122,314,0)
(77,31,0)
(39,571,0)
(627,179,0)
(42,512,0)
(852,32,0)
(562,573,0)
(823,639,0)
(287,521,0)
(190,494,0)
(304,372,0)
(470,476,0)
(944,329,0)
(271,314,0)
(14,620,0)
(786,311,0)
(794,666,0)
(593,143,0)
(157,143,0)
(21,885,0)
(313,602,0)
(672,593,0)
(865,184,0)
(84,947,0)
(479,624,0)
(170,605,0)
(121,267,0)
(86,891,0)
(290,775,0)
(937,366,0)
(725,26,0)
(888,208,0)
(22,350,0)
(823,933,0)
(587,675,0)
(741,411,0)
(830,921,0)
(275,313,0)
(442,743,0)
(241,90,0)
(647,425,0)
(250,509,0)
(779,856,0)
(758,197,0)
(893,891,0)
(373,130,0)
(74,620,0)
(68,472,0)
(221,377,0)
(0,627,0)
(31,77,0)
(165,7,0)
(510,829,0)
(289,48,0)
(397,677,0)
(861,268,0)
(684,143,0)
(231,41,0)
(182,891,0)
(156,620,0)
(197,921,0)
(118,543,0)
(191,594,0)
(779,902,0)
(60,377,0)
(519,453,0)
(269,490,0)
(389,624,0)
(483,662,0)
(660,143,0)
(786,620,0)
(313,195,0)
(781,921,0)
(888,380,0)
(731,744,0)
(67,844,0)
(700,620,0)
(778,891,0)
(306,448,0)
(405,594,0)
(721,620,0)
(292,762,0)
(54,422,0)
(347,746,0)
(163,819,0)
(874,396,0)
(199,35,0)
(764,678,0)
(40,61,0)
(761,464,0)
(375,335,0)
(917,602,0)
(742,156,0)
(379,386,0)
(115,804,0)
(356,843,0)
(820,474,0)
(313,439,0)
(189,730,0)
(120,205,0)
(7,165,0)
(478,256,0)
(189,620,0)
(293,200,0)
(705,830,0)
(803,822,0)
(148,193,0)
(869,218,0)
(724,463,0)
(285,529,0)
(803,257,0)
(259,143,0)
(423,620,0)
(197,684,0)
(44,460,0)
(872,397,0)
(659,921,0)
(660,891,0)
(313,820,0)
(367,255,0)
(466,943,0)
(299,928,0)
(683,652,0)
(473,557,0)
(70,292,0)
(195,313,0)
(774,568,0)
(757,839,0)
(507,661,0)
(235,921,0)
(627,86,0)
(46,215,0)
(71,143,0)
(404,541,0)
(866,643,0)
(12,632,0)
(132,541,0)
(24,866,0)
(257,27,0)
(181,826,0)
(895,155,0)
(340,327,0)
(860,161,0)
(667,278,0)
(377,942,0)
(881,542,0)
(615,891,0)
(685,891,0)
(20,891,0)
(313,491,0)
(43,691,0)
(36,792,0)
(63,752,0)
(129,900,0)
(600,153,0)
(464,143,0)
(826,240,0)
(449,165,0)
(262,244,0)
(432,245,0)
(636,341,0)
(73,472,0)
(446,571,0)
(923,238,0)
(822,536,0)
(928,143,0)
(164,562,0)
(845,43,0)
(542,891,0)
(116,394,0)
(728,11,0)
(707,620,0)
(435,198,0)
(211,81,0)
(947,620,0)
(326,775,0)
(349,529,0)
(829,208,0)
(211,950,0)
(762,651,0)
(417,436,0)
(219,707,0)
(264,849,0)
(172,143,0)
(773,279,0)
(224,891,0)
(709,474,0)
(936,620,0)
(233,602,0)
(546,848,0)
(333,56,0)
(569,198,0)
(520,921,0)
(705,891,0)
(313,553,0)
(198,620,0)
(254,287,0)
(406,257,0)
(366,937,0)
(655,921,0)
(674,70,0)
(307,504,0)
(335,921,0)
(137,647,0)
(666,794,0)
(524,62,0)
(815,100,0)
(401,0,0)
(5,489,0)
(161,143,0)
(940,843,0)
(329,158,0)
(827,327,0)
(426,778,0)
(90,620,0)
(688,700,0)
(778,267,0)
(559,26,0)
(201,627,0)
(109,423,0)
(703,620,0)
(793,620,0)
(122,147,0)
(153,448,0)
(627,201,0)
(357,112,0)
(598,891,0)
(161,860,0)
(196,281,0)
(143,921,0)
(876,790,0)
(31,635,0)
(672,884,0)
(64,592,0)
(755,493,0)
(904,522,0)
(15,871,0)
(829,891,0)
(244,156,0)
(81,211,0)
(841,472,0)
(666,166,0)
(383,409,0)
(542,313,0)
(288,737,0)
(494,535,0)
(525,891,0)
(375,891,0)
(412,856,0)
(344,891,0)
(800,341,0)
(147,172,0)
(298,138,0)
(210,50,0)
(402,900,0)
(270,218,0)
(382,179,0)
(437,276,0)
(826,181,0)
(746,179,0)
(653,583,0)
(650,72,0)
(541,132,0)
(603,794,0)
(128,891,0)
(835,575,0)
(430,399,0)
(102,939,0)
(422,327,0)
(800,416,0)
(445,891,0)
(257,803,0)
(432,522,0)
(669,517,0)
(421,896,0)
(915,143,0)
(859,891,0)
(306,938,0)
(237,251,0)
(242,412,0)
(82,573,0)
(145,269,0)
(557,473,0)
(101,853,0)
(444,422,0)
(535,494,0)
(370,72,0)
(225,629,0)
(34,157,0)
(83,205,0)
(460,563,0)
(363,762,0)
(925,204,0)
(681,856,0)
(616,793,0)
(412,52,0)
(139,137,0)
(556,662,0)
(155,260,0)
(130,373,0)
(425,647,0)
(431,888,0)
(267,19,0)
(856,779,0)
(521,287,0)
(780,425,0)
(729,690,0)
(823,187,0)
(254,568,0)
(21,831,0)
(197,696,0)
(335,375,0)
(950,891,0)
(214,620,0)
(619,523,0)
(154,491,0)
(823,417,0)
(16,52,0)
(293,897,0)
(607,620,0)
(485,891,0)
(409,441,0)
(568,774,0)
(569,313,0)
(525,849,0)
(743,517,0)
(3,607,0)
(815,891,0)
(763,149,0)
(187,783,0)
(52,412,0)
(187,684,0)
(2,917,0)
(861,891,0)
(10,921,0)
(675,20,0)
(246,791,0)
(737,217,0)
(462,20,0)
(922,325,0)
(398,295,0)
(313,770,0)
(413,736,0)
(635,843,0)
(346,453,0)
(262,227,0)
(103,129,0)
(71,858,0)
(496,947,0)
(838,313,0)
(878,441,0)
(769,73,0)
(301,891,0)
(945,528,0)
(605,777,0)
(437,620,0)
(920,117,0)
(187,600,0)
(371,732,0)
(625,204,0)
(197,669,0)
(813,620,0)
(78,47,0)
(195,717,0)
(182,104,0)
(100,404,0)
(302,90,0)
(745,13,0)
(167,217,0)
(566,610,0)
(730,189,0)
(874,388,0)
(801,218,0)
(58,672,0)
(401,891,0)
(332,921,0)
(886,436,0)
(134,880,0)
(631,885,0)
(585,203,0)
(916,598,0)
(668,819,0)
(706,23,0)
(639,495,0)
(512,891,0)
(110,224,0)
(198,569,0)
(537,52,0)
(759,685,0)
(277,891,0)
(832,337,0)
(555,879,0)
(392,463,0)
(394,846,0)
(890,546,0)
(313,569,0)
(316,32,0)
(594,346,0)
(529,843,0)
(883,181,0)
(321,848,0)
(845,890,0)
(163,535,0)
(190,891,0)
(103,143,0)
(816,171,0)
(187,383,0)
(567,648,0)
(469,624,0)
(767,398,0)
(613,137,0)
(736,839,0)
(505,404,0)
(436,891,0)
(98,300,0)
(687,620,0)
(112,714,0)
(907,425,0)
(734,899,0)
(927,589,0)
(522,432,0)
(48,679,0)
(630,583,0)
(593,672,0)
(536,896,0)
(93,891,0)
(541,843,0)
(535,921,0)
(863,156,0)
(594,191,0)
(804,659,0)
(554,620,0)
(386,651,0)
(208,888,0)
(118,328,0)
(316,74,0)
(417,278,0)
(273,256,0)
(192,844,0)
(565,215,0)
(517,921,0)
(451,843,0)
(267,778,0)
(856,412,0)
(719,453,0)
(870,566,0)
(308,80,0)
(871,620,0)
(657,615,0)
(922,893,0)
(551,259,0)
(669,110,0)
(262,495,0)
(113,921,0)
(394,27,0)
(514,226,0)
(14,902,0)
(584,504,0)
(428,846,0)
(447,509,0)
(11,880,0)
(598,143,0)
(888,921,0)
(52,620,0)
(531,791,0)
(842,815,0)
(593,891,0)
(492,31,0)
(175,783,0)
(782,81,0)
(468,794,0)
(702,659,0)
(187,182,0)
(875,437,0)
(61,143,0)
(276,601,0)
(92,196,0)
(158,587,0)
(320,620,0)
(227,262,0)
(480,861,0)
(208,829,0)
(726,607,0)
(389,441,0)
(377,221,0)
(830,705,0)
(403,652,0)
(338,600,0)
(823,62,0)
(713,853,0)
(560,207,0)
(724,95,0)
(849,918,0)
(823,914,0)
(543,118,0)
(327,422,0)
(705,143,0)
(448,306,0)
(766,601,0)
(828,196,0)
(880,11,0)
(49,716,0)
(769,215,0)
(637,316,0)
(136,804,0)
(544,319,0)
(149,328,0)
(276,437,0)
(256,620,0)
(236,877,0)
(640,829,0)
(656,793,0)
(184,621,0)
(864,445,0)
(509,620,0)
(775,99,0)
(136,620,0)
(221,47,0)
(556,844,0)
(380,945,0)
(506,48,0)
(224,143,0)
(4,189,0)
(489,5,0)
(124,705,0)
(35,783,0)
(855,679,0)
(564,754,0)
(61,594,0)
(747,723,0)
(179,746,0)
(415,190,0)
(156,244,0)
(614,921,0)
(160,182,0)
(752,744,0)
(632,730,0)
(606,813,0)
(261,203,0)
(487,128,0)
(472,891,0)
(313,737,0)
(41,143,0)
(598,332,0)
(416,911,0)
(300,284,0)
(45,618,0)
(605,620,0)
(439,485,0)
(428,620,0)
(635,31,0)
(588,871,0)
(715,879,0)
(541,404,0)
(516,730,0)
(738,602,0)
(810,818,0)
(17,411,0)
(99,775,0)
(142,478,0)
(254,363,0)
(103,226,0)
(313,678,0)
(917,853,0)
(564,523,0)
(369,349,0)
(296,859,0)
(629,225,0)
(678,764,0)
(388,66,0)
(206,622,0)
(340,491,0)
(846,428,0)
(805,396,0)
(788,1,0)
(444,499,0)
(777,463,0)
(686,128,0)
(849,525,0)
(662,661,0)
(372,902,0)
(819,163,0)
(197,383,0)
(575,835,0)
(824,509,0)
(641,386,0)
(309,161,0)
(103,687,0)
(778,143,0)
(515,936,0)
(557,891,0)
(157,891,0)
(654,20,0)
(840,717,0)
(935,821,0)
(760,940,0)
(487,78,0)
(940,920,0)
(701,869,0)
(450,483,0)
(534,74,0)
(408,696,0)
(576,879,0)
(283,615,0)
(284,307,0)
(117,891,0)
(41,891,0)
(535,163,0)
(201,685,0)
(55,437,0)
(476,159,0)
(771,237,0)
(549,21,0)
(903,703,0)
(812,936,0)
(222,154,0)
(1,464,0)
(568,254,0)
(172,147,0)
(204,869,0)
(240,826,0)
(330,439,0)
(418,397,0)
(860,602,0)
(851,544,0)
(354,620,0)
(140,301,0)
(335,791,0)
(902,14,0)
(134,813,0)
(894,632,0)
(610,566,0)
(472,73,0)
(113,320,0)
(928,661,0)
(915,891,0)
(314,122,0)
(32,316,0)
(126,201,0)
(481,754,0)
(1,921,0)
(929,901,0)
(181,620,0)
(694,666,0)
(356,561,0)
(120,932,0)
(315,717,0)
(765,778,0)
(104,255,0)
(373,843,0)
(678,313,0)
(215,769,0)
(53,707,0)
(197,600,0)
(885,313,0)
(937,782,0)
(253,214,0)
(125,23,0)
(901,621,0)
(73,171,0)
(887,525,0)
(591,35,0)
(488,921,0)
(80,795,0)
(150,724,0)
(187,669,0)
(945,380,0)
(268,861,0)
(159,476,0)
(791,144,0)
(795,80,0)
(947,770,0)
(362,428,0)
(441,409,0)
(730,516,0)
(723,490,0)
(353,250,0)
(200,620,0)
(612,605,0)
(50,891,0)
(281,196,0)
(471,375,0)
(203,620,0)
(127,103,0)
(764,143,0)
(590,821,0)
(608,383,0)
(902,779,0)
(111,598,0)
(457,818,0)
(629,620,0)
(446,341,0)
(337,891,0)
(601,356,0)
(102,99,0)
(135,786,0)
(844,556,0)
(11,217,0)
(445,143,0)
(554,144,0)
(649,819,0)
(184,143,0)
(196,92,0)
(292,70,0)
(279,726,0)
(652,5,0)
(771,648,0)
(853,891,0)
(568,732,0)
(522,620,0)
(295,635,0)
(370,783,0)
(857,189,0)
(754,564,0)
(70,674,0)
(717,620,0)
(844,620,0)
(130,17,0)
(284,387,0)
(20,675,0)
(911,416,0)
(644,428,0)
(30,921,0)
(69,512,0)
(659,804,0)
(573,562,0)
(421,721,0)
(501,642,0)
(695,818,0)
(623,136,0)
(386,891,0)
(837,848,0)
(797,387,0)
(363,254,0)
(779,313,0)
(351,735,0)
(92,620,0)
(651,386,0)
(839,942,0)
(615,516,0)
(320,113,0)
(245,451,0)
(664,921,0)
(420,436,0)
(561,677,0)
(172,891,0)
(648,771,0)
(281,583,0)
(697,212,0)
(207,143,0)
(751,259,0)
(349,369,0)
(279,891,0)
(592,337,0)
(251,237,0)
(307,284,0)
(897,293,0)
(365,184,0)
(791,335,0)
(8,287,0)
(286,118,0)
(511,14,0)
(822,803,0)
(131,613,0)
(939,716,0)
(207,792,0)
(932,36,0)
(474,820,0)
(128,487,0)
(117,920,0)
(95,96,0)
(193,592,0)
(806,256,0)
(573,82,0)
(502,861,0)
(220,86,0)
(212,373,0)
(727,340,0)
(821,891,0)
(651,762,0)
(853,917,0)
(234,950,0)
(578,240,0)
(397,143,0)
(317,921,0)
(266,553,0)
(355,172,0)
(792,207,0)
(7,891,0)
(789,891,0)
(316,921,0)
(950,143,0)
(610,891,0)
(295,398,0)
(228,71,0)
(27,257,0)
(736,413,0)
(595,7,0)
(850,774,0)
(374,251,0)
(575,921,0)
(356,601,0)
(532,413,0)
(708,354,0)
(89,593,0)
(445,575,0)
(498,450,0)
(282,445,0)
(632,891,0)
(395,320,0)
(411,17,0)
(312,50,0)
(547,262,0)
(56,921,0)
(906,803,0)
(368,521,0)
(932,120,0)
(503,401,0)
(592,921,0)
(61,891,0)
(223,602,0)
(251,891,0)
(95,724,0)
(236,620,0)
(717,195,0)
(123,182,0)
(550,629,0)
(574,921,0)
(332,598,0)
(97,47,0)
(82,41,0)
(604,499,0)
(814,474,0)
(730,583,0)
(387,284,0)
(259,760,0)
(313,803,0)
(950,211,0)
(434,937,0)
(716,939,0)
(414,207,0)
(32,852,0)
(908,771,0)
(753,732,0)
(622,620,0)
(26,233,0)
(521,620,0)
(240,85,0)
(829,143,0)
(793,616,0)
(175,891,0)
(425,620,0)
(601,276,0)
(413,891,0)
(75,813,0)
(852,891,0)
(546,890,0)
(739,752,0)
(486,320,0)
(871,910,0)
(512,233,0)
(397,891,0)
(313,225,0)
(62,93,0)
(366,423,0)
(504,821,0)
(230,187,0)
(324,175,0)
(155,731,0)
(90,835,0)
(582,921,0)
(833,921,0)
(478,142,0)
(409,843,0)
(819,620,0)
(523,631,0)
(877,236,0)
(732,891,0)
(571,891,0)
(497,165,0)
(566,329,0)
(144,554,0)
(714,112,0)
(662,556,0)
(777,605,0)
(624,620,0)
(836,554,0)
(589,143,0)
(441,389,0)
(81,782,0)
(399,267,0)
(224,110,0)
(214,738,0)
(311,786,0)
(552,685,0)
(731,921,0)
(384,600,0)
(141,36,0)
(26,620,0)
(754,481,0)
(557,143,0)
(599,43,0)
(785,236,0)
(278,667,0)
(733,238,0)
(821,504,0)
(607,726,0)
(333,157,0)
(331,157,0)
(381,262,0)
(187,278,0)
(274,268,0)
(107,557,0)
(539,346,0)
(846,394,0)
(265,744,0)
(73,769,0)
(103,346,0)
(305,300,0)
(807,637,0)
(344,35,0)
(460,628,0)
(831,897,0)
(423,366,0)
(376,323,0)
(318,880,0)
(205,620,0)
(889,267,0)
(377,576,0)
(194,86,0)
(82,345,0)
(226,768,0)
(536,822,0)
(217,737,0)
(452,938,0)
(307,674,0)
(639,859,0)
(491,313,0)
(577,921,0)
(673,266,0)
(938,620,0)
(27,394,0)
(638,660,0)
(528,945,0)
(529,285,0)
(48,891,0)
(847,764,0)
(9,446,0)
(103,704,0)
(99,102,0)
(251,143,0)
(662,483,0)
(239,224,0)
(152,377,0)
(475,245,0)
(451,245,0)
(481,620,0)
(51,13,0)
(782,937,0)
(932,843,0)
(845,843,0)
(634,191,0)
(464,1,0)
(358,102,0)
(342,721,0)
(528,589,0)
(454,354,0)
(624,389,0)
(448,153,0)
(465,7,0)
(653,790,0)
(244,262,0)
(35,344,0)
(628,460,0)
(576,377,0)
(848,891,0)
(905,92,0)
(676,917,0)
(473,285,0)
(258,93,0)
(377,489,0)
(679,921,0)
(249,700,0)
(919,413,0)
(72,370,0)
(508,587,0)
(183,915,0)
(712,190,0)
(899,143,0)
(561,356,0)
(203,369,0)
(868,690,0)
(361,74,0)
(77,899,0)
(17,130,0)
(284,300,0)
(682,195,0)
(151,171,0)
(419,900,0)
(714,943,0)
(247,130,0)
(59,700,0)
(562,620,0)
(663,755,0)
(212,858,0)
(375,143,0)
(890,845,0)
(791,659,0)
(337,592,0)
(693,610,0)
(928,891,0)
(858,71,0)
(661,662,0)
(57,181,0)
(912,224,0)
(313,542,0)
(204,620,0)
(491,340,0)
(500,831,0)
(571,143,0)
(737,882,0)
(154,85,0)
(740,301,0)
(690,159,0)
(162,882,0)
(903,583,0)
(661,459,0)
(297,328,0)
(390,703,0)
(373,212,0)
(553,313,0)
(642,97,0)
(493,755,0)
(301,143,0)
(642,277,0)
(893,922,0)
(934,852,0)
(41,82,0)
(85,154,0)
(112,563,0)
(572,464,0)
(185,637,0)
(570,117,0)
(407,401,0)
(898,481,0)
(316,637,0)
(526,554,0)
(813,134,0)
(252,145,0)
(327,340,0)
(726,921,0)
(548,536,0)
(464,891,0)
(216,915,0)
(145,891,0)
(378,221,0)
(504,307,0)
(775,620,0)
(896,421,0)
(637,891,0)
(43,845,0)
(667,346,0)
(911,13,0)
(579,14,0)
(85,240,0)
(661,928,0)
(737,313,0)
(209,667,0)
(493,583,0)
(776,684,0)
(914,943,0)
(823,197,0)
(157,333,0)
(804,136,0)
(245,432,0)
(260,155,0)
(328,118,0)
(91,731,0)
(70,789,0)
(631,523,0)
(313,779,0)
(879,576,0)
(647,137,0)
(74,316,0)
(73,783,0)
(218,869,0)
(350,22,0)
(396,805,0)
(658,198,0)
(404,100,0)
(122,341,0)
(581,764,0)
(516,615,0)
(458,236,0)
(62,325,0)
(772,200,0)
(383,94,0)
(899,77,0)
(494,190,0)
(900,620,0)
(391,117,0)
(799,375,0)
(594,226,0)
(858,212,0)
(869,701,0)
(6,890,0)
(169,344,0)
(38,521,0)
(197,278,0)
(440,928,0)
(380,888,0)
(901,451,0)
(188,104,0)
(180,525,0)
(900,129,0)
(213,746,0)
(646,921,0)
(848,546,0)
(910,660,0)
(246,659,0)
(343,922,0)
(398,620,0)
(885,21,0)
(197,182,0)
(137,613,0)
(611,448,0)
(671,279,0)
(789,70,0)
(684,891,0)
(839,736,0)
(732,568,0)
(291,29,0)
(79,266,0)
(348,227,0)
(627,0,0)
(33,696,0)
(862,128,0)
(794,891,0)
(132,802,0)
(301,94,0)
(874,311,0)
(256,478,0)
(848,143,0)
(153,341,0)
(597,251,0)
(277,642,0)
(279,143,0)
(100,815,0)
(723,747,0)
(285,473,0)
(200,293,0)
(849,731,0)
(233,512,0)
(278,544,0)
(369,203,0)
(171,73,0)
(575,445,0)
(592,193,0)
(752,620,0)
(80,891,0)
(47,178,0)
(94,383,0)
(248,149,0)
(949,423,0)
(696,800,0)
(699,661,0)
(201,490,0)
(455,0,0)
(948,344,0)
(483,450,0)
(144,791,0)
(645,85,0)
(491,154,0)
(529,349,0)
(300,891,0)
(798,795,0)
(677,561,0)
(23,620,0)
(744,731,0)
(393,921,0)
(790,653,0)
(914,50,0)
(187,696,0)
(88,178,0)
(411,620,0)
(698,277,0)
(530,201,0)
(350,495,0)
(106,450,0)
(71,891,0)
(476,399,0)
(930,542,0)
(618,446,0)
(422,444,0)
(158,329,0)
(721,421,0)
(933,490,0)
(65,576,0)
(770,313,0)
(225,313,0)
(294,277,0)
(580,491,0)
(359,93,0)
(227,891,0)
(72,563,0)
(910,871,0)
(854,226,0)
(743,59,0)
(815,143,0)
(533,246,0)
(859,735,0)
(410,684,0)
(811,950,0)
(540,92,0)
(571,446,0)
(438,885,0)
(47,78,0)
(96,95,0)
(400,145,0)
(207,891,0)
(66,388,0)
(617,205,0)
(110,669,0)
(108,805,0)
(774,850,1)
(288,882,1)
(332,598,1)
(915,891,1)
(499,232,1)
(860,161,1)
(703,620,1)
(20,654,1)
(148,337,1)
(22,563,1)
(432,522,1)
(14,620,1)
(592,193,1)
(681,412,1)
(463,777,1)
(485,891,1)
(542,891,1)
(726,607,1)
(676,738,1)
(481,898,1)
(498,106,1)
(32,852,1)
(739,63,1)
(637,891,1)
(877,236,1)
(247,17,1)
(759,627,1)
(354,620,1)
(610,867,1)
(834,702,1)
(925,558,1)
(769,215,1)
(305,98,1)
(102,99,1)
(110,224,1)
(310,714,1)
(157,143,1)
(354,708,1)
(745,51,1)
(67,192,1)
(251,891,1)
(49,939,1)
(790,563,1)
(939,748,1)
(119,308,1)
(944,566,1)
(793,620,1)
(43,599,1)
(431,208,1)
(529,285,1)
(823,197,1)
(651,386,1)
(123,446,1)
(940,920,1)
(717,620,1)
(594,61,1)
(528,589,1)
(218,801,1)
(587,675,1)
(457,695,1)
(368,38,1)
(118,286,1)
(296,334,1)
(245,432,1)
(505,100,1)
(901,621,1)
(746,213,1)
(269,538,1)
(66,388,1)
(266,673,1)
(823,187,1)
(243,156,1)
(893,891,1)
(74,620,1)
(70,674,1)
(736,413,1)
(514,854,1)
(887,180,1)
(132,133,1)
(369,203,1)
(20,891,1)
(260,155,1)
(870,610,1)
(34,331,1)
(776,410,1)
(791,246,1)
(562,620,1)
(940,760,1)
(752,739,1)
(485,461,1)
(910,871,1)
(103,687,1)
(112,563,1)
(197,669,1)
(879,555,1)
(534,917,1)
(673,79,1)
(611,306,1)
(504,584,1)
(409,441,1)
(154,222,1)
(208,829,1)
(21,549,1)
(99,775,1)
(703,722,1)
(226,514,1)
(615,657,1)
(414,560,1)
(823,933,1)
(899,105,1)
(791,531,1)
(844,67,1)
(246,659,1)
(256,620,1)
(627,86,1)
(659,804,1)
(122,147,1)
(785,458,1)
(804,115,1)
(519,539,1)
(334,262,1)
(731,744,1)
(548,896,1)
(412,242,1)
(726,279,1)
(430,476,1)
(702,575,1)
(932,120,1)
(344,169,1)
(809,260,1)
(181,883,1)
(556,844,1)
(782,81,1)
(464,761,1)
(193,148,1)
(128,891,1)
(601,766,1)
(134,813,1)
(363,254,1)
(168,536,1)
(14,511,1)
(568,774,1)
(82,41,1)
(429,409,1)
(231,809,1)
(474,620,1)
(617,36,1)
(606,491,1)
(23,620,1)
(90,620,1)
(822,168,1)
(693,543,1)
(569,198,1)
(852,891,1)
(554,526,1)
(936,620,1)
(136,620,1)
(132,802,1)
(826,181,1)
(203,620,1)
(252,400,1)
(748,102,1)
(376,436,1)
(728,880,1)
(279,891,1)
(594,405,1)
(127,684,1)
(879,891,1)
(724,463,1)
(57,678,1)
(737,217,1)
(338,384,1)
(838,275,1)
(482,348,1)
(81,756,1)
(687,620,1)
(217,11,1)
(535,494,1)
(449,795,1)
(819,620,1)
(55,561,1)
(594,346,1)
(947,620,1)
(27,394,1)
(511,579,1)
(561,303,1)
(398,620,1)
(220,530,1)
(172,143,1)
(915,143,1)
(200,941,1)
(306,938,1)
(43,691,1)
(496,225,1)
(934,808,1)
(799,659,1)
(297,149,1)
(426,96,1)
(386,891,1)
(598,143,1)
(333,157,1)
(397,143,1)
(780,907,1)
(737,882,1)
(384,122,1)
(896,909,1)
(274,861,1)
(189,4,1)
(214,87,1)
(340,327,1)
(184,865,1)
(105,734,1)
(571,924,1)
(373,130,1)
(12,894,1)
(568,732,1)
(705,143,1)
(26,620,1)
(791,144,1)
(31,492,1)
(684,776,1)
(128,686,1)
(163,819,1)
(685,891,1)
(425,780,1)
(440,299,1)
(605,620,1)
(131,137,1)
(292,762,1)
(682,717,1)
(755,620,1)
(623,834,1)
(634,113,1)
(327,827,1)
(916,111,1)
(313,569,1)
(437,620,1)
(70,789,1)
(474,709,1)
(766,276,1)
(832,825,1)
(97,642,1)
(792,207,1)
(564,754,1)
(598,916,1)
(874,311,1)
(525,143,1)
(423,949,1)
(929,621,1)
(518,279,1)
(158,329,1)
(8,521,1)
(121,399,1)
(782,937,1)
(29,291,1)
(391,570,1)
(824,191,1)
(133,802,1)
(567,771,1)
(796,885,1)
(161,143,1)
(135,586,1)
(374,888,1)
(3,518,1)
(475,432,1)
(103,346,1)
(625,925,1)
(353,509,1)
(192,483,1)
(324,35,1)
(864,910,1)
(307,284,1)
(675,913,1)
(705,891,1)
(791,659,1)
(778,891,1)
(494,190,1)
(205,620,1)
(931,108,1)
(773,671,1)
(161,891,1)
(268,274,1)
(415,712,1)
(713,2,1)
(187,600,1)
(797,268,1)
(240,578,1)
(190,415,1)
(554,620,1)
(117,891,1)
(775,620,1)
(639,484,1)
(599,691,1)
(793,656,1)
(194,220,1)
(492,77,1)
(1,464,1)
(665,164,1)
(933,926,1)
(9,618,1)
(151,816,1)
(348,244,1)
(820,474,1)
(667,209,1)
(442,59,1)
(576,65,1)
(638,352,1)
(15,588,1)
(678,764,1)
(501,277,1)
(5,892,1)
(137,647,1)
(327,422,1)
(601,276,1)
(312,165,1)
(789,891,1)
(83,617,1)
(454,726,1)
(553,266,1)
(920,117,1)
(642,277,1)
(549,831,1)
(206,28,1)
(29,23,1)
(407,503,1)
(928,143,1)
(61,891,1)
(291,23,1)
(666,794,1)
(888,380,1)
(441,389,1)
(777,605,1)
(359,258,1)
(68,841,1)
(846,428,1)
(398,767,1)
(732,891,1)
(688,249,1)
(150,463,1)
(837,321,1)
(795,80,1)
(480,502,1)
(566,870,1)
(803,257,1)
(813,620,1)
(631,523,1)
(401,891,1)
(641,70,1)
(394,116,1)
(817,541,1)
(813,75,1)
(383,608,1)
(613,137,1)
(558,158,1)
(808,637,1)
(303,677,1)
(516,615,1)
(423,620,1)
(143,103,1)
(11,728,1)
(172,633,1)
(850,29,1)
(775,326,1)
(52,620,1)
(487,128,1)
(313,553,1)
(627,0,1)
(670,128,1)
(229,784,1)
(300,305,1)
(845,43,1)
(251,143,1)
(197,600,1)
(869,218,1)
(937,434,1)
(138,298,1)
(581,569,1)
(22,946,1)
(735,351,1)
(161,309,1)
(692,452,1)
(618,45,1)
(648,567,1)
(158,587,1)
(874,396,1)
(557,143,1)
(798,80,1)
(361,534,1)
(697,858,1)
(836,246,1)
(82,573,1)
(503,86,1)
(487,670,1)
(58,593,1)
(575,835,1)
(933,145,1)
(271,716,1)
(660,638,1)
(62,93,1)
(280,904,1)
(523,619,1)
(446,9,1)
(54,444,1)
(147,172,1)
(313,439,1)
(107,451,1)
(98,387,1)
(551,25,1)
(436,891,1)
(845,890,1)
(648,771,1)
(512,891,1)
(149,891,1)
(437,875,1)
(823,914,1)
(523,564,1)
(262,244,1)
(221,378,1)
(885,438,1)
(123,267,1)
(267,889,1)
(221,47,1)
(392,777,1)
(448,611,1)
(609,803,1)
(137,139,1)
(464,891,1)
(406,27,1)
(477,413,1)
(848,143,1)
(173,687,1)
(227,482,1)
(852,934,1)
(275,233,1)
(196,828,1)
(50,210,1)
(629,620,1)
(898,609,1)
(889,121,1)
(349,369,1)
(187,230,1)
(893,37,1)
(486,332,1)
(224,143,1)
(714,112,1)
(902,14,1)
(663,323,1)
(277,891,1)
(313,820,1)
(695,333,1)
(175,324,1)
(734,932,1)
(450,620,1)
(410,226,1)
(701,869,1)
(730,632,1)
(424,473,1)
(938,620,1)
(660,891,1)
(657,283,1)
(404,505,1)
(209,346,1)
(473,557,1)
(25,82,1)
(129,900,1)
(696,33,1)
(465,595,1)
(512,42,1)
(195,682,1)
(422,444,1)
(249,669,1)
(452,600,1)
(603,468,1)
(1,788,1)
(526,836,1)
(540,730,1)
(124,622,1)
(882,613,1)
(140,356,1)
(346,453,1)
(165,7,1)
(679,855,1)
(764,891,1)
(167,11,1)
(632,12,1)
(779,856,1)
(644,362,1)
(674,307,1)
(559,725,1)
(277,698,1)
(254,287,1)
(789,229,1)
(316,32,1)
(307,504,1)
(757,377,1)
(538,145,1)
(506,672,1)
(125,651,1)
(273,616,1)
(389,624,1)
(35,344,1)
(87,253,1)
(483,450,1)
(207,414,1)
(704,787,1)
(941,772,1)
(575,445,1)
(77,899,1)
(645,240,1)
(930,195,1)
(41,891,1)
(417,364,1)
(51,696,1)
(671,216,1)
(698,294,1)
(364,653,1)
(357,466,1)
(451,901,1)
(199,591,1)
(63,91,1)
(90,241,1)
(145,891,1)
(187,669,1)
(624,469,1)
(515,812,1)
(313,803,1)
(576,879,1)
(622,620,1)
(447,824,1)
(350,22,1)
(218,891,1)
(72,563,1)
(286,328,1)
(343,158,1)
(762,651,1)
(666,694,1)
(619,564,1)
(212,697,1)
(654,462,1)
(401,407,1)
(917,853,1)
(250,509,1)
(244,156,1)
(246,533,1)
(885,21,1)
(434,366,1)
(56,810,1)
(263,129,1)
(882,162,1)
(762,363,1)
(254,568,1)
(113,320,1)
(764,847,1)
(750,212,1)
(885,631,1)
(236,785,1)
(690,620,1)
(652,891,1)
(464,143,1)
(886,420,1)
(103,704,1)
(821,935,1)
(184,891,1)
(853,891,1)
(907,217,1)
(80,119,1)
(592,337,1)
(326,290,1)
(795,798,1)
(685,552,1)
(747,174,1)
(44,138,1)
(822,536,1)
(156,620,1)
(443,110,1)
(396,805,1)
(469,479,1)
(815,842,1)
(719,519,1)
(539,592,1)
(197,684,1)
(945,528,1)
(848,837,1)
(413,891,1)
(647,425,1)
(162,613,1)
(906,822,1)
(244,243,1)
(97,47,1)
(261,585,1)
(871,15,1)
(771,237,1)
(472,891,1)
(62,524,1)
(585,285,1)
(439,485,1)
(856,412,1)
(155,895,1)
(869,204,1)
(687,689,1)
(784,795,1)
(73,472,1)
(649,494,1)
(700,620,1)
(853,101,1)
(675,20,1)
(823,62,1)
(311,786,1)
(532,757,1)
(159,690,1)
(878,389,1)
(841,171,1)
(803,822,1)
(227,891,1)
(289,506,1)
(344,891,1)
(608,94,1)
(411,620,1)
(705,336,1)
(329,944,1)
(462,329,1)
(59,700,1)
(897,293,1)
(356,601,1)
(182,891,1)
(117,143,1)
(417,436,1)
(448,306,1)
(786,620,1)
(395,486,1)
(779,177,1)
(900,620,1)
(144,554,1)
(747,563,1)
(661,662,1)
(405,322,1)
(712,643,1)
(571,143,1)
(525,891,1)
(794,891,1)
(328,149,1)
(694,794,1)
(190,891,1)
(904,901,1)
(139,647,1)
(849,264,1)
(899,143,1)
(313,885,1)
(875,55,1)
(736,477,1)
(476,159,1)
(103,129,1)
(146,394,1)
(408,153,1)
(187,278,1)
(16,537,1)
(716,49,1)
(281,196,1)
(763,248,1)
(279,143,1)
(829,510,1)
(195,717,1)
(547,381,1)
(48,891,1)
(656,513,1)
(331,517,1)
(552,759,1)
(818,620,1)
(203,261,1)
(926,723,1)
(561,677,1)
(693,97,1)
(283,632,1)
(89,354,1)
(522,620,1)
(950,143,1)
(928,891,1)
(428,620,1)
(760,259,1)
(328,297,1)
(417,278,1)
(888,208,1)
(674,268,1)
(500,897,1)
(315,840,1)
(397,418,1)
(24,648,1)
(633,355,1)
(858,71,1)
(894,189,1)
(118,328,1)
(224,891,1)
(807,74,1)
(149,763,1)
(570,760,1)
(778,765,1)
(39,800,1)
(316,74,1)
(0,455,1)
(329,566,1)
(21,831,1)
(184,143,1)
(122,314,1)
(176,40,1)
(228,817,1)
(197,278,1)
(589,891,1)
(456,911,1)
(840,596,1)
(857,493,1)
(92,620,1)
(116,846,1)
(25,849,1)
(187,383,1)
(102,358,1)
(527,293,1)
(33,408,1)
(543,118,1)
(80,891,1)
(803,906,1)
(5,652,1)
(259,751,1)
(521,620,1)
(180,260,1)
(598,891,1)
(56,333,1)
(829,891,1)
(166,666,1)
(420,142,1)
(604,154,1)
(684,891,1)
(174,269,1)
(351,859,1)
(859,891,1)
(214,620,1)
(815,891,1)
(849,731,1)
(294,339,1)
(156,742,1)
(100,815,1)
(699,507,1)
(851,278,1)
(557,891,1)
(75,606,1)
(2,676,1)
(335,375,1)
(950,234,1)
(810,818,1)
(175,891,1)
(721,620,1)
(513,216,1)
(510,640,1)
(479,383,1)
(627,179,1)
(31,77,1)
(251,597,1)
(578,826,1)
(117,391,1)
(637,185,1)
(267,399,1)
(234,811,1)
(179,746,1)
(11,880,1)
(752,620,1)
(453,719,1)
(422,54,1)
(71,891,1)
(751,551,1)
(725,512,1)
(366,423,1)
(358,99,1)
(764,143,1)
(451,245,1)
(365,782,1)
(94,301,1)
(266,620,1)
(718,89,1)
(216,915,1)
(377,221,1)
(28,56,1)
(815,143,1)
(114,663,1)
(922,893,1)
(632,891,1)
(104,188,1)
(278,667,1)
(390,281,1)
(96,95,1)
(316,637,1)
(197,383,1)
(318,134,1)
(412,52,1)
(669,443,1)
(330,485,1)
(267,778,1)
(141,792,1)
(103,226,1)
(349,360,1)
(816,370,1)
(183,143,1)
(935,590,1)
(375,471,1)
(201,627,1)
(397,891,1)
(848,891,1)
(642,501,1)
(152,60,1)
(660,143,1)
(859,296,1)
(589,927,1)
(253,860,1)
(411,741,1)
(502,789,1)
(378,489,1)
(639,859,1)
(805,931,1)
(169,948,1)
(880,134,1)
(590,284,1)
(74,361,1)
(335,791,1)
(662,556,1)
(814,770,1)
(786,135,1)
(924,39,1)
(299,66,1)
(198,620,1)
(360,369,1)
(872,845,1)
(730,189,1)
(321,635,1)
(17,411,1)
(95,724,1)
(491,340,1)
(416,911,1)
(241,302,1)
(108,96,1)
(259,143,1)
(772,631,1)
(157,891,1)
(756,211,1)
(913,20,1)
(700,688,1)
(421,721,1)
(53,890,1)
(285,424,1)
(42,69,1)
(911,13,1)
(844,620,1)
(890,6,1)
(73,171,1)
(284,387,1)
(686,862,1)
(381,701,1)
(693,839,1)
(438,21,1)
(313,542,1)
(536,896,1)
(413,919,1)
(493,755,1)
(612,170,1)
(292,70,1)
(461,467,1)
(587,508,1)
(239,912,1)
(677,397,1)
(48,143,1)
(653,790,1)
(86,891,1)
(616,793,1)
(534,250,1)
(650,175,1)
(352,871,1)
(337,891,1)
(450,498,1)
(304,272,1)
(830,705,1)
(385,523,1)
(181,620,1)
(425,620,1)
(419,127,1)
(635,295,1)
(13,620,1)
(420,616,1)
(224,239,1)
(403,576,1)
(188,182,1)
(196,92,1)
(81,211,1)
(594,226,1)
(716,939,1)
(765,426,1)
(928,440,1)
(106,928,1)
(445,143,1)
(153,448,1)
(508,675,1)
(47,78,1)
(446,618,1)
(690,868,1)
(662,483,1)
(531,246,1)
(558,166,1)
(912,535,1)
(109,81,1)
(171,620,1)
(828,92,1)
(61,176,1)
(710,166,1)
(460,44,1)
(418,872,1)
(460,563,1)
(186,31,1)
(91,335,1)
(472,68,1)
(721,342,1)
(476,470,1)
(948,199,1)
(300,891,1)
(313,195,1)
(588,830,1)
(560,529,1)
(591,191,1)
(491,154,1)
(445,891,1)
(854,346,1)
(233,512,1)
(946,735,1)
(938,692,1)
(179,382,1)
(250,353,1)
(530,126,1)
(86,194,1)
(120,205,1)
(743,442,1)
(727,327,1)
(753,774,1)
(295,398,1)
(372,304,1)
(811,940,1)
(517,743,1)
(313,225,1)
(899,891,1)
(46,565,1)
(823,417,1)
(45,571,1)
(743,59,1)
(897,527,1)
(855,48,1)
(622,206,1)
(215,46,1)
(236,620,1)
(200,620,1)
(222,85,1)
(204,620,1)
(320,395,1)
(313,491,1)
(640,1,1)
(541,132,1)
(504,821,1)
(579,856,1)
(652,683,1)
(862,749,1)
(546,848,1)
(596,838,1)
(382,746,1)
(182,160,1)
(290,643,1)
(706,125,1)
(564,18,1)
(410,544,1)
(555,715,1)
(847,581,1)
(901,929,1)
(910,660,1)
(355,314,1)
(225,629,1)
(737,288,1)
(861,480,1)
(347,86,1)
(471,799,1)
(571,891,1)
(709,814,1)
(123,66,1)
(399,430,1)
(529,349,1)
(842,429,1)
(233,26,1)
(715,152,1)
(370,72,1)
(210,312,1)
(543,710,1)
(573,562,1)
(187,696,1)
(818,457,1)
(712,104,1)
(744,265,1)
(724,150,1)
(669,110,1)
(597,374,1)
(467,542,1)
(491,580,1)
(868,729,1)
(379,641,1)
(525,887,1)
(544,851,1)
(679,48,1)
(541,404,1)
(521,368,1)
(468,292,1)
(386,379,1)
(624,620,1)
(130,17,1)
(7,465,1)
(484,350,1)
(37,427,1)
(404,100,1)
(211,950,1)
(18,754,1)
(215,891,1)
(589,143,1)
(927,545,1)
(237,251,1)
(890,546,1)
(336,124,1)
(866,648,1)
(7,891,1)
(876,877,1)
(270,204,1)
(115,136,1)
(536,548,1)
(708,454,1)
(371,753,1)
(160,123,1)
(363,29,1)
(145,252,1)
(93,891,1)
(689,263,1)
(313,678,1)
(171,151,1)
(78,487,1)
(481,620,1)
(629,550,1)
(293,200,1)
(932,36,1)
(301,891,1)
(466,433,1)
(268,861,1)
(242,52,1)
(4,857,1)
(720,343,1)
(829,143,1)
(439,330,1)
(788,464,1)
(758,316,1)
(6,546,1)
(394,846,1)
(740,140,1)
(259,891,1)
(497,449,1)
(71,143,1)
(908,237,1)
(778,143,1)
(667,346,1)
(402,419,1)
(661,928,1)
(101,713,1)
(717,315,1)
(892,652,1)
(441,878,1)
(197,182,1)
(41,143,1)
(26,559,1)
(767,186,1)
(314,271,1)
(157,34,1)
(755,114,1)
(919,532,1)
(92,905,1)
(383,94,1)
(185,807,1)
(69,250,1)
(284,300,1)
(340,727,1)
(707,620,1)
(257,406,1)
(198,435,1)
(550,796,1)
(827,422,1)
(445,282,1)
(723,747,1)
(72,650,1)
(287,8,1)
(489,5,1)
(613,131,1)
(746,620,1)
(741,750,1)
(155,731,1)
(136,623,1)
(909,421,1)
(417,684,1)
(455,401,1)
(265,752,1)
(615,891,1)
(831,500,1)
(84,496,1)
(301,740,1)
(812,404,1)
(377,489,1)
(593,891,1)
(79,820,1)
(672,58,1)
(672,593,1)
(507,662,1)
(800,416,1)
(903,703,1)
(947,84,1)
(761,572,1)
(749,543,1)
(866,24,1)
(512,143,1)
(362,737,1)
(635,31,1)
(950,891,1)
(607,620,1)
(732,371,1)
(915,76,1)
(895,731,1)
(279,773,1)
(478,256,1)
(427,720,1)
(794,603,1)
(187,684,1)
(831,897,1)
(342,626,1)
(863,547,1)
(839,47,1)
(805,620,1)
(177,856,1)
(373,212,1)
(621,184,1)
(905,540,1)
(41,231,1)
(322,61,1)
(313,779,1)
(435,658,1)
(680,107,1)
(742,863,1)
(470,159,1)
(900,402,1)
(691,707,1)
(309,711,1)
(257,27,1)
(76,183,1)
(142,478,1)
(580,340,1)
(217,167,1)
(701,558,1)
(821,891,1)
(506,354,1)
(593,143,1)
(896,421,1)
(819,668,1)
(204,625,1)
(111,25,1)
(187,182,1)
(823,639,1)
(867,693,1)
(801,270,1)
(631,385,1)
(40,634,1)
(683,403,1)
(287,521,1)
(825,64,1)
(902,372,1)
(245,475,1)
(219,53,1)
(533,375,1)
(499,620,1)
(190,143,1)
(584,821,1)
(36,141,1)
(524,628,1)
(881,930,1)
(170,716,1)
(262,227,1)
(593,718,1)
(444,499,1)
(38,568,1)
(433,50,1)
(722,390,1)
(914,50,1)
(282,864,1)
(535,163,1)
(509,447,1)
(436,886,1)
(830,622,1)
(388,874,1)
(610,891,1)
(509,620,1)
(112,357,1)
(790,876,1)
(754,481,1)
(232,604,1)
(230,73,1)
(130,247,1)
(60,97,1)
(387,797,1)
(207,143,1)
(323,376,1)
(711,313,1)
(668,649,1)
(65,879,1)
(205,83,1)
(586,396,1)
(600,338,1)
(605,612,1)
(628,460,1)
(871,620,1)
(248,710,1)
(48,289,1)
(729,778,1)
(298,93,1)
(320,620,1)
(339,47,1)
(626,257,1)
(36,792,1)
(856,681,1)
(380,945,1)
(71,228,1)
(213,347,1)
(565,472,1)
(64,701,1)
(85,240,1)
(880,318,1)
(377,576,1)
(85,645,1)
(197,758,1)
(337,832,1)
(428,644,1)
(806,273,1)
(463,392,1)
(658,439,1)
(123,661,1)
(240,826,1)
(865,365,1)
(446,571,1)
(787,173,1)
(126,292,1)
(61,143,1)
(50,891,1)
(154,85,1)
(738,214,1)
(375,143,1)
(416,456,1)
(313,737,1)
(835,90,1)
(201,685,1)
(849,525,1)
(23,706,1)
(949,109,1)
(256,806,1)
(839,736,1)
(285,473,1)
(770,947,1)
(276,437,1)
(545,431,1)
(356,561,1)
(771,908,1)
(212,858,1)
(661,699,1)
(542,881,1)
(537,553,1)
(302,445,1)
(595,497,1)
(172,891,1)
(73,769,1)
(937,366,1)
(744,752,1)
(207,891,1)
(802,936,1)
(0,401,1)
(861,891,1)
(557,680,1)
(936,515,1)
(566,610,1)
(572,679,1)
(914,310,1)
(272,14,1)
(458,903,1)
(197,696,1)
(779,902,1)
(562,665,1)
(399,476,1)
(883,57,1)
(400,201,1)
(191,594,1)
(258,922,1)
(164,41,1)
(707,219,1)
(189,620,1)
(804,136,1)
(939,102,1)
(93,359,1)
(522,280,1)
(730,516,1)
(111,373,1)
(313,770,1)
(52,16,1)
(13,745,1)
(264,525,1)
(643,866,1)
(27,146,1)
(375,891,1)
(607,3,1)
(301,143,1)
(726,607,2)
(478,256,2)
(198,250,2)
(103,226,2)
(857,216,2)
(841,191,2)
(652,97,2)
(619,250,2)
(86,891,2)
(588,216,2)
(875,25,2)
(800,716,2)
(450,620,2)
(194,292,2)
(376,216,2)
(140,25,2)
(394,846,2)
(176,216,2)
(519,701,2)
(95,716,2)
(82,573,2)
(528,216,2)
(184,25,2)
(807,191,2)
(624,25,2)
(775,620,2)
(17,25,2)
(662,556,2)
(454,216,2)
(904,25,2)
(8,29,2)
(129,900,2)
(623,216,2)
(464,216,2)
(441,389,2)
(257,27,2)
(410,701,2)
(37,158,2)
(7,795,2)
(340,250,2)
(711,250,2)
(633,716,2)
(96,716,2)
(380,945,2)
(738,250,2)
(191,594,2)
(295,398,2)
(187,182,2)
(212,858,2)
(133,25,2)
(814,250,2)
(424,25,2)
(579,856,2)
(562,260,2)
(845,25,2)
(159,690,2)
(468,292,2)
(31,25,2)
(770,250,2)
(764,891,2)
(17,411,2)
(425,250,2)
(705,891,2)
(23,620,2)
(525,143,2)
(400,292,2)
(937,366,2)
(666,794,2)
(903,703,2)
(412,250,2)
(148,701,2)
(440,66,2)
(691,707,2)
(877,216,2)
(871,620,2)
(792,207,2)
(347,86,2)
(331,216,2)
(181,250,2)
(141,25,2)
(601,276,2)
(916,216,2)
(399,476,2)
(478,616,2)
(120,25,2)
(622,216,2)
(197,684,2)
(702,216,2)
(726,279,2)
(571,716,2)
(170,716,2)
(215,891,2)
(736,413,2)
(207,143,2)
(649,216,2)
(190,143,2)
(244,701,2)
(132,802,2)
(592,337,2)
(313,491,2)
(837,25,2)
(453,701,2)
(318,250,2)
(487,128,2)
(823,197,2)
(237,251,2)
(684,701,2)
(328,149,2)
(262,701,2)
(77,25,2)
(204,620,2)
(417,216,2)
(275,250,2)
(263,701,2)
(897,293,2)
(493,216,2)
(212,25,2)
(743,216,2)
(71,25,2)
(102,99,2)
(233,512,2)
(686,543,2)
(326,643,2)
(869,218,2)
(571,143,2)
(429,25,2)
(885,631,2)
(198,620,2)
(439,485,2)
(485,891,2)
(149,891,2)
(732,29,2)
(66,96,2)
(906,250,2)
(860,250,2)
(529,285,2)
(310,795,2)
(224,216,2)
(920,117,2)
(92,620,2)
(272,856,2)
(794,891,2)
(54,250,2)
(596,250,2)
(183,701,2)
(73,769,2)
(775,643,2)
(615,891,2)
(880,134,2)
(213,86,2)
(746,86,2)
(509,191,2)
(861,891,2)
(483,66,2)
(653,216,2)
(5,97,2)
(736,97,2)
(558,158,2)
(225,250,2)
(886,216,2)
(933,145,2)
(41,260,2)
(764,250,2)
(634,216,2)
(849,731,2)
(313,779,2)
(547,701,2)
(70,674,2)
(772,250,2)
(50,891,2)
(542,250,2)
(205,620,2)
(485,250,2)
(163,819,2)
(601,25,2)
(320,216,2)
(97,543,2)
(74,191,2)
(557,891,2)
(536,250,2)
(866,648,2)
(611,716,2)
(767,25,2)
(593,891,2)
(190,891,2)
(512,891,2)
(379,70,2)
(813,620,2)
(504,268,2)
(532,97,2)
(501,543,2)
(279,891,2)
(306,938,2)
(361,191,2)
(157,216,2)
(568,29,2)
(481,250,2)
(135,96,2)
(155,216,2)
(706,651,2)
(489,97,2)
(909,250,2)
(789,891,2)
(14,620,2)
(845,890,2)
(12,216,2)
(204,558,2)
(118,328,2)
(901,25,2)
(7,891,2)
(260,155,2)
(166,666,2)
(847,250,2)
(804,216,2)
(97,47,2)
(578,250,2)
(950,25,2)
(15,216,2)
(172,891,2)
(564,754,2)
(544,346,2)
(406,250,2)
(200,250,2)
(472,191,2)
(434,25,2)
(168,250,2)
(41,143,2)
(59,700,2)
(334,701,2)
(581,250,2)
(432,522,2)
(716,643,2)
(99,775,2)
(806,616,2)
(820,250,2)
(174,292,2)
(131,250,2)
(626,250,2)
(217,250,2)
(899,891,2)
(747,563,2)
(216,915,2)
(423,620,2)
(661,66,2)
(284,300,2)
(699,66,2)
(195,717,2)
(35,191,2)
(145,292,2)
(766,25,2)
(512,143,2)
(280,25,2)
(754,250,2)
(32,191,2)
(123,643,2)
(511,856,2)
(262,244,2)
(192,66,2)
(358,643,2)
(387,268,2)
(940,920,2)
(523,564,2)
(316,637,2)
(278,667,2)
(950,143,2)
(313,885,2)
(327,250,2)
(103,346,2)
(403,97,2)
(565,191,2)
(214,250,2)
(190,216,2)
(839,736,2)
(797,268,2)
(802,25,2)
(262,227,2)
(52,250,2)
(300,891,2)
(208,829,2)
(261,25,2)
(527,250,2)
(417,436,2)
(530,292,2)
(250,509,2)
(385,250,2)
(726,216,2)
(575,835,2)
(494,216,2)
(819,620,2)
(700,216,2)
(802,936,2)
(302,216,2)
(313,803,2)
(860,161,2)
(72,563,2)
(322,216,2)
(678,250,2)
(521,620,2)
(871,216,2)
(643,216,2)
(445,143,2)
(277,543,2)
(570,25,2)
(441,25,2)
(363,29,2)
(679,216,2)
(57,250,2)
(550,250,2)
(880,250,2)
(850,29,2)
(640,216,2)
(293,200,2)
(693,166,2)
(947,620,2)
(374,216,2)
(445,216,2)
(787,701,2)
(676,250,2)
(346,701,2)
(476,159,2)
(36,792,2)
(411,25,2)
(557,25,2)
(665,260,2)
(11,250,2)
(717,620,2)
(744,752,2)
(187,600,2)
(919,97,2)
(251,143,2)
(9,716,2)
(416,911,2)
(616,216,2)
(866,216,2)
(566,610,2)
(940,760,2)
(729,96,2)
(592,193,2)
(769,215,2)
(159,96,2)
(529,349,2)
(635,295,2)
(931,96,2)
(836,246,2)
(553,266,2)
(313,553,2)
(804,136,2)
(671,216,2)
(716,939,2)
(534,191,2)
(312,795,2)
(412,52,2)
(288,250,2)
(642,277,2)
(417,278,2)
(91,216,2)
(805,620,2)
(370,72,2)
(22,563,2)
(902,372,2)
(659,216,2)
(377,221,2)
(20,891,2)
(883,250,2)
(216,701,2)
(635,25,2)
(369,25,2)
(268,861,2)
(47,543,2)
(573,562,2)
(363,254,2)
(771,237,2)
(81,211,2)
(284,387,2)
(516,216,2)
(24,216,2)
(337,701,2)
(107,25,2)
(427,158,2)
(637,191,2)
(920,25,2)
(173,701,2)
(835,216,2)
(80,891,2)
(210,795,2)
(70,795,2)
(372,856,2)
(149,710,2)
(755,216,2)
(95,724,2)
(366,25,2)
(377,576,2)
(464,891,2)
(835,90,2)
(218,558,2)
(491,154,2)
(613,137,2)
(687,620,2)
(90,620,2)
(437,620,2)
(64,701,2)
(128,891,2)
(250,191,2)
(791,144,2)
(201,685,2)
(196,216,2)
(849,525,2)
(508,329,2)
(555,97,2)
(575,216,2)
(73,171,2)
(373,25,2)
(62,93,2)
(73,191,2)
(443,216,2)
(771,216,2)
(510,216,2)
(712,216,2)
(644,250,2)
(451,245,2)
(144,554,2)
(184,891,2)
(46,191,2)
(245,25,2)
(585,25,2)
(230,191,2)
(473,557,2)
(691,25,2)
(808,191,2)
(56,216,2)
(313,439,2)
(764,143,2)
(594,61,2)
(525,260,2)
(701,158,2)
(409,25,2)
(219,25,2)
(932,120,2)
(132,25,2)
(744,216,2)
(254,29,2)
(13,716,2)
(690,620,2)
(476,96,2)
(647,425,2)
(672,593,2)
(142,616,2)
(823,639,2)
(573,260,2)
(714,112,2)
(915,701,2)
(674,268,2)
(195,250,2)
(821,891,2)
(509,620,2)
(542,891,2)
(782,25,2)
(881,250,2)
(825,701,2)
(254,287,2)
(439,250,2)
(293,250,2)
(531,246,2)
(356,601,2)
(48,891,2)
(899,143,2)
(651,70,2)
(622,620,2)
(750,25,2)
(315,250,2)
(939,643,2)
(220,292,2)
(941,250,2)
(147,716,2)
(366,423,2)
(561,25,2)
(394,250,2)
(789,795,2)
(182,643,2)
(157,891,2)
(719,701,2)
(303,25,2)
(936,25,2)
(301,143,2)
(541,132,2)
(189,620,2)
(313,569,2)
(299,66,2)
(349,25,2)
(856,412,2)
(868,96,2)
(632,216,2)
(518,216,2)
(467,250,2)
(83,25,2)
(420,216,2)
(879,891,2)
(535,163,2)
(840,250,2)
(428,250,2)
(279,216,2)
(117,25,2)
(560,25,2)
(70,789,2)
(815,25,2)
(474,250,2)
(526,246,2)
(856,250,2)
(307,504,2)
(928,891,2)
(228,25,2)
(727,250,2)
(848,891,2)
(627,86,2)
(717,250,2)
(236,216,2)
(413,891,2)
(751,25,2)
(903,216,2)
(395,216,2)
(537,250,2)
(444,250,2)
(752,216,2)
(26,620,2)
(782,937,2)
(337,891,2)
(846,250,2)
(201,627,2)
(186,25,2)
(73,472,2)
(92,216,2)
(874,311,2)
(313,737,2)
(564,250,2)
(890,25,2)
(404,25,2)
(297,710,2)
(696,716,2)
(136,216,2)
(552,292,2)
(377,97,2)
(944,166,2)
(586,96,2)
(660,143,2)
(199,191,2)
(707,620,2)
(703,620,2)
(937,25,2)
(695,216,2)
(491,250,2)
(600,716,2)
(839,97,2)
(313,542,2)
(849,260,2)
(917,250,2)
(698,543,2)
(431,216,2)
(869,558,2)
(589,891,2)
(549,250,2)
(535,216,2)
(893,158,2)
(227,701,2)
(606,250,2)
(505,25,2)
(685,292,2)
(745,716,2)
(935,268,2)
(1,216,2)
(291,651,2)
(516,615,2)
(867,166,2)
(628,460,2)
(758,191,2)
(402,701,2)
(616,793,2)
(71,143,2)
(690,96,2)
(723,747,2)
(678,764,2)
(569,250,2)
(815,143,2)
(4,216,2)
(221,97,2)
(824,191,2)
(779,250,2)
(568,774,2)
(718,354,2)
(265,216,2)
(197,182,2)
(105,25,2)
(858,25,2)
(155,731,2)
(207,891,2)
(604,250,2)
(494,190,2)
(489,5,2)
(411,620,2)
(298,158,2)
(861,789,2)
(543,166,2)
(928,143,2)
(311,786,2)
(425,620,2)
(743,59,2)
(844,620,2)
(65,97,2)
(782,81,2)
(610,166,2)
(576,97,2)
(762,363,2)
(307,268,2)
(779,856,2)
(890,546,2)
(360,25,2)
(788,216,2)
(465,795,2)
(276,25,2)
(314,716,2)
(834,216,2)
(336,216,2)
(643,866,2)
(629,620,2)
(256,616,2)
(117,891,2)
(901,621,2)
(187,669,2)
(42,250,2)
(222,250,2)
(306,716,2)
(823,914,2)
(541,25,2)
(77,899,2)
(595,795,2)
(803,257,2)
(694,292,2)
(342,250,2)
(182,891,2)
(810,818,2)
(854,346,2)
(292,795,2)
(330,250,2)
(701,166,2)
(333,216,2)
(571,891,2)
(127,701,2)
(153,448,2)
(507,66,2)
(823,417,2)
(823,187,2)
(541,404,2)
(773,216,2)
(740,25,2)
(762,70,2)
(61,143,2)
(557,143,2)
(493,755,2)
(356,25,2)
(29,651,2)
(277,891,2)
(851,346,2)
(130,25,2)
(136,620,2)
(225,629,2)
(55,25,2)
(383,25,2)
(523,250,2)
(897,250,2)
(784,795,2)
(621,184,2)
(171,620,2)
(491,340,2)
(244,156,2)
(48,143,2)
(446,618,2)
(3,216,2)
(207,25,2)
(51,716,2)
(432,25,2)
(818,216,2)
(75,250,2)
(386,891,2)
(742,701,2)
(785,216,2)
(386,70,2)
(540,216,2)
(172,143,2)
(898,250,2)
(205,25,2)
(524,158,2)
(830,622,2)
(925,558,2)
(658,250,2)
(122,716,2)
(480,789,2)
(829,216,2)
(289,216,2)
(908,216,2)
(471,216,2)
(328,710,2)
(576,879,2)
(295,25,2)
(134,813,2)
(915,143,2)
(115,216,2)
(165,795,2)
(97,642,2)
(674,307,2)
(763,710,2)
(855,216,2)
(470,96,2)
(948,191,2)
(285,25,2)
(354,216,2)
(43,691,2)
(603,292,2)
(896,421,2)
(513,216,2)
(214,620,2)
(399,96,2)
(779,902,2)
(590,268,2)
(421,721,2)
(179,746,2)
(848,143,2)
(58,354,2)
(608,25,2)
(936,620,2)
(373,212,2)
(878,25,2)
(777,716,2)
(452,716,2)
(164,260,2)
(187,191,2)
(197,600,2)
(517,216,2)
(713,250,2)
(631,250,2)
(460,563,2)
(688,216,2)
(71,891,2)
(529,25,2)
(137,647,2)
(684,891,2)
(45,716,2)
(324,191,2)
(662,66,2)
(477,97,2)
(607,620,2)
(122,314,2)
(911,716,2)
(829,891,2)
(813,250,2)
(940,25,2)
(375,891,2)
(917,853,2)
(929,25,2)
(294,543,2)
(417,684,2)
(613,250,2)
(333,157,2)
(35,344,2)
(594,226,2)
(721,250,2)
(445,891,2)
(724,716,2)
(950,891,2)
(637,891,2)
(479,25,2)
(863,701,2)
(150,716,2)
(539,701,2)
(793,216,2)
(543,118,2)
(98,268,2)
(896,250,2)
(285,473,2)
(852,891,2)
(121,96,2)
(756,25,2)
(435,250,2)
(672,354,2)
(153,716,2)
(949,25,2)
(629,250,2)
(351,701,2)
(820,474,2)
(78,543,2)
(278,346,2)
(128,543,2)
(791,659,2)
(359,158,2)
(271,716,2)
(258,158,2)
(196,92,2)
(598,143,2)
(0,401,2)
(869,204,2)
(375,216,2)
(469,25,2)
(538,292,2)
(246,659,2)
(821,268,2)
(810,216,2)
(311,96,2)
(765,96,2)
(113,216,2)
(112,795,2)
(32,852,2)
(25,216,2)
(269,292,2)
(47,78,2)
(661,662,2)
(464,143,2)
(946,701,2)
(865,25,2)
(803,250,2)
(162,250,2)
(746,620,2)
(436,216,2)
(397,143,2)
(287,29,2)
(392,716,2)
(224,891,2)
(945,528,2)
(396,96,2)
(120,205,2)
(660,891,2)
(548,250,2)
(882,250,2)
(236,620,2)
(799,216,2)
(778,891,2)
(405,216,2)
(41,891,2)
(731,744,2)
(721,620,2)
(853,250,2)
(187,684,2)
(885,21,2)
(129,701,2)
(85,250,2)
(217,11,2)
(731,216,2)
(528,589,2)
(48,216,2)
(554,246,2)
(739,216,2)
(389,25,2)
(44,158,2)
(598,891,2)
(66,388,2)
(692,716,2)
(675,20,2)
(344,891,2)
(624,620,2)
(822,536,2)
(499,620,2)
(290,643,2)
(353,191,2)
(809,260,2)
(795,80,2)
(888,216,2)
(313,820,2)
(78,487,2)
(143,103,2)
(525,891,2)
(734,25,2)
(889,96,2)
(380,216,2)
(741,25,2)
(206,216,2)
(110,224,2)
(23,651,2)
(632,891,2)
(762,651,2)
(16,250,2)
(296,701,2)
(320,620,2)
(332,216,2)
(777,605,2)
(475,25,2)
(486,216,2)
(346,453,2)
(450,66,2)
(421,250,2)
(93,158,2)
(757,97,2)
(344,191,2)
(922,893,2)
(680,25,2)
(362,250,2)
(28,216,2)
(830,216,2)
(85,240,2)
(256,620,2)
(794,292,2)
(158,587,2)
(759,292,2)
(90,216,2)
(679,48,2)
(68,191,2)
(175,891,2)
(791,216,2)
(593,354,2)
(463,777,2)
(642,543,2)
(607,216,2)
(669,110,2)
(381,701,2)
(154,85,2)
(397,891,2)
(778,96,2)
(846,428,2)
(778,143,2)
(859,891,2)
(316,191,2)
(554,620,2)
(160,643,2)
(461,250,2)
(350,701,2)
(323,216,2)
(101,250,2)
(738,214,2)
(398,620,2)
(350,22,2)
(853,891,2)
(227,891,2)
(165,7,2)
(126,292,2)
(193,701,2)
(169,191,2)
(378,97,2)
(521,29,2)
(187,278,2)
(397,25,2)
(492,25,2)
(259,143,2)
(535,494,2)
(113,320,2)
(39,716,2)
(900,701,2)
(124,216,2)
(240,826,2)
(436,891,2)
(568,732,2)
(281,196,2)
(89,354,2)
(437,25,2)
(158,166,2)
(660,216,2)
(357,795,2)
(730,516,2)
(36,25,2)
(29,23,2)
(401,891,2)
(458,216,2)
(82,260,2)
(546,25,2)
(251,891,2)
(780,250,2)
(592,701,2)
(934,191,2)
(928,66,2)
(669,216,2)
(605,716,2)
(635,31,2)
(14,856,2)
(815,891,2)
(0,86,2)
(893,891,2)
(651,386,2)
(580,250,2)
(575,445,2)
(433,795,2)
(705,143,2)
(185,191,2)
(175,191,2)
(40,216,2)
(462,329,2)
(1,464,2)
(761,216,2)
(418,25,2)
(926,292,2)
(398,25,2)
(18,250,2)
(862,543,2)
(371,29,2)
(621,25,2)
(792,25,2)
(707,25,2)
(562,620,2)
(747,292,2)
(292,70,2)
(117,143,2)
(907,250,2)
(715,97,2)
(710,166,2)
(363,651,2)
(143,701,2)
(822,250,2)
(407,86,2)
(481,620,2)
(661,928,2)
(22,701,2)
(827,250,2)
(329,566,2)
(20,329,2)
(466,795,2)
(301,25,2)
(704,701,2)
(858,71,2)
(594,216,2)
(266,620,2)
(811,25,2)
(842,25,2)
(536,896,2)
(700,620,2)
(444,499,2)
(422,250,2)
(364,216,2)
(627,0,2)
(426,96,2)
(915,891,2)
(87,250,2)
(796,250,2)
(598,216,2)
(273,616,2)
(826,181,2)
(218,891,2)
(451,901,2)
(369,203,2)
(340,327,2)
(451,25,2)
(705,216,2)
(648,216,2)
(396,805,2)
(313,225,2)
(268,789,2)
(663,216,2)
(267,399,2)
(870,166,2)
(203,25,2)
(142,478,2)
(572,216,2)
(79,250,2)
(62,158,2)
(181,620,2)
(257,250,2)
(484,701,2)
(627,292,2)
(103,129,2)
(242,250,2)
(187,383,2)
(422,444,2)
(61,891,2)
(309,250,2)
(189,216,2)
(730,632,2)
(86,292,2)
(589,143,2)
(163,216,2)
(423,25,2)
(313,195,2)
(27,250,2)
(722,216,2)
(389,624,2)
(553,250,2)
(927,216,2)
(752,620,2)
(404,100,2)
(234,25,2)
(831,897,2)
(21,831,2)
(615,216,2)
(69,250,2)
(286,710,2)
(687,701,2)
(100,25,2)
(161,143,2)
(673,250,2)
(591,191,2)
(848,25,2)
(259,25,2)
(428,620,2)
(457,216,2)
(913,329,2)
(823,62,2)
(723,292,2)
(240,250,2)
(301,891,2)
(641,70,2)
(605,620,2)
(558,166,2)
(419,701,2)
(708,216,2)
(111,216,2)
(33,716,2)
(905,216,2)
(438,250,2)
(503,86,2)
(231,260,2)
(365,25,2)
(373,130,2)
(335,375,2)
(697,25,2)
(313,250,2)
(859,701,2)
(203,620,2)
(639,701,2)
(233,26,2)
(895,216,2)
(885,250,2)
(675,329,2)
(638,216,2)
(430,96,2)
(648,771,2)
(902,856,2)
(714,795,2)
(349,369,2)
(103,701,2)
(355,716,2)
(21,250,2)
(245,432,2)
(11,880,2)
(877,236,2)
(84,250,2)
(737,217,2)
(587,329,2)
(939,102,2)
(253,250,2)
(662,483,2)
(597,216,2)
(144,246,2)
(774,29,2)
(146,250,2)
(650,191,2)
(730,189,2)
(313,770,2)
(754,481,2)
(274,789,2)
(760,259,2)
(522,25,2)
(370,191,2)
(899,25,2)
(546,848,2)
(237,216,2)
(246,216,2)
(27,394,2)
(279,143,2)
(300,268,2)
(803,822,2)
(924,716,2)
(197,696,2)
(276,437,2)
(254,568,2)
(769,191,2)
(910,660,2)
(247,25,2)
(316,74,2)
(625,558,2)
(474,620,2)
(874,396,2)
(786,96,2)
(384,716,2)
(53,25,2)
(910,871,2)
(415,216,2)
(292,762,2)
(321,25,2)
(251,216,2)
(409,441,2)
(226,346,2)
(737,250,2)
(674,789,2)
(99,643,2)
(408,716,2)
(556,66,2)
(682,250,2)
(50,795,2)
(506,216,2)
(770,947,2)
(335,791,2)
(264,260,2)
(154,250,2)
(166,292,2)
(902,14,2)
(122,147,2)
(382,86,2)
(533,216,2)
(110,216,2)
(618,716,2)
(879,97,2)
(776,701,2)
(559,250,2)
(329,166,2)
(732,891,2)
(414,25,2)
(248,710,2)
(612,716,2)
(134,250,2)
(26,250,2)
(34,216,2)
(832,701,2)
(872,25,2)
(13,620,2)
(735,701,2)
(156,701,2)
(180,260,2)
(512,250,2)
(446,716,2)
(599,25,2)
(800,416,2)
(760,25,2)
(233,250,2)
(545,216,2)
(354,620,2)
(338,716,2)
(442,216,2)
(270,558,2)
(327,422,2)
(657,216,2)
(561,677,2)
(6,25,2)
(681,250,2)
(654,329,2)
(416,716,2)
(38,29,2)
(790,563,2)
(818,620,2)
(307,284,2)
(482,701,2)
(914,50,2)
(504,821,2)
(125,651,2)
(515,25,2)
(82,41,2)
(49,643,2)
(938,620,2)
(945,216,2)
(805,96,2)
(793,620,2)
(933,292,2)
(449,795,2)
(755,620,2)
(888,208,2)
(709,250,2)
(845,43,2)
(305,268,2)
(748,643,2)
(243,701,2)
(211,25,2)
(514,346,2)
(685,891,2)
(737,882,2)
(801,558,2)
(829,143,2)
(161,891,2)
(74,620,2)
(753,29,2)
(172,716,2)
(653,790,2)
(947,250,2)
(876,216,2)
(215,191,2)
(912,216,2)
(177,856,2)
(171,191,2)
(720,158,2)
(463,716,2)
(932,36,2)
(932,25,2)
(587,675,2)
(5,652,2)
(791,246,2)
(147,172,2)
(139,250,2)
(138,158,2)
(197,191,2)
(677,397,2)
(339,543,2)
(413,97,2)
(448,716,2)
(914,795,2)
(59,216,2)
(826,250,2)
(267,96,2)
(497,795,2)
(187,696,2)
(102,643,2)
(43,25,2)
(790,216,2)
(114,216,2)
(104,643,2)
(188,643,2)
(197,383,2)
(109,25,2)
(375,143,2)
(888,380,2)
(208,216,2)
(593,143,2)
(145,891,2)
(377,489,2)
(448,306,2)
(610,891,2)
(56,333,2)
(864,216,2)
(259,891,2)
(659,804,2)
(652,891,2)
(179,86,2)
(348,701,2)
(666,292,2)
(911,13,2)
(900,620,2)
(589,216,2)
(158,329,2)
(100,815,2)
(67,66,2)
(60,97,2)
(455,86,2)
(645,250,2)
(910,216,2)
(282,216,2)
(668,216,2)
(812,25,2)
(670,543,2)
(391,25,2)
(388,96,2)
(703,216,2)
(749,543,2)
(483,450,2)
(287,521,2)
(281,216,2)
(517,743,2)
(617,25,2)
(922,158,2)
(786,620,2)
(730,216,2)
(522,620,2)
(352,216,2)
(284,268,2)
(496,250,2)
(221,47,2)
(112,563,2)
(63,216,2)
(252,292,2)
(882,613,2)
(683,97,2)
(499,250,2)
(498,66,2)
(239,216,2)
(817,25,2)
(232,250,2)
(677,25,2)
(830,705,2)
(200,620,2)
(368,29,2)
(152,97,2)
(94,25,2)
(283,216,2)
(191,216,2)
(167,250,2)
(446,571,2)
(224,143,2)
(151,191,2)
(551,25,2)
(831,250,2)
(313,678,2)
(556,844,2)
(116,250,2)
(61,216,2)
(118,710,2)
(816,191,2)
(383,94,2)
(839,47,2)
(874,96,2)
(502,789,2)
(627,179,2)
(647,250,2)
(938,716,2)
(609,250,2)
(56,810,2)
(569,198,2)
(584,268,2)
(724,463,2)
(81,25,2)
(631,523,2)
(628,158,2)
(241,216,2)
(103,704,2)
(335,216,2)
(197,278,2)
(316,32,2)
(892,97,2)
(566,166,2)
(852,191,2)
(894,216,2)
(211,950,2)
(184,143,2)
(639,859,2)
(197,669,2)
(52,620,2)
(930,250,2)
(72,191,2)
(106,66,2)
(267,778,2)
(304,856,2)
(594,346,2)
(31,77,2)
(161,250,2)
(229,795,2)
(108,96,2)
(728,250,2)
(473,25,2)
(94,301,2)
(487,543,2)
(343,158,2)
(201,292,2)
(567,216,2)
(93,891,2)
(76,701,2)
(388,874,2)
(689,701,2)
(332,598,2)
(266,250,2)
(130,17,2)
(838,250,2)
(844,66,2)
(656,216,2)
(249,216,2)
(828,216,2)
(887,260,2)
(500,250,2)
(447,191,2)
(390,216,2)
(819,216,2)
(209,346,2)
(2,250,2)
(472,891,2)
(103,687,2)
(157,143,2)
(156,620,2)
(701,869,2)
(260,216,2)
(96,95,2)
(456,716,2)
(401,86,2)
(667,346,2)
(823,933,2)
(356,561,2)
(137,250,2)
(725,250,2)
(460,158,2)
-----------------------------------
(0,tmp->lastqueue->name)
(1,ast_channel_data_set(tmp->chan, "(Outgoing Line)
(2,"Called %s\\n")
(3,chan)
(4,parent)
(5,tmp->member->status)
(6,lastapp)
(7,tmp->interface)
(8,wrapuptime)
(9,NULL)
(10,macrocontext)
(11,ast_channel_caller(qe->chan)
(12,member)
(13,qe->chan)
(14,qe->chan)
(15,chan)
(16,parent)
(17,ast_channel_cdr(qe->chan)
(18,id)
(19,)
(20,tmp->member)
(21,ast_channel_connected(qe->chan)
(22,*busies)
(23,qe->parent)
(24,valid)
(25,ast_cdr_isset_unanswered()
(26,qe->chan)
(27,ast_channel_connected(qe->chan)
(28,qe)
(29,qe->parent->wrapuptime)
(30,newstate)
(31,ast_channel_cdr(tmp->chan)
(32,get_queue_member_status(tmp->member)
(33,ani)
(34,chan)
(35,ast_verb(3, "Couldn\'t call %s\\n", tmp->interface)
(36,ast_channel_cdr(tmp->chan)
(37,interface)
(38,qe)
(39,tmp)
(40,tmp)
(41,tmp->chan)
(42,chan)
(43,ast_channel_cdr(qe->chan)
(44,busies)
(45,caller)
(46,member)
(47,newstate = ast_device_state(tmp->member->interface)
(48,tmp->chan)
(49,valid)
(50,tmp->stillgoing)
(51,qe)
(52,qe->parent)
(53,qe)
(54,id)
(55,qe)
(56,ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan)
(57,qe)
(58,AST_CAUSE_ANSWERED_ELSEWHERE)
(59,ast_channel_dialed(qe->chan)
(60,LOG_WARNING)
(61,tmp->chan)
(62,return 0;)
(63,qe)
(64,tech)
(65,interface)
(66,!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan)
(67,chan)
(68,member)
(69,tmp)
(70,tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(71,tmp->chan)
(72,*busies)
(73,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(74,qe->parent)
(75,chan)
(76,chan)
(77,ast_channel_cdr(tmp->chan)
(78,ast_device_state(tmp->member->interface)
(79,qe)
(80,tmp->member)
(81,ast_channel_cdr(tmp->chan)
(82,ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan)
(83,chan)
(84,chan)
(85,ast_channel_caller(qe->chan)
(86,tmp->lastqueue)
(87,chan)
(88,if (newstate != tmp->member->status)
(89,tmp)
(90,qe->chan)
(91,macroexten)
(92,qe->parent)
(93,tmp->stillgoing)
(94,ast_channel_cdr(tmp->chan)
(95,ast_strlen_zero(ast_channel_dialed(qe->chan)
(96,!ast_strlen_zero(ast_channel_dialed(qe->chan)
(97,newstate != tmp->member->status)
(98,tmp)
(99,ast_channel_connected(qe->chan)
(100,ast_channel_cdr(tmp->chan)
(101,interface)
(102,ast_channel_connected(qe->chan)
(103,ast_request(tech, ast_channel_nativeformats(qe->chan)
(104,tmp->dial_callerid_absent = 1)
(105,chan)
(106,qe)
(107,tmp)
(108,qe)
(109,qe)
(110,ast_channel_dialed(tmp->chan)
(111,tmp)
(112,*busies)
(113,ast_channel_unlock(qe->chan)
(114,parent)
(115,"MACRO_CONTEXT")
(116,id)
(117,tmp->chan)
(118,tmp->member->status == AST_DEVICE_UNKNOWN)
(119,member)
(120,ast_channel_exten(qe->chan)
(121,NULL)
(122,ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan)
(123,tmp)
(124,tmp)
(125,qe)
(126,1)
(127,tech)
(128,tmp->member)
(129,ast_channel_nativeformats(qe->chan)
(130,ast_channel_cdr(qe->chan)
(131,name)
(132,ast_channel_cdr(qe->chan)
(133,accountcode)
(134,ast_channel_caller(qe->chan)
(135,chan)
(136,qe->chan)
(137,ast_channel_caller(qe->chan)
(138,tmp->stillgoing = 0)
(139,id)
(140,tmp)
(141,dst)
(142,ast_cdr_busy(ast_channel_cdr(qe->chan)
(143,tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan)
(144,ast_channel_context(qe->chan)
(145,tmp->stillgoing)
(146,number)
(147,ast_channel_caller(tmp->chan)
(148,tech)
(149,tmp->member)
(150,str)
(151,parent)
(152,"Found a channel matching iterface %s while status was %s changed to %s\\n")
(153,caller.id = ast_channel_connected(qe->chan)
(154,ast_channel_caller(qe->chan)
(155,ast_strlen_zero(macroexten)
(156,qe->parent)
(157,tmp->chan)
(158,(tmp->member->status != AST_DEVICE_NOT_INUSE)
(159,ast_channel_dialed(qe->chan)
(160,dial_callerid_absent)
(161,tmp->chan)
(162,str)
(163,ast_channel_redirecting(qe->chan)
(164,qe)
(165,ast_debug(1, "%s paused, can\'t receive call\\n", tmp->interface)
(166,!tmp->member->ringinuse)
(167,valid)
(168,str)
(169,interface)
(170,qe)
(171,qe->parent)
(172,tmp->chan)
(173,location)
(174,busies)
(175,do_hang(tmp)
(176,chan)
(177,"")
(178,)
(179,qe->parent->name)
(180,tmp)
(181,qe->chan)
(182,tmp->dial_callerid_absent)
(183,tmp)
(184,tmp->chan)
(185,member)
(186,qe)
(187,return 0;)
(188,1)
(189,qe->parent)
(190,tmp->chan)
(191,res = ast_call(tmp->chan, location, 0)
(192,qe)
(193,sizeof(tech)
(194,lastqueue)
(195,qe->parent->name)
(196,qe->parent->rrpos)
(197,return 1;)
(198,qe->chan)
(199,"Couldn\'t call %s\\n")
(200,qe->chan)
(201,ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\\n",\n\\n\\t\\t\\t\\t(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
(202,location)
(203,qe->chan)
(204,qe->parent)
(205,qe->chan)
(206,chan)
(207,tmp->chan)
(208,ast_channel_whentohangup(tmp->chan)
(209,location)
(210,stillgoing)
(211,ast_channel_cdr(tmp->chan)
(212,ast_channel_cdr(tmp->chan)
(213,parent)
(214,qe->chan)
(215,tmp->member)
(216,!tmp->chan)
(217,ast_channel_caller(qe->chan)
(218,tmp->member)
(219,chan)
(220,tmp)
(221,ast_devstate2str(newstate)
(222,valid)
(223,vars)
(224,tmp->chan)
(225,ast_channel_context(qe->chan)
(226,location = "")
(227,tmp->interface)
(228,chan)
(229,lastqueue)
(230,0)
(231,chan)
(232,chan)
(233,ast_channel_lock_both(tmp->chan, qe->chan)
(234,chan)
(235,if (ast_cdr_isset_unanswered()
(236,qe->parent)
(237,ast_channel_caller(tmp->chan)
(238,)
(239,chan)
(240,ast_channel_caller(qe->chan)
(241,chan)
(242,eventwhencalled)
(243,name)
(244,qe->parent->name)
(245,ast_channel_cdr(qe->chan)
(246,ast_strlen_zero(macrocontext)
(247,userfield)
(248,tmp)
(249,qe)
(250,qe->parent->eventwhencalled)
(251,tmp->chan)
(252,stillgoing)
(253,qe)
(254,time(NULL)
(255,)
(256,qe->chan)
(257,ast_channel_connected(qe->chan)
(258,tmp)
(259,tmp->chan)
(260,!ast_strlen_zero(macroexten)
(261,chan)
(262,ast_debug(1, "Priority queue delaying call to %s:%s\\n", qe->parent->name, tmp->interface)
(263,qe)
(264,macroexten)
(265,"MACRO_EXTEN")
(266,qe->chan)
(267,ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)
(268,tmp->lastqueue->wrapuptime)
(269,tmp->stillgoing = 0)
(270,tmp)
(271,caller)
(272,vars)
(273,qe)
(274,wrapuptime)
(275,EVENT_FLAG_AGENT)
(276,ast_channel_cdr(qe->chan)
(277,tmp->member)
(278,*location++)
(279,tmp->chan)
(280,chan)
(281,qe->parent->rrpos++)
(282,chan)
(283,tmp)
(284,time(NULL)
(285,ast_channel_cdr(tmp->chan)
(286,AST_DEVICE_UNKNOWN)
(287,qe->parent->wrapuptime)
(288,"unknown")
(289,chan)
(290,qe)
(291,wrapuptime)
(292,(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(293,ast_channel_connected(qe->chan)
(294,tmp)
(295,ast_channel_context(qe->chan)
(296,stillgoing)
(297,status)
(298,0)
(299,tmp)
(300,tmp->lastcall)
(301,tmp->chan)
(302,qe)
(303,lastdata)
(304,vars)
(305,lastcall)
(306,ast_channel_connected(qe->chan)
(307,time(NULL)
(308,tmp)
(309,chan)
(310,0)
(311,ast_channel_exten(qe->chan)
(312,tmp)
(313,manager_event(EVENT_FLAG_AGENT, "AgentCalled",\n\\n\\t\\t\\t"Queue: %s\\r\\n"\n\\n\\t\\t\\t"AgentCalled: %s\\r\\n"\n\\n\\t\\t\\t"AgentName: %s\\r\\n"\n\\n\\t\\t\\t"ChannelCalling: %s\\r\\n"\n\\n\\t\\t\\t"DestinationChannel: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t"Context: %s\\r\\n"\n\\n\\t\\t\\t"Extension: %s\\r\\n"\n\\n\\t\\t\\t"Priority: %d\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t"%s",\n\\n\\t\\t\\tqe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan)
(314,&caller)
(315,parent)
(316,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(317,if (tmp->member->paused)
(318,id)
(319,)
(320,qe->chan)
(321,tmp)
(322,location)
(323,tmp->stillgoing = 0)
(324,tmp)
(325,)
(326,chan)
(327,ast_channel_caller(qe->chan)
(328,tmp->member->status)
(329,tmp->member->status != AST_DEVICE_NOT_INUSE)
(330,membername)
(331,tmp)
(332,ast_channel_unlock(tmp->chan)
(333,ast_channel_connected(tmp->chan)
(334,tmp)
(335,ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext)
(336,chan)
(337,tmp->interface)
(338,id)
(339,newstate)
(340,ast_channel_caller(qe->chan)
(341,)
(342,chan)
(343,1)
(344,tmp->interface)
(345,)
(346,location = strchr(tech, \'/\')
(347,qe)
(348,tmp)
(349,ast_channel_cdr(qe->chan)
(350,(*busies)
(351,0)
(352,tmp)
(353,eventwhencalled)
(354,qe->cancel_answered_elsewhere)
(355,tmp)
(356,strcpy(ast_channel_cdr(tmp->chan)
(357,busies)
(358,id)
(359,stillgoing)
(360,src)
(361,parent)
(362,qe)
(363,qe->parent->wrapuptime && (time(NULL)
(364,0)
(365,tmp)
(366,ast_channel_cdr(qe->chan)
(367,if (ast_channel_connected(qe->chan)
(368,parent)
(369,ast_channel_cdr(qe->chan)
(370,(*busies)
(371,lastcall)
(372,sizeof(vars)
(373,strcpy(ast_channel_cdr(tmp->chan)
(374,tmp)
(375,tmp->chan)
(376,0)
(377,ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\\n",\n\\n\\t\\t\\t\\t\\ttmp->member->interface, ast_devstate2str(tmp->member->status)
(378,newstate)
(379,lastqueue)
(380,sizeof(*ast_channel_whentohangup(tmp->chan)
(381,1)
(382,name)
(383,ast_channel_cdr(tmp->chan)
(384,caller)
(385,valid)
(386,tmp->lastqueue)
(387,time(NULL)
(388,ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan)
(389,ast_channel_cdr(qe->chan)
(390,qe)
(391,chan)
(392,number)
(393,res)
(394,ast_channel_connected(qe->chan)
(395,chan)
(396,ast_channel_macroexten(qe->chan)
(397,tmp->chan)
(398,qe->chan)
(399,ast_channel_dialed(qe->chan)
(400,tmp)
(401,tmp->lastqueue)
(402,chan)
(403,tmp)
(404,ast_channel_cdr(tmp->chan)
(405,0)
(406,valid)
(407,lastqueue)
(408,caller)
(409,ast_channel_cdr(tmp->chan)
(410,tmp)
(411,qe->chan)
(412,qe->parent->eventwhencalled)
(413,tmp->member)
(414,chan)
(415,chan)
(416,ast_channel_connected(qe->chan)
(417,return 0;)
(418,chan)
(419,qe)
(420,tmp)
(421,ast_channel_connected(qe->chan)
(422,ast_channel_caller(qe->chan)
(423,qe->chan)
(424,src)
(425,qe->chan)
(426,tmp)
(427,tmp)
(428,qe->chan)
(429,tmp)
(430,str)
(431,0)
(432,ast_channel_cdr(qe->chan)
(433,0)
(434,clid)
(435,chan)
(436,tmp->stillgoing)
(437,qe->chan)
(438,"unknown")
(439,tmp->member->membername)
(440,chan)
(441,ast_channel_cdr(qe->chan)
(442,transit_network_select)
(443,transit_network_select)
(444,ast_channel_caller(qe->chan)
(445,tmp->chan)
(446,ast_channel_set_caller_event(tmp->chan, &caller, NULL)
(447,parent)
(448,ast_channel_connected(qe->chan)
(449,1)
(450,qe->chan)
(451,strcpy(ast_channel_cdr(tmp->chan)
(452,qe)
(453,strchr(tech, \'/\')
(454,qe)
(455,name)
(456,ani)
(457,chan)
(458,qe)
(459,)
(460,*busies)
(461,member)
(462,tmp)
(463,ast_channel_dialed(qe->chan)
(464,tmp->chan)
(465,interface)
(466,tmp->stillgoing = 0)
(467,tmp)
(468,tmp)
(469,chan)
(470,number)
(471,chan)
(472,tmp->member)
(473,ast_channel_cdr(tmp->chan)
(474,qe->chan)
(475,channel)
(476,ast_channel_dialed(qe->chan)
(477,interface)
(478,ast_channel_cdr(qe->chan)
(479,qe)
(480,lastqueue)
(481,qe->chan)
(482,interface)
(483,ast_channel_macroexten(qe->chan)
(484,0)
(485,tmp->member)
(486,qe)
(487,tmp->member->interface)
(488,if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(489,ast_devstate2str(tmp->member->status)
(490,)
(491,S_COR(ast_channel_caller(qe->chan)
(492,dcontext)
(493,ao2_lock(qe->parent)
(494,ast_channel_redirecting(tmp->chan)
(495,)
(496,qe)
(497,"%s paused, can\'t receive call\\n")
(498,chan)
(499,qe->chan)
(500,name)
(501,status)
(502,tmp)
(503,tmp)
(504,tmp->lastqueue->wrapuptime)
(505,accountcode)
(506,tmp)
(507,NULL)
(508,AST_DEVICE_UNKNOWN)
(509,qe->parent)
(510,chan)
(511,chan)
(512,tmp->chan)
(513,qe)
(514,"")
(515,chan)
(516,get_queue_member_status(tmp->member)
(517,ast_channel_dialed(tmp->chan)
(518,qe)
(519,tech)
(520,if ((res = ast_call(tmp->chan, location, 0)
(521,qe->parent)
(522,qe->chan)
(523,ast_channel_connected(qe->chan)
(524,0)
(525,tmp->chan)
(526,chan)
(527,id)
(528,ast_channel_whentohangup(tmp->chan)
(529,strcpy(ast_channel_cdr(tmp->chan)
(530,"Wrapuptime not yet expired on queue %s for %s\\n")
(531,macrocontext)
(532,tmp)
(533,macrocontext)
(534,qe)
(535,ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan)
(536,ast_channel_connected(qe->chan)
(537,qe)
(538,0)
(539,location)
(540,qe)
(541,strcpy(ast_channel_cdr(tmp->chan)
(542,tmp->interface)
(543,check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
(544,*location++ = \'\\0\')
(545,tmp)
(546,ast_channel_cdr(tmp->chan)
(547,"Priority queue delaying call to %s:%s\\n")
(548,number)
(549,str)
(550,chan)
(551,tmp)
(552,interface)
(553,ast_channel_uniqueid(qe->chan)
(554,qe->chan)
(555,member)
(556,ast_channel_exten(qe->chan)
(557,tmp->chan)
(558,use_weight)
(559,chan)
(560,tmp)
(561,ast_channel_cdr(tmp->chan)
(562,qe->chan)
(563,int *busies)
(564,ast_channel_connected(qe->chan)
(565,tmp)
(566,tmp->member->status)
(567,number)
(568,time(NULL)
(569,ast_channel_name(qe->chan)
(570,tmp)
(571,tmp->chan)
(572,tmp)
(573,ast_channel_exten(qe->chan)
(574,tech)
(575,ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan)
(576,tmp->member->interface)
(577,status)
(578,id)
(579,qe)
(580,"unknown")
(581,tmp)
(582,macroexten)
(583,)
(584,wrapuptime)
(585,qe)
(586,qe)
(587,tmp->member->status != AST_DEVICE_UNKNOWN)
(588,qe)
(589,tmp->chan)
(590,tmp)
(591,3)
(592,ast_copy_string(tech, tmp->interface, sizeof(tech)
(593,tmp->chan)
(594,ast_call(tmp->chan, location, 0)
(595,tmp)
(596,"Queue: %s\\r\\n"\n\\n\\t\\t\\t"AgentCalled: %s\\r\\n"\n\\n\\t\\t\\t"AgentName: %s\\r\\n"\n\\n\\t\\t\\t"ChannelCalling: %s\\r\\n"\n\\n\\t\\t\\t"DestinationChannel: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t"Context: %s\\r\\n"\n\\n\\t\\t\\t"Extension: %s\\r\\n"\n\\n\\t\\t\\t"Priority: %d\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t"%s")
(597,chan)
(598,tmp->chan)
(599,lastapp)
(600,caller.id)
(601,ast_channel_cdr(qe->chan)
(602,)
(603,member)
(604,qe)
(605,qe->chan)
(606,qe)
(607,qe->chan)
(608,amaflags)
(609,qe)
(610,tmp->member)
(611,id)
(612,chan)
(613,ast_channel_caller(qe->chan)
(614,if (!tmp->chan)
(615,tmp->member)
(616,ast_channel_cdr(qe->chan)
(617,qe)
(618,&caller)
(619,name)
(620,struct queue_ent *qe)
(621,ast_channel_cdr(tmp->chan)
(622,qe->chan)
(623,chan)
(624,qe->chan)
(625,parent)
(626,qe)
(627,tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
(628,(*busies)
(629,qe->chan)
(630,if (ast_channel_cdr(qe->chan)
(631,ast_channel_connected(qe->chan)
(632,tmp->member)
(633,chan)
(634,res)
(635,strcpy(ast_channel_cdr(tmp->chan)
(636,caller)
(637,tmp->member)
(638,chan)
(639,return 0;)
(640,tmp)
(641,tmp)
(642,tmp->member->status)
(643,!ast_channel_caller(tmp->chan)
(644,chan)
(645,number)
(646,if (qe->cancel_answered_elsewhere)
(647,ast_channel_caller(qe->chan)
(648,ast_channel_caller(tmp->chan)
(649,qe)
(650,busies)
(651,!tmp->lastqueue)
(652,tmp->member)
(653,(*busies)
(654,member)
(655,if (!tmp->member->ringinuse)
(656,chan)
(657,member)
(658,qe)
(659,macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
(660,tmp->chan)
(661,ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan)
(662,S_OR(ast_channel_macroexten(qe->chan)
(663,qe)
(664,if (!ast_channel_caller(tmp->chan)
(665,chan)
(666,tmp->member->ringinuse)
(667,location++)
(668,chan)
(669,ast_channel_dialed(tmp->chan)
(670,interface)
(671,tmp)
(672,ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE)
(673,chan)
(674,tmp->lastqueue->wrapuptime && (time(NULL)
(675,tmp->member->status)
(676,3)
(677,ast_channel_cdr(tmp->chan)
(678,ast_channel_name(tmp->chan)
(679,ast_channel_appl_set(tmp->chan, "AppQueue")
(680,chan)
(681,QUEUE_EVENT_VARIABLES)
(682,name)
(683,member)
(684,tmp->chan)
(685,tmp->interface)
(686,member)
(687,qe->chan)
(688,chan)
(689,chan)
(690,qe->chan)
(691,ast_channel_cdr(qe->chan)
(692,chan)
(693,tmp)
(694,ringinuse)
(695,qe)
(696,caller.ani)
(697,userfield)
(698,member)
(699,NULL)
(700,qe->chan)
(701,use_weight && compare_weight(qe->parent,tmp->member)
(702,macrocontext)
(703,qe->linpos)
(704,&status)
(705,tmp->chan)
(706,parent)
(707,qe->chan)
(708,cancel_answered_elsewhere)
(709,chan)
(710,check_state_unknown)
(711,tmp)
(712,tmp)
(713,tmp)
(714,(*busies)
(715,tmp)
(716,ast_channel_connected(qe->chan)
(717,qe->parent)
(718,chan)
(719,\'/\')
(720,"%s in use, can\'t receive call\\n")
(721,qe->chan)
(722,linpos)
(723,(*busies)
(724,ast_channel_dialed(qe->chan)
(725,qe)
(726,ast_channel_lock_both(tmp->chan, qe->chan)
(727,str)
(728,name)
(729,qe)
(730,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(731,macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
(732,tmp->lastcall)
(733,if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
(734,tmp)
(735,tmp->stillgoing = 0)
(736,tmp->member->interface)
(737,S_COR(ast_channel_caller(qe->chan)
(738,ast_channel_unlock(qe->chan)
(739,chan)
(740,chan)
(741,chan)
(742,parent)
(743,ast_channel_dialed(qe->chan)
(744,pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
(745,chan)
(746,qe->parent)
(747,*busies)
(748,number)
(749,newstate)
(750,qe)
(751,chan)
(752,qe->chan)
(753,tmp)
(754,ast_channel_connected(qe->chan)
(755,qe->parent)
(756,clid)
(757,newstate)
(758,1)
(759,tmp)
(760,ast_channel_cdr(tmp->chan)
(761,chan)
(762,!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL)
(763,member)
(764,tmp->chan)
(765,chan)
(766,lastdata)
(767,chan)
(768,)
(769,get_queue_member_status(tmp->member)
(770,ast_channel_exten(qe->chan)
(771,ast_channel_caller(tmp->chan)
(772,qe)
(773,chan)
(774,time(NULL)
(775,qe->chan)
(776,chan)
(777,ast_channel_dialed(qe->chan)
(778,tmp->chan)
(779,qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)
(780,chan)
(781,if (!ast_strlen_zero(macroexten)
(782,strcpy(ast_channel_cdr(tmp->chan)
(783,)
(784,tmp)
(785,parent)
(786,qe->chan)
(787,status)
(788,"(Outgoing Line)
(789,tmp->lastqueue)
(790,*busies)
(791,ast_strlen_zero(macrocontext)
(792,ast_channel_cdr(tmp->chan)
(793,qe->chan)
(794,tmp->member)
(795,tmp->member->paused)
(796,qe)
(797,NULL)
(798,paused)
(799,tmp)
(800,caller.ani = ast_channel_connected(qe->chan)
(801,member)
(802,ast_channel_cdr(qe->chan)
(803,S_COR(ast_channel_connected(qe->chan)
(804,pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
(805,qe->chan)
(806,chan)
(807,tmp)
(808,tmp)
(809,tmp)
(810,ast_channel_caller(qe->chan)
(811,tmp)
(812,qe)
(813,qe->chan)
(814,qe)
(815,tmp->chan)
(816,qe)
(817,tmp)
(818,qe->chan)
(819,qe->chan)
(820,ast_channel_priority(qe->chan)
(821,tmp->lastqueue)
(822,ast_channel_connected(qe->chan)
(823,RET)
(824,qe)
(825,tmp)
(826,ast_channel_caller(qe->chan)
(827,number)
(828,rrpos)
(829,tmp->chan)
(830,ast_channel_inherit_variables(qe->chan, tmp->chan)
(831,ast_channel_connected(qe->chan)
(832,interface)
(833,if (use_weight && compare_weight(qe->parent,tmp->member)
(834,qe)
(835,ast_channel_adsicpe(qe->chan)
(836,qe)
(837,chan)
(838,"AgentCalled")
(839,ast_devstate_changed_literal(newstate, tmp->member->interface)
(840,qe)
(841,tmp)
(842,chan)
(843,)
(844,qe->chan)
(845,strcpy(ast_channel_cdr(tmp->chan)
(846,ast_channel_connected(qe->chan)
(847,chan)
(848,tmp->chan)
(849,ast_channel_exten_set(tmp->chan, macroexten)
(850,NULL)
(851,\'\\0\')
(852,tmp->member)
(853,tmp->interface)
(854,location)
(855,"AppQueue")
(856,qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES)
(857,qe)
(858,ast_channel_cdr(tmp->chan)
(859,tmp->stillgoing)
(860,ast_channel_unlock(tmp->chan)
(861,tmp->lastqueue)
(862,tmp)
(863,qe)
(864,tmp)
(865,chan)
(866,ast_channel_caller(tmp->chan)
(867,member)
(868,chan)
(869,compare_weight(qe->parent,tmp->member)
(870,status)
(871,qe->chan)
(872,tmp)
(873,if ((location = strchr(tech, \'/\')
(874,S_OR(ast_channel_macroexten(qe->chan)
(875,chan)
(876,busies)
(877,ao2_unlock(qe->parent)
(878,amaflags)
(879,tmp->member)
(880,ast_channel_caller(qe->chan)
(881,interface)
(882,ast_channel_caller(qe->chan)
(883,chan)
(884,)
(885,S_COR(ast_channel_connected(qe->chan)
(886,stillgoing)
(887,chan)
(888,memset(ast_channel_whentohangup(tmp->chan)
(889,NULL)
(890,ast_channel_cdr(tmp->chan)
(891,struct callattempt *tmp)
(892,status)
(893,tmp->interface)
(894,tmp)
(895,macroexten)
(896,ast_channel_connected(qe->chan)
(897,ast_channel_connected(qe->chan)
(898,chan)
(899,tmp->chan)
(900,qe->chan)
(901,ast_channel_cdr(tmp->chan)
(902,vars2manager(qe->chan, vars, sizeof(vars)
(903,qe->linpos++)
(904,qe)
(905,parent)
(906,"unknown")
(907,qe)
(908,id)
(909,id)
(910,ast_channel_datastore_inherit(qe->chan, tmp->chan)
(911,ast_channel_connected(qe->chan)
(912,tmp)
(913,status)
(914,return 0;)
(915,tmp->chan)
(916,chan)
(917,ast_verb(3, "Called %s\\n", tmp->interface)
(918,)
(919,member)
(920,ast_channel_name(tmp->chan)
(921,)
(922,ast_debug(1, "%s in use, can\'t receive call\\n", tmp->interface)
(923,if ((tmp->member->status != AST_DEVICE_NOT_INUSE)
(924,chan)
(925,qe)
(926,0)
(927,chan)
(928,tmp->chan)
(929,channel)
(930,tmp)
(931,chan)
(932,strcpy(ast_channel_cdr(tmp->chan)
(933,return 0;)
(934,member)
(935,lastqueue)
(936,qe->chan)
(937,ast_channel_cdr(qe->chan)
(938,qe->chan)
(939,ast_channel_connected(qe->chan)
(940,ast_cdr_setdestchan(ast_channel_cdr(tmp->chan)
(941,chan)
(942,)
(943,)
(944,AST_DEVICE_NOT_INUSE)
(945,*ast_channel_whentohangup(tmp->chan)
(946,busies)
(947,qe->chan)
(948,tmp)
(949,chan)
(950,tmp->chan)
(951,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^