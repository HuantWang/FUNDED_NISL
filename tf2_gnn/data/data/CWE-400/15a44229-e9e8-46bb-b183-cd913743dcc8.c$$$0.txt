-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(globalFive==5)
    {
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
36,39
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
46,47
46,48
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
58,59
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,14,16,20,21,26,29,33,34,40,41,44,45,50,52,56,57,62,63
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
31,32
31,33
37,38
37,39
38,39
38,40
42,43
42,44
-----guardedBy-----
44,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalFive==5)    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalFive==5)    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalFive==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(globalFive==5)    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
globalFive==5
globalFive
globalFive
5
{        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(9,30,0)
(14,35,0)
(19,14,0)
(30,1,0)
(32,23,0)
(2,30,0)
(11,2,0)
(4,9,0)
(0,18,0)
(15,23,0)
(20,9,0)
(4,14,0)
(25,13,0)
(22,26,0)
(33,16,0)
(2,21,0)
(14,30,0)
(27,6,0)
(30,6,0)
(34,1,0)
(5,35,0)
(35,5,0)
(31,26,0)
(9,35,0)
(10,35,0)
(35,3,0)
(2,35,0)
(8,33,0)
(24,14,0)
(14,4,0)
(28,6,0)
(12,30,0)
(9,4,0)
(1,30,0)
(29,9,0)
(17,6,0)
(13,21,0)
(26,22,1)
(30,1,1)
(32,26,1)
(2,11,1)
(7,13,1)
(14,24,1)
(8,4,1)
(4,14,1)
(14,35,1)
(33,8,1)
(2,30,1)
(9,20,1)
(13,25,1)
(31,30,1)
(9,30,1)
(24,19,1)
(19,9,1)
(22,31,1)
(11,4,1)
(34,12,1)
(7,23,1)
(7,33,1)
(4,9,1)
(20,29,1)
(23,15,1)
(2,35,1)
(15,32,1)
(25,2,1)
(29,23,1)
(9,35,1)
(14,30,1)
(1,34,1)
(10,26,1)
(35,5,1)
(5,10,1)
(32,35,1)
(24,9,2)
(9,30,2)
(25,4,2)
(13,4,2)
(14,9,2)
(20,23,2)
(14,30,2)
(30,1,2)
(2,30,2)
(14,35,2)
(9,35,2)
(11,4,2)
(4,9,2)
(35,26,2)
(10,26,2)
(4,23,2)
(29,23,2)
(8,4,2)
(35,5,2)
(9,23,2)
(2,35,2)
(2,4,2)
(4,14,2)
(33,4,2)
(19,9,2)
(5,26,2)
-----------------------------------
(0,if (count > 0 && count <= 2000)
(1,-1)
(2,SLEEP(count)
(3,)
(4,count > 0 && count <= 2000)
(5,RAND32()
(6,)
(7,RET)
(8,"Sleep time too long")
(9,count > 0)
(10,count)
(11,count)
(12,count)
(13,printLine("Sleep time OK")
(14,count <= 2000)
(15,5)
(16,)
(17,count)
(18,)
(19,count)
(20,0)
(21,)
(22,5)
(23,globalFive==5)
(24,2000)
(25,"Sleep time OK")
(26,globalFive==5)
(27,if(globalFive==5)
(28,if(globalFive==5)
(29,count)
(30,count = -1)
(31,globalFive)
(32,globalFive)
(33,printLine("Sleep time too long")
(34,1)
(35,count = RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^