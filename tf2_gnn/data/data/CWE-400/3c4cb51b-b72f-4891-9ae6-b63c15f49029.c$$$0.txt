-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_32_bad()
{
    int * data;
    int * *dataPtr1 = &data;
    int * *dataPtr2 = &data;
    data = NULL;
    {
        int * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        *dataPtr1 = data;
    }
    {
        int * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
63,64
65,66
65,67
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
86,88
87,88
91,92
92,93
92,94
93,94
95,96
95,97
96,97
99,100
100,101
100,102
101,102
102,103
104,105
106,107
106,108
107,108
108,109
108,110
110,111
110,112
110,113
113,114
114,115
115,116
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,66,69,70,74,76,81,83,88,89,90,94,97,98,103,105,109,111,112,116,117
-----computeFrom-----
35,36
35,37
52,53
52,54
65,66
65,67
72,73
72,74
85,86
85,87
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_32_bad(){    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_32_bad()
CWE401_Memory_Leak__int_realloc_32_bad
{    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
int * *dataPtr1 = &data;
int * *dataPtr1 = &data;
int
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int * *dataPtr2 = &data;
int * *dataPtr2 = &data;
int
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }
int * data = *dataPtr1;
int * data = *dataPtr1;
int
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * data = *dataPtr2;
int * data = *dataPtr2;
int
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(8,54,0)
(48,52,0)
(5,51,0)
(49,51,0)
(45,51,0)
(52,4,0)
(44,14,0)
(23,25,0)
(33,17,0)
(54,53,0)
(57,20,0)
(14,38,0)
(7,16,0)
(30,57,0)
(39,15,0)
(36,2,0)
(13,2,0)
(35,30,0)
(14,7,0)
(37,31,0)
(15,55,0)
(25,34,0)
(53,51,0)
(16,7,0)
(19,2,0)
(21,1,0)
(28,22,0)
(18,55,0)
(24,1,0)
(50,2,0)
(52,13,0)
(11,53,0)
(12,31,0)
(3,6,0)
(58,6,0)
(55,51,0)
(9,53,0)
(38,17,0)
(52,36,0)
(57,30,0)
(10,7,0)
(41,4,0)
(46,23,0)
(32,13,0)
(6,51,0)
(2,51,0)
(22,28,0)
(34,25,0)
(31,13,0)
(28,13,0)
(54,15,0)
(56,40,0)
(7,2,0)
(0,16,0)
(36,52,0)
(15,54,0)
(40,13,0)
(16,25,0)
(13,28,0)
(28,14,0)
(47,11,0)
(38,14,0)
(40,2,0)
(14,28,0)
(1,4,0)
(17,38,0)
(26,25,0)
(27,34,0)
(4,2,0)
(1,13,0)
(23,40,0)
(43,38,0)
(29,52,0)
(25,51,0)
(53,11,0)
(39,40,1)
(33,43,1)
(36,52,1)
(31,13,1)
(31,37,1)
(14,7,1)
(57,30,1)
(47,9,1)
(6,3,1)
(27,26,1)
(7,16,1)
(54,8,1)
(29,48,1)
(34,27,1)
(9,25,1)
(24,31,1)
(54,53,1)
(37,12,1)
(17,33,1)
(15,54,1)
(0,10,1)
(16,25,1)
(14,38,1)
(42,15,1)
(23,46,1)
(40,56,1)
(46,36,1)
(30,35,1)
(8,39,1)
(12,13,1)
(25,34,1)
(44,32,1)
(10,6,1)
(24,57,1)
(56,23,1)
(28,14,1)
(1,21,1)
(52,13,1)
(3,58,1)
(11,47,1)
(32,7,1)
(52,29,1)
(48,4,1)
(13,28,1)
(41,1,1)
(53,11,1)
(43,44,1)
(21,24,1)
(52,4,1)
(38,17,1)
(1,13,1)
(35,31,1)
(23,25,1)
(28,22,1)
(16,0,1)
(4,41,1)
(40,13,1)
(58,53,1)
(30,31,2)
(57,30,2)
(54,53,2)
(28,22,2)
(13,28,2)
(36,52,2)
(1,13,2)
(14,7,2)
(57,31,2)
(35,31,2)
(7,16,2)
(31,13,2)
(23,25,2)
(14,38,2)
(53,11,2)
(16,25,2)
(52,13,2)
(15,54,2)
(52,4,2)
(28,14,2)
(25,34,2)
(38,17,2)
(40,13,2)
-----------------------------------
(0,dataPtr1)
(1,data[0])
(2,)
(3,NULL)
(4,data[0] = 5)
(5,dataPtr2)
(6,data = NULL)
(7,* data = *dataPtr1)
(8,dataPtr2)
(9,dataPtr2)
(10,data)
(11,&data)
(12,data)
(13,data = (int *)
(14,realloc(data, 100*sizeof(int)
(15,* data = *dataPtr2)
(16,*dataPtr1)
(17,sizeof(int)
(18,data)
(19,data)
(20,)
(21,0)
(22,int *)
(23,*dataPtr1)
(24,data)
(25,* *dataPtr1 = &data)
(26,dataPtr1)
(27,data)
(28,(int *)
(29,0)
(30,-1)
(31,data == NULL)
(32,data)
(33,int)
(34,&data)
(35,1)
(36,printIntLine(data[0])
(37,NULL)
(38,100*sizeof(int)
(39,data)
(40,*dataPtr1 = data)
(41,5)
(42,RET)
(43,100)
(44,data)
(45,data)
(46,dataPtr1)
(47,data)
(48,data)
(49,dataPtr1)
(50,if (data == NULL)
(51,)
(52,data[0])
(53,* *dataPtr2 = &data)
(54,*dataPtr2)
(55,)
(56,data)
(57,exit(-1)
(58,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^