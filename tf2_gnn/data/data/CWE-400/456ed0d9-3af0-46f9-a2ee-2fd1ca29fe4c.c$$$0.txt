-----label-----
0
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_66b_goodG2BSink(int countArray[])
{
    int count = countArray[2];
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
21,28
22,23
23,24
23,25
24,25
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
34,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
43,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
52,55
53,54
55,56
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
84,85
86,87
87,88
89,90
90,91
90,92
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
97,100
97,101
97,102
98,99
100,101
102,103
103,104
103,105
106,107
106,108
107,108
109,110
111,112
113,114
114,115
115,116
115,117
116,117
119,120
119,121
120,121
122,123
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,6,8,9,13,15,19,20,25,27,29,33,35,36,39,42,44,45,47,51,54,56,57,61,63,68,69,74,75,78,82,83,85,88,94,96,99,101,104,105,108,110,112,117,118,121,126,128
-----computeFrom-----
49,50
49,51
59,60
59,61
72,73
72,74
76,77
76,78
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_66b_goodG2BSink(int countArray[]){    int count = countArray[2];    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_fwrite_66b_goodG2BSink(int countArray[])
CWE400_Resource_Exhaustion__connect_socket_fwrite_66b_goodG2BSink
int countArray[]
int
countArray[]
countArray
[]
{    int count = countArray[2];    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count = countArray[2];
int count = countArray[2];
int
count = countArray[2]
count
= countArray[2]
countArray[2]
countArray
countArray
2
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(6,37,0)
(17,51,0)
(7,27,0)
(1,61,0)
(47,49,0)
(64,61,0)
(0,44,0)
(33,15,0)
(17,16,0)
(46,55,0)
(51,17,0)
(48,45,0)
(52,51,0)
(56,32,0)
(56,20,0)
(14,49,0)
(30,57,0)
(25,27,0)
(28,34,0)
(12,45,0)
(51,53,0)
(42,6,0)
(23,32,0)
(22,26,0)
(35,36,0)
(25,32,0)
(13,44,0)
(44,16,0)
(40,44,0)
(4,44,0)
(31,3,0)
(45,12,0)
(54,46,0)
(32,25,0)
(5,25,0)
(43,44,0)
(29,3,0)
(1,46,0)
(48,36,0)
(46,1,0)
(24,27,0)
(3,44,0)
(61,1,0)
(59,56,0)
(21,58,0)
(2,51,0)
(46,15,0)
(63,45,0)
(15,46,0)
(27,44,0)
(9,44,0)
(46,32,0)
(10,25,0)
(38,58,0)
(55,46,0)
(32,44,0)
(45,17,0)
(45,48,0)
(34,36,0)
(49,44,0)
(19,16,0)
(41,48,0)
(50,36,0)
(11,46,0)
(8,30,0)
(39,55,0)
(62,17,0)
(58,32,0)
(46,11,1)
(56,32,1)
(35,50,1)
(61,64,1)
(42,1,1)
(46,15,1)
(5,10,1)
(46,55,1)
(15,33,1)
(2,62,1)
(39,15,1)
(34,36,1)
(41,36,1)
(14,47,1)
(25,5,1)
(17,51,1)
(41,34,1)
(48,45,1)
(45,17,1)
(30,8,1)
(59,60,1)
(52,2,1)
(46,32,1)
(10,23,1)
(34,28,1)
(24,7,1)
(48,36,1)
(21,32,1)
(64,48,1)
(28,1,1)
(27,24,1)
(31,17,1)
(38,21,1)
(56,59,1)
(25,27,1)
(18,60,1)
(33,54,1)
(11,55,1)
(60,48,1)
(28,6,1)
(54,61,1)
(6,42,1)
(8,58,1)
(50,58,1)
(7,49,1)
(3,29,1)
(1,46,1)
(58,38,1)
(23,27,1)
(51,52,1)
(63,41,1)
(49,14,1)
(55,39,1)
(29,31,1)
(47,3,1)
(50,30,1)
(36,35,1)
(58,32,1)
(51,53,1)
(1,61,1)
(32,25,1)
(45,63,1)
(45,12,1)
(18,56,1)
(39,48,2)
(42,1,2)
(46,32,2)
(45,12,2)
(32,25,2)
(45,48,2)
(30,58,2)
(11,48,2)
(25,27,2)
(59,60,2)
(64,48,2)
(1,46,2)
(48,48,2)
(15,48,2)
(46,48,2)
(34,48,2)
(33,48,2)
(55,48,2)
(58,32,2)
(46,55,2)
(41,48,2)
(6,1,2)
(48,36,2)
(54,48,2)
(45,17,2)
(17,51,2)
(63,48,2)
(28,48,2)
(1,48,2)
(46,15,2)
(8,58,2)
(51,53,2)
(34,36,2)
(56,60,2)
(48,45,2)
(1,61,2)
(61,48,2)
(56,32,2)
-----------------------------------
(0,if (pFile == NULL)
(1,strlen(SENTENCE)
(2,countArray)
(3,i = 0)
(4,for (i = 0; i < (size_t)
(5,"w+")
(6,exit(1)
(7,filename)
(8,1)
(9,i)
(10,filename)
(11,pFile)
(12,size_t)
(13,pFile)
(14,NULL)
(15,sizeof(char)
(16,)
(17,count = countArray[2])
(18,RET)
(19,count)
(20,)
(21,pFile)
(22,if (strlen(SENTENCE)
(23,pFile)
(24,"output_bad.txt")
(25,fopen(filename, "w+")
(26,)
(27,*filename = "output_bad.txt")
(28,i)
(29,0)
(30,exit(1)
(31,i)
(32,pFile = fopen(filename, "w+")
(33,char)
(34,i++)
(35,0)
(36,i = 0)
(37,)
(38,NULL)
(39,SENTENCE)
(40,if (pFile)
(41,i)
(42,1)
(43,filename)
(44,)
(45,(size_t)
(46,fwrite(SENTENCE, sizeof(char)
(47,pFile)
(48,i < (size_t)
(49,*pFile = NULL)
(50,i)
(51,countArray[2])
(52,2)
(53,int countArray[])
(54,SENTENCE)
(55,strlen(SENTENCE)
(56,fclose(pFile)
(57,)
(58,pFile == NULL)
(59,pFile)
(60,pFile)
(61,strlen(SENTENCE)
(62,count)
(63,count)
(64,SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^