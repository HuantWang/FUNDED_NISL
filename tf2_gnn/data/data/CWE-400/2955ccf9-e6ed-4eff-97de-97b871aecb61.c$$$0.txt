-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
62,63
64,65
65,66
66,67
66,68
67,68
70,71
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
78,79
80,81
80,82
81,82
81,83
82,83
82,84
83,84
86,87
86,88
87,88
90,91
91,92
91,93
91,94
91,95
92,93
93,94
93,95
94,95
97,98
97,99
98,99
100,101
100,102
101,102
101,103
102,103
105,106
107,108
108,109
110,111
111,112
112,113
112,114
113,114
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,68,69,75,77,79,84,85,88,89,95,96,99,103,104,106,109,114,115
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
81,82
81,83
82,83
82,84
86,87
86,88
93,94
93,95
97,98
97,99
-----guardedBy-----
38,54
88,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalTrue
globalTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
globalFalse
globalFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(54,32,0)
(57,0,0)
(17,0,0)
(32,46,0)
(39,23,0)
(45,20,0)
(14,18,0)
(32,54,0)
(40,23,0)
(54,23,0)
(44,49,0)
(26,59,0)
(16,32,0)
(41,18,0)
(52,13,0)
(0,22,0)
(31,45,0)
(43,57,0)
(61,63,0)
(51,26,0)
(58,18,0)
(32,41,0)
(8,44,0)
(55,3,0)
(45,13,0)
(25,29,0)
(49,31,0)
(13,45,0)
(34,22,0)
(60,41,0)
(24,28,0)
(27,45,0)
(12,40,0)
(31,49,0)
(57,63,0)
(6,21,0)
(32,45,0)
(46,32,0)
(5,31,0)
(33,0,0)
(44,41,0)
(49,44,0)
(62,57,0)
(22,30,0)
(47,23,0)
(44,45,0)
(38,56,0)
(15,22,0)
(50,38,0)
(4,31,0)
(42,57,0)
(7,55,0)
(29,38,0)
(36,11,0)
(28,41,0)
(48,29,0)
(63,57,0)
(31,41,0)
(13,0,0)
(2,54,0)
(19,44,0)
(53,18,0)
(41,28,0)
(1,38,0)
(37,36,0)
(5,44,1)
(57,0,1)
(24,60,1)
(28,24,1)
(62,43,1)
(40,23,1)
(51,63,1)
(45,13,1)
(2,40,1)
(31,45,1)
(41,28,1)
(52,27,1)
(57,42,1)
(7,35,1)
(4,5,1)
(48,25,1)
(49,31,1)
(61,57,1)
(33,9,1)
(55,7,1)
(29,48,1)
(49,44,1)
(37,54,1)
(32,46,1)
(63,57,1)
(2,23,1)
(32,45,1)
(35,26,1)
(25,35,1)
(26,51,1)
(12,36,1)
(44,45,1)
(40,12,1)
(16,2,1)
(35,9,1)
(43,0,1)
(27,63,1)
(31,4,1)
(44,41,1)
(35,45,1)
(19,29,1)
(36,37,1)
(13,52,1)
(39,47,1)
(63,61,1)
(54,32,1)
(10,49,1)
(10,54,1)
(8,19,1)
(32,41,1)
(32,16,1)
(44,8,1)
(13,0,1)
(9,41,1)
(23,39,1)
(47,49,1)
(31,41,1)
(0,17,1)
(17,33,1)
(10,55,1)
(54,23,1)
(42,62,1)
(31,45,2)
(49,44,2)
(19,35,2)
(36,54,2)
(44,45,2)
(16,54,2)
(13,0,2)
(25,35,2)
(31,44,2)
(45,13,2)
(54,54,2)
(49,35,2)
(44,35,2)
(37,54,2)
(4,44,2)
(57,9,2)
(40,54,2)
(55,35,2)
(17,9,2)
(52,63,2)
(54,49,2)
(54,23,2)
(47,49,2)
(8,35,2)
(32,49,2)
(23,49,2)
(42,9,2)
(39,49,2)
(29,35,2)
(43,9,2)
(32,45,2)
(63,9,2)
(32,41,2)
(63,57,2)
(48,35,2)
(44,41,2)
(41,28,2)
(13,63,2)
(32,54,2)
(51,63,2)
(27,63,2)
(7,35,2)
(16,49,2)
(2,54,2)
(45,63,2)
(62,9,2)
(5,44,2)
(12,54,2)
(57,0,2)
(49,31,2)
(2,49,2)
(31,41,2)
(26,63,2)
(40,23,2)
(32,46,2)
(0,9,2)
(54,32,2)
(61,9,2)
(33,9,2)
-----------------------------------
(0,inputBuffer[CHAR_ARRAY_SIZE] = "")
(1,i)
(2,i)
(3,)
(4,20)
(5,count)
(6,for (i = 0; i < (size_t)
(7,"Benign, fixed string")
(8,0)
(9,globalTrue)
(10,RET)
(11,)
(12,i)
(13,atoi(inputBuffer)
(14,count)
(15,inputBuffer)
(16,count)
(17,"")
(18,)
(19,count)
(20,)
(21,)
(22,)
(23,i = 0)
(24,1)
(25,i)
(26,printLine("fgets()
(27,count)
(28,-1)
(29,i = 0)
(30,)
(31,count <= 20)
(32,(size_t)
(33,inputBuffer)
(34,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,globalFalse)
(36,printLine("Hello")
(37,"Hello")
(38,)
(39,0)
(40,i++)
(41,count = -1)
(42,stdin)
(43,inputBuffer)
(44,count > 0)
(45,count = atoi(inputBuffer)
(46,size_t)
(47,i)
(48,0)
(49,count > 0 && count <= 20)
(50,if (count > 0 && count <= 20)
(51,"fgets()
(52,inputBuffer)
(53,if(globalTrue)
(54,i < (size_t)
(55,printLine("Benign, fixed string")
(56,)
(57,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(58,if(globalFalse)
(59,)
(60,count)
(61,NULL)
(62,CHAR_ARRAY_SIZE)
(63,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^