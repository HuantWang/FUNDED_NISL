-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_sleep_10_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
34,35
34,36
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
-----nextToken-----
2,4,8,10,14,16,19,24,26,27,30,33,38,40,44,45
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_sleep_10_bad(){    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__fscanf_sleep_10_bad()
CWE400_Resource_Exhaustion__fscanf_sleep_10_bad
{    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(globalTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(11,15,0)
(3,17,0)
(4,18,0)
(12,19,0)
(15,11,0)
(19,18,0)
(15,14,0)
(11,3,0)
(21,3,0)
(13,17,0)
(7,15,0)
(1,17,0)
(4,3,0)
(2,3,0)
(16,15,0)
(8,11,0)
(10,17,0)
(9,4,0)
(5,2,0)
(3,2,0)
(4,9,1)
(12,4,1)
(19,12,1)
(4,3,1)
(16,20,1)
(0,20,1)
(11,3,1)
(6,19,1)
(0,15,1)
(11,8,1)
(2,5,1)
(6,0,1)
(3,2,1)
(15,11,1)
(5,21,1)
(9,0,1)
(7,16,1)
(8,7,1)
(20,3,1)
(11,20,2)
(12,0,2)
(19,0,2)
(4,3,2)
(15,11,2)
(8,20,2)
(7,20,2)
(16,20,2)
(11,3,2)
(4,0,2)
(3,2,2)
(9,0,2)
(15,20,2)
-----------------------------------
(0,globalTrue)
(1,if(globalTrue)
(2,-1)
(3,count = -1)
(4,SLEEP(count)
(5,1)
(6,RET)
(7,"%d")
(8,count)
(9,count)
(10,if(globalTrue)
(11,&count)
(12,"Sleep time possibly too long")
(13,count)
(14,)
(15,fscanf(stdin, "%d", &count)
(16,stdin)
(17,)
(18,)
(19,printLine("Sleep time possibly too long")
(20,globalTrue)
(21,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^