-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_badSink(size_t * dataPtr)
{
    size_t data = *dataPtr;
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
52,53
54,55
55,56
55,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,7,9,10,15,17,21,25,27,28,32,35,37,42,45,47,50,53,56,57,61,63,68,70,74,76,78,82,84,88,90,95,96
-----computeFrom-----
30,31
30,32
40,41
40,42
51,52
51,53
59,60
59,61
-----guardedBy-----
37,78
32,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_badSink(size_t * dataPtr){    size_t data = *dataPtr;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_badSink(size_t * dataPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_badSink
size_t * dataPtr
size_t
size_t
* dataPtr
*
dataPtr
{    size_t data = *dataPtr;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = *dataPtr;
size_t data = *dataPtr;
size_t
size_t
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(22,5,0)
(41,27,0)
(17,1,0)
(4,27,0)
(11,28,0)
(24,7,0)
(0,33,0)
(27,41,0)
(5,16,0)
(13,38,0)
(41,16,0)
(34,5,0)
(27,4,0)
(19,35,0)
(8,4,0)
(5,7,0)
(38,26,0)
(15,16,0)
(42,32,0)
(20,32,0)
(16,5,0)
(39,5,0)
(27,36,0)
(14,17,0)
(36,40,0)
(38,13,0)
(32,40,0)
(11,36,0)
(29,34,0)
(25,7,0)
(6,24,0)
(33,37,0)
(18,13,0)
(16,41,0)
(28,11,0)
(35,5,0)
(10,40,0)
(12,22,0)
(30,36,0)
(24,5,0)
(17,36,0)
(35,7,0)
(16,15,0)
(2,11,0)
(21,27,0)
(9,28,0)
(23,22,0)
(22,7,0)
(36,17,0)
(31,34,0)
(27,4,1)
(38,13,1)
(3,33,1)
(4,8,1)
(31,29,1)
(19,22,1)
(18,34,1)
(3,24,1)
(22,12,1)
(27,36,1)
(12,23,1)
(36,17,1)
(17,14,1)
(21,39,1)
(16,15,1)
(2,36,1)
(28,9,1)
(9,2,1)
(41,27,1)
(5,16,1)
(33,0,1)
(24,6,1)
(35,19,1)
(23,38,1)
(11,28,1)
(6,35,1)
(35,5,1)
(29,5,1)
(13,18,1)
(22,5,1)
(34,5,1)
(11,36,1)
(0,11,1)
(16,41,1)
(17,1,1)
(8,21,1)
(34,31,1)
(14,30,1)
(24,5,1)
(23,34,1)
(39,11,1)
(5,11,2)
(38,13,2)
(16,41,2)
(6,11,2)
(38,34,2)
(13,34,2)
(23,11,2)
(27,36,2)
(34,11,2)
(39,11,2)
(22,11,2)
(34,5,2)
(35,5,2)
(16,15,2)
(19,11,2)
(5,16,2)
(24,5,2)
(18,34,2)
(17,1,2)
(29,11,2)
(16,11,2)
(22,5,2)
(36,17,2)
(35,11,2)
(31,11,2)
(33,11,2)
(41,27,2)
(11,28,2)
(12,11,2)
(4,11,2)
(27,11,2)
(27,4,2)
(21,11,2)
(24,11,2)
(0,11,2)
(8,11,2)
(11,36,2)
(41,11,2)
-----------------------------------
(0,"Input is less than the length of the source string")
(1,size_t * dataPtr)
(2,data)
(3,RET)
(4,sizeof(char)
(5,myString = (char *)
(6,myString)
(7,)
(8,char)
(9,HELLO_STRING)
(10,data)
(11,data > strlen(HELLO_STRING)
(12,HELLO_STRING)
(13,-1)
(14,dataPtr)
(15,char *)
(16,(char *)
(17,*dataPtr)
(18,1)
(19,myString)
(20,myString)
(21,data)
(22,strcpy(myString, HELLO_STRING)
(23,myString)
(24,free(myString)
(25,if (myString == NULL)
(26,)
(27,data*sizeof(char)
(28,strlen(HELLO_STRING)
(29,myString)
(30,data)
(31,NULL)
(32,)
(33,printLine("Input is less than the length of the source string")
(34,myString == NULL)
(35,printLine(myString)
(36,data = *dataPtr)
(37,)
(38,exit(-1)
(39,myString)
(40,)
(41,malloc(data*sizeof(char)
(42,if (data > strlen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^