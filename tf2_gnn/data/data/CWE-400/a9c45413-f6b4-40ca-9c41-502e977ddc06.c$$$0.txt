-----label-----
0
-----code-----
static __inline void
sokvareserve(struct socket *so, vsize_t len)
{
	int s;

	s = splvm();
	simple_lock(&so_pendfree_slock);
	while (socurkva + len > somaxkva) {
		size_t freed;

		/*
		 * try to do pendfree.
		 */

		freed = sodopendfreel(so);

		/*
		 * if some kva was freed, try again.
		 */

		if (freed)
			continue;

		SOSEND_COUNTER_INCR(&sosend_kvalimit);
		sokvawaiters++;
		(void) ltsleep(&socurkva, PVM, "sokva", 0, &so_pendfree_slock);
		sokvawaiters--;
	}
	socurkva += len;
	simple_unlock(&so_pendfree_slock);
	splx(s);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
17,18
18,19
18,20
20,21
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
30,32
31,32
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
39,41
40,41
42,43
44,45
46,47
46,48
46,49
46,50
46,51
46,52
46,53
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
66,67
67,68
67,69
68,69
70,71
71,72
71,73
74,75
75,76
76,77
78,79
79,80
79,81
80,81
80,82
83,84
83,85
83,86
83,87
83,88
83,89
84,85
86,87
87,88
89,90
93,94
94,95
96,97
97,98
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
111,112
113,114
114,115
114,116
115,116
117,118
-----nextToken-----
2,4,7,9,10,13,15,19,21,25,28,32,35,36,41,43,45,50,52,56,59,61,64,65,69,72,73,77,81,82,85,88,90,91,92,95,99,103,105,109,112,116,118
-----computeFrom-----
23,24
23,25
38,39
38,40
39,40
39,41
54,55
54,56
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;WhileStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ContinueStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static __inline voidsokvareserve(struct socket *so, vsize_t len){	int s;	s = splvm();	simple_lock(&so_pendfree_slock);	while (socurkva + len > somaxkva) {		size_t freed;		/*		 * try to do pendfree.		 */		freed = sodopendfreel(so);		/*		 * if some kva was freed, try again.		 */		if (freed)			continue;		SOSEND_COUNTER_INCR(&sosend_kvalimit);		sokvawaiters++;		(void) ltsleep(&socurkva, PVM, "sokva", 0, &so_pendfree_slock);		sokvawaiters--;	}	socurkva += len;	simple_unlock(&so_pendfree_slock);	splx(s);}
static __inline void
sokvareserve(struct socket *so, vsize_t len)
sokvareserve
struct socket *so
struct socket
socket
*so
*
so
vsize_t len
vsize_t
vsize_t
len
len
{	int s;	s = splvm();	simple_lock(&so_pendfree_slock);	while (socurkva + len > somaxkva) {		size_t freed;		/*		 * try to do pendfree.		 */		freed = sodopendfreel(so);		/*		 * if some kva was freed, try again.		 */		if (freed)			continue;		SOSEND_COUNTER_INCR(&sosend_kvalimit);		sokvawaiters++;		(void) ltsleep(&socurkva, PVM, "sokva", 0, &so_pendfree_slock);		sokvawaiters--;	}	socurkva += len;	simple_unlock(&so_pendfree_slock);	splx(s);}
int s;
int s;
int
s
s
s = splvm();
s = splvm()
s
s
splvm()
splvm
splvm
simple_lock(&so_pendfree_slock);
simple_lock(&so_pendfree_slock);
simple_lock
simple_lock
(&so_pendfree_slock)
&so_pendfree_slock
&
so_pendfree_slock
while (socurkva + len > somaxkva) {		size_t freed;		/*		 * try to do pendfree.		 */		freed = sodopendfreel(so);		/*		 * if some kva was freed, try again.		 */		if (freed)			continue;		SOSEND_COUNTER_INCR(&sosend_kvalimit);		sokvawaiters++;		(void) ltsleep(&socurkva, PVM, "sokva", 0, &so_pendfree_slock);		sokvawaiters--;	}
socurkva + len > somaxkva
socurkva + len
socurkva
socurkva
len
len
somaxkva
somaxkva
{		size_t freed;		/*		 * try to do pendfree.		 */		freed = sodopendfreel(so);		/*		 * if some kva was freed, try again.		 */		if (freed)			continue;		SOSEND_COUNTER_INCR(&sosend_kvalimit);		sokvawaiters++;		(void) ltsleep(&socurkva, PVM, "sokva", 0, &so_pendfree_slock);		sokvawaiters--;	}
size_t freed;
size_t freed;
size_t
size_t
freed
freed
freed = sodopendfreel(so);
freed = sodopendfreel(so)
freed
freed
sodopendfreel(so)
sodopendfreel
sodopendfreel
so
so
if (freed)			continue;
freed
freed
continue;
SOSEND_COUNTER_INCR(&sosend_kvalimit);
SOSEND_COUNTER_INCR(&sosend_kvalimit);
SOSEND_COUNTER_INCR
SOSEND_COUNTER_INCR
(&sosend_kvalimit)
&sosend_kvalimit
&
sosend_kvalimit
sokvawaiters++;
sokvawaiters++
sokvawaiters
sokvawaiters
(void) ltsleep(&socurkva, PVM, "sokva", 0, &so_pendfree_slock);
(void) ltsleep(&socurkva, PVM, "sokva", 0, &so_pendfree_slock)
void
void

ltsleep(&socurkva, PVM, "sokva", 0, &so_pendfree_slock)
ltsleep
ltsleep
&socurkva
socurkva
socurkva
PVM
PVM
"sokva"
0
&so_pendfree_slock
so_pendfree_slock
so_pendfree_slock
sokvawaiters--;
sokvawaiters--
sokvawaiters
sokvawaiters
socurkva += len;
socurkva += len
socurkva
socurkva
len
len
simple_unlock(&so_pendfree_slock);
simple_unlock(&so_pendfree_slock)
simple_unlock
simple_unlock
&so_pendfree_slock
so_pendfree_slock
so_pendfree_slock
splx(s);
splx(s)
splx
splx
s
s
-----joern-----
(1,41,0)
(31,38,0)
(47,13,0)
(9,13,0)
(26,41,0)
(3,13,0)
(13,3,0)
(46,13,0)
(44,36,0)
(38,41,0)
(39,15,0)
(3,19,0)
(50,45,0)
(27,16,0)
(2,36,0)
(48,40,0)
(16,49,0)
(6,11,0)
(42,10,0)
(49,16,0)
(13,46,0)
(40,41,0)
(21,38,0)
(37,49,0)
(38,21,0)
(1,15,0)
(32,9,0)
(30,36,0)
(43,22,0)
(6,41,0)
(13,9,0)
(33,44,0)
(5,50,0)
(40,38,0)
(16,4,0)
(3,36,0)
(17,22,0)
(20,13,0)
(15,1,0)
(23,50,0)
(17,36,0)
(29,36,0)
(7,10,0)
(11,6,0)
(18,13,0)
(14,46,0)
(25,41,0)
(35,5,0)
(19,3,0)
(8,50,0)
(10,45,0)
(50,5,0)
(0,29,0)
(34,11,0)
(49,36,0)
(22,17,0)
(10,41,0)
(13,46,1)
(1,15,1)
(13,9,1)
(33,17,1)
(8,23,1)
(3,13,1)
(22,43,1)
(15,39,1)
(38,21,1)
(7,5,1)
(35,50,1)
(50,45,1)
(17,22,1)
(20,18,1)
(14,44,1)
(9,32,1)
(6,11,1)
(21,31,1)
(27,37,1)
(11,34,1)
(50,8,1)
(16,27,1)
(23,29,1)
(48,1,1)
(16,4,1)
(23,28,1)
(39,10,1)
(5,35,1)
(5,50,1)
(37,5,1)
(18,46,1)
(49,16,1)
(23,6,1)
(40,48,1)
(3,19,1)
(34,38,1)
(28,24,1)
(40,38,1)
(24,49,1)
(46,14,1)
(0,3,1)
(12,40,1)
(43,24,1)
(42,7,1)
(10,45,1)
(29,0,1)
(32,47,1)
(44,33,1)
(47,20,1)
(10,42,1)
(9,24,2)
(16,4,2)
(0,24,2)
(13,46,2)
(46,24,2)
(49,5,2)
(33,24,2)
(29,24,2)
(38,21,2)
(18,24,2)
(3,19,2)
(1,15,2)
(16,5,2)
(44,24,2)
(24,5,2)
(20,24,2)
(3,13,2)
(40,38,2)
(49,16,2)
(10,45,2)
(22,24,2)
(8,5,2)
(14,24,2)
(37,5,2)
(6,11,2)
(5,50,2)
(28,24,2)
(27,5,2)
(43,24,2)
(13,9,2)
(13,24,2)
(32,24,2)
(17,24,2)
(17,22,2)
(50,5,2)
(50,45,2)
(23,5,2)
(35,5,2)
(5,5,2)
(47,24,2)
(3,24,2)
-----------------------------------
(0,sokvawaiters)
(1,simple_unlock(&so_pendfree_slock)
(2,freed)
(3,(void)
(4,struct socket *so)
(5,socurkva + len > somaxkva)
(6,simple_lock(&so_pendfree_slock)
(7,socurkva)
(8,len)
(9,&so_pendfree_slock)
(10,socurkva += len)
(11,&so_pendfree_slock)
(12,RET)
(13,ltsleep(&socurkva, PVM, "sokva", 0, &so_pendfree_slock)
(14,socurkva)
(15,&so_pendfree_slock)
(16,sodopendfreel(so)
(17,SOSEND_COUNTER_INCR(&sosend_kvalimit)
(18,PVM)
(19,void)
(20,"sokva")
(21,splvm()
(22,&sosend_kvalimit)
(23,socurkva)
(24,freed)
(25,while (socurkva + len > somaxkva)
(26,s)
(27,so)
(28,continue;)
(29,sokvawaiters--)
(30,if (freed)
(31,s)
(32,so_pendfree_slock)
(33,sokvawaiters)
(34,so_pendfree_slock)
(35,somaxkva)
(36,)
(37,freed)
(38,s = splvm()
(39,so_pendfree_slock)
(40,splx(s)
(41,)
(42,len)
(43,sosend_kvalimit)
(44,sokvawaiters++)
(45,vsize_t len)
(46,&socurkva)
(47,0)
(48,s)
(49,freed = sodopendfreel(so)
(50,socurkva + len)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^