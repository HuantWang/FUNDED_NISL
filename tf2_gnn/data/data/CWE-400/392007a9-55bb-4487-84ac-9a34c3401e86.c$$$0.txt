-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(1)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
64,65
64,66
66,67
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,33,36,37,41,43,48,50,54,56,57,61,63,65,70,72
-----computeFrom-----
13,14
13,15
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(1)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(1)    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(1)    {        /* FIX: Deallocate memory */        free(data);    }
1
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(25,20,0)
(31,28,0)
(10,28,0)
(14,28,0)
(4,29,0)
(9,22,0)
(7,3,0)
(26,10,0)
(27,29,0)
(1,15,0)
(23,7,0)
(27,30,0)
(8,22,0)
(22,7,0)
(24,23,0)
(21,12,0)
(11,9,0)
(3,7,0)
(19,10,0)
(13,21,0)
(20,23,0)
(6,20,0)
(24,15,0)
(29,27,0)
(22,9,0)
(23,15,0)
(18,23,0)
(16,28,0)
(7,22,0)
(2,24,0)
(21,23,0)
(7,23,0)
(21,10,0)
(21,13,1)
(21,23,1)
(22,9,1)
(17,5,1)
(7,22,1)
(23,7,1)
(20,25,1)
(17,21,1)
(2,27,1)
(4,20,1)
(9,11,1)
(29,4,1)
(21,10,1)
(7,3,1)
(20,23,1)
(10,26,1)
(8,18,1)
(32,10,1)
(25,6,1)
(26,19,1)
(11,8,1)
(18,32,1)
(6,23,1)
(13,5,1)
(5,24,1)
(2,20,1)
(24,2,1)
(24,23,1)
(5,32,1)
(27,29,1)
(7,22,2)
(21,10,2)
(24,32,2)
(25,32,2)
(21,23,2)
(21,5,2)
(23,7,2)
(7,3,2)
(2,32,2)
(24,23,2)
(7,32,2)
(6,32,2)
(4,20,2)
(27,20,2)
(27,29,2)
(22,32,2)
(29,20,2)
(20,23,2)
(11,32,2)
(13,5,2)
(20,32,2)
(9,32,2)
(23,32,2)
(22,9,2)
(8,32,2)
(18,32,2)
-----------------------------------
(0, sizeof(wchar_t)
(1,if (data == NULL)
(2,data)
(3,wchar_t *)
(4,1)
(5,1)
(6,data)
(7,(wchar_t *)
(8,100)
(9,sizeof(wchar_t)
(10,data = NULL)
(11,wchar_t)
(12,)
(13,data)
(14,data)
(15,)
(16,if(1)
(17,RET)
(18,data)
(19,data)
(20,data == NULL)
(21,free(data)
(22,calloc(100, sizeof(wchar_t)
(23,data = (wchar_t *)
(24,printWLine(data)
(25,NULL)
(26,NULL)
(27,exit(-1)
(28,)
(29,-1)
(30,)
(31,if(1)
(32,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^