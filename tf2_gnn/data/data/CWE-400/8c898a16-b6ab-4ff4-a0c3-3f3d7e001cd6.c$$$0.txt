-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_32_bad()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
47,49
48,49
49,50
49,51
51,52
51,53
51,54
53,54
54,55
56,57
58,59
58,60
58,61
59,60
59,61
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
69,70
71,72
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
90,91
92,93
94,95
94,96
95,96
96,97
96,98
98,99
98,100
100,101
101,102
102,103
104,105
104,106
104,107
104,108
104,109
104,110
104,111
105,106
106,107
106,108
107,108
109,110
109,111
111,112
113,114
114,115
114,116
115,116
117,118
117,119
117,120
120,121
121,122
123,124
124,125
124,126
126,127
126,128
126,129
129,130
131,132
132,133
132,134
133,134
135,136
135,137
135,138
136,137
138,139
141,142
141,143
142,143
142,144
143,144
145,146
147,148
148,149
149,150
149,151
150,151
153,154
153,155
153,156
153,157
154,155
155,156
155,157
156,157
159,160
159,161
160,161
162,163
162,164
163,164
163,165
164,165
167,168
169,170
170,171
172,173
173,174
173,175
174,175
174,176
175,176
175,177
176,177
178,179
180,181
180,182
180,183
180,184
180,185
181,182
183,184
185,186
186,187
186,188
189,190
189,191
190,191
192,193
194,195
196,197
197,198
198,199
198,200
199,200
202,203
202,204
203,204
205,206
206,207
207,208
207,209
208,209
210,211
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,55,57,62,64,66,68,70,75,78,80,85,86,91,93,97,99,103,108,110,112,116,118,119,122,125,127,128,130,134,137,139,140,144,146,151,152,157,158,161,165,166,168,171,177,179,182,184,187,188,191,193,195,200,201,204,209,211
-----computeFrom-----
32,33
32,34
59,60
59,61
73,74
73,75
88,89
88,90
132,133
132,134
142,143
142,144
155,156
155,157
159,160
159,161
174,175
174,176
-----guardedBy-----
64,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_32_bad(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_32_bad()
CWE400_Resource_Exhaustion__fgets_fwrite_32_bad
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(86,55,0)
(85,61,0)
(57,84,0)
(77,86,0)
(53,47,0)
(43,108,0)
(42,107,0)
(80,29,0)
(68,59,0)
(34,16,0)
(83,85,0)
(52,105,0)
(99,31,0)
(74,46,0)
(36,65,0)
(47,66,0)
(95,19,0)
(10,55,0)
(11,59,0)
(64,5,0)
(82,72,0)
(4,46,0)
(1,43,0)
(66,19,0)
(101,20,0)
(67,50,0)
(64,84,0)
(23,87,0)
(19,41,0)
(78,72,0)
(104,25,0)
(55,104,0)
(9,104,0)
(0,60,0)
(46,25,0)
(108,25,0)
(9,55,0)
(87,41,0)
(75,33,0)
(21,72,0)
(29,19,0)
(46,74,0)
(98,60,0)
(50,49,0)
(49,50,0)
(44,19,0)
(62,46,0)
(27,50,0)
(42,25,0)
(51,50,0)
(91,9,0)
(55,86,0)
(38,33,0)
(8,41,0)
(45,107,0)
(79,25,0)
(9,5,0)
(15,23,0)
(50,51,0)
(76,39,0)
(7,9,0)
(65,66,0)
(107,42,0)
(50,66,0)
(62,87,0)
(66,65,0)
(40,33,0)
(105,19,0)
(2,19,0)
(49,16,0)
(106,66,0)
(85,66,0)
(70,105,0)
(87,62,0)
(69,50,0)
(21,23,0)
(100,74,0)
(56,87,0)
(81,84,0)
(32,65,0)
(103,30,0)
(24,25,0)
(5,64,0)
(63,25,0)
(17,19,0)
(96,99,0)
(23,21,0)
(65,59,0)
(89,5,0)
(33,84,0)
(108,43,0)
(37,73,0)
(54,23,0)
(23,54,0)
(58,33,0)
(33,75,0)
(41,25,0)
(97,19,0)
(50,67,0)
(102,19,0)
(88,75,0)
(92,101,0)
(39,72,0)
(48,62,0)
(3,67,0)
(93,64,0)
(5,6,0)
(14,51,0)
(71,21,0)
(94,104,0)
(28,103,0)
(90,108,0)
(60,104,0)
(84,60,0)
(22,29,0)
(13,47,0)
(12,42,0)
(86,108,0)
(16,49,0)
(59,19,0)
(91,108,0)
(18,91,0)
(77,10,1)
(45,12,1)
(50,67,1)
(21,23,1)
(33,40,1)
(1,90,1)
(49,50,1)
(80,87,1)
(48,56,1)
(107,45,1)
(85,83,1)
(36,32,1)
(59,68,1)
(29,22,1)
(22,80,1)
(62,46,1)
(65,59,1)
(46,74,1)
(106,59,1)
(75,88,1)
(11,105,1)
(67,3,1)
(16,34,1)
(18,5,1)
(65,36,1)
(71,72,1)
(13,66,1)
(9,55,1)
(70,29,1)
(66,65,1)
(86,77,1)
(23,54,1)
(34,21,1)
(69,51,1)
(100,4,1)
(84,57,1)
(68,11,1)
(58,84,1)
(93,89,1)
(78,101,1)
(50,51,1)
(35,26,1)
(108,43,1)
(26,21,1)
(14,67,1)
(76,49,1)
(33,84,1)
(82,78,1)
(10,42,1)
(71,39,1)
(18,103,1)
(91,108,1)
(27,16,1)
(83,26,1)
(49,16,1)
(47,66,1)
(5,64,1)
(62,48,1)
(76,99,1)
(53,13,1)
(105,52,1)
(89,75,1)
(7,91,1)
(64,93,1)
(32,106,1)
(85,66,1)
(78,47,1)
(15,71,1)
(38,58,1)
(88,33,1)
(96,49,1)
(92,47,1)
(9,7,1)
(50,69,1)
(74,100,1)
(81,55,1)
(4,108,1)
(35,85,1)
(40,38,1)
(23,87,1)
(86,108,1)
(51,14,1)
(47,53,1)
(101,92,1)
(52,70,1)
(3,27,1)
(55,86,1)
(91,18,1)
(103,28,1)
(87,62,1)
(28,75,1)
(39,76,1)
(64,84,1)
(57,81,1)
(42,107,1)
(9,5,1)
(12,46,1)
(99,96,1)
(21,72,1)
(23,15,1)
(43,1,1)
(56,9,1)
(75,33,1)
(50,66,1)
(39,72,1)
(72,82,1)
(16,21,2)
(49,21,2)
(93,75,2)
(67,21,2)
(42,107,2)
(3,21,2)
(34,21,2)
(27,21,2)
(15,21,2)
(99,49,2)
(50,66,2)
(86,108,2)
(96,49,2)
(47,66,2)
(5,75,2)
(85,26,2)
(101,47,2)
(50,51,2)
(46,74,2)
(85,66,2)
(5,64,2)
(55,86,2)
(21,72,2)
(92,47,2)
(65,59,2)
(76,21,2)
(89,75,2)
(69,21,2)
(83,26,2)
(51,21,2)
(39,72,2)
(39,21,2)
(103,75,2)
(64,75,2)
(64,84,2)
(28,75,2)
(23,54,2)
(87,62,2)
(50,21,2)
(50,67,2)
(23,21,2)
(71,21,2)
(23,87,2)
(49,50,2)
(21,23,2)
(75,33,2)
(14,21,2)
(49,16,2)
(108,43,2)
(91,108,2)
(62,46,2)
(21,21,2)
(33,84,2)
(66,65,2)
(9,55,2)
(9,5,2)
-----------------------------------
(0,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,count)
(2,pFile)
(3,char)
(4,countPtr2)
(5,count = atoi(inputBuffer)
(6,)
(7,count)
(8,count)
(9,*countPtr1 = count)
(10,count)
(11,filename)
(12,count)
(13,pFile)
(14,SENTENCE)
(15,count)
(16,strlen(SENTENCE)
(17,if (pFile == NULL)
(18,countPtr1)
(19,)
(20,)
(21,i < (size_t)
(22,0)
(23,(size_t)
(24,countPtr1)
(25,)
(26,pFile)
(27,SENTENCE)
(28,"fgets()
(29,i = 0)
(30,)
(31,)
(32,filename)
(33,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(34,SENTENCE)
(35,RET)
(36,"w+")
(37,if (strlen(SENTENCE)
(38,CHAR_ARRAY_SIZE)
(39,i++)
(40,stdin)
(41,)
(42,count = -1)
(43,&count)
(44,for (i = 0; i < (size_t)
(45,1)
(46,*countPtr2 = &count)
(47,pFile == NULL)
(48,countPtr2)
(49,strlen(SENTENCE)
(50,fwrite(SENTENCE, sizeof(char)
(51,strlen(SENTENCE)
(52,NULL)
(53,NULL)
(54,size_t)
(55,count = *countPtr1)
(56,count)
(57,"")
(58,inputBuffer)
(59,*filename = "output_bad.txt")
(60,)
(61,)
(62,*countPtr2)
(63,count)
(64,atoi(inputBuffer)
(65,fopen(filename, "w+")
(66,pFile = fopen(filename, "w+")
(67,sizeof(char)
(68,"output_bad.txt")
(69,pFile)
(70,pFile)
(71,i)
(72,i = 0)
(73,)
(74,&count)
(75,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(76,i)
(77,countPtr1)
(78,i)
(79,countPtr2)
(80,i)
(81,inputBuffer)
(82,0)
(83,pFile)
(84,inputBuffer[CHAR_ARRAY_SIZE] = "")
(85,fclose(pFile)
(86,*countPtr1)
(87,count = *countPtr2)
(88,NULL)
(89,count)
(90,countPtr1)
(91,*countPtr1)
(92,1)
(93,inputBuffer)
(94,count)
(95,i)
(96,1)
(97,filename)
(98,inputBuffer)
(99,exit(1)
(100,count)
(101,exit(1)
(102,if (pFile)
(103,printLine("fgets()
(104,)
(105,*pFile = NULL)
(106,pFile)
(107,-1)
(108,*countPtr1 = &count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^