-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_11_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(globalReturnsTrue())
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
31,32
33,34
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
52,53
52,54
53,54
53,55
54,55
57,58
59,60
60,61
62,63
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,14,16,20,25,28,32,38,40,42,47,48,51,55,56,58,61,66,67
-----computeFrom-----
12,13
12,14
23,24
23,25
45,46
45,47
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_11_bad(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_11_bad()
CWE400_Resource_Exhaustion__rand_for_loop_11_bad
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(globalReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(25,33,0)
(4,19,0)
(18,7,0)
(17,8,0)
(14,19,0)
(12,7,0)
(34,17,0)
(16,19,0)
(27,15,0)
(7,6,0)
(22,3,0)
(21,34,0)
(7,3,0)
(5,10,0)
(7,10,0)
(6,33,0)
(3,22,0)
(3,1,0)
(30,33,0)
(20,6,0)
(0,34,0)
(32,20,0)
(28,33,0)
(24,14,0)
(15,26,0)
(7,12,0)
(2,17,0)
(10,19,0)
(6,20,0)
(13,6,0)
(10,7,0)
(29,3,0)
(9,17,0)
(19,16,1)
(34,21,1)
(14,19,1)
(14,24,1)
(6,20,1)
(15,27,1)
(24,15,1)
(29,31,1)
(7,12,1)
(5,14,1)
(4,34,1)
(21,0,1)
(5,19,1)
(10,19,1)
(3,22,1)
(27,10,1)
(11,23,1)
(31,6,1)
(23,3,1)
(7,3,1)
(7,6,1)
(0,23,1)
(32,13,1)
(10,7,1)
(22,29,1)
(11,10,1)
(7,18,1)
(23,31,1)
(20,32,1)
(18,5,1)
(16,4,1)
(10,10,2)
(18,23,2)
(3,22,2)
(29,31,2)
(0,23,2)
(6,20,2)
(4,23,2)
(21,23,2)
(7,12,2)
(10,7,2)
(7,6,2)
(22,31,2)
(10,19,2)
(34,23,2)
(16,23,2)
(18,10,2)
(5,10,2)
(24,10,2)
(7,10,2)
(7,3,2)
(3,31,2)
(14,19,2)
(19,23,2)
(15,10,2)
(7,23,2)
(10,23,2)
(14,10,2)
(27,10,2)
(5,23,2)
-----------------------------------
(0,i)
(1,)
(2,i)
(3,count = RAND32()
(4,i)
(5,i)
(6,count = -1)
(7,(size_t)
(8,)
(9,for (i = 0; i < (size_t)
(10,i < (size_t)
(11,RET)
(12,size_t)
(13,count)
(14,i++)
(15,printLine("Hello")
(16,0)
(17,)
(18,count)
(19,i = 0)
(20,-1)
(21,0)
(22,RAND32()
(23,globalReturnsTrue()
(24,i)
(25,count)
(26,)
(27,"Hello")
(28,if(globalReturnsTrue()
(29,count)
(30,if(globalReturnsTrue()
(31,globalReturnsTrue()
(32,1)
(33,)
(34,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^