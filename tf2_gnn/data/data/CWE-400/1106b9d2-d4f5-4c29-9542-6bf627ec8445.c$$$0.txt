-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_02_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
82,84
84,85
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,83,85
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_02_bad(){    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_02_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_02_bad
{    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(34,3,0)
(6,5,0)
(5,31,0)
(37,2,0)
(4,15,0)
(11,15,0)
(42,37,0)
(14,45,0)
(27,36,0)
(10,38,0)
(3,34,0)
(38,15,0)
(43,37,0)
(46,13,0)
(30,38,0)
(44,11,0)
(13,41,0)
(21,3,0)
(9,34,0)
(29,2,0)
(23,44,0)
(43,0,0)
(20,18,0)
(13,15,0)
(13,46,0)
(33,36,0)
(5,6,0)
(12,6,0)
(28,3,0)
(0,15,0)
(7,11,0)
(16,0,0)
(32,2,0)
(0,43,0)
(26,18,0)
(34,9,0)
(18,26,0)
(25,11,0)
(22,45,0)
(18,46,0)
(17,0,0)
(35,32,0)
(44,32,0)
(41,13,0)
(9,2,0)
(1,43,0)
(15,2,0)
(36,45,0)
(15,13,0)
(46,18,0)
(19,26,0)
(3,15,0)
(8,45,0)
(11,44,0)
(20,4,1)
(27,33,1)
(25,37,1)
(17,16,1)
(19,20,1)
(11,15,1)
(37,42,1)
(23,11,1)
(0,15,1)
(30,15,1)
(10,30,1)
(38,15,1)
(13,46,1)
(24,40,1)
(43,1,1)
(44,11,1)
(16,5,1)
(26,19,1)
(4,40,1)
(0,17,1)
(3,28,1)
(9,34,1)
(28,21,1)
(6,12,1)
(15,13,1)
(39,24,1)
(36,27,1)
(18,26,1)
(1,0,1)
(38,10,1)
(40,36,1)
(7,25,1)
(16,38,1)
(11,7,1)
(3,15,1)
(34,3,1)
(5,6,1)
(24,9,1)
(43,0,1)
(32,35,1)
(42,43,1)
(35,44,1)
(44,23,1)
(46,18,1)
(21,32,1)
(12,38,1)
(13,41,1)
(42,40,2)
(9,34,2)
(20,40,2)
(38,40,2)
(19,40,2)
(5,6,2)
(7,40,2)
(26,40,2)
(16,40,2)
(3,40,2)
(28,40,2)
(18,40,2)
(11,40,2)
(23,40,2)
(13,46,2)
(1,40,2)
(3,15,2)
(44,40,2)
(13,40,2)
(5,38,2)
(4,40,2)
(15,40,2)
(32,40,2)
(30,40,2)
(46,18,2)
(37,40,2)
(10,40,2)
(13,41,2)
(25,40,2)
(35,40,2)
(21,40,2)
(17,40,2)
(38,15,2)
(44,11,2)
(0,15,2)
(9,40,2)
(15,13,2)
(43,0,2)
(12,38,2)
(0,40,2)
(43,40,2)
(46,40,2)
(18,26,2)
(11,15,2)
(34,3,2)
(6,38,2)
(34,40,2)
-----------------------------------
(0,data[0])
(1,intOne)
(2,)
(3,data[0])
(4,data)
(5,exit(-1)
(6,-1)
(7,0)
(8,if(1)
(9,printStructLine(&data[0])
(10,NULL)
(11,data[0])
(12,1)
(13,(twoIntsStruct *)
(14,if(1)
(15,data = (twoIntsStruct *)
(16,data)
(17,0)
(18,100*sizeof(twoIntsStruct)
(19,twoIntsStruct)
(20,100)
(21,data)
(22,data)
(23,intTwo)
(24,1)
(25,data)
(26,sizeof(twoIntsStruct)
(27,NULL)
(28,0)
(29,if (data == NULL)
(30,data)
(31,)
(32,data[0].intTwo = 0)
(33,data)
(34,&data[0])
(35,0)
(36,data = NULL)
(37,data[0].intOne = 0)
(38,data == NULL)
(39,RET)
(40,1)
(41,twoIntsStruct *)
(42,0)
(43,data[0].intOne)
(44,data[0].intTwo)
(45,)
(46,malloc(100*sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^