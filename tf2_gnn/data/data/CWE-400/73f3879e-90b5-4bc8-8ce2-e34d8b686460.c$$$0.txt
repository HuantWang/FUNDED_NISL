-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_badSink(size_t data)
{
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
41,42
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,14,16,17,21,24,26,31,34,36,39,42,45,46,50,52,57,59,63,65,67,71,73,77,79,84,85
-----computeFrom-----
19,20
19,21
29,30
29,31
40,41
40,42
48,49
48,50
-----guardedBy-----
26,67
21,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_badSink(size_t data){    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_badSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_badSink
size_t data
size_t
size_t
data
data
{    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(26,8,0)
(23,16,0)
(18,17,0)
(9,24,0)
(2,8,0)
(37,28,0)
(8,26,0)
(14,18,0)
(26,22,0)
(7,3,0)
(19,24,0)
(12,24,0)
(24,11,0)
(15,37,0)
(10,25,0)
(0,24,0)
(34,20,0)
(33,12,0)
(22,26,0)
(37,15,0)
(31,11,0)
(25,20,0)
(27,9,0)
(26,4,0)
(22,11,0)
(11,22,0)
(21,30,0)
(30,24,0)
(19,3,0)
(36,12,0)
(29,15,0)
(13,26,0)
(11,31,0)
(30,3,0)
(11,24,0)
(1,18,0)
(35,9,0)
(32,19,0)
(20,25,0)
(24,3,0)
(20,4,0)
(16,6,0)
(9,3,0)
(26,4,1)
(30,24,1)
(0,20,1)
(27,12,1)
(9,24,1)
(11,31,1)
(22,26,1)
(11,22,1)
(15,29,1)
(30,21,1)
(10,34,1)
(36,33,1)
(20,4,1)
(33,24,1)
(16,23,1)
(25,10,1)
(32,30,1)
(26,8,1)
(2,13,1)
(12,36,1)
(9,35,1)
(20,25,1)
(35,27,1)
(24,11,1)
(27,37,1)
(29,12,1)
(5,19,1)
(12,24,1)
(19,24,1)
(23,20,1)
(19,32,1)
(8,2,1)
(21,9,1)
(5,16,1)
(13,0,1)
(37,15,1)
(26,20,2)
(24,20,2)
(29,12,2)
(27,20,2)
(0,20,2)
(32,20,2)
(9,20,2)
(30,24,2)
(33,20,2)
(22,26,2)
(20,4,2)
(11,20,2)
(26,4,2)
(24,11,2)
(22,20,2)
(12,20,2)
(11,31,2)
(26,8,2)
(12,24,2)
(36,20,2)
(21,20,2)
(30,20,2)
(13,20,2)
(35,20,2)
(20,25,2)
(9,24,2)
(15,12,2)
(19,24,2)
(37,15,2)
(8,20,2)
(16,20,2)
(23,20,2)
(19,20,2)
(2,20,2)
(11,22,2)
(37,12,2)
-----------------------------------
(0,myString)
(1,myString)
(2,char)
(3,)
(4,size_t data)
(5,RET)
(6,)
(7,if (myString == NULL)
(8,sizeof(char)
(9,strcpy(myString, HELLO_STRING)
(10,HELLO_STRING)
(11,(char *)
(12,myString == NULL)
(13,data)
(14,if (data > strlen(HELLO_STRING)
(15,-1)
(16,printLine("Input is less than the length of the source string")
(17,)
(18,)
(19,free(myString)
(20,data > strlen(HELLO_STRING)
(21,myString)
(22,malloc(data*sizeof(char)
(23,"Input is less than the length of the source string")
(24,myString = (char *)
(25,strlen(HELLO_STRING)
(26,data*sizeof(char)
(27,myString)
(28,)
(29,1)
(30,printLine(myString)
(31,char *)
(32,myString)
(33,myString)
(34,data)
(35,HELLO_STRING)
(36,NULL)
(37,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^