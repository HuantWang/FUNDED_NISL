-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_06_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
53,54
54,55
54,56
56,57
56,58
58,59
59,60
61,62
61,63
62,63
62,64
62,65
62,66
62,67
62,68
62,69
62,70
62,71
62,72
62,73
62,74
62,75
62,76
63,64
64,65
64,66
65,66
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
84,85
85,86
85,87
85,88
85,89
86,87
88,89
89,90
92,93
93,94
94,95
96,97
97,98
97,99
98,99
98,100
99,100
102,103
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
112,113
114,115
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
123,124
125,126
125,127
126,127
126,128
127,128
127,129
127,130
127,131
128,129
130,131
132,133
132,134
133,134
133,135
134,135
136,137
138,139
139,140
141,142
142,143
143,144
145,146
147,148
149,150
149,151
150,151
150,152
151,152
151,153
151,154
152,153
154,155
156,157
158,159
160,161
162,163
163,164
163,165
164,165
166,167
166,168
166,169
166,170
167,168
169,170
171,172
173,174
175,176
175,177
176,177
176,178
177,178
179,180
181,182
183,184
184,185
184,186
185,186
187,188
187,189
187,190
187,191
187,192
188,189
190,191
192,193
194,195
194,196
195,196
199,200
199,201
200,201
200,202
201,202
201,203
202,203
204,205
206,207
206,208
207,208
210,211
212,213
213,214
213,215
214,215
214,216
215,216
217,218
220,221
221,222
221,223
222,223
224,225
224,226
224,227
224,228
225,226
227,228
229,230
233,234
233,235
234,235
234,236
235,236
237,238
239,240
240,241
241,242
241,243
242,243
244,245
246,247
246,248
247,248
247,249
248,249
250,251
252,253
253,254
254,255
254,256
255,256
257,258
259,260
259,261
260,261
260,262
261,262
264,265
265,266
265,267
266,267
267,268
267,269
269,270
269,271
272,273
272,274
272,275
273,274
273,275
274,275
276,277
276,278
277,278
279,280
281,282
281,283
281,284
281,285
281,286
282,283
283,284
283,285
284,285
286,287
286,288
287,288
287,289
289,290
291,292
291,293
292,293
294,295
294,296
295,296
297,298
298,299
298,300
301,302
301,303
302,303
302,304
303,304
305,306
307,308
308,309
309,310
309,311
310,311
312,313
314,315
315,316
315,317
315,318
316,317
318,319
320,321
322,323
323,324
323,325
324,325
326,327
328,329
329,330
329,331
330,331
332,333
334,335
335,336
336,337
336,338
337,338
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,32,34,38,40,43,47,49,52,55,57,60,66,69,71,73,75,79,81,83,87,90,91,95,100,101,103,109,110,111,113,118,119,122,124,129,131,135,137,140,144,146,148,153,155,157,159,161,165,168,170,172,174,178,180,182,186,189,191,193,196,197,198,203,205,208,209,211,216,218,219,223,226,228,230,231,232,236,238,243,245,249,251,256,258,262,263,268,270,271,275,278,280,285,288,290,293,296,299,300,304,306,311,313,317,319,321,325,327,331,333,338,339
-----computeFrom-----
13,14
13,15
18,19
18,20
64,65
64,66
77,78
77,79
97,98
97,99
105,106
105,107
115,116
115,117
126,127
126,128
150,151
150,152
163,164
163,165
176,177
176,178
184,185
184,186
194,195
194,196
200,201
200,202
201,202
201,203
206,207
206,208
213,214
213,215
221,222
221,223
234,235
234,236
247,248
247,249
260,261
260,262
273,274
273,275
283,284
283,285
294,295
294,296
302,303
302,304
-----guardedBy-----
236,245
249,258
280,321
275,296
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_06_bad(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_06_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_06_bad
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(31,44,0)
(142,120,0)
(75,156,0)
(158,3,0)
(192,151,0)
(75,105,0)
(154,146,0)
(128,133,0)
(80,162,0)
(177,61,0)
(39,201,0)
(180,73,0)
(193,71,0)
(188,151,0)
(5,140,0)
(41,133,0)
(159,143,0)
(9,42,0)
(148,146,0)
(181,88,0)
(34,71,0)
(131,30,0)
(65,150,0)
(118,32,0)
(121,74,0)
(85,12,0)
(114,127,0)
(173,140,0)
(105,75,0)
(191,127,0)
(167,100,0)
(76,37,0)
(71,150,0)
(108,140,0)
(113,172,0)
(116,37,0)
(130,19,0)
(91,157,0)
(163,201,0)
(89,144,0)
(156,61,0)
(175,183,0)
(117,199,0)
(21,46,0)
(140,134,0)
(82,84,0)
(182,183,0)
(100,127,0)
(41,98,0)
(61,150,0)
(12,37,0)
(35,44,0)
(178,23,0)
(37,116,0)
(133,140,0)
(14,183,0)
(20,25,0)
(39,136,0)
(79,15,0)
(172,165,0)
(111,150,0)
(185,138,0)
(61,177,0)
(172,113,0)
(1,114,0)
(39,199,0)
(99,80,0)
(132,150,0)
(190,140,0)
(84,183,0)
(45,15,0)
(88,69,0)
(28,19,0)
(176,119,0)
(200,140,0)
(13,65,0)
(49,157,0)
(22,165,0)
(96,116,0)
(103,105,0)
(144,201,0)
(175,165,0)
(90,156,0)
(27,168,0)
(29,17,0)
(113,44,0)
(149,100,0)
(113,168,0)
(33,120,0)
(122,140,0)
(0,155,0)
(77,64,0)
(86,150,0)
(187,140,0)
(109,28,0)
(54,176,0)
(95,105,0)
(71,155,0)
(19,111,0)
(47,92,0)
(44,120,0)
(148,143,0)
(138,150,0)
(144,199,0)
(151,45,0)
(129,195,0)
(43,111,0)
(198,46,0)
(40,177,0)
(160,140,0)
(74,133,0)
(179,14,0)
(45,150,0)
(186,101,0)
(81,17,0)
(41,71,0)
(2,189,0)
(194,87,0)
(102,133,0)
(199,193,0)
(14,175,0)
(30,150,0)
(37,12,0)
(162,71,0)
(157,175,0)
(107,162,0)
(67,156,0)
(182,175,0)
(59,177,0)
(11,155,0)
(84,175,0)
(83,9,0)
(114,44,0)
(168,113,0)
(171,148,0)
(125,144,0)
(87,177,0)
(8,176,0)
(53,155,0)
(164,39,0)
(193,199,0)
(110,120,0)
(141,63,0)
(165,22,0)
(69,88,0)
(92,30,0)
(48,162,0)
(170,169,0)
(114,73,0)
(197,150,0)
(68,175,0)
(58,182,0)
(60,38,0)
(20,195,0)
(66,150,0)
(6,63,0)
(17,65,0)
(115,77,0)
(20,148,0)
(88,169,0)
(137,150,0)
(162,80,0)
(177,87,0)
(4,177,0)
(104,201,0)
(57,193,0)
(177,199,0)
(113,127,0)
(37,150,0)
(7,56,0)
(126,150,0)
(50,28,0)
(52,61,0)
(62,69,0)
(165,172,0)
(143,148,0)
(74,71,0)
(25,20,0)
(18,69,0)
(189,140,0)
(51,74,0)
(97,41,0)
(196,140,0)
(147,113,0)
(19,28,0)
(36,92,0)
(24,87,0)
(174,123,0)
(161,140,0)
(199,150,0)
(63,71,0)
(15,45,0)
(127,100,0)
(106,193,0)
(112,100,0)
(92,61,0)
(72,189,0)
(166,181,0)
(94,16,0)
(78,140,0)
(70,183,0)
(88,181,0)
(145,55,0)
(155,71,0)
(201,140,0)
(135,83,0)
(152,14,0)
(127,150,0)
(148,20,0)
(148,71,0)
(146,148,0)
(124,138,0)
(105,61,0)
(10,101,0)
(156,75,0)
(9,83,0)
(139,193,0)
(195,20,0)
(93,32,0)
(73,114,0)
(165,175,0)
(169,88,0)
(101,199,0)
(14,175,1)
(65,13,1)
(40,59,1)
(41,133,1)
(32,118,1)
(121,26,1)
(104,163,1)
(121,158,1)
(20,195,1)
(156,90,1)
(105,61,1)
(177,4,1)
(113,44,1)
(20,25,1)
(105,95,1)
(30,131,1)
(111,43,1)
(95,103,1)
(74,51,1)
(118,93,1)
(37,12,1)
(188,192,1)
(157,175,1)
(34,138,1)
(94,80,1)
(24,194,1)
(13,17,1)
(163,133,1)
(36,47,1)
(75,156,1)
(143,159,1)
(102,189,1)
(146,148,1)
(92,36,1)
(184,46,1)
(4,87,1)
(2,32,1)
(88,169,1)
(158,181,1)
(97,74,1)
(112,191,1)
(62,18,1)
(185,181,1)
(21,153,1)
(201,104,1)
(125,41,1)
(41,71,1)
(149,112,1)
(129,171,1)
(113,168,1)
(39,199,1)
(35,31,1)
(29,37,1)
(194,40,1)
(128,102,1)
(49,91,1)
(53,11,1)
(157,49,1)
(178,63,1)
(81,29,1)
(193,71,1)
(114,44,1)
(192,111,1)
(88,69,1)
(84,175,1)
(179,9,1)
(166,88,1)
(43,19,1)
(17,81,1)
(198,21,1)
(89,125,1)
(167,149,1)
(147,68,1)
(15,79,1)
(41,97,1)
(113,127,1)
(148,143,1)
(130,28,1)
(151,188,1)
(52,101,1)
(80,99,1)
(60,146,1)
(180,1,1)
(170,69,1)
(138,124,1)
(39,201,1)
(182,175,1)
(99,162,1)
(153,144,1)
(59,52,1)
(135,157,1)
(133,128,1)
(77,115,1)
(174,153,1)
(28,109,1)
(72,2,1)
(7,101,1)
(67,61,1)
(155,53,1)
(83,135,1)
(115,114,1)
(177,87,1)
(21,32,1)
(145,75,1)
(124,185,1)
(153,39,1)
(68,114,1)
(191,30,1)
(9,83,1)
(74,133,1)
(90,67,1)
(48,107,1)
(154,148,1)
(80,162,1)
(91,175,1)
(121,60,1)
(125,74,1)
(146,154,1)
(39,164,1)
(159,20,1)
(109,50,1)
(71,155,1)
(107,146,1)
(179,157,1)
(144,89,1)
(141,71,1)
(82,182,1)
(0,34,1)
(101,10,1)
(199,193,1)
(114,127,1)
(177,199,1)
(93,44,1)
(162,48,1)
(14,152,1)
(10,186,1)
(1,46,1)
(195,129,1)
(61,177,1)
(19,28,1)
(144,201,1)
(63,6,1)
(58,14,1)
(73,180,1)
(114,73,1)
(19,130,1)
(100,167,1)
(69,62,1)
(44,35,1)
(75,105,1)
(12,85,1)
(18,26,1)
(165,22,1)
(85,63,1)
(50,65,1)
(87,24,1)
(106,117,1)
(51,121,1)
(37,116,1)
(131,92,1)
(172,113,1)
(148,71,1)
(193,139,1)
(121,94,1)
(27,147,1)
(139,57,1)
(11,0,1)
(46,198,1)
(121,7,1)
(76,12,1)
(152,179,1)
(21,174,1)
(169,170,1)
(165,172,1)
(171,45,1)
(162,71,1)
(6,141,1)
(84,82,1)
(168,27,1)
(144,199,1)
(92,61,1)
(189,72,1)
(148,20,1)
(121,145,1)
(121,178,1)
(164,144,1)
(181,166,1)
(156,61,1)
(101,199,1)
(117,80,1)
(186,199,1)
(47,75,1)
(127,100,1)
(103,156,1)
(18,201,1)
(175,165,1)
(57,106,1)
(182,58,1)
(79,151,1)
(184,77,1)
(63,71,1)
(96,76,1)
(74,71,1)
(45,15,1)
(181,88,1)
(184,84,1)
(26,127,1)
(116,96,1)
(41,71,2)
(114,127,2)
(177,199,2)
(69,26,2)
(69,32,2)
(116,63,2)
(61,177,2)
(88,32,2)
(156,61,2)
(117,80,2)
(104,32,2)
(157,114,2)
(7,101,2)
(124,181,2)
(47,75,2)
(17,63,2)
(159,63,2)
(19,63,2)
(162,146,2)
(166,26,2)
(72,32,2)
(4,101,2)
(175,114,2)
(81,63,2)
(105,156,2)
(114,46,2)
(18,26,2)
(175,165,2)
(155,181,2)
(58,114,2)
(92,61,2)
(199,193,2)
(48,146,2)
(101,80,2)
(9,157,2)
(12,63,2)
(95,156,2)
(83,157,2)
(100,75,2)
(18,32,2)
(168,114,2)
(90,101,2)
(71,155,2)
(103,156,2)
(162,71,2)
(60,146,2)
(41,74,2)
(181,26,2)
(37,116,2)
(36,75,2)
(96,63,2)
(188,63,2)
(37,63,2)
(127,75,2)
(75,105,2)
(113,44,2)
(34,181,2)
(45,15,2)
(113,127,2)
(144,32,2)
(52,101,2)
(65,63,2)
(50,63,2)
(174,153,2)
(80,162,2)
(71,181,2)
(170,26,2)
(45,63,2)
(102,32,2)
(11,181,2)
(84,114,2)
(53,181,2)
(41,133,2)
(59,101,2)
(148,20,2)
(193,71,2)
(82,114,2)
(79,63,2)
(172,113,2)
(74,32,2)
(172,114,2)
(39,144,2)
(115,114,2)
(15,63,2)
(80,146,2)
(152,114,2)
(167,75,2)
(20,195,2)
(107,146,2)
(75,101,2)
(67,101,2)
(40,101,2)
(9,83,2)
(125,32,2)
(171,63,2)
(88,26,2)
(169,32,2)
(74,71,2)
(194,101,2)
(165,172,2)
(84,175,2)
(6,181,2)
(73,46,2)
(88,69,2)
(62,26,2)
(30,75,2)
(165,22,2)
(63,181,2)
(14,114,2)
(1,46,2)
(63,71,2)
(112,75,2)
(76,63,2)
(28,63,2)
(75,156,2)
(182,114,2)
(201,32,2)
(130,63,2)
(144,199,2)
(99,146,2)
(20,25,2)
(139,80,2)
(181,32,2)
(149,75,2)
(128,32,2)
(113,114,2)
(146,63,2)
(181,88,2)
(148,143,2)
(178,63,2)
(91,114,2)
(186,80,2)
(14,175,2)
(19,28,2)
(148,71,2)
(157,175,2)
(114,73,2)
(62,32,2)
(43,63,2)
(27,114,2)
(177,101,2)
(94,80,2)
(169,26,2)
(114,44,2)
(129,63,2)
(191,75,2)
(179,114,2)
(109,63,2)
(113,168,2)
(131,75,2)
(141,181,2)
(166,32,2)
(39,199,2)
(29,63,2)
(156,101,2)
(189,32,2)
(144,201,2)
(146,148,2)
(68,114,2)
(106,80,2)
(0,181,2)
(135,157,2)
(51,32,2)
(88,169,2)
(145,75,2)
(10,80,2)
(177,87,2)
(39,201,2)
(193,80,2)
(143,63,2)
(133,32,2)
(154,63,2)
(89,32,2)
(121,32,2)
(26,75,2)
(85,63,2)
(138,181,2)
(105,61,2)
(127,100,2)
(57,80,2)
(20,63,2)
(77,114,2)
(199,80,2)
(158,181,2)
(97,74,2)
(165,114,2)
(111,63,2)
(37,12,2)
(153,32,2)
(148,63,2)
(87,101,2)
(170,32,2)
(151,63,2)
(163,32,2)
(185,181,2)
(61,101,2)
(49,114,2)
(164,144,2)
(101,199,2)
(2,32,2)
(195,63,2)
(13,63,2)
(192,63,2)
(182,175,2)
(180,46,2)
(92,75,2)
(74,133,2)
(24,101,2)
(147,114,2)
-----------------------------------
(0,AF_INET)
(1,data)
(2,wsaDataInit)
(3,)
(4,0)
(5,if (listenSocket != INVALID_SOCKET)
(6,INVALID_SOCKET)
(7,break;)
(8,myString)
(9,exit(-1)
(10,SOCKET_ERROR)
(11,SOCK_STREAM)
(12,&service)
(13,AF_INET)
(14,wcscpy(myString, HELLO_STRING)
(15,htons(TCP_PORT)
(16,)
(17,service.sin_family)
(18,2)
(19,service.sin_addr.s_addr)
(20,(struct sockaddr*)
(21,STATIC_CONST_FIVE)
(22,wchar_t *)
(23,)
(24,1)
(25,struct sockaddr*)
(26,0)
(27,wchar_t)
(28,service.sin_addr)
(29,service)
(30,inputBuffer[recvResult] = \'\\0\')
(31,data)
(32,STATIC_CONST_FIVE==5)
(33,if(STATIC_CONST_FIVE==5)
(34,listenSocket)
(35,0)
(36,recvResult)
(37,memset(&service, 0, sizeof(service)
(38,)
(39,CLOSE_SOCKET(acceptSocket)
(40,inputBuffer)
(41,CLOSE_SOCKET(listenSocket)
(42,)
(43,INADDR_ANY)
(44,data = 0)
(45,service.sin_port = htons(TCP_PORT)
(46,STATIC_CONST_FIVE==5)
(47,inputBuffer)
(48,LISTEN_BACKLOG)
(49,NULL)
(50,service)
(51,INVALID_SOCKET)
(52,recvResult)
(53,IPPROTO_TCP)
(54,if (data > wcslen(HELLO_STRING)
(55,)
(56,)
(57,NULL)
(58,myString)
(59,acceptSocket)
(60,break;)
(61,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(62,2)
(63,listenSocket == INVALID_SOCKET)
(64,)
(65,service.sin_family = AF_INET)
(66,if (listenSocket == INVALID_SOCKET)
(67,recvResult)
(68,myString)
(69,MAKEWORD(2,2)
(70,if (myString == NULL)
(71,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(72,0)
(73,wcslen(HELLO_STRING)
(74,listenSocket != INVALID_SOCKET)
(75,recvResult == SOCKET_ERROR || recvResult == 0)
(76,0)
(77,printLine("Input is less than the length of the source string")
(78,do)
(79,TCP_PORT)
(80,listen(listenSocket, LISTEN_BACKLOG)
(81,sin_family)
(82,myString)
(83,-1)
(84,free(myString)
(85,service)
(86,if (listen(listenSocket, LISTEN_BACKLOG)
(87,CHAR_ARRAY_SIZE - 1)
(88,WSAStartup(MAKEWORD(2,2)
(89,INVALID_SOCKET)
(90,SOCKET_ERROR)
(91,myString)
(92,inputBuffer[recvResult])
(93,STATIC_CONST_FIVE)
(94,break;)
(95,0)
(96,service)
(97,listenSocket)
(98,)
(99,SOCKET_ERROR)
(100,strtoul(inputBuffer, NULL, 0)
(101,acceptSocket == SOCKET_ERROR)
(102,listenSocket)
(103,recvResult)
(104,INVALID_SOCKET)
(105,recvResult == 0)
(106,listenSocket)
(107,listenSocket)
(108,if (acceptSocket != INVALID_SOCKET)
(109,sin_addr)
(110,data)
(111,service.sin_addr.s_addr = INADDR_ANY)
(112,inputBuffer)
(113,data*sizeof(wchar_t)
(114,data > wcslen(HELLO_STRING)
(115,"Input is less than the length of the source string")
(116,sizeof(service)
(117,acceptSocket)
(118,5)
(119,)
(120,)
(121,listenSocket)
(122,service)
(123,)
(124,1)
(125,acceptSocket)
(126,if (bind(listenSocket, (struct sockaddr*)
(127,data = strtoul(inputBuffer, NULL, 0)
(128,INVALID_SOCKET)
(129,service)
(130,s_addr)
(131,\'\\0\')
(132,if (acceptSocket == SOCKET_ERROR)
(133,listenSocket = INVALID_SOCKET)
(134,)
(135,1)
(136,)
(137,if (recvResult == SOCKET_ERROR || recvResult == 0)
(138,wsaDataInit = 1)
(139,NULL)
(140,)
(141,listenSocket)
(142,if(STATIC_CONST_FIVE==5)
(143,sizeof(service)
(144,acceptSocket != INVALID_SOCKET)
(145,break;)
(146,bind(listenSocket, (struct sockaddr*)
(147,data)
(148,bind(listenSocket, (struct sockaddr*)
(149,NULL)
(150,)
(151,service.sin_port)
(152,HELLO_STRING)
(153,wsaDataInit)
(154,SOCKET_ERROR)
(155,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(156,recvResult == SOCKET_ERROR)
(157,myString == NULL)
(158,break;)
(159,service)
(160,wsaDataInit)
(161,acceptSocket)
(162,listen(listenSocket, LISTEN_BACKLOG)
(163,acceptSocket)
(164,acceptSocket)
(165,(wchar_t *)
(166,NO_ERROR)
(167,0)
(168,sizeof(wchar_t)
(169,&wsaData)
(170,wsaData)
(171,listenSocket)
(172,malloc(data*sizeof(wchar_t)
(173,listenSocket)
(174,WSACleanup()
(175,myString = (wchar_t *)
(176,)
(177,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(178,break;)
(179,myString)
(180,HELLO_STRING)
(181,WSAStartup(MAKEWORD(2,2)
(182,printWLine(myString)
(183,)
(184,RET)
(185,wsaDataInit)
(186,acceptSocket)
(187,if (wsaDataInit)
(188,sin_port)
(189,wsaDataInit = 0)
(190,wsaData)
(191,data)
(192,service)
(193,accept(listenSocket, NULL, NULL)
(194,CHAR_ARRAY_SIZE)
(195,&service)
(196,inputBuffer)
(197,if (WSAStartup(MAKEWORD(2,2)
(198,5)
(199,acceptSocket = accept(listenSocket, NULL, NULL)
(200,recvResult)
(201,acceptSocket = INVALID_SOCKET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^