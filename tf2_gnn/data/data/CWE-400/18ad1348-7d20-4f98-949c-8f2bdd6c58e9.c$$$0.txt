-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(globalTrue)
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
42,43
42,44
42,45
43,44
43,45
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
53,54
56,57
56,58
56,59
56,60
56,61
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
67,68
69,70
69,71
70,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
-----nextToken-----
2,4,9,11,15,16,19,24,26,27,30,33,38,40,41,46,49,51,54,55,60,63,65,68,71,74,75,79,81,86,88,92,94,96,100,102,106,108,113,114
-----computeFrom-----
13,14
13,15
43,44
43,45
44,45
44,46
52,53
52,54
58,59
58,60
69,70
69,71
77,78
77,79
-----guardedBy-----
51,96
54,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(globalTrue)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(globalTrue)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(globalTrue)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
globalTrue
globalTrue
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(46,19,0)
(46,17,0)
(44,11,0)
(25,4,0)
(46,30,0)
(36,39,0)
(51,29,0)
(17,46,0)
(38,9,0)
(23,14,0)
(10,14,0)
(52,45,0)
(23,35,0)
(45,19,0)
(29,17,0)
(42,23,0)
(31,6,0)
(3,54,0)
(29,14,0)
(11,38,0)
(40,43,0)
(24,14,0)
(12,33,0)
(35,23,0)
(47,26,0)
(7,19,0)
(21,1,0)
(38,11,0)
(13,47,0)
(16,0,0)
(54,34,0)
(32,0,0)
(30,46,0)
(21,35,0)
(0,28,0)
(55,49,0)
(5,4,0)
(45,34,0)
(8,34,0)
(6,19,0)
(21,14,0)
(14,4,0)
(1,21,0)
(17,29,0)
(19,46,0)
(19,34,0)
(39,29,0)
(50,23,0)
(15,49,0)
(43,33,0)
(43,53,0)
(18,6,0)
(48,21,0)
(35,21,0)
(33,43,0)
(33,14,0)
(49,19,0)
(22,4,0)
(29,39,0)
(41,1,0)
(6,34,0)
(54,19,0)
(2,43,0)
(54,3,1)
(17,29,1)
(29,14,1)
(45,19,1)
(23,50,1)
(44,49,1)
(55,15,1)
(48,37,1)
(31,38,1)
(20,37,1)
(37,27,1)
(15,19,1)
(3,45,1)
(40,2,1)
(54,19,1)
(19,46,1)
(31,49,1)
(35,21,1)
(52,6,1)
(18,31,1)
(49,19,1)
(35,23,1)
(37,43,1)
(33,12,1)
(46,17,1)
(27,14,1)
(2,27,1)
(1,41,1)
(36,51,1)
(21,14,1)
(49,55,1)
(14,10,1)
(12,40,1)
(20,47,1)
(13,35,1)
(51,7,1)
(47,13,1)
(11,44,1)
(33,14,1)
(38,11,1)
(6,18,1)
(6,19,1)
(39,36,1)
(23,14,1)
(7,35,1)
(10,24,1)
(43,33,1)
(50,42,1)
(29,39,1)
(21,1,1)
(41,48,1)
(45,52,1)
(46,30,1)
(20,54,1)
(42,21,1)
(38,11,2)
(49,35,2)
(7,35,2)
(6,19,2)
(19,35,2)
(33,14,2)
(15,35,2)
(2,27,2)
(43,33,2)
(51,35,2)
(35,23,2)
(45,19,2)
(54,35,2)
(6,35,2)
(31,35,2)
(44,49,2)
(12,27,2)
(18,35,2)
(29,35,2)
(21,14,2)
(43,27,2)
(23,14,2)
(40,27,2)
(47,35,2)
(36,35,2)
(52,35,2)
(29,39,2)
(17,35,2)
(46,17,2)
(55,35,2)
(35,21,2)
(19,46,2)
(23,21,2)
(13,35,2)
(1,37,2)
(48,37,2)
(35,37,2)
(17,29,2)
(42,21,2)
(21,37,2)
(49,19,2)
(46,35,2)
(33,27,2)
(41,37,2)
(29,14,2)
(54,19,2)
(21,1,2)
(3,35,2)
(50,21,2)
(11,49,2)
(45,35,2)
(46,30,2)
(39,35,2)
(38,49,2)
-----------------------------------
(0,)
(1,wcslen(HELLO_STRING)
(2,stdin)
(3,myString)
(4,)
(5,data)
(6,wcscpy(myString, HELLO_STRING)
(7,myString)
(8,if (myString == NULL)
(9,)
(10,0)
(11,-1)
(12,data)
(13,"Input is less than the length of the source string or too large")
(14,data = 0)
(15,myString)
(16,if (data > wcslen(HELLO_STRING)
(17,malloc(data*sizeof(wchar_t)
(18,HELLO_STRING)
(19,myString = (wchar_t *)
(20,RET)
(21,data > wcslen(HELLO_STRING)
(22,if(globalTrue)
(23,data < 100)
(24,data)
(25,if(globalTrue)
(26,)
(27,globalTrue)
(28,)
(29,data*sizeof(wchar_t)
(30,wchar_t *)
(31,myString)
(32,myString)
(33,&data)
(34,)
(35,data > wcslen(HELLO_STRING)
(36,wchar_t)
(37,globalTrue)
(38,exit(-1)
(39,sizeof(wchar_t)
(40,"%zu")
(41,HELLO_STRING)
(42,data)
(43,fscanf(stdin, "%zu", &data)
(44,1)
(45,printWLine(myString)
(46,(wchar_t *)
(47,printLine("Input is less than the length of the source string or too large")
(48,data)
(49,myString == NULL)
(50,100)
(51,data)
(52,myString)
(53,)
(54,free(myString)
(55,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^