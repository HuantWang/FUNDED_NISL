-----label-----
0
-----code-----
static void goodB2G1()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
69,71
70,71
73,74
74,75
75,76
75,77
76,77
79,80
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,71,72,77,78,83,85
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(2,39,0)
(27,4,0)
(9,16,0)
(7,38,0)
(20,39,0)
(40,2,0)
(34,10,0)
(1,39,0)
(31,0,0)
(23,28,0)
(14,22,0)
(38,7,0)
(2,18,0)
(16,2,0)
(7,3,0)
(18,3,0)
(18,2,0)
(30,4,0)
(28,39,0)
(3,18,0)
(21,31,0)
(31,2,0)
(31,4,0)
(12,22,0)
(28,2,0)
(33,8,0)
(13,1,0)
(29,33,0)
(26,19,0)
(18,6,0)
(32,19,0)
(4,22,0)
(11,7,0)
(3,7,0)
(6,18,0)
(24,28,0)
(15,10,0)
(41,22,0)
(17,5,0)
(19,32,0)
(1,2,0)
(37,38,0)
(35,16,0)
(32,36,0)
(42,5,0)
(9,2,1)
(11,40,1)
(19,26,1)
(18,3,1)
(34,1,1)
(16,2,1)
(1,13,1)
(27,30,1)
(35,9,1)
(28,2,1)
(40,5,1)
(38,37,1)
(31,4,1)
(13,28,1)
(5,17,1)
(24,32,1)
(17,42,1)
(21,10,1)
(31,2,1)
(23,24,1)
(18,6,1)
(33,29,1)
(28,23,1)
(16,35,1)
(25,33,1)
(25,31,1)
(34,5,1)
(32,19,1)
(3,7,1)
(37,11,1)
(2,18,1)
(31,21,1)
(24,16,1)
(29,10,1)
(1,2,1)
(26,16,1)
(7,38,1)
(4,27,1)
(10,15,1)
(15,34,1)
(42,4,1)
(32,19,2)
(11,5,2)
(2,5,2)
(35,5,2)
(18,3,2)
(7,5,2)
(23,5,2)
(24,5,2)
(33,10,2)
(3,7,2)
(26,16,2)
(37,5,2)
(1,5,2)
(9,5,2)
(32,16,2)
(19,16,2)
(7,38,2)
(13,5,2)
(29,10,2)
(3,5,2)
(31,10,2)
(21,10,2)
(1,2,2)
(40,5,2)
(16,5,2)
(2,18,2)
(31,2,2)
(18,6,2)
(18,5,2)
(28,5,2)
(28,2,2)
(38,5,2)
(16,2,2)
(31,4,2)
-----------------------------------
(0,)
(1,printLine(data)
(2,data = (char *)
(3,malloc(100*sizeof(char)
(4,data = NULL)
(5,STATIC_CONST_FIVE==5)
(6,char *)
(7,100*sizeof(char)
(8,)
(9,data)
(10,STATIC_CONST_FIVE!=5)
(11,100)
(12,if(STATIC_CONST_FIVE==5)
(13,data)
(14,if(STATIC_CONST_FIVE!=5)
(15,5)
(16,data == NULL)
(17,5)
(18,(char *)
(19,-1)
(20,if (data == NULL)
(21,data)
(22,)
(23,"A String")
(24,data)
(25,RET)
(26,1)
(27,NULL)
(28,strcpy(data, "A String")
(29,"Benign, fixed string")
(30,data)
(31,free(data)
(32,exit(-1)
(33,printLine("Benign, fixed string")
(34,STATIC_CONST_FIVE)
(35,NULL)
(36,)
(37,char)
(38,sizeof(char)
(39,)
(40,data)
(41,data)
(42,STATIC_CONST_FIVE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^