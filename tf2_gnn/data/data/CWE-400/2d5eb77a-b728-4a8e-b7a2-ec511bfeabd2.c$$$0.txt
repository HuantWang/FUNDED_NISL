-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_06_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,71,72,74
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_06_bad(){    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_06_bad()
CWE401_Memory_Leak__char_malloc_06_bad
{    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(26,10,0)
(1,11,0)
(31,35,0)
(27,15,0)
(32,11,0)
(24,25,0)
(19,23,0)
(20,15,0)
(30,27,0)
(0,11,0)
(10,20,0)
(33,3,0)
(4,12,0)
(15,20,0)
(25,17,0)
(7,17,0)
(27,7,0)
(8,12,0)
(23,17,0)
(29,18,0)
(34,35,0)
(23,7,0)
(35,7,0)
(16,23,0)
(7,27,0)
(14,18,0)
(13,1,0)
(22,7,0)
(8,36,0)
(25,7,0)
(15,27,0)
(2,11,0)
(12,8,0)
(21,20,0)
(27,30,0)
(6,3,0)
(28,1,0)
(5,17,0)
(20,10,0)
(35,34,1)
(20,10,1)
(19,16,1)
(16,8,1)
(31,7,1)
(15,20,1)
(16,35,1)
(1,13,1)
(12,4,1)
(26,21,1)
(27,15,1)
(35,7,1)
(7,27,1)
(23,7,1)
(33,18,1)
(14,1,1)
(33,25,1)
(18,29,1)
(22,18,1)
(27,30,1)
(25,7,1)
(10,26,1)
(9,3,1)
(6,33,1)
(23,19,1)
(34,31,1)
(4,35,1)
(24,23,1)
(13,28,1)
(25,24,1)
(3,6,1)
(21,22,1)
(29,14,1)
(8,12,1)
(25,7,2)
(4,35,2)
(27,30,2)
(20,10,2)
(23,18,2)
(16,18,2)
(8,35,2)
(10,18,2)
(15,20,2)
(25,18,2)
(35,7,2)
(22,18,2)
(20,18,2)
(24,18,2)
(27,18,2)
(8,12,2)
(31,18,2)
(7,18,2)
(26,18,2)
(7,27,2)
(21,18,2)
(12,35,2)
(27,15,2)
(35,18,2)
(15,18,2)
(34,18,2)
(19,18,2)
(23,7,2)
-----------------------------------
(0,if(STATIC_CONST_FIVE==5)
(1,data = NULL)
(2,data)
(3,STATIC_CONST_FIVE==5)
(4,1)
(5,if (data == NULL)
(6,5)
(7,data = (char *)
(8,exit(-1)
(9,RET)
(10,sizeof(char)
(11,)
(12,-1)
(13,NULL)
(14,STATIC_CONST_FIVE)
(15,malloc(100*sizeof(char)
(16,data)
(17,)
(18,STATIC_CONST_FIVE==5)
(19,"A String")
(20,100*sizeof(char)
(21,100)
(22,data)
(23,strcpy(data, "A String")
(24,data)
(25,printLine(data)
(26,char)
(27,(char *)
(28,data)
(29,5)
(30,char *)
(31,data)
(32,if(STATIC_CONST_FIVE==5)
(33,STATIC_CONST_FIVE)
(34,NULL)
(35,data == NULL)
(36,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^