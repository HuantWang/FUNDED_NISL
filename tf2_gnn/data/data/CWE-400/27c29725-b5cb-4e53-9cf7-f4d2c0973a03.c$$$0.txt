-----label-----
0
-----code-----
static void goodG2B2()
{
    wchar_t * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
43,44
43,45
43,46
44,45
46,47
49,50
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
60,61
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,48,52,54,58,59,61
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    wchar_t * data;    data = NULL;    if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    wchar_t * data;    data = NULL;    if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticFive==5
staticFive
staticFive
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(23,18,0)
(7,14,0)
(1,5,0)
(5,9,0)
(8,14,0)
(5,18,0)
(17,25,0)
(19,12,0)
(24,2,0)
(6,21,0)
(20,25,0)
(11,25,0)
(3,23,0)
(21,3,0)
(3,21,0)
(15,12,0)
(18,9,0)
(22,2,0)
(13,0,0)
(0,21,0)
(14,25,0)
(23,3,0)
(23,4,0)
(21,0,0)
(4,23,0)
(18,23,0)
(10,18,0)
(3,21,1)
(6,10,1)
(23,4,1)
(5,18,1)
(13,6,1)
(7,8,1)
(24,14,1)
(5,1,1)
(10,2,1)
(1,18,1)
(22,24,1)
(0,13,1)
(14,7,1)
(15,5,1)
(12,19,1)
(15,2,1)
(23,3,1)
(2,22,1)
(19,15,1)
(21,0,1)
(18,23,1)
(16,12,1)
(10,2,2)
(3,2,2)
(18,23,2)
(23,2,2)
(23,3,2)
(5,2,2)
(1,2,2)
(18,2,2)
(3,21,2)
(5,18,2)
(21,0,2)
(13,2,2)
(0,2,2)
(23,4,2)
(21,2,2)
(6,2,2)
-----------------------------------
(0,sizeof(wchar_t)
(1,data)
(2,staticFive==5)
(3,ALLOCA(100*sizeof(wchar_t)
(4,wchar_t *)
(5,printWLine(data)
(6,100)
(7,NULL)
(8,data)
(9,)
(10,data)
(11,if(staticFive==5)
(12,staticFive==5)
(13,wchar_t)
(14,data = NULL)
(15,staticFive)
(16,RET)
(17,data)
(18,data = (wchar_t *)
(19,5)
(20,if(staticFive==5)
(21,100*sizeof(wchar_t)
(22,5)
(23,(wchar_t *)
(24,staticFive)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^