-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
    {
        char myString[] = "myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = strdup(myString);
        /* Use data */
        printLine(data);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
49,50
50,51
50,52
51,52
55,56
55,57
57,58
57,59
57,60
57,61
57,62
57,63
58,59
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,28,29,31,35,38,40,44,46,47,48,52,53,54,56,59,60,61,62,66,67,68
-----computeFrom-----
13,14
13,15
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__strdup_char_15_bad()
CWE401_Memory_Leak__strdup_char_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(8,1,0)
(7,1,0)
(21,9,0)
(27,26,0)
(15,26,0)
(2,32,0)
(30,10,0)
(12,10,0)
(4,34,0)
(3,10,0)
(34,8,0)
(11,12,0)
(32,23,0)
(13,34,0)
(5,23,0)
(24,1,0)
(20,12,0)
(6,26,0)
(28,1,0)
(9,32,0)
(31,1,0)
(0,1,0)
(33,26,0)
(14,33,0)
(23,32,0)
(23,34,0)
(9,8,0)
(17,31,0)
(32,8,0)
(25,10,0)
(22,26,0)
(18,8,0)
(0,31,1)
(31,17,1)
(9,32,1)
(9,21,1)
(16,27,1)
(21,32,1)
(20,11,1)
(19,24,1)
(29,12,1)
(14,19,1)
(17,29,1)
(13,29,1)
(2,34,1)
(32,23,1)
(33,14,1)
(15,33,1)
(23,5,1)
(12,20,1)
(23,34,1)
(4,13,1)
(34,4,1)
(16,15,1)
(19,0,1)
(5,2,1)
(24,9,1)
(27,19,1)
(32,23,2)
(15,19,2)
(2,29,2)
(0,29,2)
(23,34,2)
(31,29,2)
(5,29,2)
(14,19,2)
(24,29,2)
(9,29,2)
(4,29,2)
(17,29,2)
(27,19,2)
(33,19,2)
(21,29,2)
(32,29,2)
(23,29,2)
(34,29,2)
(9,32,2)
(13,29,2)
-----------------------------------
(0,break;)
(1,)
(2,data)
(3,data)
(4,"myString")
(5,myString)
(6,default:)
(7,case 6:)
(8,)
(9,printLine(data)
(10,)
(11,data)
(12,data = NULL)
(13,myString)
(14,"Benign, fixed string")
(15,break;)
(16,RET)
(17,"Benign, fixed string")
(18,myString)
(19,7)
(20,NULL)
(21,data)
(22,case 7:)
(23,strdup(myString)
(24,break;)
(25,switch(6)
(26,)
(27,break;)
(28,default:)
(29,6)
(30,switch(7)
(31,printLine("Benign, fixed string")
(32,data = strdup(myString)
(33,printLine("Benign, fixed string")
(34,myString[] = "myString")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^