-----label-----
0
-----code-----
static enum fdset_sweep_state tcp_sweep(fdset_t *set, int i, void *data)
{
	UNUSED(data);
	assert(set && i < set->n && i >= 0);
	int fd = set->pfd[i].fd;

	/* Best-effort, name and shame. */
	struct sockaddr_storage ss;
	socklen_t len = sizeof(struct sockaddr_storage);
	if (getpeername(fd, (struct sockaddr*)&ss, &len) == 0) {
		char addr_str[SOCKADDR_STRLEN] = {0};
		sockaddr_tostr(addr_str, sizeof(addr_str), &ss);
		log_notice("TCP, terminated inactive client, address '%s'", addr_str);
	}

	close(fd);

	return FDSET_SWEEP;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
9,11
12,13
12,14
14,15
16,17
16,18
18,19
18,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
34,35
36,37
36,38
37,38
39,40
39,41
40,41
43,44
43,45
44,45
47,48
48,49
48,50
50,51
50,52
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
59,60
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
72,74
74,75
75,76
76,77
76,78
77,78
80,81
80,82
81,82
81,83
82,83
82,84
82,85
82,86
83,84
85,86
87,88
87,89
88,89
88,90
89,90
91,92
93,94
94,95
96,97
97,98
100,101
100,102
100,103
101,102
102,103
102,104
104,105
104,106
104,107
106,107
107,108
109,110
110,111
112,113
113,114
113,115
113,116
113,117
114,115
116,117
118,119
119,120
120,121
122,123
123,124
125,126
126,127
126,128
126,129
127,128
130,131
132,133
133,134
133,135
134,135
136,137
138,139
139,140
-----nextToken-----
3,5,8,10,11,13,15,17,19,20,25,27,31,35,38,41,42,45,46,49,51,57,58,60,61,65,67,71,73,78,79,84,86,90,92,95,98,99,103,105,108,111,115,117,121,124,128,129,131,135,137,140
-----computeFrom-----
32,33
32,34
33,34
33,35
36,37
36,38
43,44
43,45
81,82
81,83
-----guardedBy-----
95,124
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static enum fdset_sweep_state tcp_sweep(fdset_t *set, int i, void *data){	UNUSED(data);	assert(set && i < set->n && i >= 0);	int fd = set->pfd[i].fd;	/* Best-effort, name and shame. */	struct sockaddr_storage ss;	socklen_t len = sizeof(struct sockaddr_storage);	if (getpeername(fd, (struct sockaddr*)&ss, &len) == 0) {		char addr_str[SOCKADDR_STRLEN] = {0};		sockaddr_tostr(addr_str, sizeof(addr_str), &ss);		log_notice("TCP, terminated inactive client, address '%s'", addr_str);	}	close(fd);	return FDSET_SWEEP;}
static enum fdset_sweep_state
fdset_sweep_state
tcp_sweep(fdset_t *set, int i, void *data)
tcp_sweep
fdset_t *set
fdset_t
fdset_t
*set
*
set
int i
int
i
i
void *data
void
*data
*
data
{	UNUSED(data);	assert(set && i < set->n && i >= 0);	int fd = set->pfd[i].fd;	/* Best-effort, name and shame. */	struct sockaddr_storage ss;	socklen_t len = sizeof(struct sockaddr_storage);	if (getpeername(fd, (struct sockaddr*)&ss, &len) == 0) {		char addr_str[SOCKADDR_STRLEN] = {0};		sockaddr_tostr(addr_str, sizeof(addr_str), &ss);		log_notice("TCP, terminated inactive client, address '%s'", addr_str);	}	close(fd);	return FDSET_SWEEP;}
UNUSED(data);
UNUSED(data)
UNUSED
UNUSED
data
data
assert(set && i < set->n && i >= 0);
assert(set && i < set->n && i >= 0)
assert
assert
set && i < set->n && i >= 0
set && i < set->n
set
set
i < set->n
i
i
set->n
set
set
n
i >= 0
i
i
0
int fd = set->pfd[i].fd;
int fd = set->pfd[i].fd;
int
fd = set->pfd[i].fd
fd
= set->pfd[i].fd
set->pfd[i].fd
set->pfd[i]
set->pfd
set
set
pfd
i
i
fd
struct sockaddr_storage ss;
struct sockaddr_storage ss;
struct sockaddr_storage
sockaddr_storage
ss
ss
socklen_t len = sizeof(struct sockaddr_storage);
socklen_t len = sizeof(struct sockaddr_storage);
socklen_t
socklen_t
len = sizeof(struct sockaddr_storage)
len
= sizeof(struct sockaddr_storage)
sizeof(struct sockaddr_storage)
struct sockaddr_storage
struct sockaddr_storage
sockaddr_storage

if (getpeername(fd, (struct sockaddr*)&ss, &len) == 0) {		char addr_str[SOCKADDR_STRLEN] = {0};		sockaddr_tostr(addr_str, sizeof(addr_str), &ss);		log_notice("TCP, terminated inactive client, address '%s'", addr_str);	}
getpeername(fd, (struct sockaddr*)&ss, &len) == 0
getpeername(fd, (struct sockaddr*)&ss, &len)
getpeername
getpeername
fd
fd
(struct sockaddr*)&ss
struct sockaddr*
struct sockaddr
sockaddr
*
*
&ss
ss
ss
&len
len
len
0
{		char addr_str[SOCKADDR_STRLEN] = {0};		sockaddr_tostr(addr_str, sizeof(addr_str), &ss);		log_notice("TCP, terminated inactive client, address '%s'", addr_str);	}
char addr_str[SOCKADDR_STRLEN] = {0};
char addr_str[SOCKADDR_STRLEN] = {0};
char
addr_str[SOCKADDR_STRLEN] = {0}
addr_str
[SOCKADDR_STRLEN]
SOCKADDR_STRLEN
SOCKADDR_STRLEN
= {0}
{0}
0
sockaddr_tostr(addr_str, sizeof(addr_str), &ss);
sockaddr_tostr(addr_str, sizeof(addr_str), &ss)
sockaddr_tostr
sockaddr_tostr
addr_str
addr_str
sizeof(addr_str)
(addr_str)
addr_str
addr_str
&ss
ss
ss
log_notice("TCP, terminated inactive client, address '%s'", addr_str);
log_notice("TCP, terminated inactive client, address '%s'", addr_str)
log_notice
log_notice
"TCP, terminated inactive client, address '%s'"
addr_str
addr_str
close(fd);
close(fd)
close
close
fd
fd
return FDSET_SWEEP;
FDSET_SWEEP
FDSET_SWEEP
-----joern-----
(49,1,0)
(57,53,0)
(14,27,0)
(30,8,0)
(34,38,0)
(59,7,0)
(22,44,0)
(6,44,0)
(21,1,0)
(49,5,0)
(16,8,0)
(32,22,0)
(3,37,0)
(35,61,0)
(18,35,0)
(12,38,0)
(47,28,0)
(2,11,0)
(27,5,0)
(28,38,0)
(23,12,0)
(44,38,0)
(26,36,0)
(53,50,0)
(13,27,0)
(7,11,0)
(61,35,0)
(31,53,0)
(17,12,0)
(5,27,0)
(16,20,0)
(11,60,0)
(37,22,0)
(20,44,0)
(22,32,0)
(22,19,0)
(54,19,0)
(8,50,0)
(39,8,0)
(35,11,0)
(43,26,0)
(45,38,0)
(9,38,0)
(1,49,0)
(20,16,0)
(12,17,0)
(15,1,0)
(53,49,0)
(4,35,0)
(28,44,0)
(19,12,0)
(16,52,0)
(25,7,0)
(29,3,0)
(17,55,0)
(44,20,0)
(49,53,0)
(37,3,0)
(61,11,0)
(10,38,0)
(48,20,0)
(33,61,0)
(58,16,0)
(8,16,0)
(1,52,0)
(51,5,0)
(42,9,0)
(41,9,0)
(26,38,0)
(62,4,0)
(57,38,0)
(40,22,0)
(35,4,0)
(46,60,0)
(53,57,0)
(56,32,0)
(37,0,0)
(5,49,0)
(55,17,0)
(19,22,0)
(7,60,0)
(5,52,0)
(22,37,0)
(27,50,0)
(35,60,0)
(0,37,0)
(24,38,0)
(31,26,1)
(1,15,1)
(13,51,1)
(17,55,1)
(17,23,1)
(15,21,1)
(11,2,1)
(42,28,1)
(14,13,1)
(21,5,1)
(3,29,1)
(53,49,1)
(27,50,1)
(44,20,1)
(58,8,1)
(59,35,1)
(35,4,1)
(7,11,1)
(16,58,1)
(8,50,1)
(5,52,1)
(47,7,1)
(37,0,1)
(54,37,1)
(61,33,1)
(53,31,1)
(1,52,1)
(47,32,1)
(16,8,1)
(29,40,1)
(22,44,1)
(12,17,1)
(7,25,1)
(35,11,1)
(22,19,1)
(30,6,1)
(28,47,1)
(32,22,1)
(57,53,1)
(28,44,1)
(62,61,1)
(22,37,1)
(25,59,1)
(5,27,1)
(51,31,1)
(40,12,1)
(53,50,1)
(32,56,1)
(26,43,1)
(4,62,1)
(26,36,1)
(20,48,1)
(27,14,1)
(16,52,1)
(39,30,1)
(20,16,1)
(19,12,1)
(35,61,1)
(48,16,1)
(6,57,1)
(56,22,1)
(37,3,1)
(9,42,1)
(2,32,1)
(49,5,1)
(41,9,1)
(61,11,1)
(19,54,1)
(23,44,1)
(49,1,1)
(33,18,1)
(18,11,1)
(8,39,1)
(37,0,2)
(41,9,2)
(28,44,2)
(25,32,2)
(4,32,2)
(16,52,2)
(7,11,2)
(26,36,2)
(53,49,2)
(44,20,2)
(7,32,2)
(57,53,2)
(18,32,2)
(5,27,2)
(12,17,2)
(8,50,2)
(35,4,2)
(22,44,2)
(32,22,2)
(35,11,2)
(49,1,2)
(15,5,2)
(21,5,2)
(22,19,2)
(14,31,2)
(27,31,2)
(49,31,2)
(2,32,2)
(49,5,2)
(22,37,2)
(62,32,2)
(5,52,2)
(20,16,2)
(1,52,2)
(51,31,2)
(17,55,2)
(37,3,2)
(59,32,2)
(61,11,2)
(1,5,2)
(53,50,2)
(61,32,2)
(35,32,2)
(19,12,2)
(11,32,2)
(27,50,2)
(35,61,2)
(16,8,2)
(13,31,2)
(33,32,2)
(5,31,2)
-----------------------------------
(0,struct sockaddr*)
(1,i >= 0)
(2,addr_str)
(3,&ss)
(4,&ss)
(5,i < set->n)
(6,fd)
(7,log_notice("TCP, terminated inactive client, address \'%s\'", addr_str)
(8,set->pfd)
(9,return FDSET_SWEEP;)
(10,len)
(11,addr_str[SOCKADDR_STRLEN] = {0})
(12,len = sizeof(struct sockaddr_storage)
(13,set)
(14,n)
(15,0)
(16,set->pfd[i])
(17,sizeof(struct sockaddr_storage)
(18,addr_str)
(19,&len)
(20,set->pfd[i].fd)
(21,i)
(22,getpeername(fd, (struct sockaddr*)
(23,len)
(24,fd)
(25,addr_str)
(26,UNUSED(data)
(27,set->n)
(28,close(fd)
(29,ss)
(30,set)
(31,set)
(32,getpeername(fd, (struct sockaddr*)
(33,addr_str)
(34,if (getpeername(fd, (struct sockaddr*)
(35,sockaddr_tostr(addr_str, sizeof(addr_str)
(36,void *data)
(37,(struct sockaddr*)
(38,)
(39,pfd)
(40,fd)
(41,RET)
(42,FDSET_SWEEP)
(43,data)
(44,fd = set->pfd[i].fd)
(45,ss)
(46,addr_str)
(47,fd)
(48,fd)
(49,i < set->n && i >= 0)
(50,fdset_t *set)
(51,i)
(52,int i)
(53,set && i < set->n && i >= 0)
(54,len)
(55,struct sockaddr_storage)
(56,0)
(57,assert(set && i < set->n && i >= 0)
(58,i)
(59,"TCP, terminated inactive client, address \'%s\'")
(60,)
(61,sizeof(addr_str)
(62,ss)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^