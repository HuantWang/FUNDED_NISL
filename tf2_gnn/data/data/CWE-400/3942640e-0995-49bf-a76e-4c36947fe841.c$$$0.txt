-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_01_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%zu", &data);
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
28,29
29,30
29,31
31,32
31,33
34,35
34,36
34,37
35,36
35,37
36,37
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
56,58
57,58
59,60
60,61
60,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
98,99
98,100
99,100
-----nextToken-----
2,4,9,11,15,16,20,22,23,26,30,32,33,37,40,42,47,50,52,55,58,61,62,66,68,73,75,79,81,83,87,89,93,95,100,101
-----computeFrom-----
13,14
13,15
35,36
35,37
45,46
45,47
56,57
56,58
64,65
64,66
-----guardedBy-----
42,83
37,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_01_bad(){    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_01_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_01_bad
{    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(5,14,0)
(7,19,0)
(17,12,0)
(24,21,0)
(33,21,0)
(4,21,0)
(43,20,0)
(35,12,0)
(45,15,0)
(29,37,0)
(2,39,0)
(27,20,0)
(42,26,0)
(37,7,0)
(44,0,0)
(41,34,0)
(3,25,0)
(0,39,0)
(21,39,0)
(30,42,0)
(37,34,0)
(40,37,0)
(41,37,0)
(45,14,0)
(25,39,0)
(25,4,0)
(18,11,0)
(15,7,0)
(28,37,0)
(16,41,0)
(31,0,0)
(23,25,0)
(7,15,0)
(45,21,0)
(11,1,0)
(22,34,0)
(38,40,0)
(13,17,0)
(1,11,0)
(19,7,0)
(32,4,0)
(20,37,0)
(9,40,0)
(7,37,0)
(28,34,0)
(1,6,0)
(15,45,0)
(14,45,0)
(8,45,0)
(4,25,0)
(12,17,0)
(12,21,0)
(10,28,0)
(40,34,0)
(9,1,1)
(27,43,1)
(23,3,1)
(4,32,1)
(45,14,1)
(43,37,1)
(11,18,1)
(20,37,1)
(41,37,1)
(10,40,1)
(14,5,1)
(36,42,1)
(9,20,1)
(17,13,1)
(5,8,1)
(35,25,1)
(40,38,1)
(25,4,1)
(28,10,1)
(15,45,1)
(21,24,1)
(38,9,1)
(42,30,1)
(37,7,1)
(36,41,1)
(18,20,1)
(41,16,1)
(7,15,1)
(12,21,1)
(13,35,1)
(4,21,1)
(45,21,1)
(24,33,1)
(3,21,1)
(16,28,1)
(28,37,1)
(29,12,1)
(40,37,1)
(20,27,1)
(7,19,1)
(8,29,1)
(32,23,1)
(12,17,1)
(30,12,1)
(1,11,1)
(45,12,2)
(28,12,2)
(14,12,2)
(43,12,2)
(41,12,2)
(42,12,2)
(40,12,2)
(27,12,2)
(29,12,2)
(20,12,2)
(37,7,2)
(37,12,2)
(8,12,2)
(38,12,2)
(10,12,2)
(45,14,2)
(5,12,2)
(11,20,2)
(40,37,2)
(4,21,2)
(41,37,2)
(16,12,2)
(7,15,2)
(45,21,2)
(12,17,2)
(15,12,2)
(25,4,2)
(18,20,2)
(1,11,2)
(15,45,2)
(9,12,2)
(28,37,2)
(12,21,2)
(20,37,2)
(30,12,2)
(7,12,2)
(7,19,2)
(1,20,2)
-----------------------------------
(0,)
(1,exit(-1)
(2,data)
(3,stdin)
(4,&data)
(5,wchar_t)
(6,)
(7,(wchar_t *)
(8,data)
(9,myString)
(10,myString)
(11,-1)
(12,data > wcslen(HELLO_STRING)
(13,HELLO_STRING)
(14,sizeof(wchar_t)
(15,malloc(data*sizeof(wchar_t)
(16,myString)
(17,wcslen(HELLO_STRING)
(18,1)
(19,wchar_t *)
(20,myString == NULL)
(21,data = 0)
(22,if (myString == NULL)
(23,"%zu")
(24,0)
(25,fscanf(stdin, "%zu", &data)
(26,)
(27,NULL)
(28,printWLine(myString)
(29,myString)
(30,"Input is less than the length of the source string")
(31,if (data > wcslen(HELLO_STRING)
(32,data)
(33,data)
(34,)
(35,data)
(36,RET)
(37,myString = (wchar_t *)
(38,HELLO_STRING)
(39,)
(40,wcscpy(myString, HELLO_STRING)
(41,free(myString)
(42,printLine("Input is less than the length of the source string")
(43,myString)
(44,myString)
(45,data*sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^