-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodG2BSink(size_t dataArray[])
{
    size_t data = dataArray[2];
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
27,28
27,29
30,31
30,32
30,33
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
52,54
53,54
55,56
56,57
56,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
73,76
74,75
76,77
78,79
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
-----nextToken-----
2,4,7,9,10,15,17,21,22,26,28,29,33,36,38,43,46,48,51,54,57,58,62,64,69,71,75,77,79,83,85,89,91,96,97
-----computeFrom-----
31,32
31,33
41,42
41,43
52,53
52,54
60,61
60,62
-----guardedBy-----
38,79
33,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodG2BSink(size_t dataArray[]){    size_t data = dataArray[2];    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodG2BSink(size_t dataArray[])
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodG2BSink
size_t dataArray[]
size_t
size_t
dataArray[]
dataArray
[]
{    size_t data = dataArray[2];    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = dataArray[2];
size_t data = dataArray[2];
size_t
size_t
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(25,13,0)
(42,15,0)
(6,27,0)
(36,19,0)
(5,32,0)
(12,3,0)
(32,33,0)
(0,36,0)
(36,29,0)
(24,43,0)
(5,16,0)
(14,35,0)
(32,5,0)
(13,14,0)
(21,3,0)
(23,2,0)
(10,19,0)
(12,19,0)
(22,32,0)
(37,12,0)
(19,3,0)
(18,7,0)
(31,15,0)
(43,16,0)
(30,19,0)
(19,36,0)
(7,27,0)
(21,19,0)
(41,23,0)
(0,7,0)
(14,13,0)
(11,16,0)
(40,3,0)
(9,30,0)
(34,30,0)
(10,3,0)
(15,42,0)
(4,32,0)
(26,12,0)
(8,43,0)
(28,21,0)
(7,0,0)
(7,5,0)
(39,42,0)
(27,7,0)
(29,36,0)
(17,5,0)
(36,0,0)
(1,10,0)
(15,5,0)
(20,19,0)
(38,23,1)
(36,29,1)
(30,34,1)
(27,6,1)
(23,41,1)
(30,19,1)
(31,5,1)
(13,25,1)
(21,28,1)
(36,0,1)
(20,15,1)
(10,1,1)
(10,19,1)
(14,13,1)
(32,33,1)
(32,4,1)
(26,14,1)
(15,5,1)
(7,5,1)
(15,42,1)
(42,39,1)
(0,7,1)
(19,36,1)
(25,30,1)
(18,20,1)
(37,26,1)
(12,19,1)
(34,9,1)
(4,22,1)
(41,15,1)
(9,19,1)
(28,10,1)
(26,30,1)
(21,19,1)
(7,27,1)
(5,32,1)
(38,21,1)
(1,12,1)
(39,31,1)
(6,18,1)
(22,17,1)
(12,37,1)
(18,15,2)
(0,15,2)
(25,30,2)
(23,15,2)
(30,19,2)
(12,15,2)
(15,42,2)
(12,19,2)
(7,27,2)
(1,15,2)
(26,15,2)
(0,7,2)
(13,30,2)
(14,13,2)
(21,19,2)
(30,15,2)
(37,15,2)
(10,15,2)
(19,36,2)
(7,5,2)
(36,15,2)
(34,15,2)
(14,30,2)
(28,15,2)
(36,0,2)
(32,33,2)
(36,29,2)
(27,15,2)
(41,15,2)
(10,19,2)
(5,32,2)
(9,15,2)
(19,15,2)
(7,15,2)
(15,5,2)
(20,15,2)
(6,15,2)
(21,15,2)
-----------------------------------
(0,malloc(data*sizeof(char)
(1,myString)
(2,)
(3,)
(4,2)
(5,data = dataArray[2])
(6,char)
(7,data*sizeof(char)
(8,myString)
(9,myString)
(10,printLine(myString)
(11,data)
(12,strcpy(myString, HELLO_STRING)
(13,-1)
(14,exit(-1)
(15,data > strlen(HELLO_STRING)
(16,)
(17,data)
(18,data)
(19,myString = (char *)
(20,myString)
(21,free(myString)
(22,dataArray)
(23,printLine("Input is less than the length of the source string")
(24,if (data > strlen(HELLO_STRING)
(25,1)
(26,myString)
(27,sizeof(char)
(28,myString)
(29,char *)
(30,myString == NULL)
(31,data)
(32,dataArray[2])
(33,size_t dataArray[])
(34,NULL)
(35,)
(36,(char *)
(37,HELLO_STRING)
(38,RET)
(39,HELLO_STRING)
(40,if (myString == NULL)
(41,"Input is less than the length of the source string")
(42,strlen(HELLO_STRING)
(43,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^