-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_34_bad()
{
    int * data;
    CWE401_Memory_Leak__int_realloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)realloc(data, 100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    myUnion.unionFirst = data;
    {
        int * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
73,74
73,75
74,75
74,76
75,76
78,79
80,81
80,82
81,82
82,83
82,84
84,85
84,86
84,87
87,88
88,89
88,90
89,90
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,39,42,43,47,49,54,56,61,62,63,67,70,71,76,77,79,83,85,86,90,91,92
-----computeFrom-----
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_34_bad(){    int * data;    CWE401_Memory_Leak__int_realloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)realloc(data, 100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_34_bad()
CWE401_Memory_Leak__int_realloc_34_bad
{    int * data;    CWE401_Memory_Leak__int_realloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)realloc(data, 100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
CWE401_Memory_Leak__int_realloc_34_unionType myUnion;
CWE401_Memory_Leak__int_realloc_34_unionType myUnion;
CWE401_Memory_Leak__int_realloc_34_unionType
CWE401_Memory_Leak__int_realloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * data = myUnion.unionSecond;
int * data = myUnion.unionSecond;
int
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(4,41,0)
(31,23,0)
(6,14,0)
(13,43,0)
(15,43,0)
(10,41,0)
(2,11,0)
(7,10,0)
(24,21,0)
(16,41,0)
(43,42,0)
(20,41,0)
(5,23,0)
(45,41,0)
(12,15,0)
(17,42,0)
(43,15,0)
(14,7,0)
(30,42,0)
(39,4,0)
(23,31,0)
(34,11,0)
(22,21,0)
(37,33,0)
(22,10,0)
(36,22,0)
(11,34,0)
(42,17,0)
(42,43,0)
(15,12,0)
(43,4,0)
(28,23,0)
(32,34,0)
(18,7,0)
(29,41,0)
(27,34,0)
(40,14,0)
(37,8,0)
(8,37,0)
(0,19,0)
(38,4,0)
(7,41,0)
(21,41,0)
(35,19,0)
(11,45,0)
(23,21,0)
(15,10,0)
(10,15,0)
(23,10,0)
(3,22,0)
(19,10,0)
(44,10,0)
(25,45,0)
(1,8,0)
(26,17,0)
(31,41,0)
(36,19,1)
(22,10,1)
(15,43,1)
(43,42,1)
(19,35,1)
(4,39,1)
(39,38,1)
(2,7,1)
(44,4,1)
(36,37,1)
(3,36,1)
(23,5,1)
(6,40,1)
(10,15,1)
(32,2,1)
(0,10,1)
(7,10,1)
(28,21,1)
(11,34,1)
(18,14,1)
(26,30,1)
(23,21,1)
(5,28,1)
(35,0,1)
(40,31,1)
(30,13,1)
(24,22,1)
(17,26,1)
(27,32,1)
(21,24,1)
(43,4,1)
(22,3,1)
(15,12,1)
(1,19,1)
(37,8,1)
(9,11,1)
(13,44,1)
(34,27,1)
(23,10,1)
(8,1,1)
(14,6,1)
(31,23,1)
(42,17,1)
(19,10,1)
(7,18,1)
(10,15,2)
(7,10,2)
(1,19,2)
(8,19,2)
(31,23,2)
(43,42,2)
(23,10,2)
(43,4,2)
(23,21,2)
(15,12,2)
(22,10,2)
(15,43,2)
(37,19,2)
(42,17,2)
(37,8,2)
(11,34,2)
(19,10,2)
-----------------------------------
(0,data)
(1,1)
(2,data)
(3,0)
(4,data = NULL)
(5,0)
(6,unionFirst)
(7,myUnion.unionFirst = data)
(8,-1)
(9,RET)
(10,data = (int *)
(11,* data = myUnion.unionSecond)
(12,int *)
(13,data)
(14,myUnion.unionFirst)
(15,(int *)
(16,data)
(17,sizeof(int)
(18,data)
(19,data == NULL)
(20,if (data == NULL)
(21,data[0] = 5)
(22,data[0])
(23,data[0])
(24,5)
(25,data)
(26,int)
(27,unionSecond)
(28,data)
(29,myUnion)
(30,100)
(31,printIntLine(data[0])
(32,myUnion)
(33,)
(34,myUnion.unionSecond)
(35,NULL)
(36,data)
(37,exit(-1)
(38,data)
(39,NULL)
(40,myUnion)
(41,)
(42,100*sizeof(int)
(43,realloc(data, 100*sizeof(int)
(44,data)
(45,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^