-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_16_bad()
{
    wchar_t * data;
    data = NULL;
    while(1)
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
21,22
21,23
21,24
22,23
23,24
23,25
25,26
25,27
25,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
46,47
46,48
48,49
48,50
-----nextToken-----
2,4,8,10,11,15,17,19,24,26,27,29,33,36,38,42,44,45,47,49,50
-----computeFrom-----
13,14
13,15
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_16_bad(){    wchar_t * data;    data = NULL;    while(1)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__strdup_wchar_t_16_bad()
CWE401_Memory_Leak__strdup_wchar_t_16_bad
{    wchar_t * data;    data = NULL;    while(1)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }        break;    }
1
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }        break;    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(18,0,0)
(0,6,0)
(16,13,0)
(3,7,0)
(17,13,0)
(5,20,0)
(6,0,0)
(21,17,0)
(14,12,0)
(4,12,0)
(15,6,0)
(1,21,0)
(12,20,0)
(2,17,0)
(0,17,0)
(8,20,0)
(10,20,0)
(21,0,0)
(16,21,1)
(2,9,1)
(19,9,1)
(3,19,1)
(1,0,1)
(15,18,1)
(21,0,1)
(11,19,1)
(4,14,1)
(9,12,1)
(0,6,1)
(18,2,1)
(11,3,1)
(6,15,1)
(19,16,1)
(21,1,1)
(12,4,1)
(0,9,2)
(15,9,2)
(3,19,2)
(16,9,2)
(21,9,2)
(21,0,2)
(2,9,2)
(0,6,2)
(18,9,2)
(1,9,2)
(6,9,2)
-----------------------------------
(0,data = wcsdup(myString)
(1,data)
(2,"myString")
(3,break;)
(4,NULL)
(5,while(1)
(6,wcsdup(myString)
(7,)
(8,while(1)
(9,1)
(10,data)
(11,RET)
(12,data = NULL)
(13,)
(14,data)
(15,myString)
(16,break;)
(17,)
(18,data)
(19,1)
(20,)
(21,printWLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^