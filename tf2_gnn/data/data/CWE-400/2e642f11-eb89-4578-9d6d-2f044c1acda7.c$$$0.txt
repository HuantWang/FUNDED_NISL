-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(5==5)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
28,29
28,30
31,32
31,33
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
-----nextToken-----
2,4,8,10,14,16,19,20,25,26,29,30,35,37,41,42
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(5==5)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(5==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(5==5)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(5==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(5==5)    {        /* FIX: Use a relatively small number */        count = 20;    }
5==5
5
5
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(5==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
5==5
5
5
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(22,3,0)
(21,15,0)
(7,21,0)
(3,22,0)
(5,4,0)
(9,21,0)
(7,2,0)
(19,4,0)
(23,2,0)
(13,22,0)
(7,22,0)
(22,4,0)
(14,16,0)
(8,4,0)
(6,1,0)
(0,1,0)
(20,16,0)
(17,23,0)
(18,3,0)
(10,21,0)
(11,7,0)
(7,21,1)
(7,11,1)
(9,16,1)
(10,9,1)
(21,10,1)
(12,23,1)
(14,20,1)
(22,3,1)
(23,17,1)
(1,6,1)
(12,1,1)
(11,1,1)
(7,22,1)
(6,0,1)
(0,21,1)
(20,22,1)
(18,13,1)
(16,14,1)
(3,18,1)
(0,16,1)
(17,7,1)
(7,22,2)
(21,16,2)
(7,1,2)
(11,1,2)
(23,1,2)
(9,16,2)
(7,21,2)
(17,1,2)
(10,16,2)
(22,3,2)
-----------------------------------
(0,5)
(1,5==5)
(2,)
(3,-1)
(4,)
(5,if(5==5)
(6,5)
(7,SLEEP(count)
(8,count)
(9,count)
(10,20)
(11,count)
(12,RET)
(13,count)
(14,5)
(15,)
(16,5==5)
(17,"Sleep time possibly too long")
(18,1)
(19,if(5==5)
(20,5)
(21,count = 20)
(22,count = -1)
(23,printLine("Sleep time possibly too long")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^