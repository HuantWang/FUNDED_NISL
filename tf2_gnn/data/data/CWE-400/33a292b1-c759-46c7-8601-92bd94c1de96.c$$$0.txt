-----label-----
1
-----code-----
static bool debug_fiq_exec(struct fiq_debugger_state *state,
			const char *cmd, unsigned *regs, void *svc_sp)
{
	bool signal_helper = false;

	if (!strcmp(cmd, "help") || !strcmp(cmd, "?")) {
		debug_help(state);
	} else if (!strcmp(cmd, "pc")) {
		debug_printf(state, " pc %08x cpsr %08x mode %s\n",
			regs[15], regs[16], mode_name(regs[16]));
	} else if (!strcmp(cmd, "regs")) {
		dump_regs(state, regs);
	} else if (!strcmp(cmd, "allregs")) {
		dump_allregs(state, regs);
	} else if (!strcmp(cmd, "bt")) {
		dump_stacktrace(state, (struct pt_regs *)regs, 100, svc_sp);
	} else if (!strncmp(cmd, "reboot", 6)) {
		cmd += 6;
		while (*cmd == ' ')
			cmd++;
		if (*cmd) {
			char tmp_cmd[32];
			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));
			kernel_restart(tmp_cmd);
		} else {
			kernel_restart(NULL);
		}
	} else if (!strcmp(cmd, "irqs")) {
		dump_irqs(state);
	} else if (!strcmp(cmd, "kmsg")) {
		dump_kernel_log(state);
	} else if (!strcmp(cmd, "version")) {
		debug_printf(state, "%s\n", linux_banner);
	} else if (!strcmp(cmd, "sleep")) {
		state->no_sleep = false;
		debug_printf(state, "enabling sleep\n");
	} else if (!strcmp(cmd, "nosleep")) {
		state->no_sleep = true;
		debug_printf(state, "disabling sleep\n");
	} else if (!strcmp(cmd, "console")) {
		state->console_enable = true;
		debug_printf(state, "console mode\n");
	} else if (!strcmp(cmd, "cpu")) {
		debug_printf(state, "cpu %d\n", state->current_cpu);
	} else if (!strncmp(cmd, "cpu ", 4)) {
		unsigned long cpu = 0;
		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)
			switch_cpu(state, cpu);
		else
			debug_printf(state, "invalid cpu\n");
		debug_printf(state, "cpu %d\n", state->current_cpu);
	} else {
		if (state->debug_busy) {
			debug_printf(state,
				"command processor busy. trying to abort.\n");
			state->debug_abort = -1;
		} else {
			strcpy(state->debug_cmd, cmd);
			state->debug_busy = 1;
		}

		return true;
	}
	if (!state->console_enable)
		debug_prompt(state);

	return signal_helper;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
18,20
21,22
21,23
23,24
23,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
30,31
30,32
32,33
34,35
34,36
34,37
35,36
35,37
36,37
37,38
37,39
37,40
38,39
40,41
43,44
44,45
44,46
44,47
45,46
47,48
50,51
51,52
52,53
52,54
53,54
55,56
57,58
57,59
57,60
58,59
59,60
59,61
59,62
60,61
62,63
65,66
66,67
67,68
67,69
67,70
67,71
67,72
67,73
68,69
70,71
73,74
73,75
74,75
77,78
77,79
78,79
81,82
81,83
82,83
84,85
84,86
85,86
88,89
88,90
88,91
89,90
90,91
90,92
90,93
91,92
93,94
96,97
97,98
98,99
98,100
98,101
99,100
101,102
103,104
105,106
105,107
105,108
106,107
107,108
107,109
107,110
108,109
110,111
113,114
114,115
115,116
115,117
115,118
116,117
118,119
120,121
122,123
122,124
122,125
123,124
124,125
124,126
124,127
125,126
127,128
130,131
131,132
132,133
132,134
132,135
132,136
132,137
133,134
135,136
137,138
137,139
138,139
138,140
139,140
141,142
143,144
146,147
148,149
148,150
148,151
149,150
150,151
150,152
150,153
150,154
151,152
153,154
157,158
157,159
157,160
158,159
159,160
159,161
160,161
163,164
163,165
164,165
164,166
165,166
166,167
169,170
170,171
171,172
173,174
173,175
173,176
174,175
175,176
177,178
177,179
177,180
178,179
179,180
179,181
181,182
181,183
183,184
185,186
186,187
186,188
186,189
186,190
187,188
189,190
191,192
193,194
194,195
195,196
197,198
198,199
198,200
199,200
201,202
203,204
204,205
205,206
205,207
206,207
208,209
209,210
211,212
211,213
211,214
212,213
213,214
213,215
213,216
214,215
216,217
219,220
220,221
221,222
221,223
222,223
224,225
226,227
226,228
226,229
227,228
228,229
228,230
228,231
229,230
231,232
234,235
235,236
236,237
236,238
237,238
239,240
241,242
241,243
241,244
242,243
243,244
243,245
243,246
244,245
246,247
249,250
250,251
251,252
251,253
251,254
251,255
252,253
254,255
257,258
259,260
259,261
259,262
260,261
261,262
261,263
261,264
262,263
264,265
267,268
267,269
268,269
269,270
269,271
270,271
270,272
271,272
275,276
276,277
276,278
276,279
277,278
279,280
282,283
282,284
282,285
283,284
284,285
284,286
284,287
285,286
287,288
290,291
290,292
291,292
292,293
292,294
293,294
293,295
294,295
298,299
299,300
299,301
299,302
300,301
302,303
305,306
305,307
305,308
306,307
307,308
307,309
307,310
308,309
310,311
313,314
313,315
314,315
315,316
315,317
316,317
316,318
317,318
321,322
322,323
322,324
322,325
323,324
325,326
328,329
328,330
328,331
329,330
330,331
330,332
330,333
331,332
333,334
336,337
337,338
338,339
338,340
338,341
338,342
339,340
341,342
344,345
344,346
345,346
348,349
348,350
348,351
349,350
350,351
350,352
350,353
350,354
351,352
353,354
357,358
357,359
357,360
358,359
359,360
359,361
361,362
361,363
363,364
365,366
365,367
365,368
366,367
366,368
367,368
367,369
367,370
367,371
368,369
370,371
370,372
371,372
375,376
376,377
379,380
380,381
380,382
380,383
381,382
383,384
385,386
387,388
388,389
388,390
388,391
389,390
391,392
394,395
395,396
395,397
395,398
395,399
396,397
398,399
401,402
401,403
402,403
405,406
405,407
406,407
406,408
406,409
407,408
407,409
408,409
411,412
411,413
412,413
413,414
413,415
413,416
414,415
416,417
419,420
420,421
420,422
421,422
421,423
422,423
425,426
427,428
427,429
428,429
429,430
429,431
429,432
430,431
432,433
432,434
433,434
436,437
438,439
439,440
439,441
440,441
440,442
441,442
445,446
447,448
447,449
448,449
449,450
449,451
450,451
453,454
454,455
454,456
455,456
457,458
459,460
460,461
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,20,22,24,25,29,31,33,39,41,42,46,48,49,54,56,61,63,64,69,71,72,75,76,79,80,83,86,87,92,94,95,100,102,104,109,111,112,117,119,121,126,128,129,134,136,140,142,144,145,147,152,154,155,156,161,162,167,168,172,176,180,182,184,188,190,192,196,200,202,207,210,215,217,218,223,225,230,232,233,238,240,245,247,248,253,255,256,258,263,265,266,272,273,274,278,280,281,286,288,289,295,296,297,301,303,304,309,311,312,318,319,320,324,326,327,332,334,335,340,342,343,346,347,352,354,355,356,360,362,364,369,372,373,374,377,378,382,384,386,390,392,393,397,399,400,403,404,409,410,415,417,418,423,424,426,431,434,435,437,442,443,444,446,451,452,456,458,461
-----computeFrom-----
35,36
35,37
159,160
159,161
164,165
164,166
269,270
269,271
292,293
292,294
315,316
315,317
366,367
366,368
370,371
370,372
420,421
420,422
439,440
439,441
-----guardedBy-----
377,386
-----guardedByNegation-----
46,332
48,437
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static bool debug_fiq_exec(struct fiq_debugger_state *state,			const char *cmd, unsigned *regs, void *svc_sp){	bool signal_helper = false;	if (!strcmp(cmd, "help") || !strcmp(cmd, "?")) {		debug_help(state);	} else if (!strcmp(cmd, "pc")) {		debug_printf(state, " pc %08x cpsr %08x mode %s\n",			regs[15], regs[16], mode_name(regs[16]));	} else if (!strcmp(cmd, "regs")) {		dump_regs(state, regs);	} else if (!strcmp(cmd, "allregs")) {		dump_allregs(state, regs);	} else if (!strcmp(cmd, "bt")) {		dump_stacktrace(state, (struct pt_regs *)regs, 100, svc_sp);	} else if (!strncmp(cmd, "reboot", 6)) {		cmd += 6;		while (*cmd == ' ')			cmd++;		if (*cmd) {			char tmp_cmd[32];			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));			kernel_restart(tmp_cmd);		} else {			kernel_restart(NULL);		}	} else if (!strcmp(cmd, "irqs")) {		dump_irqs(state);	} else if (!strcmp(cmd, "kmsg")) {		dump_kernel_log(state);	} else if (!strcmp(cmd, "version")) {		debug_printf(state, "%s\n", linux_banner);	} else if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}	if (!state->console_enable)		debug_prompt(state);	return signal_helper;}
static bool
debug_fiq_exec(struct fiq_debugger_state *state,			const char *cmd, unsigned *regs, void *svc_sp)
debug_fiq_exec
struct fiq_debugger_state *state
struct fiq_debugger_state
fiq_debugger_state
*state
*
state
const char *cmd
const char
*cmd
*
cmd
unsigned *regs
unsigned
*regs
*
regs
void *svc_sp
void
*svc_sp
*
svc_sp
{	bool signal_helper = false;	if (!strcmp(cmd, "help") || !strcmp(cmd, "?")) {		debug_help(state);	} else if (!strcmp(cmd, "pc")) {		debug_printf(state, " pc %08x cpsr %08x mode %s\n",			regs[15], regs[16], mode_name(regs[16]));	} else if (!strcmp(cmd, "regs")) {		dump_regs(state, regs);	} else if (!strcmp(cmd, "allregs")) {		dump_allregs(state, regs);	} else if (!strcmp(cmd, "bt")) {		dump_stacktrace(state, (struct pt_regs *)regs, 100, svc_sp);	} else if (!strncmp(cmd, "reboot", 6)) {		cmd += 6;		while (*cmd == ' ')			cmd++;		if (*cmd) {			char tmp_cmd[32];			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));			kernel_restart(tmp_cmd);		} else {			kernel_restart(NULL);		}	} else if (!strcmp(cmd, "irqs")) {		dump_irqs(state);	} else if (!strcmp(cmd, "kmsg")) {		dump_kernel_log(state);	} else if (!strcmp(cmd, "version")) {		debug_printf(state, "%s\n", linux_banner);	} else if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}	if (!state->console_enable)		debug_prompt(state);	return signal_helper;}
bool signal_helper = false;
bool signal_helper = false;
bool
signal_helper = false
signal_helper
= false
false
if (!strcmp(cmd, "help") || !strcmp(cmd, "?")) {		debug_help(state);	} else if (!strcmp(cmd, "pc")) {		debug_printf(state, " pc %08x cpsr %08x mode %s\n",			regs[15], regs[16], mode_name(regs[16]));	} else if (!strcmp(cmd, "regs")) {		dump_regs(state, regs);	} else if (!strcmp(cmd, "allregs")) {		dump_allregs(state, regs);	} else if (!strcmp(cmd, "bt")) {		dump_stacktrace(state, (struct pt_regs *)regs, 100, svc_sp);	} else if (!strncmp(cmd, "reboot", 6)) {		cmd += 6;		while (*cmd == ' ')			cmd++;		if (*cmd) {			char tmp_cmd[32];			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));			kernel_restart(tmp_cmd);		} else {			kernel_restart(NULL);		}	} else if (!strcmp(cmd, "irqs")) {		dump_irqs(state);	} else if (!strcmp(cmd, "kmsg")) {		dump_kernel_log(state);	} else if (!strcmp(cmd, "version")) {		debug_printf(state, "%s\n", linux_banner);	} else if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "help") || !strcmp(cmd, "?")
!strcmp(cmd, "help")
strcmp(cmd, "help")
strcmp
strcmp
cmd
cmd
"help"
!strcmp(cmd, "?")
strcmp(cmd, "?")
strcmp
strcmp
cmd
cmd
"?"
{		debug_help(state);	}
debug_help(state);
debug_help(state)
debug_help
debug_help
state
state
if (!strcmp(cmd, "pc")) {		debug_printf(state, " pc %08x cpsr %08x mode %s\n",			regs[15], regs[16], mode_name(regs[16]));	} else if (!strcmp(cmd, "regs")) {		dump_regs(state, regs);	} else if (!strcmp(cmd, "allregs")) {		dump_allregs(state, regs);	} else if (!strcmp(cmd, "bt")) {		dump_stacktrace(state, (struct pt_regs *)regs, 100, svc_sp);	} else if (!strncmp(cmd, "reboot", 6)) {		cmd += 6;		while (*cmd == ' ')			cmd++;		if (*cmd) {			char tmp_cmd[32];			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));			kernel_restart(tmp_cmd);		} else {			kernel_restart(NULL);		}	} else if (!strcmp(cmd, "irqs")) {		dump_irqs(state);	} else if (!strcmp(cmd, "kmsg")) {		dump_kernel_log(state);	} else if (!strcmp(cmd, "version")) {		debug_printf(state, "%s\n", linux_banner);	} else if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "pc")
strcmp(cmd, "pc")
strcmp
strcmp
cmd
cmd
"pc"
{		debug_printf(state, " pc %08x cpsr %08x mode %s\n",			regs[15], regs[16], mode_name(regs[16]));	}
debug_printf(state, " pc %08x cpsr %08x mode %s\n",			regs[15], regs[16], mode_name(regs[16]));
debug_printf(state, " pc %08x cpsr %08x mode %s\n",			regs[15], regs[16], mode_name(regs[16]))
debug_printf
debug_printf
state
state
" pc %08x cpsr %08x mode %s\n"
regs[15]
regs
regs
15
regs[16]
regs
regs
16
mode_name(regs[16])
mode_name
mode_name
regs[16]
regs
regs
16
if (!strcmp(cmd, "regs")) {		dump_regs(state, regs);	} else if (!strcmp(cmd, "allregs")) {		dump_allregs(state, regs);	} else if (!strcmp(cmd, "bt")) {		dump_stacktrace(state, (struct pt_regs *)regs, 100, svc_sp);	} else if (!strncmp(cmd, "reboot", 6)) {		cmd += 6;		while (*cmd == ' ')			cmd++;		if (*cmd) {			char tmp_cmd[32];			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));			kernel_restart(tmp_cmd);		} else {			kernel_restart(NULL);		}	} else if (!strcmp(cmd, "irqs")) {		dump_irqs(state);	} else if (!strcmp(cmd, "kmsg")) {		dump_kernel_log(state);	} else if (!strcmp(cmd, "version")) {		debug_printf(state, "%s\n", linux_banner);	} else if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "regs")
strcmp(cmd, "regs")
strcmp
strcmp
cmd
cmd
"regs"
{		dump_regs(state, regs);	}
dump_regs(state, regs);
dump_regs(state, regs)
dump_regs
dump_regs
state
state
regs
regs
if (!strcmp(cmd, "allregs")) {		dump_allregs(state, regs);	} else if (!strcmp(cmd, "bt")) {		dump_stacktrace(state, (struct pt_regs *)regs, 100, svc_sp);	} else if (!strncmp(cmd, "reboot", 6)) {		cmd += 6;		while (*cmd == ' ')			cmd++;		if (*cmd) {			char tmp_cmd[32];			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));			kernel_restart(tmp_cmd);		} else {			kernel_restart(NULL);		}	} else if (!strcmp(cmd, "irqs")) {		dump_irqs(state);	} else if (!strcmp(cmd, "kmsg")) {		dump_kernel_log(state);	} else if (!strcmp(cmd, "version")) {		debug_printf(state, "%s\n", linux_banner);	} else if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "allregs")
strcmp(cmd, "allregs")
strcmp
strcmp
cmd
cmd
"allregs"
{		dump_allregs(state, regs);	}
dump_allregs(state, regs);
dump_allregs(state, regs)
dump_allregs
dump_allregs
state
state
regs
regs
if (!strcmp(cmd, "bt")) {		dump_stacktrace(state, (struct pt_regs *)regs, 100, svc_sp);	} else if (!strncmp(cmd, "reboot", 6)) {		cmd += 6;		while (*cmd == ' ')			cmd++;		if (*cmd) {			char tmp_cmd[32];			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));			kernel_restart(tmp_cmd);		} else {			kernel_restart(NULL);		}	} else if (!strcmp(cmd, "irqs")) {		dump_irqs(state);	} else if (!strcmp(cmd, "kmsg")) {		dump_kernel_log(state);	} else if (!strcmp(cmd, "version")) {		debug_printf(state, "%s\n", linux_banner);	} else if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "bt")
strcmp(cmd, "bt")
strcmp
strcmp
cmd
cmd
"bt"
{		dump_stacktrace(state, (struct pt_regs *)regs, 100, svc_sp);	}
dump_stacktrace(state, (struct pt_regs *)regs, 100, svc_sp);
dump_stacktrace(state, (struct pt_regs *)regs, 100, svc_sp)
dump_stacktrace
dump_stacktrace
state
state
(struct pt_regs *)regs
struct pt_regs *
struct pt_regs
pt_regs
*
*
regs
regs
100
svc_sp
svc_sp
if (!strncmp(cmd, "reboot", 6)) {		cmd += 6;		while (*cmd == ' ')			cmd++;		if (*cmd) {			char tmp_cmd[32];			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));			kernel_restart(tmp_cmd);		} else {			kernel_restart(NULL);		}	} else if (!strcmp(cmd, "irqs")) {		dump_irqs(state);	} else if (!strcmp(cmd, "kmsg")) {		dump_kernel_log(state);	} else if (!strcmp(cmd, "version")) {		debug_printf(state, "%s\n", linux_banner);	} else if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strncmp(cmd, "reboot", 6)
strncmp(cmd, "reboot", 6)
strncmp
strncmp
cmd
cmd
"reboot"
6
{		cmd += 6;		while (*cmd == ' ')			cmd++;		if (*cmd) {			char tmp_cmd[32];			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));			kernel_restart(tmp_cmd);		} else {			kernel_restart(NULL);		}	}
cmd += 6;
cmd += 6
cmd
cmd
6
while (*cmd == ' ')			cmd++;
*cmd == ' '
*cmd
cmd
cmd
' '
cmd++;
cmd++
cmd
cmd
if (*cmd) {			char tmp_cmd[32];			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));			kernel_restart(tmp_cmd);		} else {			kernel_restart(NULL);		}
*cmd
cmd
cmd
{			char tmp_cmd[32];			strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));			kernel_restart(tmp_cmd);		}
char tmp_cmd[32];
char tmp_cmd[32];
char
tmp_cmd[32]
tmp_cmd
[32]
32
strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd));
strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd))
strlcpy
strlcpy
tmp_cmd
tmp_cmd
cmd
cmd
sizeof(tmp_cmd)
(tmp_cmd)
tmp_cmd
tmp_cmd
kernel_restart(tmp_cmd);
kernel_restart(tmp_cmd)
kernel_restart
kernel_restart
tmp_cmd
tmp_cmd
{			kernel_restart(NULL);		}
kernel_restart(NULL);
kernel_restart(NULL);
kernel_restart
kernel_restart
(NULL)
NULL
NULL
if (!strcmp(cmd, "irqs")) {		dump_irqs(state);	} else if (!strcmp(cmd, "kmsg")) {		dump_kernel_log(state);	} else if (!strcmp(cmd, "version")) {		debug_printf(state, "%s\n", linux_banner);	} else if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "irqs")
strcmp(cmd, "irqs")
strcmp
strcmp
cmd
cmd
"irqs"
{		dump_irqs(state);	}
dump_irqs(state);
dump_irqs(state)
dump_irqs
dump_irqs
state
state
if (!strcmp(cmd, "kmsg")) {		dump_kernel_log(state);	} else if (!strcmp(cmd, "version")) {		debug_printf(state, "%s\n", linux_banner);	} else if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "kmsg")
strcmp(cmd, "kmsg")
strcmp
strcmp
cmd
cmd
"kmsg"
{		dump_kernel_log(state);	}
dump_kernel_log(state);
dump_kernel_log(state)
dump_kernel_log
dump_kernel_log
state
state
if (!strcmp(cmd, "version")) {		debug_printf(state, "%s\n", linux_banner);	} else if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "version")
strcmp(cmd, "version")
strcmp
strcmp
cmd
cmd
"version"
{		debug_printf(state, "%s\n", linux_banner);	}
debug_printf(state, "%s\n", linux_banner);
debug_printf(state, "%s\n", linux_banner)
debug_printf
debug_printf
state
state
"%s\n"
linux_banner
linux_banner
if (!strcmp(cmd, "sleep")) {		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	} else if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "sleep")
strcmp(cmd, "sleep")
strcmp
strcmp
cmd
cmd
"sleep"
{		state->no_sleep = false;		debug_printf(state, "enabling sleep\n");	}
state->no_sleep = false;
state->no_sleep = false
state->no_sleep
state
state
no_sleep
false
debug_printf(state, "enabling sleep\n");
debug_printf(state, "enabling sleep\n")
debug_printf
debug_printf
state
state
"enabling sleep\n"
if (!strcmp(cmd, "nosleep")) {		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	} else if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "nosleep")
strcmp(cmd, "nosleep")
strcmp
strcmp
cmd
cmd
"nosleep"
{		state->no_sleep = true;		debug_printf(state, "disabling sleep\n");	}
state->no_sleep = true;
state->no_sleep = true
state->no_sleep
state
state
no_sleep
true
debug_printf(state, "disabling sleep\n");
debug_printf(state, "disabling sleep\n")
debug_printf
debug_printf
state
state
"disabling sleep\n"
if (!strcmp(cmd, "console")) {		state->console_enable = true;		debug_printf(state, "console mode\n");	} else if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "console")
strcmp(cmd, "console")
strcmp
strcmp
cmd
cmd
"console"
{		state->console_enable = true;		debug_printf(state, "console mode\n");	}
state->console_enable = true;
state->console_enable = true
state->console_enable
state
state
console_enable
true
debug_printf(state, "console mode\n");
debug_printf(state, "console mode\n")
debug_printf
debug_printf
state
state
"console mode\n"
if (!strcmp(cmd, "cpu")) {		debug_printf(state, "cpu %d\n", state->current_cpu);	} else if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strcmp(cmd, "cpu")
strcmp(cmd, "cpu")
strcmp
strcmp
cmd
cmd
"cpu"
{		debug_printf(state, "cpu %d\n", state->current_cpu);	}
debug_printf(state, "cpu %d\n", state->current_cpu);
debug_printf(state, "cpu %d\n", state->current_cpu)
debug_printf
debug_printf
state
state
"cpu %d\n"
state->current_cpu
state
state
current_cpu
if (!strncmp(cmd, "cpu ", 4)) {		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	} else {		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
!strncmp(cmd, "cpu ", 4)
strncmp(cmd, "cpu ", 4)
strncmp
strncmp
cmd
cmd
"cpu "
4
{		unsigned long cpu = 0;		if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");		debug_printf(state, "cpu %d\n", state->current_cpu);	}
unsigned long cpu = 0;
unsigned long cpu = 0;
unsigned long
cpu = 0
cpu
= 0
0
if (strict_strtoul(cmd + 4, 10, &cpu) == 0)			switch_cpu(state, cpu);		else			debug_printf(state, "invalid cpu\n");
strict_strtoul(cmd + 4, 10, &cpu) == 0
strict_strtoul(cmd + 4, 10, &cpu)
strict_strtoul
strict_strtoul
cmd + 4
cmd
cmd
4
10
&cpu
cpu
cpu
0
switch_cpu(state, cpu);
switch_cpu(state, cpu)
switch_cpu
switch_cpu
state
state
cpu
cpu
debug_printf(state, "invalid cpu\n");
debug_printf(state, "invalid cpu\n")
debug_printf
debug_printf
state
state
"invalid cpu\n"
debug_printf(state, "cpu %d\n", state->current_cpu);
debug_printf(state, "cpu %d\n", state->current_cpu)
debug_printf
debug_printf
state
state
"cpu %d\n"
state->current_cpu
state
state
current_cpu
{		if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}		return true;	}
if (state->debug_busy) {			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		} else {			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}
state->debug_busy
state
state
debug_busy
{			debug_printf(state,				"command processor busy. trying to abort.\n");			state->debug_abort = -1;		}
debug_printf(state,				"command processor busy. trying to abort.\n");
debug_printf(state,				"command processor busy. trying to abort.\n")
debug_printf
debug_printf
state
state
"command processor busy. trying to abort.\n"
state->debug_abort = -1;
state->debug_abort = -1
state->debug_abort
state
state
debug_abort
-1
1
{			strcpy(state->debug_cmd, cmd);			state->debug_busy = 1;		}
strcpy(state->debug_cmd, cmd);
strcpy(state->debug_cmd, cmd)
strcpy
strcpy
state->debug_cmd
state
state
debug_cmd
cmd
cmd
state->debug_busy = 1;
state->debug_busy = 1
state->debug_busy
state
state
debug_busy
1
return true;
true
if (!state->console_enable)		debug_prompt(state);
!state->console_enable
state->console_enable
state
state
console_enable
debug_prompt(state);
debug_prompt(state)
debug_prompt
debug_prompt
state
state
return signal_helper;
signal_helper
signal_helper
-----joern-----
(33,147,0)
(130,32,0)
(105,160,0)
(7,94,0)
(234,64,0)
(240,220,0)
(62,32,0)
(160,105,0)
(155,228,0)
(193,24,0)
(15,203,0)
(198,32,0)
(151,45,0)
(143,151,0)
(216,2,0)
(130,123,0)
(74,227,0)
(135,224,0)
(118,32,0)
(163,102,0)
(5,32,0)
(169,225,0)
(222,69,0)
(208,149,0)
(147,76,0)
(3,68,0)
(14,69,0)
(159,191,0)
(67,5,0)
(202,74,0)
(149,87,0)
(236,178,0)
(75,72,0)
(221,118,0)
(106,241,0)
(26,118,0)
(73,130,0)
(12,240,0)
(202,236,0)
(217,24,0)
(1,197,0)
(190,88,0)
(53,58,0)
(178,200,0)
(130,56,0)
(173,241,0)
(207,32,0)
(166,32,0)
(174,59,0)
(21,160,0)
(209,159,0)
(77,69,0)
(192,72,0)
(153,72,0)
(185,32,0)
(68,6,0)
(241,85,0)
(110,188,0)
(196,170,0)
(138,166,0)
(111,32,0)
(164,105,0)
(94,227,0)
(189,95,0)
(172,84,0)
(168,32,0)
(30,204,0)
(147,150,0)
(160,227,0)
(59,23,0)
(114,227,0)
(81,65,0)
(107,187,0)
(140,189,0)
(124,16,0)
(241,147,0)
(199,104,0)
(54,136,0)
(237,203,0)
(121,190,0)
(126,62,0)
(232,204,0)
(84,211,0)
(43,2,0)
(68,227,0)
(29,76,0)
(4,83,0)
(151,32,0)
(23,59,0)
(71,92,0)
(53,32,0)
(119,191,0)
(54,32,0)
(107,227,0)
(79,144,0)
(78,161,0)
(66,137,0)
(82,187,0)
(229,123,0)
(112,129,0)
(102,227,0)
(170,196,0)
(161,227,0)
(137,227,0)
(170,85,0)
(233,4,0)
(62,142,0)
(17,123,0)
(226,229,0)
(180,87,0)
(129,34,0)
(153,227,0)
(129,32,0)
(201,168,0)
(61,199,0)
(9,130,0)
(22,148,0)
(118,87,0)
(6,68,0)
(195,107,0)
(10,161,0)
(171,147,0)
(236,202,0)
(147,19,0)
(116,129,0)
(168,190,0)
(93,153,0)
(50,144,0)
(19,147,0)
(134,2,0)
(146,107,0)
(11,211,0)
(218,146,0)
(136,165,0)
(122,165,0)
(64,32,0)
(72,32,0)
(194,25,0)
(44,199,0)
(69,222,0)
(206,94,0)
(128,53,0)
(240,107,0)
(157,137,0)
(27,207,0)
(102,162,0)
(166,85,0)
(59,227,0)
(137,175,0)
(90,141,0)
(131,60,0)
(145,87,0)
(159,32,0)
(92,32,0)
(5,149,0)
(105,141,0)
(239,166,0)
(13,53,0)
(161,156,0)
(25,32,0)
(158,227,0)
(200,178,0)
(125,198,0)
(41,54,0)
(166,154,0)
(210,111,0)
(220,240,0)
(228,155,0)
(127,5,0)
(235,155,0)
(99,158,0)
(155,227,0)
(212,155,0)
(167,62,0)
(117,200,0)
(123,223,0)
(42,64,0)
(204,223,0)
(76,85,0)
(147,241,0)
(225,83,0)
(162,102,0)
(118,198,0)
(41,168,0)
(120,109,0)
(53,36,0)
(179,185,0)
(35,203,0)
(131,32,0)
(181,211,0)
(200,227,0)
(89,76,0)
(25,46,0)
(101,51,0)
(153,88,0)
(111,215,0)
(105,148,0)
(182,229,0)
(178,236,0)
(230,217,0)
(176,168,0)
(28,158,0)
(2,227,0)
(94,206,0)
(158,28,0)
(72,153,0)
(80,189,0)
(188,107,0)
(204,32,0)
(144,19,0)
(191,32,0)
(48,102,0)
(159,55,0)
(19,144,0)
(211,16,0)
(203,35,0)
(103,111,0)
(224,96,0)
(56,130,0)
(148,105,0)
(70,74,0)
(219,92,0)
(69,227,0)
(4,32,0)
(84,16,0)
(203,227,0)
(113,198,0)
(74,202,0)
(2,134,0)
(65,225,0)
(198,118,0)
(144,85,0)
(8,114,0)
(52,65,0)
(49,84,0)
(18,16,0)
(92,96,0)
(152,160,0)
(86,220,0)
(141,105,0)
(64,224,0)
(108,185,0)
(98,200,0)
(165,136,0)
(53,170,0)
(104,199,0)
(40,53,0)
(199,227,0)
(57,170,0)
(205,54,0)
(95,189,0)
(229,32,0)
(184,155,0)
(191,159,0)
(111,85,0)
(188,109,0)
(188,24,0)
(114,107,0)
(214,101,0)
(141,149,0)
(31,4,0)
(133,74,0)
(172,41,0)
(109,188,0)
(136,142,0)
(20,107,0)
(39,68,0)
(0,68,0)
(240,227,0)
(139,191,0)
(76,147,0)
(188,227,0)
(213,159,0)
(63,54,0)
(156,161,0)
(197,32,0)
(38,158,0)
(47,131,0)
(183,41,0)
(37,187,0)
(189,227,0)
(175,137,0)
(132,207,0)
(186,94,0)
(41,100,0)
(238,100,0)
(147,32,0)
(170,53,0)
(91,16,0)
(177,59,0)
(97,129,0)
(146,227,0)
(115,188,0)
(231,149,0)
(65,32,0)
(185,32,1)
(163,95,1)
(203,15,1)
(203,227,1)
(93,72,1)
(222,69,1)
(211,181,1)
(113,26,1)
(117,98,1)
(130,123,1)
(128,170,1)
(153,93,1)
(210,103,1)
(77,14,1)
(162,102,1)
(204,32,1)
(9,159,1)
(74,133,1)
(106,173,1)
(127,148,1)
(44,61,1)
(224,135,1)
(189,227,1)
(28,158,1)
(232,123,1)
(220,86,1)
(54,205,1)
(49,197,1)
(2,43,1)
(102,48,1)
(159,191,1)
(199,227,1)
(200,227,1)
(30,232,1)
(31,233,1)
(9,25,1)
(130,32,1)
(132,148,1)
(71,224,1)
(116,104,1)
(118,198,1)
(123,17,1)
(9,217,1)
(207,27,1)
(115,110,1)
(120,115,1)
(155,184,1)
(169,65,1)
(47,156,1)
(57,13,1)
(40,128,1)
(53,170,1)
(9,111,1)
(166,85,1)
(109,120,1)
(178,200,1)
(41,168,1)
(220,240,1)
(9,53,1)
(105,141,1)
(185,108,1)
(29,241,1)
(225,169,1)
(94,227,1)
(138,239,1)
(42,175,1)
(9,129,1)
(38,99,1)
(235,212,1)
(35,203,1)
(160,21,1)
(12,114,1)
(9,151,1)
(5,67,1)
(65,32,1)
(149,208,1)
(111,85,1)
(69,77,1)
(68,227,1)
(130,73,1)
(147,76,1)
(99,134,1)
(157,104,1)
(54,32,1)
(160,227,1)
(89,29,1)
(207,32,1)
(3,222,1)
(76,85,1)
(1,56,1)
(153,227,1)
(23,59,1)
(148,105,1)
(161,10,1)
(56,130,1)
(140,80,1)
(234,42,1)
(181,11,1)
(65,52,1)
(182,226,1)
(92,32,1)
(156,161,1)
(72,32,1)
(84,49,1)
(114,107,1)
(170,85,1)
(198,32,1)
(168,32,1)
(50,76,1)
(144,85,1)
(147,241,1)
(152,149,1)
(39,3,1)
(170,57,1)
(240,12,1)
(146,107,1)
(114,227,1)
(75,185,1)
(21,152,1)
(5,32,1)
(177,174,1)
(155,227,1)
(107,227,1)
(129,97,1)
(101,214,1)
(151,143,1)
(151,32,1)
(81,134,1)
(4,31,1)
(53,36,1)
(22,105,1)
(118,32,1)
(2,227,1)
(198,125,1)
(27,132,1)
(153,72,1)
(49,56,1)
(192,75,1)
(126,167,1)
(171,95,1)
(213,222,1)
(214,146,1)
(5,149,1)
(72,192,1)
(146,227,1)
(19,144,1)
(168,176,1)
(59,177,1)
(14,28,1)
(9,166,1)
(52,81,1)
(167,185,1)
(10,78,1)
(9,147,1)
(188,109,1)
(13,206,1)
(53,32,1)
(74,227,1)
(17,229,1)
(104,199,1)
(62,126,1)
(183,190,1)
(62,32,1)
(135,64,1)
(133,70,1)
(158,227,1)
(9,92,1)
(6,68,1)
(66,157,1)
(95,189,1)
(9,4,1)
(197,32,1)
(4,32,1)
(209,213,1)
(41,54,1)
(216,175,1)
(219,71,1)
(184,235,1)
(164,160,1)
(161,227,1)
(229,182,1)
(208,231,1)
(33,171,1)
(110,146,1)
(230,188,1)
(102,227,1)
(239,35,1)
(205,63,1)
(148,22,1)
(25,32,1)
(92,219,1)
(107,20,1)
(206,94,1)
(103,162,1)
(61,156,1)
(179,6,1)
(241,106,1)
(25,194,1)
(221,207,1)
(131,47,1)
(199,44,1)
(231,6,1)
(131,32,1)
(200,117,1)
(119,209,1)
(63,62,1)
(41,183,1)
(159,32,1)
(147,19,1)
(64,32,1)
(86,240,1)
(146,218,1)
(236,178,1)
(94,186,1)
(136,165,1)
(202,74,1)
(194,23,1)
(139,119,1)
(188,107,1)
(59,227,1)
(229,32,1)
(9,204,1)
(143,236,1)
(191,32,1)
(166,138,1)
(121,168,1)
(84,211,1)
(97,112,1)
(12,107,1)
(240,227,1)
(173,33,1)
(172,84,1)
(69,227,1)
(129,32,1)
(212,206,1)
(108,179,1)
(67,127,1)
(53,40,1)
(158,38,1)
(9,118,1)
(236,202,1)
(218,220,1)
(170,196,1)
(112,116,1)
(188,227,1)
(43,216,1)
(197,1,1)
(111,32,1)
(166,32,1)
(73,9,1)
(141,90,1)
(15,237,1)
(195,228,1)
(134,2,1)
(191,139,1)
(7,35,1)
(217,230,1)
(226,28,1)
(186,7,1)
(201,153,1)
(76,89,1)
(9,131,1)
(125,113,1)
(9,101,1)
(175,137,1)
(20,195,1)
(228,155,1)
(90,164,1)
(141,149,1)
(68,0,1)
(111,210,1)
(172,41,1)
(64,234,1)
(79,50,1)
(241,85,1)
(122,54,1)
(137,66,1)
(0,39,1)
(240,107,1)
(221,5,1)
(204,30,1)
(237,162,1)
(233,225,1)
(70,211,1)
(165,122,1)
(137,227,1)
(80,236,1)
(26,221,1)
(147,32,1)
(48,163,1)
(183,136,1)
(8,220,1)
(78,23,1)
(190,121,1)
(176,201,1)
(189,140,1)
(174,228,1)
(114,8,1)
(105,160,1)
(144,79,1)
(98,202,1)
(130,123,2)
(102,227,2)
(9,162,2)
(237,162,2)
(220,228,2)
(54,32,2)
(42,175,2)
(22,6,2)
(204,32,2)
(27,148,2)
(73,222,2)
(106,95,2)
(241,85,2)
(179,6,2)
(86,220,2)
(158,134,2)
(49,206,2)
(128,206,2)
(72,32,2)
(130,104,2)
(129,32,2)
(56,35,2)
(56,228,2)
(102,95,2)
(228,206,2)
(162,95,2)
(73,236,2)
(113,6,2)
(49,222,2)
(89,95,2)
(23,228,2)
(214,146,2)
(75,185,2)
(185,6,2)
(225,134,2)
(240,220,2)
(118,6,2)
(56,130,2)
(35,203,2)
(153,72,2)
(84,95,2)
(207,32,2)
(120,146,2)
(119,222,2)
(163,95,2)
(110,146,2)
(49,95,2)
(9,6,2)
(236,202,2)
(173,95,2)
(198,6,2)
(151,32,2)
(53,36,2)
(14,28,2)
(229,28,2)
(25,23,2)
(62,185,2)
(9,236,2)
(9,228,2)
(115,146,2)
(148,6,2)
(84,236,2)
(103,162,2)
(114,107,2)
(130,95,2)
(172,84,2)
(73,175,2)
(139,222,2)
(153,227,2)
(5,32,2)
(207,148,2)
(81,134,2)
(147,19,2)
(20,228,2)
(105,160,2)
(217,146,2)
(130,222,2)
(114,227,2)
(147,241,2)
(136,165,2)
(56,162,2)
(84,162,2)
(122,185,2)
(199,156,2)
(8,220,2)
(157,104,2)
(86,228,2)
(56,23,2)
(135,175,2)
(84,211,2)
(130,35,2)
(130,6,2)
(73,104,2)
(56,206,2)
(12,220,2)
(136,185,2)
(138,35,2)
(40,206,2)
(63,185,2)
(9,28,2)
(170,196,2)
(73,206,2)
(93,185,2)
(170,85,2)
(49,236,2)
(178,202,2)
(202,74,2)
(53,32,2)
(240,228,2)
(35,162,2)
(104,156,2)
(9,23,2)
(209,222,2)
(191,32,2)
(229,32,2)
(108,6,2)
(151,236,2)
(143,236,2)
(4,32,2)
(76,85,2)
(166,32,2)
(185,32,2)
(146,107,2)
(74,227,2)
(50,95,2)
(73,134,2)
(130,32,2)
(1,56,2)
(118,198,2)
(41,168,2)
(73,28,2)
(5,148,2)
(49,28,2)
(148,105,2)
(31,134,2)
(188,227,2)
(131,32,2)
(69,227,2)
(64,175,2)
(7,35,2)
(13,206,2)
(220,240,2)
(155,206,2)
(134,2,2)
(172,41,2)
(48,95,2)
(147,95,2)
(226,28,2)
(203,162,2)
(134,175,2)
(10,23,2)
(147,76,2)
(194,23,2)
(9,175,2)
(111,162,2)
(84,175,2)
(56,156,2)
(73,162,2)
(230,146,2)
(68,227,2)
(165,185,2)
(125,6,2)
(62,32,2)
(105,141,2)
(56,104,2)
(95,236,2)
(49,104,2)
(160,6,2)
(73,228,2)
(112,104,2)
(168,185,2)
(130,236,2)
(84,156,2)
(220,220,2)
(79,95,2)
(107,227,2)
(206,35,2)
(162,102,2)
(222,28,2)
(198,32,2)
(6,68,2)
(104,199,2)
(41,54,2)
(233,134,2)
(121,185,2)
(114,220,2)
(224,175,2)
(28,134,2)
(33,95,2)
(59,228,2)
(153,185,2)
(111,85,2)
(2,227,2)
(94,35,2)
(152,6,2)
(84,222,2)
(130,162,2)
(189,227,2)
(183,6,2)
(69,28,2)
(221,6,2)
(146,228,2)
(218,228,2)
(195,228,2)
(90,6,2)
(9,35,2)
(84,206,2)
(9,156,2)
(130,28,2)
(169,134,2)
(84,6,2)
(197,32,2)
(203,227,2)
(129,104,2)
(0,222,2)
(171,95,2)
(84,28,2)
(107,228,2)
(170,206,2)
(204,28,2)
(130,23,2)
(53,206,2)
(239,35,2)
(159,191,2)
(49,156,2)
(240,227,2)
(2,175,2)
(200,227,2)
(3,222,2)
(49,134,2)
(29,95,2)
(56,95,2)
(97,104,2)
(49,23,2)
(155,227,2)
(111,32,2)
(9,134,2)
(212,206,2)
(67,148,2)
(9,222,2)
(216,175,2)
(92,32,2)
(159,222,2)
(240,107,2)
(73,35,2)
(95,189,2)
(213,222,2)
(41,6,2)
(188,107,2)
(126,185,2)
(141,149,2)
(73,6,2)
(141,6,2)
(130,206,2)
(190,185,2)
(39,222,2)
(130,175,2)
(92,175,2)
(4,134,2)
(199,227,2)
(161,23,2)
(188,146,2)
(73,156,2)
(184,206,2)
(101,146,2)
(73,95,2)
(231,6,2)
(191,222,2)
(64,32,2)
(123,28,2)
(59,227,2)
(144,85,2)
(175,104,2)
(137,227,2)
(99,134,2)
(84,23,2)
(168,32,2)
(57,206,2)
(19,144,2)
(15,162,2)
(159,32,2)
(65,32,2)
(98,202,2)
(94,227,2)
(84,104,2)
(19,95,2)
(232,28,2)
(177,228,2)
(9,95,2)
(6,222,2)
(186,35,2)
(156,23,2)
(208,6,2)
(178,200,2)
(26,6,2)
(210,162,2)
(54,185,2)
(166,35,2)
(44,156,2)
(9,104,2)
(241,95,2)
(130,228,2)
(49,35,2)
(132,148,2)
(236,178,2)
(65,134,2)
(76,95,2)
(182,28,2)
(105,6,2)
(166,85,2)
(156,161,2)
(49,175,2)
(38,134,2)
(66,104,2)
(147,32,2)
(56,175,2)
(176,185,2)
(130,156,2)
(161,227,2)
(73,23,2)
(21,6,2)
(72,185,2)
(219,175,2)
(109,146,2)
(49,162,2)
(71,175,2)
(235,206,2)
(77,28,2)
(130,134,2)
(197,56,2)
(84,228,2)
(205,185,2)
(140,236,2)
(144,95,2)
(56,28,2)
(158,227,2)
(174,228,2)
(188,109,2)
(84,35,2)
(28,158,2)
(146,227,2)
(56,222,2)
(201,185,2)
(228,155,2)
(56,134,2)
(17,28,2)
(118,32,2)
(127,148,2)
(192,185,2)
(222,69,2)
(206,94,2)
(23,59,2)
(117,202,2)
(131,156,2)
(53,170,2)
(47,156,2)
(56,236,2)
(175,137,2)
(5,149,2)
(78,23,2)
(84,134,2)
(30,28,2)
(43,175,2)
(68,222,2)
(137,104,2)
(167,185,2)
(200,202,2)
(234,175,2)
(25,32,2)
(56,6,2)
(189,236,2)
(149,6,2)
(80,236,2)
(52,134,2)
(9,206,2)
(61,156,2)
(12,228,2)
(164,6,2)
(116,104,2)
(160,227,2)
(49,6,2)
(49,228,2)
-----------------------------------
(0,4)
(1,state)
(2,strcmp(cmd, "nosleep")
(3,cmd)
(4,debug_printf(state, "disabling sleep\\n")
(5,switch_cpu(state, cpu)
(6,!strncmp(cmd, "cpu ", 4)
(7,cmd)
(8,cmd)
(9,state)
(10,"kmsg")
(11,signal_helper)
(12,cmd)
(13,state)
(14,cmd)
(15,"allregs")
(16,)
(17,true)
(18,if (!state->console_enable)
(19,mode_name(regs[16])
(20,6)
(21,4)
(22,0)
(23,!strcmp(cmd, "irqs")
(24,)
(25,dump_irqs(state)
(26,"cpu %d\\n")
(27,"invalid cpu\\n")
(28,!strcmp(cmd, "console")
(29,regs)
(30,"console mode\\n")
(31,"disabling sleep\\n")
(32,struct fiq_debugger_state *state)
(33," pc %08x cpsr %08x mode %s\\n")
(34,)
(35,!strcmp(cmd, "allregs")
(36,void *svc_sp)
(37,while (*cmd == \' \')
(38,"console")
(39,"cpu ")
(40,svc_sp)
(41,return true;)
(42,state)
(43,"nosleep")
(44,"version")
(45,)
(46,)
(47,state)
(48,"regs")
(49,signal_helper)
(50,regs)
(51,)
(52,no_sleep)
(53,dump_stacktrace(state, (struct pt_regs *)
(54,state->debug_abort)
(55,)
(56,!state->console_enable)
(57,regs)
(58,)
(59,strcmp(cmd, "irqs")
(60,)
(61,cmd)
(62,debug_printf(state,\n\\n\\t\\t\\t\\t"command processor busy. trying to abort.\\n")
(63,state)
(64,state->no_sleep)
(65,state->no_sleep)
(66,"sleep")
(67,cpu)
(68,strncmp(cmd, "cpu ", 4)
(69,strcmp(cmd, "cpu")
(70,cmd)
(71,state)
(72,state->debug_cmd)
(73,console_enable)
(74,strcmp(cmd, "help")
(75,state)
(76,regs[16])
(77,"cpu")
(78,cmd)
(79,16)
(80,cmd)
(81,state)
(82,if (*cmd)
(83,)
(84,return signal_helper;)
(85,unsigned *regs)
(86,\' \')
(87,)
(88,)
(89,16)
(90,cpu)
(91,signal_helper)
(92,debug_printf(state, "enabling sleep\\n")
(93,cmd)
(94,strcmp(cmd, "bt")
(95,!strcmp(cmd, "pc")
(96,)
(97,linux_banner)
(98,cmd)
(99,cmd)
(100,)
(101,kernel_restart(NULL)
(102,strcmp(cmd, "regs")
(103,state)
(104,!strcmp(cmd, "version")
(105,strict_strtoul(cmd + 4, 10, &cpu)
(106,15)
(107,cmd += 6)
(108,debug_busy)
(109,sizeof(tmp_cmd)
(110,tmp_cmd)
(111,dump_regs(state, regs)
(112,"%s\\n")
(113,state)
(114,cmd++)
(115,cmd)
(116,state)
(117,"?")
(118,debug_printf(state, "cpu %d\\n", state->current_cpu)
(119,state)
(120,tmp_cmd)
(121,1)
(122,1)
(123,state->console_enable = true)
(124,if (!strcmp(cmd, "help")
(125,current_cpu)
(126,"command processor busy. trying to abort.\\n")
(127,state)
(128,100)
(129,debug_printf(state, "%s\\n", linux_banner)
(130,state->console_enable)
(131,dump_kernel_log(state)
(132,state)
(133,"help")
(134,!strcmp(cmd, "nosleep")
(135,false)
(136,state->debug_abort = -1)
(137,strcmp(cmd, "sleep")
(138,regs)
(139,current_cpu)
(140,"pc")
(141,&cpu)
(142,)
(143,state)
(144,regs[16])
(145,if (strict_strtoul(cmd + 4, 10, &cpu)
(146,*cmd)
(147,debug_printf(state, " pc %08x cpsr %08x mode %s\\n",\n\\n\\t\\t\\tregs[15], regs[16], mode_name(regs[16])
(148,strict_strtoul(cmd + 4, 10, &cpu)
(149,cpu = 0)
(150,)
(151,debug_help(state)
(152,cmd)
(153,strcpy(state->debug_cmd, cmd)
(154,)
(155,strncmp(cmd, "reboot", 6)
(156,!strcmp(cmd, "kmsg")
(157,cmd)
(158,strcmp(cmd, "console")
(159,debug_printf(state, "cpu %d\\n", state->current_cpu)
(160,cmd + 4)
(161,strcmp(cmd, "kmsg")
(162,!strcmp(cmd, "regs")
(163,cmd)
(164,10)
(165,-1)
(166,dump_allregs(state, regs)
(167,state)
(168,state->debug_busy)
(169,true)
(170,(struct pt_regs *)
(171,state)
(172,RET)
(173,regs)
(174,cmd)
(175,!strcmp(cmd, "sleep")
(176,debug_busy)
(177,"irqs")
(178,!strcmp(cmd, "?")
(179,state)
(180,cpu)
(181,false)
(182,console_enable)
(183,true)
(184,6)
(185,state->debug_busy)
(186,"bt")
(187,)
(188,strlcpy(tmp_cmd, cmd, sizeof(tmp_cmd)
(189,strcmp(cmd, "pc")
(190,state->debug_busy = 1)
(191,state->current_cpu)
(192,debug_cmd)
(193,tmp_cmd)
(194,state)
(195,cmd)
(196,struct pt_regs *)
(197,debug_prompt(state)
(198,state->current_cpu)
(199,strcmp(cmd, "version")
(200,strcmp(cmd, "?")
(201,state)
(202,!strcmp(cmd, "help")
(203,strcmp(cmd, "allregs")
(204,debug_printf(state, "console mode\\n")
(205,debug_abort)
(206,!strcmp(cmd, "bt")
(207,debug_printf(state, "invalid cpu\\n")
(208,0)
(209,"cpu %d\\n")
(210,regs)
(211,signal_helper = false)
(212,cmd)
(213,state)
(214,NULL)
(215,)
(216,cmd)
(217,kernel_restart(tmp_cmd)
(218,cmd)
(219,"enabling sleep\\n")
(220,*cmd == \' \')
(221,state)
(222,!strcmp(cmd, "cpu")
(223,)
(224,state->no_sleep = false)
(225,state->no_sleep = true)
(226,state)
(227,const char *cmd)
(228,!strncmp(cmd, "reboot", 6)
(229,state->console_enable)
(230,tmp_cmd)
(231,cpu)
(232,state)
(233,state)
(234,no_sleep)
(235,"reboot")
(236,!strcmp(cmd, "help")
(237,cmd)
(238,if (state->debug_busy)
(239,state)
(240,*cmd)
(241,regs[15])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^