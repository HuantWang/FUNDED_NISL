-----label-----
0
-----code-----
static void goodB2GSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_45_goodB2GData;
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
50,51
52,53
53,54
53,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
71,72
73,74
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
-----nextToken-----
2,4,9,11,14,18,20,21,26,29,31,34,35,40,43,45,48,51,54,55,59,61,66,68,72,74,76,80,82,86,88,93,94
-----computeFrom-----
23,24
23,25
24,25
24,26
32,33
32,34
38,39
38,40
49,50
49,51
57,58
57,59
-----guardedBy-----
31,76
34,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2GSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_45_goodB2GData;    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
static void
goodB2GSink()
goodB2GSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_45_goodB2GData;    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_45_goodB2GData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_45_goodB2GData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_45_goodB2GData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_45_goodB2GData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_45_goodB2GData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_45_goodB2GData
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(43,37,0)
(0,41,0)
(5,11,0)
(41,0,0)
(3,35,0)
(20,22,0)
(23,32,0)
(35,3,0)
(12,28,0)
(3,17,0)
(35,32,0)
(4,6,0)
(30,27,0)
(40,43,0)
(24,42,0)
(25,42,0)
(10,25,0)
(12,11,0)
(13,9,0)
(31,43,0)
(17,3,0)
(38,28,0)
(32,37,0)
(27,35,0)
(17,32,0)
(8,35,0)
(15,32,0)
(34,38,0)
(35,27,0)
(42,32,0)
(1,17,0)
(39,22,0)
(42,24,0)
(7,41,0)
(22,28,0)
(24,13,0)
(21,12,0)
(9,13,0)
(42,25,0)
(6,14,0)
(33,5,0)
(29,5,0)
(38,11,0)
(19,42,0)
(44,37,0)
(2,11,0)
(28,13,0)
(0,36,0)
(26,17,0)
(16,28,0)
(13,24,0)
(5,28,0)
(13,28,0)
(28,11,0)
(20,39,1)
(33,29,1)
(13,9,1)
(22,28,1)
(35,32,1)
(3,17,1)
(26,1,1)
(1,35,1)
(28,13,1)
(32,23,1)
(17,26,1)
(41,7,1)
(17,32,1)
(4,3,1)
(18,38,1)
(30,8,1)
(38,34,1)
(38,28,1)
(18,6,1)
(10,19,1)
(8,32,1)
(0,41,1)
(6,4,1)
(29,22,1)
(42,25,1)
(3,35,1)
(24,42,1)
(34,12,1)
(42,32,1)
(19,16,1)
(39,28,1)
(27,30,1)
(5,33,1)
(25,10,1)
(22,20,1)
(12,21,1)
(16,3,1)
(7,22,1)
(5,28,1)
(12,28,1)
(21,5,1)
(29,0,1)
(13,24,1)
(23,15,1)
(35,27,1)
(13,3,2)
(28,13,2)
(17,32,2)
(1,35,2)
(35,27,2)
(13,9,2)
(38,3,2)
(12,28,2)
(21,3,2)
(39,3,2)
(10,3,2)
(5,28,2)
(38,28,2)
(19,3,2)
(41,22,2)
(35,32,2)
(25,3,2)
(6,3,2)
(3,35,2)
(16,3,2)
(13,24,2)
(17,35,2)
(0,22,2)
(22,28,2)
(42,25,2)
(0,41,2)
(4,3,2)
(24,3,2)
(5,3,2)
(24,42,2)
(20,3,2)
(33,3,2)
(3,17,2)
(29,3,2)
(26,35,2)
(34,3,2)
(42,3,2)
(42,32,2)
(28,3,2)
(12,3,2)
(22,3,2)
(7,22,2)
-----------------------------------
(0,exit(-1)
(1,data)
(2,if (myString == NULL)
(3,data > wcslen(HELLO_STRING)
(4,"Input is less than the length of the source string or too large")
(5,wcscpy(myString, HELLO_STRING)
(6,printLine("Input is less than the length of the source string or too large")
(7,1)
(8,data)
(9,wchar_t *)
(10,wchar_t)
(11,)
(12,printWLine(myString)
(13,(wchar_t *)
(14,)
(15,data)
(16,myString)
(17,data < 100)
(18,RET)
(19,data)
(20,NULL)
(21,myString)
(22,myString == NULL)
(23,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_45_goodB2GData)
(24,malloc(data*sizeof(wchar_t)
(25,sizeof(wchar_t)
(26,100)
(27,wcslen(HELLO_STRING)
(28,myString = (wchar_t *)
(29,myString)
(30,HELLO_STRING)
(31,if (data > wcslen(HELLO_STRING)
(32,data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_45_goodB2GData)
(33,HELLO_STRING)
(34,myString)
(35,data > wcslen(HELLO_STRING)
(36,)
(37,)
(38,free(myString)
(39,myString)
(40,myString)
(41,-1)
(42,data*sizeof(wchar_t)
(43,)
(44,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^