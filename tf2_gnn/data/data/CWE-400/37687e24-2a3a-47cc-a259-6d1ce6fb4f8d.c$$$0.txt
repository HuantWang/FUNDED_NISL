-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(5)
    {
    case 6:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
        break;
    }
    switch(7)
    {
    case 7:
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
47,48
47,49
47,50
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
56,61
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
67,68
69,70
69,71
70,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
117,118
118,119
118,120
119,120
-----nextToken-----
2,4,9,11,15,16,18,21,25,26,27,28,32,33,34,36,39,43,45,46,50,53,55,60,63,65,68,71,74,75,79,81,86,88,92,94,96,100,102,106,108,113,114,115,116,120,121,122
-----computeFrom-----
13,14
13,15
30,31
30,32
48,49
48,50
58,59
58,60
69,70
69,71
77,78
77,79
-----guardedBy-----
55,96
50,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }
5
{    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }
case 6:
6
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
data = 20;
data = 20
data
data
20
break;
switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(58,31,0)
(19,8,0)
(6,8,0)
(39,8,0)
(30,15,0)
(21,3,0)
(27,59,0)
(41,8,0)
(17,55,0)
(15,7,0)
(5,61,0)
(52,13,0)
(13,31,0)
(36,1,0)
(45,41,0)
(44,29,0)
(49,59,0)
(37,3,0)
(29,31,0)
(43,39,0)
(11,41,0)
(13,30,0)
(54,59,0)
(50,35,0)
(24,54,0)
(14,4,0)
(23,27,0)
(56,3,0)
(40,39,0)
(42,47,0)
(48,59,0)
(51,54,0)
(61,3,0)
(34,56,0)
(0,40,0)
(13,54,0)
(20,3,0)
(1,29,0)
(19,39,0)
(18,59,0)
(26,4,0)
(47,8,0)
(9,4,0)
(46,40,0)
(13,55,0)
(39,15,0)
(15,30,0)
(33,31,0)
(60,59,0)
(15,39,0)
(41,39,0)
(12,25,0)
(32,61,0)
(50,57,0)
(25,22,0)
(29,54,0)
(7,15,0)
(53,57,0)
(47,39,0)
(57,50,0)
(16,19,0)
(2,3,0)
(55,13,0)
(31,4,0)
(30,13,0)
(29,1,0)
(19,39,1)
(23,28,1)
(52,43,1)
(15,7,1)
(45,11,1)
(29,31,1)
(17,52,1)
(60,27,1)
(55,17,1)
(36,44,1)
(41,45,1)
(1,36,1)
(30,13,1)
(43,29,1)
(39,15,1)
(37,47,1)
(0,39,1)
(10,20,1)
(56,34,1)
(27,23,1)
(13,55,1)
(13,31,1)
(47,39,1)
(12,29,1)
(51,28,1)
(50,57,1)
(11,50,1)
(18,54,1)
(58,33,1)
(15,30,1)
(29,1,1)
(38,60,1)
(46,0,1)
(24,51,1)
(31,58,1)
(25,12,1)
(47,42,1)
(54,24,1)
(28,31,1)
(20,56,1)
(37,25,1)
(11,40,1)
(13,54,1)
(19,16,1)
(41,39,1)
(34,38,1)
(10,37,1)
(16,41,1)
(29,54,1)
(57,53,1)
(44,38,1)
(40,46,1)
(42,19,1)
(53,40,1)
(40,39,1)
(38,18,1)
(13,31,2)
(15,7,2)
(60,28,2)
(37,38,2)
(47,29,2)
(41,29,2)
(11,29,2)
(15,29,2)
(29,1,2)
(52,29,2)
(40,29,2)
(39,29,2)
(50,40,2)
(57,40,2)
(18,28,2)
(47,39,2)
(39,15,2)
(55,29,2)
(1,38,2)
(15,30,2)
(40,39,2)
(45,29,2)
(20,38,2)
(43,29,2)
(27,28,2)
(51,28,2)
(46,29,2)
(24,28,2)
(13,29,2)
(50,57,2)
(25,29,2)
(53,40,2)
(54,28,2)
(13,55,2)
(0,29,2)
(29,54,2)
(44,38,2)
(34,38,2)
(41,39,2)
(12,29,2)
(19,29,2)
(29,31,2)
(13,54,2)
(17,29,2)
(29,38,2)
(16,29,2)
(42,29,2)
(56,38,2)
(23,28,2)
(30,13,2)
(19,39,2)
(36,38,2)
(30,29,2)
-----------------------------------
(0,myString)
(1,wcslen(HELLO_STRING)
(2,case 7:)
(3,)
(4,)
(5,if (data > wcslen(HELLO_STRING)
(6,if (myString == NULL)
(7,wchar_t *)
(8,)
(9,switch(5)
(10,RET)
(11,myString)
(12,"Input is less than the length of the source string")
(13,data*sizeof(wchar_t)
(14,switch(7)
(15,(wchar_t *)
(16,myString)
(17,wchar_t)
(18,break;)
(19,printWLine(myString)
(20,break;)
(21,default:)
(22,)
(23,"Benign, fixed string")
(24,20)
(25,printLine("Input is less than the length of the source string")
(26,data)
(27,printLine("Benign, fixed string")
(28,5)
(29,data > wcslen(HELLO_STRING)
(30,malloc(data*sizeof(wchar_t)
(31,data = 0)
(32,myString)
(33,data)
(34,"Benign, fixed string")
(35,)
(36,HELLO_STRING)
(37,break;)
(38,7)
(39,myString = (wchar_t *)
(40,myString == NULL)
(41,wcscpy(myString, HELLO_STRING)
(42,myString)
(43,myString)
(44,data)
(45,HELLO_STRING)
(46,NULL)
(47,free(myString)
(48,default:)
(49,case 6:)
(50,exit(-1)
(51,data)
(52,data)
(53,1)
(54,data = 20)
(55,sizeof(wchar_t)
(56,printLine("Benign, fixed string")
(57,-1)
(58,0)
(59,)
(60,break;)
(61,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^