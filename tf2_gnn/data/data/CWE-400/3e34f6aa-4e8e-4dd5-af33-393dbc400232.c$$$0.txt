-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_04_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,93,95
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_04_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_04_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_04_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(0,26,0)
(37,18,0)
(44,28,0)
(42,6,0)
(16,28,0)
(13,17,0)
(1,7,0)
(23,48,0)
(41,33,0)
(11,28,0)
(20,9,0)
(25,31,0)
(8,13,0)
(20,40,0)
(18,37,0)
(3,25,0)
(8,25,0)
(35,25,0)
(25,8,0)
(3,19,0)
(40,20,0)
(5,26,0)
(20,19,0)
(5,7,0)
(10,47,0)
(9,20,0)
(19,20,0)
(13,8,0)
(46,5,0)
(2,6,0)
(19,3,0)
(48,25,0)
(48,2,0)
(37,34,0)
(12,48,0)
(34,37,0)
(14,17,0)
(24,8,0)
(36,41,0)
(27,26,0)
(6,31,0)
(34,13,0)
(26,5,0)
(32,13,0)
(15,47,0)
(8,24,0)
(26,25,0)
(41,36,0)
(2,48,0)
(21,34,0)
(40,31,0)
(43,31,0)
(4,17,0)
(47,25,0)
(17,28,0)
(45,2,0)
(30,3,0)
(49,3,0)
(22,36,0)
(7,31,0)
(13,34,0)
(25,8,1)
(29,39,1)
(47,15,1)
(41,36,1)
(6,42,1)
(7,1,1)
(10,25,1)
(0,27,1)
(8,13,1)
(1,5,1)
(14,4,1)
(26,25,1)
(13,17,1)
(35,38,1)
(39,40,1)
(49,30,1)
(3,49,1)
(47,25,1)
(20,19,1)
(36,22,1)
(23,7,1)
(46,26,1)
(27,41,1)
(8,24,1)
(48,25,1)
(17,14,1)
(15,10,1)
(39,38,1)
(26,0,1)
(5,26,1)
(34,37,1)
(2,45,1)
(21,32,1)
(12,23,1)
(5,46,1)
(27,47,1)
(37,18,1)
(22,47,1)
(42,2,1)
(19,3,1)
(13,34,1)
(38,17,1)
(2,48,1)
(48,12,1)
(30,6,1)
(32,35,1)
(20,9,1)
(40,20,1)
(3,25,1)
(37,21,1)
(45,48,1)
(42,38,2)
(8,13,2)
(7,38,2)
(6,38,2)
(37,18,2)
(41,47,2)
(12,38,2)
(3,25,2)
(25,8,2)
(34,38,2)
(13,17,2)
(13,34,2)
(40,38,2)
(2,48,2)
(13,38,2)
(15,38,2)
(19,3,2)
(46,38,2)
(5,26,2)
(20,38,2)
(48,38,2)
(47,38,2)
(49,38,2)
(0,38,2)
(20,9,2)
(30,38,2)
(20,19,2)
(2,38,2)
(8,24,2)
(32,38,2)
(45,38,2)
(22,47,2)
(27,38,2)
(34,37,2)
(48,25,2)
(5,38,2)
(41,36,2)
(1,38,2)
(47,25,2)
(26,38,2)
(36,47,2)
(25,38,2)
(10,38,2)
(21,38,2)
(40,20,2)
(23,38,2)
(8,38,2)
(26,25,2)
(37,38,2)
(35,38,2)
(3,38,2)
(19,38,2)
-----------------------------------
(0,0)
(1,0)
(2,data[0].intTwo)
(3,data[0])
(4,data)
(5,data[0].intOne)
(6,data[0].intTwo = 0)
(7,data[0].intOne = 0)
(8,(struct _twoIntsStruct *)
(9,twoIntsStruct *)
(10,data)
(11,if(STATIC_CONST_TRUE)
(12,0)
(13,realloc(data, 100*sizeof(struct _twoIntsStruct)
(14,NULL)
(15,NULL)
(16,if(STATIC_CONST_TRUE)
(17,data = NULL)
(18,struct _twoIntsStruct)
(19,&data[0])
(20,(twoIntsStruct *)
(21,100)
(22,1)
(23,data)
(24,struct _twoIntsStruct *)
(25,data = (struct _twoIntsStruct *)
(26,data[0])
(27,data)
(28,)
(29,RET)
(30,data)
(31,)
(32,data)
(33,)
(34,100*sizeof(struct _twoIntsStruct)
(35,data)
(36,-1)
(37,sizeof(struct _twoIntsStruct)
(38,STATIC_CONST_TRUE)
(39,STATIC_CONST_TRUE)
(40,printStructLine((twoIntsStruct *)
(41,exit(-1)
(42,0)
(43,if (data == NULL)
(44,data)
(45,intTwo)
(46,intOne)
(47,data == NULL)
(48,data[0])
(49,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^