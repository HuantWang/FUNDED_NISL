-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_goodB2GSink(size_t data)
{
    {
        char * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING) && data < 100)
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
20,22
21,22
23,24
23,25
24,25
26,27
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
46,47
48,49
49,50
49,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
67,68
69,70
71,72
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
-----nextToken-----
2,4,7,9,14,16,17,22,25,27,30,31,36,39,41,44,47,50,51,55,57,62,64,68,70,72,76,78,82,84,89,90
-----computeFrom-----
19,20
19,21
20,21
20,22
28,29
28,30
34,35
34,36
45,46
45,47
53,54
53,55
-----guardedBy-----
27,72
30,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_goodB2GSink(size_t data){    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_goodB2GSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_goodB2GSink
size_t data
size_t
size_t
data
data
{    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
{        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(3,4,0)
(13,39,0)
(41,37,0)
(9,25,0)
(2,40,0)
(24,12,0)
(26,3,0)
(17,12,0)
(27,40,0)
(9,30,0)
(23,2,0)
(24,37,0)
(25,9,0)
(33,3,0)
(12,39,0)
(16,14,0)
(0,12,0)
(36,12,0)
(7,3,0)
(3,26,0)
(8,32,0)
(17,37,0)
(21,22,0)
(11,40,0)
(39,12,0)
(31,41,0)
(33,39,0)
(35,36,0)
(29,8,0)
(41,12,0)
(22,10,0)
(6,17,0)
(39,13,0)
(3,33,0)
(20,37,0)
(14,11,0)
(39,33,0)
(40,2,0)
(5,26,0)
(11,14,0)
(18,25,0)
(19,36,0)
(14,4,0)
(12,37,0)
(38,24,0)
(34,17,0)
(1,14,0)
(40,4,0)
(28,22,0)
(40,11,0)
(34,36,1)
(14,4,1)
(40,4,1)
(12,39,1)
(11,14,1)
(0,11,1)
(6,34,1)
(19,35,1)
(34,9,1)
(24,38,1)
(3,26,1)
(5,7,1)
(18,36,1)
(38,17,1)
(31,24,1)
(39,13,1)
(14,16,1)
(11,40,1)
(33,3,1)
(35,12,1)
(15,41,1)
(17,12,1)
(1,40,1)
(40,2,1)
(26,5,1)
(41,12,1)
(17,6,1)
(29,11,1)
(16,1,1)
(9,25,1)
(23,27,1)
(3,4,1)
(41,31,1)
(24,12,1)
(36,19,1)
(7,0,1)
(36,12,1)
(25,18,1)
(15,8,1)
(8,29,1)
(39,33,1)
(2,23,1)
(38,11,2)
(41,11,2)
(36,11,2)
(11,40,2)
(14,4,2)
(18,36,2)
(0,11,2)
(39,33,2)
(40,2,2)
(9,25,2)
(39,11,2)
(31,11,2)
(1,40,2)
(25,36,2)
(41,12,2)
(6,11,2)
(3,4,2)
(3,11,2)
(17,12,2)
(36,12,2)
(40,4,2)
(3,26,2)
(33,11,2)
(17,11,2)
(9,36,2)
(19,11,2)
(34,11,2)
(29,11,2)
(12,11,2)
(24,12,2)
(33,3,2)
(16,40,2)
(11,14,2)
(12,39,2)
(39,13,2)
(35,11,2)
(14,40,2)
(7,11,2)
(24,11,2)
(8,11,2)
(26,11,2)
(5,11,2)
-----------------------------------
(0,myString)
(1,data)
(2,strlen(HELLO_STRING)
(3,data*sizeof(char)
(4,size_t data)
(5,char)
(6,HELLO_STRING)
(7,data)
(8,printLine("Input is less than the length of the source string or too large")
(9,exit(-1)
(10,)
(11,data > strlen(HELLO_STRING)
(12,myString = (char *)
(13,char *)
(14,data < 100)
(15,RET)
(16,100)
(17,strcpy(myString, HELLO_STRING)
(18,1)
(19,NULL)
(20,if (myString == NULL)
(21,myString)
(22,)
(23,HELLO_STRING)
(24,printLine(myString)
(25,-1)
(26,sizeof(char)
(27,data)
(28,if (data > strlen(HELLO_STRING)
(29,"Input is less than the length of the source string or too large")
(30,)
(31,myString)
(32,)
(33,malloc(data*sizeof(char)
(34,myString)
(35,myString)
(36,myString == NULL)
(37,)
(38,myString)
(39,(char *)
(40,data > strlen(HELLO_STRING)
(41,free(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^