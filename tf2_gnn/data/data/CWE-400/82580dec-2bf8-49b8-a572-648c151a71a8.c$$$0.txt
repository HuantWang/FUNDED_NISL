-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    while(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
49,52
49,53
50,51
52,53
54,55
57,58
58,59
59,60
59,61
60,61
64,65
64,66
66,67
66,68
67,68
67,69
68,69
69,70
69,71
71,72
71,73
74,75
74,76
74,77
75,76
75,77
76,77
78,79
78,80
79,80
81,82
83,84
83,85
83,86
83,87
83,88
84,85
85,86
85,87
86,87
88,89
88,90
89,90
89,91
91,92
93,94
93,95
94,95
96,97
96,98
97,98
99,100
100,101
100,102
103,104
103,105
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
117,120
118,119
120,121
122,123
124,125
125,126
125,127
126,127
128,129
130,131
131,132
131,133
132,133
134,135
136,137
137,138
138,139
138,140
139,140
-----nextToken-----
2,4,9,11,15,16,18,23,25,28,30,35,37,39,41,43,48,51,53,55,56,61,62,63,65,70,72,73,77,80,82,87,90,92,95,98,101,102,106,108,113,115,119,121,123,127,129,133,135,140,141,142
-----computeFrom-----
13,14
13,15
32,33
32,34
46,47
46,48
75,76
75,77
85,86
85,87
96,97
96,98
104,105
104,106
-----guardedBy-----
37,53
43,55
82,123
77,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_bad(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_bad
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
-----joern-----
(42,61,0)
(39,2,0)
(25,52,0)
(67,50,0)
(31,22,0)
(70,48,0)
(68,11,0)
(66,18,0)
(3,18,0)
(59,31,0)
(7,44,0)
(1,16,0)
(29,36,0)
(14,21,0)
(49,53,0)
(0,68,0)
(63,12,0)
(6,35,0)
(54,21,0)
(44,16,0)
(51,62,0)
(57,61,0)
(12,23,0)
(60,16,0)
(18,21,0)
(40,43,0)
(45,61,0)
(64,66,0)
(23,34,0)
(61,65,0)
(36,14,0)
(62,43,0)
(32,67,0)
(26,65,0)
(62,18,0)
(36,53,0)
(20,44,0)
(21,18,0)
(61,16,0)
(36,52,0)
(53,36,0)
(21,14,0)
(55,48,0)
(16,48,0)
(9,44,0)
(44,52,0)
(33,22,0)
(27,66,0)
(19,62,0)
(30,18,0)
(52,44,0)
(18,43,0)
(37,31,0)
(14,36,0)
(69,22,0)
(30,43,0)
(48,8,0)
(52,28,0)
(22,35,0)
(46,8,0)
(4,11,0)
(17,3,0)
(13,30,0)
(31,52,0)
(23,12,0)
(56,59,0)
(36,22,0)
(2,47,0)
(41,35,0)
(3,43,0)
(58,18,0)
(38,35,0)
(31,59,0)
(21,54,0)
(65,61,0)
(24,68,0)
(23,12,1)
(42,45,1)
(51,23,1)
(25,65,1)
(19,51,1)
(36,52,1)
(60,10,1)
(65,26,1)
(10,22,1)
(16,1,1)
(21,14,1)
(31,52,1)
(18,21,1)
(66,18,1)
(57,42,1)
(36,53,1)
(26,61,1)
(65,61,1)
(53,49,1)
(32,31,1)
(56,37,1)
(58,31,1)
(5,15,1)
(2,39,1)
(17,30,1)
(44,20,1)
(3,18,1)
(5,4,1)
(15,10,1)
(52,44,1)
(44,16,1)
(62,18,1)
(49,29,1)
(39,65,1)
(46,2,1)
(67,32,1)
(13,62,1)
(9,7,1)
(36,22,1)
(29,58,1)
(33,69,1)
(63,66,1)
(30,13,1)
(12,63,1)
(4,67,1)
(51,66,1)
(61,57,1)
(7,25,1)
(15,46,1)
(20,9,1)
(21,54,1)
(31,22,1)
(4,3,1)
(22,33,1)
(37,15,1)
(59,56,1)
(3,17,1)
(30,18,1)
(64,27,1)
(61,16,1)
(62,19,1)
(46,52,1)
(1,60,1)
(45,16,1)
(31,59,1)
(66,64,1)
(14,36,1)
(27,18,1)
(53,31,2)
(65,10,2)
(37,15,2)
(27,31,2)
(46,10,2)
(7,65,2)
(3,18,2)
(14,36,2)
(36,31,2)
(31,59,2)
(36,52,2)
(57,10,2)
(21,54,2)
(25,65,2)
(9,65,2)
(31,15,2)
(1,10,2)
(59,15,2)
(60,10,2)
(61,16,2)
(32,31,2)
(21,14,2)
(56,15,2)
(66,31,2)
(45,10,2)
(62,31,2)
(67,31,2)
(31,52,2)
(44,16,2)
(61,10,2)
(23,66,2)
(36,22,2)
(4,15,2)
(2,65,2)
(44,65,2)
(65,61,2)
(20,65,2)
(13,31,2)
(31,22,2)
(49,31,2)
(18,31,2)
(12,66,2)
(52,44,2)
(39,65,2)
(3,31,2)
(30,31,2)
(66,18,2)
(62,18,2)
(26,10,2)
(58,31,2)
(51,31,2)
(63,66,2)
(21,31,2)
(18,21,2)
(30,18,2)
(36,53,2)
(17,31,2)
(19,31,2)
(29,31,2)
(64,31,2)
(16,10,2)
(23,12,2)
(14,31,2)
(52,65,2)
(42,10,2)
-----------------------------------
(0,if (data > strlen(HELLO_STRING)
(1,"")
(2,printLine("fgets()
(3,free(myString)
(4,break;)
(5,RET)
(6,while(1)
(7,inputBuffer)
(8,)
(9,NULL)
(10,1)
(11,)
(12,-1)
(13,myString)
(14,malloc(data*sizeof(char)
(15,1)
(16,inputBuffer[CHAR_ARRAY_SIZE] = "")
(17,myString)
(18,myString = (char *)
(19,HELLO_STRING)
(20,0)
(21,(char *)
(22,data = 0)
(23,exit(-1)
(24,myString)
(25,data)
(26,NULL)
(27,myString)
(28,)
(29,data)
(30,printLine(myString)
(31,data > strlen(HELLO_STRING)
(32,"Input is less than the length of the source string")
(33,0)
(34,)
(35,)
(36,data*sizeof(char)
(37,data)
(38,data)
(39,"fgets()
(40,if (myString == NULL)
(41,while(1)
(42,CHAR_ARRAY_SIZE)
(43,)
(44,strtoul(inputBuffer, NULL, 0)
(45,inputBuffer)
(46,break;)
(47,)
(48,)
(49,char)
(50,)
(51,myString)
(52,data = strtoul(inputBuffer, NULL, 0)
(53,sizeof(char)
(54,char *)
(55,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(56,HELLO_STRING)
(57,stdin)
(58,myString)
(59,strlen(HELLO_STRING)
(60,inputBuffer)
(61,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(62,strcpy(myString, HELLO_STRING)
(63,1)
(64,NULL)
(65,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(66,myString == NULL)
(67,printLine("Input is less than the length of the source string")
(68,)
(69,data)
(70,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^