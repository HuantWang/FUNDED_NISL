-----label-----
0
-----code-----
static unsigned long arch_get_unmapped_area_common(struct file *filp,
	unsigned long addr0, unsigned long len, unsigned long pgoff,
	unsigned long flags, enum mmap_allocation_direction dir)
{
	struct mm_struct *mm = current->mm;
	struct vm_area_struct *vma;
	unsigned long addr = addr0;
	int do_color_align;

	if (unlikely(len > TASK_SIZE))
		return -ENOMEM;

	if (flags & MAP_FIXED) {
		/* Even MAP_FIXED mappings must reside within TASK_SIZE */
		if (TASK_SIZE - len < addr)
			return -EINVAL;

		/*
		 * We do not accept a shared mapping if it would violate
		 * cache aliasing constraints.
		 */
		if ((flags & MAP_SHARED) &&
		    ((addr - (pgoff << PAGE_SHIFT)) & shm_align_mask))
			return -EINVAL;
		return addr;
	}

	do_color_align = 0;
	if (filp || (flags & MAP_SHARED))
		do_color_align = 1;

	/* requesting a specific address */
	if (addr) {
		if (do_color_align)
			addr = COLOUR_ALIGN(addr, pgoff);
		else
			addr = PAGE_ALIGN(addr);

		vma = find_vma(mm, addr);
		if (TASK_SIZE - len >= addr &&
		    (!vma || addr + len <= vm_start_gap(vma)))
			return addr;
	}

	if (dir == UP) {
		addr = mm->mmap_base;
		if (do_color_align)
			addr = COLOUR_ALIGN(addr, pgoff);
		else
			addr = PAGE_ALIGN(addr);

		for (vma = find_vma(current->mm, addr); ; vma = vma->vm_next) {
			/* At this point:  (!vma || addr < vma->vm_end). */
			if (TASK_SIZE - len < addr)
				return -ENOMEM;
			if (!vma || addr + len <= vma->vm_start)
				return addr;
			addr = vma->vm_end;
			if (do_color_align)
				addr = COLOUR_ALIGN(addr, pgoff);
		 }
	 } else {
		/* check if free_area_cache is useful for us */
		if (len <= mm->cached_hole_size) {
			mm->cached_hole_size = 0;
			mm->free_area_cache = mm->mmap_base;
		}

		/*
		 * either no address requested, or the mapping can't fit into
		 * the requested address hole
		 */
		addr = mm->free_area_cache;
		if (do_color_align) {
			unsigned long base =
				COLOUR_ALIGN_DOWN(addr - len, pgoff);
			addr = base + len;
		}

		/* make sure it can fit in the remaining address space */
		if (likely(addr > len)) {
			vma = find_vma(mm, addr - len);
			if (!vma || addr <= vma->vm_start) {
				/* cache the address as a hint for next time */
				return mm->free_area_cache = addr - len;
			}
		}

		if (unlikely(mm->mmap_base < len))
			goto bottomup;

		addr = mm->mmap_base - len;
		if (do_color_align)
			addr = COLOUR_ALIGN_DOWN(addr, pgoff);

		do {
			/*
			 * Lookup failure means no vma is above this address,
			 * else if new region fits below vma->vm_start,
			 * return with success:
			 */
			vma = find_vma(mm, addr);
			if (likely(!vma || addr + len <= vma->vm_start)) {
				/* cache the address as a hint for next time */
				return mm->free_area_cache = addr;
			}

			/* remember the largest hole we saw so far */
			if (addr + mm->cached_hole_size < vma->vm_start)
				mm->cached_hole_size = vma->vm_start - addr;

			/* try just below the current vma->vm_start */
			addr = vma->vm_start - len;
			if (do_color_align)
				addr = COLOUR_ALIGN_DOWN(addr, pgoff);
		} while (likely(len < vma->vm_start));

bottomup:
		/*
		 * A failed mmap() very likely causes application failure,
		 * so fall back to the bottom-up function here. This scenario
		 * can happen with large stack limits and large mmap()
		 * allocations.
		 */
		mm->cached_hole_size = ~0UL;
		mm->free_area_cache = TASK_UNMAPPED_BASE;
		addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags);
		/*
		 * Restore the topdown base:
		 */
		mm->free_area_cache = mm->mmap_base;
		mm->cached_hole_size = ~0UL;

		return addr;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
21,22
23,24
23,25
25,26
27,28
27,29
28,29
30,31
32,33
32,34
32,35
32,36
32,37
32,38
32,39
32,40
32,41
32,42
33,34
34,35
34,36
35,36
37,38
37,39
37,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
49,50
49,51
52,53
53,54
53,55
55,56
55,57
57,58
58,59
60,61
61,62
61,63
63,64
65,66
65,67
66,67
66,68
67,68
69,70
69,71
70,71
72,73
74,75
75,76
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
84,86
84,87
85,86
85,87
86,87
86,88
87,88
87,89
88,89
90,91
92,93
94,95
95,96
96,97
98,99
98,100
99,100
99,101
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
109,110
109,111
110,111
112,113
113,114
113,115
114,115
116,117
118,119
120,121
121,122
122,123
124,125
125,126
127,128
128,129
128,130
129,130
132,133
132,134
133,134
133,135
134,135
136,137
137,138
137,139
138,139
140,141
142,143
143,144
143,145
144,145
147,148
147,149
148,149
150,151
150,152
150,153
151,152
151,153
151,154
152,153
154,155
155,156
155,157
156,157
158,159
158,160
158,161
159,160
161,162
163,164
165,166
166,167
166,168
167,168
169,170
169,171
170,171
172,173
174,175
175,176
175,177
176,177
178,179
178,180
178,181
179,180
181,182
183,184
185,186
185,187
186,187
186,188
187,188
187,189
188,189
188,190
189,190
191,192
193,194
195,196
196,197
196,198
197,198
198,199
200,201
200,202
201,202
201,203
202,203
204,205
206,207
206,208
207,208
209,210
211,212
212,213
214,215
214,216
214,217
215,216
215,217
216,217
218,219
220,221
220,222
220,223
221,222
222,223
222,224
223,224
225,226
225,227
226,227
229,230
229,231
229,232
230,231
232,233
233,234
233,235
234,235
236,237
236,238
236,239
237,238
239,240
241,242
243,244
244,245
244,246
245,246
247,248
247,249
248,249
250,251
252,253
252,254
252,255
253,254
254,255
254,256
255,256
257,258
257,259
257,260
258,259
260,261
260,262
261,262
264,265
266,267
266,268
267,268
269,270
269,271
270,271
273,274
273,275
273,276
273,277
274,275
274,276
275,276
275,277
276,277
276,278
277,278
279,280
281,282
283,284
284,285
285,286
287,288
287,289
288,289
288,290
289,290
290,291
292,293
292,294
293,294
293,295
294,295
296,297
298,299
298,300
299,300
302,303
303,304
305,306
306,307
306,308
307,308
309,310
309,311
310,311
313,314
313,315
314,315
316,317
317,318
317,319
318,319
320,321
320,322
320,323
321,322
323,324
325,326
327,328
327,329
327,330
327,331
327,332
327,333
327,334
327,335
327,336
327,337
327,338
327,339
327,340
327,341
328,329
328,330
329,330
329,331
330,331
332,333
332,334
333,334
336,337
336,338
337,338
338,339
338,340
339,340
339,341
340,341
344,345
345,346
345,347
346,347
346,348
347,348
350,351
350,352
351,352
354,355
355,356
355,357
356,357
358,359
358,360
359,360
362,363
362,364
363,364
365,366
365,367
366,367
367,368
367,369
369,370
369,371
371,372
372,373
372,374
372,375
373,374
375,376
375,377
376,377
378,379
380,381
382,383
383,384
383,385
384,385
386,387
386,388
387,388
389,390
391,392
391,393
392,393
392,394
393,394
395,396
395,397
396,397
398,399
400,401
400,402
401,402
402,403
402,404
403,404
405,406
405,407
405,408
406,407
408,409
410,411
410,412
411,412
413,414
415,416
415,417
416,417
416,418
417,418
418,419
420,421
420,422
421,422
423,424
423,425
424,425
427,428
428,429
429,430
429,431
430,431
430,432
431,432
434,435
434,436
435,436
437,438
439,440
439,441
440,441
440,442
441,442
443,444
443,445
444,445
444,446
445,446
448,449
450,451
452,453
453,454
453,455
454,455
456,457
456,458
457,458
457,459
458,459
461,462
463,464
463,465
464,465
466,467
467,468
467,469
468,469
470,471
470,472
470,473
471,472
473,474
475,476
477,478
477,479
478,479
478,480
478,481
478,482
478,483
479,480
480,481
480,482
481,482
483,484
483,485
483,486
484,485
486,487
488,489
490,491
490,492
491,492
491,493
492,493
494,495
494,496
495,496
496,497
498,499
498,500
499,500
499,501
500,501
502,503
504,505
504,506
505,506
508,509
509,510
510,511
510,512
511,512
511,513
512,513
515,516
517,518
517,519
518,519
518,520
519,520
519,521
520,521
522,523
522,524
523,524
526,527
526,528
527,528
530,531
531,532
531,533
532,533
532,534
533,534
536,537
536,538
537,538
537,539
538,539
541,542
543,544
544,545
544,546
545,546
547,548
547,549
548,549
548,550
549,550
552,553
554,555
554,556
555,556
557,558
558,559
558,560
559,560
561,562
561,563
561,564
562,563
564,565
566,567
568,569
568,570
569,570
571,572
571,573
572,573
574,575
574,576
575,576
578,579
578,580
580,581
581,582
581,583
582,583
582,584
583,584
586,587
588,589
589,590
589,591
590,591
590,592
591,592
594,595
596,597
597,598
597,599
598,599
600,601
600,602
600,603
600,604
600,605
600,606
601,602
603,604
605,606
607,608
609,610
611,612
613,614
614,615
614,616
615,616
615,617
616,617
619,620
619,621
620,621
623,624
624,625
624,626
625,626
625,627
626,627
629,630
631,632
632,633
-----nextToken-----
2,4,7,9,10,12,14,16,18,20,22,24,26,29,31,36,38,39,43,44,48,50,51,54,56,59,62,64,68,71,73,77,81,83,89,91,93,97,103,105,111,115,117,119,123,126,130,131,135,139,141,145,146,149,153,157,160,162,164,168,171,173,177,180,182,184,190,192,194,199,203,205,208,210,213,217,219,224,227,228,231,235,238,240,242,246,249,251,256,259,262,263,265,268,271,272,278,280,282,286,291,295,297,300,301,304,308,311,312,315,319,322,324,326,331,334,335,341,342,343,348,349,352,353,357,360,361,364,368,370,374,377,379,381,385,388,390,394,397,399,404,407,409,412,414,419,422,425,426,432,433,436,438,442,446,447,449,451,455,459,460,462,465,469,472,474,476,482,485,487,489,493,497,501,503,506,507,513,514,516,521,524,525,528,529,534,535,539,540,542,546,550,551,553,556,560,563,565,567,570,573,576,577,579,584,585,587,592,593,595,599,602,604,606,608,610,612,617,618,621,622,627,628,630,633
-----computeFrom-----
69,70
69,71
79,80
79,81
86,87
86,88
87,88
87,89
99,100
99,101
101,102
101,103
107,108
107,109
109,110
109,111
113,114
113,115
128,129
128,130
133,134
133,135
137,138
137,139
143,144
143,145
155,156
155,157
166,167
166,168
175,176
175,177
186,187
186,188
187,188
187,189
188,189
188,190
196,197
196,198
200,201
200,202
201,202
201,203
215,216
215,217
222,223
222,224
233,234
233,235
244,245
244,246
254,255
254,256
266,267
266,268
275,276
275,277
276,277
276,278
288,289
288,290
292,293
292,294
293,294
293,295
306,307
306,308
317,318
317,319
329,330
329,331
338,339
338,340
345,346
345,347
355,356
355,357
375,376
375,377
383,384
383,385
386,387
386,388
395,396
395,397
402,403
402,404
410,411
410,412
416,417
416,418
420,421
420,422
429,430
429,431
434,435
434,436
443,444
443,445
453,454
453,455
456,457
456,458
467,468
467,469
480,481
480,482
494,495
494,496
498,499
498,500
499,500
499,501
510,511
510,512
518,519
518,520
519,520
519,521
531,532
531,533
536,537
536,538
544,545
544,546
547,548
547,549
558,559
558,560
571,572
571,573
581,582
581,583
589,590
589,591
597,598
597,599
614,615
614,616
624,625
624,626
-----guardedBy-----
81,103
203,213
295,304
334,352
335,342
422,436
524,534
525,535
529,540
528,539
521,542
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static unsigned long arch_get_unmapped_area_common(struct file *filp,	unsigned long addr0, unsigned long len, unsigned long pgoff,	unsigned long flags, enum mmap_allocation_direction dir){	struct mm_struct *mm = current->mm;	struct vm_area_struct *vma;	unsigned long addr = addr0;	int do_color_align;	if (unlikely(len > TASK_SIZE))		return -ENOMEM;	if (flags & MAP_FIXED) {		/* Even MAP_FIXED mappings must reside within TASK_SIZE */		if (TASK_SIZE - len < addr)			return -EINVAL;		/*		 * We do not accept a shared mapping if it would violate		 * cache aliasing constraints.		 */		if ((flags & MAP_SHARED) &&		    ((addr - (pgoff << PAGE_SHIFT)) & shm_align_mask))			return -EINVAL;		return addr;	}	do_color_align = 0;	if (filp || (flags & MAP_SHARED))		do_color_align = 1;	/* requesting a specific address */	if (addr) {		if (do_color_align)			addr = COLOUR_ALIGN(addr, pgoff);		else			addr = PAGE_ALIGN(addr);		vma = find_vma(mm, addr);		if (TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			return addr;	}	if (dir == UP) {		addr = mm->mmap_base;		if (do_color_align)			addr = COLOUR_ALIGN(addr, pgoff);		else			addr = PAGE_ALIGN(addr);		for (vma = find_vma(current->mm, addr); ; vma = vma->vm_next) {			/* At this point:  (!vma || addr < vma->vm_end). */			if (TASK_SIZE - len < addr)				return -ENOMEM;			if (!vma || addr + len <= vma->vm_start)				return addr;			addr = vma->vm_end;			if (do_color_align)				addr = COLOUR_ALIGN(addr, pgoff);		 }	 } else {		/* check if free_area_cache is useful for us */		if (len <= mm->cached_hole_size) {			mm->cached_hole_size = 0;			mm->free_area_cache = mm->mmap_base;		}		/*		 * either no address requested, or the mapping can't fit into		 * the requested address hole		 */		addr = mm->free_area_cache;		if (do_color_align) {			unsigned long base =				COLOUR_ALIGN_DOWN(addr - len, pgoff);			addr = base + len;		}		/* make sure it can fit in the remaining address space */		if (likely(addr > len)) {			vma = find_vma(mm, addr - len);			if (!vma || addr <= vma->vm_start) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr - len;			}		}		if (unlikely(mm->mmap_base < len))			goto bottomup;		addr = mm->mmap_base - len;		if (do_color_align)			addr = COLOUR_ALIGN_DOWN(addr, pgoff);		do {			/*			 * Lookup failure means no vma is above this address,			 * else if new region fits below vma->vm_start,			 * return with success:			 */			vma = find_vma(mm, addr);			if (likely(!vma || addr + len <= vma->vm_start)) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr;			}			/* remember the largest hole we saw so far */			if (addr + mm->cached_hole_size < vma->vm_start)				mm->cached_hole_size = vma->vm_start - addr;			/* try just below the current vma->vm_start */			addr = vma->vm_start - len;			if (do_color_align)				addr = COLOUR_ALIGN_DOWN(addr, pgoff);		} while (likely(len < vma->vm_start));bottomup:		/*		 * A failed mmap() very likely causes application failure,		 * so fall back to the bottom-up function here. This scenario		 * can happen with large stack limits and large mmap()		 * allocations.		 */		mm->cached_hole_size = ~0UL;		mm->free_area_cache = TASK_UNMAPPED_BASE;		addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags);		/*		 * Restore the topdown base:		 */		mm->free_area_cache = mm->mmap_base;		mm->cached_hole_size = ~0UL;		return addr;	}}
static unsigned long
arch_get_unmapped_area_common(struct file *filp,	unsigned long addr0, unsigned long len, unsigned long pgoff,	unsigned long flags, enum mmap_allocation_direction dir)
arch_get_unmapped_area_common
struct file *filp
struct file
file
*filp
*
filp
unsigned long addr0
unsigned long
addr0
addr0
unsigned long len
unsigned long
len
len
unsigned long pgoff
unsigned long
pgoff
pgoff
unsigned long flags
unsigned long
flags
flags
enum mmap_allocation_direction dir
enum mmap_allocation_direction
mmap_allocation_direction
dir
dir
{	struct mm_struct *mm = current->mm;	struct vm_area_struct *vma;	unsigned long addr = addr0;	int do_color_align;	if (unlikely(len > TASK_SIZE))		return -ENOMEM;	if (flags & MAP_FIXED) {		/* Even MAP_FIXED mappings must reside within TASK_SIZE */		if (TASK_SIZE - len < addr)			return -EINVAL;		/*		 * We do not accept a shared mapping if it would violate		 * cache aliasing constraints.		 */		if ((flags & MAP_SHARED) &&		    ((addr - (pgoff << PAGE_SHIFT)) & shm_align_mask))			return -EINVAL;		return addr;	}	do_color_align = 0;	if (filp || (flags & MAP_SHARED))		do_color_align = 1;	/* requesting a specific address */	if (addr) {		if (do_color_align)			addr = COLOUR_ALIGN(addr, pgoff);		else			addr = PAGE_ALIGN(addr);		vma = find_vma(mm, addr);		if (TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			return addr;	}	if (dir == UP) {		addr = mm->mmap_base;		if (do_color_align)			addr = COLOUR_ALIGN(addr, pgoff);		else			addr = PAGE_ALIGN(addr);		for (vma = find_vma(current->mm, addr); ; vma = vma->vm_next) {			/* At this point:  (!vma || addr < vma->vm_end). */			if (TASK_SIZE - len < addr)				return -ENOMEM;			if (!vma || addr + len <= vma->vm_start)				return addr;			addr = vma->vm_end;			if (do_color_align)				addr = COLOUR_ALIGN(addr, pgoff);		 }	 } else {		/* check if free_area_cache is useful for us */		if (len <= mm->cached_hole_size) {			mm->cached_hole_size = 0;			mm->free_area_cache = mm->mmap_base;		}		/*		 * either no address requested, or the mapping can't fit into		 * the requested address hole		 */		addr = mm->free_area_cache;		if (do_color_align) {			unsigned long base =				COLOUR_ALIGN_DOWN(addr - len, pgoff);			addr = base + len;		}		/* make sure it can fit in the remaining address space */		if (likely(addr > len)) {			vma = find_vma(mm, addr - len);			if (!vma || addr <= vma->vm_start) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr - len;			}		}		if (unlikely(mm->mmap_base < len))			goto bottomup;		addr = mm->mmap_base - len;		if (do_color_align)			addr = COLOUR_ALIGN_DOWN(addr, pgoff);		do {			/*			 * Lookup failure means no vma is above this address,			 * else if new region fits below vma->vm_start,			 * return with success:			 */			vma = find_vma(mm, addr);			if (likely(!vma || addr + len <= vma->vm_start)) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr;			}			/* remember the largest hole we saw so far */			if (addr + mm->cached_hole_size < vma->vm_start)				mm->cached_hole_size = vma->vm_start - addr;			/* try just below the current vma->vm_start */			addr = vma->vm_start - len;			if (do_color_align)				addr = COLOUR_ALIGN_DOWN(addr, pgoff);		} while (likely(len < vma->vm_start));bottomup:		/*		 * A failed mmap() very likely causes application failure,		 * so fall back to the bottom-up function here. This scenario		 * can happen with large stack limits and large mmap()		 * allocations.		 */		mm->cached_hole_size = ~0UL;		mm->free_area_cache = TASK_UNMAPPED_BASE;		addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags);		/*		 * Restore the topdown base:		 */		mm->free_area_cache = mm->mmap_base;		mm->cached_hole_size = ~0UL;		return addr;	}}
struct mm_struct *mm = current->mm;
struct mm_struct *mm = current->mm;
struct mm_struct
mm_struct
*mm = current->mm
*
mm
= current->mm
current->mm
current
current
mm
struct vm_area_struct *vma;
struct vm_area_struct *vma;
struct vm_area_struct
vm_area_struct
*vma
*
vma
unsigned long addr = addr0;
unsigned long addr = addr0;
unsigned long
addr = addr0
addr
= addr0
addr0
addr0
int do_color_align;
int do_color_align;
int
do_color_align
do_color_align
if (unlikely(len > TASK_SIZE))		return -ENOMEM;
unlikely(len > TASK_SIZE)
unlikely
unlikely
len > TASK_SIZE
len
len
TASK_SIZE
TASK_SIZE
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
if (flags & MAP_FIXED) {		/* Even MAP_FIXED mappings must reside within TASK_SIZE */		if (TASK_SIZE - len < addr)			return -EINVAL;		/*		 * We do not accept a shared mapping if it would violate		 * cache aliasing constraints.		 */		if ((flags & MAP_SHARED) &&		    ((addr - (pgoff << PAGE_SHIFT)) & shm_align_mask))			return -EINVAL;		return addr;	}
flags & MAP_FIXED
flags
flags
MAP_FIXED
MAP_FIXED
{		/* Even MAP_FIXED mappings must reside within TASK_SIZE */		if (TASK_SIZE - len < addr)			return -EINVAL;		/*		 * We do not accept a shared mapping if it would violate		 * cache aliasing constraints.		 */		if ((flags & MAP_SHARED) &&		    ((addr - (pgoff << PAGE_SHIFT)) & shm_align_mask))			return -EINVAL;		return addr;	}
if (TASK_SIZE - len < addr)			return -EINVAL;
TASK_SIZE - len < addr
TASK_SIZE - len
TASK_SIZE
TASK_SIZE
len
len
addr
addr
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if ((flags & MAP_SHARED) &&		    ((addr - (pgoff << PAGE_SHIFT)) & shm_align_mask))			return -EINVAL;
(flags & MAP_SHARED) &&		    ((addr - (pgoff << PAGE_SHIFT)) & shm_align_mask)
(flags & MAP_SHARED)
flags & MAP_SHARED
flags
flags
MAP_SHARED
MAP_SHARED
((addr - (pgoff << PAGE_SHIFT)) & shm_align_mask)
(addr - (pgoff << PAGE_SHIFT)) & shm_align_mask
(addr - (pgoff << PAGE_SHIFT))
addr - (pgoff << PAGE_SHIFT)
addr
addr
(pgoff << PAGE_SHIFT)
pgoff << PAGE_SHIFT
pgoff
pgoff
PAGE_SHIFT
PAGE_SHIFT
shm_align_mask
shm_align_mask
return -EINVAL;
-EINVAL
EINVAL
EINVAL
return addr;
addr
addr
do_color_align = 0;
do_color_align = 0
do_color_align
do_color_align
0
if (filp || (flags & MAP_SHARED))		do_color_align = 1;
filp || (flags & MAP_SHARED)
filp
filp
(flags & MAP_SHARED)
flags & MAP_SHARED
flags
flags
MAP_SHARED
MAP_SHARED
do_color_align = 1;
do_color_align = 1
do_color_align
do_color_align
1
if (addr) {		if (do_color_align)			addr = COLOUR_ALIGN(addr, pgoff);		else			addr = PAGE_ALIGN(addr);		vma = find_vma(mm, addr);		if (TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			return addr;	}
addr
addr
{		if (do_color_align)			addr = COLOUR_ALIGN(addr, pgoff);		else			addr = PAGE_ALIGN(addr);		vma = find_vma(mm, addr);		if (TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			return addr;	}
if (do_color_align)			addr = COLOUR_ALIGN(addr, pgoff);		else			addr = PAGE_ALIGN(addr);
do_color_align
do_color_align
addr = COLOUR_ALIGN(addr, pgoff);
addr = COLOUR_ALIGN(addr, pgoff)
addr
addr
COLOUR_ALIGN(addr, pgoff)
COLOUR_ALIGN
COLOUR_ALIGN
addr
addr
pgoff
pgoff
addr = PAGE_ALIGN(addr);
addr = PAGE_ALIGN(addr)
addr
addr
PAGE_ALIGN(addr)
PAGE_ALIGN
PAGE_ALIGN
addr
addr
vma = find_vma(mm, addr);
vma = find_vma(mm, addr)
vma
vma
find_vma(mm, addr)
find_vma
find_vma
mm
mm
addr
addr
if (TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			return addr;
TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma))
TASK_SIZE - len >= addr
TASK_SIZE - len
TASK_SIZE
TASK_SIZE
len
len
addr
addr
(!vma || addr + len <= vm_start_gap(vma))
!vma || addr + len <= vm_start_gap(vma)
!vma
vma
vma
addr + len <= vm_start_gap(vma)
addr + len
addr
addr
len
len
vm_start_gap(vma)
vm_start_gap
vm_start_gap
vma
vma
return addr;
addr
addr
if (dir == UP) {		addr = mm->mmap_base;		if (do_color_align)			addr = COLOUR_ALIGN(addr, pgoff);		else			addr = PAGE_ALIGN(addr);		for (vma = find_vma(current->mm, addr); ; vma = vma->vm_next) {			/* At this point:  (!vma || addr < vma->vm_end). */			if (TASK_SIZE - len < addr)				return -ENOMEM;			if (!vma || addr + len <= vma->vm_start)				return addr;			addr = vma->vm_end;			if (do_color_align)				addr = COLOUR_ALIGN(addr, pgoff);		 }	 } else {		/* check if free_area_cache is useful for us */		if (len <= mm->cached_hole_size) {			mm->cached_hole_size = 0;			mm->free_area_cache = mm->mmap_base;		}		/*		 * either no address requested, or the mapping can't fit into		 * the requested address hole		 */		addr = mm->free_area_cache;		if (do_color_align) {			unsigned long base =				COLOUR_ALIGN_DOWN(addr - len, pgoff);			addr = base + len;		}		/* make sure it can fit in the remaining address space */		if (likely(addr > len)) {			vma = find_vma(mm, addr - len);			if (!vma || addr <= vma->vm_start) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr - len;			}		}		if (unlikely(mm->mmap_base < len))			goto bottomup;		addr = mm->mmap_base - len;		if (do_color_align)			addr = COLOUR_ALIGN_DOWN(addr, pgoff);		do {			/*			 * Lookup failure means no vma is above this address,			 * else if new region fits below vma->vm_start,			 * return with success:			 */			vma = find_vma(mm, addr);			if (likely(!vma || addr + len <= vma->vm_start)) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr;			}			/* remember the largest hole we saw so far */			if (addr + mm->cached_hole_size < vma->vm_start)				mm->cached_hole_size = vma->vm_start - addr;			/* try just below the current vma->vm_start */			addr = vma->vm_start - len;			if (do_color_align)				addr = COLOUR_ALIGN_DOWN(addr, pgoff);		} while (likely(len < vma->vm_start));bottomup:		/*		 * A failed mmap() very likely causes application failure,		 * so fall back to the bottom-up function here. This scenario		 * can happen with large stack limits and large mmap()		 * allocations.		 */		mm->cached_hole_size = ~0UL;		mm->free_area_cache = TASK_UNMAPPED_BASE;		addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags);		/*		 * Restore the topdown base:		 */		mm->free_area_cache = mm->mmap_base;		mm->cached_hole_size = ~0UL;		return addr;	}
dir == UP
dir
dir
UP
UP
{		addr = mm->mmap_base;		if (do_color_align)			addr = COLOUR_ALIGN(addr, pgoff);		else			addr = PAGE_ALIGN(addr);		for (vma = find_vma(current->mm, addr); ; vma = vma->vm_next) {			/* At this point:  (!vma || addr < vma->vm_end). */			if (TASK_SIZE - len < addr)				return -ENOMEM;			if (!vma || addr + len <= vma->vm_start)				return addr;			addr = vma->vm_end;			if (do_color_align)				addr = COLOUR_ALIGN(addr, pgoff);		 }	 }
addr = mm->mmap_base;
addr = mm->mmap_base
addr
addr
mm->mmap_base
mm
mm
mmap_base
if (do_color_align)			addr = COLOUR_ALIGN(addr, pgoff);		else			addr = PAGE_ALIGN(addr);
do_color_align
do_color_align
addr = COLOUR_ALIGN(addr, pgoff);
addr = COLOUR_ALIGN(addr, pgoff)
addr
addr
COLOUR_ALIGN(addr, pgoff)
COLOUR_ALIGN
COLOUR_ALIGN
addr
addr
pgoff
pgoff
addr = PAGE_ALIGN(addr);
addr = PAGE_ALIGN(addr)
addr
addr
PAGE_ALIGN(addr)
PAGE_ALIGN
PAGE_ALIGN
addr
addr
for (vma = find_vma(current->mm, addr); ; vma = vma->vm_next) {			/* At this point:  (!vma || addr < vma->vm_end). */			if (TASK_SIZE - len < addr)				return -ENOMEM;			if (!vma || addr + len <= vma->vm_start)				return addr;			addr = vma->vm_end;			if (do_color_align)				addr = COLOUR_ALIGN(addr, pgoff);		 }
vma = find_vma(current->mm, addr);
vma = find_vma(current->mm, addr)
vma
vma
find_vma(current->mm, addr)
find_vma
find_vma
current->mm
current
current
mm
addr
addr
vma = vma->vm_next
vma
vma
vma->vm_next
vma
vma
vm_next
{			/* At this point:  (!vma || addr < vma->vm_end). */			if (TASK_SIZE - len < addr)				return -ENOMEM;			if (!vma || addr + len <= vma->vm_start)				return addr;			addr = vma->vm_end;			if (do_color_align)				addr = COLOUR_ALIGN(addr, pgoff);		 }
if (TASK_SIZE - len < addr)				return -ENOMEM;
TASK_SIZE - len < addr
TASK_SIZE - len
TASK_SIZE
TASK_SIZE
len
len
addr
addr
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
if (!vma || addr + len <= vma->vm_start)				return addr;
!vma || addr + len <= vma->vm_start
!vma
vma
vma
addr + len <= vma->vm_start
addr + len
addr
addr
len
len
vma->vm_start
vma
vma
vm_start
return addr;
addr
addr
addr = vma->vm_end;
addr = vma->vm_end
addr
addr
vma->vm_end
vma
vma
vm_end
if (do_color_align)				addr = COLOUR_ALIGN(addr, pgoff);
do_color_align
do_color_align
addr = COLOUR_ALIGN(addr, pgoff);
addr = COLOUR_ALIGN(addr, pgoff)
addr
addr
COLOUR_ALIGN(addr, pgoff)
COLOUR_ALIGN
COLOUR_ALIGN
addr
addr
pgoff
pgoff
{		/* check if free_area_cache is useful for us */		if (len <= mm->cached_hole_size) {			mm->cached_hole_size = 0;			mm->free_area_cache = mm->mmap_base;		}		/*		 * either no address requested, or the mapping can't fit into		 * the requested address hole		 */		addr = mm->free_area_cache;		if (do_color_align) {			unsigned long base =				COLOUR_ALIGN_DOWN(addr - len, pgoff);			addr = base + len;		}		/* make sure it can fit in the remaining address space */		if (likely(addr > len)) {			vma = find_vma(mm, addr - len);			if (!vma || addr <= vma->vm_start) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr - len;			}		}		if (unlikely(mm->mmap_base < len))			goto bottomup;		addr = mm->mmap_base - len;		if (do_color_align)			addr = COLOUR_ALIGN_DOWN(addr, pgoff);		do {			/*			 * Lookup failure means no vma is above this address,			 * else if new region fits below vma->vm_start,			 * return with success:			 */			vma = find_vma(mm, addr);			if (likely(!vma || addr + len <= vma->vm_start)) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr;			}			/* remember the largest hole we saw so far */			if (addr + mm->cached_hole_size < vma->vm_start)				mm->cached_hole_size = vma->vm_start - addr;			/* try just below the current vma->vm_start */			addr = vma->vm_start - len;			if (do_color_align)				addr = COLOUR_ALIGN_DOWN(addr, pgoff);		} while (likely(len < vma->vm_start));bottomup:		/*		 * A failed mmap() very likely causes application failure,		 * so fall back to the bottom-up function here. This scenario		 * can happen with large stack limits and large mmap()		 * allocations.		 */		mm->cached_hole_size = ~0UL;		mm->free_area_cache = TASK_UNMAPPED_BASE;		addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags);		/*		 * Restore the topdown base:		 */		mm->free_area_cache = mm->mmap_base;		mm->cached_hole_size = ~0UL;		return addr;	}
if (len <= mm->cached_hole_size) {			mm->cached_hole_size = 0;			mm->free_area_cache = mm->mmap_base;		}
len <= mm->cached_hole_size
len
len
mm->cached_hole_size
mm
mm
cached_hole_size
{			mm->cached_hole_size = 0;			mm->free_area_cache = mm->mmap_base;		}
mm->cached_hole_size = 0;
mm->cached_hole_size = 0
mm->cached_hole_size
mm
mm
cached_hole_size
0
mm->free_area_cache = mm->mmap_base;
mm->free_area_cache = mm->mmap_base
mm->free_area_cache
mm
mm
free_area_cache
mm->mmap_base
mm
mm
mmap_base
addr = mm->free_area_cache;
addr = mm->free_area_cache
addr
addr
mm->free_area_cache
mm
mm
free_area_cache
if (do_color_align) {			unsigned long base =				COLOUR_ALIGN_DOWN(addr - len, pgoff);			addr = base + len;		}
do_color_align
do_color_align
{			unsigned long base =				COLOUR_ALIGN_DOWN(addr - len, pgoff);			addr = base + len;		}
unsigned long base =				COLOUR_ALIGN_DOWN(addr - len, pgoff);
unsigned long base =				COLOUR_ALIGN_DOWN(addr - len, pgoff);
unsigned long
base =				COLOUR_ALIGN_DOWN(addr - len, pgoff)
base
=				COLOUR_ALIGN_DOWN(addr - len, pgoff)
COLOUR_ALIGN_DOWN(addr - len, pgoff)
COLOUR_ALIGN_DOWN
COLOUR_ALIGN_DOWN
addr - len
addr
addr
len
len
pgoff
pgoff
addr = base + len;
addr = base + len
addr
addr
base + len
base
base
len
len
if (likely(addr > len)) {			vma = find_vma(mm, addr - len);			if (!vma || addr <= vma->vm_start) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr - len;			}		}
likely(addr > len)
likely
likely
addr > len
addr
addr
len
len
{			vma = find_vma(mm, addr - len);			if (!vma || addr <= vma->vm_start) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr - len;			}		}
vma = find_vma(mm, addr - len);
vma = find_vma(mm, addr - len)
vma
vma
find_vma(mm, addr - len)
find_vma
find_vma
mm
mm
addr - len
addr
addr
len
len
if (!vma || addr <= vma->vm_start) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr - len;			}
!vma || addr <= vma->vm_start
!vma
vma
vma
addr <= vma->vm_start
addr
addr
vma->vm_start
vma
vma
vm_start
{				/* cache the address as a hint for next time */				return mm->free_area_cache = addr - len;			}
return mm->free_area_cache = addr - len;
mm->free_area_cache = addr - len
mm->free_area_cache
mm
mm
free_area_cache
addr - len
addr
addr
len
len
if (unlikely(mm->mmap_base < len))			goto bottomup;
unlikely(mm->mmap_base < len)
unlikely
unlikely
mm->mmap_base < len
mm->mmap_base
mm
mm
mmap_base
len
len
goto bottomup;
bottomup
addr = mm->mmap_base - len;
addr = mm->mmap_base - len
addr
addr
mm->mmap_base - len
mm->mmap_base
mm
mm
mmap_base
len
len
if (do_color_align)			addr = COLOUR_ALIGN_DOWN(addr, pgoff);
do_color_align
do_color_align
addr = COLOUR_ALIGN_DOWN(addr, pgoff);
addr = COLOUR_ALIGN_DOWN(addr, pgoff)
addr
addr
COLOUR_ALIGN_DOWN(addr, pgoff)
COLOUR_ALIGN_DOWN
COLOUR_ALIGN_DOWN
addr
addr
pgoff
pgoff
do {			/*			 * Lookup failure means no vma is above this address,			 * else if new region fits below vma->vm_start,			 * return with success:			 */			vma = find_vma(mm, addr);			if (likely(!vma || addr + len <= vma->vm_start)) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr;			}			/* remember the largest hole we saw so far */			if (addr + mm->cached_hole_size < vma->vm_start)				mm->cached_hole_size = vma->vm_start - addr;			/* try just below the current vma->vm_start */			addr = vma->vm_start - len;			if (do_color_align)				addr = COLOUR_ALIGN_DOWN(addr, pgoff);		} while (likely(len < vma->vm_start));
{			/*			 * Lookup failure means no vma is above this address,			 * else if new region fits below vma->vm_start,			 * return with success:			 */			vma = find_vma(mm, addr);			if (likely(!vma || addr + len <= vma->vm_start)) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr;			}			/* remember the largest hole we saw so far */			if (addr + mm->cached_hole_size < vma->vm_start)				mm->cached_hole_size = vma->vm_start - addr;			/* try just below the current vma->vm_start */			addr = vma->vm_start - len;			if (do_color_align)				addr = COLOUR_ALIGN_DOWN(addr, pgoff);		}
vma = find_vma(mm, addr);
vma = find_vma(mm, addr)
vma
vma
find_vma(mm, addr)
find_vma
find_vma
mm
mm
addr
addr
if (likely(!vma || addr + len <= vma->vm_start)) {				/* cache the address as a hint for next time */				return mm->free_area_cache = addr;			}
likely(!vma || addr + len <= vma->vm_start)
likely
likely
!vma || addr + len <= vma->vm_start
!vma
vma
vma
addr + len <= vma->vm_start
addr + len
addr
addr
len
len
vma->vm_start
vma
vma
vm_start
{				/* cache the address as a hint for next time */				return mm->free_area_cache = addr;			}
return mm->free_area_cache = addr;
mm->free_area_cache = addr
mm->free_area_cache
mm
mm
free_area_cache
addr
addr
if (addr + mm->cached_hole_size < vma->vm_start)				mm->cached_hole_size = vma->vm_start - addr;
addr + mm->cached_hole_size < vma->vm_start
addr + mm->cached_hole_size
addr
addr
mm->cached_hole_size
mm
mm
cached_hole_size
vma->vm_start
vma
vma
vm_start
mm->cached_hole_size = vma->vm_start - addr;
mm->cached_hole_size = vma->vm_start - addr
mm->cached_hole_size
mm
mm
cached_hole_size
vma->vm_start - addr
vma->vm_start
vma
vma
vm_start
addr
addr
addr = vma->vm_start - len;
addr = vma->vm_start - len
addr
addr
vma->vm_start - len
vma->vm_start
vma
vma
vm_start
len
len
if (do_color_align)				addr = COLOUR_ALIGN_DOWN(addr, pgoff);
do_color_align
do_color_align
addr = COLOUR_ALIGN_DOWN(addr, pgoff);
addr = COLOUR_ALIGN_DOWN(addr, pgoff)
addr
addr
COLOUR_ALIGN_DOWN(addr, pgoff)
COLOUR_ALIGN_DOWN
COLOUR_ALIGN_DOWN
addr
addr
pgoff
pgoff
likely(len < vma->vm_start)
likely
likely
len < vma->vm_start
len
len
vma->vm_start
vma
vma
vm_start
bottomup:		/*		 * A failed mmap() very likely causes application failure,		 * so fall back to the bottom-up function here. This scenario		 * can happen with large stack limits and large mmap()		 * allocations.		 */		mm->cached_hole_size = ~0UL;
bottomup
mm->cached_hole_size = ~0UL;
mm->cached_hole_size = ~0UL
mm->cached_hole_size
mm
mm
cached_hole_size
~0UL
0UL
mm->free_area_cache = TASK_UNMAPPED_BASE;
mm->free_area_cache = TASK_UNMAPPED_BASE
mm->free_area_cache
mm
mm
free_area_cache
TASK_UNMAPPED_BASE
TASK_UNMAPPED_BASE
addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags);
addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags)
addr
addr
arch_get_unmapped_area(filp, addr0, len, pgoff, flags)
arch_get_unmapped_area
arch_get_unmapped_area
filp
filp
addr0
addr0
len
len
pgoff
pgoff
flags
flags
mm->free_area_cache = mm->mmap_base;
mm->free_area_cache = mm->mmap_base
mm->free_area_cache
mm
mm
free_area_cache
mm->mmap_base
mm
mm
mmap_base
mm->cached_hole_size = ~0UL;
mm->cached_hole_size = ~0UL
mm->cached_hole_size
mm
mm
cached_hole_size
~0UL
0UL
return addr;
addr
addr
-----joern-----
(316,295,0)
(63,142,0)
(221,319,0)
(333,295,0)
(301,202,0)
(313,40,0)
(29,234,0)
(56,196,0)
(117,295,0)
(355,225,0)
(340,234,0)
(183,54,0)
(112,283,0)
(333,117,0)
(341,244,0)
(84,291,0)
(310,112,0)
(293,226,0)
(353,46,0)
(142,134,0)
(259,46,0)
(254,173,0)
(102,173,0)
(251,156,0)
(230,244,0)
(268,129,0)
(133,308,0)
(34,142,0)
(15,357,0)
(147,159,0)
(69,142,0)
(93,317,0)
(102,311,0)
(227,146,0)
(357,142,0)
(267,156,0)
(289,29,0)
(230,342,0)
(345,250,0)
(184,272,0)
(359,287,0)
(124,346,0)
(109,301,0)
(48,295,0)
(283,195,0)
(150,225,0)
(191,227,0)
(252,353,0)
(239,236,0)
(127,167,0)
(284,280,0)
(341,342,0)
(160,268,0)
(18,73,0)
(305,317,0)
(107,193,0)
(126,62,0)
(7,9,0)
(168,297,0)
(281,230,0)
(216,53,0)
(297,220,0)
(162,317,0)
(50,19,0)
(286,195,0)
(222,297,0)
(362,7,0)
(300,323,0)
(24,196,0)
(4,287,0)
(257,227,0)
(40,308,0)
(88,350,0)
(319,7,0)
(205,51,0)
(224,0,0)
(311,102,0)
(130,108,0)
(208,196,0)
(67,0,0)
(184,255,0)
(73,216,0)
(47,250,0)
(85,339,0)
(120,199,0)
(23,294,0)
(185,346,0)
(297,168,0)
(71,156,0)
(303,202,0)
(58,329,0)
(272,55,0)
(111,51,0)
(353,326,0)
(228,113,0)
(115,146,0)
(360,50,0)
(184,120,0)
(0,202,0)
(325,250,0)
(349,211,0)
(302,196,0)
(348,270,0)
(290,196,0)
(315,12,0)
(289,168,0)
(355,167,0)
(167,34,0)
(52,197,0)
(113,283,0)
(212,63,0)
(31,61,0)
(263,295,0)
(62,294,0)
(190,139,0)
(292,41,0)
(46,283,0)
(220,297,0)
(142,196,0)
(57,99,0)
(363,244,0)
(8,195,0)
(118,210,0)
(171,144,0)
(55,70,0)
(203,274,0)
(298,63,0)
(341,129,0)
(237,17,0)
(188,163,0)
(128,98,0)
(79,133,0)
(72,304,0)
(221,156,0)
(336,86,0)
(40,294,0)
(219,298,0)
(148,205,0)
(16,366,0)
(46,353,0)
(184,78,0)
(272,199,0)
(222,29,0)
(113,363,0)
(335,349,0)
(193,168,0)
(78,298,0)
(268,139,0)
(105,289,0)
(131,295,0)
(66,323,0)
(12,315,0)
(6,196,0)
(278,193,0)
(273,321,0)
(366,51,0)
(324,53,0)
(70,103,0)
(266,252,0)
(285,116,0)
(103,70,0)
(103,204,0)
(161,185,0)
(226,23,0)
(23,226,0)
(19,50,0)
(168,193,0)
(91,34,0)
(225,355,0)
(51,366,0)
(280,43,0)
(276,149,0)
(282,216,0)
(306,280,0)
(252,266,0)
(154,223,0)
(358,103,0)
(17,237,0)
(262,157,0)
(251,329,0)
(218,244,0)
(61,51,0)
(199,283,0)
(301,312,0)
(103,244,0)
(149,156,0)
(163,283,0)
(287,156,0)
(146,295,0)
(264,262,0)
(10,295,0)
(89,118,0)
(256,142,0)
(321,283,0)
(23,51,0)
(33,342,0)
(170,86,0)
(205,226,0)
(80,101,0)
(144,236,0)
(334,204,0)
(246,118,0)
(40,156,0)
(50,102,0)
(315,95,0)
(158,182,0)
(61,237,0)
(97,40,0)
(95,280,0)
(301,266,0)
(354,181,0)
(45,197,0)
(350,321,0)
(345,295,0)
(227,283,0)
(236,239,0)
(0,224,0)
(116,266,0)
(61,226,0)
(280,211,0)
(182,158,0)
(339,294,0)
(355,220,0)
(41,292,0)
(184,140,0)
(323,216,0)
(366,43,0)
(163,341,0)
(260,267,0)
(0,266,0)
(112,167,0)
(177,182,0)
(171,62,0)
(269,295,0)
(304,202,0)
(317,283,0)
(165,62,0)
(34,294,0)
(184,333,0)
(270,142,0)
(343,239,0)
(61,7,0)
(132,283,0)
(50,360,0)
(322,311,0)
(184,344,0)
(163,70,0)
(120,141,0)
(155,129,0)
(356,147,0)
(244,230,0)
(26,255,0)
(132,216,0)
(108,283,0)
(232,304,0)
(272,248,0)
(136,186,0)
(110,199,0)
(166,295,0)
(90,15,0)
(106,223,0)
(28,277,0)
(243,333,0)
(319,51,0)
(144,171,0)
(14,46,0)
(185,237,0)
(339,116,0)
(342,295,0)
(158,153,0)
(123,54,0)
(151,19,0)
(319,237,0)
(329,283,0)
(116,339,0)
(17,294,0)
(63,298,0)
(184,270,0)
(83,163,0)
(121,230,0)
(215,292,0)
(230,294,0)
(65,133,0)
(250,345,0)
(95,315,0)
(193,167,0)
(9,305,0)
(241,0,0)
(2,266,0)
(238,34,0)
(149,277,0)
(277,291,0)
(122,274,0)
(173,244,0)
(319,221,0)
(204,103,0)
(119,54,0)
(103,139,0)
(277,149,0)
(249,295,0)
(61,95,0)
(169,17,0)
(186,323,0)
(60,321,0)
(299,173,0)
(242,221,0)
(136,73,0)
(20,143,0)
(195,283,0)
(5,311,0)
(132,267,0)
(357,15,0)
(342,251,0)
(185,7,0)
(363,342,0)
(15,156,0)
(27,211,0)
(184,25,0)
(186,266,0)
(287,359,0)
(311,291,0)
(36,145,0)
(258,98,0)
(186,136,0)
(304,262,0)
(12,211,0)
(96,251,0)
(291,32,0)
(44,71,0)
(149,139,0)
(32,139,0)
(164,223,0)
(68,147,0)
(312,301,0)
(12,43,0)
(92,10,0)
(112,29,0)
(120,147,0)
(247,40,0)
(364,225,0)
(214,355,0)
(62,171,0)
(71,194,0)
(73,136,0)
(262,339,0)
(29,112,0)
(32,291,0)
(309,328,0)
(349,43,0)
(267,132,0)
(331,363,0)
(328,344,0)
(288,113,0)
(0,156,0)
(197,283,0)
(332,249,0)
(38,26,0)
(271,239,0)
(206,32,0)
(3,117,0)
(229,221,0)
(159,326,0)
(292,156,0)
(189,329,0)
(143,10,0)
(352,186,0)
(43,185,0)
(250,283,0)
(173,129,0)
(138,252,0)
(32,283,0)
(86,292,0)
(42,157,0)
(312,120,0)
(368,140,0)
(201,143,0)
(39,196,0)
(287,197,0)
(338,9,0)
(32,342,0)
(145,25,0)
(87,182,0)
(319,226,0)
(143,283,0)
(361,268,0)
(173,102,0)
(168,289,0)
(103,342,0)
(59,71,0)
(321,350,0)
(265,252,0)
(11,283,0)
(173,342,0)
(305,181,0)
(220,355,0)
(185,43,0)
(291,223,0)
(261,301,0)
(236,144,0)
(297,222,0)
(365,319,0)
(94,23,0)
(341,210,0)
(266,295,0)
(194,71,0)
(270,101,0)
(163,159,0)
(267,202,0)
(292,86,0)
(76,23,0)
(275,159,0)
(103,129,0)
(347,32,0)
(213,112,0)
(49,55,0)
(152,43,0)
(32,244,0)
(64,196,0)
(280,95,0)
(108,249,0)
(135,144,0)
(30,349,0)
(77,40,0)
(210,118,0)
(283,196,0)
(192,267,0)
(99,196,0)
(175,366,0)
(245,357,0)
(139,149,0)
(187,11,0)
(200,158,0)
(231,283,0)
(193,298,0)
(147,283,0)
(186,202,0)
(339,262,0)
(329,251,0)
(209,234,0)
(21,171,0)
(272,113,0)
(279,11,0)
(304,156,0)
(366,211,0)
(35,61,0)
(274,174,0)
(37,99,0)
(363,139,0)
(32,129,0)
(118,291,0)
(323,186,0)
(216,132,0)
(1,368,0)
(100,12,0)
(198,78,0)
(34,167,0)
(40,134,0)
(193,156,0)
(233,17,0)
(268,294,0)
(173,139,0)
(314,181,0)
(301,156,0)
(176,222,0)
(217,277,0)
(40,117,0)
(129,268,0)
(171,142,0)
(19,291,0)
(350,156,0)
(114,22,0)
(22,345,0)
(199,353,0)
(272,147,0)
(197,287,0)
(341,163,0)
(55,283,0)
(251,342,0)
(182,308,0)
(17,305,0)
(13,341,0)
(202,304,0)
(211,349,0)
(120,11,0)
(112,298,0)
(205,7,0)
(51,54,0)
(210,341,0)
(363,129,0)
(205,237,0)
(104,199,0)
(207,55,0)
(202,157,0)
(86,291,0)
(253,116,0)
(95,61,0)
(239,308,0)
(173,156,0)
(117,40,0)
(137,346,0)
(75,22,0)
(116,156,0)
(225,156,0)
(78,167,0)
(318,196,0)
(337,295,0)
(40,153,0)
(341,139,0)
(61,156,0)
(363,272,0)
(204,291,0)
(296,40,0)
(252,283,0)
(102,50,0)
(355,298,0)
(179,204,0)
(11,312,0)
(180,29,0)
(267,266,0)
(346,185,0)
(184,205,0)
(367,108,0)
(351,305,0)
(235,15,0)
(317,305,0)
(327,101,0)
(139,223,0)
(307,237,0)
(9,7,0)
(330,132,0)
(22,283,0)
(301,156,1)
(362,125,1)
(313,97,1)
(277,28,1)
(96,329,1)
(52,45,1)
(178,139,1)
(319,226,1)
(203,220,1)
(311,5,1)
(256,283,1)
(194,71,1)
(21,239,1)
(137,152,1)
(19,151,1)
(61,237,1)
(184,78,1)
(184,120,1)
(228,288,1)
(304,156,1)
(193,107,1)
(272,147,1)
(132,267,1)
(22,283,1)
(61,51,1)
(143,283,1)
(93,351,1)
(38,357,1)
(332,108,1)
(315,12,1)
(357,15,1)
(23,94,1)
(205,7,1)
(341,139,1)
(260,192,1)
(155,178,1)
(112,310,1)
(158,153,1)
(173,299,1)
(238,91,1)
(76,293,1)
(73,18,1)
(287,156,1)
(343,357,1)
(360,50,1)
(257,41,1)
(9,305,1)
(202,304,1)
(120,147,1)
(103,204,1)
(136,73,1)
(192,330,1)
(18,216,1)
(195,286,1)
(206,84,1)
(114,75,1)
(199,283,1)
(273,88,1)
(44,59,1)
(284,306,1)
(339,85,1)
(32,283,1)
(84,74,1)
(95,61,1)
(257,240,1)
(34,142,1)
(133,308,1)
(367,130,1)
(81,82,1)
(338,362,1)
(43,185,1)
(219,81,1)
(211,349,1)
(350,321,1)
(142,69,1)
(258,128,1)
(286,8,1)
(118,291,1)
(182,177,1)
(280,43,1)
(250,283,1)
(239,271,1)
(366,16,1)
(254,19,1)
(0,202,1)
(173,244,1)
(82,98,1)
(124,137,1)
(40,134,1)
(306,61,1)
(301,261,1)
(20,345,1)
(19,291,1)
(45,224,1)
(107,278,1)
(323,66,1)
(120,312,1)
(34,294,1)
(83,13,1)
(32,244,1)
(230,281,1)
(262,339,1)
(358,204,1)
(143,201,1)
(247,296,1)
(204,179,1)
(220,355,1)
(225,150,1)
(4,197,1)
(280,211,1)
(311,291,1)
(222,176,1)
(16,175,1)
(276,277,1)
(246,341,1)
(130,146,1)
(193,167,1)
(55,207,1)
(148,315,1)
(62,294,1)
(163,188,1)
(173,156,1)
(102,311,1)
(193,156,1)
(245,15,1)
(8,231,1)
(51,366,1)
(272,199,1)
(342,251,1)
(9,338,1)
(57,37,1)
(129,268,1)
(23,294,1)
(103,129,1)
(90,235,1)
(104,159,1)
(121,218,1)
(109,11,1)
(210,118,1)
(268,160,1)
(341,244,1)
(319,51,1)
(122,203,1)
(0,67,1)
(319,237,1)
(355,298,1)
(0,156,1)
(279,136,1)
(207,49,1)
(138,265,1)
(45,136,1)
(158,200,1)
(287,4,1)
(32,342,1)
(200,99,1)
(177,87,1)
(299,254,1)
(171,142,1)
(333,117,1)
(240,359,1)
(357,142,1)
(363,342,1)
(331,113,1)
(61,156,1)
(103,244,1)
(3,249,1)
(278,222,1)
(305,317,1)
(59,142,1)
(5,322,1)
(334,55,1)
(35,31,1)
(32,347,1)
(259,199,1)
(363,331,1)
(61,226,1)
(173,129,1)
(84,41,1)
(32,139,1)
(132,283,1)
(86,291,1)
(100,319,1)
(70,103,1)
(222,29,1)
(359,287,1)
(75,117,1)
(171,62,1)
(341,342,1)
(214,225,1)
(320,51,1)
(159,275,1)
(188,83,1)
(232,303,1)
(322,173,1)
(321,60,1)
(252,283,1)
(272,363,1)
(351,274,1)
(72,232,1)
(355,225,1)
(112,283,1)
(87,200,1)
(349,43,1)
(266,252,1)
(108,367,1)
(185,161,1)
(203,82,1)
(78,198,1)
(272,55,1)
(261,109,1)
(161,346,1)
(49,210,1)
(7,9,1)
(25,145,1)
(197,52,1)
(40,308,1)
(304,72,1)
(363,139,1)
(98,258,1)
(185,7,1)
(289,29,1)
(167,34,1)
(128,158,1)
(241,172,1)
(364,29,1)
(335,30,1)
(40,294,1)
(149,276,1)
(151,291,1)
(116,266,1)
(169,233,1)
(95,280,1)
(189,33,1)
(61,35,1)
(115,227,1)
(28,217,1)
(136,186,1)
(22,114,1)
(184,344,1)
(220,297,1)
(205,226,1)
(97,77,1)
(46,283,1)
(271,343,1)
(270,348,1)
(84,244,1)
(251,329,1)
(68,356,1)
(349,211,1)
(116,156,1)
(274,122,1)
(301,266,1)
(237,17,1)
(282,224,1)
(17,169,1)
(296,3,1)
(216,132,1)
(160,361,1)
(40,153,1)
(227,283,1)
(118,89,1)
(339,116,1)
(33,359,1)
(292,156,1)
(2,350,1)
(243,10,1)
(303,262,1)
(356,350,1)
(62,126,1)
(86,170,1)
(230,294,1)
(180,298,1)
(14,259,1)
(31,12,1)
(184,255,1)
(2,353,1)
(66,300,1)
(78,298,1)
(89,246,1)
(236,144,1)
(186,323,1)
(173,139,1)
(165,21,1)
(162,93,1)
(92,143,1)
(242,229,1)
(1,319,1)
(329,58,1)
(297,168,1)
(317,283,1)
(218,74,1)
(236,239,1)
(190,70,1)
(288,360,1)
(333,243,1)
(32,129,1)
(330,282,1)
(297,222,1)
(235,133,1)
(103,139,1)
(300,352,1)
(50,102,1)
(285,253,1)
(152,7,1)
(225,156,1)
(50,19,1)
(250,325,1)
(355,214,1)
(224,0,1)
(168,193,1)
(30,27,1)
(341,129,1)
(27,226,1)
(229,211,1)
(110,104,1)
(163,70,1)
(58,189,1)
(144,135,1)
(150,364,1)
(170,336,1)
(71,44,1)
(180,167,1)
(71,156,1)
(272,113,1)
(168,289,1)
(268,139,1)
(251,156,1)
(205,51,1)
(319,7,1)
(133,65,1)
(345,250,1)
(158,182,1)
(103,342,1)
(185,237,1)
(102,173,1)
(140,368,1)
(105,193,1)
(319,365,1)
(46,14,1)
(341,163,1)
(113,283,1)
(317,162,1)
(366,43,1)
(366,211,1)
(112,167,1)
(10,92,1)
(346,124,1)
(304,262,1)
(251,96,1)
(368,1,1)
(329,283,1)
(184,205,1)
(125,305,1)
(126,165,1)
(309,194,1)
(11,283,1)
(186,202,1)
(221,242,1)
(79,194,1)
(267,202,1)
(184,272,1)
(63,212,1)
(108,283,1)
(191,257,1)
(350,156,1)
(116,285,1)
(47,22,1)
(91,127,1)
(67,241,1)
(190,210,1)
(301,202,1)
(145,36,1)
(204,291,1)
(29,112,1)
(199,110,1)
(212,219,1)
(36,236,1)
(287,197,1)
(323,216,1)
(336,215,1)
(112,298,1)
(176,355,1)
(241,202,1)
(213,180,1)
(270,142,1)
(267,260,1)
(347,206,1)
(344,328,1)
(197,283,1)
(63,142,1)
(230,342,1)
(319,221,1)
(289,105,1)
(163,283,1)
(321,283,1)
(244,230,1)
(186,266,1)
(12,100,1)
(37,133,1)
(252,353,1)
(325,47,1)
(361,155,1)
(175,111,1)
(179,334,1)
(349,335,1)
(73,216,1)
(60,273,1)
(40,313,1)
(215,129,1)
(264,172,1)
(11,187,1)
(352,73,1)
(201,20,1)
(163,159,1)
(215,178,1)
(210,341,1)
(65,79,1)
(255,26,1)
(205,148,1)
(310,213,1)
(69,256,1)
(217,190,1)
(184,140,1)
(34,238,1)
(184,25,1)
(0,266,1)
(88,274,1)
(267,156,1)
(55,283,1)
(120,11,1)
(149,277,1)
(274,174,1)
(363,129,1)
(185,346,1)
(265,2,1)
(127,81,1)
(328,309,1)
(152,237,1)
(281,121,1)
(233,307,1)
(283,195,1)
(291,32,1)
(193,298,1)
(184,270,1)
(61,7,1)
(227,191,1)
(221,156,1)
(292,86,1)
(147,68,1)
(173,342,1)
(27,320,1)
(120,199,1)
(249,332,1)
(298,63,1)
(293,320,1)
(280,284,1)
(239,308,1)
(113,228,1)
(198,220,1)
(13,360,1)
(315,95,1)
(149,156,1)
(226,23,1)
(17,294,1)
(135,171,1)
(363,244,1)
(205,237,1)
(99,57,1)
(142,134,1)
(41,292,1)
(139,149,1)
(85,116,1)
(253,264,1)
(26,38,1)
(103,358,1)
(187,279,1)
(17,305,1)
(172,266,1)
(23,51,1)
(184,333,1)
(147,283,1)
(12,211,1)
(229,43,1)
(312,301,1)
(182,308,1)
(15,90,1)
(348,236,1)
(144,171,1)
(307,125,1)
(252,138,1)
(111,315,1)
(353,46,1)
(77,247,1)
(275,147,1)
(267,266,1)
(117,40,1)
(78,167,1)
(94,76,1)
(146,115,1)
(357,245,1)
(339,294,1)
(82,158,1)
(365,221,1)
(277,291,1)
(12,43,1)
(40,156,1)
(15,156,1)
(355,167,1)
(74,342,1)
(268,294,1)
(77,359,2)
(242,274,2)
(291,359,2)
(73,216,2)
(280,12,2)
(193,298,2)
(9,125,2)
(360,50,2)
(145,236,2)
(312,301,2)
(275,350,2)
(13,360,2)
(280,211,2)
(251,156,2)
(103,244,2)
(111,315,2)
(345,41,2)
(23,320,2)
(244,74,2)
(261,136,2)
(130,359,2)
(272,360,2)
(219,81,2)
(200,133,2)
(184,140,2)
(132,224,2)
(344,194,2)
(27,315,2)
(110,350,2)
(363,342,2)
(329,283,2)
(16,315,2)
(268,294,2)
(230,342,2)
(262,339,2)
(272,55,2)
(185,274,2)
(167,34,2)
(112,167,2)
(361,178,2)
(41,360,2)
(0,156,2)
(325,359,2)
(304,262,2)
(22,283,2)
(365,274,2)
(26,357,2)
(270,142,2)
(204,210,2)
(355,298,2)
(88,274,2)
(187,136,2)
(355,82,2)
(47,359,2)
(61,12,2)
(133,194,2)
(341,139,2)
(301,136,2)
(227,41,2)
(311,19,2)
(239,308,2)
(34,142,2)
(159,350,2)
(297,355,2)
(94,320,2)
(202,304,2)
(198,220,2)
(143,41,2)
(205,51,2)
(136,186,2)
(108,41,2)
(55,283,2)
(323,73,2)
(2,274,2)
(184,272,2)
(289,222,2)
(40,156,2)
(40,134,2)
(102,173,2)
(268,139,2)
(249,41,2)
(38,357,2)
(57,133,2)
(173,156,2)
(214,82,2)
(122,82,2)
(319,221,2)
(0,202,2)
(40,359,2)
(86,360,2)
(350,156,2)
(250,359,2)
(63,142,2)
(55,210,2)
(19,41,2)
(283,195,2)
(9,305,2)
(178,360,2)
(345,359,2)
(3,41,2)
(353,46,2)
(274,82,2)
(104,350,2)
(329,359,2)
(151,359,2)
(224,274,2)
(171,239,2)
(272,113,2)
(201,359,2)
(40,308,2)
(190,360,2)
(127,81,2)
(132,267,2)
(78,220,2)
(74,359,2)
(242,315,2)
(29,112,2)
(349,211,2)
(292,360,2)
(304,156,2)
(368,319,2)
(163,283,2)
(250,283,2)
(25,236,2)
(184,255,2)
(319,237,2)
(172,274,2)
(359,224,2)
(85,172,2)
(205,315,2)
(235,133,2)
(319,7,2)
(82,133,2)
(45,136,2)
(19,291,2)
(357,133,2)
(186,266,2)
(319,226,2)
(363,244,2)
(229,315,2)
(158,153,2)
(277,291,2)
(247,41,2)
(311,291,2)
(43,274,2)
(62,294,2)
(170,360,2)
(194,71,2)
(255,357,2)
(12,211,2)
(366,315,2)
(89,360,2)
(341,360,2)
(199,283,2)
(296,41,2)
(46,283,2)
(284,12,2)
(220,82,2)
(307,125,2)
(218,74,2)
(252,353,2)
(292,156,2)
(7,125,2)
(197,224,2)
(32,359,2)
(103,204,2)
(355,167,2)
(103,139,2)
(359,136,2)
(32,342,2)
(205,7,2)
(108,283,2)
(298,63,2)
(349,315,2)
(173,139,2)
(363,139,2)
(341,342,2)
(70,103,2)
(185,346,2)
(298,81,2)
(331,360,2)
(217,360,2)
(12,43,2)
(240,359,2)
(236,144,2)
(63,81,2)
(11,283,2)
(317,283,2)
(135,239,2)
(102,311,2)
(152,274,2)
(246,360,2)
(210,118,2)
(184,205,2)
(175,315,2)
(91,81,2)
(46,350,2)
(32,244,2)
(243,359,2)
(257,41,2)
(146,41,2)
(40,294,2)
(313,359,2)
(348,236,2)
(363,129,2)
(117,359,2)
(109,136,2)
(31,12,2)
(177,200,2)
(351,274,2)
(300,73,2)
(87,200,2)
(36,236,2)
(279,136,2)
(259,350,2)
(125,274,2)
(61,156,2)
(222,29,2)
(37,133,2)
(126,239,2)
(20,41,2)
(78,167,2)
(79,194,2)
(221,156,2)
(287,197,2)
(23,51,2)
(121,74,2)
(258,158,2)
(92,359,2)
(332,41,2)
(15,156,2)
(297,168,2)
(197,136,2)
(176,355,2)
(321,283,2)
(167,81,2)
(301,156,2)
(319,274,2)
(247,359,2)
(197,283,2)
(352,73,2)
(17,305,2)
(144,171,2)
(147,350,2)
(367,41,2)
(188,360,2)
(73,224,2)
(115,41,2)
(265,274,2)
(346,274,2)
(225,82,2)
(339,294,2)
(332,359,2)
(180,82,2)
(251,359,2)
(333,359,2)
(303,172,2)
(120,11,2)
(15,133,2)
(266,274,2)
(51,366,2)
(270,236,2)
(173,342,2)
(163,70,2)
(19,359,2)
(83,360,2)
(132,283,2)
(100,319,2)
(115,359,2)
(205,237,2)
(7,9,2)
(184,333,2)
(282,224,2)
(144,239,2)
(304,172,2)
(95,280,2)
(47,41,2)
(220,297,2)
(360,41,2)
(315,95,2)
(221,315,2)
(49,210,2)
(289,29,2)
(205,226,2)
(322,19,2)
(113,283,2)
(349,43,2)
(236,239,2)
(296,359,2)
(75,359,2)
(22,41,2)
(250,41,2)
(158,133,2)
(33,359,2)
(96,359,2)
(14,350,2)
(357,142,2)
(116,156,2)
(199,350,2)
(334,210,2)
(140,319,2)
(4,136,2)
(41,292,2)
(17,125,2)
(67,274,2)
(169,125,2)
(216,224,2)
(112,82,2)
(61,51,2)
(225,156,2)
(77,41,2)
(52,224,2)
(102,19,2)
(182,308,2)
(45,224,2)
(206,41,2)
(254,19,2)
(5,19,2)
(233,125,2)
(129,178,2)
(133,308,2)
(1,319,2)
(12,319,2)
(320,315,2)
(84,359,2)
(184,344,2)
(313,41,2)
(99,133,2)
(23,294,2)
(61,226,2)
(325,41,2)
(345,250,2)
(333,117,2)
(75,41,2)
(226,23,2)
(230,74,2)
(220,355,2)
(336,360,2)
(280,43,2)
(103,210,2)
(203,82,2)
(72,172,2)
(32,139,2)
(201,41,2)
(292,86,2)
(301,266,2)
(281,74,2)
(309,194,2)
(241,274,2)
(186,202,2)
(273,274,2)
(78,298,2)
(224,0,2)
(353,350,2)
(60,274,2)
(118,360,2)
(62,239,2)
(116,266,2)
(267,156,2)
(364,82,2)
(86,291,2)
(211,349,2)
(186,73,2)
(212,81,2)
(237,17,2)
(252,274,2)
(139,149,2)
(120,136,2)
(71,156,2)
(171,142,2)
(341,163,2)
(30,315,2)
(299,19,2)
(32,129,2)
(21,239,2)
(257,359,2)
(58,359,2)
(65,194,2)
(185,237,2)
(204,291,2)
(161,274,2)
(117,41,2)
(0,266,2)
(272,147,2)
(52,136,2)
(130,41,2)
(171,62,2)
(227,283,2)
(243,41,2)
(274,174,2)
(232,172,2)
(173,244,2)
(306,12,2)
(76,320,2)
(260,224,2)
(122,220,2)
(312,136,2)
(35,12,2)
(186,323,2)
(149,360,2)
(350,274,2)
(139,360,2)
(50,19,2)
(95,61,2)
(210,360,2)
(268,178,2)
(98,158,2)
(158,182,2)
(173,19,2)
(236,357,2)
(40,41,2)
(112,298,2)
(366,211,2)
(342,251,2)
(142,134,2)
(189,359,2)
(20,359,2)
(367,359,2)
(285,172,2)
(168,193,2)
(328,194,2)
(50,359,2)
(229,274,2)
(366,43,2)
(97,41,2)
(10,359,2)
(124,274,2)
(287,136,2)
(335,315,2)
(191,41,2)
(61,237,2)
(29,82,2)
(210,341,2)
(143,359,2)
(147,283,2)
(203,220,2)
(215,360,2)
(0,274,2)
(202,172,2)
(267,202,2)
(274,220,2)
(165,239,2)
(228,360,2)
(356,350,2)
(116,172,2)
(184,78,2)
(193,222,2)
(193,167,2)
(315,319,2)
(184,270,2)
(143,283,2)
(271,357,2)
(237,125,2)
(18,224,2)
(118,291,2)
(319,315,2)
(10,41,2)
(103,342,2)
(310,82,2)
(148,315,2)
(238,81,2)
(173,129,2)
(359,287,2)
(213,82,2)
(272,199,2)
(357,15,2)
(355,225,2)
(34,81,2)
(95,12,2)
(184,25,2)
(293,320,2)
(262,172,2)
(341,129,2)
(230,294,2)
(333,41,2)
(350,321,2)
(222,355,2)
(315,12,2)
(90,133,2)
(136,73,2)
(249,359,2)
(149,156,2)
(341,244,2)
(146,359,2)
(264,172,2)
(276,360,2)
(129,268,2)
(277,360,2)
(163,159,2)
(362,125,2)
(137,274,2)
(107,222,2)
(32,283,2)
(245,133,2)
(114,41,2)
(239,357,2)
(358,210,2)
(128,158,2)
(70,210,2)
(151,41,2)
(191,359,2)
(192,224,2)
(226,320,2)
(211,315,2)
(193,156,2)
(330,224,2)
(136,224,2)
(22,359,2)
(339,172,2)
(297,222,2)
(347,41,2)
(184,120,2)
(93,274,2)
(163,360,2)
(278,222,2)
(252,283,2)
(108,359,2)
(32,41,2)
(112,283,2)
(43,185,2)
(323,216,2)
(114,359,2)
(342,359,2)
(168,289,2)
(34,294,2)
(321,274,2)
(92,41,2)
(185,7,2)
(160,178,2)
(287,156,2)
(267,224,2)
(317,274,2)
(182,200,2)
(150,82,2)
(97,359,2)
(50,102,2)
(113,360,2)
(120,147,2)
(291,32,2)
(343,357,2)
(267,266,2)
(84,41,2)
(50,41,2)
(339,116,2)
(11,136,2)
(28,360,2)
(120,199,2)
(68,350,2)
(40,153,2)
(138,274,2)
(162,274,2)
(338,125,2)
(61,7,2)
(155,178,2)
(221,274,2)
(227,359,2)
(4,224,2)
(66,73,2)
(103,129,2)
(291,41,2)
(305,274,2)
(149,277,2)
(319,51,2)
(360,359,2)
(301,202,2)
(305,317,2)
(17,294,2)
(168,222,2)
(365,315,2)
(253,172,2)
(216,132,2)
(105,222,2)
(266,252,2)
(244,230,2)
(251,329,2)
(51,315,2)
(117,40,2)
(81,82,2)
(288,360,2)
(363,360,2)
(347,359,2)
(3,359,2)
(206,359,2)
(287,224,2)
(207,210,2)
(179,210,2)
-----------------------------------
(0,addr > len)
(1,ENOMEM)
(2,addr)
(3,addr)
(4,len)
(5,vm_start)
(6,if (dir == UP)
(7,addr = PAGE_ALIGN(addr)
(8,current)
(9,PAGE_ALIGN(addr)
(10,mm->cached_hole_size = ~0UL)
(11,mm->free_area_cache)
(12,!vma)
(13,addr)
(14,mmap_base)
(15,TASK_SIZE - len)
(16,vm_end)
(17,COLOUR_ALIGN(addr, pgoff)
(18,vma)
(19,!vma)
(20,mm)
(21,addr)
(22,mm->free_area_cache)
(23,COLOUR_ALIGN(addr, pgoff)
(24,if (filp || (flags & MAP_SHARED)
(25,return -EINVAL;)
(26,-EINVAL)
(27,vma)
(28,vm_start)
(29,vma = find_vma(mm, addr)
(30,vma)
(31,addr)
(32,find_vma(mm, addr)
(33,addr)
(34,COLOUR_ALIGN(addr, pgoff)
(35,len)
(36,EINVAL)
(37,do_color_align)
(38,EINVAL)
(39,if (flags & MAP_FIXED)
(40,arch_get_unmapped_area(filp, addr0, len, pgoff, flags)
(41,likely(len < vma->vm_start)
(42,base)
(43,vma = find_vma(current->mm, addr)
(44,TASK_SIZE)
(45,mm)
(46,mm->mmap_base)
(47,mm)
(48,if (unlikely(mm->mmap_base < len)
(49,mm)
(50,!vma || addr + len <= vma->vm_start)
(51,addr = vma->vm_end)
(52,mmap_base)
(53,)
(54,)
(55,mm->cached_hole_size)
(56,do_color_align)
(57,0)
(58,mmap_base)
(59,len)
(60,cached_hole_size)
(61,addr + len)
(62,pgoff << PAGE_SHIFT)
(63,PAGE_ALIGN(addr)
(64,if (addr)
(65,MAP_FIXED)
(66,vm_start)
(67,len)
(68,cached_hole_size)
(69,addr0)
(70,mm->cached_hole_size = vma->vm_start - addr)
(71,len > TASK_SIZE)
(72,len)
(73,!vma)
(74,do_color_align)
(75,mm)
(76,addr)
(77,len)
(78,return addr;)
(79,flags)
(80,if (TASK_SIZE - len < addr)
(81,do_color_align)
(82,addr)
(83,mm)
(84,vma)
(85,pgoff)
(86,vma->vm_start)
(87,flags)
(88,len)
(89,vm_start)
(90,len)
(91,addr)
(92,~0UL)
(93,mm)
(94,pgoff)
(95,addr + len <= vma->vm_start)
(96,len)
(97,pgoff)
(98,do_color_align = 1)
(99,do_color_align = 0)
(100,vma)
(101,)
(102,addr + len <= vma->vm_start)
(103,vma->vm_start - addr)
(104,mm)
(105,vma)
(106,if (likely(!vma || addr + len <= vma->vm_start)
(107,len)
(108,mm->free_area_cache)
(109,addr)
(110,free_area_cache)
(111,addr)
(112,find_vma(mm, addr)
(113,mm->free_area_cache)
(114,free_area_cache)
(115,~0UL)
(116,addr - len)
(117,addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags)
(118,vma->vm_start)
(119,if (TASK_SIZE - len < addr)
(120,return mm->free_area_cache = addr - len;)
(121,addr)
(122,UP)
(123,if (do_color_align)
(124,mm)
(125,do_color_align)
(126,PAGE_SHIFT)
(127,addr)
(128,do_color_align)
(129,addr = COLOUR_ALIGN_DOWN(addr, pgoff)
(130,mm)
(131,if (len <= mm->cached_hole_size)
(132,find_vma(mm, addr - len)
(133,flags & MAP_FIXED)
(134,unsigned long addr0)
(135,shm_align_mask)
(136,!vma || addr <= vma->vm_start)
(137,current)
(138,free_area_cache)
(139,addr = vma->vm_start - len)
(140,return -ENOMEM;)
(141,)
(142,addr = addr0)
(143,mm->cached_hole_size)
(144,(addr - (pgoff << PAGE_SHIFT)
(145,-EINVAL)
(146,mm->cached_hole_size = ~0UL)
(147,mm->cached_hole_size)
(148,addr)
(149,vma->vm_start - len)
(150,len)
(151,vma)
(152,vma)
(153,struct file *filp)
(154,if (addr + mm->cached_hole_size < vma->vm_start)
(155,addr)
(156,unsigned long len)
(157,)
(158,filp || (flags & MAP_SHARED)
(159,mm->cached_hole_size = 0)
(160,pgoff)
(161,addr)
(162,mmap_base)
(163,mm->cached_hole_size)
(164,if (do_color_align)
(165,pgoff)
(166,do)
(167,addr = COLOUR_ALIGN(addr, pgoff)
(168,addr + len <= vm_start_gap(vma)
(169,pgoff)
(170,vm_start)
(171,addr - (pgoff << PAGE_SHIFT)
(172,do_color_align)
(173,addr + len)
(174,enum mmap_allocation_direction dir)
(175,vma)
(176,vma)
(177,MAP_SHARED)
(178,do_color_align)
(179,vm_start)
(180,vma)
(181,)
(182,flags & MAP_SHARED)
(183,if (!vma || addr + len <= vma->vm_start)
(184,RET)
(185,find_vma(current->mm, addr)
(186,addr <= vma->vm_start)
(187,free_area_cache)
(188,cached_hole_size)
(189,mm)
(190,addr)
(191,cached_hole_size)
(192,addr)
(193,addr + len)
(194,unlikely(len > TASK_SIZE)
(195,current->mm)
(196,)
(197,mm->mmap_base)
(198,addr)
(199,mm->free_area_cache)
(200,filp)
(201,cached_hole_size)
(202,addr = base + len)
(203,dir)
(204,vma->vm_start)
(205,return addr;)
(206,mm)
(207,cached_hole_size)
(208,vma)
(209,if (do_color_align)
(210,addr + mm->cached_hole_size < vma->vm_start)
(211,vma = vma->vm_next)
(212,addr)
(213,mm)
(214,addr)
(215,len)
(216,vma = find_vma(mm, addr - len)
(217,vma)
(218,addr)
(219,addr)
(220,TASK_SIZE - len >= addr &&\n\\n\\t\\t    (!vma || addr + len <= vm_start_gap(vma)
(221,TASK_SIZE - len)
(222,!vma)
(223,)
(224,likely(addr > len)
(225,TASK_SIZE - len)
(226,addr = COLOUR_ALIGN(addr, pgoff)
(227,mm->cached_hole_size)
(228,free_area_cache)
(229,TASK_SIZE)
(230,COLOUR_ALIGN_DOWN(addr, pgoff)
(231,mm)
(232,base)
(233,addr)
(234,)
(235,TASK_SIZE)
(236,(flags & MAP_SHARED)
(237,addr = COLOUR_ALIGN(addr, pgoff)
(238,pgoff)
(239,flags & MAP_SHARED)
(240,goto bottomup;)
(241,addr)
(242,len)
(243,addr)
(244,addr = COLOUR_ALIGN_DOWN(addr, pgoff)
(245,addr)
(246,vma)
(247,addr0)
(248,)
(249,mm->free_area_cache = TASK_UNMAPPED_BASE)
(250,mm->mmap_base)
(251,mm->mmap_base - len)
(252,mm->free_area_cache)
(253,addr)
(254,addr)
(255,return -EINVAL;)
(256,addr)
(257,mm)
(258,1)
(259,mm)
(260,len)
(261,len)
(262,base =\n\\n\\t\\t\\t\\tCOLOUR_ALIGN_DOWN(addr - len, pgoff)
(263,bottomup:)
(264,base)
(265,mm)
(266,addr = mm->free_area_cache)
(267,addr - len)
(268,COLOUR_ALIGN_DOWN(addr, pgoff)
(269,if (do_color_align)
(270,return addr;)
(271,MAP_SHARED)
(272,return mm->free_area_cache = addr;)
(273,mm)
(274,dir == UP)
(275,0)
(276,len)
(277,vma->vm_start)
(278,addr)
(279,mm)
(280,vma->vm_start)
(281,pgoff)
(282,vma)
(283,*mm = current->mm)
(284,vm_start)
(285,len)
(286,mm)
(287,mm->mmap_base < len)
(288,mm)
(289,vm_start_gap(vma)
(290,if (unlikely(len > TASK_SIZE)
(291,vma = find_vma(mm, addr)
(292,len < vma->vm_start)
(293,addr)
(294,unsigned long pgoff)
(295,)
(296,filp)
(297,!vma || addr + len <= vm_start_gap(vma)
(298,addr = PAGE_ALIGN(addr)
(299,len)
(300,vma)
(301,addr - len)
(302,addr)
(303,addr)
(304,base + len)
(305,addr = mm->mmap_base)
(306,vma)
(307,addr)
(308,unsigned long flags)
(309,ENOMEM)
(310,addr)
(311,vma->vm_start)
(312,mm->free_area_cache = addr - len)
(313,flags)
(314,for (vma = find_vma(current->mm, addr)
(315,!vma || addr + len <= vma->vm_start)
(316,if (do_color_align)
(317,mm->mmap_base)
(318,mm)
(319,TASK_SIZE - len < addr)
(320,do_color_align)
(321,mm->cached_hole_size)
(322,vma)
(323,vma->vm_start)
(324,if (!vma || addr <= vma->vm_start)
(325,mmap_base)
(326,)
(327,if ((flags & MAP_SHARED)
(328,-ENOMEM)
(329,mm->mmap_base)
(330,mm)
(331,addr)
(332,TASK_UNMAPPED_BASE)
(333,return addr;)
(334,vma)
(335,vm_next)
(336,vma)
(337,if (likely(addr > len)
(338,addr)
(339,COLOUR_ALIGN_DOWN(addr - len, pgoff)
(340,if (TASK_SIZE - len >= addr &&\n\\n\\t\\t    (!vma || addr + len <= vm_start_gap(vma)
(341,addr + mm->cached_hole_size)
(342,addr = mm->mmap_base - len)
(343,flags)
(344,return -ENOMEM;)
(345,mm->free_area_cache = mm->mmap_base)
(346,current->mm)
(347,addr)
(348,addr)
(349,vma->vm_next)
(350,len <= mm->cached_hole_size)
(351,addr)
(352,addr)
(353,mm->free_area_cache = mm->mmap_base)
(354,if (do_color_align)
(355,TASK_SIZE - len >= addr)
(356,mm)
(357,TASK_SIZE - len < addr)
(358,addr)
(359,unlikely(mm->mmap_base < len)
(360,likely(!vma || addr + len <= vma->vm_start)
(361,addr)
(362,addr)
(363,mm->free_area_cache = addr)
(364,TASK_SIZE)
(365,addr)
(366,vma->vm_end)
(367,free_area_cache)
(368,-ENOMEM)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^