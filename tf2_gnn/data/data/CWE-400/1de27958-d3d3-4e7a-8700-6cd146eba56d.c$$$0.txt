-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(5==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
39,40
39,41
39,42
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
48,53
49,50
50,51
50,52
51,52
53,54
53,55
54,55
54,56
56,57
58,59
58,60
59,60
61,62
61,63
62,63
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
103,104
103,105
104,105
-----nextToken-----
2,4,9,11,15,16,19,20,25,26,29,30,35,37,38,42,45,47,52,55,57,60,63,66,67,71,73,78,80,84,86,88,92,94,98,100,105,106
-----computeFrom-----
13,14
13,15
18,19
18,20
23,24
23,25
28,29
28,30
40,41
40,42
50,51
50,52
61,62
61,63
69,70
69,71
-----guardedBy-----
47,88
42,63
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
5==5
5
5
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
5==5
5
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(53,16,0)
(40,18,0)
(53,13,0)
(50,47,0)
(12,41,0)
(35,39,0)
(34,14,0)
(53,23,0)
(20,23,0)
(41,20,0)
(0,16,0)
(31,47,0)
(52,18,0)
(49,19,0)
(20,41,0)
(33,2,0)
(39,50,0)
(7,49,0)
(20,50,0)
(16,18,0)
(40,16,0)
(44,47,0)
(25,0,0)
(17,22,0)
(21,52,0)
(22,26,0)
(24,50,0)
(45,34,0)
(8,34,0)
(9,20,0)
(48,10,0)
(36,52,0)
(29,6,0)
(15,50,0)
(43,47,0)
(1,40,0)
(32,2,0)
(16,53,0)
(20,49,0)
(46,0,0)
(39,35,0)
(10,29,0)
(51,37,0)
(38,49,0)
(13,53,0)
(52,16,0)
(42,16,0)
(28,42,0)
(11,39,0)
(27,16,0)
(23,53,0)
(3,37,0)
(30,18,0)
(42,18,0)
(29,10,0)
(4,35,0)
(39,49,0)
(23,20,0)
(50,15,1)
(20,41,1)
(33,32,1)
(53,23,1)
(16,53,1)
(23,20,1)
(39,50,1)
(22,17,1)
(32,37,1)
(4,11,1)
(48,0,1)
(42,28,1)
(49,7,1)
(1,42,1)
(9,27,1)
(40,16,1)
(21,36,1)
(35,4,1)
(39,49,1)
(52,21,1)
(5,2,1)
(10,48,1)
(36,29,1)
(51,3,1)
(0,16,1)
(27,39,1)
(41,12,1)
(40,1,1)
(3,50,1)
(42,16,1)
(5,40,1)
(39,35,1)
(11,2,1)
(36,0,1)
(46,16,1)
(20,49,1)
(15,24,1)
(0,25,1)
(32,49,1)
(25,46,1)
(28,52,1)
(12,9,1)
(2,33,1)
(53,13,1)
(37,51,1)
(5,22,1)
(52,16,1)
(7,38,1)
(29,10,1)
(38,37,1)
(20,50,1)
(17,39,1)
(9,39,2)
(53,13,2)
(39,2,2)
(38,37,2)
(23,20,2)
(10,0,2)
(22,39,2)
(49,37,2)
(11,2,2)
(27,39,2)
(21,39,2)
(53,23,2)
(46,39,2)
(20,39,2)
(29,0,2)
(7,37,2)
(4,2,2)
(39,49,2)
(41,39,2)
(42,39,2)
(23,39,2)
(16,53,2)
(35,2,2)
(36,39,2)
(39,35,2)
(0,16,2)
(25,39,2)
(0,39,2)
(48,0,2)
(39,50,2)
(20,50,2)
(40,39,2)
(52,16,2)
(16,39,2)
(42,16,2)
(12,39,2)
(20,49,2)
(1,39,2)
(52,39,2)
(17,39,2)
(40,16,2)
(29,10,2)
(53,39,2)
(20,41,2)
(28,39,2)
-----------------------------------
(0,myString == NULL)
(1,myString)
(2,5==5)
(3,5)
(4,HELLO_STRING)
(5,RET)
(6,)
(7,20)
(8,if (data > strlen(HELLO_STRING)
(9,data)
(10,-1)
(11,data)
(12,char)
(13,char *)
(14,)
(15,0)
(16,myString = (char *)
(17,"Input is less than the length of the source string")
(18,)
(19,)
(20,data*sizeof(char)
(21,HELLO_STRING)
(22,printLine("Input is less than the length of the source string")
(23,malloc(data*sizeof(char)
(24,data)
(25,NULL)
(26,)
(27,myString)
(28,myString)
(29,exit(-1)
(30,if (myString == NULL)
(31,if(5==5)
(32,5)
(33,5)
(34,)
(35,strlen(HELLO_STRING)
(36,myString)
(37,5==5)
(38,data)
(39,data > strlen(HELLO_STRING)
(40,free(myString)
(41,sizeof(char)
(42,printLine(myString)
(43,data)
(44,if(5==5)
(45,myString)
(46,myString)
(47,)
(48,1)
(49,data = 20)
(50,data = 0)
(51,5)
(52,strcpy(myString, HELLO_STRING)
(53,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^