-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    {
        size_t dataCopy = data;
        size_t data = dataCopy;
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
17,21
17,22
17,23
18,19
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
38,39
39,40
39,41
41,42
41,43
43,44
44,45
46,47
46,48
47,48
47,49
47,50
47,51
47,52
47,53
47,54
47,55
47,56
47,57
47,58
48,49
49,50
49,51
50,51
52,53
52,54
52,55
52,56
53,54
55,56
57,58
59,60
61,62
61,63
62,63
62,64
63,64
65,66
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
74,75
77,78
78,79
79,80
81,82
82,83
82,84
83,84
83,85
84,85
87,88
89,90
90,91
90,92
91,92
91,93
92,93
92,94
93,94
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
104,106
105,106
108,109
108,110
109,110
111,112
113,114
113,115
114,115
114,116
115,116
115,117
115,118
115,119
116,117
118,119
120,121
120,122
121,122
121,123
122,123
124,125
126,127
127,128
129,130
130,131
131,132
133,134
135,136
137,138
138,139
138,140
139,140
141,142
141,143
141,144
141,145
141,146
142,143
144,145
146,147
148,149
148,150
149,150
153,154
153,155
154,155
154,156
155,156
155,157
156,157
158,159
160,161
160,162
161,162
164,165
166,167
167,168
167,169
168,169
168,170
169,170
171,172
174,175
175,176
175,177
176,177
178,179
178,180
178,181
178,182
179,180
181,182
183,184
187,188
187,189
188,189
188,190
189,190
191,192
193,194
194,195
195,196
195,197
196,197
198,199
200,201
200,202
200,203
201,202
202,203
202,204
203,204
205,206
205,207
207,208
208,209
210,211
211,212
211,213
212,213
214,215
214,216
216,217
217,218
219,220
219,221
220,221
221,222
221,223
223,224
223,225
226,227
226,228
226,229
227,228
227,229
228,229
230,231
230,232
231,232
233,234
235,236
235,237
235,238
235,239
235,240
236,237
237,238
237,239
238,239
240,241
240,242
241,242
241,243
243,244
245,246
245,247
246,247
248,249
248,250
249,250
251,252
252,253
252,254
255,256
255,257
256,257
256,258
257,258
259,260
261,262
262,263
263,264
263,265
264,265
266,267
268,269
269,270
269,271
269,272
270,271
272,273
274,275
276,277
277,278
277,279
278,279
280,281
282,283
283,284
283,285
284,285
286,287
288,289
289,290
290,291
290,292
291,292
-----nextToken-----
2,4,9,11,15,16,20,22,26,28,32,34,37,40,42,45,51,54,56,58,60,64,66,68,72,75,76,80,85,86,88,94,95,96,99,101,106,107,110,112,117,119,123,125,128,132,134,136,140,143,145,147,150,151,152,157,159,162,163,165,170,172,173,177,180,182,184,185,186,190,192,197,199,204,206,209,213,215,218,222,224,225,229,232,234,239,242,244,247,250,253,254,258,260,265,267,271,273,275,279,281,285,287,292,293
-----computeFrom-----
13,14
13,15
49,50
49,51
62,63
62,64
82,83
82,84
90,91
90,92
103,104
103,105
114,115
114,116
138,139
138,140
148,149
148,150
154,155
154,156
155,156
155,157
160,161
160,162
167,168
167,169
175,176
175,177
188,189
188,190
227,228
227,229
237,238
237,239
248,249
248,250
256,257
256,258
-----guardedBy-----
190,199
234,275
229,250
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_bad(){    size_t data;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    {        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_bad
{    size_t data;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    {        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t dataCopy = data;
size_t dataCopy = data;
size_t
size_t
dataCopy = data
dataCopy
= data
data
data
size_t data = dataCopy;
size_t data = dataCopy;
size_t
size_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(122,125,0)
(146,100,0)
(142,64,0)
(148,155,0)
(81,36,0)
(157,64,0)
(102,70,0)
(85,12,0)
(158,12,0)
(27,57,0)
(28,41,0)
(42,57,0)
(34,150,0)
(2,104,0)
(119,160,0)
(54,114,0)
(80,150,0)
(22,13,0)
(48,155,0)
(13,42,0)
(170,110,0)
(45,41,0)
(105,101,0)
(67,151,0)
(140,159,0)
(8,20,0)
(118,43,0)
(134,25,0)
(100,155,0)
(149,60,0)
(113,24,0)
(126,128,0)
(115,36,0)
(75,64,0)
(127,37,0)
(109,132,0)
(103,64,0)
(146,98,0)
(133,16,0)
(21,158,0)
(49,33,0)
(29,168,0)
(163,114,0)
(101,67,0)
(33,169,0)
(111,145,0)
(51,100,0)
(158,160,0)
(99,71,0)
(160,57,0)
(152,111,0)
(140,101,0)
(69,158,0)
(162,115,0)
(105,159,0)
(16,164,0)
(97,13,0)
(77,159,0)
(50,37,0)
(53,64,0)
(63,160,0)
(84,12,0)
(135,113,0)
(7,139,0)
(151,70,0)
(88,70,0)
(144,91,0)
(104,46,0)
(148,20,0)
(32,148,0)
(15,57,0)
(24,137,0)
(120,16,0)
(70,88,0)
(128,160,0)
(63,52,0)
(76,13,0)
(67,101,0)
(164,89,0)
(132,101,0)
(151,67,0)
(90,89,0)
(141,57,0)
(20,37,0)
(111,42,0)
(3,88,0)
(44,64,0)
(94,57,0)
(87,115,0)
(117,150,0)
(108,129,0)
(80,125,0)
(112,155,0)
(123,80,0)
(40,0,0)
(136,122,0)
(139,7,0)
(156,168,0)
(70,100,0)
(47,64,0)
(106,100,0)
(82,149,0)
(20,57,0)
(13,22,0)
(41,160,0)
(58,169,0)
(98,146,0)
(5,64,0)
(143,64,0)
(62,59,0)
(86,98,0)
(158,42,0)
(153,16,0)
(129,149,0)
(43,36,0)
(150,80,0)
(16,120,0)
(96,15,0)
(131,155,0)
(12,158,0)
(165,64,0)
(116,6,0)
(65,128,0)
(161,0,0)
(11,148,0)
(149,129,0)
(79,42,0)
(72,53,0)
(147,37,0)
(9,139,0)
(7,57,0)
(36,43,0)
(22,59,0)
(164,16,0)
(59,22,0)
(130,153,0)
(36,81,0)
(42,158,0)
(19,59,0)
(39,158,0)
(55,169,0)
(64,168,0)
(100,148,0)
(16,153,0)
(89,164,0)
(125,122,0)
(124,140,0)
(33,160,0)
(67,107,0)
(145,57,0)
(95,131,0)
(154,6,0)
(149,57,0)
(148,29,0)
(125,57,0)
(18,23,0)
(107,67,0)
(37,20,0)
(114,15,0)
(26,101,0)
(16,160,0)
(61,164,0)
(23,57,0)
(63,169,0)
(166,29,0)
(1,146,0)
(66,63,0)
(155,168,0)
(60,149,0)
(164,61,0)
(68,145,0)
(83,74,0)
(160,41,0)
(121,57,0)
(10,120,0)
(169,64,0)
(6,7,0)
(132,159,0)
(78,81,0)
(73,23,0)
(35,33,0)
(101,159,0)
(38,105,0)
(92,111,0)
(36,115,0)
(31,105,0)
(24,113,0)
(0,101,0)
(4,41,0)
(14,60,0)
(59,42,0)
(138,29,0)
(167,131,0)
(93,53,0)
(70,151,0)
(146,98,1)
(62,13,1)
(14,82,1)
(153,130,1)
(111,152,1)
(6,154,1)
(33,169,1)
(35,49,1)
(51,106,1)
(84,39,1)
(128,160,1)
(132,101,1)
(158,12,1)
(119,23,1)
(17,20,1)
(148,11,1)
(85,84,1)
(72,93,1)
(133,7,1)
(39,21,1)
(100,51,1)
(76,42,1)
(90,133,1)
(116,125,1)
(78,115,1)
(16,153,1)
(19,62,1)
(68,111,1)
(16,164,1)
(80,150,1)
(154,116,1)
(160,41,1)
(102,26,1)
(24,113,1)
(38,0,1)
(43,36,1)
(36,115,1)
(43,118,1)
(32,56,1)
(152,92,1)
(45,28,1)
(63,169,1)
(33,160,1)
(162,17,1)
(100,148,1)
(34,117,1)
(135,0,1)
(22,13,1)
(125,122,1)
(120,10,1)
(123,150,1)
(58,55,1)
(111,42,1)
(59,19,1)
(124,132,1)
(0,161,1)
(3,102,1)
(49,170,1)
(109,105,1)
(140,101,1)
(69,12,1)
(23,18,1)
(150,34,1)
(36,81,1)
(49,83,1)
(148,29,1)
(149,60,1)
(89,90,1)
(10,16,1)
(12,85,1)
(164,61,1)
(67,107,1)
(65,126,1)
(70,88,1)
(140,124,1)
(38,24,1)
(130,164,1)
(28,4,1)
(98,86,1)
(31,38,1)
(22,59,1)
(170,22,1)
(37,127,1)
(13,97,1)
(1,100,1)
(166,138,1)
(139,9,1)
(4,119,1)
(128,65,1)
(113,135,1)
(30,104,1)
(93,29,1)
(70,100,1)
(106,148,1)
(158,69,1)
(60,14,1)
(105,101,1)
(101,67,1)
(63,160,1)
(118,36,1)
(148,20,1)
(54,163,1)
(97,76,1)
(83,43,1)
(144,128,1)
(15,96,1)
(53,72,1)
(18,73,1)
(56,63,1)
(120,16,1)
(145,68,1)
(79,120,1)
(82,129,1)
(147,8,1)
(63,66,1)
(158,160,1)
(92,22,1)
(132,109,1)
(104,2,1)
(146,100,1)
(126,160,1)
(40,101,1)
(149,129,1)
(105,31,1)
(80,123,1)
(29,166,1)
(122,136,1)
(129,108,1)
(21,79,1)
(32,134,1)
(169,58,1)
(161,40,1)
(59,42,1)
(81,78,1)
(49,144,1)
(86,1,1)
(127,50,1)
(115,87,1)
(11,32,1)
(16,160,1)
(7,139,1)
(56,33,1)
(134,56,1)
(114,54,1)
(0,101,1)
(96,114,1)
(136,80,1)
(50,147,1)
(8,145,1)
(164,89,1)
(49,17,1)
(42,158,1)
(108,128,1)
(41,45,1)
(55,53,1)
(151,70,1)
(99,120,1)
(2,146,1)
(33,35,1)
(49,99,1)
(162,169,1)
(117,15,1)
(87,162,1)
(9,6,1)
(30,140,1)
(20,37,1)
(66,33,1)
(88,3,1)
(13,42,1)
(67,151,1)
(26,146,1)
(73,43,1)
(163,149,1)
(149,129,2)
(164,61,2)
(70,100,2)
(67,151,2)
(140,146,2)
(158,12,2)
(73,43,2)
(132,101,2)
(114,128,2)
(100,148,2)
(82,128,2)
(158,120,2)
(16,153,2)
(16,160,2)
(84,120,2)
(97,120,2)
(9,128,2)
(105,101,2)
(37,22,2)
(8,22,2)
(28,43,2)
(62,13,2)
(65,43,2)
(128,160,2)
(68,22,2)
(101,67,2)
(149,128,2)
(102,146,2)
(79,120,2)
(36,81,2)
(119,43,2)
(146,100,2)
(125,128,2)
(50,22,2)
(38,146,2)
(16,164,2)
(115,17,2)
(22,120,2)
(10,128,2)
(15,128,2)
(24,113,2)
(7,128,2)
(163,128,2)
(42,158,2)
(130,128,2)
(96,128,2)
(140,101,2)
(14,128,2)
(151,70,2)
(20,37,2)
(105,146,2)
(104,146,2)
(127,22,2)
(31,146,2)
(43,17,2)
(160,41,2)
(22,59,2)
(162,17,2)
(70,146,2)
(126,43,2)
(7,139,2)
(154,128,2)
(59,13,2)
(128,43,2)
(118,17,2)
(78,17,2)
(135,0,2)
(22,13,2)
(133,128,2)
(113,0,2)
(109,146,2)
(13,120,2)
(36,115,2)
(85,120,2)
(80,150,2)
(158,160,2)
(108,128,2)
(45,43,2)
(83,43,2)
(19,13,2)
(139,128,2)
(76,120,2)
(151,146,2)
(146,98,2)
(42,120,2)
(67,107,2)
(36,17,2)
(66,33,2)
(160,43,2)
(120,128,2)
(0,146,2)
(111,42,2)
(134,56,2)
(88,146,2)
(2,146,2)
(0,101,2)
(33,160,2)
(67,146,2)
(70,88,2)
(17,22,2)
(164,89,2)
(40,146,2)
(92,22,2)
(123,128,2)
(4,43,2)
(80,128,2)
(150,128,2)
(164,128,2)
(148,29,2)
(99,120,2)
(6,128,2)
(87,17,2)
(18,43,2)
(90,128,2)
(170,22,2)
(59,42,2)
(26,146,2)
(21,120,2)
(63,33,2)
(129,128,2)
(12,120,2)
(3,146,2)
(33,169,2)
(81,17,2)
(111,22,2)
(41,43,2)
(63,160,2)
(144,128,2)
(69,120,2)
(116,128,2)
(60,128,2)
(24,0,2)
(125,122,2)
(117,128,2)
(43,36,2)
(153,128,2)
(122,128,2)
(101,146,2)
(145,22,2)
(54,128,2)
(39,120,2)
(34,128,2)
(63,169,2)
(161,146,2)
(20,22,2)
(23,43,2)
(16,128,2)
(152,22,2)
(148,20,2)
(149,60,2)
(13,42,2)
(120,16,2)
(136,128,2)
(89,128,2)
(132,146,2)
(124,146,2)
(147,22,2)
-----------------------------------
(0,myString == NULL)
(1,data)
(2,"Input is less than the length of the source string")
(3,char)
(4,AF_INET)
(5,wsaDataInit)
(6,service.sin_port)
(7,service.sin_port = htons(TCP_PORT)
(8,data)
(9,TCP_PORT)
(10,SOCKET_ERROR)
(11,data)
(12,CHAR_ARRAY_SIZE - 1)
(13,recvResult == SOCKET_ERROR)
(14,service)
(15,service.sin_family = AF_INET)
(16,connect(connectSocket, (struct sockaddr*)
(17,0)
(18,1)
(19,0)
(20,data = strtoul(inputBuffer, NULL, 0)
(21,connectSocket)
(22,recvResult == SOCKET_ERROR || recvResult == 0)
(23,wsaDataInit = 1)
(24,exit(-1)
(25,)
(26,myString)
(27,if (connect(connectSocket, (struct sockaddr*)
(28,SOCK_STREAM)
(29,data = 0)
(30,RET)
(31,HELLO_STRING)
(32,dataCopy)
(33,connectSocket != INVALID_SOCKET)
(34,sin_addr)
(35,INVALID_SOCKET)
(36,WSAStartup(MAKEWORD(2,2)
(37,strtoul(inputBuffer, NULL, 0)
(38,myString)
(39,inputBuffer)
(40,myString)
(41,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(42,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(43,WSAStartup(MAKEWORD(2,2)
(44,if (wsaDataInit)
(45,IPPROTO_TCP)
(46,)
(47,recvResult)
(48,dataCopy)
(49,connectSocket)
(50,NULL)
(51,dataCopy)
(52,)
(53,wsaDataInit = 0)
(54,sin_family)
(55,connectSocket)
(56,wsaDataInit)
(57,)
(58,INVALID_SOCKET)
(59,recvResult == 0)
(60,sizeof(service)
(61,struct sockaddr*)
(62,recvResult)
(63,CLOSE_SOCKET(connectSocket)
(64,)
(65,INVALID_SOCKET)
(66,connectSocket)
(67,(char *)
(68,\'\\0\')
(69,0)
(70,data*sizeof(char)
(71,)
(72,0)
(73,wsaDataInit)
(74,)
(75,do)
(76,recvResult)
(77,if (myString == NULL)
(78,wsaData)
(79,recvResult)
(80,service.sin_addr.s_addr)
(81,&wsaData)
(82,0)
(83,break;)
(84,CHAR_ARRAY_SIZE)
(85,1)
(86,HELLO_STRING)
(87,2)
(88,sizeof(char)
(89,&service)
(90,service)
(91,)
(92,inputBuffer)
(93,wsaDataInit)
(94,if (WSAStartup(MAKEWORD(2,2)
(95,myString)
(96,AF_INET)
(97,SOCKET_ERROR)
(98,strlen(HELLO_STRING)
(99,break;)
(100,data = dataCopy)
(101,myString = (char *)
(102,data)
(103,connectSocket)
(104,printLine("Input is less than the length of the source string")
(105,strcpy(myString, HELLO_STRING)
(106,data)
(107,char *)
(108,service)
(109,myString)
(110,)
(111,inputBuffer[recvResult])
(112,data)
(113,-1)
(114,service.sin_family)
(115,MAKEWORD(2,2)
(116,service)
(117,service)
(118,NO_ERROR)
(119,connectSocket)
(120,connect(connectSocket, (struct sockaddr*)
(121,if (connectSocket == INVALID_SOCKET)
(122,inet_addr(IP_ADDRESS)
(123,s_addr)
(124,myString)
(125,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(126,connectSocket)
(127,0)
(128,connectSocket == INVALID_SOCKET)
(129,&service)
(130,service)
(131,)
(132,printLine(myString)
(133,connectSocket)
(134,WSACleanup()
(135,1)
(136,IP_ADDRESS)
(137,)
(138,data)
(139,htons(TCP_PORT)
(140,free(myString)
(141,if (recvResult == SOCKET_ERROR || recvResult == 0)
(142,wsaData)
(143,if (connectSocket != INVALID_SOCKET)
(144,break;)
(145,inputBuffer[recvResult] = \'\\0\')
(146,data > strlen(HELLO_STRING)
(147,inputBuffer)
(148,dataCopy = data)
(149,memset(&service, 0, sizeof(service)
(150,service.sin_addr)
(151,malloc(data*sizeof(char)
(152,recvResult)
(153,sizeof(service)
(154,sin_port)
(155,)
(156,data)
(157,inputBuffer)
(158,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(159,)
(160,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(161,NULL)
(162,2)
(163,service)
(164,(struct sockaddr*)
(165,service)
(166,0)
(167,if (data > strlen(HELLO_STRING)
(168,)
(169,connectSocket = INVALID_SOCKET)
(170,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^