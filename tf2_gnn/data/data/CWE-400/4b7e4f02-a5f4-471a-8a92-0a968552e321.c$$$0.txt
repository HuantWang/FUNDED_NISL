-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(globalFive==5)
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    if(globalFive==5)
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
28,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
48,49
48,50
49,50
49,51
50,51
53,54
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,29,30,32,36,39,41,45,47,51,52,57,59
-----computeFrom-----
13,14
13,15
19,20
19,21
34,35
34,36
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(globalFive==5)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(globalFive==5)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(globalFive==5)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(globalFive==5)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
globalFive==5
globalFive
globalFive
5
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalFive==5)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
globalFive==5
globalFive
globalFive
5
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(11,9,0)
(0,21,0)
(6,4,0)
(18,8,0)
(6,12,0)
(23,4,0)
(8,7,0)
(24,4,0)
(4,8,0)
(3,18,0)
(15,6,0)
(4,24,0)
(5,1,0)
(12,1,0)
(13,21,0)
(10,12,0)
(22,1,0)
(18,4,0)
(2,24,0)
(17,12,0)
(14,8,0)
(19,1,0)
(20,9,0)
(6,16,0)
(21,13,1)
(2,23,1)
(25,21,1)
(6,15,1)
(20,12,1)
(18,3,1)
(0,18,1)
(6,4,1)
(11,20,1)
(12,10,1)
(10,17,1)
(14,9,1)
(0,9,1)
(15,21,1)
(3,4,1)
(23,14,1)
(4,24,1)
(18,4,1)
(9,11,1)
(24,2,1)
(6,12,1)
(25,6,1)
(13,0,1)
(23,9,2)
(18,9,2)
(4,24,2)
(4,9,2)
(3,9,2)
(6,4,2)
(14,9,2)
(6,21,2)
(15,21,2)
(2,9,2)
(6,12,2)
(24,9,2)
(18,4,2)
-----------------------------------
(0,globalFive)
(1,)
(2,myString)
(3,data)
(4,data = wcsdup(myString)
(5,data)
(6,free(data)
(7,)
(8,)
(9,globalFive==5)
(10,NULL)
(11,5)
(12,data = NULL)
(13,5)
(14,"myString")
(15,data)
(16,)
(17,data)
(18,printWLine(data)
(19,if(globalFive==5)
(20,globalFive)
(21,globalFive==5)
(22,if(globalFive==5)
(23,data)
(24,wcsdup(myString)
(25,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^