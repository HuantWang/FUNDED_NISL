-----label-----
1
-----code-----
void
limRejectAssociation(tpAniSirGlobal pMac, tSirMacAddr peerAddr, tANI_U8 subType,
                     tANI_U8 addPreAuthContext, tAniAuthType authType,
                     tANI_U16 staId, tANI_U8 deleteSta, tSirResultCodes rCode, tpPESession psessionEntry )
{
    tpDphHashNode       pStaDs;

    limLog(pMac, LOG1, FL("Sessionid: %d authType: %d subType: %d "
           "addPreAuthContext: %d staId: %d deleteSta: %d rCode : %d "
           "peerAddr: "MAC_ADDRESS_STR),psessionEntry->peSessionId,
           authType, subType, addPreAuthContext, staId, deleteSta, rCode,
           MAC_ADDR_ARRAY(peerAddr));

    if (addPreAuthContext)
    {
        // Create entry for this STA in pre-auth list
        struct tLimPreAuthNode *pAuthNode;

        pAuthNode = limAcquireFreePreAuthNode(pMac, &pMac->lim.gLimPreAuthTimerTable);

        if (pAuthNode)
        {
            vos_mem_copy((tANI_U8 *) pAuthNode->peerMacAddr,
                          peerAddr,
                          sizeof(tSirMacAddr));
            pAuthNode->fTimerStarted = 0;
            pAuthNode->mlmState = eLIM_MLM_AUTHENTICATED_STATE;
            pAuthNode->authType = (tAniAuthType) authType;
            pAuthNode->timestamp = vos_timer_get_system_ticks();
            limAddPreAuthNode(pMac, pAuthNode);
        }
    }

    if (deleteSta == true)
    {
        pStaDs = dphGetHashEntry(pMac, staId, &psessionEntry->dph.dphHashTable);

        if (pStaDs == NULL)
        {
            limLog(pMac, LOGW,
                   FL("No STA context, yet rejecting Association"));

            return;
        }

        /**
         * Trigger cleanup.
         */
        pStaDs->mlmStaContext.cleanupTrigger = eLIM_REASSOC_REJECT;

        // Receive path cleanup
        limCleanupRxPath(pMac, pStaDs, psessionEntry);

        // Send Re/Association Response with
        // status code to requesting STA.
        limSendAssocRspMgmtFrame(pMac,
                                 rCode,
                                 0,
                                 peerAddr,
                                 subType, 0,psessionEntry);

        if ( psessionEntry->parsedAssocReq[pStaDs->assocId] != NULL)
        {
            // Assoction confirmation is complete, free the copy of association request frame
            if ( ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame)
            {
                vos_mem_free(((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame);
                ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame = NULL;
            }
            vos_mem_free(psessionEntry->parsedAssocReq[pStaDs->assocId]);
            psessionEntry->parsedAssocReq[pStaDs->assocId] = NULL;
        }
    }
    else
    {
        limSendAssocRspMgmtFrame(pMac,
                                 eSIR_MAC_MAX_ASSOC_STA_REACHED_STATUS,
                                 1,
                                 peerAddr,
                                 subType, 0,psessionEntry);
        // Log error
        limLog(pMac, LOGW,
           FL("received Re/Assoc req when max associated STAs reached from "));
        limPrintMacAddr(pMac, peerAddr, LOGW);
        limSendSmeMaxAssocExceededNtf(pMac, peerAddr, psessionEntry->smeSessionId);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
3,13
5,6
5,7
6,7
8,9
10,11
10,12
11,12
13,14
15,16
15,17
16,17
18,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
61,63
61,64
62,63
63,64
63,65
64,65
66,67
66,68
69,70
70,71
70,72
71,72
73,74
73,75
73,76
74,75
76,77
78,79
79,80
79,81
80,81
80,82
81,82
85,86
85,87
86,87
88,89
88,90
88,91
88,92
88,93
88,94
89,90
90,91
90,92
90,93
90,94
91,92
93,94
93,95
94,95
94,96
95,96
97,98
99,100
99,101
100,101
103,104
105,106
106,107
106,108
107,108
110,111
111,112
111,113
112,113
112,114
113,114
117,118
118,119
118,120
119,120
119,121
120,121
123,124
125,126
126,127
126,128
127,128
127,129
128,129
131,132
131,133
132,133
132,134
133,134
136,137
138,139
139,140
139,141
140,141
140,142
141,142
144,145
145,146
147,148
148,149
148,150
148,151
149,150
151,152
153,154
155,156
155,157
155,158
156,157
156,158
157,158
160,161
160,162
160,163
160,164
160,165
160,166
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
166,167
168,169
170,171
172,173
173,174
173,175
174,175
174,176
175,176
179,180
179,181
180,181
180,182
181,182
183,184
185,186
185,187
186,187
187,188
187,189
187,190
187,191
188,189
190,191
192,193
194,195
194,196
195,196
199,200
200,201
200,202
201,202
201,203
202,203
202,204
203,204
207,208
209,210
210,211
210,212
210,213
210,214
211,212
213,214
215,216
217,218
219,220
220,221
220,222
220,223
220,224
220,225
220,226
220,227
220,228
221,222
223,224
225,226
228,229
230,231
233,234
235,236
235,237
236,237
236,238
237,238
237,239
238,239
238,240
239,240
242,243
242,244
243,244
246,247
248,249
248,250
248,251
249,250
249,251
250,251
250,252
251,252
252,253
252,254
253,254
254,255
256,257
256,258
257,258
257,259
258,259
261,262
261,263
262,263
266,267
266,268
267,268
268,269
268,270
269,270
271,272
271,273
272,273
273,274
273,275
274,275
275,276
277,278
277,279
278,279
278,280
279,280
282,283
282,284
283,284
287,288
288,289
288,290
289,290
289,291
290,291
291,292
291,293
292,293
293,294
295,296
295,297
296,297
296,298
297,298
300,301
300,302
301,302
305,306
307,308
308,309
308,310
309,310
311,312
311,313
312,313
312,314
313,314
316,317
316,318
317,318
320,321
321,322
321,323
322,323
322,324
323,324
323,325
324,325
327,328
327,329
328,329
331,332
333,334
333,335
333,336
333,337
334,335
335,336
335,337
335,338
335,339
335,340
335,341
335,342
335,343
336,337
338,339
340,341
343,344
345,346
348,349
350,351
351,352
351,353
351,354
351,355
352,353
354,355
356,357
358,359
358,360
359,360
362,363
363,364
363,365
363,366
363,367
364,365
366,367
368,369
370,371
372,373
373,374
373,375
373,376
373,377
374,375
376,377
378,379
380,381
380,382
381,382
-----nextToken-----
2,4,7,9,12,14,17,19,22,24,27,29,32,34,37,39,42,44,47,49,54,56,60,65,67,68,72,75,77,82,83,84,87,92,96,98,101,102,104,108,109,114,115,116,121,122,124,129,130,134,135,137,142,143,146,150,152,154,158,159,164,167,169,171,176,177,178,182,184,189,191,193,196,197,198,204,205,206,208,212,214,216,218,222,224,226,227,229,231,232,234,240,241,244,245,247,255,259,260,263,264,265,270,276,280,281,284,285,286,294,298,299,302,303,304,306,310,314,315,318,319,325,326,329,330,332,337,339,341,342,344,346,347,349,353,355,357,360,361,365,367,369,371,375,377,379,382,383
-----computeFrom-----
70,71
70,72
111,112
111,113
118,119
118,120
126,127
126,128
139,140
139,141
156,157
156,158
162,163
162,164
180,181
180,182
200,201
200,202
236,237
236,238
288,289
288,290
321,322
321,323
-----guardedBy-----
241,326
245,330
247,332
240,325
244,329
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ProblemStatement;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;UnaryExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;UnaryExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;UnaryExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
voidlimRejectAssociation(tpAniSirGlobal pMac, tSirMacAddr peerAddr, tANI_U8 subType,                     tANI_U8 addPreAuthContext, tAniAuthType authType,                     tANI_U16 staId, tANI_U8 deleteSta, tSirResultCodes rCode, tpPESession psessionEntry ){    tpDphHashNode       pStaDs;    limLog(pMac, LOG1, FL("Sessionid: %d authType: %d subType: %d "           "addPreAuthContext: %d staId: %d deleteSta: %d rCode : %d "           "peerAddr: "MAC_ADDRESS_STR),psessionEntry->peSessionId,           authType, subType, addPreAuthContext, staId, deleteSta, rCode,           MAC_ADDR_ARRAY(peerAddr));    if (addPreAuthContext)    {        // Create entry for this STA in pre-auth list        struct tLimPreAuthNode *pAuthNode;        pAuthNode = limAcquireFreePreAuthNode(pMac, &pMac->lim.gLimPreAuthTimerTable);        if (pAuthNode)        {            vos_mem_copy((tANI_U8 *) pAuthNode->peerMacAddr,                          peerAddr,                          sizeof(tSirMacAddr));            pAuthNode->fTimerStarted = 0;            pAuthNode->mlmState = eLIM_MLM_AUTHENTICATED_STATE;            pAuthNode->authType = (tAniAuthType) authType;            pAuthNode->timestamp = vos_timer_get_system_ticks();            limAddPreAuthNode(pMac, pAuthNode);        }    }    if (deleteSta == true)    {        pStaDs = dphGetHashEntry(pMac, staId, &psessionEntry->dph.dphHashTable);        if (pStaDs == NULL)        {            limLog(pMac, LOGW,                   FL("No STA context, yet rejecting Association"));            return;        }        /**         * Trigger cleanup.         */        pStaDs->mlmStaContext.cleanupTrigger = eLIM_REASSOC_REJECT;        // Receive path cleanup        limCleanupRxPath(pMac, pStaDs, psessionEntry);        // Send Re/Association Response with        // status code to requesting STA.        limSendAssocRspMgmtFrame(pMac,                                 rCode,                                 0,                                 peerAddr,                                 subType, 0,psessionEntry);        if ( psessionEntry->parsedAssocReq[pStaDs->assocId] != NULL)        {            // Assoction confirmation is complete, free the copy of association request frame            if ( ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame)            {                vos_mem_free(((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame);                ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame = NULL;            }            vos_mem_free(psessionEntry->parsedAssocReq[pStaDs->assocId]);            psessionEntry->parsedAssocReq[pStaDs->assocId] = NULL;        }    }    else    {        limSendAssocRspMgmtFrame(pMac,                                 eSIR_MAC_MAX_ASSOC_STA_REACHED_STATUS,                                 1,                                 peerAddr,                                 subType, 0,psessionEntry);        // Log error        limLog(pMac, LOGW,           FL("received Re/Assoc req when max associated STAs reached from "));        limPrintMacAddr(pMac, peerAddr, LOGW);        limSendSmeMaxAssocExceededNtf(pMac, peerAddr, psessionEntry->smeSessionId);    }}
void
limRejectAssociation(tpAniSirGlobal pMac, tSirMacAddr peerAddr, tANI_U8 subType,                     tANI_U8 addPreAuthContext, tAniAuthType authType,                     tANI_U16 staId, tANI_U8 deleteSta, tSirResultCodes rCode, tpPESession psessionEntry )
limRejectAssociation
tpAniSirGlobal pMac
tpAniSirGlobal
tpAniSirGlobal
pMac
pMac
tSirMacAddr peerAddr
tSirMacAddr
tSirMacAddr
peerAddr
peerAddr
tANI_U8 subType
tANI_U8
tANI_U8
subType
subType
tANI_U8 addPreAuthContext
tANI_U8
tANI_U8
addPreAuthContext
addPreAuthContext
tAniAuthType authType
tAniAuthType
tAniAuthType
authType
authType
tANI_U16 staId
tANI_U16
tANI_U16
staId
staId
tANI_U8 deleteSta
tANI_U8
tANI_U8
deleteSta
deleteSta
tSirResultCodes rCode
tSirResultCodes
tSirResultCodes
rCode
rCode
tpPESession psessionEntry
tpPESession
tpPESession
psessionEntry
psessionEntry
{    tpDphHashNode       pStaDs;    limLog(pMac, LOG1, FL("Sessionid: %d authType: %d subType: %d "           "addPreAuthContext: %d staId: %d deleteSta: %d rCode : %d "           "peerAddr: "MAC_ADDRESS_STR),psessionEntry->peSessionId,           authType, subType, addPreAuthContext, staId, deleteSta, rCode,           MAC_ADDR_ARRAY(peerAddr));    if (addPreAuthContext)    {        // Create entry for this STA in pre-auth list        struct tLimPreAuthNode *pAuthNode;        pAuthNode = limAcquireFreePreAuthNode(pMac, &pMac->lim.gLimPreAuthTimerTable);        if (pAuthNode)        {            vos_mem_copy((tANI_U8 *) pAuthNode->peerMacAddr,                          peerAddr,                          sizeof(tSirMacAddr));            pAuthNode->fTimerStarted = 0;            pAuthNode->mlmState = eLIM_MLM_AUTHENTICATED_STATE;            pAuthNode->authType = (tAniAuthType) authType;            pAuthNode->timestamp = vos_timer_get_system_ticks();            limAddPreAuthNode(pMac, pAuthNode);        }    }    if (deleteSta == true)    {        pStaDs = dphGetHashEntry(pMac, staId, &psessionEntry->dph.dphHashTable);        if (pStaDs == NULL)        {            limLog(pMac, LOGW,                   FL("No STA context, yet rejecting Association"));            return;        }        /**         * Trigger cleanup.         */        pStaDs->mlmStaContext.cleanupTrigger = eLIM_REASSOC_REJECT;        // Receive path cleanup        limCleanupRxPath(pMac, pStaDs, psessionEntry);        // Send Re/Association Response with        // status code to requesting STA.        limSendAssocRspMgmtFrame(pMac,                                 rCode,                                 0,                                 peerAddr,                                 subType, 0,psessionEntry);        if ( psessionEntry->parsedAssocReq[pStaDs->assocId] != NULL)        {            // Assoction confirmation is complete, free the copy of association request frame            if ( ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame)            {                vos_mem_free(((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame);                ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame = NULL;            }            vos_mem_free(psessionEntry->parsedAssocReq[pStaDs->assocId]);            psessionEntry->parsedAssocReq[pStaDs->assocId] = NULL;        }    }    else    {        limSendAssocRspMgmtFrame(pMac,                                 eSIR_MAC_MAX_ASSOC_STA_REACHED_STATUS,                                 1,                                 peerAddr,                                 subType, 0,psessionEntry);        // Log error        limLog(pMac, LOGW,           FL("received Re/Assoc req when max associated STAs reached from "));        limPrintMacAddr(pMac, peerAddr, LOGW);        limSendSmeMaxAssocExceededNtf(pMac, peerAddr, psessionEntry->smeSessionId);    }}
tpDphHashNode       pStaDs;
tpDphHashNode       pStaDs;
tpDphHashNode
tpDphHashNode
pStaDs
pStaDs
limLog(pMac, LOG1, FL("Sessionid: %d authType: %d subType: %d "           "addPreAuthContext: %d staId: %d deleteSta: %d rCode : %d "           "peerAddr: "MAC_ADDRESS_STR),psessionEntry->peSessionId,           authType, subType, addPreAuthContext, staId, deleteSta, rCode,           MAC_ADDR_ARRAY(peerAddr));
if (addPreAuthContext)    {        // Create entry for this STA in pre-auth list        struct tLimPreAuthNode *pAuthNode;        pAuthNode = limAcquireFreePreAuthNode(pMac, &pMac->lim.gLimPreAuthTimerTable);        if (pAuthNode)        {            vos_mem_copy((tANI_U8 *) pAuthNode->peerMacAddr,                          peerAddr,                          sizeof(tSirMacAddr));            pAuthNode->fTimerStarted = 0;            pAuthNode->mlmState = eLIM_MLM_AUTHENTICATED_STATE;            pAuthNode->authType = (tAniAuthType) authType;            pAuthNode->timestamp = vos_timer_get_system_ticks();            limAddPreAuthNode(pMac, pAuthNode);        }    }
addPreAuthContext
addPreAuthContext
{        // Create entry for this STA in pre-auth list        struct tLimPreAuthNode *pAuthNode;        pAuthNode = limAcquireFreePreAuthNode(pMac, &pMac->lim.gLimPreAuthTimerTable);        if (pAuthNode)        {            vos_mem_copy((tANI_U8 *) pAuthNode->peerMacAddr,                          peerAddr,                          sizeof(tSirMacAddr));            pAuthNode->fTimerStarted = 0;            pAuthNode->mlmState = eLIM_MLM_AUTHENTICATED_STATE;            pAuthNode->authType = (tAniAuthType) authType;            pAuthNode->timestamp = vos_timer_get_system_ticks();            limAddPreAuthNode(pMac, pAuthNode);        }    }
struct tLimPreAuthNode *pAuthNode;
struct tLimPreAuthNode *pAuthNode;
struct tLimPreAuthNode
tLimPreAuthNode
*pAuthNode
*
pAuthNode
pAuthNode = limAcquireFreePreAuthNode(pMac, &pMac->lim.gLimPreAuthTimerTable);
pAuthNode = limAcquireFreePreAuthNode(pMac, &pMac->lim.gLimPreAuthTimerTable)
pAuthNode
pAuthNode
limAcquireFreePreAuthNode(pMac, &pMac->lim.gLimPreAuthTimerTable)
limAcquireFreePreAuthNode
limAcquireFreePreAuthNode
pMac
pMac
&pMac->lim.gLimPreAuthTimerTable
pMac->lim.gLimPreAuthTimerTable
pMac->lim
pMac
pMac
lim
gLimPreAuthTimerTable
if (pAuthNode)        {            vos_mem_copy((tANI_U8 *) pAuthNode->peerMacAddr,                          peerAddr,                          sizeof(tSirMacAddr));            pAuthNode->fTimerStarted = 0;            pAuthNode->mlmState = eLIM_MLM_AUTHENTICATED_STATE;            pAuthNode->authType = (tAniAuthType) authType;            pAuthNode->timestamp = vos_timer_get_system_ticks();            limAddPreAuthNode(pMac, pAuthNode);        }
pAuthNode
pAuthNode
{            vos_mem_copy((tANI_U8 *) pAuthNode->peerMacAddr,                          peerAddr,                          sizeof(tSirMacAddr));            pAuthNode->fTimerStarted = 0;            pAuthNode->mlmState = eLIM_MLM_AUTHENTICATED_STATE;            pAuthNode->authType = (tAniAuthType) authType;            pAuthNode->timestamp = vos_timer_get_system_ticks();            limAddPreAuthNode(pMac, pAuthNode);        }
vos_mem_copy((tANI_U8 *) pAuthNode->peerMacAddr,                          peerAddr,                          sizeof(tSirMacAddr));
vos_mem_copy((tANI_U8 *) pAuthNode->peerMacAddr,                          peerAddr,                          sizeof(tSirMacAddr))
vos_mem_copy
vos_mem_copy
(tANI_U8 *) pAuthNode->peerMacAddr
tANI_U8 *
tANI_U8
tANI_U8
*
*
pAuthNode->peerMacAddr
pAuthNode
pAuthNode
peerMacAddr
peerAddr
peerAddr
sizeof(tSirMacAddr)
tSirMacAddr
tSirMacAddr
tSirMacAddr

pAuthNode->fTimerStarted = 0;
pAuthNode->fTimerStarted = 0
pAuthNode->fTimerStarted
pAuthNode
pAuthNode
fTimerStarted
0
pAuthNode->mlmState = eLIM_MLM_AUTHENTICATED_STATE;
pAuthNode->mlmState = eLIM_MLM_AUTHENTICATED_STATE
pAuthNode->mlmState
pAuthNode
pAuthNode
mlmState
eLIM_MLM_AUTHENTICATED_STATE
eLIM_MLM_AUTHENTICATED_STATE
pAuthNode->authType = (tAniAuthType) authType;
pAuthNode->authType = (tAniAuthType) authType
pAuthNode->authType
pAuthNode
pAuthNode
authType
(tAniAuthType) authType
tAniAuthType
tAniAuthType
tAniAuthType

authType
authType
pAuthNode->timestamp = vos_timer_get_system_ticks();
pAuthNode->timestamp = vos_timer_get_system_ticks()
pAuthNode->timestamp
pAuthNode
pAuthNode
timestamp
vos_timer_get_system_ticks()
vos_timer_get_system_ticks
vos_timer_get_system_ticks
limAddPreAuthNode(pMac, pAuthNode);
limAddPreAuthNode(pMac, pAuthNode)
limAddPreAuthNode
limAddPreAuthNode
pMac
pMac
pAuthNode
pAuthNode
if (deleteSta == true)    {        pStaDs = dphGetHashEntry(pMac, staId, &psessionEntry->dph.dphHashTable);        if (pStaDs == NULL)        {            limLog(pMac, LOGW,                   FL("No STA context, yet rejecting Association"));            return;        }        /**         * Trigger cleanup.         */        pStaDs->mlmStaContext.cleanupTrigger = eLIM_REASSOC_REJECT;        // Receive path cleanup        limCleanupRxPath(pMac, pStaDs, psessionEntry);        // Send Re/Association Response with        // status code to requesting STA.        limSendAssocRspMgmtFrame(pMac,                                 rCode,                                 0,                                 peerAddr,                                 subType, 0,psessionEntry);        if ( psessionEntry->parsedAssocReq[pStaDs->assocId] != NULL)        {            // Assoction confirmation is complete, free the copy of association request frame            if ( ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame)            {                vos_mem_free(((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame);                ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame = NULL;            }            vos_mem_free(psessionEntry->parsedAssocReq[pStaDs->assocId]);            psessionEntry->parsedAssocReq[pStaDs->assocId] = NULL;        }    }    else    {        limSendAssocRspMgmtFrame(pMac,                                 eSIR_MAC_MAX_ASSOC_STA_REACHED_STATUS,                                 1,                                 peerAddr,                                 subType, 0,psessionEntry);        // Log error        limLog(pMac, LOGW,           FL("received Re/Assoc req when max associated STAs reached from "));        limPrintMacAddr(pMac, peerAddr, LOGW);        limSendSmeMaxAssocExceededNtf(pMac, peerAddr, psessionEntry->smeSessionId);    }
deleteSta == true
deleteSta
deleteSta
true
{        pStaDs = dphGetHashEntry(pMac, staId, &psessionEntry->dph.dphHashTable);        if (pStaDs == NULL)        {            limLog(pMac, LOGW,                   FL("No STA context, yet rejecting Association"));            return;        }        /**         * Trigger cleanup.         */        pStaDs->mlmStaContext.cleanupTrigger = eLIM_REASSOC_REJECT;        // Receive path cleanup        limCleanupRxPath(pMac, pStaDs, psessionEntry);        // Send Re/Association Response with        // status code to requesting STA.        limSendAssocRspMgmtFrame(pMac,                                 rCode,                                 0,                                 peerAddr,                                 subType, 0,psessionEntry);        if ( psessionEntry->parsedAssocReq[pStaDs->assocId] != NULL)        {            // Assoction confirmation is complete, free the copy of association request frame            if ( ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame)            {                vos_mem_free(((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame);                ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame = NULL;            }            vos_mem_free(psessionEntry->parsedAssocReq[pStaDs->assocId]);            psessionEntry->parsedAssocReq[pStaDs->assocId] = NULL;        }    }
pStaDs = dphGetHashEntry(pMac, staId, &psessionEntry->dph.dphHashTable);
pStaDs = dphGetHashEntry(pMac, staId, &psessionEntry->dph.dphHashTable)
pStaDs
pStaDs
dphGetHashEntry(pMac, staId, &psessionEntry->dph.dphHashTable)
dphGetHashEntry
dphGetHashEntry
pMac
pMac
staId
staId
&psessionEntry->dph.dphHashTable
psessionEntry->dph.dphHashTable
psessionEntry->dph
psessionEntry
psessionEntry
dph
dphHashTable
if (pStaDs == NULL)        {            limLog(pMac, LOGW,                   FL("No STA context, yet rejecting Association"));            return;        }
pStaDs == NULL
pStaDs
pStaDs
NULL
NULL
{            limLog(pMac, LOGW,                   FL("No STA context, yet rejecting Association"));            return;        }
limLog(pMac, LOGW,                   FL("No STA context, yet rejecting Association"));
limLog(pMac, LOGW,                   FL("No STA context, yet rejecting Association"))
limLog
limLog
pMac
pMac
LOGW
LOGW
FL("No STA context, yet rejecting Association")
FL
FL
"No STA context, yet rejecting Association"
return;
pStaDs->mlmStaContext.cleanupTrigger = eLIM_REASSOC_REJECT;
pStaDs->mlmStaContext.cleanupTrigger = eLIM_REASSOC_REJECT
pStaDs->mlmStaContext.cleanupTrigger
pStaDs->mlmStaContext
pStaDs
pStaDs
mlmStaContext
cleanupTrigger
eLIM_REASSOC_REJECT
eLIM_REASSOC_REJECT
limCleanupRxPath(pMac, pStaDs, psessionEntry);
limCleanupRxPath(pMac, pStaDs, psessionEntry)
limCleanupRxPath
limCleanupRxPath
pMac
pMac
pStaDs
pStaDs
psessionEntry
psessionEntry
limSendAssocRspMgmtFrame(pMac,                                 rCode,                                 0,                                 peerAddr,                                 subType, 0,psessionEntry);
limSendAssocRspMgmtFrame(pMac,                                 rCode,                                 0,                                 peerAddr,                                 subType, 0,psessionEntry)
limSendAssocRspMgmtFrame
limSendAssocRspMgmtFrame
pMac
pMac
rCode
rCode
0
peerAddr
peerAddr
subType
subType
0
psessionEntry
psessionEntry
if ( psessionEntry->parsedAssocReq[pStaDs->assocId] != NULL)        {            // Assoction confirmation is complete, free the copy of association request frame            if ( ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame)            {                vos_mem_free(((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame);                ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame = NULL;            }            vos_mem_free(psessionEntry->parsedAssocReq[pStaDs->assocId]);            psessionEntry->parsedAssocReq[pStaDs->assocId] = NULL;        }
psessionEntry->parsedAssocReq[pStaDs->assocId] != NULL
psessionEntry->parsedAssocReq[pStaDs->assocId]
psessionEntry->parsedAssocReq
psessionEntry
psessionEntry
parsedAssocReq
pStaDs->assocId
pStaDs
pStaDs
assocId
NULL
NULL
{            // Assoction confirmation is complete, free the copy of association request frame            if ( ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame)            {                vos_mem_free(((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame);                ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame = NULL;            }            vos_mem_free(psessionEntry->parsedAssocReq[pStaDs->assocId]);            psessionEntry->parsedAssocReq[pStaDs->assocId] = NULL;        }
if ( ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame)            {                vos_mem_free(((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame);                ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame = NULL;            }
((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame
((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))
(tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId])
(tpSirAssocReq)
tpSirAssocReq
tpSirAssocReq
psessionEntry->parsedAssocReq[pStaDs->assocId]
psessionEntry->parsedAssocReq
psessionEntry
psessionEntry
parsedAssocReq
pStaDs->assocId
pStaDs
pStaDs
assocId
assocReqFrame
{                vos_mem_free(((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame);                ((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame = NULL;            }
vos_mem_free(((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame);
vos_mem_free(((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame)
vos_mem_free
vos_mem_free
((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame
((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))
(tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId])
(tpSirAssocReq)
tpSirAssocReq
tpSirAssocReq
psessionEntry->parsedAssocReq[pStaDs->assocId]
psessionEntry->parsedAssocReq
psessionEntry
psessionEntry
parsedAssocReq
pStaDs->assocId
pStaDs
pStaDs
assocId
assocReqFrame
((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame = NULL;
((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame = NULL
((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))->assocReqFrame
((tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId]))
(tpSirAssocReq)(psessionEntry->parsedAssocReq[pStaDs->assocId])
(tpSirAssocReq)
tpSirAssocReq
tpSirAssocReq
psessionEntry->parsedAssocReq[pStaDs->assocId]
psessionEntry->parsedAssocReq
psessionEntry
psessionEntry
parsedAssocReq
pStaDs->assocId
pStaDs
pStaDs
assocId
assocReqFrame
NULL
NULL
vos_mem_free(psessionEntry->parsedAssocReq[pStaDs->assocId]);
vos_mem_free(psessionEntry->parsedAssocReq[pStaDs->assocId])
vos_mem_free
vos_mem_free
psessionEntry->parsedAssocReq[pStaDs->assocId]
psessionEntry->parsedAssocReq
psessionEntry
psessionEntry
parsedAssocReq
pStaDs->assocId
pStaDs
pStaDs
assocId
psessionEntry->parsedAssocReq[pStaDs->assocId] = NULL;
psessionEntry->parsedAssocReq[pStaDs->assocId] = NULL
psessionEntry->parsedAssocReq[pStaDs->assocId]
psessionEntry->parsedAssocReq
psessionEntry
psessionEntry
parsedAssocReq
pStaDs->assocId
pStaDs
pStaDs
assocId
NULL
NULL
{        limSendAssocRspMgmtFrame(pMac,                                 eSIR_MAC_MAX_ASSOC_STA_REACHED_STATUS,                                 1,                                 peerAddr,                                 subType, 0,psessionEntry);        // Log error        limLog(pMac, LOGW,           FL("received Re/Assoc req when max associated STAs reached from "));        limPrintMacAddr(pMac, peerAddr, LOGW);        limSendSmeMaxAssocExceededNtf(pMac, peerAddr, psessionEntry->smeSessionId);    }
limSendAssocRspMgmtFrame(pMac,                                 eSIR_MAC_MAX_ASSOC_STA_REACHED_STATUS,                                 1,                                 peerAddr,                                 subType, 0,psessionEntry);
limSendAssocRspMgmtFrame(pMac,                                 eSIR_MAC_MAX_ASSOC_STA_REACHED_STATUS,                                 1,                                 peerAddr,                                 subType, 0,psessionEntry)
limSendAssocRspMgmtFrame
limSendAssocRspMgmtFrame
pMac
pMac
eSIR_MAC_MAX_ASSOC_STA_REACHED_STATUS
eSIR_MAC_MAX_ASSOC_STA_REACHED_STATUS
1
peerAddr
peerAddr
subType
subType
0
psessionEntry
psessionEntry
limLog(pMac, LOGW,           FL("received Re/Assoc req when max associated STAs reached from "));
limLog(pMac, LOGW,           FL("received Re/Assoc req when max associated STAs reached from "))
limLog
limLog
pMac
pMac
LOGW
LOGW
FL("received Re/Assoc req when max associated STAs reached from ")
FL
FL
"received Re/Assoc req when max associated STAs reached from "
limPrintMacAddr(pMac, peerAddr, LOGW);
limPrintMacAddr(pMac, peerAddr, LOGW)
limPrintMacAddr
limPrintMacAddr
pMac
pMac
peerAddr
peerAddr
LOGW
LOGW
limSendSmeMaxAssocExceededNtf(pMac, peerAddr, psessionEntry->smeSessionId);
limSendSmeMaxAssocExceededNtf(pMac, peerAddr, psessionEntry->smeSessionId)
limSendSmeMaxAssocExceededNtf
limSendSmeMaxAssocExceededNtf
pMac
pMac
peerAddr
peerAddr
psessionEntry->smeSessionId
psessionEntry
psessionEntry
smeSessionId
-----joern-----
(34,48,0)
(142,148,0)
(62,170,0)
(165,102,0)
(135,187,0)
(168,92,0)
(179,63,0)
(81,148,0)
(178,84,0)
(69,55,0)
(106,168,0)
(131,10,0)
(64,180,0)
(138,188,0)
(28,103,0)
(12,159,0)
(178,177,0)
(40,177,0)
(50,172,0)
(59,0,0)
(193,4,0)
(113,195,0)
(139,28,0)
(118,45,0)
(33,100,0)
(19,68,0)
(69,148,0)
(150,42,0)
(196,142,0)
(121,55,0)
(8,193,0)
(152,177,0)
(126,17,0)
(11,27,0)
(191,187,0)
(33,1,0)
(188,27,0)
(151,48,0)
(134,28,0)
(167,13,0)
(166,36,0)
(83,192,0)
(180,102,0)
(192,68,0)
(114,14,0)
(173,157,0)
(107,129,0)
(165,92,0)
(189,53,0)
(127,82,0)
(142,177,0)
(29,102,0)
(44,20,0)
(2,138,0)
(48,177,0)
(186,53,0)
(129,130,0)
(61,103,0)
(16,45,0)
(119,88,0)
(117,77,0)
(110,113,0)
(125,36,0)
(91,59,0)
(165,163,0)
(59,176,0)
(72,179,0)
(19,56,0)
(147,172,0)
(146,28,0)
(148,142,0)
(91,139,0)
(177,92,0)
(89,29,0)
(169,100,0)
(59,91,0)
(43,88,0)
(104,161,0)
(84,43,0)
(20,42,0)
(181,5,0)
(29,89,0)
(86,165,0)
(36,127,0)
(148,81,0)
(70,139,0)
(150,4,0)
(21,177,0)
(138,177,0)
(197,178,0)
(55,69,0)
(45,102,0)
(52,172,0)
(180,176,0)
(36,28,0)
(145,130,0)
(90,152,0)
(194,164,0)
(0,59,0)
(31,160,0)
(60,165,0)
(155,142,0)
(81,4,0)
(188,138,0)
(174,29,0)
(33,21,0)
(185,89,0)
(51,81,0)
(59,82,0)
(184,129,0)
(67,192,0)
(124,139,0)
(5,102,0)
(191,89,0)
(160,102,0)
(172,177,0)
(161,104,0)
(42,48,0)
(48,42,0)
(15,138,0)
(112,157,0)
(84,53,0)
(58,27,0)
(94,45,0)
(115,91,0)
(95,69,0)
(170,4,0)
(14,177,0)
(144,127,0)
(1,33,0)
(120,157,0)
(30,44,0)
(66,74,0)
(182,126,0)
(129,102,0)
(74,111,0)
(148,69,0)
(57,81,0)
(71,170,0)
(53,4,0)
(69,95,0)
(132,28,0)
(137,160,0)
(158,132,0)
(171,165,0)
(160,177,0)
(5,176,0)
(28,187,0)
(56,19,0)
(179,87,0)
(128,4,0)
(24,0,0)
(46,5,0)
(44,12,0)
(96,92,0)
(180,170,0)
(177,160,0)
(100,4,0)
(87,179,0)
(180,17,0)
(187,102,0)
(63,179,0)
(68,19,0)
(141,126,0)
(80,165,0)
(104,82,0)
(35,88,0)
(99,146,0)
(6,113,0)
(156,180,0)
(68,193,0)
(146,104,0)
(111,74,0)
(27,188,0)
(76,21,0)
(160,109,0)
(128,74,0)
(54,12,0)
(87,82,0)
(53,84,0)
(20,44,0)
(172,92,0)
(175,59,0)
(19,98,0)
(93,178,0)
(10,129,0)
(126,102,0)
(21,33,0)
(132,102,0)
(23,132,0)
(91,115,0)
(22,128,0)
(140,165,0)
(49,77,0)
(165,7,0)
(26,45,0)
(47,146,0)
(162,150,0)
(133,152,0)
(37,55,0)
(172,4,0)
(116,165,0)
(122,5,0)
(190,1,0)
(13,87,0)
(139,91,0)
(165,176,0)
(43,84,0)
(123,49,0)
(42,20,0)
(111,160,0)
(160,111,0)
(84,178,0)
(164,152,0)
(193,68,0)
(154,150,0)
(149,103,0)
(152,164,0)
(153,45,0)
(3,49,0)
(172,102,0)
(89,191,0)
(129,10,0)
(42,150,0)
(20,38,0)
(74,128,0)
(32,45,0)
(136,128,0)
(18,119,0)
(101,21,0)
(188,119,0)
(45,7,0)
(25,145,0)
(68,192,0)
(55,121,0)
(5,17,0)
(105,45,0)
(165,4,0)
(45,17,0)
(126,73,0)
(41,56,0)
(79,100,0)
(38,20,0)
(132,82,0)
(9,193,0)
(187,191,0)
(77,82,0)
(13,28,0)
(45,4,0)
(98,19,0)
(45,176,0)
(78,13,0)
(73,126,0)
(108,14,0)
(192,177,0)
(85,92,0)
(179,183,0)
(27,4,0)
(121,159,0)
(65,73,0)
(75,165,0)
(164,168,0)
(100,33,0)
(170,180,0)
(187,28,0)
(97,29,0)
(49,28,0)
(14,114,1)
(185,29,1)
(168,106,1)
(20,42,1)
(197,53,1)
(113,195,1)
(169,165,1)
(5,176,1)
(123,59,1)
(13,28,1)
(129,102,1)
(69,148,1)
(155,81,1)
(111,74,1)
(36,166,1)
(117,49,1)
(125,77,1)
(180,102,1)
(49,28,1)
(6,110,1)
(145,129,1)
(14,177,1)
(40,113,1)
(73,65,1)
(172,102,1)
(132,158,1)
(134,39,1)
(34,151,1)
(5,102,1)
(72,13,1)
(75,86,1)
(194,152,1)
(139,28,1)
(165,176,1)
(156,5,1)
(148,142,1)
(192,83,1)
(158,23,1)
(49,3,1)
(165,60,1)
(25,145,1)
(189,56,1)
(172,177,1)
(147,50,1)
(129,10,1)
(171,75,1)
(184,14,1)
(151,150,1)
(52,147,1)
(104,161,1)
(30,20,1)
(186,189,1)
(187,191,1)
(22,137,1)
(153,16,1)
(179,183,1)
(68,192,1)
(53,4,1)
(170,71,1)
(179,63,1)
(31,40,1)
(5,46,1)
(29,102,1)
(76,100,1)
(3,123,1)
(100,4,1)
(131,107,1)
(58,43,1)
(33,100,1)
(55,37,1)
(29,97,1)
(162,154,1)
(25,1,1)
(146,28,1)
(97,174,1)
(62,64,1)
(141,182,1)
(139,70,1)
(193,8,1)
(192,177,1)
(86,116,1)
(54,44,1)
(48,34,1)
(110,39,1)
(142,177,1)
(140,171,1)
(43,84,1)
(180,170,1)
(191,89,1)
(27,4,1)
(28,187,1)
(180,176,1)
(25,180,1)
(99,87,1)
(179,72,1)
(114,108,1)
(150,162,1)
(138,177,1)
(78,127,1)
(56,19,1)
(187,102,1)
(15,2,1)
(167,78,1)
(181,122,1)
(165,102,1)
(178,93,1)
(116,172,1)
(142,196,1)
(124,143,1)
(36,28,1)
(126,73,1)
(137,31,1)
(165,7,1)
(8,9,1)
(172,4,1)
(24,175,1)
(89,29,1)
(148,81,1)
(135,134,1)
(108,177,1)
(154,121,1)
(25,119,1)
(42,48,1)
(45,176,1)
(44,30,1)
(110,132,1)
(107,184,1)
(13,167,1)
(48,177,1)
(133,14,1)
(105,118,1)
(127,144,1)
(53,186,1)
(128,4,1)
(74,66,1)
(110,143,1)
(175,91,1)
(69,95,1)
(126,102,1)
(46,181,1)
(174,135,1)
(164,194,1)
(132,28,1)
(89,185,1)
(160,111,1)
(33,21,1)
(21,101,1)
(161,146,1)
(50,168,1)
(90,133,1)
(18,188,1)
(144,36,1)
(55,69,1)
(16,113,1)
(45,4,1)
(196,155,1)
(45,7,1)
(20,38,1)
(106,164,1)
(59,0,1)
(121,55,1)
(81,4,1)
(91,115,1)
(165,163,1)
(143,28,1)
(83,67,1)
(65,141,1)
(12,54,1)
(166,125,1)
(77,117,1)
(45,26,1)
(170,4,1)
(67,193,1)
(64,156,1)
(47,99,1)
(84,53,1)
(19,68,1)
(41,19,1)
(26,94,1)
(164,152,1)
(188,138,1)
(150,4,1)
(193,4,1)
(68,193,1)
(91,139,1)
(19,98,1)
(79,169,1)
(51,56,1)
(44,20,1)
(60,80,1)
(81,57,1)
(132,102,1)
(94,32,1)
(1,33,1)
(23,104,1)
(0,24,1)
(74,128,1)
(152,177,1)
(10,131,1)
(56,41,1)
(113,6,1)
(189,12,1)
(160,102,1)
(70,124,1)
(11,58,1)
(57,51,1)
(101,76,1)
(146,47,1)
(87,179,1)
(190,33,1)
(165,4,1)
(118,153,1)
(172,52,1)
(21,177,1)
(152,90,1)
(42,150,1)
(59,91,1)
(128,136,1)
(66,128,1)
(45,102,1)
(182,45,1)
(136,22,1)
(177,160,1)
(32,105,1)
(37,69,1)
(59,176,1)
(27,11,1)
(1,190,1)
(93,197,1)
(2,27,1)
(119,18,1)
(80,140,1)
(100,79,1)
(138,15,1)
(84,178,1)
(71,62,1)
(122,126,1)
(178,177,1)
(160,109,1)
(188,27,1)
(9,1,1)
(68,193,2)
(68,1,2)
(13,28,2)
(69,56,2)
(140,14,2)
(131,14,2)
(42,150,2)
(48,177,2)
(194,14,2)
(43,84,2)
(72,143,2)
(168,14,2)
(69,95,2)
(8,1,2)
(20,56,2)
(44,56,2)
(44,20,2)
(53,1,2)
(45,4,2)
(11,1,2)
(83,1,2)
(153,113,2)
(94,113,2)
(135,39,2)
(160,109,2)
(105,113,2)
(148,142,2)
(180,176,2)
(73,113,2)
(27,1,2)
(185,39,2)
(99,143,2)
(132,28,2)
(19,98,2)
(21,177,2)
(129,102,2)
(128,113,2)
(188,138,2)
(158,143,2)
(177,113,2)
(84,178,2)
(84,1,2)
(18,1,2)
(191,89,2)
(111,74,2)
(164,14,2)
(191,39,2)
(24,143,2)
(76,14,2)
(5,176,2)
(126,73,2)
(81,56,2)
(79,14,2)
(165,176,2)
(151,56,2)
(58,1,2)
(136,113,2)
(167,143,2)
(19,1,2)
(56,19,2)
(19,68,2)
(59,143,2)
(182,113,2)
(134,39,2)
(91,115,2)
(62,113,2)
(45,176,2)
(150,56,2)
(70,143,2)
(107,14,2)
(29,39,2)
(127,143,2)
(69,148,2)
(104,143,2)
(46,113,2)
(5,113,2)
(154,56,2)
(165,4,2)
(65,113,2)
(2,1,2)
(172,14,2)
(148,56,2)
(80,14,2)
(139,28,2)
(5,102,2)
(152,177,2)
(100,14,2)
(101,14,2)
(57,56,2)
(9,1,2)
(165,102,2)
(42,56,2)
(190,14,2)
(165,7,2)
(23,143,2)
(43,1,2)
(87,179,2)
(30,56,2)
(54,56,2)
(178,1,2)
(161,143,2)
(40,113,2)
(42,48,2)
(68,192,2)
(142,56,2)
(114,113,2)
(197,1,2)
(160,102,2)
(170,113,2)
(188,27,2)
(111,113,2)
(20,38,2)
(26,113,2)
(139,143,2)
(132,143,2)
(160,113,2)
(77,143,2)
(119,1,2)
(86,14,2)
(104,161,2)
(165,163,2)
(133,14,2)
(122,113,2)
(116,14,2)
(121,55,2)
(67,1,2)
(172,4,2)
(125,143,2)
(138,1,2)
(97,39,2)
(89,39,2)
(156,113,2)
(138,177,2)
(45,113,2)
(81,4,2)
(165,14,2)
(59,0,2)
(192,177,2)
(142,177,2)
(184,14,2)
(1,14,2)
(56,1,2)
(187,191,2)
(21,14,2)
(32,113,2)
(59,91,2)
(164,152,2)
(33,21,2)
(169,14,2)
(146,28,2)
(180,113,2)
(22,113,2)
(174,39,2)
(74,128,2)
(89,29,2)
(31,113,2)
(137,113,2)
(171,14,2)
(93,1,2)
(172,102,2)
(20,42,2)
(91,139,2)
(193,4,2)
(141,113,2)
(50,14,2)
(90,14,2)
(34,56,2)
(147,14,2)
(172,177,2)
(175,143,2)
(179,63,2)
(41,1,2)
(179,143,2)
(49,143,2)
(160,111,2)
(193,1,2)
(33,14,2)
(14,177,2)
(129,10,2)
(71,113,2)
(48,56,2)
(49,28,2)
(179,183,2)
(118,113,2)
(47,143,2)
(117,143,2)
(123,143,2)
(128,4,2)
(16,113,2)
(36,143,2)
(124,143,2)
(84,53,2)
(166,143,2)
(74,113,2)
(1,33,2)
(52,14,2)
(28,39,2)
(64,113,2)
(126,113,2)
(59,176,2)
(106,14,2)
(13,143,2)
(29,102,2)
(121,56,2)
(113,195,2)
(188,1,2)
(15,1,2)
(144,143,2)
(177,160,2)
(53,4,2)
(91,143,2)
(0,143,2)
(25,145,2)
(28,187,2)
(187,39,2)
(180,102,2)
(196,56,2)
(181,113,2)
(55,69,2)
(162,56,2)
(108,113,2)
(10,14,2)
(145,14,2)
(143,39,2)
(27,4,2)
(66,113,2)
(180,170,2)
(189,1,2)
(33,100,2)
(37,56,2)
(150,4,2)
(45,7,2)
(3,143,2)
(78,143,2)
(146,143,2)
(75,14,2)
(100,4,2)
(45,102,2)
(51,56,2)
(12,56,2)
(178,177,2)
(187,102,2)
(36,28,2)
(126,102,2)
(152,14,2)
(170,4,2)
(186,1,2)
(60,14,2)
(87,143,2)
(14,113,2)
(55,56,2)
(132,102,2)
(192,1,2)
(155,56,2)
(129,14,2)
(148,81,2)
-----------------------------------
(0,sizeof(tSirMacAddr)
(1,psessionEntry->parsedAssocReq[pStaDs->assocId] != NULL)
(2,pStaDs)
(3,fTimerStarted)
(4,tpPESession psessionEntry)
(5,limPrintMacAddr(pMac, peerAddr, LOGW)
(6,true)
(7,tANI_U8 subType)
(8,parsedAssocReq)
(9,psessionEntry)
(10,FL("No STA context, yet rejecting Association")
(11,parsedAssocReq)
(12,((tpSirAssocReq)
(13,pAuthNode->authType)
(14,pStaDs == NULL)
(15,assocId)
(16,pMac)
(17,)
(18,NULL)
(19,(tpSirAssocReq)
(20,(tpSirAssocReq)
(21,pStaDs->assocId)
(22,psessionEntry)
(23,pMac)
(24,tSirMacAddr)
(25,RET)
(26,psessionEntry)
(27,psessionEntry->parsedAssocReq)
(28,pAuthNode = limAcquireFreePreAuthNode(pMac, &pMac->lim.gLimPreAuthTimerTable)
(29,pMac->lim)
(30,assocReqFrame)
(31,pMac)
(32,subType)
(33,psessionEntry->parsedAssocReq[pStaDs->assocId])
(34,assocId)
(35,if ( ((tpSirAssocReq)
(36,pAuthNode->mlmState)
(37,assocReqFrame)
(38,tpSirAssocReq)
(39,addPreAuthContext)
(40,pStaDs)
(41,assocReqFrame)
(42,psessionEntry->parsedAssocReq[pStaDs->assocId])
(43,vos_mem_free(psessionEntry->parsedAssocReq[pStaDs->assocId])
(44,((tpSirAssocReq)
(45,limSendAssocRspMgmtFrame(pMac,\n\\n                                 eSIR_MAC_MAX_ASSOC_STA_REACHED_STATUS,\n\\n                                 1,\n\\n                                 peerAddr,\n\\n                                 subType, 0,psessionEntry)
(46,LOGW)
(47,timestamp)
(48,pStaDs->assocId)
(49,pAuthNode->fTimerStarted)
(50,pMac)
(51,psessionEntry)
(52,psessionEntry)
(53,psessionEntry->parsedAssocReq)
(54,NULL)
(55,((tpSirAssocReq)
(56,((tpSirAssocReq)
(57,parsedAssocReq)
(58,psessionEntry)
(59,vos_mem_copy((tANI_U8 *)
(60,psessionEntry)
(61,pAuthNode)
(62,psessionEntry)
(63,tAniAuthType)
(64,peerAddr)
(65,"received Re/Assoc req when max associated STAs reached from ")
(66,dphHashTable)
(67,pStaDs)
(68,psessionEntry->parsedAssocReq[pStaDs->assocId])
(69,(tpSirAssocReq)
(70,peerMacAddr)
(71,smeSessionId)
(72,authType)
(73,FL("received Re/Assoc req when max associated STAs reached from ")
(74,psessionEntry->dph.dphHashTable)
(75,0)
(76,pStaDs)
(77,pAuthNode->fTimerStarted = 0)
(78,pAuthNode)
(79,parsedAssocReq)
(80,0)
(81,psessionEntry->parsedAssocReq)
(82,)
(83,assocId)
(84,psessionEntry->parsedAssocReq[pStaDs->assocId])
(85,if (pStaDs == NULL)
(86,rCode)
(87,pAuthNode->authType = (tAniAuthType)
(88,)
(89,pMac->lim.gLimPreAuthTimerTable)
(90,mlmStaContext)
(91,(tANI_U8 *)
(92,)
(93,assocId)
(94,0)
(95,tpSirAssocReq)
(96,if ( psessionEntry->parsedAssocReq[pStaDs->assocId] != NULL)
(97,lim)
(98,tpSirAssocReq)
(99,pAuthNode)
(100,psessionEntry->parsedAssocReq)
(101,assocId)
(102,tpAniSirGlobal pMac)
(103,)
(104,pAuthNode->timestamp = vos_timer_get_system_ticks()
(105,peerAddr)
(106,eLIM_REASSOC_REJECT)
(107,LOGW)
(108,pStaDs)
(109,tANI_U16 staId)
(110,deleteSta)
(111,&psessionEntry->dph.dphHashTable)
(112,if (addPreAuthContext)
(113,deleteSta == true)
(114,NULL)
(115,tANI_U8 *)
(116,pMac)
(117,0)
(118,1)
(119,psessionEntry->parsedAssocReq[pStaDs->assocId] = NULL)
(120,if (deleteSta == true)
(121,vos_mem_free(((tpSirAssocReq)
(122,pMac)
(123,pAuthNode)
(124,pAuthNode)
(125,pAuthNode)
(126,limLog(pMac, LOGW,\n\\n           FL("received Re/Assoc req when max associated STAs reached from ")
(127,pAuthNode->mlmState = eLIM_MLM_AUTHENTICATED_STATE)
(128,psessionEntry->dph)
(129,limLog(pMac, LOGW,\n\\n                   FL("No STA context, yet rejecting Association")
(130,)
(131,"No STA context, yet rejecting Association")
(132,limAddPreAuthNode(pMac, pAuthNode)
(133,pStaDs)
(134,pAuthNode)
(135,pMac)
(136,dph)
(137,staId)
(138,pStaDs->assocId)
(139,pAuthNode->peerMacAddr)
(140,subType)
(141,LOGW)
(142,pStaDs->assocId)
(143,pAuthNode)
(144,eLIM_MLM_AUTHENTICATED_STATE)
(145,return;)
(146,pAuthNode->timestamp)
(147,pStaDs)
(148,psessionEntry->parsedAssocReq[pStaDs->assocId])
(149,if (pAuthNode)
(150,psessionEntry->parsedAssocReq)
(151,pStaDs)
(152,pStaDs->mlmStaContext)
(153,eSIR_MAC_MAX_ASSOC_STA_REACHED_STATUS)
(154,psessionEntry)
(155,pStaDs)
(156,pMac)
(157,)
(158,pAuthNode)
(159,)
(160,dphGetHashEntry(pMac, staId, &psessionEntry->dph.dphHashTable)
(161,vos_timer_get_system_ticks()
(162,parsedAssocReq)
(163,tSirResultCodes rCode)
(164,pStaDs->mlmStaContext.cleanupTrigger)
(165,limSendAssocRspMgmtFrame(pMac,\n\\n                                 rCode,\n\\n                                 0,\n\\n                                 peerAddr,\n\\n                                 subType, 0,psessionEntry)
(166,mlmState)
(167,authType)
(168,pStaDs->mlmStaContext.cleanupTrigger = eLIM_REASSOC_REJECT)
(169,psessionEntry)
(170,psessionEntry->smeSessionId)
(171,peerAddr)
(172,limCleanupRxPath(pMac, pStaDs, psessionEntry)
(173,pStaDs)
(174,pMac)
(175,peerAddr)
(176,tSirMacAddr peerAddr)
(177,pStaDs = dphGetHashEntry(pMac, staId, &psessionEntry->dph.dphHashTable)
(178,pStaDs->assocId)
(179,(tAniAuthType)
(180,limSendSmeMaxAssocExceededNtf(pMac, peerAddr, psessionEntry->smeSessionId)
(181,peerAddr)
(182,pMac)
(183,tAniAuthType authType)
(184,pMac)
(185,gLimPreAuthTimerTable)
(186,parsedAssocReq)
(187,limAcquireFreePreAuthNode(pMac, &pMac->lim.gLimPreAuthTimerTable)
(188,psessionEntry->parsedAssocReq[pStaDs->assocId])
(189,psessionEntry)
(190,NULL)
(191,&pMac->lim.gLimPreAuthTimerTable)
(192,pStaDs->assocId)
(193,psessionEntry->parsedAssocReq)
(194,cleanupTrigger)
(195,tANI_U8 deleteSta)
(196,assocId)
(197,pStaDs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^