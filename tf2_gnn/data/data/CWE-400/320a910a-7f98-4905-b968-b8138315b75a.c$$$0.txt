-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_fwrite_08_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(staticReturnsTrue())
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
31,32
33,34
34,35
34,36
34,37
34,38
34,39
34,40
34,41
35,36
36,37
36,38
37,38
39,40
39,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
47,50
50,51
51,52
53,54
54,55
54,56
56,57
56,58
56,59
59,60
61,62
62,63
62,64
63,64
65,66
65,67
65,68
66,67
68,69
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
89,90
89,91
90,91
92,93
92,94
93,94
93,95
94,95
97,98
99,100
100,101
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
108,109
110,111
110,112
110,113
110,114
110,115
111,112
113,114
115,116
116,117
116,118
119,120
119,121
120,121
122,123
124,125
126,127
127,128
128,129
128,130
129,130
132,133
132,134
133,134
135,136
136,137
137,138
137,139
138,139
140,141
-----nextToken-----
2,4,8,10,14,16,20,25,28,32,38,40,42,46,48,49,52,55,57,58,60,64,67,69,70,74,76,81,82,87,88,91,95,96,98,101,107,109,112,114,117,118,121,123,125,130,131,134,139,141
-----computeFrom-----
12,13
12,14
23,24
23,25
62,63
62,64
72,73
72,74
85,86
85,87
89,90
89,91
104,105
104,106
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_fwrite_08_bad(){    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__rand_fwrite_08_bad()
CWE400_Resource_Exhaustion__rand_fwrite_08_bad
{    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(4,14,0)
(29,53,0)
(35,10,0)
(59,15,0)
(41,4,0)
(37,58,0)
(66,55,0)
(14,20,0)
(7,11,0)
(23,67,0)
(10,14,0)
(18,10,0)
(11,45,0)
(45,11,0)
(54,28,0)
(4,44,0)
(67,36,0)
(51,16,0)
(31,6,0)
(6,19,0)
(25,50,0)
(70,14,0)
(50,4,0)
(69,20,0)
(43,14,0)
(8,20,0)
(48,36,0)
(32,39,0)
(60,4,0)
(28,14,0)
(0,4,0)
(2,53,0)
(15,20,0)
(4,60,0)
(55,11,0)
(47,53,0)
(14,10,0)
(55,39,0)
(39,53,0)
(55,66,0)
(10,34,0)
(20,63,0)
(40,20,0)
(36,58,0)
(39,55,0)
(46,9,0)
(52,62,0)
(44,4,0)
(62,44,0)
(55,36,0)
(44,62,0)
(34,20,0)
(57,2,0)
(1,58,0)
(42,43,0)
(21,34,0)
(65,20,0)
(68,58,0)
(30,15,0)
(3,5,0)
(11,71,0)
(43,61,0)
(49,34,0)
(22,60,0)
(16,20,0)
(36,67,0)
(26,3,0)
(17,16,0)
(27,20,0)
(56,28,0)
(4,50,0)
(38,55,0)
(64,20,0)
(0,50,1)
(53,29,1)
(4,14,1)
(2,53,1)
(42,12,1)
(10,18,1)
(24,36,1)
(7,24,1)
(14,10,1)
(11,45,1)
(23,48,1)
(52,39,1)
(33,13,1)
(30,13,1)
(17,51,1)
(49,16,1)
(25,60,1)
(4,0,1)
(32,53,1)
(39,53,1)
(59,30,1)
(47,28,1)
(60,22,1)
(18,35,1)
(6,31,1)
(43,42,1)
(33,12,1)
(70,34,1)
(35,70,1)
(15,59,1)
(55,36,1)
(54,56,1)
(16,17,1)
(62,52,1)
(55,66,1)
(13,11,1)
(29,47,1)
(41,62,1)
(2,57,1)
(67,23,1)
(33,43,1)
(47,6,1)
(39,55,1)
(34,21,1)
(57,3,1)
(22,41,1)
(36,67,1)
(43,14,1)
(28,54,1)
(3,26,1)
(31,28,1)
(32,2,1)
(38,32,1)
(21,49,1)
(44,4,1)
(26,44,1)
(13,24,1)
(56,14,1)
(57,44,1)
(4,50,1)
(55,38,1)
(51,15,1)
(12,39,1)
(50,25,1)
(55,11,1)
(44,62,1)
(10,34,1)
(45,7,1)
(28,14,1)
(4,60,1)
(34,13,2)
(43,12,2)
(43,14,2)
(44,4,2)
(21,13,2)
(18,13,2)
(39,53,2)
(53,13,2)
(54,13,2)
(55,39,2)
(4,50,2)
(50,39,2)
(44,62,2)
(29,13,2)
(56,13,2)
(16,13,2)
(15,13,2)
(55,11,2)
(59,13,2)
(60,39,2)
(7,24,2)
(32,13,2)
(49,13,2)
(47,13,2)
(4,60,2)
(51,13,2)
(12,13,2)
(28,14,2)
(32,39,2)
(22,39,2)
(4,14,2)
(4,39,2)
(2,39,2)
(55,66,2)
(57,39,2)
(30,13,2)
(52,39,2)
(17,13,2)
(0,39,2)
(26,44,2)
(38,39,2)
(39,39,2)
(31,28,2)
(55,36,2)
(2,53,2)
(10,13,2)
(28,13,2)
(62,39,2)
(70,13,2)
(10,34,2)
(38,13,2)
(39,55,2)
(11,45,2)
(11,24,2)
(3,44,2)
(35,13,2)
(25,39,2)
(55,13,2)
(45,24,2)
(14,10,2)
(14,13,2)
(39,13,2)
(42,12,2)
(6,28,2)
(41,39,2)
(44,39,2)
(36,67,2)
-----------------------------------
(0,pFile)
(1,if(staticReturnsTrue()
(2,i++)
(3,exit(1)
(4,fwrite(SENTENCE, sizeof(char)
(5,)
(6,exit(1)
(7,count)
(8,i)
(9,)
(10,fopen(filename, "w+")
(11,count = RAND32()
(12,pFile)
(13,staticReturnsTrue()
(14,pFile = fopen(filename, "w+")
(15,i = 0)
(16,*pFile = NULL)
(17,NULL)
(18,"w+")
(19,)
(20,)
(21,"output_bad.txt")
(22,char)
(23,1)
(24,staticReturnsTrue()
(25,SENTENCE)
(26,1)
(27,if (pFile == NULL)
(28,pFile == NULL)
(29,0)
(30,i)
(31,1)
(32,i)
(33,RET)
(34,*filename = "output_bad.txt")
(35,filename)
(36,count = -1)
(37,count)
(38,count)
(39,i < (size_t)
(40,pFile)
(41,SENTENCE)
(42,pFile)
(43,fclose(pFile)
(44,strlen(SENTENCE)
(45,RAND32()
(46,if (strlen(SENTENCE)
(47,i)
(48,count)
(49,filename)
(50,strlen(SENTENCE)
(51,pFile)
(52,SENTENCE)
(53,i = 0)
(54,NULL)
(55,(size_t)
(56,pFile)
(57,i)
(58,)
(59,0)
(60,sizeof(char)
(61,)
(62,strlen(SENTENCE)
(63,)
(64,if (pFile)
(65,for (i = 0; i < (size_t)
(66,size_t)
(67,-1)
(68,if(staticReturnsTrue()
(69,filename)
(70,pFile)
(71,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^