-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_31_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%zu", &data);
    {
        size_t dataCopy = data;
        size_t data = dataCopy;
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
46,47
46,48
47,48
48,49
48,50
50,51
50,52
53,54
53,55
53,56
54,55
54,56
55,56
57,58
57,59
58,59
60,61
62,63
62,64
62,65
62,66
62,67
63,64
64,65
64,66
65,66
67,68
67,69
68,69
68,70
70,71
72,73
72,74
73,74
75,76
75,77
76,77
78,79
79,80
79,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
96,99
97,98
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
115,116
116,117
117,118
117,119
118,119
-----nextToken-----
2,4,9,11,15,16,20,22,23,26,31,33,36,40,42,45,49,51,52,56,59,61,66,69,71,74,77,80,81,85,87,92,94,98,100,102,106,108,112,114,119,120
-----computeFrom-----
13,14
13,15
54,55
54,56
64,65
64,66
75,76
75,77
83,84
83,85
-----guardedBy-----
61,102
56,77
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_31_bad(){    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    {        size_t dataCopy = data;        size_t data = dataCopy;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_31_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_31_bad
{    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    {        size_t dataCopy = data;        size_t data = dataCopy;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
{        size_t dataCopy = data;        size_t data = dataCopy;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t dataCopy = data;
size_t dataCopy = data;
size_t
size_t
dataCopy = data
dataCopy
= data
data
data
size_t data = dataCopy;
size_t data = dataCopy;
size_t
size_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(3,43,0)
(10,2,0)
(46,40,0)
(43,4,0)
(21,4,0)
(36,12,0)
(20,54,0)
(3,35,0)
(7,36,0)
(32,49,0)
(52,40,0)
(3,8,0)
(41,0,0)
(6,33,0)
(38,46,0)
(17,45,0)
(5,2,0)
(18,3,0)
(13,29,0)
(4,49,0)
(50,40,0)
(50,12,0)
(15,25,0)
(8,3,0)
(42,50,0)
(1,24,0)
(45,8,0)
(30,34,0)
(51,37,0)
(48,35,0)
(34,30,0)
(25,0,0)
(46,12,0)
(9,12,0)
(43,0,0)
(40,12,0)
(8,45,0)
(28,32,0)
(4,0,0)
(27,54,0)
(2,29,0)
(45,40,0)
(22,49,0)
(45,17,0)
(36,40,0)
(31,36,0)
(44,34,0)
(2,32,0)
(26,43,0)
(40,45,0)
(16,25,0)
(47,43,0)
(23,0,0)
(49,29,0)
(35,3,0)
(24,39,0)
(33,37,0)
(11,49,0)
(53,4,0)
(54,40,0)
(30,14,0)
(32,2,0)
(37,43,0)
(37,33,0)
(0,29,0)
(10,49,1)
(38,36,1)
(50,42,1)
(21,53,1)
(19,50,1)
(40,45,1)
(43,47,1)
(36,40,1)
(26,4,1)
(37,33,1)
(54,40,1)
(32,28,1)
(49,11,1)
(5,10,1)
(47,26,1)
(51,43,1)
(11,22,1)
(42,46,1)
(35,48,1)
(31,54,1)
(18,52,1)
(7,31,1)
(8,3,1)
(46,38,1)
(46,40,1)
(28,5,1)
(32,49,1)
(34,44,1)
(45,17,1)
(6,51,1)
(37,43,1)
(3,43,1)
(30,34,1)
(50,40,1)
(2,32,1)
(19,24,1)
(3,35,1)
(43,4,1)
(48,18,1)
(20,40,1)
(53,2,1)
(36,7,1)
(44,54,1)
(4,49,1)
(31,30,1)
(54,27,1)
(4,21,1)
(52,37,1)
(1,37,1)
(33,6,1)
(24,1,1)
(45,8,1)
(27,20,1)
(3,35,2)
(4,49,2)
(18,37,2)
(54,40,2)
(7,37,2)
(35,37,2)
(50,40,2)
(44,54,2)
(36,37,2)
(34,54,2)
(32,49,2)
(52,37,2)
(24,37,2)
(8,37,2)
(38,37,2)
(46,37,2)
(36,40,2)
(20,37,2)
(3,43,2)
(31,37,2)
(40,45,2)
(50,37,2)
(54,37,2)
(43,4,2)
(48,37,2)
(37,43,2)
(42,37,2)
(27,37,2)
(45,8,2)
(30,34,2)
(45,17,2)
(45,37,2)
(8,3,2)
(1,37,2)
(30,54,2)
(40,37,2)
(46,40,2)
(37,33,2)
(3,37,2)
(2,32,2)
-----------------------------------
(0,)
(1,"Input is less than the length of the source string")
(2,fscanf(stdin, "%zu", &data)
(3,data*sizeof(wchar_t)
(4,dataCopy = data)
(5,"%zu")
(6,HELLO_STRING)
(7,HELLO_STRING)
(8,malloc(data*sizeof(wchar_t)
(9,if (myString == NULL)
(10,stdin)
(11,0)
(12,)
(13,data)
(14,)
(15,if (data > wcslen(HELLO_STRING)
(16,myString)
(17,wchar_t *)
(18,data)
(19,RET)
(20,myString)
(21,data)
(22,data)
(23,dataCopy)
(24,printLine("Input is less than the length of the source string")
(25,)
(26,data)
(27,NULL)
(28,data)
(29,)
(30,exit(-1)
(31,myString)
(32,&data)
(33,wcslen(HELLO_STRING)
(34,-1)
(35,sizeof(wchar_t)
(36,wcscpy(myString, HELLO_STRING)
(37,data > wcslen(HELLO_STRING)
(38,myString)
(39,)
(40,myString = (wchar_t *)
(41,data)
(42,myString)
(43,data = dataCopy)
(44,1)
(45,(wchar_t *)
(46,printWLine(myString)
(47,dataCopy)
(48,wchar_t)
(49,data = 0)
(50,free(myString)
(51,data)
(52,myString)
(53,dataCopy)
(54,myString == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^