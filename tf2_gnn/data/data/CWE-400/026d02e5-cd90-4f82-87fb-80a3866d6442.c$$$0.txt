-----label-----
0
-----code-----
static void goodB2G()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    /* FIX: Deallocate memory */
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
60,62
61,62
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,53,54,55,59,62,63,67,69
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* FIX: Deallocate memory */    free(data);}
static void
goodB2G()
goodB2G
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* FIX: Deallocate memory */    free(data);}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(0,20,0)
(17,19,0)
(33,23,0)
(12,23,0)
(20,0,0)
(27,26,0)
(10,13,0)
(19,23,0)
(33,11,0)
(6,11,0)
(21,17,0)
(7,31,0)
(31,28,0)
(20,11,0)
(18,10,0)
(8,23,0)
(11,20,0)
(30,6,0)
(26,23,0)
(9,11,0)
(11,23,0)
(15,12,0)
(25,23,0)
(16,27,0)
(17,11,0)
(32,12,0)
(27,11,0)
(20,3,0)
(26,27,0)
(22,27,0)
(28,31,0)
(31,3,0)
(27,19,0)
(5,19,0)
(3,31,0)
(29,17,0)
(13,4,0)
(24,33,0)
(1,28,0)
(3,20,0)
(13,10,0)
(14,6,0)
(22,19,1)
(27,19,1)
(28,1,1)
(16,22,1)
(29,13,1)
(17,11,1)
(12,15,1)
(29,6,1)
(6,11,1)
(18,6,1)
(21,29,1)
(19,5,1)
(5,17,1)
(24,26,1)
(9,12,1)
(31,28,1)
(26,27,1)
(7,9,1)
(27,11,1)
(15,32,1)
(33,24,1)
(33,11,1)
(17,21,1)
(6,14,1)
(11,20,1)
(10,18,1)
(14,30,1)
(20,0,1)
(2,33,1)
(20,3,1)
(3,31,1)
(13,10,1)
(27,16,1)
(30,11,1)
(1,7,1)
(11,20,2)
(10,6,2)
(3,31,2)
(17,11,2)
(27,19,2)
(20,0,2)
(6,11,2)
(26,27,2)
(13,6,2)
(31,28,2)
(20,3,2)
(18,6,2)
(27,11,2)
(33,11,2)
(13,10,2)
-----------------------------------
(0,int *)
(1,int)
(2,RET)
(3,malloc(100*sizeof(int)
(4,)
(5,5)
(6,data == NULL)
(7,100)
(8,if (data == NULL)
(9,data)
(10,-1)
(11,data = (int *)
(12,data = NULL)
(13,exit(-1)
(14,NULL)
(15,NULL)
(16,0)
(17,data[0])
(18,1)
(19,data[0] = 5)
(20,(int *)
(21,0)
(22,data)
(23,)
(24,data)
(25,data)
(26,printIntLine(data[0])
(27,data[0])
(28,sizeof(int)
(29,data)
(30,data)
(31,100*sizeof(int)
(32,data)
(33,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^