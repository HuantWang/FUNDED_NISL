-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_03_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(5==5)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(5==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
33,34
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
52,53
52,54
53,54
53,55
54,55
57,58
59,60
60,61
62,63
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,14,16,19,20,25,28,31,32,38,40,42,47,48,51,55,56,58,61,66,67
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
30,31
30,32
45,46
45,47
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_03_bad(){    int count;    /* Initialize count */    count = -1;    if(5==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(5==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_03_bad()
CWE400_Resource_Exhaustion__rand_for_loop_03_bad
{    int count;    /* Initialize count */    count = -1;    if(5==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(5==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(5==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(5==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
5==5
5
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(31,7,0)
(26,19,0)
(35,26,0)
(32,16,0)
(25,10,0)
(19,26,0)
(15,2,0)
(16,29,0)
(34,14,0)
(11,9,0)
(0,10,0)
(18,10,0)
(33,23,0)
(5,34,0)
(24,26,0)
(18,35,0)
(26,2,0)
(36,35,0)
(23,16,0)
(35,38,0)
(4,10,0)
(35,18,0)
(14,34,0)
(3,17,0)
(27,3,0)
(38,35,0)
(35,34,0)
(30,9,0)
(21,2,0)
(37,23,0)
(13,19,0)
(6,4,0)
(12,16,0)
(1,2,0)
(28,7,0)
(34,8,0)
(22,18,0)
(28,26,1)
(0,25,1)
(6,3,1)
(26,19,1)
(3,27,1)
(22,4,1)
(25,23,1)
(31,28,1)
(20,9,1)
(7,31,1)
(4,6,1)
(35,38,1)
(18,10,1)
(30,11,1)
(19,13,1)
(37,33,1)
(35,34,1)
(35,26,1)
(36,22,1)
(27,18,1)
(13,24,1)
(9,30,1)
(20,18,1)
(23,37,1)
(18,35,1)
(14,5,1)
(34,14,1)
(11,34,1)
(22,10,1)
(35,36,1)
(10,0,1)
(4,10,1)
(11,7,1)
(5,7,1)
(33,9,1)
(22,9,2)
(34,7,2)
(35,34,2)
(5,7,2)
(18,18,2)
(35,26,2)
(3,18,2)
(4,10,2)
(25,9,2)
(27,18,2)
(35,9,2)
(23,9,2)
(18,35,2)
(34,14,2)
(0,9,2)
(36,18,2)
(14,7,2)
(22,18,2)
(37,9,2)
(4,18,2)
(26,19,2)
(18,9,2)
(6,18,2)
(36,9,2)
(18,10,2)
(35,18,2)
(33,9,2)
(35,38,2)
(10,9,2)
-----------------------------------
(0,0)
(1,count)
(2,)
(3,printLine("Hello")
(4,i++)
(5,count)
(6,i)
(7,5==5)
(8,)
(9,5==5)
(10,i = 0)
(11,5)
(12,i)
(13,1)
(14,RAND32()
(15,if(5==5)
(16,)
(17,)
(18,i < (size_t)
(19,-1)
(20,RET)
(21,if(5==5)
(22,i)
(23,i = 0)
(24,count)
(25,i)
(26,count = -1)
(27,"Hello")
(28,5)
(29,)
(30,5)
(31,5)
(32,for (i = 0; i < (size_t)
(33,i)
(34,count = RAND32()
(35,(size_t)
(36,count)
(37,0)
(38,size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^