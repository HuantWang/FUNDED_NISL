-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_18_bad()
{
    wchar_t * data;
    data = NULL;
    goto source;
source:
    {
        wchar_t myString[] = L"myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = wcsdup(myString);
        /* Use data */
        printWLine(data);
    }
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation of memory */
    /* no deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
26,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
46,47
48,49
48,50
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,27,28,30,34,37,39,43,45,47,49,50
-----computeFrom-----
13,14
13,15
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_18_bad(){    wchar_t * data;    data = NULL;    goto source;source:    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    goto sink;sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__strdup_wchar_t_18_bad()
CWE401_Memory_Leak__strdup_wchar_t_18_bad
{    wchar_t * data;    data = NULL;    goto source;source:    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    goto sink;sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ; /* empty statement needed for some flow variants */}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }
source
{        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ;
sink
;
-----joern-----
(10,0,0)
(11,8,0)
(9,6,0)
(2,10,0)
(3,0,0)
(6,0,0)
(14,0,0)
(5,17,0)
(17,6,0)
(8,6,0)
(16,0,0)
(17,8,0)
(12,0,0)
(1,8,0)
(8,1,0)
(4,10,0)
(15,1,0)
(13,0,0)
(9,12,1)
(1,15,1)
(11,9,1)
(10,4,1)
(7,16,1)
(5,8,1)
(16,17,1)
(17,8,1)
(12,10,1)
(17,5,1)
(8,1,1)
(15,11,1)
(4,2,1)
(8,1,2)
(17,8,2)
-----------------------------------
(0,)
(1,wcsdup(myString)
(2,data)
(3,source:)
(4,NULL)
(5,data)
(6,)
(7,RET)
(8,data = wcsdup(myString)
(9,"myString")
(10,data = NULL)
(11,data)
(12,goto source;)
(13,sink:)
(14,data)
(15,myString)
(16,goto sink;)
(17,printWLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^