-----label-----
1
-----code-----
void backupRecursiveF(NiBackup *ni, int source, int dest, struct Buffer_char *fullName)
{
    DIR *dh;
    struct dirent *de = NULL, *der;
    struct stat sbuf, tbuf;
    int sFd, dFd;
    int hSource = -1, hDest = -1;
    size_t fnl = fullName->bufused;

    hSource = dup(source);
    if (hSource < 0) {
        perror("dup");
        goto done;
    }
    hDest = dup(dest);
    if (hDest < 0) {
        perror("dup");
        goto done;
    }

    /* stat the source (for st_dev)
     * FIXME: cache */
    if (fstat(source, &sbuf) != 0) {
        perror("fstat");
        goto done;
    }

    de = malloc(direntLen);
    if (de == NULL) goto done;

    /* go over source-dir files */
    if ((dh = fdopendir(hSource))) {
        /* for each file... */
        while (1) {
            if (readdir_r(dh, de, &der) != 0) break;
            if (der == NULL) break;

            /* skip . and .. */
            if (!strcmp(de->d_name, ".") || !strcmp(de->d_name, "..")) continue;

            /* check exclusions */
            fullName->bufused = fnl;
            WRITE_BUFFER(*fullName, de->d_name, strlen(de->d_name) + 1); fullName->bufused--;
            if (excluded(ni, fullName->buf)) continue;

            /* otherwise, back it up */
            dFd = backupPath(ni, de->d_name, source, dest);

            /* and children */
            if (dFd >= 0) {
                WRITE_ONE_BUFFER(*fullName, '/');
                sFd = openat(source, de->d_name, O_RDONLY);
                if (sFd >= 0) {
                    if (fstat(sFd, &tbuf) == 0 &&
                        sbuf.st_dev == tbuf.st_dev) {

                        backupRecursiveF(ni, sFd, dFd, fullName);
                    }
                    close(sFd);
                }
                close(dFd);
            }
        }

        closedir(dh);
    } else {
        close(hSource);
    }
    hSource = -1;

    /* then go over dest-dir files, in case something was deleted */
    if ((dh = fdopendir(hDest))) {
        while (1) {
            if (readdir_r(dh, de, &der) != 0) break;
            if (der == NULL) break;

            /* only look at increment files (nii) */
            if (strncmp(de->d_name, "nii", 3)) continue;

            /* check if it's been deleted */
            if (faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW) != 0) {
                /* back it up */
                int bpfd = backupPath(ni, de->d_name + 3, source, dest);
                if (bpfd >= 0) close(bpfd);
            }
        }

        closedir(dh);
    } else {
        close(hDest);
    }
    hDest = -1;

done:
    if (hSource >= 0) close(hSource);
    if (hDest >= 0) close(hDest);
    free(de);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
20,21
22,23
22,24
25,26
25,27
25,28
25,29
25,30
25,31
25,32
25,33
25,34
25,35
25,36
25,37
25,38
25,39
25,40
25,41
25,42
25,43
25,44
25,45
26,27
27,28
27,29
28,29
30,31
30,32
33,34
34,35
34,36
34,37
35,36
37,38
37,39
37,40
40,41
41,42
43,44
43,45
46,47
47,48
47,49
47,50
48,49
50,51
52,53
54,55
55,56
55,57
55,58
57,58
59,60
61,62
62,63
62,64
62,65
64,65
64,66
66,67
67,68
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
78,80
80,81
81,82
81,83
82,83
85,86
86,87
86,88
87,88
89,90
89,91
90,91
92,93
94,95
94,96
95,96
95,97
96,97
99,100
99,101
100,101
101,102
101,103
102,103
105,106
107,108
108,109
108,110
109,110
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
121,122
121,123
122,123
123,124
123,125
124,125
127,128
129,130
129,131
130,131
130,132
131,132
131,133
131,134
132,133
134,135
136,137
137,138
140,141
140,142
141,142
142,143
142,144
143,144
146,147
148,149
149,150
149,151
150,151
152,153
152,154
153,154
155,156
157,158
157,159
158,159
158,160
159,160
161,162
163,164
165,166
165,167
165,168
166,167
167,168
167,169
168,169
170,171
170,172
171,172
173,174
175,176
175,177
176,177
176,178
178,179
178,180
178,181
178,182
178,183
178,184
178,185
178,186
178,187
179,180
179,181
180,181
180,182
181,182
181,183
181,184
181,185
182,183
184,185
186,187
188,189
189,190
193,194
193,195
194,195
194,196
195,196
197,198
200,201
200,202
201,202
201,203
202,203
203,204
203,205
203,206
204,205
206,207
206,208
207,208
211,212
212,213
212,214
212,215
213,214
215,216
215,217
216,217
221,222
222,223
222,224
223,224
223,225
224,225
227,228
229,230
230,231
230,232
230,233
230,234
231,232
233,234
234,235
236,237
236,238
237,238
240,241
240,242
241,242
241,243
242,243
244,245
244,246
245,246
249,250
250,251
251,252
251,253
252,253
255,256
255,257
256,257
256,258
256,259
257,258
259,260
261,262
261,263
262,263
266,267
267,268
267,269
268,269
270,271
270,272
270,273
270,274
270,275
271,272
273,274
275,276
275,277
276,277
279,280
281,282
283,284
283,285
284,285
284,286
285,286
288,289
288,290
288,291
288,292
289,290
290,291
290,292
290,293
291,292
293,294
294,295
297,298
298,299
298,300
299,300
301,302
301,303
301,304
301,305
302,303
304,305
306,307
306,308
307,308
310,311
312,313
312,314
313,314
313,315
314,315
317,318
317,319
318,319
318,320
319,320
319,321
320,321
320,322
321,322
321,323
321,324
322,323
324,325
326,327
327,328
330,331
330,332
331,332
331,333
332,333
335,336
335,337
336,337
339,340
340,341
341,342
341,343
341,344
341,345
341,346
342,343
344,345
346,347
348,349
350,351
352,353
353,354
353,355
354,355
356,357
358,359
359,360
359,361
360,361
362,363
364,365
365,366
365,367
366,367
368,369
370,371
371,372
372,373
372,374
373,374
375,376
377,378
378,379
378,380
379,380
381,382
383,384
383,385
383,386
384,385
385,386
385,387
386,387
388,389
388,390
389,390
391,392
393,394
393,395
394,395
394,396
396,397
396,398
396,399
396,400
397,398
397,399
398,399
398,400
399,400
399,401
399,402
399,403
400,401
402,403
404,405
406,407
407,408
411,412
411,413
412,413
412,414
413,414
415,416
418,419
418,420
419,420
419,421
419,422
419,423
420,421
422,423
422,424
423,424
429,430
429,431
430,431
430,432
431,432
431,433
431,434
431,435
431,436
432,433
434,435
436,437
436,438
437,438
437,439
438,439
442,443
444,445
447,448
447,449
448,449
449,450
449,451
451,452
451,453
453,454
454,455
454,456
454,457
454,458
454,459
455,456
457,458
459,460
459,461
460,461
460,462
461,462
465,466
467,468
469,470
469,471
470,471
470,472
471,472
474,475
475,476
475,477
476,477
478,479
480,481
481,482
481,483
482,483
484,485
486,487
487,488
488,489
488,490
489,490
491,492
493,494
494,495
494,496
495,496
497,498
499,500
499,501
501,502
501,503
502,503
502,504
503,504
506,507
507,508
507,509
508,509
510,511
512,513
512,514
513,514
513,515
514,515
517,518
518,519
518,520
519,520
521,522
523,524
524,525
524,526
525,526
527,528
-----nextToken-----
2,4,7,9,10,12,14,16,18,21,23,24,29,31,32,36,38,39,42,44,45,49,51,53,56,58,60,63,65,68,70,73,77,79,83,84,88,91,93,97,98,103,104,106,110,113,115,119,120,125,126,128,133,135,138,139,144,145,147,151,154,156,160,162,164,169,172,174,177,183,185,187,190,191,192,196,198,199,205,208,209,210,214,217,218,219,220,225,226,228,232,235,238,239,243,246,247,248,253,254,258,260,263,264,265,269,272,274,277,278,280,282,286,287,292,295,296,300,303,305,308,309,311,315,316,323,325,328,329,333,334,337,338,343,345,347,349,351,355,357,361,363,367,369,374,376,380,382,387,390,392,395,401,403,405,408,409,410,414,416,417,421,424,425,426,427,428,433,435,439,440,441,443,445,446,450,452,456,458,462,463,464,466,468,472,473,477,479,483,485,490,492,496,498,500,504,505,509,511,515,516,520,522,526,528
-----computeFrom-----
86,87
86,88
95,96
95,97
108,109
108,110
117,118
117,119
130,131
130,132
149,150
149,151
158,159
158,160
167,168
167,169
180,181
180,182
194,195
194,196
201,202
201,203
222,223
222,224
240,241
240,242
267,268
267,269
284,285
284,286
298,299
298,300
313,314
313,315
319,320
319,321
320,321
320,322
330,331
330,332
378,379
378,380
385,386
385,387
398,399
398,400
412,413
412,414
430,431
430,432
436,437
436,438
459,460
459,461
470,471
470,472
494,495
494,496
502,503
502,504
513,514
513,515
-----guardedBy-----
286,363
315,357
325,347
439,462
440,463
435,466
472,479
504,511
515,522
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;LiteralExpression;Declarator;Name;EqualsInitializer;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ContinueStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ContinueStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void backupRecursiveF(NiBackup *ni, int source, int dest, struct Buffer_char *fullName){    DIR *dh;    struct dirent *de = NULL, *der;    struct stat sbuf, tbuf;    int sFd, dFd;    int hSource = -1, hDest = -1;    size_t fnl = fullName->bufused;    hSource = dup(source);    if (hSource < 0) {        perror("dup");        goto done;    }    hDest = dup(dest);    if (hDest < 0) {        perror("dup");        goto done;    }    /* stat the source (for st_dev)     * FIXME: cache */    if (fstat(source, &sbuf) != 0) {        perror("fstat");        goto done;    }    de = malloc(direntLen);    if (de == NULL) goto done;    /* go over source-dir files */    if ((dh = fdopendir(hSource))) {        /* for each file... */        while (1) {            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* skip . and .. */            if (!strcmp(de->d_name, ".") || !strcmp(de->d_name, "..")) continue;            /* check exclusions */            fullName->bufused = fnl;            WRITE_BUFFER(*fullName, de->d_name, strlen(de->d_name) + 1); fullName->bufused--;            if (excluded(ni, fullName->buf)) continue;            /* otherwise, back it up */            dFd = backupPath(ni, de->d_name, source, dest);            /* and children */            if (dFd >= 0) {                WRITE_ONE_BUFFER(*fullName, '/');                sFd = openat(source, de->d_name, O_RDONLY);                if (sFd >= 0) {                    if (fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev) {                        backupRecursiveF(ni, sFd, dFd, fullName);                    }                    close(sFd);                }                close(dFd);            }        }        closedir(dh);    } else {        close(hSource);    }    hSource = -1;    /* then go over dest-dir files, in case something was deleted */    if ((dh = fdopendir(hDest))) {        while (1) {            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* only look at increment files (nii) */            if (strncmp(de->d_name, "nii", 3)) continue;            /* check if it's been deleted */            if (faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW) != 0) {                /* back it up */                int bpfd = backupPath(ni, de->d_name + 3, source, dest);                if (bpfd >= 0) close(bpfd);            }        }        closedir(dh);    } else {        close(hDest);    }    hDest = -1;done:    if (hSource >= 0) close(hSource);    if (hDest >= 0) close(hDest);    free(de);}
void
backupRecursiveF(NiBackup *ni, int source, int dest, struct Buffer_char *fullName)
backupRecursiveF
NiBackup *ni
NiBackup
NiBackup
*ni
*
ni
int source
int
source
source
int dest
int
dest
dest
struct Buffer_char *fullName
struct Buffer_char
Buffer_char
*fullName
*
fullName
{    DIR *dh;    struct dirent *de = NULL, *der;    struct stat sbuf, tbuf;    int sFd, dFd;    int hSource = -1, hDest = -1;    size_t fnl = fullName->bufused;    hSource = dup(source);    if (hSource < 0) {        perror("dup");        goto done;    }    hDest = dup(dest);    if (hDest < 0) {        perror("dup");        goto done;    }    /* stat the source (for st_dev)     * FIXME: cache */    if (fstat(source, &sbuf) != 0) {        perror("fstat");        goto done;    }    de = malloc(direntLen);    if (de == NULL) goto done;    /* go over source-dir files */    if ((dh = fdopendir(hSource))) {        /* for each file... */        while (1) {            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* skip . and .. */            if (!strcmp(de->d_name, ".") || !strcmp(de->d_name, "..")) continue;            /* check exclusions */            fullName->bufused = fnl;            WRITE_BUFFER(*fullName, de->d_name, strlen(de->d_name) + 1); fullName->bufused--;            if (excluded(ni, fullName->buf)) continue;            /* otherwise, back it up */            dFd = backupPath(ni, de->d_name, source, dest);            /* and children */            if (dFd >= 0) {                WRITE_ONE_BUFFER(*fullName, '/');                sFd = openat(source, de->d_name, O_RDONLY);                if (sFd >= 0) {                    if (fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev) {                        backupRecursiveF(ni, sFd, dFd, fullName);                    }                    close(sFd);                }                close(dFd);            }        }        closedir(dh);    } else {        close(hSource);    }    hSource = -1;    /* then go over dest-dir files, in case something was deleted */    if ((dh = fdopendir(hDest))) {        while (1) {            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* only look at increment files (nii) */            if (strncmp(de->d_name, "nii", 3)) continue;            /* check if it's been deleted */            if (faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW) != 0) {                /* back it up */                int bpfd = backupPath(ni, de->d_name + 3, source, dest);                if (bpfd >= 0) close(bpfd);            }        }        closedir(dh);    } else {        close(hDest);    }    hDest = -1;done:    if (hSource >= 0) close(hSource);    if (hDest >= 0) close(hDest);    free(de);}
DIR *dh;
DIR *dh;
DIR
DIR
*dh
*
dh
struct dirent *de = NULL, *der;
struct dirent *de = NULL, *der;
struct dirent
dirent
*de = NULL
*
de
= NULL
NULL
NULL
*der
*
der
struct stat sbuf, tbuf;
struct stat sbuf, tbuf;
struct stat
stat
sbuf
sbuf
tbuf
tbuf
int sFd, dFd;
int sFd, dFd;
int
sFd
sFd
dFd
dFd
int hSource = -1, hDest = -1;
int hSource = -1, hDest = -1;
int
hSource = -1
hSource
= -1
-1
1
hDest = -1
hDest
= -1
-1
1
size_t fnl = fullName->bufused;
size_t fnl = fullName->bufused;
size_t
size_t
fnl = fullName->bufused
fnl
= fullName->bufused
fullName->bufused
fullName
fullName
bufused
hSource = dup(source);
hSource = dup(source)
hSource
hSource
dup(source)
dup
dup
source
source
if (hSource < 0) {        perror("dup");        goto done;    }
hSource < 0
hSource
hSource
0
{        perror("dup");        goto done;    }
perror("dup");
perror("dup")
perror
perror
"dup"
goto done;
done
hDest = dup(dest);
hDest = dup(dest)
hDest
hDest
dup(dest)
dup
dup
dest
dest
if (hDest < 0) {        perror("dup");        goto done;    }
hDest < 0
hDest
hDest
0
{        perror("dup");        goto done;    }
perror("dup");
perror("dup")
perror
perror
"dup"
goto done;
done
if (fstat(source, &sbuf) != 0) {        perror("fstat");        goto done;    }
fstat(source, &sbuf) != 0
fstat(source, &sbuf)
fstat
fstat
source
source
&sbuf
sbuf
sbuf
0
{        perror("fstat");        goto done;    }
perror("fstat");
perror("fstat")
perror
perror
"fstat"
goto done;
done
de = malloc(direntLen);
de = malloc(direntLen)
de
de
malloc(direntLen)
malloc
malloc
direntLen
direntLen
if (de == NULL) goto done;
de == NULL
de
de
NULL
NULL
goto done;
done
if ((dh = fdopendir(hSource))) {        /* for each file... */        while (1) {            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* skip . and .. */            if (!strcmp(de->d_name, ".") || !strcmp(de->d_name, "..")) continue;            /* check exclusions */            fullName->bufused = fnl;            WRITE_BUFFER(*fullName, de->d_name, strlen(de->d_name) + 1); fullName->bufused--;            if (excluded(ni, fullName->buf)) continue;            /* otherwise, back it up */            dFd = backupPath(ni, de->d_name, source, dest);            /* and children */            if (dFd >= 0) {                WRITE_ONE_BUFFER(*fullName, '/');                sFd = openat(source, de->d_name, O_RDONLY);                if (sFd >= 0) {                    if (fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev) {                        backupRecursiveF(ni, sFd, dFd, fullName);                    }                    close(sFd);                }                close(dFd);            }        }        closedir(dh);    } else {        close(hSource);    }
(dh = fdopendir(hSource))
dh = fdopendir(hSource)
dh
dh
fdopendir(hSource)
fdopendir
fdopendir
hSource
hSource
{        /* for each file... */        while (1) {            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* skip . and .. */            if (!strcmp(de->d_name, ".") || !strcmp(de->d_name, "..")) continue;            /* check exclusions */            fullName->bufused = fnl;            WRITE_BUFFER(*fullName, de->d_name, strlen(de->d_name) + 1); fullName->bufused--;            if (excluded(ni, fullName->buf)) continue;            /* otherwise, back it up */            dFd = backupPath(ni, de->d_name, source, dest);            /* and children */            if (dFd >= 0) {                WRITE_ONE_BUFFER(*fullName, '/');                sFd = openat(source, de->d_name, O_RDONLY);                if (sFd >= 0) {                    if (fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev) {                        backupRecursiveF(ni, sFd, dFd, fullName);                    }                    close(sFd);                }                close(dFd);            }        }        closedir(dh);    }
while (1) {            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* skip . and .. */            if (!strcmp(de->d_name, ".") || !strcmp(de->d_name, "..")) continue;            /* check exclusions */            fullName->bufused = fnl;            WRITE_BUFFER(*fullName, de->d_name, strlen(de->d_name) + 1); fullName->bufused--;            if (excluded(ni, fullName->buf)) continue;            /* otherwise, back it up */            dFd = backupPath(ni, de->d_name, source, dest);            /* and children */            if (dFd >= 0) {                WRITE_ONE_BUFFER(*fullName, '/');                sFd = openat(source, de->d_name, O_RDONLY);                if (sFd >= 0) {                    if (fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev) {                        backupRecursiveF(ni, sFd, dFd, fullName);                    }                    close(sFd);                }                close(dFd);            }        }
1
{            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* skip . and .. */            if (!strcmp(de->d_name, ".") || !strcmp(de->d_name, "..")) continue;            /* check exclusions */            fullName->bufused = fnl;            WRITE_BUFFER(*fullName, de->d_name, strlen(de->d_name) + 1); fullName->bufused--;            if (excluded(ni, fullName->buf)) continue;            /* otherwise, back it up */            dFd = backupPath(ni, de->d_name, source, dest);            /* and children */            if (dFd >= 0) {                WRITE_ONE_BUFFER(*fullName, '/');                sFd = openat(source, de->d_name, O_RDONLY);                if (sFd >= 0) {                    if (fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev) {                        backupRecursiveF(ni, sFd, dFd, fullName);                    }                    close(sFd);                }                close(dFd);            }        }
if (readdir_r(dh, de, &der) != 0) break;
readdir_r(dh, de, &der) != 0
readdir_r(dh, de, &der)
readdir_r
readdir_r
dh
dh
de
de
&der
der
der
0
break;
if (der == NULL) break;
der == NULL
der
der
NULL
NULL
break;
if (!strcmp(de->d_name, ".") || !strcmp(de->d_name, "..")) continue;
!strcmp(de->d_name, ".") || !strcmp(de->d_name, "..")
!strcmp(de->d_name, ".")
strcmp(de->d_name, ".")
strcmp
strcmp
de->d_name
de
de
d_name
"."
!strcmp(de->d_name, "..")
strcmp(de->d_name, "..")
strcmp
strcmp
de->d_name
de
de
d_name
".."
continue;
fullName->bufused = fnl;
fullName->bufused = fnl
fullName->bufused
fullName
fullName
bufused
fnl
fnl
WRITE_BUFFER(*fullName, de->d_name, strlen(de->d_name) + 1);
WRITE_BUFFER(*fullName, de->d_name, strlen(de->d_name) + 1)
WRITE_BUFFER
WRITE_BUFFER
*fullName
fullName
fullName
de->d_name
de
de
d_name
strlen(de->d_name) + 1
strlen(de->d_name)
strlen
strlen
de->d_name
de
de
d_name
1
fullName->bufused--;
fullName->bufused--
fullName->bufused
fullName
fullName
bufused
if (excluded(ni, fullName->buf)) continue;
excluded(ni, fullName->buf)
excluded
excluded
ni
ni
fullName->buf
fullName
fullName
buf
continue;
dFd = backupPath(ni, de->d_name, source, dest);
dFd = backupPath(ni, de->d_name, source, dest)
dFd
dFd
backupPath(ni, de->d_name, source, dest)
backupPath
backupPath
ni
ni
de->d_name
de
de
d_name
source
source
dest
dest
if (dFd >= 0) {                WRITE_ONE_BUFFER(*fullName, '/');                sFd = openat(source, de->d_name, O_RDONLY);                if (sFd >= 0) {                    if (fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev) {                        backupRecursiveF(ni, sFd, dFd, fullName);                    }                    close(sFd);                }                close(dFd);            }
dFd >= 0
dFd
dFd
0
{                WRITE_ONE_BUFFER(*fullName, '/');                sFd = openat(source, de->d_name, O_RDONLY);                if (sFd >= 0) {                    if (fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev) {                        backupRecursiveF(ni, sFd, dFd, fullName);                    }                    close(sFd);                }                close(dFd);            }
WRITE_ONE_BUFFER(*fullName, '/');
WRITE_ONE_BUFFER(*fullName, '/')
WRITE_ONE_BUFFER
WRITE_ONE_BUFFER
*fullName
fullName
fullName
'/'
sFd = openat(source, de->d_name, O_RDONLY);
sFd = openat(source, de->d_name, O_RDONLY)
sFd
sFd
openat(source, de->d_name, O_RDONLY)
openat
openat
source
source
de->d_name
de
de
d_name
O_RDONLY
O_RDONLY
if (sFd >= 0) {                    if (fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev) {                        backupRecursiveF(ni, sFd, dFd, fullName);                    }                    close(sFd);                }
sFd >= 0
sFd
sFd
0
{                    if (fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev) {                        backupRecursiveF(ni, sFd, dFd, fullName);                    }                    close(sFd);                }
if (fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev) {                        backupRecursiveF(ni, sFd, dFd, fullName);                    }
fstat(sFd, &tbuf) == 0 &&                        sbuf.st_dev == tbuf.st_dev
fstat(sFd, &tbuf) == 0
fstat(sFd, &tbuf)
fstat
fstat
sFd
sFd
&tbuf
tbuf
tbuf
0
sbuf.st_dev == tbuf.st_dev
sbuf.st_dev
sbuf
sbuf
st_dev
tbuf.st_dev
tbuf
tbuf
st_dev
{                        backupRecursiveF(ni, sFd, dFd, fullName);                    }
backupRecursiveF(ni, sFd, dFd, fullName);
backupRecursiveF(ni, sFd, dFd, fullName)
backupRecursiveF
backupRecursiveF
ni
ni
sFd
sFd
dFd
dFd
fullName
fullName
close(sFd);
close(sFd)
close
close
sFd
sFd
close(dFd);
close(dFd)
close
close
dFd
dFd
closedir(dh);
closedir(dh)
closedir
closedir
dh
dh
{        close(hSource);    }
close(hSource);
close(hSource)
close
close
hSource
hSource
hSource = -1;
hSource = -1
hSource
hSource
-1
1
if ((dh = fdopendir(hDest))) {        while (1) {            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* only look at increment files (nii) */            if (strncmp(de->d_name, "nii", 3)) continue;            /* check if it's been deleted */            if (faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW) != 0) {                /* back it up */                int bpfd = backupPath(ni, de->d_name + 3, source, dest);                if (bpfd >= 0) close(bpfd);            }        }        closedir(dh);    } else {        close(hDest);    }
(dh = fdopendir(hDest))
dh = fdopendir(hDest)
dh
dh
fdopendir(hDest)
fdopendir
fdopendir
hDest
hDest
{        while (1) {            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* only look at increment files (nii) */            if (strncmp(de->d_name, "nii", 3)) continue;            /* check if it's been deleted */            if (faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW) != 0) {                /* back it up */                int bpfd = backupPath(ni, de->d_name + 3, source, dest);                if (bpfd >= 0) close(bpfd);            }        }        closedir(dh);    }
while (1) {            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* only look at increment files (nii) */            if (strncmp(de->d_name, "nii", 3)) continue;            /* check if it's been deleted */            if (faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW) != 0) {                /* back it up */                int bpfd = backupPath(ni, de->d_name + 3, source, dest);                if (bpfd >= 0) close(bpfd);            }        }
1
{            if (readdir_r(dh, de, &der) != 0) break;            if (der == NULL) break;            /* only look at increment files (nii) */            if (strncmp(de->d_name, "nii", 3)) continue;            /* check if it's been deleted */            if (faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW) != 0) {                /* back it up */                int bpfd = backupPath(ni, de->d_name + 3, source, dest);                if (bpfd >= 0) close(bpfd);            }        }
if (readdir_r(dh, de, &der) != 0) break;
readdir_r(dh, de, &der) != 0
readdir_r(dh, de, &der)
readdir_r
readdir_r
dh
dh
de
de
&der
der
der
0
break;
if (der == NULL) break;
der == NULL
der
der
NULL
NULL
break;
if (strncmp(de->d_name, "nii", 3)) continue;
strncmp(de->d_name, "nii", 3)
strncmp
strncmp
de->d_name
de
de
d_name
"nii"
3
continue;
if (faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW) != 0) {                /* back it up */                int bpfd = backupPath(ni, de->d_name + 3, source, dest);                if (bpfd >= 0) close(bpfd);            }
faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW) != 0
faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW)
faccessat
faccessat
source
source
de->d_name + 3
de->d_name
de
de
d_name
3
F_OK
F_OK
AT_SYMLINK_NOFOLLOW
AT_SYMLINK_NOFOLLOW
0
{                /* back it up */                int bpfd = backupPath(ni, de->d_name + 3, source, dest);                if (bpfd >= 0) close(bpfd);            }
int bpfd = backupPath(ni, de->d_name + 3, source, dest);
int bpfd = backupPath(ni, de->d_name + 3, source, dest);
int
bpfd = backupPath(ni, de->d_name + 3, source, dest)
bpfd
= backupPath(ni, de->d_name + 3, source, dest)
backupPath(ni, de->d_name + 3, source, dest)
backupPath
backupPath
ni
ni
de->d_name + 3
de->d_name
de
de
d_name
3
source
source
dest
dest
if (bpfd >= 0) close(bpfd);
bpfd >= 0
bpfd
bpfd
0
close(bpfd);
close(bpfd)
close
close
bpfd
bpfd
closedir(dh);
closedir(dh)
closedir
closedir
dh
dh
{        close(hDest);    }
close(hDest);
close(hDest)
close
close
hDest
hDest
hDest = -1;
hDest = -1
hDest
hDest
-1
1
done:    if (hSource >= 0) close(hSource);
done
if (hSource >= 0) close(hSource);
hSource >= 0
hSource
hSource
0
close(hSource);
close(hSource)
close
close
hSource
hSource
if (hDest >= 0) close(hDest);
hDest >= 0
hDest
hDest
0
close(hDest);
close(hDest)
close
close
hDest
hDest
free(de);
free(de)
free
free
de
de
-----joern-----
(93,263,0)
(188,76,0)
(201,16,0)
(52,72,0)
(210,151,0)
(176,276,0)
(209,143,0)
(241,251,0)
(269,267,0)
(78,108,0)
(7,151,0)
(134,169,0)
(282,151,0)
(162,227,0)
(145,151,0)
(90,88,0)
(160,61,0)
(262,221,0)
(66,272,0)
(1,98,0)
(204,2,0)
(156,151,0)
(127,78,0)
(116,140,0)
(284,9,0)
(34,10,0)
(88,98,0)
(133,151,0)
(274,163,0)
(186,115,0)
(101,122,0)
(20,19,0)
(108,289,0)
(74,164,0)
(155,0,0)
(86,250,0)
(260,152,0)
(82,30,0)
(85,44,0)
(152,196,0)
(136,96,0)
(119,140,0)
(279,196,0)
(206,10,0)
(59,268,0)
(88,26,0)
(123,276,0)
(270,102,0)
(272,108,0)
(214,181,0)
(287,173,0)
(222,165,0)
(206,239,0)
(106,192,0)
(277,10,0)
(196,164,0)
(140,30,0)
(117,50,0)
(19,41,0)
(258,196,0)
(26,88,0)
(39,52,0)
(153,76,0)
(128,103,0)
(173,30,0)
(123,140,0)
(35,272,0)
(202,6,0)
(1,228,0)
(245,68,0)
(132,9,0)
(112,114,0)
(67,140,0)
(40,151,0)
(24,169,0)
(213,133,0)
(168,103,0)
(157,239,0)
(211,228,0)
(227,53,0)
(120,60,0)
(271,3,0)
(192,203,0)
(104,21,0)
(256,179,0)
(68,230,0)
(27,133,0)
(246,6,0)
(44,122,0)
(19,138,0)
(18,248,0)
(122,280,0)
(145,61,0)
(75,228,0)
(22,162,0)
(131,280,0)
(97,172,0)
(118,248,0)
(149,239,0)
(184,151,0)
(36,145,0)
(48,122,0)
(102,38,0)
(195,268,0)
(100,52,0)
(143,60,0)
(280,289,0)
(23,125,0)
(200,50,0)
(92,242,0)
(17,151,0)
(237,9,0)
(173,208,0)
(247,151,0)
(199,203,0)
(181,60,0)
(272,66,0)
(257,276,0)
(171,6,0)
(248,233,0)
(140,208,0)
(154,6,0)
(120,135,0)
(5,151,0)
(0,71,0)
(166,75,0)
(82,21,0)
(140,289,0)
(14,44,0)
(143,233,0)
(97,165,0)
(42,66,0)
(3,271,0)
(75,267,0)
(141,228,0)
(196,173,0)
(103,151,0)
(105,281,0)
(63,208,0)
(72,96,0)
(111,200,0)
(9,50,0)
(219,276,0)
(84,263,0)
(250,203,0)
(63,203,0)
(62,19,0)
(194,203,0)
(108,272,0)
(66,228,0)
(251,151,0)
(203,151,0)
(10,206,0)
(64,141,0)
(15,108,0)
(91,115,0)
(185,164,0)
(222,122,0)
(283,230,0)
(226,101,0)
(124,27,0)
(96,72,0)
(2,268,0)
(254,151,0)
(54,123,0)
(250,198,0)
(218,108,0)
(232,276,0)
(259,199,0)
(234,97,0)
(140,67,0)
(108,78,0)
(292,71,0)
(126,75,0)
(56,200,0)
(137,128,0)
(52,100,0)
(135,46,0)
(284,228,0)
(76,123,0)
(55,255,0)
(252,25,0)
(266,151,0)
(121,98,0)
(256,138,0)
(231,181,0)
(57,151,0)
(267,75,0)
(199,103,0)
(278,181,0)
(170,140,0)
(181,123,0)
(228,110,0)
(53,227,0)
(102,270,0)
(291,151,0)
(16,228,0)
(273,151,0)
(26,141,0)
(135,120,0)
(223,97,0)
(33,173,0)
(142,151,0)
(163,114,0)
(236,23,0)
(187,165,0)
(98,276,0)
(70,181,0)
(173,196,0)
(140,123,0)
(100,206,0)
(233,276,0)
(175,46,0)
(227,289,0)
(199,114,0)
(264,82,0)
(138,194,0)
(72,52,0)
(69,43,0)
(248,257,0)
(261,265,0)
(148,21,0)
(220,121,0)
(97,242,0)
(4,68,0)
(41,19,0)
(114,151,0)
(77,67,0)
(290,66,0)
(158,173,0)
(230,68,0)
(146,61,0)
(212,135,0)
(38,102,0)
(190,1,0)
(61,145,0)
(38,228,0)
(144,110,0)
(285,2,0)
(61,60,0)
(43,16,0)
(97,228,0)
(98,121,0)
(203,63,0)
(172,97,0)
(83,99,0)
(114,163,0)
(8,28,0)
(98,88,0)
(173,289,0)
(80,16,0)
(267,173,0)
(240,233,0)
(217,194,0)
(253,53,0)
(249,72,0)
(130,99,0)
(51,151,0)
(121,60,0)
(50,9,0)
(12,222,0)
(31,203,0)
(233,145,0)
(147,284,0)
(109,143,0)
(235,1,0)
(178,125,0)
(229,151,0)
(13,108,0)
(95,141,0)
(133,27,0)
(165,222,0)
(216,102,0)
(275,120,0)
(89,151,0)
(270,271,0)
(192,114,0)
(81,172,0)
(50,46,0)
(21,82,0)
(139,151,0)
(45,54,0)
(65,192,0)
(167,268,0)
(87,123,0)
(94,276,0)
(9,289,0)
(54,46,0)
(207,258,0)
(239,206,0)
(16,43,0)
(141,26,0)
(101,37,0)
(159,230,0)
(21,60,0)
(98,1,0)
(43,3,0)
(215,38,0)
(225,227,0)
(173,267,0)
(9,284,0)
(189,28,0)
(19,228,0)
(280,122,0)
(150,41,0)
(197,284,0)
(110,228,0)
(181,288,0)
(29,67,0)
(67,228,0)
(25,165,0)
(271,270,0)
(244,258,0)
(227,162,0)
(113,256,0)
(122,151,0)
(142,251,0)
(194,138,0)
(142,228,0)
(268,59,0)
(72,50,0)
(47,142,0)
(91,50,0)
(281,255,0)
(19,265,0)
(79,276,0)
(28,203,0)
(191,138,0)
(257,248,0)
(193,151,0)
(238,91,0)
(243,38,0)
(103,128,0)
(206,100,0)
(167,122,0)
(2,122,0)
(242,97,0)
(25,221,0)
(228,151,0)
(224,167,0)
(3,43,0)
(192,103,0)
(205,63,0)
(181,30,0)
(181,50,0)
(263,228,0)
(248,60,0)
(230,228,0)
(268,151,0)
(129,251,0)
(177,59,0)
(265,19,0)
(161,179,0)
(268,59,1)
(167,268,1)
(290,42,1)
(195,101,1)
(140,289,1)
(260,258,1)
(76,188,1)
(78,127,1)
(159,169,1)
(142,228,1)
(174,68,1)
(39,72,1)
(182,99,1)
(242,92,1)
(211,162,1)
(192,203,1)
(98,1,1)
(61,146,1)
(1,190,1)
(23,236,1)
(214,278,1)
(122,280,1)
(225,28,1)
(59,177,1)
(280,131,1)
(165,222,1)
(105,28,1)
(259,192,1)
(256,113,1)
(194,217,1)
(100,52,1)
(250,86,1)
(67,29,1)
(47,192,1)
(192,65,1)
(91,238,1)
(270,102,1)
(34,277,1)
(190,235,1)
(62,183,1)
(191,268,1)
(11,169,1)
(107,271,1)
(160,36,1)
(155,162,1)
(248,118,1)
(32,263,1)
(88,90,1)
(98,88,1)
(135,212,1)
(73,76,1)
(128,137,1)
(194,203,1)
(19,228,1)
(181,214,1)
(21,148,1)
(170,67,1)
(287,267,1)
(204,292,1)
(200,111,1)
(108,289,1)
(195,25,1)
(44,122,1)
(272,35,1)
(10,34,1)
(215,243,1)
(183,258,1)
(64,1,1)
(192,103,1)
(222,12,1)
(18,98,1)
(99,83,1)
(168,250,1)
(197,132,1)
(102,216,1)
(239,149,1)
(140,208,1)
(203,63,1)
(206,10,1)
(54,45,1)
(253,225,1)
(118,18,1)
(73,49,1)
(227,289,1)
(235,121,1)
(275,76,1)
(72,96,1)
(177,195,1)
(12,187,1)
(284,147,1)
(149,157,1)
(180,265,1)
(120,60,1)
(80,270,1)
(272,66,1)
(248,233,1)
(69,16,1)
(261,19,1)
(100,206,1)
(55,281,1)
(201,80,1)
(61,60,1)
(88,26,1)
(136,249,1)
(192,114,1)
(217,191,1)
(250,203,1)
(52,72,1)
(144,211,1)
(207,196,1)
(108,272,1)
(143,60,1)
(19,41,1)
(47,199,1)
(142,251,1)
(101,226,1)
(230,283,1)
(97,242,1)
(173,33,1)
(249,200,1)
(224,2,1)
(173,267,1)
(196,173,1)
(265,19,1)
(158,279,1)
(169,24,1)
(187,263,1)
(96,136,1)
(141,95,1)
(127,108,1)
(204,103,1)
(146,160,1)
(183,78,1)
(106,167,1)
(258,244,1)
(116,170,1)
(181,60,1)
(153,123,1)
(284,228,1)
(152,196,1)
(236,44,1)
(73,165,1)
(135,120,1)
(25,165,1)
(50,9,1)
(63,208,1)
(278,70,1)
(279,78,1)
(234,223,1)
(45,200,1)
(233,145,1)
(228,110,1)
(86,138,1)
(204,55,1)
(2,268,1)
(251,129,1)
(283,159,1)
(65,106,1)
(82,30,1)
(145,61,1)
(181,50,1)
(103,128,1)
(237,284,1)
(49,82,1)
(245,230,1)
(183,138,1)
(101,122,1)
(83,130,1)
(181,123,1)
(240,143,1)
(38,215,1)
(148,104,1)
(147,197,1)
(16,228,1)
(150,20,1)
(56,50,1)
(4,245,1)
(231,100,1)
(78,108,1)
(138,194,1)
(16,201,1)
(81,97,1)
(33,287,1)
(269,75,1)
(102,38,1)
(123,140,1)
(172,97,1)
(73,107,1)
(205,31,1)
(63,205,1)
(285,204,1)
(20,62,1)
(119,87,1)
(77,119,1)
(199,114,1)
(87,82,1)
(130,172,1)
(252,182,1)
(75,228,1)
(132,117,1)
(143,209,1)
(31,44,1)
(238,181,1)
(92,234,1)
(121,60,1)
(14,85,1)
(265,261,1)
(230,228,1)
(108,13,1)
(25,252,1)
(137,168,1)
(53,253,1)
(274,112,1)
(54,123,1)
(252,286,1)
(84,93,1)
(66,228,1)
(114,163,1)
(67,228,1)
(75,126,1)
(97,165,1)
(167,122,1)
(44,14,1)
(181,30,1)
(106,2,1)
(41,150,1)
(172,81,1)
(134,265,1)
(43,69,1)
(38,228,1)
(95,64,1)
(43,16,1)
(9,237,1)
(199,103,1)
(277,52,1)
(167,224,1)
(280,289,1)
(223,73,1)
(178,23,1)
(120,275,1)
(68,4,1)
(36,114,1)
(183,152,1)
(70,231,1)
(76,123,1)
(133,27,1)
(199,203,1)
(15,68,1)
(222,122,1)
(264,257,1)
(9,289,1)
(218,272,1)
(244,207,1)
(227,53,1)
(204,32,1)
(212,120,1)
(66,290,1)
(216,38,1)
(238,100,1)
(286,172,1)
(173,30,1)
(267,269,1)
(110,144,1)
(28,203,1)
(113,11,1)
(73,54,1)
(111,56,1)
(199,259,1)
(104,264,1)
(117,135,1)
(9,284,1)
(140,30,1)
(19,138,1)
(162,227,1)
(129,241,1)
(82,21,1)
(263,228,1)
(126,166,1)
(256,138,1)
(0,155,1)
(35,66,1)
(113,180,1)
(42,15,1)
(206,239,1)
(220,233,1)
(258,196,1)
(173,289,1)
(85,122,1)
(1,228,1)
(271,3,1)
(28,189,1)
(52,39,1)
(112,133,1)
(124,213,1)
(140,116,1)
(91,50,1)
(189,8,1)
(209,109,1)
(162,22,1)
(152,260,1)
(93,228,1)
(200,50,1)
(140,67,1)
(2,122,1)
(113,183,1)
(29,77,1)
(109,271,1)
(24,134,1)
(90,26,1)
(97,228,1)
(267,75,1)
(292,0,1)
(8,203,1)
(226,165,1)
(72,50,1)
(233,240,1)
(121,220,1)
(263,84,1)
(257,248,1)
(204,178,1)
(48,145,1)
(22,227,1)
(2,285,1)
(58,142,1)
(243,99,1)
(213,251,1)
(68,230,1)
(27,124,1)
(131,48,1)
(141,228,1)
(248,60,1)
(281,105,1)
(188,153,1)
(252,73,1)
(45,91,1)
(168,256,1)
(142,47,1)
(271,270,1)
(163,274,1)
(26,141,1)
(183,174,1)
(157,10,1)
(98,121,1)
(173,208,1)
(21,60,1)
(13,218,1)
(166,158,1)
(3,43,1)
(165,222,2)
(28,44,2)
(199,103,2)
(265,19,2)
(191,263,2)
(172,73,2)
(98,88,2)
(67,228,2)
(4,169,2)
(43,16,2)
(16,270,2)
(123,82,2)
(286,172,2)
(253,28,2)
(248,60,2)
(259,192,2)
(122,280,2)
(240,271,2)
(120,60,2)
(206,52,2)
(245,169,2)
(66,228,2)
(107,271,2)
(223,73,2)
(135,120,2)
(88,271,2)
(214,100,2)
(49,82,2)
(181,30,2)
(192,114,2)
(249,200,2)
(220,271,2)
(174,68,2)
(244,78,2)
(23,44,2)
(281,28,2)
(108,68,2)
(233,271,2)
(199,192,2)
(104,271,2)
(28,203,2)
(180,265,2)
(75,228,2)
(200,76,2)
(158,78,2)
(101,165,2)
(33,78,2)
(261,183,2)
(227,28,2)
(97,73,2)
(50,76,2)
(203,63,2)
(140,30,2)
(228,162,2)
(197,76,2)
(170,82,2)
(19,41,2)
(140,289,2)
(141,228,2)
(98,1,2)
(269,78,2)
(199,203,2)
(103,128,2)
(26,271,2)
(173,30,2)
(225,28,2)
(50,9,2)
(206,239,2)
(140,82,2)
(284,76,2)
(39,200,2)
(267,78,2)
(169,265,2)
(21,60,2)
(272,66,2)
(230,169,2)
(284,228,2)
(138,263,2)
(212,76,2)
(19,183,2)
(8,44,2)
(137,263,2)
(108,272,2)
(239,52,2)
(52,72,2)
(167,2,2)
(178,44,2)
(183,138,2)
(42,68,2)
(1,228,2)
(194,203,2)
(235,271,2)
(110,162,2)
(211,162,2)
(287,78,2)
(18,271,2)
(84,162,2)
(130,172,2)
(90,271,2)
(72,200,2)
(290,68,2)
(233,145,2)
(201,270,2)
(155,162,2)
(103,263,2)
(72,50,2)
(98,121,2)
(258,78,2)
(183,169,2)
(270,99,2)
(217,263,2)
(192,103,2)
(97,242,2)
(264,271,2)
(173,289,2)
(188,82,2)
(173,78,2)
(10,52,2)
(41,183,2)
(135,76,2)
(100,206,2)
(207,78,2)
(100,200,2)
(54,123,2)
(265,183,2)
(195,263,2)
(209,271,2)
(138,194,2)
(26,141,2)
(190,271,2)
(165,263,2)
(61,60,2)
(167,122,2)
(24,265,2)
(73,165,2)
(66,68,2)
(181,100,2)
(231,100,2)
(203,44,2)
(76,123,2)
(267,75,2)
(168,263,2)
(166,78,2)
(257,248,2)
(11,169,2)
(200,50,2)
(192,203,2)
(144,162,2)
(215,99,2)
(78,108,2)
(140,208,2)
(121,60,2)
(258,196,2)
(263,162,2)
(177,263,2)
(152,196,2)
(99,172,2)
(29,82,2)
(31,44,2)
(108,289,2)
(81,73,2)
(196,78,2)
(109,271,2)
(271,270,2)
(199,114,2)
(222,122,2)
(141,271,2)
(280,289,2)
(121,271,2)
(236,44,2)
(248,271,2)
(56,76,2)
(181,123,2)
(153,82,2)
(145,61,2)
(230,228,2)
(218,68,2)
(105,28,2)
(62,183,2)
(83,172,2)
(2,122,2)
(78,68,2)
(43,270,2)
(100,52,2)
(87,82,2)
(189,44,2)
(123,140,2)
(194,263,2)
(15,68,2)
(228,110,2)
(111,76,2)
(119,82,2)
(150,183,2)
(21,271,2)
(68,230,2)
(222,263,2)
(34,52,2)
(9,76,2)
(238,200,2)
(134,265,2)
(13,68,2)
(35,68,2)
(116,82,2)
(196,173,2)
(82,21,2)
(216,99,2)
(3,43,2)
(82,30,2)
(128,263,2)
(2,268,2)
(148,271,2)
(250,138,2)
(114,163,2)
(16,228,2)
(263,228,2)
(260,258,2)
(91,50,2)
(93,162,2)
(237,76,2)
(72,96,2)
(140,67,2)
(53,28,2)
(44,122,2)
(9,284,2)
(73,99,2)
(242,73,2)
(270,102,2)
(64,271,2)
(279,78,2)
(136,200,2)
(132,76,2)
(1,271,2)
(173,208,2)
(86,138,2)
(243,99,2)
(117,76,2)
(147,76,2)
(272,68,2)
(120,76,2)
(32,263,2)
(234,73,2)
(126,78,2)
(162,227,2)
(206,10,2)
(3,270,2)
(257,271,2)
(77,82,2)
(181,60,2)
(227,53,2)
(187,263,2)
(38,99,2)
(63,208,2)
(92,73,2)
(22,28,2)
(227,289,2)
(271,99,2)
(70,100,2)
(67,82,2)
(182,99,2)
(268,263,2)
(181,50,2)
(0,162,2)
(127,68,2)
(268,59,2)
(173,267,2)
(224,2,2)
(102,99,2)
(250,203,2)
(19,228,2)
(25,165,2)
(95,271,2)
(98,271,2)
(82,271,2)
(149,52,2)
(80,270,2)
(45,76,2)
(97,228,2)
(172,97,2)
(38,228,2)
(69,270,2)
(76,82,2)
(55,28,2)
(283,169,2)
(19,138,2)
(68,169,2)
(252,165,2)
(256,138,2)
(96,200,2)
(167,268,2)
(133,27,2)
(159,169,2)
(54,76,2)
(143,60,2)
(226,165,2)
(113,138,2)
(278,100,2)
(143,271,2)
(277,52,2)
(88,26,2)
(157,52,2)
(12,263,2)
(142,251,2)
(63,44,2)
(248,233,2)
(205,44,2)
(102,38,2)
(162,28,2)
(52,200,2)
(118,271,2)
(97,165,2)
(275,76,2)
(59,263,2)
(142,228,2)
(20,183,2)
(271,3,2)
(101,122,2)
(9,289,2)
(91,200,2)
(75,78,2)
(292,162,2)
(152,258,2)
-----------------------------------
(0,perror("fstat")
(1,de->d_name)
(2,hSource >= 0)
(3,!strcmp(de->d_name, "..")
(4,3)
(5,der)
(6,)
(7,de)
(8,hDest)
(9,openat(source, de->d_name, O_RDONLY)
(10,sbuf.st_dev)
(11,break;)
(12,hSource)
(13,AT_SYMLINK_NOFOLLOW)
(14,0)
(15,source)
(16,de->d_name)
(17,if (hSource >= 0)
(18,fullName)
(19,readdir_r(dh, de, &der)
(20,de)
(21,fullName->buf)
(22,0)
(23,perror("dup")
(24,NULL)
(25,closedir(dh)
(26,strlen(de->d_name)
(27,-1)
(28,hDest < 0)
(29,d_name)
(30,NiBackup *ni)
(31,hDest)
(32,goto done;)
(33,dest)
(34,st_dev)
(35,3)
(36,fnl)
(37,)
(38,de->d_name)
(39,0)
(40,if (fstat(source, &sbuf)
(41,&der)
(42,de)
(43,strcmp(de->d_name, "..")
(44,hSource < 0)
(45,dFd)
(46,)
(47,de)
(48,hSource)
(49,continue;)
(50,sFd = openat(source, de->d_name, O_RDONLY)
(51,hSource)
(52,fstat(sFd, &tbuf)
(53,&sbuf)
(54,close(dFd)
(55,goto done;)
(56,sFd)
(57,if (hDest < 0)
(58,RET)
(59,-1)
(60,struct Buffer_char *fullName)
(61,fullName->bufused)
(62,dh)
(63,dup(dest)
(64,de)
(65,0)
(66,de->d_name)
(67,de->d_name)
(68,strncmp(de->d_name, "nii", 3)
(69,"..")
(70,sFd)
(71,)
(72,fstat(sFd, &tbuf)
(73,1)
(74,if (bpfd >= 0)
(75,de->d_name)
(76,dFd >= 0)
(77,de)
(78,faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW)
(79,if (excluded(ni, fullName->buf)
(80,de)
(81,0)
(82,excluded(ni, fullName->buf)
(83,NULL)
(84,NULL)
(85,hSource)
(86,hDest)
(87,dFd)
(88,strlen(de->d_name)
(89,if ((dh = fdopendir(hDest)
(90,1)
(91,close(sFd)
(92,der)
(93,de)
(94,if (!strcmp(de->d_name, ".")
(95,d_name)
(96,&tbuf)
(97,readdir_r(dh, de, &der)
(98,WRITE_BUFFER(*fullName, de->d_name, strlen(de->d_name)
(99,der == NULL)
(100,fstat(sFd, &tbuf)
(101,close(hSource)
(102,strcmp(de->d_name, ".")
(103,hDest = -1)
(104,fullName)
(105,"dup")
(106,hDest)
(107,continue;)
(108,faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW)
(109,fullName)
(110,malloc(direntLen)
(111,0)
(112,hDest)
(113,dh)
(114,hDest = -1)
(115,)
(116,dest)
(117,sFd)
(118,bufused)
(119,ni)
(120,*fullName)
(121,*fullName)
(122,hSource = dup(source)
(123,dFd = backupPath(ni, de->d_name, source, dest)
(124,1)
(125,)
(126,d_name)
(127,0)
(128,-1)
(129,NULL)
(130,der)
(131,source)
(132,source)
(133,hSource = -1)
(134,der)
(135,WRITE_ONE_BUFFER(*fullName, \'/\')
(136,tbuf)
(137,1)
(138,dh = fdopendir(hDest)
(139,hDest)
(140,backupPath(ni, de->d_name, source, dest)
(141,de->d_name)
(142,free(de)
(143,fullName->bufused)
(144,direntLen)
(145,fnl = fullName->bufused)
(146,bufused)
(147,d_name)
(148,buf)
(149,st_dev)
(150,der)
(151,)
(152,close(bpfd)
(153,dFd)
(154,if (der == NULL)
(155,"fstat")
(156,sbuf)
(157,tbuf)
(158,ni)
(159,de)
(160,fullName)
(161,while (1)
(162,fstat(source, &sbuf)
(163,-1)
(164,)
(165,dh = fdopendir(hSource)
(166,de)
(167,close(hSource)
(168,hDest)
(169,der == NULL)
(170,source)
(171,if (readdir_r(dh, de, &der)
(172,readdir_r(dh, de, &der)
(173,backupPath(ni, de->d_name + 3, source, dest)
(174,continue;)
(175,if (sFd >= 0)
(176,if (readdir_r(dh, de, &der)
(177,1)
(178,goto done;)
(179,)
(180,break;)
(181,backupRecursiveF(ni, sFd, dFd, fullName)
(182,break;)
(183,1)
(184,dFd)
(185,bpfd)
(186,if (fstat(sFd, &tbuf)
(187,dh)
(188,0)
(189,0)
(190,d_name)
(191,dh)
(192,hDest >= 0)
(193,done:)
(194,fdopendir(hDest)
(195,hSource)
(196,bpfd = backupPath(ni, de->d_name + 3, source, dest)
(197,de)
(198,)
(199,close(hDest)
(200,sFd >= 0)
(201,d_name)
(202,if (faccessat(source, de->d_name + 3, F_OK, AT_SYMLINK_NOFOLLOW)
(203,hDest = dup(dest)
(204,hSource)
(205,dest)
(206,sbuf.st_dev == tbuf.st_dev)
(207,bpfd)
(208,int dest)
(209,bufused)
(210,if (de == NULL)
(211,de)
(212,\'/\')
(213,hSource)
(214,fullName)
(215,d_name)
(216,".")
(217,hDest)
(218,F_OK)
(219,if (der == NULL)
(220,fullName)
(221,)
(222,fdopendir(hSource)
(223,dh)
(224,hSource)
(225,source)
(226,hSource)
(227,fstat(source, &sbuf)
(228,de = malloc(direntLen)
(229,dh)
(230,de->d_name)
(231,ni)
(232,if (dFd >= 0)
(233,fullName->bufused = fnl)
(234,de)
(235,de)
(236,"dup")
(237,O_RDONLY)
(238,sFd)
(239,tbuf.st_dev)
(240,fnl)
(241,de)
(242,&der)
(243,de)
(244,0)
(245,"nii")
(246,if (strncmp(de->d_name, "nii", 3)
(247,fnl)
(248,fullName->bufused)
(249,sFd)
(250,close(hDest)
(251,*de = NULL)
(252,dh)
(253,sbuf)
(254,if (hSource < 0)
(255,)
(256,closedir(dh)
(257,fullName->bufused--)
(258,bpfd >= 0)
(259,hDest)
(260,bpfd)
(261,0)
(262,while (1)
(263,de == NULL)
(264,ni)
(265,readdir_r(dh, de, &der)
(266,sFd)
(267,de->d_name + 3)
(268,hSource = -1)
(269,3)
(270,!strcmp(de->d_name, ".")
(271,!strcmp(de->d_name, ".")
(272,de->d_name + 3)
(273,if ((dh = fdopendir(hSource)
(274,1)
(275,fullName)
(276,)
(277,sbuf)
(278,dFd)
(279,bpfd)
(280,dup(source)
(281,perror("dup")
(282,if (hDest >= 0)
(283,d_name)
(284,de->d_name)
(285,0)
(286,break;)
(287,source)
(288,)
(289,int source)
(290,d_name)
(291,tbuf)
(292,goto done;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^