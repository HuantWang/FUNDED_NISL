-----label-----
0
-----code-----
static void goodB2G1()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(8)
    {
    case 7:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Deallocate memory */
        free(data);
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
69,70
70,71
70,72
71,72
75,76
75,77
77,78
77,79
77,80
77,81
77,82
77,83
78,79
80,81
81,82
81,83
82,83
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,67,68,72,73,74,76,79,83,84,85,86,90,92,93
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G1(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }}
static void
goodB2G1()
goodB2G1
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }
8
{    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }
case 7:
7
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(45,30,0)
(26,46,0)
(19,46,0)
(44,46,0)
(28,12,0)
(3,24,0)
(12,18,0)
(13,24,0)
(42,5,0)
(14,28,0)
(43,38,0)
(6,1,0)
(9,18,0)
(38,46,0)
(40,32,0)
(1,32,0)
(14,7,0)
(30,36,0)
(0,46,0)
(18,12,0)
(2,36,0)
(15,46,0)
(25,13,0)
(28,14,0)
(17,1,0)
(20,32,0)
(27,39,0)
(3,1,0)
(10,36,0)
(24,14,0)
(21,12,0)
(29,32,0)
(24,46,0)
(39,24,0)
(13,46,0)
(7,14,0)
(14,24,0)
(5,42,0)
(4,3,0)
(33,24,0)
(38,24,0)
(47,5,0)
(31,13,0)
(16,26,0)
(41,39,0)
(12,28,0)
(3,36,0)
(23,36,0)
(22,36,0)
(42,8,0)
(11,46,0)
(27,24,1)
(39,41,1)
(45,34,1)
(38,24,1)
(33,35,1)
(3,4,1)
(5,47,1)
(21,33,1)
(47,39,1)
(10,30,1)
(24,14,1)
(37,22,1)
(18,9,1)
(43,13,1)
(13,25,1)
(4,34,1)
(3,24,1)
(25,31,1)
(9,21,1)
(41,27,1)
(17,6,1)
(11,26,1)
(16,35,1)
(37,10,1)
(22,3,1)
(35,1,1)
(19,38,1)
(1,17,1)
(3,1,1)
(14,7,1)
(38,43,1)
(31,39,1)
(14,28,1)
(39,24,1)
(34,19,1)
(28,12,1)
(30,45,1)
(12,18,1)
(13,24,1)
(31,42,1)
(34,11,1)
(26,16,1)
(42,5,1)
(39,24,2)
(42,5,2)
(3,1,2)
(28,35,2)
(45,34,2)
(18,35,2)
(12,18,2)
(14,7,2)
(11,35,2)
(14,28,2)
(38,24,2)
(41,35,2)
(42,39,2)
(12,35,2)
(26,35,2)
(27,35,2)
(4,34,2)
(31,35,2)
(25,35,2)
(43,35,2)
(5,39,2)
(39,35,2)
(28,12,2)
(13,24,2)
(38,35,2)
(33,35,2)
(19,35,2)
(21,35,2)
(47,39,2)
(13,35,2)
(3,24,2)
(3,34,2)
(24,14,2)
(24,35,2)
(22,34,2)
(9,35,2)
(16,35,2)
(30,34,2)
(14,35,2)
(10,34,2)
-----------------------------------
(0,default:)
(1,data = NULL)
(2,default:)
(3,free(data)
(4,data)
(5,-1)
(6,data)
(7,char *)
(8,)
(9,char)
(10,break;)
(11,break;)
(12,100*sizeof(char)
(13,strcpy(data, "A String")
(14,(char *)
(15,if (data == NULL)
(16,"Benign, fixed string")
(17,NULL)
(18,sizeof(char)
(19,break;)
(20,switch(8)
(21,100)
(22,break;)
(23,case 7:)
(24,data = (char *)
(25,"A String")
(26,printLine("Benign, fixed string")
(27,data)
(28,malloc(100*sizeof(char)
(29,switch(6)
(30,printLine("Benign, fixed string")
(31,data)
(32,)
(33,data)
(34,8)
(35,6)
(36,)
(37,RET)
(38,printLine(data)
(39,data == NULL)
(40,data)
(41,NULL)
(42,exit(-1)
(43,data)
(44,case 6:)
(45,"Benign, fixed string")
(46,)
(47,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^