-----label-----
0
-----code-----
static void goodB2G2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
88,89
88,90
89,90
91,92
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,82,86,87,90,95,97
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(19,36,0)
(29,18,0)
(9,15,0)
(31,1,0)
(36,43,0)
(15,16,0)
(28,8,0)
(14,31,0)
(5,29,0)
(15,21,0)
(46,0,0)
(8,28,0)
(30,37,0)
(17,8,0)
(23,36,0)
(18,43,0)
(48,36,0)
(36,48,0)
(46,7,0)
(42,31,0)
(22,45,0)
(6,43,0)
(14,36,0)
(6,37,0)
(48,17,0)
(21,44,0)
(45,36,0)
(37,6,0)
(51,23,0)
(7,46,0)
(37,30,0)
(17,48,0)
(3,48,0)
(29,13,0)
(33,44,0)
(23,51,0)
(12,14,0)
(39,23,0)
(47,13,0)
(1,43,0)
(34,43,0)
(51,37,0)
(20,45,0)
(35,18,0)
(31,14,0)
(11,14,0)
(15,36,0)
(8,17,0)
(50,23,0)
(49,7,0)
(32,21,0)
(38,13,0)
(25,44,0)
(13,29,0)
(48,3,0)
(26,17,0)
(13,36,0)
(40,1,0)
(4,21,0)
(24,44,0)
(37,51,0)
(22,20,1)
(45,36,1)
(40,31,1)
(10,6,1)
(23,36,1)
(37,51,1)
(14,36,1)
(48,17,1)
(7,49,1)
(51,23,1)
(10,41,1)
(46,7,1)
(39,18,1)
(29,13,1)
(15,36,1)
(12,45,1)
(21,32,1)
(11,12,1)
(18,35,1)
(38,1,1)
(6,37,1)
(14,11,1)
(35,29,1)
(15,9,1)
(41,21,1)
(47,38,1)
(1,40,1)
(19,41,1)
(36,48,1)
(27,15,1)
(31,42,1)
(23,50,1)
(42,14,1)
(13,47,1)
(32,4,1)
(12,46,1)
(37,30,1)
(8,26,1)
(45,22,1)
(49,45,1)
(15,21,1)
(27,10,1)
(31,14,1)
(20,36,1)
(13,36,1)
(5,13,1)
(8,28,1)
(26,19,1)
(50,39,1)
(29,5,1)
(17,8,1)
(9,10,1)
(48,3,1)
(39,41,2)
(19,41,2)
(15,36,2)
(36,41,2)
(40,41,2)
(46,45,2)
(42,41,2)
(6,37,2)
(8,41,2)
(51,41,2)
(26,41,2)
(5,41,2)
(23,36,2)
(46,7,2)
(48,3,2)
(45,41,2)
(17,8,2)
(50,41,2)
(13,36,2)
(51,23,2)
(22,41,2)
(11,41,2)
(31,14,2)
(29,41,2)
(15,21,2)
(17,41,2)
(48,41,2)
(48,17,2)
(47,41,2)
(29,13,2)
(6,41,2)
(35,41,2)
(14,36,2)
(14,41,2)
(36,48,2)
(38,41,2)
(45,36,2)
(49,45,2)
(37,51,2)
(37,30,2)
(8,28,2)
(1,41,2)
(31,41,2)
(7,45,2)
(15,10,2)
(13,41,2)
(23,41,2)
(9,10,2)
(18,41,2)
(12,41,2)
(20,41,2)
(37,41,2)
-----------------------------------
(0,)
(1,data[0].intOne = 0)
(2, sizeof(struct _twoIntsStruct)
(3,struct _twoIntsStruct *)
(4,data)
(5,intTwo)
(6,printStructLine((twoIntsStruct *)
(7,-1)
(8,sizeof(struct _twoIntsStruct)
(9,data)
(10,STATIC_CONST_TRUE)
(11,0)
(12,data)
(13,data[0])
(14,data[0])
(15,free(data)
(16,)
(17,calloc(100, sizeof(struct _twoIntsStruct)
(18,data[0].intTwo = 0)
(19,data)
(20,data)
(21,data = NULL)
(22,NULL)
(23,data[0])
(24,data)
(25,if(STATIC_CONST_TRUE)
(26,100)
(27,RET)
(28,struct _twoIntsStruct)
(29,data[0].intTwo)
(30,twoIntsStruct *)
(31,data[0].intOne)
(32,NULL)
(33,if(STATIC_CONST_TRUE)
(34,if (data == NULL)
(35,0)
(36,data = (struct _twoIntsStruct *)
(37,(twoIntsStruct *)
(38,data)
(39,data)
(40,0)
(41,STATIC_CONST_TRUE)
(42,intOne)
(43,)
(44,)
(45,data == NULL)
(46,exit(-1)
(47,0)
(48,(struct _twoIntsStruct *)
(49,1)
(50,0)
(51,&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^