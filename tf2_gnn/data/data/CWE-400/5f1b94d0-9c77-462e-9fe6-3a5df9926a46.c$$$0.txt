-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68b_badSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_badData;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68b_badSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68b_badSink()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68b_badSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_badData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_badData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_badData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_badData
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(40,12,0)
(24,38,0)
(1,17,0)
(34,12,0)
(24,36,0)
(38,24,0)
(3,12,0)
(33,8,0)
(19,37,0)
(22,27,0)
(9,31,0)
(40,37,0)
(29,26,0)
(25,2,0)
(17,1,0)
(0,20,0)
(3,37,0)
(30,31,0)
(22,4,0)
(35,8,0)
(15,29,0)
(4,17,0)
(11,27,0)
(20,37,0)
(23,20,0)
(14,22,0)
(10,5,0)
(4,22,0)
(21,33,0)
(2,39,0)
(22,29,0)
(13,40,0)
(7,29,0)
(6,26,0)
(18,3,0)
(16,40,0)
(31,26,0)
(8,33,0)
(5,12,0)
(32,38,0)
(37,17,0)
(33,29,0)
(17,37,0)
(37,12,0)
(5,37,0)
(17,4,0)
(27,22,0)
(8,35,1)
(33,29,1)
(5,10,1)
(37,17,1)
(22,27,1)
(33,8,1)
(13,24,1)
(19,33,1)
(20,37,1)
(40,16,1)
(21,29,1)
(28,3,1)
(24,38,1)
(3,37,1)
(27,11,1)
(32,20,1)
(10,40,1)
(14,19,1)
(40,37,1)
(5,37,1)
(17,1,1)
(0,37,1)
(20,23,1)
(13,20,1)
(25,33,1)
(4,22,1)
(17,4,1)
(28,2,1)
(3,18,1)
(2,25,1)
(29,15,1)
(15,7,1)
(22,29,1)
(35,21,1)
(18,5,1)
(23,0,1)
(11,14,1)
(38,32,1)
(16,13,1)
(40,37,2)
(17,1,2)
(5,37,2)
(40,33,2)
(22,33,2)
(24,20,2)
(17,33,2)
(14,33,2)
(32,20,2)
(37,33,2)
(17,4,2)
(3,37,2)
(10,33,2)
(2,33,2)
(20,33,2)
(23,33,2)
(3,33,2)
(18,33,2)
(27,33,2)
(22,27,2)
(5,33,2)
(38,20,2)
(13,33,2)
(4,33,2)
(25,33,2)
(22,29,2)
(33,8,2)
(11,33,2)
(33,29,2)
(16,33,2)
(4,22,2)
(20,37,2)
(19,33,2)
(37,17,2)
(0,33,2)
(24,38,2)
-----------------------------------
(0,myString)
(1,wchar_t *)
(2,printLine("Input is less than the length of the source string")
(3,free(myString)
(4,malloc(data*sizeof(wchar_t)
(5,printWLine(myString)
(6,data)
(7,data)
(8,wcslen(HELLO_STRING)
(9,if (data > wcslen(HELLO_STRING)
(10,myString)
(11,wchar_t)
(12,)
(13,myString)
(14,data)
(15,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_badData)
(16,HELLO_STRING)
(17,(wchar_t *)
(18,myString)
(19,myString)
(20,myString == NULL)
(21,data)
(22,data*sizeof(wchar_t)
(23,NULL)
(24,exit(-1)
(25,"Input is less than the length of the source string")
(26,)
(27,sizeof(wchar_t)
(28,RET)
(29,data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_badData)
(30,myString)
(31,)
(32,1)
(33,data > wcslen(HELLO_STRING)
(34,if (myString == NULL)
(35,HELLO_STRING)
(36,)
(37,myString = (wchar_t *)
(38,-1)
(39,)
(40,wcscpy(myString, HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^