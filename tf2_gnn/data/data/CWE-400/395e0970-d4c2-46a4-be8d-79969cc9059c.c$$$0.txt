-----label-----
0
-----code-----
static void goodG2B2()
{
    twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
47,49
48,49
48,50
49,50
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
67,68
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
77,78
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,50,51,52,53,59,60,61,62,66,70,71,75,76,78
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
55,56
55,57
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(0,20,0)
(8,37,0)
(21,32,0)
(5,16,0)
(26,14,0)
(37,11,0)
(9,8,0)
(10,14,0)
(12,32,0)
(29,16,0)
(4,39,0)
(33,2,0)
(7,38,0)
(40,29,0)
(8,16,0)
(31,21,0)
(25,30,0)
(27,14,0)
(28,20,0)
(35,26,0)
(42,26,0)
(20,7,0)
(16,29,0)
(39,3,0)
(22,11,0)
(15,30,0)
(4,30,0)
(41,32,0)
(18,24,0)
(36,7,0)
(30,4,0)
(30,16,0)
(19,14,0)
(38,3,0)
(39,4,0)
(12,29,0)
(32,12,0)
(37,8,0)
(7,20,0)
(1,37,0)
(13,24,0)
(29,40,0)
(29,12,0)
(16,3,0)
(23,38,0)
(34,2,0)
(32,21,0)
(11,3,0)
(6,8,0)
(20,16,0)
(1,8,1)
(0,28,1)
(11,22,1)
(13,2,1)
(30,15,1)
(32,21,1)
(2,34,1)
(22,37,1)
(8,9,1)
(30,16,1)
(16,29,1)
(36,20,1)
(7,20,1)
(24,18,1)
(9,6,1)
(15,25,1)
(6,38,1)
(31,41,1)
(20,16,1)
(5,2,1)
(7,36,1)
(17,24,1)
(4,30,1)
(21,31,1)
(13,39,1)
(39,4,1)
(26,42,1)
(37,8,1)
(42,35,1)
(41,5,1)
(38,23,1)
(33,26,1)
(34,33,1)
(28,16,1)
(18,13,1)
(29,12,1)
(23,7,1)
(25,11,1)
(8,16,1)
(12,32,1)
(29,40,1)
(20,0,1)
(37,1,1)
(37,2,2)
(25,2,2)
(20,2,2)
(1,2,2)
(39,4,2)
(8,2,2)
(16,2,2)
(32,21,2)
(23,2,2)
(39,2,2)
(32,2,2)
(22,2,2)
(0,2,2)
(12,2,2)
(9,2,2)
(36,2,2)
(11,2,2)
(38,2,2)
(8,16,2)
(21,2,2)
(30,16,2)
(37,8,2)
(41,2,2)
(15,2,2)
(30,2,2)
(31,2,2)
(4,30,2)
(12,32,2)
(28,2,2)
(7,2,2)
(29,40,2)
(7,20,2)
(6,2,2)
(29,12,2)
(29,2,2)
(4,2,2)
(16,29,2)
(20,16,2)
(5,2,2)
-----------------------------------
(0,0)
(1,intTwo)
(2,STATIC_CONST_FIVE==5)
(3,)
(4,&data[0])
(5,data)
(6,data)
(7,data[0].intOne)
(8,data[0])
(9,0)
(10,data)
(11,data[0].intTwo = 0)
(12,ALLOCA(100*sizeof(twoIntsStruct)
(13,STATIC_CONST_FIVE)
(14,)
(15,0)
(16,data = (twoIntsStruct *)
(17,RET)
(18,5)
(19,if(STATIC_CONST_FIVE==5)
(20,data[0])
(21,sizeof(twoIntsStruct)
(22,0)
(23,0)
(24,STATIC_CONST_FIVE==5)
(25,data)
(26,data = NULL)
(27,if(STATIC_CONST_FIVE==5)
(28,data)
(29,(twoIntsStruct *)
(30,data[0])
(31,twoIntsStruct)
(32,100*sizeof(twoIntsStruct)
(33,STATIC_CONST_FIVE)
(34,5)
(35,data)
(36,intOne)
(37,data[0].intTwo)
(38,data[0].intOne = 0)
(39,printStructLine(&data[0])
(40,twoIntsStruct *)
(41,100)
(42,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^