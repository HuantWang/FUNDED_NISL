-----label-----
0
-----code-----
static void goodG2B2()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalTrue)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
45,47
46,47
46,48
47,48
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
65,66
66,67
66,68
67,68
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,48,49,50,51,57,58,59,60,64,68,69,72,74
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalTrue
globalTrue
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(6,3,0)
(2,11,0)
(28,24,0)
(29,5,0)
(1,11,0)
(32,33,0)
(3,33,0)
(33,32,0)
(1,30,0)
(4,38,0)
(20,4,0)
(33,3,0)
(16,30,0)
(7,24,0)
(38,4,0)
(3,16,0)
(29,16,0)
(15,14,0)
(11,0,0)
(36,4,0)
(27,16,0)
(32,24,0)
(37,30,0)
(5,29,0)
(22,25,0)
(30,37,0)
(10,0,0)
(30,16,0)
(11,1,0)
(4,16,0)
(25,14,0)
(18,38,0)
(23,3,0)
(31,29,0)
(8,14,0)
(30,1,0)
(17,7,0)
(21,28,0)
(26,14,0)
(38,7,0)
(12,25,0)
(0,11,0)
(16,24,0)
(35,5,0)
(5,28,0)
(19,29,0)
(23,7,1)
(20,36,1)
(38,18,1)
(7,17,1)
(31,16,1)
(21,5,1)
(28,21,1)
(35,29,1)
(34,32,1)
(18,4,1)
(6,23,1)
(30,1,1)
(22,12,1)
(10,2,1)
(11,0,1)
(33,3,1)
(17,38,1)
(0,10,1)
(36,28,1)
(2,27,1)
(3,6,1)
(29,19,1)
(25,22,1)
(9,34,1)
(5,35,1)
(29,16,1)
(34,13,1)
(32,33,1)
(13,25,1)
(3,16,1)
(38,4,1)
(4,16,1)
(30,37,1)
(1,11,1)
(5,29,1)
(4,20,1)
(27,13,1)
(19,31,1)
(16,30,1)
(29,13,2)
(4,13,2)
(30,1,2)
(5,29,2)
(28,13,2)
(16,13,2)
(4,16,2)
(11,0,2)
(16,30,2)
(27,13,2)
(32,33,2)
(23,13,2)
(2,13,2)
(19,13,2)
(10,13,2)
(17,13,2)
(29,16,2)
(35,13,2)
(32,13,2)
(21,13,2)
(1,11,2)
(33,13,2)
(6,13,2)
(30,13,2)
(36,13,2)
(5,13,2)
(30,37,2)
(38,4,2)
(38,13,2)
(33,3,2)
(3,16,2)
(18,13,2)
(20,13,2)
(31,13,2)
(11,13,2)
(3,13,2)
(1,13,2)
(0,13,2)
(7,13,2)
-----------------------------------
(0,sizeof(twoIntsStruct)
(1,ALLOCA(100*sizeof(twoIntsStruct)
(2,100)
(3,data[0])
(4,data[0])
(5,data[0].intOne)
(6,0)
(7,data[0].intTwo = 0)
(8,data)
(9,RET)
(10,twoIntsStruct)
(11,100*sizeof(twoIntsStruct)
(12,data)
(13,globalTrue)
(14,)
(15,if(globalTrue)
(16,data = (twoIntsStruct *)
(17,0)
(18,intTwo)
(19,0)
(20,0)
(21,0)
(22,NULL)
(23,data)
(24,)
(25,data = NULL)
(26,if(globalTrue)
(27,data)
(28,data[0].intOne = 0)
(29,data[0])
(30,(twoIntsStruct *)
(31,data)
(32,printStructLine(&data[0])
(33,&data[0])
(34,globalTrue)
(35,intOne)
(36,data)
(37,twoIntsStruct *)
(38,data[0].intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^