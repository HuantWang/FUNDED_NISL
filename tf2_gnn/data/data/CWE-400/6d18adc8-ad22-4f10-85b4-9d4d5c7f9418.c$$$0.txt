-----label-----
1
-----code-----
void
thread_lock_released(const void *lock, enum thread_lock_kind kind,
	const void *element)
{
	struct thread_element *te = deconstify_pointer(element);
	struct thread_lock_stack *tls;
	const struct thread_lock *l;
	unsigned i;

	/*
	 * For the same reasons as in thread_lock_got(), lazily grab the thread
	 * element.  Note that we may be in a situation where we did not get a
	 * thread element at lock time but are able to get one now.
	 */

	if (NULL == te) {
		te = thread_find(&te);
	} else {
		thread_element_check(te);
	}

	if G_UNLIKELY(NULL == te)
		return;

	tls = &te->locks;

	if G_UNLIKELY(0 == tls->count) {
		/*
		 * Warn only if we have seen a lock once (te->stack_lock != NULL)
		 * and when the stack is larger than the first lock acquired.
		 *
		 * Otherwise, it means that we're poping out from the place where
		 * we first recorded a lock, and therefore it is obvious we cannot
		 * have the lock recorded since we're before the call chain that
		 * could record the first lock.
		 */

		if (
			te->stack_lock != NULL &&
			thread_stack_ptr_cmp(&te, te->stack_lock) >= 0
		) {
			/* Locks may be missing in pass-through mode */
			if (!atomic_int_get(&thread_locks_disabled)) {
				s_minicarp("%s(): %s %p was not registered in thread #%u",
					G_STRFUNC, thread_lock_kind_to_string(kind),
					lock, te->stid);
			}
		}
		return;
	}

	/*
	 * If lock is the top of the stack, we're done.
	 */

	l = &tls->arena[tls->count - 1];

	if G_LIKELY(l->lock == lock) {
		g_assert_log(l->kind == kind,
			"%s(): %s %p is actually registered as %s in thread #%u",
			G_STRFUNC, thread_lock_kind_to_string(kind), lock,
			thread_lock_kind_to_string(l->kind), te->stid);

		tls->count--;

		/*
		 * Handle signals if any are pending and can be delivered.
		 */

		if G_UNLIKELY(thread_sig_pending(te)) {
			THREAD_STATS_INCX(sig_handled_while_unlocking);
			thread_sig_handle(te);
		}

		/*
		 * If the thread no longer holds any locks and it has to be suspended,
		 * now is a good (and safe) time to do it.
		 */

		if G_UNLIKELY(te->suspend && 0 == tls->count)
			thread_suspend_self(te);

		return;
	}

	/*
	 * Since the lock was not the one at the top of the stack, then it must be
	 * absent in the whole stack, or we have an out-of-order lock release.
	 */

	if (tls->overflow)
		return;				/* Stack overflowed, we're crashing */

	for (i = 0; i < tls->count; i++) {
		const struct thread_lock *ol = &tls->arena[i];

		if (ol->lock == lock) {
			tls->overflow = TRUE;	/* Avoid any overflow problems now */
			s_rawwarn("%s releases %s %p at inner position %u/%zu",
				thread_element_name(te), thread_lock_kind_to_string(kind),
				lock, i + 1, tls->count);
			thread_lock_dump(te);

			/*
			 * If crashing, it's interesting to learn about possible
			 * out-of-order unlocking, because it may point to a true
			 * bug in the crash handling, but let processing continue
			 * to be able to dump useful information anyway.
			 */

			if (
				!thread_is_crashing() &&
				0 == atomic_int_get(&thread_locks_disabled)
			) {
				s_error("out-of-order %s release",
					thread_lock_kind_to_string(kind));
			}
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
15,16
15,17
17,18
17,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
20,30
20,31
20,32
21,22
22,23
22,24
23,24
25,26
25,27
25,28
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
49,50
49,51
51,52
53,54
53,55
53,56
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
64,66
65,66
67,68
68,69
70,71
71,72
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
83,84
83,85
84,85
87,88
88,89
89,90
89,91
90,91
92,93
93,94
93,95
94,95
94,96
95,96
98,99
98,100
99,100
99,101
100,101
104,105
105,106
105,107
106,107
106,108
107,108
111,112
111,113
111,114
111,115
112,113
113,114
113,115
114,115
117,118
117,119
118,119
120,121
120,122
121,122
124,125
125,126
127,128
127,129
128,129
129,130
129,131
130,131
132,133
132,134
132,135
135,136
136,137
137,138
137,139
138,139
138,140
139,140
142,143
144,145
144,146
145,146
145,147
146,147
146,148
147,148
150,151
152,153
152,154
152,155
152,156
153,154
154,155
154,156
155,156
155,157
156,157
159,160
161,162
162,163
162,164
162,165
162,166
162,167
162,168
162,169
163,164
166,167
166,168
167,168
169,170
171,172
171,173
172,173
174,175
176,177
178,179
178,180
179,180
182,183
182,184
183,184
186,187
187,188
187,189
188,189
190,191
192,193
192,194
193,194
193,195
194,195
195,196
196,197
198,199
198,200
200,201
200,202
201,202
203,204
204,205
206,207
207,208
208,209
208,210
208,211
209,210
212,213
212,214
213,214
215,216
-----nextToken-----
2,4,6,8,9,12,14,16,18,19,24,26,27,31,33,37,39,40,44,46,47,50,52,56,58,63,66,69,74,76,81,85,86,91,96,97,101,102,103,108,109,110,115,116,119,122,123,126,131,133,134,140,141,143,148,149,151,157,158,160,164,165,168,170,173,175,177,180,181,184,185,189,191,197,199,202,205,210,211,214,216
-----computeFrom-----
54,55
54,56
61,62
61,63
79,80
79,81
89,90
89,91
98,99
98,100
113,114
113,115
117,118
117,119
145,146
145,147
154,155
154,156
178,179
178,180
193,194
193,195
198,199
198,200
-----guardedBy-----
58,69
151,177
-----guardedByNegation-----
58,76
-----lastLexicalUse-----
58,76
-----jump-----
58,76
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ProblemStatement;IfStatement;FieldReference;IdExpression;Name;Name;ReturnStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
voidthread_lock_released(const void *lock, enum thread_lock_kind kind,	const void *element){	struct thread_element *te = deconstify_pointer(element);	struct thread_lock_stack *tls;	const struct thread_lock *l;	unsigned i;	/*	 * For the same reasons as in thread_lock_got(), lazily grab the thread	 * element.  Note that we may be in a situation where we did not get a	 * thread element at lock time but are able to get one now.	 */	if (NULL == te) {		te = thread_find(&te);	} else {		thread_element_check(te);	}	if G_UNLIKELY(NULL == te)		return;	tls = &te->locks;	if G_UNLIKELY(0 == tls->count) {		/*		 * Warn only if we have seen a lock once (te->stack_lock != NULL)		 * and when the stack is larger than the first lock acquired.		 *		 * Otherwise, it means that we're poping out from the place where		 * we first recorded a lock, and therefore it is obvious we cannot		 * have the lock recorded since we're before the call chain that		 * could record the first lock.		 */		if (			te->stack_lock != NULL &&			thread_stack_ptr_cmp(&te, te->stack_lock) >= 0		) {			/* Locks may be missing in pass-through mode */			if (!atomic_int_get(&thread_locks_disabled)) {				s_minicarp("%s(): %s %p was not registered in thread #%u",					G_STRFUNC, thread_lock_kind_to_string(kind),					lock, te->stid);			}		}		return;	}	/*	 * If lock is the top of the stack, we're done.	 */	l = &tls->arena[tls->count - 1];	if G_LIKELY(l->lock == lock) {		g_assert_log(l->kind == kind,			"%s(): %s %p is actually registered as %s in thread #%u",			G_STRFUNC, thread_lock_kind_to_string(kind), lock,			thread_lock_kind_to_string(l->kind), te->stid);		tls->count--;		/*		 * Handle signals if any are pending and can be delivered.		 */		if G_UNLIKELY(thread_sig_pending(te)) {			THREAD_STATS_INCX(sig_handled_while_unlocking);			thread_sig_handle(te);		}		/*		 * If the thread no longer holds any locks and it has to be suspended,		 * now is a good (and safe) time to do it.		 */		if G_UNLIKELY(te->suspend && 0 == tls->count)			thread_suspend_self(te);		return;	}	/*	 * Since the lock was not the one at the top of the stack, then it must be	 * absent in the whole stack, or we have an out-of-order lock release.	 */	if (tls->overflow)		return;				/* Stack overflowed, we're crashing */	for (i = 0; i < tls->count; i++) {		const struct thread_lock *ol = &tls->arena[i];		if (ol->lock == lock) {			tls->overflow = TRUE;	/* Avoid any overflow problems now */			s_rawwarn("%s releases %s %p at inner position %u/%zu",				thread_element_name(te), thread_lock_kind_to_string(kind),				lock, i + 1, tls->count);			thread_lock_dump(te);			/*			 * If crashing, it's interesting to learn about possible			 * out-of-order unlocking, because it may point to a true			 * bug in the crash handling, but let processing continue			 * to be able to dump useful information anyway.			 */			if (				!thread_is_crashing() &&				0 == atomic_int_get(&thread_locks_disabled)			) {				s_error("out-of-order %s release",					thread_lock_kind_to_string(kind));			}		}	}}
void
thread_lock_released(const void *lock, enum thread_lock_kind kind,	const void *element)
thread_lock_released
const void *lock
const void
*lock
*
lock
enum thread_lock_kind kind
enum thread_lock_kind
thread_lock_kind
kind
kind
const void *element
const void
*element
*
element
{	struct thread_element *te = deconstify_pointer(element);	struct thread_lock_stack *tls;	const struct thread_lock *l;	unsigned i;	/*	 * For the same reasons as in thread_lock_got(), lazily grab the thread	 * element.  Note that we may be in a situation where we did not get a	 * thread element at lock time but are able to get one now.	 */	if (NULL == te) {		te = thread_find(&te);	} else {		thread_element_check(te);	}	if G_UNLIKELY(NULL == te)		return;	tls = &te->locks;	if G_UNLIKELY(0 == tls->count) {		/*		 * Warn only if we have seen a lock once (te->stack_lock != NULL)		 * and when the stack is larger than the first lock acquired.		 *		 * Otherwise, it means that we're poping out from the place where		 * we first recorded a lock, and therefore it is obvious we cannot		 * have the lock recorded since we're before the call chain that		 * could record the first lock.		 */		if (			te->stack_lock != NULL &&			thread_stack_ptr_cmp(&te, te->stack_lock) >= 0		) {			/* Locks may be missing in pass-through mode */			if (!atomic_int_get(&thread_locks_disabled)) {				s_minicarp("%s(): %s %p was not registered in thread #%u",					G_STRFUNC, thread_lock_kind_to_string(kind),					lock, te->stid);			}		}		return;	}	/*	 * If lock is the top of the stack, we're done.	 */	l = &tls->arena[tls->count - 1];	if G_LIKELY(l->lock == lock) {		g_assert_log(l->kind == kind,			"%s(): %s %p is actually registered as %s in thread #%u",			G_STRFUNC, thread_lock_kind_to_string(kind), lock,			thread_lock_kind_to_string(l->kind), te->stid);		tls->count--;		/*		 * Handle signals if any are pending and can be delivered.		 */		if G_UNLIKELY(thread_sig_pending(te)) {			THREAD_STATS_INCX(sig_handled_while_unlocking);			thread_sig_handle(te);		}		/*		 * If the thread no longer holds any locks and it has to be suspended,		 * now is a good (and safe) time to do it.		 */		if G_UNLIKELY(te->suspend && 0 == tls->count)			thread_suspend_self(te);		return;	}	/*	 * Since the lock was not the one at the top of the stack, then it must be	 * absent in the whole stack, or we have an out-of-order lock release.	 */	if (tls->overflow)		return;				/* Stack overflowed, we're crashing */	for (i = 0; i < tls->count; i++) {		const struct thread_lock *ol = &tls->arena[i];		if (ol->lock == lock) {			tls->overflow = TRUE;	/* Avoid any overflow problems now */			s_rawwarn("%s releases %s %p at inner position %u/%zu",				thread_element_name(te), thread_lock_kind_to_string(kind),				lock, i + 1, tls->count);			thread_lock_dump(te);			/*			 * If crashing, it's interesting to learn about possible			 * out-of-order unlocking, because it may point to a true			 * bug in the crash handling, but let processing continue			 * to be able to dump useful information anyway.			 */			if (				!thread_is_crashing() &&				0 == atomic_int_get(&thread_locks_disabled)			) {				s_error("out-of-order %s release",					thread_lock_kind_to_string(kind));			}		}	}}
struct thread_element *te = deconstify_pointer(element);
struct thread_element *te = deconstify_pointer(element);
struct thread_element
thread_element
*te = deconstify_pointer(element)
*
te
= deconstify_pointer(element)
deconstify_pointer(element)
deconstify_pointer
deconstify_pointer
element
element
struct thread_lock_stack *tls;
struct thread_lock_stack *tls;
struct thread_lock_stack
thread_lock_stack
*tls
*
tls
const struct thread_lock *l;
const struct thread_lock *l;
const struct thread_lock
thread_lock
*l
*
l
unsigned i;
unsigned i;
unsigned
i
i
if (NULL == te) {		te = thread_find(&te);	} else {		thread_element_check(te);	}
NULL == te
NULL
NULL
te
te
{		te = thread_find(&te);	}
te = thread_find(&te);
te = thread_find(&te)
te
te
thread_find(&te)
thread_find
thread_find
&te
te
te
{		thread_element_check(te);	}
thread_element_check(te);
thread_element_check(te)
thread_element_check
thread_element_check
te
te
if G_UNLIKELY(NULL == te)		return;
tls = &te->locks;
tls = &te->locks
tls
tls
&te->locks
te->locks
te
te
locks
if G_UNLIKELY(0 == tls->count) {		/*		 * Warn only if we have seen a lock once (te->stack_lock != NULL)		 * and when the stack is larger than the first lock acquired.		 *		 * Otherwise, it means that we're poping out from the place where		 * we first recorded a lock, and therefore it is obvious we cannot		 * have the lock recorded since we're before the call chain that		 * could record the first lock.		 */		if (			te->stack_lock != NULL &&			thread_stack_ptr_cmp(&te, te->stack_lock) >= 0		) {			/* Locks may be missing in pass-through mode */			if (!atomic_int_get(&thread_locks_disabled)) {				s_minicarp("%s(): %s %p was not registered in thread #%u",					G_STRFUNC, thread_lock_kind_to_string(kind),					lock, te->stid);			}		}		return;	}
l = &tls->arena[tls->count - 1];
l = &tls->arena[tls->count - 1]
l
l
&tls->arena[tls->count - 1]
tls->arena[tls->count - 1]
tls->arena
tls
tls
arena
tls->count - 1
tls->count
tls
tls
count
1
if G_LIKELY(l->lock == lock) {		g_assert_log(l->kind == kind,			"%s(): %s %p is actually registered as %s in thread #%u",			G_STRFUNC, thread_lock_kind_to_string(kind), lock,			thread_lock_kind_to_string(l->kind), te->stid);		tls->count--;		/*		 * Handle signals if any are pending and can be delivered.		 */		if G_UNLIKELY(thread_sig_pending(te)) {			THREAD_STATS_INCX(sig_handled_while_unlocking);			thread_sig_handle(te);		}		/*		 * If the thread no longer holds any locks and it has to be suspended,		 * now is a good (and safe) time to do it.		 */		if G_UNLIKELY(te->suspend && 0 == tls->count)			thread_suspend_self(te);		return;	}
if (tls->overflow)		return;
tls->overflow
tls
tls
overflow
return;
for (i = 0; i < tls->count; i++) {		const struct thread_lock *ol = &tls->arena[i];		if (ol->lock == lock) {			tls->overflow = TRUE;	/* Avoid any overflow problems now */			s_rawwarn("%s releases %s %p at inner position %u/%zu",				thread_element_name(te), thread_lock_kind_to_string(kind),				lock, i + 1, tls->count);			thread_lock_dump(te);			/*			 * If crashing, it's interesting to learn about possible			 * out-of-order unlocking, because it may point to a true			 * bug in the crash handling, but let processing continue			 * to be able to dump useful information anyway.			 */			if (				!thread_is_crashing() &&				0 == atomic_int_get(&thread_locks_disabled)			) {				s_error("out-of-order %s release",					thread_lock_kind_to_string(kind));			}		}	}
i = 0;
i = 0
i
i
0
i < tls->count
i
i
tls->count
tls
tls
count
i++
i
i
{		const struct thread_lock *ol = &tls->arena[i];		if (ol->lock == lock) {			tls->overflow = TRUE;	/* Avoid any overflow problems now */			s_rawwarn("%s releases %s %p at inner position %u/%zu",				thread_element_name(te), thread_lock_kind_to_string(kind),				lock, i + 1, tls->count);			thread_lock_dump(te);			/*			 * If crashing, it's interesting to learn about possible			 * out-of-order unlocking, because it may point to a true			 * bug in the crash handling, but let processing continue			 * to be able to dump useful information anyway.			 */			if (				!thread_is_crashing() &&				0 == atomic_int_get(&thread_locks_disabled)			) {				s_error("out-of-order %s release",					thread_lock_kind_to_string(kind));			}		}	}
const struct thread_lock *ol = &tls->arena[i];
const struct thread_lock *ol = &tls->arena[i];
const struct thread_lock
thread_lock
*ol = &tls->arena[i]
*
ol
= &tls->arena[i]
&tls->arena[i]
tls->arena[i]
tls->arena
tls
tls
arena
i
i
if (ol->lock == lock) {			tls->overflow = TRUE;	/* Avoid any overflow problems now */			s_rawwarn("%s releases %s %p at inner position %u/%zu",				thread_element_name(te), thread_lock_kind_to_string(kind),				lock, i + 1, tls->count);			thread_lock_dump(te);			/*			 * If crashing, it's interesting to learn about possible			 * out-of-order unlocking, because it may point to a true			 * bug in the crash handling, but let processing continue			 * to be able to dump useful information anyway.			 */			if (				!thread_is_crashing() &&				0 == atomic_int_get(&thread_locks_disabled)			) {				s_error("out-of-order %s release",					thread_lock_kind_to_string(kind));			}		}
ol->lock == lock
ol->lock
ol
ol
lock
lock
lock
{			tls->overflow = TRUE;	/* Avoid any overflow problems now */			s_rawwarn("%s releases %s %p at inner position %u/%zu",				thread_element_name(te), thread_lock_kind_to_string(kind),				lock, i + 1, tls->count);			thread_lock_dump(te);			/*			 * If crashing, it's interesting to learn about possible			 * out-of-order unlocking, because it may point to a true			 * bug in the crash handling, but let processing continue			 * to be able to dump useful information anyway.			 */			if (				!thread_is_crashing() &&				0 == atomic_int_get(&thread_locks_disabled)			) {				s_error("out-of-order %s release",					thread_lock_kind_to_string(kind));			}		}
tls->overflow = TRUE;
tls->overflow = TRUE
tls->overflow
tls
tls
overflow
TRUE
TRUE
s_rawwarn("%s releases %s %p at inner position %u/%zu",				thread_element_name(te), thread_lock_kind_to_string(kind),				lock, i + 1, tls->count);
s_rawwarn("%s releases %s %p at inner position %u/%zu",				thread_element_name(te), thread_lock_kind_to_string(kind),				lock, i + 1, tls->count)
s_rawwarn
s_rawwarn
"%s releases %s %p at inner position %u/%zu"
thread_element_name(te)
thread_element_name
thread_element_name
te
te
thread_lock_kind_to_string(kind)
thread_lock_kind_to_string
thread_lock_kind_to_string
kind
kind
lock
lock
i + 1
i
i
1
tls->count
tls
tls
count
thread_lock_dump(te);
thread_lock_dump(te)
thread_lock_dump
thread_lock_dump
te
te
if (				!thread_is_crashing() &&				0 == atomic_int_get(&thread_locks_disabled)			) {				s_error("out-of-order %s release",					thread_lock_kind_to_string(kind));			}
!thread_is_crashing() &&				0 == atomic_int_get(&thread_locks_disabled)
!thread_is_crashing()
thread_is_crashing()
thread_is_crashing
thread_is_crashing
0 == atomic_int_get(&thread_locks_disabled)
0
atomic_int_get(&thread_locks_disabled)
atomic_int_get
atomic_int_get
&thread_locks_disabled
thread_locks_disabled
thread_locks_disabled
{				s_error("out-of-order %s release",					thread_lock_kind_to_string(kind));			}
s_error("out-of-order %s release",					thread_lock_kind_to_string(kind));
s_error("out-of-order %s release",					thread_lock_kind_to_string(kind))
s_error
s_error
"out-of-order %s release"
thread_lock_kind_to_string(kind)
thread_lock_kind_to_string
thread_lock_kind_to_string
kind
kind
-----joern-----
(163,96,0)
(172,161,0)
(19,116,0)
(59,3,0)
(21,169,0)
(0,12,0)
(52,173,0)
(91,160,0)
(72,78,0)
(173,60,0)
(175,56,0)
(97,34,0)
(2,78,0)
(1,96,0)
(156,82,0)
(9,69,0)
(142,13,0)
(16,144,0)
(51,3,0)
(53,32,0)
(20,96,0)
(102,116,0)
(92,48,0)
(23,69,0)
(84,2,0)
(14,173,0)
(29,1,0)
(103,136,0)
(101,11,0)
(4,85,0)
(82,130,0)
(116,102,0)
(28,120,0)
(43,94,0)
(120,0,0)
(40,96,0)
(74,38,0)
(124,100,0)
(159,45,0)
(136,94,0)
(161,157,0)
(166,31,0)
(17,106,0)
(34,144,0)
(108,58,0)
(161,36,0)
(42,69,0)
(145,53,0)
(2,10,0)
(8,136,0)
(10,2,0)
(153,124,0)
(161,96,0)
(173,14,0)
(30,3,0)
(106,169,0)
(122,33,0)
(128,21,0)
(162,94,0)
(83,169,0)
(25,150,0)
(14,171,0)
(127,130,0)
(58,94,0)
(168,5,0)
(125,113,0)
(62,94,0)
(109,154,0)
(12,0,0)
(45,43,0)
(86,2,0)
(135,36,0)
(170,28,0)
(102,143,0)
(89,65,0)
(35,48,0)
(70,43,0)
(132,95,0)
(48,11,0)
(154,57,0)
(151,94,0)
(49,95,0)
(3,51,0)
(69,9,0)
(45,114,0)
(2,1,0)
(2,160,0)
(167,154,0)
(114,11,0)
(64,103,0)
(38,83,0)
(76,56,0)
(154,167,0)
(136,27,0)
(38,141,0)
(70,116,0)
(112,136,0)
(71,102,0)
(26,11,0)
(99,78,0)
(157,161,0)
(153,127,0)
(50,57,0)
(46,31,0)
(27,136,0)
(44,45,0)
(79,118,0)
(174,11,0)
(0,120,0)
(73,154,0)
(58,51,0)
(22,90,0)
(150,21,0)
(154,171,0)
(54,103,0)
(33,94,0)
(13,136,0)
(148,149,0)
(2,86,0)
(168,122,0)
(147,127,0)
(129,94,0)
(41,43,0)
(57,169,0)
(116,70,0)
(164,40,0)
(60,157,0)
(43,70,0)
(120,65,0)
(66,94,0)
(57,154,0)
(139,90,0)
(146,94,0)
(154,165,0)
(158,0,0)
(157,60,0)
(77,167,0)
(11,106,0)
(18,34,0)
(68,85,0)
(104,56,0)
(11,33,0)
(121,22,0)
(152,140,0)
(123,167,0)
(168,110,0)
(131,13,0)
(124,153,0)
(24,19,0)
(13,131,0)
(118,160,0)
(149,33,0)
(27,15,0)
(22,121,0)
(168,129,0)
(67,7,0)
(150,43,0)
(100,124,0)
(32,33,0)
(2,171,0)
(67,131,0)
(130,127,0)
(61,86,0)
(1,2,0)
(111,154,0)
(115,94,0)
(143,102,0)
(138,83,0)
(8,134,0)
(98,33,0)
(81,94,0)
(37,1,0)
(78,2,0)
(126,94,0)
(65,120,0)
(107,67,0)
(131,67,0)
(117,143,0)
(93,14,0)
(60,95,0)
(137,143,0)
(11,48,0)
(116,19,0)
(55,19,0)
(90,22,0)
(31,98,0)
(75,104,0)
(10,169,0)
(155,10,0)
(119,8,0)
(51,58,0)
(98,31,0)
(114,45,0)
(87,115,0)
(133,2,0)
(21,150,0)
(6,36,0)
(63,173,0)
(144,160,0)
(113,32,0)
(106,11,0)
(11,114,0)
(130,82,0)
(21,11,0)
(12,9,0)
(36,161,0)
(9,12,0)
(88,65,0)
(105,27,0)
(120,28,0)
(83,38,0)
(104,96,0)
(80,150,0)
(47,9,0)
(11,171,0)
(11,21,0)
(127,153,0)
(56,104,0)
(110,115,0)
(39,60,0)
(14,93,1)
(145,113,1)
(172,36,1)
(89,88,1)
(0,120,1)
(71,143,1)
(122,149,1)
(8,119,1)
(53,145,1)
(22,90,1)
(93,173,1)
(46,166,1)
(70,116,1)
(79,2,1)
(63,52,1)
(110,154,1)
(138,74,1)
(129,67,1)
(153,124,1)
(158,120,1)
(128,150,1)
(27,105,1)
(164,14,1)
(111,121,1)
(55,41,1)
(103,54,1)
(77,123,1)
(80,25,1)
(104,56,1)
(31,46,1)
(57,50,1)
(149,148,1)
(2,10,1)
(164,153,1)
(14,171,1)
(10,155,1)
(27,15,1)
(86,61,1)
(60,157,1)
(83,138,1)
(13,136,1)
(2,86,1)
(167,77,1)
(106,17,1)
(11,21,1)
(75,96,1)
(154,57,1)
(133,144,1)
(147,124,1)
(38,83,1)
(58,51,1)
(129,8,1)
(29,84,1)
(116,102,1)
(127,130,1)
(51,3,1)
(173,60,1)
(121,22,1)
(72,99,1)
(20,163,1)
(99,1,1)
(52,60,1)
(114,45,1)
(21,150,1)
(125,98,1)
(2,78,1)
(30,108,1)
(3,59,1)
(168,129,1)
(88,28,1)
(61,133,1)
(163,85,1)
(43,70,1)
(10,169,1)
(56,76,1)
(120,65,1)
(166,11,1)
(113,125,1)
(57,169,1)
(101,21,1)
(64,136,1)
(9,69,1)
(69,23,1)
(106,169,1)
(45,43,1)
(109,111,1)
(83,169,1)
(28,170,1)
(174,101,1)
(100,118,1)
(123,73,1)
(117,19,1)
(11,106,1)
(159,44,1)
(156,147,1)
(42,58,1)
(120,28,1)
(98,31,1)
(34,97,1)
(154,167,1)
(18,14,1)
(8,136,1)
(59,30,1)
(92,114,1)
(78,72,1)
(44,26,1)
(2,171,1)
(97,18,1)
(153,127,1)
(40,96,1)
(90,139,1)
(25,43,1)
(116,19,1)
(11,171,1)
(124,100,1)
(173,63,1)
(110,12,1)
(21,128,1)
(105,112,1)
(168,104,1)
(110,121,1)
(6,39,1)
(48,35,1)
(1,37,1)
(157,161,1)
(47,69,1)
(74,153,1)
(9,47,1)
(17,174,1)
(75,40,1)
(102,71,1)
(161,172,1)
(76,175,1)
(21,169,1)
(82,156,1)
(142,107,1)
(168,122,1)
(170,9,1)
(12,0,1)
(68,4,1)
(67,131,1)
(35,92,1)
(137,117,1)
(143,137,1)
(119,103,1)
(5,85,1)
(161,96,1)
(135,6,1)
(144,16,1)
(154,171,1)
(85,68,1)
(139,12,1)
(130,82,1)
(45,159,1)
(65,89,1)
(107,103,1)
(11,48,1)
(104,96,1)
(161,36,1)
(148,53,1)
(40,164,1)
(84,10,1)
(2,1,1)
(1,96,1)
(36,135,1)
(96,20,1)
(131,13,1)
(168,5,1)
(103,136,1)
(164,38,1)
(54,64,1)
(175,75,1)
(14,173,1)
(23,42,1)
(118,79,1)
(150,43,1)
(0,158,1)
(50,109,1)
(26,106,1)
(12,9,1)
(11,114,1)
(150,80,1)
(13,142,1)
(16,34,1)
(37,29,1)
(155,86,1)
(168,110,1)
(24,55,1)
(136,27,1)
(73,57,1)
(102,143,1)
(39,104,1)
(19,24,1)
(63,104,2)
(60,157,2)
(119,103,2)
(57,121,2)
(13,103,2)
(167,121,2)
(14,171,2)
(154,171,2)
(168,129,2)
(38,83,2)
(156,124,2)
(116,102,2)
(70,116,2)
(163,85,2)
(90,12,2)
(2,1,2)
(5,85,2)
(67,131,2)
(1,96,2)
(11,48,2)
(34,14,2)
(118,14,2)
(173,104,2)
(10,14,2)
(161,36,2)
(36,104,2)
(144,14,2)
(22,12,2)
(153,124,2)
(120,9,2)
(73,121,2)
(67,103,2)
(161,96,2)
(104,85,2)
(16,14,2)
(86,14,2)
(39,104,2)
(124,100,2)
(9,69,2)
(89,9,2)
(79,14,2)
(28,9,2)
(97,14,2)
(111,121,2)
(8,136,2)
(104,104,2)
(2,14,2)
(121,22,2)
(2,86,2)
(172,104,2)
(123,121,2)
(133,14,2)
(127,130,2)
(98,31,2)
(29,14,2)
(139,12,2)
(0,9,2)
(121,12,2)
(37,14,2)
(40,104,2)
(168,110,2)
(1,14,2)
(74,153,2)
(96,85,2)
(2,171,2)
(21,150,2)
(72,14,2)
(131,103,2)
(0,120,2)
(14,104,2)
(10,169,2)
(52,104,2)
(150,43,2)
(75,85,2)
(51,3,2)
(168,122,2)
(8,103,2)
(18,14,2)
(100,14,2)
(154,121,2)
(75,104,2)
(147,124,2)
(130,124,2)
(56,85,2)
(153,127,2)
(43,70,2)
(84,14,2)
(168,5,2)
(83,169,2)
(161,104,2)
(65,9,2)
(99,14,2)
(153,14,2)
(142,103,2)
(50,121,2)
(103,136,2)
(154,167,2)
(154,57,2)
(76,85,2)
(131,13,2)
(13,136,2)
(11,114,2)
(138,153,2)
(158,9,2)
(45,43,2)
(127,124,2)
(175,85,2)
(88,9,2)
(114,45,2)
(106,169,2)
(61,14,2)
(60,104,2)
(58,51,2)
(155,14,2)
(12,0,2)
(11,106,2)
(76,104,2)
(38,153,2)
(77,121,2)
(164,104,2)
(175,104,2)
(124,14,2)
(6,104,2)
(157,161,2)
(40,96,2)
(170,9,2)
(56,104,2)
(102,143,2)
(2,78,2)
(57,169,2)
(11,21,2)
(27,15,2)
(2,10,2)
(173,60,2)
(82,124,2)
(21,169,2)
(104,96,2)
(83,153,2)
(116,19,2)
(120,28,2)
(120,65,2)
(107,103,2)
(20,85,2)
(22,90,2)
(109,121,2)
(12,9,2)
(136,27,2)
(78,14,2)
(104,56,2)
(14,173,2)
(135,104,2)
(11,171,2)
(93,104,2)
(130,82,2)
(157,104,2)
-----------------------------------
(0,thread_stack_ptr_cmp(&te, te->stack_lock)
(1,i + 1)
(2,s_rawwarn("%s releases %s %p at inner position %u/%zu",\n\\n\\t\\t\\t\\tthread_element_name(te)
(3,te->locks)
(4,tls)
(5,return;)
(6,tls)
(7,)
(8,thread_element_check(te)
(9,te->stack_lock != NULL)
(10,thread_lock_kind_to_string(kind)
(11,g_assert_log(l->kind == kind,\n\\n\\t\\t\\t"%s()
(12,te->stack_lock != NULL &&\n\\n\\t\\t\\tthread_stack_ptr_cmp(&te, te->stack_lock)
(13,&te)
(14,ol->lock == lock)
(15,const void *element)
(16,TRUE)
(17,kind)
(18,tls)
(19,tls->arena)
(20,0)
(21,l->kind == kind)
(22,atomic_int_get(&thread_locks_disabled)
(23,stack_lock)
(24,arena)
(25,l)
(26,lock)
(27,deconstify_pointer(element)
(28,&te)
(29,i)
(30,te)
(31,tls->count)
(32,)
(33,)
(34,tls->overflow)
(35,stid)
(36,tls->arena)
(37,1)
(38,s_error("out-of-order %s release",\n\\n\\t\\t\\t\\t\\tthread_lock_kind_to_string(kind)
(39,ol)
(40,i++)
(41,l)
(42,te)
(43,l = &tls->arena[tls->count - 1])
(44,l)
(45,l->kind)
(46,count)
(47,NULL)
(48,te->stid)
(49,if (ol->lock == lock)
(50,kind)
(51,&te->locks)
(52,ol)
(53,thread_sig_handle(te)
(54,te)
(55,tls)
(56,tls->count)
(57,thread_lock_kind_to_string(kind)
(58,tls = &te->locks)
(59,locks)
(60,*ol = &tls->arena[i])
(61,te)
(62,te)
(63,lock)
(64,NULL)
(65,te->stack_lock)
(66,l)
(67,te = thread_find(&te)
(68,overflow)
(69,te->stack_lock)
(70,&tls->arena[tls->count - 1])
(71,1)
(72,count)
(73,lock)
(74,"out-of-order %s release")
(75,i)
(76,count)
(77,stid)
(78,tls->count)
(79,te)
(80,kind)
(81,i)
(82,&thread_locks_disabled)
(83,thread_lock_kind_to_string(kind)
(84,lock)
(85,tls->overflow)
(86,thread_element_name(te)
(87,if (\n\\n\\t\\t\\tte->stack_lock != NULL &&\n\\n\\t\\t\\tthread_stack_ptr_cmp(&te, te->stack_lock)
(88,te)
(89,stack_lock)
(90,&thread_locks_disabled)
(91,if (\n\\n\\t\\t\\t\\t!thread_is_crashing()
(92,te)
(93,lock)
(94,)
(95,)
(96,i = 0)
(97,overflow)
(98,tls->count--)
(99,tls)
(100,thread_is_crashing()
(101,"%s()
(102,tls->count - 1)
(103,NULL == te)
(104,i < tls->count)
(105,element)
(106,thread_lock_kind_to_string(kind)
(107,te)
(108,tls)
(109,G_STRFUNC)
(110,return;)
(111,"%s()
(112,te)
(113,THREAD_STATS_INCX(sig_handled_while_unlocking)
(114,thread_lock_kind_to_string(l->kind)
(115,)
(116,tls->arena[tls->count - 1])
(117,tls)
(118,thread_lock_dump(te)
(119,te)
(120,thread_stack_ptr_cmp(&te, te->stack_lock)
(121,!atomic_int_get(&thread_locks_disabled)
(122,return;)
(123,te)
(124,!thread_is_crashing()
(125,sig_handled_while_unlocking)
(126,for (i = 0; i < tls->count; i++)
(127,0 == atomic_int_get(&thread_locks_disabled)
(128,kind)
(129,return;)
(130,atomic_int_get(&thread_locks_disabled)
(131,thread_find(&te)
(132,ol)
(133,"%s releases %s %p at inner position %u/%zu")
(134,)
(135,arena)
(136,*te = deconstify_pointer(element)
(137,count)
(138,kind)
(139,thread_locks_disabled)
(140,)
(141,)
(142,te)
(143,tls->count)
(144,tls->overflow = TRUE)
(145,te)
(146,if (NULL == te)
(147,0)
(148,te)
(149,thread_suspend_self(te)
(150,l->kind)
(151,tls)
(152,if (!atomic_int_get(&thread_locks_disabled)
(153,!thread_is_crashing()
(154,s_minicarp("%s()
(155,kind)
(156,thread_locks_disabled)
(157,&tls->arena[i])
(158,0)
(159,kind)
(160,)
(161,tls->arena[i])
(162,if (tls->overflow)
(163,i)
(164,i)
(165,)
(166,tls)
(167,te->stid)
(168,RET)
(169,enum thread_lock_kind kind)
(170,te)
(171,const void *lock)
(172,i)
(173,ol->lock)
(174,G_STRFUNC)
(175,tls)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^