-----label-----
0
-----code-----
static void leave_queue(struct queue_ent *qe)
{
	struct call_queue *q;
	struct queue_ent *current, *prev = NULL;
	struct penalty_rule *pr_iter;
	int pos = 0;

	if (!(q = qe->parent)) {
		return;
	}
	queue_t_ref(q, "Copy queue pointer from queue entry");
	ao2_lock(q);

	prev = NULL;
	for (current = q->head; current; current = current->next) {
		if (current == qe) {
			char posstr[20];
			q->count--;
			if (!q->count) {
				ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);
			}

			/* Take us out of the queue */
			/*** DOCUMENTATION
			<managerEventInstance>
				<synopsis>Raised when a channel leaves a Queue.</synopsis>
				<syntax>
					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />
					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />
					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />
				</syntax>
				<see-also>
					<ref type="managerEvent">Join</ref>
				</see-also>
			</managerEventInstance>
			***/
			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",
				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",
				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));
			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));
			/* Take us out of the queue */
			if (prev) {
				prev->next = current->next;
			} else {
				q->head = current->next;
			}
			/* Free penalty rules */
			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {
				ast_free(pr_iter);
			}
			snprintf(posstr, sizeof(posstr), "%d", qe->pos);
			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);
		} else {
			/* Renumber the people after us in the queue based on a new count */
			current->pos = ++pos;
			prev = current;
		}
	}
	ao2_unlock(q);

	/*If the queue is a realtime queue, check to see if it's still defined in real time*/
	if (q->realtime) {
		struct ast_variable *var;
		if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {
			q->dead = 1;
		} else {
			ast_variables_destroy(var);
		}
	}

	if (q->dead) {
		/* It's dead and nobody is in it, so kill it */
		queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");
	}
	/* unref the explicit ref earlier in the function */
	queue_t_unref(q, "Expire copied reference");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
20,23
21,22
23,24
23,25
26,27
26,28
26,29
29,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
39,40
40,41
40,42
42,43
42,44
44,45
46,47
46,48
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
56,57
58,59
59,60
59,61
59,62
60,61
62,63
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
75,76
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
88,89
88,90
89,90
91,92
91,93
92,93
95,96
96,97
96,98
96,99
97,98
97,99
98,99
100,101
102,103
102,104
102,105
102,106
102,107
102,108
102,109
102,110
102,111
103,104
104,105
104,106
106,107
106,108
108,109
110,111
111,112
112,113
112,114
113,114
116,117
116,118
117,118
118,119
118,120
119,120
122,123
123,124
124,125
124,126
124,127
124,128
124,129
125,126
127,128
129,130
132,133
132,134
133,134
136,137
137,138
137,139
137,140
137,141
137,142
137,143
137,144
137,145
137,146
137,147
138,139
140,141
140,142
141,142
144,145
148,149
148,150
149,150
151,152
151,153
152,153
155,156
155,157
156,157
159,160
159,161
160,161
163,164
163,165
164,165
167,168
167,169
168,169
170,171
170,172
171,172
174,175
175,176
175,177
175,178
175,179
175,180
176,177
180,181
180,182
181,182
184,185
184,186
185,186
187,188
187,189
188,189
191,192
191,193
191,194
192,193
194,195
195,196
196,197
196,198
197,198
197,199
198,199
201,202
201,203
202,203
205,206
206,207
207,208
207,209
208,209
208,210
209,210
212,213
212,214
213,214
216,217
216,218
217,218
218,219
218,220
219,220
221,222
221,223
221,224
222,223
224,225
225,226
225,227
226,227
229,230
231,232
232,233
233,234
233,235
234,235
236,237
238,239
239,240
239,241
239,242
239,243
239,244
240,241
242,243
244,245
245,246
246,247
249,250
249,251
250,251
253,254
254,255
254,256
254,257
254,258
255,256
257,258
257,259
258,259
262,263
264,265
264,266
265,266
266,267
266,268
267,268
267,269
268,269
271,272
272,273
274,275
275,276
275,277
276,277
278,279
280,281
281,282
281,283
282,283
284,285
286,287
286,288
287,288
287,289
288,289
291,292
291,293
292,293
293,294
293,295
294,295
296,297
296,298
299,300
299,301
299,302
300,301
301,302
302,303
302,304
303,304
305,306
305,307
305,308
305,309
305,310
306,307
310,311
310,312
311,312
314,315
316,317
317,318
318,319
318,320
319,320
319,321
320,321
324,325
325,326
326,327
326,328
327,328
329,330
331,332
331,333
332,333
332,334
333,334
336,337
337,338
338,339
338,340
338,341
338,342
339,340
341,342
343,344
346,347
347,348
347,349
347,350
348,349
350,351
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,25,27,28,31,35,37,38,41,43,45,51,54,55,57,61,63,64,68,70,74,76,81,84,85,87,90,93,94,99,101,105,107,109,114,115,120,121,126,128,130,131,134,135,139,142,143,145,146,147,150,153,154,157,158,161,162,165,166,169,172,173,177,178,179,182,183,186,189,190,193,199,200,203,204,210,211,214,215,220,223,227,228,230,235,237,241,243,247,248,251,252,256,259,260,261,263,269,270,273,277,279,283,285,289,290,295,297,298,304,307,308,309,312,313,315,321,322,323,328,330,334,335,340,342,344,345,349,351,352
-----computeFrom-----
49,50
49,51
72,73
72,74
79,80
79,81
88,89
88,90
97,98
97,99
196,197
196,198
207,208
207,209
218,219
218,220
266,267
266,268
275,276
275,277
302,303
302,304
318,319
318,320
-----guardedBy-----
99,214
101,259
-----guardedByNegation-----
99,279
-----lastLexicalUse-----
99,279
-----jump-----
99,279
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void leave_queue(struct queue_ent *qe){	struct call_queue *q;	struct queue_ent *current, *prev = NULL;	struct penalty_rule *pr_iter;	int pos = 0;	if (!(q = qe->parent)) {		return;	}	queue_t_ref(q, "Copy queue pointer from queue entry");	ao2_lock(q);	prev = NULL;	for (current = q->head; current; current = current->next) {		if (current == qe) {			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		} else {			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}	}	ao2_unlock(q);	/*If the queue is a realtime queue, check to see if it's still defined in real time*/	if (q->realtime) {		struct ast_variable *var;		if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {			q->dead = 1;		} else {			ast_variables_destroy(var);		}	}	if (q->dead) {		/* It's dead and nobody is in it, so kill it */		queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");	}	/* unref the explicit ref earlier in the function */	queue_t_unref(q, "Expire copied reference");}
static void
leave_queue(struct queue_ent *qe)
leave_queue
struct queue_ent *qe
struct queue_ent
queue_ent
*qe
*
qe
{	struct call_queue *q;	struct queue_ent *current, *prev = NULL;	struct penalty_rule *pr_iter;	int pos = 0;	if (!(q = qe->parent)) {		return;	}	queue_t_ref(q, "Copy queue pointer from queue entry");	ao2_lock(q);	prev = NULL;	for (current = q->head; current; current = current->next) {		if (current == qe) {			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		} else {			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}	}	ao2_unlock(q);	/*If the queue is a realtime queue, check to see if it's still defined in real time*/	if (q->realtime) {		struct ast_variable *var;		if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {			q->dead = 1;		} else {			ast_variables_destroy(var);		}	}	if (q->dead) {		/* It's dead and nobody is in it, so kill it */		queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");	}	/* unref the explicit ref earlier in the function */	queue_t_unref(q, "Expire copied reference");}
struct call_queue *q;
struct call_queue *q;
struct call_queue
call_queue
*q
*
q
struct queue_ent *current, *prev = NULL;
struct queue_ent *current, *prev = NULL;
struct queue_ent
queue_ent
*current
*
current
*prev = NULL
*
prev
= NULL
NULL
NULL
struct penalty_rule *pr_iter;
struct penalty_rule *pr_iter;
struct penalty_rule
penalty_rule
*pr_iter
*
pr_iter
int pos = 0;
int pos = 0;
int
pos = 0
pos
= 0
0
if (!(q = qe->parent)) {		return;	}
!(q = qe->parent)
(q = qe->parent)
q = qe->parent
q
q
qe->parent
qe
qe
parent
{		return;	}
return;
queue_t_ref(q, "Copy queue pointer from queue entry");
queue_t_ref(q, "Copy queue pointer from queue entry")
queue_t_ref
queue_t_ref
q
q
"Copy queue pointer from queue entry"
ao2_lock(q);
ao2_lock(q)
ao2_lock
ao2_lock
q
q
prev = NULL;
prev = NULL
prev
prev
NULL
NULL
for (current = q->head; current; current = current->next) {		if (current == qe) {			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		} else {			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}	}
current = q->head;
current = q->head
current
current
q->head
q
q
head
current
current
current = current->next
current
current
current->next
current
current
next
{		if (current == qe) {			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		} else {			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}	}
if (current == qe) {			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		} else {			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}
current == qe
current
current
qe
qe
{			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		}
char posstr[20];
char posstr[20];
char
posstr[20]
posstr
[20]
20
q->count--;
q->count--
q->count
q
q
count
if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);			}
!q->count
q->count
q
q
count
{				ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);			}
ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);
ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_NOT_INUSE
AST_DEVICE_NOT_INUSE
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
"Queue:%s"
q->name
q
q
name
ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));
ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan))
ast_manager_event
ast_manager_event
qe->chan
qe
qe
chan
EVENT_FLAG_CALL
EVENT_FLAG_CALL
"Leave"
"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n"
ast_channel_name(qe->chan)
ast_channel_name
ast_channel_name
qe->chan
qe
qe
chan
q->name
q
q
name
q->count
q
q
count
qe->pos
qe
qe
pos
ast_channel_uniqueid(qe->chan)
ast_channel_uniqueid
ast_channel_uniqueid
qe->chan
qe
qe
chan
ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));
ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan))
ast_debug
ast_debug
1
"Queue '%s' Leave, Channel '%s'\n"
q->name
q
q
name
ast_channel_name(qe->chan)
ast_channel_name
ast_channel_name
qe->chan
qe
qe
chan
if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}
prev
prev
{				prev->next = current->next;			}
prev->next = current->next;
prev->next = current->next
prev->next
prev
prev
next
current->next
current
current
next
{				q->head = current->next;			}
q->head = current->next;
q->head = current->next
q->head
q
q
head
current->next
current
current
next
while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}
(pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))
pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list)
pr_iter
pr_iter
AST_LIST_REMOVE_HEAD(&qe->qe_rules, list)
AST_LIST_REMOVE_HEAD
AST_LIST_REMOVE_HEAD
&qe->qe_rules
qe->qe_rules
qe
qe
qe_rules
list
list
{				ast_free(pr_iter);			}
ast_free(pr_iter);
ast_free(pr_iter)
ast_free
ast_free
pr_iter
pr_iter
snprintf(posstr, sizeof(posstr), "%d", qe->pos);
snprintf(posstr, sizeof(posstr), "%d", qe->pos)
snprintf
snprintf
posstr
posstr
sizeof(posstr)
(posstr)
posstr
posstr
"%d"
qe->pos
qe
qe
pos
pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);
pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr)
pbx_builtin_setvar_helper
pbx_builtin_setvar_helper
qe->chan
qe
qe
chan
"QUEUEPOSITION"
posstr
posstr
{			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}
current->pos = ++pos;
current->pos = ++pos
current->pos
current
current
pos
++pos
pos
pos
prev = current;
prev = current
prev
prev
current
current
ao2_unlock(q);
ao2_unlock(q)
ao2_unlock
ao2_unlock
q
q
if (q->realtime) {		struct ast_variable *var;		if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {			q->dead = 1;		} else {			ast_variables_destroy(var);		}	}
q->realtime
q
q
realtime
{		struct ast_variable *var;		if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {			q->dead = 1;		} else {			ast_variables_destroy(var);		}	}
struct ast_variable *var;
struct ast_variable *var;
struct ast_variable
ast_variable
*var
*
var
if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {			q->dead = 1;		} else {			ast_variables_destroy(var);		}
!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))
(var = ast_load_realtime("queues", "name", q->name, SENTINEL))
var = ast_load_realtime("queues", "name", q->name, SENTINEL)
var
var
ast_load_realtime("queues", "name", q->name, SENTINEL)
ast_load_realtime
ast_load_realtime
"queues"
"name"
q->name
q
q
name
SENTINEL
SENTINEL
{			q->dead = 1;		}
q->dead = 1;
q->dead = 1
q->dead
q
q
dead
1
{			ast_variables_destroy(var);		}
ast_variables_destroy(var);
ast_variables_destroy(var)
ast_variables_destroy
ast_variables_destroy
var
var
if (q->dead) {		/* It's dead and nobody is in it, so kill it */		queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");	}
q->dead
q
q
dead
{		/* It's dead and nobody is in it, so kill it */		queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");	}
queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");
queues_t_unlink(queues, q, "Queue is now dead; remove it from the container")
queues_t_unlink
queues_t_unlink
queues
queues
q
q
"Queue is now dead; remove it from the container"
queue_t_unref(q, "Expire copied reference");
queue_t_unref(q, "Expire copied reference")
queue_t_unref
queue_t_unref
q
q
"Expire copied reference"
-----joern-----
(145,58,0)
(166,127,0)
(36,4,0)
(191,14,0)
(135,68,0)
(83,68,0)
(22,97,0)
(14,193,0)
(79,25,0)
(164,81,0)
(128,193,0)
(72,61,0)
(64,52,0)
(150,172,0)
(190,60,0)
(91,130,0)
(139,82,0)
(41,193,0)
(153,150,0)
(41,25,0)
(25,41,0)
(109,96,0)
(140,74,0)
(130,91,0)
(96,48,0)
(157,193,0)
(122,193,0)
(116,193,0)
(5,193,0)
(193,14,0)
(183,25,0)
(77,33,0)
(193,5,0)
(95,106,0)
(9,68,0)
(124,94,0)
(27,152,0)
(150,186,0)
(186,150,0)
(32,63,0)
(167,187,0)
(48,96,0)
(125,94,0)
(116,94,0)
(194,158,0)
(150,93,0)
(40,68,0)
(142,190,0)
(45,58,0)
(118,97,0)
(162,2,0)
(87,111,0)
(23,33,0)
(3,14,0)
(112,151,0)
(186,73,0)
(97,68,0)
(170,74,0)
(154,70,0)
(91,52,0)
(161,172,0)
(63,52,0)
(21,68,0)
(56,165,0)
(170,67,0)
(94,38,0)
(0,79,0)
(126,2,0)
(34,152,0)
(106,134,0)
(133,68,0)
(1,177,0)
(171,122,0)
(49,128,0)
(29,82,0)
(150,153,0)
(122,36,0)
(50,153,0)
(43,108,0)
(51,101,0)
(14,73,0)
(21,193,0)
(88,122,0)
(181,74,0)
(72,25,0)
(94,116,0)
(46,72,0)
(93,150,0)
(33,163,0)
(99,13,0)
(172,150,0)
(6,68,0)
(66,193,0)
(58,134,0)
(180,93,0)
(71,61,0)
(61,72,0)
(173,82,0)
(110,183,0)
(85,57,0)
(165,68,0)
(52,91,0)
(7,157,0)
(102,193,0)
(74,108,0)
(128,68,0)
(10,93,0)
(138,34,0)
(60,150,0)
(155,63,0)
(18,169,0)
(76,170,0)
(110,35,0)
(183,134,0)
(152,73,0)
(153,193,0)
(188,52,0)
(178,106,0)
(157,156,0)
(108,193,0)
(127,85,0)
(192,186,0)
(169,78,0)
(59,165,0)
(104,103,0)
(8,48,0)
(119,41,0)
(31,111,0)
(105,98,0)
(70,73,0)
(65,150,0)
(80,94,0)
(127,158,0)
(55,177,0)
(175,116,0)
(113,103,0)
(107,183,0)
(184,79,0)
(174,130,0)
(52,111,0)
(117,150,0)
(75,150,0)
(131,66,0)
(130,73,0)
(82,193,0)
(134,79,0)
(33,193,0)
(152,34,0)
(72,134,0)
(85,134,0)
(177,70,0)
(127,110,0)
(156,111,0)
(90,130,0)
(143,127,0)
(19,111,0)
(60,190,0)
(97,193,0)
(20,68,0)
(79,134,0)
(58,25,0)
(150,111,0)
(106,25,0)
(8,187,0)
(48,8,0)
(63,193,0)
(15,33,0)
(115,72,0)
(147,157,0)
(58,73,0)
(69,81,0)
(37,36,0)
(177,111,0)
(151,112,0)
(81,69,0)
(172,73,0)
(89,177,0)
(93,193,0)
(70,177,0)
(144,190,0)
(112,150,0)
(179,85,0)
(141,101,0)
(182,71,0)
(132,21,0)
(30,116,0)
(129,68,0)
(169,170,0)
(24,25,0)
(114,21,0)
(150,112,0)
(61,26,0)
(177,55,0)
(53,55,0)
(85,25,0)
(54,96,0)
(148,66,0)
(150,60,0)
(69,57,0)
(185,108,0)
(160,68,0)
(106,69,0)
(82,173,0)
(34,111,0)
(81,2,0)
(101,193,0)
(11,70,0)
(108,74,0)
(74,170,0)
(17,54,0)
(151,73,0)
(189,187,0)
(71,193,0)
(12,158,0)
(146,193,0)
(158,68,0)
(102,68,0)
(149,48,0)
(187,73,0)
(54,39,0)
(16,111,0)
(62,172,0)
(42,152,0)
(190,73,0)
(47,183,0)
(176,74,0)
(2,68,0)
(187,8,0)
(183,110,0)
(156,157,0)
(123,186,0)
(136,102,0)
(121,151,0)
(52,63,0)
(168,99,0)
(100,34,0)
(92,71,0)
(86,151,0)
(67,170,0)
(84,134,0)
(28,85,0)
(44,41,0)
(159,153,0)
(84,34,1)
(70,73,1)
(93,193,1)
(22,118,1)
(150,112,1)
(54,17,1)
(178,95,1)
(115,71,1)
(157,193,1)
(114,66,1)
(60,190,1)
(165,56,1)
(48,149,1)
(50,93,1)
(150,153,1)
(131,169,1)
(177,55,1)
(156,157,1)
(145,137,1)
(172,62,1)
(100,138,1)
(161,153,1)
(110,183,1)
(192,94,1)
(183,47,1)
(136,137,1)
(44,119,1)
(53,89,1)
(86,121,1)
(92,120,1)
(171,67,1)
(1,55,1)
(33,77,1)
(189,167,1)
(127,85,1)
(25,41,1)
(157,7,1)
(41,44,1)
(41,193,1)
(106,178,1)
(63,155,1)
(102,193,1)
(7,147,1)
(80,124,1)
(46,115,1)
(79,25,1)
(5,193,1)
(182,92,1)
(162,126,1)
(90,174,1)
(117,186,1)
(139,156,1)
(188,150,1)
(175,80,1)
(36,37,1)
(128,49,1)
(66,148,1)
(126,165,1)
(94,116,1)
(172,73,1)
(154,11,1)
(167,109,1)
(54,96,1)
(176,181,1)
(122,193,1)
(65,117,1)
(143,120,1)
(130,73,1)
(150,186,1)
(138,152,1)
(106,134,1)
(130,90,1)
(112,151,1)
(186,123,1)
(24,158,1)
(58,25,1)
(58,45,1)
(34,100,1)
(102,136,1)
(190,144,1)
(56,59,1)
(152,73,1)
(149,8,1)
(99,5,1)
(142,172,1)
(58,73,1)
(89,96,1)
(125,173,1)
(123,192,1)
(82,193,1)
(179,28,1)
(96,48,1)
(85,179,1)
(144,142,1)
(153,193,1)
(37,122,1)
(108,193,1)
(95,58,1)
(184,0,1)
(148,131,1)
(170,74,1)
(27,177,1)
(23,66,1)
(17,96,1)
(67,170,1)
(82,29,1)
(128,193,1)
(132,114,1)
(152,42,1)
(150,93,1)
(97,193,1)
(10,112,1)
(2,162,1)
(29,139,1)
(106,25,1)
(187,73,1)
(131,36,1)
(101,141,1)
(183,25,1)
(62,161,1)
(3,146,1)
(191,3,1)
(69,81,1)
(72,46,1)
(32,64,1)
(52,63,1)
(109,110,1)
(116,193,1)
(11,1,1)
(190,73,1)
(168,99,1)
(107,127,1)
(121,75,1)
(114,33,1)
(127,166,1)
(14,191,1)
(119,24,1)
(122,88,1)
(85,25,1)
(169,18,1)
(192,173,1)
(70,154,1)
(66,193,1)
(140,108,1)
(18,67,1)
(120,52,1)
(169,170,1)
(79,184,1)
(180,10,1)
(28,69,1)
(75,65,1)
(158,12,1)
(63,193,1)
(127,158,1)
(15,23,1)
(71,193,1)
(43,176,1)
(187,189,1)
(108,185,1)
(51,102,1)
(134,79,1)
(71,182,1)
(147,58,1)
(174,63,1)
(109,54,1)
(21,132,1)
(164,106,1)
(34,152,1)
(12,194,1)
(45,145,1)
(109,61,1)
(42,27,1)
(58,134,1)
(181,76,1)
(30,175,1)
(146,2,1)
(72,25,1)
(101,193,1)
(88,171,1)
(150,172,1)
(55,53,1)
(150,60,1)
(151,73,1)
(0,84,1)
(33,193,1)
(47,107,1)
(131,101,1)
(93,180,1)
(137,134,1)
(185,43,1)
(173,82,1)
(193,14,1)
(166,143,1)
(141,51,1)
(77,15,1)
(76,101,1)
(81,164,1)
(97,22,1)
(124,125,1)
(137,25,1)
(74,140,1)
(48,8,1)
(21,193,1)
(85,134,1)
(72,134,1)
(168,21,1)
(177,70,1)
(194,128,1)
(183,134,1)
(153,159,1)
(81,2,1)
(64,188,1)
(49,97,1)
(14,73,1)
(159,50,1)
(52,91,1)
(8,187,1)
(155,32,1)
(91,130,1)
(74,108,1)
(118,5,1)
(84,85,1)
(186,73,1)
(79,134,1)
(61,72,1)
(116,30,1)
(151,86,1)
(145,137,2)
(48,58,2)
(7,58,2)
(176,101,2)
(74,108,2)
(150,93,2)
(177,70,2)
(93,58,2)
(152,73,2)
(72,134,2)
(132,5,2)
(112,58,2)
(82,58,2)
(109,96,2)
(186,58,2)
(89,58,2)
(14,73,2)
(189,58,2)
(188,58,2)
(134,137,2)
(115,120,2)
(174,58,2)
(8,96,2)
(177,55,2)
(184,137,2)
(32,58,2)
(71,120,2)
(150,60,2)
(137,5,2)
(33,193,2)
(118,5,2)
(60,58,2)
(67,170,2)
(153,58,2)
(179,58,2)
(84,137,2)
(1,58,2)
(170,74,2)
(65,58,2)
(62,58,2)
(34,152,2)
(116,173,2)
(169,170,2)
(110,183,2)
(140,101,2)
(72,25,2)
(173,58,2)
(102,193,2)
(168,99,2)
(183,25,2)
(48,8,2)
(49,5,2)
(24,5,2)
(125,173,2)
(85,58,2)
(58,25,2)
(52,58,2)
(137,137,2)
(167,58,2)
(77,66,2)
(52,91,2)
(85,25,2)
(127,158,2)
(187,96,2)
(190,58,2)
(127,120,2)
(81,58,2)
(66,193,2)
(67,101,2)
(194,5,2)
(150,58,2)
(72,120,2)
(128,5,2)
(101,5,2)
(121,58,2)
(79,134,2)
(71,193,2)
(158,5,2)
(150,112,2)
(29,58,2)
(167,96,2)
(114,5,2)
(58,137,2)
(150,153,2)
(177,58,2)
(52,63,2)
(81,2,2)
(149,58,2)
(47,120,2)
(91,130,2)
(175,173,2)
(88,67,2)
(130,73,2)
(127,85,2)
(25,5,2)
(55,58,2)
(149,96,2)
(46,120,2)
(21,193,2)
(69,58,2)
(96,96,2)
(53,58,2)
(157,58,2)
(155,58,2)
(185,101,2)
(183,120,2)
(148,5,2)
(102,5,2)
(138,58,2)
(153,193,2)
(136,5,2)
(75,58,2)
(54,96,2)
(122,67,2)
(119,5,2)
(172,58,2)
(93,193,2)
(61,72,2)
(69,81,2)
(134,79,2)
(94,116,2)
(120,58,2)
(92,120,2)
(141,5,2)
(80,173,2)
(112,151,2)
(43,101,2)
(48,96,2)
(30,173,2)
(101,193,2)
(190,73,2)
(189,96,2)
(76,101,2)
(8,58,2)
(182,120,2)
(169,67,2)
(61,120,2)
(51,5,2)
(164,58,2)
(154,58,2)
(79,137,2)
(187,58,2)
(18,67,2)
(27,58,2)
(183,134,2)
(8,187,2)
(142,58,2)
(63,193,2)
(82,193,2)
(151,58,2)
(23,66,2)
(97,5,2)
(147,58,2)
(106,25,2)
(25,41,2)
(170,101,2)
(70,58,2)
(100,58,2)
(58,134,2)
(116,193,2)
(63,58,2)
(85,134,2)
(96,58,2)
(15,66,2)
(11,58,2)
(17,96,2)
(45,137,2)
(186,73,2)
(107,120,2)
(172,73,2)
(50,58,2)
(34,58,2)
(150,172,2)
(143,120,2)
(90,58,2)
(161,58,2)
(156,58,2)
(41,193,2)
(42,58,2)
(192,58,2)
(99,5,2)
(86,58,2)
(181,101,2)
(10,58,2)
(37,67,2)
(166,120,2)
(150,186,2)
(60,190,2)
(128,193,2)
(0,137,2)
(109,58,2)
(156,157,2)
(41,5,2)
(131,5,2)
(22,5,2)
(157,193,2)
(97,193,2)
(91,58,2)
(33,66,2)
(173,82,2)
(58,73,2)
(44,5,2)
(159,58,2)
(139,58,2)
(108,101,2)
(21,5,2)
(106,134,2)
(96,48,2)
(36,67,2)
(193,14,2)
(70,73,2)
(74,101,2)
(152,58,2)
(187,73,2)
(5,193,2)
(95,58,2)
(106,58,2)
(151,73,2)
(180,58,2)
(66,5,2)
(130,58,2)
(124,173,2)
(79,25,2)
(171,67,2)
(12,5,2)
(122,193,2)
(94,173,2)
(144,58,2)
(123,58,2)
(178,58,2)
(117,58,2)
(28,58,2)
(110,120,2)
(64,58,2)
(108,193,2)
-----------------------------------
(0,current)
(1,"%d")
(2,pos = 0)
(3,qe)
(4,)
(5,!(q = qe->parent)
(6,prev)
(7,count)
(8,&qe->qe_rules)
(9,pr_iter)
(10,q)
(11,qe)
(12,NULL)
(13,)
(14,qe->parent)
(15,q)
(16,if (prev)
(17,pr_iter)
(18,var)
(19,if (!q->count)
(20,for (current = q->head; current; current = current->next)
(21,queue_t_unref(q, "Expire copied reference")
(22,"Copy queue pointer from queue entry")
(23,queues)
(24,current)
(25,current = q->head)
(26,)
(27,qe)
(28,prev)
(29,count)
(30,name)
(31,posstr)
(32,q)
(33,queues_t_unlink(queues, q, "Queue is now dead; remove it from the container")
(34,pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr)
(35,)
(36,q->dead = 1)
(37,1)
(38,)
(39,)
(40,pos)
(41,q->head)
(42,chan)
(43,q)
(44,head)
(45,qe)
(46,next)
(47,next)
(48,AST_LIST_REMOVE_HEAD(&qe->qe_rules, list)
(49,q)
(50,q)
(51,q)
(52,ast_debug(1, "Queue \'%s\' Leave, Channel \'%s\'\\n", q->name, ast_channel_name(qe->chan)
(53,posstr)
(54,ast_free(pr_iter)
(55,sizeof(posstr)
(56,NULL)
(57,)
(58,current == qe)
(59,prev)
(60,ast_channel_uniqueid(qe->chan)
(61,q->head = current->next)
(62,pos)
(63,q->name)
(64,"Queue \'%s\' Leave, Channel \'%s\'\\n")
(65,"Leave")
(66,q->dead)
(67,!(var = ast_load_realtime("queues", "name", q->name, SENTINEL)
(68,)
(69,current->pos = ++pos)
(70,qe->pos)
(71,q->head)
(72,current->next)
(73,struct queue_ent *qe)
(74,ast_load_realtime("queues", "name", q->name, SENTINEL)
(75,"Channel: %s\\r\\nQueue: %s\\r\\nCount: %d\\r\\nPosition: %d\\r\\nUniqueid: %s\\r\\n")
(76,var)
(77,"Queue is now dead; remove it from the container")
(78,)
(79,current->next)
(80,"Queue:%s")
(81,++pos)
(82,q->count)
(83,if (q->dead)
(84,current)
(85,prev = current)
(86,chan)
(87,while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list)
(88,dead)
(89,posstr)
(90,chan)
(91,ast_channel_name(qe->chan)
(92,q)
(93,q->name)
(94,ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name)
(95,current)
(96,pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list)
(97,queue_t_ref(q, "Copy queue pointer from queue entry")
(98,)
(99,return;)
(100,posstr)
(101,q->realtime)
(102,ao2_unlock(q)
(103,)
(104,var)
(105,if (current == qe)
(106,current->pos)
(107,current)
(108,q->name)
(109,pr_iter)
(110,prev->next = current->next)
(111,)
(112,ast_channel_name(qe->chan)
(113,if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL)
(114,q)
(115,current)
(116,q->name)
(117,EVENT_FLAG_CALL)
(118,q)
(119,q)
(120,prev)
(121,qe)
(122,q->dead)
(123,chan)
(124,AST_DEVSTATE_CACHABLE)
(125,AST_DEVICE_NOT_INUSE)
(126,pos)
(127,prev->next)
(128,ao2_lock(q)
(129,if (q->realtime)
(130,qe->chan)
(131,q)
(132,"Expire copied reference")
(133,if (!(q = qe->parent)
(134,current = current->next)
(135,q)
(136,q)
(137,current)
(138,"QUEUEPOSITION")
(139,q)
(140,SENTINEL)
(141,realtime)
(142,qe)
(143,prev)
(144,chan)
(145,current)
(146,q)
(147,q)
(148,dead)
(149,list)
(150,ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",\n\\n\\t\\t\\t\\t"Channel: %s\\r\\nQueue: %s\\r\\nCount: %d\\r\\nPosition: %d\\r\\nUniqueid: %s\\r\\n",\n\\n\\t\\t\\t\\tast_channel_name(qe->chan)
(151,qe->chan)
(152,qe->chan)
(153,q->count)
(154,pos)
(155,name)
(156,q->count--)
(157,q->count)
(158,prev = NULL)
(159,count)
(160,current)
(161,qe)
(162,0)
(163,)
(164,pos)
(165,*prev = NULL)
(166,next)
(167,qe)
(168,RET)
(169,ast_variables_destroy(var)
(170,var = ast_load_realtime("queues", "name", q->name, SENTINEL)
(171,q)
(172,qe->pos)
(173,!q->count)
(174,qe)
(175,q)
(176,"name")
(177,snprintf(posstr, sizeof(posstr)
(178,pos)
(179,current)
(180,name)
(181,"queues")
(182,head)
(183,current->next)
(184,next)
(185,name)
(186,qe->chan)
(187,qe->qe_rules)
(188,1)
(189,qe_rules)
(190,qe->chan)
(191,parent)
(192,qe)
(193,q = qe->parent)
(194,prev)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^