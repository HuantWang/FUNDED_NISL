-----label-----
0
-----code-----
static int device_notifier(struct notifier_block *nb,
				  unsigned long action, void *data)
{
	struct device *dev = data;
	struct pci_dev *pdev = to_pci_dev(dev);
	struct dmar_domain *domain;

	if (iommu_no_mapping(dev))
		return 0;

	domain = find_domain(pdev);
	if (!domain)
		return 0;

	if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through)
		domain_remove_one_dev_info(domain, pdev);

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
17,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
22,23
22,24
23,24
25,26
25,27
25,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
35,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
66,67
68,69
68,70
69,70
70,71
72,73
74,75
74,76
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
84,85
85,86
85,87
85,88
86,87
88,89
90,91
92,93
-----nextToken-----
2,4,7,9,10,12,14,16,18,19,24,26,27,30,34,36,37,41,43,47,49,50,54,56,58,62,65,67,71,73,78,80,83,87,89,91,93
-----computeFrom-----
60,61
60,62
75,76
75,77
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int device_notifier(struct notifier_block *nb,				  unsigned long action, void *data){	struct device *dev = data;	struct pci_dev *pdev = to_pci_dev(dev);	struct dmar_domain *domain;	if (iommu_no_mapping(dev))		return 0;	domain = find_domain(pdev);	if (!domain)		return 0;	if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through)		domain_remove_one_dev_info(domain, pdev);	return 0;}
static int
device_notifier(struct notifier_block *nb,				  unsigned long action, void *data)
device_notifier
struct notifier_block *nb
struct notifier_block
notifier_block
*nb
*
nb
unsigned long action
unsigned long
action
action
void *data
void
*data
*
data
{	struct device *dev = data;	struct pci_dev *pdev = to_pci_dev(dev);	struct dmar_domain *domain;	if (iommu_no_mapping(dev))		return 0;	domain = find_domain(pdev);	if (!domain)		return 0;	if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through)		domain_remove_one_dev_info(domain, pdev);	return 0;}
struct device *dev = data;
struct device *dev = data;
struct device
device
*dev = data
*
dev
= data
data
data
struct pci_dev *pdev = to_pci_dev(dev);
struct pci_dev *pdev = to_pci_dev(dev);
struct pci_dev
pci_dev
*pdev = to_pci_dev(dev)
*
pdev
= to_pci_dev(dev)
to_pci_dev(dev)
to_pci_dev
to_pci_dev
dev
dev
struct dmar_domain *domain;
struct dmar_domain *domain;
struct dmar_domain
dmar_domain
*domain
*
domain
if (iommu_no_mapping(dev))		return 0;
iommu_no_mapping(dev)
iommu_no_mapping
iommu_no_mapping
dev
dev
return 0;
0
domain = find_domain(pdev);
domain = find_domain(pdev)
domain
domain
find_domain(pdev)
find_domain
find_domain
pdev
pdev
if (!domain)		return 0;
!domain
domain
domain
return 0;
0
if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through)		domain_remove_one_dev_info(domain, pdev);
action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through
action == BUS_NOTIFY_UNBOUND_DRIVER
action
action
BUS_NOTIFY_UNBOUND_DRIVER
BUS_NOTIFY_UNBOUND_DRIVER
!iommu_pass_through
iommu_pass_through
iommu_pass_through
domain_remove_one_dev_info(domain, pdev);
domain_remove_one_dev_info(domain, pdev)
domain_remove_one_dev_info
domain_remove_one_dev_info
domain
domain
pdev
pdev
return 0;
0
-----joern-----
(3,10,0)
(32,0,0)
(15,4,0)
(18,19,0)
(15,9,0)
(38,9,0)
(14,1,0)
(6,15,0)
(14,19,0)
(35,39,0)
(12,38,0)
(33,9,0)
(20,37,0)
(26,38,0)
(16,6,0)
(39,35,0)
(19,34,0)
(26,15,0)
(17,39,0)
(24,9,0)
(39,9,0)
(28,9,0)
(31,15,0)
(19,14,0)
(29,19,0)
(7,35,0)
(35,38,0)
(11,0,0)
(25,10,0)
(25,21,0)
(10,9,0)
(2,26,0)
(0,38,0)
(25,37,0)
(38,26,0)
(23,15,0)
(30,9,0)
(27,21,0)
(13,9,0)
(5,9,0)
(36,8,0)
(8,39,0)
(0,39,0)
(1,14,0)
(22,1,0)
(1,22,1)
(21,27,1)
(26,15,1)
(3,0,1)
(16,38,1)
(10,3,1)
(11,32,1)
(37,20,1)
(8,36,1)
(0,38,1)
(22,19,1)
(8,39,1)
(35,38,1)
(18,8,1)
(20,6,1)
(6,15,1)
(14,1,1)
(38,26,1)
(27,8,1)
(23,31,1)
(12,15,1)
(0,39,1)
(39,35,1)
(36,39,1)
(17,6,1)
(25,21,1)
(0,11,1)
(15,23,1)
(6,16,1)
(25,10,1)
(15,4,1)
(32,14,1)
(3,14,1)
(19,29,1)
(2,12,1)
(25,37,1)
(26,2,1)
(29,18,1)
(7,17,1)
(14,19,1)
(35,7,1)
(19,34,1)
(14,1,2)
(8,39,2)
(15,4,2)
(19,34,2)
(38,26,2)
(0,39,2)
(39,35,2)
(25,10,2)
(6,15,2)
(8,6,2)
(35,38,2)
(10,8,2)
(29,8,2)
(25,37,2)
(0,38,2)
(17,6,2)
(21,8,2)
(11,14,2)
(26,15,2)
(20,6,2)
(22,19,2)
(7,6,2)
(0,14,2)
(25,21,2)
(1,19,2)
(32,14,2)
(37,6,2)
(27,8,2)
(39,6,2)
(36,6,2)
(35,6,2)
(14,19,2)
(14,8,2)
(3,8,2)
(19,8,2)
(18,8,2)
-----------------------------------
(0,domain_remove_one_dev_info(domain, pdev)
(1,!iommu_pass_through)
(2,dev)
(3,0)
(4,void *data)
(5,if (iommu_no_mapping(dev)
(6,iommu_no_mapping(dev)
(7,pdev)
(8,!domain)
(9,)
(10,return 0;)
(11,pdev)
(12,pdev)
(13,if (!domain)
(14,action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through)
(15,*dev = data)
(16,dev)
(17,domain)
(18,action)
(19,action == BUS_NOTIFY_UNBOUND_DRIVER)
(20,0)
(21,return 0;)
(22,iommu_pass_through)
(23,data)
(24,if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through)
(25,RET)
(26,to_pci_dev(dev)
(27,0)
(28,dev)
(29,BUS_NOTIFY_UNBOUND_DRIVER)
(30,domain)
(31,dev)
(32,domain)
(33,pdev)
(34,unsigned long action)
(35,find_domain(pdev)
(36,domain)
(37,return 0;)
(38,*pdev = to_pci_dev(dev)
(39,domain = find_domain(pdev)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^