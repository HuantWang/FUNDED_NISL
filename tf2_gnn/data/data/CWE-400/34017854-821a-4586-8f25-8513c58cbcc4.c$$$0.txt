-----label-----
0
-----code-----
static void goodG2B2()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
43,44
43,45
43,46
44,45
46,47
49,50
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
60,61
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,48,52,54,58,59,61
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(13,22,0)
(25,8,0)
(13,0,0)
(8,22,0)
(0,13,0)
(8,5,0)
(1,15,0)
(22,19,0)
(21,0,0)
(22,8,0)
(16,11,0)
(22,13,0)
(15,11,0)
(24,15,0)
(14,8,0)
(7,6,0)
(19,22,0)
(20,14,0)
(3,21,0)
(4,23,0)
(10,11,0)
(0,21,0)
(2,6,0)
(17,23,0)
(14,5,0)
(12,11,0)
(18,0,0)
(7,15,1)
(21,3,1)
(25,6,1)
(17,4,1)
(4,6,1)
(22,19,1)
(13,0,1)
(1,24,1)
(23,17,1)
(22,13,1)
(9,23,1)
(18,25,1)
(0,21,1)
(15,1,1)
(20,8,1)
(14,8,1)
(6,2,1)
(4,14,1)
(14,20,1)
(2,7,1)
(8,22,1)
(3,18,1)
(3,6,2)
(20,6,2)
(14,6,2)
(13,0,2)
(13,6,2)
(0,21,2)
(14,8,2)
(8,22,2)
(25,6,2)
(18,6,2)
(22,13,2)
(0,6,2)
(22,19,2)
(22,6,2)
(8,6,2)
(21,6,2)
-----------------------------------
(0,100*sizeof(wchar_t)
(1,NULL)
(2,5)
(3,wchar_t)
(4,GLOBAL_CONST_FIVE)
(5,)
(6,GLOBAL_CONST_FIVE==5)
(7,GLOBAL_CONST_FIVE)
(8,data = (wchar_t *)
(9,RET)
(10,data)
(11,)
(12,if(GLOBAL_CONST_FIVE==5)
(13,ALLOCA(100*sizeof(wchar_t)
(14,printWLine(data)
(15,data = NULL)
(16,if(GLOBAL_CONST_FIVE==5)
(17,5)
(18,100)
(19,wchar_t *)
(20,data)
(21,sizeof(wchar_t)
(22,(wchar_t *)
(23,GLOBAL_CONST_FIVE==5)
(24,data)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^