-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_32_bad()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
47,49
48,49
49,50
49,51
51,52
51,53
51,54
53,54
54,55
56,57
58,59
58,60
58,61
59,60
59,61
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
69,70
71,72
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
90,91
92,93
94,95
94,96
95,96
96,97
96,98
98,99
98,100
100,101
101,102
102,103
104,105
104,106
105,106
106,107
106,108
107,108
109,110
109,111
111,112
113,114
113,115
113,116
113,117
114,115
115,116
115,117
116,117
119,120
119,121
120,121
122,123
122,124
123,124
123,125
124,125
127,128
129,130
130,131
132,133
133,134
134,135
134,136
135,136
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,55,57,62,64,66,68,70,75,78,80,85,86,91,93,97,99,103,108,110,112,117,118,121,125,126,128,131,136,137
-----computeFrom-----
32,33
32,34
59,60
59,61
73,74
73,75
88,89
88,90
115,116
115,117
119,120
119,121
-----guardedBy-----
64,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_32_bad(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_32_bad()
CWE400_Resource_Exhaustion__fgets_for_loop_32_bad
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(29,18,0)
(8,14,0)
(50,67,0)
(46,61,0)
(54,1,0)
(69,24,0)
(60,44,0)
(19,68,0)
(68,19,0)
(0,24,0)
(64,45,0)
(30,49,0)
(14,24,0)
(6,19,0)
(4,10,0)
(40,45,0)
(5,10,0)
(1,71,0)
(18,64,0)
(49,45,0)
(63,20,0)
(63,14,0)
(68,35,0)
(56,34,0)
(23,58,0)
(33,68,0)
(12,18,0)
(22,43,0)
(37,49,0)
(65,45,0)
(34,35,0)
(35,10,0)
(70,46,0)
(55,58,0)
(34,17,0)
(9,24,0)
(44,51,0)
(31,47,0)
(67,19,0)
(2,64,0)
(25,2,0)
(7,17,0)
(62,34,0)
(19,42,0)
(39,48,0)
(43,11,0)
(20,63,0)
(26,65,0)
(67,61,0)
(51,45,0)
(57,2,0)
(27,30,0)
(58,18,0)
(2,57,0)
(61,65,0)
(21,35,0)
(16,57,0)
(38,61,0)
(28,51,0)
(49,30,0)
(13,45,0)
(46,51,0)
(17,34,0)
(66,64,0)
(28,67,0)
(48,47,0)
(15,51,0)
(53,28,0)
(32,35,0)
(51,44,0)
(10,65,0)
(59,69,0)
(14,63,0)
(47,45,0)
(47,48,0)
(41,45,0)
(61,46,0)
(67,65,0)
(63,2,0)
(52,34,0)
(57,49,0)
(36,63,0)
(56,35,1)
(53,19,1)
(37,51,1)
(1,54,1)
(36,8,1)
(62,52,1)
(7,34,1)
(69,24,1)
(69,59,1)
(38,47,1)
(52,56,1)
(53,43,1)
(39,31,1)
(17,34,1)
(57,16,1)
(32,61,1)
(28,51,1)
(22,17,1)
(44,60,1)
(49,30,1)
(55,2,1)
(0,9,1)
(60,15,1)
(27,37,1)
(67,50,1)
(63,20,1)
(8,24,1)
(70,38,1)
(19,68,1)
(9,58,1)
(46,70,1)
(67,61,1)
(50,28,1)
(24,0,1)
(14,63,1)
(17,7,1)
(67,19,1)
(63,36,1)
(34,62,1)
(28,53,1)
(43,22,1)
(6,17,1)
(63,2,1)
(30,27,1)
(58,23,1)
(25,67,1)
(46,51,1)
(31,49,1)
(33,6,1)
(51,44,1)
(14,24,1)
(34,35,1)
(57,49,1)
(16,25,1)
(68,35,1)
(2,57,1)
(59,1,1)
(35,21,1)
(8,69,1)
(54,14,1)
(47,48,1)
(68,33,1)
(48,39,1)
(21,32,1)
(23,55,1)
(61,46,1)
(3,14,1)
(49,30,2)
(68,17,2)
(59,14,2)
(34,35,2)
(63,14,2)
(19,17,2)
(67,61,2)
(19,68,2)
(1,14,2)
(6,17,2)
(28,51,2)
(63,20,2)
(14,24,2)
(51,44,2)
(57,49,2)
(69,24,2)
(68,35,2)
(47,48,2)
(69,14,2)
(54,14,2)
(46,51,2)
(67,19,2)
(14,14,2)
(61,46,2)
(14,63,2)
(8,14,2)
(63,2,2)
(17,34,2)
(43,17,2)
(22,17,2)
(2,57,2)
(36,14,2)
(33,17,2)
-----------------------------------
(0,0)
(1,printLine("Hello")
(2,count = *countPtr2)
(3,RET)
(4,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,inputBuffer)
(6,count)
(7,NULL)
(8,i)
(9,i)
(10,)
(11,)
(12,i)
(13,countPtr1)
(14,i < (size_t)
(15,countPtr1)
(16,countPtr2)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,)
(19,count = atoi(inputBuffer)
(20,size_t)
(21,"")
(22,"fgets()
(23,0)
(24,i = 0)
(25,count)
(26,count)
(27,count)
(28,*countPtr1)
(29,for (i = 0; i < (size_t)
(30,&count)
(31,count)
(32,inputBuffer)
(33,inputBuffer)
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,inputBuffer[CHAR_ARRAY_SIZE] = "")
(36,count)
(37,countPtr2)
(38,count)
(39,1)
(40,countPtr2)
(41,count)
(42,)
(43,printLine("fgets()
(44,&count)
(45,)
(46,*countPtr1)
(47,count = -1)
(48,-1)
(49,*countPtr2 = &count)
(50,count)
(51,*countPtr1 = &count)
(52,CHAR_ARRAY_SIZE)
(53,countPtr1)
(54,"Hello")
(55,i)
(56,inputBuffer)
(57,*countPtr2)
(58,i = 0)
(59,i)
(60,count)
(61,count = *countPtr1)
(62,stdin)
(63,(size_t)
(64,)
(65,)
(66,count)
(67,*countPtr1 = count)
(68,atoi(inputBuffer)
(69,i++)
(70,countPtr1)
(71,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^