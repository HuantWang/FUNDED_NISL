-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(STATIC_CONST_TRUE)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
20,21
21,22
22,23
22,24
23,24
26,27
27,28
28,29
28,30
29,30
32,33
32,34
33,34
35,36
36,37
36,38
37,38
38,39
38,40
39,40
41,42
41,43
43,44
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
54,55
54,56
55,56
55,57
56,57
59,60
61,62
62,63
64,65
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,16,19,24,25,30,31,34,40,42,44,49,50,53,57,58,60,63,68,69
-----computeFrom-----
12,13
12,14
28,29
28,30
47,48
47,49
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
STATIC_CONST_FALSE
STATIC_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(4,16,0)
(4,2,0)
(15,28,0)
(1,19,0)
(20,11,0)
(33,34,0)
(27,33,0)
(18,4,0)
(14,30,0)
(21,29,0)
(36,12,0)
(22,12,0)
(37,12,0)
(29,16,0)
(31,11,0)
(3,33,0)
(19,7,0)
(16,29,0)
(24,6,0)
(26,6,0)
(9,4,0)
(8,6,0)
(11,33,0)
(4,26,0)
(28,13,0)
(25,2,0)
(26,4,0)
(5,2,0)
(16,12,0)
(17,16,0)
(2,23,0)
(4,18,0)
(32,26,0)
(30,6,0)
(11,31,1)
(15,26,1)
(2,5,1)
(26,4,1)
(4,16,1)
(0,26,1)
(8,11,1)
(31,20,1)
(5,25,1)
(32,30,1)
(4,18,1)
(6,24,1)
(25,10,1)
(0,35,1)
(21,17,1)
(20,35,1)
(10,16,1)
(9,32,1)
(4,9,1)
(24,8,1)
(30,6,1)
(28,15,1)
(32,6,1)
(29,21,1)
(1,10,1)
(4,2,1)
(35,2,1)
(19,1,1)
(14,28,1)
(26,6,1)
(30,14,1)
(35,19,1)
(16,29,1)
(19,10,2)
(9,35,2)
(30,26,2)
(32,26,2)
(25,10,2)
(26,6,2)
(15,26,2)
(1,10,2)
(11,35,2)
(5,10,2)
(28,26,2)
(4,26,2)
(20,35,2)
(2,10,2)
(14,26,2)
(26,26,2)
(32,35,2)
(4,16,2)
(4,2,2)
(4,35,2)
(24,35,2)
(26,35,2)
(26,4,2)
(6,35,2)
(4,18,2)
(16,29,2)
(30,6,2)
(8,35,2)
(31,35,2)
(9,26,2)
-----------------------------------
(0,RET)
(1,"Benign, fixed string")
(2,count = 20)
(3,i)
(4,(size_t)
(5,20)
(6,i = 0)
(7,)
(8,i)
(9,count)
(10,STATIC_CONST_FALSE)
(11,i = 0)
(12,)
(13,)
(14,i)
(15,"Hello")
(16,count = -1)
(17,count)
(18,size_t)
(19,printLine("Benign, fixed string")
(20,i)
(21,1)
(22,count)
(23,)
(24,0)
(25,count)
(26,i < (size_t)
(27,for (i = 0; i < (size_t)
(28,printLine("Hello")
(29,-1)
(30,i++)
(31,0)
(32,i)
(33,)
(34,)
(35,STATIC_CONST_TRUE)
(36,if(STATIC_CONST_TRUE)
(37,if(STATIC_CONST_FALSE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^