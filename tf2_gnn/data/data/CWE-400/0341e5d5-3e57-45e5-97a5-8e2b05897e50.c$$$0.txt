-----label-----
0
-----code-----
static void goodG2B2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(5==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
46,48
47,48
47,49
48,49
53,54
54,55
54,56
55,56
55,57
56,57
56,58
57,58
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
77,78
77,79
78,79
78,80
81,82
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,38,42,43,49,50,51,52,58,59,60,61,65,69,71,75,76,79,80,82
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
37,38
37,39
45,46
45,47
54,55
54,56
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    struct _twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    struct _twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
5==5
5
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(8,6,0)
(11,12,0)
(2,24,0)
(30,12,0)
(2,17,0)
(7,32,0)
(10,21,0)
(27,39,0)
(40,35,0)
(19,15,0)
(2,1,0)
(26,5,0)
(39,23,0)
(42,33,0)
(38,43,0)
(41,43,0)
(9,22,0)
(27,17,0)
(16,6,0)
(21,36,0)
(32,12,0)
(7,29,0)
(1,36,0)
(7,3,0)
(18,1,0)
(17,2,0)
(3,7,0)
(14,8,0)
(13,15,0)
(34,13,0)
(25,33,0)
(29,7,0)
(28,8,0)
(22,36,0)
(4,43,0)
(32,7,0)
(8,1,0)
(1,2,0)
(31,27,0)
(15,13,0)
(23,39,0)
(37,5,0)
(12,1,0)
(6,22,0)
(12,32,0)
(35,43,0)
(20,15,0)
(13,21,0)
(39,27,0)
(24,2,0)
(15,1,0)
(44,35,0)
(3,36,0)
(17,27,0)
(6,8,0)
(28,1,1)
(6,16,1)
(25,35,1)
(22,9,1)
(39,23,1)
(35,44,1)
(26,33,1)
(33,42,1)
(42,25,1)
(13,34,1)
(10,13,1)
(12,1,1)
(2,24,1)
(34,15,1)
(1,2,1)
(7,29,1)
(30,21,1)
(2,17,1)
(3,7,1)
(9,6,1)
(12,11,1)
(39,31,1)
(15,19,1)
(0,5,1)
(17,27,1)
(44,40,1)
(26,3,1)
(5,37,1)
(21,10,1)
(7,32,1)
(20,22,1)
(19,20,1)
(11,30,1)
(31,18,1)
(13,15,1)
(15,1,1)
(8,14,1)
(14,28,1)
(27,39,1)
(6,8,1)
(18,33,1)
(37,26,1)
(32,12,1)
(8,1,1)
(16,8,1)
(1,2,2)
(7,33,2)
(8,33,2)
(34,33,2)
(39,23,2)
(30,33,2)
(7,29,2)
(39,33,2)
(22,33,2)
(12,1,2)
(32,33,2)
(27,39,2)
(8,1,2)
(17,27,2)
(19,33,2)
(10,33,2)
(2,17,2)
(18,33,2)
(32,12,2)
(28,33,2)
(27,33,2)
(21,33,2)
(3,33,2)
(6,33,2)
(3,7,2)
(13,33,2)
(20,33,2)
(11,33,2)
(17,33,2)
(14,33,2)
(12,33,2)
(2,33,2)
(15,33,2)
(16,33,2)
(9,33,2)
(1,33,2)
(31,33,2)
(7,32,2)
(2,24,2)
(13,15,2)
(6,8,2)
(15,1,2)
-----------------------------------
(0,RET)
(1,data = (struct _twoIntsStruct *)
(2,(struct _twoIntsStruct *)
(3,printStructLine((twoIntsStruct *)
(4,if(5==5)
(5,5==5)
(6,data[0].intOne)
(7,(twoIntsStruct *)
(8,data[0])
(9,0)
(10,0)
(11,0)
(12,data[0])
(13,data[0].intTwo)
(14,0)
(15,data[0])
(16,intOne)
(17,ALLOCA(100*sizeof(struct _twoIntsStruct)
(18,data)
(19,0)
(20,data)
(21,data[0].intTwo = 0)
(22,data[0].intOne = 0)
(23,struct _twoIntsStruct)
(24,struct _twoIntsStruct *)
(25,5)
(26,5)
(27,100*sizeof(struct _twoIntsStruct)
(28,data)
(29,twoIntsStruct *)
(30,data)
(31,100)
(32,&data[0])
(33,5==5)
(34,intTwo)
(35,data = NULL)
(36,)
(37,5)
(38,data)
(39,sizeof(struct _twoIntsStruct)
(40,data)
(41,if(5==5)
(42,5)
(43,)
(44,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^