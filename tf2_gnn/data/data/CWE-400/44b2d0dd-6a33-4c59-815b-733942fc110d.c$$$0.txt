-----label-----
1
-----code-----
void
sofree(struct socket *so)
{

	if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)
		return;
	if (so->so_head) {
		/*
		 * We must not decommission a socket that's on the accept(2)
		 * queue.  If we do, then accept(2) may hang after select(2)
		 * indicated that the listening socket was ready.
		 */
		if (!soqremque(so, 0))
			return;
	}
	if (so->so_rcv.sb_hiwat)
		(void)chgsbsize(so->so_uid, &so->so_rcv.sb_hiwat, 0,
		    RLIM_INFINITY);
	if (so->so_snd.sb_hiwat)
		(void)chgsbsize(so->so_uid, &so->so_snd.sb_hiwat, 0,
		    RLIM_INFINITY);
	sbrelease(&so->so_snd, so);
	sorflush(so);
	pool_put(&socket_pool, so);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
12,14
13,14
13,15
14,15
14,16
15,16
18,19
18,20
19,20
20,21
20,22
21,22
21,23
22,23
25,26
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
37,38
37,39
37,40
38,39
40,41
44,45
44,46
45,46
45,47
46,47
46,48
47,48
51,52
52,53
52,54
53,54
53,55
56,57
56,58
56,59
56,60
56,61
57,58
59,60
59,61
60,61
63,64
64,65
64,66
65,66
65,67
66,67
71,72
73,74
73,75
74,75
74,76
75,76
75,77
76,77
80,81
81,82
81,83
82,83
82,84
85,86
85,87
85,88
85,89
85,90
86,87
88,89
88,90
89,90
92,93
93,94
93,95
94,95
94,96
95,96
100,101
102,103
103,104
103,105
103,106
104,105
106,107
107,108
107,109
108,109
111,112
113,114
114,115
114,116
115,116
117,118
119,120
120,121
120,122
120,123
121,122
123,124
124,125
126,127
-----nextToken-----
2,4,7,9,10,16,17,23,24,26,27,28,32,33,39,41,42,43,48,49,50,54,55,58,61,62,67,68,69,70,72,77,78,79,83,84,87,90,91,96,97,98,99,101,105,109,110,112,116,118,122,125,127
-----computeFrom-----
13,14
13,15
18,19
18,20
20,21
20,22
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
voidsofree(struct socket *so){	if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)		return;	if (so->so_head) {		/*		 * We must not decommission a socket that's on the accept(2)		 * queue.  If we do, then accept(2) may hang after select(2)		 * indicated that the listening socket was ready.		 */		if (!soqremque(so, 0))			return;	}	if (so->so_rcv.sb_hiwat)		(void)chgsbsize(so->so_uid, &so->so_rcv.sb_hiwat, 0,		    RLIM_INFINITY);	if (so->so_snd.sb_hiwat)		(void)chgsbsize(so->so_uid, &so->so_snd.sb_hiwat, 0,		    RLIM_INFINITY);	sbrelease(&so->so_snd, so);	sorflush(so);	pool_put(&socket_pool, so);}
void
sofree(struct socket *so)
sofree
struct socket *so
struct socket
socket
*so
*
so
{	if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)		return;	if (so->so_head) {		/*		 * We must not decommission a socket that's on the accept(2)		 * queue.  If we do, then accept(2) may hang after select(2)		 * indicated that the listening socket was ready.		 */		if (!soqremque(so, 0))			return;	}	if (so->so_rcv.sb_hiwat)		(void)chgsbsize(so->so_uid, &so->so_rcv.sb_hiwat, 0,		    RLIM_INFINITY);	if (so->so_snd.sb_hiwat)		(void)chgsbsize(so->so_uid, &so->so_snd.sb_hiwat, 0,		    RLIM_INFINITY);	sbrelease(&so->so_snd, so);	sorflush(so);	pool_put(&socket_pool, so);}
if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)		return;
so->so_pcb || (so->so_state & SS_NOFDREF) == 0
so->so_pcb
so
so
so_pcb
(so->so_state & SS_NOFDREF) == 0
(so->so_state & SS_NOFDREF)
so->so_state & SS_NOFDREF
so->so_state
so
so
so_state
SS_NOFDREF
SS_NOFDREF
0
return;
if (so->so_head) {		/*		 * We must not decommission a socket that's on the accept(2)		 * queue.  If we do, then accept(2) may hang after select(2)		 * indicated that the listening socket was ready.		 */		if (!soqremque(so, 0))			return;	}
so->so_head
so
so
so_head
{		/*		 * We must not decommission a socket that's on the accept(2)		 * queue.  If we do, then accept(2) may hang after select(2)		 * indicated that the listening socket was ready.		 */		if (!soqremque(so, 0))			return;	}
if (!soqremque(so, 0))			return;
!soqremque(so, 0)
soqremque(so, 0)
soqremque
soqremque
so
so
0
return;
if (so->so_rcv.sb_hiwat)		(void)chgsbsize(so->so_uid, &so->so_rcv.sb_hiwat, 0,		    RLIM_INFINITY);
so->so_rcv.sb_hiwat
so->so_rcv
so
so
so_rcv
sb_hiwat
(void)chgsbsize(so->so_uid, &so->so_rcv.sb_hiwat, 0,		    RLIM_INFINITY);
(void)chgsbsize(so->so_uid, &so->so_rcv.sb_hiwat, 0,		    RLIM_INFINITY)
void
void

chgsbsize(so->so_uid, &so->so_rcv.sb_hiwat, 0,		    RLIM_INFINITY)
chgsbsize
chgsbsize
so->so_uid
so
so
so_uid
&so->so_rcv.sb_hiwat
so->so_rcv.sb_hiwat
so->so_rcv
so
so
so_rcv
sb_hiwat
0
RLIM_INFINITY
RLIM_INFINITY
if (so->so_snd.sb_hiwat)		(void)chgsbsize(so->so_uid, &so->so_snd.sb_hiwat, 0,		    RLIM_INFINITY);
so->so_snd.sb_hiwat
so->so_snd
so
so
so_snd
sb_hiwat
(void)chgsbsize(so->so_uid, &so->so_snd.sb_hiwat, 0,		    RLIM_INFINITY);
(void)chgsbsize(so->so_uid, &so->so_snd.sb_hiwat, 0,		    RLIM_INFINITY)
void
void

chgsbsize(so->so_uid, &so->so_snd.sb_hiwat, 0,		    RLIM_INFINITY)
chgsbsize
chgsbsize
so->so_uid
so
so
so_uid
&so->so_snd.sb_hiwat
so->so_snd.sb_hiwat
so->so_snd
so
so
so_snd
sb_hiwat
0
RLIM_INFINITY
RLIM_INFINITY
sbrelease(&so->so_snd, so);
sbrelease(&so->so_snd, so)
sbrelease
sbrelease
&so->so_snd
so->so_snd
so
so
so_snd
so
so
sorflush(so);
sorflush(so)
sorflush
sorflush
so
so
pool_put(&socket_pool, so);
pool_put(&socket_pool, so)
pool_put
pool_put
&socket_pool
socket_pool
socket_pool
so
so
-----joern-----
(23,58,0)
(42,48,0)
(24,37,0)
(65,29,0)
(61,15,0)
(70,16,0)
(20,29,0)
(71,25,0)
(11,25,0)
(27,19,0)
(31,25,0)
(11,44,0)
(70,25,0)
(12,77,0)
(9,25,0)
(7,77,0)
(37,49,0)
(19,27,0)
(61,8,0)
(32,14,0)
(14,25,0)
(51,11,0)
(50,18,0)
(72,54,0)
(2,25,0)
(21,18,0)
(78,58,0)
(54,25,0)
(63,9,0)
(8,29,0)
(71,6,0)
(8,61,0)
(56,45,0)
(16,49,0)
(66,0,0)
(37,27,0)
(15,0,0)
(1,45,0)
(73,12,0)
(41,71,0)
(33,74,0)
(76,61,0)
(46,11,0)
(9,18,0)
(39,69,0)
(17,37,0)
(39,30,0)
(28,16,0)
(60,54,0)
(34,70,0)
(29,25,0)
(42,25,0)
(77,12,0)
(0,25,0)
(78,25,0)
(77,21,0)
(35,54,0)
(2,45,0)
(12,25,0)
(14,44,0)
(21,77,0)
(4,45,0)
(64,31,0)
(18,9,0)
(42,45,0)
(13,35,0)
(58,78,0)
(59,37,0)
(54,35,0)
(44,14,0)
(10,24,0)
(48,42,0)
(15,61,0)
(57,31,0)
(29,8,0)
(18,33,0)
(5,9,0)
(49,37,0)
(40,70,0)
(68,42,0)
(33,18,0)
(3,78,0)
(6,71,0)
(43,71,0)
(49,16,0)
(47,18,0)
(44,11,0)
(74,33,0)
(38,78,0)
(62,67,0)
(53,24,0)
(22,45,0)
(24,25,0)
(18,21,0)
(37,24,0)
(75,8,0)
(36,2,0)
(52,0,0)
(26,12,0)
(14,45,0)
(16,70,0)
(0,15,0)
(27,37,0)
(55,48,0)
(18,47,1)
(57,15,1)
(58,23,1)
(72,31,1)
(35,13,1)
(14,44,1)
(8,75,1)
(12,25,1)
(61,76,1)
(18,9,1)
(65,20,1)
(40,34,1)
(54,60,1)
(49,16,1)
(43,31,1)
(39,30,1)
(70,25,1)
(0,25,1)
(31,64,1)
(61,8,1)
(50,21,1)
(2,25,1)
(31,25,1)
(46,58,1)
(9,25,1)
(78,25,1)
(10,35,1)
(29,25,1)
(55,2,1)
(0,52,1)
(33,74,1)
(36,14,1)
(30,6,1)
(21,77,1)
(27,19,1)
(23,78,1)
(16,28,1)
(15,0,1)
(34,24,1)
(37,24,1)
(28,70,1)
(58,78,1)
(72,6,1)
(63,58,1)
(48,55,1)
(29,65,1)
(44,11,1)
(3,38,1)
(42,68,1)
(11,51,1)
(33,18,1)
(69,15,1)
(12,73,1)
(52,66,1)
(15,61,1)
(70,40,1)
(42,25,1)
(11,25,1)
(64,57,1)
(59,17,1)
(14,25,1)
(27,37,1)
(75,29,1)
(39,42,1)
(42,48,1)
(18,21,1)
(77,7,1)
(13,54,1)
(68,48,1)
(46,33,1)
(39,69,1)
(7,12,1)
(14,32,1)
(9,5,1)
(71,25,1)
(24,53,1)
(73,26,1)
(17,49,1)
(6,71,1)
(37,59,1)
(47,50,1)
(78,3,1)
(38,27,1)
(24,25,1)
(71,41,1)
(51,46,1)
(76,8,1)
(77,12,1)
(37,49,1)
(32,44,1)
(60,72,1)
(38,35,1)
(35,54,1)
(16,70,1)
(5,63,1)
(2,36,1)
(41,43,1)
(26,9,1)
(8,29,1)
(53,10,1)
(20,0,1)
(54,25,1)
(48,6,2)
(0,25,2)
(35,6,2)
(55,6,2)
(13,6,2)
(18,9,2)
(31,25,2)
(42,31,2)
(70,35,2)
(37,49,2)
(64,15,2)
(72,31,2)
(6,31,2)
(77,58,2)
(49,35,2)
(44,11,2)
(8,29,2)
(32,6,2)
(38,6,2)
(11,25,2)
(42,25,2)
(63,58,2)
(50,58,2)
(24,25,2)
(11,31,2)
(68,6,2)
(59,35,2)
(32,31,2)
(31,15,2)
(7,58,2)
(44,31,2)
(60,6,2)
(27,35,2)
(69,15,2)
(14,31,2)
(21,77,2)
(38,31,2)
(54,6,2)
(35,31,2)
(18,58,2)
(23,6,2)
(41,31,2)
(12,58,2)
(35,54,2)
(15,61,2)
(78,6,2)
(75,0,2)
(18,21,2)
(17,35,2)
(9,58,2)
(78,25,2)
(30,6,2)
(44,6,2)
(77,12,2)
(14,44,2)
(57,15,2)
(72,6,2)
(58,6,2)
(43,31,2)
(36,31,2)
(33,18,2)
(26,58,2)
(21,58,2)
(9,25,2)
(20,0,2)
(12,25,2)
(71,31,2)
(58,78,2)
(10,35,2)
(42,6,2)
(23,31,2)
(24,35,2)
(68,31,2)
(27,19,2)
(61,8,2)
(61,0,2)
(29,0,2)
(39,69,2)
(46,6,2)
(11,6,2)
(36,6,2)
(2,31,2)
(34,35,2)
(65,0,2)
(51,31,2)
(47,58,2)
(3,31,2)
(29,25,2)
(70,25,2)
(13,31,2)
(49,16,2)
(16,35,2)
(60,31,2)
(27,37,2)
(14,25,2)
(37,35,2)
(5,58,2)
(71,25,2)
(15,0,2)
(55,31,2)
(2,25,2)
(58,31,2)
(28,35,2)
(2,6,2)
(39,30,2)
(40,35,2)
(51,6,2)
(33,58,2)
(78,31,2)
(14,6,2)
(76,0,2)
(37,24,2)
(46,31,2)
(53,35,2)
(8,0,2)
(42,48,2)
(33,74,2)
(3,6,2)
(16,70,2)
(73,58,2)
(48,31,2)
(54,25,2)
(54,31,2)
(6,71,2)
-----------------------------------
(0,so->so_pcb)
(1,if (so->so_pcb || (so->so_state & SS_NOFDREF)
(2,sorflush(so)
(3,so_snd)
(4,if (so->so_snd.sb_hiwat)
(5,so_uid)
(6,!soqremque(so, 0)
(7,sb_hiwat)
(8,so->so_state & SS_NOFDREF)
(9,so->so_uid)
(10,so)
(11,so->so_snd)
(12,so->so_snd)
(13,sb_hiwat)
(14,sbrelease(&so->so_snd, so)
(15,so->so_pcb || (so->so_state & SS_NOFDREF)
(16,so->so_rcv.sb_hiwat)
(17,0)
(18,chgsbsize(so->so_uid, &so->so_snd.sb_hiwat, 0,\n\\n\\t\\t    RLIM_INFINITY)
(19,void)
(20,so)
(21,&so->so_snd.sb_hiwat)
(22,if (so->so_head)
(23,sb_hiwat)
(24,so->so_uid)
(25,struct socket *so)
(26,so)
(27,(void)
(28,sb_hiwat)
(29,so->so_state)
(30,return;)
(31,so->so_head)
(32,so)
(33,(void)
(34,so)
(35,so->so_rcv.sb_hiwat)
(36,so)
(37,chgsbsize(so->so_uid, &so->so_rcv.sb_hiwat, 0,\n\\n\\t\\t    RLIM_INFINITY)
(38,so)
(39,RET)
(40,so_rcv)
(41,0)
(42,pool_put(&socket_pool, so)
(43,so)
(44,&so->so_snd)
(45,)
(46,so)
(47,RLIM_INFINITY)
(48,&socket_pool)
(49,&so->so_rcv.sb_hiwat)
(50,0)
(51,so_snd)
(52,so_pcb)
(53,so_uid)
(54,so->so_rcv)
(55,socket_pool)
(56,if (so->so_rcv.sb_hiwat)
(57,so)
(58,so->so_snd.sb_hiwat)
(59,RLIM_INFINITY)
(60,so_rcv)
(61,(so->so_state & SS_NOFDREF)
(62,if (!soqremque(so, 0)
(63,so)
(64,so_head)
(65,so_state)
(66,so)
(67,)
(68,so)
(69,return;)
(70,so->so_rcv)
(71,soqremque(so, 0)
(72,so)
(73,so_snd)
(74,void)
(75,SS_NOFDREF)
(76,0)
(77,so->so_snd.sb_hiwat)
(78,so->so_snd)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^