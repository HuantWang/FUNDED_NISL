-----label-----
0
-----code-----
static int amatch(char *s, char *p, boolean_t check_ncargs)
{
    register int scc;
    int ok, lc;
    char *sgpathp;
    struct stat stb;
    int c, cc;

    globbed = 1;
    for (;;) {
	scc = *s++ & TRIM;
	switch (c = *p++) {

	case '{':
	    return (execbrc(p - 1, s - 1));

	case '[':
	    ok = 0;
	    lc = 077777;
	    while ((cc = *p++)) {
		if (cc == ']') {
		    if (ok)
			break;
		    return (0);
		}
		if (cc == '-') {
		    if (lc <= scc && scc <= *p++)
			ok++;
		}
		else if (scc == (lc = cc))
		    ok++;
	    }
	    if (cc == 0) {
		globerr = "Missing ]";
		return (0);
	    }
	    continue;

	case '*':
	    if (!*p)
		return (1);
	    if (*p == '/') {
		p++;
		goto slash;
	    } else if (*p == '*') {
		s--;
		continue;
	    }
	    s--;
	    do {
		if (amatch(s, p, check_ncargs))
		    return (1);
	    } while (*s++);
	    return (0);

	case 0:
	    return (scc == 0);

	default:
	    if (c != scc)
		return (0);
	    continue;

	case '?':
	    if (scc == 0)
		return (0);
	    continue;

	case '/':
	    if (scc)
		return (0);
	  slash:
	    s = entp;
	    sgpathp = gpathp;
	    while (*s)
		addpath(*s++);
	    addpath('/');
	    if (stat(gpath, &stb) == 0 && isdir(stb))
		if (*p == 0) {
		    Gcat(gpath, "", check_ncargs);
		    globcnt++;
		}
		else
		    expand(p, check_ncargs);
	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)
	      globerr = "Arguments too long";
	    gpathp = sgpathp;
	    *gpathp = 0;
	    return (0);
	}
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
10,11
10,12
12,13
12,14
15,16
15,17
16,17
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
22,23
22,24
24,25
26,27
27,28
27,29
27,30
29,30
31,32
33,34
34,35
34,36
36,37
36,38
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
54,55
57,58
57,59
59,60
59,61
60,61
61,62
61,63
62,63
64,65
64,66
65,66
66,67
67,68
69,70
71,72
71,73
72,73
72,74
73,74
75,76
76,77
77,78
79,80
79,81
79,82
79,83
79,84
79,85
79,86
79,87
79,88
79,89
79,90
79,91
79,92
79,93
79,94
79,95
79,96
79,97
79,98
79,99
79,100
79,101
79,102
79,103
79,104
79,105
79,106
79,107
79,108
79,109
79,110
79,111
79,112
80,81
82,83
83,84
84,85
84,86
84,87
85,86
87,88
87,89
88,89
91,92
91,93
92,93
95,96
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
107,108
107,109
108,109
109,110
109,111
110,111
112,113
113,114
114,115
116,117
116,118
117,118
117,119
118,119
118,120
119,120
122,123
122,124
123,124
123,125
124,125
127,128
128,129
130,131
130,132
130,133
131,132
131,133
132,133
135,136
136,137
136,138
137,138
137,139
138,139
138,140
139,140
141,142
143,144
143,145
144,145
146,147
147,148
148,149
150,151
151,152
152,153
154,155
154,156
155,156
155,157
156,157
158,159
159,160
159,161
160,161
162,163
164,165
165,166
166,167
168,169
168,170
169,170
169,171
170,171
173,174
173,175
174,175
175,176
175,177
176,177
179,180
180,181
183,184
185,186
185,187
186,187
187,188
188,189
190,191
191,192
193,194
193,195
193,196
194,195
194,196
195,196
196,197
199,200
199,201
200,201
201,202
202,203
204,205
206,207
206,208
207,208
207,209
208,209
209,210
212,213
212,214
213,214
214,215
215,216
218,219
219,220
220,221
222,223
222,224
223,224
224,225
224,226
225,226
225,227
225,228
225,229
226,227
228,229
230,231
232,233
234,235
235,236
237,238
238,239
239,240
241,242
242,243
244,245
246,247
247,248
248,249
248,250
249,250
253,254
253,255
254,255
254,256
255,256
257,258
259,260
260,261
263,264
265,266
265,267
266,267
266,268
267,268
270,271
271,272
274,275
276,277
276,278
277,278
279,280
280,281
282,283
282,284
284,285
285,286
285,287
286,287
288,289
290,291
291,292
291,293
292,293
294,295
296,297
296,298
297,298
298,299
300,301
301,302
301,303
302,303
304,305
305,306
306,307
308,309
309,310
309,311
310,311
313,314
313,315
314,315
314,316
315,316
315,317
316,317
316,318
316,319
317,318
319,320
321,322
322,323
325,326
325,327
326,327
328,329
330,331
330,332
330,333
331,332
331,333
332,333
333,334
336,337
336,338
337,338
338,339
338,340
338,341
338,342
339,340
341,342
344,345
346,347
347,348
348,349
350,351
351,352
351,353
351,354
352,353
354,355
356,357
358,359
358,360
359,360
359,361
360,361
361,362
361,363
362,363
364,365
366,367
368,369
369,370
369,371
370,371
373,374
374,375
374,376
375,376
377,378
379,380
380,381
380,382
381,382
382,383
385,386
386,387
-----nextToken-----
2,4,6,8,9,11,13,14,17,19,23,25,28,30,32,35,37,38,42,44,47,49,51,55,56,58,63,68,70,74,78,81,86,89,90,93,94,96,100,101,105,106,111,115,120,121,125,126,129,133,134,140,142,145,149,153,157,161,163,167,171,172,177,178,181,182,184,189,192,197,198,203,205,210,211,216,217,221,227,229,231,233,236,240,243,245,250,251,252,256,258,261,262,264,268,269,272,273,275,278,281,283,287,289,293,295,299,303,307,311,312,318,320,323,324,327,329,334,335,340,342,343,345,349,353,355,357,363,365,367,371,372,376,378,383,384,387
-----computeFrom-----
53,54
53,55
61,62
61,63
64,65
64,66
72,73
72,74
87,88
87,89
91,92
91,93
98,99
98,100
103,104
103,105
109,110
109,111
118,119
118,120
131,132
131,133
137,138
137,139
138,139
138,140
143,144
143,145
155,156
155,157
159,160
159,161
169,170
169,171
175,176
175,177
194,195
194,196
207,208
207,209
248,249
248,250
254,255
254,256
266,267
266,268
285,286
285,287
291,292
291,293
314,315
314,316
315,316
315,317
331,332
331,333
359,360
359,361
369,370
369,371
374,375
374,376
380,381
380,382
-----guardedBy-----
197,203
320,342
-----guardedByNegation-----
133,163
197,210
334,355
-----lastLexicalUse-----
197,210
-----jump-----
197,210
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;NullStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ReturnStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;IdExpression;Name;BreakStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ContinueStatement;CaseStatement;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ContinueStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DoStatement;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;CaseStatement;LiteralExpression;ReturnStatement;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;DefaultStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ContinueStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ContinueStatement;CaseStatement;LiteralExpression;IfStatement;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static int amatch(char *s, char *p, boolean_t check_ncargs){    register int scc;    int ok, lc;    char *sgpathp;    struct stat stb;    int c, cc;    globbed = 1;    for (;;) {	scc = *s++ & TRIM;	switch (c = *p++) {	case '{':	    return (execbrc(p - 1, s - 1));	case '[':	    ok = 0;	    lc = 077777;	    while ((cc = *p++)) {		if (cc == ']') {		    if (ok)			break;		    return (0);		}		if (cc == '-') {		    if (lc <= scc && scc <= *p++)			ok++;		}		else if (scc == (lc = cc))		    ok++;	    }	    if (cc == 0) {		globerr = "Missing ]";		return (0);	    }	    continue;	case '*':	    if (!*p)		return (1);	    if (*p == '/') {		p++;		goto slash;	    } else if (*p == '*') {		s--;		continue;	    }	    s--;	    do {		if (amatch(s, p, check_ncargs))		    return (1);	    } while (*s++);	    return (0);	case 0:	    return (scc == 0);	default:	    if (c != scc)		return (0);	    continue;	case '?':	    if (scc == 0)		return (0);	    continue;	case '/':	    if (scc)		return (0);	  slash:	    s = entp;	    sgpathp = gpathp;	    while (*s)		addpath(*s++);	    addpath('/');	    if (stat(gpath, &stb) == 0 && isdir(stb))		if (*p == 0) {		    Gcat(gpath, "", check_ncargs);		    globcnt++;		}		else		    expand(p, check_ncargs);	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    gpathp = sgpathp;	    *gpathp = 0;	    return (0);	}    }}
static int
amatch(char *s, char *p, boolean_t check_ncargs)
amatch
char *s
char
*s
*
s
char *p
char
*p
*
p
boolean_t check_ncargs
boolean_t
boolean_t
check_ncargs
check_ncargs
{    register int scc;    int ok, lc;    char *sgpathp;    struct stat stb;    int c, cc;    globbed = 1;    for (;;) {	scc = *s++ & TRIM;	switch (c = *p++) {	case '{':	    return (execbrc(p - 1, s - 1));	case '[':	    ok = 0;	    lc = 077777;	    while ((cc = *p++)) {		if (cc == ']') {		    if (ok)			break;		    return (0);		}		if (cc == '-') {		    if (lc <= scc && scc <= *p++)			ok++;		}		else if (scc == (lc = cc))		    ok++;	    }	    if (cc == 0) {		globerr = "Missing ]";		return (0);	    }	    continue;	case '*':	    if (!*p)		return (1);	    if (*p == '/') {		p++;		goto slash;	    } else if (*p == '*') {		s--;		continue;	    }	    s--;	    do {		if (amatch(s, p, check_ncargs))		    return (1);	    } while (*s++);	    return (0);	case 0:	    return (scc == 0);	default:	    if (c != scc)		return (0);	    continue;	case '?':	    if (scc == 0)		return (0);	    continue;	case '/':	    if (scc)		return (0);	  slash:	    s = entp;	    sgpathp = gpathp;	    while (*s)		addpath(*s++);	    addpath('/');	    if (stat(gpath, &stb) == 0 && isdir(stb))		if (*p == 0) {		    Gcat(gpath, "", check_ncargs);		    globcnt++;		}		else		    expand(p, check_ncargs);	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    gpathp = sgpathp;	    *gpathp = 0;	    return (0);	}    }}
register int scc;
register int scc;
register int
scc
scc
int ok, lc;
int ok, lc;
int
ok
ok
lc
lc
char *sgpathp;
char *sgpathp;
char
*sgpathp
*
sgpathp
struct stat stb;
struct stat stb;
struct stat
stat
stb
stb
int c, cc;
int c, cc;
int
c
c
cc
cc
globbed = 1;
globbed = 1
globbed
globbed
1
for (;;) {	scc = *s++ & TRIM;	switch (c = *p++) {	case '{':	    return (execbrc(p - 1, s - 1));	case '[':	    ok = 0;	    lc = 077777;	    while ((cc = *p++)) {		if (cc == ']') {		    if (ok)			break;		    return (0);		}		if (cc == '-') {		    if (lc <= scc && scc <= *p++)			ok++;		}		else if (scc == (lc = cc))		    ok++;	    }	    if (cc == 0) {		globerr = "Missing ]";		return (0);	    }	    continue;	case '*':	    if (!*p)		return (1);	    if (*p == '/') {		p++;		goto slash;	    } else if (*p == '*') {		s--;		continue;	    }	    s--;	    do {		if (amatch(s, p, check_ncargs))		    return (1);	    } while (*s++);	    return (0);	case 0:	    return (scc == 0);	default:	    if (c != scc)		return (0);	    continue;	case '?':	    if (scc == 0)		return (0);	    continue;	case '/':	    if (scc)		return (0);	  slash:	    s = entp;	    sgpathp = gpathp;	    while (*s)		addpath(*s++);	    addpath('/');	    if (stat(gpath, &stb) == 0 && isdir(stb))		if (*p == 0) {		    Gcat(gpath, "", check_ncargs);		    globcnt++;		}		else		    expand(p, check_ncargs);	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    gpathp = sgpathp;	    *gpathp = 0;	    return (0);	}    }
;
{	scc = *s++ & TRIM;	switch (c = *p++) {	case '{':	    return (execbrc(p - 1, s - 1));	case '[':	    ok = 0;	    lc = 077777;	    while ((cc = *p++)) {		if (cc == ']') {		    if (ok)			break;		    return (0);		}		if (cc == '-') {		    if (lc <= scc && scc <= *p++)			ok++;		}		else if (scc == (lc = cc))		    ok++;	    }	    if (cc == 0) {		globerr = "Missing ]";		return (0);	    }	    continue;	case '*':	    if (!*p)		return (1);	    if (*p == '/') {		p++;		goto slash;	    } else if (*p == '*') {		s--;		continue;	    }	    s--;	    do {		if (amatch(s, p, check_ncargs))		    return (1);	    } while (*s++);	    return (0);	case 0:	    return (scc == 0);	default:	    if (c != scc)		return (0);	    continue;	case '?':	    if (scc == 0)		return (0);	    continue;	case '/':	    if (scc)		return (0);	  slash:	    s = entp;	    sgpathp = gpathp;	    while (*s)		addpath(*s++);	    addpath('/');	    if (stat(gpath, &stb) == 0 && isdir(stb))		if (*p == 0) {		    Gcat(gpath, "", check_ncargs);		    globcnt++;		}		else		    expand(p, check_ncargs);	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    gpathp = sgpathp;	    *gpathp = 0;	    return (0);	}    }
scc = *s++ & TRIM;
scc = *s++ & TRIM
scc
scc
*s++ & TRIM
*s++
s++
s
s
TRIM
TRIM
switch (c = *p++) {	case '{':	    return (execbrc(p - 1, s - 1));	case '[':	    ok = 0;	    lc = 077777;	    while ((cc = *p++)) {		if (cc == ']') {		    if (ok)			break;		    return (0);		}		if (cc == '-') {		    if (lc <= scc && scc <= *p++)			ok++;		}		else if (scc == (lc = cc))		    ok++;	    }	    if (cc == 0) {		globerr = "Missing ]";		return (0);	    }	    continue;	case '*':	    if (!*p)		return (1);	    if (*p == '/') {		p++;		goto slash;	    } else if (*p == '*') {		s--;		continue;	    }	    s--;	    do {		if (amatch(s, p, check_ncargs))		    return (1);	    } while (*s++);	    return (0);	case 0:	    return (scc == 0);	default:	    if (c != scc)		return (0);	    continue;	case '?':	    if (scc == 0)		return (0);	    continue;	case '/':	    if (scc)		return (0);	  slash:	    s = entp;	    sgpathp = gpathp;	    while (*s)		addpath(*s++);	    addpath('/');	    if (stat(gpath, &stb) == 0 && isdir(stb))		if (*p == 0) {		    Gcat(gpath, "", check_ncargs);		    globcnt++;		}		else		    expand(p, check_ncargs);	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    gpathp = sgpathp;	    *gpathp = 0;	    return (0);	}
c = *p++
c
c
*p++
p++
p
p
{	case '{':	    return (execbrc(p - 1, s - 1));	case '[':	    ok = 0;	    lc = 077777;	    while ((cc = *p++)) {		if (cc == ']') {		    if (ok)			break;		    return (0);		}		if (cc == '-') {		    if (lc <= scc && scc <= *p++)			ok++;		}		else if (scc == (lc = cc))		    ok++;	    }	    if (cc == 0) {		globerr = "Missing ]";		return (0);	    }	    continue;	case '*':	    if (!*p)		return (1);	    if (*p == '/') {		p++;		goto slash;	    } else if (*p == '*') {		s--;		continue;	    }	    s--;	    do {		if (amatch(s, p, check_ncargs))		    return (1);	    } while (*s++);	    return (0);	case 0:	    return (scc == 0);	default:	    if (c != scc)		return (0);	    continue;	case '?':	    if (scc == 0)		return (0);	    continue;	case '/':	    if (scc)		return (0);	  slash:	    s = entp;	    sgpathp = gpathp;	    while (*s)		addpath(*s++);	    addpath('/');	    if (stat(gpath, &stb) == 0 && isdir(stb))		if (*p == 0) {		    Gcat(gpath, "", check_ncargs);		    globcnt++;		}		else		    expand(p, check_ncargs);	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    gpathp = sgpathp;	    *gpathp = 0;	    return (0);	}
case '{':
'{'
return (execbrc(p - 1, s - 1));
(execbrc(p - 1, s - 1))
execbrc(p - 1, s - 1)
execbrc
execbrc
p - 1
p
p
1
s - 1
s
s
1
case '[':
'['
ok = 0;
ok = 0
ok
ok
0
lc = 077777;
lc = 077777
lc
lc
077777
while ((cc = *p++)) {		if (cc == ']') {		    if (ok)			break;		    return (0);		}		if (cc == '-') {		    if (lc <= scc && scc <= *p++)			ok++;		}		else if (scc == (lc = cc))		    ok++;	    }
(cc = *p++)
cc = *p++
cc
cc
*p++
p++
p
p
{		if (cc == ']') {		    if (ok)			break;		    return (0);		}		if (cc == '-') {		    if (lc <= scc && scc <= *p++)			ok++;		}		else if (scc == (lc = cc))		    ok++;	    }
if (cc == ']') {		    if (ok)			break;		    return (0);		}
cc == ']'
cc
cc
']'
{		    if (ok)			break;		    return (0);		}
if (ok)			break;
ok
ok
break;
return (0);
(0)
0
if (cc == '-') {		    if (lc <= scc && scc <= *p++)			ok++;		}		else if (scc == (lc = cc))		    ok++;
cc == '-'
cc
cc
'-'
{		    if (lc <= scc && scc <= *p++)			ok++;		}
if (lc <= scc && scc <= *p++)			ok++;
lc <= scc && scc <= *p++
lc <= scc
lc
lc
scc
scc
scc <= *p++
scc
scc
*p++
p++
p
p
ok++;
ok++
ok
ok
if (scc == (lc = cc))		    ok++;
scc == (lc = cc)
scc
scc
(lc = cc)
lc = cc
lc
lc
cc
cc
ok++;
ok++
ok
ok
if (cc == 0) {		globerr = "Missing ]";		return (0);	    }
cc == 0
cc
cc
0
{		globerr = "Missing ]";		return (0);	    }
globerr = "Missing ]";
globerr = "Missing ]"
globerr
globerr
"Missing ]"
return (0);
(0)
0
continue;
case '*':
'*'
if (!*p)		return (1);
!*p
*p
p
p
return (1);
(1)
1
if (*p == '/') {		p++;		goto slash;	    } else if (*p == '*') {		s--;		continue;	    }
*p == '/'
*p
p
p
'/'
{		p++;		goto slash;	    }
p++;
p++
p
p
goto slash;
slash
if (*p == '*') {		s--;		continue;	    }
*p == '*'
*p
p
p
'*'
{		s--;		continue;	    }
s--;
s--
s
s
continue;
s--;
s--
s
s
do {		if (amatch(s, p, check_ncargs))		    return (1);	    } while (*s++);
{		if (amatch(s, p, check_ncargs))		    return (1);	    }
if (amatch(s, p, check_ncargs))		    return (1);
amatch(s, p, check_ncargs)
amatch
amatch
s
s
p
p
check_ncargs
check_ncargs
return (1);
(1)
1
*s++
s++
s
s
return (0);
(0)
0
case 0:
0
return (scc == 0);
(scc == 0)
scc == 0
scc
scc
0
default:
if (c != scc)		return (0);
c != scc
c
c
scc
scc
return (0);
(0)
0
continue;
case '?':
'?'
if (scc == 0)		return (0);
scc == 0
scc
scc
0
return (0);
(0)
0
continue;
case '/':
'/'
if (scc)		return (0);
scc
scc
return (0);
(0)
0
slash:	    s = entp;
slash
s = entp;
s = entp
s
s
entp
entp
sgpathp = gpathp;
sgpathp = gpathp
sgpathp
sgpathp
gpathp
gpathp
while (*s)		addpath(*s++);
*s
s
s
addpath(*s++);
addpath(*s++)
addpath
addpath
*s++
s++
s
s
addpath('/');
addpath('/')
addpath
addpath
'/'
if (stat(gpath, &stb) == 0 && isdir(stb))		if (*p == 0) {		    Gcat(gpath, "", check_ncargs);		    globcnt++;		}		else		    expand(p, check_ncargs);
stat(gpath, &stb) == 0 && isdir(stb)
stat(gpath, &stb) == 0
stat(gpath, &stb)
stat
stat
gpath
gpath
&stb
stb
stb
0
isdir(stb)
isdir
isdir
stb
stb
if (*p == 0) {		    Gcat(gpath, "", check_ncargs);		    globcnt++;		}		else		    expand(p, check_ncargs);
*p == 0
*p
p
p
0
{		    Gcat(gpath, "", check_ncargs);		    globcnt++;		}
Gcat(gpath, "", check_ncargs);
Gcat(gpath, "", check_ncargs)
Gcat
Gcat
gpath
gpath
""
check_ncargs
check_ncargs
globcnt++;
globcnt++
globcnt
globcnt
expand(p, check_ncargs);
expand(p, check_ncargs)
expand
expand
p
p
check_ncargs
check_ncargs
if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";
limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT
limits[GLOB_INDEX_STAT]++
limits[GLOB_INDEX_STAT]
limits
limits
GLOB_INDEX_STAT
GLOB_INDEX_STAT
GLOB_LIMIT_STAT
GLOB_LIMIT_STAT
globerr = "Arguments too long";
globerr = "Arguments too long"
globerr
globerr
"Arguments too long"
gpathp = sgpathp;
gpathp = sgpathp
gpathp
gpathp
sgpathp
sgpathp
*gpathp = 0;
*gpathp = 0
*gpathp
gpathp
gpathp
0
return (0);
(0)
0
-----joern-----
(67,138,0)
(79,196,0)
(201,81,0)
(21,75,0)
(4,70,0)
(60,129,0)
(59,68,0)
(101,223,0)
(27,49,0)
(101,109,0)
(30,49,0)
(172,30,0)
(148,155,0)
(40,75,0)
(67,191,0)
(20,25,0)
(29,90,0)
(120,21,0)
(47,119,0)
(76,36,0)
(83,75,0)
(58,16,0)
(109,75,0)
(51,23,0)
(90,91,0)
(126,76,0)
(113,139,0)
(220,189,0)
(114,178,0)
(185,113,0)
(55,101,0)
(45,135,0)
(199,186,0)
(195,216,0)
(163,178,0)
(184,75,0)
(69,132,0)
(10,27,0)
(167,223,0)
(42,205,0)
(138,49,0)
(70,56,0)
(14,43,0)
(56,43,0)
(173,75,0)
(122,95,0)
(43,56,0)
(204,219,0)
(206,75,0)
(216,95,0)
(57,88,0)
(65,132,0)
(178,49,0)
(219,204,0)
(39,1,0)
(18,197,0)
(194,87,0)
(161,75,0)
(79,113,0)
(154,30,0)
(216,158,0)
(209,44,0)
(196,98,0)
(203,132,0)
(202,51,0)
(191,75,0)
(7,221,0)
(183,197,0)
(93,75,0)
(184,68,0)
(219,49,0)
(22,95,0)
(2,16,0)
(62,66,0)
(79,184,0)
(61,171,0)
(73,68,0)
(153,49,0)
(146,49,0)
(87,75,0)
(60,91,0)
(150,75,0)
(145,174,0)
(112,208,0)
(140,91,0)
(77,75,0)
(177,178,0)
(175,19,0)
(92,123,0)
(171,7,0)
(31,139,0)
(139,37,0)
(208,95,0)
(88,75,0)
(189,211,0)
(30,172,0)
(38,132,0)
(54,204,0)
(155,156,0)
(25,95,0)
(27,63,0)
(91,60,0)
(167,200,0)
(52,20,0)
(136,75,0)
(66,109,0)
(191,186,0)
(101,214,0)
(182,138,0)
(71,75,0)
(178,82,0)
(28,48,0)
(50,210,0)
(135,186,0)
(116,109,0)
(152,208,0)
(41,75,0)
(216,76,0)
(124,109,0)
(79,191,0)
(34,49,0)
(222,1,0)
(168,153,0)
(126,95,0)
(192,215,0)
(164,139,0)
(190,16,0)
(113,37,0)
(36,63,0)
(156,155,0)
(24,132,0)
(86,76,0)
(170,52,0)
(127,75,0)
(53,126,0)
(216,88,0)
(79,74,0)
(158,216,0)
(197,183,0)
(178,223,0)
(134,76,0)
(198,84,0)
(79,123,0)
(12,82,0)
(205,36,0)
(214,101,0)
(56,70,0)
(106,74,0)
(211,189,0)
(33,196,0)
(90,95,0)
(130,88,0)
(67,119,0)
(141,221,0)
(81,186,0)
(79,151,0)
(79,11,0)
(105,75,0)
(146,183,0)
(95,25,0)
(184,21,0)
(138,67,0)
(180,221,0)
(32,145,0)
(125,75,0)
(145,223,0)
(200,167,0)
(104,184,0)
(46,132,0)
(123,186,0)
(63,27,0)
(176,12,0)
(99,108,0)
(142,36,0)
(160,36,0)
(64,26,0)
(70,211,0)
(197,95,0)
(1,82,0)
(128,160,0)
(102,72,0)
(79,150,0)
(197,158,0)
(100,174,0)
(211,70,0)
(121,132,0)
(193,214,0)
(119,67,0)
(218,12,0)
(208,151,0)
(153,19,0)
(25,20,0)
(79,135,0)
(21,87,0)
(186,132,0)
(72,36,0)
(187,122,0)
(44,75,0)
(129,49,0)
(1,49,0)
(89,87,0)
(66,223,0)
(131,2,0)
(52,223,0)
(207,75,0)
(26,75,0)
(79,81,0)
(44,223,0)
(8,190,0)
(149,75,0)
(97,150,0)
(150,186,0)
(184,186,0)
(115,156,0)
(184,210,0)
(113,186,0)
(17,75,0)
(157,11,0)
(210,117,0)
(196,186,0)
(63,36,0)
(103,186,0)
(3,25,0)
(20,52,0)
(16,75,0)
(151,186,0)
(13,72,0)
(217,219,0)
(147,110,0)
(111,16,0)
(117,75,0)
(76,126,0)
(118,211,0)
(95,84,0)
(166,138,0)
(162,122,0)
(179,146,0)
(80,34,0)
(11,186,0)
(158,197,0)
(74,186,0)
(214,193,0)
(213,110,0)
(0,129,0)
(119,223,0)
(133,167,0)
(159,12,0)
(9,90,0)
(109,223,0)
(215,34,0)
(181,75,0)
(94,205,0)
(183,146,0)
(15,160,0)
(96,75,0)
(35,216,0)
(137,117,0)
(129,60,0)
(155,49,0)
(143,21,0)
(34,215,0)
(5,75,0)
(221,7,0)
(212,132,0)
(165,75,0)
(188,75,0)
(151,75,0)
(7,171,0)
(12,23,0)
(6,75,0)
(78,119,0)
(144,98,0)
(200,167,1)
(210,50,1)
(158,216,1)
(97,200,1)
(1,49,1)
(123,92,1)
(166,182,1)
(21,87,1)
(216,35,1)
(120,68,1)
(57,130,1)
(185,139,1)
(85,107,1)
(79,74,1)
(52,223,1)
(62,193,1)
(101,109,1)
(119,78,1)
(66,62,1)
(158,197,1)
(86,53,1)
(209,156,1)
(190,8,1)
(141,1,1)
(208,95,1)
(150,97,1)
(32,156,1)
(14,70,1)
(34,49,1)
(151,208,1)
(79,113,1)
(152,112,1)
(27,49,1)
(92,122,1)
(43,14,1)
(118,26,1)
(12,159,1)
(116,175,1)
(216,95,1)
(78,47,1)
(15,128,1)
(95,25,1)
(216,88,1)
(64,66,1)
(79,150,1)
(133,178,1)
(101,223,1)
(76,134,1)
(190,16,1)
(33,107,1)
(197,183,1)
(55,66,1)
(178,223,1)
(150,186,1)
(56,70,1)
(109,223,1)
(113,186,1)
(157,178,1)
(107,160,1)
(164,31,1)
(218,176,1)
(172,30,1)
(142,158,1)
(16,111,1)
(63,27,1)
(79,184,1)
(167,223,1)
(129,49,1)
(168,215,1)
(120,171,1)
(20,52,1)
(39,222,1)
(194,89,1)
(7,221,1)
(176,204,1)
(22,100,1)
(13,102,1)
(162,187,1)
(18,216,1)
(191,67,1)
(196,186,1)
(122,162,1)
(135,186,1)
(184,186,1)
(109,124,1)
(11,186,1)
(58,91,1)
(66,223,1)
(12,82,1)
(117,137,1)
(138,166,1)
(197,95,1)
(30,154,1)
(186,199,1)
(70,4,1)
(27,10,1)
(94,42,1)
(160,36,1)
(113,139,1)
(9,29,1)
(140,95,1)
(146,179,1)
(128,36,1)
(142,88,1)
(90,91,1)
(139,164,1)
(126,76,1)
(184,68,1)
(204,219,1)
(155,148,1)
(119,223,1)
(3,20,1)
(115,155,1)
(167,133,1)
(171,7,1)
(179,18,1)
(66,109,1)
(81,201,1)
(196,33,1)
(153,49,1)
(177,200,1)
(1,82,1)
(70,211,1)
(192,34,1)
(189,220,1)
(102,36,1)
(35,195,1)
(59,73,1)
(219,217,1)
(137,210,1)
(170,22,1)
(79,151,1)
(54,219,1)
(125,90,1)
(146,49,1)
(2,16,1)
(221,180,1)
(102,85,1)
(4,211,1)
(219,49,1)
(67,138,1)
(184,21,1)
(131,126,1)
(141,56,1)
(53,205,1)
(22,125,1)
(0,140,1)
(178,82,1)
(202,12,1)
(22,127,1)
(178,163,1)
(52,170,1)
(51,202,1)
(130,16,1)
(67,119,1)
(127,122,1)
(81,186,1)
(47,138,1)
(68,59,1)
(30,49,1)
(60,129,1)
(31,72,1)
(88,57,1)
(201,90,1)
(89,109,1)
(74,106,1)
(126,95,1)
(191,186,1)
(183,146,1)
(44,209,1)
(56,43,1)
(72,36,1)
(156,115,1)
(87,194,1)
(124,116,1)
(44,223,1)
(182,91,1)
(142,190,1)
(26,64,1)
(187,91,1)
(1,39,1)
(222,204,1)
(79,11,1)
(79,196,1)
(29,91,1)
(138,49,1)
(195,205,1)
(193,214,1)
(145,223,1)
(25,20,1)
(153,168,1)
(160,15,1)
(62,87,1)
(215,192,1)
(135,45,1)
(148,215,1)
(113,185,1)
(76,36,1)
(204,54,1)
(36,63,1)
(169,91,1)
(45,169,1)
(10,142,1)
(101,55,1)
(142,2,1)
(2,131,1)
(21,143,1)
(112,91,1)
(22,188,1)
(50,21,1)
(145,32,1)
(134,86,1)
(114,177,1)
(100,145,1)
(79,81,1)
(142,126,1)
(208,152,1)
(72,13,1)
(129,0,1)
(80,172,1)
(79,123,1)
(220,118,1)
(155,49,1)
(154,91,1)
(104,117,1)
(188,72,1)
(61,7,1)
(74,186,1)
(122,95,1)
(177,44,1)
(42,160,1)
(215,34,1)
(178,49,1)
(22,186,1)
(216,76,1)
(180,141,1)
(73,171,1)
(217,56,1)
(214,101,1)
(163,114,1)
(123,186,1)
(106,172,1)
(143,120,1)
(90,95,1)
(211,189,1)
(151,186,1)
(25,3,1)
(11,157,1)
(199,103,1)
(175,153,1)
(91,60,1)
(205,36,1)
(34,80,1)
(184,210,1)
(79,191,1)
(79,135,1)
(159,218,1)
(90,9,1)
(184,104,1)
(171,61,1)
(156,155,1)
(141,51,1)
(111,58,1)
(205,94,1)
(116,169,1)
(8,158,1)
(92,122,2)
(67,138,2)
(7,215,2)
(79,11,2)
(97,200,2)
(216,95,2)
(53,205,2)
(76,205,2)
(155,215,2)
(126,76,2)
(139,72,2)
(63,27,2)
(114,200,2)
(102,36,2)
(119,91,2)
(109,223,2)
(208,91,2)
(128,36,2)
(194,169,2)
(12,204,2)
(184,215,2)
(185,72,2)
(54,56,2)
(22,156,2)
(137,215,2)
(201,90,2)
(140,156,2)
(184,68,2)
(171,169,2)
(208,95,2)
(1,204,2)
(7,169,2)
(211,169,2)
(44,223,2)
(3,72,2)
(142,160,2)
(39,204,2)
(11,178,2)
(12,82,2)
(91,156,2)
(52,90,2)
(138,49,2)
(140,90,2)
(62,66,2)
(150,186,2)
(169,91,2)
(119,223,2)
(74,172,2)
(80,172,2)
(177,156,2)
(36,91,2)
(60,72,2)
(57,91,2)
(18,216,2)
(30,91,2)
(135,186,2)
(120,215,2)
(25,156,2)
(1,49,2)
(142,91,2)
(170,72,2)
(79,184,2)
(177,200,2)
(34,172,2)
(180,169,2)
(197,183,2)
(91,60,2)
(63,91,2)
(67,91,2)
(62,215,2)
(8,158,2)
(178,156,2)
(87,169,2)
(204,219,2)
(27,49,2)
(78,91,2)
(50,215,2)
(81,90,2)
(116,169,2)
(140,122,2)
(79,151,2)
(122,95,2)
(0,90,2)
(111,91,2)
(25,20,2)
(200,167,2)
(112,91,2)
(43,70,2)
(192,172,2)
(101,109,2)
(10,160,2)
(56,169,2)
(214,101,2)
(158,216,2)
(0,122,2)
(219,56,2)
(146,216,2)
(4,215,2)
(164,72,2)
(171,7,2)
(196,186,2)
(167,223,2)
(90,91,2)
(202,204,2)
(170,156,2)
(79,191,2)
(154,91,2)
(129,49,2)
(56,43,2)
(120,169,2)
(189,215,2)
(95,72,2)
(178,223,2)
(30,49,2)
(205,36,2)
(33,107,2)
(95,156,2)
(138,91,2)
(145,223,2)
(140,72,2)
(172,30,2)
(168,215,2)
(215,172,2)
(20,156,2)
(62,169,2)
(44,156,2)
(152,91,2)
(197,216,2)
(218,204,2)
(153,49,2)
(70,215,2)
(70,211,2)
(63,160,2)
(36,63,2)
(125,90,2)
(85,107,2)
(159,204,2)
(209,156,2)
(143,215,2)
(3,122,2)
(221,169,2)
(51,204,2)
(157,178,2)
(191,186,2)
(190,158,2)
(107,160,2)
(42,160,2)
(166,91,2)
(67,119,2)
(217,56,2)
(184,21,2)
(118,169,2)
(76,36,2)
(180,215,2)
(73,171,2)
(13,36,2)
(2,126,2)
(34,49,2)
(91,90,2)
(25,122,2)
(133,178,2)
(13,107,2)
(79,113,2)
(79,135,2)
(68,171,2)
(143,169,2)
(151,186,2)
(52,72,2)
(104,169,2)
(162,91,2)
(21,215,2)
(116,215,2)
(14,70,2)
(74,186,2)
(158,205,2)
(175,215,2)
(193,214,2)
(126,95,2)
(27,160,2)
(184,210,2)
(115,215,2)
(87,215,2)
(190,16,2)
(66,215,2)
(59,171,2)
(160,36,2)
(117,169,2)
(184,186,2)
(3,90,2)
(45,169,2)
(211,189,2)
(131,126,2)
(200,178,2)
(104,215,2)
(89,169,2)
(61,169,2)
(129,90,2)
(0,156,2)
(86,205,2)
(113,186,2)
(79,123,2)
(113,72,2)
(170,122,2)
(156,155,2)
(129,122,2)
(117,215,2)
(171,215,2)
(55,66,2)
(100,156,2)
(9,91,2)
(95,122,2)
(122,91,2)
(60,122,2)
(178,82,2)
(182,91,2)
(106,172,2)
(7,221,2)
(109,215,2)
(20,90,2)
(150,200,2)
(214,66,2)
(126,205,2)
(124,169,2)
(188,72,2)
(32,156,2)
(60,90,2)
(221,215,2)
(4,169,2)
(135,169,2)
(118,215,2)
(10,91,2)
(91,72,2)
(124,215,2)
(52,223,2)
(22,122,2)
(60,129,2)
(66,66,2)
(26,215,2)
(0,72,2)
(56,70,2)
(22,72,2)
(197,95,2)
(27,91,2)
(167,178,2)
(210,215,2)
(21,169,2)
(170,90,2)
(220,215,2)
(94,160,2)
(79,196,2)
(183,146,2)
(215,34,2)
(88,91,2)
(114,156,2)
(156,215,2)
(178,200,2)
(11,186,2)
(35,205,2)
(191,91,2)
(47,91,2)
(70,169,2)
(216,88,2)
(20,122,2)
(130,91,2)
(90,95,2)
(25,72,2)
(64,169,2)
(95,90,2)
(36,160,2)
(15,36,2)
(81,186,2)
(178,49,2)
(183,216,2)
(89,215,2)
(113,139,2)
(101,223,2)
(179,216,2)
(22,90,2)
(158,197,2)
(66,169,2)
(216,205,2)
(163,200,2)
(141,169,2)
(50,169,2)
(20,52,2)
(20,72,2)
(123,186,2)
(163,156,2)
(141,215,2)
(26,169,2)
(219,49,2)
(29,91,2)
(58,91,2)
(66,109,2)
(60,156,2)
(137,169,2)
(210,169,2)
(52,122,2)
(56,215,2)
(222,204,2)
(204,56,2)
(216,76,2)
(205,160,2)
(64,215,2)
(2,16,2)
(1,82,2)
(193,66,2)
(176,204,2)
(95,25,2)
(72,107,2)
(52,156,2)
(134,205,2)
(127,122,2)
(189,169,2)
(31,72,2)
(129,156,2)
(194,215,2)
(211,215,2)
(61,215,2)
(195,205,2)
(21,87,2)
(3,156,2)
(16,91,2)
(184,169,2)
(187,91,2)
(109,169,2)
(123,122,2)
(79,81,2)
(102,107,2)
(145,156,2)
(196,107,2)
(172,91,2)
(148,215,2)
(155,49,2)
(79,150,2)
(66,223,2)
(72,36,2)
(153,215,2)
(129,72,2)
(151,91,2)
(25,90,2)
(91,122,2)
(146,49,2)
(101,66,2)
(79,74,2)
(220,169,2)
-----------------------------------
(0,p)
(1,expand(p, check_ncargs)
(2,ok++)
(3,TRIM)
(4,0)
(5,case \'*\':)
(6,do)
(7,limits[GLOB_INDEX_STAT]++)
(8,ok)
(9,scc)
(10,p)
(11,return (1)
(12,Gcat(gpath, "", check_ncargs)
(13,0)
(14,stb)
(15,\']\')
(16,ok = 0)
(17,if (scc)
(18,scc)
(19,)
(20,*s++)
(21,gpathp = sgpathp)
(22,scc)
(23,)
(24,ok)
(25,*s++ & TRIM)
(26,addpath(\'/\')
(27,p++)
(28,if (amatch(s, p, check_ncargs)
(29,c)
(30,*p)
(31,globerr)
(32,s)
(33,0)
(34,*p)
(35,scc)
(36,cc = *p++)
(37,)
(38,cc)
(39,check_ncargs)
(40,default:)
(41,case \'{\':)
(42,cc)
(43,isdir(stb)
(44,s--)
(45,0)
(46,sgpathp)
(47,s)
(48,)
(49,char *p)
(50,gpathp)
(51,globcnt++)
(52,s++)
(53,scc)
(54,0)
(55,s)
(56,stat(gpath, &stb)
(57,077777)
(58,ok)
(59,"Arguments too long")
(60,*p++)
(61,GLOB_LIMIT_STAT)
(62,s)
(63,*p++)
(64,\'/\')
(65,for (;;)
(66,*s)
(67,execbrc(p - 1, s - 1)
(68,globerr = "Arguments too long")
(69,stb)
(70,stat(gpath, &stb)
(71,if (stat(gpath, &stb)
(72,cc == 0)
(73,globerr)
(74,return (1)
(75,)
(76,lc = cc)
(77,while ((cc = *p++)
(78,1)
(79,RET)
(80,p)
(81,return (0)
(82,boolean_t check_ncargs)
(83,case \'/\':)
(84,)
(85,break;)
(86,lc)
(87,sgpathp = gpathp)
(88,lc = 077777)
(89,sgpathp)
(90,c != scc)
(91,c = *p++)
(92,0)
(93,if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)
(94,\'-\')
(95,scc = *s++ & TRIM)
(96,case \'[\':)
(97,0)
(98,)
(99,if (lc <= scc && scc <= *p++)
(100,continue;)
(101,s++)
(102,cc)
(103,globbed)
(104,0)
(105,if (*p == \'/\')
(106,1)
(107,ok)
(108,)
(109,s = entp)
(110,)
(111,0)
(112,scc)
(113,return (0)
(114,p)
(115,\'*\')
(116,s)
(117,*gpathp = 0)
(118,gpath)
(119,s - 1)
(120,gpathp)
(121,lc)
(122,scc == 0)
(123,return (0)
(124,entp)
(125,continue;)
(126,scc == (lc = cc)
(127,continue;)
(128,cc)
(129,p++)
(130,lc)
(131,ok)
(132,)
(133,s)
(134,cc)
(135,return (0)
(136,if (c != scc)
(137,0)
(138,p - 1)
(139,globerr = "Missing ]")
(140,c)
(141,limits)
(142,cc)
(143,sgpathp)
(144,if (ok)
(145,s--)
(146,p++)
(147,if (cc == \']\')
(148,p)
(149,if (!*p)
(150,return (0)
(151,return (scc == 0)
(152,0)
(153,p++)
(154,p)
(155,*p)
(156,*p == \'*\')
(157,1)
(158,lc <= scc && scc <= *p++)
(159,check_ncargs)
(160,cc == \']\')
(161,if (cc == 0)
(162,0)
(163,check_ncargs)
(164,"Missing ]")
(165,slash:)
(166,1)
(167,s++)
(168,p)
(169,scc)
(170,s)
(171,limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)
(172,!*p)
(173,if (scc == 0)
(174,)
(175,goto slash;)
(176,gpath)
(177,s)
(178,amatch(s, p, check_ncargs)
(179,p)
(180,GLOB_INDEX_STAT)
(181,case 0:)
(182,p)
(183,*p++)
(184,return (0)
(185,0)
(186,globbed = 1)
(187,scc)
(188,continue;)
(189,&stb)
(190,ok++)
(191,return (execbrc(p - 1, s - 1)
(192,\'/\')
(193,addpath(*s++)
(194,gpathp)
(195,lc)
(196,return (0)
(197,scc <= *p++)
(198,switch (c = *p++)
(199,1)
(200,*s++)
(201,0)
(202,globcnt)
(203,scc)
(204,*p == 0)
(205,cc == \'-\')
(206,case \'?\':)
(207,while (*s)
(208,scc == 0)
(209,s)
(210,*gpathp)
(211,stat(gpath, &stb)
(212,c)
(213,if (cc == \'-\')
(214,*s++)
(215,*p == \'/\')
(216,lc <= scc)
(217,p)
(218,"")
(219,*p)
(220,stb)
(221,limits[GLOB_INDEX_STAT])
(222,p)
(223,char *s)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^