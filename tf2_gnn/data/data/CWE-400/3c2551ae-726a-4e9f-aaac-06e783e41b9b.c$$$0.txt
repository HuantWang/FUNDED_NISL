-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    /* Initialize count */
    count = -1;
    while(1)
    {
        /* FIX: Use a relatively small number */
        count = 20;
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
26,27
26,28
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
-----nextToken-----
2,4,8,10,14,16,18,23,24,25,27,32,34,38,39,40
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B(){    int count;    /* Initialize count */    count = -1;    while(1)    {        /* FIX: Use a relatively small number */        count = 20;        break;    }    while(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    }}
static void
goodG2B()
goodG2B
{    int count;    /* Initialize count */    count = -1;    while(1)    {        /* FIX: Use a relatively small number */        count = 20;        break;    }    while(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
while(1)    {        /* FIX: Use a relatively small number */        count = 20;        break;    }
1
{        /* FIX: Use a relatively small number */        count = 20;        break;    }
count = 20;
count = 20
count
count
20
break;
while(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    }
1
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
break;
-----joern-----
(21,12,0)
(8,2,0)
(3,16,0)
(3,21,0)
(9,21,0)
(12,21,0)
(2,17,0)
(3,2,0)
(13,16,0)
(19,17,0)
(20,6,0)
(5,12,0)
(21,6,0)
(11,16,0)
(1,6,0)
(15,3,0)
(0,6,0)
(7,2,0)
(14,13,0)
(14,3,1)
(8,18,1)
(3,21,1)
(4,11,1)
(5,9,1)
(3,2,1)
(3,15,1)
(21,12,1)
(15,10,1)
(13,14,1)
(4,10,1)
(11,13,1)
(10,18,1)
(19,2,1)
(2,7,1)
(7,8,1)
(12,5,1)
(10,19,1)
(18,21,1)
(2,18,2)
(13,10,2)
(19,18,2)
(3,2,2)
(21,12,2)
(15,10,2)
(11,10,2)
(7,18,2)
(3,10,2)
(8,18,2)
(3,21,2)
(14,10,2)
-----------------------------------
(0,while(1)
(1,while(1)
(2,count = 20)
(3,SLEEP(count)
(4,RET)
(5,1)
(6,)
(7,20)
(8,count)
(9,count)
(10,1)
(11,break;)
(12,-1)
(13,printLine("Sleep time possibly too long")
(14,"Sleep time possibly too long")
(15,count)
(16,)
(17,)
(18,1)
(19,break;)
(20,count)
(21,count = -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^