-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_34_bad()
{
    int count;
    CWE400_Resource_Exhaustion__fscanf_for_loop_34_unionType myUnion;
    /* Initialize count */
    count = -1;
    /* POTENTIAL FLAW: Read count from the console using fscanf() */
    fscanf(stdin, "%d", &count);
    myUnion.unionFirst = count;
    {
        int count = myUnion.unionSecond;
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
55,56
57,58
57,59
59,60
61,62
61,63
61,64
61,65
62,63
63,64
63,65
64,65
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
75,76
77,78
78,79
80,81
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,29,32,37,38,40,44,46,50,51,56,58,60,65,66,69,73,74,76,79,84,85
-----computeFrom-----
18,19
18,20
34,35
34,36
63,64
63,65
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_34_bad(){    int count;    CWE400_Resource_Exhaustion__fscanf_for_loop_34_unionType myUnion;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_34_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_34_bad
{    int count;    CWE400_Resource_Exhaustion__fscanf_for_loop_34_unionType myUnion;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
CWE400_Resource_Exhaustion__fscanf_for_loop_34_unionType myUnion;
CWE400_Resource_Exhaustion__fscanf_for_loop_34_unionType myUnion;
CWE400_Resource_Exhaustion__fscanf_for_loop_34_unionType
CWE400_Resource_Exhaustion__fscanf_for_loop_34_unionType
myUnion
myUnion
count = -1;
count = -1
count
count
-1
1
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
myUnion.unionFirst = count;
myUnion.unionFirst = count
myUnion.unionFirst
myUnion
myUnion
unionFirst
count
count
{        int count = myUnion.unionSecond;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
int count = myUnion.unionSecond;
int count = myUnion.unionSecond;
int
count = myUnion.unionSecond
count
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(35,9,0)
(26,33,0)
(28,41,0)
(33,23,0)
(16,9,0)
(38,25,0)
(15,27,0)
(0,35,0)
(31,36,0)
(9,16,0)
(8,27,0)
(21,31,0)
(11,13,0)
(6,7,0)
(14,19,0)
(29,6,0)
(2,16,0)
(31,13,0)
(36,27,0)
(5,1,0)
(37,12,0)
(12,37,0)
(32,33,0)
(20,1,0)
(10,7,0)
(12,6,0)
(9,27,0)
(39,41,0)
(4,9,0)
(6,12,0)
(30,7,0)
(25,7,0)
(43,12,0)
(34,36,0)
(22,23,0)
(3,13,0)
(40,8,0)
(8,35,0)
(13,31,0)
(12,31,0)
(35,8,0)
(41,36,0)
(42,27,0)
(23,27,0)
(19,18,0)
(17,8,0)
(1,41,0)
(23,9,0)
(13,3,1)
(38,19,1)
(12,37,1)
(32,8,1)
(12,43,1)
(9,16,1)
(11,21,1)
(8,35,1)
(14,6,1)
(6,7,1)
(29,25,1)
(21,23,1)
(0,17,1)
(35,0,1)
(3,11,1)
(29,7,1)
(10,1,1)
(43,29,1)
(2,4,1)
(25,7,1)
(6,12,1)
(35,9,1)
(16,2,1)
(33,26,1)
(17,40,1)
(26,32,1)
(31,13,1)
(7,30,1)
(1,20,1)
(20,5,1)
(22,33,1)
(12,31,1)
(19,14,1)
(30,10,1)
(5,31,1)
(23,22,1)
(24,6,1)
(23,9,1)
(25,38,1)
(40,9,1)
(31,13,2)
(12,31,2)
(23,9,2)
(12,37,2)
(6,12,2)
(29,6,2)
(6,7,2)
(25,7,2)
(19,6,2)
(43,6,2)
(12,6,2)
(35,9,2)
(38,6,2)
(8,35,2)
(25,6,2)
(14,6,2)
(9,16,2)
(6,6,2)
-----------------------------------
(0,count)
(1,i = 0)
(2,1)
(3,unionSecond)
(4,count)
(5,i)
(6,i < (size_t)
(7,i = 0)
(8,fscanf(stdin, "%d", &count)
(9,count = -1)
(10,i)
(11,myUnion)
(12,(size_t)
(13,myUnion.unionSecond)
(14,"Hello")
(15,count)
(16,-1)
(17,"%d")
(18,)
(19,printLine("Hello")
(20,0)
(21,count)
(22,count)
(23,myUnion.unionFirst = count)
(24,RET)
(25,i++)
(26,unionFirst)
(27,)
(28,i)
(29,i)
(30,0)
(31,count = myUnion.unionSecond)
(32,myUnion)
(33,myUnion.unionFirst)
(34,count)
(35,&count)
(36,)
(37,size_t)
(38,i)
(39,for (i = 0; i < (size_t)
(40,stdin)
(41,)
(42,myUnion)
(43,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^