-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    goto sink;
sink:
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
19,20
19,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
50,53
50,54
51,52
53,54
55,56
58,59
59,60
60,61
60,62
61,62
64,65
66,67
66,68
68,69
68,70
69,70
70,71
70,72
72,73
72,74
75,76
75,77
75,78
76,77
76,78
77,78
79,80
79,81
80,81
82,83
84,85
84,86
84,87
84,88
84,89
85,86
86,87
86,88
87,88
89,90
89,91
90,91
90,92
92,93
94,95
94,96
95,96
97,98
97,99
98,99
100,101
101,102
101,103
104,105
104,106
105,106
105,107
106,107
108,109
110,111
111,112
112,113
112,114
113,114
115,116
117,118
118,119
118,120
118,121
119,120
121,122
123,124
125,126
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
135,136
137,138
138,139
139,140
139,141
140,141
-----nextToken-----
2,4,9,11,15,16,18,20,24,26,29,31,36,38,40,42,44,49,52,54,56,57,62,63,65,67,71,73,74,78,81,83,88,91,93,96,99,102,103,107,109,114,116,120,122,124,128,130,134,136,141,142
-----computeFrom-----
13,14
13,15
33,34
33,35
47,48
47,49
76,77
76,78
86,87
86,88
97,98
97,99
105,106
105,107
-----guardedBy-----
38,54
44,56
83,124
78,99
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_bad(){    size_t data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    goto sink;sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_bad
{    size_t data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    goto sink;sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
source
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
goto sink;
sink
sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
sink
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(62,53,0)
(64,25,0)
(4,62,0)
(27,32,0)
(45,43,0)
(63,39,0)
(29,46,0)
(17,20,0)
(19,52,0)
(0,4,0)
(18,5,0)
(30,1,0)
(38,14,0)
(46,4,0)
(55,43,0)
(49,53,0)
(25,53,0)
(37,24,0)
(42,63,0)
(24,4,0)
(56,21,0)
(35,24,0)
(1,43,0)
(65,53,0)
(61,53,0)
(3,24,0)
(32,46,0)
(26,41,0)
(2,53,0)
(55,38,0)
(12,8,0)
(52,20,0)
(40,14,0)
(57,62,0)
(11,53,0)
(16,44,0)
(5,24,0)
(21,25,0)
(34,46,0)
(8,38,0)
(7,46,0)
(45,38,0)
(58,9,0)
(14,56,0)
(9,58,0)
(38,43,0)
(20,52,0)
(21,32,0)
(21,44,0)
(23,26,0)
(32,22,0)
(36,1,0)
(44,21,0)
(58,33,0)
(21,56,0)
(13,21,0)
(28,43,0)
(50,4,0)
(59,2,0)
(54,45,0)
(60,2,0)
(1,38,0)
(31,38,0)
(14,40,0)
(48,55,0)
(14,38,0)
(24,5,0)
(51,62,0)
(6,9,0)
(46,32,0)
(20,25,0)
(20,32,0)
(56,14,0)
(10,53,0)
(47,25,0)
(66,8,0)
(14,56,1)
(65,26,1)
(3,37,1)
(0,49,1)
(65,32,1)
(29,34,1)
(21,32,1)
(19,17,1)
(15,63,1)
(8,38,1)
(24,35,1)
(56,21,1)
(52,19,1)
(42,20,1)
(20,52,1)
(63,42,1)
(1,38,1)
(55,48,1)
(20,32,1)
(38,14,1)
(30,36,1)
(54,1,1)
(17,65,1)
(1,30,1)
(12,66,1)
(37,4,1)
(48,45,1)
(20,25,1)
(25,64,1)
(32,46,1)
(21,44,1)
(66,38,1)
(45,54,1)
(64,47,1)
(14,40,1)
(50,0,1)
(58,9,1)
(23,5,1)
(26,23,1)
(46,4,1)
(55,38,1)
(5,18,1)
(7,29,1)
(18,24,1)
(24,4,1)
(34,27,1)
(8,12,1)
(21,25,1)
(36,8,1)
(16,13,1)
(9,6,1)
(45,38,1)
(49,25,1)
(44,16,1)
(4,50,1)
(13,31,1)
(31,20,1)
(15,55,1)
(27,5,1)
(5,24,1)
(46,7,1)
(36,58,1)
(6,8,1)
(35,3,1)
(1,38,2)
(12,20,2)
(16,20,2)
(38,20,2)
(56,21,2)
(31,20,2)
(46,4,2)
(58,8,2)
(32,46,2)
(24,4,2)
(26,5,2)
(38,14,2)
(63,20,2)
(14,20,2)
(14,40,2)
(55,38,2)
(21,25,2)
(54,20,2)
(8,20,2)
(21,32,2)
(56,20,2)
(7,5,2)
(21,20,2)
(45,20,2)
(29,5,2)
(30,20,2)
(9,8,2)
(5,24,2)
(21,44,2)
(20,52,2)
(46,5,2)
(8,38,2)
(44,20,2)
(13,20,2)
(42,20,2)
(55,20,2)
(66,20,2)
(20,25,2)
(14,56,2)
(27,5,2)
(34,5,2)
(48,20,2)
(32,5,2)
(1,20,2)
(45,38,2)
(20,32,2)
(58,9,2)
(6,8,2)
(23,5,2)
(36,20,2)
-----------------------------------
(0,inputBuffer)
(1,strcpy(myString, HELLO_STRING)
(2,)
(3,CHAR_ARRAY_SIZE)
(4,inputBuffer[CHAR_ARRAY_SIZE] = "")
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,1)
(7,0)
(8,myString == NULL)
(9,-1)
(10,data)
(11,sink:)
(12,NULL)
(13,data)
(14,(char *)
(15,RET)
(16,char)
(17,data)
(18,NULL)
(19,HELLO_STRING)
(20,data > strlen(HELLO_STRING)
(21,data*sizeof(char)
(22,)
(23,"fgets()
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,data = 0)
(26,printLine("fgets()
(27,data)
(28,if (myString == NULL)
(29,NULL)
(30,HELLO_STRING)
(31,myString)
(32,data = strtoul(inputBuffer, NULL, 0)
(33,)
(34,inputBuffer)
(35,stdin)
(36,myString)
(37,inputBuffer)
(38,myString = (char *)
(39,)
(40,char *)
(41,)
(42,"Input is less than the length of the source string")
(43,)
(44,sizeof(char)
(45,printLine(myString)
(46,strtoul(inputBuffer, NULL, 0)
(47,data)
(48,myString)
(49,goto source;)
(50,"")
(51,inputBuffer)
(52,strlen(HELLO_STRING)
(53,)
(54,myString)
(55,free(myString)
(56,malloc(data*sizeof(char)
(57,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(58,exit(-1)
(59,myString)
(60,if (data > strlen(HELLO_STRING)
(61,source:)
(62,)
(63,printLine("Input is less than the length of the source string")
(64,0)
(65,goto sink;)
(66,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^