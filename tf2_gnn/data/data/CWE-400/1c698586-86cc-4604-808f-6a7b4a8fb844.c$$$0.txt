-----label-----
1
-----code-----
static int
peer_chr_disced(uint16_t conn_handle, const struct ble_gatt_error *error,
                const struct ble_gatt_chr *chr, void *arg)
{
    struct peer *peer;
    int rc;

    peer = arg;
    assert(peer->conn_handle == conn_handle);

    switch (error->status) {
    case 0:
        rc = peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);
        break;

    case BLE_HS_EDONE:
        /* All characteristics in this service discovered; start discovering
         * characteristics in the next service.
         */
        if (peer->disc_prev_chr_val > 0) {
             peer_disc_chrs(peer);
        }
        rc = 0;
        break;

    default:
        rc = error->status;
        break;
    }

    if (rc != 0) {
        /* Error; abort discovery. */
        peer_disc_complete(peer, rc);
    }

    return rc;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
38,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
52,53
55,56
57,58
57,59
58,59
58,60
59,60
62,63
62,64
62,65
62,66
62,67
62,68
62,69
62,70
62,71
62,72
63,64
65,66
66,67
66,68
67,68
69,70
69,71
69,72
69,73
70,71
72,73
74,75
74,76
75,76
75,77
76,77
76,78
77,78
82,83
85,86
86,87
88,89
88,90
89,90
89,91
90,91
90,92
91,92
95,96
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
109,110
110,111
110,112
111,112
113,114
113,115
114,115
118,119
118,120
119,120
119,121
120,121
123,124
124,125
125,126
125,127
125,128
126,127
128,129
130,131
132,133
133,134
-----nextToken-----
2,4,7,9,12,14,15,18,20,21,23,25,26,31,33,34,37,39,43,45,49,53,54,56,60,61,64,68,71,73,78,79,80,81,83,84,87,92,93,94,99,101,105,106,107,108,112,115,116,117,121,122,127,129,131,134
-----computeFrom-----
41,42
41,43
50,51
50,52
66,67
66,68
89,90
89,91
103,104
103,105
110,111
110,112
119,120
119,121
-----guardedBy-----
92,101
121,131
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static intpeer_chr_disced(uint16_t conn_handle, const struct ble_gatt_error *error,                const struct ble_gatt_chr *chr, void *arg){    struct peer *peer;    int rc;    peer = arg;    assert(peer->conn_handle == conn_handle);    switch (error->status) {    case 0:        rc = peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);        break;    case BLE_HS_EDONE:        /* All characteristics in this service discovered; start discovering         * characteristics in the next service.         */        if (peer->disc_prev_chr_val > 0) {             peer_disc_chrs(peer);        }        rc = 0;        break;    default:        rc = error->status;        break;    }    if (rc != 0) {        /* Error; abort discovery. */        peer_disc_complete(peer, rc);    }    return rc;}
static int
peer_chr_disced(uint16_t conn_handle, const struct ble_gatt_error *error,                const struct ble_gatt_chr *chr, void *arg)
peer_chr_disced
uint16_t conn_handle
uint16_t
uint16_t
conn_handle
conn_handle
const struct ble_gatt_error *error
const struct ble_gatt_error
ble_gatt_error
*error
*
error
const struct ble_gatt_chr *chr
const struct ble_gatt_chr
ble_gatt_chr
*chr
*
chr
void *arg
void
*arg
*
arg
{    struct peer *peer;    int rc;    peer = arg;    assert(peer->conn_handle == conn_handle);    switch (error->status) {    case 0:        rc = peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);        break;    case BLE_HS_EDONE:        /* All characteristics in this service discovered; start discovering         * characteristics in the next service.         */        if (peer->disc_prev_chr_val > 0) {             peer_disc_chrs(peer);        }        rc = 0;        break;    default:        rc = error->status;        break;    }    if (rc != 0) {        /* Error; abort discovery. */        peer_disc_complete(peer, rc);    }    return rc;}
struct peer *peer;
struct peer *peer;
struct peer
peer
*peer
*
peer
int rc;
int rc;
int
rc
rc
peer = arg;
peer = arg
peer
peer
arg
arg
assert(peer->conn_handle == conn_handle);
assert(peer->conn_handle == conn_handle)
assert
assert
peer->conn_handle == conn_handle
peer->conn_handle
peer
peer
conn_handle
conn_handle
conn_handle
switch (error->status) {    case 0:        rc = peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);        break;    case BLE_HS_EDONE:        /* All characteristics in this service discovered; start discovering         * characteristics in the next service.         */        if (peer->disc_prev_chr_val > 0) {             peer_disc_chrs(peer);        }        rc = 0;        break;    default:        rc = error->status;        break;    }
error->status
error
error
status
{    case 0:        rc = peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);        break;    case BLE_HS_EDONE:        /* All characteristics in this service discovered; start discovering         * characteristics in the next service.         */        if (peer->disc_prev_chr_val > 0) {             peer_disc_chrs(peer);        }        rc = 0;        break;    default:        rc = error->status;        break;    }
case 0:
0
rc = peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);
rc = peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr)
rc
rc
peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr)
peer_chr_add
peer_chr_add
peer
peer
peer->cur_svc->svc.start_handle
peer->cur_svc->svc
peer->cur_svc
peer
peer
cur_svc
svc
start_handle
chr
chr
break;
case BLE_HS_EDONE:
BLE_HS_EDONE
BLE_HS_EDONE
if (peer->disc_prev_chr_val > 0) {             peer_disc_chrs(peer);        }
peer->disc_prev_chr_val > 0
peer->disc_prev_chr_val
peer
peer
disc_prev_chr_val
0
{             peer_disc_chrs(peer);        }
peer_disc_chrs(peer);
peer_disc_chrs(peer)
peer_disc_chrs
peer_disc_chrs
peer
peer
rc = 0;
rc = 0
rc
rc
0
break;
default:
rc = error->status;
rc = error->status
rc
rc
error->status
error
error
status
break;
if (rc != 0) {        /* Error; abort discovery. */        peer_disc_complete(peer, rc);    }
rc != 0
rc
rc
0
{        /* Error; abort discovery. */        peer_disc_complete(peer, rc);    }
peer_disc_complete(peer, rc);
peer_disc_complete(peer, rc)
peer_disc_complete
peer_disc_complete
peer
peer
rc
rc
return rc;
rc
rc
-----joern-----
(38,47,0)
(6,64,0)
(60,37,0)
(7,54,0)
(46,60,0)
(16,15,0)
(29,37,0)
(34,60,0)
(50,5,0)
(46,5,0)
(33,4,0)
(8,5,0)
(38,17,0)
(24,37,0)
(42,4,0)
(37,32,0)
(1,37,0)
(12,25,0)
(25,11,0)
(9,15,0)
(60,53,0)
(15,60,0)
(54,62,0)
(54,37,0)
(19,14,0)
(64,6,0)
(40,21,0)
(4,37,0)
(48,5,0)
(35,1,0)
(64,1,0)
(49,5,0)
(17,5,0)
(21,37,0)
(25,47,0)
(27,10,0)
(28,22,0)
(26,5,0)
(27,37,0)
(51,38,0)
(23,14,0)
(21,9,0)
(58,21,0)
(54,46,0)
(54,47,0)
(20,9,0)
(41,25,0)
(0,5,0)
(47,25,0)
(22,47,0)
(65,57,0)
(43,64,0)
(31,17,0)
(30,14,0)
(1,64,0)
(44,38,0)
(22,46,0)
(18,27,0)
(66,1,0)
(15,9,0)
(39,13,0)
(45,46,0)
(61,5,0)
(59,60,0)
(2,17,0)
(52,22,0)
(4,13,0)
(60,46,0)
(55,47,0)
(22,14,0)
(13,4,0)
(36,57,0)
(63,54,0)
(57,11,0)
(54,17,0)
(60,15,0)
(9,21,0)
(64,3,0)
(37,14,0)
(6,14,0)
(22,17,0)
(38,46,0)
(56,14,0)
(47,5,0)
(15,16,1)
(48,46,1)
(51,44,1)
(37,29,1)
(44,48,1)
(28,22,1)
(22,46,1)
(6,64,1)
(35,66,1)
(38,47,1)
(54,46,1)
(44,61,1)
(60,53,1)
(21,40,1)
(64,3,1)
(66,37,1)
(36,65,1)
(27,37,1)
(1,37,1)
(26,17,1)
(22,47,1)
(58,59,1)
(54,17,1)
(60,34,1)
(12,41,1)
(44,26,1)
(45,57,1)
(17,2,1)
(59,45,1)
(7,63,1)
(63,38,1)
(22,17,1)
(20,21,1)
(41,55,1)
(15,9,1)
(64,1,1)
(61,47,1)
(65,6,1)
(55,57,1)
(34,15,1)
(60,15,1)
(13,4,1)
(2,31,1)
(1,35,1)
(43,1,1)
(4,37,1)
(25,12,1)
(38,51,1)
(64,43,1)
(9,20,1)
(47,25,1)
(37,32,1)
(52,38,1)
(38,46,1)
(52,54,1)
(42,33,1)
(57,36,1)
(31,13,1)
(54,7,1)
(54,37,1)
(39,4,1)
(16,9,1)
(31,27,1)
(27,18,1)
(22,52,1)
(9,21,1)
(60,37,1)
(25,11,1)
(46,60,1)
(29,24,1)
(57,11,1)
(40,58,1)
(54,47,1)
(21,37,1)
(38,17,1)
(13,39,1)
(33,57,1)
(4,42,1)
(18,13,1)
(48,57,2)
(46,57,2)
(4,37,2)
(60,37,2)
(18,13,2)
(58,57,2)
(47,25,2)
(60,15,2)
(21,57,2)
(38,17,2)
(13,57,2)
(39,57,2)
(63,38,2)
(54,37,2)
(17,57,2)
(46,60,2)
(55,57,2)
(2,57,2)
(54,47,2)
(60,53,2)
(21,37,2)
(15,9,2)
(41,57,2)
(57,11,2)
(15,57,2)
(45,57,2)
(25,11,2)
(1,37,2)
(64,3,2)
(13,4,2)
(20,57,2)
(61,57,2)
(27,37,2)
(64,1,2)
(60,57,2)
(33,57,2)
(31,57,2)
(38,46,2)
(9,57,2)
(34,57,2)
(59,57,2)
(12,57,2)
(37,32,2)
(42,57,2)
(27,13,2)
(22,47,2)
(54,46,2)
(40,57,2)
(22,17,2)
(54,17,2)
(28,22,2)
(4,57,2)
(6,64,2)
(9,21,2)
(47,57,2)
(38,47,2)
(54,38,2)
(16,57,2)
(7,38,2)
(25,57,2)
(22,46,2)
(26,57,2)
-----------------------------------
(0,case 0:)
(1,peer->conn_handle)
(2,0)
(3,uint16_t conn_handle)
(4,peer->disc_prev_chr_val)
(5,)
(6,assert(peer->conn_handle == conn_handle)
(7,rc)
(8,default:)
(9,peer->cur_svc->svc)
(10,)
(11,const struct ble_gatt_error *error)
(12,status)
(13,peer->disc_prev_chr_val > 0)
(14,)
(15,peer->cur_svc->svc.start_handle)
(16,start_handle)
(17,rc = 0)
(18,peer)
(19,rc)
(20,svc)
(21,peer->cur_svc)
(22,return rc;)
(23,if (rc != 0)
(24,peer)
(25,error->status)
(26,break;)
(27,peer_disc_chrs(peer)
(28,RET)
(29,arg)
(30,switch (error->status)
(31,rc)
(32,void *arg)
(33,peer)
(34,chr)
(35,conn_handle)
(36,status)
(37,peer = arg)
(38,rc != 0)
(39,0)
(40,cur_svc)
(41,error)
(42,disc_prev_chr_val)
(43,conn_handle)
(44,rc)
(45,rc)
(46,rc = peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr)
(47,rc = error->status)
(48,break;)
(49,case BLE_HS_EDONE:)
(50,if (peer->disc_prev_chr_val > 0)
(51,0)
(52,rc)
(53,const struct ble_gatt_chr *chr)
(54,peer_disc_complete(peer, rc)
(55,rc)
(56,peer)
(57,error->status)
(58,peer)
(59,peer)
(60,peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr)
(61,break;)
(62,)
(63,peer)
(64,peer->conn_handle == conn_handle)
(65,error)
(66,peer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^