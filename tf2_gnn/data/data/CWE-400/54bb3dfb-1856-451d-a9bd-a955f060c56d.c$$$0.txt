-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    size_t dataArray[5];
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    dataArray[2] = data;
    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_goodB2GSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
22,23
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
46,47
47,48
47,49
49,50
49,51
51,52
52,53
54,55
54,56
55,56
55,57
55,58
55,59
55,60
55,61
55,62
55,63
55,64
55,65
55,66
56,57
57,58
57,59
58,59
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
82,83
85,86
86,87
87,88
89,90
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
98,100
99,100
99,101
100,101
100,102
101,102
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
116,118
117,118
119,120
121,122
121,123
122,123
122,124
123,124
123,125
123,126
123,127
124,125
126,127
128,129
128,130
129,130
129,131
130,131
132,133
134,135
135,136
137,138
138,139
139,140
141,142
143,144
145,146
146,147
146,148
147,148
149,150
149,151
149,152
149,153
149,154
150,151
152,153
154,155
156,157
156,158
157,158
161,162
161,163
162,163
162,164
163,164
163,165
164,165
166,167
168,169
168,170
169,170
172,173
174,175
175,176
175,177
176,177
176,178
177,178
179,180
182,183
183,184
183,185
184,185
186,187
186,188
186,189
186,190
187,188
189,190
191,192
195,196
195,197
196,197
196,198
197,198
199,200
201,202
202,203
203,204
203,205
204,205
206,207
208,209
209,210
209,211
210,211
210,212
211,212
214,215
216,217
217,218
217,219
218,219
220,221
-----nextToken-----
2,4,9,11,15,17,19,23,24,28,30,34,36,40,42,45,48,50,53,59,62,64,66,68,72,74,76,80,83,84,88,93,94,96,102,103,104,107,109,114,115,118,120,125,127,131,133,136,140,142,144,148,151,153,155,158,159,160,165,167,170,171,173,178,180,181,185,188,190,192,193,194,198,200,205,207,212,213,215,219,221
-----computeFrom-----
21,22
21,23
57,58
57,59
70,71
70,72
90,91
90,92
98,99
98,100
111,112
111,113
122,123
122,124
146,147
146,148
156,157
156,158
162,163
162,164
163,164
163,165
168,169
168,170
175,176
175,177
183,184
183,185
196,197
196,198
209,210
209,211
-----guardedBy-----
198,207
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    size_t data;    size_t dataArray[5];    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    dataArray[2] = data;    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_goodB2GSink(dataArray);}
static void
goodB2G()
goodB2G
{    size_t data;    size_t dataArray[5];    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    dataArray[2] = data;    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_goodB2GSink(dataArray);}
size_t data;
size_t data;
size_t
size_t
data
data
size_t dataArray[5];
size_t dataArray[5];
size_t
size_t
dataArray[5]
dataArray
[5]
5
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_goodB2GSink(dataArray);
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_goodB2GSink(dataArray)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_goodB2GSink
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_goodB2GSink
dataArray
dataArray
-----joern-----
(10,110,0)
(40,32,0)
(130,30,0)
(47,11,0)
(3,15,0)
(111,106,0)
(40,52,0)
(17,134,0)
(104,93,0)
(36,15,0)
(117,10,0)
(130,122,0)
(42,52,0)
(33,52,0)
(113,44,0)
(73,15,0)
(36,126,0)
(25,77,0)
(48,29,0)
(38,120,0)
(47,49,0)
(114,78,0)
(108,11,0)
(12,70,0)
(62,21,0)
(115,122,0)
(97,81,0)
(66,1,0)
(43,106,0)
(4,129,0)
(35,42,0)
(105,70,0)
(102,108,0)
(65,103,0)
(50,122,0)
(125,130,0)
(127,32,0)
(15,36,0)
(57,61,0)
(88,22,0)
(32,122,0)
(0,106,0)
(133,108,0)
(41,122,0)
(74,122,0)
(130,27,0)
(76,42,0)
(64,120,0)
(34,54,0)
(109,21,0)
(7,92,0)
(74,54,0)
(8,110,0)
(32,93,0)
(129,52,0)
(110,8,0)
(84,60,0)
(23,93,0)
(51,106,0)
(100,78,0)
(21,115,0)
(40,42,0)
(78,106,0)
(121,41,0)
(7,82,0)
(18,82,0)
(56,106,0)
(19,18,0)
(83,93,0)
(87,121,0)
(27,130,0)
(15,11,0)
(77,1,0)
(124,18,0)
(77,41,0)
(70,92,0)
(55,27,0)
(59,40,0)
(123,112,0)
(29,36,0)
(11,108,0)
(47,60,0)
(126,36,0)
(1,77,0)
(41,121,0)
(53,103,0)
(36,29,0)
(79,106,0)
(99,106,0)
(110,10,0)
(96,7,0)
(46,31,0)
(63,97,0)
(18,19,0)
(60,106,0)
(97,82,0)
(110,37,0)
(6,19,0)
(26,97,0)
(98,60,0)
(18,11,0)
(2,40,0)
(20,3,0)
(120,11,0)
(92,70,0)
(22,15,0)
(39,122,0)
(61,74,0)
(15,22,0)
(81,122,0)
(24,52,0)
(82,18,0)
(131,1,0)
(70,82,0)
(82,122,0)
(103,11,0)
(13,47,0)
(93,32,0)
(120,60,0)
(92,7,0)
(85,18,0)
(75,81,0)
(116,122,0)
(69,115,0)
(45,61,0)
(72,2,0)
(90,11,0)
(37,110,0)
(80,31,0)
(107,122,0)
(28,82,0)
(54,74,0)
(89,106,0)
(94,58,0)
(101,7,0)
(128,108,0)
(9,19,0)
(68,106,0)
(30,130,0)
(95,18,0)
(91,5,0)
(106,52,0)
(71,8,0)
(67,37,0)
(11,122,0)
(14,8,0)
(31,122,0)
(118,30,0)
(15,3,0)
(132,2,0)
(124,19,1)
(69,21,1)
(40,59,1)
(104,23,1)
(65,53,1)
(45,41,1)
(47,60,1)
(96,70,1)
(8,14,1)
(18,11,1)
(64,91,1)
(60,98,1)
(77,25,1)
(129,4,1)
(2,132,1)
(12,105,1)
(14,71,1)
(114,100,1)
(120,11,1)
(92,70,1)
(97,26,1)
(40,32,1)
(37,110,1)
(27,55,1)
(46,80,1)
(9,6,1)
(15,11,1)
(64,123,1)
(108,128,1)
(72,94,1)
(70,12,1)
(40,42,1)
(19,9,1)
(57,45,1)
(74,54,1)
(88,15,1)
(77,1,1)
(86,129,1)
(101,96,1)
(85,28,1)
(10,117,1)
(22,88,1)
(131,66,1)
(94,16,1)
(82,18,1)
(29,48,1)
(97,82,1)
(18,19,1)
(92,7,1)
(16,120,1)
(71,119,1)
(7,101,1)
(109,62,1)
(36,29,1)
(70,82,1)
(38,64,1)
(64,17,1)
(110,10,1)
(59,2,1)
(120,38,1)
(21,109,1)
(128,102,1)
(31,46,1)
(120,60,1)
(98,84,1)
(41,121,1)
(130,30,1)
(66,115,1)
(54,34,1)
(87,77,1)
(26,63,1)
(90,31,1)
(103,65,1)
(64,113,1)
(105,82,1)
(17,22,1)
(7,82,1)
(132,72,1)
(121,87,1)
(67,110,1)
(130,27,1)
(93,83,1)
(63,92,1)
(73,74,1)
(113,92,1)
(47,13,1)
(83,104,1)
(48,73,1)
(13,120,1)
(125,30,1)
(16,47,1)
(42,35,1)
(30,118,1)
(117,8,1)
(75,97,1)
(133,90,1)
(20,36,1)
(119,32,1)
(47,11,1)
(23,127,1)
(91,103,1)
(3,20,1)
(37,67,1)
(25,1,1)
(15,36,1)
(118,103,1)
(115,69,1)
(36,126,1)
(110,8,1)
(78,114,1)
(100,42,1)
(28,22,1)
(18,124,1)
(6,95,1)
(34,61,1)
(80,37,1)
(32,93,1)
(22,15,1)
(84,78,1)
(55,125,1)
(1,131,1)
(62,130,1)
(11,108,1)
(15,3,1)
(71,60,1)
(81,75,1)
(4,40,1)
(127,81,1)
(53,11,1)
(72,16,1)
(35,76,1)
(103,11,1)
(61,57,1)
(64,119,1)
(95,85,1)
(123,37,1)
(102,133,1)
(73,103,2)
(74,103,2)
(108,37,2)
(18,22,2)
(29,103,2)
(34,103,2)
(47,120,2)
(26,92,2)
(93,92,2)
(87,103,2)
(75,92,2)
(82,22,2)
(27,103,2)
(61,103,2)
(8,119,2)
(28,22,2)
(17,22,2)
(119,92,2)
(95,22,2)
(11,108,2)
(54,103,2)
(69,103,2)
(109,103,2)
(7,70,2)
(103,37,2)
(120,11,2)
(6,22,2)
(22,15,2)
(104,92,2)
(36,126,2)
(15,3,2)
(131,103,2)
(40,42,2)
(19,22,2)
(15,103,2)
(80,37,2)
(83,92,2)
(70,82,2)
(65,37,2)
(133,37,2)
(41,121,2)
(120,60,2)
(85,22,2)
(113,92,2)
(130,30,2)
(36,103,2)
(1,103,2)
(46,37,2)
(62,103,2)
(15,11,2)
(92,70,2)
(10,119,2)
(121,103,2)
(105,22,2)
(21,103,2)
(11,37,2)
(18,19,2)
(130,27,2)
(101,70,2)
(110,10,2)
(41,103,2)
(13,120,2)
(74,54,2)
(124,22,2)
(71,119,2)
(110,119,2)
(123,37,2)
(82,18,2)
(32,92,2)
(22,103,2)
(23,92,2)
(66,103,2)
(15,36,2)
(47,11,2)
(20,103,2)
(70,22,2)
(32,93,2)
(25,103,2)
(47,60,2)
(53,37,2)
(3,103,2)
(67,119,2)
(36,29,2)
(115,103,2)
(103,11,2)
(117,119,2)
(94,16,2)
(92,22,2)
(30,103,2)
(97,82,2)
(31,37,2)
(63,92,2)
(81,92,2)
(77,103,2)
(110,8,2)
(90,37,2)
(9,22,2)
(130,103,2)
(12,22,2)
(55,103,2)
(118,103,2)
(45,103,2)
(96,70,2)
(77,1,2)
(127,92,2)
(125,103,2)
(18,11,2)
(37,110,2)
(57,103,2)
(14,119,2)
(48,103,2)
(128,37,2)
(92,7,2)
(7,82,2)
(40,32,2)
(88,103,2)
(91,103,2)
(37,119,2)
(97,92,2)
(102,37,2)
-----------------------------------
(0,wsaDataInit)
(1,service.sin_addr)
(2,dataArray[2])
(3,sizeof(service)
(4,dataArray)
(5,)
(6,CHAR_ARRAY_SIZE)
(7,recvResult == 0)
(8,MAKEWORD(2,2)
(9,1)
(10,&wsaData)
(11,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(12,SOCKET_ERROR)
(13,connectSocket)
(14,2)
(15,connect(connectSocket, (struct sockaddr*)
(16,wsaDataInit)
(17,break;)
(18,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(19,CHAR_ARRAY_SIZE - 1)
(20,service)
(21,service.sin_family)
(22,connect(connectSocket, (struct sockaddr*)
(23,inputBuffer)
(24,dataArray)
(25,s_addr)
(26,recvResult)
(27,sizeof(service)
(28,recvResult)
(29,&service)
(30,&service)
(31,wsaDataInit = 1)
(32,data = strtoul(inputBuffer, NULL, 0)
(33,data)
(34,TCP_PORT)
(35,0)
(36,(struct sockaddr*)
(37,WSAStartup(MAKEWORD(2,2)
(38,INVALID_SOCKET)
(39,if (connect(connectSocket, (struct sockaddr*)
(40,dataArray[2] = data)
(41,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(42,data = 0)
(43,service)
(44,)
(45,service)
(46,1)
(47,CLOSE_SOCKET(connectSocket)
(48,service)
(49,)
(50,if (connectSocket == INVALID_SOCKET)
(51,inputBuffer)
(52,)
(53,connectSocket)
(54,htons(TCP_PORT)
(55,service)
(56,if (wsaDataInit)
(57,sin_port)
(58,)
(59,data)
(60,connectSocket = INVALID_SOCKET)
(61,service.sin_port)
(62,service)
(63,inputBuffer)
(64,connectSocket)
(65,INVALID_SOCKET)
(66,service)
(67,NO_ERROR)
(68,wsaData)
(69,AF_INET)
(70,recvResult == SOCKET_ERROR)
(71,2)
(72,dataArray)
(73,connectSocket)
(74,service.sin_port = htons(TCP_PORT)
(75,'\\0')
(76,data)
(77,service.sin_addr.s_addr)
(78,wsaDataInit = 0)
(79,recvResult)
(80,wsaDataInit)
(81,inputBuffer[recvResult] = '\\0')
(82,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(83,0)
(84,connectSocket)
(85,connectSocket)
(86,RET)
(87,IP_ADDRESS)
(88,SOCKET_ERROR)
(89,if (connectSocket != INVALID_SOCKET)
(90,connectSocket)
(91,break;)
(92,recvResult == SOCKET_ERROR || recvResult == 0)
(93,strtoul(inputBuffer, NULL, 0)
(94,WSACleanup()
(95,inputBuffer)
(96,recvResult)
(97,inputBuffer[recvResult])
(98,INVALID_SOCKET)
(99,do)
(100,wsaDataInit)
(101,0)
(102,SOCK_STREAM)
(103,connectSocket == INVALID_SOCKET)
(104,NULL)
(105,recvResult)
(106,)
(107,if (WSAStartup(MAKEWORD(2,2)
(108,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(109,sin_family)
(110,WSAStartup(MAKEWORD(2,2)
(111,connectSocket)
(112,)
(113,break;)
(114,0)
(115,service.sin_family = AF_INET)
(116,if (recvResult == SOCKET_ERROR || recvResult == 0)
(117,wsaData)
(118,service)
(119,0)
(120,connectSocket != INVALID_SOCKET)
(121,inet_addr(IP_ADDRESS)
(122,)
(123,break;)
(124,0)
(125,0)
(126,struct sockaddr*)
(127,data)
(128,IPPROTO_TCP)
(129,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_goodB2GSink(dataArray)
(130,memset(&service, 0, sizeof(service)
(131,sin_addr)
(132,2)
(133,AF_INET)
(134,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^