-----label-----
0
-----code-----
static void goodB2G1Sink(int count)
{
    if(goodB2G1Static)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
11,12
13,14
14,15
15,16
15,17
16,17
19,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
45,46
47,48
47,49
48,49
48,50
49,50
49,51
50,51
53,54
53,55
54,55
57,58
57,59
57,60
57,61
58,59
59,60
59,61
60,61
62,63
62,64
62,65
63,64
65,66
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
89,90
89,91
90,91
90,92
91,92
94,95
96,97
97,98
99,100
100,101
100,102
101,102
101,103
102,103
102,104
103,104
105,106
107,108
107,109
107,110
107,111
107,112
108,109
110,111
112,113
113,114
113,115
116,117
116,118
117,118
119,120
121,122
123,124
124,125
124,126
125,126
128,129
128,130
129,130
131,132
132,133
133,134
133,135
134,135
136,137
-----nextToken-----
2,4,6,8,12,17,18,24,26,28,32,34,35,38,41,43,44,46,51,52,55,56,61,64,66,67,71,73,78,79,84,85,88,92,93,95,98,104,106,109,111,114,115,118,120,122,126,127,130,135,137
-----computeFrom-----
48,49
48,50
49,50
49,51
53,54
53,55
59,60
59,61
69,70
69,71
82,83
82,84
86,87
86,88
101,102
101,103
-----guardedBy-----
55,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1Sink(int count){    if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G1Sink(int count)
goodB2G1Sink
int count
int
count
count
{    if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
goodB2G1Static
goodB2G1Static
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(67,36,0)
(49,1,0)
(6,51,0)
(45,59,0)
(26,35,0)
(30,29,0)
(60,10,0)
(17,55,0)
(71,6,0)
(69,21,0)
(53,1,0)
(18,67,0)
(2,68,0)
(63,26,0)
(29,62,0)
(23,66,0)
(33,29,0)
(55,11,0)
(51,24,0)
(52,15,0)
(55,17,0)
(46,0,0)
(65,68,0)
(19,13,0)
(42,20,0)
(67,11,0)
(58,68,0)
(48,55,0)
(29,51,0)
(44,68,0)
(3,6,0)
(43,24,0)
(54,68,0)
(5,62,0)
(61,50,0)
(12,51,0)
(24,51,0)
(13,33,0)
(9,59,0)
(57,39,0)
(68,38,0)
(28,21,0)
(21,11,0)
(17,21,0)
(36,1,0)
(66,29,0)
(14,24,0)
(26,51,0)
(64,50,0)
(33,13,0)
(36,67,0)
(7,29,0)
(22,36,0)
(29,33,0)
(70,44,0)
(37,1,0)
(24,15,0)
(50,68,0)
(20,47,0)
(27,59,0)
(67,18,0)
(40,15,0)
(4,34,0)
(51,59,0)
(72,4,0)
(16,55,0)
(25,44,0)
(15,68,0)
(21,17,0)
(29,66,0)
(31,37,0)
(32,67,0)
(62,29,0)
(8,4,1)
(29,66,1)
(51,24,1)
(37,1,1)
(37,31,1)
(13,19,1)
(3,71,1)
(66,23,1)
(56,36,1)
(12,17,1)
(33,13,1)
(55,48,1)
(40,44,1)
(8,56,1)
(72,41,1)
(21,11,1)
(26,51,1)
(15,52,1)
(70,25,1)
(31,33,1)
(4,72,1)
(39,57,1)
(8,17,1)
(61,41,1)
(29,51,1)
(6,3,1)
(31,39,1)
(21,28,1)
(22,1,1)
(49,53,1)
(7,13,1)
(42,6,1)
(33,29,1)
(29,62,1)
(20,42,1)
(67,32,1)
(14,12,1)
(17,55,1)
(43,14,1)
(17,21,1)
(67,18,1)
(8,26,1)
(5,7,1)
(1,49,1)
(26,63,1)
(48,16,1)
(71,51,1)
(53,6,1)
(67,11,1)
(69,15,1)
(24,43,1)
(19,36,1)
(44,70,1)
(36,67,1)
(55,11,1)
(22,37,1)
(57,33,1)
(28,69,1)
(36,1,1)
(24,15,1)
(16,21,1)
(62,5,1)
(64,61,1)
(52,40,1)
(25,50,1)
(50,64,1)
(63,56,1)
(29,30,1)
(30,66,1)
(23,62,1)
(6,51,1)
(53,20,1)
(32,22,1)
(33,29,2)
(17,21,2)
(40,41,2)
(26,51,2)
(31,36,2)
(22,17,2)
(63,56,2)
(1,17,2)
(42,6,2)
(51,24,2)
(50,41,2)
(30,36,2)
(39,33,2)
(36,17,2)
(19,36,2)
(49,17,2)
(4,41,2)
(33,36,2)
(32,36,2)
(71,17,2)
(67,11,2)
(28,41,2)
(23,36,2)
(48,21,2)
(6,17,2)
(6,51,2)
(33,13,2)
(24,17,2)
(55,11,2)
(16,21,2)
(57,33,2)
(29,66,2)
(62,36,2)
(17,55,2)
(32,17,2)
(21,11,2)
(67,18,2)
(55,21,2)
(24,15,2)
(37,1,2)
(7,36,2)
(3,17,2)
(26,56,2)
(43,17,2)
(67,17,2)
(25,41,2)
(5,36,2)
(15,41,2)
(20,6,2)
(61,41,2)
(56,17,2)
(70,41,2)
(52,41,2)
(21,41,2)
(36,1,2)
(64,41,2)
(29,51,2)
(29,36,2)
(66,36,2)
(13,36,2)
(29,62,2)
(36,67,2)
(44,41,2)
(12,17,2)
(22,36,2)
(14,17,2)
(17,41,2)
(51,17,2)
(53,17,2)
(67,36,2)
(72,41,2)
(36,36,2)
(37,36,2)
(69,41,2)
-----------------------------------
(0,)
(1,i = 0)
(2,pFile)
(3,NULL)
(4,printLine("Benign, fixed string")
(5,char)
(6,pFile == NULL)
(7,SENTENCE)
(8,RET)
(9,if (pFile)
(10,)
(11,int count)
(12,pFile)
(13,strlen(SENTENCE)
(14,filename)
(15,*filename = "output_good.txt")
(16,count)
(17,count > 0 && count <= 20)
(18,size_t)
(19,SENTENCE)
(20,exit(1)
(21,count > 0)
(22,i)
(23,SENTENCE)
(24,fopen(filename, "w+")
(25,pFile)
(26,fclose(pFile)
(27,if (pFile == NULL)
(28,0)
(29,fwrite(SENTENCE, sizeof(char)
(30,pFile)
(31,i)
(32,count)
(33,strlen(SENTENCE)
(34,)
(35,)
(36,i < (size_t)
(37,i++)
(38,)
(39,exit(1)
(40,filename)
(41,goodB2G1Static)
(42,1)
(43,"w+")
(44,*pFile = NULL)
(45,for (i = 0; i < (size_t)
(46,if (strlen(SENTENCE)
(47,)
(48,20)
(49,0)
(50,i = 0)
(51,pFile = fopen(filename, "w+")
(52,"output_good.txt")
(53,i)
(54,filename)
(55,count <= 20)
(56,pFile)
(57,1)
(58,i)
(59,)
(60,if(goodB2G1Static)
(61,i)
(62,sizeof(char)
(63,pFile)
(64,0)
(65,if (count > 0 && count <= 20)
(66,strlen(SENTENCE)
(67,(size_t)
(68,)
(69,count)
(70,NULL)
(71,pFile)
(72,"Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^