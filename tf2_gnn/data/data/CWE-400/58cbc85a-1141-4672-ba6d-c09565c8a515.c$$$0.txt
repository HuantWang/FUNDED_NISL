-----label-----
1
-----code-----
int peer_queue_unicast(PolicySnapshot *sender_policy, NameSet *sender_names, ReplyOwner *sender_replies, User *sender_user, uint64_t sender_id, Peer *receiver, Message *message) {
        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;
        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
        uint32_t serial;
        int r;

        serial = message_read_serial(message);

        if (sender_replies && serial) {
                r = reply_slot_new(&slot, &receiver->replies, sender_replies,
                                   receiver->user, sender_user, sender_id, serial);
                if (r == REPLY_E_EXISTS)
                        return PEER_E_EXPECTED_REPLY_EXISTS;
                else if (r == REPLY_E_QUOTA)
                        return PEER_E_QUOTA;
                else if (r)
                        return error_fold(r);
        }

        r = policy_snapshot_check_receive(receiver->policy,
                                          sender_names,
                                          message->metadata.fields.interface,
                                          message->metadata.fields.member,
                                          message->metadata.fields.path,
                                          message->header->type);
        if (r) {
                if (r == POLICY_E_ACCESS_DENIED) {
                        log_append_here(receiver->bus->log, LOG_WARNING, 0);
                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);
                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",
                                        message->metadata.fields.destination,
                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",
                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,
                                        sender_id);
                        if (r)
                                return error_fold(r);

                        return PEER_E_RECEIVE_DENIED;
                }

                return error_fold(r);
        }

        r = policy_snapshot_check_send(sender_policy,
                                       receiver->seclabel,
                                       &receiver_names,
                                       message->metadata.fields.interface,
                                       message->metadata.fields.member,
                                       message->metadata.fields.path,
                                       message->header->type);
        if (r) {
                if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {
                        log_append_here(receiver->bus->log, LOG_WARNING, 0);
                        bus_log_append_policy_send(receiver->bus,
                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),
                                                   sender_id, receiver->id, sender_names, &receiver_names,
                                                   sender_policy->seclabel, receiver->policy->seclabel, message);
                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",
                                        sender_id,
                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",
                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,
                                        message->metadata.fields.destination);
                        if (r)
                                return error_fold(r);

                        return PEER_E_SEND_DENIED;
                }

                return error_fold(r);
        }

        r = connection_queue(&receiver->connection, sender_user, message);
        if (r) {
                if (r == CONNECTION_E_QUOTA) {
                        if (!peer_message_is_solicited(receiver, sender_id, message))
                                return PEER_E_QUOTA;

                        connection_shutdown(&receiver->connection);
                        /* fallthrough */
                } else {
                        return error_fold(r);
                }
        }

        slot = NULL;
        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
24,25
26,27
26,28
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
40,41
40,42
41,42
43,44
43,45
46,47
46,48
46,49
46,50
46,51
46,52
46,53
46,54
46,55
46,56
46,57
46,58
46,59
46,60
46,61
46,62
47,48
48,49
48,50
49,50
51,52
52,53
54,55
55,56
56,57
56,58
57,58
59,60
59,61
59,62
62,63
63,64
65,66
66,67
66,68
67,68
69,70
69,71
71,72
72,73
72,74
73,74
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
96,97
98,99
100,101
100,102
101,102
101,103
102,103
104,105
106,107
106,108
107,108
108,109
108,110
109,110
111,112
111,113
111,114
111,115
111,116
111,117
111,118
111,119
112,113
114,115
115,116
117,118
118,119
118,120
119,120
122,123
124,125
124,126
125,126
128,129
130,131
132,133
134,135
134,136
134,137
135,136
135,137
136,137
138,139
140,141
141,142
143,144
143,145
143,146
144,145
144,146
145,146
147,148
149,150
150,151
152,153
152,154
153,154
155,156
156,157
156,158
157,158
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
165,170
165,171
165,172
166,167
168,169
168,170
169,170
172,173
174,175
174,176
175,176
175,177
176,177
176,178
177,178
182,183
182,184
183,184
183,185
184,185
184,186
185,186
190,191
190,192
191,192
191,193
192,193
192,194
193,194
198,199
198,200
199,200
199,201
200,201
204,205
204,206
205,206
207,208
207,209
208,209
208,210
209,210
209,211
210,211
212,213
214,215
214,216
214,217
214,218
214,219
215,216
216,217
216,218
216,219
216,220
217,218
219,220
219,221
220,221
220,222
221,222
225,226
228,229
229,230
229,231
229,232
229,233
229,234
229,235
229,236
230,231
232,233
232,234
233,234
236,237
236,238
237,238
240,241
242,243
244,245
245,246
247,248
249,250
250,251
250,252
251,252
253,254
253,255
253,256
253,257
253,258
253,259
253,260
253,261
253,262
254,255
256,257
256,258
257,258
257,259
258,259
263,264
263,265
264,265
264,266
265,266
265,267
266,267
271,272
271,273
271,274
272,273
272,274
273,274
273,275
274,275
274,276
275,276
279,280
283,284
283,285
284,285
284,286
285,286
285,287
286,287
291,292
291,293
292,293
292,294
293,294
293,295
294,295
299,300
299,301
300,301
300,302
301,302
301,303
302,303
307,308
309,310
309,311
310,311
312,313
313,314
313,315
314,315
316,317
318,319
319,320
321,322
322,323
322,324
323,324
325,326
327,328
328,329
328,330
329,330
331,332
331,333
331,334
331,335
331,336
331,337
331,338
331,339
332,333
334,335
336,337
336,338
337,338
340,341
341,342
343,344
343,345
344,345
344,346
345,346
345,347
346,347
351,352
351,353
352,353
352,354
353,354
353,355
354,355
359,360
359,361
360,361
360,362
361,362
361,363
362,363
367,368
367,369
368,369
368,370
369,370
373,374
373,375
374,375
376,377
376,378
377,378
377,379
378,379
378,380
379,380
379,381
380,381
382,383
384,385
384,386
385,386
387,388
389,390
389,391
389,392
389,393
389,394
390,391
391,392
391,393
391,394
391,395
392,393
394,395
394,396
395,396
395,397
396,397
400,401
403,404
404,405
404,406
404,407
404,408
404,409
404,410
404,411
404,412
404,413
404,414
405,406
407,408
407,409
408,409
411,412
412,413
412,414
412,415
413,414
413,415
414,415
416,417
418,419
420,421
422,423
424,425
424,426
425,426
428,429
430,431
431,432
433,434
433,435
434,435
437,438
437,439
438,439
438,440
439,440
443,444
445,446
446,447
446,448
447,448
449,450
449,451
449,452
449,453
449,454
449,455
449,456
449,457
449,458
450,451
452,453
452,454
453,454
453,455
454,455
459,460
461,462
461,463
461,464
462,463
462,464
463,464
463,465
464,465
464,466
465,466
469,470
473,474
473,475
474,475
474,476
475,476
475,477
476,477
481,482
481,483
482,483
482,484
483,484
483,485
484,485
489,490
489,491
490,491
490,492
491,492
491,493
492,493
497,498
497,499
498,499
498,500
499,500
499,501
500,501
505,506
505,507
506,507
508,509
509,510
509,511
510,511
512,513
514,515
515,516
517,518
518,519
518,520
519,520
521,522
523,524
524,525
524,526
525,526
527,528
527,529
527,530
527,531
528,529
530,531
531,532
531,533
532,533
535,536
537,538
539,540
539,541
540,541
542,543
543,544
543,545
543,546
544,545
544,546
545,546
547,548
549,550
549,551
550,551
550,552
551,552
552,553
552,554
552,555
552,556
553,554
555,556
557,558
559,560
561,562
562,563
564,565
565,566
565,567
566,567
568,569
569,570
569,571
570,571
573,574
574,575
575,576
575,577
576,577
578,579
580,581
581,582
581,583
582,583
584,585
586,587
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,25,27,28,31,33,36,38,39,42,44,45,50,53,58,60,61,64,68,70,74,78,79,83,85,88,90,94,97,99,103,105,110,113,116,120,121,123,126,127,129,131,133,137,139,142,146,148,151,154,158,160,164,167,170,171,173,178,179,180,181,186,187,188,189,194,195,196,197,201,202,203,206,211,213,218,222,223,224,226,227,231,234,235,238,239,241,243,246,248,252,255,259,260,261,262,267,268,269,270,276,277,278,280,281,282,287,288,289,290,295,296,297,298,303,304,305,306,308,311,315,317,320,324,326,330,333,335,338,339,342,347,348,349,350,355,356,357,358,363,364,365,366,370,371,372,375,381,383,386,388,393,397,398,399,401,402,406,409,410,415,417,419,421,423,426,427,429,432,435,436,440,441,442,444,448,451,455,456,457,458,460,466,467,468,470,471,472,477,478,479,480,485,486,487,488,493,494,495,496,501,502,503,504,507,511,513,516,520,522,526,529,533,534,536,538,541,546,548,554,556,558,560,563,567,571,572,577,579,583,585,587
-----computeFrom-----
92,93
92,94
101,102
101,103
108,109
108,110
135,136
135,137
144,145
144,146
162,163
162,164
209,210
209,211
250,251
250,252
272,273
272,274
328,329
328,330
378,379
378,380
379,380
379,381
384,385
384,386
413,414
413,415
446,447
446,448
462,463
462,464
524,525
524,526
544,545
544,546
581,582
581,583
-----guardedBy-----
103,123
105,133
211,317
386,513
383,417
-----guardedByNegation-----
137,160
146,160
546,579
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ConditionalExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int peer_queue_unicast(PolicySnapshot *sender_policy, NameSet *sender_names, ReplyOwner *sender_replies, User *sender_user, uint64_t sender_id, Peer *receiver, Message *message) {        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);        uint32_t serial;        int r;        serial = message_read_serial(message);        if (sender_replies && serial) {                r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial);                if (r == REPLY_E_EXISTS)                        return PEER_E_EXPECTED_REPLY_EXISTS;                else if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);        }        r = policy_snapshot_check_receive(receiver->policy,                                          sender_names,                                          message->metadata.fields.interface,                                          message->metadata.fields.member,                                          message->metadata.fields.path,                                          message->header->type);        if (r) {                if (r == POLICY_E_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }                return error_fold(r);        }        r = policy_snapshot_check_send(sender_policy,                                       receiver->seclabel,                                       &receiver_names,                                       message->metadata.fields.interface,                                       message->metadata.fields.member,                                       message->metadata.fields.path,                                       message->header->type);        if (r) {                if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }                return error_fold(r);        }        r = connection_queue(&receiver->connection, sender_user, message);        if (r) {                if (r == CONNECTION_E_QUOTA) {                        if (!peer_message_is_solicited(receiver, sender_id, message))                                return PEER_E_QUOTA;                        connection_shutdown(&receiver->connection);                        /* fallthrough */                } else {                        return error_fold(r);                }        }        slot = NULL;        return 0;}
int
peer_queue_unicast(PolicySnapshot *sender_policy, NameSet *sender_names, ReplyOwner *sender_replies, User *sender_user, uint64_t sender_id, Peer *receiver, Message *message)
peer_queue_unicast
PolicySnapshot *sender_policy
PolicySnapshot
PolicySnapshot
*sender_policy
*
sender_policy
NameSet *sender_names
NameSet
NameSet
*sender_names
*
sender_names
ReplyOwner *sender_replies
ReplyOwner
ReplyOwner
*sender_replies
*
sender_replies
User *sender_user
User
User
*sender_user
*
sender_user
uint64_t sender_id
uint64_t
uint64_t
sender_id
sender_id
Peer *receiver
Peer
Peer
*receiver
*
receiver
Message *message
Message
Message
*message
*
message
{        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);        uint32_t serial;        int r;        serial = message_read_serial(message);        if (sender_replies && serial) {                r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial);                if (r == REPLY_E_EXISTS)                        return PEER_E_EXPECTED_REPLY_EXISTS;                else if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);        }        r = policy_snapshot_check_receive(receiver->policy,                                          sender_names,                                          message->metadata.fields.interface,                                          message->metadata.fields.member,                                          message->metadata.fields.path,                                          message->header->type);        if (r) {                if (r == POLICY_E_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }                return error_fold(r);        }        r = policy_snapshot_check_send(sender_policy,                                       receiver->seclabel,                                       &receiver_names,                                       message->metadata.fields.interface,                                       message->metadata.fields.member,                                       message->metadata.fields.path,                                       message->header->type);        if (r) {                if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }                return error_fold(r);        }        r = connection_queue(&receiver->connection, sender_user, message);        if (r) {                if (r == CONNECTION_E_QUOTA) {                        if (!peer_message_is_solicited(receiver, sender_id, message))                                return PEER_E_QUOTA;                        connection_shutdown(&receiver->connection);                        /* fallthrough */                } else {                        return error_fold(r);                }        }        slot = NULL;        return 0;}
_c_cleanup_(reply_slot_freep)
_c_cleanup_(reply_slot_freep)
_c_cleanup_
_c_cleanup_
(reply_slot_freep)
reply_slot_freep
reply_slot_freep
)
ReplySlot *slot = NULL;
ReplySlot *slot = NULL;
ReplySlot
ReplySlot
*slot = NULL
*
slot
= NULL
NULL
NULL
NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
NameSet
NameSet
receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
receiver_names
= NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
NAME_SET_INIT_FROM_OWNER
NAME_SET_INIT_FROM_OWNER
&receiver->owned_names
receiver->owned_names
receiver
receiver
owned_names
uint32_t serial;
uint32_t serial;
uint32_t
uint32_t
serial
serial
int r;
int r;
int
r
r
serial = message_read_serial(message);
serial = message_read_serial(message)
serial
serial
message_read_serial(message)
message_read_serial
message_read_serial
message
message
if (sender_replies && serial) {                r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial);                if (r == REPLY_E_EXISTS)                        return PEER_E_EXPECTED_REPLY_EXISTS;                else if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);        }
sender_replies && serial
sender_replies
sender_replies
serial
serial
{                r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial);                if (r == REPLY_E_EXISTS)                        return PEER_E_EXPECTED_REPLY_EXISTS;                else if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);        }
r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial);
r = reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial)
r
r
reply_slot_new(&slot, &receiver->replies, sender_replies,                                   receiver->user, sender_user, sender_id, serial)
reply_slot_new
reply_slot_new
&slot
slot
slot
&receiver->replies
receiver->replies
receiver
receiver
replies
sender_replies
sender_replies
receiver->user
receiver
receiver
user
sender_user
sender_user
sender_id
sender_id
serial
serial
if (r == REPLY_E_EXISTS)                        return PEER_E_EXPECTED_REPLY_EXISTS;                else if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);
r == REPLY_E_EXISTS
r
r
REPLY_E_EXISTS
REPLY_E_EXISTS
return PEER_E_EXPECTED_REPLY_EXISTS;
PEER_E_EXPECTED_REPLY_EXISTS
PEER_E_EXPECTED_REPLY_EXISTS
if (r == REPLY_E_QUOTA)                        return PEER_E_QUOTA;                else if (r)                        return error_fold(r);
r == REPLY_E_QUOTA
r
r
REPLY_E_QUOTA
REPLY_E_QUOTA
return PEER_E_QUOTA;
PEER_E_QUOTA
PEER_E_QUOTA
if (r)                        return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
r = policy_snapshot_check_receive(receiver->policy,                                          sender_names,                                          message->metadata.fields.interface,                                          message->metadata.fields.member,                                          message->metadata.fields.path,                                          message->header->type);
r = policy_snapshot_check_receive(receiver->policy,                                          sender_names,                                          message->metadata.fields.interface,                                          message->metadata.fields.member,                                          message->metadata.fields.path,                                          message->header->type)
r
r
policy_snapshot_check_receive(receiver->policy,                                          sender_names,                                          message->metadata.fields.interface,                                          message->metadata.fields.member,                                          message->metadata.fields.path,                                          message->header->type)
policy_snapshot_check_receive
policy_snapshot_check_receive
receiver->policy
receiver
receiver
policy
sender_names
sender_names
message->metadata.fields.interface
message->metadata.fields
message->metadata
message
message
metadata
fields
interface
message->metadata.fields.member
message->metadata.fields
message->metadata
message
message
metadata
fields
member
message->metadata.fields.path
message->metadata.fields
message->metadata
message
message
metadata
fields
path
message->header->type
message->header
message
message
header
type
if (r) {                if (r == POLICY_E_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }                return error_fold(r);        }
r
r
{                if (r == POLICY_E_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }                return error_fold(r);        }
if (r == POLICY_E_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }
r == POLICY_E_ACCESS_DENIED
r
r
POLICY_E_ACCESS_DENIED
POLICY_E_ACCESS_DENIED
{                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);                        r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);                        if (r)                                return error_fold(r);                        return PEER_E_RECEIVE_DENIED;                }
log_append_here(receiver->bus->log, LOG_WARNING, 0);
log_append_here(receiver->bus->log, LOG_WARNING, 0)
log_append_here
log_append_here
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
LOG_WARNING
LOG_WARNING
0
bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message);
bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message)
bus_log_append_policy_receive
bus_log_append_policy_receive
receiver->bus
receiver
receiver
bus
receiver->id
receiver
receiver
id
sender_id
sender_id
sender_names
sender_names
&receiver_names
receiver_names
receiver_names
message
message
r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id);
r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id)
r
r
log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",                                        message->metadata.fields.destination,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        sender_id)
log_commitf
log_commitf
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
"A security policy denied %s to receive %s %s:%s.%s from :1.%llu."
message->metadata.fields.destination
message->metadata.fields
message->metadata
message
message
metadata
fields
destination
message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal"
message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL
message->header->type
message->header
message
message
header
type
DBUS_MESSAGE_TYPE_METHOD_CALL
DBUS_MESSAGE_TYPE_METHOD_CALL
"method call"
"signal"
message->metadata.fields.path
message->metadata.fields
message->metadata
message
message
metadata
fields
path
message->metadata.fields.interface
message->metadata.fields
message->metadata
message
message
metadata
fields
interface
message->metadata.fields.member
message->metadata.fields
message->metadata
message
message
metadata
fields
member
sender_id
sender_id
if (r)                                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return PEER_E_RECEIVE_DENIED;
PEER_E_RECEIVE_DENIED
PEER_E_RECEIVE_DENIED
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
r = policy_snapshot_check_send(sender_policy,                                       receiver->seclabel,                                       &receiver_names,                                       message->metadata.fields.interface,                                       message->metadata.fields.member,                                       message->metadata.fields.path,                                       message->header->type);
r = policy_snapshot_check_send(sender_policy,                                       receiver->seclabel,                                       &receiver_names,                                       message->metadata.fields.interface,                                       message->metadata.fields.member,                                       message->metadata.fields.path,                                       message->header->type)
r
r
policy_snapshot_check_send(sender_policy,                                       receiver->seclabel,                                       &receiver_names,                                       message->metadata.fields.interface,                                       message->metadata.fields.member,                                       message->metadata.fields.path,                                       message->header->type)
policy_snapshot_check_send
policy_snapshot_check_send
sender_policy
sender_policy
receiver->seclabel
receiver
receiver
seclabel
&receiver_names
receiver_names
receiver_names
message->metadata.fields.interface
message->metadata.fields
message->metadata
message
message
metadata
fields
interface
message->metadata.fields.member
message->metadata.fields
message->metadata
message
message
metadata
fields
member
message->metadata.fields.path
message->metadata.fields
message->metadata
message
message
metadata
fields
path
message->header->type
message->header
message
message
header
type
if (r) {                if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }                return error_fold(r);        }
r
r
{                if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }                return error_fold(r);        }
if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED) {                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }
r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED
r == POLICY_E_ACCESS_DENIED
r
r
POLICY_E_ACCESS_DENIED
POLICY_E_ACCESS_DENIED
r == POLICY_E_SELINUX_ACCESS_DENIED
r
r
POLICY_E_SELINUX_ACCESS_DENIED
POLICY_E_SELINUX_ACCESS_DENIED
{                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);                        if (r)                                return error_fold(r);                        return PEER_E_SEND_DENIED;                }
log_append_here(receiver->bus->log, LOG_WARNING, 0);
log_append_here(receiver->bus->log, LOG_WARNING, 0)
log_append_here
log_append_here
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
LOG_WARNING
LOG_WARNING
0
bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message);
bus_log_append_policy_send(receiver->bus,                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX),                                                   sender_id, receiver->id, sender_names, &receiver_names,                                                   sender_policy->seclabel, receiver->policy->seclabel, message)
bus_log_append_policy_send
bus_log_append_policy_send
receiver->bus
receiver
receiver
bus
(r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX)
r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX
r == POLICY_E_ACCESS_DENIED
r
r
POLICY_E_ACCESS_DENIED
POLICY_E_ACCESS_DENIED
BUS_LOG_POLICY_TYPE_INTERNAL
BUS_LOG_POLICY_TYPE_INTERNAL
BUS_LOG_POLICY_TYPE_SELINUX
BUS_LOG_POLICY_TYPE_SELINUX
sender_id
sender_id
receiver->id
receiver
receiver
id
sender_names
sender_names
&receiver_names
receiver_names
receiver_names
sender_policy->seclabel
sender_policy
sender_policy
seclabel
receiver->policy->seclabel
receiver->policy
receiver
receiver
policy
seclabel
message
message
r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination);
r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination)
r
r
log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",                                        sender_id,                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,                                        message->metadata.fields.destination)
log_commitf
log_commitf
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
"A security policy denied :1.%llu to send %s %s:%s.%s to %s."
sender_id
sender_id
message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal"
message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL
message->header->type
message->header
message
message
header
type
DBUS_MESSAGE_TYPE_METHOD_CALL
DBUS_MESSAGE_TYPE_METHOD_CALL
"method call"
"signal"
message->metadata.fields.path
message->metadata.fields
message->metadata
message
message
metadata
fields
path
message->metadata.fields.interface
message->metadata.fields
message->metadata
message
message
metadata
fields
interface
message->metadata.fields.member
message->metadata.fields
message->metadata
message
message
metadata
fields
member
message->metadata.fields.destination
message->metadata.fields
message->metadata
message
message
metadata
fields
destination
if (r)                                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return PEER_E_SEND_DENIED;
PEER_E_SEND_DENIED
PEER_E_SEND_DENIED
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
r = connection_queue(&receiver->connection, sender_user, message);
r = connection_queue(&receiver->connection, sender_user, message)
r
r
connection_queue(&receiver->connection, sender_user, message)
connection_queue
connection_queue
&receiver->connection
receiver->connection
receiver
receiver
connection
sender_user
sender_user
message
message
if (r) {                if (r == CONNECTION_E_QUOTA) {                        if (!peer_message_is_solicited(receiver, sender_id, message))                                return PEER_E_QUOTA;                        connection_shutdown(&receiver->connection);                        /* fallthrough */                } else {                        return error_fold(r);                }        }
r
r
{                if (r == CONNECTION_E_QUOTA) {                        if (!peer_message_is_solicited(receiver, sender_id, message))                                return PEER_E_QUOTA;                        connection_shutdown(&receiver->connection);                        /* fallthrough */                } else {                        return error_fold(r);                }        }
if (r == CONNECTION_E_QUOTA) {                        if (!peer_message_is_solicited(receiver, sender_id, message))                                return PEER_E_QUOTA;                        connection_shutdown(&receiver->connection);                        /* fallthrough */                } else {                        return error_fold(r);                }
r == CONNECTION_E_QUOTA
r
r
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
{                        if (!peer_message_is_solicited(receiver, sender_id, message))                                return PEER_E_QUOTA;                        connection_shutdown(&receiver->connection);                        /* fallthrough */                }
if (!peer_message_is_solicited(receiver, sender_id, message))                                return PEER_E_QUOTA;
!peer_message_is_solicited(receiver, sender_id, message)
peer_message_is_solicited(receiver, sender_id, message)
peer_message_is_solicited
peer_message_is_solicited
receiver
receiver
sender_id
sender_id
message
message
return PEER_E_QUOTA;
PEER_E_QUOTA
PEER_E_QUOTA
connection_shutdown(&receiver->connection);
connection_shutdown(&receiver->connection)
connection_shutdown
connection_shutdown
&receiver->connection
receiver->connection
receiver
receiver
connection
{                        return error_fold(r);                }
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
slot = NULL;
slot = NULL
slot
slot
NULL
NULL
return 0;
0
-----joern-----
(1,6,0)
(183,61,0)
(341,71,0)
(31,338,0)
(321,154,0)
(121,120,0)
(271,227,0)
(124,102,0)
(246,199,0)
(186,1,0)
(255,54,0)
(354,120,0)
(330,12,0)
(52,290,0)
(329,52,0)
(20,251,0)
(328,94,0)
(95,120,0)
(236,225,0)
(162,20,0)
(1,308,0)
(258,76,0)
(94,359,0)
(140,94,0)
(320,334,0)
(327,356,0)
(65,80,0)
(254,132,0)
(96,158,0)
(64,232,0)
(351,119,0)
(197,143,0)
(342,67,0)
(32,280,0)
(302,319,0)
(34,359,0)
(75,158,0)
(87,338,0)
(205,268,0)
(124,260,0)
(10,71,0)
(35,306,0)
(295,284,0)
(289,219,0)
(46,52,0)
(275,1,0)
(119,143,0)
(34,238,0)
(320,298,0)
(278,287,0)
(77,287,0)
(184,227,0)
(72,57,0)
(102,124,0)
(135,52,0)
(188,294,0)
(106,13,0)
(26,238,0)
(105,223,0)
(233,71,0)
(93,359,0)
(244,356,0)
(313,93,0)
(335,221,0)
(14,120,0)
(342,272,0)
(131,228,0)
(318,127,0)
(167,223,0)
(93,250,0)
(277,55,0)
(347,61,0)
(268,265,0)
(37,358,0)
(339,154,0)
(150,344,0)
(86,60,0)
(305,295,0)
(208,32,0)
(111,38,0)
(200,71,0)
(266,67,0)
(319,276,0)
(112,355,0)
(293,268,0)
(108,60,0)
(232,203,0)
(117,28,0)
(306,305,0)
(148,312,0)
(83,359,0)
(227,15,0)
(342,117,0)
(251,305,0)
(342,282,0)
(191,91,0)
(169,61,0)
(98,124,0)
(342,123,0)
(2,202,0)
(1,292,0)
(231,11,0)
(159,153,0)
(63,298,0)
(261,122,0)
(280,227,0)
(305,306,0)
(71,9,0)
(27,2,0)
(284,295,0)
(288,15,0)
(342,125,0)
(260,124,0)
(239,1,0)
(41,193,0)
(173,322,0)
(98,80,0)
(66,169,0)
(225,233,0)
(222,129,0)
(107,58,0)
(133,290,0)
(38,157,0)
(109,1,0)
(251,20,0)
(100,340,0)
(115,43,0)
(122,114,0)
(15,120,0)
(248,202,0)
(52,129,0)
(124,6,0)
(18,161,0)
(82,193,0)
(176,244,0)
(39,134,0)
(71,233,0)
(60,20,0)
(247,351,0)
(166,16,0)
(290,202,0)
(349,202,0)
(299,305,0)
(219,82,0)
(315,132,0)
(194,312,0)
(333,33,0)
(99,26,0)
(22,305,0)
(129,222,0)
(324,248,0)
(307,308,0)
(42,277,0)
(71,6,0)
(36,1,0)
(287,135,0)
(233,225,0)
(334,124,0)
(52,359,0)
(58,347,0)
(264,260,0)
(305,351,0)
(144,137,0)
(158,153,0)
(110,233,0)
(310,202,0)
(303,191,0)
(118,15,0)
(282,28,0)
(160,359,0)
(149,71,0)
(80,98,0)
(28,199,0)
(292,1,0)
(97,10,0)
(238,26,0)
(73,16,0)
(362,153,0)
(182,104,0)
(330,28,0)
(179,277,0)
(0,143,0)
(132,359,0)
(338,120,0)
(287,202,0)
(44,169,0)
(312,194,0)
(342,122,0)
(66,359,0)
(130,349,0)
(298,320,0)
(100,22,0)
(26,71,0)
(207,282,0)
(139,359,0)
(334,320,0)
(89,148,0)
(43,8,0)
(322,128,0)
(127,202,0)
(85,161,0)
(177,202,0)
(138,96,0)
(49,284,0)
(290,52,0)
(91,191,0)
(235,176,0)
(199,81,0)
(52,54,0)
(17,284,0)
(252,148,0)
(294,114,0)
(3,13,0)
(2,305,0)
(80,132,0)
(5,120,0)
(224,102,0)
(295,305,0)
(277,6,0)
(1,68,0)
(117,5,0)
(163,358,0)
(305,299,0)
(30,319,0)
(283,310,0)
(58,107,0)
(175,129,0)
(13,94,0)
(347,127,0)
(355,57,0)
(342,82,0)
(279,244,0)
(29,146,0)
(81,199,0)
(347,16,0)
(304,134,0)
(325,293,0)
(154,52,0)
(336,102,0)
(210,312,0)
(232,6,0)
(61,169,0)
(52,55,0)
(107,359,0)
(217,120,0)
(19,124,0)
(123,28,0)
(214,336,0)
(319,299,0)
(344,124,0)
(96,138,0)
(306,338,0)
(281,290,0)
(226,66,0)
(138,124,0)
(317,28,0)
(232,359,0)
(220,96,0)
(151,213,0)
(242,251,0)
(168,1,0)
(277,359,0)
(87,52,0)
(127,347,0)
(11,338,0)
(24,173,0)
(143,119,0)
(88,52,0)
(126,176,0)
(71,341,0)
(67,28,0)
(174,120,0)
(250,93,0)
(125,28,0)
(62,275,0)
(57,71,0)
(154,202,0)
(169,66,0)
(13,3,0)
(56,340,0)
(187,28,0)
(298,359,0)
(74,139,0)
(277,116,0)
(312,148,0)
(177,109,0)
(343,3,0)
(314,146,0)
(124,334,0)
(198,334,0)
(199,28,0)
(71,10,0)
(11,277,0)
(211,91,0)
(358,276,0)
(161,43,0)
(70,22,0)
(241,222,0)
(347,356,0)
(274,349,0)
(191,260,0)
(165,310,0)
(16,120,0)
(258,187,0)
(203,232,0)
(78,150,0)
(257,83,0)
(276,358,0)
(229,76,0)
(356,347,0)
(136,299,0)
(109,177,0)
(117,120,0)
(101,310,0)
(336,296,0)
(331,292,0)
(276,319,0)
(124,344,0)
(8,202,0)
(194,202,0)
(116,277,0)
(171,138,0)
(215,127,0)
(10,293,0)
(292,178,0)
(288,330,0)
(361,34,0)
(358,299,0)
(305,2,0)
(142,123,0)
(206,83,0)
(282,54,0)
(244,176,0)
(305,22,0)
(71,26,0)
(345,277,0)
(43,161,0)
(228,164,0)
(209,248,0)
(29,304,0)
(253,1,0)
(342,330,0)
(305,251,0)
(4,275,0)
(33,125,0)
(265,268,0)
(50,178,0)
(180,104,0)
(82,28,0)
(16,347,0)
(342,322,0)
(94,13,0)
(356,244,0)
(350,288,0)
(311,338,0)
(190,160,0)
(275,202,0)
(21,194,0)
(219,16,0)
(102,336,0)
(360,5,0)
(71,294,0)
(308,139,0)
(347,55,0)
(227,280,0)
(20,60,0)
(196,295,0)
(299,120,0)
(248,341,0)
(349,277,0)
(3,347,0)
(245,137,0)
(342,187,0)
(296,336,0)
(51,166,0)
(341,248,0)
(259,340,0)
(355,160,0)
(38,52,0)
(311,283,0)
(227,359,0)
(116,202,0)
(52,87,0)
(59,296,0)
(195,232,0)
(60,359,0)
(143,359,0)
(33,294,0)
(146,29,0)
(92,38,0)
(83,225,0)
(28,270,0)
(161,114,0)
(124,138,0)
(223,308,0)
(176,359,0)
(277,349,0)
(353,239,0)
(84,5,0)
(135,287,0)
(338,311,0)
(272,28,0)
(40,100,0)
(293,10,0)
(153,359,0)
(181,8,0)
(332,250,0)
(227,53,0)
(52,38,0)
(262,177,0)
(124,76,0)
(158,96,0)
(91,359,0)
(238,34,0)
(201,265,0)
(1,275,0)
(297,344,0)
(250,9,0)
(192,272,0)
(280,32,0)
(234,34,0)
(1,109,0)
(79,87,0)
(139,308,0)
(76,54,0)
(216,222,0)
(347,3,0)
(225,83,0)
(9,71,0)
(148,54,0)
(268,293,0)
(221,292,0)
(129,52,0)
(284,359,0)
(45,107,0)
(52,154,0)
(9,250,0)
(22,100,0)
(23,114,0)
(153,158,0)
(164,28,0)
(170,194,0)
(124,98,0)
(337,9,0)
(294,71,0)
(150,202,0)
(263,258,0)
(185,135,0)
(326,128,0)
(156,116,0)
(103,8,0)
(8,43,0)
(309,341,0)
(113,238,0)
(340,100,0)
(147,58,0)
(277,114,0)
(15,227,0)
(346,177,0)
(122,28,0)
(265,359,0)
(32,202,0)
(270,120,0)
(61,347,0)
(322,28,0)
(243,32,0)
(267,66,0)
(344,150,0)
(283,311,0)
(71,57,0)
(119,351,0)
(223,68,0)
(146,202,0)
(173,299,0)
(232,202,0)
(296,359,0)
(300,138,0)
(351,305,0)
(90,296,0)
(172,265,0)
(285,98,0)
(269,320,0)
(48,150,0)
(230,2,0)
(352,305,0)
(152,160,0)
(7,298,0)
(304,29,0)
(342,164,0)
(249,166,0)
(256,119,0)
(141,107,0)
(260,191,0)
(52,135,0)
(76,124,0)
(189,91,0)
(132,80,0)
(204,129,0)
(25,232,0)
(357,146,0)
(347,58,0)
(291,10,0)
(69,221,0)
(305,157,0)
(301,116,0)
(145,117,0)
(308,120,0)
(340,359,0)
(160,355,0)
(277,11,0)
(222,299,0)
(52,6,0)
(104,292,0)
(348,120,0)
(1,53,0)
(137,15,0)
(218,270,0)
(57,355,0)
(1,239,0)
(47,93,0)
(228,292,0)
(310,283,0)
(273,124,0)
(212,347,0)
(156,301,1)
(227,184,1)
(265,359,1)
(5,84,1)
(73,223,1)
(10,97,1)
(78,229,1)
(140,61,1)
(342,272,1)
(227,359,1)
(226,267,1)
(198,320,1)
(94,328,1)
(294,71,1)
(144,245,1)
(292,1,1)
(32,202,1)
(240,15,1)
(71,57,1)
(91,359,1)
(221,292,1)
(283,310,1)
(66,226,1)
(25,137,1)
(233,110,1)
(28,199,1)
(61,183,1)
(71,9,1)
(263,323,1)
(347,356,1)
(116,156,1)
(148,252,1)
(179,11,1)
(173,299,1)
(80,132,1)
(282,28,1)
(327,244,1)
(146,202,1)
(248,202,1)
(65,132,1)
(211,98,1)
(52,87,1)
(318,73,1)
(341,248,1)
(295,284,1)
(49,351,1)
(256,143,1)
(261,316,1)
(228,292,1)
(1,53,1)
(210,194,1)
(166,16,1)
(105,308,1)
(260,264,1)
(262,346,1)
(351,247,1)
(48,78,1)
(62,4,1)
(190,152,1)
(43,115,1)
(277,349,1)
(300,96,1)
(126,235,1)
(111,92,1)
(52,6,1)
(31,270,1)
(52,46,1)
(342,282,1)
(207,323,1)
(265,172,1)
(159,362,1)
(209,188,1)
(310,101,1)
(330,288,1)
(191,303,1)
(281,148,1)
(297,150,1)
(227,53,1)
(52,154,1)
(307,338,1)
(293,325,1)
(277,6,1)
(342,67,1)
(208,118,1)
(37,163,1)
(172,201,1)
(124,6,1)
(130,274,1)
(218,28,1)
(272,192,1)
(340,359,1)
(150,202,1)
(277,55,1)
(67,266,1)
(299,305,1)
(243,208,1)
(124,344,1)
(52,55,1)
(147,107,1)
(91,189,1)
(82,219,1)
(118,286,1)
(142,203,1)
(314,357,1)
(138,171,1)
(107,359,1)
(205,265,1)
(169,66,1)
(279,176,1)
(181,166,1)
(319,299,1)
(1,253,1)
(184,271,1)
(340,56,1)
(347,55,1)
(220,158,1)
(30,358,1)
(117,145,1)
(293,268,1)
(104,292,1)
(129,175,1)
(194,21,1)
(298,63,1)
(22,70,1)
(124,260,1)
(98,285,1)
(47,57,1)
(89,312,1)
(272,28,1)
(1,275,1)
(310,202,1)
(152,10,1)
(277,116,1)
(225,83,1)
(58,107,1)
(285,80,1)
(123,142,1)
(296,359,1)
(133,281,1)
(124,102,1)
(319,302,1)
(206,257,1)
(96,158,1)
(254,138,1)
(282,207,1)
(345,42,1)
(116,202,1)
(342,322,1)
(192,104,1)
(309,248,1)
(38,111,1)
(71,233,1)
(141,45,1)
(288,15,1)
(87,79,1)
(275,202,1)
(250,93,1)
(117,5,1)
(322,173,1)
(320,298,1)
(38,157,1)
(1,109,1)
(223,68,1)
(99,238,1)
(102,336,1)
(83,206,1)
(357,203,1)
(164,28,1)
(308,139,1)
(360,304,1)
(264,191,1)
(238,113,1)
(93,359,1)
(320,269,1)
(276,319,1)
(355,112,1)
(61,169,1)
(113,34,1)
(155,104,1)
(227,280,1)
(127,215,1)
(71,26,1)
(303,91,1)
(268,265,1)
(305,295,1)
(42,116,1)
(125,33,1)
(129,222,1)
(305,22,1)
(173,24,1)
(79,329,1)
(311,283,1)
(302,30,1)
(18,85,1)
(119,143,1)
(10,291,1)
(229,52,1)
(166,249,1)
(90,59,1)
(11,231,1)
(77,38,1)
(164,228,1)
(7,102,1)
(312,210,1)
(231,345,1)
(358,299,1)
(175,222,1)
(32,243,1)
(36,275,1)
(305,351,1)
(100,40,1)
(305,157,1)
(245,240,1)
(249,51,1)
(342,164,1)
(232,6,1)
(253,186,1)
(304,29,1)
(63,7,1)
(165,31,1)
(124,334,1)
(268,205,1)
(269,298,1)
(301,349,1)
(336,214,1)
(75,153,1)
(244,279,1)
(117,28,1)
(67,28,1)
(28,317,1)
(230,27,1)
(143,359,1)
(196,284,1)
(203,232,1)
(52,135,1)
(86,108,1)
(46,135,1)
(313,47,1)
(267,356,1)
(163,286,1)
(20,60,1)
(275,62,1)
(84,360,1)
(232,359,1)
(199,81,1)
(259,251,1)
(277,359,1)
(131,155,1)
(286,299,1)
(171,96,1)
(1,239,1)
(289,166,1)
(356,327,1)
(177,262,1)
(123,28,1)
(341,309,1)
(19,344,1)
(258,263,1)
(127,202,1)
(119,256,1)
(1,6,1)
(244,176,1)
(83,359,1)
(362,273,1)
(143,197,1)
(97,293,1)
(347,127,1)
(334,198,1)
(185,287,1)
(187,28,1)
(8,103,1)
(9,337,1)
(0,22,1)
(346,239,1)
(342,187,1)
(43,8,1)
(204,222,1)
(160,359,1)
(51,237,1)
(276,358,1)
(350,137,1)
(158,153,1)
(11,338,1)
(361,234,1)
(132,359,1)
(109,177,1)
(122,28,1)
(13,106,1)
(322,28,1)
(150,48,1)
(74,307,1)
(177,202,1)
(168,109,1)
(4,168,1)
(360,240,1)
(252,89,1)
(101,165,1)
(135,287,1)
(225,236,1)
(251,242,1)
(182,180,1)
(241,290,1)
(153,159,1)
(266,221,1)
(58,147,1)
(324,209,1)
(80,65,1)
(277,179,1)
(137,15,1)
(138,96,1)
(183,169,1)
(347,61,1)
(1,308,1)
(222,216,1)
(93,313,1)
(21,170,1)
(125,28,1)
(344,297,1)
(56,259,1)
(199,246,1)
(349,130,1)
(132,315,1)
(280,32,1)
(305,2,1)
(321,339,1)
(96,220,1)
(103,181,1)
(344,150,1)
(248,324,1)
(236,83,1)
(342,330,1)
(298,359,1)
(154,321,1)
(33,333,1)
(94,359,1)
(112,160,1)
(290,133,1)
(338,311,1)
(52,38,1)
(71,149,1)
(34,359,1)
(216,241,1)
(92,87,1)
(15,227,1)
(45,3,1)
(158,75,1)
(201,233,1)
(153,359,1)
(59,260,1)
(70,100,1)
(323,76,1)
(176,126,1)
(215,318,1)
(57,355,1)
(1,68,1)
(195,64,1)
(197,0,1)
(250,332,1)
(100,340,1)
(26,99,1)
(115,8,1)
(237,16,1)
(212,127,1)
(3,13,1)
(66,359,1)
(188,277,1)
(64,25,1)
(219,16,1)
(325,268,1)
(329,154,1)
(87,338,1)
(355,160,1)
(13,94,1)
(223,105,1)
(16,347,1)
(352,136,1)
(234,9,1)
(287,278,1)
(148,312,1)
(273,19,1)
(129,204,1)
(284,17,1)
(328,140,1)
(223,167,1)
(52,290,1)
(228,131,1)
(222,299,1)
(317,199,1)
(342,123,1)
(34,361,1)
(35,2,1)
(82,28,1)
(161,18,1)
(145,5,1)
(52,359,1)
(170,276,1)
(274,161,1)
(149,26,1)
(10,293,1)
(167,105,1)
(136,237,1)
(224,336,1)
(339,88,1)
(22,100,1)
(52,129,1)
(57,72,1)
(342,117,1)
(290,202,1)
(316,294,1)
(161,43,1)
(85,43,1)
(17,49,1)
(60,86,1)
(110,225,1)
(251,20,1)
(40,340,1)
(154,202,1)
(284,359,1)
(260,191,1)
(122,261,1)
(138,300,1)
(88,129,1)
(107,141,1)
(258,76,1)
(29,146,1)
(336,296,1)
(69,335,1)
(20,162,1)
(71,10,1)
(194,202,1)
(257,200,1)
(186,36,1)
(60,359,1)
(342,122,1)
(180,221,1)
(306,338,1)
(315,254,1)
(169,44,1)
(232,202,1)
(73,155,1)
(72,355,1)
(102,224,1)
(8,202,1)
(214,296,1)
(330,28,1)
(342,125,1)
(139,359,1)
(238,34,1)
(200,341,1)
(137,144,1)
(33,294,1)
(278,77,1)
(219,289,1)
(124,138,1)
(108,306,1)
(358,37,1)
(342,82,1)
(271,280,1)
(232,195,1)
(162,60,1)
(349,202,1)
(187,258,1)
(223,308,1)
(27,352,1)
(160,190,1)
(335,292,1)
(351,119,1)
(347,3,1)
(71,6,1)
(233,225,1)
(191,91,1)
(24,276,1)
(287,202,1)
(3,343,1)
(333,316,1)
(139,74,1)
(291,293,1)
(106,94,1)
(305,306,1)
(242,20,1)
(288,350,1)
(331,223,1)
(2,202,1)
(189,211,1)
(135,185,1)
(270,218,1)
(353,331,1)
(337,250,1)
(26,238,1)
(176,359,1)
(221,69,1)
(247,119,1)
(312,194,1)
(239,353,1)
(124,98,1)
(277,11,1)
(334,320,1)
(235,212,1)
(305,251,1)
(44,66,1)
(104,182,1)
(71,341,1)
(347,58,1)
(295,196,1)
(343,13,1)
(146,314,1)
(76,124,1)
(9,250,1)
(98,80,1)
(332,93,1)
(2,230,1)
(356,244,1)
(306,35,1)
(296,90,1)
(350,137,2)
(274,166,2)
(78,276,2)
(45,223,2)
(45,155,2)
(129,276,2)
(179,166,2)
(3,13,2)
(254,276,2)
(19,276,2)
(333,316,2)
(162,237,2)
(70,237,2)
(210,276,2)
(106,223,2)
(277,11,2)
(94,155,2)
(187,323,2)
(71,233,2)
(319,299,2)
(43,166,2)
(344,150,2)
(148,312,2)
(330,28,2)
(153,359,2)
(305,351,2)
(271,286,2)
(200,166,2)
(342,67,2)
(52,6,2)
(124,344,2)
(5,240,2)
(117,5,2)
(143,359,2)
(164,28,2)
(346,223,2)
(232,6,2)
(235,155,2)
(305,2,2)
(24,276,2)
(233,225,2)
(352,237,2)
(58,107,2)
(277,6,2)
(62,223,2)
(0,237,2)
(340,237,2)
(116,166,2)
(212,223,2)
(177,202,2)
(83,166,2)
(245,240,2)
(203,232,2)
(201,166,2)
(351,119,2)
(75,276,2)
(107,155,2)
(250,166,2)
(20,237,2)
(219,166,2)
(324,166,2)
(131,155,2)
(228,155,2)
(272,28,2)
(124,138,2)
(98,80,2)
(149,166,2)
(97,293,2)
(71,57,2)
(298,359,2)
(16,155,2)
(127,155,2)
(214,276,2)
(209,166,2)
(347,155,2)
(67,28,2)
(84,203,2)
(299,237,2)
(34,359,2)
(61,223,2)
(195,137,2)
(215,223,2)
(146,202,2)
(169,66,2)
(119,143,2)
(309,166,2)
(335,223,2)
(13,223,2)
(94,223,2)
(267,223,2)
(265,359,2)
(145,203,2)
(136,237,2)
(27,237,2)
(238,166,2)
(138,276,2)
(260,276,2)
(11,338,2)
(148,276,2)
(93,359,2)
(52,290,2)
(299,305,2)
(342,322,2)
(347,3,2)
(232,202,2)
(61,169,2)
(123,203,2)
(269,276,2)
(32,202,2)
(82,166,2)
(312,276,2)
(244,223,2)
(83,359,2)
(353,223,2)
(65,276,2)
(13,94,2)
(71,166,2)
(1,53,2)
(319,358,2)
(337,166,2)
(331,223,2)
(49,237,2)
(154,202,2)
(347,356,2)
(125,316,2)
(292,223,2)
(143,237,2)
(132,276,2)
(318,155,2)
(26,238,2)
(199,81,2)
(64,137,2)
(182,221,2)
(310,202,2)
(171,96,2)
(275,202,2)
(222,276,2)
(173,276,2)
(225,83,2)
(163,286,2)
(80,132,2)
(127,202,2)
(342,187,2)
(38,276,2)
(8,202,2)
(305,22,2)
(16,347,2)
(26,166,2)
(58,155,2)
(198,276,2)
(192,104,2)
(268,166,2)
(314,203,2)
(252,276,2)
(237,223,2)
(305,237,2)
(347,55,2)
(277,55,2)
(66,359,2)
(205,166,2)
(250,93,2)
(58,223,2)
(277,349,2)
(20,60,2)
(13,155,2)
(112,166,2)
(90,276,2)
(191,91,2)
(342,330,2)
(336,296,2)
(129,222,2)
(43,8,2)
(8,166,2)
(104,221,2)
(280,286,2)
(338,311,2)
(305,306,2)
(106,155,2)
(288,15,2)
(227,280,2)
(225,166,2)
(240,286,2)
(343,155,2)
(88,276,2)
(239,223,2)
(260,191,2)
(146,203,2)
(259,237,2)
(320,276,2)
(113,166,2)
(117,28,2)
(96,276,2)
(170,276,2)
(194,202,2)
(230,237,2)
(126,223,2)
(127,223,2)
(147,223,2)
(122,316,2)
(141,155,2)
(266,221,2)
(327,155,2)
(17,237,2)
(236,166,2)
(166,16,2)
(342,123,2)
(15,227,2)
(355,160,2)
(124,334,2)
(227,53,2)
(342,125,2)
(251,237,2)
(340,359,2)
(145,240,2)
(323,276,2)
(52,129,2)
(102,336,2)
(124,98,2)
(115,166,2)
(18,166,2)
(109,223,2)
(158,153,2)
(158,276,2)
(175,222,2)
(320,298,2)
(35,237,2)
(100,237,2)
(73,223,2)
(223,68,2)
(100,340,2)
(289,166,2)
(96,158,2)
(60,237,2)
(22,237,2)
(177,223,2)
(327,223,2)
(332,166,2)
(283,310,2)
(258,76,2)
(82,28,2)
(285,276,2)
(77,276,2)
(229,276,2)
(258,323,2)
(223,308,2)
(37,286,2)
(247,237,2)
(7,276,2)
(196,237,2)
(315,276,2)
(325,166,2)
(347,58,2)
(316,166,2)
(221,223,2)
(169,155,2)
(334,276,2)
(261,316,2)
(107,223,2)
(124,260,2)
(108,237,2)
(60,359,2)
(117,203,2)
(4,223,2)
(290,276,2)
(313,166,2)
(342,164,2)
(220,276,2)
(342,82,2)
(52,135,2)
(91,276,2)
(342,282,2)
(48,276,2)
(284,237,2)
(276,358,2)
(52,87,2)
(231,166,2)
(253,223,2)
(132,359,2)
(360,203,2)
(356,223,2)
(122,28,2)
(69,223,2)
(294,166,2)
(103,166,2)
(154,276,2)
(59,276,2)
(153,276,2)
(349,202,2)
(341,166,2)
(92,276,2)
(296,359,2)
(292,1,2)
(273,276,2)
(329,276,2)
(160,359,2)
(150,202,2)
(257,166,2)
(33,294,2)
(173,299,2)
(52,55,2)
(87,338,2)
(61,155,2)
(84,240,2)
(180,221,2)
(203,137,2)
(51,237,2)
(343,223,2)
(306,237,2)
(279,155,2)
(215,155,2)
(102,276,2)
(318,223,2)
(347,61,2)
(57,166,2)
(244,155,2)
(161,166,2)
(42,166,2)
(277,166,2)
(228,292,2)
(56,237,2)
(71,9,2)
(133,276,2)
(244,176,2)
(330,137,2)
(304,29,2)
(249,237,2)
(107,359,2)
(358,286,2)
(150,276,2)
(342,272,2)
(156,166,2)
(46,276,2)
(93,166,2)
(1,109,2)
(238,34,2)
(277,116,2)
(358,299,2)
(262,223,2)
(130,166,2)
(76,276,2)
(63,276,2)
(339,276,2)
(21,276,2)
(227,286,2)
(291,293,2)
(235,223,2)
(67,221,2)
(248,166,2)
(272,104,2)
(355,166,2)
(76,124,2)
(98,276,2)
(295,284,2)
(322,276,2)
(222,299,2)
(5,203,2)
(85,166,2)
(161,43,2)
(304,203,2)
(176,359,2)
(30,358,2)
(221,292,2)
(362,276,2)
(44,155,2)
(194,276,2)
(126,155,2)
(256,237,2)
(290,202,2)
(287,202,2)
(293,166,2)
(248,202,2)
(294,71,2)
(87,276,2)
(11,166,2)
(40,237,2)
(301,166,2)
(351,237,2)
(71,6,2)
(52,276,2)
(135,287,2)
(91,359,2)
(144,240,2)
(176,155,2)
(34,166,2)
(264,276,2)
(356,244,2)
(147,155,2)
(311,283,2)
(52,154,2)
(172,166,2)
(116,202,2)
(139,359,2)
(71,10,2)
(296,276,2)
(282,28,2)
(207,323,2)
(140,223,2)
(16,223,2)
(328,223,2)
(349,166,2)
(137,240,2)
(186,223,2)
(94,359,2)
(2,202,2)
(123,28,2)
(216,276,2)
(306,338,2)
(227,359,2)
(119,237,2)
(89,276,2)
(176,223,2)
(141,223,2)
(22,100,2)
(312,194,2)
(2,237,2)
(300,96,2)
(159,276,2)
(344,276,2)
(166,237,2)
(276,319,2)
(29,203,2)
(305,295,2)
(44,223,2)
(357,203,2)
(204,222,2)
(36,223,2)
(185,276,2)
(302,358,2)
(71,341,2)
(322,28,2)
(73,155,2)
(342,117,2)
(286,237,2)
(284,359,2)
(187,28,2)
(282,323,2)
(124,6,2)
(109,177,2)
(341,248,2)
(138,96,2)
(232,359,2)
(152,166,2)
(308,139,2)
(33,316,2)
(211,276,2)
(181,166,2)
(99,166,2)
(297,276,2)
(66,223,2)
(168,223,2)
(110,166,2)
(361,166,2)
(124,276,2)
(135,276,2)
(1,223,2)
(288,137,2)
(298,276,2)
(360,240,2)
(164,155,2)
(237,155,2)
(142,203,2)
(86,237,2)
(9,250,2)
(268,265,2)
(206,166,2)
(267,155,2)
(117,240,2)
(276,286,2)
(10,166,2)
(303,276,2)
(275,223,2)
(155,104,2)
(125,28,2)
(52,38,2)
(295,237,2)
(208,286,2)
(52,359,2)
(38,157,2)
(1,68,2)
(356,155,2)
(66,155,2)
(15,286,2)
(183,155,2)
(28,199,2)
(167,105,2)
(293,268,2)
(233,166,2)
(118,286,2)
(243,286,2)
(305,157,2)
(234,166,2)
(104,292,2)
(280,32,2)
(57,355,2)
(47,166,2)
(334,320,2)
(111,276,2)
(169,223,2)
(188,166,2)
(219,16,2)
(29,146,2)
(241,276,2)
(224,276,2)
(347,223,2)
(265,166,2)
(197,237,2)
(226,155,2)
(242,237,2)
(278,276,2)
(190,166,2)
(279,223,2)
(32,286,2)
(328,155,2)
(3,223,2)
(263,323,2)
(3,155,2)
(321,276,2)
(1,6,2)
(345,166,2)
(251,20,2)
(281,276,2)
(305,251,2)
(342,122,2)
(287,276,2)
(10,293,2)
(191,276,2)
(336,276,2)
(212,155,2)
(1,239,2)
(80,276,2)
(232,137,2)
(137,15,2)
(79,276,2)
(124,102,2)
(183,223,2)
(71,26,2)
(347,127,2)
(9,166,2)
(226,223,2)
(140,155,2)
(189,276,2)
(25,137,2)
(72,166,2)
(160,166,2)
(184,286,2)
(1,308,2)
(1,275,2)
(277,359,2)
-----------------------------------
(0,message)
(1,reply_slot_new(&slot, &receiver->replies, sender_replies,\n\\n                                   receiver->user, sender_user, sender_id, serial)
(2,receiver->seclabel)
(3,message->metadata.fields.path)
(4,receiver)
(5,slot = NULL)
(6,uint64_t sender_id)
(7,message)
(8,receiver->bus)
(9,message->metadata.fields.interface)
(10,message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal")
(11,&receiver_names)
(12,)
(13,message->metadata.fields)
(14,serial)
(15,r = connection_queue(&receiver->connection, sender_user, message)
(16,r = policy_snapshot_check_receive(receiver->policy,\n\\n                                          sender_names,\n\\n                                          message->metadata.fields.interface,\n\\n                                          message->metadata.fields.member,\n\\n                                          message->metadata.fields.path,\n\\n                                          message->header->type)
(17,header)
(18,0)
(19,"A security policy denied :1.%llu to send %s %s:%s.%s to %s.")
(20,message->metadata.fields)
(21,bus)
(22,message->metadata.fields.member)
(23,if (r)
(24,r)
(25,receiver)
(26,message->metadata.fields.member)
(27,receiver)
(28,(reply_slot_freep)
(29,&receiver->connection)
(30,r)
(31,receiver_names)
(32,receiver->connection)
(33,error_fold(r)
(34,message->metadata)
(35,receiver_names)
(36,sender_user)
(37,POLICY_E_ACCESS_DENIED)
(38,sender_policy->seclabel)
(39,if (!peer_message_is_solicited(receiver, sender_id, message)
(40,fields)
(41,if (r == POLICY_E_ACCESS_DENIED)
(42,sender_id)
(43,receiver->bus->log)
(44,fields)
(45,message)
(46,message)
(47,message)
(48,bus)
(49,message)
(50,if (r == REPLY_E_EXISTS)
(51,r)
(52,bus_log_append_policy_send(receiver->bus,\n\\n                                                   (r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX)
(53,User *sender_user)
(54,)
(55,NameSet *sender_names)
(56,metadata)
(57,message->metadata.fields.path)
(58,message->header->type)
(59,message)
(60,message->metadata)
(61,message->metadata.fields.member)
(62,user)
(63,metadata)
(64,sender_id)
(65,fields)
(66,message->metadata)
(67,return PEER_E_EXPECTED_REPLY_EXISTS;)
(68,ReplyOwner *sender_replies)
(69,REPLY_E_EXISTS)
(70,member)
(71,log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",\n\\n                                        message->metadata.fields.destination,\n\\n                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",\n\\n                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,\n\\n                                        sender_id)
(72,path)
(73,r)
(74,message)
(75,type)
(76,r = log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",\n\\n                                        sender_id,\n\\n                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",\n\\n                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,\n\\n                                        message->metadata.fields.destination)
(77,receiver)
(78,receiver)
(79,receiver_names)
(80,message->metadata.fields)
(81,reply_slot_freep)
(82,return error_fold(r)
(83,message->metadata)
(84,NULL)
(85,LOG_WARNING)
(86,metadata)
(87,&receiver_names)
(88,sender_id)
(89,LOG_WARNING)
(90,metadata)
(91,message->metadata)
(92,sender_policy)
(93,message->metadata)
(94,message->metadata)
(95,if (sender_replies && serial)
(96,message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL)
(97,"signal")
(98,message->metadata.fields.path)
(99,member)
(100,message->metadata.fields)
(101,owned_names)
(102,message->metadata.fields.member)
(103,bus)
(104,r == REPLY_E_QUOTA)
(105,sender_replies)
(106,fields)
(107,message->header)
(108,message)
(109,&receiver->replies)
(110,destination)
(111,seclabel)
(112,fields)
(113,fields)
(114,)
(115,log)
(116,receiver->id)
(117,return 0;)
(118,r)
(119,message->metadata.fields)
(120,)
(121,r)
(122,return PEER_E_RECEIVE_DENIED;)
(123,return PEER_E_QUOTA;)
(124,log_commitf(receiver->bus->log, "A security policy denied :1.%llu to send %s %s:%s.%s to %s.",\n\\n                                        sender_id,\n\\n                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",\n\\n                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,\n\\n                                        message->metadata.fields.destination)
(125,return error_fold(r)
(126,metadata)
(127,receiver->policy)
(128,)
(129,r == POLICY_E_ACCESS_DENIED ? BUS_LOG_POLICY_TYPE_INTERNAL : BUS_LOG_POLICY_TYPE_SELINUX)
(130,bus)
(131,r)
(132,message->metadata)
(133,bus)
(134,)
(135,receiver->policy->seclabel)
(136,r)
(137,r == CONNECTION_E_QUOTA)
(138,message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal")
(139,message_read_serial(message)
(140,message)
(141,header)
(142,PEER_E_QUOTA)
(143,message->metadata)
(144,CONNECTION_E_QUOTA)
(145,0)
(146,receiver->connection)
(147,type)
(148,log_append_here(receiver->bus->log, LOG_WARNING, 0)
(149,sender_id)
(150,receiver->bus)
(151,if (r == CONNECTION_E_QUOTA)
(152,message)
(153,message->header)
(154,receiver->id)
(155,r)
(156,id)
(157,PolicySnapshot *sender_policy)
(158,message->header->type)
(159,header)
(160,message->metadata)
(161,log_append_here(receiver->bus->log, LOG_WARNING, 0)
(162,fields)
(163,r)
(164,return error_fold(r)
(165,receiver)
(166,r == POLICY_E_ACCESS_DENIED)
(167,serial)
(168,sender_replies)
(169,message->metadata.fields)
(170,receiver)
(171,"signal")
(172,header)
(173,error_fold(r)
(174,receiver_names)
(175,BUS_LOG_POLICY_TYPE_INTERNAL)
(176,message->metadata)
(177,receiver->replies)
(178,)
(179,message)
(180,r)
(181,receiver)
(182,REPLY_E_QUOTA)
(183,member)
(184,message)
(185,seclabel)
(186,sender_id)
(187,return error_fold(r)
(188,r)
(189,metadata)
(190,metadata)
(191,message->metadata.fields)
(192,PEER_E_QUOTA)
(193,)
(194,receiver->bus)
(195,message)
(196,type)
(197,metadata)
(198,destination)
(199,(reply_slot_freep)
(200,"A security policy denied %s to receive %s %s:%s.%s from :1.%llu.")
(201,message)
(202,Peer *receiver)
(203,!peer_message_is_solicited(receiver, sender_id, message)
(204,BUS_LOG_POLICY_TYPE_SELINUX)
(205,type)
(206,metadata)
(207,PEER_E_SEND_DENIED)
(208,receiver)
(209,receiver)
(210,log)
(211,message)
(212,sender_names)
(213,)
(214,fields)
(215,policy)
(216,POLICY_E_ACCESS_DENIED)
(217,if (r)
(218,NULL)
(219,error_fold(r)
(220,DBUS_MESSAGE_TYPE_METHOD_CALL)
(221,r == REPLY_E_EXISTS)
(222,r == POLICY_E_ACCESS_DENIED)
(223,sender_replies && serial)
(224,member)
(225,message->metadata.fields)
(226,metadata)
(227,connection_queue(&receiver->connection, sender_user, message)
(228,error_fold(r)
(229,r)
(230,seclabel)
(231,receiver_names)
(232,peer_message_is_solicited(receiver, sender_id, message)
(233,message->metadata.fields.destination)
(234,message)
(235,message)
(236,fields)
(237,r)
(238,message->metadata.fields)
(239,&slot)
(240,r)
(241,r)
(242,interface)
(243,connection)
(244,message->metadata.fields)
(245,r)
(246,ReplySlot)
(247,path)
(248,receiver->bus)
(249,POLICY_E_ACCESS_DENIED)
(250,message->metadata.fields)
(251,message->metadata.fields.interface)
(252,0)
(253,serial)
(254,message)
(255,if (r)
(256,fields)
(257,message)
(258,error_fold(r)
(259,message)
(260,message->metadata.fields.interface)
(261,PEER_E_RECEIVE_DENIED)
(262,replies)
(263,r)
(264,interface)
(265,message->header)
(266,PEER_E_EXPECTED_REPLY_EXISTS)
(267,message)
(268,message->header->type)
(269,fields)
(270,(reply_slot_freep)
(271,sender_user)
(272,return PEER_E_QUOTA;)
(273,sender_id)
(274,receiver)
(275,receiver->user)
(276,r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)
(277,bus_log_append_policy_receive(receiver->bus, receiver->id, sender_id, sender_names, &receiver_names, message)
(278,policy)
(279,fields)
(280,&receiver->connection)
(281,receiver)
(282,return PEER_E_SEND_DENIED;)
(283,&receiver->owned_names)
(284,message->header)
(285,path)
(286,r)
(287,receiver->policy)
(288,error_fold(r)
(289,r)
(290,receiver->bus)
(291,"method call")
(292,r = reply_slot_new(&slot, &receiver->replies, sender_replies,\n\\n                                   receiver->user, sender_user, sender_id, serial)
(293,message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL)
(294,r = log_commitf(receiver->bus->log, "A security policy denied %s to receive %s %s:%s.%s from :1.%llu.",\n\\n                                        message->metadata.fields.destination,\n\\n                                        message->header->type == DBUS_MESSAGE_TYPE_METHOD_CALL ? "method call" : "signal",\n\\n                                        message->metadata.fields.path, message->metadata.fields.interface, message->metadata.fields.member,\n\\n                                        sender_id)
(295,message->header->type)
(296,message->metadata)
(297,log)
(298,message->metadata)
(299,r = policy_snapshot_check_send(sender_policy,\n\\n                                       receiver->seclabel,\n\\n                                       &receiver_names,\n\\n                                       message->metadata.fields.interface,\n\\n                                       message->metadata.fields.member,\n\\n                                       message->metadata.fields.path,\n\\n                                       message->header->type)
(300,"method call")
(301,receiver)
(302,POLICY_E_SELINUX_ACCESS_DENIED)
(303,fields)
(304,connection_shutdown(&receiver->connection)
(305,policy_snapshot_check_send(sender_policy,\n\\n                                       receiver->seclabel,\n\\n                                       &receiver_names,\n\\n                                       message->metadata.fields.interface,\n\\n                                       message->metadata.fields.member,\n\\n                                       message->metadata.fields.path,\n\\n                                       message->header->type)
(306,&receiver_names)
(307,serial)
(308,serial = message_read_serial(message)
(309,log)
(310,receiver->owned_names)
(311,NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
(312,receiver->bus->log)
(313,metadata)
(314,connection)
(315,metadata)
(316,r)
(317,slot)
(318,receiver)
(319,r == POLICY_E_SELINUX_ACCESS_DENIED)
(320,message->metadata.fields)
(321,id)
(322,return error_fold(r)
(323,r)
(324,bus)
(325,DBUS_MESSAGE_TYPE_METHOD_CALL)
(326,if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)
(327,interface)
(328,metadata)
(329,sender_names)
(330,return error_fold(r)
(331,r)
(332,fields)
(333,r)
(334,message->metadata.fields.destination)
(335,r)
(336,message->metadata.fields)
(337,interface)
(338,receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
(339,receiver)
(340,message->metadata)
(341,receiver->bus->log)
(342,RET)
(343,path)
(344,receiver->bus->log)
(345,sender_names)
(346,receiver)
(347,policy_snapshot_check_receive(receiver->policy,\n\\n                                          sender_names,\n\\n                                          message->metadata.fields.interface,\n\\n                                          message->metadata.fields.member,\n\\n                                          message->metadata.fields.path,\n\\n                                          message->header->type)
(348,if (r)
(349,receiver->bus)
(350,r)
(351,message->metadata.fields.path)
(352,sender_policy)
(353,slot)
(354,if (r)
(355,message->metadata.fields)
(356,message->metadata.fields.interface)
(357,receiver)
(358,r == POLICY_E_ACCESS_DENIED)
(359,Message *message)
(360,slot)
(361,metadata)
(362,message)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^