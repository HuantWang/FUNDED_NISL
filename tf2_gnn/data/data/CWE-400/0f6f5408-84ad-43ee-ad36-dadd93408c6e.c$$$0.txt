-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_15_bad()
{
    int64_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
73,74
74,75
74,76
75,76
79,80
79,81
81,82
81,83
81,84
81,85
81,86
81,87
82,83
87,88
88,89
88,90
89,90
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,37,41,42,46,48,53,55,60,61,62,66,69,70,71,72,76,77,78,80,83,84,85,86,90,91,92
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_15_bad(){    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__int64_t_calloc_15_bad()
CWE401_Memory_Leak__int64_t_calloc_15_bad
{    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(11,1,0)
(32,28,0)
(15,7,0)
(2,28,0)
(15,27,0)
(20,45,0)
(5,28,0)
(16,27,0)
(12,34,0)
(14,28,0)
(3,4,0)
(9,28,0)
(27,16,0)
(24,20,0)
(23,28,0)
(16,28,0)
(37,16,0)
(27,0,0)
(36,28,0)
(41,7,0)
(38,44,0)
(7,15,0)
(22,35,0)
(33,15,0)
(1,35,0)
(21,20,0)
(29,9,0)
(30,35,0)
(0,27,0)
(2,4,0)
(25,4,0)
(39,28,0)
(27,15,0)
(19,34,0)
(40,35,0)
(44,16,0)
(12,18,0)
(4,2,0)
(17,45,0)
(42,44,0)
(8,45,0)
(4,16,0)
(34,12,0)
(10,35,0)
(31,45,0)
(1,11,1)
(44,16,1)
(3,25,1)
(26,36,1)
(30,26,1)
(7,41,1)
(32,12,1)
(9,29,1)
(38,42,1)
(27,15,1)
(39,2,1)
(13,30,1)
(34,19,1)
(2,4,1)
(4,16,1)
(29,43,1)
(20,21,1)
(42,16,1)
(13,22,1)
(44,38,1)
(36,9,1)
(43,20,1)
(41,33,1)
(15,7,1)
(11,26,1)
(32,44,1)
(19,44,1)
(26,39,1)
(33,37,1)
(21,24,1)
(37,43,1)
(22,1,1)
(16,27,1)
(25,32,1)
(4,3,1)
(12,34,1)
(27,0,1)
(33,43,2)
(29,43,2)
(41,43,2)
(7,43,2)
(42,43,2)
(1,26,2)
(44,43,2)
(44,16,2)
(25,43,2)
(9,43,2)
(16,43,2)
(37,43,2)
(22,26,2)
(38,43,2)
(11,26,2)
(15,43,2)
(2,4,2)
(27,15,2)
(19,44,2)
(27,0,2)
(32,43,2)
(2,43,2)
(12,44,2)
(27,43,2)
(39,43,2)
(16,27,2)
(12,34,2)
(4,16,2)
(15,7,2)
(34,44,2)
(30,26,2)
(3,43,2)
(36,43,2)
(4,43,2)
-----------------------------------
(0,int64_t *)
(1,printLine("Benign, fixed string")
(2,printLongLongLine(data[0])
(3,0)
(4,data[0])
(5,case 6:)
(6, sizeof(int64_t)
(7,sizeof(int64_t)
(8,switch(7)
(9,printLine("Benign, fixed string")
(10,case 7:)
(11,"Benign, fixed string")
(12,exit(-1)
(13,RET)
(14,default:)
(15,calloc(100, sizeof(int64_t)
(16,data = (int64_t *)
(17,switch(6)
(18,)
(19,1)
(20,data = NULL)
(21,NULL)
(22,break;)
(23,if (data == NULL)
(24,data)
(25,data)
(26,7)
(27,(int64_t *)
(28,)
(29,"Benign, fixed string")
(30,break;)
(31,data)
(32,L)
(33,100)
(34,-1)
(35,)
(36,break;)
(37,data)
(38,NULL)
(39,break;)
(40,default:)
(41,int64_t)
(42,data)
(43,6)
(44,data == NULL)
(45,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^