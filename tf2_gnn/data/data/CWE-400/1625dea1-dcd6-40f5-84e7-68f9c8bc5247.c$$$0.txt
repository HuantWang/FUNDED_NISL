-----label-----
1
-----code-----
static uint32_t
rack_proc_sack_blk(struct tcpcb *tp, struct tcp_rack *rack, struct sackblk *sack,
    struct tcpopt *to, struct rack_sendmap **prsm, uint32_t cts)
{
	int32_t idx;
	int32_t times = 0;
	uint32_t start, end, changed = 0;
	struct rack_sendmap *rsm, *nrsm;
	int32_t used_ref = 1;

	start = sack->start;
	end = sack->end;
	rsm = *prsm;
	if (rsm && SEQ_LT(start, rsm->r_start)) {
		TAILQ_FOREACH_REVERSE_FROM(rsm, &rack->r_ctl.rc_map, rack_head, r_next) {
			if (SEQ_GEQ(start, rsm->r_start) &&
			    SEQ_LT(start, rsm->r_end)) {
				goto do_rest_ofb;
			}
		}
	}
	if (rsm == NULL) {
start_at_beginning:
		rsm = NULL;
		used_ref = 0;
	}
	/* First lets locate the block where this guy is */
	TAILQ_FOREACH_FROM(rsm, &rack->r_ctl.rc_map, r_next) {
		if (SEQ_GEQ(start, rsm->r_start) &&
		    SEQ_LT(start, rsm->r_end)) {
			break;
		}
	}
do_rest_ofb:
	if (rsm == NULL) {
		/*
		 * This happens when we get duplicate sack blocks with the
		 * same end. For example SACK 4: 100 SACK 3: 100 The sort
		 * will not change there location so we would just start at
		 * the end of the first one and get lost.
		 */
		if (tp->t_flags & TF_SENTFIN) {
			/*
			 * Check to see if we have not logged the FIN that
			 * went out.
			 */
			nrsm = TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next);
			if (nrsm && (nrsm->r_end + 1) == tp->snd_max) {
				/*
				 * Ok we did not get the FIN logged.
				 */
				nrsm->r_end++;
				rsm = nrsm;
				goto do_rest_ofb;
			}
		}
		if (times == 1) {
#ifdef INVARIANTS
			panic("tp:%p rack:%p sack:%p to:%p prsm:%p",
			    tp, rack, sack, to, prsm);
#else
			goto out;
#endif
		}
		times++;
		counter_u64_add(rack_sack_proc_restart, 1);
		goto start_at_beginning;
	}
	/* Ok we have an ACK for some piece of rsm */
	if (rsm->r_start != start) {
		/*
		 * Need to split this in two pieces the before and after.
		 */
		nrsm = rack_alloc(rack);
		if (nrsm == NULL) {
			/*
			 * failed XXXrrs what can we do but loose the sack
			 * info?
			 */
			goto out;
		}
		nrsm->r_start = start;
		nrsm->r_rtr_bytes = 0;
		nrsm->r_end = rsm->r_end;
		nrsm->r_rtr_cnt = rsm->r_rtr_cnt;
		nrsm->r_flags = rsm->r_flags;
		nrsm->r_sndcnt = rsm->r_sndcnt;
		for (idx = 0; idx < nrsm->r_rtr_cnt; idx++) {
			nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];
		}
		rsm->r_end = nrsm->r_start;
		TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next);
		if (rsm->r_in_tmap) {
			TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);
			nrsm->r_in_tmap = 1;
		}
		rsm->r_flags &= (~RACK_HAS_FIN);
		rsm = nrsm;
	}
	if (SEQ_GEQ(end, rsm->r_end)) {
		/*
		 * The end of this block is either beyond this guy or right
		 * at this guy.
		 */

		if ((rsm->r_flags & RACK_ACKED) == 0) {
			rack_update_rtt(tp, rack, rsm, to, cts, SACKED);
			changed += (rsm->r_end - rsm->r_start);
			rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);
			rack_log_sack_passed(tp, rack, rsm);
			/* Is Reordering occuring? */
			if (rsm->r_flags & RACK_SACK_PASSED) {
				counter_u64_add(rack_reorder_seen, 1);
				rack->r_ctl.rc_reorder_ts = cts;
			}
			rsm->r_flags |= RACK_ACKED;
			rsm->r_flags &= ~RACK_TLP;
			if (rsm->r_in_tmap) {
				TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);
				rsm->r_in_tmap = 0;
			}
		}
		if (end == rsm->r_end) {
			/* This block only - done */
			goto out;
		}
		/* There is more not coverend by this rsm move on */
		start = rsm->r_end;
		nrsm = TAILQ_NEXT(rsm, r_next);
		rsm = nrsm;
		times = 0;
		goto do_rest_ofb;
	}
	/* Ok we need to split off this one at the tail */
	nrsm = rack_alloc(rack);
	if (nrsm == NULL) {
		/* failed rrs what can we do but loose the sack info? */
		goto out;
	}
	/* Clone it */
	nrsm->r_start = end;
	nrsm->r_end = rsm->r_end;
	nrsm->r_rtr_bytes = 0;
	nrsm->r_rtr_cnt = rsm->r_rtr_cnt;
	nrsm->r_flags = rsm->r_flags;
	nrsm->r_sndcnt = rsm->r_sndcnt;
	for (idx = 0; idx < nrsm->r_rtr_cnt; idx++) {
		nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];
	}
	/* The sack block does not cover this guy fully */
	rsm->r_flags &= (~RACK_HAS_FIN);
	rsm->r_end = end;
	TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next);
	if (rsm->r_in_tmap) {
		TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);
		nrsm->r_in_tmap = 1;
	}
	if (rsm->r_flags & RACK_ACKED) {
		/* Been here done that */
		goto out;
	}
	rack_update_rtt(tp, rack, rsm, to, cts, SACKED);
	changed += (rsm->r_end - rsm->r_start);
	rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);
	rack_log_sack_passed(tp, rack, rsm);
	/* Is Reordering occuring? */
	if (rsm->r_flags & RACK_SACK_PASSED) {
		counter_u64_add(rack_reorder_seen, 1);
		rack->r_ctl.rc_reorder_ts = cts;
	}
	rsm->r_flags |= RACK_ACKED;
	rsm->r_flags &= ~RACK_TLP;
	if (rsm->r_in_tmap) {
		TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);
		rsm->r_in_tmap = 0;
	}
out:
	if (used_ref == 0) {
		counter_u64_add(rack_sack_proc_all, 1);
	} else {
		counter_u64_add(rack_sack_proc_short, 1);
	}
	/* Save off where we last were */
	if (rsm)
		rack->r_ctl.rc_sacklast = TAILQ_NEXT(rsm, r_next);
	else
		rack->r_ctl.rc_sacklast = NULL;
	*prsm = rsm;
	return (changed);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
4,11
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
15,17
18,19
18,20
19,20
21,22
21,23
24,25
24,26
25,26
27,28
27,29
30,31
30,32
31,32
33,34
33,35
33,36
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
42,47
42,48
42,49
42,50
42,51
42,52
42,53
42,54
42,55
42,56
42,57
42,58
42,59
42,60
42,61
42,62
42,63
42,64
42,65
42,66
42,67
42,68
42,69
42,70
42,71
42,72
42,73
42,74
42,75
42,76
42,77
42,78
42,79
42,80
42,81
42,82
42,83
42,84
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
63,64
65,66
65,67
67,68
69,70
70,71
70,72
70,73
71,72
73,74
73,75
76,77
76,78
79,80
80,81
80,82
81,82
83,84
83,85
85,86
87,88
88,89
88,90
89,90
91,92
91,93
92,93
95,96
96,97
96,98
97,98
99,100
99,101
100,101
103,104
104,105
104,106
105,106
107,108
108,109
110,111
110,112
111,112
111,113
112,113
114,115
114,116
114,117
115,116
117,118
119,120
119,121
120,121
123,124
123,125
123,126
124,125
125,126
125,127
125,128
125,129
125,130
126,127
128,129
130,131
131,132
131,133
132,133
132,134
133,134
137,138
139,140
141,142
142,143
143,144
143,145
144,145
144,146
145,146
145,147
145,148
146,147
148,149
150,151
150,152
151,152
154,155
154,156
154,157
155,156
157,158
159,160
159,161
160,161
163,164
164,165
166,167
166,168
167,168
167,169
168,169
170,171
172,173
172,174
173,174
173,175
175,176
176,177
176,178
177,178
179,180
181,182
182,183
182,184
183,184
186,187
187,188
187,189
187,190
187,191
188,189
190,191
192,193
193,194
193,195
194,195
194,196
195,196
199,200
201,202
202,203
203,204
203,205
204,205
204,206
205,206
205,207
205,208
206,207
208,209
210,211
210,212
211,212
214,215
214,216
214,217
215,216
217,218
219,220
219,221
220,221
223,224
225,226
225,227
227,228
227,229
228,229
228,230
229,230
231,232
233,234
233,235
233,236
233,237
233,238
234,235
234,236
235,236
235,237
236,237
236,238
237,238
240,241
242,243
242,244
243,244
244,245
244,246
245,246
247,248
247,249
247,250
247,251
248,249
250,251
251,252
251,253
252,253
252,254
253,254
257,258
259,260
261,262
261,263
262,263
262,264
263,264
265,266
265,267
266,267
267,268
267,269
268,269
268,270
269,270
273,274
273,275
274,275
277,278
277,279
277,280
278,279
279,280
280,281
280,282
281,282
284,285
285,286
285,287
286,287
288,289
290,291
292,293
292,294
293,294
293,295
294,295
297,298
298,299
300,301
301,302
302,303
304,305
305,306
305,307
305,308
306,307
308,309
311,312
313,314
313,315
314,315
314,316
315,316
315,317
316,317
319,320
321,322
321,323
321,324
321,325
321,326
321,327
321,328
321,329
321,330
321,331
321,332
321,333
321,334
321,335
322,323
323,324
323,325
324,325
326,327
326,328
327,328
329,330
331,332
331,333
332,333
332,334
333,334
335,336
337,338
338,339
340,341
341,342
341,343
342,343
342,344
343,344
346,347
348,349
349,350
349,351
350,351
350,352
351,352
355,356
356,357
356,358
357,358
357,359
358,359
361,362
361,363
362,363
365,366
366,367
366,368
367,368
367,369
368,369
371,372
371,373
372,373
375,376
376,377
376,378
377,378
377,379
378,379
381,382
381,383
382,383
385,386
386,387
386,388
387,388
387,389
388,389
391,392
391,393
392,393
395,396
395,397
395,398
395,399
396,397
397,398
397,399
398,399
401,402
401,403
402,403
404,405
404,406
405,406
408,409
409,410
411,412
412,413
413,414
413,415
414,415
414,416
415,416
415,417
416,417
419,420
421,422
421,423
422,423
422,424
423,424
426,427
428,429
429,430
429,431
430,431
430,432
431,432
434,435
434,436
435,436
438,439
439,440
439,441
439,442
439,443
439,444
440,441
442,443
443,444
443,445
444,445
444,446
445,446
449,450
451,452
453,454
455,456
455,457
456,457
456,458
457,458
460,461
460,462
461,462
462,463
462,464
462,465
462,466
462,467
463,464
465,466
466,467
466,468
467,468
467,469
468,469
472,473
474,475
476,477
478,479
479,480
479,481
480,481
480,482
481,482
485,486
486,487
486,488
487,488
487,489
488,489
491,492
492,493
493,494
495,496
496,497
496,498
497,498
499,500
501,502
501,503
502,503
502,504
502,505
503,504
505,506
507,508
507,509
508,509
511,512
511,513
511,514
511,515
511,516
511,517
511,518
512,513
512,514
513,514
513,515
514,515
515,516
515,517
516,517
516,518
517,518
520,521
523,524
523,525
523,526
523,527
523,528
523,529
523,530
523,531
524,525
525,526
525,527
525,528
525,529
525,530
525,531
525,532
526,527
528,529
530,531
532,533
534,535
536,537
538,539
540,541
541,542
541,543
542,543
544,545
545,546
545,547
546,547
546,548
547,548
550,551
550,552
551,552
554,555
555,556
555,557
556,557
556,558
557,558
557,559
558,559
562,563
563,564
563,565
564,565
564,566
565,566
568,569
568,570
569,570
572,573
573,574
573,575
573,576
573,577
574,575
576,577
578,579
580,581
582,583
582,584
583,584
583,585
584,585
584,586
585,586
588,589
590,591
590,592
591,592
592,593
592,594
592,595
593,594
595,596
598,599
599,600
599,601
600,601
600,602
601,602
601,603
602,603
606,607
608,609
609,610
609,611
610,611
610,612
611,612
614,615
616,617
617,618
617,619
618,619
618,620
619,620
622,623
623,624
625,626
625,627
626,627
626,628
627,628
630,631
630,632
631,632
632,633
632,634
632,635
632,636
633,634
635,636
636,637
636,638
637,638
637,639
638,639
642,643
644,645
646,647
647,648
647,649
648,649
648,650
649,650
653,654
653,655
654,655
654,656
655,656
657,658
657,659
658,659
661,662
662,663
664,665
665,666
665,667
666,667
668,669
668,670
669,670
672,673
673,674
673,675
674,675
676,677
676,678
676,679
677,678
679,680
681,682
683,684
684,685
684,686
685,686
687,688
689,690
690,691
690,692
691,692
694,695
696,697
697,698
697,699
698,699
700,701
700,702
701,702
703,704
705,706
705,707
706,707
706,708
707,708
709,710
711,712
712,713
714,715
715,716
715,717
716,717
716,718
717,718
720,721
722,723
723,724
723,725
724,725
724,726
725,726
728,729
728,730
729,730
732,733
733,734
733,735
734,735
734,736
735,736
739,740
740,741
740,742
741,742
741,743
742,743
745,746
745,747
746,747
749,750
750,751
750,752
751,752
751,753
752,753
755,756
755,757
756,757
759,760
760,761
760,762
761,762
761,763
762,763
765,766
765,767
766,767
769,770
769,771
769,772
769,773
770,771
771,772
771,773
772,773
775,776
775,777
776,777
778,779
778,780
779,780
782,783
783,784
785,786
786,787
787,788
787,789
788,789
788,790
789,790
789,791
790,791
793,794
795,796
795,797
796,797
796,798
797,798
800,801
802,803
803,804
803,805
804,805
804,806
805,806
808,809
809,810
810,811
812,813
813,814
813,815
814,815
814,816
815,816
818,819
820,821
821,822
821,823
821,824
821,825
821,826
822,823
824,825
825,826
825,827
826,827
826,828
827,828
831,832
833,834
835,836
837,838
837,839
838,839
838,840
839,840
842,843
842,844
843,844
844,845
844,846
844,847
844,848
844,849
845,846
847,848
848,849
848,850
849,850
849,851
850,851
854,855
856,857
858,859
860,861
861,862
861,863
862,863
862,864
863,864
867,868
867,869
868,869
868,870
869,870
869,871
870,871
873,874
875,876
876,877
878,879
879,880
879,881
879,882
879,883
879,884
879,885
879,886
880,881
882,883
884,885
886,887
888,889
890,891
892,893
894,895
895,896
895,897
896,897
898,899
899,900
899,901
900,901
900,902
901,902
904,905
904,906
905,906
908,909
909,910
909,911
910,911
910,912
911,912
911,913
912,913
916,917
917,918
917,919
918,919
918,920
919,920
922,923
922,924
923,924
926,927
927,928
927,929
927,930
927,931
928,929
930,931
932,933
934,935
936,937
936,938
937,938
937,939
938,939
938,940
939,940
942,943
944,945
944,946
945,946
946,947
946,948
946,949
947,948
949,950
952,953
953,954
953,955
954,955
954,956
955,956
955,957
956,957
960,961
962,963
963,964
963,965
964,965
964,966
965,966
968,969
970,971
971,972
971,973
972,973
972,974
973,974
976,977
977,978
979,980
979,981
980,981
980,982
981,982
984,985
984,986
985,986
986,987
986,988
986,989
986,990
987,988
989,990
990,991
990,992
991,992
991,993
992,993
996,997
998,999
1000,1001
1001,1002
1001,1003
1002,1003
1002,1004
1003,1004
1007,1008
1007,1009
1009,1010
1009,1011
1009,1012
1010,1011
1010,1012
1011,1012
1014,1015
1015,1016
1016,1017
1016,1018
1016,1019
1017,1018
1019,1020
1022,1023
1023,1024
1024,1025
1024,1026
1024,1027
1025,1026
1027,1028
1030,1031
1030,1032
1030,1033
1031,1032
1033,1034
1034,1035
1034,1036
1035,1036
1035,1037
1036,1037
1036,1038
1037,1038
1041,1042
1041,1043
1041,1044
1042,1043
1044,1045
1046,1047
1048,1049
1049,1050
1049,1051
1050,1051
1050,1052
1051,1052
1051,1053
1052,1053
1056,1057
1058,1059
1059,1060
1059,1061
1060,1061
1061,1062
1063,1064
1065,1066
1066,1067
1067,1068
-----nextToken-----
3,5,8,10,11,14,16,17,20,22,23,26,28,29,32,34,35,36,39,41,46,48,52,54,56,60,62,64,66,68,72,74,75,77,78,82,84,86,90,93,94,98,101,102,106,109,113,116,118,121,122,127,129,134,135,136,138,140,147,149,152,153,156,158,161,162,165,169,171,174,178,180,184,185,189,191,196,197,198,200,207,209,212,213,216,218,221,222,224,226,230,232,238,239,241,246,249,254,255,256,258,260,264,270,271,272,275,276,282,283,287,289,291,295,296,299,303,307,309,310,312,317,318,320,325,328,330,334,336,339,344,345,347,352,353,354,359,360,363,364,369,370,373,374,379,380,383,384,389,390,393,394,399,400,403,406,407,410,417,418,420,424,425,427,432,433,436,437,441,446,447,448,450,452,454,458,459,464,469,470,471,473,475,477,482,483,484,489,490,494,498,500,504,506,509,510,518,519,521,522,527,529,531,533,535,537,539,543,548,549,552,553,559,560,561,566,567,570,571,575,577,579,581,586,587,589,594,596,597,603,604,605,607,612,613,615,620,621,624,628,629,634,639,640,641,643,645,650,651,652,656,659,660,663,667,670,671,675,678,680,682,686,688,692,693,695,699,702,704,708,710,713,718,719,721,726,727,730,731,736,737,738,743,744,747,748,753,754,757,758,763,764,767,768,773,774,777,780,781,784,791,792,794,798,799,801,806,807,811,816,817,819,823,828,829,830,832,834,836,840,841,846,851,852,853,855,857,859,864,865,866,871,872,874,877,881,883,885,887,889,891,893,897,902,903,906,907,913,914,915,920,921,924,925,929,931,933,935,940,941,943,948,950,951,957,958,959,961,966,967,969,974,975,978,982,983,988,993,994,995,997,999,1004,1005,1006,1008,1012,1013,1018,1020,1021,1026,1028,1029,1032,1038,1039,1040,1043,1045,1047,1053,1054,1055,1057,1062,1064,1068
-----computeFrom-----
88,89
88,90
96,97
96,98
104,105
104,106
111,112
111,113
144,145
144,146
167,168
167,169
176,177
176,178
182,183
182,184
204,205
204,206
228,229
228,230
235,236
235,237
244,245
244,246
262,263
262,264
265,266
265,267
267,268
267,269
285,286
285,287
293,294
293,295
314,315
314,316
323,324
323,325
332,333
332,334
341,342
341,343
349,350
349,351
356,357
356,358
366,367
366,368
376,377
376,378
386,387
386,388
397,398
397,399
401,402
401,403
413,414
413,415
429,430
429,431
479,480
479,481
486,487
486,488
496,497
496,498
513,514
513,515
515,516
515,517
541,542
541,543
545,546
545,547
555,556
555,557
563,564
563,565
583,584
583,585
599,600
599,601
609,610
609,611
617,618
617,619
647,648
647,649
654,655
654,656
665,666
665,667
673,674
673,675
684,685
684,686
690,691
690,692
697,698
697,699
706,707
706,708
715,716
715,717
723,724
723,725
733,734
733,735
740,741
740,742
750,751
750,752
760,761
760,762
771,772
771,773
775,776
775,777
787,788
787,789
803,804
803,805
813,814
813,815
861,862
861,863
868,869
868,870
895,896
895,897
899,900
899,901
909,910
909,911
917,918
917,919
937,938
937,939
953,954
953,955
963,964
963,965
971,972
971,973
1001,1002
1001,1003
1010,1011
1010,1012
1034,1035
1034,1036
1049,1050
1049,1051
1059,1060
1059,1061
-----guardedBy-----
118,158
122,153
116,156
121,161
171,180
169,178
230,287
238,275
270,289
271,283
318,437
320,347
317,498
519,621
521,615
518,650
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;GotoStatement;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static uint32_track_proc_sack_blk(struct tcpcb *tp, struct tcp_rack *rack, struct sackblk *sack,    struct tcpopt *to, struct rack_sendmap **prsm, uint32_t cts){	int32_t idx;	int32_t times = 0;	uint32_t start, end, changed = 0;	struct rack_sendmap *rsm, *nrsm;	int32_t used_ref = 1;	start = sack->start;	end = sack->end;	rsm = *prsm;	if (rsm && SEQ_LT(start, rsm->r_start)) {		TAILQ_FOREACH_REVERSE_FROM(rsm, &rack->r_ctl.rc_map, rack_head, r_next) {			if (SEQ_GEQ(start, rsm->r_start) &&			    SEQ_LT(start, rsm->r_end)) {				goto do_rest_ofb;			}		}	}	if (rsm == NULL) {start_at_beginning:		rsm = NULL;		used_ref = 0;	}	/* First lets locate the block where this guy is */	TAILQ_FOREACH_FROM(rsm, &rack->r_ctl.rc_map, r_next) {		if (SEQ_GEQ(start, rsm->r_start) &&		    SEQ_LT(start, rsm->r_end)) {			break;		}	}do_rest_ofb:	if (rsm == NULL) {		/*		 * This happens when we get duplicate sack blocks with the		 * same end. For example SACK 4: 100 SACK 3: 100 The sort		 * will not change there location so we would just start at		 * the end of the first one and get lost.		 */		if (tp->t_flags & TF_SENTFIN) {			/*			 * Check to see if we have not logged the FIN that			 * went out.			 */			nrsm = TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next);			if (nrsm && (nrsm->r_end + 1) == tp->snd_max) {				/*				 * Ok we did not get the FIN logged.				 */				nrsm->r_end++;				rsm = nrsm;				goto do_rest_ofb;			}		}		if (times == 1) {#ifdef INVARIANTS			panic("tp:%p rack:%p sack:%p to:%p prsm:%p",			    tp, rack, sack, to, prsm);#else			goto out;#endif		}		times++;		counter_u64_add(rack_sack_proc_restart, 1);		goto start_at_beginning;	}	/* Ok we have an ACK for some piece of rsm */	if (rsm->r_start != start) {		/*		 * Need to split this in two pieces the before and after.		 */		nrsm = rack_alloc(rack);		if (nrsm == NULL) {			/*			 * failed XXXrrs what can we do but loose the sack			 * info?			 */			goto out;		}		nrsm->r_start = start;		nrsm->r_rtr_bytes = 0;		nrsm->r_end = rsm->r_end;		nrsm->r_rtr_cnt = rsm->r_rtr_cnt;		nrsm->r_flags = rsm->r_flags;		nrsm->r_sndcnt = rsm->r_sndcnt;		for (idx = 0; idx < nrsm->r_rtr_cnt; idx++) {			nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];		}		rsm->r_end = nrsm->r_start;		TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next);		if (rsm->r_in_tmap) {			TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);			nrsm->r_in_tmap = 1;		}		rsm->r_flags &= (~RACK_HAS_FIN);		rsm = nrsm;	}	if (SEQ_GEQ(end, rsm->r_end)) {		/*		 * The end of this block is either beyond this guy or right		 * at this guy.		 */		if ((rsm->r_flags & RACK_ACKED) == 0) {			rack_update_rtt(tp, rack, rsm, to, cts, SACKED);			changed += (rsm->r_end - rsm->r_start);			rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);			rack_log_sack_passed(tp, rack, rsm);			/* Is Reordering occuring? */			if (rsm->r_flags & RACK_SACK_PASSED) {				counter_u64_add(rack_reorder_seen, 1);				rack->r_ctl.rc_reorder_ts = cts;			}			rsm->r_flags |= RACK_ACKED;			rsm->r_flags &= ~RACK_TLP;			if (rsm->r_in_tmap) {				TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);				rsm->r_in_tmap = 0;			}		}		if (end == rsm->r_end) {			/* This block only - done */			goto out;		}		/* There is more not coverend by this rsm move on */		start = rsm->r_end;		nrsm = TAILQ_NEXT(rsm, r_next);		rsm = nrsm;		times = 0;		goto do_rest_ofb;	}	/* Ok we need to split off this one at the tail */	nrsm = rack_alloc(rack);	if (nrsm == NULL) {		/* failed rrs what can we do but loose the sack info? */		goto out;	}	/* Clone it */	nrsm->r_start = end;	nrsm->r_end = rsm->r_end;	nrsm->r_rtr_bytes = 0;	nrsm->r_rtr_cnt = rsm->r_rtr_cnt;	nrsm->r_flags = rsm->r_flags;	nrsm->r_sndcnt = rsm->r_sndcnt;	for (idx = 0; idx < nrsm->r_rtr_cnt; idx++) {		nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];	}	/* The sack block does not cover this guy fully */	rsm->r_flags &= (~RACK_HAS_FIN);	rsm->r_end = end;	TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next);	if (rsm->r_in_tmap) {		TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);		nrsm->r_in_tmap = 1;	}	if (rsm->r_flags & RACK_ACKED) {		/* Been here done that */		goto out;	}	rack_update_rtt(tp, rack, rsm, to, cts, SACKED);	changed += (rsm->r_end - rsm->r_start);	rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);	rack_log_sack_passed(tp, rack, rsm);	/* Is Reordering occuring? */	if (rsm->r_flags & RACK_SACK_PASSED) {		counter_u64_add(rack_reorder_seen, 1);		rack->r_ctl.rc_reorder_ts = cts;	}	rsm->r_flags |= RACK_ACKED;	rsm->r_flags &= ~RACK_TLP;	if (rsm->r_in_tmap) {		TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);		rsm->r_in_tmap = 0;	}out:	if (used_ref == 0) {		counter_u64_add(rack_sack_proc_all, 1);	} else {		counter_u64_add(rack_sack_proc_short, 1);	}	/* Save off where we last were */	if (rsm)		rack->r_ctl.rc_sacklast = TAILQ_NEXT(rsm, r_next);	else		rack->r_ctl.rc_sacklast = NULL;	*prsm = rsm;	return (changed);}
static uint32_t
uint32_t
rack_proc_sack_blk(struct tcpcb *tp, struct tcp_rack *rack, struct sackblk *sack,    struct tcpopt *to, struct rack_sendmap **prsm, uint32_t cts)
rack_proc_sack_blk
struct tcpcb *tp
struct tcpcb
tcpcb
*tp
*
tp
struct tcp_rack *rack
struct tcp_rack
tcp_rack
*rack
*
rack
struct sackblk *sack
struct sackblk
sackblk
*sack
*
sack
struct tcpopt *to
struct tcpopt
tcpopt
*to
*
to
struct rack_sendmap **prsm
struct rack_sendmap
rack_sendmap
**prsm
*
*
prsm
uint32_t cts
uint32_t
uint32_t
cts
cts
{	int32_t idx;	int32_t times = 0;	uint32_t start, end, changed = 0;	struct rack_sendmap *rsm, *nrsm;	int32_t used_ref = 1;	start = sack->start;	end = sack->end;	rsm = *prsm;	if (rsm && SEQ_LT(start, rsm->r_start)) {		TAILQ_FOREACH_REVERSE_FROM(rsm, &rack->r_ctl.rc_map, rack_head, r_next) {			if (SEQ_GEQ(start, rsm->r_start) &&			    SEQ_LT(start, rsm->r_end)) {				goto do_rest_ofb;			}		}	}	if (rsm == NULL) {start_at_beginning:		rsm = NULL;		used_ref = 0;	}	/* First lets locate the block where this guy is */	TAILQ_FOREACH_FROM(rsm, &rack->r_ctl.rc_map, r_next) {		if (SEQ_GEQ(start, rsm->r_start) &&		    SEQ_LT(start, rsm->r_end)) {			break;		}	}do_rest_ofb:	if (rsm == NULL) {		/*		 * This happens when we get duplicate sack blocks with the		 * same end. For example SACK 4: 100 SACK 3: 100 The sort		 * will not change there location so we would just start at		 * the end of the first one and get lost.		 */		if (tp->t_flags & TF_SENTFIN) {			/*			 * Check to see if we have not logged the FIN that			 * went out.			 */			nrsm = TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next);			if (nrsm && (nrsm->r_end + 1) == tp->snd_max) {				/*				 * Ok we did not get the FIN logged.				 */				nrsm->r_end++;				rsm = nrsm;				goto do_rest_ofb;			}		}		if (times == 1) {#ifdef INVARIANTS			panic("tp:%p rack:%p sack:%p to:%p prsm:%p",			    tp, rack, sack, to, prsm);#else			goto out;#endif		}		times++;		counter_u64_add(rack_sack_proc_restart, 1);		goto start_at_beginning;	}	/* Ok we have an ACK for some piece of rsm */	if (rsm->r_start != start) {		/*		 * Need to split this in two pieces the before and after.		 */		nrsm = rack_alloc(rack);		if (nrsm == NULL) {			/*			 * failed XXXrrs what can we do but loose the sack			 * info?			 */			goto out;		}		nrsm->r_start = start;		nrsm->r_rtr_bytes = 0;		nrsm->r_end = rsm->r_end;		nrsm->r_rtr_cnt = rsm->r_rtr_cnt;		nrsm->r_flags = rsm->r_flags;		nrsm->r_sndcnt = rsm->r_sndcnt;		for (idx = 0; idx < nrsm->r_rtr_cnt; idx++) {			nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];		}		rsm->r_end = nrsm->r_start;		TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next);		if (rsm->r_in_tmap) {			TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);			nrsm->r_in_tmap = 1;		}		rsm->r_flags &= (~RACK_HAS_FIN);		rsm = nrsm;	}	if (SEQ_GEQ(end, rsm->r_end)) {		/*		 * The end of this block is either beyond this guy or right		 * at this guy.		 */		if ((rsm->r_flags & RACK_ACKED) == 0) {			rack_update_rtt(tp, rack, rsm, to, cts, SACKED);			changed += (rsm->r_end - rsm->r_start);			rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);			rack_log_sack_passed(tp, rack, rsm);			/* Is Reordering occuring? */			if (rsm->r_flags & RACK_SACK_PASSED) {				counter_u64_add(rack_reorder_seen, 1);				rack->r_ctl.rc_reorder_ts = cts;			}			rsm->r_flags |= RACK_ACKED;			rsm->r_flags &= ~RACK_TLP;			if (rsm->r_in_tmap) {				TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);				rsm->r_in_tmap = 0;			}		}		if (end == rsm->r_end) {			/* This block only - done */			goto out;		}		/* There is more not coverend by this rsm move on */		start = rsm->r_end;		nrsm = TAILQ_NEXT(rsm, r_next);		rsm = nrsm;		times = 0;		goto do_rest_ofb;	}	/* Ok we need to split off this one at the tail */	nrsm = rack_alloc(rack);	if (nrsm == NULL) {		/* failed rrs what can we do but loose the sack info? */		goto out;	}	/* Clone it */	nrsm->r_start = end;	nrsm->r_end = rsm->r_end;	nrsm->r_rtr_bytes = 0;	nrsm->r_rtr_cnt = rsm->r_rtr_cnt;	nrsm->r_flags = rsm->r_flags;	nrsm->r_sndcnt = rsm->r_sndcnt;	for (idx = 0; idx < nrsm->r_rtr_cnt; idx++) {		nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];	}	/* The sack block does not cover this guy fully */	rsm->r_flags &= (~RACK_HAS_FIN);	rsm->r_end = end;	TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next);	if (rsm->r_in_tmap) {		TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);		nrsm->r_in_tmap = 1;	}	if (rsm->r_flags & RACK_ACKED) {		/* Been here done that */		goto out;	}	rack_update_rtt(tp, rack, rsm, to, cts, SACKED);	changed += (rsm->r_end - rsm->r_start);	rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);	rack_log_sack_passed(tp, rack, rsm);	/* Is Reordering occuring? */	if (rsm->r_flags & RACK_SACK_PASSED) {		counter_u64_add(rack_reorder_seen, 1);		rack->r_ctl.rc_reorder_ts = cts;	}	rsm->r_flags |= RACK_ACKED;	rsm->r_flags &= ~RACK_TLP;	if (rsm->r_in_tmap) {		TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);		rsm->r_in_tmap = 0;	}out:	if (used_ref == 0) {		counter_u64_add(rack_sack_proc_all, 1);	} else {		counter_u64_add(rack_sack_proc_short, 1);	}	/* Save off where we last were */	if (rsm)		rack->r_ctl.rc_sacklast = TAILQ_NEXT(rsm, r_next);	else		rack->r_ctl.rc_sacklast = NULL;	*prsm = rsm;	return (changed);}
int32_t idx;
int32_t idx;
int32_t
int32_t
idx
idx
int32_t times = 0;
int32_t times = 0;
int32_t
int32_t
times = 0
times
= 0
0
uint32_t start, end, changed = 0;
uint32_t start, end, changed = 0;
uint32_t
uint32_t
start
start
end
end
changed = 0
changed
= 0
0
struct rack_sendmap *rsm, *nrsm;
struct rack_sendmap *rsm, *nrsm;
struct rack_sendmap
rack_sendmap
*rsm
*
rsm
*nrsm
*
nrsm
int32_t used_ref = 1;
int32_t used_ref = 1;
int32_t
int32_t
used_ref = 1
used_ref
= 1
1
start = sack->start;
start = sack->start
start
start
sack->start
sack
sack
start
end = sack->end;
end = sack->end
end
end
sack->end
sack
sack
end
rsm = *prsm;
rsm = *prsm
rsm
rsm
*prsm
prsm
prsm
if (rsm && SEQ_LT(start, rsm->r_start)) {		TAILQ_FOREACH_REVERSE_FROM(rsm, &rack->r_ctl.rc_map, rack_head, r_next) {			if (SEQ_GEQ(start, rsm->r_start) &&			    SEQ_LT(start, rsm->r_end)) {				goto do_rest_ofb;			}		}	}
rsm && SEQ_LT(start, rsm->r_start)
rsm
rsm
SEQ_LT(start, rsm->r_start)
SEQ_LT
SEQ_LT
start
start
rsm->r_start
rsm
rsm
r_start
{		TAILQ_FOREACH_REVERSE_FROM(rsm, &rack->r_ctl.rc_map, rack_head, r_next) {			if (SEQ_GEQ(start, rsm->r_start) &&			    SEQ_LT(start, rsm->r_end)) {				goto do_rest_ofb;			}		}	}
TAILQ_FOREACH_REVERSE_FROM(rsm, &rack->r_ctl.rc_map, rack_head, r_next)
TAILQ_FOREACH_REVERSE_FROM(rsm, &rack->r_ctl.rc_map, rack_head, r_next)
TAILQ_FOREACH_REVERSE_FROM
TAILQ_FOREACH_REVERSE_FROM
rsm
rsm
&rack->r_ctl.rc_map
rack->r_ctl.rc_map
rack->r_ctl
rack
rack
r_ctl
rc_map
rack_head
rack_head
r_next
r_next
)
{			if (SEQ_GEQ(start, rsm->r_start) &&			    SEQ_LT(start, rsm->r_end)) {				goto do_rest_ofb;			}		}
if (SEQ_GEQ(start, rsm->r_start) &&			    SEQ_LT(start, rsm->r_end)) {				goto do_rest_ofb;			}
SEQ_GEQ(start, rsm->r_start) &&			    SEQ_LT(start, rsm->r_end)
SEQ_GEQ(start, rsm->r_start)
SEQ_GEQ
SEQ_GEQ
start
start
rsm->r_start
rsm
rsm
r_start
SEQ_LT(start, rsm->r_end)
SEQ_LT
SEQ_LT
start
start
rsm->r_end
rsm
rsm
r_end
{				goto do_rest_ofb;			}
goto do_rest_ofb;
do_rest_ofb
if (rsm == NULL) {start_at_beginning:		rsm = NULL;		used_ref = 0;	}
rsm == NULL
rsm
rsm
NULL
NULL
{start_at_beginning:		rsm = NULL;		used_ref = 0;	}
start_at_beginning:		rsm = NULL;
start_at_beginning
rsm = NULL;
rsm = NULL
rsm
rsm
NULL
NULL
used_ref = 0;
used_ref = 0
used_ref
used_ref
0
TAILQ_FOREACH_FROM(rsm, &rack->r_ctl.rc_map, r_next)
TAILQ_FOREACH_FROM(rsm, &rack->r_ctl.rc_map, r_next)
TAILQ_FOREACH_FROM
TAILQ_FOREACH_FROM
rsm
rsm
&rack->r_ctl.rc_map
rack->r_ctl.rc_map
rack->r_ctl
rack
rack
r_ctl
rc_map
r_next
r_next
)
{		if (SEQ_GEQ(start, rsm->r_start) &&		    SEQ_LT(start, rsm->r_end)) {			break;		}	}
if (SEQ_GEQ(start, rsm->r_start) &&		    SEQ_LT(start, rsm->r_end)) {			break;		}
SEQ_GEQ(start, rsm->r_start) &&		    SEQ_LT(start, rsm->r_end)
SEQ_GEQ(start, rsm->r_start)
SEQ_GEQ
SEQ_GEQ
start
start
rsm->r_start
rsm
rsm
r_start
SEQ_LT(start, rsm->r_end)
SEQ_LT
SEQ_LT
start
start
rsm->r_end
rsm
rsm
r_end
{			break;		}
break;
do_rest_ofb:	if (rsm == NULL) {		/*		 * This happens when we get duplicate sack blocks with the		 * same end. For example SACK 4: 100 SACK 3: 100 The sort		 * will not change there location so we would just start at		 * the end of the first one and get lost.		 */		if (tp->t_flags & TF_SENTFIN) {			/*			 * Check to see if we have not logged the FIN that			 * went out.			 */			nrsm = TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next);			if (nrsm && (nrsm->r_end + 1) == tp->snd_max) {				/*				 * Ok we did not get the FIN logged.				 */				nrsm->r_end++;				rsm = nrsm;				goto do_rest_ofb;			}		}		if (times == 1) {#ifdef INVARIANTS			panic("tp:%p rack:%p sack:%p to:%p prsm:%p",			    tp, rack, sack, to, prsm);#else			goto out;#endif		}		times++;		counter_u64_add(rack_sack_proc_restart, 1);		goto start_at_beginning;	}
do_rest_ofb
if (rsm == NULL) {		/*		 * This happens when we get duplicate sack blocks with the		 * same end. For example SACK 4: 100 SACK 3: 100 The sort		 * will not change there location so we would just start at		 * the end of the first one and get lost.		 */		if (tp->t_flags & TF_SENTFIN) {			/*			 * Check to see if we have not logged the FIN that			 * went out.			 */			nrsm = TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next);			if (nrsm && (nrsm->r_end + 1) == tp->snd_max) {				/*				 * Ok we did not get the FIN logged.				 */				nrsm->r_end++;				rsm = nrsm;				goto do_rest_ofb;			}		}		if (times == 1) {#ifdef INVARIANTS			panic("tp:%p rack:%p sack:%p to:%p prsm:%p",			    tp, rack, sack, to, prsm);#else			goto out;#endif		}		times++;		counter_u64_add(rack_sack_proc_restart, 1);		goto start_at_beginning;	}
rsm == NULL
rsm
rsm
NULL
NULL
{		/*		 * This happens when we get duplicate sack blocks with the		 * same end. For example SACK 4: 100 SACK 3: 100 The sort		 * will not change there location so we would just start at		 * the end of the first one and get lost.		 */		if (tp->t_flags & TF_SENTFIN) {			/*			 * Check to see if we have not logged the FIN that			 * went out.			 */			nrsm = TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next);			if (nrsm && (nrsm->r_end + 1) == tp->snd_max) {				/*				 * Ok we did not get the FIN logged.				 */				nrsm->r_end++;				rsm = nrsm;				goto do_rest_ofb;			}		}		if (times == 1) {#ifdef INVARIANTS			panic("tp:%p rack:%p sack:%p to:%p prsm:%p",			    tp, rack, sack, to, prsm);#else			goto out;#endif		}		times++;		counter_u64_add(rack_sack_proc_restart, 1);		goto start_at_beginning;	}
if (tp->t_flags & TF_SENTFIN) {			/*			 * Check to see if we have not logged the FIN that			 * went out.			 */			nrsm = TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next);			if (nrsm && (nrsm->r_end + 1) == tp->snd_max) {				/*				 * Ok we did not get the FIN logged.				 */				nrsm->r_end++;				rsm = nrsm;				goto do_rest_ofb;			}		}
tp->t_flags & TF_SENTFIN
tp->t_flags
tp
tp
t_flags
TF_SENTFIN
TF_SENTFIN
{			/*			 * Check to see if we have not logged the FIN that			 * went out.			 */			nrsm = TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next);			if (nrsm && (nrsm->r_end + 1) == tp->snd_max) {				/*				 * Ok we did not get the FIN logged.				 */				nrsm->r_end++;				rsm = nrsm;				goto do_rest_ofb;			}		}
nrsm = TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next);
nrsm = TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next)
nrsm
nrsm
TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next)
TAILQ_LAST_FAST
TAILQ_LAST_FAST
&rack->r_ctl.rc_map
rack->r_ctl.rc_map
rack->r_ctl
rack
rack
r_ctl
rc_map
rack_sendmap
rack_sendmap
r_next
r_next
if (nrsm && (nrsm->r_end + 1) == tp->snd_max) {				/*				 * Ok we did not get the FIN logged.				 */				nrsm->r_end++;				rsm = nrsm;				goto do_rest_ofb;			}
nrsm && (nrsm->r_end + 1) == tp->snd_max
nrsm
nrsm
(nrsm->r_end + 1) == tp->snd_max
(nrsm->r_end + 1)
nrsm->r_end + 1
nrsm->r_end
nrsm
nrsm
r_end
1
tp->snd_max
tp
tp
snd_max
{				/*				 * Ok we did not get the FIN logged.				 */				nrsm->r_end++;				rsm = nrsm;				goto do_rest_ofb;			}
nrsm->r_end++;
nrsm->r_end++
nrsm->r_end
nrsm
nrsm
r_end
rsm = nrsm;
rsm = nrsm
rsm
rsm
nrsm
nrsm
goto do_rest_ofb;
do_rest_ofb
if (times == 1) {#ifdef INVARIANTS			panic("tp:%p rack:%p sack:%p to:%p prsm:%p",			    tp, rack, sack, to, prsm);#else			goto out;#endif		}
times == 1
times
times
1
{#ifdef INVARIANTS			panic("tp:%p rack:%p sack:%p to:%p prsm:%p",			    tp, rack, sack, to, prsm);#else			goto out;#endif		}
goto out;
out
times++;
times++
times
times
counter_u64_add(rack_sack_proc_restart, 1);
counter_u64_add(rack_sack_proc_restart, 1)
counter_u64_add
counter_u64_add
rack_sack_proc_restart
rack_sack_proc_restart
1
goto start_at_beginning;
start_at_beginning
if (rsm->r_start != start) {		/*		 * Need to split this in two pieces the before and after.		 */		nrsm = rack_alloc(rack);		if (nrsm == NULL) {			/*			 * failed XXXrrs what can we do but loose the sack			 * info?			 */			goto out;		}		nrsm->r_start = start;		nrsm->r_rtr_bytes = 0;		nrsm->r_end = rsm->r_end;		nrsm->r_rtr_cnt = rsm->r_rtr_cnt;		nrsm->r_flags = rsm->r_flags;		nrsm->r_sndcnt = rsm->r_sndcnt;		for (idx = 0; idx < nrsm->r_rtr_cnt; idx++) {			nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];		}		rsm->r_end = nrsm->r_start;		TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next);		if (rsm->r_in_tmap) {			TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);			nrsm->r_in_tmap = 1;		}		rsm->r_flags &= (~RACK_HAS_FIN);		rsm = nrsm;	}
rsm->r_start != start
rsm->r_start
rsm
rsm
r_start
start
start
{		/*		 * Need to split this in two pieces the before and after.		 */		nrsm = rack_alloc(rack);		if (nrsm == NULL) {			/*			 * failed XXXrrs what can we do but loose the sack			 * info?			 */			goto out;		}		nrsm->r_start = start;		nrsm->r_rtr_bytes = 0;		nrsm->r_end = rsm->r_end;		nrsm->r_rtr_cnt = rsm->r_rtr_cnt;		nrsm->r_flags = rsm->r_flags;		nrsm->r_sndcnt = rsm->r_sndcnt;		for (idx = 0; idx < nrsm->r_rtr_cnt; idx++) {			nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];		}		rsm->r_end = nrsm->r_start;		TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next);		if (rsm->r_in_tmap) {			TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);			nrsm->r_in_tmap = 1;		}		rsm->r_flags &= (~RACK_HAS_FIN);		rsm = nrsm;	}
nrsm = rack_alloc(rack);
nrsm = rack_alloc(rack)
nrsm
nrsm
rack_alloc(rack)
rack_alloc
rack_alloc
rack
rack
if (nrsm == NULL) {			/*			 * failed XXXrrs what can we do but loose the sack			 * info?			 */			goto out;		}
nrsm == NULL
nrsm
nrsm
NULL
NULL
{			/*			 * failed XXXrrs what can we do but loose the sack			 * info?			 */			goto out;		}
goto out;
out
nrsm->r_start = start;
nrsm->r_start = start
nrsm->r_start
nrsm
nrsm
r_start
start
start
nrsm->r_rtr_bytes = 0;
nrsm->r_rtr_bytes = 0
nrsm->r_rtr_bytes
nrsm
nrsm
r_rtr_bytes
0
nrsm->r_end = rsm->r_end;
nrsm->r_end = rsm->r_end
nrsm->r_end
nrsm
nrsm
r_end
rsm->r_end
rsm
rsm
r_end
nrsm->r_rtr_cnt = rsm->r_rtr_cnt;
nrsm->r_rtr_cnt = rsm->r_rtr_cnt
nrsm->r_rtr_cnt
nrsm
nrsm
r_rtr_cnt
rsm->r_rtr_cnt
rsm
rsm
r_rtr_cnt
nrsm->r_flags = rsm->r_flags;
nrsm->r_flags = rsm->r_flags
nrsm->r_flags
nrsm
nrsm
r_flags
rsm->r_flags
rsm
rsm
r_flags
nrsm->r_sndcnt = rsm->r_sndcnt;
nrsm->r_sndcnt = rsm->r_sndcnt
nrsm->r_sndcnt
nrsm
nrsm
r_sndcnt
rsm->r_sndcnt
rsm
rsm
r_sndcnt
for (idx = 0; idx < nrsm->r_rtr_cnt; idx++) {			nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];		}
idx = 0;
idx = 0
idx
idx
0
idx < nrsm->r_rtr_cnt
idx
idx
nrsm->r_rtr_cnt
nrsm
nrsm
r_rtr_cnt
idx++
idx
idx
{			nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];		}
nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];
nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx]
nrsm->r_tim_lastsent[idx]
nrsm->r_tim_lastsent
nrsm
nrsm
r_tim_lastsent
idx
idx
rsm->r_tim_lastsent[idx]
rsm->r_tim_lastsent
rsm
rsm
r_tim_lastsent
idx
idx
rsm->r_end = nrsm->r_start;
rsm->r_end = nrsm->r_start
rsm->r_end
rsm
rsm
r_end
nrsm->r_start
nrsm
nrsm
r_start
TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next);
TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next)
TAILQ_INSERT_AFTER
TAILQ_INSERT_AFTER
&rack->r_ctl.rc_map
rack->r_ctl.rc_map
rack->r_ctl
rack
rack
r_ctl
rc_map
rsm
rsm
nrsm
nrsm
r_next
r_next
if (rsm->r_in_tmap) {			TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);			nrsm->r_in_tmap = 1;		}
rsm->r_in_tmap
rsm
rsm
r_in_tmap
{			TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);			nrsm->r_in_tmap = 1;		}
TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);
TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext)
TAILQ_INSERT_AFTER
TAILQ_INSERT_AFTER
&rack->r_ctl.rc_tmap
rack->r_ctl.rc_tmap
rack->r_ctl
rack
rack
r_ctl
rc_tmap
rsm
rsm
nrsm
nrsm
r_tnext
r_tnext
nrsm->r_in_tmap = 1;
nrsm->r_in_tmap = 1
nrsm->r_in_tmap
nrsm
nrsm
r_in_tmap
1
rsm->r_flags &= (~RACK_HAS_FIN);
rsm->r_flags &= (~RACK_HAS_FIN)
rsm->r_flags
rsm
rsm
r_flags
(~RACK_HAS_FIN)
~RACK_HAS_FIN
RACK_HAS_FIN
RACK_HAS_FIN
rsm = nrsm;
rsm = nrsm
rsm
rsm
nrsm
nrsm
if (SEQ_GEQ(end, rsm->r_end)) {		/*		 * The end of this block is either beyond this guy or right		 * at this guy.		 */		if ((rsm->r_flags & RACK_ACKED) == 0) {			rack_update_rtt(tp, rack, rsm, to, cts, SACKED);			changed += (rsm->r_end - rsm->r_start);			rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);			rack_log_sack_passed(tp, rack, rsm);			/* Is Reordering occuring? */			if (rsm->r_flags & RACK_SACK_PASSED) {				counter_u64_add(rack_reorder_seen, 1);				rack->r_ctl.rc_reorder_ts = cts;			}			rsm->r_flags |= RACK_ACKED;			rsm->r_flags &= ~RACK_TLP;			if (rsm->r_in_tmap) {				TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);				rsm->r_in_tmap = 0;			}		}		if (end == rsm->r_end) {			/* This block only - done */			goto out;		}		/* There is more not coverend by this rsm move on */		start = rsm->r_end;		nrsm = TAILQ_NEXT(rsm, r_next);		rsm = nrsm;		times = 0;		goto do_rest_ofb;	}
SEQ_GEQ(end, rsm->r_end)
SEQ_GEQ
SEQ_GEQ
end
end
rsm->r_end
rsm
rsm
r_end
{		/*		 * The end of this block is either beyond this guy or right		 * at this guy.		 */		if ((rsm->r_flags & RACK_ACKED) == 0) {			rack_update_rtt(tp, rack, rsm, to, cts, SACKED);			changed += (rsm->r_end - rsm->r_start);			rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);			rack_log_sack_passed(tp, rack, rsm);			/* Is Reordering occuring? */			if (rsm->r_flags & RACK_SACK_PASSED) {				counter_u64_add(rack_reorder_seen, 1);				rack->r_ctl.rc_reorder_ts = cts;			}			rsm->r_flags |= RACK_ACKED;			rsm->r_flags &= ~RACK_TLP;			if (rsm->r_in_tmap) {				TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);				rsm->r_in_tmap = 0;			}		}		if (end == rsm->r_end) {			/* This block only - done */			goto out;		}		/* There is more not coverend by this rsm move on */		start = rsm->r_end;		nrsm = TAILQ_NEXT(rsm, r_next);		rsm = nrsm;		times = 0;		goto do_rest_ofb;	}
if ((rsm->r_flags & RACK_ACKED) == 0) {			rack_update_rtt(tp, rack, rsm, to, cts, SACKED);			changed += (rsm->r_end - rsm->r_start);			rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);			rack_log_sack_passed(tp, rack, rsm);			/* Is Reordering occuring? */			if (rsm->r_flags & RACK_SACK_PASSED) {				counter_u64_add(rack_reorder_seen, 1);				rack->r_ctl.rc_reorder_ts = cts;			}			rsm->r_flags |= RACK_ACKED;			rsm->r_flags &= ~RACK_TLP;			if (rsm->r_in_tmap) {				TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);				rsm->r_in_tmap = 0;			}		}
(rsm->r_flags & RACK_ACKED) == 0
(rsm->r_flags & RACK_ACKED)
rsm->r_flags & RACK_ACKED
rsm->r_flags
rsm
rsm
r_flags
RACK_ACKED
RACK_ACKED
0
{			rack_update_rtt(tp, rack, rsm, to, cts, SACKED);			changed += (rsm->r_end - rsm->r_start);			rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);			rack_log_sack_passed(tp, rack, rsm);			/* Is Reordering occuring? */			if (rsm->r_flags & RACK_SACK_PASSED) {				counter_u64_add(rack_reorder_seen, 1);				rack->r_ctl.rc_reorder_ts = cts;			}			rsm->r_flags |= RACK_ACKED;			rsm->r_flags &= ~RACK_TLP;			if (rsm->r_in_tmap) {				TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);				rsm->r_in_tmap = 0;			}		}
rack_update_rtt(tp, rack, rsm, to, cts, SACKED);
rack_update_rtt(tp, rack, rsm, to, cts, SACKED)
rack_update_rtt
rack_update_rtt
tp
tp
rack
rack
rsm
rsm
to
to
cts
cts
SACKED
SACKED
changed += (rsm->r_end - rsm->r_start);
changed += (rsm->r_end - rsm->r_start)
changed
changed
(rsm->r_end - rsm->r_start)
rsm->r_end - rsm->r_start
rsm->r_end
rsm
rsm
r_end
rsm->r_start
rsm
rsm
r_start
rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);
rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start)
rack->r_ctl.rc_sacked
rack->r_ctl
rack
rack
r_ctl
rc_sacked
(rsm->r_end - rsm->r_start)
rsm->r_end - rsm->r_start
rsm->r_end
rsm
rsm
r_end
rsm->r_start
rsm
rsm
r_start
rack_log_sack_passed(tp, rack, rsm);
rack_log_sack_passed(tp, rack, rsm)
rack_log_sack_passed
rack_log_sack_passed
tp
tp
rack
rack
rsm
rsm
if (rsm->r_flags & RACK_SACK_PASSED) {				counter_u64_add(rack_reorder_seen, 1);				rack->r_ctl.rc_reorder_ts = cts;			}
rsm->r_flags & RACK_SACK_PASSED
rsm->r_flags
rsm
rsm
r_flags
RACK_SACK_PASSED
RACK_SACK_PASSED
{				counter_u64_add(rack_reorder_seen, 1);				rack->r_ctl.rc_reorder_ts = cts;			}
counter_u64_add(rack_reorder_seen, 1);
counter_u64_add(rack_reorder_seen, 1)
counter_u64_add
counter_u64_add
rack_reorder_seen
rack_reorder_seen
1
rack->r_ctl.rc_reorder_ts = cts;
rack->r_ctl.rc_reorder_ts = cts
rack->r_ctl.rc_reorder_ts
rack->r_ctl
rack
rack
r_ctl
rc_reorder_ts
cts
cts
rsm->r_flags |= RACK_ACKED;
rsm->r_flags |= RACK_ACKED
rsm->r_flags
rsm
rsm
r_flags
RACK_ACKED
RACK_ACKED
rsm->r_flags &= ~RACK_TLP;
rsm->r_flags &= ~RACK_TLP
rsm->r_flags
rsm
rsm
r_flags
~RACK_TLP
RACK_TLP
RACK_TLP
if (rsm->r_in_tmap) {				TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);				rsm->r_in_tmap = 0;			}
rsm->r_in_tmap
rsm
rsm
r_in_tmap
{				TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);				rsm->r_in_tmap = 0;			}
TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);
TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext)
TAILQ_REMOVE
TAILQ_REMOVE
&rack->r_ctl.rc_tmap
rack->r_ctl.rc_tmap
rack->r_ctl
rack
rack
r_ctl
rc_tmap
rsm
rsm
r_tnext
r_tnext
rsm->r_in_tmap = 0;
rsm->r_in_tmap = 0
rsm->r_in_tmap
rsm
rsm
r_in_tmap
0
if (end == rsm->r_end) {			/* This block only - done */			goto out;		}
end == rsm->r_end
end
end
rsm->r_end
rsm
rsm
r_end
{			/* This block only - done */			goto out;		}
goto out;
out
start = rsm->r_end;
start = rsm->r_end
start
start
rsm->r_end
rsm
rsm
r_end
nrsm = TAILQ_NEXT(rsm, r_next);
nrsm = TAILQ_NEXT(rsm, r_next)
nrsm
nrsm
TAILQ_NEXT(rsm, r_next)
TAILQ_NEXT
TAILQ_NEXT
rsm
rsm
r_next
r_next
rsm = nrsm;
rsm = nrsm
rsm
rsm
nrsm
nrsm
times = 0;
times = 0
times
times
0
goto do_rest_ofb;
do_rest_ofb
nrsm = rack_alloc(rack);
nrsm = rack_alloc(rack)
nrsm
nrsm
rack_alloc(rack)
rack_alloc
rack_alloc
rack
rack
if (nrsm == NULL) {		/* failed rrs what can we do but loose the sack info? */		goto out;	}
nrsm == NULL
nrsm
nrsm
NULL
NULL
{		/* failed rrs what can we do but loose the sack info? */		goto out;	}
goto out;
out
nrsm->r_start = end;
nrsm->r_start = end
nrsm->r_start
nrsm
nrsm
r_start
end
end
nrsm->r_end = rsm->r_end;
nrsm->r_end = rsm->r_end
nrsm->r_end
nrsm
nrsm
r_end
rsm->r_end
rsm
rsm
r_end
nrsm->r_rtr_bytes = 0;
nrsm->r_rtr_bytes = 0
nrsm->r_rtr_bytes
nrsm
nrsm
r_rtr_bytes
0
nrsm->r_rtr_cnt = rsm->r_rtr_cnt;
nrsm->r_rtr_cnt = rsm->r_rtr_cnt
nrsm->r_rtr_cnt
nrsm
nrsm
r_rtr_cnt
rsm->r_rtr_cnt
rsm
rsm
r_rtr_cnt
nrsm->r_flags = rsm->r_flags;
nrsm->r_flags = rsm->r_flags
nrsm->r_flags
nrsm
nrsm
r_flags
rsm->r_flags
rsm
rsm
r_flags
nrsm->r_sndcnt = rsm->r_sndcnt;
nrsm->r_sndcnt = rsm->r_sndcnt
nrsm->r_sndcnt
nrsm
nrsm
r_sndcnt
rsm->r_sndcnt
rsm
rsm
r_sndcnt
for (idx = 0; idx < nrsm->r_rtr_cnt; idx++) {		nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];	}
idx = 0;
idx = 0
idx
idx
0
idx < nrsm->r_rtr_cnt
idx
idx
nrsm->r_rtr_cnt
nrsm
nrsm
r_rtr_cnt
idx++
idx
idx
{		nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];	}
nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx];
nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx]
nrsm->r_tim_lastsent[idx]
nrsm->r_tim_lastsent
nrsm
nrsm
r_tim_lastsent
idx
idx
rsm->r_tim_lastsent[idx]
rsm->r_tim_lastsent
rsm
rsm
r_tim_lastsent
idx
idx
rsm->r_flags &= (~RACK_HAS_FIN);
rsm->r_flags &= (~RACK_HAS_FIN)
rsm->r_flags
rsm
rsm
r_flags
(~RACK_HAS_FIN)
~RACK_HAS_FIN
RACK_HAS_FIN
RACK_HAS_FIN
rsm->r_end = end;
rsm->r_end = end
rsm->r_end
rsm
rsm
r_end
end
end
TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next);
TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next)
TAILQ_INSERT_AFTER
TAILQ_INSERT_AFTER
&rack->r_ctl.rc_map
rack->r_ctl.rc_map
rack->r_ctl
rack
rack
r_ctl
rc_map
rsm
rsm
nrsm
nrsm
r_next
r_next
if (rsm->r_in_tmap) {		TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);		nrsm->r_in_tmap = 1;	}
rsm->r_in_tmap
rsm
rsm
r_in_tmap
{		TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);		nrsm->r_in_tmap = 1;	}
TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext);
TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext)
TAILQ_INSERT_AFTER
TAILQ_INSERT_AFTER
&rack->r_ctl.rc_tmap
rack->r_ctl.rc_tmap
rack->r_ctl
rack
rack
r_ctl
rc_tmap
rsm
rsm
nrsm
nrsm
r_tnext
r_tnext
nrsm->r_in_tmap = 1;
nrsm->r_in_tmap = 1
nrsm->r_in_tmap
nrsm
nrsm
r_in_tmap
1
if (rsm->r_flags & RACK_ACKED) {		/* Been here done that */		goto out;	}
rsm->r_flags & RACK_ACKED
rsm->r_flags
rsm
rsm
r_flags
RACK_ACKED
RACK_ACKED
{		/* Been here done that */		goto out;	}
goto out;
out
rack_update_rtt(tp, rack, rsm, to, cts, SACKED);
rack_update_rtt(tp, rack, rsm, to, cts, SACKED)
rack_update_rtt
rack_update_rtt
tp
tp
rack
rack
rsm
rsm
to
to
cts
cts
SACKED
SACKED
changed += (rsm->r_end - rsm->r_start);
changed += (rsm->r_end - rsm->r_start)
changed
changed
(rsm->r_end - rsm->r_start)
rsm->r_end - rsm->r_start
rsm->r_end
rsm
rsm
r_end
rsm->r_start
rsm
rsm
r_start
rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start);
rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start)
rack->r_ctl.rc_sacked
rack->r_ctl
rack
rack
r_ctl
rc_sacked
(rsm->r_end - rsm->r_start)
rsm->r_end - rsm->r_start
rsm->r_end
rsm
rsm
r_end
rsm->r_start
rsm
rsm
r_start
rack_log_sack_passed(tp, rack, rsm);
rack_log_sack_passed(tp, rack, rsm)
rack_log_sack_passed
rack_log_sack_passed
tp
tp
rack
rack
rsm
rsm
if (rsm->r_flags & RACK_SACK_PASSED) {		counter_u64_add(rack_reorder_seen, 1);		rack->r_ctl.rc_reorder_ts = cts;	}
rsm->r_flags & RACK_SACK_PASSED
rsm->r_flags
rsm
rsm
r_flags
RACK_SACK_PASSED
RACK_SACK_PASSED
{		counter_u64_add(rack_reorder_seen, 1);		rack->r_ctl.rc_reorder_ts = cts;	}
counter_u64_add(rack_reorder_seen, 1);
counter_u64_add(rack_reorder_seen, 1)
counter_u64_add
counter_u64_add
rack_reorder_seen
rack_reorder_seen
1
rack->r_ctl.rc_reorder_ts = cts;
rack->r_ctl.rc_reorder_ts = cts
rack->r_ctl.rc_reorder_ts
rack->r_ctl
rack
rack
r_ctl
rc_reorder_ts
cts
cts
rsm->r_flags |= RACK_ACKED;
rsm->r_flags |= RACK_ACKED
rsm->r_flags
rsm
rsm
r_flags
RACK_ACKED
RACK_ACKED
rsm->r_flags &= ~RACK_TLP;
rsm->r_flags &= ~RACK_TLP
rsm->r_flags
rsm
rsm
r_flags
~RACK_TLP
RACK_TLP
RACK_TLP
if (rsm->r_in_tmap) {		TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);		rsm->r_in_tmap = 0;	}
rsm->r_in_tmap
rsm
rsm
r_in_tmap
{		TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);		rsm->r_in_tmap = 0;	}
TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext);
TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext)
TAILQ_REMOVE
TAILQ_REMOVE
&rack->r_ctl.rc_tmap
rack->r_ctl.rc_tmap
rack->r_ctl
rack
rack
r_ctl
rc_tmap
rsm
rsm
r_tnext
r_tnext
rsm->r_in_tmap = 0;
rsm->r_in_tmap = 0
rsm->r_in_tmap
rsm
rsm
r_in_tmap
0
out:	if (used_ref == 0) {		counter_u64_add(rack_sack_proc_all, 1);	} else {		counter_u64_add(rack_sack_proc_short, 1);	}
out
if (used_ref == 0) {		counter_u64_add(rack_sack_proc_all, 1);	} else {		counter_u64_add(rack_sack_proc_short, 1);	}
used_ref == 0
used_ref
used_ref
0
{		counter_u64_add(rack_sack_proc_all, 1);	}
counter_u64_add(rack_sack_proc_all, 1);
counter_u64_add(rack_sack_proc_all, 1)
counter_u64_add
counter_u64_add
rack_sack_proc_all
rack_sack_proc_all
1
{		counter_u64_add(rack_sack_proc_short, 1);	}
counter_u64_add(rack_sack_proc_short, 1);
counter_u64_add(rack_sack_proc_short, 1)
counter_u64_add
counter_u64_add
rack_sack_proc_short
rack_sack_proc_short
1
if (rsm)		rack->r_ctl.rc_sacklast = TAILQ_NEXT(rsm, r_next);	else		rack->r_ctl.rc_sacklast = NULL;
rsm
rsm
rack->r_ctl.rc_sacklast = TAILQ_NEXT(rsm, r_next);
rack->r_ctl.rc_sacklast = TAILQ_NEXT(rsm, r_next)
rack->r_ctl.rc_sacklast
rack->r_ctl
rack
rack
r_ctl
rc_sacklast
TAILQ_NEXT(rsm, r_next)
TAILQ_NEXT
TAILQ_NEXT
rsm
rsm
r_next
r_next
rack->r_ctl.rc_sacklast = NULL;
rack->r_ctl.rc_sacklast = NULL
rack->r_ctl.rc_sacklast
rack->r_ctl
rack
rack
r_ctl
rc_sacklast
NULL
NULL
*prsm = rsm;
*prsm = rsm
*prsm
prsm
prsm
rsm
rsm
return (changed);
(changed)
changed
changed
-----joern-----
(176,188,0)
(396,111,0)
(169,95,0)
(29,443,0)
(273,215,0)
(470,344,0)
(500,111,0)
(47,497,0)
(319,298,0)
(399,461,0)
(339,194,0)
(407,271,0)
(113,148,0)
(406,406,0)
(587,366,0)
(526,495,0)
(215,481,0)
(98,236,0)
(486,511,0)
(36,280,0)
(410,195,0)
(305,382,0)
(198,456,0)
(301,461,0)
(266,515,0)
(102,185,0)
(605,381,0)
(294,429,0)
(44,620,0)
(473,430,0)
(460,511,0)
(45,188,0)
(329,301,0)
(263,567,0)
(49,188,0)
(539,264,0)
(472,188,0)
(410,199,0)
(13,141,0)
(116,176,0)
(206,215,0)
(344,124,0)
(143,567,0)
(348,515,0)
(243,467,0)
(135,601,0)
(183,265,0)
(364,475,0)
(387,271,0)
(335,134,0)
(1,215,0)
(430,473,0)
(6,567,0)
(382,148,0)
(559,64,0)
(96,308,0)
(410,188,0)
(212,572,0)
(324,1,0)
(233,97,0)
(20,35,0)
(535,537,0)
(296,515,0)
(139,437,0)
(402,75,0)
(294,111,0)
(230,111,0)
(203,109,0)
(509,572,0)
(452,105,0)
(99,92,0)
(614,432,0)
(220,271,0)
(153,82,0)
(358,572,0)
(386,515,0)
(230,458,0)
(27,105,0)
(89,605,0)
(421,509,0)
(1,567,0)
(421,371,0)
(606,481,0)
(212,67,0)
(124,352,0)
(128,572,0)
(181,443,0)
(261,397,0)
(143,572,0)
(319,423,0)
(273,572,0)
(572,124,0)
(605,567,0)
(157,271,0)
(564,500,0)
(477,140,0)
(125,143,0)
(97,572,0)
(237,23,0)
(130,177,0)
(185,482,0)
(133,374,0)
(410,475,0)
(606,271,0)
(541,572,0)
(437,579,0)
(6,572,0)
(565,188,0)
(625,212,0)
(568,300,0)
(234,180,0)
(319,111,0)
(386,111,0)
(577,49,0)
(397,515,0)
(312,572,0)
(268,110,0)
(481,606,0)
(461,188,0)
(94,236,0)
(17,32,0)
(390,407,0)
(305,544,0)
(168,609,0)
(300,176,0)
(288,231,0)
(410,180,0)
(386,572,0)
(314,567,0)
(527,188,0)
(287,567,0)
(108,109,0)
(31,105,0)
(407,262,0)
(417,495,0)
(421,248,0)
(605,461,0)
(619,294,0)
(77,156,0)
(176,0,0)
(421,475,0)
(36,515,0)
(465,22,0)
(289,581,0)
(78,524,0)
(348,549,0)
(555,386,0)
(67,301,0)
(241,508,0)
(394,22,0)
(273,461,0)
(548,381,0)
(314,111,0)
(266,567,0)
(247,314,0)
(212,381,0)
(383,541,0)
(508,241,0)
(483,498,0)
(75,402,0)
(197,387,0)
(500,515,0)
(421,88,0)
(312,567,0)
(552,79,0)
(410,88,0)
(340,556,0)
(187,271,0)
(269,61,0)
(97,567,0)
(103,188,0)
(354,337,0)
(2,184,0)
(215,560,0)
(421,129,0)
(432,515,0)
(594,434,0)
(127,461,0)
(337,176,0)
(97,467,0)
(608,515,0)
(431,421,0)
(116,567,0)
(149,224,0)
(283,331,0)
(515,107,0)
(573,280,0)
(121,451,0)
(527,298,0)
(91,548,0)
(37,461,0)
(236,107,0)
(159,116,0)
(128,461,0)
(287,572,0)
(605,89,0)
(397,461,0)
(388,224,0)
(116,188,0)
(431,79,0)
(485,358,0)
(366,572,0)
(88,381,0)
(215,544,0)
(182,115,0)
(28,527,0)
(263,515,0)
(129,16,0)
(64,443,0)
(209,388,0)
(432,567,0)
(620,176,0)
(165,417,0)
(499,197,0)
(299,124,0)
(266,111,0)
(409,185,0)
(295,82,0)
(527,567,0)
(222,32,0)
(36,111,0)
(569,282,0)
(402,515,0)
(116,572,0)
(339,166,0)
(521,484,0)
(305,168,0)
(515,451,0)
(244,187,0)
(598,508,0)
(621,168,0)
(120,330,0)
(602,68,0)
(118,184,0)
(402,461,0)
(548,567,0)
(58,572,0)
(230,567,0)
(497,251,0)
(43,188,0)
(230,515,0)
(84,454,0)
(0,271,0)
(174,572,0)
(246,276,0)
(124,251,0)
(15,371,0)
(519,406,0)
(413,331,0)
(223,515,0)
(194,339,0)
(296,461,0)
(268,111,0)
(591,482,0)
(100,460,0)
(548,515,0)
(590,461,0)
(6,461,0)
(611,415,0)
(252,407,0)
(193,23,0)
(46,24,0)
(57,35,0)
(34,609,0)
(7,16,0)
(618,206,0)
(196,621,0)
(95,572,0)
(389,122,0)
(140,271,0)
(579,461,0)
(397,572,0)
(158,39,0)
(305,475,0)
(220,475,0)
(177,515,0)
(301,111,0)
(527,461,0)
(32,471,0)
(407,21,0)
(142,271,0)
(579,111,0)
(312,461,0)
(534,628,0)
(369,567,0)
(92,19,0)
(215,467,0)
(355,166,0)
(462,454,0)
(541,567,0)
(71,97,0)
(507,360,0)
(22,245,0)
(365,328,0)
(608,423,0)
(562,134,0)
(32,461,0)
(39,273,0)
(266,345,0)
(32,515,0)
(323,42,0)
(495,111,0)
(592,228,0)
(617,603,0)
(52,122,0)
(426,266,0)
(410,544,0)
(613,37,0)
(116,515,0)
(579,437,0)
(418,338,0)
(154,388,0)
(566,184,0)
(206,515,0)
(122,111,0)
(206,567,0)
(398,139,0)
(195,176,0)
(263,461,0)
(370,92,0)
(421,165,0)
(82,381,0)
(379,467,0)
(180,471,0)
(607,142,0)
(301,572,0)
(373,481,0)
(359,402,0)
(56,605,0)
(421,337,0)
(314,61,0)
(408,567,0)
(77,157,0)
(112,572,0)
(587,406,0)
(495,515,0)
(560,124,0)
(356,78,0)
(232,224,0)
(527,271,0)
(253,75,0)
(143,111,0)
(386,461,0)
(421,481,0)
(540,408,0)
(362,287,0)
(175,195,0)
(286,399,0)
(578,430,0)
(191,319,0)
(410,168,0)
(531,294,0)
(268,567,0)
(75,188,0)
(527,111,0)
(319,188,0)
(208,525,0)
(589,188,0)
(614,251,0)
(42,188,0)
(5,58,0)
(431,128,0)
(374,589,0)
(312,381,0)
(104,535,0)
(396,461,0)
(41,511,0)
(489,235,0)
(88,567,0)
(495,417,0)
(95,515,0)
(67,305,0)
(204,434,0)
(402,572,0)
(630,302,0)
(447,500,0)
(228,176,0)
(215,475,0)
(172,541,0)
(63,88,0)
(33,89,0)
(410,114,0)
(449,524,0)
(90,143,0)
(305,114,0)
(495,567,0)
(509,567,0)
(408,111,0)
(184,111,0)
(224,388,0)
(412,225,0)
(427,345,0)
(408,572,0)
(79,461,0)
(434,589,0)
(128,431,0)
(350,24,0)
(410,115,0)
(421,114,0)
(1,461,0)
(545,176,0)
(241,515,0)
(331,124,0)
(83,100,0)
(239,527,0)
(604,280,0)
(214,42,0)
(119,430,0)
(95,567,0)
(23,49,0)
(302,188,0)
(179,454,0)
(582,548,0)
(305,180,0)
(32,111,0)
(107,484,0)
(16,188,0)
(422,220,0)
(549,511,0)
(277,260,0)
(381,251,0)
(571,251,0)
(501,308,0)
(95,194,0)
(242,245,0)
(3,1,0)
(510,407,0)
(23,193,0)
(74,358,0)
(265,49,0)
(88,461,0)
(96,225,0)
(536,410,0)
(593,502,0)
(466,608,0)
(475,220,0)
(48,237,0)
(410,300,0)
(608,438,0)
(363,544,0)
(577,193,0)
(282,511,0)
(185,176,0)
(23,237,0)
(410,371,0)
(392,52,0)
(529,366,0)
(231,613,0)
(281,424,0)
(520,268,0)
(391,125,0)
(314,515,0)
(312,587,0)
(199,421,0)
(134,277,0)
(142,139,0)
(24,461,0)
(352,124,0)
(138,608,0)
(305,248,0)
(612,541,0)
(621,124,0)
(577,480,0)
(498,251,0)
(610,628,0)
(273,111,0)
(454,567,0)
(6,345,0)
(64,271,0)
(100,49,0)
(255,480,0)
(22,572,0)
(407,72,0)
(505,95,0)
(376,591,0)
(430,111,0)
(70,236,0)
(463,37,0)
(168,598,0)
(73,49,0)
(122,572,0)
(424,397,0)
(600,155,0)
(478,188,0)
(97,461,0)
(410,129,0)
(50,395,0)
(66,407,0)
(308,107,0)
(528,188,0)
(91,589,0)
(464,460,0)
(237,461,0)
(305,396,0)
(225,96,0)
(502,49,0)
(371,620,0)
(0,176,0)
(25,312,0)
(432,461,0)
(81,608,0)
(357,620,0)
(549,348,0)
(319,271,0)
(321,0,0)
(416,228,0)
(493,188,0)
(30,166,0)
(294,461,0)
(189,407,0)
(462,188,0)
(476,263,0)
(410,396,0)
(95,111,0)
(421,228,0)
(421,188,0)
(147,509,0)
(420,129,0)
(236,94,0)
(608,567,0)
(319,515,0)
(550,521,0)
(430,567,0)
(495,572,0)
(65,127,0)
(224,149,0)
(177,111,0)
(358,515,0)
(217,180,0)
(397,567,0)
(421,180,0)
(406,467,0)
(591,515,0)
(215,344,0)
(1,497,0)
(212,111,0)
(603,550,0)
(410,165,0)
(419,348,0)
(116,29,0)
(410,509,0)
(160,382,0)
(300,374,0)
(114,124,0)
(127,515,0)
(36,572,0)
(305,481,0)
(541,383,0)
(579,567,0)
(351,606,0)
(521,550,0)
(432,111,0)
(268,515,0)
(268,461,0)
(421,195,0)
(320,6,0)
(500,627,0)
(309,339,0)
(24,515,0)
(19,92,0)
(548,572,0)
(490,338,0)
(178,282,0)
(338,188,0)
(541,515,0)
(541,111,0)
(273,567,0)
(157,77,0)
(310,377,0)
(248,155,0)
(446,377,0)
(454,111,0)
(266,381,0)
(294,515,0)
(122,567,0)
(97,271,0)
(168,621,0)
(37,215,0)
(53,287,0)
(79,345,0)
(110,268,0)
(554,177,0)
(287,515,0)
(506,627,0)
(68,109,0)
(58,515,0)
(140,199,0)
(316,176,0)
(421,300,0)
(480,461,0)
(22,567,0)
(206,111,0)
(206,461,0)
(326,37,0)
(227,157,0)
(145,197,0)
(546,129,0)
(212,567,0)
(206,572,0)
(523,433,0)
(89,49,0)
(556,623,0)
(563,456,0)
(79,111,0)
(358,381,0)
(55,432,0)
(453,608,0)
(58,461,0)
(495,381,0)
(9,525,0)
(274,589,0)
(547,590,0)
(96,310,0)
(491,527,0)
(372,188,0)
(137,188,0)
(53,188,0)
(393,79,0)
(480,577,0)
(219,623,0)
(100,221,0)
(297,21,0)
(618,188,0)
(146,68,0)
(481,141,0)
(421,431,0)
(482,591,0)
(421,231,0)
(522,97,0)
(184,251,0)
(543,319,0)
(236,614,0)
(202,127,0)
(40,195,0)
(608,572,0)
(184,124,0)
(608,467,0)
(430,581,0)
(440,128,0)
(572,251,0)
(37,572,0)
(184,567,0)
(221,89,0)
(265,72,0)
(403,206,0)
(579,572,0)
(527,515,0)
(228,462,0)
(610,461,0)
(305,344,0)
(459,523,0)
(312,515,0)
(432,381,0)
(206,618,0)
(305,88,0)
(110,452,0)
(514,215,0)
(127,111,0)
(399,100,0)
(620,371,0)
(263,502,0)
(428,212,0)
(445,163,0)
(132,484,0)
(441,273,0)
(268,229,0)
(215,88,0)
(509,515,0)
(79,431,0)
(424,589,0)
(589,434,0)
(61,314,0)
(550,603,0)
(608,111,0)
(603,271,0)
(500,572,0)
(37,567,0)
(272,603,0)
(388,271,0)
(92,271,0)
(257,610,0)
(128,515,0)
(358,111,0)
(264,315,0)
(51,142,0)
(88,111,0)
(580,188,0)
(296,111,0)
(250,248,0)
(122,515,0)
(215,180,0)
(278,484,0)
(397,424,0)
(79,572,0)
(387,197,0)
(59,128,0)
(211,618,0)
(517,77,0)
(421,168,0)
(258,560,0)
(105,452,0)
(141,488,0)
(97,111,0)
(24,111,0)
(626,605,0)
(513,495,0)
(544,498,0)
(487,299,0)
(101,277,0)
(411,567,0)
(1,515,0)
(221,100,0)
(93,19,0)
(344,458,0)
(216,609,0)
(339,406,0)
(532,263,0)
(410,560,0)
(266,461,0)
(280,604,0)
(291,188,0)
(468,300,0)
(230,461,0)
(497,1,0)
(97,515,0)
(86,199,0)
(32,567,0)
(241,567,0)
(516,352,0)
(366,461,0)
(131,402,0)
(548,461,0)
(178,109,0)
(348,567,0)
(148,460,0)
(377,107,0)
(263,111,0)
(410,337,0)
(215,382,0)
(371,623,0)
(270,627,0)
(35,488,0)
(287,111,0)
(579,515,0)
(166,188,0)
(54,515,0)
(267,109,0)
(500,567,0)
(575,251,0)
(58,111,0)
(24,567,0)
(615,143,0)
(129,176,0)
(301,515,0)
(548,91,0)
(163,282,0)
(396,572,0)
(215,168,0)
(366,567,0)
(570,58,0)
(386,567,0)
(331,413,0)
(349,407,0)
(22,461,0)
(100,399,0)
(194,266,0)
(307,452,0)
(622,623,0)
(457,124,0)
(151,623,0)
(126,242,0)
(595,265,0)
(294,567,0)
(165,176,0)
(421,544,0)
(328,628,0)
(628,610,0)
(116,461,0)
(148,49,0)
(333,188,0)
(430,515,0)
(410,228,0)
(293,621,0)
(442,387,0)
(284,577,0)
(598,533,0)
(417,188,0)
(471,32,0)
(421,396,0)
(421,382,0)
(332,549,0)
(500,215,0)
(143,461,0)
(287,53,0)
(199,140,0)
(319,567,0)
(302,339,0)
(123,622,0)
(342,276,0)
(421,344,0)
(294,145,0)
(290,188,0)
(469,287,0)
(114,482,0)
(377,614,0)
(210,116,0)
(215,509,0)
(410,382,0)
(407,298,0)
(503,609,0)
(366,515,0)
(155,429,0)
(97,298,0)
(266,194,0)
(190,545,0)
(597,314,0)
(402,215,0)
(454,461,0)
(384,297,0)
(11,523,0)
(504,140,0)
(541,215,0)
(319,461,0)
(193,577,0)
(231,176,0)
(458,251,0)
(80,560,0)
(613,188,0)
(177,461,0)
(587,312,0)
(548,111,0)
(450,114,0)
(541,461,0)
(518,116,0)
(212,461,0)
(542,165,0)
(509,461,0)
(381,82,0)
(601,229,0)
(327,23,0)
(150,188,0)
(325,294,0)
(164,591,0)
(241,111,0)
(406,166,0)
(296,572,0)
(567,260,0)
(430,461,0)
(207,511,0)
(36,567,0)
(432,614,0)
(215,396,0)
(343,319,0)
(583,188,0)
(167,188,0)
(173,606,0)
(352,271,0)
(180,124,0)
(162,413,0)
(348,461,0)
(294,124,0)
(4,579,0)
(484,521,0)
(111,549,0)
(345,188,0)
(285,178,0)
(205,299,0)
(187,115,0)
(319,572,0)
(482,251,0)
(266,572,0)
(111,511,0)
(297,461,0)
(287,461,0)
(318,88,0)
(410,481,0)
(148,251,0)
(599,383,0)
(495,461,0)
(178,338,0)
(49,265,0)
(67,212,0)
(36,461,0)
(380,397,0)
(624,348,0)
(556,185,0)
(628,328,0)
(509,601,0)
(553,241,0)
(62,206,0)
(280,36,0)
(560,614,0)
(435,399,0)
(322,396,0)
(474,157,0)
(218,6,0)
(32,215,0)
(604,238,0)
(79,381,0)
(107,235,0)
(479,188,0)
(458,230,0)
(304,188,0)
(256,107,0)
(401,111,0)
(358,567,0)
(249,544,0)
(276,360,0)
(608,271,0)
(374,188,0)
(502,263,0)
(26,509,0)
(225,298,0)
(149,184,0)
(456,563,0)
(596,237,0)
(184,149,0)
(268,572,0)
(334,273,0)
(508,598,0)
(76,230,0)
(588,91,0)
(319,438,0)
(544,124,0)
(177,567,0)
(115,507,0)
(161,301,0)
(171,396,0)
(305,467,0)
(584,579,0)
(339,188,0)
(52,21,0)
(375,608,0)
(586,220,0)
(439,188,0)
(163,338,0)
(346,187,0)
(1,111,0)
(212,515,0)
(170,377,0)
(12,277,0)
(366,111,0)
(425,282,0)
(314,461,0)
(141,423,0)
(29,116,0)
(471,251,0)
(273,39,0)
(358,461,0)
(430,176,0)
(538,508,0)
(312,111,0)
(410,6,0)
(310,96,0)
(397,111,0)
(317,168,0)
(396,567,0)
(201,432,0)
(443,29,0)
(22,515,0)
(492,545,0)
(305,67,0)
(341,188,0)
(37,613,0)
(414,188,0)
(348,572,0)
(402,567,0)
(305,560,0)
(421,560,0)
(248,124,0)
(454,572,0)
(280,623,0)
(273,515,0)
(22,156,0)
(448,165,0)
(184,461,0)
(413,609,0)
(22,111,0)
(116,111,0)
(452,110,0)
(303,225,0)
(591,567,0)
(496,260,0)
(367,231,0)
(6,515,0)
(627,500,0)
(455,264,0)
(500,461,0)
(405,111,0)
(311,512,0)
(185,556,0)
(79,515,0)
(186,266,0)
(195,289,0)
(430,572,0)
(88,515,0)
(397,381,0)
(206,410,0)
(37,111,0)
(404,319,0)
(502,460,0)
(337,53,0)
(461,297,0)
(14,270,0)
(475,305,0)
(82,124,0)
(347,38,0)
(410,248,0)
(61,467,0)
(385,328,0)
(396,215,0)
(69,337,0)
(127,242,0)
(368,289,0)
(143,515,0)
(454,515,0)
(314,215,0)
(143,215,0)
(94,451,0)
(128,567,0)
(530,590,0)
(313,251,0)
(328,461,0)
(371,604,0)
(226,268,0)
(561,456,0)
(82,148,0)
(436,248,0)
(396,515,0)
(134,42,0)
(410,344,0)
(382,124,0)
(105,271,0)
(348,111,0)
(136,408,0)
(408,515,0)
(366,587,0)
(58,567,0)
(122,461,0)
(331,482,0)
(454,462,0)
(241,461,0)
(292,312,0)
(305,509,0)
(628,49,0)
(460,358,0)
(616,302,0)
(127,567,0)
(407,438,0)
(377,310,0)
(115,187,0)
(525,78,0)
(509,111,0)
(408,461,0)
(122,188,0)
(378,296,0)
(525,271,0)
(156,22,0)
(197,145,0)
(484,107,0)
(215,114,0)
(296,410,0)
(192,382,0)
(421,6,0)
(406,587,0)
(117,366,0)
(85,114,0)
(127,572,0)
(576,216,0)
(494,608,0)
(591,461,0)
(60,64,0)
(308,96,0)
(353,331,0)
(302,406,0)
(627,270,0)
(400,310,0)
(410,231,0)
(37,515,0)
(301,67,0)
(527,572,0)
(434,72,0)
(89,221,0)
(200,548,0)
(557,36,0)
(18,163,0)
(608,298,0)
(574,241,0)
(301,567,0)
(215,248,0)
(275,480,0)
(184,515,0)
(358,460,0)
(444,296,0)
(314,572,0)
(629,430,0)
(456,298,0)
(296,567,0)
(507,423,0)
(106,188,0)
(259,230,0)
(473,19,0)
(585,507,0)
(240,550,0)
(185,53,0)
(345,589,0)
(306,36,0)
(402,111,0)
(19,473,0)
(336,290,0)
(279,387,0)
(508,609,0)
(87,563,0)
(79,567,0)
(78,525,0)
(156,77,0)
(608,461,0)
(6,111,0)
(95,461,0)
(89,460,0)
(302,166,0)
(10,344,0)
(399,567,0)
(139,142,0)
(8,188,0)
(194,95,0)
(128,111,0)
(145,294,0)
(361,319,0)
(143,125,0)
(144,551,0)
(443,64,0)
(558,461,0)
(591,111,0)
(152,319,0)
(213,386,0)
(116,176,1)
(348,567,1)
(408,540,1)
(409,102,1)
(230,76,1)
(114,450,1)
(421,248,1)
(421,431,1)
(455,539,1)
(76,259,1)
(197,387,1)
(129,176,1)
(15,620,1)
(525,271,1)
(407,72,1)
(117,529,1)
(213,555,1)
(627,506,1)
(22,567,1)
(219,462,1)
(168,621,1)
(133,300,1)
(563,87,1)
(592,613,1)
(591,111,1)
(608,138,1)
(24,567,1)
(42,214,1)
(534,257,1)
(570,618,1)
(421,129,1)
(357,44,1)
(387,442,1)
(308,96,1)
(48,327,1)
(305,396,1)
(608,271,1)
(331,482,1)
(230,515,1)
(95,111,1)
(399,567,1)
(416,592,1)
(83,590,1)
(506,500,1)
(463,326,1)
(287,461,1)
(177,554,1)
(425,569,1)
(32,461,1)
(410,129,1)
(206,572,1)
(294,124,1)
(74,485,1)
(127,567,1)
(545,492,1)
(78,525,1)
(555,61,1)
(64,271,1)
(476,532,1)
(195,175,1)
(212,111,1)
(44,556,1)
(215,168,1)
(622,623,1)
(572,112,1)
(227,58,1)
(421,195,1)
(247,597,1)
(183,73,1)
(125,143,1)
(215,344,1)
(380,261,1)
(527,111,1)
(305,88,1)
(206,111,1)
(134,277,1)
(541,461,1)
(548,200,1)
(193,23,1)
(320,218,1)
(184,567,1)
(579,567,1)
(319,461,1)
(588,386,1)
(3,155,1)
(375,81,1)
(116,518,1)
(52,392,1)
(281,502,1)
(112,174,1)
(139,142,1)
(122,515,1)
(410,114,1)
(620,357,1)
(1,515,1)
(541,215,1)
(196,413,1)
(358,381,1)
(406,587,1)
(549,348,1)
(157,474,1)
(337,354,1)
(125,391,1)
(128,111,1)
(95,461,1)
(454,572,1)
(539,134,1)
(410,115,1)
(392,437,1)
(6,572,1)
(340,623,1)
(628,328,1)
(210,159,1)
(22,461,1)
(443,181,1)
(140,271,1)
(397,567,1)
(515,107,1)
(396,171,1)
(407,21,1)
(32,567,1)
(241,515,1)
(13,481,1)
(305,114,1)
(58,515,1)
(79,111,1)
(385,365,1)
(482,591,1)
(475,364,1)
(589,434,1)
(212,461,1)
(326,231,1)
(450,85,1)
(263,461,1)
(75,402,1)
(548,461,1)
(47,1,1)
(287,515,1)
(98,70,1)
(95,567,1)
(292,25,1)
(32,215,1)
(527,515,1)
(625,475,1)
(206,461,1)
(200,582,1)
(280,36,1)
(541,567,1)
(97,461,1)
(541,111,1)
(321,316,1)
(504,339,1)
(155,600,1)
(115,187,1)
(296,444,1)
(445,308,1)
(233,522,1)
(477,504,1)
(530,193,1)
(410,231,1)
(177,461,1)
(410,560,1)
(221,89,1)
(334,408,1)
(206,567,1)
(339,194,1)
(111,549,1)
(215,475,1)
(618,211,1)
(434,594,1)
(432,381,1)
(343,543,1)
(410,509,1)
(1,324,1)
(280,623,1)
(175,40,1)
(75,253,1)
(202,65,1)
(237,596,1)
(107,484,1)
(608,423,1)
(79,552,1)
(148,49,1)
(460,358,1)
(203,68,1)
(225,303,1)
(35,57,1)
(397,515,1)
(497,1,1)
(529,312,1)
(610,461,1)
(46,121,1)
(80,498,1)
(454,515,1)
(280,573,1)
(300,468,1)
(128,515,1)
(140,477,1)
(101,12,1)
(312,572,1)
(323,166,1)
(620,176,1)
(215,382,1)
(297,384,1)
(273,215,1)
(517,157,1)
(266,461,1)
(273,515,1)
(421,344,1)
(102,340,1)
(509,26,1)
(588,270,1)
(396,515,1)
(160,299,1)
(355,30,1)
(531,145,1)
(452,307,1)
(615,90,1)
(314,572,1)
(135,509,1)
(421,6,1)
(123,604,1)
(24,515,1)
(119,578,1)
(278,521,1)
(37,567,1)
(151,219,1)
(432,515,1)
(509,111,1)
(63,413,1)
(5,570,1)
(605,626,1)
(128,461,1)
(430,515,1)
(242,126,1)
(550,603,1)
(288,367,1)
(215,509,1)
(408,567,1)
(421,88,1)
(215,481,1)
(97,572,1)
(241,567,1)
(421,114,1)
(89,460,1)
(579,515,1)
(138,494,1)
(459,134,1)
(334,289,1)
(406,406,1)
(454,461,1)
(147,268,1)
(17,222,1)
(1,111,1)
(58,111,1)
(263,111,1)
(473,19,1)
(366,567,1)
(584,4,1)
(319,515,1)
(282,425,1)
(124,352,1)
(397,461,1)
(6,515,1)
(270,627,1)
(276,246,1)
(294,111,1)
(364,220,1)
(345,589,1)
(268,572,1)
(508,241,1)
(185,176,1)
(285,407,1)
(432,201,1)
(582,588,1)
(134,42,1)
(127,572,1)
(215,88,1)
(266,572,1)
(411,203,1)
(269,314,1)
(417,495,1)
(498,483,1)
(91,548,1)
(173,351,1)
(170,501,1)
(177,515,1)
(562,335,1)
(116,567,1)
(382,192,1)
(386,567,1)
(22,515,1)
(305,475,1)
(599,541,1)
(265,72,1)
(223,54,1)
(373,606,1)
(410,6,1)
(266,186,1)
(513,526,1)
(172,612,1)
(465,156,1)
(279,177,1)
(601,135,1)
(295,153,1)
(296,515,1)
(410,300,1)
(331,283,1)
(0,321,1)
(143,567,1)
(66,189,1)
(421,560,1)
(122,567,1)
(46,347,1)
(266,567,1)
(28,421,1)
(120,545,1)
(399,461,1)
(57,20,1)
(180,124,1)
(314,215,1)
(525,208,1)
(201,55,1)
(318,63,1)
(36,515,1)
(558,589,1)
(176,0,1)
(607,51,1)
(358,515,1)
(58,5,1)
(432,111,1)
(393,199,1)
(608,298,1)
(249,148,1)
(421,509,1)
(366,515,1)
(546,420,1)
(421,544,1)
(548,567,1)
(165,448,1)
(319,438,1)
(187,244,1)
(421,165,1)
(115,182,1)
(527,271,1)
(308,107,1)
(230,567,1)
(187,271,1)
(191,361,1)
(483,544,1)
(36,572,1)
(182,187,1)
(510,349,1)
(608,572,1)
(605,461,1)
(171,322,1)
(410,475,1)
(116,572,1)
(553,574,1)
(199,86,1)
(502,263,1)
(141,423,1)
(532,24,1)
(576,598,1)
(481,606,1)
(624,332,1)
(464,91,1)
(626,56,1)
(71,305,1)
(344,124,1)
(466,270,1)
(628,49,1)
(527,239,1)
(495,111,1)
(541,172,1)
(199,140,1)
(116,461,1)
(234,217,1)
(591,461,1)
(216,609,1)
(335,50,1)
(566,118,1)
(421,371,1)
(376,114,1)
(312,381,1)
(305,248,1)
(356,525,1)
(305,168,1)
(348,572,1)
(186,426,1)
(241,553,1)
(317,621,1)
(495,515,1)
(370,99,1)
(358,111,1)
(156,77,1)
(610,257,1)
(230,111,1)
(178,282,1)
(468,568,1)
(139,398,1)
(302,406,1)
(418,490,1)
(560,258,1)
(454,111,1)
(121,515,1)
(491,28,1)
(178,338,1)
(319,572,1)
(543,191,1)
(116,111,1)
(597,215,1)
(402,515,1)
(16,7,1)
(24,111,1)
(162,216,1)
(77,517,1)
(163,338,1)
(305,481,1)
(608,111,1)
(95,515,1)
(392,524,1)
(421,300,1)
(111,401,1)
(520,110,1)
(547,530,1)
(302,166,1)
(90,97,1)
(266,111,1)
(509,461,1)
(480,461,1)
(64,60,1)
(612,527,1)
(348,419,1)
(228,176,1)
(305,544,1)
(134,562,1)
(224,232,1)
(184,566,1)
(58,567,1)
(325,619,1)
(408,461,1)
(523,11,1)
(305,509,1)
(410,165,1)
(406,166,1)
(82,295,1)
(509,515,1)
(431,79,1)
(613,37,1)
(500,461,1)
(1,461,1)
(307,105,1)
(257,461,1)
(268,110,1)
(216,576,1)
(371,623,1)
(441,334,1)
(152,343,1)
(122,389,1)
(421,337,1)
(388,271,1)
(22,572,1)
(386,515,1)
(319,567,1)
(495,461,1)
(58,461,1)
(158,273,1)
(588,601,1)
(198,24,1)
(88,461,1)
(366,117,1)
(384,558,1)
(397,572,1)
(591,515,1)
(97,515,1)
(402,572,1)
(268,461,1)
(540,136,1)
(132,278,1)
(122,111,1)
(374,133,1)
(527,298,1)
(480,255,1)
(590,547,1)
(606,271,1)
(143,572,1)
(264,455,1)
(548,111,1)
(127,202,1)
(410,180,1)
(327,577,1)
(81,453,1)
(131,556,1)
(46,486,1)
(185,53,1)
(116,29,1)
(347,221,1)
(579,584,1)
(296,111,1)
(410,396,1)
(487,205,1)
(394,465,1)
(22,111,1)
(503,34,1)
(310,400,1)
(162,609,1)
(350,46,1)
(22,156,1)
(358,74,1)
(485,464,1)
(443,64,1)
(18,445,1)
(593,263,1)
(319,423,1)
(46,221,1)
(37,572,1)
(39,273,1)
(335,120,1)
(495,567,1)
(402,215,1)
(386,213,1)
(590,461,1)
(277,101,1)
(352,271,1)
(410,344,1)
(61,269,1)
(424,397,1)
(130,184,1)
(591,567,1)
(410,337,1)
(630,122,1)
(294,515,1)
(436,250,1)
(248,436,1)
(413,609,1)
(273,572,1)
(142,607,1)
(499,387,1)
(410,228,1)
(100,399,1)
(220,271,1)
(586,422,1)
(253,402,1)
(248,124,1)
(527,461,1)
(3,177,1)
(273,111,1)
(378,383,1)
(268,226,1)
(548,381,1)
(88,567,1)
(530,610,1)
(348,111,1)
(294,461,1)
(408,515,1)
(500,215,1)
(215,396,1)
(212,381,1)
(617,256,1)
(396,461,1)
(519,608,1)
(61,314,1)
(332,460,1)
(82,148,1)
(437,579,1)
(604,280,1)
(12,567,1)
(421,231,1)
(603,272,1)
(557,306,1)
(25,519,1)
(389,52,1)
(329,161,1)
(335,611,1)
(616,302,1)
(536,296,1)
(174,497,1)
(621,124,1)
(37,215,1)
(194,266,1)
(502,49,1)
(608,515,1)
(126,127,1)
(605,381,1)
(27,386,1)
(312,292,1)
(348,461,1)
(34,458,1)
(296,461,1)
(24,350,1)
(421,168,1)
(143,111,1)
(396,572,1)
(206,403,1)
(331,124,1)
(36,461,1)
(95,572,1)
(374,589,1)
(179,228,1)
(296,572,1)
(193,577,1)
(402,111,1)
(421,180,1)
(169,266,1)
(301,329,1)
(305,180,1)
(386,572,1)
(550,240,1)
(4,139,1)
(507,423,1)
(402,359,1)
(358,572,1)
(454,567,1)
(97,298,1)
(622,123,1)
(221,100,1)
(377,107,1)
(93,92,1)
(184,149,1)
(366,461,1)
(88,318,1)
(37,461,1)
(96,225,1)
(521,550,1)
(143,615,1)
(420,417,1)
(218,75,1)
(527,572,1)
(408,111,1)
(402,461,1)
(190,176,1)
(287,572,1)
(312,461,1)
(560,124,1)
(346,276,1)
(500,572,1)
(407,438,1)
(273,567,1)
(594,204,1)
(54,94,1)
(351,35,1)
(610,628,1)
(572,124,1)
(518,210,1)
(316,424,1)
(97,111,1)
(301,461,1)
(609,503,1)
(421,481,1)
(324,3,1)
(340,622,1)
(454,84,1)
(309,319,1)
(366,572,1)
(608,567,1)
(1,215,1)
(214,323,1)
(328,461,1)
(548,572,1)
(382,124,1)
(73,42,1)
(286,83,1)
(446,170,1)
(19,93,1)
(195,176,1)
(185,482,1)
(241,461,1)
(163,282,1)
(37,463,1)
(37,111,1)
(430,567,1)
(342,383,1)
(166,355,1)
(544,124,1)
(344,470,1)
(402,567,1)
(495,381,1)
(0,271,1)
(345,427,1)
(113,382,1)
(306,371,1)
(568,545,1)
(432,567,1)
(85,614,1)
(410,371,1)
(209,154,1)
(396,567,1)
(128,572,1)
(424,589,1)
(273,441,1)
(197,499,1)
(428,625,1)
(24,461,1)
(432,461,1)
(9,254,1)
(29,443,1)
(421,228,1)
(127,111,1)
(353,162,1)
(579,572,1)
(143,461,1)
(40,430,1)
(319,111,1)
(31,27,1)
(215,560,1)
(232,388,1)
(522,71,1)
(285,163,1)
(403,62,1)
(215,544,1)
(505,169,1)
(410,88,1)
(603,271,1)
(289,368,1)
(564,424,1)
(105,271,1)
(397,380,1)
(301,572,1)
(92,271,1)
(184,461,1)
(303,412,1)
(153,88,1)
(319,271,1)
(474,227,1)
(297,21,1)
(421,475,1)
(287,469,1)
(14,627,1)
(407,66,1)
(39,158,1)
(471,32,1)
(314,461,1)
(352,516,1)
(161,212,1)
(500,567,1)
(127,515,1)
(305,560,1)
(65,22,1)
(217,482,1)
(500,515,1)
(447,564,1)
(144,299,1)
(52,21,1)
(619,531,1)
(595,183,1)
(386,461,1)
(237,461,1)
(148,460,1)
(621,293,1)
(377,614,1)
(163,18,1)
(215,514,1)
(100,49,1)
(256,563,1)
(629,119,1)
(608,461,1)
(211,206,1)
(244,346,1)
(60,559,1)
(116,515,1)
(268,111,1)
(99,408,1)
(89,49,1)
(6,111,1)
(11,459,1)
(154,381,1)
(246,342,1)
(561,198,1)
(371,620,1)
(495,572,1)
(168,609,1)
(58,572,1)
(6,461,1)
(596,48,1)
(541,515,1)
(614,432,1)
(618,206,1)
(508,538,1)
(386,111,1)
(458,230,1)
(296,567,1)
(83,277,1)
(457,502,1)
(192,160,1)
(215,180,1)
(255,275,1)
(263,476,1)
(32,515,1)
(241,111,1)
(114,124,1)
(273,461,1)
(538,241,1)
(184,515,1)
(501,107,1)
(127,461,1)
(452,105,1)
(230,461,1)
(19,92,1)
(605,567,1)
(339,406,1)
(544,363,1)
(266,515,1)
(143,515,1)
(500,111,1)
(396,111,1)
(96,310,1)
(435,286,1)
(378,507,1)
(369,411,1)
(79,567,1)
(337,176,1)
(515,223,1)
(236,107,1)
(254,264,1)
(516,457,1)
(222,180,1)
(494,375,1)
(508,609,1)
(236,98,1)
(281,572,1)
(91,589,1)
(10,471,1)
(212,572,1)
(541,572,1)
(62,410,1)
(110,452,1)
(305,67,1)
(591,164,1)
(268,567,1)
(97,567,1)
(181,64,1)
(461,297,1)
(444,378,1)
(308,501,1)
(412,310,1)
(239,491,1)
(261,281,1)
(448,542,1)
(51,254,1)
(7,129,1)
(359,131,1)
(212,567,1)
(440,79,1)
(410,544,1)
(149,224,1)
(484,132,1)
(497,47,1)
(185,409,1)
(305,344,1)
(574,168,1)
(335,144,1)
(368,195,1)
(302,630,1)
(401,405,1)
(361,39,1)
(579,461,1)
(206,215,1)
(231,176,1)
(180,234,1)
(215,114,1)
(391,143,1)
(567,369,1)
(542,374,1)
(258,80,1)
(456,298,1)
(49,265,1)
(270,14,1)
(606,173,1)
(381,82,1)
(122,461,1)
(366,111,1)
(88,111,1)
(442,279,1)
(184,111,1)
(383,541,1)
(254,523,1)
(367,53,1)
(545,176,1)
(339,166,1)
(507,585,1)
(208,9,1)
(573,36,1)
(32,111,1)
(94,236,1)
(141,13,1)
(205,124,1)
(78,356,1)
(554,130,1)
(462,454,1)
(623,151,1)
(36,557,1)
(430,176,1)
(77,157,1)
(79,381,1)
(302,339,1)
(168,317,1)
(430,473,1)
(434,72,1)
(509,567,1)
(6,567,1)
(68,146,1)
(410,481,1)
(492,190,1)
(407,271,1)
(56,33,1)
(362,337,1)
(407,298,1)
(408,572,1)
(354,69,1)
(314,567,1)
(53,287,1)
(88,515,1)
(87,456,1)
(263,567,1)
(177,111,1)
(456,561,1)
(148,113,1)
(97,271,1)
(26,147,1)
(314,247,1)
(410,168,1)
(322,141,1)
(36,111,1)
(445,563,1)
(387,271,1)
(598,508,1)
(556,623,1)
(30,338,1)
(484,521,1)
(100,460,1)
(305,382,1)
(59,440,1)
(23,237,1)
(84,179,1)
(67,301,1)
(36,567,1)
(266,381,1)
(363,249,1)
(358,461,1)
(145,197,1)
(314,111,1)
(579,111,1)
(118,2,1)
(410,248,1)
(275,284,1)
(79,572,1)
(430,572,1)
(410,536,1)
(358,567,1)
(430,629,1)
(430,111,1)
(563,456,1)
(502,593,1)
(335,58,1)
(310,377,1)
(189,510,1)
(559,345,1)
(348,515,1)
(421,396,1)
(314,515,1)
(32,17,1)
(79,461,1)
(2,149,1)
(527,567,1)
(82,124,1)
(128,567,1)
(206,515,1)
(578,473,1)
(608,438,1)
(569,111,1)
(335,242,1)
(226,520,1)
(481,373,1)
(142,271,1)
(206,410,1)
(328,385,1)
(157,271,1)
(449,78,1)
(89,605,1)
(377,446,1)
(204,274,1)
(301,515,1)
(236,614,1)
(400,377,1)
(55,560,1)
(410,195,1)
(79,515,1)
(311,193,1)
(284,610,1)
(220,586,1)
(299,124,1)
(319,404,1)
(86,140,1)
(23,49,1)
(165,176,1)
(410,382,1)
(587,312,1)
(427,6,1)
(411,590,1)
(194,95,1)
(349,252,1)
(431,128,1)
(495,513,1)
(266,345,1)
(294,145,1)
(602,178,1)
(371,15,1)
(397,111,1)
(486,282,1)
(419,624,1)
(600,248,1)
(548,515,1)
(212,428,1)
(611,91,1)
(69,16,1)
(259,344,1)
(404,152,1)
(500,447,1)
(552,393,1)
(70,308,1)
(390,163,1)
(426,309,1)
(20,125,1)
(228,416,1)
(274,49,1)
(224,388,1)
(294,567,1)
(50,39,1)
(319,298,1)
(177,567,1)
(231,288,1)
(146,602,1)
(502,460,1)
(470,10,1)
(159,29,1)
(312,515,1)
(240,603,1)
(365,534,1)
(322,125,1)
(509,572,1)
(469,362,1)
(524,449,1)
(294,325,1)
(293,196,1)
(225,298,1)
(514,396,1)
(430,461,1)
(252,390,1)
(97,233,1)
(312,111,1)
(33,100,1)
(627,500,1)
(585,115,1)
(287,567,1)
(388,209,1)
(405,549,1)
(212,515,1)
(128,59,1)
(46,311,1)
(301,567,1)
(67,212,1)
(526,165,1)
(37,515,1)
(122,572,1)
(299,487,1)
(556,185,1)
(587,366,1)
(453,466,1)
(129,546,1)
(268,515,1)
(577,480,1)
(410,199,1)
(421,382,1)
(272,617,1)
(413,331,1)
(300,176,1)
(263,515,1)
(215,248,1)
(287,111,1)
(283,353,1)
(136,116,1)
(178,285,1)
(398,142,1)
(164,376,1)
(312,567,1)
(184,124,1)
(22,394,1)
(383,599,1)
(1,567,1)
(6,320,1)
(577,49,1)
(250,294,1)
(422,406,1)
(265,595,1)
(143,215,1)
(95,505,1)
(397,381,1)
(301,111,1)
(105,31,1)
(92,370,1)
(399,435,1)
(79,345,1)
(338,418,1)
(475,220,1)
(509,515,2)
(348,91,2)
(91,589,2)
(269,270,2)
(399,563,2)
(32,111,2)
(221,610,2)
(456,24,2)
(206,410,2)
(33,100,2)
(86,39,2)
(296,567,2)
(145,177,2)
(456,298,2)
(432,299,2)
(541,39,2)
(23,577,2)
(596,577,2)
(37,545,2)
(312,515,2)
(387,271,2)
(340,545,2)
(519,270,2)
(312,572,2)
(102,545,2)
(359,545,2)
(319,572,2)
(587,270,2)
(413,413,2)
(197,177,2)
(111,91,2)
(344,124,2)
(427,545,2)
(61,270,2)
(168,609,2)
(410,115,2)
(386,111,2)
(517,58,2)
(337,545,2)
(78,525,2)
(145,197,2)
(326,545,2)
(319,271,2)
(598,508,2)
(147,386,2)
(366,270,2)
(296,111,2)
(548,461,2)
(115,187,2)
(515,107,2)
(29,443,2)
(378,39,2)
(1,515,2)
(509,567,2)
(617,563,2)
(503,299,2)
(199,39,2)
(388,271,2)
(36,567,2)
(553,413,2)
(163,308,2)
(182,383,2)
(481,125,2)
(480,610,2)
(293,413,2)
(316,424,2)
(366,572,2)
(294,177,2)
(454,111,2)
(100,460,2)
(32,215,2)
(268,110,2)
(463,545,2)
(107,484,2)
(446,501,2)
(591,515,2)
(441,545,2)
(466,270,2)
(319,39,2)
(58,461,2)
(180,299,2)
(216,413,2)
(146,563,2)
(273,515,2)
(305,248,2)
(314,515,2)
(582,424,2)
(83,563,2)
(532,91,2)
(101,308,2)
(380,502,2)
(236,107,2)
(432,515,2)
(406,406,2)
(410,560,2)
(613,37,2)
(193,610,2)
(305,270,2)
(268,572,2)
(570,39,2)
(314,270,2)
(6,567,2)
(61,314,2)
(169,39,2)
(177,567,2)
(482,591,2)
(126,58,2)
(603,563,2)
(156,58,2)
(286,563,2)
(567,590,2)
(358,515,2)
(82,124,2)
(107,563,2)
(408,545,2)
(101,563,2)
(452,386,2)
(386,572,2)
(421,337,2)
(541,515,2)
(347,221,2)
(302,339,2)
(24,567,2)
(181,545,2)
(294,145,2)
(621,413,2)
(79,567,2)
(435,308,2)
(377,107,2)
(568,545,2)
(413,609,2)
(215,509,2)
(397,502,2)
(296,461,2)
(397,299,2)
(208,254,2)
(87,24,2)
(541,567,2)
(598,413,2)
(399,567,2)
(492,424,2)
(500,111,2)
(89,460,2)
(100,563,2)
(305,481,2)
(202,58,2)
(215,396,2)
(608,271,2)
(100,399,2)
(286,308,2)
(211,39,2)
(95,515,2)
(331,299,2)
(560,124,2)
(327,577,2)
(421,248,2)
(268,461,2)
(18,563,2)
(402,461,2)
(577,610,2)
(219,545,2)
(328,257,2)
(36,461,2)
(97,111,2)
(102,556,2)
(215,544,2)
(294,515,2)
(78,254,2)
(37,567,2)
(590,461,2)
(277,590,2)
(88,461,2)
(410,300,2)
(23,49,2)
(97,298,2)
(612,39,2)
(314,215,2)
(343,39,2)
(334,545,2)
(305,88,2)
(406,270,2)
(430,408,2)
(178,338,2)
(263,111,2)
(153,299,2)
(348,111,2)
(143,111,2)
(302,406,2)
(550,603,2)
(402,215,2)
(437,254,2)
(58,39,2)
(79,572,2)
(608,438,2)
(407,163,2)
(608,298,2)
(432,111,2)
(608,270,2)
(294,111,2)
(143,215,2)
(407,438,2)
(118,299,2)
(127,572,2)
(421,129,2)
(212,270,2)
(500,424,2)
(134,277,2)
(294,461,2)
(0,271,2)
(332,91,2)
(587,366,2)
(608,423,2)
(629,408,2)
(58,572,2)
(194,95,2)
(586,270,2)
(440,39,2)
(559,545,2)
(534,257,2)
(608,572,2)
(117,270,2)
(25,270,2)
(613,545,2)
(319,111,2)
(421,228,2)
(627,500,2)
(180,124,2)
(555,270,2)
(22,515,2)
(127,111,2)
(287,567,2)
(226,386,2)
(331,413,2)
(77,157,2)
(193,577,2)
(116,461,2)
(566,299,2)
(151,545,2)
(579,572,2)
(230,111,2)
(215,88,2)
(449,254,2)
(79,345,2)
(273,215,2)
(94,236,2)
(431,79,2)
(194,266,2)
(220,271,2)
(308,563,2)
(410,396,2)
(210,545,2)
(417,495,2)
(224,299,2)
(411,308,2)
(396,461,2)
(186,39,2)
(75,402,2)
(344,299,2)
(310,501,2)
(387,177,2)
(627,424,2)
(168,413,2)
(83,193,2)
(12,590,2)
(468,545,2)
(67,212,2)
(620,176,2)
(89,100,2)
(56,100,2)
(498,299,2)
(223,308,2)
(191,39,2)
(376,299,2)
(611,91,2)
(407,21,2)
(246,383,2)
(354,545,2)
(410,231,2)
(140,39,2)
(544,124,2)
(122,515,2)
(410,509,2)
(408,572,2)
(319,461,2)
(430,176,2)
(540,545,2)
(283,413,2)
(116,545,2)
(28,39,2)
(110,386,2)
(319,298,2)
(320,545,2)
(591,111,2)
(592,545,2)
(396,572,2)
(375,270,2)
(312,111,2)
(6,545,2)
(215,344,2)
(296,515,2)
(122,572,2)
(195,408,2)
(143,515,2)
(434,72,2)
(421,165,2)
(230,567,2)
(484,521,2)
(252,163,2)
(278,563,2)
(2,299,2)
(339,194,2)
(430,461,2)
(430,111,2)
(240,563,2)
(300,176,2)
(230,461,2)
(470,299,2)
(314,461,2)
(241,413,2)
(288,545,2)
(268,515,2)
(83,308,2)
(500,215,2)
(609,299,2)
(319,438,2)
(351,125,2)
(526,545,2)
(301,572,2)
(268,567,2)
(228,545,2)
(383,541,2)
(263,567,2)
(421,509,2)
(248,124,2)
(539,134,2)
(93,408,2)
(273,461,2)
(525,271,2)
(287,461,2)
(371,556,2)
(7,545,2)
(268,386,2)
(12,308,2)
(234,299,2)
(530,193,2)
(618,206,2)
(68,308,2)
(89,605,2)
(143,567,2)
(364,270,2)
(345,545,2)
(527,271,2)
(421,344,2)
(62,39,2)
(410,6,2)
(301,567,2)
(185,482,2)
(593,91,2)
(579,461,2)
(509,386,2)
(591,299,2)
(410,168,2)
(224,388,2)
(399,308,2)
(116,176,2)
(321,424,2)
(506,424,2)
(113,299,2)
(358,572,2)
(273,545,2)
(410,371,2)
(129,545,2)
(205,502,2)
(331,482,2)
(116,515,2)
(184,567,2)
(597,270,2)
(114,299,2)
(122,567,2)
(396,270,2)
(283,299,2)
(217,299,2)
(536,39,2)
(352,271,2)
(196,413,2)
(523,134,2)
(80,299,2)
(616,302,2)
(221,308,2)
(563,24,2)
(410,195,2)
(473,408,2)
(112,299,2)
(410,165,2)
(397,572,2)
(402,572,2)
(206,215,2)
(410,481,2)
(22,461,2)
(82,148,2)
(424,589,2)
(100,610,2)
(156,77,2)
(292,270,2)
(116,111,2)
(5,39,2)
(300,545,2)
(522,270,2)
(480,461,2)
(500,461,2)
(32,299,2)
(388,299,2)
(14,424,2)
(215,168,2)
(513,545,2)
(163,282,2)
(371,620,2)
(408,111,2)
(241,515,2)
(261,299,2)
(544,299,2)
(179,545,2)
(241,461,2)
(280,623,2)
(460,358,2)
(425,91,2)
(31,386,2)
(19,408,2)
(149,299,2)
(552,39,2)
(185,556,2)
(399,193,2)
(143,461,2)
(567,563,2)
(236,308,2)
(18,308,2)
(215,560,2)
(303,501,2)
(572,299,2)
(250,177,2)
(165,176,2)
(406,587,2)
(231,176,2)
(32,567,2)
(564,424,2)
(339,406,2)
(521,563,2)
(139,142,2)
(266,515,2)
(296,39,2)
(397,515,2)
(362,545,2)
(541,111,2)
(495,515,2)
(97,271,2)
(96,310,2)
(417,545,2)
(178,282,2)
(620,556,2)
(268,111,2)
(340,556,2)
(538,413,2)
(16,545,2)
(402,545,2)
(363,299,2)
(100,193,2)
(346,383,2)
(128,567,2)
(502,460,2)
(525,254,2)
(233,270,2)
(421,431,2)
(399,461,2)
(602,308,2)
(299,124,2)
(390,163,2)
(170,501,2)
(421,544,2)
(518,545,2)
(96,501,2)
(22,58,2)
(301,461,2)
(410,129,2)
(273,572,2)
(475,220,2)
(79,39,2)
(424,397,2)
(58,567,2)
(76,299,2)
(124,502,2)
(600,177,2)
(324,299,2)
(215,270,2)
(579,567,2)
(614,299,2)
(527,111,2)
(305,382,2)
(435,610,2)
(216,609,2)
(397,111,2)
(276,383,2)
(6,111,2)
(187,271,2)
(263,461,2)
(619,177,2)
(495,461,2)
(366,111,2)
(64,271,2)
(410,382,2)
(101,590,2)
(79,461,2)
(185,176,2)
(74,91,2)
(474,58,2)
(9,254,2)
(259,299,2)
(547,193,2)
(189,163,2)
(95,572,2)
(1,111,2)
(285,563,2)
(404,39,2)
(164,299,2)
(53,287,2)
(510,163,2)
(206,515,2)
(29,545,2)
(22,111,2)
(299,502,2)
(410,88,2)
(237,577,2)
(400,501,2)
(84,545,2)
(95,567,2)
(366,515,2)
(24,515,2)
(157,271,2)
(628,49,2)
(608,111,2)
(130,299,2)
(67,270,2)
(248,177,2)
(6,461,2)
(13,125,2)
(97,461,2)
(247,270,2)
(421,300,2)
(142,271,2)
(491,39,2)
(403,39,2)
(430,515,2)
(499,177,2)
(286,610,2)
(413,331,2)
(319,515,2)
(357,556,2)
(46,24,2)
(212,567,2)
(36,556,2)
(398,254,2)
(314,567,2)
(367,545,2)
(48,577,2)
(165,545,2)
(97,270,2)
(527,572,2)
(213,270,2)
(486,91,2)
(481,606,2)
(421,231,2)
(606,125,2)
(15,556,2)
(377,614,2)
(97,515,2)
(225,298,2)
(601,386,2)
(58,111,2)
(218,545,2)
(543,39,2)
(281,299,2)
(301,111,2)
(306,556,2)
(22,156,2)
(402,111,2)
(138,270,2)
(556,545,2)
(127,461,2)
(143,270,2)
(227,58,2)
(312,270,2)
(386,567,2)
(531,177,2)
(477,39,2)
(431,128,2)
(53,545,2)
(301,515,2)
(194,39,2)
(52,21,2)
(444,39,2)
(270,424,2)
(146,308,2)
(96,225,2)
(302,166,2)
(520,386,2)
(561,24,2)
(515,308,2)
(445,563,2)
(144,299,2)
(309,39,2)
(424,502,2)
(410,344,2)
(287,545,2)
(177,299,2)
(311,193,2)
(97,572,2)
(132,563,2)
(426,39,2)
(212,515,2)
(614,432,2)
(622,623,2)
(602,563,2)
(266,381,2)
(366,461,2)
(280,556,2)
(421,39,2)
(249,299,2)
(24,111,2)
(148,299,2)
(348,515,2)
(198,24,2)
(119,408,2)
(82,299,2)
(37,572,2)
(314,572,2)
(621,124,2)
(92,271,2)
(369,590,2)
(228,176,2)
(83,610,2)
(263,91,2)
(421,396,2)
(266,567,2)
(422,270,2)
(507,423,2)
(37,111,2)
(85,299,2)
(141,423,2)
(604,556,2)
(206,39,2)
(88,567,2)
(424,299,2)
(603,271,2)
(529,270,2)
(206,572,2)
(177,111,2)
(231,545,2)
(275,610,2)
(548,111,2)
(502,91,2)
(591,567,2)
(508,413,2)
(345,589,2)
(365,257,2)
(286,193,2)
(350,24,2)
(128,461,2)
(459,134,2)
(273,111,2)
(220,270,2)
(305,67,2)
(161,270,2)
(70,308,2)
(209,299,2)
(509,111,2)
(331,124,2)
(95,461,2)
(1,299,2)
(319,567,2)
(460,91,2)
(282,91,2)
(421,560,2)
(206,111,2)
(184,461,2)
(407,271,2)
(127,567,2)
(177,515,2)
(232,299,2)
(413,299,2)
(508,609,2)
(160,299,2)
(128,39,2)
(556,556,2)
(212,461,2)
(285,308,2)
(358,381,2)
(542,545,2)
(95,111,2)
(567,308,2)
(497,299,2)
(215,382,2)
(605,567,2)
(505,39,2)
(443,545,2)
(174,299,2)
(399,610,2)
(585,383,2)
(36,572,2)
(63,299,2)
(550,563,2)
(437,579,2)
(171,270,2)
(369,308,2)
(44,556,2)
(237,461,2)
(66,163,2)
(261,502,2)
(454,545,2)
(605,461,2)
(369,563,2)
(591,461,2)
(476,91,2)
(436,177,2)
(297,21,2)
(421,382,2)
(607,254,2)
(6,572,2)
(279,177,2)
(287,572,2)
(502,49,2)
(483,299,2)
(618,39,2)
(556,623,2)
(91,424,2)
(266,39,2)
(215,180,2)
(396,567,2)
(527,461,2)
(608,567,2)
(377,501,2)
(32,515,2)
(443,64,2)
(502,263,2)
(495,111,2)
(608,461,2)
(590,610,2)
(221,89,2)
(599,39,2)
(294,124,2)
(114,124,2)
(37,215,2)
(469,545,2)
(177,461,2)
(305,544,2)
(393,39,2)
(294,567,2)
(263,515,2)
(420,545,2)
(361,39,2)
(134,42,2)
(221,193,2)
(421,88,2)
(587,312,2)
(142,254,2)
(51,254,2)
(421,6,2)
(187,383,2)
(356,254,2)
(0,424,2)
(458,299,2)
(178,563,2)
(37,515,2)
(115,383,2)
(88,515,2)
(32,461,2)
(157,58,2)
(22,572,2)
(319,423,2)
(149,224,2)
(584,254,2)
(193,23,2)
(545,424,2)
(305,475,2)
(185,53,2)
(287,111,2)
(163,563,2)
(409,556,2)
(159,545,2)
(435,563,2)
(548,567,2)
(230,515,2)
(155,177,2)
(265,72,2)
(461,297,2)
(3,299,2)
(296,572,2)
(136,545,2)
(36,515,2)
(176,424,2)
(317,413,2)
(495,381,2)
(46,91,2)
(39,545,2)
(1,567,2)
(462,454,2)
(507,383,2)
(128,111,2)
(68,563,2)
(212,111,2)
(385,257,2)
(1,461,2)
(573,556,2)
(339,166,2)
(215,475,2)
(6,515,2)
(143,572,2)
(548,515,2)
(305,396,2)
(569,91,2)
(605,381,2)
(410,475,2)
(495,567,2)
(116,29,2)
(253,545,2)
(318,299,2)
(358,111,2)
(122,461,2)
(312,461,2)
(421,114,2)
(35,125,2)
(264,134,2)
(435,193,2)
(272,563,2)
(473,19,2)
(527,298,2)
(397,567,2)
(428,270,2)
(500,567,2)
(59,39,2)
(421,195,2)
(184,124,2)
(452,105,2)
(60,545,2)
(348,572,2)
(397,381,2)
(382,124,2)
(431,39,2)
(454,572,2)
(576,413,2)
(624,91,2)
(162,413,2)
(325,177,2)
(348,567,2)
(430,567,2)
(386,515,2)
(410,544,2)
(353,299,2)
(495,545,2)
(501,563,2)
(349,163,2)
(124,352,2)
(604,280,2)
(154,299,2)
(277,308,2)
(197,387,2)
(95,39,2)
(94,308,2)
(255,610,2)
(184,111,2)
(450,299,2)
(230,299,2)
(236,614,2)
(482,299,2)
(127,58,2)
(579,515,2)
(201,299,2)
(626,100,2)
(50,39,2)
(606,271,2)
(419,91,2)
(284,610,2)
(623,545,2)
(266,572,2)
(312,567,2)
(36,111,2)
(500,572,2)
(24,91,2)
(270,627,2)
(195,176,2)
(79,111,2)
(410,39,2)
(212,572,2)
(556,185,2)
(24,461,2)
(110,452,2)
(421,168,2)
(508,241,2)
(348,461,2)
(410,228,2)
(589,434,2)
(615,270,2)
(549,91,2)
(497,1,2)
(453,270,2)
(215,248,2)
(244,383,2)
(329,270,2)
(116,567,2)
(92,408,2)
(139,254,2)
(67,301,2)
(410,180,2)
(206,461,2)
(430,572,2)
(448,545,2)
(100,308,2)
(421,475,2)
(509,572,2)
(125,143,2)
(610,461,2)
(572,124,2)
(342,383,2)
(141,125,2)
(465,58,2)
(88,111,2)
(79,381,2)
(12,563,2)
(122,111,2)
(287,515,2)
(352,502,2)
(133,545,2)
(128,572,2)
(178,308,2)
(527,515,2)
(411,590,2)
(524,254,2)
(405,91,2)
(557,556,2)
(222,299,2)
(328,461,2)
(447,424,2)
(22,567,2)
(579,254,2)
(203,308,2)
(500,515,2)
(577,49,2)
(386,461,2)
(530,610,2)
(105,386,2)
(241,111,2)
(628,328,2)
(54,308,2)
(577,480,2)
(58,515,2)
(546,545,2)
(454,567,2)
(307,386,2)
(71,270,2)
(374,545,2)
(100,49,2)
(541,461,2)
(454,461,2)
(131,545,2)
(410,248,2)
(184,299,2)
(266,461,2)
(88,299,2)
(371,623,2)
(305,560,2)
(203,563,2)
(578,408,2)
(175,408,2)
(407,72,2)
(258,299,2)
(608,515,2)
(421,481,2)
(184,149,2)
(527,567,2)
(225,501,2)
(402,515,2)
(374,589,2)
(416,545,2)
(381,82,2)
(280,36,2)
(322,270,2)
(484,563,2)
(391,270,2)
(221,100,2)
(588,424,2)
(168,621,2)
(370,408,2)
(409,545,2)
(185,545,2)
(281,502,2)
(199,140,2)
(23,237,2)
(128,515,2)
(215,114,2)
(79,515,2)
(89,49,2)
(410,114,2)
(91,548,2)
(353,413,2)
(411,563,2)
(121,308,2)
(358,567,2)
(295,299,2)
(215,481,2)
(373,125,2)
(135,386,2)
(27,386,2)
(454,515,2)
(310,377,2)
(485,91,2)
(277,563,2)
(125,270,2)
(64,545,2)
(628,257,2)
(514,270,2)
(184,515,2)
(212,381,2)
(49,265,2)
(266,111,2)
(549,348,2)
(432,567,2)
(192,299,2)
(410,337,2)
(475,270,2)
(430,473,2)
(516,502,2)
(127,515,2)
(421,180,2)
(314,111,2)
(305,509,2)
(20,125,2)
(337,176,2)
(158,545,2)
(358,461,2)
(305,114,2)
(458,230,2)
(432,461,2)
(574,413,2)
(77,58,2)
(471,299,2)
(37,461,2)
(97,567,2)
(366,567,2)
(206,567,2)
(457,502,2)
(421,371,2)
(622,556,2)
(4,254,2)
(368,408,2)
(99,408,2)
(408,567,2)
(172,39,2)
(148,49,2)
(65,58,2)
(471,32,2)
(162,299,2)
(221,563,2)
(394,58,2)
(241,567,2)
(75,545,2)
(308,107,2)
(610,628,2)
(350,91,2)
(464,91,2)
(548,572,2)
(69,545,2)
(442,177,2)
(541,215,2)
(289,408,2)
(396,111,2)
(396,515,2)
(34,299,2)
(140,271,2)
(10,299,2)
(19,92,2)
(47,299,2)
(402,567,2)
(40,408,2)
(504,39,2)
(305,168,2)
(1,215,2)
(312,381,2)
(407,298,2)
(129,176,2)
(358,91,2)
(148,460,2)
(547,610,2)
(579,111,2)
(305,180,2)
(386,270,2)
(266,345,2)
(301,270,2)
(563,456,2)
(273,567,2)
(308,96,2)
(521,550,2)
(24,24,2)
(397,461,2)
(380,299,2)
(382,299,2)
(432,381,2)
(381,299,2)
(625,270,2)
(200,424,2)
(111,549,2)
(494,270,2)
(90,270,2)
(163,338,2)
(120,545,2)
(455,134,2)
(190,424,2)
(39,273,2)
(11,134,2)
(239,39,2)
(445,308,2)
(242,58,2)
(17,299,2)
(554,299,2)
(605,100,2)
(487,502,2)
(339,39,2)
(495,572,2)
(173,125,2)
(116,572,2)
(305,344,2)
(560,299,2)
(590,193,2)
(541,572,2)
(105,271,2)
(412,501,2)
(98,308,2)
(548,424,2)
(548,381,2)
(408,515,2)
(55,299,2)
(81,270,2)
(527,39,2)
(123,556,2)
(545,176,2)
(401,91,2)
(462,545,2)
(410,199,2)
(256,563,2)
(176,0,2)
(383,39,2)
(408,461,2)
(152,39,2)
(57,125,2)
(26,386,2)
(509,461,2)
(406,166,2)
-----------------------------------
(0,rack_alloc(rack)
(1,rsm->r_flags)
(2,rsm)
(3,rsm)
(4,rsm)
(5,r_in_tmap)
(6,rsm->r_end)
(7,0)
(8,nrsm)
(9,rack)
(10,nrsm)
(11,1)
(12,used_ref)
(13,cts)
(14,0)
(15,idx)
(16,nrsm->r_rtr_bytes = 0)
(17,r_flags)
(18,1)
(19,rack->r_ctl.rc_tmap)
(20,rack_reorder_seen)
(21,struct rack_sendmap **prsm)
(22,TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext)
(23,SEQ_LT(start, rsm->r_end)
(24,rsm == NULL)
(25,rsm)
(26,r_in_tmap)
(27,rack)
(28,tp)
(29,&rack->r_ctl.rc_map)
(30,changed)
(31,r_ctl)
(32,rsm->r_flags)
(33,start)
(34,idx)
(35,counter_u64_add(rack_reorder_seen, 1)
(36,rsm->r_tim_lastsent)
(37,rsm->r_flags)
(38,)
(39,rsm->r_flags & RACK_ACKED)
(40,nrsm)
(41,if (end == rsm->r_end)
(42,used_ref = 1)
(43,if (used_ref == 0)
(44,nrsm)
(45,if (rsm == NULL)
(46,rsm)
(47,~RACK_HAS_FIN)
(48,rsm)
(49,start = sack->start)
(50,goto out;)
(51,rack)
(52,*prsm)
(53,nrsm->r_rtr_cnt = rsm->r_rtr_cnt)
(54,rsm)
(55,rsm)
(56,rsm)
(57,1)
(58,rsm->r_in_tmap)
(59,r_start)
(60,r_ctl)
(61,rsm->r_flags &= ~RACK_TLP)
(62,rsm)
(63,rsm)
(64,rack->r_ctl)
(65,rsm)
(66,prsm)
(67,rsm->r_end - rsm->r_start)
(68,counter_u64_add(rack_sack_proc_restart, 1)
(69,nrsm)
(70,nrsm)
(71,tp)
(72,struct sackblk *sack)
(73,start)
(74,r_end)
(75,rsm->r_flags &= (~RACK_HAS_FIN)
(76,r_sndcnt)
(77,rack->r_ctl.rc_tmap)
(78,rack->r_ctl.rc_sacklast)
(79,rsm->r_end)
(80,nrsm)
(81,rsm)
(82,nrsm->r_start)
(83,start)
(84,r_sndcnt)
(85,nrsm)
(86,rc_sacked)
(87,TF_SENTFIN)
(88,rsm->r_end)
(89,SEQ_LT(start, rsm->r_end)
(90,rsm)
(91,end == rsm->r_end)
(92,rack->r_ctl)
(93,rc_tmap)
(94,nrsm->r_end++)
(95,rsm->r_start)
(96,(nrsm->r_end + 1)
(97,rack_log_sack_passed(tp, rack, rsm)
(98,r_end)
(99,rack)
(100,SEQ_GEQ(start, rsm->r_start)
(101,0)
(102,nrsm)
(103,if (rsm->r_start != start)
(104,if (SEQ_GEQ(start, rsm->r_start)
(105,rack->r_ctl)
(106,if (rsm->r_flags & RACK_ACKED)
(107,nrsm = TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next)
(108,if (times == 1)
(109,)
(110,&rack->r_ctl.rc_tmap)
(111,rsm = nrsm)
(112,nrsm)
(113,start)
(114,nrsm->r_rtr_cnt)
(115,rack->r_ctl.rc_reorder_ts)
(116,TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next)
(117,r_start)
(118,nrsm)
(119,nrsm)
(120,goto out;)
(121,goto do_rest_ofb;)
(122,*prsm = rsm)
(123,idx)
(124,nrsm = rack_alloc(rack)
(125,rsm->r_flags & RACK_SACK_PASSED)
(126,0)
(127,rsm->r_in_tmap)
(128,rsm->r_start)
(129,nrsm->r_rtr_bytes)
(130,rsm)
(131,rsm)
(132,r_next)
(133,end)
(134,used_ref == 0)
(135,0)
(136,rsm)
(137,if (nrsm == NULL)
(138,SACKED)
(139,rack->r_ctl.rc_sacklast)
(140,rack->r_ctl)
(141,rack->r_ctl.rc_reorder_ts = cts)
(142,rack->r_ctl)
(143,rsm->r_flags)
(144,goto out;)
(145,&rack->r_ctl.rc_tmap)
(146,1)
(147,rsm)
(148,nrsm->r_start = start)
(149,&rack->r_ctl.rc_map)
(150,for (idx = 0; idx < nrsm->r_rtr_cnt; idx++)
(151,0)
(152,cts)
(153,nrsm)
(154,rack)
(155,nrsm->r_in_tmap = 1)
(156,&rack->r_ctl.rc_tmap)
(157,rack->r_ctl)
(158,RACK_ACKED)
(159,rsm)
(160,nrsm)
(161,rsm)
(162,idx)
(163,times == 1)
(164,r_rtr_cnt)
(165,nrsm->r_end)
(166,changed = 0)
(167,times)
(168,nrsm->r_tim_lastsent[idx])
(169,rsm)
(170,nrsm)
(171,r_flags)
(172,r_flags)
(173,r_ctl)
(174,rsm)
(175,r_in_tmap)
(176,nrsm = rack_alloc(rack)
(177,rsm->r_in_tmap)
(178,times++)
(179,rsm)
(180,nrsm->r_flags)
(181,rc_map)
(182,rc_reorder_ts)
(183,sack)
(184,TAILQ_INSERT_AFTER(&rack->r_ctl.rc_map, rsm, nrsm, r_next)
(185,nrsm->r_rtr_cnt)
(186,r_end)
(187,rack->r_ctl)
(188,)
(189,to)
(190,nrsm)
(191,rack)
(192,r_start)
(193,SEQ_GEQ(start, rsm->r_start)
(194,rsm->r_end - rsm->r_start)
(195,nrsm->r_in_tmap)
(196,nrsm)
(197,rack->r_ctl.rc_tmap)
(198,tp)
(199,rack->r_ctl.rc_sacked)
(200,r_end)
(201,r_end)
(202,r_in_tmap)
(203,goto start_at_beginning;)
(204,sack)
(205,nrsm)
(206,rsm->r_flags)
(207,if ((rsm->r_flags & RACK_ACKED)
(208,r_ctl)
(209,r_ctl)
(210,nrsm)
(211,~RACK_TLP)
(212,rsm->r_end)
(213,r_in_tmap)
(214,1)
(215,rsm->r_flags |= RACK_ACKED)
(216,idx++)
(217,nrsm)
(218,rsm)
(219,idx)
(220,rack->r_ctl)
(221,SEQ_GEQ(start, rsm->r_start)
(222,rsm)
(223,nrsm)
(224,rack->r_ctl.rc_map)
(225,tp->snd_max)
(226,r_tnext)
(227,rack)
(228,nrsm->r_sndcnt)
(229,)
(230,rsm->r_sndcnt)
(231,nrsm->r_flags)
(232,rc_map)
(233,rsm)
(234,r_flags)
(235,)
(236,nrsm->r_end)
(237,rsm->r_end)
(238,)
(239,rsm)
(240,rc_map)
(241,rsm->r_tim_lastsent)
(242,rsm->r_in_tmap = 0)
(243,if (rsm->r_in_tmap)
(244,r_ctl)
(245,)
(246,1)
(247,r_flags)
(248,nrsm->r_in_tmap)
(249,nrsm)
(250,nrsm)
(251,)
(252,tp)
(253,~RACK_HAS_FIN)
(254,rsm)
(255,r_start)
(256,nrsm)
(257,rsm)
(258,r_end)
(259,rsm)
(260,)
(261,rsm)
(262,)
(263,rsm->r_start)
(264,counter_u64_add(rack_sack_proc_all, 1)
(265,sack->start)
(266,rsm->r_end)
(267,if (tp->t_flags & TF_SENTFIN)
(268,TAILQ_REMOVE(&rack->r_ctl.rc_tmap, rsm, r_tnext)
(269,~RACK_TLP)
(270,(rsm->r_flags & RACK_ACKED)
(271,struct tcp_rack *rack)
(272,r_ctl)
(273,rsm->r_flags)
(274,end)
(275,rsm)
(276,counter_u64_add(rack_reorder_seen, 1)
(277,used_ref = 0)
(278,rack_sendmap)
(279,rack)
(280,rsm->r_tim_lastsent[idx])
(281,end)
(282,times = 0)
(283,r_rtr_cnt)
(284,start)
(285,times)
(286,rsm)
(287,rsm->r_rtr_cnt)
(288,r_flags)
(289,nrsm->r_in_tmap = 1)
(290,)
(291,if (rsm->r_flags & RACK_SACK_PASSED)
(292,r_end)
(293,r_tim_lastsent)
(294,TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext)
(295,r_start)
(296,rsm->r_flags)
(297,*prsm)
(298,struct tcpcb *tp)
(299,nrsm == NULL)
(300,nrsm->r_start)
(301,rsm->r_start)
(302,return (changed)
(303,snd_max)
(304,out:)
(305,rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start)
(306,rsm)
(307,rc_tmap)
(308,nrsm && (nrsm->r_end + 1)
(309,changed)
(310,nrsm->r_end + 1)
(311,goto do_rest_ofb;)
(312,rsm->r_end)
(313,if (rsm->r_in_tmap)
(314,rsm->r_flags)
(315,)
(316,nrsm)
(317,idx)
(318,r_end)
(319,rack_update_rtt(tp, rack, rsm, to, cts, SACKED)
(320,r_end)
(321,rack)
(322,rsm)
(323,used_ref)
(324,r_flags)
(325,r_tnext)
(326,rsm)
(327,start)
(328,rsm->r_start)
(329,r_start)
(330,)
(331,nrsm->r_rtr_cnt)
(332,nrsm)
(333,if (rsm)
(334,rsm)
(335,used_ref)
(336,if (SEQ_GEQ(start, rsm->r_start)
(337,nrsm->r_rtr_cnt)
(338,times = 0)
(339,changed += (rsm->r_end - rsm->r_start)
(340,idx)
(341,if (rsm == NULL)
(342,rack_reorder_seen)
(343,to)
(344,nrsm->r_sndcnt)
(345,rsm->r_end = end)
(346,rack)
(347,break;)
(348,TAILQ_NEXT(rsm, r_next)
(349,rack)
(350,NULL)
(351,rack)
(352,rack_alloc(rack)
(353,nrsm)
(354,r_rtr_cnt)
(355,0)
(356,rc_sacklast)
(357,r_tim_lastsent)
(358,rsm->r_end)
(359,r_flags)
(360,)
(361,tp)
(362,rsm)
(363,r_rtr_bytes)
(364,rc_sacked)
(365,rsm)
(366,rsm->r_start)
(367,nrsm)
(368,1)
(369,NULL)
(370,r_ctl)
(371,nrsm->r_tim_lastsent[idx])
(372,do_rest_ofb:)
(373,rc_reorder_ts)
(374,nrsm->r_start = end)
(375,to)
(376,rsm)
(377,nrsm->r_end)
(378,rsm)
(379,if (rsm->r_flags & RACK_SACK_PASSED)
(380,r_end)
(381,rsm->r_end = nrsm->r_start)
(382,nrsm->r_start)
(383,rsm->r_flags & RACK_SACK_PASSED)
(384,prsm)
(385,r_start)
(386,rsm->r_in_tmap)
(387,rack->r_ctl)
(388,rack->r_ctl)
(389,rsm)
(390,"tp:%p rack:%p sack:%p to:%p prsm:%p")
(391,RACK_SACK_PASSED)
(392,prsm)
(393,rsm)
(394,r_tnext)
(395,)
(396,rsm->r_flags)
(397,rsm->r_end)
(398,rc_sacklast)
(399,rsm->r_start)
(400,1)
(401,nrsm)
(402,rsm->r_flags)
(403,r_flags)
(404,SACKED)
(405,rsm)
(406,changed += (rsm->r_end - rsm->r_start)
(407,panic("tp:%p rack:%p sack:%p to:%p prsm:%p",\n\\n\\t\\t\\t    tp, rack, sack, to, prsm)
(408,rsm->r_in_tmap)
(409,r_rtr_cnt)
(410,rsm->r_flags |= RACK_ACKED)
(411,rsm)
(412,tp)
(413,idx < nrsm->r_rtr_cnt)
(414,idx)
(415,)
(416,r_sndcnt)
(417,nrsm->r_end = rsm->r_end)
(418,0)
(419,r_next)
(420,nrsm)
(421,rack->r_ctl.rc_sacked += (rsm->r_end - rsm->r_start)
(422,rack)
(423,uint32_t cts)
(424,SEQ_GEQ(end, rsm->r_end)
(425,0)
(426,rsm)
(427,end)
(428,r_end)
(429,)
(430,TAILQ_INSERT_AFTER(&rack->r_ctl.rc_tmap, rsm, nrsm, r_tnext)
(431,rsm->r_end - rsm->r_start)
(432,rsm->r_end)
(433,)
(434,sack->end)
(435,r_start)
(436,r_in_tmap)
(437,rack->r_ctl.rc_sacklast = TAILQ_NEXT(rsm, r_next)
(438,struct tcpopt *to)
(439,end)
(440,rsm)
(441,r_flags)
(442,r_ctl)
(443,rack->r_ctl.rc_map)
(444,r_flags)
(445,times)
(446,r_end)
(447,r_flags)
(448,r_end)
(449,NULL)
(450,r_rtr_cnt)
(451,)
(452,rack->r_ctl.rc_tmap)
(453,rack)
(454,rsm->r_sndcnt)
(455,1)
(456,tp->t_flags)
(457,nrsm)
(458,nrsm->r_sndcnt = rsm->r_sndcnt)
(459,rack_sack_proc_short)
(460,start = rsm->r_end)
(461,rsm = *prsm)
(462,nrsm->r_sndcnt = rsm->r_sndcnt)
(463,r_flags)
(464,start)
(465,rsm)
(466,tp)
(467,)
(468,r_start)
(469,r_rtr_cnt)
(470,r_sndcnt)
(471,nrsm->r_flags = rsm->r_flags)
(472,rsm)
(473,&rack->r_ctl.rc_tmap)
(474,r_ctl)
(475,rack->r_ctl.rc_sacked)
(476,r_start)
(477,r_ctl)
(478,changed)
(479,if (rsm->r_in_tmap)
(480,rsm->r_start)
(481,rack->r_ctl.rc_reorder_ts)
(482,nrsm->r_rtr_cnt = rsm->r_rtr_cnt)
(483,0)
(484,TAILQ_LAST_FAST(&rack->r_ctl.rc_map, rack_sendmap, r_next)
(485,rsm)
(486,goto do_rest_ofb;)
(487,NULL)
(488,)
(489,if (nrsm && (nrsm->r_end + 1)
(490,times)
(491,rack)
(492,NULL)
(493,if (rsm->r_in_tmap)
(494,cts)
(495,rsm->r_end)
(496,start_at_beginning:)
(497,rsm->r_flags &= (~RACK_HAS_FIN)
(498,nrsm->r_rtr_bytes = 0)
(499,rc_tmap)
(500,rsm->r_flags)
(501,nrsm)
(502,rsm->r_start != start)
(503,0)
(504,rack)
(505,r_start)
(506,RACK_ACKED)
(507,rack->r_ctl.rc_reorder_ts = cts)
(508,rsm->r_tim_lastsent[idx])
(509,rsm->r_in_tmap)
(510,sack)
(511,)
(512,)
(513,r_end)
(514,RACK_ACKED)
(515,rsm = nrsm)
(516,rack)
(517,rc_tmap)
(518,r_next)
(519,changed)
(520,rsm)
(521,&rack->r_ctl.rc_map)
(522,rack)
(523,counter_u64_add(rack_sack_proc_short, 1)
(524,rack->r_ctl.rc_sacklast = NULL)
(525,rack->r_ctl)
(526,rsm)
(527,rack_log_sack_passed(tp, rack, rsm)
(528,used_ref)
(529,rsm)
(530,rsm)
(531,rsm)
(532,rsm)
(533,)
(534,start)
(535,)
(536,RACK_ACKED)
(537,)
(538,idx)
(539,rack_sack_proc_all)
(540,r_in_tmap)
(541,rsm->r_flags)
(542,nrsm)
(543,rsm)
(544,nrsm->r_rtr_bytes)
(545,nrsm == NULL)
(546,r_rtr_bytes)
(547,NULL)
(548,rsm->r_end)
(549,nrsm = TAILQ_NEXT(rsm, r_next)
(550,rack->r_ctl.rc_map)
(551,)
(552,r_end)
(553,r_tim_lastsent)
(554,r_in_tmap)
(555,rsm)
(556,idx < nrsm->r_rtr_cnt)
(557,r_tim_lastsent)
(558,rsm)
(559,rack)
(560,nrsm->r_end)
(561,t_flags)
(562,0)
(563,tp->t_flags & TF_SENTFIN)
(564,rsm)
(565,if (SEQ_GEQ(end, rsm->r_end)
(566,r_next)
(567,rsm = NULL)
(568,nrsm)
(569,times)
(570,rsm)
(571,for (idx = 0; idx < nrsm->r_rtr_cnt; idx++)
(572,rsm = nrsm)
(573,idx)
(574,rsm)
(575,if (nrsm == NULL)
(576,idx)
(577,SEQ_GEQ(start, rsm->r_start)
(578,rsm)
(579,TAILQ_NEXT(rsm, r_next)
(580,start)
(581,)
(582,rsm)
(583,if (rsm && SEQ_LT(start, rsm->r_start)
(584,r_next)
(585,cts)
(586,r_ctl)
(587,rsm->r_end - rsm->r_start)
(588,end)
(589,end = sack->end)
(590,rsm == NULL)
(591,rsm->r_rtr_cnt)
(592,nrsm)
(593,start)
(594,end)
(595,start)
(596,r_end)
(597,rsm)
(598,nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx])
(599,RACK_SACK_PASSED)
(600,1)
(601,rsm->r_in_tmap = 0)
(602,rack_sack_proc_restart)
(603,rack->r_ctl)
(604,nrsm->r_tim_lastsent[idx] = rsm->r_tim_lastsent[idx])
(605,rsm->r_end)
(606,rack->r_ctl)
(607,r_ctl)
(608,rack_update_rtt(tp, rack, rsm, to, cts, SACKED)
(609,idx = 0)
(610,rsm && SEQ_LT(start, rsm->r_start)
(611,goto out;)
(612,rsm)
(613,nrsm->r_flags = rsm->r_flags)
(614,nrsm->r_end = rsm->r_end)
(615,r_flags)
(616,RET)
(617,rack)
(618,rsm->r_flags &= ~RACK_TLP)
(619,nrsm)
(620,nrsm->r_tim_lastsent)
(621,nrsm->r_tim_lastsent)
(622,idx++)
(623,idx = 0)
(624,rsm)
(625,rsm)
(626,r_end)
(627,rsm->r_flags & RACK_ACKED)
(628,SEQ_LT(start, rsm->r_start)
(629,r_tnext)
(630,changed)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^