-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(globalReturnsTrue())
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,9,11,15,16,20,25,26,31,32,36,41,43,44,48,51,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112
-----computeFrom-----
13,14
13,15
29,30
29,31
46,47
46,48
56,57
56,58
67,68
67,69
75,76
75,77
-----guardedBy-----
53,94
48,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(globalReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(30,37,0)
(49,18,0)
(2,29,0)
(42,30,0)
(48,37,0)
(33,16,0)
(50,32,0)
(0,37,0)
(34,29,0)
(39,5,0)
(18,28,0)
(9,46,0)
(46,22,0)
(36,32,0)
(14,29,0)
(35,29,0)
(49,34,0)
(43,47,0)
(4,36,0)
(3,31,0)
(45,35,0)
(26,19,0)
(6,36,0)
(34,49,0)
(28,18,0)
(11,52,0)
(10,33,0)
(18,32,0)
(18,49,0)
(35,40,0)
(32,37,0)
(50,37,0)
(47,34,0)
(40,20,0)
(31,35,0)
(17,32,0)
(32,18,0)
(7,5,0)
(13,50,0)
(34,40,0)
(35,31,0)
(25,34,0)
(15,5,0)
(26,8,0)
(24,40,0)
(29,5,0)
(34,47,0)
(8,26,0)
(41,11,0)
(0,32,0)
(44,0,0)
(38,8,0)
(1,0,0)
(51,46,0)
(27,40,0)
(30,32,0)
(26,8,1)
(36,4,1)
(4,6,1)
(1,44,1)
(12,40,1)
(35,29,1)
(12,33,1)
(23,12,1)
(41,35,1)
(36,32,1)
(50,13,1)
(0,32,1)
(29,14,1)
(25,17,1)
(3,45,1)
(8,38,1)
(13,0,1)
(50,32,1)
(14,2,1)
(32,18,1)
(10,21,1)
(40,24,1)
(23,11,1)
(30,42,1)
(44,36,1)
(11,41,1)
(33,10,1)
(47,43,1)
(6,32,1)
(31,3,1)
(18,28,1)
(27,21,1)
(43,25,1)
(17,35,1)
(35,40,1)
(24,27,1)
(42,50,1)
(34,47,1)
(49,34,1)
(44,26,1)
(38,36,1)
(45,12,1)
(34,29,1)
(34,40,1)
(0,1,1)
(18,49,1)
(30,32,1)
(21,29,1)
(35,31,1)
(23,30,1)
(8,36,2)
(18,28,2)
(43,35,2)
(42,35,2)
(27,21,2)
(34,40,2)
(35,40,2)
(1,35,2)
(50,32,2)
(25,35,2)
(31,12,2)
(13,35,2)
(33,21,2)
(10,21,2)
(35,29,2)
(30,32,2)
(0,32,2)
(0,35,2)
(17,35,2)
(18,35,2)
(4,35,2)
(36,35,2)
(30,35,2)
(26,36,2)
(34,35,2)
(50,35,2)
(3,12,2)
(34,29,2)
(32,18,2)
(36,32,2)
(18,49,2)
(38,36,2)
(35,31,2)
(41,35,2)
(47,35,2)
(6,35,2)
(24,21,2)
(32,35,2)
(45,12,2)
(34,47,2)
(44,35,2)
(26,8,2)
(40,21,2)
(11,35,2)
(49,34,2)
(35,12,2)
(49,35,2)
-----------------------------------
(0,wcscpy(myString, HELLO_STRING)
(1,HELLO_STRING)
(2,data)
(3,HELLO_STRING)
(4,NULL)
(5,)
(6,myString)
(7,data)
(8,-1)
(9,myString)
(10,"Benign, fixed string")
(11,printLine("Input is less than the length of the source string")
(12,globalReturnsTrue()
(13,myString)
(14,0)
(15,if(globalReturnsFalse()
(16,)
(17,myString)
(18,(wchar_t *)
(19,)
(20,)
(21,globalReturnsFalse()
(22,)
(23,RET)
(24,20)
(25,data)
(26,exit(-1)
(27,data)
(28,wchar_t *)
(29,data = 0)
(30,free(myString)
(31,wcslen(HELLO_STRING)
(32,myString = (wchar_t *)
(33,printLine("Benign, fixed string")
(34,data*sizeof(wchar_t)
(35,data > wcslen(HELLO_STRING)
(36,myString == NULL)
(37,)
(38,1)
(39,if(globalReturnsTrue()
(40,data = 20)
(41,"Input is less than the length of the source string")
(42,myString)
(43,wchar_t)
(44,myString)
(45,data)
(46,)
(47,sizeof(wchar_t)
(48,if (myString == NULL)
(49,malloc(data*sizeof(wchar_t)
(50,printWLine(myString)
(51,if (data > wcslen(HELLO_STRING)
(52,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^