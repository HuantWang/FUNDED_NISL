-----label-----
0
-----code-----
static void goodB2G2()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticFive==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
90,91
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,88,89,94,96
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticFive==5)    {        /* FIX: Deallocate memory */        free(data);    }
staticFive==5
staticFive
staticFive
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(5,0,0)
(21,30,0)
(9,45,0)
(35,6,0)
(28,32,0)
(46,11,0)
(6,14,0)
(22,26,0)
(19,0,0)
(20,47,0)
(15,14,0)
(41,2,0)
(38,23,0)
(49,30,0)
(14,6,0)
(33,45,0)
(36,12,0)
(23,41,0)
(30,49,0)
(39,3,0)
(26,2,0)
(30,9,0)
(14,40,0)
(41,45,0)
(42,12,0)
(51,48,0)
(29,22,0)
(1,2,0)
(23,34,0)
(6,41,0)
(13,6,0)
(37,49,0)
(10,4,0)
(2,26,0)
(4,10,0)
(7,41,0)
(40,45,0)
(3,41,0)
(11,41,0)
(16,27,0)
(17,28,0)
(49,41,0)
(32,8,0)
(48,22,0)
(22,48,0)
(50,40,0)
(44,27,0)
(25,49,0)
(47,27,0)
(23,47,0)
(43,11,0)
(4,45,0)
(11,10,0)
(2,41,0)
(31,47,0)
(52,27,0)
(26,22,0)
(2,1,0)
(18,9,0)
(10,11,0)
(53,3,0)
(32,28,0)
(9,18,1)
(28,17,1)
(4,10,1)
(15,6,1)
(0,5,1)
(53,39,1)
(41,2,1)
(6,41,1)
(49,41,1)
(10,11,1)
(24,0,1)
(24,23,1)
(47,31,1)
(5,19,1)
(35,9,1)
(2,26,1)
(3,53,1)
(46,40,1)
(2,1,1)
(12,42,1)
(23,38,1)
(18,30,1)
(11,41,1)
(48,51,1)
(7,12,1)
(37,3,1)
(30,21,1)
(26,22,1)
(3,41,1)
(23,47,1)
(50,14,1)
(29,7,1)
(32,28,1)
(19,12,1)
(14,15,1)
(14,6,1)
(19,4,1)
(51,29,1)
(49,25,1)
(39,41,1)
(40,50,1)
(17,3,1)
(6,13,1)
(23,41,1)
(30,49,1)
(22,48,1)
(38,0,1)
(11,43,1)
(36,47,1)
(13,35,1)
(43,46,1)
(37,32,1)
(21,49,1)
(31,20,1)
(42,36,1)
(25,37,1)
(23,0,2)
(26,22,2)
(10,11,2)
(11,41,2)
(23,41,2)
(30,12,2)
(49,12,2)
(41,12,2)
(39,12,2)
(32,28,2)
(14,6,2)
(30,49,2)
(51,12,2)
(13,12,2)
(25,12,2)
(43,12,2)
(17,3,2)
(6,12,2)
(18,12,2)
(4,12,2)
(46,12,2)
(22,48,2)
(40,12,2)
(9,12,2)
(26,12,2)
(7,12,2)
(21,12,2)
(3,41,2)
(2,1,2)
(28,3,2)
(35,12,2)
(38,0,2)
(4,10,2)
(32,3,2)
(49,41,2)
(48,12,2)
(37,12,2)
(14,12,2)
(3,12,2)
(22,12,2)
(2,12,2)
(23,47,2)
(11,12,2)
(50,12,2)
(29,12,2)
(41,2,2)
(10,12,2)
(6,41,2)
(15,12,2)
(53,12,2)
(2,26,2)
-----------------------------------
(0,staticFive==5)
(1,twoIntsStruct *)
(2,(twoIntsStruct *)
(3,data == NULL)
(4,printStructLine(&data[0])
(5,5)
(6,data[0])
(7,data)
(8,)
(9,data[0].intOne = 0)
(10,&data[0])
(11,data[0])
(12,staticFive==5)
(13,0)
(14,data[0].intTwo)
(15,intTwo)
(16,if(staticFive==5)
(17,1)
(18,0)
(19,staticFive)
(20,data)
(21,intOne)
(22,100*sizeof(twoIntsStruct)
(23,free(data)
(24,RET)
(25,0)
(26,malloc(100*sizeof(twoIntsStruct)
(27,)
(28,-1)
(29,100)
(30,data[0].intOne)
(31,NULL)
(32,exit(-1)
(33,if (data == NULL)
(34,)
(35,data)
(36,staticFive)
(37,data)
(38,data)
(39,data)
(40,data[0].intTwo = 0)
(41,data = (twoIntsStruct *)
(42,5)
(43,0)
(44,if(staticFive==5)
(45,)
(46,data)
(47,data = NULL)
(48,sizeof(twoIntsStruct)
(49,data[0])
(50,0)
(51,twoIntsStruct)
(52,data)
(53,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^