-----label-----
0
-----code-----
static void goodG2B2()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
46,48
47,48
47,49
48,49
53,54
54,55
54,56
55,56
55,57
56,57
56,58
57,58
62,63
63,64
63,65
64,65
66,67
67,68
67,69
68,69
71,72
71,73
72,73
73,74
75,76
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,49,50,51,52,58,59,60,61,65,69,70,74,76
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(29,36,0)
(29,12,0)
(2,34,0)
(15,17,0)
(13,20,0)
(36,28,0)
(5,1,0)
(28,19,0)
(16,19,0)
(31,22,0)
(11,35,0)
(37,23,0)
(20,13,0)
(3,13,0)
(30,14,0)
(14,12,0)
(6,20,0)
(19,12,0)
(4,1,0)
(20,19,0)
(11,19,0)
(36,29,0)
(34,32,0)
(25,15,0)
(32,14,0)
(32,34,0)
(17,15,0)
(22,1,0)
(8,32,0)
(21,28,0)
(7,17,0)
(35,11,0)
(7,11,0)
(33,34,0)
(23,12,0)
(38,28,0)
(24,1,0)
(19,11,0)
(11,7,0)
(0,22,0)
(28,36,0)
(17,7,0)
(10,20,0)
(27,17,0)
(34,19,0)
(13,23,0)
(7,17,1)
(2,19,1)
(25,27,1)
(22,31,1)
(15,25,1)
(27,16,1)
(17,15,1)
(23,37,1)
(32,34,1)
(38,21,1)
(30,32,1)
(36,28,1)
(19,11,1)
(28,38,1)
(13,20,1)
(32,8,1)
(9,18,1)
(14,30,1)
(20,6,1)
(31,0,1)
(13,3,1)
(9,29,1)
(10,14,1)
(8,34,1)
(11,7,1)
(21,23,1)
(28,19,1)
(3,20,1)
(11,35,1)
(16,18,1)
(18,22,1)
(26,9,1)
(34,19,1)
(20,19,1)
(34,33,1)
(37,13,1)
(29,36,1)
(6,10,1)
(33,2,1)
(2,18,2)
(34,19,2)
(36,28,2)
(7,18,2)
(30,18,2)
(28,19,2)
(38,18,2)
(3,18,2)
(13,20,2)
(29,18,2)
(19,18,2)
(8,18,2)
(20,19,2)
(28,18,2)
(36,18,2)
(7,17,2)
(11,7,2)
(11,35,2)
(29,36,2)
(11,18,2)
(32,34,2)
(10,18,2)
(13,18,2)
(33,18,2)
(14,18,2)
(17,15,2)
(32,18,2)
(34,18,2)
(23,18,2)
(19,11,2)
(37,18,2)
(17,18,2)
(15,18,2)
(6,18,2)
(21,18,2)
(20,18,2)
(16,18,2)
(25,18,2)
(27,18,2)
-----------------------------------
(0,data)
(1,)
(2,data)
(3,intTwo)
(4,if(staticReturnsTrue()
(5,if(staticReturnsTrue()
(6,0)
(7,ALLOCA(100*sizeof(twoIntsStruct)
(8,intOne)
(9,staticReturnsTrue()
(10,data)
(11,(twoIntsStruct *)
(12,)
(13,data[0].intTwo)
(14,data[0].intOne = 0)
(15,sizeof(twoIntsStruct)
(16,data)
(17,100*sizeof(twoIntsStruct)
(18,staticReturnsTrue()
(19,data = (twoIntsStruct *)
(20,data[0])
(21,data)
(22,data = NULL)
(23,data[0].intTwo = 0)
(24,data)
(25,twoIntsStruct)
(26,RET)
(27,100)
(28,data[0])
(29,printStructLine(&data[0])
(30,0)
(31,NULL)
(32,data[0].intOne)
(33,0)
(34,data[0])
(35,twoIntsStruct *)
(36,&data[0])
(37,0)
(38,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^