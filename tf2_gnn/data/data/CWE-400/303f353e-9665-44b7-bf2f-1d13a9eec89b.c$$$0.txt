-----label-----
0
-----code-----
static void goodB2G1()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    if(STATIC_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
26,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
46,47
46,48
46,49
47,48
49,50
50,51
51,52
51,53
52,53
55,56
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,8,10,11,15,17,20,25,27,28,30,34,37,39,43,45,48,53,54,59,61
-----computeFrom-----
13,14
13,15
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
STATIC_CONST_FALSE
STATIC_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(21,10,0)
(14,21,0)
(20,18,0)
(6,14,0)
(16,5,0)
(12,19,0)
(19,21,0)
(27,1,0)
(5,21,0)
(20,19,0)
(19,6,0)
(25,14,0)
(4,1,0)
(6,19,0)
(9,1,0)
(8,20,0)
(3,9,0)
(0,6,0)
(7,15,0)
(20,9,0)
(24,9,0)
(17,21,0)
(5,19,0)
(22,14,0)
(23,7,0)
(26,1,0)
(8,13,1)
(25,11,1)
(2,7,1)
(20,8,1)
(13,5,1)
(7,23,1)
(24,3,1)
(6,0,1)
(9,24,1)
(16,19,1)
(13,11,1)
(22,25,1)
(14,22,1)
(20,9,1)
(0,12,1)
(20,19,1)
(23,13,1)
(19,6,1)
(2,20,1)
(12,14,1)
(11,9,1)
(6,14,1)
(5,16,1)
(5,19,1)
(25,11,2)
(23,13,2)
(6,14,2)
(22,11,2)
(20,9,2)
(14,11,2)
(20,19,2)
(0,11,2)
(5,19,2)
(19,11,2)
(12,11,2)
(8,13,2)
(5,11,2)
(7,13,2)
(20,13,2)
(16,11,2)
(6,11,2)
(19,6,2)
-----------------------------------
(0,myString)
(1,)
(2,RET)
(3,data)
(4,if(STATIC_CONST_TRUE)
(5,printLine(data)
(6,strdup(myString)
(7,printLine("Benign, fixed string")
(8,data)
(9,data = NULL)
(10,)
(11,STATIC_CONST_TRUE)
(12,data)
(13,STATIC_CONST_FALSE)
(14,myString[] = "myString")
(15,)
(16,data)
(17,myString)
(18,)
(19,data = strdup(myString)
(20,free(data)
(21,)
(22,"myString")
(23,"Benign, fixed string")
(24,NULL)
(25,myString)
(26,if(STATIC_CONST_FALSE)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^