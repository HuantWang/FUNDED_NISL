-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
19,21
20,21
23,24
24,25
25,26
25,27
26,27
29,30
29,31
29,32
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
48,49
49,50
49,51
49,52
50,51
52,53
55,56
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
66,67
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,28,33,36,38,41,43,46,47,51,53,54,58,60,64,65,67
-----computeFrom-----
13,14
13,15
19,20
19,21
31,32
31,33
42,43
42,44
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    char * data;    data = NULL;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    char * data;    data = NULL;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(13,10,0)
(24,17,0)
(22,27,0)
(17,1,0)
(13,27,0)
(28,17,0)
(22,13,0)
(11,14,0)
(25,2,0)
(30,2,0)
(9,3,0)
(23,9,0)
(17,28,0)
(20,0,0)
(21,22,0)
(0,27,0)
(15,10,0)
(26,3,0)
(10,28,0)
(16,3,0)
(12,3,0)
(19,13,0)
(5,8,0)
(6,1,0)
(18,9,0)
(31,8,0)
(14,29,0)
(4,0,0)
(28,10,0)
(0,13,0)
(10,13,0)
(1,17,0)
(10,15,0)
(17,1,1)
(11,8,1)
(30,25,1)
(14,11,1)
(28,17,1)
(7,2,1)
(13,10,1)
(19,8,1)
(5,31,1)
(31,9,1)
(0,4,1)
(24,19,1)
(1,6,1)
(21,0,1)
(4,20,1)
(8,5,1)
(0,13,1)
(22,21,1)
(22,13,1)
(9,23,1)
(20,13,1)
(25,22,1)
(25,14,1)
(10,15,1)
(2,30,1)
(10,28,1)
(6,24,1)
(23,18,1)
(28,8,2)
(10,28,2)
(10,15,2)
(14,8,2)
(21,8,2)
(1,8,2)
(28,17,2)
(19,8,2)
(17,1,2)
(17,8,2)
(4,8,2)
(13,8,2)
(22,13,2)
(24,8,2)
(22,8,2)
(0,8,2)
(0,13,2)
(20,8,2)
(11,8,2)
(13,10,2)
(10,8,2)
(6,8,2)
-----------------------------------
(0,strcpy(data, "A String")
(1,sizeof(char)
(2,STATIC_CONST_FIVE==5)
(3,)
(4,"A String")
(5,5)
(6,char)
(7,RET)
(8,STATIC_CONST_FIVE!=5)
(9,data = NULL)
(10,(char *)
(11,"Benign, fixed string")
(12,data)
(13,data = (char *)
(14,printLine("Benign, fixed string")
(15,char *)
(16,if(STATIC_CONST_FIVE!=5)
(17,100*sizeof(char)
(18,data)
(19,data)
(20,data)
(21,data)
(22,printLine(data)
(23,NULL)
(24,100)
(25,STATIC_CONST_FIVE)
(26,if(STATIC_CONST_FIVE==5)
(27,)
(28,ALLOCA(100*sizeof(char)
(29,)
(30,5)
(31,STATIC_CONST_FIVE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^