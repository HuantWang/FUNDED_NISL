-----label-----
1
-----code-----
int __res_msend(int nqueries, const unsigned char *const *queries,
	const int *qlens, unsigned char *const *answers, int *alens, int asize)
{
	int fd;
	FILE *f, _f;
	unsigned char _buf[256];
	char line[64], *s, *z;
	int timeout = 5000, attempts = 2, retry_interval, servfail_retry;
	union {
		struct sockaddr_in sin;
		struct sockaddr_in6 sin6;
	} sa = {0}, ns[3] = {{0}};
	socklen_t sl = sizeof sa.sin;
	int nns = 0;
	int family = AF_INET;
	int rlen;
	int next;
	int i, j;
	int cs;
	struct pollfd pfd;
	unsigned long t0, t1, t2;
	struct address iplit;

	pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs);

	/* Get nameservers from resolv.conf, fallback to localhost */
	f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf);
	if (!f) switch (errno) {
	case ENOENT:
	case ENOTDIR:
	case EACCES:
		goto no_resolv_conf;
	default:
		return -1;
	}
	for (nns=0; nns<3 && fgets(line, sizeof line, f); ) {
		if (!strncmp(line, "options", 7) && isspace(line[7])) {
			unsigned long x;
			char *p, *z;
			p = strstr(line, "timeout:");
			if (p && isdigit(p[8])) {
				p += 8;
				x = strtoul(p, &z, 10);
				if (z != p) timeout = x < 30 ? x*1000 : 30000;
			}
			p = strstr(line, "attempts:");
			if (p && isdigit(p[9])) {
				p += 9;
				x = strtoul(p, &z, 10);
				if (z != p) attempts = x < 10 ? x : 10;
				if (!attempts) attempts = 1;
			}
		}
		if (strncmp(line, "nameserver", 10) || !isspace(line[10]))
			continue;
		for (s=line+11; isspace(*s); s++);
		for (z=s; *z && !isspace(*z); z++);
		*z=0;

		if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {
			if (iplit.family == AF_INET) {
				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);
				ns[nns].sin.sin_port = htons(53);
				ns[nns++].sin.sin_family = AF_INET;
			} else {
				sl = sizeof sa.sin6;
				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);
				ns[nns].sin6.sin6_port = htons(53);
				ns[nns].sin6.sin6_scope_id = iplit.scopeid;
				ns[nns++].sin6.sin6_family = family = AF_INET6;
			}
		}
	}
	__fclose_ca(f);
no_resolv_conf:
	if (!nns) {
		ns[0].sin.sin_family = AF_INET;
		ns[0].sin.sin_port = htons(53);
		ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);
		nns=1;
	}

	/* Get local address and open/bind a socket */
	sa.sin.sin_family = family;
	fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);

	/* Handle case where system lacks IPv6 support */
	if (fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT) {
		fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);
		family = AF_INET;
	}
	if (fd < 0 || bind(fd, (void *)&sa, sl) < 0) return -1;

	/* Past this point, there are no errors. Each individual query will
	 * yield either no reply (indicated by zero length) or an answer
	 * packet which is up to the caller to interpret. */

	pthread_cleanup_push(cleanup, (void *)(intptr_t)fd);
	pthread_setcancelstate(cs, 0);

	/* Convert any IPv4 addresses in a mixed environment to v4-mapped */
	if (family == AF_INET6) {
		setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);
		for (i=0; i<nns; i++) {
			if (ns[i].sin.sin_family != AF_INET) continue;
			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,
				&ns[i].sin.sin_addr, 4);
			memcpy(ns[i].sin6.sin6_addr.s6_addr,
				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);
			ns[i].sin6.sin6_family = AF_INET6;
			ns[i].sin6.sin6_flowinfo = 0;
			ns[i].sin6.sin6_scope_id = 0;
		}
	}

	memset(alens, 0, sizeof *alens * nqueries);

	pfd.fd = fd;
	pfd.events = POLLIN;
	retry_interval = timeout / attempts;
	next = 0;
	t0 = t2 = mtime();
	t1 = t2 - retry_interval;

	for (; t2-t0 < timeout; t2=mtime()) {
		if (t2-t1 >= retry_interval) {
			/* Query all configured namservers in parallel */
			for (i=0; i<nqueries; i++)
				if (!alens[i])
					for (j=0; j<nns; j++)
						sendto(fd, queries[i],
							qlens[i], MSG_NOSIGNAL,
							(void *)&ns[j], sl);
			t1 = t2;
			servfail_retry = 2 * nqueries;
		}

		/* Wait for a response, or until time to retry */
		if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;

		while ((rlen = recvfrom(fd, answers[next], asize, 0,
		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {

			/* Ignore non-identifiable packets */
			if (rlen < 4) continue;

			/* Ignore replies from addresses we didn't send to */
			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);
			if (j==nns) continue;

			/* Find which query this answer goes with, if any */
			for (i=next; i<nqueries && (
				answers[next][0] != queries[i][0] ||
				answers[next][1] != queries[i][1] ); i++);
			if (i==nqueries) continue;
			if (alens[i]) continue;

			/* Only accept positive or negative responses;
			 * retry immediately on server failure, and ignore
			 * all other codes such as refusal. */
			switch (answers[next][3] & 15) {
			case 0:
			case 3:
				break;
			case 2:
				if (servfail_retry && servfail_retry--)
					sendto(fd, queries[i],
						qlens[i], MSG_NOSIGNAL,
						(void *)&ns[j], sl);
			default:
				continue;
			}

			/* Store answer in the right slot, or update next
			 * available temp slot if it's already in place. */
			alens[i] = rlen;
			if (i == next)
				for (; next<nqueries && alens[next]; next++);
			else
				memcpy(answers[i], answers[next], rlen);

			if (next == nqueries) goto out;
		}
	}
out:
	pthread_cleanup_pop(1);

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
7,8
9,10
9,11
11,12
11,13
11,14
15,16
15,17
17,18
17,19
20,21
20,22
22,23
22,24
22,25
26,27
26,28
28,29
28,30
31,32
31,33
33,34
35,36
35,37
35,38
35,39
35,40
35,41
35,42
35,43
35,44
35,45
35,46
35,47
35,48
35,49
35,50
35,51
35,52
35,53
35,54
35,55
35,56
35,57
35,58
35,59
35,60
35,61
35,62
35,63
35,64
35,65
35,66
35,67
35,68
35,69
35,70
35,71
35,72
35,73
35,74
36,37
37,38
37,39
39,40
41,42
42,43
42,44
42,45
43,44
45,46
45,47
48,49
50,51
51,52
51,53
53,54
53,55
55,56
57,58
58,59
58,60
58,61
58,62
60,61
60,62
62,63
64,65
64,66
67,68
67,69
70,71
71,72
71,73
71,74
71,75
71,76
73,74
73,75
75,76
77,78
77,79
79,80
81,82
83,84
85,86
86,87
86,88
86,89
87,88
87,89
87,90
89,90
89,91
90,91
92,93
94,95
94,96
95,96
97,98
99,100
99,101
101,102
102,103
104,105
104,106
104,107
106,107
108,109
109,110
110,111
112,113
113,114
113,115
114,115
116,117
116,118
118,119
119,120
120,121
120,122
121,122
124,125
125,126
125,127
127,128
127,129
129,130
131,132
132,133
132,134
134,135
134,136
136,137
137,138
139,140
140,141
140,142
142,143
144,145
145,146
145,147
147,148
149,150
150,151
150,152
150,153
152,153
154,155
156,157
157,158
157,159
159,160
161,162
162,163
162,164
163,164
165,166
167,168
168,169
168,170
168,171
168,172
170,171
172,173
174,175
176,177
177,178
177,179
178,179
180,181
182,183
183,184
183,185
183,186
184,185
186,187
188,189
189,190
191,192
192,193
192,194
193,194
195,196
195,197
195,198
195,199
195,200
196,197
199,200
200,201
202,203
204,205
205,206
207,208
207,209
208,209
209,210
211,212
211,213
212,213
214,215
214,216
214,217
214,218
214,219
214,220
215,216
216,217
218,219
219,220
221,222
222,223
224,225
227,228
228,229
230,231
230,232
230,233
231,232
232,233
232,234
233,234
236,237
236,238
237,238
237,239
238,239
241,242
241,243
241,244
241,245
242,243
244,245
246,247
247,248
249,250
251,252
251,253
251,254
251,255
251,256
251,257
252,253
252,254
253,254
253,255
254,255
255,256
255,257
255,258
255,259
256,257
258,259
262,263
262,264
263,264
265,266
265,267
266,267
269,270
269,271
269,272
269,273
269,274
269,275
270,271
271,272
271,273
273,274
275,276
276,277
276,278
276,279
278,279
278,280
281,282
281,283
284,285
285,286
285,287
286,287
288,289
288,290
288,291
289,290
291,292
294,295
294,296
295,296
295,297
296,297
298,299
298,300
299,300
301,302
301,303
302,303
305,306
305,307
305,308
306,307
307,308
307,309
308,309
311,312
312,313
312,314
313,314
315,316
315,317
315,318
315,319
316,317
318,319
320,321
321,322
324,325
324,326
325,326
325,327
326,327
328,329
330,331
331,332
331,333
332,333
334,335
334,336
334,337
335,336
335,337
336,337
339,340
339,341
340,341
344,345
345,346
345,347
346,347
348,349
348,350
348,351
349,350
351,352
354,355
354,356
355,356
355,357
356,357
358,359
358,360
359,360
361,362
361,363
362,363
365,366
365,367
365,368
365,369
366,367
367,368
367,369
368,369
371,372
372,373
372,374
373,374
375,376
375,377
375,378
375,379
376,377
378,379
380,381
381,382
384,385
384,386
385,386
385,387
386,387
388,389
390,391
391,392
391,393
392,393
394,395
394,396
394,397
395,396
395,397
396,397
399,400
402,403
402,404
403,404
404,405
406,407
407,408
407,409
408,409
411,412
411,413
412,413
412,414
413,414
413,415
413,416
413,417
414,415
416,417
420,421
421,422
421,423
422,423
424,425
424,426
425,426
429,430
429,431
429,432
429,433
430,431
431,432
431,433
432,433
434,435
434,436
435,436
438,439
438,440
439,440
441,442
442,443
444,445
445,446
448,449
448,450
448,451
448,452
449,450
450,451
450,452
451,452
453,454
455,456
455,457
456,457
457,458
459,460
460,461
460,462
461,462
463,464
464,465
466,467
467,468
470,471
471,472
471,473
472,473
473,474
476,477
476,478
477,478
477,479
478,479
478,480
478,481
478,482
479,480
481,482
482,483
484,485
486,487
489,490
490,491
490,492
490,493
491,492
491,493
492,493
492,494
493,494
496,497
498,499
498,500
498,501
499,500
500,501
500,502
500,503
500,504
501,502
503,504
504,505
504,506
505,506
505,507
506,507
506,508
507,508
509,510
513,514
513,515
514,515
518,519
519,520
519,521
520,521
520,522
521,522
521,523
522,523
522,524
523,524
525,526
529,530
529,531
530,531
533,534
534,535
534,536
535,536
535,537
536,537
536,538
537,538
537,539
538,539
540,541
541,542
545,546
547,548
547,549
547,550
547,551
547,552
548,549
549,550
549,551
550,551
552,553
553,554
553,555
554,555
557,558
558,559
558,560
558,561
558,562
559,560
561,562
562,563
562,564
563,564
563,565
564,565
564,566
565,566
567,568
571,572
571,573
572,573
576,577
577,578
577,579
578,579
578,580
579,580
579,581
580,581
580,582
581,582
583,584
587,588
587,589
588,589
591,592
592,593
592,594
593,594
593,595
594,595
594,596
595,596
595,597
596,597
598,599
602,603
602,604
603,604
606,607
607,608
607,609
608,609
608,610
609,610
609,611
610,611
610,612
611,612
613,614
614,615
618,619
618,620
619,620
621,622
623,624
624,625
624,626
625,626
627,628
629,630
629,631
631,632
631,633
632,633
633,634
635,636
635,637
635,638
635,639
636,637
637,638
637,639
638,639
638,640
639,640
639,641
640,641
640,642
641,642
646,647
648,649
649,650
649,651
650,651
650,652
651,652
651,653
652,653
652,654
653,654
658,659
658,660
659,660
662,663
663,664
663,665
664,665
664,666
665,666
665,667
666,667
666,668
667,668
667,669
668,669
674,675
674,676
675,676
678,679
679,680
679,681
680,681
683,684
684,685
684,686
685,686
685,687
686,687
686,688
687,688
691,692
693,694
694,695
694,696
695,696
697,698
697,699
697,700
697,701
698,699
700,701
702,703
702,704
703,704
703,705
704,705
706,707
708,709
711,712
711,713
712,713
712,714
713,714
713,715
714,715
714,716
715,716
718,719
718,720
719,720
721,722
723,724
723,725
724,725
726,727
728,729
728,730
729,730
730,731
730,732
731,732
733,734
733,735
733,736
733,737
734,735
736,737
738,739
738,740
739,740
739,741
740,741
742,743
744,745
747,748
748,749
748,750
749,750
751,752
753,754
753,755
754,755
754,756
755,756
755,757
756,757
759,760
759,761
760,761
760,762
760,763
760,764
761,762
763,764
765,766
765,767
766,767
766,768
768,769
770,771
771,772
773,774
776,777
777,778
779,780
780,781
780,782
780,783
781,782
783,784
785,786
785,787
786,787
786,788
788,789
790,791
790,792
791,792
791,793
792,793
795,796
797,798
798,799
798,800
798,801
799,800
801,802
804,805
804,806
805,806
805,807
806,807
808,809
810,811
810,812
811,812
812,813
812,814
812,815
812,816
812,817
812,818
813,814
815,816
817,818
819,820
821,822
822,823
822,824
823,824
823,825
826,827
828,829
830,831
830,832
830,833
830,834
831,832
832,833
832,834
833,834
836,837
836,838
837,838
839,840
841,842
842,843
844,845
844,846
844,847
844,848
844,849
844,850
845,846
845,847
846,847
846,848
847,848
847,849
848,849
848,850
849,850
849,851
850,851
852,853
856,857
859,860
860,861
860,862
860,863
860,864
861,862
863,864
863,865
864,865
864,866
865,866
865,867
866,867
866,868
867,868
867,869
868,869
870,871
876,877
877,878
877,879
878,879
878,880
879,880
879,881
880,881
882,883
887,888
888,889
888,890
888,891
888,892
889,890
891,892
891,893
892,893
892,894
893,894
893,895
894,895
894,896
895,896
897,898
904,905
905,906
905,907
906,907
906,908
907,908
907,909
908,909
908,910
909,910
911,912
915,916
917,918
918,919
918,920
919,920
919,921
920,921
920,922
921,922
921,923
922,923
924,925
929,930
930,931
930,932
931,932
931,933
932,933
932,934
933,934
933,935
934,935
936,937
941,942
942,943
942,944
942,945
942,946
943,944
945,946
948,949
948,950
949,950
950,951
951,952
953,954
955,956
956,957
956,958
957,958
957,959
958,959
961,962
963,964
964,965
964,966
965,966
965,967
966,967
969,970
971,972
972,973
972,974
973,974
975,976
975,977
976,977
978,979
980,981
981,982
981,983
982,983
985,986
986,987
986,988
987,988
989,990
989,991
990,991
992,993
993,994
995,996
996,997
996,998
997,998
999,1000
999,1001
1000,1001
1002,1003
1004,1005
1004,1006
1004,1007
1004,1008
1006,1007
1006,1008
1007,1008
1007,1009
1008,1009
1010,1011
1012,1013
1014,1015
1014,1016
1015,1016
1017,1018
1018,1019
1020,1021
1020,1022
1020,1023
1021,1022
1021,1023
1022,1023
1022,1024
1023,1024
1023,1025
1024,1025
1026,1027
1028,1029
1030,1031
1030,1032
1030,1033
1031,1032
1031,1033
1031,1034
1031,1035
1032,1033
1033,1034
1033,1035
1034,1035
1037,1038
1037,1039
1038,1039
1040,1041
1042,1043
1043,1044
1045,1046
1045,1047
1046,1047
1047,1048
1047,1049
1048,1049
1050,1051
1052,1053
1052,1054
1052,1055
1052,1056
1053,1054
1054,1055
1054,1056
1055,1056
1058,1059
1058,1060
1059,1060
1061,1062
1063,1064
1064,1065
1066,1067
1067,1068
1067,1069
1067,1070
1067,1071
1067,1072
1067,1073
1067,1074
1068,1069
1070,1071
1072,1073
1072,1074
1073,1074
1075,1076
1077,1078
1077,1079
1078,1079
1080,1081
1082,1083
1084,1085
1084,1086
1085,1086
1085,1087
1087,1088
1089,1090
1090,1091
1090,1092
1091,1092
1093,1094
1095,1096
1097,1098
1098,1099
1098,1100
1099,1100
1101,1102
1103,1104
1104,1105
1104,1106
1105,1106
1107,1108
1107,1109
1109,1110
1111,1112
1111,1113
1112,1113
1112,1114
1113,1114
1113,1115
1113,1116
1113,1117
1114,1115
1116,1117
1117,1118
1120,1121
1120,1122
1121,1122
1121,1123
1122,1123
1124,1125
1126,1127
1130,1131
1130,1132
1131,1132
1131,1133
1132,1133
1133,1134
1133,1135
1134,1135
1136,1137
1136,1138
1136,1139
1136,1140
1136,1141
1136,1142
1136,1143
1137,1138
1139,1140
1141,1142
1141,1143
1142,1143
1144,1145
1146,1147
1149,1150
1149,1151
1150,1151
1150,1152
1152,1153
1154,1155
1155,1156
1157,1158
1157,1159
1158,1159
1158,1160
1159,1160
1161,1162
1162,1163
1164,1165
1165,1166
1168,1169
1168,1170
1168,1171
1168,1172
1168,1173
1168,1174
1168,1175
1168,1176
1168,1177
1168,1178
1169,1170
1169,1171
1170,1171
1170,1172
1171,1172
1175,1176
1175,1177
1175,1178
1175,1179
1176,1177
1177,1178
1177,1179
1178,1179
1181,1182
1181,1183
1182,1183
1182,1184
1183,1184
1185,1186
1187,1188
1187,1189
1187,1190
1187,1191
1188,1189
1190,1191
1190,1192
1191,1192
1193,1194
1195,1196
1196,1197
1198,1199
1200,1201
1201,1202
1204,1205
1204,1206
1205,1206
1205,1207
1206,1207
1208,1209
1211,1212
1211,1213
1211,1214
1211,1215
1212,1213
1213,1214
1213,1215
1214,1215
1216,1217
1218,1219
1218,1220
1219,1220
1219,1221
1220,1221
1222,1223
1224,1225
1225,1226
1225,1227
1226,1227
1226,1228
1227,1228
1227,1229
1228,1229
1228,1230
1229,1230
1231,1232
1234,1235
1234,1236
1235,1236
1235,1237
1236,1237
1238,1239
1241,1242
1241,1243
1242,1243
1242,1244
1243,1244
1243,1245
1244,1245
1246,1247
1249,1250
1249,1251
1250,1251
1250,1252
1251,1252
1253,1254
1256,1257
1257,1258
1260,1261
1260,1262
1261,1262
1261,1263
1262,1263
1264,1265
1267,1268
1267,1269
1268,1269
1268,1270
1269,1270
1271,1272
1274,1275
1274,1276
1275,1276
1275,1277
1276,1277
1276,1278
1277,1278
1277,1279
1278,1279
1280,1281
1284,1285
1284,1286
1284,1287
1284,1288
1284,1289
1284,1290
1284,1291
1285,1286
1287,1288
1290,1291
1292,1293
1292,1294
1293,1294
1293,1295
1294,1295
1296,1297
1297,1298
1299,1300
1300,1301
1300,1302
1300,1303
1300,1304
1300,1305
1300,1306
1300,1307
1301,1302
1303,1304
1305,1306
1305,1307
1306,1307
1308,1309
1310,1311
1310,1312
1311,1312
1313,1314
1315,1316
1317,1318
1317,1319
1318,1319
1318,1320
1320,1321
1322,1323
1323,1324
1323,1325
1324,1325
1326,1327
1328,1329
1332,1333
1333,1334
1333,1335
1334,1335
1334,1336
1335,1336
1337,1338
1339,1340
1341,1342
1341,1343
1341,1344
1342,1343
1342,1344
1343,1344
1345,1346
1347,1348
1347,1349
1347,1350
1347,1351
1349,1350
1349,1351
1350,1351
1350,1352
1351,1352
1353,1354
1355,1356
1355,1357
1356,1357
1358,1359
1360,1361
1361,1362
1364,1365
1365,1366
1365,1367
1365,1368
1365,1369
1366,1367
1368,1369
1368,1370
1369,1370
1371,1372
1373,1374
1373,1375
1374,1375
1376,1377
1378,1379
1380,1381
1380,1382
1381,1382
1381,1383
1382,1383
1384,1385
1386,1387
1388,1389
1388,1390
1390,1391
1391,1392
1391,1393
1392,1393
1395,1396
-----nextToken-----
2,4,6,8,10,12,13,14,16,18,19,21,23,24,25,27,29,30,32,34,38,40,44,46,47,49,52,54,56,59,61,63,65,66,68,69,72,74,76,78,80,82,84,88,91,93,96,98,100,103,105,107,111,115,117,122,123,126,128,130,133,135,138,141,143,146,148,151,153,155,158,160,164,166,169,171,173,175,179,181,185,187,190,194,197,198,201,203,206,210,213,217,220,223,225,226,229,234,235,239,240,243,245,248,250,257,259,260,261,264,267,268,272,274,277,279,280,282,283,287,290,292,293,297,300,303,304,309,310,314,317,319,322,323,327,329,333,337,338,341,342,343,347,350,352,353,357,360,363,364,369,370,374,377,379,382,383,387,389,393,397,398,400,401,405,409,410,415,417,418,419,423,426,427,428,433,436,437,440,443,446,447,452,454,458,462,465,468,469,474,475,480,483,485,487,488,494,495,497,502,508,510,511,512,515,516,517,524,526,527,528,531,532,539,542,543,544,546,551,555,556,560,566,568,569,570,573,574,575,582,584,585,586,589,590,597,599,600,601,604,605,612,615,616,617,620,622,626,628,630,634,642,643,644,645,647,654,655,656,657,660,661,669,670,671,672,673,676,677,681,682,688,689,690,692,696,699,701,705,707,709,710,716,717,720,722,725,727,732,735,737,741,743,745,746,750,752,757,758,762,764,767,769,772,774,775,778,782,784,787,789,793,794,796,800,802,803,807,809,814,816,818,820,824,825,827,829,834,835,838,840,843,851,853,854,855,857,858,862,869,871,872,873,874,875,881,883,884,885,886,890,896,898,899,900,901,902,903,910,912,913,914,916,923,925,926,927,928,935,937,938,939,940,944,946,947,952,954,959,960,962,967,968,970,974,977,979,983,984,988,991,994,998,1001,1003,1005,1009,1011,1013,1016,1019,1025,1027,1029,1035,1036,1039,1041,1044,1049,1051,1056,1057,1060,1062,1065,1069,1071,1074,1076,1079,1081,1083,1086,1088,1092,1094,1096,1100,1102,1106,1108,1110,1115,1118,1119,1123,1125,1127,1128,1129,1135,1138,1140,1143,1145,1147,1148,1151,1153,1156,1160,1163,1166,1167,1172,1173,1174,1179,1180,1184,1186,1189,1192,1194,1197,1199,1202,1203,1207,1209,1210,1215,1217,1221,1223,1230,1232,1233,1237,1239,1240,1245,1247,1248,1252,1254,1255,1258,1259,1263,1265,1266,1270,1272,1273,1279,1281,1282,1283,1286,1288,1289,1291,1295,1298,1302,1304,1307,1309,1312,1314,1316,1319,1321,1325,1327,1329,1330,1331,1336,1338,1340,1344,1346,1348,1352,1354,1357,1359,1362,1363,1367,1370,1372,1375,1377,1379,1383,1385,1387,1389,1393,1394,1396
-----computeFrom-----
192,193
192,194
232,233
232,234
236,237
236,238
237,238
237,239
253,254
253,255
285,286
285,287
295,296
295,297
307,308
307,309
312,313
312,314
325,326
325,327
331,332
331,333
335,336
335,337
339,340
339,341
345,346
345,347
355,356
355,357
367,368
367,369
372,373
372,374
385,386
385,387
391,392
391,393
395,396
395,397
407,408
407,409
412,413
412,414
431,432
431,433
434,435
434,436
450,451
450,452
455,456
455,457
471,472
471,473
477,478
477,479
491,492
491,493
519,520
519,521
534,535
534,536
549,550
549,551
577,578
577,579
592,593
592,594
607,608
607,609
618,619
618,620
637,638
637,639
649,650
649,651
663,664
663,665
679,680
679,681
684,685
684,686
694,695
694,696
702,703
702,704
703,704
703,705
712,713
712,714
713,714
713,715
714,715
714,716
718,719
718,720
723,724
723,725
730,731
730,732
738,739
738,740
739,740
739,741
748,749
748,750
754,755
754,756
755,756
755,757
759,760
759,761
805,806
805,807
832,833
832,834
836,837
836,838
846,847
846,848
863,864
863,865
905,906
905,907
918,919
918,920
930,931
930,932
948,949
948,950
956,957
956,958
964,965
964,966
972,973
972,974
975,976
975,977
981,982
981,983
986,987
986,988
989,990
989,991
996,997
996,998
999,1000
999,1001
1006,1007
1006,1008
1007,1008
1007,1009
1014,1015
1014,1016
1022,1023
1022,1024
1023,1024
1023,1025
1033,1034
1033,1035
1037,1038
1037,1039
1054,1055
1054,1056
1058,1059
1058,1060
1098,1099
1098,1100
1104,1105
1104,1106
1107,1108
1107,1109
1112,1113
1112,1114
1120,1121
1120,1122
1121,1122
1121,1123
1131,1132
1131,1133
1133,1134
1133,1135
1170,1171
1170,1172
1177,1178
1177,1179
1181,1182
1181,1183
1182,1183
1182,1184
1190,1191
1190,1192
1205,1206
1205,1207
1213,1214
1213,1215
1218,1219
1218,1220
1219,1220
1219,1221
1225,1226
1225,1227
1226,1227
1226,1228
1241,1242
1241,1243
1261,1262
1261,1263
1275,1276
1275,1277
1293,1294
1293,1295
1333,1334
1333,1335
1342,1343
1342,1344
1349,1350
1349,1351
1350,1351
1350,1352
1381,1382
1381,1383
-----guardedBy-----
267,352
303,329
363,389
483,604
497,546
494,515
720,750
716,732
809,916
1027,1100
1025,1102
1346,1362
-----guardedByNegation-----
494,604
495,620
1346,1377
1344,1372
-----lastLexicalUse-----
494,604
1346,1377
-----jump-----
494,604
1346,1377
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;CompositeTypeSpecifier;Name;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;Declarator;Name;EqualsInitializer;InitializerList;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;GotoStatement;Name;DefaultStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;TypeIdInitializerExpression;TypeId;SimpleDeclSpecifier;Declarator;InitializerList;LiteralExpression;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;LiteralExpression;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;NullStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ContinueStatement;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;TypeIdInitializerExpression;TypeId;NamedTypeSpecifier;Name;ArrayDeclarator;ArrayModifier;LiteralExpression;InitializerList;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;NullStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;SwitchStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DefaultStatement;ContinueStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;NullStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int __res_msend(int nqueries, const unsigned char *const *queries,	const int *qlens, unsigned char *const *answers, int *alens, int asize){	int fd;	FILE *f, _f;	unsigned char _buf[256];	char line[64], *s, *z;	int timeout = 5000, attempts = 2, retry_interval, servfail_retry;	union {		struct sockaddr_in sin;		struct sockaddr_in6 sin6;	} sa = {0}, ns[3] = {{0}};	socklen_t sl = sizeof sa.sin;	int nns = 0;	int family = AF_INET;	int rlen;	int next;	int i, j;	int cs;	struct pollfd pfd;	unsigned long t0, t1, t2;	struct address iplit;	pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs);	/* Get nameservers from resolv.conf, fallback to localhost */	f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf);	if (!f) switch (errno) {	case ENOENT:	case ENOTDIR:	case EACCES:		goto no_resolv_conf;	default:		return -1;	}	for (nns=0; nns<3 && fgets(line, sizeof line, f); ) {		if (!strncmp(line, "options", 7) && isspace(line[7])) {			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}		if (strncmp(line, "nameserver", 10) || !isspace(line[10]))			continue;		for (s=line+11; isspace(*s); s++);		for (z=s; *z && !isspace(*z); z++);		*z=0;		if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}	}	__fclose_ca(f);no_resolv_conf:	if (!nns) {		ns[0].sin.sin_family = AF_INET;		ns[0].sin.sin_port = htons(53);		ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);		nns=1;	}	/* Get local address and open/bind a socket */	sa.sin.sin_family = family;	fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);	/* Handle case where system lacks IPv6 support */	if (fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT) {		fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);		family = AF_INET;	}	if (fd < 0 || bind(fd, (void *)&sa, sl) < 0) return -1;	/* Past this point, there are no errors. Each individual query will	 * yield either no reply (indicated by zero length) or an answer	 * packet which is up to the caller to interpret. */	pthread_cleanup_push(cleanup, (void *)(intptr_t)fd);	pthread_setcancelstate(cs, 0);	/* Convert any IPv4 addresses in a mixed environment to v4-mapped */	if (family == AF_INET6) {		setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);		for (i=0; i<nns; i++) {			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}	}	memset(alens, 0, sizeof *alens * nqueries);	pfd.fd = fd;	pfd.events = POLLIN;	retry_interval = timeout / attempts;	next = 0;	t0 = t2 = mtime();	t1 = t2 - retry_interval;	for (; t2-t0 < timeout; t2=mtime()) {		if (t2-t1 >= retry_interval) {			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}		/* Wait for a response, or until time to retry */		if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;		while ((rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}	}out:	pthread_cleanup_pop(1);	return 0;}
int
__res_msend(int nqueries, const unsigned char *const *queries,	const int *qlens, unsigned char *const *answers, int *alens, int asize)
__res_msend
int nqueries
int
nqueries
nqueries
const unsigned char *const *queries
const unsigned char
*const *queries
*const
*
queries
const int *qlens
const int
*qlens
*
qlens
unsigned char *const *answers
unsigned char
*const *answers
*const
*
answers
int *alens
int
*alens
*
alens
int asize
int
asize
asize
{	int fd;	FILE *f, _f;	unsigned char _buf[256];	char line[64], *s, *z;	int timeout = 5000, attempts = 2, retry_interval, servfail_retry;	union {		struct sockaddr_in sin;		struct sockaddr_in6 sin6;	} sa = {0}, ns[3] = {{0}};	socklen_t sl = sizeof sa.sin;	int nns = 0;	int family = AF_INET;	int rlen;	int next;	int i, j;	int cs;	struct pollfd pfd;	unsigned long t0, t1, t2;	struct address iplit;	pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs);	/* Get nameservers from resolv.conf, fallback to localhost */	f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf);	if (!f) switch (errno) {	case ENOENT:	case ENOTDIR:	case EACCES:		goto no_resolv_conf;	default:		return -1;	}	for (nns=0; nns<3 && fgets(line, sizeof line, f); ) {		if (!strncmp(line, "options", 7) && isspace(line[7])) {			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}		if (strncmp(line, "nameserver", 10) || !isspace(line[10]))			continue;		for (s=line+11; isspace(*s); s++);		for (z=s; *z && !isspace(*z); z++);		*z=0;		if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}	}	__fclose_ca(f);no_resolv_conf:	if (!nns) {		ns[0].sin.sin_family = AF_INET;		ns[0].sin.sin_port = htons(53);		ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);		nns=1;	}	/* Get local address and open/bind a socket */	sa.sin.sin_family = family;	fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);	/* Handle case where system lacks IPv6 support */	if (fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT) {		fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);		family = AF_INET;	}	if (fd < 0 || bind(fd, (void *)&sa, sl) < 0) return -1;	/* Past this point, there are no errors. Each individual query will	 * yield either no reply (indicated by zero length) or an answer	 * packet which is up to the caller to interpret. */	pthread_cleanup_push(cleanup, (void *)(intptr_t)fd);	pthread_setcancelstate(cs, 0);	/* Convert any IPv4 addresses in a mixed environment to v4-mapped */	if (family == AF_INET6) {		setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);		for (i=0; i<nns; i++) {			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}	}	memset(alens, 0, sizeof *alens * nqueries);	pfd.fd = fd;	pfd.events = POLLIN;	retry_interval = timeout / attempts;	next = 0;	t0 = t2 = mtime();	t1 = t2 - retry_interval;	for (; t2-t0 < timeout; t2=mtime()) {		if (t2-t1 >= retry_interval) {			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}		/* Wait for a response, or until time to retry */		if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;		while ((rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}	}out:	pthread_cleanup_pop(1);	return 0;}
int fd;
int fd;
int
fd
fd
FILE *f, _f;
FILE *f, _f;
FILE
FILE
*f
*
f
_f
_f
unsigned char _buf[256];
unsigned char _buf[256];
unsigned char
_buf[256]
_buf
[256]
256
char line[64], *s, *z;
char line[64], *s, *z;
char
line[64]
line
[64]
64
*s
*
s
*z
*
z
int timeout = 5000, attempts = 2, retry_interval, servfail_retry;
int timeout = 5000, attempts = 2, retry_interval, servfail_retry;
int
timeout = 5000
timeout
= 5000
5000
attempts = 2
attempts
= 2
2
retry_interval
retry_interval
servfail_retry
servfail_retry
union {		struct sockaddr_in sin;		struct sockaddr_in6 sin6;	} sa = {0}, ns[3] = {{0}};
union {		struct sockaddr_in sin;		struct sockaddr_in6 sin6;	} sa = {0}, ns[3] = {{0}};
union {		struct sockaddr_in sin;		struct sockaddr_in6 sin6;	}

struct sockaddr_in sin;
struct sockaddr_in
sockaddr_in
sin
sin
struct sockaddr_in6 sin6;
struct sockaddr_in6
sockaddr_in6
sin6
sin6
sa = {0}
sa
= {0}
{0}
0
ns[3] = {{0}}
ns
[3]
3
= {{0}}
{{0}}
{0}
0
socklen_t sl = sizeof sa.sin;
socklen_t sl = sizeof sa.sin;
socklen_t
socklen_t
sl = sizeof sa.sin
sl
= sizeof sa.sin
sizeof sa.sin
sa.sin
sa
sa
sin
int nns = 0;
int nns = 0;
int
nns = 0
nns
= 0
0
int family = AF_INET;
int family = AF_INET;
int
family = AF_INET
family
= AF_INET
AF_INET
AF_INET
int rlen;
int rlen;
int
rlen
rlen
int next;
int next;
int
next
next
int i, j;
int i, j;
int
i
i
j
j
int cs;
int cs;
int
cs
cs
struct pollfd pfd;
struct pollfd pfd;
struct pollfd
pollfd
pfd
pfd
unsigned long t0, t1, t2;
unsigned long t0, t1, t2;
unsigned long
t0
t0
t1
t1
t2
t2
struct address iplit;
struct address iplit;
struct address
address
iplit
iplit
pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs);
pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs)
pthread_setcancelstate
pthread_setcancelstate
PTHREAD_CANCEL_DISABLE
PTHREAD_CANCEL_DISABLE
&cs
cs
cs
f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf);
f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf)
f
f
__fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf)
__fopen_rb_ca
__fopen_rb_ca
"/etc/resolv.conf"
&_f
_f
_f
_buf
_buf
sizeof _buf
_buf
_buf
if (!f) switch (errno) {	case ENOENT:	case ENOTDIR:	case EACCES:		goto no_resolv_conf;	default:		return -1;	}
!f
f
f
switch (errno) {	case ENOENT:	case ENOTDIR:	case EACCES:		goto no_resolv_conf;	default:		return -1;	}
errno
errno
{	case ENOENT:	case ENOTDIR:	case EACCES:		goto no_resolv_conf;	default:		return -1;	}
case ENOENT:
ENOENT
ENOENT
case ENOTDIR:
ENOTDIR
ENOTDIR
case EACCES:
EACCES
EACCES
goto no_resolv_conf;
no_resolv_conf
default:
return -1;
-1
1
for (nns=0; nns<3 && fgets(line, sizeof line, f); ) {		if (!strncmp(line, "options", 7) && isspace(line[7])) {			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}		if (strncmp(line, "nameserver", 10) || !isspace(line[10]))			continue;		for (s=line+11; isspace(*s); s++);		for (z=s; *z && !isspace(*z); z++);		*z=0;		if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}	}
nns=0;
nns=0
nns
nns
0
nns<3 && fgets(line, sizeof line, f)
nns<3
nns
nns
3
fgets(line, sizeof line, f)
fgets
fgets
line
line
sizeof line
line
line
f
f
{		if (!strncmp(line, "options", 7) && isspace(line[7])) {			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}		if (strncmp(line, "nameserver", 10) || !isspace(line[10]))			continue;		for (s=line+11; isspace(*s); s++);		for (z=s; *z && !isspace(*z); z++);		*z=0;		if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}	}
if (!strncmp(line, "options", 7) && isspace(line[7])) {			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}
!strncmp(line, "options", 7) && isspace(line[7])
!strncmp(line, "options", 7)
strncmp(line, "options", 7)
strncmp
strncmp
line
line
"options"
7
isspace(line[7])
isspace
isspace
line[7]
line
line
7
{			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}
unsigned long x;
unsigned long x;
unsigned long
x
x
char *p, *z;
char *p, *z;
char
*p
*
p
*z
*
z
p = strstr(line, "timeout:");
p = strstr(line, "timeout:")
p
p
strstr(line, "timeout:")
strstr
strstr
line
line
"timeout:"
if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}
p && isdigit(p[8])
p
p
isdigit(p[8])
isdigit
isdigit
p[8]
p
p
8
{				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}
p += 8;
p += 8
p
p
8
x = strtoul(p, &z, 10);
x = strtoul(p, &z, 10)
x
x
strtoul(p, &z, 10)
strtoul
strtoul
p
p
&z
z
z
10
if (z != p) timeout = x < 30 ? x*1000 : 30000;
z != p
z
z
p
p
timeout = x < 30 ? x*1000 : 30000;
timeout = x < 30 ? x*1000 : 30000
timeout
timeout
x < 30 ? x*1000 : 30000
x < 30
x
x
30
x*1000
x
x
1000
30000
p = strstr(line, "attempts:");
p = strstr(line, "attempts:")
p
p
strstr(line, "attempts:")
strstr
strstr
line
line
"attempts:"
if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}
p && isdigit(p[9])
p
p
isdigit(p[9])
isdigit
isdigit
p[9]
p
p
9
{				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}
p += 9;
p += 9
p
p
9
x = strtoul(p, &z, 10);
x = strtoul(p, &z, 10)
x
x
strtoul(p, &z, 10)
strtoul
strtoul
p
p
&z
z
z
10
if (z != p) attempts = x < 10 ? x : 10;
z != p
z
z
p
p
attempts = x < 10 ? x : 10;
attempts = x < 10 ? x : 10
attempts
attempts
x < 10 ? x : 10
x < 10
x
x
10
x
x
10
if (!attempts) attempts = 1;
!attempts
attempts
attempts
attempts = 1;
attempts = 1
attempts
attempts
1
if (strncmp(line, "nameserver", 10) || !isspace(line[10]))			continue;
strncmp(line, "nameserver", 10) || !isspace(line[10])
strncmp(line, "nameserver", 10)
strncmp
strncmp
line
line
"nameserver"
10
!isspace(line[10])
isspace(line[10])
isspace
isspace
line[10]
line
line
10
continue;
for (s=line+11; isspace(*s); s++);
s=line+11;
s=line+11
s
s
line+11
line
line
11
isspace(*s)
isspace
isspace
*s
s
s
s++
s
s
;
for (z=s; *z && !isspace(*z); z++);
z=s;
z=s
z
z
s
s
*z && !isspace(*z)
*z
z
z
!isspace(*z)
isspace(*z)
isspace
isspace
*z
z
z
z++
z
z
;
*z=0;
*z=0
*z
z
z
0
if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}
__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0
__lookup_ipliteral(&iplit, s, AF_UNSPEC)
__lookup_ipliteral
__lookup_ipliteral
&iplit
iplit
iplit
s
s
AF_UNSPEC
AF_UNSPEC
0
{			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}
if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}
iplit.family == AF_INET
iplit.family
iplit
iplit
family
AF_INET
AF_INET
{				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			}
memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);
memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4)
memcpy
memcpy
&ns[nns].sin.sin_addr
ns[nns].sin.sin_addr
ns[nns].sin
ns[nns]
ns
ns
nns
nns
sin
sin_addr
iplit.addr
iplit
iplit
addr
4
ns[nns].sin.sin_port = htons(53);
ns[nns].sin.sin_port = htons(53)
ns[nns].sin.sin_port
ns[nns].sin
ns[nns]
ns
ns
nns
nns
sin
sin_port
htons(53)
htons
htons
53
ns[nns++].sin.sin_family = AF_INET;
ns[nns++].sin.sin_family = AF_INET
ns[nns++].sin.sin_family
ns[nns++].sin
ns[nns++]
ns
ns
nns++
nns
nns
sin
sin_family
AF_INET
AF_INET
{				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}
sl = sizeof sa.sin6;
sl = sizeof sa.sin6
sl
sl
sizeof sa.sin6
sa.sin6
sa
sa
sin6
memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);
memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16)
memcpy
memcpy
&ns[nns].sin6.sin6_addr
ns[nns].sin6.sin6_addr
ns[nns].sin6
ns[nns]
ns
ns
nns
nns
sin6
sin6_addr
iplit.addr
iplit
iplit
addr
16
ns[nns].sin6.sin6_port = htons(53);
ns[nns].sin6.sin6_port = htons(53)
ns[nns].sin6.sin6_port
ns[nns].sin6
ns[nns]
ns
ns
nns
nns
sin6
sin6_port
htons(53)
htons
htons
53
ns[nns].sin6.sin6_scope_id = iplit.scopeid;
ns[nns].sin6.sin6_scope_id = iplit.scopeid
ns[nns].sin6.sin6_scope_id
ns[nns].sin6
ns[nns]
ns
ns
nns
nns
sin6
sin6_scope_id
iplit.scopeid
iplit
iplit
scopeid
ns[nns++].sin6.sin6_family = family = AF_INET6;
ns[nns++].sin6.sin6_family = family = AF_INET6
ns[nns++].sin6.sin6_family
ns[nns++].sin6
ns[nns++]
ns
ns
nns++
nns
nns
sin6
sin6_family
family = AF_INET6
family
family
AF_INET6
AF_INET6
__fclose_ca(f);
__fclose_ca(f)
__fclose_ca
__fclose_ca
f
f
no_resolv_conf:	if (!nns) {		ns[0].sin.sin_family = AF_INET;		ns[0].sin.sin_port = htons(53);		ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);		nns=1;	}
no_resolv_conf
if (!nns) {		ns[0].sin.sin_family = AF_INET;		ns[0].sin.sin_port = htons(53);		ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);		nns=1;	}
!nns
nns
nns
{		ns[0].sin.sin_family = AF_INET;		ns[0].sin.sin_port = htons(53);		ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);		nns=1;	}
ns[0].sin.sin_family = AF_INET;
ns[0].sin.sin_family = AF_INET
ns[0].sin.sin_family
ns[0].sin
ns[0]
ns
ns
0
sin
sin_family
AF_INET
AF_INET
ns[0].sin.sin_port = htons(53);
ns[0].sin.sin_port = htons(53)
ns[0].sin.sin_port
ns[0].sin
ns[0]
ns
ns
0
sin
sin_port
htons(53)
htons
htons
53
ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);
ns[0].sin.sin_addr.s_addr = htonl(0x7f000001)
ns[0].sin.sin_addr.s_addr
ns[0].sin.sin_addr
ns[0].sin
ns[0]
ns
ns
0
sin
sin_addr
s_addr
htonl(0x7f000001)
htonl
htonl
0x7f000001
nns=1;
nns=1
nns
nns
1
sa.sin.sin_family = family;
sa.sin.sin_family = family
sa.sin.sin_family
sa.sin
sa
sa
sin
sin_family
family
family
fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);
fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
fd
fd
socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
socket
socket
family
family
SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK
SOCK_DGRAM|SOCK_CLOEXEC
SOCK_DGRAM
SOCK_DGRAM
SOCK_CLOEXEC
SOCK_CLOEXEC
SOCK_NONBLOCK
SOCK_NONBLOCK
0
if (fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT) {		fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);		family = AF_INET;	}
fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT
fd < 0 && family == AF_INET6
fd < 0
fd
fd
0
family == AF_INET6
family
family
AF_INET6
AF_INET6
errno == EAFNOSUPPORT
errno
errno
EAFNOSUPPORT
EAFNOSUPPORT
{		fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);		family = AF_INET;	}
fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);
fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
fd
fd
socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
socket
socket
AF_INET
AF_INET
SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK
SOCK_DGRAM|SOCK_CLOEXEC
SOCK_DGRAM
SOCK_DGRAM
SOCK_CLOEXEC
SOCK_CLOEXEC
SOCK_NONBLOCK
SOCK_NONBLOCK
0
family = AF_INET;
family = AF_INET
family
family
AF_INET
AF_INET
if (fd < 0 || bind(fd, (void *)&sa, sl) < 0) return -1;
fd < 0 || bind(fd, (void *)&sa, sl) < 0
fd < 0
fd
fd
0
bind(fd, (void *)&sa, sl) < 0
bind(fd, (void *)&sa, sl)
bind
bind
fd
fd
(void *)&sa
void *
void
*
*
&sa
sa
sa
sl
sl
0
return -1;
-1
1
pthread_cleanup_push(cleanup, (void *)(intptr_t)fd);
pthread_cleanup_push(cleanup, (void *)(intptr_t)fd)
pthread_cleanup_push
pthread_cleanup_push
cleanup
cleanup
(void *)(intptr_t)fd
void *
void
*
*
(intptr_t)fd
intptr_t
intptr_t
intptr_t

fd
fd
pthread_setcancelstate(cs, 0);
pthread_setcancelstate(cs, 0)
pthread_setcancelstate
pthread_setcancelstate
cs
cs
0
if (family == AF_INET6) {		setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);		for (i=0; i<nns; i++) {			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}	}
family == AF_INET6
family
family
AF_INET6
AF_INET6
{		setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);		for (i=0; i<nns; i++) {			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}	}
setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);
setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0)
setsockopt
setsockopt
fd
fd
IPPROTO_IPV6
IPPROTO_IPV6
IPV6_V6ONLY
IPV6_V6ONLY
&(int){0}
(int){0}
int
int

{0}
0
sizeof 0
0
for (i=0; i<nns; i++) {			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}
i=0;
i=0
i
i
0
i<nns
i
i
nns
nns
i++
i
i
{			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}
if (ns[i].sin.sin_family != AF_INET) continue;
ns[i].sin.sin_family != AF_INET
ns[i].sin.sin_family
ns[i].sin
ns[i]
ns
ns
i
i
sin
sin_family
AF_INET
AF_INET
continue;
memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);
memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4)
memcpy
memcpy
ns[i].sin6.sin6_addr.s6_addr+12
ns[i].sin6.sin6_addr.s6_addr
ns[i].sin6.sin6_addr
ns[i].sin6
ns[i]
ns
ns
i
i
sin6
sin6_addr
s6_addr
12
&ns[i].sin.sin_addr
ns[i].sin.sin_addr
ns[i].sin
ns[i]
ns
ns
i
i
sin
sin_addr
4
memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);
memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12)
memcpy
memcpy
ns[i].sin6.sin6_addr.s6_addr
ns[i].sin6.sin6_addr
ns[i].sin6
ns[i]
ns
ns
i
i
sin6
sin6_addr
s6_addr
"\0\0\0\0\0\0\0\0\0\0\xff\xff"
12
ns[i].sin6.sin6_family = AF_INET6;
ns[i].sin6.sin6_family = AF_INET6
ns[i].sin6.sin6_family
ns[i].sin6
ns[i]
ns
ns
i
i
sin6
sin6_family
AF_INET6
AF_INET6
ns[i].sin6.sin6_flowinfo = 0;
ns[i].sin6.sin6_flowinfo = 0
ns[i].sin6.sin6_flowinfo
ns[i].sin6
ns[i]
ns
ns
i
i
sin6
sin6_flowinfo
0
ns[i].sin6.sin6_scope_id = 0;
ns[i].sin6.sin6_scope_id = 0
ns[i].sin6.sin6_scope_id
ns[i].sin6
ns[i]
ns
ns
i
i
sin6
sin6_scope_id
0
memset(alens, 0, sizeof *alens * nqueries);
memset(alens, 0, sizeof *alens * nqueries)
memset
memset
alens
alens
0
sizeof *alens * nqueries
sizeof *alens
*alens
alens
alens
nqueries
nqueries
pfd.fd = fd;
pfd.fd = fd
pfd.fd
pfd
pfd
fd
fd
fd
pfd.events = POLLIN;
pfd.events = POLLIN
pfd.events
pfd
pfd
events
POLLIN
POLLIN
retry_interval = timeout / attempts;
retry_interval = timeout / attempts
retry_interval
retry_interval
timeout / attempts
timeout
timeout
attempts
attempts
next = 0;
next = 0
next
next
0
t0 = t2 = mtime();
t0 = t2 = mtime()
t0
t0
t2 = mtime()
t2
t2
mtime()
mtime
mtime
t1 = t2 - retry_interval;
t1 = t2 - retry_interval
t1
t1
t2 - retry_interval
t2
t2
retry_interval
retry_interval
for (; t2-t0 < timeout; t2=mtime()) {		if (t2-t1 >= retry_interval) {			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}		/* Wait for a response, or until time to retry */		if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;		while ((rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}	}
;
t2-t0 < timeout
t2-t0
t2
t2
t0
t0
timeout
timeout
t2=mtime()
t2
t2
mtime()
mtime
mtime
{		if (t2-t1 >= retry_interval) {			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}		/* Wait for a response, or until time to retry */		if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;		while ((rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}	}
if (t2-t1 >= retry_interval) {			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}
t2-t1 >= retry_interval
t2-t1
t2
t2
t1
t1
retry_interval
retry_interval
{			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}
for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);
i=0;
i=0
i
i
0
i<nqueries
i
i
nqueries
nqueries
i++
i
i
if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);
!alens[i]
alens[i]
alens
alens
i
i
for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);
j=0;
j=0
j
j
0
j<nns
j
j
nns
nns
j++
j
j
sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);
sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl)
sendto
sendto
fd
fd
queries[i]
queries
queries
i
i
qlens[i]
qlens
qlens
i
i
MSG_NOSIGNAL
MSG_NOSIGNAL
(void *)&ns[j]
void *
void
*
*
&ns[j]
ns[j]
ns
ns
j
j
sl
sl
t1 = t2;
t1 = t2
t1
t1
t2
t2
servfail_retry = 2 * nqueries;
servfail_retry = 2 * nqueries
servfail_retry
servfail_retry
2 * nqueries
2
nqueries
nqueries
if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;
poll(&pfd, 1, t1+retry_interval-t2) <= 0
poll(&pfd, 1, t1+retry_interval-t2)
poll
poll
&pfd
pfd
pfd
1
t1+retry_interval-t2
t1+retry_interval
t1
t1
retry_interval
retry_interval
t2
t2
0
continue;
while ((rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}
(rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0
(rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl}))
rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})
rlen
rlen
recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})
recvfrom
recvfrom
fd
fd
answers[next]
answers
answers
next
next
asize
asize
0
(void *)&sa
void *
void
*
*
&sa
sa
sa
(socklen_t[1]){sl}
socklen_t[1]
socklen_t
socklen_t
[1]
[1]
1
{sl}
sl
sl
0
{			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}
if (rlen < 4) continue;
rlen < 4
rlen
rlen
4
continue;
for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);
j=0;
j=0
j
j
0
j<nns && memcmp(ns+j, &sa, sl)
j<nns
j
j
nns
nns
memcmp(ns+j, &sa, sl)
memcmp
memcmp
ns+j
ns
ns
j
j
&sa
sa
sa
sl
sl
j++
j
j
;
if (j==nns) continue;
j==nns
j
j
nns
nns
continue;
for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);
i=next;
i=next
i
i
next
next
i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] )
i<nqueries
i
i
nqueries
nqueries
(				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] )
answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1]
answers[next][0] != queries[i][0]
answers[next][0]
answers[next]
answers
answers
next
next
0
queries[i][0]
queries[i]
queries
queries
i
i
0
answers[next][1] != queries[i][1]
answers[next][1]
answers[next]
answers
answers
next
next
1
queries[i][1]
queries[i]
queries
queries
i
i
1
i++
i
i
;
if (i==nqueries) continue;
i==nqueries
i
i
nqueries
nqueries
continue;
if (alens[i]) continue;
alens[i]
alens
alens
i
i
continue;
switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}
answers[next][3] & 15
answers[next][3]
answers[next]
answers
answers
next
next
3
15
{			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}
case 0:
0
case 3:
3
break;
case 2:
2
if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);
servfail_retry && servfail_retry--
servfail_retry
servfail_retry
servfail_retry--
servfail_retry
servfail_retry
sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);
sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl)
sendto
sendto
fd
fd
queries[i]
queries
queries
i
i
qlens[i]
qlens
qlens
i
i
MSG_NOSIGNAL
MSG_NOSIGNAL
(void *)&ns[j]
void *
void
*
*
&ns[j]
ns[j]
ns
ns
j
j
sl
sl
default:
continue;
alens[i] = rlen;
alens[i] = rlen
alens[i]
alens
alens
i
i
rlen
rlen
if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);
i == next
i
i
next
next
for (; next<nqueries && alens[next]; next++);
;
next<nqueries && alens[next]
next<nqueries
next
next
nqueries
nqueries
alens[next]
alens
alens
next
next
next++
next
next
;
memcpy(answers[i], answers[next], rlen);
memcpy(answers[i], answers[next], rlen)
memcpy
memcpy
answers[i]
answers
answers
i
i
answers[next]
answers
answers
next
next
rlen
rlen
if (next == nqueries) goto out;
next == nqueries
next
next
nqueries
nqueries
goto out;
out
out:	pthread_cleanup_pop(1);
out
pthread_cleanup_pop(1);
pthread_cleanup_pop(1)
pthread_cleanup_pop
pthread_cleanup_pop
1
return 0;
0
-----joern-----
(280,555,0)
(228,104,0)
(547,255,0)
(535,81,0)
(12,289,0)
(424,408,0)
(429,739,0)
(609,260,0)
(470,627,0)
(377,287,0)
(440,367,0)
(564,140,0)
(166,314,0)
(53,183,0)
(350,177,0)
(310,653,0)
(368,672,0)
(555,539,0)
(251,194,0)
(646,405,0)
(759,109,0)
(630,458,0)
(734,502,0)
(775,221,0)
(635,473,0)
(483,118,0)
(728,238,0)
(212,104,0)
(596,429,0)
(538,313,0)
(340,194,0)
(335,618,0)
(494,98,0)
(737,738,0)
(226,194,0)
(21,662,0)
(539,555,0)
(285,27,0)
(382,194,0)
(393,495,0)
(322,611,0)
(300,319,0)
(638,647,0)
(471,19,0)
(514,194,0)
(192,146,0)
(419,474,0)
(432,256,0)
(674,94,0)
(80,299,0)
(413,299,0)
(563,253,0)
(12,37,0)
(11,163,0)
(135,481,0)
(488,582,0)
(772,73,0)
(629,151,0)
(64,622,0)
(71,669,0)
(740,238,0)
(520,50,0)
(359,729,0)
(216,744,0)
(255,547,0)
(189,567,0)
(58,401,0)
(444,646,0)
(70,600,0)
(498,375,0)
(280,230,0)
(62,743,0)
(84,346,0)
(159,46,0)
(307,274,0)
(726,106,0)
(158,603,0)
(740,616,0)
(116,194,0)
(153,717,0)
(42,398,0)
(54,474,0)
(193,420,0)
(481,495,0)
(531,579,0)
(34,151,0)
(181,264,0)
(290,458,0)
(376,221,0)
(488,724,0)
(590,650,0)
(756,618,0)
(467,322,0)
(602,449,0)
(675,253,0)
(71,676,0)
(186,634,0)
(725,520,0)
(283,37,0)
(318,442,0)
(374,221,0)
(264,504,0)
(212,691,0)
(579,632,0)
(121,15,0)
(436,72,0)
(637,681,0)
(738,268,0)
(664,49,0)
(168,651,0)
(281,83,0)
(636,640,0)
(512,136,0)
(350,568,0)
(678,408,0)
(352,209,0)
(104,212,0)
(124,630,0)
(690,170,0)
(54,423,0)
(322,467,0)
(493,368,0)
(401,712,0)
(375,435,0)
(612,190,0)
(249,94,0)
(263,463,0)
(767,104,0)
(452,301,0)
(675,445,0)
(141,260,0)
(667,520,0)
(111,463,0)
(550,657,0)
(491,701,0)
(18,634,0)
(477,291,0)
(686,716,0)
(112,636,0)
(39,264,0)
(61,6,0)
(650,731,0)
(23,657,0)
(272,50,0)
(380,75,0)
(243,506,0)
(663,595,0)
(499,717,0)
(363,153,0)
(60,409,0)
(583,271,0)
(386,427,0)
(517,582,0)
(379,370,0)
(76,146,0)
(196,375,0)
(343,269,0)
(270,287,0)
(183,464,0)
(151,662,0)
(481,701,0)
(585,662,0)
(418,636,0)
(211,405,0)
(209,352,0)
(253,139,0)
(722,504,0)
(566,186,0)
(201,194,0)
(347,616,0)
(482,398,0)
(60,568,0)
(132,429,0)
(287,194,0)
(744,230,0)
(430,270,0)
(29,287,0)
(751,194,0)
(52,404,0)
(71,623,0)
(288,145,0)
(7,81,0)
(456,194,0)
(481,651,0)
(415,211,0)
(274,307,0)
(516,9,0)
(505,677,0)
(605,640,0)
(569,318,0)
(320,72,0)
(46,447,0)
(484,298,0)
(351,535,0)
(775,452,0)
(428,623,0)
(165,650,0)
(644,732,0)
(463,111,0)
(305,277,0)
(190,61,0)
(572,545,0)
(542,586,0)
(688,194,0)
(478,449,0)
(286,702,0)
(677,505,0)
(657,489,0)
(431,194,0)
(405,211,0)
(580,676,0)
(771,146,0)
(647,57,0)
(368,707,0)
(190,118,0)
(235,7,0)
(716,287,0)
(293,189,0)
(704,238,0)
(665,629,0)
(162,479,0)
(234,434,0)
(156,617,0)
(239,39,0)
(407,331,0)
(346,36,0)
(362,284,0)
(740,83,0)
(150,194,0)
(299,16,0)
(190,125,0)
(306,469,0)
(398,482,0)
(461,730,0)
(128,488,0)
(691,212,0)
(745,125,0)
(614,482,0)
(224,430,0)
(502,716,0)
(400,194,0)
(584,512,0)
(642,616,0)
(102,270,0)
(117,550,0)
(683,51,0)
(453,50,0)
(95,672,0)
(603,158,0)
(354,584,0)
(691,661,0)
(634,733,0)
(18,61,0)
(614,194,0)
(242,268,0)
(420,683,0)
(676,680,0)
(333,401,0)
(649,194,0)
(653,413,0)
(372,73,0)
(698,675,0)
(167,291,0)
(55,330,0)
(736,620,0)
(37,707,0)
(614,55,0)
(666,445,0)
(683,420,0)
(269,716,0)
(137,109,0)
(378,193,0)
(606,81,0)
(761,223,0)
(374,469,0)
(47,704,0)
(439,111,0)
(593,213,0)
(254,348,0)
(614,137,0)
(758,483,0)
(289,207,0)
(562,139,0)
(325,207,0)
(195,335,0)
(348,744,0)
(175,193,0)
(315,409,0)
(409,145,0)
(487,19,0)
(533,190,0)
(651,194,0)
(523,738,0)
(338,194,0)
(349,194,0)
(592,680,0)
(75,492,0)
(330,55,0)
(261,111,0)
(26,716,0)
(36,346,0)
(147,30,0)
(576,723,0)
(704,47,0)
(423,54,0)
(579,6,0)
(525,178,0)
(551,29,0)
(40,385,0)
(656,394,0)
(712,194,0)
(450,194,0)
(360,680,0)
(510,367,0)
(731,274,0)
(584,55,0)
(659,467,0)
(366,262,0)
(649,469,0)
(773,194,0)
(703,194,0)
(139,253,0)
(697,640,0)
(671,505,0)
(424,427,0)
(738,321,0)
(370,296,0)
(483,194,0)
(277,305,0)
(527,217,0)
(537,84,0)
(146,118,0)
(336,564,0)
(768,552,0)
(13,177,0)
(262,70,0)
(270,430,0)
(582,488,0)
(364,71,0)
(303,275,0)
(492,75,0)
(15,296,0)
(640,636,0)
(774,723,0)
(457,190,0)
(743,62,0)
(274,731,0)
(656,72,0)
(230,253,0)
(217,323,0)
(616,194,0)
(626,223,0)
(202,422,0)
(87,474,0)
(187,108,0)
(392,317,0)
(460,656,0)
(601,194,0)
(117,489,0)
(749,557,0)
(584,515,0)
(536,696,0)
(416,622,0)
(103,66,0)
(577,18,0)
(421,438,0)
(221,66,0)
(425,14,0)
(70,98,0)
(183,375,0)
(180,101,0)
(85,620,0)
(140,44,0)
(332,321,0)
(545,190,0)
(592,669,0)
(614,424,0)
(334,269,0)
(511,594,0)
(564,672,0)
(39,63,0)
(629,716,0)
(63,528,0)
(230,744,0)
(693,329,0)
(612,114,0)
(631,11,0)
(28,706,0)
(520,0,0)
(174,230,0)
(710,743,0)
(176,194,0)
(405,646,0)
(750,354,0)
(358,103,0)
(557,510,0)
(89,284,0)
(48,71,0)
(669,592,0)
(63,39,0)
(111,439,0)
(91,611,0)
(744,213,0)
(708,716,0)
(452,775,0)
(764,248,0)
(622,193,0)
(624,413,0)
(346,395,0)
(628,662,0)
(5,101,0)
(739,429,0)
(702,194,0)
(255,531,0)
(318,194,0)
(31,268,0)
(597,651,0)
(137,145,0)
(328,465,0)
(80,702,0)
(84,743,0)
(733,634,0)
(739,594,0)
(485,550,0)
(258,226,0)
(584,137,0)
(567,6,0)
(701,194,0)
(608,11,0)
(218,567,0)
(469,649,0)
(199,582,0)
(112,49,0)
(646,238,0)
(727,61,0)
(93,189,0)
(755,662,0)
(746,479,0)
(684,50,0)
(712,401,0)
(160,473,0)
(682,310,0)
(226,299,0)
(277,8,0)
(422,194,0)
(480,158,0)
(554,683,0)
(482,499,0)
(309,341,0)
(777,194,0)
(648,612,0)
(3,492,0)
(762,699,0)
(677,61,0)
(776,401,0)
(67,435,0)
(139,701,0)
(681,314,0)
(420,313,0)
(614,691,0)
(775,594,0)
(275,359,0)
(481,699,0)
(627,321,0)
(534,413,0)
(571,313,0)
(46,576,0)
(476,88,0)
(105,717,0)
(14,121,0)
(182,9,0)
(752,691,0)
(115,330,0)
(57,438,0)
(685,555,0)
(44,140,0)
(552,427,0)
(191,284,0)
(49,220,0)
(630,492,0)
(267,88,0)
(188,740,0)
(108,64,0)
(18,221,0)
(681,716,0)
(331,447,0)
(98,70,0)
(559,271,0)
(614,256,0)
(513,681,0)
(244,723,0)
(389,424,0)
(439,178,0)
(172,260,0)
(297,653,0)
(164,622,0)
(594,739,0)
(206,528,0)
(705,481,0)
(81,7,0)
(396,170,0)
(177,109,0)
(149,504,0)
(423,18,0)
(530,310,0)
(198,123,0)
(125,50,0)
(557,242,0)
(549,283,0)
(371,675,0)
(365,680,0)
(528,264,0)
(696,211,0)
(445,666,0)
(223,10,0)
(230,644,0)
(694,592,0)
(367,267,0)
(247,496,0)
(473,238,0)
(284,89,0)
(211,696,0)
(79,107,0)
(584,256,0)
(275,651,0)
(673,113,0)
(521,62,0)
(707,368,0)
(615,80,0)
(163,9,0)
(623,194,0)
(49,112,0)
(648,92,0)
(518,305,0)
(118,413,0)
(284,287,0)
(96,14,0)
(643,80,0)
(59,8,0)
(319,194,0)
(446,57,0)
(644,555,0)
(295,504,0)
(139,555,0)
(730,321,0)
(528,63,0)
(229,194,0)
(166,716,0)
(506,243,0)
(309,598,0)
(62,144,0)
(145,375,0)
(78,515,0)
(71,61,0)
(82,732,0)
(88,267,0)
(675,644,0)
(89,289,0)
(586,238,0)
(576,504,0)
(226,702,0)
(345,717,0)
(656,600,0)
(584,424,0)
(466,704,0)
(490,105,0)
(570,7,0)
(307,462,0)
(559,680,0)
(636,10,0)
(394,656,0)
(765,775,0)
(731,650,0)
(337,39,0)
(207,106,0)
(143,170,0)
(741,352,0)
(243,107,0)
(558,399,0)
(545,314,0)
(161,262,0)
(611,322,0)
(713,545,0)
(233,611,0)
(316,30,0)
(458,630,0)
(30,657,0)
(138,194,0)
(275,699,0)
(560,238,0)
(417,217,0)
(241,243,0)
(719,768,0)
(41,95,0)
(291,101,0)
(481,64,0)
(640,194,0)
(271,395,0)
(441,775,0)
(747,649,0)
(20,298,0)
(524,196,0)
(406,280,0)
(250,242,0)
(657,576,0)
(614,531,0)
(190,612,0)
(550,617,0)
(171,729,0)
(61,677,0)
(568,60,0)
(16,299,0)
(270,672,0)
(410,550,0)
(604,223,0)
(12,604,0)
(653,310,0)
(368,287,0)
(599,298,0)
(447,331,0)
(401,333,0)
(775,61,0)
(467,702,0)
(179,552,0)
(723,576,0)
(503,504,0)
(742,644,0)
(92,648,0)
(748,277,0)
(268,242,0)
(540,616,0)
(107,243,0)
(578,505,0)
(88,399,0)
(190,623,0)
(589,194,0)
(614,629,0)
(190,221,0)
(97,359,0)
(446,614,0)
(341,329,0)
(302,471,0)
(129,526,0)
(598,309,0)
(9,163,0)
(231,531,0)
(122,92,0)
(509,321,0)
(142,724,0)
(546,360,0)
(497,166,0)
(603,567,0)
(614,262,0)
(690,623,0)
(720,627,0)
(283,166,0)
(409,109,0)
(481,319,0)
(109,260,0)
(242,557,0)
(205,559,0)
(545,50,0)
(95,430,0)
(280,701,0)
(675,491,0)
(204,504,0)
(24,194,0)
(614,512,0)
(437,404,0)
(532,64,0)
(510,557,0)
(565,662,0)
(754,740,0)
(56,139,0)
(574,27,0)
(552,768,0)
(433,144,0)
(770,712,0)
(123,145,0)
(279,711,0)
(92,83,0)
(474,54,0)
(707,37,0)
(636,112,0)
(256,496,0)
(584,531,0)
(614,515,0)
(404,716,0)
(662,27,0)
(634,18,0)
(676,71,0)
(625,370,0)
(413,653,0)
(468,595,0)
(452,716,0)
(16,6,0)
(221,7,0)
(214,366,0)
(2,559,0)
(613,194,0)
(543,271,0)
(273,140,0)
(413,118,0)
(559,238,0)
(496,248,0)
(458,492,0)
(352,515,0)
(465,401,0)
(775,623,0)
(37,283,0)
(627,506,0)
(267,367,0)
(391,712,0)
(488,699,0)
(634,186,0)
(22,287,0)
(369,144,0)
(9,220,0)
(18,423,0)
(332,398,0)
(144,62,0)
(8,277,0)
(614,471,0)
(592,616,0)
(515,352,0)
(108,495,0)
(610,47,0)
(612,648,0)
(553,420,0)
(329,717,0)
(1,341,0)
(94,194,0)
(491,675,0)
(71,48,0)
(153,107,0)
(359,445,0)
(158,47,0)
(408,600,0)
(642,238,0)
(73,10,0)
(289,12,0)
(598,321,0)
(173,298,0)
(661,556,0)
(550,117,0)
(592,238,0)
(604,12,0)
(475,339,0)
(11,10,0)
(486,153,0)
(323,217,0)
(361,510,0)
(709,632,0)
(280,445,0)
(412,535,0)
(427,424,0)
(246,248,0)
(414,333,0)
(746,394,0)
(464,183,0)
(661,6,0)
(617,550,0)
(127,438,0)
(614,8,0)
(215,435,0)
(65,598,0)
(506,627,0)
(743,84,0)
(51,683,0)
(409,60,0)
(257,576,0)
(567,189,0)
(353,707,0)
(531,255,0)
(366,586,0)
(72,656,0)
(515,663,0)
(397,657,0)
(473,616,0)
(193,622,0)
(217,375,0)
(276,103,0)
(735,113,0)
(245,86,0)
(18,118,0)
(317,330,0)
(185,502,0)
(769,646,0)
(120,452,0)
(383,632,0)
(118,194,0)
(587,445,0)
(262,366,0)
(434,483,0)
(496,256,0)
(729,194,0)
(237,44,0)
(399,88,0)
(753,27,0)
(240,676,0)
(114,612,0)
(305,321,0)
(411,319,0)
(200,26,0)
(211,712,0)
(492,732,0)
(373,586,0)
(512,226,0)
(163,11,0)
(594,511,0)
(32,209,0)
(687,746,0)
(775,681,0)
(547,238,0)
(469,374,0)
(222,701,0)
(223,604,0)
(170,690,0)
(86,395,0)
(15,121,0)
(556,661,0)
(573,106,0)
(592,271,0)
(427,552,0)
(11,287,0)
(388,125,0)
(355,18,0)
(73,287,0)
(622,64,0)
(473,271,0)
(219,462,0)
(689,194,0)
(339,194,0)
(225,332,0)
(668,48,0)
(453,10,0)
(384,194,0)
(190,545,0)
(718,118,0)
(107,153,0)
(715,547,0)
(614,434,0)
(711,83,0)
(95,716,0)
(230,280,0)
(104,238,0)
(367,717,0)
(660,662,0)
(455,166,0)
(227,332,0)
(663,395,0)
(442,318,0)
(520,220,0)
(119,438,0)
(699,488,0)
(435,375,0)
(614,341,0)
(217,232,0)
(322,192,0)
(670,453,0)
(210,194,0)
(526,264,0)
(385,238,0)
(282,629,0)
(80,103,0)
(619,298,0)
(706,321,0)
(463,321,0)
(130,463,0)
(296,15,0)
(675,555,0)
(544,702,0)
(9,287,0)
(568,350,0)
(469,306,0)
(69,614,0)
(541,194,0)
(140,564,0)
(177,350,0)
(740,271,0)
(398,332,0)
(459,662,0)
(356,592,0)
(256,86,0)
(110,194,0)
(232,217,0)
(429,680,0)
(47,158,0)
(75,10,0)
(623,690,0)
(17,298,0)
(555,729,0)
(757,36,0)
(594,775,0)
(55,16,0)
(341,309,0)
(68,662,0)
(304,137,0)
(25,775,0)
(339,712,0)
(367,510,0)
(8,105,0)
(264,526,0)
(430,95,0)
(18,623,0)
(126,462,0)
(394,746,0)
(106,314,0)
(768,238,0)
(131,434,0)
(479,449,0)
(474,221,0)
(595,663,0)
(197,212,0)
(669,71,0)
(622,420,0)
(681,775,0)
(213,744,0)
(404,287,0)
(154,309,0)
(77,331,0)
(645,506,0)
(108,319,0)
(721,190,0)
(385,317,0)
(449,238,0)
(357,662,0)
(344,495,0)
(311,323,0)
(7,221,0)
(223,716,0)
(101,264,0)
(35,438,0)
(701,481,0)
(155,117,0)
(74,298,0)
(236,770,0)
(582,117,0)
(169,650,0)
(292,368,0)
(331,576,0)
(655,232,0)
(148,194,0)
(426,439,0)
(178,439,0)
(33,564,0)
(43,644,0)
(700,598,0)
(584,84,0)
(584,691,0)
(327,642,0)
(253,194,0)
(330,317,0)
(359,275,0)
(586,366,0)
(308,547,0)
(125,301,0)
(501,92,0)
(324,299,0)
(381,280,0)
(614,84,0)
(479,746,0)
(390,467,0)
(451,442,0)
(359,555,0)
(152,374,0)
(296,370,0)
(724,488,0)
(548,489,0)
(248,496,0)
(207,289,0)
(446,584,0)
(90,321,0)
(520,151,0)
(265,438,0)
(0,520,0)
(467,299,0)
(454,423,0)
(269,220,0)
(632,579,0)
(519,270,0)
(462,307,0)
(502,10,0)
(106,716,0)
(121,14,0)
(38,50,0)
(618,335,0)
(507,145,0)
(399,730,0)
(166,283,0)
(4,194,0)
(561,55,0)
(641,209,0)
(401,465,0)
(268,738,0)
(99,452,0)
(278,299,0)
(639,252,0)
(125,190,0)
(729,555,0)
(81,535,0)
(192,322,0)
(567,603,0)
(19,194,0)
(184,453,0)
(37,12,0)
(447,46,0)
(564,287,0)
(640,220,0)
(289,89,0)
(679,83,0)
(692,556,0)
(744,348,0)
(588,305,0)
(474,118,0)
(106,207,0)
(157,136,0)
(695,272,0)
(449,479,0)
(374,266,0)
(683,101,0)
(448,359,0)
(259,471,0)
(607,136,0)
(581,89,0)
(413,702,0)
(146,192,0)
(342,683,0)
(294,730,0)
(387,680,0)
(402,260,0)
(766,618,0)
(714,255,0)
(317,385,0)
(483,221,0)
(584,262,0)
(312,512,0)
(203,95,0)
(443,260,0)
(522,211,0)
(136,512,0)
(559,616,0)
(177,145,0)
(134,724,0)
(724,117,0)
(473,321,0)
(100,194,0)
(266,374,0)
(472,194,0)
(101,313,0)
(775,118,0)
(508,526,0)
(730,399,0)
(284,672,0)
(403,51,0)
(45,499,0)
(374,118,0)
(644,445,0)
(621,491,0)
(133,704,0)
(658,482,0)
(629,220,0)
(633,370,0)
(529,75,0)
(469,374,1)
(366,586,1)
(108,187,1)
(432,496,1)
(685,171,1)
(683,101,1)
(748,305,1)
(634,733,1)
(71,61,1)
(247,248,1)
(642,616,1)
(763,178,1)
(307,462,1)
(305,588,1)
(666,587,1)
(101,264,1)
(156,410,1)
(12,289,1)
(528,63,1)
(481,651,1)
(582,199,1)
(762,30,1)
(520,50,1)
(133,61,1)
(139,701,1)
(253,139,1)
(545,314,1)
(584,424,1)
(124,44,1)
(270,102,1)
(360,680,1)
(316,147,1)
(603,158,1)
(483,758,1)
(422,202,1)
(468,515,1)
(84,537,1)
(62,521,1)
(595,468,1)
(174,216,1)
(775,681,1)
(669,71,1)
(44,237,1)
(766,756,1)
(526,508,1)
(686,708,1)
(746,687,1)
(451,569,1)
(587,654,1)
(759,137,1)
(614,629,1)
(309,598,1)
(215,498,1)
(118,413,1)
(453,50,1)
(754,711,1)
(637,765,1)
(359,445,1)
(182,516,1)
(380,529,1)
(111,463,1)
(186,566,1)
(551,163,1)
(632,709,1)
(630,458,1)
(273,564,1)
(279,190,1)
(520,220,1)
(146,771,1)
(695,740,1)
(410,155,1)
(646,444,1)
(211,415,1)
(218,189,1)
(647,638,1)
(198,60,1)
(341,309,1)
(18,221,1)
(446,57,1)
(481,699,1)
(430,224,1)
(614,512,1)
(678,424,1)
(51,403,1)
(329,693,1)
(5,180,1)
(92,501,1)
(657,23,1)
(324,278,1)
(543,346,1)
(614,84,1)
(272,695,1)
(675,698,1)
(230,280,1)
(401,333,1)
(405,646,1)
(705,222,1)
(111,261,1)
(321,90,1)
(303,359,1)
(623,690,1)
(519,95,1)
(404,437,1)
(625,379,1)
(268,738,1)
(707,368,1)
(700,65,1)
(592,271,1)
(367,440,1)
(45,482,1)
(302,483,1)
(308,661,1)
(343,502,1)
(653,310,1)
(577,634,1)
(354,750,1)
(529,3,1)
(248,246,1)
(95,716,1)
(153,363,1)
(544,286,1)
(195,618,1)
(359,555,1)
(769,575,1)
(22,377,1)
(95,41,1)
(698,371,1)
(191,362,1)
(30,316,1)
(517,762,1)
(128,582,1)
(403,554,1)
(572,713,1)
(46,447,1)
(86,245,1)
(675,253,1)
(58,333,1)
(311,109,1)
(373,656,1)
(680,365,1)
(26,200,1)
(687,479,1)
(720,367,1)
(674,249,1)
(401,465,1)
(356,694,1)
(488,128,1)
(374,221,1)
(479,449,1)
(275,303,1)
(339,712,1)
(190,623,1)
(461,510,1)
(760,620,1)
(730,294,1)
(584,137,1)
(263,473,1)
(563,729,1)
(274,731,1)
(522,646,1)
(353,368,1)
(545,572,1)
(676,680,1)
(350,177,1)
(52,151,1)
(724,117,1)
(587,760,1)
(49,220,1)
(536,522,1)
(457,125,1)
(399,730,1)
(757,84,1)
(106,314,1)
(731,650,1)
(134,582,1)
(223,716,1)
(322,611,1)
(584,512,1)
(670,184,1)
(42,332,1)
(293,603,1)
(255,714,1)
(121,14,1)
(243,241,1)
(599,630,1)
(374,266,1)
(277,305,1)
(724,142,1)
(775,441,1)
(535,351,1)
(772,372,1)
(711,83,1)
(621,675,1)
(549,166,1)
(190,118,1)
(143,428,1)
(464,183,1)
(641,32,1)
(153,107,1)
(446,584,1)
(723,774,1)
(239,206,1)
(130,263,1)
(264,526,1)
(721,612,1)
(73,772,1)
(290,124,1)
(507,464,1)
(533,740,1)
(488,582,1)
(584,256,1)
(277,748,1)
(427,552,1)
(275,699,1)
(72,436,1)
(633,495,1)
(178,525,1)
(84,743,1)
(80,103,1)
(775,61,1)
(480,47,1)
(429,680,1)
(368,672,1)
(726,89,1)
(241,506,1)
(614,55,1)
(330,317,1)
(518,499,1)
(9,220,1)
(276,221,1)
(250,268,1)
(635,321,1)
(296,15,1)
(254,744,1)
(604,223,1)
(299,324,1)
(630,492,1)
(226,258,1)
(405,211,1)
(235,376,1)
(171,287,1)
(665,282,1)
(476,399,1)
(564,33,1)
(418,112,1)
(159,576,1)
(682,530,1)
(413,624,1)
(7,81,1)
(602,335,1)
(501,122,1)
(60,409,1)
(502,10,1)
(41,203,1)
(744,213,1)
(496,248,1)
(473,160,1)
(614,137,1)
(167,477,1)
(312,136,1)
(588,518,1)
(291,101,1)
(185,604,1)
(692,691,1)
(605,80,1)
(449,238,1)
(718,226,1)
(317,385,1)
(234,640,1)
(61,677,1)
(568,350,1)
(439,426,1)
(0,520,1)
(399,558,1)
(211,712,1)
(611,233,1)
(677,505,1)
(523,737,1)
(158,47,1)
(160,635,1)
(335,618,1)
(491,621,1)
(592,238,1)
(608,404,1)
(245,256,1)
(117,550,1)
(458,492,1)
(367,267,1)
(13,409,1)
(754,83,1)
(339,475,1)
(166,314,1)
(108,64,1)
(267,88,1)
(54,423,1)
(679,281,1)
(569,702,1)
(208,73,1)
(49,664,1)
(599,775,1)
(714,547,1)
(740,616,1)
(559,205,1)
(71,676,1)
(636,112,1)
(217,417,1)
(190,721,1)
(634,186,1)
(527,323,1)
(414,776,1)
(217,323,1)
(467,702,1)
(76,118,1)
(584,531,1)
(348,744,1)
(716,287,1)
(190,545,1)
(508,129,1)
(238,560,1)
(224,270,1)
(642,327,1)
(165,590,1)
(71,623,1)
(448,445,1)
(390,146,1)
(69,422,1)
(775,221,1)
(392,579,1)
(630,124,1)
(214,586,1)
(608,29,1)
(226,299,1)
(270,672,1)
(331,576,1)
(463,321,1)
(520,151,1)
(18,118,1)
(584,691,1)
(449,478,1)
(177,13,1)
(458,290,1)
(187,64,1)
(420,683,1)
(213,593,1)
(614,531,1)
(586,238,1)
(366,214,1)
(372,163,1)
(560,728,1)
(416,193,1)
(359,97,1)
(592,356,1)
(440,267,1)
(633,108,1)
(190,612,1)
(363,486,1)
(474,118,1)
(483,221,1)
(550,485,1)
(200,604,1)
(498,296,1)
(105,490,1)
(606,235,1)
(256,496,1)
(256,432,1)
(716,686,1)
(187,291,1)
(473,238,1)
(23,397,1)
(398,42,1)
(147,117,1)
(286,616,1)
(502,734,1)
(584,354,1)
(387,620,1)
(550,657,1)
(614,8,1)
(656,394,1)
(743,710,1)
(9,287,1)
(36,757,1)
(752,212,1)
(297,534,1)
(473,321,1)
(750,54,1)
(211,696,1)
(715,308,1)
(652,770,1)
(393,344,1)
(227,225,1)
(184,50,1)
(40,392,1)
(48,668,1)
(725,453,1)
(743,62,1)
(417,527,1)
(46,576,1)
(9,182,1)
(683,51,1)
(16,299,1)
(528,264,1)
(575,296,1)
(559,680,1)
(528,206,1)
(46,159,1)
(676,580,1)
(125,301,1)
(500,502,1)
(196,375,1)
(681,716,1)
(31,738,1)
(594,511,1)
(487,471,1)
(212,104,1)
(53,196,1)
(520,667,1)
(547,238,1)
(539,685,1)
(455,497,1)
(697,605,1)
(315,145,1)
(175,532,1)
(193,420,1)
(614,515,1)
(332,321,1)
(663,595,1)
(102,519,1)
(125,50,1)
(18,577,1)
(491,675,1)
(550,617,1)
(352,741,1)
(587,591,1)
(269,716,1)
(769,232,1)
(444,769,1)
(622,416,1)
(184,272,1)
(232,655,1)
(532,291,1)
(640,636,1)
(775,623,1)
(453,10,1)
(73,10,1)
(691,752,1)
(62,144,1)
(447,331,1)
(385,238,1)
(83,679,1)
(707,353,1)
(664,697,1)
(331,407,1)
(481,135,1)
(701,481,1)
(649,469,1)
(26,716,1)
(131,234,1)
(396,143,1)
(163,11,1)
(244,257,1)
(206,264,1)
(614,256,1)
(170,396,1)
(327,339,1)
(502,716,1)
(320,394,1)
(409,109,1)
(242,250,1)
(638,652,1)
(180,528,1)
(626,761,1)
(129,181,1)
(236,712,1)
(413,702,1)
(294,461,1)
(108,319,1)
(633,528,1)
(73,287,1)
(282,74,1)
(482,658,1)
(18,623,1)
(513,637,1)
(269,334,1)
(192,322,1)
(430,270,1)
(155,657,1)
(240,592,1)
(605,473,1)
(37,707,1)
(475,405,1)
(477,420,1)
(404,716,1)
(452,99,1)
(19,487,1)
(163,9,1)
(28,105,1)
(135,705,1)
(525,439,1)
(729,555,1)
(774,244,1)
(599,44,1)
(389,427,1)
(407,77,1)
(408,678,1)
(364,48,1)
(765,630,1)
(14,425,1)
(32,86,1)
(749,242,1)
(469,306,1)
(190,61,1)
(212,197,1)
(219,731,1)
(483,118,1)
(537,743,1)
(739,429,1)
(2,669,1)
(107,243,1)
(412,606,1)
(542,373,1)
(70,98,1)
(332,227,1)
(553,101,1)
(63,39,1)
(712,401,1)
(612,648,1)
(719,179,1)
(89,284,1)
(430,95,1)
(326,559,1)
(107,79,1)
(103,358,1)
(310,682,1)
(576,723,1)
(730,321,1)
(711,279,1)
(132,596,1)
(351,412,1)
(756,232,1)
(771,76,1)
(216,213,1)
(242,268,1)
(586,542,1)
(562,563,1)
(325,106,1)
(488,724,1)
(467,659,1)
(181,46,1)
(656,72,1)
(769,238,1)
(280,555,1)
(604,12,1)
(624,653,1)
(362,37,1)
(352,209,1)
(280,701,1)
(747,54,1)
(761,26,1)
(768,238,1)
(659,390,1)
(371,275,1)
(434,131,1)
(47,704,1)
(437,52,1)
(369,433,1)
(699,488,1)
(769,408,1)
(1,309,1)
(452,301,1)
(614,69,1)
(530,297,1)
(481,495,1)
(259,302,1)
(262,161,1)
(123,198,1)
(87,192,1)
(50,38,1)
(709,383,1)
(139,56,1)
(427,386,1)
(651,597,1)
(177,109,1)
(460,72,1)
(268,31,1)
(280,445,1)
(654,269,1)
(145,288,1)
(429,132,1)
(55,561,1)
(278,55,1)
(181,699,1)
(202,275,1)
(713,533,1)
(101,5,1)
(64,622,1)
(433,663,1)
(368,287,1)
(381,174,1)
(81,535,1)
(375,435,1)
(104,238,1)
(178,439,1)
(281,0,1)
(583,543,1)
(465,328,1)
(398,332,1)
(745,545,1)
(346,36,1)
(80,702,1)
(54,474,1)
(554,553,1)
(274,307,1)
(681,314,1)
(463,130,1)
(669,592,1)
(378,175,1)
(158,480,1)
(188,754,1)
(89,581,1)
(8,59,1)
(614,262,1)
(633,274,1)
(415,696,1)
(631,608,1)
(166,716,1)
(122,457,1)
(770,236,1)
(355,474,1)
(304,60,1)
(29,287,1)
(426,111,1)
(657,576,1)
(347,623,1)
(770,712,1)
(207,106,1)
(684,491,1)
(243,506,1)
(598,321,1)
(584,515,1)
(493,223,1)
(646,238,1)
(512,136,1)
(394,746,1)
(515,352,1)
(56,562,1)
(53,375,1)
(746,479,1)
(481,319,1)
(166,455,1)
(490,8,1)
(145,375,1)
(106,573,1)
(580,240,1)
(193,378,1)
(645,627,1)
(88,399,1)
(221,7,1)
(283,166,1)
(177,145,1)
(618,766,1)
(232,217,1)
(559,616,1)
(335,195,1)
(614,482,1)
(288,507,1)
(397,46,1)
(246,764,1)
(337,239,1)
(614,471,1)
(614,691,1)
(740,271,1)
(262,366,1)
(217,375,1)
(87,103,1)
(99,120,1)
(648,92,1)
(555,539,1)
(29,551,1)
(372,430,1)
(358,276,1)
(629,220,1)
(296,370,1)
(65,153,1)
(466,133,1)
(593,491,1)
(581,284,1)
(197,104,1)
(567,218,1)
(742,453,1)
(592,616,1)
(142,134,1)
(255,547,1)
(34,629,1)
(315,123,1)
(280,406,1)
(627,321,1)
(622,193,1)
(629,665,1)
(573,726,1)
(379,633,1)
(584,84,1)
(524,464,1)
(424,389,1)
(479,162,1)
(740,188,1)
(271,583,1)
(305,321,1)
(18,61,1)
(694,360,1)
(348,254,1)
(694,680,1)
(552,768,1)
(71,48,1)
(486,107,1)
(607,642,1)
(261,463,1)
(328,58,1)
(78,352,1)
(512,312,1)
(123,145,1)
(534,718,1)
(584,262,1)
(275,651,1)
(164,193,1)
(734,185,1)
(284,191,1)
(775,594,1)
(497,707,1)
(406,381,1)
(636,418,1)
(452,716,1)
(383,531,1)
(223,10,1)
(120,681,1)
(30,657,1)
(558,730,1)
(570,81,1)
(140,564,1)
(467,299,1)
(761,716,1)
(515,78,1)
(453,670,1)
(222,19,1)
(98,494,1)
(495,393,1)
(423,18,1)
(162,449,1)
(635,706,1)
(7,570,1)
(776,391,1)
(413,653,1)
(693,341,1)
(139,555,1)
(627,470,1)
(97,448,1)
(671,578,1)
(189,93,1)
(327,35,1)
(91,467,1)
(157,607,1)
(18,634,1)
(510,557,1)
(75,380,1)
(615,94,1)
(37,283,1)
(228,767,1)
(482,398,1)
(454,18,1)
(8,277,1)
(125,388,1)
(474,221,1)
(322,467,1)
(567,189,1)
(764,642,1)
(596,25,1)
(136,157,1)
(704,238,1)
(775,118,1)
(696,536,1)
(93,293,1)
(435,67,1)
(391,318,1)
(35,652,1)
(436,320,1)
(702,544,1)
(183,53,1)
(43,742,1)
(564,672,1)
(644,555,1)
(706,28,1)
(445,666,1)
(564,287,1)
(344,108,1)
(106,716,1)
(587,599,1)
(644,445,1)
(617,156,1)
(424,427,1)
(25,452,1)
(516,11,1)
(209,641,1)
(681,513,1)
(323,311,1)
(88,476,1)
(404,287,1)
(428,319,1)
(593,492,1)
(270,287,1)
(474,419,1)
(471,259,1)
(727,335,1)
(597,168,1)
(423,454,1)
(531,231,1)
(629,716,1)
(169,405,1)
(152,747,1)
(330,115,1)
(74,44,1)
(409,315,1)
(342,51,1)
(620,85,1)
(275,359,1)
(334,343,1)
(591,348,1)
(137,145,1)
(738,321,1)
(108,495,1)
(614,434,1)
(643,615,1)
(233,91,1)
(506,627,1)
(96,370,1)
(607,271,1)
(582,117,1)
(598,700,1)
(12,37,1)
(318,442,1)
(661,556,1)
(205,2,1)
(690,170,1)
(470,720,1)
(610,704,1)
(341,1,1)
(272,50,1)
(413,299,1)
(505,671,1)
(360,546,1)
(473,616,1)
(636,10,1)
(75,10,1)
(223,626,1)
(151,34,1)
(594,739,1)
(92,83,1)
(494,262,1)
(359,729,1)
(44,140,1)
(506,645,1)
(230,644,1)
(612,114,1)
(640,220,1)
(738,523,1)
(510,361,1)
(181,30,1)
(656,460,1)
(675,445,1)
(144,369,1)
(385,40,1)
(161,366,1)
(225,329,1)
(71,364,1)
(287,22,1)
(531,255,1)
(758,434,1)
(740,83,1)
(199,517,1)
(668,676,1)
(28,763,1)
(441,594,1)
(374,118,1)
(283,549,1)
(59,277,1)
(11,631,1)
(691,212,1)
(309,154,1)
(622,164,1)
(481,64,1)
(439,111,1)
(768,719,1)
(137,304,1)
(566,355,1)
(658,398,1)
(80,643,1)
(744,230,1)
(386,552,1)
(769,16,1)
(33,336,1)
(39,337,1)
(485,617,1)
(154,598,1)
(376,192,1)
(478,602,1)
(462,126,1)
(196,524,1)
(448,253,1)
(179,70,1)
(289,207,1)
(540,347,1)
(587,326,1)
(77,159,1)
(614,341,1)
(557,749,1)
(258,512,1)
(67,215,1)
(567,603,1)
(15,121,1)
(559,238,1)
(336,269,1)
(126,219,1)
(190,125,1)
(556,692,1)
(655,217,1)
(644,43,1)
(140,273,1)
(377,701,1)
(710,62,1)
(90,509,1)
(675,555,1)
(249,649,1)
(419,87,1)
(207,325,1)
(546,669,1)
(192,146,1)
(85,736,1)
(491,701,1)
(708,559,1)
(55,330,1)
(545,50,1)
(374,152,1)
(104,228,1)
(333,414,1)
(80,299,1)
(112,49,1)
(587,73,1)
(203,404,1)
(496,247,1)
(561,330,1)
(584,55,1)
(492,75,1)
(319,300,1)
(521,144,1)
(667,725,1)
(257,274,1)
(706,321,1)
(736,348,1)
(622,420,1)
(289,89,1)
(411,651,1)
(226,702,1)
(269,220,1)
(741,209,1)
(675,644,1)
(767,567,1)
(291,167,1)
(557,242,1)
(47,610,1)
(547,715,1)
(616,540,1)
(284,672,1)
(728,770,1)
(284,287,1)
(11,287,1)
(579,632,1)
(300,411,1)
(365,387,1)
(587,500,1)
(740,238,1)
(614,424,1)
(361,557,1)
(473,271,1)
(683,342,1)
(368,292,1)
(592,680,1)
(237,140,1)
(183,375,1)
(190,221,1)
(79,243,1)
(442,451,1)
(650,165,1)
(292,493,1)
(642,238,1)
(446,614,1)
(109,759,1)
(578,727,1)
(230,253,1)
(38,684,1)
(231,255,1)
(3,644,1)
(590,169,1)
(499,45,1)
(737,178,1)
(95,672,1)
(202,208,1)
(775,452,1)
(11,10,1)
(509,80,1)
(367,510,1)
(57,647,1)
(695,0,1)
(704,466,1)
(39,264,1)
(409,145,1)
(94,674,1)
(146,118,1)
(115,317,1)
(370,625,1)
(425,96,1)
(559,271,1)
(60,568,1)
(388,745,1)
(520,453,2)
(727,335,2)
(587,559,2)
(211,696,2)
(37,223,2)
(75,491,2)
(557,178,2)
(55,335,2)
(644,445,2)
(335,618,2)
(401,333,2)
(15,121,2)
(449,238,2)
(483,118,2)
(622,420,2)
(445,44,2)
(43,491,2)
(274,731,2)
(84,642,2)
(275,359,2)
(634,186,2)
(305,178,2)
(44,269,2)
(352,642,2)
(775,221,2)
(576,274,2)
(126,731,2)
(351,192,2)
(80,54,2)
(720,178,2)
(123,145,2)
(359,54,2)
(312,652,2)
(739,630,2)
(583,642,2)
(761,604,2)
(76,652,2)
(262,335,2)
(375,435,2)
(494,335,2)
(467,702,2)
(775,681,2)
(413,653,2)
(473,473,2)
(598,321,2)
(467,146,2)
(164,193,2)
(224,404,2)
(215,296,2)
(501,740,2)
(477,528,2)
(383,335,2)
(376,192,2)
(550,617,2)
(44,140,2)
(332,321,2)
(310,652,2)
(608,163,2)
(580,592,2)
(87,652,2)
(387,620,2)
(629,220,2)
(530,652,2)
(235,192,2)
(488,724,2)
(775,452,2)
(137,145,2)
(297,652,2)
(584,531,2)
(454,474,2)
(446,614,2)
(142,582,2)
(208,73,2)
(710,642,2)
(718,770,2)
(325,37,2)
(385,238,2)
(686,559,2)
(380,491,2)
(524,464,2)
(146,118,2)
(452,630,2)
(11,163,2)
(178,439,2)
(89,37,2)
(594,739,2)
(426,473,2)
(677,505,2)
(481,651,2)
(740,271,2)
(582,30,2)
(366,586,2)
(230,644,2)
(367,510,2)
(12,223,2)
(413,702,2)
(367,267,2)
(183,296,2)
(642,652,2)
(646,770,2)
(101,264,2)
(671,335,2)
(767,335,2)
(762,30,2)
(320,335,2)
(584,256,2)
(584,262,2)
(584,424,2)
(326,559,2)
(330,317,2)
(452,301,2)
(25,630,2)
(104,335,2)
(108,319,2)
(8,277,2)
(359,348,2)
(699,488,2)
(106,716,2)
(280,555,2)
(401,465,2)
(750,54,2)
(206,274,2)
(190,221,2)
(481,54,2)
(353,223,2)
(230,253,2)
(603,158,2)
(711,740,2)
(529,491,2)
(575,296,2)
(346,36,2)
(272,50,2)
(70,98,2)
(255,335,2)
(322,467,2)
(356,669,2)
(354,54,2)
(415,646,2)
(334,502,2)
(404,44,2)
(359,445,2)
(480,335,2)
(89,284,2)
(41,404,2)
(682,770,2)
(307,731,2)
(440,178,2)
(455,223,2)
(130,473,2)
(226,702,2)
(192,322,2)
(587,620,2)
(303,502,2)
(734,559,2)
(436,335,2)
(573,37,2)
(603,335,2)
(99,630,2)
(523,178,2)
(775,61,2)
(289,207,2)
(26,604,2)
(427,552,2)
(706,473,2)
(614,424,2)
(223,10,2)
(405,770,2)
(531,255,2)
(275,44,2)
(193,420,2)
(190,612,2)
(287,54,2)
(761,559,2)
(481,495,2)
(284,672,2)
(644,491,2)
(390,146,2)
(471,54,2)
(420,683,2)
(482,178,2)
(398,332,2)
(559,620,2)
(29,287,2)
(284,37,2)
(187,528,2)
(98,335,2)
(226,299,2)
(185,559,2)
(269,716,2)
(614,512,2)
(449,335,2)
(701,54,2)
(667,453,2)
(394,335,2)
(64,291,2)
(69,54,2)
(614,515,2)
(687,335,2)
(335,232,2)
(448,620,2)
(635,473,2)
(359,555,2)
(559,616,2)
(60,296,2)
(59,178,2)
(726,37,2)
(445,269,2)
(293,335,2)
(146,770,2)
(242,178,2)
(754,0,2)
(632,335,2)
(590,405,2)
(481,319,2)
(439,473,2)
(205,620,2)
(388,740,2)
(26,716,2)
(640,54,2)
(53,464,2)
(510,178,2)
(182,11,2)
(261,473,2)
(604,604,2)
(258,652,2)
(701,481,2)
(562,54,2)
(53,296,2)
(406,275,2)
(694,620,2)
(448,348,2)
(76,770,2)
(118,413,2)
(627,321,2)
(389,335,2)
(360,669,2)
(147,46,2)
(447,331,2)
(631,404,2)
(640,636,2)
(125,740,2)
(707,368,2)
(723,274,2)
(275,559,2)
(107,178,2)
(458,124,2)
(255,547,2)
(211,646,2)
(614,137,2)
(65,178,2)
(534,652,2)
(221,192,2)
(567,603,2)
(719,335,2)
(424,335,2)
(397,46,2)
(742,491,2)
(586,238,2)
(223,604,2)
(280,701,2)
(386,335,2)
(648,740,2)
(730,178,2)
(560,770,2)
(679,0,2)
(587,502,2)
(61,677,2)
(700,178,2)
(67,296,2)
(275,54,2)
(654,269,2)
(430,404,2)
(545,50,2)
(7,81,2)
(81,535,2)
(133,335,2)
(691,212,2)
(191,37,2)
(38,491,2)
(219,731,2)
(559,271,2)
(270,672,2)
(70,335,2)
(653,652,2)
(107,243,2)
(77,159,2)
(515,642,2)
(166,314,2)
(744,275,2)
(566,474,2)
(49,54,2)
(118,652,2)
(18,474,2)
(254,275,2)
(267,88,2)
(746,479,2)
(297,770,2)
(417,296,2)
(374,266,2)
(466,335,2)
(190,545,2)
(439,111,2)
(475,770,2)
(592,680,2)
(309,178,2)
(581,37,2)
(617,46,2)
(681,314,2)
(61,335,2)
(243,178,2)
(184,491,2)
(112,54,2)
(1,178,2)
(282,44,2)
(212,104,2)
(269,502,2)
(423,474,2)
(62,642,2)
(243,506,2)
(409,296,2)
(157,770,2)
(620,348,2)
(244,274,2)
(3,491,2)
(550,46,2)
(241,178,2)
(9,287,2)
(71,48,2)
(5,528,2)
(73,10,2)
(647,652,2)
(522,646,2)
(513,630,2)
(527,296,2)
(584,691,2)
(528,63,2)
(277,305,2)
(625,405,2)
(231,335,2)
(502,559,2)
(18,118,2)
(409,60,2)
(90,80,2)
(623,690,2)
(97,269,2)
(624,770,2)
(665,44,2)
(196,375,2)
(506,627,2)
(294,178,2)
(46,576,2)
(666,44,2)
(32,642,2)
(211,712,2)
(429,680,2)
(520,50,2)
(374,118,2)
(303,54,2)
(296,15,2)
(542,335,2)
(137,296,2)
(473,321,2)
(125,301,2)
(419,770,2)
(106,314,2)
(253,54,2)
(578,335,2)
(519,404,2)
(377,54,2)
(614,434,2)
(675,644,2)
(642,616,2)
(348,744,2)
(184,453,2)
(458,492,2)
(669,71,2)
(166,716,2)
(435,296,2)
(222,54,2)
(684,491,2)
(188,740,2)
(7,192,2)
(237,269,2)
(394,746,2)
(445,348,2)
(299,335,2)
(303,348,2)
(758,54,2)
(656,335,2)
(230,280,2)
(155,46,2)
(80,103,2)
(14,370,2)
(545,740,2)
(528,274,2)
(641,642,2)
(430,95,2)
(11,10,2)
(144,642,2)
(146,652,2)
(112,49,2)
(618,232,2)
(716,287,2)
(385,335,2)
(757,642,2)
(359,73,2)
(775,594,2)
(469,374,2)
(663,642,2)
(535,192,2)
(259,54,2)
(158,335,2)
(145,296,2)
(474,221,2)
(592,616,2)
(0,453,2)
(587,348,2)
(516,11,2)
(405,211,2)
(677,335,2)
(381,275,2)
(490,178,2)
(698,275,2)
(307,462,2)
(339,770,2)
(650,405,2)
(445,502,2)
(102,404,2)
(587,73,2)
(424,427,2)
(269,220,2)
(145,375,2)
(213,275,2)
(39,264,2)
(675,555,2)
(302,54,2)
(530,770,2)
(348,275,2)
(181,274,2)
(659,146,2)
(539,54,2)
(303,559,2)
(588,178,2)
(139,701,2)
(479,449,2)
(521,642,2)
(271,642,2)
(464,464,2)
(288,296,2)
(512,136,2)
(656,72,2)
(18,221,2)
(407,159,2)
(479,335,2)
(509,80,2)
(500,502,2)
(134,582,2)
(724,117,2)
(247,642,2)
(256,496,2)
(555,539,2)
(460,335,2)
(532,291,2)
(637,630,2)
(47,335,2)
(587,44,2)
(135,54,2)
(413,299,2)
(631,163,2)
(663,595,2)
(624,652,2)
(636,112,2)
(289,37,2)
(546,669,2)
(746,335,2)
(604,559,2)
(586,335,2)
(683,528,2)
(292,223,2)
(543,642,2)
(105,178,2)
(212,335,2)
(754,740,2)
(427,335,2)
(446,584,2)
(653,310,2)
(163,9,2)
(278,335,2)
(303,620,2)
(740,0,2)
(275,269,2)
(709,335,2)
(697,54,2)
(668,592,2)
(332,178,2)
(747,54,2)
(359,729,2)
(568,350,2)
(331,576,2)
(174,275,2)
(350,177,2)
(640,220,2)
(11,287,2)
(740,238,2)
(478,335,2)
(685,54,2)
(315,296,2)
(115,335,2)
(612,740,2)
(553,528,2)
(83,0,2)
(18,634,2)
(375,296,2)
(445,620,2)
(563,54,2)
(744,230,2)
(448,73,2)
(86,642,2)
(420,528,2)
(85,348,2)
(463,473,2)
(531,335,2)
(441,630,2)
(49,220,2)
(270,287,2)
(202,54,2)
(264,526,2)
(512,770,2)
(37,283,2)
(595,642,2)
(704,238,2)
(268,738,2)
(361,178,2)
(47,704,2)
(461,178,2)
(280,275,2)
(649,469,2)
(669,620,2)
(189,335,2)
(704,335,2)
(275,699,2)
(216,275,2)
(177,145,2)
(308,335,2)
(707,223,2)
(582,117,2)
(37,707,2)
(675,253,2)
(464,296,2)
(608,404,2)
(636,10,2)
(718,652,2)
(350,409,2)
(80,299,2)
(769,770,2)
(169,405,2)
(771,652,2)
(178,473,2)
(97,502,2)
(740,83,2)
(291,528,2)
(775,118,2)
(192,770,2)
(699,30,2)
(343,502,2)
(72,335,2)
(760,620,2)
(323,296,2)
(359,44,2)
(177,109,2)
(277,178,2)
(34,44,2)
(152,54,2)
(705,54,2)
(759,296,2)
(502,716,2)
(594,511,2)
(657,46,2)
(56,54,2)
(270,404,2)
(584,137,2)
(413,770,2)
(54,423,2)
(768,238,2)
(364,592,2)
(50,491,2)
(444,770,2)
(275,348,2)
(680,620,2)
(448,559,2)
(434,54,2)
(97,73,2)
(322,611,2)
(453,491,2)
(372,44,2)
(60,568,2)
(108,528,2)
(422,54,2)
(317,385,2)
(621,275,2)
(404,287,2)
(258,770,2)
(564,269,2)
(253,139,2)
(693,178,2)
(55,330,2)
(425,370,2)
(9,220,2)
(626,559,2)
(446,57,2)
(233,467,2)
(303,269,2)
(622,291,2)
(437,44,2)
(160,473,2)
(491,701,2)
(584,54,2)
(45,178,2)
(683,51,2)
(29,163,2)
(430,270,2)
(642,770,2)
(579,335,2)
(661,556,2)
(474,118,2)
(128,582,2)
(280,445,2)
(721,740,2)
(473,271,2)
(9,11,2)
(368,672,2)
(476,178,2)
(690,170,2)
(752,335,2)
(768,335,2)
(749,178,2)
(594,630,2)
(649,54,2)
(486,178,2)
(39,206,2)
(568,409,2)
(636,54,2)
(129,274,2)
(423,18,2)
(248,642,2)
(745,740,2)
(515,352,2)
(393,108,2)
(139,54,2)
(153,178,2)
(419,652,2)
(658,178,2)
(499,178,2)
(473,238,2)
(327,770,2)
(92,740,2)
(724,582,2)
(87,770,2)
(365,620,2)
(11,404,2)
(15,370,2)
(630,458,2)
(577,474,2)
(448,269,2)
(445,559,2)
(487,54,2)
(696,646,2)
(642,238,2)
(290,124,2)
(399,730,2)
(744,213,2)
(92,83,2)
(111,473,2)
(398,178,2)
(190,125,2)
(517,30,2)
(483,221,2)
(339,712,2)
(739,429,2)
(46,447,2)
(303,44,2)
(94,54,2)
(432,642,2)
(683,101,2)
(228,335,2)
(552,335,2)
(630,44,2)
(572,740,2)
(124,44,2)
(652,770,2)
(48,592,2)
(369,642,2)
(493,223,2)
(132,630,2)
(54,474,2)
(193,291,2)
(223,559,2)
(23,46,2)
(88,178,2)
(403,528,2)
(296,405,2)
(274,405,2)
(448,44,2)
(559,238,2)
(410,46,2)
(157,652,2)
(614,531,2)
(765,630,2)
(344,108,2)
(534,770,2)
(433,642,2)
(772,44,2)
(95,404,2)
(483,54,2)
(675,275,2)
(322,146,2)
(404,716,2)
(656,394,2)
(246,642,2)
(666,502,2)
(303,73,2)
(179,335,2)
(218,335,2)
(239,206,2)
(629,44,2)
(498,296,2)
(321,80,2)
(304,296,2)
(559,680,2)
(743,642,2)
(370,405,2)
(592,620,2)
(730,321,2)
(337,206,2)
(154,178,2)
(373,335,2)
(771,770,2)
(473,616,2)
(352,209,2)
(217,375,2)
(183,464,2)
(470,178,2)
(675,445,2)
(740,740,2)
(121,370,2)
(84,743,2)
(315,60,2)
(584,55,2)
(117,550,2)
(190,740,2)
(715,335,2)
(488,582,2)
(648,92,2)
(554,528,2)
(341,178,2)
(140,564,2)
(557,242,2)
(131,54,2)
(775,623,2)
(30,657,2)
(741,642,2)
(238,770,2)
(120,630,2)
(97,559,2)
(444,405,2)
(8,178,2)
(564,672,2)
(556,335,2)
(536,646,2)
(738,321,2)
(716,559,2)
(203,404,2)
(97,348,2)
(445,666,2)
(75,10,2)
(713,740,2)
(528,264,2)
(284,287,2)
(336,269,2)
(78,642,2)
(505,335,2)
(612,648,2)
(666,620,2)
(64,622,2)
(217,296,2)
(491,275,2)
(418,54,2)
(329,178,2)
(177,409,2)
(584,515,2)
(576,723,2)
(646,238,2)
(250,178,2)
(71,61,2)
(310,770,2)
(57,652,2)
(359,559,2)
(101,528,2)
(283,223,2)
(312,770,2)
(676,592,2)
(533,740,2)
(592,238,2)
(725,453,2)
(495,108,2)
(374,54,2)
(602,335,2)
(614,482,2)
(356,620,2)
(612,114,2)
(492,491,2)
(728,770,2)
(614,54,2)
(31,178,2)
(95,716,2)
(156,46,2)
(731,650,2)
(161,335,2)
(537,642,2)
(267,178,2)
(409,145,2)
(584,512,2)
(16,335,2)
(97,54,2)
(520,151,2)
(93,335,2)
(607,652,2)
(273,269,2)
(614,629,2)
(158,47,2)
(496,248,2)
(162,335,2)
(40,335,2)
(506,178,2)
(408,335,2)
(627,178,2)
(324,335,2)
(51,528,2)
(217,323,2)
(13,409,2)
(606,192,2)
(770,712,2)
(756,232,2)
(399,178,2)
(429,630,2)
(626,604,2)
(311,296,2)
(610,335,2)
(469,306,2)
(678,335,2)
(691,335,2)
(502,10,2)
(198,60,2)
(240,592,2)
(634,733,2)
(669,592,2)
(12,289,2)
(221,7,2)
(496,642,2)
(644,555,2)
(123,60,2)
(740,616,2)
(88,399,2)
(447,159,2)
(190,118,2)
(614,256,2)
(153,107,2)
(508,274,2)
(630,492,2)
(175,291,2)
(552,768,2)
(666,348,2)
(305,321,2)
(445,73,2)
(584,84,2)
(674,54,2)
(614,341,2)
(225,178,2)
(73,287,2)
(214,335,2)
(22,54,2)
(199,30,2)
(491,675,2)
(453,50,2)
(54,770,2)
(775,630,2)
(485,46,2)
(567,335,2)
(474,770,2)
(359,269,2)
(587,269,2)
(492,75,2)
(118,770,2)
(512,652,2)
(655,296,2)
(183,375,2)
(614,691,2)
(245,642,2)
(448,502,2)
(46,274,2)
(464,183,2)
(71,623,2)
(629,716,2)
(327,652,2)
(242,268,2)
(367,178,2)
(729,555,2)
(378,291,2)
(275,502,2)
(507,296,2)
(358,192,2)
(474,652,2)
(97,44,2)
(598,178,2)
(28,473,2)
(226,652,2)
(638,652,2)
(63,206,2)
(359,502,2)
(207,37,2)
(605,54,2)
(362,37,2)
(163,163,2)
(95,672,2)
(670,491,2)
(73,44,2)
(226,770,2)
(363,178,2)
(0,520,2)
(646,405,2)
(35,652,2)
(664,54,2)
(275,620,2)
(346,642,2)
(79,178,2)
(550,657,2)
(736,348,2)
(694,669,2)
(371,275,2)
(591,348,2)
(692,335,2)
(405,646,2)
(604,223,2)
(160,80,2)
(19,54,2)
(341,309,2)
(291,101,2)
(316,46,2)
(234,54,2)
(738,178,2)
(453,10,2)
(596,630,2)
(60,409,2)
(614,471,2)
(413,652,2)
(136,770,2)
(695,453,2)
(599,44,2)
(510,557,2)
(355,474,2)
(567,189,2)
(106,37,2)
(379,405,2)
(666,73,2)
(633,405,2)
(96,370,2)
(18,61,2)
(481,699,2)
(748,178,2)
(463,321,2)
(111,463,2)
(368,287,2)
(121,14,2)
(60,60,2)
(80,702,2)
(331,159,2)
(452,716,2)
(180,528,2)
(197,335,2)
(283,166,2)
(769,405,2)
(281,0,2)
(669,669,2)
(122,740,2)
(666,269,2)
(488,30,2)
(165,405,2)
(289,89,2)
(681,716,2)
(159,274,2)
(551,163,2)
(592,669,2)
(317,335,2)
(62,144,2)
(731,405,2)
(711,83,2)
(763,178,2)
(520,220,2)
(104,238,2)
(547,335,2)
(192,146,2)
(342,528,2)
(309,598,2)
(604,12,2)
(136,652,2)
(18,623,2)
(737,178,2)
(561,335,2)
(230,275,2)
(36,642,2)
(81,192,2)
(592,271,2)
(108,64,2)
(42,178,2)
(462,731,2)
(570,192,2)
(518,178,2)
(481,64,2)
(682,652,2)
(52,44,2)
(547,238,2)
(614,262,2)
(166,223,2)
(16,299,2)
(549,223,2)
(109,296,2)
(653,770,2)
(676,680,2)
(712,401,2)
(453,453,2)
(163,11,2)
(468,642,2)
(30,46,2)
(469,54,2)
(670,453,2)
(190,61,2)
(275,651,2)
(227,178,2)
(764,642,2)
(645,178,2)
(643,54,2)
(374,221,2)
(416,193,2)
(263,473,2)
(611,467,2)
(12,37,2)
(766,232,2)
(163,404,2)
(91,467,2)
(195,232,2)
(71,592,2)
(257,274,2)
(167,528,2)
(657,576,2)
(2,620,2)
(743,62,2)
(392,335,2)
(276,192,2)
(272,453,2)
(264,274,2)
(729,54,2)
(614,84,2)
(97,620,2)
(209,642,2)
(555,54,2)
(457,740,2)
(525,473,2)
(614,8,2)
(497,223,2)
(545,314,2)
(151,44,2)
(661,335,2)
(579,632,2)
(63,39,2)
(607,770,2)
(140,269,2)
(482,398,2)
(262,366,2)
(774,274,2)
(614,55,2)
(593,275,2)
(223,716,2)
(256,642,2)
(33,269,2)
(622,193,2)
(666,559,2)
(71,676,2)
(526,274,2)
(296,370,2)
(708,559,2)
(54,652,2)
(171,54,2)
(635,80,2)
(74,44,2)
(275,73,2)
(368,223,2)
(249,54,2)
(318,442,2)
(558,178,2)
(192,652,2)
(473,80,2)
(200,604,2)
(366,335,2)
(412,192,2)
(564,287,2)
(108,495,2)
(360,680,2)
(207,106,2)
(634,474,2)
(409,109,2)
(467,299,2)
(186,474,2)
(274,307,2)
(405,405,2)
(125,50,2)
(103,192,2)
(268,178,2)
(330,335,2)
(139,555,2)
(232,296,2)
(448,54,2)
(615,54,2)
(190,623,2)
(188,0,2)
(681,630,2)
(359,620,2)
(714,335,2)
(117,46,2)
(232,217,2)
(706,321,2)
(279,740,2)
(196,464,2)
-----------------------------------
(0,!alens[i])
(1,sin6_family)
(2,j)
(3,servfail_retry)
(4,j)
(5,9)
(6,)
(7,socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
(8,ns[i].sin6.sin6_scope_id)
(9,alens[next])
(10,int nqueries)
(11,next<nqueries)
(12,answers[next][0] != queries[i][0] ||\n\\n\\t\\t\\t\\tanswers[next][1] != queries[i][1])
(13,z)
(14,line[10])
(15,!isspace(line[10])
(16,ns[nns++].sin6.sin6_family = family = AF_INET6)
(17,case 3:)
(18,bind(fd, (void *)
(19,pfd.events = POLLIN)
(20,case 0:)
(21,if (alens[i])
(22,0)
(23,8)
(24,rlen)
(25,MSG_NOSIGNAL)
(26,i++)
(27,)
(28,i)
(29,next++)
(30,z != p)
(31,sin6)
(32,ns)
(33,next)
(34,rlen)
(35,goto no_resolv_conf;)
(36,htonl(0x7f000001)
(37,answers[next][0] != queries[i][0])
(38,0)
(39,p[9])
(40,nns)
(41,i)
(42,sin6)
(43,t2)
(44,answers[next][3] & 15)
(45,0)
(46,p && isdigit(p[8])
(47,ns[nns].sin6)
(48,&sa)
(49,*alens)
(50,i=0)
(51,&z)
(52,i)
(53,s)
(54,fd < 0 || bind(fd, (void *)
(55,ns[nns++].sin6.sin6_family)
(56,retry_interval)
(57,return -1;)
(58,_buf)
(59,sin6_scope_id)
(60,*z && !isspace(*z)
(61,sl = sizeof sa.sin6)
(62,ns[0].sin)
(63,isdigit(p[9])
(64,attempts = x < 10 ? x : 10)
(65,ns)
(66,)
(67,11)
(68,for (j=0; j<nns && memcmp(ns+j, &sa, sl)
(69,0)
(70,ns[nns].sin.sin_port = htons(53)
(71,memcmp(ns+j, &sa, sl)
(72,iplit.addr)
(73,next == nqueries)
(74,break;)
(75,2 * nqueries)
(76,fd)
(77,p)
(78,sin_port)
(79,s6_addr)
(80,family == AF_INET6)
(81,SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK)
(82,for (i=0; i<nqueries; i++)
(83,j=0)
(84,ns[0].sin.sin_addr.s_addr)
(85,4)
(86,ns[0].sin.sin_family = AF_INET)
(87,fd)
(88,ns[i].sin.sin_addr)
(89,answers[next][1])
(90,0)
(91,errno)
(92,ns[j])
(93,addr)
(94,pthread_setcancelstate(cs, 0)
(95,answers[i])
(96,line)
(97,t0)
(98,htons(53)
(99,i)
(100,retry_interval)
(101,p += 9)
(102,next)
(103,family = AF_INET)
(104,ns[nns])
(105,ns[i].sin6.sin6_scope_id = 0)
(106,queries[i])
(107,ns[i].sin6.sin6_addr.s6_addr)
(108,!attempts)
(109,*z=0)
(110,_f)
(111,ns[i].sin)
(112,sizeof *alens)
(113,)
(114,void *)
(115,sin6)
(116,for (; t2-t0 < timeout; t2=mtime()
(117,x = strtoul(p, &z, 10)
(118,fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
(119,default:)
(120,qlens)
(121,isspace(line[10])
(122,ns)
(123,z++)
(124,servfail_retry)
(125,qlens[i])
(126,7)
(127,case ENOTDIR:)
(128,30000)
(129,line)
(130,i)
(131,fd)
(132,j)
(133,ns)
(134,x)
(135,attempts)
(136,sa.sin)
(137,*z)
(138,f)
(139,t2 - retry_interval)
(140,answers[next][3])
(141,for (s=line+11; isspace(*s)
(142,1000)
(143,sa)
(144,ns[0])
(145,z=s)
(146,fd < 0)
(147,z)
(148,out:)
(149,x)
(150,t2)
(151,alens[i] = rlen)
(152,fd)
(153,memcpy(ns[i].sin6.sin6_addr.s6_addr,\n\\n\\t\\t\\t\\t"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\xff\\xff", 12)
(154,sin6)
(155,x)
(156,z)
(157,sin)
(158,ns[nns].sin6.sin6_addr)
(159,p)
(160,nns)
(161,sin_port)
(162,sin)
(163,next<nqueries && alens[next])
(164,x)
(165,7)
(166,queries[i])
(167,p)
(168,timeout)
(169,line)
(170,sa.sin)
(171,t0)
(172,if (!strncmp(line, "options", 7)
(173,default:)
(174,t1)
(175,x)
(176,if (family == AF_INET6)
(177,*z)
(178,ns[i].sin.sin_family != AF_INET)
(179,ns)
(180,p)
(181,p)
(182,next)
(183,*s)
(184,i)
(185,i)
(186,&sa)
(187,attempts)
(188,nns)
(189,iplit.addr)
(190,sendto(fd, queries[i],\n\\n\\t\\t\\t\\t\\t\\t\\tqlens[i], MSG_NOSIGNAL,\n\\n\\t\\t\\t\\t\\t\\t\\t(void *)
(191,next)
(192,fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT)
(193,x < 10)
(194,)
(195,AF_INET)
(196,s++)
(197,sin6)
(198,z)
(199,30)
(200,i)
(201,next)
(202,1)
(203,answers)
(204,z)
(205,nns)
(206,p)
(207,queries[i][1])
(208,goto out;)
(209,ns[0])
(210,attempts)
(211,fgets(line, sizeof line, f)
(212,ns[nns].sin6)
(213,&pfd)
(214,sin)
(215,line)
(216,1)
(217,__lookup_ipliteral(&iplit, s, AF_UNSPEC)
(218,16)
(219,line)
(220,int *alens)
(221,fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
(222,retry_interval)
(223,i<nqueries)
(224,rlen)
(225,ns)
(226,sa.sin.sin_family = family)
(227,i)
(228,nns)
(229,family)
(230,t1+retry_interval-t2)
(231,sin6_scope_id)
(232,__lookup_ipliteral(&iplit, s, AF_UNSPEC)
(233,EAFNOSUPPORT)
(234,pfd)
(235,AF_INET)
(236,f)
(237,15)
(238,nns=0)
(239,p)
(240,ns)
(241,sin6_addr)
(242,ns[i].sin6.sin6_addr)
(243,ns[i].sin6.sin6_addr)
(244,line)
(245,AF_INET)
(246,0)
(247,sin)
(248,ns[0])
(249,cs)
(250,sin6_addr)
(251,if (!f)
(252,)
(253,t1 = t2 - retry_interval)
(254,0)
(255,ns[nns].sin6)
(256,ns[0].sin.sin_family)
(257,p)
(258,family)
(259,events)
(260,)
(261,sin)
(262,ns[nns].sin.sin_port)
(263,ns)
(264,p = strstr(line, "attempts:")
(265,case ENOENT:)
(266,intptr_t)
(267,&ns[i].sin.sin_addr)
(268,ns[i].sin6)
(269,alens[i])
(270,answers[next])
(271,nns=1)
(272,i++)
(273,3)
(274,!strncmp(line, "options", 7)
(275,t2-t0 < timeout)
(276,family)
(277,ns[i].sin6)
(278,family)
(279,j)
(280,retry_interval-t2)
(281,j)
(282,alens)
(283,queries[i][0])
(284,answers[next])
(285,if (poll(&pfd, 1, t1+retry_interval-t2)
(286,family)
(287,next = 0)
(288,s)
(289,answers[next][1] != queries[i][1])
(290,servfail_retry)
(291,z != p)
(292,next)
(293,iplit)
(294,i)
(295,p)
(296,strncmp(line, "nameserver", 10)
(297,SOCK_DGRAM)
(298,)
(299,family = AF_INET6)
(300,2)
(301,const int *qlens)
(302,pfd)
(303,timeout)
(304,z)
(305,ns[i])
(306,void *)
(307,isspace(line[7])
(308,ns)
(309,ns[i].sin6)
(310,SOCK_CLOEXEC|SOCK_NONBLOCK)
(311,iplit)
(312,sin_family)
(313,)
(314,const unsigned char *const *queries)
(315,z)
(316,p)
(317,ns[nns++])
(318,pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs)
(319,attempts = 2)
(320,iplit)
(321,i=0)
(322,family == AF_INET6 && errno == EAFNOSUPPORT)
(323,&iplit)
(324,AF_INET6)
(325,1)
(326,continue;)
(327,nns)
(328,_buf)
(329,ns[i].sin6.sin6_family = AF_INET6)
(330,ns[nns++].sin6)
(331,p[8])
(332,ns[i])
(333,&_f)
(334,i)
(335,iplit.family == AF_INET)
(336,answers)
(337,9)
(338,z)
(339,__fclose_ca(f)
(340,iplit)
(341,ns[i].sin6.sin6_family)
(342,10)
(343,alens)
(344,attempts)
(345,if (ns[i].sin.sin_family != AF_INET)
(346,ns[0].sin.sin_addr.s_addr = htonl(0x7f000001)
(347,nns)
(348,poll(&pfd, 1, t1+retry_interval-t2)
(349,_buf)
(350,isspace(*z)
(351,SOCK_NONBLOCK)
(352,ns[0].sin)
(353,0)
(354,-1)
(355,fd)
(356,nns)
(357,if (j==nns)
(358,AF_INET)
(359,t2-t0)
(360,j++)
(361,12)
(362,answers)
(363,12)
(364,sl)
(365,0)
(366,ns[nns].sin)
(367,memcpy(ns[i].sin6.sin6_addr.s6_addr+12,\n\\n\\t\\t\\t\\t&ns[i].sin.sin_addr, 4)
(368,answers[next])
(369,0)
(370,strncmp(line, "nameserver", 10)
(371,t2)
(372,next)
(373,ns)
(374,(intptr_t)
(375,s=line+11)
(376,fd)
(377,next)
(378,10)
(379,"nameserver")
(380,nqueries)
(381,retry_interval)
(382,servfail_retry)
(383,iplit)
(384,timeout)
(385,nns++)
(386,sin)
(387,j)
(388,i)
(389,sin_family)
(390,family)
(391,f)
(392,ns)
(393,1)
(394,&ns[nns].sin.sin_addr)
(395,)
(396,sin)
(397,p)
(398,ns[i].sin6)
(399,ns[i].sin)
(400,no_resolv_conf:)
(401,__fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf)
(402,for (z=s; *z && !isspace(*z)
(403,z)
(404,i == next)
(405,nns<3 && fgets(line, sizeof line, f)
(406,t2)
(407,8)
(408,ns[nns++].sin.sin_family = AF_INET)
(409,*z)
(410,p)
(411,attempts)
(412,SOCK_CLOEXEC)
(413,socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
(414,_f)
(415,f)
(416,10)
(417,AF_UNSPEC)
(418,nqueries)
(419,0)
(420,x = strtoul(p, &z, 10)
(421,case EACCES:)
(422,pthread_cleanup_pop(1)
(423,bind(fd, (void *)
(424,ns[nns++].sin.sin_family)
(425,10)
(426,sin_family)
(427,ns[nns++].sin)
(428,sl)
(429,ns[j])
(430,memcpy(answers[i], answers[next], rlen)
(431,nns)
(432,sin_family)
(433,ns)
(434,pfd.fd)
(435,line+11)
(436,addr)
(437,next)
(438,)
(439,ns[i].sin.sin_family)
(440,4)
(441,sl)
(442,&cs)
(443,if (strncmp(line, "nameserver", 10)
(444,3)
(445,t2=mtime()
(446,RET)
(447,isdigit(p[8])
(448,t2)
(449,ns[nns])
(450,fd)
(451,cs)
(452,qlens[i])
(453,i<nqueries)
(454,0)
(455,i)
(456,if (fd < 0 || bind(fd, (void *)
(457,MSG_NOSIGNAL)
(458,servfail_retry--)
(459,if (i==nqueries)
(460,4)
(461,ns)
(462,line[7])
(463,ns[i])
(464,isspace(*s)
(465,sizeof _buf)
(466,nns)
(467,family == AF_INET6)
(468,53)
(469,(void *)
(470,i)
(471,pfd.events)
(472,if (fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT)
(473,i<nns)
(474,fd < 0)
(475,f)
(476,sin_addr)
(477,z)
(478,nns)
(479,ns[nns].sin)
(480,sin6_addr)
(481,timeout / attempts)
(482,ns[i].sin6.sin6_flowinfo)
(483,pfd.fd = fd)
(484,if (servfail_retry && servfail_retry--)
(485,10)
(486,"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\xff\\xff")
(487,POLLIN)
(488,x < 30 ? x*1000 : 30000)
(489,)
(490,0)
(491,t2-t1 >= retry_interval)
(492,servfail_retry = 2 * nqueries)
(493,answers)
(494,53)
(495,attempts = 1)
(496,ns[0].sin)
(497,queries)
(498,s)
(499,ns[i].sin6.sin6_flowinfo = 0)
(500,continue;)
(501,j)
(502,i==nqueries)
(503,if (p && isdigit(p[8])
(504,)
(505,sa.sin6)
(506,ns[i].sin6)
(507,z)
(508,"attempts:")
(509,i)
(510,ns[i].sin6.sin6_addr.s6_addr+12)
(511,void *)
(512,sa.sin.sin_family)
(513,i)
(514,i)
(515,ns[0].sin.sin_port)
(516,alens)
(517,x)
(518,ns)
(519,answers)
(520,alens[i])
(521,sin)
(522,line)
(523,i)
(524,s)
(525,AF_INET)
(526,strstr(line, "attempts:")
(527,s)
(528,p && isdigit(p[9])
(529,2)
(530,SOCK_CLOEXEC)
(531,ns[nns].sin6.sin6_scope_id)
(532,attempts)
(533,fd)
(534,family)
(535,SOCK_CLOEXEC|SOCK_NONBLOCK)
(536,line)
(537,s_addr)
(538,if (!attempts)
(539,mtime()
(540,0)
(541,if (!nns)
(542,nns)
(543,nns)
(544,AF_INET)
(545,queries[i])
(546,j)
(547,ns[nns])
(548,if (z != p)
(549,0)
(550,strtoul(p, &z, 10)
(551,next)
(552,ns[nns++])
(553,x)
(554,p)
(555,t2 = mtime()
(556,htons(53)
(557,ns[i].sin6.sin6_addr.s6_addr)
(558,sin)
(559,j==nns)
(560,0)
(561,sin6_family)
(562,t2)
(563,t1)
(564,answers[next])
(565,if (next == nqueries)
(566,sa)
(567,memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16)
(568,!isspace(*z)
(569,PTHREAD_CANCEL_DISABLE)
(570,0)
(571,if (z != p)
(572,i)
(573,i)
(574,)
(575,continue;)
(576,p = strstr(line, "timeout:")
(577,sl)
(578,sa)
(579,ns[nns].sin6.sin6_scope_id = iplit.scopeid)
(580,j)
(581,1)
(582,x < 30)
(583,1)
(584,return -1;)
(585,for (i=next; i<nqueries && (\n\\n\\t\\t\\t\\tanswers[next][0] != queries[i][0] ||\n\\n\\t\\t\\t\\tanswers[next][1] != queries[i][1] )
(586,ns[nns])
(587,t2)
(588,i)
(589,cs)
(590,"options")
(591,continue;)
(592,j<nns)
(593,pfd)
(594,(void *)
(595,htons(53)
(596,ns)
(597,5000)
(598,ns[i])
(599,continue;)
(600,)
(601,t1)
(602,ns)
(603,&ns[nns].sin6.sin6_addr)
(604,i<nqueries && (\n\\n\\t\\t\\t\\tanswers[next][0] != queries[i][0] ||\n\\n\\t\\t\\t\\tanswers[next][1] != queries[i][1] )
(605,alens)
(606,SOCK_DGRAM)
(607,sa)
(608,next)
(609,if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)
(610,sin6)
(611,errno == EAFNOSUPPORT)
(612,(void *)
(613,sl)
(614,return 0;)
(615,family)
(616,nns = 0)
(617,&z)
(618,iplit.family)
(619,case 2:)
(620,rlen < 4)
(621,retry_interval)
(622,x < 10 ? x : 10)
(623,sl = sizeof sa.sin)
(624,0)
(625,10)
(626,nqueries)
(627,ns[i])
(628,if (i == next)
(629,alens[i])
(630,servfail_retry && servfail_retry--)
(631,nqueries)
(632,iplit.scopeid)
(633,line)
(634,(void *)
(635,i)
(636,sizeof *alens * nqueries)
(637,queries)
(638,1)
(639,if (iplit.family == AF_INET)
(640,memset(alens, 0, sizeof *alens * nqueries)
(641,0)
(642,!nns)
(643,AF_INET6)
(644,t1 = t2)
(645,sin6)
(646,nns<3)
(647,-1)
(648,&ns[j])
(649,pthread_cleanup_push(cleanup, (void *)
(650,strncmp(line, "options", 7)
(651,timeout = 5000)
(652,errno)
(653,SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK)
(654,continue;)
(655,0)
(656,memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4)
(657,p += 8)
(658,sin6_flowinfo)
(659,AF_INET6)
(660,switch (answers[next][3] & 15)
(661,ns[nns].sin6.sin6_port = htons(53)
(662,)
(663,ns[0].sin.sin_port = htons(53)
(664,alens)
(665,i)
(666,mtime()
(667,i)
(668,sa)
(669,j<nns && memcmp(ns+j, &sa, sl)
(670,nqueries)
(671,sin6)
(672,unsigned char *const *answers)
(673,)
(674,0)
(675,t2-t1)
(676,ns+j)
(677,sizeof sa.sin6)
(678,AF_INET)
(679,0)
(680,j=0)
(681,queries[i])
(682,SOCK_NONBLOCK)
(683,strtoul(p, &z, 10)
(684,i)
(685,t2)
(686,next)
(687,sin_addr)
(688,)
(689,pfd)
(690,sizeof sa.sin)
(691,ns[nns].sin6.sin6_port)
(692,53)
(693,AF_INET6)
(694,j)
(695,i)
(696,sizeof line)
(697,0)
(698,t1)
(699,timeout = x < 30 ? x*1000 : 30000)
(700,i)
(701,retry_interval = timeout / attempts)
(702,family = AF_INET)
(703,s)
(704,ns[nns])
(705,timeout)
(706,i++)
(707,answers[next][0])
(708,i)
(709,scopeid)
(710,sin_addr)
(711,j++)
(712,f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf)
(713,queries)
(714,sin6)
(715,nns)
(716,i=next)
(717,)
(718,fd)
(719,nns)
(720,ns)
(721,sl)
(722,if (p && isdigit(p[9])
(723,strstr(line, "timeout:")
(724,x*1000)
(725,alens)
(726,queries)
(727,sl)
(728,nns)
(729,t0 = t2 = mtime()
(730,ns[i])
(731,!strncmp(line, "options", 7)
(732,)
(733,void *)
(734,nqueries)
(735,for (i=0; i<nns; i++)
(736,rlen)
(737,ns)
(738,ns[i])
(739,&ns[j])
(740,j<nns)
(741,sin)
(742,t1)
(743,ns[0].sin.sin_addr)
(744,poll(&pfd, 1, t1+retry_interval-t2)
(745,qlens)
(746,ns[nns].sin.sin_addr)
(747,cleanup)
(748,sin6)
(749,s6_addr)
(750,1)
(751,line)
(752,sin6_port)
(753,if (t2-t1 >= retry_interval)
(754,j)
(755,if (rlen < 4)
(756,iplit)
(757,0x7f000001)
(758,fd)
(759,0)
(760,continue;)
(761,i)
(762,timeout)
(763,continue;)
(764,ns)
(765,fd)
(766,family)
(767,ns)
(768,nns++)
(769,nns)
(770,!f)
(771,0)
(772,nqueries)
(773,t0)
(774,"timeout:")
(775,sendto(fd, queries[i],\n\\n\\t\\t\\t\\t\\t\\tqlens[i], MSG_NOSIGNAL,\n\\n\\t\\t\\t\\t\\t\\t(void *)
(776,"/etc/resolv.conf")
(777,for (nns=0; nns<3 && fgets(line, sizeof line, f)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^