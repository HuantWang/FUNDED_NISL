-----label-----
0
-----code-----
static void goodB2G1()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
69,72
70,71
71,72
73,74
74,75
75,76
75,77
76,77
79,80
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,72,77,78,83,85
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(22,7,0)
(32,10,0)
(35,10,0)
(20,13,0)
(11,34,0)
(25,19,0)
(16,36,0)
(9,7,0)
(28,24,0)
(8,2,0)
(14,2,0)
(4,10,0)
(19,29,0)
(5,6,0)
(29,19,0)
(27,16,0)
(12,6,0)
(6,10,0)
(18,6,0)
(34,26,0)
(18,7,0)
(18,3,0)
(2,7,0)
(34,11,0)
(11,29,0)
(36,16,0)
(7,24,0)
(23,29,0)
(34,7,0)
(0,9,0)
(13,31,0)
(21,18,0)
(9,24,0)
(29,11,0)
(17,11,0)
(11,6,0)
(7,34,0)
(26,34,0)
(36,30,0)
(25,23,1)
(1,6,1)
(5,12,1)
(23,17,1)
(21,33,1)
(20,33,1)
(13,20,1)
(14,7,1)
(33,1,1)
(18,7,1)
(9,0,1)
(19,25,1)
(36,16,1)
(6,5,1)
(11,29,1)
(27,2,1)
(34,11,1)
(33,9,1)
(2,7,1)
(8,14,1)
(34,26,1)
(17,22,1)
(0,36,1)
(0,2,1)
(16,27,1)
(18,6,1)
(15,18,1)
(15,13,1)
(7,34,1)
(18,21,1)
(29,19,1)
(11,6,1)
(22,1,1)
(2,8,1)
(9,7,1)
(34,26,2)
(34,11,2)
(0,1,2)
(13,33,2)
(11,6,2)
(18,33,2)
(23,1,2)
(22,1,2)
(18,6,2)
(20,33,2)
(36,2,2)
(9,7,2)
(36,16,2)
(19,1,2)
(2,7,2)
(29,19,2)
(11,1,2)
(25,1,2)
(9,1,2)
(16,2,2)
(14,1,2)
(21,33,2)
(29,1,2)
(17,1,2)
(7,34,2)
(34,1,2)
(18,7,2)
(2,1,2)
(8,1,2)
(7,1,2)
(11,29,2)
(27,2,2)
-----------------------------------
(0,data)
(1,globalReturnsTrue()
(2,data == NULL)
(3,)
(4,data)
(5,NULL)
(6,data = NULL)
(7,data = (wchar_t *)
(8,NULL)
(9,printWLine(data)
(10,)
(11,realloc(data, 100*sizeof(wchar_t)
(12,data)
(13,printLine("Benign, fixed string")
(14,data)
(15,RET)
(16,-1)
(17,data)
(18,free(data)
(19,sizeof(wchar_t)
(20,"Benign, fixed string")
(21,data)
(22,data)
(23,100)
(24,)
(25,wchar_t)
(26,wchar_t *)
(27,1)
(28,if (data == NULL)
(29,100*sizeof(wchar_t)
(30,)
(31,)
(32,if(globalReturnsTrue()
(33,globalReturnsFalse()
(34,(wchar_t *)
(35,if(globalReturnsFalse()
(36,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^