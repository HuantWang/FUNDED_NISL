-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
        break;
    }
    while(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
26,27
26,28
28,29
28,30
29,30
29,31
30,31
31,32
31,33
33,34
33,35
36,37
36,38
36,39
37,38
37,39
38,39
40,41
40,42
41,42
43,44
45,46
45,47
45,48
45,49
45,50
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
53,54
55,56
55,57
56,57
58,59
58,60
59,60
61,62
62,63
62,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
79,82
80,81
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
100,101
100,102
101,102
-----nextToken-----
2,4,9,11,15,16,18,23,24,25,27,32,34,35,39,42,44,49,52,54,57,60,63,64,68,70,75,77,81,83,85,89,91,95,97,102,103,104
-----computeFrom-----
13,14
13,15
21,22
21,23
37,38
37,39
47,48
47,49
58,59
58,60
66,67
66,68
-----guardedBy-----
44,85
39,60
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }    while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }    while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }
1
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }
data = 20;
data = 20
data
data
20
break;
while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
-----joern-----
(20,26,0)
(37,49,0)
(7,9,0)
(22,37,0)
(41,6,0)
(19,45,0)
(20,6,0)
(11,41,0)
(23,0,0)
(4,49,0)
(10,25,0)
(37,22,0)
(34,3,0)
(6,33,0)
(15,36,0)
(45,26,0)
(17,25,0)
(23,51,0)
(37,13,0)
(36,6,0)
(13,37,0)
(23,49,0)
(27,7,0)
(51,30,0)
(32,6,0)
(38,30,0)
(44,25,0)
(33,48,0)
(29,8,0)
(47,49,0)
(1,13,0)
(6,26,0)
(49,25,0)
(18,37,0)
(39,3,0)
(12,26,0)
(24,20,0)
(7,27,0)
(5,31,0)
(33,22,0)
(28,27,0)
(50,51,0)
(2,45,0)
(37,51,0)
(16,0,0)
(45,6,0)
(35,36,0)
(3,8,0)
(48,33,0)
(22,33,0)
(31,46,0)
(14,51,0)
(41,26,0)
(0,23,0)
(40,23,0)
(33,6,0)
(36,6,1)
(32,23,1)
(21,38,1)
(27,28,1)
(29,31,1)
(29,41,1)
(28,36,1)
(23,51,1)
(14,42,1)
(45,19,1)
(19,2,1)
(22,37,1)
(24,45,1)
(36,15,1)
(5,23,1)
(7,27,1)
(31,5,1)
(41,11,1)
(37,13,1)
(45,6,1)
(43,29,1)
(11,20,1)
(23,0,1)
(35,6,1)
(6,33,1)
(1,18,1)
(33,48,1)
(43,21,1)
(33,22,1)
(42,49,1)
(15,35,1)
(40,21,1)
(50,14,1)
(16,40,1)
(37,51,1)
(23,49,1)
(37,49,1)
(47,4,1)
(49,47,1)
(41,6,1)
(38,51,1)
(21,42,1)
(0,16,1)
(2,7,1)
(20,24,1)
(51,50,1)
(18,32,1)
(13,1,1)
(20,6,1)
(2,36,1)
(20,23,2)
(31,23,2)
(51,42,2)
(35,23,2)
(0,21,2)
(37,13,2)
(6,23,2)
(23,49,2)
(36,6,2)
(40,21,2)
(28,36,2)
(16,21,2)
(29,21,2)
(13,23,2)
(18,23,2)
(24,23,2)
(15,23,2)
(33,48,2)
(6,33,2)
(50,42,2)
(45,6,2)
(22,37,2)
(14,42,2)
(32,23,2)
(20,6,2)
(37,23,2)
(7,36,2)
(41,23,2)
(33,22,2)
(37,49,2)
(23,51,2)
(22,23,2)
(1,23,2)
(38,42,2)
(23,21,2)
(27,36,2)
(45,23,2)
(41,6,2)
(19,23,2)
(11,23,2)
(7,27,2)
(2,23,2)
(5,23,2)
(36,23,2)
(33,23,2)
(37,51,2)
(23,0,2)
-----------------------------------
(0,strlen(HELLO_STRING)
(1,char)
(2,myString)
(3,)
(4,data)
(5,"Input is less than the length of the source string")
(6,myString = (char *)
(7,exit(-1)
(8,)
(9,)
(10,data)
(11,myString)
(12,if (myString == NULL)
(13,sizeof(char)
(14,data)
(15,NULL)
(16,HELLO_STRING)
(17,while(1)
(18,data)
(19,HELLO_STRING)
(20,printLine(myString)
(21,1)
(22,malloc(data*sizeof(char)
(23,data > strlen(HELLO_STRING)
(24,myString)
(25,)
(26,)
(27,-1)
(28,1)
(29,break;)
(30,)
(31,printLine("Input is less than the length of the source string")
(32,myString)
(33,(char *)
(34,myString)
(35,myString)
(36,myString == NULL)
(37,data*sizeof(char)
(38,break;)
(39,if (data > strlen(HELLO_STRING)
(40,data)
(41,free(myString)
(42,1)
(43,RET)
(44,while(1)
(45,strcpy(myString, HELLO_STRING)
(46,)
(47,0)
(48,char *)
(49,data = 0)
(50,20)
(51,data = 20)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^