-----label-----
0
-----code-----
static void goodB2G2()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* FIX: Deallocate memory */
        free(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
74,75
74,76
76,77
76,78
76,79
76,80
76,81
76,82
77,78
79,80
80,81
80,82
81,82
83,84
87,88
88,89
88,90
89,90
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,66,67,71,72,73,75,78,82,84,85,86,90,91,92
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G2(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* FIX: Deallocate memory */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodB2G2()
goodB2G2
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* FIX: Deallocate memory */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* FIX: Deallocate memory */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* FIX: Deallocate memory */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(42,14,0)
(15,29,0)
(37,8,0)
(5,30,0)
(1,3,0)
(22,25,0)
(11,29,0)
(40,22,0)
(33,3,0)
(45,16,0)
(18,29,0)
(38,26,0)
(31,14,0)
(32,44,0)
(30,44,0)
(9,25,0)
(2,25,0)
(18,44,0)
(34,35,0)
(22,44,0)
(30,5,0)
(17,35,0)
(0,29,0)
(7,37,0)
(4,25,0)
(44,29,0)
(19,29,0)
(24,25,0)
(8,21,0)
(13,25,0)
(6,16,0)
(14,44,0)
(47,29,0)
(22,26,0)
(10,35,0)
(28,29,0)
(33,30,0)
(26,35,0)
(44,30,0)
(8,37,0)
(39,33,0)
(16,44,0)
(16,29,0)
(46,18,0)
(3,33,0)
(30,33,0)
(12,24,0)
(23,28,0)
(27,26,0)
(43,15,1)
(32,41,1)
(31,42,1)
(15,28,1)
(45,14,1)
(0,18,1)
(30,5,1)
(44,30,1)
(16,6,1)
(26,27,1)
(46,16,1)
(14,44,1)
(22,44,1)
(18,44,1)
(6,45,1)
(37,7,1)
(41,26,1)
(23,41,1)
(30,33,1)
(22,26,1)
(24,12,1)
(2,24,1)
(18,46,1)
(36,2,1)
(33,3,1)
(36,4,1)
(16,44,1)
(12,43,1)
(45,8,1)
(14,31,1)
(28,23,1)
(39,32,1)
(43,0,1)
(7,14,1)
(27,38,1)
(42,44,1)
(8,37,1)
(4,22,1)
(3,1,1)
(1,39,1)
(40,43,1)
(22,40,1)
(40,43,2)
(33,3,2)
(2,43,2)
(16,44,2)
(18,41,2)
(28,41,2)
(45,41,2)
(12,43,2)
(22,43,2)
(16,41,2)
(31,41,2)
(8,14,2)
(37,14,2)
(24,43,2)
(7,14,2)
(15,41,2)
(39,41,2)
(33,41,2)
(44,41,2)
(32,41,2)
(22,26,2)
(3,41,2)
(1,41,2)
(14,44,2)
(46,41,2)
(0,41,2)
(30,41,2)
(30,5,2)
(4,43,2)
(8,37,2)
(30,33,2)
(44,30,2)
(22,44,2)
(18,44,2)
(14,41,2)
(6,41,2)
(42,41,2)
(23,41,2)
-----------------------------------
(0,break;)
(1,char)
(2,break;)
(3,sizeof(char)
(4,break;)
(5,char *)
(6,"A String")
(7,1)
(8,exit(-1)
(9,case 7:)
(10,data)
(11,if (data == NULL)
(12,"Benign, fixed string")
(13,default:)
(14,data == NULL)
(15,break;)
(16,strcpy(data, "A String")
(17,switch(7)
(18,printLine(data)
(19,case 6:)
(20, sizeof(char)
(21,)
(22,free(data)
(23,"Benign, fixed string")
(24,printLine("Benign, fixed string")
(25,)
(26,data = NULL)
(27,NULL)
(28,printLine("Benign, fixed string")
(29,)
(30,(char *)
(31,NULL)
(32,data)
(33,calloc(100, sizeof(char)
(34,switch(6)
(35,)
(36,RET)
(37,-1)
(38,data)
(39,100)
(40,data)
(41,6)
(42,data)
(43,7)
(44,data = (char *)
(45,data)
(46,data)
(47,default:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^