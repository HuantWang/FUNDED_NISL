-----label-----
0
-----code-----
int mca_btl_sm_component_open(void)
{
    /* register SM component parameters */
    mca_btl_sm_component.sm_free_list_num =
        mca_btl_sm_param_register_int("free_list_num", 8);
    mca_btl_sm_component.sm_free_list_max =
        mca_btl_sm_param_register_int("free_list_max", -1);
    mca_btl_sm_component.sm_free_list_inc =
        mca_btl_sm_param_register_int("free_list_inc", 256);
    mca_btl_sm_component.sm_exclusivity =
        mca_btl_sm_param_register_int("exclusivity", MCA_BTL_EXCLUSIVITY_HIGH-1);
    mca_btl_sm_component.sm_latency =
        mca_btl_sm_param_register_int("latency", 100);
    mca_btl_sm_component.sm_max_procs =
        mca_btl_sm_param_register_int("max_procs", -1);
    mca_btl_sm_component.sm_extra_procs =
        mca_btl_sm_param_register_int("sm_extra_procs", -1);
    mca_btl_sm_component.sm_mpool_name =
        mca_btl_sm_param_register_string("mpool", "sm");
    mca_btl_sm_component.eager_limit =
        mca_btl_sm_param_register_int("eager_limit", 4*1024);
    mca_btl_sm_component.max_frag_size =
        mca_btl_sm_param_register_int("max_frag_size", 32*1024);
    mca_btl_sm_component.size_of_cb_queue =
        mca_btl_sm_param_register_int("size_of_cb_queue", 128);
    mca_btl_sm_component.cb_lazy_free_freq =
        mca_btl_sm_param_register_int("cb_lazy_free_freq", 120);
    /* make sure that queue size and lazy free frequency are consistent -
     * want to make sure that slots are freed at a rate they can be
     * reused, w/o allocating extra new circular buffer fifo arrays */
    if( (float)(mca_btl_sm_component.cb_lazy_free_freq) >=
            0.95*(float)(mca_btl_sm_component.size_of_cb_queue) ) {
        /* upper limit */
        mca_btl_sm_component.cb_lazy_free_freq=
            (int)(0.95*(float)(mca_btl_sm_component.size_of_cb_queue));
        /* lower limit */
        if( 0>= mca_btl_sm_component.cb_lazy_free_freq ) {
            mca_btl_sm_component.cb_lazy_free_freq=1;
        }
    }

    /* default number of extra procs to allow for future growth */
    mca_btl_sm_component.sm_extra_procs =
        mca_btl_sm_param_register_int("sm_extra_procs", 2);

    /* initialize objects */
    OBJ_CONSTRUCT(&mca_btl_sm_component.sm_lock, opal_mutex_t);
    OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags1, ompi_free_list_t);
    OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags2, ompi_free_list_t);
    return OMPI_SUCCESS;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
10,11
11,12
11,13
12,13
12,14
13,14
16,17
16,18
16,19
17,18
21,22
22,23
22,24
23,24
23,25
24,25
27,28
27,29
27,30
28,29
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
39,42
40,41
44,45
45,46
45,47
46,47
46,48
47,48
50,51
50,52
50,53
51,52
54,55
54,56
55,56
58,59
59,60
59,61
60,61
60,62
61,62
64,65
64,66
64,67
65,66
69,70
70,71
70,72
71,72
71,73
72,73
75,76
75,77
75,78
76,77
79,80
81,82
82,83
82,84
83,84
83,85
84,85
87,88
87,89
87,90
88,89
91,92
93,94
94,95
94,96
95,96
95,97
96,97
99,100
99,101
99,102
100,101
104,105
105,106
105,107
106,107
106,108
107,108
110,111
110,112
110,113
111,112
114,115
114,116
117,118
118,119
118,120
119,120
119,121
120,121
123,124
123,125
123,126
124,125
127,128
127,129
130,131
131,132
131,133
132,133
132,134
133,134
136,137
136,138
136,139
137,138
141,142
142,143
142,144
143,144
143,145
144,145
147,148
147,149
147,150
148,149
152,153
152,154
153,154
153,155
154,155
154,156
155,156
155,157
158,159
159,160
159,161
160,161
163,164
163,165
165,166
165,167
166,167
166,168
169,170
170,171
170,172
171,172
174,175
174,176
175,176
176,177
176,178
177,178
177,179
178,179
181,182
181,183
182,183
182,184
185,186
186,187
186,188
188,189
188,190
189,190
189,191
192,193
193,194
193,195
194,195
197,198
197,199
198,199
198,200
200,201
200,202
201,202
204,205
205,206
206,207
206,208
207,208
207,209
208,209
212,213
213,214
213,215
214,215
214,216
215,216
218,219
218,220
218,221
219,220
223,224
224,225
224,226
224,227
225,226
227,228
228,229
228,230
229,230
232,233
234,235
235,236
235,237
235,238
236,237
238,239
239,240
239,241
240,241
243,244
245,246
246,247
246,248
246,249
247,248
249,250
250,251
250,252
251,252
254,255
256,257
257,258
-----nextToken-----
2,4,6,8,14,15,18,19,20,25,26,29,30,32,37,38,41,42,43,48,49,52,53,56,57,62,63,66,67,68,73,74,77,78,80,85,86,89,90,92,97,98,101,102,103,108,109,112,113,115,116,121,122,125,126,128,129,134,135,138,139,140,145,146,149,150,151,156,157,161,162,164,167,168,172,173,179,180,183,184,187,190,191,195,196,199,202,203,209,210,211,216,217,220,221,222,226,230,231,233,237,241,242,244,248,252,253,255,258
-----computeFrom-----
11,12
11,13
22,23
22,24
34,35
34,36
45,46
45,47
54,55
54,56
59,60
59,61
70,71
70,72
82,83
82,84
94,95
94,96
105,106
105,107
114,115
114,116
118,119
118,120
127,128
127,129
131,132
131,133
142,143
142,144
153,154
153,155
163,164
163,165
176,177
176,178
186,187
186,188
198,199
198,200
206,207
206,208
213,214
213,215
-----guardedBy-----
162,210
173,196
172,209
203,210
202,209
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int mca_btl_sm_component_open(void){    /* register SM component parameters */    mca_btl_sm_component.sm_free_list_num =        mca_btl_sm_param_register_int("free_list_num", 8);    mca_btl_sm_component.sm_free_list_max =        mca_btl_sm_param_register_int("free_list_max", -1);    mca_btl_sm_component.sm_free_list_inc =        mca_btl_sm_param_register_int("free_list_inc", 256);    mca_btl_sm_component.sm_exclusivity =        mca_btl_sm_param_register_int("exclusivity", MCA_BTL_EXCLUSIVITY_HIGH-1);    mca_btl_sm_component.sm_latency =        mca_btl_sm_param_register_int("latency", 100);    mca_btl_sm_component.sm_max_procs =        mca_btl_sm_param_register_int("max_procs", -1);    mca_btl_sm_component.sm_extra_procs =        mca_btl_sm_param_register_int("sm_extra_procs", -1);    mca_btl_sm_component.sm_mpool_name =        mca_btl_sm_param_register_string("mpool", "sm");    mca_btl_sm_component.eager_limit =        mca_btl_sm_param_register_int("eager_limit", 4*1024);    mca_btl_sm_component.max_frag_size =        mca_btl_sm_param_register_int("max_frag_size", 32*1024);    mca_btl_sm_component.size_of_cb_queue =        mca_btl_sm_param_register_int("size_of_cb_queue", 128);    mca_btl_sm_component.cb_lazy_free_freq =        mca_btl_sm_param_register_int("cb_lazy_free_freq", 120);    /* make sure that queue size and lazy free frequency are consistent -     * want to make sure that slots are freed at a rate they can be     * reused, w/o allocating extra new circular buffer fifo arrays */    if( (float)(mca_btl_sm_component.cb_lazy_free_freq) >=            0.95*(float)(mca_btl_sm_component.size_of_cb_queue) ) {        /* upper limit */        mca_btl_sm_component.cb_lazy_free_freq=            (int)(0.95*(float)(mca_btl_sm_component.size_of_cb_queue));        /* lower limit */        if( 0>= mca_btl_sm_component.cb_lazy_free_freq ) {            mca_btl_sm_component.cb_lazy_free_freq=1;        }    }    /* default number of extra procs to allow for future growth */    mca_btl_sm_component.sm_extra_procs =        mca_btl_sm_param_register_int("sm_extra_procs", 2);    /* initialize objects */    OBJ_CONSTRUCT(&mca_btl_sm_component.sm_lock, opal_mutex_t);    OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags1, ompi_free_list_t);    OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags2, ompi_free_list_t);    return OMPI_SUCCESS;}
int
mca_btl_sm_component_open(void)
mca_btl_sm_component_open
void
void


{    /* register SM component parameters */    mca_btl_sm_component.sm_free_list_num =        mca_btl_sm_param_register_int("free_list_num", 8);    mca_btl_sm_component.sm_free_list_max =        mca_btl_sm_param_register_int("free_list_max", -1);    mca_btl_sm_component.sm_free_list_inc =        mca_btl_sm_param_register_int("free_list_inc", 256);    mca_btl_sm_component.sm_exclusivity =        mca_btl_sm_param_register_int("exclusivity", MCA_BTL_EXCLUSIVITY_HIGH-1);    mca_btl_sm_component.sm_latency =        mca_btl_sm_param_register_int("latency", 100);    mca_btl_sm_component.sm_max_procs =        mca_btl_sm_param_register_int("max_procs", -1);    mca_btl_sm_component.sm_extra_procs =        mca_btl_sm_param_register_int("sm_extra_procs", -1);    mca_btl_sm_component.sm_mpool_name =        mca_btl_sm_param_register_string("mpool", "sm");    mca_btl_sm_component.eager_limit =        mca_btl_sm_param_register_int("eager_limit", 4*1024);    mca_btl_sm_component.max_frag_size =        mca_btl_sm_param_register_int("max_frag_size", 32*1024);    mca_btl_sm_component.size_of_cb_queue =        mca_btl_sm_param_register_int("size_of_cb_queue", 128);    mca_btl_sm_component.cb_lazy_free_freq =        mca_btl_sm_param_register_int("cb_lazy_free_freq", 120);    /* make sure that queue size and lazy free frequency are consistent -     * want to make sure that slots are freed at a rate they can be     * reused, w/o allocating extra new circular buffer fifo arrays */    if( (float)(mca_btl_sm_component.cb_lazy_free_freq) >=            0.95*(float)(mca_btl_sm_component.size_of_cb_queue) ) {        /* upper limit */        mca_btl_sm_component.cb_lazy_free_freq=            (int)(0.95*(float)(mca_btl_sm_component.size_of_cb_queue));        /* lower limit */        if( 0>= mca_btl_sm_component.cb_lazy_free_freq ) {            mca_btl_sm_component.cb_lazy_free_freq=1;        }    }    /* default number of extra procs to allow for future growth */    mca_btl_sm_component.sm_extra_procs =        mca_btl_sm_param_register_int("sm_extra_procs", 2);    /* initialize objects */    OBJ_CONSTRUCT(&mca_btl_sm_component.sm_lock, opal_mutex_t);    OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags1, ompi_free_list_t);    OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags2, ompi_free_list_t);    return OMPI_SUCCESS;}
mca_btl_sm_component.sm_free_list_num =        mca_btl_sm_param_register_int("free_list_num", 8);
mca_btl_sm_component.sm_free_list_num =        mca_btl_sm_param_register_int("free_list_num", 8)
mca_btl_sm_component.sm_free_list_num
mca_btl_sm_component
mca_btl_sm_component
sm_free_list_num
mca_btl_sm_param_register_int("free_list_num", 8)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"free_list_num"
8
mca_btl_sm_component.sm_free_list_max =        mca_btl_sm_param_register_int("free_list_max", -1);
mca_btl_sm_component.sm_free_list_max =        mca_btl_sm_param_register_int("free_list_max", -1)
mca_btl_sm_component.sm_free_list_max
mca_btl_sm_component
mca_btl_sm_component
sm_free_list_max
mca_btl_sm_param_register_int("free_list_max", -1)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"free_list_max"
-1
1
mca_btl_sm_component.sm_free_list_inc =        mca_btl_sm_param_register_int("free_list_inc", 256);
mca_btl_sm_component.sm_free_list_inc =        mca_btl_sm_param_register_int("free_list_inc", 256)
mca_btl_sm_component.sm_free_list_inc
mca_btl_sm_component
mca_btl_sm_component
sm_free_list_inc
mca_btl_sm_param_register_int("free_list_inc", 256)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"free_list_inc"
256
mca_btl_sm_component.sm_exclusivity =        mca_btl_sm_param_register_int("exclusivity", MCA_BTL_EXCLUSIVITY_HIGH-1);
mca_btl_sm_component.sm_exclusivity =        mca_btl_sm_param_register_int("exclusivity", MCA_BTL_EXCLUSIVITY_HIGH-1)
mca_btl_sm_component.sm_exclusivity
mca_btl_sm_component
mca_btl_sm_component
sm_exclusivity
mca_btl_sm_param_register_int("exclusivity", MCA_BTL_EXCLUSIVITY_HIGH-1)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"exclusivity"
MCA_BTL_EXCLUSIVITY_HIGH-1
MCA_BTL_EXCLUSIVITY_HIGH
MCA_BTL_EXCLUSIVITY_HIGH
1
mca_btl_sm_component.sm_latency =        mca_btl_sm_param_register_int("latency", 100);
mca_btl_sm_component.sm_latency =        mca_btl_sm_param_register_int("latency", 100)
mca_btl_sm_component.sm_latency
mca_btl_sm_component
mca_btl_sm_component
sm_latency
mca_btl_sm_param_register_int("latency", 100)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"latency"
100
mca_btl_sm_component.sm_max_procs =        mca_btl_sm_param_register_int("max_procs", -1);
mca_btl_sm_component.sm_max_procs =        mca_btl_sm_param_register_int("max_procs", -1)
mca_btl_sm_component.sm_max_procs
mca_btl_sm_component
mca_btl_sm_component
sm_max_procs
mca_btl_sm_param_register_int("max_procs", -1)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"max_procs"
-1
1
mca_btl_sm_component.sm_extra_procs =        mca_btl_sm_param_register_int("sm_extra_procs", -1);
mca_btl_sm_component.sm_extra_procs =        mca_btl_sm_param_register_int("sm_extra_procs", -1)
mca_btl_sm_component.sm_extra_procs
mca_btl_sm_component
mca_btl_sm_component
sm_extra_procs
mca_btl_sm_param_register_int("sm_extra_procs", -1)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"sm_extra_procs"
-1
1
mca_btl_sm_component.sm_mpool_name =        mca_btl_sm_param_register_string("mpool", "sm");
mca_btl_sm_component.sm_mpool_name =        mca_btl_sm_param_register_string("mpool", "sm")
mca_btl_sm_component.sm_mpool_name
mca_btl_sm_component
mca_btl_sm_component
sm_mpool_name
mca_btl_sm_param_register_string("mpool", "sm")
mca_btl_sm_param_register_string
mca_btl_sm_param_register_string
"mpool"
"sm"
mca_btl_sm_component.eager_limit =        mca_btl_sm_param_register_int("eager_limit", 4*1024);
mca_btl_sm_component.eager_limit =        mca_btl_sm_param_register_int("eager_limit", 4*1024)
mca_btl_sm_component.eager_limit
mca_btl_sm_component
mca_btl_sm_component
eager_limit
mca_btl_sm_param_register_int("eager_limit", 4*1024)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"eager_limit"
4*1024
4
1024
mca_btl_sm_component.max_frag_size =        mca_btl_sm_param_register_int("max_frag_size", 32*1024);
mca_btl_sm_component.max_frag_size =        mca_btl_sm_param_register_int("max_frag_size", 32*1024)
mca_btl_sm_component.max_frag_size
mca_btl_sm_component
mca_btl_sm_component
max_frag_size
mca_btl_sm_param_register_int("max_frag_size", 32*1024)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"max_frag_size"
32*1024
32
1024
mca_btl_sm_component.size_of_cb_queue =        mca_btl_sm_param_register_int("size_of_cb_queue", 128);
mca_btl_sm_component.size_of_cb_queue =        mca_btl_sm_param_register_int("size_of_cb_queue", 128)
mca_btl_sm_component.size_of_cb_queue
mca_btl_sm_component
mca_btl_sm_component
size_of_cb_queue
mca_btl_sm_param_register_int("size_of_cb_queue", 128)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"size_of_cb_queue"
128
mca_btl_sm_component.cb_lazy_free_freq =        mca_btl_sm_param_register_int("cb_lazy_free_freq", 120);
mca_btl_sm_component.cb_lazy_free_freq =        mca_btl_sm_param_register_int("cb_lazy_free_freq", 120)
mca_btl_sm_component.cb_lazy_free_freq
mca_btl_sm_component
mca_btl_sm_component
cb_lazy_free_freq
mca_btl_sm_param_register_int("cb_lazy_free_freq", 120)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"cb_lazy_free_freq"
120
if( (float)(mca_btl_sm_component.cb_lazy_free_freq) >=            0.95*(float)(mca_btl_sm_component.size_of_cb_queue) ) {        /* upper limit */        mca_btl_sm_component.cb_lazy_free_freq=            (int)(0.95*(float)(mca_btl_sm_component.size_of_cb_queue));        /* lower limit */        if( 0>= mca_btl_sm_component.cb_lazy_free_freq ) {            mca_btl_sm_component.cb_lazy_free_freq=1;        }    }
(float)(mca_btl_sm_component.cb_lazy_free_freq) >=            0.95*(float)(mca_btl_sm_component.size_of_cb_queue)
(float)(mca_btl_sm_component.cb_lazy_free_freq)
float
float

(mca_btl_sm_component.cb_lazy_free_freq)
mca_btl_sm_component.cb_lazy_free_freq
mca_btl_sm_component
mca_btl_sm_component
cb_lazy_free_freq
0.95*(float)(mca_btl_sm_component.size_of_cb_queue)
0.95
(float)(mca_btl_sm_component.size_of_cb_queue)
float
float

(mca_btl_sm_component.size_of_cb_queue)
mca_btl_sm_component.size_of_cb_queue
mca_btl_sm_component
mca_btl_sm_component
size_of_cb_queue
{        /* upper limit */        mca_btl_sm_component.cb_lazy_free_freq=            (int)(0.95*(float)(mca_btl_sm_component.size_of_cb_queue));        /* lower limit */        if( 0>= mca_btl_sm_component.cb_lazy_free_freq ) {            mca_btl_sm_component.cb_lazy_free_freq=1;        }    }
mca_btl_sm_component.cb_lazy_free_freq=            (int)(0.95*(float)(mca_btl_sm_component.size_of_cb_queue));
mca_btl_sm_component.cb_lazy_free_freq=            (int)(0.95*(float)(mca_btl_sm_component.size_of_cb_queue))
mca_btl_sm_component.cb_lazy_free_freq
mca_btl_sm_component
mca_btl_sm_component
cb_lazy_free_freq
(int)(0.95*(float)(mca_btl_sm_component.size_of_cb_queue))
int
int

(0.95*(float)(mca_btl_sm_component.size_of_cb_queue))
0.95*(float)(mca_btl_sm_component.size_of_cb_queue)
0.95
(float)(mca_btl_sm_component.size_of_cb_queue)
float
float

(mca_btl_sm_component.size_of_cb_queue)
mca_btl_sm_component.size_of_cb_queue
mca_btl_sm_component
mca_btl_sm_component
size_of_cb_queue
if( 0>= mca_btl_sm_component.cb_lazy_free_freq ) {            mca_btl_sm_component.cb_lazy_free_freq=1;        }
0>= mca_btl_sm_component.cb_lazy_free_freq
0
mca_btl_sm_component.cb_lazy_free_freq
mca_btl_sm_component
mca_btl_sm_component
cb_lazy_free_freq
{            mca_btl_sm_component.cb_lazy_free_freq=1;        }
mca_btl_sm_component.cb_lazy_free_freq=1;
mca_btl_sm_component.cb_lazy_free_freq=1
mca_btl_sm_component.cb_lazy_free_freq
mca_btl_sm_component
mca_btl_sm_component
cb_lazy_free_freq
1
mca_btl_sm_component.sm_extra_procs =        mca_btl_sm_param_register_int("sm_extra_procs", 2);
mca_btl_sm_component.sm_extra_procs =        mca_btl_sm_param_register_int("sm_extra_procs", 2)
mca_btl_sm_component.sm_extra_procs
mca_btl_sm_component
mca_btl_sm_component
sm_extra_procs
mca_btl_sm_param_register_int("sm_extra_procs", 2)
mca_btl_sm_param_register_int
mca_btl_sm_param_register_int
"sm_extra_procs"
2
OBJ_CONSTRUCT(&mca_btl_sm_component.sm_lock, opal_mutex_t);
OBJ_CONSTRUCT(&mca_btl_sm_component.sm_lock, opal_mutex_t)
OBJ_CONSTRUCT
OBJ_CONSTRUCT
&mca_btl_sm_component.sm_lock
mca_btl_sm_component.sm_lock
mca_btl_sm_component
mca_btl_sm_component
sm_lock
opal_mutex_t
opal_mutex_t
OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags1, ompi_free_list_t);
OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags1, ompi_free_list_t)
OBJ_CONSTRUCT
OBJ_CONSTRUCT
&mca_btl_sm_component.sm_frags1
mca_btl_sm_component.sm_frags1
mca_btl_sm_component
mca_btl_sm_component
sm_frags1
ompi_free_list_t
ompi_free_list_t
OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags2, ompi_free_list_t);
OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags2, ompi_free_list_t)
OBJ_CONSTRUCT
OBJ_CONSTRUCT
&mca_btl_sm_component.sm_frags2
mca_btl_sm_component.sm_frags2
mca_btl_sm_component
mca_btl_sm_component
sm_frags2
ompi_free_list_t
ompi_free_list_t
return OMPI_SUCCESS;
OMPI_SUCCESS
OMPI_SUCCESS
-----joern-----
(126,23,0)
(135,159,0)
(70,16,0)
(121,36,0)
(124,26,0)
(42,39,0)
(28,59,0)
(2,49,0)
(123,119,0)
(106,75,0)
(128,107,0)
(157,153,0)
(29,85,0)
(145,131,0)
(52,7,0)
(27,138,0)
(54,84,0)
(126,133,0)
(104,81,0)
(67,107,0)
(101,126,0)
(4,119,0)
(92,48,0)
(126,69,0)
(29,22,0)
(95,116,0)
(153,157,0)
(4,22,0)
(24,86,0)
(74,97,0)
(61,60,0)
(11,22,0)
(140,95,0)
(126,143,0)
(146,116,0)
(45,44,0)
(143,139,0)
(3,80,0)
(103,22,0)
(14,23,0)
(160,126,0)
(105,103,0)
(158,93,0)
(10,105,0)
(114,95,0)
(126,17,0)
(91,59,0)
(75,16,0)
(25,92,0)
(13,143,0)
(6,135,0)
(91,22,0)
(130,7,0)
(35,133,0)
(94,108,0)
(26,91,0)
(119,4,0)
(81,73,0)
(103,144,0)
(41,102,0)
(88,93,0)
(72,76,0)
(55,83,0)
(19,91,0)
(0,11,0)
(126,60,0)
(59,91,0)
(63,17,0)
(62,22,0)
(77,87,0)
(50,157,0)
(60,4,0)
(31,148,0)
(99,29,0)
(73,22,0)
(122,86,0)
(16,75,0)
(69,15,0)
(26,139,0)
(137,87,0)
(78,116,0)
(109,43,0)
(51,90,0)
(152,17,0)
(85,97,0)
(102,41,0)
(26,154,0)
(37,26,0)
(1,19,0)
(125,154,0)
(68,0,0)
(134,69,0)
(112,67,0)
(8,51,0)
(151,132,0)
(107,128,0)
(144,40,0)
(95,114,0)
(44,3,0)
(89,153,0)
(5,119,0)
(127,67,0)
(155,40,0)
(153,83,0)
(40,144,0)
(147,31,0)
(84,41,0)
(110,22,0)
(53,133,0)
(47,143,0)
(32,131,0)
(30,102,0)
(111,0,0)
(79,111,0)
(80,131,0)
(126,147,0)
(87,114,0)
(62,75,0)
(126,87,0)
(114,22,0)
(71,92,0)
(15,138,0)
(157,50,0)
(33,22,0)
(139,18,0)
(97,85,0)
(139,83,0)
(43,11,0)
(48,132,0)
(90,22,0)
(39,22,0)
(86,90,0)
(156,128,0)
(75,62,0)
(98,105,0)
(128,22,0)
(141,147,0)
(41,84,0)
(116,95,0)
(113,76,0)
(148,66,0)
(150,43,0)
(138,15,0)
(44,94,0)
(21,51,0)
(94,49,0)
(96,148,0)
(49,94,0)
(34,69,0)
(154,26,0)
(36,110,0)
(73,81,0)
(83,55,0)
(48,22,0)
(39,113,0)
(0,111,0)
(126,7,0)
(126,105,0)
(57,97,0)
(132,48,0)
(83,153,0)
(3,44,0)
(131,80,0)
(56,144,0)
(38,81,0)
(136,60,0)
(80,58,0)
(11,0,0)
(17,62,0)
(65,54,0)
(94,44,0)
(85,29,0)
(90,51,0)
(148,31,0)
(83,139,0)
(126,43,0)
(110,36,0)
(126,22,0)
(82,19,0)
(64,132,0)
(161,23,0)
(84,22,0)
(117,54,0)
(100,66,0)
(157,93,0)
(120,49,0)
(15,22,0)
(76,113,0)
(80,3,0)
(126,19,0)
(23,135,0)
(126,54,0)
(9,111,0)
(149,147,0)
(7,73,0)
(126,86,0)
(133,110,0)
(129,76,0)
(66,148,0)
(108,94,0)
(107,67,0)
(113,39,0)
(131,91,0)
(93,157,0)
(118,18,0)
(144,103,0)
(46,66,0)
(31,22,0)
(49,15,0)
(20,36,0)
(12,138,0)
(115,41,0)
(142,59,0)
(93,15,0)
(126,92,0)
(58,80,0)
(83,153,1)
(129,29,1)
(126,105,1)
(77,137,1)
(21,8,1)
(54,65,1)
(148,66,1)
(110,36,1)
(60,136,1)
(103,144,1)
(24,135,1)
(12,69,1)
(95,116,1)
(120,2,1)
(4,119,1)
(126,69,1)
(117,110,1)
(150,109,1)
(130,62,1)
(3,80,1)
(114,95,1)
(30,115,1)
(93,158,1)
(126,7,1)
(68,43,1)
(119,5,1)
(78,140,1)
(61,103,1)
(116,146,1)
(100,46,1)
(155,56,1)
(80,131,1)
(13,47,1)
(146,78,1)
(126,87,1)
(161,14,1)
(134,34,1)
(74,57,1)
(5,123,1)
(26,139,1)
(10,84,1)
(73,81,1)
(31,148,1)
(40,155,1)
(46,96,1)
(97,74,1)
(48,132,1)
(82,1,1)
(128,107,1)
(115,54,1)
(69,134,1)
(126,54,1)
(34,114,1)
(64,92,1)
(86,122,1)
(37,125,1)
(59,142,1)
(11,0,1)
(35,11,1)
(133,53,1)
(132,151,1)
(92,71,1)
(127,39,1)
(51,21,1)
(41,102,1)
(135,6,1)
(26,91,1)
(131,32,1)
(84,41,1)
(49,120,1)
(126,143,1)
(57,90,1)
(94,49,1)
(7,52,1)
(137,31,1)
(123,60,1)
(147,149,1)
(6,23,1)
(20,121,1)
(29,85,1)
(70,106,1)
(96,147,1)
(62,75,1)
(126,23,1)
(66,100,1)
(15,138,1)
(32,145,1)
(28,19,1)
(126,160,1)
(126,92,1)
(94,108,1)
(65,117,1)
(16,70,1)
(152,48,1)
(44,94,1)
(19,82,1)
(39,113,1)
(43,150,1)
(23,161,1)
(26,124,1)
(90,51,1)
(14,154,1)
(47,3,1)
(53,35,1)
(79,68,1)
(112,127,1)
(89,143,1)
(93,15,1)
(126,19,1)
(157,50,1)
(52,130,1)
(29,99,1)
(56,105,1)
(157,93,1)
(140,87,1)
(80,58,1)
(106,17,1)
(2,45,1)
(121,133,1)
(76,72,1)
(42,113,1)
(36,20,1)
(160,128,1)
(154,26,1)
(102,30,1)
(83,55,1)
(111,9,1)
(149,141,1)
(126,17,1)
(158,88,1)
(141,4,1)
(3,44,1)
(45,80,1)
(72,129,1)
(126,147,1)
(122,24,1)
(131,91,1)
(107,67,1)
(8,86,1)
(87,77,1)
(126,86,1)
(138,27,1)
(136,61,1)
(1,15,1)
(17,63,1)
(9,79,1)
(151,64,1)
(153,157,1)
(145,91,1)
(144,40,1)
(126,43,1)
(49,15,1)
(101,126,1)
(75,16,1)
(39,42,1)
(67,112,1)
(126,133,1)
(71,25,1)
(142,28,1)
(126,60,1)
(109,73,1)
(27,12,1)
(88,89,1)
(143,13,1)
(63,152,1)
(38,104,1)
(125,139,1)
(124,37,1)
(81,38,1)
(113,76,1)
(24,154,1)
(105,98,1)
(156,107,1)
(98,10,1)
(139,83,1)
(85,97,1)
(104,7,1)
(128,156,1)
(91,59,1)
(0,111,1)
(24,3,1)
(99,85,1)
(126,87,2)
(154,26,2)
(135,154,2)
(126,60,2)
(131,91,2)
(31,148,2)
(83,153,2)
(157,3,2)
(83,55,2)
(126,19,2)
(101,126,2)
(93,15,2)
(11,0,2)
(154,3,2)
(128,107,2)
(39,113,2)
(94,108,2)
(91,59,2)
(114,95,2)
(0,111,2)
(26,3,2)
(47,3,2)
(84,41,2)
(4,119,2)
(126,43,2)
(153,157,2)
(29,85,2)
(144,40,2)
(126,143,2)
(85,97,2)
(124,3,2)
(14,154,2)
(126,92,2)
(94,49,2)
(126,69,2)
(157,93,2)
(148,66,2)
(93,3,2)
(6,154,2)
(75,16,2)
(139,3,2)
(126,17,2)
(49,15,2)
(161,154,2)
(3,80,2)
(44,94,2)
(153,3,2)
(23,154,2)
(26,139,2)
(125,3,2)
(26,91,2)
(88,3,2)
(126,147,2)
(73,81,2)
(80,131,2)
(107,67,2)
(80,58,2)
(13,3,2)
(113,76,2)
(158,3,2)
(48,132,2)
(62,75,2)
(89,3,2)
(126,105,2)
(90,51,2)
(41,102,2)
(103,144,2)
(15,138,2)
(126,23,2)
(126,133,2)
(126,54,2)
(126,86,2)
(95,116,2)
(143,3,2)
(157,50,2)
(37,3,2)
(3,44,2)
(110,36,2)
(139,83,2)
(83,3,2)
(126,7,2)
-----------------------------------
(0,mca_btl_sm_param_register_int("exclusivity", MCA_BTL_EXCLUSIVITY_HIGH-1)
(1,mca_btl_sm_component)
(2,mca_btl_sm_component)
(3,(float)
(4,mca_btl_sm_component.sm_mpool_name =\n\\n        mca_btl_sm_param_register_string("mpool", "sm")
(5,"sm")
(6,1)
(7,mca_btl_sm_component.sm_free_list_inc)
(8,"sm_extra_procs")
(9,1)
(10,mca_btl_sm_component)
(11,mca_btl_sm_component.sm_exclusivity =\n\\n        mca_btl_sm_param_register_int("exclusivity", MCA_BTL_EXCLUSIVITY_HIGH-1)
(12,"size_of_cb_queue")
(13,cb_lazy_free_freq)
(14,mca_btl_sm_component)
(15,mca_btl_sm_component.size_of_cb_queue =\n\\n        mca_btl_sm_param_register_int("size_of_cb_queue", 128)
(16,-1)
(17,mca_btl_sm_component.sm_free_list_max)
(18,)
(19,mca_btl_sm_component.cb_lazy_free_freq)
(20,100)
(21,2)
(22,)
(23,mca_btl_sm_component.cb_lazy_free_freq)
(24,mca_btl_sm_component)
(25,mca_btl_sm_component)
(26,mca_btl_sm_component.cb_lazy_free_freq)
(27,128)
(28,"cb_lazy_free_freq")
(29,OBJ_CONSTRUCT(&mca_btl_sm_component.sm_lock, opal_mutex_t)
(30,1)
(31,mca_btl_sm_component.eager_limit =\n\\n        mca_btl_sm_param_register_int("eager_limit", 4*1024)
(32,cb_lazy_free_freq)
(33,if( (float)
(34,mca_btl_sm_component)
(35,mca_btl_sm_component)
(36,mca_btl_sm_param_register_int("latency", 100)
(37,mca_btl_sm_component)
(38,256)
(39,OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags1, ompi_free_list_t)
(40,-1)
(41,mca_btl_sm_param_register_int("max_procs", -1)
(42,ompi_free_list_t)
(43,mca_btl_sm_component.sm_exclusivity)
(44,0.95*(float)
(45,0.95)
(46,4)
(47,mca_btl_sm_component)
(48,mca_btl_sm_component.sm_free_list_num =\n\\n        mca_btl_sm_param_register_int("free_list_num", 8)
(49,mca_btl_sm_component.size_of_cb_queue)
(50,float)
(51,mca_btl_sm_param_register_int("sm_extra_procs", 2)
(52,sm_free_list_inc)
(53,sm_latency)
(54,mca_btl_sm_component.sm_max_procs)
(55,int)
(56,"sm_extra_procs")
(57,mca_btl_sm_component)
(58,float)
(59,mca_btl_sm_param_register_int("cb_lazy_free_freq", 120)
(60,mca_btl_sm_component.sm_mpool_name)
(61,mca_btl_sm_component)
(62,mca_btl_sm_component.sm_free_list_max =\n\\n        mca_btl_sm_param_register_int("free_list_max", -1)
(63,sm_free_list_max)
(64,"free_list_num")
(65,sm_max_procs)
(66,4*1024)
(67,mca_btl_sm_component.sm_frags2)
(68,"exclusivity")
(69,mca_btl_sm_component.size_of_cb_queue)
(70,1)
(71,sm_free_list_num)
(72,sm_frags1)
(73,mca_btl_sm_component.sm_free_list_inc =\n\\n        mca_btl_sm_param_register_int("free_list_inc", 256)
(74,sm_lock)
(75,mca_btl_sm_param_register_int("free_list_max", -1)
(76,mca_btl_sm_component.sm_frags1)
(77,max_frag_size)
(78,32)
(79,MCA_BTL_EXCLUSIVITY_HIGH)
(80,(float)
(81,mca_btl_sm_param_register_int("free_list_inc", 256)
(82,cb_lazy_free_freq)
(83,(int)
(84,mca_btl_sm_component.sm_max_procs =\n\\n        mca_btl_sm_param_register_int("max_procs", -1)
(85,&mca_btl_sm_component.sm_lock)
(86,mca_btl_sm_component.sm_extra_procs)
(87,mca_btl_sm_component.max_frag_size)
(88,mca_btl_sm_component)
(89,0.95)
(90,mca_btl_sm_component.sm_extra_procs =\n\\n        mca_btl_sm_param_register_int("sm_extra_procs", 2)
(91,mca_btl_sm_component.cb_lazy_free_freq =\n\\n        mca_btl_sm_param_register_int("cb_lazy_free_freq", 120)
(92,mca_btl_sm_component.sm_free_list_num)
(93,mca_btl_sm_component.size_of_cb_queue)
(94,(float)
(95,mca_btl_sm_param_register_int("max_frag_size", 32*1024)
(96,"eager_limit")
(97,mca_btl_sm_component.sm_lock)
(98,sm_extra_procs)
(99,opal_mutex_t)
(100,1024)
(101,RET)
(102,-1)
(103,mca_btl_sm_component.sm_extra_procs =\n\\n        mca_btl_sm_param_register_int("sm_extra_procs", -1)
(104,"free_list_inc")
(105,mca_btl_sm_component.sm_extra_procs)
(106,"free_list_max")
(107,&mca_btl_sm_component.sm_frags2)
(108,float)
(109,mca_btl_sm_component)
(110,mca_btl_sm_component.sm_latency =\n\\n        mca_btl_sm_param_register_int("latency", 100)
(111,MCA_BTL_EXCLUSIVITY_HIGH-1)
(112,sm_frags2)
(113,&mca_btl_sm_component.sm_frags1)
(114,mca_btl_sm_component.max_frag_size =\n\\n        mca_btl_sm_param_register_int("max_frag_size", 32*1024)
(115,"max_procs")
(116,32*1024)
(117,mca_btl_sm_component)
(118,if( 0>= mca_btl_sm_component.cb_lazy_free_freq )
(119,mca_btl_sm_param_register_string("mpool", "sm")
(120,size_of_cb_queue)
(121,"latency")
(122,sm_extra_procs)
(123,"mpool")
(124,cb_lazy_free_freq)
(125,0)
(126,return OMPI_SUCCESS;)
(127,mca_btl_sm_component)
(128,OBJ_CONSTRUCT(&mca_btl_sm_component.sm_frags2, ompi_free_list_t)
(129,mca_btl_sm_component)
(130,mca_btl_sm_component)
(131,mca_btl_sm_component.cb_lazy_free_freq)
(132,mca_btl_sm_param_register_int("free_list_num", 8)
(133,mca_btl_sm_component.sm_latency)
(134,size_of_cb_queue)
(135,mca_btl_sm_component.cb_lazy_free_freq=1)
(136,sm_mpool_name)
(137,mca_btl_sm_component)
(138,mca_btl_sm_param_register_int("size_of_cb_queue", 128)
(139,mca_btl_sm_component.cb_lazy_free_freq=\n\\n            (int)
(140,"max_frag_size")
(141,mca_btl_sm_component)
(142,120)
(143,mca_btl_sm_component.cb_lazy_free_freq)
(144,mca_btl_sm_param_register_int("sm_extra_procs", -1)
(145,mca_btl_sm_component)
(146,1024)
(147,mca_btl_sm_component.eager_limit)
(148,mca_btl_sm_param_register_int("eager_limit", 4*1024)
(149,eager_limit)
(150,sm_exclusivity)
(151,8)
(152,mca_btl_sm_component)
(153,0.95*(float)
(154,0>= mca_btl_sm_component.cb_lazy_free_freq)
(155,1)
(156,ompi_free_list_t)
(157,(float)
(158,size_of_cb_queue)
(159,)
(160,OMPI_SUCCESS)
(161,cb_lazy_free_freq)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^