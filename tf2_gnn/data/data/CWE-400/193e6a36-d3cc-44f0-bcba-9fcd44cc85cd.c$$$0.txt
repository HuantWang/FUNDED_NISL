-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_12_bad()
{
    int64_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
71,74
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
82,84
83,84
85,86
85,87
87,88
88,89
88,90
89,90
92,93
93,94
93,95
94,95
94,96
95,96
99,100
100,101
100,102
101,102
103,104
103,105
104,105
107,108
107,109
107,110
108,109
109,110
111,112
113,114
114,115
115,116
115,117
116,117
118,119
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,60,61,62,66,69,70,75,79,81,84,86,90,91,96,97,98,102,105,106,110,112,117,119
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
73,74
73,75
85,86
85,87
93,94
93,95
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_12_bad(){    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__int64_t_calloc_12_bad()
CWE401_Memory_Leak__int64_t_calloc_12_bad
{    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(20,33,0)
(12,50,0)
(31,37,0)
(32,24,0)
(12,48,0)
(6,49,0)
(40,49,0)
(43,16,0)
(12,36,0)
(22,47,0)
(33,20,0)
(9,44,0)
(8,18,0)
(48,16,0)
(4,33,0)
(33,4,0)
(50,10,0)
(24,32,0)
(46,0,0)
(28,18,0)
(37,31,0)
(50,24,0)
(38,49,0)
(24,50,0)
(19,0,0)
(42,40,0)
(11,16,0)
(43,44,0)
(35,4,0)
(3,44,0)
(21,12,0)
(13,33,0)
(26,37,0)
(37,50,0)
(17,50,0)
(41,48,0)
(1,45,0)
(34,10,0)
(49,6,0)
(29,37,0)
(4,35,0)
(44,43,0)
(30,7,0)
(0,48,0)
(49,40,0)
(4,48,0)
(1,47,0)
(24,6,0)
(18,7,0)
(14,20,0)
(31,10,0)
(15,7,0)
(23,16,0)
(47,1,0)
(6,24,0)
(48,4,0)
(39,7,0)
(44,48,0)
(46,19,1)
(37,50,1)
(20,14,1)
(19,48,1)
(26,29,1)
(27,18,1)
(12,48,1)
(44,48,1)
(11,1,1)
(48,4,1)
(6,49,1)
(25,31,1)
(24,6,1)
(33,20,1)
(34,50,1)
(43,44,1)
(21,25,1)
(4,35,1)
(22,0,1)
(49,40,1)
(2,12,1)
(9,11,1)
(4,33,1)
(38,17,1)
(41,27,1)
(12,21,1)
(44,3,1)
(47,22,1)
(0,48,1)
(37,26,1)
(1,47,1)
(40,42,1)
(0,46,1)
(31,37,1)
(25,43,1)
(18,8,1)
(11,0,1)
(14,13,1)
(17,27,1)
(42,38,1)
(12,50,1)
(2,25,1)
(29,34,1)
(13,41,1)
(8,28,1)
(24,32,1)
(3,9,1)
(50,24,1)
(29,27,2)
(50,27,2)
(31,37,2)
(44,48,2)
(14,27,2)
(1,47,2)
(24,6,2)
(11,27,2)
(9,27,2)
(49,27,2)
(12,25,2)
(0,27,2)
(33,27,2)
(19,27,2)
(12,50,2)
(17,27,2)
(47,0,2)
(43,27,2)
(21,25,2)
(0,48,2)
(33,20,2)
(48,27,2)
(24,27,2)
(49,40,2)
(34,27,2)
(20,27,2)
(31,27,2)
(43,44,2)
(50,24,2)
(3,27,2)
(41,27,2)
(22,0,2)
(4,33,2)
(38,27,2)
(4,35,2)
(48,4,2)
(37,27,2)
(13,27,2)
(6,27,2)
(46,27,2)
(1,0,2)
(26,27,2)
(40,27,2)
(44,27,2)
(4,27,2)
(6,49,2)
(12,48,2)
(37,50,2)
(24,32,2)
(42,27,2)
-----------------------------------
(0,data == NULL)
(1,exit(-1)
(2,RET)
(3,0)
(4,(int64_t *)
(5, sizeof(int64_t)
(6,ALLOCA(100*sizeof(int64_t)
(7,)
(8,NULL)
(9,data)
(10,)
(11,L)
(12,free(data)
(13,100)
(14,int64_t)
(15,if(globalReturnsTrueOrFalse()
(16,)
(17,data)
(18,data = NULL)
(19,data)
(20,sizeof(int64_t)
(21,data)
(22,1)
(23,if (data == NULL)
(24,(int64_t *)
(25,globalReturnsTrueOrFalse()
(26,0)
(27,globalReturnsTrueOrFalse()
(28,data)
(29,data)
(30,data)
(31,printLongLongLine(data[0])
(32,int64_t *)
(33,calloc(100, sizeof(int64_t)
(34,L)
(35,int64_t *)
(36,)
(37,data[0])
(38,100)
(39,if(globalReturnsTrueOrFalse()
(40,sizeof(int64_t)
(41,data)
(42,int64_t)
(43,printLongLongLine(data[0])
(44,data[0])
(45,)
(46,NULL)
(47,-1)
(48,data = (int64_t *)
(49,100*sizeof(int64_t)
(50,data = (int64_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^