-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_08_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
84,85
85,86
87,88
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,86,88
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_08_bad(){    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_08_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_08_bad
{    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(41,2,0)
(2,39,0)
(17,41,0)
(14,33,0)
(45,25,0)
(3,43,0)
(42,0,0)
(18,4,0)
(1,28,0)
(4,18,0)
(6,8,0)
(33,41,0)
(21,16,0)
(36,13,0)
(18,21,0)
(38,0,0)
(44,2,0)
(41,33,0)
(46,25,0)
(13,29,0)
(29,13,0)
(46,44,0)
(38,31,0)
(35,16,0)
(39,2,0)
(30,4,0)
(2,41,0)
(4,44,0)
(22,44,0)
(13,35,0)
(23,46,0)
(43,16,0)
(29,44,0)
(19,11,0)
(25,43,0)
(9,35,0)
(21,18,0)
(40,4,0)
(8,28,0)
(26,46,0)
(12,11,0)
(7,28,0)
(37,8,0)
(44,16,0)
(27,16,0)
(32,29,0)
(25,46,0)
(0,38,0)
(24,29,0)
(2,44,0)
(34,28,0)
(11,44,0)
(46,23,1)
(20,5,1)
(25,46,1)
(13,29,1)
(17,22,1)
(42,11,1)
(29,44,1)
(30,40,1)
(41,33,1)
(43,3,1)
(0,42,1)
(38,0,1)
(14,17,1)
(35,9,1)
(10,20,1)
(2,39,1)
(11,44,1)
(45,46,1)
(8,37,1)
(5,8,1)
(26,11,1)
(4,30,1)
(32,43,1)
(22,5,1)
(12,44,1)
(3,25,1)
(18,4,1)
(20,21,1)
(44,2,1)
(23,26,1)
(2,41,1)
(4,44,1)
(33,14,1)
(21,18,1)
(46,44,1)
(29,24,1)
(9,13,1)
(24,32,1)
(37,6,1)
(19,12,1)
(25,45,1)
(36,29,1)
(11,19,1)
(40,35,1)
(26,38,1)
(13,36,1)
(19,5,2)
(17,5,2)
(24,5,2)
(46,44,2)
(2,5,2)
(0,11,2)
(36,5,2)
(18,4,2)
(21,5,2)
(29,44,2)
(43,5,2)
(45,5,2)
(9,5,2)
(18,5,2)
(14,5,2)
(22,5,2)
(44,5,2)
(11,5,2)
(46,5,2)
(2,41,2)
(21,18,2)
(35,5,2)
(29,5,2)
(23,5,2)
(4,44,2)
(26,5,2)
(11,44,2)
(25,5,2)
(13,29,2)
(42,11,2)
(3,5,2)
(40,5,2)
(2,39,2)
(44,2,2)
(4,5,2)
(25,46,2)
(32,5,2)
(30,5,2)
(38,0,2)
(38,11,2)
(41,5,2)
(13,5,2)
(12,5,2)
(41,33,2)
(33,5,2)
-----------------------------------
(0,-1)
(1,if(staticReturnsTrue()
(2,(twoIntsStruct *)
(3,0)
(4,data[0])
(5,staticReturnsTrue()
(6,data)
(7,if(staticReturnsTrue()
(8,data = NULL)
(9,0)
(10,RET)
(11,data == NULL)
(12,data)
(13,data[0].intTwo)
(14,twoIntsStruct)
(15, sizeof(twoIntsStruct)
(16,)
(17,100)
(18,&data[0])
(19,NULL)
(20,staticReturnsTrue()
(21,printStructLine(&data[0])
(22,data)
(23,0)
(24,0)
(25,data[0].intOne)
(26,data)
(27,if (data == NULL)
(28,)
(29,data[0])
(30,0)
(31,)
(32,data)
(33,sizeof(twoIntsStruct)
(34,data)
(35,data[0].intTwo = 0)
(36,intTwo)
(37,NULL)
(38,exit(-1)
(39,twoIntsStruct *)
(40,data)
(41,calloc(100, sizeof(twoIntsStruct)
(42,1)
(43,data[0].intOne = 0)
(44,data = (twoIntsStruct *)
(45,intOne)
(46,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^