-----label-----
0
-----code-----
static void shaper_msg_clear(pid_t dst_pid) {
  ssize_t msglen = 0;
  struct shaper_msg *msg;
  size_t msgsz = sizeof(unsigned int) + sizeof(long double) +
    sizeof(long double);

  msg = malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext));
  if (msg == NULL) {
    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),
      MOD_SHAPER_VERSION ": Out of memory!");
    pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);
  }

  (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,
    "clearing queue ID %d of messages for process ID %lu", shaper_qid,
    (unsigned long) dst_pid);
  msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR);
  while (msglen > 0) {
    pr_signals_handle();

    msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR);
  }

  free(msg);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
11,12
12,13
12,14
13,14
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
34,36
35,36
36,37
36,38
39,40
40,41
40,42
43,44
44,45
44,46
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
54,56
55,56
55,57
56,57
57,58
57,59
58,59
61,62
63,64
64,65
65,66
65,67
66,67
69,70
69,71
70,71
70,72
71,72
73,74
75,76
75,77
76,77
77,78
78,79
78,80
78,81
78,82
79,80
81,82
82,83
84,85
86,87
88,89
89,90
89,91
90,91
90,92
93,94
93,95
93,96
93,97
93,98
93,99
94,95
96,97
98,99
101,102
103,104
103,105
104,105
104,106
107,108
109,110
110,111
110,112
111,112
113,114
113,115
113,116
113,117
113,118
113,119
114,115
116,117
118,119
120,121
122,123
124,125
124,126
125,126
127,128
129,130
129,131
130,131
130,132
131,132
134,135
134,136
135,136
136,137
137,138
139,140
140,141
140,142
141,142
143,144
143,145
143,146
143,147
143,148
143,149
144,145
146,147
148,149
150,151
152,153
154,155
154,156
155,156
157,158
159,160
160,161
160,162
161,162
163,164
-----nextToken-----
2,4,7,9,14,16,18,22,24,25,29,31,37,38,41,42,45,46,50,53,59,60,62,67,68,72,74,80,83,85,87,91,92,95,97,99,100,102,105,106,108,112,115,117,119,121,123,126,128,132,133,138,142,145,147,149,151,153,156,158,162,164
-----computeFrom-----
33,34
33,35
34,35
34,36
48,49
48,50
54,55
54,56
55,56
55,57
70,71
70,72
110,111
110,112
124,125
124,126
130,131
130,132
140,141
140,142
154,155
154,156
-----guardedBy-----
74,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void shaper_msg_clear(pid_t dst_pid) {  ssize_t msglen = 0;  struct shaper_msg *msg;  size_t msgsz = sizeof(unsigned int) + sizeof(long double) +    sizeof(long double);  msg = malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext));  if (msg == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SHAPER_VERSION ": Out of memory!");    pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }  (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,    "clearing queue ID %d of messages for process ID %lu", shaper_qid,    (unsigned long) dst_pid);  msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR);  while (msglen > 0) {    pr_signals_handle();    msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR);  }  free(msg);}
static void
shaper_msg_clear(pid_t dst_pid)
shaper_msg_clear
pid_t dst_pid
pid_t
pid_t
dst_pid
dst_pid
{  ssize_t msglen = 0;  struct shaper_msg *msg;  size_t msgsz = sizeof(unsigned int) + sizeof(long double) +    sizeof(long double);  msg = malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext));  if (msg == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SHAPER_VERSION ": Out of memory!");    pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }  (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,    "clearing queue ID %d of messages for process ID %lu", shaper_qid,    (unsigned long) dst_pid);  msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR);  while (msglen > 0) {    pr_signals_handle();    msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR);  }  free(msg);}
ssize_t msglen = 0;
ssize_t msglen = 0;
ssize_t
ssize_t
msglen = 0
msglen
= 0
0
struct shaper_msg *msg;
struct shaper_msg *msg;
struct shaper_msg
shaper_msg
*msg
*
msg
size_t msgsz = sizeof(unsigned int) + sizeof(long double) +    sizeof(long double);
size_t msgsz = sizeof(unsigned int) + sizeof(long double) +    sizeof(long double);
size_t
size_t
msgsz = sizeof(unsigned int) + sizeof(long double) +    sizeof(long double)
msgsz
= sizeof(unsigned int) + sizeof(long double) +    sizeof(long double)
sizeof(unsigned int) + sizeof(long double) +    sizeof(long double)
sizeof(unsigned int) + sizeof(long double)
sizeof(unsigned int)
unsigned int
unsigned int

sizeof(long double)
long double
long double

sizeof(long double)
long double
long double

msg = malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext));
msg = malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext))
msg
msg
malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext))
malloc
malloc
sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext)
sizeof(struct shaper_msg) + msgsz
sizeof(struct shaper_msg)
struct shaper_msg
struct shaper_msg
shaper_msg

msgsz
msgsz
sizeof(msg->mtext)
(msg->mtext)
msg->mtext
msg
msg
mtext
if (msg == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SHAPER_VERSION ": Out of memory!");    pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }
msg == NULL
msg
msg
NULL
NULL
{    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SHAPER_VERSION ": Out of memory!");    pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }
pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SHAPER_VERSION ": Out of memory!");
pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);
pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL)
pr_session_disconnect
pr_session_disconnect
&shaper_module
shaper_module
shaper_module
PR_SESS_DISCONNECT_NOMEM
PR_SESS_DISCONNECT_NOMEM
NULL
NULL
(void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,    "clearing queue ID %d of messages for process ID %lu", shaper_qid,    (unsigned long) dst_pid);
(void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,    "clearing queue ID %d of messages for process ID %lu", shaper_qid,    (unsigned long) dst_pid)
void
void

pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,    "clearing queue ID %d of messages for process ID %lu", shaper_qid,    (unsigned long) dst_pid)
pr_log_writefile
pr_log_writefile
shaper_logfd
shaper_logfd
MOD_SHAPER_VERSION
MOD_SHAPER_VERSION
"clearing queue ID %d of messages for process ID %lu"
shaper_qid
shaper_qid
(unsigned long) dst_pid
unsigned long
unsigned long

dst_pid
dst_pid
msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR);
msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR)
msglen
msglen
msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR)
msgrcv
msgrcv
shaper_qid
shaper_qid
msg
msg
msgsz
msgsz
dst_pid
dst_pid
IPC_NOWAIT|MSG_NOERROR
IPC_NOWAIT
IPC_NOWAIT
MSG_NOERROR
MSG_NOERROR
while (msglen > 0) {    pr_signals_handle();    msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR);  }
msglen > 0
msglen
msglen
0
{    pr_signals_handle();    msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR);  }
pr_signals_handle();
pr_signals_handle()
pr_signals_handle
pr_signals_handle
msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR);
msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR)
msglen
msglen
msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR)
msgrcv
msgrcv
shaper_qid
shaper_qid
msg
msg
msgsz
msgsz
dst_pid
dst_pid
IPC_NOWAIT|MSG_NOERROR
IPC_NOWAIT
IPC_NOWAIT
MSG_NOERROR
MSG_NOERROR
free(msg);
free(msg)
free
free
msg
msg
-----joern-----
(73,72,0)
(49,52,0)
(24,29,0)
(22,65,0)
(47,0,0)
(1,50,0)
(4,38,0)
(13,5,0)
(46,7,0)
(65,50,0)
(27,24,0)
(34,49,0)
(23,10,0)
(8,66,0)
(14,27,0)
(66,75,0)
(32,17,0)
(58,22,0)
(39,31,0)
(6,27,0)
(62,70,0)
(16,31,0)
(40,29,0)
(10,17,0)
(3,17,0)
(75,56,0)
(58,13,0)
(17,50,0)
(10,53,0)
(68,52,0)
(52,49,0)
(62,22,0)
(10,1,0)
(68,65,0)
(68,4,0)
(13,58,0)
(16,73,0)
(53,10,0)
(10,65,0)
(2,53,0)
(7,46,0)
(43,1,0)
(61,6,0)
(31,50,0)
(75,66,0)
(5,13,0)
(10,54,0)
(18,24,0)
(37,50,0)
(69,1,0)
(33,10,0)
(69,24,0)
(38,48,0)
(41,73,0)
(4,32,0)
(74,27,0)
(26,53,0)
(44,50,0)
(4,68,0)
(35,65,0)
(7,58,0)
(70,62,0)
(28,10,0)
(51,50,0)
(19,75,0)
(11,69,0)
(0,17,0)
(60,51,0)
(38,4,0)
(20,50,0)
(77,16,0)
(55,6,0)
(48,38,0)
(27,17,0)
(12,16,0)
(45,50,0)
(27,54,0)
(24,27,0)
(78,68,0)
(27,65,0)
(58,7,0)
(25,16,0)
(57,27,0)
(67,27,0)
(3,50,0)
(42,16,0)
(73,16,0)
(30,75,0)
(36,49,0)
(9,10,0)
(22,58,0)
(22,62,0)
(21,17,0)
(76,69,0)
(32,4,0)
(31,39,0)
(59,50,0)
(52,68,0)
(71,0,0)
(73,54,0)
(15,51,0)
(31,16,0)
(65,22,0)
(27,6,0)
(1,10,0)
(17,32,0)
(63,3,0)
(72,73,0)
(14,74,1)
(17,32,1)
(3,17,1)
(69,24,1)
(73,54,1)
(61,67,1)
(10,54,1)
(2,33,1)
(76,24,1)
(31,16,1)
(11,76,1)
(66,8,1)
(13,7,1)
(32,4,1)
(7,46,1)
(76,1,1)
(38,21,1)
(10,53,1)
(10,17,1)
(22,58,1)
(73,72,1)
(68,52,1)
(23,43,1)
(0,17,1)
(58,13,1)
(22,62,1)
(57,18,1)
(71,47,1)
(34,78,1)
(7,62,1)
(74,57,1)
(49,36,1)
(65,22,1)
(69,11,1)
(0,71,1)
(41,77,1)
(62,70,1)
(25,12,1)
(33,9,1)
(78,38,1)
(27,17,1)
(36,34,1)
(51,60,1)
(10,65,1)
(55,61,1)
(3,63,1)
(16,73,1)
(28,23,1)
(40,69,1)
(75,66,1)
(26,2,1)
(63,69,1)
(21,65,1)
(53,26,1)
(43,31,1)
(6,55,1)
(68,65,1)
(35,51,1)
(12,42,1)
(38,48,1)
(9,28,1)
(67,14,1)
(4,38,1)
(1,10,1)
(27,65,1)
(42,0,1)
(75,30,1)
(69,1,1)
(77,25,1)
(30,19,1)
(60,15,1)
(58,7,1)
(52,49,1)
(24,27,1)
(13,5,1)
(73,41,1)
(62,35,1)
(64,3,1)
(27,6,1)
(27,54,1)
(4,68,1)
(42,75,1)
(19,66,1)
(8,0,1)
(31,39,1)
(47,17,1)
(18,40,1)
(8,0,2)
(55,69,2)
(6,69,2)
(13,5,2)
(69,24,2)
(4,38,2)
(11,69,2)
(75,66,2)
(73,54,2)
(14,69,2)
(7,46,2)
(52,49,2)
(3,17,2)
(38,48,2)
(31,16,2)
(57,69,2)
(27,54,2)
(10,54,2)
(68,52,2)
(69,1,2)
(10,17,2)
(27,69,2)
(1,10,2)
(10,65,2)
(62,70,2)
(24,69,2)
(4,68,2)
(68,65,2)
(58,13,2)
(65,22,2)
(67,69,2)
(18,69,2)
(40,69,2)
(69,69,2)
(22,58,2)
(73,72,2)
(22,62,2)
(75,0,2)
(19,0,2)
(16,73,2)
(24,27,2)
(31,39,2)
(58,7,2)
(27,65,2)
(66,0,2)
(61,69,2)
(27,17,2)
(30,0,2)
(0,17,2)
(17,32,2)
(27,6,2)
(32,4,2)
(74,69,2)
(10,53,2)
(76,69,2)
-----------------------------------
(0,msg == NULL)
(1,msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR)
(2,IPC_NOWAIT)
(3,free(msg)
(4,sizeof(struct shaper_msg)
(5,long double)
(6,IPC_NOWAIT|MSG_NOERROR)
(7,sizeof(long double)
(8,shaper_module)
(9,msgsz)
(10,msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR)
(11,0)
(12,MOD_SHAPER_VERSION)
(13,sizeof(long double)
(14,msgsz)
(15,msglen)
(16,pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,\n\\n    "clearing queue ID %d of messages for process ID %lu", shaper_qid,\n\\n    (unsigned long)
(17,msg = malloc(sizeof(struct shaper_msg)
(18,msglen)
(19,PR_SESS_DISCONNECT_NOMEM)
(20,while (msglen > 0)
(21,msg)
(22,sizeof(unsigned int)
(23,shaper_qid)
(24,msglen = msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR)
(25,"clearing queue ID %d of messages for process ID %lu")
(26,MSG_NOERROR)
(27,msgrcv(shaper_qid, msg, msgsz, dst_pid, IPC_NOWAIT|MSG_NOERROR)
(28,msg)
(29,)
(30,NULL)
(31,(void)
(32,malloc(sizeof(struct shaper_msg)
(33,dst_pid)
(34,msg)
(35,msgsz)
(36,mtext)
(37,msgsz)
(38,sizeof(struct shaper_msg)
(39,void)
(40,pr_signals_handle()
(41,dst_pid)
(42,shaper_logfd)
(43,msglen)
(44,if (msg == NULL)
(45,msglen)
(46,long double)
(47,msg)
(48,struct shaper_msg)
(49,msg->mtext)
(50,)
(51,msglen = 0)
(52,sizeof(msg->mtext)
(53,IPC_NOWAIT|MSG_NOERROR)
(54,pid_t dst_pid)
(55,MSG_NOERROR)
(56,)
(57,shaper_qid)
(58,sizeof(long double)
(59,msg)
(60,0)
(61,IPC_NOWAIT)
(62,sizeof(unsigned int)
(63,msg)
(64,RET)
(65,msgsz = sizeof(unsigned int)
(66,&shaper_module)
(67,dst_pid)
(68,msgsz - sizeof(msg->mtext)
(69,msglen > 0)
(70,unsigned int)
(71,NULL)
(72,unsigned long)
(73,(unsigned long)
(74,msg)
(75,pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL)
(76,msglen)
(77,shaper_qid)
(78,msgsz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^