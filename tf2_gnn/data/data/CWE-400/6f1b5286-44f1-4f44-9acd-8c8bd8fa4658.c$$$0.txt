-----label-----
0
-----code-----
static int tcp_handle(tcp_context_t *tcp, int fd,
                      struct iovec *rx, struct iovec *tx)
{
	/* Create query processing parameter. */
	struct sockaddr_storage ss;
	memset(&ss, 0, sizeof(struct sockaddr_storage));
	struct process_query_param param = {0};
	param.socket = fd;
	param.remote = &ss;
	param.server = tcp->server;
	param.thread_id = tcp->thread_id;
	rx->iov_len = KNOT_WIRE_MAX_PKTSIZE;
	tx->iov_len = KNOT_WIRE_MAX_PKTSIZE;

	/* Receive peer name. */
	socklen_t addrlen = sizeof(struct sockaddr_storage);
	if (getpeername(fd, (struct sockaddr *)&ss, &addrlen) < 0) {
		;
	}

	/* Timeout. */
	struct timeval tmout = { conf()->max_conn_reply, 0 };

	/* Receive data. */
	int ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout);
	if (ret <= 0) {
		dbg_net("tcp: client on fd=%d disconnected\n", fd);
		if (ret == KNOT_EAGAIN) {
			rcu_read_lock();
			char addr_str[SOCKADDR_STRLEN] = {0};
			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);
			log_warning("connection timed out, address '%s', "
			            "timeout %d seconds",
			            addr_str, conf()->max_conn_idle);
			rcu_read_unlock();
		}
		return KNOT_ECONNREFUSED;
	} else {
		rx->iov_len = ret;
	}

	/* Create packets. */
	mm_ctx_t *mm = tcp->overlay.mm;
	knot_pkt_t *ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm);
	knot_pkt_t *query = knot_pkt_new(rx->iov_base, rx->iov_len, mm);

	/* Initialize processing overlay. */
	knot_overlay_init(&tcp->overlay, mm);
	knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param);

	/* Input packet. */
	int state = knot_overlay_in(&tcp->overlay, query);

	/* Resolve until NOOP or finished. */
	ret = KNOT_EOK;
	while (state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)) {
		state = knot_overlay_out(&tcp->overlay, ans);

		/* Send, if response generation passed and wasn't ignored. */
		if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {
			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {
				ret = KNOT_ECONNREFUSED;
				break;
			}
		}
	}

	/* Reset after processing. */
	knot_overlay_finish(&tcp->overlay);
	knot_overlay_deinit(&tcp->overlay);

	/* Cleanup. */
	knot_pkt_free(&query);
	knot_pkt_free(&ans);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
27,42
27,43
27,44
27,45
27,46
27,47
27,48
27,49
27,50
27,51
27,52
27,53
27,54
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
35,38
35,39
36,37
38,39
39,40
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
58,60
59,60
62,63
64,65
65,66
65,67
66,67
66,68
67,68
70,71
71,72
73,74
74,75
74,76
75,76
75,77
76,77
79,80
79,81
80,81
83,84
84,85
84,86
85,86
85,87
86,87
89,90
89,91
90,91
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
109,110
110,111
110,112
111,112
113,114
113,115
115,116
116,117
117,118
117,119
118,119
121,122
121,123
122,123
122,124
123,124
123,125
123,126
123,127
124,125
126,127
128,129
128,130
129,130
129,131
130,131
132,133
134,135
135,136
137,138
138,139
141,142
143,144
144,145
144,146
145,146
147,148
147,149
149,150
150,151
150,152
151,152
151,153
152,153
153,154
157,158
158,159
158,160
160,161
160,162
162,163
163,164
163,165
163,166
163,167
163,168
164,165
166,167
168,169
168,170
169,170
172,173
172,174
173,174
176,177
177,178
179,180
179,181
179,182
180,181
180,182
181,182
184,185
184,186
184,187
185,186
186,187
186,188
186,189
187,188
190,191
192,193
192,194
193,194
193,195
194,195
196,197
198,199
198,200
198,201
198,202
198,203
199,200
200,201
201,202
203,204
204,205
204,206
206,207
206,208
206,209
208,209
209,210
211,212
212,213
214,215
215,216
215,217
215,218
215,219
216,217
218,219
220,221
221,222
222,223
224,225
225,226
227,228
228,229
228,230
228,231
228,232
229,230
232,233
234,235
234,236
235,236
236,237
239,240
240,241
241,242
243,244
244,245
246,247
247,248
248,249
248,250
249,250
249,251
250,251
253,254
255,256
256,257
256,258
257,258
259,260
259,261
259,262
262,263
263,264
263,265
264,265
264,266
265,266
269,270
270,271
270,272
271,272
273,274
273,275
273,276
276,277
277,278
277,279
277,280
277,281
278,279
280,281
280,282
281,282
284,285
284,286
285,286
288,289
290,291
291,292
291,293
292,293
294,295
294,296
294,297
297,298
298,299
298,300
298,301
298,302
299,300
301,302
301,303
302,303
305,306
305,307
306,307
309,310
311,312
312,313
312,314
312,315
313,314
315,316
316,317
316,318
317,318
320,321
322,323
323,324
323,325
323,326
323,327
324,325
326,327
327,328
327,329
328,329
331,332
333,334
334,335
336,337
337,338
337,339
339,340
339,341
341,342
342,343
342,344
342,345
343,344
345,346
346,347
346,348
347,348
350,351
352,353
353,354
353,355
354,355
356,357
358,359
358,360
359,360
359,361
360,361
362,363
363,364
363,365
364,365
366,367
368,369
368,370
369,370
370,371
370,372
371,372
373,374
373,375
373,376
374,375
376,377
377,378
377,379
378,379
381,382
383,384
383,385
384,385
384,386
385,386
385,387
386,387
386,388
387,388
391,392
392,393
393,394
393,395
394,395
396,397
397,398
397,399
398,399
400,401
402,403
403,404
403,405
404,405
404,406
405,406
405,407
405,408
405,409
406,407
408,409
410,411
410,412
411,412
414,415
414,416
415,416
418,419
418,420
419,420
422,423
422,424
423,424
424,425
424,426
425,426
427,428
430,431
431,432
431,433
432,433
434,435
435,436
435,437
436,437
439,440
440,441
440,442
441,442
443,444
444,445
444,446
445,446
448,449
449,450
449,451
450,451
452,453
453,454
455,456
456,457
456,458
457,458
459,460
460,461
462,463
463,464
-----nextToken-----
2,4,7,9,10,12,14,17,19,20,23,25,26,31,33,37,40,41,45,46,50,52,55,60,61,63,68,69,72,77,78,81,82,87,88,91,92,97,98,100,105,106,108,112,114,119,120,125,127,131,133,136,139,140,142,146,148,154,155,156,159,161,165,167,170,171,174,175,178,182,183,188,189,191,195,197,202,205,207,210,213,217,219,223,226,230,231,233,237,238,242,245,251,252,254,258,260,261,266,267,268,272,274,275,279,282,283,286,287,289,293,295,296,300,303,304,307,308,310,314,318,319,321,325,329,330,332,335,338,340,344,348,349,351,355,357,361,365,367,372,375,379,380,382,388,389,390,395,399,401,407,409,412,413,416,417,420,421,426,428,429,433,437,438,442,446,447,451,454,458,461,464
-----computeFrom-----
57,58
57,59
65,66
65,67
74,75
74,76
84,85
84,86
94,95
94,96
102,103
102,104
122,123
122,124
180,181
180,182
193,194
193,195
248,249
248,250
353,354
353,355
359,360
359,361
363,364
363,365
370,371
370,372
384,385
384,386
385,386
385,387
393,394
393,395
397,398
397,399
404,405
404,406
424,425
424,426
-----guardedBy-----
182,195
389,421
388,420
-----guardedByNegation-----
182,254
-----lastLexicalUse-----
182,254
-----jump-----
182,254
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;FieldReference;FunctionCallExpression;IdExpression;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int tcp_handle(tcp_context_t *tcp, int fd,                      struct iovec *rx, struct iovec *tx){	/* Create query processing parameter. */	struct sockaddr_storage ss;	memset(&ss, 0, sizeof(struct sockaddr_storage));	struct process_query_param param = {0};	param.socket = fd;	param.remote = &ss;	param.server = tcp->server;	param.thread_id = tcp->thread_id;	rx->iov_len = KNOT_WIRE_MAX_PKTSIZE;	tx->iov_len = KNOT_WIRE_MAX_PKTSIZE;	/* Receive peer name. */	socklen_t addrlen = sizeof(struct sockaddr_storage);	if (getpeername(fd, (struct sockaddr *)&ss, &addrlen) < 0) {		;	}	/* Timeout. */	struct timeval tmout = { conf()->max_conn_reply, 0 };	/* Receive data. */	int ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout);	if (ret <= 0) {		dbg_net("tcp: client on fd=%d disconnected\n", fd);		if (ret == KNOT_EAGAIN) {			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("connection timed out, address '%s', "			            "timeout %d seconds",			            addr_str, conf()->max_conn_idle);			rcu_read_unlock();		}		return KNOT_ECONNREFUSED;	} else {		rx->iov_len = ret;	}	/* Create packets. */	mm_ctx_t *mm = tcp->overlay.mm;	knot_pkt_t *ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm);	knot_pkt_t *query = knot_pkt_new(rx->iov_base, rx->iov_len, mm);	/* Initialize processing overlay. */	knot_overlay_init(&tcp->overlay, mm);	knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param);	/* Input packet. */	int state = knot_overlay_in(&tcp->overlay, query);	/* Resolve until NOOP or finished. */	ret = KNOT_EOK;	while (state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)) {		state = knot_overlay_out(&tcp->overlay, ans);		/* Send, if response generation passed and wasn't ignored. */		if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}	}	/* Reset after processing. */	knot_overlay_finish(&tcp->overlay);	knot_overlay_deinit(&tcp->overlay);	/* Cleanup. */	knot_pkt_free(&query);	knot_pkt_free(&ans);	return ret;}
static int
tcp_handle(tcp_context_t *tcp, int fd,                      struct iovec *rx, struct iovec *tx)
tcp_handle
tcp_context_t *tcp
tcp_context_t
tcp_context_t
*tcp
*
tcp
int fd
int
fd
fd
struct iovec *rx
struct iovec
iovec
*rx
*
rx
struct iovec *tx
struct iovec
iovec
*tx
*
tx
{	/* Create query processing parameter. */	struct sockaddr_storage ss;	memset(&ss, 0, sizeof(struct sockaddr_storage));	struct process_query_param param = {0};	param.socket = fd;	param.remote = &ss;	param.server = tcp->server;	param.thread_id = tcp->thread_id;	rx->iov_len = KNOT_WIRE_MAX_PKTSIZE;	tx->iov_len = KNOT_WIRE_MAX_PKTSIZE;	/* Receive peer name. */	socklen_t addrlen = sizeof(struct sockaddr_storage);	if (getpeername(fd, (struct sockaddr *)&ss, &addrlen) < 0) {		;	}	/* Timeout. */	struct timeval tmout = { conf()->max_conn_reply, 0 };	/* Receive data. */	int ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout);	if (ret <= 0) {		dbg_net("tcp: client on fd=%d disconnected\n", fd);		if (ret == KNOT_EAGAIN) {			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("connection timed out, address '%s', "			            "timeout %d seconds",			            addr_str, conf()->max_conn_idle);			rcu_read_unlock();		}		return KNOT_ECONNREFUSED;	} else {		rx->iov_len = ret;	}	/* Create packets. */	mm_ctx_t *mm = tcp->overlay.mm;	knot_pkt_t *ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm);	knot_pkt_t *query = knot_pkt_new(rx->iov_base, rx->iov_len, mm);	/* Initialize processing overlay. */	knot_overlay_init(&tcp->overlay, mm);	knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param);	/* Input packet. */	int state = knot_overlay_in(&tcp->overlay, query);	/* Resolve until NOOP or finished. */	ret = KNOT_EOK;	while (state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)) {		state = knot_overlay_out(&tcp->overlay, ans);		/* Send, if response generation passed and wasn't ignored. */		if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}	}	/* Reset after processing. */	knot_overlay_finish(&tcp->overlay);	knot_overlay_deinit(&tcp->overlay);	/* Cleanup. */	knot_pkt_free(&query);	knot_pkt_free(&ans);	return ret;}
struct sockaddr_storage ss;
struct sockaddr_storage ss;
struct sockaddr_storage
sockaddr_storage
ss
ss
memset(&ss, 0, sizeof(struct sockaddr_storage));
memset(&ss, 0, sizeof(struct sockaddr_storage))
memset
memset
&ss
ss
ss
0
sizeof(struct sockaddr_storage)
struct sockaddr_storage
struct sockaddr_storage
sockaddr_storage

struct process_query_param param = {0};
struct process_query_param param = {0};
struct process_query_param
process_query_param
param = {0}
param
= {0}
{0}
0
param.socket = fd;
param.socket = fd
param.socket
param
param
socket
fd
fd
param.remote = &ss;
param.remote = &ss
param.remote
param
param
remote
&ss
ss
ss
param.server = tcp->server;
param.server = tcp->server
param.server
param
param
server
tcp->server
tcp
tcp
server
param.thread_id = tcp->thread_id;
param.thread_id = tcp->thread_id
param.thread_id
param
param
thread_id
tcp->thread_id
tcp
tcp
thread_id
rx->iov_len = KNOT_WIRE_MAX_PKTSIZE;
rx->iov_len = KNOT_WIRE_MAX_PKTSIZE
rx->iov_len
rx
rx
iov_len
KNOT_WIRE_MAX_PKTSIZE
KNOT_WIRE_MAX_PKTSIZE
tx->iov_len = KNOT_WIRE_MAX_PKTSIZE;
tx->iov_len = KNOT_WIRE_MAX_PKTSIZE
tx->iov_len
tx
tx
iov_len
KNOT_WIRE_MAX_PKTSIZE
KNOT_WIRE_MAX_PKTSIZE
socklen_t addrlen = sizeof(struct sockaddr_storage);
socklen_t addrlen = sizeof(struct sockaddr_storage);
socklen_t
socklen_t
addrlen = sizeof(struct sockaddr_storage)
addrlen
= sizeof(struct sockaddr_storage)
sizeof(struct sockaddr_storage)
struct sockaddr_storage
struct sockaddr_storage
sockaddr_storage

if (getpeername(fd, (struct sockaddr *)&ss, &addrlen) < 0) {		;	}
getpeername(fd, (struct sockaddr *)&ss, &addrlen) < 0
getpeername(fd, (struct sockaddr *)&ss, &addrlen)
getpeername
getpeername
fd
fd
(struct sockaddr *)&ss
struct sockaddr *
struct sockaddr
sockaddr
*
*
&ss
ss
ss
&addrlen
addrlen
addrlen
0
{		;	}
;
struct timeval tmout = { conf()->max_conn_reply, 0 };
struct timeval tmout = { conf()->max_conn_reply, 0 };
struct timeval
timeval
tmout = { conf()->max_conn_reply, 0 }
tmout
= { conf()->max_conn_reply, 0 }
{ conf()->max_conn_reply, 0 }
conf()->max_conn_reply
conf()
conf
conf
max_conn_reply
0
int ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout);
int ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout);
int
ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout)
ret
= tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout)
tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout)
tcp_recv_msg
tcp_recv_msg
fd
fd
rx->iov_base
rx
rx
iov_base
rx->iov_len
rx
rx
iov_len
&tmout
tmout
tmout
if (ret <= 0) {		dbg_net("tcp: client on fd=%d disconnected\n", fd);		if (ret == KNOT_EAGAIN) {			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("connection timed out, address '%s', "			            "timeout %d seconds",			            addr_str, conf()->max_conn_idle);			rcu_read_unlock();		}		return KNOT_ECONNREFUSED;	} else {		rx->iov_len = ret;	}
ret <= 0
ret
ret
0
{		dbg_net("tcp: client on fd=%d disconnected\n", fd);		if (ret == KNOT_EAGAIN) {			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("connection timed out, address '%s', "			            "timeout %d seconds",			            addr_str, conf()->max_conn_idle);			rcu_read_unlock();		}		return KNOT_ECONNREFUSED;	}
dbg_net("tcp: client on fd=%d disconnected\n", fd);
dbg_net("tcp: client on fd=%d disconnected\n", fd)
dbg_net
dbg_net
"tcp: client on fd=%d disconnected\n"
fd
fd
if (ret == KNOT_EAGAIN) {			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("connection timed out, address '%s', "			            "timeout %d seconds",			            addr_str, conf()->max_conn_idle);			rcu_read_unlock();		}
ret == KNOT_EAGAIN
ret
ret
KNOT_EAGAIN
KNOT_EAGAIN
{			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("connection timed out, address '%s', "			            "timeout %d seconds",			            addr_str, conf()->max_conn_idle);			rcu_read_unlock();		}
rcu_read_lock();
rcu_read_lock()
rcu_read_lock
rcu_read_lock
char addr_str[SOCKADDR_STRLEN] = {0};
char addr_str[SOCKADDR_STRLEN] = {0};
char
addr_str[SOCKADDR_STRLEN] = {0}
addr_str
[SOCKADDR_STRLEN]
SOCKADDR_STRLEN
SOCKADDR_STRLEN
= {0}
{0}
0
sockaddr_tostr(addr_str, sizeof(addr_str), &ss);
sockaddr_tostr(addr_str, sizeof(addr_str), &ss)
sockaddr_tostr
sockaddr_tostr
addr_str
addr_str
sizeof(addr_str)
(addr_str)
addr_str
addr_str
&ss
ss
ss
log_warning("connection timed out, address '%s', "			            "timeout %d seconds",			            addr_str, conf()->max_conn_idle);
log_warning("connection timed out, address '%s', "			            "timeout %d seconds",			            addr_str, conf()->max_conn_idle)
log_warning
log_warning
"connection timed out, address '%s', "			            "timeout %d seconds"
addr_str
addr_str
conf()->max_conn_idle
conf()
conf
conf
max_conn_idle
rcu_read_unlock();
rcu_read_unlock()
rcu_read_unlock
rcu_read_unlock
return KNOT_ECONNREFUSED;
KNOT_ECONNREFUSED
KNOT_ECONNREFUSED
{		rx->iov_len = ret;	}
rx->iov_len = ret;
rx->iov_len = ret
rx->iov_len
rx
rx
iov_len
ret
ret
mm_ctx_t *mm = tcp->overlay.mm;
mm_ctx_t *mm = tcp->overlay.mm;
mm_ctx_t
mm_ctx_t
*mm = tcp->overlay.mm
*
mm
= tcp->overlay.mm
tcp->overlay.mm
tcp->overlay
tcp
tcp
overlay
mm
knot_pkt_t *ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm);
knot_pkt_t *ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm);
knot_pkt_t
knot_pkt_t
*ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm)
*
ans
= knot_pkt_new(tx->iov_base, tx->iov_len, mm)
knot_pkt_new(tx->iov_base, tx->iov_len, mm)
knot_pkt_new
knot_pkt_new
tx->iov_base
tx
tx
iov_base
tx->iov_len
tx
tx
iov_len
mm
mm
knot_pkt_t *query = knot_pkt_new(rx->iov_base, rx->iov_len, mm);
knot_pkt_t *query = knot_pkt_new(rx->iov_base, rx->iov_len, mm);
knot_pkt_t
knot_pkt_t
*query = knot_pkt_new(rx->iov_base, rx->iov_len, mm)
*
query
= knot_pkt_new(rx->iov_base, rx->iov_len, mm)
knot_pkt_new(rx->iov_base, rx->iov_len, mm)
knot_pkt_new
knot_pkt_new
rx->iov_base
rx
rx
iov_base
rx->iov_len
rx
rx
iov_len
mm
mm
knot_overlay_init(&tcp->overlay, mm);
knot_overlay_init(&tcp->overlay, mm)
knot_overlay_init
knot_overlay_init
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
mm
mm
knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param);
knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param)
knot_overlay_add
knot_overlay_add
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
NS_PROC_QUERY
NS_PROC_QUERY
&param
param
param
int state = knot_overlay_in(&tcp->overlay, query);
int state = knot_overlay_in(&tcp->overlay, query);
int
state = knot_overlay_in(&tcp->overlay, query)
state
= knot_overlay_in(&tcp->overlay, query)
knot_overlay_in(&tcp->overlay, query)
knot_overlay_in
knot_overlay_in
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
query
query
ret = KNOT_EOK;
ret = KNOT_EOK
ret
ret
KNOT_EOK
KNOT_EOK
while (state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)) {		state = knot_overlay_out(&tcp->overlay, ans);		/* Send, if response generation passed and wasn't ignored. */		if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}	}
state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)
state
state
(KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)
KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL
KNOT_NS_PROC_FULL
KNOT_NS_PROC_FULL
KNOT_NS_PROC_FAIL
KNOT_NS_PROC_FAIL
{		state = knot_overlay_out(&tcp->overlay, ans);		/* Send, if response generation passed and wasn't ignored. */		if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}	}
state = knot_overlay_out(&tcp->overlay, ans);
state = knot_overlay_out(&tcp->overlay, ans)
state
state
knot_overlay_out(&tcp->overlay, ans)
knot_overlay_out
knot_overlay_out
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
ans
ans
if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}
ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))
ans->size > 0
ans->size
ans
ans
size
0
!(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))
(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))
state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
state
state
(KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP
KNOT_NS_PROC_FAIL
KNOT_NS_PROC_FAIL
KNOT_NS_PROC_NOOP
KNOT_NS_PROC_NOOP
{			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}
if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}
tcp_send_msg(fd, ans->wire, ans->size) != ans->size
tcp_send_msg(fd, ans->wire, ans->size)
tcp_send_msg
tcp_send_msg
fd
fd
ans->wire
ans
ans
wire
ans->size
ans
ans
size
ans->size
ans
ans
size
{				ret = KNOT_ECONNREFUSED;				break;			}
ret = KNOT_ECONNREFUSED;
ret = KNOT_ECONNREFUSED
ret
ret
KNOT_ECONNREFUSED
KNOT_ECONNREFUSED
break;
knot_overlay_finish(&tcp->overlay);
knot_overlay_finish(&tcp->overlay)
knot_overlay_finish
knot_overlay_finish
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
knot_overlay_deinit(&tcp->overlay);
knot_overlay_deinit(&tcp->overlay)
knot_overlay_deinit
knot_overlay_deinit
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
knot_pkt_free(&query);
knot_pkt_free(&query)
knot_pkt_free
knot_pkt_free
&query
query
query
knot_pkt_free(&ans);
knot_pkt_free(&ans)
knot_pkt_free
knot_pkt_free
&ans
ans
ans
return ret;
ret
ret
-----joern-----
(149,221,0)
(143,38,0)
(232,167,0)
(182,34,0)
(143,118,0)
(191,180,0)
(32,122,0)
(108,167,0)
(232,138,0)
(143,114,0)
(136,227,0)
(239,138,0)
(43,210,0)
(71,40,0)
(112,197,0)
(133,166,0)
(59,109,0)
(94,122,0)
(219,191,0)
(159,114,0)
(193,216,0)
(235,28,0)
(93,39,0)
(230,0,0)
(170,177,0)
(138,232,0)
(16,236,0)
(78,17,0)
(148,115,0)
(83,236,0)
(66,122,0)
(92,113,0)
(123,229,0)
(241,186,0)
(79,239,0)
(165,113,0)
(215,111,0)
(109,180,0)
(207,122,0)
(140,210,0)
(9,238,0)
(42,218,0)
(18,122,0)
(177,186,0)
(157,42,0)
(81,50,0)
(197,18,0)
(30,120,0)
(187,122,0)
(77,156,0)
(15,68,0)
(64,182,0)
(190,24,0)
(11,238,0)
(185,238,0)
(91,118,0)
(21,122,0)
(166,115,0)
(169,208,0)
(67,34,0)
(8,115,0)
(39,34,0)
(56,164,0)
(34,138,0)
(82,19,0)
(25,122,0)
(104,34,0)
(71,231,0)
(24,122,0)
(200,190,0)
(119,188,0)
(89,122,0)
(231,34,0)
(5,82,0)
(213,122,0)
(153,241,0)
(202,93,0)
(163,106,0)
(32,176,0)
(85,88,0)
(28,97,0)
(238,185,0)
(4,92,0)
(125,210,0)
(111,197,0)
(111,177,0)
(171,185,0)
(222,83,0)
(131,62,0)
(130,149,0)
(114,143,0)
(229,218,0)
(95,223,0)
(117,83,0)
(94,92,0)
(147,92,0)
(169,165,0)
(84,114,0)
(199,118,0)
(198,110,0)
(238,9,0)
(177,47,0)
(241,199,0)
(182,238,0)
(128,54,0)
(62,186,0)
(14,101,0)
(150,141,0)
(116,122,0)
(65,94,0)
(202,55,0)
(156,113,0)
(70,67,0)
(141,45,0)
(185,34,0)
(75,221,0)
(227,154,0)
(17,82,0)
(204,177,0)
(196,65,0)
(104,9,0)
(172,156,0)
(26,222,0)
(161,124,0)
(129,182,0)
(138,227,0)
(65,18,0)
(205,38,0)
(155,122,0)
(221,44,0)
(165,169,0)
(164,99,0)
(8,186,0)
(188,120,0)
(120,50,0)
(167,122,0)
(96,39,0)
(37,193,0)
(229,113,0)
(126,32,0)
(138,34,0)
(214,110,0)
(70,122,0)
(33,187,0)
(118,122,0)
(188,164,0)
(3,86,0)
(86,99,0)
(115,24,0)
(135,65,0)
(92,94,0)
(238,182,0)
(73,223,0)
(111,191,0)
(230,217,0)
(127,104,0)
(203,232,0)
(164,188,0)
(237,118,0)
(105,62,0)
(173,47,0)
(184,24,0)
(53,88,0)
(223,113,0)
(149,122,0)
(178,45,0)
(58,101,0)
(154,227,0)
(53,71,0)
(46,194,0)
(220,17,0)
(238,99,0)
(239,97,0)
(7,19,0)
(19,128,0)
(6,164,0)
(29,122,0)
(190,207,0)
(197,216,0)
(60,122,0)
(109,113,0)
(38,187,0)
(210,98,0)
(10,83,0)
(62,143,0)
(132,104,0)
(47,122,0)
(201,107,0)
(77,213,0)
(151,28,0)
(231,71,0)
(51,18,0)
(115,8,0)
(2,43,0)
(98,236,0)
(67,70,0)
(154,107,0)
(72,68,0)
(210,43,0)
(218,42,0)
(101,58,0)
(156,77,0)
(31,241,0)
(80,231,0)
(83,222,0)
(48,39,0)
(134,44,0)
(106,208,0)
(164,230,0)
(0,230,0)
(102,236,0)
(34,122,0)
(209,109,0)
(8,47,0)
(234,88,0)
(208,106,0)
(63,138,0)
(115,227,0)
(50,81,0)
(20,91,0)
(141,99,0)
(8,199,0)
(158,40,0)
(55,202,0)
(145,91,0)
(111,28,0)
(107,113,0)
(179,222,0)
(74,51,0)
(51,86,0)
(114,186,0)
(86,122,0)
(142,236,0)
(22,225,0)
(38,143,0)
(183,58,0)
(54,128,0)
(82,71,0)
(207,190,0)
(82,17,0)
(168,128,0)
(53,55,0)
(118,143,0)
(210,125,0)
(175,165,0)
(125,98,0)
(23,185,0)
(206,225,0)
(128,19,0)
(41,166,0)
(164,6,0)
(106,18,0)
(227,122,0)
(181,8,0)
(211,154,0)
(32,124,0)
(76,8,0)
(223,54,0)
(28,167,0)
(110,198,0)
(216,193,0)
(208,169,0)
(111,51,0)
(176,13,0)
(54,223,0)
(213,77,0)
(93,202,0)
(149,225,0)
(176,32,0)
(143,99,0)
(83,98,0)
(103,110,0)
(216,122,0)
(225,122,0)
(27,107,0)
(101,113,0)
(146,122,0)
(233,232,0)
(110,113,0)
(121,197,0)
(90,125,0)
(226,18,0)
(50,120,0)
(174,208,0)
(162,111,0)
(88,53,0)
(107,154,0)
(231,198,0)
(228,229,0)
(12,239,0)
(52,98,0)
(111,45,0)
(208,122,0)
(195,156,0)
(230,164,0)
(183,122,0)
(1,122,0)
(212,165,0)
(19,122,0)
(39,93,0)
(180,109,0)
(114,47,0)
(57,122,0)
(199,35,0)
(87,6,0)
(240,0,0)
(143,62,0)
(191,18,0)
(42,122,0)
(100,93,0)
(152,101,0)
(215,149,0)
(124,32,0)
(9,104,0)
(232,97,0)
(111,65,0)
(42,227,0)
(180,122,0)
(13,176,0)
(160,53,0)
(139,51,0)
(55,53,0)
(218,229,0)
(128,24,0)
(189,143,0)
(120,122,0)
(222,179,0)
(138,239,0)
(137,67,0)
(217,230,0)
(58,183,0)
(69,71,0)
(144,221,0)
(24,115,0)
(166,186,0)
(224,191,0)
(115,166,0)
(49,122,0)
(192,141,0)
(68,118,0)
(36,199,0)
(61,34,0)
(210,236,0)
(198,231,0)
(55,53,1)
(160,93,1)
(232,97,1)
(227,154,1)
(218,229,1)
(162,91,1)
(114,47,1)
(128,24,1)
(59,191,1)
(112,86,1)
(164,99,1)
(171,23,1)
(231,80,1)
(3,51,1)
(220,5,1)
(238,99,1)
(239,97,1)
(154,211,1)
(52,102,1)
(38,205,1)
(149,130,1)
(79,12,1)
(193,37,1)
(24,115,1)
(232,167,1)
(62,186,1)
(182,34,1)
(106,18,1)
(19,128,1)
(128,54,1)
(5,9,1)
(20,145,1)
(127,238,1)
(176,126,1)
(33,6,1)
(64,185,1)
(93,100,1)
(31,153,1)
(152,82,1)
(154,107,1)
(86,99,1)
(41,184,1)
(210,125,1)
(238,182,1)
(71,231,1)
(117,10,1)
(80,198,1)
(0,240,1)
(150,192,1)
(120,50,1)
(123,228,1)
(104,34,1)
(134,221,1)
(38,187,1)
(100,39,1)
(6,164,1)
(27,136,1)
(39,48,1)
(50,81,1)
(151,235,1)
(231,34,1)
(103,69,1)
(176,13,1)
(181,76,1)
(135,196,1)
(65,18,1)
(34,138,1)
(199,36,1)
(233,203,1)
(14,152,1)
(36,241,1)
(111,65,1)
(23,11,1)
(139,74,1)
(166,133,1)
(208,106,1)
(209,59,1)
(223,113,1)
(8,47,1)
(237,187,1)
(30,167,1)
(68,72,1)
(131,189,1)
(125,90,1)
(208,169,1)
(22,206,1)
(200,213,1)
(179,117,1)
(190,200,1)
(138,232,1)
(111,177,1)
(183,58,1)
(107,113,1)
(86,3,1)
(98,52,1)
(73,7,1)
(4,65,1)
(168,54,1)
(82,17,1)
(229,123,1)
(111,51,1)
(124,161,1)
(149,225,1)
(177,170,1)
(231,198,1)
(219,224,1)
(43,2,1)
(143,62,1)
(197,121,1)
(77,156,1)
(111,197,1)
(58,101,1)
(185,171,1)
(8,181,1)
(32,176,1)
(156,172,1)
(85,234,1)
(167,108,1)
(111,28,1)
(53,71,1)
(9,238,1)
(5,202,1)
(53,88,1)
(101,113,1)
(222,179,1)
(143,99,1)
(159,84,1)
(6,87,1)
(106,163,1)
(125,98,1)
(5,225,1)
(107,201,1)
(204,94,1)
(153,68,1)
(9,104,1)
(42,218,1)
(8,186,1)
(230,217,1)
(96,71,1)
(163,174,1)
(70,67,1)
(115,227,1)
(192,68,1)
(234,160,1)
(92,147,1)
(138,239,1)
(142,83,1)
(129,64,1)
(238,185,1)
(164,230,1)
(115,8,1)
(65,135,1)
(39,34,1)
(69,82,1)
(28,151,1)
(175,42,1)
(47,173,1)
(93,39,1)
(101,14,1)
(11,202,1)
(7,208,1)
(37,197,1)
(115,166,1)
(195,183,1)
(51,139,1)
(197,18,1)
(92,113,1)
(144,75,1)
(26,179,1)
(224,216,1)
(240,56,1)
(177,186,1)
(75,9,1)
(114,186,1)
(91,20,1)
(213,77,1)
(68,118,1)
(145,141,1)
(156,113,1)
(104,132,1)
(210,43,1)
(162,142,1)
(148,8,1)
(216,193,1)
(90,140,1)
(201,27,1)
(198,110,1)
(206,19,1)
(211,107,1)
(165,212,1)
(182,129,1)
(203,239,1)
(232,233,1)
(87,164,1)
(189,237,1)
(62,105,1)
(132,127,1)
(215,111,1)
(166,186,1)
(174,169,1)
(110,113,1)
(239,79,1)
(67,137,1)
(205,114,1)
(114,159,1)
(221,144,1)
(235,47,1)
(202,55,1)
(199,118,1)
(84,62,1)
(214,103,1)
(228,24,1)
(226,32,1)
(172,195,1)
(102,91,1)
(138,63,1)
(138,227,1)
(42,157,1)
(83,222,1)
(188,119,1)
(169,165,1)
(202,93,1)
(109,209,1)
(42,227,1)
(50,30,1)
(149,221,1)
(82,19,1)
(222,26,1)
(157,218,1)
(78,220,1)
(118,143,1)
(130,70,1)
(74,18,1)
(170,204,1)
(140,98,1)
(191,219,1)
(241,186,1)
(94,92,1)
(54,223,1)
(51,18,1)
(196,180,1)
(12,61,1)
(95,73,1)
(56,120,1)
(215,149,1)
(164,188,1)
(10,210,1)
(108,28,1)
(187,33,1)
(91,118,1)
(207,190,1)
(63,232,1)
(28,97,1)
(230,0,1)
(185,34,1)
(32,124,1)
(119,230,1)
(210,98,1)
(212,175,1)
(15,118,1)
(147,4,1)
(2,125,1)
(8,199,1)
(190,24,1)
(141,150,1)
(180,109,1)
(143,38,1)
(136,199,1)
(188,120,1)
(76,166,1)
(121,112,1)
(133,41,1)
(229,113,1)
(223,95,1)
(111,162,1)
(72,15,1)
(143,114,1)
(67,34,1)
(173,177,1)
(184,34,1)
(115,148,1)
(83,98,1)
(191,18,1)
(111,191,1)
(165,113,1)
(241,31,1)
(82,71,1)
(105,131,1)
(126,124,1)
(137,207,1)
(128,168,1)
(48,96,1)
(225,22,1)
(88,85,1)
(109,113,1)
(110,214,1)
(61,227,1)
(141,99,1)
(17,78,1)
(152,134,1)
(18,226,1)
(80,82,2)
(91,68,2)
(78,9,2)
(207,68,2)
(166,68,2)
(115,166,2)
(123,68,2)
(9,238,2)
(198,110,2)
(5,9,2)
(210,125,2)
(171,202,2)
(9,202,2)
(103,82,2)
(221,9,2)
(175,68,2)
(82,19,2)
(55,53,2)
(174,68,2)
(90,91,2)
(58,101,2)
(202,93,2)
(120,50,2)
(164,99,2)
(239,68,2)
(136,68,2)
(17,9,2)
(67,34,2)
(115,227,2)
(200,68,2)
(169,68,2)
(83,98,2)
(115,68,2)
(5,68,2)
(100,82,2)
(213,68,2)
(24,115,2)
(223,68,2)
(227,154,2)
(96,82,2)
(78,68,2)
(231,82,2)
(69,82,2)
(28,97,2)
(234,93,2)
(150,68,2)
(82,68,2)
(232,167,2)
(36,68,2)
(11,202,2)
(144,9,2)
(93,82,2)
(168,68,2)
(199,118,2)
(50,81,2)
(93,39,2)
(104,34,2)
(102,91,2)
(215,149,2)
(148,68,2)
(137,68,2)
(82,9,2)
(206,68,2)
(163,68,2)
(95,68,2)
(176,13,2)
(83,91,2)
(98,91,2)
(111,65,2)
(141,99,2)
(199,68,2)
(79,68,2)
(67,68,2)
(180,109,2)
(218,229,2)
(157,68,2)
(106,68,2)
(211,68,2)
(190,24,2)
(54,223,2)
(218,68,2)
(65,18,2)
(162,68,2)
(111,191,2)
(241,68,2)
(101,68,2)
(64,202,2)
(185,202,2)
(166,186,2)
(128,54,2)
(238,182,2)
(165,68,2)
(76,68,2)
(61,68,2)
(184,68,2)
(216,193,2)
(39,34,2)
(138,68,2)
(197,18,2)
(48,82,2)
(138,227,2)
(214,82,2)
(229,113,2)
(83,222,2)
(188,120,2)
(227,68,2)
(153,68,2)
(141,68,2)
(154,68,2)
(8,47,2)
(78,202,2)
(222,179,2)
(19,128,2)
(110,82,2)
(24,68,2)
(71,231,2)
(143,114,2)
(53,71,2)
(8,199,2)
(14,68,2)
(225,68,2)
(192,68,2)
(39,82,2)
(104,202,2)
(42,227,2)
(142,91,2)
(42,218,2)
(154,107,2)
(111,28,2)
(62,186,2)
(106,18,2)
(208,169,2)
(42,68,2)
(12,68,2)
(88,93,2)
(143,62,2)
(232,68,2)
(77,68,2)
(181,68,2)
(22,68,2)
(114,47,2)
(202,82,2)
(34,138,2)
(92,113,2)
(32,176,2)
(91,118,2)
(109,113,2)
(195,68,2)
(111,197,2)
(140,91,2)
(164,188,2)
(183,68,2)
(38,187,2)
(128,68,2)
(239,97,2)
(51,18,2)
(133,68,2)
(220,202,2)
(73,68,2)
(114,186,2)
(101,113,2)
(111,68,2)
(26,91,2)
(138,232,2)
(220,68,2)
(185,34,2)
(207,190,2)
(134,9,2)
(63,68,2)
(208,68,2)
(19,68,2)
(43,91,2)
(215,111,2)
(233,68,2)
(53,93,2)
(7,68,2)
(94,92,2)
(54,68,2)
(210,91,2)
(231,198,2)
(149,68,2)
(231,34,2)
(165,113,2)
(86,99,2)
(130,68,2)
(156,113,2)
(115,8,2)
(164,230,2)
(41,68,2)
(132,202,2)
(212,68,2)
(201,68,2)
(2,91,2)
(70,67,2)
(128,24,2)
(160,93,2)
(177,186,2)
(8,68,2)
(127,202,2)
(6,164,2)
(149,225,2)
(145,68,2)
(230,0,2)
(228,68,2)
(58,68,2)
(23,202,2)
(191,18,2)
(143,38,2)
(229,68,2)
(70,68,2)
(125,98,2)
(107,113,2)
(210,43,2)
(111,51,2)
(232,97,2)
(183,58,2)
(31,68,2)
(210,98,2)
(85,93,2)
(82,202,2)
(17,202,2)
(152,68,2)
(52,91,2)
(238,185,2)
(8,186,2)
(20,68,2)
(82,71,2)
(169,165,2)
(238,202,2)
(55,93,2)
(107,68,2)
(222,91,2)
(241,186,2)
(149,221,2)
(179,91,2)
(27,68,2)
(82,17,2)
(111,177,2)
(182,202,2)
(53,88,2)
(203,68,2)
(213,77,2)
(117,91,2)
(34,68,2)
(172,68,2)
(190,68,2)
(129,202,2)
(202,55,2)
(71,82,2)
(182,34,2)
(156,68,2)
(110,113,2)
(138,239,2)
(32,124,2)
(125,91,2)
(77,156,2)
(220,9,2)
(17,68,2)
(143,99,2)
(9,104,2)
(230,217,2)
(68,118,2)
(238,99,2)
(208,106,2)
(10,91,2)
(198,82,2)
(223,113,2)
(75,9,2)
(5,202,2)
(118,143,2)
-----------------------------------
(0,&ss)
(1,state)
(2,ss)
(3,fd)
(4,tcp)
(5,state)
(6,getpeername(fd, (struct sockaddr *)
(7,state)
(8,rx->iov_len)
(9,tcp_send_msg(fd, ans->wire, ans->size)
(10,"connection timed out, address \'%s\', "\n\\n\\t\\t\\t            "timeout %d seconds")
(11,fd)
(12,tx)
(13,struct sockaddr_storage)
(14,overlay)
(15,ret)
(16,addr_str)
(17,KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)
(18,param = {0})
(19,state = knot_overlay_in(&tcp->overlay, query)
(20,KNOT_EAGAIN)
(21,if (ret <= 0)
(22,KNOT_EOK)
(23,ans)
(24,*query = knot_pkt_new(rx->iov_base, rx->iov_len, mm)
(25,ret)
(26,max_conn_idle)
(27,tcp)
(28,tx->iov_len)
(29,tmout)
(30,addrlen)
(31,iov_len)
(32,memset(&ss, 0, sizeof(struct sockaddr_storage)
(33,tmout)
(34,*ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm)
(35,)
(36,ret)
(37,ss)
(38,&tmout)
(39,ans->size)
(40,)
(41,rx)
(42,knot_overlay_init(&tcp->overlay, mm)
(43,&ss)
(44,)
(45,)
(46,if (tcp_send_msg(fd, ans->wire, ans->size)
(47,rx->iov_len = KNOT_WIRE_MAX_PKTSIZE)
(48,size)
(49,if (getpeername(fd, (struct sockaddr *)
(50,sizeof(struct sockaddr_storage)
(51,param.socket)
(52,addr_str)
(53,state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
(54,&tcp->overlay)
(55,!(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
(56,fd)
(57,ss)
(58,&tcp->overlay)
(59,tcp)
(60,ans)
(61,ans)
(62,rx->iov_base)
(63,mm)
(64,ans)
(65,param.thread_id)
(66,mm)
(67,&ans)
(68,ret <= 0)
(69,state)
(70,knot_pkt_free(&ans)
(71,state = knot_overlay_out(&tcp->overlay, ans)
(72,0)
(73,tcp)
(74,param)
(75,ret)
(76,rx)
(77,&tcp->overlay)
(78,KNOT_NS_PROC_FAIL)
(79,iov_base)
(80,ans)
(81,struct sockaddr_storage)
(82,state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)
(83,log_warning("connection timed out, address \'%s\', "\n\\n\\t\\t\\t            "timeout %d seconds",\n\\n\\t\\t\\t            addr_str, conf()
(84,rx)
(85,KNOT_NS_PROC_NOOP)
(86,param.socket = fd)
(87,0)
(88,KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
(89,query)
(90,addr_str)
(91,ret == KNOT_EAGAIN)
(92,tcp->thread_id)
(93,ans->size > 0)
(94,param.thread_id = tcp->thread_id)
(95,overlay)
(96,ans)
(97,struct iovec *tx)
(98,addr_str[SOCKADDR_STRLEN] = {0})
(99,int fd)
(100,0)
(101,tcp->overlay)
(102,rcu_read_lock()
(103,tcp)
(104,ans->size)
(105,iov_base)
(106,&param)
(107,tcp->overlay)
(108,KNOT_WIRE_MAX_PKTSIZE)
(109,tcp->server)
(110,tcp->overlay)
(111,return KNOT_ECONNREFUSED;)
(112,param)
(113,tcp_context_t *tcp)
(114,rx->iov_len)
(115,knot_pkt_new(rx->iov_base, rx->iov_len, mm)
(116,while (state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)
(117,addr_str)
(118,ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout)
(119,addrlen)
(120,addrlen = sizeof(struct sockaddr_storage)
(121,remote)
(122,)
(123,overlay)
(124,&ss)
(125,sizeof(addr_str)
(126,0)
(127,ans)
(128,knot_overlay_in(&tcp->overlay, query)
(129,size)
(130,ret)
(131,rx)
(132,size)
(133,iov_base)
(134,break;)
(135,thread_id)
(136,mm)
(137,ans)
(138,knot_pkt_new(tx->iov_base, tx->iov_len, mm)
(139,socket)
(140,addr_str)
(141,dbg_net("tcp: client on fd=%d disconnected\\n", fd)
(142,rcu_read_unlock()
(143,tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout)
(144,KNOT_ECONNREFUSED)
(145,ret)
(146,addrlen)
(147,thread_id)
(148,mm)
(149,return ret;)
(150,fd)
(151,iov_len)
(152,tcp)
(153,rx)
(154,tcp->overlay.mm)
(155,param)
(156,tcp->overlay)
(157,mm)
(158,if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
(159,iov_len)
(160,state)
(161,ss)
(162,KNOT_ECONNREFUSED)
(163,param)
(164,getpeername(fd, (struct sockaddr *)
(165,tcp->overlay)
(166,rx->iov_base)
(167,tx->iov_len = KNOT_WIRE_MAX_PKTSIZE)
(168,query)
(169,&tcp->overlay)
(170,iov_len)
(171,wire)
(172,overlay)
(173,KNOT_WIRE_MAX_PKTSIZE)
(174,NS_PROC_QUERY)
(175,tcp)
(176,sizeof(struct sockaddr_storage)
(177,rx->iov_len)
(178,if (ret == KNOT_EAGAIN)
(179,conf()
(180,param.server = tcp->server)
(181,iov_len)
(182,ans->size)
(183,knot_overlay_finish(&tcp->overlay)
(184,query)
(185,ans->wire)
(186,struct iovec *rx)
(187,tmout = { conf()
(188,&addrlen)
(189,fd)
(190,&query)
(191,param.server)
(192,"tcp: client on fd=%d disconnected\\n")
(193,&ss)
(194,)
(195,tcp)
(196,param)
(197,param.remote)
(198,&tcp->overlay)
(199,rx->iov_len = ret)
(200,query)
(201,overlay)
(202,ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
(203,tx)
(204,rx)
(205,tmout)
(206,ret)
(207,knot_pkt_free(&query)
(208,knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param)
(209,server)
(210,sockaddr_tostr(addr_str, sizeof(addr_str)
(211,mm)
(212,overlay)
(213,knot_overlay_deinit(&tcp->overlay)
(214,overlay)
(215,RET)
(216,param.remote = &ss)
(217,struct sockaddr *)
(218,&tcp->overlay)
(219,server)
(220,KNOT_NS_PROC_FULL)
(221,ret = KNOT_ECONNREFUSED)
(222,conf()
(223,tcp->overlay)
(224,param)
(225,ret = KNOT_EOK)
(226,param)
(227,*mm = tcp->overlay.mm)
(228,tcp)
(229,tcp->overlay)
(230,(struct sockaddr *)
(231,knot_overlay_out(&tcp->overlay, ans)
(232,tx->iov_len)
(233,iov_len)
(234,KNOT_NS_PROC_FAIL)
(235,tx)
(236,)
(237,ret)
(238,tcp_send_msg(fd, ans->wire, ans->size)
(239,tx->iov_base)
(240,ss)
(241,rx->iov_len)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^