-----label-----
1
-----code-----
int sasl_server_dispatch(SASLServer *sasl, const char *input, size_t n_input, const char **outputp, size_t *n_outputp) {
        const char *cmd, *arg;
        size_t n_cmd, n_arg;

        sasl_split(input, n_input, &cmd, &n_cmd, &arg, &n_arg);

        switch (sasl->state) {
        case SASL_SERVER_STATE_INIT:
                /* first byte must be the zero-byte */
                if (n_cmd < 1 || *cmd)
                        return SASL_E_PROTOCOL_VIOLATION;

                --n_cmd;
                ++cmd;
                /* fallthrough */
        case SASL_SERVER_STATE_AUTH:
                if (n_cmd == strlen("AUTH") && !strncmp(cmd, "AUTH", n_cmd)) {
                        sasl_server_handle_auth(sasl, arg, n_arg, outputp, n_outputp);
                } else if (n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) {
                        *outputp = "REJECTED EXTERNAL";
                        *n_outputp = strlen("REJECTED EXTERNAL");
                        sasl->state = SASL_SERVER_STATE_AUTH;
                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {
                        return SASL_E_PROTOCOL_VIOLATION;
                } else {
                        *outputp = "ERROR";
                        *n_outputp = strlen("ERROR");
                }

                break;

        case SASL_SERVER_STATE_CHALLENGE:
                if (n_cmd == strlen("DATA") && !strncmp(cmd, "DATA", n_cmd)) {
                        sasl_server_handle_data(sasl, arg, n_arg, outputp, n_outputp);
                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||
                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {
                        *outputp = "REJECTED EXTERNAL";
                        *n_outputp = strlen("REJECTED EXTERNAL");
                        sasl->state = SASL_SERVER_STATE_AUTH;
                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {
                        return SASL_E_PROTOCOL_VIOLATION;
                } else {
                        *outputp = "ERROR";
                        *n_outputp = strlen("ERROR");
                }

                break;

        case SASL_SERVER_STATE_AUTHENTICATED:
        case SASL_SERVER_STATE_NEGOTIATED_FDS:
                if (n_cmd == strlen("NEGOTIATE_UNIX_FD") && !strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd) && !n_arg) {
                        *outputp = "AGREE_UNIX_FD";
                        *n_outputp = strlen("AGREE_UNIX_FD");
                        sasl->fds_allowed = true;
                        sasl->state = SASL_SERVER_STATE_NEGOTIATED_FDS;
                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {
                        *outputp = NULL;
                        *n_outputp = 0;
                        sasl->state = SASL_SERVER_STATE_DONE;
                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||
                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {
                        *outputp = "REJECTED EXTERNAL";
                        *n_outputp = strlen("REJECTED EXTERNAL");
                        sasl->fds_allowed = false;
                        sasl->state = SASL_SERVER_STATE_AUTH;
                } else {
                        *outputp = "ERROR";
                        *n_outputp = strlen("ERROR");
                }

                break;

        default:
                return error_origin(-ENOTRECOVERABLE);
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
17,18
19,20
21,22
21,23
23,24
23,25
23,26
27,28
27,29
28,29
30,31
30,32
33,34
33,35
33,36
33,37
33,38
34,35
35,36
35,37
35,38
37,38
37,39
40,41
40,42
43,44
44,45
44,46
44,47
45,46
47,48
49,50
51,52
52,53
52,54
52,55
52,56
52,57
52,58
52,59
53,54
55,56
57,58
59,60
60,61
62,63
63,64
65,66
66,67
68,69
69,70
71,72
71,73
72,73
72,74
73,74
76,77
76,78
76,79
76,80
76,81
76,82
76,83
76,84
76,85
76,86
76,87
76,88
76,89
76,90
76,91
76,92
77,78
78,79
80,81
80,82
81,82
81,83
82,83
82,84
83,84
86,87
87,88
89,90
90,91
92,93
93,94
94,95
96,97
97,98
98,99
100,101
101,102
103,104
103,105
103,106
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
112,113
113,114
113,115
113,116
113,117
114,115
116,117
119,120
121,122
122,123
123,124
123,125
123,126
123,127
123,128
123,129
124,125
126,127
128,129
130,131
132,133
134,135
136,137
136,138
136,139
137,138
137,139
138,139
138,140
139,140
141,142
141,143
142,143
145,146
146,147
146,148
146,149
146,150
147,148
149,150
152,153
154,155
154,156
154,157
155,156
156,157
156,158
157,158
158,159
161,162
162,163
162,164
163,164
164,165
166,167
166,168
167,168
170,171
171,172
171,173
172,173
172,174
173,174
176,177
178,179
178,180
178,181
179,180
179,181
180,181
180,182
181,182
181,183
182,183
184,185
184,186
185,186
188,189
189,190
189,191
189,192
189,193
190,191
192,193
195,196
197,198
198,199
200,201
201,202
202,203
204,205
204,206
205,206
206,207
206,208
207,208
208,209
211,212
212,213
212,214
213,214
214,215
216,217
216,218
217,218
221,222
222,223
224,225
224,226
224,227
225,226
225,227
226,227
226,228
227,228
229,230
229,231
230,231
233,234
234,235
234,236
234,237
234,238
235,236
237,238
240,241
242,243
243,244
244,245
244,246
244,247
244,248
244,249
244,250
245,246
247,248
249,250
251,252
253,254
255,256
257,258
257,259
257,260
258,259
258,260
259,260
260,261
260,262
261,262
261,263
262,263
264,265
264,266
265,266
268,269
269,270
269,271
269,272
269,273
270,271
272,273
275,276
277,278
278,279
278,280
279,280
279,281
280,281
280,282
281,282
283,284
283,285
284,285
287,288
288,289
288,290
288,291
288,292
289,290
291,292
294,295
296,297
297,298
299,300
299,301
299,302
300,301
301,302
301,303
302,303
303,304
306,307
307,308
307,309
308,309
309,310
311,312
311,313
312,313
315,316
316,317
316,318
317,318
317,319
318,319
321,322
323,324
323,325
323,326
324,325
324,326
325,326
325,327
326,327
326,328
327,328
329,330
329,331
330,331
333,334
334,335
334,336
334,337
334,338
335,336
337,338
340,341
342,343
343,344
345,346
346,347
347,348
349,350
349,351
350,351
351,352
351,353
352,353
353,354
356,357
357,358
357,359
358,359
359,360
361,362
361,363
362,363
366,367
367,368
369,370
370,371
372,373
372,374
372,375
373,374
373,375
374,375
374,376
375,376
375,377
376,377
378,379
378,380
379,380
382,383
383,384
383,385
383,386
383,387
384,385
386,387
389,390
391,392
392,393
394,395
394,396
394,397
394,398
395,396
396,397
396,398
397,398
398,399
401,402
402,403
402,404
403,404
404,405
406,407
406,408
407,408
410,411
411,412
411,413
412,413
412,414
413,414
417,418
418,419
418,420
419,420
419,421
420,421
423,424
425,426
425,427
425,428
426,427
426,428
427,428
427,429
428,429
428,430
429,430
431,432
431,433
432,433
435,436
436,437
436,438
436,439
436,440
437,438
439,440
442,443
444,445
445,446
447,448
447,449
447,450
448,449
449,450
449,451
450,451
451,452
453,454
455,456
456,457
456,458
457,458
458,459
461,462
462,463
462,464
463,464
463,465
464,465
467,468
469,470
469,471
469,472
470,471
470,472
471,472
472,473
472,474
473,474
473,475
474,475
476,477
476,478
477,478
480,481
481,482
481,483
481,484
481,485
482,483
484,485
487,488
489,490
490,491
490,492
491,492
491,493
492,493
492,494
493,494
495,496
495,497
496,497
499,500
500,501
500,502
500,503
500,504
501,502
503,504
506,507
508,509
509,510
511,512
511,513
511,514
511,515
512,513
513,514
513,515
514,515
515,516
518,519
519,520
519,521
520,521
521,522
523,524
523,525
524,525
527,528
528,529
528,530
529,530
529,531
530,531
534,535
535,536
535,537
536,537
536,538
537,538
540,541
542,543
542,544
543,544
544,545
544,546
545,546
546,547
549,550
550,551
550,552
551,552
552,553
554,555
554,556
555,556
560,561
561,562
561,563
562,563
564,565
565,566
567,568
-----nextToken-----
2,4,7,9,10,12,14,15,18,20,22,24,25,26,29,31,32,36,38,39,41,42,46,48,50,54,56,58,61,64,67,70,74,75,79,84,85,88,91,95,99,102,107,110,111,115,117,118,120,125,127,129,131,133,135,140,143,144,148,150,151,153,159,160,165,168,169,174,175,177,183,186,187,191,193,194,196,199,203,209,210,215,218,219,220,223,228,231,232,236,238,239,241,246,248,250,252,254,256,263,266,267,271,273,274,276,282,285,286,290,292,293,295,298,304,305,310,313,314,319,320,322,328,331,332,336,338,339,341,344,348,354,355,360,363,364,365,368,371,377,380,381,385,387,388,390,393,399,400,405,408,409,414,415,416,421,422,424,430,433,434,438,440,441,443,446,452,454,459,460,465,466,468,475,478,479,483,485,486,488,494,497,498,502,504,505,507,510,516,517,522,525,526,531,532,533,538,539,541,547,548,553,556,557,558,559,563,566,568
-----computeFrom-----
81,82
81,83
82,83
82,84
104,105
104,106
105,106
105,107
137,138
137,139
138,139
138,140
156,157
156,158
162,163
162,164
171,172
171,173
179,180
179,181
180,181
180,182
181,182
181,183
206,207
206,208
212,213
212,214
225,226
225,227
226,227
226,228
258,259
258,260
260,261
260,262
261,262
261,263
278,279
278,280
279,280
279,281
280,281
280,282
301,302
301,303
307,308
307,309
316,317
316,318
324,325
324,326
325,326
325,327
326,327
326,328
351,352
351,353
357,358
357,359
373,374
373,375
374,375
374,376
375,376
375,377
396,397
396,398
402,403
402,404
411,412
411,413
418,419
418,420
426,427
426,428
427,428
427,429
428,429
428,430
449,450
449,451
456,457
456,458
462,463
462,464
470,471
470,472
472,473
472,474
473,474
473,475
490,491
490,492
491,492
491,493
492,493
492,494
513,514
513,515
519,520
519,521
528,529
528,530
535,536
535,537
544,545
544,546
550,551
550,552
-----guardedBy-----
143,168
285,313
380,408
497,525
-----guardedByNegation-----
110,218
115,191
120,196
117,193
143,218
148,191
153,196
150,193
186,218
231,363
236,336
241,341
238,338
285,363
290,336
295,341
292,338
298,344
331,363
380,556
385,502
390,507
387,504
393,510
433,556
438,502
443,507
440,504
446,510
497,556
-----lastLexicalUse-----
143,218
285,363
380,556
497,556
-----jump-----
143,218
285,363
380,556
497,556
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int sasl_server_dispatch(SASLServer *sasl, const char *input, size_t n_input, const char **outputp, size_t *n_outputp) {        const char *cmd, *arg;        size_t n_cmd, n_arg;        sasl_split(input, n_input, &cmd, &n_cmd, &arg, &n_arg);        switch (sasl->state) {        case SASL_SERVER_STATE_INIT:                /* first byte must be the zero-byte */                if (n_cmd < 1 || *cmd)                        return SASL_E_PROTOCOL_VIOLATION;                --n_cmd;                ++cmd;                /* fallthrough */        case SASL_SERVER_STATE_AUTH:                if (n_cmd == strlen("AUTH") && !strncmp(cmd, "AUTH", n_cmd)) {                        sasl_server_handle_auth(sasl, arg, n_arg, outputp, n_outputp);                } else if (n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        case SASL_SERVER_STATE_CHALLENGE:                if (n_cmd == strlen("DATA") && !strncmp(cmd, "DATA", n_cmd)) {                        sasl_server_handle_data(sasl, arg, n_arg, outputp, n_outputp);                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        case SASL_SERVER_STATE_AUTHENTICATED:        case SASL_SERVER_STATE_NEGOTIATED_FDS:                if (n_cmd == strlen("NEGOTIATE_UNIX_FD") && !strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd) && !n_arg) {                        *outputp = "AGREE_UNIX_FD";                        *n_outputp = strlen("AGREE_UNIX_FD");                        sasl->fds_allowed = true;                        sasl->state = SASL_SERVER_STATE_NEGOTIATED_FDS;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        *outputp = NULL;                        *n_outputp = 0;                        sasl->state = SASL_SERVER_STATE_DONE;                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->fds_allowed = false;                        sasl->state = SASL_SERVER_STATE_AUTH;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        default:                return error_origin(-ENOTRECOVERABLE);        }        return 0;}
int
sasl_server_dispatch(SASLServer *sasl, const char *input, size_t n_input, const char **outputp, size_t *n_outputp)
sasl_server_dispatch
SASLServer *sasl
SASLServer
SASLServer
*sasl
*
sasl
const char *input
const char
*input
*
input
size_t n_input
size_t
size_t
n_input
n_input
const char **outputp
const char
**outputp
*
*
outputp
size_t *n_outputp
size_t
size_t
*n_outputp
*
n_outputp
{        const char *cmd, *arg;        size_t n_cmd, n_arg;        sasl_split(input, n_input, &cmd, &n_cmd, &arg, &n_arg);        switch (sasl->state) {        case SASL_SERVER_STATE_INIT:                /* first byte must be the zero-byte */                if (n_cmd < 1 || *cmd)                        return SASL_E_PROTOCOL_VIOLATION;                --n_cmd;                ++cmd;                /* fallthrough */        case SASL_SERVER_STATE_AUTH:                if (n_cmd == strlen("AUTH") && !strncmp(cmd, "AUTH", n_cmd)) {                        sasl_server_handle_auth(sasl, arg, n_arg, outputp, n_outputp);                } else if (n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        case SASL_SERVER_STATE_CHALLENGE:                if (n_cmd == strlen("DATA") && !strncmp(cmd, "DATA", n_cmd)) {                        sasl_server_handle_data(sasl, arg, n_arg, outputp, n_outputp);                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        case SASL_SERVER_STATE_AUTHENTICATED:        case SASL_SERVER_STATE_NEGOTIATED_FDS:                if (n_cmd == strlen("NEGOTIATE_UNIX_FD") && !strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd) && !n_arg) {                        *outputp = "AGREE_UNIX_FD";                        *n_outputp = strlen("AGREE_UNIX_FD");                        sasl->fds_allowed = true;                        sasl->state = SASL_SERVER_STATE_NEGOTIATED_FDS;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        *outputp = NULL;                        *n_outputp = 0;                        sasl->state = SASL_SERVER_STATE_DONE;                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->fds_allowed = false;                        sasl->state = SASL_SERVER_STATE_AUTH;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        default:                return error_origin(-ENOTRECOVERABLE);        }        return 0;}
const char *cmd, *arg;
const char *cmd, *arg;
const char
*cmd
*
cmd
*arg
*
arg
size_t n_cmd, n_arg;
size_t n_cmd, n_arg;
size_t
size_t
n_cmd
n_cmd
n_arg
n_arg
sasl_split(input, n_input, &cmd, &n_cmd, &arg, &n_arg);
sasl_split(input, n_input, &cmd, &n_cmd, &arg, &n_arg)
sasl_split
sasl_split
input
input
n_input
n_input
&cmd
cmd
cmd
&n_cmd
n_cmd
n_cmd
&arg
arg
arg
&n_arg
n_arg
n_arg
switch (sasl->state) {        case SASL_SERVER_STATE_INIT:                /* first byte must be the zero-byte */                if (n_cmd < 1 || *cmd)                        return SASL_E_PROTOCOL_VIOLATION;                --n_cmd;                ++cmd;                /* fallthrough */        case SASL_SERVER_STATE_AUTH:                if (n_cmd == strlen("AUTH") && !strncmp(cmd, "AUTH", n_cmd)) {                        sasl_server_handle_auth(sasl, arg, n_arg, outputp, n_outputp);                } else if (n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        case SASL_SERVER_STATE_CHALLENGE:                if (n_cmd == strlen("DATA") && !strncmp(cmd, "DATA", n_cmd)) {                        sasl_server_handle_data(sasl, arg, n_arg, outputp, n_outputp);                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        case SASL_SERVER_STATE_AUTHENTICATED:        case SASL_SERVER_STATE_NEGOTIATED_FDS:                if (n_cmd == strlen("NEGOTIATE_UNIX_FD") && !strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd) && !n_arg) {                        *outputp = "AGREE_UNIX_FD";                        *n_outputp = strlen("AGREE_UNIX_FD");                        sasl->fds_allowed = true;                        sasl->state = SASL_SERVER_STATE_NEGOTIATED_FDS;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        *outputp = NULL;                        *n_outputp = 0;                        sasl->state = SASL_SERVER_STATE_DONE;                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->fds_allowed = false;                        sasl->state = SASL_SERVER_STATE_AUTH;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        default:                return error_origin(-ENOTRECOVERABLE);        }
sasl->state
sasl
sasl
state
{        case SASL_SERVER_STATE_INIT:                /* first byte must be the zero-byte */                if (n_cmd < 1 || *cmd)                        return SASL_E_PROTOCOL_VIOLATION;                --n_cmd;                ++cmd;                /* fallthrough */        case SASL_SERVER_STATE_AUTH:                if (n_cmd == strlen("AUTH") && !strncmp(cmd, "AUTH", n_cmd)) {                        sasl_server_handle_auth(sasl, arg, n_arg, outputp, n_outputp);                } else if (n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        case SASL_SERVER_STATE_CHALLENGE:                if (n_cmd == strlen("DATA") && !strncmp(cmd, "DATA", n_cmd)) {                        sasl_server_handle_data(sasl, arg, n_arg, outputp, n_outputp);                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        case SASL_SERVER_STATE_AUTHENTICATED:        case SASL_SERVER_STATE_NEGOTIATED_FDS:                if (n_cmd == strlen("NEGOTIATE_UNIX_FD") && !strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd) && !n_arg) {                        *outputp = "AGREE_UNIX_FD";                        *n_outputp = strlen("AGREE_UNIX_FD");                        sasl->fds_allowed = true;                        sasl->state = SASL_SERVER_STATE_NEGOTIATED_FDS;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        *outputp = NULL;                        *n_outputp = 0;                        sasl->state = SASL_SERVER_STATE_DONE;                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->fds_allowed = false;                        sasl->state = SASL_SERVER_STATE_AUTH;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }                break;        default:                return error_origin(-ENOTRECOVERABLE);        }
case SASL_SERVER_STATE_INIT:
SASL_SERVER_STATE_INIT
SASL_SERVER_STATE_INIT
if (n_cmd < 1 || *cmd)                        return SASL_E_PROTOCOL_VIOLATION;
n_cmd < 1 || *cmd
n_cmd < 1
n_cmd
n_cmd
1
*cmd
cmd
cmd
return SASL_E_PROTOCOL_VIOLATION;
SASL_E_PROTOCOL_VIOLATION
SASL_E_PROTOCOL_VIOLATION
--n_cmd;
--n_cmd
n_cmd
n_cmd
++cmd;
++cmd
cmd
cmd
case SASL_SERVER_STATE_AUTH:
SASL_SERVER_STATE_AUTH
SASL_SERVER_STATE_AUTH
if (n_cmd == strlen("AUTH") && !strncmp(cmd, "AUTH", n_cmd)) {                        sasl_server_handle_auth(sasl, arg, n_arg, outputp, n_outputp);                } else if (n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
n_cmd == strlen("AUTH") && !strncmp(cmd, "AUTH", n_cmd)
n_cmd == strlen("AUTH")
n_cmd
n_cmd
strlen("AUTH")
strlen
strlen
"AUTH"
!strncmp(cmd, "AUTH", n_cmd)
strncmp(cmd, "AUTH", n_cmd)
strncmp
strncmp
cmd
cmd
"AUTH"
n_cmd
n_cmd
{                        sasl_server_handle_auth(sasl, arg, n_arg, outputp, n_outputp);                }
sasl_server_handle_auth(sasl, arg, n_arg, outputp, n_outputp);
sasl_server_handle_auth(sasl, arg, n_arg, outputp, n_outputp)
sasl_server_handle_auth
sasl_server_handle_auth
sasl
sasl
arg
arg
n_arg
n_arg
outputp
outputp
n_outputp
n_outputp
if (n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)
n_cmd == strlen("ERROR")
n_cmd
n_cmd
strlen("ERROR")
strlen
strlen
"ERROR"
!strncmp(cmd, "ERROR", n_cmd)
strncmp(cmd, "ERROR", n_cmd)
strncmp
strncmp
cmd
cmd
"ERROR"
n_cmd
n_cmd
{                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                }
*outputp = "REJECTED EXTERNAL";
*outputp = "REJECTED EXTERNAL"
*outputp
outputp
outputp
"REJECTED EXTERNAL"
*n_outputp = strlen("REJECTED EXTERNAL");
*n_outputp = strlen("REJECTED EXTERNAL")
*n_outputp
n_outputp
n_outputp
strlen("REJECTED EXTERNAL")
strlen
strlen
"REJECTED EXTERNAL"
sasl->state = SASL_SERVER_STATE_AUTH;
sasl->state = SASL_SERVER_STATE_AUTH
sasl->state
sasl
sasl
state
SASL_SERVER_STATE_AUTH
SASL_SERVER_STATE_AUTH
if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg
n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd)
n_cmd == strlen("BEGIN")
n_cmd
n_cmd
strlen("BEGIN")
strlen
strlen
"BEGIN"
!strncmp(cmd, "BEGIN", n_cmd)
strncmp(cmd, "BEGIN", n_cmd)
strncmp
strncmp
cmd
cmd
"BEGIN"
n_cmd
n_cmd
!n_arg
n_arg
n_arg
{                        return SASL_E_PROTOCOL_VIOLATION;                }
return SASL_E_PROTOCOL_VIOLATION;
SASL_E_PROTOCOL_VIOLATION
SASL_E_PROTOCOL_VIOLATION
{                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
*outputp = "ERROR";
*outputp = "ERROR"
*outputp
outputp
outputp
"ERROR"
*n_outputp = strlen("ERROR");
*n_outputp = strlen("ERROR")
*n_outputp
n_outputp
n_outputp
strlen("ERROR")
strlen
strlen
"ERROR"
break;
case SASL_SERVER_STATE_CHALLENGE:
SASL_SERVER_STATE_CHALLENGE
SASL_SERVER_STATE_CHALLENGE
if (n_cmd == strlen("DATA") && !strncmp(cmd, "DATA", n_cmd)) {                        sasl_server_handle_data(sasl, arg, n_arg, outputp, n_outputp);                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
n_cmd == strlen("DATA") && !strncmp(cmd, "DATA", n_cmd)
n_cmd == strlen("DATA")
n_cmd
n_cmd
strlen("DATA")
strlen
strlen
"DATA"
!strncmp(cmd, "DATA", n_cmd)
strncmp(cmd, "DATA", n_cmd)
strncmp
strncmp
cmd
cmd
"DATA"
n_cmd
n_cmd
{                        sasl_server_handle_data(sasl, arg, n_arg, outputp, n_outputp);                }
sasl_server_handle_data(sasl, arg, n_arg, outputp, n_outputp);
sasl_server_handle_data(sasl, arg, n_arg, outputp, n_outputp)
sasl_server_handle_data
sasl_server_handle_data
sasl
sasl
arg
arg
n_arg
n_arg
outputp
outputp
n_outputp
n_outputp
if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
(n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)
(n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd))
n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)
n_cmd == strlen("ERROR")
n_cmd
n_cmd
strlen("ERROR")
strlen
strlen
"ERROR"
!strncmp(cmd, "ERROR", n_cmd)
strncmp(cmd, "ERROR", n_cmd)
strncmp
strncmp
cmd
cmd
"ERROR"
n_cmd
n_cmd
(n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)
n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg
n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd)
n_cmd == strlen("CANCEL")
n_cmd
n_cmd
strlen("CANCEL")
strlen
strlen
"CANCEL"
!strncmp(cmd, "CANCEL", n_cmd)
strncmp(cmd, "CANCEL", n_cmd)
strncmp
strncmp
cmd
cmd
"CANCEL"
n_cmd
n_cmd
!n_arg
n_arg
n_arg
{                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->state = SASL_SERVER_STATE_AUTH;                }
*outputp = "REJECTED EXTERNAL";
*outputp = "REJECTED EXTERNAL"
*outputp
outputp
outputp
"REJECTED EXTERNAL"
*n_outputp = strlen("REJECTED EXTERNAL");
*n_outputp = strlen("REJECTED EXTERNAL")
*n_outputp
n_outputp
n_outputp
strlen("REJECTED EXTERNAL")
strlen
strlen
"REJECTED EXTERNAL"
sasl->state = SASL_SERVER_STATE_AUTH;
sasl->state = SASL_SERVER_STATE_AUTH
sasl->state
sasl
sasl
state
SASL_SERVER_STATE_AUTH
SASL_SERVER_STATE_AUTH
if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        return SASL_E_PROTOCOL_VIOLATION;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg
n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd)
n_cmd == strlen("BEGIN")
n_cmd
n_cmd
strlen("BEGIN")
strlen
strlen
"BEGIN"
!strncmp(cmd, "BEGIN", n_cmd)
strncmp(cmd, "BEGIN", n_cmd)
strncmp
strncmp
cmd
cmd
"BEGIN"
n_cmd
n_cmd
!n_arg
n_arg
n_arg
{                        return SASL_E_PROTOCOL_VIOLATION;                }
return SASL_E_PROTOCOL_VIOLATION;
SASL_E_PROTOCOL_VIOLATION
SASL_E_PROTOCOL_VIOLATION
{                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
*outputp = "ERROR";
*outputp = "ERROR"
*outputp
outputp
outputp
"ERROR"
*n_outputp = strlen("ERROR");
*n_outputp = strlen("ERROR")
*n_outputp
n_outputp
n_outputp
strlen("ERROR")
strlen
strlen
"ERROR"
break;
case SASL_SERVER_STATE_AUTHENTICATED:
SASL_SERVER_STATE_AUTHENTICATED
SASL_SERVER_STATE_AUTHENTICATED
case SASL_SERVER_STATE_NEGOTIATED_FDS:
SASL_SERVER_STATE_NEGOTIATED_FDS
SASL_SERVER_STATE_NEGOTIATED_FDS
if (n_cmd == strlen("NEGOTIATE_UNIX_FD") && !strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd) && !n_arg) {                        *outputp = "AGREE_UNIX_FD";                        *n_outputp = strlen("AGREE_UNIX_FD");                        sasl->fds_allowed = true;                        sasl->state = SASL_SERVER_STATE_NEGOTIATED_FDS;                } else if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        *outputp = NULL;                        *n_outputp = 0;                        sasl->state = SASL_SERVER_STATE_DONE;                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->fds_allowed = false;                        sasl->state = SASL_SERVER_STATE_AUTH;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
n_cmd == strlen("NEGOTIATE_UNIX_FD") && !strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd) && !n_arg
n_cmd == strlen("NEGOTIATE_UNIX_FD") && !strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd)
n_cmd == strlen("NEGOTIATE_UNIX_FD")
n_cmd
n_cmd
strlen("NEGOTIATE_UNIX_FD")
strlen
strlen
"NEGOTIATE_UNIX_FD"
!strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd)
strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd)
strncmp
strncmp
cmd
cmd
"NEGOTIATE_UNIX_FD"
n_cmd
n_cmd
!n_arg
n_arg
n_arg
{                        *outputp = "AGREE_UNIX_FD";                        *n_outputp = strlen("AGREE_UNIX_FD");                        sasl->fds_allowed = true;                        sasl->state = SASL_SERVER_STATE_NEGOTIATED_FDS;                }
*outputp = "AGREE_UNIX_FD";
*outputp = "AGREE_UNIX_FD"
*outputp
outputp
outputp
"AGREE_UNIX_FD"
*n_outputp = strlen("AGREE_UNIX_FD");
*n_outputp = strlen("AGREE_UNIX_FD")
*n_outputp
n_outputp
n_outputp
strlen("AGREE_UNIX_FD")
strlen
strlen
"AGREE_UNIX_FD"
sasl->fds_allowed = true;
sasl->fds_allowed = true
sasl->fds_allowed
sasl
sasl
fds_allowed
true
sasl->state = SASL_SERVER_STATE_NEGOTIATED_FDS;
sasl->state = SASL_SERVER_STATE_NEGOTIATED_FDS
sasl->state
sasl
sasl
state
SASL_SERVER_STATE_NEGOTIATED_FDS
SASL_SERVER_STATE_NEGOTIATED_FDS
if (n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg) {                        *outputp = NULL;                        *n_outputp = 0;                        sasl->state = SASL_SERVER_STATE_DONE;                } else if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->fds_allowed = false;                        sasl->state = SASL_SERVER_STATE_AUTH;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd) && !n_arg
n_cmd == strlen("BEGIN") && !strncmp(cmd, "BEGIN", n_cmd)
n_cmd == strlen("BEGIN")
n_cmd
n_cmd
strlen("BEGIN")
strlen
strlen
"BEGIN"
!strncmp(cmd, "BEGIN", n_cmd)
strncmp(cmd, "BEGIN", n_cmd)
strncmp
strncmp
cmd
cmd
"BEGIN"
n_cmd
n_cmd
!n_arg
n_arg
n_arg
{                        *outputp = NULL;                        *n_outputp = 0;                        sasl->state = SASL_SERVER_STATE_DONE;                }
*outputp = NULL;
*outputp = NULL
*outputp
outputp
outputp
NULL
NULL
*n_outputp = 0;
*n_outputp = 0
*n_outputp
n_outputp
n_outputp
0
sasl->state = SASL_SERVER_STATE_DONE;
sasl->state = SASL_SERVER_STATE_DONE
sasl->state
sasl
sasl
state
SASL_SERVER_STATE_DONE
SASL_SERVER_STATE_DONE
if ((n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)) {                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->fds_allowed = false;                        sasl->state = SASL_SERVER_STATE_AUTH;                } else {                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
(n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)) ||                           (n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)
(n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd))
n_cmd == strlen("ERROR") && !strncmp(cmd, "ERROR", n_cmd)
n_cmd == strlen("ERROR")
n_cmd
n_cmd
strlen("ERROR")
strlen
strlen
"ERROR"
!strncmp(cmd, "ERROR", n_cmd)
strncmp(cmd, "ERROR", n_cmd)
strncmp
strncmp
cmd
cmd
"ERROR"
n_cmd
n_cmd
(n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg)
n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd) && !n_arg
n_cmd == strlen("CANCEL") && !strncmp(cmd, "CANCEL", n_cmd)
n_cmd == strlen("CANCEL")
n_cmd
n_cmd
strlen("CANCEL")
strlen
strlen
"CANCEL"
!strncmp(cmd, "CANCEL", n_cmd)
strncmp(cmd, "CANCEL", n_cmd)
strncmp
strncmp
cmd
cmd
"CANCEL"
n_cmd
n_cmd
!n_arg
n_arg
n_arg
{                        *outputp = "REJECTED EXTERNAL";                        *n_outputp = strlen("REJECTED EXTERNAL");                        sasl->fds_allowed = false;                        sasl->state = SASL_SERVER_STATE_AUTH;                }
*outputp = "REJECTED EXTERNAL";
*outputp = "REJECTED EXTERNAL"
*outputp
outputp
outputp
"REJECTED EXTERNAL"
*n_outputp = strlen("REJECTED EXTERNAL");
*n_outputp = strlen("REJECTED EXTERNAL")
*n_outputp
n_outputp
n_outputp
strlen("REJECTED EXTERNAL")
strlen
strlen
"REJECTED EXTERNAL"
sasl->fds_allowed = false;
sasl->fds_allowed = false
sasl->fds_allowed
sasl
sasl
fds_allowed
false
sasl->state = SASL_SERVER_STATE_AUTH;
sasl->state = SASL_SERVER_STATE_AUTH
sasl->state
sasl
sasl
state
SASL_SERVER_STATE_AUTH
SASL_SERVER_STATE_AUTH
{                        *outputp = "ERROR";                        *n_outputp = strlen("ERROR");                }
*outputp = "ERROR";
*outputp = "ERROR"
*outputp
outputp
outputp
"ERROR"
*n_outputp = strlen("ERROR");
*n_outputp = strlen("ERROR")
*n_outputp
n_outputp
n_outputp
strlen("ERROR")
strlen
strlen
"ERROR"
break;
default:
return error_origin(-ENOTRECOVERABLE);
error_origin(-ENOTRECOVERABLE)
error_origin
error_origin
-ENOTRECOVERABLE
ENOTRECOVERABLE
ENOTRECOVERABLE
return 0;
0
-----joern-----
(291,142,0)
(34,209,0)
(177,230,0)
(315,92,0)
(167,211,0)
(243,124,0)
(155,166,0)
(243,216,0)
(34,262,0)
(75,160,0)
(8,16,0)
(145,67,0)
(24,200,0)
(296,109,0)
(270,93,0)
(211,115,0)
(316,67,0)
(306,118,0)
(246,46,0)
(239,168,0)
(42,168,0)
(220,119,0)
(189,54,0)
(256,267,0)
(58,101,0)
(53,111,0)
(44,82,0)
(197,248,0)
(36,159,0)
(110,290,0)
(137,257,0)
(300,159,0)
(248,197,0)
(11,231,0)
(10,13,0)
(4,312,0)
(107,289,0)
(61,80,0)
(258,148,0)
(243,228,0)
(178,54,0)
(65,214,0)
(63,197,0)
(20,255,0)
(126,297,0)
(290,119,0)
(200,98,0)
(234,238,0)
(107,274,0)
(25,119,0)
(243,227,0)
(243,125,0)
(196,313,0)
(201,95,0)
(113,133,0)
(158,30,0)
(243,131,0)
(103,114,0)
(59,290,0)
(260,243,0)
(219,207,0)
(192,80,0)
(222,86,0)
(34,85,0)
(55,146,0)
(31,118,0)
(181,234,0)
(52,248,0)
(154,132,0)
(18,273,0)
(149,25,0)
(200,122,0)
(28,70,0)
(22,75,0)
(49,237,0)
(170,176,0)
(30,119,0)
(146,73,0)
(178,242,0)
(15,21,0)
(152,34,0)
(305,205,0)
(229,124,0)
(231,37,0)
(272,109,0)
(98,221,0)
(13,119,0)
(95,33,0)
(47,53,0)
(38,4,0)
(147,290,0)
(139,32,0)
(102,101,0)
(131,54,0)
(83,31,0)
(214,69,0)
(268,30,0)
(232,296,0)
(267,117,0)
(8,221,0)
(255,253,0)
(279,72,0)
(40,111,0)
(161,54,0)
(95,201,0)
(17,178,0)
(142,3,0)
(261,67,0)
(258,90,0)
(234,193,0)
(235,193,0)
(243,178,0)
(293,67,0)
(197,179,0)
(40,279,0)
(294,115,0)
(243,220,0)
(4,310,0)
(133,172,0)
(68,290,0)
(310,7,0)
(78,103,0)
(2,276,0)
(72,279,0)
(148,258,0)
(34,168,0)
(311,274,0)
(174,127,0)
(245,144,0)
(227,43,0)
(117,267,0)
(52,232,0)
(243,75,0)
(250,253,0)
(237,294,0)
(243,136,0)
(48,16,0)
(312,4,0)
(72,132,0)
(195,131,0)
(106,36,0)
(269,270,0)
(70,88,0)
(210,217,0)
(182,189,0)
(125,119,0)
(3,141,0)
(243,189,0)
(303,211,0)
(208,287,0)
(14,267,0)
(321,28,0)
(266,311,0)
(12,228,0)
(284,30,0)
(25,8,0)
(320,69,0)
(79,277,0)
(278,210,0)
(215,164,0)
(248,52,0)
(230,142,0)
(116,86,0)
(128,287,0)
(290,104,0)
(130,163,0)
(132,72,0)
(308,92,0)
(125,73,0)
(304,34,0)
(64,67,0)
(142,230,0)
(214,318,0)
(16,8,0)
(271,179,0)
(84,86,0)
(279,40,0)
(299,43,0)
(243,210,0)
(241,138,0)
(212,305,0)
(223,276,0)
(291,310,0)
(238,258,0)
(171,230,0)
(101,102,0)
(46,21,0)
(289,107,0)
(136,122,0)
(251,88,0)
(69,214,0)
(30,122,0)
(27,67,0)
(205,254,0)
(249,66,0)
(30,74,0)
(318,257,0)
(243,200,0)
(39,209,0)
(214,65,0)
(292,128,0)
(151,273,0)
(86,84,0)
(248,84,0)
(140,312,0)
(196,119,0)
(46,175,0)
(34,301,0)
(129,207,0)
(288,311,0)
(220,241,0)
(307,313,0)
(111,40,0)
(129,201,0)
(66,308,0)
(290,122,0)
(226,178,0)
(43,88,0)
(90,273,0)
(73,93,0)
(184,130,0)
(165,231,0)
(81,136,0)
(70,28,0)
(276,223,0)
(265,71,0)
(217,115,0)
(259,26,0)
(143,30,0)
(131,277,0)
(108,237,0)
(282,171,0)
(118,31,0)
(175,117,0)
(203,33,0)
(100,133,0)
(36,106,0)
(159,36,0)
(298,189,0)
(243,26,0)
(179,197,0)
(210,119,0)
(45,159,0)
(123,168,0)
(237,54,0)
(302,148,0)
(165,204,0)
(206,71,0)
(255,54,0)
(127,88,0)
(232,128,0)
(76,216,0)
(285,87,0)
(243,184,0)
(40,87,0)
(3,114,0)
(7,310,0)
(105,133,0)
(109,296,0)
(198,33,0)
(280,72,0)
(19,67,0)
(243,13,0)
(35,297,0)
(241,199,0)
(121,273,0)
(243,266,0)
(114,103,0)
(185,67,0)
(176,34,0)
(118,77,0)
(33,95,0)
(65,71,0)
(213,262,0)
(225,215,0)
(29,131,0)
(228,127,0)
(164,215,0)
(82,224,0)
(172,133,0)
(26,107,0)
(310,4,0)
(252,242,0)
(309,30,0)
(135,67,0)
(277,138,0)
(165,254,0)
(257,32,0)
(223,296,0)
(34,176,0)
(9,53,0)
(80,7,0)
(314,33,0)
(75,122,0)
(102,106,0)
(156,150,0)
(91,159,0)
(275,220,0)
(142,291,0)
(99,67,0)
(6,98,0)
(162,64,0)
(243,25,0)
(175,46,0)
(41,276,0)
(144,130,0)
(281,168,0)
(243,196,0)
(3,142,0)
(130,144,0)
(202,102,0)
(97,227,0)
(150,67,0)
(136,270,0)
(172,164,0)
(273,90,0)
(26,119,0)
(319,125,0)
(96,161,0)
(263,168,0)
(238,234,0)
(296,232,0)
(290,54,0)
(166,274,0)
(77,164,0)
(199,241,0)
(262,34,0)
(160,163,0)
(207,129,0)
(183,138,0)
(94,183,0)
(165,218,0)
(7,80,0)
(257,318,0)
(243,297,0)
(77,118,0)
(216,82,0)
(56,71,0)
(5,289,0)
(201,129,0)
(287,128,0)
(286,103,0)
(165,243,0)
(230,171,0)
(296,223,0)
(0,276,0)
(218,186,0)
(243,237,0)
(71,65,0)
(254,67,0)
(112,141,0)
(258,238,0)
(308,66,0)
(236,129,0)
(233,80,0)
(240,267,0)
(243,167,0)
(228,122,0)
(283,23,0)
(190,255,0)
(23,217,0)
(189,166,0)
(205,305,0)
(164,77,0)
(253,224,0)
(1,227,0)
(13,70,0)
(51,218,0)
(193,234,0)
(318,214,0)
(114,3,0)
(92,308,0)
(247,161,0)
(34,244,0)
(141,3,0)
(180,53,0)
(232,52,0)
(153,103,0)
(209,34,0)
(169,294,0)
(317,290,0)
(90,258,0)
(243,168,0)
(243,255,0)
(50,67,0)
(111,53,0)
(134,86,0)
(62,196,0)
(73,146,0)
(60,160,0)
(216,122,0)
(89,67,0)
(124,122,0)
(295,67,0)
(187,167,0)
(85,34,0)
(157,266,0)
(173,251,0)
(128,232,0)
(194,199,0)
(106,102,0)
(32,257,0)
(184,119,0)
(21,46,0)
(310,291,0)
(264,92,0)
(164,172,0)
(297,251,0)
(227,54,0)
(188,184,0)
(30,54,0)
(242,274,0)
(87,40,0)
(217,23,0)
(167,122,0)
(117,175,0)
(57,67,0)
(84,248,0)
(124,183,0)
(266,122,0)
(191,85,0)
(297,54,0)
(313,224,0)
(120,204,0)
(97,1,1)
(189,298,1)
(142,3,1)
(280,175,1)
(165,231,1)
(79,131,1)
(75,122,1)
(84,86,1)
(220,275,1)
(3,141,1)
(252,178,1)
(228,12,1)
(15,246,1)
(257,32,1)
(198,314,1)
(179,271,1)
(315,264,1)
(31,83,1)
(207,219,1)
(202,64,1)
(311,288,1)
(184,188,1)
(43,299,1)
(296,223,1)
(72,132,1)
(243,26,1)
(267,14,1)
(297,35,1)
(214,65,1)
(52,248,1)
(187,52,1)
(55,125,1)
(194,220,1)
(236,161,1)
(12,291,1)
(73,146,1)
(283,210,1)
(243,196,1)
(11,279,1)
(98,6,1)
(297,54,1)
(165,243,1)
(92,315,1)
(110,68,1)
(109,272,1)
(59,106,1)
(46,21,1)
(99,294,1)
(127,174,1)
(126,70,1)
(217,23,1)
(291,310,1)
(260,145,1)
(86,134,1)
(321,13,1)
(290,122,1)
(243,178,1)
(36,159,1)
(25,149,1)
(60,75,1)
(300,45,1)
(26,119,1)
(199,194,1)
(210,119,1)
(212,161,1)
(134,222,1)
(113,118,1)
(222,116,1)
(309,268,1)
(318,257,1)
(205,305,1)
(258,148,1)
(234,193,1)
(319,270,1)
(161,96,1)
(61,4,1)
(291,142,1)
(18,121,1)
(167,187,1)
(255,54,1)
(200,24,1)
(143,284,1)
(156,308,1)
(90,273,1)
(165,218,1)
(45,102,1)
(69,320,1)
(211,303,1)
(270,269,1)
(188,160,1)
(174,228,1)
(3,114,1)
(105,113,1)
(125,119,1)
(189,54,1)
(136,81,1)
(235,181,1)
(320,65,1)
(32,139,1)
(243,200,1)
(26,259,1)
(40,111,1)
(243,25,1)
(245,184,1)
(216,122,1)
(20,190,1)
(258,90,1)
(52,232,1)
(171,282,1)
(56,257,1)
(177,310,1)
(106,102,1)
(81,279,1)
(148,302,1)
(200,122,1)
(238,234,1)
(279,72,1)
(287,208,1)
(77,118,1)
(243,125,1)
(268,201,1)
(132,154,1)
(40,87,1)
(227,97,1)
(218,51,1)
(262,213,1)
(243,255,1)
(151,234,1)
(21,15,1)
(155,189,1)
(272,223,1)
(240,256,1)
(238,258,1)
(276,2,1)
(146,55,1)
(114,103,1)
(243,297,1)
(33,198,1)
(314,203,1)
(63,201,1)
(243,210,1)
(167,122,1)
(62,82,1)
(164,215,1)
(250,255,1)
(285,111,1)
(219,236,1)
(51,318,1)
(41,128,1)
(10,127,1)
(175,46,1)
(195,29,1)
(103,78,1)
(158,143,1)
(193,235,1)
(23,283,1)
(5,26,1)
(157,238,1)
(1,251,1)
(225,172,1)
(279,40,1)
(307,196,1)
(304,152,1)
(162,150,1)
(131,195,1)
(232,296,1)
(318,214,1)
(75,22,1)
(96,247,1)
(34,244,1)
(204,120,1)
(137,52,1)
(243,184,1)
(76,77,1)
(231,11,1)
(208,292,1)
(203,129,1)
(30,122,1)
(290,119,1)
(165,204,1)
(290,147,1)
(180,9,1)
(77,164,1)
(161,54,1)
(145,73,1)
(14,240,1)
(265,206,1)
(6,200,1)
(124,229,1)
(181,161,1)
(196,119,1)
(99,8,1)
(191,176,1)
(243,167,1)
(145,277,1)
(303,167,1)
(288,266,1)
(34,209,1)
(249,92,1)
(164,172,1)
(102,101,1)
(308,66,1)
(312,140,1)
(39,262,1)
(150,156,1)
(153,286,1)
(178,226,1)
(112,114,1)
(210,278,1)
(277,79,1)
(284,309,1)
(101,58,1)
(64,162,1)
(259,311,1)
(313,307,1)
(34,85,1)
(302,90,1)
(66,249,1)
(47,72,1)
(229,175,1)
(87,285,1)
(173,297,1)
(165,254,1)
(310,4,1)
(308,92,1)
(298,182,1)
(83,306,1)
(317,110,1)
(230,171,1)
(202,161,1)
(53,180,1)
(50,253,1)
(310,7,1)
(34,262,1)
(9,47,1)
(213,85,1)
(100,105,1)
(142,230,1)
(248,84,1)
(107,289,1)
(223,276,1)
(25,119,1)
(136,122,1)
(50,130,1)
(260,99,1)
(228,122,1)
(273,18,1)
(169,237,1)
(2,0,1)
(290,54,1)
(108,49,1)
(299,227,1)
(190,313,1)
(175,117,1)
(243,220,1)
(4,312,1)
(269,136,1)
(289,5,1)
(282,177,1)
(260,50,1)
(16,48,1)
(292,248,1)
(192,233,1)
(233,61,1)
(125,319,1)
(120,308,1)
(266,157,1)
(286,230,1)
(172,133,1)
(243,266,1)
(13,119,1)
(243,216,1)
(147,317,1)
(78,153,1)
(48,25,1)
(80,192,1)
(49,217,1)
(30,119,1)
(0,41,1)
(7,80,1)
(30,158,1)
(166,155,1)
(160,60,1)
(241,199,1)
(116,197,1)
(243,227,1)
(275,183,1)
(34,301,1)
(24,318,1)
(305,212,1)
(29,241,1)
(243,189,1)
(111,53,1)
(13,10,1)
(242,252,1)
(248,197,1)
(176,170,1)
(226,17,1)
(154,280,1)
(149,98,1)
(121,151,1)
(34,176,1)
(159,91,1)
(206,56,1)
(130,144,1)
(68,59,1)
(197,179,1)
(35,126,1)
(196,62,1)
(227,54,1)
(50,166,1)
(145,290,1)
(253,250,1)
(65,71,1)
(201,129,1)
(182,242,1)
(38,77,1)
(95,33,1)
(58,202,1)
(82,44,1)
(237,54,1)
(144,245,1)
(243,131,1)
(243,75,1)
(232,128,1)
(255,20,1)
(124,122,1)
(266,122,1)
(128,287,1)
(184,119,1)
(215,225,1)
(178,54,1)
(99,30,1)
(85,191,1)
(170,304,1)
(22,291,1)
(50,43,1)
(44,216,1)
(183,94,1)
(256,46,1)
(278,211,1)
(243,237,1)
(243,260,1)
(131,54,1)
(271,63,1)
(94,124,1)
(251,173,1)
(106,36,1)
(209,39,1)
(246,106,1)
(28,321,1)
(237,108,1)
(30,54,1)
(201,95,1)
(243,124,1)
(139,137,1)
(264,161,1)
(70,28,1)
(91,300,1)
(247,34,1)
(214,69,1)
(296,109,1)
(294,169,1)
(243,136,1)
(140,38,1)
(133,100,1)
(8,16,1)
(71,265,1)
(118,31,1)
(254,205,1)
(306,238,1)
(216,76,1)
(17,107,1)
(129,207,1)
(243,13,1)
(220,119,1)
(141,112,1)
(117,267,1)
(243,228,1)
(220,175,2)
(251,291,2)
(91,102,2)
(180,72,2)
(124,122,2)
(100,118,2)
(160,291,2)
(243,237,2)
(136,122,2)
(204,308,2)
(18,234,2)
(33,129,2)
(90,273,2)
(279,40,2)
(269,279,2)
(232,128,2)
(194,175,2)
(308,161,2)
(232,296,2)
(21,106,2)
(107,238,2)
(103,230,2)
(243,124,2)
(206,257,2)
(145,175,2)
(266,238,2)
(106,36,2)
(248,84,2)
(63,201,2)
(142,230,2)
(260,52,2)
(284,201,2)
(3,114,2)
(1,291,2)
(109,223,2)
(216,122,2)
(79,175,2)
(214,257,2)
(7,80,2)
(294,52,2)
(60,291,2)
(242,238,2)
(278,52,2)
(299,291,2)
(165,204,2)
(68,106,2)
(290,54,2)
(290,122,2)
(243,210,2)
(319,279,2)
(241,175,2)
(118,31,2)
(131,175,2)
(243,25,2)
(210,52,2)
(175,106,2)
(312,77,2)
(46,21,2)
(308,66,2)
(117,267,2)
(106,161,2)
(182,238,2)
(169,52,2)
(288,238,2)
(165,218,2)
(230,310,2)
(34,209,2)
(285,111,2)
(43,291,2)
(70,28,2)
(258,90,2)
(75,291,2)
(243,13,2)
(82,77,2)
(192,4,2)
(2,128,2)
(131,54,2)
(255,54,2)
(196,77,2)
(218,318,2)
(258,234,2)
(81,279,2)
(229,175,2)
(101,161,2)
(201,129,2)
(173,291,2)
(286,230,2)
(127,291,2)
(260,279,2)
(243,131,2)
(8,16,2)
(243,178,2)
(315,161,2)
(243,136,2)
(95,129,2)
(196,119,2)
(48,318,2)
(177,310,2)
(181,161,2)
(230,171,2)
(55,279,2)
(13,291,2)
(320,65,2)
(20,77,2)
(226,238,2)
(164,118,2)
(291,142,2)
(207,161,2)
(65,257,2)
(228,122,2)
(220,119,2)
(116,197,2)
(9,72,2)
(243,201,2)
(202,308,2)
(246,106,2)
(297,54,2)
(259,238,2)
(36,102,2)
(306,238,2)
(90,234,2)
(107,289,2)
(26,119,2)
(243,75,2)
(228,291,2)
(243,125,2)
(217,23,2)
(146,279,2)
(145,106,2)
(34,301,2)
(279,72,2)
(143,201,2)
(270,279,2)
(219,161,2)
(243,200,2)
(4,312,2)
(140,77,2)
(26,238,2)
(297,291,2)
(303,52,2)
(30,119,2)
(260,161,2)
(23,52,2)
(77,118,2)
(30,201,2)
(238,234,2)
(280,175,2)
(254,161,2)
(178,54,2)
(121,234,2)
(243,266,2)
(215,172,2)
(245,291,2)
(117,46,2)
(257,52,2)
(157,238,2)
(13,119,2)
(12,291,2)
(130,291,2)
(159,102,2)
(147,106,2)
(106,308,2)
(40,72,2)
(264,161,2)
(49,52,2)
(222,197,2)
(0,128,2)
(10,291,2)
(189,238,2)
(145,279,2)
(73,279,2)
(308,92,2)
(266,122,2)
(34,262,2)
(46,106,2)
(302,90,2)
(53,72,2)
(253,77,2)
(237,52,2)
(50,161,2)
(161,54,2)
(172,133,2)
(22,291,2)
(243,255,2)
(14,46,2)
(7,4,2)
(102,308,2)
(231,279,2)
(165,231,2)
(15,106,2)
(120,308,2)
(298,238,2)
(36,159,2)
(149,318,2)
(223,128,2)
(241,199,2)
(268,201,2)
(134,197,2)
(248,197,2)
(112,114,2)
(64,308,2)
(276,128,2)
(165,254,2)
(52,201,2)
(201,95,2)
(52,248,2)
(51,318,2)
(101,308,2)
(65,71,2)
(47,72,2)
(30,54,2)
(156,308,2)
(139,52,2)
(34,85,2)
(172,118,2)
(243,228,2)
(132,175,2)
(321,291,2)
(243,189,2)
(111,72,2)
(35,291,2)
(272,223,2)
(125,279,2)
(25,318,2)
(59,106,2)
(318,257,2)
(45,102,2)
(40,111,2)
(189,54,2)
(102,101,2)
(87,111,2)
(111,53,2)
(243,184,2)
(314,129,2)
(243,167,2)
(249,92,2)
(310,7,2)
(164,215,2)
(267,46,2)
(200,318,2)
(282,310,2)
(84,86,2)
(28,291,2)
(227,291,2)
(164,172,2)
(243,279,2)
(153,230,2)
(108,52,2)
(40,87,2)
(243,106,2)
(24,318,2)
(99,201,2)
(202,161,2)
(73,146,2)
(144,291,2)
(195,175,2)
(238,161,2)
(257,32,2)
(187,52,2)
(179,201,2)
(75,122,2)
(171,310,2)
(233,4,2)
(102,161,2)
(214,69,2)
(258,148,2)
(188,291,2)
(34,244,2)
(62,77,2)
(166,238,2)
(291,77,2)
(243,220,2)
(296,109,2)
(92,161,2)
(69,65,2)
(275,175,2)
(307,77,2)
(174,291,2)
(167,122,2)
(98,318,2)
(83,238,2)
(142,3,2)
(184,291,2)
(58,161,2)
(167,52,2)
(313,77,2)
(234,161,2)
(95,33,2)
(243,161,2)
(223,276,2)
(178,238,2)
(309,201,2)
(72,175,2)
(290,106,2)
(317,106,2)
(243,26,2)
(236,161,2)
(248,201,2)
(38,77,2)
(291,310,2)
(162,308,2)
(137,52,2)
(305,161,2)
(8,318,2)
(318,214,2)
(78,230,2)
(128,248,2)
(114,230,2)
(227,54,2)
(296,223,2)
(3,230,2)
(110,106,2)
(25,119,2)
(211,52,2)
(283,52,2)
(193,161,2)
(199,175,2)
(124,175,2)
(243,227,2)
(289,238,2)
(260,201,2)
(205,305,2)
(250,77,2)
(252,238,2)
(210,119,2)
(133,118,2)
(243,196,2)
(125,119,2)
(318,52,2)
(72,132,2)
(32,52,2)
(175,46,2)
(279,175,2)
(5,238,2)
(198,129,2)
(203,129,2)
(71,257,2)
(31,238,2)
(310,77,2)
(99,52,2)
(292,248,2)
(130,144,2)
(142,310,2)
(265,257,2)
(58,308,2)
(126,291,2)
(255,77,2)
(243,297,2)
(114,103,2)
(16,318,2)
(273,234,2)
(183,175,2)
(201,161,2)
(44,77,2)
(29,175,2)
(232,248,2)
(70,291,2)
(277,175,2)
(243,216,2)
(287,248,2)
(77,238,2)
(61,4,2)
(106,102,2)
(190,77,2)
(165,243,2)
(84,197,2)
(271,201,2)
(94,175,2)
(235,161,2)
(184,119,2)
(30,122,2)
(217,52,2)
(129,161,2)
(97,291,2)
(243,175,2)
(66,92,2)
(80,4,2)
(11,279,2)
(136,279,2)
(311,238,2)
(155,238,2)
(128,287,2)
(212,161,2)
(300,102,2)
(216,77,2)
(214,65,2)
(4,77,2)
(197,179,2)
(260,175,2)
(290,119,2)
(205,161,2)
(243,52,2)
(129,207,2)
(260,106,2)
(237,54,2)
(197,201,2)
(105,118,2)
(86,197,2)
(6,318,2)
(76,77,2)
(238,258,2)
(240,46,2)
(52,232,2)
(150,308,2)
(3,141,2)
(225,172,2)
(56,257,2)
(296,128,2)
(158,201,2)
(208,248,2)
(243,318,2)
(260,318,2)
(256,46,2)
(151,234,2)
(310,4,2)
(154,175,2)
(200,122,2)
(118,238,2)
(99,318,2)
(41,128,2)
(17,238,2)
(113,118,2)
(34,176,2)
(77,164,2)
(175,117,2)
(141,114,2)
(148,90,2)
(234,193,2)
-----------------------------------
(0,"CANCEL")
(1,sasl)
(2,n_cmd)
(3,!strncmp(cmd, "CANCEL", n_cmd)
(4,n_cmd == strlen("ERROR")
(5,"AGREE_UNIX_FD")
(6,"ERROR")
(7,!strncmp(cmd, "ERROR", n_cmd)
(8,*n_outputp = strlen("ERROR")
(9,"BEGIN")
(10,n_outputp)
(11,SASL_E_PROTOCOL_VIOLATION)
(12,outputp)
(13,*n_outputp)
(14,n_cmd)
(15,"ERROR")
(16,strlen("ERROR")
(17,sasl)
(18,n_cmd)
(19,case SASL_SERVER_STATE_AUTH:)
(20,state)
(21,strlen("ERROR")
(22,outputp)
(23,strlen("REJECTED EXTERNAL")
(24,outputp)
(25,*n_outputp)
(26,*n_outputp)
(27,if (n_cmd < 1 || *cmd)
(28,strlen("REJECTED EXTERNAL")
(29,sasl)
(30,sasl_server_handle_data(sasl, arg, n_arg, outputp, n_outputp)
(31,strlen("BEGIN")
(32,strlen("BEGIN")
(33,strncmp(cmd, "DATA", n_cmd)
(34,sasl_split(input, n_input, &cmd, &n_cmd, &arg, &n_arg)
(35,fds_allowed)
(36,!strncmp(cmd, "AUTH", n_cmd)
(37,)
(38,n_cmd)
(39,n_arg)
(40,!strncmp(cmd, "BEGIN", n_cmd)
(41,cmd)
(42,n_arg)
(43,sasl->state = SASL_SERVER_STATE_AUTH)
(44,NULL)
(45,cmd)
(46,n_cmd == strlen("ERROR")
(47,cmd)
(48,"ERROR")
(49,sasl)
(50,break;)
(51,SASL_E_PROTOCOL_VIOLATION)
(52,(n_cmd == strlen("ERROR")
(53,strncmp(cmd, "BEGIN", n_cmd)
(54,SASLServer *sasl)
(55,"ERROR")
(56,cmd)
(57,default:)
(58,"AUTH")
(59,sasl)
(60,"ERROR")
(61,cmd)
(62,n_outputp)
(63,n_cmd)
(64,++cmd)
(65,!strncmp(cmd, "BEGIN", n_cmd)
(66,*cmd)
(67,)
(68,arg)
(69,!n_arg)
(70,*n_outputp = strlen("REJECTED EXTERNAL")
(71,strncmp(cmd, "BEGIN", n_cmd)
(72,n_cmd == strlen("BEGIN")
(73,*n_outputp = strlen("ERROR")
(74,)
(75,*outputp)
(76,outputp)
(77,n_cmd == strlen("BEGIN")
(78,n_cmd)
(79,SASL_SERVER_STATE_AUTH)
(80,strncmp(cmd, "ERROR", n_cmd)
(81,outputp)
(82,*outputp = NULL)
(83,"BEGIN")
(84,!strncmp(cmd, "ERROR", n_cmd)
(85,&n_cmd)
(86,strncmp(cmd, "ERROR", n_cmd)
(87,!n_arg)
(88,)
(89,case SASL_SERVER_STATE_AUTHENTICATED:)
(90,!strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd)
(91,n_cmd)
(92,n_cmd < 1)
(93,)
(94,"REJECTED EXTERNAL")
(95,!strncmp(cmd, "DATA", n_cmd)
(96,state)
(97,state)
(98,*outputp = "ERROR")
(99,break;)
(100,n_cmd)
(101,strlen("AUTH")
(102,n_cmd == strlen("AUTH")
(103,strncmp(cmd, "CANCEL", n_cmd)
(104,)
(105,"BEGIN")
(106,n_cmd == strlen("AUTH")
(107,*n_outputp = strlen("AGREE_UNIX_FD")
(108,state)
(109,!n_arg)
(110,n_arg)
(111,!strncmp(cmd, "BEGIN", n_cmd)
(112,n_arg)
(113,cmd)
(114,!strncmp(cmd, "CANCEL", n_cmd)
(115,)
(116,cmd)
(117,!strncmp(cmd, "ERROR", n_cmd)
(118,n_cmd == strlen("BEGIN")
(119,size_t *n_outputp)
(120,SASL_E_PROTOCOL_VIOLATION)
(121,"NEGOTIATE_UNIX_FD")
(122,const char **outputp)
(123,arg)
(124,*outputp)
(125,*n_outputp)
(126,sasl)
(127,*outputp = "REJECTED EXTERNAL")
(128,n_cmd == strlen("CANCEL")
(129,n_cmd == strlen("DATA")
(130,*n_outputp = strlen("ERROR")
(131,sasl->state)
(132,strlen("BEGIN")
(133,strncmp(cmd, "BEGIN", n_cmd)
(134,n_cmd)
(135,if (n_cmd == strlen("AUTH")
(136,*outputp)
(137,n_cmd)
(138,)
(139,"BEGIN")
(140,"ERROR")
(141,!n_arg)
(142,n_cmd == strlen("CANCEL")
(143,outputp)
(144,strlen("ERROR")
(145,break;)
(146,strlen("ERROR")
(147,n_outputp)
(148,!n_arg)
(149,n_outputp)
(150,--n_cmd)
(151,cmd)
(152,input)
(153,"CANCEL")
(154,"BEGIN")
(155,SASL_SERVER_STATE_NEGOTIATED_FDS)
(156,n_cmd)
(157,outputp)
(158,n_outputp)
(159,strncmp(cmd, "AUTH", n_cmd)
(160,*outputp = "ERROR")
(161,sasl->state)
(162,cmd)
(163,)
(164,!strncmp(cmd, "BEGIN", n_cmd)
(165,RET)
(166,sasl->state = SASL_SERVER_STATE_NEGOTIATED_FDS)
(167,*outputp)
(168,)
(169,SASL_SERVER_STATE_AUTH)
(170,cmd)
(171,strlen("CANCEL")
(172,!strncmp(cmd, "BEGIN", n_cmd)
(173,false)
(174,"REJECTED EXTERNAL")
(175,n_cmd == strlen("ERROR")
(176,&cmd)
(177,n_cmd)
(178,sasl->fds_allowed)
(179,strlen("ERROR")
(180,n_cmd)
(181,n_cmd)
(182,sasl)
(183,*outputp = "REJECTED EXTERNAL")
(184,*n_outputp)
(185,case SASL_SERVER_STATE_CHALLENGE:)
(186,)
(187,outputp)
(188,n_outputp)
(189,sasl->state)
(190,sasl)
(191,n_cmd)
(192,n_cmd)
(193,strlen("NEGOTIATE_UNIX_FD")
(194,"REJECTED EXTERNAL")
(195,state)
(196,*n_outputp)
(197,n_cmd == strlen("ERROR")
(198,n_cmd)
(199,strlen("REJECTED EXTERNAL")
(200,*outputp)
(201,n_cmd == strlen("DATA")
(202,n_cmd)
(203,cmd)
(204,return SASL_E_PROTOCOL_VIOLATION;)
(205,error_origin(-ENOTRECOVERABLE)
(206,"BEGIN")
(207,strlen("DATA")
(208,"CANCEL")
(209,&n_arg)
(210,*n_outputp)
(211,*outputp = "REJECTED EXTERNAL")
(212,ENOTRECOVERABLE)
(213,arg)
(214,!strncmp(cmd, "BEGIN", n_cmd)
(215,!n_arg)
(216,*outputp)
(217,*n_outputp = strlen("REJECTED EXTERNAL")
(218,return SASL_E_PROTOCOL_VIOLATION;)
(219,"DATA")
(220,*n_outputp)
(221,)
(222,"ERROR")
(223,!strncmp(cmd, "CANCEL", n_cmd)
(224,)
(225,n_arg)
(226,fds_allowed)
(227,sasl->state)
(228,*outputp)
(229,outputp)
(230,n_cmd == strlen("CANCEL")
(231,return SASL_E_PROTOCOL_VIOLATION;)
(232,n_cmd == strlen("CANCEL")
(233,"ERROR")
(234,n_cmd == strlen("NEGOTIATE_UNIX_FD")
(235,"NEGOTIATE_UNIX_FD")
(236,n_cmd)
(237,sasl->state)
(238,n_cmd == strlen("NEGOTIATE_UNIX_FD")
(239,cmd)
(240,"ERROR")
(241,*n_outputp = strlen("REJECTED EXTERNAL")
(242,sasl->fds_allowed = true)
(243,return 0;)
(244,size_t n_input)
(245,"ERROR")
(246,n_cmd)
(247,sasl)
(248,n_cmd == strlen("ERROR")
(249,cmd)
(250,SASL_SERVER_STATE_DONE)
(251,sasl->fds_allowed = false)
(252,true)
(253,sasl->state = SASL_SERVER_STATE_DONE)
(254,return error_origin(-ENOTRECOVERABLE)
(255,sasl->state)
(256,cmd)
(257,n_cmd == strlen("BEGIN")
(258,!strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd)
(259,n_outputp)
(260,0)
(261,case SASL_SERVER_STATE_NEGOTIATED_FDS:)
(262,&arg)
(263,switch (sasl->state)
(264,n_cmd)
(265,n_cmd)
(266,*outputp)
(267,strncmp(cmd, "ERROR", n_cmd)
(268,sasl)
(269,"ERROR")
(270,*outputp = "ERROR")
(271,"ERROR")
(272,n_arg)
(273,strncmp(cmd, "NEGOTIATE_UNIX_FD", n_cmd)
(274,)
(275,n_outputp)
(276,strncmp(cmd, "CANCEL", n_cmd)
(277,sasl->state = SASL_SERVER_STATE_AUTH)
(278,n_outputp)
(279,n_cmd == strlen("BEGIN")
(280,n_cmd)
(281,n_cmd)
(282,"CANCEL")
(283,"REJECTED EXTERNAL")
(284,n_arg)
(285,n_arg)
(286,cmd)
(287,strlen("CANCEL")
(288,"AGREE_UNIX_FD")
(289,strlen("AGREE_UNIX_FD")
(290,sasl_server_handle_auth(sasl, arg, n_arg, outputp, n_outputp)
(291,(n_cmd == strlen("ERROR")
(292,n_cmd)
(293,if (n_cmd == strlen("NEGOTIATE_UNIX_FD")
(294,sasl->state = SASL_SERVER_STATE_AUTH)
(295,case SASL_SERVER_STATE_INIT:)
(296,!strncmp(cmd, "CANCEL", n_cmd)
(297,sasl->fds_allowed)
(298,state)
(299,SASL_SERVER_STATE_AUTH)
(300,"AUTH")
(301,const char *input)
(302,n_arg)
(303,"REJECTED EXTERNAL")
(304,n_input)
(305,-ENOTRECOVERABLE)
(306,n_cmd)
(307,0)
(308,n_cmd < 1 || *cmd)
(309,arg)
(310,n_cmd == strlen("ERROR")
(311,*outputp = "AGREE_UNIX_FD")
(312,strlen("ERROR")
(313,*n_outputp = 0)
(314,"DATA")
(315,1)
(316,if (n_cmd == strlen("DATA")
(317,outputp)
(318,n_cmd == strlen("BEGIN")
(319,n_outputp)
(320,n_arg)
(321,"REJECTED EXTERNAL")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^