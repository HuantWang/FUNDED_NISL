-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_10_bad()
{
    char * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,55,57,58,62,64,67,69
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_10_bad(){    char * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_10_bad()
CWE401_Memory_Leak__char_calloc_10_bad
{    char * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,28,0)
(7,13,0)
(15,28,0)
(6,28,0)
(30,25,0)
(8,9,0)
(28,15,0)
(3,15,0)
(10,31,0)
(23,9,0)
(28,9,0)
(31,28,0)
(11,13,0)
(16,1,0)
(18,0,0)
(24,15,0)
(20,3,0)
(15,3,0)
(27,23,0)
(1,13,0)
(4,31,0)
(29,23,0)
(26,13,0)
(23,28,0)
(0,3,0)
(2,9,0)
(3,0,0)
(22,25,0)
(5,1,0)
(25,30,0)
(19,2,0)
(30,12,0)
(15,24,0)
(1,16,1)
(21,1,1)
(29,30,1)
(23,28,1)
(27,29,1)
(25,22,1)
(6,21,1)
(31,28,1)
(15,3,1)
(16,5,1)
(3,0,1)
(0,18,1)
(30,25,1)
(17,2,1)
(4,10,1)
(22,31,1)
(32,17,1)
(17,21,1)
(31,4,1)
(23,27,1)
(19,23,1)
(2,28,1)
(10,28,1)
(18,20,1)
(28,15,1)
(15,24,1)
(20,6,1)
(29,31,1)
(2,19,1)
(4,21,2)
(18,21,2)
(19,21,2)
(31,28,2)
(10,21,2)
(15,3,2)
(30,25,2)
(23,28,2)
(2,21,2)
(3,0,2)
(15,24,2)
(30,31,2)
(25,31,2)
(2,28,2)
(15,21,2)
(27,21,2)
(28,15,2)
(6,21,2)
(3,21,2)
(31,21,2)
(0,21,2)
(22,31,2)
(20,21,2)
(23,21,2)
(28,21,2)
(29,21,2)
-----------------------------------
(0,sizeof(char)
(1,data = NULL)
(2,printLine(data)
(3,calloc(100, sizeof(char)
(4,NULL)
(5,data)
(6,data)
(7,data)
(8,if (data == NULL)
(9,)
(10,data)
(11,if(globalTrue)
(12,)
(13,)
(14, sizeof(char)
(15,(char *)
(16,NULL)
(17,globalTrue)
(18,char)
(19,data)
(20,100)
(21,globalTrue)
(22,1)
(23,strcpy(data, "A String")
(24,char *)
(25,-1)
(26,if(globalTrue)
(27,"A String")
(28,data = (char *)
(29,data)
(30,exit(-1)
(31,data == NULL)
(32,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^