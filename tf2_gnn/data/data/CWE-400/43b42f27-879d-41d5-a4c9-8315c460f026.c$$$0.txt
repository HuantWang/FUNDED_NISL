-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* FIX: Use a relatively small number for memory allocation */
    data = 20;
    goto sink;
sink:
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
19,20
19,21
21,22
22,23
22,24
23,24
26,27
28,29
28,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,18,20,24,25,27,29,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* FIX: Use a relatively small number for memory allocation */    data = 20;    goto sink;sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* FIX: Use a relatively small number for memory allocation */    data = 20;    goto sink;sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* FIX: Use a relatively small number for memory allocation */    data = 20;
source
data = 20;
data = 20
data
data
20
goto sink;
sink
sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
sink
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(20,35,0)
(13,31,0)
(40,30,0)
(21,15,0)
(44,4,0)
(28,30,0)
(45,15,0)
(32,31,0)
(7,5,0)
(19,11,0)
(1,7,0)
(12,8,0)
(0,7,0)
(27,23,0)
(10,15,0)
(23,45,0)
(4,8,0)
(2,5,0)
(9,40,0)
(14,30,0)
(37,2,0)
(18,30,0)
(41,24,0)
(31,13,0)
(17,0,0)
(47,30,0)
(38,7,0)
(0,5,0)
(46,35,0)
(23,27,0)
(4,11,0)
(3,10,0)
(15,8,0)
(45,23,0)
(23,7,0)
(15,45,0)
(11,4,0)
(2,7,0)
(33,22,0)
(13,6,0)
(35,30,0)
(16,30,0)
(39,24,0)
(24,7,0)
(34,38,0)
(26,2,0)
(8,30,0)
(38,5,0)
(42,8,0)
(15,10,0)
(7,23,0)
(25,5,0)
(29,33,0)
(36,40,0)
(24,7,1)
(4,8,1)
(41,7,1)
(43,33,1)
(21,1,1)
(0,17,1)
(7,23,1)
(26,24,1)
(23,45,1)
(0,7,1)
(2,37,1)
(35,46,1)
(17,38,1)
(8,12,1)
(19,44,1)
(38,7,1)
(12,42,1)
(45,15,1)
(1,4,1)
(15,8,1)
(34,2,1)
(24,39,1)
(3,21,1)
(42,47,1)
(44,18,1)
(10,3,1)
(13,31,1)
(31,32,1)
(32,24,1)
(15,10,1)
(18,8,1)
(4,11,1)
(37,26,1)
(33,29,1)
(39,41,1)
(2,7,1)
(47,35,1)
(38,34,1)
(26,13,1)
(29,4,1)
(46,20,1)
(43,0,1)
(11,19,1)
(23,27,1)
(13,24,2)
(7,23,2)
(41,4,2)
(17,4,2)
(3,4,2)
(24,4,2)
(15,8,2)
(45,4,2)
(31,24,2)
(32,24,2)
(26,4,2)
(45,15,2)
(23,4,2)
(23,27,2)
(7,4,2)
(0,7,2)
(15,4,2)
(33,4,2)
(38,7,2)
(15,10,2)
(24,7,2)
(0,4,2)
(2,4,2)
(38,4,2)
(1,4,2)
(29,4,2)
(23,45,2)
(37,4,2)
(4,11,2)
(39,4,2)
(4,8,2)
(21,4,2)
(13,31,2)
(2,7,2)
(34,4,2)
(10,4,2)
-----------------------------------
(0,free(myString)
(1,myString)
(2,strcpy(myString, HELLO_STRING)
(3,char)
(4,data > strlen(HELLO_STRING)
(5,)
(6,)
(7,myString = (char *)
(8,data = 20)
(9,myString)
(10,sizeof(char)
(11,strlen(HELLO_STRING)
(12,20)
(13,exit(-1)
(14,sink:)
(15,data*sizeof(char)
(16,source:)
(17,myString)
(18,goto sink;)
(19,HELLO_STRING)
(20,data)
(21,data)
(22,)
(23,(char *)
(24,myString == NULL)
(25,if (myString == NULL)
(26,myString)
(27,char *)
(28,data)
(29,"Input is less than the length of the source string")
(30,)
(31,-1)
(32,1)
(33,printLine("Input is less than the length of the source string")
(34,myString)
(35,data = 0)
(36,if (data > strlen(HELLO_STRING)
(37,HELLO_STRING)
(38,printLine(myString)
(39,NULL)
(40,)
(41,myString)
(42,data)
(43,RET)
(44,data)
(45,malloc(data*sizeof(char)
(46,0)
(47,goto source;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^