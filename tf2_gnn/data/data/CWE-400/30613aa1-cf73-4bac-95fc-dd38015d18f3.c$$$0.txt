-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
        break;
    }
    while(1)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
26,27
26,28
28,29
28,30
29,30
29,31
30,31
31,32
31,33
33,34
33,35
36,37
36,38
36,39
37,38
37,39
38,39
40,41
40,42
41,42
43,44
45,46
45,47
45,48
45,49
45,50
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
53,54
55,56
55,57
56,57
58,59
58,60
59,60
61,62
62,63
62,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
79,82
80,81
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
100,101
100,102
101,102
-----nextToken-----
2,4,9,11,15,16,18,23,24,25,27,32,34,35,39,42,44,49,52,54,57,60,63,64,68,70,75,77,81,83,85,89,91,95,97,102,103,104
-----computeFrom-----
13,14
13,15
21,22
21,23
37,38
37,39
47,48
47,49
58,59
58,60
66,67
66,68
-----guardedBy-----
44,85
39,60
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }
1
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }
data = 20;
data = 20
data
data
20
break;
while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
1
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
-----joern-----
(44,31,0)
(12,38,0)
(47,20,0)
(6,34,0)
(37,22,0)
(32,13,0)
(28,48,0)
(14,19,0)
(39,9,0)
(41,13,0)
(50,42,0)
(27,29,0)
(11,49,0)
(15,39,0)
(21,49,0)
(45,46,0)
(40,22,0)
(48,29,0)
(43,51,0)
(24,34,0)
(8,51,0)
(19,6,0)
(38,36,0)
(18,6,0)
(1,6,0)
(5,17,0)
(10,29,0)
(20,19,0)
(17,51,0)
(23,17,0)
(21,2,0)
(48,14,0)
(26,19,0)
(36,6,0)
(49,21,0)
(33,39,0)
(42,31,0)
(27,31,0)
(13,31,0)
(4,36,0)
(42,29,0)
(46,3,0)
(36,38,0)
(22,29,0)
(19,14,0)
(48,28,0)
(29,31,0)
(19,17,0)
(29,48,0)
(35,9,0)
(14,48,0)
(36,17,0)
(13,29,0)
(19,20,0)
(7,51,0)
(0,27,0)
(1,25,1)
(36,6,1)
(32,21,1)
(50,13,1)
(48,14,1)
(25,17,1)
(37,40,1)
(19,17,1)
(11,22,1)
(16,25,1)
(12,4,1)
(35,46,1)
(27,0,1)
(30,16,1)
(6,18,1)
(42,29,1)
(10,36,1)
(23,5,1)
(13,41,1)
(35,27,1)
(36,38,1)
(18,1,1)
(4,16,1)
(20,47,1)
(47,26,1)
(13,29,1)
(16,24,1)
(17,23,1)
(45,36,1)
(19,20,1)
(19,6,1)
(22,29,1)
(22,37,1)
(40,29,1)
(14,19,1)
(48,28,1)
(27,29,1)
(29,48,1)
(0,42,1)
(21,49,1)
(46,45,1)
(49,11,1)
(24,6,1)
(36,17,1)
(41,32,1)
(30,35,1)
(26,10,1)
(32,22,1)
(38,12,1)
(42,50,1)
(21,49,2)
(36,6,2)
(49,22,2)
(48,14,2)
(22,36,2)
(1,25,2)
(40,36,2)
(26,36,2)
(14,36,2)
(19,17,2)
(46,36,2)
(50,36,2)
(18,25,2)
(4,16,2)
(37,36,2)
(41,36,2)
(27,36,2)
(42,29,2)
(29,48,2)
(47,36,2)
(45,36,2)
(32,36,2)
(29,36,2)
(10,36,2)
(11,22,2)
(48,36,2)
(6,25,2)
(22,29,2)
(19,36,2)
(13,29,2)
(13,36,2)
(14,19,2)
(19,6,2)
(24,25,2)
(12,16,2)
(38,16,2)
(21,22,2)
(48,28,2)
(27,29,2)
(42,36,2)
(19,20,2)
(20,36,2)
(36,16,2)
(36,17,2)
(0,36,2)
(35,16,2)
(36,38,2)
-----------------------------------
(0,myString)
(1,data)
(2,)
(3,)
(4,data)
(5,data)
(6,data = 20)
(7,while(1)
(8,data)
(9,)
(10,myString)
(11,1)
(12,HELLO_STRING)
(13,wcscpy(myString, HELLO_STRING)
(14,malloc(data*sizeof(wchar_t)
(15,myString)
(16,1)
(17,data = 0)
(18,20)
(19,data*sizeof(wchar_t)
(20,sizeof(wchar_t)
(21,exit(-1)
(22,myString == NULL)
(23,0)
(24,break;)
(25,1)
(26,data)
(27,free(myString)
(28,wchar_t *)
(29,myString = (wchar_t *)
(30,RET)
(31,)
(32,myString)
(33,if (data > wcslen(HELLO_STRING)
(34,)
(35,break;)
(36,data > wcslen(HELLO_STRING)
(37,NULL)
(38,wcslen(HELLO_STRING)
(39,)
(40,myString)
(41,HELLO_STRING)
(42,printWLine(myString)
(43,while(1)
(44,if (myString == NULL)
(45,"Input is less than the length of the source string")
(46,printLine("Input is less than the length of the source string")
(47,wchar_t)
(48,(wchar_t *)
(49,-1)
(50,myString)
(51,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^