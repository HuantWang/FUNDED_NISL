-----label-----
0
-----code-----
static void goodB2G2Sink(size_t data)
{
    if(goodB2G2Static)
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
50,51
52,53
53,54
53,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
71,72
73,74
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
-----nextToken-----
2,4,7,9,13,18,20,21,26,29,31,34,35,40,43,45,48,51,54,55,59,61,66,68,72,74,76,80,82,86,88,93,94
-----computeFrom-----
23,24
23,25
24,25
24,26
32,33
32,34
38,39
38,40
49,50
49,51
57,58
57,59
-----guardedBy-----
31,76
34,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2Sink(size_t data){    if(goodB2G2Static)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2Sink(size_t data)
goodB2G2Sink
size_t data
size_t
size_t
data
data
{    if(goodB2G2Static)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
if(goodB2G2Static)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
goodB2G2Static
goodB2G2Static
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(14,3,0)
(11,1,0)
(25,42,0)
(25,15,0)
(43,42,0)
(21,42,0)
(18,2,0)
(44,23,0)
(20,28,0)
(0,30,0)
(7,11,0)
(10,25,0)
(3,11,0)
(31,37,0)
(32,13,0)
(17,35,0)
(26,2,0)
(11,3,0)
(17,5,0)
(5,30,0)
(5,1,0)
(13,33,0)
(35,17,0)
(43,15,0)
(15,42,0)
(37,11,0)
(8,19,0)
(35,16,0)
(9,15,0)
(29,28,0)
(24,15,0)
(11,37,0)
(4,31,0)
(12,23,0)
(34,43,0)
(6,31,0)
(16,35,0)
(22,43,0)
(2,15,0)
(20,38,0)
(28,20,0)
(27,9,0)
(5,17,0)
(9,42,0)
(37,31,0)
(41,5,0)
(30,5,0)
(23,40,0)
(15,35,0)
(35,15,0)
(31,1,0)
(5,1,1)
(9,15,1)
(17,5,1)
(37,11,1)
(3,14,1)
(25,15,1)
(2,18,1)
(25,10,1)
(39,25,1)
(5,30,1)
(18,26,1)
(22,2,1)
(30,0,1)
(14,7,1)
(37,31,1)
(9,27,1)
(22,20,1)
(15,35,1)
(7,36,1)
(27,43,1)
(35,16,1)
(43,15,1)
(31,1,1)
(31,6,1)
(29,2,1)
(11,3,1)
(32,37,1)
(11,1,1)
(13,32,1)
(24,37,1)
(0,41,1)
(10,9,1)
(2,15,1)
(34,22,1)
(39,13,1)
(6,4,1)
(20,28,1)
(26,15,1)
(41,24,1)
(39,36,1)
(28,29,1)
(43,34,1)
(4,11,1)
(35,17,1)
(41,37,2)
(4,11,2)
(5,37,2)
(43,15,2)
(17,5,2)
(30,37,2)
(18,37,2)
(11,1,2)
(32,37,2)
(0,37,2)
(34,37,2)
(26,37,2)
(35,37,2)
(6,11,2)
(10,37,2)
(20,28,2)
(15,35,2)
(37,11,2)
(2,37,2)
(35,17,2)
(2,15,2)
(3,36,2)
(9,15,2)
(7,36,2)
(11,36,2)
(29,2,2)
(31,1,2)
(37,36,2)
(31,11,2)
(22,37,2)
(15,37,2)
(28,2,2)
(25,15,2)
(35,16,2)
(5,30,2)
(5,1,2)
(27,37,2)
(11,3,2)
(13,37,2)
(25,37,2)
(24,37,2)
(37,31,2)
(9,37,2)
(14,36,2)
(20,2,2)
(17,37,2)
(43,37,2)
-----------------------------------
(0,wchar_t)
(1,size_t data)
(2,myString == NULL)
(3,wcslen(HELLO_STRING)
(4,data)
(5,data*sizeof(wchar_t)
(6,100)
(7,data)
(8,if(goodB2G2Static)
(9,printWLine(myString)
(10,myString)
(11,data > wcslen(HELLO_STRING)
(12,myString)
(13,printLine("Input is less than the length of the source string or too large")
(14,HELLO_STRING)
(15,myString = (wchar_t *)
(16,wchar_t *)
(17,malloc(data*sizeof(wchar_t)
(18,NULL)
(19,)
(20,exit(-1)
(21,if (myString == NULL)
(22,myString)
(23,)
(24,myString)
(25,free(myString)
(26,myString)
(27,myString)
(28,-1)
(29,1)
(30,sizeof(wchar_t)
(31,data < 100)
(32,"Input is less than the length of the source string or too large")
(33,)
(34,HELLO_STRING)
(35,(wchar_t *)
(36,goodB2G2Static)
(37,data > wcslen(HELLO_STRING)
(38,)
(39,RET)
(40,)
(41,data)
(42,)
(43,wcscpy(myString, HELLO_STRING)
(44,if (data > wcslen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^