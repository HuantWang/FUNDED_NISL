-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_06_bad()
{
    if(STATIC_CONST_FIVE==5)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
89,92
90,91
92,93
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,50,52,53,57,59,63,66,68,71,73,76,79,80,84,86,91,93,94,98,100,104,106
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
61,62
61,63
74,75
74,76
82,83
82,84
-----guardedBy-----
84,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_06_bad(){    if(STATIC_CONST_FIVE==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_06_bad()
CWE401_Memory_Leak__malloc_realloc_char_06_bad
{    if(STATIC_CONST_FIVE==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(STATIC_CONST_FIVE==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(3,6,0)
(22,14,0)
(19,32,0)
(10,6,0)
(47,13,0)
(5,38,0)
(42,29,0)
(30,5,0)
(12,10,0)
(7,6,0)
(52,20,0)
(28,24,0)
(4,50,0)
(20,37,0)
(13,43,0)
(29,50,0)
(31,10,0)
(44,11,0)
(32,50,0)
(22,6,0)
(50,14,0)
(48,14,0)
(16,3,0)
(27,2,0)
(29,37,0)
(45,6,0)
(2,34,0)
(7,46,0)
(21,3,0)
(6,14,0)
(11,50,0)
(51,14,0)
(40,22,0)
(16,38,0)
(38,16,0)
(3,21,0)
(3,16,0)
(25,38,0)
(46,7,0)
(36,6,0)
(7,34,0)
(45,14,0)
(46,9,0)
(49,47,0)
(26,22,0)
(9,46,0)
(34,7,0)
(15,11,0)
(14,17,0)
(23,41,0)
(34,2,0)
(32,37,0)
(0,7,0)
(39,34,0)
(6,3,0)
(46,50,0)
(33,29,0)
(1,45,0)
(18,14,0)
(38,5,0)
(8,24,0)
(20,50,0)
(50,46,0)
(13,47,0)
(49,10,1)
(20,50,1)
(29,33,1)
(20,52,1)
(29,50,1)
(33,42,1)
(5,30,1)
(3,16,1)
(36,24,1)
(1,22,1)
(4,45,1)
(35,24,1)
(15,50,1)
(50,46,1)
(32,50,1)
(26,40,1)
(40,13,1)
(11,44,1)
(47,49,1)
(39,0,1)
(32,19,1)
(31,6,1)
(3,21,1)
(52,29,1)
(10,6,1)
(30,25,1)
(16,38,1)
(38,5,1)
(44,15,1)
(35,11,1)
(2,27,1)
(22,26,1)
(7,6,1)
(13,47,1)
(45,6,1)
(10,12,1)
(11,50,1)
(28,8,1)
(24,28,1)
(27,39,1)
(45,1,1)
(7,34,1)
(0,4,1)
(46,9,1)
(19,20,1)
(25,36,1)
(40,10,1)
(35,32,1)
(34,2,1)
(6,3,1)
(42,11,1)
(12,31,1)
(46,7,1)
(22,6,1)
(7,34,2)
(7,6,2)
(32,50,2)
(10,6,2)
(3,16,2)
(11,50,2)
(32,11,2)
(2,24,2)
(25,24,2)
(22,24,2)
(46,7,2)
(16,38,2)
(29,11,2)
(3,24,2)
(50,46,2)
(6,3,2)
(3,21,2)
(19,11,2)
(5,24,2)
(49,10,2)
(13,10,2)
(13,47,2)
(16,24,2)
(46,24,2)
(1,24,2)
(52,11,2)
(7,24,2)
(45,6,2)
(30,24,2)
(0,24,2)
(40,24,2)
(15,24,2)
(34,24,2)
(44,24,2)
(27,24,2)
(20,11,2)
(38,24,2)
(20,50,2)
(38,5,2)
(12,24,2)
(11,24,2)
(31,24,2)
(39,24,2)
(50,24,2)
(4,24,2)
(46,9,2)
(36,24,2)
(6,24,2)
(10,24,2)
(47,10,2)
(45,24,2)
(34,2,2)
(29,50,2)
(22,6,2)
(33,11,2)
(26,24,2)
(42,11,2)
-----------------------------------
(0,data)
(1,data)
(2,sizeof(char)
(3,(char *)
(4,data)
(5,sizeof(char)
(6,* data = (char *)
(7,realloc(data, (130000)
(8,STATIC_CONST_FIVE)
(9,char *)
(10,data == NULL)
(11,data != NULL)
(12,NULL)
(13,exit(-1)
(14,)
(15,data)
(16,malloc(100*sizeof(char)
(17,)
(18,if (data != NULL)
(19,data)
(20,printLine(data)
(21,char *)
(22,strcpy(data, "A String")
(23,if(STATIC_CONST_FIVE==5)
(24,STATIC_CONST_FIVE==5)
(25,100)
(26,"A String")
(27,char)
(28,5)
(29,strcpy(data, "New String")
(30,char)
(31,data)
(32,free(data)
(33,"New String")
(34,(130000)
(35,RET)
(36,data)
(37,)
(38,100*sizeof(char)
(39,130000)
(40,data)
(41,)
(42,data)
(43,)
(44,NULL)
(45,printLine(data)
(46,(char *)
(47,-1)
(48,data)
(49,1)
(50,data = (char *)
(51,if (data == NULL)
(52,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^