-----label-----
1
-----code-----
static void
winimg_hibernate(imglist *img)
{
  size_t size = img->pixelwidth * img->pixelheight * 4;

  if (!img->hdc)
    return;

  temp_strage_t *strage = strage_create();
  if (!strage)
    return;

  if (!strage_write(strage, img->pixels, size)) {
    strage_destroy(strage);
    return;
  }

  // delete allocated DIB section.
  cdc++;
  DeleteDC(img->hdc);
  DeleteObject(img->hbmp);
  img->pixels = NULL;
  img->hdc = NULL;
  img->hbmp = NULL;

  img->strage = strage;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
20,22
21,22
21,23
22,23
25,26
25,27
26,27
30,31
30,32
31,32
32,33
32,34
33,34
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
46,47
48,49
48,50
49,50
50,51
53,54
53,55
54,55
55,56
55,57
55,58
55,59
56,57
58,59
60,61
60,62
61,62
64,65
66,67
66,68
67,68
68,69
68,70
69,70
71,72
74,75
75,76
76,77
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
87,88
87,89
88,89
90,91
90,92
91,92
94,95
95,96
95,97
96,97
96,98
97,98
100,101
102,103
103,104
103,105
104,105
104,106
105,106
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
118,119
119,120
119,121
120,121
120,122
121,122
124,125
-----nextToken-----
2,4,7,9,10,15,17,23,24,27,28,29,34,35,36,40,42,43,47,51,52,57,59,62,63,65,70,72,73,77,81,84,85,89,92,93,98,99,101,106,107,109,114,115,117,122,123,125
-----computeFrom-----
19,20
19,21
20,21
20,22
95,96
95,97
103,104
103,105
111,112
111,113
119,120
119,121
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static voidwinimg_hibernate(imglist *img){  size_t size = img->pixelwidth * img->pixelheight * 4;  if (!img->hdc)    return;  temp_strage_t *strage = strage_create();  if (!strage)    return;  if (!strage_write(strage, img->pixels, size)) {    strage_destroy(strage);    return;  }  // delete allocated DIB section.  cdc++;  DeleteDC(img->hdc);  DeleteObject(img->hbmp);  img->pixels = NULL;  img->hdc = NULL;  img->hbmp = NULL;  img->strage = strage;}
static void
winimg_hibernate(imglist *img)
winimg_hibernate
imglist *img
imglist
imglist
*img
*
img
{  size_t size = img->pixelwidth * img->pixelheight * 4;  if (!img->hdc)    return;  temp_strage_t *strage = strage_create();  if (!strage)    return;  if (!strage_write(strage, img->pixels, size)) {    strage_destroy(strage);    return;  }  // delete allocated DIB section.  cdc++;  DeleteDC(img->hdc);  DeleteObject(img->hbmp);  img->pixels = NULL;  img->hdc = NULL;  img->hbmp = NULL;  img->strage = strage;}
size_t size = img->pixelwidth * img->pixelheight * 4;
size_t size = img->pixelwidth * img->pixelheight * 4;
size_t
size_t
size = img->pixelwidth * img->pixelheight * 4
size
= img->pixelwidth * img->pixelheight * 4
img->pixelwidth * img->pixelheight * 4
img->pixelwidth * img->pixelheight
img->pixelwidth
img
img
pixelwidth
img->pixelheight
img
img
pixelheight
4
if (!img->hdc)    return;
!img->hdc
img->hdc
img
img
hdc
return;
temp_strage_t *strage = strage_create();
temp_strage_t *strage = strage_create();
temp_strage_t
temp_strage_t
*strage = strage_create()
*
strage
= strage_create()
strage_create()
strage_create
strage_create
if (!strage)    return;
!strage
strage
strage
return;
if (!strage_write(strage, img->pixels, size)) {    strage_destroy(strage);    return;  }
!strage_write(strage, img->pixels, size)
strage_write(strage, img->pixels, size)
strage_write
strage_write
strage
strage
img->pixels
img
img
pixels
size
size
{    strage_destroy(strage);    return;  }
strage_destroy(strage);
strage_destroy(strage)
strage_destroy
strage_destroy
strage
strage
return;
cdc++;
cdc++
cdc
cdc
DeleteDC(img->hdc);
DeleteDC(img->hdc)
DeleteDC
DeleteDC
img->hdc
img
img
hdc
DeleteObject(img->hbmp);
DeleteObject(img->hbmp)
DeleteObject
DeleteObject
img->hbmp
img
img
hbmp
img->pixels = NULL;
img->pixels = NULL
img->pixels
img
img
pixels
NULL
NULL
img->hdc = NULL;
img->hdc = NULL
img->hdc
img
img
hdc
NULL
NULL
img->hbmp = NULL;
img->hbmp = NULL
img->hbmp
img
img
hbmp
NULL
NULL
img->strage = strage;
img->strage = strage
img->strage
img
img
strage
strage
strage
-----joern-----
(4,60,0)
(11,57,0)
(51,15,0)
(25,55,0)
(39,15,0)
(60,41,0)
(15,18,0)
(13,33,0)
(14,18,0)
(6,14,0)
(12,41,0)
(46,51,0)
(12,67,0)
(64,28,0)
(10,51,0)
(52,37,0)
(68,44,0)
(23,18,0)
(38,44,0)
(30,55,0)
(0,64,0)
(66,41,0)
(37,41,0)
(3,14,0)
(62,16,0)
(40,25,0)
(67,64,0)
(69,18,0)
(50,23,0)
(57,41,0)
(22,60,0)
(62,19,0)
(28,35,0)
(35,28,0)
(36,66,0)
(58,34,0)
(44,54,0)
(35,41,0)
(45,1,0)
(28,64,0)
(64,18,0)
(55,25,0)
(5,33,0)
(60,53,0)
(48,35,0)
(62,27,0)
(28,55,0)
(1,14,0)
(32,18,0)
(67,12,0)
(49,18,0)
(61,18,0)
(31,67,0)
(67,31,0)
(14,3,0)
(8,49,0)
(65,67,0)
(67,14,0)
(2,66,0)
(33,41,0)
(53,60,0)
(66,17,0)
(44,41,0)
(59,35,0)
(17,18,0)
(16,47,0)
(70,25,0)
(6,18,0)
(1,47,0)
(34,14,0)
(63,61,0)
(7,12,0)
(21,14,0)
(33,49,0)
(51,41,0)
(24,12,0)
(54,44,0)
(55,28,0)
(26,18,0)
(42,6,0)
(20,67,0)
(53,18,0)
(57,6,0)
(25,41,0)
(56,57,0)
(9,18,0)
(37,23,0)
(29,37,0)
(43,18,0)
(17,66,0)
(67,14,1)
(49,8,1)
(2,61,1)
(56,11,1)
(1,14,1)
(54,44,1)
(67,64,1)
(6,42,1)
(36,2,1)
(48,59,1)
(62,27,1)
(58,14,1)
(17,66,1)
(34,14,1)
(67,65,1)
(63,31,1)
(33,41,1)
(27,54,1)
(33,5,1)
(35,41,1)
(51,41,1)
(24,20,1)
(55,30,1)
(62,6,1)
(44,38,1)
(14,3,1)
(30,25,1)
(34,58,1)
(21,54,1)
(37,52,1)
(61,63,1)
(59,0,1)
(60,4,1)
(19,34,1)
(39,51,1)
(50,37,1)
(64,28,1)
(28,35,1)
(8,33,1)
(52,29,1)
(44,41,1)
(28,55,1)
(38,68,1)
(23,50,1)
(60,41,1)
(7,24,1)
(62,16,1)
(16,1,1)
(22,17,1)
(66,36,1)
(13,53,1)
(70,35,1)
(55,25,1)
(4,22,1)
(20,34,1)
(57,41,1)
(29,15,1)
(65,12,1)
(40,70,1)
(57,56,1)
(12,7,1)
(67,12,1)
(66,41,1)
(42,57,1)
(1,45,1)
(62,19,1)
(12,41,1)
(11,23,1)
(31,67,1)
(53,60,1)
(37,41,1)
(15,39,1)
(68,64,1)
(35,48,1)
(46,49,1)
(25,41,1)
(3,21,1)
(25,40,1)
(45,31,1)
(6,14,1)
(10,46,1)
(51,10,1)
(5,13,1)
(24,34,2)
(51,41,2)
(63,31,2)
(28,55,2)
(28,35,2)
(5,31,2)
(46,31,2)
(62,16,2)
(45,31,2)
(12,41,2)
(39,31,2)
(29,31,2)
(53,60,2)
(52,31,2)
(62,19,2)
(33,41,2)
(17,31,2)
(23,31,2)
(64,28,2)
(65,34,2)
(42,31,2)
(35,41,2)
(49,31,2)
(2,31,2)
(31,67,2)
(36,31,2)
(20,34,2)
(6,14,2)
(3,54,2)
(53,31,2)
(60,41,2)
(19,34,2)
(6,31,2)
(51,31,2)
(14,3,2)
(17,66,2)
(14,54,2)
(67,34,2)
(66,31,2)
(61,31,2)
(57,41,2)
(13,31,2)
(56,31,2)
(60,31,2)
(37,31,2)
(1,31,2)
(54,44,2)
(21,54,2)
(57,31,2)
(34,54,2)
(58,54,2)
(15,31,2)
(31,34,2)
(11,31,2)
(22,31,2)
(25,41,2)
(67,12,2)
(37,41,2)
(44,41,2)
(67,14,2)
(4,31,2)
(50,31,2)
(7,34,2)
(27,54,2)
(55,25,2)
(10,31,2)
(8,31,2)
(67,64,2)
(1,14,2)
(16,31,2)
(62,27,2)
(34,14,2)
(12,34,2)
(33,31,2)
(66,41,2)
-----------------------------------
(0,size)
(1,strage_destroy(strage)
(2,img)
(3,strage_create()
(4,hbmp)
(5,pixels)
(6,img->strage = strage)
(7,pixels)
(8,NULL)
(9,if (!strage)
(10,hdc)
(11,img)
(12,img->pixels)
(13,img)
(14,*strage = strage_create()
(15,img->hdc = NULL)
(16,return;)
(17,DeleteDC(img->hdc)
(18,)
(19,return;)
(20,strage)
(21,strage)
(22,img)
(23,img->hbmp = NULL)
(24,img)
(25,img->pixelheight)
(26,if (!img->hdc)
(27,return;)
(28,img->pixelwidth * img->pixelheight * 4)
(29,img)
(30,4)
(31,!strage_write(strage, img->pixels, size)
(32,strage)
(33,img->pixels)
(34,!strage)
(35,img->pixelwidth)
(36,hdc)
(37,img->hbmp)
(38,hdc)
(39,NULL)
(40,pixelheight)
(41,imglist *img)
(42,strage)
(43,if (!strage_write(strage, img->pixels, size)
(44,img->hdc)
(45,strage)
(46,img)
(47,)
(48,pixelwidth)
(49,img->pixels = NULL)
(50,NULL)
(51,img->hdc)
(52,hbmp)
(53,DeleteObject(img->hbmp)
(54,!img->hdc)
(55,img->pixelheight * 4)
(56,strage)
(57,img->strage)
(58,strage)
(59,img)
(60,img->hbmp)
(61,cdc++)
(62,RET)
(63,cdc)
(64,size = img->pixelwidth * img->pixelheight * 4)
(65,size)
(66,img->hdc)
(67,strage_write(strage, img->pixels, size)
(68,img)
(69,size)
(70,img)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^