-----label-----
0
-----code-----
static void sla_change_trunk_state(const struct sla_trunk *trunk, enum sla_trunk_state state, 
	enum sla_which_trunk_refs inactive_only, const struct sla_trunk_ref *exclude)
{
	struct sla_station *station;
	struct sla_trunk_ref *trunk_ref;

	AST_LIST_TRAVERSE(&sla_stations, station, entry) {
		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {
			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
				|| trunk_ref == exclude)
				continue;
			trunk_ref->state = state;
			ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,
					     "SLA:%s_%s", station->name, trunk->name);
			break;
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
43,46
43,47
44,45
46,47
47,48
49,50
51,52
53,54
54,55
54,56
54,57
55,56
56,57
56,58
56,59
56,60
57,58
59,60
60,61
60,62
61,62
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
70,72
71,72
71,73
72,73
72,74
73,74
73,75
74,75
74,76
75,76
78,79
80,81
81,82
81,83
81,84
82,83
84,85
84,86
85,86
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
104,107
104,108
104,109
104,110
105,106
107,108
107,109
108,109
110,111
112,113
115,116
115,117
116,117
119,120
119,121
120,121
-----nextToken-----
2,4,7,9,10,13,15,18,20,23,25,26,31,33,34,38,40,41,45,48,50,52,58,62,63,65,67,76,77,79,83,86,87,88,91,93,94,99,100,102,106,109,111,113,114,117,118,121,122,123
-----computeFrom-----
71,72
71,73
72,73
72,74
73,74
73,75
89,90
89,91
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;
-----ast_node-----
static void sla_change_trunk_state(const struct sla_trunk *trunk, enum sla_trunk_state state, 	enum sla_which_trunk_refs inactive_only, const struct sla_trunk_ref *exclude){	struct sla_station *station;	struct sla_trunk_ref *trunk_ref;	AST_LIST_TRAVERSE(&sla_stations, station, entry) {		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name);			break;		}	}}
static void
sla_change_trunk_state(const struct sla_trunk *trunk, enum sla_trunk_state state, 	enum sla_which_trunk_refs inactive_only, const struct sla_trunk_ref *exclude)
sla_change_trunk_state
const struct sla_trunk *trunk
const struct sla_trunk
sla_trunk
*trunk
*
trunk
enum sla_trunk_state state
enum sla_trunk_state
sla_trunk_state
state
state
enum sla_which_trunk_refs inactive_only
enum sla_which_trunk_refs
sla_which_trunk_refs
inactive_only
inactive_only
const struct sla_trunk_ref *exclude
const struct sla_trunk_ref
sla_trunk_ref
*exclude
*
exclude
{	struct sla_station *station;	struct sla_trunk_ref *trunk_ref;	AST_LIST_TRAVERSE(&sla_stations, station, entry) {		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name);			break;		}	}}
struct sla_station *station;
struct sla_station *station;
struct sla_station
sla_station
*station
*
station
struct sla_trunk_ref *trunk_ref;
struct sla_trunk_ref *trunk_ref;
struct sla_trunk_ref
sla_trunk_ref
*trunk_ref
*
trunk_ref
AST_LIST_TRAVERSE(&sla_stations, station, entry)
AST_LIST_TRAVERSE(&sla_stations, station, entry)
AST_LIST_TRAVERSE
AST_LIST_TRAVERSE
&sla_stations
sla_stations
sla_stations
station
station
entry
entry
)
{		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name);			break;		}	}
AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry)
AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry)
AST_LIST_TRAVERSE
AST_LIST_TRAVERSE
&station->trunks
station->trunks
station
station
trunks
trunk_ref
trunk_ref
entry
entry
)
{			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name);			break;		}
if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;
trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude
trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
trunk_ref->trunk != trunk
trunk_ref->trunk
trunk_ref
trunk_ref
trunk
trunk
trunk
(inactive_only ? trunk_ref->chan : 0)
inactive_only ? trunk_ref->chan : 0
inactive_only
inactive_only
trunk_ref->chan
trunk_ref
trunk_ref
chan
0
trunk_ref == exclude
trunk_ref
trunk_ref
exclude
exclude
continue;
trunk_ref->state = state;
trunk_ref->state = state
trunk_ref->state
trunk_ref
trunk_ref
state
state
state
ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name);
ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name)
ast_devstate_changed
ast_devstate_changed
sla_state_to_devstate(state)
sla_state_to_devstate
sla_state_to_devstate
state
state
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
"SLA:%s_%s"
station->name
station
station
name
trunk->name
trunk
trunk
name
break;
-----joern-----
(11,37,0)
(2,20,0)
(25,17,0)
(8,0,0)
(31,1,0)
(39,8,0)
(21,39,0)
(8,29,0)
(0,8,0)
(19,2,0)
(27,4,0)
(28,8,0)
(40,43,0)
(32,27,0)
(2,37,0)
(31,2,0)
(27,1,0)
(26,43,0)
(35,5,0)
(12,9,0)
(7,43,0)
(16,39,0)
(10,9,0)
(5,1,0)
(44,5,0)
(18,0,0)
(24,27,0)
(15,27,0)
(13,12,0)
(41,29,0)
(1,27,0)
(8,39,0)
(34,8,0)
(1,5,0)
(39,20,0)
(9,36,0)
(29,8,0)
(23,37,0)
(5,30,0)
(27,24,0)
(6,12,0)
(22,29,0)
(3,24,0)
(14,24,0)
(8,17,0)
(0,36,0)
(17,26,0)
(9,17,0)
(2,31,0)
(1,31,0)
(38,17,0)
(37,2,0)
(39,16,1)
(27,4,1)
(39,20,1)
(28,0,1)
(1,5,1)
(8,0,1)
(13,33,1)
(35,27,1)
(42,38,1)
(0,18,1)
(11,23,1)
(22,41,1)
(18,9,1)
(6,13,1)
(24,3,1)
(33,31,1)
(15,32,1)
(8,29,1)
(27,15,1)
(41,34,1)
(27,24,1)
(21,29,1)
(44,35,1)
(3,14,1)
(19,37,1)
(0,36,1)
(5,30,1)
(34,28,1)
(32,2,1)
(37,11,1)
(9,36,1)
(10,12,1)
(31,1,1)
(16,21,1)
(1,27,1)
(12,6,1)
(2,19,1)
(9,10,1)
(38,8,1)
(2,37,1)
(29,22,1)
(13,31,1)
(2,20,1)
(8,39,1)
(14,32,1)
(31,2,1)
(5,44,1)
(32,2,2)
(1,27,2)
(27,24,2)
(44,27,2)
(5,27,2)
(8,39,2)
(31,2,2)
(31,1,2)
(2,37,2)
(14,32,2)
(1,5,2)
(39,20,2)
(15,32,2)
(9,36,2)
(1,2,2)
(35,27,2)
(8,29,2)
(8,0,2)
(27,2,2)
(33,31,2)
(2,20,2)
(5,30,2)
(27,4,2)
(0,36,2)
(3,32,2)
(24,32,2)
-----------------------------------
(0,sla_state_to_devstate(state)
(1,(inactive_only ? trunk_ref->chan : 0)
(2,trunk_ref->trunk != trunk)
(3,chan)
(4,enum sla_which_trunk_refs inactive_only)
(5,trunk_ref == exclude)
(6,state)
(7,station)
(8,ast_devstate_changed(sla_state_to_devstate(state)
(9,trunk_ref->state = state)
(10,state)
(11,trunk)
(12,trunk_ref->state)
(13,trunk_ref)
(14,trunk_ref)
(15,0)
(16,name)
(17,)
(18,state)
(19,trunk)
(20,const struct sla_trunk *trunk)
(21,trunk)
(22,name)
(23,trunk_ref)
(24,trunk_ref->chan)
(25,if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
(26,)
(27,inactive_only ? trunk_ref->chan : 0)
(28,AST_DEVSTATE_CACHABLE)
(29,station->name)
(30,const struct sla_trunk_ref *exclude)
(31,trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
(32,inactive_only)
(33,continue;)
(34,"SLA:%s_%s")
(35,trunk_ref)
(36,enum sla_trunk_state state)
(37,trunk_ref->trunk)
(38,break;)
(39,trunk->name)
(40,trunk_ref)
(41,station)
(42,RET)
(43,)
(44,exclude)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^