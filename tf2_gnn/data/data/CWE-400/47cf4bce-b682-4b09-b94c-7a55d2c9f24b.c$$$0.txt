-----label-----
1
-----code-----
int peer_queue_reply(Peer *sender, const char *destination, uint32_t reply_serial, Message *message) {
        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;
        Peer *receiver;
        Address addr;
        int r;

        address_from_string(&addr, destination);
        if (addr.type != ADDRESS_TYPE_ID)
                return PEER_E_UNEXPECTED_REPLY;

        slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial);
        if (!slot)
                return PEER_E_UNEXPECTED_REPLY;

        receiver = c_container_of(slot->owner, Peer, owned_replies);

        r = connection_queue(&receiver->connection, NULL, message);
        if (r) {
                if (r == CONNECTION_E_QUOTA) {
                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);

                        connection_shutdown(&receiver->connection);

                        log_append_here(receiver->bus->log, LOG_WARNING, 0);
                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,
                                                   sender->policy->seclabel, receiver->policy->seclabel, message);
                        r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",
                                        receiver->id);
                        if (r)
                                return error_fold(r);
                } else {
                        return error_fold(r);
                }
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
17,18
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
28,29
29,30
29,31
30,31
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
40,42
40,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
62,63
64,65
65,66
65,67
65,68
66,67
68,69
69,70
71,72
73,74
73,75
74,75
74,76
75,76
75,77
76,77
79,80
81,82
82,83
84,85
85,86
85,87
86,87
88,89
88,90
88,91
88,92
89,90
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
102,103
102,104
103,104
104,105
106,107
107,108
109,110
110,111
110,112
111,112
113,114
113,115
113,116
113,117
114,115
116,117
116,118
117,118
120,121
122,123
124,125
125,126
125,127
126,127
128,129
128,130
128,131
128,132
129,130
131,132
132,133
132,134
133,134
136,137
138,139
140,141
140,142
141,142
143,144
144,145
144,146
144,147
145,146
145,147
146,147
148,149
150,151
150,152
150,153
150,154
150,155
150,156
150,157
151,152
152,153
152,154
153,154
155,156
155,157
157,158
158,159
158,160
159,160
161,162
162,163
162,164
163,164
166,167
167,168
167,169
168,169
170,171
170,172
172,173
173,174
173,175
174,175
176,177
177,178
177,179
178,179
181,182
182,183
182,184
183,184
185,186
186,187
186,188
187,188
190,191
191,192
191,193
191,194
191,195
192,193
194,195
194,196
195,196
195,197
196,197
200,201
203,204
204,205
204,206
204,207
204,208
204,209
204,210
204,211
204,212
204,213
205,206
207,208
207,209
208,209
211,212
211,213
212,213
215,216
215,217
216,217
219,220
220,221
222,223
223,224
225,226
225,227
226,227
226,228
227,228
231,232
231,233
232,233
232,234
233,234
237,238
239,240
240,241
240,242
241,242
243,244
243,245
243,246
243,247
244,245
246,247
246,248
247,248
247,249
248,249
253,254
253,255
254,255
257,258
257,259
258,259
260,261
261,262
261,263
262,263
264,265
266,267
267,268
268,269
268,270
269,270
271,272
273,274
-----nextToken-----
2,4,7,9,10,12,14,15,18,20,23,25,26,31,34,39,41,42,45,49,51,52,56,58,61,63,67,70,72,77,78,80,83,87,90,94,95,98,99,101,105,108,112,115,118,119,121,123,127,130,134,135,137,139,142,147,149,154,156,160,164,165,169,171,175,179,180,184,188,189,193,197,198,199,201,202,206,209,210,213,214,217,218,221,224,228,229,230,234,235,236,238,242,245,249,250,251,252,255,256,259,263,265,270,272,274
-----computeFrom-----
74,75
74,76
85,86
85,87
110,111
110,112
125,126
125,127
145,146
145,147
240,241
240,242
-----guardedBy-----
147,265
-----guardedByNegation-----
147,272
-----lastLexicalUse-----
147,272
-----jump-----
147,272
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int peer_queue_reply(Peer *sender, const char *destination, uint32_t reply_serial, Message *message) {        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;        Peer *receiver;        Address addr;        int r;        address_from_string(&addr, destination);        if (addr.type != ADDRESS_TYPE_ID)                return PEER_E_UNEXPECTED_REPLY;        slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial);        if (!slot)                return PEER_E_UNEXPECTED_REPLY;        receiver = c_container_of(slot->owner, Peer, owned_replies);        r = connection_queue(&receiver->connection, NULL, message);        if (r) {                if (r == CONNECTION_E_QUOTA) {                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                        receiver->id);                        if (r)                                return error_fold(r);                } else {                        return error_fold(r);                }        }        return 0;}
int
peer_queue_reply(Peer *sender, const char *destination, uint32_t reply_serial, Message *message)
peer_queue_reply
Peer *sender
Peer
Peer
*sender
*
sender
const char *destination
const char
*destination
*
destination
uint32_t reply_serial
uint32_t
uint32_t
reply_serial
reply_serial
Message *message
Message
Message
*message
*
message
{        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;        Peer *receiver;        Address addr;        int r;        address_from_string(&addr, destination);        if (addr.type != ADDRESS_TYPE_ID)                return PEER_E_UNEXPECTED_REPLY;        slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial);        if (!slot)                return PEER_E_UNEXPECTED_REPLY;        receiver = c_container_of(slot->owner, Peer, owned_replies);        r = connection_queue(&receiver->connection, NULL, message);        if (r) {                if (r == CONNECTION_E_QUOTA) {                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                        receiver->id);                        if (r)                                return error_fold(r);                } else {                        return error_fold(r);                }        }        return 0;}
_c_cleanup_(reply_slot_freep)
_c_cleanup_(reply_slot_freep)
_c_cleanup_
_c_cleanup_
(reply_slot_freep)
reply_slot_freep
reply_slot_freep
)
ReplySlot *slot = NULL;
ReplySlot *slot = NULL;
ReplySlot
ReplySlot
*slot = NULL
*
slot
= NULL
NULL
NULL
Peer *receiver;
Peer *receiver;
Peer
Peer
*receiver
*
receiver
Address addr;
Address addr;
Address
Address
addr
addr
int r;
int r;
int
r
r
address_from_string(&addr, destination);
address_from_string(&addr, destination)
address_from_string
address_from_string
&addr
addr
addr
destination
destination
if (addr.type != ADDRESS_TYPE_ID)                return PEER_E_UNEXPECTED_REPLY;
addr.type != ADDRESS_TYPE_ID
addr.type
addr
addr
type
ADDRESS_TYPE_ID
ADDRESS_TYPE_ID
return PEER_E_UNEXPECTED_REPLY;
PEER_E_UNEXPECTED_REPLY
PEER_E_UNEXPECTED_REPLY
slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial);
slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial)
slot
slot
reply_slot_get_by_id(&sender->replies, addr.id, reply_serial)
reply_slot_get_by_id
reply_slot_get_by_id
&sender->replies
sender->replies
sender
sender
replies
addr.id
addr
addr
id
reply_serial
reply_serial
if (!slot)                return PEER_E_UNEXPECTED_REPLY;
!slot
slot
slot
return PEER_E_UNEXPECTED_REPLY;
PEER_E_UNEXPECTED_REPLY
PEER_E_UNEXPECTED_REPLY
receiver = c_container_of(slot->owner, Peer, owned_replies);
receiver = c_container_of(slot->owner, Peer, owned_replies)
receiver
receiver
c_container_of(slot->owner, Peer, owned_replies)
c_container_of
c_container_of
slot->owner
slot
slot
owner
Peer
Peer
owned_replies
owned_replies
r = connection_queue(&receiver->connection, NULL, message);
r = connection_queue(&receiver->connection, NULL, message)
r
r
connection_queue(&receiver->connection, NULL, message)
connection_queue
connection_queue
&receiver->connection
receiver->connection
receiver
receiver
connection
NULL
NULL
message
message
if (r) {                if (r == CONNECTION_E_QUOTA) {                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                        receiver->id);                        if (r)                                return error_fold(r);                } else {                        return error_fold(r);                }        }
r
r
{                if (r == CONNECTION_E_QUOTA) {                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                        receiver->id);                        if (r)                                return error_fold(r);                } else {                        return error_fold(r);                }        }
if (r == CONNECTION_E_QUOTA) {                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                        receiver->id);                        if (r)                                return error_fold(r);                } else {                        return error_fold(r);                }
r == CONNECTION_E_QUOTA
r
r
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
{                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                        receiver->id);                        if (r)                                return error_fold(r);                }
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
NameSet
NameSet
sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
sender_names
= NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
NAME_SET_INIT_FROM_OWNER
NAME_SET_INIT_FROM_OWNER
&sender->owned_names
sender->owned_names
sender
sender
owned_names
NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
NameSet
NameSet
receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
receiver_names
= NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
NAME_SET_INIT_FROM_OWNER
NAME_SET_INIT_FROM_OWNER
&receiver->owned_names
receiver->owned_names
receiver
receiver
owned_names
connection_shutdown(&receiver->connection);
connection_shutdown(&receiver->connection)
connection_shutdown
connection_shutdown
&receiver->connection
receiver->connection
receiver
receiver
connection
log_append_here(receiver->bus->log, LOG_WARNING, 0);
log_append_here(receiver->bus->log, LOG_WARNING, 0)
log_append_here
log_append_here
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
LOG_WARNING
LOG_WARNING
0
bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);
bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message)
bus_log_append_transaction
bus_log_append_transaction
receiver->bus
receiver
receiver
bus
sender->id
sender
sender
id
receiver->id
receiver
receiver
id
&sender_names
sender_names
sender_names
&receiver_names
receiver_names
receiver_names
sender->policy->seclabel
sender->policy
sender
sender
policy
seclabel
receiver->policy->seclabel
receiver->policy
receiver
receiver
policy
seclabel
message
message
r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                        receiver->id);
r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                        receiver->id)
r
r
log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                        receiver->id)
log_commitf
log_commitf
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
"Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested."
receiver->id
receiver
receiver
id
if (r)                                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
{                        return error_fold(r);                }
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(135,70,0)
(140,5,0)
(66,136,0)
(107,116,0)
(114,46,0)
(118,46,0)
(124,0,0)
(100,42,0)
(73,10,0)
(100,70,0)
(44,55,0)
(14,17,0)
(13,71,0)
(59,51,0)
(51,81,0)
(60,111,0)
(34,46,0)
(82,67,0)
(39,137,0)
(71,13,0)
(37,126,0)
(4,17,0)
(89,25,0)
(52,126,0)
(105,126,0)
(107,46,0)
(119,51,0)
(58,142,0)
(13,46,0)
(36,51,0)
(138,107,0)
(49,4,0)
(117,36,0)
(108,3,0)
(108,35,0)
(15,37,0)
(33,77,0)
(16,57,0)
(104,14,0)
(87,95,0)
(137,39,0)
(96,136,0)
(85,114,0)
(42,5,0)
(72,13,0)
(77,27,0)
(121,21,0)
(113,115,0)
(63,10,0)
(110,7,0)
(134,5,0)
(123,16,0)
(117,69,0)
(99,5,0)
(29,17,0)
(77,19,0)
(57,16,0)
(96,99,0)
(99,129,0)
(83,60,0)
(120,126,0)
(136,17,0)
(74,43,0)
(50,5,0)
(116,107,0)
(101,14,0)
(9,11,0)
(68,107,0)
(31,99,0)
(110,140,0)
(19,11,0)
(25,103,0)
(129,99,0)
(69,51,0)
(133,7,0)
(24,126,0)
(76,129,0)
(117,32,0)
(127,43,0)
(45,32,0)
(42,100,0)
(130,35,0)
(142,46,0)
(99,96,0)
(46,13,0)
(11,46,0)
(54,118,0)
(114,99,0)
(0,46,0)
(144,73,0)
(137,104,0)
(77,10,0)
(56,81,0)
(21,7,0)
(108,37,0)
(35,108,0)
(131,111,0)
(61,14,0)
(23,96,0)
(86,29,0)
(75,59,0)
(81,126,0)
(28,123,0)
(30,29,0)
(97,67,0)
(65,140,0)
(98,79,0)
(18,45,0)
(59,126,0)
(20,50,0)
(70,100,0)
(99,114,0)
(123,5,0)
(25,126,0)
(40,71,0)
(88,136,0)
(94,5,0)
(117,98,0)
(91,110,0)
(36,37,0)
(122,108,0)
(106,60,0)
(132,39,0)
(99,4,0)
(29,30,0)
(2,126,0)
(118,99,0)
(47,36,0)
(59,37,0)
(139,39,0)
(6,142,0)
(7,21,0)
(99,139,0)
(67,46,0)
(128,143,0)
(53,51,0)
(12,139,0)
(50,116,0)
(116,50,0)
(98,51,0)
(62,119,0)
(45,140,0)
(117,59,0)
(39,5,0)
(51,119,0)
(30,108,0)
(129,123,0)
(41,4,0)
(32,51,0)
(99,115,0)
(8,13,0)
(70,46,0)
(1,50,0)
(64,5,0)
(108,30,0)
(115,142,0)
(119,62,0)
(95,25,0)
(136,96,0)
(26,70,0)
(19,77,0)
(43,10,0)
(110,67,0)
(0,57,0)
(73,98,0)
(141,0,0)
(4,99,0)
(48,126,0)
(22,77,0)
(21,46,0)
(111,60,0)
(99,27,0)
(98,37,0)
(93,119,0)
(99,118,0)
(90,35,0)
(11,19,0)
(142,115,0)
(10,126,0)
(145,118,0)
(125,69,0)
(80,114,0)
(46,126,0)
(102,11,0)
(32,37,0)
(7,110,0)
(92,71,0)
(67,110,0)
(25,95,0)
(84,29,0)
(10,77,0)
(78,21,0)
(57,0,0)
(16,123,0)
(14,104,0)
(104,137,0)
(140,110,0)
(112,116,0)
(115,99,0)
(139,99,0)
(37,108,0)
(98,73,1)
(131,60,1)
(99,129,1)
(92,34,1)
(136,88,1)
(108,35,1)
(91,7,1)
(118,145,1)
(32,45,1)
(116,107,1)
(51,119,1)
(99,31,1)
(89,95,1)
(136,17,1)
(84,86,1)
(29,84,1)
(81,56,1)
(99,27,1)
(114,85,1)
(98,37,1)
(33,22,1)
(119,62,1)
(7,133,1)
(29,17,1)
(67,46,1)
(53,119,1)
(114,46,1)
(97,91,1)
(82,97,1)
(59,51,1)
(14,17,1)
(61,132,1)
(132,43,1)
(117,98,1)
(99,115,1)
(99,4,1)
(6,96,1)
(133,21,1)
(60,83,1)
(39,137,1)
(71,40,1)
(108,122,1)
(138,42,1)
(117,59,1)
(129,76,1)
(77,19,1)
(7,21,1)
(18,38,1)
(70,46,1)
(0,124,1)
(63,46,1)
(11,9,1)
(111,131,1)
(122,35,1)
(111,60,1)
(137,104,1)
(144,43,1)
(86,15,1)
(80,50,1)
(73,144,1)
(83,106,1)
(68,138,1)
(13,71,1)
(130,30,1)
(47,143,1)
(88,66,1)
(15,111,1)
(142,46,1)
(112,107,1)
(22,19,1)
(75,109,1)
(59,75,1)
(145,54,1)
(87,81,1)
(117,32,1)
(107,46,1)
(16,57,1)
(70,26,1)
(77,27,1)
(4,17,1)
(69,125,1)
(142,58,1)
(99,114,1)
(139,12,1)
(23,136,1)
(30,29,1)
(41,114,1)
(10,77,1)
(141,28,1)
(124,141,1)
(0,46,1)
(20,116,1)
(43,10,1)
(129,123,1)
(143,128,1)
(43,74,1)
(45,18,1)
(127,109,1)
(99,139,1)
(50,1,1)
(76,139,1)
(51,53,1)
(139,39,1)
(110,7,1)
(119,93,1)
(107,68,1)
(65,99,1)
(115,113,1)
(95,87,1)
(106,25,1)
(140,110,1)
(58,6,1)
(36,51,1)
(50,116,1)
(38,140,1)
(31,115,1)
(123,16,1)
(117,36,1)
(125,111,1)
(59,37,1)
(4,49,1)
(104,14,1)
(77,33,1)
(99,118,1)
(21,46,1)
(115,142,1)
(67,82,1)
(100,70,1)
(28,39,1)
(32,37,1)
(26,135,1)
(98,51,1)
(37,108,1)
(35,90,1)
(135,123,1)
(73,10,1)
(109,10,1)
(108,3,1)
(69,51,1)
(32,51,1)
(102,63,1)
(121,65,1)
(8,71,1)
(118,46,1)
(25,103,1)
(1,20,1)
(72,8,1)
(54,4,1)
(96,23,1)
(36,37,1)
(108,30,1)
(74,127,1)
(13,72,1)
(85,80,1)
(101,61,1)
(110,67,1)
(36,47,1)
(45,140,1)
(57,0,1)
(117,69,1)
(46,13,1)
(12,118,1)
(75,38,1)
(113,142,1)
(40,92,1)
(9,102,1)
(49,41,1)
(34,143,1)
(116,112,1)
(21,78,1)
(42,100,1)
(25,89,1)
(99,96,1)
(78,121,1)
(90,130,1)
(11,46,1)
(66,129,1)
(96,136,1)
(25,95,1)
(19,11,1)
(14,101,1)
(128,37,1)
(56,51,1)
(137,43,2)
(69,51,2)
(113,43,2)
(13,71,2)
(117,36,2)
(6,43,2)
(32,51,2)
(73,43,2)
(107,43,2)
(41,43,2)
(50,116,2)
(15,111,2)
(16,57,2)
(99,115,2)
(85,43,2)
(63,143,2)
(99,4,2)
(133,43,2)
(84,111,2)
(1,43,2)
(59,38,2)
(142,43,2)
(66,43,2)
(99,96,2)
(140,43,2)
(108,3,2)
(65,43,2)
(137,104,2)
(68,43,2)
(28,43,2)
(77,143,2)
(10,143,2)
(80,43,2)
(102,143,2)
(14,17,2)
(36,37,2)
(142,46,2)
(13,143,2)
(51,119,2)
(21,46,2)
(37,108,2)
(70,46,2)
(100,43,2)
(86,111,2)
(117,59,2)
(143,111,2)
(77,19,2)
(144,43,2)
(111,60,2)
(22,143,2)
(59,37,2)
(39,137,2)
(119,62,2)
(72,143,2)
(43,10,2)
(19,143,2)
(139,39,2)
(42,100,2)
(129,123,2)
(88,43,2)
(33,143,2)
(135,43,2)
(117,69,2)
(98,51,2)
(123,16,2)
(96,136,2)
(4,17,2)
(45,140,2)
(99,114,2)
(139,43,2)
(98,43,2)
(122,111,2)
(129,43,2)
(30,111,2)
(59,51,2)
(112,43,2)
(117,98,2)
(138,43,2)
(114,43,2)
(25,103,2)
(108,35,2)
(99,27,2)
(36,143,2)
(29,111,2)
(117,32,2)
(116,107,2)
(4,43,2)
(98,37,2)
(130,111,2)
(77,27,2)
(0,43,2)
(32,37,2)
(67,46,2)
(75,109,2)
(18,38,2)
(30,29,2)
(132,43,2)
(118,46,2)
(100,70,2)
(145,43,2)
(127,109,2)
(96,43,2)
(136,17,2)
(108,30,2)
(38,43,2)
(101,43,2)
(8,143,2)
(124,43,2)
(43,109,2)
(76,43,2)
(141,43,2)
(37,111,2)
(90,111,2)
(75,38,2)
(57,43,2)
(26,43,2)
(125,111,2)
(109,143,2)
(118,43,2)
(54,43,2)
(0,46,2)
(121,43,2)
(31,43,2)
(70,43,2)
(104,43,2)
(25,95,2)
(110,7,2)
(69,111,2)
(97,43,2)
(110,43,2)
(73,10,2)
(92,143,2)
(78,43,2)
(36,51,2)
(104,14,2)
(11,143,2)
(115,142,2)
(128,111,2)
(61,43,2)
(9,143,2)
(74,109,2)
(114,46,2)
(67,43,2)
(14,43,2)
(16,43,2)
(34,143,2)
(21,43,2)
(71,143,2)
(99,129,2)
(39,43,2)
(140,110,2)
(58,43,2)
(82,43,2)
(32,38,2)
(99,139,2)
(99,118,2)
(49,43,2)
(108,111,2)
(23,43,2)
(91,43,2)
(19,11,2)
(57,0,2)
(11,46,2)
(115,43,2)
(35,111,2)
(123,43,2)
(50,43,2)
(46,13,2)
(45,38,2)
(59,109,2)
(7,21,2)
(42,43,2)
(99,43,2)
(20,43,2)
(136,43,2)
(47,143,2)
(40,143,2)
(12,43,2)
(110,67,2)
(29,17,2)
(7,43,2)
(107,46,2)
(116,43,2)
(46,143,2)
(10,77,2)
-----------------------------------
(0,receiver->owned_names)
(1,0)
(2,if (!slot)
(3,uint32_t reply_serial)
(4,sender->id)
(5,)
(6,receiver)
(7,receiver->bus->log)
(8,Peer)
(9,connection)
(10,r = connection_queue(&receiver->connection, NULL, message)
(11,receiver->connection)
(12,sender_names)
(13,c_container_of(slot->owner, Peer, owned_replies)
(14,sender->owned_names)
(15,slot)
(16,NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
(17,Peer *sender)
(18,r)
(19,&receiver->connection)
(20,LOG_WARNING)
(21,receiver->bus)
(22,NULL)
(23,seclabel)
(24,r)
(25,address_from_string(&addr, destination)
(26,connection)
(27,Message *message)
(28,receiver_names)
(29,sender->replies)
(30,&sender->replies)
(31,message)
(32,return error_fold(r)
(33,message)
(34,receiver)
(35,addr.id)
(36,return PEER_E_UNEXPECTED_REPLY;)
(37,slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial)
(38,r)
(39,sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
(40,owner)
(41,sender)
(42,connection_shutdown(&receiver->connection)
(43,r == CONNECTION_E_QUOTA)
(44,if (r == CONNECTION_E_QUOTA)
(45,error_fold(r)
(46,receiver = c_container_of(slot->owner, Peer, owned_replies)
(47,PEER_E_UNEXPECTED_REPLY)
(48,addr)
(49,id)
(50,log_append_here(receiver->bus->log, LOG_WARNING, 0)
(51,(reply_slot_freep)
(52,receiver)
(53,slot)
(54,receiver)
(55,)
(56,NULL)
(57,&receiver->owned_names)
(58,policy)
(59,return 0;)
(60,addr.type)
(61,sender)
(62,reply_slot_freep)
(63,r)
(64,sender_names)
(65,r)
(66,sender)
(67,receiver->id)
(68,bus)
(69,return PEER_E_UNEXPECTED_REPLY;)
(70,receiver->connection)
(71,slot->owner)
(72,owned_replies)
(73,error_fold(r)
(74,CONNECTION_E_QUOTA)
(75,0)
(76,receiver_names)
(77,connection_queue(&receiver->connection, NULL, message)
(78,bus)
(79,)
(80,receiver)
(81,(reply_slot_freep)
(82,id)
(83,type)
(84,replies)
(85,bus)
(86,sender)
(87,addr)
(88,policy)
(89,destination)
(90,id)
(91,"Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.")
(92,slot)
(93,ReplySlot)
(94,if (r)
(95,&addr)
(96,sender->policy->seclabel)
(97,receiver)
(98,return error_fold(r)
(99,bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,\n\\n                                                   sender->policy->seclabel, receiver->policy->seclabel, message)
(100,&receiver->connection)
(101,owned_names)
(102,receiver)
(103,const char *destination)
(104,&sender->owned_names)
(105,if (addr.type != ADDRESS_TYPE_ID)
(106,addr)
(107,receiver->bus)
(108,reply_slot_get_by_id(&sender->replies, addr.id, reply_serial)
(109,r)
(110,log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",\n\\n                                        receiver->id)
(111,addr.type != ADDRESS_TYPE_ID)
(112,log)
(113,seclabel)
(114,receiver->bus)
(115,receiver->policy->seclabel)
(116,receiver->bus->log)
(117,RET)
(118,receiver->id)
(119,(reply_slot_freep)
(120,if (r)
(121,receiver)
(122,reply_serial)
(123,receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
(124,owned_names)
(125,PEER_E_UNEXPECTED_REPLY)
(126,)
(127,r)
(128,slot)
(129,&receiver_names)
(130,addr)
(131,ADDRESS_TYPE_ID)
(132,sender_names)
(133,log)
(134,receiver_names)
(135,receiver)
(136,sender->policy)
(137,NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
(138,receiver)
(139,&sender_names)
(140,r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",\n\\n                                        receiver->id)
(141,receiver)
(142,receiver->policy)
(143,!slot)
(144,r)
(145,id)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^