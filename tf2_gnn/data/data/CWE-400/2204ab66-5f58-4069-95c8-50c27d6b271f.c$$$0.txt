-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(1)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
19,20
20,21
21,22
21,23
22,23
25,26
26,27
27,28
27,29
28,29
31,32
31,33
33,34
33,35
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
-----nextToken-----
2,4,8,10,14,16,18,23,24,29,30,32,37,39,43,44
-----computeFrom-----
12,13
12,14
27,28
27,29
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
1
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(4,1,0)
(18,22,0)
(21,15,0)
(21,22,0)
(6,1,0)
(12,1,0)
(14,16,0)
(16,20,0)
(13,9,0)
(7,15,0)
(8,21,0)
(15,7,0)
(0,16,0)
(2,15,0)
(10,18,0)
(15,1,0)
(21,16,0)
(11,7,0)
(17,13,0)
(17,5,1)
(5,15,1)
(14,5,1)
(21,15,1)
(21,16,1)
(0,14,1)
(16,0,1)
(15,7,1)
(18,10,1)
(10,21,1)
(21,8,1)
(3,18,1)
(19,16,1)
(8,19,1)
(7,11,1)
(19,13,1)
(3,19,1)
(11,2,1)
(13,17,1)
(21,15,2)
(18,19,2)
(0,5,2)
(21,19,2)
(13,5,2)
(17,5,2)
(16,5,2)
(21,16,2)
(14,5,2)
(15,7,2)
(10,19,2)
(8,19,2)
-----------------------------------
(0,20)
(1,)
(2,count)
(3,RET)
(4,count)
(5,0)
(6,if(1)
(7,-1)
(8,count)
(9,)
(10,"Sleep time possibly too long")
(11,1)
(12,if(0)
(13,printLine("Benign, fixed string")
(14,count)
(15,count = -1)
(16,count = 20)
(17,"Benign, fixed string")
(18,printLine("Sleep time possibly too long")
(19,1)
(20,)
(21,SLEEP(count)
(22,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^