-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_fwrite_15_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
39,40
39,41
39,42
39,43
39,44
39,45
40,41
42,43
42,44
42,45
42,46
42,47
42,48
42,49
43,44
44,45
44,46
45,46
47,48
47,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
55,58
58,59
59,60
61,62
62,63
62,64
64,65
64,66
64,67
67,68
69,70
70,71
70,72
71,72
73,74
73,75
73,76
74,75
76,77
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
91,92
91,93
91,94
91,95
92,93
93,94
93,95
94,95
97,98
97,99
98,99
100,101
100,102
101,102
101,103
102,103
105,106
107,108
108,109
110,111
111,112
111,113
112,113
112,114
113,114
113,115
114,115
116,117
118,119
118,120
118,121
118,122
118,123
119,120
121,122
123,124
124,125
124,126
127,128
127,129
128,129
130,131
132,133
134,135
135,136
136,137
136,138
137,138
140,141
140,142
141,142
143,144
144,145
145,146
145,147
146,147
148,149
152,153
153,154
153,155
154,155
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,34,35,36,38,41,46,48,50,54,56,57,60,63,65,66,68,72,75,77,78,82,84,89,90,95,96,99,103,104,106,109,115,117,120,122,125,126,129,131,133,138,139,142,147,149,150,151,155,156,157
-----computeFrom-----
12,13
12,14
23,24
23,25
70,71
70,72
80,81
80,82
93,94
93,95
97,98
97,99
112,113
112,114
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_fwrite_15_bad(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE400_Resource_Exhaustion__rand_fwrite_15_bad()
CWE400_Resource_Exhaustion__rand_fwrite_15_bad
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(52,46,0)
(44,2,0)
(5,38,0)
(71,17,0)
(23,34,0)
(34,23,0)
(38,71,0)
(10,17,0)
(73,28,0)
(48,14,0)
(13,39,0)
(64,65,0)
(77,39,0)
(79,56,0)
(36,73,0)
(71,38,0)
(27,4,0)
(60,76,0)
(83,7,0)
(47,23,0)
(19,56,0)
(14,61,0)
(33,38,0)
(9,51,0)
(67,43,0)
(57,15,0)
(80,23,0)
(30,39,0)
(18,39,0)
(35,54,0)
(81,17,0)
(42,15,0)
(34,68,0)
(54,17,0)
(32,61,0)
(14,79,0)
(22,2,0)
(72,17,0)
(53,65,0)
(58,65,0)
(0,61,0)
(17,51,0)
(79,14,0)
(61,39,0)
(82,23,0)
(66,14,0)
(25,71,0)
(59,68,0)
(14,66,0)
(14,22,0)
(38,16,0)
(6,54,0)
(23,71,0)
(75,17,0)
(24,30,0)
(29,79,0)
(31,16,0)
(49,80,0)
(40,43,0)
(23,4,0)
(2,22,0)
(62,39,0)
(61,0,0)
(15,17,0)
(20,17,0)
(23,80,0)
(43,71,0)
(69,51,0)
(3,16,0)
(76,63,0)
(8,56,0)
(26,71,0)
(11,51,0)
(50,17,0)
(22,65,0)
(46,56,0)
(26,74,0)
(78,22,0)
(68,34,0)
(45,51,0)
(16,17,0)
(41,26,0)
(1,9,0)
(4,23,0)
(21,51,0)
(47,68,1)
(26,71,1)
(18,61,1)
(6,35,1)
(32,37,1)
(4,27,1)
(38,16,1)
(29,56,1)
(73,36,1)
(42,57,1)
(8,43,1)
(46,52,1)
(12,45,1)
(67,71,1)
(23,82,1)
(57,54,1)
(5,33,1)
(49,4,1)
(0,32,1)
(23,4,1)
(71,38,1)
(25,16,1)
(26,41,1)
(80,49,1)
(79,56,1)
(54,6,1)
(38,5,1)
(59,79,1)
(15,42,1)
(35,55,1)
(24,37,1)
(41,70,1)
(16,3,1)
(44,78,1)
(13,30,1)
(14,66,1)
(33,25,1)
(48,29,1)
(40,67,1)
(79,14,1)
(3,31,1)
(14,48,1)
(14,22,1)
(23,80,1)
(12,11,1)
(37,22,1)
(27,47,1)
(29,46,1)
(43,40,1)
(22,2,1)
(1,55,1)
(70,79,1)
(45,9,1)
(11,26,1)
(46,56,1)
(2,44,1)
(36,34,1)
(82,80,1)
(52,34,1)
(31,15,1)
(34,68,1)
(14,61,1)
(43,71,1)
(11,70,1)
(19,8,1)
(55,18,1)
(30,24,1)
(34,23,1)
(68,59,1)
(61,0,1)
(60,43,1)
(23,71,1)
(56,19,1)
(55,13,1)
(52,73,1)
(8,76,1)
(76,60,1)
(9,1,1)
(13,37,2)
(26,70,2)
(8,55,2)
(31,55,2)
(34,79,2)
(0,37,2)
(59,79,2)
(19,55,2)
(82,79,2)
(32,37,2)
(56,55,2)
(67,55,2)
(68,79,2)
(79,14,2)
(36,34,2)
(71,38,2)
(47,79,2)
(22,2,2)
(48,79,2)
(14,79,2)
(45,55,2)
(25,55,2)
(29,55,2)
(79,79,2)
(16,55,2)
(54,55,2)
(29,79,2)
(76,43,2)
(14,22,2)
(3,55,2)
(57,55,2)
(73,34,2)
(30,37,2)
(52,79,2)
(80,79,2)
(24,37,2)
(23,4,2)
(4,79,2)
(27,79,2)
(79,56,2)
(79,55,2)
(23,71,2)
(15,55,2)
(34,23,2)
(23,80,2)
(33,55,2)
(1,55,2)
(18,37,2)
(43,55,2)
(40,55,2)
(6,55,2)
(61,37,2)
(48,55,2)
(35,55,2)
(41,70,2)
(71,55,2)
(11,55,2)
(26,71,2)
(34,68,2)
(46,79,2)
(14,66,2)
(61,0,2)
(14,55,2)
(5,55,2)
(43,71,2)
(46,56,2)
(42,55,2)
(60,43,2)
(23,79,2)
(38,16,2)
(14,61,2)
(38,55,2)
(9,55,2)
(49,79,2)
(70,55,2)
-----------------------------------
(0,RAND32()
(1,"Benign, fixed string")
(2,-1)
(3,"output_bad.txt")
(4,sizeof(char)
(5,"w+")
(6,0)
(7,)
(8,i)
(9,printLine("Benign, fixed string")
(10,if (pFile)
(11,break;)
(12,RET)
(13,break;)
(14,(size_t)
(15,*pFile = NULL)
(16,*filename = "output_bad.txt")
(17,)
(18,break;)
(19,0)
(20,if (pFile == NULL)
(21,default:)
(22,count = -1)
(23,fwrite(SENTENCE, sizeof(char)
(24,"Benign, fixed string")
(25,pFile)
(26,fclose(pFile)
(27,char)
(28,)
(29,i)
(30,printLine("Benign, fixed string")
(31,filename)
(32,count)
(33,filename)
(34,strlen(SENTENCE)
(35,i)
(36,1)
(37,6)
(38,fopen(filename, "w+")
(39,)
(40,NULL)
(41,pFile)
(42,NULL)
(43,pFile == NULL)
(44,1)
(45,break;)
(46,i++)
(47,SENTENCE)
(48,count)
(49,SENTENCE)
(50,for (i = 0; i < (size_t)
(51,)
(52,i)
(53,switch(7)
(54,i = 0)
(55,7)
(56,i = 0)
(57,pFile)
(58,count)
(59,SENTENCE)
(60,1)
(61,count = RAND32()
(62,default:)
(63,)
(64,switch(6)
(65,)
(66,size_t)
(67,pFile)
(68,strlen(SENTENCE)
(69,case 7:)
(70,pFile)
(71,pFile = fopen(filename, "w+")
(72,filename)
(73,exit(1)
(74,)
(75,pFile)
(76,exit(1)
(77,case 6:)
(78,count)
(79,i < (size_t)
(80,strlen(SENTENCE)
(81,i)
(82,pFile)
(83,if (strlen(SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^