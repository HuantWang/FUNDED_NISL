-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_15_bad()
{
    twoIntsStruct * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
85,86
86,87
86,88
87,88
91,92
91,93
93,94
93,95
93,96
93,97
93,98
93,99
94,95
99,100
100,101
100,102
101,102
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,83,84,88,89,90,92,95,96,97,98,102,103,104
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_15_bad(){    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_15_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_15_bad
{    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(3,20,0)
(39,27,0)
(57,55,0)
(30,18,0)
(14,39,0)
(35,27,0)
(45,46,0)
(8,55,0)
(26,56,0)
(2,18,0)
(42,20,0)
(9,37,0)
(4,59,0)
(4,18,0)
(46,45,0)
(1,56,0)
(51,5,0)
(19,45,0)
(31,18,0)
(49,39,0)
(46,44,0)
(16,20,0)
(29,40,0)
(10,2,0)
(59,5,0)
(49,2,0)
(33,37,0)
(34,19,0)
(54,37,0)
(5,59,0)
(27,46,0)
(32,18,0)
(48,39,0)
(36,3,0)
(25,35,0)
(5,27,0)
(56,55,0)
(27,18,0)
(43,20,0)
(40,29,0)
(13,27,0)
(37,27,0)
(7,18,0)
(47,45,0)
(46,27,0)
(24,49,0)
(59,4,0)
(44,46,0)
(12,40,0)
(22,5,0)
(53,7,0)
(45,19,0)
(37,33,0)
(0,35,0)
(50,28,0)
(11,18,0)
(39,49,0)
(33,28,0)
(23,33,0)
(58,20,0)
(6,55,0)
(28,18,0)
(29,41,0)
(15,18,0)
(50,33,1)
(7,53,1)
(34,47,1)
(21,56,1)
(46,44,1)
(26,1,1)
(5,27,1)
(39,27,1)
(39,14,1)
(2,10,1)
(54,29,1)
(14,48,1)
(9,54,1)
(29,40,1)
(36,38,1)
(33,23,1)
(38,30,1)
(52,42,1)
(52,43,1)
(0,27,1)
(38,32,1)
(37,27,1)
(56,26,1)
(12,35,1)
(40,12,1)
(43,3,1)
(51,2,1)
(30,4,1)
(45,19,1)
(35,25,1)
(32,7,1)
(49,39,1)
(3,36,1)
(35,27,1)
(46,45,1)
(47,13,1)
(42,38,1)
(24,39,1)
(37,9,1)
(33,37,1)
(28,50,1)
(23,37,1)
(22,51,1)
(10,49,1)
(27,46,1)
(53,21,1)
(25,0,1)
(49,24,1)
(4,59,1)
(13,21,1)
(48,28,1)
(54,35,1)
(19,34,1)
(59,5,1)
(5,22,1)
(45,19,2)
(9,21,2)
(53,21,2)
(46,45,2)
(46,44,2)
(32,21,2)
(49,39,2)
(47,21,2)
(33,37,2)
(12,35,2)
(36,38,2)
(27,46,2)
(54,21,2)
(48,21,2)
(0,21,2)
(39,21,2)
(2,21,2)
(30,21,2)
(59,5,2)
(10,21,2)
(28,21,2)
(22,21,2)
(13,21,2)
(29,40,2)
(3,38,2)
(35,21,2)
(39,27,2)
(51,21,2)
(37,21,2)
(37,27,2)
(35,27,2)
(7,21,2)
(29,35,2)
(4,59,2)
(4,21,2)
(23,21,2)
(46,21,2)
(25,21,2)
(59,21,2)
(5,27,2)
(5,21,2)
(45,21,2)
(50,21,2)
(43,38,2)
(27,21,2)
(42,38,2)
(40,35,2)
(33,21,2)
(49,21,2)
(14,21,2)
(24,21,2)
(19,21,2)
(34,21,2)
-----------------------------------
(0,data)
(1,data)
(2,data[0].intTwo = 0)
(3,printLine("Benign, fixed string")
(4,printStructLine(&data[0])
(5,data[0])
(6,switch(7)
(7,printLine("Benign, fixed string")
(8,switch(6)
(9,0)
(10,0)
(11,if (data == NULL)
(12,1)
(13,data)
(14,0)
(15,case 6:)
(16,default:)
(17, sizeof(twoIntsStruct)
(18,)
(19,sizeof(twoIntsStruct)
(20,)
(21,6)
(22,0)
(23,intOne)
(24,intTwo)
(25,NULL)
(26,NULL)
(27,data = (twoIntsStruct *)
(28,data[0].intOne = 0)
(29,exit(-1)
(30,break;)
(31,default:)
(32,break;)
(33,data[0].intOne)
(34,twoIntsStruct)
(35,data == NULL)
(36,"Benign, fixed string")
(37,data[0])
(38,7)
(39,data[0])
(40,-1)
(41,)
(42,break;)
(43,break;)
(44,twoIntsStruct *)
(45,calloc(100, sizeof(twoIntsStruct)
(46,(twoIntsStruct *)
(47,100)
(48,data)
(49,data[0].intTwo)
(50,0)
(51,data)
(52,RET)
(53,"Benign, fixed string")
(54,data)
(55,)
(56,data = NULL)
(57,data)
(58,case 7:)
(59,&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^