-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_sleep_10_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
31,32
31,33
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
-----nextToken-----
2,4,8,10,14,16,19,24,27,30,35,37,41,42
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_sleep_10_bad(){    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__rand_sleep_10_bad()
CWE400_Resource_Exhaustion__rand_sleep_10_bad
{    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalTrue)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(globalTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(8,12,0)
(10,8,0)
(11,17,0)
(18,16,0)
(17,1,0)
(7,1,0)
(5,13,0)
(6,17,0)
(13,3,0)
(1,17,0)
(17,16,0)
(11,3,0)
(0,11,0)
(11,8,0)
(15,16,0)
(9,16,0)
(2,8,0)
(8,2,0)
(19,14,1)
(19,13,1)
(5,11,1)
(4,17,1)
(11,8,1)
(0,14,1)
(11,17,1)
(11,0,1)
(10,4,1)
(8,2,1)
(2,10,1)
(1,7,1)
(14,8,1)
(7,6,1)
(13,5,1)
(17,1,1)
(14,4,1)
(13,14,2)
(17,1,2)
(10,4,2)
(5,14,2)
(0,14,2)
(11,14,2)
(11,17,2)
(2,4,2)
(8,4,2)
(8,2,2)
(11,8,2)
-----------------------------------
(0,count)
(1,-1)
(2,RAND32()
(3,)
(4,globalTrue)
(5,"Sleep time possibly too long")
(6,count)
(7,1)
(8,count = RAND32()
(9,if(globalTrue)
(10,count)
(11,SLEEP(count)
(12,)
(13,printLine("Sleep time possibly too long")
(14,globalTrue)
(15,if(globalTrue)
(16,)
(17,count = -1)
(18,count)
(19,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^