-----label-----
1
-----code-----
static void
init_config(struct cfg *cf, int argc, char **argv)
{
    int ch, i;
    char *bh[2], *bh6[2], *cp;

    bh[0] = bh[1] = bh6[0] = bh6[1] = NULL;

    cf->port_min = PORT_MIN;
    cf->port_max = PORT_MAX;

    cf->max_ttl = SESSION_TIMEOUT;
    cf->tos = TOS;
    cf->rrtcp = 1;
    cf->ttl_mode = unified;

    cf->timeout_handler.socket_name = NULL;
    cf->timeout_handler.fd = -1;

    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)
	err(1, "getrlimit");

    while ((ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")) != -1)
	switch (ch) {
	case 'f':
	    cf->nodaemon = 1;
	    break;

	case 'l':
	    bh[0] = optarg;
	    bh[1] = strchr(bh[0], '/');
	    if (bh[1] != NULL) {
		*bh[1] = '\0';
		bh[1]++;
		cf->bmode = 1;
	    }
	    break;

	case '6':
	    bh6[0] = optarg;
	    bh6[1] = strchr(bh6[0], '/');
	    if (bh6[1] != NULL) {
		*bh6[1] = '\0';
		bh6[1]++;
		cf->bmode = 1;
	    }
	    break;

	case 's':
	    if (strncmp("udp:", optarg, 4) == 0) {
		cf->umode = 1;
		optarg += 4;
	    } else if (strncmp("udp6:", optarg, 5) == 0) {
		cf->umode = 6;
		optarg += 5;
	    } else if (strncmp("unix:", optarg, 5) == 0) {
		cf->umode = 0;
		optarg += 5;
	    }
	    cmd_sock = optarg;
	    break;

	case 't':
	    cf->tos = atoi(optarg);
	    break;

	case '2':
	    cf->dmode = 1;
	    break;

	case 'v':
	    printf("Basic version: %d\n", CPROTOVER);
	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {
		printf("Extension %s: %s\n", proto_caps[i].pc_id,
		    proto_caps[i].pc_description);
	    }
	    exit(0);
	    break;

	case 'r':
	    cf->rdir = optarg;
	    break;

	case 'S':
	    cf->sdir = optarg;
	    break;

	case 'R':
	    cf->rrtcp = 0;
	    break;

	case 'p':
	    pid_file = optarg;
	    break;

	case 'T':
	    cf->max_ttl = atoi(optarg);
	    break;

	case 'L':
	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);
	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)
		err(1, "setrlimit");
	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)
		err(1, "getrlimit");
	    if (cf->nofile_limit.rlim_max < atoi(optarg))
		warnx("limit allocated by setrlimit (%d) is less than "
		  "requested (%d)", (int) cf->nofile_limit.rlim_max,
		  atoi(optarg));
	    break;

	case 'm':
	    cf->port_min = atoi(optarg);
	    break;

	case 'M':
	    cf->port_max = atoi(optarg);
	    break;

	case 'u':
	    cf->run_uname = optarg;
	    cp = strchr(optarg, ':');
	    if (cp != NULL) {
		if (cp == optarg)
		    cf->run_uname = NULL;
		cp[0] = '\0';
		cp++;
	    }
	    cf->run_gname = cp;
	    break;

	case 'F':
	    cf->no_check = 1;
	    break;

	case 'i':
	    cf->ttl_mode = independent;
	    break;

	case 'n':
	    if(strncmp("unix:", optarg, 5) == 0) {
		optarg += 5;
		if(!strlen(optarg)) {
		    fprintf(stderr, "timeout notification socket name too short\n");
		    exit(0);
		}
		cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);
		if(!cf->timeout_handler.socket_name)
		    perror("malloc");
		strcpy(cf->timeout_handler.socket_name, optarg);
	    } else {
		fprintf(stderr, "timeout notification socket must be unix:\n");
		exit(0);
	    }
	    break;

	case '?':
	default:
	    usage();
	}
    if (cf->rdir == NULL && cf->sdir != NULL)
	errx(1, "-S switch requires -r switch");

    if (cf->no_check == 0 && getuid() == 0 && cf->run_uname == NULL) {
	if (cf->umode != 0) {
	    errx(1, "running this program as superuser in a remote control "
	      "mode is strongly not recommended, as it poses serious security "
	      "threat to your system. Use -u option to run as an unprivileged "
	      "user or -F is you want to run as a superuser anyway.");
	} else {
	    warnx("WARNING!!! Running this program as superuser is strongly "
	      "not recommended, as it may pose serious security threat to "
	      "your system. Use -u option to run as an unprivileged user "
	      "or -F to surpress this warning.");
	}
    }

    if (cf->port_min <= 0 || cf->port_min > 65535)
	errx(1, "invalid value of the port_min argument, "
	  "not in the range 1-65535");
    if (cf->port_max <= 0 || cf->port_max > 65535)
	errx(1, "invalid value of the port_max argument, "
	  "not in the range 1-65535");
    if (cf->port_min > cf->port_max)
	errx(1, "port_min should be less than port_max");

    /* make sure that port_min and port_max are even */
    if ((cf->port_min % 2) != 0)
	cf->port_min++;
    if ((cf->port_max % 2) != 0)
	cf->port_max--;

    cf->nextport[0] = cf->nextport[1] = cf->port_min;
    cf->sessions = malloc((sizeof cf->sessions[0]) *
      (((cf->port_max - cf->port_min + 1) * 2) + 1));
    cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0]) *
      (((cf->port_max - cf->port_min + 1) * 2) + 1));
    cf->pfds = malloc((sizeof cf->pfds[0]) *
      (((cf->port_max - cf->port_min + 1) * 2) + 1));

    if (bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL) {
	if (cf->umode != 0)
	    errx(1, "explicit binding address has to be specified in UDP "
	      "command mode");
	bh[0] = "*";
    }

    for (i = 0; i < 2; i++) {
	if (bh[i] != NULL && *bh[i] == '\0')
	    bh[i] = NULL;
	if (bh6[i] != NULL && *bh6[i] == '\0')
	    bh6[i] = NULL;
    }

    i = ((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +
      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1);
    if (cf->bmode != 0) {
	if (bh[0] != NULL && bh6[0] != NULL)
	    errx(1, "either IPv4 or IPv6 should be configured for external "
	      "interface in bridging mode, not both");
	if (bh[1] != NULL && bh6[1] != NULL)
	    errx(1, "either IPv4 or IPv6 should be configured for internal "
	      "interface in bridging mode, not both");
	if (i != 2)
	    errx(1, "incomplete configuration of the bridging mode - exactly "
	      "2 listen addresses required, %d provided", i);
    } else if (i != 1) {
	errx(1, "exactly 1 listen addresses required, %d provided", i);
    }

    for (i = 0; i < 2; i++) {
	cf->bindaddr[i] = NULL;
	if (bh[i] != NULL) {
	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));
	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);
	    continue;
	}
	if (bh6[i] != NULL) {
	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));
	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);
	    continue;
	}
    }
    if (cf->bindaddr[0] == NULL) {
	cf->bindaddr[0] = cf->bindaddr[1];
	cf->bindaddr[1] = NULL;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
17,19
17,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
21,38
21,39
21,40
21,41
21,42
21,43
21,44
21,45
21,46
21,47
21,48
21,49
21,50
21,51
22,23
23,24
23,25
23,26
25,26
27,28
29,30
30,31
30,32
30,33
30,34
32,33
32,34
32,35
35,36
37,38
37,39
37,40
40,41
42,43
42,44
45,46
46,47
46,48
47,48
47,49
48,49
51,52
51,53
52,53
52,54
53,54
56,57
56,58
57,58
57,59
58,59
61,62
61,63
62,63
62,64
63,64
66,67
68,69
69,70
69,71
70,71
70,72
71,72
74,75
76,77
77,78
77,79
78,79
78,80
79,80
82,83
84,85
85,86
85,87
86,87
86,88
87,88
90,91
92,93
93,94
93,95
94,95
94,96
95,96
98,99
100,101
101,102
101,103
102,103
102,104
103,104
107,108
108,109
108,110
109,110
109,111
110,111
113,114
115,116
116,117
116,118
117,118
117,119
118,119
118,120
119,120
123,124
125,126
126,127
126,128
127,128
127,129
128,129
128,130
129,130
133,134
135,136
135,137
136,137
136,138
137,138
137,139
137,140
138,139
140,141
142,143
143,144
144,145
144,146
145,146
149,150
150,151
150,152
150,153
151,152
155,156
155,157
156,157
156,158
157,158
158,159
158,160
159,160
161,162
161,163
161,164
161,165
162,163
164,165
166,167
169,170
171,172
171,173
172,173
174,175
174,176
174,177
174,178
174,179
174,180
174,181
174,182
174,183
174,184
174,185
174,186
174,187
174,188
174,189
174,190
174,191
174,192
174,193
174,194
174,195
174,196
174,197
174,198
174,199
174,200
174,201
174,202
174,203
174,204
174,205
174,206
174,207
174,208
174,209
174,210
174,211
174,212
174,213
174,214
174,215
174,216
174,217
174,218
174,219
174,220
174,221
174,222
174,223
174,224
174,225
174,226
174,227
174,228
174,229
174,230
174,231
174,232
174,233
174,234
174,235
174,236
174,237
174,238
174,239
174,240
174,241
174,242
174,243
174,244
174,245
174,246
174,247
175,176
177,178
178,179
178,180
179,180
179,181
180,181
185,186
187,188
188,189
188,190
189,190
189,191
190,191
193,194
195,196
196,197
196,198
197,198
197,199
198,199
201,202
201,203
201,204
202,203
204,205
204,206
205,206
209,210
209,211
210,211
210,212
211,212
211,213
212,213
215,216
217,218
217,219
217,220
218,219
219,220
219,221
220,221
221,222
221,223
222,223
226,227
227,228
228,229
228,230
229,230
232,233
233,234
233,235
234,235
234,236
235,236
240,241
242,243
243,244
243,245
244,245
244,246
245,246
248,249
250,251
251,252
251,253
252,253
252,254
253,254
256,257
256,258
256,259
257,258
259,260
259,261
260,261
264,265
264,266
265,266
265,267
266,267
266,268
267,268
270,271
272,273
272,274
272,275
273,274
274,275
274,276
275,276
276,277
276,278
277,278
281,282
282,283
283,284
283,285
284,285
287,288
288,289
288,290
289,290
289,291
290,291
295,296
297,298
297,299
297,300
298,299
298,300
299,300
299,301
299,302
299,303
300,301
303,304
307,308
307,309
308,309
309,310
309,311
310,311
310,312
311,312
315,316
316,317
316,318
317,318
320,321
320,322
320,323
321,322
321,323
322,323
322,324
322,325
322,326
323,324
326,327
330,331
330,332
331,332
332,333
332,334
333,334
333,335
334,335
338,339
339,340
339,341
340,341
343,344
343,345
344,345
344,346
345,346
345,347
345,348
345,349
346,347
349,350
353,354
353,355
354,355
355,356
355,357
356,357
356,358
357,358
361,362
362,363
362,364
363,364
366,367
367,368
367,369
368,369
370,371
373,374
375,376
376,377
376,378
377,378
377,379
378,379
381,382
381,383
382,383
384,385
387,388
389,390
390,391
390,392
391,392
391,393
392,393
397,398
399,400
400,401
400,402
400,403
401,402
404,405
406,407
406,408
406,409
406,410
407,408
408,409
408,410
409,410
412,413
412,414
413,414
413,415
414,415
414,416
415,416
417,418
420,421
422,423
423,424
425,426
426,427
427,428
427,429
427,430
427,431
428,429
431,432
431,433
432,433
432,434
433,434
435,436
438,439
438,440
439,440
439,441
440,441
442,443
445,446
446,447
446,448
447,448
451,452
453,454
454,455
454,456
455,456
455,457
456,457
459,460
462,463
464,465
465,466
465,467
466,467
466,468
467,468
470,471
473,474
475,476
476,477
476,478
477,478
477,479
478,479
483,484
485,486
486,487
486,488
487,488
489,490
492,493
494,495
495,496
495,497
496,497
496,498
497,498
500,501
500,502
501,502
503,504
506,507
508,509
509,510
509,511
510,511
510,512
511,512
511,513
512,513
516,517
516,518
517,518
517,519
518,519
518,520
519,520
523,524
523,525
524,525
526,527
528,529
528,530
529,530
529,531
530,531
530,532
530,533
531,532
533,534
535,536
536,537
537,538
537,539
538,539
542,543
543,544
543,545
543,546
544,545
548,549
548,550
549,550
549,551
550,551
550,552
550,553
551,552
553,554
555,556
556,557
557,558
557,559
558,559
562,563
563,564
563,565
563,566
564,565
568,569
568,570
569,570
569,571
570,571
570,572
571,572
571,573
572,573
576,577
576,578
577,578
579,580
581,582
582,583
582,584
582,585
582,586
583,584
586,587
586,588
587,588
587,589
590,591
590,592
591,592
591,593
592,593
596,597
596,598
597,598
599,600
602,603
604,605
605,606
605,607
606,607
606,608
607,608
610,611
610,612
611,612
613,614
616,617
618,619
619,620
619,621
620,621
620,622
621,622
624,625
624,626
625,626
627,628
630,631
632,633
633,634
633,635
634,635
634,636
635,636
638,639
640,641
641,642
641,643
642,643
644,645
644,646
644,647
645,646
647,648
650,651
650,652
651,652
651,653
652,653
654,655
656,657
656,658
656,659
657,658
657,659
658,659
658,660
659,660
661,662
663,664
664,665
664,666
665,666
665,667
666,667
669,670
671,672
672,673
672,674
673,674
673,675
674,675
678,679
679,680
680,681
682,683
683,684
683,685
684,685
684,686
685,686
688,689
691,692
693,694
694,695
694,696
695,696
695,697
696,697
701,702
703,704
704,705
704,706
705,706
705,707
706,707
709,710
712,713
714,715
714,716
714,717
715,716
715,717
716,717
716,718
716,719
716,720
717,718
720,721
724,725
724,726
724,727
724,728
724,729
725,726
726,727
726,728
727,728
730,731
730,732
731,732
732,733
732,734
733,734
735,736
737,738
737,739
738,739
739,740
739,741
739,742
740,741
742,743
745,746
746,747
746,748
747,748
750,751
751,752
751,753
752,753
752,754
753,754
753,755
754,755
758,759
758,760
759,760
759,761
761,762
763,764
763,765
764,765
766,767
766,768
767,768
767,769
768,769
770,771
773,774
773,775
774,775
775,776
775,777
776,777
776,778
777,778
781,782
782,783
782,784
783,784
786,787
787,788
787,789
787,790
788,789
790,791
790,792
791,792
791,793
792,793
796,797
798,799
798,800
799,800
800,801
800,802
800,803
801,802
803,804
806,807
807,808
807,809
808,809
812,813
815,816
816,817
817,818
819,820
819,821
820,821
820,822
821,822
821,823
822,823
822,824
823,824
826,827
828,829
828,830
829,830
829,831
830,831
833,834
835,836
836,837
836,838
836,839
837,838
841,842
841,843
842,843
842,844
843,844
843,845
844,845
844,846
845,846
845,847
846,847
850,851
850,852
851,852
852,853
855,856
855,857
856,857
856,858
857,858
860,861
862,863
863,864
863,865
863,866
864,865
864,866
865,866
865,867
866,867
870,871
871,872
872,873
872,874
872,875
873,874
877,878
878,879
879,880
879,881
880,881
883,884
883,885
884,885
884,886
885,886
885,887
886,887
886,888
887,888
891,892
891,893
892,893
892,894
893,894
897,898
898,899
898,900
898,901
899,900
903,904
903,905
904,905
904,906
905,906
905,907
906,907
906,908
907,908
911,912
911,913
912,913
912,914
913,914
917,918
918,919
918,920
918,921
919,920
923,924
923,925
924,925
924,926
925,926
925,927
926,927
929,930
929,931
930,931
933,934
934,935
934,936
934,937
935,936
939,940
939,941
940,941
940,942
941,942
942,943
942,944
943,944
943,945
944,945
949,950
950,951
951,952
951,953
952,953
955,956
955,957
956,957
956,958
957,958
958,959
958,960
959,960
959,961
960,961
965,966
966,967
967,968
967,969
968,969
971,972
972,973
972,974
973,974
973,975
974,975
974,976
975,976
979,980
979,981
980,981
980,982
981,982
981,983
982,983
986,987
986,988
987,988
990,991
991,992
991,993
992,993
992,994
993,994
996,997
996,998
997,998
999,1000
999,1001
1000,1001
1001,1002
1002,1003
1002,1004
1003,1004
1003,1005
1004,1005
1008,1009
1009,1010
1009,1011
1010,1011
1011,1012
1011,1013
1012,1013
1013,1014
1013,1015
1014,1015
1014,1016
1015,1016
1015,1017
1016,1017
1019,1020
1019,1021
1020,1021
1026,1027
1027,1028
1027,1029
1028,1029
1028,1030
1029,1030
1032,1033
1032,1034
1033,1034
1035,1036
1035,1037
1036,1037
1037,1038
1038,1039
1038,1040
1039,1040
1039,1041
1040,1041
1044,1045
1045,1046
1045,1047
1046,1047
1047,1048
1047,1049
1048,1049
1049,1050
1049,1051
1050,1051
1050,1052
1051,1052
1051,1053
1052,1053
1055,1056
1055,1057
1056,1057
1062,1063
1063,1064
1063,1065
1064,1065
1064,1066
1065,1066
1068,1069
1068,1070
1069,1070
1071,1072
1071,1073
1072,1073
1073,1074
1074,1075
1074,1076
1075,1076
1075,1077
1076,1077
1080,1081
1081,1082
1081,1083
1082,1083
1083,1084
1083,1085
1084,1085
1085,1086
1085,1087
1086,1087
1086,1088
1087,1088
1087,1089
1088,1089
1091,1092
1091,1093
1092,1093
1098,1099
1098,1100
1099,1100
1099,1101
1100,1101
1100,1102
1101,1102
1101,1103
1102,1103
1102,1104
1103,1104
1103,1105
1104,1105
1107,1108
1109,1110
1109,1111
1110,1111
1110,1112
1111,1112
1114,1115
1116,1117
1116,1118
1117,1118
1117,1119
1118,1119
1121,1122
1123,1124
1123,1125
1124,1125
1124,1126
1125,1126
1128,1129
1130,1131
1130,1132
1131,1132
1131,1133
1132,1133
1132,1134
1133,1134
1133,1135
1134,1135
1138,1139
1139,1140
1139,1141
1139,1142
1140,1141
1144,1145
1145,1146
1145,1147
1146,1147
1146,1148
1147,1148
1151,1152
1151,1153
1151,1154
1151,1155
1152,1153
1153,1154
1153,1155
1154,1155
1157,1158
1157,1159
1158,1159
1161,1162
1162,1163
1164,1165
1164,1166
1165,1166
1165,1167
1166,1167
1166,1168
1167,1168
1167,1169
1168,1169
1168,1170
1169,1170
1171,1172
1173,1174
1175,1176
1175,1177
1176,1177
1177,1178
1177,1179
1178,1179
1180,1181
1183,1184
1184,1185
1184,1186
1185,1186
1185,1187
1186,1187
1188,1189
1190,1191
1192,1193
1192,1194
1193,1194
1193,1195
1194,1195
1194,1196
1195,1196
1195,1197
1196,1197
1198,1199
1200,1201
1202,1203
1202,1204
1203,1204
1204,1205
1204,1206
1205,1206
1207,1208
1210,1211
1211,1212
1211,1213
1212,1213
1212,1214
1213,1214
1215,1216
1217,1218
1219,1220
1220,1221
1220,1222
1221,1222
1223,1224
1223,1225
1224,1225
1224,1226
1225,1226
1225,1227
1226,1227
1227,1228
1227,1229
1227,1230
1228,1229
1229,1230
1229,1231
1230,1231
1230,1232
1231,1232
1234,1235
1238,1239
1239,1240
1239,1241
1239,1242
1240,1241
1241,1242
1241,1243
1242,1243
1242,1244
1243,1244
1246,1247
1250,1251
1251,1252
1251,1253
1251,1254
1252,1253
1253,1254
1253,1255
1254,1255
1254,1256
1255,1256
1258,1259
1262,1263
1263,1264
1263,1265
1263,1266
1264,1265
1265,1266
1265,1267
1266,1267
1266,1268
1267,1268
1270,1271
1274,1275
1274,1276
1274,1277
1275,1276
1275,1277
1276,1277
1276,1278
1277,1278
1281,1282
1281,1283
1281,1284
1282,1283
1282,1284
1283,1284
1283,1285
1284,1285
1284,1286
1285,1286
1285,1287
1286,1287
1289,1290
1291,1292
1291,1293
1292,1293
1292,1294
1293,1294
1296,1297
1298,1299
1299,1300
1299,1301
1299,1302
1300,1301
1304,1305
1304,1306
1305,1306
1305,1307
1306,1307
1306,1308
1307,1308
1307,1309
1308,1309
1311,1312
1313,1314
1313,1315
1314,1315
1314,1316
1315,1316
1318,1319
1320,1321
1321,1322
1321,1323
1321,1324
1322,1323
1326,1327
1326,1328
1327,1328
1327,1329
1328,1329
1331,1332
1332,1333
1332,1334
1332,1335
1332,1336
1333,1334
1337,1338
1339,1340
1339,1341
1340,1341
1340,1342
1341,1342
1344,1345
1345,1346
1346,1347
1346,1348
1346,1349
1346,1350
1347,1348
1351,1352
1353,1354
1353,1355
1353,1356
1353,1357
1354,1355
1355,1356
1355,1357
1356,1357
1359,1360
1359,1361
1360,1361
1363,1364
1364,1365
1366,1367
1366,1368
1366,1369
1367,1368
1368,1369
1368,1370
1369,1370
1369,1371
1370,1371
1370,1372
1371,1372
1374,1375
1376,1377
1378,1379
1378,1380
1379,1380
1379,1381
1380,1381
1380,1382
1381,1382
1383,1384
1385,1386
1387,1388
1387,1389
1387,1390
1388,1389
1389,1390
1389,1391
1390,1391
1390,1392
1391,1392
1391,1393
1392,1393
1395,1396
1397,1398
1397,1399
1398,1399
1400,1401
1401,1402
1401,1403
1402,1403
1405,1406
1406,1407
1406,1408
1406,1409
1406,1410
1406,1411
1407,1408
1409,1410
1409,1411
1410,1411
1410,1412
1411,1412
1414,1415
1416,1417
1418,1419
1418,1420
1419,1420
1421,1422
1423,1424
1426,1427
1426,1428
1427,1428
1427,1429
1428,1429
1428,1430
1429,1430
1431,1432
1433,1434
1435,1436
1435,1437
1435,1438
1436,1437
1437,1438
1437,1439
1438,1439
1438,1440
1439,1440
1439,1441
1440,1441
1443,1444
1445,1446
1445,1447
1446,1447
1448,1449
1449,1450
1449,1451
1450,1451
1453,1454
1454,1455
1454,1456
1454,1457
1454,1458
1454,1459
1455,1456
1457,1458
1457,1459
1458,1459
1458,1460
1459,1460
1462,1463
1464,1465
1466,1467
1466,1468
1467,1468
1469,1470
1471,1472
1474,1475
1474,1476
1475,1476
1475,1477
1476,1477
1476,1478
1477,1478
1477,1479
1478,1479
1482,1483
1484,1485
1484,1486
1485,1486
1486,1487
1486,1488
1487,1488
1487,1489
1488,1489
1488,1490
1489,1490
1493,1494
1493,1495
1494,1495
1494,1496
1495,1496
1499,1500
1500,1501
1500,1502
1501,1502
1501,1503
1502,1503
1502,1504
1503,1504
1507,1508
-----nextToken-----
2,4,7,9,10,12,14,16,18,19,20,24,26,28,31,33,34,36,38,39,41,43,44,49,50,54,55,59,60,64,65,67,72,73,75,80,81,83,88,89,91,96,97,99,104,105,106,111,112,114,120,121,122,124,130,131,132,134,139,141,146,147,148,152,153,154,160,163,165,167,168,170,173,176,181,182,183,184,186,191,192,194,199,200,203,206,207,208,213,214,216,223,224,225,230,231,236,237,238,239,241,246,247,249,254,255,258,261,262,263,268,269,271,278,279,280,285,286,291,292,293,294,296,301,302,304,305,306,312,313,314,318,319,324,325,327,328,329,335,336,337,341,342,347,348,350,351,352,358,359,360,364,365,369,371,372,374,379,380,383,385,386,388,393,394,395,396,398,402,403,405,410,411,416,418,419,421,424,429,430,434,436,437,441,443,444,448,449,450,452,457,458,460,461,463,468,469,471,472,474,479,480,481,482,484,488,490,491,493,498,499,502,504,505,507,513,514,515,520,521,522,525,527,532,534,539,540,541,545,546,547,552,554,559,560,561,565,566,567,573,574,575,578,580,584,585,588,589,593,594,595,598,600,601,603,608,609,612,614,615,617,622,623,626,628,629,631,636,637,639,643,646,648,649,653,655,660,662,667,668,670,675,676,677,681,686,687,689,690,692,697,698,699,700,702,707,708,710,711,713,718,719,721,722,723,728,729,734,736,741,743,744,748,749,755,756,757,760,762,765,769,771,772,778,779,780,784,785,789,793,794,795,797,802,804,805,809,810,811,813,814,818,824,825,827,831,832,834,838,839,840,847,848,849,853,854,858,859,861,867,868,869,874,875,876,881,882,888,889,890,894,895,896,900,901,902,908,909,910,914,915,916,920,921,922,927,928,931,932,936,937,938,945,946,947,948,953,954,961,962,963,964,969,970,976,977,978,983,984,985,988,989,994,995,998,1005,1006,1007,1017,1018,1021,1022,1023,1024,1025,1030,1031,1034,1041,1042,1043,1053,1054,1057,1058,1059,1060,1061,1066,1067,1070,1077,1078,1079,1089,1090,1093,1094,1095,1096,1097,1105,1106,1108,1112,1113,1115,1119,1120,1122,1126,1127,1129,1135,1136,1137,1141,1142,1143,1148,1149,1150,1155,1156,1159,1160,1163,1170,1172,1174,1179,1181,1182,1187,1189,1191,1197,1199,1201,1206,1208,1209,1214,1216,1218,1222,1232,1233,1235,1236,1237,1244,1245,1247,1248,1249,1256,1257,1259,1260,1261,1268,1269,1271,1272,1273,1278,1279,1280,1287,1288,1290,1294,1295,1297,1301,1302,1303,1309,1310,1312,1316,1317,1319,1323,1324,1325,1329,1330,1334,1335,1336,1338,1342,1343,1348,1349,1350,1352,1357,1358,1361,1362,1365,1372,1373,1375,1377,1382,1384,1386,1393,1394,1396,1399,1403,1404,1408,1412,1413,1415,1417,1420,1422,1424,1425,1430,1432,1434,1441,1442,1444,1447,1451,1452,1456,1460,1461,1463,1465,1468,1470,1472,1473,1479,1480,1481,1483,1490,1491,1492,1496,1497,1498,1504,1505,1506,1508
-----computeFrom-----
46,47
46,48
51,52
51,53
56,57
56,58
61,62
61,63
69,70
69,71
77,78
77,79
85,86
85,87
93,94
93,95
101,102
101,103
108,109
108,110
116,117
116,118
126,127
126,128
136,137
136,138
156,157
156,158
158,159
158,160
178,179
178,180
188,189
188,190
196,197
196,198
210,211
210,212
219,220
219,221
233,234
233,235
243,244
243,245
251,252
251,253
265,266
265,267
274,275
274,276
288,289
288,290
298,299
298,300
309,310
309,311
316,317
316,318
321,322
321,323
332,333
332,334
339,340
339,341
344,345
344,346
355,356
355,357
362,363
362,364
367,368
367,369
376,377
376,378
390,391
390,392
408,409
408,410
412,413
412,414
454,455
454,456
465,466
465,467
476,477
476,478
486,487
486,488
495,496
495,497
509,510
509,511
516,517
516,518
529,530
529,531
549,550
549,551
569,570
569,571
605,606
605,607
619,620
619,621
633,634
633,635
641,642
641,643
651,652
651,653
658,659
658,660
664,665
664,666
672,673
672,674
683,684
683,685
694,695
694,696
704,705
704,706
715,716
715,717
726,727
726,728
751,752
751,753
766,767
766,768
820,821
820,822
821,822
821,823
828,829
828,830
842,843
842,844
843,844
843,845
844,845
844,846
850,851
850,852
855,856
855,857
864,865
864,866
884,885
884,886
885,886
885,887
891,892
891,893
904,905
904,906
905,906
905,907
911,912
911,913
924,925
924,926
940,941
940,942
942,943
942,944
956,957
956,958
958,959
958,960
972,973
972,974
979,980
979,981
991,992
991,993
999,1000
999,1001
1009,1010
1009,1011
1011,1012
1011,1013
1013,1014
1013,1015
1014,1015
1014,1016
1027,1028
1027,1029
1035,1036
1035,1037
1045,1046
1045,1047
1047,1048
1047,1049
1049,1050
1049,1051
1050,1051
1050,1052
1063,1064
1063,1065
1071,1072
1071,1073
1081,1082
1081,1083
1083,1084
1083,1085
1085,1086
1085,1087
1086,1087
1086,1088
1099,1100
1099,1101
1100,1101
1100,1102
1101,1102
1101,1103
1102,1103
1102,1104
1109,1110
1109,1111
1116,1117
1116,1118
1123,1124
1123,1125
1132,1133
1132,1134
1145,1146
1145,1147
1153,1154
1153,1155
1157,1158
1157,1159
1166,1167
1166,1168
1167,1168
1167,1169
1175,1176
1175,1177
1184,1185
1184,1186
1193,1194
1193,1195
1194,1195
1194,1196
1202,1203
1202,1204
1211,1212
1211,1213
1220,1221
1220,1222
1223,1224
1223,1225
1224,1225
1224,1226
1225,1226
1225,1227
1229,1230
1229,1231
1241,1242
1241,1243
1253,1254
1253,1255
1265,1266
1265,1267
1275,1276
1275,1277
1283,1284
1283,1285
1284,1285
1284,1286
1291,1292
1291,1293
1305,1306
1305,1307
1306,1307
1306,1308
1313,1314
1313,1315
1327,1328
1327,1329
1340,1341
1340,1342
1355,1356
1355,1357
1359,1360
1359,1361
1368,1369
1368,1370
1379,1380
1379,1381
1389,1390
1389,1391
1427,1428
1427,1429
1437,1438
1437,1439
1475,1476
1475,1477
1486,1487
1486,1488
1500,1501
1500,1502
-----guardedBy-----
213,230
268,285
304,318
327,341
350,364
578,598
573,593
575,595
580,600
574,594
655,670
653,681
721,797
858,867
945,953
946,954
961,969
962,970
1112,1148
1174,1191
1179,1187
1181,1189
1206,1214
1201,1218
1208,1216
1329,1338
1342,1352
1382,1420
1384,1422
1430,1468
1432,1470
1479,1504
1483,1508
1480,1505
-----guardedByNegation-----
301,347
304,364
324,347
327,364
-----lastLexicalUse-----
304,364
327,364
-----jump-----
304,364
327,364
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;ConditionalExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;
-----ast_node-----
static voidinit_config(struct cfg *cf, int argc, char **argv){    int ch, i;    char *bh[2], *bh6[2], *cp;    bh[0] = bh[1] = bh6[0] = bh6[1] = NULL;    cf->port_min = PORT_MIN;    cf->port_max = PORT_MAX;    cf->max_ttl = SESSION_TIMEOUT;    cf->tos = TOS;    cf->rrtcp = 1;    cf->ttl_mode = unified;    cf->timeout_handler.socket_name = NULL;    cf->timeout_handler.fd = -1;    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)	err(1, "getrlimit");    while ((ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")) != -1)	switch (ch) {	case 'f':	    cf->nodaemon = 1;	    break;	case 'l':	    bh[0] = optarg;	    bh[1] = strchr(bh[0], '/');	    if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }	    break;	case '6':	    bh6[0] = optarg;	    bh6[1] = strchr(bh6[0], '/');	    if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }	    break;	case 's':	    if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }	    cmd_sock = optarg;	    break;	case 't':	    cf->tos = atoi(optarg);	    break;	case '2':	    cf->dmode = 1;	    break;	case 'v':	    printf("Basic version: %d\n", CPROTOVER);	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }	    exit(0);	    break;	case 'r':	    cf->rdir = optarg;	    break;	case 'S':	    cf->sdir = optarg;	    break;	case 'R':	    cf->rrtcp = 0;	    break;	case 'p':	    pid_file = optarg;	    break;	case 'T':	    cf->max_ttl = atoi(optarg);	    break;	case 'L':	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");	    if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));	    break;	case 'm':	    cf->port_min = atoi(optarg);	    break;	case 'M':	    cf->port_max = atoi(optarg);	    break;	case 'u':	    cf->run_uname = optarg;	    cp = strchr(optarg, ':');	    if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }	    cf->run_gname = cp;	    break;	case 'F':	    cf->no_check = 1;	    break;	case 'i':	    cf->ttl_mode = independent;	    break;	case 'n':	    if(strncmp("unix:", optarg, 5) == 0) {		optarg += 5;		if(!strlen(optarg)) {		    fprintf(stderr, "timeout notification socket name too short\n");		    exit(0);		}		cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);		if(!cf->timeout_handler.socket_name)		    perror("malloc");		strcpy(cf->timeout_handler.socket_name, optarg);	    } else {		fprintf(stderr, "timeout notification socket must be unix:\n");		exit(0);	    }	    break;	case '?':	default:	    usage();	}    if (cf->rdir == NULL && cf->sdir != NULL)	errx(1, "-S switch requires -r switch");    if (cf->no_check == 0 && getuid() == 0 && cf->run_uname == NULL) {	if (cf->umode != 0) {	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	} else {	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}    }    if (cf->port_min <= 0 || cf->port_min > 65535)	errx(1, "invalid value of the port_min argument, "	  "not in the range 1-65535");    if (cf->port_max <= 0 || cf->port_max > 65535)	errx(1, "invalid value of the port_max argument, "	  "not in the range 1-65535");    if (cf->port_min > cf->port_max)	errx(1, "port_min should be less than port_max");    /* make sure that port_min and port_max are even */    if ((cf->port_min % 2) != 0)	cf->port_min++;    if ((cf->port_max % 2) != 0)	cf->port_max--;    cf->nextport[0] = cf->nextport[1] = cf->port_min;    cf->sessions = malloc((sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    cf->pfds = malloc((sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    if (bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL) {	if (cf->umode != 0)	    errx(1, "explicit binding address has to be specified in UDP "	      "command mode");	bh[0] = "*";    }    for (i = 0; i < 2; i++) {	if (bh[i] != NULL && *bh[i] == '\0')	    bh[i] = NULL;	if (bh6[i] != NULL && *bh6[i] == '\0')	    bh6[i] = NULL;    }    i = ((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1);    if (cf->bmode != 0) {	if (bh[0] != NULL && bh6[0] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");	if (bh[1] != NULL && bh6[1] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");	if (i != 2)	    errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);    } else if (i != 1) {	errx(1, "exactly 1 listen addresses required, %d provided", i);    }    for (i = 0; i < 2; i++) {	cf->bindaddr[i] = NULL;	if (bh[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}	if (bh6[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}    }    if (cf->bindaddr[0] == NULL) {	cf->bindaddr[0] = cf->bindaddr[1];	cf->bindaddr[1] = NULL;    }}
static void
init_config(struct cfg *cf, int argc, char **argv)
init_config
struct cfg *cf
struct cfg
cfg
*cf
*
cf
int argc
int
argc
argc
char **argv
char
**argv
*
*
argv
{    int ch, i;    char *bh[2], *bh6[2], *cp;    bh[0] = bh[1] = bh6[0] = bh6[1] = NULL;    cf->port_min = PORT_MIN;    cf->port_max = PORT_MAX;    cf->max_ttl = SESSION_TIMEOUT;    cf->tos = TOS;    cf->rrtcp = 1;    cf->ttl_mode = unified;    cf->timeout_handler.socket_name = NULL;    cf->timeout_handler.fd = -1;    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)	err(1, "getrlimit");    while ((ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")) != -1)	switch (ch) {	case 'f':	    cf->nodaemon = 1;	    break;	case 'l':	    bh[0] = optarg;	    bh[1] = strchr(bh[0], '/');	    if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }	    break;	case '6':	    bh6[0] = optarg;	    bh6[1] = strchr(bh6[0], '/');	    if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }	    break;	case 's':	    if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }	    cmd_sock = optarg;	    break;	case 't':	    cf->tos = atoi(optarg);	    break;	case '2':	    cf->dmode = 1;	    break;	case 'v':	    printf("Basic version: %d\n", CPROTOVER);	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }	    exit(0);	    break;	case 'r':	    cf->rdir = optarg;	    break;	case 'S':	    cf->sdir = optarg;	    break;	case 'R':	    cf->rrtcp = 0;	    break;	case 'p':	    pid_file = optarg;	    break;	case 'T':	    cf->max_ttl = atoi(optarg);	    break;	case 'L':	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");	    if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));	    break;	case 'm':	    cf->port_min = atoi(optarg);	    break;	case 'M':	    cf->port_max = atoi(optarg);	    break;	case 'u':	    cf->run_uname = optarg;	    cp = strchr(optarg, ':');	    if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }	    cf->run_gname = cp;	    break;	case 'F':	    cf->no_check = 1;	    break;	case 'i':	    cf->ttl_mode = independent;	    break;	case 'n':	    if(strncmp("unix:", optarg, 5) == 0) {		optarg += 5;		if(!strlen(optarg)) {		    fprintf(stderr, "timeout notification socket name too short\n");		    exit(0);		}		cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);		if(!cf->timeout_handler.socket_name)		    perror("malloc");		strcpy(cf->timeout_handler.socket_name, optarg);	    } else {		fprintf(stderr, "timeout notification socket must be unix:\n");		exit(0);	    }	    break;	case '?':	default:	    usage();	}    if (cf->rdir == NULL && cf->sdir != NULL)	errx(1, "-S switch requires -r switch");    if (cf->no_check == 0 && getuid() == 0 && cf->run_uname == NULL) {	if (cf->umode != 0) {	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	} else {	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}    }    if (cf->port_min <= 0 || cf->port_min > 65535)	errx(1, "invalid value of the port_min argument, "	  "not in the range 1-65535");    if (cf->port_max <= 0 || cf->port_max > 65535)	errx(1, "invalid value of the port_max argument, "	  "not in the range 1-65535");    if (cf->port_min > cf->port_max)	errx(1, "port_min should be less than port_max");    /* make sure that port_min and port_max are even */    if ((cf->port_min % 2) != 0)	cf->port_min++;    if ((cf->port_max % 2) != 0)	cf->port_max--;    cf->nextport[0] = cf->nextport[1] = cf->port_min;    cf->sessions = malloc((sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    cf->pfds = malloc((sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    if (bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL) {	if (cf->umode != 0)	    errx(1, "explicit binding address has to be specified in UDP "	      "command mode");	bh[0] = "*";    }    for (i = 0; i < 2; i++) {	if (bh[i] != NULL && *bh[i] == '\0')	    bh[i] = NULL;	if (bh6[i] != NULL && *bh6[i] == '\0')	    bh6[i] = NULL;    }    i = ((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1);    if (cf->bmode != 0) {	if (bh[0] != NULL && bh6[0] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");	if (bh[1] != NULL && bh6[1] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");	if (i != 2)	    errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);    } else if (i != 1) {	errx(1, "exactly 1 listen addresses required, %d provided", i);    }    for (i = 0; i < 2; i++) {	cf->bindaddr[i] = NULL;	if (bh[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}	if (bh6[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}    }    if (cf->bindaddr[0] == NULL) {	cf->bindaddr[0] = cf->bindaddr[1];	cf->bindaddr[1] = NULL;    }}
int ch, i;
int ch, i;
int
ch
ch
i
i
char *bh[2], *bh6[2], *cp;
char *bh[2], *bh6[2], *cp;
char
*bh[2]
*
bh
[2]
2
*bh6[2]
*
bh6
[2]
2
*cp
*
cp
bh[0] = bh[1] = bh6[0] = bh6[1] = NULL;
bh[0] = bh[1] = bh6[0] = bh6[1] = NULL
bh[0]
bh
bh
0
bh[1] = bh6[0] = bh6[1] = NULL
bh[1]
bh
bh
1
bh6[0] = bh6[1] = NULL
bh6[0]
bh6
bh6
0
bh6[1] = NULL
bh6[1]
bh6
bh6
1
NULL
NULL
cf->port_min = PORT_MIN;
cf->port_min = PORT_MIN
cf->port_min
cf
cf
port_min
PORT_MIN
PORT_MIN
cf->port_max = PORT_MAX;
cf->port_max = PORT_MAX
cf->port_max
cf
cf
port_max
PORT_MAX
PORT_MAX
cf->max_ttl = SESSION_TIMEOUT;
cf->max_ttl = SESSION_TIMEOUT
cf->max_ttl
cf
cf
max_ttl
SESSION_TIMEOUT
SESSION_TIMEOUT
cf->tos = TOS;
cf->tos = TOS
cf->tos
cf
cf
tos
TOS
TOS
cf->rrtcp = 1;
cf->rrtcp = 1
cf->rrtcp
cf
cf
rrtcp
1
cf->ttl_mode = unified;
cf->ttl_mode = unified
cf->ttl_mode
cf
cf
ttl_mode
unified
unified
cf->timeout_handler.socket_name = NULL;
cf->timeout_handler.socket_name = NULL
cf->timeout_handler.socket_name
cf->timeout_handler
cf
cf
timeout_handler
socket_name
NULL
NULL
cf->timeout_handler.fd = -1;
cf->timeout_handler.fd = -1
cf->timeout_handler.fd
cf->timeout_handler
cf
cf
timeout_handler
fd
-1
1
if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)	err(1, "getrlimit");
getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0
getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit))
getrlimit
getrlimit
RLIMIT_NOFILE
RLIMIT_NOFILE
&(cf->nofile_limit)
(cf->nofile_limit)
cf->nofile_limit
cf
cf
nofile_limit
0
err(1, "getrlimit");
err(1, "getrlimit")
err
err
1
"getrlimit"
while ((ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")) != -1)	switch (ch) {	case 'f':	    cf->nodaemon = 1;	    break;	case 'l':	    bh[0] = optarg;	    bh[1] = strchr(bh[0], '/');	    if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }	    break;	case '6':	    bh6[0] = optarg;	    bh6[1] = strchr(bh6[0], '/');	    if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }	    break;	case 's':	    if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }	    cmd_sock = optarg;	    break;	case 't':	    cf->tos = atoi(optarg);	    break;	case '2':	    cf->dmode = 1;	    break;	case 'v':	    printf("Basic version: %d\n", CPROTOVER);	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }	    exit(0);	    break;	case 'r':	    cf->rdir = optarg;	    break;	case 'S':	    cf->sdir = optarg;	    break;	case 'R':	    cf->rrtcp = 0;	    break;	case 'p':	    pid_file = optarg;	    break;	case 'T':	    cf->max_ttl = atoi(optarg);	    break;	case 'L':	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");	    if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));	    break;	case 'm':	    cf->port_min = atoi(optarg);	    break;	case 'M':	    cf->port_max = atoi(optarg);	    break;	case 'u':	    cf->run_uname = optarg;	    cp = strchr(optarg, ':');	    if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }	    cf->run_gname = cp;	    break;	case 'F':	    cf->no_check = 1;	    break;	case 'i':	    cf->ttl_mode = independent;	    break;	case 'n':	    if(strncmp("unix:", optarg, 5) == 0) {		optarg += 5;		if(!strlen(optarg)) {		    fprintf(stderr, "timeout notification socket name too short\n");		    exit(0);		}		cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);		if(!cf->timeout_handler.socket_name)		    perror("malloc");		strcpy(cf->timeout_handler.socket_name, optarg);	    } else {		fprintf(stderr, "timeout notification socket must be unix:\n");		exit(0);	    }	    break;	case '?':	default:	    usage();	}
(ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")) != -1
(ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:"))
ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
ch
ch
getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
getopt
getopt
argc
argc
argv
argv
"vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:"
-1
1
switch (ch) {	case 'f':	    cf->nodaemon = 1;	    break;	case 'l':	    bh[0] = optarg;	    bh[1] = strchr(bh[0], '/');	    if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }	    break;	case '6':	    bh6[0] = optarg;	    bh6[1] = strchr(bh6[0], '/');	    if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }	    break;	case 's':	    if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }	    cmd_sock = optarg;	    break;	case 't':	    cf->tos = atoi(optarg);	    break;	case '2':	    cf->dmode = 1;	    break;	case 'v':	    printf("Basic version: %d\n", CPROTOVER);	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }	    exit(0);	    break;	case 'r':	    cf->rdir = optarg;	    break;	case 'S':	    cf->sdir = optarg;	    break;	case 'R':	    cf->rrtcp = 0;	    break;	case 'p':	    pid_file = optarg;	    break;	case 'T':	    cf->max_ttl = atoi(optarg);	    break;	case 'L':	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");	    if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));	    break;	case 'm':	    cf->port_min = atoi(optarg);	    break;	case 'M':	    cf->port_max = atoi(optarg);	    break;	case 'u':	    cf->run_uname = optarg;	    cp = strchr(optarg, ':');	    if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }	    cf->run_gname = cp;	    break;	case 'F':	    cf->no_check = 1;	    break;	case 'i':	    cf->ttl_mode = independent;	    break;	case 'n':	    if(strncmp("unix:", optarg, 5) == 0) {		optarg += 5;		if(!strlen(optarg)) {		    fprintf(stderr, "timeout notification socket name too short\n");		    exit(0);		}		cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);		if(!cf->timeout_handler.socket_name)		    perror("malloc");		strcpy(cf->timeout_handler.socket_name, optarg);	    } else {		fprintf(stderr, "timeout notification socket must be unix:\n");		exit(0);	    }	    break;	case '?':	default:	    usage();	}
ch
ch
{	case 'f':	    cf->nodaemon = 1;	    break;	case 'l':	    bh[0] = optarg;	    bh[1] = strchr(bh[0], '/');	    if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }	    break;	case '6':	    bh6[0] = optarg;	    bh6[1] = strchr(bh6[0], '/');	    if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }	    break;	case 's':	    if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }	    cmd_sock = optarg;	    break;	case 't':	    cf->tos = atoi(optarg);	    break;	case '2':	    cf->dmode = 1;	    break;	case 'v':	    printf("Basic version: %d\n", CPROTOVER);	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }	    exit(0);	    break;	case 'r':	    cf->rdir = optarg;	    break;	case 'S':	    cf->sdir = optarg;	    break;	case 'R':	    cf->rrtcp = 0;	    break;	case 'p':	    pid_file = optarg;	    break;	case 'T':	    cf->max_ttl = atoi(optarg);	    break;	case 'L':	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");	    if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));	    break;	case 'm':	    cf->port_min = atoi(optarg);	    break;	case 'M':	    cf->port_max = atoi(optarg);	    break;	case 'u':	    cf->run_uname = optarg;	    cp = strchr(optarg, ':');	    if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }	    cf->run_gname = cp;	    break;	case 'F':	    cf->no_check = 1;	    break;	case 'i':	    cf->ttl_mode = independent;	    break;	case 'n':	    if(strncmp("unix:", optarg, 5) == 0) {		optarg += 5;		if(!strlen(optarg)) {		    fprintf(stderr, "timeout notification socket name too short\n");		    exit(0);		}		cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);		if(!cf->timeout_handler.socket_name)		    perror("malloc");		strcpy(cf->timeout_handler.socket_name, optarg);	    } else {		fprintf(stderr, "timeout notification socket must be unix:\n");		exit(0);	    }	    break;	case '?':	default:	    usage();	}
case 'f':
'f'
cf->nodaemon = 1;
cf->nodaemon = 1
cf->nodaemon
cf
cf
nodaemon
1
break;
case 'l':
'l'
bh[0] = optarg;
bh[0] = optarg
bh[0]
bh
bh
0
optarg
optarg
bh[1] = strchr(bh[0], '/');
bh[1] = strchr(bh[0], '/')
bh[1]
bh
bh
1
strchr(bh[0], '/')
strchr
strchr
bh[0]
bh
bh
0
'/'
if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }
bh[1] != NULL
bh[1]
bh
bh
1
NULL
NULL
{		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }
*bh[1] = '\0';
*bh[1] = '\0'
*bh[1]
bh[1]
bh
bh
1
'\0'
bh[1]++;
bh[1]++
bh[1]
bh
bh
1
cf->bmode = 1;
cf->bmode = 1
cf->bmode
cf
cf
bmode
1
break;
case '6':
'6'
bh6[0] = optarg;
bh6[0] = optarg
bh6[0]
bh6
bh6
0
optarg
optarg
bh6[1] = strchr(bh6[0], '/');
bh6[1] = strchr(bh6[0], '/')
bh6[1]
bh6
bh6
1
strchr(bh6[0], '/')
strchr
strchr
bh6[0]
bh6
bh6
0
'/'
if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }
bh6[1] != NULL
bh6[1]
bh6
bh6
1
NULL
NULL
{		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }
*bh6[1] = '\0';
*bh6[1] = '\0'
*bh6[1]
bh6[1]
bh6
bh6
1
'\0'
bh6[1]++;
bh6[1]++
bh6[1]
bh6
bh6
1
cf->bmode = 1;
cf->bmode = 1
cf->bmode
cf
cf
bmode
1
break;
case 's':
's'
if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }
strncmp("udp:", optarg, 4) == 0
strncmp("udp:", optarg, 4)
strncmp
strncmp
"udp:"
optarg
optarg
4
0
{		cf->umode = 1;		optarg += 4;	    }
cf->umode = 1;
cf->umode = 1
cf->umode
cf
cf
umode
1
optarg += 4;
optarg += 4
optarg
optarg
4
if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }
strncmp("udp6:", optarg, 5) == 0
strncmp("udp6:", optarg, 5)
strncmp
strncmp
"udp6:"
optarg
optarg
5
0
{		cf->umode = 6;		optarg += 5;	    }
cf->umode = 6;
cf->umode = 6
cf->umode
cf
cf
umode
6
optarg += 5;
optarg += 5
optarg
optarg
5
if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }
strncmp("unix:", optarg, 5) == 0
strncmp("unix:", optarg, 5)
strncmp
strncmp
"unix:"
optarg
optarg
5
0
{		cf->umode = 0;		optarg += 5;	    }
cf->umode = 0;
cf->umode = 0
cf->umode
cf
cf
umode
0
optarg += 5;
optarg += 5
optarg
optarg
5
cmd_sock = optarg;
cmd_sock = optarg
cmd_sock
cmd_sock
optarg
optarg
break;
case 't':
't'
cf->tos = atoi(optarg);
cf->tos = atoi(optarg)
cf->tos
cf
cf
tos
atoi(optarg)
atoi
atoi
optarg
optarg
break;
case '2':
'2'
cf->dmode = 1;
cf->dmode = 1
cf->dmode
cf
cf
dmode
1
break;
case 'v':
'v'
printf("Basic version: %d\n", CPROTOVER);
printf("Basic version: %d\n", CPROTOVER)
printf
printf
"Basic version: %d\n"
CPROTOVER
CPROTOVER
for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }
i = 1;
i = 1
i
i
1
proto_caps[i].pc_id != NULL
proto_caps[i].pc_id
proto_caps[i]
proto_caps
proto_caps
i
i
pc_id
NULL
NULL
++i
i
i
{		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }
printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);
printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description)
printf
printf
"Extension %s: %s\n"
proto_caps[i].pc_id
proto_caps[i]
proto_caps
proto_caps
i
i
pc_id
proto_caps[i].pc_description
proto_caps[i]
proto_caps
proto_caps
i
i
pc_description
exit(0);
exit(0)
exit
exit
0
break;
case 'r':
'r'
cf->rdir = optarg;
cf->rdir = optarg
cf->rdir
cf
cf
rdir
optarg
optarg
break;
case 'S':
'S'
cf->sdir = optarg;
cf->sdir = optarg
cf->sdir
cf
cf
sdir
optarg
optarg
break;
case 'R':
'R'
cf->rrtcp = 0;
cf->rrtcp = 0
cf->rrtcp
cf
cf
rrtcp
0
break;
case 'p':
'p'
pid_file = optarg;
pid_file = optarg
pid_file
pid_file
optarg
optarg
break;
case 'T':
'T'
cf->max_ttl = atoi(optarg);
cf->max_ttl = atoi(optarg)
cf->max_ttl
cf
cf
max_ttl
atoi(optarg)
atoi
atoi
optarg
optarg
break;
case 'L':
'L'
cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);
cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg)
cf->nofile_limit.rlim_cur
cf->nofile_limit
cf
cf
nofile_limit
rlim_cur
cf->nofile_limit.rlim_max = atoi(optarg)
cf->nofile_limit.rlim_max
cf->nofile_limit
cf
cf
nofile_limit
rlim_max
atoi(optarg)
atoi
atoi
optarg
optarg
if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");
setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0
setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit))
setrlimit
setrlimit
RLIMIT_NOFILE
RLIMIT_NOFILE
&(cf->nofile_limit)
(cf->nofile_limit)
cf->nofile_limit
cf
cf
nofile_limit
0
err(1, "setrlimit");
err(1, "setrlimit")
err
err
1
"setrlimit"
if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");
getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0
getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit))
getrlimit
getrlimit
RLIMIT_NOFILE
RLIMIT_NOFILE
&(cf->nofile_limit)
(cf->nofile_limit)
cf->nofile_limit
cf
cf
nofile_limit
0
err(1, "getrlimit");
err(1, "getrlimit")
err
err
1
"getrlimit"
if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));
cf->nofile_limit.rlim_max < atoi(optarg)
cf->nofile_limit.rlim_max
cf->nofile_limit
cf
cf
nofile_limit
rlim_max
atoi(optarg)
atoi
atoi
optarg
optarg
warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));
warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg))
warnx
warnx
"limit allocated by setrlimit (%d) is less than "		  "requested (%d)"
(int) cf->nofile_limit.rlim_max
int
int

cf->nofile_limit.rlim_max
cf->nofile_limit
cf
cf
nofile_limit
rlim_max
atoi(optarg)
atoi
atoi
optarg
optarg
break;
case 'm':
'm'
cf->port_min = atoi(optarg);
cf->port_min = atoi(optarg)
cf->port_min
cf
cf
port_min
atoi(optarg)
atoi
atoi
optarg
optarg
break;
case 'M':
'M'
cf->port_max = atoi(optarg);
cf->port_max = atoi(optarg)
cf->port_max
cf
cf
port_max
atoi(optarg)
atoi
atoi
optarg
optarg
break;
case 'u':
'u'
cf->run_uname = optarg;
cf->run_uname = optarg
cf->run_uname
cf
cf
run_uname
optarg
optarg
cp = strchr(optarg, ':');
cp = strchr(optarg, ':')
cp
cp
strchr(optarg, ':')
strchr
strchr
optarg
optarg
':'
if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }
cp != NULL
cp
cp
NULL
NULL
{		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }
if (cp == optarg)		    cf->run_uname = NULL;
cp == optarg
cp
cp
optarg
optarg
cf->run_uname = NULL;
cf->run_uname = NULL
cf->run_uname
cf
cf
run_uname
NULL
NULL
cp[0] = '\0';
cp[0] = '\0'
cp[0]
cp
cp
0
'\0'
cp++;
cp++
cp
cp
cf->run_gname = cp;
cf->run_gname = cp
cf->run_gname
cf
cf
run_gname
cp
cp
break;
case 'F':
'F'
cf->no_check = 1;
cf->no_check = 1
cf->no_check
cf
cf
no_check
1
break;
case 'i':
'i'
cf->ttl_mode = independent;
cf->ttl_mode = independent
cf->ttl_mode
cf
cf
ttl_mode
independent
independent
break;
case 'n':
'n'
if(strncmp("unix:", optarg, 5) == 0) {		optarg += 5;		if(!strlen(optarg)) {		    fprintf(stderr, "timeout notification socket name too short\n");		    exit(0);		}		cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);		if(!cf->timeout_handler.socket_name)		    perror("malloc");		strcpy(cf->timeout_handler.socket_name, optarg);	    } else {		fprintf(stderr, "timeout notification socket must be unix:\n");		exit(0);	    }
strncmp("unix:", optarg, 5) == 0
strncmp("unix:", optarg, 5)
strncmp
strncmp
"unix:"
optarg
optarg
5
0
{		optarg += 5;		if(!strlen(optarg)) {		    fprintf(stderr, "timeout notification socket name too short\n");		    exit(0);		}		cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);		if(!cf->timeout_handler.socket_name)		    perror("malloc");		strcpy(cf->timeout_handler.socket_name, optarg);	    }
optarg += 5;
optarg += 5
optarg
optarg
5
if(!strlen(optarg)) {		    fprintf(stderr, "timeout notification socket name too short\n");		    exit(0);		}
!strlen(optarg)
strlen(optarg)
strlen
strlen
optarg
optarg
{		    fprintf(stderr, "timeout notification socket name too short\n");		    exit(0);		}
fprintf(stderr, "timeout notification socket name too short\n");
fprintf(stderr, "timeout notification socket name too short\n")
fprintf
fprintf
stderr
stderr
"timeout notification socket name too short\n"
exit(0);
exit(0)
exit
exit
0
cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);
cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1)
cf->timeout_handler.socket_name
cf->timeout_handler
cf
cf
timeout_handler
socket_name
(char *)malloc(strlen(optarg) + 1)
char *
char
*
*
malloc(strlen(optarg) + 1)
malloc
malloc
strlen(optarg) + 1
strlen(optarg)
strlen
strlen
optarg
optarg
1
if(!cf->timeout_handler.socket_name)		    perror("malloc");
!cf->timeout_handler.socket_name
cf->timeout_handler.socket_name
cf->timeout_handler
cf
cf
timeout_handler
socket_name
perror("malloc");
perror("malloc")
perror
perror
"malloc"
strcpy(cf->timeout_handler.socket_name, optarg);
strcpy(cf->timeout_handler.socket_name, optarg)
strcpy
strcpy
cf->timeout_handler.socket_name
cf->timeout_handler
cf
cf
timeout_handler
socket_name
optarg
optarg
{		fprintf(stderr, "timeout notification socket must be unix:\n");		exit(0);	    }
fprintf(stderr, "timeout notification socket must be unix:\n");
fprintf(stderr, "timeout notification socket must be unix:\n")
fprintf
fprintf
stderr
stderr
"timeout notification socket must be unix:\n"
exit(0);
exit(0)
exit
exit
0
break;
case '?':
'?'
default:
usage();
usage()
usage
usage
if (cf->rdir == NULL && cf->sdir != NULL)	errx(1, "-S switch requires -r switch");
cf->rdir == NULL && cf->sdir != NULL
cf->rdir == NULL
cf->rdir
cf
cf
rdir
NULL
NULL
cf->sdir != NULL
cf->sdir
cf
cf
sdir
NULL
NULL
errx(1, "-S switch requires -r switch");
errx(1, "-S switch requires -r switch")
errx
errx
1
"-S switch requires -r switch"
if (cf->no_check == 0 && getuid() == 0 && cf->run_uname == NULL) {	if (cf->umode != 0) {	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	} else {	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}    }
cf->no_check == 0 && getuid() == 0 && cf->run_uname == NULL
cf->no_check == 0 && getuid() == 0
cf->no_check == 0
cf->no_check
cf
cf
no_check
0
getuid() == 0
getuid()
getuid
getuid
0
cf->run_uname == NULL
cf->run_uname
cf
cf
run_uname
NULL
NULL
{	if (cf->umode != 0) {	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	} else {	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}    }
if (cf->umode != 0) {	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	} else {	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}
cf->umode != 0
cf->umode
cf
cf
umode
0
{	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	}
errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");
errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.")
errx
errx
1
"running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway."
{	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}
warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");
warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.")
warnx
warnx
"WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning."
if (cf->port_min <= 0 || cf->port_min > 65535)	errx(1, "invalid value of the port_min argument, "	  "not in the range 1-65535");
cf->port_min <= 0 || cf->port_min > 65535
cf->port_min <= 0
cf->port_min
cf
cf
port_min
0
cf->port_min > 65535
cf->port_min
cf
cf
port_min
65535
errx(1, "invalid value of the port_min argument, "	  "not in the range 1-65535");
errx(1, "invalid value of the port_min argument, "	  "not in the range 1-65535")
errx
errx
1
"invalid value of the port_min argument, "	  "not in the range 1-65535"
if (cf->port_max <= 0 || cf->port_max > 65535)	errx(1, "invalid value of the port_max argument, "	  "not in the range 1-65535");
cf->port_max <= 0 || cf->port_max > 65535
cf->port_max <= 0
cf->port_max
cf
cf
port_max
0
cf->port_max > 65535
cf->port_max
cf
cf
port_max
65535
errx(1, "invalid value of the port_max argument, "	  "not in the range 1-65535");
errx(1, "invalid value of the port_max argument, "	  "not in the range 1-65535")
errx
errx
1
"invalid value of the port_max argument, "	  "not in the range 1-65535"
if (cf->port_min > cf->port_max)	errx(1, "port_min should be less than port_max");
cf->port_min > cf->port_max
cf->port_min
cf
cf
port_min
cf->port_max
cf
cf
port_max
errx(1, "port_min should be less than port_max");
errx(1, "port_min should be less than port_max")
errx
errx
1
"port_min should be less than port_max"
if ((cf->port_min % 2) != 0)	cf->port_min++;
(cf->port_min % 2) != 0
(cf->port_min % 2)
cf->port_min % 2
cf->port_min
cf
cf
port_min
2
0
cf->port_min++;
cf->port_min++
cf->port_min
cf
cf
port_min
if ((cf->port_max % 2) != 0)	cf->port_max--;
(cf->port_max % 2) != 0
(cf->port_max % 2)
cf->port_max % 2
cf->port_max
cf
cf
port_max
2
0
cf->port_max--;
cf->port_max--
cf->port_max
cf
cf
port_max
cf->nextport[0] = cf->nextport[1] = cf->port_min;
cf->nextport[0] = cf->nextport[1] = cf->port_min
cf->nextport[0]
cf->nextport
cf
cf
nextport
0
cf->nextport[1] = cf->port_min
cf->nextport[1]
cf->nextport
cf
cf
nextport
1
cf->port_min
cf
cf
port_min
cf->sessions = malloc((sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));
cf->sessions = malloc((sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
cf->sessions
cf
cf
sessions
malloc((sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
malloc
malloc
(sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1)
(sizeof cf->sessions[0])
sizeof cf->sessions[0]
cf->sessions[0]
cf->sessions
cf
cf
sessions
0
(((cf->port_max - cf->port_min + 1) * 2) + 1)
((cf->port_max - cf->port_min + 1) * 2) + 1
((cf->port_max - cf->port_min + 1) * 2)
(cf->port_max - cf->port_min + 1) * 2
(cf->port_max - cf->port_min + 1)
cf->port_max - cf->port_min + 1
cf->port_max - cf->port_min
cf->port_max
cf
cf
port_max
cf->port_min
cf
cf
port_min
1
2
1
cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));
cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
cf->rtp_servers
cf
cf
rtp_servers
malloc((sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
malloc
malloc
(sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1)
(sizeof cf->rtp_servers[0])
sizeof cf->rtp_servers[0]
cf->rtp_servers[0]
cf->rtp_servers
cf
cf
rtp_servers
0
(((cf->port_max - cf->port_min + 1) * 2) + 1)
((cf->port_max - cf->port_min + 1) * 2) + 1
((cf->port_max - cf->port_min + 1) * 2)
(cf->port_max - cf->port_min + 1) * 2
(cf->port_max - cf->port_min + 1)
cf->port_max - cf->port_min + 1
cf->port_max - cf->port_min
cf->port_max
cf
cf
port_max
cf->port_min
cf
cf
port_min
1
2
1
cf->pfds = malloc((sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));
cf->pfds = malloc((sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
cf->pfds
cf
cf
pfds
malloc((sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
malloc
malloc
(sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1)
(sizeof cf->pfds[0])
sizeof cf->pfds[0]
cf->pfds[0]
cf->pfds
cf
cf
pfds
0
(((cf->port_max - cf->port_min + 1) * 2) + 1)
((cf->port_max - cf->port_min + 1) * 2) + 1
((cf->port_max - cf->port_min + 1) * 2)
(cf->port_max - cf->port_min + 1) * 2
(cf->port_max - cf->port_min + 1)
cf->port_max - cf->port_min + 1
cf->port_max - cf->port_min
cf->port_max
cf
cf
port_max
cf->port_min
cf
cf
port_min
1
2
1
if (bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL) {	if (cf->umode != 0)	    errx(1, "explicit binding address has to be specified in UDP "	      "command mode");	bh[0] = "*";    }
bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL
bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL
bh[0] == NULL && bh[1] == NULL
bh[0] == NULL
bh[0]
bh
bh
0
NULL
NULL
bh[1] == NULL
bh[1]
bh
bh
1
NULL
NULL
bh6[0] == NULL
bh6[0]
bh6
bh6
0
NULL
NULL
bh6[1] == NULL
bh6[1]
bh6
bh6
1
NULL
NULL
{	if (cf->umode != 0)	    errx(1, "explicit binding address has to be specified in UDP "	      "command mode");	bh[0] = "*";    }
if (cf->umode != 0)	    errx(1, "explicit binding address has to be specified in UDP "	      "command mode");
cf->umode != 0
cf->umode
cf
cf
umode
0
errx(1, "explicit binding address has to be specified in UDP "	      "command mode");
errx(1, "explicit binding address has to be specified in UDP "	      "command mode")
errx
errx
1
"explicit binding address has to be specified in UDP "	      "command mode"
bh[0] = "*";
bh[0] = "*"
bh[0]
bh
bh
0
"*"
for (i = 0; i < 2; i++) {	if (bh[i] != NULL && *bh[i] == '\0')	    bh[i] = NULL;	if (bh6[i] != NULL && *bh6[i] == '\0')	    bh6[i] = NULL;    }
i = 0;
i = 0
i
i
0
i < 2
i
i
2
i++
i
i
{	if (bh[i] != NULL && *bh[i] == '\0')	    bh[i] = NULL;	if (bh6[i] != NULL && *bh6[i] == '\0')	    bh6[i] = NULL;    }
if (bh[i] != NULL && *bh[i] == '\0')	    bh[i] = NULL;
bh[i] != NULL && *bh[i] == '\0'
bh[i] != NULL
bh[i]
bh
bh
i
i
NULL
NULL
*bh[i] == '\0'
*bh[i]
bh[i]
bh
bh
i
i
'\0'
bh[i] = NULL;
bh[i] = NULL
bh[i]
bh
bh
i
i
NULL
NULL
if (bh6[i] != NULL && *bh6[i] == '\0')	    bh6[i] = NULL;
bh6[i] != NULL && *bh6[i] == '\0'
bh6[i] != NULL
bh6[i]
bh6
bh6
i
i
NULL
NULL
*bh6[i] == '\0'
*bh6[i]
bh6[i]
bh6
bh6
i
i
'\0'
bh6[i] = NULL;
bh6[i] = NULL
bh6[i]
bh6
bh6
i
i
NULL
NULL
i = ((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1);
i = ((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1)
i
i
((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1)
((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1)
((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1)
((bh[0] == NULL) ? 0 : 1)
(bh[0] == NULL) ? 0 : 1
(bh[0] == NULL)
bh[0] == NULL
bh[0]
bh
bh
0
NULL
NULL
0
1
((bh[1] == NULL) ? 0 : 1)
(bh[1] == NULL) ? 0 : 1
(bh[1] == NULL)
bh[1] == NULL
bh[1]
bh
bh
1
NULL
NULL
0
1
((bh6[0] == NULL) ? 0 : 1)
(bh6[0] == NULL) ? 0 : 1
(bh6[0] == NULL)
bh6[0] == NULL
bh6[0]
bh6
bh6
0
NULL
NULL
0
1
((bh6[1] == NULL) ? 0 : 1)
(bh6[1] == NULL) ? 0 : 1
(bh6[1] == NULL)
bh6[1] == NULL
bh6[1]
bh6
bh6
1
NULL
NULL
0
1
if (cf->bmode != 0) {	if (bh[0] != NULL && bh6[0] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");	if (bh[1] != NULL && bh6[1] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");	if (i != 2)	    errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);    } else if (i != 1) {	errx(1, "exactly 1 listen addresses required, %d provided", i);    }
cf->bmode != 0
cf->bmode
cf
cf
bmode
0
{	if (bh[0] != NULL && bh6[0] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");	if (bh[1] != NULL && bh6[1] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");	if (i != 2)	    errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);    }
if (bh[0] != NULL && bh6[0] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");
bh[0] != NULL && bh6[0] != NULL
bh[0] != NULL
bh[0]
bh
bh
0
NULL
NULL
bh6[0] != NULL
bh6[0]
bh6
bh6
0
NULL
NULL
errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");
errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both")
errx
errx
1
"either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both"
if (bh[1] != NULL && bh6[1] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");
bh[1] != NULL && bh6[1] != NULL
bh[1] != NULL
bh[1]
bh
bh
1
NULL
NULL
bh6[1] != NULL
bh6[1]
bh6
bh6
1
NULL
NULL
errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");
errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both")
errx
errx
1
"either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both"
if (i != 2)	    errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);
i != 2
i
i
2
errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);
errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i)
errx
errx
1
"incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided"
i
i
if (i != 1) {	errx(1, "exactly 1 listen addresses required, %d provided", i);    }
i != 1
i
i
1
{	errx(1, "exactly 1 listen addresses required, %d provided", i);    }
errx(1, "exactly 1 listen addresses required, %d provided", i);
errx(1, "exactly 1 listen addresses required, %d provided", i)
errx
errx
1
"exactly 1 listen addresses required, %d provided"
i
i
for (i = 0; i < 2; i++) {	cf->bindaddr[i] = NULL;	if (bh[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}	if (bh6[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}    }
i = 0;
i = 0
i
i
0
i < 2
i
i
2
i++
i
i
{	cf->bindaddr[i] = NULL;	if (bh[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}	if (bh6[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}    }
cf->bindaddr[i] = NULL;
cf->bindaddr[i] = NULL
cf->bindaddr[i]
cf->bindaddr
cf
cf
bindaddr
i
i
NULL
NULL
if (bh[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}
bh[i] != NULL
bh[i]
bh
bh
i
i
NULL
NULL
{	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}
cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));
cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage))
cf->bindaddr[i]
cf->bindaddr
cf
cf
bindaddr
i
i
malloc(sizeof(struct sockaddr_storage))
malloc
malloc
sizeof(struct sockaddr_storage)
struct sockaddr_storage
struct sockaddr_storage
sockaddr_storage

setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);
setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE)
setbindhost
setbindhost
cf->bindaddr[i]
cf->bindaddr
cf
cf
bindaddr
i
i
AF_INET
AF_INET
bh[i]
bh
bh
i
i
SERVICE
SERVICE
continue;
if (bh6[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}
bh6[i] != NULL
bh6[i]
bh6
bh6
i
i
NULL
NULL
{	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}
cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));
cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage))
cf->bindaddr[i]
cf->bindaddr
cf
cf
bindaddr
i
i
malloc(sizeof(struct sockaddr_storage))
malloc
malloc
sizeof(struct sockaddr_storage)
struct sockaddr_storage
struct sockaddr_storage
sockaddr_storage

setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);
setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE)
setbindhost
setbindhost
cf->bindaddr[i]
cf->bindaddr
cf
cf
bindaddr
i
i
AF_INET6
AF_INET6
bh6[i]
bh6
bh6
i
i
SERVICE
SERVICE
continue;
if (cf->bindaddr[0] == NULL) {	cf->bindaddr[0] = cf->bindaddr[1];	cf->bindaddr[1] = NULL;    }
cf->bindaddr[0] == NULL
cf->bindaddr[0]
cf->bindaddr
cf
cf
bindaddr
0
NULL
NULL
{	cf->bindaddr[0] = cf->bindaddr[1];	cf->bindaddr[1] = NULL;    }
cf->bindaddr[0] = cf->bindaddr[1];
cf->bindaddr[0] = cf->bindaddr[1]
cf->bindaddr[0]
cf->bindaddr
cf
cf
bindaddr
0
cf->bindaddr[1]
cf->bindaddr
cf
cf
bindaddr
1
cf->bindaddr[1] = NULL;
cf->bindaddr[1] = NULL
cf->bindaddr[1]
cf->bindaddr
cf
cf
bindaddr
1
NULL
NULL
-----joern-----
(371,865,0)
(875,219,0)
(73,497,0)
(179,50,0)
(499,74,0)
(68,50,0)
(269,472,0)
(189,57,0)
(907,425,0)
(283,288,0)
(3,561,0)
(620,337,0)
(240,521,0)
(489,50,0)
(549,271,0)
(4,743,0)
(915,154,0)
(774,117,0)
(455,865,0)
(340,50,0)
(249,493,0)
(45,22,0)
(53,554,0)
(358,917,0)
(7,26,0)
(483,494,0)
(201,828,0)
(577,658,0)
(357,175,0)
(853,74,0)
(191,240,0)
(715,654,0)
(657,160,0)
(356,865,0)
(840,865,0)
(788,768,0)
(5,865,0)
(561,647,0)
(99,618,0)
(937,115,0)
(512,734,0)
(131,728,0)
(632,680,0)
(234,470,0)
(820,351,0)
(670,405,0)
(69,748,0)
(791,248,0)
(371,35,0)
(713,167,0)
(59,865,0)
(973,38,0)
(841,865,0)
(720,846,0)
(103,825,0)
(410,441,0)
(304,152,0)
(364,480,0)
(732,630,0)
(968,69,0)
(453,809,0)
(403,50,0)
(249,198,0)
(706,933,0)
(377,150,0)
(131,634,0)
(541,50,0)
(859,655,0)
(700,101,0)
(10,249,0)
(611,462,0)
(299,50,0)
(233,760,0)
(73,958,0)
(543,858,0)
(247,383,0)
(14,18,0)
(909,584,0)
(341,10,0)
(947,529,0)
(561,312,0)
(873,865,0)
(856,105,0)
(72,332,0)
(211,962,0)
(255,787,0)
(789,865,0)
(761,244,0)
(401,580,0)
(372,50,0)
(342,865,0)
(819,445,0)
(631,847,0)
(703,820,0)
(824,530,0)
(619,785,0)
(245,198,0)
(647,617,0)
(162,687,0)
(333,131,0)
(131,786,0)
(249,929,0)
(339,308,0)
(423,862,0)
(902,510,0)
(955,861,0)
(590,66,0)
(956,308,0)
(929,455,0)
(675,83,0)
(249,546,0)
(653,865,0)
(131,751,0)
(91,723,0)
(266,832,0)
(535,378,0)
(543,94,0)
(44,622,0)
(470,39,0)
(527,917,0)
(222,431,0)
(102,99,0)
(293,865,0)
(101,445,0)
(321,653,0)
(249,368,0)
(612,99,0)
(330,865,0)
(18,493,0)
(607,865,0)
(335,865,0)
(833,50,0)
(74,50,0)
(846,687,0)
(60,679,0)
(311,397,0)
(953,567,0)
(719,485,0)
(226,582,0)
(729,77,0)
(165,617,0)
(205,284,0)
(965,865,0)
(437,826,0)
(927,247,0)
(281,429,0)
(152,304,0)
(134,858,0)
(617,153,0)
(48,107,0)
(589,424,0)
(785,191,0)
(538,454,0)
(750,286,0)
(734,563,0)
(67,733,0)
(249,873,0)
(646,50,0)
(852,176,0)
(786,865,0)
(959,863,0)
(503,104,0)
(298,50,0)
(850,454,0)
(835,162,0)
(643,728,0)
(922,108,0)
(514,865,0)
(408,865,0)
(945,947,0)
(159,311,0)
(39,167,0)
(35,371,0)
(389,865,0)
(181,736,0)
(231,865,0)
(249,389,0)
(370,462,0)
(280,233,0)
(857,59,0)
(614,913,0)
(781,455,0)
(575,153,0)
(360,786,0)
(237,807,0)
(449,165,0)
(552,620,0)
(787,498,0)
(10,916,0)
(101,865,0)
(828,385,0)
(443,631,0)
(768,788,0)
(472,316,0)
(83,865,0)
(276,286,0)
(657,841,0)
(10,626,0)
(374,46,0)
(601,50,0)
(948,33,0)
(941,940,0)
(597,317,0)
(551,383,0)
(412,745,0)
(425,760,0)
(316,178,0)
(925,584,0)
(424,589,0)
(371,383,0)
(413,214,0)
(771,610,0)
(288,462,0)
(958,865,0)
(502,50,0)
(265,8,0)
(657,248,0)
(125,487,0)
(582,872,0)
(154,820,0)
(87,433,0)
(710,77,0)
(957,71,0)
(325,529,0)
(129,797,0)
(10,567,0)
(76,412,0)
(296,115,0)
(131,861,0)
(254,635,0)
(524,280,0)
(929,289,0)
(757,46,0)
(555,50,0)
(387,486,0)
(763,241,0)
(725,167,0)
(822,50,0)
(249,767,0)
(657,698,0)
(596,306,0)
(249,698,0)
(378,641,0)
(636,707,0)
(101,383,0)
(236,153,0)
(56,214,0)
(167,50,0)
(467,422,0)
(947,85,0)
(904,28,0)
(131,841,0)
(817,965,0)
(10,878,0)
(373,889,0)
(32,183,0)
(869,342,0)
(282,641,0)
(306,748,0)
(52,386,0)
(6,260,0)
(112,498,0)
(813,958,0)
(670,494,0)
(138,698,0)
(105,865,0)
(713,135,0)
(797,129,0)
(530,554,0)
(680,655,0)
(801,365,0)
(37,606,0)
(405,222,0)
(707,636,0)
(742,884,0)
(444,820,0)
(540,905,0)
(65,111,0)
(731,414,0)
(653,383,0)
(914,80,0)
(51,335,0)
(488,607,0)
(296,37,0)
(536,657,0)
(131,802,0)
(777,69,0)
(481,556,0)
(440,264,0)
(249,584,0)
(194,320,0)
(657,767,0)
(482,849,0)
(271,385,0)
(567,865,0)
(121,142,0)
(84,330,0)
(647,240,0)
(740,607,0)
(41,431,0)
(756,50,0)
(249,626,0)
(38,378,0)
(606,37,0)
(445,517,0)
(131,293,0)
(49,748,0)
(975,511,0)
(161,455,0)
(79,598,0)
(39,470,0)
(564,753,0)
(400,840,0)
(820,595,0)
(699,50,0)
(224,859,0)
(657,495,0)
(171,464,0)
(657,751,0)
(609,728,0)
(661,74,0)
(174,786,0)
(335,96,0)
(916,50,0)
(778,963,0)
(542,865,0)
(343,257,0)
(189,914,0)
(544,636,0)
(530,285,0)
(935,33,0)
(471,764,0)
(292,764,0)
(131,657,0)
(657,635,0)
(305,745,0)
(970,385,0)
(841,303,0)
(300,50,0)
(793,476,0)
(657,567,0)
(84,722,0)
(657,584,0)
(533,378,0)
(176,661,0)
(914,189,0)
(91,382,0)
(830,580,0)
(674,511,0)
(198,74,0)
(954,330,0)
(427,175,0)
(256,914,0)
(867,100,0)
(430,50,0)
(272,651,0)
(10,105,0)
(518,278,0)
(696,847,0)
(873,620,0)
(624,132,0)
(598,865,0)
(404,674,0)
(45,753,0)
(804,263,0)
(583,182,0)
(668,101,0)
(567,485,0)
(657,117,0)
(249,62,0)
(551,763,0)
(924,15,0)
(311,351,0)
(249,861,0)
(131,249,0)
(10,117,0)
(353,378,0)
(534,153,0)
(368,865,0)
(826,962,0)
(940,941,0)
(753,153,0)
(116,844,0)
(249,518,0)
(793,933,0)
(862,175,0)
(335,620,0)
(10,841,0)
(223,233,0)
(963,136,0)
(847,631,0)
(131,356,0)
(188,153,0)
(897,153,0)
(192,505,0)
(126,371,0)
(674,186,0)
(939,102,0)
(175,85,0)
(136,216,0)
(627,293,0)
(249,216,0)
(568,217,0)
(109,787,0)
(697,597,0)
(111,886,0)
(131,635,0)
(963,778,0)
(557,743,0)
(419,744,0)
(582,226,0)
(131,626,0)
(33,935,0)
(170,943,0)
(855,266,0)
(531,408,0)
(114,244,0)
(131,533,0)
(186,797,0)
(318,50,0)
(178,821,0)
(16,904,0)
(556,760,0)
(402,302,0)
(142,228,0)
(12,748,0)
(249,913,0)
(846,733,0)
(250,819,0)
(795,972,0)
(958,73,0)
(338,647,0)
(580,563,0)
(926,707,0)
(458,844,0)
(10,293,0)
(657,493,0)
(247,445,0)
(271,167,0)
(727,50,0)
(694,85,0)
(422,894,0)
(535,589,0)
(395,866,0)
(905,641,0)
(810,402,0)
(736,231,0)
(66,77,0)
(933,793,0)
(878,542,0)
(657,943,0)
(931,912,0)
(724,50,0)
(820,154,0)
(796,330,0)
(610,153,0)
(788,865,0)
(22,653,0)
(431,274,0)
(747,363,0)
(119,178,0)
(168,535,0)
(131,917,0)
(805,50,0)
(713,385,0)
(131,282,0)
(911,129,0)
(832,266,0)
(359,745,0)
(603,963,0)
(657,356,0)
(276,744,0)
(965,162,0)
(405,670,0)
(854,177,0)
(746,735,0)
(151,865,0)
(618,274,0)
(546,865,0)
(434,50,0)
(698,865,0)
(83,36,0)
(328,853,0)
(525,45,0)
(633,873,0)
(901,120,0)
(194,385,0)
(488,855,0)
(226,406,0)
(66,354,0)
(261,385,0)
(866,426,0)
(464,55,0)
(123,411,0)
(228,71,0)
(572,356,0)
(203,15,0)
(676,50,0)
(745,445,0)
(177,865,0)
(934,4,0)
(319,754,0)
(88,86,0)
(826,259,0)
(661,617,0)
(166,50,0)
(840,426,0)
(944,803,0)
(662,214,0)
(4,760,0)
(895,940,0)
(634,865,0)
(221,433,0)
(330,84,0)
(456,514,0)
(861,735,0)
(767,468,0)
(8,265,0)
(183,864,0)
(10,664,0)
(486,387,0)
(249,635,0)
(261,889,0)
(118,450,0)
(391,227,0)
(649,750,0)
(194,167,0)
(939,862,0)
(144,221,0)
(363,230,0)
(190,50,0)
(417,38,0)
(682,94,0)
(47,266,0)
(474,261,0)
(409,50,0)
(10,389,0)
(375,589,0)
(353,132,0)
(814,941,0)
(555,498,0)
(548,506,0)
(388,472,0)
(802,260,0)
(195,231,0)
(104,503,0)
(520,448,0)
(630,768,0)
(454,538,0)
(426,866,0)
(7,865,0)
(680,753,0)
(131,943,0)
(562,354,0)
(658,136,0)
(967,825,0)
(472,753,0)
(587,873,0)
(589,535,0)
(289,153,0)
(637,859,0)
(844,116,0)
(751,383,0)
(227,760,0)
(485,946,0)
(424,558,0)
(131,916,0)
(249,916,0)
(657,802,0)
(673,486,0)
(10,337,0)
(501,50,0)
(843,544,0)
(687,803,0)
(197,551,0)
(917,655,0)
(98,466,0)
(741,368,0)
(631,743,0)
(369,743,0)
(102,438,0)
(131,162,0)
(155,913,0)
(621,533,0)
(210,430,0)
(249,7,0)
(23,470,0)
(249,495,0)
(722,387,0)
(661,176,0)
(241,763,0)
(355,153,0)
(844,153,0)
(249,751,0)
(169,96,0)
(651,382,0)
(342,252,0)
(13,538,0)
(249,878,0)
(639,595,0)
(38,626,0)
(764,383,0)
(831,153,0)
(61,153,0)
(8,760,0)
(573,785,0)
(631,760,0)
(806,50,0)
(261,167,0)
(585,865,0)
(219,462,0)
(563,153,0)
(22,45,0)
(86,468,0)
(858,543,0)
(131,658,0)
(840,753,0)
(912,50,0)
(764,445,0)
(385,641,0)
(657,664,0)
(347,929,0)
(657,62,0)
(478,101,0)
(180,487,0)
(818,54,0)
(290,542,0)
(252,644,0)
(862,939,0)
(903,634,0)
(86,800,0)
(291,841,0)
(227,598,0)
(691,369,0)
(465,39,0)
(10,533,0)
(40,511,0)
(311,595,0)
(921,7,0)
(773,965,0)
(31,916,0)
(10,495,0)
(406,226,0)
(382,91,0)
(784,397,0)
(807,803,0)
(17,744,0)
(776,768,0)
(285,926,0)
(10,248,0)
(737,408,0)
(10,546,0)
(10,786,0)
(827,861,0)
(750,748,0)
(846,789,0)
(370,215,0)
(127,83,0)
(972,680,0)
(145,563,0)
(519,863,0)
(879,713,0)
(608,517,0)
(249,165,0)
(228,142,0)
(645,371,0)
(86,865,0)
(58,959,0)
(486,408,0)
(447,153,0)
(175,641,0)
(494,385,0)
(683,370,0)
(490,947,0)
(913,935,0)
(602,394,0)
(613,153,0)
(206,778,0)
(435,863,0)
(584,462,0)
(644,252,0)
(24,250,0)
(80,914,0)
(10,131,0)
(511,674,0)
(744,276,0)
(547,50,0)
(255,331,0)
(10,913,0)
(655,50,0)
(472,865,0)
(433,221,0)
(505,865,0)
(492,631,0)
(893,622,0)
(390,497,0)
(307,853,0)
(393,647,0)
(172,312,0)
(10,751,0)
(368,610,0)
(71,597,0)
(265,865,0)
(638,425,0)
(249,654,0)
(554,865,0)
(470,641,0)
(522,284,0)
(466,462,0)
(641,385,0)
(10,356,0)
(131,62,0)
(395,151,0)
(2,767,0)
(477,262,0)
(406,59,0)
(10,802,0)
(249,828,0)
(928,819,0)
(861,865,0)
(160,725,0)
(204,154,0)
(151,753,0)
(146,802,0)
(665,618,0)
(840,655,0)
(278,50,0)
(772,664,0)
(917,865,0)
(323,389,0)
(242,278,0)
(428,930,0)
(825,103,0)
(232,622,0)
(382,651,0)
(89,681,0)
(592,662,0)
(387,722,0)
(966,441,0)
(717,50,0)
(706,865,0)
(920,476,0)
(626,38,0)
(37,296,0)
(687,72,0)
(652,635,0)
(186,886,0)
(227,595,0)
(597,71,0)
(656,840,0)
(249,356,0)
(322,50,0)
(798,368,0)
(257,50,0)
(62,514,0)
(716,808,0)
(249,634,0)
(25,653,0)
(131,913,0)
(131,117,0)
(497,29,0)
(532,261,0)
(514,62,0)
(128,664,0)
(657,658,0)
(898,50,0)
(849,748,0)
(249,105,0)
(606,200,0)
(653,22,0)
(464,247,0)
(762,5,0)
(396,76,0)
(264,865,0)
(672,563,0)
(819,865,0)
(232,760,0)
(4,154,0)
(900,50,0)
(941,271,0)
(94,543,0)
(820,296,0)
(15,563,0)
(961,657,0)
(599,4,0)
(767,865,0)
(657,728,0)
(139,946,0)
(463,761,0)
(295,943,0)
(336,434,0)
(919,304,0)
(147,570,0)
(294,35,0)
(745,865,0)
(493,18,0)
(10,160,0)
(821,926,0)
(326,585,0)
(662,775,0)
(853,617,0)
(315,887,0)
(131,664,0)
(131,546,0)
(10,62,0)
(268,117,0)
(131,7,0)
(779,26,0)
(207,828,0)
(455,929,0)
(780,680,0)
(848,363,0)
(604,397,0)
(678,57,0)
(529,947,0)
(145,558,0)
(381,713,0)
(872,476,0)
(439,788,0)
(249,658,0)
(671,50,0)
(685,803,0)
(629,50,0)
(871,655,0)
(537,50,0)
(859,793,0)
(890,681,0)
(657,634,0)
(470,85,0)
(10,7,0)
(420,46,0)
(5,140,0)
(270,654,0)
(707,926,0)
(732,116,0)
(378,617,0)
(538,13,0)
(46,757,0)
(797,186,0)
(330,414,0)
(249,131,0)
(636,153,0)
(10,162,0)
(853,749,0)
(442,855,0)
(655,871,0)
(59,406,0)
(78,105,0)
(258,287,0)
(594,760,0)
(249,943,0)
(882,607,0)
(688,661,0)
(163,571,0)
(622,232,0)
(280,311,0)
(701,538,0)
(72,687,0)
(517,445,0)
(657,873,0)
(273,431,0)
(457,905,0)
(10,165,0)
(647,74,0)
(82,257,0)
(689,462,0)
(722,84,0)
(137,50,0)
(133,153,0)
(786,679,0)
(387,120,0)
(162,965,0)
(815,597,0)
(459,249,0)
(441,865,0)
(663,651,0)
(704,247,0)
(173,94,0)
(488,498,0)
(792,177,0)
(311,760,0)
(71,228,0)
(10,635,0)
(859,865,0)
(750,743,0)
(131,389,0)
(800,86,0)
(734,705,0)
(222,405,0)
(397,311,0)
(250,316,0)
(379,136,0)
(942,59,0)
(274,50,0)
(812,151,0)
(494,670,0)
(314,152,0)
(42,107,0)
(81,725,0)
(10,368,0)
(799,849,0)
(878,555,0)
(899,494,0)
(238,863,0)
(249,248,0)
(659,263,0)
(677,131,0)
(518,865,0)
(820,703,0)
(266,855,0)
(622,865,0)
(728,865,0)
(301,514,0)
(103,940,0)
(76,441,0)
(110,725,0)
(411,215,0)
(819,250,0)
(86,485,0)
(939,889,0)
(10,198,0)
(10,917,0)
(167,39,0)
(623,916,0)
(454,962,0)
(949,763,0)
(657,293,0)
(723,91,0)
(496,454,0)
(657,828,0)
(131,584,0)
(876,29,0)
(28,350,0)
(349,905,0)
(445,50,0)
(274,749,0)
(92,150,0)
(918,634,0)
(369,748,0)
(10,828,0)
(905,85,0)
(62,498,0)
(910,800,0)
(183,241,0)
(99,102,0)
(329,426,0)
(77,66,0)
(120,559,0)
(249,162,0)
(738,788,0)
(145,312,0)
(616,808,0)
(367,802,0)
(392,189,0)
(539,315,0)
(793,859,0)
(131,493,0)
(739,265,0)
(498,555,0)
(399,62,0)
(279,306,0)
(460,789,0)
(653,445,0)
(855,442,0)
(418,424,0)
(657,913,0)
(528,797,0)
(618,378,0)
(657,657,0)
(48,849,0)
(709,402,0)
(654,50,0)
(708,194,0)
(657,546,0)
(493,733,0)
(904,274,0)
(451,495,0)
(714,249,0)
(260,153,0)
(866,395,0)
(625,50,0)
(644,182,0)
(706,383,0)
(657,786,0)
(160,139,0)
(808,748,0)
(415,734,0)
(657,654,0)
(389,445,0)
(735,50,0)
(657,105,0)
(45,655,0)
(693,342,0)
(408,434,0)
(768,630,0)
(789,846,0)
(736,181,0)
(129,865,0)
(469,832,0)
(880,821,0)
(692,70,0)
(952,282,0)
(507,50,0)
(264,787,0)
(271,941,0)
(819,383,0)
(10,518,0)
(218,760,0)
(231,736,0)
(736,687,0)
(504,958,0)
(845,153,0)
(751,865,0)
(908,153,0)
(214,662,0)
(473,153,0)
(398,153,0)
(736,733,0)
(383,153,0)
(346,50,0)
(757,72,0)
(29,497,0)
(55,386,0)
(732,864,0)
(148,521,0)
(131,654,0)
(891,191,0)
(863,959,0)
(176,438,0)
(311,280,0)
(236,407,0)
(251,488,0)
(940,103,0)
(826,760,0)
(936,535,0)
(758,252,0)
(763,551,0)
(926,285,0)
(462,50,0)
(286,276,0)
(829,8,0)
(721,36,0)
(164,369,0)
(595,277,0)
(874,50,0)
(802,865,0)
(5,655,0)
(177,241,0)
(479,286,0)
(630,732,0)
(529,619,0)
(851,248,0)
(963,865,0)
(21,466,0)
(352,219,0)
(154,429,0)
(213,153,0)
(366,54,0)
(122,129,0)
(506,748,0)
(72,757,0)
(703,865,0)
(600,18,0)
(349,825,0)
(131,10,0)
(356,196,0)
(284,185,0)
(252,342,0)
(175,862,0)
(17,369,0)
(657,389,0)
(657,249,0)
(371,445,0)
(500,50,0)
(97,749,0)
(249,664,0)
(365,141,0)
(45,865,0)
(80,304,0)
(790,493,0)
(759,734,0)
(380,703,0)
(938,872,0)
(101,668,0)
(354,66,0)
(154,4,0)
(90,302,0)
(316,250,0)
(94,865,0)
(287,35,0)
(69,743,0)
(107,13,0)
(441,76,0)
(591,406,0)
(353,274,0)
(679,50,0)
(156,240,0)
(749,853,0)
(131,518,0)
(10,493,0)
(730,495,0)
(249,282,0)
(749,274,0)
(116,732,0)
(10,873,0)
(726,450,0)
(182,644,0)
(438,176,0)
(969,751,0)
(120,387,0)
(117,912,0)
(229,736,0)
(202,546,0)
(657,282,0)
(642,233,0)
(199,139,0)
(516,877,0)
(408,486,0)
(247,865,0)
(545,335,0)
(93,271,0)
(563,145,0)
(20,585,0)
(106,618,0)
(249,786,0)
(657,518,0)
(331,255,0)
(376,383,0)
(657,626,0)
(412,775,0)
(10,861,0)
(593,50,0)
(131,873,0)
(149,153,0)
(541,510,0)
(785,619,0)
(657,368,0)
(80,27,0)
(725,385,0)
(598,227,0)
(108,289,0)
(10,657,0)
(846,807,0)
(191,617,0)
(10,943,0)
(586,50,0)
(680,972,0)
(212,50,0)
(335,136,0)
(820,760,0)
(640,546,0)
(752,86,0)
(158,312,0)
(275,135,0)
(811,533,0)
(11,394,0)
(38,274,0)
(657,917,0)
(233,962,0)
(130,723,0)
(769,374,0)
(334,277,0)
(131,711,0)
(574,293,0)
(302,402,0)
(972,262,0)
(117,865,0)
(151,395,0)
(657,929,0)
(10,634,0)
(131,698,0)
(75,152,0)
(386,55,0)
(509,518,0)
(546,753,0)
(657,878,0)
(408,303,0)
(657,131,0)
(324,570,0)
(10,10,0)
(96,335,0)
(770,153,0)
(9,80,0)
(289,108,0)
(650,259,0)
(132,353,0)
(951,280,0)
(19,703,0)
(131,131,0)
(764,865,0)
(196,153,0)
(107,48,0)
(131,767,0)
(131,198,0)
(304,80,0)
(239,551,0)
(766,933,0)
(870,458,0)
(605,884,0)
(421,215,0)
(892,751,0)
(626,809,0)
(926,821,0)
(461,232,0)
(657,10,0)
(849,48,0)
(553,198,0)
(825,349,0)
(641,378,0)
(131,105,0)
(930,57,0)
(43,864,0)
(348,543,0)
(923,264,0)
(131,878,0)
(10,282,0)
(658,865,0)
(249,10,0)
(263,563,0)
(505,236,0)
(849,962,0)
(293,414,0)
(635,434,0)
(306,962,0)
(208,689,0)
(342,679,0)
(964,567,0)
(584,411,0)
(249,802,0)
(345,706,0)
(335,446,0)
(182,585,0)
(327,91,0)
(246,598,0)
(446,711,0)
(837,331,0)
(745,412,0)
(143,554,0)
(10,929,0)
(787,255,0)
(462,219,0)
(10,584,0)
(344,353,0)
(947,641,0)
(906,661,0)
(241,183,0)
(618,99,0)
(113,878,0)
(838,698,0)
(131,368,0)
(124,10,0)
(70,185,0)
(131,828,0)
(905,349,0)
(249,117,0)
(35,287,0)
(285,530,0)
(657,162,0)
(267,222,0)
(935,50,0)
(10,728,0)
(883,448,0)
(458,865,0)
(235,104,0)
(807,846,0)
(960,458,0)
(881,50,0)
(615,277,0)
(241,177,0)
(18,865,0)
(932,84,0)
(361,877,0)
(943,865,0)
(787,264,0)
(286,750,0)
(667,288,0)
(8,296,0)
(30,468,0)
(313,54,0)
(585,430,0)
(351,429,0)
(635,865,0)
(249,728,0)
(579,57,0)
(657,533,0)
(560,826,0)
(765,446,0)
(454,748,0)
(816,15,0)
(55,464,0)
(10,698,0)
(433,865,0)
(193,721,0)
(764,386,0)
(5,753,0)
(494,167,0)
(855,488,0)
(657,916,0)
(647,561,0)
(834,196,0)
(249,657,0)
(754,50,0)
(432,658,0)
(551,865,0)
(680,865,0)
(177,753,0)
(933,706,0)
(13,107,0)
(657,198,0)
(836,193,0)
(131,567,0)
(416,303,0)
(0,389,0)
(151,655,0)
(249,293,0)
(249,533,0)
(140,5,0)
(755,480,0)
(312,145,0)
(247,464,0)
(689,50,0)
(558,424,0)
(85,50,0)
(191,74,0)
(187,424,0)
(10,767,0)
(131,248,0)
(657,7,0)
(690,660,0)
(309,542,0)
(262,972,0)
(397,865,0)
(887,315,0)
(551,445,0)
(684,670,0)
(559,120,0)
(221,111,0)
(885,750,0)
(10,658,0)
(607,488,0)
(581,282,0)
(495,274,0)
(184,484,0)
(36,83,0)
(491,686,0)
(698,541,0)
(582,407,0)
(657,861,0)
(888,518,0)
(426,840,0)
(414,50,0)
(558,145,0)
(214,865,0)
(503,351,0)
(889,261,0)
(718,819,0)
(312,561,0)
(476,793,0)
(859,753,0)
(104,235,0)
(864,732,0)
(569,402,0)
(332,72,0)
(725,160,0)
(36,721,0)
(131,160,0)
(131,495,0)
(904,378,0)
(316,472,0)
(248,167,0)
(664,85,0)
(26,153,0)
(472,655,0)
(178,316,0)
(510,541,0)
(498,112,0)
(209,50,0)
(839,789,0)
(10,654,0)
(576,356,0)
(971,5,0)
(508,179,0)
(913,865,0)
(386,764,0)
(476,872,0)
(648,189,0)
(320,946,0)
(821,178,0)
(438,102,0)
(513,706,0)
(950,50,0)
(896,50,0)
(842,265,0)
(177,655,0)
(744,17,0)
(452,231,0)
(745,383,0)
(480,141,0)
(431,378,0)
(706,445,0)
(280,115,0)
(191,785,0)
(244,761,0)
(651,865,0)
(311,296,0)
(511,865,0)
(535,274,0)
(554,530,0)
(220,217,0)
(249,249,0)
(868,505,0)
(628,165,0)
(775,412,0)
(320,194,0)
(565,7,0)
(963,446,0)
(872,582,0)
(369,17,0)
(566,963,0)
(152,57,0)
(253,50,0)
(259,826,0)
(468,350,0)
(782,686,0)
(585,182,0)
(864,183,0)
(46,374,0)
(407,236,0)
(526,761,0)
(775,153,0)
(249,567,0)
(233,280,0)
(77,57,0)
(943,446,0)
(243,153,0)
(712,761,0)
(721,193,0)
(578,353,0)
(217,100,0)
(28,904,0)
(497,73,0)
(103,558,0)
(974,433,0)
(105,179,0)
(407,582,0)
(157,544,0)
(135,713,0)
(1,767,0)
(634,430,0)
(436,50,0)
(783,904,0)
(64,45,0)
(666,597,0)
(695,940,0)
(558,103,0)
(475,194,0)
(63,153,0)
(860,721,0)
(523,349,0)
(544,865,0)
(542,878,0)
(597,362,0)
(963,620,0)
(809,350,0)
(681,240,0)
(823,871,0)
(617,378,0)
(225,395,0)
(297,50,0)
(384,112,0)
(249,841,0)
(200,606,0)
(588,50,0)
(131,165,0)
(889,939,0)
(657,165,0)
(95,484,0)
(310,825,0)
(100,217,0)
(232,351,0)
(728,689,0)
(733,153,0)
(619,529,0)
(131,929,0)
(351,503,0)
(669,191,0)
(431,222,0)
(550,841,0)
(102,939,0)
(794,151,0)
(657,803,0)
(249,917,0)
(702,217,0)
(249,160,0)
(492,443,1)
(10,495,1)
(84,330,1)
(741,798,1)
(551,865,1)
(131,293,1)
(765,943,1)
(829,265,1)
(957,322,1)
(739,259,1)
(699,679,1)
(958,865,1)
(764,383,1)
(527,515,1)
(643,609,1)
(96,335,1)
(764,865,1)
(538,454,1)
(11,96,1)
(131,767,1)
(472,388,1)
(18,14,1)
(506,748,1)
(945,490,1)
(392,9,1)
(45,753,1)
(32,241,1)
(289,108,1)
(132,624,1)
(940,695,1)
(648,392,1)
(596,13,1)
(268,774,1)
(957,507,1)
(772,515,1)
(315,539,1)
(657,62,1)
(812,794,1)
(706,865,1)
(39,465,1)
(296,37,1)
(764,471,1)
(245,515,1)
(407,582,1)
(365,801,1)
(709,959,1)
(288,462,1)
(844,116,1)
(914,256,1)
(131,802,1)
(544,157,1)
(788,738,1)
(262,477,1)
(81,135,1)
(826,760,1)
(435,238,1)
(10,293,1)
(546,865,1)
(10,728,1)
(10,786,1)
(92,377,1)
(102,99,1)
(131,10,1)
(361,866,1)
(825,967,1)
(180,125,1)
(634,865,1)
(222,267,1)
(131,634,1)
(529,325,1)
(879,381,1)
(5,971,1)
(247,383,1)
(414,731,1)
(416,841,1)
(593,916,1)
(816,203,1)
(656,55,1)
(311,296,1)
(511,865,1)
(370,462,1)
(470,234,1)
(99,612,1)
(597,362,1)
(490,785,1)
(249,389,1)
(249,916,1)
(902,698,1)
(703,380,1)
(10,10,1)
(657,584,1)
(523,905,1)
(191,240,1)
(524,311,1)
(896,654,1)
(77,710,1)
(354,66,1)
(605,29,1)
(775,412,1)
(725,167,1)
(740,882,1)
(368,741,1)
(522,887,1)
(56,262,1)
(51,545,1)
(642,524,1)
(796,487,1)
(890,89,1)
(131,546,1)
(592,214,1)
(957,586,1)
(231,195,1)
(329,840,1)
(858,543,1)
(10,567,1)
(194,385,1)
(667,462,1)
(424,418,1)
(789,865,1)
(767,865,1)
(433,865,1)
(62,514,1)
(87,974,1)
(320,194,1)
(175,641,1)
(519,435,1)
(95,619,1)
(957,489,1)
(567,865,1)
(957,625,1)
(736,687,1)
(34,111,1)
(631,492,1)
(957,671,1)
(131,567,1)
(657,495,1)
(657,698,1)
(841,865,1)
(57,678,1)
(573,191,1)
(962,211,1)
(495,730,1)
(203,924,1)
(131,841,1)
(657,767,1)
(175,357,1)
(177,854,1)
(476,793,1)
(120,559,1)
(873,587,1)
(671,430,1)
(10,368,1)
(880,178,1)
(923,686,1)
(849,962,1)
(384,62,1)
(637,226,1)
(472,753,1)
(469,855,1)
(86,88,1)
(182,585,1)
(851,85,1)
(657,248,1)
(345,859,1)
(259,826,1)
(228,142,1)
(529,947,1)
(535,168,1)
(530,824,1)
(817,70,1)
(402,810,1)
(389,865,1)
(177,753,1)
(964,953,1)
(488,498,1)
(249,767,1)
(889,373,1)
(110,81,1)
(65,221,1)
(312,158,1)
(10,841,1)
(236,407,1)
(621,811,1)
(673,408,1)
(545,438,1)
(846,789,1)
(309,290,1)
(863,519,1)
(951,233,1)
(703,865,1)
(258,35,1)
(371,126,1)
(249,533,1)
(707,926,1)
(303,416,1)
(716,506,1)
(516,361,1)
(45,655,1)
(253,689,1)
(582,872,1)
(46,420,1)
(351,503,1)
(24,819,1)
(10,654,1)
(42,48,1)
(972,680,1)
(957,822,1)
(408,865,1)
(556,760,1)
(10,917,1)
(644,252,1)
(105,78,1)
(576,753,1)
(618,274,1)
(684,494,1)
(82,343,1)
(963,446,1)
(233,223,1)
(604,296,1)
(10,131,1)
(718,472,1)
(176,661,1)
(820,444,1)
(802,865,1)
(388,269,1)
(917,865,1)
(837,787,1)
(250,24,1)
(783,16,1)
(885,962,1)
(706,445,1)
(369,691,1)
(249,828,1)
(360,174,1)
(8,760,1)
(46,374,1)
(808,616,1)
(131,916,1)
(657,165,1)
(131,162,1)
(227,391,1)
(833,468,1)
(66,590,1)
(594,15,1)
(623,100,1)
(654,715,1)
(594,580,1)
(657,533,1)
(304,919,1)
(729,57,1)
(201,282,1)
(494,167,1)
(858,134,1)
(787,109,1)
(271,167,1)
(40,975,1)
(264,865,1)
(657,635,1)
(597,815,1)
(672,808,1)
(785,573,1)
(157,843,1)
(193,836,1)
(957,699,1)
(64,525,1)
(454,496,1)
(356,865,1)
(220,302,1)
(89,394,1)
(878,542,1)
(793,859,1)
(19,351,1)
(800,86,1)
(131,698,1)
(10,634,1)
(580,563,1)
(36,83,1)
(117,268,1)
(488,607,1)
(862,175,1)
(623,249,1)
(558,424,1)
(249,62,1)
(112,384,1)
(131,248,1)
(927,704,1)
(798,196,1)
(657,567,1)
(2,1,1)
(518,888,1)
(797,528,1)
(920,793,1)
(570,147,1)
(599,934,1)
(609,288,1)
(729,930,1)
(460,181,1)
(698,865,1)
(773,817,1)
(131,635,1)
(904,378,1)
(763,551,1)
(145,558,1)
(657,7,1)
(311,351,1)
(781,161,1)
(43,183,1)
(506,548,1)
(266,832,1)
(131,861,1)
(518,865,1)
(249,943,1)
(249,917,1)
(525,653,1)
(17,369,1)
(94,865,1)
(477,972,1)
(791,851,1)
(10,546,1)
(657,828,1)
(560,437,1)
(957,318,1)
(26,779,1)
(202,640,1)
(371,383,1)
(97,853,1)
(191,74,1)
(249,282,1)
(503,104,1)
(0,323,1)
(535,378,1)
(742,605,1)
(925,466,1)
(261,167,1)
(93,825,1)
(48,849,1)
(725,385,1)
(968,276,1)
(657,160,1)
(249,10,1)
(974,186,1)
(330,414,1)
(859,655,1)
(482,538,1)
(505,865,1)
(514,301,1)
(72,332,1)
(76,396,1)
(101,865,1)
(386,52,1)
(657,162,1)
(749,97,1)
(658,577,1)
(641,385,1)
(131,160,1)
(833,132,1)
(967,349,1)
(584,909,1)
(446,765,1)
(353,378,1)
(947,641,1)
(178,316,1)
(730,451,1)
(567,964,1)
(767,2,1)
(343,515,1)
(239,197,1)
(537,135,1)
(911,674,1)
(619,785,1)
(249,160,1)
(74,499,1)
(105,865,1)
(466,98,1)
(731,293,1)
(866,426,1)
(131,751,1)
(131,786,1)
(559,84,1)
(246,425,1)
(404,511,1)
(226,406,1)
(835,965,1)
(657,841,1)
(247,865,1)
(10,389,1)
(657,282,1)
(256,189,1)
(966,410,1)
(715,270,1)
(85,694,1)
(72,757,1)
(923,193,1)
(682,173,1)
(679,60,1)
(807,237,1)
(196,834,1)
(139,199,1)
(659,150,1)
(265,842,1)
(728,865,1)
(790,18,1)
(955,827,1)
(457,540,1)
(335,51,1)
(464,247,1)
(267,431,1)
(184,95,1)
(206,963,1)
(199,160,1)
(223,642,1)
(537,485,1)
(131,282,1)
(965,773,1)
(14,600,1)
(170,959,1)
(204,820,1)
(957,723,1)
(461,622,1)
(252,342,1)
(710,729,1)
(249,249,1)
(905,457,1)
(825,310,1)
(240,156,1)
(131,878,1)
(405,670,1)
(554,865,1)
(276,286,1)
(445,517,1)
(134,543,1)
(511,40,1)
(374,769,1)
(907,638,1)
(745,383,1)
(431,378,1)
(21,288,1)
(957,300,1)
(471,292,1)
(665,176,1)
(162,965,1)
(520,723,1)
(755,364,1)
(418,589,1)
(542,865,1)
(62,399,1)
(753,564,1)
(173,425,1)
(101,478,1)
(957,253,1)
(249,368,1)
(566,603,1)
(669,891,1)
(229,231,1)
(869,693,1)
(657,664,1)
(704,722,1)
(780,287,1)
(10,356,1)
(307,495,1)
(94,682,1)
(249,878,1)
(939,862,1)
(25,866,1)
(290,515,1)
(825,349,1)
(666,957,1)
(947,85,1)
(622,44,1)
(509,515,1)
(101,445,1)
(68,255,1)
(658,865,1)
(530,554,1)
(35,294,1)
(612,618,1)
(647,617,1)
(838,138,1)
(178,119,1)
(618,378,1)
(564,546,1)
(70,692,1)
(248,791,1)
(259,650,1)
(582,226,1)
(814,271,1)
(870,960,1)
(426,329,1)
(657,117,1)
(926,821,1)
(359,305,1)
(171,247,1)
(249,495,1)
(233,760,1)
(380,19,1)
(391,598,1)
(542,309,1)
(905,641,1)
(131,493,1)
(670,494,1)
(957,537,1)
(960,775,1)
(859,753,1)
(617,378,1)
(38,417,1)
(44,893,1)
(653,321,1)
(129,865,1)
(719,567,1)
(10,802,1)
(647,240,1)
(600,260,1)
(69,748,1)
(69,777,1)
(291,466,1)
(716,748,1)
(801,480,1)
(722,387,1)
(225,151,1)
(131,626,1)
(249,657,1)
(842,739,1)
(249,861,1)
(10,751,1)
(957,68,1)
(820,703,1)
(316,250,1)
(857,942,1)
(131,654,1)
(28,904,1)
(454,962,1)
(698,838,1)
(150,92,1)
(957,448,1)
(249,248,1)
(369,743,1)
(585,20,1)
(387,120,1)
(10,929,1)
(657,878,1)
(909,925,1)
(80,304,1)
(131,828,1)
(587,633,1)
(9,354,1)
(453,626,1)
(131,131,1)
(868,192,1)
(876,497,1)
(849,799,1)
(507,807,1)
(892,617,1)
(963,566,1)
(174,515,1)
(610,771,1)
(123,584,1)
(238,515,1)
(906,636,1)
(452,687,1)
(302,402,1)
(186,797,1)
(853,617,1)
(807,846,1)
(872,476,1)
(848,778,1)
(802,367,1)
(38,274,1)
(10,248,1)
(249,728,1)
(517,608,1)
(466,462,1)
(439,458,1)
(493,790,1)
(312,172,1)
(813,504,1)
(106,665,1)
(561,647,1)
(177,655,1)
(108,922,1)
(438,102,1)
(700,287,1)
(274,749,1)
(750,649,1)
(862,423,1)
(295,170,1)
(249,658,1)
(799,482,1)
(75,314,1)
(849,748,1)
(536,961,1)
(156,681,1)
(819,865,1)
(736,229,1)
(353,344,1)
(657,917,1)
(751,865,1)
(512,415,1)
(819,445,1)
(10,105,1)
(321,25,1)
(41,273,1)
(670,684,1)
(15,563,1)
(244,761,1)
(915,4,1)
(793,933,1)
(370,683,1)
(972,795,1)
(859,865,1)
(163,181,1)
(249,567,1)
(657,943,1)
(840,753,1)
(952,581,1)
(619,529,1)
(191,669,1)
(67,493,1)
(363,747,1)
(431,41,1)
(594,263,1)
(136,379,1)
(657,751,1)
(383,376,1)
(80,914,1)
(143,544,1)
(494,483,1)
(154,4,1)
(395,151,1)
(131,7,1)
(135,713,1)
(478,700,1)
(657,546,1)
(448,883,1)
(232,760,1)
(47,255,1)
(120,901,1)
(249,841,1)
(131,105,1)
(251,607,1)
(335,136,1)
(720,789,1)
(397,784,1)
(899,222,1)
(804,659,1)
(451,74,1)
(86,468,1)
(888,509,1)
(233,962,1)
(820,595,1)
(625,655,1)
(412,745,1)
(657,536,1)
(930,428,1)
(607,740,1)
(131,198,1)
(860,884,1)
(249,635,1)
(777,968,1)
(713,167,1)
(335,865,1)
(746,861,1)
(433,87,1)
(713,879,1)
(852,661,1)
(71,597,1)
(550,291,1)
(417,973,1)
(34,858,1)
(306,279,1)
(953,320,1)
(957,346,1)
(889,261,1)
(400,656,1)
(954,796,1)
(335,446,1)
(532,862,1)
(883,520,1)
(10,916,1)
(440,923,1)
(249,786,1)
(15,816,1)
(237,846,1)
(179,508,1)
(531,737,1)
(568,702,1)
(926,285,1)
(479,750,1)
(249,913,1)
(553,245,1)
(249,518,1)
(348,94,1)
(540,424,1)
(687,72,1)
(13,107,1)
(563,145,1)
(310,349,1)
(747,848,1)
(963,620,1)
(271,549,1)
(425,907,1)
(769,162,1)
(249,654,1)
(221,433,1)
(973,132,1)
(856,515,1)
(662,214,1)
(500,935,1)
(1,28,1)
(780,668,1)
(901,559,1)
(164,286,1)
(211,306,1)
(426,840,1)
(387,486,1)
(187,589,1)
(49,12,1)
(827,515,1)
(249,929,1)
(131,873,1)
(647,393,1)
(657,658,1)
(481,937,1)
(140,5,1)
(255,331,1)
(131,333,1)
(285,530,1)
(738,439,1)
(850,808,1)
(305,76,1)
(197,177,1)
(586,179,1)
(232,622,1)
(929,455,1)
(657,249,1)
(839,460,1)
(311,595,1)
(562,66,1)
(160,725,1)
(854,792,1)
(301,456,1)
(885,13,1)
(280,311,1)
(127,675,1)
(706,513,1)
(846,733,1)
(373,261,1)
(528,129,1)
(131,518,1)
(109,264,1)
(834,356,1)
(957,805,1)
(450,118,1)
(491,782,1)
(151,655,1)
(347,455,1)
(538,701,1)
(10,873,1)
(434,336,1)
(116,732,1)
(633,100,1)
(405,222,1)
(45,865,1)
(58,863,1)
(31,623,1)
(325,947,1)
(635,652,1)
(468,30,1)
(269,285,1)
(811,165,1)
(957,896,1)
(830,800,1)
(579,257,1)
(10,878,1)
(464,171,1)
(152,57,1)
(103,940,1)
(222,431,1)
(589,535,1)
(737,120,1)
(971,762,1)
(462,219,1)
(820,760,1)
(249,105,1)
(352,611,1)
(135,275,1)
(18,865,1)
(406,59,1)
(674,511,1)
(10,943,1)
(941,271,1)
(794,426,1)
(759,512,1)
(324,22,1)
(657,861,1)
(99,618,1)
(342,865,1)
(224,637,1)
(111,65,1)
(558,103,1)
(341,620,1)
(787,498,1)
(121,71,1)
(25,877,1)
(481,847,1)
(963,865,1)
(949,551,1)
(766,706,1)
(774,515,1)
(10,698,1)
(548,743,1)
(455,865,1)
(151,753,1)
(840,655,1)
(302,90,1)
(472,655,1)
(460,571,1)
(129,122,1)
(728,643,1)
(498,112,1)
(172,561,1)
(10,828,1)
(104,235,1)
(279,596,1)
(29,876,1)
(10,62,1)
(420,374,1)
(465,470,1)
(165,628,1)
(626,38,1)
(598,79,1)
(732,630,1)
(821,178,1)
(257,82,1)
(399,514,1)
(819,928,1)
(249,7,1)
(607,865,1)
(943,295,1)
(210,634,1)
(86,865,1)
(228,71,1)
(651,272,1)
(271,385,1)
(151,812,1)
(486,408,1)
(693,228,1)
(657,634,1)
(764,445,1)
(330,954,1)
(917,358,1)
(714,136,1)
(249,584,1)
(921,610,1)
(260,6,1)
(867,217,1)
(722,84,1)
(427,99,1)
(748,49,1)
(103,825,1)
(635,865,1)
(131,368,1)
(551,445,1)
(191,617,1)
(657,873,1)
(609,370,1)
(22,45,1)
(657,728,1)
(914,189,1)
(459,714,1)
(832,469,1)
(872,938,1)
(35,371,1)
(565,921,1)
(369,748,1)
(266,855,1)
(957,500,1)
(249,356,1)
(653,865,1)
(312,561,1)
(322,541,1)
(874,912,1)
(181,736,1)
(456,878,1)
(455,781,1)
(10,518,1)
(877,516,1)
(219,875,1)
(10,861,1)
(910,86,1)
(382,651,1)
(249,117,1)
(577,432,1)
(657,493,1)
(214,413,1)
(401,830,1)
(817,887,1)
(390,555,1)
(664,128,1)
(928,718,1)
(919,152,1)
(379,658,1)
(948,913,1)
(270,515,1)
(661,74,1)
(544,865,1)
(761,712,1)
(234,23,1)
(768,788,1)
(183,32,1)
(131,495,1)
(543,94,1)
(249,634,1)
(444,703,1)
(356,572,1)
(262,972,1)
(571,163,1)
(701,454,1)
(338,672,1)
(541,510,1)
(585,430,1)
(476,920,1)
(959,58,1)
(424,589,1)
(893,847,1)
(680,865,1)
(60,786,1)
(787,264,1)
(131,657,1)
(10,7,1)
(913,155,1)
(795,680,1)
(249,198,1)
(846,687,1)
(198,553,1)
(970,828,1)
(231,865,1)
(263,563,1)
(10,165,1)
(344,578,1)
(39,470,1)
(555,498,1)
(336,635,1)
(788,865,1)
(131,913,1)
(779,7,1)
(796,644,1)
(128,772,1)
(177,865,1)
(539,657,1)
(358,527,1)
(375,535,1)
(419,17,1)
(381,167,1)
(176,852,1)
(847,631,1)
(145,312,1)
(657,518,1)
(33,948,1)
(326,252,1)
(585,865,1)
(608,389,1)
(247,445,1)
(859,224,1)
(249,293,1)
(508,105,1)
(574,515,1)
(933,706,1)
(493,18,1)
(771,368,1)
(66,77,1)
(131,664,1)
(800,910,1)
(535,274,1)
(785,191,1)
(745,445,1)
(768,776,1)
(905,85,1)
(958,813,1)
(249,626,1)
(675,860,1)
(294,371,1)
(963,136,1)
(86,485,1)
(273,619,1)
(680,632,1)
(594,734,1)
(328,307,1)
(396,441,1)
(154,915,1)
(855,488,1)
(784,604,1)
(934,204,1)
(458,870,1)
(912,931,1)
(873,865,1)
(323,515,1)
(76,441,1)
(631,743,1)
(754,319,1)
(131,117,1)
(13,538,1)
(319,354,1)
(497,73,1)
(263,804,1)
(808,748,1)
(744,17,1)
(467,778,1)
(432,302,1)
(114,761,1)
(736,733,1)
(611,434,1)
(656,450,1)
(287,35,1)
(595,639,1)
(657,105,1)
(241,763,1)
(138,515,1)
(195,452,1)
(697,666,1)
(882,47,1)
(470,641,1)
(12,240,1)
(904,274,1)
(733,67,1)
(52,764,1)
(330,865,1)
(12,438,1)
(413,56,1)
(778,963,1)
(925,303,1)
(408,531,1)
(815,697,1)
(721,36,1)
(152,75,1)
(657,916,1)
(871,823,1)
(3,647,1)
(630,768,1)
(104,232,1)
(422,467,1)
(634,918,1)
(7,865,1)
(286,750,1)
(750,743,1)
(288,283,1)
(606,200,1)
(10,162,1)
(261,474,1)
(929,347,1)
(78,856,1)
(723,130,1)
(10,160,1)
(504,390,1)
(472,865,1)
(846,720,1)
(632,780,1)
(860,29,1)
(131,728,1)
(376,751,1)
(311,159,1)
(704,363,1)
(704,422,1)
(725,110,1)
(304,152,1)
(663,327,1)
(249,459,1)
(891,800,1)
(371,445,1)
(286,479,1)
(90,402,1)
(683,411,1)
(810,569,1)
(691,164,1)
(657,626,1)
(828,207,1)
(55,386,1)
(287,258,1)
(205,522,1)
(937,280,1)
(735,746,1)
(410,662,1)
(655,871,1)
(549,93,1)
(327,289,1)
(552,873,1)
(598,865,1)
(10,584,1)
(207,201,1)
(53,143,1)
(616,716,1)
(395,225,1)
(242,518,1)
(751,969,1)
(659,405,1)
(249,664,1)
(333,677,1)
(241,177,1)
(826,962,1)
(668,101,1)
(10,635,1)
(606,8,1)
(657,657,1)
(940,941,1)
(278,242,1)
(903,515,1)
(636,707,1)
(561,3,1)
(167,39,1)
(505,868,1)
(218,594,1)
(922,929,1)
(428,80,1)
(5,655,1)
(639,227,1)
(131,917,1)
(29,497,1)
(113,542,1)
(10,493,1)
(378,641,1)
(10,913,1)
(556,481,1)
(591,59,1)
(284,205,1)
(688,906,1)
(214,865,1)
(957,593,1)
(318,515,1)
(878,113,1)
(10,658,1)
(853,328,1)
(408,434,1)
(797,129,1)
(441,966,1)
(131,929,1)
(657,786,1)
(957,874,1)
(282,952,1)
(657,389,1)
(144,433,1)
(488,251,1)
(154,820,1)
(602,11,1)
(22,653,1)
(386,764,1)
(489,754,1)
(10,282,1)
(712,463,1)
(158,561,1)
(614,515,1)
(118,726,1)
(45,64,1)
(425,760,1)
(841,550,1)
(653,445,1)
(824,554,1)
(965,865,1)
(789,839,1)
(638,556,1)
(300,735,1)
(280,233,1)
(757,46,1)
(475,139,1)
(393,338,1)
(681,890,1)
(4,599,1)
(316,472,1)
(752,563,1)
(942,505,1)
(762,262,1)
(706,383,1)
(189,648,1)
(159,397,1)
(193,721,1)
(335,620,1)
(782,193,1)
(408,303,1)
(107,42,1)
(694,664,1)
(686,491,1)
(342,679,1)
(117,865,1)
(437,595,1)
(514,865,1)
(349,905,1)
(975,858,1)
(430,210,1)
(10,767,1)
(650,826,1)
(692,284,1)
(826,560,1)
(77,57,1)
(368,865,1)
(131,533,1)
(935,33,1)
(485,719,1)
(941,814,1)
(55,464,1)
(342,869,1)
(364,244,1)
(657,368,1)
(10,124,1)
(726,55,1)
(8,829,1)
(583,585,1)
(943,865,1)
(744,419,1)
(677,446,1)
(162,835,1)
(394,602,1)
(10,198,1)
(10,626,1)
(745,359,1)
(131,356,1)
(423,175,1)
(7,565,1)
(861,955,1)
(119,316,1)
(778,206,1)
(622,865,1)
(480,755,1)
(126,645,1)
(261,385,1)
(864,43,1)
(79,246,1)
(623,131,1)
(249,493,1)
(354,562,1)
(786,360,1)
(657,198,1)
(939,889,1)
(431,274,1)
(131,584,1)
(68,266,1)
(760,218,1)
(499,198,1)
(147,324,1)
(631,760,1)
(122,911,1)
(168,936,1)
(377,405,1)
(217,568,1)
(132,353,1)
(918,903,1)
(584,462,1)
(904,783,1)
(131,658,1)
(91,382,1)
(661,688,1)
(252,758,1)
(486,673,1)
(887,315,1)
(969,892,1)
(494,385,1)
(647,74,1)
(102,939,1)
(557,69,1)
(98,21,1)
(265,865,1)
(645,570,1)
(723,91,1)
(786,865,1)
(840,400,1)
(819,383,1)
(689,208,1)
(936,312,1)
(940,895,1)
(580,401,1)
(194,167,1)
(247,927,1)
(96,169,1)
(5,753,1)
(389,0,1)
(763,949,1)
(107,48,1)
(884,742,1)
(695,941,1)
(438,176,1)
(276,744,1)
(331,837,1)
(481,281,1)
(510,902,1)
(618,106,1)
(194,708,1)
(554,53,1)
(264,440,1)
(483,899,1)
(59,857,1)
(5,865,1)
(674,404,1)
(100,217,1)
(293,865,1)
(652,254,1)
(933,766,1)
(861,865,1)
(227,598,1)
(696,631,1)
(4,743,1)
(474,532,1)
(866,395,1)
(713,385,1)
(458,865,1)
(130,91,1)
(232,461,1)
(657,929,1)
(463,526,1)
(487,180,1)
(661,617,1)
(249,131,1)
(590,77,1)
(649,885,1)
(249,165,1)
(548,276,1)
(924,263,1)
(292,464,1)
(822,445,1)
(743,557,1)
(930,57,1)
(406,591,1)
(680,753,1)
(182,583,1)
(809,453,1)
(283,667,1)
(8,265,1)
(56,140,1)
(249,162,1)
(255,787,1)
(38,378,1)
(131,165,1)
(385,970,1)
(645,22,1)
(853,74,1)
(59,865,1)
(526,515,1)
(589,375,1)
(496,850,1)
(169,335,1)
(306,748,1)
(221,144,1)
(131,249,1)
(702,220,1)
(640,383,1)
(569,709,1)
(10,249,1)
(657,356,1)
(89,96,1)
(208,728,1)
(37,606,1)
(281,154,1)
(484,184,1)
(657,913,1)
(346,278,1)
(931,117,1)
(916,31,1)
(131,389,1)
(651,865,1)
(249,751,1)
(745,865,1)
(101,383,1)
(311,397,1)
(578,274,1)
(507,365,1)
(424,187,1)
(513,345,1)
(638,760,1)
(124,341,1)
(653,383,1)
(624,353,1)
(938,476,1)
(689,462,1)
(151,865,1)
(249,546,1)
(397,865,1)
(657,10,1)
(551,383,1)
(314,914,1)
(161,733,1)
(820,351,1)
(546,202,1)
(16,809,1)
(843,236,1)
(183,241,1)
(732,864,1)
(864,183,1)
(142,121,1)
(30,767,1)
(83,865,1)
(627,574,1)
(131,62,1)
(623,10,1)
(273,484,1)
(805,414,1)
(272,663,1)
(657,802,1)
(533,621,1)
(415,580,1)
(957,833,1)
(411,123,1)
(736,231,1)
(657,654,1)
(23,248,1)
(311,760,1)
(961,244,1)
(620,552,1)
(227,760,1)
(84,932,1)
(678,579,1)
(83,127,1)
(543,348,1)
(275,713,1)
(572,576,1)
(244,114,1)
(20,326,1)
(644,182,1)
(821,880,1)
(250,819,1)
(73,958,1)
(353,274,1)
(10,664,1)
(776,788,1)
(254,515,1)
(750,748,1)
(932,330,1)
(913,865,1)
(875,352,1)
(454,748,1)
(10,533,1)
(662,592,1)
(249,802,1)
(551,239,1)
(708,475,1)
(6,802,1)
(792,630,1)
(515,228,1)
(581,533,1)
(734,563,1)
(146,26,1)
(10,117,1)
(628,449,1)
(371,865,1)
(603,722,1)
(597,317,1)
(249,698,1)
(749,853,1)
(131,943,1)
(657,131,1)
(855,442,1)
(758,342,1)
(847,696,1)
(249,873,1)
(189,57,1)
(155,614,1)
(823,917,1)
(959,863,1)
(895,941,1)
(680,655,1)
(280,951,1)
(125,644,1)
(88,752,1)
(357,427,1)
(175,85,1)
(192,844,1)
(441,865,1)
(293,627,1)
(836,721,1)
(734,759,1)
(367,146,1)
(470,85,1)
(947,945,1)
(443,259,1)
(4,760,1)
(820,296,1)
(840,865,1)
(657,293,1)
(349,523,1)
(100,867,1)
(10,657,1)
(370,288,2)
(22,45,2)
(113,515,2)
(232,760,2)
(10,873,2)
(836,515,2)
(13,538,2)
(0,515,2)
(687,244,2)
(507,515,2)
(767,132,2)
(249,368,2)
(819,865,2)
(545,438,2)
(498,112,2)
(10,282,2)
(815,228,2)
(559,84,2)
(10,654,2)
(276,286,2)
(586,515,2)
(360,515,2)
(707,926,2)
(801,244,2)
(387,84,2)
(4,743,2)
(177,865,2)
(434,515,2)
(542,515,2)
(491,193,2)
(743,276,2)
(683,288,2)
(855,255,2)
(326,252,2)
(254,515,2)
(85,515,2)
(911,858,2)
(713,515,2)
(433,858,2)
(145,558,2)
(661,74,2)
(670,222,2)
(508,515,2)
(408,120,2)
(417,132,2)
(851,515,2)
(871,515,2)
(901,84,2)
(13,808,2)
(957,228,2)
(310,349,2)
(872,476,2)
(550,466,2)
(759,580,2)
(582,872,2)
(35,371,2)
(497,515,2)
(8,760,2)
(45,753,2)
(657,160,2)
(887,315,2)
(846,687,2)
(551,865,2)
(40,858,2)
(789,244,2)
(677,959,2)
(131,767,2)
(604,259,2)
(848,778,2)
(899,222,2)
(127,515,2)
(163,181,2)
(789,865,2)
(710,354,2)
(808,808,2)
(916,515,2)
(607,865,2)
(476,793,2)
(914,354,2)
(719,135,2)
(145,312,2)
(59,865,2)
(889,862,2)
(151,655,2)
(963,722,2)
(931,515,2)
(541,510,2)
(10,929,2)
(414,515,2)
(902,515,2)
(186,797,2)
(736,687,2)
(538,454,2)
(92,405,2)
(39,515,2)
(273,800,2)
(333,959,2)
(548,808,2)
(426,840,2)
(657,62,2)
(728,865,2)
(751,865,2)
(706,865,2)
(524,259,2)
(804,800,2)
(249,62,2)
(755,244,2)
(274,749,2)
(631,743,2)
(342,865,2)
(184,619,2)
(193,515,2)
(112,515,2)
(958,515,2)
(859,865,2)
(234,515,2)
(302,402,2)
(181,736,2)
(312,561,2)
(167,39,2)
(918,515,2)
(786,865,2)
(151,753,2)
(249,198,2)
(10,767,2)
(377,405,2)
(706,383,2)
(322,515,2)
(10,100,2)
(249,105,2)
(415,580,2)
(568,302,2)
(147,22,2)
(227,760,2)
(182,585,2)
(180,644,2)
(386,464,2)
(131,802,2)
(514,515,2)
(469,255,2)
(41,800,2)
(657,131,2)
(198,515,2)
(132,515,2)
(10,389,2)
(131,62,2)
(853,74,2)
(131,878,2)
(418,589,2)
(233,760,2)
(220,302,2)
(636,707,2)
(358,515,2)
(674,858,2)
(505,865,2)
(975,858,2)
(419,286,2)
(441,865,2)
(52,464,2)
(293,865,2)
(951,259,2)
(131,293,2)
(585,252,2)
(96,438,2)
(38,132,2)
(722,387,2)
(369,286,2)
(382,651,2)
(459,302,2)
(593,515,2)
(290,515,2)
(470,515,2)
(558,424,2)
(919,354,2)
(246,425,2)
(657,878,2)
(36,515,2)
(306,13,2)
(318,515,2)
(205,887,2)
(492,259,2)
(490,785,2)
(259,826,2)
(618,378,2)
(87,858,2)
(247,383,2)
(515,228,2)
(96,335,2)
(657,248,2)
(468,132,2)
(131,658,2)
(939,889,2)
(131,751,2)
(177,753,2)
(425,760,2)
(351,847,2)
(250,819,2)
(963,446,2)
(879,515,2)
(556,425,2)
(159,259,2)
(249,635,2)
(214,865,2)
(896,515,2)
(274,515,2)
(655,515,2)
(265,865,2)
(95,619,2)
(264,865,2)
(822,515,2)
(807,244,2)
(947,85,2)
(424,589,2)
(249,917,2)
(647,240,2)
(151,865,2)
(519,515,2)
(830,800,2)
(21,288,2)
(311,351,2)
(463,515,2)
(626,132,2)
(131,131,2)
(328,515,2)
(555,498,2)
(233,962,2)
(179,515,2)
(697,228,2)
(86,485,2)
(445,515,2)
(791,515,2)
(930,354,2)
(131,861,2)
(642,259,2)
(885,808,2)
(371,383,2)
(38,378,2)
(465,515,2)
(657,249,2)
(695,941,2)
(131,828,2)
(467,778,2)
(606,200,2)
(874,515,2)
(4,847,2)
(261,385,2)
(973,132,2)
(253,515,2)
(249,567,2)
(972,680,2)
(698,515,2)
(249,658,2)
(172,561,2)
(819,383,2)
(177,655,2)
(389,515,2)
(405,222,2)
(761,515,2)
(68,515,2)
(787,264,2)
(657,916,2)
(691,286,2)
(709,959,2)
(236,407,2)
(103,940,2)
(281,847,2)
(74,515,2)
(665,176,2)
(619,800,2)
(271,167,2)
(657,626,2)
(747,778,2)
(264,515,2)
(614,515,2)
(785,191,2)
(499,515,2)
(658,865,2)
(710,515,2)
(544,865,2)
(812,426,2)
(288,515,2)
(846,244,2)
(221,433,2)
(80,304,2)
(131,626,2)
(276,808,2)
(853,515,2)
(167,515,2)
(152,57,2)
(567,865,2)
(673,120,2)
(947,641,2)
(131,929,2)
(488,498,2)
(175,85,2)
(286,750,2)
(91,382,2)
(486,120,2)
(446,959,2)
(742,29,2)
(638,425,2)
(823,515,2)
(750,743,2)
(10,518,2)
(335,438,2)
(462,219,2)
(744,17,2)
(481,425,2)
(603,722,2)
(116,732,2)
(808,748,2)
(712,515,2)
(739,259,2)
(657,913,2)
(820,847,2)
(412,745,2)
(551,445,2)
(193,721,2)
(893,847,2)
(131,389,2)
(860,515,2)
(136,302,2)
(555,515,2)
(451,515,2)
(495,515,2)
(231,244,2)
(875,515,2)
(263,563,2)
(369,743,2)
(529,785,2)
(556,760,2)
(438,102,2)
(416,466,2)
(140,5,2)
(60,515,2)
(654,515,2)
(657,786,2)
(249,518,2)
(664,515,2)
(51,438,2)
(97,515,2)
(728,515,2)
(387,120,2)
(279,13,2)
(617,378,2)
(849,538,2)
(152,354,2)
(28,904,2)
(237,244,2)
(783,132,2)
(765,959,2)
(229,244,2)
(135,713,2)
(607,255,2)
(408,434,2)
(726,55,2)
(249,943,2)
(661,617,2)
(99,176,2)
(311,595,2)
(749,853,2)
(856,515,2)
(336,515,2)
(228,71,2)
(858,543,2)
(255,515,2)
(131,356,2)
(878,542,2)
(466,462,2)
(767,865,2)
(249,131,2)
(175,99,2)
(131,198,2)
(657,698,2)
(123,288,2)
(125,644,2)
(784,259,2)
(772,515,2)
(686,193,2)
(117,515,2)
(335,865,2)
(657,873,2)
(669,800,2)
(841,865,2)
(538,808,2)
(643,515,2)
(249,654,2)
(187,589,2)
(280,259,2)
(155,515,2)
(342,679,2)
(825,349,2)
(681,438,2)
(10,356,2)
(847,259,2)
(744,286,2)
(699,515,2)
(953,135,2)
(354,515,2)
(671,515,2)
(240,438,2)
(694,515,2)
(736,244,2)
(131,698,2)
(678,515,2)
(657,495,2)
(77,57,2)
(174,515,2)
(599,847,2)
(232,622,2)
(913,515,2)
(590,354,2)
(10,658,2)
(696,259,2)
(2,132,2)
(520,723,2)
(433,865,2)
(181,244,2)
(532,862,2)
(778,963,2)
(22,653,2)
(66,515,2)
(589,535,2)
(131,841,2)
(249,751,2)
(498,515,2)
(131,249,2)
(611,515,2)
(121,228,2)
(311,296,2)
(535,378,2)
(107,48,2)
(553,515,2)
(131,495,2)
(480,244,2)
(45,655,2)
(930,57,2)
(249,767,2)
(482,538,2)
(162,244,2)
(458,865,2)
(461,847,2)
(867,302,2)
(199,135,2)
(557,276,2)
(518,865,2)
(723,91,2)
(370,462,2)
(606,259,2)
(249,533,2)
(745,445,2)
(20,252,2)
(866,426,2)
(620,100,2)
(680,655,2)
(657,567,2)
(131,654,2)
(381,515,2)
(494,222,2)
(77,515,2)
(131,917,2)
(543,94,2)
(904,132,2)
(151,426,2)
(8,265,2)
(846,733,2)
(117,865,2)
(249,861,2)
(160,725,2)
(303,466,2)
(221,858,2)
(10,861,2)
(657,10,2)
(131,160,2)
(265,259,2)
(506,748,2)
(374,244,2)
(296,37,2)
(37,259,2)
(131,493,2)
(716,808,2)
(609,515,2)
(626,38,2)
(425,425,2)
(131,728,2)
(10,249,2)
(315,244,2)
(189,354,2)
(793,859,2)
(745,383,2)
(191,74,2)
(363,778,2)
(150,405,2)
(962,13,2)
(249,913,2)
(963,620,2)
(102,939,2)
(650,425,2)
(206,722,2)
(455,865,2)
(335,620,2)
(391,425,2)
(266,832,2)
(320,194,2)
(162,965,2)
(655,871,2)
(619,785,2)
(470,85,2)
(131,282,2)
(222,800,2)
(729,515,2)
(722,84,2)
(10,878,2)
(399,515,2)
(552,100,2)
(877,866,2)
(539,244,2)
(349,905,2)
(634,865,2)
(937,259,2)
(71,228,2)
(648,354,2)
(687,72,2)
(891,800,2)
(509,515,2)
(840,865,2)
(48,538,2)
(194,135,2)
(204,847,2)
(764,383,2)
(657,728,2)
(725,167,2)
(249,916,2)
(10,943,2)
(488,255,2)
(503,847,2)
(5,753,2)
(263,800,2)
(217,302,2)
(769,244,2)
(634,515,2)
(47,255,2)
(844,116,2)
(657,293,2)
(731,515,2)
(456,515,2)
(895,941,2)
(450,55,2)
(943,865,2)
(563,145,2)
(335,136,2)
(249,841,2)
(721,515,2)
(9,354,2)
(194,385,2)
(562,515,2)
(101,445,2)
(120,559,2)
(793,933,2)
(81,135,2)
(967,349,2)
(17,369,2)
(725,385,2)
(10,131,2)
(689,515,2)
(657,165,2)
(175,641,2)
(178,316,2)
(138,515,2)
(83,865,2)
(176,661,2)
(211,13,2)
(494,167,2)
(311,760,2)
(80,354,2)
(562,354,2)
(787,498,2)
(566,722,2)
(276,744,2)
(101,865,2)
(934,847,2)
(493,18,2)
(935,515,2)
(66,354,2)
(10,248,2)
(11,96,2)
(7,865,2)
(909,288,2)
(10,584,2)
(83,515,2)
(689,462,2)
(227,598,2)
(261,167,2)
(888,515,2)
(280,233,2)
(578,515,2)
(295,959,2)
(183,241,2)
(619,529,2)
(335,446,2)
(249,495,2)
(189,57,2)
(959,515,2)
(10,698,2)
(749,515,2)
(29,515,2)
(541,515,2)
(79,425,2)
(546,865,2)
(131,105,2)
(542,865,2)
(764,865,2)
(883,723,2)
(231,865,2)
(657,802,2)
(10,841,2)
(309,515,2)
(840,753,2)
(306,748,2)
(42,538,2)
(10,368,2)
(77,354,2)
(228,228,2)
(635,865,2)
(841,466,2)
(438,176,2)
(657,657,2)
(390,515,2)
(249,356,2)
(266,255,2)
(55,386,2)
(701,808,2)
(131,635,2)
(284,887,2)
(623,515,2)
(657,198,2)
(104,235,2)
(182,252,2)
(882,255,2)
(721,36,2)
(602,96,2)
(103,825,2)
(245,515,2)
(554,865,2)
(764,445,2)
(58,515,2)
(641,385,2)
(301,515,2)
(249,389,2)
(657,751,2)
(287,35,2)
(926,285,2)
(19,847,2)
(23,515,2)
(208,515,2)
(961,244,2)
(443,259,2)
(257,515,2)
(746,515,2)
(837,515,2)
(905,85,2)
(734,580,2)
(464,247,2)
(139,135,2)
(618,274,2)
(965,865,2)
(955,515,2)
(590,515,2)
(827,515,2)
(266,855,2)
(971,262,2)
(582,226,2)
(283,515,2)
(616,808,2)
(100,217,2)
(249,10,2)
(622,865,2)
(387,486,2)
(679,515,2)
(10,546,2)
(487,644,2)
(494,385,2)
(774,515,2)
(300,515,2)
(598,425,2)
(622,847,2)
(36,83,2)
(652,515,2)
(330,414,2)
(249,248,2)
(472,655,2)
(118,55,2)
(657,105,2)
(89,438,2)
(427,99,2)
(316,250,2)
(397,259,2)
(423,99,2)
(537,515,2)
(890,438,2)
(131,7,2)
(657,117,2)
(579,515,2)
(259,425,2)
(571,181,2)
(597,362,2)
(249,117,2)
(10,635,2)
(905,641,2)
(368,865,2)
(849,962,2)
(10,495,2)
(82,515,2)
(584,288,2)
(111,858,2)
(249,664,2)
(249,698,2)
(10,626,2)
(10,634,2)
(109,515,2)
(76,441,2)
(466,288,2)
(729,354,2)
(13,107,2)
(618,176,2)
(657,635,2)
(861,515,2)
(249,282,2)
(833,515,2)
(357,99,2)
(698,865,2)
(929,455,2)
(131,117,2)
(799,538,2)
(775,412,2)
(131,873,2)
(238,515,2)
(489,515,2)
(195,244,2)
(786,515,2)
(44,847,2)
(8,259,2)
(454,962,2)
(907,425,2)
(926,821,2)
(10,913,2)
(131,916,2)
(70,887,2)
(570,22,2)
(510,515,2)
(514,865,2)
(10,117,2)
(98,288,2)
(293,515,2)
(15,563,2)
(531,120,2)
(847,631,2)
(585,865,2)
(736,733,2)
(517,515,2)
(395,151,2)
(737,120,2)
(31,515,2)
(249,249,2)
(639,425,2)
(754,515,2)
(764,464,2)
(431,800,2)
(248,515,2)
(39,470,2)
(249,493,2)
(307,515,2)
(408,303,2)
(17,286,2)
(164,286,2)
(612,176,2)
(278,515,2)
(835,244,2)
(452,244,2)
(405,670,2)
(131,959,2)
(129,865,2)
(968,276,2)
(503,104,2)
(10,802,2)
(657,282,2)
(702,302,2)
(529,947,2)
(965,244,2)
(821,178,2)
(530,554,2)
(861,865,2)
(862,175,2)
(644,182,2)
(131,664,2)
(584,462,2)
(10,751,2)
(407,582,2)
(135,515,2)
(516,866,2)
(668,287,2)
(261,862,2)
(597,317,2)
(633,100,2)
(65,858,2)
(286,808,2)
(249,878,2)
(838,515,2)
(29,497,2)
(703,847,2)
(454,748,2)
(100,302,2)
(797,129,2)
(364,244,2)
(48,849,2)
(249,728,2)
(105,515,2)
(55,464,2)
(288,462,2)
(10,160,2)
(713,385,2)
(311,259,2)
(597,228,2)
(518,515,2)
(948,515,2)
(653,445,2)
(30,132,2)
(404,858,2)
(353,274,2)
(304,354,2)
(797,858,2)
(816,263,2)
(18,865,2)
(131,943,2)
(289,108,2)
(647,617,2)
(859,753,2)
(657,841,2)
(963,865,2)
(324,22,2)
(378,641,2)
(226,406,2)
(703,865,2)
(750,748,2)
(558,103,2)
(782,193,2)
(647,74,2)
(249,160,2)
(887,244,2)
(788,865,2)
(735,515,2)
(974,858,2)
(668,101,2)
(78,515,2)
(371,865,2)
(826,425,2)
(580,563,2)
(876,515,2)
(10,162,2)
(484,619,2)
(10,105,2)
(249,929,2)
(653,865,2)
(855,442,2)
(725,135,2)
(657,162,2)
(785,800,2)
(963,136,2)
(249,873,2)
(512,580,2)
(325,785,2)
(107,538,2)
(371,445,2)
(285,530,2)
(839,244,2)
(249,546,2)
(577,302,2)
(432,302,2)
(249,584,2)
(394,96,2)
(106,176,2)
(158,561,2)
(223,259,2)
(873,100,2)
(131,657,2)
(46,374,2)
(104,847,2)
(444,847,2)
(904,378,2)
(191,617,2)
(939,862,2)
(522,887,2)
(10,165,2)
(923,515,2)
(352,515,2)
(431,378,2)
(662,214,2)
(408,865,2)
(800,86,2)
(627,515,2)
(849,748,2)
(122,858,2)
(241,763,2)
(569,959,2)
(794,426,2)
(913,865,2)
(475,135,2)
(631,259,2)
(102,176,2)
(657,368,2)
(249,7,2)
(247,865,2)
(154,820,2)
(86,468,2)
(528,858,2)
(10,493,2)
(428,354,2)
(692,887,2)
(657,767,2)
(917,865,2)
(941,271,2)
(156,438,2)
(411,288,2)
(219,515,2)
(222,431,2)
(670,494,2)
(227,425,2)
(832,255,2)
(131,913,2)
(657,658,2)
(585,430,2)
(255,787,2)
(292,464,2)
(813,515,2)
(405,800,2)
(471,464,2)
(583,252,2)
(560,425,2)
(802,865,2)
(99,618,2)
(730,515,2)
(86,865,2)
(479,808,2)
(745,865,2)
(160,135,2)
(395,426,2)
(506,808,2)
(66,77,2)
(353,378,2)
(680,753,2)
(684,222,2)
(657,664,2)
(45,865,2)
(777,276,2)
(453,132,2)
(605,29,2)
(129,858,2)
(608,515,2)
(105,865,2)
(667,515,2)
(270,515,2)
(10,916,2)
(5,262,2)
(28,132,2)
(131,518,2)
(194,167,2)
(561,647,2)
(598,865,2)
(846,789,2)
(947,785,2)
(249,657,2)
(912,515,2)
(369,748,2)
(817,244,2)
(658,302,2)
(128,515,2)
(392,354,2)
(320,135,2)
(826,962,2)
(935,33,2)
(354,66,2)
(131,165,2)
(10,828,2)
(10,786,2)
(657,356,2)
(535,274,2)
(114,515,2)
(422,778,2)
(280,311,2)
(651,865,2)
(472,865,2)
(232,847,2)
(131,533,2)
(80,914,2)
(90,959,2)
(657,929,2)
(72,244,2)
(925,288,2)
(249,828,2)
(365,244,2)
(244,515,2)
(262,972,2)
(210,515,2)
(773,244,2)
(675,515,2)
(247,445,2)
(964,135,2)
(5,865,2)
(649,808,2)
(657,7,2)
(485,135,2)
(354,354,2)
(344,515,2)
(356,865,2)
(840,655,2)
(255,331,2)
(853,617,2)
(10,917,2)
(62,514,2)
(810,959,2)
(943,959,2)
(736,231,2)
(330,865,2)
(271,385,2)
(820,595,2)
(917,515,2)
(757,244,2)
(10,728,2)
(666,228,2)
(75,354,2)
(734,563,2)
(267,800,2)
(131,248,2)
(131,10,2)
(73,515,2)
(587,100,2)
(958,865,2)
(873,865,2)
(384,515,2)
(504,515,2)
(10,293,2)
(244,761,2)
(933,706,2)
(110,135,2)
(864,183,2)
(386,764,2)
(437,425,2)
(69,276,2)
(657,654,2)
(249,165,2)
(574,515,2)
(249,802,2)
(154,847,2)
(855,488,2)
(420,244,2)
(430,515,2)
(1,132,2)
(69,748,2)
(124,100,2)
(170,959,2)
(940,941,2)
(819,445,2)
(889,261,2)
(296,259,2)
(778,722,2)
(351,503,2)
(631,760,2)
(488,607,2)
(826,760,2)
(657,861,2)
(500,515,2)
(435,515,2)
(657,943,2)
(249,626,2)
(319,515,2)
(268,515,2)
(700,287,2)
(228,142,2)
(820,351,2)
(657,244,2)
(241,177,2)
(454,808,2)
(323,515,2)
(653,383,2)
(361,866,2)
(762,262,2)
(379,302,2)
(567,135,2)
(353,515,2)
(768,788,2)
(341,100,2)
(431,274,2)
(809,132,2)
(380,847,2)
(346,515,2)
(732,864,2)
(84,330,2)
(807,846,2)
(225,426,2)
(511,865,2)
(820,296,2)
(472,753,2)
(57,515,2)
(496,808,2)
(94,865,2)
(73,958,2)
(674,511,2)
(945,785,2)
(630,768,2)
(186,858,2)
(904,274,2)
(256,354,2)
(302,959,2)
(959,863,2)
(343,515,2)
(251,255,2)
(478,287,2)
(389,865,2)
(596,13,2)
(131,162,2)
(878,515,2)
(715,515,2)
(144,858,2)
(714,302,2)
(635,515,2)
(62,515,2)
(10,657,2)
(131,584,2)
(757,46,2)
(131,634,2)
(474,862,2)
(483,222,2)
(595,425,2)
(644,252,2)
(397,865,2)
(316,472,2)
(10,7,2)
(10,664,2)
(763,551,2)
(249,162,2)
(72,332,2)
(233,259,2)
(884,29,2)
(657,546,2)
(462,515,2)
(37,606,2)
(102,99,2)
(625,515,2)
(680,865,2)
(842,259,2)
(526,515,2)
(402,959,2)
(242,515,2)
(850,808,2)
(10,533,2)
(10,198,2)
(862,99,2)
(580,800,2)
(659,800,2)
(511,858,2)
(120,84,2)
(863,515,2)
(732,630,2)
(203,263,2)
(16,132,2)
(448,723,2)
(859,655,2)
(291,466,2)
(401,800,2)
(657,634,2)
(131,786,2)
(657,917,2)
(252,342,2)
(805,515,2)
(131,546,2)
(787,515,2)
(866,395,2)
(740,255,2)
(142,228,2)
(486,408,2)
(304,152,2)
(914,189,2)
(720,244,2)
(924,263,2)
(657,389,2)
(440,515,2)
(132,353,2)
(331,515,2)
(10,10,2)
(706,445,2)
(101,287,2)
(10,62,2)
(169,438,2)
(657,828,2)
(249,786,2)
(4,760,2)
(708,135,2)
(5,655,2)
(657,518,2)
(624,515,2)
(33,515,2)
(191,240,2)
(101,383,2)
(191,800,2)
(373,862,2)
(573,800,2)
(10,567,2)
(131,567,2)
(657,493,2)
(497,73,2)
(15,263,2)
(750,808,2)
(445,517,2)
(140,262,2)
(314,354,2)
(72,757,2)
(829,259,2)
(154,4,2)
(551,383,2)
(470,641,2)
(131,368,2)
(249,293,2)
(249,634,2)
(38,274,2)
(903,515,2)
(657,584,2)
(406,59,2)
(275,515,2)
(713,167,2)
(820,703,2)
(820,760,2)
(249,302,2)
(915,847,2)
(71,597,2)
(311,397,2)
(46,244,2)
(536,244,2)
(460,244,2)
(939,99,2)
(657,533,2)
(527,515,2)
-----------------------------------
(0,port_min)
(1,cf)
(2,bmode)
(3,NULL)
(4,bh6[i])
(5,cf->port_max)
(6,unified)
(7,cf->rrtcp)
(8,cf->bindaddr[i])
(9,"Extension %s: %s\\n")
(10,optarg += 5)
(11,1)
(12,i)
(13,bh[i] != NULL && *bh[i] == \'\\0\')
(14,timeout_handler)
(15,errx(1, "incomplete configuration of the bridging mode - exactly "\n\\n\\t      "2 listen addresses required, %d provided", i)
(16,bh)
(17,*bh6[i])
(18,cf->timeout_handler)
(19,cf)
(20,sdir)
(21,cp)
(22,cf->port_min > cf->port_max)
(23,bh6)
(24,1)
(25,cf)
(26,cf->rrtcp = 1)
(27,)
(28,bh[1]++)
(29,setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(30,1)
(31,optarg)
(32,2)
(33,atoi(optarg)
(34,RET)
(35,cf->port_min % 2)
(36,&(cf->nofile_limit)
(37,malloc(sizeof(struct sockaddr_storage)
(38,bh[1])
(39,strchr(bh6[0], \'/\')
(40,bindaddr)
(41,1)
(42,\'\\0\')
(43,1)
(44,bindaddr)
(45,cf->port_max)
(46,strlen(optarg)
(47,"limit allocated by setrlimit (%d)
(48,*bh[i])
(49,0)
(50,)
(51,umode)
(52,65535)
(53,pfds)
(54,)
(55,cf->port_min <= 0 || cf->port_min > 65535)
(56,cf)
(57,i = 1)
(58,0)
(59,cf->rtp_servers)
(60,optarg)
(61,if (cf->port_min <= 0 || cf->port_min > 65535)
(62,cf->nofile_limit.rlim_max)
(63,if ((cf->port_max % 2)
(64,port_max)
(65,NULL)
(66,proto_caps[i].pc_id)
(67,NULL)
(68,break;)
(69,bh6[i])
(70,exit(0)
(71,ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
(72,(char *)
(73,&(cf->nofile_limit)
(74,bh[0] = optarg)
(75,i)
(76,cf->nextport[1])
(77,proto_caps[i])
(78,rrtcp)
(79,bindaddr)
(80,printf("Extension %s: %s\\n", proto_caps[i].pc_id,\n\\n\\t\\t    proto_caps[i].pc_description)
(81,bh6)
(82,CPROTOVER)
(83,cf->nofile_limit)
(84,cf->no_check == 0)
(85,bh6[0] = optarg)
(86,cf->bmode)
(87,bindaddr)
(88,bmode)
(89,bh)
(90,0)
(91,getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(92,"either IPv4 or IPv6 should be configured for internal "\n\\n\\t      "interface in bridging mode, not both")
(93,bh6)
(94,cf->bindaddr)
(95,1)
(96,cf->umode != 0)
(97,\'/\')
(98,optarg)
(99,bh[1] == NULL)
(100,strncmp("unix:", optarg, 5)
(101,cf->port_min)
(102,bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL)
(103,((bh6[0] == NULL)
(104,sizeof(struct sockaddr_storage)
(105,cf->rrtcp)
(106,1)
(107,*bh[i] == \'\\0\')
(108,-1)
(109,rlim_max)
(110,1)
(111,cf->bindaddr[1] = NULL)
(112,atoi(optarg)
(113,rlim_cur)
(114,0)
(115,)
(116,malloc((sizeof cf->sessions[0])
(117,cf->ttl_mode)
(118,"invalid value of the port_min argument, "\n\\n\\t  "not in the range 1-65535")
(119,2)
(120,getuid()
(121,1)
(122,bindaddr)
(123,\'\\0\')
(124,5)
(125,1)
(126,port_min)
(127,nofile_limit)
(128,0)
(129,cf->bindaddr)
(130,0)
(131,optarg += 4)
(132,bh[1] != NULL)
(133,bh6)
(134,NULL)
(135,bh6[1] != NULL)
(136,cf->umode = 6)
(137,case \'p\':)
(138,cf)
(139,*bh6[1] = \'\\0\')
(140,cf->port_max--)
(141,)
(142,-1)
(143,cf)
(144,1)
(145,((bh[0] == NULL)
(146,cf)
(147,"port_min should be less than port_max")
(148,if (cf->umode != 0)
(149,if (cf->bindaddr[0] == NULL)
(150,errx(1, "either IPv4 or IPv6 should be configured for internal "\n\\n\\t      "interface in bridging mode, not both")
(151,cf->port_max)
(152,proto_caps[i])
(153,)
(154,setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE)
(155,tos)
(156,"*")
(157,pfds)
(158,1)
(159,i)
(160,*bh6[1])
(161,cf)
(162,cf->timeout_handler.socket_name)
(163,"malloc")
(164,bh6)
(165,bh[0])
(166,if (cp != NULL)
(167,bh6[1] = strchr(bh6[0], \'/\')
(168,1)
(169,0)
(170,cf)
(171,0)
(172,0)
(173,cf)
(174,cf)
(175,bh6[0])
(176,bh[0] == NULL)
(177,cf->port_max)
(178,(cf->port_max - cf->port_min + 1)
(179,cf->rrtcp = 0)
(180,"-S switch requires -r switch")
(181,!cf->timeout_handler.socket_name)
(182,cf->sdir != NULL)
(183,(cf->port_max - cf->port_min + 1)
(184,"either IPv4 or IPv6 should be configured for external "\n\\n\\t      "interface in bridging mode, not both")
(185,)
(186,cf->bindaddr[0] = cf->bindaddr[1])
(187,1)
(188,if (cf->port_max <= 0 || cf->port_max > 65535)
(189,proto_caps[i])
(190,case \'t\':)
(191,bh[0])
(192,cf)
(193,getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(194,bh6[1])
(195,timeout_handler)
(196,cf->max_ttl = SESSION_TIMEOUT)
(197,cf)
(198,bh[0])
(199,\'\\0\')
(200,struct sockaddr_storage)
(201,bh6)
(202,port_max)
(203,"incomplete configuration of the bridging mode - exactly "\n\\n\\t      "2 listen addresses required, %d provided")
(204,AF_INET6)
(205,"timeout notification socket name too short\\n")
(206,0)
(207,1)
(208,cp)
(209,case \'T\':)
(210,optarg)
(211,NULL)
(212,case \'n\':)
(213,for (i = 0; i < 2; i++)
(214,cf->nextport)
(215,)
(216,)
(217,strncmp("unix:", optarg, 5)
(218,0)
(219,strchr(optarg, \':\')
(220,"unix:")
(221,cf->bindaddr[1])
(222,bh[1] != NULL)
(223,i)
(224,port_max)
(225,65535)
(226,sizeof cf->rtp_servers[0])
(227,cf->bindaddr[i])
(228,(ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
(229,socket_name)
(230,)
(231,cf->timeout_handler)
(232,cf->bindaddr[i])
(233,bh[i])
(234,0)
(235,struct sockaddr_storage)
(236,cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0])
(237,optarg)
(238,"udp:")
(239,port_min)
(240,bh[0] = "*")
(241,cf->port_max - cf->port_min + 1)
(242,1)
(243,if (cf->port_min > cf->port_max)
(244,strncmp("unix:", optarg, 5)
(245,bh)
(246,cf)
(247,cf->port_min)
(248,bh6[1])
(249,optarg += 5)
(250,cf->port_min + 1)
(251,rlim_max)
(252,cf->rdir == NULL)
(253,break;)
(254,cf)
(255,cf->nofile_limit.rlim_max < atoi(optarg)
(256,pc_id)
(257,printf("Basic version: %d\\n", CPROTOVER)
(258,0)
(259,bh[i] != NULL)
(260,cf->ttl_mode = unified)
(261,bh6[1])
(262,(cf->port_max % 2)
(263,i != 2)
(264,cf->nofile_limit)
(265,cf->bindaddr)
(266,warnx("limit allocated by setrlimit (%d)
(267,NULL)
(268,ttl_mode)
(269,cf)
(270,pid_file)
(271,bh6[1])
(272,nofile_limit)
(273,bh)
(274,bh[1] = strchr(bh[0], \'/\')
(275,NULL)
(276,bh6[i] != NULL && *bh6[i] == \'\\0\')
(277,)
(278,cf->nodaemon = 1)
(279,i)
(280,setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE)
(281,continue;)
(282,bh6[0])
(283,NULL)
(284,fprintf(stderr, "timeout notification socket name too short\\n")
(285,sizeof cf->pfds[0])
(286,bh6[i] != NULL)
(287,(cf->port_min % 2)
(288,cp != NULL)
(289,cf->timeout_handler.fd = -1)
(290,cf)
(291,cf)
(292,cf)
(293,cf->no_check)
(294,2)
(295,umode)
(296,cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage)
(297,case \'f\':)
(298,for (i = 1; proto_caps[i].pc_id != NULL; ++i)
(299,if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(300,break;)
(301,nofile_limit)
(302,strncmp("udp6:", optarg, 5)
(303,cf->run_uname = NULL)
(304,proto_caps[i].pc_description)
(305,cf)
(306,bh[i])
(307,bh)
(308,)
(309,nofile_limit)
(310,0)
(311,cf->bindaddr[i])
(312,(bh[0] == NULL)
(313,if (bh[1] != NULL && bh6[1] != NULL)
(314,proto_caps)
(315,strlen(optarg)
(316,cf->port_max - cf->port_min + 1)
(317,int argc)
(318,usage()
(319,0)
(320,bh6[1]++)
(321,port_min)
(322,break;)
(323,cf)
(324,1)
(325,NULL)
(326,cf)
(327,RLIMIT_NOFILE)
(328,0)
(329,0)
(330,cf->no_check)
(331,atoi(optarg)
(332,char *)
(333,4)
(334,if (bh[i] != NULL)
(335,cf->umode)
(336,optarg)
(337,)
(338,bh)
(339,if (bh6[i] != NULL && *bh6[i] == \'\\0\')
(340,if (bh[1] != NULL)
(341,optarg)
(342,cf->rdir)
(343,"Basic version: %d\\n")
(344,1)
(345,cf)
(346,break;)
(347,fd)
(348,0)
(349,bh6[0] == NULL)
(350,)
(351,cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage)
(352,optarg)
(353,bh[1])
(354,proto_caps[i].pc_id != NULL)
(355,if (cf->rdir == NULL && cf->sdir != NULL)
(356,cf->max_ttl)
(357,0)
(358,port_max)
(359,port_min)
(360,rdir)
(361,1)
(362,char **argv)
(363,errx(1, "running this program as superuser in a remote control "\n\\n\\t      "mode is strongly not recommended, as it poses serious security "\n\\n\\t      "threat to your system. Use -u option to run as an unprivileged "\n\\n\\t      "user or -F is you want to run as a superuser anyway.")
(364,stderr)
(365,exit(0)
(366,if (bh[0] != NULL && bh6[0] != NULL)
(367,ttl_mode)
(368,cf->tos)
(369,bh6[i])
(370,cp++)
(371,cf->port_min)
(372,case \'2\':)
(373,NULL)
(374,strlen(optarg)
(375,NULL)
(376,PORT_MIN)
(377,1)
(378,bh[1] = bh6[0] = bh6[1] = NULL)
(379,6)
(380,bindaddr)
(381,bh6)
(382,&(cf->nofile_limit)
(383,cf->port_min = PORT_MIN)
(384,optarg)
(385,bh6[1] = NULL)
(386,cf->port_min > 65535)
(387,getuid()
(388,port_max)
(389,cf->port_min)
(390,RLIMIT_NOFILE)
(391,i)
(392,proto_caps)
(393,0)
(394,errx(1, "explicit binding address has to be specified in UDP "\n\\n\\t      "command mode")
(395,cf->port_max > 65535)
(396,1)
(397,cf->bindaddr)
(398,if ((cf->port_min % 2)
(399,rlim_max)
(400,port_max)
(401,1)
(402,strncmp("udp6:", optarg, 5)
(403,case \'v\':)
(404,0)
(405,bh[1] != NULL && bh6[1] != NULL)
(406,cf->rtp_servers[0])
(407,malloc((sizeof cf->rtp_servers[0])
(408,cf->run_uname)
(409,case \'u\':)
(410,cf)
(411,cp[0] = \'\\0\')
(412,cf->nextport[1] = cf->port_min)
(413,nextport)
(414,cf->no_check = 1)
(415,1)
(416,NULL)
(417,1)
(418,0)
(419,\'\\0\')
(420,1)
(421,if (cp == optarg)
(422,warnx("WARNING!!! Running this program as superuser is strongly "\n\\n\\t      "not recommended, as it may pose serious security threat to "\n\\n\\t      "your system. Use -u option to run as an unprivileged user "\n\\n\\t      "or -F to surpress this warning.")
(423,NULL)
(424,(bh[1] == NULL)
(425,i < 2)
(426,cf->port_max <= 0)
(427,bh6)
(428,i)
(429,)
(430,cf->sdir = optarg)
(431,bh[1])
(432,cf)
(433,cf->bindaddr)
(434,cf->run_uname = optarg)
(435,optarg)
(436,case \'S\':)
(437,bh)
(438,bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL)
(439,cf)
(440,nofile_limit)
(441,cf->nextport)
(442,int)
(443,bh6)
(444,i)
(445,cf->port_min = atoi(optarg)
(446,cf->umode = 1)
(447,for (i = 0; i < 2; i++)
(448,err(1, "getrlimit")
(449,bh)
(450,errx(1, "invalid value of the port_min argument, "\n\\n\\t  "not in the range 1-65535")
(451,bh)
(452,cf)
(453,\'\\0\')
(454,bh[i])
(455,cf->timeout_handler)
(456,cf)
(457,0)
(458,cf->sessions)
(459,5)
(460,cf)
(461,i)
(462,cp = strchr(optarg, \':\')
(463,optarg)
(464,cf->port_min <= 0)
(465,\'/\')
(466,cp == optarg)
(467,"WARNING!!! Running this program as superuser is strongly "\n\\n\\t      "not recommended, as it may pose serious security threat to "\n\\n\\t      "your system. Use -u option to run as an unprivileged user "\n\\n\\t      "or -F to surpress this warning.")
(468,cf->bmode = 1)
(469,optarg)
(470,bh6[0])
(471,port_min)
(472,cf->port_max)
(473,if (bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL)
(474,1)
(475,bh6)
(476,(cf->port_max - cf->port_min + 1)
(477,0)
(478,port_min)
(479,NULL)
(480,fprintf(stderr, "timeout notification socket must be unix:\\n")
(481,i)
(482,bh)
(483,1)
(484,errx(1, "either IPv4 or IPv6 should be configured for external "\n\\n\\t      "interface in bridging mode, not both")
(485,cf->bmode = 1)
(486,cf->run_uname == NULL)
(487,errx(1, "-S switch requires -r switch")
(488,cf->nofile_limit.rlim_max)
(489,break;)
(490,bh6)
(491,"getrlimit")
(492,i)
(493,cf->timeout_handler.socket_name)
(494,bh6[1])
(495,bh[1])
(496,i)
(497,setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(498,cf->nofile_limit.rlim_max = atoi(optarg)
(499,optarg)
(500,break;)
(501,if (strncmp("udp:", optarg, 4)
(502,case \'6\':)
(503,malloc(sizeof(struct sockaddr_storage)
(504,cf)
(505,cf->rtp_servers)
(506,i++)
(507,break;)
(508,0)
(509,cf)
(510,atoi(optarg)
(511,cf->bindaddr)
(512,"exactly 1 listen addresses required, %d provided")
(513,port_min)
(514,cf->nofile_limit)
(515,ch)
(516,"invalid value of the port_max argument, "\n\\n\\t  "not in the range 1-65535")
(517,atoi(optarg)
(518,cf->nodaemon)
(519,4)
(520,1)
(521,)
(522,stderr)
(523,NULL)
(524,AF_INET)
(525,cf)
(526,"unix:")
(527,cf)
(528,1)
(529,bh6[0] != NULL)
(530,cf->pfds[0])
(531,run_uname)
(532,bh6)
(533,bh[1])
(534,if (cf->bmode != 0)
(535,bh[1])
(536,5)
(537,break;)
(538,bh[i] != NULL)
(539,optarg)
(540,bh6)
(541,cf->max_ttl = atoi(optarg)
(542,cf->nofile_limit)
(543,cf->bindaddr[0])
(544,cf->pfds)
(545,cf)
(546,cf->port_max)
(547,case \'F\':)
(548,i)
(549,1)
(550,run_uname)
(551,cf->port_min)
(552,0)
(553,0)
(554,cf->pfds)
(555,cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg)
(556,i++)
(557,NULL)
(558,((bh[1] == NULL)
(559,getuid()
(560,i)
(561,bh[0] == NULL)
(562,NULL)
(563,i = ((bh[0] == NULL)
(564,PORT_MAX)
(565,rrtcp)
(566,umode)
(567,cf->bmode)
(568,5)
(569,optarg)
(570,errx(1, "port_min should be less than port_max")
(571,perror("malloc")
(572,max_ttl)
(573,NULL)
(574,cf)
(575,ch)
(576,cf)
(577,umode)
(578,bh)
(579,i)
(580,i != 1)
(581,bh6)
(582,(sizeof cf->rtp_servers[0])
(583,NULL)
(584,cp[0])
(585,cf->sdir)
(586,break;)
(587,umode)
(588,case \'i\':)
(589,bh[1] == NULL)
(590,pc_id)
(591,0)
(592,0)
(593,break;)
(594,i)
(595,cf->bindaddr[i] = NULL)
(596,bh)
(597,getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
(598,cf->bindaddr)
(599,i)
(600,cf)
(601,case \'l\':)
(602,"explicit binding address has to be specified in UDP "\n\\n\\t      "command mode")
(603,cf)
(604,cf)
(605,1)
(606,sizeof(struct sockaddr_storage)
(607,cf->nofile_limit)
(608,optarg)
(609,cf)
(610,cf->tos = TOS)
(611,cp)
(612,NULL)
(613,if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(614,cf)
(615,if (bh6[i] != NULL)
(616,2)
(617,bh[0] = bh[1] = bh6[0] = bh6[1] = NULL)
(618,bh[1])
(619,bh[0] != NULL && bh6[0] != NULL)
(620,cf->umode = 0)
(621,1)
(622,cf->bindaddr)
(623,cmd_sock)
(624,NULL)
(625,break;)
(626,*bh[1])
(627,no_check)
(628,0)
(629,default:)
(630,sizeof cf->sessions[0])
(631,bh6[i])
(632,port_max)
(633,cf)
(634,cf->sdir)
(635,cf->run_uname)
(636,cf->pfds = malloc((sizeof cf->pfds[0])
(637,cf)
(638,i)
(639,NULL)
(640,cf)
(641,bh6[0] = bh6[1] = NULL)
(642,bh)
(643,run_gname)
(644,cf->rdir == NULL && cf->sdir != NULL)
(645,cf)
(646,case \'m\':)
(647,bh[0])
(648,i)
(649,i)
(650,NULL)
(651,cf->nofile_limit)
(652,run_uname)
(653,cf->port_min)
(654,pid_file = optarg)
(655,cf->port_max = atoi(optarg)
(656,cf)
(657,optarg += 5)
(658,cf->umode)
(659,i)
(660,)
(661,bh[0])
(662,cf->nextport[0])
(663,cf)
(664,bh6[0])
(665,bh)
(666,argc)
(667,cp)
(668,cf->port_min++)
(669,0)
(670,bh6[1] != NULL)
(671,break;)
(672,i)
(673,NULL)
(674,cf->bindaddr[0])
(675,cf)
(676,case \'r\':)
(677,optarg)
(678,1)
(679,cf->rdir = optarg)
(680,cf->port_max)
(681,bh[0])
(682,bindaddr)
(683,cp)
(684,NULL)
(685,if(!strlen(optarg)
(686,err(1, "getrlimit")
(687,cf->timeout_handler.socket_name = (char *)
(688,0)
(689,cf->run_gname = cp)
(690,if (cf->umode != 0)
(691,i)
(692,0)
(693,cf)
(694,optarg)
(695,1)
(696,NULL)
(697,argv)
(698,cf->max_ttl)
(699,break;)
(700,cf)
(701,NULL)
(702,optarg)
(703,cf->bindaddr)
(704,cf)
(705,)
(706,cf->port_min)
(707,malloc((sizeof cf->pfds[0])
(708,1)
(709,"udp6:")
(710,i)
(711,)
(712,5)
(713,bh6[1])
(714,optarg)
(715,optarg)
(716,i)
(717,case \'M\':)
(718,cf)
(719,1)
(720,socket_name)
(721,getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(722,cf->no_check == 0 && getuid()
(723,getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(724,case \'?\':)
(725,bh6[1])
(726,1)
(727,case \'s\':)
(728,cf->run_gname)
(729,proto_caps)
(730,1)
(731,1)
(732,(sizeof cf->sessions[0])
(733,cf->timeout_handler.socket_name = NULL)
(734,errx(1, "exactly 1 listen addresses required, %d provided", i)
(735,cf->dmode = 1)
(736,cf->timeout_handler.socket_name)
(737,cf)
(738,sessions)
(739,cf)
(740,nofile_limit)
(741,tos)
(742,"setrlimit")
(743,bh6[i] = NULL)
(744,*bh6[i] == \'\\0\')
(745,cf->port_min)
(746,1)
(747,"running this program as superuser in a remote control "\n\\n\\t      "mode is strongly not recommended, as it poses serious security "\n\\n\\t      "threat to your system. Use -u option to run as an unprivileged "\n\\n\\t      "user or -F is you want to run as a superuser anyway.")
(748,i = 0)
(749,strchr(bh[0], \'/\')
(750,bh6[i])
(751,cf->port_min)
(752,cf)
(753,cf->port_max = PORT_MAX)
(754,exit(0)
(755,"timeout notification socket must be unix:\\n")
(756,if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(757,malloc(strlen(optarg)
(758,NULL)
(759,i)
(760,i = 0)
(761,strncmp("unix:", optarg, 5)
(762,cf)
(763,cf->port_min + 1)
(764,cf->port_min)
(765,1)
(766,1)
(767,cf->bmode)
(768,cf->sessions[0])
(769,optarg)
(770,i)
(771,TOS)
(772,bh6)
(773,timeout_handler)
(774,cf)
(775,cf->nextport[0] = cf->nextport[1] = cf->port_min)
(776,0)
(777,i)
(778,cf->umode != 0)
(779,1)
(780,cf)
(781,timeout_handler)
(782,1)
(783,1)
(784,bindaddr)
(785,bh[0] != NULL)
(786,cf->rdir)
(787,cf->nofile_limit.rlim_max)
(788,cf->sessions)
(789,cf->timeout_handler)
(790,socket_name)
(791,1)
(792,cf)
(793,cf->port_max - cf->port_min + 1)
(794,cf)
(795,2)
(796,cf)
(797,cf->bindaddr[1])
(798,cf)
(799,i)
(800,cf->bmode != 0)
(801,0)
(802,cf->ttl_mode)
(803,)
(804,2)
(805,break;)
(806,case \'L\':)
(807,strcpy(cf->timeout_handler.socket_name, optarg)
(808,i < 2)
(809,*bh[1] = \'\\0\')
(810,5)
(811,bh)
(812,port_max)
(813,nofile_limit)
(814,NULL)
(815,"vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
(816,i)
(817,cf)
(818,if (i != 2)
(819,cf->port_min)
(820,cf->bindaddr[i])
(821,((cf->port_max - cf->port_min + 1)
(822,break;)
(823,optarg)
(824,0)
(825,(bh6[0] == NULL)
(826,bh[i])
(827,cf)
(828,bh6[1])
(829,i)
(830,i)
(831,while ((ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
(832,atoi(optarg)
(833,break;)
(834,SESSION_TIMEOUT)
(835,socket_name)
(836,0)
(837,optarg)
(838,max_ttl)
(839,timeout_handler)
(840,cf->port_max)
(841,cf->run_uname)
(842,bindaddr)
(843,cf)
(844,cf->sessions = malloc((sizeof cf->sessions[0])
(845,if (cf->no_check == 0 && getuid()
(846,cf->timeout_handler.socket_name)
(847,bh6[i] != NULL)
(848,1)
(849,bh[i])
(850,bh)
(851,bh6)
(852,NULL)
(853,bh[0])
(854,port_max)
(855,(int)
(856,cf)
(857,rtp_servers)
(858,cf->bindaddr[0] == NULL)
(859,cf->port_max)
(860,RLIMIT_NOFILE)
(861,cf->dmode)
(862,bh6[0] == NULL)
(863,strncmp("udp:", optarg, 4)
(864,((cf->port_max - cf->port_min + 1)
(865,struct cfg *cf)
(866,cf->port_max <= 0 || cf->port_max > 65535)
(867,0)
(868,rtp_servers)
(869,rdir)
(870,sessions)
(871,atoi(optarg)
(872,((cf->port_max - cf->port_min + 1)
(873,cf->umode)
(874,break;)
(875,\':\')
(876,0)
(877,errx(1, "invalid value of the port_max argument, "\n\\n\\t  "not in the range 1-65535")
(878,cf->nofile_limit.rlim_cur)
(879,1)
(880,1)
(881,if(strncmp("unix:", optarg, 5)
(882,cf)
(883,"getrlimit")
(884,err(1, "setrlimit")
(885,bh6)
(886,)
(887,!strlen(optarg)
(888,nodaemon)
(889,bh6[1] == NULL)
(890,0)
(891,bh)
(892,cf)
(893,cf)
(894,)
(895,0)
(896,break;)
(897,bh)
(898,if (bh6[1] != NULL)
(899,bh6)
(900,if (cf->nofile_limit.rlim_max < atoi(optarg)
(901,0)
(902,optarg)
(903,cf)
(904,bh[1])
(905,bh6[0])
(906,bh)
(907,2)
(908,cp)
(909,0)
(910,0)
(911,cf)
(912,cf->ttl_mode = independent)
(913,cf->tos)
(914,proto_caps[i].pc_id)
(915,SERVICE)
(916,cmd_sock = optarg)
(917,cf->port_max)
(918,sdir)
(919,pc_description)
(920,2)
(921,cf)
(922,1)
(923,cf)
(924,1)
(925,cp)
(926,(sizeof cf->pfds[0])
(927,port_min)
(928,port_min)
(929,cf->timeout_handler.fd)
(930,++i)
(931,independent)
(932,0)
(933,cf->port_min + 1)
(934,bh6)
(935,cf->tos = atoi(optarg)
(936,bh)
(937,continue;)
(938,1)
(939,bh6[0] == NULL && bh6[1] == NULL)
(940,(bh6[1] == NULL)
(941,bh6[1] == NULL)
(942,cf)
(943,cf->umode)
(944,if(!cf->timeout_handler.socket_name)
(945,0)
(946,)
(947,bh6[0])
(948,optarg)
(949,1)
(950,case \'R\':)
(951,SERVICE)
(952,0)
(953,cf)
(954,no_check)
(955,dmode)
(956,if (bh[i] != NULL && *bh[i] == \'\\0\')
(957,ch)
(958,cf->nofile_limit)
(959,strncmp("udp:", optarg, 4)
(960,cf)
(961,optarg)
(962,bh[i] = NULL)
(963,cf->umode)
(964,bmode)
(965,cf->timeout_handler)
(966,nextport)
(967,1)
(968,bh6)
(969,port_min)
(970,NULL)
(971,port_max)
(972,cf->port_max % 2)
(973,bh)
(974,cf)
(975,cf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^