-----label-----
0
-----code-----
static void goodB2G()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = NULL;
    {
        wchar_t * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
85,86
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
97,98
99,100
101,102
101,103
102,103
103,104
103,105
105,106
105,107
105,108
108,109
109,110
110,111
112,113
113,114
113,115
114,115
116,117
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,63,66,67,71,73,78,80,84,86,87,91,93,98,100,104,106,107,111,115,117
-----computeFrom-----
35,36
35,37
52,53
52,54
69,70
69,71
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* FIX: Deallocate memory */        free(data);    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
free(data);
free(data)
free
free
data
data
-----joern-----
(20,12,0)
(3,49,0)
(43,46,0)
(39,6,0)
(41,31,0)
(32,9,0)
(8,39,0)
(4,24,0)
(48,49,0)
(47,14,0)
(29,45,0)
(25,36,0)
(1,10,0)
(5,48,0)
(7,10,0)
(49,48,0)
(15,24,0)
(34,7,0)
(21,44,0)
(31,39,0)
(24,48,0)
(48,38,0)
(21,7,0)
(26,46,0)
(44,36,0)
(30,43,0)
(31,12,0)
(43,49,0)
(39,10,0)
(52,25,0)
(44,21,0)
(6,39,0)
(18,6,0)
(9,10,0)
(14,47,0)
(38,10,0)
(50,48,0)
(16,34,0)
(12,38,0)
(28,47,0)
(45,48,0)
(13,5,0)
(45,38,0)
(27,21,0)
(23,38,0)
(14,42,0)
(19,5,0)
(5,38,0)
(46,43,0)
(49,3,0)
(11,9,0)
(37,10,0)
(35,10,0)
(2,38,0)
(12,31,0)
(36,10,0)
(19,39,0)
(49,43,0)
(34,21,0)
(36,25,0)
(51,7,0)
(22,44,0)
(33,19,0)
(17,36,0)
(32,11,1)
(49,3,1)
(24,48,1)
(31,39,1)
(41,20,1)
(45,48,1)
(11,36,1)
(24,15,1)
(47,28,1)
(20,9,1)
(15,4,1)
(50,12,1)
(31,41,1)
(52,17,1)
(48,49,1)
(9,32,1)
(14,47,1)
(19,39,1)
(12,31,1)
(44,36,1)
(16,21,1)
(17,39,1)
(28,24,1)
(5,48,1)
(5,13,1)
(34,21,1)
(4,48,1)
(13,19,1)
(29,24,1)
(39,6,1)
(34,16,1)
(21,44,1)
(44,22,1)
(45,29,1)
(22,27,1)
(19,33,1)
(27,5,1)
(26,30,1)
(33,45,1)
(46,26,1)
(30,50,1)
(6,18,1)
(36,25,1)
(43,46,1)
(40,34,1)
(49,43,1)
(18,8,1)
(25,52,1)
(29,14,1)
(45,48,2)
(49,43,2)
(28,24,2)
(47,24,2)
(14,24,2)
(44,36,2)
(19,39,2)
(12,31,2)
(31,39,2)
(49,3,2)
(48,49,2)
(21,44,2)
(14,47,2)
(39,6,2)
(36,25,2)
(24,48,2)
(5,48,2)
(34,21,2)
(43,46,2)
-----------------------------------
(0, sizeof(wchar_t)
(1,dataPtr2)
(2,if (data == NULL)
(3,wchar_t *)
(4,data)
(5,*dataPtr1 = data)
(6,&data)
(7,)
(8,dataPtr1)
(9,data = NULL)
(10,)
(11,data)
(12,* data = *dataPtr1)
(13,data)
(14,exit(-1)
(15,NULL)
(16,data)
(17,dataPtr2)
(18,data)
(19,*dataPtr1)
(20,data)
(21,* data = *dataPtr2)
(22,dataPtr2)
(23,data)
(24,data == NULL)
(25,&data)
(26,wchar_t)
(27,data)
(28,1)
(29,data)
(30,100)
(31,*dataPtr1)
(32,NULL)
(33,dataPtr1)
(34,free(data)
(35,data)
(36,* *dataPtr2 = &data)
(37,dataPtr1)
(38,)
(39,* *dataPtr1 = &data)
(40,RET)
(41,dataPtr1)
(42,)
(43,calloc(100, sizeof(wchar_t)
(44,*dataPtr2)
(45,printWLine(data)
(46,sizeof(wchar_t)
(47,-1)
(48,data = (wchar_t *)
(49,(wchar_t *)
(50,data)
(51,data)
(52,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^