-----label-----
0
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_65b_goodG2BSink(int count)
{
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
19,20
19,21
19,22
19,23
20,21
21,22
21,23
22,23
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
33,34
35,36
36,37
38,39
39,40
40,41
40,42
41,42
-----nextToken-----
2,4,6,8,14,16,18,23,24,27,31,32,34,37,42,43
-----computeFrom-----
21,22
21,23
25,26
25,27
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_65b_goodG2BSink(int count){    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_65b_goodG2BSink(int count)
CWE400_Resource_Exhaustion__fscanf_for_loop_65b_goodG2BSink
int count
int
count
count
{    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(0,19,0)
(2,20,0)
(21,15,0)
(12,19,0)
(1,13,0)
(14,20,0)
(17,20,0)
(14,19,0)
(11,18,0)
(19,8,0)
(7,18,0)
(5,4,0)
(6,15,0)
(19,12,0)
(15,3,0)
(19,14,0)
(18,15,0)
(16,14,0)
(4,10,0)
(13,20,0)
(18,11,1)
(9,14,1)
(0,16,1)
(20,2,1)
(14,20,1)
(19,12,1)
(16,13,1)
(19,8,1)
(16,20,1)
(2,17,1)
(13,20,1)
(14,19,1)
(19,0,1)
(17,18,1)
(11,7,1)
(1,4,1)
(5,14,1)
(13,1,1)
(4,5,1)
(19,12,2)
(13,14,2)
(1,14,2)
(4,14,2)
(19,8,2)
(16,14,2)
(5,14,2)
(19,14,2)
(14,14,2)
(0,14,2)
(14,20,2)
(13,20,2)
(14,19,2)
-----------------------------------
(0,count)
(1,i)
(2,0)
(3,)
(4,printLine("Hello")
(5,"Hello")
(6,for (i = 0; i < (size_t)
(7,i)
(8,int count)
(9,RET)
(10,)
(11,0)
(12,size_t)
(13,i++)
(14,i < (size_t)
(15,)
(16,i)
(17,i)
(18,i = 0)
(19,(size_t)
(20,i = 0)
(21,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^