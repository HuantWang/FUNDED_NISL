-----label-----
0
-----code-----
static int device_notifier(struct notifier_block *nb,
				  unsigned long action, void *data)
{
	struct device *dev = data;
	struct pci_dev *pdev = to_pci_dev(dev);
	struct dmar_domain *domain;

	if (iommu_no_mapping(dev))
		return 0;

	domain = find_domain(pdev);
	if (!domain)
		return 0;

	if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through) {
		domain_remove_one_dev_info(domain, pdev);

		if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&
		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&
		    list_empty(&domain->devices))
			domain_exit(domain);
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
17,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
22,23
22,24
23,24
25,26
25,27
25,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
35,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
66,67
68,69
68,70
69,70
70,71
72,73
74,75
74,76
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
84,85
84,86
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
93,95
94,95
94,96
95,96
95,97
96,97
97,98
98,99
98,100
99,100
99,101
100,101
103,104
105,106
106,107
107,108
107,109
108,109
108,110
109,110
112,113
114,115
114,116
115,116
117,118
118,119
118,120
119,120
122,123
123,124
123,125
124,125
126,127
128,129
-----nextToken-----
2,4,7,9,10,12,14,16,18,19,24,26,27,30,34,36,37,41,43,47,49,50,54,56,58,62,65,67,71,73,78,80,83,88,90,92,101,102,104,110,111,113,116,120,121,125,127,129
-----computeFrom-----
60,61
60,62
75,76
75,77
76,77
76,78
94,95
94,96
95,96
95,97
98,99
98,100
107,108
107,109
-----guardedBy-----
120,127
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int device_notifier(struct notifier_block *nb,				  unsigned long action, void *data){	struct device *dev = data;	struct pci_dev *pdev = to_pci_dev(dev);	struct dmar_domain *domain;	if (iommu_no_mapping(dev))		return 0;	domain = find_domain(pdev);	if (!domain)		return 0;	if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through) {		domain_remove_one_dev_info(domain, pdev);		if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices))			domain_exit(domain);	}	return 0;}
static int
device_notifier(struct notifier_block *nb,				  unsigned long action, void *data)
device_notifier
struct notifier_block *nb
struct notifier_block
notifier_block
*nb
*
nb
unsigned long action
unsigned long
action
action
void *data
void
*data
*
data
{	struct device *dev = data;	struct pci_dev *pdev = to_pci_dev(dev);	struct dmar_domain *domain;	if (iommu_no_mapping(dev))		return 0;	domain = find_domain(pdev);	if (!domain)		return 0;	if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through) {		domain_remove_one_dev_info(domain, pdev);		if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices))			domain_exit(domain);	}	return 0;}
struct device *dev = data;
struct device *dev = data;
struct device
device
*dev = data
*
dev
= data
data
data
struct pci_dev *pdev = to_pci_dev(dev);
struct pci_dev *pdev = to_pci_dev(dev);
struct pci_dev
pci_dev
*pdev = to_pci_dev(dev)
*
pdev
= to_pci_dev(dev)
to_pci_dev(dev)
to_pci_dev
to_pci_dev
dev
dev
struct dmar_domain *domain;
struct dmar_domain *domain;
struct dmar_domain
dmar_domain
*domain
*
domain
if (iommu_no_mapping(dev))		return 0;
iommu_no_mapping(dev)
iommu_no_mapping
iommu_no_mapping
dev
dev
return 0;
0
domain = find_domain(pdev);
domain = find_domain(pdev)
domain
domain
find_domain(pdev)
find_domain
find_domain
pdev
pdev
if (!domain)		return 0;
!domain
domain
domain
return 0;
0
if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through) {		domain_remove_one_dev_info(domain, pdev);		if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices))			domain_exit(domain);	}
action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through
action == BUS_NOTIFY_UNBOUND_DRIVER
action
action
BUS_NOTIFY_UNBOUND_DRIVER
BUS_NOTIFY_UNBOUND_DRIVER
!iommu_pass_through
iommu_pass_through
iommu_pass_through
{		domain_remove_one_dev_info(domain, pdev);		if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices))			domain_exit(domain);	}
domain_remove_one_dev_info(domain, pdev);
domain_remove_one_dev_info(domain, pdev)
domain_remove_one_dev_info
domain_remove_one_dev_info
domain
domain
pdev
pdev
if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices))			domain_exit(domain);
!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices)
!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE
domain->flags
domain
domain
flags
DOMAIN_FLAG_VIRTUAL_MACHINE
DOMAIN_FLAG_VIRTUAL_MACHINE
!(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
domain->flags & DOMAIN_FLAG_STATIC_IDENTITY
domain->flags
domain
domain
flags
DOMAIN_FLAG_STATIC_IDENTITY
DOMAIN_FLAG_STATIC_IDENTITY
list_empty(&domain->devices)
list_empty
list_empty
&domain->devices
domain->devices
domain
domain
devices
domain_exit(domain);
domain_exit(domain)
domain_exit
domain_exit
domain
domain
return 0;
0
-----joern-----
(17,55,0)
(23,60,0)
(60,20,0)
(51,12,0)
(42,40,0)
(17,10,0)
(31,33,0)
(24,37,0)
(4,9,0)
(35,54,0)
(59,32,0)
(43,10,0)
(12,46,0)
(29,10,0)
(38,31,0)
(44,1,0)
(31,12,0)
(18,32,0)
(50,49,0)
(33,31,0)
(33,49,0)
(41,48,0)
(43,40,0)
(8,16,0)
(53,55,0)
(56,10,0)
(15,11,0)
(9,10,0)
(44,11,0)
(35,62,0)
(6,30,0)
(5,10,0)
(60,10,0)
(27,60,0)
(21,11,0)
(37,24,0)
(12,49,0)
(20,60,0)
(61,49,0)
(17,33,0)
(45,49,0)
(16,33,0)
(24,62,0)
(26,20,0)
(35,42,0)
(25,5,0)
(62,35,0)
(10,16,0)
(37,9,0)
(54,35,0)
(19,43,0)
(20,54,0)
(57,49,0)
(18,48,0)
(28,17,0)
(40,42,0)
(18,30,0)
(62,24,0)
(7,49,0)
(42,35,0)
(0,1,0)
(47,43,0)
(1,44,0)
(54,20,0)
(48,49,0)
(16,10,0)
(39,33,0)
(40,43,0)
(10,49,0)
(2,37,0)
(34,49,0)
(9,37,0)
(52,12,0)
(22,9,0)
(58,52,0)
(36,12,0)
(11,44,0)
(11,13,0)
(3,17,0)
(14,56,0)
(59,5,1)
(43,10,1)
(43,19,1)
(19,47,1)
(32,59,1)
(15,21,1)
(9,4,1)
(24,37,1)
(0,11,1)
(62,35,1)
(5,25,1)
(16,33,1)
(3,44,1)
(33,31,1)
(36,51,1)
(44,1,1)
(26,60,1)
(17,28,1)
(23,27,1)
(58,33,1)
(41,44,1)
(11,15,1)
(38,39,1)
(48,41,1)
(25,10,1)
(20,26,1)
(16,8,1)
(17,10,1)
(22,17,1)
(27,24,1)
(20,60,1)
(6,52,1)
(12,36,1)
(52,58,1)
(4,22,1)
(9,10,1)
(44,11,1)
(35,42,1)
(28,3,1)
(10,16,1)
(18,48,1)
(47,54,1)
(40,43,1)
(2,9,1)
(37,2,1)
(31,12,1)
(1,0,1)
(5,10,1)
(11,13,1)
(41,62,1)
(41,56,1)
(12,46,1)
(18,30,1)
(18,32,1)
(52,12,1)
(56,10,1)
(14,62,1)
(39,12,1)
(30,6,1)
(17,33,1)
(54,20,1)
(56,14,1)
(37,9,1)
(60,23,1)
(60,10,1)
(62,24,1)
(42,40,1)
(8,29,1)
(35,54,1)
(31,38,1)
(29,52,1)
(21,5,1)
(37,44,2)
(56,62,2)
(35,42,2)
(18,48,2)
(54,24,2)
(3,44,2)
(43,54,2)
(60,10,2)
(62,35,2)
(19,54,2)
(62,44,2)
(62,24,2)
(41,5,2)
(40,43,2)
(0,11,2)
(5,52,2)
(25,52,2)
(59,5,2)
(31,12,2)
(52,12,2)
(26,24,2)
(37,9,2)
(43,10,2)
(21,5,2)
(27,24,2)
(17,44,2)
(23,24,2)
(6,52,2)
(30,52,2)
(32,5,2)
(9,44,2)
(8,52,2)
(54,20,2)
(42,54,2)
(10,52,2)
(9,10,2)
(33,31,2)
(20,24,2)
(44,5,2)
(28,44,2)
(56,10,2)
(2,44,2)
(11,13,2)
(44,1,2)
(14,62,2)
(47,54,2)
(16,52,2)
(24,44,2)
(35,24,2)
(17,10,2)
(15,5,2)
(40,54,2)
(17,33,2)
(35,54,2)
(24,37,2)
(60,24,2)
(42,40,2)
(5,10,2)
(22,44,2)
(20,60,2)
(10,16,2)
(1,11,2)
(4,44,2)
(44,11,2)
(16,33,2)
(11,5,2)
(29,52,2)
(12,46,2)
(18,30,2)
(48,5,2)
(18,32,2)
-----------------------------------
(0,iommu_pass_through)
(1,!iommu_pass_through)
(2,DOMAIN_FLAG_VIRTUAL_MACHINE)
(3,domain)
(4,flags)
(5,!domain)
(6,0)
(7,if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through)
(8,pdev)
(9,domain->flags)
(10,domain = find_domain(pdev)
(11,action == BUS_NOTIFY_UNBOUND_DRIVER)
(12,*dev = data)
(13,unsigned long action)
(14,domain)
(15,BUS_NOTIFY_UNBOUND_DRIVER)
(16,find_domain(pdev)
(17,domain_remove_one_dev_info(domain, pdev)
(18,RET)
(19,devices)
(20,domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
(21,action)
(22,domain)
(23,flags)
(24,!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
(25,domain)
(26,DOMAIN_FLAG_STATIC_IDENTITY)
(27,domain)
(28,pdev)
(29,domain)
(30,return 0;)
(31,to_pci_dev(dev)
(32,return 0;)
(33,*pdev = to_pci_dev(dev)
(34,domain)
(35,!(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
(36,data)
(37,domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
(38,dev)
(39,pdev)
(40,&domain->devices)
(41,0)
(42,list_empty(&domain->devices)
(43,domain->devices)
(44,action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through)
(45,if (!domain)
(46,void *data)
(47,domain)
(48,return 0;)
(49,)
(50,if (iommu_no_mapping(dev)
(51,dev)
(52,iommu_no_mapping(dev)
(53,if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
(54,!(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
(55,)
(56,domain_exit(domain)
(57,dev)
(58,dev)
(59,0)
(60,domain->flags)
(61,pdev)
(62,!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^