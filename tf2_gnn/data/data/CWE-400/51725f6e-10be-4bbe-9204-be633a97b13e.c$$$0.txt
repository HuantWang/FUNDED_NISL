-----label-----
0
-----code-----
static int videobuf_dvb_register_frontend(struct dvb_adapter *adapter,
	struct videobuf_dvb *dvb)
{
	int result;

	/* register frontend */
	result = dvb_register_frontend(adapter, dvb->frontend);
	if (result < 0) {
		printk(KERN_WARNING "%s: dvb_register_frontend failed (errno = %d)\n",
		       dvb->name, result);
		goto fail_frontend;
	}

	/* register demux stuff */
	dvb->demux.dmx.capabilities =
		DMX_TS_FILTERING | DMX_SECTION_FILTERING |
		DMX_MEMORY_BASED_FILTERING;
	dvb->demux.priv       = dvb;
	dvb->demux.filternum  = 256;
	dvb->demux.feednum    = 256;
	dvb->demux.start_feed = videobuf_dvb_start_feed;
	dvb->demux.stop_feed  = videobuf_dvb_stop_feed;
	result = dvb_dmx_init(&dvb->demux);
	if (result < 0) {
		printk(KERN_WARNING "%s: dvb_dmx_init failed (errno = %d)\n",
		       dvb->name, result);
		goto fail_dmx;
	}

	dvb->dmxdev.filternum    = 256;
	dvb->dmxdev.demux        = &dvb->demux.dmx;
	dvb->dmxdev.capabilities = 0;
	result = dvb_dmxdev_init(&dvb->dmxdev, adapter);

	if (result < 0) {
		printk(KERN_WARNING "%s: dvb_dmxdev_init failed (errno = %d)\n",
		       dvb->name, result);
		goto fail_dmxdev;
	}

	dvb->fe_hw.source = DMX_FRONTEND_0;
	result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_hw);
	if (result < 0) {
		printk(KERN_WARNING "%s: add_frontend failed (DMX_FRONTEND_0, errno = %d)\n",
		       dvb->name, result);
		goto fail_fe_hw;
	}

	dvb->fe_mem.source = DMX_MEMORY_FE;
	result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_mem);
	if (result < 0) {
		printk(KERN_WARNING "%s: add_frontend failed (DMX_MEMORY_FE, errno = %d)\n",
		       dvb->name, result);
		goto fail_fe_mem;
	}

	result = dvb->demux.dmx.connect_frontend(&dvb->demux.dmx, &dvb->fe_hw);
	if (result < 0) {
		printk(KERN_WARNING "%s: connect_frontend failed (errno = %d)\n",
		       dvb->name, result);
		goto fail_fe_conn;
	}

	/* register network adapter */
	result = dvb_net_init(adapter, &dvb->net, &dvb->demux.dmx);
	if (result < 0) {
		printk(KERN_WARNING "%s: dvb_net_init failed (errno = %d)\n",
		       dvb->name, result);
		goto fail_fe_conn;
	}
	return 0;

fail_fe_conn:
	dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_mem);
fail_fe_mem:
	dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_hw);
fail_fe_hw:
	dvb_dmxdev_release(&dvb->dmxdev);
fail_dmxdev:
	dvb_dmx_release(&dvb->demux);
fail_dmx:
	dvb_unregister_frontend(dvb->frontend);
fail_frontend:
	dvb_frontend_detach(dvb->frontend);
	dvb->frontend = NULL;

	return result;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
17,46
17,47
17,48
17,49
17,50
17,51
17,52
18,19
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
28,29
30,31
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
45,46
46,47
46,48
47,48
47,49
48,49
48,50
49,50
49,51
50,51
55,56
55,57
56,57
56,58
57,58
59,60
61,62
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
71,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
91,92
92,93
92,94
93,94
93,95
94,95
94,96
95,96
99,100
101,102
102,103
102,104
103,104
103,105
104,105
104,106
105,106
109,110
111,112
112,113
112,114
113,114
115,116
115,117
116,117
118,119
119,120
119,121
120,121
123,124
123,125
124,125
124,126
125,126
128,129
128,130
129,130
130,131
132,133
133,134
133,135
134,135
134,136
135,136
135,137
136,137
141,142
142,143
142,144
143,144
143,145
144,145
144,146
145,146
149,150
150,151
150,152
151,152
151,153
152,153
156,157
157,158
157,159
158,159
158,160
159,160
159,161
160,161
165,166
166,167
166,168
167,168
169,170
169,171
169,172
170,171
172,173
173,174
173,175
174,175
177,178
179,180
179,181
180,181
180,182
181,182
184,185
184,186
185,186
186,187
188,189
189,190
189,191
190,191
190,192
191,192
191,193
192,193
196,197
198,199
199,200
199,201
200,201
202,203
202,204
202,205
203,204
203,205
204,205
204,206
205,206
205,207
206,207
211,212
212,213
212,214
213,214
213,215
214,215
218,219
219,220
219,221
220,221
223,224
223,225
224,225
224,226
225,226
228,229
228,230
229,230
230,231
232,233
233,234
233,235
234,235
234,236
235,236
235,237
236,237
240,241
242,243
243,244
243,245
244,245
246,247
246,248
246,249
247,248
247,249
248,249
248,250
249,250
249,251
250,251
255,256
256,257
256,258
257,258
257,259
258,259
262,263
263,264
263,265
264,265
267,268
267,269
268,269
268,270
269,270
272,273
272,274
273,274
274,275
276,277
277,278
277,279
278,279
280,281
280,282
280,283
281,282
281,283
282,283
282,284
283,284
283,285
284,285
289,290
290,291
290,292
291,292
291,293
292,293
296,297
297,298
297,299
298,299
301,302
301,303
302,303
302,304
303,304
306,307
306,308
307,308
308,309
310,311
311,312
311,313
312,313
314,315
314,316
314,317
314,318
315,316
317,318
319,320
320,321
320,322
321,322
324,325
325,326
325,327
326,327
326,328
327,328
331,332
331,333
332,333
332,334
333,334
336,337
336,338
337,338
338,339
340,341
342,343
342,344
344,345
345,346
345,347
345,348
346,347
346,348
347,348
347,349
348,349
348,350
349,350
354,355
355,356
355,357
356,357
356,358
357,358
361,362
362,363
362,364
363,364
366,367
366,368
368,369
369,370
369,371
369,372
370,371
370,372
371,372
371,373
372,373
372,374
373,374
378,379
379,380
379,381
380,381
380,382
381,382
385,386
386,387
386,388
387,388
390,391
390,392
392,393
393,394
393,395
394,395
396,397
397,398
397,399
398,399
401,402
401,403
403,404
404,405
404,406
405,406
407,408
408,409
408,410
409,410
412,413
412,414
414,415
415,416
415,417
416,417
418,419
418,420
419,420
422,423
422,424
424,425
425,426
425,427
426,427
428,429
428,430
429,430
432,433
433,434
433,435
434,435
434,436
435,436
438,439
440,441
441,442
-----nextToken-----
2,4,7,9,10,13,15,16,20,22,26,29,31,34,35,39,40,44,51,52,53,54,58,60,62,68,69,70,72,78,79,80,81,87,88,89,90,96,97,98,100,106,107,108,110,114,117,121,122,126,127,131,137,138,139,140,146,147,148,153,154,155,161,162,163,164,168,171,175,176,178,182,183,187,193,194,195,197,201,207,208,209,210,215,216,217,221,222,226,227,231,237,238,239,241,245,251,252,253,254,259,260,261,265,266,270,271,275,279,285,286,287,288,293,294,295,299,300,304,305,309,313,316,318,322,323,328,329,330,334,335,339,341,343,350,351,352,353,358,359,360,364,365,367,374,375,376,377,382,383,384,388,389,391,395,399,400,402,406,410,411,413,417,420,421,423,427,430,431,436,437,439,442
-----computeFrom-----
24,25
24,26
37,38
37,39
46,47
46,48
55,56
55,57
56,57
56,58
64,65
64,66
74,75
74,76
83,84
83,85
92,93
92,94
102,103
102,104
112,113
112,114
124,125
124,126
133,134
133,135
142,143
142,144
157,158
157,159
166,167
166,168
180,181
180,182
189,190
189,191
199,200
199,201
224,225
224,226
233,234
233,235
243,244
243,245
268,269
268,270
277,278
277,279
302,303
302,304
311,312
311,313
332,333
332,334
433,434
433,435
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;GotoStatement;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int videobuf_dvb_register_frontend(struct dvb_adapter *adapter,	struct videobuf_dvb *dvb){	int result;	/* register frontend */	result = dvb_register_frontend(adapter, dvb->frontend);	if (result < 0) {		printk(KERN_WARNING "%s: dvb_register_frontend failed (errno = %d)\n",		       dvb->name, result);		goto fail_frontend;	}	/* register demux stuff */	dvb->demux.dmx.capabilities =		DMX_TS_FILTERING | DMX_SECTION_FILTERING |		DMX_MEMORY_BASED_FILTERING;	dvb->demux.priv       = dvb;	dvb->demux.filternum  = 256;	dvb->demux.feednum    = 256;	dvb->demux.start_feed = videobuf_dvb_start_feed;	dvb->demux.stop_feed  = videobuf_dvb_stop_feed;	result = dvb_dmx_init(&dvb->demux);	if (result < 0) {		printk(KERN_WARNING "%s: dvb_dmx_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_dmx;	}	dvb->dmxdev.filternum    = 256;	dvb->dmxdev.demux        = &dvb->demux.dmx;	dvb->dmxdev.capabilities = 0;	result = dvb_dmxdev_init(&dvb->dmxdev, adapter);	if (result < 0) {		printk(KERN_WARNING "%s: dvb_dmxdev_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_dmxdev;	}	dvb->fe_hw.source = DMX_FRONTEND_0;	result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_hw);	if (result < 0) {		printk(KERN_WARNING "%s: add_frontend failed (DMX_FRONTEND_0, errno = %d)\n",		       dvb->name, result);		goto fail_fe_hw;	}	dvb->fe_mem.source = DMX_MEMORY_FE;	result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_mem);	if (result < 0) {		printk(KERN_WARNING "%s: add_frontend failed (DMX_MEMORY_FE, errno = %d)\n",		       dvb->name, result);		goto fail_fe_mem;	}	result = dvb->demux.dmx.connect_frontend(&dvb->demux.dmx, &dvb->fe_hw);	if (result < 0) {		printk(KERN_WARNING "%s: connect_frontend failed (errno = %d)\n",		       dvb->name, result);		goto fail_fe_conn;	}	/* register network adapter */	result = dvb_net_init(adapter, &dvb->net, &dvb->demux.dmx);	if (result < 0) {		printk(KERN_WARNING "%s: dvb_net_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_fe_conn;	}	return 0;fail_fe_conn:	dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_mem);fail_fe_mem:	dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_hw);fail_fe_hw:	dvb_dmxdev_release(&dvb->dmxdev);fail_dmxdev:	dvb_dmx_release(&dvb->demux);fail_dmx:	dvb_unregister_frontend(dvb->frontend);fail_frontend:	dvb_frontend_detach(dvb->frontend);	dvb->frontend = NULL;	return result;}
static int
videobuf_dvb_register_frontend(struct dvb_adapter *adapter,	struct videobuf_dvb *dvb)
videobuf_dvb_register_frontend
struct dvb_adapter *adapter
struct dvb_adapter
dvb_adapter
*adapter
*
adapter
struct videobuf_dvb *dvb
struct videobuf_dvb
videobuf_dvb
*dvb
*
dvb
{	int result;	/* register frontend */	result = dvb_register_frontend(adapter, dvb->frontend);	if (result < 0) {		printk(KERN_WARNING "%s: dvb_register_frontend failed (errno = %d)\n",		       dvb->name, result);		goto fail_frontend;	}	/* register demux stuff */	dvb->demux.dmx.capabilities =		DMX_TS_FILTERING | DMX_SECTION_FILTERING |		DMX_MEMORY_BASED_FILTERING;	dvb->demux.priv       = dvb;	dvb->demux.filternum  = 256;	dvb->demux.feednum    = 256;	dvb->demux.start_feed = videobuf_dvb_start_feed;	dvb->demux.stop_feed  = videobuf_dvb_stop_feed;	result = dvb_dmx_init(&dvb->demux);	if (result < 0) {		printk(KERN_WARNING "%s: dvb_dmx_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_dmx;	}	dvb->dmxdev.filternum    = 256;	dvb->dmxdev.demux        = &dvb->demux.dmx;	dvb->dmxdev.capabilities = 0;	result = dvb_dmxdev_init(&dvb->dmxdev, adapter);	if (result < 0) {		printk(KERN_WARNING "%s: dvb_dmxdev_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_dmxdev;	}	dvb->fe_hw.source = DMX_FRONTEND_0;	result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_hw);	if (result < 0) {		printk(KERN_WARNING "%s: add_frontend failed (DMX_FRONTEND_0, errno = %d)\n",		       dvb->name, result);		goto fail_fe_hw;	}	dvb->fe_mem.source = DMX_MEMORY_FE;	result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_mem);	if (result < 0) {		printk(KERN_WARNING "%s: add_frontend failed (DMX_MEMORY_FE, errno = %d)\n",		       dvb->name, result);		goto fail_fe_mem;	}	result = dvb->demux.dmx.connect_frontend(&dvb->demux.dmx, &dvb->fe_hw);	if (result < 0) {		printk(KERN_WARNING "%s: connect_frontend failed (errno = %d)\n",		       dvb->name, result);		goto fail_fe_conn;	}	/* register network adapter */	result = dvb_net_init(adapter, &dvb->net, &dvb->demux.dmx);	if (result < 0) {		printk(KERN_WARNING "%s: dvb_net_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_fe_conn;	}	return 0;fail_fe_conn:	dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_mem);fail_fe_mem:	dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_hw);fail_fe_hw:	dvb_dmxdev_release(&dvb->dmxdev);fail_dmxdev:	dvb_dmx_release(&dvb->demux);fail_dmx:	dvb_unregister_frontend(dvb->frontend);fail_frontend:	dvb_frontend_detach(dvb->frontend);	dvb->frontend = NULL;	return result;}
int result;
int result;
int
result
result
result = dvb_register_frontend(adapter, dvb->frontend);
result = dvb_register_frontend(adapter, dvb->frontend)
result
result
dvb_register_frontend(adapter, dvb->frontend)
dvb_register_frontend
dvb_register_frontend
adapter
adapter
dvb->frontend
dvb
dvb
frontend
if (result < 0) {		printk(KERN_WARNING "%s: dvb_register_frontend failed (errno = %d)\n",		       dvb->name, result);		goto fail_frontend;	}
result < 0
result
result
0
{		printk(KERN_WARNING "%s: dvb_register_frontend failed (errno = %d)\n",		       dvb->name, result);		goto fail_frontend;	}
printk(KERN_WARNING "%s: dvb_register_frontend failed (errno = %d)\n",		       dvb->name, result);
goto fail_frontend;
fail_frontend
dvb->demux.dmx.capabilities =		DMX_TS_FILTERING | DMX_SECTION_FILTERING |		DMX_MEMORY_BASED_FILTERING;
dvb->demux.dmx.capabilities =		DMX_TS_FILTERING | DMX_SECTION_FILTERING |		DMX_MEMORY_BASED_FILTERING
dvb->demux.dmx.capabilities
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
capabilities
DMX_TS_FILTERING | DMX_SECTION_FILTERING |		DMX_MEMORY_BASED_FILTERING
DMX_TS_FILTERING | DMX_SECTION_FILTERING
DMX_TS_FILTERING
DMX_TS_FILTERING
DMX_SECTION_FILTERING
DMX_SECTION_FILTERING
DMX_MEMORY_BASED_FILTERING
DMX_MEMORY_BASED_FILTERING
dvb->demux.priv       = dvb;
dvb->demux.priv       = dvb
dvb->demux.priv
dvb->demux
dvb
dvb
demux
priv
dvb
dvb
dvb->demux.filternum  = 256;
dvb->demux.filternum  = 256
dvb->demux.filternum
dvb->demux
dvb
dvb
demux
filternum
256
dvb->demux.feednum    = 256;
dvb->demux.feednum    = 256
dvb->demux.feednum
dvb->demux
dvb
dvb
demux
feednum
256
dvb->demux.start_feed = videobuf_dvb_start_feed;
dvb->demux.start_feed = videobuf_dvb_start_feed
dvb->demux.start_feed
dvb->demux
dvb
dvb
demux
start_feed
videobuf_dvb_start_feed
videobuf_dvb_start_feed
dvb->demux.stop_feed  = videobuf_dvb_stop_feed;
dvb->demux.stop_feed  = videobuf_dvb_stop_feed
dvb->demux.stop_feed
dvb->demux
dvb
dvb
demux
stop_feed
videobuf_dvb_stop_feed
videobuf_dvb_stop_feed
result = dvb_dmx_init(&dvb->demux);
result = dvb_dmx_init(&dvb->demux)
result
result
dvb_dmx_init(&dvb->demux)
dvb_dmx_init
dvb_dmx_init
&dvb->demux
dvb->demux
dvb
dvb
demux
if (result < 0) {		printk(KERN_WARNING "%s: dvb_dmx_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_dmx;	}
result < 0
result
result
0
{		printk(KERN_WARNING "%s: dvb_dmx_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_dmx;	}
printk(KERN_WARNING "%s: dvb_dmx_init failed (errno = %d)\n",		       dvb->name, result);
goto fail_dmx;
fail_dmx
dvb->dmxdev.filternum    = 256;
dvb->dmxdev.filternum    = 256
dvb->dmxdev.filternum
dvb->dmxdev
dvb
dvb
dmxdev
filternum
256
dvb->dmxdev.demux        = &dvb->demux.dmx;
dvb->dmxdev.demux        = &dvb->demux.dmx
dvb->dmxdev.demux
dvb->dmxdev
dvb
dvb
dmxdev
demux
&dvb->demux.dmx
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
dvb->dmxdev.capabilities = 0;
dvb->dmxdev.capabilities = 0
dvb->dmxdev.capabilities
dvb->dmxdev
dvb
dvb
dmxdev
capabilities
0
result = dvb_dmxdev_init(&dvb->dmxdev, adapter);
result = dvb_dmxdev_init(&dvb->dmxdev, adapter)
result
result
dvb_dmxdev_init(&dvb->dmxdev, adapter)
dvb_dmxdev_init
dvb_dmxdev_init
&dvb->dmxdev
dvb->dmxdev
dvb
dvb
dmxdev
adapter
adapter
if (result < 0) {		printk(KERN_WARNING "%s: dvb_dmxdev_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_dmxdev;	}
result < 0
result
result
0
{		printk(KERN_WARNING "%s: dvb_dmxdev_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_dmxdev;	}
printk(KERN_WARNING "%s: dvb_dmxdev_init failed (errno = %d)\n",		       dvb->name, result);
goto fail_dmxdev;
fail_dmxdev
dvb->fe_hw.source = DMX_FRONTEND_0;
dvb->fe_hw.source = DMX_FRONTEND_0
dvb->fe_hw.source
dvb->fe_hw
dvb
dvb
fe_hw
source
DMX_FRONTEND_0
DMX_FRONTEND_0
result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_hw);
result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_hw)
result
result
dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_hw)
dvb->demux.dmx.add_frontend
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
add_frontend
&dvb->demux.dmx
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
&dvb->fe_hw
dvb->fe_hw
dvb
dvb
fe_hw
if (result < 0) {		printk(KERN_WARNING "%s: add_frontend failed (DMX_FRONTEND_0, errno = %d)\n",		       dvb->name, result);		goto fail_fe_hw;	}
result < 0
result
result
0
{		printk(KERN_WARNING "%s: add_frontend failed (DMX_FRONTEND_0, errno = %d)\n",		       dvb->name, result);		goto fail_fe_hw;	}
printk(KERN_WARNING "%s: add_frontend failed (DMX_FRONTEND_0, errno = %d)\n",		       dvb->name, result);
goto fail_fe_hw;
fail_fe_hw
dvb->fe_mem.source = DMX_MEMORY_FE;
dvb->fe_mem.source = DMX_MEMORY_FE
dvb->fe_mem.source
dvb->fe_mem
dvb
dvb
fe_mem
source
DMX_MEMORY_FE
DMX_MEMORY_FE
result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_mem);
result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_mem)
result
result
dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_mem)
dvb->demux.dmx.add_frontend
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
add_frontend
&dvb->demux.dmx
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
&dvb->fe_mem
dvb->fe_mem
dvb
dvb
fe_mem
if (result < 0) {		printk(KERN_WARNING "%s: add_frontend failed (DMX_MEMORY_FE, errno = %d)\n",		       dvb->name, result);		goto fail_fe_mem;	}
result < 0
result
result
0
{		printk(KERN_WARNING "%s: add_frontend failed (DMX_MEMORY_FE, errno = %d)\n",		       dvb->name, result);		goto fail_fe_mem;	}
printk(KERN_WARNING "%s: add_frontend failed (DMX_MEMORY_FE, errno = %d)\n",		       dvb->name, result);
goto fail_fe_mem;
fail_fe_mem
result = dvb->demux.dmx.connect_frontend(&dvb->demux.dmx, &dvb->fe_hw);
result = dvb->demux.dmx.connect_frontend(&dvb->demux.dmx, &dvb->fe_hw)
result
result
dvb->demux.dmx.connect_frontend(&dvb->demux.dmx, &dvb->fe_hw)
dvb->demux.dmx.connect_frontend
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
connect_frontend
&dvb->demux.dmx
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
&dvb->fe_hw
dvb->fe_hw
dvb
dvb
fe_hw
if (result < 0) {		printk(KERN_WARNING "%s: connect_frontend failed (errno = %d)\n",		       dvb->name, result);		goto fail_fe_conn;	}
result < 0
result
result
0
{		printk(KERN_WARNING "%s: connect_frontend failed (errno = %d)\n",		       dvb->name, result);		goto fail_fe_conn;	}
printk(KERN_WARNING "%s: connect_frontend failed (errno = %d)\n",		       dvb->name, result);
goto fail_fe_conn;
fail_fe_conn
result = dvb_net_init(adapter, &dvb->net, &dvb->demux.dmx);
result = dvb_net_init(adapter, &dvb->net, &dvb->demux.dmx)
result
result
dvb_net_init(adapter, &dvb->net, &dvb->demux.dmx)
dvb_net_init
dvb_net_init
adapter
adapter
&dvb->net
dvb->net
dvb
dvb
net
&dvb->demux.dmx
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
if (result < 0) {		printk(KERN_WARNING "%s: dvb_net_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_fe_conn;	}
result < 0
result
result
0
{		printk(KERN_WARNING "%s: dvb_net_init failed (errno = %d)\n",		       dvb->name, result);		goto fail_fe_conn;	}
printk(KERN_WARNING "%s: dvb_net_init failed (errno = %d)\n",		       dvb->name, result);
goto fail_fe_conn;
fail_fe_conn
return 0;
0
fail_fe_conn:	dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_mem);
fail_fe_conn
dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_mem);
dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_mem)
dvb->demux.dmx.remove_frontend
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
remove_frontend
&dvb->demux.dmx
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
&dvb->fe_mem
dvb->fe_mem
dvb
dvb
fe_mem
fail_fe_mem:	dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_hw);
fail_fe_mem
dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_hw);
dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_hw)
dvb->demux.dmx.remove_frontend
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
remove_frontend
&dvb->demux.dmx
dvb->demux.dmx
dvb->demux
dvb
dvb
demux
dmx
&dvb->fe_hw
dvb->fe_hw
dvb
dvb
fe_hw
fail_fe_hw:	dvb_dmxdev_release(&dvb->dmxdev);
fail_fe_hw
dvb_dmxdev_release(&dvb->dmxdev);
dvb_dmxdev_release(&dvb->dmxdev)
dvb_dmxdev_release
dvb_dmxdev_release
&dvb->dmxdev
dvb->dmxdev
dvb
dvb
dmxdev
fail_dmxdev:	dvb_dmx_release(&dvb->demux);
fail_dmxdev
dvb_dmx_release(&dvb->demux);
dvb_dmx_release(&dvb->demux)
dvb_dmx_release
dvb_dmx_release
&dvb->demux
dvb->demux
dvb
dvb
demux
fail_dmx:	dvb_unregister_frontend(dvb->frontend);
fail_dmx
dvb_unregister_frontend(dvb->frontend);
dvb_unregister_frontend(dvb->frontend)
dvb_unregister_frontend
dvb_unregister_frontend
dvb->frontend
dvb
dvb
frontend
fail_frontend:	dvb_frontend_detach(dvb->frontend);
fail_frontend
dvb_frontend_detach(dvb->frontend);
dvb_frontend_detach(dvb->frontend)
dvb_frontend_detach
dvb_frontend_detach
dvb->frontend
dvb
dvb
frontend
dvb->frontend = NULL;
dvb->frontend = NULL
dvb->frontend
dvb
dvb
frontend
NULL
NULL
return result;
result
result
-----joern-----
(231,210,0)
(33,81,0)
(21,125,0)
(137,139,0)
(86,37,0)
(185,39,0)
(151,221,0)
(95,144,0)
(260,44,0)
(56,228,0)
(50,201,0)
(212,99,0)
(234,113,0)
(161,189,0)
(95,93,0)
(4,245,0)
(207,194,0)
(157,226,0)
(98,99,0)
(11,99,0)
(89,0,0)
(23,7,0)
(164,99,0)
(51,5,0)
(195,99,0)
(65,156,0)
(144,99,0)
(101,180,0)
(22,146,0)
(248,99,0)
(202,255,0)
(144,95,0)
(192,208,0)
(258,190,0)
(157,233,0)
(109,208,0)
(150,75,0)
(52,78,0)
(198,86,0)
(26,3,0)
(79,140,0)
(126,146,0)
(172,127,0)
(48,1,0)
(253,241,0)
(5,233,0)
(214,37,0)
(145,234,0)
(189,162,0)
(236,21,0)
(181,73,0)
(97,99,0)
(120,216,0)
(166,120,0)
(74,100,0)
(4,35,0)
(250,19,0)
(217,59,0)
(53,162,0)
(62,44,0)
(240,96,0)
(175,186,0)
(177,95,0)
(5,182,0)
(148,168,0)
(160,120,0)
(16,131,0)
(51,9,0)
(184,191,0)
(125,48,0)
(138,176,0)
(228,175,0)
(174,212,0)
(47,36,0)
(188,228,0)
(46,105,0)
(241,28,0)
(221,151,0)
(130,137,0)
(246,165,0)
(28,103,0)
(229,99,0)
(42,80,0)
(6,182,0)
(182,5,0)
(44,80,0)
(146,197,0)
(82,231,0)
(48,255,0)
(149,57,0)
(29,127,0)
(259,31,0)
(54,100,0)
(232,175,0)
(257,3,0)
(44,10,0)
(29,255,0)
(196,206,0)
(55,32,0)
(105,182,0)
(72,176,0)
(75,37,0)
(224,99,0)
(107,10,0)
(43,90,0)
(95,242,0)
(1,48,0)
(29,181,0)
(29,197,0)
(68,148,0)
(83,37,0)
(183,99,0)
(141,229,0)
(96,194,0)
(127,156,0)
(38,32,0)
(100,37,0)
(29,144,0)
(31,37,0)
(211,178,0)
(115,99,0)
(186,175,0)
(262,245,0)
(112,62,0)
(191,234,0)
(17,37,0)
(181,99,0)
(10,37,0)
(196,214,0)
(255,99,0)
(206,99,0)
(221,203,0)
(186,210,0)
(57,144,0)
(206,196,0)
(127,99,0)
(192,158,0)
(118,151,0)
(241,37,0)
(132,221,0)
(180,101,0)
(261,101,0)
(59,37,0)
(117,10,0)
(200,99,0)
(153,9,0)
(60,29,0)
(78,52,0)
(243,201,0)
(191,37,0)
(49,99,0)
(162,99,0)
(62,113,0)
(215,102,0)
(83,156,0)
(244,173,0)
(158,99,0)
(45,211,0)
(34,241,0)
(62,189,0)
(102,242,0)
(165,248,0)
(47,37,0)
(9,37,0)
(146,22,0)
(76,62,0)
(163,66,0)
(9,51,0)
(169,99,0)
(94,0,0)
(247,3,0)
(63,190,0)
(24,89,0)
(29,99,0)
(29,175,0)
(226,37,0)
(18,99,0)
(233,5,0)
(248,203,0)
(40,191,0)
(233,157,0)
(214,196,0)
(62,135,0)
(238,144,0)
(123,197,0)
(156,127,0)
(62,78,0)
(239,59,0)
(190,100,0)
(220,211,0)
(113,234,0)
(208,37,0)
(28,241,0)
(70,178,0)
(168,148,0)
(41,137,0)
(178,13,0)
(14,139,0)
(156,93,0)
(154,27,0)
(12,140,0)
(21,86,0)
(155,151,0)
(210,186,0)
(17,1,0)
(25,180,0)
(73,181,0)
(227,113,0)
(52,37,0)
(62,50,0)
(197,146,0)
(193,214,0)
(106,31,0)
(167,9,0)
(178,211,0)
(62,165,0)
(176,58,0)
(140,37,0)
(251,105,0)
(90,181,0)
(134,157,0)
(31,106,0)
(50,212,0)
(137,37,0)
(84,214,0)
(80,99,0)
(0,89,0)
(85,208,0)
(135,264,0)
(147,209,0)
(124,99,0)
(263,99,0)
(264,37,0)
(108,83,0)
(256,101,0)
(201,37,0)
(106,35,0)
(234,191,0)
(222,264,0)
(71,194,0)
(176,37,0)
(151,37,0)
(35,106,0)
(39,197,0)
(62,99,0)
(58,73,0)
(165,75,0)
(7,99,0)
(264,135,0)
(86,21,0)
(63,206,0)
(10,44,0)
(77,86,0)
(119,15,0)
(146,216,0)
(143,50,0)
(242,102,0)
(32,255,0)
(112,29,0)
(67,99,0)
(209,99,0)
(3,247,0)
(81,37,0)
(78,229,0)
(148,37,0)
(110,192,0)
(199,89,0)
(69,81,0)
(0,22,0)
(62,192,0)
(216,120,0)
(194,96,0)
(92,205,0)
(62,96,0)
(223,57,0)
(89,37,0)
(146,93,0)
(96,66,0)
(219,17,0)
(35,4,0)
(1,17,0)
(204,264,0)
(97,36,0)
(20,102,0)
(139,99,0)
(103,99,0)
(226,157,0)
(61,131,0)
(195,180,0)
(213,98,0)
(203,248,0)
(30,247,0)
(170,52,0)
(22,0,0)
(104,2,0)
(73,58,0)
(100,190,0)
(48,125,0)
(182,99,0)
(189,131,0)
(73,13,0)
(190,63,0)
(255,48,0)
(29,182,0)
(211,37,0)
(131,37,0)
(125,21,0)
(113,195,0)
(208,192,0)
(64,52,0)
(159,111,0)
(247,98,0)
(66,99,0)
(237,78,0)
(36,47,0)
(206,63,0)
(3,37,0)
(210,231,0)
(203,221,0)
(133,99,0)
(231,37,0)
(102,37,0)
(18,140,0)
(218,69,0)
(242,95,0)
(194,37,0)
(136,17,0)
(8,47,0)
(5,51,0)
(197,99,0)
(91,172,0)
(13,178,0)
(216,146,0)
(121,90,0)
(114,135,0)
(171,127,0)
(131,189,0)
(168,99,0)
(225,39,0)
(35,99,0)
(235,75,0)
(69,209,0)
(62,69,0)
(252,231,0)
(122,226,0)
(156,83,0)
(140,18,0)
(81,69,0)
(59,245,0)
(75,165,0)
(129,226,0)
(245,4,0)
(62,247,0)
(249,83,0)
(187,31,0)
(36,97,0)
(87,99,0)
(245,59,0)
(152,81,0)
(58,176,0)
(142,99,0)
(66,37,0)
(88,158,0)
(175,99,0)
(128,181,0)
(120,37,0)
(201,50,0)
(179,148,0)
(103,28,0)
(135,7,0)
(180,195,0)
(116,172,0)
(254,201,0)
(13,73,0)
(230,47,0)
(62,78,1)
(35,4,1)
(6,80,1)
(53,189,1)
(86,198,1)
(32,55,1)
(222,204,1)
(228,56,1)
(146,22,1)
(34,104,1)
(47,37,1)
(163,96,1)
(157,134,1)
(190,100,1)
(215,20,1)
(135,114,1)
(238,7,1)
(146,216,1)
(63,190,1)
(170,64,1)
(62,76,1)
(248,203,1)
(96,240,1)
(97,36,1)
(168,148,1)
(100,37,1)
(262,59,1)
(89,37,1)
(234,191,1)
(159,228,1)
(206,63,1)
(221,151,1)
(118,155,1)
(135,264,1)
(62,50,1)
(201,37,1)
(194,71,1)
(26,66,1)
(78,52,1)
(29,182,1)
(158,88,1)
(229,141,1)
(10,37,1)
(244,90,1)
(178,211,1)
(0,94,1)
(264,37,1)
(3,257,1)
(59,239,1)
(152,162,1)
(155,165,1)
(185,197,1)
(57,144,1)
(61,229,1)
(230,154,1)
(20,238,1)
(218,81,1)
(62,44,1)
(223,149,1)
(51,9,1)
(70,211,1)
(201,243,1)
(98,213,1)
(40,172,1)
(226,37,1)
(207,195,1)
(166,126,1)
(154,57,1)
(122,6,1)
(35,106,1)
(96,194,1)
(106,31,1)
(179,119,1)
(25,113,1)
(72,13,1)
(150,158,1)
(74,54,1)
(250,39,1)
(149,144,1)
(108,65,1)
(228,175,1)
(5,233,1)
(138,72,1)
(182,5,1)
(192,208,1)
(220,45,1)
(86,37,1)
(252,232,1)
(71,207,1)
(29,60,1)
(249,108,1)
(190,258,1)
(246,75,1)
(9,37,1)
(121,181,1)
(47,8,1)
(120,37,1)
(247,3,1)
(258,100,1)
(56,188,1)
(32,255,1)
(126,123,1)
(21,86,1)
(83,37,1)
(233,157,1)
(197,146,1)
(192,110,1)
(62,69,1)
(240,194,1)
(259,4,1)
(243,254,1)
(39,225,1)
(198,77,1)
(41,130,1)
(50,143,1)
(44,10,1)
(62,165,1)
(59,37,1)
(156,83,1)
(131,16,1)
(95,242,1)
(54,92,1)
(231,37,1)
(260,10,1)
(127,156,1)
(0,89,1)
(76,39,1)
(186,210,1)
(217,250,1)
(92,105,1)
(30,3,1)
(52,170,1)
(165,75,1)
(91,116,1)
(45,128,1)
(120,160,1)
(75,235,1)
(10,117,1)
(179,18,1)
(239,217,1)
(214,37,1)
(102,37,1)
(232,209,1)
(105,182,1)
(33,152,1)
(83,249,1)
(237,52,1)
(172,91,1)
(172,127,1)
(141,78,1)
(62,189,1)
(17,37,1)
(7,23,1)
(242,102,1)
(112,29,1)
(107,32,1)
(156,93,1)
(62,247,1)
(102,215,1)
(216,120,1)
(14,137,1)
(247,30,1)
(48,1,1)
(145,191,1)
(62,135,1)
(88,192,1)
(208,37,1)
(29,127,1)
(128,105,1)
(57,223,1)
(210,231,1)
(151,118,1)
(46,182,1)
(104,32,1)
(231,82,1)
(234,145,1)
(22,0,1)
(95,177,1)
(81,37,1)
(29,255,1)
(140,79,1)
(36,47,1)
(255,48,1)
(90,43,1)
(256,25,1)
(34,206,1)
(62,113,1)
(95,93,1)
(245,59,1)
(28,241,1)
(8,230,1)
(134,226,1)
(184,40,1)
(195,180,1)
(55,38,1)
(1,17,1)
(12,159,1)
(241,37,1)
(226,129,1)
(194,37,1)
(48,125,1)
(66,37,1)
(157,226,1)
(21,236,1)
(90,181,1)
(139,14,1)
(44,260,1)
(254,57,1)
(105,251,1)
(50,201,1)
(110,208,1)
(84,193,1)
(17,136,1)
(18,140,1)
(219,125,1)
(129,122,1)
(80,42,1)
(89,199,1)
(75,37,1)
(137,37,1)
(191,184,1)
(58,176,1)
(261,256,1)
(191,37,1)
(204,248,1)
(176,138,1)
(245,262,1)
(24,216,1)
(64,98,1)
(82,252,1)
(29,175,1)
(214,84,1)
(167,233,1)
(147,69,1)
(54,35,1)
(119,172,1)
(31,187,1)
(23,135,1)
(165,246,1)
(193,63,1)
(68,179,1)
(151,37,1)
(123,90,1)
(42,44,1)
(5,51,1)
(230,103,1)
(208,109,1)
(160,166,1)
(175,186,1)
(12,97,1)
(109,85,1)
(202,212,1)
(77,202,1)
(116,127,1)
(181,73,1)
(253,34,1)
(125,21,1)
(143,201,1)
(264,222,1)
(131,37,1)
(137,41,1)
(225,185,1)
(132,151,1)
(217,244,1)
(69,81,1)
(206,196,1)
(4,245,1)
(52,37,1)
(162,53,1)
(100,74,1)
(117,107,1)
(73,58,1)
(9,153,1)
(211,220,1)
(180,101,1)
(60,139,1)
(38,255,1)
(221,132,1)
(103,28,1)
(140,37,1)
(39,197,1)
(188,175,1)
(65,171,1)
(113,234,1)
(189,131,1)
(29,181,1)
(16,61,1)
(227,234,1)
(178,70,1)
(85,228,1)
(251,46,1)
(146,93,1)
(29,197,1)
(148,68,1)
(196,214,1)
(148,37,1)
(174,50,1)
(241,253,1)
(3,37,1)
(212,174,1)
(62,192,1)
(153,167,1)
(81,33,1)
(114,264,1)
(43,121,1)
(78,237,1)
(257,26,1)
(62,96,1)
(236,86,1)
(69,218,1)
(136,219,1)
(161,131,1)
(29,144,1)
(203,221,1)
(79,12,1)
(187,259,1)
(199,24,1)
(101,261,1)
(177,242,1)
(213,247,1)
(211,37,1)
(209,147,1)
(112,62,1)
(113,227,1)
(144,95,1)
(66,163,1)
(235,150,1)
(31,37,1)
(73,13,1)
(189,161,1)
(176,37,1)
(13,178,1)
(130,168,1)
(94,89,1)
(97,36,2)
(31,90,2)
(3,172,2)
(63,105,2)
(59,90,2)
(47,57,2)
(17,57,2)
(86,37,2)
(206,196,2)
(90,105,2)
(236,57,2)
(206,39,2)
(47,32,2)
(255,48,2)
(25,172,2)
(189,172,2)
(160,90,2)
(251,32,2)
(12,32,2)
(194,37,2)
(130,39,2)
(62,113,2)
(29,90,2)
(137,39,2)
(179,57,2)
(146,90,2)
(50,201,2)
(137,228,2)
(83,37,2)
(86,57,2)
(29,144,2)
(127,156,2)
(197,90,2)
(179,228,2)
(193,105,2)
(235,228,2)
(32,255,2)
(234,172,2)
(53,172,2)
(69,81,2)
(12,39,2)
(79,105,2)
(18,228,2)
(139,57,2)
(214,90,2)
(13,105,2)
(60,39,2)
(66,172,2)
(130,105,2)
(12,90,2)
(170,172,2)
(58,176,2)
(181,105,2)
(120,90,2)
(31,39,2)
(36,39,2)
(60,172,2)
(132,228,2)
(140,90,2)
(48,57,2)
(119,172,2)
(28,39,2)
(189,131,2)
(101,172,2)
(8,39,2)
(148,172,2)
(196,39,2)
(193,39,2)
(203,228,2)
(215,228,2)
(182,32,2)
(140,37,2)
(252,172,2)
(29,181,2)
(5,233,2)
(121,105,2)
(97,105,2)
(54,90,2)
(206,63,2)
(162,172,2)
(10,32,2)
(244,90,2)
(18,90,2)
(139,105,2)
(74,90,2)
(242,228,2)
(228,175,2)
(190,90,2)
(137,57,2)
(89,90,2)
(138,105,2)
(55,57,2)
(221,151,2)
(33,172,2)
(97,90,2)
(59,37,2)
(211,37,2)
(255,57,2)
(62,39,2)
(69,172,2)
(117,32,2)
(257,172,2)
(28,32,2)
(103,90,2)
(29,175,2)
(238,228,2)
(76,39,2)
(79,90,2)
(136,57,2)
(140,39,2)
(120,37,2)
(48,1,2)
(29,255,2)
(248,203,2)
(128,105,2)
(63,90,2)
(258,90,2)
(97,57,2)
(131,37,2)
(118,228,2)
(179,172,2)
(192,208,2)
(201,57,2)
(126,90,2)
(68,228,2)
(104,32,2)
(81,37,2)
(135,264,2)
(29,172,2)
(199,90,2)
(14,228,2)
(231,172,2)
(129,32,2)
(73,13,2)
(89,37,2)
(18,32,2)
(79,32,2)
(77,57,2)
(68,105,2)
(130,90,2)
(196,214,2)
(243,57,2)
(94,90,2)
(148,32,2)
(195,172,2)
(70,105,2)
(14,57,2)
(14,172,2)
(146,216,2)
(80,32,2)
(73,105,2)
(239,90,2)
(123,90,2)
(148,37,2)
(157,32,2)
(62,165,2)
(54,105,2)
(46,32,2)
(29,127,2)
(216,120,2)
(63,39,2)
(1,57,2)
(52,37,2)
(182,5,2)
(180,101,2)
(149,228,2)
(241,32,2)
(41,32,2)
(28,105,2)
(112,62,2)
(113,234,2)
(122,32,2)
(64,172,2)
(44,32,2)
(79,39,2)
(180,172,2)
(35,39,2)
(95,242,2)
(81,172,2)
(217,90,2)
(41,228,2)
(14,90,2)
(145,172,2)
(29,32,2)
(196,90,2)
(36,32,2)
(18,140,2)
(103,105,2)
(47,105,2)
(0,89,2)
(36,47,2)
(201,37,2)
(18,105,2)
(85,228,2)
(51,32,2)
(168,90,2)
(73,58,2)
(62,44,2)
(36,105,2)
(172,127,2)
(223,228,2)
(258,105,2)
(254,57,2)
(4,90,2)
(234,191,2)
(216,90,2)
(22,0,2)
(152,172,2)
(47,39,2)
(8,32,2)
(44,10,2)
(48,125,2)
(57,144,2)
(245,90,2)
(168,228,2)
(191,37,2)
(240,172,2)
(214,39,2)
(194,172,2)
(260,32,2)
(222,228,2)
(137,32,2)
(168,172,2)
(109,228,2)
(29,57,2)
(4,39,2)
(176,105,2)
(264,228,2)
(241,37,2)
(26,172,2)
(175,186,2)
(68,39,2)
(72,105,2)
(211,105,2)
(233,32,2)
(137,105,2)
(192,228,2)
(191,172,2)
(221,228,2)
(24,90,2)
(156,93,2)
(54,39,2)
(82,172,2)
(29,105,2)
(100,90,2)
(230,39,2)
(247,3,2)
(158,228,2)
(210,231,2)
(225,90,2)
(62,50,2)
(151,37,2)
(237,172,2)
(131,172,2)
(155,228,2)
(17,37,2)
(45,105,2)
(66,37,2)
(68,57,2)
(259,39,2)
(187,39,2)
(146,22,2)
(57,228,2)
(168,32,2)
(29,197,2)
(214,37,2)
(220,105,2)
(35,4,2)
(227,172,2)
(146,93,2)
(78,52,2)
(161,172,2)
(262,39,2)
(96,172,2)
(195,180,2)
(147,172,2)
(256,172,2)
(250,39,2)
(22,90,2)
(63,190,2)
(30,172,2)
(3,37,2)
(103,39,2)
(156,83,2)
(185,90,2)
(39,90,2)
(245,39,2)
(0,90,2)
(214,105,2)
(175,172,2)
(28,241,2)
(60,57,2)
(247,172,2)
(28,90,2)
(253,32,2)
(35,90,2)
(181,73,2)
(209,172,2)
(242,102,2)
(176,37,2)
(95,93,2)
(167,32,2)
(100,39,2)
(9,32,2)
(41,57,2)
(196,105,2)
(78,172,2)
(178,211,2)
(38,57,2)
(258,39,2)
(226,32,2)
(248,228,2)
(179,32,2)
(7,228,2)
(92,105,2)
(241,90,2)
(233,157,2)
(232,172,2)
(60,90,2)
(59,39,2)
(253,39,2)
(47,37,2)
(137,90,2)
(103,32,2)
(47,90,2)
(36,90,2)
(206,105,2)
(34,105,2)
(204,228,2)
(34,90,2)
(10,37,2)
(130,228,2)
(157,226,2)
(206,90,2)
(18,39,2)
(217,39,2)
(239,39,2)
(179,39,2)
(50,57,2)
(5,32,2)
(41,39,2)
(16,172,2)
(75,37,2)
(23,228,2)
(105,32,2)
(6,32,2)
(202,57,2)
(125,21,2)
(140,57,2)
(100,37,2)
(20,228,2)
(79,57,2)
(75,228,2)
(41,90,2)
(62,78,2)
(179,90,2)
(163,172,2)
(8,105,2)
(98,172,2)
(140,228,2)
(140,32,2)
(210,172,2)
(74,105,2)
(230,90,2)
(130,32,2)
(14,32,2)
(208,228,2)
(125,57,2)
(179,105,2)
(96,194,2)
(144,228,2)
(62,189,2)
(137,172,2)
(103,28,2)
(84,90,2)
(261,172,2)
(4,245,2)
(229,172,2)
(29,39,2)
(148,90,2)
(36,57,2)
(62,192,2)
(143,57,2)
(148,228,2)
(177,228,2)
(165,228,2)
(8,57,2)
(88,228,2)
(212,57,2)
(106,31,2)
(166,90,2)
(29,182,2)
(97,39,2)
(107,32,2)
(230,57,2)
(18,57,2)
(68,90,2)
(62,69,2)
(105,182,2)
(241,39,2)
(74,39,2)
(52,172,2)
(154,57,2)
(135,228,2)
(100,105,2)
(139,172,2)
(68,32,2)
(62,247,2)
(34,39,2)
(231,37,2)
(186,172,2)
(203,221,2)
(102,228,2)
(21,57,2)
(62,135,2)
(61,172,2)
(228,172,2)
(139,90,2)
(71,172,2)
(168,57,2)
(186,210,2)
(130,172,2)
(39,197,2)
(112,29,2)
(137,37,2)
(197,146,2)
(110,228,2)
(21,86,2)
(153,32,2)
(165,75,2)
(79,228,2)
(84,105,2)
(148,105,2)
(140,105,2)
(230,32,2)
(102,37,2)
(139,228,2)
(208,37,2)
(213,172,2)
(41,105,2)
(144,95,2)
(106,39,2)
(198,57,2)
(97,32,2)
(139,32,2)
(190,39,2)
(95,228,2)
(148,39,2)
(114,228,2)
(230,105,2)
(43,105,2)
(141,172,2)
(218,172,2)
(1,17,2)
(58,105,2)
(56,172,2)
(253,90,2)
(14,105,2)
(130,57,2)
(241,105,2)
(60,32,2)
(190,100,2)
(90,181,2)
(184,172,2)
(245,59,2)
(84,39,2)
(42,32,2)
(207,172,2)
(151,228,2)
(68,172,2)
(226,37,2)
(139,39,2)
(8,90,2)
(159,228,2)
(246,228,2)
(41,172,2)
(9,37,2)
(29,228,2)
(31,37,2)
(12,105,2)
(190,105,2)
(259,90,2)
(134,32,2)
(168,105,2)
(150,228,2)
(148,57,2)
(168,39,2)
(264,37,2)
(60,228,2)
(262,90,2)
(32,57,2)
(40,172,2)
(62,96,2)
(14,39,2)
(13,178,2)
(60,105,2)
(113,172,2)
(35,106,2)
(12,228,2)
(12,57,2)
(106,90,2)
(178,105,2)
(187,90,2)
(5,51,2)
(219,57,2)
(188,172,2)
(51,9,2)
(253,105,2)
(193,90,2)
(34,32,2)
(174,57,2)
(168,148,2)
-----------------------------------
(0,dvb->demux.dmx)
(1,&dvb->fe_hw)
(2,)
(3,dvb->demux)
(4,&dvb->demux.dmx)
(5,dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_mem)
(6,result)
(7,dvb->dmxdev.capabilities = 0)
(8,demux)
(9,dvb->fe_mem)
(10,dvb->fe_mem)
(11,fail_fe_mem:)
(12,dvb)
(13,&dvb->demux.dmx)
(14,NULL)
(15,)
(16,demux)
(17,dvb->fe_hw)
(18,dvb_unregister_frontend(dvb->frontend)
(19,)
(20,dvb)
(21,dvb->demux.dmx)
(22,&dvb->demux.dmx)
(23,0)
(24,dvb)
(25,DMX_TS_FILTERING)
(26,dvb)
(27,)
(28,&dvb->dmxdev)
(29,return result;)
(30,filternum)
(31,dvb->fe_mem)
(32,result < 0)
(33,demux)
(34,dvb)
(35,dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_mem)
(36,&dvb->demux)
(37,struct videobuf_dvb *dvb)
(38,result)
(39,result < 0)
(40,dvb)
(41,frontend)
(42,DMX_MEMORY_FE)
(43,0)
(44,dvb->fe_mem.source)
(45,dvb)
(46,result)
(47,dvb->demux)
(48,dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_hw)
(49,fail_dmxdev:)
(50,dvb->fe_hw.source)
(51,&dvb->fe_mem)
(52,dvb->demux)
(53,videobuf_dvb_start_feed)
(54,dvb)
(55,0)
(56,0)
(57,result < 0)
(58,&dvb->fe_hw)
(59,dvb->demux)
(60,result)
(61,dvb)
(62,return 0;)
(63,&dvb->demux.dmx)
(64,dvb)
(65,adapter)
(66,dvb->demux.priv       = dvb)
(67,if (result < 0)
(68,frontend)
(69,dvb->demux.stop_feed)
(70,dmx)
(71,demux)
(72,dvb)
(73,dvb->demux.dmx.connect_frontend(&dvb->demux.dmx, &dvb->fe_hw)
(74,demux)
(75,dvb->dmxdev)
(76,0)
(77,dvb)
(78,dvb->demux.feednum)
(79,frontend)
(80,dvb->fe_mem.source = DMX_MEMORY_FE)
(81,dvb->demux)
(82,demux)
(83,dvb->frontend)
(84,fe_hw)
(85,dvb)
(86,dvb->demux)
(87,if (result < 0)
(88,256)
(89,dvb->demux)
(90,result < 0)
(91,0)
(92,goto fail_fe_mem;)
(93,struct dvb_adapter *adapter)
(94,dmx)
(95,dvb_dmxdev_init(&dvb->dmxdev, adapter)
(96,dvb->demux.priv)
(97,dvb_dmx_release(&dvb->demux)
(98,dvb->demux.filternum  = 256)
(99,)
(100,dvb->demux)
(101,DMX_SECTION_FILTERING |\n\\n\\t\\tDMX_MEMORY_BASED_FILTERING)
(102,dvb->dmxdev)
(103,dvb_dmxdev_release(&dvb->dmxdev)
(104,goto fail_fe_hw;)
(105,result < 0)
(106,&dvb->fe_mem)
(107,dvb)
(108,dvb)
(109,dmxdev)
(110,filternum)
(111,)
(112,RET)
(113,dvb->demux.dmx.capabilities)
(114,capabilities)
(115,fail_fe_hw:)
(116,result)
(117,fe_mem)
(118,demux)
(119,goto fail_frontend;)
(120,dvb->net)
(121,result)
(122,dvb)
(123,result)
(124,fail_frontend:)
(125,&dvb->demux.dmx)
(126,adapter)
(127,result = dvb_register_frontend(adapter, dvb->frontend)
(128,result)
(129,demux)
(130,dvb)
(131,dvb->demux)
(132,dmx)
(133,if (result < 0)
(134,dmx)
(135,dvb->dmxdev.capabilities)
(136,fe_hw)
(137,dvb->frontend)
(138,fe_hw)
(139,dvb->frontend = NULL)
(140,dvb->frontend)
(141,256)
(142,result)
(143,source)
(144,result = dvb_dmxdev_init(&dvb->dmxdev, adapter)
(145,dmx)
(146,dvb_net_init(adapter, &dvb->net, &dvb->demux.dmx)
(147,videobuf_dvb_stop_feed)
(148,dvb->frontend)
(149,result)
(150,dvb)
(151,dvb->demux)
(152,dvb)
(153,fe_mem)
(154,goto fail_dmxdev;)
(155,dvb)
(156,dvb_register_frontend(adapter, dvb->frontend)
(157,dvb->demux.dmx)
(158,dvb->dmxdev.filternum    = 256)
(159,goto fail_dmx;)
(160,net)
(161,start_feed)
(162,dvb->demux.start_feed = videobuf_dvb_start_feed)
(163,dvb)
(164,if (result < 0)
(165,dvb->dmxdev.demux)
(166,dvb)
(167,dvb)
(168,dvb_frontend_detach(dvb->frontend)
(169,fail_fe_conn:)
(170,demux)
(171,result)
(172,result < 0)
(173,)
(174,DMX_FRONTEND_0)
(175,result = dvb_dmx_init(&dvb->demux)
(176,dvb->fe_hw)
(177,adapter)
(178,dvb->demux.dmx)
(179,dvb)
(180,DMX_TS_FILTERING | DMX_SECTION_FILTERING |\n\\n\\t\\tDMX_MEMORY_BASED_FILTERING)
(181,result = dvb->demux.dmx.connect_frontend(&dvb->demux.dmx, &dvb->fe_hw)
(182,result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_mem)
(183,if (result < 0)
(184,demux)
(185,result)
(186,dvb_dmx_init(&dvb->demux)
(187,fe_mem)
(188,result)
(189,dvb->demux.start_feed)
(190,dvb->demux.dmx)
(191,dvb->demux)
(192,dvb->dmxdev.filternum)
(193,dvb)
(194,dvb->demux)
(195,dvb->demux.dmx.capabilities =\n\\n\\t\\tDMX_TS_FILTERING | DMX_SECTION_FILTERING |\n\\n\\t\\tDMX_MEMORY_BASED_FILTERING)
(196,&dvb->fe_hw)
(197,result = dvb_net_init(adapter, &dvb->net, &dvb->demux.dmx)
(198,demux)
(199,demux)
(200,if (result < 0)
(201,dvb->fe_hw)
(202,result)
(203,&dvb->demux.dmx)
(204,dvb)
(205,)
(206,dvb->demux.dmx.remove_frontend(&dvb->demux.dmx, &dvb->fe_hw)
(207,dvb)
(208,dvb->dmxdev)
(209,dvb->demux.stop_feed  = videobuf_dvb_stop_feed)
(210,&dvb->demux)
(211,dvb->demux)
(212,dvb->fe_hw.source = DMX_FRONTEND_0)
(213,256)
(214,dvb->fe_hw)
(215,dmxdev)
(216,&dvb->net)
(217,dvb)
(218,stop_feed)
(219,dvb)
(220,demux)
(221,dvb->demux.dmx)
(222,dmxdev)
(223,0)
(224,fail_dmx:)
(225,0)
(226,dvb->demux)
(227,capabilities)
(228,result < 0)
(229,dvb->demux.feednum    = 256)
(230,dvb)
(231,dvb->demux)
(232,result)
(233,&dvb->demux.dmx)
(234,dvb->demux.dmx)
(235,dmxdev)
(236,dmx)
(237,feednum)
(238,result)
(239,demux)
(240,priv)
(241,dvb->dmxdev)
(242,&dvb->dmxdev)
(243,fe_hw)
(244,goto fail_fe_conn;)
(245,dvb->demux.dmx)
(246,demux)
(247,dvb->demux.filternum)
(248,dvb->dmxdev.demux        = &dvb->demux.dmx)
(249,frontend)
(250,goto fail_fe_conn;)
(251,0)
(252,dvb)
(253,dmxdev)
(254,dvb)
(255,result = dvb->demux.dmx.add_frontend(&dvb->demux.dmx, &dvb->fe_hw)
(256,DMX_SECTION_FILTERING)
(257,demux)
(258,dmx)
(259,dvb)
(260,source)
(261,DMX_MEMORY_BASED_FILTERING)
(262,dmx)
(263,if (result < 0)
(264,dvb->dmxdev)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^