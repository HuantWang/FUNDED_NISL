-----label-----
0
-----code-----
void
winimg_lazyinit(imglist *img)
{
  BITMAPINFO bmpinfo;
  unsigned char *pixels;
  HDC dc;
  size_t size;

  if (img->hdc)
    return;

  size = img->pixelwidth * img->pixelheight * 4;

  dc = GetDC(wnd);

  bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
  bmpinfo.bmiHeader.biWidth = img->pixelwidth;
  bmpinfo.bmiHeader.biHeight = - img->pixelheight;
  bmpinfo.bmiHeader.biPlanes = 1;
  bmpinfo.bmiHeader.biBitCount = 32;
  bmpinfo.bmiHeader.biCompression = BI_RGB;
  bmpinfo.bmiHeader.biSizeImage = 0;
  img->hdc = CreateCompatibleDC(dc);
  img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0);
  /*HGDIOBJ res =*/ SelectObject(img->hdc, img->hbmp);
  if (img->pixels) {
    CopyMemory(pixels, img->pixels, size);
    //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);
    free(img->pixels);
  } else {
    // resume from hibernation
    assert(img->strage);
    strage_read(img->strage, pixels, size);
  }
  img->pixels = pixels;

  ReleaseDC(wnd, dc);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
24,25
25,26
25,27
26,27
28,29
30,31
31,32
31,33
32,33
34,35
36,37
36,38
37,38
37,39
38,39
42,43
43,44
43,45
44,45
46,47
46,48
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
74,75
75,76
75,77
76,77
79,80
80,81
80,82
81,82
81,83
82,83
82,84
83,84
87,88
87,89
88,89
91,92
92,93
92,94
93,94
93,95
94,95
94,96
95,96
99,100
100,101
100,102
101,102
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
122,123
123,124
123,125
124,125
124,126
125,126
125,127
126,127
130,131
132,133
133,134
133,135
134,135
134,136
135,136
135,137
136,137
141,142
142,143
142,144
143,144
143,145
144,145
147,148
147,149
148,149
150,151
152,153
153,154
153,155
154,155
154,156
155,156
158,159
158,160
158,161
158,162
158,163
158,164
158,165
159,160
161,162
163,164
164,165
166,167
168,169
168,170
169,170
169,171
171,172
173,174
174,175
176,177
179,180
180,181
180,182
180,183
181,182
183,184
183,185
184,185
187,188
187,189
188,189
191,192
191,193
191,194
192,193
192,194
193,194
196,197
196,198
197,198
198,199
198,200
198,201
198,202
199,200
201,202
203,204
203,205
204,205
207,208
209,210
210,211
210,212
211,212
213,214
213,215
214,215
217,218
217,219
218,219
219,220
219,221
220,221
222,223
222,224
223,224
226,227
227,228
227,229
227,230
227,231
228,229
230,231
230,232
231,232
234,235
236,237
238,239
239,240
239,241
240,241
240,242
241,242
244,245
246,247
247,248
247,249
247,250
248,249
250,251
252,253
-----nextToken-----
2,4,7,9,10,15,17,20,22,23,27,29,33,35,39,40,41,45,50,51,54,55,56,60,63,65,71,72,73,77,78,84,85,86,89,90,96,97,98,102,103,109,110,111,112,118,119,120,121,127,128,129,131,137,138,139,140,145,146,149,151,156,157,160,162,165,167,170,172,175,177,178,182,185,186,189,190,194,195,200,202,205,206,208,212,215,216,221,224,225,229,232,233,235,237,242,243,245,249,251,253
-----computeFrom-----
43,44
43,45
46,47
46,48
47,48
47,49
58,59
58,60
67,68
67,69
80,81
80,82
92,93
92,94
105,106
105,107
114,115
114,116
123,124
123,125
133,134
133,135
142,143
142,144
153,154
153,155
239,240
239,241
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;FieldReference;IdExpression;Name;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
voidwinimg_lazyinit(imglist *img){  BITMAPINFO bmpinfo;  unsigned char *pixels;  HDC dc;  size_t size;  if (img->hdc)    return;  size = img->pixelwidth * img->pixelheight * 4;  dc = GetDC(wnd);  bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);  bmpinfo.bmiHeader.biWidth = img->pixelwidth;  bmpinfo.bmiHeader.biHeight = - img->pixelheight;  bmpinfo.bmiHeader.biPlanes = 1;  bmpinfo.bmiHeader.biBitCount = 32;  bmpinfo.bmiHeader.biCompression = BI_RGB;  bmpinfo.bmiHeader.biSizeImage = 0;  img->hdc = CreateCompatibleDC(dc);  img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0);  /*HGDIOBJ res =*/ SelectObject(img->hdc, img->hbmp);  if (img->pixels) {    CopyMemory(pixels, img->pixels, size);    //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);    free(img->pixels);  } else {    // resume from hibernation    assert(img->strage);    strage_read(img->strage, pixels, size);  }  img->pixels = pixels;  ReleaseDC(wnd, dc);}
void
winimg_lazyinit(imglist *img)
winimg_lazyinit
imglist *img
imglist
imglist
*img
*
img
{  BITMAPINFO bmpinfo;  unsigned char *pixels;  HDC dc;  size_t size;  if (img->hdc)    return;  size = img->pixelwidth * img->pixelheight * 4;  dc = GetDC(wnd);  bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);  bmpinfo.bmiHeader.biWidth = img->pixelwidth;  bmpinfo.bmiHeader.biHeight = - img->pixelheight;  bmpinfo.bmiHeader.biPlanes = 1;  bmpinfo.bmiHeader.biBitCount = 32;  bmpinfo.bmiHeader.biCompression = BI_RGB;  bmpinfo.bmiHeader.biSizeImage = 0;  img->hdc = CreateCompatibleDC(dc);  img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0);  /*HGDIOBJ res =*/ SelectObject(img->hdc, img->hbmp);  if (img->pixels) {    CopyMemory(pixels, img->pixels, size);    //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);    free(img->pixels);  } else {    // resume from hibernation    assert(img->strage);    strage_read(img->strage, pixels, size);  }  img->pixels = pixels;  ReleaseDC(wnd, dc);}
BITMAPINFO bmpinfo;
BITMAPINFO bmpinfo;
BITMAPINFO
BITMAPINFO
bmpinfo
bmpinfo
unsigned char *pixels;
unsigned char *pixels;
unsigned char
*pixels
*
pixels
HDC dc;
HDC dc;
HDC
HDC
dc
dc
size_t size;
size_t size;
size_t
size_t
size
size
if (img->hdc)    return;
img->hdc
img
img
hdc
return;
size = img->pixelwidth * img->pixelheight * 4;
size = img->pixelwidth * img->pixelheight * 4
size
size
img->pixelwidth * img->pixelheight * 4
img->pixelwidth * img->pixelheight
img->pixelwidth
img
img
pixelwidth
img->pixelheight
img
img
pixelheight
4
dc = GetDC(wnd);
dc = GetDC(wnd)
dc
dc
GetDC(wnd)
GetDC
GetDC
wnd
wnd
bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER)
bmpinfo.bmiHeader.biSize
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biSize
sizeof(BITMAPINFOHEADER)
BITMAPINFOHEADER
BITMAPINFOHEADER
BITMAPINFOHEADER

bmpinfo.bmiHeader.biWidth = img->pixelwidth;
bmpinfo.bmiHeader.biWidth = img->pixelwidth
bmpinfo.bmiHeader.biWidth
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biWidth
img->pixelwidth
img
img
pixelwidth
bmpinfo.bmiHeader.biHeight = - img->pixelheight;
bmpinfo.bmiHeader.biHeight = - img->pixelheight
bmpinfo.bmiHeader.biHeight
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biHeight
- img->pixelheight
img->pixelheight
img
img
pixelheight
bmpinfo.bmiHeader.biPlanes = 1;
bmpinfo.bmiHeader.biPlanes = 1
bmpinfo.bmiHeader.biPlanes
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biPlanes
1
bmpinfo.bmiHeader.biBitCount = 32;
bmpinfo.bmiHeader.biBitCount = 32
bmpinfo.bmiHeader.biBitCount
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biBitCount
32
bmpinfo.bmiHeader.biCompression = BI_RGB;
bmpinfo.bmiHeader.biCompression = BI_RGB
bmpinfo.bmiHeader.biCompression
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biCompression
BI_RGB
BI_RGB
bmpinfo.bmiHeader.biSizeImage = 0;
bmpinfo.bmiHeader.biSizeImage = 0
bmpinfo.bmiHeader.biSizeImage
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biSizeImage
0
img->hdc = CreateCompatibleDC(dc);
img->hdc = CreateCompatibleDC(dc)
img->hdc
img
img
hdc
CreateCompatibleDC(dc)
CreateCompatibleDC
CreateCompatibleDC
dc
dc
img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0);
img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0)
img->hbmp
img
img
hbmp
CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0)
CreateDIBSection
CreateDIBSection
dc
dc
&bmpinfo
bmpinfo
bmpinfo
DIB_RGB_COLORS
DIB_RGB_COLORS
(void*)&pixels
void*
void
*
*
&pixels
pixels
pixels
NULL
NULL
0
SelectObject(img->hdc, img->hbmp);
SelectObject(img->hdc, img->hbmp)
SelectObject
SelectObject
img->hdc
img
img
hdc
img->hbmp
img
img
hbmp
if (img->pixels) {    CopyMemory(pixels, img->pixels, size);    //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);    free(img->pixels);  } else {    // resume from hibernation    assert(img->strage);    strage_read(img->strage, pixels, size);  }
img->pixels
img
img
pixels
{    CopyMemory(pixels, img->pixels, size);    //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);    free(img->pixels);  }
CopyMemory(pixels, img->pixels, size);
CopyMemory(pixels, img->pixels, size)
CopyMemory
CopyMemory
pixels
pixels
img->pixels
img
img
pixels
size
size
free(img->pixels);
free(img->pixels)
free
free
img->pixels
img
img
pixels
{    // resume from hibernation    assert(img->strage);    strage_read(img->strage, pixels, size);  }
assert(img->strage);
assert(img->strage)
assert
assert
img->strage
img
img
strage
strage_read(img->strage, pixels, size);
strage_read(img->strage, pixels, size)
strage_read
strage_read
img->strage
img
img
strage
pixels
pixels
size
size
img->pixels = pixels;
img->pixels = pixels
img->pixels
img
img
pixels
pixels
pixels
ReleaseDC(wnd, dc);
ReleaseDC(wnd, dc)
ReleaseDC
ReleaseDC
wnd
wnd
dc
dc
-----joern-----
(6,105,0)
(71,111,0)
(63,79,0)
(118,90,0)
(22,90,0)
(98,87,0)
(143,92,0)
(134,110,0)
(4,53,0)
(102,121,0)
(19,84,0)
(100,43,0)
(59,109,0)
(74,132,0)
(78,52,0)
(21,74,0)
(117,80,0)
(129,11,0)
(128,100,0)
(70,133,0)
(108,22,0)
(17,135,0)
(89,98,0)
(12,20,0)
(135,47,0)
(133,90,0)
(23,100,0)
(56,121,0)
(96,76,0)
(29,90,0)
(79,75,0)
(87,98,0)
(135,29,0)
(7,94,0)
(115,47,0)
(39,111,0)
(137,90,0)
(106,128,0)
(94,11,0)
(37,53,0)
(20,45,0)
(12,92,0)
(136,137,0)
(22,95,0)
(112,124,0)
(98,4,0)
(84,110,0)
(27,78,0)
(41,124,0)
(64,74,0)
(40,132,0)
(117,105,0)
(101,1,0)
(109,90,0)
(31,69,0)
(79,90,0)
(98,3,0)
(65,134,0)
(121,1,0)
(26,115,0)
(130,51,0)
(24,83,0)
(10,52,0)
(20,103,0)
(84,19,0)
(13,29,0)
(55,1,0)
(62,45,0)
(142,133,0)
(60,32,0)
(133,96,0)
(123,45,0)
(122,31,0)
(115,26,0)
(0,2,0)
(113,117,0)
(66,34,0)
(30,35,0)
(57,46,0)
(52,45,0)
(19,45,0)
(31,19,0)
(127,94,0)
(91,46,0)
(126,80,0)
(111,90,0)
(75,11,0)
(135,51,0)
(33,118,0)
(138,98,0)
(93,103,0)
(68,78,0)
(141,82,0)
(69,109,0)
(38,80,0)
(139,54,0)
(51,45,0)
(100,128,0)
(42,45,0)
(31,90,0)
(73,137,0)
(86,26,0)
(11,75,0)
(54,57,0)
(57,54,0)
(132,95,0)
(121,90,0)
(78,90,0)
(34,2,0)
(75,51,0)
(110,16,0)
(76,45,0)
(35,87,0)
(51,75,0)
(104,54,0)
(67,110,0)
(49,4,0)
(124,45,0)
(35,90,0)
(50,48,0)
(34,76,0)
(125,135,0)
(36,109,0)
(25,45,0)
(41,82,0)
(76,96,0)
(87,45,0)
(140,48,0)
(103,20,0)
(1,121,0)
(109,87,0)
(88,134,0)
(72,16,0)
(48,90,0)
(4,49,0)
(82,41,0)
(131,29,0)
(5,31,0)
(114,2,0)
(75,79,0)
(2,34,0)
(96,133,0)
(11,94,0)
(69,31,0)
(105,45,0)
(132,74,0)
(1,83,0)
(80,117,0)
(95,45,0)
(69,45,0)
(9,12,0)
(134,45,0)
(46,45,0)
(94,90,0)
(137,24,0)
(110,45,0)
(1,51,0)
(15,84,0)
(81,22,0)
(95,22,0)
(77,43,0)
(99,45,0)
(107,26,0)
(4,98,0)
(24,137,0)
(109,69,0)
(29,135,0)
(44,57,0)
(61,82,0)
(92,12,0)
(28,3,0)
(3,98,0)
(43,45,0)
(18,41,0)
(119,45,0)
(14,128,0)
(98,110,0)
(53,4,0)
(120,98,0)
(48,19,0)
(26,90,0)
(97,92,0)
(116,79,0)
(85,35,0)
(8,118,0)
(58,98,0)
(16,110,0)
(105,6,1)
(100,23,1)
(75,11,1)
(117,113,1)
(68,1,1)
(12,9,1)
(128,14,1)
(135,51,1)
(48,90,1)
(81,132,1)
(120,35,1)
(98,3,1)
(82,141,1)
(37,58,1)
(4,53,1)
(31,5,1)
(133,90,1)
(69,31,1)
(110,16,1)
(84,110,1)
(76,96,1)
(133,70,1)
(69,109,1)
(60,32,1)
(137,90,1)
(135,29,1)
(75,79,1)
(108,81,1)
(24,137,1)
(32,111,1)
(44,54,1)
(142,34,1)
(34,2,1)
(68,115,1)
(29,90,1)
(91,57,1)
(41,18,1)
(13,17,1)
(114,95,1)
(103,93,1)
(109,87,1)
(60,134,1)
(79,90,1)
(129,94,1)
(92,97,1)
(34,66,1)
(31,19,1)
(95,22,1)
(17,118,1)
(11,129,1)
(130,111,1)
(72,67,1)
(65,52,1)
(117,80,1)
(35,30,1)
(87,98,1)
(113,80,1)
(1,121,1)
(79,63,1)
(96,133,1)
(20,103,1)
(48,140,1)
(116,130,1)
(140,50,1)
(86,135,1)
(35,90,1)
(61,105,1)
(43,77,1)
(143,110,1)
(100,128,1)
(121,102,1)
(28,120,1)
(29,131,1)
(58,3,1)
(101,121,1)
(134,88,1)
(21,64,1)
(98,110,1)
(41,82,1)
(118,33,1)
(22,108,1)
(18,82,1)
(88,65,1)
(12,92,1)
(19,84,1)
(109,90,1)
(1,51,1)
(94,127,1)
(127,7,1)
(66,2,1)
(104,76,1)
(80,126,1)
(30,85,1)
(106,46,1)
(107,86,1)
(93,12,1)
(54,139,1)
(73,136,1)
(11,94,1)
(97,143,1)
(132,40,1)
(55,101,1)
(51,75,1)
(7,79,1)
(53,37,1)
(125,29,1)
(89,138,1)
(136,118,1)
(57,44,1)
(56,24,1)
(118,90,1)
(22,90,1)
(15,48,1)
(3,28,1)
(5,122,1)
(40,74,1)
(94,90,1)
(38,43,1)
(139,104,1)
(59,36,1)
(27,68,1)
(14,106,1)
(126,38,1)
(138,4,1)
(74,21,1)
(50,124,1)
(78,90,1)
(10,78,1)
(36,31,1)
(46,91,1)
(109,59,1)
(33,8,1)
(111,71,1)
(121,90,1)
(63,116,1)
(111,90,1)
(26,90,1)
(70,142,1)
(67,51,1)
(98,89,1)
(102,56,1)
(26,107,1)
(2,0,1)
(64,20,1)
(122,87,1)
(8,69,1)
(1,55,1)
(132,74,1)
(124,112,1)
(6,117,1)
(4,49,1)
(57,54,1)
(9,92,1)
(77,100,1)
(85,19,1)
(141,61,1)
(0,114,1)
(112,41,1)
(71,39,1)
(52,10,1)
(137,73,1)
(31,90,1)
(98,4,1)
(23,128,1)
(131,13,1)
(115,26,1)
(16,72,1)
(135,125,1)
(78,27,1)
(84,15,1)
(134,110,1)
(63,111,2)
(51,75,2)
(19,84,2)
(98,4,2)
(41,82,2)
(8,111,2)
(50,111,2)
(13,118,2)
(73,118,2)
(34,2,2)
(24,137,2)
(30,111,2)
(82,111,2)
(105,111,2)
(121,90,2)
(58,111,2)
(109,87,2)
(66,111,2)
(54,111,2)
(37,111,2)
(140,111,2)
(111,90,2)
(18,111,2)
(86,118,2)
(134,111,2)
(126,111,2)
(95,22,2)
(56,118,2)
(142,111,2)
(75,79,2)
(11,94,2)
(59,111,2)
(0,111,2)
(75,111,2)
(69,111,2)
(36,111,2)
(113,111,2)
(11,111,2)
(21,111,2)
(34,111,2)
(100,111,2)
(97,111,2)
(79,111,2)
(48,90,2)
(61,111,2)
(75,11,2)
(19,111,2)
(44,111,2)
(70,111,2)
(132,111,2)
(24,118,2)
(76,111,2)
(53,111,2)
(3,111,2)
(98,3,2)
(1,51,2)
(89,111,2)
(98,110,2)
(81,111,2)
(40,111,2)
(4,111,2)
(135,51,2)
(68,111,2)
(5,111,2)
(92,111,2)
(52,111,2)
(138,111,2)
(118,111,2)
(12,92,2)
(2,111,2)
(106,111,2)
(72,111,2)
(22,90,2)
(100,128,2)
(108,111,2)
(12,111,2)
(23,111,2)
(143,111,2)
(6,111,2)
(10,111,2)
(125,118,2)
(91,111,2)
(57,111,2)
(109,90,2)
(132,74,2)
(1,118,2)
(32,111,2)
(41,111,2)
(118,90,2)
(117,80,2)
(130,111,2)
(110,111,2)
(27,111,2)
(95,111,2)
(26,118,2)
(16,111,2)
(87,111,2)
(78,90,2)
(117,111,2)
(116,111,2)
(4,53,2)
(57,54,2)
(102,118,2)
(20,103,2)
(1,121,2)
(134,110,2)
(120,111,2)
(43,111,2)
(48,111,2)
(129,111,2)
(4,49,2)
(60,32,2)
(115,118,2)
(101,118,2)
(133,90,2)
(31,90,2)
(69,109,2)
(93,111,2)
(33,111,2)
(96,133,2)
(55,118,2)
(65,111,2)
(46,111,2)
(9,111,2)
(15,111,2)
(136,118,2)
(124,111,2)
(35,111,2)
(84,110,2)
(69,31,2)
(141,111,2)
(31,19,2)
(107,118,2)
(26,90,2)
(87,98,2)
(94,90,2)
(121,118,2)
(109,111,2)
(122,111,2)
(135,29,2)
(7,111,2)
(137,118,2)
(103,111,2)
(80,111,2)
(94,111,2)
(114,111,2)
(28,111,2)
(35,90,2)
(133,111,2)
(31,111,2)
(64,111,2)
(67,111,2)
(29,118,2)
(137,90,2)
(38,111,2)
(78,111,2)
(20,111,2)
(51,111,2)
(104,111,2)
(112,111,2)
(128,111,2)
(98,111,2)
(84,111,2)
(135,118,2)
(110,16,2)
(96,111,2)
(77,111,2)
(115,26,2)
(79,90,2)
(74,111,2)
(127,111,2)
(131,118,2)
(29,90,2)
(85,111,2)
(139,111,2)
(14,111,2)
(17,118,2)
(88,111,2)
(76,96,2)
(22,111,2)
-----------------------------------
(0,bmiHeader)
(1,strage_read(img->strage, pixels, size)
(2,bmpinfo.bmiHeader)
(3,&bmpinfo)
(4,(void*)
(5,hdc)
(6,BI_RGB)
(7,img)
(8,img)
(9,biSize)
(10,pixels)
(11,img->pixelheight * 4)
(12,bmpinfo.bmiHeader.biSize)
(13,img)
(14,bmiHeader)
(15,dc)
(16,GetDC(wnd)
(17,pixels)
(18,biSizeImage)
(19,img->hdc = CreateCompatibleDC(dc)
(20,bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER)
(21,bmiHeader)
(22,img->pixelwidth)
(23,biBitCount)
(24,assert(img->strage)
(25,if (img->pixels)
(26,img->pixels)
(27,pixels)
(28,bmpinfo)
(29,img->pixels)
(30,hbmp)
(31,img->hdc)
(32,return;)
(33,pixels)
(34,bmpinfo.bmiHeader.biHeight)
(35,img->hbmp)
(36,img)
(37,pixels)
(38,bmpinfo)
(39,img)
(40,biWidth)
(41,bmpinfo.bmiHeader.biSizeImage)
(42,size)
(43,bmpinfo.bmiHeader.biBitCount = 32)
(44,biPlanes)
(45,)
(46,bmpinfo.bmiHeader.biPlanes = 1)
(47,)
(48,img->hdc)
(49,void*)
(50,img)
(51,size = img->pixelwidth * img->pixelheight * 4)
(52,img->pixels = pixels)
(53,&pixels)
(54,bmpinfo.bmiHeader)
(55,size)
(56,img)
(57,bmpinfo.bmiHeader.biPlanes)
(58,DIB_RGB_COLORS)
(59,hbmp)
(60,RET)
(61,bmpinfo)
(62,pixels)
(63,pixelwidth)
(64,bmpinfo)
(65,wnd)
(66,biHeight)
(67,dc)
(68,img)
(69,SelectObject(img->hdc, img->hbmp)
(70,pixelheight)
(71,hdc)
(72,wnd)
(73,strage)
(74,bmpinfo.bmiHeader)
(75,img->pixelwidth * img->pixelheight * 4)
(76,bmpinfo.bmiHeader.biHeight = - img->pixelheight)
(77,32)
(78,img->pixels)
(79,img->pixelwidth)
(80,bmpinfo.bmiHeader)
(81,img)
(82,bmpinfo.bmiHeader)
(83,)
(84,CreateCompatibleDC(dc)
(85,img)
(86,img)
(87,img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)
(88,dc)
(89,0)
(90,imglist *img)
(91,1)
(92,bmpinfo.bmiHeader)
(93,BITMAPINFOHEADER)
(94,img->pixelheight)
(95,bmpinfo.bmiHeader.biWidth = img->pixelwidth)
(96,- img->pixelheight)
(97,bmiHeader)
(98,CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)
(99,bmpinfo)
(100,bmpinfo.bmiHeader.biBitCount)
(101,pixels)
(102,strage)
(103,sizeof(BITMAPINFOHEADER)
(104,bmpinfo)
(105,bmpinfo.bmiHeader.biCompression = BI_RGB)
(106,bmpinfo)
(107,pixels)
(108,pixelwidth)
(109,img->hbmp)
(110,dc = GetDC(wnd)
(111,img->hdc)
(112,0)
(113,biCompression)
(114,bmpinfo)
(115,free(img->pixels)
(116,img)
(117,bmpinfo.bmiHeader.biCompression)
(118,img->pixels)
(119,dc)
(120,dc)
(121,img->strage)
(122,img)
(123,if (img->hdc)
(124,bmpinfo.bmiHeader.biSizeImage = 0)
(125,size)
(126,bmiHeader)
(127,pixelheight)
(128,bmpinfo.bmiHeader)
(129,4)
(130,size)
(131,pixels)
(132,bmpinfo.bmiHeader.biWidth)
(133,img->pixelheight)
(134,ReleaseDC(wnd, dc)
(135,CopyMemory(pixels, img->pixels, size)
(136,img)
(137,img->strage)
(138,NULL)
(139,bmiHeader)
(140,hdc)
(141,bmiHeader)
(142,img)
(143,bmpinfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^