-----label-----
1
-----code-----
static twoIntsStruct * badSource(twoIntsStruct * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
13,19
14,15
15,16
15,17
16,17
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
24,27
25,26
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
49,51
50,51
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
68,69
69,70
69,71
70,71
73,74
74,75
-----nextToken-----
3,5,6,9,11,12,17,21,23,26,27,31,32,36,38,43,45,51,52,53,54,60,61,62,63,67,71,72,75
-----computeFrom-----
15,16
15,17
34,35
34,36
47,48
47,49
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static twoIntsStruct * badSource(twoIntsStruct * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    return data;}
static twoIntsStruct
twoIntsStruct
* badSource(twoIntsStruct * data)
*
badSource
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    return data;}
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
return data;
data
data
-----joern-----
(11,24,0)
(40,12,0)
(12,36,0)
(16,1,0)
(30,40,0)
(17,25,0)
(4,36,0)
(33,12,0)
(0,16,0)
(13,18,0)
(37,4,0)
(28,21,0)
(3,40,0)
(22,39,0)
(34,8,0)
(6,22,0)
(15,24,0)
(27,16,0)
(33,21,0)
(7,24,0)
(12,33,0)
(9,33,0)
(16,0,0)
(38,16,0)
(8,25,0)
(33,9,0)
(19,36,0)
(5,35,0)
(23,4,0)
(24,12,0)
(22,6,0)
(32,0,0)
(40,1,0)
(21,33,0)
(7,26,0)
(0,18,0)
(29,12,0)
(24,1,0)
(18,36,0)
(26,36,0)
(4,1,0)
(35,12,0)
(40,8,0)
(16,12,0)
(31,6,0)
(14,28,0)
(21,28,0)
(2,35,0)
(20,21,0)
(12,1,0)
(35,1,0)
(4,12,0)
(26,7,0)
(25,36,0)
(8,40,0)
(24,7,0)
(33,9,1)
(7,24,1)
(20,29,1)
(16,12,1)
(30,3,1)
(4,37,1)
(33,21,1)
(35,2,1)
(40,1,1)
(11,18,1)
(3,22,1)
(40,12,1)
(17,8,1)
(31,35,1)
(24,12,1)
(34,40,1)
(16,1,1)
(38,27,1)
(21,28,1)
(35,1,1)
(2,5,1)
(28,14,1)
(27,25,1)
(14,20,1)
(25,17,1)
(35,12,1)
(12,1,1)
(24,15,1)
(16,38,1)
(22,6,1)
(40,30,1)
(15,11,1)
(37,26,1)
(6,31,1)
(5,12,1)
(23,4,1)
(13,0,1)
(4,1,1)
(26,7,1)
(32,16,1)
(0,16,1)
(18,13,1)
(3,35,1)
(8,34,1)
(12,33,1)
(24,1,1)
(0,32,1)
(4,12,1)
(8,40,1)
(7,24,2)
(24,12,2)
(35,1,2)
(24,1,2)
(16,1,2)
(40,12,2)
(35,12,2)
(16,12,2)
(8,40,2)
(12,1,2)
(0,16,2)
(33,9,2)
(26,7,2)
(33,21,2)
(23,4,2)
(22,6,2)
(12,33,2)
(31,35,2)
(4,12,2)
(4,1,2)
(22,35,2)
(40,1,2)
(21,28,2)
(6,35,2)
-----------------------------------
(0,data[0].intTwo)
(1,twoIntsStruct * data)
(2,NULL)
(3,data)
(4,return data;)
(5,data)
(6,-1)
(7,&data[0])
(8,data[0].intOne)
(9,twoIntsStruct *)
(10, sizeof(twoIntsStruct)
(11,data)
(12,data = (twoIntsStruct *)
(13,0)
(14,twoIntsStruct)
(15,0)
(16,data[0])
(17,0)
(18,data[0].intTwo = 0)
(19,if (data == NULL)
(20,100)
(21,calloc(100, sizeof(twoIntsStruct)
(22,exit(-1)
(23,RET)
(24,data[0])
(25,data[0].intOne = 0)
(26,printStructLine(&data[0])
(27,data)
(28,sizeof(twoIntsStruct)
(29,data)
(30,0)
(31,1)
(32,intTwo)
(33,(twoIntsStruct *)
(34,intOne)
(35,data == NULL)
(36,)
(37,data)
(38,0)
(39,)
(40,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^