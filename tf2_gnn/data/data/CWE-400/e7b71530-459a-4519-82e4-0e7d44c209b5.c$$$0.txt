-----label-----
0
-----code-----
extern mca_btl_base_descriptor_t* mca_btl_sm_alloc(
    struct mca_btl_base_module_t* btl,
    size_t size)
{
    mca_btl_sm_frag_t* frag;
    int rc;
    if(size <= mca_btl_sm_component.eager_limit) {
        MCA_BTL_SM_FRAG_ALLOC1(frag,rc);
    } else if (size <= mca_btl_sm_component.max_frag_size) {
        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);
    } else {
        return NULL;
    }

    if (frag != NULL) {
        frag->segment.seg_len = size;
    }

    return (mca_btl_base_descriptor_t*)frag;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
18,19
18,20
18,21
18,22
18,23
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
29,30
31,32
31,33
31,34
32,33
32,34
33,34
35,36
35,37
36,37
39,40
40,41
41,42
41,43
41,44
42,43
44,45
46,47
48,49
48,50
48,51
49,50
49,51
50,51
52,53
52,54
53,54
56,57
57,58
58,59
58,60
58,61
59,60
61,62
63,64
65,66
66,67
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
78,80
79,80
79,81
80,81
84,85
86,87
87,88
87,89
88,89
88,90
89,90
91,92
93,94
-----nextToken-----
3,5,6,9,11,12,15,17,22,24,25,28,30,34,37,38,43,45,47,51,54,55,60,62,64,68,72,74,81,82,83,85,90,92,94
-----computeFrom-----
32,33
32,34
49,50
49,51
70,71
70,72
77,78
77,79
-----guardedBy-----
72,81
-----guardedByNegation-----
34,51
37,54
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ReturnStatement;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
extern mca_btl_base_descriptor_t* mca_btl_sm_alloc(    struct mca_btl_base_module_t* btl,    size_t size){    mca_btl_sm_frag_t* frag;    int rc;    if(size <= mca_btl_sm_component.eager_limit) {        MCA_BTL_SM_FRAG_ALLOC1(frag,rc);    } else if (size <= mca_btl_sm_component.max_frag_size) {        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);    } else {        return NULL;    }    if (frag != NULL) {        frag->segment.seg_len = size;    }    return (mca_btl_base_descriptor_t*)frag;}
extern mca_btl_base_descriptor_t
mca_btl_base_descriptor_t
* mca_btl_sm_alloc(    struct mca_btl_base_module_t* btl,    size_t size)
*
mca_btl_sm_alloc
struct mca_btl_base_module_t* btl
struct mca_btl_base_module_t
mca_btl_base_module_t
* btl
*
btl
size_t size
size_t
size_t
size
size
{    mca_btl_sm_frag_t* frag;    int rc;    if(size <= mca_btl_sm_component.eager_limit) {        MCA_BTL_SM_FRAG_ALLOC1(frag,rc);    } else if (size <= mca_btl_sm_component.max_frag_size) {        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);    } else {        return NULL;    }    if (frag != NULL) {        frag->segment.seg_len = size;    }    return (mca_btl_base_descriptor_t*)frag;}
mca_btl_sm_frag_t* frag;
mca_btl_sm_frag_t* frag;
mca_btl_sm_frag_t
mca_btl_sm_frag_t
* frag
*
frag
int rc;
int rc;
int
rc
rc
if(size <= mca_btl_sm_component.eager_limit) {        MCA_BTL_SM_FRAG_ALLOC1(frag,rc);    } else if (size <= mca_btl_sm_component.max_frag_size) {        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);    } else {        return NULL;    }
size <= mca_btl_sm_component.eager_limit
size
size
mca_btl_sm_component.eager_limit
mca_btl_sm_component
mca_btl_sm_component
eager_limit
{        MCA_BTL_SM_FRAG_ALLOC1(frag,rc);    }
MCA_BTL_SM_FRAG_ALLOC1(frag,rc);
MCA_BTL_SM_FRAG_ALLOC1(frag,rc)
MCA_BTL_SM_FRAG_ALLOC1
MCA_BTL_SM_FRAG_ALLOC1
frag
frag
rc
rc
if (size <= mca_btl_sm_component.max_frag_size) {        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);    } else {        return NULL;    }
size <= mca_btl_sm_component.max_frag_size
size
size
mca_btl_sm_component.max_frag_size
mca_btl_sm_component
mca_btl_sm_component
max_frag_size
{        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);    }
MCA_BTL_SM_FRAG_ALLOC2(frag,rc);
MCA_BTL_SM_FRAG_ALLOC2(frag,rc)
MCA_BTL_SM_FRAG_ALLOC2
MCA_BTL_SM_FRAG_ALLOC2
frag
frag
rc
rc
{        return NULL;    }
return NULL;
NULL
NULL
if (frag != NULL) {        frag->segment.seg_len = size;    }
frag != NULL
frag
frag
NULL
NULL
{        frag->segment.seg_len = size;    }
frag->segment.seg_len = size;
frag->segment.seg_len = size
frag->segment.seg_len
frag->segment
frag
frag
segment
seg_len
size
size
return (mca_btl_base_descriptor_t*)frag;
(mca_btl_base_descriptor_t*)frag
mca_btl_base_descriptor_t*
mca_btl_base_descriptor_t
mca_btl_base_descriptor_t
*
*
frag
frag
-----joern-----
(7,40,0)
(18,6,0)
(1,16,0)
(14,37,0)
(35,22,0)
(33,9,0)
(4,33,0)
(41,42,0)
(15,40,0)
(19,30,0)
(16,42,0)
(25,9,0)
(33,21,0)
(13,35,0)
(32,35,0)
(36,29,0)
(37,5,0)
(18,16,0)
(16,4,0)
(2,42,0)
(34,25,0)
(25,0,0)
(17,4,0)
(7,9,0)
(24,42,0)
(23,12,0)
(30,4,0)
(39,30,0)
(0,25,0)
(27,0,0)
(8,40,0)
(28,42,0)
(11,33,0)
(6,18,0)
(26,18,0)
(10,0,0)
(3,37,0)
(1,36,0)
(38,7,0)
(4,30,0)
(40,7,0)
(31,36,0)
(20,12,0)
(25,0,1)
(23,20,1)
(16,4,1)
(3,14,1)
(38,25,1)
(27,10,1)
(32,7,1)
(33,9,1)
(8,15,1)
(25,9,1)
(37,3,1)
(31,7,1)
(40,8,1)
(7,40,1)
(14,25,1)
(0,27,1)
(26,33,1)
(33,11,1)
(4,17,1)
(35,13,1)
(39,12,1)
(12,23,1)
(19,39,1)
(16,18,1)
(18,6,1)
(36,31,1)
(18,26,1)
(20,37,1)
(13,32,1)
(30,19,1)
(26,12,1)
(17,30,1)
(1,16,1)
(7,9,1)
(1,36,1)
(4,30,1)
(10,34,1)
(11,4,1)
(15,38,1)
(20,35,1)
(7,9,2)
(17,12,2)
(35,7,2)
(26,7,2)
(20,7,2)
(16,4,2)
(12,25,2)
(8,25,2)
(16,7,2)
(33,9,2)
(18,7,2)
(1,16,2)
(19,12,2)
(18,6,2)
(31,7,2)
(39,12,2)
(7,25,2)
(3,25,2)
(25,9,2)
(38,25,2)
(16,25,2)
(23,25,2)
(4,12,2)
(7,40,2)
(36,7,2)
(11,12,2)
(20,25,2)
(40,25,2)
(12,7,2)
(13,7,2)
(37,25,2)
(1,36,2)
(14,25,2)
(33,12,2)
(32,7,2)
(15,25,2)
(4,30,2)
(30,12,2)
(26,25,2)
(18,25,2)
(23,7,2)
(25,0,2)
-----------------------------------
(0,mca_btl_sm_component.eager_limit)
(1,RET)
(2,if (frag != NULL)
(3,rc)
(4,frag->segment.seg_len)
(5,)
(6,mca_btl_base_descriptor_t*)
(7,size <= mca_btl_sm_component.max_frag_size)
(8,max_frag_size)
(9,size_t size)
(10,mca_btl_sm_component)
(11,size)
(12,frag != NULL)
(13,rc)
(14,frag)
(15,mca_btl_sm_component)
(16,return (mca_btl_base_descriptor_t*)
(17,seg_len)
(18,(mca_btl_base_descriptor_t*)
(19,segment)
(20,frag)
(21,)
(22,)
(23,NULL)
(24,frag)
(25,size <= mca_btl_sm_component.eager_limit)
(26,frag)
(27,eager_limit)
(28,if(size <= mca_btl_sm_component.eager_limit)
(29,)
(30,frag->segment)
(31,NULL)
(32,frag)
(33,frag->segment.seg_len = size)
(34,size)
(35,MCA_BTL_SM_FRAG_ALLOC2(frag,rc)
(36,return NULL;)
(37,MCA_BTL_SM_FRAG_ALLOC1(frag,rc)
(38,size)
(39,frag)
(40,mca_btl_sm_component.max_frag_size)
(41,rc)
(42,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^