-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(staticReturnsTrue())
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
44,45
44,46
44,47
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
53,58
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
66,67
66,68
67,68
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
88,89
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
-----nextToken-----
2,4,9,11,15,16,20,25,27,28,31,35,40,42,43,47,50,52,57,60,62,65,68,71,72,76,78,83,85,89,91,93,97,99,103,105,110,111
-----computeFrom-----
13,14
13,15
45,46
45,47
55,56
55,57
66,67
66,68
74,75
74,76
-----guardedBy-----
52,93
47,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(49,42,0)
(39,5,0)
(5,50,0)
(34,31,0)
(13,41,0)
(24,0,0)
(28,45,0)
(16,31,0)
(35,25,0)
(1,17,0)
(37,4,0)
(22,25,0)
(0,45,0)
(2,6,0)
(27,38,0)
(29,2,0)
(45,19,0)
(30,50,0)
(46,50,0)
(21,19,0)
(12,47,0)
(26,46,0)
(19,45,0)
(51,17,0)
(19,1,0)
(47,12,0)
(31,18,0)
(46,2,0)
(40,42,0)
(50,42,0)
(44,42,0)
(8,2,0)
(2,46,0)
(0,3,0)
(15,10,0)
(23,50,0)
(10,45,0)
(48,45,0)
(25,45,0)
(5,38,0)
(41,9,0)
(43,3,0)
(1,19,0)
(10,3,0)
(17,4,0)
(17,1,0)
(17,50,0)
(12,11,0)
(45,3,0)
(48,3,0)
(19,21,0)
(4,17,0)
(33,47,0)
(38,5,0)
(7,48,0)
(20,48,0)
(1,17,1)
(46,50,1)
(24,48,1)
(48,7,1)
(32,41,1)
(10,15,1)
(17,50,1)
(2,46,1)
(14,2,1)
(41,13,1)
(32,10,1)
(25,35,1)
(10,45,1)
(13,5,1)
(19,21,1)
(5,38,1)
(37,51,1)
(15,0,1)
(26,29,1)
(30,23,1)
(22,45,1)
(14,36,1)
(29,8,1)
(19,1,1)
(28,5,1)
(17,4,1)
(8,36,1)
(12,47,1)
(32,14,1)
(7,20,1)
(38,27,1)
(39,14,1)
(51,28,1)
(36,50,1)
(5,50,1)
(33,25,1)
(48,45,1)
(35,22,1)
(0,24,1)
(25,45,1)
(20,25,1)
(20,12,1)
(46,26,1)
(45,19,1)
(27,39,1)
(4,37,1)
(0,45,1)
(47,33,1)
(50,30,1)
(46,36,2)
(48,5,2)
(12,47,2)
(17,5,2)
(26,36,2)
(12,25,2)
(4,5,2)
(29,36,2)
(45,19,2)
(5,14,2)
(8,36,2)
(48,45,2)
(17,50,2)
(46,50,2)
(47,25,2)
(0,45,2)
(38,14,2)
(51,5,2)
(25,5,2)
(27,14,2)
(1,17,2)
(5,38,2)
(1,5,2)
(0,5,2)
(37,5,2)
(25,45,2)
(7,5,2)
(39,14,2)
(22,5,2)
(2,46,2)
(19,5,2)
(24,5,2)
(10,45,2)
(17,4,2)
(20,5,2)
(19,21,2)
(28,5,2)
(41,5,2)
(19,1,2)
(15,5,2)
(2,36,2)
(10,5,2)
(5,50,2)
(33,25,2)
(45,5,2)
(13,5,2)
(35,5,2)
-----------------------------------
(0,printLine(myString)
(1,malloc(data*sizeof(char)
(2,fscanf(stdin, "%zu", &data)
(3,)
(4,sizeof(char)
(5,data > strlen(HELLO_STRING)
(6,)
(7,HELLO_STRING)
(8,stdin)
(9,)
(10,free(myString)
(11,)
(12,exit(-1)
(13,"Input is less than the length of the source string")
(14,staticReturnsTrue()
(15,myString)
(16,if (data > strlen(HELLO_STRING)
(17,data*sizeof(char)
(18,)
(19,(char *)
(20,myString)
(21,char *)
(22,myString)
(23,data)
(24,myString)
(25,myString == NULL)
(26,data)
(27,HELLO_STRING)
(28,myString)
(29,"%zu")
(30,0)
(31,)
(32,RET)
(33,1)
(34,myString)
(35,NULL)
(36,staticReturnsTrue()
(37,char)
(38,strlen(HELLO_STRING)
(39,data)
(40,if(staticReturnsTrue()
(41,printLine("Input is less than the length of the source string")
(42,)
(43,if (myString == NULL)
(44,if(staticReturnsTrue()
(45,myString = (char *)
(46,&data)
(47,-1)
(48,strcpy(myString, HELLO_STRING)
(49,data)
(50,data = 0)
(51,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^