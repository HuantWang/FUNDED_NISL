-----label-----
0
-----code-----
static void goodB2G()
{
    int * data;
    int * *dataPtr1 = &data;
    int * *dataPtr2 = &data;
    data = NULL;
    {
        int * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        *dataPtr1 = data;
    }
    {
        int * data = *dataPtr2;
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
63,64
65,66
65,67
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
86,88
87,88
91,92
92,93
92,94
93,94
95,96
95,97
96,97
99,100
100,101
100,102
101,102
102,103
104,105
106,107
106,108
107,108
108,109
108,110
110,111
110,112
110,113
113,114
114,115
115,116
117,118
118,119
118,120
119,120
121,122
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,66,69,70,74,76,81,83,88,89,90,94,97,98,103,105,109,111,112,116,120,122
-----computeFrom-----
35,36
35,37
52,53
52,54
65,66
65,67
72,73
72,74
85,86
85,87
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
int * *dataPtr1 = &data;
int * *dataPtr1 = &data;
int
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int * *dataPtr2 = &data;
int * *dataPtr2 = &data;
int
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }
int * data = *dataPtr1;
int * data = *dataPtr1;
int
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int * data = *dataPtr2;        /* FIX: Deallocate memory */        free(data);    }
int * data = *dataPtr2;
int * data = *dataPtr2;
int
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
free(data);
free(data)
free
free
data
data
-----joern-----
(58,10,0)
(10,58,0)
(37,10,0)
(6,54,0)
(36,0,0)
(43,6,0)
(34,48,0)
(53,58,0)
(21,26,0)
(5,3,0)
(38,39,0)
(29,39,0)
(4,48,0)
(31,3,0)
(26,10,0)
(38,46,0)
(28,36,0)
(22,42,0)
(18,12,0)
(10,39,0)
(17,30,0)
(58,45,0)
(35,39,0)
(11,51,0)
(30,56,0)
(14,46,0)
(32,38,0)
(51,53,0)
(20,39,0)
(40,51,0)
(25,13,0)
(57,20,0)
(16,44,0)
(50,26,0)
(41,22,0)
(52,53,0)
(30,54,0)
(49,12,0)
(16,59,0)
(59,13,0)
(2,16,0)
(53,51,0)
(23,3,0)
(58,53,0)
(46,59,0)
(12,20,0)
(1,59,0)
(56,0,0)
(42,22,0)
(7,54,0)
(0,3,0)
(9,44,0)
(56,30,0)
(46,38,0)
(13,59,0)
(39,3,0)
(49,39,0)
(33,40,0)
(45,58,0)
(42,55,0)
(47,12,0)
(48,10,0)
(48,20,0)
(44,39,0)
(59,3,0)
(8,0,0)
(6,30,0)
(12,49,0)
(54,3,0)
(27,56,0)
(44,10,0)
(53,38,0)
(12,10,0)
(15,3,0)
(51,40,0)
(60,15,0)
(19,15,0)
(0,36,0)
(4,42,1)
(32,15,1)
(2,49,1)
(9,16,1)
(8,59,1)
(59,13,1)
(24,6,1)
(12,20,1)
(57,48,1)
(36,28,1)
(30,56,1)
(27,17,1)
(53,51,1)
(50,10,1)
(44,9,1)
(26,10,1)
(6,30,1)
(49,12,1)
(43,30,1)
(26,21,1)
(11,52,1)
(14,32,1)
(16,2,1)
(52,37,1)
(58,53,1)
(47,20,1)
(16,59,1)
(0,36,1)
(42,22,1)
(46,59,1)
(13,25,1)
(25,1,1)
(56,0,1)
(33,11,1)
(51,40,1)
(34,4,1)
(48,10,1)
(12,18,1)
(15,60,1)
(19,0,1)
(46,14,1)
(40,33,1)
(22,41,1)
(17,44,1)
(53,38,1)
(18,47,1)
(4,26,1)
(6,43,1)
(10,58,1)
(56,27,1)
(37,38,1)
(20,57,1)
(28,8,1)
(21,50,1)
(38,46,1)
(58,45,1)
(60,19,1)
(48,34,1)
(12,10,1)
(44,10,1)
(41,26,1)
(58,45,2)
(42,22,2)
(58,53,2)
(12,10,2)
(41,26,2)
(12,20,2)
(26,10,2)
(22,26,2)
(53,51,2)
(30,56,2)
(59,13,2)
(48,10,2)
(56,0,2)
(42,26,2)
(46,59,2)
(10,58,2)
(38,46,2)
(49,12,2)
(0,36,2)
(44,10,2)
(16,59,2)
(53,38,2)
(51,40,2)
(6,30,2)
-----------------------------------
(0,* *dataPtr2 = &data)
(1,dataPtr1)
(2,dataPtr1)
(3,)
(4,data)
(5,dataPtr2)
(6,free(data)
(7,data)
(8,dataPtr2)
(9,data)
(10,data = (int *)
(11,100)
(12,data[0])
(13,&data)
(14,dataPtr1)
(15,data = NULL)
(16,*dataPtr1)
(17,data)
(18,0)
(19,data)
(20,data[0] = 5)
(21,NULL)
(22,-1)
(23,dataPtr1)
(24,RET)
(25,data)
(26,data == NULL)
(27,dataPtr2)
(28,data)
(29,if (data == NULL)
(30,* data = *dataPtr2)
(31,data)
(32,data)
(33,int)
(34,0)
(35,data)
(36,&data)
(37,data)
(38,* data = *dataPtr1)
(39,)
(40,sizeof(int)
(41,1)
(42,exit(-1)
(43,data)
(44,*dataPtr1 = data)
(45,int *)
(46,*dataPtr1)
(47,data)
(48,data[0])
(49,printIntLine(data[0])
(50,data)
(51,100*sizeof(int)
(52,data)
(53,realloc(data, 100*sizeof(int)
(54,)
(55,)
(56,*dataPtr2)
(57,5)
(58,(int *)
(59,* *dataPtr1 = &data)
(60,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^