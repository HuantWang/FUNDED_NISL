-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_12_bad()
{
    int * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
71,74
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
79,80
81,82
81,83
82,83
84,85
84,86
86,87
87,88
87,89
90,91
91,92
91,93
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
101,103
102,103
105,106
105,107
105,108
106,107
107,108
109,110
111,112
112,113
113,114
113,115
114,115
116,117
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,60,61,62,66,69,70,75,78,80,83,85,88,89,94,95,96,100,103,104,108,110,115,117
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
57,58
57,59
73,74
73,75
84,85
84,86
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_12_bad(){    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__int_realloc_12_bad()
CWE401_Memory_Leak__int_realloc_12_bad
{    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(4,40,0)
(5,13,0)
(11,58,0)
(26,27,0)
(45,14,0)
(57,3,0)
(42,32,0)
(7,35,0)
(13,33,0)
(14,47,0)
(12,54,0)
(2,3,0)
(19,58,0)
(33,23,0)
(38,59,0)
(14,45,0)
(0,21,0)
(24,13,0)
(11,53,0)
(5,29,0)
(13,24,0)
(12,33,0)
(18,45,0)
(55,40,0)
(47,14,0)
(34,29,0)
(19,53,0)
(53,32,0)
(37,11,0)
(6,21,0)
(52,19,0)
(39,3,0)
(28,58,0)
(27,26,0)
(22,12,0)
(40,54,0)
(48,54,0)
(56,11,0)
(28,33,0)
(40,55,0)
(40,33,0)
(5,59,0)
(50,33,0)
(17,14,0)
(10,58,0)
(58,32,0)
(29,34,0)
(33,13,0)
(44,19,0)
(13,5,0)
(46,29,0)
(6,43,0)
(20,53,0)
(19,42,0)
(9,34,0)
(8,59,0)
(1,28,0)
(55,23,0)
(25,40,0)
(42,19,0)
(28,16,0)
(49,35,0)
(31,5,0)
(47,27,0)
(59,3,0)
(27,47,0)
(58,27,0)
(29,5,0)
(54,23,0)
(27,58,0)
(36,23,0)
(21,6,0)
(30,12,0)
(35,33,0)
(14,45,1)
(53,20,1)
(11,58,1)
(56,58,1)
(42,19,1)
(30,6,1)
(1,15,1)
(8,38,1)
(59,8,1)
(28,33,1)
(19,58,1)
(13,24,1)
(19,44,1)
(27,47,1)
(10,41,1)
(40,25,1)
(5,59,1)
(44,52,1)
(41,59,1)
(30,35,1)
(9,46,1)
(15,55,1)
(37,56,1)
(35,33,1)
(21,0,1)
(49,7,1)
(25,4,1)
(20,11,1)
(19,53,1)
(47,14,1)
(40,54,1)
(4,54,1)
(27,26,1)
(33,13,1)
(48,12,1)
(55,40,1)
(0,35,1)
(17,10,1)
(5,29,1)
(12,33,1)
(51,28,1)
(52,53,1)
(50,41,1)
(46,31,1)
(35,49,1)
(13,5,1)
(31,50,1)
(22,30,1)
(7,33,1)
(6,21,1)
(54,48,1)
(45,18,1)
(15,42,1)
(34,9,1)
(28,58,1)
(18,17,1)
(12,22,1)
(40,33,1)
(29,34,1)
(58,27,1)
(51,15,1)
(11,37,1)
(28,1,1)
(42,41,2)
(35,33,2)
(14,41,2)
(9,41,2)
(40,54,2)
(50,41,2)
(12,41,2)
(37,41,2)
(22,41,2)
(1,15,2)
(13,24,2)
(10,41,2)
(53,41,2)
(46,41,2)
(25,41,2)
(7,41,2)
(29,41,2)
(12,33,2)
(47,41,2)
(35,41,2)
(48,41,2)
(28,33,2)
(55,40,2)
(47,14,2)
(28,58,2)
(54,41,2)
(52,41,2)
(18,41,2)
(6,21,2)
(49,41,2)
(44,41,2)
(21,35,2)
(19,53,2)
(34,41,2)
(0,35,2)
(40,33,2)
(29,34,2)
(27,26,2)
(4,41,2)
(17,41,2)
(19,58,2)
(28,15,2)
(5,41,2)
(30,41,2)
(27,47,2)
(27,41,2)
(5,59,2)
(13,5,2)
(40,41,2)
(55,41,2)
(19,41,2)
(6,35,2)
(58,41,2)
(5,29,2)
(13,41,2)
(58,27,2)
(31,41,2)
(33,41,2)
(33,13,2)
(45,41,2)
(42,19,2)
(11,41,2)
(14,45,2)
(56,41,2)
(11,58,2)
(20,41,2)
-----------------------------------
(0,1)
(1,data)
(2,data)
(3,)
(4,data)
(5,realloc(data, 100*sizeof(int)
(6,exit(-1)
(7,data)
(8,NULL)
(9,int)
(10,data)
(11,data[0])
(12,data[0])
(13,(int *)
(14,100*sizeof(int)
(15,globalReturnsTrueOrFalse()
(16,)
(17,100)
(18,int)
(19,data[0])
(20,5)
(21,-1)
(22,0)
(23,)
(24,int *)
(25,0)
(26,int *)
(27,(int *)
(28,free(data)
(29,100*sizeof(int)
(30,data)
(31,data)
(32,)
(33,data = (int *)
(34,sizeof(int)
(35,data == NULL)
(36,if (data == NULL)
(37,0)
(38,data)
(39,if(globalReturnsTrueOrFalse()
(40,data[0])
(41,globalReturnsTrueOrFalse()
(42,printIntLine(data[0])
(43,)
(44,0)
(45,sizeof(int)
(46,100)
(47,ALLOCA(100*sizeof(int)
(48,5)
(49,NULL)
(50,data)
(51,RET)
(52,data)
(53,data[0] = 5)
(54,data[0] = 5)
(55,printIntLine(data[0])
(56,data)
(57,if(globalReturnsTrueOrFalse()
(58,data = (int *)
(59,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^