-----label-----
0
-----code-----
static void goodB2G1()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
86,87
86,88
86,89
87,88
88,89
90,91
91,92
92,93
92,94
93,94
96,97
97,98
98,99
98,100
99,100
101,102
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,85,89,94,95,100,102
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(6,19,0)
(25,46,0)
(31,42,0)
(5,20,0)
(36,17,0)
(27,29,0)
(19,6,0)
(50,42,0)
(42,31,0)
(22,21,0)
(35,52,0)
(48,24,0)
(29,12,0)
(38,50,0)
(12,36,0)
(31,20,0)
(46,3,0)
(21,11,0)
(47,24,0)
(6,26,0)
(11,3,0)
(12,29,0)
(3,20,0)
(39,50,0)
(28,0,0)
(50,3,0)
(36,3,0)
(3,36,0)
(4,24,0)
(34,47,0)
(17,36,0)
(43,46,0)
(9,53,0)
(32,11,0)
(10,30,0)
(1,40,0)
(53,20,0)
(29,27,0)
(52,20,0)
(44,10,0)
(11,21,0)
(0,49,0)
(33,11,0)
(49,0,0)
(10,47,0)
(21,53,0)
(7,24,0)
(12,47,0)
(36,12,0)
(10,3,0)
(42,50,0)
(2,3,0)
(37,29,0)
(13,47,0)
(40,15,0)
(16,19,0)
(41,27,0)
(0,3,0)
(23,0,0)
(51,49,0)
(49,52,0)
(8,12,0)
(46,43,1)
(11,32,1)
(49,0,1)
(46,3,1)
(36,17,1)
(12,47,1)
(44,45,1)
(39,38,1)
(10,44,1)
(6,19,1)
(14,40,1)
(2,18,1)
(23,28,1)
(9,21,1)
(14,10,1)
(25,3,1)
(10,3,1)
(51,0,1)
(45,31,1)
(10,47,1)
(47,13,1)
(22,11,1)
(33,52,1)
(49,51,1)
(13,34,1)
(12,29,1)
(31,42,1)
(52,35,1)
(19,16,1)
(43,25,1)
(27,41,1)
(50,39,1)
(28,6,1)
(29,27,1)
(1,45,1)
(3,36,1)
(0,3,1)
(21,22,1)
(21,11,1)
(50,3,1)
(53,9,1)
(45,18,1)
(37,8,1)
(42,50,1)
(11,3,1)
(8,2,1)
(18,47,1)
(41,37,1)
(40,1,1)
(28,46,1)
(35,49,1)
(32,33,1)
(16,46,1)
(38,53,1)
(36,12,1)
(0,23,1)
(10,45,2)
(0,3,2)
(12,29,2)
(31,18,2)
(38,18,2)
(41,18,2)
(33,18,2)
(25,18,2)
(1,45,2)
(50,3,2)
(6,46,2)
(6,19,2)
(51,18,2)
(21,18,2)
(36,18,2)
(11,3,2)
(9,18,2)
(12,47,2)
(3,36,2)
(46,3,2)
(10,47,2)
(23,18,2)
(36,12,2)
(42,18,2)
(39,18,2)
(53,18,2)
(49,18,2)
(12,18,2)
(44,45,2)
(49,0,2)
(21,11,2)
(19,46,2)
(36,17,2)
(40,45,2)
(10,3,2)
(32,18,2)
(29,27,2)
(0,18,2)
(11,18,2)
(43,18,2)
(50,18,2)
(2,18,2)
(29,18,2)
(27,18,2)
(22,18,2)
(31,42,2)
(3,18,2)
(37,18,2)
(16,46,2)
(42,50,2)
(8,18,2)
(52,18,2)
(46,18,2)
(35,18,2)
(28,18,2)
-----------------------------------
(0,data[0])
(1,"Benign, fixed string")
(2,data)
(3,data = (twoIntsStruct *)
(4,if(globalReturnsFalse()
(5,if (data == NULL)
(6,exit(-1)
(7,if(globalReturnsTrue()
(8,data)
(9,0)
(10,free(data)
(11,data[0])
(12,realloc(data, 100*sizeof(twoIntsStruct)
(13,NULL)
(14,RET)
(15,)
(16,1)
(17,twoIntsStruct *)
(18,globalReturnsTrue()
(19,-1)
(20,)
(21,data[0].intTwo)
(22,intTwo)
(23,0)
(24,)
(25,data)
(26,)
(27,sizeof(twoIntsStruct)
(28,data)
(29,100*sizeof(twoIntsStruct)
(30,)
(31,printStructLine(&data[0])
(32,0)
(33,data)
(34,data)
(35,0)
(36,(twoIntsStruct *)
(37,100)
(38,data)
(39,0)
(40,printLine("Benign, fixed string")
(41,twoIntsStruct)
(42,&data[0])
(43,NULL)
(44,data)
(45,globalReturnsFalse()
(46,data == NULL)
(47,data = NULL)
(48,data)
(49,data[0].intOne)
(50,data[0])
(51,intOne)
(52,data[0].intOne = 0)
(53,data[0].intTwo = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^