-----label-----
0
-----code-----
static void goodG2B()
{
    struct _twoIntsStruct * data;
    CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType myUnion;
    data = NULL;
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine((twoIntsStruct *)&data[0]);
    myUnion.unionFirst = data;
    {
        struct _twoIntsStruct * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
47,49
48,49
48,50
49,50
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
84,85
86,87
86,88
87,88
88,89
88,90
89,90
91,92
91,93
91,94
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,9,11,12,16,18,22,24,28,32,34,37,39,43,44,50,51,52,53,59,60,61,62,66,70,72,76,77,82,83,85,90,92,93,97,98,99
-----computeFrom-----
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
55,56
55,57
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    struct _twoIntsStruct * data;    CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType myUnion;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    myUnion.unionFirst = data;    {        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    struct _twoIntsStruct * data;    CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType myUnion;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    myUnion.unionFirst = data;    {        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType myUnion;
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType myUnion;
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
struct _twoIntsStruct * data = myUnion.unionSecond;
struct _twoIntsStruct * data = myUnion.unionSecond;
struct _twoIntsStruct
_twoIntsStruct
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(21,3,0)
(13,11,0)
(21,32,0)
(6,33,0)
(47,22,0)
(29,16,0)
(45,5,0)
(18,7,0)
(39,5,0)
(3,46,0)
(32,21,0)
(0,36,0)
(32,31,0)
(20,21,0)
(33,38,0)
(0,4,0)
(7,5,0)
(46,38,0)
(1,46,0)
(15,13,0)
(34,27,0)
(39,38,0)
(30,42,0)
(35,5,0)
(25,24,0)
(11,13,0)
(14,0,0)
(2,27,0)
(4,0,0)
(27,5,0)
(28,5,0)
(22,39,0)
(16,42,0)
(13,38,0)
(48,28,0)
(16,33,0)
(46,1,0)
(44,4,0)
(42,5,0)
(19,18,0)
(43,48,0)
(33,16,0)
(24,18,0)
(48,11,0)
(36,5,0)
(46,3,0)
(41,38,0)
(23,36,0)
(10,7,0)
(38,5,0)
(11,48,0)
(38,46,0)
(3,21,0)
(28,48,0)
(24,38,0)
(17,22,0)
(26,33,0)
(31,32,0)
(12,24,0)
(8,13,0)
(37,4,0)
(48,43,0)
(9,39,0)
(18,24,0)
(3,21,1)
(39,38,1)
(25,38,1)
(32,20,1)
(8,42,1)
(47,28,1)
(48,11,1)
(18,24,1)
(40,0,1)
(13,15,1)
(21,32,1)
(6,26,1)
(14,39,1)
(11,13,1)
(42,30,1)
(24,12,1)
(41,27,1)
(7,10,1)
(12,25,1)
(15,8,1)
(48,43,1)
(33,6,1)
(0,4,1)
(27,2,1)
(30,16,1)
(26,7,1)
(22,17,1)
(38,46,1)
(46,1,1)
(28,48,1)
(4,37,1)
(16,33,1)
(44,14,1)
(39,9,1)
(20,41,1)
(16,29,1)
(10,18,1)
(46,3,1)
(19,24,1)
(33,38,1)
(2,34,1)
(18,19,1)
(24,38,1)
(17,47,1)
(9,22,1)
(29,33,1)
(32,31,1)
(37,44,1)
(13,38,1)
(28,48,2)
(32,31,2)
(13,38,2)
(33,38,2)
(24,38,2)
(48,43,2)
(39,38,2)
(16,33,2)
(11,13,2)
(3,21,2)
(46,3,2)
(48,11,2)
(18,24,2)
(0,4,2)
(21,32,2)
(46,1,2)
(38,46,2)
-----------------------------------
(0,* data = myUnion.unionSecond)
(1,struct _twoIntsStruct *)
(2,NULL)
(3,ALLOCA(100*sizeof(struct _twoIntsStruct)
(4,myUnion.unionSecond)
(5,)
(6,0)
(7,data[0].intOne = 0)
(8,data)
(9,data)
(10,0)
(11,&data[0])
(12,0)
(13,data[0])
(14,data)
(15,0)
(16,data[0].intTwo)
(17,unionFirst)
(18,data[0].intOne)
(19,intOne)
(20,100)
(21,100*sizeof(struct _twoIntsStruct)
(22,myUnion.unionFirst)
(23,data)
(24,data[0])
(25,data)
(26,data)
(27,data = NULL)
(28,printStructLine((twoIntsStruct *)
(29,intTwo)
(30,0)
(31,struct _twoIntsStruct)
(32,sizeof(struct _twoIntsStruct)
(33,data[0])
(34,data)
(35,myUnion)
(36,)
(37,unionSecond)
(38,data = (struct _twoIntsStruct *)
(39,myUnion.unionFirst = data)
(40,RET)
(41,data)
(42,data[0].intTwo = 0)
(43,twoIntsStruct *)
(44,myUnion)
(45,data)
(46,(struct _twoIntsStruct *)
(47,myUnion)
(48,(twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^