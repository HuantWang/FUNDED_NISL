-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* FIX: Use a relatively small number */
        count = 20;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
37,44
38,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
53,54
54,55
54,56
55,56
-----nextToken-----
2,4,8,10,14,16,18,21,25,26,27,28,32,33,34,36,39,43,45,49,50,51,52,56,57,58
-----computeFrom-----
12,13
12,14
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
count = 20;
count = 20
count
count
20
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(19,15,0)
(18,27,0)
(17,9,0)
(24,9,0)
(27,28,0)
(16,9,0)
(21,23,0)
(30,15,0)
(18,9,0)
(1,23,0)
(29,25,0)
(23,15,0)
(4,15,0)
(0,17,0)
(7,15,0)
(6,9,0)
(13,15,0)
(14,25,0)
(12,28,0)
(31,18,0)
(5,9,0)
(20,27,0)
(27,25,0)
(28,27,0)
(22,5,0)
(2,9,0)
(8,13,0)
(11,25,0)
(18,23,0)
(18,27,1)
(28,12,1)
(19,23,1)
(8,3,1)
(0,18,1)
(27,28,1)
(12,20,1)
(21,3,1)
(24,5,1)
(18,23,1)
(26,7,1)
(3,27,1)
(10,6,1)
(18,31,1)
(17,0,1)
(7,13,1)
(10,24,1)
(22,26,1)
(13,8,1)
(5,22,1)
(31,26,1)
(1,21,1)
(23,1,1)
(6,17,1)
(26,19,1)
(7,3,2)
(22,26,2)
(18,27,2)
(21,3,2)
(31,26,2)
(17,26,2)
(13,3,2)
(1,3,2)
(18,23,2)
(0,26,2)
(23,3,2)
(18,26,2)
(6,26,2)
(27,28,2)
(24,26,2)
(8,3,2)
(19,3,2)
(5,26,2)
-----------------------------------
(0,"Sleep time possibly too long")
(1,20)
(2,case 7:)
(3,6)
(4,case 6:)
(5,printLine("Benign, fixed string")
(6,break;)
(7,break;)
(8,"Benign, fixed string")
(9,)
(10,RET)
(11,switch(7)
(12,1)
(13,printLine("Benign, fixed string")
(14,count)
(15,)
(16,default:)
(17,printLine("Sleep time possibly too long")
(18,SLEEP(count)
(19,break;)
(20,count)
(21,count)
(22,"Benign, fixed string")
(23,count = 20)
(24,break;)
(25,)
(26,7)
(27,count = -1)
(28,-1)
(29,switch(6)
(30,default:)
(31,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^