-----label-----
0
-----code-----
static void goodG2B()
{
    int h,j;
    int count;
    /* Initialize count */
    count = -1;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    for(j = 0; j < 1; j++)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
59,61
60,61
62,63
62,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
72,73
72,74
73,74
75,76
75,77
76,77
76,78
77,78
80,81
82,83
83,84
85,86
86,87
87,88
87,89
88,89
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,42,47,48,51,52,55,61,63,65,70,71,74,78,79,81,84,89,90
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
39,40
39,41
45,46
45,47
49,50
49,51
68,69
68,70
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int h,j;    int count;    /* Initialize count */    count = -1;    for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B()
goodG2B
{    int h,j;    int count;    /* Initialize count */    count = -1;    for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int h,j;
int h,j;
int
h
h
j
j
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
for(j = 0; j < 1; j++)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(15,28,0)
(3,13,0)
(23,42,0)
(7,2,0)
(39,19,0)
(32,7,0)
(35,42,0)
(9,47,0)
(7,36,0)
(6,28,0)
(17,19,0)
(40,44,0)
(5,36,0)
(49,39,0)
(7,44,0)
(30,42,0)
(10,47,0)
(41,4,0)
(27,16,0)
(45,42,0)
(36,7,0)
(2,7,0)
(4,21,0)
(28,24,0)
(12,47,0)
(44,40,0)
(37,44,0)
(50,16,0)
(48,10,0)
(0,4,0)
(11,47,0)
(22,27,0)
(20,16,0)
(25,21,0)
(21,31,0)
(44,42,0)
(1,19,0)
(18,16,0)
(8,40,0)
(38,18,0)
(36,19,0)
(33,10,0)
(29,18,0)
(14,12,0)
(7,28,0)
(43,21,0)
(46,42,0)
(34,3,0)
(19,17,1)
(0,10,1)
(7,32,1)
(41,0,1)
(27,22,1)
(4,41,1)
(44,40,1)
(17,1,1)
(11,18,1)
(5,19,1)
(15,18,1)
(7,2,1)
(8,37,1)
(33,48,1)
(39,19,1)
(7,28,1)
(18,29,1)
(32,5,1)
(6,15,1)
(36,7,1)
(1,4,1)
(50,44,1)
(5,39,1)
(48,47,1)
(20,50,1)
(7,44,1)
(34,36,1)
(36,19,1)
(49,3,1)
(18,16,1)
(29,38,1)
(47,9,1)
(3,34,1)
(40,8,1)
(27,16,1)
(48,12,1)
(38,27,1)
(39,49,1)
(10,47,1)
(12,14,1)
(9,11,1)
(16,20,1)
(26,10,1)
(10,33,1)
(38,16,1)
(28,6,1)
(22,28,1)
(14,36,1)
(12,47,1)
(38,18,2)
(1,10,2)
(39,36,2)
(3,36,2)
(28,18,2)
(18,16,2)
(27,18,2)
(5,36,2)
(7,28,2)
(19,10,2)
(36,10,2)
(7,44,2)
(33,10,2)
(27,16,2)
(17,10,2)
(10,10,2)
(44,40,2)
(12,47,2)
(0,10,2)
(22,18,2)
(12,10,2)
(15,18,2)
(18,18,2)
(36,19,2)
(7,36,2)
(39,19,2)
(14,10,2)
(6,18,2)
(10,47,2)
(7,10,2)
(36,7,2)
(7,2,2)
(36,36,2)
(49,36,2)
(41,10,2)
(32,10,2)
(29,18,2)
(48,10,2)
(32,36,2)
(5,10,2)
(4,10,2)
(34,36,2)
-----------------------------------
(0,i)
(1,i)
(2,size_t)
(3,printLine("Hello")
(4,i = 0)
(5,i)
(6,20)
(7,(size_t)
(8,1)
(9,0)
(10,j < 1)
(11,j)
(12,j++)
(13,)
(14,j)
(15,count)
(16,h = 0)
(17,0)
(18,h < 1)
(19,i = 0)
(20,0)
(21,)
(22,h)
(23,j)
(24,)
(25,for (i = 0; i < (size_t)
(26,RET)
(27,h++)
(28,count = 20)
(29,1)
(30,for(h = 0; h < 1; h++)
(31,)
(32,count)
(33,1)
(34,"Hello")
(35,h)
(36,i < (size_t)
(37,count)
(38,h)
(39,i++)
(40,-1)
(41,0)
(42,)
(43,i)
(44,count = -1)
(45,count)
(46,for(j = 0; j < 1; j++)
(47,j = 0)
(48,j)
(49,i)
(50,h)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^