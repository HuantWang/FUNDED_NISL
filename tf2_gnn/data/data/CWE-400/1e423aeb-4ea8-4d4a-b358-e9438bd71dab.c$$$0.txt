-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
29,31
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
-----nextToken-----
2,4,8,10,14,16,19,24,25,28,33,35,39,40
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(6,19,0)
(6,5,0)
(13,15,0)
(16,19,0)
(13,18,0)
(11,18,0)
(12,15,0)
(8,5,0)
(13,6,0)
(2,13,0)
(15,3,0)
(1,5,0)
(4,11,0)
(7,6,0)
(19,6,0)
(14,15,0)
(0,5,0)
(11,4,1)
(13,6,1)
(10,15,1)
(13,15,1)
(16,7,1)
(6,19,1)
(2,10,1)
(15,14,1)
(9,11,1)
(12,17,1)
(17,6,1)
(14,12,1)
(9,10,1)
(19,16,1)
(4,13,1)
(10,17,1)
(13,2,1)
(13,15,2)
(4,10,2)
(13,10,2)
(2,10,2)
(12,17,2)
(15,17,2)
(14,17,2)
(11,10,2)
(6,19,2)
(13,6,2)
-----------------------------------
(0,count)
(1,if(GLOBAL_CONST_TRUE)
(2,count)
(3,)
(4,"Sleep time possibly too long")
(5,)
(6,count = -1)
(7,count)
(8,if(GLOBAL_CONST_TRUE)
(9,RET)
(10,GLOBAL_CONST_TRUE)
(11,printLine("Sleep time possibly too long")
(12,count)
(13,SLEEP(count)
(14,20)
(15,count = 20)
(16,1)
(17,GLOBAL_CONST_TRUE)
(18,)
(19,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^