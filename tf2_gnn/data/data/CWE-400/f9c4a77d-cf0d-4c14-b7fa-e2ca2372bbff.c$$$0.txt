-----label-----
0
-----code-----
static int connection_feed_sasl(Connection *connection, const char *input, size_t n_input) {
        const char *output;
        size_t n_output;
        int r;

        assert(!connection->authenticated);

        if (connection->server) {
                r = sasl_server_dispatch(&connection->sasl.server, input, n_input, &output, &n_output);
                if (r > 0) {
                        connection_close(connection);
                        return CONNECTION_E_RESET;
                } else if (r < 0) {
                        return error_fold(r);
                }

                connection->authenticated = sasl_server_is_done(&connection->sasl.server);
        } else {
                r = sasl_client_dispatch(&connection->sasl.client, input, n_input, &output, &n_output);
                if (r > 0) {
                        connection_close(connection);
                        return CONNECTION_E_RESET;
                } else if (r < 0) {
                        return error_fold(r);
                }

                connection->authenticated = sasl_client_is_done(&connection->sasl.client);
        }

        if (output) {
                r = socket_queue_line(&connection->socket, NULL, output, n_output);
                if (r)
                        return error_fold(r);

                dispatch_file_select(&connection->socket_file, EPOLLOUT);
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
17,18
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
22,23
23,24
23,25
25,26
25,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
37,38
39,40
40,41
40,42
41,42
43,44
44,45
44,46
45,46
48,49
48,50
48,51
49,50
49,51
50,51
53,54
53,55
53,56
54,55
55,56
55,57
56,57
58,59
58,60
58,61
58,62
58,63
58,64
59,60
61,62
62,63
62,64
63,64
63,65
64,65
68,69
70,71
72,73
73,74
75,76
76,77
78,79
78,80
78,81
79,80
79,81
80,81
83,84
83,85
84,85
85,86
85,87
86,87
88,89
90,91
91,92
93,94
93,95
94,95
94,96
95,96
98,99
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
114,115
115,116
115,117
116,117
116,118
117,118
121,122
121,123
121,124
122,123
123,124
123,125
124,125
126,127
126,128
126,129
126,130
126,131
126,132
127,128
129,130
130,131
130,132
131,132
131,133
132,133
136,137
138,139
140,141
141,142
143,144
144,145
146,147
146,148
146,149
147,148
147,149
148,149
151,152
151,153
152,153
153,154
153,155
154,155
156,157
158,159
159,160
161,162
161,163
162,163
162,164
163,164
166,167
167,168
168,169
168,170
169,170
171,172
173,174
174,175
174,176
175,176
175,177
176,177
179,180
179,181
180,181
182,183
183,184
183,185
184,185
184,186
185,186
189,190
189,191
190,191
192,193
192,194
192,195
193,194
194,195
194,196
195,196
197,198
197,199
197,200
197,201
197,202
198,199
200,201
201,202
201,203
202,203
205,206
207,208
209,210
211,212
211,213
212,213
214,215
215,216
215,217
216,217
218,219
220,221
221,222
221,223
221,224
222,223
224,225
225,226
225,227
226,227
229,230
231,232
-----nextToken-----
2,4,7,9,10,12,14,15,18,20,24,26,27,31,33,36,38,42,46,47,51,52,57,60,65,66,67,69,71,74,77,81,82,87,89,92,96,97,102,104,109,110,113,118,119,120,125,128,133,134,135,137,139,142,145,149,150,155,157,160,164,165,170,172,177,178,181,186,187,188,191,196,199,203,204,206,208,210,213,217,219,223,227,228,230,232
-----computeFrom-----
55,56
55,57
79,80
79,81
94,95
94,96
106,107
106,108
123,124
123,125
147,148
147,149
162,163
162,164
174,175
174,176
194,195
194,196
-----guardedBy-----
96,104
164,172
-----guardedByNegation-----
81,104
149,172
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int connection_feed_sasl(Connection *connection, const char *input, size_t n_input) {        const char *output;        size_t n_output;        int r;        assert(!connection->authenticated);        if (connection->server) {                r = sasl_server_dispatch(&connection->sasl.server, input, n_input, &output, &n_output);                if (r > 0) {                        connection_close(connection);                        return CONNECTION_E_RESET;                } else if (r < 0) {                        return error_fold(r);                }                connection->authenticated = sasl_server_is_done(&connection->sasl.server);        } else {                r = sasl_client_dispatch(&connection->sasl.client, input, n_input, &output, &n_output);                if (r > 0) {                        connection_close(connection);                        return CONNECTION_E_RESET;                } else if (r < 0) {                        return error_fold(r);                }                connection->authenticated = sasl_client_is_done(&connection->sasl.client);        }        if (output) {                r = socket_queue_line(&connection->socket, NULL, output, n_output);                if (r)                        return error_fold(r);                dispatch_file_select(&connection->socket_file, EPOLLOUT);        }        return 0;}
static int
connection_feed_sasl(Connection *connection, const char *input, size_t n_input)
connection_feed_sasl
Connection *connection
Connection
Connection
*connection
*
connection
const char *input
const char
*input
*
input
size_t n_input
size_t
size_t
n_input
n_input
{        const char *output;        size_t n_output;        int r;        assert(!connection->authenticated);        if (connection->server) {                r = sasl_server_dispatch(&connection->sasl.server, input, n_input, &output, &n_output);                if (r > 0) {                        connection_close(connection);                        return CONNECTION_E_RESET;                } else if (r < 0) {                        return error_fold(r);                }                connection->authenticated = sasl_server_is_done(&connection->sasl.server);        } else {                r = sasl_client_dispatch(&connection->sasl.client, input, n_input, &output, &n_output);                if (r > 0) {                        connection_close(connection);                        return CONNECTION_E_RESET;                } else if (r < 0) {                        return error_fold(r);                }                connection->authenticated = sasl_client_is_done(&connection->sasl.client);        }        if (output) {                r = socket_queue_line(&connection->socket, NULL, output, n_output);                if (r)                        return error_fold(r);                dispatch_file_select(&connection->socket_file, EPOLLOUT);        }        return 0;}
const char *output;
const char *output;
const char
*output
*
output
size_t n_output;
size_t n_output;
size_t
size_t
n_output
n_output
int r;
int r;
int
r
r
assert(!connection->authenticated);
assert(!connection->authenticated)
assert
assert
!connection->authenticated
connection->authenticated
connection
connection
authenticated
if (connection->server) {                r = sasl_server_dispatch(&connection->sasl.server, input, n_input, &output, &n_output);                if (r > 0) {                        connection_close(connection);                        return CONNECTION_E_RESET;                } else if (r < 0) {                        return error_fold(r);                }                connection->authenticated = sasl_server_is_done(&connection->sasl.server);        } else {                r = sasl_client_dispatch(&connection->sasl.client, input, n_input, &output, &n_output);                if (r > 0) {                        connection_close(connection);                        return CONNECTION_E_RESET;                } else if (r < 0) {                        return error_fold(r);                }                connection->authenticated = sasl_client_is_done(&connection->sasl.client);        }
connection->server
connection
connection
server
{                r = sasl_server_dispatch(&connection->sasl.server, input, n_input, &output, &n_output);                if (r > 0) {                        connection_close(connection);                        return CONNECTION_E_RESET;                } else if (r < 0) {                        return error_fold(r);                }                connection->authenticated = sasl_server_is_done(&connection->sasl.server);        }
r = sasl_server_dispatch(&connection->sasl.server, input, n_input, &output, &n_output);
r = sasl_server_dispatch(&connection->sasl.server, input, n_input, &output, &n_output)
r
r
sasl_server_dispatch(&connection->sasl.server, input, n_input, &output, &n_output)
sasl_server_dispatch
sasl_server_dispatch
&connection->sasl.server
connection->sasl.server
connection->sasl
connection
connection
sasl
server
input
input
n_input
n_input
&output
output
output
&n_output
n_output
n_output
if (r > 0) {                        connection_close(connection);                        return CONNECTION_E_RESET;                } else if (r < 0) {                        return error_fold(r);                }
r > 0
r
r
0
{                        connection_close(connection);                        return CONNECTION_E_RESET;                }
connection_close(connection);
connection_close(connection)
connection_close
connection_close
connection
connection
return CONNECTION_E_RESET;
CONNECTION_E_RESET
CONNECTION_E_RESET
if (r < 0) {                        return error_fold(r);                }
r < 0
r
r
0
{                        return error_fold(r);                }
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
connection->authenticated = sasl_server_is_done(&connection->sasl.server);
connection->authenticated = sasl_server_is_done(&connection->sasl.server)
connection->authenticated
connection
connection
authenticated
sasl_server_is_done(&connection->sasl.server)
sasl_server_is_done
sasl_server_is_done
&connection->sasl.server
connection->sasl.server
connection->sasl
connection
connection
sasl
server
{                r = sasl_client_dispatch(&connection->sasl.client, input, n_input, &output, &n_output);                if (r > 0) {                        connection_close(connection);                        return CONNECTION_E_RESET;                } else if (r < 0) {                        return error_fold(r);                }                connection->authenticated = sasl_client_is_done(&connection->sasl.client);        }
r = sasl_client_dispatch(&connection->sasl.client, input, n_input, &output, &n_output);
r = sasl_client_dispatch(&connection->sasl.client, input, n_input, &output, &n_output)
r
r
sasl_client_dispatch(&connection->sasl.client, input, n_input, &output, &n_output)
sasl_client_dispatch
sasl_client_dispatch
&connection->sasl.client
connection->sasl.client
connection->sasl
connection
connection
sasl
client
input
input
n_input
n_input
&output
output
output
&n_output
n_output
n_output
if (r > 0) {                        connection_close(connection);                        return CONNECTION_E_RESET;                } else if (r < 0) {                        return error_fold(r);                }
r > 0
r
r
0
{                        connection_close(connection);                        return CONNECTION_E_RESET;                }
connection_close(connection);
connection_close(connection)
connection_close
connection_close
connection
connection
return CONNECTION_E_RESET;
CONNECTION_E_RESET
CONNECTION_E_RESET
if (r < 0) {                        return error_fold(r);                }
r < 0
r
r
0
{                        return error_fold(r);                }
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
connection->authenticated = sasl_client_is_done(&connection->sasl.client);
connection->authenticated = sasl_client_is_done(&connection->sasl.client)
connection->authenticated
connection
connection
authenticated
sasl_client_is_done(&connection->sasl.client)
sasl_client_is_done
sasl_client_is_done
&connection->sasl.client
connection->sasl.client
connection->sasl
connection
connection
sasl
client
if (output) {                r = socket_queue_line(&connection->socket, NULL, output, n_output);                if (r)                        return error_fold(r);                dispatch_file_select(&connection->socket_file, EPOLLOUT);        }
output
output
{                r = socket_queue_line(&connection->socket, NULL, output, n_output);                if (r)                        return error_fold(r);                dispatch_file_select(&connection->socket_file, EPOLLOUT);        }
r = socket_queue_line(&connection->socket, NULL, output, n_output);
r = socket_queue_line(&connection->socket, NULL, output, n_output)
r
r
socket_queue_line(&connection->socket, NULL, output, n_output)
socket_queue_line
socket_queue_line
&connection->socket
connection->socket
connection
connection
socket
NULL
NULL
output
output
n_output
n_output
if (r)                        return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
dispatch_file_select(&connection->socket_file, EPOLLOUT);
dispatch_file_select(&connection->socket_file, EPOLLOUT)
dispatch_file_select
dispatch_file_select
&connection->socket_file
connection->socket_file
connection
connection
socket_file
EPOLLOUT
EPOLLOUT
return 0;
0
-----joern-----
(115,21,0)
(35,81,0)
(30,5,0)
(121,30,0)
(64,116,0)
(87,2,0)
(85,63,0)
(59,127,0)
(66,40,0)
(3,85,0)
(31,29,0)
(25,67,0)
(6,64,0)
(63,9,0)
(26,85,0)
(108,57,0)
(113,127,0)
(73,76,0)
(48,86,0)
(30,103,0)
(93,34,0)
(93,89,0)
(1,127,0)
(45,124,0)
(87,21,0)
(97,83,0)
(86,0,0)
(66,100,0)
(79,85,0)
(87,103,0)
(8,66,0)
(116,27,0)
(24,5,0)
(55,52,0)
(64,6,0)
(66,52,0)
(19,74,0)
(88,76,0)
(32,60,0)
(81,38,0)
(1,12,0)
(10,37,0)
(12,100,0)
(103,0,0)
(107,37,0)
(44,12,0)
(124,104,0)
(128,67,0)
(111,26,0)
(80,59,0)
(57,127,0)
(49,63,0)
(86,113,0)
(98,114,0)
(92,4,0)
(33,113,0)
(11,0,0)
(15,53,0)
(117,112,0)
(27,116,0)
(102,93,0)
(74,83,0)
(58,95,0)
(125,118,0)
(96,36,0)
(101,62,0)
(91,60,0)
(103,113,0)
(39,1,0)
(29,122,0)
(9,63,0)
(63,77,0)
(71,45,0)
(79,101,0)
(87,96,0)
(59,90,0)
(109,34,0)
(63,20,0)
(66,74,0)
(84,0,0)
(21,95,0)
(66,82,0)
(87,86,0)
(43,34,0)
(51,89,0)
(54,83,0)
(16,45,0)
(63,85,0)
(22,76,0)
(2,90,0)
(5,118,0)
(104,124,0)
(5,67,0)
(70,110,0)
(91,9,0)
(40,66,0)
(72,4,0)
(56,114,0)
(68,81,0)
(7,113,0)
(53,96,0)
(47,79,0)
(17,66,0)
(18,26,0)
(14,1,0)
(34,127,0)
(89,93,0)
(60,127,0)
(86,76,0)
(89,51,0)
(69,74,0)
(67,38,0)
(87,101,0)
(51,97,0)
(99,69,0)
(100,66,0)
(53,74,0)
(57,122,0)
(122,57,0)
(120,57,0)
(67,5,0)
(112,63,0)
(45,127,0)
(81,127,0)
(126,76,0)
(123,63,0)
(4,127,0)
(38,67,0)
(74,66,0)
(106,69,0)
(104,76,0)
(50,2,0)
(66,20,0)
(97,51,0)
(41,76,0)
(119,40,0)
(0,97,0)
(27,4,0)
(63,82,0)
(113,6,0)
(124,45,0)
(13,91,0)
(12,1,0)
(37,127,0)
(78,27,0)
(100,12,0)
(42,3,0)
(9,91,0)
(34,93,0)
(0,127,0)
(116,64,0)
(28,77,0)
(63,112,0)
(46,67,0)
(77,63,0)
(4,27,0)
(60,91,0)
(65,3,0)
(75,58,0)
(38,81,0)
(122,29,0)
(114,74,0)
(52,66,0)
(29,118,0)
(61,60,0)
(85,110,0)
(6,110,0)
(58,127,0)
(94,85,0)
(69,99,1)
(27,4,1)
(86,0,1)
(56,74,1)
(65,42,1)
(60,32,1)
(84,69,1)
(72,92,1)
(67,46,1)
(102,34,1)
(114,98,1)
(60,127,1)
(114,74,1)
(75,114,1)
(53,15,1)
(50,59,1)
(1,14,1)
(8,100,1)
(45,127,1)
(58,75,1)
(31,122,1)
(64,116,1)
(124,45,1)
(86,48,1)
(116,27,1)
(18,111,1)
(79,85,1)
(122,57,1)
(91,60,1)
(107,10,1)
(78,4,1)
(66,100,1)
(1,127,1)
(113,127,1)
(115,58,1)
(23,5,1)
(106,114,1)
(68,35,1)
(27,78,1)
(103,113,1)
(87,2,1)
(48,105,1)
(11,84,1)
(87,96,1)
(80,3,1)
(87,21,1)
(87,86,1)
(58,127,1)
(21,115,1)
(77,28,1)
(63,82,1)
(74,66,1)
(97,51,1)
(29,122,1)
(117,77,1)
(32,61,1)
(53,74,1)
(63,112,1)
(12,1,1)
(26,85,1)
(43,109,1)
(48,29,1)
(19,37,1)
(6,64,1)
(57,127,1)
(96,53,1)
(108,23,1)
(51,89,1)
(123,9,1)
(38,81,1)
(103,30,1)
(89,93,1)
(66,82,1)
(49,123,1)
(103,0,1)
(55,17,1)
(10,104,1)
(66,40,1)
(3,85,1)
(69,74,1)
(59,127,1)
(46,128,1)
(92,113,1)
(30,121,1)
(37,107,1)
(15,69,1)
(34,127,1)
(105,6,1)
(3,65,1)
(13,60,1)
(81,68,1)
(67,38,1)
(94,37,1)
(105,97,1)
(63,77,1)
(120,108,1)
(59,80,1)
(42,85,1)
(47,26,1)
(2,50,1)
(99,106,1)
(24,105,1)
(0,127,1)
(121,23,1)
(5,67,1)
(57,120,1)
(4,72,1)
(93,102,1)
(61,94,1)
(7,26,1)
(112,117,1)
(104,124,1)
(128,25,1)
(63,9,1)
(119,52,1)
(87,103,1)
(52,55,1)
(26,18,1)
(12,44,1)
(40,119,1)
(100,12,1)
(63,20,1)
(28,49,1)
(29,31,1)
(86,113,1)
(4,127,1)
(34,43,1)
(66,20,1)
(33,7,1)
(66,52,1)
(17,8,1)
(81,127,1)
(93,34,1)
(45,16,1)
(79,47,1)
(30,5,1)
(44,1,1)
(0,11,1)
(101,79,1)
(9,91,1)
(25,38,1)
(35,24,1)
(39,19,1)
(16,71,1)
(87,101,1)
(85,63,1)
(91,13,1)
(111,3,1)
(109,0,1)
(14,39,1)
(113,33,1)
(98,56,1)
(37,127,1)
(93,34,2)
(6,26,2)
(51,69,2)
(39,37,2)
(50,3,2)
(4,26,2)
(38,105,2)
(100,37,2)
(35,105,2)
(87,86,2)
(12,1,2)
(84,69,2)
(85,37,2)
(64,116,2)
(115,114,2)
(13,37,2)
(51,89,2)
(64,26,2)
(86,113,2)
(103,0,2)
(104,124,2)
(0,127,2)
(85,63,2)
(44,37,2)
(66,20,2)
(47,26,2)
(61,37,2)
(86,0,2)
(37,127,2)
(112,37,2)
(30,5,2)
(29,23,2)
(66,37,2)
(98,37,2)
(66,100,2)
(59,127,2)
(2,3,2)
(53,69,2)
(23,105,2)
(87,2,2)
(46,105,2)
(4,127,2)
(55,37,2)
(57,127,2)
(68,105,2)
(89,69,2)
(114,74,2)
(57,23,2)
(116,27,2)
(74,37,2)
(91,60,2)
(26,85,2)
(113,127,2)
(42,37,2)
(86,23,2)
(58,127,2)
(122,57,2)
(89,93,2)
(103,23,2)
(108,23,2)
(86,105,2)
(111,3,2)
(38,81,2)
(79,85,2)
(77,37,2)
(63,82,2)
(19,37,2)
(105,26,2)
(52,37,2)
(0,69,2)
(92,26,2)
(122,23,2)
(74,66,2)
(63,9,2)
(56,37,2)
(65,37,2)
(43,69,2)
(91,37,2)
(58,114,2)
(40,37,2)
(114,37,2)
(79,26,2)
(101,26,2)
(97,69,2)
(128,105,2)
(72,26,2)
(123,37,2)
(66,82,2)
(26,3,2)
(1,37,2)
(1,127,2)
(99,114,2)
(60,37,2)
(28,37,2)
(17,37,2)
(87,101,2)
(6,64,2)
(69,114,2)
(66,52,2)
(3,37,2)
(93,69,2)
(45,127,2)
(7,26,2)
(18,3,2)
(69,74,2)
(29,122,2)
(49,37,2)
(31,23,2)
(87,96,2)
(32,37,2)
(5,67,2)
(33,26,2)
(121,23,2)
(63,112,2)
(25,105,2)
(3,85,2)
(48,105,2)
(105,69,2)
(30,23,2)
(113,26,2)
(34,69,2)
(80,3,2)
(120,23,2)
(75,114,2)
(9,91,2)
(5,105,2)
(12,37,2)
(48,23,2)
(87,103,2)
(27,4,2)
(117,37,2)
(63,20,2)
(27,26,2)
(96,69,2)
(66,40,2)
(34,127,2)
(116,26,2)
(103,113,2)
(109,69,2)
(97,51,2)
(124,45,2)
(63,37,2)
(78,26,2)
(59,3,2)
(102,69,2)
(63,77,2)
(24,105,2)
(15,69,2)
(67,38,2)
(9,37,2)
(81,127,2)
(53,74,2)
(8,37,2)
(94,37,2)
(87,21,2)
(106,114,2)
(100,12,2)
(11,69,2)
(21,114,2)
(60,127,2)
(14,37,2)
(119,37,2)
(81,105,2)
(67,105,2)
-----------------------------------
(0,connection->authenticated)
(1,connection->sasl)
(2,return CONNECTION_E_RESET;)
(3,r > 0)
(4,connection->sasl)
(5,r = socket_queue_line(&connection->socket, NULL, output, n_output)
(6,connection->authenticated = sasl_server_is_done(&connection->sasl.server)
(7,connection)
(8,input)
(9,&connection->sasl.server)
(10,connection)
(11,authenticated)
(12,connection->sasl.client)
(13,server)
(14,sasl)
(15,r)
(16,authenticated)
(17,n_input)
(18,0)
(19,r)
(20,size_t n_input)
(21,return CONNECTION_E_RESET;)
(22,r)
(23,r)
(24,r)
(25,NULL)
(26,r < 0)
(27,connection->sasl.server)
(28,output)
(29,dispatch_file_select(&connection->socket_file, EPOLLOUT)
(30,error_fold(r)
(31,EPOLLOUT)
(32,sasl)
(33,authenticated)
(34,connection->sasl)
(35,connection)
(36,)
(37,connection->server)
(38,&connection->socket)
(39,connection)
(40,&n_output)
(41,n_output)
(42,r)
(43,sasl)
(44,client)
(45,connection->authenticated)
(46,n_output)
(47,r)
(48,0)
(49,n_input)
(50,CONNECTION_E_RESET)
(51,sasl_client_is_done(&connection->sasl.client)
(52,&output)
(53,error_fold(r)
(54,if (r > 0)
(55,output)
(56,r)
(57,connection->socket_file)
(58,connection_close(connection)
(59,connection_close(connection)
(60,connection->sasl)
(61,connection)
(62,)
(63,sasl_server_dispatch(&connection->sasl.server, input, n_input, &output, &n_output)
(64,sasl_server_is_done(&connection->sasl.server)
(65,0)
(66,sasl_client_dispatch(&connection->sasl.client, input, n_input, &output, &n_output)
(67,socket_queue_line(&connection->socket, NULL, output, n_output)
(68,socket)
(69,r < 0)
(70,if (r > 0)
(71,connection)
(72,sasl)
(73,output)
(74,r = sasl_client_dispatch(&connection->sasl.client, input, n_input, &output, &n_output)
(75,connection)
(76,)
(77,&output)
(78,server)
(79,error_fold(r)
(80,connection)
(81,connection->socket)
(82,const char *input)
(83,)
(84,connection)
(85,r = sasl_server_dispatch(&connection->sasl.server, input, n_input, &output, &n_output)
(86,return 0;)
(87,RET)
(88,if (connection->server)
(89,&connection->sasl.client)
(90,)
(91,connection->sasl.server)
(92,connection)
(93,connection->sasl.client)
(94,r)
(95,)
(96,return error_fold(r)
(97,connection->authenticated = sasl_client_is_done(&connection->sasl.client)
(98,0)
(99,0)
(100,&connection->sasl.client)
(101,return error_fold(r)
(102,client)
(103,return error_fold(r)
(104,assert(!connection->authenticated)
(105,output)
(106,r)
(107,server)
(108,connection)
(109,connection)
(110,)
(111,r)
(112,&n_output)
(113,connection->authenticated)
(114,r > 0)
(115,CONNECTION_E_RESET)
(116,&connection->sasl.server)
(117,n_output)
(118,)
(119,n_output)
(120,socket_file)
(121,r)
(122,&connection->socket_file)
(123,input)
(124,!connection->authenticated)
(125,if (r)
(126,if (output)
(127,Connection *connection)
(128,output)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^