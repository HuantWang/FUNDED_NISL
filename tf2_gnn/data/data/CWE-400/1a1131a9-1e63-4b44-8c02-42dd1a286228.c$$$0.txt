-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_15_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
47,48
47,49
49,50
49,51
52,53
52,54
52,55
53,54
53,55
54,55
56,57
56,58
57,58
59,60
61,62
61,63
61,64
61,65
61,66
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
69,70
71,72
71,73
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
95,98
96,97
98,99
100,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
112,113
114,115
115,116
116,117
116,118
117,118
122,123
123,124
123,125
124,125
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,28,31,32,33,37,38,39,41,44,48,50,51,55,58,60,65,68,70,73,76,79,80,84,86,91,93,97,99,101,105,107,111,113,118,119,120,121,125,126,127
-----computeFrom-----
13,14
13,15
53,54
53,55
63,64
63,65
74,75
74,76
82,83
82,84
-----guardedBy-----
60,101
55,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_15_bad(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_15_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_15_bad
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(6,10,0)
(50,52,0)
(17,11,0)
(5,22,0)
(1,25,0)
(59,11,0)
(14,1,0)
(37,39,0)
(58,27,0)
(47,22,0)
(30,50,0)
(29,7,0)
(45,18,0)
(40,25,0)
(3,22,0)
(44,21,0)
(49,41,0)
(46,7,0)
(24,40,0)
(43,7,0)
(13,19,0)
(32,21,0)
(55,7,0)
(35,52,0)
(9,46,0)
(19,61,0)
(51,29,0)
(42,61,0)
(43,26,0)
(50,21,0)
(52,50,0)
(38,22,0)
(53,40,0)
(63,43,0)
(16,48,0)
(0,58,0)
(12,25,0)
(41,26,0)
(10,7,0)
(31,57,0)
(60,11,0)
(2,25,0)
(21,11,0)
(62,25,0)
(29,18,0)
(48,18,0)
(57,4,0)
(27,58,0)
(43,63,0)
(61,21,0)
(28,10,0)
(39,22,0)
(7,43,0)
(27,33,0)
(20,19,0)
(41,21,0)
(19,22,0)
(54,41,0)
(26,43,0)
(7,18,0)
(23,48,0)
(15,25,0)
(26,41,0)
(46,18,0)
(41,54,0)
(8,54,0)
(48,7,0)
(61,19,0)
(43,63,1)
(26,41,1)
(56,15,1)
(56,2,1)
(35,30,1)
(57,31,1)
(16,10,1)
(61,42,1)
(16,27,1)
(20,13,1)
(15,57,1)
(19,61,1)
(29,51,1)
(31,50,1)
(23,16,1)
(1,14,1)
(7,43,1)
(27,58,1)
(39,37,1)
(36,21,1)
(50,52,1)
(52,35,1)
(14,34,1)
(58,0,1)
(38,19,1)
(49,55,1)
(13,36,1)
(41,21,1)
(44,32,1)
(34,47,1)
(6,28,1)
(0,10,1)
(42,20,1)
(48,23,1)
(48,7,1)
(10,7,1)
(55,50,1)
(61,21,1)
(34,38,1)
(8,49,1)
(15,29,1)
(51,46,1)
(37,36,1)
(9,48,1)
(30,34,1)
(21,44,1)
(46,7,1)
(28,7,1)
(41,54,1)
(46,9,1)
(2,1,1)
(50,21,1)
(10,6,1)
(43,26,1)
(29,7,1)
(47,39,1)
(54,8,1)
(9,50,2)
(41,21,2)
(43,26,2)
(50,52,2)
(29,7,2)
(30,34,2)
(48,50,2)
(13,36,2)
(28,50,2)
(58,10,2)
(43,63,2)
(39,36,2)
(0,10,2)
(49,50,2)
(6,50,2)
(42,36,2)
(29,50,2)
(61,21,2)
(52,34,2)
(10,7,2)
(27,58,2)
(27,10,2)
(19,61,2)
(14,34,2)
(7,50,2)
(46,50,2)
(8,50,2)
(19,36,2)
(16,50,2)
(37,36,2)
(1,34,2)
(23,50,2)
(55,50,2)
(48,7,2)
(50,34,2)
(61,36,2)
(57,50,2)
(51,50,2)
(2,34,2)
(35,34,2)
(38,36,2)
(31,50,2)
(54,50,2)
(26,41,2)
(26,50,2)
(43,50,2)
(41,50,2)
(10,50,2)
(41,54,2)
(47,36,2)
(20,36,2)
(7,43,2)
(15,34,2)
(50,21,2)
(46,7,2)
-----------------------------------
(0,1)
(1,printLine("Benign, fixed string")
(2,break;)
(3,default:)
(4,)
(5,case 6:)
(6,NULL)
(7,myString = (wchar_t *)
(8,wchar_t)
(9,myString)
(10,myString == NULL)
(11,)
(12,case 7:)
(13,stdin)
(14,"Benign, fixed string")
(15,break;)
(16,myString)
(17,data)
(18,)
(19,fscanf(stdin, "%zu", &data)
(20,"%zu")
(21,data = 0)
(22,)
(23,HELLO_STRING)
(24,if (data > wcslen(HELLO_STRING)
(25,)
(26,malloc(data*sizeof(wchar_t)
(27,exit(-1)
(28,myString)
(29,free(myString)
(30,data)
(31,"Input is less than the length of the source string")
(32,data)
(33,)
(34,7)
(35,HELLO_STRING)
(36,6)
(37,"Benign, fixed string")
(38,break;)
(39,printLine("Benign, fixed string")
(40,)
(41,data*sizeof(wchar_t)
(42,data)
(43,(wchar_t *)
(44,0)
(45,if (myString == NULL)
(46,printWLine(myString)
(47,break;)
(48,wcscpy(myString, HELLO_STRING)
(49,data)
(50,data > wcslen(HELLO_STRING)
(51,myString)
(52,wcslen(HELLO_STRING)
(53,myString)
(54,sizeof(wchar_t)
(55,myString)
(56,RET)
(57,printLine("Input is less than the length of the source string")
(58,-1)
(59,switch(6)
(60,switch(7)
(61,&data)
(62,default:)
(63,wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^