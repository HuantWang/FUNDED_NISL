-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__listen_socket_for_loop_44_bad()
{
    int count;
    /* define a function pointer */
    void (*funcPtr) (int) = badSink;
    /* Initialize count */
    count = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read count using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* use the function pointer */
    funcPtr(count);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
31,37
31,38
31,39
32,33
33,34
33,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
58,59
59,60
61,62
62,63
62,64
64,65
64,66
66,67
67,68
69,70
69,71
70,71
70,72
70,73
70,74
70,75
70,76
70,77
70,78
70,79
70,80
70,81
70,82
70,83
70,84
71,72
72,73
72,74
73,74
75,76
75,77
75,78
75,79
76,77
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
92,93
93,94
93,95
93,96
93,97
94,95
96,97
97,98
100,101
101,102
102,103
104,105
105,106
105,107
106,107
106,108
107,108
110,111
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
120,121
122,123
123,124
123,125
124,125
124,126
125,126
128,129
128,130
129,130
131,132
133,134
133,135
134,135
134,136
135,136
135,137
135,138
135,139
136,137
138,139
140,141
140,142
141,142
141,143
142,143
144,145
146,147
147,148
149,150
150,151
151,152
153,154
155,156
157,158
157,159
158,159
158,160
159,160
159,161
159,162
160,161
162,163
164,165
166,167
168,169
170,171
171,172
171,173
172,173
174,175
174,176
174,177
174,178
175,176
177,178
179,180
181,182
183,184
183,185
184,185
184,186
185,186
187,188
189,190
191,192
192,193
192,194
193,194
195,196
195,197
195,198
195,199
195,200
196,197
198,199
200,201
202,203
202,204
203,204
207,208
207,209
208,209
208,210
209,210
209,211
210,211
212,213
214,215
214,216
215,216
218,219
220,221
221,222
221,223
222,223
222,224
223,224
225,226
228,229
229,230
229,231
230,231
232,233
232,234
233,234
235,236
238,239
238,240
239,240
239,241
240,241
242,243
244,245
245,246
246,247
246,248
247,248
249,250
251,252
251,253
252,253
252,254
253,254
255,256
257,258
258,259
259,260
259,261
260,261
262,263
264,265
265,266
265,267
266,267
268,269
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,30,34,36,40,42,46,48,51,55,57,60,63,65,68,74,77,79,81,83,87,89,91,95,98,99,103,108,109,111,117,118,119,121,126,127,130,132,137,139,143,145,148,152,154,156,161,163,165,167,169,173,176,178,180,182,186,188,190,194,197,199,201,204,205,206,211,213,216,217,219,224,226,227,231,234,236,237,241,243,248,250,254,256,261,263,267,269
-----computeFrom-----
26,27
26,28
72,73
72,74
85,86
85,87
105,106
105,107
113,114
113,115
123,124
123,125
134,135
134,136
158,159
158,160
171,172
171,173
184,185
184,186
192,193
192,194
202,203
202,204
208,209
208,210
209,210
209,211
214,215
214,216
221,222
221,223
229,230
229,231
239,240
239,241
252,253
252,254
-----guardedBy-----
241,250
254,263
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__listen_socket_for_loop_44_bad(){    int count;    /* define a function pointer */    void (*funcPtr) (int) = badSink;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(count);}
void
CWE400_Resource_Exhaustion__listen_socket_for_loop_44_bad()
CWE400_Resource_Exhaustion__listen_socket_for_loop_44_bad
{    int count;    /* define a function pointer */    void (*funcPtr) (int) = badSink;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(count);}
int count;
int count;
int
count
count
void (*funcPtr) (int) = badSink;
void (*funcPtr) (int) = badSink;
void
(*funcPtr) (int) = badSink
*funcPtr
*
funcPtr
int
int


= badSink
badSink
badSink
count = -1;
count = -1
count
count
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
funcPtr(count);
funcPtr(count)
funcPtr
funcPtr
count
count
-----joern-----
(136,71,0)
(118,44,0)
(125,43,0)
(65,131,0)
(150,16,0)
(43,104,0)
(33,16,0)
(0,62,0)
(103,74,0)
(3,42,0)
(156,44,0)
(113,27,0)
(38,107,0)
(9,137,0)
(71,102,0)
(87,97,0)
(98,62,0)
(14,110,0)
(120,123,0)
(110,14,0)
(146,44,0)
(149,62,0)
(20,113,0)
(121,146,0)
(49,110,0)
(58,98,0)
(127,42,0)
(96,38,0)
(47,42,0)
(139,62,0)
(127,7,0)
(102,89,0)
(24,146,0)
(119,155,0)
(106,127,0)
(22,62,0)
(29,60,0)
(124,44,0)
(14,148,0)
(69,44,0)
(137,69,0)
(140,85,0)
(52,40,0)
(57,42,0)
(146,81,0)
(62,145,0)
(151,81,0)
(68,128,0)
(40,52,0)
(41,114,0)
(104,43,0)
(59,3,0)
(104,42,0)
(19,43,0)
(12,40,0)
(42,85,0)
(8,153,0)
(3,21,0)
(55,145,0)
(92,43,0)
(161,62,0)
(61,44,0)
(40,69,0)
(100,89,0)
(97,87,0)
(158,62,0)
(90,97,0)
(84,105,0)
(15,118,0)
(36,104,0)
(48,62,0)
(133,56,0)
(144,57,0)
(143,4,0)
(72,154,0)
(74,130,0)
(5,19,0)
(26,62,0)
(130,74,0)
(157,44,0)
(14,60,0)
(160,130,0)
(42,44,0)
(16,33,0)
(129,114,0)
(32,145,0)
(34,33,0)
(45,85,0)
(78,107,0)
(28,62,0)
(141,78,0)
(105,97,0)
(4,115,0)
(107,78,0)
(37,44,0)
(17,128,0)
(159,98,0)
(128,62,0)
(35,24,0)
(107,44,0)
(81,146,0)
(126,136,0)
(50,104,0)
(115,44,0)
(79,92,0)
(7,127,0)
(134,62,0)
(83,69,0)
(89,102,0)
(1,148,0)
(3,114,0)
(53,129,0)
(129,42,0)
(86,40,0)
(97,44,0)
(4,69,0)
(18,85,0)
(43,44,0)
(51,112,0)
(60,14,0)
(109,71,0)
(131,44,0)
(10,159,0)
(67,145,0)
(70,118,0)
(122,114,0)
(159,43,0)
(24,16,0)
(101,23,0)
(77,127,0)
(71,112,0)
(91,19,0)
(102,132,0)
(94,131,0)
(111,7,0)
(76,137,0)
(31,44,0)
(112,71,0)
(92,108,0)
(13,44,0)
(24,145,0)
(52,137,0)
(93,67,0)
(152,31,0)
(88,147,0)
(2,98,0)
(71,136,0)
(63,130,0)
(102,71,0)
(46,159,0)
(99,74,0)
(11,38,0)
(54,62,0)
(16,145,0)
(71,42,0)
(113,31,0)
(30,27,0)
(137,52,0)
(95,57,0)
(148,14,0)
(92,98,0)
(74,43,0)
(117,94,0)
(114,62,0)
(6,94,0)
(97,105,0)
(135,4,0)
(66,67,0)
(27,113,0)
(80,74,0)
(69,74,0)
(82,148,0)
(132,102,0)
(74,69,0)
(85,42,0)
(25,87,0)
(142,129,0)
(39,27,0)
(75,115,0)
(116,104,0)
(127,77,1)
(102,132,1)
(5,43,1)
(81,151,1)
(65,94,1)
(29,148,1)
(118,70,1)
(159,43,1)
(34,150,1)
(107,78,1)
(150,67,1)
(19,91,1)
(131,65,1)
(57,144,1)
(116,36,1)
(60,29,1)
(3,59,1)
(95,42,1)
(42,85,1)
(88,73,1)
(50,125,1)
(19,43,1)
(27,30,1)
(125,7,1)
(115,75,1)
(130,63,1)
(43,104,1)
(136,71,1)
(77,106,1)
(143,52,1)
(74,43,1)
(93,66,1)
(159,46,1)
(151,121,1)
(52,40,1)
(83,19,1)
(113,20,1)
(1,64,1)
(69,74,1)
(85,140,1)
(74,103,1)
(25,90,1)
(73,92,1)
(8,19,1)
(87,25,1)
(12,69,1)
(24,16,1)
(90,105,1)
(120,7,1)
(127,42,1)
(142,119,1)
(119,136,1)
(10,129,1)
(137,76,1)
(15,110,1)
(9,40,1)
(79,159,1)
(10,3,1)
(30,39,1)
(128,68,1)
(141,38,1)
(142,133,1)
(6,97,1)
(103,130,1)
(105,84,1)
(121,115,1)
(142,64,1)
(96,31,1)
(86,12,1)
(41,122,1)
(160,99,1)
(3,114,1)
(144,95,1)
(64,146,1)
(51,102,1)
(59,129,1)
(58,114,1)
(82,1,1)
(71,42,1)
(36,50,1)
(2,58,1)
(52,137,1)
(142,72,1)
(133,52,1)
(126,71,1)
(110,49,1)
(137,69,1)
(111,127,1)
(33,34,1)
(73,159,1)
(97,87,1)
(129,53,1)
(92,79,1)
(18,47,1)
(67,93,1)
(138,24,1)
(35,73,1)
(63,160,1)
(14,60,1)
(84,57,1)
(24,146,1)
(159,98,1)
(7,111,1)
(135,143,1)
(102,89,1)
(39,131,1)
(47,118,1)
(49,14,1)
(92,43,1)
(142,120,1)
(76,9,1)
(4,69,1)
(7,127,1)
(100,109,1)
(112,51,1)
(31,152,1)
(70,15,1)
(136,126,1)
(101,57,1)
(72,110,1)
(68,17,1)
(98,2,1)
(148,82,1)
(74,130,1)
(71,102,1)
(117,6,1)
(80,83,1)
(40,69,1)
(57,42,1)
(99,80,1)
(142,8,1)
(97,105,1)
(24,35,1)
(16,33,1)
(89,100,1)
(20,27,1)
(104,116,1)
(122,128,1)
(53,142,1)
(4,135,1)
(78,141,1)
(1,98,1)
(129,42,1)
(106,136,1)
(142,101,1)
(3,42,1)
(109,107,1)
(91,5,1)
(40,86,1)
(129,114,1)
(104,42,1)
(146,81,1)
(11,96,1)
(35,88,1)
(140,45,1)
(75,4,1)
(71,112,1)
(14,148,1)
(94,117,1)
(46,10,1)
(110,14,1)
(92,98,1)
(114,41,1)
(45,18,1)
(17,16,1)
(152,113,1)
(113,27,1)
(38,11,1)
(7,136,2)
(7,127,2)
(159,43,2)
(75,52,2)
(159,98,2)
(94,57,2)
(125,7,2)
(42,85,2)
(110,64,2)
(120,7,2)
(42,110,2)
(129,114,2)
(111,136,2)
(5,7,2)
(74,43,2)
(140,110,2)
(146,81,2)
(52,40,2)
(136,71,2)
(71,112,2)
(102,132,2)
(144,110,2)
(137,69,2)
(57,110,2)
(101,57,2)
(102,89,2)
(60,64,2)
(3,129,2)
(51,57,2)
(81,52,2)
(18,110,2)
(160,19,2)
(63,19,2)
(3,114,2)
(85,110,2)
(43,7,2)
(49,64,2)
(71,102,2)
(88,73,2)
(14,64,2)
(69,19,2)
(109,57,2)
(118,110,2)
(105,57,2)
(121,52,2)
(137,40,2)
(104,42,2)
(59,129,2)
(107,57,2)
(45,110,2)
(3,42,2)
(47,110,2)
(16,33,2)
(84,57,2)
(71,57,2)
(86,19,2)
(110,14,2)
(146,52,2)
(148,64,2)
(113,27,2)
(29,64,2)
(92,98,2)
(40,19,2)
(69,74,2)
(25,57,2)
(107,78,2)
(80,19,2)
(12,19,2)
(57,42,2)
(14,60,2)
(136,57,2)
(24,16,2)
(15,110,2)
(39,57,2)
(30,57,2)
(52,19,2)
(31,57,2)
(141,57,2)
(64,52,2)
(43,104,2)
(92,159,2)
(89,57,2)
(70,110,2)
(74,130,2)
(92,43,2)
(6,57,2)
(135,52,2)
(11,57,2)
(100,57,2)
(115,52,2)
(119,136,2)
(82,64,2)
(91,7,2)
(116,7,2)
(19,7,2)
(77,136,2)
(19,43,2)
(152,57,2)
(127,42,2)
(50,7,2)
(97,105,2)
(117,57,2)
(9,40,2)
(133,52,2)
(95,110,2)
(130,19,2)
(65,57,2)
(40,69,2)
(4,69,2)
(90,57,2)
(97,87,2)
(99,19,2)
(74,19,2)
(103,19,2)
(127,136,2)
(4,52,2)
(72,110,2)
(36,7,2)
(76,40,2)
(79,159,2)
(71,42,2)
(151,52,2)
(1,64,2)
(143,52,2)
(112,57,2)
(38,57,2)
(129,42,2)
(52,137,2)
(113,57,2)
(106,136,2)
(96,57,2)
(87,57,2)
(102,57,2)
(8,19,2)
(104,7,2)
(126,57,2)
(14,148,2)
(97,57,2)
(24,146,2)
(131,57,2)
(83,19,2)
(78,57,2)
(27,57,2)
(20,57,2)
-----------------------------------
(0,inputBuffer)
(1,2)
(2,INVALID_SOCKET)
(3,CLOSE_SOCKET(listenSocket)
(4,inputBuffer[recvResult])
(5,acceptSocket)
(6,service)
(7,listen(listenSocket, LISTEN_BACKLOG)
(8,break;)
(9,recvResult)
(10,acceptSocket)
(11,sin_port)
(12,recvResult)
(13,if (bind(listenSocket, (struct sockaddr*)
(14,WSAStartup(MAKEWORD(2,2)
(15,wsaDataInit)
(16,count = -1)
(17,wsaDataInit)
(18,AF_INET)
(19,acceptSocket == SOCKET_ERROR)
(20,s_addr)
(21,)
(22,recvResult)
(23,)
(24,funcPtr(count)
(25,service)
(26,if (wsaDataInit)
(27,service.sin_addr)
(28,wsaData)
(29,wsaData)
(30,sin_addr)
(31,service.sin_addr.s_addr = INADDR_ANY)
(32,funcPtr)
(33,-1)
(34,1)
(35,count)
(36,NULL)
(37,if (listen(listenSocket, LISTEN_BACKLOG)
(38,service.sin_port)
(39,service)
(40,recvResult == SOCKET_ERROR)
(41,INVALID_SOCKET)
(42,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(43,acceptSocket = accept(listenSocket, NULL, NULL)
(44,)
(45,SOCK_STREAM)
(46,INVALID_SOCKET)
(47,listenSocket)
(48,if (listenSocket != INVALID_SOCKET)
(49,NO_ERROR)
(50,listenSocket)
(51,service)
(52,recvResult == SOCKET_ERROR || recvResult == 0)
(53,INVALID_SOCKET)
(54,acceptSocket)
(55,count)
(56,)
(57,listenSocket == INVALID_SOCKET)
(58,acceptSocket)
(59,listenSocket)
(60,&wsaData)
(61,if (acceptSocket == SOCKET_ERROR)
(62,)
(63,1)
(64,0)
(65,AF_INET)
(66,funcPtr)
(67,(*funcPtr)
(68,0)
(69,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(70,1)
(71,bind(listenSocket, (struct sockaddr*)
(72,break;)
(73,wsaDataInit)
(74,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(75,'\\0')
(76,0)
(77,LISTEN_BACKLOG)
(78,htons(TCP_PORT)
(79,acceptSocket)
(80,acceptSocket)
(81,atoi(inputBuffer)
(82,2)
(83,recvResult)
(84,service)
(85,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(86,SOCKET_ERROR)
(87,sizeof(service)
(88,WSACleanup()
(89,&service)
(90,0)
(91,SOCKET_ERROR)
(92,CLOSE_SOCKET(acceptSocket)
(93,badSink)
(94,service.sin_family)
(95,listenSocket)
(96,service)
(97,memset(&service, 0, sizeof(service)
(98,acceptSocket = INVALID_SOCKET)
(99,inputBuffer)
(100,service)
(101,break;)
(102,(struct sockaddr*)
(103,0)
(104,accept(listenSocket, NULL, NULL)
(105,&service)
(106,listenSocket)
(107,service.sin_port = htons(TCP_PORT)
(108,)
(109,listenSocket)
(110,WSAStartup(MAKEWORD(2,2)
(111,SOCKET_ERROR)
(112,sizeof(service)
(113,service.sin_addr.s_addr)
(114,listenSocket = INVALID_SOCKET)
(115,inputBuffer[recvResult] = '\\0')
(116,NULL)
(117,sin_family)
(118,wsaDataInit = 1)
(119,break;)
(120,break;)
(121,count)
(122,listenSocket)
(123,)
(124,if (WSAStartup(MAKEWORD(2,2)
(125,acceptSocket)
(126,SOCKET_ERROR)
(127,listen(listenSocket, LISTEN_BACKLOG)
(128,wsaDataInit = 0)
(129,listenSocket != INVALID_SOCKET)
(130,CHAR_ARRAY_SIZE - 1)
(131,service.sin_family = AF_INET)
(132,struct sockaddr*)
(133,break;)
(134,do)
(135,recvResult)
(136,bind(listenSocket, (struct sockaddr*)
(137,recvResult == 0)
(138,RET)
(139,service)
(140,IPPROTO_TCP)
(141,TCP_PORT)
(142,listenSocket)
(143,inputBuffer)
(144,INVALID_SOCKET)
(145,)
(146,count = atoi(inputBuffer)
(147,)
(148,MAKEWORD(2,2)
(149,listenSocket)
(150,count)
(151,inputBuffer)
(152,INADDR_ANY)
(153,)
(154,)
(155,)
(156,if (recvResult == SOCKET_ERROR || recvResult == 0)
(157,if (listenSocket == INVALID_SOCKET)
(158,if (acceptSocket != INVALID_SOCKET)
(159,acceptSocket != INVALID_SOCKET)
(160,CHAR_ARRAY_SIZE)
(161,wsaDataInit)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^