-----label-----
1
-----code-----
int MPID_nem_ptl_init_id(MPIDI_VC_t *vc)
{
    int mpi_errno = MPI_SUCCESS;
    MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);
    char *bc;
    int pmi_errno;
    int val_max_sz;
    MPIU_CHKLMEM_DECL(1);
    MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_PTL_INIT_ID);

    MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_PTL_INIT_ID);

    pmi_errno = PMI_KVS_Get_value_length_max(&val_max_sz);
    MPIU_ERR_CHKANDJUMP1(pmi_errno, mpi_errno, MPI_ERR_OTHER, "**fail", "**fail %d", pmi_errno);
    MPIU_CHKLMEM_MALLOC(bc, char *, val_max_sz, mpi_errno, "bc");

    mpi_errno = vc->pg->getConnInfo(vc->pg_rank, bc, val_max_sz, vc->pg);
    if (mpi_errno) MPIU_ERR_POP(mpi_errno);

    mpi_errno = MPID_nem_ptl_get_id_from_bc(bc, &vc_ptl->id, &vc_ptl->pt, &vc_ptl->ptg, &vc_ptl->ptc);
    if (mpi_errno) MPIU_ERR_POP(mpi_errno);

    vc_ptl->id_initialized = TRUE;

    MPIDI_CHANGE_VC_STATE(vc, ACTIVE);

 fn_exit:
    MPIU_CHKLMEM_FREEALL();
    MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_PTL_INIT_ID);
    return mpi_errno;
 fn_fail:
    goto fn_exit;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
12,13
13,14
13,15
15,16
15,17
17,18
18,19
20,21
21,22
21,23
22,23
24,25
24,26
24,27
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
36,37
36,38
39,40
40,41
40,42
42,43
44,45
45,46
45,47
47,48
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
59,60
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
69,70
71,72
71,73
72,73
74,75
75,76
77,78
78,79
78,80
78,81
78,82
78,83
78,84
78,85
79,80
81,82
83,84
85,86
89,90
91,92
92,93
93,94
93,95
94,95
96,97
96,98
96,99
96,100
96,101
97,98
97,99
98,99
98,100
99,100
103,104
103,105
104,105
107,108
109,110
111,112
111,113
112,113
115,116
115,117
116,117
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
128,130
128,131
128,132
128,133
128,134
129,130
131,132
133,134
134,135
134,136
135,136
138,139
139,140
139,141
140,141
143,144
144,145
144,146
145,146
148,149
149,150
149,151
150,151
153,154
153,155
154,155
156,157
157,158
157,159
158,159
160,161
162,163
163,164
163,165
164,165
164,166
165,166
168,169
170,171
171,172
171,173
171,174
172,173
174,175
176,177
178,179
178,180
180,181
181,182
182,183
184,185
185,186
185,187
186,187
188,189
190,191
191,192
193,194
193,195
195,196
-----nextToken-----
2,4,7,9,10,14,16,19,23,25,26,30,32,35,37,38,41,43,46,48,52,53,57,60,64,66,70,73,76,80,82,84,86,87,88,90,95,100,101,102,105,106,108,110,113,114,117,121,123,127,130,132,136,137,141,142,146,147,151,152,155,159,161,166,167,169,173,175,177,179,183,187,189,192,194,196
-----computeFrom-----
68,69
68,70
93,94
93,95
125,126
125,127
163,164
163,165
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;GotoStatement;Name;
-----ast_node-----
int MPID_nem_ptl_init_id(MPIDI_VC_t *vc){    int mpi_errno = MPI_SUCCESS;    MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);    char *bc;    int pmi_errno;    int val_max_sz;    MPIU_CHKLMEM_DECL(1);    MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_PTL_INIT_ID);    MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_PTL_INIT_ID);    pmi_errno = PMI_KVS_Get_value_length_max(&val_max_sz);    MPIU_ERR_CHKANDJUMP1(pmi_errno, mpi_errno, MPI_ERR_OTHER, "**fail", "**fail %d", pmi_errno);    MPIU_CHKLMEM_MALLOC(bc, char *, val_max_sz, mpi_errno, "bc");    mpi_errno = vc->pg->getConnInfo(vc->pg_rank, bc, val_max_sz, vc->pg);    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    mpi_errno = MPID_nem_ptl_get_id_from_bc(bc, &vc_ptl->id, &vc_ptl->pt, &vc_ptl->ptg, &vc_ptl->ptc);    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    vc_ptl->id_initialized = TRUE;    MPIDI_CHANGE_VC_STATE(vc, ACTIVE); fn_exit:    MPIU_CHKLMEM_FREEALL();    MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_PTL_INIT_ID);    return mpi_errno; fn_fail:    goto fn_exit;}
int
MPID_nem_ptl_init_id(MPIDI_VC_t *vc)
MPID_nem_ptl_init_id
MPIDI_VC_t *vc
MPIDI_VC_t
MPIDI_VC_t
*vc
*
vc
{    int mpi_errno = MPI_SUCCESS;    MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);    char *bc;    int pmi_errno;    int val_max_sz;    MPIU_CHKLMEM_DECL(1);    MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_PTL_INIT_ID);    MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_PTL_INIT_ID);    pmi_errno = PMI_KVS_Get_value_length_max(&val_max_sz);    MPIU_ERR_CHKANDJUMP1(pmi_errno, mpi_errno, MPI_ERR_OTHER, "**fail", "**fail %d", pmi_errno);    MPIU_CHKLMEM_MALLOC(bc, char *, val_max_sz, mpi_errno, "bc");    mpi_errno = vc->pg->getConnInfo(vc->pg_rank, bc, val_max_sz, vc->pg);    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    mpi_errno = MPID_nem_ptl_get_id_from_bc(bc, &vc_ptl->id, &vc_ptl->pt, &vc_ptl->ptg, &vc_ptl->ptc);    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    vc_ptl->id_initialized = TRUE;    MPIDI_CHANGE_VC_STATE(vc, ACTIVE); fn_exit:    MPIU_CHKLMEM_FREEALL();    MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_PTL_INIT_ID);    return mpi_errno; fn_fail:    goto fn_exit;}
int mpi_errno = MPI_SUCCESS;
int mpi_errno = MPI_SUCCESS;
int
mpi_errno = MPI_SUCCESS
mpi_errno
= MPI_SUCCESS
MPI_SUCCESS
MPI_SUCCESS
MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);
MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);
MPID_nem_ptl_vc_area
MPID_nem_ptl_vc_area
*const vc_ptl = VC_PTL(vc)
*const
vc_ptl
= VC_PTL(vc)
VC_PTL(vc)
VC_PTL
VC_PTL
vc
vc
char *bc;
char *bc;
char
*bc
*
bc
int pmi_errno;
int pmi_errno;
int
pmi_errno
pmi_errno
int val_max_sz;
int val_max_sz;
int
val_max_sz
val_max_sz
MPIU_CHKLMEM_DECL(1);
MPIU_CHKLMEM_DECL(1)
MPIU_CHKLMEM_DECL
MPIU_CHKLMEM_DECL
1
MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_PTL_INIT_ID);
MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_PTL_INIT_ID);
MPIDI_STATE_DECL
MPIDI_STATE_DECL
(MPID_STATE_MPID_NEM_PTL_INIT_ID)
MPID_STATE_MPID_NEM_PTL_INIT_ID
MPID_STATE_MPID_NEM_PTL_INIT_ID
MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_PTL_INIT_ID);
MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_PTL_INIT_ID)
MPIDI_FUNC_ENTER
MPIDI_FUNC_ENTER
MPID_STATE_MPID_NEM_PTL_INIT_ID
MPID_STATE_MPID_NEM_PTL_INIT_ID
pmi_errno = PMI_KVS_Get_value_length_max(&val_max_sz);
pmi_errno = PMI_KVS_Get_value_length_max(&val_max_sz)
pmi_errno
pmi_errno
PMI_KVS_Get_value_length_max(&val_max_sz)
PMI_KVS_Get_value_length_max
PMI_KVS_Get_value_length_max
&val_max_sz
val_max_sz
val_max_sz
MPIU_ERR_CHKANDJUMP1(pmi_errno, mpi_errno, MPI_ERR_OTHER, "**fail", "**fail %d", pmi_errno);
MPIU_ERR_CHKANDJUMP1(pmi_errno, mpi_errno, MPI_ERR_OTHER, "**fail", "**fail %d", pmi_errno)
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
pmi_errno
pmi_errno
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**fail"
"**fail %d"
pmi_errno
pmi_errno
MPIU_CHKLMEM_MALLOC(bc, char *, val_max_sz, mpi_errno, "bc");
mpi_errno = vc->pg->getConnInfo(vc->pg_rank, bc, val_max_sz, vc->pg);
mpi_errno = vc->pg->getConnInfo(vc->pg_rank, bc, val_max_sz, vc->pg)
mpi_errno
mpi_errno
vc->pg->getConnInfo(vc->pg_rank, bc, val_max_sz, vc->pg)
vc->pg->getConnInfo
vc->pg
vc
vc
pg
getConnInfo
vc->pg_rank
vc
vc
pg_rank
bc
bc
val_max_sz
val_max_sz
vc->pg
vc
vc
pg
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
mpi_errno = MPID_nem_ptl_get_id_from_bc(bc, &vc_ptl->id, &vc_ptl->pt, &vc_ptl->ptg, &vc_ptl->ptc);
mpi_errno = MPID_nem_ptl_get_id_from_bc(bc, &vc_ptl->id, &vc_ptl->pt, &vc_ptl->ptg, &vc_ptl->ptc)
mpi_errno
mpi_errno
MPID_nem_ptl_get_id_from_bc(bc, &vc_ptl->id, &vc_ptl->pt, &vc_ptl->ptg, &vc_ptl->ptc)
MPID_nem_ptl_get_id_from_bc
MPID_nem_ptl_get_id_from_bc
bc
bc
&vc_ptl->id
vc_ptl->id
vc_ptl
vc_ptl
id
&vc_ptl->pt
vc_ptl->pt
vc_ptl
vc_ptl
pt
&vc_ptl->ptg
vc_ptl->ptg
vc_ptl
vc_ptl
ptg
&vc_ptl->ptc
vc_ptl->ptc
vc_ptl
vc_ptl
ptc
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
vc_ptl->id_initialized = TRUE;
vc_ptl->id_initialized = TRUE
vc_ptl->id_initialized
vc_ptl
vc_ptl
id_initialized
TRUE
TRUE
MPIDI_CHANGE_VC_STATE(vc, ACTIVE);
MPIDI_CHANGE_VC_STATE(vc, ACTIVE)
MPIDI_CHANGE_VC_STATE
MPIDI_CHANGE_VC_STATE
vc
vc
ACTIVE
ACTIVE
fn_exit:    MPIU_CHKLMEM_FREEALL();
fn_exit
MPIU_CHKLMEM_FREEALL();
MPIU_CHKLMEM_FREEALL()
MPIU_CHKLMEM_FREEALL
MPIU_CHKLMEM_FREEALL
MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_PTL_INIT_ID);
MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_PTL_INIT_ID)
MPIDI_FUNC_EXIT
MPIDI_FUNC_EXIT
MPID_STATE_MPID_NEM_PTL_INIT_ID
MPID_STATE_MPID_NEM_PTL_INIT_ID
return mpi_errno;
mpi_errno
mpi_errno
fn_fail:    goto fn_exit;
fn_fail
goto fn_exit;
fn_exit
-----joern-----
(30,74,0)
(29,61,0)
(47,9,0)
(83,35,0)
(38,55,0)
(0,21,0)
(82,61,0)
(32,61,0)
(9,61,0)
(40,61,0)
(10,9,0)
(5,33,0)
(64,77,0)
(54,26,0)
(55,7,0)
(32,33,0)
(51,80,0)
(60,66,0)
(21,0,0)
(68,5,0)
(76,35,0)
(14,26,0)
(85,41,0)
(35,31,0)
(4,61,0)
(84,0,0)
(62,20,0)
(51,20,0)
(52,77,0)
(44,61,0)
(23,0,0)
(22,66,0)
(43,44,0)
(78,21,0)
(41,77,0)
(36,66,0)
(16,35,0)
(57,31,0)
(74,30,0)
(14,78,0)
(45,64,0)
(28,61,0)
(7,78,0)
(33,5,0)
(80,77,0)
(51,41,0)
(50,51,0)
(12,64,0)
(27,61,0)
(20,51,0)
(17,61,0)
(78,14,0)
(48,61,0)
(65,61,0)
(64,61,0)
(1,30,0)
(35,61,0)
(49,61,0)
(71,61,0)
(80,51,0)
(33,32,0)
(79,51,0)
(58,27,0)
(11,32,0)
(86,7,0)
(52,40,0)
(59,80,0)
(22,78,0)
(46,61,0)
(69,46,0)
(24,30,0)
(74,78,0)
(56,55,0)
(25,41,0)
(66,22,0)
(67,7,0)
(53,78,0)
(42,35,0)
(70,47,0)
(72,86,0)
(18,35,0)
(15,20,0)
(40,52,0)
(21,78,0)
(19,65,0)
(55,61,0)
(39,61,0)
(41,51,0)
(63,26,0)
(8,40,0)
(26,14,0)
(78,7,0)
(35,32,0)
(75,62,0)
(7,61,0)
(31,61,0)
(37,31,0)
(2,52,0)
(81,80,0)
(13,47,0)
(78,22,0)
(20,61,0)
(73,61,0)
(78,74,0)
(6,35,0)
(78,14,1)
(74,30,1)
(45,12,1)
(64,45,1)
(79,50,1)
(27,58,1)
(41,77,1)
(68,11,1)
(65,19,1)
(85,25,1)
(36,14,1)
(22,66,1)
(30,1,1)
(80,77,1)
(51,41,1)
(67,62,1)
(43,65,1)
(31,57,1)
(52,2,1)
(14,26,1)
(19,27,1)
(66,60,1)
(10,47,1)
(78,22,1)
(41,85,1)
(15,35,1)
(17,64,1)
(83,16,1)
(62,75,1)
(84,22,1)
(16,42,1)
(2,8,1)
(46,69,1)
(57,37,1)
(13,86,1)
(64,77,1)
(38,46,1)
(70,13,1)
(58,40,1)
(8,31,1)
(56,55,1)
(35,32,1)
(78,21,1)
(59,81,1)
(76,18,1)
(13,34,1)
(86,72,1)
(53,67,1)
(0,23,1)
(69,17,1)
(32,33,1)
(33,5,1)
(86,7,1)
(7,78,1)
(12,9,1)
(62,20,1)
(52,77,1)
(25,15,1)
(20,51,1)
(42,32,1)
(67,3,1)
(5,68,1)
(34,7,1)
(18,83,1)
(26,63,1)
(9,10,1)
(55,38,1)
(40,52,1)
(17,71,1)
(11,44,1)
(60,36,1)
(35,31,1)
(75,3,1)
(23,84,1)
(80,59,1)
(51,80,1)
(3,20,1)
(81,79,1)
(50,41,1)
(72,34,1)
(35,6,1)
(21,0,1)
(47,70,1)
(55,7,1)
(1,24,1)
(54,53,1)
(63,54,1)
(78,74,1)
(6,76,1)
(44,43,1)
(24,21,1)
(78,21,2)
(86,7,2)
(14,26,2)
(33,5,2)
(7,78,2)
(40,52,2)
(62,3,2)
(56,55,2)
(21,0,2)
(51,80,2)
(86,34,2)
(52,77,2)
(41,77,2)
(75,3,2)
(80,77,2)
(72,34,2)
(78,22,2)
(74,30,2)
(22,66,2)
(55,7,2)
(62,20,2)
(35,31,2)
(78,74,2)
(35,32,2)
(51,41,2)
(20,51,2)
(32,33,2)
(78,14,2)
(64,77,2)
-----------------------------------
(0,vc_ptl->ptg)
(1,ptc)
(2,vc)
(3,mpi_errno)
(4,if (mpi_errno)
(5,&val_max_sz)
(6,pmi_errno)
(7,mpi_errno = MPID_nem_ptl_get_id_from_bc(bc, &vc_ptl->id, &vc_ptl->pt, &vc_ptl->ptg, &vc_ptl->ptc)
(8,vc_ptl)
(9,vc_ptl->id_initialized = TRUE)
(10,TRUE)
(11,pmi_errno)
(12,vc)
(13,vc_ptl)
(14,&vc_ptl->id)
(15,mpi_errno)
(16,mpi_errno)
(17,MPIU_CHKLMEM_FREEALL()
(18,"**fail")
(19,MPID_STATE_MPID_NEM_PTL_INIT_ID)
(20,mpi_errno = vc->pg->getConnInfo(vc->pg_rank, bc, val_max_sz, vc->pg)
(21,&vc_ptl->ptg)
(22,&vc_ptl->pt)
(23,ptg)
(24,vc_ptl)
(25,vc)
(26,vc_ptl->id)
(27,MPIU_CHKLMEM_DECL(1)
(28,fn_exit:)
(29,if (mpi_errno)
(30,vc_ptl->ptc)
(31,mpi_errno = MPI_SUCCESS)
(32,pmi_errno = PMI_KVS_Get_value_length_max(&val_max_sz)
(33,PMI_KVS_Get_value_length_max(&val_max_sz)
(34,mpi_errno)
(35,MPIU_ERR_CHKANDJUMP1(pmi_errno, mpi_errno, MPI_ERR_OTHER, "**fail", "**fail %d", pmi_errno)
(36,vc_ptl)
(37,mpi_errno)
(38,mpi_errno)
(39,bc)
(40,vc_ptl = VC_PTL(vc)
(41,vc->pg_rank)
(42,pmi_errno)
(43,MPID_STATE_MPID_NEM_PTL_INIT_ID)
(44,MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_PTL_INIT_ID)
(45,ACTIVE)
(46,MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_PTL_INIT_ID)
(47,vc_ptl->id_initialized)
(48,fn_fail:)
(49,pmi_errno)
(50,bc)
(51,vc->pg->getConnInfo(vc->pg_rank, bc, val_max_sz, vc->pg)
(52,VC_PTL(vc)
(53,bc)
(54,vc_ptl)
(55,return mpi_errno;)
(56,RET)
(57,MPI_SUCCESS)
(58,1)
(59,pg)
(60,pt)
(61,)
(62,MPIU_ERR_POP(mpi_errno)
(63,id)
(64,MPIDI_CHANGE_VC_STATE(vc, ACTIVE)
(65,MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_PTL_INIT_ID)
(66,vc_ptl->pt)
(67,mpi_errno)
(68,val_max_sz)
(69,MPID_STATE_MPID_NEM_PTL_INIT_ID)
(70,id_initialized)
(71,goto fn_exit;)
(72,mpi_errno)
(73,val_max_sz)
(74,&vc_ptl->ptc)
(75,mpi_errno)
(76,"**fail %d")
(77,MPIDI_VC_t *vc)
(78,MPID_nem_ptl_get_id_from_bc(bc, &vc_ptl->id, &vc_ptl->pt, &vc_ptl->ptg, &vc_ptl->ptc)
(79,val_max_sz)
(80,vc->pg)
(81,vc)
(82,mpi_errno)
(83,MPI_ERR_OTHER)
(84,vc_ptl)
(85,pg_rank)
(86,MPIU_ERR_POP(mpi_errno)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^