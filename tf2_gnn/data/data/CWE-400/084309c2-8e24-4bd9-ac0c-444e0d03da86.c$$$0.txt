-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_07_bad()
{
    int64_t * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
77,78
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,61,62,63,67,70,71,75,76,78
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_07_bad(){    int64_t * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_calloc_07_bad()
CWE401_Memory_Leak__int64_t_calloc_07_bad
{    int64_t * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(25,3,0)
(2,5,0)
(18,5,0)
(13,2,0)
(5,2,0)
(3,5,0)
(22,18,0)
(26,1,0)
(0,5,0)
(6,20,0)
(17,33,0)
(5,20,0)
(33,19,0)
(6,3,0)
(31,1,0)
(16,19,0)
(10,27,0)
(21,11,0)
(36,10,0)
(35,23,0)
(28,15,0)
(4,20,0)
(23,15,0)
(32,15,0)
(9,20,0)
(27,29,0)
(34,18,0)
(30,11,0)
(2,13,0)
(24,15,0)
(19,33,0)
(27,10,0)
(8,23,0)
(3,6,0)
(2,33,0)
(33,2,0)
(14,3,0)
(5,2,1)
(18,34,1)
(2,13,1)
(26,11,1)
(21,30,1)
(0,11,1)
(22,5,1)
(27,10,1)
(34,22,1)
(18,5,1)
(11,21,1)
(35,8,1)
(23,35,1)
(2,33,1)
(31,26,1)
(3,14,1)
(4,27,1)
(36,18,1)
(30,23,1)
(16,17,1)
(10,36,1)
(4,18,1)
(17,0,1)
(3,5,1)
(25,4,1)
(26,6,1)
(6,3,1)
(1,31,1)
(14,25,1)
(19,16,1)
(33,19,1)
(12,1,1)
(27,10,2)
(18,11,2)
(27,18,2)
(22,11,2)
(2,13,2)
(3,5,2)
(14,11,2)
(5,11,2)
(2,11,2)
(4,11,2)
(16,11,2)
(34,11,2)
(18,5,2)
(3,11,2)
(17,11,2)
(10,18,2)
(19,11,2)
(33,11,2)
(6,11,2)
(5,2,2)
(36,18,2)
(33,19,2)
(0,11,2)
(2,33,2)
(6,3,2)
(25,11,2)
-----------------------------------
(0,data)
(1,staticFive==5)
(2,(int64_t *)
(3,data[0])
(4,L)
(5,data = (int64_t *)
(6,printLongLongLine(data[0])
(7, sizeof(int64_t)
(8,data)
(9,if (data == NULL)
(10,-1)
(11,staticFive==5)
(12,RET)
(13,int64_t *)
(14,0)
(15,)
(16,int64_t)
(17,100)
(18,data == NULL)
(19,sizeof(int64_t)
(20,)
(21,5)
(22,data)
(23,data = NULL)
(24,data)
(25,data)
(26,staticFive)
(27,exit(-1)
(28,if(staticFive==5)
(29,)
(30,staticFive)
(31,5)
(32,if(staticFive==5)
(33,calloc(100, sizeof(int64_t)
(34,NULL)
(35,NULL)
(36,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^