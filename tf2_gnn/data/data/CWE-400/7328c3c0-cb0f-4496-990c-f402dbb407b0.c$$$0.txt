-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_34_bad()
{
    int * data;
    CWE401_Memory_Leak__int_malloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    myUnion.unionFirst = data;
    {
        int * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
71,72
71,73
72,73
72,74
73,74
76,77
78,79
78,80
79,80
80,81
80,82
82,83
82,84
82,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,68,69,74,75,77,81,83,84,88,89,90
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_34_bad(){    int * data;    CWE401_Memory_Leak__int_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_34_bad()
CWE401_Memory_Leak__int_malloc_34_bad
{    int * data;    CWE401_Memory_Leak__int_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
CWE401_Memory_Leak__int_malloc_34_unionType myUnion;
CWE401_Memory_Leak__int_malloc_34_unionType myUnion;
CWE401_Memory_Leak__int_malloc_34_unionType
CWE401_Memory_Leak__int_malloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * data = myUnion.unionSecond;
int * data = myUnion.unionSecond;
int
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(5,43,0)
(27,34,0)
(11,39,0)
(42,10,0)
(24,16,0)
(30,10,0)
(25,29,0)
(5,0,0)
(41,31,0)
(39,31,0)
(36,12,0)
(18,32,0)
(12,15,0)
(43,5,0)
(44,10,0)
(19,44,0)
(0,5,0)
(41,15,0)
(10,44,0)
(21,11,0)
(9,11,0)
(20,3,0)
(1,15,0)
(3,31,0)
(11,15,0)
(29,15,0)
(33,37,0)
(12,3,0)
(35,31,0)
(17,7,0)
(16,24,0)
(5,15,0)
(22,34,0)
(13,23,0)
(7,31,0)
(40,31,0)
(44,7,0)
(28,32,0)
(38,24,0)
(39,11,0)
(34,31,0)
(15,31,0)
(24,43,0)
(15,5,0)
(4,16,0)
(11,3,0)
(14,29,0)
(8,12,0)
(26,31,0)
(13,37,0)
(32,41,0)
(37,13,0)
(43,24,0)
(2,41,0)
(22,27,1)
(38,1,1)
(5,0,1)
(14,15,1)
(36,8,1)
(19,41,1)
(21,9,1)
(20,12,1)
(28,18,1)
(30,42,1)
(43,24,1)
(16,4,1)
(39,11,1)
(10,30,1)
(15,5,1)
(37,33,1)
(8,13,1)
(5,43,1)
(2,32,1)
(42,19,1)
(11,3,1)
(24,16,1)
(6,44,1)
(41,15,1)
(13,37,1)
(18,39,1)
(41,2,1)
(33,29,1)
(29,15,1)
(9,3,1)
(25,14,1)
(4,38,1)
(32,28,1)
(1,34,1)
(44,10,1)
(12,15,1)
(11,21,1)
(29,25,1)
(3,20,1)
(8,29,1)
(11,15,1)
(34,22,1)
(12,36,1)
(33,29,2)
(37,29,2)
(24,16,2)
(15,5,2)
(5,0,2)
(11,3,2)
(44,10,2)
(5,43,2)
(12,15,2)
(39,11,2)
(41,15,2)
(29,15,2)
(13,37,2)
(13,29,2)
(43,24,2)
(11,15,2)
-----------------------------------
(0,int *)
(1,data)
(2,data)
(3,data[0] = 5)
(4,int)
(5,(int *)
(6,RET)
(7,)
(8,data)
(9,data)
(10,myUnion.unionSecond)
(11,data[0])
(12,data[0])
(13,exit(-1)
(14,data)
(15,data = (int *)
(16,sizeof(int)
(17,data)
(18,myUnion)
(19,data)
(20,5)
(21,0)
(22,NULL)
(23,)
(24,100*sizeof(int)
(25,NULL)
(26,if (data == NULL)
(27,data)
(28,unionFirst)
(29,data == NULL)
(30,unionSecond)
(31,)
(32,myUnion.unionFirst)
(33,1)
(34,data = NULL)
(35,data)
(36,0)
(37,-1)
(38,100)
(39,printIntLine(data[0])
(40,myUnion)
(41,myUnion.unionFirst = data)
(42,myUnion)
(43,malloc(100*sizeof(int)
(44,* data = myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^