-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_09_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,85,87
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_09_bad(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_09_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_09_bad
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(39,25,0)
(22,19,0)
(34,36,0)
(4,5,0)
(42,22,0)
(30,34,0)
(46,41,0)
(28,17,0)
(25,39,0)
(20,10,0)
(21,34,0)
(27,43,0)
(46,21,0)
(41,36,0)
(30,13,0)
(13,2,0)
(12,25,0)
(21,46,0)
(10,36,0)
(11,5,0)
(17,43,0)
(31,4,0)
(2,36,0)
(17,34,0)
(18,21,0)
(7,24,0)
(2,13,0)
(3,5,0)
(14,30,0)
(35,33,0)
(1,46,0)
(25,8,0)
(0,34,0)
(34,24,0)
(39,24,0)
(24,34,0)
(8,25,0)
(19,22,0)
(43,10,0)
(43,17,0)
(45,30,0)
(33,34,0)
(38,33,0)
(6,17,0)
(24,39,0)
(13,30,0)
(19,26,0)
(9,8,0)
(15,5,0)
(32,41,0)
(24,7,0)
(23,4,0)
(40,21,0)
(37,36,0)
(25,8,1)
(21,34,1)
(33,38,1)
(31,23,1)
(12,0,1)
(21,40,1)
(13,30,1)
(41,32,1)
(6,19,1)
(45,14,1)
(4,31,1)
(30,45,1)
(10,20,1)
(24,39,1)
(43,27,1)
(2,13,1)
(46,1,1)
(14,41,1)
(29,44,1)
(42,33,1)
(17,28,1)
(46,21,1)
(20,43,1)
(18,10,1)
(0,44,1)
(9,12,1)
(43,17,1)
(29,2,1)
(8,9,1)
(17,34,1)
(40,18,1)
(38,35,1)
(35,34,1)
(34,24,1)
(28,6,1)
(19,22,1)
(6,33,1)
(24,7,1)
(1,21,1)
(27,17,1)
(22,42,1)
(16,29,1)
(39,25,1)
(33,34,1)
(32,46,1)
(44,4,1)
(30,34,1)
(10,44,2)
(43,17,2)
(34,44,2)
(46,44,2)
(42,33,2)
(40,44,2)
(38,44,2)
(33,44,2)
(8,44,2)
(17,34,2)
(18,44,2)
(24,44,2)
(22,33,2)
(2,44,2)
(13,44,2)
(21,44,2)
(17,44,2)
(0,44,2)
(30,44,2)
(39,25,2)
(2,13,2)
(21,34,2)
(1,44,2)
(13,30,2)
(19,22,2)
(35,44,2)
(41,44,2)
(27,44,2)
(14,44,2)
(25,8,2)
(20,44,2)
(46,21,2)
(25,44,2)
(32,44,2)
(39,44,2)
(6,44,2)
(43,44,2)
(34,24,2)
(24,39,2)
(30,34,2)
(28,44,2)
(9,44,2)
(33,34,2)
(19,33,2)
(24,7,2)
(45,44,2)
(12,44,2)
-----------------------------------
(0,data)
(1,intTwo)
(2,printStructLine(&data[0])
(3,if(GLOBAL_CONST_TRUE)
(4,data = NULL)
(5,)
(6,data)
(7,twoIntsStruct *)
(8,sizeof(twoIntsStruct)
(9,twoIntsStruct)
(10,data[0].intOne = 0)
(11,data)
(12,100)
(13,&data[0])
(14,data)
(15,if(GLOBAL_CONST_TRUE)
(16,RET)
(17,data[0])
(18,data)
(19,exit(-1)
(20,0)
(21,data[0])
(22,-1)
(23,data)
(24,(twoIntsStruct *)
(25,100*sizeof(twoIntsStruct)
(26,)
(27,intOne)
(28,0)
(29,GLOBAL_CONST_TRUE)
(30,data[0])
(31,NULL)
(32,0)
(33,data == NULL)
(34,data = (twoIntsStruct *)
(35,data)
(36,)
(37,if (data == NULL)
(38,NULL)
(39,malloc(100*sizeof(twoIntsStruct)
(40,0)
(41,data[0].intTwo = 0)
(42,1)
(43,data[0].intOne)
(44,GLOBAL_CONST_TRUE)
(45,0)
(46,data[0].intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^