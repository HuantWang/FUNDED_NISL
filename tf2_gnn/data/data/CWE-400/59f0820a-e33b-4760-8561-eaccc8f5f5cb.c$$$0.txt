-----label-----
1
-----code-----
static void ll_temac_recv(struct net_device *ndev)
{
	struct temac_local *lp = netdev_priv(ndev);
	struct sk_buff *skb, *new_skb;
	unsigned int bdstat;
	struct cdmac_bd *cur_p;
	dma_addr_t tail_p, skb_dma_addr;
	int length;
	unsigned long flags;

	spin_lock_irqsave(&lp->rx_lock, flags);

	tail_p = lp->rx_bd_p + sizeof(*lp->rx_bd_v) * lp->rx_bd_ci;
	cur_p = &lp->rx_bd_v[lp->rx_bd_ci];

	bdstat = be32_to_cpu(cur_p->app0);
	while ((bdstat & STS_CTRL_APP0_CMPLT)) {

		skb = lp->rx_skb[lp->rx_bd_ci];
		length = be32_to_cpu(cur_p->app4) & 0x3FFF;

		dma_unmap_single(ndev->dev.parent, be32_to_cpu(cur_p->phys),
				 length, DMA_FROM_DEVICE);

		skb_put(skb, length);
		skb->protocol = eth_type_trans(skb, ndev);
		skb_checksum_none_assert(skb);

		/* if we're doing rx csum offload, set it up */
		if (((lp->temac_features & TEMAC_FEATURE_RX_CSUM) != 0) &&
		    (skb->protocol == htons(ETH_P_IP)) &&
		    (skb->len > 64)) {

			/* Convert from device endianness (be32) to cpu
			 * endiannes, and if necessary swap the bytes
			 * (back) for proper IP checksum byte order
			 * (be16).
			 */
			skb->csum = htons(be32_to_cpu(cur_p->app3) & 0xFFFF);
			skb->ip_summed = CHECKSUM_COMPLETE;
		}

		if (!skb_defer_rx_timestamp(skb))
			netif_rx(skb);

		ndev->stats.rx_packets++;
		ndev->stats.rx_bytes += length;

		new_skb = netdev_alloc_skb_ip_align(ndev,
						XTE_MAX_JUMBO_FRAME_SIZE);
		if (!new_skb) {
			spin_unlock_irqrestore(&lp->rx_lock, flags);
			return;
		}

		cur_p->app0 = cpu_to_be32(STS_CTRL_APP0_IRQONEND);
		skb_dma_addr = dma_map_single(ndev->dev.parent, new_skb->data,
					      XTE_MAX_JUMBO_FRAME_SIZE,
					      DMA_FROM_DEVICE);
		cur_p->phys = cpu_to_be32(skb_dma_addr);
		cur_p->len = cpu_to_be32(XTE_MAX_JUMBO_FRAME_SIZE);
		lp->rx_skb[lp->rx_bd_ci] = new_skb;

		lp->rx_bd_ci++;
		if (lp->rx_bd_ci >= RX_BD_NUM)
			lp->rx_bd_ci = 0;

		cur_p = &lp->rx_bd_v[lp->rx_bd_ci];
		bdstat = be32_to_cpu(cur_p->app0);
	}
	lp->dma_out(lp, RX_TAILDESC_PTR, tail_p);

	spin_unlock_irqrestore(&lp->rx_lock, flags);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
26,29
27,28
29,30
29,31
32,33
32,34
35,36
36,37
36,38
38,39
40,41
41,42
41,43
42,43
44,45
44,46
47,48
48,49
48,50
48,51
49,50
51,52
53,54
55,56
56,57
56,58
58,59
60,61
61,62
61,63
63,64
65,66
66,67
66,68
66,69
67,68
69,70
70,71
70,72
71,72
74,75
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
85,86
85,87
86,87
87,88
88,89
89,90
89,91
90,91
93,94
93,95
94,95
97,98
98,99
98,100
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
107,109
108,109
111,112
112,113
112,114
113,114
115,116
115,117
116,117
118,119
118,120
119,120
122,123
122,124
123,124
124,125
124,126
125,126
127,128
129,130
129,131
129,132
129,133
129,134
129,135
129,136
129,137
129,138
129,139
129,140
129,141
129,142
129,143
129,144
129,145
129,146
129,147
129,148
129,149
129,150
130,131
131,132
131,133
132,133
134,135
134,136
135,136
135,137
136,137
139,140
139,141
140,141
143,144
144,145
144,146
145,146
147,148
147,149
148,149
148,150
149,150
151,152
151,153
152,153
156,157
157,158
157,159
157,160
157,161
157,162
158,159
160,161
160,162
161,162
161,163
162,163
166,167
166,168
167,168
169,170
169,171
170,171
173,174
175,176
177,178
178,179
178,180
178,181
179,180
181,182
183,184
185,186
186,187
186,188
187,188
187,189
188,189
191,192
191,193
191,194
192,193
194,195
196,197
198,199
199,200
199,201
200,201
202,203
204,205
204,206
205,206
205,207
206,207
206,208
207,208
208,209
208,210
209,210
210,211
210,212
211,212
211,213
212,213
215,216
218,219
219,220
219,221
220,221
220,222
221,222
224,225
224,226
225,226
227,228
229,230
230,231
230,232
231,232
231,233
232,233
236,237
236,238
237,238
238,239
238,240
239,240
239,241
240,241
243,244
243,245
244,245
246,247
246,248
247,248
247,249
248,249
250,251
250,252
251,252
255,256
256,257
256,258
257,258
257,259
258,259
261,262
263,264
263,265
264,265
265,266
265,267
266,267
268,269
270,271
271,272
271,273
272,273
274,275
276,277
277,278
278,279
278,280
279,280
279,281
280,281
284,285
285,286
285,287
286,287
286,288
287,288
287,289
288,289
292,293
294,295
295,296
295,297
296,297
298,299
298,300
298,301
299,300
301,302
303,304
305,306
305,307
306,307
307,308
309,310
309,311
310,311
311,312
311,313
311,314
312,313
314,315
315,316
315,317
316,317
319,320
322,323
323,324
323,325
324,325
324,326
325,326
328,329
328,330
329,330
331,332
333,334
334,335
334,336
335,336
337,338
337,339
337,340
337,341
337,342
338,339
340,341
340,342
341,342
341,343
342,343
346,347
346,348
347,348
350,351
352,353
354,355
355,356
355,357
356,357
356,358
357,358
360,361
360,362
361,362
363,364
365,366
366,367
366,368
367,368
367,369
368,369
371,372
371,373
372,373
374,375
376,377
377,378
377,379
378,379
378,380
379,380
379,381
380,381
383,384
383,385
384,385
387,388
389,390
390,391
391,392
391,393
392,393
395,396
395,397
396,397
396,398
397,398
397,399
398,399
401,402
403,404
404,405
404,406
405,406
405,407
406,407
410,411
411,412
411,413
412,413
414,415
415,416
415,417
416,417
416,418
417,418
420,421
420,422
421,422
424,425
425,426
425,427
426,427
428,429
428,430
429,430
431,432
431,433
432,433
435,436
436,437
436,438
436,439
436,440
437,438
437,439
438,439
441,442
443,444
445,446
447,448
448,449
448,450
448,451
449,450
451,452
452,453
452,454
453,454
456,457
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,28,30,31,33,34,37,39,43,45,46,50,52,54,57,59,62,64,68,72,73,75,79,83,84,91,92,95,96,100,105,106,109,110,114,117,120,121,126,128,133,137,138,141,142,146,150,153,154,155,159,163,164,165,168,171,172,174,176,180,182,184,189,190,193,195,197,201,203,213,214,216,217,222,223,226,228,233,234,235,241,242,245,249,252,253,254,259,260,262,267,269,273,275,281,282,283,289,290,291,293,297,300,302,304,308,313,317,318,320,321,326,327,330,332,336,339,343,344,345,348,349,351,353,358,359,362,364,369,370,373,375,381,382,385,386,388,393,394,399,400,402,407,408,409,413,418,419,422,423,427,430,433,434,439,440,442,444,446,450,454,455,457
-----computeFrom-----
77,78
77,79
80,81
80,82
85,86
85,87
98,99
98,100
112,113
112,114
124,125
124,126
131,132
131,133
144,145
144,146
147,148
147,149
186,187
186,188
205,206
205,207
206,207
206,208
208,209
208,210
210,211
210,212
219,220
219,221
230,231
230,232
238,239
238,240
246,247
246,248
256,257
256,258
285,286
285,287
295,296
295,297
323,324
323,325
334,335
334,336
355,356
355,357
366,367
366,368
377,378
377,379
396,397
396,398
404,405
404,406
411,412
411,413
425,426
425,427
-----guardedBy-----
226,245
233,259
399,407
400,408
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static void ll_temac_recv(struct net_device *ndev){	struct temac_local *lp = netdev_priv(ndev);	struct sk_buff *skb, *new_skb;	unsigned int bdstat;	struct cdmac_bd *cur_p;	dma_addr_t tail_p, skb_dma_addr;	int length;	unsigned long flags;	spin_lock_irqsave(&lp->rx_lock, flags);	tail_p = lp->rx_bd_p + sizeof(*lp->rx_bd_v) * lp->rx_bd_ci;	cur_p = &lp->rx_bd_v[lp->rx_bd_ci];	bdstat = be32_to_cpu(cur_p->app0);	while ((bdstat & STS_CTRL_APP0_CMPLT)) {		skb = lp->rx_skb[lp->rx_bd_ci];		length = be32_to_cpu(cur_p->app4) & 0x3FFF;		dma_unmap_single(ndev->dev.parent, be32_to_cpu(cur_p->phys),				 length, DMA_FROM_DEVICE);		skb_put(skb, length);		skb->protocol = eth_type_trans(skb, ndev);		skb_checksum_none_assert(skb);		/* if we're doing rx csum offload, set it up */		if (((lp->temac_features & TEMAC_FEATURE_RX_CSUM) != 0) &&		    (skb->protocol == htons(ETH_P_IP)) &&		    (skb->len > 64)) {			/* Convert from device endianness (be32) to cpu			 * endiannes, and if necessary swap the bytes			 * (back) for proper IP checksum byte order			 * (be16).			 */			skb->csum = htons(be32_to_cpu(cur_p->app3) & 0xFFFF);			skb->ip_summed = CHECKSUM_COMPLETE;		}		if (!skb_defer_rx_timestamp(skb))			netif_rx(skb);		ndev->stats.rx_packets++;		ndev->stats.rx_bytes += length;		new_skb = netdev_alloc_skb_ip_align(ndev,						XTE_MAX_JUMBO_FRAME_SIZE);		if (!new_skb) {			spin_unlock_irqrestore(&lp->rx_lock, flags);			return;		}		cur_p->app0 = cpu_to_be32(STS_CTRL_APP0_IRQONEND);		skb_dma_addr = dma_map_single(ndev->dev.parent, new_skb->data,					      XTE_MAX_JUMBO_FRAME_SIZE,					      DMA_FROM_DEVICE);		cur_p->phys = cpu_to_be32(skb_dma_addr);		cur_p->len = cpu_to_be32(XTE_MAX_JUMBO_FRAME_SIZE);		lp->rx_skb[lp->rx_bd_ci] = new_skb;		lp->rx_bd_ci++;		if (lp->rx_bd_ci >= RX_BD_NUM)			lp->rx_bd_ci = 0;		cur_p = &lp->rx_bd_v[lp->rx_bd_ci];		bdstat = be32_to_cpu(cur_p->app0);	}	lp->dma_out(lp, RX_TAILDESC_PTR, tail_p);	spin_unlock_irqrestore(&lp->rx_lock, flags);}
static void
ll_temac_recv(struct net_device *ndev)
ll_temac_recv
struct net_device *ndev
struct net_device
net_device
*ndev
*
ndev
{	struct temac_local *lp = netdev_priv(ndev);	struct sk_buff *skb, *new_skb;	unsigned int bdstat;	struct cdmac_bd *cur_p;	dma_addr_t tail_p, skb_dma_addr;	int length;	unsigned long flags;	spin_lock_irqsave(&lp->rx_lock, flags);	tail_p = lp->rx_bd_p + sizeof(*lp->rx_bd_v) * lp->rx_bd_ci;	cur_p = &lp->rx_bd_v[lp->rx_bd_ci];	bdstat = be32_to_cpu(cur_p->app0);	while ((bdstat & STS_CTRL_APP0_CMPLT)) {		skb = lp->rx_skb[lp->rx_bd_ci];		length = be32_to_cpu(cur_p->app4) & 0x3FFF;		dma_unmap_single(ndev->dev.parent, be32_to_cpu(cur_p->phys),				 length, DMA_FROM_DEVICE);		skb_put(skb, length);		skb->protocol = eth_type_trans(skb, ndev);		skb_checksum_none_assert(skb);		/* if we're doing rx csum offload, set it up */		if (((lp->temac_features & TEMAC_FEATURE_RX_CSUM) != 0) &&		    (skb->protocol == htons(ETH_P_IP)) &&		    (skb->len > 64)) {			/* Convert from device endianness (be32) to cpu			 * endiannes, and if necessary swap the bytes			 * (back) for proper IP checksum byte order			 * (be16).			 */			skb->csum = htons(be32_to_cpu(cur_p->app3) & 0xFFFF);			skb->ip_summed = CHECKSUM_COMPLETE;		}		if (!skb_defer_rx_timestamp(skb))			netif_rx(skb);		ndev->stats.rx_packets++;		ndev->stats.rx_bytes += length;		new_skb = netdev_alloc_skb_ip_align(ndev,						XTE_MAX_JUMBO_FRAME_SIZE);		if (!new_skb) {			spin_unlock_irqrestore(&lp->rx_lock, flags);			return;		}		cur_p->app0 = cpu_to_be32(STS_CTRL_APP0_IRQONEND);		skb_dma_addr = dma_map_single(ndev->dev.parent, new_skb->data,					      XTE_MAX_JUMBO_FRAME_SIZE,					      DMA_FROM_DEVICE);		cur_p->phys = cpu_to_be32(skb_dma_addr);		cur_p->len = cpu_to_be32(XTE_MAX_JUMBO_FRAME_SIZE);		lp->rx_skb[lp->rx_bd_ci] = new_skb;		lp->rx_bd_ci++;		if (lp->rx_bd_ci >= RX_BD_NUM)			lp->rx_bd_ci = 0;		cur_p = &lp->rx_bd_v[lp->rx_bd_ci];		bdstat = be32_to_cpu(cur_p->app0);	}	lp->dma_out(lp, RX_TAILDESC_PTR, tail_p);	spin_unlock_irqrestore(&lp->rx_lock, flags);}
struct temac_local *lp = netdev_priv(ndev);
struct temac_local *lp = netdev_priv(ndev);
struct temac_local
temac_local
*lp = netdev_priv(ndev)
*
lp
= netdev_priv(ndev)
netdev_priv(ndev)
netdev_priv
netdev_priv
ndev
ndev
struct sk_buff *skb, *new_skb;
struct sk_buff *skb, *new_skb;
struct sk_buff
sk_buff
*skb
*
skb
*new_skb
*
new_skb
unsigned int bdstat;
unsigned int bdstat;
unsigned int
bdstat
bdstat
struct cdmac_bd *cur_p;
struct cdmac_bd *cur_p;
struct cdmac_bd
cdmac_bd
*cur_p
*
cur_p
dma_addr_t tail_p, skb_dma_addr;
dma_addr_t tail_p, skb_dma_addr;
dma_addr_t
dma_addr_t
tail_p
tail_p
skb_dma_addr
skb_dma_addr
int length;
int length;
int
length
length
unsigned long flags;
unsigned long flags;
unsigned long
flags
flags
spin_lock_irqsave(&lp->rx_lock, flags);
spin_lock_irqsave(&lp->rx_lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&lp->rx_lock
lp->rx_lock
lp
lp
rx_lock
flags
flags
tail_p = lp->rx_bd_p + sizeof(*lp->rx_bd_v) * lp->rx_bd_ci;
tail_p = lp->rx_bd_p + sizeof(*lp->rx_bd_v) * lp->rx_bd_ci
tail_p
tail_p
lp->rx_bd_p + sizeof(*lp->rx_bd_v) * lp->rx_bd_ci
lp->rx_bd_p
lp
lp
rx_bd_p
sizeof(*lp->rx_bd_v) * lp->rx_bd_ci
sizeof(*lp->rx_bd_v)
(*lp->rx_bd_v)
*lp->rx_bd_v
lp->rx_bd_v
lp
lp
rx_bd_v
lp->rx_bd_ci
lp
lp
rx_bd_ci
cur_p = &lp->rx_bd_v[lp->rx_bd_ci];
cur_p = &lp->rx_bd_v[lp->rx_bd_ci]
cur_p
cur_p
&lp->rx_bd_v[lp->rx_bd_ci]
lp->rx_bd_v[lp->rx_bd_ci]
lp->rx_bd_v
lp
lp
rx_bd_v
lp->rx_bd_ci
lp
lp
rx_bd_ci
bdstat = be32_to_cpu(cur_p->app0);
bdstat = be32_to_cpu(cur_p->app0)
bdstat
bdstat
be32_to_cpu(cur_p->app0)
be32_to_cpu
be32_to_cpu
cur_p->app0
cur_p
cur_p
app0
while ((bdstat & STS_CTRL_APP0_CMPLT)) {		skb = lp->rx_skb[lp->rx_bd_ci];		length = be32_to_cpu(cur_p->app4) & 0x3FFF;		dma_unmap_single(ndev->dev.parent, be32_to_cpu(cur_p->phys),				 length, DMA_FROM_DEVICE);		skb_put(skb, length);		skb->protocol = eth_type_trans(skb, ndev);		skb_checksum_none_assert(skb);		/* if we're doing rx csum offload, set it up */		if (((lp->temac_features & TEMAC_FEATURE_RX_CSUM) != 0) &&		    (skb->protocol == htons(ETH_P_IP)) &&		    (skb->len > 64)) {			/* Convert from device endianness (be32) to cpu			 * endiannes, and if necessary swap the bytes			 * (back) for proper IP checksum byte order			 * (be16).			 */			skb->csum = htons(be32_to_cpu(cur_p->app3) & 0xFFFF);			skb->ip_summed = CHECKSUM_COMPLETE;		}		if (!skb_defer_rx_timestamp(skb))			netif_rx(skb);		ndev->stats.rx_packets++;		ndev->stats.rx_bytes += length;		new_skb = netdev_alloc_skb_ip_align(ndev,						XTE_MAX_JUMBO_FRAME_SIZE);		if (!new_skb) {			spin_unlock_irqrestore(&lp->rx_lock, flags);			return;		}		cur_p->app0 = cpu_to_be32(STS_CTRL_APP0_IRQONEND);		skb_dma_addr = dma_map_single(ndev->dev.parent, new_skb->data,					      XTE_MAX_JUMBO_FRAME_SIZE,					      DMA_FROM_DEVICE);		cur_p->phys = cpu_to_be32(skb_dma_addr);		cur_p->len = cpu_to_be32(XTE_MAX_JUMBO_FRAME_SIZE);		lp->rx_skb[lp->rx_bd_ci] = new_skb;		lp->rx_bd_ci++;		if (lp->rx_bd_ci >= RX_BD_NUM)			lp->rx_bd_ci = 0;		cur_p = &lp->rx_bd_v[lp->rx_bd_ci];		bdstat = be32_to_cpu(cur_p->app0);	}
(bdstat & STS_CTRL_APP0_CMPLT)
bdstat & STS_CTRL_APP0_CMPLT
bdstat
bdstat
STS_CTRL_APP0_CMPLT
STS_CTRL_APP0_CMPLT
{		skb = lp->rx_skb[lp->rx_bd_ci];		length = be32_to_cpu(cur_p->app4) & 0x3FFF;		dma_unmap_single(ndev->dev.parent, be32_to_cpu(cur_p->phys),				 length, DMA_FROM_DEVICE);		skb_put(skb, length);		skb->protocol = eth_type_trans(skb, ndev);		skb_checksum_none_assert(skb);		/* if we're doing rx csum offload, set it up */		if (((lp->temac_features & TEMAC_FEATURE_RX_CSUM) != 0) &&		    (skb->protocol == htons(ETH_P_IP)) &&		    (skb->len > 64)) {			/* Convert from device endianness (be32) to cpu			 * endiannes, and if necessary swap the bytes			 * (back) for proper IP checksum byte order			 * (be16).			 */			skb->csum = htons(be32_to_cpu(cur_p->app3) & 0xFFFF);			skb->ip_summed = CHECKSUM_COMPLETE;		}		if (!skb_defer_rx_timestamp(skb))			netif_rx(skb);		ndev->stats.rx_packets++;		ndev->stats.rx_bytes += length;		new_skb = netdev_alloc_skb_ip_align(ndev,						XTE_MAX_JUMBO_FRAME_SIZE);		if (!new_skb) {			spin_unlock_irqrestore(&lp->rx_lock, flags);			return;		}		cur_p->app0 = cpu_to_be32(STS_CTRL_APP0_IRQONEND);		skb_dma_addr = dma_map_single(ndev->dev.parent, new_skb->data,					      XTE_MAX_JUMBO_FRAME_SIZE,					      DMA_FROM_DEVICE);		cur_p->phys = cpu_to_be32(skb_dma_addr);		cur_p->len = cpu_to_be32(XTE_MAX_JUMBO_FRAME_SIZE);		lp->rx_skb[lp->rx_bd_ci] = new_skb;		lp->rx_bd_ci++;		if (lp->rx_bd_ci >= RX_BD_NUM)			lp->rx_bd_ci = 0;		cur_p = &lp->rx_bd_v[lp->rx_bd_ci];		bdstat = be32_to_cpu(cur_p->app0);	}
skb = lp->rx_skb[lp->rx_bd_ci];
skb = lp->rx_skb[lp->rx_bd_ci]
skb
skb
lp->rx_skb[lp->rx_bd_ci]
lp->rx_skb
lp
lp
rx_skb
lp->rx_bd_ci
lp
lp
rx_bd_ci
length = be32_to_cpu(cur_p->app4) & 0x3FFF;
length = be32_to_cpu(cur_p->app4) & 0x3FFF
length
length
be32_to_cpu(cur_p->app4) & 0x3FFF
be32_to_cpu(cur_p->app4)
be32_to_cpu
be32_to_cpu
cur_p->app4
cur_p
cur_p
app4
0x3FFF
dma_unmap_single(ndev->dev.parent, be32_to_cpu(cur_p->phys),				 length, DMA_FROM_DEVICE);
dma_unmap_single(ndev->dev.parent, be32_to_cpu(cur_p->phys),				 length, DMA_FROM_DEVICE)
dma_unmap_single
dma_unmap_single
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
be32_to_cpu(cur_p->phys)
be32_to_cpu
be32_to_cpu
cur_p->phys
cur_p
cur_p
phys
length
length
DMA_FROM_DEVICE
DMA_FROM_DEVICE
skb_put(skb, length);
skb_put(skb, length)
skb_put
skb_put
skb
skb
length
length
skb->protocol = eth_type_trans(skb, ndev);
skb->protocol = eth_type_trans(skb, ndev)
skb->protocol
skb
skb
protocol
eth_type_trans(skb, ndev)
eth_type_trans
eth_type_trans
skb
skb
ndev
ndev
skb_checksum_none_assert(skb);
skb_checksum_none_assert(skb)
skb_checksum_none_assert
skb_checksum_none_assert
skb
skb
if (((lp->temac_features & TEMAC_FEATURE_RX_CSUM) != 0) &&		    (skb->protocol == htons(ETH_P_IP)) &&		    (skb->len > 64)) {			/* Convert from device endianness (be32) to cpu			 * endiannes, and if necessary swap the bytes			 * (back) for proper IP checksum byte order			 * (be16).			 */			skb->csum = htons(be32_to_cpu(cur_p->app3) & 0xFFFF);			skb->ip_summed = CHECKSUM_COMPLETE;		}
((lp->temac_features & TEMAC_FEATURE_RX_CSUM) != 0) &&		    (skb->protocol == htons(ETH_P_IP)) &&		    (skb->len > 64)
((lp->temac_features & TEMAC_FEATURE_RX_CSUM) != 0) &&		    (skb->protocol == htons(ETH_P_IP))
((lp->temac_features & TEMAC_FEATURE_RX_CSUM) != 0)
(lp->temac_features & TEMAC_FEATURE_RX_CSUM) != 0
(lp->temac_features & TEMAC_FEATURE_RX_CSUM)
lp->temac_features & TEMAC_FEATURE_RX_CSUM
lp->temac_features
lp
lp
temac_features
TEMAC_FEATURE_RX_CSUM
TEMAC_FEATURE_RX_CSUM
0
(skb->protocol == htons(ETH_P_IP))
skb->protocol == htons(ETH_P_IP)
skb->protocol
skb
skb
protocol
htons(ETH_P_IP)
htons
htons
ETH_P_IP
ETH_P_IP
(skb->len > 64)
skb->len > 64
skb->len
skb
skb
len
64
{			/* Convert from device endianness (be32) to cpu			 * endiannes, and if necessary swap the bytes			 * (back) for proper IP checksum byte order			 * (be16).			 */			skb->csum = htons(be32_to_cpu(cur_p->app3) & 0xFFFF);			skb->ip_summed = CHECKSUM_COMPLETE;		}
skb->csum = htons(be32_to_cpu(cur_p->app3) & 0xFFFF);
skb->csum = htons(be32_to_cpu(cur_p->app3) & 0xFFFF)
skb->csum
skb
skb
csum
htons(be32_to_cpu(cur_p->app3) & 0xFFFF)
htons
htons
be32_to_cpu(cur_p->app3) & 0xFFFF
be32_to_cpu(cur_p->app3)
be32_to_cpu
be32_to_cpu
cur_p->app3
cur_p
cur_p
app3
0xFFFF
skb->ip_summed = CHECKSUM_COMPLETE;
skb->ip_summed = CHECKSUM_COMPLETE
skb->ip_summed
skb
skb
ip_summed
CHECKSUM_COMPLETE
CHECKSUM_COMPLETE
if (!skb_defer_rx_timestamp(skb))			netif_rx(skb);
!skb_defer_rx_timestamp(skb)
skb_defer_rx_timestamp(skb)
skb_defer_rx_timestamp
skb_defer_rx_timestamp
skb
skb
netif_rx(skb);
netif_rx(skb)
netif_rx
netif_rx
skb
skb
ndev->stats.rx_packets++;
ndev->stats.rx_packets++
ndev->stats.rx_packets
ndev->stats
ndev
ndev
stats
rx_packets
ndev->stats.rx_bytes += length;
ndev->stats.rx_bytes += length
ndev->stats.rx_bytes
ndev->stats
ndev
ndev
stats
rx_bytes
length
length
new_skb = netdev_alloc_skb_ip_align(ndev,						XTE_MAX_JUMBO_FRAME_SIZE);
new_skb = netdev_alloc_skb_ip_align(ndev,						XTE_MAX_JUMBO_FRAME_SIZE)
new_skb
new_skb
netdev_alloc_skb_ip_align(ndev,						XTE_MAX_JUMBO_FRAME_SIZE)
netdev_alloc_skb_ip_align
netdev_alloc_skb_ip_align
ndev
ndev
XTE_MAX_JUMBO_FRAME_SIZE
XTE_MAX_JUMBO_FRAME_SIZE
if (!new_skb) {			spin_unlock_irqrestore(&lp->rx_lock, flags);			return;		}
!new_skb
new_skb
new_skb
{			spin_unlock_irqrestore(&lp->rx_lock, flags);			return;		}
spin_unlock_irqrestore(&lp->rx_lock, flags);
spin_unlock_irqrestore(&lp->rx_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&lp->rx_lock
lp->rx_lock
lp
lp
rx_lock
flags
flags
return;
cur_p->app0 = cpu_to_be32(STS_CTRL_APP0_IRQONEND);
cur_p->app0 = cpu_to_be32(STS_CTRL_APP0_IRQONEND)
cur_p->app0
cur_p
cur_p
app0
cpu_to_be32(STS_CTRL_APP0_IRQONEND)
cpu_to_be32
cpu_to_be32
STS_CTRL_APP0_IRQONEND
STS_CTRL_APP0_IRQONEND
skb_dma_addr = dma_map_single(ndev->dev.parent, new_skb->data,					      XTE_MAX_JUMBO_FRAME_SIZE,					      DMA_FROM_DEVICE);
skb_dma_addr = dma_map_single(ndev->dev.parent, new_skb->data,					      XTE_MAX_JUMBO_FRAME_SIZE,					      DMA_FROM_DEVICE)
skb_dma_addr
skb_dma_addr
dma_map_single(ndev->dev.parent, new_skb->data,					      XTE_MAX_JUMBO_FRAME_SIZE,					      DMA_FROM_DEVICE)
dma_map_single
dma_map_single
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
new_skb->data
new_skb
new_skb
data
XTE_MAX_JUMBO_FRAME_SIZE
XTE_MAX_JUMBO_FRAME_SIZE
DMA_FROM_DEVICE
DMA_FROM_DEVICE
cur_p->phys = cpu_to_be32(skb_dma_addr);
cur_p->phys = cpu_to_be32(skb_dma_addr)
cur_p->phys
cur_p
cur_p
phys
cpu_to_be32(skb_dma_addr)
cpu_to_be32
cpu_to_be32
skb_dma_addr
skb_dma_addr
cur_p->len = cpu_to_be32(XTE_MAX_JUMBO_FRAME_SIZE);
cur_p->len = cpu_to_be32(XTE_MAX_JUMBO_FRAME_SIZE)
cur_p->len
cur_p
cur_p
len
cpu_to_be32(XTE_MAX_JUMBO_FRAME_SIZE)
cpu_to_be32
cpu_to_be32
XTE_MAX_JUMBO_FRAME_SIZE
XTE_MAX_JUMBO_FRAME_SIZE
lp->rx_skb[lp->rx_bd_ci] = new_skb;
lp->rx_skb[lp->rx_bd_ci] = new_skb
lp->rx_skb[lp->rx_bd_ci]
lp->rx_skb
lp
lp
rx_skb
lp->rx_bd_ci
lp
lp
rx_bd_ci
new_skb
new_skb
lp->rx_bd_ci++;
lp->rx_bd_ci++
lp->rx_bd_ci
lp
lp
rx_bd_ci
if (lp->rx_bd_ci >= RX_BD_NUM)			lp->rx_bd_ci = 0;
lp->rx_bd_ci >= RX_BD_NUM
lp->rx_bd_ci
lp
lp
rx_bd_ci
RX_BD_NUM
RX_BD_NUM
lp->rx_bd_ci = 0;
lp->rx_bd_ci = 0
lp->rx_bd_ci
lp
lp
rx_bd_ci
0
cur_p = &lp->rx_bd_v[lp->rx_bd_ci];
cur_p = &lp->rx_bd_v[lp->rx_bd_ci]
cur_p
cur_p
&lp->rx_bd_v[lp->rx_bd_ci]
lp->rx_bd_v[lp->rx_bd_ci]
lp->rx_bd_v
lp
lp
rx_bd_v
lp->rx_bd_ci
lp
lp
rx_bd_ci
bdstat = be32_to_cpu(cur_p->app0);
bdstat = be32_to_cpu(cur_p->app0)
bdstat
bdstat
be32_to_cpu(cur_p->app0)
be32_to_cpu
be32_to_cpu
cur_p->app0
cur_p
cur_p
app0
lp->dma_out(lp, RX_TAILDESC_PTR, tail_p);
lp->dma_out(lp, RX_TAILDESC_PTR, tail_p)
lp->dma_out
lp
lp
dma_out
lp
lp
RX_TAILDESC_PTR
RX_TAILDESC_PTR
tail_p
tail_p
spin_unlock_irqrestore(&lp->rx_lock, flags);
spin_unlock_irqrestore(&lp->rx_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&lp->rx_lock
lp->rx_lock
lp
lp
rx_lock
flags
flags
-----joern-----
(243,83,0)
(76,22,0)
(122,4,0)
(231,23,0)
(5,209,0)
(73,165,0)
(94,23,0)
(141,233,0)
(243,6,0)
(239,158,0)
(104,209,0)
(179,157,0)
(43,102,0)
(238,15,0)
(53,243,0)
(251,1,0)
(87,131,0)
(45,62,0)
(181,178,0)
(225,237,0)
(120,14,0)
(50,85,0)
(114,234,0)
(207,133,0)
(60,165,0)
(106,109,0)
(60,23,0)
(244,250,0)
(158,26,0)
(218,216,0)
(106,138,0)
(225,143,0)
(72,138,0)
(216,218,0)
(192,147,0)
(105,178,0)
(200,22,0)
(20,122,0)
(176,199,0)
(180,155,0)
(78,117,0)
(5,46,0)
(144,43,0)
(12,192,0)
(99,15,0)
(234,6,0)
(111,163,0)
(245,75,0)
(147,192,0)
(39,233,0)
(16,231,0)
(11,70,0)
(55,228,0)
(105,90,0)
(223,22,0)
(131,110,0)
(35,90,0)
(82,92,0)
(190,15,0)
(56,156,0)
(186,176,0)
(130,11,0)
(105,195,0)
(111,181,0)
(97,14,0)
(243,182,0)
(19,109,0)
(244,110,0)
(122,6,0)
(169,250,0)
(52,70,0)
(90,83,0)
(215,111,0)
(31,176,0)
(86,74,0)
(139,110,0)
(151,238,0)
(249,46,0)
(166,139,0)
(37,22,0)
(95,143,0)
(90,6,0)
(46,22,0)
(181,22,0)
(13,23,0)
(195,105,0)
(65,112,0)
(0,37,0)
(196,191,0)
(49,111,0)
(41,144,0)
(153,86,0)
(200,15,0)
(198,54,0)
(218,137,0)
(129,192,0)
(113,131,0)
(232,6,0)
(165,73,0)
(142,83,0)
(195,6,0)
(230,120,0)
(42,22,0)
(135,22,0)
(110,139,0)
(174,200,0)
(63,22,0)
(246,54,0)
(189,120,0)
(123,143,0)
(132,231,0)
(17,117,0)
(66,102,0)
(71,13,0)
(176,205,0)
(182,243,0)
(234,114,0)
(191,26,0)
(165,60,0)
(117,6,0)
(152,94,0)
(237,118,0)
(127,15,0)
(4,122,0)
(233,23,0)
(229,147,0)
(235,22,0)
(84,225,0)
(167,117,0)
(237,225,0)
(144,15,0)
(133,37,0)
(32,142,0)
(59,199,0)
(91,181,0)
(73,127,0)
(145,194,0)
(240,198,0)
(182,75,0)
(201,150,0)
(221,212,0)
(117,83,0)
(33,212,0)
(188,143,0)
(169,223,0)
(216,221,0)
(64,170,0)
(89,138,0)
(183,18,0)
(30,33,0)
(146,250,0)
(205,176,0)
(115,85,0)
(92,170,0)
(146,185,0)
(96,66,0)
(161,250,0)
(100,111,0)
(14,120,0)
(163,22,0)
(49,176,0)
(110,131,0)
(138,71,0)
(175,127,0)
(74,143,0)
(220,74,0)
(128,209,0)
(149,169,0)
(140,218,0)
(2,143,0)
(155,37,0)
(248,200,0)
(142,6,0)
(24,142,0)
(185,146,0)
(7,37,0)
(219,156,0)
(217,64,0)
(76,15,0)
(199,22,0)
(134,70,0)
(112,65,0)
(43,144,0)
(102,66,0)
(185,59,0)
(157,4,0)
(156,96,0)
(138,15,0)
(99,71,0)
(25,11,0)
(154,7,0)
(228,6,0)
(208,143,0)
(17,232,0)
(27,118,0)
(67,233,0)
(47,146,0)
(74,77,0)
(119,143,0)
(3,250,0)
(178,105,0)
(26,191,0)
(156,56,0)
(164,139,0)
(157,143,0)
(252,146,0)
(211,86,0)
(73,22,0)
(40,99,0)
(51,165,0)
(194,77,0)
(203,6,0)
(187,13,0)
(210,228,0)
(228,55,0)
(1,250,0)
(155,23,0)
(75,6,0)
(224,143,0)
(250,143,0)
(121,39,0)
(178,181,0)
(18,235,0)
(15,182,0)
(209,235,0)
(182,15,0)
(200,199,0)
(137,161,0)
(73,91,0)
(223,150,0)
(138,106,0)
(134,22,0)
(250,244,0)
(209,181,0)
(168,73,0)
(66,96,0)
(70,11,0)
(148,125,0)
(214,240,0)
(88,1,0)
(85,83,0)
(226,181,0)
(73,169,0)
(118,250,0)
(192,83,0)
(92,114,0)
(131,6,0)
(80,90,0)
(126,161,0)
(171,243,0)
(57,199,0)
(110,244,0)
(21,122,0)
(26,22,0)
(84,46,0)
(205,231,0)
(161,137,0)
(177,76,0)
(56,6,0)
(98,232,0)
(73,199,0)
(86,6,0)
(38,194,0)
(238,33,0)
(73,142,0)
(125,37,0)
(54,198,0)
(193,238,0)
(65,15,0)
(93,99,0)
(206,169,0)
(77,74,0)
(4,157,0)
(111,49,0)
(55,77,0)
(247,83,0)
(14,97,0)
(120,6,0)
(235,18,0)
(6,143,0)
(1,235,0)
(58,191,0)
(197,161,0)
(103,127,0)
(191,39,0)
(173,228,0)
(213,234,0)
(107,56,0)
(108,125,0)
(70,134,0)
(90,105,0)
(91,163,0)
(71,22,0)
(109,106,0)
(69,60,0)
(8,65,0)
(199,59,0)
(61,232,0)
(146,181,0)
(124,91,0)
(68,75,0)
(182,133,0)
(137,218,0)
(160,205,0)
(114,92,0)
(139,6,0)
(159,84,0)
(55,97,0)
(59,185,0)
(133,22,0)
(127,221,0)
(62,15,0)
(209,5,0)
(79,54,0)
(111,250,0)
(102,43,0)
(101,86,0)
(161,181,0)
(192,6,0)
(46,5,0)
(117,17,0)
(73,238,0)
(125,191,0)
(77,55,0)
(106,102,0)
(163,158,0)
(94,6,0)
(233,39,0)
(17,133,0)
(136,118,0)
(202,60,0)
(36,96,0)
(85,63,0)
(102,106,0)
(13,15,0)
(1,181,0)
(39,191,0)
(176,49,0)
(236,84,0)
(34,43,0)
(85,6,0)
(118,237,0)
(150,223,0)
(73,99,0)
(29,144,0)
(172,155,0)
(194,6,0)
(44,195,0)
(9,195,0)
(191,125,0)
(204,143,0)
(222,59,0)
(81,56,0)
(227,13,0)
(48,91,0)
(73,17,0)
(91,250,0)
(13,71,0)
(242,234,0)
(221,216,0)
(77,194,0)
(11,23,0)
(116,225,0)
(10,22,0)
(75,182,0)
(37,155,0)
(241,143,0)
(63,85,0)
(176,22,0)
(169,181,0)
(162,26,0)
(15,22,0)
(6,94,0)
(97,55,0)
(240,143,0)
(73,1,0)
(231,205,0)
(198,240,0)
(86,143,0)
(28,143,0)
(158,163,0)
(54,6,0)
(96,156,0)
(232,17,0)
(184,22,0)
(117,6,1)
(233,141,1)
(38,220,1)
(102,106,1)
(183,1,1)
(226,147,1)
(186,31,1)
(191,196,1)
(167,78,1)
(242,213,1)
(17,117,1)
(73,17,1)
(209,181,1)
(232,6,1)
(76,177,1)
(26,191,1)
(191,125,1)
(141,67,1)
(173,97,1)
(102,43,1)
(66,96,1)
(157,4,1)
(103,66,1)
(111,181,1)
(94,23,1)
(1,88,1)
(228,6,1)
(54,246,1)
(149,206,1)
(165,51,1)
(86,153,1)
(122,6,1)
(106,138,1)
(234,242,1)
(164,3,1)
(73,168,1)
(182,75,1)
(118,250,1)
(91,181,1)
(70,52,1)
(17,232,1)
(91,124,1)
(73,165,1)
(80,195,1)
(235,18,1)
(46,5,1)
(9,44,1)
(133,207,1)
(251,7,1)
(226,83,1)
(65,15,1)
(13,227,1)
(139,166,1)
(142,24,1)
(161,250,1)
(246,79,1)
(193,151,1)
(31,49,1)
(194,6,1)
(50,133,1)
(189,230,1)
(147,192,1)
(250,244,1)
(53,171,1)
(33,30,1)
(44,226,1)
(249,181,1)
(5,209,1)
(57,15,1)
(86,6,1)
(96,36,1)
(84,225,1)
(130,25,1)
(8,33,1)
(58,125,1)
(209,235,1)
(101,211,1)
(182,243,1)
(65,8,1)
(14,120,1)
(213,7,1)
(217,64,1)
(176,205,1)
(152,203,1)
(105,195,1)
(75,6,1)
(59,185,1)
(92,114,1)
(140,137,1)
(121,233,1)
(158,239,1)
(148,39,1)
(245,190,1)
(51,60,1)
(219,56,1)
(144,29,1)
(39,233,1)
(21,20,1)
(137,161,1)
(24,32,1)
(176,199,1)
(59,222,1)
(190,84,1)
(127,15,1)
(232,61,1)
(229,192,1)
(25,62,1)
(210,173,1)
(179,4,1)
(155,172,1)
(127,175,1)
(175,103,1)
(104,128,1)
(166,164,1)
(227,187,1)
(72,96,1)
(73,142,1)
(13,15,1)
(98,223,1)
(134,70,1)
(82,114,1)
(77,194,1)
(85,115,1)
(79,86,1)
(90,6,1)
(176,49,1)
(154,37,1)
(192,83,1)
(124,48,1)
(187,99,1)
(163,158,1)
(146,250,1)
(27,116,1)
(153,101,1)
(113,139,1)
(151,221,1)
(108,148,1)
(34,144,1)
(43,144,1)
(201,169,1)
(169,149,1)
(200,199,1)
(176,186,1)
(64,92,1)
(86,74,1)
(138,89,1)
(35,80,1)
(32,147,1)
(62,45,1)
(118,136,1)
(133,37,1)
(215,205,1)
(13,23,1)
(0,73,1)
(94,152,1)
(238,15,1)
(200,174,1)
(117,83,1)
(129,63,1)
(66,102,1)
(211,84,1)
(84,46,1)
(116,250,1)
(171,75,1)
(146,252,1)
(139,6,1)
(56,81,1)
(162,235,1)
(90,83,1)
(105,90,1)
(111,250,1)
(233,23,1)
(1,181,1)
(115,50,1)
(147,229,1)
(221,216,1)
(97,14,1)
(169,250,1)
(196,58,1)
(197,127,1)
(199,59,1)
(99,93,1)
(231,132,1)
(247,142,1)
(40,200,1)
(84,236,1)
(106,109,1)
(7,37,1)
(11,23,1)
(125,108,1)
(111,163,1)
(52,11,1)
(194,145,1)
(158,26,1)
(18,183,1)
(131,6,1)
(239,91,1)
(159,225,1)
(110,139,1)
(236,159,1)
(90,35,1)
(205,231,1)
(91,250,1)
(56,6,1)
(216,218,1)
(93,40,1)
(73,1,1)
(100,215,1)
(74,77,1)
(70,11,1)
(114,234,1)
(54,6,1)
(12,129,1)
(81,107,1)
(126,197,1)
(231,23,1)
(244,110,1)
(120,189,1)
(67,162,1)
(225,237,1)
(214,198,1)
(85,6,1)
(146,181,1)
(243,53,1)
(178,105,1)
(117,167,1)
(16,199,1)
(150,201,1)
(165,60,1)
(39,121,1)
(142,6,1)
(41,106,1)
(77,55,1)
(145,38,1)
(248,176,1)
(207,17,1)
(73,238,1)
(4,122,1)
(73,91,1)
(172,180,1)
(238,193,1)
(202,69,1)
(243,6,1)
(222,185,1)
(195,6,1)
(96,156,1)
(109,19,1)
(20,6,1)
(161,126,1)
(218,137,1)
(8,66,1)
(209,104,1)
(1,250,1)
(240,198,1)
(128,249,1)
(185,146,1)
(49,111,1)
(240,214,1)
(156,219,1)
(76,15,1)
(200,15,1)
(99,15,1)
(36,156,1)
(125,37,1)
(159,46,1)
(37,155,1)
(174,248,1)
(192,6,1)
(55,228,1)
(161,181,1)
(138,71,1)
(243,83,1)
(112,65,1)
(83,247,1)
(155,23,1)
(62,15,1)
(180,0,1)
(73,199,1)
(25,112,1)
(15,182,1)
(206,163,1)
(111,100,1)
(71,13,1)
(168,165,1)
(110,131,1)
(107,76,1)
(48,26,1)
(131,87,1)
(43,34,1)
(136,27,1)
(228,210,1)
(73,169,1)
(237,118,1)
(19,138,1)
(78,232,1)
(192,12,1)
(138,15,1)
(69,134,1)
(230,194,1)
(6,94,1)
(191,39,1)
(132,16,1)
(156,56,1)
(61,98,1)
(160,231,1)
(144,15,1)
(223,150,1)
(217,240,1)
(60,202,1)
(29,41,1)
(55,97,1)
(47,57,1)
(157,179,1)
(92,82,1)
(73,127,1)
(88,251,1)
(169,181,1)
(63,85,1)
(120,6,1)
(181,178,1)
(89,72,1)
(7,154,1)
(87,113,1)
(195,9,1)
(85,83,1)
(220,157,1)
(218,140,1)
(30,238,1)
(45,112,1)
(122,21,1)
(11,130,1)
(198,54,1)
(252,47,1)
(68,245,1)
(60,23,1)
(177,71,1)
(205,160,1)
(234,6,1)
(73,99,1)
(3,74,1)
(75,68,1)
(182,133,1)
(232,6,2)
(29,106,2)
(43,144,2)
(76,15,2)
(104,7,2)
(19,96,2)
(36,84,2)
(140,66,2)
(209,7,2)
(86,6,2)
(200,199,2)
(96,84,2)
(117,83,2)
(133,7,2)
(146,250,2)
(147,192,2)
(102,43,2)
(85,83,2)
(138,96,2)
(18,7,2)
(249,7,2)
(82,7,2)
(15,182,2)
(176,84,2)
(108,7,2)
(155,23,2)
(194,6,2)
(141,7,2)
(7,84,2)
(169,250,2)
(129,7,2)
(247,147,2)
(77,55,2)
(17,232,2)
(91,181,2)
(127,66,2)
(39,7,2)
(177,84,2)
(193,66,2)
(106,109,2)
(205,84,2)
(250,244,2)
(198,54,2)
(71,13,2)
(144,15,2)
(73,165,2)
(240,84,2)
(73,1,2)
(66,84,2)
(117,6,2)
(235,18,2)
(144,106,2)
(192,7,2)
(222,84,2)
(142,147,2)
(30,66,2)
(56,6,2)
(218,66,2)
(251,7,2)
(13,84,2)
(110,131,2)
(146,181,2)
(46,5,2)
(92,114,2)
(75,84,2)
(1,181,2)
(155,84,2)
(227,84,2)
(74,77,2)
(105,7,2)
(207,7,2)
(73,127,2)
(59,185,2)
(176,199,2)
(80,7,2)
(105,195,2)
(65,15,2)
(24,147,2)
(234,6,2)
(48,7,2)
(73,91,2)
(52,84,2)
(244,110,2)
(231,23,2)
(171,84,2)
(198,84,2)
(183,7,2)
(97,14,2)
(199,84,2)
(93,84,2)
(15,84,2)
(205,231,2)
(84,225,2)
(163,158,2)
(58,7,2)
(114,234,2)
(138,71,2)
(83,147,2)
(200,15,2)
(47,84,2)
(34,106,2)
(115,7,2)
(201,7,2)
(86,74,2)
(73,142,2)
(158,7,2)
(103,66,2)
(182,243,2)
(160,84,2)
(61,7,2)
(107,84,2)
(4,122,2)
(70,11,2)
(78,7,2)
(196,7,2)
(226,7,2)
(181,178,2)
(14,120,2)
(153,84,2)
(9,7,2)
(85,6,2)
(218,137,2)
(233,7,2)
(101,84,2)
(44,7,2)
(17,117,2)
(146,84,2)
(209,181,2)
(26,191,2)
(191,39,2)
(90,6,2)
(134,70,2)
(139,6,2)
(11,23,2)
(5,7,2)
(148,7,2)
(202,84,2)
(90,83,2)
(158,26,2)
(76,84,2)
(111,163,2)
(133,37,2)
(114,7,2)
(252,84,2)
(180,84,2)
(221,216,2)
(66,102,2)
(73,84,2)
(66,96,2)
(232,7,2)
(111,250,2)
(40,84,2)
(90,7,2)
(228,6,2)
(12,7,2)
(243,6,2)
(245,84,2)
(131,6,2)
(197,66,2)
(235,7,2)
(8,84,2)
(51,84,2)
(88,7,2)
(46,7,2)
(84,7,2)
(213,7,2)
(110,139,2)
(178,105,2)
(163,7,2)
(192,6,2)
(73,199,2)
(1,250,2)
(128,7,2)
(124,7,2)
(75,6,2)
(182,75,2)
(99,84,2)
(64,7,2)
(56,84,2)
(105,90,2)
(60,84,2)
(165,60,2)
(125,7,2)
(31,84,2)
(195,6,2)
(41,106,2)
(185,146,2)
(209,235,2)
(49,84,2)
(137,161,2)
(73,169,2)
(138,15,2)
(26,7,2)
(54,84,2)
(240,198,2)
(134,84,2)
(229,7,2)
(49,111,2)
(55,97,2)
(37,84,2)
(63,85,2)
(39,233,2)
(59,84,2)
(190,84,2)
(96,156,2)
(217,64,2)
(54,6,2)
(161,66,2)
(181,7,2)
(69,84,2)
(216,218,2)
(13,15,2)
(60,23,2)
(156,84,2)
(182,133,2)
(192,83,2)
(195,7,2)
(215,84,2)
(211,84,2)
(154,84,2)
(216,66,2)
(167,7,2)
(72,96,2)
(65,84,2)
(81,84,2)
(225,237,2)
(176,205,2)
(111,181,2)
(221,66,2)
(199,59,2)
(55,228,2)
(1,7,2)
(86,84,2)
(169,181,2)
(237,118,2)
(168,84,2)
(32,147,2)
(70,84,2)
(45,112,2)
(165,84,2)
(233,23,2)
(100,84,2)
(120,6,2)
(238,66,2)
(71,84,2)
(191,125,2)
(137,66,2)
(187,84,2)
(11,84,2)
(43,106,2)
(67,7,2)
(62,112,2)
(231,84,2)
(122,6,2)
(159,7,2)
(84,46,2)
(206,7,2)
(130,84,2)
(161,181,2)
(121,7,2)
(109,96,2)
(91,250,2)
(147,7,2)
(242,7,2)
(236,7,2)
(248,84,2)
(214,84,2)
(112,84,2)
(112,65,2)
(157,4,2)
(246,84,2)
(118,250,2)
(172,84,2)
(191,7,2)
(239,7,2)
(106,96,2)
(175,66,2)
(106,138,2)
(50,7,2)
(142,6,2)
(79,84,2)
(13,23,2)
(102,106,2)
(92,7,2)
(125,37,2)
(174,84,2)
(89,96,2)
(111,84,2)
(85,7,2)
(178,7,2)
(25,84,2)
(186,84,2)
(117,7,2)
(102,96,2)
(234,7,2)
(73,99,2)
(161,250,2)
(127,15,2)
(63,7,2)
(126,66,2)
(35,7,2)
(219,84,2)
(7,37,2)
(223,150,2)
(94,23,2)
(182,84,2)
(238,15,2)
(73,238,2)
(98,7,2)
(5,209,2)
(132,84,2)
(62,15,2)
(243,84,2)
(243,83,2)
(176,49,2)
(73,17,2)
(33,66,2)
(77,194,2)
(57,84,2)
(68,84,2)
(17,7,2)
(37,155,2)
(149,7,2)
(156,56,2)
(53,84,2)
(16,84,2)
(99,15,2)
(0,84,2)
(169,7,2)
(6,94,2)
(185,84,2)
(91,7,2)
(150,7,2)
(151,66,2)
(223,7,2)
(162,7,2)
(200,84,2)
-----------------------------------
(0,new_skb)
(1,cur_p->app0)
(2,while ((bdstat & STS_CTRL_APP0_CMPLT)
(3,cur_p)
(4,&lp->rx_lock)
(5,be32_to_cpu(cur_p->app0)
(6,*lp = netdev_priv(ndev)
(7,!new_skb)
(8,skb)
(9,rx_bd_v)
(10,if (lp->rx_bd_ci >= RX_BD_NUM)
(11,ndev->stats)
(12,rx_bd_ci)
(13,eth_type_trans(skb, ndev)
(14,*lp->rx_bd_v)
(15,skb = lp->rx_skb[lp->rx_bd_ci])
(16,ndev)
(17,lp->rx_skb[lp->rx_bd_ci])
(18,cpu_to_be32(STS_CTRL_APP0_IRQONEND)
(19,ETH_P_IP)
(20,lp)
(21,rx_lock)
(22,)
(23,struct net_device *ndev)
(24,rx_bd_ci)
(25,ndev)
(26,skb_dma_addr = dma_map_single(ndev->dev.parent, new_skb->data,\n\\n\\t\\t\\t\\t\\t      XTE_MAX_JUMBO_FRAME_SIZE,\n\\n\\t\\t\\t\\t\\t      DMA_FROM_DEVICE)
(27,cur_p)
(28,flags)
(29,len)
(30,CHECKSUM_COMPLETE)
(31,length)
(32,lp)
(33,skb->ip_summed = CHECKSUM_COMPLETE)
(34,64)
(35,rx_bd_ci)
(36,0)
(37,new_skb = netdev_alloc_skb_ip_align(ndev,\n\\n\\t\\t\\t\\t\\t\\tXTE_MAX_JUMBO_FRAME_SIZE)
(38,lp)
(39,ndev->dev.parent)
(40,skb)
(41,skb)
(42,if (!new_skb)
(43,skb->len > 64)
(44,lp)
(45,skb)
(46,bdstat = be32_to_cpu(cur_p->app0)
(47,cur_p)
(48,cur_p)
(49,be32_to_cpu(cur_p->phys)
(50,lp)
(51,rx_bytes)
(52,rx_packets)
(53,rx_bd_ci)
(54,lp->rx_lock)
(55,sizeof(*lp->rx_bd_v)
(56,lp->temac_features)
(57,length)
(58,XTE_MAX_JUMBO_FRAME_SIZE)
(59,be32_to_cpu(cur_p->app4)
(60,ndev->stats)
(61,rx_skb)
(62,netif_rx(skb)
(63,lp->rx_bd_ci++)
(64,return;)
(65,skb_defer_rx_timestamp(skb)
(66,((lp->temac_features & TEMAC_FEATURE_RX_CSUM)
(67,ndev)
(68,rx_skb)
(69,ndev)
(70,ndev->stats.rx_packets)
(71,skb->protocol = eth_type_trans(skb, ndev)
(72,skb)
(73,ndev->stats.rx_bytes += length)
(74,tail_p = lp->rx_bd_p + sizeof(*lp->rx_bd_v)
(75,lp->rx_skb)
(76,skb_checksum_none_assert(skb)
(77,lp->rx_bd_p + sizeof(*lp->rx_bd_v)
(78,lp)
(79,lp)
(80,lp)
(81,temac_features)
(82,flags)
(83,lp->rx_bd_ci = 0)
(84,bdstat & STS_CTRL_APP0_CMPLT)
(85,lp->rx_bd_ci)
(86,lp->dma_out(lp, RX_TAILDESC_PTR, tail_p)
(87,rx_bd_ci)
(88,app0)
(89,protocol)
(90,lp->rx_bd_ci)
(91,cur_p->phys)
(92,spin_unlock_irqrestore(&lp->rx_lock, flags)
(93,protocol)
(94,netdev_priv(ndev)
(95,bdstat)
(96,(lp->temac_features & TEMAC_FEATURE_RX_CSUM)
(97,sizeof(*lp->rx_bd_v)
(98,lp)
(99,skb->protocol)
(100,phys)
(101,RX_TAILDESC_PTR)
(102,(skb->protocol == htons(ETH_P_IP)
(103,skb)
(104,app0)
(105,lp->rx_bd_v[lp->rx_bd_ci])
(106,skb->protocol == htons(ETH_P_IP)
(107,lp)
(108,data)
(109,htons(ETH_P_IP)
(110,lp->rx_bd_v[lp->rx_bd_ci])
(111,cur_p->phys)
(112,!skb_defer_rx_timestamp(skb)
(113,lp)
(114,&lp->rx_lock)
(115,rx_bd_ci)
(116,bdstat)
(117,lp->rx_bd_ci)
(118,cur_p->app0)
(119,cur_p)
(120,lp->rx_bd_v)
(121,parent)
(122,lp->rx_lock)
(123,lp)
(124,phys)
(125,new_skb->data)
(126,app3)
(127,skb->csum)
(128,cur_p)
(129,lp)
(130,stats)
(131,lp->rx_bd_ci)
(132,dev)
(133,lp->rx_skb[lp->rx_bd_ci] = new_skb)
(134,ndev->stats.rx_packets++)
(135,if (((lp->temac_features & TEMAC_FEATURE_RX_CSUM)
(136,app0)
(137,be32_to_cpu(cur_p->app3)
(138,skb->protocol)
(139,lp->rx_bd_v)
(140,0xFFFF)
(141,dev)
(142,lp->rx_bd_ci)
(143,)
(144,skb->len)
(145,rx_bd_p)
(146,cur_p->app4)
(147,lp->rx_bd_ci >= RX_BD_NUM)
(148,new_skb)
(149,len)
(150,cpu_to_be32(XTE_MAX_JUMBO_FRAME_SIZE)
(151,skb)
(152,ndev)
(153,tail_p)
(154,new_skb)
(155,netdev_alloc_skb_ip_align(ndev,\n\\n\\t\\t\\t\\t\\t\\tXTE_MAX_JUMBO_FRAME_SIZE)
(156,lp->temac_features & TEMAC_FEATURE_RX_CSUM)
(157,spin_lock_irqsave(&lp->rx_lock, flags)
(158,cpu_to_be32(skb_dma_addr)
(159,bdstat)
(160,parent)
(161,cur_p->app3)
(162,skb_dma_addr)
(163,cur_p->phys = cpu_to_be32(skb_dma_addr)
(164,lp)
(165,ndev->stats.rx_bytes)
(166,rx_bd_v)
(167,rx_bd_ci)
(168,length)
(169,cur_p->len)
(170,)
(171,lp)
(172,XTE_MAX_JUMBO_FRAME_SIZE)
(173,lp)
(174,length)
(175,csum)
(176,dma_unmap_single(ndev->dev.parent, be32_to_cpu(cur_p->phys)
(177,skb)
(178,&lp->rx_bd_v[lp->rx_bd_ci])
(179,flags)
(180,ndev)
(181,cur_p = &lp->rx_bd_v[lp->rx_bd_ci])
(182,lp->rx_skb[lp->rx_bd_ci])
(183,STS_CTRL_APP0_IRQONEND)
(184,if (!skb_defer_rx_timestamp(skb)
(185,be32_to_cpu(cur_p->app4)
(186,DMA_FROM_DEVICE)
(187,skb)
(188,tail_p)
(189,rx_bd_v)
(190,skb)
(191,dma_map_single(ndev->dev.parent, new_skb->data,\n\\n\\t\\t\\t\\t\\t      XTE_MAX_JUMBO_FRAME_SIZE,\n\\n\\t\\t\\t\\t\\t      DMA_FROM_DEVICE)
(192,lp->rx_bd_ci)
(193,ip_summed)
(194,lp->rx_bd_p)
(195,lp->rx_bd_v)
(196,DMA_FROM_DEVICE)
(197,cur_p)
(198,&lp->rx_lock)
(199,length = be32_to_cpu(cur_p->app4)
(200,skb_put(skb, length)
(201,XTE_MAX_JUMBO_FRAME_SIZE)
(202,stats)
(203,lp)
(204,skb)
(205,ndev->dev.parent)
(206,cur_p)
(207,new_skb)
(208,skb_dma_addr)
(209,cur_p->app0)
(210,rx_bd_ci)
(211,lp)
(212,)
(213,lp)
(214,flags)
(215,cur_p)
(216,htons(be32_to_cpu(cur_p->app3)
(217,RET)
(218,be32_to_cpu(cur_p->app3)
(219,TEMAC_FEATURE_RX_CSUM)
(220,tail_p)
(221,skb->csum = htons(be32_to_cpu(cur_p->app3)
(222,0x3FFF)
(223,cur_p->len = cpu_to_be32(XTE_MAX_JUMBO_FRAME_SIZE)
(224,length)
(225,bdstat = be32_to_cpu(cur_p->app0)
(226,cur_p)
(227,ndev)
(228,lp->rx_bd_ci)
(229,RX_BD_NUM)
(230,lp)
(231,ndev->dev)
(232,lp->rx_skb)
(233,ndev->dev)
(234,lp->rx_lock)
(235,cur_p->app0 = cpu_to_be32(STS_CTRL_APP0_IRQONEND)
(236,STS_CTRL_APP0_CMPLT)
(237,be32_to_cpu(cur_p->app0)
(238,skb->ip_summed)
(239,skb_dma_addr)
(240,spin_unlock_irqrestore(&lp->rx_lock, flags)
(241,new_skb)
(242,rx_lock)
(243,lp->rx_bd_ci)
(244,&lp->rx_bd_v[lp->rx_bd_ci])
(245,lp)
(246,rx_lock)
(247,0)
(248,skb)
(249,bdstat)
(250,cur_p = &lp->rx_bd_v[lp->rx_bd_ci])
(251,cur_p)
(252,app4)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^