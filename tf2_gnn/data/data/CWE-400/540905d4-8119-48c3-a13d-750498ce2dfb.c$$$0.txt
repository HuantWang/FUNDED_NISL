-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(GLOBAL_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
31,34
32,33
34,35
35,36
36,37
36,38
37,38
40,41
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
46,47
46,48
48,49
50,51
51,52
51,53
52,53
54,55
54,56
54,57
57,58
58,59
60,61
61,62
61,63
63,64
63,65
63,66
66,67
68,69
68,70
69,70
69,71
70,71
70,72
71,72
74,75
74,76
75,76
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
83,84
83,85
83,86
84,85
86,87
89,90
89,91
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
101,102
101,103
101,104
101,105
102,103
103,104
103,105
104,105
107,108
107,109
108,109
110,111
110,112
111,112
111,113
112,113
115,116
117,118
118,119
120,121
121,122
121,123
122,123
122,124
123,124
123,125
124,125
126,127
128,129
128,130
128,131
128,132
128,133
129,130
131,132
133,134
134,135
134,136
137,138
137,139
138,139
140,141
142,143
144,145
145,146
145,147
146,147
149,150
149,151
150,151
152,153
153,154
154,155
154,156
155,156
157,158
-----nextToken-----
2,4,8,10,14,16,19,24,26,27,30,33,38,39,45,47,49,53,55,56,59,62,64,65,67,72,73,76,77,82,85,87,88,92,94,99,100,105,106,109,113,114,116,119,125,127,130,132,135,136,139,141,143,147,148,151,156,158
-----computeFrom-----
12,13
12,14
69,70
69,71
70,71
70,72
74,75
74,76
80,81
80,82
90,91
90,92
103,104
103,105
107,108
107,109
122,123
122,124
-----guardedBy-----
76,116
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
GLOBAL_CONST_FALSE
GLOBAL_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(77,37,0)
(71,75,0)
(38,6,0)
(16,30,0)
(27,54,0)
(31,69,0)
(62,59,0)
(7,62,0)
(37,62,0)
(30,18,0)
(25,63,0)
(67,25,0)
(82,45,0)
(21,69,0)
(66,65,0)
(58,26,0)
(63,32,0)
(68,57,0)
(45,56,0)
(58,20,0)
(33,58,0)
(26,58,0)
(50,64,0)
(8,17,0)
(11,24,0)
(0,63,0)
(9,55,0)
(42,5,0)
(69,31,0)
(18,64,0)
(10,31,0)
(55,63,0)
(49,58,0)
(72,55,0)
(19,57,0)
(37,18,0)
(12,34,0)
(60,59,0)
(39,64,0)
(29,63,0)
(65,26,0)
(46,37,0)
(18,52,0)
(28,29,0)
(80,45,0)
(45,18,0)
(83,75,0)
(56,30,0)
(84,78,0)
(23,6,0)
(57,78,0)
(62,37,0)
(35,33,0)
(24,74,0)
(47,63,0)
(15,18,0)
(20,58,0)
(31,25,0)
(6,69,0)
(81,58,0)
(61,53,0)
(13,59,0)
(41,31,0)
(30,56,0)
(1,63,0)
(22,29,0)
(14,75,0)
(40,25,0)
(73,42,0)
(56,45,0)
(69,75,0)
(70,30,0)
(78,18,0)
(4,20,0)
(76,64,0)
(57,79,0)
(78,57,0)
(52,18,0)
(26,65,0)
(42,69,0)
(58,69,0)
(54,59,0)
(2,12,0)
(58,33,0)
(37,46,0)
(48,52,0)
(44,63,0)
(17,8,1)
(3,12,1)
(35,20,1)
(72,9,1)
(2,51,1)
(58,20,1)
(6,23,1)
(26,65,1)
(27,26,1)
(58,33,1)
(24,11,1)
(68,36,1)
(42,73,1)
(9,29,1)
(48,15,1)
(57,78,1)
(65,66,1)
(10,41,1)
(66,62,1)
(41,21,1)
(40,55,1)
(70,16,1)
(25,67,1)
(59,13,1)
(60,24,1)
(19,68,1)
(54,27,1)
(13,60,1)
(62,59,1)
(31,25,1)
(56,45,1)
(51,57,1)
(3,43,1)
(81,65,1)
(67,40,1)
(37,77,1)
(20,4,1)
(37,18,1)
(49,33,1)
(26,58,1)
(33,35,1)
(27,17,1)
(56,30,1)
(31,10,1)
(3,42,1)
(22,28,1)
(77,7,1)
(43,62,1)
(23,38,1)
(52,48,1)
(54,59,1)
(11,6,1)
(16,45,1)
(69,31,1)
(7,59,1)
(38,69,1)
(45,18,1)
(55,72,1)
(36,18,1)
(37,46,1)
(82,80,1)
(45,82,1)
(12,2,1)
(7,54,1)
(51,36,1)
(78,18,1)
(73,43,1)
(21,56,1)
(42,69,1)
(80,25,1)
(30,18,1)
(4,81,1)
(3,56,1)
(58,49,1)
(28,51,1)
(18,52,1)
(29,22,1)
(8,26,1)
(78,84,1)
(58,69,1)
(62,37,1)
(84,19,1)
(60,6,1)
(6,69,1)
(30,70,1)
(12,51,2)
(11,6,2)
(6,56,2)
(62,56,2)
(57,78,2)
(77,62,2)
(29,51,2)
(26,62,2)
(45,18,2)
(67,51,2)
(10,56,2)
(37,56,2)
(31,25,2)
(42,69,2)
(30,18,2)
(21,56,2)
(81,62,2)
(16,45,2)
(72,51,2)
(58,62,2)
(57,36,2)
(84,36,2)
(41,56,2)
(49,62,2)
(45,51,2)
(19,36,2)
(73,43,2)
(6,69,2)
(28,51,2)
(78,36,2)
(22,51,2)
(58,20,2)
(54,62,2)
(35,62,2)
(69,56,2)
(20,62,2)
(37,46,2)
(18,52,2)
(7,56,2)
(69,31,2)
(56,51,2)
(30,45,2)
(77,56,2)
(54,59,2)
(25,51,2)
(24,6,2)
(65,62,2)
(33,62,2)
(80,51,2)
(37,62,2)
(38,56,2)
(27,62,2)
(2,51,2)
(62,59,2)
(68,36,2)
(31,56,2)
(60,56,2)
(13,56,2)
(26,58,2)
(56,30,2)
(70,45,2)
(55,51,2)
(8,26,2)
(37,18,2)
(43,56,2)
(62,37,2)
(7,62,2)
(66,62,2)
(58,69,2)
(26,65,2)
(23,56,2)
(40,51,2)
(9,51,2)
(62,62,2)
(82,51,2)
(42,43,2)
(59,56,2)
(4,62,2)
(58,33,2)
(78,18,2)
(56,45,2)
(17,26,2)
-----------------------------------
(0,i)
(1,pFile)
(2,"Benign, fixed string")
(3,RET)
(4,char)
(5,)
(6,pFile == NULL)
(7,i)
(8,1)
(9,pFile)
(10,"w+")
(11,1)
(12,printLine("Benign, fixed string")
(13,0)
(14,if (pFile)
(15,count)
(16,count)
(17,exit(1)
(18,count = -1)
(19,"%d")
(20,sizeof(char)
(21,pFile)
(22,0)
(23,NULL)
(24,exit(1)
(25,*filename = "output_good.txt")
(26,strlen(SENTENCE)
(27,i)
(28,i)
(29,i = 0)
(30,count <= 20)
(31,fopen(filename, "w+")
(32,)
(33,strlen(SENTENCE)
(34,)
(35,SENTENCE)
(36,GLOBAL_CONST_TRUE)
(37,(size_t)
(38,pFile)
(39,count)
(40,filename)
(41,filename)
(42,fclose(pFile)
(43,pFile)
(44,if (count > 0 && count <= 20)
(45,count > 0)
(46,size_t)
(47,filename)
(48,1)
(49,pFile)
(50,if(GLOBAL_CONST_TRUE)
(51,GLOBAL_CONST_FALSE)
(52,-1)
(53,)
(54,i++)
(55,*pFile = NULL)
(56,count > 0 && count <= 20)
(57,fscanf(stdin, "%d", &count)
(58,fwrite(SENTENCE, sizeof(char)
(59,i = 0)
(60,i)
(61,if (strlen(SENTENCE)
(62,i < (size_t)
(63,)
(64,)
(65,strlen(SENTENCE)
(66,SENTENCE)
(67,"output_good.txt")
(68,stdin)
(69,pFile = fopen(filename, "w+")
(70,20)
(71,if (pFile == NULL)
(72,NULL)
(73,pFile)
(74,)
(75,)
(76,if(GLOBAL_CONST_FALSE)
(77,count)
(78,&count)
(79,)
(80,count)
(81,SENTENCE)
(82,0)
(83,for (i = 0; i < (size_t)
(84,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^