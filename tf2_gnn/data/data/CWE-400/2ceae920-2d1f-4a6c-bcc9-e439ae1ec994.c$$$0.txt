-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* FIX: Use a relatively small number for memory allocation */
    data = 20;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
52,53
54,55
55,56
55,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,9,11,15,16,20,21,25,27,28,32,35,37,42,45,47,50,53,56,57,61,63,68,70,74,76,78,82,84,88,90,95,96
-----computeFrom-----
13,14
13,15
18,19
18,20
30,31
30,32
40,41
40,42
51,52
51,53
59,60
59,61
-----guardedBy-----
37,78
32,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    /* FIX: Use a relatively small number for memory allocation */    data = 20;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    /* FIX: Use a relatively small number for memory allocation */    data = 20;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = 20;
data = 20
data
data
20
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(18,39,0)
(43,27,0)
(20,17,0)
(21,42,0)
(33,37,0)
(18,22,0)
(40,11,0)
(27,7,0)
(4,42,0)
(24,4,0)
(8,18,0)
(12,41,0)
(1,18,0)
(28,25,0)
(38,43,0)
(41,11,0)
(37,9,0)
(19,42,0)
(2,13,0)
(5,10,0)
(34,4,0)
(23,39,0)
(38,42,0)
(7,27,0)
(11,41,0)
(39,13,0)
(27,1,0)
(20,25,0)
(25,20,0)
(27,43,0)
(15,13,0)
(21,43,0)
(35,13,0)
(18,1,0)
(16,35,0)
(0,39,0)
(30,2,0)
(43,42,0)
(31,43,0)
(6,21,0)
(41,39,0)
(22,18,0)
(36,10,0)
(26,22,0)
(10,43,0)
(14,35,0)
(3,2,0)
(1,27,0)
(29,38,0)
(4,43,0)
(25,28,1)
(24,10,1)
(18,39,1)
(41,11,1)
(28,10,1)
(40,12,1)
(36,5,1)
(0,23,1)
(26,8,1)
(21,6,1)
(4,43,1)
(27,1,1)
(22,26,1)
(6,4,1)
(18,22,1)
(10,36,1)
(23,35,1)
(34,24,1)
(10,43,1)
(32,37,1)
(14,16,1)
(37,33,1)
(35,14,1)
(41,39,1)
(12,39,1)
(38,29,1)
(27,7,1)
(1,18,1)
(8,31,1)
(24,20,1)
(38,43,1)
(39,0,1)
(21,43,1)
(31,41,1)
(4,34,1)
(32,38,1)
(5,43,1)
(33,41,1)
(20,25,1)
(11,40,1)
(29,21,1)
(43,27,1)
(20,25,2)
(38,41,2)
(31,41,2)
(34,41,2)
(33,41,2)
(26,41,2)
(27,1,2)
(18,39,2)
(24,41,2)
(21,43,2)
(18,41,2)
(41,39,2)
(43,27,2)
(21,41,2)
(8,41,2)
(27,7,2)
(25,10,2)
(18,22,2)
(38,43,2)
(37,41,2)
(5,41,2)
(29,41,2)
(41,11,2)
(1,18,2)
(27,41,2)
(4,43,2)
(6,41,2)
(1,41,2)
(4,41,2)
(28,10,2)
(10,43,2)
(10,41,2)
(36,41,2)
(20,10,2)
(22,41,2)
(43,41,2)
-----------------------------------
(0,20)
(1,malloc(data*sizeof(wchar_t)
(2,)
(3,if (data > wcslen(HELLO_STRING)
(4,wcscpy(myString, HELLO_STRING)
(5,myString)
(6,myString)
(7,wchar_t *)
(8,data)
(9,)
(10,myString == NULL)
(11,wcslen(HELLO_STRING)
(12,data)
(13,)
(14,0)
(15,data)
(16,data)
(17,)
(18,data*sizeof(wchar_t)
(19,if (myString == NULL)
(20,exit(-1)
(21,printWLine(myString)
(22,sizeof(wchar_t)
(23,data)
(24,myString)
(25,-1)
(26,wchar_t)
(27,(wchar_t *)
(28,1)
(29,myString)
(30,myString)
(31,myString)
(32,RET)
(33,"Input is less than the length of the source string")
(34,HELLO_STRING)
(35,data = 0)
(36,NULL)
(37,printLine("Input is less than the length of the source string")
(38,free(myString)
(39,data = 20)
(40,HELLO_STRING)
(41,data > wcslen(HELLO_STRING)
(42,)
(43,myString = (wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^