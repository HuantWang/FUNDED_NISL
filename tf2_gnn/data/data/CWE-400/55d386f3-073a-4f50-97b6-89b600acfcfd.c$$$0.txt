-----label-----
1
-----code-----
static void
winimg_hibernate(imglist *img)
{
  size_t size;
  temp_strage_t *strage;

  size = img->pixelwidth * img->pixelheight * 4;

  if (!img->hdc)
    return;

  strage = strage_create();
  if (!strage)
    return;

  if (!strage_write(strage, img->pixels, size)) {
    strage_destroy(strage);
    return;
  }

  // delete allocated DIB section.
  DeleteDC(img->hdc);
  DeleteObject(img->hbmp);
  img->pixels = NULL;
  img->hdc = NULL;
  img->hbmp = NULL;

  img->strage = strage;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
40,41
40,42
41,42
42,43
42,44
43,44
47,48
48,49
48,50
49,50
51,52
52,53
54,55
54,56
55,56
56,57
59,60
59,61
60,61
61,62
61,63
61,64
61,65
62,63
64,65
66,67
66,68
67,68
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
80,81
81,82
81,83
82,83
84,85
84,86
85,86
88,89
89,90
89,91
90,91
92,93
92,94
93,94
96,97
97,98
97,99
98,99
98,100
99,100
102,103
104,105
105,106
105,107
106,107
106,108
107,108
110,111
112,113
113,114
113,115
114,115
114,116
115,116
118,119
120,121
121,122
121,123
122,123
122,124
123,124
126,127
-----nextToken-----
2,4,7,9,10,15,17,21,23,24,28,33,34,37,38,39,44,45,46,50,53,57,58,63,65,68,69,71,76,78,79,83,86,87,91,94,95,100,101,103,108,109,111,116,117,119,124,125,127
-----computeFrom-----
26,27
26,28
29,30
29,31
30,31
30,32
48,49
48,50
97,98
97,99
105,106
105,107
113,114
113,115
121,122
121,123
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static voidwinimg_hibernate(imglist *img){  size_t size;  temp_strage_t *strage;  size = img->pixelwidth * img->pixelheight * 4;  if (!img->hdc)    return;  strage = strage_create();  if (!strage)    return;  if (!strage_write(strage, img->pixels, size)) {    strage_destroy(strage);    return;  }  // delete allocated DIB section.  DeleteDC(img->hdc);  DeleteObject(img->hbmp);  img->pixels = NULL;  img->hdc = NULL;  img->hbmp = NULL;  img->strage = strage;}
static void
winimg_hibernate(imglist *img)
winimg_hibernate
imglist *img
imglist
imglist
*img
*
img
{  size_t size;  temp_strage_t *strage;  size = img->pixelwidth * img->pixelheight * 4;  if (!img->hdc)    return;  strage = strage_create();  if (!strage)    return;  if (!strage_write(strage, img->pixels, size)) {    strage_destroy(strage);    return;  }  // delete allocated DIB section.  DeleteDC(img->hdc);  DeleteObject(img->hbmp);  img->pixels = NULL;  img->hdc = NULL;  img->hbmp = NULL;  img->strage = strage;}
size_t size;
size_t size;
size_t
size_t
size
size
temp_strage_t *strage;
temp_strage_t *strage;
temp_strage_t
temp_strage_t
*strage
*
strage
size = img->pixelwidth * img->pixelheight * 4;
size = img->pixelwidth * img->pixelheight * 4
size
size
img->pixelwidth * img->pixelheight * 4
img->pixelwidth * img->pixelheight
img->pixelwidth
img
img
pixelwidth
img->pixelheight
img
img
pixelheight
4
if (!img->hdc)    return;
!img->hdc
img->hdc
img
img
hdc
return;
strage = strage_create();
strage = strage_create()
strage
strage
strage_create()
strage_create
strage_create
if (!strage)    return;
!strage
strage
strage
return;
if (!strage_write(strage, img->pixels, size)) {    strage_destroy(strage);    return;  }
!strage_write(strage, img->pixels, size)
strage_write(strage, img->pixels, size)
strage_write
strage_write
strage
strage
img->pixels
img
img
pixels
size
size
{    strage_destroy(strage);    return;  }
strage_destroy(strage);
strage_destroy(strage)
strage_destroy
strage_destroy
strage
strage
return;
DeleteDC(img->hdc);
DeleteDC(img->hdc)
DeleteDC
DeleteDC
img->hdc
img
img
hdc
DeleteObject(img->hbmp);
DeleteObject(img->hbmp)
DeleteObject
DeleteObject
img->hbmp
img
img
hbmp
img->pixels = NULL;
img->pixels = NULL
img->pixels
img
img
pixels
NULL
NULL
img->hdc = NULL;
img->hdc = NULL
img->hdc
img
img
hdc
NULL
NULL
img->hbmp = NULL;
img->hbmp = NULL
img->hbmp
img
img
hbmp
NULL
NULL
img->strage = strage;
img->strage = strage
img->strage
img
img
strage
strage
strage
-----joern-----
(5,34,0)
(49,19,0)
(46,55,0)
(1,21,0)
(58,19,0)
(8,28,0)
(66,34,0)
(0,48,0)
(22,64,0)
(20,55,0)
(23,60,0)
(38,2,0)
(3,37,0)
(36,68,0)
(21,12,0)
(6,7,0)
(41,39,0)
(28,30,0)
(45,60,0)
(2,60,0)
(37,49,0)
(7,23,0)
(39,48,0)
(17,12,0)
(52,64,0)
(34,60,0)
(50,39,0)
(48,12,0)
(54,12,0)
(29,68,0)
(67,45,0)
(63,33,0)
(44,12,0)
(14,23,0)
(57,23,0)
(37,60,0)
(64,43,0)
(43,12,0)
(56,12,0)
(32,13,0)
(50,60,0)
(11,45,0)
(26,68,0)
(55,12,0)
(40,48,0)
(65,12,0)
(20,60,0)
(7,6,0)
(2,21,0)
(7,19,0)
(48,47,0)
(30,28,0)
(35,48,0)
(25,12,0)
(49,37,0)
(35,13,0)
(59,50,0)
(61,20,0)
(47,48,0)
(10,20,0)
(19,12,0)
(68,29,0)
(28,60,0)
(62,28,0)
(39,12,0)
(16,7,0)
(29,49,0)
(42,7,0)
(30,12,0)
(63,32,0)
(34,25,0)
(7,48,0)
(15,29,0)
(49,29,0)
(9,43,0)
(45,67,0)
(18,50,0)
(64,60,0)
(53,35,0)
(63,31,0)
(23,7,0)
(4,37,0)
(25,34,0)
(27,0,0)
(24,45,0)
(51,2,0)
(19,49,0)
(68,60,0)
(6,7,1)
(50,59,1)
(63,31,1)
(2,60,1)
(0,48,1)
(28,8,1)
(39,41,1)
(25,34,1)
(39,48,1)
(42,23,1)
(53,6,1)
(22,52,1)
(28,60,1)
(37,3,1)
(27,48,1)
(33,0,1)
(68,26,1)
(23,60,1)
(63,39,1)
(1,2,1)
(51,38,1)
(55,46,1)
(38,55,1)
(59,18,1)
(23,14,1)
(15,68,1)
(63,33,1)
(21,1,1)
(52,21,1)
(43,9,1)
(20,61,1)
(35,53,1)
(31,67,1)
(34,60,1)
(49,37,1)
(11,24,1)
(37,60,1)
(9,64,1)
(66,6,1)
(49,29,1)
(32,35,1)
(7,19,1)
(4,58,1)
(7,48,1)
(16,0,1)
(7,42,1)
(34,5,1)
(5,66,1)
(10,30,1)
(64,60,1)
(62,25,1)
(46,20,1)
(57,16,1)
(67,45,1)
(29,15,1)
(47,40,1)
(18,43,1)
(2,51,1)
(7,23,1)
(68,60,1)
(20,60,1)
(35,48,1)
(61,10,1)
(14,57,1)
(63,32,1)
(26,36,1)
(8,62,1)
(64,22,1)
(36,37,1)
(40,67,1)
(45,60,1)
(50,60,1)
(3,4,1)
(48,47,1)
(41,50,1)
(24,19,1)
(0,27,1)
(29,68,1)
(30,28,1)
(45,11,1)
(19,49,1)
(6,7,2)
(32,6,2)
(2,60,2)
(23,0,2)
(0,48,2)
(7,0,2)
(42,0,2)
(33,0,2)
(67,45,2)
(55,6,2)
(28,60,2)
(27,67,2)
(49,29,2)
(30,6,2)
(25,6,2)
(57,0,2)
(7,23,2)
(50,60,2)
(53,6,2)
(66,6,2)
(64,60,2)
(29,68,2)
(37,60,2)
(2,6,2)
(63,32,2)
(0,67,2)
(23,60,2)
(48,47,2)
(25,34,2)
(35,6,2)
(49,37,2)
(34,6,2)
(43,6,2)
(61,6,2)
(41,6,2)
(46,6,2)
(63,31,2)
(6,0,2)
(64,6,2)
(16,0,2)
(20,6,2)
(19,49,2)
(8,6,2)
(30,28,2)
(28,6,2)
(40,67,2)
(63,33,2)
(7,48,2)
(1,6,2)
(45,60,2)
(5,6,2)
(9,6,2)
(35,48,2)
(14,0,2)
(18,6,2)
(52,6,2)
(68,60,2)
(34,60,2)
(38,6,2)
(10,6,2)
(48,67,2)
(21,6,2)
(39,6,2)
(59,6,2)
(20,60,2)
(47,67,2)
(50,6,2)
(7,19,2)
(31,67,2)
(39,48,2)
(22,6,2)
(51,6,2)
(62,6,2)
-----------------------------------
(0,!strage)
(1,NULL)
(2,img->hdc)
(3,pixelwidth)
(4,img)
(5,hdc)
(6,!strage_write(strage, img->pixels, size)
(7,strage_write(strage, img->pixels, size)
(8,hbmp)
(9,NULL)
(10,img)
(11,hdc)
(12,)
(13,)
(14,pixels)
(15,4)
(16,strage)
(17,if (!strage_write(strage, img->pixels, size)
(18,img)
(19,size = img->pixelwidth * img->pixelheight * 4)
(20,img->pixels)
(21,img->hdc = NULL)
(22,hbmp)
(23,img->pixels)
(24,img)
(25,DeleteDC(img->hdc)
(26,pixelheight)
(27,strage)
(28,img->hbmp)
(29,img->pixelheight * 4)
(30,DeleteObject(img->hbmp)
(31,return;)
(32,return;)
(33,return;)
(34,img->hdc)
(35,strage_destroy(strage)
(36,img)
(37,img->pixelwidth)
(38,img)
(39,img->strage = strage)
(40,strage)
(41,strage)
(42,size)
(43,img->hbmp = NULL)
(44,if (!img->hdc)
(45,img->hdc)
(46,NULL)
(47,strage_create()
(48,strage = strage_create()
(49,img->pixelwidth * img->pixelheight * 4)
(50,img->strage)
(51,hdc)
(52,img)
(53,strage)
(54,strage)
(55,img->pixels = NULL)
(56,size)
(57,img)
(58,size)
(59,strage)
(60,imglist *img)
(61,pixels)
(62,img)
(63,RET)
(64,img->hbmp)
(65,if (!strage)
(66,img)
(67,!img->hdc)
(68,img->pixelheight)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^