-----label-----
0
-----code-----
static void goodB2G2Sink(size_t data)
{
    if(goodB2G2Static)
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
50,51
52,53
53,54
53,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
71,72
73,74
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
-----nextToken-----
2,4,7,9,13,18,20,21,26,29,31,34,35,40,43,45,48,51,54,55,59,61,66,68,72,74,76,80,82,86,88,93,94
-----computeFrom-----
23,24
23,25
24,25
24,26
32,33
32,34
38,39
38,40
49,50
49,51
57,58
57,59
-----guardedBy-----
31,76
34,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2Sink(size_t data){    if(goodB2G2Static)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2Sink(size_t data)
goodB2G2Sink
size_t data
size_t
size_t
data
data
{    if(goodB2G2Static)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
if(goodB2G2Static)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
goodB2G2Static
goodB2G2Static
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(18,19,0)
(24,38,0)
(30,37,0)
(38,22,0)
(11,44,0)
(9,10,0)
(33,5,0)
(21,3,0)
(6,40,0)
(19,41,0)
(2,41,0)
(8,40,0)
(34,28,0)
(16,5,0)
(40,6,0)
(9,0,0)
(7,28,0)
(15,22,0)
(38,41,0)
(41,22,0)
(26,20,0)
(29,21,0)
(28,34,0)
(21,7,0)
(5,22,0)
(27,41,0)
(13,37,0)
(0,9,0)
(20,41,0)
(19,0,0)
(39,28,0)
(36,11,0)
(6,31,0)
(28,7,0)
(14,9,0)
(37,4,0)
(32,34,0)
(27,22,0)
(9,3,0)
(23,21,0)
(41,19,0)
(5,41,0)
(10,9,0)
(28,3,0)
(42,20,0)
(1,27,0)
(35,10,0)
(7,21,0)
(19,18,0)
(0,19,0)
(12,17,0)
(28,34,1)
(9,10,1)
(21,3,1)
(38,24,1)
(25,27,1)
(20,41,1)
(33,6,1)
(29,23,1)
(32,39,1)
(16,33,1)
(25,11,1)
(5,41,1)
(36,7,1)
(40,8,1)
(8,20,1)
(19,0,1)
(27,1,1)
(7,28,1)
(2,7,1)
(1,38,1)
(9,3,1)
(23,28,1)
(38,41,1)
(0,9,1)
(33,20,1)
(14,2,1)
(10,35,1)
(28,3,1)
(27,41,1)
(6,40,1)
(24,5,1)
(25,43,1)
(21,29,1)
(11,36,1)
(34,32,1)
(41,19,1)
(20,42,1)
(39,43,1)
(35,14,1)
(42,26,1)
(7,21,1)
(5,16,1)
(19,18,1)
(26,41,1)
(34,43,2)
(19,18,2)
(16,7,2)
(41,7,2)
(38,41,2)
(9,10,2)
(27,7,2)
(42,7,2)
(28,34,2)
(23,28,2)
(21,28,2)
(5,41,2)
(7,43,2)
(8,20,2)
(39,43,2)
(2,7,2)
(27,41,2)
(0,7,2)
(0,9,2)
(40,20,2)
(36,7,2)
(41,19,2)
(28,3,2)
(5,7,2)
(21,3,2)
(26,7,2)
(29,28,2)
(14,7,2)
(33,7,2)
(7,28,2)
(19,0,2)
(9,3,2)
(35,7,2)
(1,7,2)
(28,43,2)
(19,7,2)
(20,7,2)
(24,7,2)
(11,7,2)
(20,41,2)
(6,20,2)
(6,40,2)
(7,21,2)
(9,7,2)
(38,7,2)
(10,7,2)
(32,43,2)
-----------------------------------
(0,malloc(data*sizeof(wchar_t)
(1,myString)
(2,myString)
(3,size_t data)
(4,)
(5,wcscpy(myString, HELLO_STRING)
(6,exit(-1)
(7,data > wcslen(HELLO_STRING)
(8,1)
(9,data*sizeof(wchar_t)
(10,sizeof(wchar_t)
(11,printLine("Input is less than the length of the source string or too large")
(12,if(goodB2G2Static)
(13,if (data > wcslen(HELLO_STRING)
(14,data)
(15,if (myString == NULL)
(16,HELLO_STRING)
(17,)
(18,wchar_t *)
(19,(wchar_t *)
(20,myString == NULL)
(21,data < 100)
(22,)
(23,data)
(24,myString)
(25,RET)
(26,myString)
(27,free(myString)
(28,data > wcslen(HELLO_STRING)
(29,100)
(30,myString)
(31,)
(32,HELLO_STRING)
(33,myString)
(34,wcslen(HELLO_STRING)
(35,wchar_t)
(36,"Input is less than the length of the source string or too large")
(37,)
(38,printWLine(myString)
(39,data)
(40,-1)
(41,myString = (wchar_t *)
(42,NULL)
(43,goodB2G2Static)
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^