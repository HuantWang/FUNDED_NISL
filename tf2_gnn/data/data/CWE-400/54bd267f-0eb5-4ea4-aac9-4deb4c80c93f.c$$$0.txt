-----label-----
0
-----code-----
static void goodG2B()
{
    int64_t * data;
    CWE401_Memory_Leak__int64_t_calloc_34_unionType myUnion;
    data = NULL;
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (int64_t *)ALLOCA(100*sizeof(int64_t));
    /* Initialize and make use of data */
    data[0] = 5LL;
    printLongLongLine(data[0]);
    myUnion.unionFirst = data;
    {
        int64_t * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
47,49
48,49
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
62,64
63,64
66,67
68,69
68,70
69,70
70,71
70,72
71,72
73,74
73,75
73,76
76,77
77,78
77,79
78,79
-----nextToken-----
2,4,9,11,12,16,18,22,24,28,32,34,37,39,43,44,49,50,51,55,58,59,64,65,67,72,74,75,79,80,81
-----computeFrom-----
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    int64_t * data;    CWE401_Memory_Leak__int64_t_calloc_34_unionType myUnion;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (int64_t *)ALLOCA(100*sizeof(int64_t));    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    myUnion.unionFirst = data;    {        int64_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    int64_t * data;    CWE401_Memory_Leak__int64_t_calloc_34_unionType myUnion;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (int64_t *)ALLOCA(100*sizeof(int64_t));    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    myUnion.unionFirst = data;    {        int64_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
CWE401_Memory_Leak__int64_t_calloc_34_unionType myUnion;
CWE401_Memory_Leak__int64_t_calloc_34_unionType myUnion;
CWE401_Memory_Leak__int64_t_calloc_34_unionType
CWE401_Memory_Leak__int64_t_calloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int64_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int64_t * data = myUnion.unionSecond;
int64_t * data = myUnion.unionSecond;
int64_t
int64_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(6,21,0)
(29,4,0)
(20,2,0)
(28,4,0)
(26,22,0)
(24,12,0)
(12,2,0)
(18,22,0)
(27,2,0)
(4,28,0)
(23,11,0)
(31,9,0)
(1,27,0)
(9,2,0)
(17,29,0)
(18,21,0)
(21,2,0)
(7,22,0)
(8,18,0)
(9,4,0)
(4,29,0)
(10,17,0)
(25,13,0)
(3,17,0)
(13,12,0)
(16,23,0)
(17,3,0)
(12,9,0)
(32,13,0)
(30,27,0)
(15,2,0)
(11,23,0)
(11,2,0)
(23,9,0)
(0,3,0)
(29,17,0)
(4,9,0)
(22,18,0)
(19,2,0)
(14,23,0)
(7,26,1)
(8,12,1)
(3,0,1)
(27,1,1)
(4,28,1)
(18,22,1)
(10,31,1)
(31,27,1)
(32,11,1)
(12,9,1)
(9,4,1)
(26,8,1)
(12,24,1)
(11,23,1)
(1,30,1)
(13,25,1)
(25,32,1)
(22,7,1)
(17,3,1)
(24,13,1)
(23,9,1)
(14,15,1)
(4,29,1)
(5,18,1)
(23,16,1)
(16,14,1)
(0,10,1)
(29,17,1)
(15,9,1)
(4,28,2)
(4,29,2)
(17,3,2)
(11,23,2)
(23,9,2)
(9,4,2)
(29,17,2)
(12,9,2)
(18,22,2)
-----------------------------------
(0,int64_t)
(1,NULL)
(2,)
(3,sizeof(int64_t)
(4,(int64_t *)
(5,RET)
(6,data)
(7,unionSecond)
(8,data)
(9,data = (int64_t *)
(10,100)
(11,printLongLongLine(data[0])
(12,myUnion.unionFirst = data)
(13,myUnion.unionFirst)
(14,data)
(15,L)
(16,0)
(17,100*sizeof(int64_t)
(18,* data = myUnion.unionSecond)
(19,data)
(20,myUnion)
(21,)
(22,myUnion.unionSecond)
(23,data[0])
(24,data)
(25,unionFirst)
(26,myUnion)
(27,data = NULL)
(28,int64_t *)
(29,ALLOCA(100*sizeof(int64_t)
(30,data)
(31,data)
(32,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^