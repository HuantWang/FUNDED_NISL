-----label-----
1
-----code-----
void
tcp_init(void)
{
	int hashsize;

	if (hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_IN,
	    &V_tcp_hhh[HHOOK_TCP_EST_IN], HHOOK_NOWAIT|HHOOK_HEADISINVNET) != 0)
		printf("%s: WARNING: unable to register helper hook\n", __func__);
	if (hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_OUT,
	    &V_tcp_hhh[HHOOK_TCP_EST_OUT], HHOOK_NOWAIT|HHOOK_HEADISINVNET) != 0)
		printf("%s: WARNING: unable to register helper hook\n", __func__);

	hashsize = TCBHASHSIZE;
	TUNABLE_INT_FETCH("net.inet.tcp.tcbhashsize", &hashsize);
	if (!powerof2(hashsize)) {
		printf("WARNING: TCB hash size not a power of 2\n");
		hashsize = 512; /* safe default */
	}
	in_pcbinfo_init(&V_tcbinfo, "tcp", &V_tcb, hashsize, hashsize,
	    "tcp_inpcb", tcp_inpcb_init, NULL, UMA_ZONE_NOFREE,
	    IPI_HASHFIELDS_4TUPLE);

	/*
	 * These have to be type stable for the benefit of the timers.
	 */
	V_tcpcb_zone = uma_zcreate("tcpcb", sizeof(struct tcpcb_mem),
	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE);
	uma_zone_set_max(V_tcpcb_zone, maxsockets);

	tcp_tw_init();
	syncache_init();
	tcp_hc_init();
	tcp_reass_init();

	TUNABLE_INT_FETCH("net.inet.tcp.sack.enable", &V_tcp_do_sack);
	V_sack_hole_zone = uma_zcreate("sackhole", sizeof(struct sackhole),
	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE);

	/* Skip initialization of globals for non-default instances. */
	if (!IS_DEFAULT_VNET(curvnet))
		return;

	/* XXX virtualize those bellow? */
	tcp_delacktime = TCPTV_DELACK;
	tcp_keepinit = TCPTV_KEEP_INIT;
	tcp_keepidle = TCPTV_KEEP_IDLE;
	tcp_keepintvl = TCPTV_KEEPINTVL;
	tcp_maxpersistidle = TCPTV_KEEP_IDLE;
	tcp_msl = TCPTV_MSL;
	tcp_rexmit_min = TCPTV_MIN;
	if (tcp_rexmit_min < 1)
		tcp_rexmit_min = 1;
	tcp_rexmit_slop = TCPTV_CPU_VAR;
	tcp_finwait2_timeout = TCPTV_FINWAIT2_TIMEOUT;
	tcp_tcbhashsize = hashsize;

	TUNABLE_INT_FETCH("net.inet.tcp.soreceive_stream", &tcp_soreceive_stream);
	if (tcp_soreceive_stream) {
#ifdef INET
		tcp_usrreqs.pru_soreceive = soreceive_stream;
#endif
#ifdef INET6
		tcp6_usrreqs.pru_soreceive = soreceive_stream;
#endif /* INET6 */
	}

#ifdef INET6
#define TCP_MINPROTOHDR (sizeof(struct ip6_hdr) + sizeof(struct tcphdr))
#else /* INET6 */
#define TCP_MINPROTOHDR (sizeof(struct tcpiphdr))
#endif /* INET6 */
	if (max_protohdr < TCP_MINPROTOHDR)
		max_protohdr = TCP_MINPROTOHDR;
	if (max_linkhdr + TCP_MINPROTOHDR > MHLEN)
		panic("tcp_init");
#undef TCP_MINPROTOHDR

	ISN_LOCK_INIT();
	EVENTHANDLER_REGISTER(shutdown_pre_sync, tcp_fini, NULL,
		SHUTDOWN_PRI_DEFAULT);
	EVENTHANDLER_REGISTER(maxsockets_change, tcp_zone_change, NULL,
		EVENTHANDLER_PRI_ANY);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
9,32
9,33
9,34
9,35
9,36
9,37
9,38
9,39
9,40
9,41
9,42
9,43
10,11
11,12
11,13
13,14
15,16
15,17
16,17
16,18
17,18
17,19
17,20
17,21
17,22
18,19
20,21
22,23
24,25
25,26
25,27
26,27
28,29
30,31
30,32
31,32
33,34
36,37
37,38
37,39
37,40
38,39
41,42
43,44
43,45
44,45
44,46
45,46
45,47
45,48
45,49
45,50
46,47
48,49
50,51
52,53
53,54
53,55
54,55
56,57
58,59
58,60
59,60
61,62
64,65
65,66
65,67
65,68
66,67
69,70
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
78,81
79,80
82,83
83,84
85,86
85,87
86,87
87,88
87,89
88,89
90,91
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
103,104
104,105
104,106
104,107
104,108
104,109
104,110
104,111
104,112
104,113
104,114
104,115
105,106
107,108
108,109
111,112
112,113
114,115
116,117
119,120
121,122
123,124
125,126
127,128
128,129
128,130
129,130
131,132
131,133
131,134
131,135
131,136
131,137
131,138
131,139
131,140
132,133
135,136
136,137
136,138
137,138
140,141
142,143
144,145
146,147
148,149
150,151
152,153
153,154
153,155
153,156
154,155
156,157
158,159
160,161
161,162
162,163
164,165
165,166
166,167
168,169
169,170
170,171
172,173
173,174
174,175
176,177
177,178
177,179
177,180
178,179
181,182
182,183
184,185
185,186
185,187
186,187
188,189
188,190
188,191
188,192
188,193
188,194
188,195
188,196
188,197
189,190
192,193
193,194
193,195
194,195
197,198
199,200
201,202
203,204
205,206
207,208
209,210
209,211
210,211
211,212
211,213
212,213
214,215
217,218
218,219
218,220
219,220
221,222
223,224
224,225
224,226
225,226
227,228
229,230
230,231
230,232
231,232
233,234
235,236
236,237
236,238
237,238
239,240
241,242
242,243
242,244
243,244
245,246
247,248
248,249
248,250
249,250
251,252
253,254
254,255
254,256
255,256
257,258
259,260
259,261
260,261
260,262
261,262
264,265
265,266
265,267
266,267
269,270
270,271
270,272
271,272
273,274
275,276
276,277
276,278
277,278
279,280
281,282
282,283
282,284
283,284
285,286
287,288
288,289
288,290
288,291
289,290
292,293
293,294
295,296
295,297
296,297
299,300
299,301
300,301
300,302
301,302
303,304
304,305
305,306
305,307
306,307
309,310
310,311
310,312
311,312
313,314
314,315
315,316
315,317
316,317
319,320
319,321
320,321
320,322
321,322
321,323
322,323
324,325
325,326
326,327
326,328
327,328
330,331
332,333
333,334
333,335
334,335
337,338
338,339
339,340
341,342
342,343
342,344
342,345
342,346
342,347
343,344
345,346
347,348
349,350
351,352
353,354
354,355
354,356
354,357
354,358
354,359
355,356
357,358
359,360
361,362
363,364
-----nextToken-----
2,4,6,8,12,14,19,21,23,27,29,32,34,35,39,40,42,47,49,51,55,57,60,62,63,67,68,70,74,76,80,81,84,89,91,96,97,101,102,106,109,110,113,115,117,118,120,122,124,126,130,133,134,138,139,141,143,145,147,149,151,155,157,159,163,167,171,175,179,180,183,187,190,191,195,196,198,200,202,204,206,208,213,215,216,220,222,226,228,232,234,238,240,244,246,250,252,256,258,262,263,267,268,272,274,278,280,284,286,290,291,294,297,298,302,307,308,312,317,318,323,328,329,331,335,336,340,344,346,348,350,352,356,358,360,362,364
-----computeFrom-----
16,17
16,18
30,31
30,32
44,45
44,46
58,59
58,60
72,73
72,74
99,100
99,101
128,129
128,130
185,186
185,187
218,219
218,220
224,225
224,226
230,231
230,232
236,237
236,238
242,243
242,244
248,249
248,250
254,255
254,256
260,261
260,262
265,266
265,267
270,271
270,272
276,277
276,278
282,283
282,284
300,301
300,302
310,311
310,312
320,321
320,322
321,322
321,323
-----guardedBy-----
262,267
307,317
302,312
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
voidtcp_init(void){	int hashsize;	if (hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_IN,	    &V_tcp_hhh[HHOOK_TCP_EST_IN], HHOOK_NOWAIT|HHOOK_HEADISINVNET) != 0)		printf("%s: WARNING: unable to register helper hook\n", __func__);	if (hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_OUT,	    &V_tcp_hhh[HHOOK_TCP_EST_OUT], HHOOK_NOWAIT|HHOOK_HEADISINVNET) != 0)		printf("%s: WARNING: unable to register helper hook\n", __func__);	hashsize = TCBHASHSIZE;	TUNABLE_INT_FETCH("net.inet.tcp.tcbhashsize", &hashsize);	if (!powerof2(hashsize)) {		printf("WARNING: TCB hash size not a power of 2\n");		hashsize = 512; /* safe default */	}	in_pcbinfo_init(&V_tcbinfo, "tcp", &V_tcb, hashsize, hashsize,	    "tcp_inpcb", tcp_inpcb_init, NULL, UMA_ZONE_NOFREE,	    IPI_HASHFIELDS_4TUPLE);	/*	 * These have to be type stable for the benefit of the timers.	 */	V_tcpcb_zone = uma_zcreate("tcpcb", sizeof(struct tcpcb_mem),	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE);	uma_zone_set_max(V_tcpcb_zone, maxsockets);	tcp_tw_init();	syncache_init();	tcp_hc_init();	tcp_reass_init();	TUNABLE_INT_FETCH("net.inet.tcp.sack.enable", &V_tcp_do_sack);	V_sack_hole_zone = uma_zcreate("sackhole", sizeof(struct sackhole),	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE);	/* Skip initialization of globals for non-default instances. */	if (!IS_DEFAULT_VNET(curvnet))		return;	/* XXX virtualize those bellow? */	tcp_delacktime = TCPTV_DELACK;	tcp_keepinit = TCPTV_KEEP_INIT;	tcp_keepidle = TCPTV_KEEP_IDLE;	tcp_keepintvl = TCPTV_KEEPINTVL;	tcp_maxpersistidle = TCPTV_KEEP_IDLE;	tcp_msl = TCPTV_MSL;	tcp_rexmit_min = TCPTV_MIN;	if (tcp_rexmit_min < 1)		tcp_rexmit_min = 1;	tcp_rexmit_slop = TCPTV_CPU_VAR;	tcp_finwait2_timeout = TCPTV_FINWAIT2_TIMEOUT;	tcp_tcbhashsize = hashsize;	TUNABLE_INT_FETCH("net.inet.tcp.soreceive_stream", &tcp_soreceive_stream);	if (tcp_soreceive_stream) {#ifdef INET		tcp_usrreqs.pru_soreceive = soreceive_stream;#endif#ifdef INET6		tcp6_usrreqs.pru_soreceive = soreceive_stream;#endif /* INET6 */	}#ifdef INET6#define TCP_MINPROTOHDR (sizeof(struct ip6_hdr) + sizeof(struct tcphdr))#else /* INET6 */#define TCP_MINPROTOHDR (sizeof(struct tcpiphdr))#endif /* INET6 */	if (max_protohdr < TCP_MINPROTOHDR)		max_protohdr = TCP_MINPROTOHDR;	if (max_linkhdr + TCP_MINPROTOHDR > MHLEN)		panic("tcp_init");#undef TCP_MINPROTOHDR	ISN_LOCK_INIT();	EVENTHANDLER_REGISTER(shutdown_pre_sync, tcp_fini, NULL,		SHUTDOWN_PRI_DEFAULT);	EVENTHANDLER_REGISTER(maxsockets_change, tcp_zone_change, NULL,		EVENTHANDLER_PRI_ANY);}
void
tcp_init(void)
tcp_init
void
void


{	int hashsize;	if (hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_IN,	    &V_tcp_hhh[HHOOK_TCP_EST_IN], HHOOK_NOWAIT|HHOOK_HEADISINVNET) != 0)		printf("%s: WARNING: unable to register helper hook\n", __func__);	if (hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_OUT,	    &V_tcp_hhh[HHOOK_TCP_EST_OUT], HHOOK_NOWAIT|HHOOK_HEADISINVNET) != 0)		printf("%s: WARNING: unable to register helper hook\n", __func__);	hashsize = TCBHASHSIZE;	TUNABLE_INT_FETCH("net.inet.tcp.tcbhashsize", &hashsize);	if (!powerof2(hashsize)) {		printf("WARNING: TCB hash size not a power of 2\n");		hashsize = 512; /* safe default */	}	in_pcbinfo_init(&V_tcbinfo, "tcp", &V_tcb, hashsize, hashsize,	    "tcp_inpcb", tcp_inpcb_init, NULL, UMA_ZONE_NOFREE,	    IPI_HASHFIELDS_4TUPLE);	/*	 * These have to be type stable for the benefit of the timers.	 */	V_tcpcb_zone = uma_zcreate("tcpcb", sizeof(struct tcpcb_mem),	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE);	uma_zone_set_max(V_tcpcb_zone, maxsockets);	tcp_tw_init();	syncache_init();	tcp_hc_init();	tcp_reass_init();	TUNABLE_INT_FETCH("net.inet.tcp.sack.enable", &V_tcp_do_sack);	V_sack_hole_zone = uma_zcreate("sackhole", sizeof(struct sackhole),	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE);	/* Skip initialization of globals for non-default instances. */	if (!IS_DEFAULT_VNET(curvnet))		return;	/* XXX virtualize those bellow? */	tcp_delacktime = TCPTV_DELACK;	tcp_keepinit = TCPTV_KEEP_INIT;	tcp_keepidle = TCPTV_KEEP_IDLE;	tcp_keepintvl = TCPTV_KEEPINTVL;	tcp_maxpersistidle = TCPTV_KEEP_IDLE;	tcp_msl = TCPTV_MSL;	tcp_rexmit_min = TCPTV_MIN;	if (tcp_rexmit_min < 1)		tcp_rexmit_min = 1;	tcp_rexmit_slop = TCPTV_CPU_VAR;	tcp_finwait2_timeout = TCPTV_FINWAIT2_TIMEOUT;	tcp_tcbhashsize = hashsize;	TUNABLE_INT_FETCH("net.inet.tcp.soreceive_stream", &tcp_soreceive_stream);	if (tcp_soreceive_stream) {#ifdef INET		tcp_usrreqs.pru_soreceive = soreceive_stream;#endif#ifdef INET6		tcp6_usrreqs.pru_soreceive = soreceive_stream;#endif /* INET6 */	}#ifdef INET6#define TCP_MINPROTOHDR (sizeof(struct ip6_hdr) + sizeof(struct tcphdr))#else /* INET6 */#define TCP_MINPROTOHDR (sizeof(struct tcpiphdr))#endif /* INET6 */	if (max_protohdr < TCP_MINPROTOHDR)		max_protohdr = TCP_MINPROTOHDR;	if (max_linkhdr + TCP_MINPROTOHDR > MHLEN)		panic("tcp_init");#undef TCP_MINPROTOHDR	ISN_LOCK_INIT();	EVENTHANDLER_REGISTER(shutdown_pre_sync, tcp_fini, NULL,		SHUTDOWN_PRI_DEFAULT);	EVENTHANDLER_REGISTER(maxsockets_change, tcp_zone_change, NULL,		EVENTHANDLER_PRI_ANY);}
int hashsize;
int hashsize;
int
hashsize
hashsize
if (hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_IN,	    &V_tcp_hhh[HHOOK_TCP_EST_IN], HHOOK_NOWAIT|HHOOK_HEADISINVNET) != 0)		printf("%s: WARNING: unable to register helper hook\n", __func__);
hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_IN,	    &V_tcp_hhh[HHOOK_TCP_EST_IN], HHOOK_NOWAIT|HHOOK_HEADISINVNET) != 0
hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_IN,	    &V_tcp_hhh[HHOOK_TCP_EST_IN], HHOOK_NOWAIT|HHOOK_HEADISINVNET)
hhook_head_register
hhook_head_register
HHOOK_TYPE_TCP
HHOOK_TYPE_TCP
HHOOK_TCP_EST_IN
HHOOK_TCP_EST_IN
&V_tcp_hhh[HHOOK_TCP_EST_IN]
V_tcp_hhh[HHOOK_TCP_EST_IN]
V_tcp_hhh
V_tcp_hhh
HHOOK_TCP_EST_IN
HHOOK_TCP_EST_IN
HHOOK_NOWAIT|HHOOK_HEADISINVNET
HHOOK_NOWAIT
HHOOK_NOWAIT
HHOOK_HEADISINVNET
HHOOK_HEADISINVNET
0
printf("%s: WARNING: unable to register helper hook\n", __func__);
printf("%s: WARNING: unable to register helper hook\n", __func__)
printf
printf
"%s: WARNING: unable to register helper hook\n"
__func__
__func__
if (hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_OUT,	    &V_tcp_hhh[HHOOK_TCP_EST_OUT], HHOOK_NOWAIT|HHOOK_HEADISINVNET) != 0)		printf("%s: WARNING: unable to register helper hook\n", __func__);
hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_OUT,	    &V_tcp_hhh[HHOOK_TCP_EST_OUT], HHOOK_NOWAIT|HHOOK_HEADISINVNET) != 0
hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_OUT,	    &V_tcp_hhh[HHOOK_TCP_EST_OUT], HHOOK_NOWAIT|HHOOK_HEADISINVNET)
hhook_head_register
hhook_head_register
HHOOK_TYPE_TCP
HHOOK_TYPE_TCP
HHOOK_TCP_EST_OUT
HHOOK_TCP_EST_OUT
&V_tcp_hhh[HHOOK_TCP_EST_OUT]
V_tcp_hhh[HHOOK_TCP_EST_OUT]
V_tcp_hhh
V_tcp_hhh
HHOOK_TCP_EST_OUT
HHOOK_TCP_EST_OUT
HHOOK_NOWAIT|HHOOK_HEADISINVNET
HHOOK_NOWAIT
HHOOK_NOWAIT
HHOOK_HEADISINVNET
HHOOK_HEADISINVNET
0
printf("%s: WARNING: unable to register helper hook\n", __func__);
printf("%s: WARNING: unable to register helper hook\n", __func__)
printf
printf
"%s: WARNING: unable to register helper hook\n"
__func__
__func__
hashsize = TCBHASHSIZE;
hashsize = TCBHASHSIZE
hashsize
hashsize
TCBHASHSIZE
TCBHASHSIZE
TUNABLE_INT_FETCH("net.inet.tcp.tcbhashsize", &hashsize);
TUNABLE_INT_FETCH("net.inet.tcp.tcbhashsize", &hashsize)
TUNABLE_INT_FETCH
TUNABLE_INT_FETCH
"net.inet.tcp.tcbhashsize"
&hashsize
hashsize
hashsize
if (!powerof2(hashsize)) {		printf("WARNING: TCB hash size not a power of 2\n");		hashsize = 512; /* safe default */	}
!powerof2(hashsize)
powerof2(hashsize)
powerof2
powerof2
hashsize
hashsize
{		printf("WARNING: TCB hash size not a power of 2\n");		hashsize = 512; /* safe default */	}
printf("WARNING: TCB hash size not a power of 2\n");
printf("WARNING: TCB hash size not a power of 2\n")
printf
printf
"WARNING: TCB hash size not a power of 2\n"
hashsize = 512;
hashsize = 512
hashsize
hashsize
512
in_pcbinfo_init(&V_tcbinfo, "tcp", &V_tcb, hashsize, hashsize,	    "tcp_inpcb", tcp_inpcb_init, NULL, UMA_ZONE_NOFREE,	    IPI_HASHFIELDS_4TUPLE);
in_pcbinfo_init(&V_tcbinfo, "tcp", &V_tcb, hashsize, hashsize,	    "tcp_inpcb", tcp_inpcb_init, NULL, UMA_ZONE_NOFREE,	    IPI_HASHFIELDS_4TUPLE)
in_pcbinfo_init
in_pcbinfo_init
&V_tcbinfo
V_tcbinfo
V_tcbinfo
"tcp"
&V_tcb
V_tcb
V_tcb
hashsize
hashsize
hashsize
hashsize
"tcp_inpcb"
tcp_inpcb_init
tcp_inpcb_init
NULL
NULL
UMA_ZONE_NOFREE
UMA_ZONE_NOFREE
IPI_HASHFIELDS_4TUPLE
IPI_HASHFIELDS_4TUPLE
V_tcpcb_zone = uma_zcreate("tcpcb", sizeof(struct tcpcb_mem),	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE);
V_tcpcb_zone = uma_zcreate("tcpcb", sizeof(struct tcpcb_mem),	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE)
V_tcpcb_zone
V_tcpcb_zone
uma_zcreate("tcpcb", sizeof(struct tcpcb_mem),	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE)
uma_zcreate
uma_zcreate
"tcpcb"
sizeof(struct tcpcb_mem)
struct tcpcb_mem
struct tcpcb_mem
tcpcb_mem

NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
UMA_ALIGN_PTR
UMA_ALIGN_PTR
UMA_ZONE_NOFREE
UMA_ZONE_NOFREE
uma_zone_set_max(V_tcpcb_zone, maxsockets);
uma_zone_set_max(V_tcpcb_zone, maxsockets)
uma_zone_set_max
uma_zone_set_max
V_tcpcb_zone
V_tcpcb_zone
maxsockets
maxsockets
tcp_tw_init();
tcp_tw_init()
tcp_tw_init
tcp_tw_init
syncache_init();
syncache_init()
syncache_init
syncache_init
tcp_hc_init();
tcp_hc_init()
tcp_hc_init
tcp_hc_init
tcp_reass_init();
tcp_reass_init()
tcp_reass_init
tcp_reass_init
TUNABLE_INT_FETCH("net.inet.tcp.sack.enable", &V_tcp_do_sack);
TUNABLE_INT_FETCH("net.inet.tcp.sack.enable", &V_tcp_do_sack)
TUNABLE_INT_FETCH
TUNABLE_INT_FETCH
"net.inet.tcp.sack.enable"
&V_tcp_do_sack
V_tcp_do_sack
V_tcp_do_sack
V_sack_hole_zone = uma_zcreate("sackhole", sizeof(struct sackhole),	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE);
V_sack_hole_zone = uma_zcreate("sackhole", sizeof(struct sackhole),	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE)
V_sack_hole_zone
V_sack_hole_zone
uma_zcreate("sackhole", sizeof(struct sackhole),	    NULL, NULL, NULL, NULL, UMA_ALIGN_PTR, UMA_ZONE_NOFREE)
uma_zcreate
uma_zcreate
"sackhole"
sizeof(struct sackhole)
struct sackhole
struct sackhole
sackhole

NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
UMA_ALIGN_PTR
UMA_ALIGN_PTR
UMA_ZONE_NOFREE
UMA_ZONE_NOFREE
if (!IS_DEFAULT_VNET(curvnet))		return;
!IS_DEFAULT_VNET(curvnet)
IS_DEFAULT_VNET(curvnet)
IS_DEFAULT_VNET
IS_DEFAULT_VNET
curvnet
curvnet
return;
tcp_delacktime = TCPTV_DELACK;
tcp_delacktime = TCPTV_DELACK
tcp_delacktime
tcp_delacktime
TCPTV_DELACK
TCPTV_DELACK
tcp_keepinit = TCPTV_KEEP_INIT;
tcp_keepinit = TCPTV_KEEP_INIT
tcp_keepinit
tcp_keepinit
TCPTV_KEEP_INIT
TCPTV_KEEP_INIT
tcp_keepidle = TCPTV_KEEP_IDLE;
tcp_keepidle = TCPTV_KEEP_IDLE
tcp_keepidle
tcp_keepidle
TCPTV_KEEP_IDLE
TCPTV_KEEP_IDLE
tcp_keepintvl = TCPTV_KEEPINTVL;
tcp_keepintvl = TCPTV_KEEPINTVL
tcp_keepintvl
tcp_keepintvl
TCPTV_KEEPINTVL
TCPTV_KEEPINTVL
tcp_maxpersistidle = TCPTV_KEEP_IDLE;
tcp_maxpersistidle = TCPTV_KEEP_IDLE
tcp_maxpersistidle
tcp_maxpersistidle
TCPTV_KEEP_IDLE
TCPTV_KEEP_IDLE
tcp_msl = TCPTV_MSL;
tcp_msl = TCPTV_MSL
tcp_msl
tcp_msl
TCPTV_MSL
TCPTV_MSL
tcp_rexmit_min = TCPTV_MIN;
tcp_rexmit_min = TCPTV_MIN
tcp_rexmit_min
tcp_rexmit_min
TCPTV_MIN
TCPTV_MIN
if (tcp_rexmit_min < 1)		tcp_rexmit_min = 1;
tcp_rexmit_min < 1
tcp_rexmit_min
tcp_rexmit_min
1
tcp_rexmit_min = 1;
tcp_rexmit_min = 1
tcp_rexmit_min
tcp_rexmit_min
1
tcp_rexmit_slop = TCPTV_CPU_VAR;
tcp_rexmit_slop = TCPTV_CPU_VAR
tcp_rexmit_slop
tcp_rexmit_slop
TCPTV_CPU_VAR
TCPTV_CPU_VAR
tcp_finwait2_timeout = TCPTV_FINWAIT2_TIMEOUT;
tcp_finwait2_timeout = TCPTV_FINWAIT2_TIMEOUT
tcp_finwait2_timeout
tcp_finwait2_timeout
TCPTV_FINWAIT2_TIMEOUT
TCPTV_FINWAIT2_TIMEOUT
tcp_tcbhashsize = hashsize;
tcp_tcbhashsize = hashsize
tcp_tcbhashsize
tcp_tcbhashsize
hashsize
hashsize
TUNABLE_INT_FETCH("net.inet.tcp.soreceive_stream", &tcp_soreceive_stream);
TUNABLE_INT_FETCH("net.inet.tcp.soreceive_stream", &tcp_soreceive_stream)
TUNABLE_INT_FETCH
TUNABLE_INT_FETCH
"net.inet.tcp.soreceive_stream"
&tcp_soreceive_stream
tcp_soreceive_stream
tcp_soreceive_stream
if (tcp_soreceive_stream) {#ifdef INET		tcp_usrreqs.pru_soreceive = soreceive_stream;#endif#ifdef INET6		tcp6_usrreqs.pru_soreceive = soreceive_stream;#endif /* INET6 */	}
tcp_soreceive_stream
tcp_soreceive_stream
{#ifdef INET		tcp_usrreqs.pru_soreceive = soreceive_stream;#endif#ifdef INET6		tcp6_usrreqs.pru_soreceive = soreceive_stream;#endif /* INET6 */	}
if (max_protohdr < TCP_MINPROTOHDR)		max_protohdr = TCP_MINPROTOHDR;
max_protohdr < TCP_MINPROTOHDR
max_protohdr
max_protohdr
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
max_protohdr = TCP_MINPROTOHDR;
max_protohdr = TCP_MINPROTOHDR
max_protohdr
max_protohdr
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
if (max_linkhdr + TCP_MINPROTOHDR > MHLEN)		panic("tcp_init");
max_linkhdr + TCP_MINPROTOHDR > MHLEN
max_linkhdr + TCP_MINPROTOHDR
max_linkhdr
max_linkhdr
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
TCP_MINPROTOHDR
MHLEN
MHLEN
panic("tcp_init");
panic("tcp_init")
panic
panic
"tcp_init"
ISN_LOCK_INIT();
ISN_LOCK_INIT()
ISN_LOCK_INIT
ISN_LOCK_INIT
EVENTHANDLER_REGISTER(shutdown_pre_sync, tcp_fini, NULL,		SHUTDOWN_PRI_DEFAULT);
EVENTHANDLER_REGISTER(shutdown_pre_sync, tcp_fini, NULL,		SHUTDOWN_PRI_DEFAULT)
EVENTHANDLER_REGISTER
EVENTHANDLER_REGISTER
shutdown_pre_sync
shutdown_pre_sync
tcp_fini
tcp_fini
NULL
NULL
SHUTDOWN_PRI_DEFAULT
SHUTDOWN_PRI_DEFAULT
EVENTHANDLER_REGISTER(maxsockets_change, tcp_zone_change, NULL,		EVENTHANDLER_PRI_ANY);
EVENTHANDLER_REGISTER(maxsockets_change, tcp_zone_change, NULL,		EVENTHANDLER_PRI_ANY)
EVENTHANDLER_REGISTER
EVENTHANDLER_REGISTER
maxsockets_change
maxsockets_change
tcp_zone_change
tcp_zone_change
NULL
NULL
EVENTHANDLER_PRI_ANY
EVENTHANDLER_PRI_ANY
-----joern-----
(45,66,0)
(121,142,0)
(122,79,0)
(183,60,0)
(81,159,0)
(62,26,0)
(91,184,0)
(127,66,0)
(82,129,0)
(34,176,0)
(56,159,0)
(49,66,0)
(85,93,0)
(21,113,0)
(140,8,0)
(77,88,0)
(132,168,0)
(44,59,0)
(48,105,0)
(7,26,0)
(176,66,0)
(39,66,0)
(179,137,0)
(60,21,0)
(119,99,0)
(43,66,0)
(113,21,0)
(32,127,0)
(20,180,0)
(177,59,0)
(128,181,0)
(15,164,0)
(68,78,0)
(166,0,0)
(158,97,0)
(26,66,0)
(84,125,0)
(98,184,0)
(29,12,0)
(143,97,0)
(108,60,0)
(163,184,0)
(0,128,0)
(124,66,0)
(96,66,0)
(138,66,0)
(25,126,0)
(161,66,0)
(92,161,0)
(19,66,0)
(23,66,0)
(63,69,0)
(17,128,0)
(33,130,0)
(52,66,0)
(87,162,0)
(59,66,0)
(171,49,0)
(147,78,0)
(114,159,0)
(93,22,0)
(149,127,0)
(129,82,0)
(126,66,0)
(134,81,0)
(72,129,0)
(10,66,0)
(178,140,0)
(139,115,0)
(155,140,0)
(120,162,0)
(128,0,0)
(142,43,0)
(50,39,0)
(157,126,0)
(56,69,0)
(136,184,0)
(128,82,0)
(8,140,0)
(73,140,0)
(13,38,0)
(144,140,0)
(67,8,0)
(165,60,0)
(88,66,0)
(149,51,0)
(167,60,0)
(130,66,0)
(37,130,0)
(110,66,0)
(54,161,0)
(76,12,0)
(24,115,0)
(137,66,0)
(38,13,0)
(71,38,0)
(100,127,0)
(181,128,0)
(105,100,0)
(118,181,0)
(60,124,0)
(156,140,0)
(168,138,0)
(135,148,0)
(160,102,0)
(101,66,0)
(104,18,0)
(27,129,0)
(107,184,0)
(57,170,0)
(159,81,0)
(173,66,0)
(16,58,0)
(184,12,0)
(2,66,0)
(182,10,0)
(90,10,0)
(152,38,0)
(59,127,0)
(36,148,0)
(103,35,0)
(70,53,0)
(154,137,0)
(133,35,0)
(138,168,0)
(159,78,0)
(146,13,0)
(116,66,0)
(12,172,0)
(111,149,0)
(184,66,0)
(82,128,0)
(169,176,0)
(74,66,0)
(105,66,0)
(184,58,0)
(23,140,0)
(95,88,0)
(61,140,0)
(3,66,0)
(180,66,0)
(94,66,0)
(124,60,0)
(80,41,0)
(106,102,0)
(184,18,0)
(148,93,0)
(8,67,0)
(141,99,0)
(11,23,0)
(184,127,0)
(6,138,0)
(47,124,0)
(4,184,0)
(175,69,0)
(123,49,0)
(42,60,0)
(55,66,0)
(18,184,0)
(58,184,0)
(131,181,0)
(83,184,0)
(64,180,0)
(65,130,0)
(97,79,0)
(117,127,0)
(86,60,0)
(89,100,0)
(79,22,0)
(109,137,0)
(140,23,0)
(30,130,0)
(102,66,0)
(100,105,0)
(46,43,0)
(174,128,0)
(151,41,0)
(31,53,0)
(5,137,0)
(41,151,0)
(51,149,0)
(40,66,0)
(153,39,0)
(9,159,0)
(1,150,0)
(69,56,0)
(75,150,0)
(159,56,0)
(43,142,0)
(78,159,0)
(59,12,0)
(28,184,0)
(112,140,0)
(14,60,0)
(21,60,0)
(164,172,0)
(174,162,1)
(174,81,1)
(108,14,1)
(41,80,1)
(49,171,1)
(176,169,1)
(128,82,1)
(112,144,1)
(0,128,1)
(71,152,1)
(143,145,1)
(43,142,1)
(100,89,1)
(146,38,1)
(68,56,1)
(84,125,1)
(65,170,1)
(151,41,1)
(157,25,1)
(33,30,1)
(84,137,1)
(177,44,1)
(148,135,1)
(165,108,1)
(50,153,1)
(53,70,1)
(158,143,1)
(137,5,1)
(59,127,1)
(54,92,1)
(42,167,1)
(65,13,1)
(150,1,1)
(102,106,1)
(35,103,1)
(80,23,1)
(182,102,1)
(181,131,1)
(8,67,1)
(156,8,1)
(28,163,1)
(48,127,1)
(97,158,1)
(21,183,1)
(8,178,1)
(70,31,1)
(128,181,1)
(175,63,1)
(39,50,1)
(139,49,1)
(136,98,1)
(58,16,1)
(153,88,1)
(126,157,1)
(60,21,1)
(81,159,1)
(96,45,1)
(95,77,1)
(149,127,1)
(82,129,1)
(51,149,1)
(34,124,1)
(16,51,1)
(184,12,1)
(61,112,1)
(160,99,1)
(184,18,1)
(87,81,1)
(99,141,1)
(162,120,1)
(27,72,1)
(152,150,1)
(159,56,1)
(62,7,1)
(6,59,1)
(21,113,1)
(7,161,1)
(88,95,1)
(59,12,1)
(184,127,1)
(160,115,1)
(138,168,1)
(63,114,1)
(117,0,1)
(56,69,1)
(131,118,1)
(91,107,1)
(149,111,1)
(140,8,1)
(145,138,1)
(166,128,1)
(117,53,1)
(140,73,1)
(0,166,1)
(31,0,1)
(100,127,1)
(1,75,1)
(47,184,1)
(13,146,1)
(79,122,1)
(75,145,1)
(141,119,1)
(77,151,1)
(106,160,1)
(163,136,1)
(83,18,1)
(30,37,1)
(178,11,1)
(24,139,1)
(13,38,1)
(36,79,1)
(85,148,1)
(120,87,1)
(159,78,1)
(37,65,1)
(109,130,1)
(103,133,1)
(161,54,1)
(164,15,1)
(142,121,1)
(180,64,1)
(14,42,1)
(135,36,1)
(44,10,1)
(60,86,1)
(154,109,1)
(12,29,1)
(45,40,1)
(69,175,1)
(4,58,1)
(184,58,1)
(127,32,1)
(184,28,1)
(119,115,1)
(168,132,1)
(57,13,1)
(38,71,1)
(40,176,1)
(123,126,1)
(20,39,1)
(89,48,1)
(93,85,1)
(23,140,1)
(132,6,1)
(129,27,1)
(147,68,1)
(105,100,1)
(107,83,1)
(46,52,1)
(121,46,1)
(171,123,1)
(25,26,1)
(144,155,1)
(167,21,1)
(115,24,1)
(92,180,1)
(134,159,1)
(5,179,1)
(75,93,1)
(183,47,1)
(78,147,1)
(155,156,1)
(114,9,1)
(179,154,1)
(86,165,1)
(81,134,1)
(133,150,1)
(169,34,1)
(152,35,1)
(125,151,1)
(17,174,1)
(111,105,1)
(26,62,1)
(10,90,1)
(32,117,1)
(59,177,1)
(72,17,1)
(15,51,1)
(76,164,1)
(124,60,1)
(118,82,1)
(64,20,1)
(52,96,1)
(90,182,1)
(29,76,1)
(18,104,1)
(11,43,1)
(16,12,1)
(73,61,1)
(104,4,1)
(122,97,1)
(170,57,1)
(98,91,1)
(130,33,1)
(50,151,2)
(90,151,2)
(88,151,2)
(184,18,2)
(120,81,2)
(25,151,2)
(161,151,2)
(82,129,2)
(99,115,2)
(164,51,2)
(133,150,2)
(36,145,2)
(135,145,2)
(105,100,2)
(106,151,2)
(75,151,2)
(148,145,2)
(182,151,2)
(26,151,2)
(44,151,2)
(1,151,2)
(51,149,2)
(145,151,2)
(123,151,2)
(7,151,2)
(56,69,2)
(13,38,2)
(139,151,2)
(138,168,2)
(53,0,2)
(152,151,2)
(124,60,2)
(157,151,2)
(128,181,2)
(158,145,2)
(177,151,2)
(154,151,2)
(31,0,2)
(87,81,2)
(93,145,2)
(149,127,2)
(77,151,2)
(126,151,2)
(162,81,2)
(138,151,2)
(54,151,2)
(184,58,2)
(159,56,2)
(170,13,2)
(24,151,2)
(100,127,2)
(180,151,2)
(146,151,2)
(130,151,2)
(35,150,2)
(76,51,2)
(184,12,2)
(20,151,2)
(179,151,2)
(151,41,2)
(49,151,2)
(143,145,2)
(23,140,2)
(102,151,2)
(59,12,2)
(30,151,2)
(85,145,2)
(79,145,2)
(39,151,2)
(12,51,2)
(57,13,2)
(33,151,2)
(37,151,2)
(62,151,2)
(13,151,2)
(0,128,2)
(92,151,2)
(137,151,2)
(84,125,2)
(122,145,2)
(70,0,2)
(184,127,2)
(150,151,2)
(141,115,2)
(125,151,2)
(119,115,2)
(159,78,2)
(8,67,2)
(10,151,2)
(103,150,2)
(60,21,2)
(160,151,2)
(132,151,2)
(6,151,2)
(43,142,2)
(15,51,2)
(59,127,2)
(109,151,2)
(140,8,2)
(29,51,2)
(71,151,2)
(115,151,2)
(65,151,2)
(59,151,2)
(5,151,2)
(64,151,2)
(97,145,2)
(168,151,2)
(153,151,2)
(171,151,2)
(128,82,2)
(81,159,2)
(21,113,2)
(38,151,2)
(95,151,2)
-----------------------------------
(0,hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_OUT,\n\\n\\t    &V_tcp_hhh[HHOOK_TCP_EST_OUT], HHOOK_NOWAIT|HHOOK_HEADISINVNET)
(1,TCP_MINPROTOHDR)
(2,if (!IS_DEFAULT_VNET(curvnet)
(3,hashsize)
(4,"tcp")
(5,EVENTHANDLER_PRI_ANY)
(6,"net.inet.tcp.soreceive_stream")
(7,tcp_maxpersistidle)
(8,sizeof(struct sackhole)
(9,HHOOK_TYPE_TCP)
(10,tcp_finwait2_timeout = TCPTV_FINWAIT2_TIMEOUT)
(11,V_sack_hole_zone)
(12,hashsize = 512)
(13,max_linkhdr + TCP_MINPROTOHDR > MHLEN)
(14,NULL)
(15,"WARNING: TCB hash size not a power of 2\\n")
(16,V_tcbinfo)
(17,HHOOK_TCP_EST_OUT)
(18,&V_tcb)
(19,ISN_LOCK_INIT)
(20,tcp_keepidle)
(21,sizeof(struct tcpcb_mem)
(22,)
(23,V_sack_hole_zone = uma_zcreate("sackhole", sizeof(struct sackhole)
(24,1)
(25,tcp_msl)
(26,tcp_maxpersistidle = TCPTV_KEEP_IDLE)
(27,HHOOK_TCP_EST_OUT)
(28,IPI_HASHFIELDS_4TUPLE)
(29,512)
(30,NULL)
(31,"%s: WARNING: unable to register helper hook\\n")
(32,TCBHASHSIZE)
(33,SHUTDOWN_PRI_DEFAULT)
(34,V_tcpcb_zone)
(35,max_protohdr = TCP_MINPROTOHDR)
(36,tcp6_usrreqs)
(37,tcp_fini)
(38,max_linkhdr + TCP_MINPROTOHDR)
(39,tcp_keepinit = TCPTV_KEEP_INIT)
(40,tcp_tw_init()
(41,IS_DEFAULT_VNET(curvnet)
(42,NULL)
(43,TUNABLE_INT_FETCH("net.inet.tcp.sack.enable", &V_tcp_do_sack)
(44,tcp_tcbhashsize)
(45,syncache_init()
(46,"net.inet.tcp.sack.enable")
(47,V_tcpcb_zone)
(48,"net.inet.tcp.tcbhashsize")
(49,tcp_rexmit_min = TCPTV_MIN)
(50,TCPTV_KEEP_INIT)
(51,!powerof2(hashsize)
(52,tcp_reass_init()
(53,printf("%s: WARNING: unable to register helper hook\\n", __func__)
(54,TCPTV_KEEPINTVL)
(55,if (max_protohdr < TCP_MINPROTOHDR)
(56,&V_tcp_hhh[HHOOK_TCP_EST_IN])
(57,"tcp_init")
(58,&V_tcbinfo)
(59,tcp_tcbhashsize = hashsize)
(60,uma_zcreate("tcpcb", sizeof(struct tcpcb_mem)
(61,UMA_ALIGN_PTR)
(62,TCPTV_KEEP_IDLE)
(63,V_tcp_hhh)
(64,TCPTV_KEEP_IDLE)
(65,shutdown_pre_sync)
(66,)
(67,struct sackhole)
(68,HHOOK_NOWAIT)
(69,V_tcp_hhh[HHOOK_TCP_EST_IN])
(70,__func__)
(71,TCP_MINPROTOHDR)
(72,V_tcp_hhh)
(73,UMA_ZONE_NOFREE)
(74,if (hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_OUT,\n\\n\\t    &V_tcp_hhh[HHOOK_TCP_EST_OUT], HHOOK_NOWAIT|HHOOK_HEADISINVNET)
(75,max_protohdr)
(76,hashsize)
(77,tcp_delacktime)
(78,HHOOK_NOWAIT|HHOOK_HEADISINVNET)
(79,tcp_usrreqs.pru_soreceive = soreceive_stream)
(80,curvnet)
(81,hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_IN,\n\\n\\t    &V_tcp_hhh[HHOOK_TCP_EST_IN], HHOOK_NOWAIT|HHOOK_HEADISINVNET)
(82,&V_tcp_hhh[HHOOK_TCP_EST_OUT])
(83,hashsize)
(84,RET)
(85,soreceive_stream)
(86,UMA_ZONE_NOFREE)
(87,"%s: WARNING: unable to register helper hook\\n")
(88,tcp_delacktime = TCPTV_DELACK)
(89,hashsize)
(90,TCPTV_FINWAIT2_TIMEOUT)
(91,"tcp_inpcb")
(92,tcp_keepintvl)
(93,tcp6_usrreqs.pru_soreceive = soreceive_stream)
(94,if (!powerof2(hashsize)
(95,TCPTV_DELACK)
(96,tcp_hc_init()
(97,tcp_usrreqs.pru_soreceive)
(98,tcp_inpcb_init)
(99,tcp_rexmit_min = 1)
(100,&hashsize)
(101,if (tcp_rexmit_min < 1)
(102,tcp_rexmit_slop = TCPTV_CPU_VAR)
(103,TCP_MINPROTOHDR)
(104,V_tcb)
(105,TUNABLE_INT_FETCH("net.inet.tcp.tcbhashsize", &hashsize)
(106,TCPTV_CPU_VAR)
(107,hashsize)
(108,NULL)
(109,maxsockets_change)
(110,if (tcp_soreceive_stream)
(111,hashsize)
(112,NULL)
(113,struct tcpcb_mem)
(114,HHOOK_TCP_EST_IN)
(115,tcp_rexmit_min < 1)
(116,if (hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_IN,\n\\n\\t    &V_tcp_hhh[HHOOK_TCP_EST_IN], HHOOK_NOWAIT|HHOOK_HEADISINVNET)
(117,hashsize)
(118,HHOOK_NOWAIT)
(119,tcp_rexmit_min)
(120,__func__)
(121,V_tcp_do_sack)
(122,soreceive_stream)
(123,tcp_rexmit_min)
(124,V_tcpcb_zone = uma_zcreate("tcpcb", sizeof(struct tcpcb_mem)
(125,return;)
(126,tcp_msl = TCPTV_MSL)
(127,hashsize = TCBHASHSIZE)
(128,hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_OUT,\n\\n\\t    &V_tcp_hhh[HHOOK_TCP_EST_OUT], HHOOK_NOWAIT|HHOOK_HEADISINVNET)
(129,V_tcp_hhh[HHOOK_TCP_EST_OUT])
(130,EVENTHANDLER_REGISTER(shutdown_pre_sync, tcp_fini, NULL,\n\\n\\t\\tSHUTDOWN_PRI_DEFAULT)
(131,HHOOK_HEADISINVNET)
(132,tcp_soreceive_stream)
(133,max_protohdr)
(134,0)
(135,pru_soreceive)
(136,NULL)
(137,EVENTHANDLER_REGISTER(maxsockets_change, tcp_zone_change, NULL,\n\\n\\t\\tEVENTHANDLER_PRI_ANY)
(138,TUNABLE_INT_FETCH("net.inet.tcp.soreceive_stream", &tcp_soreceive_stream)
(139,tcp_rexmit_min)
(140,uma_zcreate("sackhole", sizeof(struct sackhole)
(141,1)
(142,&V_tcp_do_sack)
(143,tcp_usrreqs)
(144,NULL)
(145,tcp_soreceive_stream)
(146,MHLEN)
(147,HHOOK_HEADISINVNET)
(148,tcp6_usrreqs.pru_soreceive)
(149,powerof2(hashsize)
(150,max_protohdr < TCP_MINPROTOHDR)
(151,!IS_DEFAULT_VNET(curvnet)
(152,max_linkhdr)
(153,tcp_keepinit)
(154,tcp_zone_change)
(155,NULL)
(156,NULL)
(157,TCPTV_MSL)
(158,pru_soreceive)
(159,hhook_head_register(HHOOK_TYPE_TCP, HHOOK_TCP_EST_IN,\n\\n\\t    &V_tcp_hhh[HHOOK_TCP_EST_IN], HHOOK_NOWAIT|HHOOK_HEADISINVNET)
(160,tcp_rexmit_slop)
(161,tcp_keepintvl = TCPTV_KEEPINTVL)
(162,printf("%s: WARNING: unable to register helper hook\\n", __func__)
(163,UMA_ZONE_NOFREE)
(164,printf("WARNING: TCB hash size not a power of 2\\n")
(165,UMA_ALIGN_PTR)
(166,0)
(167,NULL)
(168,&tcp_soreceive_stream)
(169,maxsockets)
(170,panic("tcp_init")
(171,TCPTV_MIN)
(172,)
(173,if (max_linkhdr + TCP_MINPROTOHDR > MHLEN)
(174,HHOOK_TYPE_TCP)
(175,HHOOK_TCP_EST_IN)
(176,uma_zone_set_max(V_tcpcb_zone, maxsockets)
(177,hashsize)
(178,"sackhole")
(179,NULL)
(180,tcp_keepidle = TCPTV_KEEP_IDLE)
(181,HHOOK_NOWAIT|HHOOK_HEADISINVNET)
(182,tcp_finwait2_timeout)
(183,"tcpcb")
(184,in_pcbinfo_init(&V_tcbinfo, "tcp", &V_tcb, hashsize, hashsize,\n\\n\\t    "tcp_inpcb", tcp_inpcb_init, NULL, UMA_ZONE_NOFREE,\n\\n\\t    IPI_HASHFIELDS_4TUPLE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^