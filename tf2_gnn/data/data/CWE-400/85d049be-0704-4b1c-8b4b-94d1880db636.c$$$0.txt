-----label-----
1
-----code-----
static void badSink(int count)
{
    if(badStatic)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
32,33
32,34
33,34
33,35
34,35
37,38
39,40
40,41
42,43
43,44
44,45
44,46
45,46
-----nextToken-----
2,4,6,8,12,18,20,22,27,28,31,35,36,38,41,46,47
-----computeFrom-----
25,26
25,27
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(int count){    if(badStatic)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
badSink(int count)
badSink
int count
int
count
count
{    if(badStatic)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
if(badStatic)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
badStatic
badStatic
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(14,13,0)
(24,1,0)
(9,17,0)
(11,13,0)
(22,1,0)
(17,9,0)
(7,19,0)
(10,1,0)
(12,7,0)
(17,2,0)
(23,3,0)
(2,17,0)
(18,5,0)
(3,0,0)
(17,20,0)
(15,17,0)
(21,9,0)
(13,3,0)
(9,1,0)
(16,22,0)
(6,3,0)
(9,17,1)
(8,4,1)
(16,7,1)
(14,4,1)
(1,24,1)
(8,9,1)
(10,13,1)
(7,12,1)
(22,16,1)
(13,11,1)
(9,1,1)
(17,2,1)
(11,14,1)
(24,10,1)
(21,1,1)
(17,20,1)
(12,9,1)
(15,21,1)
(21,22,1)
(17,15,1)
(22,1,1)
(17,4,2)
(21,4,2)
(17,20,2)
(15,9,2)
(13,4,2)
(1,4,2)
(10,4,2)
(16,9,2)
(9,17,2)
(17,9,2)
(22,1,2)
(7,9,2)
(24,4,2)
(15,4,2)
(22,9,2)
(9,9,2)
(9,1,2)
(14,4,2)
(17,2,2)
(9,4,2)
(21,9,2)
(11,4,2)
(12,9,2)
-----------------------------------
(0,)
(1,i = 0)
(2,size_t)
(3,)
(4,badStatic)
(5,)
(6,i)
(7,printLine("Hello")
(8,RET)
(9,i < (size_t)
(10,i)
(11,0)
(12,"Hello")
(13,i = 0)
(14,i)
(15,count)
(16,i)
(17,(size_t)
(18,if(badStatic)
(19,)
(20,int count)
(21,i)
(22,i++)
(23,for (i = 0; i < (size_t)
(24,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^