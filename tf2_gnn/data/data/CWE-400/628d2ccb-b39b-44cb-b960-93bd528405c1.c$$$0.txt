-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_12_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
67,70
68,69
69,70
69,71
70,71
72,73
72,74
73,74
73,75
75,76
77,78
77,79
78,79
80,81
80,82
82,83
83,84
83,85
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
99,101
99,102
100,101
101,102
103,104
105,106
106,107
107,108
107,109
108,109
110,111
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,71,74,76,79,81,84,85,89,91,92,96,98,102,104,109,111
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
69,70
69,71
80,81
80,82
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_12_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__wchar_t_malloc_12_bad()
CWE401_Memory_Leak__wchar_t_malloc_12_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(10,37,0)
(38,22,0)
(32,44,0)
(9,15,0)
(30,18,0)
(1,27,0)
(18,7,0)
(19,31,0)
(33,11,0)
(39,20,0)
(18,30,0)
(40,22,0)
(8,38,0)
(27,37,0)
(14,30,0)
(39,36,0)
(25,43,0)
(12,33,0)
(31,6,0)
(0,24,0)
(27,32,0)
(37,27,0)
(25,31,0)
(24,7,0)
(34,11,0)
(34,44,0)
(16,15,0)
(29,22,0)
(28,44,0)
(33,34,0)
(30,14,0)
(31,30,0)
(15,34,0)
(23,22,0)
(44,34,0)
(36,39,0)
(21,36,0)
(35,31,0)
(26,38,0)
(7,24,0)
(44,32,0)
(32,27,0)
(35,6,0)
(42,25,0)
(30,31,0)
(44,28,0)
(25,34,0)
(3,35,0)
(5,11,0)
(7,18,0)
(17,34,0)
(4,7,0)
(1,17,1)
(8,26,1)
(33,34,1)
(38,8,1)
(33,12,1)
(15,34,1)
(13,2,1)
(30,18,1)
(9,34,1)
(41,38,1)
(0,4,1)
(35,31,1)
(10,1,1)
(17,41,1)
(24,0,1)
(34,44,1)
(7,24,1)
(27,37,1)
(37,10,1)
(25,34,1)
(44,28,1)
(4,19,1)
(21,15,1)
(2,33,1)
(25,42,1)
(35,3,1)
(31,30,1)
(32,27,1)
(15,16,1)
(42,2,1)
(18,7,1)
(30,14,1)
(25,31,1)
(19,41,1)
(39,36,1)
(12,39,1)
(12,15,1)
(36,21,1)
(13,25,1)
(2,35,1)
(16,9,1)
(3,31,1)
(44,32,1)
(30,18,2)
(19,41,2)
(44,28,2)
(7,41,2)
(7,24,2)
(39,15,2)
(0,41,2)
(27,41,2)
(17,41,2)
(21,15,2)
(24,41,2)
(15,41,2)
(31,41,2)
(25,31,2)
(44,32,2)
(42,2,2)
(36,15,2)
(25,2,2)
(30,41,2)
(25,34,2)
(35,41,2)
(27,37,2)
(18,41,2)
(37,41,2)
(12,41,2)
(1,41,2)
(44,41,2)
(32,41,2)
(33,34,2)
(34,41,2)
(3,41,2)
(32,27,2)
(35,31,2)
(33,41,2)
(16,41,2)
(15,34,2)
(10,41,2)
(30,14,2)
(9,41,2)
(4,41,2)
(39,36,2)
(18,7,2)
(31,30,2)
(34,44,2)
-----------------------------------
(0,wchar_t)
(1,100)
(2,globalReturnsTrueOrFalse()
(3,data)
(4,100)
(5,if (data == NULL)
(6,)
(7,100*sizeof(wchar_t)
(8,NULL)
(9,data)
(10,wchar_t)
(11,)
(12,data)
(13,RET)
(14,wchar_t *)
(15,data == NULL)
(16,NULL)
(17,data)
(18,ALLOCA(100*sizeof(wchar_t)
(19,data)
(20,)
(21,1)
(22,)
(23,if(globalReturnsTrueOrFalse()
(24,sizeof(wchar_t)
(25,free(data)
(26,data)
(27,100*sizeof(wchar_t)
(28,wchar_t *)
(29,if(globalReturnsTrueOrFalse()
(30,(wchar_t *)
(31,data = (wchar_t *)
(32,malloc(100*sizeof(wchar_t)
(33,printWLine(data)
(34,data = (wchar_t *)
(35,printWLine(data)
(36,-1)
(37,sizeof(wchar_t)
(38,data = NULL)
(39,exit(-1)
(40,data)
(41,globalReturnsTrueOrFalse()
(42,data)
(43,)
(44,(wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^