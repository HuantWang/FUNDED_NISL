-----label-----
1
-----code-----
static void ravb_ring_format(struct net_device *ndev, int q)
{
	struct ravb_private *priv = netdev_priv(ndev);
	int num_tx_desc = priv->num_tx_desc;
	struct ravb_ex_rx_desc *rx_desc;
	struct ravb_tx_desc *tx_desc;
	struct ravb_desc *desc;
	int rx_ring_size = sizeof(*rx_desc) * priv->num_rx_ring[q];
	int tx_ring_size = sizeof(*tx_desc) * priv->num_tx_ring[q] *
			   num_tx_desc;
	dma_addr_t dma_addr;
	int i;

	priv->cur_rx[q] = 0;
	priv->cur_tx[q] = 0;
	priv->dirty_rx[q] = 0;
	priv->dirty_tx[q] = 0;

	memset(priv->rx_ring[q], 0, rx_ring_size);
	/* Build RX ring buffer */
	for (i = 0; i < priv->num_rx_ring[q]; i++) {
		/* RX descriptor */
		rx_desc = &priv->rx_ring[q][i];
		rx_desc->ds_cc = cpu_to_le16(RX_BUF_SZ);
		dma_addr = dma_map_single(ndev->dev.parent, priv->rx_skb[q][i]->data,
					  RX_BUF_SZ,
					  DMA_FROM_DEVICE);
		/* We just set the data size to 0 for a failed mapping which
		 * should prevent DMA from happening...
		 */
		if (dma_mapping_error(ndev->dev.parent, dma_addr))
			rx_desc->ds_cc = cpu_to_le16(0);
		rx_desc->dptr = cpu_to_le32(dma_addr);
		rx_desc->die_dt = DT_FEMPTY;
	}
	rx_desc = &priv->rx_ring[q][i];
	rx_desc->dptr = cpu_to_le32((u32)priv->rx_desc_dma[q]);
	rx_desc->die_dt = DT_LINKFIX; /* type */

	memset(priv->tx_ring[q], 0, tx_ring_size);
	/* Build TX ring buffer */
	for (i = 0, tx_desc = priv->tx_ring[q]; i < priv->num_tx_ring[q];
	     i++, tx_desc++) {
		tx_desc->die_dt = DT_EEMPTY;
		if (num_tx_desc > 1) {
			tx_desc++;
			tx_desc->die_dt = DT_EEMPTY;
		}
	}
	tx_desc->dptr = cpu_to_le32((u32)priv->tx_desc_dma[q]);
	tx_desc->die_dt = DT_LINKFIX; /* type */

	/* RX descriptor base address for best effort */
	desc = &priv->desc_bat[RX_QUEUE_OFFSET + q];
	desc->die_dt = DT_LINKFIX; /* type */
	desc->dptr = cpu_to_le32((u32)priv->rx_desc_dma[q]);

	/* TX descriptor base address for best effort */
	desc = &priv->desc_bat[q];
	desc->die_dt = DT_LINKFIX; /* type */
	desc->dptr = cpu_to_le32((u32)priv->tx_desc_dma[q]);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
15,34
15,35
15,36
15,37
15,38
15,39
15,40
15,41
15,42
15,43
16,17
17,18
17,19
18,19
20,21
20,22
20,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
32,33
32,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
41,42
43,44
43,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
54,55
54,56
55,56
57,58
57,59
60,61
61,62
61,63
63,64
63,65
65,66
66,67
66,68
67,68
68,69
69,70
70,71
72,73
72,74
73,74
73,75
74,75
77,78
79,80
80,81
80,82
82,83
82,84
84,85
85,86
85,87
86,87
86,88
87,88
88,89
89,90
90,91
92,93
92,94
93,94
93,95
94,95
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
108,110
110,111
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
119,120
122,123
123,124
123,125
124,125
124,126
125,126
125,127
126,127
129,130
132,133
133,134
133,135
134,135
134,136
135,136
135,137
136,137
139,140
142,143
143,144
143,145
144,145
144,146
145,146
145,147
146,147
149,150
152,153
153,154
153,155
153,156
153,157
154,155
156,157
156,158
157,158
157,159
158,159
161,162
164,165
166,167
166,168
166,169
166,170
167,168
168,169
168,170
169,170
172,173
172,174
173,174
175,176
175,177
176,177
176,178
177,178
180,181
182,183
183,184
185,186
185,187
185,188
185,189
185,190
185,191
186,187
187,188
187,189
188,189
190,191
191,192
191,193
192,193
192,194
193,194
193,195
194,195
197,198
199,200
201,202
202,203
202,204
203,204
203,205
204,205
207,208
207,209
208,209
210,211
212,213
213,214
213,215
214,215
216,217
216,218
216,219
216,220
216,221
217,218
219,220
219,221
220,221
220,222
221,222
225,226
225,227
226,227
226,228
227,228
227,229
228,229
228,230
229,230
232,233
234,235
237,238
239,240
241,242
241,243
242,243
242,244
242,245
243,244
245,246
245,247
246,247
246,248
247,248
251,252
253,254
254,255
254,256
255,256
255,257
256,257
259,260
259,261
260,261
263,264
264,265
264,266
265,266
265,267
266,267
269,270
269,271
270,271
272,273
274,275
275,276
275,277
276,277
276,278
277,278
280,281
282,283
283,284
283,285
284,285
286,287
287,288
287,289
288,289
288,290
289,290
289,291
290,291
293,294
295,296
297,298
298,299
298,300
299,300
299,301
300,301
303,304
303,305
304,305
306,307
306,308
307,308
307,309
308,309
311,312
311,313
312,313
312,314
313,314
316,317
318,319
319,320
319,321
320,321
320,322
321,322
324,325
326,327
327,328
327,329
327,330
327,331
328,329
330,331
330,332
331,332
331,333
332,333
335,336
338,339
340,341
340,342
340,343
340,344
341,342
342,343
342,344
343,344
343,345
344,345
347,348
347,349
348,349
350,351
350,352
351,352
351,353
352,353
355,356
357,358
357,359
358,359
360,361
360,362
361,362
361,363
362,363
365,366
367,368
367,369
368,369
369,370
371,372
372,373
374,375
374,376
375,376
376,377
376,378
377,378
377,379
378,379
381,382
383,384
383,385
384,385
384,386
385,386
388,389
388,390
389,390
390,391
391,392
393,394
394,395
394,396
395,396
395,397
396,397
399,400
401,402
402,403
402,404
403,404
403,405
404,405
407,408
407,409
408,409
410,411
410,412
411,412
411,413
412,413
415,416
415,417
416,417
416,418
417,418
420,421
422,423
423,424
423,425
424,425
424,426
425,426
428,429
430,431
431,432
431,433
432,433
434,435
435,436
435,437
436,437
436,438
437,438
440,441
440,442
441,442
443,444
445,446
446,447
446,448
447,448
447,449
448,449
451,452
453,454
454,455
454,456
455,456
455,457
456,457
459,460
459,461
460,461
462,463
462,464
463,464
463,465
464,465
467,468
467,469
468,469
468,470
469,470
472,473
474,475
475,476
475,477
476,477
478,479
479,480
479,481
480,481
480,482
481,482
484,485
486,487
487,488
487,489
488,489
488,490
489,490
492,493
494,495
495,496
495,497
496,497
496,498
497,498
500,501
500,502
501,502
503,504
503,505
504,505
504,506
505,506
508,509
508,510
509,510
509,511
510,511
513,514
-----nextToken-----
2,4,7,9,10,12,14,19,21,22,26,28,31,33,37,38,42,44,45,49,51,52,56,58,59,62,64,71,75,76,78,81,83,91,95,96,98,100,104,106,109,111,117,118,120,121,127,128,130,131,137,138,140,141,147,148,150,151,155,159,160,162,163,165,170,171,174,178,179,181,184,189,195,196,198,200,205,206,209,211,215,218,222,223,224,230,231,233,235,236,238,240,244,248,249,250,252,257,258,261,262,267,268,271,273,278,279,281,285,291,292,294,296,301,302,305,309,310,314,315,317,322,323,325,329,333,334,336,337,339,345,346,349,353,354,356,359,363,364,366,370,373,379,380,382,386,387,392,397,398,400,405,406,409,413,414,418,419,421,426,427,429,433,438,439,442,444,449,450,452,457,458,461,465,466,470,471,473,477,482,483,485,490,491,493,498,499,502,506,507,511,512,514
-----computeFrom-----
66,67
66,68
85,86
85,87
86,87
86,88
113,114
113,115
123,124
123,125
133,134
133,135
143,144
143,145
168,169
168,170
172,173
172,174
187,188
187,189
202,203
202,204
213,214
213,215
254,255
254,256
264,265
264,266
275,276
275,277
283,284
283,285
298,299
298,300
319,320
319,321
343,344
343,345
347,348
347,349
357,358
357,359
376,377
376,378
384,385
384,386
394,395
394,396
402,403
402,404
423,424
423,425
431,432
431,433
440,441
440,442
446,447
446,448
454,455
454,456
475,476
475,477
487,488
487,489
495,496
495,497
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static void ravb_ring_format(struct net_device *ndev, int q){	struct ravb_private *priv = netdev_priv(ndev);	int num_tx_desc = priv->num_tx_desc;	struct ravb_ex_rx_desc *rx_desc;	struct ravb_tx_desc *tx_desc;	struct ravb_desc *desc;	int rx_ring_size = sizeof(*rx_desc) * priv->num_rx_ring[q];	int tx_ring_size = sizeof(*tx_desc) * priv->num_tx_ring[q] *			   num_tx_desc;	dma_addr_t dma_addr;	int i;	priv->cur_rx[q] = 0;	priv->cur_tx[q] = 0;	priv->dirty_rx[q] = 0;	priv->dirty_tx[q] = 0;	memset(priv->rx_ring[q], 0, rx_ring_size);	/* Build RX ring buffer */	for (i = 0; i < priv->num_rx_ring[q]; i++) {		/* RX descriptor */		rx_desc = &priv->rx_ring[q][i];		rx_desc->ds_cc = cpu_to_le16(RX_BUF_SZ);		dma_addr = dma_map_single(ndev->dev.parent, priv->rx_skb[q][i]->data,					  RX_BUF_SZ,					  DMA_FROM_DEVICE);		/* We just set the data size to 0 for a failed mapping which		 * should prevent DMA from happening...		 */		if (dma_mapping_error(ndev->dev.parent, dma_addr))			rx_desc->ds_cc = cpu_to_le16(0);		rx_desc->dptr = cpu_to_le32(dma_addr);		rx_desc->die_dt = DT_FEMPTY;	}	rx_desc = &priv->rx_ring[q][i];	rx_desc->dptr = cpu_to_le32((u32)priv->rx_desc_dma[q]);	rx_desc->die_dt = DT_LINKFIX; /* type */	memset(priv->tx_ring[q], 0, tx_ring_size);	/* Build TX ring buffer */	for (i = 0, tx_desc = priv->tx_ring[q]; i < priv->num_tx_ring[q];	     i++, tx_desc++) {		tx_desc->die_dt = DT_EEMPTY;		if (num_tx_desc > 1) {			tx_desc++;			tx_desc->die_dt = DT_EEMPTY;		}	}	tx_desc->dptr = cpu_to_le32((u32)priv->tx_desc_dma[q]);	tx_desc->die_dt = DT_LINKFIX; /* type */	/* RX descriptor base address for best effort */	desc = &priv->desc_bat[RX_QUEUE_OFFSET + q];	desc->die_dt = DT_LINKFIX; /* type */	desc->dptr = cpu_to_le32((u32)priv->rx_desc_dma[q]);	/* TX descriptor base address for best effort */	desc = &priv->desc_bat[q];	desc->die_dt = DT_LINKFIX; /* type */	desc->dptr = cpu_to_le32((u32)priv->tx_desc_dma[q]);}
static void
ravb_ring_format(struct net_device *ndev, int q)
ravb_ring_format
struct net_device *ndev
struct net_device
net_device
*ndev
*
ndev
int q
int
q
q
{	struct ravb_private *priv = netdev_priv(ndev);	int num_tx_desc = priv->num_tx_desc;	struct ravb_ex_rx_desc *rx_desc;	struct ravb_tx_desc *tx_desc;	struct ravb_desc *desc;	int rx_ring_size = sizeof(*rx_desc) * priv->num_rx_ring[q];	int tx_ring_size = sizeof(*tx_desc) * priv->num_tx_ring[q] *			   num_tx_desc;	dma_addr_t dma_addr;	int i;	priv->cur_rx[q] = 0;	priv->cur_tx[q] = 0;	priv->dirty_rx[q] = 0;	priv->dirty_tx[q] = 0;	memset(priv->rx_ring[q], 0, rx_ring_size);	/* Build RX ring buffer */	for (i = 0; i < priv->num_rx_ring[q]; i++) {		/* RX descriptor */		rx_desc = &priv->rx_ring[q][i];		rx_desc->ds_cc = cpu_to_le16(RX_BUF_SZ);		dma_addr = dma_map_single(ndev->dev.parent, priv->rx_skb[q][i]->data,					  RX_BUF_SZ,					  DMA_FROM_DEVICE);		/* We just set the data size to 0 for a failed mapping which		 * should prevent DMA from happening...		 */		if (dma_mapping_error(ndev->dev.parent, dma_addr))			rx_desc->ds_cc = cpu_to_le16(0);		rx_desc->dptr = cpu_to_le32(dma_addr);		rx_desc->die_dt = DT_FEMPTY;	}	rx_desc = &priv->rx_ring[q][i];	rx_desc->dptr = cpu_to_le32((u32)priv->rx_desc_dma[q]);	rx_desc->die_dt = DT_LINKFIX; /* type */	memset(priv->tx_ring[q], 0, tx_ring_size);	/* Build TX ring buffer */	for (i = 0, tx_desc = priv->tx_ring[q]; i < priv->num_tx_ring[q];	     i++, tx_desc++) {		tx_desc->die_dt = DT_EEMPTY;		if (num_tx_desc > 1) {			tx_desc++;			tx_desc->die_dt = DT_EEMPTY;		}	}	tx_desc->dptr = cpu_to_le32((u32)priv->tx_desc_dma[q]);	tx_desc->die_dt = DT_LINKFIX; /* type */	/* RX descriptor base address for best effort */	desc = &priv->desc_bat[RX_QUEUE_OFFSET + q];	desc->die_dt = DT_LINKFIX; /* type */	desc->dptr = cpu_to_le32((u32)priv->rx_desc_dma[q]);	/* TX descriptor base address for best effort */	desc = &priv->desc_bat[q];	desc->die_dt = DT_LINKFIX; /* type */	desc->dptr = cpu_to_le32((u32)priv->tx_desc_dma[q]);}
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private
ravb_private
*priv = netdev_priv(ndev)
*
priv
= netdev_priv(ndev)
netdev_priv(ndev)
netdev_priv
netdev_priv
ndev
ndev
int num_tx_desc = priv->num_tx_desc;
int num_tx_desc = priv->num_tx_desc;
int
num_tx_desc = priv->num_tx_desc
num_tx_desc
= priv->num_tx_desc
priv->num_tx_desc
priv
priv
num_tx_desc
struct ravb_ex_rx_desc *rx_desc;
struct ravb_ex_rx_desc *rx_desc;
struct ravb_ex_rx_desc
ravb_ex_rx_desc
*rx_desc
*
rx_desc
struct ravb_tx_desc *tx_desc;
struct ravb_tx_desc *tx_desc;
struct ravb_tx_desc
ravb_tx_desc
*tx_desc
*
tx_desc
struct ravb_desc *desc;
struct ravb_desc *desc;
struct ravb_desc
ravb_desc
*desc
*
desc
int rx_ring_size = sizeof(*rx_desc) * priv->num_rx_ring[q];
int rx_ring_size = sizeof(*rx_desc) * priv->num_rx_ring[q];
int
rx_ring_size = sizeof(*rx_desc) * priv->num_rx_ring[q]
rx_ring_size
= sizeof(*rx_desc) * priv->num_rx_ring[q]
sizeof(*rx_desc) * priv->num_rx_ring[q]
sizeof(*rx_desc)
(*rx_desc)
*rx_desc
rx_desc
rx_desc
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
int tx_ring_size = sizeof(*tx_desc) * priv->num_tx_ring[q] *			   num_tx_desc;
int tx_ring_size = sizeof(*tx_desc) * priv->num_tx_ring[q] *			   num_tx_desc;
int
tx_ring_size = sizeof(*tx_desc) * priv->num_tx_ring[q] *			   num_tx_desc
tx_ring_size
= sizeof(*tx_desc) * priv->num_tx_ring[q] *			   num_tx_desc
sizeof(*tx_desc) * priv->num_tx_ring[q] *			   num_tx_desc
sizeof(*tx_desc) * priv->num_tx_ring[q]
sizeof(*tx_desc)
(*tx_desc)
*tx_desc
tx_desc
tx_desc
priv->num_tx_ring[q]
priv->num_tx_ring
priv
priv
num_tx_ring
q
q
num_tx_desc
num_tx_desc
dma_addr_t dma_addr;
dma_addr_t dma_addr;
dma_addr_t
dma_addr_t
dma_addr
dma_addr
int i;
int i;
int
i
i
priv->cur_rx[q] = 0;
priv->cur_rx[q] = 0
priv->cur_rx[q]
priv->cur_rx
priv
priv
cur_rx
q
q
0
priv->cur_tx[q] = 0;
priv->cur_tx[q] = 0
priv->cur_tx[q]
priv->cur_tx
priv
priv
cur_tx
q
q
0
priv->dirty_rx[q] = 0;
priv->dirty_rx[q] = 0
priv->dirty_rx[q]
priv->dirty_rx
priv
priv
dirty_rx
q
q
0
priv->dirty_tx[q] = 0;
priv->dirty_tx[q] = 0
priv->dirty_tx[q]
priv->dirty_tx
priv
priv
dirty_tx
q
q
0
memset(priv->rx_ring[q], 0, rx_ring_size);
memset(priv->rx_ring[q], 0, rx_ring_size)
memset
memset
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
0
rx_ring_size
rx_ring_size
for (i = 0; i < priv->num_rx_ring[q]; i++) {		/* RX descriptor */		rx_desc = &priv->rx_ring[q][i];		rx_desc->ds_cc = cpu_to_le16(RX_BUF_SZ);		dma_addr = dma_map_single(ndev->dev.parent, priv->rx_skb[q][i]->data,					  RX_BUF_SZ,					  DMA_FROM_DEVICE);		/* We just set the data size to 0 for a failed mapping which		 * should prevent DMA from happening...		 */		if (dma_mapping_error(ndev->dev.parent, dma_addr))			rx_desc->ds_cc = cpu_to_le16(0);		rx_desc->dptr = cpu_to_le32(dma_addr);		rx_desc->die_dt = DT_FEMPTY;	}
i = 0;
i = 0
i
i
0
i < priv->num_rx_ring[q]
i
i
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
i++
i
i
{		/* RX descriptor */		rx_desc = &priv->rx_ring[q][i];		rx_desc->ds_cc = cpu_to_le16(RX_BUF_SZ);		dma_addr = dma_map_single(ndev->dev.parent, priv->rx_skb[q][i]->data,					  RX_BUF_SZ,					  DMA_FROM_DEVICE);		/* We just set the data size to 0 for a failed mapping which		 * should prevent DMA from happening...		 */		if (dma_mapping_error(ndev->dev.parent, dma_addr))			rx_desc->ds_cc = cpu_to_le16(0);		rx_desc->dptr = cpu_to_le32(dma_addr);		rx_desc->die_dt = DT_FEMPTY;	}
rx_desc = &priv->rx_ring[q][i];
rx_desc = &priv->rx_ring[q][i]
rx_desc
rx_desc
&priv->rx_ring[q][i]
priv->rx_ring[q][i]
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
i
i
rx_desc->ds_cc = cpu_to_le16(RX_BUF_SZ);
rx_desc->ds_cc = cpu_to_le16(RX_BUF_SZ)
rx_desc->ds_cc
rx_desc
rx_desc
ds_cc
cpu_to_le16(RX_BUF_SZ)
cpu_to_le16
cpu_to_le16
RX_BUF_SZ
RX_BUF_SZ
dma_addr = dma_map_single(ndev->dev.parent, priv->rx_skb[q][i]->data,					  RX_BUF_SZ,					  DMA_FROM_DEVICE);
dma_addr = dma_map_single(ndev->dev.parent, priv->rx_skb[q][i]->data,					  RX_BUF_SZ,					  DMA_FROM_DEVICE)
dma_addr
dma_addr
dma_map_single(ndev->dev.parent, priv->rx_skb[q][i]->data,					  RX_BUF_SZ,					  DMA_FROM_DEVICE)
dma_map_single
dma_map_single
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
priv->rx_skb[q][i]->data
priv->rx_skb[q][i]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
i
i
data
RX_BUF_SZ
RX_BUF_SZ
DMA_FROM_DEVICE
DMA_FROM_DEVICE
if (dma_mapping_error(ndev->dev.parent, dma_addr))			rx_desc->ds_cc = cpu_to_le16(0);
dma_mapping_error(ndev->dev.parent, dma_addr)
dma_mapping_error
dma_mapping_error
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
dma_addr
dma_addr
rx_desc->ds_cc = cpu_to_le16(0);
rx_desc->ds_cc = cpu_to_le16(0)
rx_desc->ds_cc
rx_desc
rx_desc
ds_cc
cpu_to_le16(0)
cpu_to_le16
cpu_to_le16
0
rx_desc->dptr = cpu_to_le32(dma_addr);
rx_desc->dptr = cpu_to_le32(dma_addr)
rx_desc->dptr
rx_desc
rx_desc
dptr
cpu_to_le32(dma_addr)
cpu_to_le32
cpu_to_le32
dma_addr
dma_addr
rx_desc->die_dt = DT_FEMPTY;
rx_desc->die_dt = DT_FEMPTY
rx_desc->die_dt
rx_desc
rx_desc
die_dt
DT_FEMPTY
DT_FEMPTY
rx_desc = &priv->rx_ring[q][i];
rx_desc = &priv->rx_ring[q][i]
rx_desc
rx_desc
&priv->rx_ring[q][i]
priv->rx_ring[q][i]
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
i
i
rx_desc->dptr = cpu_to_le32((u32)priv->rx_desc_dma[q]);
rx_desc->dptr = cpu_to_le32((u32)priv->rx_desc_dma[q])
rx_desc->dptr
rx_desc
rx_desc
dptr
cpu_to_le32((u32)priv->rx_desc_dma[q])
cpu_to_le32
cpu_to_le32
(u32)priv->rx_desc_dma[q]
u32
u32
u32

priv->rx_desc_dma[q]
priv->rx_desc_dma
priv
priv
rx_desc_dma
q
q
rx_desc->die_dt = DT_LINKFIX;
rx_desc->die_dt = DT_LINKFIX
rx_desc->die_dt
rx_desc
rx_desc
die_dt
DT_LINKFIX
DT_LINKFIX
memset(priv->tx_ring[q], 0, tx_ring_size);
memset(priv->tx_ring[q], 0, tx_ring_size)
memset
memset
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
0
tx_ring_size
tx_ring_size
for (i = 0, tx_desc = priv->tx_ring[q]; i < priv->num_tx_ring[q];	     i++, tx_desc++) {		tx_desc->die_dt = DT_EEMPTY;		if (num_tx_desc > 1) {			tx_desc++;			tx_desc->die_dt = DT_EEMPTY;		}	}
i = 0, tx_desc = priv->tx_ring[q];
i = 0, tx_desc = priv->tx_ring[q]
i = 0
i
i
0
tx_desc = priv->tx_ring[q]
tx_desc
tx_desc
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
i < priv->num_tx_ring[q]
i
i
priv->num_tx_ring[q]
priv->num_tx_ring
priv
priv
num_tx_ring
q
q
i++, tx_desc++
i++
i
i
tx_desc++
tx_desc
tx_desc
{		tx_desc->die_dt = DT_EEMPTY;		if (num_tx_desc > 1) {			tx_desc++;			tx_desc->die_dt = DT_EEMPTY;		}	}
tx_desc->die_dt = DT_EEMPTY;
tx_desc->die_dt = DT_EEMPTY
tx_desc->die_dt
tx_desc
tx_desc
die_dt
DT_EEMPTY
DT_EEMPTY
if (num_tx_desc > 1) {			tx_desc++;			tx_desc->die_dt = DT_EEMPTY;		}
num_tx_desc > 1
num_tx_desc
num_tx_desc
1
{			tx_desc++;			tx_desc->die_dt = DT_EEMPTY;		}
tx_desc++;
tx_desc++
tx_desc
tx_desc
tx_desc->die_dt = DT_EEMPTY;
tx_desc->die_dt = DT_EEMPTY
tx_desc->die_dt
tx_desc
tx_desc
die_dt
DT_EEMPTY
DT_EEMPTY
tx_desc->dptr = cpu_to_le32((u32)priv->tx_desc_dma[q]);
tx_desc->dptr = cpu_to_le32((u32)priv->tx_desc_dma[q])
tx_desc->dptr
tx_desc
tx_desc
dptr
cpu_to_le32((u32)priv->tx_desc_dma[q])
cpu_to_le32
cpu_to_le32
(u32)priv->tx_desc_dma[q]
u32
u32
u32

priv->tx_desc_dma[q]
priv->tx_desc_dma
priv
priv
tx_desc_dma
q
q
tx_desc->die_dt = DT_LINKFIX;
tx_desc->die_dt = DT_LINKFIX
tx_desc->die_dt
tx_desc
tx_desc
die_dt
DT_LINKFIX
DT_LINKFIX
desc = &priv->desc_bat[RX_QUEUE_OFFSET + q];
desc = &priv->desc_bat[RX_QUEUE_OFFSET + q]
desc
desc
&priv->desc_bat[RX_QUEUE_OFFSET + q]
priv->desc_bat[RX_QUEUE_OFFSET + q]
priv->desc_bat
priv
priv
desc_bat
RX_QUEUE_OFFSET + q
RX_QUEUE_OFFSET
RX_QUEUE_OFFSET
q
q
desc->die_dt = DT_LINKFIX;
desc->die_dt = DT_LINKFIX
desc->die_dt
desc
desc
die_dt
DT_LINKFIX
DT_LINKFIX
desc->dptr = cpu_to_le32((u32)priv->rx_desc_dma[q]);
desc->dptr = cpu_to_le32((u32)priv->rx_desc_dma[q])
desc->dptr
desc
desc
dptr
cpu_to_le32((u32)priv->rx_desc_dma[q])
cpu_to_le32
cpu_to_le32
(u32)priv->rx_desc_dma[q]
u32
u32
u32

priv->rx_desc_dma[q]
priv->rx_desc_dma
priv
priv
rx_desc_dma
q
q
desc = &priv->desc_bat[q];
desc = &priv->desc_bat[q]
desc
desc
&priv->desc_bat[q]
priv->desc_bat[q]
priv->desc_bat
priv
priv
desc_bat
q
q
desc->die_dt = DT_LINKFIX;
desc->die_dt = DT_LINKFIX
desc->die_dt
desc
desc
die_dt
DT_LINKFIX
DT_LINKFIX
desc->dptr = cpu_to_le32((u32)priv->tx_desc_dma[q]);
desc->dptr = cpu_to_le32((u32)priv->tx_desc_dma[q])
desc->dptr
desc
desc
dptr
cpu_to_le32((u32)priv->tx_desc_dma[q])
cpu_to_le32
cpu_to_le32
(u32)priv->tx_desc_dma[q]
u32
u32
u32

priv->tx_desc_dma[q]
priv->tx_desc_dma
priv
priv
tx_desc_dma
q
q
-----joern-----
(231,246,0)
(268,219,0)
(113,181,0)
(213,147,0)
(57,159,0)
(277,258,0)
(108,174,0)
(220,287,0)
(176,124,0)
(64,174,0)
(286,139,0)
(111,122,0)
(163,145,0)
(232,147,0)
(235,82,0)
(222,226,0)
(298,152,0)
(151,88,0)
(175,1,0)
(87,28,0)
(52,130,0)
(226,23,0)
(249,65,0)
(212,57,0)
(82,235,0)
(256,184,0)
(86,18,0)
(287,50,0)
(120,255,0)
(102,278,0)
(78,175,0)
(99,88,0)
(250,117,0)
(54,33,0)
(18,108,0)
(227,40,0)
(61,229,0)
(206,59,0)
(152,147,0)
(157,153,0)
(291,197,0)
(70,230,0)
(76,245,0)
(103,300,0)
(148,185,0)
(51,283,0)
(287,175,0)
(161,115,0)
(282,110,0)
(252,61,0)
(97,166,0)
(105,228,0)
(296,234,0)
(40,147,0)
(83,147,0)
(251,259,0)
(290,175,0)
(152,243,0)
(238,203,0)
(41,278,0)
(177,241,0)
(39,147,0)
(150,225,0)
(129,147,0)
(142,180,0)
(161,189,0)
(1,166,0)
(65,232,0)
(175,147,0)
(122,219,0)
(76,285,0)
(29,74,0)
(62,174,0)
(137,280,0)
(191,291,0)
(239,121,0)
(81,93,0)
(116,285,0)
(245,153,0)
(70,248,0)
(288,210,0)
(27,147,0)
(291,124,0)
(4,286,0)
(96,102,0)
(204,17,0)
(159,25,0)
(278,102,0)
(12,147,0)
(59,153,0)
(228,211,0)
(32,155,0)
(67,25,0)
(159,57,0)
(230,70,0)
(50,153,0)
(179,175,0)
(145,175,0)
(168,110,0)
(154,50,0)
(216,275,0)
(229,294,0)
(239,163,0)
(69,162,0)
(78,59,0)
(8,148,0)
(129,39,0)
(63,129,0)
(260,251,0)
(203,147,0)
(14,147,0)
(163,239,0)
(94,256,0)
(51,175,0)
(202,157,0)
(299,288,0)
(295,51,0)
(61,88,0)
(248,153,0)
(232,100,0)
(243,152,0)
(187,192,0)
(21,103,0)
(230,147,0)
(265,159,0)
(283,51,0)
(180,166,0)
(285,226,0)
(189,161,0)
(119,181,0)
(151,277,0)
(13,248,0)
(65,300,0)
(288,299,0)
(48,276,0)
(181,119,0)
(281,173,0)
(55,97,0)
(25,115,0)
(101,88,0)
(127,255,0)
(75,88,0)
(98,151,0)
(145,163,0)
(219,147,0)
(229,153,0)
(197,243,0)
(292,283,0)
(274,290,0)
(106,64,0)
(157,20,0)
(223,105,0)
(97,184,0)
(231,192,0)
(33,28,0)
(7,197,0)
(18,86,0)
(84,147,0)
(280,300,0)
(42,76,0)
(61,268,0)
(71,97,0)
(146,161,0)
(169,78,0)
(294,229,0)
(103,234,0)
(226,285,0)
(57,175,0)
(135,100,0)
(20,175,0)
(102,117,0)
(204,258,0)
(66,51,0)
(156,0,0)
(30,126,0)
(221,82,0)
(293,230,0)
(95,227,0)
(208,288,0)
(28,87,0)
(254,244,0)
(214,18,0)
(266,298,0)
(73,110,0)
(290,47,0)
(149,207,0)
(134,20,0)
(110,175,0)
(77,259,0)
(172,6,0)
(217,119,0)
(256,23,0)
(227,230,0)
(129,259,0)
(25,159,0)
(209,179,0)
(103,153,0)
(235,175,0)
(144,161,0)
(56,129,0)
(139,117,0)
(251,175,0)
(268,61,0)
(244,230,0)
(140,96,0)
(167,150,0)
(100,232,0)
(5,130,0)
(49,204,0)
(276,155,0)
(165,0,0)
(195,207,0)
(183,227,0)
(52,162,0)
(158,40,0)
(297,132,0)
(44,233,0)
(46,105,0)
(132,147,0)
(91,147,0)
(108,18,0)
(39,299,0)
(47,153,0)
(246,231,0)
(192,231,0)
(85,130,0)
(3,147,0)
(196,73,0)
(275,210,0)
(164,39,0)
(284,214,0)
(211,175,0)
(280,160,0)
(299,39,0)
(17,74,0)
(171,145,0)
(47,290,0)
(58,136,0)
(234,175,0)
(233,245,0)
(297,255,0)
(119,85,0)
(211,228,0)
(253,267,0)
(180,26,0)
(64,141,0)
(239,87,0)
(277,151,0)
(10,298,0)
(185,148,0)
(205,126,0)
(299,185,0)
(47,99,0)
(242,1,0)
(283,231,0)
(199,33,0)
(86,175,0)
(243,197,0)
(59,93,0)
(182,234,0)
(0,175,0)
(218,287,0)
(87,239,0)
(69,300,0)
(80,145,0)
(300,103,0)
(26,180,0)
(288,228,0)
(60,139,0)
(294,175,0)
(74,23,0)
(118,294,0)
(19,48,0)
(229,61,0)
(237,181,0)
(82,153,0)
(236,135,0)
(192,187,0)
(93,147,0)
(112,244,0)
(233,175,0)
(121,239,0)
(159,153,0)
(219,268,0)
(248,0,0)
(73,135,0)
(125,141,0)
(225,150,0)
(286,258,0)
(194,26,0)
(269,294,0)
(82,151,0)
(38,132,0)
(257,228,0)
(141,147,0)
(189,153,0)
(67,6,0)
(76,88,0)
(291,153,0)
(207,31,0)
(193,175,0)
(100,135,0)
(124,291,0)
(90,23,0)
(135,236,0)
(6,67,0)
(272,85,0)
(92,184,0)
(215,64,0)
(126,258,0)
(31,301,0)
(190,275,0)
(197,7,0)
(74,17,0)
(298,174,0)
(267,301,0)
(255,297,0)
(184,97,0)
(34,290,0)
(170,96,0)
(255,175,0)
(189,179,0)
(17,117,0)
(28,147,0)
(79,65,0)
(174,147,0)
(9,179,0)
(126,225,0)
(264,235,0)
(115,147,0)
(228,147,0)
(214,153,0)
(119,153,0)
(15,300,0)
(135,73,0)
(96,258,0)
(48,300,0)
(198,31,0)
(151,82,0)
(107,226,0)
(240,210,0)
(50,136,0)
(187,147,0)
(248,70,0)
(226,26,0)
(123,219,0)
(157,241,0)
(173,88,0)
(133,211,0)
(68,99,0)
(259,129,0)
(36,251,0)
(262,47,0)
(128,124,0)
(23,226,0)
(136,147,0)
(201,233,0)
(23,117,0)
(22,48,0)
(245,76,0)
(210,153,0)
(85,119,0)
(210,288,0)
(188,189,0)
(37,130,0)
(1,175,0)
(160,147,0)
(185,299,0)
(285,76,0)
(2,147,0)
(300,131,0)
(270,258,0)
(289,204,0)
(247,78,0)
(184,256,0)
(99,47,0)
(297,153,0)
(267,300,0)
(72,86,0)
(234,103,0)
(89,180,0)
(24,147,0)
(138,86,0)
(174,108,0)
(258,277,0)
(245,233,0)
(275,175,0)
(271,20,0)
(241,147,0)
(73,153,0)
(130,131,0)
(0,248,0)
(261,69,0)
(259,153,0)
(115,25,0)
(114,57,0)
(178,276,0)
(20,157,0)
(179,189,0)
(273,280,0)
(259,251,0)
(231,283,0)
(207,300,0)
(258,117,0)
(122,203,0)
(59,78,0)
(143,297,0)
(163,153,0)
(35,245,0)
(45,147,0)
(244,187,0)
(210,275,0)
(279,115,0)
(181,175,0)
(200,122,0)
(104,286,0)
(43,160,0)
(25,67,0)
(18,214,0)
(283,153,0)
(224,235,0)
(16,163,0)
(50,287,0)
(26,226,0)
(161,147,0)
(110,73,0)
(124,175,0)
(33,219,0)
(197,291,0)
(53,52,0)
(109,229,0)
(186,211,0)
(263,214,0)
(25,67,1)
(87,239,1)
(285,76,1)
(259,251,1)
(224,270,1)
(229,153,1)
(288,208,1)
(10,266,1)
(139,60,1)
(278,41,1)
(57,175,1)
(248,13,1)
(235,264,1)
(211,175,1)
(81,59,1)
(140,258,1)
(94,184,1)
(129,56,1)
(38,297,1)
(251,260,1)
(141,125,1)
(109,294,1)
(270,99,1)
(78,175,1)
(151,98,1)
(163,16,1)
(20,271,1)
(185,148,1)
(165,156,1)
(149,267,1)
(297,255,1)
(68,173,1)
(173,88,1)
(1,242,1)
(264,224,1)
(5,37,1)
(285,116,1)
(98,82,1)
(72,138,1)
(292,51,1)
(300,103,1)
(291,191,1)
(96,170,1)
(169,241,1)
(238,122,1)
(217,181,1)
(58,50,1)
(183,230,1)
(54,199,1)
(231,283,1)
(184,97,1)
(176,298,1)
(145,175,1)
(237,272,1)
(210,240,1)
(59,78,1)
(259,77,1)
(159,57,1)
(50,154,1)
(61,252,1)
(132,38,1)
(26,194,1)
(76,88,1)
(211,186,1)
(85,119,1)
(99,88,1)
(287,175,1)
(71,55,1)
(124,175,1)
(172,279,1)
(124,128,1)
(135,236,1)
(123,99,1)
(151,88,1)
(163,145,1)
(129,39,1)
(194,180,1)
(158,227,1)
(0,175,1)
(282,65,1)
(190,185,1)
(92,97,1)
(221,235,1)
(79,85,1)
(173,281,1)
(39,299,1)
(148,8,1)
(103,21,1)
(157,202,1)
(42,245,1)
(74,23,1)
(51,66,1)
(9,209,1)
(232,100,1)
(239,163,1)
(283,292,1)
(272,69,1)
(35,233,1)
(128,176,1)
(212,67,1)
(240,275,1)
(18,86,1)
(255,127,1)
(181,175,1)
(247,169,1)
(231,246,1)
(216,190,1)
(116,76,1)
(48,22,1)
(197,7,1)
(225,150,1)
(279,228,1)
(273,232,1)
(138,62,1)
(6,172,1)
(48,300,1)
(289,225,1)
(207,195,1)
(95,183,1)
(108,18,1)
(22,19,1)
(51,175,1)
(234,182,1)
(199,219,1)
(31,198,1)
(50,153,1)
(274,34,1)
(198,207,1)
(244,254,1)
(258,277,1)
(76,42,1)
(249,79,1)
(56,63,1)
(33,54,1)
(210,153,1)
(284,263,1)
(57,114,1)
(245,153,1)
(252,229,1)
(118,123,1)
(82,153,1)
(29,204,1)
(0,165,1)
(271,134,1)
(161,146,1)
(219,268,1)
(86,72,1)
(174,108,1)
(15,130,1)
(214,284,1)
(156,293,1)
(73,110,1)
(195,149,1)
(233,201,1)
(245,233,1)
(122,200,1)
(73,196,1)
(102,278,1)
(239,121,1)
(120,39,1)
(16,145,1)
(234,175,1)
(163,153,1)
(157,20,1)
(289,256,1)
(20,175,1)
(245,35,1)
(85,130,1)
(101,75,1)
(243,197,1)
(291,124,1)
(36,203,1)
(50,287,1)
(25,159,1)
(189,188,1)
(119,181,1)
(68,88,1)
(297,153,1)
(105,223,1)
(286,258,1)
(146,144,1)
(64,174,1)
(78,247,1)
(59,153,1)
(65,300,1)
(161,189,1)
(111,28,1)
(67,6,1)
(90,102,1)
(275,216,1)
(142,89,1)
(299,288,1)
(167,126,1)
(223,46,1)
(276,178,1)
(164,115,1)
(1,166,1)
(34,68,1)
(267,253,1)
(11,187,1)
(294,175,1)
(272,300,1)
(115,25,1)
(70,248,1)
(291,153,1)
(266,141,1)
(13,0,1)
(204,49,1)
(80,33,1)
(145,171,1)
(47,290,1)
(105,228,1)
(119,153,1)
(73,153,1)
(64,106,1)
(293,152,1)
(288,228,1)
(226,26,1)
(227,95,1)
(77,251,1)
(97,166,1)
(208,210,1)
(17,74,1)
(269,118,1)
(126,258,1)
(144,189,1)
(88,101,1)
(41,96,1)
(59,206,1)
(69,300,1)
(181,113,1)
(267,300,1)
(26,180,1)
(18,214,1)
(242,193,1)
(265,57,1)
(82,221,1)
(233,175,1)
(196,110,1)
(106,215,1)
(280,300,1)
(228,211,1)
(256,184,1)
(103,153,1)
(114,212,1)
(192,231,1)
(104,4,1)
(49,289,1)
(202,20,1)
(65,249,1)
(222,285,1)
(294,269,1)
(200,111,1)
(179,9,1)
(186,133,1)
(159,153,1)
(281,139,1)
(229,294,1)
(46,276,1)
(275,175,1)
(207,300,1)
(255,175,1)
(227,230,1)
(159,265,1)
(184,92,1)
(86,175,1)
(280,137,1)
(261,52,1)
(201,44,1)
(112,40,1)
(53,31,1)
(298,174,1)
(189,179,1)
(134,132,1)
(44,26,1)
(288,210,1)
(103,234,1)
(63,259,1)
(263,86,1)
(43,280,1)
(82,235,1)
(96,258,1)
(209,136,1)
(179,175,1)
(180,166,1)
(161,115,1)
(218,220,1)
(191,124,1)
(235,175,1)
(69,261,1)
(260,36,1)
(74,29,1)
(177,157,1)
(157,153,1)
(133,257,1)
(52,53,1)
(66,295,1)
(226,107,1)
(254,112,1)
(151,82,1)
(19,85,1)
(170,140,1)
(130,5,1)
(4,17,1)
(290,274,1)
(136,58,1)
(287,218,1)
(206,78,1)
(248,153,1)
(187,192,1)
(129,259,1)
(152,243,1)
(113,237,1)
(290,175,1)
(40,158,1)
(262,290,1)
(251,175,1)
(61,88,1)
(127,120,1)
(215,174,1)
(122,219,1)
(110,175,1)
(210,275,1)
(257,175,1)
(297,143,1)
(295,244,1)
(277,151,1)
(256,23,1)
(119,217,1)
(47,153,1)
(135,73,1)
(248,0,1)
(230,70,1)
(286,104,1)
(150,167,1)
(137,273,1)
(110,168,1)
(178,48,1)
(28,87,1)
(143,255,1)
(37,129,1)
(160,43,1)
(296,15,1)
(100,135,1)
(203,238,1)
(99,47,1)
(62,160,1)
(256,94,1)
(259,153,1)
(55,23,1)
(60,286,1)
(268,61,1)
(175,1,1)
(75,161,1)
(220,93,1)
(33,219,1)
(205,256,1)
(89,90,1)
(97,71,1)
(47,262,1)
(76,245,1)
(253,105,1)
(283,51,1)
(125,64,1)
(52,130,1)
(197,291,1)
(298,10,1)
(168,282,1)
(126,30,1)
(189,153,1)
(241,177,1)
(214,153,1)
(53,105,1)
(188,179,1)
(204,258,1)
(180,142,1)
(244,230,1)
(61,229,1)
(226,285,1)
(171,80,1)
(23,226,1)
(93,81,1)
(21,234,1)
(107,222,1)
(182,296,1)
(229,109,1)
(299,185,1)
(30,205,1)
(8,164,1)
(154,287,1)
(283,153,1)
(222,99,2)
(26,180,2)
(122,219,2)
(159,57,2)
(235,175,2)
(207,300,2)
(139,99,2)
(229,153,2)
(124,175,2)
(181,175,2)
(175,1,2)
(150,256,2)
(33,219,2)
(39,299,2)
(167,256,2)
(291,153,2)
(300,103,2)
(94,99,2)
(157,153,2)
(85,119,2)
(239,163,2)
(59,78,2)
(230,70,2)
(35,99,2)
(4,99,2)
(184,99,2)
(245,233,2)
(237,85,2)
(197,291,2)
(223,85,2)
(290,99,2)
(60,99,2)
(277,99,2)
(217,85,2)
(253,105,2)
(195,105,2)
(86,175,2)
(281,99,2)
(299,288,2)
(102,278,2)
(235,99,2)
(159,153,2)
(287,175,2)
(248,153,2)
(225,256,2)
(288,210,2)
(82,99,2)
(184,97,2)
(92,99,2)
(116,99,2)
(258,99,2)
(234,175,2)
(99,99,2)
(255,175,2)
(161,115,2)
(105,228,2)
(89,99,2)
(103,153,2)
(278,99,2)
(104,99,2)
(256,99,2)
(65,300,2)
(69,300,2)
(61,229,2)
(224,99,2)
(197,7,2)
(85,130,2)
(233,175,2)
(129,259,2)
(264,99,2)
(49,99,2)
(297,153,2)
(149,105,2)
(270,99,2)
(256,184,2)
(233,99,2)
(181,85,2)
(48,85,2)
(129,39,2)
(211,175,2)
(126,256,2)
(107,99,2)
(113,85,2)
(228,211,2)
(57,175,2)
(297,255,2)
(173,88,2)
(262,99,2)
(71,99,2)
(34,99,2)
(59,153,2)
(173,99,2)
(18,214,2)
(248,0,2)
(201,99,2)
(61,88,2)
(229,294,2)
(170,99,2)
(105,85,2)
(29,99,2)
(23,99,2)
(108,18,2)
(227,230,2)
(179,175,2)
(163,145,2)
(28,87,2)
(73,153,2)
(25,159,2)
(55,99,2)
(151,82,2)
(26,99,2)
(46,85,2)
(87,239,2)
(98,99,2)
(145,175,2)
(20,175,2)
(283,51,2)
(78,175,2)
(1,166,2)
(126,258,2)
(52,130,2)
(226,285,2)
(210,275,2)
(85,85,2)
(51,175,2)
(100,135,2)
(232,100,2)
(41,99,2)
(245,99,2)
(96,99,2)
(68,99,2)
(210,153,2)
(53,85,2)
(180,99,2)
(294,175,2)
(180,166,2)
(189,179,2)
(25,67,2)
(142,99,2)
(17,74,2)
(286,99,2)
(226,26,2)
(219,268,2)
(291,124,2)
(31,105,2)
(280,300,2)
(289,99,2)
(73,110,2)
(261,85,2)
(52,85,2)
(47,99,2)
(225,150,2)
(221,99,2)
(64,174,2)
(214,153,2)
(268,61,2)
(174,108,2)
(135,236,2)
(97,99,2)
(267,105,2)
(205,256,2)
(285,99,2)
(97,166,2)
(135,73,2)
(82,153,2)
(69,85,2)
(151,99,2)
(119,153,2)
(245,153,2)
(277,151,2)
(82,235,2)
(198,105,2)
(274,99,2)
(18,86,2)
(299,185,2)
(194,99,2)
(157,20,2)
(286,258,2)
(90,99,2)
(152,243,2)
(23,226,2)
(140,99,2)
(187,192,2)
(272,85,2)
(276,85,2)
(204,99,2)
(99,88,2)
(151,88,2)
(19,85,2)
(76,88,2)
(259,251,2)
(17,99,2)
(189,153,2)
(207,105,2)
(30,256,2)
(285,76,2)
(119,85,2)
(204,258,2)
(185,148,2)
(99,47,2)
(231,246,2)
(259,153,2)
(161,189,2)
(243,197,2)
(244,230,2)
(275,175,2)
(115,25,2)
(290,175,2)
(76,245,2)
(103,234,2)
(258,277,2)
(70,248,2)
(50,153,2)
(48,300,2)
(44,99,2)
(74,23,2)
(96,258,2)
(251,175,2)
(231,283,2)
(74,99,2)
(192,231,2)
(22,85,2)
(47,153,2)
(256,23,2)
(178,85,2)
(0,175,2)
(267,300,2)
(226,99,2)
(47,290,2)
(76,99,2)
(283,153,2)
(67,6,2)
(163,153,2)
(110,175,2)
(239,121,2)
(102,99,2)
(42,99,2)
(50,287,2)
(298,174,2)
(119,181,2)
(288,228,2)
-----------------------------------
(0,priv->desc_bat)
(1,netdev_priv(ndev)
(2,rx_desc)
(3,rx_ring_size)
(4,rx_desc)
(5,0)
(6,*rx_desc)
(7,u32)
(8,tx_desc)
(9,rx_ring)
(10,dptr)
(11,RET)
(12,tx_desc)
(13,q)
(14,priv)
(15,tx_desc)
(16,q)
(17,rx_desc->dptr = cpu_to_le32(dma_addr)
(18,priv->desc_bat[RX_QUEUE_OFFSET + q])
(19,tx_desc)
(20,priv->cur_tx)
(21,q)
(22,die_dt)
(23,dma_addr = dma_map_single(ndev->dev.parent, priv->rx_skb[q][i]->data,\n\\n\\t\\t\\t\\t\\t  RX_BUF_SZ,\n\\n\\t\\t\\t\\t\\t  DMA_FROM_DEVICE)
(24,i)
(25,sizeof(*rx_desc)
(26,ndev->dev.parent)
(27,num_tx_desc)
(28,rx_desc->dptr = cpu_to_le32((u32)
(29,dma_addr)
(30,ds_cc)
(31,tx_desc->die_dt = DT_EEMPTY)
(32,if (num_tx_desc > 1)
(33,rx_desc->dptr)
(34,priv)
(35,q)
(36,priv)
(37,i)
(38,0)
(39,tx_ring_size = sizeof(*tx_desc)
(40,desc->die_dt = DT_LINKFIX)
(41,RX_BUF_SZ)
(42,i)
(43,DT_LINKFIX)
(44,priv)
(45,for (i = 0, tx_desc = priv->tx_ring[q]; i < priv->num_tx_ring[q];\n\\n\\t     i++, tx_desc++)
(46,num_tx_desc)
(47,priv->num_rx_ring[q])
(48,tx_desc->die_dt)
(49,dptr)
(50,priv->dirty_tx[q])
(51,priv->tx_desc_dma)
(52,i++)
(53,i)
(54,dptr)
(55,ndev)
(56,tx_ring_size)
(57,priv->num_rx_ring)
(58,0)
(59,priv->dirty_rx[q])
(60,DT_FEMPTY)
(61,priv->rx_ring[q][i])
(62,desc)
(63,0)
(64,desc->die_dt)
(65,tx_desc->dptr)
(66,tx_desc_dma)
(67,sizeof(*rx_desc)
(68,i)
(69,tx_desc++)
(70,&priv->desc_bat[q])
(71,dev)
(72,desc_bat)
(73,priv->tx_desc_dma[q])
(74,cpu_to_le32(dma_addr)
(75,i)
(76,priv->rx_skb[q][i])
(77,q)
(78,priv->dirty_rx)
(79,tx_desc)
(80,priv)
(81,0)
(82,priv->rx_ring[q])
(83,desc)
(84,for (i = 0; i < priv->num_rx_ring[q]; i++)
(85,i < priv->num_tx_ring[q])
(86,priv->desc_bat)
(87,cpu_to_le32((u32)
(88,i = 0)
(89,ndev)
(90,dma_addr)
(91,tx_ring_size)
(92,parent)
(93,priv->dirty_rx[q] = 0)
(94,dma_addr)
(95,die_dt)
(96,rx_desc->ds_cc)
(97,ndev->dev)
(98,i)
(99,i < priv->num_rx_ring[q])
(100,cpu_to_le32((u32)
(101,0)
(102,rx_desc->ds_cc = cpu_to_le16(RX_BUF_SZ)
(103,priv->tx_ring[q])
(104,die_dt)
(105,num_tx_desc > 1)
(106,die_dt)
(107,DMA_FROM_DEVICE)
(108,&priv->desc_bat[RX_QUEUE_OFFSET + q])
(109,q)
(110,priv->tx_desc_dma)
(111,rx_desc)
(112,desc)
(113,num_tx_ring)
(114,num_rx_ring)
(115,rx_ring_size = sizeof(*rx_desc)
(116,data)
(117,)
(118,priv)
(119,priv->num_tx_ring[q])
(120,priv)
(121,u32)
(122,rx_desc->die_dt)
(123,rx_desc)
(124,priv->rx_desc_dma)
(125,DT_LINKFIX)
(126,rx_desc->ds_cc)
(127,cur_rx)
(128,rx_desc_dma)
(129,memset(priv->tx_ring[q], 0, tx_ring_size)
(130,i = 0)
(131,)
(132,priv->cur_rx[q] = 0)
(133,priv)
(134,priv)
(135,(u32)
(136,priv->dirty_tx[q] = 0)
(137,die_dt)
(138,priv)
(139,rx_desc->die_dt = DT_FEMPTY)
(140,rx_desc)
(141,desc->die_dt = DT_LINKFIX)
(142,dev)
(143,q)
(144,0)
(145,priv->rx_desc_dma)
(146,rx_ring_size)
(147,)
(148,*tx_desc)
(149,tx_desc)
(150,cpu_to_le16(0)
(151,priv->rx_ring[q][i])
(152,desc->dptr = cpu_to_le32((u32)
(153,int q)
(154,q)
(155,)
(156,priv)
(157,priv->cur_tx[q])
(158,DT_LINKFIX)
(159,priv->num_rx_ring[q])
(160,tx_desc->die_dt = DT_LINKFIX)
(161,memset(priv->rx_ring[q], 0, rx_ring_size)
(162,)
(163,priv->rx_desc_dma[q])
(164,tx_ring_size)
(165,desc_bat)
(166,struct net_device *ndev)
(167,0)
(168,tx_desc_dma)
(169,priv)
(170,ds_cc)
(171,rx_desc_dma)
(172,rx_desc)
(173,i++)
(174,desc = &priv->desc_bat[RX_QUEUE_OFFSET + q])
(175,*priv = netdev_priv(ndev)
(176,priv)
(177,0)
(178,DT_EEMPTY)
(179,priv->rx_ring)
(180,ndev->dev)
(181,priv->num_tx_ring)
(182,tx_ring)
(183,desc)
(184,ndev->dev.parent)
(185,sizeof(*tx_desc)
(186,num_tx_desc)
(187,desc->dptr = cpu_to_le32((u32)
(188,q)
(189,priv->rx_ring[q])
(190,priv)
(191,q)
(192,cpu_to_le32((u32)
(193,priv)
(194,parent)
(195,die_dt)
(196,q)
(197,(u32)
(198,DT_EEMPTY)
(199,rx_desc)
(200,die_dt)
(201,rx_skb)
(202,q)
(203,rx_desc->die_dt = DT_LINKFIX)
(204,rx_desc->dptr)
(205,rx_desc)
(206,q)
(207,tx_desc->die_dt)
(208,num_tx_desc)
(209,priv)
(210,priv->num_tx_ring[q])
(211,priv->num_tx_desc)
(212,priv)
(213,dma_addr)
(214,RX_QUEUE_OFFSET + q)
(215,desc)
(216,num_tx_ring)
(217,q)
(218,dirty_tx)
(219,rx_desc = &priv->rx_ring[q][i])
(220,priv)
(221,q)
(222,RX_BUF_SZ)
(223,1)
(224,priv)
(225,rx_desc->ds_cc = cpu_to_le16(0)
(226,dma_map_single(ndev->dev.parent, priv->rx_skb[q][i]->data,\n\\n\\t\\t\\t\\t\\t  RX_BUF_SZ,\n\\n\\t\\t\\t\\t\\t  DMA_FROM_DEVICE)
(227,desc->die_dt)
(228,num_tx_desc = priv->num_tx_desc)
(229,priv->rx_ring[q])
(230,desc = &priv->desc_bat[q])
(231,(u32)
(232,tx_desc->dptr = cpu_to_le32((u32)
(233,priv->rx_skb)
(234,priv->tx_ring)
(235,priv->rx_ring)
(236,u32)
(237,priv)
(238,DT_LINKFIX)
(239,(u32)
(240,q)
(241,priv->cur_tx[q] = 0)
(242,ndev)
(243,cpu_to_le32((u32)
(244,desc->dptr)
(245,priv->rx_skb[q])
(246,u32)
(247,dirty_rx)
(248,priv->desc_bat[q])
(249,dptr)
(250,if (dma_mapping_error(ndev->dev.parent, dma_addr)
(251,priv->tx_ring)
(252,i)
(253,tx_desc)
(254,dptr)
(255,priv->cur_rx)
(256,dma_mapping_error(ndev->dev.parent, dma_addr)
(257,num_tx_desc)
(258,rx_desc = &priv->rx_ring[q][i])
(259,priv->tx_ring[q])
(260,tx_ring)
(261,tx_desc)
(262,q)
(263,RX_QUEUE_OFFSET)
(264,rx_ring)
(265,q)
(266,desc)
(267,tx_desc++)
(268,&priv->rx_ring[q][i])
(269,rx_ring)
(270,rx_desc)
(271,cur_tx)
(272,i)
(273,tx_desc)
(274,num_rx_ring)
(275,priv->num_tx_ring)
(276,tx_desc->die_dt = DT_EEMPTY)
(277,&priv->rx_ring[q][i])
(278,cpu_to_le16(RX_BUF_SZ)
(279,rx_ring_size)
(280,tx_desc->die_dt)
(281,i)
(282,priv)
(283,priv->tx_desc_dma[q])
(284,q)
(285,priv->rx_skb[q][i]->data)
(286,rx_desc->die_dt)
(287,priv->dirty_tx)
(288,priv->num_tx_ring[q] *\n\\n\\t\\t\\t   num_tx_desc)
(289,rx_desc)
(290,priv->num_rx_ring)
(291,priv->rx_desc_dma[q])
(292,q)
(293,desc)
(294,priv->rx_ring)
(295,priv)
(296,priv)
(297,priv->cur_rx[q])
(298,desc->dptr)
(299,sizeof(*tx_desc)
(300,tx_desc = priv->tx_ring[q])
(301,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^