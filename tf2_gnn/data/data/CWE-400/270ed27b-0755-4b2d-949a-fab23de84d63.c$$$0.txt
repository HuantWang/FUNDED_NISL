-----label-----
0
-----code-----
static int
tapdisk_daemon_init(void)
{
	char *devname;
	int i, err, blktap_major;
	sigset_t mask;

	memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t));

	err = asprintf(&devname, "%s/%s0", BLKTAP_DEV_DIR, BLKTAP_DEV_NAME);
	if (err == -1) {
		devname = NULL;
		err = -ENOMEM;
		goto fail;
	}

	err = xc_find_device_number("blktap0");
	if (err < 0)
		goto fail;

	blktap_major = major(err);
	err = make_blktap_device(devname, blktap_major, 0, S_IFCHR | 0600);
	if (err)
		goto fail;

	tapdisk_daemon.blktap_fd = open(devname, O_RDWR);
	if (tapdisk_daemon.blktap_fd == -1) {
		err = -errno;
		EPRINTF("blktap0 open failed\n");
		goto fail;
	}

	/* 
	 * Spoil any opportunity for set/check races by forcing
	 * children to later serialize their demise into the event
	 * loop.
	 *
	 * NB. It's no coincidence we're blocking those signals right
	 * here. XS watches spawn threads [*shiver*]. The new mask is
	 * heritage.
	 */
	sigemptyset(&mask);

	sigaddset(&mask, SIGCHLD);
	signal(SIGCHLD, tapdisk_daemon_sa_none);

	sigprocmask(SIG_BLOCK, &mask, &tapdisk_daemon.sigunmask);

	for (i = 0; i < 2; i++) {
		tapdisk_daemon.xsh = xs_daemon_open();
		if (!tapdisk_daemon.xsh) {
			EPRINTF("xs_daemon_open failed -- is xenstore running?\n");
			sleep(2);
		} else
			break;
	}

	if (!tapdisk_daemon.xsh) {
		err = -ENOSYS;
		goto fail;
	}

	fcntl(xs_fileno(tapdisk_daemon.xsh), F_SETFD, O_NONBLOCK);
	
	INIT_LIST_HEAD(&tapdisk_daemon.channels);

	free(devname);
	return 0;

fail:
	if (tapdisk_daemon.blktap_fd > 0)
		close(tapdisk_daemon.blktap_fd);
	free(devname);
	memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t));
	EPRINTF("%s: %d\n", __func__, err);

	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
9,32
9,33
9,34
9,35
9,36
9,37
10,11
11,12
11,13
13,14
13,15
16,17
17,18
17,19
17,20
17,21
19,20
21,22
23,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
32,35
32,36
33,34
35,36
36,37
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
48,50
48,51
48,52
48,53
49,50
51,52
52,53
55,56
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
65,68
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
76,77
77,78
79,80
81,82
82,83
82,84
83,84
85,86
85,87
86,87
89,90
89,91
90,91
90,92
91,92
94,95
96,97
97,98
97,99
98,99
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
109,110
109,111
109,112
109,113
109,114
110,111
112,113
114,115
117,118
117,119
118,119
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
128,130
129,130
132,133
132,134
132,135
133,134
135,136
137,138
139,140
139,141
140,141
140,142
141,142
141,143
142,143
145,146
147,148
147,149
147,150
148,149
149,150
149,151
150,151
152,153
153,154
155,156
156,157
156,158
157,158
160,161
162,163
163,164
163,165
164,165
166,167
167,168
169,170
170,171
170,172
170,173
171,172
173,174
174,175
176,177
178,179
179,180
179,181
179,182
180,181
182,183
184,185
186,187
187,188
187,189
187,190
187,191
188,189
190,191
192,193
193,194
195,196
196,197
196,198
197,198
200,201
200,202
200,203
200,204
201,202
202,203
202,204
203,204
206,207
206,208
207,208
210,211
211,212
213,214
213,215
214,215
215,216
215,217
216,217
216,218
217,218
220,221
221,222
223,224
223,225
223,226
224,225
225,226
225,227
226,227
229,230
229,231
230,231
231,232
231,233
232,233
235,236
236,237
236,238
237,238
241,242
241,243
242,243
243,244
243,245
244,245
247,248
247,249
248,249
249,250
249,251
250,251
252,253
253,254
255,256
257,258
258,259
258,260
258,261
258,262
259,260
261,262
261,263
262,263
264,265
264,266
265,266
268,269
270,271
272,273
273,274
273,275
274,275
276,277
277,278
277,279
278,279
281,282
282,283
282,284
283,284
285,286
287,288
289,290
289,291
291,292
291,293
292,293
292,294
293,294
293,295
294,295
298,299
299,300
299,301
300,301
302,303
302,304
303,304
306,307
307,308
307,309
308,309
310,311
312,313
313,314
313,315
313,316
313,317
314,315
316,317
317,318
320,321
321,322
321,323
322,323
325,326
326,327
326,328
326,329
326,330
327,328
330,331
332,333
334,335
335,336
-----nextToken-----
2,4,6,8,12,14,15,18,20,22,24,28,30,34,37,38,42,43,47,50,53,54,56,58,62,64,69,71,75,78,80,84,87,88,92,93,95,99,102,104,108,111,113,115,116,119,120,123,125,130,131,134,136,138,143,144,146,151,154,158,159,161,165,168,172,175,177,181,183,185,189,191,194,198,199,204,205,208,209,212,218,219,222,227,228,233,234,238,239,240,245,246,251,254,256,260,263,266,267,269,271,275,279,280,284,286,288,290,295,296,297,301,304,305,309,311,315,318,319,323,324,328,329,331,333,336
-----computeFrom-----
45,46
45,47
60,61
60,62
67,68
67,69
73,74
73,75
82,83
82,84
90,91
90,92
97,98
97,99
106,107
106,108
117,118
117,119
127,128
127,129
140,141
140,142
149,150
149,151
202,203
202,204
206,207
206,208
215,216
215,217
249,250
249,251
292,293
292,294
-----guardedBy-----
62,75
296,305
295,304
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static inttapdisk_daemon_init(void){	char *devname;	int i, err, blktap_major;	sigset_t mask;	memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t));	err = asprintf(&devname, "%s/%s0", BLKTAP_DEV_DIR, BLKTAP_DEV_NAME);	if (err == -1) {		devname = NULL;		err = -ENOMEM;		goto fail;	}	err = xc_find_device_number("blktap0");	if (err < 0)		goto fail;	blktap_major = major(err);	err = make_blktap_device(devname, blktap_major, 0, S_IFCHR | 0600);	if (err)		goto fail;	tapdisk_daemon.blktap_fd = open(devname, O_RDWR);	if (tapdisk_daemon.blktap_fd == -1) {		err = -errno;		EPRINTF("blktap0 open failed\n");		goto fail;	}	/* 	 * Spoil any opportunity for set/check races by forcing	 * children to later serialize their demise into the event	 * loop.	 *	 * NB. It's no coincidence we're blocking those signals right	 * here. XS watches spawn threads [*shiver*]. The new mask is	 * heritage.	 */	sigemptyset(&mask);	sigaddset(&mask, SIGCHLD);	signal(SIGCHLD, tapdisk_daemon_sa_none);	sigprocmask(SIG_BLOCK, &mask, &tapdisk_daemon.sigunmask);	for (i = 0; i < 2; i++) {		tapdisk_daemon.xsh = xs_daemon_open();		if (!tapdisk_daemon.xsh) {			EPRINTF("xs_daemon_open failed -- is xenstore running?\n");			sleep(2);		} else			break;	}	if (!tapdisk_daemon.xsh) {		err = -ENOSYS;		goto fail;	}	fcntl(xs_fileno(tapdisk_daemon.xsh), F_SETFD, O_NONBLOCK);		INIT_LIST_HEAD(&tapdisk_daemon.channels);	free(devname);	return 0;fail:	if (tapdisk_daemon.blktap_fd > 0)		close(tapdisk_daemon.blktap_fd);	free(devname);	memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t));	EPRINTF("%s: %d\n", __func__, err);	return err;}
static int
tapdisk_daemon_init(void)
tapdisk_daemon_init
void
void


{	char *devname;	int i, err, blktap_major;	sigset_t mask;	memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t));	err = asprintf(&devname, "%s/%s0", BLKTAP_DEV_DIR, BLKTAP_DEV_NAME);	if (err == -1) {		devname = NULL;		err = -ENOMEM;		goto fail;	}	err = xc_find_device_number("blktap0");	if (err < 0)		goto fail;	blktap_major = major(err);	err = make_blktap_device(devname, blktap_major, 0, S_IFCHR | 0600);	if (err)		goto fail;	tapdisk_daemon.blktap_fd = open(devname, O_RDWR);	if (tapdisk_daemon.blktap_fd == -1) {		err = -errno;		EPRINTF("blktap0 open failed\n");		goto fail;	}	/* 	 * Spoil any opportunity for set/check races by forcing	 * children to later serialize their demise into the event	 * loop.	 *	 * NB. It's no coincidence we're blocking those signals right	 * here. XS watches spawn threads [*shiver*]. The new mask is	 * heritage.	 */	sigemptyset(&mask);	sigaddset(&mask, SIGCHLD);	signal(SIGCHLD, tapdisk_daemon_sa_none);	sigprocmask(SIG_BLOCK, &mask, &tapdisk_daemon.sigunmask);	for (i = 0; i < 2; i++) {		tapdisk_daemon.xsh = xs_daemon_open();		if (!tapdisk_daemon.xsh) {			EPRINTF("xs_daemon_open failed -- is xenstore running?\n");			sleep(2);		} else			break;	}	if (!tapdisk_daemon.xsh) {		err = -ENOSYS;		goto fail;	}	fcntl(xs_fileno(tapdisk_daemon.xsh), F_SETFD, O_NONBLOCK);		INIT_LIST_HEAD(&tapdisk_daemon.channels);	free(devname);	return 0;fail:	if (tapdisk_daemon.blktap_fd > 0)		close(tapdisk_daemon.blktap_fd);	free(devname);	memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t));	EPRINTF("%s: %d\n", __func__, err);	return err;}
char *devname;
char *devname;
char
*devname
*
devname
int i, err, blktap_major;
int i, err, blktap_major;
int
i
i
err
err
blktap_major
blktap_major
sigset_t mask;
sigset_t mask;
sigset_t
sigset_t
mask
mask
memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t));
memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t))
memset
memset
&tapdisk_daemon
tapdisk_daemon
tapdisk_daemon
0
sizeof(tapdisk_daemon_t)
tapdisk_daemon_t
tapdisk_daemon_t
tapdisk_daemon_t

err = asprintf(&devname, "%s/%s0", BLKTAP_DEV_DIR, BLKTAP_DEV_NAME);
err = asprintf(&devname, "%s/%s0", BLKTAP_DEV_DIR, BLKTAP_DEV_NAME)
err
err
asprintf(&devname, "%s/%s0", BLKTAP_DEV_DIR, BLKTAP_DEV_NAME)
asprintf
asprintf
&devname
devname
devname
"%s/%s0"
BLKTAP_DEV_DIR
BLKTAP_DEV_DIR
BLKTAP_DEV_NAME
BLKTAP_DEV_NAME
if (err == -1) {		devname = NULL;		err = -ENOMEM;		goto fail;	}
err == -1
err
err
-1
1
{		devname = NULL;		err = -ENOMEM;		goto fail;	}
devname = NULL;
devname = NULL
devname
devname
NULL
NULL
err = -ENOMEM;
err = -ENOMEM
err
err
-ENOMEM
ENOMEM
ENOMEM
goto fail;
fail
err = xc_find_device_number("blktap0");
err = xc_find_device_number("blktap0")
err
err
xc_find_device_number("blktap0")
xc_find_device_number
xc_find_device_number
"blktap0"
if (err < 0)		goto fail;
err < 0
err
err
0
goto fail;
fail
blktap_major = major(err);
blktap_major = major(err)
blktap_major
blktap_major
major(err)
major
major
err
err
err = make_blktap_device(devname, blktap_major, 0, S_IFCHR | 0600);
err = make_blktap_device(devname, blktap_major, 0, S_IFCHR | 0600)
err
err
make_blktap_device(devname, blktap_major, 0, S_IFCHR | 0600)
make_blktap_device
make_blktap_device
devname
devname
blktap_major
blktap_major
0
S_IFCHR | 0600
S_IFCHR
S_IFCHR
0600
if (err)		goto fail;
err
err
goto fail;
fail
tapdisk_daemon.blktap_fd = open(devname, O_RDWR);
tapdisk_daemon.blktap_fd = open(devname, O_RDWR)
tapdisk_daemon.blktap_fd
tapdisk_daemon
tapdisk_daemon
blktap_fd
open(devname, O_RDWR)
open
open
devname
devname
O_RDWR
O_RDWR
if (tapdisk_daemon.blktap_fd == -1) {		err = -errno;		EPRINTF("blktap0 open failed\n");		goto fail;	}
tapdisk_daemon.blktap_fd == -1
tapdisk_daemon.blktap_fd
tapdisk_daemon
tapdisk_daemon
blktap_fd
-1
1
{		err = -errno;		EPRINTF("blktap0 open failed\n");		goto fail;	}
err = -errno;
err = -errno
err
err
-errno
errno
errno
EPRINTF("blktap0 open failed\n");
EPRINTF("blktap0 open failed\n")
EPRINTF
EPRINTF
"blktap0 open failed\n"
goto fail;
fail
sigemptyset(&mask);
sigemptyset(&mask)
sigemptyset
sigemptyset
&mask
mask
mask
sigaddset(&mask, SIGCHLD);
sigaddset(&mask, SIGCHLD)
sigaddset
sigaddset
&mask
mask
mask
SIGCHLD
SIGCHLD
signal(SIGCHLD, tapdisk_daemon_sa_none);
signal(SIGCHLD, tapdisk_daemon_sa_none)
signal
signal
SIGCHLD
SIGCHLD
tapdisk_daemon_sa_none
tapdisk_daemon_sa_none
sigprocmask(SIG_BLOCK, &mask, &tapdisk_daemon.sigunmask);
sigprocmask(SIG_BLOCK, &mask, &tapdisk_daemon.sigunmask)
sigprocmask
sigprocmask
SIG_BLOCK
SIG_BLOCK
&mask
mask
mask
&tapdisk_daemon.sigunmask
tapdisk_daemon.sigunmask
tapdisk_daemon
tapdisk_daemon
sigunmask
for (i = 0; i < 2; i++) {		tapdisk_daemon.xsh = xs_daemon_open();		if (!tapdisk_daemon.xsh) {			EPRINTF("xs_daemon_open failed -- is xenstore running?\n");			sleep(2);		} else			break;	}
i = 0;
i = 0
i
i
0
i < 2
i
i
2
i++
i
i
{		tapdisk_daemon.xsh = xs_daemon_open();		if (!tapdisk_daemon.xsh) {			EPRINTF("xs_daemon_open failed -- is xenstore running?\n");			sleep(2);		} else			break;	}
tapdisk_daemon.xsh = xs_daemon_open();
tapdisk_daemon.xsh = xs_daemon_open()
tapdisk_daemon.xsh
tapdisk_daemon
tapdisk_daemon
xsh
xs_daemon_open()
xs_daemon_open
xs_daemon_open
if (!tapdisk_daemon.xsh) {			EPRINTF("xs_daemon_open failed -- is xenstore running?\n");			sleep(2);		} else			break;
!tapdisk_daemon.xsh
tapdisk_daemon.xsh
tapdisk_daemon
tapdisk_daemon
xsh
{			EPRINTF("xs_daemon_open failed -- is xenstore running?\n");			sleep(2);		}
EPRINTF("xs_daemon_open failed -- is xenstore running?\n");
EPRINTF("xs_daemon_open failed -- is xenstore running?\n")
EPRINTF
EPRINTF
"xs_daemon_open failed -- is xenstore running?\n"
sleep(2);
sleep(2)
sleep
sleep
2
break;
if (!tapdisk_daemon.xsh) {		err = -ENOSYS;		goto fail;	}
!tapdisk_daemon.xsh
tapdisk_daemon.xsh
tapdisk_daemon
tapdisk_daemon
xsh
{		err = -ENOSYS;		goto fail;	}
err = -ENOSYS;
err = -ENOSYS
err
err
-ENOSYS
ENOSYS
ENOSYS
goto fail;
fail
fcntl(xs_fileno(tapdisk_daemon.xsh), F_SETFD, O_NONBLOCK);
fcntl(xs_fileno(tapdisk_daemon.xsh), F_SETFD, O_NONBLOCK)
fcntl
fcntl
xs_fileno(tapdisk_daemon.xsh)
xs_fileno
xs_fileno
tapdisk_daemon.xsh
tapdisk_daemon
tapdisk_daemon
xsh
F_SETFD
F_SETFD
O_NONBLOCK
O_NONBLOCK
INIT_LIST_HEAD(&tapdisk_daemon.channels);
INIT_LIST_HEAD(&tapdisk_daemon.channels)
INIT_LIST_HEAD
INIT_LIST_HEAD
&tapdisk_daemon.channels
tapdisk_daemon.channels
tapdisk_daemon
tapdisk_daemon
channels
free(devname);
free(devname)
free
free
devname
devname
return 0;
0
fail:	if (tapdisk_daemon.blktap_fd > 0)		close(tapdisk_daemon.blktap_fd);
fail
if (tapdisk_daemon.blktap_fd > 0)		close(tapdisk_daemon.blktap_fd);
tapdisk_daemon.blktap_fd > 0
tapdisk_daemon.blktap_fd
tapdisk_daemon
tapdisk_daemon
blktap_fd
0
close(tapdisk_daemon.blktap_fd);
close(tapdisk_daemon.blktap_fd)
close
close
tapdisk_daemon.blktap_fd
tapdisk_daemon
tapdisk_daemon
blktap_fd
free(devname);
free(devname)
free
free
devname
devname
memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t));
memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t))
memset
memset
&tapdisk_daemon
tapdisk_daemon
tapdisk_daemon
0
sizeof(tapdisk_daemon_t)
tapdisk_daemon_t
tapdisk_daemon_t
tapdisk_daemon_t

EPRINTF("%s: %d\n", __func__, err);
EPRINTF("%s: %d\n", __func__, err)
EPRINTF
EPRINTF
"%s: %d\n"
__func__
__func__
err
err
return err;
err
err
-----joern-----
(1,3,0)
(38,16,0)
(124,161,0)
(48,58,0)
(158,24,0)
(142,112,0)
(118,111,0)
(10,172,0)
(0,5,0)
(64,128,0)
(31,59,0)
(39,140,0)
(22,127,0)
(32,5,0)
(38,46,0)
(132,161,0)
(44,166,0)
(106,16,0)
(99,131,0)
(154,16,0)
(145,28,0)
(18,53,0)
(148,75,0)
(163,106,0)
(45,3,0)
(73,69,0)
(90,128,0)
(142,100,0)
(11,62,0)
(25,16,0)
(35,32,0)
(142,135,0)
(37,61,0)
(156,16,0)
(35,16,0)
(125,140,0)
(140,39,0)
(80,174,0)
(173,127,0)
(100,103,0)
(137,153,0)
(140,125,0)
(74,168,0)
(109,163,0)
(123,16,0)
(58,112,0)
(172,33,0)
(67,112,0)
(2,163,0)
(149,50,0)
(53,59,0)
(70,38,0)
(24,158,0)
(86,16,0)
(82,13,0)
(79,16,0)
(72,124,0)
(174,16,0)
(23,116,0)
(49,50,0)
(5,161,0)
(135,33,0)
(24,75,0)
(139,53,0)
(78,11,0)
(155,36,0)
(131,106,0)
(110,47,0)
(104,47,0)
(14,32,0)
(127,22,0)
(66,154,0)
(35,135,0)
(161,16,0)
(115,85,0)
(165,142,0)
(171,166,0)
(54,100,0)
(170,163,0)
(143,16,0)
(111,61,0)
(35,111,0)
(77,51,0)
(6,16,0)
(27,47,0)
(11,146,0)
(65,16,0)
(59,168,0)
(20,12,0)
(5,32,0)
(55,35,0)
(68,123,0)
(141,16,0)
(61,111,0)
(134,77,0)
(7,100,0)
(129,146,0)
(5,50,0)
(3,13,0)
(75,106,0)
(146,11,0)
(123,128,0)
(102,16,0)
(38,70,0)
(157,46,0)
(69,16,0)
(112,13,0)
(112,58,0)
(107,86,0)
(86,139,0)
(113,90,0)
(81,101,0)
(12,79,0)
(26,5,0)
(95,103,0)
(28,59,0)
(87,92,0)
(50,5,0)
(142,16,0)
(127,106,0)
(96,33,0)
(139,86,0)
(111,16,0)
(19,16,0)
(55,69,0)
(97,79,0)
(161,124,0)
(77,59,0)
(11,16,0)
(167,135,0)
(23,59,0)
(35,100,0)
(84,85,0)
(151,16,0)
(40,27,0)
(108,27,0)
(105,38,0)
(169,128,0)
(89,158,0)
(92,153,0)
(142,32,0)
(150,7,0)
(85,84,0)
(100,7,0)
(125,166,0)
(133,4,0)
(17,115,0)
(136,86,0)
(140,16,0)
(53,139,0)
(62,11,0)
(32,16,0)
(147,91,0)
(4,133,0)
(117,140,0)
(59,31,0)
(57,127,0)
(126,115,0)
(135,167,0)
(21,56,0)
(75,24,0)
(128,90,0)
(106,56,0)
(176,23,0)
(162,98,0)
(35,112,0)
(15,28,0)
(142,111,0)
(56,106,0)
(36,91,0)
(46,38,0)
(159,75,0)
(83,35,0)
(116,23,0)
(76,137,0)
(71,101,0)
(88,53,0)
(174,3,0)
(69,131,0)
(42,5,0)
(119,128,0)
(41,56,0)
(84,16,0)
(4,16,0)
(138,110,0)
(175,167,0)
(163,2,0)
(36,123,0)
(79,12,0)
(166,125,0)
(130,16,0)
(60,133,0)
(69,28,0)
(160,16,0)
(52,23,0)
(98,16,0)
(9,131,0)
(85,115,0)
(43,142,0)
(29,16,0)
(152,154,0)
(114,135,0)
(128,123,0)
(144,77,0)
(124,111,0)
(121,2,0)
(120,62,0)
(8,70,0)
(94,47,0)
(122,16,0)
(101,111,0)
(51,77,0)
(34,142,0)
(91,36,0)
(63,39,0)
(1,45,1)
(69,131,1)
(21,131,1)
(2,163,1)
(165,38,1)
(52,176,1)
(109,30,1)
(174,3,1)
(149,0,1)
(172,10,1)
(76,92,1)
(26,14,1)
(89,75,1)
(144,164,1)
(126,86,1)
(166,171,1)
(66,79,1)
(7,150,1)
(53,18,1)
(152,66,1)
(94,104,1)
(78,146,1)
(109,82,1)
(23,52,1)
(159,148,1)
(92,87,1)
(35,135,1)
(109,95,1)
(23,59,1)
(147,155,1)
(38,70,1)
(3,1,1)
(145,15,1)
(176,59,1)
(114,24,1)
(146,129,1)
(84,85,1)
(57,2,1)
(104,140,1)
(54,51,1)
(93,32,1)
(35,111,1)
(167,175,1)
(95,100,1)
(50,49,1)
(68,11,1)
(88,51,1)
(108,110,1)
(31,28,1)
(46,157,1)
(157,105,1)
(24,75,1)
(142,111,1)
(63,117,1)
(173,57,1)
(35,32,1)
(80,2,1)
(22,127,1)
(83,142,1)
(18,88,1)
(64,90,1)
(138,137,1)
(171,44,1)
(27,47,1)
(99,9,1)
(55,35,1)
(35,100,1)
(115,17,1)
(150,54,1)
(32,5,1)
(101,81,1)
(170,109,1)
(124,111,1)
(71,111,1)
(35,83,1)
(14,161,1)
(154,152,1)
(125,166,1)
(53,59,1)
(61,37,1)
(161,124,1)
(91,147,1)
(148,106,1)
(73,98,1)
(85,115,1)
(58,48,1)
(142,34,1)
(69,28,1)
(82,112,1)
(112,58,1)
(107,139,1)
(42,26,1)
(142,32,1)
(48,67,1)
(11,146,1)
(5,50,1)
(60,24,1)
(134,144,1)
(163,170,1)
(75,159,1)
(87,116,1)
(139,53,1)
(81,71,1)
(140,125,1)
(51,77,1)
(117,154,1)
(140,39,1)
(27,40,1)
(38,46,1)
(72,132,1)
(142,135,1)
(49,149,1)
(70,8,1)
(120,78,1)
(86,136,1)
(175,114,1)
(133,60,1)
(136,107,1)
(17,126,1)
(5,161,1)
(124,72,1)
(2,121,1)
(90,113,1)
(30,93,1)
(100,7,1)
(158,89,1)
(144,27,1)
(15,27,1)
(44,39,1)
(101,111,1)
(109,96,1)
(137,76,1)
(111,61,1)
(36,123,1)
(163,106,1)
(24,158,1)
(164,116,1)
(132,101,1)
(77,134,1)
(4,133,1)
(77,59,1)
(12,20,1)
(177,101,1)
(121,163,1)
(127,106,1)
(174,80,1)
(116,23,1)
(56,41,1)
(9,93,1)
(155,123,1)
(8,174,1)
(109,177,1)
(45,36,1)
(106,56,1)
(62,120,1)
(119,169,1)
(47,94,1)
(0,42,1)
(34,43,1)
(128,119,1)
(67,3,1)
(110,138,1)
(142,112,1)
(75,106,1)
(41,21,1)
(80,22,1)
(79,12,1)
(110,47,1)
(123,128,1)
(37,118,1)
(39,63,1)
(108,47,1)
(40,108,1)
(127,173,1)
(11,62,1)
(169,64,1)
(98,162,1)
(69,73,1)
(113,68,1)
(35,112,1)
(96,172,1)
(135,167,1)
(28,145,1)
(79,97,1)
(43,165,1)
(105,70,1)
(59,31,1)
(162,84,1)
(142,100,1)
(10,135,1)
(97,12,1)
(118,36,1)
(128,90,1)
(86,139,1)
(36,91,1)
(20,4,1)
(131,99,1)
(55,69,1)
(36,123,2)
(45,36,2)
(36,91,2)
(106,93,2)
(60,24,2)
(110,47,2)
(135,24,2)
(142,135,2)
(86,51,2)
(133,24,2)
(46,51,2)
(165,24,2)
(35,32,2)
(121,93,2)
(142,100,2)
(15,27,2)
(35,36,2)
(94,24,2)
(76,116,2)
(140,125,2)
(114,24,2)
(2,24,2)
(82,36,2)
(75,106,2)
(41,93,2)
(157,51,2)
(32,5,2)
(97,24,2)
(161,124,2)
(55,35,2)
(27,116,2)
(27,24,2)
(1,36,2)
(3,36,2)
(2,51,2)
(84,85,2)
(8,101,2)
(31,27,2)
(53,51,2)
(125,24,2)
(20,24,2)
(83,24,2)
(32,101,2)
(8,51,2)
(77,24,2)
(157,36,2)
(115,51,2)
(2,163,2)
(112,36,2)
(51,77,2)
(26,101,2)
(85,51,2)
(80,36,2)
(176,27,2)
(83,51,2)
(86,139,2)
(98,51,2)
(38,51,2)
(174,24,2)
(35,111,2)
(56,93,2)
(101,36,2)
(81,36,2)
(72,101,2)
(85,115,2)
(142,111,2)
(46,101,2)
(66,24,2)
(2,101,2)
(8,24,2)
(43,93,2)
(38,36,2)
(35,101,2)
(44,24,2)
(165,93,2)
(157,93,2)
(35,93,2)
(170,93,2)
(124,101,2)
(111,36,2)
(139,51,2)
(165,51,2)
(107,51,2)
(46,36,2)
(109,51,2)
(139,53,2)
(51,24,2)
(170,36,2)
(18,51,2)
(161,101,2)
(174,51,2)
(157,101,2)
(53,59,2)
(55,69,2)
(5,50,2)
(136,51,2)
(100,51,2)
(123,128,2)
(105,101,2)
(118,36,2)
(75,93,2)
(70,51,2)
(117,24,2)
(137,116,2)
(11,62,2)
(138,116,2)
(11,146,2)
(174,3,2)
(34,101,2)
(163,101,2)
(175,24,2)
(92,116,2)
(165,101,2)
(77,59,2)
(80,101,2)
(34,24,2)
(58,36,2)
(46,93,2)
(99,93,2)
(104,24,2)
(22,2,2)
(100,7,2)
(163,106,2)
(70,24,2)
(163,51,2)
(71,36,2)
(170,24,2)
(63,24,2)
(34,36,2)
(79,12,2)
(59,31,2)
(40,116,2)
(142,36,2)
(69,51,2)
(132,101,2)
(163,24,2)
(174,101,2)
(140,24,2)
(142,112,2)
(79,24,2)
(22,127,2)
(134,24,2)
(43,101,2)
(61,36,2)
(8,93,2)
(142,93,2)
(83,101,2)
(27,47,2)
(131,93,2)
(69,28,2)
(177,101,2)
(142,101,2)
(70,36,2)
(50,101,2)
(24,93,2)
(2,36,2)
(124,111,2)
(173,2,2)
(70,101,2)
(105,93,2)
(80,93,2)
(46,24,2)
(148,93,2)
(157,24,2)
(35,24,2)
(39,24,2)
(38,46,2)
(2,93,2)
(54,51,2)
(24,75,2)
(84,51,2)
(7,51,2)
(80,51,2)
(83,36,2)
(135,167,2)
(52,27,2)
(144,24,2)
(73,51,2)
(5,101,2)
(128,90,2)
(80,24,2)
(125,166,2)
(109,36,2)
(142,51,2)
(4,133,2)
(87,116,2)
(69,131,2)
(96,24,2)
(167,24,2)
(110,116,2)
(106,56,2)
(70,93,2)
(43,36,2)
(105,24,2)
(170,51,2)
(37,36,2)
(38,101,2)
(67,36,2)
(165,36,2)
(109,93,2)
(23,27,2)
(35,112,2)
(159,93,2)
(34,93,2)
(108,116,2)
(126,51,2)
(166,24,2)
(150,51,2)
(24,158,2)
(4,24,2)
(28,27,2)
(21,93,2)
(116,23,2)
(149,101,2)
(142,32,2)
(40,24,2)
(121,36,2)
(49,101,2)
(42,101,2)
(30,93,2)
(163,36,2)
(17,51,2)
(154,24,2)
(121,51,2)
(38,70,2)
(142,24,2)
(152,24,2)
(38,24,2)
(162,51,2)
(43,51,2)
(109,101,2)
(171,24,2)
(88,51,2)
(140,39,2)
(14,101,2)
(116,27,2)
(59,27,2)
(34,51,2)
(174,93,2)
(127,2,2)
(93,101,2)
(9,93,2)
(35,135,2)
(101,111,2)
(48,36,2)
(164,116,2)
(121,24,2)
(5,161,2)
(158,93,2)
(43,24,2)
(83,93,2)
(108,24,2)
(170,101,2)
(8,36,2)
(57,2,2)
(112,58,2)
(163,93,2)
(174,36,2)
(38,93,2)
(35,51,2)
(105,51,2)
(12,24,2)
(127,106,2)
(89,93,2)
(109,24,2)
(145,27,2)
(95,51,2)
(105,36,2)
(172,24,2)
(0,101,2)
(23,59,2)
(121,101,2)
(35,100,2)
(47,24,2)
(111,61,2)
(10,24,2)
-----------------------------------
(0,0)
(1,NULL)
(2,tapdisk_daemon.blktap_fd > 0)
(3,devname = NULL)
(4,sigemptyset(&mask)
(5,make_blktap_device(devname, blktap_major, 0, S_IFCHR | 0600)
(6,if (err < 0)
(7,-ENOSYS)
(8,tapdisk_daemon)
(9,tapdisk_daemon)
(10,"blktap0 open failed\\n")
(11,memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t)
(12,&mask)
(13,)
(14,err)
(15,tapdisk_daemon)
(16,)
(17,channels)
(18,xsh)
(19,mask)
(20,mask)
(21,devname)
(22,close(tapdisk_daemon.blktap_fd)
(23,tapdisk_daemon.xsh)
(24,tapdisk_daemon.blktap_fd == -1)
(25,if (tapdisk_daemon.blktap_fd == -1)
(26,devname)
(27,i < 2)
(28,tapdisk_daemon.xsh)
(29,if (err)
(30,goto fail;)
(31,xs_daemon_open()
(32,err = make_blktap_device(devname, blktap_major, 0, S_IFCHR | 0600)
(33,)
(34,err)
(35,return err;)
(36,err == -1)
(37,"blktap0")
(38,memset(&tapdisk_daemon, 0, sizeof(tapdisk_daemon_t)
(39,&mask)
(40,2)
(41,O_RDWR)
(42,blktap_major)
(43,__func__)
(44,tapdisk_daemon)
(45,devname)
(46,sizeof(tapdisk_daemon_t)
(47,i = 0)
(48,ENOMEM)
(49,0600)
(50,S_IFCHR | 0600)
(51,!tapdisk_daemon.xsh)
(52,xsh)
(53,tapdisk_daemon.xsh)
(54,err)
(55,RET)
(56,open(devname, O_RDWR)
(57,tapdisk_daemon)
(58,-ENOMEM)
(59,tapdisk_daemon.xsh = xs_daemon_open()
(60,mask)
(61,xc_find_device_number("blktap0")
(62,sizeof(tapdisk_daemon_t)
(63,mask)
(64,"%s/%s0")
(65,if (tapdisk_daemon.blktap_fd > 0)
(66,SIGCHLD)
(67,err)
(68,err)
(69,return 0;)
(70,&tapdisk_daemon)
(71,err)
(72,err)
(73,0)
(74,if (!tapdisk_daemon.xsh)
(75,tapdisk_daemon.blktap_fd)
(76,2)
(77,tapdisk_daemon.xsh)
(78,0)
(79,sigaddset(&mask, SIGCHLD)
(80,devname)
(81,0)
(82,goto fail;)
(83,err)
(84,INIT_LIST_HEAD(&tapdisk_daemon.channels)
(85,&tapdisk_daemon.channels)
(86,fcntl(xs_fileno(tapdisk_daemon.xsh)
(87,"xs_daemon_open failed -- is xenstore running?\\n")
(88,tapdisk_daemon)
(89,1)
(90,&devname)
(91,-1)
(92,EPRINTF("xs_daemon_open failed -- is xenstore running?\\n")
(93,err)
(94,0)
(95,goto fail;)
(96,goto fail;)
(97,SIGCHLD)
(98,free(devname)
(99,blktap_fd)
(100,err = -ENOSYS)
(101,err < 0)
(102,devname)
(103,)
(104,i)
(105,0)
(106,tapdisk_daemon.blktap_fd = open(devname, O_RDWR)
(107,F_SETFD)
(108,i)
(109,tapdisk_daemon)
(110,i++)
(111,err = xc_find_device_number("blktap0")
(112,err = -ENOMEM)
(113,devname)
(114,err)
(115,tapdisk_daemon.channels)
(116,!tapdisk_daemon.xsh)
(117,SIG_BLOCK)
(118,err)
(119,BLKTAP_DEV_NAME)
(120,tapdisk_daemon_t)
(121,0)
(122,for (i = 0; i < 2; i++)
(123,err = asprintf(&devname, "%s/%s0", BLKTAP_DEV_DIR, BLKTAP_DEV_NAME)
(124,major(err)
(125,&tapdisk_daemon.sigunmask)
(126,tapdisk_daemon)
(127,tapdisk_daemon.blktap_fd)
(128,asprintf(&devname, "%s/%s0", BLKTAP_DEV_DIR, BLKTAP_DEV_NAME)
(129,tapdisk_daemon)
(130,i)
(131,tapdisk_daemon.blktap_fd)
(132,blktap_major)
(133,&mask)
(134,xsh)
(135,err = -errno)
(136,O_NONBLOCK)
(137,sleep(2)
(138,i)
(139,xs_fileno(tapdisk_daemon.xsh)
(140,sigprocmask(SIG_BLOCK, &mask, &tapdisk_daemon.sigunmask)
(141,blktap_major)
(142,EPRINTF("%s: %d\\n", __func__, err)
(143,if (!tapdisk_daemon.xsh)
(144,tapdisk_daemon)
(145,xsh)
(146,&tapdisk_daemon)
(147,1)
(148,tapdisk_daemon)
(149,S_IFCHR)
(150,ENOSYS)
(151,err)
(152,tapdisk_daemon_sa_none)
(153,)
(154,signal(SIGCHLD, tapdisk_daemon_sa_none)
(155,err)
(156,if (err == -1)
(157,tapdisk_daemon_t)
(158,-1)
(159,blktap_fd)
(160,fail:)
(161,blktap_major = major(err)
(162,devname)
(163,tapdisk_daemon.blktap_fd)
(164,break;)
(165,"%s: %d\\n")
(166,tapdisk_daemon.sigunmask)
(167,-errno)
(168,)
(169,BLKTAP_DEV_DIR)
(170,blktap_fd)
(171,sigunmask)
(172,EPRINTF("blktap0 open failed\\n")
(173,blktap_fd)
(174,free(devname)
(175,errno)
(176,tapdisk_daemon)
(177,goto fail;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^