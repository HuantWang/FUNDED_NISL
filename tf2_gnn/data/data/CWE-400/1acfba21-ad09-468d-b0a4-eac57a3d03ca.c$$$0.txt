-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    /* Initialize count */
    count = -1;
    /* FIX: Use a relatively small number */
    count = 20;
    {
        int countCopy = count;
        int count = countCopy;
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
22,24
22,25
22,26
23,24
24,25
24,26
26,27
26,28
28,29
29,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,30,33,35,38,42,44,48,49
-----computeFrom-----
12,13
12,14
18,19
18,20
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int count;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    {        int countCopy = count;        int count = countCopy;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B()
goodG2B
{    int count;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    {        int countCopy = count;        int count = countCopy;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
count = 20;
count = 20
count
count
20
{        int countCopy = count;        int count = countCopy;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
int countCopy = count;
int countCopy = count;
int
countCopy = count
countCopy
= count
count
count
int count = countCopy;
int count = countCopy;
int
count = countCopy
count
= countCopy
countCopy
countCopy
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(20,9,0)
(12,20,0)
(3,10,0)
(20,4,0)
(14,11,0)
(10,4,0)
(22,19,0)
(4,16,0)
(10,19,0)
(17,4,0)
(7,10,0)
(15,4,0)
(21,19,0)
(0,9,0)
(11,14,0)
(19,16,0)
(1,16,0)
(13,4,0)
(18,14,0)
(8,13,0)
(6,9,0)
(9,4,0)
(9,10,0)
(2,11,0)
(11,16,0)
(13,8,1)
(11,14,1)
(3,7,1)
(14,18,1)
(21,22,1)
(12,9,1)
(10,3,1)
(5,13,1)
(6,10,1)
(7,19,1)
(0,6,1)
(19,21,1)
(18,2,1)
(22,11,1)
(20,9,1)
(10,19,1)
(20,12,1)
(9,0,1)
(9,10,1)
(8,20,1)
(10,19,2)
(11,14,2)
(20,9,2)
(9,10,2)
-----------------------------------
(0,countCopy)
(1,count)
(2,count)
(3,count)
(4,)
(5,RET)
(6,count)
(7,countCopy)
(8,"Sleep time possibly too long")
(9,count = countCopy)
(10,countCopy = count)
(11,count = -1)
(12,count)
(13,printLine("Sleep time possibly too long")
(14,-1)
(15,count)
(16,)
(17,countCopy)
(18,1)
(19,count = 20)
(20,SLEEP(count)
(21,20)
(22,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^