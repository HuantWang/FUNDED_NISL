-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_64b_goodB2GSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    size_t * dataPtr = (size_t *)dataVoidPtr;
    /* dereference dataPtr into data */
    size_t data = (*dataPtr);
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
35,36
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
59,60
59,61
59,62
59,63
59,64
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
93,96
94,95
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
112,113
113,114
114,115
114,116
115,116
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,30,32,37,41,43,44,49,52,54,57,58,63,66,68,71,74,77,78,82,84,89,91,95,97,99,103,105,109,111,116,117
-----computeFrom-----
46,47
46,48
47,48
47,49
55,56
55,57
61,62
61,63
72,73
72,74
80,81
80,82
-----guardedBy-----
54,99
57,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_64b_goodB2GSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_64b_goodB2GSink(void * dataVoidPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_64b_goodB2GSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t
size_t
* dataPtr = (size_t *)dataVoidPtr
*
dataPtr
= (size_t *)dataVoidPtr
(size_t *)dataVoidPtr
size_t *
size_t
size_t
*
*
dataVoidPtr
dataVoidPtr
size_t data = (*dataPtr);
size_t data = (*dataPtr);
size_t
size_t
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(26,1,0)
(37,7,0)
(2,6,0)
(13,47,0)
(37,5,0)
(47,50,0)
(51,1,0)
(47,13,0)
(43,18,0)
(33,35,0)
(16,11,0)
(5,18,0)
(44,13,0)
(47,7,0)
(15,1,0)
(51,39,0)
(5,35,0)
(31,8,0)
(9,24,0)
(28,26,0)
(3,30,0)
(35,5,0)
(25,3,0)
(7,37,0)
(8,18,0)
(0,1,0)
(1,32,0)
(30,36,0)
(20,1,0)
(40,15,0)
(22,29,0)
(29,50,0)
(51,34,0)
(35,33,0)
(46,35,0)
(38,32,0)
(14,16,0)
(1,51,0)
(20,32,0)
(24,7,0)
(21,20,0)
(19,1,0)
(7,18,0)
(50,47,0)
(30,3,0)
(49,47,0)
(10,7,0)
(29,7,0)
(42,26,0)
(39,51,0)
(19,32,0)
(6,24,0)
(52,37,0)
(12,5,0)
(24,39,0)
(24,6,0)
(50,29,0)
(48,29,0)
(41,15,0)
(4,8,0)
(17,19,0)
(26,32,0)
(39,24,0)
(27,18,0)
(34,51,0)
(35,45,0)
(51,34,1)
(23,19,1)
(35,33,1)
(26,1,1)
(49,7,1)
(15,1,1)
(21,26,1)
(47,13,1)
(9,0,1)
(0,50,1)
(23,16,1)
(29,22,1)
(6,2,1)
(28,30,1)
(44,49,1)
(35,45,1)
(41,40,1)
(22,48,1)
(24,6,1)
(5,35,1)
(37,5,1)
(7,37,1)
(50,47,1)
(25,15,1)
(39,24,1)
(48,47,1)
(1,51,1)
(42,28,1)
(47,7,1)
(24,7,1)
(30,3,1)
(28,15,1)
(37,52,1)
(10,5,1)
(20,21,1)
(14,50,1)
(50,29,1)
(40,1,1)
(16,14,1)
(17,20,1)
(2,9,1)
(29,7,1)
(19,17,1)
(20,1,1)
(46,12,1)
(35,46,1)
(52,10,1)
(26,42,1)
(51,39,1)
(19,1,1)
(3,25,1)
(15,41,1)
(13,44,1)
(5,35,2)
(28,50,2)
(17,50,2)
(50,29,2)
(37,5,2)
(20,1,2)
(2,50,2)
(24,6,2)
(3,15,2)
(24,50,2)
(16,50,2)
(14,50,2)
(21,50,2)
(51,39,2)
(1,50,2)
(42,50,2)
(6,50,2)
(9,50,2)
(35,33,2)
(15,50,2)
(29,47,2)
(15,1,2)
(19,50,2)
(0,50,2)
(29,7,2)
(50,47,2)
(30,3,2)
(19,1,2)
(26,50,2)
(51,34,2)
(41,50,2)
(25,15,2)
(35,45,2)
(51,50,2)
(30,15,2)
(20,50,2)
(24,7,2)
(47,7,2)
(26,1,2)
(39,24,2)
(39,50,2)
(47,13,2)
(7,37,2)
(22,47,2)
(1,51,2)
(48,47,2)
(40,50,2)
-----------------------------------
(0,myString)
(1,myString = (wchar_t *)
(2,wchar_t)
(3,-1)
(4,myString)
(5,* dataPtr = (size_t *)
(6,sizeof(wchar_t)
(7,data = (*dataPtr)
(8,)
(9,data)
(10,data)
(11,)
(12,dataPtr)
(13,wcslen(HELLO_STRING)
(14,"Input is less than the length of the source string or too large")
(15,myString == NULL)
(16,printLine("Input is less than the length of the source string or too large")
(17,myString)
(18,)
(19,free(myString)
(20,printWLine(myString)
(21,myString)
(22,100)
(23,RET)
(24,data*sizeof(wchar_t)
(25,1)
(26,wcscpy(myString, HELLO_STRING)
(27,dataPtr)
(28,myString)
(29,data < 100)
(30,exit(-1)
(31,if (data > wcslen(HELLO_STRING)
(32,)
(33,size_t *)
(34,wchar_t *)
(35,(size_t *)
(36,)
(37,*dataPtr)
(38,if (myString == NULL)
(39,malloc(data*sizeof(wchar_t)
(40,myString)
(41,NULL)
(42,HELLO_STRING)
(43,data)
(44,HELLO_STRING)
(45,void * dataVoidPtr)
(46,dataVoidPtr)
(47,data > wcslen(HELLO_STRING)
(48,data)
(49,data)
(50,data > wcslen(HELLO_STRING)
(51,(wchar_t *)
(52,dataPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^