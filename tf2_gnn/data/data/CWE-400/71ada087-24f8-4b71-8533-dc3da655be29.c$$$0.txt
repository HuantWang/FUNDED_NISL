-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_15_bad()
{
    int64_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
74,75
75,76
75,77
76,77
80,81
80,82
82,83
82,84
82,85
82,86
82,87
82,88
83,84
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,38,42,43,47,49,54,56,61,62,63,67,70,71,72,73,77,78,79,81,84,85,86,87,91,92,93
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_15_bad(){    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__int64_t_malloc_15_bad()
CWE401_Memory_Leak__int64_t_malloc_15_bad
{    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(21,34,0)
(33,19,0)
(40,0,0)
(26,11,0)
(17,29,0)
(13,27,0)
(5,10,0)
(39,29,0)
(0,11,0)
(23,3,0)
(41,3,0)
(27,29,0)
(18,41,0)
(31,35,0)
(24,35,0)
(25,11,0)
(16,32,0)
(15,19,0)
(37,29,0)
(4,44,0)
(32,16,0)
(36,10,0)
(4,1,0)
(38,11,0)
(10,34,0)
(16,31,0)
(45,11,0)
(31,11,0)
(35,31,0)
(28,1,0)
(18,35,0)
(32,11,0)
(20,31,0)
(35,24,0)
(41,18,0)
(22,16,0)
(12,11,0)
(42,34,0)
(2,11,0)
(9,16,0)
(1,4,0)
(35,18,0)
(19,31,0)
(3,41,0)
(30,34,0)
(8,29,0)
(6,41,0)
(40,7,1)
(43,37,1)
(41,3,1)
(2,32,1)
(14,2,1)
(43,8,1)
(10,5,1)
(27,13,1)
(33,31,1)
(8,14,1)
(12,0,1)
(20,7,1)
(1,28,1)
(13,14,1)
(7,10,1)
(3,23,1)
(15,33,1)
(9,26,1)
(35,18,1)
(23,6,1)
(26,4,1)
(19,15,1)
(18,41,1)
(6,20,1)
(22,9,1)
(5,36,1)
(4,1,1)
(37,27,1)
(16,22,1)
(31,35,1)
(35,24,1)
(32,16,1)
(16,31,1)
(14,12,1)
(19,31,1)
(26,19,1)
(0,40,1)
(28,19,1)
(16,7,2)
(0,7,2)
(1,19,2)
(12,7,2)
(8,14,2)
(26,7,2)
(18,7,2)
(35,24,2)
(28,19,2)
(20,7,2)
(33,7,2)
(6,7,2)
(16,31,2)
(32,16,2)
(23,7,2)
(2,7,2)
(13,14,2)
(31,7,2)
(35,18,2)
(32,7,2)
(15,7,2)
(4,1,2)
(18,41,2)
(40,7,2)
(41,3,2)
(37,14,2)
(9,7,2)
(3,7,2)
(35,7,2)
(4,19,2)
(22,7,2)
(31,35,2)
(27,14,2)
(19,31,2)
(19,7,2)
(41,7,2)
-----------------------------------
(0,printLine("Benign, fixed string")
(1,-1)
(2,break;)
(3,sizeof(int64_t)
(4,exit(-1)
(5,NULL)
(6,100)
(7,6)
(8,break;)
(9,data)
(10,data = NULL)
(11,)
(12,break;)
(13,"Benign, fixed string")
(14,7)
(15,NULL)
(16,data[0])
(17,case 7:)
(18,malloc(100*sizeof(int64_t)
(19,data == NULL)
(20,data)
(21,data)
(22,0)
(23,int64_t)
(24,int64_t *)
(25,case 6:)
(26,L)
(27,printLine("Benign, fixed string")
(28,1)
(29,)
(30,switch(7)
(31,data = (int64_t *)
(32,printLongLongLine(data[0])
(33,data)
(34,)
(35,(int64_t *)
(36,data)
(37,break;)
(38,if (data == NULL)
(39,default:)
(40,"Benign, fixed string")
(41,100*sizeof(int64_t)
(42,switch(6)
(43,RET)
(44,)
(45,default:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^