-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_02_bad()
{
    if(1)
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
45,48
46,47
48,49
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
66,69
67,68
69,70
71,72
71,73
72,73
74,75
75,76
75,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
84,86
84,87
85,86
86,87
86,88
86,89
87,88
89,90
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,47,49,50,54,56,60,63,65,68,70,73,76,77,81,83,88,90,91,95,97,101,103
-----computeFrom-----
25,26
25,27
32,33
32,34
58,59
58,60
71,72
71,73
79,80
79,81
-----guardedBy-----
81,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_02_bad(){    if(1)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_02_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_02_bad
{    if(1)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
if(1)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
1
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(41,8,0)
(43,41,0)
(16,24,0)
(14,39,0)
(4,11,0)
(22,39,0)
(20,30,0)
(2,33,0)
(7,44,0)
(36,8,0)
(21,1,0)
(30,20,0)
(34,22,0)
(1,42,0)
(31,20,0)
(28,18,0)
(2,42,0)
(42,1,0)
(31,24,0)
(42,7,0)
(26,33,0)
(0,35,0)
(8,41,0)
(27,17,0)
(1,21,0)
(40,7,0)
(5,7,0)
(39,30,0)
(38,13,0)
(19,2,0)
(29,22,0)
(40,39,0)
(12,7,0)
(1,8,0)
(25,31,0)
(37,18,0)
(9,7,0)
(30,3,0)
(24,31,0)
(17,38,0)
(30,39,0)
(8,1,0)
(41,35,0)
(18,42,0)
(32,40,0)
(39,7,0)
(38,17,0)
(20,31,0)
(10,26,0)
(6,42,0)
(26,42,0)
(8,39,0)
(35,41,0)
(3,30,0)
(40,39,1)
(19,18,1)
(35,0,1)
(8,39,1)
(34,39,1)
(40,32,1)
(29,34,1)
(31,24,1)
(23,18,1)
(32,38,1)
(22,39,1)
(0,43,1)
(1,21,1)
(17,27,1)
(18,37,1)
(14,15,1)
(41,35,1)
(43,36,1)
(16,25,1)
(37,28,1)
(23,26,1)
(39,30,1)
(32,22,1)
(1,8,1)
(8,41,1)
(2,19,1)
(22,29,1)
(26,42,1)
(26,10,1)
(20,31,1)
(30,20,1)
(23,15,1)
(2,42,1)
(28,42,1)
(30,3,1)
(24,16,1)
(25,14,1)
(38,17,1)
(36,6,1)
(6,40,1)
(27,22,1)
(42,1,1)
(18,42,1)
(10,2,1)
(32,15,2)
(28,15,2)
(38,17,2)
(29,15,2)
(42,1,2)
(0,15,2)
(40,39,2)
(26,18,2)
(2,42,2)
(41,35,2)
(40,15,2)
(20,31,2)
(31,24,2)
(43,15,2)
(25,15,2)
(35,15,2)
(27,22,2)
(1,8,2)
(39,30,2)
(22,39,2)
(8,15,2)
(17,22,2)
(14,15,2)
(26,42,2)
(37,15,2)
(41,15,2)
(18,15,2)
(31,15,2)
(30,3,2)
(16,15,2)
(39,15,2)
(30,20,2)
(6,15,2)
(34,15,2)
(19,18,2)
(22,15,2)
(2,18,2)
(24,15,2)
(10,18,2)
(20,15,2)
(8,39,2)
(38,22,2)
(30,15,2)
(8,41,2)
(1,21,2)
(1,15,2)
(36,15,2)
(18,42,2)
(42,15,2)
-----------------------------------
(0,wchar_t)
(1,(wchar_t *)
(2,printWLine(data)
(3,wchar_t *)
(4,if(1)
(5,if (data != NULL)
(6,data)
(7,)
(8,realloc(data, (130000)
(9,data)
(10,data)
(11,)
(12,if (data == NULL)
(13,)
(14,data)
(15,1)
(16,wchar_t)
(17,-1)
(18,data != NULL)
(19,data)
(20,malloc(100*sizeof(wchar_t)
(21,wchar_t *)
(22,data == NULL)
(23,RET)
(24,sizeof(wchar_t)
(25,100)
(26,free(data)
(27,1)
(28,data)
(29,NULL)
(30,(wchar_t *)
(31,100*sizeof(wchar_t)
(32,data)
(33,)
(34,data)
(35,sizeof(wchar_t)
(36,data)
(37,NULL)
(38,exit(-1)
(39,* data = (wchar_t *)
(40,printWLine(data)
(41,(130000)
(42,data = (wchar_t *)
(43,130000)
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^