-----label-----
0
-----code-----
static void __expire_registry(const void *data)
{
	struct iax2_peer *peer = (struct iax2_peer *) data;

	if (!peer)
		return;
	if (peer->expire == -1) {
		/* Removed already (possibly through CLI), ignore */
		return;
	}

	peer->expire = -1;

	ast_debug(1, "Expiring registration for peer '%s'\n", peer->name);
	if (ast_test_flag64((&globalflags), IAX_RTUPDATE) && (ast_test_flag64(peer, IAX_TEMPONLY|IAX_RTCACHEFRIENDS)))
		realtime_update_peer(peer->name, &peer->addr, 0);
	manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unregistered\r\nCause: Expired\r\n", peer->name);
	/* modify entry in peercnts table as _not_ registered */
	peercnt_modify(0, 0, &peer->addr);
	/* Reset the address */
	memset(&peer->addr, 0, sizeof(peer->addr));
	/* Reset expiry value */
	peer->expiry = min_reg_expire;
	if (!ast_test_flag64(peer, IAX_TEMPONLY))
		ast_db_del("IAX/Registry", peer->name);
	register_peer_exten(peer, 0);
	ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */
	if (iax2_regfunk)
		iax2_regfunk(peer->name, 0);

	if (ast_test_flag64(peer, IAX_RTAUTOCLEAR))
		unlink_peer(peer);

	peer_unref(peer);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
10,21
10,22
10,23
10,24
10,25
10,26
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
27,29
28,29
29,30
32,33
32,34
33,34
33,35
34,35
34,36
35,36
38,39
40,41
42,43
43,44
43,45
44,45
44,46
45,46
48,49
50,51
51,52
51,53
51,54
51,55
52,53
56,57
56,58
57,58
60,61
60,62
61,62
61,63
62,63
62,64
62,65
63,64
65,66
66,67
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
86,88
87,88
90,91
91,92
91,93
92,93
96,97
97,98
97,99
97,100
97,101
97,102
98,99
100,101
104,105
104,106
105,106
108,109
109,110
109,111
109,112
109,113
110,111
114,115
115,116
115,117
116,117
119,120
120,121
120,122
120,123
120,124
121,122
123,124
124,125
124,126
125,126
129,130
130,131
131,132
131,133
132,133
135,136
136,137
136,138
137,138
137,139
138,139
141,142
143,144
143,145
144,145
145,146
145,147
145,148
146,147
148,149
150,151
152,153
153,154
153,155
153,156
154,155
157,158
157,159
158,159
161,162
162,163
162,164
162,165
163,164
165,166
168,169
169,170
169,171
169,172
169,173
169,174
170,171
172,173
174,175
177,178
177,179
178,179
181,182
181,183
182,183
184,185
185,186
185,187
185,188
186,187
188,189
188,190
189,190
193,194
193,195
194,195
194,196
194,197
195,196
197,198
199,200
201,202
202,203
202,204
203,204
205,206
207,208
208,209
208,210
209,210
211,212
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,30,31,36,37,39,41,46,47,49,53,54,55,58,59,64,68,70,74,76,79,81,85,88,89,93,94,95,99,101,102,103,106,107,111,112,113,117,118,122,126,127,128,133,134,139,140,142,147,149,151,155,156,159,160,164,166,167,171,173,175,176,179,180,183,187,190,191,192,196,198,200,204,206,210,212
-----computeFrom-----
33,34
33,35
43,44
43,45
61,62
61,63
77,78
77,79
136,137
136,138
-----guardedBy-----
76,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;ReturnStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void __expire_registry(const void *data){	struct iax2_peer *peer = (struct iax2_peer *) data;	if (!peer)		return;	if (peer->expire == -1) {		/* Removed already (possibly through CLI), ignore */		return;	}	peer->expire = -1;	ast_debug(1, "Expiring registration for peer '%s'\n", peer->name);	if (ast_test_flag64((&globalflags), IAX_RTUPDATE) && (ast_test_flag64(peer, IAX_TEMPONLY|IAX_RTCACHEFRIENDS)))		realtime_update_peer(peer->name, &peer->addr, 0);	manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unregistered\r\nCause: Expired\r\n", peer->name);	/* modify entry in peercnts table as _not_ registered */	peercnt_modify(0, 0, &peer->addr);	/* Reset the address */	memset(&peer->addr, 0, sizeof(peer->addr));	/* Reset expiry value */	peer->expiry = min_reg_expire;	if (!ast_test_flag64(peer, IAX_TEMPONLY))		ast_db_del("IAX/Registry", peer->name);	register_peer_exten(peer, 0);	ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */	if (iax2_regfunk)		iax2_regfunk(peer->name, 0);	if (ast_test_flag64(peer, IAX_RTAUTOCLEAR))		unlink_peer(peer);	peer_unref(peer);}
static void
__expire_registry(const void *data)
__expire_registry
const void *data
const void
*data
*
data
{	struct iax2_peer *peer = (struct iax2_peer *) data;	if (!peer)		return;	if (peer->expire == -1) {		/* Removed already (possibly through CLI), ignore */		return;	}	peer->expire = -1;	ast_debug(1, "Expiring registration for peer '%s'\n", peer->name);	if (ast_test_flag64((&globalflags), IAX_RTUPDATE) && (ast_test_flag64(peer, IAX_TEMPONLY|IAX_RTCACHEFRIENDS)))		realtime_update_peer(peer->name, &peer->addr, 0);	manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unregistered\r\nCause: Expired\r\n", peer->name);	/* modify entry in peercnts table as _not_ registered */	peercnt_modify(0, 0, &peer->addr);	/* Reset the address */	memset(&peer->addr, 0, sizeof(peer->addr));	/* Reset expiry value */	peer->expiry = min_reg_expire;	if (!ast_test_flag64(peer, IAX_TEMPONLY))		ast_db_del("IAX/Registry", peer->name);	register_peer_exten(peer, 0);	ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */	if (iax2_regfunk)		iax2_regfunk(peer->name, 0);	if (ast_test_flag64(peer, IAX_RTAUTOCLEAR))		unlink_peer(peer);	peer_unref(peer);}
struct iax2_peer *peer = (struct iax2_peer *) data;
struct iax2_peer *peer = (struct iax2_peer *) data;
struct iax2_peer
iax2_peer
*peer = (struct iax2_peer *) data
*
peer
= (struct iax2_peer *) data
(struct iax2_peer *) data
struct iax2_peer *
struct iax2_peer
iax2_peer
*
*
data
data
if (!peer)		return;
!peer
peer
peer
return;
if (peer->expire == -1) {		/* Removed already (possibly through CLI), ignore */		return;	}
peer->expire == -1
peer->expire
peer
peer
expire
-1
1
{		/* Removed already (possibly through CLI), ignore */		return;	}
return;
peer->expire = -1;
peer->expire = -1
peer->expire
peer
peer
expire
-1
1
ast_debug(1, "Expiring registration for peer '%s'\n", peer->name);
ast_debug(1, "Expiring registration for peer '%s'\n", peer->name)
ast_debug
ast_debug
1
"Expiring registration for peer '%s'\n"
peer->name
peer
peer
name
if (ast_test_flag64((&globalflags), IAX_RTUPDATE) && (ast_test_flag64(peer, IAX_TEMPONLY|IAX_RTCACHEFRIENDS)))		realtime_update_peer(peer->name, &peer->addr, 0);
ast_test_flag64((&globalflags), IAX_RTUPDATE) && (ast_test_flag64(peer, IAX_TEMPONLY|IAX_RTCACHEFRIENDS))
ast_test_flag64((&globalflags), IAX_RTUPDATE)
ast_test_flag64
ast_test_flag64
(&globalflags)
&globalflags
globalflags
globalflags
IAX_RTUPDATE
IAX_RTUPDATE
(ast_test_flag64(peer, IAX_TEMPONLY|IAX_RTCACHEFRIENDS))
ast_test_flag64(peer, IAX_TEMPONLY|IAX_RTCACHEFRIENDS)
ast_test_flag64
ast_test_flag64
peer
peer
IAX_TEMPONLY|IAX_RTCACHEFRIENDS
IAX_TEMPONLY
IAX_TEMPONLY
IAX_RTCACHEFRIENDS
IAX_RTCACHEFRIENDS
realtime_update_peer(peer->name, &peer->addr, 0);
realtime_update_peer(peer->name, &peer->addr, 0)
realtime_update_peer
realtime_update_peer
peer->name
peer
peer
name
&peer->addr
peer->addr
peer
peer
addr
0
manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unregistered\r\nCause: Expired\r\n", peer->name);
manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unregistered\r\nCause: Expired\r\n", peer->name)
manager_event
manager_event
EVENT_FLAG_SYSTEM
EVENT_FLAG_SYSTEM
"PeerStatus"
"ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unregistered\r\nCause: Expired\r\n"
peer->name
peer
peer
name
peercnt_modify(0, 0, &peer->addr);
peercnt_modify(0, 0, &peer->addr)
peercnt_modify
peercnt_modify
0
0
&peer->addr
peer->addr
peer
peer
addr
memset(&peer->addr, 0, sizeof(peer->addr));
memset(&peer->addr, 0, sizeof(peer->addr))
memset
memset
&peer->addr
peer->addr
peer
peer
addr
0
sizeof(peer->addr)
(peer->addr)
peer->addr
peer
peer
addr
peer->expiry = min_reg_expire;
peer->expiry = min_reg_expire
peer->expiry
peer
peer
expiry
min_reg_expire
min_reg_expire
if (!ast_test_flag64(peer, IAX_TEMPONLY))		ast_db_del("IAX/Registry", peer->name);
!ast_test_flag64(peer, IAX_TEMPONLY)
ast_test_flag64(peer, IAX_TEMPONLY)
ast_test_flag64
ast_test_flag64
peer
peer
IAX_TEMPONLY
IAX_TEMPONLY
ast_db_del("IAX/Registry", peer->name);
ast_db_del("IAX/Registry", peer->name)
ast_db_del
ast_db_del
"IAX/Registry"
peer->name
peer
peer
name
register_peer_exten(peer, 0);
register_peer_exten(peer, 0)
register_peer_exten
register_peer_exten
peer
peer
0
ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name);
ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_UNAVAILABLE
AST_DEVICE_UNAVAILABLE
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
"IAX2/%s"
peer->name
peer
peer
name
if (iax2_regfunk)		iax2_regfunk(peer->name, 0);
iax2_regfunk
iax2_regfunk
iax2_regfunk(peer->name, 0);
iax2_regfunk(peer->name, 0)
iax2_regfunk
iax2_regfunk
peer->name
peer
peer
name
0
if (ast_test_flag64(peer, IAX_RTAUTOCLEAR))		unlink_peer(peer);
ast_test_flag64(peer, IAX_RTAUTOCLEAR)
ast_test_flag64
ast_test_flag64
peer
peer
IAX_RTAUTOCLEAR
IAX_RTAUTOCLEAR
unlink_peer(peer);
unlink_peer(peer)
unlink_peer
unlink_peer
peer
peer
peer_unref(peer);
peer_unref(peer)
peer_unref
peer_unref
peer
peer
-----joern-----
(101,73,0)
(57,60,0)
(67,73,0)
(86,40,0)
(54,66,0)
(73,24,0)
(1,101,0)
(92,0,0)
(65,73,0)
(83,36,0)
(96,73,0)
(25,56,0)
(55,50,0)
(100,83,0)
(67,78,0)
(44,67,0)
(42,73,0)
(102,36,0)
(111,8,0)
(77,23,0)
(24,26,0)
(74,73,0)
(48,31,0)
(47,38,0)
(13,91,0)
(40,36,0)
(52,88,0)
(28,99,0)
(117,93,0)
(26,24,0)
(69,40,0)
(91,13,0)
(108,40,0)
(47,50,0)
(41,56,0)
(10,70,0)
(108,73,0)
(107,101,0)
(71,34,0)
(78,67,0)
(91,0,0)
(109,34,0)
(38,47,0)
(115,45,0)
(73,36,0)
(22,73,0)
(88,73,0)
(83,112,0)
(53,18,0)
(98,36,0)
(35,88,0)
(107,13,0)
(9,109,0)
(8,111,0)
(20,36,0)
(64,14,0)
(70,73,0)
(113,96,0)
(21,117,0)
(105,0,0)
(27,83,0)
(94,83,0)
(42,36,0)
(104,108,0)
(17,108,0)
(38,18,0)
(29,36,0)
(112,73,0)
(22,36,0)
(19,13,0)
(4,81,0)
(85,73,0)
(13,36,0)
(50,73,0)
(110,14,0)
(109,78,0)
(78,109,0)
(46,31,0)
(0,73,0)
(112,83,0)
(64,73,0)
(90,70,0)
(45,36,0)
(93,117,0)
(89,74,0)
(24,39,0)
(8,23,0)
(40,108,0)
(81,106,0)
(88,54,0)
(99,28,0)
(14,64,0)
(84,85,0)
(58,66,0)
(43,117,0)
(31,60,0)
(72,50,0)
(24,73,0)
(63,97,0)
(66,54,0)
(16,18,0)
(79,36,0)
(6,101,0)
(13,107,0)
(4,7,0)
(15,65,0)
(51,111,0)
(33,14,0)
(50,47,0)
(99,36,0)
(82,85,0)
(111,36,0)
(68,85,0)
(70,99,0)
(32,22,0)
(0,91,0)
(2,64,0)
(67,97,0)
(49,97,0)
(117,73,0)
(61,28,0)
(97,67,0)
(76,42,0)
(103,14,0)
(37,93,0)
(87,111,0)
(62,112,0)
(65,45,0)
(14,36,0)
(3,23,0)
(101,107,0)
(114,36,0)
(95,64,0)
(75,73,0)
(54,88,0)
(5,24,0)
(11,36,0)
(23,8,0)
(59,47,0)
(31,73,0)
(12,22,0)
(85,82,0)
(60,31,0)
(30,65,0)
(18,73,0)
(34,109,0)
(18,38,0)
(23,73,0)
(56,73,0)
(80,112,0)
(91,0,1)
(21,43,1)
(111,8,1)
(96,113,1)
(35,52,1)
(12,82,1)
(101,6,1)
(54,88,1)
(50,73,1)
(46,57,1)
(77,3,1)
(24,26,1)
(9,34,1)
(68,84,1)
(112,73,1)
(38,18,1)
(4,42,1)
(1,111,1)
(89,73,1)
(30,13,1)
(86,69,1)
(52,74,1)
(32,12,1)
(62,100,1)
(70,10,1)
(16,53,1)
(56,73,1)
(99,28,1)
(90,54,1)
(67,73,1)
(48,46,1)
(56,41,1)
(59,38,1)
(108,104,1)
(23,73,1)
(94,22,1)
(88,35,1)
(28,61,1)
(44,109,1)
(92,19,1)
(88,73,1)
(37,117,1)
(78,67,1)
(47,59,1)
(71,40,1)
(83,112,1)
(25,116,1)
(8,23,1)
(3,51,1)
(13,107,1)
(5,75,1)
(53,50,1)
(65,15,1)
(116,83,1)
(33,47,1)
(4,81,1)
(85,73,1)
(100,27,1)
(117,21,1)
(33,78,1)
(31,73,1)
(55,78,1)
(18,16,1)
(51,87,1)
(63,44,1)
(50,72,1)
(72,55,1)
(78,109,1)
(4,7,1)
(70,73,1)
(7,74,1)
(95,2,1)
(45,115,1)
(66,58,1)
(24,39,1)
(87,14,1)
(84,45,1)
(12,60,1)
(6,1,1)
(96,73,1)
(69,99,1)
(115,65,1)
(74,89,1)
(74,73,1)
(65,73,1)
(80,62,1)
(97,49,1)
(112,80,1)
(2,103,1)
(0,105,1)
(47,38,1)
(58,88,1)
(64,73,1)
(85,68,1)
(93,37,1)
(113,56,1)
(73,24,1)
(34,71,1)
(60,31,1)
(41,25,1)
(54,66,1)
(67,97,1)
(81,54,1)
(47,50,1)
(107,101,1)
(82,85,1)
(22,32,1)
(109,9,1)
(61,70,1)
(76,96,1)
(76,56,1)
(93,117,1)
(110,33,1)
(42,73,1)
(64,95,1)
(10,90,1)
(31,48,1)
(23,77,1)
(49,63,1)
(105,92,1)
(17,86,1)
(14,64,1)
(43,116,1)
(0,73,1)
(27,94,1)
(40,108,1)
(19,107,1)
(22,73,1)
(117,73,1)
(101,73,1)
(109,34,1)
(42,76,1)
(103,110,1)
(15,30,1)
(18,73,1)
(104,17,1)
(108,73,1)
(57,82,1)
(25,93,1)
(24,5,1)
(13,91,1)
(97,109,2)
(38,18,2)
(69,54,2)
(113,56,2)
(14,64,2)
(88,74,2)
(111,54,2)
(28,54,2)
(32,54,2)
(103,54,2)
(15,54,2)
(16,78,2)
(67,97,2)
(23,54,2)
(88,73,2)
(46,82,2)
(100,54,2)
(10,54,2)
(13,107,2)
(51,54,2)
(56,73,2)
(70,54,2)
(41,54,2)
(52,74,2)
(93,116,2)
(56,54,2)
(34,54,2)
(76,54,2)
(33,54,2)
(6,54,2)
(77,54,2)
(31,82,2)
(23,73,2)
(37,116,2)
(112,54,2)
(47,50,2)
(104,54,2)
(54,88,2)
(14,54,2)
(108,73,2)
(64,54,2)
(83,112,2)
(72,78,2)
(42,73,2)
(45,54,2)
(115,54,2)
(38,78,2)
(83,54,2)
(60,82,2)
(24,26,2)
(82,54,2)
(2,54,2)
(62,54,2)
(53,78,2)
(0,73,2)
(58,74,2)
(27,54,2)
(111,8,2)
(63,109,2)
(117,116,2)
(93,117,2)
(42,54,2)
(54,74,2)
(78,54,2)
(0,54,2)
(78,109,2)
(96,73,2)
(13,54,2)
(107,54,2)
(101,54,2)
(81,54,2)
(50,78,2)
(70,73,2)
(19,54,2)
(78,67,2)
(49,109,2)
(7,74,2)
(9,54,2)
(101,73,2)
(50,73,2)
(4,81,2)
(80,54,2)
(107,101,2)
(74,73,2)
(24,39,2)
(71,54,2)
(40,54,2)
(35,74,2)
(82,85,2)
(66,74,2)
(96,56,2)
(12,54,2)
(44,109,2)
(22,54,2)
(109,34,2)
(87,54,2)
(110,54,2)
(21,116,2)
(47,78,2)
(90,54,2)
(85,73,2)
(112,73,2)
(73,24,2)
(116,54,2)
(94,54,2)
(68,54,2)
(3,54,2)
(57,82,2)
(105,54,2)
(67,109,2)
(30,54,2)
(8,54,2)
(109,54,2)
(47,38,2)
(85,54,2)
(8,23,2)
(67,73,2)
(43,116,2)
(1,54,2)
(65,73,2)
(18,73,2)
(86,54,2)
(117,73,2)
(91,54,2)
(64,73,2)
(4,7,2)
(92,54,2)
(17,54,2)
(99,54,2)
(108,54,2)
(48,82,2)
(22,73,2)
(55,78,2)
(31,73,2)
(91,0,2)
(60,31,2)
(18,78,2)
(59,78,2)
(13,91,2)
(61,54,2)
(54,66,2)
(99,28,2)
(25,54,2)
(95,54,2)
(40,108,2)
(84,54,2)
(65,54,2)
-----------------------------------
(0,peer->addr)
(1,peer)
(2,peer)
(3,peer)
(4,RET)
(5,data)
(6,addr)
(7,return;)
(8,&peer->addr)
(9,IAX_RTUPDATE)
(10,expire)
(11,peer)
(12,peer)
(13,memset(&peer->addr, 0, sizeof(peer->addr)
(14,manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Unregistered\\r\\nCause: Expired\\r\\n", peer->name)
(15,expiry)
(16,addr)
(17,peer)
(18,peer->addr)
(19,0)
(20,if (iax2_regfunk)
(21,name)
(22,register_peer_exten(peer, 0)
(23,peer->addr)
(24,(struct iax2_peer *)
(25,peer)
(26,struct iax2_peer *)
(27,AST_DEVSTATE_CACHABLE)
(28,-1)
(29,if (ast_test_flag64((&globalflags)
(30,peer)
(31,peer->name)
(32,0)
(33,EVENT_FLAG_SYSTEM)
(34,&globalflags)
(35,expire)
(36,)
(37,0)
(38,&peer->addr)
(39,const void *data)
(40,ast_debug(1, "Expiring registration for peer \'%s\'\\n", peer->name)
(41,IAX_RTAUTOCLEAR)
(42,peer_unref(peer)
(43,peer)
(44,peer)
(45,peer->expiry = min_reg_expire)
(46,peer)
(47,realtime_update_peer(peer->name, &peer->addr, 0)
(48,name)
(49,IAX_RTCACHEFRIENDS)
(50,peer->name)
(51,0)
(52,peer)
(53,peer)
(54,peer->expire == -1)
(55,peer)
(56,ast_test_flag64(peer, IAX_RTAUTOCLEAR)
(57,"IAX/Registry")
(58,1)
(59,0)
(60,ast_db_del("IAX/Registry", peer->name)
(61,1)
(62,peer)
(63,IAX_TEMPONLY)
(64,peer->name)
(65,peer->expiry)
(66,-1)
(67,ast_test_flag64(peer, IAX_TEMPONLY|IAX_RTCACHEFRIENDS)
(68,IAX_TEMPONLY)
(69,1)
(70,peer->expire)
(71,globalflags)
(72,name)
(73,*peer = (struct iax2_peer *)
(74,!peer)
(75,peer)
(76,peer)
(77,addr)
(78,ast_test_flag64((&globalflags)
(79,if (ast_test_flag64(peer, IAX_RTAUTOCLEAR)
(80,name)
(81,return;)
(82,!ast_test_flag64(peer, IAX_TEMPONLY)
(83,ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name)
(84,peer)
(85,ast_test_flag64(peer, IAX_TEMPONLY)
(86,"Expiring registration for peer \'%s\'\\n")
(87,0)
(88,peer->expire)
(89,peer)
(90,peer)
(91,sizeof(peer->addr)
(92,peer)
(93,iax2_regfunk(peer->name, 0)
(94,AST_DEVICE_UNAVAILABLE)
(95,name)
(96,unlink_peer(peer)
(97,IAX_TEMPONLY|IAX_RTCACHEFRIENDS)
(98,if (!peer)
(99,peer->expire = -1)
(100,"IAX2/%s")
(101,peer->addr)
(102,if (peer->expire == -1)
(103,"ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Unregistered\\r\\nCause: Expired\\r\\n")
(104,name)
(105,addr)
(106,)
(107,&peer->addr)
(108,peer->name)
(109,ast_test_flag64((&globalflags)
(110,"PeerStatus")
(111,peercnt_modify(0, 0, &peer->addr)
(112,peer->name)
(113,peer)
(114,if (!ast_test_flag64(peer, IAX_TEMPONLY)
(115,min_reg_expire)
(116,iax2_regfunk)
(117,peer->name)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^