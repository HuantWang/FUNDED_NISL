-----label-----
1
-----code-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_08_bad()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    if(staticReturnsTrue())
    {
        /* FLAW: Point data to another file handle without closing the handle from the source */
        data = fopen("BadSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
29,30
30,31
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
37,40
38,39
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,31,36,39,40,41,45,47,52,54
-----computeFrom-----
14,15
14,16
20,21
20,22
34,35
34,36
43,44
43,45
-----guardedBy-----
45,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_08_bad(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(staticReturnsTrue())    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
void
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_08_bad()
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_08_bad
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(staticReturnsTrue())    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
if(staticReturnsTrue())    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
data = fopen("BadSink_fopen.txt", "w+");
data = fopen("BadSink_fopen.txt", "w+")
data
data
fopen("BadSink_fopen.txt", "w+")
fopen
fopen
"BadSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(12,23,0)
(23,12,0)
(16,18,0)
(18,21,0)
(17,5,0)
(23,11,0)
(19,23,0)
(10,13,0)
(9,6,0)
(8,18,0)
(15,21,0)
(24,12,0)
(5,18,0)
(1,5,0)
(20,6,0)
(2,11,0)
(18,13,0)
(4,16,0)
(13,18,0)
(0,12,0)
(7,11,0)
(22,13,0)
(6,11,0)
(16,3,0)
(13,22,1)
(8,14,1)
(25,14,1)
(1,18,1)
(5,17,1)
(6,9,1)
(16,4,1)
(23,12,1)
(24,19,1)
(16,18,1)
(5,18,1)
(17,1,1)
(18,13,1)
(14,23,1)
(25,5,1)
(4,5,1)
(12,0,1)
(19,6,1)
(10,8,1)
(0,24,1)
(9,20,1)
(22,10,1)
(25,16,1)
(23,12,2)
(16,5,2)
(8,14,2)
(4,5,2)
(5,14,2)
(13,14,2)
(17,14,2)
(18,14,2)
(1,14,2)
(22,14,2)
(16,18,2)
(18,13,2)
(10,14,2)
(5,18,2)
-----------------------------------
(0,"w+")
(1,data)
(2,if(staticReturnsTrue()
(3,)
(4,data)
(5,data != NULL)
(6,data = NULL)
(7,data)
(8,data)
(9,NULL)
(10,"BadSink_fopen.txt")
(11,)
(12,fopen("BadSource_fopen.txt", "w+")
(13,fopen("BadSink_fopen.txt", "w+")
(14,staticReturnsTrue()
(15,if (data != NULL)
(16,fclose(data)
(17,NULL)
(18,data = fopen("BadSink_fopen.txt", "w+")
(19,data)
(20,data)
(21,)
(22,"w+")
(23,data = fopen("BadSource_fopen.txt", "w+")
(24,"BadSource_fopen.txt")
(25,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^