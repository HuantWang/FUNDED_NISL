-----label-----
1
-----code-----
static void
fw_fill_request(struct fw_packet *packet, int tcode, int tlabel,
		int destination_id, int source_id, int generation, int speed,
		unsigned long long offset, void *payload, size_t length)
{
	int ext_tcode;

	if (tcode > 0x10) {
		ext_tcode = tcode & ~0x10;
		tcode = TCODE_LOCK_REQUEST;
	} else
		ext_tcode = 0;

	packet->header[0] =
		HEADER_RETRY(RETRY_X) |
		HEADER_TLABEL(tlabel) |
		HEADER_TCODE(tcode) |
		HEADER_DESTINATION(destination_id);
	packet->header[1] =
		HEADER_OFFSET_HIGH(offset >> 32) | HEADER_SOURCE(source_id);
	packet->header[2] =
		offset;

	switch (tcode) {
	case TCODE_WRITE_QUADLET_REQUEST:
		packet->header[3] = *(u32 *)payload;
		packet->header_length = 16;
		packet->payload_length = 0;
		break;

	case TCODE_LOCK_REQUEST:
	case TCODE_WRITE_BLOCK_REQUEST:
		packet->header[3] =
			HEADER_DATA_LENGTH(length) |
			HEADER_EXTENDED_TCODE(ext_tcode);
		packet->header_length = 16;
		packet->payload = payload;
		packet->payload_length = length;
		break;

	case TCODE_READ_QUADLET_REQUEST:
		packet->header_length = 12;
		packet->payload_length = 0;
		break;

	case TCODE_READ_BLOCK_REQUEST:
		packet->header[3] =
			HEADER_DATA_LENGTH(length) |
			HEADER_EXTENDED_TCODE(ext_tcode);
		packet->header_length = 16;
		packet->payload_length = 0;
		break;
	}

	packet->speed = speed;
	packet->generation = generation;
	packet->ack = 0;
	packet->payload_bus = 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
3,13
3,14
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
21,22
23,24
23,25
25,26
27,28
27,29
29,30
31,32
31,33
33,34
35,36
35,37
37,38
39,40
39,41
41,42
41,43
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
49,54
49,55
49,56
49,57
49,58
49,59
50,51
51,52
51,53
53,54
55,56
55,57
55,58
56,57
56,58
57,58
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
83,85
84,85
84,86
85,86
89,90
89,91
90,91
90,92
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
98,99
100,101
102,103
102,104
103,104
105,106
107,108
107,109
108,109
110,111
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
120,121
120,122
121,122
121,123
122,123
124,125
124,126
125,126
128,129
128,130
129,130
131,132
133,134
134,135
134,136
135,136
135,137
136,137
136,138
137,138
141,142
143,144
143,145
144,145
146,147
146,148
146,149
146,150
146,151
146,152
146,153
146,154
146,155
146,156
146,157
146,158
146,159
146,160
146,161
146,162
146,163
146,164
146,165
146,166
146,167
147,148
148,149
150,151
151,152
151,153
152,153
152,154
153,154
153,155
154,155
158,159
159,160
159,161
160,161
160,162
161,162
163,164
165,166
167,168
168,169
168,170
169,170
169,171
170,171
174,175
175,176
175,177
176,177
176,178
177,178
182,183
183,184
185,186
186,187
188,189
189,190
189,191
190,191
190,192
191,192
191,193
192,193
196,197
196,198
197,198
197,199
198,199
200,201
202,203
202,204
203,204
205,206
207,208
208,209
208,210
209,210
209,211
210,211
214,215
215,216
215,217
216,217
216,218
217,218
220,221
222,223
223,224
223,225
224,225
224,226
225,226
228,229
231,232
232,233
234,235
235,236
235,237
236,237
236,238
237,238
241,242
242,243
242,244
243,244
243,245
244,245
249,250
250,251
252,253
253,254
253,255
254,255
254,256
255,256
255,257
256,257
260,261
260,262
261,262
261,263
262,263
264,265
266,267
266,268
267,268
269,270
271,272
272,273
272,274
273,274
273,275
274,275
278,279
279,280
279,281
280,281
280,282
281,282
286,287
287,288
287,289
288,289
288,290
289,290
292,293
294,295
295,296
295,297
296,297
296,298
297,298
300,301
302,303
303,304
303,305
304,305
304,306
305,306
309,310
310,311
310,312
311,312
311,313
312,313
-----nextToken-----
2,4,7,9,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,43,46,48,52,54,58,59,64,67,69,73,75,79,80,86,87,88,94,96,99,101,104,106,109,111,117,118,119,123,126,127,130,132,138,139,140,142,145,149,155,156,157,162,164,166,171,172,173,178,179,180,181,184,187,193,194,195,199,201,204,206,211,212,213,218,219,221,226,227,229,230,233,238,239,240,245,246,247,248,251,257,258,259,263,265,268,270,275,276,277,282,283,284,285,290,291,293,298,299,301,306,307,308,313,314,315
-----computeFrom-----
56,57
56,58
62,63
62,64
65,66
65,67
71,72
71,73
77,78
77,79
82,83
82,84
89,90
89,91
90,91
90,92
91,92
91,93
113,114
113,115
120,121
120,122
124,125
124,126
134,135
134,136
151,152
151,153
168,169
168,170
175,176
175,177
189,190
189,191
196,197
196,198
208,209
208,210
215,216
215,217
223,224
223,225
235,236
235,237
242,243
242,244
253,254
253,255
260,261
260,262
272,273
272,274
279,280
279,281
287,288
287,289
295,296
295,297
303,304
303,305
310,311
310,312
-----guardedBy-----
58,73
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;
-----ast_node-----
static voidfw_fill_request(struct fw_packet *packet, int tcode, int tlabel,		int destination_id, int source_id, int generation, int speed,		unsigned long long offset, void *payload, size_t length){	int ext_tcode;	if (tcode > 0x10) {		ext_tcode = tcode & ~0x10;		tcode = TCODE_LOCK_REQUEST;	} else		ext_tcode = 0;	packet->header[0] =		HEADER_RETRY(RETRY_X) |		HEADER_TLABEL(tlabel) |		HEADER_TCODE(tcode) |		HEADER_DESTINATION(destination_id);	packet->header[1] =		HEADER_OFFSET_HIGH(offset >> 32) | HEADER_SOURCE(source_id);	packet->header[2] =		offset;	switch (tcode) {	case TCODE_WRITE_QUADLET_REQUEST:		packet->header[3] = *(u32 *)payload;		packet->header_length = 16;		packet->payload_length = 0;		break;	case TCODE_LOCK_REQUEST:	case TCODE_WRITE_BLOCK_REQUEST:		packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode);		packet->header_length = 16;		packet->payload = payload;		packet->payload_length = length;		break;	case TCODE_READ_QUADLET_REQUEST:		packet->header_length = 12;		packet->payload_length = 0;		break;	case TCODE_READ_BLOCK_REQUEST:		packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode);		packet->header_length = 16;		packet->payload_length = 0;		break;	}	packet->speed = speed;	packet->generation = generation;	packet->ack = 0;	packet->payload_bus = 0;}
static void
fw_fill_request(struct fw_packet *packet, int tcode, int tlabel,		int destination_id, int source_id, int generation, int speed,		unsigned long long offset, void *payload, size_t length)
fw_fill_request
struct fw_packet *packet
struct fw_packet
fw_packet
*packet
*
packet
int tcode
int
tcode
tcode
int tlabel
int
tlabel
tlabel
int destination_id
int
destination_id
destination_id
int source_id
int
source_id
source_id
int generation
int
generation
generation
int speed
int
speed
speed
unsigned long long offset
unsigned long long
offset
offset
void *payload
void
*payload
*
payload
size_t length
size_t
size_t
length
length
{	int ext_tcode;	if (tcode > 0x10) {		ext_tcode = tcode & ~0x10;		tcode = TCODE_LOCK_REQUEST;	} else		ext_tcode = 0;	packet->header[0] =		HEADER_RETRY(RETRY_X) |		HEADER_TLABEL(tlabel) |		HEADER_TCODE(tcode) |		HEADER_DESTINATION(destination_id);	packet->header[1] =		HEADER_OFFSET_HIGH(offset >> 32) | HEADER_SOURCE(source_id);	packet->header[2] =		offset;	switch (tcode) {	case TCODE_WRITE_QUADLET_REQUEST:		packet->header[3] = *(u32 *)payload;		packet->header_length = 16;		packet->payload_length = 0;		break;	case TCODE_LOCK_REQUEST:	case TCODE_WRITE_BLOCK_REQUEST:		packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode);		packet->header_length = 16;		packet->payload = payload;		packet->payload_length = length;		break;	case TCODE_READ_QUADLET_REQUEST:		packet->header_length = 12;		packet->payload_length = 0;		break;	case TCODE_READ_BLOCK_REQUEST:		packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode);		packet->header_length = 16;		packet->payload_length = 0;		break;	}	packet->speed = speed;	packet->generation = generation;	packet->ack = 0;	packet->payload_bus = 0;}
int ext_tcode;
int ext_tcode;
int
ext_tcode
ext_tcode
if (tcode > 0x10) {		ext_tcode = tcode & ~0x10;		tcode = TCODE_LOCK_REQUEST;	} else		ext_tcode = 0;
tcode > 0x10
tcode
tcode
0x10
{		ext_tcode = tcode & ~0x10;		tcode = TCODE_LOCK_REQUEST;	}
ext_tcode = tcode & ~0x10;
ext_tcode = tcode & ~0x10
ext_tcode
ext_tcode
tcode & ~0x10
tcode
tcode
~0x10
0x10
tcode = TCODE_LOCK_REQUEST;
tcode = TCODE_LOCK_REQUEST
tcode
tcode
TCODE_LOCK_REQUEST
TCODE_LOCK_REQUEST
ext_tcode = 0;
ext_tcode = 0
ext_tcode
ext_tcode
0
packet->header[0] =		HEADER_RETRY(RETRY_X) |		HEADER_TLABEL(tlabel) |		HEADER_TCODE(tcode) |		HEADER_DESTINATION(destination_id);
packet->header[0] =		HEADER_RETRY(RETRY_X) |		HEADER_TLABEL(tlabel) |		HEADER_TCODE(tcode) |		HEADER_DESTINATION(destination_id)
packet->header[0]
packet->header
packet
packet
header
0
HEADER_RETRY(RETRY_X) |		HEADER_TLABEL(tlabel) |		HEADER_TCODE(tcode) |		HEADER_DESTINATION(destination_id)
HEADER_RETRY(RETRY_X) |		HEADER_TLABEL(tlabel) |		HEADER_TCODE(tcode)
HEADER_RETRY(RETRY_X) |		HEADER_TLABEL(tlabel)
HEADER_RETRY(RETRY_X)
HEADER_RETRY
HEADER_RETRY
RETRY_X
RETRY_X
HEADER_TLABEL(tlabel)
HEADER_TLABEL
HEADER_TLABEL
tlabel
tlabel
HEADER_TCODE(tcode)
HEADER_TCODE
HEADER_TCODE
tcode
tcode
HEADER_DESTINATION(destination_id)
HEADER_DESTINATION
HEADER_DESTINATION
destination_id
destination_id
packet->header[1] =		HEADER_OFFSET_HIGH(offset >> 32) | HEADER_SOURCE(source_id);
packet->header[1] =		HEADER_OFFSET_HIGH(offset >> 32) | HEADER_SOURCE(source_id)
packet->header[1]
packet->header
packet
packet
header
1
HEADER_OFFSET_HIGH(offset >> 32) | HEADER_SOURCE(source_id)
HEADER_OFFSET_HIGH(offset >> 32)
HEADER_OFFSET_HIGH
HEADER_OFFSET_HIGH
offset >> 32
offset
offset
32
HEADER_SOURCE(source_id)
HEADER_SOURCE
HEADER_SOURCE
source_id
source_id
packet->header[2] =		offset;
packet->header[2] =		offset
packet->header[2]
packet->header
packet
packet
header
2
offset
offset
switch (tcode) {	case TCODE_WRITE_QUADLET_REQUEST:		packet->header[3] = *(u32 *)payload;		packet->header_length = 16;		packet->payload_length = 0;		break;	case TCODE_LOCK_REQUEST:	case TCODE_WRITE_BLOCK_REQUEST:		packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode);		packet->header_length = 16;		packet->payload = payload;		packet->payload_length = length;		break;	case TCODE_READ_QUADLET_REQUEST:		packet->header_length = 12;		packet->payload_length = 0;		break;	case TCODE_READ_BLOCK_REQUEST:		packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode);		packet->header_length = 16;		packet->payload_length = 0;		break;	}
tcode
tcode
{	case TCODE_WRITE_QUADLET_REQUEST:		packet->header[3] = *(u32 *)payload;		packet->header_length = 16;		packet->payload_length = 0;		break;	case TCODE_LOCK_REQUEST:	case TCODE_WRITE_BLOCK_REQUEST:		packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode);		packet->header_length = 16;		packet->payload = payload;		packet->payload_length = length;		break;	case TCODE_READ_QUADLET_REQUEST:		packet->header_length = 12;		packet->payload_length = 0;		break;	case TCODE_READ_BLOCK_REQUEST:		packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode);		packet->header_length = 16;		packet->payload_length = 0;		break;	}
case TCODE_WRITE_QUADLET_REQUEST:
TCODE_WRITE_QUADLET_REQUEST
TCODE_WRITE_QUADLET_REQUEST
packet->header[3] = *(u32 *)payload;
packet->header[3] = *(u32 *)payload
packet->header[3]
packet->header
packet
packet
header
3
*(u32 *)payload
(u32 *)payload
u32 *
u32
u32
*
*
payload
payload
packet->header_length = 16;
packet->header_length = 16
packet->header_length
packet
packet
header_length
16
packet->payload_length = 0;
packet->payload_length = 0
packet->payload_length
packet
packet
payload_length
0
break;
case TCODE_LOCK_REQUEST:
TCODE_LOCK_REQUEST
TCODE_LOCK_REQUEST
case TCODE_WRITE_BLOCK_REQUEST:
TCODE_WRITE_BLOCK_REQUEST
TCODE_WRITE_BLOCK_REQUEST
packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode);
packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode)
packet->header[3]
packet->header
packet
packet
header
3
HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode)
HEADER_DATA_LENGTH(length)
HEADER_DATA_LENGTH
HEADER_DATA_LENGTH
length
length
HEADER_EXTENDED_TCODE(ext_tcode)
HEADER_EXTENDED_TCODE
HEADER_EXTENDED_TCODE
ext_tcode
ext_tcode
packet->header_length = 16;
packet->header_length = 16
packet->header_length
packet
packet
header_length
16
packet->payload = payload;
packet->payload = payload
packet->payload
packet
packet
payload
payload
payload
packet->payload_length = length;
packet->payload_length = length
packet->payload_length
packet
packet
payload_length
length
length
break;
case TCODE_READ_QUADLET_REQUEST:
TCODE_READ_QUADLET_REQUEST
TCODE_READ_QUADLET_REQUEST
packet->header_length = 12;
packet->header_length = 12
packet->header_length
packet
packet
header_length
12
packet->payload_length = 0;
packet->payload_length = 0
packet->payload_length
packet
packet
payload_length
0
break;
case TCODE_READ_BLOCK_REQUEST:
TCODE_READ_BLOCK_REQUEST
TCODE_READ_BLOCK_REQUEST
packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode);
packet->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode)
packet->header[3]
packet->header
packet
packet
header
3
HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(ext_tcode)
HEADER_DATA_LENGTH(length)
HEADER_DATA_LENGTH
HEADER_DATA_LENGTH
length
length
HEADER_EXTENDED_TCODE(ext_tcode)
HEADER_EXTENDED_TCODE
HEADER_EXTENDED_TCODE
ext_tcode
ext_tcode
packet->header_length = 16;
packet->header_length = 16
packet->header_length
packet
packet
header_length
16
packet->payload_length = 0;
packet->payload_length = 0
packet->payload_length
packet
packet
payload_length
0
break;
packet->speed = speed;
packet->speed = speed
packet->speed
packet
packet
speed
speed
speed
packet->generation = generation;
packet->generation = generation
packet->generation
packet
packet
generation
generation
generation
packet->ack = 0;
packet->ack = 0
packet->ack
packet
packet
ack
0
packet->payload_bus = 0;
packet->payload_bus = 0
packet->payload_bus
packet
packet
payload_bus
0
-----joern-----
(154,71,0)
(143,46,0)
(52,169,0)
(169,136,0)
(114,99,0)
(74,146,0)
(158,151,0)
(115,61,0)
(125,87,0)
(64,131,0)
(40,71,0)
(20,89,0)
(28,174,0)
(128,39,0)
(164,50,0)
(104,116,0)
(46,155,0)
(38,152,0)
(62,51,0)
(94,132,0)
(68,136,0)
(100,22,0)
(35,136,0)
(4,120,0)
(13,1,0)
(25,89,0)
(76,136,0)
(85,174,0)
(46,23,0)
(122,50,0)
(43,174,0)
(61,17,0)
(151,27,0)
(114,116,0)
(144,5,0)
(34,3,0)
(51,60,0)
(58,174,0)
(77,136,0)
(31,52,0)
(47,125,0)
(60,51,0)
(98,36,0)
(171,136,0)
(140,174,0)
(71,0,0)
(4,25,0)
(101,126,0)
(164,137,0)
(148,34,0)
(16,20,0)
(22,100,0)
(2,162,0)
(100,87,0)
(55,90,0)
(37,23,0)
(98,0,0)
(25,4,0)
(4,76,0)
(13,39,0)
(59,136,0)
(56,174,0)
(145,49,0)
(42,162,0)
(20,136,0)
(53,33,0)
(95,41,0)
(21,91,0)
(71,155,0)
(160,27,0)
(116,142,0)
(6,169,0)
(159,43,0)
(49,136,0)
(10,43,0)
(65,54,0)
(22,114,0)
(0,98,0)
(79,42,0)
(129,29,0)
(36,98,0)
(64,174,0)
(22,86,0)
(101,100,0)
(153,36,0)
(102,61,0)
(94,23,0)
(86,172,0)
(107,49,0)
(139,86,0)
(112,114,0)
(162,42,0)
(84,136,0)
(106,59,0)
(30,39,0)
(115,1,0)
(138,174,0)
(168,55,0)
(3,60,0)
(5,99,0)
(135,131,0)
(11,136,0)
(18,58,0)
(110,35,0)
(134,28,0)
(28,35,0)
(91,48,0)
(69,17,0)
(70,89,0)
(127,56,0)
(52,174,0)
(29,59,0)
(33,41,0)
(116,99,0)
(130,141,0)
(96,64,0)
(34,152,0)
(1,136,0)
(83,52,0)
(26,146,0)
(113,120,0)
(73,107,0)
(103,65,0)
(85,65,0)
(66,138,0)
(56,141,0)
(152,174,0)
(131,150,0)
(70,115,0)
(133,13,0)
(42,99,0)
(138,20,0)
(98,150,0)
(63,28,0)
(55,174,0)
(100,101,0)
(78,77,0)
(75,55,0)
(65,136,0)
(147,90,0)
(9,85,0)
(87,125,0)
(44,64,0)
(33,174,0)
(3,136,0)
(111,151,0)
(0,71,0)
(146,174,0)
(8,48,0)
(29,174,0)
(48,174,0)
(50,164,0)
(137,87,0)
(72,23,0)
(36,109,0)
(51,54,0)
(146,119,0)
(105,101,0)
(151,174,0)
(32,164,0)
(166,107,0)
(58,18,0)
(162,142,0)
(157,85,0)
(93,140,0)
(15,140,0)
(50,174,0)
(14,25,0)
(61,115,0)
(170,48,0)
(117,70,0)
(90,136,0)
(140,77,0)
(92,5,0)
(150,23,0)
(120,4,0)
(48,91,0)
(60,3,0)
(86,22,0)
(81,152,0)
(27,108,0)
(27,23,0)
(82,50,0)
(51,88,0)
(118,136,0)
(67,56,0)
(1,115,0)
(45,116,0)
(119,136,0)
(61,162,0)
(76,4,0)
(19,23,0)
(149,136,0)
(114,22,0)
(91,76,0)
(152,34,0)
(39,13,0)
(18,46,0)
(120,162,0)
(24,94,0)
(131,64,0)
(12,58,0)
(39,174,0)
(161,136,0)
(167,17,0)
(107,174,0)
(137,23,0)
(43,94,0)
(163,136,0)
(87,137,0)
(124,119,0)
(7,138,0)
(156,33,0)
(115,70,0)
(173,18,0)
(88,51,0)
(141,23,0)
(150,98,0)
(123,29,0)
(41,23,0)
(120,17,0)
(57,42,0)
(97,58,0)
(87,100,0)
(165,136,0)
(147,55,1)
(49,145,1)
(61,17,1)
(158,111,1)
(66,65,1)
(85,9,1)
(168,75,1)
(164,50,1)
(82,122,1)
(120,113,1)
(25,14,1)
(58,12,1)
(86,172,1)
(152,174,1)
(94,132,1)
(153,0,1)
(36,153,1)
(112,101,1)
(167,69,1)
(31,83,1)
(63,3,1)
(52,174,1)
(21,48,1)
(159,84,1)
(116,45,1)
(131,64,1)
(133,39,1)
(42,79,1)
(61,162,1)
(29,174,1)
(118,77,1)
(105,125,1)
(55,174,1)
(83,80,1)
(140,15,1)
(75,1,1)
(110,28,1)
(145,107,1)
(15,93,1)
(79,57,1)
(151,158,1)
(60,51,1)
(96,137,1)
(162,42,1)
(107,73,1)
(159,118,1)
(103,85,1)
(0,71,1)
(9,157,1)
(123,129,1)
(4,25,1)
(74,90,1)
(134,63,1)
(159,165,1)
(130,56,1)
(70,117,1)
(104,162,1)
(85,174,1)
(98,0,1)
(80,46,1)
(57,2,1)
(53,156,1)
(101,126,1)
(44,96,1)
(45,104,1)
(39,174,1)
(102,70,1)
(65,54,1)
(122,116,1)
(125,47,1)
(165,59,1)
(30,128,1)
(13,39,1)
(159,163,1)
(87,100,1)
(1,115,1)
(143,18,1)
(16,138,1)
(43,174,1)
(146,174,1)
(115,61,1)
(76,4,1)
(87,125,1)
(115,70,1)
(5,99,1)
(170,80,1)
(98,36,1)
(101,105,1)
(59,106,1)
(156,141,1)
(97,150,1)
(71,155,1)
(28,174,1)
(28,134,1)
(94,24,1)
(91,48,1)
(50,82,1)
(137,87,1)
(120,162,1)
(42,99,1)
(10,159,1)
(58,174,1)
(38,80,1)
(17,167,1)
(46,143,1)
(27,108,1)
(32,50,1)
(100,101,1)
(117,13,1)
(36,109,1)
(120,17,1)
(29,123,1)
(22,114,1)
(86,139,1)
(33,53,1)
(77,78,1)
(157,49,1)
(138,7,1)
(34,152,1)
(111,94,1)
(152,81,1)
(148,152,1)
(70,89,1)
(71,40,1)
(3,60,1)
(41,95,1)
(48,8,1)
(55,168,1)
(139,114,1)
(39,30,1)
(78,140,1)
(2,5,1)
(154,131,1)
(150,98,1)
(25,89,1)
(35,110,1)
(56,174,1)
(13,133,1)
(141,130,1)
(43,10,1)
(107,174,1)
(140,174,1)
(116,99,1)
(113,25,1)
(65,103,1)
(7,66,1)
(18,58,1)
(135,64,1)
(61,102,1)
(67,27,1)
(81,38,1)
(164,32,1)
(62,34,1)
(146,26,1)
(51,54,1)
(20,16,1)
(20,89,1)
(26,74,1)
(114,99,1)
(46,155,1)
(18,173,1)
(122,17,1)
(27,160,1)
(51,88,1)
(84,20,1)
(90,147,1)
(173,58,1)
(124,146,1)
(73,166,1)
(52,31,1)
(34,148,1)
(51,62,1)
(166,76,1)
(114,116,1)
(95,33,1)
(24,43,1)
(12,97,1)
(121,41,1)
(50,174,1)
(91,21,1)
(106,29,1)
(131,135,1)
(169,6,1)
(163,119,1)
(33,174,1)
(64,44,1)
(128,80,1)
(4,120,1)
(138,174,1)
(5,92,1)
(6,52,1)
(48,174,1)
(93,169,1)
(160,151,1)
(100,22,1)
(56,127,1)
(92,144,1)
(69,5,1)
(8,170,1)
(114,112,1)
(22,86,1)
(151,174,1)
(64,174,1)
(40,154,1)
(159,80,1)
(129,35,1)
(127,67,1)
(14,91,1)
(119,124,1)
(47,164,1)
(103,80,2)
(69,5,2)
(66,80,2)
(124,80,2)
(137,87,2)
(119,80,2)
(117,80,2)
(52,80,2)
(167,5,2)
(63,80,2)
(114,116,2)
(152,174,2)
(94,132,2)
(27,108,2)
(148,80,2)
(76,4,2)
(56,174,2)
(118,80,2)
(100,22,2)
(152,80,2)
(101,126,2)
(48,80,2)
(100,101,2)
(90,80,2)
(51,54,2)
(76,80,2)
(115,80,2)
(25,80,2)
(91,48,2)
(104,5,2)
(133,80,2)
(107,174,2)
(74,80,2)
(115,61,2)
(29,80,2)
(62,80,2)
(3,60,2)
(49,80,2)
(87,125,2)
(61,17,2)
(9,80,2)
(48,174,2)
(115,70,2)
(123,80,2)
(170,80,2)
(7,80,2)
(20,80,2)
(157,80,2)
(91,80,2)
(79,5,2)
(59,80,2)
(98,0,2)
(120,17,2)
(73,80,2)
(106,80,2)
(113,80,2)
(13,80,2)
(43,174,2)
(70,89,2)
(77,80,2)
(145,80,2)
(57,5,2)
(18,58,2)
(86,172,2)
(2,5,2)
(138,80,2)
(70,80,2)
(65,80,2)
(120,80,2)
(29,174,2)
(39,80,2)
(146,174,2)
(163,80,2)
(51,80,2)
(39,174,2)
(169,80,2)
(45,5,2)
(131,64,2)
(129,80,2)
(71,155,2)
(65,54,2)
(28,174,2)
(114,99,2)
(30,80,2)
(60,80,2)
(51,88,2)
(13,39,2)
(85,80,2)
(22,114,2)
(34,80,2)
(162,5,2)
(38,80,2)
(61,80,2)
(6,80,2)
(35,80,2)
(134,80,2)
(75,80,2)
(147,80,2)
(61,162,2)
(140,80,2)
(42,5,2)
(83,80,2)
(20,89,2)
(81,80,2)
(16,80,2)
(15,80,2)
(55,80,2)
(78,80,2)
(4,80,2)
(14,80,2)
(87,100,2)
(26,80,2)
(22,86,2)
(146,80,2)
(165,80,2)
(46,155,2)
(64,174,2)
(107,80,2)
(25,89,2)
(102,80,2)
(33,174,2)
(31,80,2)
(98,36,2)
(0,71,2)
(8,80,2)
(21,80,2)
(36,109,2)
(93,80,2)
(60,51,2)
(116,5,2)
(3,80,2)
(166,80,2)
(164,50,2)
(84,80,2)
(151,174,2)
(34,152,2)
(120,162,2)
(52,174,2)
(168,80,2)
(85,174,2)
(5,99,2)
(17,5,2)
(58,174,2)
(4,25,2)
(4,120,2)
(162,42,2)
(150,98,2)
(50,174,2)
(42,99,2)
(138,174,2)
(1,115,2)
(55,174,2)
(28,80,2)
(116,99,2)
(128,80,2)
(1,80,2)
(140,174,2)
(110,80,2)
-----------------------------------
(0,HEADER_OFFSET_HIGH(offset >> 32)
(1,packet->header[3] =\n\\n\\t\\t\\tHEADER_DATA_LENGTH(length)
(2,ext_tcode)
(3,packet->header[3] = *(u32 *)
(4,HEADER_DATA_LENGTH(length)
(5,tcode > 0x10)
(6,12)
(7,payload_length)
(8,header)
(9,payload)
(10,speed)
(11,case TCODE_WRITE_QUADLET_REQUEST:)
(12,header)
(13,packet->header[3])
(14,length)
(15,payload_length)
(16,length)
(17,ext_tcode = 0)
(18,packet->header[2])
(19,ext_tcode)
(20,packet->payload_length = length)
(21,3)
(22,HEADER_TCODE(tcode)
(23,)
(24,speed)
(25,HEADER_DATA_LENGTH(length)
(26,payload_length)
(27,packet->generation = generation)
(28,packet->header_length)
(29,packet->payload_length)
(30,header)
(31,header_length)
(32,0)
(33,packet->payload_bus)
(34,packet->header[3])
(35,packet->header_length = 16)
(36,HEADER_SOURCE(source_id)
(37,if (tcode > 0x10)
(38,packet)
(39,packet->header)
(40,32)
(41,packet->payload_bus = 0)
(42,tcode & ~0x10)
(43,packet->speed)
(44,header)
(45,TCODE_LOCK_REQUEST)
(46,packet->header[2] =\n\\n\\t\\toffset)
(47,RETRY_X)
(48,packet->header)
(49,packet->header_length = 16)
(50,packet->header)
(51,(u32 *)
(52,packet->header_length)
(53,payload_bus)
(54,void *payload)
(55,packet->header_length)
(56,packet->ack)
(57,tcode)
(58,packet->header)
(59,packet->payload_length = 0)
(60,*(u32 *)
(61,HEADER_EXTENDED_TCODE(ext_tcode)
(62,payload)
(63,packet)
(64,packet->header)
(65,packet->payload = payload)
(66,packet)
(67,packet)
(68,case TCODE_WRITE_BLOCK_REQUEST:)
(69,ext_tcode)
(70,HEADER_DATA_LENGTH(length)
(71,offset >> 32)
(72,switch (tcode)
(73,header_length)
(74,packet)
(75,packet)
(76,packet->header[3] =\n\\n\\t\\t\\tHEADER_DATA_LENGTH(length)
(77,packet->payload_length = 0)
(78,0)
(79,~0x10)
(80,tcode)
(81,header)
(82,header)
(83,packet)
(84,break;)
(85,packet->payload)
(86,HEADER_DESTINATION(destination_id)
(87,HEADER_RETRY(RETRY_X)
(88,u32 *)
(89,size_t length)
(90,packet->header_length = 16)
(91,packet->header[3])
(92,0x10)
(93,packet)
(94,packet->speed = speed)
(95,0)
(96,packet)
(97,packet)
(98,HEADER_OFFSET_HIGH(offset >> 32)
(99,int tcode)
(100,HEADER_TLABEL(tlabel)
(101,HEADER_TLABEL(tlabel)
(102,ext_tcode)
(103,payload)
(104,tcode)
(105,tlabel)
(106,0)
(107,packet->header_length)
(108,int generation)
(109,int source_id)
(110,16)
(111,packet)
(112,tcode)
(113,ext_tcode)
(114,HEADER_TCODE(tcode)
(115,HEADER_DATA_LENGTH(length)
(116,tcode = TCODE_LOCK_REQUEST)
(117,length)
(118,break;)
(119,packet->payload_length = 0)
(120,HEADER_EXTENDED_TCODE(ext_tcode)
(121,RET)
(122,packet)
(123,payload_length)
(124,0)
(125,HEADER_RETRY(RETRY_X)
(126,int tlabel)
(127,ack)
(128,packet)
(129,packet)
(130,0)
(131,packet->header[1])
(132,int speed)
(133,3)
(134,header_length)
(135,1)
(136,)
(137,packet->header[0] =\n\\n\\t\\tHEADER_RETRY(RETRY_X)
(138,packet->payload_length)
(139,destination_id)
(140,packet->payload_length)
(141,packet->ack = 0)
(142,)
(143,offset)
(144,tcode)
(145,16)
(146,packet->payload_length)
(147,16)
(148,3)
(149,case TCODE_READ_QUADLET_REQUEST:)
(150,packet->header[1] =\n\\n\\t\\tHEADER_OFFSET_HIGH(offset >> 32)
(151,packet->generation)
(152,packet->header)
(153,source_id)
(154,offset)
(155,unsigned long long offset)
(156,packet)
(157,packet)
(158,generation)
(159,packet)
(160,generation)
(161,case TCODE_LOCK_REQUEST:)
(162,ext_tcode = tcode & ~0x10)
(163,break;)
(164,packet->header[0])
(165,break;)
(166,packet)
(167,0)
(168,header_length)
(169,packet->header_length = 12)
(170,packet)
(171,case TCODE_READ_BLOCK_REQUEST:)
(172,int destination_id)
(173,2)
(174,struct fw_packet *packet)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^