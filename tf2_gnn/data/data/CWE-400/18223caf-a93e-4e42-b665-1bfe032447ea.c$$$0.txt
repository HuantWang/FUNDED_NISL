-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = rand();
    myUnion.unionFirst = data;
    {
        size_t data = myUnion.unionSecond;
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
38,39
38,40
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
50,52
51,52
52,53
52,54
54,55
54,56
57,58
57,59
57,60
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
71,72
71,73
71,74
71,75
71,76
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
79,80
81,82
81,83
82,83
84,85
84,86
85,86
87,88
88,89
88,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
105,108
106,107
108,109
110,111
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
124,125
125,126
126,127
126,128
127,128
-----nextToken-----
2,4,9,11,15,17,21,22,26,29,34,35,37,42,44,48,49,53,55,56,61,64,66,69,70,75,78,80,83,86,89,90,94,96,101,103,107,109,111,115,117,121,123,128,129
-----computeFrom-----
19,20
19,21
24,25
24,26
31,32
31,33
58,59
58,60
59,60
59,61
67,68
67,69
73,74
73,75
84,85
84,86
92,93
92,94
-----guardedBy-----
66,111
69,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G()
goodB2G
{    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = rand();
data = rand()
data
data
rand()
rand
rand
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        size_t data = myUnion.unionSecond;        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
size_t data = myUnion.unionSecond;
size_t data = myUnion.unionSecond;
size_t
size_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(10,16,0)
(6,32,0)
(40,0,0)
(26,46,0)
(12,9,0)
(25,20,0)
(48,36,0)
(33,42,0)
(49,15,0)
(39,20,0)
(59,10,0)
(38,28,0)
(13,44,0)
(43,28,0)
(55,14,0)
(0,39,0)
(47,25,0)
(45,46,0)
(37,20,0)
(1,24,0)
(36,42,0)
(52,25,0)
(42,36,0)
(41,42,0)
(35,38,0)
(30,44,0)
(29,53,0)
(9,14,0)
(8,9,0)
(46,20,0)
(33,44,0)
(21,3,0)
(19,5,0)
(51,16,0)
(4,16,0)
(5,21,0)
(44,33,0)
(9,24,0)
(18,4,0)
(7,38,0)
(1,14,0)
(2,14,0)
(28,20,0)
(58,24,0)
(56,39,0)
(60,2,0)
(14,32,0)
(10,53,0)
(42,16,0)
(22,0,0)
(32,6,0)
(14,24,0)
(32,14,0)
(28,46,0)
(21,5,0)
(11,55,0)
(44,16,0)
(54,4,0)
(31,1,0)
(17,49,0)
(10,50,0)
(50,10,0)
(53,10,0)
(46,45,0)
(16,39,0)
(57,14,0)
(16,4,0)
(42,33,0)
(23,2,0)
(27,20,0)
(55,24,0)
(50,32,0)
(32,50,0)
(59,57,1)
(14,32,1)
(36,48,1)
(18,54,1)
(4,18,1)
(28,46,1)
(49,17,1)
(9,8,1)
(44,16,1)
(19,2,1)
(25,52,1)
(34,49,1)
(33,44,1)
(35,46,1)
(5,19,1)
(9,14,1)
(12,21,1)
(7,35,1)
(54,51,1)
(10,53,1)
(48,41,1)
(42,36,1)
(42,16,1)
(8,12,1)
(53,29,1)
(51,28,1)
(2,14,1)
(52,47,1)
(2,23,1)
(55,11,1)
(32,50,1)
(1,14,1)
(30,13,1)
(26,25,1)
(17,33,1)
(41,16,1)
(31,55,1)
(55,14,1)
(23,60,1)
(29,59,1)
(44,30,1)
(60,14,1)
(32,6,1)
(46,45,1)
(10,16,1)
(43,38,1)
(33,42,1)
(28,43,1)
(45,26,1)
(13,42,1)
(11,9,1)
(1,31,1)
(21,5,1)
(12,2,1)
(50,10,1)
(38,7,1)
(57,33,1)
(16,4,1)
(34,1,1)
(8,33,2)
(50,10,2)
(32,6,2)
(57,33,2)
(9,33,2)
(2,14,2)
(33,42,2)
(32,50,2)
(2,33,2)
(46,45,2)
(55,14,2)
(50,33,2)
(28,46,2)
(60,33,2)
(42,36,2)
(21,5,2)
(12,33,2)
(1,14,2)
(19,2,2)
(17,33,2)
(14,33,2)
(10,53,2)
(10,16,2)
(23,33,2)
(44,16,2)
(59,33,2)
(16,4,2)
(10,33,2)
(42,16,2)
(44,42,2)
(14,32,2)
(55,33,2)
(31,33,2)
(5,2,2)
(1,33,2)
(13,42,2)
(33,44,2)
(53,33,2)
(11,33,2)
(29,33,2)
(9,14,2)
(49,33,2)
(21,2,2)
(32,33,2)
(30,42,2)
-----------------------------------
(0,)
(1,free(myString)
(2,myString == NULL)
(3,)
(4,myUnion.unionSecond)
(5,-1)
(6,char *)
(7,unionFirst)
(8,HELLO_STRING)
(9,strcpy(myString, HELLO_STRING)
(10,data*sizeof(char)
(11,myString)
(12,myString)
(13,data)
(14,myString = (char *)
(15,)
(16,data = myUnion.unionSecond)
(17,"Input is less than the length of the source string or too large")
(18,unionSecond)
(19,1)
(20,)
(21,exit(-1)
(22,myString)
(23,NULL)
(24,)
(25,data = 0)
(26,data)
(27,myUnion)
(28,myUnion.unionFirst = data)
(29,char)
(30,100)
(31,myString)
(32,(char *)
(33,data > strlen(HELLO_STRING)
(34,RET)
(35,myUnion)
(36,strlen(HELLO_STRING)
(37,data)
(38,myUnion.unionFirst)
(39,)
(40,if (data > strlen(HELLO_STRING)
(41,data)
(42,data > strlen(HELLO_STRING)
(43,data)
(44,data < 100)
(45,rand()
(46,data = rand()
(47,data)
(48,HELLO_STRING)
(49,printLine("Input is less than the length of the source string or too large")
(50,malloc(data*sizeof(char)
(51,data)
(52,0)
(53,sizeof(char)
(54,myUnion)
(55,printLine(myString)
(56,data)
(57,myString)
(58,if (myString == NULL)
(59,data)
(60,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^