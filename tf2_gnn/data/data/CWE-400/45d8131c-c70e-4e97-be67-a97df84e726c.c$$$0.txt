-----label-----
0
-----code-----
static void goodG2B()
{
    int h,j;
    int count;
    /* Initialize count */
    count = -1;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    for(j = 0; j < 1; j++)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
57,60
57,61
57,62
57,63
57,64
58,59
59,60
59,61
60,61
62,63
62,64
64,65
66,67
67,68
67,69
68,69
70,71
70,72
70,73
73,74
74,75
76,77
77,78
77,79
79,80
79,81
79,82
82,83
84,85
85,86
85,87
86,87
88,89
88,90
88,91
89,90
91,92
94,95
94,96
95,96
95,97
96,97
98,99
100,101
101,102
102,103
102,104
103,104
106,107
106,108
106,109
106,110
107,108
108,109
108,110
109,110
112,113
112,114
113,114
115,116
115,117
116,117
116,118
117,118
120,121
122,123
123,124
125,126
126,127
126,128
127,128
127,129
128,129
128,130
129,130
131,132
133,134
133,135
133,136
133,137
133,138
134,135
136,137
138,139
139,140
139,141
142,143
142,144
143,144
145,146
147,148
149,150
150,151
151,152
151,153
152,153
155,156
155,157
156,157
158,159
159,160
160,161
160,162
161,162
163,164
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,42,47,48,51,52,55,61,63,65,69,71,72,75,78,80,81,83,87,90,92,93,97,99,104,105,110,111,114,118,119,121,124,130,132,135,137,140,141,144,146,148,153,154,157,162,164
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
39,40
39,41
45,46
45,47
49,50
49,51
85,86
85,87
95,96
95,97
108,109
108,110
112,113
112,114
127,128
127,129
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int h,j;    int count;    /* Initialize count */    count = -1;    for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodG2B()
goodG2B
{    int h,j;    int count;    /* Initialize count */    count = -1;    for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int h,j;
int h,j;
int
h
h
j
j
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(68,76,0)
(22,31,0)
(15,18,0)
(76,68,0)
(20,37,0)
(87,31,0)
(13,42,0)
(1,37,0)
(60,16,0)
(75,53,0)
(32,19,0)
(69,58,0)
(14,47,0)
(86,7,0)
(51,68,0)
(68,58,0)
(23,45,0)
(39,42,0)
(64,83,0)
(71,31,0)
(23,16,0)
(68,35,0)
(34,41,0)
(47,41,0)
(68,42,0)
(65,39,0)
(85,31,0)
(74,83,0)
(80,20,0)
(42,39,0)
(46,74,0)
(52,50,0)
(29,30,0)
(72,31,0)
(3,39,0)
(44,87,0)
(24,22,0)
(11,13,0)
(31,78,0)
(67,16,0)
(18,9,0)
(56,87,0)
(73,85,0)
(26,22,0)
(48,35,0)
(39,85,0)
(21,42,0)
(62,83,0)
(84,85,0)
(70,16,0)
(32,18,0)
(66,74,0)
(6,23,0)
(40,41,0)
(19,41,0)
(32,81,0)
(82,32,0)
(77,19,0)
(10,16,0)
(0,45,0)
(5,18,0)
(57,21,0)
(19,32,0)
(35,48,0)
(38,8,0)
(21,54,0)
(45,23,0)
(2,48,0)
(49,13,0)
(17,75,0)
(42,31,0)
(35,68,0)
(43,16,0)
(63,68,0)
(7,28,0)
(30,83,0)
(8,37,0)
(4,31,0)
(61,31,0)
(58,68,0)
(36,31,0)
(12,37,0)
(25,76,0)
(33,42,0)
(59,31,0)
(81,32,0)
(32,23,0)
(79,20,0)
(87,44,1)
(29,55,1)
(85,73,1)
(7,86,1)
(45,0,1)
(56,74,1)
(39,3,1)
(32,23,1)
(75,17,1)
(24,26,1)
(18,15,1)
(80,79,1)
(68,51,1)
(13,42,1)
(62,64,1)
(23,45,1)
(3,65,1)
(40,34,1)
(79,8,1)
(48,2,1)
(66,30,1)
(34,13,1)
(27,74,1)
(49,11,1)
(22,24,1)
(30,29,1)
(65,33,1)
(26,87,1)
(21,57,1)
(74,83,1)
(29,21,1)
(69,76,1)
(58,69,1)
(35,68,1)
(55,19,1)
(51,58,1)
(68,42,1)
(32,82,1)
(47,41,1)
(64,20,1)
(77,47,1)
(76,25,1)
(13,49,1)
(46,66,1)
(34,75,1)
(74,46,1)
(20,80,1)
(79,37,1)
(2,19,1)
(21,42,1)
(86,35,1)
(37,1,1)
(44,56,1)
(77,41,1)
(84,22,1)
(19,32,1)
(68,58,1)
(32,81,1)
(17,13,1)
(32,18,1)
(30,83,1)
(68,76,1)
(33,85,1)
(14,35,1)
(1,12,1)
(35,48,1)
(15,5,1)
(19,41,1)
(8,38,1)
(57,55,1)
(83,62,1)
(73,84,1)
(66,83,1)
(47,14,1)
(11,42,1)
(38,18,1)
(8,37,1)
(12,23,1)
(39,85,1)
(20,37,1)
(42,39,1)
(82,77,1)
(25,63,1)
(5,20,1)
(41,40,1)
(14,7,1)
(63,48,1)
(0,6,1)
(14,19,2)
(65,74,2)
(33,74,2)
(68,42,2)
(82,74,2)
(32,74,2)
(29,74,2)
(47,19,2)
(19,74,2)
(74,83,2)
(35,48,2)
(13,74,2)
(23,45,2)
(22,74,2)
(56,74,2)
(77,19,2)
(32,81,2)
(68,76,2)
(51,19,2)
(66,74,2)
(63,19,2)
(19,32,2)
(48,19,2)
(84,74,2)
(19,19,2)
(42,39,2)
(15,20,2)
(32,23,2)
(68,58,2)
(21,42,2)
(26,74,2)
(86,35,2)
(40,74,2)
(58,19,2)
(69,19,2)
(21,55,2)
(24,74,2)
(34,74,2)
(2,19,2)
(35,19,2)
(25,19,2)
(18,20,2)
(82,19,2)
(39,85,2)
(35,68,2)
(73,74,2)
(32,18,2)
(32,19,2)
(57,55,2)
(87,74,2)
(8,37,2)
(30,74,2)
(85,74,2)
(76,19,2)
(49,74,2)
(17,13,2)
(39,74,2)
(19,41,2)
(8,20,2)
(41,74,2)
(3,74,2)
(13,42,2)
(20,37,2)
(55,74,2)
(68,19,2)
(7,35,2)
(75,13,2)
(30,83,2)
(44,74,2)
(47,41,2)
(5,20,2)
(79,20,2)
(46,74,2)
(11,74,2)
(42,74,2)
(38,20,2)
(74,74,2)
(80,20,2)
(77,74,2)
(20,20,2)
-----------------------------------
(0,1)
(1,0)
(2,SENTENCE)
(3,"w+")
(4,if (pFile == NULL)
(5,count)
(6,count)
(7,exit(1)
(8,h++)
(9,)
(10,h)
(11,pFile)
(12,h)
(13,pFile == NULL)
(14,i)
(15,20)
(16,)
(17,1)
(18,count = 20)
(19,i < (size_t)
(20,h < 1)
(21,fclose(pFile)
(22,*pFile = NULL)
(23,count = -1)
(24,NULL)
(25,char)
(26,pFile)
(27,RET)
(28,)
(29,j)
(30,j++)
(31,)
(32,(size_t)
(33,pFile)
(34,i)
(35,strlen(SENTENCE)
(36,filename)
(37,h = 0)
(38,h)
(39,fopen(filename, "w+")
(40,0)
(41,i = 0)
(42,pFile = fopen(filename, "w+")
(43,count)
(44,0)
(45,-1)
(46,1)
(47,i++)
(48,strlen(SENTENCE)
(49,NULL)
(50,)
(51,pFile)
(52,if (strlen(SENTENCE)
(53,)
(54,)
(55,pFile)
(56,i)
(57,pFile)
(58,strlen(SENTENCE)
(59,i)
(60,for(h = 0; h < 1; h++)
(61,if (pFile)
(62,0)
(63,SENTENCE)
(64,j)
(65,filename)
(66,j)
(67,for(j = 0; j < 1; j++)
(68,fwrite(SENTENCE, sizeof(char)
(69,SENTENCE)
(70,j)
(71,for (i = 0; i < (size_t)
(72,pFile)
(73,"output_bad.txt")
(74,j < 1)
(75,exit(1)
(76,sizeof(char)
(77,i)
(78,)
(79,h)
(80,1)
(81,size_t)
(82,count)
(83,j = 0)
(84,filename)
(85,*filename = "output_bad.txt")
(86,1)
(87,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^