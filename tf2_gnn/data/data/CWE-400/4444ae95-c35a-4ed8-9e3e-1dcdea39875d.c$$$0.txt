-----label-----
0
-----code-----
static void goodB2G1()
{
    int * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(8)
    {
    case 7:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Deallocate memory */
        free(data);
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
71,72
72,73
72,74
73,74
77,78
77,79
79,80
79,81
79,82
79,83
79,84
79,85
80,81
82,83
83,84
83,85
84,85
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,67,68,69,70,74,75,76,78,81,85,86,87,88,92,94,95
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G1(){    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }}
static void
goodB2G1()
goodB2G1
{    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }
8
{    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }
case 7:
7
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(0,28,0)
(33,11,0)
(15,44,0)
(18,50,0)
(42,1,0)
(7,1,0)
(23,48,0)
(32,48,0)
(50,18,0)
(34,6,0)
(17,28,0)
(36,1,0)
(18,9,0)
(21,23,0)
(13,10,0)
(24,28,0)
(12,1,0)
(22,44,0)
(16,6,0)
(48,50,0)
(11,28,0)
(35,44,0)
(9,1,0)
(31,45,0)
(14,47,0)
(43,1,0)
(10,13,0)
(44,7,0)
(20,34,0)
(47,7,0)
(18,26,0)
(45,28,0)
(44,9,0)
(2,9,0)
(46,7,0)
(44,15,0)
(38,9,0)
(45,34,0)
(49,47,0)
(30,6,0)
(3,1,0)
(39,36,0)
(4,13,0)
(47,9,0)
(37,28,0)
(26,18,0)
(15,1,0)
(10,5,0)
(19,6,0)
(48,23,0)
(27,2,0)
(45,9,0)
(9,18,0)
(29,34,0)
(8,1,0)
(50,48,0)
(40,2,0)
(51,34,1)
(39,51,1)
(32,38,1)
(18,50,1)
(36,39,1)
(9,18,1)
(35,7,1)
(22,35,1)
(44,9,1)
(43,15,1)
(2,40,1)
(47,14,1)
(2,9,1)
(41,0,1)
(14,49,1)
(15,44,1)
(45,31,1)
(23,21,1)
(21,32,1)
(29,20,1)
(45,34,1)
(27,9,1)
(50,48,1)
(49,10,1)
(11,33,1)
(25,3,1)
(24,45,1)
(34,29,1)
(18,26,1)
(13,4,1)
(45,9,1)
(44,22,1)
(0,11,1)
(38,51,1)
(48,23,1)
(44,7,1)
(3,36,1)
(4,2,1)
(25,43,1)
(49,2,1)
(46,47,1)
(10,13,1)
(40,27,1)
(31,25,1)
(47,9,1)
(7,46,1)
(41,24,1)
(33,25,1)
(23,51,2)
(27,51,2)
(33,25,2)
(39,51,2)
(45,9,2)
(2,51,2)
(21,51,2)
(14,51,2)
(43,51,2)
(10,2,2)
(44,7,2)
(36,51,2)
(44,9,2)
(31,25,2)
(4,2,2)
(35,51,2)
(48,23,2)
(48,51,2)
(44,51,2)
(18,50,2)
(24,25,2)
(32,51,2)
(11,25,2)
(22,51,2)
(18,51,2)
(18,26,2)
(47,9,2)
(45,25,2)
(10,13,2)
(0,25,2)
(9,18,2)
(7,51,2)
(3,51,2)
(9,51,2)
(13,2,2)
(47,51,2)
(46,51,2)
(40,51,2)
(15,44,2)
(50,51,2)
(2,9,2)
(38,51,2)
(15,51,2)
(45,34,2)
(50,48,2)
(49,51,2)
-----------------------------------
(0,break;)
(1,)
(2,data == NULL)
(3,break;)
(4,1)
(5,)
(6,)
(7,data[0] = 5)
(8,if (data == NULL)
(9,data = (int *)
(10,exit(-1)
(11,printLine("Benign, fixed string")
(12,default:)
(13,-1)
(14,0)
(15,printIntLine(data[0])
(16,switch(6)
(17,case 7:)
(18,(int *)
(19,data)
(20,data)
(21,int)
(22,0)
(23,sizeof(int)
(24,break;)
(25,8)
(26,int *)
(27,data)
(28,)
(29,NULL)
(30,switch(8)
(31,data)
(32,100)
(33,"Benign, fixed string")
(34,data = NULL)
(35,data)
(36,printLine("Benign, fixed string")
(37,default:)
(38,data)
(39,"Benign, fixed string")
(40,NULL)
(41,RET)
(42,case 6:)
(43,break;)
(44,data[0])
(45,free(data)
(46,5)
(47,data[0])
(48,100*sizeof(int)
(49,data)
(50,malloc(100*sizeof(int)
(51,6)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^