-----label-----
1
-----code-----
static int fl_change(struct net *net, struct sk_buff *in_skb,
		     struct tcf_proto *tp, unsigned long base,
		     u32 handle, struct nlattr **tca,
		     void **arg, bool ovr, struct netlink_ext_ack *extack)
{
	struct cls_fl_head *head = rtnl_dereference(tp->root);
	struct cls_fl_filter *fold = *arg;
	struct cls_fl_filter *fnew;
	struct fl_flow_mask *mask;
	struct nlattr **tb;
	int err;

	if (!tca[TCA_OPTIONS])
		return -EINVAL;

	mask = kzalloc(sizeof(struct fl_flow_mask), GFP_KERNEL);
	if (!mask)
		return -ENOBUFS;

	tb = kcalloc(TCA_FLOWER_MAX + 1, sizeof(struct nlattr *), GFP_KERNEL);
	if (!tb) {
		err = -ENOBUFS;
		goto errout_mask_alloc;
	}

	err = nla_parse_nested(tb, TCA_FLOWER_MAX, tca[TCA_OPTIONS],
			       fl_policy, NULL);
	if (err < 0)
		goto errout_tb;

	if (fold && handle && fold->handle != handle) {
		err = -EINVAL;
		goto errout_tb;
	}

	fnew = kzalloc(sizeof(*fnew), GFP_KERNEL);
	if (!fnew) {
		err = -ENOBUFS;
		goto errout_tb;
	}

	err = tcf_exts_init(&fnew->exts, TCA_FLOWER_ACT, 0);
	if (err < 0)
		goto errout;

	if (!handle) {
		handle = 1;
		err = idr_alloc_u32(&head->handle_idr, fnew, &handle,
				    INT_MAX, GFP_KERNEL);
	} else if (!fold) {
		/* user specifies a handle and it doesn't exist */
		err = idr_alloc_u32(&head->handle_idr, fnew, &handle,
				    handle, GFP_KERNEL);
	}
	if (err)
		goto errout;
	fnew->handle = handle;

	if (tb[TCA_FLOWER_FLAGS]) {
		fnew->flags = nla_get_u32(tb[TCA_FLOWER_FLAGS]);

		if (!tc_flags_valid(fnew->flags)) {
			err = -EINVAL;
			goto errout_idr;
		}
	}

	err = fl_set_parms(net, tp, fnew, mask, base, tb, tca[TCA_RATE], ovr,
			   tp->chain->tmplt_priv, extack);
	if (err)
		goto errout_idr;

	err = fl_check_assign_mask(head, fnew, fold, mask);
	if (err)
		goto errout_idr;

	if (!fold && fl_lookup(fnew->mask, &fnew->mkey)) {
		err = -EEXIST;
		goto errout_mask;
	}

	err = rhashtable_insert_fast(&fnew->mask->ht, &fnew->ht_node,
				     fnew->mask->filter_ht_params);
	if (err)
		goto errout_mask;

	if (!tc_skip_hw(fnew->flags)) {
		err = fl_hw_replace_filter(tp, fnew, extack);
		if (err)
			goto errout_mask;
	}

	if (!tc_in_hw(fnew->flags))
		fnew->flags |= TCA_CLS_FLAGS_NOT_IN_HW;

	if (fold) {
		rhashtable_remove_fast(&fold->mask->ht,
				       &fold->ht_node,
				       fold->mask->filter_ht_params);
		if (!tc_skip_hw(fold->flags))
			fl_hw_destroy_filter(tp, fold, NULL);
	}

	*arg = fnew;

	if (fold) {
		idr_replace(&head->handle_idr, fnew, fnew->handle);
		list_replace_rcu(&fold->list, &fnew->list);
		tcf_unbind_filter(tp, &fold->res);
		tcf_exts_get_net(&fold->exts);
		tcf_queue_work(&fold->rwork, fl_destroy_filter_work);
	} else {
		list_add_tail_rcu(&fnew->list, &fnew->mask->filters);
	}

	kfree(tb);
	kfree(mask);
	return 0;

errout_mask:
	fl_mask_put(head, fnew->mask, false);

errout_idr:
	if (!fold)
		idr_remove(&head->handle_idr, fnew->handle);
errout:
	tcf_exts_destroy(&fnew->exts);
	kfree(fnew);
errout_tb:
	kfree(tb);
errout_mask_alloc:
	kfree(mask);
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
3,13
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
35,38
39,40
39,41
41,42
41,43
41,44
45,46
45,47
47,48
49,50
49,51
50,51
52,53
52,54
55,56
55,57
55,58
55,59
55,60
55,61
55,62
55,63
55,64
55,65
55,66
55,67
55,68
55,69
55,70
55,71
55,72
55,73
55,74
55,75
55,76
55,77
55,78
55,79
55,80
55,81
55,82
55,83
55,84
55,85
55,86
55,87
55,88
55,89
55,90
55,91
55,92
55,93
55,94
55,95
55,96
55,97
55,98
55,99
56,57
57,58
57,59
58,59
60,61
60,62
60,63
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
72,73
72,74
73,74
75,76
75,77
75,78
78,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
86,88
89,90
90,91
90,92
91,92
93,94
93,95
96,97
97,98
97,99
98,99
100,101
100,102
100,103
104,105
105,106
105,107
107,108
109,110
109,111
110,111
111,112
111,113
112,113
114,115
116,117
117,118
118,119
120,121
121,122
121,123
122,123
124,125
124,126
124,127
125,126
127,128
128,129
128,130
129,130
132,133
134,135
134,136
135,136
136,137
138,139
139,140
140,141
142,143
143,144
143,145
144,145
146,147
146,148
146,149
146,150
147,148
149,150
149,151
150,151
153,154
154,155
154,156
155,156
157,158
159,160
161,162
161,163
162,163
163,164
165,166
165,167
166,167
167,168
167,169
168,169
170,171
171,172
173,174
175,176
176,177
176,178
177,178
179,180
179,181
179,182
179,183
179,184
179,185
180,181
182,183
184,185
186,187
186,188
187,188
189,190
191,192
193,194
195,196
195,197
196,197
196,198
197,198
200,201
202,203
202,204
203,204
203,205
204,205
204,206
205,206
207,208
209,210
209,211
210,211
210,212
211,212
214,215
216,217
216,218
217,218
218,219
218,220
219,220
221,222
222,223
224,225
226,227
227,228
227,229
228,229
230,231
230,232
230,233
231,232
233,234
234,235
235,236
236,237
238,239
240,241
240,242
241,242
242,243
244,245
244,246
245,246
246,247
246,248
247,248
249,250
250,251
252,253
254,255
255,256
255,257
256,257
258,259
258,260
258,261
258,262
259,260
261,262
262,263
262,264
263,264
266,267
269,270
269,271
270,271
270,272
271,272
274,275
276,277
276,278
276,279
277,278
278,279
280,281
280,282
281,282
282,283
282,284
283,284
286,287
287,288
287,289
288,289
290,291
290,292
290,293
290,294
290,295
290,296
291,292
293,294
294,295
294,296
295,296
298,299
300,301
301,302
303,304
305,306
307,308
307,309
308,309
309,310
311,312
312,313
313,314
313,315
314,315
316,317
316,318
316,319
316,320
316,321
316,322
317,318
319,320
320,321
320,322
321,322
324,325
326,327
327,328
329,330
331,332
333,334
333,335
334,335
336,337
338,339
339,340
339,341
340,341
340,342
341,342
344,345
346,347
346,348
347,348
347,349
348,349
350,351
352,353
352,354
353,354
354,355
354,356
355,356
355,357
356,357
359,360
359,361
360,361
362,363
362,364
363,364
365,366
367,368
367,369
368,369
369,370
369,371
370,371
372,373
372,374
373,374
376,377
376,378
377,378
378,379
378,380
379,380
381,382
382,383
384,385
386,387
387,388
387,389
388,389
390,391
390,392
390,393
390,394
390,395
390,396
390,397
390,398
390,399
390,400
390,401
391,392
393,394
395,396
397,398
399,400
401,402
403,404
405,406
405,407
406,407
408,409
410,411
412,413
412,414
413,414
413,415
414,415
418,419
420,421
420,422
421,422
423,424
425,426
426,427
426,428
427,428
429,430
429,431
429,432
429,433
429,434
430,431
432,433
434,435
436,437
438,439
440,441
440,442
441,442
443,444
445,446
445,447
446,447
446,448
447,448
448,449
450,451
450,452
450,453
451,452
453,454
453,455
454,455
457,458
458,459
458,460
459,460
462,463
462,464
463,464
464,465
464,466
465,466
467,468
468,469
470,471
472,473
473,474
473,475
474,475
476,477
476,478
476,479
476,480
477,478
479,480
480,481
480,482
481,482
481,483
482,483
486,487
487,488
487,489
488,489
491,492
491,493
492,493
492,494
493,494
497,498
497,499
498,499
500,501
502,503
502,504
503,504
504,505
504,506
505,506
507,508
507,509
508,509
511,512
511,513
512,513
513,514
513,515
514,515
516,517
516,518
516,519
516,520
517,518
519,520
521,522
523,524
525,526
525,527
526,527
528,529
530,531
530,532
531,532
532,533
532,534
533,534
535,536
535,537
536,537
539,540
540,541
540,542
541,542
541,543
542,543
545,546
547,548
547,549
548,549
550,551
550,552
551,552
552,553
552,554
552,555
552,556
553,554
555,556
556,557
556,558
557,558
557,559
558,559
562,563
563,564
563,565
564,565
567,568
567,569
568,569
568,570
569,570
573,574
573,575
574,575
575,576
575,577
576,577
578,579
578,580
579,580
582,583
583,584
583,585
583,586
583,587
584,585
586,587
588,589
590,591
592,593
593,594
593,595
594,595
595,596
597,598
599,600
599,601
599,602
600,601
602,603
602,604
602,605
602,606
602,607
603,604
604,605
604,606
604,607
604,608
605,606
607,608
608,609
608,610
609,610
612,613
614,615
614,616
615,616
618,619
619,620
619,621
619,622
620,621
622,623
623,624
623,625
624,625
627,628
628,629
628,630
629,630
632,633
633,634
633,635
633,636
634,635
636,637
638,639
639,640
639,641
640,641
643,644
644,645
644,646
645,646
647,648
648,649
648,650
649,650
652,653
653,654
653,655
653,656
654,655
656,657
657,658
657,659
658,659
661,662
663,664
664,665
665,666
665,667
665,668
666,667
668,669
669,670
669,671
670,671
673,674
674,675
674,676
675,676
675,677
676,677
680,681
681,682
681,683
682,683
684,685
686,687
687,688
687,689
688,689
690,691
692,693
694,695
694,696
696,697
697,698
697,699
697,700
697,701
698,699
700,701
702,703
702,704
703,704
707,708
707,709
709,710
709,711
710,711
711,712
713,714
714,715
714,716
714,717
715,716
717,718
718,719
718,720
719,720
722,723
722,724
723,724
726,727
726,728
728,729
729,730
729,731
730,731
732,733
733,734
733,735
734,735
737,738
738,739
738,740
739,740
741,742
743,744
743,745
745,746
746,747
746,748
747,748
749,750
751,752
751,753
753,754
754,755
754,756
755,756
757,758
759,760
760,761
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,24,26,29,31,34,36,37,38,40,42,43,44,46,48,51,53,54,59,61,62,66,69,70,74,76,77,81,85,87,88,92,94,95,99,101,102,103,106,108,113,115,119,123,126,130,131,133,137,141,145,148,151,152,156,158,160,164,169,172,174,178,181,183,185,188,190,192,194,198,199,201,206,208,212,213,215,220,223,225,229,232,237,239,243,248,251,253,257,260,264,265,267,268,272,273,275,279,284,285,289,292,296,297,299,302,304,306,310,315,318,322,323,325,328,330,332,335,337,342,343,345,349,351,357,358,361,364,366,371,374,375,380,383,385,389,392,394,396,398,400,402,404,407,409,411,415,416,417,419,422,424,428,431,433,435,437,439,442,444,449,452,455,456,460,461,466,469,471,475,478,483,484,485,489,490,494,495,496,499,501,506,509,510,515,518,520,522,524,527,529,534,537,538,543,544,546,549,554,559,560,561,565,566,570,571,572,577,580,581,585,587,589,591,596,598,601,606,610,611,613,616,617,621,625,626,630,631,635,637,641,642,646,650,651,655,659,660,662,667,671,672,677,678,679,683,685,689,691,693,695,699,701,704,705,706,708,712,716,720,721,724,725,727,731,735,736,740,742,744,748,750,752,756,758,761
-----computeFrom-----
121,122
121,123
143,144
143,145
149,150
149,151
167,168
167,169
176,177
176,178
196,197
196,198
203,204
203,205
204,205
204,206
209,210
209,211
218,219
218,220
227,228
227,229
246,247
246,248
255,256
255,257
270,271
270,272
282,283
282,284
287,288
287,289
313,314
313,315
339,340
339,341
354,355
354,356
378,379
378,380
387,388
387,389
426,427
426,428
446,447
446,448
464,465
464,466
473,474
473,475
513,514
513,515
540,541
540,542
593,594
593,595
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LabelStatement;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int fl_change(struct net *net, struct sk_buff *in_skb,		     struct tcf_proto *tp, unsigned long base,		     u32 handle, struct nlattr **tca,		     void **arg, bool ovr, struct netlink_ext_ack *extack){	struct cls_fl_head *head = rtnl_dereference(tp->root);	struct cls_fl_filter *fold = *arg;	struct cls_fl_filter *fnew;	struct fl_flow_mask *mask;	struct nlattr **tb;	int err;	if (!tca[TCA_OPTIONS])		return -EINVAL;	mask = kzalloc(sizeof(struct fl_flow_mask), GFP_KERNEL);	if (!mask)		return -ENOBUFS;	tb = kcalloc(TCA_FLOWER_MAX + 1, sizeof(struct nlattr *), GFP_KERNEL);	if (!tb) {		err = -ENOBUFS;		goto errout_mask_alloc;	}	err = nla_parse_nested(tb, TCA_FLOWER_MAX, tca[TCA_OPTIONS],			       fl_policy, NULL);	if (err < 0)		goto errout_tb;	if (fold && handle && fold->handle != handle) {		err = -EINVAL;		goto errout_tb;	}	fnew = kzalloc(sizeof(*fnew), GFP_KERNEL);	if (!fnew) {		err = -ENOBUFS;		goto errout_tb;	}	err = tcf_exts_init(&fnew->exts, TCA_FLOWER_ACT, 0);	if (err < 0)		goto errout;	if (!handle) {		handle = 1;		err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    INT_MAX, GFP_KERNEL);	} else if (!fold) {		/* user specifies a handle and it doesn't exist */		err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    handle, GFP_KERNEL);	}	if (err)		goto errout;	fnew->handle = handle;	if (tb[TCA_FLOWER_FLAGS]) {		fnew->flags = nla_get_u32(tb[TCA_FLOWER_FLAGS]);		if (!tc_flags_valid(fnew->flags)) {			err = -EINVAL;			goto errout_idr;		}	}	err = fl_set_parms(net, tp, fnew, mask, base, tb, tca[TCA_RATE], ovr,			   tp->chain->tmplt_priv, extack);	if (err)		goto errout_idr;	err = fl_check_assign_mask(head, fnew, fold, mask);	if (err)		goto errout_idr;	if (!fold && fl_lookup(fnew->mask, &fnew->mkey)) {		err = -EEXIST;		goto errout_mask;	}	err = rhashtable_insert_fast(&fnew->mask->ht, &fnew->ht_node,				     fnew->mask->filter_ht_params);	if (err)		goto errout_mask;	if (!tc_skip_hw(fnew->flags)) {		err = fl_hw_replace_filter(tp, fnew, extack);		if (err)			goto errout_mask;	}	if (!tc_in_hw(fnew->flags))		fnew->flags |= TCA_CLS_FLAGS_NOT_IN_HW;	if (fold) {		rhashtable_remove_fast(&fold->mask->ht,				       &fold->ht_node,				       fold->mask->filter_ht_params);		if (!tc_skip_hw(fold->flags))			fl_hw_destroy_filter(tp, fold, NULL);	}	*arg = fnew;	if (fold) {		idr_replace(&head->handle_idr, fnew, fnew->handle);		list_replace_rcu(&fold->list, &fnew->list);		tcf_unbind_filter(tp, &fold->res);		tcf_exts_get_net(&fold->exts);		tcf_queue_work(&fold->rwork, fl_destroy_filter_work);	} else {		list_add_tail_rcu(&fnew->list, &fnew->mask->filters);	}	kfree(tb);	kfree(mask);	return 0;errout_mask:	fl_mask_put(head, fnew->mask, false);errout_idr:	if (!fold)		idr_remove(&head->handle_idr, fnew->handle);errout:	tcf_exts_destroy(&fnew->exts);	kfree(fnew);errout_tb:	kfree(tb);errout_mask_alloc:	kfree(mask);	return err;}
static int
fl_change(struct net *net, struct sk_buff *in_skb,		     struct tcf_proto *tp, unsigned long base,		     u32 handle, struct nlattr **tca,		     void **arg, bool ovr, struct netlink_ext_ack *extack)
fl_change
struct net *net
struct net
net
*net
*
net
struct sk_buff *in_skb
struct sk_buff
sk_buff
*in_skb
*
in_skb
struct tcf_proto *tp
struct tcf_proto
tcf_proto
*tp
*
tp
unsigned long base
unsigned long
base
base
u32 handle
u32
u32
handle
handle
struct nlattr **tca
struct nlattr
nlattr
**tca
*
*
tca
void **arg
void
**arg
*
*
arg
bool ovr
bool
ovr
ovr
struct netlink_ext_ack *extack
struct netlink_ext_ack
netlink_ext_ack
*extack
*
extack
{	struct cls_fl_head *head = rtnl_dereference(tp->root);	struct cls_fl_filter *fold = *arg;	struct cls_fl_filter *fnew;	struct fl_flow_mask *mask;	struct nlattr **tb;	int err;	if (!tca[TCA_OPTIONS])		return -EINVAL;	mask = kzalloc(sizeof(struct fl_flow_mask), GFP_KERNEL);	if (!mask)		return -ENOBUFS;	tb = kcalloc(TCA_FLOWER_MAX + 1, sizeof(struct nlattr *), GFP_KERNEL);	if (!tb) {		err = -ENOBUFS;		goto errout_mask_alloc;	}	err = nla_parse_nested(tb, TCA_FLOWER_MAX, tca[TCA_OPTIONS],			       fl_policy, NULL);	if (err < 0)		goto errout_tb;	if (fold && handle && fold->handle != handle) {		err = -EINVAL;		goto errout_tb;	}	fnew = kzalloc(sizeof(*fnew), GFP_KERNEL);	if (!fnew) {		err = -ENOBUFS;		goto errout_tb;	}	err = tcf_exts_init(&fnew->exts, TCA_FLOWER_ACT, 0);	if (err < 0)		goto errout;	if (!handle) {		handle = 1;		err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    INT_MAX, GFP_KERNEL);	} else if (!fold) {		/* user specifies a handle and it doesn't exist */		err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    handle, GFP_KERNEL);	}	if (err)		goto errout;	fnew->handle = handle;	if (tb[TCA_FLOWER_FLAGS]) {		fnew->flags = nla_get_u32(tb[TCA_FLOWER_FLAGS]);		if (!tc_flags_valid(fnew->flags)) {			err = -EINVAL;			goto errout_idr;		}	}	err = fl_set_parms(net, tp, fnew, mask, base, tb, tca[TCA_RATE], ovr,			   tp->chain->tmplt_priv, extack);	if (err)		goto errout_idr;	err = fl_check_assign_mask(head, fnew, fold, mask);	if (err)		goto errout_idr;	if (!fold && fl_lookup(fnew->mask, &fnew->mkey)) {		err = -EEXIST;		goto errout_mask;	}	err = rhashtable_insert_fast(&fnew->mask->ht, &fnew->ht_node,				     fnew->mask->filter_ht_params);	if (err)		goto errout_mask;	if (!tc_skip_hw(fnew->flags)) {		err = fl_hw_replace_filter(tp, fnew, extack);		if (err)			goto errout_mask;	}	if (!tc_in_hw(fnew->flags))		fnew->flags |= TCA_CLS_FLAGS_NOT_IN_HW;	if (fold) {		rhashtable_remove_fast(&fold->mask->ht,				       &fold->ht_node,				       fold->mask->filter_ht_params);		if (!tc_skip_hw(fold->flags))			fl_hw_destroy_filter(tp, fold, NULL);	}	*arg = fnew;	if (fold) {		idr_replace(&head->handle_idr, fnew, fnew->handle);		list_replace_rcu(&fold->list, &fnew->list);		tcf_unbind_filter(tp, &fold->res);		tcf_exts_get_net(&fold->exts);		tcf_queue_work(&fold->rwork, fl_destroy_filter_work);	} else {		list_add_tail_rcu(&fnew->list, &fnew->mask->filters);	}	kfree(tb);	kfree(mask);	return 0;errout_mask:	fl_mask_put(head, fnew->mask, false);errout_idr:	if (!fold)		idr_remove(&head->handle_idr, fnew->handle);errout:	tcf_exts_destroy(&fnew->exts);	kfree(fnew);errout_tb:	kfree(tb);errout_mask_alloc:	kfree(mask);	return err;}
struct cls_fl_head *head = rtnl_dereference(tp->root);
struct cls_fl_head *head = rtnl_dereference(tp->root);
struct cls_fl_head
cls_fl_head
*head = rtnl_dereference(tp->root)
*
head
= rtnl_dereference(tp->root)
rtnl_dereference(tp->root)
rtnl_dereference
rtnl_dereference
tp->root
tp
tp
root
struct cls_fl_filter *fold = *arg;
struct cls_fl_filter *fold = *arg;
struct cls_fl_filter
cls_fl_filter
*fold = *arg
*
fold
= *arg
*arg
arg
arg
struct cls_fl_filter *fnew;
struct cls_fl_filter *fnew;
struct cls_fl_filter
cls_fl_filter
*fnew
*
fnew
struct fl_flow_mask *mask;
struct fl_flow_mask *mask;
struct fl_flow_mask
fl_flow_mask
*mask
*
mask
struct nlattr **tb;
struct nlattr **tb;
struct nlattr
nlattr
**tb
*
*
tb
int err;
int err;
int
err
err
if (!tca[TCA_OPTIONS])		return -EINVAL;
!tca[TCA_OPTIONS]
tca[TCA_OPTIONS]
tca
tca
TCA_OPTIONS
TCA_OPTIONS
return -EINVAL;
-EINVAL
EINVAL
EINVAL
mask = kzalloc(sizeof(struct fl_flow_mask), GFP_KERNEL);
mask = kzalloc(sizeof(struct fl_flow_mask), GFP_KERNEL)
mask
mask
kzalloc(sizeof(struct fl_flow_mask), GFP_KERNEL)
kzalloc
kzalloc
sizeof(struct fl_flow_mask)
struct fl_flow_mask
struct fl_flow_mask
fl_flow_mask

GFP_KERNEL
GFP_KERNEL
if (!mask)		return -ENOBUFS;
!mask
mask
mask
return -ENOBUFS;
-ENOBUFS
ENOBUFS
ENOBUFS
tb = kcalloc(TCA_FLOWER_MAX + 1, sizeof(struct nlattr *), GFP_KERNEL);
tb = kcalloc(TCA_FLOWER_MAX + 1, sizeof(struct nlattr *), GFP_KERNEL)
tb
tb
kcalloc(TCA_FLOWER_MAX + 1, sizeof(struct nlattr *), GFP_KERNEL)
kcalloc
kcalloc
TCA_FLOWER_MAX + 1
TCA_FLOWER_MAX
TCA_FLOWER_MAX
1
sizeof(struct nlattr *)
struct nlattr *
struct nlattr
nlattr
*
*
GFP_KERNEL
GFP_KERNEL
if (!tb) {		err = -ENOBUFS;		goto errout_mask_alloc;	}
!tb
tb
tb
{		err = -ENOBUFS;		goto errout_mask_alloc;	}
err = -ENOBUFS;
err = -ENOBUFS
err
err
-ENOBUFS
ENOBUFS
ENOBUFS
goto errout_mask_alloc;
errout_mask_alloc
err = nla_parse_nested(tb, TCA_FLOWER_MAX, tca[TCA_OPTIONS],			       fl_policy, NULL);
err = nla_parse_nested(tb, TCA_FLOWER_MAX, tca[TCA_OPTIONS],			       fl_policy, NULL)
err
err
nla_parse_nested(tb, TCA_FLOWER_MAX, tca[TCA_OPTIONS],			       fl_policy, NULL)
nla_parse_nested
nla_parse_nested
tb
tb
TCA_FLOWER_MAX
TCA_FLOWER_MAX
tca[TCA_OPTIONS]
tca
tca
TCA_OPTIONS
TCA_OPTIONS
fl_policy
fl_policy
NULL
NULL
if (err < 0)		goto errout_tb;
err < 0
err
err
0
goto errout_tb;
errout_tb
if (fold && handle && fold->handle != handle) {		err = -EINVAL;		goto errout_tb;	}
fold && handle && fold->handle != handle
fold && handle
fold
fold
handle
handle
fold->handle != handle
fold->handle
fold
fold
handle
handle
handle
{		err = -EINVAL;		goto errout_tb;	}
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
goto errout_tb;
errout_tb
fnew = kzalloc(sizeof(*fnew), GFP_KERNEL);
fnew = kzalloc(sizeof(*fnew), GFP_KERNEL)
fnew
fnew
kzalloc(sizeof(*fnew), GFP_KERNEL)
kzalloc
kzalloc
sizeof(*fnew)
(*fnew)
*fnew
fnew
fnew
GFP_KERNEL
GFP_KERNEL
if (!fnew) {		err = -ENOBUFS;		goto errout_tb;	}
!fnew
fnew
fnew
{		err = -ENOBUFS;		goto errout_tb;	}
err = -ENOBUFS;
err = -ENOBUFS
err
err
-ENOBUFS
ENOBUFS
ENOBUFS
goto errout_tb;
errout_tb
err = tcf_exts_init(&fnew->exts, TCA_FLOWER_ACT, 0);
err = tcf_exts_init(&fnew->exts, TCA_FLOWER_ACT, 0)
err
err
tcf_exts_init(&fnew->exts, TCA_FLOWER_ACT, 0)
tcf_exts_init
tcf_exts_init
&fnew->exts
fnew->exts
fnew
fnew
exts
TCA_FLOWER_ACT
TCA_FLOWER_ACT
0
if (err < 0)		goto errout;
err < 0
err
err
0
goto errout;
errout
if (!handle) {		handle = 1;		err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    INT_MAX, GFP_KERNEL);	} else if (!fold) {		/* user specifies a handle and it doesn't exist */		err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    handle, GFP_KERNEL);	}
!handle
handle
handle
{		handle = 1;		err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    INT_MAX, GFP_KERNEL);	}
handle = 1;
handle = 1
handle
handle
1
err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    INT_MAX, GFP_KERNEL);
err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    INT_MAX, GFP_KERNEL)
err
err
idr_alloc_u32(&head->handle_idr, fnew, &handle,				    INT_MAX, GFP_KERNEL)
idr_alloc_u32
idr_alloc_u32
&head->handle_idr
head->handle_idr
head
head
handle_idr
fnew
fnew
&handle
handle
handle
INT_MAX
INT_MAX
GFP_KERNEL
GFP_KERNEL
if (!fold) {		/* user specifies a handle and it doesn't exist */		err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    handle, GFP_KERNEL);	}
!fold
fold
fold
{		/* user specifies a handle and it doesn't exist */		err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    handle, GFP_KERNEL);	}
err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    handle, GFP_KERNEL);
err = idr_alloc_u32(&head->handle_idr, fnew, &handle,				    handle, GFP_KERNEL)
err
err
idr_alloc_u32(&head->handle_idr, fnew, &handle,				    handle, GFP_KERNEL)
idr_alloc_u32
idr_alloc_u32
&head->handle_idr
head->handle_idr
head
head
handle_idr
fnew
fnew
&handle
handle
handle
handle
handle
GFP_KERNEL
GFP_KERNEL
if (err)		goto errout;
err
err
goto errout;
errout
fnew->handle = handle;
fnew->handle = handle
fnew->handle
fnew
fnew
handle
handle
handle
if (tb[TCA_FLOWER_FLAGS]) {		fnew->flags = nla_get_u32(tb[TCA_FLOWER_FLAGS]);		if (!tc_flags_valid(fnew->flags)) {			err = -EINVAL;			goto errout_idr;		}	}
tb[TCA_FLOWER_FLAGS]
tb
tb
TCA_FLOWER_FLAGS
TCA_FLOWER_FLAGS
{		fnew->flags = nla_get_u32(tb[TCA_FLOWER_FLAGS]);		if (!tc_flags_valid(fnew->flags)) {			err = -EINVAL;			goto errout_idr;		}	}
fnew->flags = nla_get_u32(tb[TCA_FLOWER_FLAGS]);
fnew->flags = nla_get_u32(tb[TCA_FLOWER_FLAGS])
fnew->flags
fnew
fnew
flags
nla_get_u32(tb[TCA_FLOWER_FLAGS])
nla_get_u32
nla_get_u32
tb[TCA_FLOWER_FLAGS]
tb
tb
TCA_FLOWER_FLAGS
TCA_FLOWER_FLAGS
if (!tc_flags_valid(fnew->flags)) {			err = -EINVAL;			goto errout_idr;		}
!tc_flags_valid(fnew->flags)
tc_flags_valid(fnew->flags)
tc_flags_valid
tc_flags_valid
fnew->flags
fnew
fnew
flags
{			err = -EINVAL;			goto errout_idr;		}
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
goto errout_idr;
errout_idr
err = fl_set_parms(net, tp, fnew, mask, base, tb, tca[TCA_RATE], ovr,			   tp->chain->tmplt_priv, extack);
err = fl_set_parms(net, tp, fnew, mask, base, tb, tca[TCA_RATE], ovr,			   tp->chain->tmplt_priv, extack)
err
err
fl_set_parms(net, tp, fnew, mask, base, tb, tca[TCA_RATE], ovr,			   tp->chain->tmplt_priv, extack)
fl_set_parms
fl_set_parms
net
net
tp
tp
fnew
fnew
mask
mask
base
base
tb
tb
tca[TCA_RATE]
tca
tca
TCA_RATE
TCA_RATE
ovr
ovr
tp->chain->tmplt_priv
tp->chain
tp
tp
chain
tmplt_priv
extack
extack
if (err)		goto errout_idr;
err
err
goto errout_idr;
errout_idr
err = fl_check_assign_mask(head, fnew, fold, mask);
err = fl_check_assign_mask(head, fnew, fold, mask)
err
err
fl_check_assign_mask(head, fnew, fold, mask)
fl_check_assign_mask
fl_check_assign_mask
head
head
fnew
fnew
fold
fold
mask
mask
if (err)		goto errout_idr;
err
err
goto errout_idr;
errout_idr
if (!fold && fl_lookup(fnew->mask, &fnew->mkey)) {		err = -EEXIST;		goto errout_mask;	}
!fold && fl_lookup(fnew->mask, &fnew->mkey)
!fold
fold
fold
fl_lookup(fnew->mask, &fnew->mkey)
fl_lookup
fl_lookup
fnew->mask
fnew
fnew
mask
&fnew->mkey
fnew->mkey
fnew
fnew
mkey
{		err = -EEXIST;		goto errout_mask;	}
err = -EEXIST;
err = -EEXIST
err
err
-EEXIST
EEXIST
EEXIST
goto errout_mask;
errout_mask
err = rhashtable_insert_fast(&fnew->mask->ht, &fnew->ht_node,				     fnew->mask->filter_ht_params);
err = rhashtable_insert_fast(&fnew->mask->ht, &fnew->ht_node,				     fnew->mask->filter_ht_params)
err
err
rhashtable_insert_fast(&fnew->mask->ht, &fnew->ht_node,				     fnew->mask->filter_ht_params)
rhashtable_insert_fast
rhashtable_insert_fast
&fnew->mask->ht
fnew->mask->ht
fnew->mask
fnew
fnew
mask
ht
&fnew->ht_node
fnew->ht_node
fnew
fnew
ht_node
fnew->mask->filter_ht_params
fnew->mask
fnew
fnew
mask
filter_ht_params
if (err)		goto errout_mask;
err
err
goto errout_mask;
errout_mask
if (!tc_skip_hw(fnew->flags)) {		err = fl_hw_replace_filter(tp, fnew, extack);		if (err)			goto errout_mask;	}
!tc_skip_hw(fnew->flags)
tc_skip_hw(fnew->flags)
tc_skip_hw
tc_skip_hw
fnew->flags
fnew
fnew
flags
{		err = fl_hw_replace_filter(tp, fnew, extack);		if (err)			goto errout_mask;	}
err = fl_hw_replace_filter(tp, fnew, extack);
err = fl_hw_replace_filter(tp, fnew, extack)
err
err
fl_hw_replace_filter(tp, fnew, extack)
fl_hw_replace_filter
fl_hw_replace_filter
tp
tp
fnew
fnew
extack
extack
if (err)			goto errout_mask;
err
err
goto errout_mask;
errout_mask
if (!tc_in_hw(fnew->flags))		fnew->flags |= TCA_CLS_FLAGS_NOT_IN_HW;
!tc_in_hw(fnew->flags)
tc_in_hw(fnew->flags)
tc_in_hw
tc_in_hw
fnew->flags
fnew
fnew
flags
fnew->flags |= TCA_CLS_FLAGS_NOT_IN_HW;
fnew->flags |= TCA_CLS_FLAGS_NOT_IN_HW
fnew->flags
fnew
fnew
flags
TCA_CLS_FLAGS_NOT_IN_HW
TCA_CLS_FLAGS_NOT_IN_HW
if (fold) {		rhashtable_remove_fast(&fold->mask->ht,				       &fold->ht_node,				       fold->mask->filter_ht_params);		if (!tc_skip_hw(fold->flags))			fl_hw_destroy_filter(tp, fold, NULL);	}
fold
fold
{		rhashtable_remove_fast(&fold->mask->ht,				       &fold->ht_node,				       fold->mask->filter_ht_params);		if (!tc_skip_hw(fold->flags))			fl_hw_destroy_filter(tp, fold, NULL);	}
rhashtable_remove_fast(&fold->mask->ht,				       &fold->ht_node,				       fold->mask->filter_ht_params);
rhashtable_remove_fast(&fold->mask->ht,				       &fold->ht_node,				       fold->mask->filter_ht_params)
rhashtable_remove_fast
rhashtable_remove_fast
&fold->mask->ht
fold->mask->ht
fold->mask
fold
fold
mask
ht
&fold->ht_node
fold->ht_node
fold
fold
ht_node
fold->mask->filter_ht_params
fold->mask
fold
fold
mask
filter_ht_params
if (!tc_skip_hw(fold->flags))			fl_hw_destroy_filter(tp, fold, NULL);
!tc_skip_hw(fold->flags)
tc_skip_hw(fold->flags)
tc_skip_hw
tc_skip_hw
fold->flags
fold
fold
flags
fl_hw_destroy_filter(tp, fold, NULL);
fl_hw_destroy_filter(tp, fold, NULL)
fl_hw_destroy_filter
fl_hw_destroy_filter
tp
tp
fold
fold
NULL
NULL
*arg = fnew;
*arg = fnew
*arg
arg
arg
fnew
fnew
if (fold) {		idr_replace(&head->handle_idr, fnew, fnew->handle);		list_replace_rcu(&fold->list, &fnew->list);		tcf_unbind_filter(tp, &fold->res);		tcf_exts_get_net(&fold->exts);		tcf_queue_work(&fold->rwork, fl_destroy_filter_work);	} else {		list_add_tail_rcu(&fnew->list, &fnew->mask->filters);	}
fold
fold
{		idr_replace(&head->handle_idr, fnew, fnew->handle);		list_replace_rcu(&fold->list, &fnew->list);		tcf_unbind_filter(tp, &fold->res);		tcf_exts_get_net(&fold->exts);		tcf_queue_work(&fold->rwork, fl_destroy_filter_work);	}
idr_replace(&head->handle_idr, fnew, fnew->handle);
idr_replace(&head->handle_idr, fnew, fnew->handle)
idr_replace
idr_replace
&head->handle_idr
head->handle_idr
head
head
handle_idr
fnew
fnew
fnew->handle
fnew
fnew
handle
list_replace_rcu(&fold->list, &fnew->list);
list_replace_rcu(&fold->list, &fnew->list)
list_replace_rcu
list_replace_rcu
&fold->list
fold->list
fold
fold
list
&fnew->list
fnew->list
fnew
fnew
list
tcf_unbind_filter(tp, &fold->res);
tcf_unbind_filter(tp, &fold->res)
tcf_unbind_filter
tcf_unbind_filter
tp
tp
&fold->res
fold->res
fold
fold
res
tcf_exts_get_net(&fold->exts);
tcf_exts_get_net(&fold->exts)
tcf_exts_get_net
tcf_exts_get_net
&fold->exts
fold->exts
fold
fold
exts
tcf_queue_work(&fold->rwork, fl_destroy_filter_work);
tcf_queue_work(&fold->rwork, fl_destroy_filter_work)
tcf_queue_work
tcf_queue_work
&fold->rwork
fold->rwork
fold
fold
rwork
fl_destroy_filter_work
fl_destroy_filter_work
{		list_add_tail_rcu(&fnew->list, &fnew->mask->filters);	}
list_add_tail_rcu(&fnew->list, &fnew->mask->filters);
list_add_tail_rcu(&fnew->list, &fnew->mask->filters)
list_add_tail_rcu
list_add_tail_rcu
&fnew->list
fnew->list
fnew
fnew
list
&fnew->mask->filters
fnew->mask->filters
fnew->mask
fnew
fnew
mask
filters
kfree(tb);
kfree(tb)
kfree
kfree
tb
tb
kfree(mask);
kfree(mask)
kfree
kfree
mask
mask
return 0;
0
errout_mask:	fl_mask_put(head, fnew->mask, false);
errout_mask
fl_mask_put(head, fnew->mask, false);
fl_mask_put(head, fnew->mask, false)
fl_mask_put
fl_mask_put
head
head
fnew->mask
fnew
fnew
mask
false
errout_idr:	if (!fold)		idr_remove(&head->handle_idr, fnew->handle);
errout_idr
if (!fold)		idr_remove(&head->handle_idr, fnew->handle);
!fold
fold
fold
idr_remove(&head->handle_idr, fnew->handle);
idr_remove(&head->handle_idr, fnew->handle)
idr_remove
idr_remove
&head->handle_idr
head->handle_idr
head
head
handle_idr
fnew->handle
fnew
fnew
handle
errout:	tcf_exts_destroy(&fnew->exts);
errout
tcf_exts_destroy(&fnew->exts);
tcf_exts_destroy(&fnew->exts)
tcf_exts_destroy
tcf_exts_destroy
&fnew->exts
fnew->exts
fnew
fnew
exts
kfree(fnew);
kfree(fnew)
kfree
kfree
fnew
fnew
errout_tb:	kfree(tb);
errout_tb
kfree(tb);
kfree(tb)
kfree
kfree
tb
tb
errout_mask_alloc:	kfree(mask);
errout_mask_alloc
kfree(mask);
kfree(mask)
kfree
kfree
mask
mask
return err;
err
err
-----joern-----
(241,228,0)
(327,111,0)
(83,116,0)
(74,152,0)
(391,208,0)
(226,264,0)
(120,255,0)
(248,357,0)
(385,255,0)
(44,202,0)
(135,264,0)
(339,70,0)
(40,267,0)
(184,60,0)
(34,103,0)
(385,327,0)
(197,145,0)
(204,249,0)
(234,120,0)
(304,44,0)
(350,202,0)
(37,126,0)
(276,272,0)
(276,260,0)
(167,202,0)
(60,184,0)
(61,114,0)
(106,210,0)
(362,344,0)
(137,44,0)
(87,219,0)
(161,152,0)
(49,261,0)
(268,152,0)
(276,68,0)
(286,44,0)
(18,288,0)
(180,322,0)
(194,39,0)
(206,288,0)
(22,53,0)
(54,309,0)
(290,8,0)
(361,288,0)
(164,287,0)
(166,67,0)
(254,339,0)
(354,255,0)
(199,135,0)
(52,185,0)
(258,322,0)
(151,47,0)
(8,339,0)
(400,322,0)
(332,183,0)
(331,157,0)
(172,404,0)
(99,215,0)
(153,150,0)
(295,229,0)
(377,175,0)
(411,351,0)
(0,44,0)
(116,287,0)
(122,382,0)
(264,152,0)
(299,161,0)
(88,227,0)
(150,327,0)
(276,324,0)
(364,152,0)
(334,308,0)
(84,152,0)
(162,152,0)
(99,177,0)
(25,165,0)
(20,226,0)
(222,169,0)
(273,168,0)
(174,152,0)
(129,142,0)
(392,388,0)
(247,255,0)
(149,354,0)
(68,259,0)
(12,80,0)
(181,96,0)
(356,185,0)
(355,412,0)
(274,195,0)
(157,161,0)
(359,191,0)
(322,255,0)
(360,32,0)
(363,8,0)
(127,283,0)
(71,279,0)
(413,309,0)
(319,70,0)
(255,33,0)
(78,99,0)
(307,44,0)
(375,30,0)
(325,120,0)
(243,76,0)
(276,404,0)
(351,411,0)
(334,227,0)
(212,340,0)
(293,295,0)
(35,347,0)
(354,209,0)
(267,264,0)
(388,392,0)
(246,264,0)
(404,152,0)
(86,167,0)
(142,327,0)
(44,255,0)
(244,31,0)
(13,152,0)
(312,241,0)
(130,152,0)
(37,128,0)
(98,164,0)
(7,152,0)
(247,85,0)
(175,264,0)
(188,259,0)
(39,194,0)
(31,244,0)
(367,215,0)
(324,405,0)
(394,369,0)
(341,202,0)
(194,341,0)
(278,99,0)
(186,126,0)
(285,362,0)
(61,255,0)
(387,19,0)
(409,287,0)
(202,152,0)
(165,67,0)
(392,162,0)
(96,255,0)
(269,70,0)
(136,185,0)
(94,23,0)
(169,327,0)
(96,204,0)
(289,338,0)
(357,287,0)
(58,229,0)
(233,226,0)
(339,8,0)
(70,229,0)
(331,169,0)
(66,398,0)
(110,398,0)
(32,225,0)
(228,241,0)
(249,183,0)
(44,43,0)
(209,354,0)
(288,152,0)
(44,41,0)
(44,391,0)
(15,19,0)
(159,226,0)
(347,288,0)
(60,328,0)
(44,260,0)
(394,47,0)
(340,20,0)
(267,128,0)
(93,152,0)
(335,135,0)
(198,152,0)
(403,182,0)
(191,264,0)
(150,255,0)
(54,183,0)
(322,180,0)
(156,32,0)
(94,404,0)
(297,388,0)
(237,252,0)
(79,332,0)
(380,18,0)
(37,335,0)
(107,61,0)
(252,288,0)
(185,52,0)
(165,25,0)
(270,255,0)
(400,255,0)
(344,362,0)
(28,74,0)
(188,229,0)
(23,30,0)
(185,183,0)
(58,188,0)
(70,319,0)
(183,152,0)
(42,338,0)
(193,228,0)
(244,407,0)
(276,177,0)
(72,4,0)
(134,321,0)
(300,52,0)
(23,94,0)
(32,156,0)
(76,243,0)
(63,44,0)
(97,53,0)
(112,215,0)
(402,191,0)
(339,229,0)
(294,44,0)
(2,177,0)
(33,255,0)
(70,339,0)
(182,116,0)
(80,243,0)
(408,247,0)
(324,310,0)
(30,23,0)
(368,246,0)
(241,202,0)
(372,96,0)
(155,302,0)
(142,251,0)
(221,121,0)
(27,255,0)
(331,398,0)
(203,101,0)
(102,249,0)
(138,252,0)
(124,255,0)
(125,60,0)
(182,410,0)
(82,387,0)
(30,255,0)
(374,357,0)
(343,145,0)
(255,152,0)
(51,96,0)
(100,264,0)
(73,169,0)
(264,88,0)
(275,277,0)
(240,94,0)
(80,264,0)
(164,0,0)
(170,135,0)
(48,152,0)
(156,270,0)
(192,282,0)
(238,302,0)
(241,264,0)
(314,241,0)
(47,394,0)
(220,385,0)
(115,188,0)
(355,385,0)
(14,152,0)
(341,194,0)
(309,54,0)
(45,44,0)
(276,108,0)
(214,108,0)
(113,99,0)
(161,229,0)
(184,366,0)
(88,264,0)
(277,238,0)
(158,189,0)
(398,255,0)
(358,152,0)
(298,382,0)
(256,195,0)
(8,264,0)
(398,73,0)
(260,152,0)
(120,328,0)
(399,400,0)
(1,101,0)
(139,206,0)
(141,249,0)
(114,61,0)
(257,175,0)
(282,31,0)
(32,360,0)
(175,186,0)
(117,288,0)
(309,287,0)
(305,42,0)
(132,152,0)
(407,244,0)
(357,264,0)
(92,164,0)
(116,182,0)
(308,152,0)
(335,37,0)
(19,387,0)
(69,152,0)
(116,43,0)
(336,117,0)
(289,276,0)
(33,34,0)
(272,342,0)
(322,225,0)
(19,125,0)
(270,156,0)
(68,96,0)
(95,103,0)
(53,22,0)
(101,264,0)
(109,116,0)
(236,90,0)
(96,58,0)
(108,210,0)
(365,152,0)
(306,169,0)
(331,334,0)
(85,114,0)
(407,161,0)
(276,182,0)
(327,219,0)
(126,37,0)
(142,255,0)
(146,188,0)
(276,283,0)
(344,91,0)
(337,385,0)
(205,191,0)
(272,302,0)
(266,369,0)
(144,152,0)
(9,88,0)
(316,157,0)
(163,157,0)
(118,0,0)
(330,387,0)
(16,389,0)
(204,96,0)
(131,270,0)
(44,287,0)
(44,6,0)
(186,175,0)
(246,411,0)
(384,152,0)
(329,310,0)
(276,152,0)
(183,54,0)
(250,100,0)
(228,152,0)
(308,255,0)
(216,360,0)
(126,186,0)
(171,216,0)
(77,391,0)
(58,96,0)
(191,205,0)
(67,165,0)
(241,183,0)
(409,205,0)
(345,341,0)
(211,260,0)
(178,186,0)
(373,184,0)
(134,150,0)
(252,111,0)
(366,184,0)
(406,22,0)
(362,279,0)
(169,255,0)
(75,152,0)
(17,405,0)
(215,208,0)
(245,332,0)
(263,391,0)
(90,264,0)
(59,116,0)
(328,60,0)
(388,255,0)
(391,44,0)
(382,122,0)
(296,30,0)
(177,152,0)
(187,308,0)
(176,354,0)
(89,382,0)
(251,232,0)
(205,409,0)
(27,152,0)
(75,202,0)
(326,108,0)
(114,85,0)
(62,302,0)
(37,121,0)
(360,216,0)
(44,0,0)
(56,99,0)
(302,229,0)
(0,164,0)
(38,183,0)
(5,324,0)
(226,20,0)
(179,302,0)
(302,272,0)
(281,152,0)
(378,319,0)
(218,388,0)
(289,230,0)
(34,33,0)
(313,241,0)
(381,267,0)
(282,183,0)
(340,225,0)
(302,155,0)
(147,407,0)
(249,204,0)
(242,152,0)
(319,264,0)
(288,362,0)
(396,410,0)
(104,75,0)
(111,327,0)
(216,264,0)
(401,270,0)
(133,152,0)
(128,267,0)
(11,142,0)
(60,125,0)
(409,225,0)
(111,252,0)
(74,60,0)
(108,214,0)
(200,272,0)
(64,68,0)
(302,238,0)
(73,157,0)
(1,85,0)
(333,27,0)
(283,261,0)
(103,34,0)
(371,58,0)
(283,189,0)
(91,344,0)
(382,208,0)
(44,288,0)
(209,25,0)
(370,214,0)
(277,183,0)
(148,80,0)
(238,277,0)
(261,283,0)
(196,4,0)
(157,255,0)
(385,355,0)
(276,74,0)
(85,1,0)
(271,331,0)
(4,255,0)
(25,209,0)
(243,80,0)
(328,120,0)
(322,400,0)
(411,246,0)
(85,247,0)
(135,335,0)
(52,255,0)
(321,134,0)
(46,302,0)
(284,152,0)
(407,255,0)
(3,52,0)
(60,74,0)
(143,279,0)
(366,255,0)
(395,407,0)
(301,61,0)
(347,152,0)
(320,152,0)
(101,1,0)
(232,251,0)
(195,404,0)
(99,288,0)
(10,241,0)
(65,255,0)
(303,94,0)
(96,68,0)
(154,152,0)
(393,44,0)
(213,264,0)
(346,400,0)
(332,180,0)
(162,392,0)
(280,152,0)
(140,216,0)
(185,152,0)
(276,394,0)
(265,247,0)
(168,230,0)
(116,255,0)
(383,246,0)
(26,152,0)
(155,229,0)
(20,340,0)
(173,152,0)
(362,288,0)
(31,282,0)
(206,152,0)
(21,277,0)
(235,353,0)
(150,134,0)
(76,225,0)
(224,357,0)
(119,150,0)
(311,152,0)
(386,334,0)
(260,44,0)
(202,341,0)
(67,4,0)
(276,22,0)
(276,228,0)
(223,152,0)
(279,362,0)
(241,255,0)
(317,335,0)
(50,152,0)
(145,177,0)
(25,262,0)
(412,355,0)
(318,155,0)
(4,67,0)
(289,331,0)
(128,37,0)
(55,282,0)
(331,152,0)
(201,409,0)
(323,124,0)
(404,94,0)
(177,99,0)
(180,332,0)
(251,142,0)
(44,253,0)
(400,161,0)
(125,19,0)
(160,394,0)
(190,309,0)
(161,188,0)
(167,152,0)
(22,353,0)
(352,276,0)
(302,255,0)
(217,366,0)
(387,255,0)
(310,324,0)
(348,73,0)
(389,202,0)
(81,152,0)
(123,33,0)
(215,99,0)
(24,366,0)
(390,18,0)
(374,351,1)
(328,120,1)
(317,135,1)
(276,283,1)
(166,4,1)
(246,264,1)
(226,233,1)
(395,31,1)
(321,134,1)
(341,194,1)
(44,43,1)
(276,74,1)
(277,183,1)
(380,390,1)
(101,203,1)
(35,376,1)
(29,195,1)
(363,269,1)
(276,352,1)
(51,204,1)
(239,321,1)
(249,183,1)
(379,291,1)
(241,202,1)
(248,224,1)
(116,287,1)
(61,301,1)
(25,209,1)
(1,101,1)
(381,126,1)
(79,315,1)
(188,229,1)
(254,8,1)
(276,68,1)
(276,404,1)
(300,3,1)
(100,264,1)
(78,113,1)
(305,389,1)
(361,389,1)
(402,359,1)
(10,193,1)
(276,394,1)
(176,149,1)
(104,347,1)
(224,374,1)
(101,264,1)
(392,388,1)
(44,253,1)
(80,148,1)
(195,256,1)
(267,40,1)
(77,263,1)
(96,58,1)
(263,304,1)
(116,43,1)
(292,100,1)
(141,64,1)
(236,185,1)
(313,10,1)
(344,279,1)
(412,355,1)
(357,287,1)
(234,325,1)
(239,73,1)
(80,264,1)
(99,288,1)
(401,131,1)
(96,204,1)
(187,334,1)
(386,239,1)
(99,215,1)
(389,16,1)
(36,207,1)
(299,157,1)
(31,282,1)
(163,316,1)
(58,229,1)
(304,286,1)
(261,49,1)
(217,24,1)
(226,264,1)
(33,123,1)
(34,103,1)
(310,329,1)
(138,237,1)
(125,19,1)
(277,275,1)
(335,135,1)
(289,338,1)
(383,368,1)
(400,399,1)
(148,12,1)
(355,385,1)
(169,255,1)
(85,114,1)
(257,239,1)
(72,209,1)
(274,404,1)
(267,264,1)
(28,1,1)
(157,255,1)
(252,138,1)
(150,153,1)
(206,288,1)
(222,18,1)
(302,238,1)
(103,95,1)
(162,392,1)
(373,366,1)
(406,319,1)
(238,277,1)
(183,54,1)
(255,33,1)
(346,258,1)
(124,255,1)
(359,201,1)
(294,391,1)
(186,175,1)
(0,164,1)
(161,299,1)
(60,328,1)
(279,143,1)
(147,395,1)
(264,88,1)
(194,39,1)
(65,319,1)
(56,278,1)
(218,349,1)
(362,279,1)
(404,94,1)
(270,255,1)
(256,274,1)
(230,168,1)
(308,255,1)
(319,378,1)
(236,158,1)
(314,312,1)
(212,20,1)
(276,260,1)
(302,46,1)
(302,155,1)
(292,272,1)
(308,187,1)
(218,90,1)
(30,296,1)
(64,188,1)
(117,336,1)
(377,257,1)
(170,128,1)
(286,63,1)
(18,288,1)
(382,89,1)
(270,401,1)
(197,343,1)
(165,67,1)
(289,331,1)
(201,32,1)
(9,213,1)
(366,217,1)
(185,183,1)
(319,70,1)
(316,292,1)
(89,298,1)
(250,295,1)
(27,255,1)
(269,378,1)
(276,272,1)
(168,273,1)
(131,360,1)
(88,227,1)
(200,100,1)
(376,145,1)
(44,6,1)
(340,212,1)
(214,370,1)
(344,91,1)
(389,202,1)
(258,180,1)
(211,412,1)
(199,170,1)
(220,327,1)
(385,337,1)
(372,58,1)
(139,340,1)
(123,34,1)
(382,208,1)
(83,59,1)
(172,124,1)
(20,226,1)
(241,183,1)
(271,167,1)
(307,211,1)
(113,215,1)
(276,108,1)
(128,267,1)
(135,199,1)
(161,188,1)
(302,229,1)
(289,230,1)
(126,186,1)
(73,169,1)
(114,61,1)
(275,21,1)
(334,386,1)
(119,231,1)
(398,66,1)
(408,265,1)
(312,313,1)
(119,232,1)
(283,261,1)
(47,151,1)
(357,264,1)
(122,382,1)
(107,247,1)
(57,105,1)
(136,379,1)
(195,404,1)
(309,413,1)
(409,205,1)
(35,106,1)
(58,371,1)
(124,323,1)
(23,30,1)
(288,362,1)
(339,254,1)
(70,339,1)
(403,232,1)
(44,287,1)
(388,255,1)
(185,356,1)
(386,357,1)
(184,366,1)
(27,333,1)
(276,182,1)
(352,75,1)
(15,387,1)
(155,318,1)
(54,309,1)
(393,307,1)
(231,182,1)
(399,346,1)
(215,367,1)
(335,317,1)
(140,322,1)
(74,60,1)
(203,105,1)
(331,169,1)
(60,125,1)
(215,208,1)
(146,115,1)
(243,80,1)
(260,44,1)
(368,37,1)
(25,165,1)
(326,124,1)
(180,332,1)
(338,42,1)
(211,18,1)
(137,393,1)
(400,255,1)
(356,52,1)
(120,234,1)
(108,214,1)
(86,206,1)
(247,255,1)
(347,288,1)
(134,150,1)
(276,177,1)
(59,403,1)
(116,255,1)
(216,171,1)
(73,157,1)
(97,406,1)
(99,78,1)
(182,116,1)
(169,306,1)
(95,65,1)
(331,398,1)
(136,17,1)
(37,126,1)
(339,8,1)
(295,229,1)
(296,375,1)
(158,283,1)
(150,255,1)
(272,302,1)
(354,176,1)
(331,157,1)
(178,175,1)
(407,255,1)
(98,294,1)
(348,398,1)
(67,4,1)
(164,92,1)
(241,314,1)
(139,25,1)
(339,229,1)
(362,285,1)
(289,276,1)
(4,255,1)
(332,183,1)
(322,180,1)
(349,292,1)
(44,45,1)
(129,11,1)
(5,1,1)
(303,240,1)
(40,381,1)
(44,255,1)
(336,288,1)
(331,271,1)
(351,411,1)
(204,249,1)
(70,269,1)
(145,197,1)
(145,177,1)
(106,108,1)
(244,407,1)
(276,228,1)
(193,207,1)
(44,0,1)
(306,222,1)
(4,196,1)
(293,195,1)
(70,229,1)
(385,255,1)
(8,264,1)
(19,387,1)
(96,255,1)
(194,350,1)
(142,255,1)
(110,321,1)
(136,397,1)
(409,287,1)
(385,327,1)
(55,90,1)
(190,38,1)
(82,28,1)
(142,327,1)
(161,229,1)
(332,245,1)
(73,348,1)
(407,147,1)
(191,402,1)
(44,288,1)
(347,35,1)
(196,72,1)
(276,324,1)
(391,208,1)
(309,287,1)
(266,394,1)
(247,408,1)
(18,380,1)
(236,57,1)
(0,118,1)
(157,163,1)
(319,264,1)
(340,20,1)
(8,290,1)
(94,23,1)
(354,255,1)
(90,264,1)
(177,99,1)
(411,246,1)
(387,330,1)
(153,119,1)
(371,51,1)
(245,79,1)
(400,161,1)
(240,23,1)
(216,264,1)
(341,345,1)
(291,74,1)
(150,327,1)
(192,55,1)
(246,383,1)
(325,125,1)
(327,111,1)
(111,252,1)
(181,372,1)
(333,162,1)
(184,373,1)
(302,255,1)
(45,0,1)
(127,412,1)
(2,117,1)
(301,107,1)
(22,53,1)
(46,179,1)
(44,202,1)
(151,160,1)
(142,129,1)
(35,27,1)
(12,409,1)
(32,156,1)
(167,86,1)
(235,22,1)
(350,122,1)
(397,231,1)
(179,155,1)
(149,315,1)
(244,31,1)
(366,255,1)
(52,300,1)
(241,264,1)
(206,139,1)
(60,184,1)
(135,264,1)
(207,260,1)
(251,142,1)
(276,22,1)
(17,324,1)
(205,191,1)
(19,15,1)
(67,166,1)
(32,360,1)
(164,287,1)
(167,202,1)
(407,161,1)
(228,241,1)
(322,400,1)
(85,247,1)
(16,202,1)
(265,101,1)
(109,83,1)
(94,303,1)
(71,361,1)
(68,96,1)
(61,255,1)
(273,122,1)
(292,68,1)
(386,351,1)
(3,136,1)
(120,255,1)
(104,266,1)
(44,41,1)
(33,34,1)
(188,146,1)
(413,190,1)
(367,112,1)
(159,76,1)
(63,137,1)
(330,82,1)
(298,264,1)
(76,243,1)
(37,128,1)
(388,297,1)
(75,202,1)
(53,97,1)
(391,77,1)
(35,235,1)
(345,194,1)
(337,220,1)
(1,85,1)
(213,183,1)
(394,47,1)
(233,159,1)
(236,36,1)
(37,335,1)
(318,62,1)
(357,248,1)
(249,102,1)
(218,29,1)
(116,109,1)
(323,255,1)
(49,127,1)
(324,310,1)
(100,250,1)
(278,2,1)
(105,228,1)
(202,341,1)
(75,104,1)
(21,200,1)
(241,255,1)
(252,288,1)
(92,98,1)
(290,363,1)
(30,255,1)
(42,305,1)
(102,141,1)
(156,270,1)
(186,178,1)
(375,172,1)
(11,291,1)
(171,140,1)
(232,251,1)
(155,229,1)
(58,188,1)
(175,377,1)
(360,216,1)
(209,354,1)
(297,218,1)
(370,326,1)
(334,227,1)
(329,5,1)
(282,183,1)
(175,264,1)
(331,334,1)
(282,192,1)
(24,328,1)
(191,264,1)
(343,177,1)
(96,181,1)
(90,236,1)
(378,145,1)
(387,255,1)
(285,344,1)
(118,164,1)
(218,244,1)
(295,293,1)
(62,238,1)
(44,391,1)
(398,255,1)
(52,255,1)
(185,52,1)
(115,295,1)
(390,161,1)
(66,110,1)
(88,9,1)
(322,255,1)
(117,288,1)
(160,117,1)
(112,56,1)
(237,169,1)
(143,71,1)
(362,344,1)
(315,308,1)
(3,291,2)
(25,315,2)
(20,226,2)
(204,249,2)
(151,117,2)
(237,18,2)
(276,182,2)
(142,327,2)
(333,292,2)
(35,231,2)
(27,412,2)
(322,180,2)
(385,255,2)
(403,232,2)
(27,105,2)
(276,117,2)
(75,202,2)
(85,101,2)
(11,291,2)
(92,412,2)
(381,239,2)
(285,389,2)
(340,315,2)
(282,183,2)
(326,124,2)
(205,191,2)
(271,232,2)
(331,231,2)
(359,315,2)
(135,264,2)
(222,18,2)
(271,231,2)
(157,292,2)
(4,255,2)
(25,165,2)
(185,231,2)
(312,207,2)
(249,295,2)
(274,124,2)
(201,315,2)
(143,389,2)
(307,412,2)
(290,269,2)
(251,142,2)
(266,117,2)
(182,232,2)
(31,90,2)
(255,33,2)
(329,1,2)
(406,319,2)
(397,231,2)
(238,100,2)
(101,264,2)
(297,231,2)
(194,39,2)
(54,309,2)
(331,334,2)
(185,1,2)
(215,117,2)
(332,183,2)
(276,74,2)
(96,58,2)
(211,18,2)
(79,315,2)
(245,315,2)
(74,60,2)
(346,315,2)
(75,145,2)
(241,202,2)
(276,260,2)
(412,18,2)
(44,391,2)
(76,315,2)
(44,202,2)
(156,315,2)
(104,145,2)
(46,100,2)
(352,124,2)
(244,31,2)
(162,392,2)
(392,412,2)
(131,315,2)
(104,124,2)
(167,202,2)
(155,100,2)
(25,209,2)
(257,239,2)
(75,412,2)
(309,287,2)
(382,208,2)
(288,389,2)
(138,18,2)
(203,105,2)
(355,18,2)
(392,105,2)
(276,207,2)
(331,169,2)
(185,183,2)
(341,122,2)
(344,389,2)
(248,351,2)
(52,291,2)
(106,124,2)
(44,0,2)
(33,319,2)
(386,231,2)
(338,389,2)
(357,287,2)
(161,188,2)
(220,18,2)
(278,117,2)
(255,319,2)
(297,292,2)
(393,412,2)
(297,195,2)
(308,255,2)
(218,1,2)
(387,255,2)
(24,1,2)
(347,292,2)
(264,88,2)
(241,183,2)
(147,90,2)
(409,287,2)
(100,295,2)
(304,412,2)
(104,117,2)
(289,331,2)
(58,229,2)
(141,295,2)
(347,412,2)
(352,292,2)
(164,18,2)
(347,207,2)
(70,339,2)
(235,319,2)
(336,389,2)
(12,315,2)
(392,207,2)
(334,227,2)
(55,90,2)
(162,291,2)
(302,155,2)
(111,252,2)
(102,295,2)
(75,124,2)
(60,184,2)
(3,1,2)
(125,1,2)
(276,195,2)
(399,315,2)
(78,117,2)
(192,90,2)
(308,232,2)
(366,1,2)
(218,292,2)
(96,204,2)
(27,255,2)
(283,261,2)
(98,412,2)
(172,124,2)
(90,291,2)
(37,128,2)
(75,319,2)
(153,232,2)
(347,1,2)
(162,1,2)
(166,315,2)
(392,1,2)
(185,291,2)
(90,105,2)
(352,207,2)
(276,412,2)
(32,156,2)
(51,295,2)
(120,255,2)
(347,105,2)
(118,412,2)
(327,18,2)
(362,279,2)
(318,100,2)
(241,264,2)
(302,255,2)
(335,239,2)
(236,412,2)
(310,1,2)
(236,231,2)
(294,18,2)
(407,255,2)
(388,291,2)
(241,255,2)
(218,231,2)
(321,232,2)
(4,315,2)
(296,124,2)
(136,1,2)
(103,319,2)
(347,145,2)
(18,292,2)
(0,412,2)
(100,264,2)
(169,255,2)
(44,255,2)
(16,122,2)
(330,1,2)
(195,124,2)
(331,232,2)
(113,117,2)
(60,1,2)
(37,239,2)
(83,232,2)
(388,1,2)
(404,94,2)
(107,101,2)
(180,332,2)
(186,175,2)
(165,315,2)
(162,412,2)
(44,253,2)
(246,264,2)
(233,315,2)
(297,105,2)
(347,291,2)
(332,315,2)
(362,389,2)
(30,255,2)
(61,255,2)
(356,231,2)
(158,412,2)
(322,400,2)
(239,231,2)
(52,255,2)
(150,327,2)
(162,105,2)
(185,52,2)
(150,232,2)
(127,412,2)
(159,315,2)
(301,101,2)
(183,54,2)
(167,231,2)
(355,385,2)
(29,195,2)
(392,195,2)
(44,287,2)
(0,18,2)
(212,315,2)
(295,195,2)
(75,105,2)
(104,231,2)
(252,288,2)
(333,291,2)
(90,231,2)
(260,44,2)
(181,295,2)
(44,412,2)
(228,207,2)
(179,100,2)
(116,43,2)
(44,288,2)
(362,344,2)
(398,255,2)
(398,321,2)
(104,195,2)
(114,101,2)
(297,291,2)
(400,255,2)
(376,145,2)
(169,18,2)
(236,105,2)
(62,100,2)
(96,295,2)
(134,150,2)
(300,1,2)
(252,18,2)
(260,18,2)
(122,382,2)
(407,90,2)
(76,243,2)
(35,124,2)
(75,117,2)
(375,124,2)
(123,319,2)
(86,232,2)
(206,288,2)
(244,407,2)
(267,239,2)
(404,124,2)
(27,195,2)
(374,351,2)
(146,295,2)
(75,231,2)
(402,315,2)
(283,412,2)
(270,315,2)
(187,231,2)
(142,255,2)
(45,18,2)
(35,319,2)
(47,117,2)
(263,18,2)
(393,18,2)
(73,157,2)
(387,1,2)
(23,30,2)
(276,404,2)
(67,315,2)
(157,255,2)
(44,43,2)
(90,207,2)
(112,117,2)
(331,157,2)
(177,117,2)
(236,1,2)
(348,321,2)
(94,124,2)
(265,101,2)
(241,207,2)
(188,295,2)
(347,195,2)
(27,292,2)
(124,319,2)
(53,319,2)
(226,315,2)
(230,122,2)
(379,291,2)
(65,319,2)
(352,117,2)
(104,105,2)
(308,231,2)
(164,412,2)
(282,90,2)
(134,232,2)
(328,120,2)
(35,105,2)
(162,195,2)
(388,255,2)
(156,270,2)
(128,239,2)
(82,1,2)
(293,195,2)
(200,100,2)
(294,412,2)
(236,291,2)
(116,287,2)
(334,232,2)
(49,412,2)
(19,387,2)
(104,412,2)
(167,232,2)
(409,205,2)
(8,269,2)
(136,291,2)
(71,389,2)
(260,412,2)
(240,124,2)
(207,18,2)
(352,105,2)
(42,389,2)
(347,319,2)
(35,145,2)
(352,291,2)
(162,231,2)
(350,122,2)
(160,117,2)
(389,202,2)
(199,239,2)
(315,231,2)
(73,321,2)
(291,1,2)
(70,229,2)
(31,282,2)
(349,292,2)
(58,188,2)
(226,264,2)
(145,117,2)
(388,231,2)
(186,239,2)
(99,117,2)
(372,295,2)
(302,229,2)
(272,302,2)
(40,239,2)
(286,412,2)
(59,232,2)
(276,105,2)
(176,315,2)
(279,389,2)
(117,288,2)
(90,412,2)
(352,319,2)
(44,18,2)
(217,1,2)
(193,207,2)
(215,208,2)
(363,269,2)
(175,239,2)
(354,315,2)
(139,232,2)
(20,315,2)
(218,412,2)
(116,255,2)
(333,195,2)
(44,41,2)
(335,135,2)
(104,319,2)
(276,324,2)
(33,34,2)
(108,124,2)
(3,231,2)
(319,70,2)
(273,122,2)
(322,255,2)
(295,229,2)
(232,291,2)
(170,239,2)
(8,264,2)
(74,1,2)
(165,67,2)
(10,207,2)
(315,232,2)
(371,295,2)
(319,264,2)
(119,231,2)
(61,101,2)
(297,1,2)
(297,412,2)
(408,101,2)
(32,360,2)
(90,1,2)
(243,315,2)
(243,80,2)
(135,239,2)
(368,239,2)
(80,315,2)
(1,85,2)
(400,161,2)
(21,100,2)
(80,264,2)
(352,231,2)
(340,20,2)
(344,91,2)
(28,1,2)
(276,394,2)
(77,412,2)
(90,264,2)
(314,207,2)
(96,255,2)
(276,272,2)
(1,105,2)
(108,214,2)
(180,315,2)
(321,231,2)
(35,195,2)
(337,18,2)
(187,232,2)
(52,1,2)
(218,105,2)
(388,412,2)
(63,412,2)
(388,195,2)
(57,105,2)
(45,412,2)
(231,232,2)
(370,124,2)
(224,351,2)
(246,239,2)
(171,315,2)
(70,378,2)
(116,232,2)
(99,215,2)
(357,264,2)
(56,117,2)
(214,124,2)
(114,61,2)
(389,122,2)
(85,114,2)
(250,295,2)
(323,319,2)
(110,321,2)
(339,8,2)
(361,389,2)
(109,232,2)
(352,145,2)
(63,18,2)
(261,412,2)
(23,124,2)
(238,277,2)
(2,117,2)
(60,328,2)
(134,231,2)
(218,291,2)
(126,239,2)
(395,90,2)
(299,292,2)
(73,169,2)
(316,292,2)
(341,194,2)
(68,295,2)
(272,100,2)
(254,269,2)
(249,183,2)
(366,255,2)
(19,1,2)
(392,231,2)
(352,1,2)
(339,269,2)
(388,207,2)
(289,338,2)
(153,231,2)
(289,230,2)
(64,295,2)
(137,18,2)
(392,388,2)
(155,229,2)
(277,100,2)
(256,124,2)
(196,315,2)
(307,18,2)
(216,264,2)
(386,232,2)
(15,1,2)
(66,321,2)
(119,232,2)
(347,124,2)
(347,288,2)
(286,18,2)
(270,255,2)
(401,315,2)
(236,207,2)
(195,404,2)
(234,1,2)
(269,378,2)
(400,315,2)
(206,232,2)
(378,145,2)
(124,255,2)
(175,264,2)
(263,412,2)
(304,18,2)
(97,319,2)
(276,228,2)
(288,362,2)
(139,231,2)
(37,335,2)
(27,291,2)
(289,276,2)
(394,117,2)
(202,341,2)
(267,264,2)
(391,18,2)
(411,239,2)
(228,241,2)
(352,412,2)
(137,412,2)
(77,18,2)
(388,105,2)
(394,47,2)
(300,291,2)
(162,207,2)
(244,90,2)
(162,292,2)
(34,319,2)
(92,18,2)
(177,99,2)
(85,247,2)
(17,1,2)
(136,231,2)
(292,195,2)
(324,310,2)
(302,238,2)
(75,291,2)
(163,292,2)
(37,126,2)
(276,108,2)
(319,145,2)
(68,96,2)
(345,122,2)
(412,355,2)
(333,412,2)
(333,207,2)
(277,183,2)
(385,327,2)
(191,315,2)
(182,116,2)
(104,1,2)
(411,246,2)
(27,1,2)
(300,231,2)
(317,239,2)
(98,18,2)
(58,295,2)
(276,124,2)
(325,1,2)
(324,1,2)
(211,412,2)
(321,134,2)
(207,412,2)
(276,319,2)
(232,251,2)
(202,122,2)
(409,315,2)
(357,351,2)
(306,18,2)
(145,177,2)
(377,239,2)
(343,117,2)
(125,19,2)
(333,105,2)
(339,229,2)
(276,177,2)
(104,207,2)
(150,255,2)
(149,315,2)
(184,366,2)
(276,22,2)
(356,1,2)
(360,315,2)
(331,398,2)
(276,292,2)
(5,1,2)
(251,291,2)
(258,315,2)
(142,291,2)
(373,1,2)
(75,292,2)
(352,195,2)
(328,1,2)
(276,291,2)
(35,207,2)
(360,216,2)
(22,53,2)
(178,239,2)
(99,288,2)
(276,1,2)
(161,292,2)
(118,18,2)
(191,264,2)
(52,231,2)
(333,1,2)
(111,18,2)
(305,389,2)
(35,292,2)
(313,207,2)
(334,231,2)
(35,1,2)
(388,292,2)
(129,291,2)
(18,288,2)
(385,18,2)
(239,232,2)
(34,103,2)
(30,124,2)
(354,255,2)
(209,315,2)
(0,164,2)
(35,291,2)
(86,231,2)
(383,239,2)
(197,117,2)
(75,195,2)
(327,111,2)
(148,315,2)
(392,292,2)
(128,267,2)
(276,68,2)
(164,287,2)
(22,319,2)
(117,389,2)
(247,255,2)
(75,1,2)
(351,411,2)
(120,1,2)
(322,315,2)
(95,319,2)
(67,4,2)
(392,291,2)
(218,195,2)
(391,208,2)
(105,207,2)
(161,229,2)
(407,161,2)
(333,231,2)
(140,315,2)
(247,101,2)
(276,231,2)
(60,125,2)
(104,292,2)
(72,315,2)
(347,231,2)
(27,231,2)
(276,283,2)
(94,23,2)
(206,231,2)
(184,1,2)
(204,295,2)
(32,315,2)
(194,122,2)
(1,101,2)
(126,186,2)
(218,207,2)
(276,145,2)
(115,295,2)
(168,122,2)
(275,100,2)
(390,292,2)
(380,292,2)
(150,231,2)
(101,105,2)
(297,207,2)
(302,100,2)
(209,354,2)
(367,117,2)
(35,412,2)
(44,6,2)
(205,315,2)
(75,207,2)
(104,291,2)
(351,239,2)
(303,124,2)
(88,227,2)
(188,229,2)
(356,291,2)
(216,315,2)
(391,412,2)
(27,207,2)
(36,207,2)
-----------------------------------
(0,tp->chain->tmplt_priv)
(1,!fold && fl_lookup(fnew->mask, &fnew->mkey)
(2,err)
(3,fnew)
(4,fnew->mask)
(5,err)
(6,bool ovr)
(7,errout_idr:)
(8,fold->handle)
(9,arg)
(10,head)
(11,fnew)
(12,fold)
(13,tb)
(14,if (!fold)
(15,ht)
(16,mask)
(17,goto errout_mask;)
(18,tb[TCA_FLOWER_FLAGS])
(19,fnew->mask->ht)
(20,&fold->rwork)
(21,head)
(22,err = -EINVAL)
(23,&fnew->exts)
(24,fnew)
(25,list_add_tail_rcu(&fnew->list, &fnew->mask->filters)
(26,if (err)
(27,kfree(fnew)
(28,err)
(29,goto errout;)
(30,fnew->exts)
(31,&head->handle_idr)
(32,list_replace_rcu(&fold->list, &fnew->list)
(33,kzalloc(sizeof(*fnew)
(34,sizeof(*fnew)
(35,tb)
(36,goto errout_idr;)
(37,rhashtable_remove_fast(&fold->mask->ht,\n\\n\\t\\t\\t\\t       &fold->ht_node,\n\\n\\t\\t\\t\\t       fold->mask->filter_ht_params)
(38,head)
(39,struct fl_flow_mask)
(40,ht_node)
(41,struct net *net)
(42,-ENOBUFS)
(43,struct netlink_ext_ack *extack)
(44,fl_set_parms(net, tp, fnew, mask, base, tb, tca[TCA_RATE], ovr,\n\\n\\t\\t\\t   tp->chain->tmplt_priv, extack)
(45,extack)
(46,GFP_KERNEL)
(47,-ENOBUFS)
(48,err)
(49,EINVAL)
(50,if (!tc_skip_hw(fnew->flags)
(51,fnew)
(52,fnew->mask)
(53,-EINVAL)
(54,rtnl_dereference(tp->root)
(55,head)
(56,TCA_FLOWER_MAX)
(57,goto errout_idr;)
(58,&handle)
(59,tp)
(60,rhashtable_insert_fast(&fnew->mask->ht, &fnew->ht_node,\n\\n\\t\\t\\t\\t     fnew->mask->filter_ht_params)
(61,fnew->mkey)
(62,fnew)
(63,mask)
(64,err)
(65,fnew)
(66,flags)
(67,fnew->mask->filters)
(68,err = idr_alloc_u32(&head->handle_idr, fnew, &handle,\n\\n\\t\\t\\t\\t    INT_MAX, GFP_KERNEL)
(69,fnew)
(70,handle && fold->handle != handle)
(71,TCA_FLOWER_MAX)
(72,fnew)
(73,fnew->flags |= TCA_CLS_FLAGS_NOT_IN_HW)
(74,err = rhashtable_insert_fast(&fnew->mask->ht, &fnew->ht_node,\n\\n\\t\\t\\t\\t     fnew->mask->filter_ht_params)
(75,kfree(mask)
(76,tcf_exts_get_net(&fold->exts)
(77,TCA_RATE)
(78,NULL)
(79,head)
(80,fold->exts)
(81,if (fold)
(82,fnew)
(83,fnew)
(84,if (err)
(85,fl_lookup(fnew->mask, &fnew->mkey)
(86,mask)
(87,if (!tc_flags_valid(fnew->flags)
(88,*arg)
(89,TCA_OPTIONS)
(90,!fold)
(91,struct nlattr *)
(92,chain)
(93,head)
(94,tcf_exts_init(&fnew->exts, TCA_FLOWER_ACT, 0)
(95,fnew)
(96,idr_alloc_u32(&head->handle_idr, fnew, &handle,\n\\n\\t\\t\\t\\t    INT_MAX, GFP_KERNEL)
(97,EINVAL)
(98,tp)
(99,nla_parse_nested(tb, TCA_FLOWER_MAX, tca[TCA_OPTIONS],\n\\n\\t\\t\\t       fl_policy, NULL)
(100,!fold)
(101,!fold)
(102,handle_idr)
(103,*fnew)
(104,mask)
(105,err)
(106,goto errout_tb;)
(107,fnew)
(108,err = -ENOBUFS)
(109,extack)
(110,fnew)
(111,nla_get_u32(tb[TCA_FLOWER_FLAGS])
(112,tca)
(113,fl_policy)
(114,&fnew->mkey)
(115,handle)
(116,fl_hw_replace_filter(tp, fnew, extack)
(117,!tb)
(118,tmplt_priv)
(119,fnew)
(120,fnew->ht_node)
(121,)
(122,!tca[TCA_OPTIONS])
(123,GFP_KERNEL)
(124,!fnew)
(125,&fnew->mask->ht)
(126,&fold->mask->ht)
(127,err)
(128,&fold->ht_node)
(129,flags)
(130,if (tb[TCA_FLOWER_FLAGS])
(131,fnew)
(132,errout_mask:)
(133,if (fold)
(134,tc_in_hw(fnew->flags)
(135,fold->mask)
(136,head)
(137,fnew)
(138,TCA_FLOWER_FLAGS)
(139,tb)
(140,fold)
(141,head)
(142,fnew->flags)
(143,1)
(144,errout_tb:)
(145,err < 0)
(146,1)
(147,handle)
(148,exts)
(149,fnew)
(150,fnew->flags)
(151,ENOBUFS)
(152,)
(153,flags)
(154,if (!mask)
(155,&handle)
(156,&fnew->list)
(157,fnew->handle)
(158,goto errout_idr;)
(159,fold)
(160,err)
(161,fnew->handle = handle)
(162,tcf_exts_destroy(&fnew->exts)
(163,handle)
(164,tp->chain)
(165,&fnew->mask->filters)
(166,filters)
(167,kfree(mask)
(168,-EINVAL)
(169,fnew->flags)
(170,fold)
(171,list)
(172,err)
(173,if (fold && handle && fold->handle != handle)
(174,if (err < 0)
(175,fold->mask)
(176,list)
(177,err = nla_parse_nested(tb, TCA_FLOWER_MAX, tca[TCA_OPTIONS],\n\\n\\t\\t\\t       fl_policy, NULL)
(178,ht)
(179,handle)
(180,&head->handle_idr)
(181,GFP_KERNEL)
(182,err = fl_hw_replace_filter(tp, fnew, extack)
(183,*head = rtnl_dereference(tp->root)
(184,fnew->mask->filter_ht_params)
(185,fl_mask_put(head, fnew->mask, false)
(186,fold->mask->ht)
(187,fnew)
(188,handle = 1)
(189,)
(190,tp)
(191,fold->res)
(192,handle_idr)
(193,err)
(194,sizeof(struct fl_flow_mask)
(195,err < 0)
(196,mask)
(197,0)
(198,if (!tb)
(199,mask)
(200,err)
(201,tp)
(202,mask = kzalloc(sizeof(struct fl_flow_mask)
(203,fold)
(204,&head->handle_idr)
(205,&fold->res)
(206,kfree(tb)
(207,err)
(208,struct nlattr **tca)
(209,&fnew->list)
(210,)
(211,err)
(212,fl_destroy_filter_work)
(213,fold)
(214,-ENOBUFS)
(215,tca[TCA_OPTIONS])
(216,fold->list)
(217,mask)
(218,fnew)
(219,)
(220,fnew)
(221,if (!tc_skip_hw(fold->flags)
(222,fnew)
(223,if (err)
(224,fold)
(225,)
(226,fold->rwork)
(227,void **arg)
(228,err = fl_check_assign_mask(head, fnew, fold, mask)
(229,u32 handle)
(230,return -EINVAL;)
(231,err)
(232,!tc_skip_hw(fnew->flags)
(233,rwork)
(234,ht_node)
(235,goto errout_tb;)
(236,fold)
(237,tb)
(238,&head->handle_idr)
(239,fold)
(240,TCA_FLOWER_ACT)
(241,fl_check_assign_mask(head, fnew, fold, mask)
(242,if (err < 0)
(243,&fold->exts)
(244,idr_remove(&head->handle_idr, fnew->handle)
(245,handle_idr)
(246,fold->flags)
(247,fnew->mask)
(248,NULL)
(249,head->handle_idr)
(250,fold)
(251,tc_skip_hw(fnew->flags)
(252,tb[TCA_FLOWER_FLAGS])
(253,unsigned long base)
(254,handle)
(255,fnew = kzalloc(sizeof(*fnew)
(256,0)
(257,fold)
(258,fnew)
(259,)
(260,err = fl_set_parms(net, tp, fnew, mask, base, tb, tca[TCA_RATE], ovr,\n\\n\\t\\t\\t   tp->chain->tmplt_priv, extack)
(261,-EINVAL)
(262,)
(263,tca)
(264,*fold = *arg)
(265,fnew)
(266,goto errout_mask_alloc;)
(267,fold->ht_node)
(268,fold)
(269,handle)
(270,fnew->list)
(271,0)
(272,err = idr_alloc_u32(&head->handle_idr, fnew, &handle,\n\\n\\t\\t\\t\\t    handle, GFP_KERNEL)
(273,EINVAL)
(274,err)
(275,handle_idr)
(276,return err;)
(277,head->handle_idr)
(278,tb)
(279,TCA_FLOWER_MAX + 1)
(280,errout:)
(281,mask)
(282,head->handle_idr)
(283,err = -EINVAL)
(284,if (!tc_in_hw(fnew->flags)
(285,GFP_KERNEL)
(286,base)
(287,struct tcf_proto *tp)
(288,tb = kcalloc(TCA_FLOWER_MAX + 1, sizeof(struct nlattr *)
(289,RET)
(290,handle)
(291,err)
(292,err)
(293,handle)
(294,ovr)
(295,!handle)
(296,exts)
(297,exts)
(298,tca)
(299,handle)
(300,mask)
(301,mkey)
(302,idr_alloc_u32(&head->handle_idr, fnew, &handle,\n\\n\\t\\t\\t\\t    handle, GFP_KERNEL)
(303,0)
(304,tb)
(305,ENOBUFS)
(306,flags)
(307,net)
(308,*arg = fnew)
(309,tp->root)
(310,-EEXIST)
(311,if (!fold && fl_lookup(fnew->mask, &fnew->mkey)
(312,fold)
(313,fnew)
(314,mask)
(315,fold)
(316,fnew)
(317,filter_ht_params)
(318,handle)
(319,fold && handle && fold->handle != handle)
(320,if (err)
(321,!tc_in_hw(fnew->flags)
(322,idr_replace(&head->handle_idr, fnew, fnew->handle)
(323,fnew)
(324,err = -EEXIST)
(325,fnew)
(326,err)
(327,fnew->flags = nla_get_u32(tb[TCA_FLOWER_FLAGS])
(328,&fnew->ht_node)
(329,EEXIST)
(330,mask)
(331,return 0;)
(332,head->handle_idr)
(333,fnew)
(334,*arg)
(335,fold->mask->filter_ht_params)
(336,tb)
(337,flags)
(338,return -ENOBUFS;)
(339,fold->handle != handle)
(340,tcf_queue_work(&fold->rwork, fl_destroy_filter_work)
(341,kzalloc(sizeof(struct fl_flow_mask)
(342,)
(343,err)
(344,sizeof(struct nlattr *)
(345,GFP_KERNEL)
(346,fnew)
(347,kfree(tb)
(348,TCA_CLS_FLAGS_NOT_IN_HW)
(349,goto errout;)
(350,mask)
(351,!tc_skip_hw(fold->flags)
(352,err)
(353,)
(354,fnew->list)
(355,tc_flags_valid(fnew->flags)
(356,false)
(357,fl_hw_destroy_filter(tp, fold, NULL)
(358,if (!tca[TCA_OPTIONS])
(359,fold)
(360,&fold->list)
(361,tb)
(362,kcalloc(TCA_FLOWER_MAX + 1, sizeof(struct nlattr *)
(363,fold)
(364,errout_mask_alloc:)
(365,if (!fnew)
(366,fnew->mask)
(367,TCA_OPTIONS)
(368,fold)
(369,)
(370,ENOBUFS)
(371,handle)
(372,INT_MAX)
(373,filter_ht_params)
(374,tp)
(375,fnew)
(376,goto errout_tb;)
(377,mask)
(378,fold)
(379,goto errout_mask;)
(380,TCA_FLOWER_FLAGS)
(381,fold)
(382,tca[TCA_OPTIONS])
(383,flags)
(384,if (!handle)
(385,fnew->flags)
(386,arg)
(387,fnew->mask)
(388,fnew->exts)
(389,!mask)
(390,tb)
(391,tca[TCA_RATE])
(392,&fnew->exts)
(393,tp)
(394,err = -ENOBUFS)
(395,fnew)
(396,if (err)
(397,goto errout_mask;)
(398,fnew->flags)
(399,handle)
(400,fnew->handle)
(401,list)
(402,res)
(403,err)
(404,err = tcf_exts_init(&fnew->exts, TCA_FLOWER_ACT, 0)
(405,)
(406,err)
(407,fnew->handle)
(408,mask)
(409,tcf_unbind_filter(tp, &fold->res)
(410,)
(411,tc_skip_hw(fold->flags)
(412,!tc_flags_valid(fnew->flags)
(413,root)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^