-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
    else
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
37,39
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
49,50
49,51
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
-----nextToken-----
2,4,8,10,14,16,20,25,26,31,32,36,41,43,47,48,53,55,59,60
-----computeFrom-----
12,13
12,14
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* FIX: Use a relatively small number */        count = 20;    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }    else    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B()
goodG2B
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* FIX: Use a relatively small number */        count = 20;    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }    else    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrueOrFalse())    {        /* FIX: Use a relatively small number */        count = 20;    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }    else    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(28,1,0)
(25,1,0)
(12,17,0)
(22,24,0)
(7,24,0)
(1,15,0)
(19,16,0)
(0,22,0)
(13,9,0)
(16,26,0)
(18,24,0)
(5,20,0)
(17,1,0)
(25,4,0)
(9,4,0)
(3,20,0)
(22,0,0)
(17,20,0)
(21,25,0)
(14,22,0)
(17,26,0)
(10,0,0)
(11,1,0)
(25,20,0)
(20,6,0)
(23,24,0)
(10,14,1)
(17,12,1)
(28,11,1)
(25,1,1)
(2,9,1)
(21,27,1)
(8,22,1)
(5,8,1)
(9,13,1)
(11,8,1)
(19,17,1)
(27,20,1)
(25,21,1)
(0,10,1)
(12,27,1)
(3,5,1)
(20,3,1)
(2,16,1)
(13,25,1)
(16,19,1)
(25,20,1)
(22,0,1)
(17,1,1)
(1,28,1)
(27,1,1)
(17,20,1)
(25,20,2)
(3,8,2)
(25,1,2)
(17,27,2)
(13,27,2)
(11,8,2)
(21,27,2)
(1,8,2)
(25,27,2)
(20,8,2)
(17,20,2)
(28,8,2)
(12,27,2)
(16,27,2)
(9,27,2)
(22,0,2)
(17,1,2)
(5,8,2)
(19,27,2)
-----------------------------------
(0,-1)
(1,count = 20)
(2,RET)
(3,20)
(4,)
(5,count)
(6,)
(7,count)
(8,globalReturnsTrueOrFalse()
(9,printLine("Sleep time possibly too long")
(10,1)
(11,count)
(12,count)
(13,"Sleep time possibly too long")
(14,count)
(15,)
(16,printLine("Sleep time possibly too long")
(17,SLEEP(count)
(18,if(globalReturnsTrueOrFalse()
(19,"Sleep time possibly too long")
(20,count = 20)
(21,count)
(22,count = -1)
(23,if(globalReturnsTrueOrFalse()
(24,)
(25,SLEEP(count)
(26,)
(27,globalReturnsTrueOrFalse()
(28,20)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^