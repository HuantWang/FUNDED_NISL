-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(5)
    {
    case 6:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Use a relatively small number */
        count = 20;
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
37,44
38,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
53,54
54,55
54,56
55,56
-----nextToken-----
2,4,8,10,14,16,18,21,25,26,27,28,32,33,34,36,39,43,45,49,50,51,52,56,57,58
-----computeFrom-----
12,13
12,14
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }
5
{    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }
case 6:
6
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
count = 20;
count = 20
count
count
20
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(6,13,0)
(29,4,0)
(10,3,0)
(7,3,0)
(16,9,0)
(18,8,0)
(14,20,0)
(30,0,0)
(4,9,0)
(17,0,0)
(8,0,0)
(8,13,0)
(23,2,0)
(11,9,0)
(25,9,0)
(22,9,0)
(18,9,0)
(13,8,0)
(31,0,0)
(19,9,0)
(20,3,0)
(24,8,0)
(28,16,0)
(2,3,0)
(27,18,0)
(12,3,0)
(5,3,0)
(18,2,0)
(1,2,0)
(21,25,1)
(18,27,1)
(26,8,1)
(8,13,1)
(21,11,1)
(11,16,1)
(18,8,1)
(20,14,1)
(13,6,1)
(2,23,1)
(6,24,1)
(15,12,1)
(5,20,1)
(4,29,1)
(12,2,1)
(1,26,1)
(14,26,1)
(29,15,1)
(15,5,1)
(18,2,1)
(16,28,1)
(23,1,1)
(27,15,1)
(25,4,1)
(28,18,1)
(14,26,2)
(4,15,2)
(27,15,2)
(8,13,2)
(25,15,2)
(23,26,2)
(28,15,2)
(20,26,2)
(2,26,2)
(5,26,2)
(18,2,2)
(16,15,2)
(18,8,2)
(12,26,2)
(18,15,2)
(11,15,2)
(1,26,2)
(29,15,2)
-----------------------------------
(0,)
(1,count)
(2,count = 20)
(3,)
(4,printLine("Benign, fixed string")
(5,break;)
(6,1)
(7,default:)
(8,count = -1)
(9,)
(10,case 6:)
(11,break;)
(12,break;)
(13,-1)
(14,"Benign, fixed string")
(15,7)
(16,printLine("Sleep time possibly too long")
(17,switch(5)
(18,SLEEP(count)
(19,case 7:)
(20,printLine("Benign, fixed string")
(21,RET)
(22,default:)
(23,20)
(24,count)
(25,break;)
(26,5)
(27,count)
(28,"Sleep time possibly too long")
(29,"Benign, fixed string")
(30,switch(7)
(31,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^