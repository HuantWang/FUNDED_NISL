-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_02_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(1)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
40,41
40,42
40,43
41,42
41,43
42,43
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
49,54
50,51
51,52
51,53
52,53
54,55
54,56
55,56
55,57
57,58
59,60
59,61
60,61
62,63
62,64
63,64
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
84,85
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
104,105
104,106
105,106
-----nextToken-----
2,4,9,11,15,16,18,23,25,26,29,31,36,38,39,43,46,48,53,56,58,61,64,67,68,72,74,79,81,85,87,89,93,95,99,101,106,107
-----computeFrom-----
13,14
13,15
41,42
41,43
51,52
51,53
62,63
62,64
70,71
70,72
-----guardedBy-----
48,89
43,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_02_bad(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_02_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_02_bad
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(44,50,0)
(19,28,0)
(21,3,0)
(41,11,0)
(19,49,0)
(26,49,0)
(39,44,0)
(42,28,0)
(29,35,0)
(47,31,0)
(31,47,0)
(11,50,0)
(23,44,0)
(37,25,0)
(46,29,0)
(28,38,0)
(19,2,0)
(10,28,0)
(22,50,0)
(36,21,0)
(40,38,0)
(1,10,0)
(2,47,0)
(7,28,0)
(16,28,0)
(43,18,0)
(49,19,0)
(13,42,0)
(50,47,0)
(42,43,0)
(10,14,0)
(48,14,0)
(35,6,0)
(47,2,0)
(5,25,0)
(20,38,0)
(30,38,0)
(45,43,0)
(0,43,0)
(11,25,0)
(8,25,0)
(24,17,0)
(12,24,0)
(33,5,0)
(8,50,0)
(14,10,0)
(47,50,0)
(35,29,0)
(43,42,0)
(50,25,0)
(9,5,0)
(51,8,0)
(5,50,0)
(15,24,0)
(27,19,0)
(2,19,0)
(42,13,1)
(46,44,1)
(4,28,1)
(10,28,1)
(23,50,1)
(43,42,1)
(5,33,1)
(49,26,1)
(8,50,1)
(27,22,1)
(29,46,1)
(32,4,1)
(14,48,1)
(19,28,1)
(0,4,1)
(5,50,1)
(51,5,1)
(1,32,1)
(42,28,1)
(13,45,1)
(36,10,1)
(45,0,1)
(33,9,1)
(21,36,1)
(34,11,1)
(10,14,1)
(8,51,1)
(2,19,1)
(39,23,1)
(47,31,1)
(26,27,1)
(16,7,1)
(44,50,1)
(34,32,1)
(22,10,1)
(48,1,1)
(50,47,1)
(11,50,1)
(41,8,1)
(32,43,1)
(34,21,1)
(44,39,1)
(47,2,1)
(28,16,1)
(9,44,1)
(19,49,1)
(11,41,1)
(35,29,1)
(9,35,1)
(1,32,2)
(19,28,2)
(10,14,2)
(8,50,2)
(19,10,2)
(14,32,2)
(11,50,2)
(50,10,2)
(11,10,2)
(43,42,2)
(5,10,2)
(45,4,2)
(26,10,2)
(51,10,2)
(42,4,2)
(35,29,2)
(48,32,2)
(10,32,2)
(2,10,2)
(44,50,2)
(43,4,2)
(44,10,2)
(19,49,2)
(41,10,2)
(47,10,2)
(33,10,2)
(21,10,2)
(36,10,2)
(42,28,2)
(46,44,2)
(35,44,2)
(27,10,2)
(23,10,2)
(39,10,2)
(10,28,2)
(47,31,2)
(29,44,2)
(50,47,2)
(22,10,2)
(0,4,2)
(47,2,2)
(8,10,2)
(49,10,2)
(5,50,2)
(13,4,2)
(2,19,2)
(9,10,2)
-----------------------------------
(0,stdin)
(1,data)
(2,malloc(data*sizeof(wchar_t)
(3,)
(4,1)
(5,wcscpy(myString, HELLO_STRING)
(6,)
(7,data)
(8,printWLine(myString)
(9,myString)
(10,data > wcslen(HELLO_STRING)
(11,free(myString)
(12,myString)
(13,data)
(14,wcslen(HELLO_STRING)
(15,if (data > wcslen(HELLO_STRING)
(16,0)
(17,)
(18,)
(19,data*sizeof(wchar_t)
(20,data)
(21,printLine("Input is less than the length of the source string")
(22,myString)
(23,myString)
(24,)
(25,)
(26,wchar_t)
(27,data)
(28,data = 0)
(29,-1)
(30,if(1)
(31,wchar_t *)
(32,1)
(33,HELLO_STRING)
(34,RET)
(35,exit(-1)
(36,"Input is less than the length of the source string")
(37,if (myString == NULL)
(38,)
(39,NULL)
(40,if(1)
(41,myString)
(42,&data)
(43,fscanf(stdin, "%zu", &data)
(44,myString == NULL)
(45,"%zu")
(46,1)
(47,(wchar_t *)
(48,HELLO_STRING)
(49,sizeof(wchar_t)
(50,myString = (wchar_t *)
(51,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^