-----label-----
0
-----code-----
static void good1()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            int * tmpData;
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            tmpData = (int *)realloc(data, (130000)*sizeof(int));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
            }
            free(data);
        }
    }
    else
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            int * tmpData;
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            tmpData = (int *)realloc(data, (130000)*sizeof(int));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
76,79
77,78
79,80
81,82
81,83
82,83
84,85
85,86
85,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
94,96
94,97
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
103,105
104,105
108,109
109,110
109,111
110,111
112,113
112,114
113,114
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
123,126
123,127
123,128
123,129
123,130
123,131
124,125
125,126
125,127
127,128
127,129
127,130
130,131
131,132
131,133
132,133
132,134
134,135
136,137
136,138
137,138
139,140
139,141
141,142
142,143
142,144
145,146
145,147
146,147
146,148
147,148
149,150
151,152
152,153
153,154
153,155
154,155
156,157
158,159
159,160
159,161
161,162
161,163
164,165
165,166
165,167
166,167
166,168
167,168
171,172
172,173
172,174
173,174
175,176
175,177
176,177
179,180
180,181
180,182
181,182
183,184
183,185
184,185
184,186
186,187
188,189
188,190
188,191
189,190
191,192
193,194
193,195
194,195
196,197
197,198
197,199
200,201
200,202
201,202
201,203
202,203
204,205
206,207
206,208
206,209
207,208
208,209
208,210
209,210
211,212
213,214
214,215
214,216
215,216
215,217
216,217
220,221
221,222
221,223
222,223
224,225
224,226
225,226
228,229
229,230
229,231
230,231
232,233
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,43,45,48,50,51,56,57,58,62,65,66,70,73,75,78,80,83,86,87,91,93,98,100,105,106,107,111,114,115,119,121,126,128,129,133,135,138,140,143,144,148,150,155,157,160,162,163,168,169,170,174,177,178,182,185,187,190,192,195,198,199,203,205,210,212,217,218,219,223,226,227,231,233
-----computeFrom-----
27,28
27,29
34,35
34,36
53,54
53,55
68,69
68,70
81,82
81,83
89,90
89,91
96,97
96,98
102,103
102,104
139,140
139,141
146,147
146,148
165,166
165,167
180,181
180,182
193,194
193,195
201,202
201,203
208,209
208,210
214,215
214,216
-----guardedBy-----
91,100
203,212
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(globalReturnsTrueOrFalse())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(globalReturnsTrueOrFalse())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
if(globalReturnsTrueOrFalse())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(68,48,0)
(72,15,0)
(120,48,0)
(101,108,0)
(83,54,0)
(71,81,0)
(6,34,0)
(12,95,0)
(16,6,0)
(52,79,0)
(27,81,0)
(102,50,0)
(79,52,0)
(29,39,0)
(113,97,0)
(65,57,0)
(88,74,0)
(35,81,0)
(74,88,0)
(117,67,0)
(39,40,0)
(19,104,0)
(29,50,0)
(100,10,0)
(15,72,0)
(67,117,0)
(12,17,0)
(48,5,0)
(25,67,0)
(114,76,0)
(33,80,0)
(18,56,0)
(86,33,0)
(82,62,0)
(32,18,0)
(22,98,0)
(23,56,0)
(18,43,0)
(95,12,0)
(114,30,0)
(37,72,0)
(95,72,0)
(85,63,0)
(70,101,0)
(60,0,0)
(8,72,0)
(41,17,0)
(107,72,0)
(3,81,0)
(18,48,0)
(80,33,0)
(0,40,0)
(98,76,0)
(50,29,0)
(87,98,0)
(61,117,0)
(62,33,0)
(91,63,0)
(6,63,0)
(103,18,0)
(28,34,0)
(96,30,0)
(45,23,0)
(31,59,0)
(59,0,0)
(23,48,0)
(15,25,0)
(56,5,0)
(105,43,0)
(107,98,0)
(91,108,0)
(44,80,0)
(46,100,0)
(25,15,0)
(107,17,0)
(51,54,0)
(52,81,0)
(64,17,0)
(49,23,0)
(98,108,0)
(69,22,0)
(36,27,0)
(62,0,0)
(57,43,0)
(47,59,0)
(95,84,0)
(30,114,0)
(11,104,0)
(110,56,0)
(53,17,0)
(118,35,0)
(62,88,0)
(103,5,0)
(35,0,0)
(1,36,0)
(73,95,0)
(48,27,0)
(108,17,0)
(54,84,0)
(24,8,0)
(75,84,0)
(38,36,0)
(88,27,0)
(10,100,0)
(30,97,0)
(94,81,0)
(14,79,0)
(17,42,0)
(112,18,0)
(79,0,0)
(81,21,0)
(84,17,0)
(4,95,0)
(109,77,0)
(67,25,0)
(66,91,0)
(9,101,0)
(19,2,0)
(20,8,0)
(55,67,0)
(78,30,0)
(121,22,0)
(116,57,0)
(30,84,0)
(97,76,0)
(91,66,0)
(63,91,0)
(0,81,0)
(27,88,0)
(63,72,0)
(34,6,0)
(106,29,0)
(90,108,0)
(22,97,0)
(89,79,0)
(18,103,0)
(54,72,0)
(39,29,0)
(40,115,0)
(72,17,0)
(119,81,0)
(40,0,0)
(7,15,0)
(10,58,0)
(115,40,0)
(63,6,0)
(30,98,0)
(13,107,0)
(88,62,0)
(104,19,0)
(79,43,0)
(57,0,0)
(108,91,0)
(35,48,0)
(15,7,0)
(40,39,0)
(93,98,0)
(43,81,0)
(33,62,0)
(99,17,0)
(26,27,0)
(104,11,1)
(88,74,1)
(39,29,1)
(107,13,1)
(92,107,1)
(8,72,1)
(92,35,1)
(113,22,1)
(107,98,1)
(101,9,1)
(48,27,1)
(27,88,1)
(57,65,1)
(50,102,1)
(24,72,1)
(62,0,1)
(121,98,1)
(51,19,1)
(20,24,1)
(89,14,1)
(15,7,1)
(86,82,1)
(22,98,1)
(12,95,1)
(4,84,1)
(62,33,1)
(38,1,1)
(98,108,1)
(59,0,1)
(40,115,1)
(29,50,1)
(18,48,1)
(91,66,1)
(118,103,1)
(68,120,1)
(55,37,1)
(9,70,1)
(110,23,1)
(100,46,1)
(112,56,1)
(25,67,1)
(23,45,1)
(34,28,1)
(98,93,1)
(59,47,1)
(45,49,1)
(82,26,1)
(18,32,1)
(13,114,1)
(60,111,1)
(52,79,1)
(96,78,1)
(87,101,1)
(48,68,1)
(54,83,1)
(56,110,1)
(95,73,1)
(67,117,1)
(37,111,1)
(26,52,1)
(95,72,1)
(95,84,1)
(31,0,1)
(61,55,1)
(63,72,1)
(106,60,1)
(80,44,1)
(49,48,1)
(120,36,1)
(35,0,1)
(65,116,1)
(79,43,1)
(107,72,1)
(16,85,1)
(103,18,1)
(118,36,1)
(97,113,1)
(36,27,1)
(10,100,1)
(15,25,1)
(40,39,1)
(116,10,1)
(93,87,1)
(18,43,1)
(30,84,1)
(63,6,1)
(83,51,1)
(117,61,1)
(13,101,1)
(44,86,1)
(108,91,1)
(0,40,1)
(69,121,1)
(116,59,1)
(84,75,1)
(14,43,1)
(85,90,1)
(102,106,1)
(46,59,1)
(30,96,1)
(79,89,1)
(43,105,1)
(28,16,1)
(30,97,1)
(91,63,1)
(57,0,1)
(70,108,1)
(88,62,1)
(78,97,1)
(35,48,1)
(35,118,1)
(33,80,1)
(79,0,1)
(22,69,1)
(90,12,1)
(72,15,1)
(6,34,1)
(30,98,1)
(54,72,1)
(75,54,1)
(23,48,1)
(36,38,1)
(51,8,1)
(11,8,1)
(114,30,1)
(47,31,1)
(8,20,1)
(105,57,1)
(101,108,1)
(73,4,1)
(32,112,1)
(1,27,1)
(18,56,1)
(19,104,1)
(48,27,2)
(79,0,2)
(79,111,2)
(23,48,2)
(113,101,2)
(1,111,2)
(59,111,2)
(72,15,2)
(112,36,2)
(20,111,2)
(118,111,2)
(52,111,2)
(47,111,2)
(88,74,2)
(52,79,2)
(116,111,2)
(60,111,2)
(33,111,2)
(40,115,2)
(86,111,2)
(6,34,2)
(63,6,2)
(67,111,2)
(89,111,2)
(30,84,2)
(98,108,2)
(103,36,2)
(107,111,2)
(98,101,2)
(88,111,2)
(91,66,2)
(59,0,2)
(15,111,2)
(29,50,2)
(29,111,2)
(105,111,2)
(91,111,2)
(90,111,2)
(23,36,2)
(18,56,2)
(6,111,2)
(82,111,2)
(18,48,2)
(110,36,2)
(108,111,2)
(75,111,2)
(45,36,2)
(48,36,2)
(30,97,2)
(95,111,2)
(56,36,2)
(78,101,2)
(70,111,2)
(35,48,2)
(36,27,2)
(101,111,2)
(34,111,2)
(0,40,2)
(87,101,2)
(35,111,2)
(38,111,2)
(43,111,2)
(95,72,2)
(73,111,2)
(46,59,2)
(117,111,2)
(96,101,2)
(69,101,2)
(9,111,2)
(27,88,2)
(18,36,2)
(85,111,2)
(44,111,2)
(28,111,2)
(22,98,2)
(57,0,2)
(24,111,2)
(114,30,2)
(25,111,2)
(80,111,2)
(120,36,2)
(93,101,2)
(62,0,2)
(97,101,2)
(12,111,2)
(4,111,2)
(107,72,2)
(16,111,2)
(91,63,2)
(30,98,2)
(10,100,2)
(55,111,2)
(30,101,2)
(88,62,2)
(22,101,2)
(62,33,2)
(12,95,2)
(25,67,2)
(67,117,2)
(0,111,2)
(39,29,2)
(11,8,2)
(49,36,2)
(37,111,2)
(101,108,2)
(35,0,2)
(107,98,2)
(33,80,2)
(114,101,2)
(8,111,2)
(40,39,2)
(83,111,2)
(40,111,2)
(108,91,2)
(95,84,2)
(103,18,2)
(102,111,2)
(57,111,2)
(61,111,2)
(36,111,2)
(18,43,2)
(100,59,2)
(13,111,2)
(8,72,2)
(27,111,2)
(72,111,2)
(19,8,2)
(106,111,2)
(50,111,2)
(54,72,2)
(14,111,2)
(65,111,2)
(121,101,2)
(51,111,2)
(32,36,2)
(63,111,2)
(31,111,2)
(15,7,2)
(39,111,2)
(26,111,2)
(10,59,2)
(15,25,2)
(68,36,2)
(19,104,2)
(54,111,2)
(62,111,2)
(84,111,2)
(79,43,2)
(104,8,2)
(63,72,2)
-----------------------------------
(0,* data = (int *)
(1,tmpData)
(2,)
(3,data)
(4,data)
(5,)
(6,(130000)
(7,int *)
(8,data == NULL)
(9,NULL)
(10,exit(-1)
(11,1)
(12,printIntLine(data[0])
(13,data)
(14,data)
(15,(int *)
(16,130000)
(17,)
(18,data[0])
(19,exit(-1)
(20,NULL)
(21,)
(22,data[0])
(23,data[0])
(24,data)
(25,malloc(100*sizeof(int)
(26,tmpData)
(27,tmpData = (int *)
(28,int)
(29,100*sizeof(int)
(30,data[0])
(31,data)
(32,0)
(33,(130000)
(34,sizeof(int)
(35,free(data)
(36,tmpData != NULL)
(37,data)
(38,NULL)
(39,malloc(100*sizeof(int)
(40,(int *)
(41,data)
(42,)
(43,data[0] = 5)
(44,int)
(45,0)
(46,1)
(47,NULL)
(48,data = tmpData)
(49,data)
(50,sizeof(int)
(51,data)
(52,printIntLine(data[0])
(53,if (tmpData != NULL)
(54,data[0])
(55,100)
(56,data[0] = 10)
(57,data[0])
(58,)
(59,data == NULL)
(60,data)
(61,int)
(62,realloc(data, (130000)
(63,realloc(data, (130000)
(64,tmpData)
(65,0)
(66,int *)
(67,100*sizeof(int)
(68,tmpData)
(69,0)
(70,tmpData)
(71,tmpData)
(72,* data = (int *)
(73,0)
(74,int *)
(75,5)
(76,)
(77,)
(78,data)
(79,data[0])
(80,sizeof(int)
(81,)
(82,data)
(83,0)
(84,data[0] = 5)
(85,data)
(86,130000)
(87,data)
(88,(int *)
(89,0)
(90,tmpData)
(91,(int *)
(92,RET)
(93,tmpData)
(94,if (data == NULL)
(95,data[0])
(96,0)
(97,data[0] = 10)
(98,data = tmpData)
(99,if (data == NULL)
(100,-1)
(101,tmpData != NULL)
(102,int)
(103,printIntLine(data[0])
(104,-1)
(105,5)
(106,100)
(107,free(data)
(108,tmpData = (int *)
(109,if(globalReturnsTrueOrFalse()
(110,10)
(111,globalReturnsTrueOrFalse()
(112,data)
(113,10)
(114,printIntLine(data[0])
(115,int *)
(116,data)
(117,sizeof(int)
(118,data)
(119,if (tmpData != NULL)
(120,data)
(121,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^