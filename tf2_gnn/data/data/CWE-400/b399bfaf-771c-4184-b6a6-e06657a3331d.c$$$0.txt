-----label-----
0
-----code-----
static enum fdset_sweep_state tcp_sweep(fdset_t *set, int i, void *data)
{
	UNUSED(data);
	assert(set && i < set->n && i >= 0);

	int fd = set->pfd[i].fd;

	struct sockaddr_storage ss;
	socklen_t len = sizeof(struct sockaddr_storage);
	memset(&ss, 0, len);
	if (getpeername(fd, (struct sockaddr*)&ss, &len) < 0) {
		dbg_net("tcp: sweep getpeername() on invalid socket=%d\n", fd);
		return FDSET_SWEEP;
	}

	/* Translate */
	char addr_str[SOCKADDR_STRLEN] = {0};
	sockaddr_tostr(addr_str, sizeof(addr_str), &ss);

	log_notice("connection terminated due to inactivity, address '%s'", addr_str);
	close(fd);
	return FDSET_SWEEP;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
9,11
12,13
12,14
14,15
16,17
16,18
18,19
18,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
34,35
36,37
36,38
37,38
39,40
39,41
40,41
43,44
43,45
44,45
47,48
48,49
48,50
50,51
50,52
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
59,60
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
72,74
74,75
75,76
76,77
76,78
77,78
80,81
81,82
81,83
81,84
81,85
82,83
84,85
85,86
88,89
90,91
90,92
91,92
91,93
92,93
92,94
92,95
92,96
93,94
95,96
97,98
97,99
98,99
98,100
99,100
101,102
103,104
104,105
106,107
107,108
110,111
110,112
111,112
112,113
112,114
112,115
113,114
116,117
118,119
119,120
121,122
122,123
122,124
124,125
124,126
124,127
126,127
127,128
129,130
130,131
132,133
133,134
133,135
133,136
133,137
134,135
136,137
138,139
139,140
140,141
142,143
143,144
145,146
146,147
146,148
146,149
147,148
150,151
152,153
153,154
153,155
154,155
156,157
158,159
159,160
-----nextToken-----
3,5,8,10,11,13,15,17,19,20,25,27,31,35,38,41,42,45,46,49,51,57,58,60,61,65,67,71,73,78,79,83,86,87,89,94,96,100,102,105,108,109,114,115,117,120,123,125,128,131,135,137,141,144,148,149,151,155,157,160
-----computeFrom-----
32,33
32,34
33,34
33,35
36,37
36,38
43,44
43,45
91,92
91,93
-----guardedBy-----
96,117
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static enum fdset_sweep_state tcp_sweep(fdset_t *set, int i, void *data){	UNUSED(data);	assert(set && i < set->n && i >= 0);	int fd = set->pfd[i].fd;	struct sockaddr_storage ss;	socklen_t len = sizeof(struct sockaddr_storage);	memset(&ss, 0, len);	if (getpeername(fd, (struct sockaddr*)&ss, &len) < 0) {		dbg_net("tcp: sweep getpeername() on invalid socket=%d\n", fd);		return FDSET_SWEEP;	}	/* Translate */	char addr_str[SOCKADDR_STRLEN] = {0};	sockaddr_tostr(addr_str, sizeof(addr_str), &ss);	log_notice("connection terminated due to inactivity, address '%s'", addr_str);	close(fd);	return FDSET_SWEEP;}
static enum fdset_sweep_state
fdset_sweep_state
tcp_sweep(fdset_t *set, int i, void *data)
tcp_sweep
fdset_t *set
fdset_t
fdset_t
*set
*
set
int i
int
i
i
void *data
void
*data
*
data
{	UNUSED(data);	assert(set && i < set->n && i >= 0);	int fd = set->pfd[i].fd;	struct sockaddr_storage ss;	socklen_t len = sizeof(struct sockaddr_storage);	memset(&ss, 0, len);	if (getpeername(fd, (struct sockaddr*)&ss, &len) < 0) {		dbg_net("tcp: sweep getpeername() on invalid socket=%d\n", fd);		return FDSET_SWEEP;	}	/* Translate */	char addr_str[SOCKADDR_STRLEN] = {0};	sockaddr_tostr(addr_str, sizeof(addr_str), &ss);	log_notice("connection terminated due to inactivity, address '%s'", addr_str);	close(fd);	return FDSET_SWEEP;}
UNUSED(data);
UNUSED(data)
UNUSED
UNUSED
data
data
assert(set && i < set->n && i >= 0);
assert(set && i < set->n && i >= 0)
assert
assert
set && i < set->n && i >= 0
set && i < set->n
set
set
i < set->n
i
i
set->n
set
set
n
i >= 0
i
i
0
int fd = set->pfd[i].fd;
int fd = set->pfd[i].fd;
int
fd = set->pfd[i].fd
fd
= set->pfd[i].fd
set->pfd[i].fd
set->pfd[i]
set->pfd
set
set
pfd
i
i
fd
struct sockaddr_storage ss;
struct sockaddr_storage ss;
struct sockaddr_storage
sockaddr_storage
ss
ss
socklen_t len = sizeof(struct sockaddr_storage);
socklen_t len = sizeof(struct sockaddr_storage);
socklen_t
socklen_t
len = sizeof(struct sockaddr_storage)
len
= sizeof(struct sockaddr_storage)
sizeof(struct sockaddr_storage)
struct sockaddr_storage
struct sockaddr_storage
sockaddr_storage

memset(&ss, 0, len);
memset(&ss, 0, len)
memset
memset
&ss
ss
ss
0
len
len
if (getpeername(fd, (struct sockaddr*)&ss, &len) < 0) {		dbg_net("tcp: sweep getpeername() on invalid socket=%d\n", fd);		return FDSET_SWEEP;	}
getpeername(fd, (struct sockaddr*)&ss, &len) < 0
getpeername(fd, (struct sockaddr*)&ss, &len)
getpeername
getpeername
fd
fd
(struct sockaddr*)&ss
struct sockaddr*
struct sockaddr
sockaddr
*
*
&ss
ss
ss
&len
len
len
0
{		dbg_net("tcp: sweep getpeername() on invalid socket=%d\n", fd);		return FDSET_SWEEP;	}
dbg_net("tcp: sweep getpeername() on invalid socket=%d\n", fd);
dbg_net("tcp: sweep getpeername() on invalid socket=%d\n", fd)
dbg_net
dbg_net
"tcp: sweep getpeername() on invalid socket=%d\n"
fd
fd
return FDSET_SWEEP;
FDSET_SWEEP
FDSET_SWEEP
char addr_str[SOCKADDR_STRLEN] = {0};
char addr_str[SOCKADDR_STRLEN] = {0};
char
addr_str[SOCKADDR_STRLEN] = {0}
addr_str
[SOCKADDR_STRLEN]
SOCKADDR_STRLEN
SOCKADDR_STRLEN
= {0}
{0}
0
sockaddr_tostr(addr_str, sizeof(addr_str), &ss);
sockaddr_tostr(addr_str, sizeof(addr_str), &ss)
sockaddr_tostr
sockaddr_tostr
addr_str
addr_str
sizeof(addr_str)
(addr_str)
addr_str
addr_str
&ss
ss
ss
log_notice("connection terminated due to inactivity, address '%s'", addr_str);
log_notice("connection terminated due to inactivity, address '%s'", addr_str)
log_notice
log_notice
"connection terminated due to inactivity, address '%s'"
addr_str
addr_str
close(fd);
close(fd)
close
close
fd
fd
return FDSET_SWEEP;
FDSET_SWEEP
FDSET_SWEEP
-----joern-----
(8,63,0)
(50,25,0)
(31,59,0)
(45,10,0)
(29,71,0)
(69,17,0)
(56,64,0)
(15,6,0)
(28,12,0)
(9,42,0)
(70,41,0)
(7,6,0)
(22,65,0)
(11,53,0)
(1,2,0)
(39,61,0)
(25,63,0)
(27,30,0)
(72,71,0)
(6,7,0)
(51,71,0)
(38,32,0)
(51,37,0)
(48,11,0)
(6,4,0)
(11,59,0)
(63,8,0)
(38,2,0)
(28,36,0)
(2,38,0)
(61,71,0)
(33,71,0)
(19,36,0)
(23,72,0)
(23,7,0)
(43,32,0)
(7,53,0)
(3,37,0)
(24,65,0)
(65,47,0)
(13,2,0)
(27,71,0)
(62,23,0)
(59,31,0)
(10,61,0)
(25,42,0)
(72,23,0)
(25,72,0)
(2,1,0)
(58,71,0)
(26,16,0)
(68,12,0)
(10,41,0)
(34,1,0)
(12,47,0)
(31,53,0)
(29,72,0)
(14,71,0)
(16,11,0)
(41,10,0)
(16,4,0)
(37,4,0)
(10,71,0)
(67,71,0)
(21,32,0)
(43,71,0)
(66,71,0)
(49,16,0)
(52,63,0)
(63,25,0)
(60,43,0)
(59,37,0)
(59,11,0)
(44,38,0)
(11,16,0)
(57,31,0)
(37,59,0)
(2,32,0)
(25,64,0)
(42,25,0)
(17,69,0)
(35,27,0)
(64,25,0)
(55,6,0)
(17,61,0)
(18,31,0)
(20,10,0)
(0,29,0)
(7,23,0)
(46,8,0)
(40,43,0)
(42,61,0)
(2,71,0)
(32,71,0)
(54,7,0)
(37,51,0)
(36,71,0)
(65,72,0)
(63,52,0)
(5,72,0)
(61,17,0)
(11,53,1)
(62,7,1)
(17,39,1)
(7,53,1)
(46,50,1)
(49,26,1)
(42,61,1)
(26,48,1)
(2,1,1)
(3,27,1)
(23,62,1)
(25,42,1)
(59,31,1)
(64,56,1)
(21,64,1)
(56,25,1)
(7,54,1)
(1,34,1)
(36,19,1)
(28,36,1)
(42,9,1)
(6,55,1)
(10,41,1)
(72,23,1)
(70,61,1)
(24,64,1)
(25,63,1)
(41,70,1)
(31,18,1)
(5,51,1)
(65,72,1)
(8,46,1)
(63,52,1)
(2,38,1)
(20,41,1)
(40,60,1)
(43,32,1)
(48,3,1)
(57,11,1)
(7,6,1)
(39,72,1)
(37,4,1)
(38,32,1)
(27,30,1)
(13,32,1)
(18,57,1)
(10,45,1)
(65,22,1)
(28,12,1)
(29,0,1)
(2,32,1)
(61,17,1)
(37,59,1)
(19,29,1)
(50,10,1)
(59,11,1)
(64,25,1)
(6,4,1)
(37,3,1)
(29,72,1)
(27,35,1)
(16,4,1)
(43,40,1)
(51,37,1)
(44,13,1)
(45,20,1)
(10,61,1)
(68,65,1)
(23,7,1)
(32,21,1)
(54,6,1)
(0,43,1)
(38,44,1)
(11,16,1)
(55,15,1)
(63,8,1)
(17,69,1)
(15,5,1)
(9,63,1)
(31,53,1)
(25,72,1)
(12,68,1)
(34,38,1)
(16,49,1)
(22,24,1)
(60,2,1)
(27,30,2)
(36,64,2)
(16,3,2)
(26,3,2)
(18,11,2)
(59,31,2)
(10,41,2)
(63,8,2)
(60,64,2)
(0,64,2)
(31,53,2)
(31,11,2)
(37,59,2)
(2,64,2)
(40,64,2)
(11,53,2)
(43,64,2)
(21,64,2)
(6,4,2)
(42,61,2)
(2,38,2)
(23,7,2)
(38,32,2)
(17,69,2)
(65,64,2)
(65,72,2)
(37,4,2)
(16,4,2)
(10,61,2)
(57,11,2)
(59,3,2)
(12,64,2)
(2,32,2)
(63,52,2)
(72,23,2)
(19,64,2)
(7,6,2)
(7,53,2)
(68,64,2)
(13,64,2)
(25,72,2)
(34,64,2)
(11,16,2)
(38,64,2)
(59,11,2)
(51,37,2)
(25,63,2)
(22,64,2)
(1,64,2)
(49,3,2)
(43,32,2)
(29,64,2)
(29,72,2)
(32,64,2)
(48,3,2)
(28,12,2)
(11,3,2)
(44,64,2)
(2,1,2)
(61,17,2)
(25,42,2)
(24,64,2)
(64,25,2)
(28,36,2)
-----------------------------------
(0,fd)
(1,&ss)
(2,sockaddr_tostr(addr_str, sizeof(addr_str)
(3,set)
(4,fdset_t *set)
(5,fd)
(6,set->pfd)
(7,set->pfd[i])
(8,&ss)
(9,len)
(10,memset(&ss, 0, len)
(11,i < set->n)
(12,return FDSET_SWEEP;)
(13,addr_str)
(14,addr_str)
(15,set)
(16,set->n)
(17,sizeof(struct sockaddr_storage)
(18,0)
(19,FDSET_SWEEP)
(20,0)
(21,addr_str)
(22,fd)
(23,set->pfd[i].fd)
(24,"tcp: sweep getpeername()
(25,getpeername(fd, (struct sockaddr*)
(26,set)
(27,UNUSED(data)
(28,RET)
(29,close(fd)
(30,void *data)
(31,i >= 0)
(32,addr_str[SOCKADDR_STRLEN] = {0})
(33,ss)
(34,ss)
(35,data)
(36,return FDSET_SWEEP;)
(37,set && i < set->n && i >= 0)
(38,sizeof(addr_str)
(39,len)
(40,addr_str)
(41,&ss)
(42,&len)
(43,log_notice("connection terminated due to inactivity, address \'%s\'", addr_str)
(44,addr_str)
(45,len)
(46,ss)
(47,)
(48,i)
(49,n)
(50,fd)
(51,assert(set && i < set->n && i >= 0)
(52,struct sockaddr*)
(53,int i)
(54,i)
(55,pfd)
(56,0)
(57,i)
(58,fd)
(59,i < set->n && i >= 0)
(60,"connection terminated due to inactivity, address \'%s\'")
(61,len = sizeof(struct sockaddr_storage)
(62,fd)
(63,(struct sockaddr*)
(64,getpeername(fd, (struct sockaddr*)
(65,dbg_net("tcp: sweep getpeername()
(66,if (getpeername(fd, (struct sockaddr*)
(67,len)
(68,FDSET_SWEEP)
(69,struct sockaddr_storage)
(70,ss)
(71,)
(72,fd = set->pfd[i].fd)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^