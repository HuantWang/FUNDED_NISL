-----label-----
1
-----code-----
static smartlist_t *
expand_protocol_list(const smartlist_t *protos)
{
  smartlist_t *expanded = smartlist_new();
  if (!protos)
    return expanded;

  SMARTLIST_FOREACH_BEGIN(protos, const proto_entry_t *, ent) {
    const char *name = ent->name;
    if (strlen(name) > MAX_PROTOCOL_NAME_LENGTH) {
      log_warn(LD_NET, "When expanding a protocol entry, I got a very large "
               "protocol name. This is possibly an attack or a bug, unless "
               "the Tor network truly supports protocol names larger than "
               "%ud characters. The offending string was: %s",
               MAX_PROTOCOL_NAME_LENGTH, escaped(name));
      continue;
    }
    SMARTLIST_FOREACH_BEGIN(ent->ranges, const proto_range_t *, range) {
      uint32_t u;
      for (u = range->low; u <= range->high; ++u) {
        smartlist_add_asprintf(expanded, "%s=%lu", name, (unsigned long)u);
        if (smartlist_len(expanded) > MAX_PROTOCOLS_TO_EXPAND)
          goto too_many;
      }
    } SMARTLIST_FOREACH_END(range);
  } SMARTLIST_FOREACH_END(ent);

  smartlist_sort_strings(expanded);
  smartlist_uniq_strings(expanded); // This makes voting work. do not remove
  return expanded;

 too_many:
  SMARTLIST_FOREACH(expanded, char *, cp, tor_free(cp));
  smartlist_free(expanded);
  return NULL;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
13,19
13,20
13,21
13,22
13,23
14,15
15,16
15,17
16,17
18,19
18,20
18,21
21,22
22,23
23,24
25,26
25,27
26,27
27,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
37,38
38,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
-----nextToken-----
3,5,6,9,11,12,17,19,20,24,28,31,36,39,43,45,49,51,54,59,61,64
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static smartlist_t *expand_protocol_list(const smartlist_t *protos){  smartlist_t *expanded = smartlist_new();  if (!protos)    return expanded;  SMARTLIST_FOREACH_BEGIN(protos, const proto_entry_t *, ent) {    const char *name = ent->name;    if (strlen(name) > MAX_PROTOCOL_NAME_LENGTH) {      log_warn(LD_NET, "When expanding a protocol entry, I got a very large "               "protocol name. This is possibly an attack or a bug, unless "               "the Tor network truly supports protocol names larger than "               "%ud characters. The offending string was: %s",               MAX_PROTOCOL_NAME_LENGTH, escaped(name));      continue;    }    SMARTLIST_FOREACH_BEGIN(ent->ranges, const proto_range_t *, range) {      uint32_t u;      for (u = range->low; u <= range->high; ++u) {        smartlist_add_asprintf(expanded, "%s=%lu", name, (unsigned long)u);        if (smartlist_len(expanded) > MAX_PROTOCOLS_TO_EXPAND)          goto too_many;      }    } SMARTLIST_FOREACH_END(range);  } SMARTLIST_FOREACH_END(ent);  smartlist_sort_strings(expanded);  smartlist_uniq_strings(expanded); // This makes voting work. do not remove  return expanded; too_many:  SMARTLIST_FOREACH(expanded, char *, cp, tor_free(cp));  smartlist_free(expanded);  return NULL;}
static smartlist_t
smartlist_t
*expand_protocol_list(const smartlist_t *protos)
*
expand_protocol_list
const smartlist_t *protos
const smartlist_t
smartlist_t
*protos
*
protos
{  smartlist_t *expanded = smartlist_new();  if (!protos)    return expanded;  SMARTLIST_FOREACH_BEGIN(protos, const proto_entry_t *, ent) {    const char *name = ent->name;    if (strlen(name) > MAX_PROTOCOL_NAME_LENGTH) {      log_warn(LD_NET, "When expanding a protocol entry, I got a very large "               "protocol name. This is possibly an attack or a bug, unless "               "the Tor network truly supports protocol names larger than "               "%ud characters. The offending string was: %s",               MAX_PROTOCOL_NAME_LENGTH, escaped(name));      continue;    }    SMARTLIST_FOREACH_BEGIN(ent->ranges, const proto_range_t *, range) {      uint32_t u;      for (u = range->low; u <= range->high; ++u) {        smartlist_add_asprintf(expanded, "%s=%lu", name, (unsigned long)u);        if (smartlist_len(expanded) > MAX_PROTOCOLS_TO_EXPAND)          goto too_many;      }    } SMARTLIST_FOREACH_END(range);  } SMARTLIST_FOREACH_END(ent);  smartlist_sort_strings(expanded);  smartlist_uniq_strings(expanded); // This makes voting work. do not remove  return expanded; too_many:  SMARTLIST_FOREACH(expanded, char *, cp, tor_free(cp));  smartlist_free(expanded);  return NULL;}
smartlist_t *expanded = smartlist_new();
smartlist_t *expanded = smartlist_new();
smartlist_t
smartlist_t
*expanded = smartlist_new()
*
expanded
= smartlist_new()
smartlist_new()
smartlist_new
smartlist_new
if (!protos)    return expanded;
!protos
protos
protos
return expanded;
expanded
expanded
SMARTLIST_FOREACH_BEGIN(protos, const proto_entry_t *, ent) {    const char *name = ent->name;    if (strlen(name) > MAX_PROTOCOL_NAME_LENGTH) {      log_warn(LD_NET, "When expanding a protocol entry, I got a very large "               "protocol name. This is possibly an attack or a bug, unless "               "the Tor network truly supports protocol names larger than "               "%ud characters. The offending string was: %s",               MAX_PROTOCOL_NAME_LENGTH, escaped(name));      continue;    }    SMARTLIST_FOREACH_BEGIN(ent->ranges, const proto_range_t *, range) {      uint32_t u;      for (u = range->low; u <= range->high; ++u) {        smartlist_add_asprintf(expanded, "%s=%lu", name, (unsigned long)u);        if (smartlist_len(expanded) > MAX_PROTOCOLS_TO_EXPAND)          goto too_many;      }    } SMARTLIST_FOREACH_END(range);  }
SMARTLIST_FOREACH_END(ent);
SMARTLIST_FOREACH_END(ent);
SMARTLIST_FOREACH_END
SMARTLIST_FOREACH_END
(ent)
ent
ent
smartlist_sort_strings(expanded);
smartlist_sort_strings(expanded)
smartlist_sort_strings
smartlist_sort_strings
expanded
expanded
smartlist_uniq_strings(expanded);
smartlist_uniq_strings(expanded)
smartlist_uniq_strings
smartlist_uniq_strings
expanded
expanded
return expanded;
expanded
expanded
too_many:  SMARTLIST_FOREACH(expanded, char *, cp, tor_free(cp));
smartlist_free(expanded);
smartlist_free(expanded)
smartlist_free
smartlist_free
expanded
expanded
return NULL;
NULL
NULL
-----joern-----
(55,3,0)
(16,64,0)
(56,22,0)
(34,2,0)
(8,7,0)
(48,51,0)
(61,64,0)
(44,49,0)
(51,64,0)
(32,58,0)
(1,27,0)
(41,3,0)
(51,58,0)
(23,31,0)
(35,58,0)
(0,58,0)
(9,29,0)
(11,3,0)
(7,8,0)
(63,29,0)
(39,2,0)
(24,29,0)
(55,23,0)
(35,64,0)
(5,9,0)
(20,44,0)
(3,11,0)
(64,58,0)
(15,31,0)
(37,64,0)
(46,58,0)
(45,10,0)
(29,9,0)
(33,2,0)
(59,35,0)
(40,42,0)
(30,44,0)
(37,58,0)
(61,58,0)
(57,33,0)
(52,55,0)
(3,55,0)
(55,64,0)
(9,2,0)
(10,58,0)
(50,8,0)
(60,10,0)
(53,6,0)
(13,55,0)
(26,14,0)
(38,7,0)
(2,33,0)
(55,27,0)
(64,21,0)
(60,61,0)
(6,64,0)
(7,23,0)
(36,33,0)
(31,23,0)
(62,37,0)
(17,55,0)
(19,14,0)
(47,49,0)
(21,64,0)
(25,44,0)
(3,2,0)
(60,6,0)
(43,55,1)
(47,44,1)
(7,23,1)
(41,13,1)
(34,47,1)
(51,48,1)
(6,53,1)
(30,25,1)
(59,51,1)
(20,8,1)
(35,59,1)
(10,45,1)
(42,40,1)
(60,61,1)
(7,38,1)
(38,23,1)
(35,64,1)
(24,5,1)
(12,9,1)
(6,64,1)
(9,2,1)
(55,23,1)
(40,64,1)
(37,62,1)
(13,52,1)
(5,39,1)
(63,24,1)
(3,11,1)
(55,64,1)
(48,32,1)
(25,20,1)
(23,31,1)
(52,17,1)
(34,8,1)
(53,42,1)
(45,37,1)
(5,2,1)
(9,29,1)
(8,50,1)
(39,2,1)
(50,7,1)
(8,7,1)
(51,64,1)
(61,64,1)
(60,6,1)
(29,63,1)
(54,22,1)
(62,54,1)
(3,41,1)
(37,64,1)
(33,57,1)
(21,16,1)
(17,9,1)
(22,56,1)
(64,21,1)
(2,33,1)
(3,2,1)
(57,36,1)
(36,34,1)
(55,3,1)
(4,30,1)
(60,10,1)
(59,9,2)
(7,23,2)
(56,9,2)
(35,64,2)
(37,22,2)
(12,9,2)
(45,22,2)
(6,64,2)
(61,64,2)
(63,42,2)
(63,22,2)
(60,61,2)
(51,9,2)
(9,2,2)
(39,22,2)
(9,22,2)
(53,42,2)
(10,22,2)
(20,8,2)
(34,42,2)
(55,3,2)
(38,42,2)
(2,33,2)
(3,11,2)
(24,42,2)
(35,9,2)
(13,9,2)
(17,9,2)
(32,9,2)
(61,9,2)
(25,8,2)
(8,7,2)
(54,22,2)
(22,9,2)
(31,42,2)
(52,9,2)
(51,64,2)
(29,22,2)
(44,8,2)
(4,8,2)
(23,31,2)
(8,42,2)
(43,9,2)
(39,2,2)
(33,42,2)
(5,22,2)
(55,23,2)
(9,42,2)
(9,29,2)
(37,64,2)
(3,2,2)
(29,42,2)
(5,42,2)
(47,8,2)
(2,42,2)
(55,9,2)
(64,21,2)
(55,64,2)
(24,22,2)
(60,6,2)
(41,9,2)
(60,10,2)
(6,42,2)
(48,9,2)
(30,8,2)
(50,42,2)
(23,42,2)
(3,9,2)
(57,42,2)
(15,42,2)
(62,22,2)
(7,42,2)
(36,42,2)
-----------------------------------
(0,if (!protos)
(1,if (smartlist_len(expanded)
(2,u = range->low)
(3,(unsigned long)
(4,name)
(5,u)
(6,return expanded;)
(7,strlen(name)
(8,strlen(name)
(9,u <= range->high)
(10,return NULL;)
(11,unsigned long)
(12,range)
(13,name)
(14,)
(15,ent)
(16,expanded)
(17,expanded)
(18,if (strlen(name)
(19,u)
(20,LD_NET)
(21,smartlist_new()
(22,smartlist_len(expanded)
(23,*name = ent->name)
(24,range)
(25,"When expanding a protocol entry, I got a very large "\n\\n               "protocol name. This is possibly an attack or a bug, unless "\n\\n               "the Tor network truly supports protocol names larger than "\n\\n               "%ud characters. The offending string was: %s")
(26,for (u = range->low; u <= range->high; ++u)
(27,)
(28,name)
(29,range->high)
(30,MAX_PROTOCOL_NAME_LENGTH)
(31,ent->name)
(32,SMARTLIST_FOREACH_END(ent)
(33,range->low)
(34,u)
(35,smartlist_uniq_strings(expanded)
(36,range)
(37,smartlist_free(expanded)
(38,name)
(39,++u)
(40,protos)
(41,u)
(42,!protos)
(43,expanded)
(44,log_warn(LD_NET, "When expanding a protocol entry, I got a very large "\n\\n               "protocol name. This is possibly an attack or a bug, unless "\n\\n               "the Tor network truly supports protocol names larger than "\n\\n               "%ud characters. The offending string was: %s",\n\\n               MAX_PROTOCOL_NAME_LENGTH, escaped(name)
(45,NULL)
(46,too_many:)
(47,continue;)
(48,expanded)
(49,)
(50,MAX_PROTOCOL_NAME_LENGTH)
(51,smartlist_sort_strings(expanded)
(52,"%s=%lu")
(53,expanded)
(54,goto too_many;)
(55,smartlist_add_asprintf(expanded, "%s=%lu", name, (unsigned long)
(56,MAX_PROTOCOLS_TO_EXPAND)
(57,low)
(58,)
(59,expanded)
(60,RET)
(61,return expanded;)
(62,expanded)
(63,high)
(64,*expanded = smartlist_new()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^