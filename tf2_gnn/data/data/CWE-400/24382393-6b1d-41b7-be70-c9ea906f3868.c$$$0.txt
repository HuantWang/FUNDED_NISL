-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(5)
    {
    case 6:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Use a relatively small number */
        count = 20;
        break;
    }
    switch(7)
    {
    case 7:
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
52,53
55,56
55,57
56,57
58,59
58,60
59,60
59,61
60,61
63,64
65,66
66,67
68,69
69,70
70,71
70,72
71,72
76,77
77,78
77,79
78,79
-----nextToken-----
2,4,8,10,14,16,18,21,25,26,27,28,32,33,34,36,39,44,46,48,53,54,57,61,62,64,67,72,73,74,75,79,80,81
-----computeFrom-----
12,13
12,14
30,31
30,32
51,52
51,53
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }
5
{    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }
case 6:
6
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
count = 20;
count = 20
count
count
20
break;
switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(24,14,0)
(30,20,0)
(16,46,0)
(28,20,0)
(33,25,0)
(9,33,0)
(36,41,0)
(3,2,0)
(14,2,0)
(12,25,0)
(4,36,0)
(46,16,0)
(22,25,0)
(41,36,0)
(32,15,0)
(13,15,0)
(36,20,0)
(6,41,0)
(31,15,0)
(29,22,0)
(38,15,0)
(43,2,0)
(5,45,0)
(46,31,0)
(44,25,0)
(3,46,0)
(39,3,0)
(19,20,0)
(46,3,0)
(35,31,0)
(1,22,0)
(34,2,0)
(45,40,0)
(46,36,0)
(27,38,0)
(8,15,0)
(0,15,0)
(23,22,0)
(18,25,0)
(7,29,0)
(37,46,0)
(21,31,0)
(42,29,0)
(11,25,0)
(2,43,1)
(39,14,1)
(33,9,1)
(39,2,1)
(24,45,1)
(46,37,1)
(8,31,1)
(10,18,1)
(3,46,1)
(35,26,1)
(5,3,1)
(41,6,1)
(38,27,1)
(43,34,1)
(45,5,1)
(18,3,1)
(34,29,1)
(42,17,1)
(6,4,1)
(11,33,1)
(29,7,1)
(46,31,1)
(14,2,1)
(21,35,1)
(31,21,1)
(46,36,1)
(3,2,1)
(7,42,1)
(10,11,1)
(17,8,1)
(9,17,1)
(36,41,1)
(14,24,1)
(27,26,1)
(13,38,1)
(26,36,1)
(37,39,1)
(46,16,1)
(17,13,1)
(27,26,2)
(45,3,2)
(46,36,2)
(13,26,2)
(46,16,2)
(39,3,2)
(14,3,2)
(36,41,2)
(3,17,2)
(38,26,2)
(5,3,2)
(34,17,2)
(2,17,2)
(37,17,2)
(43,17,2)
(9,17,2)
(3,3,2)
(24,3,2)
(31,26,2)
(37,3,2)
(18,17,2)
(3,46,2)
(46,17,2)
(14,2,2)
(46,31,2)
(3,2,2)
(8,26,2)
(11,17,2)
(42,17,2)
(33,17,2)
(35,26,2)
(29,17,2)
(21,26,2)
(46,3,2)
(7,17,2)
(39,17,2)
-----------------------------------
(0,case 6:)
(1,for (i = 0; i < (size_t)
(2,i = 0)
(3,i < (size_t)
(4,count)
(5,"Hello")
(6,1)
(7,0)
(8,break;)
(9,"Benign, fixed string")
(10,RET)
(11,break;)
(12,case 7:)
(13,break;)
(14,i++)
(15,)
(16,size_t)
(17,7)
(18,break;)
(19,count)
(20,)
(21,20)
(22,)
(23,i)
(24,i)
(25,)
(26,5)
(27,"Benign, fixed string")
(28,switch(7)
(29,i = 0)
(30,switch(5)
(31,count = 20)
(32,default:)
(33,printLine("Benign, fixed string")
(34,i)
(35,count)
(36,count = -1)
(37,count)
(38,printLine("Benign, fixed string")
(39,i)
(40,)
(41,-1)
(42,i)
(43,0)
(44,default:)
(45,printLine("Hello")
(46,(size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^