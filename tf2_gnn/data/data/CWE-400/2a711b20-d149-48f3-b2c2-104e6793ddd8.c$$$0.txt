-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_03_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
91,93
94,95
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,92,93,95
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_03_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_03_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_03_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(15,34,0)
(34,13,0)
(47,5,0)
(29,3,0)
(19,30,0)
(30,13,0)
(2,21,0)
(7,3,0)
(37,41,0)
(38,34,0)
(32,7,0)
(20,6,0)
(33,31,0)
(43,13,0)
(5,41,0)
(52,1,0)
(50,41,0)
(12,30,0)
(6,31,0)
(11,33,0)
(52,45,0)
(9,5,0)
(29,31,0)
(16,40,0)
(3,7,0)
(21,13,0)
(40,33,0)
(39,4,0)
(17,21,0)
(23,16,0)
(40,16,0)
(48,3,0)
(45,15,0)
(18,32,0)
(13,31,0)
(15,45,0)
(34,15,0)
(14,4,0)
(39,36,0)
(13,34,0)
(3,29,0)
(34,38,0)
(0,41,0)
(27,51,0)
(24,31,0)
(32,13,0)
(22,42,0)
(7,32,0)
(44,32,0)
(45,52,0)
(46,45,0)
(21,17,0)
(35,40,0)
(16,13,0)
(28,16,0)
(49,17,0)
(17,6,0)
(8,51,0)
(4,39,0)
(1,52,0)
(10,42,0)
(3,48,0)
(26,21,0)
(43,51,1)
(17,49,1)
(10,51,1)
(16,13,1)
(19,13,1)
(44,6,1)
(3,48,1)
(20,17,1)
(18,44,1)
(17,21,1)
(2,33,1)
(30,13,1)
(12,19,1)
(52,1,1)
(4,14,1)
(28,39,1)
(16,23,1)
(40,16,1)
(13,34,1)
(6,20,1)
(5,47,1)
(28,30,1)
(29,3,1)
(34,38,1)
(45,52,1)
(22,10,1)
(21,13,1)
(51,8,1)
(23,28,1)
(11,40,1)
(47,9,1)
(35,16,1)
(3,7,1)
(32,18,1)
(32,13,1)
(14,30,1)
(33,11,1)
(25,42,1)
(27,5,1)
(42,22,1)
(52,46,1)
(7,32,1)
(10,29,1)
(34,15,1)
(39,4,1)
(26,2,1)
(49,21,1)
(15,45,1)
(46,43,1)
(40,35,1)
(30,12,1)
(8,27,1)
(21,26,1)
(3,51,2)
(46,51,2)
(32,13,2)
(16,51,2)
(19,51,2)
(40,16,2)
(29,51,2)
(45,51,2)
(13,51,2)
(18,51,2)
(34,15,2)
(15,51,2)
(17,21,2)
(11,51,2)
(15,45,2)
(20,51,2)
(35,51,2)
(2,51,2)
(45,52,2)
(29,3,2)
(49,51,2)
(14,30,2)
(17,51,2)
(16,13,2)
(12,51,2)
(52,1,2)
(21,51,2)
(4,30,2)
(23,51,2)
(3,7,2)
(32,51,2)
(30,51,2)
(39,4,2)
(28,51,2)
(3,48,2)
(40,51,2)
(6,51,2)
(33,51,2)
(13,34,2)
(21,13,2)
(26,51,2)
(7,32,2)
(7,51,2)
(44,51,2)
(34,38,2)
(52,51,2)
(43,51,2)
(30,13,2)
(34,51,2)
(39,30,2)
-----------------------------------
(0,data)
(1,struct _twoIntsStruct)
(2,data)
(3,(twoIntsStruct *)
(4,-1)
(5,data = NULL)
(6,data[0].intTwo = 0)
(7,&data[0])
(8,5)
(9,data)
(10,5)
(11,0)
(12,NULL)
(13,data = (struct _twoIntsStruct *)
(14,1)
(15,malloc(100*sizeof(struct _twoIntsStruct)
(16,data[0])
(17,data[0].intTwo)
(18,0)
(19,data)
(20,0)
(21,data[0])
(22,5)
(23,0)
(24,if (data == NULL)
(25,RET)
(26,0)
(27,5)
(28,data)
(29,printStructLine((twoIntsStruct *)
(30,data == NULL)
(31,)
(32,data[0])
(33,data[0].intOne = 0)
(34,(struct _twoIntsStruct *)
(35,intOne)
(36,)
(37,if(5==5)
(38,struct _twoIntsStruct *)
(39,exit(-1)
(40,data[0].intOne)
(41,)
(42,5==5)
(43,data)
(44,data)
(45,100*sizeof(struct _twoIntsStruct)
(46,100)
(47,NULL)
(48,twoIntsStruct *)
(49,intTwo)
(50,if(5==5)
(51,5==5)
(52,sizeof(struct _twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^