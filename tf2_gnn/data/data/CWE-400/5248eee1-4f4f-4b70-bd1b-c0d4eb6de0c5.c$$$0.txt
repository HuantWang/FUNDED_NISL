-----label-----
1
-----code-----
static void badSink(size_t data)
{
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
41,42
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,14,16,17,21,24,26,31,34,36,39,42,45,46,50,52,57,59,63,65,67,71,73,77,79,84,85
-----computeFrom-----
19,20
19,21
29,30
29,31
40,41
40,42
48,49
48,50
-----guardedBy-----
26,67
21,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(size_t data){    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
badSink(size_t data)
badSink
size_t data
size_t
size_t
data
data
{    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(19,32,0)
(22,28,0)
(31,27,0)
(32,7,0)
(17,34,0)
(30,24,0)
(32,28,0)
(8,7,0)
(0,12,0)
(24,35,0)
(27,31,0)
(10,1,0)
(31,37,0)
(19,28,0)
(20,32,0)
(25,27,0)
(22,32,0)
(34,16,0)
(12,37,0)
(9,24,0)
(11,1,0)
(7,32,0)
(6,33,0)
(12,36,0)
(14,12,0)
(36,12,0)
(7,0,0)
(33,28,0)
(33,32,0)
(0,7,0)
(5,36,0)
(29,28,0)
(15,13,0)
(12,0,0)
(7,8,0)
(13,32,0)
(10,2,0)
(1,10,0)
(21,22,0)
(23,13,0)
(18,19,0)
(4,33,0)
(3,31,0)
(26,22,1)
(17,31,1)
(33,32,1)
(36,5,1)
(18,33,1)
(31,27,1)
(7,8,1)
(23,32,1)
(20,31,1)
(33,6,1)
(13,15,1)
(1,11,1)
(32,7,1)
(25,3,1)
(7,0,1)
(14,20,1)
(12,36,1)
(19,32,1)
(27,25,1)
(26,34,1)
(34,17,1)
(6,4,1)
(0,12,1)
(10,1,1)
(5,14,1)
(22,32,1)
(19,18,1)
(21,19,1)
(13,32,1)
(31,37,1)
(11,13,1)
(15,23,1)
(12,37,1)
(4,13,1)
(4,10,1)
(22,21,1)
(21,31,2)
(34,31,2)
(22,32,2)
(33,31,2)
(20,31,2)
(19,32,2)
(1,13,2)
(7,0,2)
(12,31,2)
(13,32,2)
(11,13,2)
(22,31,2)
(6,31,2)
(7,8,2)
(36,31,2)
(15,31,2)
(0,12,2)
(14,31,2)
(32,31,2)
(12,36,2)
(23,31,2)
(0,31,2)
(31,27,2)
(12,37,2)
(17,31,2)
(31,37,2)
(32,7,2)
(10,1,2)
(5,31,2)
(4,31,2)
(13,31,2)
(18,31,2)
(10,13,2)
(7,31,2)
(19,31,2)
(33,32,2)
-----------------------------------
(0,malloc(data*sizeof(wchar_t)
(1,-1)
(2,)
(3,data)
(4,myString)
(5,wchar_t)
(6,HELLO_STRING)
(7,(wchar_t *)
(8,wchar_t *)
(9,myString)
(10,exit(-1)
(11,1)
(12,data*sizeof(wchar_t)
(13,myString == NULL)
(14,data)
(15,NULL)
(16,)
(17,"Input is less than the length of the source string")
(18,myString)
(19,printWLine(myString)
(20,myString)
(21,myString)
(22,free(myString)
(23,myString)
(24,)
(25,HELLO_STRING)
(26,RET)
(27,wcslen(HELLO_STRING)
(28,)
(29,if (myString == NULL)
(30,if (data > wcslen(HELLO_STRING)
(31,data > wcslen(HELLO_STRING)
(32,myString = (wchar_t *)
(33,wcscpy(myString, HELLO_STRING)
(34,printLine("Input is less than the length of the source string")
(35,)
(36,sizeof(wchar_t)
(37,size_t data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^