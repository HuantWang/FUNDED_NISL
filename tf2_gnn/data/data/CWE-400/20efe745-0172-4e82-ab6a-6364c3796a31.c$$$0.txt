-----label-----
0
-----code-----
int main(int argc, char **argv)
{
	parse_cmd_opts(argc, argv);
	rootfd = open(server_root, O_RDONLY);
	if(rootfd == -1) {
		perror("Failed to open server root");
		exit(1);
	}
	
	init_mime_database();

	mailbox = calloc(num_threads, sizeof(int));
	pthread_t threads[num_threads];
	struct threaddata td[num_threads];

	int sock = socket(AF_INET, SOCK_STREAM, 0);
	if(sock == -1) {
		perror("Failed to open socket");
		exit(1);
	}

	int enable = 1;
#ifdef SO_REUSEPORT
	if(setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)) == -1) {
		perror("Failed to set socket options");
		exit(1);
	}
#endif

	if(setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)) == -1) {
		perror("Failed to set socket options");
		exit(1);
	}

	struct sockaddr_in bind_addr;
	bind_addr.sin_family = AF_INET;
	bind_addr.sin_port = htons(8080);
	inet_aton("0.0.0.0", &bind_addr.sin_addr);
	if(bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) == -1) {
		perror("Failed to bind socket");
		exit(1);
	}

	if(listen(sock, 0) == -1) {
		perror("Failed to listen");
		exit(1);
	}

	printf("Listening!\n");

	for(int i=0;i<num_threads;i++) {
		td[i].tid = i;
		pthread_create(&threads[i], NULL, thread_main, &td[i]);
	}

	struct sockaddr_in caddr;
	socklen_t caddr_len;
	int client;
	while((client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)) != -1) {
		handle_client(client);
	}

	perror("Accept failed");
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
11,12
11,13
11,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
15,34
15,35
15,36
15,37
15,38
15,39
15,40
16,17
17,18
17,19
17,20
18,19
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
28,31
29,30
31,32
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
52,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
65,66
66,67
66,68
69,70
70,71
70,72
71,72
73,74
73,75
75,76
76,77
78,79
79,80
79,81
80,81
82,83
82,84
84,85
85,86
87,88
88,89
88,90
90,91
90,92
92,93
93,94
93,95
93,96
93,97
94,95
96,97
98,99
101,102
101,103
102,103
102,104
103,104
105,106
107,108
107,109
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
118,119
119,120
119,121
121,122
121,123
123,124
125,126
125,127
126,127
126,128
127,128
127,129
127,130
127,131
127,132
127,133
128,129
130,131
132,133
134,135
136,137
137,138
139,140
140,141
141,142
143,144
145,146
145,147
146,147
147,148
147,149
148,149
151,152
152,153
152,154
153,154
156,157
157,158
157,159
158,159
160,161
162,163
163,164
163,165
164,165
164,166
165,166
168,169
170,171
171,172
171,173
172,173
172,174
173,174
176,177
176,178
177,178
180,181
181,182
181,183
181,184
182,183
185,186
186,187
186,188
187,188
190,191
190,192
191,192
191,193
192,193
192,194
192,195
192,196
193,194
195,196
197,198
197,199
198,199
198,200
199,200
201,202
203,204
204,205
206,207
207,208
208,209
210,211
212,213
212,214
213,214
214,215
214,216
215,216
218,219
219,220
219,221
220,221
223,224
223,225
224,225
224,226
225,226
225,227
225,228
226,227
228,229
231,232
233,234
233,235
234,235
235,236
235,237
236,237
239,240
240,241
240,242
241,242
244,245
245,246
245,247
246,247
249,250
249,251
249,252
249,253
250,251
251,252
251,253
253,254
253,255
255,256
257,258
257,259
258,259
260,261
262,263
263,264
265,266
265,267
266,267
267,268
267,269
268,269
268,270
269,270
269,271
270,271
272,273
275,276
277,278
278,279
278,280
278,281
278,282
278,283
279,280
281,282
282,283
282,284
283,284
285,286
287,288
289,290
291,292
292,293
292,294
293,294
295,296
297,298
298,299
298,300
299,300
301,302
303,304
304,305
304,306
305,306
307,308
309,310
310,311
310,312
312,313
314,315
314,316
315,316
315,317
316,317
317,318
317,319
318,319
320,321
320,322
320,323
320,324
321,322
323,324
325,326
325,327
326,327
326,328
327,328
329,330
331,332
332,333
334,335
335,336
337,338
339,340
340,341
341,342
341,343
342,343
344,345
346,347
347,348
347,349
348,349
351,352
-----nextToken-----
2,4,6,8,10,12,13,14,19,21,23,27,30,32,34,38,40,45,46,50,51,55,59,62,64,67,68,72,74,77,81,83,86,89,91,95,97,99,100,104,106,111,112,116,117,120,122,124,129,131,133,135,138,142,144,149,150,154,155,159,161,166,167,169,174,175,178,179,183,184,188,189,194,196,200,202,205,209,211,216,217,221,222,227,229,230,232,237,238,242,243,247,248,252,254,256,259,261,264,271,273,274,276,280,284,286,288,290,294,296,300,302,306,308,311,313,319,322,324,328,330,333,336,338,343,345,349,350,352
-----computeFrom-----
25,26
25,27
36,37
36,38
57,58
57,59
102,103
102,104
126,127
126,128
163,164
163,165
171,172
171,173
191,192
191,193
224,225
224,226
257,258
257,259
267,268
267,269
315,316
315,317
317,318
317,319
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int main(int argc, char **argv){	parse_cmd_opts(argc, argv);	rootfd = open(server_root, O_RDONLY);	if(rootfd == -1) {		perror("Failed to open server root");		exit(1);	}		init_mime_database();	mailbox = calloc(num_threads, sizeof(int));	pthread_t threads[num_threads];	struct threaddata td[num_threads];	int sock = socket(AF_INET, SOCK_STREAM, 0);	if(sock == -1) {		perror("Failed to open socket");		exit(1);	}	int enable = 1;#ifdef SO_REUSEPORT	if(setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)) == -1) {		perror("Failed to set socket options");		exit(1);	}#endif	if(setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)) == -1) {		perror("Failed to set socket options");		exit(1);	}	struct sockaddr_in bind_addr;	bind_addr.sin_family = AF_INET;	bind_addr.sin_port = htons(8080);	inet_aton("0.0.0.0", &bind_addr.sin_addr);	if(bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) == -1) {		perror("Failed to bind socket");		exit(1);	}	if(listen(sock, 0) == -1) {		perror("Failed to listen");		exit(1);	}	printf("Listening!\n");	for(int i=0;i<num_threads;i++) {		td[i].tid = i;		pthread_create(&threads[i], NULL, thread_main, &td[i]);	}	struct sockaddr_in caddr;	socklen_t caddr_len;	int client;	while((client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)) != -1) {		handle_client(client);	}	perror("Accept failed");	return 1;}
int
main(int argc, char **argv)
main
int argc
int
argc
argc
char **argv
char
**argv
*
*
argv
{	parse_cmd_opts(argc, argv);	rootfd = open(server_root, O_RDONLY);	if(rootfd == -1) {		perror("Failed to open server root");		exit(1);	}		init_mime_database();	mailbox = calloc(num_threads, sizeof(int));	pthread_t threads[num_threads];	struct threaddata td[num_threads];	int sock = socket(AF_INET, SOCK_STREAM, 0);	if(sock == -1) {		perror("Failed to open socket");		exit(1);	}	int enable = 1;#ifdef SO_REUSEPORT	if(setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)) == -1) {		perror("Failed to set socket options");		exit(1);	}#endif	if(setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)) == -1) {		perror("Failed to set socket options");		exit(1);	}	struct sockaddr_in bind_addr;	bind_addr.sin_family = AF_INET;	bind_addr.sin_port = htons(8080);	inet_aton("0.0.0.0", &bind_addr.sin_addr);	if(bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) == -1) {		perror("Failed to bind socket");		exit(1);	}	if(listen(sock, 0) == -1) {		perror("Failed to listen");		exit(1);	}	printf("Listening!\n");	for(int i=0;i<num_threads;i++) {		td[i].tid = i;		pthread_create(&threads[i], NULL, thread_main, &td[i]);	}	struct sockaddr_in caddr;	socklen_t caddr_len;	int client;	while((client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)) != -1) {		handle_client(client);	}	perror("Accept failed");	return 1;}
parse_cmd_opts(argc, argv);
parse_cmd_opts(argc, argv)
parse_cmd_opts
parse_cmd_opts
argc
argc
argv
argv
rootfd = open(server_root, O_RDONLY);
rootfd = open(server_root, O_RDONLY)
rootfd
rootfd
open(server_root, O_RDONLY)
open
open
server_root
server_root
O_RDONLY
O_RDONLY
if(rootfd == -1) {		perror("Failed to open server root");		exit(1);	}
rootfd == -1
rootfd
rootfd
-1
1
{		perror("Failed to open server root");		exit(1);	}
perror("Failed to open server root");
perror("Failed to open server root")
perror
perror
"Failed to open server root"
exit(1);
exit(1)
exit
exit
1
init_mime_database();
init_mime_database()
init_mime_database
init_mime_database
mailbox = calloc(num_threads, sizeof(int));
mailbox = calloc(num_threads, sizeof(int))
mailbox
mailbox
calloc(num_threads, sizeof(int))
calloc
calloc
num_threads
num_threads
sizeof(int)
int
int

pthread_t threads[num_threads];
pthread_t threads[num_threads];
pthread_t
pthread_t
threads[num_threads]
threads
[num_threads]
num_threads
num_threads
struct threaddata td[num_threads];
struct threaddata td[num_threads];
struct threaddata
threaddata
td[num_threads]
td
[num_threads]
num_threads
num_threads
int sock = socket(AF_INET, SOCK_STREAM, 0);
int sock = socket(AF_INET, SOCK_STREAM, 0);
int
sock = socket(AF_INET, SOCK_STREAM, 0)
sock
= socket(AF_INET, SOCK_STREAM, 0)
socket(AF_INET, SOCK_STREAM, 0)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
0
if(sock == -1) {		perror("Failed to open socket");		exit(1);	}
sock == -1
sock
sock
-1
1
{		perror("Failed to open socket");		exit(1);	}
perror("Failed to open socket");
perror("Failed to open socket")
perror
perror
"Failed to open socket"
exit(1);
exit(1)
exit
exit
1
int enable = 1;
int enable = 1;
int
enable = 1
enable
= 1
1
if(setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)) == -1) {		perror("Failed to set socket options");		exit(1);	}
setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)) == -1
setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable))
setsockopt
setsockopt
sock
sock
SOL_SOCKET
SOL_SOCKET
SO_REUSEADDR
SO_REUSEADDR
&enable
enable
enable
sizeof(enable)
(enable)
enable
enable
-1
1
{		perror("Failed to set socket options");		exit(1);	}
perror("Failed to set socket options");
perror("Failed to set socket options")
perror
perror
"Failed to set socket options"
exit(1);
exit(1)
exit
exit
1
struct sockaddr_in bind_addr;
struct sockaddr_in bind_addr;
struct sockaddr_in
sockaddr_in
bind_addr
bind_addr
bind_addr.sin_family = AF_INET;
bind_addr.sin_family = AF_INET
bind_addr.sin_family
bind_addr
bind_addr
sin_family
AF_INET
AF_INET
bind_addr.sin_port = htons(8080);
bind_addr.sin_port = htons(8080)
bind_addr.sin_port
bind_addr
bind_addr
sin_port
htons(8080)
htons
htons
8080
inet_aton("0.0.0.0", &bind_addr.sin_addr);
inet_aton("0.0.0.0", &bind_addr.sin_addr)
inet_aton
inet_aton
"0.0.0.0"
&bind_addr.sin_addr
bind_addr.sin_addr
bind_addr
bind_addr
sin_addr
if(bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) == -1) {		perror("Failed to bind socket");		exit(1);	}
bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) == -1
bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr))
bind
bind
sock
sock
(struct sockaddr *)&bind_addr
struct sockaddr *
struct sockaddr
sockaddr
*
*
&bind_addr
bind_addr
bind_addr
sizeof(bind_addr)
(bind_addr)
bind_addr
bind_addr
-1
1
{		perror("Failed to bind socket");		exit(1);	}
perror("Failed to bind socket");
perror("Failed to bind socket")
perror
perror
"Failed to bind socket"
exit(1);
exit(1)
exit
exit
1
if(listen(sock, 0) == -1) {		perror("Failed to listen");		exit(1);	}
listen(sock, 0) == -1
listen(sock, 0)
listen
listen
sock
sock
0
-1
1
{		perror("Failed to listen");		exit(1);	}
perror("Failed to listen");
perror("Failed to listen")
perror
perror
"Failed to listen"
exit(1);
exit(1)
exit
exit
1
printf("Listening!\n");
printf("Listening!\n")
printf
printf
"Listening!\n"
for(int i=0;i<num_threads;i++) {		td[i].tid = i;		pthread_create(&threads[i], NULL, thread_main, &td[i]);	}
int i=0;
int i=0;
int
i=0
i
=0
0
i<num_threads
i
i
num_threads
num_threads
i++
i
i
{		td[i].tid = i;		pthread_create(&threads[i], NULL, thread_main, &td[i]);	}
td[i].tid = i;
td[i].tid = i
td[i].tid
td[i]
td
td
i
i
tid
i
i
pthread_create(&threads[i], NULL, thread_main, &td[i]);
pthread_create(&threads[i], NULL, thread_main, &td[i])
pthread_create
pthread_create
&threads[i]
threads[i]
threads
threads
i
i
NULL
NULL
thread_main
thread_main
&td[i]
td[i]
td
td
i
i
struct sockaddr_in caddr;
struct sockaddr_in caddr;
struct sockaddr_in
sockaddr_in
caddr
caddr
socklen_t caddr_len;
socklen_t caddr_len;
socklen_t
socklen_t
caddr_len
caddr_len
int client;
int client;
int
client
client
while((client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)) != -1) {		handle_client(client);	}
(client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)) != -1
(client = accept(sock, (struct sockaddr *)&caddr, &caddr_len))
client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)
client
client
accept(sock, (struct sockaddr *)&caddr, &caddr_len)
accept
accept
sock
sock
(struct sockaddr *)&caddr
struct sockaddr *
struct sockaddr
sockaddr
*
*
&caddr
caddr
caddr
&caddr_len
caddr_len
caddr_len
-1
1
{		handle_client(client);	}
handle_client(client);
handle_client(client)
handle_client
handle_client
client
client
perror("Accept failed");
perror("Accept failed")
perror
perror
"Accept failed"
return 1;
1
-----joern-----
(127,131,0)
(93,78,0)
(21,96,0)
(161,65,0)
(147,78,0)
(100,39,0)
(39,100,0)
(153,78,0)
(63,80,0)
(153,166,0)
(44,173,0)
(94,159,0)
(184,24,0)
(139,126,0)
(161,31,0)
(24,70,0)
(95,100,0)
(164,78,0)
(85,147,0)
(67,131,0)
(137,122,0)
(168,177,0)
(14,78,0)
(70,53,0)
(145,91,0)
(7,78,0)
(0,103,0)
(90,147,0)
(170,161,0)
(118,19,0)
(73,110,0)
(113,29,0)
(51,142,0)
(55,129,0)
(185,10,0)
(77,157,0)
(117,78,0)
(159,94,0)
(104,78,0)
(176,159,0)
(8,123,0)
(116,10,0)
(20,166,0)
(82,98,0)
(46,110,0)
(53,70,0)
(74,26,0)
(131,26,0)
(30,78,0)
(19,70,0)
(136,80,0)
(68,52,0)
(99,109,0)
(88,44,0)
(40,137,0)
(166,153,0)
(70,19,0)
(100,123,0)
(125,161,0)
(111,63,0)
(109,78,0)
(102,38,0)
(4,32,0)
(64,55,0)
(19,158,0)
(98,82,0)
(27,82,0)
(89,46,0)
(163,159,0)
(162,38,0)
(61,112,0)
(101,156,0)
(54,152,0)
(49,96,0)
(10,26,0)
(81,108,0)
(171,78,0)
(156,126,0)
(169,3,0)
(123,8,0)
(156,101,0)
(23,142,0)
(165,173,0)
(129,55,0)
(11,122,0)
(15,78,0)
(155,136,0)
(23,109,0)
(34,94,0)
(126,156,0)
(137,38,0)
(182,38,0)
(130,34,0)
(52,90,0)
(176,91,0)
(41,78,0)
(45,176,0)
(148,79,0)
(128,4,0)
(181,78,0)
(94,34,0)
(177,78,0)
(124,102,0)
(28,31,0)
(132,182,0)
(71,16,0)
(43,21,0)
(52,29,0)
(47,168,0)
(25,78,0)
(91,176,0)
(44,176,0)
(180,93,0)
(133,79,0)
(149,161,0)
(112,39,0)
(172,177,0)
(135,62,0)
(112,38,0)
(65,161,0)
(57,112,0)
(50,179,0)
(156,168,0)
(168,156,0)
(6,75,0)
(60,78,0)
(175,100,0)
(138,156,0)
(120,156,0)
(105,137,0)
(114,19,0)
(107,81,0)
(13,149,0)
(26,79,0)
(31,177,0)
(173,44,0)
(101,177,0)
(8,38,0)
(3,78,0)
(71,38,0)
(183,181,0)
(31,161,0)
(100,16,0)
(48,166,0)
(152,115,0)
(36,78,0)
(3,66,0)
(52,122,0)
(65,17,0)
(178,90,0)
(22,78,0)
(9,182,0)
(5,158,0)
(19,26,0)
(131,127,0)
(144,21,0)
(52,21,0)
(122,137,0)
(123,100,0)
(84,38,0)
(37,52,0)
(56,131,0)
(143,98,0)
(72,78,0)
(10,116,0)
(140,139,0)
(109,23,0)
(176,44,0)
(167,85,0)
(163,92,0)
(87,79,0)
(52,78,0)
(146,78,0)
(174,78,0)
(44,88,0)
(42,159,0)
(19,118,0)
(3,160,0)
(26,78,0)
(106,78,0)
(70,24,0)
(150,78,0)
(147,85,0)
(157,118,0)
(151,3,0)
(1,83,0)
(161,149,0)
(62,32,0)
(103,115,0)
(12,121,0)
(76,129,0)
(18,163,0)
(79,26,0)
(179,127,0)
(142,23,0)
(122,71,0)
(141,101,0)
(161,26,0)
(86,161,0)
(119,116,0)
(39,112,0)
(69,71,0)
(33,17,0)
(121,83,0)
(149,177,0)
(29,55,0)
(59,142,0)
(126,139,0)
(176,26,0)
(134,1,0)
(35,8,0)
(97,73,0)
(52,153,0)
(2,156,0)
(158,19,0)
(159,176,0)
(55,29,0)
(58,153,0)
(118,157,0)
(187,177,0)
(154,8,0)
(127,179,0)
(96,78,0)
(156,26,0)
(29,78,0)
(75,108,0)
(186,90,0)
(17,65,0)
(130,159,1)
(63,111,1)
(139,140,1)
(119,185,1)
(45,42,1)
(127,179,1)
(126,139,1)
(67,56,1)
(68,52,1)
(102,38,1)
(8,38,1)
(149,177,1)
(179,50,1)
(56,73,1)
(157,77,1)
(6,82,1)
(27,153,1)
(156,168,1)
(120,65,1)
(102,124,1)
(5,70,1)
(131,26,1)
(175,95,1)
(8,154,1)
(19,70,1)
(176,26,1)
(90,186,1)
(156,101,1)
(153,166,1)
(125,86,1)
(48,20,1)
(73,97,1)
(10,26,1)
(40,182,1)
(84,181,1)
(180,94,1)
(62,135,1)
(12,1,1)
(106,81,1)
(52,153,1)
(114,109,1)
(106,82,1)
(10,116,1)
(23,142,1)
(161,26,1)
(172,187,1)
(56,118,1)
(93,180,1)
(137,38,1)
(51,59,1)
(9,38,1)
(156,26,1)
(100,123,1)
(0,10,1)
(132,9,1)
(116,119,1)
(81,107,1)
(122,137,1)
(3,160,1)
(155,63,1)
(121,12,1)
(2,138,1)
(34,130,1)
(21,144,1)
(147,85,1)
(71,38,1)
(129,76,1)
(118,19,1)
(52,37,1)
(136,155,1)
(97,46,1)
(165,45,1)
(128,126,1)
(3,169,1)
(82,98,1)
(55,129,1)
(167,90,1)
(20,58,1)
(169,151,1)
(28,149,1)
(65,17,1)
(42,182,1)
(135,4,1)
(141,168,1)
(112,57,1)
(161,31,1)
(122,11,1)
(109,23,1)
(100,39,1)
(131,67,1)
(182,38,1)
(159,176,1)
(111,65,1)
(163,159,1)
(75,6,1)
(123,8,1)
(133,87,1)
(163,18,1)
(143,27,1)
(173,165,1)
(126,156,1)
(44,88,1)
(69,122,1)
(176,91,1)
(162,84,1)
(47,2,1)
(76,64,1)
(11,137,1)
(70,24,1)
(166,48,1)
(186,178,1)
(120,136,1)
(183,127,1)
(61,71,1)
(94,34,1)
(152,54,1)
(85,167,1)
(65,161,1)
(43,126,1)
(98,143,1)
(31,177,1)
(4,128,1)
(49,21,1)
(52,122,1)
(124,100,1)
(44,173,1)
(39,112,1)
(18,94,1)
(107,75,1)
(3,66,1)
(182,132,1)
(181,183,1)
(184,114,1)
(99,147,1)
(46,89,1)
(101,177,1)
(145,44,1)
(176,44,1)
(185,26,1)
(31,28,1)
(59,99,1)
(96,49,1)
(26,79,1)
(118,157,1)
(57,61,1)
(168,47,1)
(127,131,1)
(52,21,1)
(149,13,1)
(33,161,1)
(79,148,1)
(37,93,1)
(19,26,1)
(134,127,1)
(187,10,1)
(112,38,1)
(168,177,1)
(58,3,1)
(148,133,1)
(101,141,1)
(17,33,1)
(52,29,1)
(87,74,1)
(89,118,1)
(71,69,1)
(161,149,1)
(52,90,1)
(142,51,1)
(54,103,1)
(158,5,1)
(91,145,1)
(43,62,1)
(95,39,1)
(170,125,1)
(74,29,1)
(94,159,1)
(183,121,1)
(19,158,1)
(38,162,1)
(24,184,1)
(86,177,1)
(140,156,1)
(144,43,1)
(113,106,1)
(77,19,1)
(187,152,1)
(178,96,1)
(103,0,1)
(50,131,1)
(70,53,1)
(154,35,1)
(1,134,1)
(13,170,1)
(137,105,1)
(29,55,1)
(105,40,1)
(42,163,1)
(138,120,1)
(9,102,1)
(35,175,1)
(64,113,1)
(177,172,1)
(45,94,2)
(35,182,2)
(1,127,2)
(175,182,2)
(102,38,2)
(168,177,2)
(122,137,2)
(39,182,2)
(176,91,2)
(57,182,2)
(23,142,2)
(19,158,2)
(137,182,2)
(4,126,2)
(176,94,2)
(107,82,2)
(103,10,2)
(135,126,2)
(165,94,2)
(123,8,2)
(73,118,2)
(118,157,2)
(75,82,2)
(44,94,2)
(173,94,2)
(132,182,2)
(91,94,2)
(127,179,2)
(70,24,2)
(62,126,2)
(10,26,2)
(163,159,2)
(112,182,2)
(34,94,2)
(94,94,2)
(70,53,2)
(154,182,2)
(176,26,2)
(159,176,2)
(127,131,2)
(8,38,2)
(126,156,2)
(95,182,2)
(6,82,2)
(52,29,2)
(161,26,2)
(40,182,2)
(68,52,2)
(100,39,2)
(82,98,2)
(69,182,2)
(3,66,2)
(63,65,2)
(121,127,2)
(71,182,2)
(100,123,2)
(123,182,2)
(124,182,2)
(71,38,2)
(182,182,2)
(111,65,2)
(122,182,2)
(29,55,2)
(147,85,2)
(0,10,2)
(52,90,2)
(159,94,2)
(176,44,2)
(39,112,2)
(145,94,2)
(126,139,2)
(134,127,2)
(94,159,2)
(101,177,2)
(65,161,2)
(81,82,2)
(156,26,2)
(8,182,2)
(155,65,2)
(44,88,2)
(182,38,2)
(161,149,2)
(11,182,2)
(12,127,2)
(137,38,2)
(54,10,2)
(94,34,2)
(42,94,2)
(52,153,2)
(10,116,2)
(109,23,2)
(163,94,2)
(55,129,2)
(61,182,2)
(102,182,2)
(52,21,2)
(18,94,2)
(3,160,2)
(128,126,2)
(153,166,2)
(31,177,2)
(26,79,2)
(149,177,2)
(19,70,2)
(156,101,2)
(89,118,2)
(97,118,2)
(44,173,2)
(152,10,2)
(65,17,2)
(52,122,2)
(19,26,2)
(118,19,2)
(156,168,2)
(136,65,2)
(131,26,2)
(46,118,2)
(130,94,2)
(100,182,2)
(9,182,2)
(161,31,2)
(105,182,2)
(112,38,2)
-----------------------------------
(0,"Failed to open socket")
(1,perror("Failed to listen")
(2,SO_REUSEADDR)
(3,parse_cmd_opts(argc, argv)
(4,perror("Failed to set socket options")
(5,bind_addr)
(6,"Failed to open server root")
(7,i)
(8,td[i])
(9,i)
(10,sock == -1)
(11,tid)
(12,1)
(13,enable)
(14,if(setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)
(15,if(rootfd == -1)
(16,)
(17,-1)
(18,client)
(19,bind(sock, (struct sockaddr *)
(20,server_root)
(21,bind_addr.sin_family)
(22,sock)
(23,&bind_addr.sin_addr)
(24,&bind_addr)
(25,caddr)
(26,sock = socket(AF_INET, SOCK_STREAM, 0)
(27,rootfd)
(28,enable)
(29,mailbox = calloc(num_threads, sizeof(int)
(30,client)
(31,sizeof(enable)
(32,)
(33,1)
(34,-1)
(35,td)
(36,if(listen(sock, 0)
(37,1)
(38,i=0)
(39,&threads[i])
(40,td)
(41,td)
(42,client)
(43,bind_addr)
(44,(struct sockaddr *)
(45,sock)
(46,perror("Failed to bind socket")
(47,enable)
(48,O_RDONLY)
(49,AF_INET)
(50,1)
(51,sin_addr)
(52,return 1;)
(53,struct sockaddr *)
(54,1)
(55,calloc(num_threads, sizeof(int)
(56,sock)
(57,i)
(58,rootfd)
(59,bind_addr)
(60,enable)
(61,threads)
(62,exit(1)
(63,perror("Failed to set socket options")
(64,num_threads)
(65,setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)
(66,int argc)
(67,0)
(68,RET)
(69,i)
(70,(struct sockaddr *)
(71,td[i].tid = i)
(72,bind_addr)
(73,exit(1)
(74,sock)
(75,perror("Failed to open server root")
(76,int)
(77,1)
(78,)
(79,socket(AF_INET, SOCK_STREAM, 0)
(80,)
(81,exit(1)
(82,rootfd == -1)
(83,)
(84,i)
(85,htons(8080)
(86,sock)
(87,AF_INET)
(88,struct sockaddr *)
(89,"Failed to bind socket")
(90,bind_addr.sin_port)
(91,&caddr_len)
(92,)
(93,perror("Accept failed")
(94,(client = accept(sock, (struct sockaddr *)
(95,NULL)
(96,bind_addr.sin_family = AF_INET)
(97,1)
(98,-1)
(99,"0.0.0.0")
(100,pthread_create(&threads[i], NULL, thread_main, &td[i])
(101,sizeof(enable)
(102,i++)
(103,perror("Failed to open socket")
(104,if(bind(sock, (struct sockaddr *)
(105,i)
(106,init_mime_database()
(107,1)
(108,)
(109,inet_aton("0.0.0.0", &bind_addr.sin_addr)
(110,)
(111,"Failed to set socket options")
(112,threads[i])
(113,mailbox)
(114,sock)
(115,)
(116,-1)
(117,caddr_len)
(118,bind(sock, (struct sockaddr *)
(119,1)
(120,sock)
(121,exit(1)
(122,td[i].tid)
(123,&td[i])
(124,i)
(125,SOL_SOCKET)
(126,setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)
(127,listen(sock, 0)
(128,"Failed to set socket options")
(129,sizeof(int)
(130,1)
(131,listen(sock, 0)
(132,num_threads)
(133,SOCK_STREAM)
(134,"Failed to listen")
(135,1)
(136,exit(1)
(137,td[i])
(138,SOL_SOCKET)
(139,-1)
(140,1)
(141,enable)
(142,bind_addr.sin_addr)
(143,1)
(144,sin_family)
(145,caddr_len)
(146,threads)
(147,bind_addr.sin_port = htons(8080)
(148,0)
(149,&enable)
(150,for(int i=0;i<num_threads;i++)
(151,argc)
(152,exit(1)
(153,rootfd = open(server_root, O_RDONLY)
(154,i)
(155,1)
(156,setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)
(157,-1)
(158,sizeof(bind_addr)
(159,client = accept(sock, (struct sockaddr *)
(160,char **argv)
(161,setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)
(162,0)
(163,handle_client(client)
(164,if(sock == -1)
(165,caddr)
(166,open(server_root, O_RDONLY)
(167,8080)
(168,&enable)
(169,argv)
(170,SO_REUSEPORT)
(171,while((client = accept(sock, (struct sockaddr *)
(172,1)
(173,&caddr)
(174,if(setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)
(175,thread_main)
(176,accept(sock, (struct sockaddr *)
(177,enable = 1)
(178,bind_addr)
(179,-1)
(180,"Accept failed")
(181,printf("Listening!\\n")
(182,i<num_threads)
(183,"Listening!\\n")
(184,bind_addr)
(185,sock)
(186,sin_port)
(187,enable)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^