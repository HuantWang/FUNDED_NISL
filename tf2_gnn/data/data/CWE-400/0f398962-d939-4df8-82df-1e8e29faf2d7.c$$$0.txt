-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_goodB2GSink(size_t dataArray[])
{
    size_t data = dataArray[2];
    {
        char * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING) && data < 100)
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
27,28
27,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
40,42
41,42
44,45
44,46
44,47
44,48
44,49
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
52,53
54,55
54,56
55,56
57,58
57,59
58,59
60,61
61,62
61,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
78,81
79,80
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,7,9,10,15,17,21,22,26,28,29,34,37,39,42,43,48,51,53,56,59,62,63,67,69,74,76,80,82,84,88,90,94,96,101,102
-----computeFrom-----
31,32
31,33
32,33
32,34
40,41
40,42
46,47
46,48
57,58
57,59
65,66
65,67
-----guardedBy-----
39,84
42,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_goodB2GSink(size_t dataArray[]){    size_t data = dataArray[2];    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_goodB2GSink(size_t dataArray[])
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_goodB2GSink
size_t dataArray[]
size_t
size_t
dataArray[]
dataArray
[]
{    size_t data = dataArray[2];    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data = dataArray[2];
size_t data = dataArray[2];
size_t
size_t
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(14,12,0)
(20,17,0)
(25,47,0)
(12,42,0)
(10,47,0)
(34,1,0)
(21,36,0)
(38,17,0)
(7,33,0)
(3,7,0)
(33,7,0)
(34,21,0)
(27,5,0)
(9,41,0)
(30,14,0)
(31,5,0)
(14,7,0)
(39,14,0)
(0,41,0)
(28,24,0)
(42,7,0)
(17,26,0)
(22,2,0)
(11,36,0)
(32,35,0)
(19,33,0)
(42,12,0)
(24,21,0)
(37,21,0)
(26,17,0)
(15,21,0)
(7,47,0)
(26,34,0)
(13,10,0)
(23,42,0)
(24,36,0)
(8,2,0)
(45,42,0)
(46,15,0)
(29,30,0)
(15,36,0)
(27,44,0)
(5,27,0)
(4,33,0)
(2,21,0)
(16,10,0)
(21,34,0)
(34,26,0)
(1,34,0)
(12,14,0)
(17,38,0)
(41,21,0)
(2,36,0)
(33,43,0)
(14,30,0)
(6,32,0)
(17,7,0)
(18,38,0)
(41,21,1)
(46,24,1)
(26,17,1)
(39,7,1)
(17,38,1)
(33,19,1)
(45,23,1)
(40,32,1)
(29,39,1)
(12,14,1)
(32,6,1)
(0,21,1)
(21,34,1)
(15,46,1)
(7,33,1)
(24,21,1)
(33,43,1)
(37,12,1)
(17,7,1)
(42,7,1)
(14,7,1)
(20,37,1)
(28,2,1)
(4,3,1)
(6,12,1)
(24,28,1)
(41,9,1)
(19,4,1)
(38,18,1)
(34,1,1)
(2,8,1)
(23,14,1)
(5,31,1)
(31,41,1)
(9,0,1)
(22,27,1)
(42,45,1)
(30,29,1)
(14,30,1)
(15,21,1)
(2,21,1)
(12,42,1)
(40,15,1)
(34,26,1)
(22,41,1)
(8,22,1)
(18,20,1)
(27,5,1)
(46,12,2)
(33,43,2)
(26,12,2)
(27,5,2)
(21,34,2)
(21,12,2)
(23,14,2)
(24,12,2)
(37,12,2)
(15,21,2)
(34,12,2)
(24,21,2)
(45,14,2)
(22,12,2)
(14,30,2)
(18,12,2)
(14,7,2)
(27,41,2)
(32,12,2)
(7,33,2)
(15,12,2)
(38,12,2)
(41,12,2)
(20,12,2)
(17,38,2)
(0,12,2)
(6,12,2)
(34,1,2)
(42,7,2)
(28,12,2)
(42,14,2)
(5,41,2)
(8,12,2)
(17,7,2)
(12,42,2)
(31,41,2)
(9,12,2)
(26,17,2)
(34,26,2)
(2,12,2)
(41,21,2)
(2,21,2)
(17,12,2)
(12,14,2)
-----------------------------------
(0,myString)
(1,char *)
(2,strcpy(myString, HELLO_STRING)
(3,data)
(4,dataArray)
(5,-1)
(6,"Input is less than the length of the source string or too large")
(7,data = dataArray[2])
(8,HELLO_STRING)
(9,NULL)
(10,)
(11,if (myString == NULL)
(12,data > strlen(HELLO_STRING)
(13,if (data > strlen(HELLO_STRING)
(14,data > strlen(HELLO_STRING)
(15,free(myString)
(16,myString)
(17,data*sizeof(char)
(18,char)
(19,2)
(20,data)
(21,myString = (char *)
(22,myString)
(23,data)
(24,printLine(myString)
(25,data)
(26,malloc(data*sizeof(char)
(27,exit(-1)
(28,myString)
(29,HELLO_STRING)
(30,strlen(HELLO_STRING)
(31,1)
(32,printLine("Input is less than the length of the source string or too large")
(33,dataArray[2])
(34,(char *)
(35,)
(36,)
(37,myString)
(38,sizeof(char)
(39,data)
(40,RET)
(41,myString == NULL)
(42,data < 100)
(43,size_t dataArray[])
(44,)
(45,100)
(46,myString)
(47,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^