-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_41_bad()
{
    twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
70,71
71,72
71,73
72,73
74,75
75,76
75,77
76,77
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,57,58,59,60,66,67,68,69,73,77,78,82,84
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
53,54
53,55
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_41_bad(){    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    badSink(data);}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_41_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_41_bad
{    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    badSink(data);}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
badSink(data);
badSink(data)
badSink
badSink
data
data
-----joern-----
(40,30,0)
(2,31,0)
(31,10,0)
(27,30,0)
(32,6,0)
(43,19,0)
(34,12,0)
(7,8,0)
(17,24,0)
(19,12,0)
(25,10,0)
(6,37,0)
(29,12,0)
(32,3,0)
(10,3,0)
(37,12,0)
(3,17,0)
(39,34,0)
(6,32,0)
(27,3,0)
(18,17,0)
(5,37,0)
(9,38,0)
(24,16,0)
(33,1,0)
(23,33,0)
(16,38,0)
(0,12,0)
(4,27,0)
(28,32,0)
(30,27,0)
(30,40,0)
(16,24,0)
(11,10,0)
(33,23,0)
(10,31,0)
(17,3,0)
(8,3,0)
(38,16,0)
(35,34,0)
(15,12,0)
(26,27,0)
(31,19,0)
(20,32,0)
(21,16,0)
(36,8,0)
(42,23,0)
(41,29,0)
(13,3,0)
(17,18,0)
(3,12,0)
(24,17,0)
(29,3,0)
(22,6,0)
(40,12,0)
(20,33,1)
(38,9,1)
(5,6,1)
(3,17,1)
(19,43,1)
(26,19,1)
(8,3,1)
(31,2,1)
(6,32,1)
(16,38,1)
(43,31,1)
(6,22,1)
(13,34,1)
(41,40,1)
(33,23,1)
(17,18,1)
(30,27,1)
(4,26,1)
(27,4,1)
(32,3,1)
(9,21,1)
(25,11,1)
(31,10,1)
(8,7,1)
(42,8,1)
(10,3,1)
(36,3,1)
(2,10,1)
(34,39,1)
(29,41,1)
(27,3,1)
(37,5,1)
(39,35,1)
(10,25,1)
(11,37,1)
(24,16,1)
(22,32,1)
(23,42,1)
(21,13,1)
(32,28,1)
(29,3,1)
(28,20,1)
(14,29,1)
(17,24,1)
(40,30,1)
(7,36,1)
(20,8,1)
(8,3,2)
(24,16,2)
(3,17,2)
(6,32,2)
(40,30,2)
(42,8,2)
(29,3,2)
(32,3,2)
(33,23,2)
(30,27,2)
(17,18,2)
(10,3,2)
(17,24,2)
(27,3,2)
(16,38,2)
(33,8,2)
(23,8,2)
(31,10,2)
-----------------------------------
(0,data)
(1,)
(2,intTwo)
(3,data = (twoIntsStruct *)
(4,0)
(5,0)
(6,data[0].intOne)
(7,NULL)
(8,data == NULL)
(9,twoIntsStruct)
(10,data[0])
(11,data)
(12,)
(13,data)
(14,RET)
(15,if (data == NULL)
(16,100*sizeof(twoIntsStruct)
(17,(twoIntsStruct *)
(18,twoIntsStruct *)
(19,data[0].intTwo = 0)
(20,data)
(21,100)
(22,intOne)
(23,-1)
(24,malloc(100*sizeof(twoIntsStruct)
(25,0)
(26,data)
(27,data[0])
(28,0)
(29,badSink(data)
(30,&data[0])
(31,data[0].intTwo)
(32,data[0])
(33,exit(-1)
(34,data = NULL)
(35,data)
(36,data)
(37,data[0].intOne = 0)
(38,sizeof(twoIntsStruct)
(39,NULL)
(40,printStructLine(&data[0])
(41,data)
(42,1)
(43,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^