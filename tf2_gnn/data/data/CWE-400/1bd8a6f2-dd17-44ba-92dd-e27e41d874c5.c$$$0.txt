-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_09_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,87,89
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_09_bad(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_09_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_09_bad
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(46,2,0)
(41,9,0)
(29,42,0)
(11,6,0)
(2,44,0)
(6,15,0)
(31,9,0)
(12,31,0)
(38,23,0)
(5,10,0)
(40,9,0)
(30,28,0)
(5,31,0)
(39,43,0)
(13,44,0)
(42,31,0)
(42,38,0)
(38,2,0)
(6,31,0)
(20,44,0)
(31,42,0)
(23,43,0)
(34,9,0)
(32,0,0)
(21,27,0)
(15,34,0)
(22,10,0)
(41,35,0)
(43,23,0)
(37,2,0)
(35,41,0)
(47,19,0)
(45,27,0)
(3,5,0)
(26,0,0)
(7,28,0)
(19,9,0)
(0,31,0)
(36,5,0)
(42,29,0)
(24,15,0)
(14,34,0)
(38,42,0)
(10,5,0)
(35,27,0)
(15,6,0)
(18,44,0)
(30,17,0)
(1,23,0)
(27,31,0)
(23,38,0)
(28,30,0)
(16,38,0)
(10,19,0)
(27,35,0)
(4,6,0)
(25,2,1)
(16,12,1)
(38,2,1)
(0,32,1)
(7,0,1)
(34,14,1)
(42,38,1)
(24,6,1)
(33,8,1)
(10,22,1)
(14,15,1)
(12,25,1)
(43,39,1)
(41,35,1)
(6,31,1)
(5,3,1)
(22,5,1)
(47,10,1)
(4,19,1)
(26,31,1)
(15,6,1)
(3,36,1)
(27,45,1)
(46,37,1)
(36,30,1)
(8,41,1)
(6,11,1)
(28,7,1)
(15,24,1)
(27,31,1)
(8,25,1)
(10,5,1)
(1,16,1)
(38,23,1)
(23,43,1)
(42,29,1)
(32,26,1)
(39,1,1)
(2,46,1)
(45,21,1)
(21,34,1)
(11,4,1)
(0,31,1)
(36,0,1)
(35,27,1)
(31,42,1)
(19,47,1)
(5,31,1)
(30,28,1)
(30,28,2)
(45,25,2)
(15,6,2)
(27,25,2)
(42,25,2)
(7,0,2)
(26,25,2)
(32,25,2)
(27,31,2)
(47,25,2)
(41,35,2)
(23,43,2)
(19,25,2)
(30,0,2)
(39,25,2)
(36,25,2)
(41,25,2)
(3,25,2)
(5,25,2)
(16,25,2)
(38,23,2)
(24,25,2)
(21,25,2)
(0,31,2)
(0,25,2)
(15,25,2)
(34,25,2)
(35,25,2)
(43,25,2)
(35,27,2)
(31,25,2)
(14,25,2)
(12,25,2)
(28,0,2)
(31,42,2)
(1,25,2)
(10,5,2)
(22,25,2)
(4,25,2)
(6,25,2)
(10,25,2)
(11,25,2)
(23,25,2)
(38,25,2)
(42,38,2)
(42,29,2)
(38,2,2)
(6,31,2)
(5,31,2)
-----------------------------------
(0,data == NULL)
(1,100)
(2,data = NULL)
(3,0)
(4,data)
(5,data[0])
(6,data[0])
(7,1)
(8,GLOBAL_CONST_TRUE)
(9,)
(10,data[0].intOne)
(11,0)
(12,data)
(13,if(GLOBAL_CONST_TRUE)
(14,0)
(15,data[0].intTwo)
(16,data)
(17,)
(18,data)
(19,data[0].intOne = 0)
(20,if(GLOBAL_CONST_TRUE)
(21,data)
(22,intOne)
(23,100*sizeof(twoIntsStruct)
(24,intTwo)
(25,GLOBAL_CONST_TRUE)
(26,data)
(27,data[0])
(28,-1)
(29,twoIntsStruct *)
(30,exit(-1)
(31,data = (twoIntsStruct *)
(32,NULL)
(33,RET)
(34,data[0].intTwo = 0)
(35,&data[0])
(36,data)
(37,data)
(38,realloc(data, 100*sizeof(twoIntsStruct)
(39,twoIntsStruct)
(40,if (data == NULL)
(41,printStructLine(&data[0])
(42,(twoIntsStruct *)
(43,sizeof(twoIntsStruct)
(44,)
(45,0)
(46,NULL)
(47,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^