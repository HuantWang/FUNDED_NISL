-----label-----
1
-----code-----
static void init_disabled_events(xt_t *xt)
{
	switch (xt->operation) {
	case OP_PUT:
	case OP_ATOMIC:
		if (xt->ack_req != PTL_NO_ACK_REQ)
			xt->event_mask |= XT_ACK_EVENT;
		break;
	case OP_GET:
	case OP_FETCH:
	case OP_SWAP:
		if (xt->ack_req != PTL_NO_ACK_REQ)
			xt->event_mask |= XT_REPLY_EVENT;
		break;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
12,13
12,14
13,14
13,15
14,15
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
18,19
19,20
21,22
22,23
24,25
24,26
25,26
25,27
26,27
26,28
27,28
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
41,42
42,43
44,45
45,46
47,48
48,49
50,51
50,52
51,52
51,53
52,53
52,54
53,54
56,57
58,59
59,60
59,61
60,61
60,62
61,62
64,65
-----nextToken-----
2,4,7,9,10,15,16,20,23,28,29,31,36,37,39,40,43,46,49,54,55,57,62,63,65,66
-----computeFrom-----
25,26
25,27
33,34
33,35
51,52
51,53
59,60
59,61
-----guardedBy-----
28,36
54,62
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void init_disabled_events(xt_t *xt){	switch (xt->operation) {	case OP_PUT:	case OP_ATOMIC:		if (xt->ack_req != PTL_NO_ACK_REQ)			xt->event_mask |= XT_ACK_EVENT;		break;	case OP_GET:	case OP_FETCH:	case OP_SWAP:		if (xt->ack_req != PTL_NO_ACK_REQ)			xt->event_mask |= XT_REPLY_EVENT;		break;	}}
static void
init_disabled_events(xt_t *xt)
init_disabled_events
xt_t *xt
xt_t
xt_t
*xt
*
xt
{	switch (xt->operation) {	case OP_PUT:	case OP_ATOMIC:		if (xt->ack_req != PTL_NO_ACK_REQ)			xt->event_mask |= XT_ACK_EVENT;		break;	case OP_GET:	case OP_FETCH:	case OP_SWAP:		if (xt->ack_req != PTL_NO_ACK_REQ)			xt->event_mask |= XT_REPLY_EVENT;		break;	}}
switch (xt->operation) {	case OP_PUT:	case OP_ATOMIC:		if (xt->ack_req != PTL_NO_ACK_REQ)			xt->event_mask |= XT_ACK_EVENT;		break;	case OP_GET:	case OP_FETCH:	case OP_SWAP:		if (xt->ack_req != PTL_NO_ACK_REQ)			xt->event_mask |= XT_REPLY_EVENT;		break;	}
xt->operation
xt
xt
operation
{	case OP_PUT:	case OP_ATOMIC:		if (xt->ack_req != PTL_NO_ACK_REQ)			xt->event_mask |= XT_ACK_EVENT;		break;	case OP_GET:	case OP_FETCH:	case OP_SWAP:		if (xt->ack_req != PTL_NO_ACK_REQ)			xt->event_mask |= XT_REPLY_EVENT;		break;	}
case OP_PUT:
OP_PUT
OP_PUT
case OP_ATOMIC:
OP_ATOMIC
OP_ATOMIC
if (xt->ack_req != PTL_NO_ACK_REQ)			xt->event_mask |= XT_ACK_EVENT;
xt->ack_req != PTL_NO_ACK_REQ
xt->ack_req
xt
xt
ack_req
PTL_NO_ACK_REQ
PTL_NO_ACK_REQ
xt->event_mask |= XT_ACK_EVENT;
xt->event_mask |= XT_ACK_EVENT
xt->event_mask
xt
xt
event_mask
XT_ACK_EVENT
XT_ACK_EVENT
break;
case OP_GET:
OP_GET
OP_GET
case OP_FETCH:
OP_FETCH
OP_FETCH
case OP_SWAP:
OP_SWAP
OP_SWAP
if (xt->ack_req != PTL_NO_ACK_REQ)			xt->event_mask |= XT_REPLY_EVENT;
xt->ack_req != PTL_NO_ACK_REQ
xt->ack_req
xt
xt
ack_req
PTL_NO_ACK_REQ
PTL_NO_ACK_REQ
xt->event_mask |= XT_REPLY_EVENT;
xt->event_mask |= XT_REPLY_EVENT
xt->event_mask
xt
xt
event_mask
XT_REPLY_EVENT
XT_REPLY_EVENT
break;
-----joern-----
(32,27,0)
(24,27,0)
(19,20,0)
(12,31,0)
(13,27,0)
(4,10,0)
(36,27,0)
(25,17,0)
(35,26,0)
(1,27,0)
(17,14,0)
(3,18,0)
(6,0,0)
(20,8,0)
(34,31,0)
(33,20,0)
(14,8,0)
(9,27,0)
(31,8,0)
(15,8,0)
(31,0,0)
(22,27,0)
(23,26,0)
(20,10,0)
(23,8,0)
(11,27,0)
(14,17,0)
(28,15,0)
(16,15,0)
(7,23,0)
(29,27,0)
(30,14,0)
(10,20,0)
(21,23,0)
(5,14,0)
(5,30,1)
(20,19,1)
(4,20,1)
(36,17,1)
(12,17,1)
(31,34,1)
(23,8,1)
(14,5,1)
(31,8,1)
(10,4,1)
(15,8,1)
(20,8,1)
(1,26,1)
(36,0,1)
(30,15,1)
(19,33,1)
(2,1,1)
(21,7,1)
(34,12,1)
(2,36,1)
(23,21,1)
(33,15,1)
(35,23,1)
(26,35,1)
(14,8,1)
(6,31,1)
(15,28,1)
(17,14,1)
(10,20,1)
(0,6,1)
(28,16,1)
(1,10,1)
(25,14,1)
(17,25,1)
(2,15,1)
(7,10,1)
(10,20,2)
(15,8,2)
(19,15,2)
(4,15,2)
(7,10,2)
(23,8,2)
(26,10,2)
(20,8,2)
(14,8,2)
(6,17,2)
(17,14,2)
(33,15,2)
(36,15,2)
(1,15,2)
(20,15,2)
(31,8,2)
(31,17,2)
(21,10,2)
(23,10,2)
(5,15,2)
(12,17,2)
(0,17,2)
(30,15,2)
(25,15,2)
(14,15,2)
(35,10,2)
(10,15,2)
(17,15,2)
(34,17,2)
-----------------------------------
(0,xt->event_mask |= XT_ACK_EVENT)
(1,break;)
(2,RET)
(3,switch (xt->operation)
(4,PTL_NO_ACK_REQ)
(5,ack_req)
(6,XT_ACK_EVENT)
(7,xt)
(8,xt_t *xt)
(9,case OP_FETCH:)
(10,xt->ack_req != PTL_NO_ACK_REQ)
(11,case OP_ATOMIC:)
(12,xt)
(13,case OP_GET:)
(14,xt->ack_req)
(15,xt->operation)
(16,xt)
(17,xt->ack_req != PTL_NO_ACK_REQ)
(18,)
(19,ack_req)
(20,xt->ack_req)
(21,event_mask)
(22,if (xt->ack_req != PTL_NO_ACK_REQ)
(23,xt->event_mask)
(24,case OP_PUT:)
(25,PTL_NO_ACK_REQ)
(26,xt->event_mask |= XT_REPLY_EVENT)
(27,)
(28,operation)
(29,case OP_SWAP:)
(30,xt)
(31,xt->event_mask)
(32,if (xt->ack_req != PTL_NO_ACK_REQ)
(33,xt)
(34,event_mask)
(35,XT_REPLY_EVENT)
(36,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^