-----label-----
0
-----code-----
static void goodG2B()
{
    int64_t * data;
    data = NULL;
    while(1)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
44,46
45,46
49,50
50,51
50,52
51,52
53,54
53,55
54,55
58,59
58,60
60,61
60,62
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,46,47,48,52,55,56,57,59,61,62
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
static void goodG2B(){    int64_t * data;    data = NULL;    while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
static void
goodG2B()
goodG2B
{    int64_t * data;    data = NULL;    while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
1
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(2,11,0)
(13,10,0)
(5,11,0)
(17,8,0)
(10,13,0)
(12,8,0)
(9,16,0)
(20,4,0)
(7,4,0)
(3,24,0)
(23,11,0)
(0,19,0)
(10,18,0)
(18,10,0)
(10,23,0)
(16,24,0)
(27,23,0)
(4,8,0)
(23,10,0)
(22,11,0)
(1,8,0)
(26,23,0)
(24,16,0)
(25,26,0)
(26,5,0)
(5,26,0)
(18,24,0)
(15,26,0)
(24,18,0)
(6,4,1)
(0,14,1)
(16,9,1)
(24,16,1)
(18,24,1)
(26,23,1)
(5,26,1)
(3,27,1)
(9,3,1)
(21,0,1)
(15,25,1)
(14,2,1)
(22,23,1)
(2,5,1)
(7,20,1)
(10,18,1)
(25,22,1)
(10,13,1)
(23,10,1)
(27,6,1)
(21,14,1)
(4,7,1)
(14,6,1)
(26,15,1)
(0,14,2)
(3,6,2)
(10,6,2)
(15,6,2)
(16,6,2)
(23,10,2)
(23,6,2)
(5,6,2)
(26,23,2)
(24,16,2)
(22,6,2)
(18,24,2)
(27,6,2)
(18,6,2)
(26,6,2)
(10,18,2)
(9,6,2)
(2,6,2)
(25,6,2)
(24,6,2)
(10,13,2)
(5,26,2)
-----------------------------------
(0,break;)
(1,while(1)
(2,break;)
(3,100)
(4,data = NULL)
(5,printLongLongLine(data[0])
(6,1)
(7,NULL)
(8,)
(9,int64_t)
(10,(int64_t *)
(11,)
(12,while(1)
(13,int64_t *)
(14,1)
(15,0)
(16,sizeof(int64_t)
(17,data)
(18,ALLOCA(100*sizeof(int64_t)
(19,)
(20,data)
(21,RET)
(22,L)
(23,data = (int64_t *)
(24,100*sizeof(int64_t)
(25,data)
(26,data[0])
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^