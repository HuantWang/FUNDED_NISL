-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_16_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
        break;
    }
    while(1)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,18,23,25,26,29,30,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108,109
-----computeFrom-----
13,14
13,15
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_16_bad(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_16_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_16_bad
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
break;
while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
1
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
-----joern-----
(34,7,0)
(52,43,0)
(32,4,0)
(8,26,0)
(1,17,0)
(16,36,0)
(36,16,0)
(40,24,0)
(43,42,0)
(53,21,0)
(12,52,0)
(17,52,0)
(9,51,0)
(14,26,0)
(44,24,0)
(40,29,0)
(51,52,0)
(4,43,0)
(28,52,0)
(30,0,0)
(49,35,0)
(25,23,0)
(43,4,0)
(32,5,0)
(17,19,0)
(0,41,0)
(2,26,0)
(4,32,0)
(34,23,0)
(21,22,0)
(6,19,0)
(39,5,0)
(35,26,0)
(52,19,0)
(43,52,0)
(46,12,0)
(31,12,0)
(20,52,0)
(45,16,0)
(48,22,0)
(7,35,0)
(38,36,0)
(24,40,0)
(51,19,0)
(3,21,0)
(47,7,0)
(37,51,0)
(20,19,0)
(11,34,0)
(7,34,0)
(13,35,0)
(5,32,0)
(50,32,0)
(42,43,0)
(32,35,0)
(27,20,0)
(18,34,0)
(36,35,0)
(15,35,1)
(4,32,1)
(10,33,1)
(34,7,1)
(50,28,1)
(52,43,1)
(33,15,1)
(0,30,1)
(32,5,1)
(49,13,1)
(43,42,1)
(39,50,1)
(9,12,1)
(36,35,1)
(16,45,1)
(18,15,1)
(35,49,1)
(47,11,1)
(5,39,1)
(37,9,1)
(38,33,1)
(20,27,1)
(1,51,1)
(36,16,1)
(20,52,1)
(7,47,1)
(40,24,1)
(33,25,1)
(51,37,1)
(45,38,1)
(10,48,1)
(12,52,1)
(43,4,1)
(30,36,1)
(51,52,1)
(48,0,1)
(44,12,1)
(7,35,1)
(48,20,1)
(12,46,1)
(17,52,1)
(17,1,1)
(9,40,1)
(27,17,1)
(32,35,1)
(11,18,1)
(46,31,1)
(28,36,1)
(24,44,1)
(25,34,1)
(31,52,1)
(32,5,2)
(32,35,2)
(34,7,2)
(52,36,2)
(47,15,2)
(20,52,2)
(1,36,2)
(34,15,2)
(40,24,2)
(12,52,2)
(31,36,2)
(40,12,2)
(20,36,2)
(36,16,2)
(17,52,2)
(48,33,2)
(32,36,2)
(7,35,2)
(50,36,2)
(45,33,2)
(36,35,2)
(16,33,2)
(39,36,2)
(0,36,2)
(51,52,2)
(28,36,2)
(4,36,2)
(9,36,2)
(12,36,2)
(46,36,2)
(43,4,2)
(11,15,2)
(51,36,2)
(5,36,2)
(7,15,2)
(36,33,2)
(37,36,2)
(43,36,2)
(27,36,2)
(52,43,2)
(25,15,2)
(4,32,2)
(43,42,2)
(44,12,2)
(30,36,2)
(24,12,2)
(38,33,2)
(18,15,2)
(17,36,2)
-----------------------------------
(0,printLine("Input is less than the length of the source string")
(1,myString)
(2,while(1)
(3,myString)
(4,malloc(data*sizeof(wchar_t)
(5,sizeof(wchar_t)
(6,if (myString == NULL)
(7,&data)
(8,while(1)
(9,myString)
(10,RET)
(11,"%zu")
(12,myString == NULL)
(13,data)
(14,data)
(15,1)
(16,wcslen(HELLO_STRING)
(17,printWLine(myString)
(18,stdin)
(19,)
(20,free(myString)
(21,)
(22,)
(23,)
(24,-1)
(25,break;)
(26,)
(27,myString)
(28,myString)
(29,)
(30,"Input is less than the length of the source string")
(31,myString)
(32,data*sizeof(wchar_t)
(33,1)
(34,fscanf(stdin, "%zu", &data)
(35,data = 0)
(36,data > wcslen(HELLO_STRING)
(37,HELLO_STRING)
(38,data)
(39,wchar_t)
(40,exit(-1)
(41,)
(42,wchar_t *)
(43,(wchar_t *)
(44,1)
(45,HELLO_STRING)
(46,NULL)
(47,data)
(48,break;)
(49,0)
(50,data)
(51,wcscpy(myString, HELLO_STRING)
(52,myString = (wchar_t *)
(53,if (data > wcslen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^