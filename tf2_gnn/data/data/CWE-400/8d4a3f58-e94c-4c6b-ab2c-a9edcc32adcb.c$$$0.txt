-----label-----
1
-----code-----
int peer_queue_reply(Peer *sender, const char *destination, uint32_t reply_serial, Message *message) {
        ReplySlot *slot;
        Peer *receiver;
        uint64_t id;
        int r;

        r = unique_name_to_id(destination, &id);
        if (r) {
                if (r > 0)
                        return PEER_E_UNEXPECTED_REPLY;

                return error_fold(r);
        }

        slot = reply_slot_get_by_id(&sender->replies_outgoing, id, reply_serial);
        if (!slot)
                return PEER_E_UNEXPECTED_REPLY;

        receiver = c_container_of(slot->owner, Peer, owned_replies);

        r = connection_queue(&receiver->connection, 0, message);
        if (r)
                return error_fold(r);

        reply_slot_free(slot);

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
17,18
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
51,52
53,54
54,55
54,56
55,56
57,58
57,59
57,60
58,59
60,61
62,63
63,64
65,66
65,67
66,67
68,69
68,70
69,70
69,71
70,71
70,72
71,72
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
87,89
87,90
87,91
88,89
90,91
91,92
91,93
92,93
95,96
97,98
99,100
99,101
100,101
101,102
103,104
104,105
106,107
107,108
107,109
108,109
110,111
110,112
110,113
110,114
111,112
113,114
113,115
114,115
117,118
119,120
121,122
122,123
122,124
123,124
125,126
125,127
125,128
125,129
126,127
128,129
129,130
129,131
130,131
134,135
136,137
136,138
137,138
139,140
140,141
140,142
141,142
143,144
145,146
146,147
146,148
147,148
149,150
151,152
-----nextToken-----
2,4,7,9,10,12,14,15,18,20,23,25,26,31,33,34,38,40,41,45,47,50,52,56,59,61,64,67,72,73,76,80,82,86,89,93,94,96,98,102,105,109,112,115,116,118,120,124,127,131,132,133,135,138,142,144,148,150,152
-----computeFrom-----
54,55
54,56
70,71
70,72
84,85
84,86
107,108
107,109
122,123
122,124
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int peer_queue_reply(Peer *sender, const char *destination, uint32_t reply_serial, Message *message) {        ReplySlot *slot;        Peer *receiver;        uint64_t id;        int r;        r = unique_name_to_id(destination, &id);        if (r) {                if (r > 0)                        return PEER_E_UNEXPECTED_REPLY;                return error_fold(r);        }        slot = reply_slot_get_by_id(&sender->replies_outgoing, id, reply_serial);        if (!slot)                return PEER_E_UNEXPECTED_REPLY;        receiver = c_container_of(slot->owner, Peer, owned_replies);        r = connection_queue(&receiver->connection, 0, message);        if (r)                return error_fold(r);        reply_slot_free(slot);        return 0;}
int
peer_queue_reply(Peer *sender, const char *destination, uint32_t reply_serial, Message *message)
peer_queue_reply
Peer *sender
Peer
Peer
*sender
*
sender
const char *destination
const char
*destination
*
destination
uint32_t reply_serial
uint32_t
uint32_t
reply_serial
reply_serial
Message *message
Message
Message
*message
*
message
{        ReplySlot *slot;        Peer *receiver;        uint64_t id;        int r;        r = unique_name_to_id(destination, &id);        if (r) {                if (r > 0)                        return PEER_E_UNEXPECTED_REPLY;                return error_fold(r);        }        slot = reply_slot_get_by_id(&sender->replies_outgoing, id, reply_serial);        if (!slot)                return PEER_E_UNEXPECTED_REPLY;        receiver = c_container_of(slot->owner, Peer, owned_replies);        r = connection_queue(&receiver->connection, 0, message);        if (r)                return error_fold(r);        reply_slot_free(slot);        return 0;}
ReplySlot *slot;
ReplySlot *slot;
ReplySlot
ReplySlot
*slot
*
slot
Peer *receiver;
Peer *receiver;
Peer
Peer
*receiver
*
receiver
uint64_t id;
uint64_t id;
uint64_t
uint64_t
id
id
int r;
int r;
int
r
r
r = unique_name_to_id(destination, &id);
r = unique_name_to_id(destination, &id)
r
r
unique_name_to_id(destination, &id)
unique_name_to_id
unique_name_to_id
destination
destination
&id
id
id
if (r) {                if (r > 0)                        return PEER_E_UNEXPECTED_REPLY;                return error_fold(r);        }
r
r
{                if (r > 0)                        return PEER_E_UNEXPECTED_REPLY;                return error_fold(r);        }
if (r > 0)                        return PEER_E_UNEXPECTED_REPLY;
r > 0
r
r
0
return PEER_E_UNEXPECTED_REPLY;
PEER_E_UNEXPECTED_REPLY
PEER_E_UNEXPECTED_REPLY
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
slot = reply_slot_get_by_id(&sender->replies_outgoing, id, reply_serial);
slot = reply_slot_get_by_id(&sender->replies_outgoing, id, reply_serial)
slot
slot
reply_slot_get_by_id(&sender->replies_outgoing, id, reply_serial)
reply_slot_get_by_id
reply_slot_get_by_id
&sender->replies_outgoing
sender->replies_outgoing
sender
sender
replies_outgoing
id
id
reply_serial
reply_serial
if (!slot)                return PEER_E_UNEXPECTED_REPLY;
!slot
slot
slot
return PEER_E_UNEXPECTED_REPLY;
PEER_E_UNEXPECTED_REPLY
PEER_E_UNEXPECTED_REPLY
receiver = c_container_of(slot->owner, Peer, owned_replies);
receiver = c_container_of(slot->owner, Peer, owned_replies)
receiver
receiver
c_container_of(slot->owner, Peer, owned_replies)
c_container_of
c_container_of
slot->owner
slot
slot
owner
Peer
Peer
owned_replies
owned_replies
r = connection_queue(&receiver->connection, 0, message);
r = connection_queue(&receiver->connection, 0, message)
r
r
connection_queue(&receiver->connection, 0, message)
connection_queue
connection_queue
&receiver->connection
receiver->connection
receiver
receiver
connection
0
message
message
if (r)                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
reply_slot_free(slot);
reply_slot_free(slot)
reply_slot_free
reply_slot_free
slot
slot
return 0;
0
-----joern-----
(5,27,0)
(7,63,0)
(19,23,0)
(52,22,0)
(43,44,0)
(27,48,0)
(65,41,0)
(9,44,0)
(58,9,0)
(12,47,0)
(31,23,0)
(13,61,0)
(15,29,0)
(22,48,0)
(43,2,0)
(41,61,0)
(3,0,0)
(0,25,0)
(57,38,0)
(67,57,0)
(36,57,0)
(18,41,0)
(43,59,0)
(23,6,0)
(53,25,0)
(44,25,0)
(49,25,0)
(42,57,0)
(60,36,0)
(11,12,0)
(24,47,0)
(47,12,0)
(10,52,0)
(12,36,0)
(46,25,0)
(47,0,0)
(18,55,0)
(34,65,0)
(18,46,0)
(18,32,0)
(0,47,0)
(53,36,0)
(4,22,0)
(22,17,0)
(57,6,0)
(44,43,0)
(30,25,0)
(64,12,0)
(39,44,0)
(62,47,0)
(26,43,0)
(9,32,0)
(3,59,0)
(36,25,0)
(59,3,0)
(28,25,0)
(21,25,0)
(45,46,0)
(48,22,0)
(16,3,0)
(33,53,0)
(37,55,0)
(48,25,0)
(6,23,0)
(59,43,0)
(23,1,0)
(50,0,0)
(54,27,0)
(22,52,0)
(40,48,0)
(18,63,0)
(51,25,0)
(14,3,0)
(57,36,0)
(20,25,0)
(65,48,0)
(29,36,0)
(35,25,0)
(6,57,0)
(66,43,0)
(12,36,1)
(31,60,1)
(56,48,1)
(24,62,1)
(33,8,1)
(34,27,1)
(47,24,1)
(53,33,1)
(7,27,1)
(3,14,1)
(50,29,1)
(22,17,1)
(10,4,1)
(57,6,1)
(3,0,1)
(43,59,1)
(55,37,1)
(65,48,1)
(18,55,1)
(57,38,1)
(6,23,1)
(29,15,1)
(58,8,1)
(66,59,1)
(42,67,1)
(9,58,1)
(43,26,1)
(54,56,1)
(8,44,1)
(59,3,1)
(14,16,1)
(48,22,1)
(36,57,1)
(45,53,1)
(47,12,1)
(18,32,1)
(0,47,1)
(26,66,1)
(11,50,1)
(29,36,1)
(4,40,1)
(57,42,1)
(22,52,1)
(60,56,1)
(27,5,1)
(43,2,1)
(67,6,1)
(23,19,1)
(46,45,1)
(19,31,1)
(41,65,1)
(16,39,1)
(37,29,1)
(18,63,1)
(18,46,1)
(27,48,1)
(32,9,1)
(23,1,1)
(15,36,1)
(5,54,1)
(9,44,1)
(64,11,1)
(62,12,1)
(44,43,1)
(52,10,1)
(39,0,1)
(63,7,1)
(18,41,1)
(53,36,1)
(65,34,1)
(12,64,1)
(18,46,2)
(44,29,2)
(29,56,2)
(18,63,2)
(41,27,2)
(22,52,2)
(26,29,2)
(9,44,2)
(0,47,2)
(18,55,2)
(67,56,2)
(54,56,2)
(33,8,2)
(19,56,2)
(11,29,2)
(55,29,2)
(43,2,2)
(31,56,2)
(3,29,2)
(23,56,2)
(6,56,2)
(12,36,2)
(37,29,2)
(65,48,2)
(60,56,2)
(12,29,2)
(0,29,2)
(14,29,2)
(66,29,2)
(50,29,2)
(47,29,2)
(36,57,2)
(48,22,2)
(62,29,2)
(44,43,2)
(15,56,2)
(43,59,2)
(59,29,2)
(47,12,2)
(23,1,2)
(53,36,2)
(22,17,2)
(16,29,2)
(24,29,2)
(57,6,2)
(7,27,2)
(34,27,2)
(32,8,2)
(18,32,2)
(59,3,2)
(9,8,2)
(64,29,2)
(65,27,2)
(18,41,2)
(6,23,2)
(46,8,2)
(43,29,2)
(8,29,2)
(29,36,2)
(63,27,2)
(5,56,2)
(39,29,2)
(27,48,2)
(27,56,2)
(45,8,2)
(3,0,2)
(36,56,2)
(58,8,2)
(57,56,2)
(53,8,2)
(42,56,2)
(57,38,2)
-----------------------------------
(0,receiver = c_container_of(slot->owner, Peer, owned_replies)
(1,Peer *sender)
(2,Message *message)
(3,receiver->connection)
(4,destination)
(5,0)
(6,&sender->replies_outgoing)
(7,PEER_E_UNEXPECTED_REPLY)
(8,r)
(9,error_fold(r)
(10,id)
(11,slot)
(12,slot->owner)
(13,if (r > 0)
(14,connection)
(15,slot)
(16,receiver)
(17,const char *destination)
(18,RET)
(19,replies_outgoing)
(20,if (!slot)
(21,id)
(22,unique_name_to_id(destination, &id)
(23,sender->replies_outgoing)
(24,owned_replies)
(25,)
(26,message)
(27,r > 0)
(28,if (r)
(29,!slot)
(30,receiver)
(31,sender)
(32,return error_fold(r)
(33,slot)
(34,r)
(35,if (r)
(36,slot = reply_slot_get_by_id(&sender->replies_outgoing, id, reply_serial)
(37,PEER_E_UNEXPECTED_REPLY)
(38,uint32_t reply_serial)
(39,r)
(40,r)
(41,return error_fold(r)
(42,reply_serial)
(43,connection_queue(&receiver->connection, 0, message)
(44,r = connection_queue(&receiver->connection, 0, message)
(45,0)
(46,return 0;)
(47,c_container_of(slot->owner, Peer, owned_replies)
(48,r = unique_name_to_id(destination, &id)
(49,slot)
(50,receiver)
(51,r)
(52,&id)
(53,reply_slot_free(slot)
(54,r)
(55,return PEER_E_UNEXPECTED_REPLY;)
(56,r)
(57,reply_slot_get_by_id(&sender->replies_outgoing, id, reply_serial)
(58,r)
(59,&receiver->connection)
(60,slot)
(61,)
(62,Peer)
(63,return PEER_E_UNEXPECTED_REPLY;)
(64,owner)
(65,error_fold(r)
(66,0)
(67,id)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^