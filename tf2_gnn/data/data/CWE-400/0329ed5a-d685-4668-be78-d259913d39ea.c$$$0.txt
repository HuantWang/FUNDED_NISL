-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__listen_socket_fwrite_63b_badSink(int * countPtr)
{
    int count = *countPtr;
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
51,54
52,53
54,55
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
69,70
69,71
69,72
69,73
70,71
71,72
71,73
72,73
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
83,84
85,86
86,87
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
94,95
96,97
96,98
96,99
96,100
96,101
97,98
99,100
101,102
102,103
102,104
105,106
105,107
106,107
108,109
110,111
112,113
113,114
114,115
114,116
115,116
118,119
118,120
119,120
121,122
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,6,8,9,13,15,19,24,26,28,32,34,35,38,41,43,44,46,50,53,55,56,60,62,67,68,73,74,77,81,82,84,87,93,95,98,100,103,104,107,109,111,116,117,120,125,127
-----computeFrom-----
48,49
48,50
58,59
58,60
71,72
71,73
75,76
75,77
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__listen_socket_fwrite_63b_badSink(int * countPtr){    int count = *countPtr;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__listen_socket_fwrite_63b_badSink(int * countPtr)
CWE400_Resource_Exhaustion__listen_socket_fwrite_63b_badSink
int * countPtr
int
* countPtr
*
countPtr
{    int count = *countPtr;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count = *countPtr;
int count = *countPtr;
int
count = *countPtr
count
= *countPtr
*countPtr
countPtr
countPtr
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(52,19,0)
(17,3,0)
(13,3,0)
(44,7,0)
(20,53,0)
(2,15,0)
(3,38,0)
(8,15,0)
(53,23,0)
(63,38,0)
(58,3,0)
(46,38,0)
(38,15,0)
(30,60,0)
(62,59,0)
(36,38,0)
(7,3,0)
(24,38,0)
(43,49,0)
(58,59,0)
(32,3,0)
(0,58,0)
(8,19,0)
(35,40,0)
(56,27,0)
(53,20,0)
(58,49,0)
(12,58,0)
(33,38,0)
(53,8,0)
(27,38,0)
(50,20,0)
(14,41,0)
(17,47,0)
(19,11,0)
(60,5,0)
(42,8,0)
(59,62,0)
(10,41,0)
(58,4,0)
(40,57,0)
(37,4,0)
(20,57,0)
(29,62,0)
(48,38,0)
(61,27,0)
(31,22,0)
(23,53,0)
(51,32,0)
(16,22,0)
(25,7,0)
(41,38,0)
(7,27,0)
(39,1,0)
(3,7,0)
(49,58,0)
(4,58,0)
(28,57,0)
(22,38,0)
(45,53,0)
(34,17,0)
(19,8,0)
(18,26,0)
(6,57,0)
(26,21,0)
(59,58,0)
(9,32,0)
(55,54,1)
(50,40,1)
(0,4,1)
(44,13,1)
(17,34,1)
(49,43,1)
(19,52,1)
(45,50,1)
(34,54,1)
(57,28,1)
(17,3,1)
(4,37,1)
(12,62,1)
(43,12,1)
(32,3,1)
(18,59,1)
(59,62,1)
(53,8,1)
(53,23,1)
(58,3,1)
(30,32,1)
(26,18,1)
(41,14,1)
(56,61,1)
(35,26,1)
(50,57,1)
(32,9,1)
(20,53,1)
(54,20,1)
(58,49,1)
(55,17,1)
(59,58,1)
(53,45,1)
(3,7,1)
(52,42,1)
(35,59,1)
(7,25,1)
(16,8,1)
(22,31,1)
(13,27,1)
(60,30,1)
(25,44,1)
(8,19,1)
(10,22,1)
(7,27,1)
(27,56,1)
(40,57,1)
(28,6,1)
(62,29,1)
(14,10,1)
(58,4,1)
(29,20,1)
(37,49,1)
(51,3,1)
(19,11,1)
(58,0,1)
(31,16,1)
(9,51,1)
(6,60,1)
(20,57,1)
(6,32,1)
(40,35,1)
(61,41,1)
(35,20,2)
(30,32,2)
(20,53,2)
(29,20,2)
(0,20,2)
(58,20,2)
(34,54,2)
(45,20,2)
(20,57,2)
(40,57,2)
(26,59,2)
(58,4,2)
(17,54,2)
(32,3,2)
(19,11,2)
(53,20,2)
(37,20,2)
(50,20,2)
(3,7,2)
(53,8,2)
(59,62,2)
(59,58,2)
(8,19,2)
(43,20,2)
(18,59,2)
(62,20,2)
(58,3,2)
(7,27,2)
(20,20,2)
(12,20,2)
(59,20,2)
(49,20,2)
(60,32,2)
(40,20,2)
(17,3,2)
(58,49,2)
(53,23,2)
(4,20,2)
-----------------------------------
(0,pFile)
(1,)
(2,count)
(3,pFile = fopen(filename, "w+")
(4,strlen(SENTENCE)
(5,)
(6,i)
(7,fopen(filename, "w+")
(8,count = *countPtr)
(9,NULL)
(10,pFile)
(11,int * countPtr)
(12,SENTENCE)
(13,pFile)
(14,NULL)
(15,)
(16,i)
(17,fclose(pFile)
(18,1)
(19,*countPtr)
(20,i < (size_t)
(21,)
(22,i = 0)
(23,size_t)
(24,filename)
(25,"w+")
(26,exit(1)
(27,*filename = "output_bad.txt")
(28,0)
(29,SENTENCE)
(30,1)
(31,0)
(32,pFile == NULL)
(33,pFile)
(34,pFile)
(35,i)
(36,if (pFile == NULL)
(37,SENTENCE)
(38,)
(39,if (strlen(SENTENCE)
(40,i++)
(41,*pFile = NULL)
(42,count)
(43,char)
(44,filename)
(45,count)
(46,if (pFile)
(47,)
(48,i)
(49,sizeof(char)
(50,i)
(51,pFile)
(52,countPtr)
(53,(size_t)
(54,pFile)
(55,RET)
(56,"output_bad.txt")
(57,i = 0)
(58,fwrite(SENTENCE, sizeof(char)
(59,strlen(SENTENCE)
(60,exit(1)
(61,filename)
(62,strlen(SENTENCE)
(63,for (i = 0; i < (size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^