-----label-----
0
-----code-----
static void goodB2G2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
96,97
97,98
98,99
98,100
99,100
101,102
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,94,95,100,102
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(5,16,0)
(49,17,0)
(10,24,0)
(27,0,0)
(16,49,0)
(9,53,0)
(32,35,0)
(38,7,0)
(33,32,0)
(50,16,0)
(13,49,0)
(7,2,0)
(8,32,0)
(51,49,0)
(1,35,0)
(20,13,0)
(31,16,0)
(12,44,0)
(43,49,0)
(44,52,0)
(17,29,0)
(11,24,0)
(24,15,0)
(21,0,0)
(4,15,0)
(2,7,0)
(34,22,0)
(40,42,0)
(9,27,0)
(26,0,0)
(29,17,0)
(37,0,0)
(15,26,0)
(44,49,0)
(24,49,0)
(16,31,0)
(41,43,0)
(49,0,0)
(22,34,0)
(19,52,0)
(15,24,0)
(28,47,0)
(23,22,0)
(55,25,0)
(13,32,0)
(6,35,0)
(45,47,0)
(9,31,0)
(27,9,0)
(3,25,0)
(39,26,0)
(40,22,0)
(22,40,0)
(34,17,0)
(30,35,0)
(17,49,0)
(53,9,0)
(31,9,0)
(17,34,0)
(2,18,0)
(13,14,0)
(54,44,0)
(52,21,0)
(36,21,0)
(42,40,0)
(48,43,0)
(52,44,0)
(3,27,1)
(7,38,1)
(15,4,1)
(27,9,1)
(55,3,1)
(31,16,1)
(38,43,1)
(44,49,1)
(16,5,1)
(16,49,1)
(40,23,1)
(19,44,1)
(54,2,1)
(23,51,1)
(25,55,1)
(17,34,1)
(20,25,1)
(34,22,1)
(46,13,1)
(45,32,1)
(8,33,1)
(44,12,1)
(26,39,1)
(13,49,1)
(21,36,1)
(13,32,1)
(2,7,1)
(41,49,1)
(12,54,1)
(5,50,1)
(13,20,1)
(40,42,1)
(11,10,1)
(52,19,1)
(24,11,1)
(50,26,1)
(9,53,1)
(36,52,1)
(15,24,1)
(22,40,1)
(48,41,1)
(24,49,1)
(52,44,1)
(3,47,1)
(39,15,1)
(43,48,1)
(51,47,1)
(10,21,1)
(49,17,1)
(46,25,1)
(28,45,1)
(47,28,1)
(9,31,1)
(4,24,1)
(43,49,1)
(17,29,1)
(54,43,1)
(32,8,1)
(34,47,2)
(9,53,2)
(36,47,2)
(15,24,2)
(15,47,2)
(9,31,2)
(31,16,2)
(49,47,2)
(10,47,2)
(34,22,2)
(2,7,2)
(48,47,2)
(13,25,2)
(44,49,2)
(22,40,2)
(26,47,2)
(17,47,2)
(38,43,2)
(17,34,2)
(13,32,2)
(39,47,2)
(22,47,2)
(13,49,2)
(24,47,2)
(9,47,2)
(11,47,2)
(7,43,2)
(40,42,2)
(41,47,2)
(44,47,2)
(2,43,2)
(16,49,2)
(51,47,2)
(17,29,2)
(27,9,2)
(52,44,2)
(43,47,2)
(40,47,2)
(12,47,2)
(24,49,2)
(21,47,2)
(27,47,2)
(4,47,2)
(43,49,2)
(23,47,2)
(54,47,2)
(20,25,2)
(31,47,2)
(19,47,2)
(52,47,2)
(50,47,2)
(5,47,2)
(16,47,2)
(49,17,2)
-----------------------------------
(0,)
(1,if(GLOBAL_CONST_FIVE==5)
(2,exit(-1)
(3,GLOBAL_CONST_FIVE)
(4,intTwo)
(5,0)
(6,if(GLOBAL_CONST_FIVE==5)
(7,-1)
(8,NULL)
(9,(twoIntsStruct *)
(10,data)
(11,0)
(12,0)
(13,free(data)
(14,)
(15,data[0].intTwo)
(16,data[0])
(17,(struct _twoIntsStruct *)
(18,)
(19,intOne)
(20,data)
(21,data[0].intOne = 0)
(22,100*sizeof(struct _twoIntsStruct)
(23,100)
(24,data[0])
(25,GLOBAL_CONST_FIVE==5)
(26,data[0].intTwo = 0)
(27,printStructLine((twoIntsStruct *)
(28,5)
(29,struct _twoIntsStruct *)
(30,data)
(31,&data[0])
(32,data = NULL)
(33,data)
(34,malloc(100*sizeof(struct _twoIntsStruct)
(35,)
(36,0)
(37,if (data == NULL)
(38,1)
(39,0)
(40,sizeof(struct _twoIntsStruct)
(41,data)
(42,struct _twoIntsStruct)
(43,data == NULL)
(44,data[0])
(45,GLOBAL_CONST_FIVE)
(46,RET)
(47,GLOBAL_CONST_FIVE==5)
(48,NULL)
(49,data = (struct _twoIntsStruct *)
(50,data)
(51,data)
(52,data[0].intOne)
(53,twoIntsStruct *)
(54,data)
(55,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^