-----label-----
0
-----code-----
static void goodB2G2()
{
    int64_t * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(staticReturnsTrue())
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
73,74
75,76
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,60,61,62,66,69,70,74,79,81
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int64_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int64_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(33,9,0)
(32,0,0)
(0,32,0)
(31,27,0)
(28,27,0)
(27,15,0)
(17,22,0)
(10,1,0)
(7,13,0)
(0,20,0)
(13,7,0)
(26,15,0)
(13,1,0)
(18,27,0)
(25,3,0)
(31,23,0)
(34,15,0)
(3,33,0)
(14,0,0)
(32,1,0)
(21,29,0)
(5,20,0)
(31,1,0)
(1,32,0)
(11,13,0)
(20,0,0)
(6,29,0)
(19,22,0)
(7,29,0)
(8,13,0)
(32,35,0)
(22,1,0)
(2,15,0)
(12,31,0)
(1,29,0)
(35,32,0)
(33,3,0)
(20,5,1)
(22,1,1)
(19,17,1)
(10,30,1)
(25,22,1)
(21,33,1)
(4,24,1)
(33,3,1)
(31,27,1)
(32,35,1)
(17,1,1)
(14,10,1)
(8,21,1)
(12,24,1)
(22,19,1)
(24,7,1)
(24,30,1)
(31,12,1)
(7,13,1)
(32,0,1)
(13,1,1)
(31,1,1)
(1,32,1)
(5,14,1)
(4,31,1)
(27,18,1)
(30,27,1)
(18,28,1)
(11,8,1)
(0,20,1)
(3,25,1)
(21,22,1)
(13,11,1)
(13,1,2)
(5,30,2)
(33,3,2)
(31,24,2)
(31,27,2)
(0,30,2)
(25,22,2)
(32,0,2)
(13,30,2)
(32,35,2)
(17,30,2)
(12,24,2)
(0,20,2)
(7,30,2)
(1,30,2)
(14,30,2)
(19,30,2)
(22,30,2)
(1,32,2)
(20,30,2)
(11,30,2)
(22,1,2)
(10,30,2)
(8,30,2)
(7,13,2)
(32,30,2)
(31,1,2)
(21,30,2)
(3,22,2)
(33,22,2)
-----------------------------------
(0,calloc(100, sizeof(int64_t)
(1,data = (int64_t *)
(2,if(staticReturnsTrue()
(3,-1)
(4,RET)
(5,int64_t)
(6,if (data == NULL)
(7,printLongLongLine(data[0])
(8,data)
(9,)
(10,data)
(11,0)
(12,data)
(13,data[0])
(14,100)
(15,)
(16, sizeof(int64_t)
(17,data)
(18,NULL)
(19,NULL)
(20,sizeof(int64_t)
(21,L)
(22,data == NULL)
(23,)
(24,staticReturnsTrue()
(25,1)
(26,data)
(27,data = NULL)
(28,data)
(29,)
(30,staticReturnsTrue()
(31,free(data)
(32,(int64_t *)
(33,exit(-1)
(34,if(staticReturnsTrue()
(35,int64_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^