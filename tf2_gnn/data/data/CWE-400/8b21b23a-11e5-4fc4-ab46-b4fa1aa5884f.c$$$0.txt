-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_31_bad()
{
    char * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)realloc(data, 100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    {
        char * dataCopy = data;
        char * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
30,31
32,33
32,34
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
66,68
68,69
68,70
68,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
77,80
80,81
81,82
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,33,36,37,41,43,48,50,54,56,57,61,63,67,69,70,73,76,78,79,82,83
-----computeFrom-----
13,14
13,15
19,20
19,21
32,33
32,34
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_31_bad(){    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_31_bad()
CWE401_Memory_Leak__char_realloc_31_bad
{    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
{        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(31,10,0)
(21,16,0)
(27,32,0)
(6,4,0)
(27,8,0)
(19,8,0)
(4,32,0)
(10,28,0)
(25,24,0)
(25,32,0)
(34,35,0)
(35,8,0)
(26,21,0)
(8,16,0)
(36,21,0)
(4,16,0)
(3,11,0)
(9,23,0)
(5,15,0)
(18,15,0)
(29,32,0)
(32,16,0)
(11,23,0)
(7,27,0)
(0,16,0)
(15,32,0)
(32,25,0)
(14,12,0)
(11,3,0)
(11,25,0)
(23,16,0)
(30,23,0)
(33,11,0)
(22,3,0)
(28,10,0)
(3,12,0)
(21,32,0)
(2,27,0)
(1,35,0)
(24,25,0)
(35,27,0)
(13,8,0)
(28,37,0)
(25,11,0)
(17,16,0)
(12,3,0)
(30,9,1)
(34,27,1)
(4,6,1)
(5,32,1)
(20,35,1)
(12,14,1)
(1,34,1)
(2,7,1)
(29,23,1)
(7,4,1)
(32,25,1)
(36,26,1)
(26,28,1)
(14,22,1)
(10,31,1)
(25,24,1)
(4,32,1)
(15,32,1)
(22,33,1)
(26,15,1)
(15,18,1)
(31,15,1)
(21,32,1)
(3,12,1)
(11,23,1)
(11,3,1)
(28,10,1)
(21,36,1)
(23,30,1)
(25,11,1)
(27,32,1)
(35,1,1)
(33,29,1)
(18,5,1)
(6,21,1)
(27,2,1)
(35,27,1)
(27,32,2)
(10,15,2)
(25,11,2)
(35,27,2)
(21,32,2)
(32,25,2)
(28,10,2)
(11,23,2)
(25,24,2)
(3,12,2)
(31,15,2)
(4,32,2)
(15,32,2)
(28,15,2)
(11,3,2)
-----------------------------------
(0,data)
(1,dataCopy)
(2,data)
(3,100*sizeof(char)
(4,printLine(data)
(5,data)
(6,data)
(7,dataCopy)
(8,)
(9,data)
(10,-1)
(11,realloc(data, 100*sizeof(char)
(12,sizeof(char)
(13,data)
(14,char)
(15,data == NULL)
(16,)
(17,if (data == NULL)
(18,NULL)
(19,dataCopy)
(20,RET)
(21,strcpy(data, "A String")
(22,100)
(23,data = NULL)
(24,char *)
(25,(char *)
(26,data)
(27,* dataCopy = data)
(28,exit(-1)
(29,data)
(30,NULL)
(31,1)
(32,data = (char *)
(33,data)
(34,data)
(35,* data = dataCopy)
(36,"A String")
(37,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^