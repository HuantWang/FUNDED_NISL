-----label-----
0
-----code-----
static void test_line(void) {
        _c_cleanup_(socket_deinit) Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);
        const char *test = "TEST", *line;
        size_t n_bytes;
        int pair[2], r;

        r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);
        assert(r >= 0);

        r = socket_init(&client, NULL, pair[0]);
        assert(r == 0);

        r = socket_init(&server, NULL, pair[1]);
        assert(r == 0);

        r = socket_dequeue_line(&server, &line, &n_bytes);
        assert(!r && !line);

        r = socket_queue_line(&client, test, strlen(test));
        assert(r == 0);

        r = socket_queue_line(&client, test, strlen(test));
        assert(r == 0);

        r = socket_dispatch(&client, EPOLLOUT);
        assert(r == SOCKET_E_LOST_INTEREST);
        r = socket_dispatch(&server, EPOLLIN);
        assert(!r || r == SOCKET_E_PREEMPTED);

        r = socket_dequeue_line(&server, &line, &n_bytes);
        assert(!r && line);
        assert(n_bytes == strlen(test));
        assert(memcmp(test, line, n_bytes) == 0);

        r = socket_dequeue_line(&server, &line, &n_bytes);
        assert(!r && line);
        assert(n_bytes == strlen(test));
        assert(memcmp(test, line, n_bytes) == 0);

        r = socket_dequeue_line(&server, &line, &n_bytes);
        assert(!r && !line);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
9,32
9,33
9,34
9,35
9,36
9,37
9,38
9,39
9,40
9,41
10,11
11,12
11,13
12,13
14,15
15,16
17,18
18,19
19,20
19,21
19,22
20,21
22,23
22,24
24,25
25,26
25,27
26,27
28,29
30,31
30,32
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
39,42
41,42
41,43
41,44
44,45
46,47
46,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
58,59
58,60
60,61
62,63
64,65
65,66
65,67
66,67
68,69
68,70
68,71
68,72
68,73
69,70
71,72
73,74
76,77
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
87,88
87,89
88,89
90,91
90,92
90,93
90,94
91,92
93,94
94,95
96,97
98,99
98,100
99,100
102,103
103,104
103,105
104,105
106,107
106,108
107,108
110,111
111,112
111,113
112,113
114,115
114,116
114,117
114,118
115,116
117,118
118,119
120,121
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
130,132
131,132
134,135
135,136
135,137
136,137
138,139
138,140
138,141
138,142
139,140
141,142
142,143
144,145
145,146
147,148
148,149
150,151
151,152
151,153
152,153
154,155
154,156
155,156
156,157
158,159
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
166,167
168,169
169,170
171,172
173,174
173,175
174,175
176,177
178,179
179,180
179,181
180,181
182,183
182,184
183,184
186,187
187,188
187,189
188,189
190,191
190,192
190,193
190,194
191,192
193,194
194,195
196,197
198,199
198,200
199,200
201,202
203,204
204,205
204,206
205,206
207,208
207,209
208,209
211,212
212,213
212,214
213,214
215,216
215,217
215,218
216,217
218,219
219,220
221,222
223,224
224,225
224,226
225,226
227,228
227,229
228,229
230,231
232,233
233,234
233,235
234,235
236,237
236,238
236,239
237,238
239,240
240,241
242,243
244,245
245,246
245,247
246,247
248,249
248,250
249,250
250,251
252,253
252,254
253,254
255,256
257,258
258,259
258,260
259,260
261,262
261,263
261,264
261,265
262,263
264,265
265,266
267,268
268,269
270,271
271,272
273,274
274,275
274,276
275,276
277,278
277,279
278,279
279,280
281,282
283,284
284,285
284,286
285,286
287,288
287,289
288,289
290,291
290,292
291,292
293,294
295,296
296,297
296,298
297,298
299,300
299,301
300,301
300,302
300,303
300,304
301,302
303,304
305,306
307,308
310,311
311,312
311,313
312,313
314,315
314,316
314,317
314,318
315,316
317,318
318,319
320,321
321,322
323,324
324,325
326,327
327,328
327,329
328,329
330,331
330,332
331,332
332,333
334,335
336,337
337,338
337,339
338,339
340,341
340,342
341,342
343,344
343,345
344,345
346,347
348,349
349,350
349,351
350,351
352,353
352,354
353,354
353,355
353,356
353,357
354,355
356,357
358,359
360,361
363,364
364,365
364,366
365,366
367,368
367,369
367,370
367,371
368,369
370,371
371,372
373,374
374,375
376,377
377,378
379,380
380,381
380,382
381,382
383,384
383,385
384,385
385,386
387,388
388,389
-----nextToken-----
2,4,6,8,13,16,21,23,27,29,31,35,37,40,42,43,45,47,48,52,54,57,59,61,63,67,70,72,74,75,77,81,84,85,89,92,95,97,100,101,105,108,109,113,116,119,121,124,125,129,132,133,137,140,143,146,149,153,157,160,164,167,170,172,175,177,181,184,185,189,192,195,197,200,202,206,209,210,214,217,220,222,226,229,231,235,238,241,243,247,251,254,256,260,263,266,269,272,276,280,282,286,289,292,294,298,302,304,306,308,309,313,316,319,322,325,329,333,335,339,342,345,347,351,355,357,359,361,362,366,369,372,375,378,382,386,389
-----computeFrom-----
65,66
65,67
82,83
82,84
87,88
87,89
106,107
106,108
111,112
111,113
130,131
130,132
135,136
135,137
154,155
154,156
162,163
162,164
182,183
182,184
187,188
187,189
207,208
207,209
212,213
212,214
227,228
227,229
233,234
233,235
248,249
248,250
252,253
252,254
258,259
258,260
277,278
277,279
287,288
287,289
299,300
299,301
311,312
311,313
330,331
330,332
340,341
340,342
352,353
352,354
364,365
364,366
383,384
383,385
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
static void test_line(void) {        _c_cleanup_(socket_deinit) Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);        const char *test = "TEST", *line;        size_t n_bytes;        int pair[2], r;        r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);        assert(r >= 0);        r = socket_init(&client, NULL, pair[0]);        assert(r == 0);        r = socket_init(&server, NULL, pair[1]);        assert(r == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && !line);        r = socket_queue_line(&client, test, strlen(test));        assert(r == 0);        r = socket_queue_line(&client, test, strlen(test));        assert(r == 0);        r = socket_dispatch(&client, EPOLLOUT);        assert(r == SOCKET_E_LOST_INTEREST);        r = socket_dispatch(&server, EPOLLIN);        assert(!r || r == SOCKET_E_PREEMPTED);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && line);        assert(n_bytes == strlen(test));        assert(memcmp(test, line, n_bytes) == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && line);        assert(n_bytes == strlen(test));        assert(memcmp(test, line, n_bytes) == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && !line);}
static void
test_line(void)
test_line
void
void


{        _c_cleanup_(socket_deinit) Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);        const char *test = "TEST", *line;        size_t n_bytes;        int pair[2], r;        r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);        assert(r >= 0);        r = socket_init(&client, NULL, pair[0]);        assert(r == 0);        r = socket_init(&server, NULL, pair[1]);        assert(r == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && !line);        r = socket_queue_line(&client, test, strlen(test));        assert(r == 0);        r = socket_queue_line(&client, test, strlen(test));        assert(r == 0);        r = socket_dispatch(&client, EPOLLOUT);        assert(r == SOCKET_E_LOST_INTEREST);        r = socket_dispatch(&server, EPOLLIN);        assert(!r || r == SOCKET_E_PREEMPTED);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && line);        assert(n_bytes == strlen(test));        assert(memcmp(test, line, n_bytes) == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && line);        assert(n_bytes == strlen(test));        assert(memcmp(test, line, n_bytes) == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && !line);}
_c_cleanup_(socket_deinit)
_c_cleanup_(socket_deinit)
_c_cleanup_
_c_cleanup_
(socket_deinit)
socket_deinit
socket_deinit
)
Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);
Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);
Socket
Socket
client = SOCKET_NULL(client)
client
= SOCKET_NULL(client)
SOCKET_NULL(client)
SOCKET_NULL
SOCKET_NULL
client
client
server = SOCKET_NULL(server)
server
= SOCKET_NULL(server)
SOCKET_NULL(server)
SOCKET_NULL
SOCKET_NULL
server
server
const char *test = "TEST", *line;
const char *test = "TEST", *line;
const char
*test = "TEST"
*
test
= "TEST"
"TEST"
*line
*
line
size_t n_bytes;
size_t n_bytes;
size_t
size_t
n_bytes
n_bytes
int pair[2], r;
int pair[2], r;
int
pair[2]
pair
[2]
2
r
r
r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);
r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
r
r
socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
socketpair
socketpair
AF_UNIX
AF_UNIX
SOCK_STREAM
SOCK_STREAM
0
pair
pair
assert(r >= 0);
assert(r >= 0)
assert
assert
r >= 0
r
r
0
r = socket_init(&client, NULL, pair[0]);
r = socket_init(&client, NULL, pair[0])
r
r
socket_init(&client, NULL, pair[0])
socket_init
socket_init
&client
client
client
NULL
NULL
pair[0]
pair
pair
0
assert(r == 0);
assert(r == 0)
assert
assert
r == 0
r
r
0
r = socket_init(&server, NULL, pair[1]);
r = socket_init(&server, NULL, pair[1])
r
r
socket_init(&server, NULL, pair[1])
socket_init
socket_init
&server
server
server
NULL
NULL
pair[1]
pair
pair
1
assert(r == 0);
assert(r == 0)
assert
assert
r == 0
r
r
0
r = socket_dequeue_line(&server, &line, &n_bytes);
r = socket_dequeue_line(&server, &line, &n_bytes)
r
r
socket_dequeue_line(&server, &line, &n_bytes)
socket_dequeue_line
socket_dequeue_line
&server
server
server
&line
line
line
&n_bytes
n_bytes
n_bytes
assert(!r && !line);
assert(!r && !line)
assert
assert
!r && !line
!r
r
r
!line
line
line
r = socket_queue_line(&client, test, strlen(test));
r = socket_queue_line(&client, test, strlen(test))
r
r
socket_queue_line(&client, test, strlen(test))
socket_queue_line
socket_queue_line
&client
client
client
test
test
strlen(test)
strlen
strlen
test
test
assert(r == 0);
assert(r == 0)
assert
assert
r == 0
r
r
0
r = socket_queue_line(&client, test, strlen(test));
r = socket_queue_line(&client, test, strlen(test))
r
r
socket_queue_line(&client, test, strlen(test))
socket_queue_line
socket_queue_line
&client
client
client
test
test
strlen(test)
strlen
strlen
test
test
assert(r == 0);
assert(r == 0)
assert
assert
r == 0
r
r
0
r = socket_dispatch(&client, EPOLLOUT);
r = socket_dispatch(&client, EPOLLOUT)
r
r
socket_dispatch(&client, EPOLLOUT)
socket_dispatch
socket_dispatch
&client
client
client
EPOLLOUT
EPOLLOUT
assert(r == SOCKET_E_LOST_INTEREST);
assert(r == SOCKET_E_LOST_INTEREST)
assert
assert
r == SOCKET_E_LOST_INTEREST
r
r
SOCKET_E_LOST_INTEREST
SOCKET_E_LOST_INTEREST
r = socket_dispatch(&server, EPOLLIN);
r = socket_dispatch(&server, EPOLLIN)
r
r
socket_dispatch(&server, EPOLLIN)
socket_dispatch
socket_dispatch
&server
server
server
EPOLLIN
EPOLLIN
assert(!r || r == SOCKET_E_PREEMPTED);
assert(!r || r == SOCKET_E_PREEMPTED)
assert
assert
!r || r == SOCKET_E_PREEMPTED
!r
r
r
r == SOCKET_E_PREEMPTED
r
r
SOCKET_E_PREEMPTED
SOCKET_E_PREEMPTED
r = socket_dequeue_line(&server, &line, &n_bytes);
r = socket_dequeue_line(&server, &line, &n_bytes)
r
r
socket_dequeue_line(&server, &line, &n_bytes)
socket_dequeue_line
socket_dequeue_line
&server
server
server
&line
line
line
&n_bytes
n_bytes
n_bytes
assert(!r && line);
assert(!r && line)
assert
assert
!r && line
!r
r
r
line
line
assert(n_bytes == strlen(test));
assert(n_bytes == strlen(test))
assert
assert
n_bytes == strlen(test)
n_bytes
n_bytes
strlen(test)
strlen
strlen
test
test
assert(memcmp(test, line, n_bytes) == 0);
assert(memcmp(test, line, n_bytes) == 0)
assert
assert
memcmp(test, line, n_bytes) == 0
memcmp(test, line, n_bytes)
memcmp
memcmp
test
test
line
line
n_bytes
n_bytes
0
r = socket_dequeue_line(&server, &line, &n_bytes);
r = socket_dequeue_line(&server, &line, &n_bytes)
r
r
socket_dequeue_line(&server, &line, &n_bytes)
socket_dequeue_line
socket_dequeue_line
&server
server
server
&line
line
line
&n_bytes
n_bytes
n_bytes
assert(!r && line);
assert(!r && line)
assert
assert
!r && line
!r
r
r
line
line
assert(n_bytes == strlen(test));
assert(n_bytes == strlen(test))
assert
assert
n_bytes == strlen(test)
n_bytes
n_bytes
strlen(test)
strlen
strlen
test
test
assert(memcmp(test, line, n_bytes) == 0);
assert(memcmp(test, line, n_bytes) == 0)
assert
assert
memcmp(test, line, n_bytes) == 0
memcmp(test, line, n_bytes)
memcmp
memcmp
test
test
line
line
n_bytes
n_bytes
0
r = socket_dequeue_line(&server, &line, &n_bytes);
r = socket_dequeue_line(&server, &line, &n_bytes)
r
r
socket_dequeue_line(&server, &line, &n_bytes)
socket_dequeue_line
socket_dequeue_line
&server
server
server
&line
line
line
&n_bytes
n_bytes
n_bytes
assert(!r && !line);
assert(!r && !line)
assert
assert
!r && !line
!r
r
r
!line
line
line
-----joern-----
(145,150,0)
(58,154,0)
(140,6,0)
(180,146,0)
(106,86,0)
(124,77,0)
(12,48,0)
(123,112,0)
(104,149,0)
(63,144,0)
(37,38,0)
(46,132,0)
(154,77,0)
(117,137,0)
(17,143,0)
(145,155,0)
(30,134,0)
(33,174,0)
(10,31,0)
(45,65,0)
(53,96,0)
(19,86,0)
(108,77,0)
(97,161,0)
(182,86,0)
(67,86,0)
(144,73,0)
(31,10,0)
(93,155,0)
(51,77,0)
(149,67,0)
(25,158,0)
(161,103,0)
(50,96,0)
(54,77,0)
(166,102,0)
(161,97,0)
(118,24,0)
(130,134,0)
(96,53,0)
(106,19,0)
(114,77,0)
(65,60,0)
(148,75,0)
(10,51,0)
(85,181,0)
(157,135,0)
(28,42,0)
(42,127,0)
(76,106,0)
(133,102,0)
(165,24,0)
(171,86,0)
(134,139,0)
(34,114,0)
(132,124,0)
(178,77,0)
(60,77,0)
(89,158,0)
(105,49,0)
(40,34,0)
(135,146,0)
(109,35,0)
(21,125,0)
(181,169,0)
(5,31,0)
(67,149,0)
(90,22,0)
(122,65,0)
(95,77,0)
(88,145,0)
(123,77,0)
(144,137,0)
(184,78,0)
(108,161,0)
(141,161,0)
(65,163,0)
(51,10,0)
(84,91,0)
(120,106,0)
(179,84,0)
(65,122,0)
(147,19,0)
(83,150,0)
(26,24,0)
(56,6,0)
(136,140,0)
(172,22,0)
(19,106,0)
(149,39,0)
(132,59,0)
(79,153,0)
(16,153,0)
(92,77,0)
(159,78,0)
(155,93,0)
(48,60,0)
(73,144,0)
(38,53,0)
(107,124,0)
(44,77,0)
(68,1,0)
(18,68,0)
(95,12,0)
(124,132,0)
(41,73,0)
(31,6,0)
(175,146,0)
(64,77,0)
(134,30,0)
(110,112,0)
(169,159,0)
(70,53,0)
(94,63,0)
(93,113,0)
(143,54,0)
(46,24,0)
(125,174,0)
(8,116,0)
(92,150,0)
(58,171,0)
(127,24,0)
(49,84,0)
(161,108,0)
(112,123,0)
(139,134,0)
(131,146,0)
(49,44,0)
(73,24,0)
(153,71,0)
(23,45,0)
(66,159,0)
(47,108,0)
(54,143,0)
(36,46,0)
(75,148,0)
(99,120,0)
(1,77,0)
(113,93,0)
(144,91,0)
(6,77,0)
(13,0,0)
(22,102,0)
(75,96,0)
(174,77,0)
(144,63,0)
(185,77,0)
(26,93,0)
(126,78,0)
(78,77,0)
(138,156,0)
(42,6,0)
(159,169,0)
(106,156,0)
(27,112,0)
(152,97,0)
(102,22,0)
(53,38,0)
(169,116,0)
(72,62,0)
(48,12,0)
(74,26,0)
(96,77,0)
(87,98,0)
(100,155,0)
(15,153,0)
(62,125,0)
(43,165,0)
(150,92,0)
(165,125,0)
(39,149,0)
(61,34,0)
(14,86,0)
(81,12,0)
(146,135,0)
(98,24,0)
(163,65,0)
(91,77,0)
(183,58,0)
(69,60,0)
(151,102,0)
(177,140,0)
(132,0,0)
(111,116,0)
(162,153,0)
(132,46,0)
(80,83,0)
(11,68,0)
(158,156,0)
(168,105,0)
(38,78,0)
(20,171,0)
(57,59,0)
(55,122,0)
(35,93,0)
(86,77,0)
(39,77,0)
(12,95,0)
(150,83,0)
(59,132,0)
(150,145,0)
(10,140,0)
(44,49,0)
(125,165,0)
(7,62,0)
(93,26,0)
(157,77,0)
(82,127,0)
(91,144,0)
(115,75,0)
(137,144,0)
(103,161,0)
(164,103,0)
(22,172,0)
(125,62,0)
(160,143,0)
(154,58,0)
(135,157,0)
(84,49,0)
(155,77,0)
(156,77,0)
(30,124,0)
(114,34,0)
(6,42,0)
(24,98,0)
(176,184,0)
(93,35,0)
(158,89,0)
(120,78,0)
(171,58,0)
(140,10,0)
(143,71,0)
(89,77,0)
(139,77,0)
(1,68,0)
(65,45,0)
(29,77,0)
(0,132,0)
(2,48,0)
(68,181,0)
(129,75,0)
(34,174,0)
(167,135,0)
(169,181,0)
(142,77,0)
(127,42,0)
(9,113,0)
(49,105,0)
(173,91,0)
(128,169,0)
(172,77,0)
(174,125,0)
(119,158,0)
(78,184,0)
(121,77,0)
(60,65,0)
(116,169,0)
(32,71,0)
(170,30,0)
(3,163,0)
(97,78,0)
(106,120,0)
(103,86,0)
(101,67,0)
(24,77,0)
(161,86,0)
(148,77,0)
(146,86,0)
(122,24,0)
(4,77,0)
(71,153,0)
(156,106,0)
(102,86,0)
(181,77,0)
(112,108,0)
(71,77,0)
(65,122,1)
(143,17,1)
(170,124,1)
(174,125,1)
(151,166,1)
(119,156,1)
(153,15,1)
(127,82,1)
(14,182,1)
(98,87,1)
(51,10,1)
(10,140,1)
(93,113,1)
(22,90,1)
(127,24,1)
(73,24,1)
(16,79,1)
(42,28,1)
(102,151,1)
(38,37,1)
(106,86,1)
(34,174,1)
(75,129,1)
(109,26,1)
(135,167,1)
(118,78,1)
(120,99,1)
(145,155,1)
(48,2,1)
(19,147,1)
(140,6,1)
(67,101,1)
(99,138,1)
(10,31,1)
(130,30,1)
(184,176,1)
(62,7,1)
(44,49,1)
(87,118,1)
(49,84,1)
(66,85,1)
(41,173,1)
(163,3,1)
(168,84,1)
(103,164,1)
(144,137,1)
(108,161,1)
(128,159,1)
(146,131,1)
(159,66,1)
(78,184,1)
(71,153,1)
(154,58,1)
(80,145,1)
(31,6,1)
(69,172,1)
(48,60,1)
(133,39,1)
(42,127,1)
(171,86,1)
(179,91,1)
(102,86,1)
(46,24,1)
(49,105,1)
(56,148,1)
(120,78,1)
(129,115,1)
(35,109,1)
(9,35,1)
(53,38,1)
(55,69,1)
(1,68,1)
(180,175,1)
(172,22,1)
(117,63,1)
(125,165,1)
(13,59,1)
(70,38,1)
(148,75,1)
(93,35,1)
(3,45,1)
(150,83,1)
(68,18,1)
(91,144,1)
(74,100,1)
(34,40,1)
(100,114,1)
(97,78,1)
(145,88,1)
(152,47,1)
(165,43,1)
(76,120,1)
(155,93,1)
(122,24,1)
(63,94,1)
(157,135,1)
(53,70,1)
(144,63,1)
(82,56,1)
(161,97,1)
(75,96,1)
(43,33,1)
(85,54,1)
(33,1,1)
(25,119,1)
(116,8,1)
(96,53,1)
(140,177,1)
(125,62,1)
(167,146,1)
(134,30,1)
(68,181,1)
(21,165,1)
(58,171,1)
(113,9,1)
(61,174,1)
(31,5,1)
(7,72,1)
(111,128,1)
(37,50,1)
(183,95,1)
(26,74,1)
(30,124,1)
(5,6,1)
(50,89,1)
(146,86,1)
(123,112,1)
(112,108,1)
(105,168,1)
(90,102,1)
(101,104,1)
(27,108,1)
(124,132,1)
(165,24,1)
(39,149,1)
(161,103,1)
(104,139,1)
(132,0,1)
(32,86,1)
(110,27,1)
(103,86,1)
(175,154,1)
(46,36,1)
(84,91,1)
(65,45,1)
(93,26,1)
(52,44,1)
(131,180,1)
(162,16,1)
(47,92,1)
(15,162,1)
(143,71,1)
(169,159,1)
(72,21,1)
(57,46,1)
(171,20,1)
(158,25,1)
(36,107,1)
(160,71,1)
(0,13,1)
(84,179,1)
(156,106,1)
(24,98,1)
(20,183,1)
(12,48,1)
(136,31,1)
(164,141,1)
(79,32,1)
(81,48,1)
(6,42,1)
(106,120,1)
(60,65,1)
(158,156,1)
(94,73,1)
(169,116,1)
(8,111,1)
(38,78,1)
(30,170,1)
(59,57,1)
(88,155,1)
(132,59,1)
(22,102,1)
(144,73,1)
(17,160,1)
(159,78,1)
(40,61,1)
(181,169,1)
(115,96,1)
(139,134,1)
(138,123,1)
(23,122,1)
(11,181,1)
(114,34,1)
(12,81,1)
(112,110,1)
(65,163,1)
(147,76,1)
(67,86,1)
(92,150,1)
(176,126,1)
(150,145,1)
(122,55,1)
(161,86,1)
(107,51,1)
(73,41,1)
(134,130,1)
(166,133,1)
(26,24,1)
(137,117,1)
(149,67,1)
(132,46,1)
(2,60,1)
(95,12,1)
(135,146,1)
(106,19,1)
(86,14,1)
(173,157,1)
(19,86,1)
(18,11,1)
(89,158,1)
(97,152,1)
(54,143,1)
(141,97,1)
(182,24,1)
(83,80,1)
(28,127,1)
(45,23,1)
(177,136,1)
(48,60,2)
(68,181,2)
(125,62,2)
(26,24,2)
(44,49,2)
(73,24,2)
(51,10,2)
(161,97,2)
(106,120,2)
(169,116,2)
(165,24,2)
(135,146,2)
(161,103,2)
(19,86,2)
(139,134,2)
(53,38,2)
(81,48,2)
(97,78,2)
(67,86,2)
(158,156,2)
(49,105,2)
(177,31,2)
(144,63,2)
(123,112,2)
(140,31,2)
(30,124,2)
(46,24,2)
(108,161,2)
(150,83,2)
(136,31,2)
(112,108,2)
(159,78,2)
(84,91,2)
(168,84,2)
(22,102,2)
(31,6,2)
(78,184,2)
(127,24,2)
(132,0,2)
(54,143,2)
(171,86,2)
(58,171,2)
(125,165,2)
(132,59,2)
(172,22,2)
(96,53,2)
(93,26,2)
(150,145,2)
(103,86,2)
(157,135,2)
(95,12,2)
(106,86,2)
(169,159,2)
(144,137,2)
(93,35,2)
(132,46,2)
(122,24,2)
(155,93,2)
(93,113,2)
(24,98,2)
(12,48,2)
(106,19,2)
(34,174,2)
(65,45,2)
(92,150,2)
(140,6,2)
(89,158,2)
(65,122,2)
(145,155,2)
(105,84,2)
(91,144,2)
(65,163,2)
(114,34,2)
(181,169,2)
(161,86,2)
(71,153,2)
(83,145,2)
(148,75,2)
(42,127,2)
(38,78,2)
(10,140,2)
(156,106,2)
(6,42,2)
(134,30,2)
(124,132,2)
(75,96,2)
(120,78,2)
(80,145,2)
(10,31,2)
(102,86,2)
(39,149,2)
(154,58,2)
(1,68,2)
(143,71,2)
(146,86,2)
(130,30,2)
(174,125,2)
(149,67,2)
(144,73,2)
(49,84,2)
(60,65,2)
-----------------------------------
(0,&n_bytes)
(1,assert(r == 0)
(2,r)
(3,n_bytes)
(4,test)
(5,r)
(6,r = socket_dispatch(&server, EPOLLIN)
(7,1)
(8,0)
(9,n_bytes)
(10,!r || r == SOCKET_E_PREEMPTED)
(11,r)
(12,!r && line)
(13,n_bytes)
(14,"TEST")
(15,pair)
(16,SOCK_STREAM)
(17,0)
(18,0)
(19,strlen(test)
(20,test)
(21,NULL)
(22,memcmp(test, line, n_bytes)
(23,line)
(24,server = SOCKET_NULL(server)
(25,0)
(26,&server)
(27,r)
(28,EPOLLIN)
(29,server)
(30,!r)
(31,!r)
(32,r)
(33,r)
(34,r == 0)
(35,&line)
(36,server)
(37,client)
(38,&client)
(39,assert(n_bytes == strlen(test)
(40,0)
(41,server)
(42,socket_dispatch(&server, EPOLLIN)
(43,server)
(44,assert(!r && !line)
(45,&line)
(46,&server)
(47,r)
(48,!r)
(49,!r && !line)
(50,r)
(51,assert(!r || r == SOCKET_E_PREEMPTED)
(52,RET)
(53,socket_dispatch(&client, EPOLLOUT)
(54,assert(r >= 0)
(55,server)
(56,r)
(57,line)
(58,n_bytes == strlen(test)
(59,&line)
(60,r = socket_dequeue_line(&server, &line, &n_bytes)
(61,r)
(62,pair[1])
(63,&line)
(64,pair)
(65,socket_dequeue_line(&server, &line, &n_bytes)
(66,client)
(67,strlen(test)
(68,r == 0)
(69,r)
(70,EPOLLOUT)
(71,r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
(72,pair)
(73,&server)
(74,server)
(75,r == SOCKET_E_LOST_INTEREST)
(76,test)
(77,)
(78,client = SOCKET_NULL(client)
(79,AF_UNIX)
(80,line)
(81,line)
(82,server)
(83,!line)
(84,!r)
(85,r)
(86,*test = "TEST")
(87,server)
(88,r)
(89,assert(r == 0)
(90,0)
(91,r = socket_dequeue_line(&server, &line, &n_bytes)
(92,assert(!r && !line)
(93,socket_dequeue_line(&server, &line, &n_bytes)
(94,line)
(95,assert(!r && line)
(96,r = socket_dispatch(&client, EPOLLOUT)
(97,&client)
(98,SOCKET_NULL(server)
(99,client)
(100,r)
(101,test)
(102,memcmp(test, line, n_bytes)
(103,strlen(test)
(104,n_bytes)
(105,!line)
(106,socket_queue_line(&client, test, strlen(test)
(107,r)
(108,r = socket_queue_line(&client, test, strlen(test)
(109,line)
(110,0)
(111,pair)
(112,r == 0)
(113,&n_bytes)
(114,assert(r == 0)
(115,r)
(116,pair[0])
(117,n_bytes)
(118,server)
(119,r)
(120,&client)
(121,n_bytes)
(122,&server)
(123,assert(r == 0)
(124,r = socket_dequeue_line(&server, &line, &n_bytes)
(125,socket_init(&server, NULL, pair[1])
(126,client)
(127,&server)
(128,NULL)
(129,SOCKET_E_LOST_INTEREST)
(130,line)
(131,n_bytes)
(132,socket_dequeue_line(&server, &line, &n_bytes)
(133,test)
(134,!r && line)
(135,memcmp(test, line, n_bytes)
(136,r)
(137,&n_bytes)
(138,r)
(139,assert(!r && line)
(140,r == SOCKET_E_PREEMPTED)
(141,test)
(142,r)
(143,r >= 0)
(144,socket_dequeue_line(&server, &line, &n_bytes)
(145,!r)
(146,memcmp(test, line, n_bytes)
(147,test)
(148,assert(r == SOCKET_E_LOST_INTEREST)
(149,n_bytes == strlen(test)
(150,!r && !line)
(151,n_bytes)
(152,client)
(153,socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
(154,assert(n_bytes == strlen(test)
(155,r = socket_dequeue_line(&server, &line, &n_bytes)
(156,r = socket_queue_line(&client, test, strlen(test)
(157,assert(memcmp(test, line, n_bytes)
(158,r == 0)
(159,&client)
(160,r)
(161,socket_queue_line(&client, test, strlen(test)
(162,0)
(163,&n_bytes)
(164,test)
(165,&server)
(166,line)
(167,0)
(168,line)
(169,socket_init(&client, NULL, pair[0])
(170,r)
(171,strlen(test)
(172,assert(memcmp(test, line, n_bytes)
(173,r)
(174,r = socket_init(&server, NULL, pair[1])
(175,test)
(176,client)
(177,SOCKET_E_PREEMPTED)
(178,client)
(179,r)
(180,line)
(181,r = socket_init(&client, NULL, pair[0])
(182,test)
(183,n_bytes)
(184,SOCKET_NULL(client)
(185,line)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^