-----label-----
0
-----code-----
static void goodG2B2()
{
    twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
64,65
65,66
65,67
66,67
69,70
69,71
71,72
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,47,48,49,50,56,57,58,59,63,67,68,70,72
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    twoIntsStruct * data;    data = NULL;    if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    twoIntsStruct * data;    data = NULL;    if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
1
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(24,32,0)
(10,30,0)
(6,20,0)
(20,32,0)
(19,21,0)
(11,8,0)
(1,22,0)
(9,17,0)
(13,6,0)
(1,20,0)
(7,8,0)
(20,31,0)
(10,20,0)
(6,13,0)
(31,17,0)
(25,13,0)
(0,6,0)
(16,6,0)
(36,20,0)
(27,1,0)
(28,5,0)
(14,10,0)
(26,30,0)
(2,1,0)
(30,10,0)
(23,9,0)
(30,21,0)
(18,10,0)
(5,8,0)
(35,8,0)
(9,3,0)
(31,15,0)
(38,5,0)
(15,31,0)
(29,22,0)
(3,9,0)
(13,25,0)
(34,24,0)
(25,32,0)
(31,20,0)
(22,24,0)
(22,1,0)
(17,31,0)
(12,3,0)
(21,32,0)
(17,9,0)
(10,18,1)
(16,0,1)
(38,28,1)
(14,24,1)
(31,15,1)
(30,10,1)
(33,4,1)
(1,2,1)
(37,33,1)
(6,16,1)
(36,4,1)
(26,10,1)
(6,20,1)
(21,19,1)
(0,21,1)
(4,5,1)
(22,1,1)
(17,9,1)
(13,6,1)
(19,30,1)
(23,36,1)
(9,3,1)
(2,27,1)
(34,22,1)
(31,17,1)
(20,31,1)
(24,34,1)
(30,26,1)
(27,20,1)
(25,13,1)
(3,12,1)
(1,20,1)
(22,29,1)
(5,38,1)
(12,23,1)
(29,1,1)
(33,25,1)
(18,14,1)
(10,20,1)
(14,4,2)
(17,4,2)
(17,9,2)
(20,4,2)
(23,4,2)
(3,4,2)
(21,4,2)
(22,1,2)
(6,4,2)
(27,4,2)
(13,4,2)
(30,10,2)
(1,4,2)
(31,17,2)
(31,15,2)
(22,4,2)
(30,4,2)
(19,4,2)
(9,4,2)
(26,4,2)
(10,20,2)
(0,4,2)
(29,4,2)
(34,4,2)
(6,20,2)
(10,4,2)
(25,13,2)
(20,31,2)
(24,4,2)
(16,4,2)
(31,4,2)
(36,4,2)
(18,4,2)
(1,20,2)
(25,4,2)
(9,3,2)
(2,4,2)
(12,4,2)
(13,6,2)
-----------------------------------
(0,data)
(1,data[0])
(2,0)
(3,sizeof(twoIntsStruct)
(4,1)
(5,data = NULL)
(6,data[0])
(7,data)
(8,)
(9,100*sizeof(twoIntsStruct)
(10,data[0])
(11,if(1)
(12,twoIntsStruct)
(13,&data[0])
(14,data)
(15,twoIntsStruct *)
(16,0)
(17,ALLOCA(100*sizeof(twoIntsStruct)
(18,0)
(19,0)
(20,data = (twoIntsStruct *)
(21,data[0].intTwo = 0)
(22,data[0].intOne)
(23,100)
(24,data[0].intOne = 0)
(25,printStructLine(&data[0])
(26,intTwo)
(27,data)
(28,data)
(29,intOne)
(30,data[0].intTwo)
(31,(twoIntsStruct *)
(32,)
(33,1)
(34,0)
(35,if(1)
(36,data)
(37,RET)
(38,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^