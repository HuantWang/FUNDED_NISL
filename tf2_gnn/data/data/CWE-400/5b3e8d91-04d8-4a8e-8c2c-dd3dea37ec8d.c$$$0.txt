-----label-----
0
-----code-----
static void sla_change_trunk_state(const struct sla_trunk *trunk, enum sla_trunk_state state, 
	enum sla_which_trunk_refs inactive_only, const struct sla_trunk_ref *exclude)
{
	struct sla_station *station;
	struct sla_trunk_ref *trunk_ref;

	AST_LIST_TRAVERSE(&sla_stations, station, entry) {
		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {
			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
				|| trunk_ref == exclude)
				continue;
			trunk_ref->state = state;
			ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,
					     "SLA:%s_%s", station->name, trunk->name);
			break;
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
43,46
43,47
44,45
46,47
47,48
49,50
51,52
53,54
54,55
54,56
54,57
55,56
56,57
56,58
56,59
56,60
57,58
59,60
60,61
60,62
61,62
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
70,72
71,72
71,73
72,73
72,74
73,74
73,75
74,75
74,76
75,76
78,79
80,81
81,82
81,83
81,84
82,83
84,85
84,86
85,86
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
104,107
104,108
104,109
104,110
105,106
107,108
107,109
108,109
110,111
112,113
115,116
115,117
116,117
119,120
119,121
120,121
-----nextToken-----
2,4,7,9,10,13,15,18,20,23,25,26,31,33,34,38,40,41,45,48,50,52,58,62,63,65,67,76,77,79,83,86,87,88,91,93,94,99,100,102,106,109,111,113,114,117,118,121,122,123
-----computeFrom-----
71,72
71,73
72,73
72,74
73,74
73,75
89,90
89,91
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;
-----ast_node-----
static void sla_change_trunk_state(const struct sla_trunk *trunk, enum sla_trunk_state state, 	enum sla_which_trunk_refs inactive_only, const struct sla_trunk_ref *exclude){	struct sla_station *station;	struct sla_trunk_ref *trunk_ref;	AST_LIST_TRAVERSE(&sla_stations, station, entry) {		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name);			break;		}	}}
static void
sla_change_trunk_state(const struct sla_trunk *trunk, enum sla_trunk_state state, 	enum sla_which_trunk_refs inactive_only, const struct sla_trunk_ref *exclude)
sla_change_trunk_state
const struct sla_trunk *trunk
const struct sla_trunk
sla_trunk
*trunk
*
trunk
enum sla_trunk_state state
enum sla_trunk_state
sla_trunk_state
state
state
enum sla_which_trunk_refs inactive_only
enum sla_which_trunk_refs
sla_which_trunk_refs
inactive_only
inactive_only
const struct sla_trunk_ref *exclude
const struct sla_trunk_ref
sla_trunk_ref
*exclude
*
exclude
{	struct sla_station *station;	struct sla_trunk_ref *trunk_ref;	AST_LIST_TRAVERSE(&sla_stations, station, entry) {		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name);			break;		}	}}
struct sla_station *station;
struct sla_station *station;
struct sla_station
sla_station
*station
*
station
struct sla_trunk_ref *trunk_ref;
struct sla_trunk_ref *trunk_ref;
struct sla_trunk_ref
sla_trunk_ref
*trunk_ref
*
trunk_ref
AST_LIST_TRAVERSE(&sla_stations, station, entry)
AST_LIST_TRAVERSE(&sla_stations, station, entry)
AST_LIST_TRAVERSE
AST_LIST_TRAVERSE
&sla_stations
sla_stations
sla_stations
station
station
entry
entry
)
{		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name);			break;		}	}
AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry)
AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry)
AST_LIST_TRAVERSE
AST_LIST_TRAVERSE
&station->trunks
station->trunks
station
station
trunks
trunk_ref
trunk_ref
entry
entry
)
{			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name);			break;		}
if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;
trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude
trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
trunk_ref->trunk != trunk
trunk_ref->trunk
trunk_ref
trunk_ref
trunk
trunk
trunk
(inactive_only ? trunk_ref->chan : 0)
inactive_only ? trunk_ref->chan : 0
inactive_only
inactive_only
trunk_ref->chan
trunk_ref
trunk_ref
chan
0
trunk_ref == exclude
trunk_ref
trunk_ref
exclude
exclude
continue;
trunk_ref->state = state;
trunk_ref->state = state
trunk_ref->state
trunk_ref
trunk_ref
state
state
state
ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name);
ast_devstate_changed(sla_state_to_devstate(state), AST_DEVSTATE_CACHABLE,					     "SLA:%s_%s", station->name, trunk->name)
ast_devstate_changed
ast_devstate_changed
sla_state_to_devstate(state)
sla_state_to_devstate
sla_state_to_devstate
state
state
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
"SLA:%s_%s"
station->name
station
station
name
trunk->name
trunk
trunk
name
break;
-----joern-----
(11,36,0)
(4,33,0)
(22,34,0)
(31,20,0)
(30,12,0)
(43,20,0)
(15,11,0)
(16,27,0)
(34,22,0)
(19,34,0)
(11,38,0)
(11,24,0)
(1,14,0)
(26,22,0)
(29,24,0)
(4,23,0)
(33,35,0)
(11,18,0)
(23,4,0)
(33,4,0)
(22,3,0)
(41,17,0)
(21,33,0)
(39,36,0)
(37,34,0)
(5,20,0)
(22,23,0)
(0,38,0)
(17,23,0)
(40,36,0)
(24,12,0)
(10,38,0)
(25,22,0)
(27,30,0)
(38,43,0)
(36,35,0)
(42,30,0)
(23,17,0)
(32,27,0)
(14,33,0)
(24,11,0)
(8,14,0)
(23,22,0)
(30,38,0)
(17,13,0)
(28,17,0)
(44,18,0)
(33,14,0)
(18,11,0)
(7,11,0)
(9,18,0)
(36,11,0)
(44,9,1)
(9,7,1)
(22,3,1)
(36,39,1)
(22,26,1)
(41,22,1)
(14,1,1)
(37,25,1)
(34,19,1)
(30,12,1)
(30,42,1)
(2,4,1)
(28,41,1)
(22,34,1)
(4,23,1)
(27,16,1)
(17,28,1)
(23,17,1)
(4,33,1)
(1,8,1)
(24,12,1)
(21,14,1)
(6,0,1)
(36,35,1)
(33,14,1)
(39,40,1)
(11,36,1)
(32,2,1)
(32,4,1)
(16,32,1)
(11,18,1)
(11,24,1)
(17,13,1)
(42,27,1)
(18,44,1)
(33,21,1)
(25,33,1)
(29,30,1)
(19,37,1)
(33,35,1)
(40,18,1)
(26,25,1)
(0,11,1)
(24,29,1)
(23,22,1)
(7,15,1)
(15,24,1)
(25,33,2)
(22,3,2)
(41,22,2)
(11,18,2)
(4,33,2)
(33,14,2)
(23,33,2)
(24,12,2)
(28,22,2)
(23,17,2)
(11,24,2)
(33,35,2)
(17,22,2)
(22,33,2)
(26,25,2)
(30,12,2)
(19,25,2)
(4,23,2)
(36,35,2)
(2,4,2)
(23,22,2)
(37,25,2)
(17,13,2)
(34,25,2)
(11,36,2)
(22,34,2)
-----------------------------------
(0,break;)
(1,trunk)
(2,continue;)
(3,enum sla_which_trunk_refs inactive_only)
(4,trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
(5,station)
(6,RET)
(7,"SLA:%s_%s")
(8,trunk_ref)
(9,station)
(10,if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
(11,ast_devstate_changed(sla_state_to_devstate(state)
(12,enum sla_trunk_state state)
(13,const struct sla_trunk_ref *exclude)
(14,trunk_ref->trunk)
(15,AST_DEVSTATE_CACHABLE)
(16,state)
(17,trunk_ref == exclude)
(18,station->name)
(19,chan)
(20,)
(21,trunk)
(22,inactive_only ? trunk_ref->chan : 0)
(23,(inactive_only ? trunk_ref->chan : 0)
(24,sla_state_to_devstate(state)
(25,inactive_only)
(26,0)
(27,trunk_ref->state)
(28,exclude)
(29,state)
(30,trunk_ref->state = state)
(31,trunk_ref)
(32,trunk_ref)
(33,trunk_ref->trunk != trunk)
(34,trunk_ref->chan)
(35,const struct sla_trunk *trunk)
(36,trunk->name)
(37,trunk_ref)
(38,)
(39,name)
(40,trunk)
(41,trunk_ref)
(42,state)
(43,)
(44,name)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^