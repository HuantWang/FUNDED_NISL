-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = NULL;
    {
        wchar_t * data = *dataPtr1;
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
51,53
51,54
52,53
53,54
53,55
55,56
55,57
55,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
78,79
80,81
82,83
82,84
83,84
84,85
84,86
86,87
86,88
86,89
89,90
90,91
91,92
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,56,57,59,63,66,68,72,74,79,81,85,87,88,92,93
-----computeFrom-----
35,36
35,37
61,62
61,63
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_wchar_t_32_bad()
CWE401_Memory_Leak__strdup_wchar_t_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * data = *dataPtr1;        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(31,34,0)
(10,37,0)
(32,33,0)
(1,25,0)
(0,9,0)
(14,8,0)
(0,37,0)
(19,16,0)
(11,25,0)
(14,28,0)
(38,0,0)
(2,14,0)
(6,3,0)
(21,1,0)
(22,39,0)
(16,19,0)
(4,19,0)
(26,22,0)
(18,36,0)
(1,38,0)
(27,3,0)
(36,25,0)
(35,0,0)
(12,8,0)
(15,28,0)
(30,9,0)
(16,25,0)
(28,33,0)
(9,0,0)
(37,22,0)
(34,8,0)
(17,39,0)
(19,22,0)
(28,14,0)
(3,39,0)
(8,34,0)
(23,10,0)
(33,39,0)
(25,39,0)
(5,39,0)
(13,38,0)
(8,39,0)
(24,37,0)
(25,36,0)
(38,22,0)
(20,16,0)
(10,0,0)
(29,39,0)
(16,25,1)
(2,15,1)
(24,19,1)
(28,14,1)
(8,34,1)
(25,36,1)
(38,0,1)
(14,8,1)
(12,25,1)
(10,23,1)
(19,16,1)
(38,13,1)
(13,1,1)
(7,28,1)
(9,30,1)
(1,21,1)
(16,20,1)
(18,11,1)
(10,0,1)
(4,3,1)
(1,25,1)
(30,35,1)
(0,9,1)
(34,31,1)
(23,0,1)
(20,4,1)
(15,38,1)
(21,10,1)
(35,24,1)
(27,6,1)
(3,27,1)
(14,2,1)
(6,8,1)
(36,18,1)
(31,12,1)
(8,34,2)
(0,9,2)
(1,25,2)
(28,14,2)
(19,16,2)
(14,8,2)
(25,36,2)
(16,25,2)
(10,0,2)
(38,0,2)
-----------------------------------
(0,data = wcsdup(myString)
(1,*dataPtr1)
(2,dataPtr2)
(3,data = NULL)
(4,data)
(5,data)
(6,data)
(7,RET)
(8,* *dataPtr2 = &data)
(9,wcsdup(myString)
(10,printWLine(data)
(11,dataPtr1)
(12,dataPtr2)
(13,data)
(14,*dataPtr2)
(15,data)
(16,*dataPtr1)
(17,dataPtr2)
(18,data)
(19,* data = *dataPtr1)
(20,dataPtr1)
(21,dataPtr1)
(22,)
(23,data)
(24,"myString")
(25,* *dataPtr1 = &data)
(26,data)
(27,NULL)
(28,* data = *dataPtr2)
(29,dataPtr1)
(30,myString)
(31,data)
(32,data)
(33,)
(34,&data)
(35,data)
(36,&data)
(37,)
(38,*dataPtr1 = data)
(39,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^