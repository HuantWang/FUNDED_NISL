-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_10_bad()
{
    if(globalTrue)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,49,50,51,55,58,59,63,66,68,71,73,76,79,80,84,86,92,93,94,98,101,102,106,108
-----computeFrom-----
26,27
26,28
33,34
33,35
46,47
46,48
61,62
61,63
74,75
74,76
82,83
82,84
89,90
89,91
-----guardedBy-----
84,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_10_bad(){    if(globalTrue)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_10_bad()
CWE401_Memory_Leak__malloc_realloc_int_10_bad
{    if(globalTrue)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(globalTrue)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
globalTrue
globalTrue
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(57,9,0)
(22,49,0)
(7,17,0)
(36,42,0)
(17,47,0)
(16,30,0)
(47,30,0)
(40,29,0)
(52,29,0)
(54,55,0)
(55,58,0)
(45,51,0)
(30,29,0)
(49,44,0)
(46,19,0)
(15,49,0)
(42,50,0)
(50,29,0)
(56,49,0)
(27,31,0)
(49,29,0)
(0,56,0)
(7,51,0)
(2,18,0)
(51,7,0)
(13,56,0)
(9,4,0)
(25,4,0)
(3,26,0)
(4,25,0)
(21,22,0)
(18,6,0)
(39,29,0)
(30,47,0)
(4,9,0)
(26,50,0)
(55,54,0)
(14,6,0)
(42,40,0)
(17,7,0)
(44,23,0)
(48,26,0)
(56,50,0)
(33,16,0)
(19,41,0)
(38,18,0)
(8,56,0)
(34,4,0)
(12,50,0)
(5,42,0)
(10,54,0)
(53,7,0)
(26,30,0)
(32,22,0)
(25,30,0)
(1,25,0)
(24,16,0)
(6,41,0)
(18,49,0)
(25,44,0)
(20,47,0)
(44,25,0)
(44,49,0)
(47,20,0)
(56,6,0)
(56,13,0)
(11,29,0)
(40,42,0)
(37,30,0)
(42,30,0)
(29,28,0)
(19,49,0)
(47,17,0)
(13,41,0)
(23,44,0)
(14,18,1)
(6,14,1)
(1,15,1)
(47,17,1)
(42,50,1)
(34,1,1)
(40,42,1)
(21,49,1)
(22,49,1)
(25,30,1)
(17,7,1)
(26,30,1)
(16,30,1)
(48,55,1)
(26,3,1)
(48,16,1)
(19,49,1)
(57,34,1)
(53,37,1)
(46,13,1)
(25,4,1)
(56,49,1)
(0,6,1)
(15,40,1)
(56,8,1)
(37,43,1)
(44,23,1)
(36,5,1)
(56,6,1)
(22,32,1)
(24,30,1)
(12,26,1)
(35,43,1)
(10,16,1)
(45,53,1)
(55,54,1)
(44,25,1)
(47,20,1)
(4,9,1)
(18,49,1)
(13,56,1)
(16,33,1)
(19,46,1)
(18,2,1)
(9,57,1)
(32,21,1)
(35,19,1)
(5,50,1)
(54,10,1)
(50,12,1)
(42,36,1)
(51,45,1)
(33,24,1)
(49,44,1)
(56,50,1)
(42,30,1)
(3,48,1)
(8,0,1)
(35,22,1)
(30,47,1)
(38,22,1)
(2,38,1)
(7,51,1)
(4,43,2)
(47,20,2)
(49,44,2)
(42,43,2)
(42,30,2)
(42,50,2)
(50,43,2)
(40,42,2)
(33,43,2)
(5,43,2)
(7,51,2)
(56,49,2)
(8,22,2)
(6,22,2)
(22,49,2)
(44,43,2)
(38,22,2)
(56,6,2)
(7,43,2)
(17,43,2)
(18,49,2)
(30,43,2)
(56,22,2)
(21,43,2)
(2,22,2)
(34,43,2)
(51,43,2)
(17,7,2)
(3,43,2)
(25,43,2)
(14,22,2)
(19,49,2)
(16,30,2)
(30,47,2)
(55,54,2)
(46,22,2)
(26,30,2)
(55,16,2)
(25,30,2)
(26,43,2)
(53,43,2)
(16,43,2)
(13,56,2)
(25,4,2)
(19,22,2)
(0,22,2)
(56,50,2)
(18,22,2)
(54,16,2)
(15,43,2)
(44,23,2)
(49,43,2)
(22,43,2)
(44,25,2)
(45,43,2)
(24,43,2)
(13,22,2)
(40,43,2)
(48,43,2)
(32,43,2)
(47,17,2)
(47,43,2)
(1,43,2)
(12,43,2)
(37,43,2)
(10,16,2)
(57,43,2)
(36,43,2)
(9,43,2)
(4,9,2)
-----------------------------------
(0,data)
(1,data)
(2,0)
(3,0)
(4,(130000)
(5,data)
(6,data[0] = 10)
(7,100*sizeof(int)
(8,0)
(9,sizeof(int)
(10,1)
(11,if (data == NULL)
(12,5)
(13,printIntLine(data[0])
(14,10)
(15,data)
(16,data == NULL)
(17,malloc(100*sizeof(int)
(18,data[0])
(19,free(data)
(20,int *)
(21,data)
(22,data != NULL)
(23,int *)
(24,data)
(25,realloc(data, (130000)
(26,data[0])
(27,if(globalTrue)
(28,)
(29,)
(30,* data = (int *)
(31,)
(32,NULL)
(33,NULL)
(34,130000)
(35,RET)
(36,0)
(37,data)
(38,data)
(39,if (data != NULL)
(40,printIntLine(data[0])
(41,)
(42,data[0])
(43,globalTrue)
(44,(int *)
(45,int)
(46,data)
(47,(int *)
(48,data)
(49,data = (int *)
(50,data[0] = 5)
(51,sizeof(int)
(52,data)
(53,100)
(54,-1)
(55,exit(-1)
(56,data[0])
(57,int)
(58,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^