-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
42,43
42,44
42,45
43,44
45,46
48,49
49,50
49,51
50,51
52,53
56,57
57,58
57,59
58,59
62,63
62,64
64,65
64,66
64,67
64,68
64,69
64,70
65,66
70,71
71,72
71,73
72,73
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,47,51,53,54,55,59,60,61,63,66,67,68,69,73,74,75
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B2(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B2()
goodG2B2
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(14,10,0)
(35,24,0)
(17,9,0)
(20,24,0)
(25,13,0)
(23,24,0)
(4,21,0)
(29,17,0)
(30,2,0)
(15,0,0)
(27,21,0)
(13,9,0)
(9,17,0)
(20,29,0)
(5,10,0)
(18,24,0)
(2,29,0)
(16,29,0)
(28,21,0)
(6,17,0)
(8,2,0)
(19,20,0)
(0,24,0)
(9,13,0)
(11,4,0)
(17,29,0)
(17,6,0)
(13,31,0)
(36,26,0)
(2,24,0)
(32,10,0)
(29,24,0)
(33,10,0)
(1,31,0)
(34,4,0)
(26,10,0)
(37,21,0)
(7,24,0)
(31,13,0)
(17,6,1)
(16,22,1)
(2,8,1)
(36,12,1)
(3,33,1)
(33,12,1)
(2,29,1)
(1,25,1)
(13,31,1)
(4,34,1)
(22,4,1)
(9,13,1)
(0,15,1)
(23,20,1)
(35,0,1)
(25,16,1)
(29,17,1)
(12,35,1)
(31,1,1)
(17,9,1)
(30,29,1)
(20,19,1)
(15,22,1)
(34,11,1)
(32,26,1)
(12,23,1)
(20,29,1)
(26,36,1)
(19,2,1)
(3,32,1)
(8,30,1)
(29,22,2)
(13,22,2)
(17,6,2)
(31,22,2)
(16,22,2)
(1,22,2)
(9,22,2)
(26,12,2)
(30,22,2)
(17,22,2)
(0,22,2)
(36,12,2)
(8,22,2)
(19,22,2)
(25,22,2)
(29,17,2)
(13,31,2)
(2,29,2)
(2,22,2)
(33,12,2)
(15,22,2)
(23,22,2)
(32,12,2)
(17,9,2)
(9,13,2)
(20,29,2)
(35,22,2)
(20,22,2)
-----------------------------------
(0,printLine("Benign, fixed string")
(1,char)
(2,strcpy(data, "A String")
(3,RET)
(4,data = NULL)
(5,default:)
(6,char *)
(7,case 6:)
(8,"A String")
(9,ALLOCA(100*sizeof(char)
(10,)
(11,data)
(12,7)
(13,100*sizeof(char)
(14,case 7:)
(15,"Benign, fixed string")
(16,data)
(17,(char *)
(18,default:)
(19,data)
(20,printLine(data)
(21,)
(22,6)
(23,break;)
(24,)
(25,100)
(26,printLine("Benign, fixed string")
(27,switch(6)
(28,data)
(29,data = (char *)
(30,data)
(31,sizeof(char)
(32,break;)
(33,break;)
(34,NULL)
(35,break;)
(36,"Benign, fixed string")
(37,switch(7)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^