-----label-----
1
-----code-----
static void domain_remove_one_dev_info(struct dmar_domain *domain,
					  struct pci_dev *pdev)
{
	struct device_domain_info *info;
	struct intel_iommu *iommu;
	unsigned long flags;
	int found = 0;
	struct list_head *entry, *tmp;

	iommu = device_to_iommu(pci_domain_nr(pdev->bus), pdev->bus->number,
				pdev->devfn);
	if (!iommu)
		return;

	spin_lock_irqsave(&device_domain_lock, flags);
	list_for_each_safe(entry, tmp, &domain->devices) {
		info = list_entry(entry, struct device_domain_info, link);
		/* No need to compare PCI domain; it has to be the same */
		if (info->bus == pdev->bus->number &&
		    info->devfn == pdev->devfn) {
			list_del(&info->link);
			list_del(&info->global);
			if (info->dev)
				info->dev->dev.archdata.iommu = NULL;
			spin_unlock_irqrestore(&device_domain_lock, flags);

			iommu_disable_dev_iotlb(info);
			iommu_detach_dev(iommu, info->bus, info->devfn);
			iommu_detach_dependent_devices(iommu, pdev);
			free_devinfo_mem(info);

			spin_lock_irqsave(&device_domain_lock, flags);

			if (found)
				break;
			else
				continue;
		}

		/* if there is no other devices under the same iommu
		 * owned by this domain, clear this iommu in iommu_bmp
		 * update iommu count and coherency
		 */
		if (iommu == device_to_iommu(info->segment, info->bus,
					    info->devfn))
			found = 1;
	}

	if (found == 0) {
		unsigned long tmp_flags;
		spin_lock_irqsave(&domain->iommu_lock, tmp_flags);
		clear_bit(iommu->seq_id, &domain->iommu_bmp);
		domain->iommu_count--;
		domain_update_iommu_cap(domain);
		spin_unlock_irqrestore(&domain->iommu_lock, tmp_flags);

		spin_lock_irqsave(&iommu->lock, tmp_flags);
		clear_bit(domain->id, iommu->domain_ids);
		iommu->domains[domain->id] = NULL;
		spin_unlock_irqrestore(&iommu->lock, tmp_flags);
	}

	spin_unlock_irqrestore(&device_domain_lock, flags);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
35,36
37,38
38,39
38,40
40,41
40,42
42,43
44,45
45,46
45,47
45,48
46,47
48,49
48,50
51,52
51,53
54,55
55,56
55,57
56,57
58,59
58,60
58,61
58,62
59,60
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
69,71
70,71
74,75
74,76
75,76
78,79
78,80
79,80
80,81
83,84
84,85
84,86
84,87
85,86
87,88
88,89
90,91
92,93
93,94
93,95
93,96
93,97
94,95
96,97
98,99
100,101
101,102
101,103
102,103
105,106
106,107
106,108
106,109
107,108
108,109
108,110
109,110
109,111
110,111
110,112
111,112
111,113
112,113
115,116
115,117
116,117
116,118
117,118
121,122
121,123
122,123
122,124
123,124
126,127
126,128
127,128
130,131
130,132
130,133
130,134
130,135
130,136
130,137
130,138
130,139
130,140
131,132
132,133
132,134
133,134
135,136
136,137
136,138
137,138
140,141
141,142
141,143
142,143
144,145
145,146
145,147
146,147
149,150
149,151
150,151
150,152
151,152
154,155
155,156
155,157
156,157
156,158
157,158
157,159
158,159
158,160
159,160
159,161
160,161
166,167
168,169
169,170
169,171
169,172
170,171
172,173
173,174
175,176
177,178
178,179
178,180
179,180
181,182
183,184
184,185
184,186
184,187
184,188
185,186
187,188
189,190
189,191
190,191
193,194
193,195
194,195
197,198
198,199
198,200
198,201
199,200
201,202
203,204
205,206
206,207
206,208
207,208
209,210
211,212
212,213
212,214
212,215
213,214
215,216
216,217
218,219
220,221
220,222
220,223
221,222
225,226
225,227
226,227
226,228
227,228
229,230
229,231
229,232
229,233
230,231
232,233
232,234
233,234
236,237
236,238
237,238
240,241
240,242
241,242
244,245
245,246
245,247
246,247
249,250
249,251
250,251
250,252
251,252
254,255
254,256
254,257
254,258
254,259
254,260
254,261
254,262
254,263
254,264
255,256
256,257
256,258
258,259
260,261
261,262
261,263
261,264
262,263
264,265
265,266
265,267
266,267
269,270
271,272
272,273
272,274
272,275
273,274
275,276
275,277
276,277
279,280
280,281
280,282
281,282
284,285
285,286
286,287
286,288
287,288
290,291
291,292
291,293
292,293
294,295
296,297
297,298
297,299
297,300
298,299
300,301
301,302
301,303
302,303
305,306
307,308
308,309
308,310
308,311
309,310
311,312
312,313
312,314
313,314
316,317
318,319
319,320
319,321
319,322
320,321
322,323
322,324
323,324
326,327
326,328
327,328
330,331
331,332
331,333
332,333
332,334
333,334
333,335
334,335
337,338
337,339
338,339
341,342
343,344
344,345
344,346
344,347
345,346
347,348
348,349
348,350
349,350
352,353
354,355
355,356
355,357
355,358
356,357
358,359
359,360
361,362
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,28,30,31,34,36,39,41,43,47,49,50,52,53,57,60,63,66,67,71,72,73,76,77,81,82,86,89,91,95,97,99,103,104,113,114,118,119,120,124,125,128,129,134,138,139,143,147,148,152,153,161,162,163,164,165,167,171,174,176,180,182,186,188,191,192,195,196,200,202,204,208,210,214,217,219,222,223,224,228,231,234,235,238,239,242,243,247,248,252,253,257,259,263,267,268,270,274,277,278,282,283,288,289,293,295,299,303,304,306,310,314,315,317,321,324,325,328,329,335,336,339,340,342,346,350,351,353,357,360,362
-----computeFrom-----
55,56
55,57
109,110
109,111
110,111
110,112
121,122
121,123
155,156
155,157
226,227
226,228
245,246
245,247
250,251
250,252
331,332
331,333
-----guardedBy-----
119,192
128,204
129,196
124,210
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ProblemStatement;CompoundStatement;ProblemStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;BreakStatement;ContinueStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void domain_remove_one_dev_info(struct dmar_domain *domain,					  struct pci_dev *pdev){	struct device_domain_info *info;	struct intel_iommu *iommu;	unsigned long flags;	int found = 0;	struct list_head *entry, *tmp;	iommu = device_to_iommu(pci_domain_nr(pdev->bus), pdev->bus->number,				pdev->devfn);	if (!iommu)		return;	spin_lock_irqsave(&device_domain_lock, flags);	list_for_each_safe(entry, tmp, &domain->devices) {		info = list_entry(entry, struct device_domain_info, link);		/* No need to compare PCI domain; it has to be the same */		if (info->bus == pdev->bus->number &&		    info->devfn == pdev->devfn) {			list_del(&info->link);			list_del(&info->global);			if (info->dev)				info->dev->dev.archdata.iommu = NULL;			spin_unlock_irqrestore(&device_domain_lock, flags);			iommu_disable_dev_iotlb(info);			iommu_detach_dev(iommu, info->bus, info->devfn);			iommu_detach_dependent_devices(iommu, pdev);			free_devinfo_mem(info);			spin_lock_irqsave(&device_domain_lock, flags);			if (found)				break;			else				continue;		}		/* if there is no other devices under the same iommu		 * owned by this domain, clear this iommu in iommu_bmp		 * update iommu count and coherency		 */		if (iommu == device_to_iommu(info->segment, info->bus,					    info->devfn))			found = 1;	}	if (found == 0) {		unsigned long tmp_flags;		spin_lock_irqsave(&domain->iommu_lock, tmp_flags);		clear_bit(iommu->seq_id, &domain->iommu_bmp);		domain->iommu_count--;		domain_update_iommu_cap(domain);		spin_unlock_irqrestore(&domain->iommu_lock, tmp_flags);		spin_lock_irqsave(&iommu->lock, tmp_flags);		clear_bit(domain->id, iommu->domain_ids);		iommu->domains[domain->id] = NULL;		spin_unlock_irqrestore(&iommu->lock, tmp_flags);	}	spin_unlock_irqrestore(&device_domain_lock, flags);}
static void
domain_remove_one_dev_info(struct dmar_domain *domain,					  struct pci_dev *pdev)
domain_remove_one_dev_info
struct dmar_domain *domain
struct dmar_domain
dmar_domain
*domain
*
domain
struct pci_dev *pdev
struct pci_dev
pci_dev
*pdev
*
pdev
{	struct device_domain_info *info;	struct intel_iommu *iommu;	unsigned long flags;	int found = 0;	struct list_head *entry, *tmp;	iommu = device_to_iommu(pci_domain_nr(pdev->bus), pdev->bus->number,				pdev->devfn);	if (!iommu)		return;	spin_lock_irqsave(&device_domain_lock, flags);	list_for_each_safe(entry, tmp, &domain->devices) {		info = list_entry(entry, struct device_domain_info, link);		/* No need to compare PCI domain; it has to be the same */		if (info->bus == pdev->bus->number &&		    info->devfn == pdev->devfn) {			list_del(&info->link);			list_del(&info->global);			if (info->dev)				info->dev->dev.archdata.iommu = NULL;			spin_unlock_irqrestore(&device_domain_lock, flags);			iommu_disable_dev_iotlb(info);			iommu_detach_dev(iommu, info->bus, info->devfn);			iommu_detach_dependent_devices(iommu, pdev);			free_devinfo_mem(info);			spin_lock_irqsave(&device_domain_lock, flags);			if (found)				break;			else				continue;		}		/* if there is no other devices under the same iommu		 * owned by this domain, clear this iommu in iommu_bmp		 * update iommu count and coherency		 */		if (iommu == device_to_iommu(info->segment, info->bus,					    info->devfn))			found = 1;	}	if (found == 0) {		unsigned long tmp_flags;		spin_lock_irqsave(&domain->iommu_lock, tmp_flags);		clear_bit(iommu->seq_id, &domain->iommu_bmp);		domain->iommu_count--;		domain_update_iommu_cap(domain);		spin_unlock_irqrestore(&domain->iommu_lock, tmp_flags);		spin_lock_irqsave(&iommu->lock, tmp_flags);		clear_bit(domain->id, iommu->domain_ids);		iommu->domains[domain->id] = NULL;		spin_unlock_irqrestore(&iommu->lock, tmp_flags);	}	spin_unlock_irqrestore(&device_domain_lock, flags);}
struct device_domain_info *info;
struct device_domain_info *info;
struct device_domain_info
device_domain_info
*info
*
info
struct intel_iommu *iommu;
struct intel_iommu *iommu;
struct intel_iommu
intel_iommu
*iommu
*
iommu
unsigned long flags;
unsigned long flags;
unsigned long
flags
flags
int found = 0;
int found = 0;
int
found = 0
found
= 0
0
struct list_head *entry, *tmp;
struct list_head *entry, *tmp;
struct list_head
list_head
*entry
*
entry
*tmp
*
tmp
iommu = device_to_iommu(pci_domain_nr(pdev->bus), pdev->bus->number,				pdev->devfn);
iommu = device_to_iommu(pci_domain_nr(pdev->bus), pdev->bus->number,				pdev->devfn)
iommu
iommu
device_to_iommu(pci_domain_nr(pdev->bus), pdev->bus->number,				pdev->devfn)
device_to_iommu
device_to_iommu
pci_domain_nr(pdev->bus)
pci_domain_nr
pci_domain_nr
pdev->bus
pdev
pdev
bus
pdev->bus->number
pdev->bus
pdev
pdev
bus
number
pdev->devfn
pdev
pdev
devfn
if (!iommu)		return;
!iommu
iommu
iommu
return;
spin_lock_irqsave(&device_domain_lock, flags);
spin_lock_irqsave(&device_domain_lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&device_domain_lock
device_domain_lock
device_domain_lock
flags
flags
list_for_each_safe(entry, tmp, &domain->devices)
list_for_each_safe(entry, tmp, &domain->devices)
list_for_each_safe
list_for_each_safe
entry
entry
tmp
tmp
&domain->devices
domain->devices
domain
domain
devices
)
{		info = list_entry(entry, struct device_domain_info, link);		/* No need to compare PCI domain; it has to be the same */		if (info->bus == pdev->bus->number &&		    info->devfn == pdev->devfn) {			list_del(&info->link);			list_del(&info->global);			if (info->dev)				info->dev->dev.archdata.iommu = NULL;			spin_unlock_irqrestore(&device_domain_lock, flags);			iommu_disable_dev_iotlb(info);			iommu_detach_dev(iommu, info->bus, info->devfn);			iommu_detach_dependent_devices(iommu, pdev);			free_devinfo_mem(info);			spin_lock_irqsave(&device_domain_lock, flags);			if (found)				break;			else				continue;		}		/* if there is no other devices under the same iommu		 * owned by this domain, clear this iommu in iommu_bmp		 * update iommu count and coherency		 */		if (iommu == device_to_iommu(info->segment, info->bus,					    info->devfn))			found = 1;	}
info = list_entry(entry, struct device_domain_info, link);
if (info->bus == pdev->bus->number &&		    info->devfn == pdev->devfn) {			list_del(&info->link);			list_del(&info->global);			if (info->dev)				info->dev->dev.archdata.iommu = NULL;			spin_unlock_irqrestore(&device_domain_lock, flags);			iommu_disable_dev_iotlb(info);			iommu_detach_dev(iommu, info->bus, info->devfn);			iommu_detach_dependent_devices(iommu, pdev);			free_devinfo_mem(info);			spin_lock_irqsave(&device_domain_lock, flags);			if (found)				break;			else				continue;		}
info->bus == pdev->bus->number &&		    info->devfn == pdev->devfn
info->bus == pdev->bus->number
info->bus
info
info
bus
pdev->bus->number
pdev->bus
pdev
pdev
bus
number
info->devfn == pdev->devfn
info->devfn
info
info
devfn
pdev->devfn
pdev
pdev
devfn
{			list_del(&info->link);			list_del(&info->global);			if (info->dev)				info->dev->dev.archdata.iommu = NULL;			spin_unlock_irqrestore(&device_domain_lock, flags);			iommu_disable_dev_iotlb(info);			iommu_detach_dev(iommu, info->bus, info->devfn);			iommu_detach_dependent_devices(iommu, pdev);			free_devinfo_mem(info);			spin_lock_irqsave(&device_domain_lock, flags);			if (found)				break;			else				continue;		}
list_del(&info->link);
list_del(&info->link)
list_del
list_del
&info->link
info->link
info
info
link
list_del(&info->global);
list_del(&info->global)
list_del
list_del
&info->global
info->global
info
info
global
if (info->dev)				info->dev->dev.archdata.iommu = NULL;
info->dev
info
info
dev
info->dev->dev.archdata.iommu = NULL;
info->dev->dev.archdata.iommu = NULL
info->dev->dev.archdata.iommu
info->dev->dev.archdata
info->dev->dev
info->dev
info
info
dev
dev
archdata
iommu
NULL
NULL
spin_unlock_irqrestore(&device_domain_lock, flags);
spin_unlock_irqrestore(&device_domain_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&device_domain_lock
device_domain_lock
device_domain_lock
flags
flags
iommu_disable_dev_iotlb(info);
iommu_disable_dev_iotlb(info)
iommu_disable_dev_iotlb
iommu_disable_dev_iotlb
info
info
iommu_detach_dev(iommu, info->bus, info->devfn);
iommu_detach_dev(iommu, info->bus, info->devfn)
iommu_detach_dev
iommu_detach_dev
iommu
iommu
info->bus
info
info
bus
info->devfn
info
info
devfn
iommu_detach_dependent_devices(iommu, pdev);
iommu_detach_dependent_devices(iommu, pdev)
iommu_detach_dependent_devices
iommu_detach_dependent_devices
iommu
iommu
pdev
pdev
free_devinfo_mem(info);
free_devinfo_mem(info)
free_devinfo_mem
free_devinfo_mem
info
info
spin_lock_irqsave(&device_domain_lock, flags);
spin_lock_irqsave(&device_domain_lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&device_domain_lock
device_domain_lock
device_domain_lock
flags
flags
if (found)				break;			else				continue;
found
found
break;
continue;
if (iommu == device_to_iommu(info->segment, info->bus,					    info->devfn))			found = 1;
iommu == device_to_iommu(info->segment, info->bus,					    info->devfn)
iommu
iommu
device_to_iommu(info->segment, info->bus,					    info->devfn)
device_to_iommu
device_to_iommu
info->segment
info
info
segment
info->bus
info
info
bus
info->devfn
info
info
devfn
found = 1;
found = 1
found
found
1
if (found == 0) {		unsigned long tmp_flags;		spin_lock_irqsave(&domain->iommu_lock, tmp_flags);		clear_bit(iommu->seq_id, &domain->iommu_bmp);		domain->iommu_count--;		domain_update_iommu_cap(domain);		spin_unlock_irqrestore(&domain->iommu_lock, tmp_flags);		spin_lock_irqsave(&iommu->lock, tmp_flags);		clear_bit(domain->id, iommu->domain_ids);		iommu->domains[domain->id] = NULL;		spin_unlock_irqrestore(&iommu->lock, tmp_flags);	}
found == 0
found
found
0
{		unsigned long tmp_flags;		spin_lock_irqsave(&domain->iommu_lock, tmp_flags);		clear_bit(iommu->seq_id, &domain->iommu_bmp);		domain->iommu_count--;		domain_update_iommu_cap(domain);		spin_unlock_irqrestore(&domain->iommu_lock, tmp_flags);		spin_lock_irqsave(&iommu->lock, tmp_flags);		clear_bit(domain->id, iommu->domain_ids);		iommu->domains[domain->id] = NULL;		spin_unlock_irqrestore(&iommu->lock, tmp_flags);	}
unsigned long tmp_flags;
unsigned long tmp_flags;
unsigned long
tmp_flags
tmp_flags
spin_lock_irqsave(&domain->iommu_lock, tmp_flags);
spin_lock_irqsave(&domain->iommu_lock, tmp_flags)
spin_lock_irqsave
spin_lock_irqsave
&domain->iommu_lock
domain->iommu_lock
domain
domain
iommu_lock
tmp_flags
tmp_flags
clear_bit(iommu->seq_id, &domain->iommu_bmp);
clear_bit(iommu->seq_id, &domain->iommu_bmp)
clear_bit
clear_bit
iommu->seq_id
iommu
iommu
seq_id
&domain->iommu_bmp
domain->iommu_bmp
domain
domain
iommu_bmp
domain->iommu_count--;
domain->iommu_count--
domain->iommu_count
domain
domain
iommu_count
domain_update_iommu_cap(domain);
domain_update_iommu_cap(domain)
domain_update_iommu_cap
domain_update_iommu_cap
domain
domain
spin_unlock_irqrestore(&domain->iommu_lock, tmp_flags);
spin_unlock_irqrestore(&domain->iommu_lock, tmp_flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&domain->iommu_lock
domain->iommu_lock
domain
domain
iommu_lock
tmp_flags
tmp_flags
spin_lock_irqsave(&iommu->lock, tmp_flags);
spin_lock_irqsave(&iommu->lock, tmp_flags)
spin_lock_irqsave
spin_lock_irqsave
&iommu->lock
iommu->lock
iommu
iommu
lock
tmp_flags
tmp_flags
clear_bit(domain->id, iommu->domain_ids);
clear_bit(domain->id, iommu->domain_ids)
clear_bit
clear_bit
domain->id
domain
domain
id
iommu->domain_ids
iommu
iommu
domain_ids
iommu->domains[domain->id] = NULL;
iommu->domains[domain->id] = NULL
iommu->domains[domain->id]
iommu->domains
iommu
iommu
domains
domain->id
domain
domain
id
NULL
NULL
spin_unlock_irqrestore(&iommu->lock, tmp_flags);
spin_unlock_irqrestore(&iommu->lock, tmp_flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&iommu->lock
iommu->lock
iommu
iommu
lock
tmp_flags
tmp_flags
spin_unlock_irqrestore(&device_domain_lock, flags);
spin_unlock_irqrestore(&device_domain_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&device_domain_lock
device_domain_lock
device_domain_lock
flags
flags
-----joern-----
(3,91,0)
(17,2,0)
(49,171,0)
(164,172,0)
(183,162,0)
(135,109,0)
(23,172,0)
(150,143,0)
(103,154,0)
(104,171,0)
(39,119,0)
(32,177,0)
(152,36,0)
(12,162,0)
(55,2,0)
(123,179,0)
(53,74,0)
(102,154,0)
(46,55,0)
(184,178,0)
(95,185,0)
(176,175,0)
(41,87,0)
(90,73,0)
(180,91,0)
(13,75,0)
(19,0,0)
(179,154,0)
(30,79,0)
(172,164,0)
(0,19,0)
(88,163,0)
(160,38,0)
(0,103,0)
(89,154,0)
(20,17,0)
(21,172,0)
(90,74,0)
(4,47,0)
(99,81,0)
(40,6,0)
(125,135,0)
(94,117,0)
(13,136,0)
(130,43,0)
(174,178,0)
(36,30,0)
(25,69,0)
(74,90,0)
(109,135,0)
(73,165,0)
(92,25,0)
(172,23,0)
(47,179,0)
(140,106,0)
(98,69,0)
(157,30,0)
(141,2,0)
(138,34,0)
(118,48,0)
(124,102,0)
(95,75,0)
(111,115,0)
(187,43,0)
(14,5,0)
(88,121,0)
(156,137,0)
(31,112,0)
(168,4,0)
(100,2,0)
(65,9,0)
(36,71,0)
(79,30,0)
(106,2,0)
(30,36,0)
(24,149,0)
(146,60,0)
(16,165,0)
(121,154,0)
(8,89,0)
(6,89,0)
(31,69,0)
(106,76,0)
(74,71,0)
(115,75,0)
(55,19,0)
(57,112,0)
(126,145,0)
(151,178,0)
(113,141,0)
(135,125,0)
(17,185,0)
(5,174,0)
(129,143,0)
(185,17,0)
(49,69,0)
(87,137,0)
(125,79,0)
(22,2,0)
(107,177,0)
(182,103,0)
(91,3,0)
(47,4,0)
(171,49,0)
(64,149,0)
(159,138,0)
(29,178,0)
(153,100,0)
(128,164,0)
(79,125,0)
(48,92,0)
(90,64,0)
(122,49,0)
(9,65,0)
(165,71,0)
(42,136,0)
(6,40,0)
(45,109,0)
(59,65,0)
(158,81,0)
(9,178,0)
(145,88,0)
(47,115,0)
(121,88,0)
(34,22,0)
(88,145,0)
(172,69,0)
(109,71,0)
(19,55,0)
(131,36,0)
(58,163,0)
(50,23,0)
(101,164,0)
(91,63,0)
(132,87,0)
(117,178,0)
(33,88,0)
(143,117,0)
(77,120,0)
(120,79,0)
(139,109,0)
(166,186,0)
(141,13,0)
(34,138,0)
(40,75,0)
(136,13,0)
(149,64,0)
(138,75,0)
(179,47,0)
(25,92,0)
(56,57,0)
(161,179,0)
(63,12,0)
(12,63,0)
(60,154,0)
(76,106,0)
(7,178,0)
(72,63,0)
(35,75,0)
(92,48,0)
(156,75,0)
(79,120,0)
(28,154,0)
(89,6,0)
(0,75,0)
(86,178,0)
(66,55,0)
(133,145,0)
(155,178,0)
(67,95,0)
(44,121,0)
(154,178,0)
(112,57,0)
(154,90,0)
(18,148,0)
(13,141,0)
(116,3,0)
(105,57,0)
(93,69,0)
(163,88,0)
(83,136,0)
(80,23,0)
(137,156,0)
(144,33,0)
(4,2,0)
(119,69,0)
(88,33,0)
(51,117,0)
(60,71,0)
(26,74,0)
(173,103,0)
(100,75,0)
(142,22,0)
(181,165,0)
(70,10,0)
(114,12,0)
(174,5,0)
(27,4,0)
(68,156,0)
(15,17,0)
(147,22,0)
(175,69,0)
(169,48,0)
(112,31,0)
(186,69,0)
(73,90,0)
(1,163,0)
(127,40,0)
(167,174,0)
(84,9,0)
(61,89,0)
(76,75,0)
(103,0,0)
(134,178,0)
(37,106,0)
(148,119,0)
(172,154,0)
(54,141,0)
(87,154,0)
(136,154,0)
(110,33,0)
(143,81,0)
(43,135,0)
(22,34,0)
(63,91,0)
(149,71,0)
(82,149,0)
(165,73,0)
(108,178,0)
(85,3,0)
(64,90,0)
(97,10,0)
(119,148,0)
(11,60,0)
(177,178,0)
(62,64,0)
(135,43,0)
(137,87,0)
(185,95,0)
(90,154,0)
(52,120,0)
(60,69,0)
(106,2,1)
(45,139,1)
(92,48,1)
(13,141,1)
(141,113,1)
(150,121,1)
(77,52,1)
(72,91,1)
(25,92,1)
(62,149,1)
(3,116,1)
(128,101,1)
(171,104,1)
(60,71,1)
(136,154,1)
(129,150,1)
(44,170,1)
(109,71,1)
(70,97,1)
(90,64,1)
(149,71,1)
(33,144,1)
(180,3,1)
(22,2,1)
(56,105,1)
(85,10,1)
(168,179,1)
(147,100,1)
(60,146,1)
(1,58,1)
(119,148,1)
(63,72,1)
(95,67,1)
(18,162,1)
(164,128,1)
(79,30,1)
(96,78,1)
(87,132,1)
(15,143,1)
(172,164,1)
(53,26,1)
(59,102,1)
(133,33,1)
(4,27,1)
(181,28,1)
(114,63,1)
(156,137,1)
(158,99,1)
(47,4,1)
(156,68,1)
(160,174,1)
(113,54,1)
(100,2,1)
(61,8,1)
(149,82,1)
(89,154,1)
(47,179,1)
(135,109,1)
(135,43,1)
(4,2,1)
(83,141,1)
(60,154,1)
(154,90,1)
(48,169,1)
(126,133,1)
(9,65,1)
(127,6,1)
(84,65,1)
(148,18,1)
(57,56,1)
(20,15,1)
(68,137,1)
(88,145,1)
(143,117,1)
(78,49,1)
(115,111,1)
(174,5,1)
(121,154,1)
(5,14,1)
(10,70,1)
(30,157,1)
(24,73,1)
(163,1,1)
(80,50,1)
(166,119,1)
(81,158,1)
(175,176,1)
(0,103,1)
(97,31,1)
(102,154,1)
(67,185,1)
(167,5,1)
(144,110,1)
(28,117,1)
(91,180,1)
(122,171,1)
(49,122,1)
(121,88,1)
(146,11,1)
(170,78,1)
(63,91,1)
(73,165,1)
(186,166,1)
(174,167,1)
(46,66,1)
(185,17,1)
(130,79,1)
(90,74,1)
(141,2,1)
(12,114,1)
(187,130,1)
(90,73,1)
(172,154,1)
(13,136,1)
(110,163,1)
(19,55,1)
(95,185,1)
(99,121,1)
(159,34,1)
(116,85,1)
(14,156,1)
(152,120,1)
(142,147,1)
(118,125,1)
(17,2,1)
(173,182,1)
(49,171,1)
(88,163,1)
(79,120,1)
(131,152,1)
(17,20,1)
(162,183,1)
(125,135,1)
(143,81,1)
(106,37,1)
(64,149,1)
(82,24,1)
(21,186,1)
(183,12,1)
(26,64,1)
(66,103,1)
(11,172,1)
(103,173,1)
(112,57,1)
(117,94,1)
(38,102,1)
(64,62,1)
(103,154,1)
(44,96,1)
(44,125,1)
(42,83,1)
(111,47,1)
(36,71,1)
(100,153,1)
(76,106,1)
(50,164,1)
(9,84,1)
(94,51,1)
(14,143,1)
(52,9,1)
(102,124,1)
(161,13,1)
(12,63,1)
(30,36,1)
(145,126,1)
(137,87,1)
(54,40,1)
(34,22,1)
(0,19,1)
(123,161,1)
(136,42,1)
(22,142,1)
(74,53,1)
(91,3,1)
(143,129,1)
(43,187,1)
(39,148,1)
(109,45,1)
(124,154,1)
(138,34,1)
(172,23,1)
(119,39,1)
(55,2,1)
(74,71,1)
(165,71,1)
(105,25,1)
(101,21,1)
(16,181,1)
(169,118,1)
(140,0,1)
(179,154,1)
(179,123,1)
(138,159,1)
(125,79,1)
(104,175,1)
(6,89,1)
(89,61,1)
(182,95,1)
(120,77,1)
(176,60,1)
(55,46,1)
(165,16,1)
(157,36,1)
(8,138,1)
(88,33,1)
(37,140,1)
(65,59,1)
(87,154,1)
(139,43,1)
(40,6,1)
(31,112,1)
(150,81,1)
(18,10,1)
(153,76,1)
(36,131,1)
(132,41,1)
(23,80,1)
(58,44,1)
(40,127,1)
(27,168,1)
(41,115,1)
(160,38,1)
(91,3,2)
(183,10,2)
(76,143,2)
(47,143,2)
(176,125,2)
(154,90,2)
(132,143,2)
(60,125,2)
(10,125,2)
(77,102,2)
(6,143,2)
(25,125,2)
(58,102,2)
(143,81,2)
(168,143,2)
(68,143,2)
(179,143,2)
(136,154,2)
(73,165,2)
(147,143,2)
(122,125,2)
(78,125,2)
(31,125,2)
(135,43,2)
(37,143,2)
(34,143,2)
(153,143,2)
(41,143,2)
(143,102,2)
(84,102,2)
(102,154,2)
(48,125,2)
(164,125,2)
(136,143,2)
(104,125,2)
(174,102,2)
(88,163,2)
(6,89,2)
(90,64,2)
(172,154,2)
(115,143,2)
(148,125,2)
(99,121,2)
(47,179,2)
(40,143,2)
(131,102,2)
(120,102,2)
(21,125,2)
(90,74,2)
(17,2,2)
(52,102,2)
(83,143,2)
(103,154,2)
(4,143,2)
(79,120,2)
(130,79,2)
(156,137,2)
(126,102,2)
(144,102,2)
(27,143,2)
(138,143,2)
(172,164,2)
(185,143,2)
(109,79,2)
(128,125,2)
(34,22,2)
(65,102,2)
(113,143,2)
(19,55,2)
(125,135,2)
(33,102,2)
(145,102,2)
(60,71,2)
(156,143,2)
(17,143,2)
(81,121,2)
(85,10,2)
(141,143,2)
(44,102,2)
(112,125,2)
(0,19,2)
(63,91,2)
(13,136,2)
(91,10,2)
(97,125,2)
(158,121,2)
(46,143,2)
(180,10,2)
(167,102,2)
(172,125,2)
(42,143,2)
(179,154,2)
(12,10,2)
(47,4,2)
(123,143,2)
(186,125,2)
(111,143,2)
(22,2,2)
(67,143,2)
(9,65,2)
(88,102,2)
(157,102,2)
(38,102,2)
(173,143,2)
(100,143,2)
(76,106,2)
(135,79,2)
(139,79,2)
(13,141,2)
(146,125,2)
(19,143,2)
(125,102,2)
(106,143,2)
(119,148,2)
(169,125,2)
(40,6,2)
(22,143,2)
(20,143,2)
(12,63,2)
(140,143,2)
(141,2,2)
(175,125,2)
(39,125,2)
(63,10,2)
(55,2,2)
(79,30,2)
(101,125,2)
(61,143,2)
(11,125,2)
(160,38,2)
(95,185,2)
(13,143,2)
(121,102,2)
(25,92,2)
(90,73,2)
(110,102,2)
(137,143,2)
(36,102,2)
(162,10,2)
(0,143,2)
(36,71,2)
(4,2,2)
(96,78,2)
(3,10,2)
(66,143,2)
(182,143,2)
(79,102,2)
(161,143,2)
(174,5,2)
(171,125,2)
(56,125,2)
(89,143,2)
(185,17,2)
(135,109,2)
(0,103,2)
(88,145,2)
(31,112,2)
(129,102,2)
(57,125,2)
(59,102,2)
(121,88,2)
(45,79,2)
(74,71,2)
(116,10,2)
(92,48,2)
(49,125,2)
(23,125,2)
(105,125,2)
(87,154,2)
(92,125,2)
(114,10,2)
(125,79,2)
(54,143,2)
(88,33,2)
(137,87,2)
(14,102,2)
(103,143,2)
(5,102,2)
(60,154,2)
(55,143,2)
(121,154,2)
(87,143,2)
(172,23,2)
(138,34,2)
(187,79,2)
(165,71,2)
(118,125,2)
(9,102,2)
(112,57,2)
(1,102,2)
(95,143,2)
(49,171,2)
(43,79,2)
(142,143,2)
(170,78,2)
(133,102,2)
(8,143,2)
(64,149,2)
(127,143,2)
(15,143,2)
(119,125,2)
(106,2,2)
(109,71,2)
(159,143,2)
(70,125,2)
(143,117,2)
(80,125,2)
(89,154,2)
(163,102,2)
(152,102,2)
(18,125,2)
(166,125,2)
(150,102,2)
(149,71,2)
(30,102,2)
(50,125,2)
(72,10,2)
(30,36,2)
(100,2,2)
-----------------------------------
(0,clear_bit(iommu->seq_id, &domain->iommu_bmp)
(1,segment)
(2,struct dmar_domain *domain)
(3,info->dev)
(4,domain->id)
(5,&device_domain_lock)
(6,&iommu->lock)
(7,info)
(8,iommu)
(9,spin_lock_irqsave(&device_domain_lock, flags)
(10,info->dev)
(11,iommu)
(12,info->dev->dev.archdata.iommu)
(13,clear_bit(domain->id, iommu->domain_ids)
(14,device_domain_lock)
(15,domain)
(16,bus)
(17,domain->iommu_lock)
(18,device_domain_lock)
(19,&domain->iommu_bmp)
(20,iommu_lock)
(21,iommu)
(22,domain->iommu_lock)
(23,info->devfn)
(24,pdev)
(25,list_del(&info->link)
(26,pdev)
(27,id)
(28,iommu)
(29,found)
(30,pdev->bus->number)
(31,list_del(&info->global)
(32,if (iommu == device_to_iommu(info->segment, info->bus,\n\\n\\t\\t\\t\\t\\t    info->devfn)
(33,info->bus)
(34,&domain->iommu_lock)
(35,tmp_flags)
(36,pdev->bus)
(37,iommu_count)
(38,return;)
(39,flags)
(40,spin_lock_irqsave(&iommu->lock, tmp_flags)
(41,iommu)
(42,domain_ids)
(43,info->devfn)
(44,iommu)
(45,devfn)
(46,iommu_bmp)
(47,iommu->domains[domain->id])
(48,info->link)
(49,spin_lock_irqsave(&device_domain_lock, flags)
(50,info)
(51,found)
(52,info)
(53,devfn)
(54,domain)
(55,domain->iommu_bmp)
(56,global)
(57,info->global)
(58,info)
(59,device_domain_lock)
(60,iommu_detach_dependent_devices(iommu, pdev)
(61,lock)
(62,number)
(63,info->dev->dev.archdata)
(64,pdev->bus->number)
(65,&device_domain_lock)
(66,domain)
(67,tmp_flags)
(68,tmp_flags)
(69,)
(70,dev)
(71,struct pci_dev *pdev)
(72,archdata)
(73,pci_domain_nr(pdev->bus)
(74,pdev->devfn)
(75,)
(76,domain->iommu_count--)
(77,bus)
(78,found)
(79,info->bus == pdev->bus->number)
(80,devfn)
(81,found = 1)
(82,bus)
(83,iommu)
(84,flags)
(85,info)
(86,if (found == 0)
(87,iommu->lock)
(88,device_to_iommu(info->segment, info->bus,\n\\n\\t\\t\\t\\t\\t    info->devfn)
(89,iommu->lock)
(90,device_to_iommu(pci_domain_nr(pdev->bus)
(91,info->dev->dev)
(92,&info->link)
(93,if (info->dev)
(94,0)
(95,spin_lock_irqsave(&domain->iommu_lock, tmp_flags)
(96,continue;)
(97,info)
(98,if (found)
(99,found)
(100,domain_update_iommu_cap(domain)
(101,info)
(102,!iommu)
(103,iommu->seq_id)
(104,device_domain_lock)
(105,info)
(106,domain->iommu_count)
(107,if (info->bus == pdev->bus->number &&\n\\n\\t\\t    info->devfn == pdev->devfn)
(108,tmp)
(109,pdev->devfn)
(110,info)
(111,NULL)
(112,&info->global)
(113,id)
(114,iommu)
(115,iommu->domains[domain->id] = NULL)
(116,dev)
(117,found = 0)
(118,info)
(119,spin_unlock_irqrestore(&device_domain_lock, flags)
(120,info->bus)
(121,iommu == device_to_iommu(info->segment, info->bus,\n\\n\\t\\t\\t\\t\\t    info->devfn)
(122,flags)
(123,domains)
(124,iommu)
(125,info->bus == pdev->bus->number &&\n\\n\\t\\t    info->devfn == pdev->devfn)
(126,devfn)
(127,tmp_flags)
(128,bus)
(129,0)
(130,info)
(131,bus)
(132,lock)
(133,info)
(134,entry)
(135,info->devfn == pdev->devfn)
(136,iommu->domain_ids)
(137,&iommu->lock)
(138,spin_unlock_irqrestore(&domain->iommu_lock, tmp_flags)
(139,pdev)
(140,domain)
(141,domain->id)
(142,iommu_lock)
(143,found == 0)
(144,bus)
(145,info->devfn)
(146,pdev)
(147,domain)
(148,&device_domain_lock)
(149,pdev->bus)
(150,found)
(151,if (!iommu)
(152,pdev)
(153,domain)
(154,iommu = device_to_iommu(pci_domain_nr(pdev->bus)
(155,flags)
(156,spin_unlock_irqrestore(&iommu->lock, tmp_flags)
(157,number)
(158,1)
(159,tmp_flags)
(160,RET)
(161,iommu)
(162,info->dev->dev.archdata.iommu = NULL)
(163,info->segment)
(164,info->bus)
(165,pdev->bus)
(166,info)
(167,flags)
(168,domain)
(169,link)
(170,break;)
(171,&device_domain_lock)
(172,iommu_detach_dev(iommu, info->bus, info->devfn)
(173,seq_id)
(174,spin_unlock_irqrestore(&device_domain_lock, flags)
(175,free_devinfo_mem(info)
(176,info)
(177,)
(178,)
(179,iommu->domains)
(180,dev)
(181,pdev)
(182,iommu)
(183,NULL)
(184,iommu)
(185,&domain->iommu_lock)
(186,iommu_disable_dev_iotlb(info)
(187,devfn)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^