-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_04_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(STATIC_CONST_TRUE)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
53,54
53,55
54,55
54,56
55,56
58,59
60,61
61,62
63,64
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,16,19,24,26,27,30,33,39,41,43,48,49,52,56,57,59,62,67,68
-----computeFrom-----
12,13
12,14
46,47
46,48
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_04_bad(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_04_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_04_bad
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(30,17,0)
(11,36,0)
(8,27,0)
(28,18,0)
(24,17,0)
(4,13,0)
(22,18,0)
(20,31,0)
(20,6,0)
(6,18,0)
(19,6,0)
(5,0,0)
(9,35,0)
(31,35,0)
(23,31,0)
(13,32,0)
(0,33,0)
(3,17,0)
(16,20,0)
(25,20,0)
(1,32,0)
(20,25,0)
(6,20,0)
(26,36,0)
(2,22,0)
(32,31,0)
(36,8,0)
(13,10,0)
(34,13,0)
(14,18,0)
(35,31,0)
(32,13,0)
(31,17,0)
(7,8,0)
(15,8,0)
(31,35,1)
(26,12,1)
(20,31,1)
(21,31,1)
(28,14,1)
(1,4,1)
(19,18,1)
(34,21,1)
(0,5,1)
(5,6,1)
(32,1,1)
(12,13,1)
(6,20,1)
(2,0,1)
(32,31,1)
(18,28,1)
(16,19,1)
(4,34,1)
(20,25,1)
(20,16,1)
(36,11,1)
(12,21,1)
(9,23,1)
(35,9,1)
(14,36,1)
(19,22,1)
(11,26,1)
(6,18,1)
(29,6,1)
(22,2,1)
(13,32,1)
(29,12,1)
(22,18,1)
(22,18,2)
(32,31,2)
(19,12,2)
(22,6,2)
(20,12,2)
(6,18,2)
(6,12,2)
(13,21,2)
(18,12,2)
(20,6,2)
(28,12,2)
(2,6,2)
(6,6,2)
(5,6,2)
(4,21,2)
(1,21,2)
(31,35,2)
(14,12,2)
(0,6,2)
(20,31,2)
(26,12,2)
(16,6,2)
(32,21,2)
(6,20,2)
(11,12,2)
(13,32,2)
(16,12,2)
(20,25,2)
(36,12,2)
(19,6,2)
(34,21,2)
-----------------------------------
(0,printLine("Hello")
(1,count)
(2,i)
(3,if(STATIC_CONST_TRUE)
(4,"%d")
(5,"Hello")
(6,i < (size_t)
(7,i)
(8,)
(9,1)
(10,)
(11,0)
(12,STATIC_CONST_TRUE)
(13,fscanf(stdin, "%d", &count)
(14,i)
(15,for (i = 0; i < (size_t)
(16,count)
(17,)
(18,i = 0)
(19,i)
(20,(size_t)
(21,STATIC_CONST_TRUE)
(22,i++)
(23,count)
(24,if(STATIC_CONST_TRUE)
(25,size_t)
(26,i)
(27,)
(28,0)
(29,RET)
(30,count)
(31,count = -1)
(32,&count)
(33,)
(34,stdin)
(35,-1)
(36,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^