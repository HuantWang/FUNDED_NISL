-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_14_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
85,86
85,87
86,87
89,90
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,87,88,90
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_14_bad(){    twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_14_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_14_bad
{    twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(7,33,0)
(17,19,0)
(32,47,0)
(23,41,0)
(45,31,0)
(6,1,0)
(41,29,0)
(39,30,0)
(2,47,0)
(38,33,0)
(25,12,0)
(40,46,0)
(3,50,0)
(19,3,0)
(50,29,0)
(14,30,0)
(16,4,0)
(5,47,0)
(46,20,0)
(26,48,0)
(0,47,0)
(24,14,0)
(31,28,0)
(9,24,0)
(44,29,0)
(14,24,0)
(37,14,0)
(13,32,0)
(15,44,0)
(19,30,0)
(24,44,0)
(12,16,0)
(30,28,0)
(16,12,0)
(35,28,0)
(20,46,0)
(3,19,0)
(8,14,0)
(49,22,0)
(28,30,0)
(42,29,0)
(34,46,0)
(43,32,0)
(28,35,0)
(33,30,0)
(18,1,0)
(21,20,0)
(50,3,0)
(30,29,0)
(31,48,0)
(20,41,0)
(27,22,0)
(28,31,0)
(36,19,0)
(48,31,0)
(46,30,0)
(28,35,1)
(9,14,1)
(3,19,1)
(6,18,1)
(19,30,1)
(8,41,1)
(14,30,1)
(40,33,1)
(19,17,1)
(50,3,1)
(12,25,1)
(14,37,1)
(46,30,1)
(30,28,1)
(20,21,1)
(45,39,1)
(48,26,1)
(15,24,1)
(46,34,1)
(38,7,1)
(20,46,1)
(24,9,1)
(28,31,1)
(49,50,1)
(32,13,1)
(25,33,1)
(23,20,1)
(33,38,1)
(26,45,1)
(22,27,1)
(24,14,1)
(39,1,1)
(18,32,1)
(44,15,1)
(17,36,1)
(13,43,1)
(27,49,1)
(36,44,1)
(34,40,1)
(49,1,1)
(7,30,1)
(37,8,1)
(11,22,1)
(33,30,1)
(41,23,1)
(40,16,1)
(31,48,1)
(16,12,1)
(1,6,1)
(21,46,1)
(16,12,2)
(3,19,2)
(46,30,2)
(45,1,2)
(40,1,2)
(33,1,2)
(30,28,2)
(21,1,2)
(37,1,2)
(12,33,2)
(3,1,2)
(44,1,2)
(36,1,2)
(31,48,2)
(20,1,2)
(24,14,2)
(23,1,2)
(28,35,2)
(9,1,2)
(28,1,2)
(26,1,2)
(33,30,2)
(14,30,2)
(19,1,2)
(28,31,2)
(15,1,2)
(50,1,2)
(48,1,2)
(19,30,2)
(25,33,2)
(31,1,2)
(39,1,2)
(7,1,2)
(8,1,2)
(14,1,2)
(50,3,2)
(38,1,2)
(34,1,2)
(16,33,2)
(41,1,2)
(24,1,2)
(46,1,2)
(20,46,2)
(17,1,2)
(30,1,2)
-----------------------------------
(0,data)
(1,globalFive==5)
(2,if(globalFive==5)
(3,&data[0])
(4,)
(5,if(globalFive==5)
(6,5)
(7,data)
(8,data)
(9,intTwo)
(10, sizeof(twoIntsStruct)
(11,RET)
(12,-1)
(13,NULL)
(14,data[0])
(15,0)
(16,exit(-1)
(17,0)
(18,globalFive)
(19,data[0])
(20,data[0].intOne)
(21,intOne)
(22,globalFive==5)
(23,0)
(24,data[0].intTwo)
(25,1)
(26,twoIntsStruct)
(27,5)
(28,(twoIntsStruct *)
(29,)
(30,data = (twoIntsStruct *)
(31,calloc(100, sizeof(twoIntsStruct)
(32,data = NULL)
(33,data == NULL)
(34,0)
(35,twoIntsStruct *)
(36,data)
(37,0)
(38,NULL)
(39,data)
(40,data)
(41,data[0].intOne = 0)
(42,if (data == NULL)
(43,data)
(44,data[0].intTwo = 0)
(45,100)
(46,data[0])
(47,)
(48,sizeof(twoIntsStruct)
(49,globalFive)
(50,printStructLine(&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^