-----label-----
0
-----code-----
static void goodB2G2()
{
    twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,87,92,94
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(45,33,0)
(35,21,0)
(42,37,0)
(12,1,0)
(44,5,0)
(32,14,0)
(29,9,0)
(1,27,0)
(42,8,0)
(11,4,0)
(3,14,0)
(18,13,0)
(46,32,0)
(40,3,0)
(42,14,0)
(21,38,0)
(0,34,0)
(2,50,0)
(30,32,0)
(49,9,0)
(3,4,0)
(13,18,0)
(38,21,0)
(36,33,0)
(14,33,0)
(5,33,0)
(48,19,0)
(14,21,0)
(35,8,0)
(17,25,0)
(41,27,0)
(13,33,0)
(4,36,0)
(39,25,0)
(31,14,0)
(32,18,0)
(8,9,0)
(19,34,0)
(34,19,0)
(21,14,0)
(16,42,0)
(21,35,0)
(4,3,0)
(1,14,0)
(50,2,0)
(23,50,0)
(35,34,0)
(22,36,0)
(43,8,0)
(47,8,0)
(34,35,0)
(28,1,0)
(25,14,0)
(26,9,0)
(2,15,0)
(18,32,0)
(20,3,0)
(27,5,0)
(27,1,0)
(10,35,0)
(25,17,1)
(21,38,1)
(32,46,1)
(6,42,1)
(43,47,1)
(13,18,1)
(0,10,1)
(12,28,1)
(7,8,1)
(3,20,1)
(30,5,1)
(35,34,1)
(46,30,1)
(20,40,1)
(42,14,1)
(40,25,1)
(23,25,1)
(41,1,1)
(10,31,1)
(18,32,1)
(35,8,1)
(50,23,1)
(36,22,1)
(2,50,1)
(14,21,1)
(11,3,1)
(28,36,1)
(40,2,1)
(1,12,1)
(21,35,1)
(1,14,1)
(24,13,1)
(3,14,1)
(17,39,1)
(34,19,1)
(24,7,1)
(42,8,1)
(27,41,1)
(27,1,1)
(4,3,1)
(39,14,1)
(8,43,1)
(48,0,1)
(22,4,1)
(16,24,1)
(4,11,1)
(31,7,1)
(32,14,1)
(6,24,1)
(44,27,1)
(25,14,1)
(19,48,1)
(5,44,1)
(42,16,1)
(23,25,2)
(18,7,2)
(18,32,2)
(13,7,2)
(32,7,2)
(1,14,2)
(30,7,2)
(13,18,2)
(2,50,2)
(46,7,2)
(42,8,2)
(42,14,2)
(4,7,2)
(2,25,2)
(35,7,2)
(0,7,2)
(35,8,2)
(28,7,2)
(40,7,2)
(14,7,2)
(35,34,2)
(21,7,2)
(1,7,2)
(10,7,2)
(32,14,2)
(50,25,2)
(21,35,2)
(14,21,2)
(41,7,2)
(19,7,2)
(3,7,2)
(11,7,2)
(22,7,2)
(21,38,2)
(31,7,2)
(25,7,2)
(20,7,2)
(3,14,2)
(39,7,2)
(42,24,2)
(5,7,2)
(44,7,2)
(16,24,2)
(4,3,2)
(48,7,2)
(25,14,2)
(12,7,2)
(36,7,2)
(17,7,2)
(34,19,2)
(27,7,2)
(27,1,2)
(34,7,2)
-----------------------------------
(0,100)
(1,data[0])
(2,exit(-1)
(3,data[0])
(4,data[0].intOne)
(5,data[0].intTwo = 0)
(6,RET)
(7,STATIC_CONST_TRUE)
(8,data = NULL)
(9,)
(10,data)
(11,intOne)
(12,0)
(13,printStructLine(&data[0])
(14,data = (twoIntsStruct *)
(15,)
(16,data)
(17,NULL)
(18,&data[0])
(19,sizeof(twoIntsStruct)
(20,0)
(21,(twoIntsStruct *)
(22,0)
(23,1)
(24,STATIC_CONST_TRUE)
(25,data == NULL)
(26,if(STATIC_CONST_TRUE)
(27,data[0].intTwo)
(28,data)
(29,if(STATIC_CONST_TRUE)
(30,data)
(31,data)
(32,data[0])
(33,)
(34,100*sizeof(twoIntsStruct)
(35,realloc(data, 100*sizeof(twoIntsStruct)
(36,data[0].intOne = 0)
(37,)
(38,twoIntsStruct *)
(39,data)
(40,data)
(41,intTwo)
(42,free(data)
(43,NULL)
(44,0)
(45,if (data == NULL)
(46,0)
(47,data)
(48,twoIntsStruct)
(49,data)
(50,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^