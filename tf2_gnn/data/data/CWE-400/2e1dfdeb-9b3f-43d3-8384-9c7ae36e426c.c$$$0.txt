-----label-----
0
-----code-----
static void goodG2B2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
47,49
48,49
48,50
49,50
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
78,79
78,80
79,80
79,81
80,81
83,84
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,50,51,52,53,59,60,61,62,66,70,72,76,77,81,82,84
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
55,56
55,57
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(15,40,0)
(42,27,0)
(5,8,0)
(38,44,0)
(35,38,0)
(42,38,0)
(15,25,0)
(20,44,0)
(44,25,0)
(27,7,0)
(30,20,0)
(12,31,0)
(2,20,0)
(39,41,0)
(4,36,0)
(16,36,0)
(34,37,0)
(41,40,0)
(20,30,0)
(3,9,0)
(10,19,0)
(33,44,0)
(25,15,0)
(0,37,0)
(14,9,0)
(43,25,0)
(6,4,0)
(12,7,0)
(31,24,0)
(25,43,0)
(23,34,0)
(40,15,0)
(8,44,0)
(1,27,0)
(13,40,0)
(4,8,0)
(29,42,0)
(31,12,0)
(25,44,0)
(32,37,0)
(40,41,0)
(17,8,0)
(28,19,0)
(41,39,0)
(44,7,0)
(8,4,0)
(22,20,0)
(24,31,0)
(38,42,0)
(31,30,0)
(11,34,0)
(21,38,0)
(36,7,0)
(30,31,0)
(18,37,0)
(1,42,1)
(4,8,1)
(42,29,1)
(26,9,1)
(16,4,1)
(44,25,1)
(19,28,1)
(23,11,1)
(4,6,1)
(13,33,1)
(31,24,1)
(25,15,1)
(22,2,1)
(40,41,1)
(3,14,1)
(14,12,1)
(41,39,1)
(25,43,1)
(33,19,1)
(17,5,1)
(2,27,1)
(14,19,1)
(27,1,1)
(15,40,1)
(28,10,1)
(41,13,1)
(34,23,1)
(38,21,1)
(8,17,1)
(5,44,1)
(30,20,1)
(20,22,1)
(12,31,1)
(10,34,1)
(6,8,1)
(21,35,1)
(9,3,1)
(29,38,1)
(36,16,1)
(42,38,1)
(35,36,1)
(38,44,1)
(20,44,1)
(8,44,1)
(31,30,1)
(15,40,2)
(44,19,2)
(44,25,2)
(42,38,2)
(6,19,2)
(41,39,2)
(33,19,2)
(25,43,2)
(8,19,2)
(42,19,2)
(5,19,2)
(4,8,2)
(2,19,2)
(35,19,2)
(17,19,2)
(40,41,2)
(31,24,2)
(27,19,2)
(36,19,2)
(38,44,2)
(20,44,2)
(25,19,2)
(30,19,2)
(1,19,2)
(29,19,2)
(16,19,2)
(4,19,2)
(30,20,2)
(31,30,2)
(22,19,2)
(31,19,2)
(25,15,2)
(40,19,2)
(21,19,2)
(13,19,2)
(20,19,2)
(41,19,2)
(12,31,2)
(15,19,2)
(8,44,2)
(38,19,2)
(12,19,2)
-----------------------------------
(0,if(GLOBAL_CONST_FIVE==5)
(1,0)
(2,data)
(3,5)
(4,data[0].intOne)
(5,data)
(6,intOne)
(7,)
(8,data[0])
(9,GLOBAL_CONST_FIVE==5)
(10,GLOBAL_CONST_FIVE)
(11,data)
(12,printStructLine((twoIntsStruct *)
(13,100)
(14,GLOBAL_CONST_FIVE)
(15,ALLOCA(100*sizeof(struct _twoIntsStruct)
(16,0)
(17,0)
(18,if(GLOBAL_CONST_FIVE==5)
(19,GLOBAL_CONST_FIVE==5)
(20,data[0])
(21,0)
(22,0)
(23,NULL)
(24,twoIntsStruct *)
(25,(struct _twoIntsStruct *)
(26,RET)
(27,data[0].intTwo = 0)
(28,5)
(29,intTwo)
(30,&data[0])
(31,(twoIntsStruct *)
(32,data)
(33,data)
(34,data = NULL)
(35,data)
(36,data[0].intOne = 0)
(37,)
(38,data[0])
(39,struct _twoIntsStruct)
(40,100*sizeof(struct _twoIntsStruct)
(41,sizeof(struct _twoIntsStruct)
(42,data[0].intTwo)
(43,struct _twoIntsStruct *)
(44,data = (struct _twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^