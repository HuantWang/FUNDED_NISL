-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_15_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
91,92
92,93
92,94
93,94
97,98
97,99
99,100
99,101
99,102
99,103
99,104
99,105
100,101
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,89,90,94,95,96,98,101,102,103,104,108,109,110
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_15_bad(){    struct _twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_15_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_15_bad
{    struct _twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(27,44,0)
(37,30,0)
(14,10,0)
(32,44,0)
(48,43,0)
(12,42,0)
(55,51,0)
(20,48,0)
(50,29,0)
(3,44,0)
(31,44,0)
(40,30,0)
(4,51,0)
(13,20,0)
(1,50,0)
(21,10,0)
(24,44,0)
(43,44,0)
(19,32,0)
(17,57,0)
(34,37,0)
(43,6,0)
(6,53,0)
(13,45,0)
(56,3,0)
(18,43,0)
(10,43,0)
(48,20,0)
(10,21,0)
(8,44,0)
(42,12,0)
(59,50,0)
(9,44,0)
(41,42,0)
(11,29,0)
(8,13,0)
(0,44,0)
(57,43,0)
(58,57,0)
(30,31,0)
(28,31,0)
(20,13,0)
(2,51,0)
(37,43,0)
(16,51,0)
(22,10,0)
(21,32,0)
(54,29,0)
(36,38,0)
(45,13,0)
(30,37,0)
(61,48,0)
(5,37,0)
(25,38,0)
(60,48,0)
(49,16,0)
(12,7,0)
(15,44,0)
(35,51,0)
(25,39,0)
(26,29,0)
(39,25,0)
(13,8,0)
(53,6,0)
(38,6,0)
(6,43,0)
(38,25,0)
(6,38,0)
(23,21,0)
(40,37,1)
(6,38,1)
(57,43,1)
(28,30,1)
(0,8,1)
(42,41,1)
(25,39,1)
(19,21,1)
(32,19,1)
(4,16,1)
(18,46,1)
(46,50,1)
(57,58,1)
(47,0,1)
(41,57,1)
(22,57,1)
(33,2,1)
(49,47,1)
(58,17,1)
(10,43,1)
(17,43,1)
(37,43,1)
(59,1,1)
(15,3,1)
(22,12,1)
(60,61,1)
(5,32,1)
(3,56,1)
(25,36,1)
(33,4,1)
(56,46,1)
(21,23,1)
(47,15,1)
(61,31,1)
(48,43,1)
(37,34,1)
(10,14,1)
(34,5,1)
(2,47,1)
(21,10,1)
(8,13,1)
(20,48,1)
(13,45,1)
(36,18,1)
(48,60,1)
(13,20,1)
(23,10,1)
(38,25,1)
(43,6,1)
(30,40,1)
(12,42,1)
(16,49,1)
(14,22,1)
(50,59,1)
(30,37,1)
(31,28,1)
(6,53,1)
(32,46,2)
(12,57,2)
(38,46,2)
(28,46,2)
(43,6,2)
(48,46,2)
(25,39,2)
(6,38,2)
(37,46,2)
(41,57,2)
(43,46,2)
(6,53,2)
(60,46,2)
(21,10,2)
(25,46,2)
(38,25,2)
(5,46,2)
(14,46,2)
(3,46,2)
(8,13,2)
(20,46,2)
(31,46,2)
(13,45,2)
(30,46,2)
(19,46,2)
(58,46,2)
(18,46,2)
(61,46,2)
(30,37,2)
(37,43,2)
(21,46,2)
(42,57,2)
(6,46,2)
(15,46,2)
(10,46,2)
(20,48,2)
(22,46,2)
(36,46,2)
(57,46,2)
(48,43,2)
(49,47,2)
(4,47,2)
(8,46,2)
(16,47,2)
(13,20,2)
(13,46,2)
(57,43,2)
(40,46,2)
(0,46,2)
(56,46,2)
(10,43,2)
(12,42,2)
(2,47,2)
(17,46,2)
(34,46,2)
(23,46,2)
-----------------------------------
(0,break;)
(1,data)
(2,break;)
(3,printLine("Benign, fixed string")
(4,break;)
(5,data)
(6,(struct _twoIntsStruct *)
(7,)
(8,printStructLine((twoIntsStruct *)
(9,default:)
(10,data[0])
(11,data)
(12,exit(-1)
(13,(twoIntsStruct *)
(14,0)
(15,break;)
(16,printLine("Benign, fixed string")
(17,data)
(18,data)
(19,0)
(20,&data[0])
(21,data[0].intOne)
(22,data)
(23,intOne)
(24,case 6:)
(25,sizeof(struct _twoIntsStruct)
(26,switch(7)
(27,if (data == NULL)
(28,0)
(29,)
(30,data[0].intTwo)
(31,data[0].intTwo = 0)
(32,data[0].intOne = 0)
(33,RET)
(34,0)
(35,case 7:)
(36,100)
(37,data[0])
(38,calloc(100, sizeof(struct _twoIntsStruct)
(39,struct _twoIntsStruct)
(40,intTwo)
(41,1)
(42,-1)
(43,data = (struct _twoIntsStruct *)
(44,)
(45,twoIntsStruct *)
(46,6)
(47,7)
(48,data[0])
(49,"Benign, fixed string")
(50,data = NULL)
(51,)
(52, sizeof(struct _twoIntsStruct)
(53,struct _twoIntsStruct *)
(54,switch(6)
(55,default:)
(56,"Benign, fixed string")
(57,data == NULL)
(58,NULL)
(59,NULL)
(60,0)
(61,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^