-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_12_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
    else
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
44,45
45,46
45,47
47,48
47,49
50,51
50,52
50,53
51,52
51,53
52,53
54,55
54,56
55,56
57,58
59,60
59,61
59,62
59,63
59,64
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
93,96
94,95
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
112,113
113,114
114,115
114,116
115,116
118,119
119,120
119,121
120,121
121,122
121,123
123,124
123,125
126,127
126,128
126,129
127,128
127,129
128,129
128,130
129,130
131,132
131,133
132,133
134,135
136,137
136,138
137,138
140,141
140,142
140,143
140,144
140,145
141,142
142,143
142,144
143,144
145,146
145,147
146,147
146,148
148,149
150,151
150,152
151,152
153,154
153,155
154,155
156,157
157,158
157,159
160,161
160,162
161,162
161,163
162,163
164,165
166,167
167,168
168,169
168,170
169,170
171,172
173,174
174,175
174,176
174,177
175,176
177,178
179,180
181,182
182,183
182,184
183,184
185,186
187,188
188,189
188,190
189,190
191,192
193,194
194,195
195,196
195,197
196,197
-----nextToken-----
2,4,9,11,15,16,20,25,27,28,31,36,37,41,46,48,49,53,56,58,63,66,68,71,74,77,78,82,84,89,91,95,97,99,103,105,109,111,116,117,122,124,125,130,133,135,138,139,144,147,149,152,155,158,159,163,165,170,172,176,178,180,184,186,190,192,197,198
-----computeFrom-----
13,14
13,15
34,35
34,36
51,52
51,53
61,62
61,63
72,73
72,74
80,81
80,82
127,128
127,129
128,129
128,130
136,137
136,138
142,143
142,144
153,154
153,155
161,162
161,163
-----guardedBy-----
58,99
53,74
135,180
138,155
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_12_bad(){    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrueOrFalse())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_12_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_12_bad
{    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrueOrFalse())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(globalReturnsTrueOrFalse())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(30,7,0)
(46,8,0)
(22,88,0)
(63,66,0)
(62,46,0)
(0,17,0)
(30,67,0)
(4,70,0)
(18,59,0)
(74,20,0)
(25,57,0)
(77,83,0)
(46,70,0)
(29,18,0)
(20,56,0)
(82,67,0)
(45,10,0)
(60,94,0)
(13,14,0)
(91,15,0)
(21,1,0)
(56,17,0)
(52,34,0)
(72,59,0)
(28,21,0)
(92,67,0)
(37,51,0)
(11,40,0)
(38,12,0)
(60,64,0)
(16,81,0)
(20,70,0)
(12,44,0)
(15,65,0)
(60,70,0)
(63,13,0)
(69,7,0)
(34,52,0)
(60,67,0)
(41,43,0)
(90,51,0)
(50,30,0)
(44,70,0)
(27,54,0)
(13,63,0)
(64,60,0)
(46,67,0)
(79,64,0)
(93,68,0)
(20,67,0)
(63,62,0)
(5,16,0)
(51,18,0)
(52,18,0)
(20,10,0)
(94,52,0)
(44,67,0)
(17,67,0)
(2,54,0)
(88,22,0)
(19,41,0)
(2,53,0)
(89,68,0)
(58,83,0)
(87,18,0)
(86,59,0)
(42,47,0)
(7,49,0)
(83,13,0)
(17,56,0)
(6,44,0)
(3,70,0)
(47,13,0)
(66,63,0)
(55,72,0)
(57,14,0)
(68,13,0)
(83,14,0)
(85,40,0)
(67,40,0)
(94,60,0)
(47,14,0)
(46,62,0)
(33,7,0)
(44,12,0)
(7,30,0)
(23,22,0)
(18,52,0)
(35,16,0)
(95,8,0)
(52,94,0)
(87,59,0)
(70,31,0)
(57,13,0)
(39,21,0)
(73,59,0)
(9,40,0)
(24,86,0)
(75,46,0)
(32,60,0)
(48,14,0)
(62,63,0)
(26,87,0)
(88,78,0)
(84,13,0)
(17,70,0)
(36,17,0)
(61,87,0)
(72,18,0)
(54,2,0)
(10,20,0)
(8,46,0)
(56,20,0)
(86,18,0)
(24,72,1)
(80,57,1)
(44,70,1)
(76,70,1)
(52,34,1)
(93,13,1)
(25,47,1)
(17,70,1)
(51,90,1)
(18,52,1)
(26,61,1)
(83,13,1)
(80,41,1)
(52,94,1)
(44,12,1)
(92,82,1)
(57,25,1)
(72,55,1)
(37,18,1)
(84,56,1)
(7,30,1)
(94,60,1)
(61,51,1)
(68,13,1)
(77,58,1)
(76,7,1)
(56,20,1)
(45,74,1)
(64,79,1)
(13,63,1)
(80,86,1)
(74,76,1)
(68,89,1)
(10,45,1)
(72,18,1)
(60,64,1)
(3,4,1)
(41,19,1)
(58,2,1)
(44,67,1)
(75,84,1)
(54,27,1)
(47,13,1)
(36,20,1)
(56,17,1)
(46,70,1)
(71,67,1)
(30,67,1)
(89,93,1)
(70,3,1)
(61,88,1)
(46,8,1)
(51,18,1)
(42,83,1)
(83,77,1)
(32,29,1)
(91,56,1)
(62,46,1)
(23,51,1)
(27,68,1)
(12,38,1)
(2,54,1)
(20,70,1)
(50,69,1)
(46,67,1)
(67,92,1)
(22,23,1)
(88,22,1)
(63,66,1)
(29,44,1)
(20,67,1)
(60,67,1)
(87,18,1)
(79,32,1)
(86,24,1)
(33,71,1)
(17,67,1)
(57,13,1)
(90,37,1)
(55,87,1)
(30,50,1)
(63,62,1)
(47,42,1)
(95,75,1)
(80,15,1)
(20,10,1)
(15,91,1)
(8,95,1)
(87,26,1)
(4,71,1)
(19,44,1)
(17,0,1)
(38,6,1)
(69,33,1)
(60,70,1)
(58,68,1)
(6,76,1)
(0,36,1)
(86,18,1)
(42,56,2)
(94,60,2)
(52,34,2)
(30,67,2)
(30,71,2)
(87,44,2)
(83,13,2)
(44,12,2)
(54,68,2)
(37,44,2)
(84,56,2)
(60,64,2)
(3,71,2)
(52,44,2)
(47,13,2)
(4,71,2)
(24,44,2)
(18,52,2)
(63,56,2)
(72,18,2)
(51,44,2)
(56,20,2)
(22,51,2)
(25,56,2)
(88,22,2)
(17,70,2)
(2,68,2)
(46,67,2)
(83,56,2)
(46,8,2)
(94,44,2)
(26,44,2)
(69,71,2)
(88,51,2)
(36,20,2)
(33,71,2)
(46,70,2)
(61,44,2)
(77,56,2)
(58,56,2)
(72,44,2)
(6,76,2)
(95,56,2)
(64,44,2)
(15,56,2)
(60,44,2)
(18,44,2)
(20,10,2)
(75,56,2)
(10,76,2)
(52,94,2)
(17,20,2)
(38,76,2)
(17,67,2)
(91,56,2)
(86,18,2)
(0,20,2)
(44,67,2)
(93,56,2)
(32,44,2)
(68,56,2)
(87,18,2)
(23,51,2)
(55,44,2)
(44,70,2)
(20,67,2)
(41,44,2)
(20,70,2)
(60,70,2)
(57,56,2)
(8,56,2)
(62,56,2)
(74,76,2)
(13,63,2)
(60,67,2)
(62,46,2)
(57,13,2)
(63,66,2)
(13,56,2)
(56,76,2)
(45,76,2)
(29,44,2)
(50,71,2)
(7,30,2)
(2,54,2)
(90,44,2)
(20,76,2)
(79,44,2)
(27,68,2)
(63,62,2)
(46,56,2)
(70,71,2)
(86,44,2)
(56,17,2)
(47,56,2)
(44,76,2)
(7,71,2)
(89,56,2)
(12,76,2)
(51,18,2)
(68,13,2)
(19,44,2)
-----------------------------------
(0,100)
(1,)
(2,exit(-1)
(3,20)
(4,data)
(5,myString)
(6,data)
(7,fscanf(stdin, "%zu", &data)
(8,sizeof(wchar_t)
(9,if(globalReturnsTrueOrFalse()
(10,wcslen(HELLO_STRING)
(11,data)
(12,wcslen(HELLO_STRING)
(13,myString = (wchar_t *)
(14,)
(15,printLine("Input is less than the length of the source string or too large")
(16,)
(17,data < 100)
(18,myString = (wchar_t *)
(19,"Input is less than the length of the source string")
(20,data > wcslen(HELLO_STRING)
(21,)
(22,-1)
(23,1)
(24,myString)
(25,myString)
(26,HELLO_STRING)
(27,1)
(28,myString)
(29,myString)
(30,&data)
(31,)
(32,data)
(33,stdin)
(34,wchar_t *)
(35,if (data > wcslen(HELLO_STRING)
(36,data)
(37,myString)
(38,HELLO_STRING)
(39,if (data > wcslen(HELLO_STRING)
(40,)
(41,printLine("Input is less than the length of the source string")
(42,myString)
(43,)
(44,data > wcslen(HELLO_STRING)
(45,HELLO_STRING)
(46,data*sizeof(wchar_t)
(47,printWLine(myString)
(48,if (myString == NULL)
(49,)
(50,data)
(51,myString == NULL)
(52,(wchar_t *)
(53,)
(54,-1)
(55,myString)
(56,data > wcslen(HELLO_STRING)
(57,free(myString)
(58,myString)
(59,)
(60,data*sizeof(wchar_t)
(61,myString)
(62,malloc(data*sizeof(wchar_t)
(63,(wchar_t *)
(64,sizeof(wchar_t)
(65,)
(66,wchar_t *)
(67,data = 0)
(68,myString == NULL)
(69,"%zu")
(70,data = 20)
(71,globalReturnsTrueOrFalse()
(72,printWLine(myString)
(73,if (myString == NULL)
(74,data)
(75,data)
(76,globalReturnsTrueOrFalse()
(77,HELLO_STRING)
(78,)
(79,wchar_t)
(80,RET)
(81,)
(82,data)
(83,wcscpy(myString, HELLO_STRING)
(84,myString)
(85,if(globalReturnsTrueOrFalse()
(86,free(myString)
(87,wcscpy(myString, HELLO_STRING)
(88,exit(-1)
(89,NULL)
(90,NULL)
(91,"Input is less than the length of the source string or too large")
(92,0)
(93,myString)
(94,malloc(data*sizeof(wchar_t)
(95,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^