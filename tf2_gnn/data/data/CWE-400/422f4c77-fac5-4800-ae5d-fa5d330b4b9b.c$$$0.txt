-----label-----
1
-----code-----
int pseudo_exec_file(struct pseudo_dev *dev, int *child)
{
	int res, pipefd[2];

	res = pipe(pipefd);
	if(res == -1) {
		ERROR("Executing dynamic pseudo file, pipe failed\n");
		return 0;
	}

	*child = fork();
	if(*child == -1) {
		ERROR("Executing dynamic pseudo file, fork failed\n");
		goto failed;
	}

	if(*child == 0) {
		close(pipefd[0]);
		close(STDOUT_FILENO);
		res = dup(pipefd[1]);
		if(res == -1)
			exit(EXIT_FAILURE);

		execl("/bin/sh", "sh", "-c", dev->command, (char *) NULL);
		exit(EXIT_FAILURE);
	}

	close(pipefd[1]);
	return pipefd[0];

failed:
	close(pipefd[0]);
	close(pipefd[1]);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
17,18
18,19
18,20
18,21
20,21
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
30,32
31,32
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
43,44
43,45
44,45
47,48
49,50
50,51
50,52
51,52
52,53
54,55
55,56
57,58
57,59
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
67,68
70,71
72,73
72,74
73,74
73,75
74,75
75,76
78,79
78,80
78,81
78,82
78,83
78,84
79,80
80,81
80,82
81,82
83,84
83,85
84,85
87,88
88,89
88,90
89,90
91,92
92,93
94,95
95,96
95,97
96,97
98,99
98,100
99,100
101,102
101,103
102,103
105,106
105,107
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
116,117
118,119
119,120
119,121
119,122
119,123
119,124
119,125
120,121
125,126
125,127
126,127
129,130
129,131
130,131
130,132
132,133
134,135
136,137
137,138
137,139
138,139
140,141
141,142
143,144
144,145
144,146
145,146
147,148
147,149
148,149
151,152
152,153
152,154
153,154
156,157
156,158
158,159
159,160
159,161
160,161
162,163
162,164
163,164
166,167
167,168
167,169
168,169
170,171
170,172
171,172
174,175
-----nextToken-----
2,4,7,9,10,12,14,15,19,21,23,25,29,32,34,38,40,45,46,48,53,56,61,63,68,69,71,76,77,82,85,86,90,93,97,100,103,104,108,110,114,117,121,122,123,124,127,128,131,133,135,139,142,146,149,150,154,155,157,161,164,165,169,172,173,175
-----computeFrom-----
27,28
27,29
36,37
36,38
50,51
50,52
58,59
58,60
73,74
73,75
95,96
95,97
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int pseudo_exec_file(struct pseudo_dev *dev, int *child){	int res, pipefd[2];	res = pipe(pipefd);	if(res == -1) {		ERROR("Executing dynamic pseudo file, pipe failed\n");		return 0;	}	*child = fork();	if(*child == -1) {		ERROR("Executing dynamic pseudo file, fork failed\n");		goto failed;	}	if(*child == 0) {		close(pipefd[0]);		close(STDOUT_FILENO);		res = dup(pipefd[1]);		if(res == -1)			exit(EXIT_FAILURE);		execl("/bin/sh", "sh", "-c", dev->command, (char *) NULL);		exit(EXIT_FAILURE);	}	close(pipefd[1]);	return pipefd[0];failed:	close(pipefd[0]);	close(pipefd[1]);	return 0;}
int
pseudo_exec_file(struct pseudo_dev *dev, int *child)
pseudo_exec_file
struct pseudo_dev *dev
struct pseudo_dev
pseudo_dev
*dev
*
dev
int *child
int
*child
*
child
{	int res, pipefd[2];	res = pipe(pipefd);	if(res == -1) {		ERROR("Executing dynamic pseudo file, pipe failed\n");		return 0;	}	*child = fork();	if(*child == -1) {		ERROR("Executing dynamic pseudo file, fork failed\n");		goto failed;	}	if(*child == 0) {		close(pipefd[0]);		close(STDOUT_FILENO);		res = dup(pipefd[1]);		if(res == -1)			exit(EXIT_FAILURE);		execl("/bin/sh", "sh", "-c", dev->command, (char *) NULL);		exit(EXIT_FAILURE);	}	close(pipefd[1]);	return pipefd[0];failed:	close(pipefd[0]);	close(pipefd[1]);	return 0;}
int res, pipefd[2];
int res, pipefd[2];
int
res
res
pipefd[2]
pipefd
[2]
2
res = pipe(pipefd);
res = pipe(pipefd)
res
res
pipe(pipefd)
pipe
pipe
pipefd
pipefd
if(res == -1) {		ERROR("Executing dynamic pseudo file, pipe failed\n");		return 0;	}
res == -1
res
res
-1
1
{		ERROR("Executing dynamic pseudo file, pipe failed\n");		return 0;	}
ERROR("Executing dynamic pseudo file, pipe failed\n");
ERROR("Executing dynamic pseudo file, pipe failed\n")
ERROR
ERROR
"Executing dynamic pseudo file, pipe failed\n"
return 0;
0
*child = fork();
*child = fork()
*child
child
child
fork()
fork
fork
if(*child == -1) {		ERROR("Executing dynamic pseudo file, fork failed\n");		goto failed;	}
*child == -1
*child
child
child
-1
1
{		ERROR("Executing dynamic pseudo file, fork failed\n");		goto failed;	}
ERROR("Executing dynamic pseudo file, fork failed\n");
ERROR("Executing dynamic pseudo file, fork failed\n")
ERROR
ERROR
"Executing dynamic pseudo file, fork failed\n"
goto failed;
failed
if(*child == 0) {		close(pipefd[0]);		close(STDOUT_FILENO);		res = dup(pipefd[1]);		if(res == -1)			exit(EXIT_FAILURE);		execl("/bin/sh", "sh", "-c", dev->command, (char *) NULL);		exit(EXIT_FAILURE);	}
*child == 0
*child
child
child
0
{		close(pipefd[0]);		close(STDOUT_FILENO);		res = dup(pipefd[1]);		if(res == -1)			exit(EXIT_FAILURE);		execl("/bin/sh", "sh", "-c", dev->command, (char *) NULL);		exit(EXIT_FAILURE);	}
close(pipefd[0]);
close(pipefd[0])
close
close
pipefd[0]
pipefd
pipefd
0
close(STDOUT_FILENO);
close(STDOUT_FILENO);
close
close
(STDOUT_FILENO)
STDOUT_FILENO
STDOUT_FILENO
res = dup(pipefd[1]);
res = dup(pipefd[1])
res
res
dup(pipefd[1])
dup
dup
pipefd[1]
pipefd
pipefd
1
if(res == -1)			exit(EXIT_FAILURE);
res == -1
res
res
-1
1
exit(EXIT_FAILURE);
exit(EXIT_FAILURE);
exit
exit
(EXIT_FAILURE)
EXIT_FAILURE
EXIT_FAILURE
execl("/bin/sh", "sh", "-c", dev->command, (char *) NULL);
execl("/bin/sh", "sh", "-c", dev->command, (char *) NULL)
execl
execl
"/bin/sh"
"sh"
"-c"
dev->command
dev
dev
command
(char *) NULL
char *
char
*
*
NULL
NULL
exit(EXIT_FAILURE);
exit(EXIT_FAILURE);
exit
exit
(EXIT_FAILURE)
EXIT_FAILURE
EXIT_FAILURE
close(pipefd[1]);
close(pipefd[1])
close
close
pipefd[1]
pipefd
pipefd
1
return pipefd[0];
pipefd[0]
pipefd
pipefd
0
failed:	close(pipefd[0]);
failed
close(pipefd[0]);
close(pipefd[0])
close
close
pipefd[0]
pipefd
pipefd
0
close(pipefd[1]);
close(pipefd[1])
close
close
pipefd[1]
pipefd
pipefd
1
return 0;
0
-----joern-----
(19,10,0)
(3,8,0)
(69,9,0)
(81,87,0)
(1,3,0)
(70,12,0)
(85,79,0)
(77,22,0)
(37,60,0)
(38,53,0)
(45,15,0)
(46,79,0)
(11,13,0)
(47,44,0)
(44,53,0)
(84,79,0)
(50,13,0)
(35,34,0)
(83,41,0)
(52,79,0)
(45,56,0)
(67,11,0)
(87,41,0)
(60,1,0)
(68,34,0)
(40,55,0)
(65,20,0)
(66,64,0)
(15,45,0)
(71,70,0)
(64,10,0)
(34,68,0)
(82,79,0)
(70,72,0)
(12,79,0)
(0,79,0)
(25,27,0)
(61,45,0)
(78,11,0)
(23,54,0)
(3,12,0)
(39,79,0)
(67,18,0)
(32,50,0)
(7,20,0)
(26,34,0)
(22,77,0)
(1,79,0)
(54,73,0)
(86,14,0)
(84,29,0)
(21,15,0)
(30,15,0)
(73,14,0)
(74,79,0)
(24,12,0)
(49,15,0)
(29,84,0)
(31,25,0)
(68,79,0)
(64,66,0)
(36,38,0)
(54,41,0)
(58,10,0)
(42,27,0)
(6,18,0)
(73,54,0)
(27,25,0)
(57,46,0)
(18,79,0)
(14,73,0)
(33,64,0)
(2,57,0)
(17,14,0)
(77,15,0)
(62,77,0)
(4,20,0)
(55,41,0)
(16,29,0)
(5,72,0)
(7,41,0)
(88,75,0)
(15,41,0)
(25,54,0)
(12,24,0)
(72,70,0)
(28,57,0)
(18,3,0)
(70,8,0)
(59,66,0)
(43,80,0)
(46,57,0)
(63,19,0)
(20,7,0)
(38,8,0)
(75,80,0)
(67,1,0)
(89,45,0)
(10,79,0)
(15,77,0)
(48,29,0)
(53,38,0)
(76,3,0)
(53,44,0)
(38,12,0)
(51,60,0)
(10,19,0)
(57,28,1)
(38,12,1)
(42,31,1)
(77,62,1)
(19,63,1)
(11,78,1)
(10,19,1)
(2,68,1)
(49,9,1)
(18,3,1)
(89,61,1)
(75,88,1)
(16,72,1)
(81,7,1)
(59,33,1)
(60,37,1)
(25,27,1)
(30,21,1)
(65,72,1)
(67,1,1)
(48,16,1)
(45,89,1)
(28,2,1)
(70,71,1)
(25,54,1)
(84,29,1)
(76,64,1)
(78,50,1)
(38,36,1)
(46,57,1)
(31,54,1)
(67,18,1)
(3,76,1)
(72,5,1)
(27,42,1)
(15,77,1)
(37,51,1)
(64,10,1)
(61,30,1)
(26,35,1)
(44,47,1)
(77,22,1)
(24,3,1)
(66,59,1)
(62,45,1)
(47,38,1)
(88,53,1)
(64,66,1)
(86,17,1)
(49,25,1)
(12,24,1)
(73,14,1)
(54,73,1)
(43,75,1)
(71,53,1)
(17,23,1)
(70,8,1)
(5,70,1)
(38,8,1)
(33,10,1)
(72,70,1)
(16,55,1)
(34,26,1)
(50,32,1)
(3,8,1)
(40,15,1)
(1,3,1)
(35,43,1)
(21,49,1)
(4,65,1)
(53,38,1)
(53,44,1)
(6,46,1)
(70,12,1)
(87,81,1)
(36,12,1)
(55,40,1)
(67,11,1)
(7,20,1)
(1,60,1)
(69,25,1)
(45,56,1)
(32,64,1)
(9,69,1)
(23,87,1)
(14,86,1)
(63,58,1)
(51,84,1)
(15,45,1)
(29,48,1)
(18,6,1)
(20,4,1)
(68,34,1)
(44,64,2)
(70,53,2)
(60,53,2)
(68,53,2)
(25,72,2)
(47,64,2)
(54,73,2)
(71,53,2)
(73,14,2)
(42,72,2)
(62,72,2)
(64,66,2)
(45,56,2)
(16,53,2)
(15,72,2)
(65,72,2)
(36,64,2)
(57,53,2)
(77,22,2)
(69,25,2)
(89,72,2)
(72,53,2)
(84,29,2)
(9,25,2)
(12,64,2)
(64,10,2)
(87,72,2)
(27,72,2)
(3,64,2)
(38,8,2)
(67,1,2)
(81,72,2)
(10,19,2)
(34,53,2)
(86,72,2)
(32,64,2)
(46,57,2)
(48,53,2)
(73,72,2)
(78,64,2)
(25,27,2)
(15,45,2)
(76,64,2)
(4,72,2)
(49,72,2)
(17,72,2)
(37,53,2)
(70,8,2)
(50,64,2)
(29,53,2)
(53,44,2)
(46,53,2)
(68,34,2)
(70,12,2)
(7,20,2)
(88,53,2)
(2,53,2)
(7,72,2)
(21,72,2)
(61,72,2)
(53,64,2)
(15,77,2)
(67,18,2)
(75,53,2)
(35,53,2)
(1,53,2)
(18,3,2)
(23,72,2)
(72,70,2)
(24,64,2)
(18,53,2)
(84,53,2)
(55,72,2)
(51,53,2)
(28,53,2)
(38,12,2)
(20,72,2)
(67,11,2)
(26,53,2)
(5,53,2)
(1,3,2)
(3,8,2)
(25,54,2)
(11,64,2)
(43,53,2)
(30,72,2)
(45,72,2)
(53,38,2)
(31,72,2)
(40,72,2)
(54,72,2)
(6,53,2)
(12,24,2)
(38,64,2)
(14,72,2)
(77,72,2)
-----------------------------------
(0,if(*child == -1)
(1,return pipefd[0];)
(2,pipefd)
(3,*child)
(4,0)
(5,0)
(6,0)
(7,close(pipefd[0])
(8,int *child)
(9,exit(EXIT_FAILURE)
(10,res = pipe(pipefd)
(11,return 0;)
(12,*child = fork()
(13,)
(14,pipefd[1])
(15,execl("/bin/sh", "sh", "-c", dev->command, (char *)
(16,pipefd)
(17,pipefd)
(18,return 0;)
(19,pipe(pipefd)
(20,pipefd[0])
(21,"sh")
(22,char *)
(23,res)
(24,fork()
(25,res == -1)
(26,0)
(27,-1)
(28,1)
(29,pipefd[1])
(30,"-c")
(31,res)
(32,"Executing dynamic pseudo file, pipe failed\\n")
(33,res)
(34,pipefd[0])
(35,pipefd)
(36,child)
(37,0)
(38,*child)
(39,if(res == -1)
(40,EXIT_FAILURE)
(41,)
(42,1)
(43,goto failed;)
(44,-1)
(45,dev->command)
(46,close(pipefd[1])
(47,1)
(48,1)
(49,"/bin/sh")
(50,ERROR("Executing dynamic pseudo file, pipe failed\\n")
(51,pipefd)
(52,if(*child == 0)
(53,*child == -1)
(54,res = dup(pipefd[1])
(55,exit(EXIT_FAILURE)
(56,struct pseudo_dev *dev)
(57,pipefd[1])
(58,res)
(59,1)
(60,pipefd[0])
(61,dev)
(62,NULL)
(63,pipefd)
(64,res == -1)
(65,pipefd)
(66,-1)
(67,RET)
(68,close(pipefd[0])
(69,EXIT_FAILURE)
(70,*child)
(71,child)
(72,*child == 0)
(73,dup(pipefd[1])
(74,failed:)
(75,ERROR("Executing dynamic pseudo file, fork failed\\n")
(76,child)
(77,(char *)
(78,0)
(79,)
(80,)
(81,STDOUT_FILENO)
(82,res)
(83,if(res == -1)
(84,close(pipefd[1])
(85,pipefd)
(86,1)
(87,close(STDOUT_FILENO)
(88,"Executing dynamic pseudo file, fork failed\\n")
(89,command)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^