-----label-----
1
-----code-----
static int
sa_upcall0(struct lwp *l, int type, struct lwp *event, struct lwp *interrupted,
    size_t argsize, void *arg, struct sadata_upcall *sau)
{

	KDASSERT((event == NULL) || (event != interrupted));

	sau->sau_flags = 0;
	sau->sau_type = type & SA_UPCALL_TYPE_MASK;
	sau->sau_argsize = argsize;
	sau->sau_arg = arg;

	if (type & SA_UPCALL_DEFER_EVENT) {
		sau->sau_event.ss_deferred.ss_lwp = event;
		sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;
	} else
		sa_upcall_getstate(&sau->sau_event, event);
	if (type & SA_UPCALL_DEFER_INTERRUPTED) {
		sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;
		sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;
	} else
		sa_upcall_getstate(&sau->sau_interrupted, interrupted);

	return (0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
28,29
30,31
32,33
32,34
34,35
34,36
37,38
37,39
38,39
40,41
40,42
43,44
43,45
43,46
43,47
43,48
43,49
43,50
43,51
44,45
45,46
45,47
46,47
48,49
48,50
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
63,64
63,65
64,65
68,69
69,70
69,71
70,71
70,72
71,72
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
81,83
82,83
85,86
87,88
88,89
88,90
89,90
89,91
90,91
93,94
95,96
95,97
95,98
96,97
96,98
97,98
99,100
101,102
101,103
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
106,108
107,108
112,113
114,115
115,116
115,117
116,117
116,118
117,118
120,121
122,123
123,124
123,125
123,126
124,125
126,127
127,128
127,129
128,129
131,132
133,134
133,135
133,136
134,135
134,136
135,136
137,138
139,140
139,141
140,141
141,142
141,143
142,143
142,144
143,144
143,145
144,145
144,146
145,146
150,151
152,153
153,154
153,155
154,155
154,156
155,156
158,159
160,161
161,162
161,163
161,164
162,163
164,165
165,166
165,167
166,167
169,170
171,172
172,173
-----nextToken-----
2,4,7,9,10,12,14,17,19,20,23,25,26,29,31,33,35,36,39,41,42,47,52,54,58,60,65,66,67,72,73,76,78,83,84,86,91,92,94,98,100,108,109,110,111,113,118,119,121,125,129,130,132,136,138,146,147,148,149,151,156,157,159,163,167,168,170,173
-----computeFrom-----
48,49
48,50
50,51
50,52
56,57
56,58
62,63
62,64
69,70
69,71
74,75
74,76
80,81
80,82
88,89
88,90
96,97
96,98
103,104
103,105
115,116
115,117
134,135
134,136
141,142
141,143
153,154
153,155
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static intsa_upcall0(struct lwp *l, int type, struct lwp *event, struct lwp *interrupted,    size_t argsize, void *arg, struct sadata_upcall *sau){	KDASSERT((event == NULL) || (event != interrupted));	sau->sau_flags = 0;	sau->sau_type = type & SA_UPCALL_TYPE_MASK;	sau->sau_argsize = argsize;	sau->sau_arg = arg;	if (type & SA_UPCALL_DEFER_EVENT) {		sau->sau_event.ss_deferred.ss_lwp = event;		sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;	} else		sa_upcall_getstate(&sau->sau_event, event);	if (type & SA_UPCALL_DEFER_INTERRUPTED) {		sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;		sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;	} else		sa_upcall_getstate(&sau->sau_interrupted, interrupted);	return (0);}
static int
sa_upcall0(struct lwp *l, int type, struct lwp *event, struct lwp *interrupted,    size_t argsize, void *arg, struct sadata_upcall *sau)
sa_upcall0
struct lwp *l
struct lwp
lwp
*l
*
l
int type
int
type
type
struct lwp *event
struct lwp
lwp
*event
*
event
struct lwp *interrupted
struct lwp
lwp
*interrupted
*
interrupted
size_t argsize
size_t
size_t
argsize
argsize
void *arg
void
*arg
*
arg
struct sadata_upcall *sau
struct sadata_upcall
sadata_upcall
*sau
*
sau
{	KDASSERT((event == NULL) || (event != interrupted));	sau->sau_flags = 0;	sau->sau_type = type & SA_UPCALL_TYPE_MASK;	sau->sau_argsize = argsize;	sau->sau_arg = arg;	if (type & SA_UPCALL_DEFER_EVENT) {		sau->sau_event.ss_deferred.ss_lwp = event;		sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;	} else		sa_upcall_getstate(&sau->sau_event, event);	if (type & SA_UPCALL_DEFER_INTERRUPTED) {		sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;		sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;	} else		sa_upcall_getstate(&sau->sau_interrupted, interrupted);	return (0);}
KDASSERT((event == NULL) || (event != interrupted));
KDASSERT((event == NULL) || (event != interrupted))
KDASSERT
KDASSERT
(event == NULL) || (event != interrupted)
(event == NULL)
event == NULL
event
event
NULL
NULL
(event != interrupted)
event != interrupted
event
event
interrupted
interrupted
sau->sau_flags = 0;
sau->sau_flags = 0
sau->sau_flags
sau
sau
sau_flags
0
sau->sau_type = type & SA_UPCALL_TYPE_MASK;
sau->sau_type = type & SA_UPCALL_TYPE_MASK
sau->sau_type
sau
sau
sau_type
type & SA_UPCALL_TYPE_MASK
type
type
SA_UPCALL_TYPE_MASK
SA_UPCALL_TYPE_MASK
sau->sau_argsize = argsize;
sau->sau_argsize = argsize
sau->sau_argsize
sau
sau
sau_argsize
argsize
argsize
sau->sau_arg = arg;
sau->sau_arg = arg
sau->sau_arg
sau
sau
sau_arg
arg
arg
if (type & SA_UPCALL_DEFER_EVENT) {		sau->sau_event.ss_deferred.ss_lwp = event;		sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;	} else		sa_upcall_getstate(&sau->sau_event, event);
type & SA_UPCALL_DEFER_EVENT
type
type
SA_UPCALL_DEFER_EVENT
SA_UPCALL_DEFER_EVENT
{		sau->sau_event.ss_deferred.ss_lwp = event;		sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;	}
sau->sau_event.ss_deferred.ss_lwp = event;
sau->sau_event.ss_deferred.ss_lwp = event
sau->sau_event.ss_deferred.ss_lwp
sau->sau_event.ss_deferred
sau->sau_event
sau
sau
sau_event
ss_deferred
ss_lwp
event
event
sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;
sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT
sau->sau_flags
sau
sau
sau_flags
SAU_FLAG_DEFERRED_EVENT
SAU_FLAG_DEFERRED_EVENT
sa_upcall_getstate(&sau->sau_event, event);
sa_upcall_getstate(&sau->sau_event, event)
sa_upcall_getstate
sa_upcall_getstate
&sau->sau_event
sau->sau_event
sau
sau
sau_event
event
event
if (type & SA_UPCALL_DEFER_INTERRUPTED) {		sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;		sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;	} else		sa_upcall_getstate(&sau->sau_interrupted, interrupted);
type & SA_UPCALL_DEFER_INTERRUPTED
type
type
SA_UPCALL_DEFER_INTERRUPTED
SA_UPCALL_DEFER_INTERRUPTED
{		sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;		sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;	}
sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;
sau->sau_interrupted.ss_deferred.ss_lwp = interrupted
sau->sau_interrupted.ss_deferred.ss_lwp
sau->sau_interrupted.ss_deferred
sau->sau_interrupted
sau
sau
sau_interrupted
ss_deferred
ss_lwp
interrupted
interrupted
sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;
sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED
sau->sau_flags
sau
sau
sau_flags
SAU_FLAG_DEFERRED_INTERRUPTED
SAU_FLAG_DEFERRED_INTERRUPTED
sa_upcall_getstate(&sau->sau_interrupted, interrupted);
sa_upcall_getstate(&sau->sau_interrupted, interrupted)
sa_upcall_getstate
sa_upcall_getstate
&sau->sau_interrupted
sau->sau_interrupted
sau
sau
sau_interrupted
interrupted
interrupted
return (0);
(0)
0
-----joern-----
(85,89,0)
(51,3,0)
(50,5,0)
(34,48,0)
(22,61,0)
(72,35,0)
(43,4,0)
(38,25,0)
(34,15,0)
(5,74,0)
(43,80,0)
(58,20,0)
(0,64,0)
(20,4,0)
(89,85,0)
(54,16,0)
(38,9,0)
(38,78,0)
(55,64,0)
(42,64,0)
(70,61,0)
(3,7,0)
(43,3,0)
(43,78,0)
(85,7,0)
(44,80,0)
(66,15,0)
(40,7,0)
(59,3,0)
(34,80,0)
(38,22,0)
(41,18,0)
(64,0,0)
(11,15,0)
(5,50,0)
(48,43,0)
(69,85,0)
(50,40,0)
(4,47,0)
(36,75,0)
(6,15,0)
(34,9,0)
(78,8,0)
(17,9,0)
(6,35,0)
(23,43,0)
(4,20,0)
(56,57,0)
(62,14,0)
(11,0,0)
(41,74,0)
(0,11,0)
(38,3,0)
(75,57,0)
(1,45,0)
(3,6,0)
(32,22,0)
(16,20,0)
(9,45,0)
(53,47,0)
(27,89,0)
(39,52,0)
(88,40,0)
(20,16,0)
(14,38,0)
(34,14,0)
(45,26,0)
(82,85,0)
(86,48,0)
(21,78,0)
(43,9,0)
(61,15,0)
(10,16,0)
(43,22,0)
(45,15,0)
(28,66,0)
(13,56,0)
(33,34,0)
(34,4,0)
(47,12,0)
(22,7,0)
(31,22,0)
(37,8,0)
(63,5,0)
(73,56,0)
(79,41,0)
(80,7,0)
(68,14,0)
(60,4,0)
(87,48,0)
(76,39,0)
(84,9,0)
(78,52,0)
(77,80,0)
(34,22,0)
(41,0,0)
(47,74,0)
(9,7,0)
(81,38,0)
(8,25,0)
(19,35,0)
(52,39,0)
(16,7,0)
(34,78,0)
(83,34,0)
(8,18,0)
(48,7,0)
(14,7,0)
(67,27,0)
(40,50,0)
(2,75,0)
(52,78,0)
(61,71,0)
(89,27,0)
(29,40,0)
(34,3,0)
(27,18,0)
(80,66,0)
(39,7,0)
(35,6,0)
(49,15,0)
(64,18,0)
(24,39,0)
(0,41,0)
(43,14,0)
(46,41,0)
(43,12,0)
(38,80,0)
(35,57,0)
(30,15,0)
(65,52,0)
(0,64,1)
(9,7,1)
(6,35,1)
(58,16,1)
(43,23,1)
(17,61,1)
(65,39,1)
(47,74,1)
(13,73,1)
(62,68,1)
(52,65,1)
(38,3,1)
(34,80,1)
(34,22,1)
(20,16,1)
(43,3,1)
(56,13,1)
(27,67,1)
(61,70,1)
(22,7,1)
(56,57,1)
(43,22,1)
(37,78,1)
(43,4,1)
(88,75,1)
(8,18,1)
(53,4,1)
(1,9,1)
(64,55,1)
(77,44,1)
(80,77,1)
(34,9,1)
(34,78,1)
(34,48,1)
(86,47,1)
(79,46,1)
(22,32,1)
(43,14,1)
(5,63,1)
(59,51,1)
(41,18,1)
(40,29,1)
(10,75,1)
(46,64,1)
(55,42,1)
(31,6,1)
(8,37,1)
(66,28,1)
(40,7,1)
(28,80,1)
(4,20,1)
(76,56,1)
(3,7,1)
(69,56,1)
(38,81,1)
(41,79,1)
(75,57,1)
(14,7,1)
(36,27,1)
(35,57,1)
(27,89,1)
(3,59,1)
(9,84,1)
(44,11,1)
(84,17,1)
(80,7,1)
(4,60,1)
(38,9,1)
(70,22,1)
(41,74,1)
(43,78,1)
(73,45,1)
(50,40,1)
(39,24,1)
(89,85,1)
(51,66,1)
(78,21,1)
(64,18,1)
(39,7,1)
(32,31,1)
(27,18,1)
(5,74,1)
(21,52,1)
(81,14,1)
(85,82,1)
(2,36,1)
(75,2,1)
(0,41,1)
(60,20,1)
(16,7,1)
(24,76,1)
(43,80,1)
(19,3,1)
(23,48,1)
(67,89,1)
(38,22,1)
(85,7,1)
(78,52,1)
(83,5,1)
(20,58,1)
(54,10,1)
(5,50,1)
(47,53,1)
(36,38,1)
(45,1,1)
(48,87,1)
(14,62,1)
(61,71,1)
(82,69,1)
(16,54,1)
(34,14,1)
(29,88,1)
(34,3,1)
(33,34,1)
(34,4,1)
(83,43,1)
(43,9,1)
(52,39,1)
(45,26,1)
(35,72,1)
(48,7,1)
(68,8,1)
(63,50,1)
(38,78,1)
(72,19,1)
(87,86,1)
(34,83,1)
(38,80,1)
(11,0,1)
(5,50,2)
(38,56,2)
(43,80,2)
(69,56,2)
(39,7,2)
(85,7,2)
(41,64,2)
(46,64,2)
(40,75,2)
(34,78,2)
(61,71,2)
(45,26,2)
(3,7,2)
(14,56,2)
(27,18,2)
(34,80,2)
(27,56,2)
(68,56,2)
(21,56,2)
(16,75,2)
(85,56,2)
(16,7,2)
(4,20,2)
(5,74,2)
(34,22,2)
(24,56,2)
(48,7,2)
(50,75,2)
(43,14,2)
(6,35,2)
(43,3,2)
(43,75,2)
(39,56,2)
(34,3,2)
(62,56,2)
(56,57,2)
(81,56,2)
(43,22,2)
(43,4,2)
(8,18,2)
(88,75,2)
(29,75,2)
(34,4,2)
(52,56,2)
(79,64,2)
(65,56,2)
(64,18,2)
(38,78,2)
(47,75,2)
(47,74,2)
(78,52,2)
(33,34,2)
(89,56,2)
(38,9,2)
(4,75,2)
(38,80,2)
(60,75,2)
(43,78,2)
(20,16,2)
(0,64,2)
(76,56,2)
(75,57,2)
(63,75,2)
(67,56,2)
(86,75,2)
(27,89,2)
(41,74,2)
(38,22,2)
(8,56,2)
(0,41,2)
(38,3,2)
(23,75,2)
(11,0,2)
(52,39,2)
(14,7,2)
(58,75,2)
(48,75,2)
(82,56,2)
(78,56,2)
(34,9,2)
(41,18,2)
(89,85,2)
(37,56,2)
(34,48,2)
(87,75,2)
(22,7,2)
(9,7,2)
(54,75,2)
(53,75,2)
(43,9,2)
(20,75,2)
(5,75,2)
(35,57,2)
(34,14,2)
(10,75,2)
(40,7,2)
(80,7,2)
(50,40,2)
-----------------------------------
(0,(event == NULL)
(1,arg)
(2,SA_UPCALL_DEFER_INTERRUPTED)
(3,sau->sau_type)
(4,sau->sau_interrupted.ss_deferred.ss_lwp)
(5,sa_upcall_getstate(&sau->sau_interrupted, interrupted)
(6,sau->sau_type = type & SA_UPCALL_TYPE_MASK)
(7,struct sadata_upcall *sau)
(8,sau->sau_event.ss_deferred.ss_lwp = event)
(9,sau->sau_arg)
(10,sau)
(11,KDASSERT((event == NULL)
(12,)
(13,SA_UPCALL_DEFER_EVENT)
(14,sau->sau_flags)
(15,)
(16,sau->sau_interrupted)
(17,sau)
(18,struct lwp *event)
(19,type)
(20,sau->sau_interrupted.ss_deferred)
(21,ss_lwp)
(22,sau->sau_argsize)
(23,SAU_FLAG_DEFERRED_INTERRUPTED)
(24,sau_event)
(25,)
(26,void *arg)
(27,sa_upcall_getstate(&sau->sau_event, event)
(28,0)
(29,sau_interrupted)
(30,if (type & SA_UPCALL_DEFER_EVENT)
(31,sau)
(32,sau_argsize)
(33,RET)
(34,return (0)
(35,type & SA_UPCALL_TYPE_MASK)
(36,type)
(37,event)
(38,sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT)
(39,sau->sau_event)
(40,sau->sau_interrupted)
(41,event != interrupted)
(42,event)
(43,sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED)
(44,sau)
(45,sau->sau_arg = arg)
(46,event)
(47,sau->sau_interrupted.ss_deferred.ss_lwp = interrupted)
(48,sau->sau_flags)
(49,if (type & SA_UPCALL_DEFER_INTERRUPTED)
(50,&sau->sau_interrupted)
(51,sau)
(52,sau->sau_event.ss_deferred)
(53,interrupted)
(54,sau_interrupted)
(55,NULL)
(56,type & SA_UPCALL_DEFER_EVENT)
(57,int type)
(58,ss_deferred)
(59,sau_type)
(60,ss_lwp)
(61,sau->sau_argsize = argsize)
(62,sau_flags)
(63,interrupted)
(64,event == NULL)
(65,ss_deferred)
(66,sau->sau_flags = 0)
(67,event)
(68,sau)
(69,sau)
(70,argsize)
(71,size_t argsize)
(72,SA_UPCALL_TYPE_MASK)
(73,type)
(74,struct lwp *interrupted)
(75,type & SA_UPCALL_DEFER_INTERRUPTED)
(76,sau)
(77,sau_flags)
(78,sau->sau_event.ss_deferred.ss_lwp)
(79,interrupted)
(80,sau->sau_flags)
(81,SAU_FLAG_DEFERRED_EVENT)
(82,sau_event)
(83,0)
(84,sau_arg)
(85,sau->sau_event)
(86,sau)
(87,sau_flags)
(88,sau)
(89,&sau->sau_event)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^