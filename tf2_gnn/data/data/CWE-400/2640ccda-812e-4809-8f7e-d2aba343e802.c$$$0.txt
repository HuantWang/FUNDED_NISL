-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_realloc_32_bad()
{
    int64_t * data;
    int64_t * *dataPtr1 = &data;
    int64_t * *dataPtr2 = &data;
    data = NULL;
    {
        int64_t * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)realloc(data, 100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        *dataPtr1 = data;
    }
    {
        int64_t * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
65,68
66,67
68,69
70,71
70,72
72,73
73,74
73,75
74,75
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
108,109
110,111
112,113
112,114
113,114
114,115
114,116
115,116
117,118
117,119
117,120
120,121
121,122
122,123
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,69,71,75,76,80,82,87,89,94,95,96,100,103,104,109,111,116,118,119,123,124
-----computeFrom-----
38,39
38,40
56,57
56,58
70,71
70,72
78,79
78,80
91,92
91,93
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_realloc_32_bad(){    int64_t * data;    int64_t * *dataPtr1 = &data;    int64_t * *dataPtr2 = &data;    data = NULL;    {        int64_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        *dataPtr1 = data;    }    {        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_realloc_32_bad()
CWE401_Memory_Leak__int64_t_realloc_32_bad
{    int64_t * data;    int64_t * *dataPtr1 = &data;    int64_t * *dataPtr2 = &data;    data = NULL;    {        int64_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        *dataPtr1 = data;    }    {        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
int64_t * *dataPtr1 = &data;
int64_t * *dataPtr1 = &data;
int64_t
int64_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int64_t * *dataPtr2 = &data;
int64_t * *dataPtr2 = &data;
int64_t
int64_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int64_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        *dataPtr1 = data;    }
int64_t * data = *dataPtr1;
int64_t * data = *dataPtr1;
int64_t
int64_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int64_t *)realloc(data, 100*sizeof(int64_t));
data = (int64_t *)realloc(data, 100*sizeof(int64_t))
data
data
(int64_t *)realloc(data, 100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, 100*sizeof(int64_t))
realloc
realloc
data
data
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int64_t * data = *dataPtr2;
int64_t * data = *dataPtr2;
int64_t
int64_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(52,48,0)
(14,45,0)
(29,11,0)
(5,26,0)
(25,39,0)
(54,44,0)
(21,40,0)
(42,14,0)
(39,38,0)
(13,48,0)
(0,15,0)
(22,7,0)
(5,23,0)
(34,26,0)
(51,9,0)
(35,26,0)
(46,22,0)
(27,35,0)
(43,48,0)
(3,44,0)
(25,12,0)
(20,32,0)
(6,31,0)
(52,23,0)
(38,40,0)
(9,48,0)
(18,11,0)
(16,22,0)
(23,19,0)
(41,40,0)
(30,7,0)
(37,15,0)
(9,52,0)
(31,5,0)
(47,42,0)
(8,5,0)
(38,32,0)
(23,52,0)
(49,38,0)
(31,24,0)
(50,12,0)
(11,40,0)
(4,52,0)
(19,23,0)
(48,40,0)
(46,9,0)
(35,22,0)
(15,52,0)
(23,5,0)
(7,22,0)
(26,35,0)
(5,31,0)
(2,46,0)
(22,40,0)
(3,48,0)
(44,3,0)
(14,42,0)
(28,39,0)
(53,48,0)
(10,44,0)
(24,31,0)
(32,38,0)
(26,48,0)
(33,24,0)
(44,52,0)
(1,25,0)
(39,25,0)
(17,40,0)
(12,40,0)
(54,10,1)
(46,22,1)
(37,0,1)
(53,14,1)
(9,51,1)
(28,1,1)
(32,20,1)
(49,22,1)
(4,26,1)
(33,6,1)
(42,47,1)
(14,42,1)
(36,25,1)
(1,9,1)
(46,2,1)
(5,26,1)
(44,54,1)
(6,8,1)
(27,34,1)
(39,38,1)
(7,30,1)
(5,31,1)
(24,33,1)
(34,11,1)
(11,29,1)
(44,52,1)
(35,27,1)
(8,4,1)
(52,23,1)
(0,52,1)
(15,52,1)
(18,38,1)
(29,18,1)
(35,22,1)
(23,19,1)
(31,24,1)
(3,44,1)
(38,32,1)
(9,52,1)
(20,49,1)
(51,46,1)
(22,7,1)
(15,37,1)
(2,3,1)
(26,35,1)
(23,5,1)
(39,28,1)
(53,15,1)
(25,39,1)
(30,16,1)
(47,15,1)
(10,53,1)
(23,5,2)
(5,26,2)
(3,44,2)
(44,52,2)
(15,52,2)
(47,15,2)
(35,22,2)
(42,15,2)
(26,35,2)
(46,22,2)
(9,52,2)
(52,23,2)
(14,42,2)
(23,19,2)
(22,7,2)
(14,15,2)
(5,31,2)
(31,24,2)
(38,32,2)
(39,38,2)
(25,39,2)
-----------------------------------
(0,data)
(1,data)
(2,dataPtr1)
(3,printLongLongLine(data[0])
(4,data)
(5,realloc(data, 100*sizeof(int64_t)
(6,100)
(7,&data)
(8,data)
(9,*dataPtr1 = data)
(10,data)
(11,data = NULL)
(12,)
(13,if (data == NULL)
(14,exit(-1)
(15,data == NULL)
(16,dataPtr1)
(17,dataPtr1)
(18,data)
(19,int64_t *)
(20,data)
(21,data)
(22,* *dataPtr1 = &data)
(23,(int64_t *)
(24,sizeof(int64_t)
(25,* data = *dataPtr2)
(26,* data = *dataPtr1)
(27,dataPtr1)
(28,dataPtr2)
(29,NULL)
(30,data)
(31,100*sizeof(int64_t)
(32,&data)
(33,int64_t)
(34,data)
(35,*dataPtr1)
(36,RET)
(37,NULL)
(38,* *dataPtr2 = &data)
(39,*dataPtr2)
(40,)
(41,dataPtr2)
(42,-1)
(43,data)
(44,data[0])
(45,)
(46,*dataPtr1)
(47,1)
(48,)
(49,dataPtr2)
(50,data)
(51,data)
(52,data = (int64_t *)
(53,L)
(54,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^