-----label-----
0
-----code-----
static void ravb_ring_free(struct net_device *ndev, int q)
{
	struct ravb_private *priv = netdev_priv(ndev);
	int num_tx_desc = priv->num_tx_desc;
	int ring_size;
	int i;

	if (priv->rx_ring[q]) {
		for (i = 0; i < priv->num_rx_ring[q]; i++) {
			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];

			if (!dma_mapping_error(ndev->dev.parent,
					       le32_to_cpu(desc->dptr)))
				dma_unmap_single(ndev->dev.parent,
						 le32_to_cpu(desc->dptr),
						 RX_BUF_SZ,
						 DMA_FROM_DEVICE);
		}
		ring_size = sizeof(struct ravb_ex_rx_desc) *
			    (priv->num_rx_ring[q] + 1);
		dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],
				  priv->rx_desc_dma[q]);
		priv->rx_ring[q] = NULL;
	}

	if (priv->tx_ring[q]) {
		ravb_tx_free(ndev, q, false);

		ring_size = sizeof(struct ravb_tx_desc) *
			    (priv->num_tx_ring[q] * num_tx_desc + 1);
		dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],
				  priv->tx_desc_dma[q]);
		priv->tx_ring[q] = NULL;
	}

	/* Free RX skb ringbuffer */
	if (priv->rx_skb[q]) {
		for (i = 0; i < priv->num_rx_ring[q]; i++)
			dev_kfree_skb(priv->rx_skb[q][i]);
	}
	kfree(priv->rx_skb[q]);
	priv->rx_skb[q] = NULL;

	/* Free aligned TX buffers */
	kfree(priv->tx_align[q]);
	priv->tx_align[q] = NULL;

	/* Free TX skb ringbuffer.
	 * SKBs are freed by ravb_tx_free() call above.
	 */
	kfree(priv->tx_skb[q]);
	priv->tx_skb[q] = NULL;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
16,17
17,18
17,19
18,19
20,21
20,22
20,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
32,33
32,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
42,43
44,45
45,46
45,47
47,48
49,50
49,51
50,51
50,52
51,52
51,53
52,53
55,56
57,58
57,59
57,60
57,61
58,59
58,60
58,61
58,62
59,60
60,61
60,62
61,62
64,65
64,66
65,66
67,68
67,69
68,69
68,70
69,70
72,73
74,75
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
82,85
85,86
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
95,96
97,98
97,99
98,99
99,100
99,101
99,102
100,101
102,103
102,104
103,104
103,105
104,105
108,109
108,110
109,110
111,112
111,113
112,113
115,116
116,117
116,118
116,119
116,120
116,121
117,118
119,120
119,121
120,121
120,122
121,122
125,126
125,127
126,127
128,129
128,130
129,130
132,133
134,135
136,137
137,138
137,139
138,139
140,141
140,142
141,142
142,143
142,144
143,144
146,147
147,148
147,149
148,149
148,150
149,150
149,151
150,151
153,154
156,157
157,158
157,159
157,160
157,161
157,162
158,159
160,161
160,162
161,162
161,163
162,163
166,167
168,169
168,170
169,170
169,171
170,171
173,174
175,176
175,177
176,177
176,178
177,178
180,181
182,183
183,184
183,185
184,185
184,186
185,186
185,187
186,187
189,190
191,192
193,194
193,195
194,195
194,196
195,196
195,197
196,197
199,200
201,202
201,203
201,204
201,205
202,203
203,204
203,205
203,206
203,207
204,205
206,207
208,209
211,212
212,213
212,214
213,214
215,216
215,217
216,217
217,218
217,219
218,219
221,222
222,223
222,224
223,224
223,225
224,225
224,226
225,226
225,227
226,227
229,230
231,232
234,235
235,236
235,237
235,238
235,239
235,240
236,237
238,239
238,240
239,240
239,241
240,241
244,245
246,247
246,248
247,248
247,249
248,249
251,252
253,254
253,255
254,255
254,256
255,256
258,259
260,261
261,262
261,263
262,263
262,264
263,264
263,265
264,265
267,268
269,270
271,272
271,273
272,273
272,274
273,274
273,275
274,275
277,278
279,280
280,281
280,282
280,283
280,284
281,282
282,283
282,284
283,284
286,287
286,288
287,288
289,290
289,291
290,291
290,292
291,292
294,295
296,297
297,298
299,300
300,301
300,302
301,302
303,304
303,305
304,305
304,306
305,306
305,307
306,307
309,310
311,312
313,314
314,315
314,316
315,316
317,318
317,319
318,319
318,320
319,320
322,323
324,325
325,326
325,327
326,327
326,328
327,328
327,329
328,329
331,332
333,334
335,336
336,337
336,338
337,338
339,340
339,341
340,341
340,342
341,342
344,345
346,347
347,348
347,349
348,349
348,350
349,350
349,351
350,351
353,354
355,356
357,358
358,359
358,360
359,360
361,362
361,363
362,363
362,364
363,364
366,367
368,369
369,370
369,371
370,371
370,372
371,372
371,373
372,373
375,376
377,378
-----nextToken-----
2,4,7,9,10,12,14,19,21,22,26,28,31,33,37,38,41,43,46,48,53,54,56,62,63,66,70,71,73,76,81,83,84,91,92,94,96,101,105,106,107,110,113,114,118,122,123,124,127,130,131,133,135,139,144,145,151,152,154,155,159,163,164,165,167,171,172,174,178,179,181,187,188,190,192,197,198,200,205,207,209,210,214,219,220,227,228,230,232,233,237,241,242,243,245,249,250,252,256,257,259,265,266,268,270,275,276,278,284,285,288,292,293,295,298,302,307,308,310,312,316,320,321,323,329,330,332,334,338,342,343,345,351,352,354,356,360,364,365,367,373,374,376,378
-----computeFrom-----
60,61
60,62
64,65
64,66
137,138
137,139
140,141
140,142
147,148
147,149
183,184
183,185
212,213
212,214
215,216
215,217
222,223
222,224
223,224
223,225
261,262
261,263
282,283
282,284
286,287
286,288
325,326
325,327
347,348
347,349
369,370
369,371
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void ravb_ring_free(struct net_device *ndev, int q){	struct ravb_private *priv = netdev_priv(ndev);	int num_tx_desc = priv->num_tx_desc;	int ring_size;	int i;	if (priv->rx_ring[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++) {			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 RX_BUF_SZ,						 DMA_FROM_DEVICE);		}		ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q]);		priv->rx_ring[q] = NULL;	}	if (priv->tx_ring[q]) {		ravb_tx_free(ndev, q, false);		ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q]);		priv->tx_ring[q] = NULL;	}	/* Free RX skb ringbuffer */	if (priv->rx_skb[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++)			dev_kfree_skb(priv->rx_skb[q][i]);	}	kfree(priv->rx_skb[q]);	priv->rx_skb[q] = NULL;	/* Free aligned TX buffers */	kfree(priv->tx_align[q]);	priv->tx_align[q] = NULL;	/* Free TX skb ringbuffer.	 * SKBs are freed by ravb_tx_free() call above.	 */	kfree(priv->tx_skb[q]);	priv->tx_skb[q] = NULL;}
static void
ravb_ring_free(struct net_device *ndev, int q)
ravb_ring_free
struct net_device *ndev
struct net_device
net_device
*ndev
*
ndev
int q
int
q
q
{	struct ravb_private *priv = netdev_priv(ndev);	int num_tx_desc = priv->num_tx_desc;	int ring_size;	int i;	if (priv->rx_ring[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++) {			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 RX_BUF_SZ,						 DMA_FROM_DEVICE);		}		ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q]);		priv->rx_ring[q] = NULL;	}	if (priv->tx_ring[q]) {		ravb_tx_free(ndev, q, false);		ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q]);		priv->tx_ring[q] = NULL;	}	/* Free RX skb ringbuffer */	if (priv->rx_skb[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++)			dev_kfree_skb(priv->rx_skb[q][i]);	}	kfree(priv->rx_skb[q]);	priv->rx_skb[q] = NULL;	/* Free aligned TX buffers */	kfree(priv->tx_align[q]);	priv->tx_align[q] = NULL;	/* Free TX skb ringbuffer.	 * SKBs are freed by ravb_tx_free() call above.	 */	kfree(priv->tx_skb[q]);	priv->tx_skb[q] = NULL;}
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private
ravb_private
*priv = netdev_priv(ndev)
*
priv
= netdev_priv(ndev)
netdev_priv(ndev)
netdev_priv
netdev_priv
ndev
ndev
int num_tx_desc = priv->num_tx_desc;
int num_tx_desc = priv->num_tx_desc;
int
num_tx_desc = priv->num_tx_desc
num_tx_desc
= priv->num_tx_desc
priv->num_tx_desc
priv
priv
num_tx_desc
int ring_size;
int ring_size;
int
ring_size
ring_size
int i;
int i;
int
i
i
if (priv->rx_ring[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++) {			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 RX_BUF_SZ,						 DMA_FROM_DEVICE);		}		ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q]);		priv->rx_ring[q] = NULL;	}
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
{		for (i = 0; i < priv->num_rx_ring[q]; i++) {			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 RX_BUF_SZ,						 DMA_FROM_DEVICE);		}		ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q]);		priv->rx_ring[q] = NULL;	}
for (i = 0; i < priv->num_rx_ring[q]; i++) {			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 RX_BUF_SZ,						 DMA_FROM_DEVICE);		}
i = 0;
i = 0
i
i
0
i < priv->num_rx_ring[q]
i
i
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
i++
i
i
{			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 RX_BUF_SZ,						 DMA_FROM_DEVICE);		}
struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];
struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];
struct ravb_ex_rx_desc
ravb_ex_rx_desc
*desc = &priv->rx_ring[q][i]
*
desc
= &priv->rx_ring[q][i]
&priv->rx_ring[q][i]
priv->rx_ring[q][i]
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
i
i
if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 RX_BUF_SZ,						 DMA_FROM_DEVICE);
!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr))
dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr))
dma_mapping_error
dma_mapping_error
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
le32_to_cpu(desc->dptr)
le32_to_cpu
le32_to_cpu
desc->dptr
desc
desc
dptr
dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 RX_BUF_SZ,						 DMA_FROM_DEVICE);
dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 RX_BUF_SZ,						 DMA_FROM_DEVICE)
dma_unmap_single
dma_unmap_single
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
le32_to_cpu(desc->dptr)
le32_to_cpu
le32_to_cpu
desc->dptr
desc
desc
dptr
RX_BUF_SZ
RX_BUF_SZ
DMA_FROM_DEVICE
DMA_FROM_DEVICE
ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1);
ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1)
ring_size
ring_size
sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1)
sizeof(struct ravb_ex_rx_desc)
struct ravb_ex_rx_desc
struct ravb_ex_rx_desc
ravb_ex_rx_desc

(priv->num_rx_ring[q] + 1)
priv->num_rx_ring[q] + 1
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
1
dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q]);
dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q])
dma_free_coherent
dma_free_coherent
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
ring_size
ring_size
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
priv->rx_desc_dma[q]
priv->rx_desc_dma
priv
priv
rx_desc_dma
q
q
priv->rx_ring[q] = NULL;
priv->rx_ring[q] = NULL
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
NULL
NULL
if (priv->tx_ring[q]) {		ravb_tx_free(ndev, q, false);		ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q]);		priv->tx_ring[q] = NULL;	}
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
{		ravb_tx_free(ndev, q, false);		ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q]);		priv->tx_ring[q] = NULL;	}
ravb_tx_free(ndev, q, false);
ravb_tx_free(ndev, q, false)
ravb_tx_free
ravb_tx_free
ndev
ndev
q
q
false
ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1);
ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1)
ring_size
ring_size
sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1)
sizeof(struct ravb_tx_desc)
struct ravb_tx_desc
struct ravb_tx_desc
ravb_tx_desc

(priv->num_tx_ring[q] * num_tx_desc + 1)
priv->num_tx_ring[q] * num_tx_desc + 1
priv->num_tx_ring[q] * num_tx_desc
priv->num_tx_ring[q]
priv->num_tx_ring
priv
priv
num_tx_ring
q
q
num_tx_desc
num_tx_desc
1
dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q]);
dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q])
dma_free_coherent
dma_free_coherent
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
ring_size
ring_size
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
priv->tx_desc_dma[q]
priv->tx_desc_dma
priv
priv
tx_desc_dma
q
q
priv->tx_ring[q] = NULL;
priv->tx_ring[q] = NULL
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
NULL
NULL
if (priv->rx_skb[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++)			dev_kfree_skb(priv->rx_skb[q][i]);	}
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
{		for (i = 0; i < priv->num_rx_ring[q]; i++)			dev_kfree_skb(priv->rx_skb[q][i]);	}
for (i = 0; i < priv->num_rx_ring[q]; i++)			dev_kfree_skb(priv->rx_skb[q][i]);
i = 0;
i = 0
i
i
0
i < priv->num_rx_ring[q]
i
i
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
i++
i
i
dev_kfree_skb(priv->rx_skb[q][i]);
dev_kfree_skb(priv->rx_skb[q][i])
dev_kfree_skb
dev_kfree_skb
priv->rx_skb[q][i]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
i
i
kfree(priv->rx_skb[q]);
kfree(priv->rx_skb[q])
kfree
kfree
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
priv->rx_skb[q] = NULL;
priv->rx_skb[q] = NULL
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
NULL
NULL
kfree(priv->tx_align[q]);
kfree(priv->tx_align[q])
kfree
kfree
priv->tx_align[q]
priv->tx_align
priv
priv
tx_align
q
q
priv->tx_align[q] = NULL;
priv->tx_align[q] = NULL
priv->tx_align[q]
priv->tx_align
priv
priv
tx_align
q
q
NULL
NULL
kfree(priv->tx_skb[q]);
kfree(priv->tx_skb[q])
kfree
kfree
priv->tx_skb[q]
priv->tx_skb
priv
priv
tx_skb
q
q
priv->tx_skb[q] = NULL;
priv->tx_skb[q] = NULL
priv->tx_skb[q]
priv->tx_skb
priv
priv
tx_skb
q
q
NULL
NULL
-----joern-----
(46,189,0)
(212,121,0)
(141,121,0)
(208,74,0)
(219,153,0)
(189,46,0)
(200,133,0)
(155,181,0)
(52,147,0)
(7,114,0)
(48,204,0)
(116,167,0)
(110,49,0)
(146,197,0)
(153,130,0)
(91,197,0)
(214,87,0)
(71,217,0)
(75,60,0)
(181,102,0)
(124,217,0)
(205,197,0)
(19,50,0)
(202,223,0)
(45,13,0)
(129,19,0)
(133,214,0)
(62,183,0)
(169,58,0)
(98,223,0)
(25,58,0)
(207,28,0)
(60,87,0)
(119,167,0)
(173,183,0)
(8,130,0)
(94,102,0)
(97,117,0)
(11,129,0)
(134,153,0)
(149,51,0)
(84,14,0)
(112,107,0)
(220,144,0)
(178,141,0)
(109,12,0)
(37,87,0)
(183,102,0)
(174,99,0)
(22,53,0)
(160,173,0)
(54,173,0)
(113,220,0)
(213,148,0)
(2,13,0)
(147,18,0)
(102,121,0)
(161,94,0)
(140,186,0)
(103,86,0)
(28,102,0)
(108,86,0)
(181,114,0)
(37,23,0)
(17,12,0)
(74,89,0)
(36,56,0)
(185,153,0)
(26,101,0)
(73,121,0)
(175,209,0)
(118,85,0)
(18,152,0)
(101,26,0)
(139,121,0)
(35,95,0)
(128,13,0)
(90,121,0)
(26,25,0)
(23,102,0)
(205,13,0)
(74,130,0)
(153,185,0)
(128,78,0)
(223,161,0)
(201,117,0)
(68,182,0)
(172,25,0)
(182,17,0)
(60,179,0)
(167,102,0)
(175,89,0)
(37,109,0)
(69,121,0)
(216,121,0)
(28,9,0)
(135,166,0)
(190,102,0)
(9,28,0)
(186,13,0)
(189,87,0)
(106,46,0)
(176,102,0)
(213,102,0)
(158,214,0)
(148,213,0)
(99,45,0)
(197,205,0)
(93,98,0)
(214,182,0)
(223,202,0)
(69,114,0)
(80,129,0)
(81,146,0)
(114,87,0)
(44,152,0)
(184,95,0)
(146,185,0)
(222,223,0)
(150,61,0)
(40,144,0)
(193,11,0)
(171,17,0)
(4,217,0)
(61,138,0)
(14,141,0)
(126,166,0)
(169,87,0)
(78,175,0)
(144,87,0)
(137,192,0)
(53,102,0)
(24,121,0)
(202,186,0)
(59,95,0)
(98,51,0)
(67,23,0)
(166,88,0)
(105,94,0)
(147,141,0)
(217,102,0)
(131,15,0)
(183,173,0)
(101,147,0)
(191,121,0)
(1,121,0)
(96,22,0)
(117,102,0)
(27,146,0)
(86,85,0)
(115,121,0)
(130,156,0)
(157,54,0)
(88,49,0)
(21,28,0)
(90,61,0)
(9,87,0)
(161,87,0)
(204,121,0)
(122,176,0)
(83,152,0)
(61,90,0)
(133,102,0)
(18,87,0)
(206,18,0)
(99,182,0)
(92,213,0)
(65,179,0)
(188,2,0)
(50,19,0)
(34,181,0)
(214,133,0)
(88,166,0)
(176,82,0)
(173,87,0)
(199,31,0)
(203,108,0)
(76,120,0)
(88,87,0)
(75,102,0)
(43,35,0)
(55,161,0)
(152,18,0)
(217,71,0)
(198,139,0)
(148,192,0)
(220,102,0)
(177,151,0)
(10,53,0)
(26,56,0)
(23,37,0)
(102,2,0)
(132,23,0)
(164,82,0)
(45,99,0)
(42,109,0)
(129,11,0)
(138,61,0)
(47,75,0)
(161,223,0)
(82,182,0)
(130,41,0)
(145,45,0)
(56,36,0)
(32,9,0)
(125,101,0)
(114,69,0)
(163,205,0)
(22,87,0)
(175,78,0)
(19,17,0)
(49,58,0)
(25,26,0)
(98,87,0)
(104,14,0)
(61,87,0)
(190,11,0)
(173,54,0)
(70,12,0)
(60,75,0)
(223,98,0)
(85,118,0)
(22,107,0)
(194,41,0)
(11,87,0)
(147,101,0)
(211,15,0)
(127,74,0)
(162,50,0)
(38,85,0)
(53,22,0)
(71,87,0)
(143,88,0)
(192,148,0)
(94,161,0)
(11,190,0)
(14,102,0)
(5,133,0)
(46,95,0)
(66,189,0)
(182,82,0)
(187,138,0)
(54,156,0)
(166,102,0)
(77,186,0)
(56,26,0)
(64,190,0)
(30,213,0)
(186,202,0)
(31,167,0)
(120,189,0)
(29,53,0)
(51,102,0)
(20,183,0)
(16,202,0)
(223,25,0)
(82,176,0)
(50,162,0)
(138,102,0)
(152,102,0)
(182,12,0)
(198,117,0)
(156,130,0)
(89,74,0)
(189,120,0)
(71,204,0)
(111,45,0)
(182,214,0)
(221,220,0)
(82,87,0)
(86,108,0)
(51,98,0)
(6,148,0)
(215,169,0)
(159,41,0)
(114,181,0)
(223,58,0)
(63,78,0)
(139,198,0)
(210,71,0)
(141,14,0)
(123,169,0)
(185,146,0)
(144,220,0)
(89,175,0)
(0,190,0)
(54,15,0)
(31,87,0)
(120,102,0)
(86,87,0)
(17,19,0)
(198,87,0)
(3,128,0)
(154,75,0)
(72,60,0)
(209,175,0)
(179,121,0)
(156,54,0)
(85,95,0)
(151,15,0)
(169,13,0)
(107,121,0)
(167,31,0)
(79,94,0)
(170,102,0)
(136,37,0)
(33,128,0)
(218,51,0)
(168,198,0)
(57,205,0)
(192,15,0)
(197,146,0)
(195,138,0)
(180,142,0)
(196,120,0)
(148,87,0)
(39,108,0)
(165,176,0)
(182,99,0)
(117,198,0)
(78,128,0)
(108,102,0)
(19,129,0)
(2,102,0)
(85,86,0)
(18,147,0)
(224,169,0)
(86,108,1)
(28,21,1)
(202,186,1)
(148,213,1)
(125,147,1)
(220,113,1)
(53,102,1)
(76,106,1)
(26,101,1)
(20,8,1)
(117,201,1)
(107,112,1)
(122,214,1)
(133,200,1)
(17,19,1)
(120,102,1)
(85,95,1)
(166,126,1)
(61,138,1)
(46,189,1)
(97,179,1)
(45,111,1)
(19,129,1)
(61,150,1)
(128,13,1)
(136,23,1)
(67,132,1)
(111,145,1)
(118,85,1)
(4,69,1)
(78,128,1)
(181,34,1)
(82,87,1)
(223,25,1)
(176,102,1)
(71,210,1)
(50,171,1)
(188,170,1)
(161,94,1)
(44,83,1)
(164,176,1)
(108,102,1)
(141,14,1)
(148,6,1)
(214,158,1)
(14,102,1)
(106,35,1)
(161,55,1)
(144,87,1)
(42,37,1)
(22,87,1)
(99,45,1)
(54,15,1)
(158,133,1)
(23,102,1)
(60,72,1)
(116,119,1)
(109,42,1)
(84,104,1)
(135,223,1)
(5,68,1)
(137,151,1)
(9,28,1)
(182,214,1)
(30,92,1)
(182,17,1)
(26,56,1)
(206,152,1)
(114,7,1)
(167,116,1)
(59,9,1)
(161,87,1)
(82,176,1)
(147,18,1)
(103,108,1)
(66,120,1)
(174,45,1)
(129,11,1)
(35,43,1)
(201,97,1)
(130,156,1)
(134,197,1)
(186,77,1)
(8,192,1)
(213,30,1)
(31,87,1)
(9,32,1)
(86,103,1)
(214,133,1)
(145,17,1)
(82,164,1)
(217,102,1)
(74,130,1)
(155,46,1)
(57,163,1)
(11,87,1)
(95,184,1)
(43,118,1)
(152,44,1)
(186,13,1)
(218,149,1)
(75,102,1)
(133,102,1)
(173,160,1)
(65,60,1)
(197,91,1)
(192,148,1)
(7,181,1)
(169,13,1)
(38,86,1)
(192,15,1)
(37,87,1)
(221,141,1)
(15,211,1)
(31,199,1)
(27,81,1)
(200,5,1)
(79,105,1)
(209,175,1)
(184,59,1)
(179,65,1)
(63,128,1)
(35,95,1)
(193,190,1)
(208,127,1)
(197,205,1)
(181,102,1)
(167,102,1)
(53,10,1)
(22,53,1)
(117,102,1)
(96,53,1)
(18,206,1)
(214,87,1)
(155,9,1)
(189,120,1)
(88,87,1)
(169,224,1)
(98,93,1)
(113,221,1)
(110,88,1)
(91,205,1)
(124,4,1)
(138,102,1)
(72,75,1)
(61,87,1)
(126,135,1)
(137,15,1)
(101,125,1)
(47,90,1)
(64,50,1)
(217,124,1)
(9,87,1)
(215,31,1)
(168,117,1)
(101,147,1)
(153,130,1)
(21,207,1)
(171,192,1)
(14,84,1)
(49,110,1)
(132,182,1)
(153,219,1)
(18,152,1)
(189,87,1)
(75,154,1)
(173,87,1)
(169,87,1)
(119,144,1)
(203,46,1)
(182,99,1)
(178,102,1)
(69,114,1)
(106,95,1)
(6,213,1)
(19,50,1)
(80,11,1)
(56,36,1)
(190,0,1)
(151,15,1)
(175,89,1)
(108,39,1)
(52,18,1)
(144,220,1)
(51,102,1)
(93,51,1)
(11,193,1)
(85,86,1)
(85,38,1)
(0,64,1)
(207,49,1)
(68,99,1)
(195,187,1)
(78,63,1)
(223,202,1)
(39,203,1)
(223,161,1)
(2,188,1)
(28,102,1)
(198,168,1)
(23,67,1)
(166,102,1)
(94,102,1)
(102,2,1)
(37,136,1)
(88,143,1)
(54,157,1)
(127,78,1)
(213,102,1)
(37,23,1)
(74,208,1)
(210,217,1)
(98,87,1)
(172,169,1)
(60,75,1)
(50,162,1)
(149,222,1)
(16,186,1)
(183,62,1)
(150,138,1)
(190,102,1)
(205,57,1)
(60,87,1)
(123,215,1)
(22,96,1)
(222,202,1)
(219,134,1)
(90,61,1)
(154,47,1)
(185,153,1)
(146,185,1)
(89,74,1)
(224,123,1)
(104,178,1)
(92,137,1)
(29,139,1)
(105,98,1)
(144,40,1)
(160,183,1)
(147,141,1)
(147,52,1)
(177,209,1)
(146,27,1)
(34,155,1)
(163,209,1)
(48,71,1)
(18,87,1)
(112,22,1)
(175,78,1)
(156,54,1)
(198,117,1)
(183,102,1)
(55,94,1)
(187,204,1)
(129,80,1)
(40,220,1)
(138,195,1)
(131,144,1)
(94,79,1)
(140,25,1)
(205,13,1)
(83,56,1)
(148,87,1)
(2,13,1)
(119,109,1)
(77,140,1)
(177,146,1)
(46,95,1)
(207,31,1)
(182,82,1)
(189,66,1)
(152,102,1)
(51,218,1)
(173,183,1)
(31,167,1)
(220,102,1)
(128,33,1)
(196,76,1)
(114,87,1)
(211,131,1)
(10,29,1)
(157,173,1)
(71,217,1)
(3,130,1)
(81,185,1)
(202,16,1)
(71,87,1)
(45,13,1)
(25,26,1)
(32,28,1)
(204,48,1)
(11,190,1)
(88,166,1)
(56,172,1)
(223,98,1)
(33,3,1)
(120,196,1)
(151,177,1)
(62,20,1)
(114,181,1)
(99,174,1)
(165,122,1)
(176,165,1)
(143,166,1)
(198,87,1)
(98,51,1)
(100,107,1)
(139,198,1)
(146,197,1)
(86,87,1)
(199,167,1)
(54,173,1)
(169,87,2)
(190,102,2)
(213,144,2)
(93,31,2)
(95,9,2)
(220,102,2)
(192,144,2)
(148,192,2)
(19,129,2)
(120,102,2)
(183,102,2)
(173,183,2)
(182,82,2)
(117,102,2)
(105,31,2)
(2,13,2)
(80,144,2)
(53,102,2)
(211,144,2)
(213,192,2)
(57,209,2)
(75,102,2)
(6,144,2)
(157,192,2)
(43,46,2)
(161,31,2)
(202,31,2)
(172,31,2)
(89,74,2)
(149,31,2)
(56,31,2)
(202,186,2)
(223,25,2)
(148,144,2)
(83,31,2)
(156,54,2)
(128,13,2)
(60,87,2)
(223,202,2)
(94,102,2)
(92,192,2)
(125,31,2)
(200,144,2)
(74,130,2)
(147,18,2)
(182,17,2)
(19,50,2)
(208,192,2)
(183,192,2)
(114,87,2)
(137,144,2)
(71,87,2)
(108,102,2)
(147,31,2)
(209,192,2)
(130,192,2)
(26,31,2)
(218,31,2)
(27,209,2)
(37,144,2)
(185,153,2)
(30,144,2)
(11,87,2)
(86,108,2)
(55,31,2)
(101,31,2)
(109,144,2)
(94,31,2)
(153,209,2)
(182,214,2)
(223,98,2)
(46,189,2)
(103,46,2)
(147,141,2)
(90,61,2)
(182,99,2)
(127,192,2)
(35,95,2)
(181,102,2)
(18,87,2)
(146,185,2)
(223,31,2)
(88,31,2)
(219,209,2)
(123,31,2)
(144,87,2)
(129,11,2)
(151,15,2)
(189,87,2)
(146,209,2)
(167,102,2)
(120,46,2)
(144,220,2)
(28,102,2)
(214,133,2)
(31,87,2)
(22,87,2)
(189,120,2)
(222,31,2)
(46,9,2)
(223,161,2)
(11,190,2)
(217,102,2)
(130,156,2)
(139,198,2)
(69,114,2)
(98,31,2)
(76,46,2)
(46,46,2)
(198,87,2)
(91,209,2)
(148,213,2)
(3,192,2)
(56,36,2)
(52,31,2)
(82,144,2)
(82,176,2)
(110,31,2)
(17,19,2)
(174,144,2)
(136,144,2)
(173,192,2)
(214,87,2)
(114,181,2)
(175,89,2)
(133,144,2)
(213,102,2)
(161,94,2)
(186,13,2)
(86,46,2)
(78,192,2)
(59,9,2)
(30,192,2)
(128,192,2)
(54,173,2)
(79,31,2)
(152,102,2)
(151,192,2)
(138,102,2)
(81,209,2)
(102,2,2)
(193,144,2)
(134,209,2)
(44,31,2)
(148,87,2)
(99,45,2)
(126,31,2)
(152,31,2)
(86,87,2)
(25,31,2)
(206,31,2)
(45,13,2)
(20,192,2)
(169,13,2)
(106,9,2)
(165,144,2)
(66,46,2)
(16,31,2)
(197,209,2)
(61,138,2)
(23,144,2)
(33,192,2)
(64,144,2)
(89,192,2)
(129,144,2)
(169,31,2)
(153,130,2)
(108,46,2)
(49,31,2)
(77,31,2)
(145,144,2)
(54,15,2)
(118,85,2)
(26,56,2)
(106,46,2)
(158,144,2)
(37,87,2)
(0,144,2)
(205,13,2)
(60,75,2)
(63,192,2)
(50,144,2)
(192,192,2)
(163,209,2)
(51,102,2)
(26,101,2)
(61,87,2)
(141,14,2)
(35,46,2)
(82,87,2)
(133,102,2)
(71,217,2)
(37,23,2)
(135,31,2)
(173,87,2)
(5,144,2)
(160,192,2)
(171,144,2)
(175,192,2)
(120,9,2)
(78,128,2)
(88,87,2)
(92,144,2)
(215,31,2)
(122,144,2)
(175,78,2)
(11,144,2)
(62,192,2)
(156,192,2)
(39,46,2)
(196,46,2)
(85,46,2)
(186,31,2)
(98,51,2)
(176,102,2)
(111,144,2)
(177,192,2)
(196,9,2)
(143,31,2)
(161,87,2)
(9,28,2)
(214,144,2)
(166,102,2)
(205,209,2)
(38,46,2)
(176,144,2)
(164,144,2)
(101,147,2)
(192,15,2)
(182,144,2)
(18,31,2)
(51,31,2)
(190,144,2)
(189,46,2)
(88,166,2)
(118,46,2)
(166,31,2)
(6,192,2)
(140,31,2)
(25,26,2)
(9,87,2)
(85,95,2)
(45,144,2)
(66,9,2)
(54,192,2)
(15,144,2)
(198,117,2)
(17,144,2)
(224,31,2)
(50,162,2)
(189,9,2)
(18,152,2)
(31,167,2)
(132,144,2)
(14,102,2)
(23,102,2)
(185,209,2)
(209,175,2)
(184,9,2)
(85,86,2)
(22,53,2)
(68,144,2)
(19,144,2)
(197,205,2)
(98,87,2)
(203,46,2)
(76,9,2)
(146,197,2)
(46,95,2)
(137,192,2)
(67,144,2)
(8,192,2)
(42,144,2)
(131,144,2)
(99,144,2)
(74,192,2)
(192,148,2)
-----------------------------------
(0,num_rx_ring)
(1,i)
(2,netdev_priv(ndev)
(3,ndev)
(4,priv)
(5,priv)
(6,q)
(7,q)
(8,desc)
(9,priv->rx_skb[q])
(10,tx_skb)
(11,priv->num_rx_ring[q])
(12,)
(13,struct net_device *ndev)
(14,priv->num_tx_desc)
(15,i = 0)
(16,parent)
(17,ring_size = sizeof(struct ravb_ex_rx_desc)
(18,priv->num_tx_ring[q])
(19,sizeof(struct ravb_ex_rx_desc)
(20,priv)
(21,rx_skb)
(22,priv->tx_skb[q])
(23,priv->rx_ring)
(24,if (priv->rx_ring[q])
(25,ring_size = sizeof(struct ravb_tx_desc)
(26,sizeof(struct ravb_tx_desc)
(27,DMA_FROM_DEVICE)
(28,priv->rx_skb)
(29,priv)
(30,num_rx_ring)
(31,priv->tx_ring[q])
(32,q)
(33,dev)
(34,rx_skb)
(35,i++)
(36,struct ravb_tx_desc)
(37,priv->rx_ring[q])
(38,i)
(39,rx_skb)
(40,q)
(41,)
(42,NULL)
(43,i)
(44,num_tx_ring)
(45,ndev->dev)
(46,i < priv->num_rx_ring[q])
(47,priv)
(48,NULL)
(49,priv->tx_ring[q] = NULL)
(50,sizeof(struct ravb_ex_rx_desc)
(51,priv->tx_ring)
(52,num_tx_desc)
(53,priv->tx_skb)
(54,priv->rx_ring[q][i])
(55,q)
(56,sizeof(struct ravb_tx_desc)
(57,dev)
(58,)
(59,i)
(60,priv->tx_align[q])
(61,priv->tx_align[q])
(62,rx_ring)
(63,parent)
(64,priv)
(65,NULL)
(66,q)
(67,rx_ring)
(68,ring_size)
(69,kfree(priv->rx_skb[q])
(70,for (i = 0; i < priv->num_rx_ring[q]; i++)
(71,priv->rx_skb[q])
(72,q)
(73,num_tx_desc)
(74,desc->dptr)
(75,priv->tx_align)
(76,priv)
(77,dev)
(78,ndev->dev.parent)
(79,tx_desc_dma)
(80,1)
(81,RX_BUF_SZ)
(82,priv->rx_desc_dma[q])
(83,priv)
(84,num_tx_desc)
(85,priv->rx_skb[q][i])
(86,priv->rx_skb[q])
(87,int q)
(88,priv->tx_ring[q])
(89,le32_to_cpu(desc->dptr)
(90,kfree(priv->tx_align[q])
(91,parent)
(92,priv)
(93,q)
(94,priv->tx_desc_dma)
(95,i = 0)
(96,q)
(97,priv)
(98,priv->tx_ring[q])
(99,ndev->dev.parent)
(100,RET)
(101,priv->num_tx_ring[q] * num_tx_desc + 1)
(102,*priv = netdev_priv(ndev)
(103,q)
(104,priv)
(105,priv)
(106,i)
(107,priv->tx_skb[q] = NULL)
(108,priv->rx_skb)
(109,priv->rx_ring[q] = NULL)
(110,NULL)
(111,dev)
(112,NULL)
(113,rx_ring)
(114,priv->rx_skb[q])
(115,if (priv->tx_ring[q])
(116,tx_ring)
(117,priv->tx_skb)
(118,dev_kfree_skb(priv->rx_skb[q][i])
(119,priv)
(120,priv->num_rx_ring)
(121,)
(122,priv)
(123,q)
(124,rx_skb)
(125,1)
(126,tx_ring)
(127,desc)
(128,ndev->dev)
(129,priv->num_rx_ring[q] + 1)
(130,*desc = &priv->rx_ring[q][i])
(131,i)
(132,priv)
(133,priv->rx_ring)
(134,desc)
(135,priv)
(136,q)
(137,i)
(138,priv->tx_align)
(139,kfree(priv->tx_skb[q])
(140,ndev)
(141,num_tx_desc = priv->num_tx_desc)
(142,)
(143,q)
(144,priv->rx_ring[q])
(145,ndev)
(146,dma_unmap_single(ndev->dev.parent,\n\\n\\t\\t\\t\\t\\t\\t le32_to_cpu(desc->dptr)
(147,priv->num_tx_ring[q] * num_tx_desc)
(148,priv->num_rx_ring[q])
(149,priv)
(150,q)
(151,i++)
(152,priv->num_tx_ring)
(153,desc->dptr)
(154,tx_align)
(155,priv)
(156,&priv->rx_ring[q][i])
(157,i)
(158,q)
(159,if (!dma_mapping_error(ndev->dev.parent,\n\\n\\t\\t\\t\\t\\t       le32_to_cpu(desc->dptr)
(160,q)
(161,priv->tx_desc_dma[q])
(162,struct ravb_ex_rx_desc)
(163,ndev)
(164,q)
(165,rx_desc_dma)
(166,priv->tx_ring)
(167,priv->tx_ring)
(168,q)
(169,ravb_tx_free(ndev, q, false)
(170,priv)
(171,ring_size)
(172,ring_size)
(173,priv->rx_ring[q])
(174,parent)
(175,dma_mapping_error(ndev->dev.parent,\n\\n\\t\\t\\t\\t\\t       le32_to_cpu(desc->dptr)
(176,priv->rx_desc_dma)
(177,i)
(178,num_tx_desc)
(179,priv->tx_align[q] = NULL)
(180,for (i = 0; i < priv->num_rx_ring[q]; i++)
(181,priv->rx_skb)
(182,dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],\n\\n\\t\\t\\t\\t  priv->rx_desc_dma[q])
(183,priv->rx_ring)
(184,0)
(185,le32_to_cpu(desc->dptr)
(186,ndev->dev)
(187,priv)
(188,ndev)
(189,priv->num_rx_ring[q])
(190,priv->num_rx_ring)
(191,priv)
(192,i < priv->num_rx_ring[q])
(193,q)
(194,desc)
(195,tx_align)
(196,num_rx_ring)
(197,ndev->dev.parent)
(198,priv->tx_skb[q])
(199,q)
(200,rx_ring)
(201,tx_skb)
(202,ndev->dev.parent)
(203,priv)
(204,priv->rx_skb[q] = NULL)
(205,ndev->dev)
(206,q)
(207,priv)
(208,dptr)
(209,!dma_mapping_error(ndev->dev.parent,\n\\n\\t\\t\\t\\t\\t       le32_to_cpu(desc->dptr)
(210,q)
(211,0)
(212,if (priv->rx_skb[q])
(213,priv->num_rx_ring)
(214,priv->rx_ring[q])
(215,ndev)
(216,ring_size)
(217,priv->rx_skb)
(218,tx_ring)
(219,dptr)
(220,priv->rx_ring)
(221,priv)
(222,ring_size)
(223,dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],\n\\n\\t\\t\\t\\t  priv->tx_desc_dma[q])
(224,false)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^