-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(5)
    {
    case 6:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Use a relatively small number */
        count = 20;
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
37,44
38,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
53,54
54,55
54,56
55,56
-----nextToken-----
2,4,8,10,14,16,18,21,25,26,27,28,32,33,34,36,39,43,45,49,50,51,52,56,57,58
-----computeFrom-----
12,13
12,14
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }
5
{    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number */        count = 20;        break;    }
case 6:
6
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
count = 20;
count = 20
count
count
20
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(2,29,0)
(26,15,0)
(27,21,0)
(7,21,0)
(6,25,0)
(25,21,0)
(8,19,0)
(22,21,0)
(17,29,0)
(20,26,0)
(18,25,0)
(31,17,0)
(4,15,0)
(18,30,0)
(1,29,0)
(0,30,0)
(9,18,0)
(25,3,0)
(11,15,0)
(28,3,0)
(19,29,0)
(3,25,0)
(24,15,0)
(10,30,0)
(13,15,0)
(30,15,0)
(16,29,0)
(12,29,0)
(18,29,0)
(10,0,1)
(0,23,1)
(9,5,1)
(16,19,1)
(1,17,1)
(14,1,1)
(18,30,1)
(26,20,1)
(5,11,1)
(30,10,1)
(19,8,1)
(18,25,1)
(13,26,1)
(20,23,1)
(31,18,1)
(3,28,1)
(25,3,1)
(23,25,1)
(5,13,1)
(11,30,1)
(28,6,1)
(18,9,1)
(17,31,1)
(8,5,1)
(14,16,1)
(18,25,2)
(11,23,2)
(1,5,2)
(16,5,2)
(17,5,2)
(19,5,2)
(13,23,2)
(26,23,2)
(18,30,2)
(18,5,2)
(10,23,2)
(8,5,2)
(30,23,2)
(20,23,2)
(0,23,2)
(25,3,2)
(9,5,2)
(31,5,2)
-----------------------------------
(0,count)
(1,break;)
(2,default:)
(3,-1)
(4,case 6:)
(5,7)
(6,count)
(7,switch(5)
(8,"Benign, fixed string")
(9,count)
(10,20)
(11,break;)
(12,case 7:)
(13,break;)
(14,RET)
(15,)
(16,break;)
(17,printLine("Sleep time possibly too long")
(18,SLEEP(count)
(19,printLine("Benign, fixed string")
(20,"Benign, fixed string")
(21,)
(22,count)
(23,5)
(24,default:)
(25,count = -1)
(26,printLine("Benign, fixed string")
(27,switch(7)
(28,1)
(29,)
(30,count = 20)
(31,"Sleep time possibly too long")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^