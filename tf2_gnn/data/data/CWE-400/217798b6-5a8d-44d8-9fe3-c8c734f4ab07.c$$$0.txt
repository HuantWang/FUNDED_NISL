-----label-----
0
-----code-----
static void goodG2B()
{
    twoIntsStruct * data;
    twoIntsStruct * *dataPtr1 = &data;
    twoIntsStruct * *dataPtr2 = &data;
    data = NULL;
    {
        twoIntsStruct * data = *dataPtr1;
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        *dataPtr1 = data;
    }
    {
        twoIntsStruct * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
68,70
70,71
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
78,80
79,80
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
93,94
94,95
94,96
95,96
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
105,106
107,108
109,110
109,111
110,111
111,112
111,113
112,113
114,115
114,116
114,117
117,118
118,119
119,120
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,69,73,74,80,81,82,83,89,90,91,92,96,100,101,106,108,113,115,116,120,121
-----computeFrom-----
38,39
38,40
56,57
56,58
68,69
68,70
76,77
76,78
85,86
85,87
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        twoIntsStruct * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        twoIntsStruct * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        twoIntsStruct * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        *dataPtr1 = data;    }
twoIntsStruct * data = *dataPtr1;
twoIntsStruct * data = *dataPtr1;
twoIntsStruct
twoIntsStruct
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
twoIntsStruct * data = *dataPtr2;
twoIntsStruct * data = *dataPtr2;
twoIntsStruct
twoIntsStruct
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(11,19,0)
(21,58,0)
(31,6,0)
(18,42,0)
(13,29,0)
(54,33,0)
(15,30,0)
(49,38,0)
(9,29,0)
(5,58,0)
(41,9,0)
(57,29,0)
(40,31,0)
(2,56,0)
(22,16,0)
(46,6,0)
(33,54,0)
(32,29,0)
(52,1,0)
(14,54,0)
(20,9,0)
(26,57,0)
(23,56,0)
(34,2,0)
(27,16,0)
(10,19,0)
(21,24,0)
(58,9,0)
(10,41,0)
(1,42,0)
(42,1,0)
(59,0,0)
(33,19,0)
(12,24,0)
(2,34,0)
(24,38,0)
(38,9,0)
(25,26,0)
(30,15,0)
(48,23,0)
(25,1,0)
(38,23,0)
(26,25,0)
(17,29,0)
(23,48,0)
(39,10,0)
(51,57,0)
(54,9,0)
(23,38,0)
(43,31,0)
(19,29,0)
(41,38,0)
(16,30,0)
(30,16,0)
(45,3,0)
(7,9,0)
(36,26,0)
(35,7,0)
(56,23,0)
(24,21,0)
(31,38,0)
(56,2,0)
(16,38,0)
(3,29,0)
(53,25,0)
(47,21,0)
(8,33,0)
(6,7,0)
(1,29,0)
(6,31,0)
(15,9,0)
(28,24,0)
(0,19,0)
(4,3,0)
(55,41,0)
(50,2,0)
(19,0,0)
(37,34,0)
(31,38,1)
(2,34,1)
(47,24,1)
(6,31,1)
(24,38,1)
(23,48,1)
(6,46,1)
(27,58,1)
(4,45,1)
(38,23,1)
(19,0,1)
(33,8,1)
(23,56,1)
(22,27,1)
(59,11,1)
(56,2,1)
(53,36,1)
(36,41,1)
(41,55,1)
(54,33,1)
(25,1,1)
(46,31,1)
(18,52,1)
(16,38,1)
(21,47,1)
(35,6,1)
(28,12,1)
(8,14,1)
(52,19,1)
(34,37,1)
(26,25,1)
(3,4,1)
(41,38,1)
(24,28,1)
(39,15,1)
(25,53,1)
(45,1,1)
(10,39,1)
(49,54,1)
(12,7,1)
(1,42,1)
(30,16,1)
(0,59,1)
(7,35,1)
(16,22,1)
(40,38,1)
(10,19,1)
(14,3,1)
(31,43,1)
(5,21,1)
(15,30,1)
(43,40,1)
(44,26,1)
(58,5,1)
(21,24,1)
(37,50,1)
(33,19,1)
(50,49,1)
(55,10,1)
(42,18,1)
(26,25,2)
(6,31,2)
(21,24,2)
(30,16,2)
(2,34,2)
(10,19,2)
(15,30,2)
(24,38,2)
(16,38,2)
(25,1,2)
(56,2,2)
(41,38,2)
(31,38,2)
(33,19,2)
(54,33,2)
(38,23,2)
(19,0,2)
(23,48,2)
(23,56,2)
(1,42,2)
-----------------------------------
(0,&data)
(1,* *dataPtr2 = &data)
(2,100*sizeof(twoIntsStruct)
(3,data = NULL)
(4,NULL)
(5,0)
(6,data[0].intOne)
(7,data[0].intOne = 0)
(8,dataPtr1)
(9,)
(10,*dataPtr1)
(11,dataPtr1)
(12,data)
(13,data)
(14,data)
(15,printStructLine(&data[0])
(16,data[0])
(17,dataPtr2)
(18,data)
(19,* *dataPtr1 = &data)
(20,data)
(21,data[0].intTwo)
(22,0)
(23,(twoIntsStruct *)
(24,data[0])
(25,*dataPtr2)
(26,* data = *dataPtr2)
(27,data)
(28,0)
(29,)
(30,&data[0])
(31,data[0])
(32,dataPtr1)
(33,*dataPtr1)
(34,sizeof(twoIntsStruct)
(35,0)
(36,data)
(37,twoIntsStruct)
(38,data = (twoIntsStruct *)
(39,dataPtr1)
(40,data)
(41,*dataPtr1 = data)
(42,&data)
(43,0)
(44,RET)
(45,data)
(46,intOne)
(47,intTwo)
(48,twoIntsStruct *)
(49,data)
(50,100)
(51,data)
(52,dataPtr2)
(53,dataPtr2)
(54,* data = *dataPtr1)
(55,data)
(56,ALLOCA(100*sizeof(twoIntsStruct)
(57,)
(58,data[0].intTwo = 0)
(59,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^