-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    CWE401_Memory_Leak__char_realloc_34_unionType myUnion;
    data = NULL;
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (char *)ALLOCA(100*sizeof(char));
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
43,44
43,45
43,46
44,45
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
67,70
70,71
71,72
71,73
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,48,52,54,59,60,62,66,68,69,73,74,75
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    char * data;    CWE401_Memory_Leak__char_realloc_34_unionType myUnion;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (char *)ALLOCA(100*sizeof(char));    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    char * data;    CWE401_Memory_Leak__char_realloc_34_unionType myUnion;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (char *)ALLOCA(100*sizeof(char));    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
CWE401_Memory_Leak__char_realloc_34_unionType myUnion;
CWE401_Memory_Leak__char_realloc_34_unionType myUnion;
CWE401_Memory_Leak__char_realloc_34_unionType
CWE401_Memory_Leak__char_realloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(5,24,0)
(3,0,0)
(24,4,0)
(26,1,0)
(6,15,0)
(2,24,0)
(13,1,0)
(26,5,0)
(2,31,0)
(9,23,0)
(25,10,0)
(29,11,0)
(19,5,0)
(8,1,0)
(16,31,0)
(20,18,0)
(5,1,0)
(30,16,0)
(24,2,0)
(18,5,0)
(23,1,0)
(27,11,0)
(22,0,0)
(31,16,0)
(3,23,0)
(11,1,0)
(10,1,0)
(0,3,0)
(15,18,0)
(10,5,0)
(14,26,0)
(24,5,0)
(31,2,0)
(18,1,0)
(4,24,0)
(12,0,0)
(32,15,0)
(21,3,0)
(28,26,0)
(17,31,0)
(15,32,1)
(12,22,1)
(14,28,1)
(26,5,1)
(25,26,1)
(20,15,1)
(10,5,1)
(30,17,1)
(26,14,1)
(10,25,1)
(24,4,1)
(18,20,1)
(5,24,1)
(11,29,1)
(21,18,1)
(22,21,1)
(32,6,1)
(18,5,1)
(29,27,1)
(7,3,1)
(16,30,1)
(3,0,1)
(28,5,1)
(0,12,1)
(2,31,1)
(24,2,1)
(19,11,1)
(17,19,1)
(6,10,1)
(31,16,1)
(5,24,2)
(18,5,2)
(24,2,2)
(24,4,2)
(26,5,2)
(10,5,2)
(3,0,2)
(31,16,2)
(2,31,2)
-----------------------------------
(0,myUnion.unionSecond)
(1,)
(2,ALLOCA(100*sizeof(char)
(3,* data = myUnion.unionSecond)
(4,char *)
(5,data = (char *)
(6,myUnion)
(7,RET)
(8,data)
(9,data)
(10,printLine(data)
(11,data = NULL)
(12,unionSecond)
(13,myUnion)
(14,"A String")
(15,myUnion.unionFirst)
(16,sizeof(char)
(17,100)
(18,myUnion.unionFirst = data)
(19,data)
(20,data)
(21,data)
(22,myUnion)
(23,)
(24,(char *)
(25,data)
(26,strcpy(data, "A String")
(27,data)
(28,data)
(29,NULL)
(30,char)
(31,100*sizeof(char)
(32,unionFirst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^