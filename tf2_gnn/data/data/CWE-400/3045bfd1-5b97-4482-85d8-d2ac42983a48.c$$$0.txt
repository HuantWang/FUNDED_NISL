-----label-----
1
-----code-----
void
kpsendsig(struct lwp *l, const ksiginfo_t *ksi, const sigset_t *mask)
{
	struct proc *p = l->l_proc;
	struct lwp *le, *li;
	siginfo_t *si;
	int f;

	if (p->p_flag & P_SA) {

		/* XXXUPSXXX What if not on sa_vp ? */

		f = l->l_flag & L_SA;
		l->l_flag &= ~L_SA;
		si = pool_get(&siginfo_pool, PR_WAITOK);
		si->_info = ksi->ksi_info;
		le = li = NULL;
		if (KSI_TRAP_P(ksi))
			le = l;
		else
			li = l;
		if (sa_upcall(l, SA_UPCALL_SIGNAL | SA_UPCALL_DEFER, le, li,
		    sizeof(*si), si) != 0) {
			pool_put(&siginfo_pool, si);
			if (KSI_TRAP_P(ksi))
				/* XXX What do we do here?? */;
		}
		l->l_flag |= f;
		return;
	}

	(*p->p_emul->e_sendsig)(ksi, mask);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
24,25
25,26
25,27
26,27
28,29
28,30
28,31
31,32
32,33
32,34
33,34
36,37
37,38
37,39
37,40
38,39
40,41
40,42
43,44
43,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
54,55
54,56
56,57
58,59
58,60
59,60
59,61
60,61
60,62
61,62
64,65
66,67
66,68
66,69
66,70
66,71
66,72
66,73
66,74
66,75
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
76,77
78,79
79,80
79,81
80,81
80,82
81,82
84,85
85,86
87,88
88,89
88,90
89,90
91,92
91,93
91,94
92,93
94,95
95,96
97,98
99,100
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
109,110
110,111
110,112
111,112
113,114
113,115
114,115
116,117
118,119
118,120
118,121
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
130,131
131,132
131,133
132,133
134,135
136,137
136,138
137,138
137,139
138,139
138,140
138,141
138,142
138,143
138,144
138,145
139,140
141,142
143,144
143,145
144,145
146,147
148,149
150,151
152,153
153,154
154,155
155,156
157,158
160,161
160,162
161,162
162,163
162,164
162,165
163,164
165,166
166,167
168,169
170,171
170,172
171,172
171,173
172,173
174,175
177,178
178,179
178,180
179,180
179,181
180,181
183,184
186,187
187,188
187,189
187,190
188,189
189,190
190,191
190,192
191,192
191,193
192,193
196,197
198,199
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,27,29,30,34,35,39,41,42,44,45,49,51,52,55,57,62,63,65,70,74,75,77,82,83,86,90,93,96,98,103,104,107,108,112,115,117,121,123,127,129,133,135,140,142,145,147,149,151,156,158,159,164,167,169,173,175,176,181,182,184,185,193,194,195,197,199
-----computeFrom-----
59,60
59,61
68,69
68,70
71,72
71,73
79,80
79,81
88,89
88,90
100,101
100,102
110,111
110,112
113,114
113,115
125,126
125,127
131,132
131,133
137,138
137,139
143,144
143,145
178,179
178,180
-----guardedBy-----
158,169
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;NullStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
voidkpsendsig(struct lwp *l, const ksiginfo_t *ksi, const sigset_t *mask){	struct proc *p = l->l_proc;	struct lwp *le, *li;	siginfo_t *si;	int f;	if (p->p_flag & P_SA) {		/* XXXUPSXXX What if not on sa_vp ? */		f = l->l_flag & L_SA;		l->l_flag &= ~L_SA;		si = pool_get(&siginfo_pool, PR_WAITOK);		si->_info = ksi->ksi_info;		le = li = NULL;		if (KSI_TRAP_P(ksi))			le = l;		else			li = l;		if (sa_upcall(l, SA_UPCALL_SIGNAL | SA_UPCALL_DEFER, le, li,		    sizeof(*si), si) != 0) {			pool_put(&siginfo_pool, si);			if (KSI_TRAP_P(ksi))				/* XXX What do we do here?? */;		}		l->l_flag |= f;		return;	}	(*p->p_emul->e_sendsig)(ksi, mask);}
void
kpsendsig(struct lwp *l, const ksiginfo_t *ksi, const sigset_t *mask)
kpsendsig
struct lwp *l
struct lwp
lwp
*l
*
l
const ksiginfo_t *ksi
const ksiginfo_t
ksiginfo_t
*ksi
*
ksi
const sigset_t *mask
const sigset_t
sigset_t
*mask
*
mask
{	struct proc *p = l->l_proc;	struct lwp *le, *li;	siginfo_t *si;	int f;	if (p->p_flag & P_SA) {		/* XXXUPSXXX What if not on sa_vp ? */		f = l->l_flag & L_SA;		l->l_flag &= ~L_SA;		si = pool_get(&siginfo_pool, PR_WAITOK);		si->_info = ksi->ksi_info;		le = li = NULL;		if (KSI_TRAP_P(ksi))			le = l;		else			li = l;		if (sa_upcall(l, SA_UPCALL_SIGNAL | SA_UPCALL_DEFER, le, li,		    sizeof(*si), si) != 0) {			pool_put(&siginfo_pool, si);			if (KSI_TRAP_P(ksi))				/* XXX What do we do here?? */;		}		l->l_flag |= f;		return;	}	(*p->p_emul->e_sendsig)(ksi, mask);}
struct proc *p = l->l_proc;
struct proc *p = l->l_proc;
struct proc
proc
*p = l->l_proc
*
p
= l->l_proc
l->l_proc
l
l
l_proc
struct lwp *le, *li;
struct lwp *le, *li;
struct lwp
lwp
*le
*
le
*li
*
li
siginfo_t *si;
siginfo_t *si;
siginfo_t
siginfo_t
*si
*
si
int f;
int f;
int
f
f
if (p->p_flag & P_SA) {		/* XXXUPSXXX What if not on sa_vp ? */		f = l->l_flag & L_SA;		l->l_flag &= ~L_SA;		si = pool_get(&siginfo_pool, PR_WAITOK);		si->_info = ksi->ksi_info;		le = li = NULL;		if (KSI_TRAP_P(ksi))			le = l;		else			li = l;		if (sa_upcall(l, SA_UPCALL_SIGNAL | SA_UPCALL_DEFER, le, li,		    sizeof(*si), si) != 0) {			pool_put(&siginfo_pool, si);			if (KSI_TRAP_P(ksi))				/* XXX What do we do here?? */;		}		l->l_flag |= f;		return;	}
p->p_flag & P_SA
p->p_flag
p
p
p_flag
P_SA
P_SA
{		/* XXXUPSXXX What if not on sa_vp ? */		f = l->l_flag & L_SA;		l->l_flag &= ~L_SA;		si = pool_get(&siginfo_pool, PR_WAITOK);		si->_info = ksi->ksi_info;		le = li = NULL;		if (KSI_TRAP_P(ksi))			le = l;		else			li = l;		if (sa_upcall(l, SA_UPCALL_SIGNAL | SA_UPCALL_DEFER, le, li,		    sizeof(*si), si) != 0) {			pool_put(&siginfo_pool, si);			if (KSI_TRAP_P(ksi))				/* XXX What do we do here?? */;		}		l->l_flag |= f;		return;	}
f = l->l_flag & L_SA;
f = l->l_flag & L_SA
f
f
l->l_flag & L_SA
l->l_flag
l
l
l_flag
L_SA
L_SA
l->l_flag &= ~L_SA;
l->l_flag &= ~L_SA
l->l_flag
l
l
l_flag
~L_SA
L_SA
L_SA
si = pool_get(&siginfo_pool, PR_WAITOK);
si = pool_get(&siginfo_pool, PR_WAITOK)
si
si
pool_get(&siginfo_pool, PR_WAITOK)
pool_get
pool_get
&siginfo_pool
siginfo_pool
siginfo_pool
PR_WAITOK
PR_WAITOK
si->_info = ksi->ksi_info;
si->_info = ksi->ksi_info
si->_info
si
si
_info
ksi->ksi_info
ksi
ksi
ksi_info
le = li = NULL;
le = li = NULL
le
le
li = NULL
li
li
NULL
NULL
if (KSI_TRAP_P(ksi))			le = l;		else			li = l;
KSI_TRAP_P(ksi)
KSI_TRAP_P
KSI_TRAP_P
ksi
ksi
le = l;
le = l
le
le
l
l
li = l;
li = l
li
li
l
l
if (sa_upcall(l, SA_UPCALL_SIGNAL | SA_UPCALL_DEFER, le, li,		    sizeof(*si), si) != 0) {			pool_put(&siginfo_pool, si);			if (KSI_TRAP_P(ksi))				/* XXX What do we do here?? */;		}
sa_upcall(l, SA_UPCALL_SIGNAL | SA_UPCALL_DEFER, le, li,		    sizeof(*si), si) != 0
sa_upcall(l, SA_UPCALL_SIGNAL | SA_UPCALL_DEFER, le, li,		    sizeof(*si), si)
sa_upcall
sa_upcall
l
l
SA_UPCALL_SIGNAL | SA_UPCALL_DEFER
SA_UPCALL_SIGNAL
SA_UPCALL_SIGNAL
SA_UPCALL_DEFER
SA_UPCALL_DEFER
le
le
li
li
sizeof(*si)
(*si)
*si
si
si
si
si
0
{			pool_put(&siginfo_pool, si);			if (KSI_TRAP_P(ksi))				/* XXX What do we do here?? */;		}
pool_put(&siginfo_pool, si);
pool_put(&siginfo_pool, si)
pool_put
pool_put
&siginfo_pool
siginfo_pool
siginfo_pool
si
si
if (KSI_TRAP_P(ksi))				/* XXX What do we do here?? */;
KSI_TRAP_P(ksi)
KSI_TRAP_P
KSI_TRAP_P
ksi
ksi
;
l->l_flag |= f;
l->l_flag |= f
l->l_flag
l
l
l_flag
f
f
return;
(*p->p_emul->e_sendsig)(ksi, mask);
(*p->p_emul->e_sendsig)(ksi, mask)
(*p->p_emul->e_sendsig)
*p->p_emul->e_sendsig
p->p_emul->e_sendsig
p->p_emul
p
p
p_emul
e_sendsig
ksi
ksi
mask
mask
-----joern-----
(55,23,0)
(48,74,0)
(49,66,0)
(45,77,0)
(42,46,0)
(15,89,0)
(12,8,0)
(63,56,0)
(37,23,0)
(77,45,0)
(36,43,0)
(1,45,0)
(88,76,0)
(26,79,0)
(46,56,0)
(61,55,0)
(50,55,0)
(17,74,0)
(80,48,0)
(55,56,0)
(74,48,0)
(51,16,0)
(16,51,0)
(68,43,0)
(48,11,0)
(16,11,0)
(14,11,0)
(84,14,0)
(28,48,0)
(0,18,0)
(20,51,0)
(55,8,0)
(83,18,0)
(75,21,0)
(2,15,0)
(14,43,0)
(86,10,0)
(41,79,0)
(47,11,0)
(51,20,0)
(57,79,0)
(40,79,0)
(9,37,0)
(88,16,0)
(74,63,0)
(38,69,0)
(53,70,0)
(70,69,0)
(84,16,0)
(71,16,0)
(65,83,0)
(54,63,0)
(33,63,0)
(23,37,0)
(25,23,0)
(73,7,0)
(13,69,0)
(78,88,0)
(27,79,0)
(76,88,0)
(69,56,0)
(43,89,0)
(28,84,0)
(4,55,0)
(82,18,0)
(45,70,0)
(26,89,0)
(52,55,0)
(66,7,0)
(7,66,0)
(69,70,0)
(91,89,0)
(76,55,0)
(43,14,0)
(63,74,0)
(21,56,0)
(18,56,0)
(60,46,0)
(18,83,0)
(87,20,0)
(90,45,0)
(55,21,0)
(83,11,0)
(46,28,0)
(29,19,0)
(66,35,0)
(3,77,0)
(22,58,0)
(58,55,0)
(6,79,0)
(55,37,0)
(26,24,0)
(55,19,0)
(72,28,0)
(67,79,0)
(85,26,0)
(39,23,0)
(10,11,0)
(19,56,0)
(31,21,0)
(66,16,0)
(32,35,0)
(55,76,0)
(59,26,0)
(30,11,0)
(55,58,0)
(28,11,0)
(37,11,0)
(8,55,0)
(62,58,0)
(55,16,0)
(5,91,0)
(81,84,0)
(64,19,0)
(44,51,0)
(34,84,0)
(70,79,0)
(48,74,1)
(52,76,1)
(82,48,1)
(18,0,1)
(14,43,1)
(55,56,1)
(26,89,1)
(85,59,1)
(17,63,1)
(55,21,1)
(43,68,1)
(60,42,1)
(68,36,1)
(74,17,1)
(18,56,1)
(55,76,1)
(8,12,1)
(80,77,1)
(69,13,1)
(81,16,1)
(4,19,1)
(83,18,1)
(49,7,1)
(28,48,1)
(9,14,1)
(70,69,1)
(31,15,1)
(64,15,1)
(75,31,1)
(21,75,1)
(43,89,1)
(0,82,1)
(5,66,1)
(36,84,1)
(78,61,1)
(1,90,1)
(44,20,1)
(45,1,1)
(42,91,1)
(3,45,1)
(22,62,1)
(88,78,1)
(19,56,1)
(29,64,1)
(51,44,1)
(65,18,1)
(42,8,1)
(8,55,1)
(15,2,1)
(63,54,1)
(62,4,1)
(77,3,1)
(54,33,1)
(72,46,1)
(34,81,1)
(88,16,1)
(90,70,1)
(91,89,1)
(84,16,1)
(86,10,1)
(2,37,1)
(13,38,1)
(76,88,1)
(83,65,1)
(19,29,1)
(37,23,1)
(55,52,1)
(87,71,1)
(28,72,1)
(77,45,1)
(66,7,1)
(84,34,1)
(51,20,1)
(63,56,1)
(20,87,1)
(58,22,1)
(45,70,1)
(66,49,1)
(26,85,1)
(33,80,1)
(28,84,1)
(10,28,1)
(46,60,1)
(46,56,1)
(7,73,1)
(74,63,1)
(71,83,1)
(55,16,1)
(59,77,1)
(21,56,1)
(86,26,1)
(23,25,1)
(15,89,1)
(73,8,1)
(69,56,1)
(16,51,1)
(12,55,1)
(55,37,1)
(61,50,1)
(39,9,1)
(38,53,1)
(55,23,1)
(55,19,1)
(66,16,1)
(4,21,1)
(55,58,1)
(91,5,1)
(26,24,1)
(25,39,1)
(50,58,1)
(19,56,2)
(18,77,2)
(73,8,2)
(26,89,2)
(76,88,2)
(83,77,2)
(78,77,2)
(48,77,2)
(26,24,2)
(55,21,2)
(55,56,2)
(52,77,2)
(46,77,2)
(12,77,2)
(72,77,2)
(66,8,2)
(44,77,2)
(59,77,2)
(9,77,2)
(21,56,2)
(91,89,2)
(91,8,2)
(20,77,2)
(34,77,2)
(0,77,2)
(7,8,2)
(18,56,2)
(14,43,2)
(22,77,2)
(74,63,2)
(68,77,2)
(82,77,2)
(66,7,2)
(42,77,2)
(28,77,2)
(28,84,2)
(69,56,2)
(46,56,2)
(81,77,2)
(23,77,2)
(37,23,2)
(43,89,2)
(21,15,2)
(31,15,2)
(17,77,2)
(84,77,2)
(55,58,2)
(62,77,2)
(15,77,2)
(76,77,2)
(77,45,2)
(15,89,2)
(58,77,2)
(16,51,2)
(49,8,2)
(8,55,2)
(74,77,2)
(84,16,2)
(61,77,2)
(4,77,2)
(88,77,2)
(43,77,2)
(39,77,2)
(5,8,2)
(83,18,2)
(64,15,2)
(29,15,2)
(55,37,2)
(71,77,2)
(25,77,2)
(55,76,2)
(63,77,2)
(36,77,2)
(2,77,2)
(87,77,2)
(54,77,2)
(33,77,2)
(65,77,2)
(51,20,2)
(55,16,2)
(14,77,2)
(55,77,2)
(28,48,2)
(10,77,2)
(80,77,2)
(86,10,2)
(88,16,2)
(16,77,2)
(45,70,2)
(37,77,2)
(19,15,2)
(51,77,2)
(63,56,2)
(70,69,2)
(48,74,2)
(85,77,2)
(8,77,2)
(55,23,2)
(60,77,2)
(66,16,2)
(26,77,2)
(75,15,2)
(55,19,2)
(50,77,2)
-----------------------------------
(0,l_flag)
(1,p_flag)
(2,ksi)
(3,P_SA)
(4,l)
(5,ksi)
(6,f)
(7,&siginfo_pool)
(8,sa_upcall(l, SA_UPCALL_SIGNAL | SA_UPCALL_DEFER, le, li,\n\\n\\t\\t    sizeof(*si)
(9,le)
(10,return;)
(11,)
(12,0)
(13,l_proc)
(14,si->_info = ksi->ksi_info)
(15,KSI_TRAP_P(ksi)
(16,si = pool_get(&siginfo_pool, PR_WAITOK)
(17,L_SA)
(18,l->l_flag)
(19,le = l)
(20,&siginfo_pool)
(21,li = l)
(22,SA_UPCALL_DEFER)
(23,li = NULL)
(24,const sigset_t *mask)
(25,NULL)
(26,(*p->p_emul->e_sendsig)
(27,si)
(28,l->l_flag |= f)
(29,l)
(30,if (KSI_TRAP_P(ksi)
(31,li)
(32,if (KSI_TRAP_P(ksi)
(33,l)
(34,_info)
(35,)
(36,ksi)
(37,le = li = NULL)
(38,l)
(39,li)
(40,le)
(41,li)
(42,l)
(43,ksi->ksi_info)
(44,PR_WAITOK)
(45,p->p_flag)
(46,l->l_flag)
(47,if (sa_upcall(l, SA_UPCALL_SIGNAL | SA_UPCALL_DEFER, le, li,\n\\n\\t\\t    sizeof(*si)
(48,f = l->l_flag & L_SA)
(49,si)
(50,le)
(51,pool_get(&siginfo_pool, PR_WAITOK)
(52,si)
(53,p)
(54,l_flag)
(55,sa_upcall(l, SA_UPCALL_SIGNAL | SA_UPCALL_DEFER, le, li,\n\\n\\t\\t    sizeof(*si)
(56,struct lwp *l)
(57,if (p->p_flag & P_SA)
(58,SA_UPCALL_SIGNAL | SA_UPCALL_DEFER)
(59,ksi)
(60,l_flag)
(61,li)
(62,SA_UPCALL_SIGNAL)
(63,l->l_flag)
(64,le)
(65,~L_SA)
(66,pool_put(&siginfo_pool, si)
(67,p)
(68,ksi_info)
(69,l->l_proc)
(70,*p = l->l_proc)
(71,si)
(72,f)
(73,siginfo_pool)
(74,l->l_flag & L_SA)
(75,l)
(76,sizeof(*si)
(77,p->p_flag & P_SA)
(78,si)
(79,)
(80,f)
(81,si)
(82,l)
(83,l->l_flag &= ~L_SA)
(84,si->_info)
(85,mask)
(86,RET)
(87,siginfo_pool)
(88,*si)
(89,const ksiginfo_t *ksi)
(90,p)
(91,KSI_TRAP_P(ksi)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^