-----label-----
0
-----code-----
static int recv_data(int fd, uint8_t *buf, int len, bool oneshot, struct timeval *timeout)
{
	int ret = 0;
	int rcvd = 0;
	int flags = MSG_DONTWAIT;

#ifdef MSG_NOSIGNAL
	flags |= MSG_NOSIGNAL;
#endif

	while (rcvd < len) {
		/* Receive data. */
		ret = recv(fd, buf + rcvd, len - rcvd, flags);
		if (ret > 0) {
			rcvd += ret;
			/* One-shot recv() */
			if (oneshot) {
				return ret;
			} else {
				continue;
			}
		}
		/* Check for disconnected socket. */
		if (ret == 0) {
			return KNOT_ECONNREFUSED;
		}

		/* Check for no data available. */
		if (errno == EAGAIN || errno == EINTR) {
			/* Continue only if timeout didn't expire. */
			ret = wait_for_data(fd, timeout);
			if (ret) {
				continue;
			} else {
				return KNOT_ETIMEOUT;
			}
		} else {
			return KNOT_ECONN;
		}
	}

	return rcvd;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
7,8
9,10
9,11
10,11
12,13
12,14
15,16
15,17
17,18
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
29,30
29,31
29,32
29,33
29,34
30,31
31,32
31,33
33,34
33,35
35,36
37,38
38,39
38,40
40,41
40,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
58,60
58,61
58,62
59,60
60,61
60,62
61,62
63,64
63,65
63,66
63,67
63,68
64,65
66,67
68,69
68,70
69,70
71,72
73,74
73,75
74,75
76,77
78,79
80,81
80,82
81,82
81,83
82,83
85,86
85,87
86,87
87,88
87,89
88,89
90,91
92,93
92,94
92,95
93,94
95,96
96,97
97,98
99,100
101,102
101,103
102,103
102,104
103,104
106,107
107,108
108,109
110,111
110,112
110,113
111,112
111,113
112,113
112,114
113,114
115,116
117,118
117,119
118,119
120,121
122,123
122,124
123,124
124,125
124,126
125,126
127,128
127,129
127,130
128,129
130,131
132,133
134,135
134,136
134,137
135,136
137,138
139,140
140,141
141,142
143,144
144,145
145,146
147,148
148,149
-----nextToken-----
2,4,6,8,11,13,14,16,18,20,22,25,27,28,32,34,36,39,41,43,46,48,51,55,57,62,65,67,70,72,75,77,79,83,84,89,91,94,98,100,104,105,109,114,116,119,121,126,129,131,133,136,138,142,146,149
-----computeFrom-----
53,54
53,55
60,61
60,62
68,69
68,70
73,74
73,75
81,82
81,83
87,88
87,89
102,103
102,104
111,112
111,113
112,113
112,114
117,118
117,119
124,125
124,126
-----guardedBy-----
83,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;CompoundStatement;ContinueStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ContinueStatement;CompoundStatement;ReturnStatement;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int recv_data(int fd, uint8_t *buf, int len, bool oneshot, struct timeval *timeout){	int ret = 0;	int rcvd = 0;	int flags = MSG_DONTWAIT;#ifdef MSG_NOSIGNAL	flags |= MSG_NOSIGNAL;#endif	while (rcvd < len) {		/* Receive data. */		ret = recv(fd, buf + rcvd, len - rcvd, flags);		if (ret > 0) {			rcvd += ret;			/* One-shot recv() */			if (oneshot) {				return ret;			} else {				continue;			}		}		/* Check for disconnected socket. */		if (ret == 0) {			return KNOT_ECONNREFUSED;		}		/* Check for no data available. */		if (errno == EAGAIN || errno == EINTR) {			/* Continue only if timeout didn't expire. */			ret = wait_for_data(fd, timeout);			if (ret) {				continue;			} else {				return KNOT_ETIMEOUT;			}		} else {			return KNOT_ECONN;		}	}	return rcvd;}
static int
recv_data(int fd, uint8_t *buf, int len, bool oneshot, struct timeval *timeout)
recv_data
int fd
int
fd
fd
uint8_t *buf
uint8_t
uint8_t
*buf
*
buf
int len
int
len
len
bool oneshot
bool
oneshot
oneshot
struct timeval *timeout
struct timeval
timeval
*timeout
*
timeout
{	int ret = 0;	int rcvd = 0;	int flags = MSG_DONTWAIT;#ifdef MSG_NOSIGNAL	flags |= MSG_NOSIGNAL;#endif	while (rcvd < len) {		/* Receive data. */		ret = recv(fd, buf + rcvd, len - rcvd, flags);		if (ret > 0) {			rcvd += ret;			/* One-shot recv() */			if (oneshot) {				return ret;			} else {				continue;			}		}		/* Check for disconnected socket. */		if (ret == 0) {			return KNOT_ECONNREFUSED;		}		/* Check for no data available. */		if (errno == EAGAIN || errno == EINTR) {			/* Continue only if timeout didn't expire. */			ret = wait_for_data(fd, timeout);			if (ret) {				continue;			} else {				return KNOT_ETIMEOUT;			}		} else {			return KNOT_ECONN;		}	}	return rcvd;}
int ret = 0;
int ret = 0;
int
ret = 0
ret
= 0
0
int rcvd = 0;
int rcvd = 0;
int
rcvd = 0
rcvd
= 0
0
int flags = MSG_DONTWAIT;
int flags = MSG_DONTWAIT;
int
flags = MSG_DONTWAIT
flags
= MSG_DONTWAIT
MSG_DONTWAIT
MSG_DONTWAIT
while (rcvd < len) {		/* Receive data. */		ret = recv(fd, buf + rcvd, len - rcvd, flags);		if (ret > 0) {			rcvd += ret;			/* One-shot recv() */			if (oneshot) {				return ret;			} else {				continue;			}		}		/* Check for disconnected socket. */		if (ret == 0) {			return KNOT_ECONNREFUSED;		}		/* Check for no data available. */		if (errno == EAGAIN || errno == EINTR) {			/* Continue only if timeout didn't expire. */			ret = wait_for_data(fd, timeout);			if (ret) {				continue;			} else {				return KNOT_ETIMEOUT;			}		} else {			return KNOT_ECONN;		}	}
rcvd < len
rcvd
rcvd
len
len
{		/* Receive data. */		ret = recv(fd, buf + rcvd, len - rcvd, flags);		if (ret > 0) {			rcvd += ret;			/* One-shot recv() */			if (oneshot) {				return ret;			} else {				continue;			}		}		/* Check for disconnected socket. */		if (ret == 0) {			return KNOT_ECONNREFUSED;		}		/* Check for no data available. */		if (errno == EAGAIN || errno == EINTR) {			/* Continue only if timeout didn't expire. */			ret = wait_for_data(fd, timeout);			if (ret) {				continue;			} else {				return KNOT_ETIMEOUT;			}		} else {			return KNOT_ECONN;		}	}
ret = recv(fd, buf + rcvd, len - rcvd, flags);
ret = recv(fd, buf + rcvd, len - rcvd, flags)
ret
ret
recv(fd, buf + rcvd, len - rcvd, flags)
recv
recv
fd
fd
buf + rcvd
buf
buf
rcvd
rcvd
len - rcvd
len
len
rcvd
rcvd
flags
flags
if (ret > 0) {			rcvd += ret;			/* One-shot recv() */			if (oneshot) {				return ret;			} else {				continue;			}		}
ret > 0
ret
ret
0
{			rcvd += ret;			/* One-shot recv() */			if (oneshot) {				return ret;			} else {				continue;			}		}
rcvd += ret;
rcvd += ret
rcvd
rcvd
ret
ret
if (oneshot) {				return ret;			} else {				continue;			}
oneshot
oneshot
{				return ret;			}
return ret;
ret
ret
{				continue;			}
continue;
if (ret == 0) {			return KNOT_ECONNREFUSED;		}
ret == 0
ret
ret
0
{			return KNOT_ECONNREFUSED;		}
return KNOT_ECONNREFUSED;
KNOT_ECONNREFUSED
KNOT_ECONNREFUSED
if (errno == EAGAIN || errno == EINTR) {			/* Continue only if timeout didn't expire. */			ret = wait_for_data(fd, timeout);			if (ret) {				continue;			} else {				return KNOT_ETIMEOUT;			}		} else {			return KNOT_ECONN;		}
errno == EAGAIN || errno == EINTR
errno == EAGAIN
errno
errno
EAGAIN
EAGAIN
errno == EINTR
errno
errno
EINTR
EINTR
{			/* Continue only if timeout didn't expire. */			ret = wait_for_data(fd, timeout);			if (ret) {				continue;			} else {				return KNOT_ETIMEOUT;			}		}
ret = wait_for_data(fd, timeout);
ret = wait_for_data(fd, timeout)
ret
ret
wait_for_data(fd, timeout)
wait_for_data
wait_for_data
fd
fd
timeout
timeout
if (ret) {				continue;			} else {				return KNOT_ETIMEOUT;			}
ret
ret
{				continue;			}
continue;
{				return KNOT_ETIMEOUT;			}
return KNOT_ETIMEOUT;
KNOT_ETIMEOUT
KNOT_ETIMEOUT
{			return KNOT_ECONN;		}
return KNOT_ECONN;
KNOT_ECONN
KNOT_ECONN
return rcvd;
rcvd
rcvd
-----joern-----
(61,63,0)
(68,76,0)
(23,32,0)
(24,27,0)
(3,5,0)
(7,69,0)
(28,73,0)
(70,36,0)
(72,35,0)
(1,46,0)
(61,56,0)
(68,68,0)
(60,79,0)
(84,39,0)
(69,79,0)
(62,22,0)
(28,55,0)
(39,56,0)
(40,61,0)
(73,32,0)
(53,79,0)
(47,16,0)
(75,76,0)
(38,83,0)
(3,68,0)
(78,61,0)
(14,45,0)
(68,48,0)
(27,56,0)
(41,69,0)
(52,79,0)
(65,6,0)
(21,36,0)
(22,76,0)
(16,61,0)
(16,5,0)
(33,54,0)
(61,54,0)
(3,76,0)
(11,31,0)
(0,28,0)
(16,76,0)
(82,3,0)
(22,44,0)
(83,38,0)
(16,68,0)
(34,74,0)
(25,48,0)
(29,28,0)
(14,80,0)
(26,6,0)
(36,79,0)
(12,58,0)
(56,61,0)
(31,76,0)
(20,74,0)
(8,83,0)
(42,73,0)
(14,31,0)
(30,39,0)
(59,76,0)
(28,63,0)
(74,38,0)
(45,51,0)
(43,27,0)
(15,68,0)
(9,16,0)
(14,35,0)
(54,79,0)
(67,68,0)
(18,80,0)
(10,54,0)
(73,28,0)
(56,6,0)
(76,79,0)
(38,74,0)
(81,56,0)
(22,61,0)
(61,22,0)
(31,79,0)
(77,22,0)
(71,83,0)
(80,66,0)
(4,6,0)
(19,79,0)
(68,56,0)
(37,3,0)
(61,16,0)
(35,49,0)
(13,57,0)
(58,64,0)
(22,68,0)
(31,68,0)
(54,69,0)
(50,45,0)
(80,56,0)
(14,58,0)
(81,3,1)
(41,76,1)
(39,84,1)
(31,11,1)
(40,81,1)
(39,56,1)
(34,20,1)
(14,31,1)
(2,68,1)
(84,30,1)
(37,54,1)
(38,83,1)
(67,15,1)
(3,76,1)
(61,22,1)
(28,63,1)
(7,41,1)
(68,56,1)
(30,56,1)
(56,61,1)
(16,68,1)
(47,9,1)
(13,2,1)
(31,68,1)
(1,17,1)
(83,8,1)
(27,24,1)
(33,69,1)
(16,5,1)
(69,7,1)
(73,28,1)
(38,74,1)
(50,17,1)
(11,3,1)
(61,63,1)
(37,13,1)
(61,16,1)
(8,71,1)
(16,76,1)
(14,45,1)
(59,36,1)
(3,5,1)
(36,21,1)
(22,44,1)
(42,38,1)
(61,78,1)
(22,68,1)
(14,58,1)
(37,1,1)
(54,10,1)
(0,42,1)
(54,69,1)
(22,76,1)
(22,62,1)
(12,38,1)
(72,27,1)
(75,59,1)
(15,39,1)
(29,0,1)
(24,43,1)
(14,80,1)
(31,76,1)
(68,67,1)
(3,82,1)
(58,12,1)
(18,2,1)
(68,68,1)
(80,56,1)
(9,22,1)
(76,75,1)
(3,68,1)
(43,39,1)
(74,34,1)
(27,56,1)
(20,83,1)
(10,33,1)
(62,77,1)
(14,35,1)
(45,50,1)
(16,47,1)
(78,16,1)
(21,70,1)
(80,18,1)
(77,40,1)
(61,54,1)
(71,27,1)
(68,76,1)
(28,55,1)
(28,29,1)
(82,37,1)
(35,72,1)
(17,73,1)
(56,3,2)
(74,83,2)
(82,2,2)
(45,17,2)
(61,16,2)
(82,17,2)
(39,56,2)
(35,27,2)
(22,44,2)
(61,54,2)
(73,28,2)
(31,3,2)
(28,63,2)
(2,39,2)
(81,3,2)
(27,39,2)
(22,68,2)
(22,76,2)
(40,3,2)
(77,3,2)
(24,39,2)
(17,38,2)
(83,27,2)
(68,68,2)
(31,68,2)
(39,3,2)
(38,27,2)
(68,76,2)
(73,38,2)
(3,2,2)
(18,2,2)
(3,76,2)
(14,35,2)
(22,3,2)
(8,27,2)
(68,39,2)
(12,38,2)
(68,56,2)
(14,31,2)
(38,74,2)
(31,76,2)
(13,2,2)
(20,83,2)
(58,38,2)
(16,68,2)
(61,63,2)
(30,3,2)
(15,39,2)
(43,39,2)
(80,2,2)
(27,56,2)
(61,22,2)
(54,69,2)
(38,83,2)
(28,55,2)
(29,38,2)
(80,56,2)
(16,76,2)
(72,27,2)
(9,3,2)
(14,45,2)
(37,2,2)
(62,3,2)
(16,5,2)
(3,68,2)
(3,17,2)
(78,3,2)
(47,3,2)
(61,3,2)
(3,5,2)
(14,80,2)
(67,39,2)
(34,83,2)
(84,3,2)
(71,27,2)
(42,38,2)
(37,17,2)
(56,61,2)
(1,17,2)
(14,58,2)
(0,38,2)
(11,3,2)
(16,3,2)
(50,17,2)
(28,38,2)
-----------------------------------
(0,fd)
(1,continue;)
(2,oneshot)
(3,rcvd < len)
(4,if (ret == 0)
(5,int len)
(6,)
(7,MSG_DONTWAIT)
(8,EAGAIN)
(9,len)
(10,MSG_NOSIGNAL)
(11,rcvd)
(12,KNOT_ECONN)
(13,continue;)
(14,RET)
(15,rcvd)
(16,len - rcvd)
(17,ret)
(18,ret)
(19,rcvd)
(20,errno)
(21,0)
(22,buf + rcvd)
(23,if (ret)
(24,0)
(25,if (oneshot)
(26,if (errno == EAGAIN || errno == EINTR)
(27,ret == 0)
(28,wait_for_data(fd, timeout)
(29,timeout)
(30,ret)
(31,return rcvd;)
(32,)
(33,flags)
(34,EINTR)
(35,return KNOT_ECONNREFUSED;)
(36,ret = 0)
(37,rcvd)
(38,errno == EAGAIN || errno == EINTR)
(39,ret > 0)
(40,fd)
(41,flags)
(42,ret)
(43,ret)
(44,uint8_t *buf)
(45,return KNOT_ETIMEOUT;)
(46,)
(47,rcvd)
(48,)
(49,)
(50,KNOT_ETIMEOUT)
(51,)
(52,ret)
(53,while (rcvd < len)
(54,flags |= MSG_NOSIGNAL)
(55,struct timeval *timeout)
(56,ret = recv(fd, buf + rcvd, len - rcvd, flags)
(57,)
(58,return KNOT_ECONN;)
(59,rcvd)
(60,flags)
(61,recv(fd, buf + rcvd, len - rcvd, flags)
(62,rcvd)
(63,int fd)
(64,)
(65,if (ret > 0)
(66,)
(67,ret)
(68,rcvd += ret)
(69,flags = MSG_DONTWAIT)
(70,ret)
(71,errno)
(72,KNOT_ECONNREFUSED)
(73,ret = wait_for_data(fd, timeout)
(74,errno == EINTR)
(75,0)
(76,rcvd = 0)
(77,buf)
(78,flags)
(79,)
(80,return ret;)
(81,ret)
(82,len)
(83,errno == EAGAIN)
(84,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^