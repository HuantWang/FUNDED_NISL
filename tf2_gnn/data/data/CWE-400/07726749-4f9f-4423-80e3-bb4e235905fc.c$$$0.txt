-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(globalReturnsTrue())
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
40,41
42,43
42,44
44,45
46,47
46,48
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
56,57
57,58
57,59
57,60
57,61
58,59
59,60
59,61
60,61
63,64
63,65
64,65
66,67
66,68
67,68
67,69
68,69
71,72
73,74
74,75
76,77
77,78
78,79
78,80
79,80
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,35,41,43,45,50,51,54,55,61,62,65,69,70,72,75,80,81
-----computeFrom-----
12,13
12,14
47,48
47,49
48,49
48,50
52,53
52,54
59,60
59,61
63,64
63,65
-----guardedBy-----
54,72
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalReturnsTrue())    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalReturnsTrue())    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(globalReturnsTrue())    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(30,9,0)
(30,32,0)
(8,15,0)
(10,45,0)
(31,9,0)
(13,44,0)
(28,11,0)
(2,5,0)
(18,32,0)
(39,27,0)
(24,34,0)
(32,30,0)
(8,19,0)
(1,12,0)
(12,9,0)
(37,39,0)
(14,9,0)
(43,28,0)
(29,41,0)
(42,43,0)
(44,10,0)
(19,8,0)
(19,41,0)
(3,8,0)
(21,11,0)
(11,28,0)
(22,11,0)
(11,41,0)
(16,8,0)
(36,43,0)
(41,33,0)
(26,10,0)
(25,30,0)
(38,33,0)
(4,19,0)
(32,41,0)
(34,41,0)
(41,34,0)
(6,44,0)
(32,18,0)
(20,10,0)
(7,33,0)
(43,41,0)
(23,32,0)
(0,33,0)
(28,43,0)
(42,36,1)
(21,22,1)
(37,30,1)
(31,14,1)
(22,43,1)
(39,37,1)
(6,13,1)
(9,31,1)
(14,28,1)
(41,34,1)
(4,3,1)
(32,41,1)
(19,4,1)
(28,43,1)
(25,9,1)
(11,41,1)
(19,41,1)
(17,35,1)
(40,30,1)
(17,8,1)
(34,24,1)
(43,42,1)
(40,17,1)
(30,9,1)
(12,9,1)
(24,29,1)
(11,21,1)
(32,23,1)
(3,16,1)
(23,25,1)
(25,12,1)
(43,41,1)
(40,28,1)
(28,11,1)
(35,41,1)
(32,18,1)
(8,19,1)
(13,17,1)
(1,39,1)
(44,6,1)
(36,44,1)
(16,35,1)
(12,1,1)
(30,32,1)
(32,41,2)
(32,30,2)
(9,28,2)
(11,41,2)
(8,35,2)
(14,28,2)
(23,28,2)
(3,35,2)
(4,35,2)
(16,35,2)
(30,32,2)
(37,30,2)
(43,17,2)
(28,43,2)
(23,30,2)
(12,30,2)
(6,17,2)
(44,17,2)
(41,34,2)
(39,30,2)
(43,41,2)
(30,28,2)
(30,30,2)
(11,43,2)
(19,41,2)
(19,35,2)
(22,43,2)
(32,18,2)
(1,30,2)
(25,28,2)
(31,28,2)
(42,17,2)
(32,28,2)
(8,19,2)
(21,43,2)
(28,11,2)
(13,17,2)
(36,17,2)
(30,9,2)
(25,30,2)
(28,17,2)
(12,9,2)
-----------------------------------
(0,if(globalReturnsTrue()
(1,i)
(2,for (i = 0; i < (size_t)
(3,"%d")
(4,count)
(5,)
(6,0)
(7,if(globalReturnsTrue()
(8,fscanf(stdin, "%d", &count)
(9,i = 0)
(10,)
(11,count <= 20)
(12,i++)
(13,i)
(14,i)
(15,)
(16,stdin)
(17,globalReturnsTrue()
(18,size_t)
(19,&count)
(20,if (count > 0 && count <= 20)
(21,20)
(22,count)
(23,count)
(24,1)
(25,i)
(26,i)
(27,)
(28,count > 0 && count <= 20)
(29,count)
(30,i < (size_t)
(31,0)
(32,(size_t)
(33,)
(34,-1)
(35,globalReturnsTrue()
(36,count)
(37,"Hello")
(38,count)
(39,printLine("Hello")
(40,RET)
(41,count = -1)
(42,0)
(43,count > 0)
(44,i = 0)
(45,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^