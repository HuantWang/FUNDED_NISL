-----label-----
0
-----code-----
static void goodG2B2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalTrue)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
45,47
46,47
46,48
47,48
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,48,49,50,51,57,58,59,60,64,68,70,74,75,78,80
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    struct _twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    struct _twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalTrue
globalTrue
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,11,0)
(20,16,0)
(33,22,0)
(34,0,0)
(30,22,0)
(21,30,0)
(22,31,0)
(16,18,0)
(7,26,0)
(38,32,0)
(31,25,0)
(9,26,0)
(26,22,0)
(13,2,0)
(0,27,0)
(7,0,0)
(35,22,0)
(0,34,0)
(31,22,0)
(10,25,0)
(16,30,0)
(28,40,0)
(3,33,0)
(33,19,0)
(10,39,0)
(27,11,0)
(4,32,0)
(22,11,0)
(40,32,0)
(39,29,0)
(26,7,0)
(15,10,0)
(24,18,0)
(36,40,0)
(30,16,0)
(37,30,0)
(19,2,0)
(25,10,0)
(19,33,0)
(29,39,0)
(14,19,0)
(6,31,0)
(31,6,0)
(17,26,0)
(25,31,0)
(8,33,0)
(0,7,0)
(18,11,0)
(27,0,0)
(39,10,0)
(1,32,0)
(40,36,1)
(33,8,1)
(16,20,1)
(12,23,1)
(37,22,1)
(13,19,1)
(5,40,1)
(23,5,1)
(16,30,1)
(21,37,1)
(33,22,1)
(15,35,1)
(39,29,1)
(31,6,1)
(26,22,1)
(23,27,1)
(35,5,1)
(39,15,1)
(8,3,1)
(18,24,1)
(19,33,1)
(0,34,1)
(30,22,1)
(14,33,1)
(17,9,1)
(24,16,1)
(25,10,1)
(22,31,1)
(3,18,1)
(2,13,1)
(19,14,1)
(36,28,1)
(26,17,1)
(9,2,1)
(30,21,1)
(31,25,1)
(20,30,1)
(10,39,1)
(27,0,1)
(0,7,1)
(7,26,1)
(17,5,2)
(16,30,2)
(16,5,2)
(10,5,2)
(10,39,2)
(14,5,2)
(2,5,2)
(26,22,2)
(22,5,2)
(39,29,2)
(35,5,2)
(7,5,2)
(8,5,2)
(30,22,2)
(18,5,2)
(33,22,2)
(33,5,2)
(0,7,2)
(21,5,2)
(9,5,2)
(7,26,2)
(25,10,2)
(30,5,2)
(19,5,2)
(19,33,2)
(27,0,2)
(31,25,2)
(22,31,2)
(13,5,2)
(0,5,2)
(31,5,2)
(37,5,2)
(20,5,2)
(15,5,2)
(0,34,2)
(39,5,2)
(31,6,2)
(26,5,2)
(25,5,2)
(27,5,2)
(24,5,2)
(3,5,2)
-----------------------------------
(0,(twoIntsStruct *)
(1,if(globalTrue)
(2,data[0].intTwo = 0)
(3,data)
(4,data)
(5,globalTrue)
(6,struct _twoIntsStruct *)
(7,&data[0])
(8,0)
(9,data)
(10,100*sizeof(struct _twoIntsStruct)
(11,)
(12,RET)
(13,0)
(14,intTwo)
(15,100)
(16,data[0].intOne)
(17,0)
(18,data[0].intOne = 0)
(19,data[0].intTwo)
(20,intOne)
(21,0)
(22,data = (struct _twoIntsStruct *)
(23,globalTrue)
(24,0)
(25,ALLOCA(100*sizeof(struct _twoIntsStruct)
(26,data[0])
(27,printStructLine((twoIntsStruct *)
(28,data)
(29,struct _twoIntsStruct)
(30,data[0])
(31,(struct _twoIntsStruct *)
(32,)
(33,data[0])
(34,twoIntsStruct *)
(35,data)
(36,NULL)
(37,data)
(38,if(globalTrue)
(39,sizeof(struct _twoIntsStruct)
(40,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^