-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_63b_goodB2GSink(size_t * dataPtr)
{
    size_t data = *dataPtr;
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
40,41
43,44
43,45
43,46
43,47
43,48
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
56,58
57,58
59,60
60,61
60,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
98,99
98,100
99,100
-----nextToken-----
2,4,7,9,10,15,17,21,25,27,28,33,36,38,41,42,47,50,52,55,58,61,62,66,68,73,75,79,81,83,87,89,93,95,100,101
-----computeFrom-----
30,31
30,32
31,32
31,33
39,40
39,41
45,46
45,47
56,57
56,58
64,65
64,66
-----guardedBy-----
38,83
41,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_63b_goodB2GSink(size_t * dataPtr){    size_t data = *dataPtr;    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_63b_goodB2GSink(size_t * dataPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_63b_goodB2GSink
size_t * dataPtr
size_t
size_t
* dataPtr
*
dataPtr
{    size_t data = *dataPtr;    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data = *dataPtr;
size_t data = *dataPtr;
size_t
size_t
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(19,16,0)
(42,34,0)
(2,8,0)
(10,6,0)
(20,0,0)
(1,34,0)
(36,35,0)
(10,35,0)
(25,8,0)
(40,28,0)
(4,38,0)
(32,28,0)
(22,2,0)
(21,39,0)
(31,28,0)
(41,40,0)
(46,31,0)
(12,43,0)
(38,42,0)
(8,10,0)
(25,0,0)
(28,30,0)
(15,10,0)
(7,3,0)
(39,19,0)
(44,4,0)
(14,8,0)
(28,0,0)
(13,30,0)
(45,17,0)
(4,10,0)
(43,28,0)
(8,2,0)
(19,39,0)
(38,4,0)
(0,20,0)
(0,25,0)
(24,6,0)
(35,10,0)
(9,13,0)
(18,17,0)
(17,6,0)
(40,30,0)
(13,28,0)
(42,10,0)
(27,7,0)
(29,30,0)
(33,13,0)
(0,28,0)
(8,25,0)
(26,43,0)
(42,38,0)
(11,4,0)
(31,30,0)
(35,37,0)
(5,42,0)
(34,42,0)
(40,28,1)
(31,28,1)
(33,19,1)
(35,36,1)
(7,27,1)
(40,41,1)
(36,15,1)
(8,2,1)
(33,43,1)
(11,44,1)
(0,20,1)
(42,34,1)
(31,46,1)
(5,10,1)
(32,38,1)
(41,13,1)
(14,32,1)
(23,7,1)
(28,0,1)
(19,39,1)
(25,8,1)
(2,22,1)
(43,28,1)
(27,38,1)
(42,10,1)
(44,42,1)
(12,28,1)
(43,26,1)
(9,33,1)
(13,28,1)
(4,10,1)
(13,9,1)
(4,11,1)
(10,35,1)
(35,37,1)
(38,42,1)
(23,31,1)
(8,10,1)
(46,40,1)
(26,12,1)
(1,5,1)
(0,25,1)
(22,14,1)
(21,43,1)
(38,4,1)
(39,21,1)
(34,1,1)
(0,25,2)
(32,38,2)
(4,42,2)
(38,42,2)
(46,38,2)
(42,34,2)
(33,38,2)
(44,42,2)
(41,38,2)
(19,43,2)
(8,38,2)
(21,43,2)
(35,37,2)
(26,38,2)
(43,38,2)
(11,42,2)
(2,38,2)
(38,4,2)
(12,38,2)
(22,38,2)
(27,38,2)
(8,2,2)
(19,39,2)
(31,28,2)
(25,38,2)
(43,28,2)
(39,43,2)
(40,28,2)
(31,38,2)
(4,10,2)
(10,35,2)
(42,10,2)
(9,38,2)
(25,8,2)
(8,10,2)
(0,20,2)
(14,38,2)
(40,38,2)
(13,38,2)
(13,28,2)
(7,38,2)
(28,38,2)
(0,38,2)
(28,0,2)
-----------------------------------
(0,(wchar_t *)
(1,HELLO_STRING)
(2,sizeof(wchar_t)
(3,)
(4,data < 100)
(5,data)
(6,)
(7,printLine("Input is less than the length of the source string or too large")
(8,data*sizeof(wchar_t)
(9,HELLO_STRING)
(10,data = *dataPtr)
(11,100)
(12,myString)
(13,wcscpy(myString, HELLO_STRING)
(14,data)
(15,data)
(16,)
(17,)
(18,if (data > wcslen(HELLO_STRING)
(19,exit(-1)
(20,wchar_t *)
(21,1)
(22,wchar_t)
(23,RET)
(24,data)
(25,malloc(data*sizeof(wchar_t)
(26,NULL)
(27,"Input is less than the length of the source string or too large")
(28,myString = (wchar_t *)
(29,if (myString == NULL)
(30,)
(31,free(myString)
(32,myString)
(33,myString)
(34,wcslen(HELLO_STRING)
(35,*dataPtr)
(36,dataPtr)
(37,size_t * dataPtr)
(38,data > wcslen(HELLO_STRING)
(39,-1)
(40,printWLine(myString)
(41,myString)
(42,data > wcslen(HELLO_STRING)
(43,myString == NULL)
(44,data)
(45,myString)
(46,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^