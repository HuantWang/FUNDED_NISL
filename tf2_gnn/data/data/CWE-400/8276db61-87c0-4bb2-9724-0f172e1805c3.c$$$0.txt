-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
42,43
42,44
42,45
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
51,53
51,54
51,55
51,56
52,53
53,54
53,55
54,55
56,57
56,58
57,58
57,59
59,60
61,62
61,63
62,63
64,65
64,66
65,66
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
85,88
86,87
88,89
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,9,11,15,16,19,24,26,27,30,33,38,40,41,45,48,50,55,58,60,63,66,69,70,74,76,81,83,87,89,91,95,97,101,103,108,109
-----computeFrom-----
13,14
13,15
43,44
43,45
53,54
53,55
64,65
64,66
72,73
72,74
-----guardedBy-----
50,91
45,66
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_bad(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_bad
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(6,4,0)
(38,40,0)
(10,27,0)
(21,28,0)
(5,38,0)
(8,31,0)
(46,16,0)
(27,9,0)
(44,32,0)
(17,18,0)
(9,49,0)
(49,32,0)
(46,49,0)
(14,40,0)
(16,46,0)
(15,39,0)
(31,8,0)
(20,32,0)
(50,29,0)
(5,31,0)
(28,21,0)
(38,5,0)
(35,51,0)
(27,47,0)
(40,38,0)
(3,32,0)
(31,39,0)
(22,7,0)
(45,16,0)
(51,24,0)
(30,29,0)
(29,37,0)
(33,46,0)
(28,1,0)
(39,26,0)
(48,7,0)
(25,9,0)
(18,39,0)
(13,39,0)
(19,21,0)
(7,39,0)
(34,13,0)
(4,26,0)
(31,5,0)
(9,27,0)
(18,26,0)
(38,49,0)
(4,39,0)
(39,31,0)
(43,13,0)
(11,49,0)
(7,26,0)
(41,49,0)
(23,38,0)
(36,27,0)
(12,26,0)
(4,6,1)
(41,11,1)
(2,18,1)
(38,49,1)
(49,41,1)
(2,51,1)
(39,31,1)
(18,17,1)
(33,0,1)
(42,49,1)
(13,39,1)
(22,13,1)
(14,23,1)
(45,33,1)
(35,46,1)
(19,13,1)
(38,40,1)
(46,16,1)
(17,4,1)
(0,27,1)
(22,28,1)
(7,48,1)
(9,25,1)
(40,14,1)
(25,10,1)
(4,39,1)
(36,42,1)
(28,21,1)
(6,7,1)
(23,15,1)
(48,22,1)
(10,36,1)
(43,39,1)
(27,9,1)
(0,42,1)
(31,8,1)
(5,38,1)
(9,49,1)
(7,39,1)
(2,0,1)
(16,45,1)
(21,19,1)
(51,35,1)
(34,43,1)
(18,39,1)
(46,49,1)
(15,46,1)
(31,5,1)
(13,34,1)
(9,49,2)
(4,46,2)
(45,0,2)
(13,46,2)
(19,13,2)
(7,39,2)
(33,0,2)
(22,46,2)
(27,9,2)
(51,46,2)
(46,49,2)
(46,0,2)
(31,46,2)
(13,39,2)
(35,46,2)
(18,39,2)
(34,46,2)
(5,38,2)
(7,46,2)
(16,0,2)
(38,40,2)
(28,21,2)
(39,46,2)
(5,46,2)
(31,5,2)
(14,46,2)
(4,39,2)
(15,46,2)
(23,46,2)
(9,42,2)
(40,46,2)
(28,13,2)
(48,46,2)
(25,42,2)
(6,46,2)
(27,42,2)
(38,46,2)
(10,42,2)
(46,16,2)
(38,49,2)
(36,42,2)
(39,31,2)
(17,46,2)
(43,46,2)
(18,46,2)
(21,13,2)
(31,8,2)
-----------------------------------
(0,GLOBAL_CONST_TRUE)
(1,)
(2,RET)
(3,data)
(4,printLine(myString)
(5,malloc(data*sizeof(char)
(6,myString)
(7,strcpy(myString, HELLO_STRING)
(8,char *)
(9,&data)
(10,"%zu")
(11,data)
(12,if (myString == NULL)
(13,myString == NULL)
(14,char)
(15,myString)
(16,strlen(HELLO_STRING)
(17,myString)
(18,free(myString)
(19,1)
(20,if(GLOBAL_CONST_TRUE)
(21,-1)
(22,myString)
(23,data)
(24,)
(25,data)
(26,)
(27,fscanf(stdin, "%zu", &data)
(28,exit(-1)
(29,)
(30,if (data > strlen(HELLO_STRING)
(31,(char *)
(32,)
(33,data)
(34,NULL)
(35,"Input is less than the length of the source string")
(36,stdin)
(37,)
(38,data*sizeof(char)
(39,myString = (char *)
(40,sizeof(char)
(41,0)
(42,GLOBAL_CONST_TRUE)
(43,myString)
(44,if(GLOBAL_CONST_TRUE)
(45,HELLO_STRING)
(46,data > strlen(HELLO_STRING)
(47,)
(48,HELLO_STRING)
(49,data = 0)
(50,myString)
(51,printLine("Input is less than the length of the source string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^