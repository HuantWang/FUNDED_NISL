-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_18_bad()
{
    char * data;
    data = NULL;
    goto source;
source:
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)calloc(100, sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
67,68
67,69
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,34,37,38,42,44,49,51,55,57,58,62,64,66,68,69
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_18_bad(){    char * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__char_calloc_18_bad()
CWE401_Memory_Leak__char_calloc_18_bad
{    char * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));
source
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation */    ;
sink
;
-----joern-----
(12,20,0)
(8,2,0)
(6,9,0)
(20,2,0)
(15,0,0)
(9,20,0)
(10,2,0)
(21,24,0)
(0,20,0)
(14,10,0)
(24,2,0)
(30,27,0)
(18,2,0)
(22,4,0)
(30,1,0)
(12,2,0)
(16,27,0)
(13,0,0)
(4,9,0)
(20,9,0)
(3,2,0)
(31,20,0)
(9,4,0)
(25,10,0)
(5,2,0)
(27,30,0)
(9,6,0)
(19,12,0)
(17,24,0)
(4,23,0)
(24,20,0)
(26,2,0)
(28,2,0)
(23,4,0)
(7,23,0)
(10,14,1)
(9,4,1)
(7,22,1)
(29,8,1)
(26,10,1)
(30,27,1)
(27,16,1)
(17,30,1)
(4,23,1)
(9,6,1)
(0,13,1)
(12,19,1)
(24,20,1)
(13,15,1)
(19,24,1)
(16,0,1)
(23,7,1)
(22,31,1)
(21,17,1)
(8,12,1)
(15,20,1)
(0,20,1)
(12,20,1)
(24,21,1)
(20,9,1)
(14,25,1)
(31,26,1)
(17,0,1)
(9,4,2)
(0,20,2)
(27,0,2)
(16,0,2)
(12,20,2)
(30,0,2)
(24,20,2)
(30,27,2)
(20,9,2)
(4,23,2)
(9,6,2)
-----------------------------------
(0,data == NULL)
(1,)
(2,)
(3,data)
(4,calloc(100, sizeof(char)
(5,if (data == NULL)
(6,char *)
(7,char)
(8,goto sink;)
(9,(char *)
(10,data = NULL)
(11, sizeof(char)
(12,printLine(data)
(13,NULL)
(14,NULL)
(15,data)
(16,1)
(17,data)
(18,sink:)
(19,data)
(20,data = (char *)
(21,"A String")
(22,100)
(23,sizeof(char)
(24,strcpy(data, "A String")
(25,data)
(26,goto source;)
(27,-1)
(28,source:)
(29,RET)
(30,exit(-1)
(31,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^