-----label-----
0
-----code-----
static void goodB2G1()
{
    int * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
70,72
70,73
71,72
73,74
74,75
75,76
75,77
76,77
79,80
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,37,40,41,45,47,52,54,59,60,61,65,68,69,72,77,78,83,85
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
43,44
43,45
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalFalse
globalFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(38,35,0)
(7,38,0)
(13,38,0)
(24,10,0)
(24,11,0)
(18,33,0)
(37,20,0)
(6,35,0)
(26,3,0)
(12,33,0)
(2,17,0)
(41,16,0)
(42,33,0)
(35,3,0)
(23,18,0)
(16,9,0)
(10,4,0)
(11,24,0)
(9,16,0)
(28,7,0)
(11,4,0)
(21,33,0)
(17,5,0)
(31,8,0)
(35,6,0)
(25,24,0)
(22,10,0)
(0,9,0)
(24,38,0)
(3,18,0)
(30,24,0)
(40,4,0)
(3,35,0)
(34,10,0)
(35,38,0)
(8,37,0)
(17,38,0)
(29,1,0)
(22,38,0)
(43,22,0)
(32,18,0)
(17,18,0)
(16,3,0)
(3,16,0)
(37,8,0)
(1,36,0)
(19,7,0)
(38,4,0)
(14,22,0)
(8,31,1)
(17,18,1)
(25,30,1)
(15,17,1)
(35,3,1)
(39,27,1)
(7,38,1)
(28,19,1)
(34,22,1)
(19,38,1)
(24,38,1)
(41,26,1)
(30,10,1)
(16,9,1)
(22,38,1)
(0,41,1)
(22,43,1)
(17,38,1)
(39,11,1)
(43,14,1)
(26,13,1)
(13,27,1)
(3,18,1)
(17,2,1)
(23,32,1)
(38,35,1)
(11,24,1)
(27,18,1)
(18,23,1)
(15,1,1)
(14,7,1)
(24,10,1)
(9,0,1)
(10,34,1)
(7,28,1)
(35,6,1)
(31,7,1)
(14,37,1)
(3,16,1)
(1,29,1)
(37,8,1)
(29,39,1)
(2,39,1)
(24,25,1)
(1,39,2)
(38,35,2)
(43,27,2)
(16,9,2)
(3,27,2)
(0,27,2)
(9,27,2)
(35,27,2)
(2,39,2)
(38,27,2)
(16,27,2)
(41,27,2)
(19,27,2)
(7,27,2)
(24,10,2)
(7,38,2)
(31,7,2)
(8,7,2)
(35,3,2)
(26,27,2)
(17,38,2)
(35,6,2)
(25,27,2)
(34,27,2)
(28,27,2)
(29,39,2)
(13,27,2)
(17,18,2)
(30,27,2)
(3,18,2)
(10,27,2)
(37,8,2)
(11,27,2)
(22,27,2)
(11,24,2)
(24,27,2)
(22,38,2)
(17,39,2)
(14,27,2)
(3,16,2)
(24,38,2)
(37,7,2)
-----------------------------------
(0,int)
(1,printLine("Benign, fixed string")
(2,data)
(3,realloc(data, 100*sizeof(int)
(4,)
(5,)
(6,int *)
(7,data == NULL)
(8,-1)
(9,sizeof(int)
(10,data[0] = 5)
(11,printIntLine(data[0])
(12,if(globalTrue)
(13,data)
(14,data)
(15,RET)
(16,100*sizeof(int)
(17,free(data)
(18,data = NULL)
(19,data)
(20,)
(21,if(globalFalse)
(22,data[0])
(23,NULL)
(24,data[0])
(25,0)
(26,data)
(27,globalTrue)
(28,NULL)
(29,"Benign, fixed string")
(30,data)
(31,1)
(32,data)
(33,)
(34,5)
(35,(int *)
(36,)
(37,exit(-1)
(38,data = (int *)
(39,globalFalse)
(40,if (data == NULL)
(41,100)
(42,data)
(43,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^