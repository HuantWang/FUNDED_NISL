-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_32_bad()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
81,82
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
89,90
89,91
90,91
92,93
92,94
93,94
93,95
94,95
97,98
99,100
100,101
102,103
103,104
104,105
104,106
105,106
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,53,56,61,63,67,69,73,78,80,82,87,88,91,95,96,98,101,106,107
-----computeFrom-----
32,33
32,34
58,59
58,60
85,86
85,87
89,90
89,91
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_32_bad(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_32_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_32_bad
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(50,15,0)
(16,25,0)
(42,35,0)
(2,53,0)
(2,47,0)
(32,9,0)
(25,14,0)
(23,11,0)
(12,53,0)
(22,7,0)
(23,41,0)
(41,23,0)
(39,21,0)
(19,18,0)
(29,51,0)
(1,29,0)
(21,39,0)
(5,39,0)
(28,22,0)
(53,11,0)
(19,36,0)
(7,18,0)
(39,11,0)
(36,11,0)
(29,2,0)
(51,35,0)
(4,2,0)
(17,23,0)
(18,36,0)
(43,35,0)
(3,53,0)
(46,3,0)
(52,31,0)
(33,29,0)
(15,35,0)
(24,21,0)
(18,9,0)
(20,26,0)
(0,11,0)
(47,2,0)
(34,31,0)
(54,22,0)
(49,19,0)
(10,11,0)
(47,14,0)
(29,1,0)
(9,18,0)
(56,3,0)
(44,51,0)
(55,47,0)
(30,14,0)
(48,7,0)
(51,29,0)
(22,36,0)
(40,41,0)
(38,11,0)
(14,25,0)
(31,3,0)
(14,11,0)
(9,39,0)
(26,19,0)
(13,8,0)
(8,45,0)
(37,36,0)
(27,18,0)
(7,22,0)
(26,39,0)
(44,15,1)
(47,55,1)
(15,50,1)
(33,44,1)
(34,52,1)
(23,41,1)
(15,35,1)
(41,40,1)
(26,39,1)
(39,21,1)
(43,31,1)
(44,35,1)
(29,33,1)
(19,18,1)
(51,29,1)
(20,22,1)
(40,17,1)
(30,39,1)
(29,2,1)
(35,42,1)
(18,9,1)
(22,7,1)
(52,2,1)
(49,26,1)
(55,4,1)
(48,54,1)
(6,51,1)
(7,18,1)
(26,20,1)
(54,28,1)
(25,16,1)
(16,30,1)
(27,23,1)
(42,43,1)
(32,27,1)
(14,25,1)
(7,48,1)
(21,24,1)
(29,1,1)
(9,32,1)
(17,14,1)
(8,13,1)
(50,8,1)
(13,51,1)
(51,35,1)
(19,49,1)
(24,5,1)
(28,18,1)
(4,19,1)
(47,14,1)
(2,47,1)
(31,34,1)
(9,39,1)
(50,51,2)
(15,51,2)
(26,39,2)
(39,21,2)
(13,51,2)
(44,51,2)
(2,47,2)
(51,35,2)
(29,2,2)
(51,51,2)
(14,25,2)
(51,29,2)
(18,9,2)
(29,1,2)
(8,51,2)
(29,51,2)
(22,7,2)
(15,35,2)
(23,41,2)
(7,18,2)
(47,14,2)
(33,51,2)
(19,18,2)
(9,39,2)
-----------------------------------
(0,countPtr2)
(1,size_t)
(2,count = *countPtr2)
(3,)
(4,count)
(5,countPtr1)
(6,RET)
(7,&count)
(8,printLine("Hello")
(9,*countPtr1)
(10,countPtr1)
(11,)
(12,count)
(13,"Hello")
(14,*countPtr2 = &count)
(15,i++)
(16,count)
(17,count)
(18,count = *countPtr1)
(19,*countPtr1 = count)
(20,countPtr1)
(21,&count)
(22,fscanf(stdin, "%d", &count)
(23,count = -1)
(24,count)
(25,&count)
(26,*countPtr1)
(27,count)
(28,stdin)
(29,(size_t)
(30,countPtr2)
(31,i = 0)
(32,countPtr1)
(33,count)
(34,0)
(35,i = 0)
(36,)
(37,count)
(38,count)
(39,*countPtr1 = &count)
(40,1)
(41,-1)
(42,0)
(43,i)
(44,i)
(45,)
(46,for (i = 0; i < (size_t)
(47,*countPtr2)
(48,count)
(49,count)
(50,i)
(51,i < (size_t)
(52,i)
(53,)
(54,"%d")
(55,countPtr2)
(56,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^