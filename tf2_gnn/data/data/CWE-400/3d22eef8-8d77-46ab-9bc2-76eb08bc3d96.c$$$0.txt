-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
52,53
55,56
55,57
56,57
58,59
58,60
59,60
59,61
60,61
63,64
65,66
66,67
68,69
69,70
70,71
70,72
71,72
-----nextToken-----
2,4,8,10,14,16,20,21,26,27,32,33,37,38,44,46,48,53,54,57,61,62,64,67,72,73
-----computeFrom-----
12,13
12,14
18,19
18,20
30,31
30,32
35,36
35,37
51,52
51,53
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(5,15,0)
(40,12,0)
(17,28,0)
(0,5,0)
(20,31,0)
(29,30,0)
(22,30,0)
(24,20,0)
(11,39,0)
(8,10,0)
(12,15,0)
(33,41,0)
(26,10,0)
(2,15,0)
(18,39,0)
(37,7,0)
(23,3,0)
(25,36,0)
(15,7,0)
(34,3,0)
(13,27,0)
(14,20,0)
(30,10,0)
(12,34,0)
(12,19,0)
(12,20,0)
(9,34,0)
(38,7,0)
(15,5,0)
(34,12,0)
(19,12,0)
(10,32,0)
(21,25,0)
(4,33,0)
(35,3,0)
(16,7,0)
(1,28,0)
(27,3,0)
(5,0,1)
(30,29,1)
(12,20,1)
(12,40,1)
(4,28,1)
(23,30,1)
(15,5,1)
(24,28,1)
(9,3,1)
(27,13,1)
(28,17,1)
(20,14,1)
(40,9,1)
(21,34,1)
(39,18,1)
(34,3,1)
(33,4,1)
(3,35,1)
(6,34,1)
(12,19,1)
(12,15,1)
(11,20,1)
(14,24,1)
(18,11,1)
(25,21,1)
(35,23,1)
(13,25,1)
(1,15,1)
(34,12,1)
(11,33,1)
(6,39,1)
(9,27,1)
(17,1,1)
(22,39,1)
(0,2,1)
(29,22,1)
(27,3,1)
(34,3,2)
(12,39,2)
(13,34,2)
(22,39,2)
(12,20,2)
(40,39,2)
(34,39,2)
(9,39,2)
(27,3,2)
(12,15,2)
(27,34,2)
(24,28,2)
(15,5,2)
(20,28,2)
(12,34,2)
(33,28,2)
(25,34,2)
(14,28,2)
(9,34,2)
(4,28,2)
(3,39,2)
(30,39,2)
(12,19,2)
(35,39,2)
(34,12,2)
(34,34,2)
(23,39,2)
(40,34,2)
(29,39,2)
(21,34,2)
-----------------------------------
(0,1)
(1,GLOBAL_CONST_FIVE)
(2,count)
(3,i = 0)
(4,"Benign, fixed string")
(5,-1)
(6,RET)
(7,)
(8,i)
(9,i)
(10,)
(11,GLOBAL_CONST_FIVE)
(12,(size_t)
(13,i)
(14,20)
(15,count = -1)
(16,count)
(17,5)
(18,5)
(19,size_t)
(20,count = 20)
(21,"Hello")
(22,i)
(23,i)
(24,count)
(25,printLine("Hello")
(26,for (i = 0; i < (size_t)
(27,i++)
(28,GLOBAL_CONST_FIVE!=5)
(29,0)
(30,i = 0)
(31,)
(32,)
(33,printLine("Benign, fixed string")
(34,i < (size_t)
(35,0)
(36,)
(37,if(GLOBAL_CONST_FIVE!=5)
(38,if(GLOBAL_CONST_FIVE==5)
(39,GLOBAL_CONST_FIVE==5)
(40,count)
(41,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^