-----label-----
0
-----code-----
static int write_ref_to_lockfile(struct ref_lock *lock,
				 const unsigned char *sha1)
{
	static char term = '\n';
	struct object *o;

	o = parse_object(sha1);
	if (!o) {
		error("Trying to write ref %s with nonexistent object %s",
			lock->ref_name, sha1_to_hex(sha1));
		unlock_ref(lock);
		errno = EINVAL;
		return -1;
	}
	if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)) {
		error("Trying to write non-commit object %s to branch %s",
			sha1_to_hex(sha1), lock->ref_name);
		unlock_ref(lock);
		errno = EINVAL;
		return -1;
	}
	if (write_in_full(lock->lock_fd, sha1_to_hex(sha1), 40) != 40 ||
	    write_in_full(lock->lock_fd, &term, 1) != 1 ||
	    close_ref(lock) < 0) {
		int save_errno = errno;
		error("Couldn't write %s", lock->lk->filename.buf);
		unlock_ref(lock);
		errno = save_errno;
		return -1;
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
17,18
18,19
18,20
20,21
20,22
22,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
40,42
41,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
46,49
46,50
47,48
50,51
50,52
51,52
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
69,70
71,72
72,73
74,75
74,76
75,76
75,77
76,77
76,78
77,78
77,79
78,79
81,82
83,84
83,85
84,85
86,87
86,88
87,88
90,91
90,92
90,93
90,94
91,92
92,93
92,94
92,95
92,96
93,94
96,97
96,98
97,98
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
117,118
118,119
120,121
120,122
121,122
121,123
122,123
122,124
123,124
123,125
124,125
124,126
124,127
124,128
125,126
127,128
127,129
128,129
131,132
131,133
132,133
134,135
138,139
138,140
139,140
139,141
139,142
139,143
140,141
142,143
142,144
143,144
146,147
147,148
151,152
151,153
152,153
152,154
153,154
155,156
158,159
158,160
158,161
158,162
158,163
159,160
160,161
160,162
162,163
162,164
164,165
165,166
167,168
168,169
168,170
168,171
169,170
172,173
172,174
173,174
173,175
174,175
174,176
175,176
180,181
181,182
181,183
182,183
184,185
186,187
187,188
187,189
188,189
190,191
192,193
193,194
195,196
-----nextToken-----
2,4,7,9,10,12,14,15,19,21,23,27,29,30,34,37,39,43,48,49,52,53,56,58,62,64,68,70,73,79,80,82,85,88,89,94,95,98,100,103,104,108,110,114,116,119,126,129,130,133,135,136,137,141,144,145,148,149,150,154,156,157,161,163,166,170,171,176,177,178,179,183,185,189,191,194,196
-----computeFrom-----
32,33
32,34
66,67
66,68
75,76
75,77
76,77
76,78
112,113
112,114
121,122
121,123
122,123
122,124
123,124
123,125
138,139
138,140
151,152
151,153
187,188
187,189
-----guardedBy-----
89,104
88,110
156,185
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static int write_ref_to_lockfile(struct ref_lock *lock,				 const unsigned char *sha1){	static char term = '\n';	struct object *o;	o = parse_object(sha1);	if (!o) {		error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1));		unlock_ref(lock);		errno = EINVAL;		return -1;	}	if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)) {		error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name);		unlock_ref(lock);		errno = EINVAL;		return -1;	}	if (write_in_full(lock->lock_fd, sha1_to_hex(sha1), 40) != 40 ||	    write_in_full(lock->lock_fd, &term, 1) != 1 ||	    close_ref(lock) < 0) {		int save_errno = errno;		error("Couldn't write %s", lock->lk->filename.buf);		unlock_ref(lock);		errno = save_errno;		return -1;	}	return 0;}
static int
write_ref_to_lockfile(struct ref_lock *lock,				 const unsigned char *sha1)
write_ref_to_lockfile
struct ref_lock *lock
struct ref_lock
ref_lock
*lock
*
lock
const unsigned char *sha1
const unsigned char
*sha1
*
sha1
{	static char term = '\n';	struct object *o;	o = parse_object(sha1);	if (!o) {		error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1));		unlock_ref(lock);		errno = EINVAL;		return -1;	}	if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)) {		error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name);		unlock_ref(lock);		errno = EINVAL;		return -1;	}	if (write_in_full(lock->lock_fd, sha1_to_hex(sha1), 40) != 40 ||	    write_in_full(lock->lock_fd, &term, 1) != 1 ||	    close_ref(lock) < 0) {		int save_errno = errno;		error("Couldn't write %s", lock->lk->filename.buf);		unlock_ref(lock);		errno = save_errno;		return -1;	}	return 0;}
static char term = '\n';
static char term = '\n';
static char
term = '\n'
term
= '\n'
'\n'
struct object *o;
struct object *o;
struct object
object
*o
*
o
o = parse_object(sha1);
o = parse_object(sha1)
o
o
parse_object(sha1)
parse_object
parse_object
sha1
sha1
if (!o) {		error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1));		unlock_ref(lock);		errno = EINVAL;		return -1;	}
!o
o
o
{		error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1));		unlock_ref(lock);		errno = EINVAL;		return -1;	}
error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1));
error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1))
error
error
"Trying to write ref %s with nonexistent object %s"
lock->ref_name
lock
lock
ref_name
sha1_to_hex(sha1)
sha1_to_hex
sha1_to_hex
sha1
sha1
unlock_ref(lock);
unlock_ref(lock)
unlock_ref
unlock_ref
lock
lock
errno = EINVAL;
errno = EINVAL
errno
errno
EINVAL
EINVAL
return -1;
-1
1
if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)) {		error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name);		unlock_ref(lock);		errno = EINVAL;		return -1;	}
o->type != OBJ_COMMIT && is_branch(lock->ref_name)
o->type != OBJ_COMMIT
o->type
o
o
type
OBJ_COMMIT
OBJ_COMMIT
is_branch(lock->ref_name)
is_branch
is_branch
lock->ref_name
lock
lock
ref_name
{		error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name);		unlock_ref(lock);		errno = EINVAL;		return -1;	}
error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name);
error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name)
error
error
"Trying to write non-commit object %s to branch %s"
sha1_to_hex(sha1)
sha1_to_hex
sha1_to_hex
sha1
sha1
lock->ref_name
lock
lock
ref_name
unlock_ref(lock);
unlock_ref(lock)
unlock_ref
unlock_ref
lock
lock
errno = EINVAL;
errno = EINVAL
errno
errno
EINVAL
EINVAL
return -1;
-1
1
if (write_in_full(lock->lock_fd, sha1_to_hex(sha1), 40) != 40 ||	    write_in_full(lock->lock_fd, &term, 1) != 1 ||	    close_ref(lock) < 0) {		int save_errno = errno;		error("Couldn't write %s", lock->lk->filename.buf);		unlock_ref(lock);		errno = save_errno;		return -1;	}
write_in_full(lock->lock_fd, sha1_to_hex(sha1), 40) != 40 ||	    write_in_full(lock->lock_fd, &term, 1) != 1 ||	    close_ref(lock) < 0
write_in_full(lock->lock_fd, sha1_to_hex(sha1), 40) != 40 ||	    write_in_full(lock->lock_fd, &term, 1) != 1
write_in_full(lock->lock_fd, sha1_to_hex(sha1), 40) != 40
write_in_full(lock->lock_fd, sha1_to_hex(sha1), 40)
write_in_full
write_in_full
lock->lock_fd
lock
lock
lock_fd
sha1_to_hex(sha1)
sha1_to_hex
sha1_to_hex
sha1
sha1
40
40
write_in_full(lock->lock_fd, &term, 1) != 1
write_in_full(lock->lock_fd, &term, 1)
write_in_full
write_in_full
lock->lock_fd
lock
lock
lock_fd
&term
term
term
1
1
close_ref(lock) < 0
close_ref(lock)
close_ref
close_ref
lock
lock
0
{		int save_errno = errno;		error("Couldn't write %s", lock->lk->filename.buf);		unlock_ref(lock);		errno = save_errno;		return -1;	}
int save_errno = errno;
int save_errno = errno;
int
save_errno = errno
save_errno
= errno
errno
errno
error("Couldn't write %s", lock->lk->filename.buf);
error("Couldn't write %s", lock->lk->filename.buf)
error
error
"Couldn't write %s"
lock->lk->filename.buf
lock->lk->filename
lock->lk
lock
lock
lk
filename
buf
unlock_ref(lock);
unlock_ref(lock)
unlock_ref
unlock_ref
lock
lock
errno = save_errno;
errno = save_errno
errno
errno
save_errno
save_errno
return -1;
-1
1
return 0;
0
-----joern-----
(106,43,0)
(23,12,0)
(85,96,0)
(101,13,0)
(13,73,0)
(73,36,0)
(35,5,0)
(52,38,0)
(63,84,0)
(33,77,0)
(60,51,0)
(55,84,0)
(27,93,0)
(95,14,0)
(42,62,0)
(71,12,0)
(20,102,0)
(75,8,0)
(33,40,0)
(4,80,0)
(66,65,0)
(5,61,0)
(26,62,0)
(62,42,0)
(20,93,0)
(0,77,0)
(47,73,0)
(37,8,0)
(35,61,0)
(92,5,0)
(22,100,0)
(23,96,0)
(54,2,0)
(67,26,0)
(42,9,0)
(74,8,0)
(100,22,0)
(64,5,0)
(50,51,0)
(40,33,0)
(41,99,0)
(72,38,0)
(15,93,0)
(3,106,0)
(100,38,0)
(19,43,0)
(9,42,0)
(19,61,0)
(21,43,0)
(97,4,0)
(9,49,0)
(2,68,0)
(77,33,0)
(83,19,0)
(33,59,0)
(24,40,0)
(32,16,0)
(50,36,0)
(38,100,0)
(12,23,0)
(96,23,0)
(87,33,0)
(6,58,0)
(14,95,0)
(86,14,0)
(76,89,0)
(47,89,0)
(99,36,0)
(11,77,0)
(95,61,0)
(68,2,0)
(40,17,0)
(65,59,0)
(95,58,0)
(12,21,0)
(105,26,0)
(22,16,0)
(39,102,0)
(56,97,0)
(4,97,0)
(90,65,0)
(29,95,0)
(34,58,0)
(4,84,0)
(80,17,0)
(47,66,0)
(7,36,0)
(31,65,0)
(18,49,0)
(45,22,0)
(47,35,0)
(21,12,0)
(51,36,0)
(93,20,0)
(93,43,0)
(58,43,0)
(107,4,0)
(66,59,0)
(1,59,0)
(16,8,0)
(69,21,0)
(49,2,0)
(94,50,0)
(99,102,0)
(106,36,0)
(89,8,0)
(70,49,0)
(46,8,0)
(68,17,0)
(104,100,0)
(1,43,0)
(84,43,0)
(80,4,0)
(30,20,0)
(48,10,0)
(53,1,0)
(57,9,0)
(102,99,0)
(49,9,0)
(26,43,0)
(38,43,0)
(14,17,0)
(77,43,0)
(102,20,0)
(2,8,0)
(10,66,0)
(91,35,0)
(81,80,0)
(100,96,0)
(84,4,0)
(23,56,0)
(97,56,0)
(88,51,0)
(44,8,0)
(82,68,0)
(98,50,0)
(103,2,0)
(62,26,0)
(96,100,0)
(56,23,0)
(73,50,0)
(78,91,0)
(58,95,0)
(28,97,0)
(25,54,0)
(79,16,0)
(26,105,1)
(39,20,1)
(97,28,1)
(16,79,1)
(68,82,1)
(23,96,1)
(4,80,1)
(25,2,1)
(33,77,1)
(68,17,1)
(85,100,1)
(49,2,1)
(12,71,1)
(52,97,1)
(40,17,1)
(42,62,1)
(41,51,1)
(47,35,1)
(38,72,1)
(105,67,1)
(1,53,1)
(106,43,1)
(100,22,1)
(40,24,1)
(51,60,1)
(65,90,1)
(20,93,1)
(66,10,1)
(2,68,1)
(14,17,1)
(67,9,1)
(94,98,1)
(45,38,1)
(93,43,1)
(107,80,1)
(62,26,1)
(22,45,1)
(20,30,1)
(77,11,1)
(72,52,1)
(104,22,1)
(21,69,1)
(48,65,1)
(63,42,1)
(47,66,1)
(55,63,1)
(42,9,1)
(76,56,1)
(49,18,1)
(56,23,1)
(95,58,1)
(3,99,1)
(80,17,1)
(26,43,1)
(22,16,1)
(98,106,1)
(83,95,1)
(90,31,1)
(23,12,1)
(18,70,1)
(35,91,1)
(1,43,1)
(93,27,1)
(71,21,1)
(4,84,1)
(70,54,1)
(91,78,1)
(4,107,1)
(14,86,1)
(64,19,1)
(24,77,1)
(56,97,1)
(60,88,1)
(78,5,1)
(50,94,1)
(58,6,1)
(10,48,1)
(100,104,1)
(28,4,1)
(6,34,1)
(19,43,1)
(33,40,1)
(58,43,1)
(0,87,1)
(54,25,1)
(87,54,1)
(100,38,1)
(57,49,1)
(95,14,1)
(97,4,1)
(99,102,1)
(47,73,1)
(73,50,1)
(34,14,1)
(92,64,1)
(29,42,1)
(101,50,1)
(54,2,1)
(81,84,1)
(103,16,1)
(31,1,1)
(19,83,1)
(53,33,1)
(102,39,1)
(38,43,1)
(96,100,1)
(27,15,1)
(86,29,1)
(77,43,1)
(80,81,1)
(15,41,1)
(84,55,1)
(106,3,1)
(102,20,1)
(73,13,1)
(30,93,1)
(9,57,1)
(13,101,1)
(21,43,1)
(11,0,1)
(12,21,1)
(35,5,1)
(47,89,1)
(89,76,1)
(79,32,1)
(82,103,1)
(69,96,1)
(96,85,1)
(88,56,1)
(9,49,1)
(66,65,1)
(5,92,1)
(84,43,1)
(50,51,1)
(80,17,2)
(57,54,2)
(4,42,2)
(4,80,2)
(88,56,2)
(93,56,2)
(50,56,2)
(49,54,2)
(80,42,2)
(20,93,2)
(63,42,2)
(96,100,2)
(107,42,2)
(94,56,2)
(92,42,2)
(84,43,2)
(18,54,2)
(89,56,2)
(102,56,2)
(66,65,2)
(48,54,2)
(47,89,2)
(105,9,2)
(99,56,2)
(34,42,2)
(38,43,2)
(45,97,2)
(55,42,2)
(70,54,2)
(81,42,2)
(60,56,2)
(23,97,2)
(56,42,2)
(31,54,2)
(15,56,2)
(40,17,2)
(19,42,2)
(24,54,2)
(77,54,2)
(23,96,2)
(106,43,2)
(66,54,2)
(47,66,2)
(19,43,2)
(84,42,2)
(78,42,2)
(99,102,2)
(97,42,2)
(100,22,2)
(54,2,2)
(40,54,2)
(69,96,2)
(53,54,2)
(12,21,2)
(101,56,2)
(21,96,2)
(58,43,2)
(62,9,2)
(13,56,2)
(10,54,2)
(11,54,2)
(42,9,2)
(65,54,2)
(62,26,2)
(39,56,2)
(6,42,2)
(22,16,2)
(95,58,2)
(87,54,2)
(98,56,2)
(71,96,2)
(30,56,2)
(93,43,2)
(100,97,2)
(33,54,2)
(100,38,2)
(42,54,2)
(47,35,2)
(97,4,2)
(49,2,2)
(9,54,2)
(51,56,2)
(4,84,2)
(106,56,2)
(22,97,2)
(73,50,2)
(14,17,2)
(47,73,2)
(72,97,2)
(104,97,2)
(95,14,2)
(33,77,2)
(102,20,2)
(52,97,2)
(58,42,2)
(12,96,2)
(20,56,2)
(64,42,2)
(26,9,2)
(3,56,2)
(23,12,2)
(68,17,2)
(42,62,2)
(5,42,2)
(33,40,2)
(56,23,2)
(86,42,2)
(83,42,2)
(9,49,2)
(28,42,2)
(2,68,2)
(38,97,2)
(26,43,2)
(35,42,2)
(91,42,2)
(90,54,2)
(29,42,2)
(56,97,2)
(21,43,2)
(1,43,2)
(0,54,2)
(95,42,2)
(73,56,2)
(1,54,2)
(77,43,2)
(35,5,2)
(41,56,2)
(85,97,2)
(96,97,2)
(50,51,2)
(14,42,2)
(67,9,2)
(76,56,2)
(27,56,2)
-----------------------------------
(0,lock)
(1,unlock_ref(lock)
(2,o = parse_object(sha1)
(3,lock)
(4,write_in_full(lock->lock_fd, sha1_to_hex(sha1)
(5,errno = EINVAL)
(6,ref_name)
(7,save_errno)
(8,)
(9,o->type != OBJ_COMMIT)
(10,-1)
(11,ref_name)
(12,close_ref(lock)
(13,-1)
(14,sha1_to_hex(sha1)
(15,lock)
(16,term = \'\\n\')
(17,const unsigned char *sha1)
(18,type)
(19,unlock_ref(lock)
(20,lock->lk->filename)
(21,close_ref(lock)
(22,&term)
(23,write_in_full(lock->lock_fd, &term, 1)
(24,sha1)
(25,o)
(26,lock->ref_name)
(27,lk)
(28,40)
(29,"Trying to write non-commit object %s to branch %s")
(30,filename)
(31,errno)
(32,term)
(33,error("Trying to write ref %s with nonexistent object %s",\n\\n\\t\\t\\tlock->ref_name, sha1_to_hex(sha1)
(34,lock)
(35,return -1;)
(36,)
(37,if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)
(38,lock->lock_fd)
(39,buf)
(40,sha1_to_hex(sha1)
(41,"Couldn\'t write %s")
(42,o->type != OBJ_COMMIT && is_branch(lock->ref_name)
(43,struct ref_lock *lock)
(44,o)
(45,term)
(46,term)
(47,RET)
(48,1)
(49,o->type)
(50,errno = save_errno)
(51,save_errno = errno)
(52,lock)
(53,lock)
(54,!o)
(55,lock_fd)
(56,write_in_full(lock->lock_fd, sha1_to_hex(sha1)
(57,OBJ_COMMIT)
(58,lock->ref_name)
(59,)
(60,errno)
(61,)
(62,is_branch(lock->ref_name)
(63,lock)
(64,errno)
(65,errno = EINVAL)
(66,return -1;)
(67,lock)
(68,parse_object(sha1)
(69,lock)
(70,o)
(71,0)
(72,lock_fd)
(73,return -1;)
(74,if (write_in_full(lock->lock_fd, sha1_to_hex(sha1)
(75,if (!o)
(76,0)
(77,lock->ref_name)
(78,1)
(79,\'\\n\')
(80,sha1_to_hex(sha1)
(81,sha1)
(82,sha1)
(83,lock)
(84,lock->lock_fd)
(85,1)
(86,sha1)
(87,"Trying to write ref %s with nonexistent object %s")
(88,save_errno)
(89,return 0;)
(90,EINVAL)
(91,-1)
(92,EINVAL)
(93,lock->lk)
(94,save_errno)
(95,error("Trying to write non-commit object %s to branch %s",\n\\n\\t\\t\\tsha1_to_hex(sha1)
(96,write_in_full(lock->lock_fd, &term, 1)
(97,write_in_full(lock->lock_fd, sha1_to_hex(sha1)
(98,errno)
(99,error("Couldn\'t write %s", lock->lk->filename.buf)
(100,write_in_full(lock->lock_fd, &term, 1)
(101,1)
(102,lock->lk->filename.buf)
(103,o)
(104,1)
(105,ref_name)
(106,unlock_ref(lock)
(107,40)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^