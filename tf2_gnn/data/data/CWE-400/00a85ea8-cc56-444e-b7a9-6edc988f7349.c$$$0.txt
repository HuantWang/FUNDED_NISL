-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(staticReturnsTrue())
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
31,32
33,34
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
43,44
43,45
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
63,65
64,65
64,66
65,66
68,69
70,71
71,72
73,74
74,75
75,76
75,77
76,77
-----nextToken-----
2,4,8,10,14,16,20,25,28,32,38,40,42,47,48,51,52,58,59,62,66,67,69,72,77,78
-----computeFrom-----
12,13
12,14
23,24
23,25
44,45
44,46
45,46
45,47
49,50
49,51
56,57
56,58
60,61
60,62
-----guardedBy-----
51,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(staticReturnsTrue())    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(staticReturnsTrue())    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(21,2,0)
(33,32,0)
(10,23,0)
(32,0,0)
(41,33,0)
(34,16,0)
(29,30,0)
(16,32,0)
(8,23,0)
(43,23,0)
(35,8,0)
(33,23,0)
(40,32,0)
(4,16,0)
(27,2,0)
(11,37,0)
(33,22,0)
(19,33,0)
(5,32,0)
(39,40,0)
(22,33,0)
(8,26,0)
(2,30,0)
(26,16,0)
(38,9,0)
(31,30,0)
(30,1,0)
(8,32,0)
(16,26,0)
(25,0,0)
(26,8,0)
(6,12,0)
(22,37,0)
(33,41,0)
(3,8,0)
(32,40,0)
(23,10,0)
(24,0,0)
(13,0,0)
(17,22,0)
(7,38,0)
(28,37,0)
(16,23,0)
(23,15,0)
(36,11,0)
(18,37,0)
(38,7,1)
(26,8,1)
(19,17,1)
(2,27,1)
(40,39,1)
(11,36,1)
(37,18,1)
(32,40,1)
(23,10,1)
(33,41,1)
(11,37,1)
(14,22,1)
(16,32,1)
(28,26,1)
(17,11,1)
(16,23,1)
(18,28,1)
(22,33,1)
(33,32,1)
(33,23,1)
(42,20,1)
(17,37,1)
(21,42,1)
(14,42,1)
(35,3,1)
(42,23,1)
(33,19,1)
(36,38,1)
(8,35,1)
(8,32,1)
(43,20,1)
(20,32,1)
(26,16,1)
(39,5,1)
(10,43,1)
(27,21,1)
(4,8,1)
(3,2,1)
(7,22,1)
(8,23,1)
(22,37,1)
(34,4,1)
(14,26,1)
(16,34,1)
(8,42,2)
(3,42,2)
(4,8,2)
(26,16,2)
(8,23,2)
(17,26,2)
(22,26,2)
(37,26,2)
(27,42,2)
(19,26,2)
(19,22,2)
(22,33,2)
(2,42,2)
(43,20,2)
(16,32,2)
(16,23,2)
(17,22,2)
(28,26,2)
(26,42,2)
(34,8,2)
(22,22,2)
(23,10,2)
(22,37,2)
(38,22,2)
(33,23,2)
(33,32,2)
(35,42,2)
(8,32,2)
(16,8,2)
(26,8,2)
(11,37,2)
(18,26,2)
(21,42,2)
(7,22,2)
(36,22,2)
(33,22,2)
(32,40,2)
(10,20,2)
(33,26,2)
(23,20,2)
(11,22,2)
(33,41,2)
-----------------------------------
(0,)
(1,)
(2,i = 0)
(3,count)
(4,count)
(5,count)
(6,for (i = 0; i < (size_t)
(7,"Hello")
(8,count > 0)
(9,)
(10,RAND32()
(11,i++)
(12,)
(13,if(staticReturnsTrue()
(14,RET)
(15,)
(16,count <= 20)
(17,i)
(18,0)
(19,count)
(20,staticReturnsTrue()
(21,i)
(22,i < (size_t)
(23,count = RAND32()
(24,if(staticReturnsTrue()
(25,count)
(26,count > 0 && count <= 20)
(27,0)
(28,i)
(29,i)
(30,)
(31,if (count > 0 && count <= 20)
(32,count = -1)
(33,(size_t)
(34,20)
(35,0)
(36,i)
(37,i = 0)
(38,printLine("Hello")
(39,1)
(40,-1)
(41,size_t)
(42,staticReturnsTrue()
(43,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^