-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_14_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalFive==5)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(globalFive==5)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
23,28
23,29
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
52,54
53,54
53,55
53,56
53,57
53,58
53,59
53,60
53,61
53,62
53,63
53,64
54,55
55,56
55,57
56,57
58,59
58,60
58,61
58,62
59,60
61,62
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
80,81
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
93,94
95,96
96,97
96,98
97,98
97,99
98,99
98,100
99,100
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
117,118
119,120
119,121
120,121
120,122
121,122
121,123
121,124
121,125
122,123
124,125
126,127
126,128
127,128
127,129
128,129
130,131
132,133
133,134
135,136
136,137
137,138
139,140
141,142
143,144
144,145
144,146
145,146
147,148
147,149
147,150
147,151
147,152
148,149
150,151
152,153
154,155
154,156
155,156
159,160
159,161
160,161
160,162
161,162
161,163
162,163
164,165
166,167
166,168
167,168
170,171
172,173
173,174
173,175
174,175
174,176
175,176
177,178
180,181
181,182
181,183
182,183
184,185
184,186
185,186
187,188
190,191
190,192
191,192
191,193
192,193
194,195
196,197
197,198
198,199
198,200
199,200
201,202
203,204
203,205
204,205
204,206
205,206
208,209
209,210
209,211
209,212
209,213
209,214
209,215
209,216
210,211
211,212
211,213
212,213
214,215
214,216
216,217
218,219
219,220
219,221
220,221
222,223
222,224
222,225
225,226
226,227
228,229
229,230
229,231
231,232
231,233
231,234
234,235
236,237
237,238
237,239
238,239
240,241
240,242
240,243
241,242
243,244
246,247
246,248
247,248
247,249
248,249
250,251
252,253
253,254
254,255
254,256
255,256
258,259
258,260
258,261
258,262
259,260
260,261
260,262
261,262
264,265
264,266
265,266
267,268
267,269
268,269
268,270
269,270
272,273
274,275
275,276
277,278
278,279
278,280
279,280
279,281
280,281
280,282
281,282
283,284
285,286
285,287
285,288
285,289
285,290
286,287
288,289
290,291
291,292
291,293
294,295
294,296
295,296
297,298
299,300
301,302
302,303
303,304
303,305
304,305
307,308
307,309
308,309
310,311
311,312
312,313
312,314
313,314
315,316
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,32,34,38,40,43,46,48,51,57,60,62,64,66,70,72,74,78,81,82,86,91,92,94,100,101,102,105,107,112,113,116,118,123,125,129,131,134,138,140,142,146,149,151,153,156,157,158,163,165,168,169,171,176,178,179,183,186,188,189,193,195,200,202,206,207,213,215,217,221,223,224,227,230,232,233,235,239,242,244,245,249,251,256,257,262,263,266,270,271,273,276,282,284,287,289,292,293,296,298,300,305,306,309,314,316
-----computeFrom-----
12,13
12,14
18,19
18,20
55,56
55,57
68,69
68,70
88,89
88,90
96,97
96,98
109,110
109,111
120,121
120,122
144,145
144,146
154,155
154,156
160,161
160,162
161,162
161,163
166,167
166,168
173,174
173,175
181,182
181,183
191,192
191,193
204,205
204,206
237,238
237,239
247,248
247,249
260,261
260,262
264,265
264,266
279,280
279,281
-----guardedBy-----
193,202
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_14_bad(){    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(globalFive==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_fwrite_14_bad()
CWE400_Resource_Exhaustion__connect_socket_fwrite_14_bad
{    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(globalFive==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalFive==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
globalFive==5
globalFive
globalFive
5
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(globalFive==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(63,109,0)
(113,176,0)
(0,20,0)
(157,99,0)
(44,24,0)
(143,170,0)
(131,181,0)
(162,104,0)
(102,57,0)
(65,40,0)
(110,48,0)
(148,153,0)
(99,20,0)
(124,40,0)
(155,97,0)
(53,91,0)
(77,170,0)
(115,84,0)
(101,189,0)
(175,7,0)
(163,94,0)
(86,38,0)
(74,84,0)
(56,36,0)
(188,38,0)
(49,175,0)
(127,72,0)
(21,120,0)
(41,145,0)
(79,11,0)
(146,36,0)
(170,77,0)
(149,97,0)
(114,75,0)
(12,172,0)
(156,151,0)
(130,116,0)
(51,114,0)
(55,152,0)
(179,27,0)
(151,189,0)
(3,31,0)
(34,184,0)
(96,143,0)
(83,167,0)
(59,97,0)
(84,93,0)
(100,75,0)
(36,56,0)
(82,99,0)
(142,152,0)
(107,181,0)
(121,36,0)
(137,189,0)
(97,47,0)
(170,109,0)
(67,41,0)
(101,118,0)
(89,101,0)
(26,7,0)
(184,189,0)
(170,143,0)
(20,24,0)
(36,84,0)
(184,34,0)
(147,132,0)
(23,4,0)
(38,188,0)
(27,57,0)
(19,56,0)
(57,27,0)
(118,101,0)
(103,11,0)
(57,102,0)
(95,177,0)
(116,84,0)
(33,93,0)
(6,152,0)
(30,170,0)
(48,24,0)
(183,97,0)
(52,152,0)
(108,113,0)
(185,156,0)
(154,170,0)
(61,180,0)
(68,40,0)
(139,148,0)
(72,109,0)
(138,111,0)
(46,104,0)
(187,173,0)
(180,97,0)
(122,102,0)
(177,109,0)
(109,72,0)
(134,0,0)
(156,20,0)
(36,146,0)
(176,113,0)
(170,154,0)
(125,72,0)
(141,62,0)
(158,116,0)
(13,181,0)
(113,189,0)
(22,156,0)
(98,10,0)
(87,176,0)
(165,149,0)
(168,132,0)
(0,82,0)
(81,149,0)
(60,148,0)
(72,180,0)
(120,184,0)
(40,113,0)
(166,188,0)
(14,133,0)
(40,65,0)
(42,83,0)
(57,62,0)
(190,75,0)
(99,82,0)
(109,97,0)
(135,11,0)
(171,172,0)
(65,75,0)
(58,161,0)
(150,78,0)
(17,152,0)
(136,93,0)
(101,10,0)
(132,97,0)
(25,152,0)
(11,152,0)
(73,35,0)
(7,175,0)
(43,151,0)
(69,0,0)
(129,133,0)
(90,65,0)
(1,152,0)
(15,152,0)
(39,173,0)
(160,29,0)
(32,186,0)
(84,189,0)
(28,97,0)
(173,187,0)
(50,161,0)
(9,77,0)
(36,188,0)
(45,153,0)
(103,123,0)
(37,177,0)
(103,84,0)
(188,166,0)
(62,57,0)
(175,181,0)
(20,189,0)
(40,68,0)
(152,117,0)
(10,101,0)
(169,126,0)
(191,48,0)
(82,0,0)
(2,115,0)
(54,180,0)
(80,34,0)
(104,152,0)
(76,20,0)
(40,175,0)
(88,189,0)
(188,36,0)
(186,120,0)
(93,84,0)
(5,103,0)
(16,146,0)
(24,20,0)
(128,62,0)
(83,109,0)
(24,48,0)
(8,97,0)
(120,186,0)
(92,189,0)
(159,24,0)
(164,99,0)
(187,189,0)
(66,118,0)
(91,187,0)
(133,189,0)
(119,115,0)
(116,11,0)
(178,24,0)
(106,91,0)
(153,189,0)
(154,35,0)
(144,186,0)
(29,64,0)
(105,97,0)
(35,154,0)
(24,84,0)
(112,152,0)
(85,189,0)
(140,170,0)
(71,93,0)
(176,87,1)
(188,166,1)
(61,149,1)
(100,41,1)
(24,44,1)
(188,38,1)
(58,172,1)
(33,74,1)
(40,124,1)
(158,150,1)
(57,62,1)
(40,68,1)
(36,146,1)
(70,116,1)
(139,101,1)
(177,37,1)
(185,22,1)
(90,75,1)
(169,102,1)
(38,86,1)
(113,176,1)
(41,67,1)
(132,147,1)
(158,138,1)
(104,46,1)
(103,5,1)
(173,39,1)
(179,62,1)
(174,182,1)
(57,27,1)
(29,160,1)
(67,177,1)
(36,188,1)
(91,106,1)
(46,162,1)
(141,11,1)
(24,48,1)
(124,90,1)
(106,53,1)
(96,77,1)
(108,151,1)
(10,98,1)
(127,63,1)
(116,84,1)
(180,54,1)
(171,175,1)
(120,21,1)
(119,2,1)
(103,84,1)
(54,61,1)
(5,116,1)
(83,109,1)
(65,40,1)
(70,103,1)
(48,110,1)
(0,20,1)
(82,0,1)
(157,164,1)
(11,79,1)
(51,154,1)
(168,161,1)
(144,32,1)
(76,56,1)
(30,143,1)
(53,184,1)
(0,134,1)
(170,77,1)
(160,154,1)
(56,36,1)
(99,157,1)
(24,84,1)
(37,95,1)
(115,119,1)
(149,81,1)
(21,186,1)
(42,182,1)
(121,187,1)
(80,120,1)
(32,153,1)
(125,127,1)
(170,30,1)
(74,133,1)
(58,70,1)
(102,57,1)
(158,3,1)
(87,108,1)
(110,191,1)
(114,75,1)
(164,20,1)
(134,69,1)
(128,141,1)
(99,20,1)
(9,140,1)
(14,102,1)
(103,11,1)
(3,56,1)
(82,99,1)
(170,109,1)
(153,45,1)
(122,57,1)
(69,99,1)
(34,80,1)
(182,65,1)
(65,75,1)
(22,82,1)
(19,36,1)
(118,66,1)
(158,18,1)
(138,82,1)
(89,118,1)
(16,188,1)
(101,10,1)
(40,175,1)
(50,58,1)
(98,89,1)
(172,12,1)
(146,16,1)
(143,96,1)
(66,115,1)
(191,159,1)
(27,179,1)
(101,118,1)
(26,49,1)
(43,156,1)
(151,43,1)
(156,20,1)
(20,24,1)
(109,72,1)
(84,93,1)
(129,14,1)
(93,71,1)
(187,173,1)
(77,9,1)
(83,42,1)
(58,163,1)
(140,35,1)
(159,178,1)
(136,33,1)
(81,165,1)
(75,190,1)
(163,70,1)
(72,180,1)
(165,132,1)
(120,186,1)
(100,177,1)
(116,11,1)
(36,84,1)
(56,19,1)
(12,171,1)
(162,172,1)
(51,29,1)
(190,100,1)
(174,161,1)
(40,113,1)
(175,7,1)
(90,114,1)
(39,91,1)
(150,115,1)
(184,34,1)
(130,158,1)
(63,180,1)
(116,130,1)
(44,48,1)
(133,129,1)
(79,135,1)
(72,125,1)
(2,84,1)
(95,109,1)
(170,143,1)
(158,169,1)
(154,170,1)
(177,109,1)
(115,84,1)
(186,144,1)
(18,113,1)
(60,139,1)
(161,50,1)
(141,18,1)
(148,60,1)
(35,73,1)
(178,76,1)
(156,185,1)
(62,128,1)
(71,136,1)
(147,168,1)
(86,121,1)
(174,83,1)
(7,26,1)
(135,104,1)
(114,51,1)
(45,148,1)
(154,35,1)
(102,122,1)
(73,65,1)
(146,115,2)
(122,18,2)
(124,161,2)
(138,82,2)
(101,10,2)
(127,161,2)
(89,115,2)
(90,161,2)
(39,115,2)
(115,84,2)
(109,161,2)
(40,161,2)
(34,115,2)
(116,84,2)
(29,154,2)
(56,36,2)
(173,115,2)
(65,75,2)
(159,56,2)
(115,102,2)
(5,116,2)
(125,161,2)
(156,20,2)
(36,188,2)
(130,172,2)
(104,172,2)
(190,161,2)
(22,82,2)
(60,115,2)
(62,172,2)
(3,56,2)
(128,172,2)
(16,115,2)
(36,146,2)
(170,109,2)
(11,172,2)
(24,84,2)
(124,65,2)
(132,161,2)
(75,161,2)
(147,161,2)
(57,27,2)
(177,109,2)
(38,115,2)
(2,102,2)
(151,82,2)
(134,99,2)
(129,102,2)
(135,172,2)
(53,115,2)
(187,173,2)
(76,56,2)
(120,115,2)
(113,82,2)
(141,172,2)
(184,34,2)
(120,186,2)
(65,65,2)
(9,65,2)
(70,172,2)
(79,172,2)
(182,161,2)
(179,18,2)
(118,115,2)
(169,102,2)
(36,84,2)
(30,65,2)
(65,161,2)
(158,172,2)
(177,161,2)
(54,161,2)
(185,82,2)
(65,40,2)
(40,113,2)
(170,65,2)
(106,115,2)
(81,161,2)
(40,175,2)
(136,102,2)
(101,115,2)
(141,18,2)
(77,65,2)
(41,177,2)
(170,77,2)
(0,99,2)
(122,172,2)
(82,0,2)
(46,172,2)
(18,82,2)
(20,24,2)
(121,115,2)
(43,82,2)
(48,56,2)
(37,161,2)
(116,172,2)
(102,57,2)
(103,11,2)
(56,115,2)
(109,72,2)
(57,172,2)
(140,65,2)
(40,65,2)
(102,18,2)
(33,102,2)
(73,65,2)
(84,102,2)
(24,56,2)
(180,161,2)
(114,65,2)
(188,115,2)
(80,115,2)
(86,115,2)
(82,99,2)
(19,115,2)
(57,18,2)
(27,172,2)
(66,115,2)
(154,35,2)
(154,170,2)
(188,38,2)
(99,56,2)
(63,161,2)
(84,93,2)
(119,102,2)
(83,109,2)
(103,116,2)
(69,99,2)
(184,115,2)
(99,20,2)
(178,56,2)
(83,182,2)
(157,56,2)
(191,56,2)
(45,115,2)
(72,180,2)
(170,143,2)
(87,82,2)
(143,65,2)
(42,182,2)
(162,172,2)
(148,115,2)
(110,56,2)
(62,18,2)
(176,82,2)
(96,65,2)
(108,82,2)
(21,115,2)
(116,11,2)
(74,102,2)
(160,154,2)
(91,115,2)
(153,115,2)
(144,115,2)
(133,102,2)
(14,102,2)
(139,115,2)
(71,102,2)
(95,161,2)
(51,65,2)
(36,115,2)
(101,118,2)
(175,7,2)
(164,56,2)
(168,161,2)
(163,70,2)
(187,115,2)
(128,18,2)
(98,115,2)
(100,161,2)
(93,102,2)
(20,56,2)
(156,82,2)
(114,75,2)
(27,18,2)
(72,161,2)
(24,48,2)
(113,176,2)
(67,177,2)
(186,115,2)
(154,65,2)
(40,68,2)
(35,65,2)
(0,20,2)
(102,172,2)
(165,161,2)
(150,115,2)
(82,56,2)
(188,166,2)
(90,65,2)
(32,115,2)
(44,56,2)
(179,172,2)
(10,115,2)
(149,161,2)
(57,62,2)
(61,161,2)
(103,84,2)
-----------------------------------
(0,recvResult == 0)
(1,if (connectSocket != INVALID_SOCKET)
(2,connectSocket)
(3,break;)
(4,)
(5,connectSocket)
(6,do)
(7,-1)
(8,if (pFile == NULL)
(9,char)
(10,sizeof(service)
(11,connectSocket = INVALID_SOCKET)
(12,5)
(13,if(globalFive==5)
(14,wsaDataInit)
(15,wsaDataInit)
(16,service)
(17,if (wsaDataInit)
(18,0)
(19,SOCKET_ERROR)
(20,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(21,s_addr)
(22,inputBuffer)
(23,if (strlen(SENTENCE)
(24,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(25,connectSocket)
(26,1)
(27,&wsaData)
(28,if (pFile)
(29,exit(1)
(30,pFile)
(31,)
(32,service)
(33,AF_INET)
(34,inet_addr(IP_ADDRESS)
(35,strlen(SENTENCE)
(36,connect(connectSocket, (struct sockaddr*)
(37,NULL)
(38,&service)
(39,TCP_PORT)
(40,(size_t)
(41,exit(1)
(42,pFile)
(43,\'\\0\')
(44,0)
(45,AF_INET)
(46,0)
(47,)
(48,CHAR_ARRAY_SIZE - 1)
(49,count)
(50,5)
(51,i)
(52,recvResult)
(53,service)
(54,"output_bad.txt")
(55,inputBuffer)
(56,connect(connectSocket, (struct sockaddr*)
(57,WSAStartup(MAKEWORD(2,2)
(58,globalFive)
(59,i)
(60,sin_family)
(61,filename)
(62,MAKEWORD(2,2)
(63,pFile)
(64,)
(65,i < (size_t)
(66,service)
(67,1)
(68,size_t)
(69,recvResult)
(70,wsaDataInit)
(71,IPPROTO_TCP)
(72,fopen(filename, "w+")
(73,SENTENCE)
(74,connectSocket)
(75,i = 0)
(76,recvResult)
(77,sizeof(char)
(78,)
(79,INVALID_SOCKET)
(80,IP_ADDRESS)
(81,NULL)
(82,recvResult == SOCKET_ERROR || recvResult == 0)
(83,fclose(pFile)
(84,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(85,if (connect(connectSocket, (struct sockaddr*)
(86,service)
(87,inputBuffer)
(88,if (recvResult == SOCKET_ERROR || recvResult == 0)
(89,0)
(90,i)
(91,service.sin_port)
(92,if (WSAStartup(MAKEWORD(2,2)
(93,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(94,)
(95,pFile)
(96,SENTENCE)
(97,)
(98,service)
(99,recvResult == SOCKET_ERROR)
(100,i)
(101,memset(&service, 0, sizeof(service)
(102,WSAStartup(MAKEWORD(2,2)
(103,CLOSE_SOCKET(connectSocket)
(104,wsaDataInit = 0)
(105,pFile)
(106,sin_port)
(107,count)
(108,count)
(109,pFile = fopen(filename, "w+")
(110,1)
(111,)
(112,service)
(113,count = atoi(inputBuffer)
(114,i++)
(115,connectSocket == INVALID_SOCKET)
(116,connectSocket != INVALID_SOCKET)
(117,)
(118,&service)
(119,INVALID_SOCKET)
(120,service.sin_addr.s_addr)
(121,connectSocket)
(122,NO_ERROR)
(123,)
(124,count)
(125,"w+")
(126,)
(127,filename)
(128,2)
(129,1)
(130,INVALID_SOCKET)
(131,if(globalFive==5)
(132,i = 0)
(133,wsaDataInit = 1)
(134,0)
(135,connectSocket)
(136,SOCK_STREAM)
(137,if (connectSocket == INVALID_SOCKET)
(138,break;)
(139,service)
(140,SENTENCE)
(141,2)
(142,wsaData)
(143,strlen(SENTENCE)
(144,sin_addr)
(145,)
(146,sizeof(service)
(147,0)
(148,service.sin_family)
(149,*pFile = NULL)
(150,break;)
(151,inputBuffer[recvResult] = \'\\0\')
(152,)
(153,service.sin_family = AF_INET)
(154,strlen(SENTENCE)
(155,filename)
(156,inputBuffer[recvResult])
(157,SOCKET_ERROR)
(158,connectSocket)
(159,inputBuffer)
(160,1)
(161,globalFive==5)
(162,wsaDataInit)
(163,WSACleanup()
(164,recvResult)
(165,pFile)
(166,struct sockaddr*)
(167,)
(168,i)
(169,break;)
(170,fwrite(SENTENCE, sizeof(char)
(171,globalFive)
(172,globalFive==5)
(173,htons(TCP_PORT)
(174,RET)
(175,count = -1)
(176,atoi(inputBuffer)
(177,pFile == NULL)
(178,connectSocket)
(179,wsaData)
(180,*filename = "output_bad.txt")
(181,)
(182,pFile)
(183,for (i = 0; i < (size_t)
(184,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(185,recvResult)
(186,service.sin_addr)
(187,service.sin_port = htons(TCP_PORT)
(188,(struct sockaddr*)
(189,)
(190,0)
(191,CHAR_ARRAY_SIZE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^