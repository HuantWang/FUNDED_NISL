-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalFive==5)
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
52,55
52,56
53,54
55,56
57,58
60,61
61,62
62,63
62,64
63,64
66,67
66,68
67,68
67,69
68,69
71,72
72,73
72,74
73,74
74,75
74,76
76,77
76,78
79,80
79,81
79,82
80,81
80,82
81,82
81,83
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
93,94
93,95
93,96
93,97
93,98
94,95
95,96
95,97
96,97
98,99
98,100
99,100
99,101
101,102
103,104
103,105
104,105
106,107
106,108
107,108
109,110
110,111
110,112
113,114
113,115
114,115
114,116
115,116
117,118
119,120
120,121
121,122
121,123
122,123
124,125
126,127
127,128
127,129
127,130
128,129
130,131
132,133
134,135
135,136
135,137
136,137
138,139
140,141
141,142
141,143
142,143
144,145
146,147
147,148
148,149
148,150
149,150
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,58,59,64,65,69,70,75,77,78,83,86,88,91,92,97,100,102,105,108,111,112,116,118,123,125,129,131,133,137,139,143,145,150,151
-----computeFrom-----
13,14
13,15
18,19
18,20
35,36
35,37
49,50
49,51
67,68
67,69
80,81
80,82
81,82
81,83
89,90
89,91
95,96
95,97
106,107
106,108
114,115
114,116
-----guardedBy-----
40,56
46,58
88,133
91,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFive==5)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFive==5)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalFive==5)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(64,36,0)
(36,28,0)
(51,9,0)
(33,47,0)
(2,33,0)
(54,59,0)
(10,55,0)
(42,28,0)
(31,22,0)
(37,58,0)
(34,7,0)
(66,41,0)
(32,23,0)
(51,68,0)
(44,23,0)
(72,36,0)
(40,54,0)
(38,68,0)
(35,47,0)
(62,25,0)
(58,59,0)
(52,60,0)
(47,33,0)
(74,64,0)
(16,72,0)
(54,36,0)
(43,16,0)
(70,63,0)
(10,39,0)
(18,14,0)
(20,33,0)
(64,59,0)
(24,28,0)
(67,58,0)
(25,55,0)
(64,74,0)
(54,74,0)
(13,45,0)
(56,70,0)
(5,64,0)
(48,28,0)
(59,58,0)
(72,60,0)
(12,54,0)
(69,29,0)
(52,6,0)
(33,45,0)
(7,30,0)
(58,45,0)
(57,36,0)
(72,16,0)
(74,54,0)
(55,39,0)
(8,72,0)
(27,39,0)
(60,52,0)
(4,14,0)
(6,52,0)
(26,64,0)
(73,25,0)
(11,33,0)
(19,58,0)
(53,46,0)
(22,55,0)
(54,40,0)
(17,59,0)
(1,46,0)
(72,59,0)
(59,0,0)
(61,7,0)
(22,39,0)
(45,23,0)
(50,55,0)
(21,10,0)
(41,55,0)
(75,69,0)
(55,52,0)
(15,36,0)
(65,45,0)
(76,41,0)
(3,40,0)
(41,39,0)
(68,51,0)
(23,49,0)
(60,72,0)
(52,55,0)
(46,53,1)
(19,67,1)
(70,56,1)
(15,57,1)
(68,38,1)
(52,6,1)
(22,55,1)
(10,55,1)
(72,36,1)
(2,45,1)
(36,15,1)
(10,21,1)
(54,36,1)
(76,66,1)
(72,59,1)
(64,36,1)
(50,74,1)
(17,47,1)
(65,13,1)
(38,25,1)
(8,50,1)
(56,74,1)
(75,47,1)
(60,72,1)
(20,11,1)
(11,2,1)
(18,4,1)
(74,64,1)
(64,26,1)
(64,59,1)
(54,40,1)
(47,35,1)
(59,58,1)
(25,62,1)
(71,10,1)
(53,1,1)
(21,22,1)
(67,37,1)
(5,54,1)
(47,33,1)
(51,68,1)
(40,3,1)
(26,5,1)
(69,75,1)
(43,8,1)
(13,46,1)
(25,55,1)
(12,14,1)
(66,51,1)
(74,54,1)
(71,70,1)
(73,55,1)
(33,20,1)
(45,65,1)
(16,43,1)
(41,76,1)
(41,55,1)
(14,18,1)
(3,12,1)
(4,46,1)
(4,59,1)
(22,31,1)
(66,25,1)
(58,19,1)
(72,16,1)
(55,52,1)
(1,36,1)
(52,60,1)
(71,14,1)
(33,45,1)
(35,33,1)
(58,45,1)
(37,17,1)
(62,73,1)
(4,69,1)
(31,41,1)
(54,59,1)
(33,45,2)
(47,33,2)
(73,74,2)
(58,45,2)
(43,74,2)
(8,74,2)
(64,54,2)
(74,14,2)
(59,47,2)
(65,46,2)
(62,74,2)
(72,59,2)
(66,74,2)
(10,74,2)
(56,74,2)
(41,55,2)
(13,46,2)
(68,25,2)
(67,47,2)
(70,74,2)
(16,74,2)
(11,46,2)
(47,46,2)
(54,36,2)
(55,52,2)
(54,40,2)
(72,36,2)
(72,74,2)
(52,74,2)
(40,14,2)
(60,72,2)
(20,46,2)
(21,74,2)
(74,64,2)
(10,55,2)
(38,25,2)
(50,74,2)
(69,47,2)
(25,74,2)
(64,59,2)
(52,60,2)
(35,46,2)
(59,58,2)
(3,14,2)
(25,55,2)
(54,59,2)
(55,74,2)
(19,47,2)
(52,6,2)
(58,47,2)
(75,47,2)
(22,74,2)
(72,16,2)
(5,54,2)
(41,74,2)
(33,46,2)
(60,74,2)
(51,25,2)
(37,47,2)
(51,68,2)
(64,36,2)
(54,14,2)
(76,74,2)
(12,14,2)
(31,74,2)
(74,54,2)
(17,47,2)
(45,46,2)
(2,46,2)
(22,55,2)
(26,54,2)
-----------------------------------
(0,)
(1,globalFive)
(2,inputBuffer)
(3,HELLO_STRING)
(4,globalFive)
(5,data)
(6,char *)
(7,)
(8,data)
(9,)
(10,free(myString)
(11,CHAR_ARRAY_SIZE)
(12,data)
(13,inputBuffer)
(14,globalFive==5)
(15,0)
(16,sizeof(char)
(17,data)
(18,5)
(19,0)
(20,stdin)
(21,myString)
(22,printLine(myString)
(23,)
(24,data)
(25,myString == NULL)
(26,100)
(27,if (myString == NULL)
(28,)
(29,)
(30,)
(31,myString)
(32,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(34,if (data > strlen(HELLO_STRING)
(35,NULL)
(36,data = 0)
(37,inputBuffer)
(38,1)
(39,)
(40,strlen(HELLO_STRING)
(41,strcpy(myString, HELLO_STRING)
(42,if(globalFive==5)
(43,char)
(44,inputBuffer)
(45,inputBuffer[CHAR_ARRAY_SIZE] = "")
(46,globalFive==5)
(47,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(48,if(globalFive==5)
(49,)
(50,myString)
(51,exit(-1)
(52,(char *)
(53,5)
(54,data > strlen(HELLO_STRING)
(55,myString = (char *)
(56,"Input is less than the length of the source string or too large")
(57,data)
(58,strtoul(inputBuffer, NULL, 0)
(59,data = strtoul(inputBuffer, NULL, 0)
(60,malloc(data*sizeof(char)
(61,myString)
(62,NULL)
(63,)
(64,data < 100)
(65,"")
(66,myString)
(67,NULL)
(68,-1)
(69,printLine("fgets()
(70,printLine("Input is less than the length of the source string or too large")
(71,RET)
(72,data*sizeof(char)
(73,myString)
(74,data > strlen(HELLO_STRING)
(75,"fgets()
(76,HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^