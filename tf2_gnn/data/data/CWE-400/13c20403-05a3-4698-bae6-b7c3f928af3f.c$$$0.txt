-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_05_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,87,89
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_05_bad(){    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_05_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_05_bad
{    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(28,33,0)
(40,45,0)
(45,24,0)
(30,46,0)
(43,11,0)
(37,11,0)
(19,1,0)
(15,7,0)
(32,27,0)
(16,2,0)
(8,24,0)
(21,24,0)
(7,42,0)
(1,19,0)
(34,7,0)
(11,24,0)
(19,18,0)
(8,22,0)
(22,8,0)
(2,5,0)
(24,33,0)
(43,28,0)
(35,41,0)
(15,24,0)
(2,29,0)
(5,2,0)
(24,8,0)
(38,42,0)
(0,19,0)
(9,41,0)
(47,45,0)
(6,5,0)
(23,1,0)
(31,33,0)
(8,29,0)
(10,1,0)
(39,32,0)
(1,24,0)
(14,29,0)
(46,41,0)
(7,15,0)
(3,11,0)
(42,33,0)
(20,15,0)
(18,33,0)
(44,41,0)
(29,46,0)
(25,39,0)
(29,2,0)
(11,43,0)
(28,43,0)
(13,18,0)
(17,15,0)
(12,46,0)
(32,39,0)
(29,8,0)
(15,24,1)
(40,47,1)
(13,19,1)
(45,24,1)
(29,46,1)
(34,15,1)
(42,38,1)
(10,32,1)
(7,34,1)
(37,42,1)
(20,18,1)
(29,2,1)
(26,36,1)
(1,24,1)
(11,24,1)
(23,10,1)
(45,40,1)
(30,12,1)
(21,36,1)
(28,43,1)
(18,13,1)
(36,46,1)
(10,45,1)
(8,29,1)
(15,17,1)
(32,39,1)
(16,14,1)
(19,0,1)
(39,25,1)
(3,37,1)
(11,3,1)
(25,45,1)
(17,20,1)
(4,26,1)
(26,28,1)
(46,30,1)
(19,1,1)
(14,21,1)
(2,5,1)
(5,6,1)
(47,24,1)
(0,1,1)
(43,11,1)
(1,23,1)
(8,22,1)
(38,7,1)
(7,15,1)
(24,8,1)
(6,16,1)
(2,5,2)
(38,36,2)
(5,36,2)
(15,24,2)
(24,36,2)
(8,29,2)
(7,15,2)
(15,36,2)
(43,36,2)
(45,24,2)
(20,36,2)
(42,36,2)
(29,2,2)
(16,36,2)
(32,45,2)
(3,36,2)
(10,36,2)
(29,46,2)
(6,36,2)
(37,36,2)
(11,24,2)
(28,43,2)
(21,36,2)
(43,11,2)
(34,36,2)
(29,36,2)
(39,45,2)
(13,36,2)
(18,36,2)
(45,36,2)
(7,36,2)
(40,36,2)
(47,36,2)
(1,24,2)
(32,39,2)
(19,36,2)
(25,45,2)
(24,8,2)
(17,36,2)
(0,36,2)
(8,22,2)
(23,36,2)
(1,36,2)
(2,36,2)
(14,36,2)
(19,1,2)
(28,36,2)
(8,36,2)
(11,36,2)
-----------------------------------
(0,intOne)
(1,data[0])
(2,100*sizeof(twoIntsStruct)
(3,0)
(4,RET)
(5,sizeof(twoIntsStruct)
(6,twoIntsStruct)
(7,data[0].intTwo)
(8,(twoIntsStruct *)
(9,if(staticTrue)
(10,data)
(11,data[0])
(12,data)
(13,0)
(14,data)
(15,data[0])
(16,100)
(17,0)
(18,data[0].intOne = 0)
(19,data[0].intOne)
(20,data)
(21,data)
(22,twoIntsStruct *)
(23,0)
(24,data = (twoIntsStruct *)
(25,1)
(26,staticTrue)
(27,)
(28,printStructLine(&data[0])
(29,realloc(data, 100*sizeof(twoIntsStruct)
(30,NULL)
(31,if (data == NULL)
(32,exit(-1)
(33,)
(34,intTwo)
(35,if(staticTrue)
(36,staticTrue)
(37,data)
(38,0)
(39,-1)
(40,NULL)
(41,)
(42,data[0].intTwo = 0)
(43,&data[0])
(44,data)
(45,data == NULL)
(46,data = NULL)
(47,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^