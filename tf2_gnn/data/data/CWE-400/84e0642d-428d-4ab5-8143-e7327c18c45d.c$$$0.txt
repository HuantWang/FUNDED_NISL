-----label-----
1
-----code-----
static void
peer_disc_dscs(struct peer *peer)
{
    struct peer_chr *chr;
    struct peer_svc *svc;
    int rc;

    /* Search through the list of discovered characteristics for the first
     * characteristic that contains undiscovered descriptors.  Then, discover
     * all descriptors belonging to that characteristic.
     */
    SLIST_FOREACH(svc, &peer->svcs, next) {
        SLIST_FOREACH(chr, &svc->chrs, next) {
            if (!chr_is_empty(svc, chr) &&
                SLIST_EMPTY(&chr->dscs) &&
                peer->disc_prev_chr_val <= chr->chr.def_handle) {

                rc = ble_gattc_disc_all_dscs(peer->conn_handle,
                                             chr->chr.val_handle,
                                             chr_end_handle(svc, chr),
                                             peer_dsc_disced, peer);
                if (rc != 0) {
                    peer_disc_complete(peer, rc);
                }

                peer->disc_prev_chr_val = chr->chr.val_handle;
                return;
            }
        }
    }

    /* All descriptors discovered. */
    peer_disc_complete(peer, 0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
32,35
32,36
33,34
35,36
37,38
38,39
38,40
39,40
42,43
44,45
45,46
45,47
45,48
46,47
47,48
47,49
47,50
47,51
48,49
50,51
52,53
53,54
53,55
54,55
57,58
59,60
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
77,78
80,81
80,82
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
91,92
91,93
91,94
91,95
92,93
93,94
93,95
94,95
96,97
96,98
96,99
96,100
96,101
96,102
97,98
99,100
99,101
100,101
103,104
103,105
104,105
104,106
105,106
109,110
109,111
109,112
110,111
112,113
114,115
116,117
118,119
120,121
120,122
121,122
121,123
122,123
125,126
126,127
127,128
127,129
127,130
128,129
130,131
132,133
134,135
135,136
135,137
136,137
136,138
137,138
140,141
140,142
141,142
141,143
142,143
147,148
148,149
148,150
148,151
149,150
151,152
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,25,28,30,34,36,40,41,43,49,51,55,56,58,67,69,71,74,78,79,83,84,88,89,90,95,98,101,102,106,107,108,111,113,115,117,119,123,124,129,131,133,138,139,143,144,145,146,150,152,153
-----computeFrom-----
62,63
62,64
63,64
63,65
80,81
80,82
93,94
93,95
121,122
121,123
135,136
135,137
-----guardedBy-----
69,113
84,139
83,138
89,144
123,133
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static voidpeer_disc_dscs(struct peer *peer){    struct peer_chr *chr;    struct peer_svc *svc;    int rc;    /* Search through the list of discovered characteristics for the first     * characteristic that contains undiscovered descriptors.  Then, discover     * all descriptors belonging to that characteristic.     */    SLIST_FOREACH(svc, &peer->svcs, next) {        SLIST_FOREACH(chr, &svc->chrs, next) {            if (!chr_is_empty(svc, chr) &&                SLIST_EMPTY(&chr->dscs) &&                peer->disc_prev_chr_val <= chr->chr.def_handle) {                rc = ble_gattc_disc_all_dscs(peer->conn_handle,                                             chr->chr.val_handle,                                             chr_end_handle(svc, chr),                                             peer_dsc_disced, peer);                if (rc != 0) {                    peer_disc_complete(peer, rc);                }                peer->disc_prev_chr_val = chr->chr.val_handle;                return;            }        }    }    /* All descriptors discovered. */    peer_disc_complete(peer, 0);}
static void
peer_disc_dscs(struct peer *peer)
peer_disc_dscs
struct peer *peer
struct peer
peer
*peer
*
peer
{    struct peer_chr *chr;    struct peer_svc *svc;    int rc;    /* Search through the list of discovered characteristics for the first     * characteristic that contains undiscovered descriptors.  Then, discover     * all descriptors belonging to that characteristic.     */    SLIST_FOREACH(svc, &peer->svcs, next) {        SLIST_FOREACH(chr, &svc->chrs, next) {            if (!chr_is_empty(svc, chr) &&                SLIST_EMPTY(&chr->dscs) &&                peer->disc_prev_chr_val <= chr->chr.def_handle) {                rc = ble_gattc_disc_all_dscs(peer->conn_handle,                                             chr->chr.val_handle,                                             chr_end_handle(svc, chr),                                             peer_dsc_disced, peer);                if (rc != 0) {                    peer_disc_complete(peer, rc);                }                peer->disc_prev_chr_val = chr->chr.val_handle;                return;            }        }    }    /* All descriptors discovered. */    peer_disc_complete(peer, 0);}
struct peer_chr *chr;
struct peer_chr *chr;
struct peer_chr
peer_chr
*chr
*
chr
struct peer_svc *svc;
struct peer_svc *svc;
struct peer_svc
peer_svc
*svc
*
svc
int rc;
int rc;
int
rc
rc
SLIST_FOREACH(svc, &peer->svcs, next)
SLIST_FOREACH(svc, &peer->svcs, next)
SLIST_FOREACH
SLIST_FOREACH
svc
svc
&peer->svcs
peer->svcs
peer
peer
svcs
next
next
)
{        SLIST_FOREACH(chr, &svc->chrs, next) {            if (!chr_is_empty(svc, chr) &&                SLIST_EMPTY(&chr->dscs) &&                peer->disc_prev_chr_val <= chr->chr.def_handle) {                rc = ble_gattc_disc_all_dscs(peer->conn_handle,                                             chr->chr.val_handle,                                             chr_end_handle(svc, chr),                                             peer_dsc_disced, peer);                if (rc != 0) {                    peer_disc_complete(peer, rc);                }                peer->disc_prev_chr_val = chr->chr.val_handle;                return;            }        }    }
SLIST_FOREACH(chr, &svc->chrs, next)
SLIST_FOREACH(chr, &svc->chrs, next)
SLIST_FOREACH
SLIST_FOREACH
chr
chr
&svc->chrs
svc->chrs
svc
svc
chrs
next
next
)
{            if (!chr_is_empty(svc, chr) &&                SLIST_EMPTY(&chr->dscs) &&                peer->disc_prev_chr_val <= chr->chr.def_handle) {                rc = ble_gattc_disc_all_dscs(peer->conn_handle,                                             chr->chr.val_handle,                                             chr_end_handle(svc, chr),                                             peer_dsc_disced, peer);                if (rc != 0) {                    peer_disc_complete(peer, rc);                }                peer->disc_prev_chr_val = chr->chr.val_handle;                return;            }        }
if (!chr_is_empty(svc, chr) &&                SLIST_EMPTY(&chr->dscs) &&                peer->disc_prev_chr_val <= chr->chr.def_handle) {                rc = ble_gattc_disc_all_dscs(peer->conn_handle,                                             chr->chr.val_handle,                                             chr_end_handle(svc, chr),                                             peer_dsc_disced, peer);                if (rc != 0) {                    peer_disc_complete(peer, rc);                }                peer->disc_prev_chr_val = chr->chr.val_handle;                return;            }
!chr_is_empty(svc, chr) &&                SLIST_EMPTY(&chr->dscs) &&                peer->disc_prev_chr_val <= chr->chr.def_handle
!chr_is_empty(svc, chr) &&                SLIST_EMPTY(&chr->dscs)
!chr_is_empty(svc, chr)
chr_is_empty(svc, chr)
chr_is_empty
chr_is_empty
svc
svc
chr
chr
SLIST_EMPTY(&chr->dscs)
SLIST_EMPTY
SLIST_EMPTY
&chr->dscs
chr->dscs
chr
chr
dscs
peer->disc_prev_chr_val <= chr->chr.def_handle
peer->disc_prev_chr_val
peer
peer
disc_prev_chr_val
chr->chr.def_handle
chr->chr
chr
chr
chr
def_handle
{                rc = ble_gattc_disc_all_dscs(peer->conn_handle,                                             chr->chr.val_handle,                                             chr_end_handle(svc, chr),                                             peer_dsc_disced, peer);                if (rc != 0) {                    peer_disc_complete(peer, rc);                }                peer->disc_prev_chr_val = chr->chr.val_handle;                return;            }
rc = ble_gattc_disc_all_dscs(peer->conn_handle,                                             chr->chr.val_handle,                                             chr_end_handle(svc, chr),                                             peer_dsc_disced, peer);
rc = ble_gattc_disc_all_dscs(peer->conn_handle,                                             chr->chr.val_handle,                                             chr_end_handle(svc, chr),                                             peer_dsc_disced, peer)
rc
rc
ble_gattc_disc_all_dscs(peer->conn_handle,                                             chr->chr.val_handle,                                             chr_end_handle(svc, chr),                                             peer_dsc_disced, peer)
ble_gattc_disc_all_dscs
ble_gattc_disc_all_dscs
peer->conn_handle
peer
peer
conn_handle
chr->chr.val_handle
chr->chr
chr
chr
chr
val_handle
chr_end_handle(svc, chr)
chr_end_handle
chr_end_handle
svc
svc
chr
chr
peer_dsc_disced
peer_dsc_disced
peer
peer
if (rc != 0) {                    peer_disc_complete(peer, rc);                }
rc != 0
rc
rc
0
{                    peer_disc_complete(peer, rc);                }
peer_disc_complete(peer, rc);
peer_disc_complete(peer, rc)
peer_disc_complete
peer_disc_complete
peer
peer
rc
rc
peer->disc_prev_chr_val = chr->chr.val_handle;
peer->disc_prev_chr_val = chr->chr.val_handle
peer->disc_prev_chr_val
peer
peer
disc_prev_chr_val
chr->chr.val_handle
chr->chr
chr
chr
chr
val_handle
return;
peer_disc_complete(peer, 0);
peer_disc_complete(peer, 0)
peer_disc_complete
peer_disc_complete
peer
peer
0
-----joern-----
(32,4,0)
(65,51,0)
(65,0,0)
(60,19,0)
(4,35,0)
(62,45,0)
(61,42,0)
(1,30,0)
(15,19,0)
(0,42,0)
(54,0,0)
(58,20,0)
(63,31,0)
(66,20,0)
(65,63,0)
(33,0,0)
(27,39,0)
(2,59,0)
(46,8,0)
(31,63,0)
(39,45,0)
(18,59,0)
(9,61,0)
(56,62,0)
(52,46,0)
(41,31,0)
(62,56,0)
(16,38,0)
(30,58,0)
(29,28,0)
(6,40,0)
(35,50,0)
(3,38,0)
(44,28,0)
(12,51,0)
(38,35,0)
(28,44,0)
(65,35,0)
(56,11,0)
(22,51,0)
(39,27,0)
(53,50,0)
(8,46,0)
(63,65,0)
(45,39,0)
(40,46,0)
(7,6,0)
(64,4,0)
(11,56,0)
(19,27,0)
(10,20,0)
(24,31,0)
(6,42,0)
(51,65,0)
(57,11,0)
(35,65,0)
(27,19,0)
(0,65,0)
(46,40,0)
(40,50,0)
(34,50,0)
(45,29,0)
(21,65,0)
(59,42,0)
(48,8,0)
(37,11,0)
(29,45,0)
(14,35,0)
(47,6,0)
(38,42,0)
(29,59,0)
(38,25,0)
(43,20,0)
(23,34,0)
(26,63,0)
(59,29,0)
(5,61,0)
(36,65,0)
(13,28,0)
(45,62,0)
(55,8,0)
(28,29,0)
(17,44,0)
(65,42,0)
(49,44,0)
(61,20,0)
(55,48,1)
(52,8,1)
(65,63,1)
(45,29,1)
(41,0,1)
(59,42,1)
(45,39,1)
(46,8,1)
(65,51,1)
(62,45,1)
(0,54,1)
(4,35,1)
(54,33,1)
(44,49,1)
(23,61,1)
(24,41,1)
(6,42,1)
(64,32,1)
(16,3,1)
(29,28,1)
(28,13,1)
(61,9,1)
(6,47,1)
(23,34,1)
(13,44,1)
(48,6,1)
(63,31,1)
(61,42,1)
(35,65,1)
(60,56,1)
(3,4,1)
(8,55,1)
(32,35,1)
(4,64,1)
(38,35,1)
(63,26,1)
(51,12,1)
(12,22,1)
(21,51,1)
(31,24,1)
(40,46,1)
(49,17,1)
(47,7,1)
(17,59,1)
(39,27,1)
(56,11,1)
(18,2,1)
(14,62,1)
(22,63,1)
(46,52,1)
(65,36,1)
(33,14,1)
(38,16,1)
(62,56,1)
(28,44,1)
(7,38,1)
(37,57,1)
(15,60,1)
(65,42,1)
(19,15,1)
(38,42,1)
(27,19,1)
(9,5,1)
(29,59,1)
(2,39,1)
(7,4,1)
(65,0,1)
(36,21,1)
(26,31,1)
(5,62,1)
(59,18,1)
(0,42,1)
(11,37,1)
(34,40,1)
(21,62,2)
(45,39,2)
(12,62,2)
(60,56,2)
(65,62,2)
(61,42,2)
(55,62,2)
(61,62,2)
(54,62,2)
(6,62,2)
(56,11,2)
(46,8,2)
(15,56,2)
(29,39,2)
(28,44,2)
(65,63,2)
(39,27,2)
(36,62,2)
(63,62,2)
(62,56,2)
(45,29,2)
(16,4,2)
(38,42,2)
(31,62,2)
(9,62,2)
(63,31,2)
(64,62,2)
(59,42,2)
(5,62,2)
(4,62,2)
(48,62,2)
(29,28,2)
(65,42,2)
(29,59,2)
(26,62,2)
(38,4,2)
(14,62,2)
(51,62,2)
(59,39,2)
(23,34,2)
(32,62,2)
(19,56,2)
(34,62,2)
(44,39,2)
(8,62,2)
(28,39,2)
(40,62,2)
(7,62,2)
(39,56,2)
(65,0,2)
(18,39,2)
(40,46,2)
(27,19,2)
(13,39,2)
(35,62,2)
(27,56,2)
(46,62,2)
(52,62,2)
(45,56,2)
(3,4,2)
(35,65,2)
(33,62,2)
(6,42,2)
(38,35,2)
(0,42,2)
(22,62,2)
(62,45,2)
(41,62,2)
(47,62,2)
(24,62,2)
(4,35,2)
(2,39,2)
(49,39,2)
(65,51,2)
(17,39,2)
(0,62,2)
-----------------------------------
(0,peer->conn_handle)
(1,if (!chr_is_empty(svc, chr)
(2,peer)
(3,peer)
(4,rc != 0)
(5,peer)
(6,peer->disc_prev_chr_val)
(7,peer)
(8,chr->chr)
(9,0)
(10,svc)
(11,chr_is_empty(svc, chr)
(12,chr)
(13,def_handle)
(14,rc)
(15,dscs)
(16,rc)
(17,chr)
(18,disc_prev_chr_val)
(19,chr->dscs)
(20,)
(21,peer_dsc_disced)
(22,svc)
(23,RET)
(24,chr)
(25,)
(26,val_handle)
(27,&chr->dscs)
(28,chr->chr.def_handle)
(29,peer->disc_prev_chr_val <= chr->chr.def_handle)
(30,)
(31,chr->chr)
(32,rc)
(33,peer)
(34,return;)
(35,rc = ble_gattc_disc_all_dscs(peer->conn_handle,\n\\n                                             chr->chr.val_handle,\n\\n                                             chr_end_handle(svc, chr)
(36,peer)
(37,chr)
(38,peer_disc_complete(peer, rc)
(39,SLIST_EMPTY(&chr->dscs)
(40,peer->disc_prev_chr_val = chr->chr.val_handle)
(41,chr)
(42,struct peer *peer)
(43,rc)
(44,chr->chr)
(45,SLIST_EMPTY(&chr->dscs)
(46,chr->chr.val_handle)
(47,disc_prev_chr_val)
(48,chr)
(49,chr)
(50,)
(51,chr_end_handle(svc, chr)
(52,val_handle)
(53,if (rc != 0)
(54,conn_handle)
(55,chr)
(56,!chr_is_empty(svc, chr)
(57,svc)
(58,)
(59,peer->disc_prev_chr_val)
(60,chr)
(61,peer_disc_complete(peer, 0)
(62,!chr_is_empty(svc, chr)
(63,chr->chr.val_handle)
(64,0)
(65,ble_gattc_disc_all_dscs(peer->conn_handle,\n\\n                                             chr->chr.val_handle,\n\\n                                             chr_end_handle(svc, chr)
(66,chr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^