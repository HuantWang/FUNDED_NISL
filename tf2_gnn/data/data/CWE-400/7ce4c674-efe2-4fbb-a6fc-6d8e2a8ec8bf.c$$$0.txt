-----label-----
1
-----code-----
void mca_pml_teg_send_request_schedule(mca_pml_base_send_request_t* req)
{
    ompi_proc_t *proc = ompi_comm_peer_lookup(req->req_base.req_comm, req->req_base.req_peer);
    mca_pml_proc_t* proc_pml = proc->proc_pml;

    /* allocate remaining bytes to PTLs */
    size_t bytes_remaining = req->req_bytes_packed - req->req_offset;
    size_t num_ptl_avail = proc_pml->proc_ptl_next.ptl_size;
    size_t num_ptl = 0;
    while(bytes_remaining > 0 && num_ptl++ < num_ptl_avail) {
        mca_ptl_proc_t* ptl_proc = mca_ptl_array_get_next(&proc_pml->proc_ptl_next);
        mca_ptl_base_module_t* ptl = ptl_proc->ptl;
        int rc;

        /* if this is the last PTL that is available to use, or the number of
         * bytes remaining in the message is less than the PTLs minimum fragment
         * size, then go ahead and give the rest of the message to this PTL.
         */
        size_t bytes_to_frag;
        if(num_ptl == num_ptl_avail || bytes_remaining < ptl->ptl_min_frag_size)
            bytes_to_frag = bytes_remaining;

        /* otherwise attempt to give the PTL a percentage of the message
         * based on a weighting factor. for simplicity calculate this as
         * a percentage of the overall message length (regardless of amount
         * previously assigned)
         */
        else {
            bytes_to_frag = (ptl_proc->ptl_weight * bytes_remaining) / 100;
            if(ptl->ptl_max_frag_size != 0 && bytes_to_frag > ptl->ptl_max_frag_size)
                bytes_to_frag = ptl->ptl_max_frag_size;
        }

        rc = ptl->ptl_put(ptl, ptl_proc->ptl_peer, req, req->req_offset, bytes_to_frag, 0);
        if(rc == OMPI_SUCCESS) {
            bytes_remaining = req->req_bytes_packed - req->req_offset;
        }
    }

    /* unable to complete send - signal request failed */
    if(bytes_remaining > 0) {
        OMPI_THREAD_LOCK(&ompi_request_lock);
        req->req_base.req_ompi.req_complete = true;
        /* FIX - set status correctly */
        if(ompi_request_waiting)
            ompi_condition_broadcast(&ompi_request_cond);
        OMPI_THREAD_UNLOCK(&ompi_request_lock);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
20,23
21,22
23,24
23,25
24,25
24,26
25,26
29,30
29,31
30,31
30,32
31,32
35,36
36,37
36,38
37,38
39,40
39,41
39,42
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
55,56
55,57
56,57
59,60
59,61
60,61
63,64
64,65
64,66
65,66
67,68
67,69
69,70
70,71
70,72
71,72
71,73
72,73
76,77
77,78
77,79
78,79
80,81
80,82
82,83
84,85
84,86
85,86
85,87
86,87
86,88
87,88
90,91
90,92
91,92
92,93
94,95
96,97
96,98
96,99
96,100
96,101
96,102
96,103
97,98
98,99
98,100
99,100
101,102
101,103
101,104
104,105
105,106
105,107
106,107
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
117,118
117,119
117,120
120,121
121,122
121,123
122,123
125,126
126,127
126,128
128,129
130,131
131,132
131,133
132,133
134,135
136,137
136,138
136,139
137,138
137,139
138,139
138,140
139,140
141,142
143,144
143,145
144,145
146,147
146,148
147,148
150,151
151,152
151,153
152,153
154,155
156,157
156,158
157,158
158,159
158,160
159,160
161,162
161,163
162,163
163,164
163,165
164,165
164,166
165,166
168,169
171,172
171,173
172,173
172,174
173,174
173,175
174,175
174,176
175,176
179,180
179,181
180,181
182,183
182,184
183,184
186,187
187,188
187,189
188,189
190,191
190,192
191,192
194,195
195,196
195,197
196,197
198,199
198,200
198,201
198,202
198,203
198,204
198,205
199,200
199,201
200,201
203,204
205,206
205,207
206,207
209,210
211,212
211,213
212,213
215,216
218,219
218,220
219,220
219,221
220,221
222,223
224,225
225,226
226,227
226,228
227,228
229,230
229,231
230,231
230,232
231,232
234,235
234,236
235,236
238,239
238,240
239,240
239,241
240,241
243,244
243,245
243,246
243,247
244,245
245,246
245,247
246,247
248,249
249,250
249,251
252,253
253,254
253,255
254,255
254,256
255,256
255,257
256,257
256,258
257,258
263,264
263,265
264,265
266,267
267,268
267,269
268,269
270,271
271,272
271,273
274,275
275,276
275,277
276,277
278,279
279,280
-----nextToken-----
2,4,7,9,10,15,17,18,22,26,27,28,32,33,34,38,40,41,45,46,50,52,57,58,61,62,66,68,73,74,75,79,81,83,88,89,93,95,100,102,103,107,111,112,116,118,119,123,124,127,129,133,135,140,142,145,148,149,153,155,160,166,167,169,170,176,177,178,181,184,185,189,192,193,197,201,202,204,207,208,210,213,214,216,217,221,223,228,232,233,236,237,241,242,247,250,251,258,259,260,261,262,265,269,272,273,277,280
-----computeFrom-----
54,55
54,56
85,86
85,87
86,87
86,88
90,91
90,92
137,138
137,139
138,139
138,140
143,144
143,145
151,152
151,153
158,159
158,160
161,162
161,163
163,164
163,165
172,173
172,174
173,174
173,175
179,180
179,181
187,188
187,189
195,196
195,197
219,220
219,221
226,227
226,228
229,230
229,231
239,240
239,241
253,254
253,255
-----guardedBy-----
145,155
184,192
185,193
181,189
-----guardedByNegation-----
148,192
145,169
-----lastLexicalUse-----
145,169
-----jump-----
145,169
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;WhileStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void mca_pml_teg_send_request_schedule(mca_pml_base_send_request_t* req){    ompi_proc_t *proc = ompi_comm_peer_lookup(req->req_base.req_comm, req->req_base.req_peer);    mca_pml_proc_t* proc_pml = proc->proc_pml;    /* allocate remaining bytes to PTLs */    size_t bytes_remaining = req->req_bytes_packed - req->req_offset;    size_t num_ptl_avail = proc_pml->proc_ptl_next.ptl_size;    size_t num_ptl = 0;    while(bytes_remaining > 0 && num_ptl++ < num_ptl_avail) {        mca_ptl_proc_t* ptl_proc = mca_ptl_array_get_next(&proc_pml->proc_ptl_next);        mca_ptl_base_module_t* ptl = ptl_proc->ptl;        int rc;        /* if this is the last PTL that is available to use, or the number of         * bytes remaining in the message is less than the PTLs minimum fragment         * size, then go ahead and give the rest of the message to this PTL.         */        size_t bytes_to_frag;        if(num_ptl == num_ptl_avail || bytes_remaining < ptl->ptl_min_frag_size)            bytes_to_frag = bytes_remaining;        /* otherwise attempt to give the PTL a percentage of the message         * based on a weighting factor. for simplicity calculate this as         * a percentage of the overall message length (regardless of amount         * previously assigned)         */        else {            bytes_to_frag = (ptl_proc->ptl_weight * bytes_remaining) / 100;            if(ptl->ptl_max_frag_size != 0 && bytes_to_frag > ptl->ptl_max_frag_size)                bytes_to_frag = ptl->ptl_max_frag_size;        }        rc = ptl->ptl_put(ptl, ptl_proc->ptl_peer, req, req->req_offset, bytes_to_frag, 0);        if(rc == OMPI_SUCCESS) {            bytes_remaining = req->req_bytes_packed - req->req_offset;        }    }    /* unable to complete send - signal request failed */    if(bytes_remaining > 0) {        OMPI_THREAD_LOCK(&ompi_request_lock);        req->req_base.req_ompi.req_complete = true;        /* FIX - set status correctly */        if(ompi_request_waiting)            ompi_condition_broadcast(&ompi_request_cond);        OMPI_THREAD_UNLOCK(&ompi_request_lock);    }}
void
mca_pml_teg_send_request_schedule(mca_pml_base_send_request_t* req)
mca_pml_teg_send_request_schedule
mca_pml_base_send_request_t* req
mca_pml_base_send_request_t
mca_pml_base_send_request_t
* req
*
req
{    ompi_proc_t *proc = ompi_comm_peer_lookup(req->req_base.req_comm, req->req_base.req_peer);    mca_pml_proc_t* proc_pml = proc->proc_pml;    /* allocate remaining bytes to PTLs */    size_t bytes_remaining = req->req_bytes_packed - req->req_offset;    size_t num_ptl_avail = proc_pml->proc_ptl_next.ptl_size;    size_t num_ptl = 0;    while(bytes_remaining > 0 && num_ptl++ < num_ptl_avail) {        mca_ptl_proc_t* ptl_proc = mca_ptl_array_get_next(&proc_pml->proc_ptl_next);        mca_ptl_base_module_t* ptl = ptl_proc->ptl;        int rc;        /* if this is the last PTL that is available to use, or the number of         * bytes remaining in the message is less than the PTLs minimum fragment         * size, then go ahead and give the rest of the message to this PTL.         */        size_t bytes_to_frag;        if(num_ptl == num_ptl_avail || bytes_remaining < ptl->ptl_min_frag_size)            bytes_to_frag = bytes_remaining;        /* otherwise attempt to give the PTL a percentage of the message         * based on a weighting factor. for simplicity calculate this as         * a percentage of the overall message length (regardless of amount         * previously assigned)         */        else {            bytes_to_frag = (ptl_proc->ptl_weight * bytes_remaining) / 100;            if(ptl->ptl_max_frag_size != 0 && bytes_to_frag > ptl->ptl_max_frag_size)                bytes_to_frag = ptl->ptl_max_frag_size;        }        rc = ptl->ptl_put(ptl, ptl_proc->ptl_peer, req, req->req_offset, bytes_to_frag, 0);        if(rc == OMPI_SUCCESS) {            bytes_remaining = req->req_bytes_packed - req->req_offset;        }    }    /* unable to complete send - signal request failed */    if(bytes_remaining > 0) {        OMPI_THREAD_LOCK(&ompi_request_lock);        req->req_base.req_ompi.req_complete = true;        /* FIX - set status correctly */        if(ompi_request_waiting)            ompi_condition_broadcast(&ompi_request_cond);        OMPI_THREAD_UNLOCK(&ompi_request_lock);    }}
ompi_proc_t *proc = ompi_comm_peer_lookup(req->req_base.req_comm, req->req_base.req_peer);
ompi_proc_t *proc = ompi_comm_peer_lookup(req->req_base.req_comm, req->req_base.req_peer);
ompi_proc_t
ompi_proc_t
*proc = ompi_comm_peer_lookup(req->req_base.req_comm, req->req_base.req_peer)
*
proc
= ompi_comm_peer_lookup(req->req_base.req_comm, req->req_base.req_peer)
ompi_comm_peer_lookup(req->req_base.req_comm, req->req_base.req_peer)
ompi_comm_peer_lookup
ompi_comm_peer_lookup
req->req_base.req_comm
req->req_base
req
req
req_base
req_comm
req->req_base.req_peer
req->req_base
req
req
req_base
req_peer
mca_pml_proc_t* proc_pml = proc->proc_pml;
mca_pml_proc_t* proc_pml = proc->proc_pml;
mca_pml_proc_t
mca_pml_proc_t
* proc_pml = proc->proc_pml
*
proc_pml
= proc->proc_pml
proc->proc_pml
proc
proc
proc_pml
size_t bytes_remaining = req->req_bytes_packed - req->req_offset;
size_t bytes_remaining = req->req_bytes_packed - req->req_offset;
size_t
size_t
bytes_remaining = req->req_bytes_packed - req->req_offset
bytes_remaining
= req->req_bytes_packed - req->req_offset
req->req_bytes_packed - req->req_offset
req->req_bytes_packed
req
req
req_bytes_packed
req->req_offset
req
req
req_offset
size_t num_ptl_avail = proc_pml->proc_ptl_next.ptl_size;
size_t num_ptl_avail = proc_pml->proc_ptl_next.ptl_size;
size_t
size_t
num_ptl_avail = proc_pml->proc_ptl_next.ptl_size
num_ptl_avail
= proc_pml->proc_ptl_next.ptl_size
proc_pml->proc_ptl_next.ptl_size
proc_pml->proc_ptl_next
proc_pml
proc_pml
proc_ptl_next
ptl_size
size_t num_ptl = 0;
size_t num_ptl = 0;
size_t
size_t
num_ptl = 0
num_ptl
= 0
0
while(bytes_remaining > 0 && num_ptl++ < num_ptl_avail) {        mca_ptl_proc_t* ptl_proc = mca_ptl_array_get_next(&proc_pml->proc_ptl_next);        mca_ptl_base_module_t* ptl = ptl_proc->ptl;        int rc;        /* if this is the last PTL that is available to use, or the number of         * bytes remaining in the message is less than the PTLs minimum fragment         * size, then go ahead and give the rest of the message to this PTL.         */        size_t bytes_to_frag;        if(num_ptl == num_ptl_avail || bytes_remaining < ptl->ptl_min_frag_size)            bytes_to_frag = bytes_remaining;        /* otherwise attempt to give the PTL a percentage of the message         * based on a weighting factor. for simplicity calculate this as         * a percentage of the overall message length (regardless of amount         * previously assigned)         */        else {            bytes_to_frag = (ptl_proc->ptl_weight * bytes_remaining) / 100;            if(ptl->ptl_max_frag_size != 0 && bytes_to_frag > ptl->ptl_max_frag_size)                bytes_to_frag = ptl->ptl_max_frag_size;        }        rc = ptl->ptl_put(ptl, ptl_proc->ptl_peer, req, req->req_offset, bytes_to_frag, 0);        if(rc == OMPI_SUCCESS) {            bytes_remaining = req->req_bytes_packed - req->req_offset;        }    }
bytes_remaining > 0 && num_ptl++ < num_ptl_avail
bytes_remaining > 0
bytes_remaining
bytes_remaining
0
num_ptl++ < num_ptl_avail
num_ptl++
num_ptl
num_ptl
num_ptl_avail
num_ptl_avail
{        mca_ptl_proc_t* ptl_proc = mca_ptl_array_get_next(&proc_pml->proc_ptl_next);        mca_ptl_base_module_t* ptl = ptl_proc->ptl;        int rc;        /* if this is the last PTL that is available to use, or the number of         * bytes remaining in the message is less than the PTLs minimum fragment         * size, then go ahead and give the rest of the message to this PTL.         */        size_t bytes_to_frag;        if(num_ptl == num_ptl_avail || bytes_remaining < ptl->ptl_min_frag_size)            bytes_to_frag = bytes_remaining;        /* otherwise attempt to give the PTL a percentage of the message         * based on a weighting factor. for simplicity calculate this as         * a percentage of the overall message length (regardless of amount         * previously assigned)         */        else {            bytes_to_frag = (ptl_proc->ptl_weight * bytes_remaining) / 100;            if(ptl->ptl_max_frag_size != 0 && bytes_to_frag > ptl->ptl_max_frag_size)                bytes_to_frag = ptl->ptl_max_frag_size;        }        rc = ptl->ptl_put(ptl, ptl_proc->ptl_peer, req, req->req_offset, bytes_to_frag, 0);        if(rc == OMPI_SUCCESS) {            bytes_remaining = req->req_bytes_packed - req->req_offset;        }    }
mca_ptl_proc_t* ptl_proc = mca_ptl_array_get_next(&proc_pml->proc_ptl_next);
mca_ptl_proc_t* ptl_proc = mca_ptl_array_get_next(&proc_pml->proc_ptl_next);
mca_ptl_proc_t
mca_ptl_proc_t
* ptl_proc = mca_ptl_array_get_next(&proc_pml->proc_ptl_next)
*
ptl_proc
= mca_ptl_array_get_next(&proc_pml->proc_ptl_next)
mca_ptl_array_get_next(&proc_pml->proc_ptl_next)
mca_ptl_array_get_next
mca_ptl_array_get_next
&proc_pml->proc_ptl_next
proc_pml->proc_ptl_next
proc_pml
proc_pml
proc_ptl_next
mca_ptl_base_module_t* ptl = ptl_proc->ptl;
mca_ptl_base_module_t* ptl = ptl_proc->ptl;
mca_ptl_base_module_t
mca_ptl_base_module_t
* ptl = ptl_proc->ptl
*
ptl
= ptl_proc->ptl
ptl_proc->ptl
ptl_proc
ptl_proc
ptl
int rc;
int rc;
int
rc
rc
size_t bytes_to_frag;
size_t bytes_to_frag;
size_t
size_t
bytes_to_frag
bytes_to_frag
if(num_ptl == num_ptl_avail || bytes_remaining < ptl->ptl_min_frag_size)            bytes_to_frag = bytes_remaining;        /* otherwise attempt to give the PTL a percentage of the message         * based on a weighting factor. for simplicity calculate this as         * a percentage of the overall message length (regardless of amount         * previously assigned)         */        else {            bytes_to_frag = (ptl_proc->ptl_weight * bytes_remaining) / 100;            if(ptl->ptl_max_frag_size != 0 && bytes_to_frag > ptl->ptl_max_frag_size)                bytes_to_frag = ptl->ptl_max_frag_size;        }
num_ptl == num_ptl_avail || bytes_remaining < ptl->ptl_min_frag_size
num_ptl == num_ptl_avail
num_ptl
num_ptl
num_ptl_avail
num_ptl_avail
bytes_remaining < ptl->ptl_min_frag_size
bytes_remaining
bytes_remaining
ptl->ptl_min_frag_size
ptl
ptl
ptl_min_frag_size
bytes_to_frag = bytes_remaining;
bytes_to_frag = bytes_remaining
bytes_to_frag
bytes_to_frag
bytes_remaining
bytes_remaining
{            bytes_to_frag = (ptl_proc->ptl_weight * bytes_remaining) / 100;            if(ptl->ptl_max_frag_size != 0 && bytes_to_frag > ptl->ptl_max_frag_size)                bytes_to_frag = ptl->ptl_max_frag_size;        }
bytes_to_frag = (ptl_proc->ptl_weight * bytes_remaining) / 100;
bytes_to_frag = (ptl_proc->ptl_weight * bytes_remaining) / 100
bytes_to_frag
bytes_to_frag
(ptl_proc->ptl_weight * bytes_remaining) / 100
(ptl_proc->ptl_weight * bytes_remaining)
ptl_proc->ptl_weight * bytes_remaining
ptl_proc->ptl_weight
ptl_proc
ptl_proc
ptl_weight
bytes_remaining
bytes_remaining
100
if(ptl->ptl_max_frag_size != 0 && bytes_to_frag > ptl->ptl_max_frag_size)                bytes_to_frag = ptl->ptl_max_frag_size;
ptl->ptl_max_frag_size != 0 && bytes_to_frag > ptl->ptl_max_frag_size
ptl->ptl_max_frag_size != 0
ptl->ptl_max_frag_size
ptl
ptl
ptl_max_frag_size
0
bytes_to_frag > ptl->ptl_max_frag_size
bytes_to_frag
bytes_to_frag
ptl->ptl_max_frag_size
ptl
ptl
ptl_max_frag_size
bytes_to_frag = ptl->ptl_max_frag_size;
bytes_to_frag = ptl->ptl_max_frag_size
bytes_to_frag
bytes_to_frag
ptl->ptl_max_frag_size
ptl
ptl
ptl_max_frag_size
rc = ptl->ptl_put(ptl, ptl_proc->ptl_peer, req, req->req_offset, bytes_to_frag, 0);
rc = ptl->ptl_put(ptl, ptl_proc->ptl_peer, req, req->req_offset, bytes_to_frag, 0)
rc
rc
ptl->ptl_put(ptl, ptl_proc->ptl_peer, req, req->req_offset, bytes_to_frag, 0)
ptl->ptl_put
ptl
ptl
ptl_put
ptl
ptl
ptl_proc->ptl_peer
ptl_proc
ptl_proc
ptl_peer
req
req
req->req_offset
req
req
req_offset
bytes_to_frag
bytes_to_frag
0
if(rc == OMPI_SUCCESS) {            bytes_remaining = req->req_bytes_packed - req->req_offset;        }
rc == OMPI_SUCCESS
rc
rc
OMPI_SUCCESS
OMPI_SUCCESS
{            bytes_remaining = req->req_bytes_packed - req->req_offset;        }
bytes_remaining = req->req_bytes_packed - req->req_offset;
bytes_remaining = req->req_bytes_packed - req->req_offset
bytes_remaining
bytes_remaining
req->req_bytes_packed - req->req_offset
req->req_bytes_packed
req
req
req_bytes_packed
req->req_offset
req
req
req_offset
if(bytes_remaining > 0) {        OMPI_THREAD_LOCK(&ompi_request_lock);        req->req_base.req_ompi.req_complete = true;        /* FIX - set status correctly */        if(ompi_request_waiting)            ompi_condition_broadcast(&ompi_request_cond);        OMPI_THREAD_UNLOCK(&ompi_request_lock);    }
bytes_remaining > 0
bytes_remaining
bytes_remaining
0
{        OMPI_THREAD_LOCK(&ompi_request_lock);        req->req_base.req_ompi.req_complete = true;        /* FIX - set status correctly */        if(ompi_request_waiting)            ompi_condition_broadcast(&ompi_request_cond);        OMPI_THREAD_UNLOCK(&ompi_request_lock);    }
OMPI_THREAD_LOCK(&ompi_request_lock);
OMPI_THREAD_LOCK(&ompi_request_lock);
OMPI_THREAD_LOCK
OMPI_THREAD_LOCK
(&ompi_request_lock)
&ompi_request_lock
&
ompi_request_lock
req->req_base.req_ompi.req_complete = true;
req->req_base.req_ompi.req_complete = true
req->req_base.req_ompi.req_complete
req->req_base.req_ompi
req->req_base
req
req
req_base
req_ompi
req_complete
true
if(ompi_request_waiting)            ompi_condition_broadcast(&ompi_request_cond);
ompi_request_waiting
ompi_request_waiting
ompi_condition_broadcast(&ompi_request_cond);
ompi_condition_broadcast(&ompi_request_cond);
ompi_condition_broadcast
ompi_condition_broadcast
(&ompi_request_cond)
&ompi_request_cond
&
ompi_request_cond
OMPI_THREAD_UNLOCK(&ompi_request_lock);
OMPI_THREAD_UNLOCK(&ompi_request_lock)
OMPI_THREAD_UNLOCK
OMPI_THREAD_UNLOCK
&ompi_request_lock
ompi_request_lock
ompi_request_lock
-----joern-----
(44,39,0)
(61,30,0)
(7,16,0)
(13,132,0)
(22,104,0)
(139,39,0)
(116,39,0)
(126,108,0)
(70,123,0)
(125,6,0)
(101,45,0)
(21,34,0)
(106,111,0)
(155,104,0)
(64,34,0)
(53,96,0)
(41,34,0)
(81,159,0)
(4,111,0)
(77,123,0)
(114,8,0)
(128,39,0)
(34,21,0)
(95,146,0)
(30,58,0)
(153,60,0)
(92,128,0)
(79,81,0)
(22,92,0)
(52,102,0)
(145,39,0)
(122,0,0)
(141,108,0)
(127,152,0)
(45,101,0)
(87,99,0)
(162,155,0)
(12,76,0)
(28,79,0)
(115,146,0)
(67,5,0)
(142,116,0)
(0,122,0)
(79,40,0)
(79,99,0)
(130,108,0)
(14,56,0)
(68,101,0)
(51,126,0)
(43,79,0)
(10,41,0)
(62,45,0)
(99,79,0)
(18,42,0)
(85,39,0)
(30,96,0)
(159,22,0)
(125,102,0)
(101,0,0)
(100,92,0)
(112,21,0)
(50,60,0)
(157,95,0)
(146,135,0)
(9,141,0)
(56,112,0)
(107,82,0)
(155,149,0)
(16,40,0)
(111,149,0)
(112,56,0)
(156,45,0)
(45,116,0)
(128,24,0)
(151,107,0)
(38,132,0)
(66,24,0)
(6,125,0)
(101,81,0)
(76,40,0)
(11,116,0)
(123,77,0)
(8,128,0)
(80,21,0)
(15,5,0)
(0,101,0)
(103,148,0)
(19,76,0)
(96,102,0)
(109,48,0)
(25,95,0)
(123,104,0)
(56,40,0)
(159,81,0)
(65,22,0)
(31,152,0)
(136,135,0)
(132,149,0)
(29,159,0)
(57,79,0)
(104,35,0)
(59,135,0)
(124,92,0)
(144,135,0)
(146,41,0)
(118,26,0)
(19,16,0)
(108,135,0)
(86,149,0)
(76,19,0)
(35,104,0)
(143,131,0)
(116,8,0)
(24,66,0)
(105,142,0)
(93,99,0)
(79,72,0)
(80,133,0)
(41,146,0)
(63,55,0)
(42,72,0)
(155,162,0)
(119,79,0)
(123,55,0)
(104,135,0)
(60,40,0)
(79,116,0)
(111,104,0)
(161,108,0)
(55,123,0)
(60,35,0)
(79,119,0)
(48,152,0)
(149,160,0)
(49,146,0)
(69,82,0)
(152,48,0)
(107,115,0)
(120,142,0)
(88,135,0)
(5,58,0)
(55,116,0)
(98,69,0)
(82,135,0)
(36,6,0)
(142,122,0)
(82,107,0)
(79,48,0)
(22,149,0)
(121,39,0)
(95,66,0)
(162,69,0)
(148,103,0)
(72,39,0)
(58,5,0)
(69,162,0)
(74,119,0)
(58,30,0)
(19,149,0)
(138,72,0)
(37,16,0)
(132,104,0)
(83,39,0)
(133,40,0)
(129,41,0)
(24,128,0)
(122,142,0)
(137,155,0)
(33,119,0)
(23,55,0)
(84,133,0)
(35,60,0)
(147,102,0)
(71,135,0)
(97,8,0)
(79,111,0)
(73,131,0)
(115,107,0)
(147,26,0)
(81,32,0)
(99,40,0)
(26,147,0)
(77,141,0)
(150,56,0)
(94,141,0)
(126,69,0)
(66,95,0)
(89,115,0)
(152,116,0)
(91,115,0)
(131,35,0)
(3,122,0)
(20,112,0)
(154,155,0)
(78,135,0)
(72,79,0)
(134,133,0)
(35,131,0)
(2,80,0)
(131,40,0)
(123,149,0)
(140,82,0)
(141,77,0)
(75,42,0)
(17,81,0)
(22,159,0)
(54,104,0)
(119,128,0)
(133,80,0)
(1,76,0)
(16,19,0)
(21,112,0)
(113,128,0)
(21,80,0)
(27,58,0)
(46,79,0)
(110,148,0)
(8,116,0)
(47,32,0)
(5,40,0)
(69,126,0)
(92,22,0)
(117,135,0)
(141,82,0)
(34,135,0)
(149,19,0)
(20,56,1)
(86,42,1)
(73,143,1)
(84,134,1)
(110,90,1)
(89,91,1)
(95,25,1)
(41,34,1)
(112,20,1)
(131,40,1)
(51,155,1)
(30,58,1)
(81,159,1)
(157,113,1)
(114,97,1)
(127,109,1)
(108,161,1)
(79,40,1)
(100,124,1)
(21,112,1)
(93,87,1)
(132,38,1)
(31,127,1)
(4,77,1)
(7,76,1)
(92,128,1)
(0,122,1)
(13,162,1)
(5,15,1)
(152,116,1)
(60,40,1)
(37,7,1)
(53,30,1)
(3,142,1)
(79,119,1)
(116,8,1)
(36,90,1)
(126,51,1)
(154,149,1)
(62,156,1)
(123,149,1)
(79,48,1)
(103,148,1)
(147,26,1)
(56,150,1)
(25,157,1)
(77,141,1)
(60,153,1)
(158,132,1)
(54,146,1)
(106,4,1)
(137,154,1)
(99,93,1)
(27,5,1)
(128,24,1)
(90,96,1)
(74,33,1)
(155,149,1)
(155,137,1)
(156,68,1)
(111,104,1)
(14,80,1)
(28,46,1)
(35,131,1)
(22,104,1)
(115,89,1)
(79,111,1)
(77,123,1)
(41,129,1)
(19,76,1)
(43,119,1)
(23,63,1)
(119,128,1)
(65,92,1)
(56,40,1)
(159,22,1)
(55,23,1)
(152,31,1)
(48,152,1)
(10,49,1)
(68,122,1)
(124,17,1)
(107,115,1)
(82,107,1)
(148,110,1)
(132,104,1)
(95,146,1)
(112,56,1)
(126,108,1)
(42,72,1)
(123,55,1)
(63,70,1)
(162,69,1)
(113,162,1)
(16,40,1)
(123,104,1)
(131,73,1)
(79,28,1)
(104,35,1)
(69,126,1)
(155,104,1)
(149,19,1)
(109,0,1)
(8,128,1)
(154,108,1)
(134,64,1)
(15,67,1)
(151,115,1)
(125,6,1)
(35,60,1)
(161,130,1)
(19,16,1)
(132,149,1)
(22,92,1)
(46,99,1)
(76,12,1)
(138,0,1)
(97,11,1)
(159,29,1)
(72,79,1)
(141,82,1)
(142,116,1)
(45,116,1)
(42,18,1)
(143,54,1)
(111,149,1)
(49,34,1)
(36,103,1)
(80,133,1)
(58,5,1)
(130,82,1)
(8,114,1)
(120,81,1)
(61,58,1)
(16,37,1)
(29,22,1)
(140,104,1)
(58,27,1)
(91,140,1)
(96,53,1)
(79,116,1)
(6,36,1)
(34,21,1)
(138,111,1)
(115,146,1)
(22,149,1)
(129,10,1)
(26,118,1)
(141,9,1)
(154,42,1)
(50,131,1)
(66,95,1)
(142,105,1)
(146,41,1)
(0,101,1)
(30,61,1)
(122,142,1)
(5,40,1)
(12,1,1)
(69,82,1)
(24,66,1)
(67,147,1)
(105,120,1)
(153,50,1)
(2,133,1)
(21,80,1)
(76,40,1)
(92,100,1)
(75,72,1)
(69,98,1)
(98,126,1)
(11,128,1)
(138,48,1)
(80,2,1)
(9,94,1)
(18,75,1)
(141,108,1)
(162,155,1)
(45,62,1)
(70,141,1)
(133,84,1)
(94,116,1)
(119,74,1)
(79,81,1)
(107,151,1)
(33,57,1)
(150,14,1)
(118,132,1)
(101,45,1)
(79,99,1)
(55,116,1)
(17,77,1)
(111,106,1)
(1,86,1)
(57,138,1)
(38,13,1)
(158,125,1)
(101,81,1)
(122,3,1)
(22,65,1)
(133,40,1)
(99,40,1)
(87,43,1)
(72,162,2)
(79,40,2)
(138,162,2)
(18,162,2)
(152,116,2)
(113,162,2)
(149,19,2)
(8,128,2)
(33,162,2)
(103,148,2)
(123,141,2)
(22,92,2)
(116,162,2)
(69,155,2)
(66,162,2)
(35,60,2)
(74,162,2)
(147,132,2)
(126,155,2)
(142,77,2)
(16,40,2)
(128,24,2)
(19,16,2)
(123,149,2)
(106,77,2)
(119,128,2)
(124,77,2)
(162,69,2)
(0,77,2)
(92,77,2)
(77,162,2)
(30,132,2)
(107,115,2)
(119,162,2)
(146,41,2)
(16,42,2)
(65,77,2)
(131,40,2)
(132,149,2)
(142,116,2)
(111,77,2)
(35,131,2)
(0,122,2)
(93,162,2)
(77,141,2)
(63,141,2)
(1,42,2)
(118,132,2)
(70,141,2)
(99,40,2)
(94,162,2)
(141,108,2)
(133,40,2)
(43,162,2)
(15,132,2)
(23,141,2)
(29,77,2)
(66,95,2)
(76,40,2)
(155,104,2)
(79,162,2)
(9,162,2)
(61,132,2)
(79,81,2)
(36,132,2)
(116,8,2)
(114,162,2)
(125,132,2)
(30,58,2)
(75,162,2)
(115,146,2)
(103,90,2)
(22,149,2)
(51,155,2)
(53,132,2)
(162,162,2)
(69,126,2)
(122,142,2)
(86,42,2)
(100,77,2)
(17,77,2)
(81,159,2)
(42,162,2)
(155,162,2)
(55,116,2)
(12,42,2)
(95,162,2)
(111,104,2)
(69,82,2)
(123,55,2)
(42,72,2)
(24,66,2)
(67,132,2)
(90,132,2)
(79,99,2)
(72,79,2)
(5,132,2)
(111,149,2)
(21,80,2)
(97,162,2)
(55,141,2)
(99,162,2)
(68,122,2)
(95,146,2)
(128,162,2)
(159,22,2)
(46,162,2)
(0,101,2)
(58,5,2)
(120,77,2)
(22,77,2)
(159,77,2)
(60,40,2)
(45,122,2)
(45,116,2)
(24,162,2)
(79,119,2)
(96,132,2)
(76,42,2)
(126,108,2)
(122,77,2)
(19,42,2)
(3,77,2)
(104,35,2)
(98,155,2)
(80,133,2)
(58,132,2)
(112,56,2)
(5,40,2)
(56,40,2)
(8,162,2)
(162,155,2)
(4,77,2)
(19,76,2)
(11,162,2)
(34,21,2)
(57,162,2)
(27,132,2)
(82,107,2)
(6,132,2)
(123,104,2)
(79,111,2)
(79,116,2)
(25,162,2)
(7,42,2)
(21,112,2)
(127,0,2)
(48,0,2)
(101,122,2)
(152,0,2)
(154,162,2)
(141,82,2)
(105,77,2)
(28,162,2)
(141,162,2)
(41,34,2)
(48,152,2)
(156,122,2)
(147,26,2)
(155,149,2)
(79,48,2)
(110,90,2)
(149,42,2)
(87,162,2)
(132,104,2)
(125,6,2)
(77,123,2)
(22,104,2)
(101,81,2)
(157,162,2)
(92,128,2)
(148,90,2)
(37,42,2)
(26,132,2)
(81,77,2)
(101,45,2)
(62,122,2)
(109,0,2)
(137,162,2)
(31,0,2)
-----------------------------------
(0,ptl->ptl_max_frag_size != 0 && bytes_to_frag > ptl->ptl_max_frag_size)
(1,req)
(2,req_comm)
(3,0)
(4,bytes_to_frag)
(5,req->req_base)
(6,&ompi_request_lock)
(7,req)
(8,ptl_proc->ptl)
(9,num_ptl_avail)
(10,proc)
(11,ptl)
(12,req_bytes_packed)
(13,bytes_remaining)
(14,req)
(15,req_base)
(16,req->req_offset)
(17,bytes_to_frag)
(18,OMPI_SUCCESS)
(19,req->req_bytes_packed - req->req_offset)
(20,req_peer)
(21,ompi_comm_peer_lookup(req->req_base.req_comm, req->req_base.req_peer)
(22,ptl_proc->ptl_weight * bytes_remaining)
(23,ptl_min_frag_size)
(24,mca_ptl_array_get_next(&proc_pml->proc_ptl_next)
(25,proc_ptl_next)
(26,&ompi_request_lock)
(27,req_ompi)
(28,0)
(29,100)
(30,req->req_base.req_ompi.req_complete)
(31,ptl_max_frag_size)
(32,)
(33,ptl_proc)
(34,*proc = ompi_comm_peer_lookup(req->req_base.req_comm, req->req_base.req_peer)
(35,req->req_bytes_packed - req->req_offset)
(36,ompi_request_lock)
(37,req_offset)
(38,0)
(39,)
(40,mca_pml_base_send_request_t* req)
(41,proc->proc_pml)
(42,rc == OMPI_SUCCESS)
(43,req)
(44,if(rc == OMPI_SUCCESS)
(45,ptl->ptl_max_frag_size)
(46,bytes_to_frag)
(47,if(ptl->ptl_max_frag_size != 0 && bytes_to_frag > ptl->ptl_max_frag_size)
(48,bytes_to_frag = ptl->ptl_max_frag_size)
(49,proc_pml)
(50,req)
(51,num_ptl)
(52,if(ompi_request_waiting)
(53,true)
(54,bytes_remaining)
(55,ptl->ptl_min_frag_size)
(56,req->req_base)
(57,ptl)
(58,req->req_base.req_ompi)
(59,num_ptl_avail)
(60,req->req_offset)
(61,req_complete)
(62,ptl_max_frag_size)
(63,ptl)
(64,proc)
(65,bytes_remaining)
(66,&proc_pml->proc_ptl_next)
(67,req)
(68,bytes_to_frag)
(69,num_ptl++ < num_ptl_avail)
(70,bytes_remaining)
(71,proc)
(72,rc = ptl->ptl_put(ptl, ptl_proc->ptl_peer, req, req->req_offset, bytes_to_frag, 0)
(73,req_bytes_packed)
(74,ptl_peer)
(75,rc)
(76,req->req_bytes_packed)
(77,num_ptl == num_ptl_avail || bytes_remaining < ptl->ptl_min_frag_size)
(78,bytes_remaining)
(79,ptl->ptl_put(ptl, ptl_proc->ptl_peer, req, req->req_offset, bytes_to_frag, 0)
(80,req->req_base.req_comm)
(81,bytes_to_frag = (ptl_proc->ptl_weight * bytes_remaining)
(82,num_ptl_avail = proc_pml->proc_ptl_next.ptl_size)
(83,ptl)
(84,req_base)
(85,ptl_proc)
(86,bytes_remaining)
(87,req)
(88,proc_pml)
(89,proc_ptl_next)
(90,ompi_request_waiting)
(91,proc_pml)
(92,ptl_proc->ptl_weight)
(93,req_offset)
(94,num_ptl)
(95,proc_pml->proc_ptl_next)
(96,req->req_base.req_ompi.req_complete = true)
(97,ptl_proc)
(98,num_ptl_avail)
(99,req->req_offset)
(100,ptl_weight)
(101,bytes_to_frag > ptl->ptl_max_frag_size)
(102,)
(103,ompi_condition_broadcast(&ompi_request_cond)
(104,bytes_remaining = req->req_bytes_packed - req->req_offset)
(105,ptl_max_frag_size)
(106,bytes_remaining)
(107,proc_pml->proc_ptl_next.ptl_size)
(108,num_ptl = 0)
(109,bytes_to_frag)
(110,ompi_request_cond)
(111,bytes_to_frag = bytes_remaining)
(112,req->req_base.req_peer)
(113,ptl_proc)
(114,ptl)
(115,proc_pml->proc_ptl_next)
(116,* ptl = ptl_proc->ptl)
(117,if(bytes_remaining > 0)
(118,ompi_request_lock)
(119,ptl_proc->ptl_peer)
(120,ptl)
(121,bytes_to_frag)
(122,ptl->ptl_max_frag_size != 0)
(123,bytes_remaining < ptl->ptl_min_frag_size)
(124,ptl_proc)
(125,OMPI_THREAD_UNLOCK(&ompi_request_lock)
(126,num_ptl++)
(127,ptl)
(128,* ptl_proc = mca_ptl_array_get_next(&proc_pml->proc_ptl_next)
(129,proc_pml)
(130,num_ptl)
(131,req->req_bytes_packed)
(132,bytes_remaining > 0)
(133,req->req_base)
(134,req)
(135,)
(136,while(bytes_remaining > 0 && num_ptl++ < num_ptl_avail)
(137,0)
(138,rc)
(139,if(num_ptl == num_ptl_avail || bytes_remaining < ptl->ptl_min_frag_size)
(140,num_ptl_avail)
(141,num_ptl == num_ptl_avail)
(142,ptl->ptl_max_frag_size)
(143,req)
(144,num_ptl)
(145,rc)
(146,* proc_pml = proc->proc_pml)
(147,OMPI_THREAD_LOCK(&ompi_request_lock)
(148,&ompi_request_cond)
(149,bytes_remaining = req->req_bytes_packed - req->req_offset)
(150,req_base)
(151,ptl_size)
(152,ptl->ptl_max_frag_size)
(153,req_offset)
(154,bytes_remaining)
(155,bytes_remaining > 0)
(156,ptl)
(157,proc_pml)
(158,RET)
(159,(ptl_proc->ptl_weight * bytes_remaining)
(160,)
(161,0)
(162,bytes_remaining > 0 && num_ptl++ < num_ptl_avail)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^