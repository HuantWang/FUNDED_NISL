-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
52,53
55,56
55,57
56,57
58,59
58,60
59,60
59,61
60,61
63,64
65,66
66,67
68,69
69,70
70,71
70,72
71,72
-----nextToken-----
2,4,8,10,14,16,20,21,26,27,32,33,37,38,44,46,48,53,54,57,61,62,64,67,72,73
-----computeFrom-----
12,13
12,14
18,19
18,20
30,31
30,32
35,36
35,37
51,52
51,53
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(28,22,0)
(23,34,0)
(36,5,0)
(31,15,0)
(30,22,0)
(9,17,0)
(18,3,0)
(7,29,0)
(10,35,0)
(24,17,0)
(14,3,0)
(5,34,0)
(21,3,0)
(8,21,0)
(26,38,0)
(25,23,0)
(22,17,0)
(3,13,0)
(38,11,0)
(27,2,0)
(1,15,0)
(37,11,0)
(6,27,0)
(19,32,0)
(22,5,0)
(16,35,0)
(40,11,0)
(17,20,0)
(22,38,0)
(0,11,0)
(5,22,0)
(32,38,0)
(38,32,0)
(41,34,0)
(12,21,0)
(22,30,0)
(29,33,0)
(39,34,0)
(16,17,1)
(22,30,1)
(36,34,1)
(22,28,1)
(28,36,1)
(4,35,1)
(23,25,1)
(41,39,1)
(39,21,1)
(7,5,1)
(5,34,1)
(22,38,1)
(23,34,1)
(1,38,1)
(38,32,1)
(36,23,1)
(29,7,1)
(21,8,1)
(19,26,1)
(34,41,1)
(25,29,1)
(15,31,1)
(31,1,1)
(12,35,1)
(4,5,1)
(27,6,1)
(24,15,1)
(10,16,1)
(9,24,1)
(22,17,1)
(35,10,1)
(8,12,1)
(6,15,1)
(5,22,1)
(16,27,1)
(32,19,1)
(17,9,1)
(5,34,2)
(36,5,2)
(28,35,2)
(22,17,2)
(28,5,2)
(22,30,2)
(38,32,2)
(5,35,2)
(6,15,2)
(29,5,2)
(41,35,2)
(27,15,2)
(21,35,2)
(9,15,2)
(5,22,2)
(34,35,2)
(17,15,2)
(22,35,2)
(5,5,2)
(23,34,2)
(7,5,2)
(8,35,2)
(25,5,2)
(24,15,2)
(12,35,2)
(39,35,2)
(22,38,2)
(23,5,2)
(22,5,2)
(36,35,2)
-----------------------------------
(0,count)
(1,STATIC_CONST_FIVE)
(2,)
(3,)
(4,RET)
(5,i < (size_t)
(6,"Benign, fixed string")
(7,"Hello")
(8,0)
(9,20)
(10,5)
(11,)
(12,i)
(13,)
(14,for (i = 0; i < (size_t)
(15,STATIC_CONST_FIVE!=5)
(16,STATIC_CONST_FIVE)
(17,count = 20)
(18,i)
(19,1)
(20,)
(21,i = 0)
(22,(size_t)
(23,i++)
(24,count)
(25,i)
(26,count)
(27,printLine("Benign, fixed string")
(28,count)
(29,printLine("Hello")
(30,size_t)
(31,5)
(32,-1)
(33,)
(34,i = 0)
(35,STATIC_CONST_FIVE==5)
(36,i)
(37,if(STATIC_CONST_FIVE==5)
(38,count = -1)
(39,i)
(40,if(STATIC_CONST_FIVE!=5)
(41,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^