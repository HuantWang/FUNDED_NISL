-----label-----
0
-----code-----
static int controller_send_error(Connection *connection, uint32_t serial, const char *error) {
        static const CDVarType type[] = {
                C_DVAR_T_INIT(
                        CONTROLLER_T_MESSAGE(
                                C_DVAR_T_TUPLE0
                        )
                )
        };
        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;
        _c_cleanup_(message_unrefp) Message *message = NULL;
        void *data;
        size_t n_data;
        int r;

        c_dvar_begin_write(&var, type, 1);
        c_dvar_write(&var, "((yyyyuu[(y<u>)(y<s>)])())",
                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_ERROR, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,
                     DBUS_MESSAGE_FIELD_REPLY_SERIAL, c_dvar_type_u, serial,
                     DBUS_MESSAGE_FIELD_ERROR_NAME, c_dvar_type_s, error);

        r = c_dvar_end_write(&var, &data, &n_data);
        if (r)
                return error_origin(r);

        r = message_new_outgoing(&message, data, n_data);
        if (r)
                return error_fold(r);

        r = connection_queue(connection, 0, message);
        if (r)
                return error_fold(r);

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
18,19
18,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
21,38
21,39
21,40
22,23
23,24
23,25
24,25
26,27
26,28
26,29
29,30
30,31
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
61,62
63,64
64,65
65,66
65,67
66,67
68,69
68,70
68,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
89,90
91,92
92,93
92,94
92,95
92,96
93,94
95,96
96,97
98,99
101,102
102,103
102,104
102,105
102,106
102,107
102,108
102,109
102,110
102,111
102,112
102,113
102,114
102,115
102,116
102,117
103,104
105,106
106,107
109,110
109,111
109,112
110,111
110,112
111,112
113,114
114,115
118,119
120,121
124,125
124,126
125,126
126,127
129,130
131,132
133,134
135,136
137,138
139,140
141,142
142,143
142,144
143,144
145,146
145,147
145,148
145,149
146,147
148,149
149,150
151,152
152,153
154,155
155,156
157,158
157,159
158,159
160,161
161,162
161,163
162,163
164,165
166,167
167,168
167,169
168,169
170,171
170,172
170,173
170,174
171,172
173,174
174,175
176,177
178,179
180,181
180,182
181,182
183,184
184,185
184,186
185,186
187,188
189,190
190,191
190,192
191,192
193,194
193,195
193,196
193,197
194,195
196,197
199,200
201,202
201,203
202,203
204,205
205,206
205,207
206,207
208,209
210,211
-----nextToken-----
2,4,7,9,10,13,15,17,19,20,25,27,28,33,36,38,42,45,50,52,55,59,62,67,69,70,73,76,78,79,83,85,88,90,94,97,99,100,104,107,108,112,115,116,117,119,121,122,123,127,128,130,132,134,136,138,140,144,147,150,153,156,159,163,165,169,172,175,177,179,182,186,188,192,195,197,198,200,203,207,209,211
-----computeFrom-----
124,125
124,126
142,143
142,144
167,168
167,169
190,191
190,192
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ConditionalExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int controller_send_error(Connection *connection, uint32_t serial, const char *error) {        static const CDVarType type[] = {                C_DVAR_T_INIT(                        CONTROLLER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        };        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;        _c_cleanup_(message_unrefp) Message *message = NULL;        void *data;        size_t n_data;        int r;        c_dvar_begin_write(&var, type, 1);        c_dvar_write(&var, "((yyyyuu[(y<u>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_ERROR, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_REPLY_SERIAL, c_dvar_type_u, serial,                     DBUS_MESSAGE_FIELD_ERROR_NAME, c_dvar_type_s, error);        r = c_dvar_end_write(&var, &data, &n_data);        if (r)                return error_origin(r);        r = message_new_outgoing(&message, data, n_data);        if (r)                return error_fold(r);        r = connection_queue(connection, 0, message);        if (r)                return error_fold(r);        return 0;}
static int
controller_send_error(Connection *connection, uint32_t serial, const char *error)
controller_send_error
Connection *connection
Connection
Connection
*connection
*
connection
uint32_t serial
uint32_t
uint32_t
serial
serial
const char *error
const char
*error
*
error
{        static const CDVarType type[] = {                C_DVAR_T_INIT(                        CONTROLLER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        };        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;        _c_cleanup_(message_unrefp) Message *message = NULL;        void *data;        size_t n_data;        int r;        c_dvar_begin_write(&var, type, 1);        c_dvar_write(&var, "((yyyyuu[(y<u>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_ERROR, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_REPLY_SERIAL, c_dvar_type_u, serial,                     DBUS_MESSAGE_FIELD_ERROR_NAME, c_dvar_type_s, error);        r = c_dvar_end_write(&var, &data, &n_data);        if (r)                return error_origin(r);        r = message_new_outgoing(&message, data, n_data);        if (r)                return error_fold(r);        r = connection_queue(connection, 0, message);        if (r)                return error_fold(r);        return 0;}
static const CDVarType type[] = {                C_DVAR_T_INIT(                        CONTROLLER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        };
static const CDVarType type[] = {                C_DVAR_T_INIT(                        CONTROLLER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        };
static const CDVarType
CDVarType
type[] = {                C_DVAR_T_INIT(                        CONTROLLER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        }
type
[]
= {                C_DVAR_T_INIT(                        CONTROLLER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        }
{                C_DVAR_T_INIT(                        CONTROLLER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        }
C_DVAR_T_INIT(                        CONTROLLER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )
C_DVAR_T_INIT
C_DVAR_T_INIT
CONTROLLER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )
CONTROLLER_T_MESSAGE
CONTROLLER_T_MESSAGE
C_DVAR_T_TUPLE0
C_DVAR_T_TUPLE0
_c_cleanup_(c_dvar_deinitp)
_c_cleanup_(c_dvar_deinitp)
_c_cleanup_
_c_cleanup_
(c_dvar_deinitp)
c_dvar_deinitp
c_dvar_deinitp
)
CDVar var = C_DVAR_INIT;
CDVar var = C_DVAR_INIT;
CDVar
CDVar
var = C_DVAR_INIT
var
= C_DVAR_INIT
C_DVAR_INIT
C_DVAR_INIT
_c_cleanup_(message_unrefp)
_c_cleanup_(message_unrefp)
_c_cleanup_
_c_cleanup_
(message_unrefp)
message_unrefp
message_unrefp
)
Message *message = NULL;
Message *message = NULL;
Message
Message
*message = NULL
*
message
= NULL
NULL
NULL
void *data;
void *data;
void
*data
*
data
size_t n_data;
size_t n_data;
size_t
size_t
n_data
n_data
int r;
int r;
int
r
r
c_dvar_begin_write(&var, type, 1);
c_dvar_begin_write(&var, type, 1)
c_dvar_begin_write
c_dvar_begin_write
&var
var
var
type
type
1
c_dvar_write(&var, "((yyyyuu[(y<u>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_ERROR, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_REPLY_SERIAL, c_dvar_type_u, serial,                     DBUS_MESSAGE_FIELD_ERROR_NAME, c_dvar_type_s, error);
c_dvar_write(&var, "((yyyyuu[(y<u>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_ERROR, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_REPLY_SERIAL, c_dvar_type_u, serial,                     DBUS_MESSAGE_FIELD_ERROR_NAME, c_dvar_type_s, error)
c_dvar_write
c_dvar_write
&var
var
var
"((yyyyuu[(y<u>)(y<s>)])())"
c_dvar_is_big_endian(&var) ? 'B' : 'l'
c_dvar_is_big_endian(&var)
c_dvar_is_big_endian
c_dvar_is_big_endian
&var
var
var
'B'
'l'
DBUS_MESSAGE_TYPE_ERROR
DBUS_MESSAGE_TYPE_ERROR
DBUS_HEADER_FLAG_NO_REPLY_EXPECTED
DBUS_HEADER_FLAG_NO_REPLY_EXPECTED
1
0
(uint32_t)-1
(uint32_t)
uint32_t
uint32_t
1
DBUS_MESSAGE_FIELD_REPLY_SERIAL
DBUS_MESSAGE_FIELD_REPLY_SERIAL
c_dvar_type_u
c_dvar_type_u
serial
serial
DBUS_MESSAGE_FIELD_ERROR_NAME
DBUS_MESSAGE_FIELD_ERROR_NAME
c_dvar_type_s
c_dvar_type_s
error
error
r = c_dvar_end_write(&var, &data, &n_data);
r = c_dvar_end_write(&var, &data, &n_data)
r
r
c_dvar_end_write(&var, &data, &n_data)
c_dvar_end_write
c_dvar_end_write
&var
var
var
&data
data
data
&n_data
n_data
n_data
if (r)                return error_origin(r);
r
r
return error_origin(r);
error_origin(r)
error_origin
error_origin
r
r
r = message_new_outgoing(&message, data, n_data);
r = message_new_outgoing(&message, data, n_data)
r
r
message_new_outgoing(&message, data, n_data)
message_new_outgoing
message_new_outgoing
&message
message
message
data
data
n_data
n_data
if (r)                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
r = connection_queue(connection, 0, message);
r = connection_queue(connection, 0, message)
r
r
connection_queue(connection, 0, message)
connection_queue
connection_queue
connection
connection
0
message
message
if (r)                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(11,9,0)
(55,62,0)
(53,66,0)
(17,9,0)
(74,66,0)
(37,9,0)
(30,21,0)
(30,60,0)
(85,62,0)
(51,66,0)
(2,9,0)
(21,62,0)
(24,0,0)
(66,9,0)
(5,0,0)
(1,87,0)
(86,40,0)
(29,9,0)
(72,33,0)
(67,6,0)
(19,33,0)
(43,50,0)
(41,66,0)
(83,66,0)
(57,9,0)
(54,84,0)
(80,57,0)
(31,0,0)
(13,9,0)
(42,23,0)
(50,9,0)
(6,67,0)
(78,80,0)
(87,67,0)
(65,79,0)
(34,62,0)
(38,66,0)
(23,15,0)
(66,19,0)
(47,21,0)
(1,60,0)
(4,9,0)
(12,0,0)
(24,50,0)
(84,79,0)
(84,66,0)
(7,6,0)
(80,87,0)
(49,52,0)
(48,66,0)
(46,66,0)
(27,57,0)
(40,52,0)
(16,27,0)
(50,24,0)
(21,9,0)
(15,67,0)
(66,64,0)
(57,27,0)
(32,37,0)
(40,86,0)
(79,65,0)
(22,9,0)
(20,24,0)
(52,40,0)
(79,84,0)
(1,15,0)
(75,19,0)
(69,6,0)
(3,27,0)
(61,57,0)
(0,9,0)
(14,84,0)
(10,77,0)
(68,66,0)
(27,59,0)
(66,35,0)
(31,40,0)
(77,40,0)
(62,21,0)
(73,50,0)
(36,2,0)
(12,66,0)
(33,19,0)
(88,30,0)
(25,86,0)
(39,29,0)
(23,77,0)
(50,29,0)
(44,66,0)
(82,65,0)
(67,37,0)
(76,66,0)
(26,31,0)
(71,9,0)
(65,0,0)
(56,9,0)
(63,0,0)
(19,66,0)
(2,67,0)
(66,84,0)
(19,75,0)
(28,9,0)
(18,12,0)
(60,67,0)
(40,77,0)
(8,55,0)
(77,9,0)
(62,55,0)
(70,27,0)
(45,67,0)
(66,12,0)
(1,2,0)
(40,31,0)
(6,69,0)
(66,19,1)
(74,19,1)
(48,74,1)
(60,67,1)
(25,52,1)
(82,76,1)
(29,39,1)
(15,67,1)
(67,6,1)
(1,15,1)
(3,16,1)
(36,58,1)
(42,89,1)
(23,77,1)
(8,47,1)
(84,79,1)
(14,79,1)
(62,55,1)
(12,18,1)
(44,41,1)
(34,55,1)
(27,3,1)
(84,54,1)
(33,72,1)
(0,5,1)
(30,21,1)
(38,48,1)
(24,0,1)
(63,29,1)
(43,24,1)
(66,84,1)
(62,85,1)
(80,57,1)
(6,69,1)
(2,36,1)
(66,44,1)
(50,29,1)
(32,67,1)
(7,0,1)
(12,0,1)
(50,73,1)
(20,37,1)
(58,57,1)
(65,82,1)
(40,86,1)
(26,10,1)
(72,46,1)
(24,20,1)
(47,89,1)
(81,21,1)
(87,80,1)
(65,0,1)
(2,67,1)
(23,42,1)
(51,84,1)
(40,52,1)
(31,26,1)
(1,2,1)
(52,49,1)
(66,64,1)
(68,38,1)
(88,81,1)
(19,75,1)
(50,24,1)
(79,65,1)
(80,78,1)
(15,23,1)
(18,50,1)
(66,35,1)
(57,27,1)
(31,0,1)
(27,59,1)
(83,51,1)
(70,61,1)
(46,53,1)
(67,45,1)
(61,81,1)
(37,32,1)
(87,67,1)
(6,7,1)
(1,60,1)
(53,83,1)
(76,12,1)
(60,30,1)
(54,79,1)
(5,63,1)
(10,66,1)
(86,25,1)
(1,87,1)
(78,58,1)
(73,43,1)
(16,70,1)
(89,77,1)
(49,31,1)
(77,40,1)
(19,33,1)
(41,68,1)
(30,88,1)
(84,14,1)
(55,8,1)
(85,34,1)
(45,6,1)
(40,31,1)
(66,12,1)
(21,62,1)
(8,89,2)
(27,59,2)
(65,0,2)
(16,81,2)
(78,58,2)
(60,81,2)
(80,57,2)
(57,81,2)
(66,35,2)
(57,27,2)
(62,89,2)
(62,55,2)
(15,67,2)
(47,89,2)
(60,67,2)
(2,67,2)
(84,79,2)
(79,65,2)
(61,81,2)
(50,24,2)
(87,58,2)
(87,67,2)
(1,2,2)
(77,40,2)
(66,19,2)
(36,58,2)
(66,12,2)
(34,89,2)
(24,0,2)
(23,77,2)
(66,64,2)
(21,89,2)
(88,81,2)
(40,86,2)
(67,6,2)
(3,81,2)
(54,79,2)
(66,84,2)
(27,81,2)
(85,89,2)
(30,21,2)
(80,58,2)
(12,0,2)
(55,89,2)
(21,62,2)
(31,0,2)
(81,89,2)
(40,31,2)
(70,81,2)
(6,69,2)
(42,89,2)
(1,15,2)
(15,89,2)
(19,33,2)
(30,81,2)
(19,75,2)
(14,79,2)
(2,58,2)
(40,52,2)
(23,89,2)
(1,60,2)
(50,29,2)
(1,87,2)
(58,81,2)
-----------------------------------
(0,var = C_DVAR_INIT)
(1,RET)
(2,return 0;)
(3,message)
(4,n_data)
(5,C_DVAR_INIT)
(6,(message_unrefp)
(7,Message)
(8,message)
(9,)
(10,r)
(11,if (r)
(12,&var)
(13,var)
(14,\'B\')
(15,return error_origin(r)
(16,0)
(17,if (r)
(18,var)
(19,(uint32_t)
(20,var)
(21,r = message_new_outgoing(&message, data, n_data)
(22,if (r)
(23,error_origin(r)
(24,&var)
(25,n_data)
(26,var)
(27,connection_queue(connection, 0, message)
(28,type)
(29,type[] = {\n\\n                C_DVAR_T_INIT(\n\\n                        CONTROLLER_T_MESSAGE(\n\\n                                C_DVAR_T_TUPLE0\n\\n                        )
(30,error_fold(r)
(31,&var)
(32,NULL)
(33,-1)
(34,data)
(35,uint32_t serial)
(36,0)
(37,(message_unrefp)
(38,serial)
(39,type)
(40,c_dvar_end_write(&var, &data, &n_data)
(41,c_dvar_type_s)
(42,r)
(43,type)
(44,error)
(45,message)
(46,0)
(47,r)
(48,c_dvar_type_u)
(49,data)
(50,c_dvar_begin_write(&var, type, 1)
(51,DBUS_MESSAGE_TYPE_ERROR)
(52,&data)
(53,1)
(54,\'l\')
(55,&message)
(56,data)
(57,r = connection_queue(connection, 0, message)
(58,r)
(59,Connection *connection)
(60,return error_fold(r)
(61,r)
(62,message_new_outgoing(&message, data, n_data)
(63,var)
(64,const char *error)
(65,&var)
(66,c_dvar_write(&var, "((yyyyuu[(y<u>)
(67,(message_unrefp)
(68,DBUS_MESSAGE_FIELD_ERROR_NAME)
(69,message_unrefp)
(70,connection)
(71,r)
(72,1)
(73,1)
(74,DBUS_MESSAGE_FIELD_REPLY_SERIAL)
(75,uint32_t)
(76,"((yyyyuu[(y<u>)
(77,r = c_dvar_end_write(&var, &data, &n_data)
(78,r)
(79,c_dvar_is_big_endian(&var)
(80,error_fold(r)
(81,r)
(82,var)
(83,DBUS_HEADER_FLAG_NO_REPLY_EXPECTED)
(84,c_dvar_is_big_endian(&var)
(85,n_data)
(86,&n_data)
(87,return error_fold(r)
(88,r)
(89,r)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^