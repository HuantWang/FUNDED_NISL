-----label-----
0
-----code-----
void
pmap_init(void)
{
	struct pmap_preinit_mapping *ppim;
	vm_page_t mpte;
	vm_size_t s;
	int error, i, pv_npg;

	/* L1TF, reserve page @0 unconditionally */
	vm_page_blacklist_add(0, bootverbose);

	/*
	 * Initialize the vm page array entries for the kernel pmap's
	 * page table pages.
	 */ 
	for (i = 0; i < nkpt; i++) {
		mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));
		KASSERT(mpte >= vm_page_array &&
		    mpte < &vm_page_array[vm_page_array_size],
		    ("pmap_init: page table page is out of range"));
		mpte->pindex = pmap_pde_pindex(KERNBASE) + i;
		mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);
	}

	/*
	 * If the kernel is running on a virtual machine, then it must assume
	 * that MCA is enabled by the hypervisor.  Moreover, the kernel must
	 * be prepared for the hypervisor changing the vendor and family that
	 * are reported by CPUID.  Consequently, the workaround for AMD Family
	 * 10h Erratum 383 is enabled if the processor's feature set does not
	 * include at least one feature that is only supported by older Intel
	 * or newer AMD processors.
	 */
	if (vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&
	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |
	    CPUID2_AVX | CPUID2_XSAVE)) == 0 && (amd_feature2 & (AMDID2_XOP |
	    AMDID2_FMA4)) == 0)
		workaround_erratum383 = 1;

	/*
	 * Are large page mappings enabled?
	 */
	TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled);
	if (pg_ps_enabled) {
		KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,
		    ("pmap_init: can't assign to pagesizes[1]"));
		pagesizes[1] = NBPDR;
	}

	/*
	 * Initialize the pv chunk list mutex.
	 */
	mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF);

	/*
	 * Initialize the pool of pv list locks.
	 */
	for (i = 0; i < NPV_LIST_LOCKS; i++)
		rw_init(&pv_list_locks[i], "pmap pv list");

	/*
	 * Calculate the size of the pv head table for superpages.
	 */
	pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR);

	/*
	 * Allocate memory for the pv head table for superpages.
	 */
	s = (vm_size_t)(pv_npg * sizeof(struct md_page));
	s = round_page(s);
	pv_table = (struct md_page *)kmem_malloc(kernel_arena, s,
	    M_WAITOK | M_ZERO);
	for (i = 0; i < pv_npg; i++)
		TAILQ_INIT(&pv_table[i].pv_list);
	TAILQ_INIT(&pv_dummy.pv_list);

	pmap_initialized = 1;
	for (i = 0; i < PMAP_PREINIT_MAPPING_COUNT; i++) {
		ppim = pmap_preinit_mapping + i;
		if (ppim->va == 0)
			continue;
		/* Make the direct map consistent */
		if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {
			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),
			    ppim->sz, ppim->mode);
		}
		if (!bootverbose)
			continue;
		printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,
		    ppim->pa, ppim->va, ppim->sz, ppim->mode);
	}

	mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN);
	error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,
	    (vmem_addr_t *)&qframe);
	if (error != 0)
		panic("qframe allocation failed");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
10,11
11,12
11,13
12,13
14,15
14,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
30,33
30,34
32,33
34,35
36,37
38,39
39,40
39,41
39,42
40,41
43,44
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
54,55
56,57
57,58
59,60
59,61
59,62
59,63
60,61
61,62
61,63
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
87,88
89,90
90,91
90,92
91,92
93,94
95,96
97,98
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
104,106
105,106
107,108
109,110
111,112
112,113
112,114
113,114
113,115
114,115
117,118
117,119
118,119
120,121
121,122
121,123
122,123
124,125
126,127
126,128
127,128
127,129
128,129
128,130
129,130
129,131
130,131
130,132
131,132
133,134
135,136
135,137
136,137
137,138
137,139
138,139
140,141
143,144
143,145
144,145
145,146
145,147
146,147
148,149
149,150
149,151
150,151
150,152
151,152
151,153
152,153
152,154
153,154
155,156
157,158
159,160
161,162
164,165
164,166
165,166
166,167
166,168
167,168
169,170
170,171
170,172
171,172
173,174
176,177
177,178
177,179
178,179
181,182
182,183
182,184
182,185
183,184
186,187
187,188
189,190
189,191
190,191
192,193
192,194
193,194
194,195
194,196
194,197
195,196
197,198
197,199
198,199
198,200
199,200
202,203
202,204
203,204
203,205
204,205
208,209
210,211
211,212
211,213
212,213
212,214
213,214
216,217
218,219
219,220
219,221
219,222
219,223
219,224
220,221
222,223
223,224
226,227
228,229
230,231
230,232
230,233
230,234
231,232
232,233
232,234
233,234
236,237
236,238
237,238
239,240
241,242
242,243
244,245
245,246
245,247
245,248
246,247
248,249
249,250
249,251
250,251
252,253
255,256
256,257
256,258
257,258
259,260
259,261
259,262
260,261
262,263
262,264
263,264
263,265
264,265
266,267
266,268
267,268
271,272
273,274
274,275
274,276
275,276
277,278
277,279
278,279
279,280
281,282
281,283
282,283
284,285
285,286
285,287
286,287
289,290
290,291
290,292
291,292
293,294
293,295
294,295
296,297
298,299
299,300
299,301
300,301
302,303
302,304
303,304
303,305
304,305
306,307
308,309
308,310
308,311
308,312
309,310
311,312
313,314
315,316
315,317
316,317
318,319
320,321
320,322
320,323
320,324
321,322
322,323
322,324
323,324
326,327
326,328
327,328
329,330
331,332
332,333
334,335
335,336
335,337
336,337
338,339
339,340
339,341
340,341
340,342
341,342
343,344
346,347
347,348
347,349
348,349
350,351
351,352
351,353
352,353
355,356
356,357
356,358
357,358
360,361
360,362
360,363
360,364
361,362
362,363
362,364
363,364
366,367
366,368
367,368
369,370
371,372
372,373
374,375
374,376
374,377
374,378
374,379
375,376
376,377
376,378
377,378
379,380
379,381
380,381
382,383
384,385
384,386
385,386
385,387
386,387
386,388
387,388
392,393
392,394
393,394
393,395
394,395
394,396
395,396
395,397
396,397
399,400
401,402
401,403
402,403
402,404
403,404
403,405
404,405
407,408
407,409
408,409
411,412
413,414
414,415
415,416
415,417
416,417
416,418
419,420
419,421
419,422
419,423
420,421
422,423
422,424
423,424
425,426
425,427
426,427
429,430
429,431
430,431
433,434
433,435
434,435
437,438
437,439
438,439
439,440
442,443
443,444
443,445
443,446
443,447
443,448
443,449
443,450
444,445
447,448
449,450
449,451
450,451
453,454
453,455
454,455
457,458
457,459
458,459
461,462
461,463
462,463
465,466
466,467
466,468
466,469
466,470
466,471
467,468
469,470
470,471
473,474
475,476
477,478
478,479
478,480
479,480
481,482
481,483
481,484
481,485
481,486
482,483
484,485
486,487
488,489
488,490
489,490
491,492
493,494
493,495
494,495
494,496
495,496
497,498
499,500
500,501
502,503
502,504
503,504
503,505
504,505
507,508
508,509
508,510
509,510
-----nextToken-----
2,4,6,8,13,15,16,20,22,26,28,31,33,35,37,41,42,44,49,50,53,55,58,63,66,69,73,75,79,83,85,88,92,94,96,101,102,106,108,110,115,116,119,123,125,132,134,139,141,142,147,154,156,158,160,162,163,168,172,174,175,179,180,184,185,188,191,196,200,201,205,206,207,209,214,215,217,221,224,225,227,229,234,235,238,240,243,247,251,253,254,258,261,265,268,269,270,272,276,280,283,287,288,292,295,297,301,305,307,310,312,314,317,319,324,325,328,330,333,337,342,344,345,349,353,354,358,359,364,365,368,370,373,378,381,383,388,389,390,391,397,398,400,405,406,409,410,412,417,418,421,424,427,428,431,432,435,436,440,441,445,446,448,451,452,455,456,459,460,463,464,468,471,472,474,476,480,483,485,487,490,492,496,498,501,505,506,510,511
-----computeFrom-----
47,48
47,49
51,52
51,53
61,62
61,63
67,68
67,69
71,72
71,73
80,81
80,82
81,82
81,83
86,87
86,88
98,99
98,100
103,104
103,105
112,113
112,114
117,118
117,119
121,122
121,123
127,128
127,129
128,129
128,130
129,130
129,131
130,131
130,132
135,136
135,137
137,138
137,139
143,144
143,145
145,146
145,147
149,150
149,151
150,151
150,152
151,152
151,153
152,153
152,154
164,165
164,166
166,167
166,168
170,171
170,172
177,178
177,179
197,198
197,199
198,199
198,200
202,203
202,204
211,212
211,213
232,233
232,234
236,237
236,238
256,257
256,258
266,267
266,268
274,275
274,276
281,282
281,283
290,291
290,292
299,300
299,301
315,316
315,317
322,323
322,324
326,327
326,328
356,357
356,358
362,363
362,364
366,367
366,368
376,377
376,378
379,380
379,381
385,386
385,387
393,394
393,395
394,395
394,396
401,402
401,403
402,403
402,404
478,479
478,480
488,489
488,490
503,504
503,505
-----guardedBy-----
409,435
406,428
410,432
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ContinueStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
voidpmap_init(void){	struct pmap_preinit_mapping *ppim;	vm_page_t mpte;	vm_size_t s;	int error, i, pv_npg;	/* L1TF, reserve page @0 unconditionally */	vm_page_blacklist_add(0, bootverbose);	/*	 * Initialize the vm page array entries for the kernel pmap's	 * page table pages.	 */ 	for (i = 0; i < nkpt; i++) {		mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));		KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"));		mpte->pindex = pmap_pde_pindex(KERNBASE) + i;		mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);	}	/*	 * If the kernel is running on a virtual machine, then it must assume	 * that MCA is enabled by the hypervisor.  Moreover, the kernel must	 * be prepared for the hypervisor changing the vendor and family that	 * are reported by CPUID.  Consequently, the workaround for AMD Family	 * 10h Erratum 383 is enabled if the processor's feature set does not	 * include at least one feature that is only supported by older Intel	 * or newer AMD processors.	 */	if (vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0 && (amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)) == 0)		workaround_erratum383 = 1;	/*	 * Are large page mappings enabled?	 */	TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled);	if (pg_ps_enabled) {		KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"));		pagesizes[1] = NBPDR;	}	/*	 * Initialize the pv chunk list mutex.	 */	mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF);	/*	 * Initialize the pool of pv list locks.	 */	for (i = 0; i < NPV_LIST_LOCKS; i++)		rw_init(&pv_list_locks[i], "pmap pv list");	/*	 * Calculate the size of the pv head table for superpages.	 */	pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR);	/*	 * Allocate memory for the pv head table for superpages.	 */	s = (vm_size_t)(pv_npg * sizeof(struct md_page));	s = round_page(s);	pv_table = (struct md_page *)kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO);	for (i = 0; i < pv_npg; i++)		TAILQ_INIT(&pv_table[i].pv_list);	TAILQ_INIT(&pv_dummy.pv_list);	pmap_initialized = 1;	for (i = 0; i < PMAP_PREINIT_MAPPING_COUNT; i++) {		ppim = pmap_preinit_mapping + i;		if (ppim->va == 0)			continue;		/* Make the direct map consistent */		if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}		if (!bootverbose)			continue;		printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode);	}	mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN);	error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,	    (vmem_addr_t *)&qframe);	if (error != 0)		panic("qframe allocation failed");}
void
pmap_init(void)
pmap_init
void
void


{	struct pmap_preinit_mapping *ppim;	vm_page_t mpte;	vm_size_t s;	int error, i, pv_npg;	/* L1TF, reserve page @0 unconditionally */	vm_page_blacklist_add(0, bootverbose);	/*	 * Initialize the vm page array entries for the kernel pmap's	 * page table pages.	 */ 	for (i = 0; i < nkpt; i++) {		mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));		KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"));		mpte->pindex = pmap_pde_pindex(KERNBASE) + i;		mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);	}	/*	 * If the kernel is running on a virtual machine, then it must assume	 * that MCA is enabled by the hypervisor.  Moreover, the kernel must	 * be prepared for the hypervisor changing the vendor and family that	 * are reported by CPUID.  Consequently, the workaround for AMD Family	 * 10h Erratum 383 is enabled if the processor's feature set does not	 * include at least one feature that is only supported by older Intel	 * or newer AMD processors.	 */	if (vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0 && (amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)) == 0)		workaround_erratum383 = 1;	/*	 * Are large page mappings enabled?	 */	TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled);	if (pg_ps_enabled) {		KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"));		pagesizes[1] = NBPDR;	}	/*	 * Initialize the pv chunk list mutex.	 */	mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF);	/*	 * Initialize the pool of pv list locks.	 */	for (i = 0; i < NPV_LIST_LOCKS; i++)		rw_init(&pv_list_locks[i], "pmap pv list");	/*	 * Calculate the size of the pv head table for superpages.	 */	pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR);	/*	 * Allocate memory for the pv head table for superpages.	 */	s = (vm_size_t)(pv_npg * sizeof(struct md_page));	s = round_page(s);	pv_table = (struct md_page *)kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO);	for (i = 0; i < pv_npg; i++)		TAILQ_INIT(&pv_table[i].pv_list);	TAILQ_INIT(&pv_dummy.pv_list);	pmap_initialized = 1;	for (i = 0; i < PMAP_PREINIT_MAPPING_COUNT; i++) {		ppim = pmap_preinit_mapping + i;		if (ppim->va == 0)			continue;		/* Make the direct map consistent */		if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}		if (!bootverbose)			continue;		printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode);	}	mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN);	error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,	    (vmem_addr_t *)&qframe);	if (error != 0)		panic("qframe allocation failed");}
struct pmap_preinit_mapping *ppim;
struct pmap_preinit_mapping *ppim;
struct pmap_preinit_mapping
pmap_preinit_mapping
*ppim
*
ppim
vm_page_t mpte;
vm_page_t mpte;
vm_page_t
vm_page_t
mpte
mpte
vm_size_t s;
vm_size_t s;
vm_size_t
vm_size_t
s
s
int error, i, pv_npg;
int error, i, pv_npg;
int
error
error
i
i
pv_npg
pv_npg
vm_page_blacklist_add(0, bootverbose);
vm_page_blacklist_add(0, bootverbose)
vm_page_blacklist_add
vm_page_blacklist_add
0
bootverbose
bootverbose
for (i = 0; i < nkpt; i++) {		mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));		KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"));		mpte->pindex = pmap_pde_pindex(KERNBASE) + i;		mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);	}
i = 0;
i = 0
i
i
0
i < nkpt
i
i
nkpt
nkpt
i++
i
i
{		mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));		KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"));		mpte->pindex = pmap_pde_pindex(KERNBASE) + i;		mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);	}
mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));
mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT))
mpte
mpte
PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT))
PHYS_TO_VM_PAGE
PHYS_TO_VM_PAGE
KPTphys + (i << PAGE_SHIFT)
KPTphys
KPTphys
(i << PAGE_SHIFT)
i << PAGE_SHIFT
i
i
PAGE_SHIFT
PAGE_SHIFT
KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"));
KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"))
KASSERT
KASSERT
mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size]
mpte >= vm_page_array
mpte
mpte
vm_page_array
vm_page_array
mpte < &vm_page_array[vm_page_array_size]
mpte
mpte
&vm_page_array[vm_page_array_size]
vm_page_array[vm_page_array_size]
vm_page_array
vm_page_array
vm_page_array_size
vm_page_array_size
("pmap_init: page table page is out of range")
"pmap_init: page table page is out of range"
mpte->pindex = pmap_pde_pindex(KERNBASE) + i;
mpte->pindex = pmap_pde_pindex(KERNBASE) + i
mpte->pindex
mpte
mpte
pindex
pmap_pde_pindex(KERNBASE) + i
pmap_pde_pindex(KERNBASE)
pmap_pde_pindex
pmap_pde_pindex
KERNBASE
KERNBASE
i
i
mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);
mpte->phys_addr = KPTphys + (i << PAGE_SHIFT)
mpte->phys_addr
mpte
mpte
phys_addr
KPTphys + (i << PAGE_SHIFT)
KPTphys
KPTphys
(i << PAGE_SHIFT)
i << PAGE_SHIFT
i
i
PAGE_SHIFT
PAGE_SHIFT
if (vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0 && (amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)) == 0)		workaround_erratum383 = 1;
vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0 && (amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)) == 0
vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0
vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0
vm_guest != VM_GUEST_NO
vm_guest
vm_guest
VM_GUEST_NO
VM_GUEST_NO
(cpu_feature & CPUID_SS) == 0
(cpu_feature & CPUID_SS)
cpu_feature & CPUID_SS
cpu_feature
cpu_feature
CPUID_SS
CPUID_SS
0
(cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0
(cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE))
cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)
cpu_feature2
cpu_feature2
(CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)
CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE
CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX
CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI
CPUID2_SSSE3 | CPUID2_SSE41
CPUID2_SSSE3
CPUID2_SSSE3
CPUID2_SSE41
CPUID2_SSE41
CPUID2_AESNI
CPUID2_AESNI
CPUID2_AVX
CPUID2_AVX
CPUID2_XSAVE
CPUID2_XSAVE
0
(amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)) == 0
(amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4))
amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)
amd_feature2
amd_feature2
(AMDID2_XOP |	    AMDID2_FMA4)
AMDID2_XOP |	    AMDID2_FMA4
AMDID2_XOP
AMDID2_XOP
AMDID2_FMA4
AMDID2_FMA4
0
workaround_erratum383 = 1;
workaround_erratum383 = 1
workaround_erratum383
workaround_erratum383
1
TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled);
TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled)
TUNABLE_INT_FETCH
TUNABLE_INT_FETCH
"vm.pmap.pg_ps_enabled"
&pg_ps_enabled
pg_ps_enabled
pg_ps_enabled
if (pg_ps_enabled) {		KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"));		pagesizes[1] = NBPDR;	}
pg_ps_enabled
pg_ps_enabled
{		KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"));		pagesizes[1] = NBPDR;	}
KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"));
KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"))
KASSERT
KASSERT
MAXPAGESIZES > 1 && pagesizes[1] == 0
MAXPAGESIZES > 1
MAXPAGESIZES
MAXPAGESIZES
1
pagesizes[1] == 0
pagesizes[1]
pagesizes
pagesizes
1
0
("pmap_init: can't assign to pagesizes[1]")
"pmap_init: can't assign to pagesizes[1]"
pagesizes[1] = NBPDR;
pagesizes[1] = NBPDR
pagesizes[1]
pagesizes
pagesizes
1
NBPDR
NBPDR
mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF);
mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF)
mtx_init
mtx_init
&pv_chunks_mutex
pv_chunks_mutex
pv_chunks_mutex
"pmap pv chunk list"
NULL
NULL
MTX_DEF
MTX_DEF
for (i = 0; i < NPV_LIST_LOCKS; i++)		rw_init(&pv_list_locks[i], "pmap pv list");
i = 0;
i = 0
i
i
0
i < NPV_LIST_LOCKS
i
i
NPV_LIST_LOCKS
NPV_LIST_LOCKS
i++
i
i
rw_init(&pv_list_locks[i], "pmap pv list");
rw_init(&pv_list_locks[i], "pmap pv list")
rw_init
rw_init
&pv_list_locks[i]
pv_list_locks[i]
pv_list_locks
pv_list_locks
i
i
"pmap pv list"
pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR);
pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR)
pv_npg
pv_npg
howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR)
howmany
howmany
vm_phys_segs[vm_phys_nsegs - 1].end
vm_phys_segs[vm_phys_nsegs - 1]
vm_phys_segs
vm_phys_segs
vm_phys_nsegs - 1
vm_phys_nsegs
vm_phys_nsegs
1
end
NBPDR
NBPDR
s = (vm_size_t)(pv_npg * sizeof(struct md_page));
s = (vm_size_t)(pv_npg * sizeof(struct md_page))
s
s
(vm_size_t)(pv_npg * sizeof(struct md_page))
(vm_size_t)
vm_size_t
vm_size_t
pv_npg * sizeof(struct md_page)
pv_npg
pv_npg
sizeof(struct md_page)
struct md_page
struct md_page
md_page

s = round_page(s);
s = round_page(s)
s
s
round_page(s)
round_page
round_page
s
s
pv_table = (struct md_page *)kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO);
pv_table = (struct md_page *)kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO)
pv_table
pv_table
(struct md_page *)kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO)
struct md_page *
struct md_page
md_page
*
*
kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO)
kmem_malloc
kmem_malloc
kernel_arena
kernel_arena
s
s
M_WAITOK | M_ZERO
M_WAITOK
M_WAITOK
M_ZERO
M_ZERO
for (i = 0; i < pv_npg; i++)		TAILQ_INIT(&pv_table[i].pv_list);
i = 0;
i = 0
i
i
0
i < pv_npg
i
i
pv_npg
pv_npg
i++
i
i
TAILQ_INIT(&pv_table[i].pv_list);
TAILQ_INIT(&pv_table[i].pv_list)
TAILQ_INIT
TAILQ_INIT
&pv_table[i].pv_list
pv_table[i].pv_list
pv_table[i]
pv_table
pv_table
i
i
pv_list
TAILQ_INIT(&pv_dummy.pv_list);
TAILQ_INIT(&pv_dummy.pv_list)
TAILQ_INIT
TAILQ_INIT
&pv_dummy.pv_list
pv_dummy.pv_list
pv_dummy
pv_dummy
pv_list
pmap_initialized = 1;
pmap_initialized = 1
pmap_initialized
pmap_initialized
1
for (i = 0; i < PMAP_PREINIT_MAPPING_COUNT; i++) {		ppim = pmap_preinit_mapping + i;		if (ppim->va == 0)			continue;		/* Make the direct map consistent */		if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}		if (!bootverbose)			continue;		printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode);	}
i = 0;
i = 0
i
i
0
i < PMAP_PREINIT_MAPPING_COUNT
i
i
PMAP_PREINIT_MAPPING_COUNT
PMAP_PREINIT_MAPPING_COUNT
i++
i
i
{		ppim = pmap_preinit_mapping + i;		if (ppim->va == 0)			continue;		/* Make the direct map consistent */		if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}		if (!bootverbose)			continue;		printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode);	}
ppim = pmap_preinit_mapping + i;
ppim = pmap_preinit_mapping + i
ppim
ppim
pmap_preinit_mapping + i
pmap_preinit_mapping
pmap_preinit_mapping
i
i
if (ppim->va == 0)			continue;
ppim->va == 0
ppim->va
ppim
ppim
va
0
continue;
if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}
ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit
ppim->pa < dmaplimit
ppim->pa
ppim
ppim
pa
dmaplimit
dmaplimit
ppim->pa + ppim->sz < dmaplimit
ppim->pa + ppim->sz
ppim->pa
ppim
ppim
pa
ppim->sz
ppim
ppim
sz
dmaplimit
dmaplimit
{			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}
(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);
(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode)
void
void

pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode)
pmap_change_attr
pmap_change_attr
PHYS_TO_DMAP(ppim->pa)
PHYS_TO_DMAP
PHYS_TO_DMAP
ppim->pa
ppim
ppim
pa
ppim->sz
ppim
ppim
sz
ppim->mode
ppim
ppim
mode
if (!bootverbose)			continue;
!bootverbose
bootverbose
bootverbose
continue;
printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode);
printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode)
printf
printf
"PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n"
i
i
ppim->pa
ppim
ppim
pa
ppim->va
ppim
ppim
va
ppim->sz
ppim
ppim
sz
ppim->mode
ppim
ppim
mode
mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN);
mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN)
mtx_init
mtx_init
&qframe_mtx
qframe_mtx
qframe_mtx
"qfrmlk"
NULL
NULL
MTX_SPIN
MTX_SPIN
error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,	    (vmem_addr_t *)&qframe);
error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,	    (vmem_addr_t *)&qframe)
error
error
vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,	    (vmem_addr_t *)&qframe)
vmem_alloc
vmem_alloc
kernel_arena
kernel_arena
PAGE_SIZE
PAGE_SIZE
M_BESTFIT | M_WAITOK
M_BESTFIT
M_BESTFIT
M_WAITOK
M_WAITOK
(vmem_addr_t *)&qframe
vmem_addr_t *
vmem_addr_t
vmem_addr_t
*
*
&qframe
qframe
qframe
if (error != 0)		panic("qframe allocation failed");
error != 0
error
error
0
panic("qframe allocation failed");
panic("qframe allocation failed")
panic
panic
"qframe allocation failed"
-----joern-----
(64,285,0)
(188,239,0)
(147,225,0)
(209,248,0)
(96,205,0)
(66,11,0)
(111,275,0)
(173,151,0)
(97,109,0)
(187,121,0)
(161,288,0)
(63,10,0)
(119,151,0)
(151,119,0)
(199,127,0)
(8,285,0)
(181,187,0)
(286,83,0)
(79,158,0)
(77,34,0)
(30,272,0)
(149,40,0)
(162,254,0)
(7,55,0)
(33,203,0)
(32,227,0)
(261,285,0)
(136,150,0)
(5,158,0)
(216,266,0)
(9,225,0)
(31,119,0)
(151,118,0)
(236,187,0)
(10,285,0)
(196,7,0)
(107,194,0)
(10,245,0)
(221,203,0)
(286,15,0)
(268,248,0)
(272,235,0)
(109,108,0)
(21,188,0)
(94,23,0)
(250,81,0)
(200,285,0)
(105,200,0)
(29,287,0)
(235,272,0)
(223,270,0)
(39,74,0)
(165,140,0)
(279,34,0)
(126,244,0)
(4,119,0)
(71,11,0)
(177,13,0)
(109,282,0)
(91,13,0)
(219,159,0)
(198,261,0)
(78,177,0)
(234,32,0)
(189,158,0)
(126,208,0)
(281,231,0)
(110,285,0)
(168,48,0)
(56,68,0)
(214,250,0)
(240,57,0)
(79,11,0)
(156,23,0)
(284,285,0)
(86,282,0)
(163,264,0)
(245,28,0)
(43,23,0)
(32,234,0)
(222,227,0)
(232,39,0)
(47,138,0)
(257,208,0)
(203,33,0)
(148,209,0)
(14,165,0)
(53,97,0)
(91,268,0)
(271,40,0)
(61,276,0)
(276,3,0)
(37,272,0)
(11,71,0)
(72,285,0)
(55,195,0)
(154,147,0)
(49,287,0)
(275,67,0)
(161,139,0)
(239,285,0)
(277,285,0)
(255,273,0)
(57,108,0)
(55,159,0)
(94,61,0)
(122,243,0)
(167,239,0)
(235,286,0)
(191,81,0)
(98,161,0)
(187,180,0)
(220,23,0)
(286,235,0)
(242,42,0)
(279,238,0)
(4,245,0)
(139,161,0)
(145,33,0)
(42,170,0)
(6,126,0)
(85,43,0)
(203,65,0)
(187,166,0)
(101,166,0)
(65,264,0)
(197,121,0)
(203,40,0)
(169,232,0)
(35,113,0)
(211,12,0)
(220,180,0)
(36,91,0)
(245,4,0)
(218,68,0)
(33,44,0)
(278,31,0)
(104,139,0)
(246,171,0)
(201,7,0)
(288,51,0)
(54,156,0)
(146,257,0)
(62,118,0)
(162,79,0)
(248,268,0)
(253,162,0)
(244,74,0)
(269,285,0)
(46,94,0)
(86,50,0)
(25,12,0)
(142,67,0)
(119,285,0)
(236,23,0)
(158,79,0)
(39,282,0)
(33,145,0)
(52,124,0)
(124,285,0)
(166,187,0)
(162,253,0)
(89,49,0)
(252,126,0)
(187,236,0)
(170,42,0)
(68,187,0)
(288,250,0)
(283,139,0)
(262,285,0)
(237,275,0)
(48,258,0)
(50,86,0)
(83,286,0)
(261,273,0)
(74,244,0)
(76,170,0)
(238,279,0)
(15,286,0)
(19,23,0)
(160,152,0)
(248,209,0)
(194,180,0)
(36,42,0)
(12,287,0)
(215,110,0)
(13,35,0)
(127,199,0)
(227,32,0)
(229,24,0)
(150,187,0)
(74,39,0)
(129,51,0)
(235,243,0)
(38,243,0)
(254,162,0)
(40,23,0)
(82,108,0)
(219,90,0)
(276,61,0)
(59,217,0)
(116,150,0)
(85,3,0)
(118,152,0)
(67,275,0)
(13,91,0)
(13,177,0)
(61,156,0)
(174,220,0)
(221,23,0)
(152,217,0)
(27,180,0)
(117,34,0)
(23,220,0)
(99,261,0)
(144,43,0)
(115,43,0)
(288,161,0)
(128,119,0)
(171,110,0)
(92,209,0)
(164,113,0)
(159,39,0)
(187,150,0)
(265,79,0)
(3,85,0)
(247,276,0)
(184,85,0)
(264,65,0)
(280,1,0)
(132,124,0)
(71,10,0)
(7,39,0)
(260,121,0)
(67,92,0)
(274,180,0)
(58,194,0)
(112,71,0)
(102,159,0)
(153,154,0)
(141,244,0)
(17,156,0)
(147,154,0)
(254,285,0)
(51,288,0)
(113,35,0)
(73,266,0)
(87,205,0)
(259,94,0)
(203,221,0)
(20,248,0)
(55,7,0)
(227,165,0)
(256,170,0)
(114,90,0)
(3,276,0)
(130,165,0)
(152,118,0)
(123,195,0)
(225,147,0)
(263,235,0)
(118,151,0)
(143,254,0)
(205,177,0)
(243,235,0)
(232,86,0)
(75,39,0)
(204,50,0)
(97,39,0)
(133,138,0)
(177,205,0)
(210,258,0)
(110,171,0)
(103,121,0)
(68,23,0)
(79,162,0)
(120,57,0)
(258,23,0)
(165,227,0)
(0,90,0)
(50,208,0)
(202,110,0)
(41,221,0)
(258,48,0)
(40,203,0)
(42,36,0)
(16,225,0)
(231,140,0)
(84,261,0)
(187,68,0)
(224,236,0)
(212,36,0)
(43,85,0)
(35,13,0)
(183,140,0)
(106,285,0)
(61,94,0)
(178,157,0)
(206,97,0)
(90,219,0)
(250,288,0)
(108,57,0)
(249,4,0)
(157,50,0)
(88,110,0)
(225,287,0)
(192,285,0)
(92,67,0)
(131,92,0)
(26,264,0)
(176,220,0)
(137,172,0)
(195,55,0)
(156,61,0)
(100,51,0)
(233,221,0)
(228,187,0)
(60,285,0)
(230,208,0)
(186,287,0)
(199,4,0)
(217,152,0)
(65,203,0)
(273,261,0)
(4,199,0)
(34,279,0)
(251,79,0)
(268,91,0)
(244,126,0)
(209,92,0)
(266,208,0)
(95,258,0)
(193,113,0)
(135,37,0)
(182,31,0)
(57,208,0)
(190,200,0)
(11,285,0)
(166,23,0)
(159,219,0)
(159,55,0)
(150,23,0)
(226,140,0)
(91,36,0)
(213,191,0)
(207,24,0)
(23,121,0)
(50,157,0)
(80,166,0)
(125,268,0)
(155,232,0)
(93,285,0)
(264,23,0)
(267,37,0)
(185,217,0)
(70,208,0)
(172,180,0)
(175,236,0)
(239,188,0)
(31,140,0)
(134,285,0)
(241,285,0)
(108,109,0)
(28,245,0)
(272,285,0)
(195,282,0)
(245,10,0)
(2,235,0)
(69,83,0)
(238,285,0)
(138,191,0)
(179,48,1)
(236,175,1)
(257,146,1)
(14,31,1)
(11,71,1)
(109,108,1)
(66,10,1)
(223,33,1)
(181,228,1)
(57,208,1)
(79,11,1)
(263,30,1)
(238,279,1)
(288,51,1)
(33,203,1)
(147,225,1)
(211,287,1)
(150,116,1)
(279,34,1)
(248,209,1)
(50,204,1)
(258,23,1)
(180,274,1)
(113,164,1)
(65,264,1)
(158,189,1)
(268,248,1)
(227,165,1)
(265,143,1)
(154,147,1)
(276,61,1)
(261,84,1)
(225,287,1)
(226,183,1)
(188,21,1)
(50,208,1)
(266,73,1)
(5,251,1)
(25,211,1)
(247,61,1)
(73,216,1)
(104,283,1)
(229,35,1)
(187,68,1)
(18,270,1)
(75,266,1)
(243,38,1)
(271,149,1)
(46,85,1)
(156,54,1)
(13,91,1)
(118,62,1)
(193,266,1)
(255,45,1)
(151,118,1)
(203,40,1)
(78,205,1)
(233,41,1)
(6,141,1)
(236,23,1)
(38,122,1)
(182,231,1)
(71,10,1)
(140,226,1)
(187,236,1)
(266,208,1)
(31,278,1)
(156,23,1)
(232,39,1)
(216,257,1)
(219,90,1)
(165,140,1)
(287,29,1)
(20,177,1)
(231,281,1)
(225,16,1)
(273,255,1)
(115,144,1)
(189,5,1)
(223,3,1)
(122,2,1)
(124,132,1)
(83,69,1)
(261,273,1)
(91,268,1)
(149,221,1)
(3,276,1)
(110,215,1)
(36,42,1)
(129,45,1)
(10,245,1)
(195,123,1)
(137,18,1)
(110,171,1)
(0,102,1)
(97,53,1)
(254,162,1)
(17,94,1)
(48,168,1)
(116,136,1)
(80,101,1)
(67,275,1)
(187,180,1)
(88,171,1)
(101,236,1)
(213,138,1)
(107,58,1)
(33,145,1)
(286,15,1)
(126,252,1)
(133,47,1)
(230,70,1)
(43,115,1)
(163,3,1)
(86,50,1)
(48,258,1)
(283,51,1)
(187,166,1)
(256,76,1)
(47,250,1)
(36,212,1)
(245,4,1)
(221,233,1)
(3,85,1)
(211,49,1)
(184,43,1)
(118,152,1)
(281,234,1)
(172,137,1)
(137,179,1)
(194,180,1)
(125,248,1)
(87,113,1)
(49,89,1)
(100,129,1)
(4,199,1)
(137,187,1)
(276,247,1)
(150,23,1)
(186,261,1)
(201,196,1)
(155,195,1)
(162,253,1)
(130,14,1)
(268,125,1)
(27,200,1)
(59,185,1)
(43,23,1)
(255,191,1)
(278,182,1)
(154,153,1)
(165,130,1)
(227,222,1)
(164,193,1)
(22,1,1)
(41,65,1)
(173,118,1)
(55,7,1)
(286,83,1)
(51,100,1)
(167,35,1)
(220,176,1)
(12,287,1)
(166,80,1)
(215,202,1)
(62,152,1)
(182,140,1)
(214,288,1)
(68,218,1)
(30,110,1)
(2,263,1)
(183,254,1)
(195,55,1)
(63,119,1)
(12,25,1)
(40,271,1)
(231,140,1)
(112,66,1)
(58,172,1)
(264,26,1)
(178,232,1)
(234,32,1)
(250,214,1)
(37,272,1)
(161,139,1)
(267,135,1)
(210,23,1)
(252,6,1)
(203,221,1)
(35,113,1)
(21,167,1)
(16,9,1)
(123,55,1)
(135,272,1)
(49,287,1)
(119,151,1)
(85,184,1)
(56,181,1)
(144,48,1)
(148,20,1)
(68,23,1)
(34,77,1)
(77,117,1)
(95,210,1)
(169,155,1)
(35,13,1)
(142,131,1)
(94,23,1)
(153,147,1)
(114,0,1)
(274,27,1)
(187,150,1)
(246,194,1)
(168,258,1)
(264,23,1)
(202,88,1)
(70,124,1)
(24,207,1)
(207,229,1)
(19,194,1)
(58,180,1)
(152,217,1)
(31,119,1)
(177,78,1)
(157,178,1)
(203,65,1)
(220,180,1)
(191,213,1)
(177,205,1)
(7,39,1)
(146,109,1)
(237,111,1)
(37,267,1)
(190,238,1)
(251,265,1)
(244,126,1)
(174,19,1)
(45,239,1)
(212,42,1)
(196,39,1)
(250,288,1)
(117,31,1)
(171,246,1)
(132,52,1)
(79,158,1)
(50,157,1)
(217,59,1)
(92,67,1)
(7,201,1)
(131,148,1)
(205,96,1)
(270,223,1)
(26,163,1)
(224,150,1)
(216,208,1)
(96,87,1)
(85,43,1)
(162,79,1)
(90,114,1)
(185,160,1)
(31,140,1)
(120,240,1)
(40,23,1)
(13,177,1)
(98,139,1)
(159,39,1)
(136,68,1)
(54,17,1)
(82,97,1)
(170,256,1)
(249,63,1)
(272,235,1)
(126,208,1)
(218,56,1)
(91,36,1)
(151,173,1)
(1,280,1)
(166,23,1)
(128,12,1)
(209,92,1)
(259,46,1)
(239,188,1)
(61,156,1)
(232,169,1)
(4,119,1)
(138,133,1)
(167,24,1)
(23,220,1)
(208,230,1)
(288,161,1)
(76,242,1)
(69,243,1)
(105,190,1)
(99,273,1)
(9,12,1)
(200,105,1)
(172,180,1)
(42,170,1)
(194,107,1)
(84,198,1)
(29,186,1)
(176,174,1)
(159,219,1)
(222,165,1)
(97,39,1)
(199,127,1)
(258,95,1)
(39,74,1)
(143,11,1)
(71,112,1)
(111,142,1)
(108,57,1)
(235,243,1)
(32,227,1)
(89,154,1)
(57,120,1)
(74,244,1)
(53,206,1)
(161,98,1)
(235,286,1)
(175,224,1)
(55,159,1)
(141,75,1)
(199,249,1)
(242,268,1)
(61,94,1)
(22,37,1)
(275,237,1)
(139,104,1)
(245,28,1)
(280,37,1)
(228,270,1)
(221,23,1)
(240,82,1)
(94,259,1)
(206,86,1)
(102,7,1)
(257,208,1)
(204,157,1)
(160,128,1)
(198,99,1)
(26,3,2)
(119,151,2)
(203,221,2)
(104,51,2)
(55,266,2)
(283,51,2)
(100,45,2)
(51,45,2)
(256,268,2)
(195,55,2)
(97,266,2)
(42,268,2)
(33,203,2)
(43,48,2)
(187,236,2)
(54,85,2)
(248,177,2)
(187,150,2)
(4,199,2)
(48,258,2)
(281,31,2)
(169,266,2)
(130,31,2)
(35,113,2)
(0,7,2)
(49,287,2)
(225,12,2)
(245,4,2)
(163,3,2)
(219,7,2)
(55,7,2)
(102,7,2)
(147,225,2)
(108,266,2)
(78,113,2)
(182,31,2)
(264,3,2)
(162,79,2)
(32,227,2)
(245,28,2)
(152,217,2)
(120,266,2)
(213,45,2)
(79,158,2)
(187,68,2)
(109,266,2)
(23,220,2)
(233,3,2)
(151,118,2)
(46,85,2)
(153,12,2)
(108,57,2)
(242,268,2)
(68,23,2)
(259,85,2)
(266,266,2)
(13,113,2)
(67,275,2)
(13,91,2)
(107,194,2)
(94,85,2)
(261,273,2)
(136,270,2)
(288,51,2)
(237,177,2)
(32,31,2)
(50,266,2)
(90,7,2)
(206,266,2)
(231,140,2)
(234,32,2)
(92,67,2)
(76,268,2)
(204,266,2)
(244,126,2)
(133,45,2)
(155,266,2)
(74,266,2)
(209,177,2)
(144,48,2)
(85,48,2)
(61,156,2)
(221,3,2)
(201,266,2)
(111,177,2)
(272,235,2)
(25,12,2)
(12,287,2)
(288,161,2)
(49,12,2)
(165,31,2)
(115,48,2)
(18,270,2)
(271,3,2)
(147,12,2)
(207,35,2)
(257,266,2)
(126,208,2)
(231,31,2)
(12,12,2)
(87,113,2)
(161,139,2)
(36,42,2)
(31,31,2)
(150,23,2)
(86,50,2)
(24,35,2)
(19,194,2)
(276,61,2)
(6,266,2)
(257,208,2)
(94,23,2)
(166,270,2)
(172,180,2)
(98,51,2)
(35,13,2)
(229,35,2)
(56,270,2)
(268,177,2)
(258,23,2)
(50,208,2)
(17,85,2)
(205,113,2)
(3,276,2)
(138,45,2)
(222,31,2)
(209,92,2)
(3,85,2)
(159,219,2)
(31,140,2)
(14,31,2)
(175,270,2)
(148,177,2)
(288,45,2)
(221,23,2)
(236,23,2)
(270,48,2)
(191,45,2)
(50,157,2)
(156,85,2)
(131,177,2)
(33,3,2)
(154,12,2)
(142,177,2)
(214,45,2)
(252,266,2)
(187,166,2)
(244,266,2)
(126,266,2)
(250,45,2)
(82,266,2)
(139,51,2)
(73,266,2)
(286,15,2)
(13,177,2)
(179,48,2)
(123,266,2)
(7,266,2)
(3,48,2)
(225,287,2)
(110,171,2)
(195,266,2)
(279,34,2)
(264,23,2)
(250,288,2)
(234,31,2)
(149,3,2)
(58,194,2)
(95,194,2)
(162,253,2)
(91,268,2)
(228,270,2)
(65,3,2)
(154,147,2)
(235,243,2)
(266,208,2)
(174,194,2)
(39,74,2)
(178,266,2)
(109,108,2)
(7,39,2)
(280,37,2)
(53,266,2)
(55,159,2)
(227,31,2)
(71,10,2)
(196,266,2)
(57,266,2)
(276,85,2)
(116,270,2)
(91,36,2)
(9,12,2)
(37,272,2)
(166,23,2)
(65,264,2)
(194,180,2)
(61,94,2)
(199,127,2)
(216,266,2)
(137,194,2)
(224,270,2)
(159,7,2)
(268,248,2)
(43,23,2)
(157,266,2)
(85,43,2)
(161,51,2)
(40,3,2)
(96,113,2)
(187,180,2)
(42,170,2)
(238,279,2)
(184,48,2)
(33,145,2)
(101,270,2)
(4,119,2)
(80,270,2)
(187,270,2)
(172,194,2)
(168,194,2)
(159,39,2)
(212,268,2)
(31,119,2)
(232,266,2)
(1,37,2)
(194,194,2)
(210,194,2)
(61,85,2)
(275,177,2)
(118,152,2)
(23,194,2)
(219,90,2)
(41,3,2)
(170,268,2)
(10,245,2)
(86,266,2)
(75,266,2)
(211,12,2)
(239,188,2)
(278,31,2)
(177,205,2)
(20,177,2)
(227,165,2)
(92,177,2)
(48,194,2)
(220,180,2)
(203,3,2)
(176,194,2)
(254,162,2)
(89,12,2)
(47,45,2)
(141,266,2)
(74,244,2)
(129,45,2)
(235,286,2)
(181,270,2)
(40,23,2)
(203,65,2)
(125,177,2)
(240,266,2)
(232,39,2)
(177,113,2)
(248,209,2)
(36,268,2)
(247,85,2)
(203,40,2)
(220,194,2)
(11,71,2)
(156,23,2)
(97,39,2)
(223,48,2)
(91,177,2)
(67,177,2)
(39,266,2)
(218,270,2)
(258,194,2)
(146,266,2)
(150,270,2)
(16,12,2)
(236,270,2)
(114,7,2)
(165,140,2)
(57,208,2)
(68,270,2)
(286,83,2)
(79,11,2)
-----------------------------------
(0,vm_page_array)
(1,panic("qframe allocation failed")
(2,PAGE_SIZE)
(3,ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit)
(4,pv_npg * sizeof(struct md_page)
(5,M_WAITOK)
(6,i)
(7,mpte >= vm_page_array)
(8,i)
(9,pv_list_locks)
(10,s = (vm_size_t)
(11,s = round_page(s)
(12,i < NPV_LIST_LOCKS)
(13,(cpu_feature & CPUID_SS)
(14,pv_table)
(15,vmem_addr_t *)
(16,i)
(17,ppim)
(18,continue;)
(19,ppim)
(20,cpu_feature2)
(21,pg_ps_enabled)
(22,RET)
(23,ppim = pmap_preinit_mapping + i)
(24,workaround_erratum383 = 1)
(25,NPV_LIST_LOCKS)
(26,pa)
(27,i)
(28,vm_size_t)
(29,0)
(30,error)
(31,i < pv_npg)
(32,&pv_table[i].pv_list)
(33,(void)
(34,pv_dummy.pv_list)
(35,vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS)
(36,(amd_feature2 & (AMDID2_XOP |\n\\n\\t    AMDID2_FMA4)
(37,error != 0)
(38,M_WAITOK)
(39,mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT)
(40,ppim->mode)
(41,ppim)
(42,amd_feature2 & (AMDID2_XOP |\n\\n\\t    AMDID2_FMA4)
(43,ppim->pa)
(44,)
(45,pg_ps_enabled)
(46,ppim)
(47,pagesizes)
(48,ppim->va == 0)
(49,i++)
(50,pmap_pde_pindex(KERNBASE)
(51,MAXPAGESIZES > 1)
(52,0)
(53,phys_addr)
(54,sz)
(55,mpte >= vm_page_array &&\n\\n\\t\\t    mpte < &vm_page_array[vm_page_array_size])
(56,ppim)
(57,i << PAGE_SHIFT)
(58,i)
(59,1)
(60,if (vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS)
(61,ppim->pa + ppim->sz)
(62,end)
(63,s)
(64,if (pg_ps_enabled)
(65,PHYS_TO_DMAP(ppim->pa)
(66,s)
(67,CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(68,ppim->pa)
(69,qframe)
(70,i)
(71,round_page(s)
(72,error)
(73,nkpt)
(74,PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT)
(75,mpte)
(76,AMDID2_XOP)
(77,pv_list)
(78,0)
(79,kmem_malloc(kernel_arena, s,\n\\n\\t    M_WAITOK | M_ZERO)
(80,mode)
(81,)
(82,KPTphys)
(83,&qframe)
(84,MTX_DEF)
(85,ppim->pa < dmaplimit)
(86,mpte->pindex = pmap_pde_pindex(KERNBASE)
(87,cpu_feature)
(88,"qfrmlk")
(89,i)
(90,vm_page_array[vm_page_array_size])
(91,(cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(92,CPUID2_SSE41 | CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(93,for (i = 0; i < PMAP_PREINIT_MAPPING_COUNT; i++)
(94,ppim->pa)
(95,va)
(96,CPUID_SS)
(97,mpte->phys_addr)
(98,0)
(99,"pmap pv chunk list")
(100,1)
(101,ppim)
(102,mpte)
(103,if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit)
(104,1)
(105,1)
(106,pv_npg)
(107,PMAP_PREINIT_MAPPING_COUNT)
(108,KPTphys + (i << PAGE_SHIFT)
(109,mpte->phys_addr = KPTphys + (i << PAGE_SHIFT)
(110,mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN)
(111,CPUID2_AVX)
(112,s)
(113,vm_guest != VM_GUEST_NO)
(114,vm_page_array_size)
(115,pa)
(116,va)
(117,pv_dummy)
(118,vm_phys_segs[vm_phys_nsegs - 1].end)
(119,pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR)
(120,PAGE_SHIFT)
(121,)
(122,M_BESTFIT)
(123,"pmap_init: page table page is out of range")
(124,vm_page_blacklist_add(0, bootverbose)
(125,0)
(126,i << PAGE_SHIFT)
(127,struct md_page)
(128,pv_npg)
(129,MAXPAGESIZES)
(130,i)
(131,CPUID2_SSE41)
(132,bootverbose)
(133,1)
(134,s)
(135,error)
(136,ppim)
(137,i)
(138,pagesizes[1])
(139,pagesizes[1])
(140,i = 0)
(141,KPTphys)
(142,CPUID2_AESNI)
(143,pv_table)
(144,ppim)
(145,void)
(146,i)
(147,&pv_list_locks[i])
(148,CPUID2_SSSE3)
(149,ppim)
(150,ppim->va)
(151,howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR)
(152,vm_phys_segs[vm_phys_nsegs - 1])
(153,"pmap pv list")
(154,rw_init(&pv_list_locks[i], "pmap pv list")
(155,mpte)
(156,ppim->sz)
(157,pmap_pde_pindex(KERNBASE)
(158,M_WAITOK | M_ZERO)
(159,mpte < &vm_page_array[vm_page_array_size])
(160,vm_phys_segs)
(161,pagesizes[1] == 0)
(162,(struct md_page *)
(163,ppim)
(164,VM_GUEST_NO)
(165,pv_table[i])
(166,ppim->mode)
(167,"vm.pmap.pg_ps_enabled")
(168,0)
(169,pindex)
(170,AMDID2_XOP |\n\\n\\t    AMDID2_FMA4)
(171,&qframe_mtx)
(172,i++)
(173,NBPDR)
(174,pmap_preinit_mapping)
(175,sz)
(176,i)
(177,(cpu_feature & CPUID_SS)
(178,KERNBASE)
(179,continue;)
(180,i = 0)
(181,i)
(182,i)
(183,i)
(184,dmaplimit)
(185,vm_phys_nsegs)
(186,i)
(187,printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\\n", i,\n\\n\\t\\t    ppim->pa, ppim->va, ppim->sz, ppim->mode)
(188,&pg_ps_enabled)
(189,M_ZERO)
(190,pmap_initialized)
(191,pagesizes[1] = NBPDR)
(192,if (error != 0)
(193,vm_guest)
(194,i < PMAP_PREINIT_MAPPING_COUNT)
(195,KASSERT(mpte >= vm_page_array &&\n\\n\\t\\t    mpte < &vm_page_array[vm_page_array_size],\n\\n\\t\\t    ("pmap_init: page table page is out of range")
(196,mpte)
(197,if (!bootverbose)
(198,NULL)
(199,sizeof(struct md_page)
(200,pmap_initialized = 1)
(201,vm_page_array)
(202,NULL)
(203,pmap_change_attr(PHYS_TO_DMAP(ppim->pa)
(204,i)
(205,cpu_feature & CPUID_SS)
(206,mpte)
(207,1)
(208,i = 0)
(209,CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(210,ppim)
(211,i)
(212,0)
(213,NBPDR)
(214,"pmap_init: can\'t assign to pagesizes[1]")
(215,MTX_SPIN)
(216,i)
(217,vm_phys_nsegs - 1)
(218,pa)
(219,&vm_page_array[vm_page_array_size])
(220,pmap_preinit_mapping + i)
(221,ppim->sz)
(222,pv_list)
(223,bootverbose)
(224,ppim)
(225,pv_list_locks[i])
(226,0)
(227,pv_table[i].pv_list)
(228,"PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\\n")
(229,workaround_erratum383)
(230,0)
(231,i++)
(232,mpte->pindex)
(233,sz)
(234,TAILQ_INIT(&pv_table[i].pv_list)
(235,vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,\n\\n\\t    (vmem_addr_t *)
(236,ppim->sz)
(237,CPUID2_XSAVE)
(238,TAILQ_INIT(&pv_dummy.pv_list)
(239,TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled)
(240,i)
(241,mpte)
(242,amd_feature2)
(243,M_BESTFIT | M_WAITOK)
(244,KPTphys + (i << PAGE_SHIFT)
(245,(vm_size_t)
(246,qframe_mtx)
(247,dmaplimit)
(248,cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(249,pv_npg)
(250,KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,\n\\n\\t\\t    ("pmap_init: can\'t assign to pagesizes[1]")
(251,s)
(252,PAGE_SHIFT)
(253,struct md_page *)
(254,pv_table = (struct md_page *)
(255,pv_chunks_mutex)
(256,AMDID2_FMA4)
(257,i++)
(258,ppim->va)
(259,pa)
(260,if (ppim->va == 0)
(261,mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF)
(262,for (i = 0; i < NPV_LIST_LOCKS; i++)
(263,kernel_arena)
(264,ppim->pa)
(265,kernel_arena)
(266,i < nkpt)
(267,0)
(268,(cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(269,for (i = 0; i < nkpt; i++)
(270,!bootverbose)
(271,mode)
(272,error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,\n\\n\\t    (vmem_addr_t *)
(273,&pv_chunks_mutex)
(274,0)
(275,CPUID2_AVX | CPUID2_XSAVE)
(276,ppim->pa + ppim->sz < dmaplimit)
(277,ppim)
(278,pv_npg)
(279,&pv_dummy.pv_list)
(280,"qframe allocation failed")
(281,i)
(282,)
(283,pagesizes)
(284,for (i = 0; i < pv_npg; i++)
(285,)
(286,(vmem_addr_t *)
(287,i = 0)
(288,MAXPAGESIZES > 1 && pagesizes[1] == 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^