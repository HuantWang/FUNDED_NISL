-----label-----
0
-----code-----
static void goodG2B()
{
    int64_t * data;
    data = NULL;
    while(1)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
44,46
45,46
49,50
50,51
50,52
51,52
53,54
53,55
54,55
58,59
58,60
60,61
60,62
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,46,47,48,52,55,56,57,59,61,62
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
static void goodG2B(){    int64_t * data;    data = NULL;    while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
static void
goodG2B()
goodG2B
{    int64_t * data;    data = NULL;    while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
1
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(16,9,0)
(9,16,0)
(2,24,0)
(24,1,0)
(17,12,0)
(1,24,0)
(11,23,0)
(6,9,0)
(22,26,0)
(24,23,0)
(20,0,0)
(1,25,0)
(6,0,0)
(18,26,0)
(23,9,0)
(0,5,0)
(3,25,0)
(14,24,0)
(0,6,0)
(10,26,0)
(8,5,0)
(19,25,0)
(5,0,0)
(9,6,0)
(4,12,0)
(23,25,0)
(12,26,0)
(9,23,0)
(15,27,0)
(8,20,1)
(19,23,1)
(24,23,1)
(24,14,1)
(13,15,1)
(13,7,1)
(3,1,1)
(2,19,1)
(7,21,1)
(21,12,1)
(9,16,1)
(6,0,1)
(4,17,1)
(12,4,1)
(23,9,1)
(14,2,1)
(9,6,1)
(20,11,1)
(11,21,1)
(15,7,1)
(1,24,1)
(0,5,1)
(7,3,1)
(5,8,1)
(24,21,2)
(19,21,2)
(24,23,2)
(14,21,2)
(0,5,2)
(23,21,2)
(9,21,2)
(9,6,2)
(20,21,2)
(1,24,2)
(11,21,2)
(1,21,2)
(0,21,2)
(5,21,2)
(3,21,2)
(9,16,2)
(15,7,2)
(23,9,2)
(6,21,2)
(8,21,2)
(6,0,2)
(2,21,2)
-----------------------------------
(0,100*sizeof(int64_t)
(1,printLongLongLine(data[0])
(2,data)
(3,break;)
(4,NULL)
(5,sizeof(int64_t)
(6,ALLOCA(100*sizeof(int64_t)
(7,1)
(8,int64_t)
(9,(int64_t *)
(10,data)
(11,data)
(12,data = NULL)
(13,RET)
(14,0)
(15,break;)
(16,int64_t *)
(17,data)
(18,while(1)
(19,L)
(20,100)
(21,1)
(22,while(1)
(23,data = (int64_t *)
(24,data[0])
(25,)
(26,)
(27,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^