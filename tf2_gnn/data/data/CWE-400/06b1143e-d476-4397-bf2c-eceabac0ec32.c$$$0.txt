-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_08_bad()
{
    char * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,70,72
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_08_bad(){    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_08_bad()
CWE401_Memory_Leak__char_malloc_08_bad
{    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(15,8,0)
(21,8,0)
(3,18,0)
(25,0,0)
(1,8,0)
(17,27,0)
(11,30,0)
(12,30,0)
(23,32,0)
(7,21,0)
(25,23,0)
(32,23,0)
(29,17,0)
(16,22,0)
(30,28,0)
(13,8,0)
(18,28,0)
(28,23,0)
(20,21,0)
(10,0,0)
(31,22,0)
(17,29,0)
(2,28,0)
(23,28,0)
(0,10,0)
(0,25,0)
(5,31,0)
(18,22,0)
(6,18,0)
(24,10,0)
(23,25,0)
(9,29,0)
(28,22,0)
(31,28,0)
(19,0,0)
(14,26,1)
(23,32,1)
(11,28,1)
(23,25,1)
(31,5,1)
(10,24,1)
(17,29,1)
(4,14,1)
(21,20,1)
(9,30,1)
(25,0,1)
(30,12,1)
(3,17,1)
(18,28,1)
(6,3,1)
(3,30,1)
(0,10,1)
(12,11,1)
(20,7,1)
(2,26,1)
(19,2,1)
(28,23,1)
(14,31,1)
(29,9,1)
(31,28,1)
(30,28,1)
(26,21,1)
(18,6,1)
(24,19,1)
(5,18,1)
(31,26,2)
(30,26,2)
(10,26,2)
(9,30,2)
(23,26,2)
(17,30,2)
(0,10,2)
(17,29,2)
(24,26,2)
(30,28,2)
(12,26,2)
(29,30,2)
(25,0,2)
(28,26,2)
(6,26,2)
(0,26,2)
(18,28,2)
(5,26,2)
(2,26,2)
(25,26,2)
(28,23,2)
(31,28,2)
(3,26,2)
(18,26,2)
(23,25,2)
(11,26,2)
(19,26,2)
(23,32,2)
-----------------------------------
(0,100*sizeof(char)
(1,if(staticReturnsTrue()
(2,data)
(3,data)
(4,RET)
(5,data)
(6,"A String")
(7,data)
(8,)
(9,1)
(10,sizeof(char)
(11,data)
(12,NULL)
(13,data)
(14,staticReturnsTrue()
(15,if(staticReturnsTrue()
(16,if (data == NULL)
(17,exit(-1)
(18,strcpy(data, "A String")
(19,100)
(20,NULL)
(21,data = NULL)
(22,)
(23,(char *)
(24,char)
(25,malloc(100*sizeof(char)
(26,staticReturnsTrue()
(27,)
(28,data = (char *)
(29,-1)
(30,data == NULL)
(31,printLine(data)
(32,char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^