-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
47,48
47,49
47,50
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
56,61
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
67,68
69,70
69,71
70,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
117,118
118,119
118,120
119,120
-----nextToken-----
2,4,9,11,15,16,18,21,25,26,27,28,32,33,34,36,39,43,45,46,50,53,55,60,63,65,68,71,74,75,79,81,86,88,92,94,96,100,102,106,108,113,114,115,116,120,121,122
-----computeFrom-----
13,14
13,15
23,24
23,25
48,49
48,50
58,59
58,60
69,70
69,71
77,78
77,79
-----guardedBy-----
55,96
50,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = 20;
data = 20
data
data
20
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(2,1,0)
(25,5,0)
(45,40,0)
(13,48,0)
(14,58,0)
(57,17,0)
(51,35,0)
(11,8,0)
(31,48,0)
(55,26,0)
(36,21,0)
(40,56,0)
(26,23,0)
(39,9,0)
(60,61,0)
(61,4,0)
(61,17,0)
(35,8,0)
(59,1,0)
(1,59,0)
(16,43,0)
(35,51,0)
(47,24,0)
(29,48,0)
(8,35,0)
(1,4,0)
(12,22,0)
(40,45,0)
(1,43,0)
(49,53,0)
(18,48,0)
(52,58,0)
(50,8,0)
(1,22,0)
(30,13,0)
(33,23,0)
(11,9,0)
(24,8,0)
(24,9,0)
(8,9,0)
(6,53,0)
(4,23,0)
(27,13,0)
(35,59,0)
(53,8,0)
(19,11,0)
(42,21,0)
(59,35,0)
(43,58,0)
(10,4,0)
(22,1,0)
(38,23,0)
(46,58,0)
(0,23,0)
(5,48,0)
(21,8,0)
(7,41,0)
(3,4,0)
(53,9,0)
(61,43,0)
(54,43,0)
(17,61,0)
(20,45,0)
(34,23,0)
(15,48,0)
(41,37,0)
(53,49,1)
(57,60,1)
(24,8,1)
(20,21,1)
(2,50,1)
(32,31,1)
(11,19,1)
(3,10,1)
(53,8,1)
(49,6,1)
(11,8,1)
(6,21,1)
(1,22,1)
(21,36,1)
(61,4,1)
(28,34,1)
(55,44,1)
(43,16,1)
(34,26,1)
(47,53,1)
(22,12,1)
(44,43,1)
(17,57,1)
(1,4,1)
(21,8,1)
(16,54,1)
(8,35,1)
(36,42,1)
(41,7,1)
(18,41,1)
(6,40,1)
(1,43,1)
(12,2,1)
(40,45,1)
(25,28,1)
(42,8,1)
(26,55,1)
(19,24,1)
(4,3,1)
(35,51,1)
(10,44,1)
(7,61,1)
(45,20,1)
(61,17,1)
(18,11,1)
(33,4,1)
(59,1,1)
(35,59,1)
(60,28,1)
(31,5,1)
(24,47,1)
(5,25,1)
(28,33,1)
(61,43,1)
(32,18,1)
(50,61,1)
(26,44,2)
(53,61,2)
(50,61,2)
(61,17,2)
(40,45,2)
(17,28,2)
(8,61,2)
(41,61,2)
(10,44,2)
(42,61,2)
(47,61,2)
(40,21,2)
(34,44,2)
(59,1,2)
(1,61,2)
(8,35,2)
(11,61,2)
(59,61,2)
(53,8,2)
(61,4,2)
(4,44,2)
(5,28,2)
(36,61,2)
(35,51,2)
(35,59,2)
(7,61,2)
(1,43,2)
(18,28,2)
(60,28,2)
(12,61,2)
(55,44,2)
(19,61,2)
(24,61,2)
(21,61,2)
(22,61,2)
(61,43,2)
(1,4,2)
(49,61,2)
(20,21,2)
(57,28,2)
(3,44,2)
(24,8,2)
(61,28,2)
(45,21,2)
(35,61,2)
(6,61,2)
(11,8,2)
(33,44,2)
(2,61,2)
(31,28,2)
(1,22,2)
(21,8,2)
(25,28,2)
-----------------------------------
(0,case 6:)
(1,data*sizeof(wchar_t)
(2,data)
(3,20)
(4,data = 20)
(5,printLine("Benign, fixed string")
(6,myString)
(7,"Input is less than the length of the source string")
(8,myString = (wchar_t *)
(9,)
(10,data)
(11,free(myString)
(12,wchar_t)
(13,)
(14,data)
(15,case 7:)
(16,0)
(17,wcslen(HELLO_STRING)
(18,break;)
(19,myString)
(20,1)
(21,myString == NULL)
(22,sizeof(wchar_t)
(23,)
(24,printWLine(myString)
(25,"Benign, fixed string")
(26,printLine("Benign, fixed string")
(27,myString)
(28,7)
(29,default:)
(30,if (data > wcslen(HELLO_STRING)
(31,break;)
(32,RET)
(33,break;)
(34,break;)
(35,(wchar_t *)
(36,NULL)
(37,)
(38,default:)
(39,if (myString == NULL)
(40,exit(-1)
(41,printLine("Input is less than the length of the source string")
(42,myString)
(43,data = 0)
(44,6)
(45,-1)
(46,switch(6)
(47,myString)
(48,)
(49,HELLO_STRING)
(50,myString)
(51,wchar_t *)
(52,switch(7)
(53,wcscpy(myString, HELLO_STRING)
(54,data)
(55,"Benign, fixed string")
(56,)
(57,HELLO_STRING)
(58,)
(59,malloc(data*sizeof(wchar_t)
(60,data)
(61,data > wcslen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^