-----label-----
1
-----code-----
static netdev_tx_t
jme_start_xmit(struct sk_buff *skb, struct net_device *netdev)
{
	struct jme_adapter *jme = netdev_priv(netdev);
	int idx;

	if (unlikely(skb_is_gso(skb) && skb_cow_head(skb, 0))) {
		dev_kfree_skb_any(skb);
		++(NET_STAT(jme).tx_dropped);
		return NETDEV_TX_OK;
	}

	idx = jme_alloc_txdesc(jme, skb);

	if (unlikely(idx < 0)) {
		netif_stop_queue(netdev);
		netif_err(jme, tx_err, jme->dev,
			  "BUG! Tx ring full when queue awake!\n");

		return NETDEV_TX_BUSY;
	}

	if (jme_fill_tx_desc(jme, skb, idx))
		return NETDEV_TX_OK;

	jwrite32(jme, JME_TXCS, jme->reg_txcs |
				TXCS_SELECT_QUEUE0 |
				TXCS_QUEUE0S |
				TXCS_ENABLE);

	tx_dbg(jme, "xmit: %d+%d@%lu\n",
	       idx, skb_shinfo(skb)->nr_frags + 2, jiffies);
	jme_stop_queue_if_full(jme);

	return NETDEV_TX_OK;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
15,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
35,36
37,38
37,39
38,39
38,40
39,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
47,49
47,50
48,49
50,51
53,54
53,55
53,56
54,55
55,56
55,57
56,57
58,59
60,61
61,62
62,63
63,64
63,65
64,65
64,66
65,66
67,68
70,71
71,72
73,74
74,75
74,76
75,76
77,78
77,79
77,80
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
88,90
89,90
92,93
92,94
92,95
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
100,104
100,105
101,102
103,104
105,106
107,108
107,109
108,109
112,113
113,114
115,116
115,117
116,117
116,118
116,119
116,120
117,118
119,120
121,122
123,124
125,126
126,127
128,129
129,130
129,131
129,132
129,133
130,131
132,133
134,135
136,137
136,138
137,138
137,139
138,139
138,140
139,140
139,141
140,141
143,144
145,146
147,148
149,150
150,151
150,152
150,153
150,154
150,155
150,156
151,152
153,154
156,157
158,159
158,160
159,160
159,161
160,161
160,162
161,162
163,164
167,168
169,170
170,171
170,172
171,172
173,174
175,176
176,177
-----nextToken-----
3,5,8,10,11,14,16,17,22,24,25,29,31,34,36,40,44,46,49,51,52,57,59,66,68,69,72,76,79,81,83,87,90,91,96,98,102,104,106,109,110,111,114,118,120,122,124,127,131,133,135,141,142,144,146,148,152,154,155,157,162,164,165,166,168,172,174,177
-----computeFrom-----
41,42
41,43
74,75
74,76
88,89
88,90
136,137
136,138
137,138
137,139
138,139
138,140
158,159
158,160
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;UnaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static netdev_tx_tjme_start_xmit(struct sk_buff *skb, struct net_device *netdev){	struct jme_adapter *jme = netdev_priv(netdev);	int idx;	if (unlikely(skb_is_gso(skb) && skb_cow_head(skb, 0))) {		dev_kfree_skb_any(skb);		++(NET_STAT(jme).tx_dropped);		return NETDEV_TX_OK;	}	idx = jme_alloc_txdesc(jme, skb);	if (unlikely(idx < 0)) {		netif_stop_queue(netdev);		netif_err(jme, tx_err, jme->dev,			  "BUG! Tx ring full when queue awake!\n");		return NETDEV_TX_BUSY;	}	if (jme_fill_tx_desc(jme, skb, idx))		return NETDEV_TX_OK;	jwrite32(jme, JME_TXCS, jme->reg_txcs |				TXCS_SELECT_QUEUE0 |				TXCS_QUEUE0S |				TXCS_ENABLE);	tx_dbg(jme, "xmit: %d+%d@%lu\n",	       idx, skb_shinfo(skb)->nr_frags + 2, jiffies);	jme_stop_queue_if_full(jme);	return NETDEV_TX_OK;}
static netdev_tx_t
netdev_tx_t
jme_start_xmit(struct sk_buff *skb, struct net_device *netdev)
jme_start_xmit
struct sk_buff *skb
struct sk_buff
sk_buff
*skb
*
skb
struct net_device *netdev
struct net_device
net_device
*netdev
*
netdev
{	struct jme_adapter *jme = netdev_priv(netdev);	int idx;	if (unlikely(skb_is_gso(skb) && skb_cow_head(skb, 0))) {		dev_kfree_skb_any(skb);		++(NET_STAT(jme).tx_dropped);		return NETDEV_TX_OK;	}	idx = jme_alloc_txdesc(jme, skb);	if (unlikely(idx < 0)) {		netif_stop_queue(netdev);		netif_err(jme, tx_err, jme->dev,			  "BUG! Tx ring full when queue awake!\n");		return NETDEV_TX_BUSY;	}	if (jme_fill_tx_desc(jme, skb, idx))		return NETDEV_TX_OK;	jwrite32(jme, JME_TXCS, jme->reg_txcs |				TXCS_SELECT_QUEUE0 |				TXCS_QUEUE0S |				TXCS_ENABLE);	tx_dbg(jme, "xmit: %d+%d@%lu\n",	       idx, skb_shinfo(skb)->nr_frags + 2, jiffies);	jme_stop_queue_if_full(jme);	return NETDEV_TX_OK;}
struct jme_adapter *jme = netdev_priv(netdev);
struct jme_adapter *jme = netdev_priv(netdev);
struct jme_adapter
jme_adapter
*jme = netdev_priv(netdev)
*
jme
= netdev_priv(netdev)
netdev_priv(netdev)
netdev_priv
netdev_priv
netdev
netdev
int idx;
int idx;
int
idx
idx
if (unlikely(skb_is_gso(skb) && skb_cow_head(skb, 0))) {		dev_kfree_skb_any(skb);		++(NET_STAT(jme).tx_dropped);		return NETDEV_TX_OK;	}
unlikely(skb_is_gso(skb) && skb_cow_head(skb, 0))
unlikely
unlikely
skb_is_gso(skb) && skb_cow_head(skb, 0)
skb_is_gso(skb)
skb_is_gso
skb_is_gso
skb
skb
skb_cow_head(skb, 0)
skb_cow_head
skb_cow_head
skb
skb
0
{		dev_kfree_skb_any(skb);		++(NET_STAT(jme).tx_dropped);		return NETDEV_TX_OK;	}
dev_kfree_skb_any(skb);
dev_kfree_skb_any(skb)
dev_kfree_skb_any
dev_kfree_skb_any
skb
skb
++(NET_STAT(jme).tx_dropped);
++(NET_STAT(jme).tx_dropped)
(NET_STAT(jme).tx_dropped)
NET_STAT(jme).tx_dropped
NET_STAT(jme)
NET_STAT
NET_STAT
jme
jme
tx_dropped
return NETDEV_TX_OK;
NETDEV_TX_OK
NETDEV_TX_OK
idx = jme_alloc_txdesc(jme, skb);
idx = jme_alloc_txdesc(jme, skb)
idx
idx
jme_alloc_txdesc(jme, skb)
jme_alloc_txdesc
jme_alloc_txdesc
jme
jme
skb
skb
if (unlikely(idx < 0)) {		netif_stop_queue(netdev);		netif_err(jme, tx_err, jme->dev,			  "BUG! Tx ring full when queue awake!\n");		return NETDEV_TX_BUSY;	}
unlikely(idx < 0)
unlikely
unlikely
idx < 0
idx
idx
0
{		netif_stop_queue(netdev);		netif_err(jme, tx_err, jme->dev,			  "BUG! Tx ring full when queue awake!\n");		return NETDEV_TX_BUSY;	}
netif_stop_queue(netdev);
netif_stop_queue(netdev)
netif_stop_queue
netif_stop_queue
netdev
netdev
netif_err(jme, tx_err, jme->dev,			  "BUG! Tx ring full when queue awake!\n");
netif_err(jme, tx_err, jme->dev,			  "BUG! Tx ring full when queue awake!\n")
netif_err
netif_err
jme
jme
tx_err
tx_err
jme->dev
jme
jme
dev
"BUG! Tx ring full when queue awake!\n"
return NETDEV_TX_BUSY;
NETDEV_TX_BUSY
NETDEV_TX_BUSY
if (jme_fill_tx_desc(jme, skb, idx))		return NETDEV_TX_OK;
jme_fill_tx_desc(jme, skb, idx)
jme_fill_tx_desc
jme_fill_tx_desc
jme
jme
skb
skb
idx
idx
return NETDEV_TX_OK;
NETDEV_TX_OK
NETDEV_TX_OK
jwrite32(jme, JME_TXCS, jme->reg_txcs |				TXCS_SELECT_QUEUE0 |				TXCS_QUEUE0S |				TXCS_ENABLE);
jwrite32(jme, JME_TXCS, jme->reg_txcs |				TXCS_SELECT_QUEUE0 |				TXCS_QUEUE0S |				TXCS_ENABLE)
jwrite32
jwrite32
jme
jme
JME_TXCS
JME_TXCS
jme->reg_txcs |				TXCS_SELECT_QUEUE0 |				TXCS_QUEUE0S |				TXCS_ENABLE
jme->reg_txcs |				TXCS_SELECT_QUEUE0 |				TXCS_QUEUE0S
jme->reg_txcs |				TXCS_SELECT_QUEUE0
jme->reg_txcs
jme
jme
reg_txcs
TXCS_SELECT_QUEUE0
TXCS_SELECT_QUEUE0
TXCS_QUEUE0S
TXCS_QUEUE0S
TXCS_ENABLE
TXCS_ENABLE
tx_dbg(jme, "xmit: %d+%d@%lu\n",	       idx, skb_shinfo(skb)->nr_frags + 2, jiffies);
tx_dbg(jme, "xmit: %d+%d@%lu\n",	       idx, skb_shinfo(skb)->nr_frags + 2, jiffies)
tx_dbg
tx_dbg
jme
jme
"xmit: %d+%d@%lu\n"
idx
idx
skb_shinfo(skb)->nr_frags + 2
skb_shinfo(skb)->nr_frags
skb_shinfo(skb)
skb_shinfo
skb_shinfo
skb
skb
nr_frags
2
jiffies
jiffies
jme_stop_queue_if_full(jme);
jme_stop_queue_if_full(jme)
jme_stop_queue_if_full
jme_stop_queue_if_full
jme
jme
return NETDEV_TX_OK;
NETDEV_TX_OK
NETDEV_TX_OK
-----joern-----
(0,59,0)
(3,65,0)
(58,54,0)
(16,72,0)
(19,18,0)
(76,11,0)
(38,72,0)
(75,73,0)
(44,11,0)
(17,11,0)
(46,23,0)
(66,52,0)
(7,11,0)
(54,11,0)
(68,79,0)
(14,42,0)
(69,42,0)
(1,30,0)
(50,54,0)
(29,12,0)
(34,14,0)
(45,11,0)
(67,42,0)
(57,38,0)
(14,33,0)
(72,56,0)
(70,80,0)
(14,39,0)
(59,23,0)
(41,6,0)
(25,9,0)
(82,26,0)
(15,30,0)
(35,14,0)
(10,56,0)
(73,33,0)
(77,66,0)
(9,42,0)
(48,41,0)
(54,42,0)
(56,33,0)
(2,55,0)
(20,46,0)
(72,38,0)
(65,53,0)
(74,20,0)
(64,42,0)
(5,9,0)
(51,12,0)
(43,11,0)
(28,60,0)
(39,67,0)
(31,20,0)
(12,40,0)
(82,80,0)
(26,23,0)
(36,6,0)
(30,39,0)
(22,40,0)
(53,54,0)
(55,73,0)
(42,11,0)
(69,52,0)
(6,53,0)
(24,69,0)
(39,11,0)
(56,72,0)
(59,33,0)
(40,12,0)
(30,15,0)
(67,33,0)
(55,40,0)
(18,47,0)
(72,16,0)
(65,42,0)
(49,12,0)
(40,55,0)
(69,9,0)
(4,67,0)
(62,30,0)
(81,74,0)
(63,26,0)
(71,69,0)
(42,18,0)
(78,14,0)
(60,52,0)
(20,74,0)
(21,65,0)
(79,11,0)
(12,42,0)
(18,42,0)
(83,69,0)
(73,55,0)
(12,39,0)
(7,42,0)
(46,20,0)
(9,69,0)
(32,12,0)
(54,53,0)
(12,11,0)
(61,41,0)
(74,42,0)
(60,47,0)
(82,66,0)
(38,33,0)
(67,39,0)
(37,39,0)
(6,41,0)
(27,7,0)
(53,6,0)
(8,67,0)
(13,56,0)
(53,65,0)
(82,79,0)
(38,33,1)
(14,39,1)
(73,33,1)
(19,64,1)
(72,38,1)
(18,19,1)
(56,33,1)
(68,7,1)
(59,0,1)
(65,21,1)
(18,47,1)
(20,74,1)
(2,73,1)
(1,62,1)
(63,46,1)
(39,67,1)
(15,30,1)
(75,29,1)
(77,69,1)
(40,22,1)
(69,71,1)
(12,39,1)
(31,74,1)
(83,24,1)
(67,4,1)
(12,32,1)
(14,42,1)
(78,35,1)
(14,33,1)
(49,54,1)
(55,73,1)
(59,33,1)
(16,72,1)
(60,47,1)
(38,57,1)
(6,41,1)
(53,6,1)
(48,36,1)
(25,5,1)
(82,79,1)
(7,42,1)
(70,14,1)
(62,39,1)
(29,51,1)
(8,37,1)
(65,42,1)
(51,49,1)
(42,18,1)
(53,65,1)
(69,9,1)
(81,59,1)
(57,42,1)
(14,78,1)
(30,39,1)
(28,15,1)
(79,68,1)
(55,2,1)
(13,38,1)
(0,16,1)
(54,53,1)
(36,65,1)
(34,15,1)
(3,50,1)
(71,9,1)
(35,34,1)
(40,55,1)
(10,13,1)
(74,42,1)
(12,40,1)
(37,16,1)
(72,56,1)
(22,55,1)
(46,20,1)
(73,75,1)
(67,33,1)
(66,77,1)
(50,58,1)
(26,63,1)
(67,42,1)
(80,70,1)
(58,14,1)
(12,42,1)
(9,25,1)
(32,40,1)
(27,12,1)
(24,60,1)
(41,61,1)
(7,27,1)
(54,42,1)
(74,81,1)
(69,42,1)
(82,80,1)
(5,83,1)
(60,28,1)
(82,66,1)
(20,31,1)
(9,42,1)
(4,8,1)
(61,48,1)
(56,10,1)
(82,26,1)
(30,1,1)
(21,3,1)
(63,16,2)
(18,47,2)
(9,42,2)
(61,14,2)
(24,15,2)
(60,15,2)
(82,26,2)
(34,15,2)
(12,14,2)
(65,42,2)
(31,16,2)
(42,18,2)
(53,65,2)
(26,16,2)
(54,14,2)
(55,73,2)
(2,14,2)
(59,33,2)
(60,47,2)
(65,14,2)
(51,14,2)
(82,66,2)
(16,72,2)
(59,16,2)
(40,55,2)
(37,16,2)
(83,15,2)
(29,14,2)
(49,14,2)
(14,42,2)
(39,67,2)
(54,53,2)
(28,15,2)
(3,14,2)
(46,16,2)
(69,9,2)
(54,42,2)
(0,16,2)
(32,14,2)
(21,14,2)
(7,42,2)
(67,16,2)
(50,14,2)
(58,14,2)
(53,14,2)
(77,15,2)
(73,33,2)
(46,20,2)
(9,15,2)
(73,14,2)
(4,16,2)
(1,16,2)
(13,38,2)
(14,33,2)
(82,80,2)
(53,6,2)
(12,42,2)
(68,14,2)
(6,14,2)
(20,74,2)
(67,33,2)
(72,56,2)
(71,15,2)
(56,38,2)
(78,15,2)
(22,14,2)
(14,15,2)
(8,16,2)
(35,15,2)
(67,42,2)
(79,14,2)
(40,14,2)
(30,16,2)
(69,15,2)
(12,40,2)
(75,14,2)
(66,15,2)
(25,15,2)
(62,16,2)
(15,16,2)
(10,38,2)
(12,39,2)
(55,14,2)
(20,16,2)
(82,79,2)
(72,38,2)
(30,39,2)
(14,39,2)
(27,14,2)
(74,16,2)
(48,14,2)
(7,14,2)
(81,16,2)
(56,33,2)
(36,14,2)
(70,14,2)
(74,42,2)
(41,14,2)
(6,41,2)
(69,42,2)
(39,16,2)
(15,30,2)
(80,14,2)
(38,33,2)
(5,15,2)
-----------------------------------
(0,skb)
(1,0)
(2,nr_frags)
(3,jme)
(4,skb)
(5,jme)
(6,TXCS_SELECT_QUEUE0 |\n\\n\\t\\t\\t\\tTXCS_QUEUE0S |\n\\n\\t\\t\\t\\tTXCS_ENABLE)
(7,jme_stop_queue_if_full(jme)
(8,jme)
(9,jme->dev)
(10,0)
(11,)
(12,tx_dbg(jme, "xmit: %d+%d@%lu\\n",\n\\n\\t       idx, skb_shinfo(skb)
(13,skb)
(14,jme_fill_tx_desc(jme, skb, idx)
(15,unlikely(idx < 0)
(16,unlikely(skb_is_gso(skb)
(17,jme)
(18,netdev_priv(netdev)
(19,netdev)
(20,NET_STAT(jme)
(21,reg_txcs)
(22,2)
(23,)
(24,jme)
(25,dev)
(26,return NETDEV_TX_OK;)
(27,jme)
(28,netdev)
(29,idx)
(30,idx < 0)
(31,tx_dropped)
(32,jiffies)
(33,struct sk_buff *skb)
(34,jme)
(35,skb)
(36,TXCS_SELECT_QUEUE0)
(37,idx)
(38,skb_is_gso(skb)
(39,idx = jme_alloc_txdesc(jme, skb)
(40,skb_shinfo(skb)
(41,TXCS_QUEUE0S |\n\\n\\t\\t\\t\\tTXCS_ENABLE)
(42,*jme = netdev_priv(netdev)
(43,if (jme_fill_tx_desc(jme, skb, idx)
(44,idx)
(45,if (unlikely(idx < 0)
(46,++(NET_STAT(jme)
(47,struct net_device *netdev)
(48,TXCS_QUEUE0S)
(49,jme)
(50,JME_TXCS)
(51,"xmit: %d+%d@%lu\\n")
(52,)
(53,jme->reg_txcs |\n\\n\\t\\t\\t\\tTXCS_SELECT_QUEUE0 |\n\\n\\t\\t\\t\\tTXCS_QUEUE0S |\n\\n\\t\\t\\t\\tTXCS_ENABLE)
(54,jwrite32(jme, JME_TXCS, jme->reg_txcs |\n\\n\\t\\t\\t\\tTXCS_SELECT_QUEUE0 |\n\\n\\t\\t\\t\\tTXCS_QUEUE0S |\n\\n\\t\\t\\t\\tTXCS_ENABLE)
(55,skb_shinfo(skb)
(56,skb_cow_head(skb, 0)
(57,skb)
(58,jme)
(59,dev_kfree_skb_any(skb)
(60,netif_stop_queue(netdev)
(61,TXCS_ENABLE)
(62,idx)
(63,NETDEV_TX_OK)
(64,jme)
(65,jme->reg_txcs)
(66,return NETDEV_TX_BUSY;)
(67,jme_alloc_txdesc(jme, skb)
(68,NETDEV_TX_OK)
(69,netif_err(jme, tx_err, jme->dev,\n\\n\\t\\t\\t  "BUG! Tx ring full when queue awake!\\n")
(70,NETDEV_TX_OK)
(71,"BUG! Tx ring full when queue awake!\\n")
(72,skb_is_gso(skb)
(73,skb_shinfo(skb)
(74,NET_STAT(jme)
(75,skb)
(76,if (unlikely(skb_is_gso(skb)
(77,NETDEV_TX_BUSY)
(78,idx)
(79,return NETDEV_TX_OK;)
(80,return NETDEV_TX_OK;)
(81,jme)
(82,RET)
(83,tx_err)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^