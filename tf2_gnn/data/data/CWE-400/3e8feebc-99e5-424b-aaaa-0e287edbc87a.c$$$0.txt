-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(staticTrue)
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
64,65
65,66
65,67
66,67
67,68
67,69
68,69
70,71
70,72
72,73
74,75
74,76
75,76
75,77
76,77
76,78
77,78
80,81
80,82
81,82
84,85
85,86
85,87
85,88
85,89
86,87
87,88
87,89
88,89
91,92
91,93
92,93
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,69,71,73,78,79,82,83,89,90,93,97,98,100,103,108,109
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
75,76
75,77
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
-----guardedBy-----
38,54
82,100
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticTrue)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticTrue)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticTrue
staticTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(staticTrue)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
staticTrue
staticTrue
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(6,14,0)
(53,4,0)
(15,47,0)
(44,57,0)
(31,14,0)
(26,7,0)
(9,13,0)
(3,39,0)
(2,47,0)
(34,15,0)
(0,3,0)
(30,3,0)
(28,25,0)
(19,48,0)
(47,49,0)
(49,7,0)
(17,49,0)
(40,36,0)
(13,9,0)
(25,28,0)
(50,17,0)
(29,53,0)
(11,48,0)
(17,14,0)
(43,47,0)
(20,7,0)
(52,25,0)
(1,48,0)
(16,9,0)
(5,28,0)
(41,49,0)
(8,6,0)
(56,51,0)
(14,6,0)
(55,39,0)
(47,15,0)
(14,22,0)
(13,17,0)
(28,3,0)
(59,24,0)
(60,17,0)
(35,28,0)
(58,7,0)
(57,53,0)
(32,59,0)
(37,53,0)
(23,19,0)
(9,14,0)
(42,49,0)
(21,57,0)
(51,38,0)
(33,41,0)
(12,39,0)
(17,13,0)
(6,3,0)
(47,14,0)
(9,49,0)
(47,2,0)
(27,9,0)
(15,48,0)
(49,41,0)
(45,28,0)
(39,54,0)
(46,15,1)
(1,13,1)
(51,56,1)
(16,27,1)
(41,33,1)
(60,9,1)
(14,6,1)
(15,47,1)
(57,21,1)
(17,50,1)
(45,3,1)
(10,18,1)
(35,5,1)
(23,51,1)
(32,25,1)
(48,11,1)
(34,19,1)
(9,14,1)
(30,18,1)
(56,15,1)
(31,25,1)
(17,14,1)
(19,23,1)
(47,14,1)
(47,43,1)
(5,45,1)
(13,9,1)
(44,10,1)
(27,57,1)
(34,48,1)
(10,14,1)
(46,10,1)
(10,59,1)
(52,28,1)
(47,2,1)
(17,49,1)
(25,28,1)
(21,44,1)
(0,30,1)
(11,1,1)
(25,52,1)
(18,49,1)
(28,35,1)
(43,34,1)
(8,31,1)
(46,13,1)
(15,48,1)
(47,49,1)
(59,32,1)
(6,8,1)
(28,3,1)
(3,0,1)
(9,49,1)
(49,41,1)
(9,16,1)
(33,42,1)
(19,48,1)
(6,3,1)
(13,17,1)
(50,60,1)
(32,25,2)
(13,10,2)
(31,25,2)
(60,9,2)
(19,15,2)
(28,18,2)
(15,47,2)
(35,18,2)
(45,18,2)
(52,18,2)
(17,9,2)
(14,25,2)
(14,6,2)
(57,10,2)
(43,13,2)
(25,28,2)
(6,25,2)
(11,13,2)
(50,9,2)
(9,10,2)
(15,48,2)
(16,10,2)
(47,15,2)
(47,14,2)
(19,48,2)
(43,15,2)
(51,15,2)
(21,10,2)
(30,18,2)
(8,25,2)
(13,9,2)
(15,15,2)
(34,13,2)
(5,18,2)
(47,2,2)
(49,41,2)
(56,15,2)
(3,18,2)
(48,13,2)
(13,17,2)
(17,14,2)
(17,49,2)
(0,18,2)
(6,3,2)
(28,3,2)
(59,25,2)
(25,18,2)
(44,10,2)
(9,49,2)
(34,15,2)
(15,13,2)
(1,13,2)
(47,13,2)
(9,14,2)
(27,10,2)
(23,15,2)
(47,49,2)
-----------------------------------
(0,"")
(1,i)
(2,size_t)
(3,inputBuffer[CHAR_ARRAY_SIZE] = "")
(4,)
(5,CHAR_ARRAY_SIZE)
(6,atoi(inputBuffer)
(7,)
(8,inputBuffer)
(9,count > 0)
(10,staticTrue)
(11,0)
(12,inputBuffer)
(13,count > 0 && count <= 20)
(14,count = atoi(inputBuffer)
(15,i < (size_t)
(16,0)
(17,count <= 20)
(18,staticTrue)
(19,i++)
(20,count)
(21,0)
(22,)
(23,i)
(24,)
(25,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,if(staticTrue)
(27,count)
(28,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(29,i)
(30,inputBuffer)
(31,count)
(32,"fgets()
(33,1)
(34,i)
(35,stdin)
(36,)
(37,if (count > 0 && count <= 20)
(38,)
(39,)
(40,for (i = 0; i < (size_t)
(41,-1)
(42,count)
(43,count)
(44,i)
(45,inputBuffer)
(46,RET)
(47,(size_t)
(48,i = 0)
(49,count = -1)
(50,20)
(51,printLine("Hello")
(52,NULL)
(53,)
(54,)
(55,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(56,"Hello")
(57,i = 0)
(58,if(staticTrue)
(59,printLine("fgets()
(60,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^