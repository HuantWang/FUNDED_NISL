-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    /* Initialize count */
    count = -1;
    count = CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource(count);
    {
        size_t i = 0;
        /* FIX: Validate count before using it as the for loop variant */
        if (count > 0 && count <= 20)
        {
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
28,29
28,30
29,30
31,32
31,33
33,34
35,36
35,37
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
45,46
46,47
46,48
46,49
46,50
47,48
48,49
48,50
49,50
52,53
52,54
53,54
55,56
55,57
56,57
56,58
57,58
60,61
62,63
63,64
65,66
66,67
67,68
67,69
68,69
-----nextToken-----
2,4,8,10,14,16,20,23,25,30,32,34,39,40,43,44,50,51,54,58,59,61,64,69,70
-----computeFrom-----
12,13
12,14
18,19
18,20
36,37
36,38
37,38
37,39
41,42
41,43
48,49
48,50
52,53
52,54
-----guardedBy-----
43,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    int count;    /* Initialize count */    count = -1;    count = CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource(count);    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodB2G()
goodB2G
{    int count;    /* Initialize count */    count = -1;    count = CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource(count);    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
count = CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource(count);
count = CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource(count)
count
count
CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource(count)
CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource
CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource
count
count
{        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(1,22,0)
(24,0,0)
(22,7,0)
(28,14,0)
(0,24,0)
(4,5,0)
(34,20,0)
(0,5,0)
(22,14,0)
(2,35,0)
(15,24,0)
(21,17,0)
(25,27,0)
(26,7,0)
(35,2,0)
(12,15,0)
(31,17,0)
(30,2,0)
(13,28,0)
(20,21,0)
(18,35,0)
(11,0,0)
(24,15,0)
(8,0,0)
(32,19,0)
(15,5,0)
(27,3,0)
(5,17,0)
(37,2,0)
(2,17,0)
(5,30,0)
(9,7,0)
(23,30,0)
(7,5,0)
(7,9,0)
(30,5,0)
(29,21,0)
(6,14,0)
(7,22,0)
(36,20,0)
(38,14,0)
(10,15,0)
(16,21,0)
(34,36,1)
(0,5,1)
(24,0,1)
(35,18,1)
(26,1,1)
(1,14,1)
(15,10,1)
(24,15,1)
(28,13,1)
(30,23,1)
(10,12,1)
(1,28,1)
(5,30,1)
(15,5,1)
(23,4,1)
(6,24,1)
(30,2,1)
(13,27,1)
(2,35,1)
(22,14,1)
(12,0,1)
(0,11,1)
(25,22,1)
(33,24,1)
(28,14,1)
(38,6,1)
(20,34,1)
(8,20,1)
(4,2,1)
(33,22,1)
(7,9,1)
(36,5,1)
(7,5,1)
(18,37,1)
(27,25,1)
(14,38,1)
(7,26,1)
(11,8,1)
(22,7,1)
(28,22,2)
(7,9,2)
(2,35,2)
(15,0,2)
(6,24,2)
(24,15,2)
(22,22,2)
(14,24,2)
(22,7,2)
(24,0,2)
(27,22,2)
(26,24,2)
(0,5,2)
(22,24,2)
(10,0,2)
(13,22,2)
(15,5,2)
(38,24,2)
(1,22,2)
(26,22,2)
(30,2,2)
(7,5,2)
(12,0,2)
(7,24,2)
(1,24,2)
(5,30,2)
(28,14,2)
(22,14,2)
(25,22,2)
(7,22,2)
-----------------------------------
(0,count > 0)
(1,i)
(2,count = -1)
(3,)
(4,count)
(5,count = CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource(count)
(6,i)
(7,(size_t)
(8,count)
(9,size_t)
(10,20)
(11,0)
(12,count)
(13,i)
(14,i = 0)
(15,count <= 20)
(16,i)
(17,)
(18,1)
(19,)
(20,i = 0)
(21,)
(22,i < (size_t)
(23,count)
(24,count > 0 && count <= 20)
(25,"Hello")
(26,count)
(27,printLine("Hello")
(28,i++)
(29,if (count > 0 && count <= 20)
(30,CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource(count)
(31,count)
(32,for (i = 0; i < (size_t)
(33,RET)
(34,0)
(35,-1)
(36,i)
(37,count)
(38,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^