-----label-----
0
-----code-----
void CWE400_Resource_Exhaustion__rand_sleep_53d_goodB2GSink(int count)
{
    /* FIX: Validate count before using it as a parameter in the sleep function */
    if (count > 0 && count <= 2000)
    {
        SLEEP(count);
        printLine("Sleep time OK");
    }
    else
    {
        printLine("Sleep time too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
11,12
11,13
12,13
12,14
13,14
16,17
16,18
17,18
20,21
20,22
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
29,30
32,33
33,34
34,35
34,36
35,36
-----nextToken-----
2,4,6,8,14,15,18,19,24,26,30,31,36,37
-----computeFrom-----
11,12
11,13
12,13
12,14
16,17
16,18
-----guardedBy-----
18,26
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_sleep_53d_goodB2GSink(int count){    /* FIX: Validate count before using it as a parameter in the sleep function */    if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }}
void
CWE400_Resource_Exhaustion__rand_sleep_53d_goodB2GSink(int count)
CWE400_Resource_Exhaustion__rand_sleep_53d_goodB2GSink
int count
int
count
count
{    /* FIX: Validate count before using it as a parameter in the sleep function */    if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }}
if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{        SLEEP(count);        printLine("Sleep time OK");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{        printLine("Sleep time too long");    }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(12,13,0)
(15,14,0)
(4,12,0)
(4,10,0)
(8,4,0)
(17,13,0)
(7,6,0)
(9,13,0)
(12,4,0)
(13,10,0)
(13,12,0)
(11,4,0)
(0,3,0)
(6,10,0)
(1,2,0)
(2,5,0)
(6,5,0)
(18,0,0)
(0,18,1)
(9,4,1)
(12,4,1)
(6,7,1)
(2,1,1)
(13,10,1)
(4,10,1)
(1,6,1)
(16,2,1)
(12,13,1)
(16,0,1)
(13,17,1)
(6,10,1)
(17,9,1)
(4,11,1)
(18,12,1)
(11,8,1)
(7,12,1)
(18,12,2)
(1,12,2)
(2,12,2)
(9,4,2)
(4,10,2)
(0,12,2)
(6,10,2)
(13,10,2)
(12,13,2)
(6,12,2)
(17,4,2)
(7,12,2)
(12,4,2)
(13,4,2)
-----------------------------------
(0,printLine("Sleep time too long")
(1,"Sleep time OK")
(2,printLine("Sleep time OK")
(3,)
(4,count > 0)
(5,)
(6,SLEEP(count)
(7,count)
(8,count)
(9,count)
(10,int count)
(11,0)
(12,count > 0 && count <= 2000)
(13,count <= 2000)
(14,)
(15,if (count > 0 && count <= 2000)
(16,RET)
(17,2000)
(18,"Sleep time too long")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^