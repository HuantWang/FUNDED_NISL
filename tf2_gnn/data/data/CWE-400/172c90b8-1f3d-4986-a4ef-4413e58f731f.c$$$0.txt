-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_66b_goodB2GSink(size_t dataArray[])
{
    size_t data = dataArray[2];
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
27,28
27,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
40,42
41,42
44,45
44,46
44,47
44,48
44,49
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
52,53
54,55
54,56
55,56
57,58
57,59
58,59
60,61
61,62
61,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
78,81
79,80
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,7,9,10,15,17,21,22,26,28,29,34,37,39,42,43,48,51,53,56,59,62,63,67,69,74,76,80,82,84,88,90,94,96,101,102
-----computeFrom-----
31,32
31,33
32,33
32,34
40,41
40,42
46,47
46,48
57,58
57,59
65,66
65,67
-----guardedBy-----
39,84
42,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_66b_goodB2GSink(size_t dataArray[]){    size_t data = dataArray[2];    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_66b_goodB2GSink(size_t dataArray[])
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_66b_goodB2GSink
size_t dataArray[]
size_t
size_t
dataArray[]
dataArray
[]
{    size_t data = dataArray[2];    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data = dataArray[2];
size_t data = dataArray[2];
size_t
size_t
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(11,20,0)
(26,44,0)
(35,44,0)
(4,38,0)
(26,6,0)
(15,11,0)
(1,6,0)
(37,27,0)
(7,24,0)
(39,15,0)
(19,15,0)
(42,38,0)
(29,20,0)
(33,18,0)
(38,42,0)
(38,4,0)
(45,47,0)
(21,27,0)
(14,34,0)
(5,44,0)
(12,35,0)
(17,11,0)
(47,10,0)
(5,28,0)
(34,11,0)
(15,20,0)
(30,31,0)
(9,26,0)
(35,24,0)
(37,35,0)
(36,27,0)
(23,43,0)
(47,45,0)
(27,44,0)
(24,35,0)
(43,2,0)
(31,11,0)
(31,20,0)
(8,2,0)
(22,44,0)
(6,26,0)
(32,45,0)
(3,5,0)
(41,43,0)
(27,37,0)
(44,2,0)
(35,37,0)
(18,16,0)
(26,4,0)
(11,38,0)
(44,5,0)
(4,26,0)
(40,5,0)
(46,20,0)
(13,34,0)
(46,11,0)
(38,11,0)
(0,46,0)
(47,45,1)
(35,24,1)
(15,11,1)
(38,4,1)
(37,35,1)
(27,36,1)
(39,34,1)
(31,11,1)
(0,15,1)
(38,42,1)
(17,37,1)
(4,26,1)
(21,35,1)
(35,44,1)
(26,6,1)
(33,37,1)
(34,11,1)
(46,0,1)
(13,14,1)
(19,39,1)
(15,19,1)
(26,44,1)
(11,38,1)
(34,13,1)
(27,44,1)
(14,11,1)
(25,31,1)
(9,17,1)
(30,46,1)
(7,12,1)
(3,40,1)
(45,32,1)
(5,3,1)
(31,30,1)
(39,47,1)
(40,22,1)
(32,34,1)
(5,28,1)
(46,11,1)
(6,1,1)
(1,9,1)
(44,5,1)
(18,33,1)
(24,7,1)
(12,44,1)
(25,18,1)
(36,21,1)
(37,27,1)
(38,37,2)
(34,37,2)
(15,11,2)
(46,11,2)
(36,35,2)
(1,37,2)
(37,27,2)
(11,37,2)
(39,37,2)
(26,37,2)
(27,35,2)
(11,38,2)
(18,37,2)
(14,37,2)
(6,37,2)
(35,24,2)
(4,37,2)
(27,44,2)
(30,37,2)
(26,44,2)
(0,37,2)
(9,37,2)
(46,37,2)
(26,6,2)
(17,37,2)
(15,37,2)
(4,26,2)
(44,5,2)
(37,35,2)
(21,35,2)
(47,34,2)
(34,11,2)
(5,28,2)
(32,34,2)
(31,11,2)
(33,37,2)
(35,44,2)
(38,4,2)
(47,45,2)
(31,37,2)
(38,42,2)
(13,37,2)
(45,34,2)
(19,37,2)
-----------------------------------
(0,myString)
(1,wchar_t)
(2,)
(3,2)
(4,malloc(data*sizeof(wchar_t)
(5,dataArray[2])
(6,sizeof(wchar_t)
(7,HELLO_STRING)
(8,data)
(9,data)
(10,)
(11,myString = (wchar_t *)
(12,data)
(13,NULL)
(14,myString)
(15,wcscpy(myString, HELLO_STRING)
(16,)
(17,myString)
(18,printLine("Input is less than the length of the source string or too large")
(19,HELLO_STRING)
(20,)
(21,data)
(22,data)
(23,if (data > wcslen(HELLO_STRING)
(24,wcslen(HELLO_STRING)
(25,RET)
(26,data*sizeof(wchar_t)
(27,data < 100)
(28,size_t dataArray[])
(29,if (myString == NULL)
(30,myString)
(31,free(myString)
(32,1)
(33,"Input is less than the length of the source string or too large")
(34,myString == NULL)
(35,data > wcslen(HELLO_STRING)
(36,100)
(37,data > wcslen(HELLO_STRING)
(38,(wchar_t *)
(39,myString)
(40,dataArray)
(41,myString)
(42,wchar_t *)
(43,)
(44,data = dataArray[2])
(45,-1)
(46,printWLine(myString)
(47,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^