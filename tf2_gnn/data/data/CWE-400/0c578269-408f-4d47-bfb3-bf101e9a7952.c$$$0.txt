-----label-----
0
-----code-----
static void goodB2GSink(int count)
{
    {
        size_t i = 0;
        /* FIX: Validate count before using it as the for loop variant */
        if (count > 0 && count <= 20)
        {
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
19,20
19,21
20,21
20,22
21,22
21,23
22,23
25,26
25,27
26,27
29,30
30,31
30,32
30,33
30,34
31,32
32,33
32,34
33,34
36,37
36,38
37,38
39,40
39,41
40,41
40,42
41,42
44,45
46,47
47,48
49,50
50,51
51,52
51,53
52,53
-----nextToken-----
2,4,6,8,14,16,18,23,24,27,28,34,35,38,42,43,45,48,53,54
-----computeFrom-----
20,21
20,22
21,22
21,23
25,26
25,27
32,33
32,34
36,37
36,38
-----guardedBy-----
27,45
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2GSink(int count){    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodB2GSink(int count)
goodB2GSink
int count
int
count
count
{    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
{        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(21,7,0)
(7,21,0)
(28,7,0)
(0,9,0)
(11,0,0)
(29,8,0)
(2,17,0)
(10,22,0)
(4,0,0)
(26,18,0)
(8,19,0)
(18,3,0)
(27,22,0)
(15,4,0)
(20,10,0)
(23,22,0)
(16,4,0)
(12,23,0)
(13,24,0)
(21,18,0)
(1,7,0)
(8,3,0)
(14,22,0)
(18,21,0)
(7,3,0)
(5,18,0)
(8,23,0)
(6,0,0)
(24,25,0)
(19,8,0)
(23,8,0)
(12,10,1)
(21,7,1)
(23,8,1)
(10,22,1)
(21,18,1)
(23,22,1)
(28,1,1)
(18,3,1)
(27,14,1)
(30,21,1)
(10,20,1)
(7,3,1)
(29,12,1)
(7,28,1)
(30,23,1)
(22,27,1)
(12,22,1)
(15,16,1)
(5,7,1)
(8,29,1)
(20,24,1)
(8,3,1)
(24,13,1)
(26,5,1)
(1,4,1)
(14,21,1)
(18,26,1)
(8,19,1)
(4,15,1)
(13,23,1)
(29,23,2)
(14,21,2)
(22,21,2)
(8,21,2)
(18,7,2)
(8,3,2)
(26,7,2)
(29,21,2)
(21,18,2)
(8,19,2)
(23,8,2)
(12,21,2)
(12,23,2)
(21,7,2)
(5,7,2)
(20,23,2)
(23,22,2)
(8,23,2)
(7,3,2)
(27,21,2)
(23,21,2)
(10,23,2)
(18,3,2)
(13,23,2)
(10,22,2)
(24,23,2)
(23,23,2)
-----------------------------------
(0,)
(1,count)
(2,for (i = 0; i < (size_t)
(3,int count)
(4,i = 0)
(5,count)
(6,if (count > 0 && count <= 20)
(7,count > 0)
(8,(size_t)
(9,)
(10,i++)
(11,i)
(12,i)
(13,"Hello")
(14,i)
(15,0)
(16,i)
(17,)
(18,count <= 20)
(19,size_t)
(20,i)
(21,count > 0 && count <= 20)
(22,i = 0)
(23,i < (size_t)
(24,printLine("Hello")
(25,)
(26,20)
(27,0)
(28,0)
(29,count)
(30,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^