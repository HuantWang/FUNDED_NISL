-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(staticReturnsTrue())
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
39,40
39,41
39,42
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
48,53
49,50
50,51
50,52
51,52
53,54
53,55
54,55
54,56
56,57
58,59
58,60
59,60
61,62
61,63
62,63
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
103,104
103,105
104,105
-----nextToken-----
2,4,9,11,15,16,20,25,26,30,35,37,38,42,45,47,52,55,57,60,63,66,67,71,73,78,80,84,86,88,92,94,98,100,105,106
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
50,51
50,52
61,62
61,63
69,70
69,71
-----guardedBy-----
47,88
42,63
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(11,10,0)
(8,46,0)
(3,1,0)
(35,22,0)
(42,10,0)
(3,46,0)
(20,24,0)
(46,43,0)
(36,39,0)
(34,39,0)
(9,43,0)
(41,22,0)
(37,43,0)
(19,3,0)
(4,24,0)
(27,7,0)
(7,25,0)
(26,20,0)
(47,24,0)
(30,38,0)
(49,0,0)
(28,7,0)
(20,26,0)
(0,24,0)
(31,40,0)
(5,11,0)
(20,1,0)
(14,12,0)
(24,20,0)
(3,39,0)
(29,46,0)
(42,24,0)
(0,10,0)
(39,32,0)
(21,43,0)
(2,4,0)
(24,10,0)
(1,20,0)
(22,46,0)
(44,41,0)
(12,15,0)
(38,3,0)
(13,42,0)
(17,10,0)
(40,6,0)
(11,24,0)
(22,39,0)
(15,12,0)
(22,41,0)
(33,4,0)
(1,3,0)
(16,42,0)
(15,23,0)
(3,38,0)
(4,33,1)
(49,42,1)
(14,4,1)
(31,22,1)
(5,0,1)
(15,12,1)
(44,35,1)
(19,47,1)
(18,39,1)
(47,22,1)
(34,48,1)
(41,44,1)
(1,3,1)
(3,38,1)
(2,24,1)
(8,29,1)
(16,15,1)
(40,31,1)
(45,40,1)
(22,46,1)
(16,4,1)
(39,36,1)
(48,46,1)
(11,5,1)
(35,18,1)
(3,46,1)
(36,34,1)
(20,1,1)
(38,30,1)
(4,24,1)
(24,20,1)
(42,24,1)
(33,2,1)
(0,49,1)
(3,39,1)
(45,11,1)
(20,26,1)
(13,16,1)
(30,19,1)
(22,41,1)
(22,39,1)
(12,14,1)
(11,24,1)
(18,48,1)
(42,13,1)
(46,8,1)
(45,18,1)
(0,24,1)
(15,4,2)
(4,22,2)
(42,24,2)
(1,22,2)
(35,18,2)
(30,22,2)
(47,22,2)
(22,39,2)
(19,22,2)
(31,22,2)
(0,24,2)
(2,22,2)
(16,22,2)
(20,1,2)
(49,22,2)
(3,38,2)
(3,22,2)
(40,22,2)
(14,4,2)
(3,46,2)
(42,22,2)
(3,39,2)
(39,48,2)
(22,41,2)
(13,22,2)
(24,20,2)
(1,3,2)
(20,22,2)
(44,18,2)
(0,22,2)
(20,26,2)
(36,48,2)
(34,48,2)
(22,46,2)
(11,24,2)
(12,4,2)
(38,22,2)
(15,12,2)
(24,22,2)
(11,22,2)
(33,22,2)
(5,22,2)
(4,24,2)
(41,18,2)
(22,18,2)
-----------------------------------
(0,printWLine(myString)
(1,malloc(data*sizeof(wchar_t)
(2,myString)
(3,data*sizeof(wchar_t)
(4,myString == NULL)
(5,myString)
(6,)
(7,)
(8,0)
(9,data)
(10,)
(11,free(myString)
(12,-1)
(13,HELLO_STRING)
(14,1)
(15,exit(-1)
(16,myString)
(17,if (myString == NULL)
(18,staticReturnsTrue()
(19,data)
(20,(wchar_t *)
(21,if(staticReturnsTrue()
(22,data > wcslen(HELLO_STRING)
(23,)
(24,myString = (wchar_t *)
(25,)
(26,wchar_t *)
(27,myString)
(28,if (data > wcslen(HELLO_STRING)
(29,data)
(30,wchar_t)
(31,"Input is less than the length of the source string")
(32,)
(33,NULL)
(34,data)
(35,data)
(36,20)
(37,if(staticReturnsTrue()
(38,sizeof(wchar_t)
(39,data = 20)
(40,printLine("Input is less than the length of the source string")
(41,wcslen(HELLO_STRING)
(42,wcscpy(myString, HELLO_STRING)
(43,)
(44,HELLO_STRING)
(45,RET)
(46,data = 0)
(47,myString)
(48,staticReturnsTrue()
(49,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^