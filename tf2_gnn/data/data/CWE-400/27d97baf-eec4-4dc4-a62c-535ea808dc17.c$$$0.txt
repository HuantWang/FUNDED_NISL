-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_09_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,84,86
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_09_bad(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_09_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_09_bad
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(13,2,0)
(11,43,0)
(32,15,0)
(29,7,0)
(35,33,0)
(1,33,0)
(15,17,0)
(8,40,0)
(28,36,0)
(42,44,0)
(5,25,0)
(7,34,0)
(42,41,0)
(27,15,0)
(25,31,0)
(38,34,0)
(23,33,0)
(22,7,0)
(28,43,0)
(43,28,0)
(0,7,0)
(19,18,0)
(2,34,0)
(19,38,0)
(20,41,0)
(41,42,0)
(40,41,0)
(31,34,0)
(30,1,0)
(24,0,0)
(46,18,0)
(10,17,0)
(44,42,0)
(9,0,0)
(18,7,0)
(17,2,0)
(3,34,0)
(25,29,0)
(21,29,0)
(26,31,0)
(39,33,0)
(4,29,0)
(15,7,0)
(7,42,0)
(18,19,0)
(29,25,0)
(14,18,0)
(37,1,0)
(42,7,0)
(38,19,0)
(17,15,0)
(41,40,0)
(27,31,1)
(20,22,1)
(21,28,1)
(14,46,1)
(29,4,1)
(42,41,1)
(15,32,1)
(30,37,1)
(32,27,1)
(13,17,1)
(6,1,1)
(40,8,1)
(7,42,1)
(4,21,1)
(2,13,1)
(24,7,1)
(31,26,1)
(26,25,1)
(19,18,1)
(5,29,1)
(0,9,1)
(21,0,1)
(46,2,1)
(41,40,1)
(9,24,1)
(1,30,1)
(16,38,1)
(8,20,1)
(22,6,1)
(18,7,1)
(29,7,1)
(38,19,1)
(11,0,1)
(10,15,1)
(0,7,1)
(18,14,1)
(15,7,1)
(25,29,1)
(17,10,1)
(17,15,1)
(45,16,1)
(25,5,1)
(28,43,1)
(43,11,1)
(42,44,1)
(16,6,1)
(24,6,2)
(28,0,2)
(17,6,2)
(15,6,2)
(13,6,2)
(0,6,2)
(42,41,2)
(25,6,2)
(27,6,2)
(5,6,2)
(18,6,2)
(2,6,2)
(42,6,2)
(28,43,2)
(14,6,2)
(8,6,2)
(43,0,2)
(18,7,2)
(20,6,2)
(11,0,2)
(22,6,2)
(25,29,2)
(21,6,2)
(19,18,2)
(29,7,2)
(4,6,2)
(19,6,2)
(42,44,2)
(31,6,2)
(7,6,2)
(10,6,2)
(38,19,2)
(38,6,2)
(9,6,2)
(26,6,2)
(41,40,2)
(46,6,2)
(32,6,2)
(41,6,2)
(7,42,2)
(17,15,2)
(29,6,2)
(0,7,2)
(15,7,2)
(40,6,2)
-----------------------------------
(0,data == NULL)
(1,data = NULL)
(2,data[0].intTwo = 0)
(3,if (data == NULL)
(4,0)
(5,intOne)
(6,GLOBAL_CONST_TRUE)
(7,data = (twoIntsStruct *)
(8,twoIntsStruct)
(9,NULL)
(10,intTwo)
(11,1)
(12, sizeof(twoIntsStruct)
(13,0)
(14,0)
(15,data[0])
(16,GLOBAL_CONST_TRUE)
(17,data[0].intTwo)
(18,data[0])
(19,&data[0])
(20,100)
(21,data)
(22,data)
(23,data)
(24,data)
(25,data[0].intOne)
(26,0)
(27,data)
(28,exit(-1)
(29,data[0])
(30,NULL)
(31,data[0].intOne = 0)
(32,0)
(33,)
(34,)
(35,if(GLOBAL_CONST_TRUE)
(36,)
(37,data)
(38,printStructLine(&data[0])
(39,if(GLOBAL_CONST_TRUE)
(40,sizeof(twoIntsStruct)
(41,calloc(100, sizeof(twoIntsStruct)
(42,(twoIntsStruct *)
(43,-1)
(44,twoIntsStruct *)
(45,RET)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^