-----label-----
1
-----code-----
long
sysrfork(ulong *arg)
{
	Proc *p;
	int n, i;
	Fgrp *ofg;
	Pgrp *opg;
	Rgrp *org;
	Egrp *oeg;
	ulong pid, flag;
	Mach *wm;

	flag = arg[0];
	/* Check flags before we commit */
	if((flag & (RFFDG|RFCFDG)) == (RFFDG|RFCFDG))
		error(Ebadarg);
	if((flag & (RFNAMEG|RFCNAMEG)) == (RFNAMEG|RFCNAMEG))
		error(Ebadarg);
	if((flag & (RFENVG|RFCENVG)) == (RFENVG|RFCENVG))
		error(Ebadarg);

	if((flag&RFPROC) == 0) {
		if(flag & (RFMEM|RFNOWAIT))
			error(Ebadarg);
		if(flag & (RFFDG|RFCFDG)) {
			ofg = up->fgrp;
			if(flag & RFFDG)
				up->fgrp = dupfgrp(ofg);
			else
				up->fgrp = dupfgrp(nil);
			closefgrp(ofg);
		}
		if(flag & (RFNAMEG|RFCNAMEG)) {
			opg = up->pgrp;
			up->pgrp = newpgrp();
			if(flag & RFNAMEG)
				pgrpcpy(up->pgrp, opg);
			/* inherit noattach */
			up->pgrp->noattach = opg->noattach;
			closepgrp(opg);
		}
		if(flag & RFNOMNT)
			up->pgrp->noattach = 1;
		if(flag & RFREND) {
			org = up->rgrp;
			up->rgrp = newrgrp();
			closergrp(org);
		}
		if(flag & (RFENVG|RFCENVG)) {
			oeg = up->egrp;
			up->egrp = smalloc(sizeof(Egrp));
			up->egrp->ref = 1;
			if(flag & RFENVG)
				envcpy(up->egrp, oeg);
			closeegrp(oeg);
		}
		if(flag & RFNOTEG)
			up->noteid = pidalloc(0);
		return 0;
	}

	p = newproc();

	p->scallnr = up->scallnr;
	p->s = up->s;
	p->nerrlab = 0;
	p->slash = up->slash;
	p->dot = up->dot;
	incref(p->dot);

	memmove(p->note, up->note, sizeof(p->note));
	p->privatemem = up->privatemem;
	p->noswap = up->noswap;
	p->nnote = up->nnote;
	p->notified = 0;
	p->lastnote = up->lastnote;
	p->notify = up->notify;
	p->ureg = up->ureg;
	p->dbgreg = 0;

	/* Abort the child process on error */
	if(waserror()){
		p->kp = 1;
		kprocchild(p, abortion, 0);
		ready(p);
		nexterror();
	}

	/* Make a new set of memory segments */
	n = flag & RFMEM;
	qlock(&p->seglock);
	if(waserror()){
		qunlock(&p->seglock);
		nexterror();
	}
	for(i = 0; i < NSEG; i++)
		if(up->seg[i])
			p->seg[i] = dupseg(up->seg, i, n);
	qunlock(&p->seglock);
	poperror();

	/* File descriptors */
	if(flag & (RFFDG|RFCFDG)) {
		if(flag & RFFDG)
			p->fgrp = dupfgrp(up->fgrp);
		else
			p->fgrp = dupfgrp(nil);
	}
	else {
		p->fgrp = up->fgrp;
		incref(p->fgrp);
	}

	/* Process groups */
	if(flag & (RFNAMEG|RFCNAMEG)) {
		p->pgrp = newpgrp();
		if(flag & RFNAMEG)
			pgrpcpy(p->pgrp, up->pgrp);
		/* inherit noattach */
		p->pgrp->noattach = up->pgrp->noattach;
	}
	else {
		p->pgrp = up->pgrp;
		incref(p->pgrp);
	}
	if(flag & RFNOMNT)
		p->pgrp->noattach = 1;

	if(flag & RFREND)
		p->rgrp = newrgrp();
	else {
		incref(up->rgrp);
		p->rgrp = up->rgrp;
	}

	/* Environment group */
	if(flag & (RFENVG|RFCENVG)) {
		p->egrp = smalloc(sizeof(Egrp));
		p->egrp->ref = 1;
		if(flag & RFENVG)
			envcpy(p->egrp, up->egrp);
	}
	else {
		p->egrp = up->egrp;
		incref(p->egrp);
	}
	p->hang = up->hang;
	p->procmode = up->procmode;
	if(up->procctl == Proc_tracesyscall)
		p->procctl = Proc_tracesyscall;

	poperror();	/* abortion */

	/* Craft a return frame which will cause the child to pop out of
	 * the scheduler in user mode with the return register zero
	 */
	forkchild(p, up->dbgreg);

	p->parent = up;
	if((flag&RFNOWAIT) == 0){
		p->parentpid = up->pid;
		lock(&up->exl);
		up->nchild++;
		unlock(&up->exl);
	}
	if((flag&RFNOTEG) == 0)
		p->noteid = up->noteid;

	pid = p->pid;
	memset(p->time, 0, sizeof(p->time));
	p->time[TReal] = MACHP(0)->ticks;

	kstrdup(&p->text, up->text);
	kstrdup(&p->user, up->user);

	procfork(p);

	/*
	 *  since the bss/data segments are now shareable,
	 *  any mmu info about this process is now stale
	 *  (i.e. has bad properties) and has to be discarded.
	 */
	flushmmu();
	p->basepri = up->basepri;
	p->priority = up->basepri;
	p->fixedpri = up->fixedpri;
	p->mp = up->mp;
	wm = up->wired;
	if(wm)
		procwired(p, wm->machno);
	ready(p);
	sched();
	return pid;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
11,44
11,45
11,46
11,47
11,48
11,49
11,50
11,51
11,52
11,53
11,54
11,55
11,56
11,57
11,58
11,59
11,60
11,61
11,62
11,63
11,64
11,65
11,66
11,67
11,68
11,69
11,70
11,71
11,72
11,73
11,74
11,75
11,76
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
20,23
22,23
24,25
26,27
27,28
27,29
28,29
30,31
30,32
33,34
34,35
34,36
35,36
37,38
37,39
40,41
41,42
41,43
42,43
44,45
44,46
47,48
48,49
48,50
49,50
51,52
51,53
54,55
55,56
55,57
55,58
56,57
58,59
60,61
62,63
63,64
63,65
64,65
66,67
66,68
69,70
70,71
70,72
71,72
73,74
73,75
74,75
77,78
77,79
78,79
78,80
79,80
80,81
80,82
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
100,101
102,103
102,104
103,104
103,105
104,105
105,106
105,107
106,107
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
125,126
127,128
127,129
128,129
128,130
129,130
130,131
130,132
131,132
133,134
134,135
134,136
135,136
137,138
139,140
140,141
140,142
141,142
143,144
145,146
146,147
146,148
147,148
149,150
150,151
152,153
152,154
153,154
153,155
154,155
155,156
155,157
156,157
158,159
161,162
161,163
161,164
161,165
161,166
161,167
161,168
161,169
162,163
162,164
163,164
163,165
164,165
166,167
167,168
167,169
168,169
170,171
172,173
173,174
173,175
174,175
176,177
177,178
179,180
179,181
180,181
180,182
181,182
183,184
184,185
184,186
185,186
187,188
189,190
189,191
189,192
190,191
191,192
191,193
192,193
194,195
194,196
195,196
198,199
198,200
198,201
199,200
199,201
200,201
202,203
204,205
205,206
205,207
206,207
206,208
207,208
210,211
210,212
211,212
213,214
215,216
216,217
216,218
217,218
217,219
218,219
221,222
221,223
222,223
224,225
226,227
227,228
227,229
228,229
230,231
232,233
232,234
233,234
233,235
234,235
236,237
237,238
237,239
238,239
240,241
242,243
242,244
242,245
242,246
242,247
243,244
244,245
244,246
245,246
247,248
247,249
248,249
251,252
252,253
252,254
253,254
253,255
254,255
257,258
258,259
260,261
260,262
261,262
261,263
262,263
264,265
266,267
267,268
267,269
267,270
268,269
270,271
270,272
271,272
274,275
276,277
277,278
277,279
278,279
278,280
279,280
279,281
280,281
284,285
284,286
285,286
288,289
289,290
289,291
290,291
292,293
294,295
294,296
295,296
295,297
296,297
298,299
300,301
301,302
301,303
302,303
302,304
303,304
303,305
304,305
309,310
309,311
310,311
310,312
311,312
313,314
315,316
315,317
315,318
316,317
317,318
317,319
318,319
320,321
320,322
321,322
324,325
325,326
325,327
326,327
326,328
327,328
330,331
331,332
333,334
334,335
334,336
335,336
337,338
339,340
339,341
340,341
340,342
341,342
343,344
344,345
344,346
345,346
347,348
349,350
349,351
349,352
349,353
349,354
350,351
351,352
351,353
352,353
354,355
354,356
355,356
358,359
359,360
359,361
360,361
360,362
361,362
364,365
364,366
365,366
367,368
368,369
368,370
369,370
372,373
373,374
373,375
374,375
374,376
375,376
375,377
376,377
381,382
381,383
382,383
382,384
383,384
385,386
387,388
388,389
388,390
388,391
389,390
391,392
391,393
392,393
395,396
397,398
398,399
398,400
399,400
401,402
403,404
403,405
404,405
404,406
405,406
407,408
409,410
410,411
410,412
411,412
411,413
412,413
415,416
415,417
416,417
419,420
421,422
422,423
422,424
423,424
425,426
426,427
428,429
429,430
429,431
430,431
430,432
431,432
434,435
434,436
435,436
438,439
439,440
439,441
440,441
440,442
441,442
444,445
444,446
445,446
448,449
449,450
449,451
450,451
450,452
451,452
455,456
456,457
456,458
457,458
457,459
458,459
461,462
461,463
462,463
465,466
466,467
466,468
467,468
467,469
468,469
471,472
471,473
472,473
475,476
476,477
476,478
477,478
479,480
479,481
480,481
483,484
484,485
484,486
484,487
484,488
485,486
487,488
487,489
488,489
491,492
491,493
492,493
495,496
496,497
497,498
497,499
498,499
501,502
502,503
502,504
503,504
503,505
504,505
507,508
507,509
508,509
511,512
512,513
512,514
513,514
513,515
514,515
517,518
517,519
518,519
521,522
522,523
522,524
523,524
523,525
524,525
527,528
527,529
528,529
531,532
532,533
532,534
533,534
533,535
534,535
538,539
539,540
539,541
540,541
540,542
541,542
544,545
544,546
545,546
548,549
549,550
549,551
550,551
550,552
551,552
554,555
554,556
555,556
558,559
559,560
559,561
560,561
560,562
561,562
564,565
564,566
565,566
568,569
569,570
569,571
570,571
570,572
571,572
575,576
575,577
576,577
577,578
579,580
579,581
579,582
579,583
580,581
581,582
581,583
582,583
582,584
583,584
587,588
588,589
588,590
588,591
588,592
589,590
591,592
593,594
596,597
597,598
597,599
598,599
600,601
602,603
603,604
604,605
606,607
607,608
607,609
608,609
610,611
610,612
611,612
613,614
615,616
616,617
616,618
617,618
619,620
620,621
620,622
621,622
624,625
624,626
625,626
626,627
628,629
628,630
629,630
630,631
630,632
631,632
633,634
634,635
634,636
635,636
638,639
639,640
640,641
642,643
642,644
642,645
642,646
643,644
644,645
644,646
645,646
648,649
648,650
649,650
651,652
653,654
654,655
656,657
656,658
657,658
657,659
658,659
658,660
659,660
662,663
664,665
665,666
665,667
666,667
666,668
667,668
667,669
668,669
671,672
673,674
673,675
673,676
673,677
674,675
676,677
676,678
677,678
680,681
682,683
684,685
685,686
685,687
686,687
688,689
689,690
689,691
690,691
693,694
694,695
695,696
697,698
697,699
697,700
698,699
698,700
699,700
701,702
702,703
702,704
703,704
705,706
707,708
708,709
708,710
708,711
709,710
709,711
710,711
712,713
714,715
715,716
715,717
716,717
716,718
717,718
720,721
720,722
721,722
723,724
723,725
724,725
727,728
728,729
728,730
729,730
729,731
730,731
733,734
733,735
734,735
736,737
738,739
738,740
739,740
740,741
740,742
741,742
741,743
742,743
745,746
745,747
746,747
749,750
750,751
750,752
751,752
753,754
753,755
754,755
757,758
757,759
757,760
758,759
758,760
759,760
761,762
762,763
762,764
763,764
765,766
767,768
767,769
767,770
768,769
769,770
769,771
770,771
770,772
771,772
774,775
775,776
777,778
777,779
778,779
778,780
779,780
781,782
783,784
784,785
784,786
784,787
785,786
787,788
787,789
788,789
791,792
791,793
792,793
795,796
796,797
796,798
797,798
797,799
798,799
798,800
799,800
803,804
803,805
804,805
804,806
805,806
809,810
809,811
810,811
811,812
811,813
812,813
812,814
813,814
816,817
816,818
817,818
820,821
821,822
821,823
822,823
824,825
824,826
825,826
828,829
828,830
829,830
829,831
830,831
832,833
834,835
835,836
835,837
836,837
836,838
837,838
837,839
838,839
843,844
843,845
843,846
844,845
844,846
845,846
847,848
849,850
850,851
850,852
851,852
851,853
852,853
855,856
856,857
858,859
858,860
859,860
860,861
860,862
861,862
863,864
863,865
864,865
867,868
868,869
868,870
869,870
869,871
870,871
873,874
873,875
874,875
877,878
877,879
877,880
878,879
878,880
879,880
881,882
882,883
882,884
883,884
885,886
887,888
887,889
887,890
888,889
889,890
889,891
890,891
890,892
891,892
894,895
894,896
895,896
897,898
898,899
898,900
899,900
902,903
903,904
903,905
904,905
904,906
905,906
905,907
906,907
911,912
911,913
912,913
912,914
913,914
915,916
917,918
918,919
918,920
918,921
919,920
921,922
921,923
922,923
925,926
925,927
926,927
929,930
929,931
930,931
931,932
931,933
932,933
932,934
933,934
936,937
936,938
937,938
940,941
941,942
941,943
942,943
944,945
944,946
945,946
948,949
949,950
949,951
950,951
950,952
951,952
954,955
954,956
955,956
958,959
959,960
959,961
960,961
960,962
961,962
964,965
964,966
965,966
968,969
968,970
969,970
969,971
970,971
970,972
971,972
974,975
976,977
977,978
977,979
978,979
978,980
979,980
982,983
984,985
985,986
986,987
988,989
989,990
989,991
989,992
990,991
992,993
994,995
994,996
995,996
998,999
999,1000
999,1001
1000,1001
1000,1002
1001,1002
1004,1005
1006,1007
1006,1008
1007,1008
1007,1009
1008,1009
1009,1010
1009,1011
1010,1011
1012,1013
1015,1016
1015,1017
1015,1018
1015,1019
1016,1017
1017,1018
1017,1019
1018,1019
1018,1020
1019,1020
1022,1023
1022,1024
1023,1024
1026,1027
1027,1028
1027,1029
1028,1029
1030,1031
1031,1032
1031,1033
1032,1033
1035,1036
1036,1037
1037,1038
1037,1039
1038,1039
1041,1042
1042,1043
1042,1044
1043,1044
1045,1046
1046,1047
1046,1048
1047,1048
1050,1051
1050,1052
1051,1052
1051,1053
1052,1053
1053,1054
1053,1055
1054,1055
1056,1057
1059,1060
1060,1061
1060,1062
1061,1062
1061,1063
1062,1063
1065,1066
1065,1067
1066,1067
1069,1070
1070,1071
1070,1072
1071,1072
1073,1074
1073,1075
1074,1075
1077,1078
1078,1079
1078,1080
1078,1081
1078,1082
1079,1080
1081,1082
1081,1083
1082,1083
1086,1087
1087,1088
1088,1089
1088,1090
1089,1090
1092,1093
1093,1094
1093,1095
1094,1095
1094,1096
1095,1096
1095,1097
1096,1097
1099,1100
1101,1102
1101,1103
1102,1103
1102,1104
1103,1104
1107,1108
1108,1109
1108,1110
1108,1111
1109,1110
1111,1112
1112,1113
1112,1114
1113,1114
1116,1117
1116,1118
1117,1118
1120,1121
1121,1122
1121,1123
1121,1124
1122,1123
1124,1125
1125,1126
1125,1127
1126,1127
1129,1130
1129,1131
1130,1131
1133,1134
1134,1135
1134,1136
1135,1136
1137,1138
1139,1140
1140,1141
1141,1142
1143,1144
1144,1145
1144,1146
1145,1146
1145,1147
1146,1147
1149,1150
1149,1151
1150,1151
1153,1154
1154,1155
1154,1156
1155,1156
1155,1157
1156,1157
1159,1160
1159,1161
1160,1161
1163,1164
1164,1165
1164,1166
1165,1166
1165,1167
1166,1167
1169,1170
1169,1171
1170,1171
1173,1174
1174,1175
1174,1176
1175,1176
1175,1177
1176,1177
1179,1180
1179,1181
1180,1181
1183,1184
1184,1185
1184,1186
1185,1186
1187,1188
1187,1189
1188,1189
1191,1192
1191,1193
1192,1193
1194,1195
1195,1196
1195,1197
1195,1198
1196,1197
1198,1199
1200,1201
1200,1202
1201,1202
1204,1205
1205,1206
1205,1207
1206,1207
1208,1209
1210,1211
1211,1212
1212,1213
1214,1215
1215,1216
-----nextToken-----
2,4,7,9,10,15,17,18,21,23,25,29,31,32,36,38,39,43,45,46,50,52,53,57,59,61,65,67,68,72,75,76,82,86,88,92,94,98,101,107,111,113,117,119,123,126,132,136,138,142,144,148,151,157,159,160,165,169,171,175,178,182,186,188,193,196,197,201,203,208,209,212,214,219,220,223,225,229,231,235,239,241,246,249,250,255,256,259,263,265,269,272,273,275,281,282,283,286,287,291,293,297,299,305,306,307,308,312,314,319,322,323,328,329,332,336,338,342,346,348,353,356,357,362,363,366,370,371,377,378,379,380,384,386,390,393,394,396,400,402,406,408,413,414,417,418,420,424,427,432,433,436,437,442,443,446,447,452,453,454,459,460,463,464,469,470,473,474,478,481,482,486,489,490,493,494,499,500,505,506,509,510,515,516,519,520,525,526,529,530,535,536,537,542,543,546,547,552,553,556,557,562,563,566,567,572,573,574,578,584,585,586,590,592,594,595,599,601,605,609,612,614,618,622,623,627,632,636,637,641,646,647,650,652,655,660,661,663,669,670,672,675,678,679,681,683,687,691,692,696,700,704,706,711,713,718,719,722,725,726,731,732,735,737,743,744,747,748,752,755,756,760,764,766,772,773,776,780,782,786,789,790,793,794,800,801,802,806,807,808,814,815,818,819,823,826,827,831,833,839,840,841,842,846,848,853,854,857,862,865,866,871,872,875,876,880,884,886,892,893,896,900,901,907,908,909,910,914,916,920,923,924,927,928,934,935,938,939,943,946,947,952,953,956,957,962,963,966,967,972,973,975,980,981,983,987,991,993,996,997,1002,1003,1005,1011,1013,1014,1020,1021,1024,1025,1029,1033,1034,1039,1040,1044,1048,1049,1055,1057,1058,1063,1064,1067,1068,1072,1075,1076,1080,1083,1084,1085,1090,1091,1097,1098,1100,1104,1105,1106,1110,1114,1115,1118,1119,1123,1127,1128,1131,1132,1136,1138,1142,1147,1148,1151,1152,1157,1158,1161,1162,1167,1168,1171,1172,1177,1178,1181,1182,1186,1189,1190,1193,1197,1199,1202,1203,1207,1209,1213,1216
-----computeFrom-----
70,71
70,72
78,79
78,80
80,81
80,82
84,85
84,86
90,91
90,92
103,104
103,105
105,106
105,107
109,110
109,111
115,116
115,117
128,129
128,130
130,131
130,132
134,135
134,136
140,141
140,142
153,154
153,155
155,156
155,157
163,164
163,165
167,168
167,169
180,181
180,182
184,185
184,186
191,192
191,193
199,200
199,201
205,206
205,207
216,217
216,218
233,234
233,235
237,238
237,239
244,245
244,246
252,253
252,254
261,262
261,263
277,278
277,279
295,296
295,297
301,302
301,303
310,311
310,312
317,318
317,319
325,326
325,327
340,341
340,342
344,345
344,346
351,352
351,353
359,360
359,361
373,374
373,375
382,383
382,384
404,405
404,406
410,411
410,412
422,423
422,424
429,430
429,431
439,440
439,441
449,450
449,451
456,457
456,458
466,467
466,468
502,503
502,504
512,513
512,514
522,523
522,524
532,533
532,534
539,540
539,541
549,550
549,551
559,560
559,561
569,570
569,571
581,582
581,583
607,608
607,609
610,611
610,612
644,645
644,646
648,649
648,650
665,666
665,667
698,699
698,700
702,703
702,704
709,710
709,711
715,716
715,717
728,729
728,730
740,741
740,742
758,759
758,760
762,763
762,764
769,770
769,771
778,779
778,780
796,797
796,798
811,812
811,813
829,830
829,831
835,836
835,837
844,845
844,846
850,851
850,852
868,869
868,870
878,879
878,880
882,883
882,884
889,890
889,891
903,904
903,905
912,913
912,914
931,932
931,933
949,950
949,951
959,960
959,961
969,970
969,971
977,978
977,979
999,1000
999,1001
1007,1008
1007,1009
1009,1010
1009,1011
1017,1018
1017,1019
1051,1052
1051,1053
1053,1054
1053,1055
1060,1061
1060,1062
1070,1071
1070,1072
1093,1094
1093,1095
1144,1145
1144,1146
1154,1155
1154,1156
1164,1165
1164,1166
1174,1175
1174,1176
1184,1185
1184,1186
-----guardedBy-----
157,406
186,203
182,201
235,263
239,265
342,384
346,386
704,713
700,711
760,780
764,782
880,914
884,916
973,981
975,983
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;LiteralExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
longsysrfork(ulong *arg){	Proc *p;	int n, i;	Fgrp *ofg;	Pgrp *opg;	Rgrp *org;	Egrp *oeg;	ulong pid, flag;	Mach *wm;	flag = arg[0];	/* Check flags before we commit */	if((flag & (RFFDG|RFCFDG)) == (RFFDG|RFCFDG))		error(Ebadarg);	if((flag & (RFNAMEG|RFCNAMEG)) == (RFNAMEG|RFCNAMEG))		error(Ebadarg);	if((flag & (RFENVG|RFCENVG)) == (RFENVG|RFCENVG))		error(Ebadarg);	if((flag&RFPROC) == 0) {		if(flag & (RFMEM|RFNOWAIT))			error(Ebadarg);		if(flag & (RFFDG|RFCFDG)) {			ofg = up->fgrp;			if(flag & RFFDG)				up->fgrp = dupfgrp(ofg);			else				up->fgrp = dupfgrp(nil);			closefgrp(ofg);		}		if(flag & (RFNAMEG|RFCNAMEG)) {			opg = up->pgrp;			up->pgrp = newpgrp();			if(flag & RFNAMEG)				pgrpcpy(up->pgrp, opg);			/* inherit noattach */			up->pgrp->noattach = opg->noattach;			closepgrp(opg);		}		if(flag & RFNOMNT)			up->pgrp->noattach = 1;		if(flag & RFREND) {			org = up->rgrp;			up->rgrp = newrgrp();			closergrp(org);		}		if(flag & (RFENVG|RFCENVG)) {			oeg = up->egrp;			up->egrp = smalloc(sizeof(Egrp));			up->egrp->ref = 1;			if(flag & RFENVG)				envcpy(up->egrp, oeg);			closeegrp(oeg);		}		if(flag & RFNOTEG)			up->noteid = pidalloc(0);		return 0;	}	p = newproc();	p->scallnr = up->scallnr;	p->s = up->s;	p->nerrlab = 0;	p->slash = up->slash;	p->dot = up->dot;	incref(p->dot);	memmove(p->note, up->note, sizeof(p->note));	p->privatemem = up->privatemem;	p->noswap = up->noswap;	p->nnote = up->nnote;	p->notified = 0;	p->lastnote = up->lastnote;	p->notify = up->notify;	p->ureg = up->ureg;	p->dbgreg = 0;	/* Abort the child process on error */	if(waserror()){		p->kp = 1;		kprocchild(p, abortion, 0);		ready(p);		nexterror();	}	/* Make a new set of memory segments */	n = flag & RFMEM;	qlock(&p->seglock);	if(waserror()){		qunlock(&p->seglock);		nexterror();	}	for(i = 0; i < NSEG; i++)		if(up->seg[i])			p->seg[i] = dupseg(up->seg, i, n);	qunlock(&p->seglock);	poperror();	/* File descriptors */	if(flag & (RFFDG|RFCFDG)) {		if(flag & RFFDG)			p->fgrp = dupfgrp(up->fgrp);		else			p->fgrp = dupfgrp(nil);	}	else {		p->fgrp = up->fgrp;		incref(p->fgrp);	}	/* Process groups */	if(flag & (RFNAMEG|RFCNAMEG)) {		p->pgrp = newpgrp();		if(flag & RFNAMEG)			pgrpcpy(p->pgrp, up->pgrp);		/* inherit noattach */		p->pgrp->noattach = up->pgrp->noattach;	}	else {		p->pgrp = up->pgrp;		incref(p->pgrp);	}	if(flag & RFNOMNT)		p->pgrp->noattach = 1;	if(flag & RFREND)		p->rgrp = newrgrp();	else {		incref(up->rgrp);		p->rgrp = up->rgrp;	}	/* Environment group */	if(flag & (RFENVG|RFCENVG)) {		p->egrp = smalloc(sizeof(Egrp));		p->egrp->ref = 1;		if(flag & RFENVG)			envcpy(p->egrp, up->egrp);	}	else {		p->egrp = up->egrp;		incref(p->egrp);	}	p->hang = up->hang;	p->procmode = up->procmode;	if(up->procctl == Proc_tracesyscall)		p->procctl = Proc_tracesyscall;	poperror();	/* abortion */	/* Craft a return frame which will cause the child to pop out of	 * the scheduler in user mode with the return register zero	 */	forkchild(p, up->dbgreg);	p->parent = up;	if((flag&RFNOWAIT) == 0){		p->parentpid = up->pid;		lock(&up->exl);		up->nchild++;		unlock(&up->exl);	}	if((flag&RFNOTEG) == 0)		p->noteid = up->noteid;	pid = p->pid;	memset(p->time, 0, sizeof(p->time));	p->time[TReal] = MACHP(0)->ticks;	kstrdup(&p->text, up->text);	kstrdup(&p->user, up->user);	procfork(p);	/*	 *  since the bss/data segments are now shareable,	 *  any mmu info about this process is now stale	 *  (i.e. has bad properties) and has to be discarded.	 */	flushmmu();	p->basepri = up->basepri;	p->priority = up->basepri;	p->fixedpri = up->fixedpri;	p->mp = up->mp;	wm = up->wired;	if(wm)		procwired(p, wm->machno);	ready(p);	sched();	return pid;}
long
sysrfork(ulong *arg)
sysrfork
ulong *arg
ulong
ulong
*arg
*
arg
{	Proc *p;	int n, i;	Fgrp *ofg;	Pgrp *opg;	Rgrp *org;	Egrp *oeg;	ulong pid, flag;	Mach *wm;	flag = arg[0];	/* Check flags before we commit */	if((flag & (RFFDG|RFCFDG)) == (RFFDG|RFCFDG))		error(Ebadarg);	if((flag & (RFNAMEG|RFCNAMEG)) == (RFNAMEG|RFCNAMEG))		error(Ebadarg);	if((flag & (RFENVG|RFCENVG)) == (RFENVG|RFCENVG))		error(Ebadarg);	if((flag&RFPROC) == 0) {		if(flag & (RFMEM|RFNOWAIT))			error(Ebadarg);		if(flag & (RFFDG|RFCFDG)) {			ofg = up->fgrp;			if(flag & RFFDG)				up->fgrp = dupfgrp(ofg);			else				up->fgrp = dupfgrp(nil);			closefgrp(ofg);		}		if(flag & (RFNAMEG|RFCNAMEG)) {			opg = up->pgrp;			up->pgrp = newpgrp();			if(flag & RFNAMEG)				pgrpcpy(up->pgrp, opg);			/* inherit noattach */			up->pgrp->noattach = opg->noattach;			closepgrp(opg);		}		if(flag & RFNOMNT)			up->pgrp->noattach = 1;		if(flag & RFREND) {			org = up->rgrp;			up->rgrp = newrgrp();			closergrp(org);		}		if(flag & (RFENVG|RFCENVG)) {			oeg = up->egrp;			up->egrp = smalloc(sizeof(Egrp));			up->egrp->ref = 1;			if(flag & RFENVG)				envcpy(up->egrp, oeg);			closeegrp(oeg);		}		if(flag & RFNOTEG)			up->noteid = pidalloc(0);		return 0;	}	p = newproc();	p->scallnr = up->scallnr;	p->s = up->s;	p->nerrlab = 0;	p->slash = up->slash;	p->dot = up->dot;	incref(p->dot);	memmove(p->note, up->note, sizeof(p->note));	p->privatemem = up->privatemem;	p->noswap = up->noswap;	p->nnote = up->nnote;	p->notified = 0;	p->lastnote = up->lastnote;	p->notify = up->notify;	p->ureg = up->ureg;	p->dbgreg = 0;	/* Abort the child process on error */	if(waserror()){		p->kp = 1;		kprocchild(p, abortion, 0);		ready(p);		nexterror();	}	/* Make a new set of memory segments */	n = flag & RFMEM;	qlock(&p->seglock);	if(waserror()){		qunlock(&p->seglock);		nexterror();	}	for(i = 0; i < NSEG; i++)		if(up->seg[i])			p->seg[i] = dupseg(up->seg, i, n);	qunlock(&p->seglock);	poperror();	/* File descriptors */	if(flag & (RFFDG|RFCFDG)) {		if(flag & RFFDG)			p->fgrp = dupfgrp(up->fgrp);		else			p->fgrp = dupfgrp(nil);	}	else {		p->fgrp = up->fgrp;		incref(p->fgrp);	}	/* Process groups */	if(flag & (RFNAMEG|RFCNAMEG)) {		p->pgrp = newpgrp();		if(flag & RFNAMEG)			pgrpcpy(p->pgrp, up->pgrp);		/* inherit noattach */		p->pgrp->noattach = up->pgrp->noattach;	}	else {		p->pgrp = up->pgrp;		incref(p->pgrp);	}	if(flag & RFNOMNT)		p->pgrp->noattach = 1;	if(flag & RFREND)		p->rgrp = newrgrp();	else {		incref(up->rgrp);		p->rgrp = up->rgrp;	}	/* Environment group */	if(flag & (RFENVG|RFCENVG)) {		p->egrp = smalloc(sizeof(Egrp));		p->egrp->ref = 1;		if(flag & RFENVG)			envcpy(p->egrp, up->egrp);	}	else {		p->egrp = up->egrp;		incref(p->egrp);	}	p->hang = up->hang;	p->procmode = up->procmode;	if(up->procctl == Proc_tracesyscall)		p->procctl = Proc_tracesyscall;	poperror();	/* abortion */	/* Craft a return frame which will cause the child to pop out of	 * the scheduler in user mode with the return register zero	 */	forkchild(p, up->dbgreg);	p->parent = up;	if((flag&RFNOWAIT) == 0){		p->parentpid = up->pid;		lock(&up->exl);		up->nchild++;		unlock(&up->exl);	}	if((flag&RFNOTEG) == 0)		p->noteid = up->noteid;	pid = p->pid;	memset(p->time, 0, sizeof(p->time));	p->time[TReal] = MACHP(0)->ticks;	kstrdup(&p->text, up->text);	kstrdup(&p->user, up->user);	procfork(p);	/*	 *  since the bss/data segments are now shareable,	 *  any mmu info about this process is now stale	 *  (i.e. has bad properties) and has to be discarded.	 */	flushmmu();	p->basepri = up->basepri;	p->priority = up->basepri;	p->fixedpri = up->fixedpri;	p->mp = up->mp;	wm = up->wired;	if(wm)		procwired(p, wm->machno);	ready(p);	sched();	return pid;}
Proc *p;
Proc *p;
Proc
Proc
*p
*
p
int n, i;
int n, i;
int
n
n
i
i
Fgrp *ofg;
Fgrp *ofg;
Fgrp
Fgrp
*ofg
*
ofg
Pgrp *opg;
Pgrp *opg;
Pgrp
Pgrp
*opg
*
opg
Rgrp *org;
Rgrp *org;
Rgrp
Rgrp
*org
*
org
Egrp *oeg;
Egrp *oeg;
Egrp
Egrp
*oeg
*
oeg
ulong pid, flag;
ulong pid, flag;
ulong
ulong
pid
pid
flag
flag
Mach *wm;
Mach *wm;
Mach
Mach
*wm
*
wm
flag = arg[0];
flag = arg[0]
flag
flag
arg[0]
arg
arg
0
if((flag & (RFFDG|RFCFDG)) == (RFFDG|RFCFDG))		error(Ebadarg);
(flag & (RFFDG|RFCFDG)) == (RFFDG|RFCFDG)
(flag & (RFFDG|RFCFDG))
flag & (RFFDG|RFCFDG)
flag
flag
(RFFDG|RFCFDG)
RFFDG|RFCFDG
RFFDG
RFFDG
RFCFDG
RFCFDG
(RFFDG|RFCFDG)
RFFDG|RFCFDG
RFFDG
RFFDG
RFCFDG
RFCFDG
error(Ebadarg);
error(Ebadarg);
error
error
(Ebadarg)
Ebadarg
Ebadarg
if((flag & (RFNAMEG|RFCNAMEG)) == (RFNAMEG|RFCNAMEG))		error(Ebadarg);
(flag & (RFNAMEG|RFCNAMEG)) == (RFNAMEG|RFCNAMEG)
(flag & (RFNAMEG|RFCNAMEG))
flag & (RFNAMEG|RFCNAMEG)
flag
flag
(RFNAMEG|RFCNAMEG)
RFNAMEG|RFCNAMEG
RFNAMEG
RFNAMEG
RFCNAMEG
RFCNAMEG
(RFNAMEG|RFCNAMEG)
RFNAMEG|RFCNAMEG
RFNAMEG
RFNAMEG
RFCNAMEG
RFCNAMEG
error(Ebadarg);
error(Ebadarg);
error
error
(Ebadarg)
Ebadarg
Ebadarg
if((flag & (RFENVG|RFCENVG)) == (RFENVG|RFCENVG))		error(Ebadarg);
(flag & (RFENVG|RFCENVG)) == (RFENVG|RFCENVG)
(flag & (RFENVG|RFCENVG))
flag & (RFENVG|RFCENVG)
flag
flag
(RFENVG|RFCENVG)
RFENVG|RFCENVG
RFENVG
RFENVG
RFCENVG
RFCENVG
(RFENVG|RFCENVG)
RFENVG|RFCENVG
RFENVG
RFENVG
RFCENVG
RFCENVG
error(Ebadarg);
error(Ebadarg);
error
error
(Ebadarg)
Ebadarg
Ebadarg
if((flag&RFPROC) == 0) {		if(flag & (RFMEM|RFNOWAIT))			error(Ebadarg);		if(flag & (RFFDG|RFCFDG)) {			ofg = up->fgrp;			if(flag & RFFDG)				up->fgrp = dupfgrp(ofg);			else				up->fgrp = dupfgrp(nil);			closefgrp(ofg);		}		if(flag & (RFNAMEG|RFCNAMEG)) {			opg = up->pgrp;			up->pgrp = newpgrp();			if(flag & RFNAMEG)				pgrpcpy(up->pgrp, opg);			/* inherit noattach */			up->pgrp->noattach = opg->noattach;			closepgrp(opg);		}		if(flag & RFNOMNT)			up->pgrp->noattach = 1;		if(flag & RFREND) {			org = up->rgrp;			up->rgrp = newrgrp();			closergrp(org);		}		if(flag & (RFENVG|RFCENVG)) {			oeg = up->egrp;			up->egrp = smalloc(sizeof(Egrp));			up->egrp->ref = 1;			if(flag & RFENVG)				envcpy(up->egrp, oeg);			closeegrp(oeg);		}		if(flag & RFNOTEG)			up->noteid = pidalloc(0);		return 0;	}
(flag&RFPROC) == 0
(flag&RFPROC)
flag&RFPROC
flag
flag
RFPROC
RFPROC
0
{		if(flag & (RFMEM|RFNOWAIT))			error(Ebadarg);		if(flag & (RFFDG|RFCFDG)) {			ofg = up->fgrp;			if(flag & RFFDG)				up->fgrp = dupfgrp(ofg);			else				up->fgrp = dupfgrp(nil);			closefgrp(ofg);		}		if(flag & (RFNAMEG|RFCNAMEG)) {			opg = up->pgrp;			up->pgrp = newpgrp();			if(flag & RFNAMEG)				pgrpcpy(up->pgrp, opg);			/* inherit noattach */			up->pgrp->noattach = opg->noattach;			closepgrp(opg);		}		if(flag & RFNOMNT)			up->pgrp->noattach = 1;		if(flag & RFREND) {			org = up->rgrp;			up->rgrp = newrgrp();			closergrp(org);		}		if(flag & (RFENVG|RFCENVG)) {			oeg = up->egrp;			up->egrp = smalloc(sizeof(Egrp));			up->egrp->ref = 1;			if(flag & RFENVG)				envcpy(up->egrp, oeg);			closeegrp(oeg);		}		if(flag & RFNOTEG)			up->noteid = pidalloc(0);		return 0;	}
if(flag & (RFMEM|RFNOWAIT))			error(Ebadarg);
flag & (RFMEM|RFNOWAIT)
flag
flag
(RFMEM|RFNOWAIT)
RFMEM|RFNOWAIT
RFMEM
RFMEM
RFNOWAIT
RFNOWAIT
error(Ebadarg);
error(Ebadarg);
error
error
(Ebadarg)
Ebadarg
Ebadarg
if(flag & (RFFDG|RFCFDG)) {			ofg = up->fgrp;			if(flag & RFFDG)				up->fgrp = dupfgrp(ofg);			else				up->fgrp = dupfgrp(nil);			closefgrp(ofg);		}
flag & (RFFDG|RFCFDG)
flag
flag
(RFFDG|RFCFDG)
RFFDG|RFCFDG
RFFDG
RFFDG
RFCFDG
RFCFDG
{			ofg = up->fgrp;			if(flag & RFFDG)				up->fgrp = dupfgrp(ofg);			else				up->fgrp = dupfgrp(nil);			closefgrp(ofg);		}
ofg = up->fgrp;
ofg = up->fgrp
ofg
ofg
up->fgrp
up
up
fgrp
if(flag & RFFDG)				up->fgrp = dupfgrp(ofg);			else				up->fgrp = dupfgrp(nil);
flag & RFFDG
flag
flag
RFFDG
RFFDG
up->fgrp = dupfgrp(ofg);
up->fgrp = dupfgrp(ofg)
up->fgrp
up
up
fgrp
dupfgrp(ofg)
dupfgrp
dupfgrp
ofg
ofg
up->fgrp = dupfgrp(nil);
up->fgrp = dupfgrp(nil)
up->fgrp
up
up
fgrp
dupfgrp(nil)
dupfgrp
dupfgrp
nil
nil
closefgrp(ofg);
closefgrp(ofg)
closefgrp
closefgrp
ofg
ofg
if(flag & (RFNAMEG|RFCNAMEG)) {			opg = up->pgrp;			up->pgrp = newpgrp();			if(flag & RFNAMEG)				pgrpcpy(up->pgrp, opg);			/* inherit noattach */			up->pgrp->noattach = opg->noattach;			closepgrp(opg);		}
flag & (RFNAMEG|RFCNAMEG)
flag
flag
(RFNAMEG|RFCNAMEG)
RFNAMEG|RFCNAMEG
RFNAMEG
RFNAMEG
RFCNAMEG
RFCNAMEG
{			opg = up->pgrp;			up->pgrp = newpgrp();			if(flag & RFNAMEG)				pgrpcpy(up->pgrp, opg);			/* inherit noattach */			up->pgrp->noattach = opg->noattach;			closepgrp(opg);		}
opg = up->pgrp;
opg = up->pgrp
opg
opg
up->pgrp
up
up
pgrp
up->pgrp = newpgrp();
up->pgrp = newpgrp()
up->pgrp
up
up
pgrp
newpgrp()
newpgrp
newpgrp
if(flag & RFNAMEG)				pgrpcpy(up->pgrp, opg);
flag & RFNAMEG
flag
flag
RFNAMEG
RFNAMEG
pgrpcpy(up->pgrp, opg);
pgrpcpy(up->pgrp, opg)
pgrpcpy
pgrpcpy
up->pgrp
up
up
pgrp
opg
opg
up->pgrp->noattach = opg->noattach;
up->pgrp->noattach = opg->noattach
up->pgrp->noattach
up->pgrp
up
up
pgrp
noattach
opg->noattach
opg
opg
noattach
closepgrp(opg);
closepgrp(opg)
closepgrp
closepgrp
opg
opg
if(flag & RFNOMNT)			up->pgrp->noattach = 1;
flag & RFNOMNT
flag
flag
RFNOMNT
RFNOMNT
up->pgrp->noattach = 1;
up->pgrp->noattach = 1
up->pgrp->noattach
up->pgrp
up
up
pgrp
noattach
1
if(flag & RFREND) {			org = up->rgrp;			up->rgrp = newrgrp();			closergrp(org);		}
flag & RFREND
flag
flag
RFREND
RFREND
{			org = up->rgrp;			up->rgrp = newrgrp();			closergrp(org);		}
org = up->rgrp;
org = up->rgrp
org
org
up->rgrp
up
up
rgrp
up->rgrp = newrgrp();
up->rgrp = newrgrp()
up->rgrp
up
up
rgrp
newrgrp()
newrgrp
newrgrp
closergrp(org);
closergrp(org)
closergrp
closergrp
org
org
if(flag & (RFENVG|RFCENVG)) {			oeg = up->egrp;			up->egrp = smalloc(sizeof(Egrp));			up->egrp->ref = 1;			if(flag & RFENVG)				envcpy(up->egrp, oeg);			closeegrp(oeg);		}
flag & (RFENVG|RFCENVG)
flag
flag
(RFENVG|RFCENVG)
RFENVG|RFCENVG
RFENVG
RFENVG
RFCENVG
RFCENVG
{			oeg = up->egrp;			up->egrp = smalloc(sizeof(Egrp));			up->egrp->ref = 1;			if(flag & RFENVG)				envcpy(up->egrp, oeg);			closeegrp(oeg);		}
oeg = up->egrp;
oeg = up->egrp
oeg
oeg
up->egrp
up
up
egrp
up->egrp = smalloc(sizeof(Egrp));
up->egrp = smalloc(sizeof(Egrp))
up->egrp
up
up
egrp
smalloc(sizeof(Egrp))
smalloc
smalloc
sizeof(Egrp)
Egrp
Egrp
Egrp

up->egrp->ref = 1;
up->egrp->ref = 1
up->egrp->ref
up->egrp
up
up
egrp
ref
1
if(flag & RFENVG)				envcpy(up->egrp, oeg);
flag & RFENVG
flag
flag
RFENVG
RFENVG
envcpy(up->egrp, oeg);
envcpy(up->egrp, oeg)
envcpy
envcpy
up->egrp
up
up
egrp
oeg
oeg
closeegrp(oeg);
closeegrp(oeg)
closeegrp
closeegrp
oeg
oeg
if(flag & RFNOTEG)			up->noteid = pidalloc(0);
flag & RFNOTEG
flag
flag
RFNOTEG
RFNOTEG
up->noteid = pidalloc(0);
up->noteid = pidalloc(0)
up->noteid
up
up
noteid
pidalloc(0)
pidalloc
pidalloc
0
return 0;
0
p = newproc();
p = newproc()
p
p
newproc()
newproc
newproc
p->scallnr = up->scallnr;
p->scallnr = up->scallnr
p->scallnr
p
p
scallnr
up->scallnr
up
up
scallnr
p->s = up->s;
p->s = up->s
p->s
p
p
s
up->s
up
up
s
p->nerrlab = 0;
p->nerrlab = 0
p->nerrlab
p
p
nerrlab
0
p->slash = up->slash;
p->slash = up->slash
p->slash
p
p
slash
up->slash
up
up
slash
p->dot = up->dot;
p->dot = up->dot
p->dot
p
p
dot
up->dot
up
up
dot
incref(p->dot);
incref(p->dot)
incref
incref
p->dot
p
p
dot
memmove(p->note, up->note, sizeof(p->note));
memmove(p->note, up->note, sizeof(p->note))
memmove
memmove
p->note
p
p
note
up->note
up
up
note
sizeof(p->note)
(p->note)
p->note
p
p
note
p->privatemem = up->privatemem;
p->privatemem = up->privatemem
p->privatemem
p
p
privatemem
up->privatemem
up
up
privatemem
p->noswap = up->noswap;
p->noswap = up->noswap
p->noswap
p
p
noswap
up->noswap
up
up
noswap
p->nnote = up->nnote;
p->nnote = up->nnote
p->nnote
p
p
nnote
up->nnote
up
up
nnote
p->notified = 0;
p->notified = 0
p->notified
p
p
notified
0
p->lastnote = up->lastnote;
p->lastnote = up->lastnote
p->lastnote
p
p
lastnote
up->lastnote
up
up
lastnote
p->notify = up->notify;
p->notify = up->notify
p->notify
p
p
notify
up->notify
up
up
notify
p->ureg = up->ureg;
p->ureg = up->ureg
p->ureg
p
p
ureg
up->ureg
up
up
ureg
p->dbgreg = 0;
p->dbgreg = 0
p->dbgreg
p
p
dbgreg
0
if(waserror()){		p->kp = 1;		kprocchild(p, abortion, 0);		ready(p);		nexterror();	}
waserror()
waserror
waserror
{		p->kp = 1;		kprocchild(p, abortion, 0);		ready(p);		nexterror();	}
p->kp = 1;
p->kp = 1
p->kp
p
p
kp
1
kprocchild(p, abortion, 0);
kprocchild(p, abortion, 0)
kprocchild
kprocchild
p
p
abortion
abortion
0
ready(p);
ready(p)
ready
ready
p
p
nexterror();
nexterror()
nexterror
nexterror
n = flag & RFMEM;
n = flag & RFMEM
n
n
flag & RFMEM
flag
flag
RFMEM
RFMEM
qlock(&p->seglock);
qlock(&p->seglock)
qlock
qlock
&p->seglock
p->seglock
p
p
seglock
if(waserror()){		qunlock(&p->seglock);		nexterror();	}
waserror()
waserror
waserror
{		qunlock(&p->seglock);		nexterror();	}
qunlock(&p->seglock);
qunlock(&p->seglock)
qunlock
qunlock
&p->seglock
p->seglock
p
p
seglock
nexterror();
nexterror()
nexterror
nexterror
for(i = 0; i < NSEG; i++)		if(up->seg[i])			p->seg[i] = dupseg(up->seg, i, n);
i = 0;
i = 0
i
i
0
i < NSEG
i
i
NSEG
NSEG
i++
i
i
if(up->seg[i])			p->seg[i] = dupseg(up->seg, i, n);
up->seg[i]
up->seg
up
up
seg
i
i
p->seg[i] = dupseg(up->seg, i, n);
p->seg[i] = dupseg(up->seg, i, n)
p->seg[i]
p->seg
p
p
seg
i
i
dupseg(up->seg, i, n)
dupseg
dupseg
up->seg
up
up
seg
i
i
n
n
qunlock(&p->seglock);
qunlock(&p->seglock)
qunlock
qunlock
&p->seglock
p->seglock
p
p
seglock
poperror();
poperror()
poperror
poperror
if(flag & (RFFDG|RFCFDG)) {		if(flag & RFFDG)			p->fgrp = dupfgrp(up->fgrp);		else			p->fgrp = dupfgrp(nil);	}	else {		p->fgrp = up->fgrp;		incref(p->fgrp);	}
flag & (RFFDG|RFCFDG)
flag
flag
(RFFDG|RFCFDG)
RFFDG|RFCFDG
RFFDG
RFFDG
RFCFDG
RFCFDG
{		if(flag & RFFDG)			p->fgrp = dupfgrp(up->fgrp);		else			p->fgrp = dupfgrp(nil);	}
if(flag & RFFDG)			p->fgrp = dupfgrp(up->fgrp);		else			p->fgrp = dupfgrp(nil);
flag & RFFDG
flag
flag
RFFDG
RFFDG
p->fgrp = dupfgrp(up->fgrp);
p->fgrp = dupfgrp(up->fgrp)
p->fgrp
p
p
fgrp
dupfgrp(up->fgrp)
dupfgrp
dupfgrp
up->fgrp
up
up
fgrp
p->fgrp = dupfgrp(nil);
p->fgrp = dupfgrp(nil)
p->fgrp
p
p
fgrp
dupfgrp(nil)
dupfgrp
dupfgrp
nil
nil
{		p->fgrp = up->fgrp;		incref(p->fgrp);	}
p->fgrp = up->fgrp;
p->fgrp = up->fgrp
p->fgrp
p
p
fgrp
up->fgrp
up
up
fgrp
incref(p->fgrp);
incref(p->fgrp)
incref
incref
p->fgrp
p
p
fgrp
if(flag & (RFNAMEG|RFCNAMEG)) {		p->pgrp = newpgrp();		if(flag & RFNAMEG)			pgrpcpy(p->pgrp, up->pgrp);		/* inherit noattach */		p->pgrp->noattach = up->pgrp->noattach;	}	else {		p->pgrp = up->pgrp;		incref(p->pgrp);	}
flag & (RFNAMEG|RFCNAMEG)
flag
flag
(RFNAMEG|RFCNAMEG)
RFNAMEG|RFCNAMEG
RFNAMEG
RFNAMEG
RFCNAMEG
RFCNAMEG
{		p->pgrp = newpgrp();		if(flag & RFNAMEG)			pgrpcpy(p->pgrp, up->pgrp);		/* inherit noattach */		p->pgrp->noattach = up->pgrp->noattach;	}
p->pgrp = newpgrp();
p->pgrp = newpgrp()
p->pgrp
p
p
pgrp
newpgrp()
newpgrp
newpgrp
if(flag & RFNAMEG)			pgrpcpy(p->pgrp, up->pgrp);
flag & RFNAMEG
flag
flag
RFNAMEG
RFNAMEG
pgrpcpy(p->pgrp, up->pgrp);
pgrpcpy(p->pgrp, up->pgrp)
pgrpcpy
pgrpcpy
p->pgrp
p
p
pgrp
up->pgrp
up
up
pgrp
p->pgrp->noattach = up->pgrp->noattach;
p->pgrp->noattach = up->pgrp->noattach
p->pgrp->noattach
p->pgrp
p
p
pgrp
noattach
up->pgrp->noattach
up->pgrp
up
up
pgrp
noattach
{		p->pgrp = up->pgrp;		incref(p->pgrp);	}
p->pgrp = up->pgrp;
p->pgrp = up->pgrp
p->pgrp
p
p
pgrp
up->pgrp
up
up
pgrp
incref(p->pgrp);
incref(p->pgrp)
incref
incref
p->pgrp
p
p
pgrp
if(flag & RFNOMNT)		p->pgrp->noattach = 1;
flag & RFNOMNT
flag
flag
RFNOMNT
RFNOMNT
p->pgrp->noattach = 1;
p->pgrp->noattach = 1
p->pgrp->noattach
p->pgrp
p
p
pgrp
noattach
1
if(flag & RFREND)		p->rgrp = newrgrp();	else {		incref(up->rgrp);		p->rgrp = up->rgrp;	}
flag & RFREND
flag
flag
RFREND
RFREND
p->rgrp = newrgrp();
p->rgrp = newrgrp()
p->rgrp
p
p
rgrp
newrgrp()
newrgrp
newrgrp
{		incref(up->rgrp);		p->rgrp = up->rgrp;	}
incref(up->rgrp);
incref(up->rgrp)
incref
incref
up->rgrp
up
up
rgrp
p->rgrp = up->rgrp;
p->rgrp = up->rgrp
p->rgrp
p
p
rgrp
up->rgrp
up
up
rgrp
if(flag & (RFENVG|RFCENVG)) {		p->egrp = smalloc(sizeof(Egrp));		p->egrp->ref = 1;		if(flag & RFENVG)			envcpy(p->egrp, up->egrp);	}	else {		p->egrp = up->egrp;		incref(p->egrp);	}
flag & (RFENVG|RFCENVG)
flag
flag
(RFENVG|RFCENVG)
RFENVG|RFCENVG
RFENVG
RFENVG
RFCENVG
RFCENVG
{		p->egrp = smalloc(sizeof(Egrp));		p->egrp->ref = 1;		if(flag & RFENVG)			envcpy(p->egrp, up->egrp);	}
p->egrp = smalloc(sizeof(Egrp));
p->egrp = smalloc(sizeof(Egrp))
p->egrp
p
p
egrp
smalloc(sizeof(Egrp))
smalloc
smalloc
sizeof(Egrp)
Egrp
Egrp
Egrp

p->egrp->ref = 1;
p->egrp->ref = 1
p->egrp->ref
p->egrp
p
p
egrp
ref
1
if(flag & RFENVG)			envcpy(p->egrp, up->egrp);
flag & RFENVG
flag
flag
RFENVG
RFENVG
envcpy(p->egrp, up->egrp);
envcpy(p->egrp, up->egrp)
envcpy
envcpy
p->egrp
p
p
egrp
up->egrp
up
up
egrp
{		p->egrp = up->egrp;		incref(p->egrp);	}
p->egrp = up->egrp;
p->egrp = up->egrp
p->egrp
p
p
egrp
up->egrp
up
up
egrp
incref(p->egrp);
incref(p->egrp)
incref
incref
p->egrp
p
p
egrp
p->hang = up->hang;
p->hang = up->hang
p->hang
p
p
hang
up->hang
up
up
hang
p->procmode = up->procmode;
p->procmode = up->procmode
p->procmode
p
p
procmode
up->procmode
up
up
procmode
if(up->procctl == Proc_tracesyscall)		p->procctl = Proc_tracesyscall;
up->procctl == Proc_tracesyscall
up->procctl
up
up
procctl
Proc_tracesyscall
Proc_tracesyscall
p->procctl = Proc_tracesyscall;
p->procctl = Proc_tracesyscall
p->procctl
p
p
procctl
Proc_tracesyscall
Proc_tracesyscall
poperror();
poperror()
poperror
poperror
forkchild(p, up->dbgreg);
forkchild(p, up->dbgreg)
forkchild
forkchild
p
p
up->dbgreg
up
up
dbgreg
p->parent = up;
p->parent = up
p->parent
p
p
parent
up
up
if((flag&RFNOWAIT) == 0){		p->parentpid = up->pid;		lock(&up->exl);		up->nchild++;		unlock(&up->exl);	}
(flag&RFNOWAIT) == 0
(flag&RFNOWAIT)
flag&RFNOWAIT
flag
flag
RFNOWAIT
RFNOWAIT
0
{		p->parentpid = up->pid;		lock(&up->exl);		up->nchild++;		unlock(&up->exl);	}
p->parentpid = up->pid;
p->parentpid = up->pid
p->parentpid
p
p
parentpid
up->pid
up
up
pid
lock(&up->exl);
lock(&up->exl)
lock
lock
&up->exl
up->exl
up
up
exl
up->nchild++;
up->nchild++
up->nchild
up
up
nchild
unlock(&up->exl);
unlock(&up->exl)
unlock
unlock
&up->exl
up->exl
up
up
exl
if((flag&RFNOTEG) == 0)		p->noteid = up->noteid;
(flag&RFNOTEG) == 0
(flag&RFNOTEG)
flag&RFNOTEG
flag
flag
RFNOTEG
RFNOTEG
0
p->noteid = up->noteid;
p->noteid = up->noteid
p->noteid
p
p
noteid
up->noteid
up
up
noteid
pid = p->pid;
pid = p->pid
pid
pid
p->pid
p
p
pid
memset(p->time, 0, sizeof(p->time));
memset(p->time, 0, sizeof(p->time))
memset
memset
p->time
p
p
time
0
sizeof(p->time)
(p->time)
p->time
p
p
time
p->time[TReal] = MACHP(0)->ticks;
p->time[TReal] = MACHP(0)->ticks
p->time[TReal]
p->time
p
p
time
TReal
TReal
MACHP(0)->ticks
MACHP(0)
MACHP
MACHP
0
ticks
kstrdup(&p->text, up->text);
kstrdup(&p->text, up->text)
kstrdup
kstrdup
&p->text
p->text
p
p
text
up->text
up
up
text
kstrdup(&p->user, up->user);
kstrdup(&p->user, up->user)
kstrdup
kstrdup
&p->user
p->user
p
p
user
up->user
up
up
user
procfork(p);
procfork(p)
procfork
procfork
p
p
flushmmu();
flushmmu()
flushmmu
flushmmu
p->basepri = up->basepri;
p->basepri = up->basepri
p->basepri
p
p
basepri
up->basepri
up
up
basepri
p->priority = up->basepri;
p->priority = up->basepri
p->priority
p
p
priority
up->basepri
up
up
basepri
p->fixedpri = up->fixedpri;
p->fixedpri = up->fixedpri
p->fixedpri
p
p
fixedpri
up->fixedpri
up
up
fixedpri
p->mp = up->mp;
p->mp = up->mp
p->mp
p
p
mp
up->mp
up
up
mp
wm = up->wired;
wm = up->wired
wm
wm
up->wired
up
up
wired
if(wm)		procwired(p, wm->machno);
wm
wm
procwired(p, wm->machno);
procwired(p, wm->machno)
procwired
procwired
p
p
wm->machno
wm
wm
machno
ready(p);
ready(p)
ready
ready
p
p
sched();
sched()
sched
sched
return pid;
pid
pid
-----joern-----
(449,676,0)
(680,501,0)
(57,60,0)
(116,88,0)
(488,312,0)
(292,506,0)
(259,199,0)
(464,554,0)
(12,75,0)
(628,495,0)
(594,94,0)
(560,87,0)
(349,679,0)
(62,577,0)
(278,194,0)
(97,66,0)
(182,211,0)
(347,329,0)
(313,520,0)
(191,526,0)
(122,663,0)
(40,236,0)
(314,74,0)
(163,530,0)
(500,530,0)
(625,158,0)
(490,292,0)
(192,393,0)
(135,250,0)
(550,438,0)
(330,56,0)
(194,56,0)
(291,530,0)
(547,705,0)
(554,140,0)
(594,167,0)
(278,596,0)
(577,489,0)
(431,443,0)
(650,681,0)
(287,140,0)
(61,530,0)
(465,502,0)
(79,666,0)
(665,273,0)
(631,524,0)
(477,15,0)
(134,647,0)
(667,622,0)
(451,41,0)
(699,613,0)
(493,437,0)
(99,445,0)
(497,445,0)
(462,627,0)
(363,347,0)
(301,368,0)
(599,56,0)
(566,125,0)
(70,56,0)
(511,464,0)
(545,641,0)
(652,369,0)
(79,571,0)
(251,428,0)
(28,590,0)
(203,621,0)
(377,212,0)
(266,632,0)
(10,56,0)
(8,56,0)
(231,530,0)
(638,511,0)
(161,82,0)
(350,20,0)
(459,530,0)
(575,143,0)
(426,543,0)
(66,374,0)
(546,101,0)
(56,227,0)
(388,694,0)
(670,318,0)
(502,501,0)
(362,530,0)
(684,299,0)
(433,249,0)
(341,513,0)
(695,530,0)
(571,499,0)
(207,330,0)
(466,4,0)
(402,504,0)
(323,530,0)
(185,66,0)
(75,189,0)
(240,419,0)
(269,80,0)
(408,254,0)
(697,327,0)
(144,151,0)
(528,10,0)
(610,36,0)
(268,554,0)
(150,516,0)
(92,285,0)
(85,495,0)
(428,231,0)
(292,164,0)
(489,376,0)
(694,240,0)
(644,699,0)
(317,530,0)
(600,219,0)
(157,416,0)
(647,614,0)
(672,421,0)
(628,704,0)
(605,56,0)
(501,680,0)
(20,350,0)
(298,98,0)
(46,530,0)
(222,399,0)
(127,407,0)
(35,691,0)
(385,81,0)
(24,530,0)
(29,413,0)
(564,56,0)
(605,625,0)
(197,152,0)
(502,56,0)
(373,321,0)
(343,56,0)
(168,696,0)
(325,271,0)
(50,636,0)
(209,605,0)
(289,163,0)
(378,56,0)
(515,44,0)
(43,631,0)
(335,635,0)
(167,594,0)
(432,94,0)
(307,56,0)
(14,44,0)
(468,169,0)
(217,532,0)
(293,530,0)
(345,530,0)
(420,328,0)
(651,140,0)
(229,212,0)
(542,376,0)
(695,410,0)
(450,100,0)
(662,611,0)
(133,105,0)
(524,631,0)
(508,346,0)
(443,635,0)
(81,444,0)
(306,530,0)
(38,651,0)
(654,321,0)
(520,313,0)
(491,336,0)
(33,450,0)
(98,78,0)
(93,125,0)
(512,167,0)
(146,4,0)
(302,560,0)
(241,152,0)
(593,337,0)
(228,264,0)
(340,39,0)
(252,694,0)
(49,42,0)
(387,688,0)
(237,225,0)
(162,89,0)
(279,415,0)
(86,611,0)
(577,56,0)
(170,579,0)
(384,174,0)
(131,85,0)
(513,206,0)
(330,602,0)
(657,442,0)
(59,137,0)
(378,346,0)
(256,530,0)
(183,376,0)
(555,622,0)
(564,520,0)
(353,530,0)
(539,378,0)
(22,521,0)
(303,511,0)
(288,551,0)
(42,589,0)
(211,56,0)
(85,131,0)
(647,134,0)
(245,43,0)
(173,530,0)
(143,601,0)
(369,140,0)
(424,149,0)
(438,550,0)
(453,29,0)
(396,303,0)
(195,89,0)
(446,698,0)
(89,407,0)
(659,677,0)
(281,590,0)
(688,387,0)
(618,599,0)
(23,498,0)
(235,622,0)
(109,238,0)
(410,695,0)
(286,184,0)
(212,56,0)
(166,530,0)
(107,437,0)
(599,169,0)
(472,449,0)
(407,271,0)
(406,254,0)
(250,18,0)
(80,269,0)
(140,530,0)
(475,486,0)
(120,208,0)
(588,499,0)
(15,56,0)
(322,511,0)
(674,387,0)
(272,551,0)
(226,299,0)
(562,464,0)
(601,143,0)
(582,136,0)
(254,408,0)
(447,56,0)
(503,219,0)
(448,704,0)
(632,266,0)
(607,426,0)
(145,551,0)
(210,347,0)
(378,236,0)
(485,250,0)
(390,248,0)
(444,81,0)
(567,468,0)
(342,387,0)
(511,0,0)
(343,181,0)
(265,261,0)
(551,272,0)
(16,181,0)
(42,56,0)
(123,143,0)
(239,30,0)
(534,140,0)
(149,424,0)
(328,262,0)
(316,31,0)
(31,524,0)
(366,374,0)
(617,428,0)
(277,278,0)
(507,514,0)
(176,688,0)
(94,432,0)
(499,18,0)
(352,530,0)
(482,521,0)
(480,456,0)
(151,579,0)
(240,636,0)
(110,356,0)
(494,70,0)
(589,393,0)
(392,481,0)
(549,656,0)
(181,16,0)
(116,530,0)
(58,658,0)
(60,454,0)
(540,211,0)
(476,408,0)
(591,530,0)
(693,486,0)
(574,530,0)
(294,423,0)
(126,337,0)
(159,287,0)
(212,454,0)
(387,140,0)
(9,607,0)
(401,259,0)
(461,653,0)
(658,700,0)
(505,320,0)
(25,30,0)
(411,140,0)
(70,203,0)
(488,415,0)
(1,584,0)
(417,327,0)
(529,415,0)
(506,530,0)
(623,15,0)
(525,410,0)
(440,699,0)
(36,610,0)
(696,168,0)
(692,666,0)
(631,43,0)
(557,702,0)
(398,101,0)
(481,424,0)
(662,140,0)
(172,189,0)
(227,56,0)
(103,140,0)
(77,88,0)
(151,144,0)
(407,636,0)
(454,423,0)
(233,208,0)
(283,545,0)
(73,82,0)
(703,100,0)
(329,281,0)
(380,487,0)
(200,668,0)
(296,285,0)
(104,40,0)
(160,264,0)
(100,450,0)
(603,295,0)
(421,56,0)
(129,65,0)
(2,569,0)
(413,29,0)
(679,349,0)
(90,42,0)
(201,416,0)
(409,656,0)
(413,293,0)
(483,72,0)
(368,56,0)
(194,346,0)
(327,417,0)
(164,705,0)
(39,56,0)
(264,56,0)
(19,308,0)
(609,610,0)
(354,415,0)
(375,82,0)
(487,56,0)
(364,631,0)
(40,56,0)
(441,577,0)
(269,232,0)
(569,56,0)
(682,219,0)
(74,676,0)
(614,647,0)
(264,632,0)
(87,560,0)
(648,383,0)
(187,488,0)
(705,164,0)
(395,549,0)
(669,327,0)
(604,456,0)
(470,252,0)
(310,318,0)
(447,269,0)
(105,687,0)
(558,248,0)
(455,295,0)
(671,635,0)
(100,4,0)
(393,589,0)
(184,85,0)
(243,238,0)
(184,56,0)
(236,543,0)
(625,605,0)
(175,244,0)
(179,590,0)
(464,530,0)
(102,37,0)
(500,56,0)
(247,510,0)
(95,354,0)
(660,578,0)
(17,622,0)
(138,668,0)
(511,303,0)
(519,521,0)
(14,636,0)
(424,481,0)
(653,56,0)
(668,349,0)
(487,164,0)
(646,369,0)
(643,674,0)
(147,158,0)
(0,511,0)
(382,36,0)
(82,375,0)
(96,605,0)
(319,655,0)
(76,128,0)
(60,56,0)
(613,530,0)
(3,155,0)
(326,566,0)
(6,350,0)
(169,468,0)
(199,612,0)
(311,162,0)
(404,4,0)
(585,394,0)
(534,394,0)
(299,510,0)
(526,687,0)
(492,402,0)
(246,105,0)
(34,176,0)
(208,695,0)
(427,671,0)
(20,56,0)
(52,165,0)
(442,636,0)
(284,256,0)
(56,530,0)
(416,140,0)
(587,622,0)
(292,56,0)
(346,155,0)
(144,346,0)
(690,564,0)
(399,421,0)
(238,56,0)
(41,206,0)
(663,596,0)
(581,696,0)
(334,571,0)
(371,244,0)
(397,186,0)
(356,438,0)
(676,449,0)
(434,375,0)
(463,603,0)
(76,56,0)
(536,394,0)
(510,140,0)
(572,674,0)
(535,167,0)
(164,530,0)
(7,100,0)
(390,56,0)
(698,56,0)
(163,318,0)
(514,584,0)
(641,545,0)
(250,703,0)
(248,558,0)
(678,20,0)
(262,328,0)
(271,407,0)
(607,236,0)
(553,194,0)
(11,330,0)
(211,346,0)
(676,530,0)
(571,622,0)
(412,147,0)
(198,622,0)
(437,107,0)
(656,549,0)
(571,336,0)
(336,14,0)
(703,250,0)
(571,486,0)
(297,530,0)
(199,259,0)
(666,399,0)
(106,646,0)
(590,281,0)
(302,56,0)
(592,530,0)
(67,172,0)
(202,418,0)
(519,530,0)
(452,78,0)
(327,56,0)
(516,270,0)
(513,56,0)
(152,272,0)
(647,8,0)
(523,703,0)
(208,56,0)
(305,686,0)
(573,91,0)
(573,189,0)
(333,271,0)
(190,383,0)
(144,56,0)
(125,566,0)
(429,418,0)
(276,184,0)
(148,534,0)
(677,56,0)
(117,496,0)
(691,56,0)
(153,530,0)
(238,648,0)
(53,462,0)
(255,530,0)
(647,530,0)
(666,530,0)
(374,140,0)
(544,368,0)
(98,140,0)
(383,648,0)
(156,653,0)
(149,232,0)
(522,412,0)
(561,284,0)
(595,273,0)
(328,56,0)
(620,131,0)
(249,573,0)
(338,78,0)
(295,603,0)
(533,514,0)
(531,530,0)
(418,75,0)
(596,663,0)
(248,390,0)
(597,411,0)
(260,651,0)
(435,432,0)
(640,80,0)
(309,137,0)
(69,516,0)
(661,504,0)
(571,252,0)
(649,254,0)
(54,378,0)
(356,56,0)
(571,178,0)
(698,444,0)
(140,101,0)
(568,128,0)
(204,378,0)
(186,397,0)
(552,80,0)
(391,154,0)
(444,530,0)
(70,206,0)
(571,668,0)
(112,390,0)
(318,163,0)
(578,186,0)
(285,56,0)
(121,685,0)
(87,308,0)
(21,569,0)
(460,287,0)
(504,402,0)
(559,146,0)
(408,140,0)
(139,136,0)
(354,95,0)
(216,530,0)
(402,530,0)
(244,614,0)
(177,56,0)
(355,499,0)
(206,621,0)
(84,447,0)
(26,612,0)
(5,134,0)
(489,530,0)
(689,292,0)
(29,56,0)
(629,134,0)
(358,103,0)
(72,658,0)
(78,98,0)
(569,320,0)
(521,519,0)
(111,411,0)
(648,530,0)
(601,530,0)
(375,146,0)
(387,674,0)
(442,407,0)
(203,70,0)
(348,303,0)
(370,421,0)
(566,140,0)
(88,116,0)
(101,180,0)
(186,578,0)
(596,155,0)
(158,530,0)
(336,532,0)
(479,504,0)
(300,502,0)
(114,284,0)
(691,530,0)
(365,554,0)
(128,530,0)
(496,140,0)
(415,312,0)
(563,503,0)
(675,481,0)
(231,685,0)
(527,513,0)
(282,178,0)
(399,530,0)
(428,56,0)
(65,612,0)
(571,375,0)
(616,88,0)
(580,266,0)
(610,219,0)
(612,199,0)
(579,151,0)
(130,487,0)
(379,259,0)
(688,176,0)
(594,530,0)
(163,56,0)
(171,530,0)
(549,140,0)
(469,700,0)
(518,468,0)
(48,417,0)
(608,685,0)
(586,10,0)
(520,530,0)
(196,539,0)
(570,662,0)
(634,60,0)
(273,663,0)
(633,467,0)
(137,140,0)
(115,162,0)
(108,579,0)
(454,456,0)
(537,532,0)
(89,162,0)
(509,410,0)
(372,704,0)
(315,549,0)
(359,450,0)
(538,140,0)
(403,383,0)
(214,131,0)
(212,294,0)
(432,56,0)
(285,116,0)
(357,393,0)
(152,56,0)
(683,369,0)
(376,489,0)
(501,624,0)
(606,36,0)
(8,647,0)
(119,578,0)
(18,23,0)
(230,177,0)
(242,8,0)
(344,74,0)
(346,508,0)
(132,686,0)
(224,81,0)
(32,44,0)
(627,140,0)
(425,302,0)
(701,266,0)
(532,240,0)
(548,103,0)
(194,278,0)
(612,140,0)
(270,530,0)
(205,72,0)
(193,178,0)
(422,622,0)
(213,437,0)
(381,530,0)
(272,530,0)
(626,350,0)
(414,498,0)
(402,262,0)
(394,534,0)
(45,564,0)
(290,538,0)
(351,295,0)
(270,516,0)
(389,279,0)
(630,125,0)
(18,4,0)
(91,573,0)
(281,329,0)
(539,165,0)
(339,177,0)
(607,56,0)
(478,312,0)
(615,270,0)
(82,18,0)
(397,232,0)
(367,176,0)
(71,343,0)
(113,194,0)
(244,56,0)
(614,244,0)
(218,432,0)
(101,140,0)
(436,538,0)
(368,443,0)
(506,292,0)
(136,16,0)
(304,144,0)
(275,40,0)
(589,530,0)
(361,462,0)
(704,628,0)
(484,694,0)
(55,65,0)
(571,249,0)
(386,249,0)
(571,445,0)
(565,43,0)
(671,56,0)
(47,625,0)
(378,539,0)
(653,613,0)
(627,462,0)
(30,219,0)
(105,56,0)
(612,65,0)
(320,530,0)
(510,299,0)
(694,252,0)
(664,70,0)
(517,291,0)
(27,662,0)
(473,671,0)
(360,313,0)
(686,236,0)
(639,140,0)
(554,464,0)
(511,219,0)
(655,680,0)
(696,56,0)
(445,641,0)
(169,530,0)
(532,336,0)
(631,140,0)
(663,273,0)
(188,8,0)
(419,240,0)
(220,530,0)
(177,601,0)
(253,607,0)
(637,500,0)
(252,681,0)
(124,696,0)
(39,635,0)
(147,412,0)
(374,66,0)
(673,154,0)
(458,144,0)
(350,270,0)
(584,530,0)
(405,447,0)
(583,41,0)
(234,343,0)
(262,402,0)
(141,530,0)
(256,284,0)
(258,354,0)
(590,56,0)
(293,413,0)
(417,0,0)
(576,390,0)
(324,302,0)
(685,231,0)
(223,530,0)
(118,671,0)
(16,136,0)
(72,56,0)
(541,698,0)
(331,530,0)
(560,302,0)
(64,31,0)
(514,56,0)
(263,530,0)
(44,14,0)
(172,75,0)
(611,662,0)
(498,23,0)
(332,677,0)
(696,501,0)
(598,466,0)
(456,454,0)
(74,56,0)
(558,530,0)
(94,594,0)
(15,291,0)
(619,147,0)
(687,526,0)
(158,147,0)
(457,705,0)
(658,72,0)
(680,655,0)
(417,219,0)
(68,328,0)
(613,699,0)
(142,627,0)
(329,530,0)
(75,418,0)
(168,225,0)
(83,530,0)
(178,240,0)
(369,646,0)
(10,256,0)
(321,140,0)
(221,496,0)
(430,225,0)
(63,29,0)
(329,347,0)
(257,279,0)
(162,240,0)
(23,18,0)
(556,313,0)
(236,686,0)
(337,140,0)
(504,56,0)
(206,41,0)
(44,407,0)
(700,624,0)
(72,501,0)
(215,530,0)
(154,140,0)
(274,624,0)
(225,168,0)
(415,279,0)
(107,232,0)
(421,399,0)
(486,95,0)
(439,602,0)
(400,599,0)
(426,607,0)
(267,356,0)
(474,76,0)
(677,519,0)
(294,212,0)
(524,31,0)
(645,679,0)
(466,100,0)
(13,76,0)
(642,449,0)
(534,140,1)
(36,606,1)
(406,649,1)
(383,190,1)
(48,327,1)
(424,481,1)
(442,657,1)
(315,611,1)
(601,143,1)
(125,630,1)
(31,316,1)
(292,56,1)
(20,56,1)
(671,473,1)
(82,18,1)
(154,140,1)
(663,122,1)
(579,108,1)
(171,500,1)
(405,84,1)
(466,598,1)
(373,538,1)
(23,498,1)
(471,293,1)
(468,567,1)
(538,140,1)
(159,460,1)
(225,237,1)
(325,333,1)
(566,140,1)
(388,538,1)
(584,1,1)
(28,179,1)
(390,112,1)
(368,544,1)
(442,407,1)
(51,270,1)
(109,294,1)
(103,140,1)
(672,370,1)
(609,36,1)
(664,494,1)
(571,445,1)
(213,493,1)
(287,159,1)
(647,614,1)
(556,360,1)
(103,358,1)
(363,210,1)
(105,56,1)
(415,279,1)
(678,51,1)
(549,140,1)
(369,652,1)
(134,5,1)
(651,38,1)
(618,171,1)
(240,419,1)
(89,195,1)
(402,262,1)
(132,40,1)
(148,687,1)
(627,462,1)
(558,248,1)
(662,140,1)
(266,701,1)
(476,438,1)
(226,247,1)
(11,207,1)
(498,414,1)
(214,620,1)
(137,59,1)
(30,219,1)
(80,552,1)
(359,7,1)
(391,673,1)
(649,476,1)
(275,104,1)
(8,242,1)
(611,86,1)
(374,140,1)
(333,127,1)
(566,125,1)
(627,140,1)
(217,537,1)
(195,162,1)
(310,289,1)
(47,605,1)
(571,499,1)
(300,465,1)
(607,253,1)
(292,490,1)
(236,686,1)
(14,44,1)
(147,619,1)
(666,399,1)
(309,346,1)
(113,137,1)
(86,662,1)
(244,371,1)
(560,302,1)
(358,548,1)
(443,431,1)
(550,356,1)
(508,211,1)
(670,310,1)
(368,56,1)
(163,318,1)
(386,433,1)
(612,65,1)
(594,94,1)
(691,56,1)
(317,558,1)
(326,488,1)
(430,696,1)
(364,174,1)
(13,474,1)
(668,200,1)
(258,486,1)
(205,501,1)
(148,203,1)
(186,578,1)
(341,527,1)
(100,450,1)
(350,270,1)
(169,468,1)
(322,303,1)
(336,491,1)
(686,305,1)
(487,130,1)
(559,375,1)
(437,213,1)
(366,172,1)
(245,364,1)
(238,243,1)
(563,610,1)
(326,510,1)
(158,147,1)
(277,194,1)
(703,100,1)
(315,397,1)
(585,148,1)
(675,392,1)
(524,631,1)
(607,236,1)
(631,43,1)
(511,464,1)
(494,206,1)
(79,571,1)
(528,586,1)
(90,444,1)
(162,240,1)
(646,369,1)
(12,321,1)
(545,283,1)
(436,290,1)
(356,110,1)
(451,513,1)
(535,512,1)
(21,2,1)
(604,60,1)
(289,574,1)
(509,525,1)
(121,428,1)
(343,234,1)
(571,375,1)
(168,696,1)
(285,56,1)
(700,469,1)
(287,140,1)
(697,610,1)
(600,471,1)
(501,680,1)
(170,144,1)
(196,378,1)
(187,349,1)
(15,477,1)
(136,582,1)
(208,120,1)
(520,313,1)
(493,149,1)
(57,408,1)
(194,553,1)
(455,351,1)
(638,322,1)
(472,642,1)
(87,560,1)
(610,36,1)
(261,265,1)
(574,603,1)
(687,526,1)
(5,629,1)
(354,415,1)
(425,471,1)
(539,196,1)
(396,417,1)
(421,56,1)
(517,15,1)
(483,205,1)
(329,281,1)
(669,697,1)
(265,199,1)
(65,129,1)
(280,320,1)
(625,47,1)
(327,669,1)
(577,56,1)
(360,564,1)
(131,214,1)
(183,577,1)
(553,113,1)
(466,100,1)
(135,287,1)
(194,56,1)
(464,554,1)
(549,395,1)
(296,231,1)
(688,176,1)
(465,408,1)
(42,56,1)
(79,666,1)
(246,133,1)
(199,259,1)
(357,42,1)
(278,194,1)
(432,56,1)
(211,540,1)
(571,334,1)
(74,56,1)
(634,57,1)
(538,436,1)
(387,140,1)
(655,319,1)
(356,56,1)
(387,674,1)
(525,208,1)
(262,328,1)
(164,705,1)
(109,416,1)
(637,594,1)
(373,681,1)
(599,400,1)
(573,91,1)
(127,566,1)
(378,56,1)
(321,140,1)
(25,503,1)
(212,454,1)
(286,276,1)
(304,137,1)
(64,631,1)
(397,186,1)
(409,549,1)
(330,56,1)
(438,550,1)
(42,49,1)
(278,277,1)
(518,599,1)
(449,472,1)
(511,219,1)
(211,56,1)
(514,56,1)
(66,185,1)
(355,588,1)
(662,570,1)
(98,78,1)
(640,447,1)
(139,343,1)
(485,135,1)
(293,413,1)
(144,56,1)
(505,569,1)
(77,285,1)
(72,501,1)
(200,138,1)
(643,572,1)
(597,111,1)
(441,519,1)
(182,534,1)
(292,164,1)
(143,575,1)
(70,664,1)
(665,595,1)
(599,56,1)
(254,406,1)
(414,499,1)
(231,685,1)
(76,13,1)
(476,85,1)
(659,332,1)
(590,28,1)
(696,56,1)
(378,346,1)
(524,31,1)
(233,647,1)
(658,72,1)
(651,140,1)
(69,150,1)
(683,524,1)
(370,222,1)
(137,140,1)
(607,56,1)
(149,424,1)
(346,508,1)
(699,644,1)
(82,73,1)
(7,374,1)
(138,103,1)
(571,178,1)
(123,177,1)
(674,643,1)
(439,330,1)
(615,676,1)
(435,218,1)
(475,693,1)
(705,547,1)
(348,396,1)
(477,623,1)
(447,405,1)
(654,373,1)
(693,103,1)
(456,480,1)
(657,14,1)
(569,56,1)
(221,117,1)
(40,56,1)
(572,342,1)
(510,140,1)
(339,272,1)
(507,163,1)
(144,458,1)
(571,336,1)
(54,337,1)
(689,164,1)
(6,626,1)
(417,48,1)
(702,557,1)
(241,197,1)
(514,533,1)
(311,496,1)
(201,700,1)
(330,11,1)
(650,252,1)
(35,51,1)
(619,412,1)
(583,451,1)
(340,671,1)
(165,52,1)
(314,344,1)
(78,338,1)
(692,255,1)
(489,376,1)
(594,167,1)
(269,80,1)
(120,233,1)
(568,76,1)
(148,181,1)
(197,169,1)
(683,702,1)
(593,596,1)
(488,415,1)
(19,87,1)
(157,201,1)
(25,219,1)
(377,229,1)
(34,367,1)
(150,615,1)
(70,56,1)
(380,613,1)
(184,56,1)
(76,56,1)
(336,532,1)
(101,180,1)
(666,692,1)
(247,37,1)
(576,30,1)
(512,94,1)
(696,501,1)
(172,67,1)
(204,54,1)
(38,260,1)
(656,549,1)
(270,516,1)
(302,56,1)
(284,114,1)
(620,184,1)
(354,258,1)
(96,402,1)
(453,63,1)
(126,593,1)
(628,704,1)
(704,448,1)
(534,394,1)
(523,250,1)
(631,140,1)
(102,627,1)
(32,515,1)
(29,56,1)
(2,116,1)
(22,482,1)
(506,292,1)
(399,421,1)
(677,56,1)
(612,140,1)
(595,278,1)
(176,34,1)
(294,212,1)
(190,403,1)
(175,134,1)
(395,315,1)
(303,348,1)
(461,156,1)
(629,8,1)
(463,295,1)
(416,157,1)
(470,694,1)
(544,301,1)
(319,502,1)
(379,612,1)
(119,660,1)
(565,245,1)
(421,672,1)
(206,41,1)
(479,661,1)
(588,100,1)
(37,102,1)
(605,209,1)
(109,168,1)
(192,357,1)
(99,651,1)
(43,565,1)
(172,75,1)
(10,56,1)
(440,653,1)
(703,523,1)
(140,101,1)
(41,583,1)
(305,132,1)
(390,56,1)
(212,56,1)
(445,497,1)
(276,628,1)
(703,250,1)
(452,298,1)
(571,668,1)
(367,387,1)
(616,77,1)
(185,97,1)
(29,453,1)
(427,118,1)
(26,140,1)
(446,541,1)
(681,650,1)
(385,698,1)
(224,385,1)
(487,56,1)
(18,23,1)
(33,359,1)
(698,446,1)
(342,199,1)
(62,441,1)
(647,134,1)
(417,219,1)
(327,56,1)
(542,183,1)
(529,510,1)
(648,383,1)
(281,590,1)
(106,369,1)
(89,162,1)
(691,35,1)
(108,170,1)
(428,56,1)
(39,56,1)
(503,563,1)
(527,98,1)
(603,463,1)
(676,449,1)
(374,66,1)
(658,58,1)
(252,470,1)
(460,146,1)
(500,56,1)
(174,384,1)
(564,56,1)
(334,651,1)
(271,325,1)
(111,337,1)
(230,339,1)
(653,461,1)
(44,32,1)
(382,30,1)
(647,8,1)
(248,390,1)
(652,683,1)
(146,559,1)
(53,142,1)
(351,256,1)
(457,487,1)
(661,399,1)
(168,225,1)
(279,389,1)
(207,603,1)
(562,280,1)
(537,496,1)
(161,18,1)
(85,131,1)
(273,665,1)
(222,632,1)
(364,688,1)
(253,9,1)
(210,281,1)
(625,605,1)
(98,140,1)
(488,187,1)
(419,178,1)
(219,682,1)
(496,221,1)
(500,637,1)
(191,105,1)
(268,365,1)
(450,33,1)
(56,227,1)
(503,219,1)
(516,69,1)
(429,12,1)
(259,401,1)
(417,327,1)
(74,314,1)
(393,192,1)
(288,152,1)
(112,576,1)
(469,658,1)
(0,511,1)
(229,454,1)
(626,678,1)
(694,484,1)
(94,432,1)
(502,300,1)
(89,407,1)
(251,520,1)
(92,296,1)
(260,466,1)
(290,442,1)
(671,56,1)
(9,236,1)
(81,224,1)
(581,124,1)
(392,269,1)
(458,304,1)
(519,521,1)
(291,517,1)
(408,140,1)
(343,56,1)
(598,703,1)
(486,475,1)
(88,616,1)
(255,691,1)
(522,625,1)
(630,93,1)
(492,504,1)
(250,18,1)
(344,601,1)
(645,668,1)
(642,74,1)
(567,518,1)
(653,56,1)
(462,361,1)
(695,410,1)
(677,659,1)
(426,607,1)
(16,136,1)
(511,303,1)
(432,435,1)
(111,165,1)
(372,411,1)
(350,6,1)
(413,29,1)
(75,418,1)
(60,634,1)
(93,326,1)
(598,287,1)
(602,439,1)
(376,542,1)
(244,56,1)
(696,581,1)
(698,56,1)
(167,535,1)
(502,56,1)
(497,99,1)
(547,457,1)
(302,324,1)
(193,407,1)
(548,415,1)
(536,585,1)
(589,393,1)
(218,329,1)
(578,119,1)
(209,96,1)
(184,286,1)
(608,121,1)
(152,241,1)
(116,88,1)
(582,139,1)
(59,309,1)
(513,56,1)
(600,19,1)
(324,425,1)
(249,386,1)
(145,288,1)
(91,249,1)
(129,55,1)
(55,26,1)
(45,690,1)
(264,160,1)
(701,580,1)
(299,684,1)
(97,366,1)
(444,81,1)
(646,106,1)
(557,524,1)
(632,266,1)
(298,317,1)
(411,140,1)
(617,251,1)
(58,72,1)
(571,252,1)
(610,219,1)
(481,675,1)
(247,627,1)
(84,611,1)
(400,618,1)
(682,600,1)
(688,387,1)
(577,62,1)
(412,522,1)
(95,354,1)
(39,340,1)
(8,56,1)
(564,45,1)
(114,561,1)
(154,391,1)
(365,562,1)
(162,115,1)
(52,539,1)
(680,655,1)
(179,158,1)
(551,145,1)
(110,267,1)
(128,568,1)
(416,140,1)
(410,509,1)
(1,514,1)
(283,445,1)
(499,355,1)
(554,268,1)
(596,663,1)
(546,398,1)
(188,506,1)
(554,140,1)
(611,662,1)
(234,71,1)
(329,347,1)
(590,56,1)
(243,109,1)
(398,639,1)
(272,551,1)
(496,140,1)
(142,646,1)
(202,429,1)
(256,284,1)
(70,206,1)
(151,144,1)
(402,504,1)
(152,56,1)
(295,455,1)
(375,434,1)
(537,89,1)
(521,22,1)
(342,261,1)
(160,228,1)
(144,346,1)
(44,407,1)
(71,154,1)
(40,275,1)
(252,694,1)
(431,368,1)
(10,528,1)
(72,56,1)
(428,617,1)
(539,378,1)
(532,240,1)
(420,68,1)
(264,56,1)
(679,645,1)
(586,648,1)
(569,21,1)
(117,240,1)
(178,282,1)
(321,654,1)
(623,589,1)
(574,602,1)
(694,240,1)
(663,273,1)
(156,291,1)
(526,191,1)
(285,92,1)
(473,427,1)
(614,244,1)
(613,699,1)
(454,456,1)
(408,254,1)
(35,20,1)
(366,321,1)
(239,25,1)
(511,638,1)
(605,56,1)
(328,56,1)
(361,53,1)
(532,217,1)
(552,640,1)
(491,532,1)
(238,56,1)
(349,679,1)
(378,236,1)
(208,56,1)
(580,264,1)
(301,280,1)
(133,154,1)
(389,257,1)
(482,677,1)
(60,56,1)
(513,341,1)
(227,307,1)
(63,464,1)
(540,182,1)
(347,363,1)
(563,0,1)
(411,597,1)
(151,579,1)
(593,426,1)
(68,492,1)
(571,249,1)
(177,56,1)
(660,107,1)
(237,430,1)
(318,670,1)
(433,75,1)
(147,412,1)
(562,335,1)
(332,695,1)
(418,202,1)
(685,608,1)
(113,151,1)
(15,56,1)
(115,311,1)
(199,612,1)
(434,82,1)
(337,126,1)
(228,656,1)
(656,409,1)
(684,226,1)
(474,489,1)
(571,486,1)
(316,64,1)
(561,10,1)
(260,374,1)
(448,372,1)
(73,161,1)
(290,566,1)
(504,479,1)
(105,246,1)
(181,16,1)
(187,95,1)
(447,56,1)
(130,380,1)
(610,609,1)
(328,420,1)
(335,39,1)
(384,688,1)
(20,350,1)
(606,382,1)
(644,440,1)
(107,437,1)
(484,388,1)
(533,507,1)
(194,346,1)
(375,82,1)
(122,273,1)
(282,193,1)
(72,483,1)
(403,238,1)
(369,140,1)
(267,411,1)
(515,336,1)
(163,56,1)
(541,56,1)
(641,545,1)
(673,98,1)
(338,452,1)
(401,379,1)
(49,90,1)
(690,128,1)
(124,416,1)
(307,646,1)
(371,175,1)
(334,641,1)
(30,239,1)
(407,271,1)
(337,140,1)
(101,546,1)
(313,556,1)
(510,299,1)
(320,505,1)
(250,485,1)
(177,230,1)
(104,534,1)
(490,689,1)
(203,70,1)
(212,377,1)
(480,604,1)
(378,204,1)
(394,536,1)
(603,295,1)
(222,656,1)
(27,584,1)
(118,443,1)
(242,188,1)
(67,573,1)
(257,529,1)
(575,123,1)
(504,56,1)
(570,27,1)
(343,56,2)
(560,471,2)
(602,603,2)
(90,646,2)
(680,655,2)
(72,56,2)
(670,646,2)
(42,56,2)
(252,538,2)
(427,280,2)
(103,510,2)
(356,411,2)
(374,646,2)
(355,374,2)
(605,646,2)
(402,504,2)
(270,646,2)
(441,646,2)
(100,450,2)
(420,646,2)
(294,408,2)
(301,280,2)
(172,75,2)
(676,449,2)
(202,321,2)
(528,646,2)
(630,646,2)
(402,262,2)
(132,534,2)
(549,646,2)
(169,646,2)
(335,280,2)
(351,646,2)
(44,407,2)
(36,30,2)
(447,56,2)
(524,31,2)
(677,646,2)
(20,350,2)
(571,375,2)
(302,471,2)
(197,646,2)
(91,321,2)
(142,646,2)
(647,614,2)
(149,424,2)
(682,646,2)
(151,137,2)
(680,408,2)
(143,646,2)
(84,611,2)
(82,18,2)
(214,411,2)
(161,374,2)
(10,56,2)
(512,646,2)
(637,646,2)
(510,646,2)
(571,178,2)
(149,611,2)
(599,56,2)
(506,646,2)
(257,510,2)
(518,646,2)
(69,646,2)
(645,103,2)
(690,646,2)
(105,56,2)
(378,346,2)
(480,408,2)
(140,101,2)
(1,646,2)
(359,374,2)
(203,70,2)
(373,646,2)
(601,646,2)
(370,646,2)
(474,646,2)
(668,103,2)
(70,56,2)
(277,534,2)
(452,646,2)
(25,30,2)
(688,387,2)
(647,646,2)
(434,374,2)
(646,369,2)
(619,646,2)
(40,534,2)
(451,98,2)
(131,411,2)
(324,471,2)
(386,321,2)
(350,270,2)
(177,56,2)
(334,646,2)
(276,411,2)
(424,611,2)
(663,273,2)
(554,140,2)
(11,603,2)
(112,646,2)
(207,603,2)
(469,408,2)
(397,186,2)
(653,56,2)
(262,328,2)
(696,416,2)
(596,534,2)
(40,56,2)
(52,337,2)
(22,646,2)
(696,501,2)
(285,646,2)
(255,646,2)
(496,566,2)
(124,416,2)
(287,140,2)
(170,137,2)
(576,646,2)
(493,611,2)
(482,646,2)
(348,610,2)
(82,374,2)
(66,646,2)
(271,566,2)
(68,646,2)
(267,411,2)
(390,56,2)
(71,154,2)
(383,646,2)
(134,646,2)
(450,374,2)
(453,646,2)
(628,704,2)
(526,154,2)
(477,646,2)
(654,646,2)
(463,646,2)
(67,321,2)
(226,646,2)
(98,140,2)
(107,611,2)
(168,696,2)
(79,666,2)
(243,646,2)
(566,140,2)
(428,646,2)
(239,30,2)
(533,646,2)
(120,646,2)
(610,36,2)
(299,646,2)
(509,646,2)
(403,646,2)
(679,103,2)
(205,408,2)
(278,534,2)
(695,646,2)
(281,646,2)
(154,98,2)
(698,56,2)
(611,646,2)
(191,154,2)
(513,56,2)
(435,646,2)
(147,412,2)
(363,646,2)
(18,23,2)
(695,410,2)
(703,287,2)
(254,646,2)
(329,281,2)
(101,180,2)
(520,646,2)
(466,100,2)
(337,646,2)
(566,646,2)
(656,549,2)
(333,566,2)
(483,408,2)
(471,646,2)
(559,374,2)
(541,646,2)
(212,408,2)
(525,646,2)
(260,646,2)
(133,154,2)
(481,611,2)
(127,566,2)
(487,646,2)
(532,566,2)
(72,408,2)
(89,496,2)
(35,646,2)
(270,516,2)
(209,646,2)
(252,694,2)
(328,56,2)
(689,646,2)
(608,646,2)
(415,510,2)
(261,199,2)
(344,646,2)
(269,611,2)
(465,408,2)
(74,56,2)
(33,374,2)
(25,646,2)
(693,103,2)
(532,240,2)
(302,56,2)
(503,219,2)
(496,140,2)
(618,646,2)
(511,610,2)
(221,566,2)
(110,411,2)
(594,167,2)
(369,140,2)
(607,534,2)
(456,408,2)
(658,408,2)
(317,646,2)
(627,646,2)
(188,646,2)
(425,471,2)
(426,534,2)
(439,603,2)
(291,646,2)
(542,646,2)
(349,679,2)
(156,646,2)
(12,321,2)
(658,72,2)
(128,646,2)
(705,646,2)
(264,56,2)
(648,383,2)
(328,646,2)
(172,321,2)
(231,685,2)
(413,29,2)
(578,611,2)
(203,98,2)
(638,610,2)
(609,30,2)
(375,374,2)
(650,538,2)
(395,646,2)
(627,462,2)
(162,240,2)
(326,646,2)
(256,646,2)
(625,605,2)
(293,646,2)
(662,646,2)
(605,56,2)
(125,646,2)
(571,499,2)
(501,680,2)
(266,656,2)
(96,646,2)
(418,321,2)
(332,646,2)
(511,303,2)
(492,646,2)
(454,408,2)
(601,143,2)
(479,646,2)
(213,611,2)
(288,646,2)
(186,578,2)
(164,705,2)
(354,415,2)
(625,646,2)
(81,646,2)
(273,534,2)
(375,82,2)
(416,140,2)
(399,646,2)
(208,646,2)
(388,538,2)
(236,686,2)
(521,646,2)
(89,407,2)
(229,408,2)
(150,646,2)
(606,30,2)
(109,646,2)
(251,646,2)
(164,646,2)
(676,646,2)
(686,534,2)
(39,56,2)
(158,646,2)
(32,566,2)
(417,610,2)
(330,56,2)
(38,646,2)
(62,646,2)
(629,646,2)
(330,603,2)
(696,56,2)
(702,524,2)
(406,646,2)
(664,98,2)
(432,56,2)
(675,611,2)
(519,521,2)
(539,378,2)
(442,566,2)
(429,321,2)
(558,248,2)
(123,646,2)
(391,98,2)
(516,646,2)
(292,646,2)
(181,154,2)
(534,394,2)
(569,56,2)
(118,280,2)
(511,219,2)
(564,646,2)
(582,154,2)
(218,646,2)
(281,590,2)
(522,646,2)
(8,56,2)
(97,646,2)
(240,566,2)
(199,612,2)
(304,137,2)
(93,646,2)
(488,510,2)
(614,244,2)
(272,646,2)
(307,646,2)
(169,468,2)
(7,374,2)
(6,51,2)
(671,56,2)
(432,646,2)
(508,534,2)
(387,140,2)
(111,646,2)
(612,65,2)
(594,94,2)
(94,646,2)
(365,646,2)
(99,651,2)
(539,337,2)
(76,56,2)
(338,646,2)
(283,651,2)
(446,646,2)
(265,199,2)
(329,646,2)
(182,534,2)
(603,295,2)
(444,646,2)
(256,284,2)
(574,646,2)
(384,688,2)
(192,646,2)
(30,219,2)
(590,646,2)
(613,646,2)
(219,646,2)
(464,554,2)
(573,321,2)
(703,100,2)
(627,140,2)
(583,98,2)
(358,510,2)
(57,408,2)
(310,646,2)
(417,219,2)
(247,646,2)
(550,411,2)
(70,98,2)
(437,611,2)
(321,140,2)
(402,646,2)
(514,646,2)
(462,646,2)
(579,137,2)
(389,510,2)
(15,56,2)
(76,646,2)
(163,318,2)
(414,374,2)
(634,408,2)
(194,534,2)
(631,43,2)
(657,566,2)
(571,668,2)
(42,646,2)
(431,280,2)
(438,411,2)
(571,249,2)
(340,280,2)
(175,646,2)
(438,550,2)
(9,534,2)
(665,534,2)
(614,646,2)
(642,646,2)
(319,408,2)
(315,646,2)
(2,646,2)
(8,646,2)
(511,464,2)
(74,646,2)
(208,56,2)
(385,646,2)
(73,374,2)
(282,566,2)
(536,646,2)
(144,346,2)
(58,408,2)
(617,646,2)
(568,646,2)
(272,551,2)
(631,140,2)
(573,91,2)
(145,646,2)
(199,259,2)
(503,30,2)
(116,88,2)
(248,390,2)
(184,411,2)
(497,651,2)
(16,136,2)
(504,56,2)
(211,534,2)
(116,646,2)
(60,408,2)
(79,571,2)
(15,646,2)
(554,646,2)
(393,646,2)
(0,511,2)
(407,271,2)
(594,646,2)
(440,646,2)
(433,321,2)
(613,699,2)
(249,321,2)
(571,646,2)
(193,566,2)
(641,651,2)
(98,78,2)
(640,611,2)
(507,646,2)
(292,164,2)
(298,646,2)
(47,646,2)
(540,534,2)
(514,56,2)
(596,663,2)
(659,646,2)
(553,534,2)
(504,646,2)
(502,56,2)
(85,411,2)
(544,280,2)
(238,646,2)
(292,56,2)
(314,646,2)
(371,646,2)
(560,302,2)
(286,411,2)
(51,646,2)
(666,646,2)
(397,611,2)
(545,651,2)
(476,646,2)
(160,656,2)
(527,98,2)
(600,646,2)
(534,646,2)
(448,411,2)
(322,610,2)
(411,646,2)
(29,646,2)
(151,144,2)
(500,646,2)
(604,408,2)
(588,374,2)
(442,407,2)
(248,646,2)
(368,280,2)
(421,56,2)
(146,374,2)
(163,56,2)
(571,445,2)
(520,313,2)
(230,646,2)
(184,56,2)
(250,18,2)
(616,646,2)
(186,611,2)
(412,646,2)
(538,646,2)
(360,646,2)
(275,534,2)
(177,646,2)
(669,610,2)
(408,254,2)
(378,236,2)
(139,154,2)
(293,413,2)
(45,646,2)
(513,98,2)
(671,280,2)
(663,534,2)
(577,646,2)
(697,610,2)
(225,416,2)
(632,266,2)
(185,646,2)
(80,611,2)
(105,154,2)
(92,646,2)
(510,140,2)
(242,646,2)
(278,194,2)
(77,646,2)
(190,646,2)
(108,137,2)
(374,140,2)
(506,292,2)
(10,646,2)
(318,646,2)
(502,408,2)
(18,374,2)
(27,646,2)
(53,646,2)
(75,418,2)
(287,374,2)
(551,646,2)
(187,510,2)
(231,646,2)
(224,646,2)
(168,416,2)
(346,508,2)
(246,154,2)
(607,236,2)
(212,56,2)
(336,566,2)
(206,41,2)
(63,646,2)
(487,56,2)
(445,651,2)
(290,646,2)
(447,611,2)
(378,337,2)
(56,646,2)
(356,56,2)
(23,498,2)
(651,646,2)
(211,56,2)
(535,646,2)
(14,44,2)
(692,646,2)
(552,611,2)
(280,646,2)
(346,534,2)
(563,30,2)
(449,646,2)
(575,646,2)
(321,646,2)
(29,56,2)
(86,646,2)
(48,610,2)
(329,347,2)
(443,280,2)
(564,56,2)
(571,252,2)
(244,56,2)
(233,646,2)
(571,486,2)
(561,646,2)
(262,646,2)
(421,646,2)
(571,336,2)
(585,646,2)
(498,374,2)
(562,646,2)
(279,510,2)
(72,501,2)
(489,646,2)
(148,646,2)
(87,560,2)
(147,646,2)
(296,646,2)
(677,56,2)
(408,646,2)
(239,646,2)
(30,646,2)
(294,212,2)
(163,646,2)
(417,327,2)
(136,154,2)
(59,534,2)
(416,408,2)
(98,646,2)
(534,140,2)
(194,56,2)
(39,280,2)
(295,646,2)
(436,646,2)
(468,646,2)
(137,534,2)
(660,611,2)
(687,526,2)
(121,646,2)
(610,219,2)
(122,534,2)
(269,80,2)
(382,30,2)
(236,534,2)
(603,646,2)
(673,98,2)
(135,287,2)
(399,421,2)
(159,374,2)
(244,646,2)
(339,646,2)
(424,481,2)
(557,524,2)
(694,538,2)
(460,374,2)
(327,610,2)
(488,415,2)
(394,646,2)
(60,56,2)
(632,656,2)
(524,631,2)
(661,646,2)
(523,287,2)
(466,374,2)
(238,56,2)
(529,510,2)
(78,646,2)
(222,646,2)
(644,646,2)
(240,419,2)
(473,280,2)
(234,154,2)
(494,98,2)
(655,408,2)
(5,646,2)
(595,534,2)
(376,646,2)
(87,471,2)
(577,56,2)
(672,646,2)
(152,646,2)
(16,154,2)
(556,646,2)
(593,646,2)
(374,66,2)
(204,337,2)
(653,646,2)
(178,566,2)
(428,56,2)
(489,376,2)
(400,646,2)
(354,103,2)
(201,408,2)
(174,688,2)
(472,646,2)
(183,646,2)
(107,437,2)
(651,140,2)
(200,103,2)
(157,408,2)
(611,662,2)
(548,510,2)
(300,408,2)
(168,225,2)
(464,646,2)
(357,646,2)
(377,408,2)
(457,646,2)
(94,432,2)
(372,411,2)
(349,103,2)
(151,579,2)
(444,81,2)
(484,538,2)
(694,240,2)
(691,646,2)
(89,162,2)
(678,51,2)
(570,646,2)
(158,147,2)
(410,646,2)
(337,140,2)
(517,646,2)
(167,646,2)
(701,656,2)
(392,611,2)
(615,646,2)
(647,134,2)
(130,646,2)
(409,646,2)
(549,140,2)
(95,103,2)
(501,408,2)
(368,56,2)
(687,154,2)
(100,374,2)
(54,337,2)
(538,140,2)
(181,16,2)
(584,646,2)
(327,56,2)
(114,646,2)
(313,646,2)
(30,30,2)
(20,51,2)
(426,607,2)
(704,411,2)
(88,646,2)
(599,646,2)
(691,56,2)
(581,416,2)
(49,646,2)
(430,416,2)
(411,140,2)
(455,646,2)
(237,416,2)
(212,454,2)
(626,51,2)
(289,646,2)
(196,337,2)
(165,337,2)
(505,646,2)
(396,610,2)
(515,566,2)
(119,611,2)
(458,137,2)
(115,496,2)
(547,646,2)
(227,646,2)
(567,646,2)
(13,646,2)
(285,56,2)
(37,627,2)
(41,98,2)
(102,627,2)
(649,646,2)
(387,674,2)
(490,646,2)
(499,374,2)
(253,534,2)
(19,471,2)
(607,56,2)
(519,646,2)
(70,206,2)
(117,566,2)
(598,374,2)
(569,646,2)
(171,646,2)
(378,56,2)
(612,140,2)
(461,646,2)
(320,646,2)
(366,646,2)
(21,646,2)
(303,610,2)
(179,646,2)
(311,496,2)
(162,496,2)
(703,250,2)
(341,98,2)
(137,140,2)
(75,321,2)
(700,408,2)
(28,646,2)
(454,456,2)
(154,140,2)
(685,646,2)
(195,496,2)
(491,566,2)
(14,566,2)
(405,611,2)
(390,646,2)
(336,532,2)
(144,56,2)
(241,646,2)
(103,140,2)
(194,346,2)
(413,646,2)
(85,131,2)
(597,646,2)
(113,534,2)
(104,534,2)
(558,646,2)
(206,98,2)
(628,411,2)
(586,646,2)
(566,125,2)
(361,646,2)
(620,411,2)
(144,137,2)
(408,140,2)
(56,227,2)
(641,545,2)
(264,656,2)
(380,646,2)
(647,8,2)
(666,399,2)
(684,646,2)
(580,656,2)
(217,566,2)
(0,610,2)
(347,646,2)
(589,393,2)
(662,140,2)
(485,287,2)
(415,279,2)
(305,534,2)
(681,538,2)
(510,299,2)
(419,566,2)
(350,51,2)
(343,154,2)
(210,646,2)
(138,103,2)
(698,646,2)
(486,103,2)
(284,646,2)
(95,354,2)
(470,538,2)
(648,646,2)
(500,56,2)
(656,646,2)
(699,646,2)
(407,566,2)
(623,646,2)
(537,566,2)
(268,646,2)
(475,103,2)
(250,287,2)
(20,56,2)
(44,566,2)
(589,646,2)
(228,656,2)
(688,176,2)
(325,566,2)
(152,56,2)
(610,30,2)
(23,374,2)
(590,56,2)
(126,646,2)
(309,534,2)
(258,103,2)
-----------------------------------
(0,p->seg[i] = dupseg(up->seg, i, n)
(1,up)
(2,p)
(3,if(flag & RFNAMEG)
(4,)
(5,note)
(6,machno)
(7,oeg)
(8,p->note)
(9,p)
(10,p->procmode)
(11,procctl)
(12,org)
(13,notified)
(14,up->pgrp->noattach = opg->noattach)
(15,p->nerrlab)
(16,dupfgrp(up->fgrp)
(17,if(flag & RFNOTEG)
(18,up->egrp = smalloc(sizeof(Egrp)
(19,nexterror()
(20,procwired(p, wm->machno)
(21,dbgreg)
(22,noswap)
(23,smalloc(sizeof(Egrp)
(24,org)
(25,i)
(26,flag)
(27,flag)
(28,text)
(29,p->seglock)
(30,i < NSEG)
(31,RFENVG|RFCENVG)
(32,noattach)
(33,egrp)
(34,RFCNAMEG)
(35,p)
(36,up->seg)
(37,error(Ebadarg)
(38,RFNOTEG)
(39,ready(p)
(40,p->pgrp)
(41,up->fgrp)
(42,p->s)
(43,RFENVG|RFCENVG)
(44,opg->noattach)
(45,lastnote)
(46,for(i = 0; i < NSEG; i++)
(47,TReal)
(48,i)
(49,s)
(50,if(flag & RFNAMEG)
(51,wm)
(52,1)
(53,RFMEM)
(54,p)
(55,RFFDG)
(56,p = newproc()
(57,p)
(58,ref)
(59,RFNAMEG)
(60,p->egrp)
(61,if((flag & (RFNAMEG|RFCNAMEG)
(62,nnote)
(63,p)
(64,RFENVG)
(65,RFFDG|RFCFDG)
(66,RFENVG|RFCENVG)
(67,org)
(68,p)
(69,wired)
(70,p->fgrp)
(71,p)
(72,p->egrp)
(73,egrp)
(74,p->mp)
(75,org = up->rgrp)
(76,p->notified)
(77,up)
(78,RFFDG|RFCFDG)
(79,RET)
(80,up->pid)
(81,up->scallnr)
(82,up->egrp)
(83,if(flag & (RFENVG|RFCENVG)
(84,p)
(85,p->rgrp = up->rgrp)
(86,0)
(87,qunlock(&p->seglock)
(88,up->ureg)
(89,pgrpcpy(up->pgrp, opg)
(90,p)
(91,newrgrp()
(92,ureg)
(93,RFNAMEG)
(94,&p->user)
(95,up->fgrp = dupfgrp(ofg)
(96,p)
(97,RFENVG)
(98,flag & (RFFDG|RFCFDG)
(99,up)
(100,oeg = up->egrp)
(101,arg[0])
(102,Ebadarg)
(103,flag & RFFDG)
(104,p)
(105,p->fgrp)
(106,0)
(107,up->nchild++)
(108,pgrp)
(109,p)
(110,rgrp)
(111,flag)
(112,seglock)
(113,p)
(114,procmode)
(115,pgrp)
(116,p->ureg = up->ureg)
(117,flag)
(118,p)
(119,exl)
(120,privatemem)
(121,up)
(122,noattach)
(123,up)
(124,p)
(125,RFNAMEG|RFCNAMEG)
(126,RFNOMNT)
(127,opg)
(128,p->notified = 0)
(129,RFCFDG)
(130,dot)
(131,up->rgrp)
(132,up)
(133,p)
(134,up->note)
(135,up)
(136,up->fgrp)
(137,flag & RFNAMEG)
(138,up)
(139,up)
(140,flag = arg[0])
(141,if(waserror()
(142,flag)
(143,up->fixedpri)
(144,p->pgrp)
(145,basepri)
(146,up->egrp->ref = 1)
(147,MACHP(0)
(148,flag)
(149,lock(&up->exl)
(150,up)
(151,pgrpcpy(p->pgrp, up->pgrp)
(152,p->priority)
(153,flag)
(154,flag & RFFDG)
(155,)
(156,p)
(157,RFENVG)
(158,p->time[TReal] = MACHP(0)
(159,RFENVG)
(160,noteid)
(161,up)
(162,up->pgrp)
(163,forkchild(p, up->dbgreg)
(164,p->dot = up->dot)
(165,p->pgrp->noattach = 1)
(166,if(up->procctl == Proc_tracesyscall)
(167,up->user)
(168,envcpy(p->egrp, up->egrp)
(169,p->basepri = up->basepri)
(170,up)
(171,flushmmu()
(172,closergrp(org)
(173,opg)
(174,error(Ebadarg)
(175,p)
(176,RFNAMEG|RFCNAMEG)
(177,p->fixedpri)
(178,up->pgrp)
(179,p)
(180,ulong *arg)
(181,p->fgrp = dupfgrp(up->fgrp)
(182,p)
(183,up)
(184,p->rgrp)
(185,RFCENVG)
(186,&up->exl)
(187,ofg)
(188,p)
(189,)
(190,hang)
(191,nil)
(192,s)
(193,up)
(194,p->pgrp)
(195,opg)
(196,noattach)
(197,p)
(198,if(flag & (RFENVG|RFCENVG)
(199,(flag & (RFFDG|RFCFDG)
(200,fgrp)
(201,flag)
(202,rgrp)
(203,incref(p->fgrp)
(204,pgrp)
(205,p)
(206,p->fgrp = up->fgrp)
(207,p)
(208,p->privatemem)
(209,time)
(210,up)
(211,p->pgrp)
(212,p->egrp)
(213,nchild)
(214,rgrp)
(215,ofg)
(216,if(flag & (RFFDG|RFCFDG)
(217,pgrp)
(218,p)
(219,i = 0)
(220,pid)
(221,RFNAMEG)
(222,pid)
(223,wm)
(224,scallnr)
(225,up->egrp)
(226,RFFDG)
(227,newproc()
(228,p)
(229,p)
(230,fixedpri)
(231,p->notify = up->notify)
(232,)
(233,p)
(234,fgrp)
(235,if(flag & (RFFDG|RFCFDG)
(236,p->pgrp = up->pgrp)
(237,egrp)
(238,p->hang)
(239,NSEG)
(240,up->pgrp = newpgrp()
(241,priority)
(242,note)
(243,hang)
(244,p->note)
(245,RFENVG)
(246,fgrp)
(247,flag)
(248,&p->seglock)
(249,up->rgrp)
(250,up->egrp)
(251,p)
(252,up->pgrp->noattach)
(253,pgrp)
(254,RFENVG|RFCENVG)
(255,sched()
(256,p->procmode = up->procmode)
(257,up)
(258,ofg)
(259,RFFDG|RFCFDG)
(260,flag)
(261,error(Ebadarg)
(262,sizeof(p->time)
(263,if((flag&RFPROC)
(264,p->noteid)
(265,Ebadarg)
(266,up->noteid)
(267,p)
(268,RFMEM)
(269,p->parentpid = up->pid)
(270,wm = up->wired)
(271,up->pgrp)
(272,p->priority = up->basepri)
(273,up->pgrp)
(274,if(flag & RFENVG)
(275,pgrp)
(276,p)
(277,noattach)
(278,p->pgrp->noattach)
(279,up->fgrp)
(280,waserror()
(281,&p->text)
(282,pgrp)
(283,0)
(284,up->procmode)
(285,p->ureg)
(286,rgrp)
(287,flag & RFENVG)
(288,up)
(289,p)
(290,flag)
(291,p->nerrlab = 0)
(292,p->dot)
(293,qlock(&p->seglock)
(294,incref(p->egrp)
(295,up->procctl)
(296,p)
(297,if((flag & (RFFDG|RFCFDG)
(298,flag)
(299,RFFDG|RFCFDG)
(300,egrp)
(301,p)
(302,p->seglock)
(303,up->seg)
(304,p)
(305,pgrp)
(306,if(wm)
(307,p)
(308,)
(309,flag)
(310,up)
(311,up)
(312,)
(313,up->lastnote)
(314,mp)
(315,flag)
(316,RFCENVG)
(317,poperror()
(318,up->dbgreg)
(319,Egrp)
(320,p->dbgreg = 0)
(321,flag & RFREND)
(322,i)
(323,if((flag&RFNOWAIT)
(324,seglock)
(325,pgrp)
(326,flag)
(327,p->seg)
(328,p->time)
(329,kstrdup(&p->text, up->text)
(330,p->procctl)
(331,p)
(332,p)
(333,up)
(334,0)
(335,nexterror()
(336,up->pgrp->noattach)
(337,flag & RFNOMNT)
(338,RFCFDG)
(339,p)
(340,p)
(341,fgrp)
(342,flag)
(343,p->fgrp)
(344,p)
(345,if(flag & (RFNAMEG|RFCNAMEG)
(346,p->pgrp = newpgrp()
(347,up->text)
(348,seg)
(349,up->fgrp = dupfgrp(nil)
(350,wm->machno)
(351,up)
(352,if(waserror()
(353,n)
(354,dupfgrp(ofg)
(355,egrp)
(356,p->rgrp)
(357,up)
(358,RFFDG)
(359,up)
(360,up)
(361,RFNOWAIT)
(362,if(flag & RFNOMNT)
(363,text)
(364,flag)
(365,flag)
(366,flag)
(367,RFNAMEG)
(368,p->kp)
(369,flag&RFPROC)
(370,p)
(371,note)
(372,up)
(373,flag)
(374,flag & (RFENVG|RFCENVG)
(375,up->egrp->ref)
(376,up->nnote)
(377,egrp)
(378,p->pgrp)
(379,RFFDG)
(380,p)
(381,i)
(382,up)
(383,up->hang)
(384,Ebadarg)
(385,up)
(386,rgrp)
(387,flag & (RFNAMEG|RFCNAMEG)
(388,up)
(389,fgrp)
(390,p->seglock)
(391,RFFDG)
(392,up)
(393,up->s)
(394,RFNAMEG|RFCNAMEG)
(395,RFNOTEG)
(396,up)
(397,unlock(&up->exl)
(398,arg)
(399,pid = p->pid)
(400,basepri)
(401,RFCFDG)
(402,memset(p->time, 0, sizeof(p->time)
(403,up)
(404,if(flag & RFENVG)
(405,parentpid)
(406,RFCENVG)
(407,opg = up->pgrp)
(408,flag & (RFENVG|RFCENVG)
(409,0)
(410,up->privatemem)
(411,flag & RFREND)
(412,MACHP(0)
(413,&p->seglock)
(414,Egrp)
(415,ofg = up->fgrp)
(416,flag & RFENVG)
(417,p->seg[i])
(418,up->rgrp)
(419,newpgrp()
(420,time)
(421,p->pid)
(422,if(flag & RFREND)
(423,)
(424,&up->exl)
(425,p)
(426,incref(p->pgrp)
(427,abortion)
(428,p->notify)
(429,up)
(430,up)
(431,1)
(432,p->user)
(433,up)
(434,ref)
(435,user)
(436,RFNOMNT)
(437,up->nchild)
(438,p->rgrp = newrgrp()
(439,Proc_tracesyscall)
(440,up)
(441,p)
(442,closepgrp(opg)
(443,p->kp = 1)
(444,p->scallnr = up->scallnr)
(445,up->noteid)
(446,scallnr)
(447,p->parentpid)
(448,rgrp)
(449,up->mp)
(450,up->egrp)
(451,up)
(452,RFFDG)
(453,seglock)
(454,p->egrp = up->egrp)
(455,procctl)
(456,up->egrp)
(457,up)
(458,pgrp)
(459,if(flag & RFREND)
(460,flag)
(461,slash)
(462,RFMEM|RFNOWAIT)
(463,Proc_tracesyscall)
(464,n = flag & RFMEM)
(465,p)
(466,closeegrp(oeg)
(467,)
(468,up->basepri)
(469,1)
(470,noattach)
(471,waserror()
(472,mp)
(473,0)
(474,p)
(475,fgrp)
(476,flag)
(477,nerrlab)
(478,if(flag & RFFDG)
(479,time)
(480,egrp)
(481,up->exl)
(482,up)
(483,egrp)
(484,pgrp)
(485,egrp)
(486,up->fgrp)
(487,p->dot)
(488,closefgrp(ofg)
(489,p->nnote = up->nnote)
(490,dot)
(491,noattach)
(492,0)
(493,up)
(494,p)
(495,)
(496,flag & RFNAMEG)
(497,noteid)
(498,sizeof(Egrp)
(499,up->egrp)
(500,procfork(p)
(501,p->egrp = smalloc(sizeof(Egrp)
(502,p->egrp)
(503,i++)
(504,p->time)
(505,0)
(506,incref(p->dot)
(507,p)
(508,newpgrp()
(509,privatemem)
(510,flag & (RFFDG|RFCFDG)
(511,dupseg(up->seg, i, n)
(512,up)
(513,p->fgrp)
(514,p->parent)
(515,opg)
(516,up->wired)
(517,0)
(518,up)
(519,p->noswap = up->noswap)
(520,p->lastnote = up->lastnote)
(521,up->noswap)
(522,0)
(523,oeg)
(524,(flag & (RFENVG|RFCENVG)
(525,up)
(526,dupfgrp(nil)
(527,p)
(528,procmode)
(529,ofg)
(530,)
(531,if((flag&RFNOTEG)
(532,up->pgrp)
(533,parent)
(534,flag & (RFNAMEG|RFCNAMEG)
(535,user)
(536,RFCNAMEG)
(537,up)
(538,flag & RFNOMNT)
(539,p->pgrp->noattach)
(540,pgrp)
(541,p)
(542,nnote)
(543,)
(544,kp)
(545,pidalloc(0)
(546,0)
(547,dot)
(548,flag)
(549,flag&RFNOTEG)
(550,newrgrp()
(551,up->basepri)
(552,pid)
(553,pgrp)
(554,flag & RFMEM)
(555,if(flag & RFNOMNT)
(556,lastnote)
(557,Ebadarg)
(558,qunlock(&p->seglock)
(559,1)
(560,&p->seglock)
(561,up)
(562,n)
(563,i)
(564,p->lastnote)
(565,RFCENVG)
(566,flag & (RFNAMEG|RFCNAMEG)
(567,basepri)
(568,0)
(569,p->dbgreg)
(570,RFNOWAIT)
(571,return 0;)
(572,RFNAMEG)
(573,up->rgrp = newrgrp()
(574,poperror()
(575,fixedpri)
(576,p)
(577,p->nnote)
(578,up->exl)
(579,up->pgrp)
(580,up)
(581,egrp)
(582,fgrp)
(583,fgrp)
(584,p->parent = up)
(585,RFNAMEG)
(586,p)
(587,if(flag & (RFNAMEG|RFCNAMEG)
(588,up)
(589,p->s = up->s)
(590,p->text)
(591,oeg)
(592,if((flag & (RFENVG|RFCENVG)
(593,flag)
(594,kstrdup(&p->user, up->user)
(595,up)
(596,p->pgrp->noattach = up->pgrp->noattach)
(597,RFREND)
(598,oeg)
(599,p->basepri)
(600,i)
(601,p->fixedpri = up->fixedpri)
(602,p->procctl = Proc_tracesyscall)
(603,up->procctl == Proc_tracesyscall)
(604,up)
(605,p->time)
(606,seg)
(607,p->pgrp)
(608,notify)
(609,i)
(610,up->seg[i])
(611,(flag&RFNOWAIT)
(612,flag & (RFFDG|RFCFDG)
(613,p->slash = up->slash)
(614,sizeof(p->note)
(615,wm)
(616,ureg)
(617,notify)
(618,p)
(619,ticks)
(620,up)
(621,)
(622,)
(623,p)
(624,)
(625,p->time[TReal])
(626,wm)
(627,flag & (RFMEM|RFNOWAIT)
(628,incref(up->rgrp)
(629,up)
(630,RFCNAMEG)
(631,flag & (RFENVG|RFCENVG)
(632,p->noteid = up->noteid)
(633,if(flag & RFFDG)
(634,egrp)
(635,)
(636,)
(637,p)
(638,n)
(639,flag)
(640,up)
(641,up->noteid = pidalloc(0)
(642,up)
(643,RFCNAMEG)
(644,slash)
(645,nil)
(646,(flag&RFPROC)
(647,memmove(p->note, up->note, sizeof(p->note)
(648,p->hang = up->hang)
(649,RFENVG)
(650,1)
(651,flag & RFNOTEG)
(652,RFPROC)
(653,p->slash)
(654,RFREND)
(655,sizeof(Egrp)
(656,(flag&RFNOTEG)
(657,opg)
(658,p->egrp->ref)
(659,noswap)
(660,up)
(661,p)
(662,flag&RFNOWAIT)
(663,up->pgrp->noattach)
(664,fgrp)
(665,pgrp)
(666,return pid;)
(667,if(flag & (RFMEM|RFNOWAIT)
(668,up->fgrp)
(669,seg)
(670,dbgreg)
(671,kprocchild(p, abortion, 0)
(672,pid)
(673,flag)
(674,RFNAMEG|RFCNAMEG)
(675,exl)
(676,p->mp = up->mp)
(677,p->noswap)
(678,p)
(679,dupfgrp(nil)
(680,smalloc(sizeof(Egrp)
(681,up->pgrp->noattach = 1)
(682,0)
(683,flag)
(684,RFCFDG)
(685,up->notify)
(686,up->pgrp)
(687,p->fgrp = dupfgrp(nil)
(688,(flag & (RFNAMEG|RFCNAMEG)
(689,p)
(690,p)
(691,ready(p)
(692,pid)
(693,up)
(694,up->pgrp)
(695,p->privatemem = up->privatemem)
(696,p->egrp)
(697,p)
(698,p->scallnr)
(699,up->slash)
(700,p->egrp->ref = 1)
(701,noteid)
(702,error(Ebadarg)
(703,envcpy(up->egrp, oeg)
(704,up->rgrp)
(705,up->dot)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^