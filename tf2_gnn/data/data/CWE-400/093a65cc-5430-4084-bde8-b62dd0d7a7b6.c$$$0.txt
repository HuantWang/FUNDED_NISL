-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(staticReturnsTrue())
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
44,45
44,46
44,47
45,46
45,47
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
58,59
58,60
58,61
58,62
58,63
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
69,70
71,72
71,73
72,73
74,75
75,76
75,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
92,95
93,94
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
109,110
111,112
112,113
113,114
113,115
114,115
-----nextToken-----
2,4,9,11,15,16,20,25,27,28,31,35,40,42,43,48,51,53,56,57,62,65,67,70,73,76,77,81,83,88,90,94,96,98,102,104,108,110,115,116
-----computeFrom-----
13,14
13,15
45,46
45,47
46,47
46,48
54,55
54,56
60,61
60,62
71,72
71,73
79,80
79,81
-----guardedBy-----
53,98
56,73
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticReturnsTrue())    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticReturnsTrue())    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(staticReturnsTrue())    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(49,32,0)
(17,53,0)
(0,24,0)
(37,24,0)
(6,36,0)
(48,25,0)
(41,17,0)
(7,55,0)
(47,29,0)
(35,9,0)
(23,36,0)
(27,53,0)
(22,45,0)
(3,29,0)
(27,17,0)
(16,25,0)
(17,23,0)
(46,17,0)
(14,37,0)
(36,23,0)
(14,45,0)
(18,2,0)
(31,25,0)
(2,18,0)
(23,17,0)
(40,24,0)
(24,37,0)
(10,28,0)
(50,41,0)
(26,51,0)
(21,51,0)
(7,48,0)
(8,6,0)
(45,14,0)
(37,14,0)
(29,17,0)
(36,6,0)
(23,19,0)
(12,46,0)
(30,2,0)
(18,13,0)
(34,27,0)
(38,53,0)
(25,51,0)
(19,23,0)
(24,25,0)
(42,17,0)
(29,53,0)
(41,53,0)
(33,48,0)
(5,51,0)
(28,52,0)
(14,25,0)
(54,49,0)
(39,7,0)
(9,6,0)
(44,46,0)
(6,9,0)
(4,49,0)
(15,14,0)
(6,25,0)
(48,7,0)
(1,7,0)
(1,11,1)
(11,25,1)
(35,8,1)
(2,30,1)
(20,11,1)
(23,36,1)
(0,40,1)
(40,14,1)
(12,44,1)
(20,7,1)
(43,28,1)
(23,19,1)
(3,46,1)
(44,17,1)
(24,0,1)
(29,17,1)
(7,48,1)
(43,27,1)
(6,25,1)
(22,15,1)
(39,1,1)
(9,35,1)
(46,17,1)
(24,25,1)
(37,14,1)
(47,3,1)
(8,42,1)
(41,17,1)
(27,34,1)
(15,20,1)
(17,23,1)
(6,9,1)
(33,39,1)
(25,31,1)
(46,12,1)
(42,37,1)
(3,18,1)
(18,2,1)
(50,29,1)
(41,50,1)
(36,6,1)
(34,41,1)
(48,25,1)
(31,16,1)
(30,46,1)
(28,10,1)
(10,37,1)
(14,25,1)
(29,47,1)
(37,24,1)
(27,17,1)
(48,33,1)
(43,20,1)
(14,45,1)
(45,22,1)
(14,25,2)
(1,11,2)
(42,37,2)
(39,11,2)
(36,37,2)
(0,14,2)
(6,25,2)
(37,14,2)
(41,17,2)
(23,36,2)
(37,20,2)
(2,46,2)
(6,37,2)
(29,17,2)
(45,20,2)
(24,25,2)
(12,37,2)
(47,37,2)
(46,37,2)
(41,37,2)
(17,23,2)
(9,37,2)
(23,19,2)
(35,37,2)
(23,37,2)
(6,9,2)
(37,24,2)
(46,17,2)
(36,6,2)
(18,2,2)
(30,46,2)
(40,14,2)
(14,20,2)
(10,37,2)
(7,48,2)
(7,11,2)
(28,37,2)
(17,37,2)
(8,37,2)
(27,37,2)
(15,20,2)
(3,37,2)
(48,11,2)
(50,37,2)
(44,37,2)
(33,11,2)
(18,46,2)
(22,20,2)
(34,37,2)
(14,45,2)
(48,25,2)
(29,37,2)
(27,17,2)
(24,14,2)
-----------------------------------
(0,100)
(1,stdin)
(2,-1)
(3,myString)
(4,if (data > strlen(HELLO_STRING)
(5,data)
(6,data*sizeof(char)
(7,fscanf(stdin, "%zu", &data)
(8,data)
(9,sizeof(char)
(10,"Input is less than the length of the source string or too large")
(11,staticReturnsTrue()
(12,NULL)
(13,)
(14,data > strlen(HELLO_STRING)
(15,data)
(16,data)
(17,myString = (char *)
(18,exit(-1)
(19,char *)
(20,staticReturnsTrue()
(21,if(staticReturnsTrue()
(22,HELLO_STRING)
(23,(char *)
(24,data < 100)
(25,data = 0)
(26,if(staticReturnsTrue()
(27,free(myString)
(28,printLine("Input is less than the length of the source string or too large")
(29,strcpy(myString, HELLO_STRING)
(30,1)
(31,0)
(32,)
(33,data)
(34,myString)
(35,char)
(36,malloc(data*sizeof(char)
(37,data > strlen(HELLO_STRING)
(38,if (myString == NULL)
(39,"%zu")
(40,data)
(41,printLine(myString)
(42,myString)
(43,RET)
(44,myString)
(45,strlen(HELLO_STRING)
(46,myString == NULL)
(47,HELLO_STRING)
(48,&data)
(49,)
(50,myString)
(51,)
(52,)
(53,)
(54,myString)
(55,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^