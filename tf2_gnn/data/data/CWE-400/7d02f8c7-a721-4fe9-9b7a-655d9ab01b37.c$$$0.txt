-----label-----
1
-----code-----
int open(const char *path, int flags, ...)
{
	struct rmonitor_msg msg;

	va_list ap;
	int     fd;
	int     mode;

	typeof(open) *original_open = dlsym(RTLD_NEXT, "open");

	va_start(ap, flags);
	mode = va_arg(ap, int);
	va_end(ap);

	debug(D_DEBUG, "open %s from %d.\n", path, getpid());

	PUSH_ERRNO
		fd = original_open(path, flags, mode);
	POP_ERRNO(msg)

	if(fd > -1)
	{

		if(open_for_writing(fd)) {
			msg.type   = OPEN_OUTPUT;
		} else {
			msg.type   = OPEN_INPUT;
		}
	}

	msg.origin = getpid();
	strcpy(msg.data.s, path);

	send_monitor_msg(&msg);

	return fd;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
12,13
14,15
14,16
14,17
14,18
14,19
14,20
14,21
14,22
14,23
14,24
14,25
14,26
14,27
14,28
14,29
14,30
14,31
15,16
16,17
16,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
30,31
32,33
33,34
33,35
35,36
37,38
38,39
38,40
39,40
40,41
41,42
43,44
43,45
43,46
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
54,57
55,56
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
69,74
70,71
72,73
75,76
77,78
78,79
80,81
81,82
81,83
82,83
84,85
84,86
86,87
87,88
87,89
87,90
87,91
88,89
90,91
92,93
94,95
96,97
97,98
97,99
98,99
100,101
101,102
103,104
104,105
104,106
105,106
105,107
106,107
108,109
110,111
111,112
111,113
111,114
112,113
112,114
113,114
115,116
117,118
118,119
119,120
119,121
120,121
120,122
121,122
124,125
126,127
127,128
128,129
128,130
129,130
129,131
130,131
133,134
135,136
136,137
136,138
137,138
137,139
138,139
141,142
142,143
144,145
145,146
145,147
145,148
146,147
148,149
148,150
149,150
149,151
150,151
154,155
156,157
157,158
157,159
158,159
160,161
161,162
163,164
164,165
-----nextToken-----
2,4,6,8,9,11,13,18,20,24,26,29,31,34,36,42,44,45,49,51,52,56,58,60,65,67,71,73,74,76,79,83,85,89,91,93,95,99,102,107,109,114,116,122,123,125,131,132,134,139,140,143,147,151,152,153,155,159,162,165
-----computeFrom-----
105,106
105,107
119,120
119,121
128,129
128,130
136,137
136,138
-----guardedBy-----
107,116
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;UnaryExpression;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int open(const char *path, int flags, ...){	struct rmonitor_msg msg;	va_list ap;	int     fd;	int     mode;	typeof(open) *original_open = dlsym(RTLD_NEXT, "open");	va_start(ap, flags);	mode = va_arg(ap, int);	va_end(ap);	debug(D_DEBUG, "open %s from %d.\n", path, getpid());	PUSH_ERRNO		fd = original_open(path, flags, mode);	POP_ERRNO(msg)	if(fd > -1)	{		if(open_for_writing(fd)) {			msg.type   = OPEN_OUTPUT;		} else {			msg.type   = OPEN_INPUT;		}	}	msg.origin = getpid();	strcpy(msg.data.s, path);	send_monitor_msg(&msg);	return fd;}
int
open(const char *path, int flags, ...)
open
const char *path
const char
*path
*
path
int flags
int
flags
flags
{	struct rmonitor_msg msg;	va_list ap;	int     fd;	int     mode;	typeof(open) *original_open = dlsym(RTLD_NEXT, "open");	va_start(ap, flags);	mode = va_arg(ap, int);	va_end(ap);	debug(D_DEBUG, "open %s from %d.\n", path, getpid());	PUSH_ERRNO		fd = original_open(path, flags, mode);	POP_ERRNO(msg)	if(fd > -1)	{		if(open_for_writing(fd)) {			msg.type   = OPEN_OUTPUT;		} else {			msg.type   = OPEN_INPUT;		}	}	msg.origin = getpid();	strcpy(msg.data.s, path);	send_monitor_msg(&msg);	return fd;}
struct rmonitor_msg msg;
struct rmonitor_msg msg;
struct rmonitor_msg
rmonitor_msg
msg
msg
va_list ap;
va_list ap;
va_list
va_list
ap
ap
int     fd;
int     fd;
int
fd
fd
int     mode;
int     mode;
int
mode
mode
typeof(open) *original_open = dlsym(RTLD_NEXT, "open");
typeof(open) *original_open = dlsym(RTLD_NEXT, "open");
typeof(open)
(open)
open
open
*original_open = dlsym(RTLD_NEXT, "open")
*
original_open
= dlsym(RTLD_NEXT, "open")
dlsym(RTLD_NEXT, "open")
dlsym
dlsym
RTLD_NEXT
RTLD_NEXT
"open"
va_start(ap, flags);
va_start(ap, flags)
va_start
va_start
ap
ap
flags
flags
mode = va_arg(ap, int);
va_end(ap);
va_end(ap)
va_end
va_end
ap
ap
debug(D_DEBUG, "open %s from %d.\n", path, getpid());
debug(D_DEBUG, "open %s from %d.\n", path, getpid())
debug
debug
D_DEBUG
D_DEBUG
"open %s from %d.\n"
path
path
getpid()
getpid
getpid
PUSH_ERRNO		fd = original_open(path, flags, mode);
PUSH_ERRNO		fd = original_open(path, flags, mode);
PUSH_ERRNO
PUSH_ERRNO
fd = original_open(path, flags, mode)
fd
= original_open(path, flags, mode)
original_open(path, flags, mode)
original_open
original_open
path
path
flags
flags
mode
mode
POP_ERRNO(msg)
POP_ERRNO(msg)
POP_ERRNO
POP_ERRNO
(msg)
msg
msg
)
if(fd > -1)	{		if(open_for_writing(fd)) {			msg.type   = OPEN_OUTPUT;		} else {			msg.type   = OPEN_INPUT;		}	}
fd > -1
fd
fd
-1
1
{		if(open_for_writing(fd)) {			msg.type   = OPEN_OUTPUT;		} else {			msg.type   = OPEN_INPUT;		}	}
if(open_for_writing(fd)) {			msg.type   = OPEN_OUTPUT;		} else {			msg.type   = OPEN_INPUT;		}
open_for_writing(fd)
open_for_writing
open_for_writing
fd
fd
{			msg.type   = OPEN_OUTPUT;		}
msg.type   = OPEN_OUTPUT;
msg.type   = OPEN_OUTPUT
msg.type
msg
msg
type
OPEN_OUTPUT
OPEN_OUTPUT
{			msg.type   = OPEN_INPUT;		}
msg.type   = OPEN_INPUT;
msg.type   = OPEN_INPUT
msg.type
msg
msg
type
OPEN_INPUT
OPEN_INPUT
msg.origin = getpid();
msg.origin = getpid()
msg.origin
msg
msg
origin
getpid()
getpid
getpid
strcpy(msg.data.s, path);
strcpy(msg.data.s, path)
strcpy
strcpy
msg.data.s
msg.data
msg
msg
data
s
path
path
send_monitor_msg(&msg);
send_monitor_msg(&msg)
send_monitor_msg
send_monitor_msg
&msg
msg
msg
return fd;
fd
fd
-----joern-----
(68,15,0)
(17,74,0)
(13,46,0)
(70,53,0)
(19,66,0)
(66,54,0)
(16,53,0)
(40,23,0)
(74,66,0)
(25,23,0)
(29,54,0)
(36,12,0)
(5,36,0)
(25,54,0)
(47,59,0)
(37,33,0)
(51,20,0)
(59,11,0)
(9,61,0)
(48,29,0)
(27,29,0)
(26,55,0)
(65,46,0)
(71,54,0)
(7,54,0)
(30,60,0)
(24,54,0)
(21,10,0)
(10,11,0)
(60,4,0)
(57,63,0)
(66,74,0)
(28,54,0)
(57,54,0)
(2,23,0)
(64,59,0)
(39,20,0)
(36,54,0)
(42,21,0)
(60,6,0)
(38,52,0)
(58,33,0)
(22,0,0)
(0,54,0)
(62,55,0)
(29,33,0)
(45,36,0)
(33,12,0)
(32,54,0)
(4,60,0)
(18,60,0)
(63,57,0)
(3,17,0)
(1,69,0)
(44,10,0)
(8,61,0)
(55,29,0)
(67,72,0)
(43,26,0)
(41,17,0)
(60,54,0)
(61,68,0)
(75,48,0)
(73,33,0)
(55,26,0)
(16,54,0)
(53,16,0)
(66,6,0)
(31,25,0)
(0,29,0)
(33,25,0)
(69,54,0)
(35,54,0)
(11,54,0)
(50,74,0)
(56,68,0)
(33,29,0)
(74,17,0)
(20,57,0)
(23,25,0)
(33,6,0)
(34,60,0)
(46,67,0)
(10,21,0)
(49,67,0)
(11,59,0)
(14,0,0)
(22,0,1)
(9,48,1)
(44,21,1)
(23,40,1)
(33,6,1)
(43,62,1)
(57,63,1)
(63,20,1)
(74,50,1)
(25,23,1)
(41,57,1)
(37,73,1)
(13,48,1)
(50,17,1)
(39,51,1)
(0,14,1)
(58,27,1)
(51,67,1)
(62,29,1)
(5,11,1)
(2,31,1)
(64,10,1)
(49,46,1)
(20,39,1)
(10,44,1)
(66,74,1)
(30,18,1)
(61,8,1)
(70,66,1)
(51,55,1)
(74,17,1)
(55,26,1)
(45,5,1)
(36,45,1)
(10,21,1)
(19,74,1)
(66,6,1)
(48,75,1)
(0,29,1)
(33,12,1)
(14,16,1)
(67,49,1)
(29,33,1)
(60,4,1)
(56,61,1)
(21,42,1)
(16,53,1)
(66,19,1)
(48,29,1)
(36,12,1)
(3,41,1)
(60,6,1)
(40,2,1)
(68,56,1)
(46,65,1)
(18,69,1)
(1,25,1)
(26,43,1)
(8,9,1)
(65,13,1)
(75,55,1)
(53,70,1)
(11,59,1)
(33,25,1)
(4,34,1)
(59,47,1)
(73,58,1)
(34,30,1)
(27,60,1)
(69,1,1)
(47,64,1)
(51,68,1)
(31,36,1)
(33,37,1)
(17,3,1)
(55,29,1)
(0,29,2)
(66,6,2)
(55,29,2)
(68,48,2)
(56,48,2)
(65,48,2)
(48,29,2)
(74,17,2)
(75,55,2)
(8,48,2)
(16,53,2)
(66,74,2)
(48,55,2)
(33,6,2)
(13,48,2)
(46,48,2)
(67,48,2)
(10,21,2)
(25,23,2)
(9,48,2)
(61,48,2)
(60,4,2)
(49,48,2)
(11,59,2)
(33,12,2)
(60,6,2)
(36,12,2)
(22,0,2)
(33,25,2)
(55,26,2)
(29,33,2)
(57,63,2)
-----------------------------------
(0,return fd;)
(1,ap)
(2,ap)
(3,data)
(4,getpid()
(5,ap)
(6,const char *path)
(7,if(fd > -1)
(8,type)
(9,msg)
(10,typeof(open)
(11,typeof(open)
(12,int flags)
(13,msg)
(14,fd)
(15,)
(16,send_monitor_msg(&msg)
(17,msg.data)
(18,D_DEBUG)
(19,path)
(20,msg.origin)
(21,typeof(open)
(22,RET)
(23,va_arg(ap, int)
(24,ap)
(25,mode = va_arg(ap, int)
(26,-1)
(27,fd)
(28,fd)
(29,fd = original_open(path, flags, mode)
(30,"open %s from %d.\\n")
(31,mode)
(32,msg)
(33,original_open(path, flags, mode)
(34,path)
(35,fd)
(36,va_start(ap, flags)
(37,mode)
(38,if(open_for_writing(fd)
(39,origin)
(40,int)
(41,msg)
(42,open)
(43,1)
(44,original_open)
(45,flags)
(46,msg.type)
(47,"open")
(48,open_for_writing(fd)
(49,OPEN_INPUT)
(50,s)
(51,msg)
(52,)
(53,&msg)
(54,)
(55,fd > -1)
(56,OPEN_OUTPUT)
(57,msg.origin = getpid()
(58,path)
(59,dlsym(RTLD_NEXT, "open")
(60,debug(D_DEBUG, "open %s from %d.\\n", path, getpid()
(61,msg.type)
(62,fd)
(63,getpid()
(64,RTLD_NEXT)
(65,type)
(66,strcpy(msg.data.s, path)
(67,msg.type   = OPEN_INPUT)
(68,msg.type   = OPEN_OUTPUT)
(69,va_end(ap)
(70,msg)
(71,mode)
(72,)
(73,flags)
(74,msg.data.s)
(75,fd)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^