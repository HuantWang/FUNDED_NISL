-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_01_bad()
{
    twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
70,71
71,72
71,73
72,73
74,75
75,76
75,77
76,77
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,57,58,59,60,66,67,68,69,73,77,78,79
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
53,54
53,55
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_01_bad(){    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_01_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_01_bad
{    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
;
-----joern-----
(14,16,0)
(6,20,0)
(17,30,0)
(6,12,0)
(3,5,0)
(11,7,0)
(22,15,0)
(27,36,0)
(41,18,0)
(25,5,0)
(32,7,0)
(24,11,0)
(25,32,0)
(15,22,0)
(37,1,0)
(13,15,0)
(30,11,0)
(8,32,0)
(36,19,0)
(19,40,0)
(31,18,0)
(5,31,0)
(18,41,0)
(36,31,0)
(15,41,0)
(34,4,0)
(40,7,0)
(29,31,0)
(10,18,0)
(19,36,0)
(2,36,0)
(0,7,0)
(21,5,0)
(38,1,0)
(4,7,0)
(40,19,0)
(28,20,0)
(16,31,0)
(33,25,0)
(9,22,0)
(18,10,0)
(31,7,0)
(1,31,0)
(35,7,0)
(20,6,0)
(23,4,0)
(5,25,0)
(1,30,0)
(30,1,0)
(18,31,0)
(41,15,0)
(39,16,0)
(31,18,1)
(16,14,1)
(16,31,1)
(28,16,1)
(14,39,1)
(38,37,1)
(40,19,1)
(36,2,1)
(11,24,1)
(25,5,1)
(2,27,1)
(32,8,1)
(4,23,1)
(29,4,1)
(1,31,1)
(30,17,1)
(9,13,1)
(3,21,1)
(33,5,1)
(19,36,1)
(27,32,1)
(1,38,1)
(25,33,1)
(5,3,1)
(41,15,1)
(26,40,1)
(24,30,1)
(20,28,1)
(23,34,1)
(37,16,1)
(39,31,1)
(22,9,1)
(18,41,1)
(5,31,1)
(8,25,1)
(18,10,1)
(30,1,1)
(17,1,1)
(13,29,1)
(36,31,1)
(21,11,1)
(15,22,1)
(37,6,1)
(6,20,1)
(36,31,2)
(5,31,2)
(18,41,2)
(30,1,2)
(16,31,2)
(6,20,2)
(6,16,2)
(28,16,2)
(19,36,2)
(40,19,2)
(18,10,2)
(20,16,2)
(25,5,2)
(15,22,2)
(31,18,2)
(41,15,2)
(1,31,2)
-----------------------------------
(0,if (data == NULL)
(1,data[0])
(2,0)
(3,0)
(4,data = NULL)
(5,data[0])
(6,exit(-1)
(7,)
(8,0)
(9,twoIntsStruct)
(10,twoIntsStruct *)
(11,data[0].intOne = 0)
(12,)
(13,100)
(14,NULL)
(15,100*sizeof(twoIntsStruct)
(16,data == NULL)
(17,intOne)
(18,(twoIntsStruct *)
(19,&data[0])
(20,-1)
(21,data)
(22,sizeof(twoIntsStruct)
(23,NULL)
(24,0)
(25,data[0].intTwo)
(26,RET)
(27,data)
(28,1)
(29,data)
(30,data[0].intOne)
(31,data = (twoIntsStruct *)
(32,data[0].intTwo = 0)
(33,intTwo)
(34,data)
(35,data)
(36,data[0])
(37,data)
(38,0)
(39,data)
(40,printStructLine(&data[0])
(41,malloc(100*sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^