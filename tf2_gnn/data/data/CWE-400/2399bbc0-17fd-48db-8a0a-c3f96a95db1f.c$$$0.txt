-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
36,39
36,40
37,38
38,39
38,40
39,40
41,42
41,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
49,52
52,53
53,54
55,56
56,57
56,58
58,59
58,60
58,61
61,62
63,64
63,65
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
73,74
73,75
73,76
73,77
74,75
75,76
75,77
76,77
78,79
78,80
78,81
79,80
81,82
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
92,93
92,94
93,94
96,97
96,98
96,99
96,100
97,98
98,99
98,100
99,100
102,103
102,104
103,104
105,106
105,107
106,107
106,108
107,108
110,111
112,113
113,114
115,116
116,117
116,118
117,118
117,119
118,119
118,120
119,120
121,122
123,124
123,125
123,126
123,127
123,128
124,125
126,127
128,129
129,130
129,131
132,133
132,134
133,134
135,136
137,138
139,140
140,141
140,142
141,142
144,145
144,146
145,146
147,148
148,149
149,150
149,151
150,151
152,153
-----nextToken-----
2,4,8,10,14,16,20,21,26,29,33,34,40,42,44,48,50,51,54,57,59,60,62,67,68,71,72,77,80,82,83,87,89,94,95,100,101,104,108,109,111,114,120,122,125,127,130,131,134,136,138,142,143,146,151,153
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
31,32
31,33
64,65
64,66
65,66
65,67
69,70
69,71
75,76
75,77
85,86
85,87
98,99
98,100
102,103
102,104
117,118
117,119
-----guardedBy-----
71,111
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(27,62,0)
(64,29,0)
(3,51,0)
(79,47,0)
(4,10,0)
(37,62,0)
(29,15,0)
(56,31,0)
(47,28,0)
(33,67,0)
(54,41,0)
(37,45,0)
(65,51,0)
(53,40,0)
(73,45,0)
(45,73,0)
(45,4,0)
(59,25,0)
(43,72,0)
(52,31,0)
(22,58,0)
(5,44,0)
(29,4,0)
(23,31,0)
(82,10,0)
(18,72,0)
(78,61,0)
(24,47,0)
(14,5,0)
(21,71,0)
(50,63,0)
(74,62,0)
(68,52,0)
(8,9,0)
(38,45,0)
(75,37,0)
(48,26,0)
(13,67,0)
(26,61,0)
(42,28,0)
(31,47,0)
(4,76,0)
(0,25,0)
(16,10,0)
(12,29,0)
(15,29,0)
(63,62,0)
(1,72,0)
(76,4,0)
(32,71,0)
(49,0,0)
(19,61,0)
(46,57,0)
(0,4,0)
(28,26,0)
(40,61,0)
(55,24,0)
(45,37,0)
(11,70,0)
(80,10,0)
(3,31,0)
(31,70,0)
(30,61,0)
(70,31,0)
(41,35,0)
(60,76,0)
(15,0,0)
(77,61,0)
(41,47,0)
(39,28,0)
(34,24,0)
(2,40,0)
(31,3,0)
(61,83,0)
(69,0,0)
(81,26,0)
(29,25,0)
(0,15,0)
(6,9,0)
(45,25,0)
(9,61,0)
(28,47,0)
(25,59,0)
(25,7,0)
(47,72,0)
(17,4,0)
(51,3,0)
(31,52,0)
(66,25,0)
(31,47,1)
(22,3,1)
(45,73,1)
(70,11,1)
(58,22,1)
(33,4,1)
(37,62,1)
(36,15,1)
(63,50,1)
(12,64,1)
(67,13,1)
(31,70,1)
(66,67,1)
(8,6,1)
(29,4,1)
(28,26,1)
(4,76,1)
(53,9,1)
(31,23,1)
(42,39,1)
(56,51,1)
(45,25,1)
(64,0,1)
(45,4,1)
(15,29,1)
(40,2,1)
(26,81,1)
(34,55,1)
(29,25,1)
(75,63,1)
(74,24,1)
(45,38,1)
(27,74,1)
(0,69,1)
(0,4,1)
(20,37,1)
(2,53,1)
(9,8,1)
(68,70,1)
(3,31,1)
(79,15,1)
(60,17,1)
(15,0,1)
(24,34,1)
(5,14,1)
(50,58,1)
(59,66,1)
(32,25,1)
(38,75,1)
(14,24,1)
(36,71,1)
(31,52,1)
(62,27,1)
(41,47,1)
(25,59,1)
(36,41,1)
(81,48,1)
(54,20,1)
(69,49,1)
(49,26,1)
(48,40,1)
(21,32,1)
(11,56,1)
(37,45,1)
(13,33,1)
(52,68,1)
(28,42,1)
(74,5,1)
(75,62,1)
(63,62,1)
(6,71,1)
(41,54,1)
(0,25,1)
(65,37,1)
(55,47,1)
(36,20,1)
(71,21,1)
(39,79,1)
(3,51,1)
(51,65,1)
(23,52,1)
(29,12,1)
(76,60,1)
(32,67,1)
(47,28,1)
(24,47,1)
(50,3,1)
(3,31,2)
(41,20,2)
(25,67,2)
(0,4,2)
(4,76,2)
(63,37,2)
(69,71,2)
(45,25,2)
(79,15,2)
(15,29,2)
(24,47,2)
(29,4,2)
(70,37,2)
(40,71,2)
(45,15,2)
(22,3,2)
(8,71,2)
(45,4,2)
(11,37,2)
(37,15,2)
(0,71,2)
(47,15,2)
(75,37,2)
(50,37,2)
(0,25,2)
(24,15,2)
(59,67,2)
(34,15,2)
(29,25,2)
(31,70,2)
(31,52,2)
(58,3,2)
(52,37,2)
(74,15,2)
(81,71,2)
(42,15,2)
(51,37,2)
(23,37,2)
(37,45,2)
(3,51,2)
(39,15,2)
(27,15,2)
(15,71,2)
(64,0,2)
(41,47,2)
(65,37,2)
(5,24,2)
(38,15,2)
(25,59,2)
(49,71,2)
(47,28,2)
(54,20,2)
(29,0,2)
(26,71,2)
(3,37,2)
(28,26,2)
(55,15,2)
(53,71,2)
(20,15,2)
(66,67,2)
(2,71,2)
(31,37,2)
(9,71,2)
(6,71,2)
(12,0,2)
(68,37,2)
(63,62,2)
(56,37,2)
(28,15,2)
(15,0,2)
(38,37,2)
(14,24,2)
(37,62,2)
(37,37,2)
(75,15,2)
(62,15,2)
(45,37,2)
(45,73,2)
(48,71,2)
(31,47,2)
-----------------------------------
(0,count > 0)
(1,for (i = 0; i < (size_t)
(2,NULL)
(3,strlen(SENTENCE)
(4,count = -1)
(5,exit(1)
(6,i)
(7,)
(8,0)
(9,i = 0)
(10,)
(11,char)
(12,20)
(13,5)
(14,1)
(15,count > 0 && count <= 20)
(16,if(STATIC_CONST_FIVE==5)
(17,count)
(18,if (pFile == NULL)
(19,i)
(20,pFile)
(21,5)
(22,1)
(23,pFile)
(24,pFile == NULL)
(25,count = RAND32()
(26,*filename = "output_good.txt")
(27,0)
(28,fopen(filename, "w+")
(29,count <= 20)
(30,if (count > 0 && count <= 20)
(31,fwrite(SENTENCE, sizeof(char)
(32,STATIC_CONST_FIVE)
(33,STATIC_CONST_FIVE)
(34,NULL)
(35,)
(36,RET)
(37,i < (size_t)
(38,count)
(39,filename)
(40,*pFile = NULL)
(41,fclose(pFile)
(42,"w+")
(43,if (pFile)
(44,)
(45,(size_t)
(46,if (strlen(SENTENCE)
(47,pFile = fopen(filename, "w+")
(48,filename)
(49,count)
(50,i)
(51,strlen(SENTENCE)
(52,strlen(SENTENCE)
(53,pFile)
(54,pFile)
(55,pFile)
(56,SENTENCE)
(57,)
(58,exit(1)
(59,RAND32()
(60,1)
(61,)
(62,i = 0)
(63,i++)
(64,count)
(65,SENTENCE)
(66,count)
(67,STATIC_CONST_FIVE==5)
(68,SENTENCE)
(69,0)
(70,sizeof(char)
(71,STATIC_CONST_FIVE==5)
(72,)
(73,size_t)
(74,i)
(75,i)
(76,-1)
(77,filename)
(78,pFile)
(79,pFile)
(80,count)
(81,"output_good.txt")
(82,if(STATIC_CONST_FIVE==5)
(83,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^