-----label-----
0
-----code-----
static void goodB2G2()
{
    char * data;
    data = NULL;
    if(staticTrue)
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    if(staticTrue)
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
26,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
49,50
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,11,15,17,20,25,27,28,30,34,37,39,43,45,48,53,55
-----computeFrom-----
13,14
13,15
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    char * data;    data = NULL;    if(staticTrue)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(staticTrue)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    char * data;    data = NULL;    if(staticTrue)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(staticTrue)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
staticTrue
staticTrue
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticTrue)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
staticTrue
staticTrue
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(5,7,0)
(14,1,0)
(0,1,0)
(8,20,0)
(20,7,0)
(24,7,0)
(19,6,0)
(13,6,0)
(8,19,0)
(1,6,0)
(18,20,0)
(8,23,0)
(16,6,0)
(9,8,0)
(0,19,0)
(12,1,0)
(10,0,0)
(6,22,0)
(19,0,0)
(3,7,0)
(11,19,0)
(21,20,0)
(13,19,0)
(4,13,0)
(9,15,1)
(15,13,1)
(10,11,1)
(15,2,1)
(19,0,1)
(8,20,1)
(2,20,1)
(8,9,1)
(4,19,1)
(12,2,1)
(11,1,1)
(0,10,1)
(18,21,1)
(20,18,1)
(0,1,1)
(17,15,1)
(13,4,1)
(17,8,1)
(14,12,1)
(13,19,1)
(1,14,1)
(8,19,1)
(19,2,2)
(0,1,2)
(14,2,2)
(0,2,2)
(4,2,2)
(8,20,2)
(10,2,2)
(8,19,2)
(11,2,2)
(1,2,2)
(9,15,2)
(19,0,2)
(8,15,2)
(13,2,2)
(12,2,2)
(13,19,2)
-----------------------------------
(0,strdup(myString)
(1,myString[] = "myString")
(2,staticTrue)
(3,if(staticTrue)
(4,data)
(5,if(staticTrue)
(6,)
(7,)
(8,free(data)
(9,data)
(10,myString)
(11,data)
(12,myString)
(13,printLine(data)
(14,"myString")
(15,staticTrue)
(16,myString)
(17,RET)
(18,NULL)
(19,data = strdup(myString)
(20,data = NULL)
(21,data)
(22,)
(23,)
(24,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^