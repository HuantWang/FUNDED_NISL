-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(globalTrue)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
20,21
21,22
22,23
22,24
23,24
26,27
27,28
28,29
28,30
29,30
32,33
32,34
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,19,24,25,30,31,34,39,41,42,46,49,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110
-----computeFrom-----
13,14
13,15
28,29
28,30
44,45
44,46
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
51,92
46,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
globalFalse
globalFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(globalTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalTrue
globalTrue
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(43,23,0)
(13,33,0)
(24,39,0)
(29,0,0)
(43,28,0)
(44,23,0)
(6,43,0)
(28,43,0)
(1,22,0)
(28,19,0)
(35,43,0)
(39,26,0)
(32,13,0)
(44,43,0)
(31,42,0)
(42,27,0)
(49,17,0)
(10,43,0)
(28,14,0)
(5,11,0)
(9,20,0)
(8,43,0)
(6,23,0)
(33,4,0)
(7,0,0)
(11,30,0)
(7,39,0)
(22,17,0)
(41,0,0)
(21,20,0)
(19,28,0)
(7,16,0)
(22,0,0)
(0,20,0)
(51,39,0)
(48,40,0)
(15,6,0)
(22,19,0)
(8,23,0)
(2,44,0)
(17,22,0)
(19,22,0)
(38,40,0)
(33,13,0)
(40,45,0)
(3,23,0)
(16,7,0)
(12,10,0)
(34,7,0)
(18,10,0)
(52,44,0)
(14,28,0)
(22,39,0)
(25,20,0)
(47,8,0)
(37,16,0)
(17,49,1)
(10,43,1)
(32,10,1)
(44,52,1)
(6,15,1)
(50,42,1)
(34,36,1)
(6,43,1)
(5,46,1)
(50,8,1)
(31,7,1)
(37,34,1)
(2,33,1)
(50,36,1)
(46,0,1)
(52,2,1)
(44,43,1)
(42,31,1)
(16,37,1)
(47,6,1)
(7,0,1)
(8,43,1)
(43,28,1)
(10,12,1)
(22,17,1)
(8,47,1)
(11,5,1)
(7,16,1)
(39,24,1)
(33,13,1)
(1,35,1)
(13,32,1)
(19,22,1)
(7,39,1)
(15,44,1)
(35,7,1)
(2,10,1)
(22,0,1)
(22,39,1)
(28,19,1)
(28,14,1)
(51,46,1)
(41,29,1)
(24,51,1)
(18,43,1)
(36,11,1)
(12,18,1)
(36,39,1)
(0,41,1)
(49,1,1)
(43,28,2)
(17,7,2)
(28,19,2)
(18,7,2)
(22,39,2)
(22,0,2)
(22,7,2)
(35,7,2)
(5,46,2)
(33,13,2)
(10,43,2)
(47,7,2)
(33,10,2)
(7,16,2)
(32,10,2)
(2,7,2)
(22,17,2)
(7,0,2)
(6,43,2)
(24,46,2)
(10,7,2)
(34,36,2)
(6,7,2)
(7,36,2)
(7,39,2)
(19,7,2)
(28,14,2)
(11,46,2)
(19,22,2)
(44,7,2)
(8,7,2)
(16,36,2)
(28,7,2)
(44,43,2)
(12,7,2)
(1,7,2)
(42,7,2)
(52,7,2)
(13,10,2)
(31,7,2)
(39,46,2)
(49,7,2)
(8,43,2)
(15,7,2)
(51,46,2)
(43,7,2)
(37,36,2)
-----------------------------------
(0,data = 0)
(1,data)
(2,myString)
(3,if (myString == NULL)
(4,)
(5,"Benign, fixed string")
(6,printWLine(myString)
(7,data > wcslen(HELLO_STRING)
(8,free(myString)
(9,data)
(10,myString == NULL)
(11,printLine("Benign, fixed string")
(12,NULL)
(13,-1)
(14,wchar_t *)
(15,myString)
(16,wcslen(HELLO_STRING)
(17,sizeof(wchar_t)
(18,myString)
(19,malloc(data*sizeof(wchar_t)
(20,)
(21,if(globalFalse)
(22,data*sizeof(wchar_t)
(23,)
(24,20)
(25,if(globalTrue)
(26,)
(27,)
(28,(wchar_t *)
(29,data)
(30,)
(31,"Input is less than the length of the source string")
(32,1)
(33,exit(-1)
(34,data)
(35,myString)
(36,globalTrue)
(37,HELLO_STRING)
(38,if (data > wcslen(HELLO_STRING)
(39,data = 20)
(40,)
(41,0)
(42,printLine("Input is less than the length of the source string")
(43,myString = (wchar_t *)
(44,wcscpy(myString, HELLO_STRING)
(45,)
(46,globalFalse)
(47,myString)
(48,myString)
(49,wchar_t)
(50,RET)
(51,data)
(52,HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^