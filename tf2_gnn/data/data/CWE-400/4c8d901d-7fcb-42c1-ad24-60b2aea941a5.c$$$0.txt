-----label-----
0
-----code-----
static void goodG2B1()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
20,22
21,22
24,25
25,26
26,27
26,28
27,28
30,31
30,32
30,33
30,34
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
78,80
79,80
79,81
80,81
83,84
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,29,34,38,40,43,45,49,50,56,57,58,59,65,66,67,68,72,76,77,81,82,84
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
44,45
44,46
52,53
52,54
61,62
61,63
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    twoIntsStruct * data;    data = NULL;    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    twoIntsStruct * data;    data = NULL;    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalFive!=5
globalFive
globalFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(43,25,0)
(8,14,0)
(40,4,0)
(7,43,0)
(32,24,0)
(1,14,0)
(33,23,0)
(7,0,0)
(44,17,0)
(42,4,0)
(28,39,0)
(6,4,0)
(27,24,0)
(2,41,0)
(9,29,0)
(43,7,0)
(18,43,0)
(25,30,0)
(20,27,0)
(45,25,0)
(29,20,0)
(5,0,0)
(16,41,0)
(39,10,0)
(30,21,0)
(0,24,0)
(40,32,0)
(37,10,0)
(34,17,0)
(35,30,0)
(12,41,0)
(32,40,0)
(13,7,0)
(30,35,0)
(4,40,0)
(26,43,0)
(29,25,0)
(10,39,0)
(15,27,0)
(20,29,0)
(31,29,0)
(35,39,0)
(36,11,0)
(25,24,0)
(17,41,0)
(21,30,0)
(3,23,0)
(4,25,0)
(38,36,0)
(19,20,0)
(30,25,0)
(39,35,0)
(40,4,1)
(39,10,1)
(34,44,1)
(45,14,1)
(17,34,1)
(42,27,1)
(26,25,1)
(37,28,1)
(43,18,1)
(33,32,1)
(20,29,1)
(27,15,1)
(38,14,1)
(13,43,1)
(7,43,1)
(3,33,1)
(10,37,1)
(19,29,1)
(23,3,1)
(6,42,1)
(5,7,1)
(25,30,1)
(0,5,1)
(29,31,1)
(8,17,1)
(15,20,1)
(28,45,1)
(20,19,1)
(35,39,1)
(14,1,1)
(18,26,1)
(32,40,1)
(30,21,1)
(1,8,1)
(31,9,1)
(4,6,1)
(7,13,1)
(9,0,1)
(30,35,1)
(22,23,1)
(29,25,1)
(33,36,1)
(4,25,1)
(36,38,1)
(43,25,1)
(7,43,2)
(42,14,2)
(32,14,2)
(10,14,2)
(30,35,2)
(29,25,2)
(38,14,2)
(32,40,2)
(39,10,2)
(45,14,2)
(43,14,2)
(37,14,2)
(18,14,2)
(27,14,2)
(30,14,2)
(26,14,2)
(31,14,2)
(25,14,2)
(4,14,2)
(35,39,2)
(7,14,2)
(43,25,2)
(40,14,2)
(20,14,2)
(30,21,2)
(15,14,2)
(20,29,2)
(13,14,2)
(36,14,2)
(40,4,2)
(19,14,2)
(28,14,2)
(29,14,2)
(5,14,2)
(25,30,2)
(6,14,2)
(35,14,2)
(39,14,2)
(0,14,2)
(9,14,2)
(4,25,2)
-----------------------------------
(0,data[0].intOne = 0)
(1,5)
(2,if(globalFive!=5)
(3,5)
(4,data[0])
(5,0)
(6,0)
(7,data[0].intOne)
(8,globalFive)
(9,data)
(10,sizeof(twoIntsStruct)
(11,)
(12,data)
(13,intOne)
(14,globalFive!=5)
(15,0)
(16,if(globalFive==5)
(17,data = NULL)
(18,0)
(19,intTwo)
(20,data[0].intTwo)
(21,twoIntsStruct *)
(22,RET)
(23,globalFive==5)
(24,)
(25,data = (twoIntsStruct *)
(26,data)
(27,data[0].intTwo = 0)
(28,100)
(29,data[0])
(30,(twoIntsStruct *)
(31,0)
(32,printStructLine(&data[0])
(33,globalFive)
(34,NULL)
(35,ALLOCA(100*sizeof(twoIntsStruct)
(36,printLine("Benign, fixed string")
(37,twoIntsStruct)
(38,"Benign, fixed string")
(39,100*sizeof(twoIntsStruct)
(40,&data[0])
(41,)
(42,data)
(43,data[0])
(44,data)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^