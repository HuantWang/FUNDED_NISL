-----label-----
0
-----code-----
static void goodB2G()
{
    struct _twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    }
    while(1)
    {
        /* FIX: Deallocate memory */
        free(data);
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
88,89
88,90
90,91
90,92
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,59,60,61,62,68,69,70,71,75,79,81,85,86,87,89,94,96,97
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G(){    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }}
static void
goodB2G()
goodB2G
{    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }
1
{        /* FIX: Deallocate memory */        free(data);        break;    }
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(37,2,0)
(2,43,0)
(28,13,0)
(34,39,0)
(18,30,0)
(16,10,0)
(42,46,0)
(11,0,0)
(50,32,0)
(36,4,0)
(39,35,0)
(4,36,0)
(34,32,0)
(14,17,0)
(18,2,0)
(17,43,0)
(16,9,0)
(30,32,0)
(47,18,0)
(10,13,0)
(4,43,0)
(46,42,0)
(5,41,0)
(27,17,0)
(36,42,0)
(39,34,0)
(45,4,0)
(24,30,0)
(31,10,0)
(35,49,0)
(12,0,0)
(51,10,0)
(16,43,0)
(38,13,0)
(44,43,0)
(2,18,0)
(43,32,0)
(17,22,0)
(43,4,0)
(4,45,0)
(25,49,0)
(22,50,0)
(49,35,0)
(1,16,0)
(53,9,0)
(35,39,0)
(42,36,0)
(49,43,0)
(0,43,0)
(39,6,0)
(22,17,0)
(33,2,0)
(7,32,0)
(21,50,0)
(19,13,0)
(26,5,0)
(40,26,0)
(6,39,0)
(5,26,0)
(52,22,0)
(20,32,0)
(48,49,0)
(15,36,0)
(42,15,1)
(16,1,1)
(26,40,1)
(0,43,1)
(16,10,1)
(22,17,1)
(21,22,1)
(11,12,1)
(37,0,1)
(33,37,1)
(14,30,1)
(34,39,1)
(29,8,1)
(40,0,1)
(17,43,1)
(8,10,1)
(44,8,1)
(48,25,1)
(50,21,1)
(4,45,1)
(47,2,1)
(2,43,1)
(36,42,1)
(15,44,1)
(27,14,1)
(10,51,1)
(17,27,1)
(18,2,1)
(4,36,1)
(16,43,1)
(18,47,1)
(23,29,1)
(39,6,1)
(42,46,1)
(35,49,1)
(29,20,1)
(30,24,1)
(2,33,1)
(1,29,1)
(23,53,1)
(24,18,1)
(0,11,1)
(37,5,1)
(49,48,1)
(22,52,1)
(43,4,1)
(52,17,1)
(12,43,1)
(5,26,1)
(20,34,1)
(51,31,1)
(39,35,1)
(49,43,1)
(25,50,1)
(53,16,1)
(5,0,2)
(18,2,2)
(26,0,2)
(22,8,2)
(52,8,2)
(16,10,2)
(0,43,2)
(12,8,2)
(4,45,2)
(4,36,2)
(17,43,2)
(48,8,2)
(4,8,2)
(47,8,2)
(53,29,2)
(39,35,2)
(49,8,2)
(34,39,2)
(43,8,2)
(44,8,2)
(18,8,2)
(21,8,2)
(17,8,2)
(49,43,2)
(16,29,2)
(2,43,2)
(16,43,2)
(50,8,2)
(15,8,2)
(36,8,2)
(43,4,2)
(34,8,2)
(20,8,2)
(24,8,2)
(27,8,2)
(35,49,2)
(22,17,2)
(39,6,2)
(42,46,2)
(5,26,2)
(37,8,2)
(14,8,2)
(35,8,2)
(36,42,2)
(33,8,2)
(30,8,2)
(11,8,2)
(40,0,2)
(1,29,2)
(42,8,2)
(0,8,2)
(39,8,2)
(25,8,2)
(2,8,2)
-----------------------------------
(0,data == NULL)
(1,data)
(2,data[0])
(3, sizeof(struct _twoIntsStruct)
(4,(struct _twoIntsStruct *)
(5,exit(-1)
(6,twoIntsStruct *)
(7,if (data == NULL)
(8,1)
(9,)
(10,data = NULL)
(11,NULL)
(12,data)
(13,)
(14,data)
(15,100)
(16,free(data)
(17,data[0])
(18,data[0].intOne)
(19,while(1)
(20,break;)
(21,0)
(22,data[0].intTwo)
(23,RET)
(24,0)
(25,data)
(26,-1)
(27,0)
(28,data)
(29,1)
(30,data[0].intOne = 0)
(31,data)
(32,)
(33,0)
(34,printStructLine((twoIntsStruct *)
(35,&data[0])
(36,calloc(100, sizeof(struct _twoIntsStruct)
(37,data)
(38,while(1)
(39,(twoIntsStruct *)
(40,1)
(41,)
(42,sizeof(struct _twoIntsStruct)
(43,data = (struct _twoIntsStruct *)
(44,data)
(45,struct _twoIntsStruct *)
(46,struct _twoIntsStruct)
(47,intOne)
(48,0)
(49,data[0])
(50,data[0].intTwo = 0)
(51,NULL)
(52,intTwo)
(53,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^