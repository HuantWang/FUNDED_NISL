-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%zu", &data);
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
28,29
29,30
29,31
31,32
31,33
34,35
34,36
34,37
35,36
35,37
36,37
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
56,58
57,58
59,60
60,61
60,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
98,99
98,100
99,100
-----nextToken-----
2,4,9,11,15,16,20,22,23,26,30,32,33,37,40,42,47,50,52,55,58,61,62,66,68,73,75,79,81,83,87,89,93,95,100,101
-----computeFrom-----
13,14
13,15
35,36
35,37
45,46
45,47
56,57
56,58
64,65
64,66
-----guardedBy-----
42,83
37,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_bad(){    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_bad
{    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(6,20,0)
(38,19,0)
(8,3,0)
(13,35,0)
(34,26,0)
(17,4,0)
(23,39,0)
(21,35,0)
(45,43,0)
(16,20,0)
(5,43,0)
(3,4,0)
(10,26,0)
(20,16,0)
(30,44,0)
(44,35,0)
(2,14,0)
(44,43,0)
(11,0,0)
(7,22,0)
(43,39,0)
(45,35,0)
(25,16,0)
(42,32,0)
(40,38,0)
(41,24,0)
(33,45,0)
(26,0,0)
(19,38,0)
(31,41,0)
(39,23,0)
(22,0,0)
(22,10,0)
(19,29,0)
(36,10,0)
(20,26,0)
(12,32,0)
(37,13,0)
(32,43,0)
(9,4,0)
(43,35,0)
(4,9,0)
(1,14,0)
(14,0,0)
(39,43,0)
(9,39,0)
(18,22,0)
(10,22,0)
(27,44,0)
(4,26,0)
(28,26,0)
(4,3,0)
(13,43,0)
(39,9,0)
(32,43,1)
(26,28,1)
(28,34,1)
(41,31,1)
(20,16,1)
(31,20,1)
(39,9,1)
(7,26,1)
(13,43,1)
(45,43,1)
(44,43,1)
(45,33,1)
(10,36,1)
(15,45,1)
(9,4,1)
(37,44,1)
(43,39,1)
(42,43,1)
(25,6,1)
(4,26,1)
(18,7,1)
(36,18,1)
(8,17,1)
(20,26,1)
(32,12,1)
(16,25,1)
(13,37,1)
(38,40,1)
(22,10,1)
(15,41,1)
(44,30,1)
(5,20,1)
(33,13,1)
(27,32,1)
(6,22,1)
(17,5,1)
(30,27,1)
(12,42,1)
(19,38,1)
(40,32,1)
(27,19,1)
(10,26,1)
(3,8,1)
(4,3,1)
(39,23,1)
(13,20,2)
(44,20,2)
(39,23,2)
(19,38,2)
(40,32,2)
(27,20,2)
(32,20,2)
(9,4,2)
(5,20,2)
(30,20,2)
(45,20,2)
(4,20,2)
(9,20,2)
(39,9,2)
(19,32,2)
(10,26,2)
(4,3,2)
(32,43,2)
(12,20,2)
(44,43,2)
(33,20,2)
(37,20,2)
(22,10,2)
(20,26,2)
(42,20,2)
(20,16,2)
(41,20,2)
(31,20,2)
(38,32,2)
(45,43,2)
(43,39,2)
(43,20,2)
(13,43,2)
(4,26,2)
(8,20,2)
(39,20,2)
(3,20,2)
(17,20,2)
-----------------------------------
(0,)
(1,myString)
(2,if (data > strlen(HELLO_STRING)
(3,sizeof(char)
(4,data*sizeof(char)
(5,myString)
(6,data)
(7,stdin)
(8,char)
(9,malloc(data*sizeof(char)
(10,&data)
(11,data)
(12,NULL)
(13,printLine(myString)
(14,)
(15,RET)
(16,strlen(HELLO_STRING)
(17,data)
(18,"%zu")
(19,exit(-1)
(20,data > strlen(HELLO_STRING)
(21,if (myString == NULL)
(22,fscanf(stdin, "%zu", &data)
(23,char *)
(24,)
(25,HELLO_STRING)
(26,data = 0)
(27,myString)
(28,0)
(29,)
(30,HELLO_STRING)
(31,"Input is less than the length of the source string")
(32,myString == NULL)
(33,myString)
(34,data)
(35,)
(36,data)
(37,myString)
(38,-1)
(39,(char *)
(40,1)
(41,printLine("Input is less than the length of the source string")
(42,myString)
(43,myString = (char *)
(44,strcpy(myString, HELLO_STRING)
(45,free(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^