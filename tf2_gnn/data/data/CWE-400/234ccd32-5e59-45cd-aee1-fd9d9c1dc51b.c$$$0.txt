-----label-----
0
-----code-----
static void goodB2G2()
{
    int * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
70,71
71,72
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,56,57,58,62,65,66,69,74,76
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(6,28,0)
(31,10,0)
(1,11,0)
(4,7,0)
(12,34,0)
(19,16,0)
(26,15,0)
(29,25,0)
(6,21,0)
(22,34,0)
(39,10,0)
(11,15,0)
(5,30,0)
(28,6,0)
(20,13,0)
(25,17,0)
(14,1,0)
(23,7,0)
(25,30,0)
(24,28,0)
(18,16,0)
(21,6,0)
(8,3,0)
(16,3,0)
(6,2,0)
(1,2,0)
(7,2,0)
(0,34,0)
(16,2,0)
(30,34,0)
(36,30,0)
(25,2,0)
(1,3,0)
(11,1,0)
(31,35,0)
(32,2,0)
(38,1,0)
(2,6,0)
(28,13,0)
(3,15,0)
(13,28,0)
(2,15,0)
(10,31,0)
(6,21,1)
(23,2,1)
(11,1,1)
(37,11,1)
(1,2,1)
(7,4,1)
(32,33,1)
(31,10,1)
(38,3,1)
(4,23,1)
(6,28,1)
(25,2,1)
(10,39,1)
(18,31,1)
(2,6,1)
(9,25,1)
(1,3,1)
(3,8,1)
(7,2,1)
(1,14,1)
(39,7,1)
(8,16,1)
(18,7,1)
(28,13,1)
(24,32,1)
(37,33,1)
(16,2,1)
(16,19,1)
(13,20,1)
(25,30,1)
(30,36,1)
(14,38,1)
(36,5,1)
(9,37,1)
(25,29,1)
(33,30,1)
(19,18,1)
(20,24,1)
(29,37,1)
(25,37,2)
(6,28,2)
(7,33,2)
(2,33,2)
(6,33,2)
(3,33,2)
(31,10,2)
(14,33,2)
(11,1,2)
(25,30,2)
(25,2,2)
(1,2,2)
(13,33,2)
(18,33,2)
(6,21,2)
(29,37,2)
(38,33,2)
(4,33,2)
(39,7,2)
(2,6,2)
(23,33,2)
(20,33,2)
(28,13,2)
(1,3,2)
(7,2,2)
(19,33,2)
(8,33,2)
(10,7,2)
(16,33,2)
(31,7,2)
(11,33,2)
(32,33,2)
(1,33,2)
(16,2,2)
(28,33,2)
(24,33,2)
-----------------------------------
(0,if(STATIC_CONST_TRUE)
(1,data[0])
(2,data = (int *)
(3,data[0] = 5)
(4,NULL)
(5,data)
(6,(int *)
(7,data == NULL)
(8,5)
(9,RET)
(10,-1)
(11,printIntLine(data[0])
(12,data)
(13,sizeof(int)
(14,0)
(15,)
(16,data[0])
(17,)
(18,data)
(19,0)
(20,int)
(21,int *)
(22,if(STATIC_CONST_TRUE)
(23,data)
(24,100)
(25,free(data)
(26,if (data == NULL)
(27, sizeof(int)
(28,calloc(100, sizeof(int)
(29,data)
(30,data = NULL)
(31,exit(-1)
(32,data)
(33,STATIC_CONST_TRUE)
(34,)
(35,)
(36,NULL)
(37,STATIC_CONST_TRUE)
(38,data)
(39,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^