-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    data = NULL;
    goto source;
source:
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
    /* Initialize then use data */
    wcscpy(data, L"a string");
    printWLine(data);
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation of memory */
    /* no deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
41,42
41,43
41,44
42,43
44,45
47,48
48,49
48,50
49,50
51,52
53,54
55,56
55,57
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,46,50,52,54,56,57
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    data = NULL;    goto source;source:    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    /* Initialize then use data */    wcscpy(data, L"a string");    printWLine(data);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ; /* empty statement needed for some flow variants */}
static void
goodG2B()
goodG2B
{    wchar_t * data;    data = NULL;    goto source;source:    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    /* Initialize then use data */    wcscpy(data, L"a string");    printWLine(data);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ; /* empty statement needed for some flow variants */}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
source
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"a string");
wcscpy(data, L"a string")
wcscpy
wcscpy
data
data
L"a string"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ;
sink
;
-----joern-----
(4,6,0)
(16,18,0)
(8,1,0)
(17,15,0)
(8,6,0)
(2,6,0)
(3,1,0)
(19,1,0)
(18,19,0)
(5,14,0)
(10,8,0)
(13,14,0)
(15,6,0)
(15,8,0)
(11,6,0)
(1,3,0)
(19,18,0)
(12,18,0)
(20,6,0)
(0,6,0)
(9,16,0)
(1,19,0)
(18,16,0)
(14,6,0)
(1,8,0)
(15,17,1)
(8,1,1)
(12,10,1)
(16,9,1)
(15,8,1)
(1,3,1)
(14,13,1)
(18,16,1)
(7,20,1)
(1,19,1)
(19,18,1)
(13,5,1)
(9,12,1)
(10,11,1)
(20,15,1)
(17,8,1)
(11,14,1)
(18,16,2)
(8,1,2)
(15,8,2)
(1,19,2)
(19,18,2)
(1,3,2)
-----------------------------------
(0,source:)
(1,(wchar_t *)
(2,sink:)
(3,wchar_t *)
(4,data)
(5,data)
(6,)
(7,RET)
(8,data = (wchar_t *)
(9,wchar_t)
(10,data)
(11,goto source;)
(12,100)
(13,NULL)
(14,data = NULL)
(15,printWLine(data)
(16,sizeof(wchar_t)
(17,data)
(18,100*sizeof(wchar_t)
(19,ALLOCA(100*sizeof(wchar_t)
(20,goto sink;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^