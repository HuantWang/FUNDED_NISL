-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    CWE400_Resource_Exhaustion__fgets_sleep_34_unionType myUnion;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myUnion.unionFirst = count;
    {
        int count = myUnion.unionSecond;
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
64,65
64,66
65,66
65,67
66,67
69,70
71,72
71,73
72,73
73,74
73,75
75,76
75,77
77,78
78,79
78,80
79,80
82,83
82,84
82,85
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
92,93
92,94
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,31,33,38,40,42,44,46,51,54,56,61,62,67,68,70,74,76,80,81,86,87,90,91,96,98,102,103,108,109
-----computeFrom-----
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
83,84
83,85
84,85
84,86
88,89
88,90
-----guardedBy-----
40,56
90,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    int count;    CWE400_Resource_Exhaustion__fgets_sleep_34_unionType myUnion;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G()
goodB2G
{    int count;    CWE400_Resource_Exhaustion__fgets_sleep_34_unionType myUnion;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int count;
int count;
int
count
count
CWE400_Resource_Exhaustion__fgets_sleep_34_unionType myUnion;
CWE400_Resource_Exhaustion__fgets_sleep_34_unionType myUnion;
CWE400_Resource_Exhaustion__fgets_sleep_34_unionType
CWE400_Resource_Exhaustion__fgets_sleep_34_unionType
myUnion
myUnion
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
myUnion.unionFirst = count;
myUnion.unionFirst = count
myUnion.unionFirst
myUnion
myUnion
unionFirst
count
count
{        int count = myUnion.unionSecond;        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
int count = myUnion.unionSecond;
int count = myUnion.unionSecond;
int
count = myUnion.unionSecond
count
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(14,51,0)
(3,37,0)
(10,34,0)
(9,52,0)
(28,34,0)
(43,0,0)
(42,34,0)
(33,28,0)
(38,35,0)
(55,50,0)
(52,9,0)
(30,14,0)
(41,0,0)
(11,13,0)
(21,9,0)
(34,7,0)
(39,46,0)
(50,40,0)
(48,29,0)
(20,42,0)
(55,4,0)
(24,51,0)
(44,7,0)
(46,2,0)
(49,7,0)
(45,0,0)
(51,37,0)
(36,6,0)
(26,0,0)
(12,26,0)
(27,37,0)
(5,10,0)
(15,24,0)
(8,10,0)
(54,50,0)
(18,9,0)
(34,42,0)
(35,32,0)
(31,42,0)
(13,37,0)
(6,24,0)
(29,17,0)
(51,14,0)
(7,37,0)
(4,13,0)
(19,13,0)
(25,6,0)
(0,4,0)
(9,34,0)
(24,50,0)
(22,34,0)
(28,32,0)
(50,55,0)
(52,10,0)
(1,4,0)
(0,26,0)
(53,51,0)
(24,37,0)
(23,4,0)
(10,52,0)
(47,55,0)
(48,52,1)
(45,43,1)
(31,22,1)
(28,34,1)
(43,4,1)
(12,0,1)
(47,54,1)
(0,41,1)
(22,24,1)
(25,36,1)
(14,30,1)
(36,50,1)
(55,4,1)
(29,48,1)
(20,31,1)
(18,21,1)
(26,0,1)
(9,18,1)
(24,15,1)
(24,51,1)
(5,34,1)
(55,47,1)
(10,34,1)
(34,42,1)
(15,6,1)
(39,26,1)
(26,12,1)
(36,46,1)
(16,35,1)
(8,5,1)
(52,10,1)
(35,38,1)
(21,10,1)
(41,45,1)
(33,52,1)
(38,28,1)
(9,34,1)
(10,8,1)
(1,51,1)
(30,53,1)
(4,23,1)
(51,14,1)
(24,50,1)
(6,25,1)
(52,9,1)
(50,55,1)
(16,29,1)
(42,20,1)
(46,39,1)
(23,1,1)
(28,33,1)
(54,26,1)
(0,4,1)
(26,0,2)
(38,52,2)
(9,34,2)
(51,14,2)
(28,52,2)
(48,52,2)
(50,26,2)
(33,52,2)
(10,34,2)
(55,4,2)
(52,10,2)
(24,50,2)
(50,55,2)
(0,4,2)
(46,26,2)
(21,10,2)
(18,10,2)
(52,9,2)
(9,10,2)
(35,52,2)
(24,51,2)
(47,26,2)
(29,52,2)
(39,26,2)
(55,26,2)
(34,42,2)
(28,34,2)
(54,26,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,inputBuffer)
(2,)
(3,count)
(4,inputBuffer[CHAR_ARRAY_SIZE] = "")
(5,count)
(6,myUnion.unionFirst)
(7,)
(8,0)
(9,count <= 2000)
(10,count > 0)
(11,inputBuffer)
(12,NULL)
(13,)
(14,-1)
(15,count)
(16,RET)
(17,)
(18,2000)
(19,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,unionSecond)
(21,count)
(22,count)
(23,"")
(24,myUnion.unionFirst = count)
(25,unionFirst)
(26,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(27,myUnion)
(28,SLEEP(count)
(29,printLine("Sleep time too long")
(30,1)
(31,myUnion)
(32,)
(33,count)
(34,count = myUnion.unionSecond)
(35,printLine("Sleep time OK")
(36,myUnion)
(37,)
(38,"Sleep time OK")
(39,"fgets()
(40,)
(41,stdin)
(42,myUnion.unionSecond)
(43,inputBuffer)
(44,if (count > 0 && count <= 2000)
(45,CHAR_ARRAY_SIZE)
(46,printLine("fgets()
(47,inputBuffer)
(48,"Sleep time too long")
(49,count)
(50,count = atoi(inputBuffer)
(51,count = -1)
(52,count > 0 && count <= 2000)
(53,count)
(54,count)
(55,atoi(inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^