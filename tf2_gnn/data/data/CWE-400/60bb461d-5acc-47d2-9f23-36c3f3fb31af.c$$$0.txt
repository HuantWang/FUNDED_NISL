-----label-----
1
-----code-----
static void
peer_disc_chrs(struct peer *peer)
{
    struct peer_svc *svc;
    int rc;

    /* Search through the list of discovered service for the first service that
     * contains undiscovered characteristics.  Then, discover all
     * characteristics belonging to that service.
     */
    SLIST_FOREACH(svc, &peer->svcs, next) {
        if (!peer_svc_is_empty(svc) && SLIST_EMPTY(&svc->chrs)) {
            peer->cur_svc = svc;
            rc = ble_gattc_disc_all_chrs(peer->conn_handle,
                                         svc->svc.start_handle,
                                         svc->svc.end_handle,
                                         peer_chr_disced, peer);
            if (rc != 0) {
                peer_disc_complete(peer, rc);
            }
            return;
        }
    }

    /* All characteristics discovered. */
    peer_disc_dscs(peer);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
22,23
24,25
25,26
25,27
25,28
25,29
26,27
28,29
30,31
31,32
31,33
32,33
35,36
37,38
38,39
39,40
39,41
40,41
40,42
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
50,51
51,52
51,53
52,53
55,56
55,57
55,58
55,59
56,57
57,58
57,59
58,59
58,60
59,60
62,63
64,65
65,66
65,67
66,67
68,69
68,70
68,71
68,72
68,73
68,74
69,70
71,72
71,73
72,73
75,76
75,77
76,77
76,78
77,78
81,82
81,83
82,83
82,84
83,84
87,88
89,90
91,92
91,93
92,93
92,94
93,94
96,97
97,98
98,99
98,100
98,101
99,100
101,102
103,104
106,107
107,108
107,109
108,109
110,111
-----nextToken-----
2,4,7,9,10,15,17,18,21,23,27,29,33,34,36,44,46,49,53,54,60,61,63,67,70,73,74,78,79,80,84,85,86,88,90,94,95,100,102,104,105,109,111
-----computeFrom-----
40,41
40,42
57,58
57,59
65,66
65,67
92,93
92,94
-----guardedBy-----
53,85
94,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static voidpeer_disc_chrs(struct peer *peer){    struct peer_svc *svc;    int rc;    /* Search through the list of discovered service for the first service that     * contains undiscovered characteristics.  Then, discover all     * characteristics belonging to that service.     */    SLIST_FOREACH(svc, &peer->svcs, next) {        if (!peer_svc_is_empty(svc) && SLIST_EMPTY(&svc->chrs)) {            peer->cur_svc = svc;            rc = ble_gattc_disc_all_chrs(peer->conn_handle,                                         svc->svc.start_handle,                                         svc->svc.end_handle,                                         peer_chr_disced, peer);            if (rc != 0) {                peer_disc_complete(peer, rc);            }            return;        }    }    /* All characteristics discovered. */    peer_disc_dscs(peer);}
static void
peer_disc_chrs(struct peer *peer)
peer_disc_chrs
struct peer *peer
struct peer
peer
*peer
*
peer
{    struct peer_svc *svc;    int rc;    /* Search through the list of discovered service for the first service that     * contains undiscovered characteristics.  Then, discover all     * characteristics belonging to that service.     */    SLIST_FOREACH(svc, &peer->svcs, next) {        if (!peer_svc_is_empty(svc) && SLIST_EMPTY(&svc->chrs)) {            peer->cur_svc = svc;            rc = ble_gattc_disc_all_chrs(peer->conn_handle,                                         svc->svc.start_handle,                                         svc->svc.end_handle,                                         peer_chr_disced, peer);            if (rc != 0) {                peer_disc_complete(peer, rc);            }            return;        }    }    /* All characteristics discovered. */    peer_disc_dscs(peer);}
struct peer_svc *svc;
struct peer_svc *svc;
struct peer_svc
peer_svc
*svc
*
svc
int rc;
int rc;
int
rc
rc
SLIST_FOREACH(svc, &peer->svcs, next)
SLIST_FOREACH(svc, &peer->svcs, next)
SLIST_FOREACH
SLIST_FOREACH
svc
svc
&peer->svcs
peer->svcs
peer
peer
svcs
next
next
)
{        if (!peer_svc_is_empty(svc) && SLIST_EMPTY(&svc->chrs)) {            peer->cur_svc = svc;            rc = ble_gattc_disc_all_chrs(peer->conn_handle,                                         svc->svc.start_handle,                                         svc->svc.end_handle,                                         peer_chr_disced, peer);            if (rc != 0) {                peer_disc_complete(peer, rc);            }            return;        }    }
if (!peer_svc_is_empty(svc) && SLIST_EMPTY(&svc->chrs)) {            peer->cur_svc = svc;            rc = ble_gattc_disc_all_chrs(peer->conn_handle,                                         svc->svc.start_handle,                                         svc->svc.end_handle,                                         peer_chr_disced, peer);            if (rc != 0) {                peer_disc_complete(peer, rc);            }            return;        }
!peer_svc_is_empty(svc) && SLIST_EMPTY(&svc->chrs)
!peer_svc_is_empty(svc)
peer_svc_is_empty(svc)
peer_svc_is_empty
peer_svc_is_empty
svc
svc
SLIST_EMPTY(&svc->chrs)
SLIST_EMPTY
SLIST_EMPTY
&svc->chrs
svc->chrs
svc
svc
chrs
{            peer->cur_svc = svc;            rc = ble_gattc_disc_all_chrs(peer->conn_handle,                                         svc->svc.start_handle,                                         svc->svc.end_handle,                                         peer_chr_disced, peer);            if (rc != 0) {                peer_disc_complete(peer, rc);            }            return;        }
peer->cur_svc = svc;
peer->cur_svc = svc
peer->cur_svc
peer
peer
cur_svc
svc
svc
rc = ble_gattc_disc_all_chrs(peer->conn_handle,                                         svc->svc.start_handle,                                         svc->svc.end_handle,                                         peer_chr_disced, peer);
rc = ble_gattc_disc_all_chrs(peer->conn_handle,                                         svc->svc.start_handle,                                         svc->svc.end_handle,                                         peer_chr_disced, peer)
rc
rc
ble_gattc_disc_all_chrs(peer->conn_handle,                                         svc->svc.start_handle,                                         svc->svc.end_handle,                                         peer_chr_disced, peer)
ble_gattc_disc_all_chrs
ble_gattc_disc_all_chrs
peer->conn_handle
peer
peer
conn_handle
svc->svc.start_handle
svc->svc
svc
svc
svc
start_handle
svc->svc.end_handle
svc->svc
svc
svc
svc
end_handle
peer_chr_disced
peer_chr_disced
peer
peer
if (rc != 0) {                peer_disc_complete(peer, rc);            }
rc != 0
rc
rc
0
{                peer_disc_complete(peer, rc);            }
peer_disc_complete(peer, rc);
peer_disc_complete(peer, rc)
peer_disc_complete
peer_disc_complete
peer
peer
rc
rc
return;
peer_disc_dscs(peer);
peer_disc_dscs(peer)
peer_disc_dscs
peer_disc_dscs
peer
peer
-----joern-----
(5,37,0)
(37,18,0)
(11,48,0)
(25,18,0)
(0,33,0)
(35,24,0)
(23,34,0)
(43,33,0)
(2,32,0)
(24,48,0)
(10,31,0)
(37,38,0)
(44,31,0)
(25,44,0)
(14,28,0)
(30,25,0)
(6,34,0)
(15,38,0)
(12,24,0)
(20,3,0)
(22,49,0)
(14,43,0)
(36,18,0)
(39,6,0)
(17,40,0)
(25,38,0)
(15,40,0)
(0,49,0)
(37,29,0)
(18,25,0)
(25,48,0)
(28,14,0)
(45,40,0)
(7,40,0)
(6,38,0)
(50,25,0)
(31,44,0)
(48,24,0)
(4,41,0)
(44,25,0)
(27,28,0)
(32,18,0)
(19,45,0)
(34,3,0)
(9,37,0)
(13,44,0)
(33,0,0)
(50,38,0)
(49,0,0)
(46,50,0)
(21,28,0)
(25,50,0)
(47,15,0)
(43,14,0)
(18,3,0)
(33,43,0)
(41,3,0)
(16,25,0)
(1,6,0)
(42,32,0)
(48,25,0)
(26,31,0)
(8,50,0)
(44,13,1)
(37,38,1)
(25,50,1)
(13,31,1)
(43,14,1)
(26,50,1)
(35,44,1)
(44,31,1)
(2,42,1)
(14,28,1)
(48,24,1)
(21,27,1)
(46,36,1)
(10,26,1)
(15,38,1)
(39,1,1)
(32,18,1)
(8,46,1)
(6,38,1)
(34,23,1)
(9,5,1)
(41,32,1)
(25,48,1)
(49,22,1)
(28,21,1)
(0,49,1)
(25,44,1)
(11,24,1)
(6,39,1)
(16,48,1)
(27,0,1)
(37,9,1)
(1,33,1)
(31,10,1)
(12,35,1)
(24,12,1)
(23,6,1)
(18,25,1)
(4,41,1)
(33,0,1)
(25,30,1)
(42,18,1)
(47,33,1)
(50,38,1)
(5,32,1)
(48,11,1)
(30,16,1)
(50,8,1)
(32,2,1)
(4,15,1)
(41,37,1)
(37,18,1)
(15,47,1)
(33,43,1)
(25,38,1)
(36,34,1)
(25,33,2)
(41,33,2)
(1,33,2)
(16,33,2)
(23,33,2)
(2,33,2)
(28,0,2)
(26,33,2)
(6,33,2)
(14,0,2)
(5,32,2)
(34,33,2)
(4,41,2)
(30,33,2)
(15,33,2)
(37,18,2)
(18,25,2)
(39,33,2)
(0,49,2)
(6,38,2)
(44,33,2)
(35,33,2)
(25,44,2)
(32,33,2)
(21,0,2)
(46,33,2)
(43,0,2)
(48,33,2)
(15,38,2)
(12,33,2)
(32,18,2)
(44,31,2)
(27,0,2)
(25,50,2)
(37,38,2)
(33,43,2)
(50,38,2)
(13,33,2)
(48,24,2)
(47,33,2)
(14,28,2)
(42,33,2)
(10,33,2)
(24,33,2)
(43,14,2)
(50,33,2)
(8,33,2)
(33,0,2)
(18,33,2)
(25,38,2)
(9,32,2)
(36,33,2)
(31,33,2)
(37,32,2)
(11,33,2)
(25,48,2)
-----------------------------------
(0,!peer_svc_is_empty(svc)
(1,peer)
(2,0)
(3,)
(4,RET)
(5,peer)
(6,peer->cur_svc)
(7,svc)
(8,conn_handle)
(9,rc)
(10,svc)
(11,end_handle)
(12,svc)
(13,start_handle)
(14,&svc->chrs)
(15,peer_disc_dscs(peer)
(16,peer_chr_disced)
(17,rc)
(18,rc = ble_gattc_disc_all_chrs(peer->conn_handle,\n\\n                                         svc->svc.start_handle,\n\\n                                         svc->svc.end_handle,\n\\n                                         peer_chr_disced, peer)
(19,if (!peer_svc_is_empty(svc)
(20,if (rc != 0)
(21,chrs)
(22,svc)
(23,svc)
(24,svc->svc)
(25,ble_gattc_disc_all_chrs(peer->conn_handle,\n\\n                                         svc->svc.start_handle,\n\\n                                         svc->svc.end_handle,\n\\n                                         peer_chr_disced, peer)
(26,svc)
(27,svc)
(28,svc->chrs)
(29,)
(30,peer)
(31,svc->svc)
(32,rc != 0)
(33,!peer_svc_is_empty(svc)
(34,peer->cur_svc = svc)
(35,svc)
(36,rc)
(37,peer_disc_complete(peer, rc)
(38,struct peer *peer)
(39,cur_svc)
(40,)
(41,return;)
(42,rc)
(43,SLIST_EMPTY(&svc->chrs)
(44,svc->svc.start_handle)
(45,)
(46,peer)
(47,peer)
(48,svc->svc.end_handle)
(49,peer_svc_is_empty(svc)
(50,peer->conn_handle)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^