-----label-----
0
-----code-----
static struct ast_channel *local_new(struct local_pvt *p, int state, const char *linkedid, struct ast_callid *callid)
{
	struct ast_channel *tmp = NULL, *tmp2 = NULL;
	struct ast_format fmt;
	int generated_seqno = ast_atomic_fetchadd_int((int *)&name_sequence, +1);
	const char *t;
	int ama;

	/* Allocate two new Asterisk channels */
	/* safe accountcode */
	if (p->owner && ast_channel_accountcode(p->owner))
		t = ast_channel_accountcode(p->owner);
	else
		t = "";

	if (p->owner)
		ama = ast_channel_amaflags(p->owner);
	else
		ama = 0;

	/* Make sure that the ;2 channel gets the same linkedid as ;1. You can't pass linkedid to both
	 * allocations since if linkedid isn't set, then each channel will generate its own linkedid. */
	if (!(tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno))
		|| !(tmp2 = ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp), ama, "Local/%s@%s-%08x;2", p->exten, p->context, generated_seqno))) {
		if (tmp) {
			tmp = ast_channel_release(tmp);
		}
		ast_log(LOG_WARNING, "Unable to allocate channel structure(s)\n");
		return NULL;
	}

	if (callid) {
		ast_channel_callid_set(tmp, callid);
		ast_channel_callid_set(tmp2, callid);
	}

	ast_channel_tech_set(tmp, &local_tech);
	ast_channel_tech_set(tmp2, &local_tech);

	ast_format_cap_copy(ast_channel_nativeformats(tmp), p->reqcap);
	ast_format_cap_copy(ast_channel_nativeformats(tmp2), p->reqcap);

	/* Determine our read/write format and set it on each channel */
	ast_best_codec(p->reqcap, &fmt);
	ast_format_copy(ast_channel_writeformat(tmp), &fmt);
	ast_format_copy(ast_channel_writeformat(tmp2), &fmt);
	ast_format_copy(ast_channel_rawwriteformat(tmp), &fmt);
	ast_format_copy(ast_channel_rawwriteformat(tmp2), &fmt);
	ast_format_copy(ast_channel_readformat(tmp), &fmt);
	ast_format_copy(ast_channel_readformat(tmp2), &fmt);
	ast_format_copy(ast_channel_rawreadformat(tmp), &fmt);
	ast_format_copy(ast_channel_rawreadformat(tmp2), &fmt);

	ast_channel_tech_pvt_set(tmp, p);
	ast_channel_tech_pvt_set(tmp2, p);

	ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE);
	ast_set_flag(ast_channel_flags(tmp2), AST_FLAG_DISABLE_DEVSTATE_CACHE);

	p->owner = tmp;
	p->chan = tmp2;

	ast_channel_context_set(tmp, p->context);
	ast_channel_context_set(tmp2, p->context);
	ast_channel_exten_set(tmp2, p->exten);
	ast_channel_priority_set(tmp, 1);
	ast_channel_priority_set(tmp2, 1);

	ast_jb_configure(tmp, &p->jb_conf);

	return tmp;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
17,18
17,19
19,20
19,21
22,23
22,24
23,24
25,26
25,27
28,29
28,30
28,31
28,32
28,33
28,34
28,35
28,36
28,37
28,38
28,39
28,40
28,41
28,42
28,43
28,44
28,45
28,46
28,47
28,48
28,49
28,50
28,51
28,52
28,53
28,54
28,55
28,56
28,57
28,58
28,59
28,60
28,61
28,62
28,63
29,30
30,31
30,32
30,33
31,32
33,34
33,35
33,36
36,37
37,38
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
54,55
54,56
56,57
57,58
57,59
57,60
58,59
60,61
60,62
61,62
61,63
63,64
65,66
66,67
68,69
70,71
71,72
71,73
73,74
73,75
76,77
77,78
77,79
79,80
81,82
81,83
81,84
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
90,91
90,92
91,92
94,95
95,96
95,97
96,97
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
110,111
110,112
110,113
111,112
111,113
112,113
115,116
116,117
116,118
117,118
119,120
119,121
120,121
122,123
122,124
123,124
126,127
127,128
127,129
128,129
131,132
131,133
132,133
132,134
133,134
134,135
135,136
135,137
136,137
138,139
138,140
138,141
138,142
138,143
138,144
138,145
138,146
138,147
138,148
138,149
138,150
138,151
138,152
139,140
142,143
146,147
148,149
148,150
149,150
152,153
152,154
153,154
156,157
158,159
161,162
161,163
162,163
165,166
165,167
166,167
169,170
171,172
172,173
173,174
173,175
174,175
176,177
176,178
176,179
176,180
176,181
176,182
176,183
176,184
176,185
176,186
176,187
176,188
176,189
176,190
177,178
180,181
184,185
186,187
186,188
187,188
190,191
190,192
191,192
194,195
194,196
195,196
197,198
199,200
202,203
202,204
203,204
206,207
206,208
207,208
210,211
212,213
212,214
212,215
213,214
213,215
214,215
216,217
217,218
218,219
218,220
219,220
221,222
221,223
222,223
224,225
226,227
227,228
227,229
227,230
228,229
230,231
233,234
234,235
236,237
236,238
237,238
239,240
239,241
240,241
241,242
241,243
241,244
242,243
244,245
246,247
248,249
249,250
249,251
249,252
250,251
252,253
254,255
256,257
257,258
257,259
257,260
258,259
260,261
262,263
263,264
265,266
266,267
266,268
266,269
267,268
269,270
271,272
272,273
274,275
275,276
275,277
275,278
276,277
278,279
278,280
279,280
281,282
283,284
283,285
284,285
287,288
288,289
288,290
288,291
289,290
291,292
291,293
292,293
294,295
296,297
296,298
297,298
300,301
301,302
301,303
301,304
302,303
304,305
304,306
305,306
308,309
309,310
311,312
312,313
312,314
312,315
313,314
315,316
315,317
316,317
318,319
320,321
321,322
323,324
324,325
324,326
324,327
325,326
327,328
327,329
328,329
330,331
332,333
333,334
335,336
336,337
336,338
336,339
337,338
339,340
339,341
340,341
342,343
344,345
345,346
347,348
348,349
348,350
348,351
349,350
351,352
351,353
352,353
354,355
356,357
357,358
359,360
360,361
360,362
360,363
361,362
363,364
363,365
364,365
366,367
368,369
369,370
371,372
372,373
372,374
372,375
373,374
375,376
375,377
376,377
378,379
380,381
381,382
383,384
384,385
384,386
384,387
385,386
387,388
387,389
388,389
390,391
392,393
393,394
395,396
396,397
396,398
396,399
397,398
399,400
399,401
400,401
402,403
404,405
405,406
407,408
408,409
408,410
408,411
409,410
411,412
413,414
415,416
416,417
416,418
416,419
417,418
419,420
421,422
423,424
424,425
424,426
424,427
425,426
427,428
427,429
428,429
430,431
432,433
434,435
435,436
435,437
435,438
436,437
438,439
438,440
439,440
441,442
443,444
445,446
446,447
446,448
447,448
447,449
448,449
451,452
453,454
454,455
454,456
455,456
455,457
456,457
459,460
461,462
462,463
462,464
462,465
463,464
465,466
467,468
467,469
468,469
471,472
472,473
472,474
472,475
473,474
475,476
477,478
477,479
478,479
481,482
482,483
482,484
482,485
483,484
485,486
487,488
487,489
488,489
491,492
492,493
492,494
492,495
493,494
495,496
498,499
499,500
499,501
499,502
500,501
502,503
505,506
506,507
506,508
506,509
507,508
509,510
511,512
512,513
512,514
513,514
516,517
517,518
-----nextToken-----
3,5,6,9,11,12,14,16,18,20,21,24,26,27,32,34,35,38,40,41,44,48,50,53,55,59,62,64,67,69,72,74,75,78,80,85,86,89,92,93,97,100,103,104,108,109,113,114,118,121,124,125,129,130,137,140,141,143,144,145,147,150,151,154,155,157,159,160,163,164,167,168,170,175,178,179,181,182,183,185,188,189,192,193,196,198,200,201,204,205,208,209,211,215,220,223,225,229,231,232,235,238,243,245,247,251,253,255,259,261,264,268,270,273,277,280,282,285,286,290,293,295,298,299,303,306,307,310,314,317,319,322,326,329,331,334,338,341,343,346,350,353,355,358,362,365,367,370,374,377,379,382,386,389,391,394,398,401,403,406,410,412,414,418,420,422,426,429,431,433,437,440,442,444,449,450,452,457,458,460,464,466,469,470,474,476,479,480,484,486,489,490,494,496,497,501,503,504,508,510,514,515,518
-----computeFrom-----
82,83
82,84
95,96
95,97
106,107
106,108
116,117
116,118
127,128
127,129
132,133
132,134
135,136
135,137
173,174
173,175
218,219
218,220
446,447
446,448
454,455
454,456
-----guardedBy-----
92,103
93,104
89,100
198,225
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct ast_channel *local_new(struct local_pvt *p, int state, const char *linkedid, struct ast_callid *callid){	struct ast_channel *tmp = NULL, *tmp2 = NULL;	struct ast_format fmt;	int generated_seqno = ast_atomic_fetchadd_int((int *)&name_sequence, +1);	const char *t;	int ama;	/* Allocate two new Asterisk channels */	/* safe accountcode */	if (p->owner && ast_channel_accountcode(p->owner))		t = ast_channel_accountcode(p->owner);	else		t = "";	if (p->owner)		ama = ast_channel_amaflags(p->owner);	else		ama = 0;	/* Make sure that the ;2 channel gets the same linkedid as ;1. You can't pass linkedid to both	 * allocations since if linkedid isn't set, then each channel will generate its own linkedid. */	if (!(tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno))		|| !(tmp2 = ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp), ama, "Local/%s@%s-%08x;2", p->exten, p->context, generated_seqno))) {		if (tmp) {			tmp = ast_channel_release(tmp);		}		ast_log(LOG_WARNING, "Unable to allocate channel structure(s)\n");		return NULL;	}	if (callid) {		ast_channel_callid_set(tmp, callid);		ast_channel_callid_set(tmp2, callid);	}	ast_channel_tech_set(tmp, &local_tech);	ast_channel_tech_set(tmp2, &local_tech);	ast_format_cap_copy(ast_channel_nativeformats(tmp), p->reqcap);	ast_format_cap_copy(ast_channel_nativeformats(tmp2), p->reqcap);	/* Determine our read/write format and set it on each channel */	ast_best_codec(p->reqcap, &fmt);	ast_format_copy(ast_channel_writeformat(tmp), &fmt);	ast_format_copy(ast_channel_writeformat(tmp2), &fmt);	ast_format_copy(ast_channel_rawwriteformat(tmp), &fmt);	ast_format_copy(ast_channel_rawwriteformat(tmp2), &fmt);	ast_format_copy(ast_channel_readformat(tmp), &fmt);	ast_format_copy(ast_channel_readformat(tmp2), &fmt);	ast_format_copy(ast_channel_rawreadformat(tmp), &fmt);	ast_format_copy(ast_channel_rawreadformat(tmp2), &fmt);	ast_channel_tech_pvt_set(tmp, p);	ast_channel_tech_pvt_set(tmp2, p);	ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE);	ast_set_flag(ast_channel_flags(tmp2), AST_FLAG_DISABLE_DEVSTATE_CACHE);	p->owner = tmp;	p->chan = tmp2;	ast_channel_context_set(tmp, p->context);	ast_channel_context_set(tmp2, p->context);	ast_channel_exten_set(tmp2, p->exten);	ast_channel_priority_set(tmp, 1);	ast_channel_priority_set(tmp2, 1);	ast_jb_configure(tmp, &p->jb_conf);	return tmp;}
static struct ast_channel
ast_channel
*local_new(struct local_pvt *p, int state, const char *linkedid, struct ast_callid *callid)
*
local_new
struct local_pvt *p
struct local_pvt
local_pvt
*p
*
p
int state
int
state
state
const char *linkedid
const char
*linkedid
*
linkedid
struct ast_callid *callid
struct ast_callid
ast_callid
*callid
*
callid
{	struct ast_channel *tmp = NULL, *tmp2 = NULL;	struct ast_format fmt;	int generated_seqno = ast_atomic_fetchadd_int((int *)&name_sequence, +1);	const char *t;	int ama;	/* Allocate two new Asterisk channels */	/* safe accountcode */	if (p->owner && ast_channel_accountcode(p->owner))		t = ast_channel_accountcode(p->owner);	else		t = "";	if (p->owner)		ama = ast_channel_amaflags(p->owner);	else		ama = 0;	/* Make sure that the ;2 channel gets the same linkedid as ;1. You can't pass linkedid to both	 * allocations since if linkedid isn't set, then each channel will generate its own linkedid. */	if (!(tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno))		|| !(tmp2 = ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp), ama, "Local/%s@%s-%08x;2", p->exten, p->context, generated_seqno))) {		if (tmp) {			tmp = ast_channel_release(tmp);		}		ast_log(LOG_WARNING, "Unable to allocate channel structure(s)\n");		return NULL;	}	if (callid) {		ast_channel_callid_set(tmp, callid);		ast_channel_callid_set(tmp2, callid);	}	ast_channel_tech_set(tmp, &local_tech);	ast_channel_tech_set(tmp2, &local_tech);	ast_format_cap_copy(ast_channel_nativeformats(tmp), p->reqcap);	ast_format_cap_copy(ast_channel_nativeformats(tmp2), p->reqcap);	/* Determine our read/write format and set it on each channel */	ast_best_codec(p->reqcap, &fmt);	ast_format_copy(ast_channel_writeformat(tmp), &fmt);	ast_format_copy(ast_channel_writeformat(tmp2), &fmt);	ast_format_copy(ast_channel_rawwriteformat(tmp), &fmt);	ast_format_copy(ast_channel_rawwriteformat(tmp2), &fmt);	ast_format_copy(ast_channel_readformat(tmp), &fmt);	ast_format_copy(ast_channel_readformat(tmp2), &fmt);	ast_format_copy(ast_channel_rawreadformat(tmp), &fmt);	ast_format_copy(ast_channel_rawreadformat(tmp2), &fmt);	ast_channel_tech_pvt_set(tmp, p);	ast_channel_tech_pvt_set(tmp2, p);	ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE);	ast_set_flag(ast_channel_flags(tmp2), AST_FLAG_DISABLE_DEVSTATE_CACHE);	p->owner = tmp;	p->chan = tmp2;	ast_channel_context_set(tmp, p->context);	ast_channel_context_set(tmp2, p->context);	ast_channel_exten_set(tmp2, p->exten);	ast_channel_priority_set(tmp, 1);	ast_channel_priority_set(tmp2, 1);	ast_jb_configure(tmp, &p->jb_conf);	return tmp;}
struct ast_channel *tmp = NULL, *tmp2 = NULL;
struct ast_channel *tmp = NULL, *tmp2 = NULL;
struct ast_channel
ast_channel
*tmp = NULL
*
tmp
= NULL
NULL
NULL
*tmp2 = NULL
*
tmp2
= NULL
NULL
NULL
struct ast_format fmt;
struct ast_format fmt;
struct ast_format
ast_format
fmt
fmt
int generated_seqno = ast_atomic_fetchadd_int((int *)&name_sequence, +1);
int generated_seqno = ast_atomic_fetchadd_int((int *)&name_sequence, +1);
int
generated_seqno = ast_atomic_fetchadd_int((int *)&name_sequence, +1)
generated_seqno
= ast_atomic_fetchadd_int((int *)&name_sequence, +1)
ast_atomic_fetchadd_int((int *)&name_sequence, +1)
ast_atomic_fetchadd_int
ast_atomic_fetchadd_int
(int *)&name_sequence
int *
int
*
*
&name_sequence
name_sequence
name_sequence
+1
1
const char *t;
const char *t;
const char
*t
*
t
int ama;
int ama;
int
ama
ama
if (p->owner && ast_channel_accountcode(p->owner))		t = ast_channel_accountcode(p->owner);	else		t = "";
p->owner && ast_channel_accountcode(p->owner)
p->owner
p
p
owner
ast_channel_accountcode(p->owner)
ast_channel_accountcode
ast_channel_accountcode
p->owner
p
p
owner
t = ast_channel_accountcode(p->owner);
t = ast_channel_accountcode(p->owner)
t
t
ast_channel_accountcode(p->owner)
ast_channel_accountcode
ast_channel_accountcode
p->owner
p
p
owner
t = "";
t = ""
t
t
""
if (p->owner)		ama = ast_channel_amaflags(p->owner);	else		ama = 0;
p->owner
p
p
owner
ama = ast_channel_amaflags(p->owner);
ama = ast_channel_amaflags(p->owner)
ama
ama
ast_channel_amaflags(p->owner)
ast_channel_amaflags
ast_channel_amaflags
p->owner
p
p
owner
ama = 0;
ama = 0
ama
ama
0
if (!(tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno))		|| !(tmp2 = ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp), ama, "Local/%s@%s-%08x;2", p->exten, p->context, generated_seqno))) {		if (tmp) {			tmp = ast_channel_release(tmp);		}		ast_log(LOG_WARNING, "Unable to allocate channel structure(s)\n");		return NULL;	}
!(tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno))		|| !(tmp2 = ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp), ama, "Local/%s@%s-%08x;2", p->exten, p->context, generated_seqno))
!(tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno))
(tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno))
tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno)
tmp
tmp
ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno)
ast_channel_alloc
ast_channel_alloc
1
state
state
0
0
t
t
p->exten
p
p
exten
p->context
p
p
context
linkedid
linkedid
ama
ama
"Local/%s@%s-%08x;1"
p->exten
p
p
exten
p->context
p
p
context
generated_seqno
generated_seqno
!(tmp2 = ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp), ama, "Local/%s@%s-%08x;2", p->exten, p->context, generated_seqno))
(tmp2 = ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp), ama, "Local/%s@%s-%08x;2", p->exten, p->context, generated_seqno))
tmp2 = ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp), ama, "Local/%s@%s-%08x;2", p->exten, p->context, generated_seqno)
tmp2
tmp2
ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp), ama, "Local/%s@%s-%08x;2", p->exten, p->context, generated_seqno)
ast_channel_alloc
ast_channel_alloc
1
AST_STATE_RING
AST_STATE_RING
0
0
t
t
p->exten
p
p
exten
p->context
p
p
context
ast_channel_linkedid(tmp)
ast_channel_linkedid
ast_channel_linkedid
tmp
tmp
ama
ama
"Local/%s@%s-%08x;2"
p->exten
p
p
exten
p->context
p
p
context
generated_seqno
generated_seqno
{		if (tmp) {			tmp = ast_channel_release(tmp);		}		ast_log(LOG_WARNING, "Unable to allocate channel structure(s)\n");		return NULL;	}
if (tmp) {			tmp = ast_channel_release(tmp);		}
tmp
tmp
{			tmp = ast_channel_release(tmp);		}
tmp = ast_channel_release(tmp);
tmp = ast_channel_release(tmp)
tmp
tmp
ast_channel_release(tmp)
ast_channel_release
ast_channel_release
tmp
tmp
ast_log(LOG_WARNING, "Unable to allocate channel structure(s)\n");
ast_log(LOG_WARNING, "Unable to allocate channel structure(s)\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to allocate channel structure(s)\n"
return NULL;
NULL
NULL
if (callid) {		ast_channel_callid_set(tmp, callid);		ast_channel_callid_set(tmp2, callid);	}
callid
callid
{		ast_channel_callid_set(tmp, callid);		ast_channel_callid_set(tmp2, callid);	}
ast_channel_callid_set(tmp, callid);
ast_channel_callid_set(tmp, callid)
ast_channel_callid_set
ast_channel_callid_set
tmp
tmp
callid
callid
ast_channel_callid_set(tmp2, callid);
ast_channel_callid_set(tmp2, callid)
ast_channel_callid_set
ast_channel_callid_set
tmp2
tmp2
callid
callid
ast_channel_tech_set(tmp, &local_tech);
ast_channel_tech_set(tmp, &local_tech)
ast_channel_tech_set
ast_channel_tech_set
tmp
tmp
&local_tech
local_tech
local_tech
ast_channel_tech_set(tmp2, &local_tech);
ast_channel_tech_set(tmp2, &local_tech)
ast_channel_tech_set
ast_channel_tech_set
tmp2
tmp2
&local_tech
local_tech
local_tech
ast_format_cap_copy(ast_channel_nativeformats(tmp), p->reqcap);
ast_format_cap_copy(ast_channel_nativeformats(tmp), p->reqcap)
ast_format_cap_copy
ast_format_cap_copy
ast_channel_nativeformats(tmp)
ast_channel_nativeformats
ast_channel_nativeformats
tmp
tmp
p->reqcap
p
p
reqcap
ast_format_cap_copy(ast_channel_nativeformats(tmp2), p->reqcap);
ast_format_cap_copy(ast_channel_nativeformats(tmp2), p->reqcap)
ast_format_cap_copy
ast_format_cap_copy
ast_channel_nativeformats(tmp2)
ast_channel_nativeformats
ast_channel_nativeformats
tmp2
tmp2
p->reqcap
p
p
reqcap
ast_best_codec(p->reqcap, &fmt);
ast_best_codec(p->reqcap, &fmt)
ast_best_codec
ast_best_codec
p->reqcap
p
p
reqcap
&fmt
fmt
fmt
ast_format_copy(ast_channel_writeformat(tmp), &fmt);
ast_format_copy(ast_channel_writeformat(tmp), &fmt)
ast_format_copy
ast_format_copy
ast_channel_writeformat(tmp)
ast_channel_writeformat
ast_channel_writeformat
tmp
tmp
&fmt
fmt
fmt
ast_format_copy(ast_channel_writeformat(tmp2), &fmt);
ast_format_copy(ast_channel_writeformat(tmp2), &fmt)
ast_format_copy
ast_format_copy
ast_channel_writeformat(tmp2)
ast_channel_writeformat
ast_channel_writeformat
tmp2
tmp2
&fmt
fmt
fmt
ast_format_copy(ast_channel_rawwriteformat(tmp), &fmt);
ast_format_copy(ast_channel_rawwriteformat(tmp), &fmt)
ast_format_copy
ast_format_copy
ast_channel_rawwriteformat(tmp)
ast_channel_rawwriteformat
ast_channel_rawwriteformat
tmp
tmp
&fmt
fmt
fmt
ast_format_copy(ast_channel_rawwriteformat(tmp2), &fmt);
ast_format_copy(ast_channel_rawwriteformat(tmp2), &fmt)
ast_format_copy
ast_format_copy
ast_channel_rawwriteformat(tmp2)
ast_channel_rawwriteformat
ast_channel_rawwriteformat
tmp2
tmp2
&fmt
fmt
fmt
ast_format_copy(ast_channel_readformat(tmp), &fmt);
ast_format_copy(ast_channel_readformat(tmp), &fmt)
ast_format_copy
ast_format_copy
ast_channel_readformat(tmp)
ast_channel_readformat
ast_channel_readformat
tmp
tmp
&fmt
fmt
fmt
ast_format_copy(ast_channel_readformat(tmp2), &fmt);
ast_format_copy(ast_channel_readformat(tmp2), &fmt)
ast_format_copy
ast_format_copy
ast_channel_readformat(tmp2)
ast_channel_readformat
ast_channel_readformat
tmp2
tmp2
&fmt
fmt
fmt
ast_format_copy(ast_channel_rawreadformat(tmp), &fmt);
ast_format_copy(ast_channel_rawreadformat(tmp), &fmt)
ast_format_copy
ast_format_copy
ast_channel_rawreadformat(tmp)
ast_channel_rawreadformat
ast_channel_rawreadformat
tmp
tmp
&fmt
fmt
fmt
ast_format_copy(ast_channel_rawreadformat(tmp2), &fmt);
ast_format_copy(ast_channel_rawreadformat(tmp2), &fmt)
ast_format_copy
ast_format_copy
ast_channel_rawreadformat(tmp2)
ast_channel_rawreadformat
ast_channel_rawreadformat
tmp2
tmp2
&fmt
fmt
fmt
ast_channel_tech_pvt_set(tmp, p);
ast_channel_tech_pvt_set(tmp, p)
ast_channel_tech_pvt_set
ast_channel_tech_pvt_set
tmp
tmp
p
p
ast_channel_tech_pvt_set(tmp2, p);
ast_channel_tech_pvt_set(tmp2, p)
ast_channel_tech_pvt_set
ast_channel_tech_pvt_set
tmp2
tmp2
p
p
ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE);
ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE)
ast_set_flag
ast_set_flag
ast_channel_flags(tmp)
ast_channel_flags
ast_channel_flags
tmp
tmp
AST_FLAG_DISABLE_DEVSTATE_CACHE
AST_FLAG_DISABLE_DEVSTATE_CACHE
ast_set_flag(ast_channel_flags(tmp2), AST_FLAG_DISABLE_DEVSTATE_CACHE);
ast_set_flag(ast_channel_flags(tmp2), AST_FLAG_DISABLE_DEVSTATE_CACHE)
ast_set_flag
ast_set_flag
ast_channel_flags(tmp2)
ast_channel_flags
ast_channel_flags
tmp2
tmp2
AST_FLAG_DISABLE_DEVSTATE_CACHE
AST_FLAG_DISABLE_DEVSTATE_CACHE
p->owner = tmp;
p->owner = tmp
p->owner
p
p
owner
tmp
tmp
p->chan = tmp2;
p->chan = tmp2
p->chan
p
p
chan
tmp2
tmp2
ast_channel_context_set(tmp, p->context);
ast_channel_context_set(tmp, p->context)
ast_channel_context_set
ast_channel_context_set
tmp
tmp
p->context
p
p
context
ast_channel_context_set(tmp2, p->context);
ast_channel_context_set(tmp2, p->context)
ast_channel_context_set
ast_channel_context_set
tmp2
tmp2
p->context
p
p
context
ast_channel_exten_set(tmp2, p->exten);
ast_channel_exten_set(tmp2, p->exten)
ast_channel_exten_set
ast_channel_exten_set
tmp2
tmp2
p->exten
p
p
exten
ast_channel_priority_set(tmp, 1);
ast_channel_priority_set(tmp, 1)
ast_channel_priority_set
ast_channel_priority_set
tmp
tmp
1
ast_channel_priority_set(tmp2, 1);
ast_channel_priority_set(tmp2, 1)
ast_channel_priority_set
ast_channel_priority_set
tmp2
tmp2
1
ast_jb_configure(tmp, &p->jb_conf);
ast_jb_configure(tmp, &p->jb_conf)
ast_jb_configure
ast_jb_configure
tmp
tmp
&p->jb_conf
p->jb_conf
p
p
jb_conf
return tmp;
tmp
tmp
-----joern-----
(71,93,0)
(87,140,0)
(120,107,0)
(64,90,0)
(167,85,0)
(134,93,0)
(155,57,0)
(162,136,0)
(119,165,0)
(243,38,0)
(128,179,0)
(165,181,0)
(195,26,0)
(146,33,0)
(132,124,0)
(46,165,0)
(100,38,0)
(24,151,0)
(227,170,0)
(166,98,0)
(249,170,0)
(197,76,0)
(244,93,0)
(63,91,0)
(222,76,0)
(133,2,0)
(178,140,0)
(182,140,0)
(141,51,0)
(29,179,0)
(207,43,0)
(55,208,0)
(94,93,0)
(52,165,0)
(29,47,0)
(125,148,0)
(153,170,0)
(4,107,0)
(130,38,0)
(31,179,0)
(22,199,0)
(82,188,0)
(179,12,0)
(206,140,0)
(30,140,0)
(18,47,0)
(103,77,0)
(100,152,0)
(79,90,0)
(110,38,0)
(30,138,0)
(50,237,0)
(21,14,0)
(225,227,0)
(164,107,0)
(185,140,0)
(126,252,0)
(17,109,0)
(247,223,0)
(153,122,0)
(189,190,0)
(88,170,0)
(65,140,0)
(27,208,0)
(233,178,0)
(150,119,0)
(33,38,0)
(139,6,0)
(97,238,0)
(96,54,0)
(205,29,0)
(57,155,0)
(110,47,0)
(64,199,0)
(43,140,0)
(42,81,0)
(143,206,0)
(118,170,0)
(238,68,0)
(187,196,0)
(151,228,0)
(19,152,0)
(107,38,0)
(48,206,0)
(70,237,0)
(93,179,0)
(41,227,0)
(60,236,0)
(200,228,0)
(239,241,0)
(131,140,0)
(236,38,0)
(10,110,0)
(119,38,0)
(99,140,0)
(18,44,0)
(217,34,0)
(13,44,0)
(104,119,0)
(32,98,0)
(85,167,0)
(30,14,0)
(93,33,0)
(93,134,0)
(34,183,0)
(40,61,0)
(190,189,0)
(32,204,0)
(127,189,0)
(165,185,0)
(92,241,0)
(178,233,0)
(170,74,0)
(144,140,0)
(93,81,0)
(165,161,0)
(185,85,0)
(188,38,0)
(66,249,0)
(112,161,0)
(129,33,0)
(12,179,0)
(212,98,0)
(29,140,0)
(187,140,0)
(110,140,0)
(191,155,0)
(190,179,0)
(165,81,0)
(230,225,0)
(200,47,0)
(9,81,0)
(148,140,0)
(37,161,0)
(176,200,0)
(174,187,0)
(34,217,0)
(72,251,0)
(153,140,0)
(93,149,0)
(121,90,0)
(245,124,0)
(161,165,0)
(98,32,0)
(1,140,0)
(246,77,0)
(54,140,0)
(208,47,0)
(193,241,0)
(8,165,0)
(241,239,0)
(241,38,0)
(131,170,0)
(88,140,0)
(85,185,0)
(106,165,0)
(36,160,0)
(74,234,0)
(2,49,0)
(95,132,0)
(228,151,0)
(134,38,0)
(77,246,0)
(202,153,0)
(93,26,0)
(219,190,0)
(167,116,0)
(93,185,0)
(136,19,0)
(224,140,0)
(109,252,0)
(43,170,0)
(184,65,0)
(78,47,0)
(61,179,0)
(152,100,0)
(165,119,0)
(83,165,0)
(138,170,0)
(250,44,0)
(217,47,0)
(243,182,0)
(180,204,0)
(154,138,0)
(172,47,0)
(157,182,0)
(136,38,0)
(187,174,0)
(152,19,0)
(216,100,0)
(209,165,0)
(74,170,0)
(7,131,0)
(45,140,0)
(214,110,0)
(160,179,0)
(84,6,0)
(246,142,0)
(71,38,0)
(158,38,0)
(183,34,0)
(3,156,0)
(165,105,0)
(234,12,0)
(246,140,0)
(182,47,0)
(238,170,0)
(69,132,0)
(5,188,0)
(51,170,0)
(90,64,0)
(201,183,0)
(16,93,0)
(160,164,0)
(33,93,0)
(217,179,0)
(81,9,0)
(249,178,0)
(110,179,0)
(91,29,0)
(131,239,0)
(240,173,0)
(11,196,0)
(77,170,0)
(116,167,0)
(178,249,0)
(138,30,0)
(20,50,0)
(39,108,0)
(192,71,0)
(165,149,0)
(231,130,0)
(186,158,0)
(58,134,0)
(64,140,0)
(80,2,0)
(54,170,0)
(229,88,0)
(34,140,0)
(236,93,0)
(200,179,0)
(211,136,0)
(165,130,0)
(147,26,0)
(242,142,0)
(23,236,0)
(194,140,0)
(170,165,0)
(85,251,0)
(14,30,0)
(164,160,0)
(89,191,0)
(164,140,0)
(208,179,0)
(148,179,0)
(248,165,0)
(65,170,0)
(155,191,0)
(156,38,0)
(56,245,0)
(155,140,0)
(18,179,0)
(115,100,0)
(12,234,0)
(113,93,0)
(163,130,0)
(198,238,0)
(156,9,0)
(54,38,0)
(252,170,0)
(6,84,0)
(158,88,0)
(148,108,0)
(168,124,0)
(51,93,0)
(196,179,0)
(137,140,0)
(84,140,0)
(213,245,0)
(220,71,0)
(148,47,0)
(32,140,0)
(196,187,0)
(91,38,0)
(93,236,0)
(49,173,0)
(160,47,0)
(203,50,0)
(108,148,0)
(234,74,0)
(142,246,0)
(208,68,0)
(88,158,0)
(75,122,0)
(226,93,0)
(49,2,0)
(237,140,0)
(223,167,0)
(171,243,0)
(251,85,0)
(98,38,0)
(62,57,0)
(61,47,0)
(215,54,0)
(189,140,0)
(228,200,0)
(15,43,0)
(44,18,0)
(50,38,0)
(145,140,0)
(93,71,0)
(204,170,0)
(210,165,0)
(76,38,0)
(53,140,0)
(28,18,0)
(102,217,0)
(90,38,0)
(2,38,0)
(239,131,0)
(190,47,0)
(196,47,0)
(227,225,0)
(167,223,0)
(238,86,0)
(109,73,0)
(93,51,0)
(123,165,0)
(221,134,0)
(177,185,0)
(179,93,0)
(235,149,0)
(182,179,0)
(84,31,0)
(107,164,0)
(204,32,0)
(225,140,0)
(25,93,0)
(93,173,0)
(130,165,0)
(47,140,0)
(228,140,0)
(165,26,0)
(0,61,0)
(165,173,0)
(173,49,0)
(19,136,0)
(199,64,0)
(31,84,0)
(135,31,0)
(44,38,0)
(232,156,0)
(122,153,0)
(161,38,0)
(169,149,0)
(57,170,0)
(182,243,0)
(111,93,0)
(59,158,0)
(165,170,0)
(67,93,0)
(165,76,0)
(101,243,0)
(114,233,0)
(9,156,0)
(76,165,0)
(61,140,0)
(31,47,0)
(18,140,0)
(252,109,0)
(237,170,0)
(159,174,0)
(208,86,0)
(175,91,0)
(56,65,0)
(249,170,1)
(161,38,1)
(77,170,1)
(46,52,1)
(3,42,1)
(93,244,1)
(25,51,1)
(182,179,1)
(141,236,1)
(222,197,1)
(49,2,1)
(214,54,1)
(42,19,1)
(79,121,1)
(62,34,1)
(93,81,1)
(166,204,1)
(217,102,1)
(188,38,1)
(93,134,1)
(66,84,1)
(165,26,1)
(139,31,1)
(81,9,1)
(192,134,1)
(113,16,1)
(11,155,1)
(200,176,1)
(173,49,1)
(190,219,1)
(76,222,1)
(131,170,1)
(28,182,1)
(138,154,1)
(57,62,1)
(102,178,1)
(95,109,1)
(146,111,1)
(147,188,1)
(51,141,1)
(106,123,1)
(96,215,1)
(55,238,1)
(44,38,1)
(7,61,1)
(76,38,1)
(193,7,1)
(183,201,1)
(130,163,1)
(138,170,1)
(150,104,1)
(103,64,1)
(94,128,1)
(252,170,1)
(208,179,1)
(167,223,1)
(217,179,1)
(220,192,1)
(82,5,1)
(64,199,1)
(178,233,1)
(71,38,1)
(75,202,1)
(40,43,1)
(208,68,1)
(93,51,1)
(162,211,1)
(58,221,1)
(125,153,1)
(161,112,1)
(165,119,1)
(153,170,1)
(155,191,1)
(165,185,1)
(84,6,1)
(85,167,1)
(136,162,1)
(29,47,1)
(93,173,1)
(0,40,1)
(213,132,1)
(54,170,1)
(65,170,1)
(238,97,1)
(65,184,1)
(246,142,1)
(165,209,1)
(200,179,1)
(120,4,1)
(135,30,1)
(107,38,1)
(31,135,1)
(169,19,1)
(225,230,1)
(88,170,1)
(63,237,1)
(27,55,1)
(30,14,1)
(93,26,1)
(234,12,1)
(167,116,1)
(92,193,1)
(97,198,1)
(250,13,1)
(177,47,1)
(29,179,1)
(112,37,1)
(18,179,1)
(205,91,1)
(243,38,1)
(237,170,1)
(133,80,1)
(202,35,1)
(10,214,1)
(165,181,1)
(100,38,1)
(59,186,1)
(100,216,1)
(246,77,1)
(2,38,1)
(111,113,1)
(148,108,1)
(101,171,1)
(114,249,1)
(31,47,1)
(163,231,1)
(22,90,1)
(130,38,1)
(108,39,1)
(98,38,1)
(98,212,1)
(241,38,1)
(128,74,1)
(37,46,1)
(203,20,1)
(118,173,1)
(202,208,1)
(243,101,1)
(129,146,1)
(182,47,1)
(4,160,1)
(61,179,1)
(110,38,1)
(217,47,1)
(165,149,1)
(134,38,1)
(110,47,1)
(117,234,1)
(104,161,1)
(12,179,1)
(54,96,1)
(245,213,1)
(17,117,1)
(122,75,1)
(165,105,1)
(70,50,1)
(78,206,1)
(238,68,1)
(230,227,1)
(74,170,1)
(60,23,1)
(242,77,1)
(200,47,1)
(186,229,1)
(21,138,1)
(24,200,1)
(165,173,1)
(93,149,1)
(115,136,1)
(175,63,1)
(172,78,1)
(54,38,1)
(174,159,1)
(252,126,1)
(69,95,1)
(91,175,1)
(90,38,1)
(107,120,1)
(155,57,1)
(93,71,1)
(71,220,1)
(196,11,1)
(85,251,1)
(229,29,1)
(6,139,1)
(237,70,1)
(165,81,1)
(83,248,1)
(251,72,1)
(248,210,1)
(231,83,1)
(179,93,1)
(171,157,1)
(247,177,1)
(57,170,1)
(15,207,1)
(190,47,1)
(91,38,1)
(109,252,1)
(164,107,1)
(195,147,1)
(44,250,1)
(2,133,1)
(204,180,1)
(170,165,1)
(165,161,1)
(119,150,1)
(36,32,1)
(148,179,1)
(35,234,1)
(191,89,1)
(227,41,1)
(93,33,1)
(13,28,1)
(240,188,1)
(77,103,1)
(165,130,1)
(187,196,1)
(93,185,1)
(154,228,1)
(110,179,1)
(126,17,1)
(14,21,1)
(165,76,1)
(226,94,1)
(233,114,1)
(206,143,1)
(238,170,1)
(201,217,1)
(232,3,1)
(142,242,1)
(235,169,1)
(160,36,1)
(26,195,1)
(32,204,1)
(216,115,1)
(199,22,1)
(31,179,1)
(208,47,1)
(180,148,1)
(219,225,1)
(185,85,1)
(29,205,1)
(127,190,1)
(184,131,1)
(8,106,1)
(23,33,1)
(148,47,1)
(207,18,1)
(187,174,1)
(50,38,1)
(18,44,1)
(43,15,1)
(209,76,1)
(208,27,1)
(43,170,1)
(34,183,1)
(18,47,1)
(9,156,1)
(5,81,1)
(95,117,1)
(34,217,1)
(93,236,1)
(196,47,1)
(121,164,1)
(67,25,1)
(210,119,1)
(189,190,1)
(189,127,1)
(249,66,1)
(152,100,1)
(156,232,1)
(190,179,1)
(197,130,1)
(228,151,1)
(52,8,1)
(160,47,1)
(151,24,1)
(56,65,1)
(64,90,1)
(110,10,1)
(72,167,1)
(89,57,1)
(236,60,1)
(132,69,1)
(158,59,1)
(156,38,1)
(118,26,1)
(136,38,1)
(196,179,1)
(88,158,1)
(182,243,1)
(32,98,1)
(50,203,1)
(228,200,1)
(158,38,1)
(241,92,1)
(19,152,1)
(30,138,1)
(47,172,1)
(236,38,1)
(20,189,1)
(225,227,1)
(176,246,1)
(164,160,1)
(119,38,1)
(198,35,1)
(41,110,1)
(223,247,1)
(80,240,1)
(188,82,1)
(239,241,1)
(51,170,1)
(16,226,1)
(39,125,1)
(157,88,1)
(178,249,1)
(212,166,1)
(134,58,1)
(90,79,1)
(149,235,1)
(160,179,1)
(204,170,1)
(84,31,1)
(61,0,1)
(227,170,1)
(123,118,1)
(215,187,1)
(61,47,1)
(244,71,1)
(33,129,1)
(211,185,1)
(143,48,1)
(131,239,1)
(234,74,1)
(159,196,1)
(19,136,1)
(33,38,1)
(221,67,1)
(5,149,1)
(56,245,1)
(153,122,1)
(151,234,2)
(18,44,2)
(204,234,2)
(147,188,2)
(31,47,2)
(30,138,2)
(35,234,2)
(165,181,2)
(14,234,2)
(201,234,2)
(165,76,2)
(90,234,2)
(202,234,2)
(119,38,2)
(196,179,2)
(114,234,2)
(2,188,2)
(243,38,2)
(153,234,2)
(21,234,2)
(186,234,2)
(64,234,2)
(27,35,2)
(93,149,2)
(65,170,2)
(88,234,2)
(16,74,2)
(250,234,2)
(12,74,2)
(54,234,2)
(88,158,2)
(165,149,2)
(60,74,2)
(217,234,2)
(26,188,2)
(221,74,2)
(146,74,2)
(30,234,2)
(141,74,2)
(125,234,2)
(237,234,2)
(148,47,2)
(93,134,2)
(66,234,2)
(228,151,2)
(159,234,2)
(191,234,2)
(165,130,2)
(234,74,2)
(41,234,2)
(164,160,2)
(4,234,2)
(182,243,2)
(227,234,2)
(155,234,2)
(122,234,2)
(208,47,2)
(71,74,2)
(91,234,2)
(227,170,2)
(167,116,2)
(93,33,2)
(33,74,2)
(238,35,2)
(217,179,2)
(3,19,2)
(61,47,2)
(208,35,2)
(67,74,2)
(102,234,2)
(92,234,2)
(81,9,2)
(241,38,2)
(56,245,2)
(121,234,2)
(133,188,2)
(110,234,2)
(252,170,2)
(9,19,2)
(240,188,2)
(187,196,2)
(54,38,2)
(57,170,2)
(179,74,2)
(42,19,2)
(196,47,2)
(32,204,2)
(11,234,2)
(70,234,2)
(50,38,2)
(165,119,2)
(110,47,2)
(153,170,2)
(164,107,2)
(160,179,2)
(239,234,2)
(190,179,2)
(7,234,2)
(229,234,2)
(120,234,2)
(236,74,2)
(226,74,2)
(97,35,2)
(111,74,2)
(30,14,2)
(178,233,2)
(63,234,2)
(19,136,2)
(166,234,2)
(20,234,2)
(85,167,2)
(44,38,2)
(200,47,2)
(101,234,2)
(243,234,2)
(23,74,2)
(69,234,2)
(167,223,2)
(160,47,2)
(139,234,2)
(152,100,2)
(158,38,2)
(212,234,2)
(34,217,2)
(236,38,2)
(62,234,2)
(135,234,2)
(246,77,2)
(58,74,2)
(51,74,2)
(178,249,2)
(22,234,2)
(96,234,2)
(34,234,2)
(12,179,2)
(59,234,2)
(127,234,2)
(61,179,2)
(213,234,2)
(182,179,2)
(214,234,2)
(148,179,2)
(61,234,2)
(25,74,2)
(109,252,2)
(188,38,2)
(24,234,2)
(217,47,2)
(225,227,2)
(134,38,2)
(2,38,2)
(249,170,2)
(176,234,2)
(237,170,2)
(100,136,2)
(108,234,2)
(225,234,2)
(165,81,2)
(98,38,2)
(44,234,2)
(95,234,2)
(107,234,2)
(164,234,2)
(180,234,2)
(93,51,2)
(71,38,2)
(28,234,2)
(136,38,2)
(205,234,2)
(18,47,2)
(76,38,2)
(185,85,2)
(149,19,2)
(100,38,2)
(230,234,2)
(18,234,2)
(130,38,2)
(6,234,2)
(10,234,2)
(98,234,2)
(80,188,2)
(235,19,2)
(182,47,2)
(241,234,2)
(165,161,2)
(169,19,2)
(113,74,2)
(103,234,2)
(94,74,2)
(239,241,2)
(193,234,2)
(175,234,2)
(165,26,2)
(155,191,2)
(129,74,2)
(154,234,2)
(199,234,2)
(165,185,2)
(131,239,2)
(232,19,2)
(173,188,2)
(165,105,2)
(93,236,2)
(252,117,2)
(29,234,2)
(36,234,2)
(208,68,2)
(9,156,2)
(200,179,2)
(65,234,2)
(93,173,2)
(126,117,2)
(171,234,2)
(220,74,2)
(64,90,2)
(54,170,2)
(49,188,2)
(84,31,2)
(238,68,2)
(208,179,2)
(29,47,2)
(170,165,2)
(228,200,2)
(158,234,2)
(93,74,2)
(200,234,2)
(190,47,2)
(117,234,2)
(246,142,2)
(174,234,2)
(184,234,2)
(34,183,2)
(31,179,2)
(29,179,2)
(17,117,2)
(219,234,2)
(74,170,2)
(89,234,2)
(40,234,2)
(43,234,2)
(50,234,2)
(51,170,2)
(198,35,2)
(91,38,2)
(189,234,2)
(204,170,2)
(39,234,2)
(18,179,2)
(207,234,2)
(110,179,2)
(84,6,2)
(192,74,2)
(93,26,2)
(203,234,2)
(190,234,2)
(33,38,2)
(109,117,2)
(0,234,2)
(245,234,2)
(131,234,2)
(216,136,2)
(79,234,2)
(84,234,2)
(189,190,2)
(148,234,2)
(49,2,2)
(77,234,2)
(77,170,2)
(242,234,2)
(90,38,2)
(93,185,2)
(155,57,2)
(32,98,2)
(19,152,2)
(55,35,2)
(115,136,2)
(161,38,2)
(31,234,2)
(156,19,2)
(107,38,2)
(138,170,2)
(132,234,2)
(156,38,2)
(32,234,2)
(138,234,2)
(234,12,2)
(56,65,2)
(88,170,2)
(85,251,2)
(178,234,2)
(131,170,2)
(187,174,2)
(183,234,2)
(75,234,2)
(81,19,2)
(173,49,2)
(246,234,2)
(110,38,2)
(244,74,2)
(142,234,2)
(57,234,2)
(238,170,2)
(15,234,2)
(249,234,2)
(13,234,2)
(93,71,2)
(134,74,2)
(152,136,2)
(233,234,2)
(157,234,2)
(187,234,2)
(64,199,2)
(179,93,2)
(148,108,2)
(128,74,2)
(196,234,2)
(165,173,2)
(195,188,2)
(93,81,2)
(228,234,2)
(160,234,2)
(43,170,2)
(182,234,2)
(153,122,2)
(215,234,2)
-----------------------------------
(0,1)
(1,tmp)
(2,p->owner)
(3,p)
(4,p)
(5,p)
(6,&fmt)
(7,tmp)
(8,0)
(9,ast_channel_accountcode(p->owner)
(10,p)
(11,tmp2)
(12,!(tmp2 = ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp)
(13,p)
(14,&fmt)
(15,1)
(16,0)
(17,tmp)
(18,ast_channel_exten_set(tmp2, p->exten)
(19,p->owner && ast_channel_accountcode(p->owner)
(20,p)
(21,fmt)
(22,fmt)
(23,p)
(24,fmt)
(25,ama)
(26,ama = 0)
(27,callid)
(28,tmp2)
(29,p->chan = tmp2)
(30,ast_format_copy(ast_channel_rawwriteformat(tmp)
(31,ast_channel_rawwriteformat(tmp2)
(32,ast_format_cap_copy(ast_channel_nativeformats(tmp)
(33,p->exten)
(34,ast_format_copy(ast_channel_readformat(tmp2)
(35,callid)
(36,tmp2)
(37,p)
(38,struct local_pvt *p)
(39,local_tech)
(40,tmp2)
(41,tmp)
(42,t)
(43,ast_channel_priority_set(tmp, 1)
(44,p->exten)
(45,t)
(46,t)
(47,*tmp2 = NULL)
(48,tmp)
(49,ast_channel_amaflags(p->owner)
(50,p->owner)
(51,ast_channel_linkedid(tmp)
(52,0)
(53,if (p->owner)
(54,ast_channel_tech_pvt_set(tmp, p)
(55,tmp2)
(56,RET)
(57,ast_channel_rawreadformat(tmp)
(58,exten)
(59,context)
(60,context)
(61,ast_channel_priority_set(tmp2, 1)
(62,tmp)
(63,p)
(64,ast_best_codec(p->reqcap, &fmt)
(65,return tmp;)
(66,tmp)
(67,"Local/%s@%s-%08x;2")
(68,struct ast_callid *callid)
(69,"Unable to allocate channel structure(s)
(70,tmp)
(71,p->context)
(72,1)
(73,)
(74,!(tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno)
(75,local_tech)
(76,p->context)
(77,ast_channel_writeformat(tmp)
(78,tmp2)
(79,reqcap)
(80,p)
(81,t = ast_channel_accountcode(p->owner)
(82,owner)
(83,"Local/%s@%s-%08x;1")
(84,ast_format_copy(ast_channel_rawwriteformat(tmp2)
(85,ast_atomic_fetchadd_int((int *)
(86,)
(87,ama)
(88,ast_channel_context_set(tmp, p->context)
(89,fmt)
(90,p->reqcap)
(91,p->chan)
(92,jb_conf)
(93,ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp)
(94,1)
(95,LOG_WARNING)
(96,p)
(97,callid)
(98,p->reqcap)
(99,if (p->owner && ast_channel_accountcode(p->owner)
(100,p->owner)
(101,context)
(102,tmp2)
(103,tmp)
(104,p)
(105,const char *linkedid)
(106,state)
(107,p->reqcap)
(108,&local_tech)
(109,tmp = ast_channel_release(tmp)
(110,ast_channel_tech_pvt_set(tmp2, p)
(111,t)
(112,exten)
(113,0)
(114,fmt)
(115,p)
(116,int *)
(117,tmp)
(118,tmp)
(119,p->context)
(120,reqcap)
(121,p)
(122,&local_tech)
(123,1)
(124,)
(125,tmp2)
(126,tmp)
(127,AST_FLAG_DISABLE_DEVSTATE_CACHE)
(128,tmp2)
(129,exten)
(130,p->exten)
(131,ast_jb_configure(tmp, &p->jb_conf)
(132,ast_log(LOG_WARNING, "Unable to allocate channel structure(s)
(133,owner)
(134,p->exten)
(135,tmp2)
(136,p->owner)
(137,generated_seqno)
(138,ast_channel_rawwriteformat(tmp)
(139,fmt)
(140,)
(141,tmp)
(142,&fmt)
(143,NULL)
(144,if (callid)
(145,fmt)
(146,p)
(147,ama)
(148,ast_channel_tech_set(tmp2, &local_tech)
(149,t = "")
(150,context)
(151,&fmt)
(152,ast_channel_accountcode(p->owner)
(153,ast_channel_tech_set(tmp, &local_tech)
(154,tmp)
(155,ast_format_copy(ast_channel_rawreadformat(tmp)
(156,p->owner)
(157,tmp2)
(158,p->context)
(159,fmt)
(160,ast_channel_nativeformats(tmp2)
(161,p->exten)
(162,owner)
(163,exten)
(164,ast_format_cap_copy(ast_channel_nativeformats(tmp2)
(165,ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno)
(166,p)
(167,(int *)
(168,if (tmp)
(169,t)
(170,tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno)
(171,p)
(172,NULL)
(173,ama = ast_channel_amaflags(p->owner)
(174,&fmt)
(175,chan)
(176,tmp2)
(177,generated_seqno)
(178,ast_format_copy(ast_channel_readformat(tmp)
(179,tmp2 = ast_channel_alloc(1, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp)
(180,tmp)
(181,int state)
(182,ast_channel_context_set(tmp2, p->context)
(183,&fmt)
(184,tmp)
(185,generated_seqno = ast_atomic_fetchadd_int((int *)
(186,p)
(187,ast_format_copy(ast_channel_rawreadformat(tmp2)
(188,p->owner)
(189,ast_set_flag(ast_channel_flags(tmp2)
(190,ast_channel_flags(tmp2)
(191,&fmt)
(192,p)
(193,p)
(194,tmp2)
(195,0)
(196,ast_channel_rawreadformat(tmp2)
(197,p)
(198,tmp)
(199,&fmt)
(200,ast_channel_writeformat(tmp2)
(201,fmt)
(202,tmp)
(203,owner)
(204,ast_channel_nativeformats(tmp)
(205,tmp2)
(206,*tmp = NULL)
(207,tmp)
(208,ast_channel_callid_set(tmp2, callid)
(209,generated_seqno)
(210,linkedid)
(211,p)
(212,reqcap)
(213,NULL)
(214,tmp2)
(215,tmp)
(216,owner)
(217,ast_channel_readformat(tmp2)
(218, AST_STATE_RING, 0, 0, t, p->exten, p->context, ast_channel_linkedid(tmp)
(219,tmp2)
(220,context)
(221,p)
(222,context)
(223,&name_sequence)
(224,if (!(tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno)
(225,ast_set_flag(ast_channel_flags(tmp)
(226,AST_STATE_RING)
(227,ast_channel_flags(tmp)
(228,ast_format_copy(ast_channel_writeformat(tmp2)
(229,tmp)
(230,AST_FLAG_DISABLE_DEVSTATE_CACHE)
(231,p)
(232,owner)
(233,&fmt)
(234,!(tmp = ast_channel_alloc(1, state, 0, 0, t, p->exten, p->context, linkedid, ama, "Local/%s@%s-%08x;1", p->exten, p->context, generated_seqno)
(235,"")
(236,p->context)
(237,p->owner = tmp)
(238,ast_channel_callid_set(tmp, callid)
(239,&p->jb_conf)
(240,ama)
(241,p->jb_conf)
(242,fmt)
(243,p->context)
(244,generated_seqno)
(245,return NULL;)
(246,ast_format_copy(ast_channel_writeformat(tmp)
(247,name_sequence)
(248,ama)
(249,ast_channel_readformat(tmp)
(250,exten)
(251,+1)
(252,ast_channel_release(tmp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^