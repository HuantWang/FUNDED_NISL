-----label-----
0
-----code-----
static void goodG2BSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData;
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2BSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
goodG2BSink()
goodG2BSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(22,10,0)
(36,26,0)
(8,26,0)
(5,35,0)
(1,36,0)
(6,10,0)
(40,35,0)
(0,3,0)
(9,4,0)
(27,7,0)
(13,26,0)
(23,12,0)
(4,28,0)
(26,10,0)
(32,3,0)
(20,33,0)
(2,15,0)
(31,11,0)
(13,10,0)
(4,9,0)
(11,39,0)
(24,23,0)
(33,20,0)
(11,23,0)
(35,12,0)
(16,0,0)
(39,11,0)
(26,33,0)
(14,6,0)
(25,8,0)
(34,12,0)
(0,23,0)
(21,27,0)
(39,33,0)
(36,10,0)
(30,36,0)
(17,9,0)
(29,26,0)
(3,0,0)
(37,23,0)
(11,15,0)
(33,26,0)
(18,8,0)
(19,13,0)
(15,11,0)
(6,26,0)
(33,39,0)
(25,18,1)
(1,30,1)
(36,1,1)
(19,36,1)
(11,23,1)
(37,24,1)
(36,26,1)
(30,4,1)
(9,17,1)
(33,20,1)
(14,13,1)
(3,32,1)
(6,26,1)
(38,6,1)
(32,16,1)
(2,31,1)
(8,25,1)
(38,27,1)
(0,23,1)
(17,8,1)
(18,26,1)
(11,15,1)
(27,21,1)
(13,19,1)
(13,26,1)
(26,33,1)
(31,29,1)
(15,2,1)
(30,8,1)
(16,23,1)
(4,9,1)
(33,39,1)
(8,26,1)
(29,0,1)
(6,14,1)
(0,3,1)
(39,11,1)
(21,0,1)
(23,37,1)
(17,8,2)
(6,26,2)
(8,0,2)
(13,26,2)
(31,0,2)
(13,0,2)
(6,0,2)
(39,11,2)
(21,0,2)
(0,23,2)
(26,0,2)
(19,0,2)
(36,26,2)
(33,0,2)
(18,0,2)
(14,0,2)
(1,0,2)
(33,39,2)
(36,0,2)
(39,0,2)
(11,23,2)
(4,9,2)
(26,33,2)
(8,26,2)
(2,0,2)
(30,0,2)
(9,8,2)
(11,0,2)
(33,20,2)
(4,8,2)
(27,0,2)
(25,0,2)
(11,15,2)
(0,3,2)
(29,0,2)
(15,0,2)
-----------------------------------
(0,data > strlen(HELLO_STRING)
(1,HELLO_STRING)
(2,char)
(3,strlen(HELLO_STRING)
(4,exit(-1)
(5,myString)
(6,free(myString)
(7,)
(8,myString == NULL)
(9,-1)
(10,)
(11,data*sizeof(char)
(12,)
(13,printLine(myString)
(14,myString)
(15,sizeof(char)
(16,data)
(17,1)
(18,myString)
(19,myString)
(20,char *)
(21,"Input is less than the length of the source string")
(22,if (myString == NULL)
(23,data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData)
(24,data)
(25,NULL)
(26,myString = (char *)
(27,printLine("Input is less than the length of the source string")
(28,)
(29,myString)
(30,myString)
(31,data)
(32,HELLO_STRING)
(33,(char *)
(34,data)
(35,)
(36,strcpy(myString, HELLO_STRING)
(37,CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData)
(38,RET)
(39,malloc(data*sizeof(char)
(40,if (data > strlen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^