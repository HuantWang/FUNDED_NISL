-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_08_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(staticReturnsTrue())
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
40,41
42,43
42,44
44,45
46,47
46,48
46,49
46,50
47,48
48,49
48,50
49,50
52,53
52,54
53,54
55,56
55,57
56,57
56,58
57,58
60,61
62,63
63,64
65,66
66,67
67,68
67,69
68,69
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,35,41,43,45,50,51,54,58,59,61,64,69,70
-----computeFrom-----
12,13
12,14
48,49
48,50
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_08_bad(){    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_08_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_08_bad
{    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(staticReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(7,26,0)
(4,20,0)
(35,17,0)
(22,1,0)
(23,28,0)
(9,1,0)
(29,28,0)
(5,8,0)
(28,29,0)
(32,33,0)
(36,18,0)
(25,1,0)
(13,10,0)
(28,8,0)
(6,32,0)
(11,33,0)
(28,0,0)
(30,20,0)
(16,32,0)
(12,7,0)
(31,18,0)
(10,8,0)
(32,2,0)
(33,8,0)
(21,18,0)
(8,1,0)
(15,17,0)
(0,28,0)
(14,0,0)
(27,36,0)
(0,18,0)
(20,17,0)
(17,3,0)
(8,10,0)
(33,32,0)
(34,32,1)
(0,28,1)
(12,0,1)
(28,29,1)
(18,21,1)
(32,33,1)
(13,5,1)
(6,16,1)
(14,36,1)
(33,8,1)
(28,8,1)
(19,34,1)
(16,24,1)
(30,34,1)
(20,4,1)
(19,0,1)
(7,12,1)
(11,6,1)
(10,13,1)
(33,11,1)
(14,18,1)
(4,30,1)
(21,31,1)
(31,20,1)
(28,23,1)
(27,7,1)
(36,27,1)
(24,8,1)
(23,14,1)
(8,10,1)
(0,18,1)
(34,24,1)
(36,18,1)
(7,0,2)
(33,24,2)
(33,8,2)
(32,24,2)
(0,34,2)
(20,34,2)
(36,18,2)
(4,34,2)
(28,0,2)
(14,34,2)
(14,0,2)
(16,24,2)
(0,28,2)
(23,0,2)
(23,34,2)
(0,0,2)
(12,0,2)
(31,34,2)
(36,0,2)
(27,0,2)
(0,18,2)
(28,8,2)
(30,34,2)
(21,34,2)
(11,24,2)
(18,34,2)
(28,29,2)
(8,10,2)
(28,34,2)
(32,33,2)
(6,24,2)
-----------------------------------
(0,i < (size_t)
(1,)
(2,)
(3,)
(4,0)
(5,count)
(6,"%d")
(7,printLine("Hello")
(8,count = -1)
(9,count)
(10,-1)
(11,count)
(12,"Hello")
(13,1)
(14,i)
(15,i)
(16,stdin)
(17,)
(18,i = 0)
(19,RET)
(20,i = 0)
(21,0)
(22,if(staticReturnsTrue()
(23,count)
(24,staticReturnsTrue()
(25,if(staticReturnsTrue()
(26,)
(27,i)
(28,(size_t)
(29,size_t)
(30,i)
(31,i)
(32,fscanf(stdin, "%d", &count)
(33,&count)
(34,staticReturnsTrue()
(35,for (i = 0; i < (size_t)
(36,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^