-----label-----
0
-----code-----
static void goodB2G2Sink(int count)
{
    if(goodB2G2Static)
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
23,25
24,25
24,26
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
34,36
34,37
34,38
35,36
36,37
36,38
37,38
40,41
40,42
41,42
43,44
43,45
44,45
44,46
45,46
48,49
50,51
51,52
53,54
54,55
55,56
55,57
56,57
-----nextToken-----
2,4,6,8,12,18,20,22,27,28,31,32,38,39,42,46,47,49,52,57,58
-----computeFrom-----
24,25
24,26
25,26
25,27
29,30
29,31
36,37
36,38
40,41
40,42
-----guardedBy-----
31,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2Sink(int count){    if(goodB2G2Static)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G2Sink(int count)
goodB2G2Sink
int count
int
count
count
{    if(goodB2G2Static)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
if(goodB2G2Static)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
goodB2G2Static
goodB2G2Static
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(4,33,0)
(32,15,0)
(25,29,0)
(25,27,0)
(28,17,0)
(14,25,0)
(3,18,0)
(10,1,0)
(31,15,0)
(8,12,0)
(7,15,0)
(16,5,0)
(23,22,0)
(27,25,0)
(0,18,0)
(6,25,0)
(11,19,0)
(32,18,0)
(1,27,0)
(1,29,0)
(2,17,0)
(22,17,0)
(15,29,0)
(12,18,0)
(17,21,0)
(27,1,0)
(19,24,0)
(30,22,0)
(26,1,0)
(15,32,0)
(13,32,0)
(15,7,0)
(9,32,1)
(9,20,1)
(1,26,1)
(11,32,1)
(8,19,1)
(27,1,1)
(19,11,1)
(12,18,1)
(13,12,1)
(13,18,1)
(25,14,1)
(15,7,1)
(31,13,1)
(14,6,1)
(6,1,1)
(22,30,1)
(32,18,1)
(0,27,1)
(27,25,1)
(32,15,1)
(9,27,1)
(30,23,1)
(18,3,1)
(15,31,1)
(26,10,1)
(15,29,1)
(3,0,1)
(25,29,1)
(10,22,1)
(1,29,1)
(12,8,1)
(23,20,1)
(13,27,2)
(3,27,2)
(30,20,2)
(10,20,2)
(27,20,2)
(14,1,2)
(15,7,2)
(22,20,2)
(6,1,2)
(32,32,2)
(12,18,2)
(12,32,2)
(27,25,2)
(1,29,2)
(15,29,2)
(15,27,2)
(18,27,2)
(31,32,2)
(27,1,2)
(15,32,2)
(32,15,2)
(31,27,2)
(19,32,2)
(13,32,2)
(25,1,2)
(0,27,2)
(8,32,2)
(32,27,2)
(23,20,2)
(32,18,2)
(26,20,2)
(1,20,2)
(11,32,2)
(25,29,2)
-----------------------------------
(0,i)
(1,count > 0)
(2,if (count > 0 && count <= 20)
(3,0)
(4,if(goodB2G2Static)
(5,)
(6,count)
(7,size_t)
(8,i)
(9,RET)
(10,count)
(11,"Hello")
(12,i++)
(13,i)
(14,20)
(15,(size_t)
(16,for (i = 0; i < (size_t)
(17,)
(18,i = 0)
(19,printLine("Hello")
(20,goodB2G2Static)
(21,)
(22,i = 0)
(23,i)
(24,)
(25,count <= 20)
(26,0)
(27,count > 0 && count <= 20)
(28,i)
(29,int count)
(30,0)
(31,count)
(32,i < (size_t)
(33,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^