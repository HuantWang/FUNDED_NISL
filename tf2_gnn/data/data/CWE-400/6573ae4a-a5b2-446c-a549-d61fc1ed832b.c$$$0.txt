-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_badSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData;
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_badSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_badSink()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_badSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(23,36,0)
(3,17,0)
(36,37,0)
(19,9,0)
(6,30,0)
(18,17,0)
(9,1,0)
(28,15,0)
(22,37,0)
(15,19,0)
(31,37,0)
(25,15,0)
(29,25,0)
(9,19,0)
(26,20,0)
(32,26,0)
(17,25,0)
(10,25,0)
(26,32,0)
(34,11,0)
(36,25,0)
(19,15,0)
(7,31,0)
(35,30,0)
(21,30,0)
(2,21,0)
(9,30,0)
(12,32,0)
(40,4,0)
(8,36,0)
(1,9,0)
(39,11,0)
(25,37,0)
(27,21,0)
(0,14,0)
(10,37,0)
(31,25,0)
(38,1,0)
(21,2,0)
(15,25,0)
(13,2,0)
(30,14,0)
(11,14,0)
(15,28,0)
(5,9,0)
(33,10,0)
(4,16,0)
(18,3,1)
(23,17,1)
(15,19,1)
(10,33,1)
(31,25,1)
(33,36,1)
(21,30,1)
(26,32,1)
(13,27,1)
(12,17,1)
(9,30,1)
(35,6,1)
(4,40,1)
(24,4,1)
(19,9,1)
(17,25,1)
(24,31,1)
(15,28,1)
(29,21,1)
(38,5,1)
(8,23,1)
(25,15,1)
(10,25,1)
(23,26,1)
(21,2,1)
(5,29,1)
(27,30,1)
(31,7,1)
(32,12,1)
(36,25,1)
(9,1,1)
(3,25,1)
(17,18,1)
(40,21,1)
(1,38,1)
(36,8,1)
(30,35,1)
(7,10,1)
(2,13,1)
(31,21,2)
(9,1,2)
(15,19,2)
(15,21,2)
(9,21,2)
(25,21,2)
(38,21,2)
(21,30,2)
(5,21,2)
(12,17,2)
(19,21,2)
(32,17,2)
(36,21,2)
(40,21,2)
(8,21,2)
(26,32,2)
(36,25,2)
(25,15,2)
(7,21,2)
(3,21,2)
(33,21,2)
(19,9,2)
(18,21,2)
(15,28,2)
(9,30,2)
(23,21,2)
(17,25,2)
(21,2,2)
(29,21,2)
(4,21,2)
(31,25,2)
(1,21,2)
(10,21,2)
(10,25,2)
(17,21,2)
(26,17,2)
-----------------------------------
(0,data)
(1,sizeof(char)
(2,strlen(HELLO_STRING)
(3,myString)
(4,printLine("Input is less than the length of the source string")
(5,data)
(6,data)
(7,myString)
(8,HELLO_STRING)
(9,data*sizeof(char)
(10,printLine(myString)
(11,)
(12,1)
(13,HELLO_STRING)
(14,)
(15,(char *)
(16,)
(17,myString == NULL)
(18,NULL)
(19,malloc(data*sizeof(char)
(20,)
(21,data > strlen(HELLO_STRING)
(22,if (myString == NULL)
(23,myString)
(24,RET)
(25,myString = (char *)
(26,exit(-1)
(27,data)
(28,char *)
(29,myString)
(30,data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData)
(31,free(myString)
(32,-1)
(33,myString)
(34,myString)
(35,CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData)
(36,strcpy(myString, HELLO_STRING)
(37,)
(38,char)
(39,if (data > strlen(HELLO_STRING)
(40,"Input is less than the length of the source string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^