-----label-----
0
-----code-----
static int serve_infinite(ne_socket *sock, void *ud)
{
    struct infinite *i = ud;

    CALL(discard_request(sock));

    SEND_STRING(sock, i->header);

    while (server_send(sock, i->repeat, strlen(i->repeat)) == 0)
        /* nullop */;
    
    return OK;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
16,19
16,20
16,21
17,18
18,19
18,20
19,20
21,22
21,23
21,24
24,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
32,33
34,35
36,37
37,38
37,39
37,40
38,39
40,41
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
48,50
48,51
48,52
49,50
51,52
53,54
53,55
54,55
57,58
57,59
58,59
60,61
60,62
61,62
66,67
67,68
-----nextToken-----
2,4,7,9,10,12,14,15,20,22,23,26,30,33,35,39,41,44,45,50,52,55,56,59,62,63,64,65,68
-----computeFrom-----
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;NullStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int serve_infinite(ne_socket *sock, void *ud){    struct infinite *i = ud;    CALL(discard_request(sock));    SEND_STRING(sock, i->header);    while (server_send(sock, i->repeat, strlen(i->repeat)) == 0)        /* nullop */;        return OK;}
static int
serve_infinite(ne_socket *sock, void *ud)
serve_infinite
ne_socket *sock
ne_socket
ne_socket
*sock
*
sock
void *ud
void
*ud
*
ud
{    struct infinite *i = ud;    CALL(discard_request(sock));    SEND_STRING(sock, i->header);    while (server_send(sock, i->repeat, strlen(i->repeat)) == 0)        /* nullop */;        return OK;}
struct infinite *i = ud;
struct infinite *i = ud;
struct infinite
infinite
*i = ud
*
i
= ud
ud
ud
CALL(discard_request(sock));
CALL(discard_request(sock))
CALL
CALL
discard_request(sock)
discard_request
discard_request
sock
sock
SEND_STRING(sock, i->header);
SEND_STRING(sock, i->header)
SEND_STRING
SEND_STRING
sock
sock
i->header
i
i
header
while (server_send(sock, i->repeat, strlen(i->repeat)) == 0)        /* nullop */;
server_send(sock, i->repeat, strlen(i->repeat)) == 0
server_send(sock, i->repeat, strlen(i->repeat))
server_send
server_send
sock
sock
i->repeat
i
i
repeat
strlen(i->repeat)
strlen
strlen
i->repeat
i
i
repeat
0
;
return OK;
OK
OK
-----joern-----
(2,15,0)
(10,12,0)
(8,27,0)
(24,19,0)
(0,11,0)
(18,19,0)
(27,28,0)
(27,6,0)
(4,5,0)
(15,13,0)
(23,11,0)
(20,4,0)
(19,13,0)
(2,6,0)
(7,5,0)
(19,12,0)
(21,6,0)
(19,16,0)
(4,27,0)
(19,24,0)
(16,19,0)
(5,4,0)
(15,2,0)
(1,4,0)
(11,16,0)
(5,6,0)
(5,13,0)
(25,12,0)
(11,27,0)
(29,14,0)
(12,19,0)
(3,6,0)
(12,27,0)
(14,6,0)
(22,15,0)
(9,24,0)
(16,11,0)
(26,14,0)
(17,27,0)
(24,9,1)
(5,13,1)
(10,25,1)
(18,24,1)
(2,15,1)
(19,13,1)
(7,2,1)
(29,14,1)
(16,11,1)
(20,7,1)
(14,26,1)
(26,24,1)
(25,18,1)
(27,28,1)
(23,0,1)
(18,5,1)
(22,27,1)
(15,13,1)
(15,22,1)
(12,27,1)
(4,1,1)
(9,19,1)
(0,12,1)
(4,27,1)
(11,27,1)
(19,16,1)
(5,4,1)
(12,10,1)
(11,23,1)
(27,17,1)
(24,19,1)
(17,8,1)
(1,20,1)
(19,12,1)
(24,24,2)
(5,13,2)
(18,24,2)
(9,24,2)
(29,14,2)
(23,24,2)
(15,13,2)
(12,27,2)
(24,19,2)
(19,12,2)
(4,27,2)
(12,24,2)
(19,13,2)
(2,15,2)
(16,11,2)
(27,28,2)
(11,24,2)
(25,24,2)
(11,27,2)
(19,16,2)
(0,24,2)
(10,24,2)
(5,4,2)
(19,24,2)
(16,24,2)
-----------------------------------
(0,i)
(1,header)
(2,CALL(discard_request(sock)
(3,i)
(4,i->header)
(5,SEND_STRING(sock, i->header)
(6,)
(7,sock)
(8,i)
(9,0)
(10,repeat)
(11,i->repeat)
(12,i->repeat)
(13,ne_socket *sock)
(14,return OK;)
(15,discard_request(sock)
(16,strlen(i->repeat)
(17,ud)
(18,sock)
(19,server_send(sock, i->repeat, strlen(i->repeat)
(20,i)
(21,while (server_send(sock, i->repeat, strlen(i->repeat)
(22,sock)
(23,repeat)
(24,server_send(sock, i->repeat, strlen(i->repeat)
(25,i)
(26,OK)
(27,*i = ud)
(28,void *ud)
(29,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^