-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_03_bad()
{
    int * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
72,74
75,76
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,38,41,42,46,48,53,55,60,61,62,66,69,70,73,74,76
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
37,38
37,39
44,45
44,46
57,58
57,59
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_03_bad(){    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_03_bad()
CWE401_Memory_Leak__int_realloc_03_bad
{    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(21,10,0)
(29,19,0)
(7,3,0)
(22,11,0)
(41,37,0)
(6,35,0)
(37,13,0)
(33,19,0)
(26,11,0)
(35,6,0)
(8,5,0)
(30,21,0)
(4,8,0)
(24,29,0)
(2,3,0)
(9,19,0)
(23,36,0)
(9,37,0)
(34,3,0)
(31,35,0)
(15,31,0)
(10,13,0)
(31,29,0)
(21,37,0)
(18,17,0)
(16,6,0)
(29,31,0)
(36,19,0)
(29,24,0)
(1,35,0)
(38,9,0)
(35,31,0)
(8,4,0)
(10,21,0)
(19,29,0)
(17,3,0)
(14,13,0)
(20,40,0)
(31,17,0)
(0,40,0)
(27,4,0)
(39,36,0)
(21,19,0)
(12,21,0)
(32,9,0)
(25,17,0)
(19,13,0)
(36,39,1)
(21,19,1)
(32,38,1)
(6,16,1)
(33,40,1)
(18,25,1)
(12,37,1)
(38,8,1)
(26,22,1)
(1,15,1)
(17,18,1)
(0,17,1)
(40,20,1)
(41,9,1)
(20,0,1)
(27,36,1)
(21,30,1)
(31,35,1)
(10,21,1)
(21,37,1)
(22,10,1)
(15,33,1)
(38,36,1)
(29,31,1)
(8,4,1)
(35,6,1)
(30,12,1)
(4,27,1)
(16,1,1)
(19,29,1)
(31,17,1)
(28,11,1)
(36,19,1)
(9,32,1)
(37,41,1)
(11,26,1)
(29,24,1)
(23,19,1)
(39,23,1)
(22,40,1)
(9,19,1)
(21,37,2)
(27,36,2)
(16,40,2)
(30,40,2)
(19,29,2)
(21,19,2)
(12,40,2)
(35,40,2)
(9,19,2)
(31,17,2)
(37,40,2)
(29,24,2)
(35,6,2)
(4,36,2)
(1,40,2)
(29,40,2)
(15,40,2)
(21,40,2)
(33,40,2)
(23,40,2)
(9,40,2)
(31,35,2)
(39,40,2)
(6,40,2)
(8,36,2)
(19,40,2)
(10,21,2)
(36,19,2)
(29,31,2)
(31,40,2)
(36,40,2)
(10,40,2)
(38,40,2)
(32,40,2)
(41,40,2)
(8,4,2)
-----------------------------------
(0,5)
(1,100)
(2,if(5==5)
(3,)
(4,-1)
(5,)
(6,sizeof(int)
(7,if(5==5)
(8,exit(-1)
(9,data[0])
(10,printIntLine(data[0])
(11,5==5)
(12,data)
(13,)
(14,if (data == NULL)
(15,data)
(16,int)
(17,data = NULL)
(18,NULL)
(19,data = (int *)
(20,5)
(21,data[0])
(22,5)
(23,data)
(24,int *)
(25,data)
(26,5)
(27,1)
(28,RET)
(29,(int *)
(30,0)
(31,realloc(data, 100*sizeof(int)
(32,0)
(33,data)
(34,data)
(35,100*sizeof(int)
(36,data == NULL)
(37,data[0] = 5)
(38,data)
(39,NULL)
(40,5==5)
(41,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^