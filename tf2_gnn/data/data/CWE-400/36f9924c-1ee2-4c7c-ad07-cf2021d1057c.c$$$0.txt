-----label-----
1
-----code-----
static void qrtr_node_rx_work(struct work_struct *work)
{
	struct qrtr_node *node = container_of(work, struct qrtr_node, work);
	struct qrtr_ctrl_pkt *pkt;
	struct sockaddr_qrtr dst;
	struct sockaddr_qrtr src;
	struct sk_buff *skb;

	while ((skb = skb_dequeue(&node->rx_queue)) != NULL) {
		struct qrtr_sock *ipc;
		struct qrtr_cb *cb;
		int confirm;

		cb = (struct qrtr_cb *)skb->cb;
		src.sq_node = cb->src_node;
		src.sq_port = cb->src_port;
		dst.sq_node = cb->dst_node;
		dst.sq_port = cb->dst_port;
		confirm = !!cb->confirm_rx;

		qrtr_node_assign(node, cb->src_node);

		ipc = qrtr_port_lookup(cb->dst_port);
		if (!ipc) {
			kfree_skb(skb);
		} else {
			if (sock_queue_rcv_skb(&ipc->sk, skb))
				kfree_skb(skb);

			qrtr_port_put(ipc);
		}

		if (confirm) {
			skb = qrtr_alloc_ctrl_packet(&pkt);
			if (!skb)
				break;

			pkt->cmd = cpu_to_le32(QRTR_TYPE_RESUME_TX);
			pkt->client.node = cpu_to_le32(dst.sq_node);
			pkt->client.port = cpu_to_le32(dst.sq_port);

			if (qrtr_node_enqueue(node, skb, QRTR_TYPE_RESUME_TX,
					      &dst, &src))
				break;
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
13,14
14,15
16,17
17,18
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
41,43
44,45
44,46
45,46
45,47
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
54,55
54,56
55,56
58,59
60,61
60,62
60,63
60,64
60,65
60,66
60,67
60,68
60,69
60,70
60,71
60,72
60,73
61,62
62,63
62,64
63,64
65,66
65,67
68,69
69,70
69,71
70,71
72,73
72,74
75,76
76,77
76,78
78,79
80,81
81,82
81,83
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
90,92
91,92
94,95
95,96
95,97
96,97
96,98
97,98
100,101
100,102
101,102
104,105
105,106
105,107
106,107
106,108
107,108
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
124,125
125,126
125,127
126,127
126,128
127,128
130,131
130,132
131,132
134,135
135,136
135,137
136,137
138,139
139,140
140,141
140,142
141,142
144,145
145,146
145,147
145,148
146,147
148,149
150,151
150,152
151,152
154,155
155,156
155,157
156,157
158,159
158,160
159,160
161,162
161,163
162,163
165,166
165,167
165,168
166,167
167,168
169,170
170,171
171,172
171,173
172,173
174,175
176,177
176,178
177,178
177,179
178,179
178,180
178,181
179,180
181,182
182,183
182,184
183,184
186,187
188,189
189,190
189,191
190,191
192,193
194,195
195,196
195,197
196,197
198,199
200,201
200,202
201,202
203,204
203,205
203,206
203,207
203,208
203,209
204,205
205,206
205,207
206,207
208,209
208,210
209,210
211,212
212,213
214,215
214,216
215,216
216,217
219,220
220,221
220,222
221,222
221,223
222,223
225,226
225,227
226,227
228,229
230,231
231,232
231,233
232,233
232,234
233,234
233,235
234,235
238,239
238,240
239,240
241,242
241,243
242,243
245,246
246,247
246,248
247,248
247,249
248,249
248,250
249,250
253,254
253,255
254,255
256,257
256,258
257,258
260,261
260,262
261,262
261,263
261,264
261,265
261,266
261,267
262,263
264,265
266,267
268,269
270,271
271,272
273,274
274,275
-----nextToken-----
2,4,7,9,10,15,21,23,24,28,30,34,36,40,42,43,49,52,56,57,59,64,66,67,71,73,74,77,79,83,87,89,92,93,98,99,102,103,108,109,112,113,118,119,122,123,128,129,132,133,137,142,143,147,149,152,153,157,160,163,164,168,173,175,180,184,185,187,191,193,197,199,202,207,210,213,217,218,223,224,227,229,235,236,237,240,243,244,250,251,252,255,258,259,263,265,267,269,272,275,276
-----computeFrom-----
45,46
45,47
47,48
47,49
81,82
81,83
95,96
95,97
105,106
105,107
115,116
115,117
125,126
125,127
135,136
135,137
155,156
155,157
205,206
205,207
220,221
220,222
231,232
231,233
246,247
246,248
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ProblemStatement;ProblemStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;
-----ast_node-----
static void qrtr_node_rx_work(struct work_struct *work){	struct qrtr_node *node = container_of(work, struct qrtr_node, work);	struct qrtr_ctrl_pkt *pkt;	struct sockaddr_qrtr dst;	struct sockaddr_qrtr src;	struct sk_buff *skb;	while ((skb = skb_dequeue(&node->rx_queue)) != NULL) {		struct qrtr_sock *ipc;		struct qrtr_cb *cb;		int confirm;		cb = (struct qrtr_cb *)skb->cb;		src.sq_node = cb->src_node;		src.sq_port = cb->src_port;		dst.sq_node = cb->dst_node;		dst.sq_port = cb->dst_port;		confirm = !!cb->confirm_rx;		qrtr_node_assign(node, cb->src_node);		ipc = qrtr_port_lookup(cb->dst_port);		if (!ipc) {			kfree_skb(skb);		} else {			if (sock_queue_rcv_skb(&ipc->sk, skb))				kfree_skb(skb);			qrtr_port_put(ipc);		}		if (confirm) {			skb = qrtr_alloc_ctrl_packet(&pkt);			if (!skb)				break;			pkt->cmd = cpu_to_le32(QRTR_TYPE_RESUME_TX);			pkt->client.node = cpu_to_le32(dst.sq_node);			pkt->client.port = cpu_to_le32(dst.sq_port);			if (qrtr_node_enqueue(node, skb, QRTR_TYPE_RESUME_TX,					      &dst, &src))				break;		}	}}
static void
qrtr_node_rx_work(struct work_struct *work)
qrtr_node_rx_work
struct work_struct *work
struct work_struct
work_struct
*work
*
work
{	struct qrtr_node *node = container_of(work, struct qrtr_node, work);	struct qrtr_ctrl_pkt *pkt;	struct sockaddr_qrtr dst;	struct sockaddr_qrtr src;	struct sk_buff *skb;	while ((skb = skb_dequeue(&node->rx_queue)) != NULL) {		struct qrtr_sock *ipc;		struct qrtr_cb *cb;		int confirm;		cb = (struct qrtr_cb *)skb->cb;		src.sq_node = cb->src_node;		src.sq_port = cb->src_port;		dst.sq_node = cb->dst_node;		dst.sq_port = cb->dst_port;		confirm = !!cb->confirm_rx;		qrtr_node_assign(node, cb->src_node);		ipc = qrtr_port_lookup(cb->dst_port);		if (!ipc) {			kfree_skb(skb);		} else {			if (sock_queue_rcv_skb(&ipc->sk, skb))				kfree_skb(skb);			qrtr_port_put(ipc);		}		if (confirm) {			skb = qrtr_alloc_ctrl_packet(&pkt);			if (!skb)				break;			pkt->cmd = cpu_to_le32(QRTR_TYPE_RESUME_TX);			pkt->client.node = cpu_to_le32(dst.sq_node);			pkt->client.port = cpu_to_le32(dst.sq_port);			if (qrtr_node_enqueue(node, skb, QRTR_TYPE_RESUME_TX,					      &dst, &src))				break;		}	}}
struct qrtr_node
struct qrtr_node
struct qrtr_node
qrtr_node
e
*node = container_of(work, struct qrtr_node, work);
struct qrtr_ctrl_pkt *pkt;
struct qrtr_ctrl_pkt *pkt;
struct qrtr_ctrl_pkt
qrtr_ctrl_pkt
*pkt
*
pkt
struct sockaddr_qrtr dst;
struct sockaddr_qrtr dst;
struct sockaddr_qrtr
sockaddr_qrtr
dst
dst
struct sockaddr_qrtr src;
struct sockaddr_qrtr src;
struct sockaddr_qrtr
sockaddr_qrtr
src
src
struct sk_buff *skb;
struct sk_buff *skb;
struct sk_buff
sk_buff
*skb
*
skb
while ((skb = skb_dequeue(&node->rx_queue)) != NULL) {		struct qrtr_sock *ipc;		struct qrtr_cb *cb;		int confirm;		cb = (struct qrtr_cb *)skb->cb;		src.sq_node = cb->src_node;		src.sq_port = cb->src_port;		dst.sq_node = cb->dst_node;		dst.sq_port = cb->dst_port;		confirm = !!cb->confirm_rx;		qrtr_node_assign(node, cb->src_node);		ipc = qrtr_port_lookup(cb->dst_port);		if (!ipc) {			kfree_skb(skb);		} else {			if (sock_queue_rcv_skb(&ipc->sk, skb))				kfree_skb(skb);			qrtr_port_put(ipc);		}		if (confirm) {			skb = qrtr_alloc_ctrl_packet(&pkt);			if (!skb)				break;			pkt->cmd = cpu_to_le32(QRTR_TYPE_RESUME_TX);			pkt->client.node = cpu_to_le32(dst.sq_node);			pkt->client.port = cpu_to_le32(dst.sq_port);			if (qrtr_node_enqueue(node, skb, QRTR_TYPE_RESUME_TX,					      &dst, &src))				break;		}	}
(skb = skb_dequeue(&node->rx_queue)) != NULL
(skb = skb_dequeue(&node->rx_queue))
skb = skb_dequeue(&node->rx_queue)
skb
skb
skb_dequeue(&node->rx_queue)
skb_dequeue
skb_dequeue
&node->rx_queue
node->rx_queue
node
node
rx_queue
NULL
NULL
{		struct qrtr_sock *ipc;		struct qrtr_cb *cb;		int confirm;		cb = (struct qrtr_cb *)skb->cb;		src.sq_node = cb->src_node;		src.sq_port = cb->src_port;		dst.sq_node = cb->dst_node;		dst.sq_port = cb->dst_port;		confirm = !!cb->confirm_rx;		qrtr_node_assign(node, cb->src_node);		ipc = qrtr_port_lookup(cb->dst_port);		if (!ipc) {			kfree_skb(skb);		} else {			if (sock_queue_rcv_skb(&ipc->sk, skb))				kfree_skb(skb);			qrtr_port_put(ipc);		}		if (confirm) {			skb = qrtr_alloc_ctrl_packet(&pkt);			if (!skb)				break;			pkt->cmd = cpu_to_le32(QRTR_TYPE_RESUME_TX);			pkt->client.node = cpu_to_le32(dst.sq_node);			pkt->client.port = cpu_to_le32(dst.sq_port);			if (qrtr_node_enqueue(node, skb, QRTR_TYPE_RESUME_TX,					      &dst, &src))				break;		}	}
struct qrtr_sock *ipc;
struct qrtr_sock *ipc;
struct qrtr_sock
qrtr_sock
*ipc
*
ipc
struct qrtr_cb *cb;
struct qrtr_cb *cb;
struct qrtr_cb
qrtr_cb
*cb
*
cb
int confirm;
int confirm;
int
confirm
confirm
cb = (struct qrtr_cb *)skb->cb;
cb = (struct qrtr_cb *)skb->cb
cb
cb
(struct qrtr_cb *)skb->cb
struct qrtr_cb *
struct qrtr_cb
qrtr_cb
*
*
skb->cb
skb
skb
cb
src.sq_node = cb->src_node;
src.sq_node = cb->src_node
src.sq_node
src
src
sq_node
cb->src_node
cb
cb
src_node
src.sq_port = cb->src_port;
src.sq_port = cb->src_port
src.sq_port
src
src
sq_port
cb->src_port
cb
cb
src_port
dst.sq_node = cb->dst_node;
dst.sq_node = cb->dst_node
dst.sq_node
dst
dst
sq_node
cb->dst_node
cb
cb
dst_node
dst.sq_port = cb->dst_port;
dst.sq_port = cb->dst_port
dst.sq_port
dst
dst
sq_port
cb->dst_port
cb
cb
dst_port
confirm = !!cb->confirm_rx;
confirm = !!cb->confirm_rx
confirm
confirm
!!cb->confirm_rx
!cb->confirm_rx
cb->confirm_rx
cb
cb
confirm_rx
qrtr_node_assign(node, cb->src_node);
qrtr_node_assign(node, cb->src_node)
qrtr_node_assign
qrtr_node_assign
node
node
cb->src_node
cb
cb
src_node
ipc = qrtr_port_lookup(cb->dst_port);
ipc = qrtr_port_lookup(cb->dst_port)
ipc
ipc
qrtr_port_lookup(cb->dst_port)
qrtr_port_lookup
qrtr_port_lookup
cb->dst_port
cb
cb
dst_port
if (!ipc) {			kfree_skb(skb);		} else {			if (sock_queue_rcv_skb(&ipc->sk, skb))				kfree_skb(skb);			qrtr_port_put(ipc);		}
!ipc
ipc
ipc
{			kfree_skb(skb);		}
kfree_skb(skb);
kfree_skb(skb)
kfree_skb
kfree_skb
skb
skb
{			if (sock_queue_rcv_skb(&ipc->sk, skb))				kfree_skb(skb);			qrtr_port_put(ipc);		}
if (sock_queue_rcv_skb(&ipc->sk, skb))				kfree_skb(skb);
sock_queue_rcv_skb(&ipc->sk, skb)
sock_queue_rcv_skb
sock_queue_rcv_skb
&ipc->sk
ipc->sk
ipc
ipc
sk
skb
skb
kfree_skb(skb);
kfree_skb(skb)
kfree_skb
kfree_skb
skb
skb
qrtr_port_put(ipc);
qrtr_port_put(ipc)
qrtr_port_put
qrtr_port_put
ipc
ipc
if (confirm) {			skb = qrtr_alloc_ctrl_packet(&pkt);			if (!skb)				break;			pkt->cmd = cpu_to_le32(QRTR_TYPE_RESUME_TX);			pkt->client.node = cpu_to_le32(dst.sq_node);			pkt->client.port = cpu_to_le32(dst.sq_port);			if (qrtr_node_enqueue(node, skb, QRTR_TYPE_RESUME_TX,					      &dst, &src))				break;		}
confirm
confirm
{			skb = qrtr_alloc_ctrl_packet(&pkt);			if (!skb)				break;			pkt->cmd = cpu_to_le32(QRTR_TYPE_RESUME_TX);			pkt->client.node = cpu_to_le32(dst.sq_node);			pkt->client.port = cpu_to_le32(dst.sq_port);			if (qrtr_node_enqueue(node, skb, QRTR_TYPE_RESUME_TX,					      &dst, &src))				break;		}
skb = qrtr_alloc_ctrl_packet(&pkt);
skb = qrtr_alloc_ctrl_packet(&pkt)
skb
skb
qrtr_alloc_ctrl_packet(&pkt)
qrtr_alloc_ctrl_packet
qrtr_alloc_ctrl_packet
&pkt
pkt
pkt
if (!skb)				break;
!skb
skb
skb
break;
pkt->cmd = cpu_to_le32(QRTR_TYPE_RESUME_TX);
pkt->cmd = cpu_to_le32(QRTR_TYPE_RESUME_TX)
pkt->cmd
pkt
pkt
cmd
cpu_to_le32(QRTR_TYPE_RESUME_TX)
cpu_to_le32
cpu_to_le32
QRTR_TYPE_RESUME_TX
QRTR_TYPE_RESUME_TX
pkt->client.node = cpu_to_le32(dst.sq_node);
pkt->client.node = cpu_to_le32(dst.sq_node)
pkt->client.node
pkt->client
pkt
pkt
client
node
cpu_to_le32(dst.sq_node)
cpu_to_le32
cpu_to_le32
dst.sq_node
dst
dst
sq_node
pkt->client.port = cpu_to_le32(dst.sq_port);
pkt->client.port = cpu_to_le32(dst.sq_port)
pkt->client.port
pkt->client
pkt
pkt
client
port
cpu_to_le32(dst.sq_port)
cpu_to_le32
cpu_to_le32
dst.sq_port
dst
dst
sq_port
if (qrtr_node_enqueue(node, skb, QRTR_TYPE_RESUME_TX,					      &dst, &src))				break;
qrtr_node_enqueue(node, skb, QRTR_TYPE_RESUME_TX,					      &dst, &src)
qrtr_node_enqueue
qrtr_node_enqueue
node
node
skb
skb
QRTR_TYPE_RESUME_TX
QRTR_TYPE_RESUME_TX
&dst
dst
dst
&src
src
src
break;
-----joern-----
(80,2,0)
(7,124,0)
(131,23,0)
(73,23,0)
(31,70,0)
(100,101,0)
(64,106,0)
(81,124,0)
(114,29,0)
(113,14,0)
(99,8,0)
(87,23,0)
(38,29,0)
(51,5,0)
(82,6,0)
(0,49,0)
(47,80,0)
(28,107,0)
(97,83,0)
(112,34,0)
(6,131,0)
(16,58,0)
(75,49,0)
(50,6,0)
(9,93,0)
(12,95,0)
(127,125,0)
(89,92,0)
(86,79,0)
(69,36,0)
(37,86,0)
(129,113,0)
(88,29,0)
(6,50,0)
(62,93,0)
(60,32,0)
(79,29,0)
(124,7,0)
(36,114,0)
(124,81,0)
(68,94,0)
(3,107,0)
(43,106,0)
(74,123,0)
(24,126,0)
(115,49,0)
(48,58,0)
(137,121,0)
(45,50,0)
(67,30,0)
(1,2,0)
(123,85,0)
(63,124,0)
(33,48,0)
(83,135,0)
(77,23,0)
(105,116,0)
(27,3,0)
(52,107,0)
(134,16,0)
(63,54,0)
(25,23,0)
(130,87,0)
(123,74,0)
(66,35,0)
(138,35,0)
(2,80,0)
(71,4,0)
(70,31,0)
(35,87,0)
(56,48,0)
(98,125,0)
(106,58,0)
(46,51,0)
(58,31,0)
(20,130,0)
(17,15,0)
(108,14,0)
(18,49,0)
(32,31,0)
(48,28,0)
(119,79,0)
(5,51,0)
(79,119,0)
(106,38,0)
(34,72,0)
(111,123,0)
(39,7,0)
(51,114,0)
(25,135,0)
(3,30,0)
(136,72,0)
(109,72,0)
(13,121,0)
(114,95,0)
(28,48,0)
(133,123,0)
(59,85,0)
(107,28,0)
(90,32,0)
(55,51,0)
(44,93,0)
(38,106,0)
(76,108,0)
(95,58,0)
(108,23,0)
(5,131,0)
(54,121,0)
(132,119,0)
(21,16,0)
(15,124,0)
(14,113,0)
(126,29,0)
(119,58,0)
(53,29,0)
(85,123,0)
(57,95,0)
(118,29,0)
(87,130,0)
(9,81,0)
(72,58,0)
(42,58,0)
(120,89,0)
(135,83,0)
(131,5,0)
(116,25,0)
(93,9,0)
(125,38,0)
(4,107,0)
(40,36,0)
(89,124,0)
(116,94,0)
(80,29,0)
(91,101,0)
(31,58,0)
(32,124,0)
(84,50,0)
(19,63,0)
(117,83,0)
(8,108,0)
(128,124,0)
(26,49,0)
(94,116,0)
(112,126,0)
(83,79,0)
(103,29,0)
(11,74,0)
(16,103,0)
(123,108,0)
(135,25,0)
(121,107,0)
(101,103,0)
(81,9,0)
(96,123,0)
(102,86,0)
(107,29,0)
(126,112,0)
(10,94,0)
(95,114,0)
(41,29,0)
(65,2,0)
(110,29,0)
(14,108,0)
(58,29,0)
(61,119,0)
(2,58,0)
(34,112,0)
(54,63,0)
(31,32,0)
(121,54,0)
(103,16,0)
(72,34,0)
(129,76,1)
(123,85,1)
(50,45,1)
(17,63,1)
(95,58,1)
(20,35,1)
(125,127,1)
(107,28,1)
(136,109,1)
(127,98,1)
(123,74,1)
(100,91,1)
(58,31,1)
(34,72,1)
(10,68,1)
(3,27,1)
(122,3,1)
(128,122,1)
(68,87,1)
(40,79,1)
(32,124,1)
(11,85,1)
(91,58,1)
(42,7,1)
(7,124,1)
(121,107,1)
(114,95,1)
(117,97,1)
(83,79,1)
(138,8,1)
(47,126,1)
(83,117,1)
(48,33,1)
(57,36,1)
(105,94,1)
(61,132,1)
(123,108,1)
(134,21,1)
(6,50,1)
(54,121,1)
(4,71,1)
(25,135,1)
(13,4,1)
(76,122,1)
(51,55,1)
(1,65,1)
(72,136,1)
(64,125,1)
(48,58,1)
(16,134,1)
(32,90,1)
(126,112,1)
(78,8,1)
(71,107,1)
(35,66,1)
(90,60,1)
(80,2,1)
(99,108,1)
(135,83,1)
(4,107,1)
(56,52,1)
(106,58,1)
(8,108,1)
(87,130,1)
(113,129,1)
(94,10,1)
(14,113,1)
(98,103,1)
(59,111,1)
(43,64,1)
(38,106,1)
(37,102,1)
(97,116,1)
(36,69,1)
(89,124,1)
(16,58,1)
(72,58,1)
(95,12,1)
(19,54,1)
(79,119,1)
(15,17,1)
(69,40,1)
(60,42,1)
(84,25,1)
(2,58,1)
(119,61,1)
(116,105,1)
(74,11,1)
(121,137,1)
(8,99,1)
(101,100,1)
(111,133,1)
(27,15,1)
(33,56,1)
(22,123,1)
(12,57,1)
(44,128,1)
(96,131,1)
(9,93,1)
(93,62,1)
(102,38,1)
(31,70,1)
(128,123,1)
(85,59,1)
(7,39,1)
(89,120,1)
(24,114,1)
(15,124,1)
(21,101,1)
(116,94,1)
(82,50,1)
(104,22,1)
(45,84,1)
(31,32,1)
(112,34,1)
(46,6,1)
(108,14,1)
(63,19,1)
(104,78,1)
(51,114,1)
(5,51,1)
(103,16,1)
(133,96,1)
(63,124,1)
(63,54,1)
(2,1,1)
(119,58,1)
(3,107,1)
(137,13,1)
(131,5,1)
(62,44,1)
(81,9,1)
(65,47,1)
(124,81,1)
(130,20,1)
(52,80,1)
(28,48,1)
(55,46,1)
(122,89,1)
(66,138,1)
(109,24,1)
(39,124,1)
(106,43,1)
(27,63,1)
(86,37,1)
(132,86,1)
(104,7,1)
(6,82,1)
(120,4,1)
(16,7,2)
(87,8,2)
(91,7,2)
(69,7,2)
(121,107,2)
(54,121,2)
(31,70,2)
(105,8,2)
(63,54,2)
(116,94,2)
(33,7,2)
(9,122,2)
(47,7,2)
(3,107,2)
(36,7,2)
(45,8,2)
(127,7,2)
(106,58,2)
(98,7,2)
(128,122,2)
(59,8,2)
(27,4,2)
(123,85,2)
(114,7,2)
(90,7,2)
(2,7,2)
(76,122,2)
(54,4,2)
(58,7,2)
(131,8,2)
(7,123,2)
(121,4,2)
(28,48,2)
(48,7,2)
(31,32,2)
(63,4,2)
(134,7,2)
(24,7,2)
(32,124,2)
(22,123,2)
(89,124,2)
(34,72,2)
(111,8,2)
(81,123,2)
(7,122,2)
(25,8,2)
(107,7,2)
(84,8,2)
(71,7,2)
(135,8,2)
(125,7,2)
(136,7,2)
(124,123,2)
(34,7,2)
(39,123,2)
(6,50,2)
(63,124,2)
(100,7,2)
(87,130,2)
(126,7,2)
(8,122,2)
(72,7,2)
(82,8,2)
(107,28,2)
(37,7,2)
(123,74,2)
(126,112,2)
(108,122,2)
(6,8,2)
(135,83,2)
(16,58,2)
(99,122,2)
(85,8,2)
(14,113,2)
(79,119,2)
(64,7,2)
(80,2,2)
(13,4,2)
(8,108,2)
(93,122,2)
(119,58,2)
(62,123,2)
(32,7,2)
(113,122,2)
(103,7,2)
(95,7,2)
(57,7,2)
(42,7,2)
(129,122,2)
(89,4,2)
(9,123,2)
(11,8,2)
(124,81,2)
(117,8,2)
(66,8,2)
(46,8,2)
(48,58,2)
(60,7,2)
(137,4,2)
(86,7,2)
(9,93,2)
(95,58,2)
(25,135,2)
(10,8,2)
(44,122,2)
(79,7,2)
(61,7,2)
(133,8,2)
(5,51,2)
(96,8,2)
(131,5,2)
(132,7,2)
(2,58,2)
(94,8,2)
(51,114,2)
(39,122,2)
(112,34,2)
(52,7,2)
(7,124,2)
(103,16,2)
(58,31,2)
(50,8,2)
(35,8,2)
(114,95,2)
(122,7,2)
(81,9,2)
(12,7,2)
(123,108,2)
(40,7,2)
(44,123,2)
(14,122,2)
(108,14,2)
(51,8,2)
(97,8,2)
(78,8,2)
(31,7,2)
(138,8,2)
(5,8,2)
(1,7,2)
(43,7,2)
(116,8,2)
(124,122,2)
(68,8,2)
(62,122,2)
(28,7,2)
(17,63,2)
(4,107,2)
(83,79,2)
(21,7,2)
(15,124,2)
(38,7,2)
(102,7,2)
(119,7,2)
(65,7,2)
(55,8,2)
(3,4,2)
(56,7,2)
(15,63,2)
(81,122,2)
(106,7,2)
(123,8,2)
(80,7,2)
(72,58,2)
(101,7,2)
(112,7,2)
(109,7,2)
(93,123,2)
(4,7,2)
(38,106,2)
(120,4,2)
(83,8,2)
(19,4,2)
(130,8,2)
(128,123,2)
(20,8,2)
(74,8,2)
-----------------------------------
(0,pkt)
(1,src_node)
(2,cb->src_node)
(3,qrtr_port_put(ipc)
(4,!ipc)
(5,cpu_to_le32(dst.sq_port)
(6,pkt->client.port)
(7,(skb = skb_dequeue(&node->rx_queue)
(8,!skb)
(9,&node->rx_queue)
(10,client)
(11,src)
(12,dst_port)
(13,ipc)
(14,qrtr_alloc_ctrl_packet(&pkt)
(15,kfree_skb(skb)
(16,cb->src_node)
(17,skb)
(18,dst)
(19,skb)
(20,QRTR_TYPE_RESUME_TX)
(21,cb)
(22,break;)
(23,)
(24,confirm)
(25,pkt->client.node = cpu_to_le32(dst.sq_node)
(26,while ((skb = skb_dequeue(&node->rx_queue)
(27,ipc)
(28,qrtr_port_lookup(cb->dst_port)
(29,)
(30,)
(31,(struct qrtr_cb *)
(32,skb->cb)
(33,dst_port)
(34,!cb->confirm_rx)
(35,pkt->cmd)
(36,dst.sq_port)
(37,sq_node)
(38,src.sq_port = cb->src_port)
(39,NULL)
(40,dst)
(41,if (!ipc)
(42,cb)
(43,src_port)
(44,node)
(45,client)
(46,dst)
(47,node)
(48,cb->dst_port)
(49,)
(50,pkt->client)
(51,dst.sq_port)
(52,ipc)
(53,cb)
(54,&ipc->sk)
(55,sq_port)
(56,cb)
(57,cb)
(58,cb = (struct qrtr_cb *)
(59,dst)
(60,skb)
(61,dst_node)
(62,rx_queue)
(63,sock_queue_rcv_skb(&ipc->sk, skb)
(64,cb)
(65,cb)
(66,cmd)
(67,if (sock_queue_rcv_skb(&ipc->sk, skb)
(68,pkt)
(69,sq_port)
(70,struct qrtr_cb *)
(71,ipc)
(72,cb->confirm_rx)
(73,if (qrtr_node_enqueue(node, skb, QRTR_TYPE_RESUME_TX,\n\\n\\t\\t\\t\\t\\t      &dst, &src)
(74,&src)
(75,src)
(76,skb)
(77,if (!skb)
(78,break;)
(79,dst.sq_node = cb->dst_node)
(80,qrtr_node_assign(node, cb->src_node)
(81,skb_dequeue(&node->rx_queue)
(82,port)
(83,dst.sq_node)
(84,pkt)
(85,&dst)
(86,dst.sq_node)
(87,pkt->cmd = cpu_to_le32(QRTR_TYPE_RESUME_TX)
(88,if (confirm)
(89,kfree_skb(skb)
(90,cb)
(91,src)
(92,)
(93,node->rx_queue)
(94,pkt->client)
(95,cb->dst_port)
(96,node)
(97,dst)
(98,src)
(99,skb)
(100,sq_node)
(101,src.sq_node)
(102,dst)
(103,src.sq_node = cb->src_node)
(104,RET)
(105,node)
(106,cb->src_port)
(107,ipc = qrtr_port_lookup(cb->dst_port)
(108,skb = qrtr_alloc_ctrl_packet(&pkt)
(109,cb)
(110,confirm)
(111,QRTR_TYPE_RESUME_TX)
(112,!!cb->confirm_rx)
(113,&pkt)
(114,dst.sq_port = cb->dst_port)
(115,skb)
(116,pkt->client.node)
(117,sq_node)
(118,ipc)
(119,cb->dst_node)
(120,skb)
(121,ipc->sk)
(122,confirm)
(123,qrtr_node_enqueue(node, skb, QRTR_TYPE_RESUME_TX,\n\\n\\t\\t\\t\\t\\t      &dst, &src)
(124,skb = skb_dequeue(&node->rx_queue)
(125,src.sq_port)
(126,confirm = !!cb->confirm_rx)
(127,sq_port)
(128,skb)
(129,pkt)
(130,cpu_to_le32(QRTR_TYPE_RESUME_TX)
(131,pkt->client.port = cpu_to_le32(dst.sq_port)
(132,cb)
(133,skb)
(134,src_node)
(135,cpu_to_le32(dst.sq_node)
(136,confirm_rx)
(137,sk)
(138,pkt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^