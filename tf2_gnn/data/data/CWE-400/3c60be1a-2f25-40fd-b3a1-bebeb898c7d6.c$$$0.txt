-----label-----
0
-----code-----
static void goodB2G2()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
    {
        char myString[] = "myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = strdup(myString);
        /* Use data */
        printLine(data);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* FIX: Deallocate memory initialized in the source */
        free(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
49,50
50,51
50,52
51,52
55,56
55,57
57,58
57,59
57,60
57,61
57,62
57,63
58,59
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,28,29,31,35,38,40,44,46,47,48,52,53,54,56,59,63,65,66,67,71,72,73
-----computeFrom-----
13,14
13,15
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G2(){    char * data;    data = NULL;    switch(6)    {    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* FIX: Deallocate memory initialized in the source */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodB2G2()
goodB2G2
{    char * data;    data = NULL;    switch(6)    {    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* FIX: Deallocate memory initialized in the source */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* FIX: Deallocate memory initialized in the source */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* FIX: Deallocate memory initialized in the source */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(18,1,0)
(23,29,0)
(6,17,0)
(21,9,0)
(17,29,0)
(32,20,0)
(17,6,0)
(4,8,0)
(5,13,0)
(33,30,0)
(12,0,0)
(34,6,0)
(26,19,0)
(14,1,0)
(22,17,0)
(10,1,0)
(35,20,0)
(6,0,0)
(3,19,0)
(9,20,0)
(27,1,0)
(16,13,0)
(7,13,0)
(36,13,0)
(11,29,0)
(30,6,0)
(20,19,0)
(29,0,0)
(0,1,0)
(28,19,0)
(9,6,0)
(8,1,0)
(30,0,0)
(9,13,0)
(25,13,0)
(24,16,0)
(9,20,1)
(17,22,1)
(30,33,1)
(24,2,1)
(23,11,1)
(2,27,1)
(6,17,1)
(9,6,1)
(30,6,1)
(15,20,1)
(14,30,1)
(32,35,1)
(9,21,1)
(2,14,1)
(25,16,1)
(16,24,1)
(33,6,1)
(4,15,1)
(31,25,1)
(20,32,1)
(22,34,1)
(7,9,1)
(8,4,1)
(31,7,1)
(34,29,1)
(11,15,1)
(29,23,1)
(21,2,1)
(17,29,1)
(27,8,1)
(7,2,2)
(17,15,2)
(24,2,2)
(11,15,2)
(25,2,2)
(9,2,2)
(8,15,2)
(21,2,2)
(34,15,2)
(30,6,2)
(30,15,2)
(4,15,2)
(9,6,2)
(23,15,2)
(9,20,2)
(6,15,2)
(22,15,2)
(16,2,2)
(17,29,2)
(33,15,2)
(6,17,2)
(29,15,2)
(14,15,2)
(27,15,2)
-----------------------------------
(0,)
(1,)
(2,7)
(3,switch(7)
(4,"Benign, fixed string")
(5,default:)
(6,data = strdup(myString)
(7,break;)
(8,printLine("Benign, fixed string")
(9,free(data)
(10,default:)
(11,myString)
(12,myString)
(13,)
(14,break;)
(15,6)
(16,printLine("Benign, fixed string")
(17,strdup(myString)
(18,case 6:)
(19,)
(20,data = NULL)
(21,data)
(22,myString)
(23,"myString")
(24,"Benign, fixed string")
(25,break;)
(26,switch(6)
(27,break;)
(28,data)
(29,myString[] = "myString")
(30,printLine(data)
(31,RET)
(32,NULL)
(33,data)
(34,data)
(35,data)
(36,case 7:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^