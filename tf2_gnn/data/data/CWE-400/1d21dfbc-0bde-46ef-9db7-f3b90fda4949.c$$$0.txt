-----label-----
1
-----code-----
static int
peer_dsc_disced(uint16_t conn_handle, const struct ble_gatt_error *error,
                uint16_t chr_val_handle, const struct ble_gatt_dsc *dsc,
                void *arg)
{
    struct peer *peer;
    int rc;

    peer = arg;
    assert(peer->conn_handle == conn_handle);

    switch (error->status) {
    case 0:
        rc = peer_dsc_add(peer, chr_val_handle, dsc);
        break;

    case BLE_HS_EDONE:
        /* All descriptors in this characteristic discovered; start discovering
         * descriptors in the next characteristic.
         */
        if (peer->disc_prev_chr_val > 0) {
            peer_disc_dscs(peer);
        }
        rc = 0;
        break;

    default:
        /* Error; abort discovery. */
        rc = error->status;
        break;
    }

    if (rc != 0) {
        /* Error; abort discovery. */
        peer_disc_complete(peer, rc);
    }

    return rc;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
17,18
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
29,30
29,31
32,33
32,34
32,35
32,36
32,37
32,38
32,39
33,34
34,35
34,36
35,36
37,38
37,39
40,41
41,42
41,43
43,44
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
57,58
60,61
62,63
62,64
63,64
63,65
64,65
67,68
67,69
67,70
67,71
67,72
67,73
67,74
67,75
67,76
67,77
68,69
70,71
71,72
71,73
72,73
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
84,85
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
94,95
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
108,109
109,110
109,111
110,111
112,113
112,114
113,114
117,118
117,119
118,119
118,120
119,120
122,123
123,124
124,125
124,126
124,127
125,126
127,128
129,130
131,132
132,133
-----nextToken-----
2,4,7,9,12,14,15,18,20,23,25,26,28,30,31,36,38,39,42,44,48,50,54,58,59,61,65,66,69,73,76,78,80,82,83,86,91,92,93,98,100,104,105,106,107,111,114,115,116,120,121,126,128,130,133
-----computeFrom-----
46,47
46,48
55,56
55,57
71,72
71,73
88,89
88,90
102,103
102,104
109,110
109,111
118,119
118,120
-----guardedBy-----
91,100
120,130
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static intpeer_dsc_disced(uint16_t conn_handle, const struct ble_gatt_error *error,                uint16_t chr_val_handle, const struct ble_gatt_dsc *dsc,                void *arg){    struct peer *peer;    int rc;    peer = arg;    assert(peer->conn_handle == conn_handle);    switch (error->status) {    case 0:        rc = peer_dsc_add(peer, chr_val_handle, dsc);        break;    case BLE_HS_EDONE:        /* All descriptors in this characteristic discovered; start discovering         * descriptors in the next characteristic.         */        if (peer->disc_prev_chr_val > 0) {            peer_disc_dscs(peer);        }        rc = 0;        break;    default:        /* Error; abort discovery. */        rc = error->status;        break;    }    if (rc != 0) {        /* Error; abort discovery. */        peer_disc_complete(peer, rc);    }    return rc;}
static int
peer_dsc_disced(uint16_t conn_handle, const struct ble_gatt_error *error,                uint16_t chr_val_handle, const struct ble_gatt_dsc *dsc,                void *arg)
peer_dsc_disced
uint16_t conn_handle
uint16_t
uint16_t
conn_handle
conn_handle
const struct ble_gatt_error *error
const struct ble_gatt_error
ble_gatt_error
*error
*
error
uint16_t chr_val_handle
uint16_t
uint16_t
chr_val_handle
chr_val_handle
const struct ble_gatt_dsc *dsc
const struct ble_gatt_dsc
ble_gatt_dsc
*dsc
*
dsc
void *arg
void
*arg
*
arg
{    struct peer *peer;    int rc;    peer = arg;    assert(peer->conn_handle == conn_handle);    switch (error->status) {    case 0:        rc = peer_dsc_add(peer, chr_val_handle, dsc);        break;    case BLE_HS_EDONE:        /* All descriptors in this characteristic discovered; start discovering         * descriptors in the next characteristic.         */        if (peer->disc_prev_chr_val > 0) {            peer_disc_dscs(peer);        }        rc = 0;        break;    default:        /* Error; abort discovery. */        rc = error->status;        break;    }    if (rc != 0) {        /* Error; abort discovery. */        peer_disc_complete(peer, rc);    }    return rc;}
struct peer *peer;
struct peer *peer;
struct peer
peer
*peer
*
peer
int rc;
int rc;
int
rc
rc
peer = arg;
peer = arg
peer
peer
arg
arg
assert(peer->conn_handle == conn_handle);
assert(peer->conn_handle == conn_handle)
assert
assert
peer->conn_handle == conn_handle
peer->conn_handle
peer
peer
conn_handle
conn_handle
conn_handle
switch (error->status) {    case 0:        rc = peer_dsc_add(peer, chr_val_handle, dsc);        break;    case BLE_HS_EDONE:        /* All descriptors in this characteristic discovered; start discovering         * descriptors in the next characteristic.         */        if (peer->disc_prev_chr_val > 0) {            peer_disc_dscs(peer);        }        rc = 0;        break;    default:        /* Error; abort discovery. */        rc = error->status;        break;    }
error->status
error
error
status
{    case 0:        rc = peer_dsc_add(peer, chr_val_handle, dsc);        break;    case BLE_HS_EDONE:        /* All descriptors in this characteristic discovered; start discovering         * descriptors in the next characteristic.         */        if (peer->disc_prev_chr_val > 0) {            peer_disc_dscs(peer);        }        rc = 0;        break;    default:        /* Error; abort discovery. */        rc = error->status;        break;    }
case 0:
0
rc = peer_dsc_add(peer, chr_val_handle, dsc);
rc = peer_dsc_add(peer, chr_val_handle, dsc)
rc
rc
peer_dsc_add(peer, chr_val_handle, dsc)
peer_dsc_add
peer_dsc_add
peer
peer
chr_val_handle
chr_val_handle
dsc
dsc
break;
case BLE_HS_EDONE:
BLE_HS_EDONE
BLE_HS_EDONE
if (peer->disc_prev_chr_val > 0) {            peer_disc_dscs(peer);        }
peer->disc_prev_chr_val > 0
peer->disc_prev_chr_val
peer
peer
disc_prev_chr_val
0
{            peer_disc_dscs(peer);        }
peer_disc_dscs(peer);
peer_disc_dscs(peer)
peer_disc_dscs
peer_disc_dscs
peer
peer
rc = 0;
rc = 0
rc
rc
0
break;
default:
rc = error->status;
rc = error->status
rc
rc
error->status
error
error
status
break;
if (rc != 0) {        /* Error; abort discovery. */        peer_disc_complete(peer, rc);    }
rc != 0
rc
rc
0
{        /* Error; abort discovery. */        peer_disc_complete(peer, rc);    }
peer_disc_complete(peer, rc);
peer_disc_complete(peer, rc)
peer_disc_complete
peer_disc_complete
peer
peer
rc
rc
return rc;
rc
rc
-----joern-----
(53,0,0)
(1,55,0)
(15,31,0)
(50,52,0)
(55,1,0)
(52,50,0)
(6,4,0)
(42,9,0)
(25,31,0)
(27,9,0)
(9,7,0)
(11,1,0)
(9,42,0)
(0,22,0)
(34,57,0)
(32,5,0)
(45,7,0)
(30,14,0)
(28,22,0)
(23,35,0)
(3,9,0)
(0,8,0)
(50,4,0)
(57,5,0)
(57,22,0)
(28,5,0)
(23,5,0)
(61,52,0)
(57,29,0)
(28,50,0)
(20,35,0)
(39,45,0)
(16,23,0)
(38,0,0)
(17,4,0)
(7,35,0)
(51,14,0)
(13,4,0)
(0,7,0)
(22,0,0)
(36,23,0)
(1,14,0)
(56,4,0)
(12,0,0)
(55,35,0)
(52,49,0)
(31,49,0)
(57,7,0)
(7,37,0)
(19,7,0)
(23,50,0)
(58,50,0)
(22,4,0)
(59,4,0)
(60,5,0)
(23,22,0)
(54,52,0)
(0,44,0)
(57,50,0)
(21,28,0)
(47,4,0)
(24,28,0)
(5,4,0)
(48,7,0)
(41,4,0)
(18,42,0)
(45,40,0)
(2,35,0)
(33,57,0)
(26,35,0)
(43,35,0)
(14,1,0)
(46,22,0)
(1,10,0)
(14,7,0)
(47,22,1)
(46,31,1)
(28,22,1)
(32,60,1)
(1,14,1)
(58,31,1)
(9,27,1)
(36,57,1)
(13,50,1)
(54,58,1)
(60,45,1)
(1,11,1)
(1,10,1)
(19,48,1)
(55,1,1)
(18,9,1)
(22,0,1)
(5,32,1)
(3,31,1)
(23,36,1)
(45,39,1)
(23,50,1)
(34,28,1)
(14,7,1)
(28,5,1)
(36,28,1)
(61,54,1)
(23,22,1)
(15,55,1)
(38,46,1)
(30,51,1)
(25,15,1)
(0,44,1)
(31,49,1)
(16,23,1)
(57,7,1)
(14,30,1)
(31,25,1)
(7,19,1)
(51,7,1)
(23,5,1)
(24,47,1)
(42,18,1)
(28,50,1)
(0,8,1)
(24,41,1)
(24,13,1)
(33,34,1)
(52,61,1)
(7,37,1)
(41,5,1)
(53,12,1)
(0,53,1)
(9,7,1)
(57,22,1)
(39,42,1)
(57,5,1)
(11,14,1)
(45,7,1)
(42,9,1)
(60,42,1)
(28,21,1)
(50,52,1)
(57,33,1)
(0,7,1)
(12,38,1)
(52,49,1)
(27,3,1)
(21,24,1)
(57,50,1)
(5,31,2)
(42,9,2)
(58,31,2)
(0,7,2)
(27,31,2)
(14,7,2)
(18,31,2)
(45,7,2)
(55,1,2)
(47,31,2)
(23,5,2)
(22,31,2)
(7,37,2)
(3,31,2)
(16,23,2)
(1,10,2)
(23,50,2)
(45,42,2)
(0,44,2)
(46,31,2)
(57,50,2)
(38,31,2)
(22,0,2)
(61,31,2)
(23,22,2)
(39,42,2)
(57,22,2)
(0,8,2)
(42,31,2)
(52,31,2)
(0,31,2)
(52,49,2)
(33,28,2)
(28,50,2)
(53,31,2)
(31,49,2)
(57,5,2)
(9,7,2)
(9,31,2)
(50,31,2)
(28,5,2)
(28,22,2)
(34,28,2)
(1,14,2)
(57,28,2)
(13,31,2)
(60,31,2)
(50,52,2)
(12,31,2)
(54,31,2)
(32,31,2)
(41,31,2)
(57,7,2)
-----------------------------------
(0,peer_dsc_add(peer, chr_val_handle, dsc)
(1,peer->conn_handle == conn_handle)
(2,peer)
(3,peer)
(4,)
(5,rc = 0)
(6,case BLE_HS_EDONE:)
(7,peer = arg)
(8,uint16_t chr_val_handle)
(9,peer->disc_prev_chr_val)
(10,uint16_t conn_handle)
(11,conn_handle)
(12,chr_val_handle)
(13,break;)
(14,peer->conn_handle)
(15,error)
(16,RET)
(17,if (peer->disc_prev_chr_val > 0)
(18,0)
(19,arg)
(20,switch (error->status)
(21,0)
(22,rc = peer_dsc_add(peer, chr_val_handle, dsc)
(23,return rc;)
(24,rc)
(25,status)
(26,if (rc != 0)
(27,disc_prev_chr_val)
(28,rc != 0)
(29,)
(30,conn_handle)
(31,error->status)
(32,0)
(33,rc)
(34,peer)
(35,)
(36,rc)
(37,void *arg)
(38,peer)
(39,peer)
(40,)
(41,break;)
(42,peer->disc_prev_chr_val > 0)
(43,rc)
(44,const struct ble_gatt_dsc *dsc)
(45,peer_disc_dscs(peer)
(46,rc)
(47,break;)
(48,peer)
(49,const struct ble_gatt_error *error)
(50,rc = error->status)
(51,peer)
(52,error->status)
(53,dsc)
(54,error)
(55,assert(peer->conn_handle == conn_handle)
(56,case 0:)
(57,peer_disc_complete(peer, rc)
(58,rc)
(59,default:)
(60,rc)
(61,status)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^