-----label-----
0
-----code-----
static int fill_hole(struct drm_i915_private *i915,
		     struct i915_address_space *vm,
		     u64 hole_start, u64 hole_end,
		     unsigned long end_time)
{
	const u64 hole_size = hole_end - hole_start;
	struct drm_i915_gem_object *obj;
	const unsigned long max_pages =
		min_t(u64, ULONG_MAX - 1, hole_size/2 >> PAGE_SHIFT);
	const unsigned long max_step = max(int_sqrt(max_pages), 2UL);
	unsigned long npages, prime, flags;
	struct i915_vma *vma;
	LIST_HEAD(objects);
	int err;

	/* Try binding many VMA working inwards from either edge */

	flags = PIN_OFFSET_FIXED | PIN_USER;
	if (i915_is_ggtt(vm))
		flags |= PIN_GLOBAL;

	for_each_prime_number_from(prime, 2, max_step) {
		for (npages = 1; npages <= max_pages; npages *= prime) {
			const u64 full_size = npages << PAGE_SHIFT;
			const struct {
				const char *name;
				u64 offset;
				int step;
			} phases[] = {
				{ "top-down", hole_end, -1, },
				{ "bottom-up", hole_start, 1, },
				{ }
			}, *p;

			obj = fake_dma_object(i915, full_size);
			if (IS_ERR(obj))
				break;

			list_add(&obj->st_link, &objects);

			/* Align differing sized objects against the edges, and
			 * check we don't walk off into the void when binding
			 * them into the GTT.
			 */
			for (p = phases; p->name; p++) {
				u64 offset;

				offset = p->offset;
				list_for_each_entry(obj, &objects, st_link) {
					vma = i915_vma_instance(obj, vm, NULL);
					if (IS_ERR(vma))
						continue;

					if (p->step < 0) {
						if (offset < hole_start + obj->base.size)
							break;
						offset -= obj->base.size;
					}

					err = i915_vma_pin(vma, 0, 0, offset | flags);
					if (err) {
						pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",
						       __func__, p->name, err, npages, prime, offset);
						goto err;
					}

					if (!drm_mm_node_allocated(&vma->node) ||
					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {
						pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",
						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),
						       offset);
						err = -EINVAL;
						goto err;
					}

					i915_vma_unpin(vma);

					if (p->step > 0) {
						if (offset + obj->base.size > hole_end)
							break;
						offset += obj->base.size;
					}
				}

				offset = p->offset;
				list_for_each_entry(obj, &objects, st_link) {
					vma = i915_vma_instance(obj, vm, NULL);
					if (IS_ERR(vma))
						continue;

					if (p->step < 0) {
						if (offset < hole_start + obj->base.size)
							break;
						offset -= obj->base.size;
					}

					if (!drm_mm_node_allocated(&vma->node) ||
					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {
						pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",
						       __func__, p->name, vma->node.start, vma->node.size,
						       offset);
						err = -EINVAL;
						goto err;
					}

					err = i915_vma_unbind(vma);
					if (err) {
						pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",
						       __func__, p->name, vma->node.start, vma->node.size,
						       err);
						goto err;
					}

					if (p->step > 0) {
						if (offset + obj->base.size > hole_end)
							break;
						offset += obj->base.size;
					}
				}

				offset = p->offset;
				list_for_each_entry_reverse(obj, &objects, st_link) {
					vma = i915_vma_instance(obj, vm, NULL);
					if (IS_ERR(vma))
						continue;

					if (p->step < 0) {
						if (offset < hole_start + obj->base.size)
							break;
						offset -= obj->base.size;
					}

					err = i915_vma_pin(vma, 0, 0, offset | flags);
					if (err) {
						pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",
						       __func__, p->name, err, npages, prime, offset);
						goto err;
					}

					if (!drm_mm_node_allocated(&vma->node) ||
					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {
						pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",
						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),
						       offset);
						err = -EINVAL;
						goto err;
					}

					i915_vma_unpin(vma);

					if (p->step > 0) {
						if (offset + obj->base.size > hole_end)
							break;
						offset += obj->base.size;
					}
				}

				offset = p->offset;
				list_for_each_entry_reverse(obj, &objects, st_link) {
					vma = i915_vma_instance(obj, vm, NULL);
					if (IS_ERR(vma))
						continue;

					if (p->step < 0) {
						if (offset < hole_start + obj->base.size)
							break;
						offset -= obj->base.size;
					}

					if (!drm_mm_node_allocated(&vma->node) ||
					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {
						pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",
						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),
						       offset);
						err = -EINVAL;
						goto err;
					}

					err = i915_vma_unbind(vma);
					if (err) {
						pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",
						       __func__, p->name, vma->node.start, vma->node.size,
						       err);
						goto err;
					}

					if (p->step > 0) {
						if (offset + obj->base.size > hole_end)
							break;
						offset += obj->base.size;
					}
				}
			}

			if (igt_timeout(end_time, "%s timed out (npages=%lu, prime=%lu)\n",
					__func__, npages, prime)) {
				err = -EINTR;
				goto err;
			}
		}

		close_object_list(&objects, vm);
		cleanup_freed_objects(i915);
	}

	return 0;

err:
	close_object_list(&objects, vm);
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
29,30
31,32
31,33
31,34
31,35
31,36
31,37
31,38
31,39
31,40
31,41
31,42
31,43
31,44
31,45
31,46
31,47
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
52,53
52,54
54,55
54,56
56,57
57,58
57,59
57,60
57,61
58,59
60,61
62,63
62,64
63,64
66,67
66,68
67,68
67,69
68,69
71,72
73,74
74,75
74,76
76,77
76,78
78,79
79,80
79,81
79,82
80,81
82,83
82,84
83,84
85,86
88,89
89,90
89,91
89,92
89,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
101,103
104,105
105,106
105,107
106,107
108,109
109,110
111,112
112,113
112,114
114,115
116,117
117,118
117,119
118,119
120,121
120,122
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
135,136
137,138
138,139
138,140
138,141
138,142
139,140
141,142
144,145
146,147
147,148
147,149
147,150
148,149
148,150
148,151
148,152
149,150
150,151
150,152
151,152
154,155
154,156
155,156
157,158
159,160
159,161
160,161
162,163
164,165
164,166
164,167
164,168
164,169
164,170
164,171
165,166
166,167
166,168
167,168
169,170
169,171
171,172
172,173
172,174
173,174
175,176
177,178
178,179
178,180
178,181
179,180
179,181
179,182
179,183
181,182
181,183
183,184
183,185
186,187
186,188
187,188
189,190
191,192
191,193
193,194
195,196
195,197
195,198
198,199
199,200
199,201
199,202
200,201
200,202
200,203
202,203
204,205
206,207
206,208
206,209
208,209
212,213
212,214
215,216
216,217
216,218
217,218
219,220
219,221
219,222
220,221
222,223
224,225
226,227
226,228
227,228
227,229
228,229
230,231
233,234
234,235
234,236
234,237
235,236
237,238
238,239
238,240
239,240
242,243
243,244
245,246
245,247
245,248
245,249
246,247
247,248
247,249
248,249
250,251
252,253
252,254
253,254
256,257
257,258
259,260
259,261
259,262
259,263
259,264
259,265
259,266
259,267
259,268
259,269
259,270
259,271
259,272
259,273
259,274
259,275
259,276
260,261
261,262
261,263
262,263
264,265
266,267
267,268
267,269
268,269
270,271
270,272
271,272
274,275
275,276
275,277
275,278
275,279
276,277
278,279
280,281
281,282
283,284
285,286
286,287
286,288
286,289
286,290
286,291
286,292
286,293
286,294
287,288
288,289
288,290
289,290
291,292
291,293
291,294
291,295
292,293
294,295
296,297
298,299
300,301
300,302
301,302
301,303
302,303
304,305
307,308
307,309
308,309
308,310
309,310
309,311
310,311
314,315
314,316
315,316
315,317
316,317
316,318
317,318
319,320
319,321
320,321
322,323
322,324
323,324
323,325
324,325
329,330
330,331
330,332
331,332
333,334
333,335
334,335
334,336
335,336
339,340
340,341
340,342
341,342
343,344
343,345
343,346
343,347
343,348
344,345
346,347
350,351
350,352
351,352
353,354
355,356
355,357
356,357
358,359
358,360
359,360
360,361
360,362
360,363
360,364
360,365
360,366
360,367
360,368
361,362
364,365
366,367
366,368
367,368
370,371
372,373
374,375
376,377
378,379
380,381
380,382
381,382
381,383
382,383
383,384
383,385
384,385
386,387
387,388
387,389
388,389
391,392
391,393
391,394
391,395
391,396
392,393
394,395
398,399
398,400
399,400
401,402
403,404
403,405
403,406
404,405
405,406
405,407
405,408
405,409
405,410
405,411
405,412
405,413
406,407
409,410
411,412
411,413
412,413
415,416
415,417
416,417
416,418
417,418
421,422
421,423
422,423
422,424
423,424
427,428
427,429
428,429
430,431
431,432
431,433
432,433
435,436
437,438
438,439
438,440
439,440
441,442
442,443
444,445
446,447
447,448
447,449
448,449
450,451
452,453
452,454
453,454
453,455
454,455
454,456
455,456
459,460
459,461
460,461
460,462
461,462
461,463
462,463
462,464
463,464
465,466
465,467
466,467
466,468
467,468
471,472
474,475
475,476
475,477
476,477
478,479
478,480
479,480
479,481
480,481
484,485
485,486
485,487
486,487
488,489
488,490
489,490
492,493
493,494
493,495
493,496
493,497
494,495
496,497
498,499
499,500
501,502
503,504
504,505
504,506
504,507
504,508
504,509
504,510
504,511
505,506
506,507
506,508
507,508
509,510
509,511
509,512
509,513
510,511
512,513
514,515
516,517
518,519
518,520
519,520
519,521
520,521
522,523
525,526
525,527
526,527
526,528
527,528
527,529
528,529
532,533
532,534
533,534
533,535
534,535
534,536
535,536
537,538
537,539
538,539
540,541
540,542
541,542
541,543
542,543
547,548
548,549
548,550
549,550
551,552
551,553
552,553
552,554
553,554
557,558
557,559
558,559
558,560
559,560
560,561
560,562
561,562
563,564
564,565
564,566
565,566
568,569
568,570
568,571
568,572
568,573
569,570
571,572
575,576
575,577
576,577
578,579
580,581
580,582
580,583
581,582
582,583
582,584
582,585
582,586
582,587
582,588
582,589
583,584
586,587
588,589
588,590
589,590
592,593
592,594
593,594
593,595
594,595
598,599
598,600
599,600
599,601
600,601
604,605
606,607
607,608
607,609
608,609
610,611
611,612
613,614
615,616
616,617
616,618
617,618
619,620
619,621
620,621
622,623
624,625
624,626
625,626
627,628
627,629
628,629
629,630
629,631
629,632
629,633
629,634
629,635
629,636
630,631
633,634
635,636
635,637
636,637
639,640
639,641
640,641
640,642
641,642
645,646
645,647
646,647
646,648
647,648
651,652
653,654
655,656
655,657
656,657
656,658
657,658
657,659
658,659
662,663
662,664
663,664
663,665
664,665
664,666
665,666
665,667
666,667
668,669
668,670
669,670
669,671
670,671
674,675
677,678
678,679
678,680
679,680
681,682
681,683
682,683
682,684
683,684
687,688
688,689
688,690
689,690
691,692
691,693
692,693
695,696
696,697
696,698
696,699
696,700
697,698
699,700
701,702
702,703
704,705
706,707
707,708
707,709
707,710
707,711
707,712
707,713
707,714
707,715
708,709
709,710
709,711
710,711
712,713
712,714
712,715
712,716
713,714
715,716
717,718
719,720
721,722
721,723
722,723
722,724
723,724
725,726
728,729
728,730
729,730
729,731
730,731
730,732
731,732
735,736
735,737
736,737
736,738
737,738
737,739
738,739
740,741
740,742
741,742
743,744
743,745
744,745
744,746
745,746
750,751
751,752
751,753
752,753
754,755
754,756
755,756
755,757
756,757
760,761
761,762
761,763
762,763
764,765
764,766
764,767
764,768
764,769
765,766
767,768
771,772
771,773
772,773
774,775
776,777
776,778
777,778
779,780
779,781
780,781
781,782
781,783
781,784
781,785
781,786
781,787
781,788
781,789
782,783
785,786
787,788
787,789
788,789
791,792
793,794
795,796
797,798
799,800
801,802
801,803
802,803
802,804
803,804
804,805
804,806
805,806
807,808
808,809
808,810
809,810
812,813
812,814
812,815
812,816
812,817
813,814
815,816
819,820
819,821
820,821
822,823
824,825
824,826
824,827
825,826
826,827
826,828
826,829
826,830
826,831
826,832
826,833
826,834
827,828
830,831
832,833
832,834
833,834
836,837
836,838
837,838
837,839
838,839
842,843
842,844
843,844
843,845
844,845
848,849
848,850
849,850
851,852
852,853
852,854
853,854
856,857
858,859
859,860
859,861
860,861
862,863
863,864
865,866
867,868
868,869
868,870
869,870
871,872
873,874
873,875
874,875
874,876
875,876
875,877
876,877
880,881
880,882
881,882
881,883
882,883
882,884
883,884
883,885
884,885
886,887
886,888
887,888
887,889
888,889
892,893
895,896
896,897
896,898
897,898
899,900
899,901
900,901
900,902
901,902
905,906
906,907
906,908
907,908
909,910
909,911
910,911
913,914
914,915
914,916
914,917
914,918
915,916
917,918
919,920
920,921
922,923
924,925
925,926
925,927
925,928
925,929
925,930
925,931
925,932
926,927
927,928
927,929
928,929
930,931
930,932
930,933
930,934
931,932
933,934
935,936
937,938
939,940
939,941
940,941
940,942
941,942
943,944
946,947
946,948
947,948
947,949
948,949
948,950
949,950
953,954
953,955
954,955
954,956
955,956
955,957
956,957
958,959
958,960
959,960
961,962
961,963
962,963
962,964
963,964
968,969
969,970
969,971
970,971
972,973
972,974
973,974
973,975
974,975
978,979
978,980
979,980
979,981
980,981
981,982
981,983
982,983
984,985
985,986
985,987
986,987
989,990
989,991
989,992
989,993
989,994
990,991
992,993
996,997
996,998
997,998
999,1000
1001,1002
1001,1003
1001,1004
1002,1003
1003,1004
1003,1005
1003,1006
1003,1007
1003,1008
1003,1009
1003,1010
1003,1011
1004,1005
1007,1008
1009,1010
1009,1011
1010,1011
1013,1014
1013,1015
1014,1015
1014,1016
1015,1016
1019,1020
1019,1021
1020,1021
1020,1022
1021,1022
1025,1026
1025,1027
1026,1027
1028,1029
1029,1030
1029,1031
1030,1031
1033,1034
1035,1036
1036,1037
1036,1038
1037,1038
1039,1040
1040,1041
1042,1043
1044,1045
1045,1046
1045,1047
1046,1047
1048,1049
1048,1050
1049,1050
1051,1052
1053,1054
1053,1055
1054,1055
1056,1057
1056,1058
1057,1058
1058,1059
1058,1060
1058,1061
1058,1062
1058,1063
1058,1064
1058,1065
1059,1060
1062,1063
1064,1065
1064,1066
1065,1066
1068,1069
1068,1070
1069,1070
1069,1071
1070,1071
1074,1075
1074,1076
1075,1076
1075,1077
1076,1077
1080,1081
1082,1083
1084,1085
1084,1086
1085,1086
1085,1087
1086,1087
1086,1088
1087,1088
1091,1092
1091,1093
1092,1093
1092,1094
1093,1094
1093,1095
1094,1095
1094,1096
1095,1096
1097,1098
1097,1099
1098,1099
1098,1100
1099,1100
1103,1104
1106,1107
1107,1108
1107,1109
1108,1109
1110,1111
1110,1112
1111,1112
1111,1113
1112,1113
1116,1117
1116,1118
1117,1118
1117,1119
1117,1120
1117,1121
1117,1122
1117,1123
1118,1119
1120,1121
1123,1124
1125,1126
1127,1128
1129,1130
1129,1131
1130,1131
1131,1132
1131,1133
1132,1133
1134,1135
1135,1136
1137,1138
1139,1140
1140,1141
1140,1142
1140,1143
1141,1142
1143,1144
1144,1145
1146,1147
1148,1149
1149,1150
1149,1151
1150,1151
1152,1153
1154,1155
1156,1157
1156,1158
1158,1159
1159,1160
1159,1161
1159,1162
1160,1161
1162,1163
1163,1164
1165,1166
1167,1168
1168,1169
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,28,30,35,37,41,43,47,49,50,53,55,59,61,64,65,69,70,72,75,77,81,84,86,87,90,92,94,96,100,102,103,107,110,113,115,119,122,124,128,130,134,136,140,142,143,145,152,153,156,158,161,163,168,170,174,176,180,182,184,185,188,190,192,194,196,197,201,203,205,207,209,210,211,213,214,218,221,223,225,229,231,232,236,240,241,244,249,251,254,255,258,263,265,269,272,273,277,279,282,284,290,293,295,297,299,303,305,306,311,312,313,318,321,325,326,327,328,332,336,337,338,342,345,347,348,349,352,354,357,362,363,365,368,369,371,373,375,377,379,385,389,390,393,395,396,397,400,402,407,408,410,413,414,418,419,420,424,425,426,429,433,434,436,440,443,445,449,451,456,457,458,464,468,469,470,472,473,477,481,482,483,487,490,491,495,497,500,502,508,511,513,515,517,521,523,524,529,530,531,536,539,543,544,545,546,550,554,555,556,562,566,567,570,572,573,574,577,579,584,585,587,590,591,595,596,597,601,602,603,605,609,612,614,618,621,623,626,631,632,634,637,638,642,643,644,648,649,650,652,654,659,660,661,667,671,672,673,675,676,680,684,685,686,690,693,694,698,700,703,705,711,714,716,718,720,724,726,727,732,733,734,739,742,746,747,748,749,753,757,758,759,763,766,768,769,770,773,775,778,783,784,786,789,790,792,794,796,798,800,806,810,811,814,816,817,818,821,823,828,829,831,834,835,839,840,841,845,846,847,850,854,855,857,861,864,866,870,872,877,878,879,885,889,890,891,893,894,898,902,903,904,908,911,912,916,918,921,923,929,932,934,936,938,942,944,945,950,951,952,957,960,964,965,966,967,971,975,976,977,983,987,988,991,993,994,995,998,1000,1005,1006,1008,1011,1012,1016,1017,1018,1022,1023,1024,1027,1031,1032,1034,1038,1041,1043,1047,1050,1052,1055,1060,1061,1063,1066,1067,1071,1072,1073,1077,1078,1079,1081,1083,1088,1089,1090,1096,1100,1101,1102,1104,1105,1109,1113,1114,1115,1119,1121,1122,1124,1126,1128,1133,1136,1138,1142,1145,1147,1151,1153,1155,1157,1161,1164,1166,1169
-----computeFrom-----
39,40
39,41
62,63
62,64
66,67
66,68
67,68
67,69
117,118
117,119
120,121
120,122
132,133
132,134
150,151
150,152
154,155
154,156
159,160
159,161
172,173
172,174
216,217
216,218
247,248
247,249
267,268
267,269
288,289
288,290
308,309
308,310
316,317
316,318
319,320
319,321
330,331
330,332
340,341
340,342
350,351
350,352
381,382
381,383
398,399
398,400
438,439
438,440
453,454
453,455
461,462
461,463
462,463
462,464
475,476
475,477
485,486
485,487
506,507
506,508
526,527
526,528
534,535
534,536
537,538
537,539
548,549
548,550
558,559
558,560
575,576
575,577
607,608
607,609
616,617
616,618
656,657
656,658
664,665
664,666
665,666
665,667
678,679
678,680
688,689
688,690
709,710
709,711
729,730
729,731
737,738
737,739
740,741
740,742
751,752
751,753
761,762
761,763
771,772
771,773
802,803
802,804
819,820
819,821
859,860
859,861
874,875
874,876
882,883
882,884
883,884
883,885
896,897
896,898
906,907
906,908
927,928
927,929
947,948
947,949
955,956
955,957
958,959
958,960
969,970
969,971
979,980
979,981
996,997
996,998
1036,1037
1036,1038
1045,1046
1045,1047
1085,1086
1085,1087
1093,1094
1093,1095
1094,1095
1094,1096
1107,1108
1107,1109
1131,1132
1131,1133
-----guardedBy-----
390,434
400,436
385,429
395,433
567,602
577,605
572,601
811,855
821,857
806,850
816,854
988,1032
998,1034
983,1027
993,1031
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ProblemStatement;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;CompositeTypeSpecifier;Name;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;InitializerList;LiteralExpression;IdExpression;Name;UnaryExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;LiteralExpression;InitializerList;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int fill_hole(struct drm_i915_private *i915,		     struct i915_address_space *vm,		     u64 hole_start, u64 hole_end,		     unsigned long end_time){	const u64 hole_size = hole_end - hole_start;	struct drm_i915_gem_object *obj;	const unsigned long max_pages =		min_t(u64, ULONG_MAX - 1, hole_size/2 >> PAGE_SHIFT);	const unsigned long max_step = max(int_sqrt(max_pages), 2UL);	unsigned long npages, prime, flags;	struct i915_vma *vma;	LIST_HEAD(objects);	int err;	/* Try binding many VMA working inwards from either edge */	flags = PIN_OFFSET_FIXED | PIN_USER;	if (i915_is_ggtt(vm))		flags |= PIN_GLOBAL;	for_each_prime_number_from(prime, 2, max_step) {		for (npages = 1; npages <= max_pages; npages *= prime) {			const u64 full_size = npages << PAGE_SHIFT;			const struct {				const char *name;				u64 offset;				int step;			} phases[] = {				{ "top-down", hole_end, -1, },				{ "bottom-up", hole_start, 1, },				{ }			}, *p;			obj = fake_dma_object(i915, full_size);			if (IS_ERR(obj))				break;			list_add(&obj->st_link, &objects);			/* Align differing sized objects against the edges, and			 * check we don't walk off into the void when binding			 * them into the GTT.			 */			for (p = phases; p->name; p++) {				u64 offset;				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}			}			if (igt_timeout(end_time, "%s timed out (npages=%lu, prime=%lu)\n",					__func__, npages, prime)) {				err = -EINTR;				goto err;			}		}		close_object_list(&objects, vm);		cleanup_freed_objects(i915);	}	return 0;err:	close_object_list(&objects, vm);	return err;}
static int
fill_hole(struct drm_i915_private *i915,		     struct i915_address_space *vm,		     u64 hole_start, u64 hole_end,		     unsigned long end_time)
fill_hole
struct drm_i915_private *i915
struct drm_i915_private
drm_i915_private
*i915
*
i915
struct i915_address_space *vm
struct i915_address_space
i915_address_space
*vm
*
vm
u64 hole_start
u64
u64
hole_start
hole_start
u64 hole_end
u64
u64
hole_end
hole_end
unsigned long end_time
unsigned long
end_time
end_time
{	const u64 hole_size = hole_end - hole_start;	struct drm_i915_gem_object *obj;	const unsigned long max_pages =		min_t(u64, ULONG_MAX - 1, hole_size/2 >> PAGE_SHIFT);	const unsigned long max_step = max(int_sqrt(max_pages), 2UL);	unsigned long npages, prime, flags;	struct i915_vma *vma;	LIST_HEAD(objects);	int err;	/* Try binding many VMA working inwards from either edge */	flags = PIN_OFFSET_FIXED | PIN_USER;	if (i915_is_ggtt(vm))		flags |= PIN_GLOBAL;	for_each_prime_number_from(prime, 2, max_step) {		for (npages = 1; npages <= max_pages; npages *= prime) {			const u64 full_size = npages << PAGE_SHIFT;			const struct {				const char *name;				u64 offset;				int step;			} phases[] = {				{ "top-down", hole_end, -1, },				{ "bottom-up", hole_start, 1, },				{ }			}, *p;			obj = fake_dma_object(i915, full_size);			if (IS_ERR(obj))				break;			list_add(&obj->st_link, &objects);			/* Align differing sized objects against the edges, and			 * check we don't walk off into the void when binding			 * them into the GTT.			 */			for (p = phases; p->name; p++) {				u64 offset;				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}			}			if (igt_timeout(end_time, "%s timed out (npages=%lu, prime=%lu)\n",					__func__, npages, prime)) {				err = -EINTR;				goto err;			}		}		close_object_list(&objects, vm);		cleanup_freed_objects(i915);	}	return 0;err:	close_object_list(&objects, vm);	return err;}
const u64 hole_size = hole_end - hole_start;
const u64 hole_size = hole_end - hole_start;
const u64
u64
hole_size = hole_end - hole_start
hole_size
= hole_end - hole_start
hole_end - hole_start
hole_end
hole_end
hole_start
hole_start
struct drm_i915_gem_object *obj;
struct drm_i915_gem_object *obj;
struct drm_i915_gem_object
drm_i915_gem_object
*obj
*
obj
const unsigned long max_pages =		min_t(u64, ULONG_MAX - 1, hole_size/2 >> PAGE_SHIFT);
const unsigned long max_pages =		min_t(u64, ULONG_MAX - 1, hole_size/2 >> PAGE_SHIFT);
const unsigned long
max_pages =		min_t(u64, ULONG_MAX - 1, hole_size/2 >> PAGE_SHIFT)
max_pages
=		min_t(u64, ULONG_MAX - 1, hole_size/2 >> PAGE_SHIFT)
min_t(u64, ULONG_MAX - 1, hole_size/2 >> PAGE_SHIFT)
min_t
min_t
u64
u64
ULONG_MAX - 1
ULONG_MAX
ULONG_MAX
1
hole_size/2 >> PAGE_SHIFT
hole_size/2
hole_size
hole_size
2
PAGE_SHIFT
PAGE_SHIFT
const unsigned long max_step = max(int_sqrt(max_pages), 2UL);
const unsigned long max_step = max(int_sqrt(max_pages), 2UL);
const unsigned long
max_step = max(int_sqrt(max_pages), 2UL)
max_step
= max(int_sqrt(max_pages), 2UL)
max(int_sqrt(max_pages), 2UL)
max
max
int_sqrt(max_pages)
int_sqrt
int_sqrt
max_pages
max_pages
2UL
unsigned long npages, prime, flags;
unsigned long npages, prime, flags;
unsigned long
npages
npages
prime
prime
flags
flags
struct i915_vma *vma;
struct i915_vma *vma;
struct i915_vma
i915_vma
*vma
*
vma
LIST_HEAD(objects);
LIST_HEAD(objects);
LIST_HEAD
LIST_HEAD
(objects)
objects
objects
int err;
int err;
int
err
err
flags = PIN_OFFSET_FIXED | PIN_USER;
flags = PIN_OFFSET_FIXED | PIN_USER
flags
flags
PIN_OFFSET_FIXED | PIN_USER
PIN_OFFSET_FIXED
PIN_OFFSET_FIXED
PIN_USER
PIN_USER
if (i915_is_ggtt(vm))		flags |= PIN_GLOBAL;
i915_is_ggtt(vm)
i915_is_ggtt
i915_is_ggtt
vm
vm
flags |= PIN_GLOBAL;
flags |= PIN_GLOBAL
flags
flags
PIN_GLOBAL
PIN_GLOBAL
for_each_prime_number_from(prime, 2, max_step)
for_each_prime_number_from(prime, 2, max_step)
for_each_prime_number_from
for_each_prime_number_from
prime
prime
2
max_step
max_step
)
{		for (npages = 1; npages <= max_pages; npages *= prime) {			const u64 full_size = npages << PAGE_SHIFT;			const struct {				const char *name;				u64 offset;				int step;			} phases[] = {				{ "top-down", hole_end, -1, },				{ "bottom-up", hole_start, 1, },				{ }			}, *p;			obj = fake_dma_object(i915, full_size);			if (IS_ERR(obj))				break;			list_add(&obj->st_link, &objects);			/* Align differing sized objects against the edges, and			 * check we don't walk off into the void when binding			 * them into the GTT.			 */			for (p = phases; p->name; p++) {				u64 offset;				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}			}			if (igt_timeout(end_time, "%s timed out (npages=%lu, prime=%lu)\n",					__func__, npages, prime)) {				err = -EINTR;				goto err;			}		}		close_object_list(&objects, vm);		cleanup_freed_objects(i915);	}
for (npages = 1; npages <= max_pages; npages *= prime) {			const u64 full_size = npages << PAGE_SHIFT;			const struct {				const char *name;				u64 offset;				int step;			} phases[] = {				{ "top-down", hole_end, -1, },				{ "bottom-up", hole_start, 1, },				{ }			}, *p;			obj = fake_dma_object(i915, full_size);			if (IS_ERR(obj))				break;			list_add(&obj->st_link, &objects);			/* Align differing sized objects against the edges, and			 * check we don't walk off into the void when binding			 * them into the GTT.			 */			for (p = phases; p->name; p++) {				u64 offset;				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}			}			if (igt_timeout(end_time, "%s timed out (npages=%lu, prime=%lu)\n",					__func__, npages, prime)) {				err = -EINTR;				goto err;			}		}
npages = 1;
npages = 1
npages
npages
1
npages <= max_pages
npages
npages
max_pages
max_pages
npages *= prime
npages
npages
prime
prime
{			const u64 full_size = npages << PAGE_SHIFT;			const struct {				const char *name;				u64 offset;				int step;			} phases[] = {				{ "top-down", hole_end, -1, },				{ "bottom-up", hole_start, 1, },				{ }			}, *p;			obj = fake_dma_object(i915, full_size);			if (IS_ERR(obj))				break;			list_add(&obj->st_link, &objects);			/* Align differing sized objects against the edges, and			 * check we don't walk off into the void when binding			 * them into the GTT.			 */			for (p = phases; p->name; p++) {				u64 offset;				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}			}			if (igt_timeout(end_time, "%s timed out (npages=%lu, prime=%lu)\n",					__func__, npages, prime)) {				err = -EINTR;				goto err;			}		}
const u64 full_size = npages << PAGE_SHIFT;
const u64 full_size = npages << PAGE_SHIFT;
const u64
u64
full_size = npages << PAGE_SHIFT
full_size
= npages << PAGE_SHIFT
npages << PAGE_SHIFT
npages
npages
PAGE_SHIFT
PAGE_SHIFT
const struct {				const char *name;				u64 offset;				int step;			} phases[] = {				{ "top-down", hole_end, -1, },				{ "bottom-up", hole_start, 1, },				{ }			}, *p;
const struct {				const char *name;				u64 offset;				int step;			} phases[] = {				{ "top-down", hole_end, -1, },				{ "bottom-up", hole_start, 1, },				{ }			}, *p;
const struct {				const char *name;				u64 offset;				int step;			}

const char *name;
const char
*name
*
name
u64 offset;
u64
u64
offset
offset
int step;
int
step
step
phases[] = {				{ "top-down", hole_end, -1, },				{ "bottom-up", hole_start, 1, },				{ }			}
phases
[]
= {				{ "top-down", hole_end, -1, },				{ "bottom-up", hole_start, 1, },				{ }			}
{				{ "top-down", hole_end, -1, },				{ "bottom-up", hole_start, 1, },				{ }			}
{ "top-down", hole_end, -1, }
"top-down"
hole_end
hole_end
-1
1
{ "bottom-up", hole_start, 1, }
"bottom-up"
hole_start
hole_start
1
{ }
*p
*
p
obj = fake_dma_object(i915, full_size);
obj = fake_dma_object(i915, full_size)
obj
obj
fake_dma_object(i915, full_size)
fake_dma_object
fake_dma_object
i915
i915
full_size
full_size
if (IS_ERR(obj))				break;
IS_ERR(obj)
IS_ERR
IS_ERR
obj
obj
break;
list_add(&obj->st_link, &objects);
list_add(&obj->st_link, &objects)
list_add
list_add
&obj->st_link
obj->st_link
obj
obj
st_link
&objects
objects
objects
for (p = phases; p->name; p++) {				u64 offset;				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}			}
p = phases;
p = phases
p
p
phases
phases
p->name
p
p
name
p++
p
p
{				u64 offset;				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}				offset = p->offset;				list_for_each_entry_reverse(obj, &objects, st_link) {					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}			}
u64 offset;
u64 offset;
u64
u64
offset
offset
offset = p->offset;
offset = p->offset
offset
offset
p->offset
p
p
offset
list_for_each_entry(obj, &objects, st_link)
list_for_each_entry(obj, &objects, st_link)
list_for_each_entry
list_for_each_entry
obj
obj
&objects
objects
objects
st_link
st_link
)
{					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}
vma = i915_vma_instance(obj, vm, NULL);
vma = i915_vma_instance(obj, vm, NULL)
vma
vma
i915_vma_instance(obj, vm, NULL)
i915_vma_instance
i915_vma_instance
obj
obj
vm
vm
NULL
NULL
if (IS_ERR(vma))						continue;
IS_ERR(vma)
IS_ERR
IS_ERR
vma
vma
continue;
if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}
p->step < 0
p->step
p
p
step
0
{						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}
if (offset < hole_start + obj->base.size)							break;
offset < hole_start + obj->base.size
offset
offset
hole_start + obj->base.size
hole_start
hole_start
obj->base.size
obj->base
obj
obj
base
size
break;
offset -= obj->base.size;
offset -= obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
err = i915_vma_pin(vma, 0, 0, offset | flags);
err = i915_vma_pin(vma, 0, 0, offset | flags)
err
err
i915_vma_pin(vma, 0, 0, offset | flags)
i915_vma_pin
i915_vma_pin
vma
vma
0
0
offset | flags
offset
offset
flags
flags
if (err) {						pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}
err
err
{						pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}
pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);
pr_err("%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset)
pr_err
pr_err
"%s(%s) pin (forward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n"
__func__
__func__
p->name
p
p
name
err
err
npages
npages
prime
prime
offset
offset
goto err;
err
if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}
!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)
!drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated
drm_mm_node_allocated
&vma->node
vma->node
vma
vma
node
i915_vma_misplaced(vma, 0, 0, offset | flags)
i915_vma_misplaced
i915_vma_misplaced
vma
vma
0
0
offset | flags
offset
offset
flags
flags
{						pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}
pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);
pr_err("%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset)
pr_err
pr_err
"%s(%s) (forward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n"
__func__
__func__
p->name
p
p
name
vma->node.start
vma->node
vma
vma
node
start
vma->node.size
vma->node
vma
vma
node
size
drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated
drm_mm_node_allocated
&vma->node
vma->node
vma
vma
node
offset
offset
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
goto err;
err
i915_vma_unpin(vma);
i915_vma_unpin(vma)
i915_vma_unpin
i915_vma_unpin
vma
vma
if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}
p->step > 0
p->step
p
p
step
0
{						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}
if (offset + obj->base.size > hole_end)							break;
offset + obj->base.size > hole_end
offset + obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
hole_end
hole_end
break;
offset += obj->base.size;
offset += obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
offset = p->offset;
offset = p->offset
offset
offset
p->offset
p
p
offset
list_for_each_entry(obj, &objects, st_link)
list_for_each_entry(obj, &objects, st_link)
list_for_each_entry
list_for_each_entry
obj
obj
&objects
objects
objects
st_link
st_link
)
{					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}
vma = i915_vma_instance(obj, vm, NULL);
vma = i915_vma_instance(obj, vm, NULL)
vma
vma
i915_vma_instance(obj, vm, NULL)
i915_vma_instance
i915_vma_instance
obj
obj
vm
vm
NULL
NULL
if (IS_ERR(vma))						continue;
IS_ERR(vma)
IS_ERR
IS_ERR
vma
vma
continue;
if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}
p->step < 0
p->step
p
p
step
0
{						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}
if (offset < hole_start + obj->base.size)							break;
offset < hole_start + obj->base.size
offset
offset
hole_start + obj->base.size
hole_start
hole_start
obj->base.size
obj->base
obj
obj
base
size
break;
offset -= obj->base.size;
offset -= obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset);						err = -EINVAL;						goto err;					}
!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)
!drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated
drm_mm_node_allocated
&vma->node
vma->node
vma
vma
node
i915_vma_misplaced(vma, 0, 0, offset | flags)
i915_vma_misplaced
i915_vma_misplaced
vma
vma
0
0
offset | flags
offset
offset
flags
flags
{						pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset);						err = -EINVAL;						goto err;					}
pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset);
pr_err("%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size,						       offset)
pr_err
pr_err
"%s(%s) (forward) moved vma.node=%llx + %llx, expected offset %llx\n"
__func__
__func__
p->name
p
p
name
vma->node.start
vma->node
vma
vma
node
start
vma->node.size
vma->node
vma
vma
node
size
offset
offset
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
goto err;
err
err = i915_vma_unbind(vma);
err = i915_vma_unbind(vma)
err
err
i915_vma_unbind(vma)
i915_vma_unbind
i915_vma_unbind
vma
vma
if (err) {						pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}
err
err
{						pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}
pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);
pr_err("%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err)
pr_err
pr_err
"%s(%s) (forward) unbind of vma.node=%llx + %llx failed with err=%d\n"
__func__
__func__
p->name
p
p
name
vma->node.start
vma->node
vma
vma
node
start
vma->node.size
vma->node
vma
vma
node
size
err
err
goto err;
err
if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}
p->step > 0
p->step
p
p
step
0
{						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}
if (offset + obj->base.size > hole_end)							break;
offset + obj->base.size > hole_end
offset + obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
hole_end
hole_end
break;
offset += obj->base.size;
offset += obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
offset = p->offset;
offset = p->offset
offset
offset
p->offset
p
p
offset
list_for_each_entry_reverse(obj, &objects, st_link)
list_for_each_entry_reverse(obj, &objects, st_link)
list_for_each_entry_reverse
list_for_each_entry_reverse
obj
obj
&objects
objects
objects
st_link
st_link
)
{					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					err = i915_vma_pin(vma, 0, 0, offset | flags);					if (err) {						pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					i915_vma_unpin(vma);					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}
vma = i915_vma_instance(obj, vm, NULL);
vma = i915_vma_instance(obj, vm, NULL)
vma
vma
i915_vma_instance(obj, vm, NULL)
i915_vma_instance
i915_vma_instance
obj
obj
vm
vm
NULL
NULL
if (IS_ERR(vma))						continue;
IS_ERR(vma)
IS_ERR
IS_ERR
vma
vma
continue;
if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}
p->step < 0
p->step
p
p
step
0
{						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}
if (offset < hole_start + obj->base.size)							break;
offset < hole_start + obj->base.size
offset
offset
hole_start + obj->base.size
hole_start
hole_start
obj->base.size
obj->base
obj
obj
base
size
break;
offset -= obj->base.size;
offset -= obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
err = i915_vma_pin(vma, 0, 0, offset | flags);
err = i915_vma_pin(vma, 0, 0, offset | flags)
err
err
i915_vma_pin(vma, 0, 0, offset | flags)
i915_vma_pin
i915_vma_pin
vma
vma
0
0
offset | flags
offset
offset
flags
flags
if (err) {						pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}
err
err
{						pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);						goto err;					}
pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset);
pr_err("%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n",						       __func__, p->name, err, npages, prime, offset)
pr_err
pr_err
"%s(%s) pin (backward) failed with err=%d on size=%lu pages (prime=%lu), offset=%llx\n"
__func__
__func__
p->name
p
p
name
err
err
npages
npages
prime
prime
offset
offset
goto err;
err
if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}
!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)
!drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated
drm_mm_node_allocated
&vma->node
vma->node
vma
vma
node
i915_vma_misplaced(vma, 0, 0, offset | flags)
i915_vma_misplaced
i915_vma_misplaced
vma
vma
0
0
offset | flags
offset
offset
flags
flags
{						pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}
pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);
pr_err("%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset)
pr_err
pr_err
"%s(%s) (backward) insert failed: vma.node=%llx + %llx [allocated? %d], expected offset %llx\n"
__func__
__func__
p->name
p
p
name
vma->node.start
vma->node
vma
vma
node
start
vma->node.size
vma->node
vma
vma
node
size
drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated
drm_mm_node_allocated
&vma->node
vma->node
vma
vma
node
offset
offset
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
goto err;
err
i915_vma_unpin(vma);
i915_vma_unpin(vma)
i915_vma_unpin
i915_vma_unpin
vma
vma
if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}
p->step > 0
p->step
p
p
step
0
{						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}
if (offset + obj->base.size > hole_end)							break;
offset + obj->base.size > hole_end
offset + obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
hole_end
hole_end
break;
offset += obj->base.size;
offset += obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
offset = p->offset;
offset = p->offset
offset
offset
p->offset
p
p
offset
list_for_each_entry_reverse(obj, &objects, st_link)
list_for_each_entry_reverse(obj, &objects, st_link)
list_for_each_entry_reverse
list_for_each_entry_reverse
obj
obj
&objects
objects
objects
st_link
st_link
)
{					vma = i915_vma_instance(obj, vm, NULL);					if (IS_ERR(vma))						continue;					if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}					if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}					err = i915_vma_unbind(vma);					if (err) {						pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}					if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}				}
vma = i915_vma_instance(obj, vm, NULL);
vma = i915_vma_instance(obj, vm, NULL)
vma
vma
i915_vma_instance(obj, vm, NULL)
i915_vma_instance
i915_vma_instance
obj
obj
vm
vm
NULL
NULL
if (IS_ERR(vma))						continue;
IS_ERR(vma)
IS_ERR
IS_ERR
vma
vma
continue;
if (p->step < 0) {						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}
p->step < 0
p->step
p
p
step
0
{						if (offset < hole_start + obj->base.size)							break;						offset -= obj->base.size;					}
if (offset < hole_start + obj->base.size)							break;
offset < hole_start + obj->base.size
offset
offset
hole_start + obj->base.size
hole_start
hole_start
obj->base.size
obj->base
obj
obj
base
size
break;
offset -= obj->base.size;
offset -= obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
if (!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)) {						pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}
!drm_mm_node_allocated(&vma->node) ||					    i915_vma_misplaced(vma, 0, 0, offset | flags)
!drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated
drm_mm_node_allocated
&vma->node
vma->node
vma
vma
node
i915_vma_misplaced(vma, 0, 0, offset | flags)
i915_vma_misplaced
i915_vma_misplaced
vma
vma
0
0
offset | flags
offset
offset
flags
flags
{						pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);						err = -EINVAL;						goto err;					}
pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset);
pr_err("%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n",						       __func__, p->name, vma->node.start, vma->node.size, drm_mm_node_allocated(&vma->node),						       offset)
pr_err
pr_err
"%s(%s) (backward) moved vma.node=%llx + %llx [allocated? %d], expected offset %llx\n"
__func__
__func__
p->name
p
p
name
vma->node.start
vma->node
vma
vma
node
start
vma->node.size
vma->node
vma
vma
node
size
drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated
drm_mm_node_allocated
&vma->node
vma->node
vma
vma
node
offset
offset
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
goto err;
err
err = i915_vma_unbind(vma);
err = i915_vma_unbind(vma)
err
err
i915_vma_unbind(vma)
i915_vma_unbind
i915_vma_unbind
vma
vma
if (err) {						pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}
err
err
{						pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);						goto err;					}
pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err);
pr_err("%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n",						       __func__, p->name, vma->node.start, vma->node.size,						       err)
pr_err
pr_err
"%s(%s) (backward) unbind of vma.node=%llx + %llx failed with err=%d\n"
__func__
__func__
p->name
p
p
name
vma->node.start
vma->node
vma
vma
node
start
vma->node.size
vma->node
vma
vma
node
size
err
err
goto err;
err
if (p->step > 0) {						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}
p->step > 0
p->step
p
p
step
0
{						if (offset + obj->base.size > hole_end)							break;						offset += obj->base.size;					}
if (offset + obj->base.size > hole_end)							break;
offset + obj->base.size > hole_end
offset + obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
hole_end
hole_end
break;
offset += obj->base.size;
offset += obj->base.size
offset
offset
obj->base.size
obj->base
obj
obj
base
size
if (igt_timeout(end_time, "%s timed out (npages=%lu, prime=%lu)\n",					__func__, npages, prime)) {				err = -EINTR;				goto err;			}
igt_timeout(end_time, "%s timed out (npages=%lu, prime=%lu)\n",					__func__, npages, prime)
igt_timeout
igt_timeout
end_time
end_time
"%s timed out (npages=%lu, prime=%lu)\n"
__func__
__func__
npages
npages
prime
prime
{				err = -EINTR;				goto err;			}
err = -EINTR;
err = -EINTR
err
err
-EINTR
EINTR
EINTR
goto err;
err
close_object_list(&objects, vm);
close_object_list(&objects, vm)
close_object_list
close_object_list
&objects
objects
objects
vm
vm
cleanup_freed_objects(i915);
cleanup_freed_objects(i915)
cleanup_freed_objects
cleanup_freed_objects
i915
i915
return 0;
0
err:	close_object_list(&objects, vm);
err
close_object_list(&objects, vm);
close_object_list(&objects, vm)
close_object_list
close_object_list
&objects
objects
objects
vm
vm
return err;
err
err
-----joern-----
(287,425,0)
(500,259,0)
(89,14,0)
(285,579,0)
(35,646,0)
(329,39,0)
(380,276,0)
(298,617,0)
(488,110,0)
(227,149,0)
(150,660,0)
(32,426,0)
(70,187,0)
(639,571,0)
(509,634,0)
(106,318,0)
(380,110,0)
(144,484,0)
(536,53,0)
(317,483,0)
(312,343,0)
(95,478,0)
(83,132,0)
(14,571,0)
(294,512,0)
(203,602,0)
(189,106,0)
(471,566,0)
(437,387,0)
(187,106,0)
(476,489,0)
(157,443,0)
(425,635,0)
(528,336,0)
(145,184,0)
(443,49,0)
(262,172,0)
(311,416,0)
(545,601,0)
(148,106,0)
(499,528,0)
(187,558,0)
(427,103,0)
(51,560,0)
(426,369,0)
(300,303,0)
(538,293,0)
(283,85,0)
(128,427,0)
(66,270,0)
(113,475,0)
(158,636,0)
(25,200,0)
(262,87,0)
(19,486,0)
(216,141,0)
(39,123,0)
(181,425,0)
(101,64,0)
(451,323,0)
(169,186,0)
(557,259,0)
(374,49,0)
(632,322,0)
(624,102,0)
(188,605,0)
(386,286,0)
(249,127,0)
(187,261,0)
(564,451,0)
(364,577,0)
(97,543,0)
(210,378,0)
(177,516,0)
(409,632,0)
(547,608,0)
(190,455,0)
(312,451,0)
(209,546,0)
(41,56,0)
(5,516,0)
(626,506,0)
(237,558,0)
(487,327,0)
(609,374,0)
(438,602,0)
(22,46,0)
(138,259,0)
(281,172,0)
(441,526,0)
(71,39,0)
(574,64,0)
(358,628,0)
(81,322,0)
(239,556,0)
(238,418,0)
(53,286,0)
(647,17,0)
(362,535,0)
(130,416,0)
(140,450,0)
(56,50,0)
(443,83,0)
(505,635,0)
(175,345,0)
(30,581,0)
(165,83,0)
(479,295,0)
(251,505,0)
(642,646,0)
(490,451,0)
(638,399,0)
(291,56,0)
(473,259,0)
(660,456,0)
(235,327,0)
(499,497,0)
(645,529,0)
(336,528,0)
(297,586,0)
(348,566,0)
(125,293,0)
(627,187,0)
(575,135,0)
(527,127,0)
(74,564,0)
(145,346,0)
(293,571,0)
(279,359,0)
(608,416,0)
(347,362,0)
(80,259,0)
(514,506,0)
(288,615,0)
(646,492,0)
(173,80,0)
(165,610,0)
(540,76,0)
(72,314,0)
(492,501,0)
(525,79,0)
(584,303,0)
(645,445,0)
(619,118,0)
(347,379,0)
(580,379,0)
(506,249,0)
(607,347,0)
(650,53,0)
(293,591,0)
(166,417,0)
(620,510,0)
(27,537,0)
(173,586,0)
(414,450,0)
(27,319,0)
(267,123,0)
(225,261,0)
(594,152,0)
(127,634,0)
(391,319,0)
(98,610,0)
(85,610,0)
(382,14,0)
(14,455,0)
(167,443,0)
(448,416,0)
(219,49,0)
(240,40,0)
(349,295,0)
(443,167,0)
(606,636,0)
(147,492,0)
(93,294,0)
(605,159,0)
(381,348,0)
(314,87,0)
(104,309,0)
(373,212,0)
(242,36,0)
(452,556,0)
(617,189,0)
(482,342,0)
(658,435,0)
(124,602,0)
(160,452,0)
(78,589,0)
(42,369,0)
(462,610,0)
(257,36,0)
(491,14,0)
(450,416,0)
(76,102,0)
(384,87,0)
(518,453,0)
(60,66,0)
(184,266,0)
(278,410,0)
(339,39,0)
(136,127,0)
(492,82,0)
(359,315,0)
(653,404,0)
(577,28,0)
(365,189,0)
(142,40,0)
(549,229,0)
(506,626,0)
(541,490,0)
(564,634,0)
(400,482,0)
(146,53,0)
(427,379,0)
(265,212,0)
(228,343,0)
(410,278,0)
(472,524,0)
(484,602,0)
(327,416,0)
(449,574,0)
(392,162,0)
(486,418,0)
(315,177,0)
(542,173,0)
(258,501,0)
(196,311,0)
(366,259,0)
(222,546,0)
(77,579,0)
(23,445,0)
(475,176,0)
(90,313,0)
(8,110,0)
(24,36,0)
(92,416,0)
(271,267,0)
(110,380,0)
(115,622,0)
(145,100,0)
(411,615,0)
(652,261,0)
(18,186,0)
(385,639,0)
(492,34,0)
(401,629,0)
(622,379,0)
(312,270,0)
(412,64,0)
(313,262,0)
(273,602,0)
(656,135,0)
(220,297,0)
(241,584,0)
(535,11,0)
(560,492,0)
(105,152,0)
(345,456,0)
(247,444,0)
(338,160,0)
(151,653,0)
(10,589,0)
(393,350,0)
(152,571,0)
(556,10,0)
(232,612,0)
(645,197,0)
(100,145,0)
(445,114,0)
(515,259,0)
(589,604,0)
(497,47,0)
(262,313,0)
(459,443,0)
(206,378,0)
(526,379,0)
(596,579,0)
(33,99,0)
(579,596,0)
(85,83,0)
(451,87,0)
(367,488,0)
(460,259,0)
(342,512,0)
(213,656,0)
(341,614,0)
(379,130,0)
(165,79,0)
(635,636,0)
(270,312,0)
(295,318,0)
(520,187,0)
(649,489,0)
(93,480,0)
(560,51,0)
(177,148,0)
(583,448,0)
(286,53,0)
(407,249,0)
(582,476,0)
(244,176,0)
(53,197,0)
(233,311,0)
(539,369,0)
(163,642,0)
(63,498,0)
(541,512,0)
(48,167,0)
(444,416,0)
(324,453,0)
(389,571,0)
(12,162,0)
(187,615,0)
(238,39,0)
(498,232,0)
(100,121,0)
(495,46,0)
(469,158,0)
(450,182,0)
(501,492,0)
(368,259,0)
(589,10,0)
(9,226,0)
(203,182,0)
(14,87,0)
(354,635,0)
(404,653,0)
(486,379,0)
(421,473,0)
(567,297,0)
(130,379,0)
(444,64,0)
(69,185,0)
(618,121,0)
(156,605,0)
(222,645,0)
(604,589,0)
(149,526,0)
(112,634,0)
(202,123,0)
(601,588,0)
(130,612,0)
(423,318,0)
(632,165,0)
(313,90,0)
(82,467,0)
(454,636,0)
(544,347,0)
(383,473,0)
(107,419,0)
(655,293,0)
(569,103,0)
(255,444,0)
(179,197,0)
(296,14,0)
(309,117,0)
(431,179,0)
(174,259,0)
(153,28,0)
(39,276,0)
(524,267,0)
(193,636,0)
(387,474,0)
(178,428,0)
(572,509,0)
(406,154,0)
(340,259,0)
(556,452,0)
(155,346,0)
(214,432,0)
(388,223,0)
(152,118,0)
(631,625,0)
(521,373,0)
(327,235,0)
(305,489,0)
(412,343,0)
(552,501,0)
(557,489,0)
(611,635,0)
(141,259,0)
(439,446,0)
(110,516,0)
(59,622,0)
(410,378,0)
(430,622,0)
(269,516,0)
(256,47,0)
(533,416,0)
(620,11,0)
(452,160,0)
(122,533,0)
(203,581,0)
(310,492,0)
(249,189,0)
(482,588,0)
(428,178,0)
(629,99,0)
(336,574,0)
(568,5,0)
(164,468,0)
(5,512,0)
(457,425,0)
(653,350,0)
(467,82,0)
(176,83,0)
(622,430,0)
(200,347,0)
(316,278,0)
(183,235,0)
(623,404,0)
(314,269,0)
(254,14,0)
(355,312,0)
(654,130,0)
(47,64,0)
(490,50,0)
(248,636,0)
(528,499,0)
(330,451,0)
(73,312,0)
(321,165,0)
(311,475,0)
(396,505,0)
(198,541,0)
(194,380,0)
(566,348,0)
(21,80,0)
(645,373,0)
(561,617,0)
(0,557,0)
(275,130,0)
(492,106,0)
(425,617,0)
(297,118,0)
(615,187,0)
(10,276,0)
(480,608,0)
(374,456,0)
(170,379,0)
(199,467,0)
(266,184,0)
(453,40,0)
(369,426,0)
(579,456,0)
(597,645,0)
(523,367,0)
(646,642,0)
(556,614,0)
(14,529,0)
(52,259,0)
(309,64,0)
(559,424,0)
(628,98,0)
(440,148,0)
(189,235,0)
(46,495,0)
(50,56,0)
(290,492,0)
(53,149,0)
(26,509,0)
(145,402,0)
(4,399,0)
(201,293,0)
(99,629,0)
(657,210,0)
(574,336,0)
(448,404,0)
(333,448,0)
(221,456,0)
(502,276,0)
(636,318,0)
(85,634,0)
(11,535,0)
(470,354,0)
(184,145,0)
(221,478,0)
(200,127,0)
(637,444,0)
(344,207,0)
(40,87,0)
(443,319,0)
(492,646,0)
(249,506,0)
(306,226,0)
(294,93,0)
(610,98,0)
(352,295,0)
(332,402,0)
(588,601,0)
(133,117,0)
(189,86,0)
(418,238,0)
(361,114,0)
(308,187,0)
(630,317,0)
(230,34,0)
(476,207,0)
(197,226,0)
(603,628,0)
(118,602,0)
(474,443,0)
(232,498,0)
(94,252,0)
(303,584,0)
(276,318,0)
(578,342,0)
(595,651,0)
(158,635,0)
(553,648,0)
(18,596,0)
(215,452,0)
(346,145,0)
(511,262,0)
(653,189,0)
(464,346,0)
(428,399,0)
(99,80,0)
(375,593,0)
(529,453,0)
(249,106,0)
(496,604,0)
(359,416,0)
(376,226,0)
(270,66,0)
(387,456,0)
(159,605,0)
(301,577,0)
(489,557,0)
(617,425,0)
(478,295,0)
(159,195,0)
(485,480,0)
(453,529,0)
(562,510,0)
(262,451,0)
(322,632,0)
(478,221,0)
(645,27,0)
(186,169,0)
(299,660,0)
(3,451,0)
(293,261,0)
(278,83,0)
(456,295,0)
(118,152,0)
(483,317,0)
(49,443,0)
(168,124,0)
(40,453,0)
(229,445,0)
(126,207,0)
(57,639,0)
(442,286,0)
(604,416,0)
(526,149,0)
(102,76,0)
(17,169,0)
(651,3,0)
(596,18,0)
(39,76,0)
(195,159,0)
(645,267,0)
(418,486,0)
(302,226,0)
(643,259,0)
(447,294,0)
(40,634,0)
(264,363,0)
(232,259,0)
(116,564,0)
(588,482,0)
(337,432,0)
(565,636,0)
(445,229,0)
(395,82,0)
(421,43,0)
(482,189,0)
(179,379,0)
(205,295,0)
(628,416,0)
(546,154,0)
(152,261,0)
(14,625,0)
(36,635,0)
(473,421,0)
(645,593,0)
(307,455,0)
(513,187,0)
(420,660,0)
(488,367,0)
(342,482,0)
(312,162,0)
(634,509,0)
(605,635,0)
(425,640,0)
(564,127,0)
(211,323,0)
(506,635,0)
(640,425,0)
(269,656,0)
(66,64,0)
(322,416,0)
(360,453,0)
(532,221,0)
(106,185,0)
(593,139,0)
(47,497,0)
(548,135,0)
(404,448,0)
(493,315,0)
(261,571,0)
(554,526,0)
(633,259,0)
(79,512,0)
(598,571,0)
(497,499,0)
(656,269,0)
(14,261,0)
(280,187,0)
(410,516,0)
(312,178,0)
(120,200,0)
(121,456,0)
(325,367,0)
(103,427,0)
(85,17,0)
(616,443,0)
(432,87,0)
(494,117,0)
(28,577,0)
(334,537,0)
(645,478,0)
(207,476,0)
(200,634,0)
(96,117,0)
(492,560,0)
(416,297,0)
(659,17,0)
(397,626,0)
(508,412,0)
(268,506,0)
(315,359,0)
(592,490,0)
(87,432,0)
(277,86,0)
(466,132,0)
(29,71,0)
(312,87,0)
(378,410,0)
(353,117,0)
(88,264,0)
(234,184,0)
(451,3,0)
(245,17,0)
(43,557,0)
(272,264,0)
(40,127,0)
(200,10,0)
(178,312,0)
(139,593,0)
(510,379,0)
(653,106,0)
(467,635,0)
(223,276,0)
(343,312,0)
(111,327,0)
(370,293,0)
(45,197,0)
(556,276,0)
(433,71,0)
(2,167,0)
(249,634,0)
(51,505,0)
(177,315,0)
(617,127,0)
(266,456,0)
(50,490,0)
(372,154,0)
(601,416,0)
(5,141,0)
(458,612,0)
(267,524,0)
(613,14,0)
(621,124,0)
(224,374,0)
(328,651,0)
(640,636,0)
(634,259,0)
(510,620,0)
(161,232,0)
(422,574,0)
(91,185,0)
(474,387,0)
(191,266,0)
(36,612,0)
(98,628,0)
(600,145,0)
(517,588,0)
(182,203,0)
(93,10,0)
(522,98,0)
(236,249,0)
(186,18,0)
(304,102,0)
(261,261,0)
(378,210,0)
(534,117,0)
(90,416,0)
(475,311,0)
(82,492,0)
(131,130,0)
(357,363,0)
(546,259,0)
(56,416,0)
(149,53,0)
(76,39,0)
(282,39,0)
(662,106,0)
(492,189,0)
(599,93,0)
(371,495,0)
(519,506,0)
(398,495,0)
(210,416,0)
(39,238,0)
(235,189,0)
(64,444,0)
(503,322,0)
(535,362,0)
(642,635,0)
(192,419,0)
(443,610,0)
(274,47,0)
(109,377,0)
(644,488,0)
(102,379,0)
(617,106,0)
(276,223,0)
(180,121,0)
(390,223,0)
(320,601,0)
(362,347,0)
(62,295,0)
(529,117,0)
(590,269,0)
(645,640,0)
(463,210,0)
(54,145,0)
(537,27,0)
(444,612,0)
(626,397,0)
(212,373,0)
(176,475,0)
(550,640,0)
(39,10,0)
(83,318,0)
(331,602,0)
(246,177,0)
(204,10,0)
(581,203,0)
(292,412,0)
(363,264,0)
(207,141,0)
(551,458,0)
(58,66,0)
(218,303,0)
(49,374,0)
(75,3,0)
(480,93,0)
(117,318,0)
(182,450,0)
(16,305,0)
(85,127,0)
(36,416,0)
(137,50,0)
(208,83,0)
(399,64,0)
(564,87,0)
(195,397,0)
(505,51,0)
(434,642,0)
(269,314,0)
(415,305,0)
(635,36,0)
(43,421,0)
(231,160,0)
(443,474,0)
(11,620,0)
(87,318,0)
(419,417,0)
(343,412,0)
(416,602,0)
(110,488,0)
(187,571,0)
(436,90,0)
(661,421,0)
(477,317,0)
(171,43,0)
(132,83,0)
(424,64,0)
(17,456,0)
(351,529,0)
(39,103,0)
(65,410,0)
(103,39,0)
(200,276,0)
(455,14,0)
(397,195,0)
(263,359,0)
(185,106,0)
(187,640,0)
(482,106,0)
(61,85,0)
(20,226,0)
(119,467,0)
(15,486,0)
(129,313,0)
(37,387,0)
(99,612,0)
(490,541,0)
(461,427,0)
(148,177,0)
(53,377,0)
(40,451,0)
(660,612,0)
(335,543,0)
(573,347,0)
(639,261,0)
(660,416,0)
(489,476,0)
(64,117,0)
(429,139,0)
(165,632,0)
(651,416,0)
(574,564,0)
(3,651,0)
(14,451,0)
(563,566,0)
(134,430,0)
(608,480,0)
(456,660,0)
(430,53,0)
(135,416,0)
(67,602,0)
(610,83,0)
(481,312,0)
(405,170,0)
(169,17,0)
(417,419,0)
(162,312,0)
(121,100,0)
(1,510,0)
(93,276,0)
(176,610,0)
(453,64,0)
(260,100,0)
(176,648,0)
(284,604,0)
(403,5,0)
(253,124,0)
(564,574,0)
(217,270,0)
(53,430,0)
(17,85,0)
(576,483,0)
(367,416,0)
(143,145,0)
(326,474,0)
(312,252,0)
(504,456,0)
(617,634,0)
(593,252,0)
(197,179,0)
(490,87,0)
(373,34,0)
(160,416,0)
(39,71,0)
(555,27,0)
(489,305,0)
(465,574,0)
(610,435,0)
(145,478,0)
(639,557,0)
(379,226,0)
(243,266,0)
(141,5,0)
(187,189,0)
(226,318,0)
(531,174,0)
(79,165,0)
(108,608,0)
(10,446,0)
(135,656,0)
(645,259,0)
(530,132,0)
(6,602,0)
(641,259,0)
(399,428,0)
(347,200,0)
(297,416,0)
(289,90,0)
(645,597,1)
(38,424,1)
(312,481,1)
(367,523,1)
(338,239,1)
(95,169,1)
(278,410,1)
(413,533,1)
(12,73,1)
(130,416,1)
(55,342,1)
(492,106,1)
(646,35,1)
(100,121,1)
(533,416,1)
(374,456,1)
(199,501,1)
(225,293,1)
(543,97,1)
(219,374,1)
(351,417,1)
(431,45,1)
(99,33,1)
(180,184,1)
(280,520,1)
(103,427,1)
(170,405,1)
(241,303,1)
(329,339,1)
(574,64,1)
(43,557,1)
(315,493,1)
(267,524,1)
(36,416,1)
(451,3,1)
(179,379,1)
(639,571,1)
(312,178,1)
(337,214,1)
(617,106,1)
(367,416,1)
(564,74,1)
(136,527,1)
(570,148,1)
(632,322,1)
(39,238,1)
(97,335,1)
(260,121,1)
(204,380,1)
(649,0,1)
(427,128,1)
(449,465,1)
(552,290,1)
(389,598,1)
(145,478,1)
(458,612,1)
(432,337,1)
(57,571,1)
(93,10,1)
(109,53,1)
(444,612,1)
(200,276,1)
(66,58,1)
(266,456,1)
(564,451,1)
(235,327,1)
(504,83,1)
(343,412,1)
(467,119,1)
(268,397,1)
(131,654,1)
(197,179,1)
(526,554,1)
(457,181,1)
(103,569,1)
(47,64,1)
(149,227,1)
(3,651,1)
(24,611,1)
(47,274,1)
(254,507,1)
(163,82,1)
(475,311,1)
(121,456,1)
(640,425,1)
(125,31,1)
(63,230,1)
(270,66,1)
(424,64,1)
(550,189,1)
(40,451,1)
(264,88,1)
(600,68,1)
(436,511,1)
(108,547,1)
(307,382,1)
(184,266,1)
(152,594,1)
(592,426,1)
(564,127,1)
(79,512,1)
(557,489,1)
(1,584,1)
(478,221,1)
(297,567,1)
(209,173,1)
(290,147,1)
(59,286,1)
(234,266,1)
(120,25,1)
(398,371,1)
(623,448,1)
(364,7,1)
(189,235,1)
(480,485,1)
(328,595,1)
(360,351,1)
(129,90,1)
(486,379,1)
(14,613,1)
(43,171,1)
(121,618,1)
(140,414,1)
(549,23,1)
(652,225,1)
(45,362,1)
(618,180,1)
(166,419,1)
(403,568,1)
(77,483,1)
(214,384,1)
(3,75,1)
(645,445,1)
(150,299,1)
(125,394,1)
(66,64,1)
(505,635,1)
(620,510,1)
(130,131,1)
(101,87,1)
(583,151,1)
(262,451,1)
(348,381,1)
(222,645,1)
(270,217,1)
(85,83,1)
(313,129,1)
(207,141,1)
(374,224,1)
(294,93,1)
(53,536,1)
(61,647,1)
(272,354,1)
(176,475,1)
(451,87,1)
(458,551,1)
(426,32,1)
(44,354,1)
(137,56,1)
(575,548,1)
(165,632,1)
(223,388,1)
(56,41,1)
(297,586,1)
(69,91,1)
(56,416,1)
(391,27,1)
(46,495,1)
(597,232,1)
(233,244,1)
(312,270,1)
(425,617,1)
(230,373,1)
(422,528,1)
(603,462,1)
(657,463,1)
(315,359,1)
(617,634,1)
(192,107,1)
(485,608,1)
(540,102,1)
(304,71,1)
(355,336,1)
(245,659,1)
(482,189,1)
(154,406,1)
(399,64,1)
(523,325,1)
(159,605,1)
(269,516,1)
(14,261,1)
(420,150,1)
(196,233,1)
(73,355,1)
(419,192,1)
(642,635,1)
(90,416,1)
(426,369,1)
(598,458,1)
(291,592,1)
(11,620,1)
(5,512,1)
(194,584,1)
(256,507,1)
(71,29,1)
(249,634,1)
(238,418,1)
(626,397,1)
(467,635,1)
(0,141,1)
(384,543,1)
(262,313,1)
(37,437,1)
(653,106,1)
(261,652,1)
(187,261,1)
(629,401,1)
(347,379,1)
(158,469,1)
(470,635,1)
(149,526,1)
(161,498,1)
(501,258,1)
(584,303,1)
(448,416,1)
(182,450,1)
(125,570,1)
(112,174,1)
(609,167,1)
(164,44,1)
(645,197,1)
(218,300,1)
(538,201,1)
(50,56,1)
(1,10,1)
(630,477,1)
(613,89,1)
(378,206,1)
(466,530,1)
(14,451,1)
(220,92,1)
(635,36,1)
(210,416,1)
(490,87,1)
(660,416,1)
(257,24,1)
(203,182,1)
(231,338,1)
(450,140,1)
(195,159,1)
(89,296,1)
(48,2,1)
(63,202,1)
(645,640,1)
(183,327,1)
(356,541,1)
(190,307,1)
(396,251,1)
(145,100,1)
(276,223,1)
(249,236,1)
(39,282,1)
(313,90,1)
(293,571,1)
(584,241,1)
(107,424,1)
(339,362,1)
(488,644,1)
(85,127,1)
(187,70,1)
(132,466,1)
(347,200,1)
(370,538,1)
(381,566,1)
(626,506,1)
(324,518,1)
(491,455,1)
(156,13,1)
(110,488,1)
(32,369,1)
(463,65,1)
(316,483,1)
(388,390,1)
(520,627,1)
(383,557,1)
(334,555,1)
(224,609,1)
(472,271,1)
(187,106,1)
(64,444,1)
(142,324,1)
(533,122,1)
(312,162,1)
(412,292,1)
(475,113,1)
(39,103,1)
(93,480,1)
(646,642,1)
(228,412,1)
(39,276,1)
(487,111,1)
(361,445,1)
(345,456,1)
(474,326,1)
(50,137,1)
(474,387,1)
(536,149,1)
(380,276,1)
(566,471,1)
(229,549,1)
(371,68,1)
(492,501,1)
(499,497,1)
(615,288,1)
(521,492,1)
(462,278,1)
(441,430,1)
(311,416,1)
(415,649,1)
(502,348,1)
(255,101,1)
(407,519,1)
(359,416,1)
(246,440,1)
(476,582,1)
(468,164,1)
(125,55,1)
(28,153,1)
(579,456,1)
(498,63,1)
(314,87,1)
(660,612,1)
(342,482,1)
(5,403,1)
(365,148,1)
(574,564,1)
(141,5,1)
(495,398,1)
(111,365,1)
(492,646,1)
(634,509,1)
(397,195,1)
(148,106,1)
(541,198,1)
(492,560,1)
(452,215,1)
(309,64,1)
(511,541,1)
(571,389,1)
(40,240,1)
(576,317,1)
(10,276,1)
(638,343,1)
(222,546,1)
(213,135,1)
(406,372,1)
(497,47,1)
(247,637,1)
(297,118,1)
(301,364,1)
(433,329,1)
(651,416,1)
(502,653,1)
(541,512,1)
(54,600,1)
(651,328,1)
(598,127,1)
(509,26,1)
(164,84,1)
(410,516,1)
(610,98,1)
(93,276,1)
(70,280,1)
(289,436,1)
(312,87,1)
(482,106,1)
(476,207,1)
(122,416,1)
(427,379,1)
(98,522,1)
(483,576,1)
(461,76,1)
(242,257,1)
(654,275,1)
(53,197,1)
(662,46,1)
(208,426,1)
(18,596,1)
(292,508,1)
(492,189,1)
(294,512,1)
(387,37,1)
(125,250,1)
(127,634,1)
(113,311,1)
(72,417,1)
(27,537,1)
(308,513,1)
(510,379,1)
(483,317,1)
(60,162,1)
(178,428,1)
(639,385,1)
(187,571,1)
(153,577,1)
(551,634,1)
(164,587,1)
(327,487,1)
(546,209,1)
(171,383,1)
(210,657,1)
(145,143,1)
(65,316,1)
(36,612,1)
(448,333,1)
(74,116,1)
(529,453,1)
(243,346,1)
(429,375,1)
(198,490,1)
(382,254,1)
(593,139,1)
(79,525,1)
(404,448,1)
(40,634,1)
(556,452,1)
(232,612,1)
(594,105,1)
(514,268,1)
(157,474,1)
(459,169,1)
(418,486,1)
(104,336,1)
(508,270,1)
(250,278,1)
(604,416,1)
(390,502,1)
(486,15,1)
(411,308,1)
(148,177,1)
(455,190,1)
(527,458,1)
(293,655,1)
(622,115,1)
(87,432,1)
(251,646,1)
(158,635,1)
(237,187,1)
(79,165,1)
(405,379,1)
(85,634,1)
(49,374,1)
(404,623,1)
(240,142,1)
(590,72,1)
(203,581,1)
(221,532,1)
(409,322,1)
(645,27,1)
(530,208,1)
(555,443,1)
(23,293,1)
(15,19,1)
(239,294,1)
(294,447,1)
(595,330,1)
(249,189,1)
(212,265,1)
(187,189,1)
(263,246,1)
(312,451,1)
(53,430,1)
(249,106,1)
(177,516,1)
(100,260,1)
(503,321,1)
(63,109,1)
(217,66,1)
(321,46,1)
(342,578,1)
(522,628,1)
(639,261,1)
(357,264,1)
(443,49,1)
(369,42,1)
(125,543,1)
(505,396,1)
(39,76,1)
(232,498,1)
(5,516,1)
(169,17,1)
(63,361,1)
(417,166,1)
(628,416,1)
(63,94,1)
(179,431,1)
(624,304,1)
(91,662,1)
(477,345,1)
(346,464,1)
(544,607,1)
(14,529,1)
(442,386,1)
(46,22,1)
(653,404,1)
(342,512,1)
(282,238,1)
(335,154,1)
(519,514,1)
(473,421,1)
(507,529,1)
(51,505,1)
(580,276,1)
(119,199,1)
(125,408,1)
(354,635,1)
(135,575,1)
(261,571,1)
(94,593,1)
(564,634,1)
(165,83,1)
(14,571,1)
(362,347,1)
(443,157,1)
(186,18,1)
(232,161,1)
(373,212,1)
(42,539,1)
(261,261,1)
(68,478,1)
(469,626,1)
(322,416,1)
(345,175,1)
(607,535,1)
(492,310,1)
(236,407,1)
(379,130,1)
(605,188,1)
(139,429,1)
(244,79,1)
(98,628,1)
(2,616,1)
(567,220,1)
(227,526,1)
(284,496,1)
(545,400,1)
(296,491,1)
(589,604,1)
(125,356,1)
(387,456,1)
(394,294,1)
(568,216,1)
(63,332,1)
(589,78,1)
(164,28,1)
(271,39,1)
(456,660,1)
(482,588,1)
(354,470,1)
(99,612,1)
(417,419,1)
(372,203,1)
(185,69,1)
(375,312,1)
(547,599,1)
(200,120,1)
(75,651,1)
(146,650,1)
(305,16,1)
(274,256,1)
(443,83,1)
(333,583,1)
(19,103,1)
(363,357,1)
(215,160,1)
(385,57,1)
(49,219,1)
(531,473,1)
(130,612,1)
(562,1,1)
(187,640,1)
(293,591,1)
(309,104,1)
(443,167,1)
(170,379,1)
(622,379,1)
(581,30,1)
(152,261,1)
(359,279,1)
(16,415,1)
(532,95,1)
(336,574,1)
(83,132,1)
(578,482,1)
(293,261,1)
(528,499,1)
(541,490,1)
(191,243,1)
(175,456,1)
(92,484,1)
(513,13,1)
(493,359,1)
(659,186,1)
(661,43,1)
(619,639,1)
(481,178,1)
(288,411,1)
(189,106,1)
(489,476,1)
(517,601,1)
(465,422,1)
(655,370,1)
(235,183,1)
(176,83,1)
(587,345,1)
(28,577,1)
(184,234,1)
(160,231,1)
(249,127,1)
(317,630,1)
(380,110,1)
(322,81,1)
(279,263,1)
(105,619,1)
(408,79,1)
(647,245,1)
(556,276,1)
(151,342,1)
(10,589,1)
(135,416,1)
(269,656,1)
(550,363,1)
(611,106,1)
(325,8,1)
(187,615,1)
(326,387,1)
(41,291,1)
(314,269,1)
(599,28,1)
(399,4,1)
(443,474,1)
(160,416,1)
(608,108,1)
(596,579,1)
(464,155,1)
(610,83,1)
(488,367,1)
(7,197,1)
(510,562,1)
(362,535,1)
(445,229,1)
(425,635,1)
(653,189,1)
(77,610,1)
(40,127,1)
(162,392,1)
(336,528,1)
(90,289,1)
(601,416,1)
(330,314,1)
(164,38,1)
(275,580,1)
(4,638,1)
(99,629,1)
(437,49,1)
(53,286,1)
(311,196,1)
(14,455,1)
(480,608,1)
(174,531,1)
(81,503,1)
(63,631,1)
(30,182,1)
(266,191,1)
(579,285,1)
(343,228,1)
(506,249,1)
(546,154,1)
(202,267,1)
(152,571,1)
(452,160,1)
(102,379,1)
(627,615,1)
(53,149,1)
(221,456,1)
(585,380,1)
(588,517,1)
(145,184,1)
(639,557,1)
(78,604,1)
(57,261,1)
(358,603,1)
(173,586,1)
(206,210,1)
(33,629,1)
(82,467,1)
(31,314,1)
(484,144,1)
(450,416,1)
(144,118,1)
(548,590,1)
(496,204,1)
(63,237,1)
(125,585,1)
(332,145,1)
(539,309,1)
(36,242,1)
(645,267,1)
(303,218,1)
(363,264,1)
(489,305,1)
(351,451,1)
(258,552,1)
(492,82,1)
(605,635,1)
(82,395,1)
(200,127,1)
(106,185,1)
(443,610,1)
(656,135,1)
(283,61,1)
(392,12,1)
(285,77,1)
(560,51,1)
(116,449,1)
(320,545,1)
(554,441,1)
(616,459,1)
(421,43,1)
(414,533,1)
(145,346,1)
(344,126,1)
(440,363,1)
(17,456,1)
(88,272,1)
(169,186,1)
(424,559,1)
(645,373,1)
(416,297,1)
(26,572,1)
(155,54,1)
(127,136,1)
(617,561,1)
(561,298,1)
(208,262,1)
(632,409,1)
(656,213,1)
(76,540,1)
(181,550,1)
(110,516,1)
(401,413,1)
(644,367,1)
(537,334,1)
(39,10,1)
(400,348,1)
(421,661,1)
(608,416,1)
(327,416,1)
(176,610,1)
(299,504,1)
(650,7,1)
(17,85,1)
(453,40,1)
(173,542,1)
(265,521,1)
(471,563,1)
(40,87,1)
(287,457,1)
(207,344,1)
(490,451,1)
(278,83,1)
(35,642,1)
(58,60,1)
(628,358,1)
(428,399,1)
(76,102,1)
(444,416,1)
(645,529,1)
(85,283,1)
(434,163,1)
(310,560,1)
(102,624,1)
(348,566,1)
(526,379,1)
(572,112,1)
(29,433,1)
(14,87,1)
(115,59,1)
(386,146,1)
(525,165,1)
(563,158,1)
(662,176,1)
(617,127,1)
(601,320,1)
(506,635,1)
(300,170,1)
(188,156,1)
(569,427,1)
(577,301,1)
(444,247,1)
(39,71,1)
(84,170,1)
(524,472,1)
(126,305,1)
(410,378,1)
(378,210,1)
(118,152,1)
(85,610,1)
(128,461,1)
(200,634,1)
(167,48,1)
(25,573,1)
(535,11,1)
(286,442,1)
(298,287,1)
(63,391,1)
(201,125,1)
(660,420,1)
(430,622,1)
(134,622,1)
(631,14,1)
(165,610,1)
(642,434,1)
(262,87,1)
(143,100,1)
(13,640,1)
(582,207,1)
(401,639,1)
(556,10,1)
(22,495,1)
(412,64,1)
(164,556,1)
(645,478,1)
(430,134,1)
(335,468,1)
(147,626,1)
(588,601,1)
(518,360,1)
(542,99,1)
(645,593,1)
(8,194,1)
(559,64,1)
(453,64,1)
(564,87,1)
(200,10,1)
(573,544,1)
(312,343,1)
(604,284,1)
(395,467,1)
(177,315,1)
(617,189,1)
(637,255,1)
(447,93,1)
(490,50,1)
(24,79,2)
(626,506,2)
(15,362,2)
(39,10,2)
(176,610,2)
(39,362,2)
(437,169,2)
(232,336,2)
(91,46,2)
(646,626,2)
(145,184,2)
(398,68,2)
(662,46,2)
(506,249,2)
(18,596,2)
(543,354,2)
(104,336,2)
(652,293,2)
(36,79,2)
(481,336,2)
(397,13,2)
(338,294,2)
(154,533,2)
(135,417,2)
(97,354,2)
(505,635,2)
(187,261,2)
(378,483,2)
(299,541,2)
(254,507,2)
(70,13,2)
(312,451,2)
(93,276,2)
(628,278,2)
(225,293,2)
(345,456,2)
(523,584,2)
(187,106,2)
(556,294,2)
(262,451,2)
(121,456,2)
(293,278,2)
(496,380,2)
(312,87,2)
(97,533,2)
(184,68,2)
(519,397,2)
(63,293,2)
(543,533,2)
(629,639,2)
(528,507,2)
(145,478,2)
(539,336,2)
(129,541,2)
(543,424,2)
(421,43,2)
(475,79,2)
(40,417,2)
(270,336,2)
(297,586,2)
(14,507,2)
(634,509,2)
(125,342,2)
(336,574,2)
(374,169,2)
(132,426,2)
(597,362,2)
(293,541,2)
(588,601,2)
(351,417,2)
(651,416,2)
(238,418,2)
(85,634,2)
(447,28,2)
(470,79,2)
(125,278,2)
(293,294,2)
(363,354,2)
(297,639,2)
(247,543,2)
(564,528,2)
(313,541,2)
(651,314,2)
(285,483,2)
(468,354,2)
(533,416,2)
(186,483,2)
(217,336,2)
(342,512,2)
(11,380,2)
(101,543,2)
(647,186,2)
(468,170,2)
(505,626,2)
(39,76,2)
(504,541,2)
(409,46,2)
(430,7,2)
(564,87,2)
(645,640,2)
(161,362,2)
(285,278,2)
(125,314,2)
(232,498,2)
(249,397,2)
(160,294,2)
(541,512,2)
(394,294,2)
(187,615,2)
(453,314,2)
(207,141,2)
(93,28,2)
(13,148,2)
(482,588,2)
(56,426,2)
(456,541,2)
(517,348,2)
(246,363,2)
(548,417,2)
(63,13,2)
(91,79,2)
(645,293,2)
(165,610,2)
(125,294,2)
(546,639,2)
(354,635,2)
(209,639,2)
(564,127,2)
(482,348,2)
(339,362,2)
(270,66,2)
(362,380,2)
(560,51,2)
(181,363,2)
(239,294,2)
(10,276,2)
(370,79,2)
(293,543,2)
(527,458,2)
(228,336,2)
(235,327,2)
(506,635,2)
(312,270,2)
(529,314,2)
(148,177,2)
(27,169,2)
(300,170,2)
(261,571,2)
(639,571,2)
(63,626,2)
(473,421,2)
(386,7,2)
(580,342,2)
(233,79,2)
(147,626,2)
(135,416,2)
(152,261,2)
(608,416,2)
(142,417,2)
(645,373,2)
(425,635,2)
(315,359,2)
(354,79,2)
(49,169,2)
(395,626,2)
(650,7,2)
(570,148,2)
(179,379,2)
(3,651,2)
(631,507,2)
(53,197,2)
(418,486,2)
(27,537,2)
(557,489,2)
(372,533,2)
(410,483,2)
(46,68,2)
(373,626,2)
(468,424,2)
(422,528,2)
(170,342,2)
(222,645,2)
(482,106,2)
(245,186,2)
(463,483,2)
(54,68,2)
(293,342,2)
(490,50,2)
(77,483,2)
(314,417,2)
(257,46,2)
(187,189,2)
(163,626,2)
(11,620,2)
(579,456,2)
(369,336,2)
(149,7,2)
(347,200,2)
(556,276,2)
(358,278,2)
(617,189,2)
(443,169,2)
(161,507,2)
(85,186,2)
(203,581,2)
(660,541,2)
(424,543,2)
(597,68,2)
(546,154,2)
(79,165,2)
(501,626,2)
(639,261,2)
(322,416,2)
(97,294,2)
(443,474,2)
(66,64,2)
(118,639,2)
(195,13,2)
(492,626,2)
(655,148,2)
(655,380,2)
(83,132,2)
(400,348,2)
(541,426,2)
(189,148,2)
(109,7,2)
(617,106,2)
(462,278,2)
(278,410,2)
(545,348,2)
(165,46,2)
(294,28,2)
(36,416,2)
(130,612,2)
(132,541,2)
(35,626,2)
(370,278,2)
(28,577,2)
(620,510,2)
(43,557,2)
(161,293,2)
(145,100,2)
(592,426,2)
(655,79,2)
(351,314,2)
(200,127,2)
(14,529,2)
(359,416,2)
(144,639,2)
(288,13,2)
(443,167,2)
(623,342,2)
(480,28,2)
(227,7,2)
(520,13,2)
(639,293,2)
(10,589,2)
(40,451,2)
(335,294,2)
(450,416,2)
(221,456,2)
(240,314,2)
(444,543,2)
(655,342,2)
(541,490,2)
(491,507,2)
(249,127,2)
(542,533,2)
(449,528,2)
(577,7,2)
(115,7,2)
(645,478,2)
(653,342,2)
(408,79,2)
(200,535,2)
(530,541,2)
(535,584,2)
(291,426,2)
(392,336,2)
(343,336,2)
(196,79,2)
(99,639,2)
(179,362,2)
(99,629,2)
(617,634,2)
(477,345,2)
(645,267,2)
(467,626,2)
(518,417,2)
(405,348,2)
(412,64,2)
(157,169,2)
(622,7,2)
(547,28,2)
(201,380,2)
(271,362,2)
(578,348,2)
(538,79,2)
(160,416,2)
(514,397,2)
(14,571,2)
(464,68,2)
(342,348,2)
(603,278,2)
(425,363,2)
(474,387,2)
(40,127,2)
(208,426,2)
(622,379,2)
(472,362,2)
(335,345,2)
(275,342,2)
(432,543,2)
(470,46,2)
(279,363,2)
(573,535,2)
(308,13,2)
(645,68,2)
(596,483,2)
(497,47,2)
(184,266,2)
(232,13,2)
(309,336,2)
(201,79,2)
(148,363,2)
(562,584,2)
(498,507,2)
(261,261,2)
(258,626,2)
(335,170,2)
(269,417,2)
(564,634,2)
(538,380,2)
(585,380,2)
(528,499,2)
(299,426,2)
(451,3,2)
(660,416,2)
(81,46,2)
(549,293,2)
(165,632,2)
(370,294,2)
(610,278,2)
(312,336,2)
(499,497,2)
(232,362,2)
(655,294,2)
(490,451,2)
(100,121,2)
(269,516,2)
(39,276,2)
(346,68,2)
(489,476,2)
(194,584,2)
(617,363,2)
(53,149,2)
(262,541,2)
(178,336,2)
(186,18,2)
(561,363,2)
(191,68,2)
(7,362,2)
(357,354,2)
(53,286,2)
(495,68,2)
(74,528,2)
(127,634,2)
(46,495,2)
(618,68,2)
(335,533,2)
(161,68,2)
(106,185,2)
(484,639,2)
(267,524,2)
(203,533,2)
(85,127,2)
(645,197,2)
(153,7,2)
(576,345,2)
(607,535,2)
(223,348,2)
(315,363,2)
(175,541,2)
(329,362,2)
(127,458,2)
(98,278,2)
(102,379,2)
(380,584,2)
(345,541,2)
(410,378,2)
(102,362,2)
(128,362,2)
(543,170,2)
(25,535,2)
(61,186,2)
(212,626,2)
(97,345,2)
(632,322,2)
(231,294,2)
(39,103,2)
(45,362,2)
(293,79,2)
(151,342,2)
(280,13,2)
(93,480,2)
(36,46,2)
(559,543,2)
(546,533,2)
(125,79,2)
(202,362,2)
(83,541,2)
(608,28,2)
(657,483,2)
(92,639,2)
(161,626,2)
(646,642,2)
(569,362,2)
(645,7,2)
(182,450,2)
(125,380,2)
(47,64,2)
(274,507,2)
(391,169,2)
(399,336,2)
(645,507,2)
(474,169,2)
(556,10,2)
(4,336,2)
(379,130,2)
(173,639,2)
(103,362,2)
(173,533,2)
(433,362,2)
(94,336,2)
(624,362,2)
(164,354,2)
(640,148,2)
(83,426,2)
(362,535,2)
(502,342,2)
(51,505,2)
(130,342,2)
(201,543,2)
(600,68,2)
(121,68,2)
(529,417,2)
(347,535,2)
(488,367,2)
(604,416,2)
(370,342,2)
(110,488,2)
(242,46,2)
(593,336,2)
(169,186,2)
(139,336,2)
(314,87,2)
(293,591,2)
(424,64,2)
(588,348,2)
(498,336,2)
(266,68,2)
(443,83,2)
(218,170,2)
(98,628,2)
(560,626,2)
(645,362,2)
(493,363,2)
(161,7,2)
(278,483,2)
(152,639,2)
(653,106,2)
(452,294,2)
(297,118,2)
(428,336,2)
(268,397,2)
(187,571,2)
(175,426,2)
(125,543,2)
(442,7,2)
(550,148,2)
(656,417,2)
(662,79,2)
(262,313,2)
(418,362,2)
(53,430,2)
(158,635,2)
(426,369,2)
(412,336,2)
(287,363,2)
(589,380,2)
(589,604,2)
(177,315,2)
(72,417,2)
(130,348,2)
(510,380,2)
(105,639,2)
(629,533,2)
(131,348,2)
(562,380,2)
(584,170,2)
(185,46,2)
(180,68,2)
(249,634,2)
(639,557,2)
(161,169,2)
(370,541,2)
(293,148,2)
(486,362,2)
(321,46,2)
(635,36,2)
(397,195,2)
(164,170,2)
(237,13,2)
(445,229,2)
(370,314,2)
(448,342,2)
(610,98,2)
(264,354,2)
(379,342,2)
(47,507,2)
(595,314,2)
(452,160,2)
(498,13,2)
(363,264,2)
(99,612,2)
(79,46,2)
(524,362,2)
(142,314,2)
(343,412,2)
(200,276,2)
(434,626,2)
(645,445,2)
(136,458,2)
(164,424,2)
(635,46,2)
(234,68,2)
(388,342,2)
(5,512,2)
(169,278,2)
(232,612,2)
(645,336,2)
(492,646,2)
(108,28,2)
(66,336,2)
(214,543,2)
(627,13,2)
(140,533,2)
(95,169,2)
(312,178,2)
(17,85,2)
(355,336,2)
(513,13,2)
(373,212,2)
(14,87,2)
(269,656,2)
(640,425,2)
(334,169,2)
(497,507,2)
(40,314,2)
(443,49,2)
(99,533,2)
(36,612,2)
(538,543,2)
(498,169,2)
(204,380,2)
(76,362,2)
(58,336,2)
(453,417,2)
(655,278,2)
(388,348,2)
(498,362,2)
(176,83,2)
(284,380,2)
(150,426,2)
(14,451,2)
(336,528,2)
(103,427,2)
(298,148,2)
(660,612,2)
(158,626,2)
(260,68,2)
(653,189,2)
(538,314,2)
(574,528,2)
(187,640,2)
(441,7,2)
(90,541,2)
(371,68,2)
(427,362,2)
(325,584,2)
(628,416,2)
(466,426,2)
(399,64,2)
(250,278,2)
(448,416,2)
(263,363,2)
(261,293,2)
(407,397,2)
(156,13,2)
(492,189,2)
(85,83,2)
(457,148,2)
(37,169,2)
(78,380,2)
(97,170,2)
(131,342,2)
(640,363,2)
(451,87,2)
(221,169,2)
(362,347,2)
(75,314,2)
(619,639,2)
(626,13,2)
(443,610,2)
(367,416,2)
(265,626,2)
(44,354,2)
(375,336,2)
(110,516,2)
(232,293,2)
(63,169,2)
(620,380,2)
(182,533,2)
(143,68,2)
(257,79,2)
(580,348,2)
(521,626,2)
(169,483,2)
(3,314,2)
(64,444,2)
(201,541,2)
(11,584,2)
(635,79,2)
(111,148,2)
(87,543,2)
(90,416,2)
(604,380,2)
(232,626,2)
(498,68,2)
(405,342,2)
(597,13,2)
(482,189,2)
(335,354,2)
(436,541,2)
(189,106,2)
(642,626,2)
(526,379,2)
(362,584,2)
(243,68,2)
(533,639,2)
(518,314,2)
(601,348,2)
(492,106,2)
(538,278,2)
(178,428,2)
(304,362,2)
(181,148,2)
(563,626,2)
(574,64,2)
(64,543,2)
(390,342,2)
(401,639,2)
(427,379,2)
(456,426,2)
(79,512,2)
(594,639,2)
(63,7,2)
(49,374,2)
(235,148,2)
(82,626,2)
(276,223,2)
(249,189,2)
(426,336,2)
(22,68,2)
(176,79,2)
(370,148,2)
(201,294,2)
(480,608,2)
(177,516,2)
(471,626,2)
(336,507,2)
(478,169,2)
(575,417,2)
(55,342,2)
(161,13,2)
(125,541,2)
(63,507,2)
(249,106,2)
(167,169,2)
(322,46,2)
(645,27,2)
(223,342,2)
(137,426,2)
(210,483,2)
(644,584,2)
(364,7,2)
(118,152,2)
(465,528,2)
(587,345,2)
(255,543,2)
(609,169,2)
(84,170,2)
(597,626,2)
(293,380,2)
(645,169,2)
(150,541,2)
(538,148,2)
(10,380,2)
(566,626,2)
(620,584,2)
(617,127,2)
(209,533,2)
(476,207,2)
(69,79,2)
(189,235,2)
(404,448,2)
(51,626,2)
(382,507,2)
(380,276,2)
(486,379,2)
(56,416,2)
(238,362,2)
(327,416,2)
(378,210,2)
(31,314,2)
(266,456,2)
(638,336,2)
(294,512,2)
(530,426,2)
(65,483,2)
(526,7,2)
(542,639,2)
(360,314,2)
(33,639,2)
(130,416,2)
(159,13,2)
(208,541,2)
(555,169,2)
(89,507,2)
(492,560,2)
(185,79,2)
(653,404,2)
(456,660,2)
(162,336,2)
(17,456,2)
(30,533,2)
(165,83,2)
(197,179,2)
(18,483,2)
(241,170,2)
(431,362,2)
(529,453,2)
(240,417,2)
(508,336,2)
(455,507,2)
(404,342,2)
(28,7,2)
(506,397,2)
(511,541,2)
(489,305,2)
(475,311,2)
(201,342,2)
(537,169,2)
(63,362,2)
(294,93,2)
(579,278,2)
(417,424,2)
(106,79,2)
(23,293,2)
(593,139,2)
(425,148,2)
(522,278,2)
(50,426,2)
(535,380,2)
(370,543,2)
(342,482,2)
(385,293,2)
(63,336,2)
(416,639,2)
(617,148,2)
(40,87,2)
(87,432,2)
(611,79,2)
(1,584,2)
(48,169,2)
(610,83,2)
(68,169,2)
(654,348,2)
(100,68,2)
(39,238,2)
(311,79,2)
(333,342,2)
(155,68,2)
(535,11,2)
(367,584,2)
(444,612,2)
(29,362,2)
(187,13,2)
(359,363,2)
(597,336,2)
(483,317,2)
(309,64,2)
(654,342,2)
(8,584,2)
(645,13,2)
(232,68,2)
(161,336,2)
(374,456,2)
(290,626,2)
(337,543,2)
(335,28,2)
(39,71,2)
(406,533,2)
(298,363,2)
(292,336,2)
(332,68,2)
(645,529,2)
(590,417,2)
(32,336,2)
(219,169,2)
(262,87,2)
(14,261,2)
(286,7,2)
(107,424,2)
(645,626,2)
(425,617,2)
(390,348,2)
(313,90,2)
(1,380,2)
(601,416,2)
(201,314,2)
(272,354,2)
(190,507,2)
(467,635,2)
(324,314,2)
(244,79,2)
(503,46,2)
(347,379,2)
(379,348,2)
(616,169,2)
(387,169,2)
(507,417,2)
(328,314,2)
(414,533,2)
(14,455,2)
(164,28,2)
(18,278,2)
(77,278,2)
(490,87,2)
(232,169,2)
(293,261,2)
(597,7,2)
(597,507,2)
(113,79,2)
(597,293,2)
(380,110,2)
(642,635,2)
(145,346,2)
(507,314,2)
(525,46,2)
(314,269,2)
(444,416,2)
(232,7,2)
(57,293,2)
(60,336,2)
(146,7,2)
(59,7,2)
(200,634,2)
(626,397,2)
(173,586,2)
(40,634,2)
(122,639,2)
(186,278,2)
(76,102,2)
(116,528,2)
(457,363,2)
(458,612,2)
(106,46,2)
(611,46,2)
(583,342,2)
(445,293,2)
(599,28,2)
(120,535,2)
(345,426,2)
(50,56,2)
(242,79,2)
(38,424,2)
(596,278,2)
(170,379,2)
(498,7,2)
(510,584,2)
(206,483,2)
(289,541,2)
(567,639,2)
(361,293,2)
(125,148,2)
(453,40,2)
(85,610,2)
(540,362,2)
(199,626,2)
(420,426,2)
(326,169,2)
(283,186,2)
(384,543,2)
(356,541,2)
(411,13,2)
(453,64,2)
(561,148,2)
(176,475,2)
(370,380,2)
(419,424,2)
(316,483,2)
(301,7,2)
(159,605,2)
(213,417,2)
(276,348,2)
(387,456,2)
(149,526,2)
(69,46,2)
(544,535,2)
(499,507,2)
(451,314,2)
(2,169,2)
(492,501,2)
(17,186,2)
(12,336,2)
(656,135,2)
(324,417,2)
(42,336,2)
(659,186,2)
(320,348,2)
(335,424,2)
(645,593,2)
(605,635,2)
(498,626,2)
(430,622,2)
(188,13,2)
(97,424,2)
(164,294,2)
(215,294,2)
(275,348,2)
(410,516,2)
(317,345,2)
(428,399,2)
(348,626,2)
(183,148,2)
(401,533,2)
(19,362,2)
(483,345,2)
(267,362,2)
(597,169,2)
(487,148,2)
(543,294,2)
(287,148,2)
(307,507,2)
(224,169,2)
(312,162,2)
(596,579,2)
(97,28,2)
(502,348,2)
(13,363,2)
(195,159,2)
(41,426,2)
(630,345,2)
(492,82,2)
(468,345,2)
(416,297,2)
(201,148,2)
(552,626,2)
(5,516,2)
(200,10,2)
(71,362,2)
(381,626,2)
(33,533,2)
(293,314,2)
(532,169,2)
(145,68,2)
(164,345,2)
(490,426,2)
(296,507,2)
(478,221,2)
(556,452,2)
(613,507,2)
(198,426,2)
(278,83,2)
(510,379,2)
(538,342,2)
(210,416,2)
(637,543,2)
(93,10,2)
(230,626,2)
(330,314,2)
(536,7,2)
(119,626,2)
(220,639,2)
(256,507,2)
(543,345,2)
(293,571,2)
(466,541,2)
(222,546,2)
(605,13,2)
(655,314,2)
(440,363,2)
(53,7,2)
(498,293,2)
(469,626,2)
(459,169,2)
(348,566,2)
(152,571,2)
(360,417,2)
(584,303,2)
(655,541,2)
(251,626,2)
(581,533,2)
(141,5,2)
(310,626,2)
(538,541,2)
(354,46,2)
(82,467,2)
(312,343,2)
(110,584,2)
(229,293,2)
(203,182,2)
(420,541,2)
(550,363,2)
(169,17,2)
(504,426,2)
(134,7,2)
(554,7,2)
(413,533,2)
(417,419,2)
(63,68,2)
(429,336,2)
(148,106,2)
(488,584,2)
(365,148,2)
(201,278,2)
(276,342,2)
(327,148,2)
(660,426,2)
(632,46,2)
(236,397,2)
(655,543,2)
(538,294,2)
(579,483,2)
(192,424,2)
(24,46,2)
(485,28,2)
(177,363,2)
(461,362,2)
(303,170,2)
(396,626,2)
(468,28,2)
(232,507,2)
(450,533,2)
(88,354,2)
(282,362,2)
(564,451,2)
(543,28,2)
(574,564,2)
(170,348,2)
(311,416,2)
(468,294,2)
(615,13,2)
(197,362,2)
(73,336,2)
(166,424,2)
-----------------------------------
(0,max_pages)
(1,vma)
(2,p)
(3,obj->base.size)
(4,node)
(5,hole_end - hole_start)
(6,full_size)
(7,err)
(8,hole_start)
(9,if (p->step < 0)
(10,offset -= obj->base.size)
(11,drm_mm_node_allocated(&vma->node)
(12,p)
(13,err)
(14,pr_err("%s(%s)
(15,node)
(16,1)
(17,i915_vma_misplaced(vma, 0, 0, offset | flags)
(18,drm_mm_node_allocated(&vma->node)
(19,vma)
(20,if (IS_ERR(vma)
(21,for (npages = 1; npages <= max_pages; npages *= prime)
(22,0)
(23,err)
(24,obj)
(25,offset)
(26,PIN_USER)
(27,err = -EINVAL)
(28,p->step > 0)
(29,name)
(30,objects)
(31,break;)
(32,0)
(33,vm)
(34,)
(35,size)
(36,i915_vma_instance(obj, vm, NULL)
(37,node)
(38,continue;)
(39,pr_err("%s(%s)
(40,offset | flags)
(41,base)
(42,step)
(43,int_sqrt(max_pages)
(44,continue;)
(45,err)
(46,p->step > 0)
(47,vma->node)
(48,name)
(49,vma->node.start)
(50,obj->base.size)
(51,&vma->node)
(52,hole_size)
(53,pr_err("%s(%s)
(54,__func__)
(55,break;)
(56,obj->base)
(57,npages)
(58,node)
(59,vma)
(60,vma)
(61,offset)
(62,if (err)
(63,objects)
(64,vma = i915_vma_instance(obj, vm, NULL)
(65,hole_start)
(66,vma->node)
(67,for (p = phases; p->name; p++)
(68,err)
(69,offset)
(70,offset)
(71,p->name)
(72,offset)
(73,__func__)
(74,flags)
(75,size)
(76,vma->node.start)
(77,vma)
(78,size)
(79,offset + obj->base.size > hole_end)
(80,)
(81,base)
(82,vma->node.start)
(83,offset = p->offset)
(84,continue;)
(85,offset | flags)
(86,)
(87,offset = p->offset)
(88,step)
(89,prime)
(90,obj->base)
(91,p)
(92,obj)
(93,offset + obj->base.size)
(94,goto err;)
(95,err)
(96,if (!drm_mm_node_allocated(&vma->node)
(97,name)
(98,obj->base.size)
(99,close_object_list(&objects, vm)
(100,vma->node.size)
(101,vma)
(102,vma->node)
(103,vma->node.size)
(104,vma)
(105,npages)
(106,offset = p->offset)
(107,p)
(108,base)
(109,goto err;)
(110,hole_start + obj->base.size)
(111,obj)
(112,flags)
(113,size)
(114,)
(115,node)
(116,offset)
(117,)
(118,full_size = npages << PAGE_SHIFT)
(119,node)
(120,flags)
(121,vma->node)
(122,obj)
(123,)
(124,)
(125,end_time)
(126,hole_size)
(127,flags |= PIN_GLOBAL)
(128,node)
(129,size)
(130,i915_vma_instance(obj, vm, NULL)
(131,NULL)
(132,p->offset)
(133,if (p->step > 0)
(134,start)
(135,obj->base)
(136,PIN_GLOBAL)
(137,size)
(138,obj)
(139,-EINVAL)
(140,st_link)
(141,hole_size = hole_end - hole_start)
(142,offset)
(143,err)
(144,p)
(145,pr_err("%s(%s)
(146,__func__)
(147,"%s(%s)
(148,offset < hole_start + obj->base.size)
(149,vma->node.size)
(150,vm)
(151,offset)
(152,npages << PAGE_SHIFT)
(153,0)
(154,p = phases)
(155,p)
(156,vma)
(157,offset)
(158,i915_vma_unpin(vma)
(159,&vma->node)
(160,obj->base)
(161,vm)
(162,p->name)
(163,vma)
(164,p)
(165,offset + obj->base.size)
(166,0)
(167,p->name)
(168,)
(169,!drm_mm_node_allocated(&vma->node)
(170,IS_ERR(vma)
(171,max_pages)
(172,)
(173,cleanup_freed_objects(i915)
(174,LIST_HEAD(objects)
(175,vma)
(176,offset += obj->base.size)
(177,hole_start + obj->base.size)
(178,drm_mm_node_allocated(&vma->node)
(179,i915_vma_unbind(vma)
(180,vma)
(181,vma)
(182,&obj->st_link)
(183,size)
(184,vma->node.start)
(185,p->offset)
(186,!drm_mm_node_allocated(&vma->node)
(187,pr_err("%s(%s)
(188,node)
(189,offset -= obj->base.size)
(190,name)
(191,node)
(192,step)
(193,if (p->step < 0)
(194,offset)
(195,drm_mm_node_allocated(&vma->node)
(196,base)
(197,err = i915_vma_unbind(vma)
(198,hole_end)
(199,vma)
(200,offset | flags)
(201,"%s timed out (npages=%lu, prime=%lu)
(202,goto err;)
(203,list_add(&obj->st_link, &objects)
(204,offset)
(205,if (p->step > 0)
(206,size)
(207,hole_size/2)
(208,offset)
(209,0)
(210,obj->base)
(211,if (offset < hole_start + obj->base.size)
(212,-EINVAL)
(213,size)
(214,p)
(215,size)
(216,hole_size)
(217,start)
(218,step)
(219,start)
(220,i915)
(221,i915_vma_unbind(vma)
(222,RET)
(223,p->offset)
(224,node)
(225,npages)
(226,)
(227,size)
(228,size)
(229,-EINTR)
(230,goto err;)
(231,base)
(232,close_object_list(&objects, vm)
(233,obj)
(234,start)
(235,obj->base.size)
(236,flags)
(237,goto err;)
(238,drm_mm_node_allocated(&vma->node)
(239,offset)
(240,flags)
(241,0)
(242,NULL)
(243,vma)
(244,offset)
(245,0)
(246,hole_start)
(247,NULL)
(248,if (err)
(249,offset | flags)
(250,break;)
(251,vma)
(252,)
(253,)
(254,"%s(%s)
(255,obj)
(256,vma)
(257,vm)
(258,name)
(259,)
(260,size)
(261,npages *= prime)
(262,offset += obj->base.size)
(263,obj)
(264,p->step)
(265,EINVAL)
(266,vma->node)
(267,err = -EINVAL)
(268,vma)
(269,hole_start + obj->base.size)
(270,vma->node.start)
(271,err)
(272,p)
(273,if (igt_timeout(end_time, "%s timed out (npages=%lu, prime=%lu)
(274,node)
(275,obj)
(276,offset = p->offset)
(277,if (offset < hole_start + obj->base.size)
(278,offset < hole_start + obj->base.size)
(279,base)
(280,prime)
(281,if (offset + obj->base.size > hole_end)
(282,offset)
(283,flags)
(284,base)
(285,node)
(286,p->name)
(287,0)
(288,name)
(289,base)
(290,__func__)
(291,obj)
(292,node)
(293,igt_timeout(end_time, "%s timed out (npages=%lu, prime=%lu)
(294,offset + obj->base.size > hole_end)
(295,)
(296,npages)
(297,fake_dma_object(i915, full_size)
(298,offset)
(299,obj)
(300,p)
(301,step)
(302,if (p->step > 0)
(303,p->step)
(304,vma)
(305,ULONG_MAX - 1)
(306,if (!drm_mm_node_allocated(&vma->node)
(307,p)
(308,__func__)
(309,i915_vma_unpin(vma)
(310,offset)
(311,obj->base)
(312,pr_err("%s(%s)
(313,obj->base.size)
(314,offset < hole_start + obj->base.size)
(315,obj->base.size)
(316,offset)
(317,p->step)
(318,)
(319,)
(320,base)
(321,offset)
(322,obj->base)
(323,)
(324,0)
(325,obj)
(326,size)
(327,obj->base)
(328,base)
(329,__func__)
(330,offset)
(331,)
(332,goto err;)
(333,base)
(334,EINVAL)
(335,p)
(336,!drm_mm_node_allocated(&vma->node)
(337,offset)
(338,obj)
(339,"%s(%s)
(340,err)
(341,if (offset + obj->base.size > hole_end)
(342,offset + obj->base.size > hole_end)
(343,vma->node.size)
(344,2)
(345,IS_ERR(vma)
(346,p->name)
(347,i915_vma_misplaced(vma, 0, 0, offset | flags)
(348,p->step > 0)
(349,if (!drm_mm_node_allocated(&vma->node)
(350,)
(351,err)
(352,if (IS_ERR(vma)
(353,if (err)
(354,IS_ERR(vma)
(355,"%s(%s)
(356,break;)
(357,0)
(358,base)
(359,obj->base)
(360,vma)
(361,goto err;)
(362,!drm_mm_node_allocated(&vma->node)
(363,p->step < 0)
(364,p)
(365,offset)
(366,max_step)
(367,obj->base)
(368,if (i915_is_ggtt(vm)
(369,p->step)
(370,npages)
(371,p)
(372,p)
(373,err = -EINVAL)
(374,vma->node)
(375,err)
(376,if (err)
(377,)
(378,obj->base.size)
(379,vma = i915_vma_instance(obj, vm, NULL)
(380,offset < hole_start + obj->base.size)
(381,0)
(382,__func__)
(383,max_step)
(384,offset)
(385,max_pages)
(386,p)
(387,vma->node)
(388,offset)
(389,1)
(390,p)
(391,goto err;)
(392,name)
(393,if (offset + obj->base.size > hole_end)
(394,break;)
(395,start)
(396,node)
(397,!drm_mm_node_allocated(&vma->node)
(398,step)
(399,vma->node)
(400,offset)
(401,objects)
(402,)
(403,hole_start)
(404,obj->base.size)
(405,vma)
(406,phases)
(407,offset)
(408,break;)
(409,size)
(410,hole_start + obj->base.size)
(411,p)
(412,vma->node)
(413,break;)
(414,obj)
(415,ULONG_MAX)
(416,obj = fake_dma_object(i915, full_size)
(417,p->step < 0)
(418,&vma->node)
(419,p->step)
(420,NULL)
(421,max(int_sqrt(max_pages)
(422,vma)
(423,offset)
(424,IS_ERR(vma)
(425,i915_vma_pin(vma, 0, 0, offset | flags)
(426,p->step > 0)
(427,vma->node)
(428,&vma->node)
(429,EINVAL)
(430,vma->node.start)
(431,vma)
(432,p->offset)
(433,p)
(434,node)
(435,)
(436,obj)
(437,vma)
(438,if (IS_ERR(obj)
(439,if (offset < hole_start + obj->base.size)
(440,offset)
(441,vma)
(442,name)
(443,pr_err("%s(%s)
(444,i915_vma_instance(obj, vm, NULL)
(445,err = -EINTR)
(446,)
(447,hole_end)
(448,obj->base)
(449,0)
(450,obj->st_link)
(451,offset -= obj->base.size)
(452,obj->base.size)
(453,i915_vma_pin(vma, 0, 0, offset | flags)
(454,if (IS_ERR(vma)
(455,p->name)
(456,vma = i915_vma_instance(obj, vm, NULL)
(457,0)
(458,i915_is_ggtt(vm)
(459,"%s(%s)
(460,max_pages)
(461,vma)
(462,offset)
(463,obj)
(464,name)
(465,0)
(466,offset)
(467,vma->node)
(468,p++)
(469,vma)
(470,vma)
(471,step)
(472,EINVAL)
(473,max_step = max(int_sqrt(max_pages)
(474,vma->node.size)
(475,obj->base.size)
(476,hole_size/2 >> PAGE_SHIFT)
(477,p)
(478,err = i915_vma_unbind(vma)
(479,if (p->step < 0)
(480,obj->base.size)
(481,offset)
(482,offset + obj->base.size)
(483,p->step < 0)
(484,*p)
(485,size)
(486,vma->node)
(487,base)
(488,obj->base.size)
(489,min_t(u64, ULONG_MAX - 1, hole_size/2 >> PAGE_SHIFT)
(490,offset + obj->base.size)
(491,err)
(492,pr_err("%s(%s)
(493,size)
(494,if (p->step < 0)
(495,p->step)
(496,obj)
(497,&vma->node)
(498,&objects)
(499,drm_mm_node_allocated(&vma->node)
(500,npages)
(501,p->name)
(502,offset)
(503,obj)
(504,vma)
(505,vma->node)
(506,i915_vma_misplaced(vma, 0, 0, offset | flags)
(507,err)
(508,vma)
(509,PIN_OFFSET_FIXED | PIN_USER)
(510,vma->node)
(511,offset)
(512,u64 hole_end)
(513,"%s(%s)
(514,0)
(515,prime)
(516,u64 hole_start)
(517,size)
(518,0)
(519,0)
(520,npages)
(521,err)
(522,size)
(523,base)
(524,-EINVAL)
(525,hole_end)
(526,vma->node)
(527,flags)
(528,!drm_mm_node_allocated(&vma->node)
(529,err = i915_vma_pin(vma, 0, 0, offset | flags)
(530,p)
(531,objects)
(532,vma)
(533,IS_ERR(obj)
(534,if (IS_ERR(vma)
(535,!drm_mm_node_allocated(&vma->node)
(536,err)
(537,-EINVAL)
(538,__func__)
(539,p)
(540,start)
(541,offset + obj->base.size > hole_end)
(542,i915)
(543,p->name)
(544,0)
(545,obj)
(546,return 0;)
(547,obj)
(548,obj)
(549,EINTR)
(550,err)
(551,vm)
(552,p)
(553,if (offset + obj->base.size > hole_end)
(554,node)
(555,err)
(556,offset += obj->base.size)
(557,max_pages =\n\\n\\t\\tmin_t(u64, ULONG_MAX - 1, hole_size/2 >> PAGE_SHIFT)
(558,)
(559,vma)
(560,drm_mm_node_allocated(&vma->node)
(561,flags)
(562,node)
(563,p)
(564,offset | flags)
(565,if (!drm_mm_node_allocated(&vma->node)
(566,p->step)
(567,full_size)
(568,hole_end)
(569,size)
(570,break;)
(571,npages = 1)
(572,PIN_OFFSET_FIXED)
(573,0)
(574,i915_vma_misplaced(vma, 0, 0, offset | flags)
(575,base)
(576,0)
(577,p->step)
(578,hole_end)
(579,vma->node)
(580,vma)
(581,&objects)
(582,PAGE_SHIFT)
(583,obj)
(584,p->step < 0)
(585,break;)
(586,struct drm_i915_private *i915)
(587,continue;)
(588,obj->base.size)
(589,obj->base.size)
(590,hole_start)
(591,unsigned long end_time)
(592,offset)
(593,err = -EINVAL)
(594,PAGE_SHIFT)
(595,obj)
(596,&vma->node)
(597,err)
(598,npages)
(599,offset)
(600,"%s(%s)
(601,obj->base)
(602,)
(603,obj)
(604,obj->base)
(605,vma->node)
(606,if (p->step > 0)
(607,vma)
(608,obj->base)
(609,vma)
(610,offset -= obj->base.size)
(611,vma)
(612,struct i915_address_space *vm)
(613,offset)
(614,)
(615,p->name)
(616,__func__)
(617,offset | flags)
(618,node)
(619,full_size)
(620,&vma->node)
(621,)
(622,vma->node)
(623,size)
(624,node)
(625,)
(626,!drm_mm_node_allocated(&vma->node)
(627,err)
(628,obj->base)
(629,&objects)
(630,step)
(631,goto err;)
(632,obj->base.size)
(633,err:)
(634,flags = PIN_OFFSET_FIXED | PIN_USER)
(635,vma = i915_vma_instance(obj, vm, NULL)
(636,)
(637,vm)
(638,vma)
(639,npages <= max_pages)
(640,err = i915_vma_pin(vma, 0, 0, offset | flags)
(641,vma)
(642,vma->node)
(643,flags)
(644,size)
(645,return err;)
(646,vma->node.size)
(647,0)
(648,)
(649,u64)
(650,"%s(%s)
(651,obj->base)
(652,prime)
(653,offset += obj->base.size)
(654,vm)
(655,prime)
(656,obj->base.size)
(657,base)
(658,if (offset < hole_start + obj->base.size)
(659,vma)
(660,i915_vma_instance(obj, vm, NULL)
(661,2UL)
(662,offset)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^