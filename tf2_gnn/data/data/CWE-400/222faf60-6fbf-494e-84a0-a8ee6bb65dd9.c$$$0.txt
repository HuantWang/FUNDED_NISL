-----label-----
0
-----code-----
static void goodB2G1()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
83,86
84,85
86,87
87,88
88,89
88,90
89,90
92,93
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,85,90,91,96,98
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(38,44,0)
(48,29,0)
(17,47,0)
(26,12,0)
(2,37,0)
(5,42,0)
(29,13,0)
(21,4,0)
(30,47,0)
(37,2,0)
(42,29,0)
(13,43,0)
(11,42,0)
(27,30,0)
(10,32,0)
(39,47,0)
(1,7,0)
(12,29,0)
(8,33,0)
(28,7,0)
(20,42,0)
(35,29,0)
(41,22,0)
(33,40,0)
(6,32,0)
(52,32,0)
(51,46,0)
(23,12,0)
(35,0,0)
(31,44,0)
(32,10,0)
(11,30,0)
(25,29,0)
(0,35,0)
(4,43,0)
(32,29,0)
(18,7,0)
(13,29,0)
(44,7,0)
(22,4,0)
(16,2,0)
(13,14,0)
(36,11,0)
(25,24,0)
(25,44,0)
(43,13,0)
(39,0,0)
(10,46,0)
(14,13,0)
(4,22,0)
(29,47,0)
(19,10,0)
(45,35,0)
(37,15,0)
(50,25,0)
(0,39,0)
(43,4,0)
(46,47,0)
(34,35,0)
(42,11,0)
(25,50,1)
(27,11,1)
(16,12,1)
(35,29,1)
(13,14,1)
(39,0,1)
(12,29,1)
(26,23,1)
(8,3,1)
(19,32,1)
(21,48,1)
(32,6,1)
(41,21,1)
(42,20,1)
(37,2,1)
(33,8,1)
(43,4,1)
(30,27,1)
(34,45,1)
(25,44,1)
(10,32,1)
(49,44,1)
(11,36,1)
(46,51,1)
(25,29,1)
(5,12,1)
(50,3,1)
(31,38,1)
(10,19,1)
(9,25,1)
(44,31,1)
(3,49,1)
(0,35,1)
(11,42,1)
(36,42,1)
(29,13,1)
(51,10,1)
(9,33,1)
(52,30,1)
(5,37,1)
(2,16,1)
(3,39,1)
(42,29,1)
(6,52,1)
(20,5,1)
(4,22,1)
(32,29,1)
(22,41,1)
(35,34,1)
(45,46,1)
(23,29,1)
(13,43,1)
(12,26,1)
(48,49,1)
(16,12,2)
(43,4,2)
(39,0,2)
(32,29,2)
(26,49,2)
(35,29,2)
(12,49,2)
(23,49,2)
(4,49,2)
(13,43,2)
(10,49,2)
(13,14,2)
(42,49,2)
(52,49,2)
(22,49,2)
(45,49,2)
(11,49,2)
(36,49,2)
(46,49,2)
(35,49,2)
(30,49,2)
(27,49,2)
(21,49,2)
(48,49,2)
(0,49,2)
(32,49,2)
(42,29,2)
(5,49,2)
(10,32,2)
(33,3,2)
(0,35,2)
(51,49,2)
(11,42,2)
(20,49,2)
(19,49,2)
(12,29,2)
(6,49,2)
(34,49,2)
(29,49,2)
(39,49,2)
(25,29,2)
(37,2,2)
(13,49,2)
(25,3,2)
(50,3,2)
(25,44,2)
(29,13,2)
(41,49,2)
(2,12,2)
(8,3,2)
(43,49,2)
(37,12,2)
(4,22,2)
-----------------------------------
(0,&data[0])
(1,if(staticTrue)
(2,-1)
(3,staticFalse)
(4,100*sizeof(twoIntsStruct)
(5,data)
(6,0)
(7,)
(8,"Benign, fixed string")
(9,RET)
(10,data[0].intTwo)
(11,data[0].intOne)
(12,data == NULL)
(13,(twoIntsStruct *)
(14,twoIntsStruct *)
(15,)
(16,1)
(17,if (data == NULL)
(18,if(staticFalse)
(19,intTwo)
(20,0)
(21,100)
(22,sizeof(twoIntsStruct)
(23,data)
(24,)
(25,free(data)
(26,NULL)
(27,0)
(28,data)
(29,data = (twoIntsStruct *)
(30,data[0].intOne = 0)
(31,NULL)
(32,data[0])
(33,printLine("Benign, fixed string")
(34,0)
(35,data[0])
(36,intOne)
(37,exit(-1)
(38,data)
(39,printStructLine(&data[0])
(40,)
(41,twoIntsStruct)
(42,data[0])
(43,malloc(100*sizeof(twoIntsStruct)
(44,data = NULL)
(45,data)
(46,data[0].intTwo = 0)
(47,)
(48,data)
(49,staticTrue)
(50,data)
(51,0)
(52,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^