-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_17_bad()
{
    int i,j;
    struct _twoIntsStruct * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
54,55
55,56
55,57
56,57
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
74,76
75,76
75,77
76,77
81,82
82,83
82,84
83,84
83,85
84,85
84,86
85,86
90,91
91,92
91,93
92,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
111,112
111,113
112,113
115,116
116,117
118,119
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,53,57,58,62,64,69,71,77,78,79,80,86,87,88,89,93,97,99,103,104,109,110,113,114,117,119
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
60,61
60,62
73,74
73,75
82,83
82,84
107,108
107,109
111,112
111,113
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_17_bad(){    int i,j;    struct _twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_17_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_17_bad
{    int i,j;    struct _twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(7,37,0)
(58,51,0)
(7,20,0)
(33,39,0)
(41,20,0)
(13,38,0)
(42,55,0)
(19,18,0)
(31,32,0)
(12,28,0)
(37,7,0)
(0,40,0)
(51,14,0)
(48,31,0)
(22,12,0)
(9,19,0)
(20,41,0)
(7,31,0)
(4,6,0)
(14,51,0)
(50,0,0)
(20,7,0)
(52,54,0)
(14,31,0)
(49,10,0)
(53,12,0)
(2,39,0)
(26,61,0)
(11,55,0)
(27,40,0)
(25,34,0)
(47,40,0)
(28,6,0)
(30,61,0)
(1,55,0)
(6,28,0)
(8,14,0)
(12,31,0)
(24,32,0)
(54,61,0)
(35,18,0)
(49,56,0)
(28,12,0)
(61,31,0)
(44,48,0)
(15,55,0)
(36,18,0)
(23,20,0)
(31,7,0)
(61,54,0)
(54,38,0)
(63,41,0)
(43,60,0)
(6,21,0)
(6,4,0)
(4,32,0)
(46,56,0)
(29,24,0)
(45,60,0)
(16,55,0)
(3,34,0)
(5,32,0)
(59,31,0)
(21,6,0)
(64,14,0)
(51,24,0)
(60,55,0)
(39,40,0)
(38,32,0)
(56,49,0)
(17,48,0)
(41,63,0)
(34,18,0)
(39,40,1)
(60,43,1)
(62,34,1)
(18,35,1)
(24,29,1)
(40,27,1)
(2,0,1)
(26,48,1)
(49,56,1)
(14,64,1)
(50,4,1)
(26,49,1)
(61,30,1)
(41,23,1)
(9,34,1)
(64,8,1)
(44,17,1)
(25,19,1)
(48,31,1)
(27,47,1)
(36,39,1)
(19,9,1)
(23,59,1)
(34,18,1)
(61,31,1)
(20,41,1)
(53,24,1)
(29,51,1)
(0,50,1)
(0,40,1)
(28,12,1)
(33,2,1)
(17,31,1)
(22,53,1)
(25,18,1)
(46,48,1)
(31,7,1)
(48,44,1)
(41,63,1)
(54,61,1)
(52,61,1)
(56,46,1)
(12,31,1)
(47,60,1)
(19,18,1)
(14,31,1)
(58,14,1)
(6,28,1)
(30,26,1)
(51,14,1)
(38,13,1)
(7,20,1)
(12,22,1)
(39,33,1)
(54,52,1)
(3,25,1)
(43,45,1)
(51,58,1)
(59,39,1)
(4,6,1)
(2,40,1)
(34,3,1)
(35,36,1)
(6,21,1)
(13,54,1)
(8,38,1)
(7,37,1)
(20,41,2)
(0,39,2)
(25,34,2)
(19,34,2)
(59,39,2)
(54,39,2)
(4,6,2)
(64,39,2)
(41,39,2)
(58,39,2)
(50,39,2)
(34,18,2)
(34,34,2)
(48,31,2)
(30,39,2)
(61,39,2)
(39,40,2)
(6,28,2)
(28,39,2)
(44,39,2)
(13,39,2)
(9,34,2)
(51,39,2)
(51,14,2)
(6,39,2)
(28,12,2)
(19,18,2)
(7,37,2)
(52,39,2)
(17,39,2)
(53,39,2)
(12,31,2)
(14,31,2)
(7,20,2)
(49,56,2)
(46,48,2)
(3,34,2)
(41,63,2)
(38,39,2)
(7,39,2)
(22,39,2)
(31,39,2)
(54,61,2)
(31,7,2)
(20,39,2)
(24,39,2)
(56,48,2)
(29,39,2)
(39,39,2)
(61,31,2)
(0,40,2)
(26,39,2)
(23,39,2)
(33,39,2)
(12,39,2)
(48,39,2)
(8,39,2)
(2,39,2)
(49,48,2)
(6,21,2)
(14,39,2)
(4,39,2)
-----------------------------------
(0,i++)
(1,for(j = 0; j < 1; j++)
(2,i)
(3,1)
(4,printStructLine((twoIntsStruct *)
(5,if (data == NULL)
(6,(twoIntsStruct *)
(7,(struct _twoIntsStruct *)
(8,data)
(9,j)
(10,)
(11,data)
(12,data[0])
(13,0)
(14,data[0])
(15,for(i = 0; i < 1; i++)
(16,i)
(17,data)
(18,j = 0)
(19,j++)
(20,calloc(100, sizeof(struct _twoIntsStruct)
(21,twoIntsStruct *)
(22,0)
(23,100)
(24,data[0].intTwo = 0)
(25,j)
(26,data)
(27,0)
(28,&data[0])
(29,0)
(30,0)
(31,data = (struct _twoIntsStruct *)
(32,)
(33,1)
(34,j < 1)
(35,0)
(36,j)
(37,struct _twoIntsStruct *)
(38,data[0].intOne = 0)
(39,i < 1)
(40,i = 0)
(41,sizeof(struct _twoIntsStruct)
(42,j)
(43,NULL)
(44,NULL)
(45,data)
(46,1)
(47,i)
(48,data == NULL)
(49,exit(-1)
(50,i)
(51,data[0].intTwo)
(52,intOne)
(53,data)
(54,data[0].intOne)
(55,)
(56,-1)
(57, sizeof(struct _twoIntsStruct)
(58,intTwo)
(59,data)
(60,data = NULL)
(61,data[0])
(62,RET)
(63,struct _twoIntsStruct)
(64,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^