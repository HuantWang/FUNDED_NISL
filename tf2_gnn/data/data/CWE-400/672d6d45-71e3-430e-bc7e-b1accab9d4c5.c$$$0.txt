-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_31_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        int countCopy = count;
        int count = countCopy;
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
57,60
58,59
59,60
59,61
61,62
61,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
74,76
74,77
74,78
74,79
74,80
74,81
75,76
76,77
76,78
77,78
79,80
79,81
81,82
83,84
84,85
84,86
85,86
87,88
87,89
87,90
90,91
91,92
93,94
94,95
94,96
96,97
96,98
96,99
99,100
101,102
102,103
102,104
103,104
105,106
105,107
105,108
106,107
108,109
111,112
111,113
112,113
112,114
113,114
115,116
117,118
118,119
119,120
119,121
120,121
123,124
123,125
123,126
123,127
124,125
125,126
125,127
126,127
129,130
129,131
130,131
132,133
132,134
133,134
133,135
134,135
137,138
139,140
140,141
142,143
143,144
143,145
144,145
144,146
145,146
145,147
146,147
148,149
150,151
150,152
150,153
150,154
150,155
151,152
153,154
155,156
156,157
156,158
159,160
159,161
160,161
162,163
164,165
166,167
167,168
168,169
168,170
169,170
172,173
172,174
173,174
175,176
176,177
177,178
177,179
178,179
180,181
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,62,65,68,70,73,78,80,82,86,88,89,92,95,97,98,100,104,107,109,110,114,116,121,122,127,128,131,135,136,138,141,147,149,152,154,157,158,161,163,165,170,171,174,179,181
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
102,103
102,104
112,113
112,114
125,126
125,127
129,130
129,131
144,145
144,146
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_31_bad(){    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_31_bad()
CWE400_Resource_Exhaustion__fgets_fwrite_31_bad
{    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
int countCopy = count;
int countCopy = count;
int
countCopy = count
countCopy
= count
count
count
int count = countCopy;
int count = countCopy;
int
count = countCopy
count
= countCopy
countCopy
countCopy
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(23,4,0)
(13,38,0)
(82,67,0)
(35,45,0)
(63,29,0)
(51,65,0)
(7,18,0)
(3,33,0)
(18,7,0)
(68,25,0)
(46,81,0)
(47,31,0)
(40,7,0)
(36,87,0)
(2,36,0)
(24,31,0)
(14,4,0)
(64,49,0)
(50,4,0)
(31,59,0)
(5,63,0)
(43,29,0)
(19,87,0)
(27,29,0)
(37,29,0)
(48,56,0)
(20,26,0)
(59,83,0)
(22,49,0)
(89,26,0)
(44,29,0)
(60,67,0)
(6,78,0)
(25,87,0)
(33,29,0)
(32,71,0)
(52,11,0)
(29,67,0)
(80,40,0)
(39,56,0)
(49,25,0)
(31,24,0)
(61,16,0)
(7,40,0)
(41,39,0)
(73,7,0)
(67,87,0)
(72,33,0)
(71,85,0)
(28,25,0)
(31,47,0)
(47,86,0)
(91,86,0)
(34,51,0)
(21,29,0)
(61,63,0)
(4,29,0)
(62,59,0)
(88,45,0)
(53,83,0)
(17,57,0)
(56,39,0)
(70,83,0)
(7,63,0)
(15,86,0)
(78,86,0)
(7,38,0)
(79,52,0)
(83,67,0)
(76,18,0)
(45,29,0)
(59,67,0)
(81,64,0)
(84,29,0)
(55,2,0)
(56,49,0)
(14,63,0)
(69,14,0)
(26,63,0)
(8,56,0)
(66,47,0)
(38,7,0)
(10,49,0)
(81,77,0)
(83,81,0)
(54,56,0)
(12,61,0)
(90,36,0)
(83,36,0)
(63,14,0)
(30,14,0)
(74,7,0)
(42,64,0)
(64,81,0)
(58,76,0)
(18,76,0)
(9,31,0)
(1,59,0)
(36,2,0)
(56,54,1)
(6,51,1)
(45,35,1)
(6,18,1)
(4,50,1)
(7,74,1)
(48,49,1)
(86,91,1)
(83,36,1)
(7,38,1)
(74,38,1)
(31,9,1)
(15,26,1)
(2,55,1)
(70,81,1)
(40,80,1)
(78,86,1)
(7,63,1)
(26,89,1)
(59,83,1)
(10,36,1)
(5,4,1)
(54,8,1)
(49,22,1)
(23,33,1)
(39,56,1)
(62,83,1)
(9,66,1)
(20,63,1)
(64,49,1)
(63,14,1)
(39,41,1)
(50,23,1)
(8,48,1)
(36,2,1)
(14,4,1)
(42,46,1)
(33,72,1)
(14,69,1)
(53,70,1)
(75,61,1)
(58,47,1)
(56,49,1)
(47,31,1)
(31,24,1)
(52,79,1)
(3,45,1)
(75,0,1)
(13,40,1)
(51,34,1)
(88,59,1)
(72,3,1)
(81,64,1)
(79,26,1)
(0,47,1)
(66,86,1)
(30,5,1)
(18,7,1)
(18,76,1)
(89,20,1)
(80,73,1)
(1,62,1)
(61,12,1)
(76,58,1)
(46,39,1)
(47,86,1)
(61,63,1)
(78,6,1)
(64,42,1)
(7,40,1)
(83,53,1)
(69,30,1)
(31,59,1)
(22,10,1)
(70,71,1)
(12,0,1)
(32,39,1)
(26,63,1)
(55,90,1)
(35,88,1)
(41,56,1)
(38,13,1)
(91,15,1)
(15,52,1)
(83,81,1)
(73,76,1)
(71,32,1)
(66,78,1)
(34,18,1)
(59,1,1)
(71,39,2)
(47,47,2)
(83,81,2)
(38,47,2)
(6,47,2)
(79,26,2)
(47,86,2)
(83,36,2)
(40,47,2)
(14,4,2)
(58,47,2)
(64,39,2)
(7,63,2)
(12,0,2)
(56,49,2)
(73,47,2)
(31,59,2)
(42,39,2)
(18,7,2)
(7,47,2)
(34,18,2)
(32,39,2)
(64,49,2)
(59,83,2)
(47,31,2)
(76,47,2)
(36,2,2)
(46,39,2)
(81,64,2)
(31,24,2)
(74,47,2)
(61,63,2)
(78,47,2)
(52,26,2)
(81,39,2)
(39,56,2)
(9,47,2)
(26,63,2)
(63,14,2)
(80,47,2)
(66,47,2)
(31,47,2)
(78,86,2)
(13,47,2)
(61,0,2)
(7,38,2)
(18,47,2)
(7,40,2)
(51,18,2)
(18,76,2)
-----------------------------------
(0,pFile)
(1,countCopy)
(2,-1)
(3,pFile)
(4,*filename = "output_bad.txt")
(5,pFile)
(6,i)
(7,fwrite(SENTENCE, sizeof(char)
(8,CHAR_ARRAY_SIZE)
(9,count)
(10,inputBuffer)
(11,)
(12,pFile)
(13,SENTENCE)
(14,fopen(filename, "w+")
(15,i)
(16,)
(17,if (strlen(SENTENCE)
(18,strlen(SENTENCE)
(19,count)
(20,pFile)
(21,filename)
(22,"")
(23,filename)
(24,size_t)
(25,)
(26,pFile == NULL)
(27,if (pFile == NULL)
(28,inputBuffer)
(29,)
(30,filename)
(31,(size_t)
(32,"fgets()
(33,*pFile = NULL)
(34,1)
(35,0)
(36,count = -1)
(37,pFile)
(38,strlen(SENTENCE)
(39,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(40,sizeof(char)
(41,NULL)
(42,inputBuffer)
(43,for (i = 0; i < (size_t)
(44,i)
(45,i = 0)
(46,count)
(47,i < (size_t)
(48,inputBuffer)
(49,inputBuffer[CHAR_ARRAY_SIZE] = "")
(50,"output_bad.txt")
(51,exit(1)
(52,exit(1)
(53,count)
(54,stdin)
(55,1)
(56,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(57,)
(58,SENTENCE)
(59,count = countCopy)
(60,countCopy)
(61,fclose(pFile)
(62,count)
(63,pFile = fopen(filename, "w+")
(64,atoi(inputBuffer)
(65,)
(66,i)
(67,)
(68,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(69,"w+")
(70,countCopy)
(71,printLine("fgets()
(72,NULL)
(73,SENTENCE)
(74,pFile)
(75,RET)
(76,strlen(SENTENCE)
(77,)
(78,i++)
(79,1)
(80,char)
(81,count = atoi(inputBuffer)
(82,count)
(83,countCopy = count)
(84,if (pFile)
(85,)
(86,i = 0)
(87,)
(88,i)
(89,NULL)
(90,count)
(91,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^