-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(5==5)
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
51,54
51,55
52,53
54,55
56,57
59,60
60,61
61,62
61,63
62,63
65,66
65,67
66,67
66,68
69,70
70,71
70,72
71,72
72,73
72,74
74,75
74,76
77,78
77,79
77,80
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
91,92
91,93
91,94
91,95
91,96
92,93
93,94
93,95
94,95
96,97
96,98
97,98
97,99
99,100
101,102
101,103
102,103
104,105
104,106
105,106
107,108
108,109
108,110
111,112
111,113
112,113
112,114
113,114
115,116
117,118
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
125,128
126,127
128,129
130,131
132,133
133,134
133,135
134,135
136,137
138,139
139,140
139,141
140,141
142,143
144,145
145,146
146,147
146,148
147,148
-----nextToken-----
2,4,9,11,15,16,19,20,25,27,30,32,37,39,41,43,45,50,53,55,57,58,63,64,67,68,73,75,76,81,84,86,89,90,95,98,100,103,106,109,110,114,116,121,123,127,129,131,135,137,141,143,148,149
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
48,49
48,50
66,67
66,68
78,79
78,80
79,80
79,81
87,88
87,89
93,94
93,95
104,105
104,106
112,113
112,114
-----guardedBy-----
39,55
45,57
86,131
89,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(5==5)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
5==5
5
5
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(21,71,0)
(5,72,0)
(71,33,0)
(18,70,0)
(44,63,0)
(58,15,0)
(4,21,0)
(8,71,0)
(47,6,0)
(32,61,0)
(30,46,0)
(45,49,0)
(37,73,0)
(60,6,0)
(2,70,0)
(6,75,0)
(61,18,0)
(8,39,0)
(31,51,0)
(69,35,0)
(76,40,0)
(71,18,0)
(9,54,0)
(73,54,0)
(46,67,0)
(36,73,0)
(12,51,0)
(26,20,0)
(33,16,0)
(22,70,0)
(15,49,0)
(71,21,0)
(12,10,0)
(38,39,0)
(39,18,0)
(15,28,0)
(42,41,0)
(63,49,0)
(33,60,0)
(48,60,0)
(61,33,0)
(63,54,0)
(57,69,0)
(75,24,0)
(71,8,0)
(28,15,0)
(41,42,0)
(49,54,0)
(7,75,0)
(55,60,0)
(56,41,0)
(39,33,0)
(23,33,0)
(0,49,0)
(52,60,0)
(1,0,0)
(43,70,0)
(40,61,0)
(34,41,0)
(51,12,0)
(65,72,0)
(66,6,0)
(58,61,0)
(20,13,0)
(64,71,0)
(73,49,0)
(74,45,0)
(39,8,0)
(61,40,0)
(19,41,0)
(53,14,0)
(11,18,0)
(62,49,0)
(50,42,0)
(68,75,0)
(17,69,0)
(41,6,0)
(15,58,0)
(3,14,0)
(27,39,0)
(25,0,0)
(60,33,0)
(61,58,0)
(49,15,0)
(59,18,0)
(45,54,0)
(42,50,1)
(48,52,1)
(73,36,1)
(52,55,1)
(39,18,1)
(39,27,1)
(49,15,1)
(44,73,1)
(58,61,1)
(39,33,1)
(71,33,1)
(20,26,1)
(65,33,1)
(51,31,1)
(71,18,1)
(5,65,1)
(26,8,1)
(37,12,1)
(66,14,1)
(6,47,1)
(61,18,1)
(1,25,1)
(27,38,1)
(47,66,1)
(14,53,1)
(32,62,1)
(72,5,1)
(3,18,1)
(41,56,1)
(61,40,1)
(60,48,1)
(41,6,1)
(71,21,1)
(18,59,1)
(42,41,1)
(73,49,1)
(53,3,1)
(45,49,1)
(33,60,1)
(64,72,1)
(38,71,1)
(46,30,1)
(61,33,1)
(59,11,1)
(36,37,1)
(23,42,1)
(60,6,1)
(15,28,1)
(45,74,1)
(34,6,1)
(8,71,1)
(74,63,1)
(65,46,1)
(21,4,1)
(0,1,1)
(12,51,1)
(37,0,1)
(56,19,1)
(62,8,1)
(30,42,1)
(50,41,1)
(63,49,1)
(19,34,1)
(31,0,1)
(15,58,1)
(29,72,1)
(55,23,1)
(4,64,1)
(40,76,1)
(76,32,1)
(25,49,1)
(29,20,1)
(29,45,1)
(0,49,1)
(65,14,1)
(8,39,1)
(63,44,1)
(30,42,2)
(55,42,2)
(38,71,2)
(31,0,2)
(61,40,2)
(1,8,2)
(49,15,2)
(8,72,2)
(61,33,2)
(42,41,2)
(4,72,2)
(32,8,2)
(45,8,2)
(21,72,2)
(73,49,2)
(15,28,2)
(66,14,2)
(12,0,2)
(58,8,2)
(62,8,2)
(76,8,2)
(0,8,2)
(8,39,2)
(33,42,2)
(25,8,2)
(63,49,2)
(48,42,2)
(73,8,2)
(15,58,2)
(71,72,2)
(60,42,2)
(51,0,2)
(61,8,2)
(19,14,2)
(47,14,2)
(71,33,2)
(39,18,2)
(52,42,2)
(71,18,2)
(58,61,2)
(46,42,2)
(71,21,2)
(34,14,2)
(40,8,2)
(36,8,2)
(63,8,2)
(41,14,2)
(33,60,2)
(39,33,2)
(49,8,2)
(0,49,2)
(6,14,2)
(74,8,2)
(61,18,2)
(26,8,2)
(39,71,2)
(42,14,2)
(44,8,2)
(60,6,2)
(15,8,2)
(27,71,2)
(41,6,2)
(56,14,2)
(12,51,2)
(64,72,2)
(50,14,2)
(45,49,2)
(23,42,2)
(20,8,2)
(8,71,2)
(37,8,2)
-----------------------------------
(0,myString == NULL)
(1,NULL)
(2,if(5==5)
(3,5)
(4,HELLO_STRING)
(5,5)
(6,inputBuffer[CHAR_ARRAY_SIZE] = "")
(7,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(8,data > wcslen(HELLO_STRING)
(9,if (myString == NULL)
(10,)
(11,data)
(12,exit(-1)
(13,)
(14,5==5)
(15,(wchar_t *)
(16,)
(17,myString)
(18,data = 0)
(19,CHAR_ARRAY_SIZE)
(20,printLine("Input is less than the length of the source string or too large")
(21,wcslen(HELLO_STRING)
(22,data)
(23,data)
(24,)
(25,myString)
(26,"Input is less than the length of the source string or too large")
(27,100)
(28,wchar_t *)
(29,RET)
(30,"fgets()
(31,1)
(32,data)
(33,data = strtoul(inputBuffer, NULL, 0)
(34,inputBuffer)
(35,)
(36,HELLO_STRING)
(37,myString)
(38,data)
(39,data < 100)
(40,sizeof(wchar_t)
(41,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,if(5==5)
(44,myString)
(45,free(myString)
(46,printLine("fgets()
(47,"")
(48,0)
(49,myString = (wchar_t *)
(50,NULL)
(51,-1)
(52,NULL)
(53,5)
(54,)
(55,inputBuffer)
(56,stdin)
(57,if (data > wcslen(HELLO_STRING)
(58,malloc(data*sizeof(wchar_t)
(59,0)
(60,strtoul(inputBuffer, NULL, 0)
(61,data*sizeof(wchar_t)
(62,myString)
(63,printWLine(myString)
(64,data)
(65,5)
(66,inputBuffer)
(67,)
(68,inputBuffer)
(69,)
(70,)
(71,data > wcslen(HELLO_STRING)
(72,5==5)
(73,wcscpy(myString, HELLO_STRING)
(74,myString)
(75,)
(76,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^