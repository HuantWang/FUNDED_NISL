-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(globalFive==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
46,47
46,48
46,49
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
55,60
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
63,64
65,66
65,67
66,67
68,69
68,70
69,70
71,72
72,73
72,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
110,111
110,112
111,112
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,29,32,36,37,42,44,45,49,52,54,59,62,64,67,70,73,74,78,80,85,87,91,93,95,99,101,105,107,112,113
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
47,48
47,49
57,58
57,59
68,69
68,70
76,77
76,78
-----guardedBy-----
54,95
49,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_bad(){    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(globalFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_bad
{    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(globalFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(globalFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(13,47,0)
(28,10,0)
(29,35,0)
(47,17,0)
(42,49,0)
(4,46,0)
(40,51,0)
(35,26,0)
(16,14,0)
(9,24,0)
(10,28,0)
(24,40,0)
(25,52,0)
(30,6,0)
(40,46,0)
(5,50,0)
(51,28,0)
(0,54,0)
(32,33,0)
(31,49,0)
(46,53,0)
(6,30,0)
(55,53,0)
(41,16,0)
(39,50,0)
(23,16,0)
(1,53,0)
(44,50,0)
(54,50,0)
(27,39,0)
(49,42,0)
(21,33,0)
(34,5,0)
(43,37,0)
(5,37,0)
(38,52,0)
(18,7,0)
(6,36,0)
(7,50,0)
(8,47,0)
(39,37,0)
(40,24,0)
(51,40,0)
(16,22,0)
(49,46,0)
(20,54,0)
(45,53,0)
(48,22,0)
(28,51,0)
(22,46,0)
(11,30,0)
(50,28,0)
(3,42,0)
(28,50,0)
(22,16,0)
(19,46,0)
(2,40,0)
(50,37,0)
(15,7,0)
(7,37,0)
(25,46,1)
(7,18,1)
(24,9,1)
(5,50,1)
(33,32,1)
(6,30,1)
(15,54,1)
(30,11,1)
(32,21,1)
(7,50,1)
(3,31,1)
(0,50,1)
(22,48,1)
(21,16,1)
(12,39,1)
(27,5,1)
(12,33,1)
(11,54,1)
(21,52,1)
(38,25,1)
(41,23,1)
(39,50,1)
(40,46,1)
(52,38,1)
(50,28,1)
(48,41,1)
(34,7,1)
(31,33,1)
(12,35,1)
(20,0,1)
(46,19,1)
(22,46,1)
(44,49,1)
(49,42,1)
(16,22,1)
(2,44,1)
(39,27,1)
(5,34,1)
(28,10,1)
(40,24,1)
(19,4,1)
(42,3,1)
(54,50,1)
(51,40,1)
(23,52,1)
(54,20,1)
(9,2,1)
(35,29,1)
(29,49,1)
(15,6,1)
(49,46,1)
(18,15,1)
(28,51,1)
(35,49,2)
(16,22,2)
(18,49,2)
(5,50,2)
(7,49,2)
(28,10,2)
(24,49,2)
(39,49,2)
(31,33,2)
(42,33,2)
(49,46,2)
(15,49,2)
(50,49,2)
(20,49,2)
(29,49,2)
(39,50,2)
(40,46,2)
(0,49,2)
(49,42,2)
(5,49,2)
(22,46,2)
(41,52,2)
(22,52,2)
(49,33,2)
(51,49,2)
(2,49,2)
(27,49,2)
(54,50,2)
(16,52,2)
(54,49,2)
(40,49,2)
(9,49,2)
(28,49,2)
(48,52,2)
(44,49,2)
(28,51,2)
(50,28,2)
(51,40,2)
(30,54,2)
(3,33,2)
(6,30,2)
(23,52,2)
(40,24,2)
(11,54,2)
(7,50,2)
(34,49,2)
(6,54,2)
-----------------------------------
(0,myString)
(1,if(globalFive==5)
(2,data)
(3,HELLO_STRING)
(4,data)
(5,printLine(myString)
(6,exit(-1)
(7,strcpy(myString, HELLO_STRING)
(8,if (data > strlen(HELLO_STRING)
(9,char)
(10,char *)
(11,1)
(12,RET)
(13,myString)
(14,)
(15,myString)
(16,fscanf(stdin, "%zu", &data)
(17,)
(18,HELLO_STRING)
(19,0)
(20,NULL)
(21,globalFive)
(22,&data)
(23,stdin)
(24,sizeof(char)
(25,globalFive)
(26,)
(27,myString)
(28,(char *)
(29,"Input is less than the length of the source string")
(30,-1)
(31,data)
(32,5)
(33,globalFive==5)
(34,myString)
(35,printLine("Input is less than the length of the source string")
(36,)
(37,)
(38,5)
(39,free(myString)
(40,data*sizeof(char)
(41,"%zu")
(42,strlen(HELLO_STRING)
(43,if (myString == NULL)
(44,myString)
(45,data)
(46,data = 0)
(47,)
(48,data)
(49,data > strlen(HELLO_STRING)
(50,myString = (char *)
(51,malloc(data*sizeof(char)
(52,globalFive==5)
(53,)
(54,myString == NULL)
(55,if(globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^