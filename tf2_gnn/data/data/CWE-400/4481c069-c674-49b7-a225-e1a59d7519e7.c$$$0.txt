-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    data = goodG2BSource(data);
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
33,34
33,35
33,36
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
42,47
43,44
44,45
44,46
45,46
47,48
47,49
48,49
48,50
50,51
52,53
52,54
53,54
55,56
55,57
56,57
58,59
59,60
59,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
-----nextToken-----
2,4,9,11,15,16,20,23,25,29,31,32,36,39,41,46,49,51,54,57,60,61,65,67,72,74,78,80,82,86,88,92,94,99,100
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
44,45
44,46
55,56
55,57
63,64
63,65
-----guardedBy-----
41,82
36,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    data = goodG2BSource(data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    data = goodG2BSource(data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = goodG2BSource(data);
data = goodG2BSource(data)
data
data
goodG2BSource(data)
goodG2BSource
goodG2BSource
data
data
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(16,4,0)
(1,20,0)
(11,20,0)
(40,32,0)
(21,5,0)
(28,5,0)
(23,11,0)
(8,5,0)
(8,31,0)
(9,41,0)
(27,14,0)
(44,39,0)
(19,30,0)
(22,8,0)
(5,29,0)
(32,41,0)
(19,35,0)
(8,22,0)
(25,10,0)
(26,29,0)
(12,17,0)
(2,26,0)
(20,41,0)
(33,34,0)
(17,5,0)
(4,20,0)
(6,14,0)
(30,19,0)
(4,22,0)
(38,33,0)
(20,11,0)
(36,29,0)
(3,4,0)
(11,14,0)
(18,10,0)
(22,4,0)
(7,3,0)
(39,5,0)
(26,5,0)
(14,41,0)
(10,20,0)
(10,18,0)
(31,8,0)
(5,8,0)
(43,21,0)
(17,29,0)
(0,21,0)
(42,18,0)
(15,30,0)
(39,29,0)
(24,32,0)
(4,3,0)
(37,17,0)
(30,15,1)
(26,5,1)
(39,5,1)
(10,18,1)
(15,21,1)
(20,11,1)
(17,37,1)
(21,5,1)
(11,14,1)
(39,44,1)
(26,2,1)
(12,19,1)
(3,7,1)
(19,30,1)
(38,10,1)
(43,0,1)
(27,6,1)
(17,5,1)
(37,12,1)
(23,1,1)
(16,28,1)
(42,25,1)
(10,20,1)
(33,38,1)
(12,21,1)
(7,16,1)
(13,33,1)
(21,43,1)
(14,27,1)
(1,14,1)
(28,10,1)
(44,26,1)
(4,3,1)
(0,5,1)
(2,17,1)
(5,8,1)
(18,42,1)
(25,20,1)
(11,23,1)
(22,4,1)
(8,22,1)
(13,39,1)
(8,31,1)
(4,20,1)
(21,10,2)
(19,21,2)
(43,10,2)
(3,10,2)
(11,14,2)
(33,10,2)
(39,5,2)
(0,10,2)
(4,10,2)
(26,10,2)
(8,10,2)
(37,10,2)
(22,4,2)
(8,22,2)
(12,10,2)
(2,10,2)
(10,20,2)
(17,10,2)
(44,10,2)
(21,5,2)
(28,10,2)
(39,10,2)
(38,10,2)
(19,30,2)
(5,10,2)
(30,21,2)
(4,20,2)
(7,10,2)
(22,10,2)
(10,18,2)
(26,5,2)
(8,31,2)
(20,11,2)
(16,10,2)
(5,8,2)
(17,5,2)
(15,21,2)
(4,3,2)
-----------------------------------
(0,myString)
(1,data)
(2,myString)
(3,sizeof(wchar_t)
(4,data*sizeof(wchar_t)
(5,myString = (wchar_t *)
(6,data)
(7,wchar_t)
(8,(wchar_t *)
(9,data)
(10,data > wcslen(HELLO_STRING)
(11,goodG2BSource(data)
(12,myString)
(13,RET)
(14,data = 0)
(15,1)
(16,data)
(17,wcscpy(myString, HELLO_STRING)
(18,wcslen(HELLO_STRING)
(19,exit(-1)
(20,data = goodG2BSource(data)
(21,myString == NULL)
(22,malloc(data*sizeof(wchar_t)
(23,data)
(24,myString)
(25,data)
(26,printWLine(myString)
(27,0)
(28,myString)
(29,)
(30,-1)
(31,wchar_t *)
(32,)
(33,printLine("Input is less than the length of the source string")
(34,)
(35,)
(36,if (myString == NULL)
(37,HELLO_STRING)
(38,"Input is less than the length of the source string")
(39,free(myString)
(40,if (data > wcslen(HELLO_STRING)
(41,)
(42,HELLO_STRING)
(43,NULL)
(44,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^