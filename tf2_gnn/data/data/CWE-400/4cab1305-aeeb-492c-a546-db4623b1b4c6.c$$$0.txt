-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_04_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
26,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,11,15,17,20,25,27,28,30,34,37,39,43,45,48,50
-----computeFrom-----
13,14
13,15
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_04_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_wchar_t_04_bad()
CWE401_Memory_Leak__strdup_wchar_t_04_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(14,13,0)
(5,1,0)
(11,5,0)
(9,6,0)
(3,1,0)
(18,17,0)
(0,18,0)
(8,14,0)
(2,1,0)
(6,13,0)
(14,18,0)
(4,1,0)
(13,18,0)
(7,5,0)
(13,6,0)
(12,13,0)
(14,13,1)
(6,9,1)
(16,15,1)
(0,10,1)
(15,14,1)
(5,7,1)
(10,5,1)
(15,10,1)
(12,0,1)
(14,8,1)
(8,13,1)
(9,12,1)
(13,6,1)
(7,11,1)
(12,10,2)
(6,10,2)
(14,13,2)
(8,10,2)
(9,10,2)
(13,6,2)
(0,10,2)
(13,10,2)
(14,10,2)
-----------------------------------
(0,"myString")
(1,)
(2,if(STATIC_CONST_TRUE)
(3,if(STATIC_CONST_TRUE)
(4,data)
(5,data = NULL)
(6,wcsdup(myString)
(7,NULL)
(8,data)
(9,myString)
(10,STATIC_CONST_TRUE)
(11,data)
(12,data)
(13,data = wcsdup(myString)
(14,printWLine(data)
(15,STATIC_CONST_TRUE)
(16,RET)
(17,)
(18,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^