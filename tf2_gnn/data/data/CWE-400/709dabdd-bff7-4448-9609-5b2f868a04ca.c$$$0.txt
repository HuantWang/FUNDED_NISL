-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_31_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        int countCopy = count;
        int count = countCopy;
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
57,60
57,61
58,59
59,60
59,61
61,62
61,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,62,65,68,70,73,77,79,83,84
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_31_bad(){    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int countCopy = count;        int count = countCopy;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__fgets_sleep_31_bad()
CWE400_Resource_Exhaustion__fgets_sleep_31_bad
{    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int countCopy = count;        int count = countCopy;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        int countCopy = count;        int count = countCopy;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
int countCopy = count;
int countCopy = count;
int
countCopy = count
countCopy
= count
count
count
int count = countCopy;
int count = countCopy;
int
count = countCopy
count
= countCopy
countCopy
countCopy
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(38,34,0)
(18,21,0)
(37,34,0)
(39,18,0)
(4,30,0)
(15,12,0)
(32,20,0)
(12,14,0)
(12,38,0)
(13,21,0)
(11,20,0)
(23,10,0)
(0,24,0)
(25,0,0)
(0,10,0)
(8,14,0)
(36,19,0)
(2,14,0)
(10,20,0)
(24,0,0)
(16,18,0)
(14,21,0)
(28,23,0)
(20,21,0)
(6,14,0)
(24,9,0)
(30,33,0)
(27,38,0)
(26,10,0)
(35,38,0)
(22,10,0)
(17,24,0)
(3,8,0)
(29,23,0)
(38,14,0)
(7,16,0)
(34,24,0)
(34,14,0)
(34,18,0)
(18,16,0)
(1,23,0)
(31,34,0)
(23,19,0)
(19,23,0)
(38,34,1)
(30,4,1)
(12,38,1)
(5,8,1)
(3,12,1)
(8,3,1)
(35,27,1)
(36,23,1)
(38,35,1)
(16,7,1)
(24,0,1)
(23,10,1)
(29,28,1)
(37,31,1)
(34,24,1)
(17,19,1)
(10,26,1)
(23,1,1)
(1,29,1)
(19,36,1)
(34,18,1)
(31,24,1)
(0,10,1)
(19,23,1)
(12,15,1)
(22,18,1)
(7,39,1)
(4,19,1)
(0,25,1)
(25,17,1)
(18,16,1)
(26,22,1)
(15,38,1)
(28,10,1)
(34,37,1)
(31,30,1)
(27,34,1)
(24,19,2)
(34,18,2)
(25,19,2)
(38,34,2)
(34,24,2)
(4,19,2)
(30,19,2)
(12,38,2)
(0,19,2)
(18,16,2)
(0,10,2)
(23,10,2)
(24,0,2)
(19,23,2)
(17,19,2)
-----------------------------------
(0,atoi(inputBuffer)
(1,stdin)
(2,count)
(3,"Sleep time possibly too long")
(4,"fgets()
(5,RET)
(6,countCopy)
(7,1)
(8,printLine("Sleep time possibly too long")
(9,)
(10,inputBuffer[CHAR_ARRAY_SIZE] = "")
(11,inputBuffer)
(12,SLEEP(count)
(13,count)
(14,)
(15,count)
(16,-1)
(17,count)
(18,count = -1)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,)
(21,)
(22,inputBuffer)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,count = atoi(inputBuffer)
(25,inputBuffer)
(26,"")
(27,count)
(28,inputBuffer)
(29,CHAR_ARRAY_SIZE)
(30,printLine("fgets()
(31,countCopy)
(32,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,)
(34,countCopy = count)
(35,countCopy)
(36,NULL)
(37,count)
(38,count = countCopy)
(39,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^