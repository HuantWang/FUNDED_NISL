-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_04_bad()
{
    int * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,56,57,58,62,65,66,69,71
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_04_bad(){    int * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_04_bad()
CWE401_Memory_Leak__int_calloc_04_bad
{    int * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(4,11,0)
(6,0,0)
(29,22,0)
(3,9,0)
(30,29,0)
(7,30,0)
(28,35,0)
(32,33,0)
(17,33,0)
(35,11,0)
(11,35,0)
(25,2,0)
(20,0,0)
(36,32,0)
(8,15,0)
(21,2,0)
(15,35,0)
(23,9,0)
(19,15,0)
(34,2,0)
(25,22,0)
(10,27,0)
(9,3,0)
(30,35,0)
(2,25,0)
(2,29,0)
(12,27,0)
(26,0,0)
(2,35,0)
(32,11,0)
(11,32,0)
(11,4,0)
(31,22,0)
(16,29,0)
(27,0,0)
(33,32,0)
(3,13,0)
(35,22,0)
(18,30,0)
(14,1,1)
(30,35,1)
(35,11,1)
(30,7,1)
(11,4,1)
(34,21,1)
(18,15,1)
(8,35,1)
(1,25,1)
(23,15,1)
(33,17,1)
(1,24,1)
(11,32,1)
(28,24,1)
(18,3,1)
(36,28,1)
(27,12,1)
(15,19,1)
(24,27,1)
(9,23,1)
(32,33,1)
(12,10,1)
(17,36,1)
(15,35,1)
(2,35,1)
(19,8,1)
(2,29,1)
(16,30,1)
(25,2,1)
(3,9,1)
(7,18,1)
(29,16,1)
(2,34,1)
(21,29,1)
(16,24,2)
(32,24,2)
(11,24,2)
(11,4,2)
(21,24,2)
(17,24,2)
(30,35,2)
(2,35,2)
(34,24,2)
(28,24,2)
(23,15,2)
(8,24,2)
(15,24,2)
(30,24,2)
(33,24,2)
(15,35,2)
(3,9,2)
(35,11,2)
(18,24,2)
(35,24,2)
(2,24,2)
(36,24,2)
(11,32,2)
(9,15,2)
(2,29,2)
(25,2,2)
(3,15,2)
(29,24,2)
(19,24,2)
(7,24,2)
(25,24,2)
(32,33,2)
-----------------------------------
(0,)
(1,STATIC_CONST_TRUE)
(2,data[0])
(3,exit(-1)
(4,int *)
(5, sizeof(int)
(6,data)
(7,0)
(8,data)
(9,-1)
(10,data)
(11,(int *)
(12,NULL)
(13,)
(14,RET)
(15,data == NULL)
(16,5)
(17,int)
(18,data)
(19,NULL)
(20,if(STATIC_CONST_TRUE)
(21,data)
(22,)
(23,1)
(24,STATIC_CONST_TRUE)
(25,printIntLine(data[0])
(26,if(STATIC_CONST_TRUE)
(27,data = NULL)
(28,data)
(29,data[0] = 5)
(30,data[0])
(31,if (data == NULL)
(32,calloc(100, sizeof(int)
(33,sizeof(int)
(34,0)
(35,data = (int *)
(36,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^