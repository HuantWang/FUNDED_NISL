-----label-----
0
-----code-----
static void goodB2G1()
{
    int * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
53,55
54,55
58,59
59,60
59,61
60,61
62,63
62,64
63,64
66,67
66,68
66,69
68,69
69,70
70,71
70,72
71,72
74,75
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,33,36,37,41,43,48,50,55,56,57,61,64,65,67,72,73,78,80
-----computeFrom-----
13,14
13,15
22,23
22,24
39,40
39,41
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(15,28,0)
(30,21,0)
(16,42,0)
(7,5,0)
(33,26,0)
(27,8,0)
(40,30,0)
(37,9,0)
(9,10,0)
(42,16,0)
(33,9,0)
(5,7,0)
(38,17,0)
(1,7,0)
(8,36,0)
(19,33,0)
(39,22,0)
(17,4,0)
(25,5,0)
(29,39,0)
(20,38,0)
(28,26,0)
(31,26,0)
(26,35,0)
(16,26,0)
(13,9,0)
(7,16,0)
(41,28,0)
(23,39,0)
(33,18,0)
(21,30,0)
(21,35,0)
(30,26,0)
(12,10,0)
(11,30,0)
(22,35,0)
(39,26,0)
(26,16,0)
(30,22,0)
(0,10,0)
(34,22,0)
(6,35,0)
(17,38,0)
(16,7,0)
(24,10,0)
(20,28,1)
(31,2,1)
(22,34,1)
(39,29,1)
(30,11,1)
(14,21,1)
(2,9,1)
(9,37,1)
(28,26,1)
(11,40,1)
(5,25,1)
(26,16,1)
(27,14,1)
(19,14,1)
(29,23,1)
(25,1,1)
(1,31,1)
(34,39,1)
(16,7,1)
(23,28,1)
(3,33,1)
(37,13,1)
(3,8,1)
(28,41,1)
(16,42,1)
(40,22,1)
(8,27,1)
(41,15,1)
(39,26,1)
(33,19,1)
(17,38,1)
(38,20,1)
(15,26,1)
(7,5,1)
(14,2,1)
(33,9,1)
(21,30,1)
(23,17,1)
(30,26,1)
(33,26,1)
(30,22,1)
(34,2,2)
(1,2,2)
(29,2,2)
(7,5,2)
(17,38,2)
(40,2,2)
(16,2,2)
(11,2,2)
(30,22,2)
(15,2,2)
(33,26,2)
(38,28,2)
(22,2,2)
(33,9,2)
(8,14,2)
(20,28,2)
(28,2,2)
(39,2,2)
(39,26,2)
(31,2,2)
(27,14,2)
(30,26,2)
(26,16,2)
(25,2,2)
(16,7,2)
(30,2,2)
(21,30,2)
(16,42,2)
(5,2,2)
(23,2,2)
(28,26,2)
(19,14,2)
(21,2,2)
(7,2,2)
(26,2,2)
(41,2,2)
(17,28,2)
(33,14,2)
-----------------------------------
(0,if(0)
(1,100)
(2,1)
(3,RET)
(4,)
(5,sizeof(int)
(6,if (data == NULL)
(7,calloc(100, sizeof(int)
(8,printLine("Benign, fixed string")
(9,data = NULL)
(10,)
(11,0)
(12,data)
(13,data)
(14,0)
(15,data)
(16,(int *)
(17,exit(-1)
(18,)
(19,data)
(20,1)
(21,printIntLine(data[0])
(22,data[0] = 5)
(23,data)
(24,if(1)
(25,int)
(26,data = (int *)
(27,"Benign, fixed string")
(28,data == NULL)
(29,0)
(30,data[0])
(31,data)
(32, sizeof(int)
(33,free(data)
(34,5)
(35,)
(36,)
(37,NULL)
(38,-1)
(39,data[0])
(40,data)
(41,NULL)
(42,int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^