-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_44_bad()
{
    char * data;
    /* define a function pointer */
    void (*funcPtr) (char *) = badSink;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)calloc(100, sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
42,45
43,44
46,47
47,48
47,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
65,66
67,68
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,45,48,49,53,55,60,62,66,68,69,73,75,79,81
-----computeFrom-----
28,29
28,30
34,35
34,36
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_44_bad(){    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* use the function pointer */    funcPtr(data);}
void
CWE401_Memory_Leak__char_calloc_44_bad()
CWE401_Memory_Leak__char_calloc_44_bad
{    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* use the function pointer */    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = badSink;
void (*funcPtr) (char *) = badSink;
void
(*funcPtr) (char *) = badSink
*funcPtr
*
funcPtr
char *
char
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(11,4,0)
(31,23,0)
(3,33,0)
(32,24,0)
(25,6,0)
(21,2,0)
(6,4,0)
(0,23,0)
(23,7,0)
(23,31,0)
(24,11,0)
(26,12,0)
(1,8,0)
(19,2,0)
(14,31,0)
(5,7,0)
(12,11,0)
(17,8,0)
(8,4,0)
(9,4,0)
(18,24,0)
(27,6,0)
(31,14,0)
(10,11,0)
(29,16,0)
(30,33,0)
(30,13,0)
(33,30,0)
(11,31,0)
(12,4,0)
(2,11,0)
(31,11,0)
(16,11,0)
(2,4,0)
(20,4,0)
(28,4,0)
(7,23,0)
(16,4,0)
(3,24,1)
(29,12,1)
(12,26,1)
(2,19,1)
(11,31,1)
(31,14,1)
(12,11,1)
(31,23,1)
(23,7,1)
(2,11,1)
(8,1,1)
(21,24,1)
(21,30,1)
(33,3,1)
(7,5,1)
(18,11,1)
(27,25,1)
(17,6,1)
(24,32,1)
(5,0,1)
(26,2,1)
(0,10,1)
(1,17,1)
(19,21,1)
(6,27,1)
(30,33,1)
(24,11,1)
(10,8,1)
(16,11,1)
(32,18,1)
(22,16,1)
(16,29,1)
(3,24,2)
(23,7,2)
(11,31,2)
(31,14,2)
(24,11,2)
(33,24,2)
(30,24,2)
(30,33,2)
(12,11,2)
(2,11,2)
(16,11,2)
(31,23,2)
-----------------------------------
(0,100)
(1,NULL)
(2,strcpy(data, "A String")
(3,1)
(4,)
(5,char)
(6,(*funcPtr)
(7,sizeof(char)
(8,data = NULL)
(9,funcPtr)
(10,data)
(11,data = (char *)
(12,printLine(data)
(13,)
(14,char *)
(15, sizeof(char)
(16,funcPtr(data)
(17,data)
(18,data)
(19,"A String")
(20,if (data == NULL)
(21,data)
(22,RET)
(23,calloc(100, sizeof(char)
(24,data == NULL)
(25,funcPtr)
(26,data)
(27,badSink)
(28,data)
(29,data)
(30,exit(-1)
(31,(char *)
(32,NULL)
(33,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^