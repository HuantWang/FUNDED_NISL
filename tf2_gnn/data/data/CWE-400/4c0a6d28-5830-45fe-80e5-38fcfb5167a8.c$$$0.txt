-----label-----
0
-----code-----
static void good2()
{
    if(globalFive==5)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            char * tmpData;
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            tmpData = (char *)realloc(data, (130000)*sizeof(char));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
68,69
70,71
70,72
71,72
71,73
73,74
75,76
75,77
75,78
76,77
78,79
80,81
80,82
81,82
83,84
84,85
84,86
87,88
87,89
88,89
88,90
89,90
91,92
93,94
93,95
93,96
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
101,104
102,103
104,105
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,49,51,52,56,58,59,63,65,69,72,74,77,79,82,85,86,90,92,97,99,103,105,106,110,112,116,118
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
67,68
67,69
80,81
80,82
88,89
88,90
95,96
95,97
-----guardedBy-----
90,99
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good2(){    if(globalFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }}
static void
good2()
good2
{    if(globalFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }}
if(globalFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }
globalFive==5
globalFive
globalFive
5
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
char * tmpData;
char * tmpData;
char
* tmpData
*
tmpData
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
tmpData = (char *)realloc(data, (130000)*sizeof(char));
tmpData = (char *)realloc(data, (130000)*sizeof(char))
tmpData
tmpData
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(48,26,0)
(9,26,0)
(53,15,0)
(54,56,0)
(36,55,0)
(37,5,0)
(44,0,0)
(22,26,0)
(51,31,0)
(13,26,0)
(34,7,0)
(49,54,0)
(21,45,0)
(26,37,0)
(56,54,0)
(41,56,0)
(23,34,0)
(56,26,0)
(16,15,0)
(8,37,0)
(10,19,0)
(38,49,0)
(26,56,0)
(32,35,0)
(48,37,0)
(34,29,0)
(7,29,0)
(31,4,0)
(49,33,0)
(11,35,0)
(55,36,0)
(48,7,0)
(19,31,0)
(20,10,0)
(40,9,0)
(33,49,0)
(18,33,0)
(0,29,0)
(31,19,0)
(14,7,0)
(6,4,0)
(12,7,0)
(3,37,0)
(17,19,0)
(4,32,0)
(50,45,0)
(31,51,0)
(45,37,0)
(42,55,0)
(56,41,0)
(36,25,0)
(1,37,0)
(4,31,0)
(35,32,0)
(19,37,0)
(47,48,0)
(24,9,0)
(2,37,0)
(45,26,0)
(0,7,0)
(27,13,0)
(52,10,0)
(7,19,0)
(4,26,0)
(46,34,0)
(32,4,0)
(54,49,0)
(13,37,0)
(28,30,0)
(43,32,0)
(39,48,1)
(7,14,1)
(9,24,1)
(43,6,1)
(39,15,1)
(18,38,1)
(56,54,1)
(21,9,1)
(48,7,1)
(17,13,1)
(36,55,1)
(13,26,1)
(32,35,1)
(13,27,1)
(45,50,1)
(4,26,1)
(50,21,1)
(40,26,1)
(24,40,1)
(12,10,1)
(20,52,1)
(4,32,1)
(19,31,1)
(26,56,1)
(9,26,1)
(42,9,1)
(48,47,1)
(55,42,1)
(0,44,1)
(47,0,1)
(38,22,1)
(45,26,1)
(56,41,1)
(0,7,1)
(7,19,1)
(16,53,1)
(15,16,1)
(48,26,1)
(34,46,1)
(27,45,1)
(6,17,1)
(34,7,1)
(31,4,1)
(46,23,1)
(33,18,1)
(35,11,1)
(54,49,1)
(22,15,1)
(14,12,1)
(10,20,1)
(31,51,1)
(49,33,1)
(52,19,1)
(47,10,1)
(44,34,1)
(21,36,1)
(23,7,1)
(10,19,1)
(11,43,1)
(48,26,2)
(36,9,2)
(35,15,2)
(44,10,2)
(32,15,2)
(10,15,2)
(24,15,2)
(45,15,2)
(32,35,2)
(6,15,2)
(7,19,2)
(13,26,2)
(56,41,2)
(46,10,2)
(49,33,2)
(48,15,2)
(13,15,2)
(54,49,2)
(7,10,2)
(22,15,2)
(11,15,2)
(27,15,2)
(9,26,2)
(4,15,2)
(20,15,2)
(4,32,2)
(40,15,2)
(38,15,2)
(31,4,2)
(4,26,2)
(26,15,2)
(56,54,2)
(21,15,2)
(23,10,2)
(55,9,2)
(42,9,2)
(52,15,2)
(19,15,2)
(48,7,2)
(33,15,2)
(34,10,2)
(31,15,2)
(31,51,2)
(26,56,2)
(36,55,2)
(9,15,2)
(17,15,2)
(56,15,2)
(43,15,2)
(19,31,2)
(47,15,2)
(49,15,2)
(45,26,2)
(34,7,2)
(14,10,2)
(0,10,2)
(54,15,2)
(12,10,2)
(0,7,2)
(18,15,2)
(50,15,2)
(10,19,2)
-----------------------------------
(0,printLine(data)
(1,if (tmpData != NULL)
(2,tmpData)
(3,if (data == NULL)
(4,realloc(data, (130000)
(5,)
(6,data)
(7,data = tmpData)
(8,data)
(9,data == NULL)
(10,tmpData != NULL)
(11,char)
(12,data)
(13,printLine(data)
(14,tmpData)
(15,globalFive==5)
(16,5)
(17,tmpData)
(18,char)
(19,tmpData = (char *)
(20,NULL)
(21,data)
(22,data)
(23,data)
(24,NULL)
(25,)
(26,* data = (char *)
(27,data)
(28,if(globalFive==5)
(29,)
(30,)
(31,(char *)
(32,(130000)
(33,sizeof(char)
(34,strcpy(data, "New String")
(35,sizeof(char)
(36,exit(-1)
(37,)
(38,100)
(39,RET)
(40,data)
(41,char *)
(42,1)
(43,130000)
(44,data)
(45,strcpy(data, "A String")
(46,"New String")
(47,data)
(48,free(data)
(49,100*sizeof(char)
(50,"A String")
(51,char *)
(52,tmpData)
(53,globalFive)
(54,malloc(100*sizeof(char)
(55,-1)
(56,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^