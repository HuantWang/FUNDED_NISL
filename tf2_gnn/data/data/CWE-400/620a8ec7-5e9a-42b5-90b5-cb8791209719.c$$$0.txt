-----label-----
1
-----code-----
int config_parse_unit_path_printf(
                const char *unit,
                const char *filename,
                unsigned line,
                const char *section,
                unsigned section_line,
                const char *lvalue,
                int ltype,
                const char *rvalue,
                void *data,
                void *userdata) {

        _cleanup_free_ char *k = NULL;
        Unit *u = userdata;
        int r;
        bool fatal = ltype;

        assert(filename);
        assert(lvalue);
        assert(rvalue);
        assert(u);

        r = unit_full_printf(u, rvalue, &k);
        if (r < 0) {
                log_syntax(unit, LOG_ERR, filename, line, r,
                           "Failed to resolve unit specifiers on %s%s: %m",
                           fatal ? "" : ", ignoring", rvalue);
                return fatal ? -ENOEXEC : 0;
        }

        return config_parse_path(unit, filename, line, section, section_line, lvalue, ltype, k, data, userdata);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
3,13
3,14
5,6
5,7
7,8
7,9
10,11
10,12
12,13
12,14
15,16
15,17
17,18
19,20
19,21
21,22
21,23
24,25
24,26
26,27
28,29
28,30
30,31
30,32
33,34
33,35
35,36
37,38
37,39
39,40
39,41
42,43
42,44
44,45
44,46
47,48
47,49
49,50
49,51
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
52,64
52,65
53,54
54,55
56,57
57,58
58,59
58,60
60,61
60,62
60,63
63,64
64,65
66,67
67,68
67,69
68,69
70,71
70,72
70,73
73,74
74,75
76,77
77,78
77,79
79,80
81,82
82,83
82,84
84,85
84,86
86,87
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
117,119
117,120
117,121
118,119
120,121
122,123
124,125
125,126
127,128
127,129
128,129
128,130
129,130
132,133
132,134
133,134
134,135
134,136
134,137
134,138
134,139
134,140
134,141
134,142
134,143
135,136
137,138
139,140
141,142
143,144
145,146
148,149
148,150
148,151
149,150
153,154
155,156
156,157
156,158
156,159
157,158
159,160
160,161
163,164
164,165
164,166
164,167
164,168
164,169
164,170
164,171
164,172
164,173
164,174
164,175
165,166
167,168
169,170
171,172
173,174
175,176
177,178
179,180
181,182
183,184
185,186
-----nextToken-----
2,4,6,8,9,11,13,14,16,18,20,22,23,25,27,29,31,32,34,36,38,40,41,43,45,46,48,50,51,55,59,61,62,65,69,71,72,75,78,80,83,85,88,92,94,98,100,104,106,110,112,116,119,121,123,126,130,131,136,138,140,142,144,146,147,150,151,152,154,158,161,162,166,168,170,172,174,176,178,180,182,184,186
-----computeFrom-----
114,115
114,116
128,129
128,130
-----guardedBy-----
130,146
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;IdExpression;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ConditionalExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ReturnStatement;ConditionalExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
int config_parse_unit_path_printf(                const char *unit,                const char *filename,                unsigned line,                const char *section,                unsigned section_line,                const char *lvalue,                int ltype,                const char *rvalue,                void *data,                void *userdata) {        _cleanup_free_ char *k = NULL;        Unit *u = userdata;        int r;        bool fatal = ltype;        assert(filename);        assert(lvalue);        assert(rvalue);        assert(u);        r = unit_full_printf(u, rvalue, &k);        if (r < 0) {                log_syntax(unit, LOG_ERR, filename, line, r,                           "Failed to resolve unit specifiers on %s%s: %m",                           fatal ? "" : ", ignoring", rvalue);                return fatal ? -ENOEXEC : 0;        }        return config_parse_path(unit, filename, line, section, section_line, lvalue, ltype, k, data, userdata);}
int
config_parse_unit_path_printf(                const char *unit,                const char *filename,                unsigned line,                const char *section,                unsigned section_line,                const char *lvalue,                int ltype,                const char *rvalue,                void *data,                void *userdata)
config_parse_unit_path_printf
const char *unit
const char
*unit
*
unit
const char *filename
const char
*filename
*
filename
unsigned line
unsigned
line
line
const char *section
const char
*section
*
section
unsigned section_line
unsigned
section_line
section_line
const char *lvalue
const char
*lvalue
*
lvalue
int ltype
int
ltype
ltype
const char *rvalue
const char
*rvalue
*
rvalue
void *data
void
*data
*
data
void *userdata
void
*userdata
*
userdata
{        _cleanup_free_ char *k = NULL;        Unit *u = userdata;        int r;        bool fatal = ltype;        assert(filename);        assert(lvalue);        assert(rvalue);        assert(u);        r = unit_full_printf(u, rvalue, &k);        if (r < 0) {                log_syntax(unit, LOG_ERR, filename, line, r,                           "Failed to resolve unit specifiers on %s%s: %m",                           fatal ? "" : ", ignoring", rvalue);                return fatal ? -ENOEXEC : 0;        }        return config_parse_path(unit, filename, line, section, section_line, lvalue, ltype, k, data, userdata);}
_cleanup_free_
_cleanup_free_
_cleanup_free_
_
char *k = NULL;
char *k = NULL;
char
*k = NULL
*
k
= NULL
NULL
NULL
Unit *u = userdata;
Unit *u = userdata;
Unit
Unit
*u = userdata
*
u
= userdata
userdata
userdata
int r;
int r;
int
r
r
bool fatal = ltype;
bool fatal = ltype;
bool
fatal = ltype
fatal
= ltype
ltype
ltype
assert(filename);
assert(filename)
assert
assert
filename
filename
assert(lvalue);
assert(lvalue)
assert
assert
lvalue
lvalue
assert(rvalue);
assert(rvalue)
assert
assert
rvalue
rvalue
assert(u);
assert(u)
assert
assert
u
u
r = unit_full_printf(u, rvalue, &k);
r = unit_full_printf(u, rvalue, &k)
r
r
unit_full_printf(u, rvalue, &k)
unit_full_printf
unit_full_printf
u
u
rvalue
rvalue
&k
k
k
if (r < 0) {                log_syntax(unit, LOG_ERR, filename, line, r,                           "Failed to resolve unit specifiers on %s%s: %m",                           fatal ? "" : ", ignoring", rvalue);                return fatal ? -ENOEXEC : 0;        }
r < 0
r
r
0
{                log_syntax(unit, LOG_ERR, filename, line, r,                           "Failed to resolve unit specifiers on %s%s: %m",                           fatal ? "" : ", ignoring", rvalue);                return fatal ? -ENOEXEC : 0;        }
log_syntax(unit, LOG_ERR, filename, line, r,                           "Failed to resolve unit specifiers on %s%s: %m",                           fatal ? "" : ", ignoring", rvalue);
log_syntax(unit, LOG_ERR, filename, line, r,                           "Failed to resolve unit specifiers on %s%s: %m",                           fatal ? "" : ", ignoring", rvalue)
log_syntax
log_syntax
unit
unit
LOG_ERR
LOG_ERR
filename
filename
line
line
r
r
"Failed to resolve unit specifiers on %s%s: %m"
fatal ? "" : ", ignoring"
fatal
fatal
""
", ignoring"
rvalue
rvalue
return fatal ? -ENOEXEC : 0;
fatal ? -ENOEXEC : 0
fatal
fatal
-ENOEXEC
ENOEXEC
ENOEXEC
0
return config_parse_path(unit, filename, line, section, section_line, lvalue, ltype, k, data, userdata);
config_parse_path(unit, filename, line, section, section_line, lvalue, ltype, k, data, userdata)
config_parse_path
config_parse_path
unit
unit
filename
filename
line
line
section
section
section_line
section_line
lvalue
lvalue
ltype
ltype
k
k
data
data
userdata
userdata
-----joern-----
(13,66,0)
(14,45,0)
(11,13,0)
(30,42,0)
(34,42,0)
(13,61,0)
(43,1,0)
(13,1,0)
(43,62,0)
(16,55,0)
(52,25,0)
(73,41,0)
(42,34,0)
(24,62,0)
(25,58,0)
(13,46,0)
(42,9,0)
(10,62,0)
(29,32,0)
(50,34,0)
(13,3,0)
(22,13,0)
(63,28,0)
(10,28,0)
(0,62,0)
(40,13,0)
(20,62,0)
(42,58,0)
(47,62,0)
(49,62,0)
(13,39,0)
(13,38,0)
(59,13,0)
(26,42,0)
(60,45,0)
(37,42,0)
(13,17,0)
(8,13,0)
(45,32,0)
(15,34,0)
(7,73,0)
(51,62,0)
(45,62,0)
(35,62,0)
(32,28,0)
(4,16,0)
(16,43,0)
(12,13,0)
(65,16,0)
(32,41,0)
(33,13,0)
(64,19,0)
(70,43,0)
(32,45,0)
(47,54,0)
(42,45,0)
(6,13,0)
(13,9,0)
(38,62,0)
(28,39,0)
(48,38,0)
(2,47,0)
(5,42,0)
(52,49,0)
(18,32,0)
(21,13,0)
(31,60,0)
(72,42,0)
(51,66,0)
(13,49,0)
(16,25,0)
(27,13,0)
(42,17,0)
(19,32,0)
(34,43,0)
(28,62,0)
(55,16,0)
(32,19,0)
(36,42,0)
(69,43,0)
(53,28,0)
(74,62,0)
(57,38,0)
(42,41,0)
(56,42,0)
(19,38,0)
(42,54,0)
(67,34,0)
(44,55,0)
(23,60,0)
(13,54,0)
(71,10,0)
(68,51,0)
(73,62,0)
(42,9,1)
(32,41,1)
(69,28,1)
(45,32,1)
(59,40,1)
(30,5,1)
(47,54,1)
(26,72,1)
(13,17,1)
(44,4,1)
(29,14,1)
(10,71,1)
(16,65,1)
(5,60,1)
(19,38,1)
(64,18,1)
(13,66,1)
(40,21,1)
(13,38,1)
(51,66,1)
(34,67,1)
(13,46,1)
(36,30,1)
(6,22,1)
(15,26,1)
(42,41,1)
(67,15,1)
(72,37,1)
(37,36,1)
(38,48,1)
(52,49,1)
(21,6,1)
(7,51,1)
(71,73,1)
(34,50,1)
(10,28,1)
(27,60,1)
(56,34,1)
(13,3,1)
(63,38,1)
(13,12,1)
(34,43,1)
(16,55,1)
(4,42,1)
(55,44,1)
(68,47,1)
(13,61,1)
(52,25,1)
(70,69,1)
(23,31,1)
(73,7,1)
(32,28,1)
(60,45,1)
(60,23,1)
(42,54,1)
(22,8,1)
(13,9,1)
(19,64,1)
(2,43,1)
(65,4,1)
(47,2,1)
(51,68,1)
(13,54,1)
(48,57,1)
(11,59,1)
(42,17,1)
(33,11,1)
(53,63,1)
(31,45,1)
(25,16,1)
(8,27,1)
(32,19,1)
(42,45,1)
(49,13,1)
(28,53,1)
(42,34,1)
(73,41,1)
(18,29,1)
(42,56,1)
(50,15,1)
(16,43,1)
(12,33,1)
(43,1,1)
(13,39,1)
(28,39,1)
(13,1,1)
(14,10,1)
(43,70,1)
(65,4,2)
(21,60,2)
(72,60,2)
(42,34,2)
(50,15,2)
(32,19,2)
(19,38,2)
(13,66,2)
(49,60,2)
(42,60,2)
(13,9,2)
(22,60,2)
(13,54,2)
(4,60,2)
(11,60,2)
(13,38,2)
(5,60,2)
(73,41,2)
(28,39,2)
(34,60,2)
(43,1,2)
(13,3,2)
(12,60,2)
(16,60,2)
(27,60,2)
(42,17,2)
(10,28,2)
(13,1,2)
(30,60,2)
(13,60,2)
(15,60,2)
(34,43,2)
(59,60,2)
(37,60,2)
(25,60,2)
(26,60,2)
(13,17,2)
(8,60,2)
(32,41,2)
(42,54,2)
(40,60,2)
(52,49,2)
(60,45,2)
(32,28,2)
(47,54,2)
(42,41,2)
(16,43,2)
(6,60,2)
(16,55,2)
(52,25,2)
(13,61,2)
(33,60,2)
(36,60,2)
(42,45,2)
(45,32,2)
(42,9,2)
(55,4,2)
(56,60,2)
(51,66,2)
(67,15,2)
(13,39,2)
(44,4,2)
(13,46,2)
-----------------------------------
(0,fatal)
(1,int ltype)
(2,filename)
(3,void *data)
(4,fatal)
(5,unit)
(6,section)
(7,rvalue)
(8,filename)
(9,unsigned line)
(10,assert(u)
(11,k)
(12,userdata)
(13,config_parse_path(unit, filename, line, section, section_line, lvalue, ltype, k, data, userdata)
(14,r)
(15,fatal)
(16,fatal ? -ENOEXEC : 0)
(17,const char *unit)
(18,rvalue)
(19,&k)
(20,r)
(21,section_line)
(22,line)
(23,0)
(24,k)
(25,return fatal ? -ENOEXEC : 0;)
(26,"Failed to resolve unit specifiers on %s%s: %m")
(27,unit)
(28,*u = userdata)
(29,u)
(30,LOG_ERR)
(31,r)
(32,unit_full_printf(u, rvalue, &k)
(33,data)
(34,fatal ? "" : ", ignoring")
(35,u)
(36,filename)
(37,line)
(38,*k = NULL)
(39,void *userdata)
(40,lvalue)
(41,const char *rvalue)
(42,log_syntax(unit, LOG_ERR, filename, line, r,\n\\n                           "Failed to resolve unit specifiers on %s%s: %m",\n\\n                           fatal ? "" : ", ignoring", rvalue)
(43,fatal = ltype)
(44,ENOEXEC)
(45,r = unit_full_printf(u, rvalue, &k)
(46,const char *section)
(47,assert(filename)
(48,NULL)
(49,return config_parse_path(unit, filename, line, section, section_line, lvalue, ltype, k, data, userdata)
(50,", ignoring")
(51,assert(lvalue)
(52,RET)
(53,userdata)
(54,const char *filename)
(55,-ENOEXEC)
(56,rvalue)
(57,k)
(58,)
(59,ltype)
(60,r < 0)
(61,unsigned section_line)
(62,)
(63,u)
(64,k)
(65,0)
(66,const char *lvalue)
(67,"")
(68,lvalue)
(69,fatal)
(70,ltype)
(71,u)
(72,r)
(73,assert(rvalue)
(74,if (r < 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^