-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_TRUE)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(STATIC_CONST_TRUE)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
48,49
48,50
49,50
49,51
50,51
53,54
55,56
56,57
58,59
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,14,16,19,24,25,28,34,36,38,43,44,47,51,52,54,57,62,63
-----computeFrom-----
12,13
12,14
22,23
22,24
41,42
41,43
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(8,34,0)
(1,9,0)
(28,13,0)
(31,9,0)
(13,18,0)
(9,16,0)
(9,4,0)
(9,13,0)
(13,28,0)
(15,4,0)
(5,25,0)
(3,18,0)
(33,13,0)
(21,8,0)
(17,5,0)
(23,5,0)
(7,4,0)
(32,16,0)
(27,18,0)
(4,22,0)
(25,29,0)
(16,30,0)
(19,30,0)
(16,9,0)
(14,25,0)
(9,31,0)
(2,28,0)
(20,19,0)
(26,30,0)
(24,18,0)
(11,25,0)
(0,30,0)
(15,12,1)
(9,4,1)
(19,30,1)
(28,2,1)
(32,30,1)
(21,16,1)
(8,21,1)
(1,32,1)
(17,6,1)
(6,4,1)
(9,31,1)
(0,5,1)
(32,19,1)
(9,13,1)
(16,9,1)
(6,12,1)
(4,7,1)
(20,8,1)
(13,28,1)
(10,6,1)
(5,23,1)
(7,15,1)
(16,30,1)
(9,1,1)
(2,33,1)
(30,26,1)
(26,0,1)
(12,13,1)
(23,17,1)
(19,20,1)
(10,16,1)
(16,9,2)
(32,6,2)
(9,31,2)
(30,6,2)
(16,16,2)
(19,16,2)
(1,16,2)
(23,6,2)
(19,30,2)
(4,12,2)
(9,16,2)
(16,30,2)
(9,13,2)
(32,16,2)
(8,16,2)
(1,6,2)
(16,6,2)
(9,6,2)
(20,16,2)
(9,4,2)
(26,6,2)
(5,6,2)
(0,6,2)
(13,28,2)
(15,12,2)
(17,6,2)
(21,16,2)
(7,12,2)
-----------------------------------
(0,i)
(1,count)
(2,1)
(3,if(STATIC_CONST_TRUE)
(4,count = 20)
(5,i = 0)
(6,STATIC_CONST_TRUE)
(7,20)
(8,printLine("Hello")
(9,(size_t)
(10,RET)
(11,i)
(12,STATIC_CONST_TRUE)
(13,count = -1)
(14,for (i = 0; i < (size_t)
(15,count)
(16,i < (size_t)
(17,i)
(18,)
(19,i++)
(20,i)
(21,"Hello")
(22,)
(23,0)
(24,count)
(25,)
(26,0)
(27,if(STATIC_CONST_TRUE)
(28,-1)
(29,)
(30,i = 0)
(31,size_t)
(32,i)
(33,count)
(34,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^