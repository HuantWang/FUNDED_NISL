-----label-----
1
-----code-----
static void
test_protover_vote(void *arg)
{
  (void) arg;

  smartlist_t *lst = smartlist_new();
  char *result = protover_compute_vote(lst, 1);

  tt_str_op(result, OP_EQ, "");
  tor_free(result);

  smartlist_add(lst, (void*) "Foo=1-10,500 Bar=1,3-7,8");
  result = protover_compute_vote(lst, 1);
  tt_str_op(result, OP_EQ, "Bar=1,3-8 Foo=1-10,500");
  tor_free(result);

  smartlist_add(lst, (void*) "Quux=123-456,78 Bar=2-6,8 Foo=9");
  result = protover_compute_vote(lst, 1);
  tt_str_op(result, OP_EQ, "Bar=1-8 Foo=1-10,500 Quux=78,123-456");
  tor_free(result);

  result = protover_compute_vote(lst, 2);
  tt_str_op(result, OP_EQ, "Bar=3-6,8 Foo=9");
  tor_free(result);

  /* High threshold */
  result = protover_compute_vote(lst, 3);
  tt_str_op(result, OP_EQ, "");
  tor_free(result);

  /* Bad votes: the result must be empty */
  smartlist_clear(lst);
  smartlist_add(lst, (void*) "Faux=10-5");
  result = protover_compute_vote(lst, 1);
  tt_str_op(result, OP_EQ, "");
  tor_free(result);

  /* This fails, since "-0" is not valid. */
  smartlist_clear(lst);
  smartlist_add(lst, (void*) "Faux=-0");
  result = protover_compute_vote(lst, 1);
  tt_str_op(result, OP_EQ, "");
  tor_free(result);

  /* Vote large protover lists that are just below the threshold */

  /* Just below the threshold: Rust */
  smartlist_clear(lst);
  smartlist_add(lst, (void*) "Sleen=1-500");
  result = protover_compute_vote(lst, 1);
  tt_str_op(result, OP_EQ, "Sleen=1-500");
  tor_free(result);

  /* Just below the threshold: C */
  smartlist_clear(lst);
  smartlist_add(lst, (void*) "Sleen=1-65536");
  result = protover_compute_vote(lst, 1);
  tt_str_op(result, OP_EQ, "Sleen=1-65536");
  tor_free(result);

  /* Large protover lists that exceed the threshold */

  /* By adding two votes, C allows us to exceed the limit */
  smartlist_add(lst, (void*) "Sleen=1-65536");
  smartlist_add(lst, (void*) "Sleen=100000");
  result = protover_compute_vote(lst, 1);
  tt_str_op(result, OP_EQ, "Sleen=1-65536,100000");
  tor_free(result);

  /* Large integers */
  smartlist_clear(lst);
  smartlist_add(lst, (void*) "Sleen=4294967294");
  result = protover_compute_vote(lst, 1);
  tt_str_op(result, OP_EQ, "Sleen=4294967294");
  tor_free(result);

  /* This parses, but fails at the vote stage */
  smartlist_clear(lst);
  smartlist_add(lst, (void*) "Sleen=4294967295");
  result = protover_compute_vote(lst, 1);
  tt_str_op(result, OP_EQ, "");
  tor_free(result);

  smartlist_clear(lst);
  smartlist_add(lst, (void*) "Sleen=4294967296");
  result = protover_compute_vote(lst, 1);
  tt_str_op(result, OP_EQ, "");
  tor_free(result);

  /* Protocol name too long */
  smartlist_clear(lst);
  smartlist_add(lst, (void*) "DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  result = protover_compute_vote(lst, 1);
  tt_str_op(result, OP_EQ, "");
  tor_free(result);

 done:
  tor_free(result);
  smartlist_free(lst);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
10,21
10,22
10,23
10,24
10,25
10,26
10,27
10,28
10,29
10,30
10,31
10,32
10,33
10,34
10,35
10,36
10,37
10,38
10,39
10,40
10,41
10,42
10,43
10,44
10,45
10,46
10,47
10,48
10,49
10,50
10,51
10,52
10,53
10,54
10,55
10,56
10,57
10,58
10,59
10,60
10,61
10,62
10,63
10,64
10,65
10,66
10,67
10,68
10,69
10,70
10,71
10,72
10,73
10,74
10,75
10,76
11,12
12,13
12,14
13,14
13,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
27,28
29,30
30,31
30,32
32,33
32,34
32,35
35,36
36,37
36,38
36,39
37,38
39,40
42,43
43,44
43,45
43,46
43,47
44,45
46,47
48,49
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
61,62
63,64
63,65
64,65
64,66
66,67
69,70
70,71
70,72
71,72
73,74
73,75
73,76
74,75
76,77
79,80
80,81
80,82
80,83
80,84
81,82
83,84
85,86
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
95,98
96,97
98,99
100,101
100,102
101,102
101,103
103,104
106,107
107,108
107,109
108,109
110,111
110,112
110,113
111,112
113,114
116,117
117,118
117,119
117,120
117,121
118,119
120,121
122,123
125,126
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
135,136
135,137
135,138
136,137
138,139
141,142
142,143
142,144
142,145
142,146
143,144
145,146
147,148
150,151
151,152
151,153
152,153
154,155
156,157
157,158
157,159
158,159
160,161
160,162
160,163
161,162
163,164
166,167
167,168
167,169
167,170
167,171
168,169
170,171
172,173
175,176
176,177
176,178
177,178
179,180
181,182
182,183
182,184
183,184
185,186
187,188
188,189
188,190
188,191
189,190
191,192
193,194
193,195
194,195
194,196
196,197
199,200
200,201
200,202
201,202
203,204
203,205
203,206
204,205
206,207
209,210
210,211
210,212
210,213
210,214
211,212
213,214
215,216
218,219
219,220
219,221
220,221
222,223
224,225
225,226
225,227
226,227
228,229
230,231
231,232
231,233
231,234
232,233
234,235
236,237
236,238
237,238
237,239
239,240
242,243
243,244
243,245
244,245
246,247
246,248
246,249
247,248
249,250
252,253
253,254
253,255
253,256
253,257
254,255
256,257
258,259
261,262
262,263
262,264
263,264
265,266
267,268
268,269
268,270
269,270
271,272
273,274
274,275
274,276
274,277
275,276
277,278
279,280
279,281
280,281
280,282
282,283
285,286
286,287
286,288
287,288
289,290
289,291
289,292
290,291
292,293
295,296
296,297
296,298
296,299
296,300
297,298
299,300
301,302
304,305
305,306
305,307
306,307
308,309
310,311
311,312
311,313
312,313
314,315
316,317
317,318
317,319
317,320
318,319
320,321
322,323
322,324
323,324
323,325
325,326
328,329
329,330
329,331
330,331
332,333
332,334
332,335
333,334
335,336
338,339
339,340
339,341
339,342
339,343
340,341
342,343
344,345
347,348
348,349
348,350
349,350
351,352
353,354
354,355
354,356
354,357
355,356
357,358
359,360
359,361
360,361
360,362
362,363
365,366
366,367
366,368
366,369
367,368
369,370
371,372
371,373
372,373
372,374
374,375
377,378
378,379
378,380
379,380
381,382
381,383
381,384
382,383
384,385
387,388
388,389
388,390
388,391
388,392
389,390
391,392
393,394
396,397
397,398
397,399
398,399
400,401
402,403
403,404
403,405
404,405
406,407
408,409
409,410
409,411
409,412
410,411
412,413
414,415
414,416
415,416
415,417
417,418
420,421
421,422
421,423
422,423
424,425
424,426
424,427
425,426
427,428
430,431
431,432
431,433
431,434
431,435
432,433
434,435
436,437
439,440
440,441
440,442
441,442
443,444
445,446
446,447
446,448
447,448
449,450
451,452
452,453
452,454
452,455
453,454
455,456
457,458
457,459
458,459
458,460
460,461
463,464
464,465
464,466
465,466
467,468
467,469
467,470
468,469
470,471
473,474
474,475
474,476
474,477
474,478
475,476
477,478
479,480
482,483
483,484
483,485
484,485
486,487
488,489
489,490
489,491
490,491
492,493
494,495
495,496
495,497
495,498
496,497
498,499
500,501
500,502
501,502
501,503
503,504
506,507
507,508
507,509
508,509
510,511
510,512
510,513
511,512
513,514
516,517
517,518
517,519
517,520
517,521
518,519
520,521
522,523
525,526
526,527
526,528
527,528
529,530
531,532
532,533
532,534
533,534
535,536
537,538
538,539
538,540
538,541
539,540
541,542
543,544
543,545
544,545
544,546
546,547
549,550
550,551
550,552
551,552
553,554
553,555
553,556
554,555
556,557
559,560
560,561
560,562
560,563
560,564
561,562
563,564
565,566
568,569
569,570
569,571
570,571
572,573
574,575
574,576
576,577
577,578
577,579
578,579
580,581
582,583
583,584
583,585
584,585
586,587
-----nextToken-----
2,4,6,8,9,14,15,17,21,23,24,28,31,33,34,38,40,41,45,47,49,50,54,56,60,62,65,67,68,72,75,77,78,82,84,86,87,91,93,97,99,102,104,105,109,112,114,115,119,121,123,124,128,130,134,137,139,140,144,146,148,149,153,155,159,162,164,165,169,171,173,174,178,180,184,186,190,192,195,197,198,202,205,207,208,212,214,216,217,221,223,227,229,233,235,238,240,241,245,248,250,251,255,257,259,260,264,266,270,272,276,278,281,283,284,288,291,293,294,298,300,302,303,307,309,313,315,319,321,324,326,327,331,334,336,337,341,343,345,346,350,352,356,358,361,363,364,368,370,373,375,376,380,383,385,386,390,392,394,395,399,401,405,407,411,413,416,418,419,423,426,428,429,433,435,437,438,442,444,448,450,454,456,459,461,462,466,469,471,472,476,478,480,481,485,487,491,493,497,499,502,504,505,509,512,514,515,519,521,523,524,528,530,534,536,540,542,545,547,548,552,555,557,558,562,564,566,567,571,573,575,579,581,585,587
-----computeFrom-----
70,71
70,72
107,108
107,109
132,133
132,134
157,158
157,159
200,201
200,202
243,244
243,245
286,287
286,288
329,330
329,331
378,379
378,380
421,422
421,423
464,465
464,466
507,508
507,509
550,551
550,552
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static voidtest_protover_vote(void *arg){  (void) arg;  smartlist_t *lst = smartlist_new();  char *result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result);  smartlist_add(lst, (void*) "Foo=1-10,500 Bar=1,3-7,8");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Bar=1,3-8 Foo=1-10,500");  tor_free(result);  smartlist_add(lst, (void*) "Quux=123-456,78 Bar=2-6,8 Foo=9");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Bar=1-8 Foo=1-10,500 Quux=78,123-456");  tor_free(result);  result = protover_compute_vote(lst, 2);  tt_str_op(result, OP_EQ, "Bar=3-6,8 Foo=9");  tor_free(result);  /* High threshold */  result = protover_compute_vote(lst, 3);  tt_str_op(result, OP_EQ, "");  tor_free(result);  /* Bad votes: the result must be empty */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Faux=10-5");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result);  /* This fails, since "-0" is not valid. */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Faux=-0");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result);  /* Vote large protover lists that are just below the threshold */  /* Just below the threshold: Rust */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Sleen=1-500");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Sleen=1-500");  tor_free(result);  /* Just below the threshold: C */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Sleen=1-65536");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Sleen=1-65536");  tor_free(result);  /* Large protover lists that exceed the threshold */  /* By adding two votes, C allows us to exceed the limit */  smartlist_add(lst, (void*) "Sleen=1-65536");  smartlist_add(lst, (void*) "Sleen=100000");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Sleen=1-65536,100000");  tor_free(result);  /* Large integers */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Sleen=4294967294");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Sleen=4294967294");  tor_free(result);  /* This parses, but fails at the vote stage */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Sleen=4294967295");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result);  smartlist_clear(lst);  smartlist_add(lst, (void*) "Sleen=4294967296");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result);  /* Protocol name too long */  smartlist_clear(lst);  smartlist_add(lst, (void*) "DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result); done:  tor_free(result);  smartlist_free(lst);}
static void
test_protover_vote(void *arg)
test_protover_vote
void *arg
void
*arg
*
arg
{  (void) arg;  smartlist_t *lst = smartlist_new();  char *result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result);  smartlist_add(lst, (void*) "Foo=1-10,500 Bar=1,3-7,8");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Bar=1,3-8 Foo=1-10,500");  tor_free(result);  smartlist_add(lst, (void*) "Quux=123-456,78 Bar=2-6,8 Foo=9");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Bar=1-8 Foo=1-10,500 Quux=78,123-456");  tor_free(result);  result = protover_compute_vote(lst, 2);  tt_str_op(result, OP_EQ, "Bar=3-6,8 Foo=9");  tor_free(result);  /* High threshold */  result = protover_compute_vote(lst, 3);  tt_str_op(result, OP_EQ, "");  tor_free(result);  /* Bad votes: the result must be empty */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Faux=10-5");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result);  /* This fails, since "-0" is not valid. */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Faux=-0");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result);  /* Vote large protover lists that are just below the threshold */  /* Just below the threshold: Rust */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Sleen=1-500");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Sleen=1-500");  tor_free(result);  /* Just below the threshold: C */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Sleen=1-65536");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Sleen=1-65536");  tor_free(result);  /* Large protover lists that exceed the threshold */  /* By adding two votes, C allows us to exceed the limit */  smartlist_add(lst, (void*) "Sleen=1-65536");  smartlist_add(lst, (void*) "Sleen=100000");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Sleen=1-65536,100000");  tor_free(result);  /* Large integers */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Sleen=4294967294");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "Sleen=4294967294");  tor_free(result);  /* This parses, but fails at the vote stage */  smartlist_clear(lst);  smartlist_add(lst, (void*) "Sleen=4294967295");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result);  smartlist_clear(lst);  smartlist_add(lst, (void*) "Sleen=4294967296");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result);  /* Protocol name too long */  smartlist_clear(lst);  smartlist_add(lst, (void*) "DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");  result = protover_compute_vote(lst, 1);  tt_str_op(result, OP_EQ, "");  tor_free(result); done:  tor_free(result);  smartlist_free(lst);}
(void) arg;
(void) arg
void
void

arg
arg
smartlist_t *lst = smartlist_new();
smartlist_t *lst = smartlist_new();
smartlist_t
smartlist_t
*lst = smartlist_new()
*
lst
= smartlist_new()
smartlist_new()
smartlist_new
smartlist_new
char *result = protover_compute_vote(lst, 1);
char *result = protover_compute_vote(lst, 1);
char
*result = protover_compute_vote(lst, 1)
*
result
= protover_compute_vote(lst, 1)
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "");
tt_str_op(result, OP_EQ, "")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
""
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_add(lst, (void*) "Foo=1-10,500 Bar=1,3-7,8");
smartlist_add(lst, (void*) "Foo=1-10,500 Bar=1,3-7,8")
smartlist_add
smartlist_add
lst
lst
(void*) "Foo=1-10,500 Bar=1,3-7,8"
void*
void
*
*
"Foo=1-10,500 Bar=1,3-7,8"
result = protover_compute_vote(lst, 1);
result = protover_compute_vote(lst, 1)
result
result
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "Bar=1,3-8 Foo=1-10,500");
tt_str_op(result, OP_EQ, "Bar=1,3-8 Foo=1-10,500")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
"Bar=1,3-8 Foo=1-10,500"
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_add(lst, (void*) "Quux=123-456,78 Bar=2-6,8 Foo=9");
smartlist_add(lst, (void*) "Quux=123-456,78 Bar=2-6,8 Foo=9")
smartlist_add
smartlist_add
lst
lst
(void*) "Quux=123-456,78 Bar=2-6,8 Foo=9"
void*
void
*
*
"Quux=123-456,78 Bar=2-6,8 Foo=9"
result = protover_compute_vote(lst, 1);
result = protover_compute_vote(lst, 1)
result
result
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "Bar=1-8 Foo=1-10,500 Quux=78,123-456");
tt_str_op(result, OP_EQ, "Bar=1-8 Foo=1-10,500 Quux=78,123-456")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
"Bar=1-8 Foo=1-10,500 Quux=78,123-456"
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
result = protover_compute_vote(lst, 2);
result = protover_compute_vote(lst, 2)
result
result
protover_compute_vote(lst, 2)
protover_compute_vote
protover_compute_vote
lst
lst
2
tt_str_op(result, OP_EQ, "Bar=3-6,8 Foo=9");
tt_str_op(result, OP_EQ, "Bar=3-6,8 Foo=9")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
"Bar=3-6,8 Foo=9"
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
result = protover_compute_vote(lst, 3);
result = protover_compute_vote(lst, 3)
result
result
protover_compute_vote(lst, 3)
protover_compute_vote
protover_compute_vote
lst
lst
3
tt_str_op(result, OP_EQ, "");
tt_str_op(result, OP_EQ, "")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
""
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_clear(lst);
smartlist_clear(lst)
smartlist_clear
smartlist_clear
lst
lst
smartlist_add(lst, (void*) "Faux=10-5");
smartlist_add(lst, (void*) "Faux=10-5")
smartlist_add
smartlist_add
lst
lst
(void*) "Faux=10-5"
void*
void
*
*
"Faux=10-5"
result = protover_compute_vote(lst, 1);
result = protover_compute_vote(lst, 1)
result
result
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "");
tt_str_op(result, OP_EQ, "")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
""
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_clear(lst);
smartlist_clear(lst)
smartlist_clear
smartlist_clear
lst
lst
smartlist_add(lst, (void*) "Faux=-0");
smartlist_add(lst, (void*) "Faux=-0")
smartlist_add
smartlist_add
lst
lst
(void*) "Faux=-0"
void*
void
*
*
"Faux=-0"
result = protover_compute_vote(lst, 1);
result = protover_compute_vote(lst, 1)
result
result
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "");
tt_str_op(result, OP_EQ, "")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
""
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_clear(lst);
smartlist_clear(lst)
smartlist_clear
smartlist_clear
lst
lst
smartlist_add(lst, (void*) "Sleen=1-500");
smartlist_add(lst, (void*) "Sleen=1-500")
smartlist_add
smartlist_add
lst
lst
(void*) "Sleen=1-500"
void*
void
*
*
"Sleen=1-500"
result = protover_compute_vote(lst, 1);
result = protover_compute_vote(lst, 1)
result
result
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "Sleen=1-500");
tt_str_op(result, OP_EQ, "Sleen=1-500")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
"Sleen=1-500"
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_clear(lst);
smartlist_clear(lst)
smartlist_clear
smartlist_clear
lst
lst
smartlist_add(lst, (void*) "Sleen=1-65536");
smartlist_add(lst, (void*) "Sleen=1-65536")
smartlist_add
smartlist_add
lst
lst
(void*) "Sleen=1-65536"
void*
void
*
*
"Sleen=1-65536"
result = protover_compute_vote(lst, 1);
result = protover_compute_vote(lst, 1)
result
result
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "Sleen=1-65536");
tt_str_op(result, OP_EQ, "Sleen=1-65536")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
"Sleen=1-65536"
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_add(lst, (void*) "Sleen=1-65536");
smartlist_add(lst, (void*) "Sleen=1-65536")
smartlist_add
smartlist_add
lst
lst
(void*) "Sleen=1-65536"
void*
void
*
*
"Sleen=1-65536"
smartlist_add(lst, (void*) "Sleen=100000");
smartlist_add(lst, (void*) "Sleen=100000")
smartlist_add
smartlist_add
lst
lst
(void*) "Sleen=100000"
void*
void
*
*
"Sleen=100000"
result = protover_compute_vote(lst, 1);
result = protover_compute_vote(lst, 1)
result
result
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "Sleen=1-65536,100000");
tt_str_op(result, OP_EQ, "Sleen=1-65536,100000")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
"Sleen=1-65536,100000"
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_clear(lst);
smartlist_clear(lst)
smartlist_clear
smartlist_clear
lst
lst
smartlist_add(lst, (void*) "Sleen=4294967294");
smartlist_add(lst, (void*) "Sleen=4294967294")
smartlist_add
smartlist_add
lst
lst
(void*) "Sleen=4294967294"
void*
void
*
*
"Sleen=4294967294"
result = protover_compute_vote(lst, 1);
result = protover_compute_vote(lst, 1)
result
result
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "Sleen=4294967294");
tt_str_op(result, OP_EQ, "Sleen=4294967294")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
"Sleen=4294967294"
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_clear(lst);
smartlist_clear(lst)
smartlist_clear
smartlist_clear
lst
lst
smartlist_add(lst, (void*) "Sleen=4294967295");
smartlist_add(lst, (void*) "Sleen=4294967295")
smartlist_add
smartlist_add
lst
lst
(void*) "Sleen=4294967295"
void*
void
*
*
"Sleen=4294967295"
result = protover_compute_vote(lst, 1);
result = protover_compute_vote(lst, 1)
result
result
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "");
tt_str_op(result, OP_EQ, "")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
""
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_clear(lst);
smartlist_clear(lst)
smartlist_clear
smartlist_clear
lst
lst
smartlist_add(lst, (void*) "Sleen=4294967296");
smartlist_add(lst, (void*) "Sleen=4294967296")
smartlist_add
smartlist_add
lst
lst
(void*) "Sleen=4294967296"
void*
void
*
*
"Sleen=4294967296"
result = protover_compute_vote(lst, 1);
result = protover_compute_vote(lst, 1)
result
result
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "");
tt_str_op(result, OP_EQ, "")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
""
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_clear(lst);
smartlist_clear(lst)
smartlist_clear
smartlist_clear
lst
lst
smartlist_add(lst, (void*) "DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
smartlist_add(lst, (void*) "DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
smartlist_add
smartlist_add
lst
lst
(void*) "DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
void*
void
*
*
"DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
result = protover_compute_vote(lst, 1);
result = protover_compute_vote(lst, 1)
result
result
protover_compute_vote(lst, 1)
protover_compute_vote
protover_compute_vote
lst
lst
1
tt_str_op(result, OP_EQ, "");
tt_str_op(result, OP_EQ, "")
tt_str_op
tt_str_op
result
result
OP_EQ
OP_EQ
""
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
done:  tor_free(result);
done
tor_free(result);
tor_free(result)
tor_free
tor_free
result
result
smartlist_free(lst);
smartlist_free(lst)
smartlist_free
smartlist_free
lst
lst
-----joern-----
(229,69,0)
(221,27,0)
(75,27,0)
(112,27,0)
(19,5,0)
(123,241,0)
(71,54,0)
(171,27,0)
(77,172,0)
(169,220,0)
(3,169,0)
(135,159,0)
(82,124,0)
(227,202,0)
(89,110,0)
(192,223,0)
(196,73,0)
(197,27,0)
(101,156,0)
(240,42,0)
(183,169,0)
(55,32,0)
(46,87,0)
(144,27,0)
(125,87,0)
(112,220,0)
(100,220,0)
(166,220,0)
(187,50,0)
(239,27,0)
(113,27,0)
(33,54,0)
(73,222,0)
(72,92,0)
(238,228,0)
(162,169,0)
(169,3,0)
(9,178,0)
(94,220,0)
(86,27,0)
(87,125,0)
(232,162,0)
(199,110,0)
(31,27,0)
(29,154,0)
(210,239,0)
(175,185,0)
(17,187,0)
(85,173,0)
(172,27,0)
(41,75,0)
(141,3,0)
(21,217,0)
(214,220,0)
(11,137,0)
(241,220,0)
(9,220,0)
(44,27,0)
(40,220,0)
(85,70,0)
(22,31,0)
(4,27,0)
(124,5,0)
(200,3,0)
(93,137,0)
(205,64,0)
(235,49,0)
(139,22,0)
(171,87,0)
(35,237,0)
(127,144,0)
(204,27,0)
(155,220,0)
(143,204,0)
(228,220,0)
(203,185,0)
(154,169,0)
(104,182,0)
(210,80,0)
(96,167,0)
(69,6,0)
(182,1,0)
(145,73,0)
(136,178,0)
(241,22,0)
(132,81,0)
(217,21,0)
(45,202,0)
(202,69,0)
(218,79,0)
(191,93,0)
(224,223,0)
(186,180,0)
(111,218,0)
(229,220,0)
(92,220,0)
(67,5,0)
(159,220,0)
(53,107,0)
(106,167,0)
(26,127,0)
(81,220,0)
(97,180,0)
(57,142,0)
(198,81,0)
(77,63,0)
(51,124,0)
(170,143,0)
(179,77,0)
(92,9,0)
(137,27,0)
(73,196,0)
(76,49,0)
(138,173,0)
(204,220,0)
(207,198,0)
(172,77,0)
(0,34,0)
(95,234,0)
(166,27,0)
(7,241,0)
(154,220,0)
(147,68,0)
(178,27,0)
(52,57,0)
(167,27,0)
(5,67,0)
(216,6,0)
(144,127,0)
(10,132,0)
(109,241,0)
(137,93,0)
(151,218,0)
(93,220,0)
(34,113,0)
(194,137,0)
(208,44,0)
(39,68,0)
(163,184,0)
(244,21,0)
(167,214,0)
(44,220,0)
(144,220,0)
(211,182,0)
(173,220,0)
(134,236,0)
(192,220,0)
(110,220,0)
(152,16,0)
(204,143,0)
(8,165,0)
(243,42,0)
(164,220,0)
(172,220,0)
(133,220,0)
(159,27,0)
(56,27,0)
(1,75,0)
(64,107,0)
(223,192,0)
(165,27,0)
(173,27,0)
(212,27,0)
(196,220,0)
(60,67,0)
(105,56,0)
(75,1,0)
(5,220,0)
(164,234,0)
(115,180,0)
(42,220,0)
(94,214,0)
(122,220,0)
(142,57,0)
(149,68,0)
(20,75,0)
(16,221,0)
(32,5,0)
(226,31,0)
(23,84,0)
(78,126,0)
(86,81,0)
(2,144,0)
(50,187,0)
(213,42,0)
(147,220,0)
(184,1,0)
(6,69,0)
(98,172,0)
(56,220,0)
(231,85,0)
(37,234,0)
(155,27,0)
(4,79,0)
(1,220,0)
(69,220,0)
(88,212,0)
(28,204,0)
(221,16,0)
(180,220,0)
(126,220,0)
(174,169,0)
(84,56,0)
(132,220,0)
(193,79,0)
(146,182,0)
(120,27,0)
(129,220,0)
(43,129,0)
(124,220,0)
(49,27,0)
(225,81,0)
(81,86,0)
(30,86,0)
(21,155,0)
(79,220,0)
(3,27,0)
(184,220,0)
(230,27,0)
(99,239,0)
(239,210,0)
(206,54,0)
(63,77,0)
(218,220,0)
(57,220,0)
(143,170,0)
(148,107,0)
(79,4,0)
(237,27,0)
(165,220,0)
(83,53,0)
(168,120,0)
(53,220,0)
(16,220,0)
(120,220,0)
(84,201,0)
(18,31,0)
(130,53,0)
(183,220,0)
(156,220,0)
(126,79,0)
(223,27,0)
(36,4,0)
(233,183,0)
(40,22,0)
(131,221,0)
(110,16,0)
(67,27,0)
(187,119,0)
(161,214,0)
(202,220,0)
(80,210,0)
(6,27,0)
(49,107,0)
(160,4,0)
(212,220,0)
(196,27,0)
(68,149,0)
(68,147,0)
(195,40,0)
(155,21,0)
(66,198,0)
(188,221,0)
(185,9,0)
(180,192,0)
(242,143,0)
(237,220,0)
(118,9,0)
(13,100,0)
(62,94,0)
(24,155,0)
(234,164,0)
(236,16,0)
(108,210,0)
(187,220,0)
(22,220,0)
(114,110,0)
(34,220,0)
(56,84,0)
(38,192,0)
(117,218,0)
(150,196,0)
(171,220,0)
(189,162,0)
(54,93,0)
(25,147,0)
(70,85,0)
(156,93,0)
(173,85,0)
(198,220,0)
(239,220,0)
(90,220,0)
(65,178,0)
(140,6,0)
(185,220,0)
(102,229,0)
(215,53,0)
(121,185,0)
(236,220,0)
(27,220,0)
(178,9,0)
(201,84,0)
(12,198,0)
(157,113,0)
(31,22,0)
(190,228,0)
(42,214,0)
(64,220,0)
(214,167,0)
(245,223,0)
(90,34,0)
(59,124,0)
(27,197,0)
(127,26,0)
(153,162,0)
(103,228,0)
(54,220,0)
(107,220,0)
(209,142,0)
(228,34,0)
(219,166,0)
(61,127,0)
(158,113,0)
(234,95,0)
(48,202,0)
(147,27,0)
(128,90,0)
(74,220,0)
(113,34,0)
(58,112,0)
(100,192,0)
(116,164,0)
(177,86,0)
(47,1,0)
(14,142,0)
(182,220,0)
(162,220,0)
(57,27,0)
(129,27,0)
(142,14,0)
(87,171,0)
(32,220,0)
(164,27,0)
(91,67,0)
(181,69,0)
(176,171,0)
(222,73,0)
(107,49,0)
(160,193,1)
(156,101,1)
(77,63,1)
(200,174,1)
(168,132,1)
(234,37,1)
(219,154,1)
(69,6,1)
(130,215,1)
(87,46,1)
(235,148,1)
(42,213,1)
(129,27,1)
(103,238,1)
(19,57,1)
(18,139,1)
(151,111,1)
(15,166,1)
(199,89,1)
(186,192,1)
(94,62,1)
(30,177,1)
(205,53,1)
(97,115,1)
(110,16,1)
(118,27,1)
(22,31,1)
(83,130,1)
(113,27,1)
(244,24,1)
(21,217,1)
(48,45,1)
(128,228,1)
(135,100,1)
(166,219,1)
(227,48,1)
(179,98,1)
(211,104,1)
(60,19,1)
(28,147,1)
(99,165,1)
(27,197,1)
(38,204,1)
(203,9,1)
(185,9,1)
(44,27,1)
(66,81,1)
(239,210,1)
(142,209,1)
(152,164,1)
(226,18,1)
(237,35,1)
(198,12,1)
(147,68,1)
(98,120,1)
(101,54,1)
(228,190,1)
(102,202,1)
(114,199,1)
(181,155,1)
(61,2,1)
(187,119,1)
(218,151,1)
(238,34,1)
(81,86,1)
(68,39,1)
(89,16,1)
(73,145,1)
(137,27,1)
(187,17,1)
(32,55,1)
(218,79,1)
(176,184,1)
(143,170,1)
(184,163,1)
(155,27,1)
(82,5,1)
(37,116,1)
(180,192,1)
(245,224,1)
(108,99,1)
(36,160,1)
(156,93,1)
(204,143,1)
(175,203,1)
(72,185,1)
(107,49,1)
(204,27,1)
(157,158,1)
(184,1,1)
(198,81,1)
(84,201,1)
(54,93,1)
(44,208,1)
(131,152,1)
(24,212,1)
(75,41,1)
(240,243,1)
(93,137,1)
(178,27,1)
(145,150,1)
(35,32,1)
(31,27,1)
(11,191,1)
(126,78,1)
(10,198,1)
(123,109,1)
(75,27,1)
(140,216,1)
(92,72,1)
(150,237,1)
(120,168,1)
(86,30,1)
(147,27,1)
(6,140,1)
(49,76,1)
(132,10,1)
(241,123,1)
(20,47,1)
(124,59,1)
(67,27,1)
(106,96,1)
(43,229,1)
(187,50,1)
(191,196,1)
(172,77,1)
(221,27,1)
(142,14,1)
(215,107,1)
(144,127,1)
(192,223,1)
(241,22,1)
(242,28,1)
(56,84,1)
(161,239,1)
(159,27,1)
(146,1,1)
(180,97,1)
(174,144,1)
(182,211,1)
(52,159,1)
(223,245,1)
(171,87,1)
(132,81,1)
(57,142,1)
(47,56,1)
(236,16,1)
(163,182,1)
(34,113,1)
(51,82,1)
(206,71,1)
(54,33,1)
(78,218,1)
(237,27,1)
(210,80,1)
(173,27,1)
(6,27,1)
(86,27,1)
(189,153,1)
(137,194,1)
(230,187,1)
(39,25,1)
(239,27,1)
(84,23,1)
(76,235,1)
(158,0,1)
(120,27,1)
(234,95,1)
(136,118,1)
(49,27,1)
(212,88,1)
(53,107,1)
(164,27,1)
(13,180,1)
(178,65,1)
(53,83,1)
(165,8,1)
(79,4,1)
(229,102,1)
(139,171,1)
(65,136,1)
(112,27,1)
(5,67,1)
(33,206,1)
(57,27,1)
(165,27,1)
(96,161,1)
(202,69,1)
(197,230,1)
(231,138,1)
(210,108,1)
(73,222,1)
(171,27,1)
(67,91,1)
(12,207,1)
(183,169,1)
(182,1,1)
(64,205,1)
(188,131,1)
(164,234,1)
(236,134,1)
(225,90,1)
(62,42,1)
(42,214,1)
(207,66,1)
(229,69,1)
(216,181,1)
(228,34,1)
(77,179,1)
(55,124,1)
(68,149,1)
(159,135,1)
(185,121,1)
(23,105,1)
(233,162,1)
(196,73,1)
(177,225,1)
(208,236,1)
(40,195,1)
(104,146,1)
(113,157,1)
(115,186,1)
(9,178,1)
(85,231,1)
(183,233,1)
(59,51,1)
(202,227,1)
(100,13,1)
(124,5,1)
(166,27,1)
(4,36,1)
(1,75,1)
(127,61,1)
(194,11,1)
(155,21,1)
(92,9,1)
(143,242,1)
(90,34,1)
(153,232,1)
(16,221,1)
(0,40,1)
(212,27,1)
(116,112,1)
(112,58,1)
(117,79,1)
(40,22,1)
(105,92,1)
(4,27,1)
(109,7,1)
(154,169,1)
(126,79,1)
(169,3,1)
(3,27,1)
(224,38,1)
(173,85,1)
(196,27,1)
(167,27,1)
(127,26,1)
(172,27,1)
(213,240,1)
(90,128,1)
(167,106,1)
(25,94,1)
(7,22,1)
(8,126,1)
(138,44,1)
(243,214,1)
(94,214,1)
(71,93,1)
(91,60,1)
(141,200,1)
(110,114,1)
(223,27,1)
(29,183,1)
(85,70,1)
(134,110,1)
(100,192,1)
(129,43,1)
(87,125,1)
(88,156,1)
(56,27,1)
(64,107,1)
(162,189,1)
(214,167,1)
(154,29,1)
(195,241,1)
(111,117,1)
(221,188,1)
(41,20,1)
(121,175,1)
(58,64,1)
(190,103,1)
(45,69,1)
(162,169,1)
(144,27,1)
(31,226,1)
(32,5,1)
(209,52,1)
(21,244,1)
(2,129,1)
(3,141,1)
(232,169,1)
(193,173,1)
(148,172,1)
(46,176,1)
(142,14,2)
(21,217,2)
(187,50,2)
(172,77,2)
(57,27,2)
(110,16,2)
(107,49,2)
(223,27,2)
(228,34,2)
(67,27,2)
(198,81,2)
(6,27,2)
(34,113,2)
(22,31,2)
(169,3,2)
(237,27,2)
(143,170,2)
(212,27,2)
(79,4,2)
(56,27,2)
(27,197,2)
(9,178,2)
(93,137,2)
(172,27,2)
(57,142,2)
(202,69,2)
(84,201,2)
(86,27,2)
(187,119,2)
(167,27,2)
(32,5,2)
(56,84,2)
(54,93,2)
(92,9,2)
(81,86,2)
(5,67,2)
(164,234,2)
(166,27,2)
(3,27,2)
(87,125,2)
(229,69,2)
(196,27,2)
(164,27,2)
(127,26,2)
(53,107,2)
(144,127,2)
(90,34,2)
(132,81,2)
(204,27,2)
(69,6,2)
(218,79,2)
(236,16,2)
(234,95,2)
(178,27,2)
(241,22,2)
(239,210,2)
(144,27,2)
(155,27,2)
(68,149,2)
(173,85,2)
(16,221,2)
(94,214,2)
(221,27,2)
(165,27,2)
(120,27,2)
(126,79,2)
(129,27,2)
(214,167,2)
(77,63,2)
(147,68,2)
(100,192,2)
(147,27,2)
(185,9,2)
(124,5,2)
(137,27,2)
(184,1,2)
(31,27,2)
(154,169,2)
(73,222,2)
(156,93,2)
(162,169,2)
(112,27,2)
(155,21,2)
(1,75,2)
(173,27,2)
(182,1,2)
(204,143,2)
(171,87,2)
(75,27,2)
(49,27,2)
(4,27,2)
(113,27,2)
(64,107,2)
(42,214,2)
(239,27,2)
(196,73,2)
(85,70,2)
(40,22,2)
(183,169,2)
(44,27,2)
(180,192,2)
(171,27,2)
(192,223,2)
(210,80,2)
(159,27,2)
-----------------------------------
(0,result)
(1,result = protover_compute_vote(lst, 1)
(2,lst)
(3,protover_compute_vote(lst, 1)
(4,protover_compute_vote(lst, 1)
(5,result = protover_compute_vote(lst, 1)
(6,protover_compute_vote(lst, 1)
(7,result)
(8,lst)
(9,*result = protover_compute_vote(lst, 1)
(10,result)
(11,lst)
(12,"")
(13,result)
(14,void*)
(15,RET)
(16,result = protover_compute_vote(lst, 1)
(17,arg)
(18,lst)
(19,result)
(20,lst)
(21,(void*)
(22,result = protover_compute_vote(lst, 1)
(23,"Foo=1-10,500 Bar=1,3-7,8")
(24,lst)
(25,lst)
(26,void*)
(27,*lst = smartlist_new()
(28,lst)
(29,result)
(30,3)
(31,protover_compute_vote(lst, 1)
(32,tor_free(result)
(33,"")
(34,result = protover_compute_vote(lst, 2)
(35,lst)
(36,1)
(37,"Faux=-0")
(38,result)
(39,"Sleen=1-65536")
(40,tor_free(result)
(41,1)
(42,tt_str_op(result, OP_EQ, "Sleen=1-65536")
(43,lst)
(44,smartlist_clear(lst)
(45,result)
(46,"Quux=123-456,78 Bar=2-6,8 Foo=9")
(47,result)
(48,OP_EQ)
(49,protover_compute_vote(lst, 1)
(50,void)
(51,OP_EQ)
(52,lst)
(53,tt_str_op(result, OP_EQ, "")
(54,tt_str_op(result, OP_EQ, "")
(55,result)
(56,smartlist_add(lst, (void*)
(57,smartlist_add(lst, (void*)
(58,lst)
(59,"Sleen=4294967294")
(60,lst)
(61,"DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n\\n                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n\\n                           "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
(62,result)
(63,void*)
(64,tor_free(result)
(65,1)
(66,result)
(67,protover_compute_vote(lst, 1)
(68,(void*)
(69,result = protover_compute_vote(lst, 1)
(70,void*)
(71,result)
(72,result)
(73,(void*)
(74,done:)
(75,protover_compute_vote(lst, 1)
(76,1)
(77,(void*)
(78,result)
(79,result = protover_compute_vote(lst, 1)
(80,void*)
(81,result = protover_compute_vote(lst, 3)
(82,result)
(83,"")
(84,(void*)
(85,(void*)
(86,protover_compute_vote(lst, 3)
(87,(void*)
(88,lst)
(89,result)
(90,tor_free(result)
(91,1)
(92,tor_free(result)
(93,result = protover_compute_vote(lst, 1)
(94,tor_free(result)
(95,void*)
(96,lst)
(97,"Sleen=1-65536,100000")
(98,lst)
(99,lst)
(100,tor_free(result)
(101,result)
(102,result)
(103,OP_EQ)
(104,OP_EQ)
(105,lst)
(106,1)
(107,result = protover_compute_vote(lst, 1)
(108,"Sleen=1-65536")
(109,OP_EQ)
(110,tt_str_op(result, OP_EQ, "")
(111,OP_EQ)
(112,smartlist_clear(lst)
(113,protover_compute_vote(lst, 2)
(114,"")
(115,OP_EQ)
(116,lst)
(117,result)
(118,result)
(119,void *arg)
(120,smartlist_clear(lst)
(121,"")
(122,result)
(123,"Bar=1-8 Foo=1-10,500 Quux=78,123-456")
(124,tt_str_op(result, OP_EQ, "Sleen=4294967294")
(125,void*)
(126,tor_free(result)
(127,(void*)
(128,result)
(129,smartlist_clear(lst)
(130,OP_EQ)
(131,lst)
(132,tor_free(result)
(133,lst)
(134,result)
(135,lst)
(136,lst)
(137,protover_compute_vote(lst, 1)
(138,lst)
(139,result)
(140,1)
(141,1)
(142,(void*)
(143,(void*)
(144,smartlist_add(lst, (void*)
(145,"Sleen=4294967295")
(146,result)
(147,smartlist_add(lst, (void*)
(148,result)
(149,void*)
(150,lst)
(151,"Sleen=1-500")
(152,result)
(153,OP_EQ)
(154,tor_free(result)
(155,smartlist_add(lst, (void*)
(156,tor_free(result)
(157,2)
(158,lst)
(159,smartlist_clear(lst)
(160,lst)
(161,result)
(162,tt_str_op(result, OP_EQ, "")
(163,result)
(164,smartlist_add(lst, (void*)
(165,smartlist_clear(lst)
(166,smartlist_free(lst)
(167,protover_compute_vote(lst, 1)
(168,lst)
(169,result = protover_compute_vote(lst, 1)
(170,void*)
(171,smartlist_add(lst, (void*)
(172,smartlist_add(lst, (void*)
(173,smartlist_add(lst, (void*)
(174,result)
(175,OP_EQ)
(176,lst)
(177,lst)
(178,protover_compute_vote(lst, 1)
(179,"Faux=10-5")
(180,tt_str_op(result, OP_EQ, "Sleen=1-65536,100000")
(181,result)
(182,tt_str_op(result, OP_EQ, "Bar=1,3-8 Foo=1-10,500")
(183,tor_free(result)
(184,tor_free(result)
(185,tt_str_op(result, OP_EQ, "")
(186,result)
(187,(void)
(188,1)
(189,"")
(190,"Bar=3-6,8 Foo=9")
(191,result)
(192,result = protover_compute_vote(lst, 1)
(193,result)
(194,1)
(195,result)
(196,smartlist_add(lst, (void*)
(197,smartlist_new()
(198,tt_str_op(result, OP_EQ, "")
(199,OP_EQ)
(200,lst)
(201,void*)
(202,tt_str_op(result, OP_EQ, "")
(203,result)
(204,smartlist_add(lst, (void*)
(205,result)
(206,OP_EQ)
(207,OP_EQ)
(208,lst)
(209,"Sleen=4294967294")
(210,(void*)
(211,"Bar=1,3-8 Foo=1-10,500")
(212,smartlist_clear(lst)
(213,"Sleen=1-65536")
(214,result = protover_compute_vote(lst, 1)
(215,result)
(216,lst)
(217,void*)
(218,tt_str_op(result, OP_EQ, "Sleen=1-500")
(219,lst)
(220,)
(221,protover_compute_vote(lst, 1)
(222,void*)
(223,protover_compute_vote(lst, 1)
(224,lst)
(225,result)
(226,1)
(227,"")
(228,tt_str_op(result, OP_EQ, "Bar=3-6,8 Foo=9")
(229,tor_free(result)
(230,lst)
(231,"Sleen=1-500")
(232,result)
(233,result)
(234,(void*)
(235,lst)
(236,tor_free(result)
(237,smartlist_clear(lst)
(238,result)
(239,smartlist_add(lst, (void*)
(240,OP_EQ)
(241,tt_str_op(result, OP_EQ, "Bar=1-8 Foo=1-10,500 Quux=78,123-456")
(242,"Sleen=100000")
(243,result)
(244,"Sleen=4294967296")
(245,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^