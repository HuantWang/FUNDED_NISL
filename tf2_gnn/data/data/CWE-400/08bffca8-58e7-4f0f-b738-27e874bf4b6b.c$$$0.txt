-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    /* Initialize count */
    count = -1;
    while(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        break;
    }
    while(1)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
49,51
50,51
50,52
50,53
50,54
50,55
50,56
50,57
50,58
50,59
50,60
50,61
51,52
52,53
52,54
53,54
55,56
55,57
55,58
55,59
56,57
58,59
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
72,73
73,74
73,75
73,76
73,77
74,75
76,77
77,78
80,81
81,82
82,83
84,85
85,86
85,87
86,87
86,88
87,88
90,91
92,93
93,94
93,95
94,95
94,96
95,96
95,97
96,97
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
118,120
118,121
118,122
119,120
121,122
123,124
123,125
124,125
124,126
125,126
127,128
129,130
130,131
132,133
133,134
134,135
136,137
138,139
140,141
141,142
141,143
142,143
144,145
144,146
144,147
144,148
144,149
145,146
147,148
149,150
151,152
151,153
152,153
156,157
156,158
157,158
157,159
158,159
158,160
159,160
161,162
163,164
163,165
164,165
167,168
169,170
170,171
170,172
171,172
171,173
172,173
174,175
177,178
178,179
178,180
179,180
181,182
181,183
182,183
184,185
187,188
187,189
188,189
188,190
189,190
191,192
193,194
194,195
195,196
195,197
196,197
198,199
201,202
201,203
203,204
203,205
204,205
204,206
204,207
204,208
205,206
206,207
206,208
207,208
209,210
209,211
211,212
213,214
214,215
214,216
215,216
217,218
217,219
217,220
220,221
221,222
223,224
224,225
224,226
226,227
226,228
226,229
229,230
231,232
231,233
232,233
232,234
233,234
233,235
234,235
237,238
237,239
238,239
241,242
241,243
241,244
241,245
242,243
243,244
243,245
244,245
246,247
246,248
246,249
247,248
249,250
252,253
252,254
253,254
253,255
254,255
256,257
258,259
259,260
260,261
260,262
261,262
264,265
264,266
264,267
264,268
265,266
266,267
266,268
267,268
270,271
270,272
271,272
273,274
273,275
274,275
274,276
275,276
278,279
280,281
281,282
283,284
284,285
284,286
285,286
285,287
286,287
286,288
287,288
289,290
291,292
291,293
291,294
291,295
291,296
292,293
294,295
296,297
297,298
297,299
300,301
300,302
301,302
303,304
305,306
307,308
308,309
308,310
309,310
312,313
312,314
313,314
315,316
316,317
317,318
317,319
318,319
320,321
-----nextToken-----
2,4,8,10,14,16,18,23,25,29,31,35,37,40,43,45,48,54,57,59,61,63,67,69,71,75,78,79,83,88,89,91,97,98,99,102,104,109,110,113,115,120,122,126,128,131,135,137,139,143,146,148,150,153,154,155,160,162,165,166,168,173,175,176,180,183,185,186,190,192,197,199,200,202,208,210,212,216,218,219,222,225,227,228,230,235,236,239,240,245,248,250,251,255,257,262,263,268,269,272,276,277,279,282,288,290,293,295,298,299,302,304,306,310,311,314,319,321,322
-----computeFrom-----
12,13
12,14
52,53
52,54
65,66
65,67
85,86
85,87
93,94
93,95
106,107
106,108
117,118
117,119
141,142
141,143
151,152
151,153
157,158
157,159
158,159
158,160
163,164
163,165
170,171
170,172
178,179
178,180
188,189
188,190
232,233
232,234
233,234
233,235
237,238
237,239
243,244
243,245
253,254
253,255
266,267
266,268
270,271
270,272
285,286
285,287
-----guardedBy-----
190,199
239,279
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G(){    int count;    /* Initialize count */    count = -1;    while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }    while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }        break;    }}
static void
goodB2G()
goodB2G
{    int count;    /* Initialize count */    count = -1;    while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }    while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
break;
while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }        break;    }
1
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }        break;    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
-----joern-----
(193,71,0)
(107,101,0)
(74,175,0)
(142,182,0)
(46,160,0)
(67,33,0)
(172,85,0)
(80,95,0)
(95,80,0)
(176,104,0)
(161,183,0)
(38,48,0)
(183,161,0)
(97,48,0)
(78,134,0)
(70,48,0)
(43,191,0)
(173,32,0)
(54,167,0)
(188,175,0)
(178,71,0)
(66,157,0)
(138,91,0)
(104,113,0)
(125,112,0)
(27,41,0)
(190,41,0)
(197,22,0)
(167,54,0)
(83,33,0)
(92,26,0)
(4,188,0)
(133,124,0)
(181,197,0)
(22,71,0)
(140,126,0)
(14,138,0)
(128,159,0)
(113,104,0)
(87,22,0)
(151,130,0)
(167,84,0)
(124,26,0)
(55,144,0)
(182,22,0)
(45,159,0)
(163,54,0)
(167,71,0)
(166,12,0)
(91,40,0)
(41,12,0)
(80,71,0)
(60,166,0)
(160,46,0)
(121,157,0)
(96,161,0)
(4,16,0)
(33,12,0)
(160,71,0)
(52,140,0)
(147,188,0)
(131,26,0)
(154,112,0)
(195,169,0)
(191,99,0)
(13,162,0)
(119,124,0)
(15,71,0)
(6,42,0)
(153,191,0)
(110,56,0)
(188,4,0)
(127,56,0)
(42,66,0)
(44,50,0)
(86,182,0)
(69,16,0)
(105,116,0)
(48,72,0)
(112,12,0)
(5,101,0)
(141,197,0)
(93,126,0)
(140,91,0)
(77,11,0)
(66,42,0)
(149,12,0)
(175,134,0)
(58,71,0)
(3,143,0)
(169,194,0)
(57,188,0)
(144,115,0)
(8,183,0)
(31,132,0)
(104,162,0)
(7,157,0)
(112,143,0)
(30,116,0)
(186,136,0)
(94,99,0)
(88,15,0)
(22,112,0)
(137,48,0)
(0,72,0)
(144,175,0)
(17,48,0)
(148,118,0)
(158,182,0)
(19,41,0)
(122,40,0)
(68,162,0)
(9,136,0)
(135,112,0)
(150,22,0)
(47,26,0)
(166,111,0)
(192,143,0)
(36,8,0)
(126,140,0)
(32,191,0)
(61,152,0)
(123,165,0)
(21,26,0)
(2,157,0)
(40,91,0)
(117,144,0)
(84,167,0)
(183,116,0)
(177,84,0)
(91,138,0)
(165,48,0)
(16,66,0)
(136,71,0)
(49,34,0)
(39,80,0)
(197,189,0)
(144,117,0)
(10,71,0)
(185,63,0)
(25,162,0)
(28,15,0)
(191,104,0)
(85,26,0)
(26,34,0)
(113,124,0)
(16,175,0)
(191,194,0)
(90,104,0)
(155,48,0)
(182,86,0)
(184,120,0)
(18,109,0)
(170,150,0)
(140,52,0)
(187,39,0)
(20,120,0)
(16,4,0)
(65,189,0)
(64,95,0)
(39,101,0)
(120,160,0)
(146,48,0)
(156,111,0)
(152,12,0)
(59,66,0)
(111,48,0)
(12,41,0)
(188,66,0)
(194,191,0)
(91,12,0)
(194,169,0)
(98,165,0)
(168,139,0)
(23,139,0)
(196,113,0)
(100,186,0)
(37,91,0)
(1,90,0)
(53,48,0)
(144,66,0)
(116,183,0)
(114,111,0)
(189,71,0)
(115,144,0)
(115,139,0)
(191,32,0)
(166,179,0)
(62,113,0)
(183,8,0)
(51,81,0)
(129,79,0)
(145,150,0)
(134,175,0)
(112,22,0)
(91,140,0)
(152,111,0)
(143,112,0)
(81,139,0)
(118,24,0)
(101,39,0)
(171,48,0)
(99,191,0)
(75,115,0)
(180,16,0)
(103,85,0)
(90,102,0)
(150,86,0)
(35,152,0)
(159,104,0)
(56,26,0)
(76,167,0)
(108,46,0)
(164,186,0)
(86,150,0)
(175,71,0)
(12,71,0)
(94,32,1)
(161,96,1)
(36,116,1)
(114,156,1)
(32,173,1)
(152,111,1)
(89,82,1)
(118,148,1)
(133,85,1)
(194,169,1)
(175,134,1)
(14,140,1)
(9,186,1)
(81,139,1)
(159,128,1)
(61,185,1)
(46,108,1)
(151,161,1)
(177,76,1)
(186,164,1)
(113,124,1)
(149,15,1)
(42,6,1)
(183,8,1)
(144,117,1)
(84,177,1)
(91,140,1)
(197,141,1)
(166,12,1)
(190,19,1)
(83,67,1)
(144,175,1)
(160,46,1)
(123,82,1)
(150,145,1)
(189,65,1)
(87,40,1)
(4,188,1)
(1,73,1)
(156,165,1)
(143,192,1)
(168,159,1)
(86,150,1)
(95,64,1)
(170,22,1)
(113,196,1)
(55,75,1)
(64,39,1)
(66,42,1)
(181,86,1)
(140,52,1)
(20,184,1)
(191,153,1)
(164,100,1)
(49,4,1)
(141,181,1)
(43,169,1)
(16,66,1)
(112,12,1)
(106,166,1)
(184,80,1)
(150,22,1)
(183,116,1)
(98,123,1)
(108,120,1)
(62,176,1)
(33,12,1)
(75,139,1)
(4,16,1)
(57,16,1)
(93,37,1)
(0,31,1)
(167,84,1)
(12,41,1)
(182,158,1)
(125,154,1)
(77,194,1)
(128,45,1)
(191,104,1)
(80,95,1)
(76,54,1)
(37,160,1)
(28,161,1)
(173,43,1)
(103,56,1)
(188,147,1)
(0,106,1)
(39,101,1)
(99,94,1)
(124,119,1)
(169,195,1)
(144,66,1)
(101,107,1)
(195,115,1)
(78,74,1)
(40,91,1)
(158,142,1)
(174,89,1)
(85,172,1)
(18,40,1)
(120,20,1)
(33,83,1)
(188,175,1)
(107,5,1)
(166,60,1)
(49,73,1)
(61,29,1)
(96,183,1)
(65,197,1)
(159,104,1)
(51,11,1)
(152,12,1)
(81,51,1)
(191,32,1)
(196,62,1)
(134,78,1)
(174,49,1)
(152,35,1)
(67,12,1)
(104,113,1)
(168,118,1)
(51,194,1)
(61,44,1)
(35,61,1)
(163,33,1)
(15,88,1)
(73,115,1)
(197,22,1)
(19,27,1)
(112,135,1)
(100,167,1)
(105,111,1)
(126,93,1)
(105,29,1)
(148,159,1)
(119,133,1)
(91,12,1)
(22,112,1)
(60,152,1)
(6,59,1)
(30,105,1)
(153,99,1)
(167,54,1)
(187,101,1)
(154,87,1)
(188,66,1)
(106,152,1)
(112,143,1)
(3,125,1)
(82,66,1)
(110,89,1)
(8,36,1)
(191,99,1)
(176,4,1)
(182,22,1)
(27,149,1)
(166,111,1)
(54,163,1)
(115,144,1)
(11,77,1)
(116,30,1)
(192,3,1)
(31,106,1)
(180,69,1)
(194,191,1)
(16,180,1)
(5,136,1)
(145,170,1)
(91,138,1)
(122,91,1)
(127,110,1)
(165,98,1)
(40,122,1)
(135,143,1)
(140,126,1)
(41,190,1)
(115,139,1)
(74,189,1)
(89,0,1)
(49,90,1)
(69,124,1)
(44,86,1)
(88,28,1)
(185,33,1)
(147,57,1)
(61,151,1)
(136,9,1)
(16,175,1)
(161,183,1)
(111,114,1)
(86,182,1)
(172,103,1)
(23,168,1)
(75,81,1)
(90,104,1)
(45,104,1)
(90,1,1)
(61,18,1)
(29,175,1)
(39,187,1)
(142,150,1)
(56,127,1)
(139,23,1)
(144,55,1)
(138,14,1)
(144,117,2)
(191,32,2)
(60,152,2)
(128,4,2)
(80,95,2)
(84,33,2)
(86,182,2)
(36,82,2)
(55,4,2)
(20,33,2)
(112,40,2)
(69,89,2)
(143,40,2)
(99,115,2)
(154,40,2)
(96,82,2)
(119,89,2)
(176,4,2)
(194,169,2)
(86,150,2)
(113,4,2)
(151,161,2)
(165,82,2)
(15,161,2)
(27,161,2)
(152,12,2)
(183,8,2)
(183,29,2)
(148,159,2)
(163,33,2)
(113,124,2)
(144,66,2)
(39,101,2)
(93,33,2)
(161,82,2)
(3,40,2)
(12,41,2)
(191,104,2)
(161,183,2)
(159,4,2)
(116,29,2)
(191,99,2)
(153,115,2)
(188,16,2)
(81,139,2)
(158,150,2)
(112,143,2)
(64,33,2)
(115,4,2)
(108,33,2)
(28,161,2)
(5,33,2)
(61,82,2)
(120,33,2)
(149,161,2)
(76,33,2)
(91,33,2)
(183,116,2)
(75,4,2)
(4,89,2)
(105,29,2)
(185,33,2)
(166,111,2)
(169,115,2)
(80,33,2)
(118,159,2)
(170,40,2)
(32,115,2)
(156,82,2)
(197,22,2)
(8,82,2)
(14,33,2)
(145,40,2)
(101,33,2)
(188,66,2)
(22,112,2)
(41,161,2)
(16,89,2)
(111,82,2)
(188,175,2)
(91,138,2)
(16,175,2)
(192,40,2)
(124,89,2)
(85,89,2)
(90,73,2)
(66,42,2)
(62,4,2)
(9,33,2)
(96,29,2)
(175,86,2)
(8,29,2)
(57,16,2)
(106,82,2)
(152,82,2)
(35,82,2)
(112,12,2)
(4,188,2)
(11,194,2)
(54,33,2)
(105,82,2)
(107,33,2)
(116,82,2)
(172,89,2)
(46,33,2)
(75,115,2)
(140,126,2)
(173,115,2)
(56,89,2)
(77,194,2)
(184,33,2)
(30,82,2)
(147,16,2)
(197,86,2)
(33,161,2)
(37,33,2)
(144,115,2)
(12,161,2)
(115,144,2)
(39,33,2)
(160,46,2)
(183,82,2)
(181,86,2)
(150,40,2)
(1,73,2)
(88,161,2)
(23,4,2)
(187,33,2)
(98,82,2)
(45,4,2)
(115,139,2)
(31,106,2)
(49,89,2)
(16,66,2)
(19,161,2)
(36,29,2)
(44,86,2)
(140,52,2)
(182,150,2)
(78,86,2)
(126,33,2)
(73,4,2)
(104,113,2)
(110,89,2)
(133,89,2)
(122,33,2)
(141,86,2)
(65,86,2)
(138,33,2)
(194,191,2)
(125,40,2)
(94,115,2)
(195,115,2)
(135,40,2)
(164,33,2)
(139,4,2)
(160,33,2)
(161,29,2)
(194,115,2)
(166,152,2)
(150,22,2)
(115,115,2)
(43,115,2)
(29,86,2)
(22,40,2)
(140,33,2)
(167,84,2)
(74,86,2)
(191,115,2)
(100,33,2)
(180,89,2)
(142,150,2)
(91,12,2)
(4,16,2)
(166,12,2)
(114,82,2)
(167,33,2)
(127,89,2)
(40,91,2)
(189,86,2)
(190,161,2)
(51,115,2)
(134,86,2)
(40,33,2)
(186,33,2)
(90,104,2)
(196,4,2)
(55,115,2)
(81,115,2)
(104,4,2)
(0,82,2)
(91,140,2)
(95,33,2)
(33,12,2)
(123,82,2)
(103,89,2)
(152,111,2)
(175,134,2)
(18,40,2)
(177,33,2)
(83,161,2)
(144,175,2)
(159,104,2)
(168,4,2)
(167,54,2)
(67,161,2)
(182,22,2)
(30,29,2)
(86,40,2)
(144,4,2)
(87,40,2)
(136,33,2)
-----------------------------------
(0,break;)
(1,pFile)
(2,while(1)
(3,CHAR_ARRAY_SIZE)
(4,count > 0 && count <= 20)
(5,service)
(6,1)
(7,count)
(8,&wsaData)
(9,AF_INET)
(10,if (connect(connectSocket, (struct sockaddr*)
(11,exit(1)
(12,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(13,for (i = 0; i < (size_t)
(14,service)
(15,wsaDataInit = 1)
(16,count > 0)
(17,if (connectSocket != INVALID_SOCKET)
(18,break;)
(19,SOCK_STREAM)
(20,sin_port)
(21,filename)
(22,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(23,0)
(24,)
(25,if (pFile == NULL)
(26,)
(27,AF_INET)
(28,wsaDataInit)
(29,0)
(30,2)
(31,WSACleanup()
(32,sizeof(char)
(33,connectSocket == INVALID_SOCKET)
(34,)
(35,INVALID_SOCKET)
(36,wsaData)
(37,connectSocket)
(38,wsaDataInit)
(39,service.sin_addr.s_addr)
(40,connect(connectSocket, (struct sockaddr*)
(41,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(42,-1)
(43,SENTENCE)
(44,break;)
(45,pFile)
(46,htons(TCP_PORT)
(47,i)
(48,)
(49,break;)
(50,)
(51,i)
(52,struct sockaddr*)
(53,connectSocket)
(54,&service)
(55,count)
(56,i = 0)
(57,count)
(58,if (recvResult == SOCKET_ERROR || recvResult == 0)
(59,count)
(60,connectSocket)
(61,connectSocket)
(62,filename)
(63,)
(64,IP_ADDRESS)
(65,\'\\0\')
(66,count = -1)
(67,connectSocket)
(68,if (pFile)
(69,count)
(70,inputBuffer)
(71,)
(72,)
(73,pFile)
(74,count)
(75,i)
(76,0)
(77,1)
(78,inputBuffer)
(79,)
(80,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(81,i++)
(82,1)
(83,INVALID_SOCKET)
(84,sizeof(service)
(85,*pFile = NULL)
(86,recvResult == SOCKET_ERROR || recvResult == 0)
(87,recvResult)
(88,1)
(89,1)
(90,fclose(pFile)
(91,connect(connectSocket, (struct sockaddr*)
(92,if (count > 0 && count <= 20)
(93,service)
(94,SENTENCE)
(95,inet_addr(IP_ADDRESS)
(96,NO_ERROR)
(97,wsaData)
(98,0)
(99,strlen(SENTENCE)
(100,service)
(101,service.sin_addr)
(102,)
(103,pFile)
(104,pFile = fopen(filename, "w+")
(105,2)
(106,wsaDataInit)
(107,sin_addr)
(108,TCP_PORT)
(109,)
(110,i)
(111,connectSocket = INVALID_SOCKET)
(112,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(113,fopen(filename, "w+")
(114,INVALID_SOCKET)
(115,i < (size_t)
(116,MAKEWORD(2,2)
(117,size_t)
(118,exit(1)
(119,"output_good.txt")
(120,service.sin_port)
(121,while(1)
(122,SOCKET_ERROR)
(123,wsaDataInit)
(124,*filename = "output_good.txt")
(125,inputBuffer)
(126,&service)
(127,0)
(128,NULL)
(129,if (strlen(SENTENCE)
(130,)
(131,pFile)
(132,)
(133,filename)
(134,atoi(inputBuffer)
(135,0)
(136,service.sin_family = AF_INET)
(137,service)
(138,sizeof(service)
(139,i = 0)
(140,(struct sockaddr*)
(141,recvResult)
(142,recvResult)
(143,CHAR_ARRAY_SIZE - 1)
(144,(size_t)
(145,SOCKET_ERROR)
(146,recvResult)
(147,20)
(148,1)
(149,connectSocket)
(150,recvResult == SOCKET_ERROR)
(151,break;)
(152,connectSocket != INVALID_SOCKET)
(153,pFile)
(154,connectSocket)
(155,do)
(156,connectSocket)
(157,)
(158,0)
(159,pFile == NULL)
(160,service.sin_port = htons(TCP_PORT)
(161,WSAStartup(MAKEWORD(2,2)
(162,)
(163,service)
(164,sin_family)
(165,wsaDataInit = 0)
(166,CLOSE_SOCKET(connectSocket)
(167,memset(&service, 0, sizeof(service)
(168,i)
(169,strlen(SENTENCE)
(170,recvResult)
(171,if (wsaDataInit)
(172,NULL)
(173,char)
(174,RET)
(175,count = atoi(inputBuffer)
(176,pFile)
(177,service)
(178,if (connectSocket == INVALID_SOCKET)
(179,)
(180,0)
(181,inputBuffer)
(182,recvResult == 0)
(183,WSAStartup(MAKEWORD(2,2)
(184,service)
(185,break;)
(186,service.sin_family)
(187,s_addr)
(188,count <= 20)
(189,inputBuffer[recvResult] = \'\\0\')
(190,IPPROTO_TCP)
(191,fwrite(SENTENCE, sizeof(char)
(192,1)
(193,if (WSAStartup(MAKEWORD(2,2)
(194,strlen(SENTENCE)
(195,SENTENCE)
(196,"w+")
(197,inputBuffer[recvResult])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^