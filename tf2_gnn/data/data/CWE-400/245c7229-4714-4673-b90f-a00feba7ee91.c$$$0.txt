-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__listen_socket_for_loop_53_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read count using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    CWE400_Resource_Exhaustion__listen_socket_for_loop_53b_badSink(count);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
18,19
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
38,39
39,40
39,41
40,41
42,43
42,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
55,57
56,57
56,58
56,59
56,60
56,61
56,62
56,63
56,64
56,65
56,66
56,67
56,68
56,69
56,70
57,58
58,59
58,60
59,60
61,62
61,63
61,64
61,65
62,63
64,65
66,67
68,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
83,84
86,87
87,88
88,89
90,91
91,92
91,93
92,93
92,94
93,94
96,97
98,99
99,100
99,101
100,101
100,102
101,102
101,103
102,103
106,107
108,109
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
117,118
119,120
119,121
120,121
120,122
121,122
121,123
121,124
121,125
122,123
124,125
126,127
126,128
127,128
127,129
128,129
130,131
132,133
133,134
135,136
136,137
137,138
139,140
141,142
143,144
143,145
144,145
144,146
145,146
145,147
145,148
146,147
148,149
150,151
152,153
154,155
156,157
157,158
157,159
158,159
160,161
160,162
160,163
160,164
161,162
163,164
165,166
167,168
169,170
169,171
170,171
170,172
171,172
173,174
175,176
177,178
178,179
178,180
179,180
181,182
181,183
181,184
181,185
181,186
182,183
184,185
186,187
188,189
188,190
189,190
193,194
193,195
194,195
194,196
195,196
195,197
196,197
198,199
200,201
200,202
201,202
204,205
206,207
207,208
207,209
208,209
208,210
209,210
211,212
214,215
215,216
215,217
216,217
218,219
218,220
219,220
221,222
224,225
224,226
225,226
225,227
226,227
228,229
230,231
231,232
232,233
232,234
233,234
235,236
237,238
237,239
238,239
238,240
239,240
241,242
243,244
244,245
245,246
245,247
246,247
248,249
250,251
251,252
251,253
252,253
254,255
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,32,34,37,41,43,46,49,51,54,60,63,65,67,69,73,75,77,81,84,85,89,94,95,97,103,104,105,107,112,113,116,118,123,125,129,131,134,138,140,142,147,149,151,153,155,159,162,164,166,168,172,174,176,180,183,185,187,190,191,192,197,199,202,203,205,210,212,213,217,220,222,223,227,229,234,236,240,242,247,249,253,255
-----computeFrom-----
12,13
12,14
58,59
58,60
71,72
71,73
91,92
91,93
99,100
99,101
109,110
109,111
120,121
120,122
144,145
144,146
157,158
157,159
170,171
170,172
178,179
178,180
188,189
188,190
194,195
194,196
195,196
195,197
200,201
200,202
207,208
207,209
215,216
215,217
225,226
225,227
238,239
238,240
-----guardedBy-----
227,236
240,249
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__listen_socket_for_loop_53_bad(){    int count;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    CWE400_Resource_Exhaustion__listen_socket_for_loop_53b_badSink(count);}
void
CWE400_Resource_Exhaustion__listen_socket_for_loop_53_bad()
CWE400_Resource_Exhaustion__listen_socket_for_loop_53_bad
{    int count;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    CWE400_Resource_Exhaustion__listen_socket_for_loop_53b_badSink(count);}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
CWE400_Resource_Exhaustion__listen_socket_for_loop_53b_badSink(count);
CWE400_Resource_Exhaustion__listen_socket_for_loop_53b_badSink(count)
CWE400_Resource_Exhaustion__listen_socket_for_loop_53b_badSink
CWE400_Resource_Exhaustion__listen_socket_for_loop_53b_badSink
count
count
-----joern-----
(150,75,0)
(142,129,0)
(104,88,0)
(19,26,0)
(81,3,0)
(124,147,0)
(48,115,0)
(19,52,0)
(155,148,0)
(131,134,0)
(15,47,0)
(8,47,0)
(75,47,0)
(152,147,0)
(149,94,0)
(92,71,0)
(127,49,0)
(144,91,0)
(109,47,0)
(122,73,0)
(3,36,0)
(7,51,0)
(0,47,0)
(112,96,0)
(63,68,0)
(103,91,0)
(118,81,0)
(95,26,0)
(25,8,0)
(57,91,0)
(113,147,0)
(135,134,0)
(67,110,0)
(58,63,0)
(10,15,0)
(59,84,0)
(71,3,0)
(106,117,0)
(27,151,0)
(96,84,0)
(125,98,0)
(29,129,0)
(146,21,0)
(100,72,0)
(65,146,0)
(35,110,0)
(91,147,0)
(144,18,0)
(91,57,0)
(79,23,0)
(3,71,0)
(68,63,0)
(50,110,0)
(64,47,0)
(40,33,0)
(43,15,0)
(151,12,0)
(21,146,0)
(97,39,0)
(148,155,0)
(98,6,0)
(99,148,0)
(141,103,0)
(46,147,0)
(19,23,0)
(128,23,0)
(130,51,0)
(126,60,0)
(17,6,0)
(31,47,0)
(119,57,0)
(9,147,0)
(42,47,0)
(143,108,0)
(138,147,0)
(60,148,0)
(1,79,0)
(52,19,0)
(20,111,0)
(36,3,0)
(39,84,0)
(84,59,0)
(14,150,0)
(146,91,0)
(30,20,0)
(105,57,0)
(56,59,0)
(61,67,0)
(21,103,0)
(41,38,0)
(72,23,0)
(83,78,0)
(111,147,0)
(6,147,0)
(70,8,0)
(13,79,0)
(86,147,0)
(33,88,0)
(132,59,0)
(148,60,0)
(5,36,0)
(137,127,0)
(93,47,0)
(16,84,0)
(19,151,0)
(134,75,0)
(134,23,0)
(110,23,0)
(74,15,0)
(101,37,0)
(47,88,0)
(51,49,0)
(80,59,0)
(73,33,0)
(37,147,0)
(24,111,0)
(54,47,0)
(49,147,0)
(110,67,0)
(26,19,0)
(129,57,0)
(140,81,0)
(44,138,0)
(102,103,0)
(151,27,0)
(43,84,0)
(82,12,0)
(103,21,0)
(68,37,0)
(39,15,0)
(85,144,0)
(116,43,0)
(38,33,0)
(12,151,0)
(4,47,0)
(39,69,0)
(3,81,0)
(153,47,0)
(148,147,0)
(114,19,0)
(32,75,0)
(38,88,0)
(156,144,0)
(49,127,0)
(2,75,0)
(145,72,0)
(157,68,0)
(22,47,0)
(136,20,0)
(45,72,0)
(18,147,0)
(53,57,0)
(84,147,0)
(139,43,0)
(154,96,0)
(11,123,0)
(38,6,0)
(120,18,0)
(150,62,0)
(121,138,0)
(23,72,0)
(90,91,0)
(66,47,0)
(33,73,0)
(151,19,0)
(57,84,0)
(133,146,0)
(28,89,0)
(150,23,0)
(107,155,0)
(59,23,0)
(77,52,0)
(23,147,0)
(34,63,0)
(57,129,0)
(6,98,0)
(3,71,1)
(10,75,1)
(43,116,1)
(114,49,1)
(59,56,1)
(67,110,1)
(50,26,1)
(111,24,1)
(110,35,1)
(39,84,1)
(98,125,1)
(79,1,1)
(150,75,1)
(106,76,1)
(53,105,1)
(142,29,1)
(132,16,1)
(61,110,1)
(19,52,1)
(141,146,1)
(76,43,1)
(131,55,1)
(23,72,1)
(36,3,1)
(11,26,1)
(128,138,1)
(121,36,1)
(103,91,1)
(100,45,1)
(151,27,1)
(26,19,1)
(39,15,1)
(43,15,1)
(143,21,1)
(148,60,1)
(119,129,1)
(151,12,1)
(91,57,1)
(68,157,1)
(16,67,1)
(87,38,1)
(118,55,1)
(154,84,1)
(150,14,1)
(75,2,1)
(21,103,1)
(150,23,1)
(148,155,1)
(90,96,1)
(45,128,1)
(125,17,1)
(92,81,1)
(19,151,1)
(71,92,1)
(48,36,1)
(37,101,1)
(6,98,1)
(7,130,1)
(67,61,1)
(131,143,1)
(3,81,1)
(74,10,1)
(44,121,1)
(58,34,1)
(57,129,1)
(65,133,1)
(34,111,1)
(13,23,1)
(144,91,1)
(20,136,1)
(8,25,1)
(85,21,1)
(77,151,1)
(118,15,1)
(12,82,1)
(25,70,1)
(56,80,1)
(137,51,1)
(105,90,1)
(80,132,1)
(1,13,1)
(140,118,1)
(139,150,1)
(59,23,1)
(28,96,1)
(52,77,1)
(134,23,1)
(95,19,1)
(63,58,1)
(36,5,1)
(146,65,1)
(133,91,1)
(157,63,1)
(120,144,1)
(60,126,1)
(41,106,1)
(70,33,1)
(110,23,1)
(102,141,1)
(39,97,1)
(29,53,1)
(21,146,1)
(35,50,1)
(146,91,1)
(15,74,1)
(19,23,1)
(99,155,1)
(72,145,1)
(156,85,1)
(107,79,1)
(112,154,1)
(81,140,1)
(134,75,1)
(57,119,1)
(55,6,1)
(41,76,1)
(79,23,1)
(138,44,1)
(38,33,1)
(103,102,1)
(38,6,1)
(131,48,1)
(131,149,1)
(131,83,1)
(144,156,1)
(24,20,1)
(126,99,1)
(127,137,1)
(149,67,1)
(155,107,1)
(51,7,1)
(96,112,1)
(26,95,1)
(49,127,1)
(135,131,1)
(73,122,1)
(18,120,1)
(116,139,1)
(122,40,1)
(82,114,1)
(17,18,1)
(129,142,1)
(5,3,1)
(68,63,1)
(134,135,1)
(96,84,1)
(38,41,1)
(84,59,1)
(2,32,1)
(30,148,1)
(145,100,1)
(57,84,1)
(83,79,1)
(136,30,1)
(14,134,1)
(131,11,1)
(131,28,1)
(130,37,1)
(139,134,1)
(97,43,1)
(101,68,1)
(76,39,1)
(33,73,1)
(43,84,1)
(32,8,1)
(150,23,2)
(72,36,2)
(77,79,2)
(84,67,2)
(107,79,2)
(138,36,2)
(20,79,2)
(39,84,2)
(24,79,2)
(16,67,2)
(127,79,2)
(79,23,2)
(102,146,2)
(130,79,2)
(110,23,2)
(55,21,2)
(105,96,2)
(151,79,2)
(90,96,2)
(120,21,2)
(11,26,2)
(119,96,2)
(5,55,2)
(68,63,2)
(146,91,2)
(51,79,2)
(98,21,2)
(61,26,2)
(71,55,2)
(7,79,2)
(26,19,2)
(150,134,2)
(133,96,2)
(103,91,2)
(96,67,2)
(43,15,2)
(37,79,2)
(99,79,2)
(125,21,2)
(132,67,2)
(38,33,2)
(19,23,2)
(44,36,2)
(101,79,2)
(21,146,2)
(49,79,2)
(57,129,2)
(97,43,2)
(59,67,2)
(81,55,2)
(13,36,2)
(148,79,2)
(56,67,2)
(52,79,2)
(57,96,2)
(140,55,2)
(79,36,2)
(45,36,2)
(144,91,2)
(141,146,2)
(150,75,2)
(121,36,2)
(3,55,2)
(84,59,2)
(155,79,2)
(6,98,2)
(137,79,2)
(3,71,2)
(100,36,2)
(35,26,2)
(65,96,2)
(17,21,2)
(151,27,2)
(143,21,2)
(148,155,2)
(21,96,2)
(53,96,2)
(145,36,2)
(83,79,2)
(112,67,2)
(19,79,2)
(68,79,2)
(3,81,2)
(29,96,2)
(91,96,2)
(85,21,2)
(23,72,2)
(103,146,2)
(136,79,2)
(63,79,2)
(59,23,2)
(92,55,2)
(57,84,2)
(38,6,2)
(114,79,2)
(156,21,2)
(34,79,2)
(144,21,2)
(39,15,2)
(111,79,2)
(129,96,2)
(28,96,2)
(48,36,2)
(58,79,2)
(149,67,2)
(154,67,2)
(128,36,2)
(18,21,2)
(82,79,2)
(96,84,2)
(80,67,2)
(110,26,2)
(33,73,2)
(67,110,2)
(49,127,2)
(91,57,2)
(67,26,2)
(126,79,2)
(142,96,2)
(60,79,2)
(19,52,2)
(134,23,2)
(14,134,2)
(6,21,2)
(95,79,2)
(43,84,2)
(118,55,2)
(146,96,2)
(148,60,2)
(157,79,2)
(106,76,2)
(23,36,2)
(26,79,2)
(1,36,2)
(151,12,2)
(21,103,2)
(39,43,2)
(36,3,2)
(12,79,2)
(134,75,2)
(50,26,2)
(19,151,2)
(30,79,2)
(36,55,2)
-----------------------------------
(0,recvResult)
(1,INVALID_SOCKET)
(2,INVALID_SOCKET)
(3,WSAStartup(MAKEWORD(2,2)
(4,if (acceptSocket != INVALID_SOCKET)
(5,NO_ERROR)
(6,count = atoi(inputBuffer)
(7,sin_port)
(8,wsaDataInit = 0)
(9,if (acceptSocket == SOCKET_ERROR)
(10,acceptSocket)
(11,break;)
(12,&service)
(13,listenSocket)
(14,listenSocket)
(15,acceptSocket = INVALID_SOCKET)
(16,acceptSocket)
(17,count)
(18,inputBuffer[recvResult] = '\\0')
(19,bind(listenSocket, (struct sockaddr*)
(20,service.sin_family)
(21,recvResult == SOCKET_ERROR || recvResult == 0)
(22,inputBuffer)
(23,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(24,AF_INET)
(25,0)
(26,bind(listenSocket, (struct sockaddr*)
(27,struct sockaddr*)
(28,break;)
(29,CHAR_ARRAY_SIZE)
(30,service)
(31,if (listenSocket != INVALID_SOCKET)
(32,listenSocket)
(33,count = -1)
(34,service)
(35,LISTEN_BACKLOG)
(36,WSAStartup(MAKEWORD(2,2)
(37,service.sin_addr.s_addr = INADDR_ANY)
(38,CWE400_Resource_Exhaustion__listen_socket_for_loop_53b_badSink(count)
(39,CLOSE_SOCKET(acceptSocket)
(40,count)
(41,count)
(42,acceptSocket)
(43,acceptSocket != INVALID_SOCKET)
(44,1)
(45,AF_INET)
(46,if (listenSocket == INVALID_SOCKET)
(47,)
(48,break;)
(49,service.sin_port = htons(TCP_PORT)
(50,listenSocket)
(51,service.sin_port)
(52,sizeof(service)
(53,inputBuffer)
(54,do)
(55,0)
(56,NULL)
(57,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(58,sin_addr)
(59,accept(listenSocket, NULL, NULL)
(60,sizeof(service)
(61,SOCKET_ERROR)
(62,)
(63,service.sin_addr)
(64,wsaData)
(65,SOCKET_ERROR)
(66,service)
(67,listen(listenSocket, LISTEN_BACKLOG)
(68,service.sin_addr.s_addr)
(69,)
(70,wsaDataInit)
(71,&wsaData)
(72,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(73,-1)
(74,INVALID_SOCKET)
(75,listenSocket = INVALID_SOCKET)
(76,wsaDataInit)
(77,service)
(78,)
(79,listenSocket == INVALID_SOCKET)
(80,NULL)
(81,MAKEWORD(2,2)
(82,service)
(83,break;)
(84,acceptSocket = accept(listenSocket, NULL, NULL)
(85,inputBuffer)
(86,if (recvResult == SOCKET_ERROR || recvResult == 0)
(87,RET)
(88,)
(89,)
(90,recvResult)
(91,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(92,wsaData)
(93,listenSocket)
(94,)
(95,SOCKET_ERROR)
(96,acceptSocket == SOCKET_ERROR)
(97,acceptSocket)
(98,atoi(inputBuffer)
(99,0)
(100,SOCK_STREAM)
(101,INADDR_ANY)
(102,0)
(103,recvResult == 0)
(104,count)
(105,acceptSocket)
(106,WSACleanup()
(107,service)
(108,)
(109,wsaDataInit)
(110,listen(listenSocket, LISTEN_BACKLOG)
(111,service.sin_family = AF_INET)
(112,SOCKET_ERROR)
(113,if (WSAStartup(MAKEWORD(2,2)
(114,listenSocket)
(115,)
(116,INVALID_SOCKET)
(117,)
(118,2)
(119,0)
(120,'\\0')
(121,wsaDataInit)
(122,1)
(123,)
(124,if (listen(listenSocket, LISTEN_BACKLOG)
(125,inputBuffer)
(126,service)
(127,htons(TCP_PORT)
(128,listenSocket)
(129,CHAR_ARRAY_SIZE - 1)
(130,service)
(131,listenSocket)
(132,listenSocket)
(133,recvResult)
(134,listenSocket != INVALID_SOCKET)
(135,INVALID_SOCKET)
(136,sin_family)
(137,TCP_PORT)
(138,wsaDataInit = 1)
(139,acceptSocket)
(140,2)
(141,recvResult)
(142,1)
(143,break;)
(144,inputBuffer[recvResult])
(145,IPPROTO_TCP)
(146,recvResult == SOCKET_ERROR)
(147,)
(148,memset(&service, 0, sizeof(service)
(149,break;)
(150,CLOSE_SOCKET(listenSocket)
(151,(struct sockaddr*)
(152,if (bind(listenSocket, (struct sockaddr*)
(153,if (wsaDataInit)
(154,acceptSocket)
(155,&service)
(156,recvResult)
(157,s_addr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^