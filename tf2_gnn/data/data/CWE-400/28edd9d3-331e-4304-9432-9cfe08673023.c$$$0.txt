-----label-----
0
-----code-----
static void good1()
{
    if(staticReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            int * tmpData;
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            tmpData = (int *)realloc(data, (130000)*sizeof(int));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
18,19
19,20
19,21
21,22
21,23
21,24
24,25
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
65,66
66,67
66,68
67,68
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
80,81
82,83
82,84
82,85
83,84
85,86
87,88
87,89
88,89
90,91
91,92
91,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
100,102
100,103
101,102
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
114,115
115,116
115,117
116,117
118,119
118,120
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,9,14,15,20,22,23,27,29,32,34,37,38,42,44,49,51,54,56,57,62,63,64,68,71,72,76,79,81,84,86,89,92,93,97,99,104,106,111,112,113,117,120,121,125,127
-----computeFrom-----
33,34
33,35
40,41
40,42
59,60
59,61
74,75
74,76
87,88
87,89
95,96
95,97
102,103
102,104
108,109
108,110
-----guardedBy-----
97,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
staticReturnsFalse()
staticReturnsFalse
staticReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(24,40,0)
(55,23,0)
(40,22,0)
(16,65,0)
(41,65,0)
(23,65,0)
(57,62,0)
(17,24,0)
(14,33,0)
(54,40,0)
(24,17,0)
(11,47,0)
(26,33,0)
(61,15,0)
(59,22,0)
(37,44,0)
(16,22,0)
(11,1,0)
(56,11,0)
(64,13,0)
(47,25,0)
(54,47,0)
(60,22,0)
(39,16,0)
(44,45,0)
(12,47,0)
(65,16,0)
(51,22,0)
(43,28,0)
(8,1,0)
(7,22,0)
(28,49,0)
(63,31,0)
(12,22,0)
(0,54,0)
(52,40,0)
(53,47,0)
(45,44,0)
(18,25,0)
(21,24,0)
(23,33,0)
(34,62,0)
(12,33,0)
(2,54,0)
(62,34,0)
(50,47,0)
(33,22,0)
(26,40,0)
(23,44,0)
(17,22,0)
(1,25,0)
(10,13,0)
(62,57,0)
(48,11,0)
(6,26,0)
(31,63,0)
(36,49,0)
(20,14,0)
(34,28,0)
(32,3,0)
(65,41,0)
(62,33,0)
(38,63,0)
(13,16,0)
(22,35,0)
(49,28,0)
(54,1,0)
(47,16,0)
(44,23,0)
(28,34,0)
(31,42,0)
(33,62,0)
(3,30,0)
(19,24,0)
(9,26,0)
(58,12,0)
(5,45,0)
(54,18,0)
(18,54,0)
(24,33,0)
(29,14,0)
(46,33,0)
(65,23,0)
(24,40,1)
(8,11,1)
(49,36,1)
(37,55,1)
(28,49,1)
(63,38,1)
(31,63,1)
(6,14,1)
(52,26,1)
(54,47,1)
(43,46,1)
(46,4,1)
(58,13,1)
(62,34,1)
(54,40,1)
(11,47,1)
(17,24,1)
(47,16,1)
(5,37,1)
(38,14,1)
(40,52,1)
(3,32,1)
(39,17,1)
(0,2,1)
(13,10,1)
(64,16,1)
(27,3,1)
(10,64,1)
(24,33,1)
(26,9,1)
(45,5,1)
(9,6,1)
(14,29,1)
(33,62,1)
(48,56,1)
(56,47,1)
(19,21,1)
(18,54,1)
(13,16,1)
(32,4,1)
(34,28,1)
(62,57,1)
(24,19,1)
(12,33,1)
(29,20,1)
(55,39,1)
(50,13,1)
(2,1,1)
(16,65,1)
(20,33,1)
(1,8,1)
(53,50,1)
(54,0,1)
(23,44,1)
(23,33,1)
(27,12,1)
(11,48,1)
(58,18,1)
(21,40,1)
(54,1,1)
(36,43,1)
(44,45,1)
(65,41,1)
(12,47,1)
(65,23,1)
(14,33,1)
(47,53,1)
(12,58,1)
(26,33,1)
(6,31,1)
(31,14,2)
(11,13,2)
(40,4,2)
(54,47,2)
(9,4,2)
(2,13,2)
(20,4,2)
(56,13,2)
(62,34,2)
(32,4,2)
(18,54,2)
(5,4,2)
(54,13,2)
(62,4,2)
(65,23,2)
(36,4,2)
(23,4,2)
(14,33,2)
(31,63,2)
(23,44,2)
(23,33,2)
(14,4,2)
(52,4,2)
(24,4,2)
(50,13,2)
(26,33,2)
(43,4,2)
(12,47,2)
(26,4,2)
(64,4,2)
(44,4,2)
(13,4,2)
(38,14,2)
(33,4,2)
(0,13,2)
(24,33,2)
(39,4,2)
(28,4,2)
(62,57,2)
(12,4,2)
(47,16,2)
(46,4,2)
(1,13,2)
(63,14,2)
(45,4,2)
(24,40,2)
(44,45,2)
(16,4,2)
(55,4,2)
(13,16,2)
(34,28,2)
(11,47,2)
(54,40,2)
(33,62,2)
(19,4,2)
(34,4,2)
(37,4,2)
(16,65,2)
(48,13,2)
(47,13,2)
(21,4,2)
(17,24,2)
(10,4,2)
(17,4,2)
(8,13,2)
(3,4,2)
(58,4,2)
(49,4,2)
(65,4,2)
(54,1,2)
(6,4,2)
(12,33,2)
(28,49,2)
(18,13,2)
(29,4,2)
(65,41,2)
(53,13,2)
-----------------------------------
(0,0)
(1,data[0] = 10)
(2,data)
(3,printLine("Benign, fixed string")
(4,staticReturnsFalse()
(5,int)
(6,data)
(7,if (tmpData != NULL)
(8,10)
(9,0)
(10,NULL)
(11,data[0])
(12,free(data)
(13,tmpData != NULL)
(14,data == NULL)
(15,)
(16,tmpData = (int *)
(17,printIntLine(data[0])
(18,printIntLine(data[0])
(19,0)
(20,data)
(21,data)
(22,)
(23,realloc(data, (130000)
(24,data[0])
(25,)
(26,data[0])
(27,RET)
(28,100*sizeof(int)
(29,NULL)
(30,)
(31,exit(-1)
(32,"Benign, fixed string")
(33,* data = (int *)
(34,malloc(100*sizeof(int)
(35,)
(36,int)
(37,130000)
(38,1)
(39,tmpData)
(40,data[0] = 5)
(41,int *)
(42,)
(43,100)
(44,(130000)
(45,sizeof(int)
(46,data)
(47,data = tmpData)
(48,0)
(49,sizeof(int)
(50,data)
(51,if (data == NULL)
(52,5)
(53,tmpData)
(54,data[0])
(55,data)
(56,data)
(57,int *)
(58,data)
(59,data)
(60,tmpData)
(61,if(staticReturnsFalse()
(62,(int *)
(63,-1)
(64,tmpData)
(65,(int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^