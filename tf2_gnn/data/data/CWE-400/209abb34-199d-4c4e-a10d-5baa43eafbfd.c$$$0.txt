-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_bad()
{
    int i,j;
    size_t data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
39,42
39,43
40,41
42,43
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
63,64
64,65
64,66
66,67
66,68
69,70
69,71
69,72
70,71
70,72
71,72
73,74
73,75
74,75
76,77
78,79
78,80
78,81
78,82
78,83
79,80
80,81
80,82
81,82
83,84
83,85
84,85
84,86
86,87
88,89
88,90
89,90
91,92
91,93
92,93
94,95
95,96
95,97
98,99
98,100
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
112,115
113,114
115,116
117,118
119,120
120,121
120,122
121,122
123,124
125,126
126,127
126,128
127,128
129,130
131,132
132,133
133,134
133,135
134,135
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,43,44,47,52,53,56,57,60,65,67,68,72,75,77,82,85,87,90,93,96,97,101,103,108,110,114,116,118,122,124,128,130,135,136
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
50,51
50,52
54,55
54,56
70,71
70,72
80,81
80,82
91,92
91,93
99,100
99,101
-----guardedBy-----
77,118
72,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_bad(){    int i,j;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    for(j = 0; j < 1; j++)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_bad
{    int i,j;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    for(j = 0; j < 1; j++)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
for(j = 0; j < 1; j++)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(18,47,0)
(38,19,0)
(0,33,0)
(20,24,0)
(16,28,0)
(57,17,0)
(56,49,0)
(40,34,0)
(8,65,0)
(7,24,0)
(6,1,0)
(29,14,0)
(55,26,0)
(58,23,0)
(4,64,0)
(20,13,0)
(62,64,0)
(24,20,0)
(51,22,0)
(25,47,0)
(34,40,0)
(2,51,0)
(53,20,0)
(66,48,0)
(31,33,0)
(43,18,0)
(10,20,0)
(36,50,0)
(52,19,0)
(64,26,0)
(65,32,0)
(35,32,0)
(17,57,0)
(15,19,0)
(14,50,0)
(17,34,0)
(25,22,0)
(45,19,0)
(48,16,0)
(30,40,0)
(61,47,0)
(18,22,0)
(44,22,0)
(49,19,0)
(22,47,0)
(27,49,0)
(22,17,0)
(46,50,0)
(51,47,0)
(32,49,0)
(33,50,0)
(1,40,0)
(24,49,0)
(16,48,0)
(17,22,0)
(34,17,0)
(12,23,0)
(40,49,0)
(40,1,0)
(60,59,0)
(32,65,0)
(37,18,0)
(41,26,0)
(21,11,0)
(54,22,0)
(23,5,0)
(63,19,0)
(3,60,0)
(11,26,0)
(39,44,0)
(67,44,0)
(42,25,0)
(11,26,1)
(2,25,1)
(1,6,1)
(51,2,1)
(11,21,1)
(6,30,1)
(31,0,1)
(66,44,1)
(40,1,1)
(8,35,1)
(44,39,1)
(3,32,1)
(53,33,1)
(33,31,1)
(44,22,1)
(32,65,1)
(42,18,1)
(64,26,1)
(43,37,1)
(51,22,1)
(64,62,1)
(17,34,1)
(62,4,1)
(24,7,1)
(39,67,1)
(34,40,1)
(29,20,1)
(9,64,1)
(21,60,1)
(10,53,1)
(35,64,1)
(0,50,1)
(48,66,1)
(49,56,1)
(25,22,1)
(32,49,1)
(41,55,1)
(4,26,1)
(14,29,1)
(54,32,1)
(46,36,1)
(26,41,1)
(37,44,1)
(67,22,1)
(21,51,1)
(25,42,1)
(37,16,1)
(16,48,1)
(65,8,1)
(0,14,1)
(30,54,1)
(22,17,1)
(20,24,1)
(18,22,1)
(14,50,1)
(40,49,1)
(55,33,1)
(60,3,1)
(24,49,1)
(50,46,1)
(17,57,1)
(56,27,1)
(7,10,1)
(36,49,1)
(4,11,1)
(18,43,1)
(33,50,1)
(18,32,2)
(30,32,2)
(51,22,2)
(35,64,2)
(11,26,2)
(14,50,2)
(0,33,2)
(22,32,2)
(66,44,2)
(40,1,2)
(64,64,2)
(33,50,2)
(22,17,2)
(60,32,2)
(54,32,2)
(64,26,2)
(44,32,2)
(65,64,2)
(34,32,2)
(32,65,2)
(37,32,2)
(42,32,2)
(25,32,2)
(34,40,2)
(16,48,2)
(32,49,2)
(40,49,2)
(24,33,2)
(40,32,2)
(11,64,2)
(62,64,2)
(21,64,2)
(7,33,2)
(39,32,2)
(31,33,2)
(18,22,2)
(67,32,2)
(16,44,2)
(1,32,2)
(2,32,2)
(6,32,2)
(43,32,2)
(44,22,2)
(10,33,2)
(51,32,2)
(4,64,2)
(48,44,2)
(25,22,2)
(20,24,2)
(17,57,2)
(33,33,2)
(8,64,2)
(20,33,2)
(24,49,2)
(29,33,2)
(14,33,2)
(32,64,2)
(17,32,2)
(53,33,2)
(3,32,2)
(17,34,2)
-----------------------------------
(0,i)
(1,sizeof(char)
(2,myString)
(3,"Input is less than the length of the source string")
(4,j)
(5,)
(6,char)
(7,data)
(8,HELLO_STRING)
(9,RET)
(10,"%zu")
(11,j++)
(12,myString)
(13,)
(14,i++)
(15,for(i = 0; i < 1; i++)
(16,exit(-1)
(17,(char *)
(18,strcpy(myString, HELLO_STRING)
(19,)
(20,fscanf(stdin, "%zu", &data)
(21,j)
(22,myString = (char *)
(23,)
(24,&data)
(25,printLine(myString)
(26,j = 0)
(27,data)
(28,)
(29,i)
(30,data)
(31,1)
(32,data > strlen(HELLO_STRING)
(33,i < 1)
(34,malloc(data*sizeof(char)
(35,data)
(36,i)
(37,myString)
(38,data)
(39,NULL)
(40,data*sizeof(char)
(41,0)
(42,myString)
(43,HELLO_STRING)
(44,myString == NULL)
(45,i)
(46,0)
(47,)
(48,-1)
(49,data = 0)
(50,i = 0)
(51,free(myString)
(52,j)
(53,stdin)
(54,myString)
(55,j)
(56,0)
(57,char *)
(58,if (data > strlen(HELLO_STRING)
(59,)
(60,printLine("Input is less than the length of the source string")
(61,if (myString == NULL)
(62,1)
(63,for(j = 0; j < 1; j++)
(64,j < 1)
(65,strlen(HELLO_STRING)
(66,1)
(67,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^