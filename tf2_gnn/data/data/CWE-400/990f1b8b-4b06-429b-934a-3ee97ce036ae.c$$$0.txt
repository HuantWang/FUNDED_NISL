-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_sleep_32_bad()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
64,67
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,53,56,61,63,67,69,73,77,79,83,84
-----computeFrom-----
32,33
32,34
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_sleep_32_bad(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        *countPtr1 = count;    }    {        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__fscanf_sleep_32_bad()
CWE400_Resource_Exhaustion__fscanf_sleep_32_bad
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        *countPtr1 = count;    }    {        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(38,5,0)
(33,21,0)
(29,35,0)
(37,41,0)
(26,27,0)
(20,14,0)
(23,24,0)
(13,16,0)
(41,0,0)
(17,21,0)
(27,30,0)
(12,27,0)
(37,1,0)
(36,26,0)
(28,32,0)
(25,30,0)
(14,5,0)
(8,6,0)
(0,21,0)
(6,10,0)
(26,14,0)
(18,0,0)
(41,37,0)
(24,23,0)
(19,37,0)
(32,5,0)
(10,6,0)
(0,31,0)
(31,0,0)
(35,1,0)
(10,5,0)
(7,31,0)
(11,10,0)
(27,21,0)
(1,21,0)
(23,21,0)
(6,27,0)
(2,32,0)
(5,21,0)
(16,32,0)
(40,21,0)
(22,41,0)
(30,27,0)
(4,1,0)
(16,10,0)
(35,37,0)
(34,23,0)
(3,24,0)
(14,10,0)
(15,4,0)
(32,16,0)
(9,1,0)
(39,4,1)
(16,13,1)
(18,27,1)
(23,24,1)
(2,28,1)
(14,20,1)
(35,37,1)
(6,8,1)
(0,31,1)
(29,37,1)
(24,3,1)
(34,0,1)
(25,12,1)
(28,10,1)
(19,14,1)
(3,34,1)
(4,15,1)
(26,36,1)
(35,29,1)
(30,25,1)
(26,27,1)
(20,26,1)
(8,11,1)
(15,35,1)
(11,23,1)
(22,19,1)
(13,2,1)
(37,41,1)
(10,6,1)
(31,7,1)
(6,27,1)
(27,30,1)
(41,22,1)
(7,18,1)
(32,16,1)
(16,10,1)
(41,0,1)
(14,10,1)
(36,32,1)
(6,27,2)
(14,10,2)
(32,16,2)
(27,30,2)
(41,0,2)
(10,6,2)
(26,27,2)
(37,41,2)
(16,10,2)
(0,31,2)
(23,24,2)
(35,37,2)
-----------------------------------
(0,*countPtr2 = &count)
(1,)
(2,"%d")
(3,1)
(4,printLine("Sleep time possibly too long")
(5,)
(6,*countPtr1)
(7,count)
(8,countPtr1)
(9,count)
(10,count = *countPtr1)
(11,count)
(12,countPtr1)
(13,count)
(14,*countPtr1 = count)
(15,"Sleep time possibly too long")
(16,&count)
(17,count)
(18,countPtr2)
(19,count)
(20,count)
(21,)
(22,countPtr2)
(23,count = -1)
(24,-1)
(25,count)
(26,*countPtr1)
(27,*countPtr1 = &count)
(28,stdin)
(29,count)
(30,&count)
(31,&count)
(32,fscanf(stdin, "%d", &count)
(33,countPtr1)
(34,count)
(35,SLEEP(count)
(36,countPtr1)
(37,count = *countPtr2)
(38,count)
(39,RET)
(40,countPtr2)
(41,*countPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^