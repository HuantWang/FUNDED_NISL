-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_31_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        int countCopy = count;
        int count = countCopy;
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
57,60
58,59
59,60
59,61
61,62
61,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
81,82
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
89,90
89,91
90,91
92,93
92,94
93,94
93,95
94,95
97,98
99,100
100,101
102,103
103,104
104,105
104,106
105,106
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,62,65,68,70,73,78,80,82,87,88,91,95,96,98,101,106,107
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
85,86
85,87
89,90
89,91
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_31_bad(){    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_31_bad()
CWE400_Resource_Exhaustion__fgets_for_loop_31_bad
{    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
int countCopy = count;
int countCopy = count;
int
countCopy = count
countCopy
= count
count
count
int count = countCopy;
int count = countCopy;
int
count = countCopy
count
= countCopy
countCopy
countCopy
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(52,15,0)
(4,25,0)
(2,51,0)
(1,32,0)
(28,39,0)
(31,46,0)
(8,52,0)
(25,9,0)
(27,52,0)
(52,8,0)
(20,54,0)
(50,45,0)
(7,45,0)
(1,12,0)
(43,26,0)
(29,9,0)
(10,54,0)
(12,41,0)
(41,22,0)
(21,1,0)
(53,42,0)
(32,1,0)
(35,53,0)
(40,1,0)
(6,41,0)
(51,45,0)
(11,3,0)
(49,22,0)
(16,50,0)
(50,11,0)
(30,32,0)
(47,12,0)
(36,12,0)
(26,25,0)
(45,22,0)
(45,51,0)
(18,1,0)
(44,50,0)
(5,31,0)
(33,26,0)
(13,20,0)
(14,12,0)
(15,52,0)
(17,41,0)
(34,11,0)
(37,39,0)
(23,25,0)
(19,54,0)
(8,54,0)
(39,9,0)
(11,14,0)
(24,9,0)
(52,39,0)
(48,8,0)
(39,50,0)
(14,11,0)
(50,9,0)
(38,14,0)
(9,22,0)
(32,1,1)
(5,8,1)
(1,18,1)
(36,47,1)
(31,5,1)
(50,45,1)
(28,37,1)
(18,21,1)
(27,48,1)
(1,12,1)
(2,7,1)
(39,28,1)
(37,50,1)
(8,52,1)
(54,19,1)
(32,30,1)
(21,40,1)
(50,11,1)
(52,27,1)
(33,43,1)
(14,38,1)
(19,10,1)
(20,54,1)
(0,8,1)
(51,2,1)
(13,31,1)
(14,12,1)
(50,44,1)
(8,54,1)
(35,32,1)
(52,15,1)
(38,34,1)
(45,51,1)
(11,14,1)
(16,11,1)
(52,39,1)
(26,33,1)
(53,35,1)
(16,53,1)
(39,50,1)
(47,45,1)
(40,12,1)
(44,16,1)
(20,13,1)
(48,20,1)
(12,36,1)
(30,1,1)
(34,32,1)
(10,26,1)
(48,54,1)
(43,39,1)
(27,8,2)
(8,54,2)
(50,45,2)
(20,8,2)
(48,8,2)
(52,39,2)
(31,8,2)
(38,32,2)
(20,54,2)
(8,52,2)
(11,14,2)
(5,8,2)
(52,8,2)
(8,8,2)
(45,51,2)
(50,11,2)
(11,32,2)
(13,8,2)
(1,12,2)
(32,1,2)
(35,32,2)
(53,32,2)
(39,50,2)
(14,32,2)
(34,32,2)
(52,15,2)
(14,12,2)
-----------------------------------
(0,RET)
(1,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,1)
(3,)
(4,i)
(5,"Hello")
(6,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,count)
(8,i < (size_t)
(9,)
(10,i)
(11,count = atoi(inputBuffer)
(12,inputBuffer[CHAR_ARRAY_SIZE] = "")
(13,i)
(14,atoi(inputBuffer)
(15,size_t)
(16,countCopy)
(17,inputBuffer)
(18,stdin)
(19,0)
(20,i++)
(21,CHAR_ARRAY_SIZE)
(22,)
(23,for (i = 0; i < (size_t)
(24,count)
(25,)
(26,i = 0)
(27,count)
(28,countCopy)
(29,countCopy)
(30,NULL)
(31,printLine("Hello")
(32,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,0)
(34,count)
(35,"fgets()
(36,"")
(37,count)
(38,inputBuffer)
(39,count = countCopy)
(40,inputBuffer)
(41,)
(42,)
(43,i)
(44,count)
(45,count = -1)
(46,)
(47,inputBuffer)
(48,i)
(49,count)
(50,countCopy = count)
(51,-1)
(52,(size_t)
(53,printLine("fgets()
(54,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^