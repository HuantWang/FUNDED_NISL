-----label-----
1
-----code-----
void reader_read_process(struct dir_ent *dir_ent)
{
	struct inode_info *inode = dir_ent->inode;
	struct file_buffer *prev_buffer = NULL, *file_buffer;
	int status, res, byte;
	int file = get_pseudo_file(inode->pseudo_id)->fd;
	int child = get_pseudo_file(inode->pseudo_id)->child;
	long long bytes = 0;

	while(1) {
		file_buffer = cache_get_nohash(reader_buffer);
		file_buffer->sequence = seq ++;
		file_buffer->noD = inode->noD;

		byte = read_bytes(file, file_buffer->data, block_size);
		if(byte == -1)
			goto read_err;

		file_buffer->size = byte;
		file_buffer->file_size = -1;
		file_buffer->error = FALSE;
		file_buffer->fragment = FALSE;
		bytes += byte;

		if(byte == 0)
			break;

		/*
		 * Update progress bar size.  This is done
		 * on every block rather than waiting for all blocks to be
		 * read incase write_file_process() is running in parallel
		 * with this.  Otherwise the current progress bar position
		 * may get ahead of the progress bar size.
		 */
		progress_bar_size(1);

		if(prev_buffer)
			put_file_buffer(prev_buffer);
		prev_buffer = file_buffer;
	}

	/*
 	 * Update inode file size now that the size of the dynamic pseudo file
	 * is known.  This is needed for the -info option.
	 */
	inode->buf.st_size = bytes;

	res = waitpid(child, &status, 0);
	if(res == -1 || !WIFEXITED(status) || WEXITSTATUS(status) != 0)
		goto read_err;

	if(prev_buffer == NULL)
		prev_buffer = file_buffer;
	else {
		cache_block_put(file_buffer);
		seq --;
	}
	prev_buffer->file_size = bytes;
	prev_buffer->fragment = is_fragment(inode);
	put_file_buffer(prev_buffer);

	return;

read_err:
	if(prev_buffer) {
		cache_block_put(file_buffer);
		seq --;
		file_buffer = prev_buffer;
	}
	file_buffer->error = TRUE;
	put_file_buffer(file_buffer);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
25,26
25,27
25,28
26,27
28,29
28,30
28,31
31,32
32,33
34,35
34,36
37,38
38,39
38,40
38,41
38,42
40,41
42,43
44,45
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
53,55
54,55
56,57
56,58
57,58
61,62
62,63
62,64
64,65
64,66
66,67
67,68
67,69
68,69
68,70
69,70
71,72
71,73
72,73
76,77
77,78
77,79
79,80
79,81
81,82
83,84
83,85
85,86
85,87
85,88
85,89
85,90
85,91
85,92
85,93
85,94
85,95
85,96
85,97
85,98
85,99
86,87
87,88
87,89
88,89
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
97,99
98,99
101,102
102,103
104,105
105,106
105,107
106,107
106,108
107,108
110,111
110,112
111,112
114,115
115,116
115,117
116,117
118,119
118,120
118,121
118,122
119,120
121,122
123,124
123,125
124,125
127,128
129,130
129,131
130,131
130,132
131,132
133,134
135,136
137,138
138,139
138,140
139,140
139,141
140,141
143,144
145,146
146,147
146,148
147,148
147,149
148,149
151,152
153,154
154,155
154,156
155,156
155,157
156,157
159,160
161,162
162,163
162,164
163,164
163,165
164,165
167,168
169,170
170,171
170,172
171,172
173,174
175,176
175,177
176,177
176,178
177,178
181,182
182,183
182,184
183,184
186,187
186,188
187,188
189,190
190,191
190,192
191,192
193,194
195,196
196,197
196,198
197,198
199,200
201,202
202,203
202,204
203,204
203,205
204,205
204,206
205,206
209,210
211,212
212,213
212,214
213,214
215,216
215,217
215,218
215,219
216,217
218,219
220,221
221,222
224,225
224,226
225,226
225,227
226,227
226,228
227,228
227,229
228,229
230,231
232,233
233,234
233,235
234,235
236,237
238,239
238,240
239,240
239,241
240,241
242,243
245,246
247,248
247,249
247,250
248,249
248,250
249,250
251,252
253,254
254,255
254,256
255,256
257,258
259,260
259,261
260,261
261,262
261,263
262,263
264,265
266,267
267,268
268,269
270,271
271,272
271,273
272,273
272,274
273,274
276,277
278,279
279,280
279,281
280,281
280,282
281,282
284,285
284,286
285,286
287,288
289,290
290,291
290,292
291,292
293,294
296,297
296,298
298,299
298,300
299,300
301,302
301,303
301,304
302,303
303,304
303,305
304,305
306,307
308,309
309,310
310,311
312,313
313,314
313,315
314,315
316,317
318,319
319,320
319,321
320,321
320,322
321,322
324,325
326,327
327,328
327,329
328,329
330,331
-----nextToken-----
2,4,7,9,10,15,17,18,22,23,27,29,30,33,35,36,39,41,43,45,48,50,55,58,59,60,63,65,70,73,74,75,78,80,82,84,89,92,94,99,100,103,108,109,112,113,117,120,122,125,126,128,132,134,136,141,142,144,149,150,152,157,158,160,165,166,168,172,174,178,179,180,184,185,188,192,194,198,200,206,207,208,210,214,217,219,222,223,229,231,235,237,241,243,244,246,250,252,256,258,263,265,269,274,275,277,282,283,286,288,292,294,295,297,300,305,307,311,315,317,322,323,325,329,331
-----computeFrom-----
87,88
87,89
96,97
96,98
105,106
105,107
115,116
115,117
130,131
130,132
138,139
138,140
146,147
146,148
154,155
154,156
162,163
162,164
170,171
170,172
176,177
176,178
196,197
196,198
202,203
202,204
212,213
212,214
225,226
225,227
226,227
226,228
227,228
227,229
238,239
238,240
248,249
248,250
254,255
254,256
271,272
271,273
279,280
279,281
313,314
313,315
319,320
319,321
-----guardedBy-----
250,256
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void reader_read_process(struct dir_ent *dir_ent){	struct inode_info *inode = dir_ent->inode;	struct file_buffer *prev_buffer = NULL, *file_buffer;	int status, res, byte;	int file = get_pseudo_file(inode->pseudo_id)->fd;	int child = get_pseudo_file(inode->pseudo_id)->child;	long long bytes = 0;	while(1) {		file_buffer = cache_get_nohash(reader_buffer);		file_buffer->sequence = seq ++;		file_buffer->noD = inode->noD;		byte = read_bytes(file, file_buffer->data, block_size);		if(byte == -1)			goto read_err;		file_buffer->size = byte;		file_buffer->file_size = -1;		file_buffer->error = FALSE;		file_buffer->fragment = FALSE;		bytes += byte;		if(byte == 0)			break;		/*		 * Update progress bar size.  This is done		 * on every block rather than waiting for all blocks to be		 * read incase write_file_process() is running in parallel		 * with this.  Otherwise the current progress bar position		 * may get ahead of the progress bar size.		 */		progress_bar_size(1);		if(prev_buffer)			put_file_buffer(prev_buffer);		prev_buffer = file_buffer;	}	/* 	 * Update inode file size now that the size of the dynamic pseudo file	 * is known.  This is needed for the -info option.	 */	inode->buf.st_size = bytes;	res = waitpid(child, &status, 0);	if(res == -1 || !WIFEXITED(status) || WEXITSTATUS(status) != 0)		goto read_err;	if(prev_buffer == NULL)		prev_buffer = file_buffer;	else {		cache_block_put(file_buffer);		seq --;	}	prev_buffer->file_size = bytes;	prev_buffer->fragment = is_fragment(inode);	put_file_buffer(prev_buffer);	return;read_err:	if(prev_buffer) {		cache_block_put(file_buffer);		seq --;		file_buffer = prev_buffer;	}	file_buffer->error = TRUE;	put_file_buffer(file_buffer);}
void
reader_read_process(struct dir_ent *dir_ent)
reader_read_process
struct dir_ent *dir_ent
struct dir_ent
dir_ent
*dir_ent
*
dir_ent
{	struct inode_info *inode = dir_ent->inode;	struct file_buffer *prev_buffer = NULL, *file_buffer;	int status, res, byte;	int file = get_pseudo_file(inode->pseudo_id)->fd;	int child = get_pseudo_file(inode->pseudo_id)->child;	long long bytes = 0;	while(1) {		file_buffer = cache_get_nohash(reader_buffer);		file_buffer->sequence = seq ++;		file_buffer->noD = inode->noD;		byte = read_bytes(file, file_buffer->data, block_size);		if(byte == -1)			goto read_err;		file_buffer->size = byte;		file_buffer->file_size = -1;		file_buffer->error = FALSE;		file_buffer->fragment = FALSE;		bytes += byte;		if(byte == 0)			break;		/*		 * Update progress bar size.  This is done		 * on every block rather than waiting for all blocks to be		 * read incase write_file_process() is running in parallel		 * with this.  Otherwise the current progress bar position		 * may get ahead of the progress bar size.		 */		progress_bar_size(1);		if(prev_buffer)			put_file_buffer(prev_buffer);		prev_buffer = file_buffer;	}	/* 	 * Update inode file size now that the size of the dynamic pseudo file	 * is known.  This is needed for the -info option.	 */	inode->buf.st_size = bytes;	res = waitpid(child, &status, 0);	if(res == -1 || !WIFEXITED(status) || WEXITSTATUS(status) != 0)		goto read_err;	if(prev_buffer == NULL)		prev_buffer = file_buffer;	else {		cache_block_put(file_buffer);		seq --;	}	prev_buffer->file_size = bytes;	prev_buffer->fragment = is_fragment(inode);	put_file_buffer(prev_buffer);	return;read_err:	if(prev_buffer) {		cache_block_put(file_buffer);		seq --;		file_buffer = prev_buffer;	}	file_buffer->error = TRUE;	put_file_buffer(file_buffer);}
struct inode_info *inode = dir_ent->inode;
struct inode_info *inode = dir_ent->inode;
struct inode_info
inode_info
*inode = dir_ent->inode
*
inode
= dir_ent->inode
dir_ent->inode
dir_ent
dir_ent
inode
struct file_buffer *prev_buffer = NULL, *file_buffer;
struct file_buffer *prev_buffer = NULL, *file_buffer;
struct file_buffer
file_buffer
*prev_buffer = NULL
*
prev_buffer
= NULL
NULL
NULL
*file_buffer
*
file_buffer
int status, res, byte;
int status, res, byte;
int
status
status
res
res
byte
byte
int file = get_pseudo_file(inode->pseudo_id)->fd;
int file = get_pseudo_file(inode->pseudo_id)->fd;
int
file = get_pseudo_file(inode->pseudo_id)->fd
file
= get_pseudo_file(inode->pseudo_id)->fd
get_pseudo_file(inode->pseudo_id)->fd
get_pseudo_file(inode->pseudo_id)
get_pseudo_file
get_pseudo_file
inode->pseudo_id
inode
inode
pseudo_id
fd
int child = get_pseudo_file(inode->pseudo_id)->child;
int child = get_pseudo_file(inode->pseudo_id)->child;
int
child = get_pseudo_file(inode->pseudo_id)->child
child
= get_pseudo_file(inode->pseudo_id)->child
get_pseudo_file(inode->pseudo_id)->child
get_pseudo_file(inode->pseudo_id)
get_pseudo_file
get_pseudo_file
inode->pseudo_id
inode
inode
pseudo_id
child
long long bytes = 0;
long long bytes = 0;
long long
bytes = 0
bytes
= 0
0
while(1) {		file_buffer = cache_get_nohash(reader_buffer);		file_buffer->sequence = seq ++;		file_buffer->noD = inode->noD;		byte = read_bytes(file, file_buffer->data, block_size);		if(byte == -1)			goto read_err;		file_buffer->size = byte;		file_buffer->file_size = -1;		file_buffer->error = FALSE;		file_buffer->fragment = FALSE;		bytes += byte;		if(byte == 0)			break;		/*		 * Update progress bar size.  This is done		 * on every block rather than waiting for all blocks to be		 * read incase write_file_process() is running in parallel		 * with this.  Otherwise the current progress bar position		 * may get ahead of the progress bar size.		 */		progress_bar_size(1);		if(prev_buffer)			put_file_buffer(prev_buffer);		prev_buffer = file_buffer;	}
1
{		file_buffer = cache_get_nohash(reader_buffer);		file_buffer->sequence = seq ++;		file_buffer->noD = inode->noD;		byte = read_bytes(file, file_buffer->data, block_size);		if(byte == -1)			goto read_err;		file_buffer->size = byte;		file_buffer->file_size = -1;		file_buffer->error = FALSE;		file_buffer->fragment = FALSE;		bytes += byte;		if(byte == 0)			break;		/*		 * Update progress bar size.  This is done		 * on every block rather than waiting for all blocks to be		 * read incase write_file_process() is running in parallel		 * with this.  Otherwise the current progress bar position		 * may get ahead of the progress bar size.		 */		progress_bar_size(1);		if(prev_buffer)			put_file_buffer(prev_buffer);		prev_buffer = file_buffer;	}
file_buffer = cache_get_nohash(reader_buffer);
file_buffer = cache_get_nohash(reader_buffer)
file_buffer
file_buffer
cache_get_nohash(reader_buffer)
cache_get_nohash
cache_get_nohash
reader_buffer
reader_buffer
file_buffer->sequence = seq ++;
file_buffer->sequence = seq ++
file_buffer->sequence
file_buffer
file_buffer
sequence
seq ++
seq
seq
file_buffer->noD = inode->noD;
file_buffer->noD = inode->noD
file_buffer->noD
file_buffer
file_buffer
noD
inode->noD
inode
inode
noD
byte = read_bytes(file, file_buffer->data, block_size);
byte = read_bytes(file, file_buffer->data, block_size)
byte
byte
read_bytes(file, file_buffer->data, block_size)
read_bytes
read_bytes
file
file
file_buffer->data
file_buffer
file_buffer
data
block_size
block_size
if(byte == -1)			goto read_err;
byte == -1
byte
byte
-1
1
goto read_err;
read_err
file_buffer->size = byte;
file_buffer->size = byte
file_buffer->size
file_buffer
file_buffer
size
byte
byte
file_buffer->file_size = -1;
file_buffer->file_size = -1
file_buffer->file_size
file_buffer
file_buffer
file_size
-1
1
file_buffer->error = FALSE;
file_buffer->error = FALSE
file_buffer->error
file_buffer
file_buffer
error
FALSE
FALSE
file_buffer->fragment = FALSE;
file_buffer->fragment = FALSE
file_buffer->fragment
file_buffer
file_buffer
fragment
FALSE
FALSE
bytes += byte;
bytes += byte
bytes
bytes
byte
byte
if(byte == 0)			break;
byte == 0
byte
byte
0
break;
progress_bar_size(1);
progress_bar_size(1)
progress_bar_size
progress_bar_size
1
if(prev_buffer)			put_file_buffer(prev_buffer);
prev_buffer
prev_buffer
put_file_buffer(prev_buffer);
put_file_buffer(prev_buffer)
put_file_buffer
put_file_buffer
prev_buffer
prev_buffer
prev_buffer = file_buffer;
prev_buffer = file_buffer
prev_buffer
prev_buffer
file_buffer
file_buffer
inode->buf.st_size = bytes;
inode->buf.st_size = bytes
inode->buf.st_size
inode->buf
inode
inode
buf
st_size
bytes
bytes
res = waitpid(child, &status, 0);
res = waitpid(child, &status, 0)
res
res
waitpid(child, &status, 0)
waitpid
waitpid
child
child
&status
status
status
0
if(res == -1 || !WIFEXITED(status) || WEXITSTATUS(status) != 0)		goto read_err;
res == -1 || !WIFEXITED(status) || WEXITSTATUS(status) != 0
res == -1 || !WIFEXITED(status)
res == -1
res
res
-1
1
!WIFEXITED(status)
WIFEXITED(status)
WIFEXITED
WIFEXITED
status
status
WEXITSTATUS(status) != 0
WEXITSTATUS(status)
WEXITSTATUS
WEXITSTATUS
status
status
0
goto read_err;
read_err
if(prev_buffer == NULL)		prev_buffer = file_buffer;	else {		cache_block_put(file_buffer);		seq --;	}
prev_buffer == NULL
prev_buffer
prev_buffer
NULL
NULL
prev_buffer = file_buffer;
prev_buffer = file_buffer
prev_buffer
prev_buffer
file_buffer
file_buffer
{		cache_block_put(file_buffer);		seq --;	}
cache_block_put(file_buffer);
cache_block_put(file_buffer)
cache_block_put
cache_block_put
file_buffer
file_buffer
seq --;
seq --
seq
seq
prev_buffer->file_size = bytes;
prev_buffer->file_size = bytes
prev_buffer->file_size
prev_buffer
prev_buffer
file_size
bytes
bytes
prev_buffer->fragment = is_fragment(inode);
prev_buffer->fragment = is_fragment(inode)
prev_buffer->fragment
prev_buffer
prev_buffer
fragment
is_fragment(inode)
is_fragment
is_fragment
inode
inode
put_file_buffer(prev_buffer);
put_file_buffer(prev_buffer)
put_file_buffer
put_file_buffer
prev_buffer
prev_buffer
return;
read_err:	if(prev_buffer) {		cache_block_put(file_buffer);		seq --;		file_buffer = prev_buffer;	}
read_err
if(prev_buffer) {		cache_block_put(file_buffer);		seq --;		file_buffer = prev_buffer;	}
prev_buffer
prev_buffer
{		cache_block_put(file_buffer);		seq --;		file_buffer = prev_buffer;	}
cache_block_put(file_buffer);
cache_block_put(file_buffer)
cache_block_put
cache_block_put
file_buffer
file_buffer
seq --;
seq --
seq
seq
file_buffer = prev_buffer;
file_buffer = prev_buffer
file_buffer
file_buffer
prev_buffer
prev_buffer
file_buffer->error = TRUE;
file_buffer->error = TRUE
file_buffer->error
file_buffer
file_buffer
error
TRUE
TRUE
put_file_buffer(file_buffer);
put_file_buffer(file_buffer)
put_file_buffer
put_file_buffer
file_buffer
file_buffer
-----joern-----
(150,140,0)
(167,63,0)
(7,107,0)
(39,126,0)
(175,107,0)
(166,82,0)
(124,114,0)
(51,129,0)
(138,161,0)
(178,140,0)
(156,21,0)
(36,88,0)
(97,140,0)
(135,107,0)
(134,64,0)
(34,161,0)
(179,181,0)
(131,1,0)
(128,183,0)
(175,92,0)
(148,4,0)
(169,43,0)
(104,53,0)
(55,171,0)
(158,43,0)
(25,118,0)
(90,124,0)
(40,53,0)
(60,107,0)
(76,159,0)
(42,21,0)
(55,122,0)
(52,43,0)
(160,70,0)
(26,27,0)
(133,140,0)
(82,124,0)
(37,169,0)
(142,16,0)
(11,144,0)
(40,118,0)
(53,107,0)
(181,46,0)
(119,122,0)
(161,43,0)
(82,60,0)
(8,181,0)
(33,92,0)
(86,107,0)
(133,64,0)
(114,107,0)
(169,55,0)
(100,46,0)
(170,12,0)
(183,118,0)
(109,84,0)
(146,107,0)
(126,141,0)
(145,40,0)
(163,0,0)
(10,122,0)
(65,107,0)
(13,104,0)
(57,97,0)
(136,53,0)
(158,84,0)
(6,138,0)
(100,79,0)
(172,106,0)
(30,55,0)
(104,156,0)
(61,57,0)
(1,178,0)
(28,100,0)
(52,178,0)
(0,107,0)
(54,158,0)
(158,178,0)
(122,107,0)
(59,108,0)
(1,43,0)
(159,107,0)
(40,19,0)
(127,97,0)
(144,103,0)
(85,19,0)
(94,161,0)
(58,43,0)
(168,141,0)
(112,72,0)
(130,46,0)
(89,78,0)
(51,84,0)
(62,12,0)
(137,32,0)
(12,60,0)
(75,51,0)
(19,46,0)
(153,92,0)
(46,140,0)
(14,171,0)
(114,171,0)
(24,73,0)
(121,128,0)
(123,107,0)
(138,0,0)
(68,63,0)
(44,1,0)
(108,59,0)
(79,140,0)
(96,169,0)
(77,38,0)
(129,107,0)
(130,107,0)
(114,122,0)
(70,125,0)
(169,84,0)
(66,140,0)
(26,175,0)
(31,107,0)
(101,150,0)
(106,50,0)
(79,78,0)
(116,69,0)
(21,156,0)
(49,99,0)
(2,23,0)
(73,60,0)
(29,23,0)
(88,46,0)
(124,82,0)
(151,103,0)
(174,183,0)
(16,160,0)
(158,107,0)
(99,140,0)
(118,40,0)
(18,46,0)
(57,46,0)
(161,69,0)
(78,60,0)
(17,21,0)
(171,140,0)
(103,144,0)
(143,107,0)
(152,107,0)
(95,43,0)
(4,99,0)
(91,26,0)
(60,12,0)
(32,50,0)
(84,46,0)
(115,171,0)
(160,16,0)
(125,60,0)
(156,104,0)
(164,46,0)
(18,69,0)
(64,133,0)
(171,118,0)
(161,178,0)
(103,108,0)
(113,82,0)
(110,27,0)
(26,59,0)
(92,38,0)
(4,46,0)
(93,51,0)
(182,178,0)
(171,171,0)
(12,35,0)
(68,108,0)
(46,88,0)
(83,140,0)
(118,140,0)
(102,72,0)
(157,126,0)
(3,101,0)
(126,46,0)
(108,68,0)
(181,133,0)
(147,83,0)
(27,26,0)
(70,160,0)
(125,70,0)
(72,118,0)
(92,16,0)
(176,107,0)
(132,107,0)
(173,78,0)
(149,116,0)
(81,84,0)
(19,40,0)
(183,128,0)
(59,26,0)
(154,57,0)
(23,46,0)
(120,140,0)
(23,150,0)
(45,140,0)
(16,107,0)
(180,178,0)
(78,79,0)
(141,118,0)
(21,60,0)
(51,178,0)
(20,19,0)
(139,130,0)
(171,122,0)
(130,161,0)
(141,140,0)
(71,60,0)
(155,138,0)
(74,107,0)
(51,43,0)
(150,101,0)
(15,160,0)
(165,52,0)
(53,104,0)
(47,18,0)
(87,114,0)
(105,100,0)
(117,107,0)
(169,178,0)
(63,68,0)
(129,73,0)
(55,107,0)
(138,46,0)
(178,46,0)
(43,107,0)
(56,175,0)
(108,103,0)
(73,129,0)
(67,107,0)
(5,125,0)
(80,4,0)
(92,175,0)
(32,46,0)
(41,125,0)
(177,40,0)
(38,92,0)
(51,93,1)
(161,34,1)
(141,168,1)
(103,151,1)
(178,182,1)
(162,111,1)
(102,171,1)
(151,144,1)
(121,174,1)
(51,43,1)
(114,122,1)
(32,46,1)
(39,183,1)
(60,12,1)
(6,162,1)
(8,179,1)
(109,81,1)
(63,167,1)
(44,131,1)
(163,138,1)
(178,46,1)
(136,43,1)
(138,155,1)
(4,46,1)
(68,63,1)
(37,106,1)
(126,46,1)
(138,161,1)
(34,94,1)
(139,0,1)
(80,148,1)
(95,58,1)
(99,49,1)
(40,19,1)
(2,29,1)
(138,46,1)
(179,141,1)
(37,84,1)
(124,82,1)
(129,73,1)
(89,173,1)
(148,133,1)
(144,11,1)
(114,87,1)
(150,101,1)
(18,47,1)
(25,79,1)
(183,128,1)
(164,98,1)
(108,103,1)
(131,59,1)
(103,144,1)
(75,55,1)
(73,24,1)
(97,127,1)
(1,43,1)
(57,61,1)
(130,161,1)
(154,99,1)
(171,115,1)
(51,178,1)
(128,121,1)
(40,177,1)
(137,1,1)
(58,60,1)
(42,17,1)
(10,119,1)
(12,35,1)
(175,92,1)
(87,124,1)
(0,163,1)
(29,46,1)
(57,46,1)
(21,60,1)
(13,156,1)
(160,15,1)
(180,9,1)
(161,43,1)
(55,122,1)
(126,157,1)
(18,46,1)
(170,71,1)
(3,23,1)
(113,22,1)
(46,88,1)
(167,26,1)
(181,8,1)
(82,60,1)
(112,102,1)
(158,178,1)
(94,116,1)
(76,159,1)
(173,100,1)
(28,105,1)
(134,181,1)
(182,180,1)
(172,32,1)
(115,14,1)
(98,122,1)
(104,156,1)
(26,175,1)
(40,53,1)
(51,84,1)
(6,161,1)
(98,178,1)
(100,28,1)
(181,46,1)
(159,158,1)
(47,162,1)
(73,60,1)
(22,72,1)
(171,118,1)
(43,95,1)
(116,149,1)
(106,172,1)
(113,98,1)
(49,4,1)
(79,78,1)
(16,160,1)
(32,137,1)
(157,39,1)
(1,178,1)
(48,183,1)
(84,46,1)
(78,60,1)
(125,41,1)
(92,38,1)
(11,68,1)
(55,30,1)
(171,122,1)
(155,6,1)
(62,170,1)
(124,90,1)
(36,164,1)
(77,153,1)
(133,64,1)
(78,89,1)
(12,62,1)
(23,46,1)
(169,43,1)
(4,80,1)
(93,75,1)
(96,37,1)
(169,178,1)
(72,118,1)
(76,130,1)
(5,142,1)
(52,178,1)
(160,70,1)
(14,97,1)
(122,10,1)
(156,21,1)
(161,178,1)
(84,109,1)
(130,139,1)
(52,43,1)
(145,25,1)
(20,145,1)
(101,3,1)
(166,113,1)
(59,108,1)
(158,43,1)
(30,169,1)
(100,46,1)
(54,129,1)
(88,36,1)
(142,53,1)
(41,5,1)
(26,27,1)
(141,118,1)
(61,154,1)
(90,82,1)
(55,171,1)
(153,56,1)
(169,96,1)
(92,16,1)
(171,171,1)
(9,83,1)
(183,118,1)
(52,165,1)
(19,85,1)
(180,52,1)
(174,118,1)
(56,114,1)
(33,38,1)
(114,171,1)
(38,77,1)
(158,84,1)
(53,104,1)
(81,1,1)
(85,20,1)
(64,134,1)
(168,126,1)
(91,175,1)
(104,13,1)
(110,91,1)
(177,19,1)
(147,72,1)
(19,46,1)
(111,59,1)
(21,42,1)
(125,60,1)
(130,46,1)
(23,2,1)
(83,147,1)
(82,166,1)
(92,33,1)
(165,9,1)
(162,48,1)
(17,136,1)
(169,84,1)
(15,70,1)
(72,112,1)
(105,150,1)
(149,18,1)
(158,54,1)
(1,44,1)
(127,57,1)
(118,40,1)
(70,125,1)
(27,110,1)
(59,26,1)
(108,68,1)
(119,16,1)
(24,51,1)
(114,122,2)
(162,183,2)
(156,21,2)
(32,1,2)
(57,183,2)
(97,183,2)
(126,46,2)
(3,98,2)
(103,68,2)
(83,72,2)
(92,16,2)
(141,118,2)
(19,98,2)
(34,162,2)
(108,103,2)
(98,72,2)
(68,26,2)
(124,82,2)
(166,72,2)
(52,43,2)
(46,98,2)
(78,60,2)
(9,72,2)
(161,178,2)
(169,84,2)
(154,183,2)
(60,12,2)
(27,98,2)
(118,98,2)
(96,59,2)
(4,46,2)
(130,183,2)
(21,60,2)
(172,1,2)
(79,98,2)
(183,128,2)
(48,183,2)
(99,183,2)
(144,68,2)
(138,161,2)
(129,73,2)
(22,72,2)
(168,183,2)
(149,162,2)
(70,125,2)
(114,72,2)
(108,68,2)
(1,59,2)
(2,98,2)
(92,72,2)
(23,98,2)
(39,183,2)
(94,162,2)
(138,59,2)
(171,171,2)
(64,183,2)
(78,98,2)
(181,46,2)
(159,59,2)
(46,88,2)
(179,183,2)
(54,59,2)
(14,183,2)
(112,183,2)
(51,84,2)
(114,171,2)
(88,98,2)
(158,59,2)
(77,98,2)
(27,72,2)
(153,98,2)
(169,43,2)
(183,98,2)
(91,72,2)
(92,98,2)
(59,108,2)
(72,183,2)
(26,27,2)
(44,59,2)
(100,98,2)
(61,183,2)
(163,59,2)
(109,1,2)
(171,122,2)
(133,183,2)
(37,59,2)
(29,98,2)
(40,19,2)
(113,72,2)
(36,98,2)
(30,59,2)
(100,46,2)
(118,40,2)
(182,72,2)
(26,175,2)
(19,46,2)
(157,183,2)
(26,98,2)
(18,162,2)
(1,178,2)
(160,70,2)
(180,72,2)
(92,38,2)
(91,98,2)
(167,26,2)
(139,183,2)
(102,183,2)
(12,35,2)
(76,159,2)
(174,98,2)
(32,46,2)
(169,59,2)
(51,59,2)
(89,98,2)
(153,72,2)
(171,183,2)
(23,46,2)
(178,72,2)
(87,72,2)
(108,26,2)
(82,98,2)
(171,118,2)
(93,59,2)
(68,63,2)
(4,183,2)
(6,59,2)
(52,9,2)
(53,104,2)
(38,98,2)
(151,68,2)
(166,98,2)
(84,1,2)
(73,60,2)
(175,72,2)
(40,53,2)
(51,178,2)
(49,183,2)
(0,59,2)
(90,98,2)
(55,59,2)
(59,98,2)
(82,72,2)
(169,178,2)
(133,64,2)
(138,183,2)
(175,98,2)
(161,43,2)
(164,98,2)
(73,59,2)
(103,144,2)
(175,92,2)
(80,183,2)
(28,98,2)
(165,9,2)
(57,46,2)
(81,1,2)
(77,72,2)
(55,171,2)
(8,183,2)
(155,183,2)
(18,46,2)
(141,183,2)
(178,46,2)
(158,84,2)
(79,78,2)
(127,183,2)
(137,1,2)
(150,98,2)
(90,72,2)
(124,72,2)
(33,72,2)
(134,183,2)
(75,59,2)
(155,59,2)
(26,72,2)
(52,178,2)
(59,26,2)
(6,183,2)
(131,59,2)
(101,98,2)
(59,72,2)
(158,178,2)
(24,59,2)
(40,98,2)
(63,26,2)
(114,98,2)
(25,98,2)
(72,118,2)
(0,183,2)
(33,98,2)
(38,72,2)
(124,98,2)
(110,98,2)
(82,60,2)
(139,59,2)
(130,59,2)
(183,118,2)
(173,98,2)
(145,98,2)
(110,72,2)
(106,1,2)
(181,183,2)
(161,162,2)
(121,98,2)
(177,98,2)
(16,160,2)
(130,46,2)
(113,98,2)
(51,43,2)
(150,101,2)
(104,156,2)
(116,162,2)
(162,59,2)
(111,59,2)
(115,183,2)
(125,60,2)
(85,98,2)
(130,161,2)
(56,72,2)
(138,46,2)
(163,183,2)
(129,59,2)
(158,43,2)
(11,68,2)
(47,162,2)
(147,72,2)
(126,183,2)
(20,98,2)
(87,98,2)
(148,183,2)
(56,98,2)
(55,122,2)
(84,46,2)
(128,98,2)
(105,98,2)
(1,43,2)
-----------------------------------
(0,file_buffer->error = TRUE)
(1,prev_buffer == NULL)
(2,sequence)
(3,seq)
(4,file_buffer->error)
(5,inode)
(6,file_buffer)
(7,prev_buffer)
(8,file_size)
(9,prev_buffer)
(10,0)
(11,status)
(12,dir_ent->inode)
(13,fd)
(14,bytes)
(15,child)
(16,child = get_pseudo_file(inode->pseudo_id)
(17,inode)
(18,cache_block_put(file_buffer)
(19,file_buffer->data)
(20,file_buffer)
(21,inode->pseudo_id)
(22,break;)
(23,file_buffer->sequence)
(24,inode)
(25,byte)
(26,res == -1)
(27,-1)
(28,noD)
(29,file_buffer)
(30,bytes)
(31,if(prev_buffer == NULL)
(32,cache_block_put(file_buffer)
(33,0)
(34,prev_buffer)
(35,struct dir_ent *dir_ent)
(36,reader_buffer)
(37,prev_buffer)
(38,&status)
(39,file_buffer)
(40,read_bytes(file, file_buffer->data, block_size)
(41,pseudo_id)
(42,pseudo_id)
(43,*prev_buffer = NULL)
(44,NULL)
(45,if(prev_buffer)
(46,file_buffer = cache_get_nohash(reader_buffer)
(47,file_buffer)
(48,goto read_err;)
(49,FALSE)
(50,)
(51,prev_buffer->fragment)
(52,put_file_buffer(prev_buffer)
(53,file = get_pseudo_file(inode->pseudo_id)
(54,prev_buffer)
(55,prev_buffer->file_size = bytes)
(56,res)
(57,file_buffer->fragment)
(58,prev_buffer)
(59,res == -1 || !WIFEXITED(status)
(60,*inode = dir_ent->inode)
(61,fragment)
(62,inode)
(63,WIFEXITED(status)
(64,-1)
(65,file_buffer)
(66,if(byte == -1)
(67,if(prev_buffer)
(68,!WIFEXITED(status)
(69,)
(70,get_pseudo_file(inode->pseudo_id)
(71,inode)
(72,byte == 0)
(73,is_fragment(inode)
(74,child)
(75,prev_buffer)
(76,RET)
(77,status)
(78,inode->noD)
(79,file_buffer->noD = inode->noD)
(80,error)
(81,prev_buffer)
(82,inode->buf)
(83,progress_bar_size(1)
(84,prev_buffer = file_buffer)
(85,data)
(86,bytes)
(87,bytes)
(88,cache_get_nohash(reader_buffer)
(89,noD)
(90,st_size)
(91,res)
(92,waitpid(child, &status, 0)
(93,fragment)
(94,file_buffer)
(95,NULL)
(96,file_size)
(97,file_buffer->fragment = FALSE)
(98,1)
(99,file_buffer->error = FALSE)
(100,file_buffer->noD)
(101,seq ++)
(102,byte)
(103,WEXITSTATUS(status)
(104,get_pseudo_file(inode->pseudo_id)
(105,file_buffer)
(106,seq --)
(107,)
(108,!WIFEXITED(status)
(109,file_buffer)
(110,1)
(111,goto read_err;)
(112,0)
(113,inode)
(114,inode->buf.st_size = bytes)
(115,byte)
(116,seq --)
(117,inode)
(118,byte = read_bytes(file, file_buffer->data, block_size)
(119,bytes)
(120,if(byte == 0)
(121,1)
(122,bytes = 0)
(123,file)
(124,inode->buf.st_size)
(125,inode->pseudo_id)
(126,file_buffer->size)
(127,FALSE)
(128,-1)
(129,prev_buffer->fragment = is_fragment(inode)
(130,put_file_buffer(file_buffer)
(131,prev_buffer)
(132,res)
(133,file_buffer->file_size = -1)
(134,1)
(135,byte)
(136,file)
(137,file_buffer)
(138,file_buffer->error)
(139,file_buffer)
(140,)
(141,file_buffer->size = byte)
(142,child)
(143,if(res == -1 || !WIFEXITED(status)
(144,WEXITSTATUS(status)
(145,file)
(146,read_err:)
(147,1)
(148,file_buffer)
(149,seq)
(150,file_buffer->sequence = seq ++)
(151,0)
(152,status)
(153,child)
(154,file_buffer)
(155,error)
(156,get_pseudo_file(inode->pseudo_id)
(157,size)
(158,put_file_buffer(prev_buffer)
(159,return;)
(160,get_pseudo_file(inode->pseudo_id)
(161,file_buffer = prev_buffer)
(162,prev_buffer)
(163,TRUE)
(164,file_buffer)
(165,prev_buffer)
(166,buf)
(167,status)
(168,byte)
(169,prev_buffer->file_size)
(170,dir_ent)
(171,bytes += byte)
(172,seq)
(173,inode)
(174,byte)
(175,res = waitpid(child, &status, 0)
(176,while(1)
(177,block_size)
(178,prev_buffer = file_buffer)
(179,file_buffer)
(180,prev_buffer)
(181,file_buffer->file_size)
(182,file_buffer)
(183,byte == -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^