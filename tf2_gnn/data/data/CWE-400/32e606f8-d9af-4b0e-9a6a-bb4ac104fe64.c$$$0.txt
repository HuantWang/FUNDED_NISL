-----label-----
0
-----code-----
static void good1()
{
    goto sink;
sink:
    {
        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wchar_t * tmpData;
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
        /* FIX: Ensure realloc() was successful before assigning data to the memory block
        * allocated with realloc() */
        if (tmpData != NULL)
        {
            data = tmpData;
            /* Reinitialize and make use of data */
            wcscpy(data, L"New String");
            printWLine(data);
        }
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
8,9
8,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
48,49
48,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
68,69
68,70
69,70
69,71
71,72
73,74
73,75
73,76
74,75
76,77
78,79
78,80
79,80
81,82
82,83
82,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
91,93
91,94
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
99,102
100,101
102,103
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
-----nextToken-----
2,4,7,9,13,15,16,20,22,25,27,30,31,35,37,42,44,47,49,50,54,56,57,61,63,67,70,72,75,77,80,83,84,88,90,95,97,101,103,104,108,110,114,116
-----computeFrom-----
26,27
26,28
33,34
33,35
65,66
65,67
78,79
78,80
86,87
86,88
93,94
93,95
-----guardedBy-----
88,97
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    goto sink;sink:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wchar_t * tmpData;        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }        free(data);    }}
static void
good1()
good1
{    goto sink;sink:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wchar_t * tmpData;        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }        free(data);    }}
goto sink;
sink
sink:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wchar_t * tmpData;        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }        free(data);    }
sink
{        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wchar_t * tmpData;        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }        free(data);    }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wchar_t * tmpData;
wchar_t * tmpData;
wchar_t
* tmpData
*
tmpData
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
tmpData
tmpData
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(2,19,0)
(19,25,0)
(38,19,0)
(1,40,0)
(3,22,0)
(23,2,0)
(15,24,0)
(11,30,0)
(24,13,0)
(5,19,0)
(14,12,0)
(13,17,0)
(46,26,0)
(26,46,0)
(44,32,0)
(34,31,0)
(40,1,0)
(45,17,0)
(33,40,0)
(19,13,0)
(32,34,0)
(43,27,0)
(8,17,0)
(12,40,0)
(0,26,0)
(9,32,0)
(36,30,0)
(26,18,0)
(34,46,0)
(34,32,0)
(42,17,0)
(31,34,0)
(12,14,0)
(1,13,0)
(16,42,0)
(35,12,0)
(2,17,0)
(1,41,0)
(43,29,0)
(20,14,0)
(47,17,0)
(21,27,0)
(27,43,0)
(42,32,0)
(22,25,0)
(37,13,0)
(6,9,0)
(13,1,0)
(46,34,0)
(39,17,0)
(2,32,0)
(40,12,0)
(17,30,0)
(4,24,0)
(32,17,0)
(18,26,0)
(40,32,0)
(41,1,0)
(7,18,0)
(22,19,0)
(10,9,0)
(9,32,1)
(6,32,1)
(15,13,1)
(1,41,1)
(32,34,1)
(22,3,1)
(20,35,1)
(42,32,1)
(37,42,1)
(9,10,1)
(2,23,1)
(42,16,1)
(40,12,1)
(43,27,1)
(35,33,1)
(24,4,1)
(2,32,1)
(46,26,1)
(44,36,1)
(33,37,1)
(23,22,1)
(21,9,1)
(16,9,1)
(10,6,1)
(13,1,1)
(24,13,1)
(38,5,1)
(14,20,1)
(40,32,1)
(5,24,1)
(27,21,1)
(18,7,1)
(26,18,1)
(7,0,1)
(16,43,1)
(19,38,1)
(19,13,1)
(28,2,1)
(0,44,1)
(23,24,1)
(4,15,1)
(34,31,1)
(22,19,1)
(2,19,1)
(12,14,1)
(3,19,1)
(1,40,1)
(34,46,1)
(46,26,2)
(38,24,2)
(1,41,2)
(43,9,2)
(40,32,2)
(32,34,2)
(27,9,2)
(34,46,2)
(13,1,2)
(22,19,2)
(3,24,2)
(21,9,2)
(1,40,2)
(2,19,2)
(43,27,2)
(42,32,2)
(2,32,2)
(34,31,2)
(9,32,2)
(19,13,2)
(19,24,2)
(12,14,2)
(22,24,2)
(5,24,2)
(24,13,2)
(40,12,2)
(26,18,2)
-----------------------------------
(0,100)
(1,(wchar_t *)
(2,free(data)
(3,data)
(4,NULL)
(5,data)
(6,data)
(7,wchar_t)
(8,tmpData)
(9,data == NULL)
(10,NULL)
(11,sink:)
(12,(130000)
(13,tmpData = (wchar_t *)
(14,sizeof(wchar_t)
(15,tmpData)
(16,data)
(17,)
(18,sizeof(wchar_t)
(19,data = tmpData)
(20,wchar_t)
(21,1)
(22,printWLine(data)
(23,data)
(24,tmpData != NULL)
(25,)
(26,100*sizeof(wchar_t)
(27,-1)
(28,RET)
(29,)
(30,)
(31,wchar_t *)
(32,* data = (wchar_t *)
(33,data)
(34,(wchar_t *)
(35,130000)
(36,goto sink;)
(37,tmpData)
(38,tmpData)
(39,if (data == NULL)
(40,realloc(data, (130000)
(41,wchar_t *)
(42,printWLine(data)
(43,exit(-1)
(44,data)
(45,if (tmpData != NULL)
(46,malloc(100*sizeof(wchar_t)
(47,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^