-----label-----
0
-----code-----
static void goodG2B1()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize then use data */
        wcscpy(data, L"a string");
        printWLine(data);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
23,24
24,25
24,26
25,26
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
58,59
60,61
60,62
61,62
62,63
64,65
-----nextToken-----
2,4,8,10,11,15,17,21,26,27,32,35,37,40,42,45,46,50,52,53,57,59,63,65
-----computeFrom-----
13,14
13,15
30,31
30,32
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    wchar_t * data;    data = NULL;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    wchar_t * data;    data = NULL;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"a string");
wcscpy(data, L"a string")
wcscpy
wcscpy
data
data
L"a string"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(1,17,0)
(4,1,0)
(11,15,0)
(13,23,0)
(19,6,0)
(10,11,0)
(21,0,0)
(20,23,0)
(18,8,0)
(2,6,0)
(6,2,0)
(11,2,0)
(16,23,0)
(6,19,0)
(6,1,0)
(1,6,0)
(22,15,0)
(0,23,0)
(2,11,0)
(3,1,0)
(7,0,0)
(15,11,0)
(4,17,0)
(12,18,0)
(24,4,0)
(7,21,1)
(15,22,1)
(4,24,1)
(14,0,1)
(22,10,1)
(6,2,1)
(5,9,1)
(11,15,1)
(18,12,1)
(24,1,1)
(2,11,1)
(6,19,1)
(0,7,1)
(4,1,1)
(3,14,1)
(1,6,1)
(9,4,1)
(10,3,1)
(12,14,1)
(9,18,1)
(24,14,2)
(10,14,2)
(6,2,2)
(3,14,2)
(22,14,2)
(2,14,2)
(18,14,2)
(4,14,2)
(4,1,2)
(11,14,2)
(6,19,2)
(1,6,2)
(2,11,2)
(11,15,2)
(1,14,2)
(15,14,2)
(6,14,2)
(12,14,2)
-----------------------------------
(0,data = NULL)
(1,data = (wchar_t *)
(2,ALLOCA(100*sizeof(wchar_t)
(3,data)
(4,printWLine(data)
(5,RET)
(6,(wchar_t *)
(7,NULL)
(8,)
(9,globalReturnsTrue()
(10,100)
(11,100*sizeof(wchar_t)
(12,"Benign, fixed string")
(13,if(globalReturnsTrue()
(14,globalReturnsFalse()
(15,sizeof(wchar_t)
(16,if(globalReturnsFalse()
(17,)
(18,printLine("Benign, fixed string")
(19,wchar_t *)
(20,data)
(21,data)
(22,wchar_t)
(23,)
(24,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^