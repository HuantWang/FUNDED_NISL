-----label-----
0
-----code-----
static int get_business_card(int my_rank, char **bc_val_p, int *val_max_sz_p)
{
    int mpi_errno = MPI_SUCCESS;
    int str_errno = MPIU_STR_SUCCESS;
    int ret;
    ptl_process_t my_ptl_id;
    MPIDI_STATE_DECL(MPID_STATE_GET_BUSINESS_CARD);

    MPIDI_FUNC_ENTER(MPID_STATE_GET_BUSINESS_CARD);

    ret = PtlGetId(MPIDI_nem_ptl_ni, &my_ptl_id);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlgetid", "**ptlgetid %s", MPID_nem_ptl_strerror(ret));
    MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "Allocated NI and PT id=(%#x,%#x) pt=%#x",
                                            my_ptl_id.phys.nid, my_ptl_id.phys.pid, MPIDI_nem_ptl_pt));

    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, NID_KEY, (char *)&my_ptl_id.phys.nid, sizeof(my_ptl_id.phys.nid));
    if (str_errno) {
        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
    }
    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PID_KEY, (char *)&my_ptl_id.phys.pid, sizeof(my_ptl_id.phys.pid));
    if (str_errno) {
        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
    }
    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTI_KEY, (char *)&MPIDI_nem_ptl_pt, sizeof(MPIDI_nem_ptl_pt));
    if (str_errno) {
        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
    }
    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIG_KEY, (char *)&MPIDI_nem_ptl_get_pt,
                                        sizeof(MPIDI_nem_ptl_get_pt));
    if (str_errno) {
        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
    }
    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIC_KEY, (char *)&MPIDI_nem_ptl_control_pt,
                                        sizeof(MPIDI_nem_ptl_control_pt));
    if (str_errno) {
        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
    }
    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIR_KEY, (char *)&MPIDI_nem_ptl_rpt_pt,
                                        sizeof(MPIDI_nem_ptl_rpt_pt));
    if (str_errno) {
        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
    }

 fn_exit:
    MPIDI_FUNC_EXIT(MPID_STATE_GET_BUSINESS_CARD);
    return mpi_errno;
 fn_fail:
    goto fn_exit;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
9,10
9,11
11,12
11,13
11,14
15,16
15,17
17,18
17,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
20,30
20,31
20,32
20,33
20,34
20,35
20,36
20,37
20,38
20,39
20,40
20,41
20,42
20,43
20,44
21,22
22,23
22,24
24,25
24,26
26,27
27,28
29,30
30,31
30,32
32,33
32,34
34,35
35,36
37,38
38,39
38,40
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
63,64
65,66
65,67
65,68
66,67
68,69
70,71
71,72
73,74
74,75
74,76
74,77
74,78
74,79
74,80
74,81
75,76
77,78
79,80
81,82
85,86
85,87
86,87
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
96,97
98,99
99,100
99,101
99,102
99,103
99,104
100,101
103,104
103,105
104,105
104,106
105,106
109,110
109,111
110,111
110,112
111,112
115,116
117,118
118,119
118,120
119,120
121,122
121,123
121,124
121,125
121,126
121,127
122,123
124,125
126,127
128,129
130,131
130,132
131,132
131,133
133,134
135,136
136,137
136,138
137,138
137,139
138,139
142,143
143,144
144,145
144,146
145,146
145,147
146,147
150,151
150,152
151,152
153,154
153,155
154,155
155,156
155,157
155,158
155,159
155,160
156,157
158,159
158,160
159,160
161,162
163,164
165,166
168,169
169,170
169,171
169,172
169,173
170,171
172,173
174,175
177,178
178,179
178,180
179,180
181,182
181,183
181,184
181,185
181,186
181,187
182,183
184,185
186,187
188,189
190,191
190,192
191,192
191,193
193,194
195,196
196,197
196,198
197,198
197,199
198,199
202,203
203,204
204,205
204,206
205,206
205,207
206,207
210,211
210,212
211,212
213,214
213,215
214,215
215,216
215,217
215,218
215,219
215,220
216,217
218,219
218,220
219,220
221,222
223,224
225,226
228,229
229,230
229,231
229,232
229,233
230,231
232,233
234,235
237,238
238,239
238,240
239,240
241,242
241,243
241,244
241,245
241,246
241,247
242,243
244,245
246,247
248,249
250,251
250,252
251,252
251,253
253,254
255,256
256,257
258,259
259,260
259,261
260,261
263,264
263,265
264,265
266,267
266,268
267,268
268,269
268,270
268,271
268,272
268,273
269,270
271,272
271,273
272,273
274,275
276,277
278,279
281,282
282,283
282,284
282,285
282,286
283,284
285,286
287,288
290,291
291,292
291,293
292,293
294,295
294,296
294,297
294,298
294,299
294,300
295,296
297,298
299,300
301,302
303,304
303,305
304,305
304,306
306,307
308,309
309,310
311,312
312,313
312,314
313,314
316,317
316,318
317,318
319,320
319,321
320,321
321,322
321,323
321,324
321,325
321,326
322,323
324,325
324,326
325,326
327,328
329,330
331,332
334,335
335,336
335,337
335,338
335,339
336,337
338,339
340,341
343,344
344,345
344,346
345,346
347,348
347,349
347,350
347,351
347,352
347,353
348,349
350,351
352,353
354,355
356,357
356,358
357,358
357,359
359,360
361,362
362,363
364,365
365,366
365,367
366,367
369,370
369,371
370,371
372,373
372,374
373,374
374,375
374,376
374,377
374,378
374,379
375,376
377,378
377,379
378,379
380,381
382,383
384,385
387,388
388,389
388,390
388,391
388,392
389,390
391,392
393,394
396,397
397,398
397,399
398,399
400,401
400,402
400,403
400,404
400,405
400,406
401,402
403,404
405,406
407,408
409,410
409,411
410,411
410,412
412,413
414,415
415,416
417,418
418,419
418,420
419,420
422,423
422,424
423,424
425,426
425,427
426,427
427,428
427,429
427,430
427,431
427,432
428,429
430,431
430,432
431,432
433,434
435,436
437,438
440,441
441,442
441,443
441,444
441,445
442,443
444,445
446,447
449,450
449,451
451,452
452,453
452,454
453,454
455,456
457,458
458,459
460,461
460,462
462,463
-----nextToken-----
2,4,6,8,10,12,13,14,16,18,19,23,25,28,31,33,36,39,41,45,47,51,54,58,60,64,67,69,72,76,78,80,82,83,84,87,89,93,95,97,101,102,106,107,108,112,113,114,116,120,123,125,127,129,132,134,139,140,141,147,148,149,152,157,160,162,164,166,167,171,173,175,176,180,183,185,187,189,192,194,199,200,201,207,208,209,212,217,220,222,224,226,227,231,233,235,236,240,243,245,247,249,252,254,257,261,262,265,270,273,275,277,279,280,284,286,288,289,293,296,298,300,302,305,307,310,314,315,318,323,326,328,330,332,333,337,339,341,342,346,349,351,353,355,358,360,363,367,368,371,376,379,381,383,385,386,390,392,394,395,399,402,404,406,408,411,413,416,420,421,424,429,432,434,436,438,439,443,445,447,448,450,454,456,459,461,463
-----computeFrom-----
62,63
62,64
118,119
118,120
158,159
158,160
178,179
178,180
218,219
218,220
238,239
238,240
271,272
271,273
291,292
291,293
324,325
324,326
344,345
344,346
377,378
377,379
397,398
397,399
430,431
430,432
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ExpressionList;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;GotoStatement;Name;
-----ast_node-----
static int get_business_card(int my_rank, char **bc_val_p, int *val_max_sz_p){    int mpi_errno = MPI_SUCCESS;    int str_errno = MPIU_STR_SUCCESS;    int ret;    ptl_process_t my_ptl_id;    MPIDI_STATE_DECL(MPID_STATE_GET_BUSINESS_CARD);    MPIDI_FUNC_ENTER(MPID_STATE_GET_BUSINESS_CARD);    ret = PtlGetId(MPIDI_nem_ptl_ni, &my_ptl_id);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlgetid", "**ptlgetid %s", MPID_nem_ptl_strerror(ret));    MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "Allocated NI and PT id=(%#x,%#x) pt=%#x",                                            my_ptl_id.phys.nid, my_ptl_id.phys.pid, MPIDI_nem_ptl_pt));    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, NID_KEY, (char *)&my_ptl_id.phys.nid, sizeof(my_ptl_id.phys.nid));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PID_KEY, (char *)&my_ptl_id.phys.pid, sizeof(my_ptl_id.phys.pid));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTI_KEY, (char *)&MPIDI_nem_ptl_pt, sizeof(MPIDI_nem_ptl_pt));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIG_KEY, (char *)&MPIDI_nem_ptl_get_pt,                                        sizeof(MPIDI_nem_ptl_get_pt));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIC_KEY, (char *)&MPIDI_nem_ptl_control_pt,                                        sizeof(MPIDI_nem_ptl_control_pt));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIR_KEY, (char *)&MPIDI_nem_ptl_rpt_pt,                                        sizeof(MPIDI_nem_ptl_rpt_pt));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    } fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_GET_BUSINESS_CARD);    return mpi_errno; fn_fail:    goto fn_exit;}
static int
get_business_card(int my_rank, char **bc_val_p, int *val_max_sz_p)
get_business_card
int my_rank
int
my_rank
my_rank
char **bc_val_p
char
**bc_val_p
*
*
bc_val_p
int *val_max_sz_p
int
*val_max_sz_p
*
val_max_sz_p
{    int mpi_errno = MPI_SUCCESS;    int str_errno = MPIU_STR_SUCCESS;    int ret;    ptl_process_t my_ptl_id;    MPIDI_STATE_DECL(MPID_STATE_GET_BUSINESS_CARD);    MPIDI_FUNC_ENTER(MPID_STATE_GET_BUSINESS_CARD);    ret = PtlGetId(MPIDI_nem_ptl_ni, &my_ptl_id);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlgetid", "**ptlgetid %s", MPID_nem_ptl_strerror(ret));    MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "Allocated NI and PT id=(%#x,%#x) pt=%#x",                                            my_ptl_id.phys.nid, my_ptl_id.phys.pid, MPIDI_nem_ptl_pt));    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, NID_KEY, (char *)&my_ptl_id.phys.nid, sizeof(my_ptl_id.phys.nid));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PID_KEY, (char *)&my_ptl_id.phys.pid, sizeof(my_ptl_id.phys.pid));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTI_KEY, (char *)&MPIDI_nem_ptl_pt, sizeof(MPIDI_nem_ptl_pt));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIG_KEY, (char *)&MPIDI_nem_ptl_get_pt,                                        sizeof(MPIDI_nem_ptl_get_pt));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIC_KEY, (char *)&MPIDI_nem_ptl_control_pt,                                        sizeof(MPIDI_nem_ptl_control_pt));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }    str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIR_KEY, (char *)&MPIDI_nem_ptl_rpt_pt,                                        sizeof(MPIDI_nem_ptl_rpt_pt));    if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    } fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_GET_BUSINESS_CARD);    return mpi_errno; fn_fail:    goto fn_exit;}
int mpi_errno = MPI_SUCCESS;
int mpi_errno = MPI_SUCCESS;
int
mpi_errno = MPI_SUCCESS
mpi_errno
= MPI_SUCCESS
MPI_SUCCESS
MPI_SUCCESS
int str_errno = MPIU_STR_SUCCESS;
int str_errno = MPIU_STR_SUCCESS;
int
str_errno = MPIU_STR_SUCCESS
str_errno
= MPIU_STR_SUCCESS
MPIU_STR_SUCCESS
MPIU_STR_SUCCESS
int ret;
int ret;
int
ret
ret
ptl_process_t my_ptl_id;
ptl_process_t my_ptl_id;
ptl_process_t
ptl_process_t
my_ptl_id
my_ptl_id
MPIDI_STATE_DECL(MPID_STATE_GET_BUSINESS_CARD);
MPIDI_STATE_DECL(MPID_STATE_GET_BUSINESS_CARD);
MPIDI_STATE_DECL
MPIDI_STATE_DECL
(MPID_STATE_GET_BUSINESS_CARD)
MPID_STATE_GET_BUSINESS_CARD
MPID_STATE_GET_BUSINESS_CARD
MPIDI_FUNC_ENTER(MPID_STATE_GET_BUSINESS_CARD);
MPIDI_FUNC_ENTER(MPID_STATE_GET_BUSINESS_CARD)
MPIDI_FUNC_ENTER
MPIDI_FUNC_ENTER
MPID_STATE_GET_BUSINESS_CARD
MPID_STATE_GET_BUSINESS_CARD
ret = PtlGetId(MPIDI_nem_ptl_ni, &my_ptl_id);
ret = PtlGetId(MPIDI_nem_ptl_ni, &my_ptl_id)
ret
ret
PtlGetId(MPIDI_nem_ptl_ni, &my_ptl_id)
PtlGetId
PtlGetId
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
&my_ptl_id
my_ptl_id
my_ptl_id
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlgetid", "**ptlgetid %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlgetid", "**ptlgetid %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlgetid"
"**ptlgetid %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "Allocated NI and PT id=(%#x,%#x) pt=%#x",                                            my_ptl_id.phys.nid, my_ptl_id.phys.pid, MPIDI_nem_ptl_pt));
MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "Allocated NI and PT id=(%#x,%#x) pt=%#x",                                            my_ptl_id.phys.nid, my_ptl_id.phys.pid, MPIDI_nem_ptl_pt))
MPIU_DBG_MSG_FMT
MPIU_DBG_MSG_FMT
CH3_CHANNEL
CH3_CHANNEL
VERBOSE
VERBOSE
(MPIU_DBG_FDEST, "Allocated NI and PT id=(%#x,%#x) pt=%#x",                                            my_ptl_id.phys.nid, my_ptl_id.phys.pid, MPIDI_nem_ptl_pt)
MPIU_DBG_FDEST, "Allocated NI and PT id=(%#x,%#x) pt=%#x",                                            my_ptl_id.phys.nid, my_ptl_id.phys.pid, MPIDI_nem_ptl_pt
MPIU_DBG_FDEST
MPIU_DBG_FDEST
"Allocated NI and PT id=(%#x,%#x) pt=%#x"
my_ptl_id.phys.nid
my_ptl_id.phys
my_ptl_id
my_ptl_id
phys
nid
my_ptl_id.phys.pid
my_ptl_id.phys
my_ptl_id
my_ptl_id
phys
pid
MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, NID_KEY, (char *)&my_ptl_id.phys.nid, sizeof(my_ptl_id.phys.nid));
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, NID_KEY, (char *)&my_ptl_id.phys.nid, sizeof(my_ptl_id.phys.nid))
str_errno
str_errno
MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, NID_KEY, (char *)&my_ptl_id.phys.nid, sizeof(my_ptl_id.phys.nid))
MPIU_Str_add_binary_arg
MPIU_Str_add_binary_arg
bc_val_p
bc_val_p
val_max_sz_p
val_max_sz_p
NID_KEY
NID_KEY
(char *)&my_ptl_id.phys.nid
char *
char
*
*
&my_ptl_id.phys.nid
my_ptl_id.phys.nid
my_ptl_id.phys
my_ptl_id
my_ptl_id
phys
nid
sizeof(my_ptl_id.phys.nid)
(my_ptl_id.phys.nid)
my_ptl_id.phys.nid
my_ptl_id.phys
my_ptl_id
my_ptl_id
phys
nid
if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
str_errno
str_errno
{        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
MPIU_ERR_CHKANDJUMP
MPIU_ERR_CHKANDJUMP
str_errno == MPIU_STR_NOMEM
str_errno
str_errno
MPIU_STR_NOMEM
MPIU_STR_NOMEM
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard_len"
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
MPIU_ERR_SETANDJUMP
MPIU_ERR_SETANDJUMP
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard"
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PID_KEY, (char *)&my_ptl_id.phys.pid, sizeof(my_ptl_id.phys.pid));
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PID_KEY, (char *)&my_ptl_id.phys.pid, sizeof(my_ptl_id.phys.pid))
str_errno
str_errno
MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PID_KEY, (char *)&my_ptl_id.phys.pid, sizeof(my_ptl_id.phys.pid))
MPIU_Str_add_binary_arg
MPIU_Str_add_binary_arg
bc_val_p
bc_val_p
val_max_sz_p
val_max_sz_p
PID_KEY
PID_KEY
(char *)&my_ptl_id.phys.pid
char *
char
*
*
&my_ptl_id.phys.pid
my_ptl_id.phys.pid
my_ptl_id.phys
my_ptl_id
my_ptl_id
phys
pid
sizeof(my_ptl_id.phys.pid)
(my_ptl_id.phys.pid)
my_ptl_id.phys.pid
my_ptl_id.phys
my_ptl_id
my_ptl_id
phys
pid
if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
str_errno
str_errno
{        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
MPIU_ERR_CHKANDJUMP
MPIU_ERR_CHKANDJUMP
str_errno == MPIU_STR_NOMEM
str_errno
str_errno
MPIU_STR_NOMEM
MPIU_STR_NOMEM
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard_len"
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
MPIU_ERR_SETANDJUMP
MPIU_ERR_SETANDJUMP
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard"
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTI_KEY, (char *)&MPIDI_nem_ptl_pt, sizeof(MPIDI_nem_ptl_pt));
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTI_KEY, (char *)&MPIDI_nem_ptl_pt, sizeof(MPIDI_nem_ptl_pt))
str_errno
str_errno
MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTI_KEY, (char *)&MPIDI_nem_ptl_pt, sizeof(MPIDI_nem_ptl_pt))
MPIU_Str_add_binary_arg
MPIU_Str_add_binary_arg
bc_val_p
bc_val_p
val_max_sz_p
val_max_sz_p
PTI_KEY
PTI_KEY
(char *)&MPIDI_nem_ptl_pt
char *
char
*
*
&MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt
sizeof(MPIDI_nem_ptl_pt)
MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt

if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
str_errno
str_errno
{        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
MPIU_ERR_CHKANDJUMP
MPIU_ERR_CHKANDJUMP
str_errno == MPIU_STR_NOMEM
str_errno
str_errno
MPIU_STR_NOMEM
MPIU_STR_NOMEM
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard_len"
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
MPIU_ERR_SETANDJUMP
MPIU_ERR_SETANDJUMP
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard"
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIG_KEY, (char *)&MPIDI_nem_ptl_get_pt,                                        sizeof(MPIDI_nem_ptl_get_pt));
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIG_KEY, (char *)&MPIDI_nem_ptl_get_pt,                                        sizeof(MPIDI_nem_ptl_get_pt))
str_errno
str_errno
MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIG_KEY, (char *)&MPIDI_nem_ptl_get_pt,                                        sizeof(MPIDI_nem_ptl_get_pt))
MPIU_Str_add_binary_arg
MPIU_Str_add_binary_arg
bc_val_p
bc_val_p
val_max_sz_p
val_max_sz_p
PTIG_KEY
PTIG_KEY
(char *)&MPIDI_nem_ptl_get_pt
char *
char
*
*
&MPIDI_nem_ptl_get_pt
MPIDI_nem_ptl_get_pt
MPIDI_nem_ptl_get_pt
sizeof(MPIDI_nem_ptl_get_pt)
MPIDI_nem_ptl_get_pt
MPIDI_nem_ptl_get_pt
MPIDI_nem_ptl_get_pt

if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
str_errno
str_errno
{        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
MPIU_ERR_CHKANDJUMP
MPIU_ERR_CHKANDJUMP
str_errno == MPIU_STR_NOMEM
str_errno
str_errno
MPIU_STR_NOMEM
MPIU_STR_NOMEM
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard_len"
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
MPIU_ERR_SETANDJUMP
MPIU_ERR_SETANDJUMP
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard"
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIC_KEY, (char *)&MPIDI_nem_ptl_control_pt,                                        sizeof(MPIDI_nem_ptl_control_pt));
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIC_KEY, (char *)&MPIDI_nem_ptl_control_pt,                                        sizeof(MPIDI_nem_ptl_control_pt))
str_errno
str_errno
MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIC_KEY, (char *)&MPIDI_nem_ptl_control_pt,                                        sizeof(MPIDI_nem_ptl_control_pt))
MPIU_Str_add_binary_arg
MPIU_Str_add_binary_arg
bc_val_p
bc_val_p
val_max_sz_p
val_max_sz_p
PTIC_KEY
PTIC_KEY
(char *)&MPIDI_nem_ptl_control_pt
char *
char
*
*
&MPIDI_nem_ptl_control_pt
MPIDI_nem_ptl_control_pt
MPIDI_nem_ptl_control_pt
sizeof(MPIDI_nem_ptl_control_pt)
MPIDI_nem_ptl_control_pt
MPIDI_nem_ptl_control_pt
MPIDI_nem_ptl_control_pt

if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
str_errno
str_errno
{        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
MPIU_ERR_CHKANDJUMP
MPIU_ERR_CHKANDJUMP
str_errno == MPIU_STR_NOMEM
str_errno
str_errno
MPIU_STR_NOMEM
MPIU_STR_NOMEM
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard_len"
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
MPIU_ERR_SETANDJUMP
MPIU_ERR_SETANDJUMP
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard"
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIR_KEY, (char *)&MPIDI_nem_ptl_rpt_pt,                                        sizeof(MPIDI_nem_ptl_rpt_pt));
str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIR_KEY, (char *)&MPIDI_nem_ptl_rpt_pt,                                        sizeof(MPIDI_nem_ptl_rpt_pt))
str_errno
str_errno
MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIR_KEY, (char *)&MPIDI_nem_ptl_rpt_pt,                                        sizeof(MPIDI_nem_ptl_rpt_pt))
MPIU_Str_add_binary_arg
MPIU_Str_add_binary_arg
bc_val_p
bc_val_p
val_max_sz_p
val_max_sz_p
PTIR_KEY
PTIR_KEY
(char *)&MPIDI_nem_ptl_rpt_pt
char *
char
*
*
&MPIDI_nem_ptl_rpt_pt
MPIDI_nem_ptl_rpt_pt
MPIDI_nem_ptl_rpt_pt
sizeof(MPIDI_nem_ptl_rpt_pt)
MPIDI_nem_ptl_rpt_pt
MPIDI_nem_ptl_rpt_pt
MPIDI_nem_ptl_rpt_pt

if (str_errno) {        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
str_errno
str_errno
{        MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");        MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");    }
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len");
MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
MPIU_ERR_CHKANDJUMP
MPIU_ERR_CHKANDJUMP
str_errno == MPIU_STR_NOMEM
str_errno
str_errno
MPIU_STR_NOMEM
MPIU_STR_NOMEM
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard_len"
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard");
MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
MPIU_ERR_SETANDJUMP
MPIU_ERR_SETANDJUMP
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**buscard"
fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_GET_BUSINESS_CARD);
fn_exit
MPIDI_FUNC_EXIT(MPID_STATE_GET_BUSINESS_CARD);
MPIDI_FUNC_EXIT(MPID_STATE_GET_BUSINESS_CARD)
MPIDI_FUNC_EXIT
MPIDI_FUNC_EXIT
MPID_STATE_GET_BUSINESS_CARD
MPID_STATE_GET_BUSINESS_CARD
return mpi_errno;
mpi_errno
mpi_errno
fn_fail:    goto fn_exit;
fn_fail
goto fn_exit;
fn_exit
-----joern-----
(111,82,0)
(197,112,0)
(117,78,0)
(69,133,0)
(216,119,0)
(127,78,0)
(114,45,0)
(120,74,0)
(121,218,0)
(216,185,0)
(10,197,0)
(0,178,0)
(98,170,0)
(93,19,0)
(177,82,0)
(128,118,0)
(151,78,0)
(175,187,0)
(25,161,0)
(165,30,0)
(152,78,0)
(122,222,0)
(60,74,0)
(31,30,0)
(3,60,0)
(70,138,0)
(218,116,0)
(105,176,0)
(170,98,0)
(126,5,0)
(128,179,0)
(41,78,0)
(150,118,0)
(6,56,0)
(205,207,0)
(227,133,0)
(80,78,0)
(157,89,0)
(124,78,0)
(178,187,0)
(135,177,0)
(184,73,0)
(7,78,0)
(225,60,0)
(226,133,0)
(183,176,0)
(91,220,0)
(83,128,0)
(62,106,0)
(51,93,0)
(30,157,0)
(204,119,0)
(119,78,0)
(208,61,0)
(187,178,0)
(150,180,0)
(32,115,0)
(123,102,0)
(115,138,0)
(155,112,0)
(206,123,0)
(59,178,0)
(218,170,0)
(145,127,0)
(200,150,0)
(43,60,0)
(187,66,0)
(134,2,0)
(146,119,0)
(92,61,0)
(101,128,0)
(112,197,0)
(188,94,0)
(110,147,0)
(133,227,0)
(21,113,0)
(19,61,0)
(1,14,0)
(142,227,0)
(107,207,0)
(189,179,0)
(167,224,0)
(22,177,0)
(56,119,0)
(65,44,0)
(35,60,0)
(33,123,0)
(24,222,0)
(61,118,0)
(212,183,0)
(153,44,0)
(23,74,0)
(144,44,0)
(87,106,0)
(182,204,0)
(227,116,0)
(179,128,0)
(199,75,0)
(19,78,0)
(42,170,0)
(38,200,0)
(44,171,0)
(193,97,0)
(75,213,0)
(204,37,0)
(79,186,0)
(170,118,0)
(14,115,0)
(116,218,0)
(156,88,0)
(74,23,0)
(16,224,0)
(190,204,0)
(65,147,0)
(4,137,0)
(23,5,0)
(149,115,0)
(164,178,0)
(115,14,0)
(147,78,0)
(76,56,0)
(183,29,0)
(113,93,0)
(172,183,0)
(211,88,0)
(218,121,0)
(60,78,0)
(217,123,0)
(221,78,0)
(228,216,0)
(94,188,0)
(169,224,0)
(61,89,0)
(88,156,0)
(181,128,0)
(178,118,0)
(143,78,0)
(39,132,0)
(178,59,0)
(18,56,0)
(157,30,0)
(28,16,0)
(99,150,0)
(138,115,0)
(161,62,0)
(129,83,0)
(150,88,0)
(183,119,0)
(50,216,0)
(89,157,0)
(198,221,0)
(150,147,0)
(178,180,0)
(194,2,0)
(132,102,0)
(170,47,0)
(113,185,0)
(128,24,0)
(132,119,0)
(27,156,0)
(112,98,0)
(5,23,0)
(176,183,0)
(230,97,0)
(207,119,0)
(88,150,0)
(106,193,0)
(115,180,0)
(96,204,0)
(75,161,0)
(24,103,0)
(170,218,0)
(141,207,0)
(224,167,0)
(127,119,0)
(98,112,0)
(163,78,0)
(20,219,0)
(58,4,0)
(47,78,0)
(84,59,0)
(47,170,0)
(139,157,0)
(174,115,0)
(24,128,0)
(188,219,0)
(48,61,0)
(100,23,0)
(36,213,0)
(207,73,0)
(12,140,0)
(220,119,0)
(40,178,0)
(177,119,0)
(115,188,0)
(220,29,0)
(229,225,0)
(8,137,0)
(128,180,0)
(136,197,0)
(178,40,0)
(148,178,0)
(15,97,0)
(2,119,0)
(176,40,0)
(86,193,0)
(225,74,0)
(16,28,0)
(49,137,0)
(40,78,0)
(83,78,0)
(46,220,0)
(63,216,0)
(11,113,0)
(158,170,0)
(209,220,0)
(177,37,0)
(57,132,0)
(88,211,0)
(128,83,0)
(44,119,0)
(173,132,0)
(95,19,0)
(55,143,0)
(97,78,0)
(28,61,0)
(73,83,0)
(162,78,0)
(138,78,0)
(125,150,0)
(103,24,0)
(56,171,0)
(130,45,0)
(53,65,0)
(72,40,0)
(108,167,0)
(140,78,0)
(13,78,0)
(131,2,0)
(17,177,0)
(195,170,0)
(213,75,0)
(26,183,0)
(159,113,0)
(168,128,0)
(45,123,0)
(215,167,0)
(60,225,0)
(115,118,0)
(188,115,0)
(224,16,0)
(82,47,0)
(54,60,0)
(61,180,0)
(61,28,0)
(2,166,0)
(154,143,0)
(81,78,0)
(150,200,0)
(210,127,0)
(89,61,0)
(201,44,0)
(222,24,0)
(61,19,0)
(44,65,0)
(104,176,0)
(186,78,0)
(4,62,0)
(187,175,0)
(97,193,0)
(219,188,0)
(207,166,0)
(74,78,0)
(68,60,0)
(71,150,0)
(73,207,0)
(113,119,0)
(147,150,0)
(137,4,0)
(85,82,0)
(90,65,0)
(60,119,0)
(170,180,0)
(123,119,0)
(93,113,0)
(196,78,0)
(116,227,0)
(223,47,0)
(202,73,0)
(192,213,0)
(9,28,0)
(66,187,0)
(82,177,0)
(28,9,0)
(109,93,0)
(34,78,0)
(45,138,0)
(67,66,0)
(123,45,0)
(64,119,0)
(178,59,1)
(28,9,1)
(229,35,1)
(216,119,1)
(101,168,1)
(176,105,1)
(138,115,1)
(155,197,1)
(59,84,1)
(188,219,1)
(23,5,1)
(36,4,1)
(159,93,1)
(157,139,1)
(200,38,1)
(58,137,1)
(44,201,1)
(10,218,1)
(91,209,1)
(167,108,1)
(28,16,1)
(11,159,1)
(24,103,1)
(113,119,1)
(72,216,1)
(88,211,1)
(116,227,1)
(1,188,1)
(222,122,1)
(89,157,1)
(150,118,1)
(111,85,1)
(205,73,1)
(170,98,1)
(30,165,1)
(75,213,1)
(39,123,1)
(177,119,1)
(61,89,1)
(2,119,1)
(48,208,1)
(99,71,1)
(93,109,1)
(0,164,1)
(213,192,1)
(68,54,1)
(220,119,1)
(142,133,1)
(76,18,1)
(65,90,1)
(27,99,1)
(224,167,1)
(227,142,1)
(191,147,1)
(198,124,1)
(16,224,1)
(126,100,1)
(113,93,1)
(168,129,1)
(93,19,1)
(52,19,1)
(61,118,1)
(75,199,1)
(150,200,1)
(77,83,1)
(132,57,1)
(135,82,1)
(202,77,1)
(95,204,1)
(221,198,1)
(156,27,1)
(183,119,1)
(61,28,1)
(17,135,1)
(187,175,1)
(230,15,1)
(123,45,1)
(139,30,1)
(54,43,1)
(60,119,1)
(183,176,1)
(82,47,1)
(217,206,1)
(115,188,1)
(107,205,1)
(73,184,1)
(104,160,1)
(170,118,1)
(198,77,1)
(201,153,1)
(51,52,1)
(119,146,1)
(85,214,1)
(207,119,1)
(55,154,1)
(53,191,1)
(114,130,1)
(47,170,1)
(86,230,1)
(216,63,1)
(79,140,1)
(212,26,1)
(136,10,1)
(95,214,1)
(110,220,1)
(109,51,1)
(218,116,1)
(18,6,1)
(197,136,1)
(5,126,1)
(45,114,1)
(174,149,1)
(22,17,1)
(143,55,1)
(60,74,1)
(4,137,1)
(172,176,1)
(214,47,1)
(74,23,1)
(190,182,1)
(108,215,1)
(195,158,1)
(160,40,1)
(140,12,1)
(177,82,1)
(208,95,1)
(149,70,1)
(178,180,1)
(57,173,1)
(15,60,1)
(4,58,1)
(133,226,1)
(72,52,1)
(144,65,1)
(35,3,1)
(128,179,1)
(2,194,1)
(177,22,1)
(178,187,1)
(131,134,1)
(198,2,1)
(207,141,1)
(226,69,1)
(150,180,1)
(44,65,1)
(127,145,1)
(186,79,1)
(115,180,1)
(6,44,1)
(21,11,1)
(203,138,1)
(66,67,1)
(220,46,1)
(147,150,1)
(25,75,1)
(98,112,1)
(14,1,1)
(19,61,1)
(157,30,1)
(82,111,1)
(173,39,1)
(70,191,1)
(129,132,1)
(67,0,1)
(164,148,1)
(12,143,1)
(92,48,1)
(223,97,1)
(90,53,1)
(115,118,1)
(148,72,1)
(207,73,1)
(165,31,1)
(32,174,1)
(122,181,1)
(112,197,1)
(215,92,1)
(84,187,1)
(145,221,1)
(20,32,1)
(50,113,1)
(49,8,1)
(176,40,1)
(3,68,1)
(105,104,1)
(218,121,1)
(128,180,1)
(128,118,1)
(137,49,1)
(150,88,1)
(170,180,1)
(228,50,1)
(141,107,1)
(183,212,1)
(125,110,1)
(129,203,1)
(73,83,1)
(42,223,1)
(31,28,1)
(44,119,1)
(97,25,1)
(187,66,1)
(26,172,1)
(153,144,1)
(182,177,1)
(97,193,1)
(63,228,1)
(225,229,1)
(127,119,1)
(206,45,1)
(88,156,1)
(227,133,1)
(71,125,1)
(56,119,1)
(123,119,1)
(224,169,1)
(113,21,1)
(65,147,1)
(189,24,1)
(110,160,1)
(170,218,1)
(204,119,1)
(184,202,1)
(100,120,1)
(56,76,1)
(128,24,1)
(123,33,1)
(181,101,1)
(60,225,1)
(115,14,1)
(219,20,1)
(210,127,1)
(130,203,1)
(33,217,1)
(169,167,1)
(8,87,1)
(24,222,1)
(38,88,1)
(70,56,1)
(225,74,1)
(146,64,1)
(158,42,1)
(194,131,1)
(204,96,1)
(199,213,1)
(61,180,1)
(40,178,1)
(132,119,1)
(154,119,1)
(46,91,1)
(209,183,1)
(188,94,1)
(134,207,1)
(43,74,1)
(192,36,1)
(96,190,1)
(179,189,1)
(178,118,1)
(112,155,1)
(69,195,1)
(120,186,1)
(45,138,1)
(87,86,1)
(83,128,1)
(113,93,2)
(224,167,2)
(17,214,2)
(96,214,2)
(204,119,2)
(190,214,2)
(205,77,2)
(170,118,2)
(216,119,2)
(177,214,2)
(150,118,2)
(206,203,2)
(220,160,2)
(83,128,2)
(159,52,2)
(44,191,2)
(60,225,2)
(88,156,2)
(178,180,2)
(39,203,2)
(207,119,2)
(113,119,2)
(2,119,2)
(6,191,2)
(60,119,2)
(28,16,2)
(132,119,2)
(201,191,2)
(187,66,2)
(112,197,2)
(130,203,2)
(51,52,2)
(46,160,2)
(225,74,2)
(82,214,2)
(44,65,2)
(212,160,2)
(216,52,2)
(44,119,2)
(177,82,2)
(40,178,2)
(183,176,2)
(157,30,2)
(147,150,2)
(228,52,2)
(93,52,2)
(23,5,2)
(207,73,2)
(4,137,2)
(178,59,2)
(61,118,2)
(65,191,2)
(24,222,2)
(45,138,2)
(22,214,2)
(144,191,2)
(170,98,2)
(53,191,2)
(135,214,2)
(153,191,2)
(123,119,2)
(19,61,2)
(76,191,2)
(21,52,2)
(82,47,2)
(63,52,2)
(26,160,2)
(61,28,2)
(73,77,2)
(194,77,2)
(115,118,2)
(207,77,2)
(116,227,2)
(56,191,2)
(188,219,2)
(61,180,2)
(24,103,2)
(150,88,2)
(109,52,2)
(178,118,2)
(183,160,2)
(123,203,2)
(176,160,2)
(16,224,2)
(60,74,2)
(123,45,2)
(61,89,2)
(93,19,2)
(138,115,2)
(204,214,2)
(170,218,2)
(210,127,2)
(91,160,2)
(88,211,2)
(115,188,2)
(176,40,2)
(57,203,2)
(115,180,2)
(56,119,2)
(113,52,2)
(114,203,2)
(33,203,2)
(128,24,2)
(128,179,2)
(173,203,2)
(111,214,2)
(220,119,2)
(89,157,2)
(132,203,2)
(183,119,2)
(134,77,2)
(127,119,2)
(47,170,2)
(150,200,2)
(98,112,2)
(2,77,2)
(217,203,2)
(218,116,2)
(178,187,2)
(115,14,2)
(170,180,2)
(131,77,2)
(184,77,2)
(182,214,2)
(177,119,2)
(18,191,2)
(172,160,2)
(50,52,2)
(104,160,2)
(45,203,2)
(28,9,2)
(97,193,2)
(11,52,2)
(218,121,2)
(105,160,2)
(73,83,2)
(90,191,2)
(227,133,2)
(209,160,2)
(188,94,2)
(150,180,2)
(187,175,2)
(202,77,2)
(65,147,2)
(128,118,2)
(74,23,2)
(85,214,2)
(107,77,2)
(128,180,2)
(141,77,2)
(75,213,2)
-----------------------------------
(0,PTI_KEY)
(1,MPIDI_nem_ptl_control_pt)
(2,MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
(3,"**ptlgetid")
(4,my_ptl_id.phys.nid)
(5,&my_ptl_id)
(6,mpi_errno)
(7,fn_fail:)
(8,my_ptl_id)
(9,char *)
(10,my_ptl_id)
(11,MPI_ERR_OTHER)
(12,MPID_STATE_GET_BUSINESS_CARD)
(13,my_ptl_id)
(14,sizeof(MPIDI_nem_ptl_control_pt)
(15,CH3_CHANNEL)
(16,&my_ptl_id.phys.pid)
(17,MPI_ERR_OTHER)
(18,MPI_ERR_OTHER)
(19,str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PID_KEY, (char *)
(20,MPIDI_nem_ptl_control_pt)
(21,"**buscard_len")
(22,"**buscard_len")
(23,PtlGetId(MPIDI_nem_ptl_ni, &my_ptl_id)
(24,(char *)
(25,MPIDI_nem_ptl_pt)
(26,MPI_ERR_OTHER)
(27,MPIDI_nem_ptl_get_pt)
(28,(char *)
(29,)
(30,my_ptl_id.phys)
(31,my_ptl_id)
(32,PTIC_KEY)
(33,"**buscard_len")
(34,fn_exit:)
(35,"**ptlgetid %s")
(36,my_ptl_id)
(37,)
(38,MPIDI_nem_ptl_get_pt)
(39,mpi_errno)
(40,str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTI_KEY, (char *)
(41,mpi_errno)
(42,bc_val_p)
(43,ret)
(44,MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
(45,str_errno == MPIU_STR_NOMEM)
(46,"**buscard")
(47,str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, NID_KEY, (char *)
(48,val_max_sz_p)
(49,phys)
(50,mpi_errno)
(51,str_errno)
(52,str_errno)
(53,str_errno)
(54,mpi_errno)
(55,MPIU_STR_SUCCESS)
(56,MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
(57,"**buscard")
(58,nid)
(59,sizeof(MPIDI_nem_ptl_pt)
(60,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlgetid", "**ptlgetid %s", MPID_nem_ptl_strerror(ret)
(61,MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PID_KEY, (char *)
(62,)
(63,"**buscard")
(64,mpi_errno)
(65,str_errno == MPIU_STR_NOMEM)
(66,&MPIDI_nem_ptl_pt)
(67,MPIDI_nem_ptl_pt)
(68,MPI_ERR_OTHER)
(69,my_ptl_id)
(70,str_errno)
(71,val_max_sz_p)
(72,str_errno)
(73,str_errno == MPIU_STR_NOMEM)
(74,ret = PtlGetId(MPIDI_nem_ptl_ni, &my_ptl_id)
(75,my_ptl_id.phys.pid)
(76,"**buscard")
(77,str_errno)
(78,)
(79,MPID_STATE_GET_BUSINESS_CARD)
(80,if (str_errno)
(81,ret)
(82,str_errno == MPIU_STR_NOMEM)
(83,str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIR_KEY, (char *)
(84,MPIDI_nem_ptl_pt)
(85,str_errno)
(86,MPIU_DBG_FDEST)
(87,"Allocated NI and PT id=(%#x,%#x)
(88,(char *)
(89,sizeof(my_ptl_id.phys.pid)
(90,MPIU_STR_NOMEM)
(91,MPI_ERR_OTHER)
(92,PID_KEY)
(93,str_errno == MPIU_STR_NOMEM)
(94,char *)
(95,str_errno)
(96,"**buscard")
(97,MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "Allocated NI and PT id=(%#x,%#x)
(98,sizeof(my_ptl_id.phys.nid)
(99,PTIG_KEY)
(100,MPIDI_nem_ptl_ni)
(101,val_max_sz_p)
(102,)
(103,char *)
(104,str_errno)
(105,MPIU_STR_NOMEM)
(106,)
(107,MPI_ERR_OTHER)
(108,phys)
(109,MPIU_STR_NOMEM)
(110,str_errno)
(111,MPIU_STR_NOMEM)
(112,my_ptl_id.phys.nid)
(113,MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
(114,MPIU_STR_NOMEM)
(115,MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIC_KEY, (char *)
(116,&my_ptl_id.phys.nid)
(117,if (str_errno)
(118,int *val_max_sz_p)
(119,mpi_errno = MPI_SUCCESS)
(120,ret)
(121,char *)
(122,MPIDI_nem_ptl_rpt_pt)
(123,MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
(124,goto fn_exit;)
(125,bc_val_p)
(126,my_ptl_id)
(127,return mpi_errno;)
(128,MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIR_KEY, (char *)
(129,str_errno)
(130,str_errno)
(131,MPI_ERR_OTHER)
(132,MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
(133,my_ptl_id.phys)
(134,mpi_errno)
(135,mpi_errno)
(136,phys)
(137,my_ptl_id.phys)
(138,str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIC_KEY, (char *)
(139,pid)
(140,MPIDI_STATE_DECL(MPID_STATE_GET_BUSINESS_CARD)
(141,"**buscard_len")
(142,nid)
(143,str_errno = MPIU_STR_SUCCESS)
(144,mpi_errno)
(145,mpi_errno)
(146,MPI_SUCCESS)
(147,str_errno = MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIG_KEY, (char *)
(148,bc_val_p)
(149,bc_val_p)
(150,MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTIG_KEY, (char *)
(151,str_errno)
(152,if (str_errno)
(153,MPI_ERR_OTHER)
(154,str_errno)
(155,nid)
(156,&MPIDI_nem_ptl_get_pt)
(157,my_ptl_id.phys.pid)
(158,val_max_sz_p)
(159,mpi_errno)
(160,str_errno)
(161,)
(162,if (str_errno)
(163,if (str_errno)
(164,val_max_sz_p)
(165,phys)
(166,)
(167,my_ptl_id.phys)
(168,bc_val_p)
(169,pid)
(170,MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, NID_KEY, (char *)
(171,)
(172,mpi_errno)
(173,MPI_ERR_OTHER)
(174,val_max_sz_p)
(175,char *)
(176,str_errno == MPIU_STR_NOMEM)
(177,MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
(178,MPIU_Str_add_binary_arg(bc_val_p, val_max_sz_p, PTI_KEY, (char *)
(179,sizeof(MPIDI_nem_ptl_rpt_pt)
(180,char **bc_val_p)
(181,PTIR_KEY)
(182,mpi_errno)
(183,MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
(184,MPIU_STR_NOMEM)
(185,)
(186,MPIDI_FUNC_ENTER(MPID_STATE_GET_BUSINESS_CARD)
(187,(char *)
(188,(char *)
(189,MPIDI_nem_ptl_rpt_pt)
(190,MPI_ERR_OTHER)
(191,str_errno)
(192,phys)
(193,)
(194,"**buscard")
(195,NID_KEY)
(196,if (str_errno)
(197,my_ptl_id.phys)
(198,MPID_STATE_GET_BUSINESS_CARD)
(199,pid)
(200,sizeof(MPIDI_nem_ptl_get_pt)
(201,"**buscard_len")
(202,str_errno)
(203,str_errno)
(204,MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
(205,mpi_errno)
(206,mpi_errno)
(207,MPIU_ERR_CHKANDJUMP(str_errno == MPIU_STR_NOMEM, mpi_errno, MPI_ERR_OTHER, "**buscard_len")
(208,bc_val_p)
(209,mpi_errno)
(210,RET)
(211,char *)
(212,"**buscard_len")
(213,my_ptl_id.phys)
(214,str_errno)
(215,my_ptl_id)
(216,MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
(217,MPI_ERR_OTHER)
(218,(char *)
(219,&MPIDI_nem_ptl_control_pt)
(220,MPIU_ERR_SETANDJUMP(mpi_errno, MPI_ERR_OTHER, "**buscard")
(221,MPIDI_FUNC_EXIT(MPID_STATE_GET_BUSINESS_CARD)
(222,&MPIDI_nem_ptl_rpt_pt)
(223,str_errno)
(224,my_ptl_id.phys.pid)
(225,MPID_nem_ptl_strerror(ret)
(226,phys)
(227,my_ptl_id.phys.nid)
(228,MPI_ERR_OTHER)
(229,ret)
(230,VERBOSE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^