-----label-----
0
-----code-----
static void good1()
{
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            int * tmpData;
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            tmpData = (int *)realloc(data, (130000)*sizeof(int));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
7,9
8,9
11,12
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
19,20
20,21
20,22
22,23
22,24
22,25
25,26
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
66,67
67,68
67,69
68,69
70,71
70,72
71,72
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
81,82
83,84
83,85
83,86
84,85
86,87
88,89
88,90
89,90
91,92
92,93
92,94
95,96
95,97
96,97
96,98
97,98
99,100
101,102
101,103
101,104
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
110,112
111,112
115,116
116,117
116,118
117,118
119,120
119,121
120,121
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,9,10,15,16,21,23,24,28,30,33,35,38,39,43,45,50,52,55,57,58,63,64,65,69,72,73,77,80,82,85,87,90,93,94,98,100,105,107,112,113,114,118,121,122,126,128
-----computeFrom-----
7,8
7,9
34,35
34,36
41,42
41,43
60,61
60,62
75,76
75,77
88,89
88,90
96,97
96,98
103,104
103,105
109,110
109,111
-----guardedBy-----
98,107
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(18,24,0)
(67,14,0)
(49,43,0)
(37,44,0)
(52,35,0)
(67,60,0)
(7,56,0)
(5,21,0)
(47,17,0)
(4,5,0)
(48,52,0)
(24,54,0)
(32,26,0)
(61,0,0)
(57,60,0)
(45,67,0)
(21,10,0)
(39,55,0)
(44,43,0)
(22,23,0)
(43,49,0)
(58,57,0)
(5,36,0)
(28,48,0)
(38,5,0)
(62,24,0)
(31,45,0)
(14,67,0)
(3,56,0)
(11,43,0)
(2,0,0)
(25,44,0)
(6,26,0)
(65,23,0)
(56,6,0)
(41,40,0)
(55,19,0)
(1,49,0)
(30,21,0)
(27,26,0)
(29,54,0)
(13,21,0)
(33,57,0)
(27,43,0)
(63,26,0)
(59,65,0)
(60,67,0)
(5,23,0)
(42,26,0)
(16,0,0)
(54,10,0)
(57,33,0)
(36,5,0)
(5,54,0)
(0,2,0)
(24,21,0)
(6,56,0)
(12,60,0)
(60,43,0)
(45,26,0)
(64,66,0)
(56,43,0)
(52,48,0)
(21,45,0)
(56,23,0)
(0,61,0)
(51,33,0)
(2,49,0)
(43,26,0)
(23,26,0)
(46,40,0)
(60,57,0)
(26,9,0)
(65,43,0)
(15,17,0)
(49,1,0)
(27,21,0)
(20,26,0)
(53,61,0)
(49,2,0)
(50,65,0)
(40,45,0)
(36,10,0)
(67,45,0)
(8,27,0)
(15,47,1)
(45,67,1)
(60,57,1)
(34,27,1)
(31,6,1)
(41,45,1)
(56,3,1)
(25,37,1)
(24,62,1)
(51,58,1)
(38,4,1)
(27,43,1)
(33,51,1)
(36,5,1)
(22,65,1)
(40,45,1)
(18,21,1)
(2,0,1)
(6,56,1)
(65,43,1)
(56,23,1)
(49,1,1)
(5,21,1)
(37,43,1)
(8,40,1)
(24,21,1)
(13,40,1)
(8,36,1)
(21,30,1)
(43,49,1)
(16,11,1)
(23,22,1)
(3,7,1)
(44,43,1)
(67,14,1)
(67,60,1)
(53,16,1)
(7,23,1)
(29,24,1)
(34,55,1)
(49,2,1)
(11,17,1)
(59,50,1)
(21,45,1)
(60,43,1)
(5,54,1)
(52,48,1)
(17,15,1)
(39,17,1)
(30,13,1)
(55,39,1)
(44,25,1)
(27,21,1)
(5,23,1)
(50,44,1)
(28,44,1)
(65,59,1)
(54,29,1)
(0,61,1)
(5,38,1)
(50,52,1)
(27,8,1)
(61,53,1)
(56,43,1)
(58,12,1)
(48,28,1)
(12,31,1)
(4,54,1)
(57,33,1)
(46,41,1)
(62,18,1)
(40,46,1)
(58,17,2)
(67,17,2)
(43,17,2)
(40,17,2)
(5,54,2)
(51,17,2)
(49,2,2)
(52,48,2)
(44,17,2)
(13,40,2)
(53,17,2)
(38,40,2)
(45,17,2)
(36,5,2)
(12,17,2)
(59,17,2)
(44,43,2)
(0,61,2)
(27,21,2)
(25,17,2)
(56,23,2)
(60,43,2)
(60,17,2)
(5,40,2)
(50,17,2)
(45,67,2)
(27,43,2)
(48,44,2)
(24,40,2)
(4,40,2)
(21,40,2)
(57,33,2)
(22,17,2)
(21,45,2)
(40,45,2)
(6,17,2)
(55,17,2)
(27,17,2)
(67,60,2)
(60,57,2)
(31,17,2)
(65,43,2)
(49,17,2)
(3,17,2)
(65,17,2)
(7,17,2)
(43,49,2)
(28,44,2)
(30,40,2)
(49,1,2)
(41,17,2)
(46,17,2)
(54,40,2)
(36,40,2)
(2,0,2)
(52,44,2)
(16,17,2)
(57,17,2)
(39,17,2)
(11,17,2)
(6,56,2)
(5,23,2)
(8,17,2)
(23,17,2)
(56,17,2)
(18,40,2)
(56,43,2)
(62,40,2)
(24,21,2)
(5,21,2)
(2,17,2)
(61,17,2)
(33,17,2)
(0,17,2)
(29,40,2)
(67,14,2)
(37,17,2)
-----------------------------------
(0,100*sizeof(int)
(1,int *)
(2,malloc(100*sizeof(int)
(3,0)
(4,data)
(5,data[0])
(6,printIntLine(data[0])
(7,data)
(8,data)
(9,)
(10,)
(11,data)
(12,data)
(13,data)
(14,int *)
(15,5)
(16,100)
(17,STATIC_CONST_FIVE!=5)
(18,data)
(19,)
(20,data)
(21,data = tmpData)
(22,5)
(23,data[0] = 5)
(24,data[0])
(25,NULL)
(26,)
(27,free(data)
(28,1)
(29,10)
(30,tmpData)
(31,tmpData)
(32,if (tmpData != NULL)
(33,sizeof(int)
(34,RET)
(35,)
(36,printIntLine(data[0])
(37,data)
(38,0)
(39,"Benign, fixed string")
(40,tmpData != NULL)
(41,tmpData)
(42,if (data == NULL)
(43,* data = (int *)
(44,data == NULL)
(45,tmpData = (int *)
(46,NULL)
(47,STATIC_CONST_FIVE)
(48,-1)
(49,(int *)
(50,data)
(51,int)
(52,exit(-1)
(53,int)
(54,data[0] = 10)
(55,printLine("Benign, fixed string")
(56,data[0])
(57,(130000)
(58,130000)
(59,0)
(60,realloc(data, (130000)
(61,sizeof(int)
(62,0)
(63,tmpData)
(64,if(STATIC_CONST_FIVE!=5)
(65,data[0])
(66,)
(67,(int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^