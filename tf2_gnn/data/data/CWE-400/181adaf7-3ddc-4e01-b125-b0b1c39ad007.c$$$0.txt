-----label-----
0
-----code-----
static void goodB2G2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticTrue)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
90,91
92,93
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,91,96,98
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }
staticTrue
staticTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(47,2,0)
(43,35,0)
(11,9,0)
(40,30,0)
(21,35,0)
(5,19,0)
(18,48,0)
(39,6,0)
(17,42,0)
(9,11,0)
(3,40,0)
(36,5,0)
(31,38,0)
(6,45,0)
(26,29,0)
(8,35,0)
(15,9,0)
(49,1,0)
(45,6,0)
(46,19,0)
(37,8,0)
(27,49,0)
(39,19,0)
(11,19,0)
(50,1,0)
(30,40,0)
(6,39,0)
(2,48,0)
(19,39,0)
(40,3,0)
(29,19,0)
(45,17,0)
(24,40,0)
(34,23,0)
(38,1,0)
(12,35,0)
(48,2,0)
(0,39,0)
(9,38,0)
(2,49,0)
(51,8,0)
(4,29,0)
(25,11,0)
(48,19,0)
(44,23,0)
(42,17,0)
(17,45,0)
(20,5,0)
(23,34,0)
(14,11,0)
(32,45,0)
(40,24,0)
(37,16,0)
(19,1,0)
(29,24,0)
(34,41,0)
(39,0,0)
(24,29,0)
(7,37,0)
(37,19,0)
(22,48,0)
(30,1,0)
(28,8,0)
(37,19,1)
(10,13,1)
(11,25,1)
(20,36,1)
(19,39,1)
(5,19,1)
(29,26,1)
(48,19,1)
(39,0,1)
(22,18,1)
(18,34,1)
(4,38,1)
(44,5,1)
(29,19,1)
(33,37,1)
(32,46,1)
(39,6,1)
(15,11,1)
(24,29,1)
(14,49,1)
(17,42,1)
(2,48,1)
(9,11,1)
(37,8,1)
(30,40,1)
(23,44,1)
(11,19,1)
(5,20,1)
(28,51,1)
(31,9,1)
(9,15,1)
(38,31,1)
(13,8,1)
(27,2,1)
(36,19,1)
(40,24,1)
(26,4,1)
(8,28,1)
(17,32,1)
(18,5,1)
(6,45,1)
(34,23,1)
(48,22,1)
(2,47,1)
(45,17,1)
(33,10,1)
(37,7,1)
(10,30,1)
(49,27,1)
(25,14,1)
(47,48,1)
(46,13,1)
(40,3,1)
(7,10,1)
(48,13,2)
(30,13,2)
(2,13,2)
(9,13,2)
(32,13,2)
(30,40,2)
(11,13,2)
(37,19,2)
(7,10,2)
(23,5,2)
(17,13,2)
(34,23,2)
(19,39,2)
(5,19,2)
(47,13,2)
(24,29,2)
(26,13,2)
(11,19,2)
(9,11,2)
(48,19,2)
(29,19,2)
(39,13,2)
(40,13,2)
(6,13,2)
(37,10,2)
(14,13,2)
(25,13,2)
(24,13,2)
(39,0,2)
(38,13,2)
(4,13,2)
(29,13,2)
(2,48,2)
(39,6,2)
(19,13,2)
(15,13,2)
(27,13,2)
(22,13,2)
(18,13,2)
(44,5,2)
(36,13,2)
(20,13,2)
(31,13,2)
(34,5,2)
(6,45,2)
(45,17,2)
(45,13,2)
(40,24,2)
(5,13,2)
(37,8,2)
(49,13,2)
(46,13,2)
(40,3,2)
(17,42,2)
-----------------------------------
(0,struct _twoIntsStruct *)
(1,)
(2,data[0].intOne)
(3,twoIntsStruct *)
(4,data)
(5,data == NULL)
(6,malloc(100*sizeof(struct _twoIntsStruct)
(7,data)
(8,data = NULL)
(9,data[0].intTwo)
(10,staticTrue)
(11,data[0])
(12,if(staticTrue)
(13,staticTrue)
(14,data)
(15,intTwo)
(16,)
(17,sizeof(struct _twoIntsStruct)
(18,data)
(19,data = (struct _twoIntsStruct *)
(20,NULL)
(21,if(staticTrue)
(22,0)
(23,-1)
(24,&data[0])
(25,0)
(26,0)
(27,0)
(28,NULL)
(29,data[0])
(30,printStructLine((twoIntsStruct *)
(31,0)
(32,100)
(33,RET)
(34,exit(-1)
(35,)
(36,data)
(37,free(data)
(38,data[0].intTwo = 0)
(39,(struct _twoIntsStruct *)
(40,(twoIntsStruct *)
(41,)
(42,struct _twoIntsStruct)
(43,data)
(44,1)
(45,100*sizeof(struct _twoIntsStruct)
(46,data)
(47,intOne)
(48,data[0])
(49,data[0].intOne = 0)
(50,if (data == NULL)
(51,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^