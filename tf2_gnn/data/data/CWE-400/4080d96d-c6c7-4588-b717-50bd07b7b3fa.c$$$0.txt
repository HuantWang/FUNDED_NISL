-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    data = NULL;
    goto source;
source:
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (char *)ALLOCA(100*sizeof(char));
    /* Initialize then use data */
    strcpy(data, "a string");
    printLine(data);
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation of memory */
    /* no deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
41,42
41,43
41,44
42,43
44,45
47,48
48,49
48,50
49,50
51,52
53,54
55,56
55,57
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,46,50,52,54,56,57
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    char * data;    data = NULL;    goto source;source:    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (char *)ALLOCA(100*sizeof(char));    /* Initialize then use data */    strcpy(data, "a string");    printLine(data);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ; /* empty statement needed for some flow variants */}
static void
goodG2B()
goodG2B
{    char * data;    data = NULL;    goto source;source:    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (char *)ALLOCA(100*sizeof(char));    /* Initialize then use data */    strcpy(data, "a string");    printLine(data);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ; /* empty statement needed for some flow variants */}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (char *)ALLOCA(100*sizeof(char));
source
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "a string");
strcpy(data, "a string")
strcpy
strcpy
data
data
"a string"
printLine(data);
printLine(data)
printLine
printLine
data
data
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ;
sink
;
-----joern-----
(3,6,0)
(6,3,0)
(22,1,0)
(2,0,0)
(8,0,0)
(6,4,0)
(19,0,0)
(1,0,0)
(12,0,0)
(16,3,0)
(8,3,0)
(6,18,0)
(13,10,0)
(9,0,0)
(4,10,0)
(15,3,0)
(21,1,0)
(7,16,0)
(23,0,0)
(4,6,0)
(10,4,0)
(10,13,0)
(20,13,0)
(11,8,0)
(14,16,0)
(3,0,0)
(5,10,0)
(18,6,0)
(16,0,0)
(8,11,1)
(13,20,1)
(11,16,1)
(4,10,1)
(22,21,1)
(16,3,1)
(14,3,1)
(5,15,1)
(17,19,1)
(9,1,1)
(6,18,1)
(20,5,1)
(1,22,1)
(7,14,1)
(6,4,1)
(3,6,1)
(19,8,1)
(10,13,1)
(8,3,1)
(15,9,1)
(16,7,1)
(6,4,2)
(6,18,2)
(10,13,2)
(16,3,2)
(3,6,2)
(8,3,2)
(4,10,2)
-----------------------------------
(0,)
(1,data = NULL)
(2,source:)
(3,data = (char *)
(4,ALLOCA(100*sizeof(char)
(5,100)
(6,(char *)
(7,"a string")
(8,printLine(data)
(9,goto source;)
(10,100*sizeof(char)
(11,data)
(12,sink:)
(13,sizeof(char)
(14,data)
(15,data)
(16,strcpy(data, "a string")
(17,RET)
(18,char *)
(19,goto sink;)
(20,char)
(21,data)
(22,NULL)
(23,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^