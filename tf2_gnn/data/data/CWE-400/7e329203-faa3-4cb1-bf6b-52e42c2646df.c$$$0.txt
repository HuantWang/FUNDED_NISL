-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_bad()
{
    size_t data;
    size_t dataArray[5];
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* put data in array */
    dataArray[2] = data;
    CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
22,23
25,26
25,27
25,28
25,29
25,30
25,31
25,32
25,33
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
52,53
53,54
55,56
56,57
56,58
58,59
58,60
60,61
61,62
63,64
63,65
64,65
64,66
64,67
64,68
64,69
64,70
64,71
64,72
64,73
64,74
64,75
64,76
64,77
64,78
65,66
66,67
66,68
67,68
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
86,87
87,88
87,89
87,90
87,91
88,89
90,91
91,92
94,95
95,96
96,97
98,99
99,100
99,101
100,101
100,102
101,102
104,105
106,107
107,108
107,109
108,109
108,110
109,110
109,111
110,111
114,115
116,117
117,118
117,119
118,119
118,120
119,120
122,123
122,124
123,124
125,126
127,128
127,129
128,129
128,130
129,130
129,131
129,132
129,133
130,131
132,133
134,135
134,136
135,136
135,137
136,137
138,139
140,141
141,142
143,144
144,145
145,146
147,148
149,150
151,152
151,153
152,153
152,154
153,154
153,155
153,156
154,155
156,157
158,159
160,161
162,163
164,165
165,166
165,167
166,167
168,169
168,170
168,171
168,172
169,170
171,172
173,174
175,176
177,178
177,179
178,179
178,180
179,180
181,182
183,184
185,186
186,187
186,188
187,188
189,190
189,191
189,192
189,193
189,194
190,191
192,193
194,195
196,197
196,198
197,198
201,202
201,203
202,203
202,204
203,204
203,205
204,205
206,207
208,209
208,210
209,210
212,213
214,215
215,216
215,217
216,217
216,218
217,218
219,220
222,223
223,224
223,225
224,225
226,227
226,228
226,229
226,230
227,228
229,230
231,232
235,236
235,237
236,237
236,238
237,238
239,240
241,242
242,243
243,244
243,245
244,245
246,247
248,249
248,250
249,250
249,251
250,251
252,253
254,255
255,256
256,257
256,258
257,258
259,260
261,262
262,263
262,264
263,264
263,265
264,265
267,268
269,270
270,271
270,272
271,272
273,274
-----nextToken-----
2,4,9,11,15,17,19,23,24,28,30,34,36,40,42,45,49,51,54,57,59,62,68,71,73,75,77,81,83,85,89,92,93,97,102,103,105,111,112,113,115,120,121,124,126,131,133,137,139,142,146,148,150,155,157,159,161,163,167,170,172,174,176,180,182,184,188,191,193,195,198,199,200,205,207,210,211,213,218,220,221,225,228,230,232,233,234,238,240,245,247,251,253,258,260,265,266,268,272,274
-----computeFrom-----
21,22
21,23
66,67
66,68
79,80
79,81
99,100
99,101
107,108
107,109
117,118
117,119
128,129
128,130
152,153
152,154
165,166
165,167
178,179
178,180
186,187
186,188
196,197
196,198
202,203
202,204
203,204
203,205
208,209
208,210
215,216
215,217
223,224
223,225
236,237
236,238
249,250
249,251
262,263
262,264
-----guardedBy-----
238,247
251,260
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_bad(){    size_t data;    size_t dataArray[5];    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink(dataArray);}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_bad
{    size_t data;    size_t dataArray[5];    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink(dataArray);}
size_t data;
size_t data;
size_t
size_t
data
data
size_t dataArray[5];
size_t dataArray[5];
size_t
size_t
dataArray[5]
dataArray
[5]
5
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink(dataArray);
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink(dataArray)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink
dataArray
dataArray
-----joern-----
(41,43,0)
(115,129,0)
(58,117,0)
(47,74,0)
(8,129,0)
(120,144,0)
(107,26,0)
(1,59,0)
(113,23,0)
(64,18,0)
(141,129,0)
(59,90,0)
(135,3,0)
(35,100,0)
(76,1,0)
(121,114,0)
(59,129,0)
(26,74,0)
(53,100,0)
(98,101,0)
(159,74,0)
(117,8,0)
(21,54,0)
(55,135,0)
(154,117,0)
(29,159,0)
(81,49,0)
(127,112,0)
(50,46,0)
(19,26,0)
(46,3,0)
(45,40,0)
(105,146,0)
(1,100,0)
(92,56,0)
(36,107,0)
(63,26,0)
(43,41,0)
(37,69,0)
(157,129,0)
(118,26,0)
(112,116,0)
(126,46,0)
(143,8,0)
(88,162,0)
(116,8,0)
(25,38,0)
(156,129,0)
(116,85,0)
(54,150,0)
(164,26,0)
(110,26,0)
(140,129,0)
(163,66,0)
(44,129,0)
(105,115,0)
(90,8,0)
(36,8,0)
(94,85,0)
(60,150,0)
(71,63,0)
(34,85,0)
(135,54,0)
(32,111,0)
(150,54,0)
(111,122,0)
(138,74,0)
(102,107,0)
(85,94,0)
(42,114,0)
(40,150,0)
(12,139,0)
(128,26,0)
(43,8,0)
(66,54,0)
(111,49,0)
(61,117,0)
(38,129,0)
(161,116,0)
(66,136,0)
(68,107,0)
(97,150,0)
(102,103,0)
(84,63,0)
(0,26,0)
(3,46,0)
(132,138,0)
(13,101,0)
(15,136,0)
(124,34,0)
(153,43,0)
(53,59,0)
(137,74,0)
(27,147,0)
(155,121,0)
(151,72,0)
(70,20,0)
(4,59,0)
(148,75,0)
(24,90,0)
(90,59,0)
(3,135,0)
(142,36,0)
(57,23,0)
(62,102,0)
(73,90,0)
(56,129,0)
(49,111,0)
(16,129,0)
(114,75,0)
(85,116,0)
(149,40,0)
(89,107,0)
(108,159,0)
(116,112,0)
(2,86,0)
(29,74,0)
(116,139,0)
(158,146,0)
(130,95,0)
(150,40,0)
(96,82,0)
(75,114,0)
(56,92,0)
(114,121,0)
(85,34,0)
(39,122,0)
(99,43,0)
(7,150,0)
(33,69,0)
(29,156,0)
(101,86,0)
(46,54,0)
(30,8,0)
(54,129,0)
(106,143,0)
(160,105,0)
(156,23,0)
(48,135,0)
(122,111,0)
(23,156,0)
(8,117,0)
(123,115,0)
(119,36,0)
(28,100,0)
(146,105,0)
(93,26,0)
(136,129,0)
(65,42,0)
(9,26,0)
(104,72,0)
(145,129,0)
(152,143,0)
(31,92,0)
(144,56,0)
(87,26,0)
(53,80,0)
(109,146,0)
(111,129,0)
(131,66,0)
(139,116,0)
(67,53,0)
(83,156,0)
(51,23,0)
(78,26,0)
(6,90,0)
(102,8,0)
(133,121,0)
(79,26,0)
(134,41,0)
(52,1,0)
(77,10,0)
(100,26,0)
(114,42,0)
(150,59,0)
(69,29,0)
(14,159,0)
(72,59,0)
(125,29,0)
(22,38,0)
(86,129,0)
(11,144,0)
(144,11,1)
(126,135,1)
(98,13,1)
(102,62,1)
(104,151,1)
(75,148,1)
(102,107,1)
(77,75,1)
(139,12,1)
(59,90,1)
(3,135,1)
(153,99,1)
(114,121,1)
(127,85,1)
(40,45,1)
(163,3,1)
(2,101,1)
(41,134,1)
(159,14,1)
(109,158,1)
(76,102,1)
(67,1,1)
(158,86,1)
(160,146,1)
(41,43,1)
(30,38,1)
(101,98,1)
(116,8,1)
(32,49,1)
(65,121,1)
(91,156,1)
(138,132,1)
(154,58,1)
(125,69,1)
(133,91,1)
(43,8,1)
(62,36,1)
(130,5,1)
(36,8,1)
(66,54,1)
(38,22,1)
(1,52,1)
(81,143,1)
(1,59,1)
(90,73,1)
(85,94,1)
(58,61,1)
(107,68,1)
(5,53,1)
(37,130,1)
(105,160,1)
(155,133,1)
(14,108,1)
(89,63,1)
(13,111,1)
(33,37,1)
(142,88,1)
(100,35,1)
(15,66,1)
(119,142,1)
(53,100,1)
(53,67,1)
(64,3,1)
(161,56,1)
(46,50,1)
(52,76,1)
(150,60,1)
(136,15,1)
(12,116,1)
(132,29,1)
(71,159,1)
(7,97,1)
(31,144,1)
(35,28,1)
(142,91,1)
(148,114,1)
(142,77,1)
(143,106,1)
(121,155,1)
(92,31,1)
(45,149,1)
(55,48,1)
(6,24,1)
(73,6,1)
(86,2,1)
(83,136,1)
(28,107,1)
(133,100,1)
(22,25,1)
(54,150,1)
(25,75,1)
(142,70,1)
(23,51,1)
(105,146,1)
(3,46,1)
(142,96,1)
(122,39,1)
(134,43,1)
(11,120,1)
(76,36,1)
(70,143,1)
(27,139,1)
(135,55,1)
(72,104,1)
(29,159,1)
(5,1,1)
(42,65,1)
(102,8,1)
(53,59,1)
(36,119,1)
(50,126,1)
(48,54,1)
(106,152,1)
(85,34,1)
(24,4,1)
(111,49,1)
(124,161,1)
(99,139,1)
(49,81,1)
(90,8,1)
(152,8,1)
(96,72,1)
(143,8,1)
(131,163,1)
(113,83,1)
(17,138,1)
(142,27,1)
(60,40,1)
(72,59,1)
(84,71,1)
(75,114,1)
(4,41,1)
(116,112,1)
(37,5,1)
(29,156,1)
(8,117,1)
(115,123,1)
(88,41,1)
(36,107,1)
(51,57,1)
(29,125,1)
(116,85,1)
(63,84,1)
(21,72,1)
(43,153,1)
(149,7,1)
(34,124,1)
(39,32,1)
(68,89,1)
(135,54,1)
(56,92,1)
(112,127,1)
(69,33,1)
(151,59,1)
(111,122,1)
(97,21,1)
(120,115,1)
(123,105,1)
(139,116,1)
(1,100,1)
(142,64,1)
(156,23,1)
(117,154,1)
(146,109,1)
(150,40,1)
(114,42,1)
(66,131,1)
(61,30,1)
(57,113,1)
(46,54,1)
(150,59,1)
(156,23,2)
(109,143,2)
(99,139,2)
(86,143,2)
(124,143,2)
(158,143,2)
(114,42,2)
(72,41,2)
(3,72,2)
(126,135,2)
(135,54,2)
(85,143,2)
(116,8,2)
(104,41,2)
(102,107,2)
(29,159,2)
(155,91,2)
(114,91,2)
(29,156,2)
(66,3,2)
(46,135,2)
(105,143,2)
(133,91,2)
(150,40,2)
(67,1,2)
(11,143,2)
(85,34,2)
(116,85,2)
(143,8,2)
(111,49,2)
(31,143,2)
(96,72,2)
(105,146,2)
(77,75,2)
(114,121,2)
(120,143,2)
(45,72,2)
(153,139,2)
(70,143,2)
(102,8,2)
(75,91,2)
(43,8,2)
(30,75,2)
(1,59,2)
(2,143,2)
(21,72,2)
(8,117,2)
(111,143,2)
(58,75,2)
(12,143,2)
(66,54,2)
(27,139,2)
(41,139,2)
(115,143,2)
(161,143,2)
(150,59,2)
(156,3,2)
(72,59,2)
(111,122,2)
(148,91,2)
(8,75,2)
(65,91,2)
(102,36,2)
(60,72,2)
(34,143,2)
(144,143,2)
(22,75,2)
(46,54,2)
(59,41,2)
(121,91,2)
(154,75,2)
(130,5,2)
(32,143,2)
(152,75,2)
(24,41,2)
(116,112,2)
(151,41,2)
(122,143,2)
(150,72,2)
(38,75,2)
(15,3,2)
(42,91,2)
(40,72,2)
(50,135,2)
(3,46,2)
(7,72,2)
(75,114,2)
(149,72,2)
(136,3,2)
(127,143,2)
(41,43,2)
(113,3,2)
(90,8,2)
(54,150,2)
(160,143,2)
(123,143,2)
(116,143,2)
(106,75,2)
(36,8,2)
(163,3,2)
(53,59,2)
(39,143,2)
(1,100,2)
(59,90,2)
(88,41,2)
(135,72,2)
(146,143,2)
(3,135,2)
(49,143,2)
(91,3,2)
(98,143,2)
(64,3,2)
(51,3,2)
(62,36,2)
(73,41,2)
(25,75,2)
(57,3,2)
(85,94,2)
(13,143,2)
(117,75,2)
(6,41,2)
(83,3,2)
(143,75,2)
(134,139,2)
(92,143,2)
(139,116,2)
(101,143,2)
(90,41,2)
(56,143,2)
(81,143,2)
(55,72,2)
(139,143,2)
(53,100,2)
(61,75,2)
(112,143,2)
(36,107,2)
(54,72,2)
(56,92,2)
(131,3,2)
(23,3,2)
(97,72,2)
(43,139,2)
(48,72,2)
(4,41,2)
(53,1,2)
-----------------------------------
(0,if (wsaDataInit)
(1,acceptSocket != INVALID_SOCKET)
(2,AF_INET)
(3,recvResult == SOCKET_ERROR || recvResult == 0)
(4,acceptSocket)
(5,wsaDataInit)
(6,NULL)
(7,inputBuffer)
(8,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(9,wsaData)
(10,)
(11,sin_port)
(12,SOCKET_ERROR)
(13,service)
(14,0)
(15,'\\0')
(16,if (WSAStartup(MAKEWORD(2,2)
(17,RET)
(18,)
(19,inputBuffer)
(20,)
(21,recvResult)
(22,1)
(23,strtoul(inputBuffer, NULL, 0)
(24,listenSocket)
(25,wsaDataInit)
(26,)
(27,break;)
(28,acceptSocket)
(29,dataArray[2] = data)
(30,listenSocket)
(31,TCP_PORT)
(32,0)
(33,2)
(34,&service)
(35,INVALID_SOCKET)
(36,listenSocket != INVALID_SOCKET)
(37,dataArray)
(38,wsaDataInit = 1)
(39,service)
(40,CHAR_ARRAY_SIZE - 1)
(41,listen(listenSocket, LISTEN_BACKLOG)
(42,&wsaData)
(43,listen(listenSocket, LISTEN_BACKLOG)
(44,if (listen(listenSocket, LISTEN_BACKLOG)
(45,1)
(46,recvResult == 0)
(47,data)
(48,recvResult)
(49,&service)
(50,0)
(51,0)
(52,INVALID_SOCKET)
(53,CLOSE_SOCKET(acceptSocket)
(54,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(55,SOCKET_ERROR)
(56,service.sin_port = htons(TCP_PORT)
(57,NULL)
(58,SOCK_STREAM)
(59,acceptSocket = accept(listenSocket, NULL, NULL)
(60,0)
(61,AF_INET)
(62,listenSocket)
(63,wsaDataInit = 0)
(64,break;)
(65,wsaData)
(66,inputBuffer[recvResult])
(67,acceptSocket)
(68,INVALID_SOCKET)
(69,dataArray[2])
(70,break;)
(71,wsaDataInit)
(72,acceptSocket == SOCKET_ERROR)
(73,NULL)
(74,)
(75,WSAStartup(MAKEWORD(2,2)
(76,acceptSocket)
(77,break;)
(78,if (listenSocket != INVALID_SOCKET)
(79,if (acceptSocket != INVALID_SOCKET)
(80,)
(81,service)
(82,)
(83,data)
(84,0)
(85,(struct sockaddr*)
(86,service.sin_family = AF_INET)
(87,listenSocket)
(88,break;)
(89,listenSocket)
(90,accept(listenSocket, NULL, NULL)
(91,0)
(92,htons(TCP_PORT)
(93,service)
(94,struct sockaddr*)
(95,)
(96,break;)
(97,acceptSocket)
(98,sin_family)
(99,listenSocket)
(100,acceptSocket = INVALID_SOCKET)
(101,service.sin_family)
(102,CLOSE_SOCKET(listenSocket)
(103,)
(104,SOCKET_ERROR)
(105,service.sin_addr.s_addr)
(106,INVALID_SOCKET)
(107,listenSocket = INVALID_SOCKET)
(108,data)
(109,sin_addr)
(110,recvResult)
(111,memset(&service, 0, sizeof(service)
(112,sizeof(service)
(113,inputBuffer)
(114,WSAStartup(MAKEWORD(2,2)
(115,service.sin_addr.s_addr = INADDR_ANY)
(116,bind(listenSocket, (struct sockaddr*)
(117,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(118,acceptSocket)
(119,INVALID_SOCKET)
(120,service)
(121,MAKEWORD(2,2)
(122,sizeof(service)
(123,INADDR_ANY)
(124,service)
(125,data)
(126,recvResult)
(127,service)
(128,wsaDataInit)
(129,)
(130,WSACleanup()
(131,recvResult)
(132,dataArray)
(133,2)
(134,SOCKET_ERROR)
(135,recvResult == SOCKET_ERROR)
(136,inputBuffer[recvResult] = '\\0')
(137,dataArray)
(138,CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink(dataArray)
(139,bind(listenSocket, (struct sockaddr*)
(140,if (acceptSocket == SOCKET_ERROR)
(141,if (recvResult == SOCKET_ERROR || recvResult == 0)
(142,listenSocket)
(143,listenSocket == INVALID_SOCKET)
(144,service.sin_port)
(145,if (listenSocket == INVALID_SOCKET)
(146,service.sin_addr)
(147,)
(148,NO_ERROR)
(149,CHAR_ARRAY_SIZE)
(150,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(151,acceptSocket)
(152,listenSocket)
(153,LISTEN_BACKLOG)
(154,IPPROTO_TCP)
(155,2)
(156,data = strtoul(inputBuffer, NULL, 0)
(157,if (bind(listenSocket, (struct sockaddr*)
(158,service)
(159,data = 0)
(160,s_addr)
(161,listenSocket)
(162,)
(163,inputBuffer)
(164,do)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^