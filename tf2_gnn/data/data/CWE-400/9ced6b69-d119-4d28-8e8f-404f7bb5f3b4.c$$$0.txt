-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_08_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
90,91
91,92
93,94
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,92,94
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_08_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_08_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_08_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(17,45,0)
(45,2,0)
(7,21,0)
(44,1,0)
(35,5,0)
(43,33,0)
(43,9,0)
(26,47,0)
(21,7,0)
(25,20,0)
(13,42,0)
(9,24,0)
(1,35,0)
(4,41,0)
(2,45,0)
(9,43,0)
(23,24,0)
(7,13,0)
(19,20,0)
(45,20,0)
(14,25,0)
(3,4,0)
(20,24,0)
(48,45,0)
(13,7,0)
(32,4,0)
(15,19,0)
(43,18,0)
(30,15,0)
(8,19,0)
(36,20,0)
(25,18,0)
(22,24,0)
(42,13,0)
(15,23,0)
(16,47,0)
(12,41,0)
(0,19,0)
(28,22,0)
(29,41,0)
(18,43,0)
(46,41,0)
(27,23,0)
(47,20,0)
(39,21,0)
(34,7,0)
(21,20,0)
(35,1,0)
(6,24,0)
(21,39,0)
(18,25,0)
(20,21,0)
(19,15,0)
(33,43,0)
(2,22,0)
(40,25,0)
(11,2,0)
(36,37,1)
(20,21,1)
(25,40,1)
(7,13,1)
(32,3,1)
(22,28,1)
(18,25,1)
(10,31,1)
(21,39,1)
(28,2,1)
(45,48,1)
(37,4,1)
(25,20,1)
(47,20,1)
(2,11,1)
(14,22,1)
(19,0,1)
(43,18,1)
(26,20,1)
(31,37,1)
(21,7,1)
(15,19,1)
(43,33,1)
(35,1,1)
(16,26,1)
(48,17,1)
(13,34,1)
(47,16,1)
(2,45,1)
(30,19,1)
(40,14,1)
(11,45,1)
(9,43,1)
(23,27,1)
(15,30,1)
(13,42,1)
(31,9,1)
(45,20,1)
(1,44,1)
(17,23,1)
(27,15,1)
(0,8,1)
(8,35,1)
(4,32,1)
(8,47,1)
(34,36,1)
(19,20,1)
(44,47,1)
(0,37,2)
(20,21,2)
(45,20,2)
(2,37,2)
(43,18,2)
(44,47,2)
(9,43,2)
(48,37,2)
(2,45,2)
(43,37,2)
(11,37,2)
(16,37,2)
(7,13,2)
(27,37,2)
(25,20,2)
(47,20,2)
(15,37,2)
(21,37,2)
(19,20,2)
(45,37,2)
(21,39,2)
(9,37,2)
(43,33,2)
(7,37,2)
(18,25,2)
(22,37,2)
(13,42,2)
(13,37,2)
(47,37,2)
(15,19,2)
(20,37,2)
(17,37,2)
(34,37,2)
(35,1,2)
(30,37,2)
(26,37,2)
(19,37,2)
(21,7,2)
(8,37,2)
(28,37,2)
(14,37,2)
(35,47,2)
(40,37,2)
(36,37,2)
(23,37,2)
(18,37,2)
(25,37,2)
(1,47,2)
-----------------------------------
(0,0)
(1,-1)
(2,data[0].intTwo)
(3,data)
(4,data = NULL)
(5,)
(6,if (data == NULL)
(7,calloc(100, sizeof(struct _twoIntsStruct)
(8,data)
(9,printStructLine((twoIntsStruct *)
(10,RET)
(11,intTwo)
(12,if(staticReturnsTrue()
(13,sizeof(struct _twoIntsStruct)
(14,data)
(15,data[0].intOne)
(16,NULL)
(17,data)
(18,&data[0])
(19,data[0])
(20,data = (struct _twoIntsStruct *)
(21,(struct _twoIntsStruct *)
(22,data[0].intTwo = 0)
(23,data[0].intOne = 0)
(24,)
(25,data[0])
(26,data)
(27,0)
(28,0)
(29,if(staticReturnsTrue()
(30,intOne)
(31,staticReturnsTrue()
(32,NULL)
(33,twoIntsStruct *)
(34,100)
(35,exit(-1)
(36,data)
(37,staticReturnsTrue()
(38, sizeof(struct _twoIntsStruct)
(39,struct _twoIntsStruct *)
(40,0)
(41,)
(42,struct _twoIntsStruct)
(43,(twoIntsStruct *)
(44,1)
(45,data[0])
(46,data)
(47,data == NULL)
(48,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^