-----label-----
0
-----code-----
static void goodB2G1()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
69,71
70,71
73,74
74,75
75,76
75,77
76,77
79,80
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,71,72,77,78,83,85
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(14,17,0)
(5,6,0)
(32,26,0)
(37,28,0)
(21,30,0)
(15,24,0)
(23,15,0)
(15,34,0)
(36,6,0)
(12,15,0)
(23,7,0)
(28,0,0)
(33,27,0)
(35,10,0)
(24,22,0)
(39,3,0)
(26,32,0)
(9,27,0)
(29,34,0)
(29,15,0)
(1,24,0)
(23,27,0)
(24,1,0)
(31,0,0)
(20,17,0)
(18,34,0)
(8,32,0)
(6,15,0)
(24,15,0)
(13,17,0)
(1,28,0)
(26,11,0)
(16,3,0)
(25,23,0)
(19,21,0)
(2,10,0)
(0,28,0)
(27,17,0)
(28,1,0)
(38,29,0)
(22,24,0)
(23,27,1)
(28,0,1)
(9,33,1)
(4,21,1)
(38,26,1)
(24,22,1)
(0,31,1)
(35,2,1)
(25,10,1)
(29,15,1)
(1,28,1)
(23,25,1)
(37,12,1)
(27,9,1)
(38,6,1)
(23,15,1)
(26,32,1)
(36,5,1)
(24,1,1)
(6,36,1)
(2,3,1)
(31,37,1)
(19,10,1)
(6,15,1)
(29,38,1)
(21,19,1)
(15,24,1)
(3,16,1)
(8,6,1)
(4,23,1)
(39,27,1)
(10,35,1)
(2,29,1)
(12,3,1)
(5,15,1)
(16,39,1)
(32,8,1)
(0,3,2)
(24,1,2)
(38,3,2)
(21,10,2)
(26,6,2)
(26,32,2)
(28,0,2)
(31,3,2)
(5,3,2)
(24,22,2)
(15,3,2)
(36,3,2)
(32,6,2)
(8,6,2)
(23,10,2)
(29,3,2)
(1,28,2)
(37,3,2)
(1,3,2)
(25,10,2)
(12,3,2)
(24,3,2)
(6,3,2)
(15,24,2)
(19,10,2)
(6,15,2)
(28,3,2)
(23,27,2)
(23,15,2)
(29,15,2)
-----------------------------------
(0,sizeof(wchar_t)
(1,malloc(100*sizeof(wchar_t)
(2,STATIC_CONST_FIVE)
(3,STATIC_CONST_FIVE==5)
(4,RET)
(5,data)
(6,data == NULL)
(7,)
(8,1)
(9,NULL)
(10,STATIC_CONST_FIVE!=5)
(11,)
(12,data)
(13,if(STATIC_CONST_FIVE!=5)
(14,data)
(15,data = (wchar_t *)
(16,5)
(17,)
(18,if (data == NULL)
(19,"Benign, fixed string")
(20,if(STATIC_CONST_FIVE==5)
(21,printLine("Benign, fixed string")
(22,wchar_t *)
(23,free(data)
(24,(wchar_t *)
(25,data)
(26,exit(-1)
(27,data = NULL)
(28,100*sizeof(wchar_t)
(29,printWLine(data)
(30,)
(31,wchar_t)
(32,-1)
(33,data)
(34,)
(35,5)
(36,NULL)
(37,100)
(38,data)
(39,STATIC_CONST_FIVE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^