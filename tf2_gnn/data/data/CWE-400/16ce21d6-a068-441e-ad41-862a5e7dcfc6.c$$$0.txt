-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_14_bad()
{
    int64_t * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
65,66
66,67
66,68
67,68
69,70
69,71
70,71
73,74
73,75
74,75
74,76
75,76
78,79
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,62,63,64,68,71,72,76,77,79
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_14_bad(){    int64_t * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_malloc_14_bad()
CWE401_Memory_Leak__int64_t_malloc_14_bad
{    int64_t * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(20,30,0)
(34,1,0)
(18,1,0)
(30,13,0)
(14,0,0)
(2,3,0)
(25,3,0)
(13,29,0)
(31,9,0)
(24,3,0)
(8,26,0)
(22,0,0)
(2,8,0)
(33,24,0)
(6,9,0)
(28,9,0)
(25,28,0)
(9,6,0)
(19,4,0)
(10,11,0)
(16,6,0)
(5,4,0)
(21,2,0)
(15,26,0)
(17,11,0)
(36,26,0)
(23,4,0)
(8,2,0)
(9,28,0)
(28,25,0)
(13,30,0)
(7,24,0)
(35,2,0)
(1,4,0)
(32,3,0)
(3,25,0)
(25,27,0)
(3,26,0)
(27,25,0)
(9,6,1)
(10,0,1)
(1,34,1)
(6,16,1)
(10,8,1)
(21,35,1)
(33,3,1)
(24,7,1)
(3,25,1)
(30,20,1)
(12,11,1)
(22,14,1)
(25,27,1)
(24,3,1)
(8,2,1)
(0,22,1)
(35,15,1)
(15,13,1)
(34,18,1)
(16,31,1)
(32,0,1)
(14,1,1)
(7,33,1)
(13,30,1)
(11,17,1)
(31,32,1)
(15,24,1)
(25,28,1)
(2,3,1)
(2,21,1)
(17,10,1)
(20,24,1)
(28,9,1)
(35,0,2)
(25,27,2)
(25,28,2)
(31,0,2)
(3,25,2)
(33,0,2)
(28,0,2)
(24,0,2)
(15,0,2)
(9,0,2)
(13,30,2)
(2,3,2)
(13,24,2)
(20,24,2)
(2,0,2)
(6,0,2)
(3,0,2)
(25,0,2)
(16,0,2)
(8,0,2)
(30,24,2)
(9,6,2)
(21,0,2)
(24,3,2)
(7,0,2)
(32,0,2)
(28,9,2)
(8,2,2)
-----------------------------------
(0,globalFive==5)
(1,data = NULL)
(2,data[0])
(3,data = (int64_t *)
(4,)
(5,if(globalFive==5)
(6,sizeof(int64_t)
(7,NULL)
(8,printLongLongLine(data[0])
(9,100*sizeof(int64_t)
(10,globalFive)
(11,globalFive==5)
(12,RET)
(13,exit(-1)
(14,globalFive)
(15,L)
(16,int64_t)
(17,5)
(18,data)
(19,data)
(20,1)
(21,0)
(22,5)
(23,if(globalFive==5)
(24,data == NULL)
(25,(int64_t *)
(26,)
(27,int64_t *)
(28,malloc(100*sizeof(int64_t)
(29,)
(30,-1)
(31,100)
(32,data)
(33,data)
(34,NULL)
(35,data)
(36,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^