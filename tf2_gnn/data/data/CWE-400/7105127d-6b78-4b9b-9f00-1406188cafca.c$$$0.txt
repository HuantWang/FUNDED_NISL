-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_31_bad()
{
    wchar_t * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)calloc(100, sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
49,52
50,51
52,53
55,56
56,57
56,58
57,58
59,60
61,62
61,63
61,64
62,63
63,64
63,65
65,66
65,67
65,68
68,69
69,70
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,33,34,38,40,45,47,51,53,54,58,60,64,66,67,70,73,75,76,79,80
-----computeFrom-----
13,14
13,15
19,20
19,21
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_31_bad(){    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_31_bad()
CWE401_Memory_Leak__wchar_t_calloc_31_bad
{    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(12,20,0)
(8,6,0)
(0,23,0)
(4,15,0)
(25,15,0)
(27,1,0)
(9,17,0)
(32,8,0)
(5,24,0)
(14,0,0)
(21,1,0)
(8,2,0)
(2,16,0)
(20,12,0)
(10,23,0)
(3,24,0)
(7,17,0)
(1,23,0)
(22,6,0)
(6,8,0)
(28,18,0)
(2,8,0)
(13,23,0)
(15,24,0)
(11,4,0)
(33,12,0)
(0,15,0)
(1,0,0)
(4,24,0)
(2,15,0)
(17,15,0)
(15,2,0)
(20,30,0)
(18,24,0)
(23,24,0)
(16,2,0)
(31,0,0)
(26,18,0)
(27,21,1)
(8,6,1)
(25,18,1)
(7,9,1)
(11,17,1)
(2,8,1)
(17,7,1)
(4,11,1)
(0,15,1)
(19,1,1)
(18,28,1)
(2,16,1)
(33,17,1)
(6,22,1)
(1,27,1)
(11,20,1)
(20,12,1)
(28,26,1)
(15,2,1)
(21,0,1)
(0,14,1)
(12,33,1)
(31,4,1)
(14,31,1)
(32,25,1)
(4,15,1)
(22,32,1)
(17,15,1)
(1,0,1)
(9,15,1)
(17,15,2)
(0,15,2)
(12,17,2)
(4,15,2)
(20,17,2)
(1,0,2)
(2,8,2)
(33,17,2)
(20,12,2)
(2,16,2)
(15,2,2)
(8,6,2)
-----------------------------------
(0,* dataCopy = data)
(1,* data = dataCopy)
(2,(wchar_t *)
(3,data)
(4,printWLine(data)
(5,if (data == NULL)
(6,sizeof(wchar_t)
(7,NULL)
(8,calloc(100, sizeof(wchar_t)
(9,data)
(10,dataCopy)
(11,data)
(12,-1)
(13,data)
(14,data)
(15,data = (wchar_t *)
(16,wchar_t *)
(17,data == NULL)
(18,data = NULL)
(19,RET)
(20,exit(-1)
(21,data)
(22,wchar_t)
(23,)
(24,)
(25,data)
(26,data)
(27,dataCopy)
(28,NULL)
(29, sizeof(wchar_t)
(30,)
(31,dataCopy)
(32,100)
(33,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^