-----label-----
1
-----code-----
static int shrink_boom(struct drm_i915_private *i915,
		       struct i915_address_space *vm,
		       u64 hole_start, u64 hole_end,
		       unsigned long end_time)
{
	unsigned int sizes[] = { SZ_2M, SZ_1G };
	struct drm_i915_gem_object *purge;
	struct drm_i915_gem_object *explode;
	int err;
	int i;

	/*
	 * Catch the case which shrink_hole seems to miss. The setup here
	 * requires invoking the shrinker as we do the alloc_pt/alloc_pd, while
	 * ensuring that all vma assiocated with the respective pd/pdp are
	 * unpinned at the time.
	 */

	for (i = 0; i < ARRAY_SIZE(sizes); ++i) {
		unsigned int flags = PIN_USER | PIN_OFFSET_FIXED;
		unsigned int size = sizes[i];
		struct i915_vma *vma;

		purge = fake_dma_object(i915, size);
		if (IS_ERR(purge))
			return PTR_ERR(purge);

		vma = i915_vma_instance(purge, vm, NULL);
		if (IS_ERR(vma)) {
			err = PTR_ERR(vma);
			goto err_purge;
		}

		err = i915_vma_pin(vma, 0, 0, flags);
		if (err)
			goto err_purge;

		/* Should now be ripe for purging */
		i915_vma_unpin(vma);

		explode = fake_dma_object(i915, size);
		if (IS_ERR(explode)) {
			err = PTR_ERR(explode);
			goto err_purge;
		}

		vm->fault_attr.probability = 100;
		vm->fault_attr.interval = 1;
		atomic_set(&vm->fault_attr.times, -1);

		vma = i915_vma_instance(explode, vm, NULL);
		if (IS_ERR(vma)) {
			err = PTR_ERR(vma);
			goto err_explode;
		}

		err = i915_vma_pin(vma, 0, 0, flags | size);
		if (err)
			goto err_explode;

		i915_vma_unpin(vma);

		i915_gem_object_put(purge);
		i915_gem_object_put(explode);

		memset(&vm->fault_attr, 0, sizeof(vm->fault_attr));
		cleanup_freed_objects(i915);
	}

	return 0;

err_explode:
	i915_gem_object_put(explode);
err_purge:
	i915_gem_object_put(purge);
	memset(&vm->fault_attr, 0, sizeof(vm->fault_attr));
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
29,30
31,32
31,33
31,34
31,35
31,36
31,37
31,38
31,39
31,40
31,41
31,42
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
52,53
52,54
53,54
55,56
55,57
58,59
59,60
59,61
61,62
63,64
64,65
64,66
66,67
68,69
68,70
68,71
68,72
69,70
70,71
70,72
71,72
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
83,84
85,86
85,87
85,88
85,89
85,90
85,91
85,92
85,93
85,94
85,95
85,96
85,97
85,98
85,99
85,100
85,101
85,102
85,103
85,104
85,105
85,106
85,107
85,108
85,109
86,87
87,88
87,89
89,90
89,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
100,101
100,102
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
112,113
112,114
115,116
116,117
116,118
117,118
119,120
119,121
119,122
120,121
122,123
124,125
126,127
126,128
127,128
127,129
128,129
130,131
132,133
133,134
133,135
134,135
136,137
138,139
139,140
139,141
140,141
142,143
142,144
142,145
142,146
143,144
145,146
147,148
149,150
151,152
151,153
152,153
152,154
153,154
155,156
157,158
157,159
158,159
159,160
159,161
160,161
162,163
162,164
163,164
165,166
167,168
169,170
170,171
170,172
171,172
173,174
173,175
173,176
173,177
173,178
174,175
176,177
180,181
182,183
182,184
183,184
185,186
187,188
188,189
188,190
189,190
191,192
193,194
194,195
194,196
195,196
197,198
197,199
197,200
198,199
200,201
202,203
204,205
204,206
205,206
205,207
206,207
208,209
210,211
210,212
211,212
212,213
212,214
213,214
215,216
215,217
216,217
218,219
220,221
222,223
223,224
223,225
224,225
224,226
225,226
225,227
226,227
231,232
232,233
232,234
233,234
233,235
234,235
234,236
235,236
240,241
241,242
241,243
241,244
242,243
244,245
245,246
245,247
246,247
246,248
247,248
251,252
253,254
254,255
254,256
255,256
257,258
257,259
257,260
257,261
258,259
260,261
262,263
264,265
266,267
266,268
267,268
267,269
268,269
270,271
272,273
272,274
273,274
274,275
274,276
275,276
277,278
277,279
278,279
280,281
282,283
284,285
285,286
285,287
286,287
288,289
288,290
288,291
288,292
288,293
289,290
291,292
295,296
295,297
296,297
298,299
300,301
300,302
301,302
303,304
305,306
306,307
306,308
307,308
309,310
311,312
312,313
312,314
313,314
315,316
317,318
318,319
318,320
319,320
321,322
323,324
324,325
324,326
324,327
324,328
325,326
327,328
328,329
328,330
329,330
333,334
334,335
335,336
335,337
336,337
339,340
340,341
340,342
341,342
343,344
345,346
347,348
347,349
349,350
350,351
350,352
351,352
353,354
355,356
355,357
357,358
358,359
358,360
359,360
361,362
363,364
364,365
364,366
364,367
364,368
365,366
367,368
368,369
368,370
369,370
373,374
374,375
375,376
375,377
376,377
379,380
380,381
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,28,30,34,36,37,41,43,47,49,50,54,56,57,60,62,65,67,72,73,76,79,81,84,88,90,94,96,99,101,105,107,111,113,114,118,121,123,125,129,131,135,137,141,144,146,148,150,154,156,161,164,166,168,172,175,177,178,179,181,184,186,190,192,196,199,201,203,207,209,214,217,219,221,227,228,229,230,236,237,238,239,243,248,249,250,252,256,259,261,263,265,269,271,276,279,281,283,287,290,292,293,294,297,299,302,304,308,310,314,316,320,322,326,330,331,332,337,338,342,344,346,348,352,354,356,360,362,366,370,371,372,377,378,381
-----computeFrom-----
70,71
70,72
74,75
74,76
92,93
92,94
116,117
116,118
139,140
139,141
159,160
159,161
170,171
170,172
194,195
194,196
212,213
212,214
223,224
223,225
232,233
232,234
254,255
254,256
274,275
274,276
285,286
285,287
295,296
295,297
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int shrink_boom(struct drm_i915_private *i915,		       struct i915_address_space *vm,		       u64 hole_start, u64 hole_end,		       unsigned long end_time){	unsigned int sizes[] = { SZ_2M, SZ_1G };	struct drm_i915_gem_object *purge;	struct drm_i915_gem_object *explode;	int err;	int i;	/*	 * Catch the case which shrink_hole seems to miss. The setup here	 * requires invoking the shrinker as we do the alloc_pt/alloc_pd, while	 * ensuring that all vma assiocated with the respective pd/pdp are	 * unpinned at the time.	 */	for (i = 0; i < ARRAY_SIZE(sizes); ++i) {		unsigned int flags = PIN_USER | PIN_OFFSET_FIXED;		unsigned int size = sizes[i];		struct i915_vma *vma;		purge = fake_dma_object(i915, size);		if (IS_ERR(purge))			return PTR_ERR(purge);		vma = i915_vma_instance(purge, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_purge;		}		err = i915_vma_pin(vma, 0, 0, flags);		if (err)			goto err_purge;		/* Should now be ripe for purging */		i915_vma_unpin(vma);		explode = fake_dma_object(i915, size);		if (IS_ERR(explode)) {			err = PTR_ERR(explode);			goto err_purge;		}		vm->fault_attr.probability = 100;		vm->fault_attr.interval = 1;		atomic_set(&vm->fault_attr.times, -1);		vma = i915_vma_instance(explode, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_explode;		}		err = i915_vma_pin(vma, 0, 0, flags | size);		if (err)			goto err_explode;		i915_vma_unpin(vma);		i915_gem_object_put(purge);		i915_gem_object_put(explode);		memset(&vm->fault_attr, 0, sizeof(vm->fault_attr));		cleanup_freed_objects(i915);	}	return 0;err_explode:	i915_gem_object_put(explode);err_purge:	i915_gem_object_put(purge);	memset(&vm->fault_attr, 0, sizeof(vm->fault_attr));	return err;}
static int
shrink_boom(struct drm_i915_private *i915,		       struct i915_address_space *vm,		       u64 hole_start, u64 hole_end,		       unsigned long end_time)
shrink_boom
struct drm_i915_private *i915
struct drm_i915_private
drm_i915_private
*i915
*
i915
struct i915_address_space *vm
struct i915_address_space
i915_address_space
*vm
*
vm
u64 hole_start
u64
u64
hole_start
hole_start
u64 hole_end
u64
u64
hole_end
hole_end
unsigned long end_time
unsigned long
end_time
end_time
{	unsigned int sizes[] = { SZ_2M, SZ_1G };	struct drm_i915_gem_object *purge;	struct drm_i915_gem_object *explode;	int err;	int i;	/*	 * Catch the case which shrink_hole seems to miss. The setup here	 * requires invoking the shrinker as we do the alloc_pt/alloc_pd, while	 * ensuring that all vma assiocated with the respective pd/pdp are	 * unpinned at the time.	 */	for (i = 0; i < ARRAY_SIZE(sizes); ++i) {		unsigned int flags = PIN_USER | PIN_OFFSET_FIXED;		unsigned int size = sizes[i];		struct i915_vma *vma;		purge = fake_dma_object(i915, size);		if (IS_ERR(purge))			return PTR_ERR(purge);		vma = i915_vma_instance(purge, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_purge;		}		err = i915_vma_pin(vma, 0, 0, flags);		if (err)			goto err_purge;		/* Should now be ripe for purging */		i915_vma_unpin(vma);		explode = fake_dma_object(i915, size);		if (IS_ERR(explode)) {			err = PTR_ERR(explode);			goto err_purge;		}		vm->fault_attr.probability = 100;		vm->fault_attr.interval = 1;		atomic_set(&vm->fault_attr.times, -1);		vma = i915_vma_instance(explode, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_explode;		}		err = i915_vma_pin(vma, 0, 0, flags | size);		if (err)			goto err_explode;		i915_vma_unpin(vma);		i915_gem_object_put(purge);		i915_gem_object_put(explode);		memset(&vm->fault_attr, 0, sizeof(vm->fault_attr));		cleanup_freed_objects(i915);	}	return 0;err_explode:	i915_gem_object_put(explode);err_purge:	i915_gem_object_put(purge);	memset(&vm->fault_attr, 0, sizeof(vm->fault_attr));	return err;}
unsigned int sizes[] = { SZ_2M, SZ_1G };
unsigned int sizes[] = { SZ_2M, SZ_1G };
unsigned int
sizes[] = { SZ_2M, SZ_1G }
sizes
[]
= { SZ_2M, SZ_1G }
{ SZ_2M, SZ_1G }
SZ_2M
SZ_2M
SZ_1G
SZ_1G
struct drm_i915_gem_object *purge;
struct drm_i915_gem_object *purge;
struct drm_i915_gem_object
drm_i915_gem_object
*purge
*
purge
struct drm_i915_gem_object *explode;
struct drm_i915_gem_object *explode;
struct drm_i915_gem_object
drm_i915_gem_object
*explode
*
explode
int err;
int err;
int
err
err
int i;
int i;
int
i
i
for (i = 0; i < ARRAY_SIZE(sizes); ++i) {		unsigned int flags = PIN_USER | PIN_OFFSET_FIXED;		unsigned int size = sizes[i];		struct i915_vma *vma;		purge = fake_dma_object(i915, size);		if (IS_ERR(purge))			return PTR_ERR(purge);		vma = i915_vma_instance(purge, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_purge;		}		err = i915_vma_pin(vma, 0, 0, flags);		if (err)			goto err_purge;		/* Should now be ripe for purging */		i915_vma_unpin(vma);		explode = fake_dma_object(i915, size);		if (IS_ERR(explode)) {			err = PTR_ERR(explode);			goto err_purge;		}		vm->fault_attr.probability = 100;		vm->fault_attr.interval = 1;		atomic_set(&vm->fault_attr.times, -1);		vma = i915_vma_instance(explode, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_explode;		}		err = i915_vma_pin(vma, 0, 0, flags | size);		if (err)			goto err_explode;		i915_vma_unpin(vma);		i915_gem_object_put(purge);		i915_gem_object_put(explode);		memset(&vm->fault_attr, 0, sizeof(vm->fault_attr));		cleanup_freed_objects(i915);	}
i = 0;
i = 0
i
i
0
i < ARRAY_SIZE(sizes)
i
i
ARRAY_SIZE(sizes)
ARRAY_SIZE
ARRAY_SIZE
sizes
sizes
++i
i
i
{		unsigned int flags = PIN_USER | PIN_OFFSET_FIXED;		unsigned int size = sizes[i];		struct i915_vma *vma;		purge = fake_dma_object(i915, size);		if (IS_ERR(purge))			return PTR_ERR(purge);		vma = i915_vma_instance(purge, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_purge;		}		err = i915_vma_pin(vma, 0, 0, flags);		if (err)			goto err_purge;		/* Should now be ripe for purging */		i915_vma_unpin(vma);		explode = fake_dma_object(i915, size);		if (IS_ERR(explode)) {			err = PTR_ERR(explode);			goto err_purge;		}		vm->fault_attr.probability = 100;		vm->fault_attr.interval = 1;		atomic_set(&vm->fault_attr.times, -1);		vma = i915_vma_instance(explode, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_explode;		}		err = i915_vma_pin(vma, 0, 0, flags | size);		if (err)			goto err_explode;		i915_vma_unpin(vma);		i915_gem_object_put(purge);		i915_gem_object_put(explode);		memset(&vm->fault_attr, 0, sizeof(vm->fault_attr));		cleanup_freed_objects(i915);	}
unsigned int flags = PIN_USER | PIN_OFFSET_FIXED;
unsigned int flags = PIN_USER | PIN_OFFSET_FIXED;
unsigned int
flags = PIN_USER | PIN_OFFSET_FIXED
flags
= PIN_USER | PIN_OFFSET_FIXED
PIN_USER | PIN_OFFSET_FIXED
PIN_USER
PIN_USER
PIN_OFFSET_FIXED
PIN_OFFSET_FIXED
unsigned int size = sizes[i];
unsigned int size = sizes[i];
unsigned int
size = sizes[i]
size
= sizes[i]
sizes[i]
sizes
sizes
i
i
struct i915_vma *vma;
struct i915_vma *vma;
struct i915_vma
i915_vma
*vma
*
vma
purge = fake_dma_object(i915, size);
purge = fake_dma_object(i915, size)
purge
purge
fake_dma_object(i915, size)
fake_dma_object
fake_dma_object
i915
i915
size
size
if (IS_ERR(purge))			return PTR_ERR(purge);
IS_ERR(purge)
IS_ERR
IS_ERR
purge
purge
return PTR_ERR(purge);
PTR_ERR(purge)
PTR_ERR
PTR_ERR
purge
purge
vma = i915_vma_instance(purge, vm, NULL);
vma = i915_vma_instance(purge, vm, NULL)
vma
vma
i915_vma_instance(purge, vm, NULL)
i915_vma_instance
i915_vma_instance
purge
purge
vm
vm
NULL
NULL
if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_purge;		}
IS_ERR(vma)
IS_ERR
IS_ERR
vma
vma
{			err = PTR_ERR(vma);			goto err_purge;		}
err = PTR_ERR(vma);
err = PTR_ERR(vma)
err
err
PTR_ERR(vma)
PTR_ERR
PTR_ERR
vma
vma
goto err_purge;
err_purge
err = i915_vma_pin(vma, 0, 0, flags);
err = i915_vma_pin(vma, 0, 0, flags)
err
err
i915_vma_pin(vma, 0, 0, flags)
i915_vma_pin
i915_vma_pin
vma
vma
0
0
flags
flags
if (err)			goto err_purge;
err
err
goto err_purge;
err_purge
i915_vma_unpin(vma);
i915_vma_unpin(vma)
i915_vma_unpin
i915_vma_unpin
vma
vma
explode = fake_dma_object(i915, size);
explode = fake_dma_object(i915, size)
explode
explode
fake_dma_object(i915, size)
fake_dma_object
fake_dma_object
i915
i915
size
size
if (IS_ERR(explode)) {			err = PTR_ERR(explode);			goto err_purge;		}
IS_ERR(explode)
IS_ERR
IS_ERR
explode
explode
{			err = PTR_ERR(explode);			goto err_purge;		}
err = PTR_ERR(explode);
err = PTR_ERR(explode)
err
err
PTR_ERR(explode)
PTR_ERR
PTR_ERR
explode
explode
goto err_purge;
err_purge
vm->fault_attr.probability = 100;
vm->fault_attr.probability = 100
vm->fault_attr.probability
vm->fault_attr
vm
vm
fault_attr
probability
100
vm->fault_attr.interval = 1;
vm->fault_attr.interval = 1
vm->fault_attr.interval
vm->fault_attr
vm
vm
fault_attr
interval
1
atomic_set(&vm->fault_attr.times, -1);
atomic_set(&vm->fault_attr.times, -1)
atomic_set
atomic_set
&vm->fault_attr.times
vm->fault_attr.times
vm->fault_attr
vm
vm
fault_attr
times
-1
1
vma = i915_vma_instance(explode, vm, NULL);
vma = i915_vma_instance(explode, vm, NULL)
vma
vma
i915_vma_instance(explode, vm, NULL)
i915_vma_instance
i915_vma_instance
explode
explode
vm
vm
NULL
NULL
if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_explode;		}
IS_ERR(vma)
IS_ERR
IS_ERR
vma
vma
{			err = PTR_ERR(vma);			goto err_explode;		}
err = PTR_ERR(vma);
err = PTR_ERR(vma)
err
err
PTR_ERR(vma)
PTR_ERR
PTR_ERR
vma
vma
goto err_explode;
err_explode
err = i915_vma_pin(vma, 0, 0, flags | size);
err = i915_vma_pin(vma, 0, 0, flags | size)
err
err
i915_vma_pin(vma, 0, 0, flags | size)
i915_vma_pin
i915_vma_pin
vma
vma
0
0
flags | size
flags
flags
size
size
if (err)			goto err_explode;
err
err
goto err_explode;
err_explode
i915_vma_unpin(vma);
i915_vma_unpin(vma)
i915_vma_unpin
i915_vma_unpin
vma
vma
i915_gem_object_put(purge);
i915_gem_object_put(purge)
i915_gem_object_put
i915_gem_object_put
purge
purge
i915_gem_object_put(explode);
i915_gem_object_put(explode)
i915_gem_object_put
i915_gem_object_put
explode
explode
memset(&vm->fault_attr, 0, sizeof(vm->fault_attr));
memset(&vm->fault_attr, 0, sizeof(vm->fault_attr))
memset
memset
&vm->fault_attr
vm->fault_attr
vm
vm
fault_attr
0
sizeof(vm->fault_attr)
(vm->fault_attr)
vm->fault_attr
vm
vm
fault_attr
cleanup_freed_objects(i915);
cleanup_freed_objects(i915)
cleanup_freed_objects
cleanup_freed_objects
i915
i915
return 0;
0
err_explode:	i915_gem_object_put(explode);
err_explode
i915_gem_object_put(explode);
i915_gem_object_put(explode)
i915_gem_object_put
i915_gem_object_put
explode
explode
err_purge:	i915_gem_object_put(purge);
err_purge
i915_gem_object_put(purge);
i915_gem_object_put(purge)
i915_gem_object_put
i915_gem_object_put
purge
purge
memset(&vm->fault_attr, 0, sizeof(vm->fault_attr));
memset(&vm->fault_attr, 0, sizeof(vm->fault_attr))
memset
memset
&vm->fault_attr
vm->fault_attr
vm
vm
fault_attr
0
sizeof(vm->fault_attr)
(vm->fault_attr)
vm->fault_attr
vm
vm
fault_attr
return err;
err
err
-----joern-----
(130,20,0)
(2,172,0)
(149,172,0)
(72,69,0)
(146,94,0)
(132,25,0)
(116,68,0)
(170,168,0)
(105,96,0)
(157,79,0)
(14,61,0)
(66,61,0)
(147,86,0)
(33,61,0)
(110,6,0)
(101,79,0)
(76,61,0)
(19,161,0)
(112,61,0)
(46,2,0)
(39,133,0)
(85,159,0)
(13,61,0)
(108,164,0)
(151,88,0)
(64,113,0)
(119,10,0)
(153,146,0)
(143,141,0)
(156,107,0)
(140,105,0)
(46,168,0)
(11,6,0)
(37,117,0)
(171,130,0)
(71,61,0)
(89,172,0)
(93,117,0)
(133,172,0)
(90,69,0)
(121,161,0)
(69,4,0)
(139,105,0)
(130,0,0)
(141,25,0)
(35,61,0)
(36,46,0)
(105,168,0)
(154,61,0)
(69,23,0)
(71,8,0)
(168,105,0)
(99,96,0)
(141,79,0)
(161,93,0)
(18,4,0)
(163,117,0)
(162,33,0)
(44,54,0)
(107,110,0)
(49,94,0)
(45,71,0)
(110,61,0)
(131,110,0)
(142,110,0)
(5,159,0)
(119,66,0)
(150,159,0)
(8,81,0)
(132,43,0)
(121,119,0)
(47,61,0)
(62,82,0)
(137,157,0)
(117,4,0)
(159,4,0)
(174,82,0)
(104,46,0)
(103,166,0)
(9,166,0)
(25,61,0)
(70,65,0)
(33,172,0)
(28,81,0)
(70,169,0)
(54,127,0)
(172,159,0)
(16,79,0)
(95,61,0)
(38,25,0)
(26,132,0)
(70,79,0)
(119,156,0)
(172,61,0)
(24,21,0)
(84,131,0)
(56,61,0)
(52,28,0)
(68,25,0)
(105,16,0)
(136,2,0)
(88,61,0)
(144,118,0)
(152,128,0)
(165,79,0)
(82,174,0)
(17,93,0)
(145,4,0)
(125,2,0)
(118,43,0)
(8,71,0)
(97,0,0)
(83,16,0)
(78,112,0)
(10,133,0)
(2,46,0)
(135,166,0)
(160,20,0)
(10,27,0)
(7,27,0)
(23,73,0)
(87,19,0)
(138,10,0)
(17,82,0)
(32,79,0)
(42,81,0)
(161,82,0)
(18,169,0)
(65,70,0)
(111,96,0)
(50,45,0)
(128,61,0)
(51,166,0)
(17,79,0)
(164,16,0)
(118,168,0)
(41,146,0)
(119,79,0)
(98,17,0)
(157,112,0)
(40,18,0)
(127,73,0)
(109,96,0)
(34,66,0)
(74,111,0)
(169,18,0)
(20,112,0)
(124,70,0)
(53,155,0)
(113,96,0)
(19,25,0)
(28,4,0)
(35,43,0)
(117,93,0)
(132,168,0)
(133,10,0)
(169,70,0)
(81,8,0)
(20,130,0)
(31,6,0)
(29,47,0)
(82,128,0)
(115,174,0)
(81,28,0)
(159,112,0)
(92,73,0)
(23,69,0)
(59,13,0)
(127,54,0)
(58,76,0)
(148,132,0)
(57,174,0)
(13,110,0)
(129,2,0)
(73,61,0)
(119,86,0)
(91,107,0)
(88,25,0)
(75,61,0)
(158,54,0)
(63,93,0)
(155,112,0)
(166,66,0)
(6,4,0)
(25,132,0)
(6,110,0)
(167,79,0)
(77,6,0)
(94,61,0)
(54,4,0)
(164,113,0)
(156,21,0)
(2,86,0)
(1,118,0)
(65,145,0)
(46,94,0)
(113,164,0)
(73,23,0)
(6,25,0)
(12,79,0)
(71,45,0)
(119,130,0)
(3,61,0)
(100,89,0)
(107,156,0)
(60,79,0)
(67,119,0)
(86,61,0)
(121,17,0)
(66,166,0)
(120,156,0)
(76,112,0)
(30,28,0)
(134,61,0)
(145,65,0)
(118,112,0)
(94,146,0)
(106,145,0)
(173,61,0)
(166,94,0)
(48,145,0)
(80,35,0)
(112,118,0)
(126,18,0)
(22,79,0)
(122,61,0)
(93,47,0)
(73,127,0)
(168,61,0)
(174,4,0)
(86,2,0)
(159,172,0)
(114,79,0)
(166,110,0)
(33,162,1)
(54,44,1)
(139,170,1)
(111,74,1)
(96,99,1)
(133,172,1)
(169,18,1)
(157,137,1)
(119,130,1)
(89,100,1)
(70,65,1)
(51,135,1)
(103,34,1)
(143,157,1)
(136,129,1)
(123,15,1)
(105,16,1)
(46,168,1)
(64,111,1)
(153,49,1)
(35,80,1)
(164,16,1)
(150,85,1)
(2,172,1)
(64,96,1)
(131,84,1)
(143,24,1)
(55,102,1)
(5,150,1)
(57,155,1)
(166,94,1)
(40,126,1)
(142,68,1)
(119,67,1)
(144,78,1)
(13,110,1)
(93,117,1)
(46,104,1)
(149,71,1)
(20,112,1)
(125,136,1)
(7,10,1)
(6,25,1)
(121,161,1)
(10,133,1)
(69,90,1)
(90,72,1)
(100,172,1)
(18,40,1)
(28,30,1)
(31,77,1)
(157,112,1)
(119,156,1)
(15,86,1)
(164,108,1)
(119,86,1)
(105,140,1)
(119,66,1)
(35,43,1)
(174,115,1)
(111,96,1)
(81,42,1)
(72,76,1)
(91,120,1)
(48,124,1)
(68,25,1)
(68,116,1)
(49,113,1)
(17,98,1)
(108,64,1)
(146,41,1)
(137,123,1)
(9,51,1)
(171,155,1)
(17,93,1)
(73,23,1)
(129,147,1)
(127,54,1)
(141,25,1)
(166,9,1)
(118,1,1)
(107,91,1)
(6,4,1)
(25,132,1)
(138,89,1)
(160,171,1)
(156,107,1)
(38,168,1)
(71,45,1)
(2,46,1)
(16,83,1)
(62,174,1)
(39,138,1)
(45,50,1)
(128,152,1)
(98,113,1)
(126,141,1)
(58,88,1)
(80,73,1)
(132,168,1)
(94,146,1)
(135,103,1)
(159,5,1)
(124,169,1)
(63,117,1)
(112,118,1)
(104,36,1)
(24,156,1)
(53,112,1)
(152,82,1)
(74,35,1)
(140,139,1)
(46,94,1)
(34,131,1)
(117,4,1)
(88,151,1)
(137,7,1)
(92,23,1)
(19,25,1)
(115,57,1)
(113,96,1)
(88,25,1)
(85,149,1)
(143,55,1)
(8,81,1)
(106,48,1)
(162,15,1)
(76,112,1)
(18,4,1)
(93,63,1)
(118,168,1)
(161,19,1)
(11,142,1)
(172,159,1)
(47,29,1)
(145,106,1)
(50,8,1)
(170,94,1)
(54,4,1)
(163,128,1)
(69,4,1)
(133,39,1)
(73,127,1)
(159,4,1)
(70,169,1)
(130,20,1)
(102,66,1)
(118,43,1)
(174,4,1)
(161,82,1)
(82,62,1)
(65,145,1)
(110,6,1)
(1,144,1)
(107,110,1)
(19,87,1)
(116,25,1)
(29,93,1)
(120,131,1)
(82,174,1)
(44,158,1)
(117,37,1)
(36,125,1)
(99,109,1)
(155,53,1)
(66,166,1)
(121,17,1)
(52,47,1)
(81,28,1)
(76,58,1)
(159,112,1)
(26,38,1)
(28,4,1)
(17,82,1)
(105,96,1)
(143,97,1)
(42,28,1)
(155,112,1)
(33,172,1)
(145,4,1)
(141,143,1)
(59,102,1)
(132,43,1)
(89,172,1)
(78,13,1)
(131,110,1)
(148,26,1)
(30,52,1)
(13,59,1)
(71,8,1)
(161,93,1)
(37,163,1)
(97,130,1)
(147,89,1)
(109,16,1)
(132,148,1)
(77,11,1)
(113,164,1)
(168,105,1)
(121,119,1)
(23,69,1)
(151,33,1)
(41,153,1)
(67,70,1)
(87,68,1)
(84,110,1)
(166,110,1)
(6,31,1)
(158,92,1)
(119,10,1)
(20,160,1)
(86,2,1)
(23,15,2)
(126,102,2)
(145,155,2)
(166,131,2)
(115,155,2)
(35,15,2)
(18,102,2)
(168,105,2)
(142,68,2)
(70,15,2)
(65,155,2)
(119,155,2)
(59,102,2)
(118,102,2)
(169,15,2)
(15,89,2)
(104,89,2)
(58,15,2)
(86,2,2)
(91,131,2)
(153,113,2)
(138,89,2)
(113,164,2)
(10,133,2)
(17,113,2)
(126,155,2)
(25,132,2)
(82,155,2)
(2,172,2)
(105,113,2)
(18,4,2)
(90,15,2)
(110,6,2)
(48,15,2)
(126,15,2)
(40,89,2)
(141,102,2)
(171,155,2)
(119,130,2)
(106,89,2)
(74,15,2)
(28,4,2)
(11,68,2)
(71,45,2)
(46,94,2)
(107,110,2)
(34,131,2)
(106,131,2)
(119,86,2)
(169,18,2)
(172,159,2)
(24,131,2)
(132,113,2)
(42,155,2)
(26,113,2)
(48,131,2)
(31,68,2)
(81,28,2)
(106,102,2)
(141,155,2)
(20,112,2)
(139,113,2)
(45,155,2)
(124,155,2)
(163,155,2)
(137,15,2)
(72,15,2)
(70,89,2)
(126,89,2)
(85,155,2)
(67,131,2)
(93,155,2)
(97,155,2)
(156,131,2)
(65,89,2)
(88,25,2)
(40,15,2)
(130,20,2)
(121,161,2)
(132,43,2)
(18,15,2)
(1,102,2)
(71,8,2)
(140,113,2)
(25,113,2)
(18,155,2)
(132,168,2)
(143,89,2)
(73,23,2)
(37,155,2)
(157,15,2)
(144,102,2)
(69,15,2)
(80,15,2)
(143,155,2)
(70,102,2)
(2,89,2)
(143,131,2)
(159,112,2)
(158,15,2)
(94,146,2)
(30,155,2)
(105,16,2)
(98,113,2)
(146,113,2)
(76,15,2)
(161,68,2)
(55,102,2)
(149,155,2)
(9,131,2)
(67,15,2)
(10,89,2)
(120,131,2)
(124,89,2)
(133,89,2)
(70,65,2)
(169,131,2)
(124,102,2)
(131,110,2)
(77,68,2)
(48,102,2)
(57,155,2)
(76,112,2)
(66,166,2)
(40,155,2)
(141,25,2)
(143,15,2)
(17,93,2)
(119,10,2)
(41,113,2)
(170,113,2)
(18,131,2)
(33,172,2)
(174,155,2)
(128,155,2)
(69,4,2)
(135,131,2)
(164,16,2)
(86,89,2)
(65,15,2)
(119,102,2)
(119,156,2)
(162,15,2)
(119,15,2)
(166,94,2)
(6,68,2)
(65,131,2)
(70,169,2)
(70,131,2)
(124,15,2)
(164,15,2)
(161,93,2)
(67,89,2)
(157,112,2)
(151,15,2)
(67,155,2)
(36,89,2)
(51,131,2)
(168,113,2)
(68,113,2)
(130,155,2)
(5,155,2)
(47,155,2)
(117,4,2)
(127,15,2)
(155,102,2)
(33,15,2)
(116,113,2)
(6,25,2)
(111,15,2)
(66,131,2)
(143,102,2)
(102,131,2)
(63,155,2)
(155,112,2)
(118,168,2)
(169,102,2)
(94,113,2)
(145,15,2)
(150,155,2)
(46,168,2)
(48,89,2)
(124,131,2)
(39,89,2)
(156,107,2)
(8,81,2)
(38,113,2)
(23,69,2)
(145,89,2)
(145,4,2)
(152,155,2)
(113,15,2)
(125,89,2)
(121,17,2)
(73,15,2)
(129,89,2)
(20,155,2)
(119,66,2)
(44,15,2)
(141,15,2)
(29,155,2)
(70,155,2)
(107,131,2)
(65,145,2)
(82,174,2)
(6,4,2)
(18,89,2)
(48,155,2)
(119,131,2)
(160,155,2)
(53,102,2)
(78,102,2)
(13,102,2)
(87,68,2)
(103,131,2)
(50,155,2)
(93,117,2)
(148,113,2)
(92,15,2)
(161,82,2)
(117,155,2)
(159,4,2)
(88,15,2)
(110,68,2)
(126,131,2)
(54,15,2)
(89,172,2)
(111,96,2)
(64,15,2)
(141,89,2)
(137,89,2)
(157,89,2)
(141,131,2)
(49,113,2)
(46,89,2)
(123,15,2)
(118,43,2)
(7,89,2)
(100,155,2)
(40,102,2)
(166,110,2)
(145,131,2)
(131,68,2)
(89,155,2)
(113,96,2)
(65,102,2)
(13,110,2)
(28,155,2)
(106,155,2)
(17,82,2)
(174,4,2)
(145,102,2)
(169,155,2)
(121,119,2)
(19,68,2)
(54,4,2)
(2,46,2)
(71,155,2)
(105,96,2)
(169,89,2)
(108,15,2)
(112,102,2)
(159,155,2)
(84,68,2)
(68,25,2)
(127,54,2)
(35,43,2)
(136,89,2)
(112,118,2)
(119,89,2)
(133,172,2)
(67,102,2)
(40,131,2)
(73,127,2)
(106,15,2)
(52,155,2)
(62,155,2)
(172,155,2)
(19,25,2)
(147,89,2)
(8,155,2)
(81,155,2)
-----------------------------------
(0,)
(1,size)
(2,i915_vma_pin(vma, 0, 0, flags | size)
(3,size)
(4,struct i915_address_space *vm)
(5,NULL)
(6,i915_vma_instance(purge, vm, NULL)
(7,goto err_explode;)
(8,&vm->fault_attr.times)
(9,flags)
(10,err = PTR_ERR(vma)
(11,purge)
(12,explode)
(13,i915_vma_unpin(vma)
(14,if (err)
(15,err)
(16,sizes[] = { SZ_2M, SZ_1G })
(17,return 0;)
(18,vm->fault_attr)
(19,PTR_ERR(purge)
(20,PTR_ERR(explode)
(21,)
(22,err_explode:)
(23,&vm->fault_attr)
(24,goto err_purge;)
(25,purge = fake_dma_object(i915, size)
(26,i915)
(27,)
(28,vm->fault_attr)
(29,1)
(30,fault_attr)
(31,NULL)
(32,i)
(33,i915_vma_unpin(vma)
(34,err)
(35,cleanup_freed_objects(i915)
(36,flags)
(37,fault_attr)
(38,purge)
(39,vma)
(40,fault_attr)
(41,PIN_OFFSET_FIXED)
(42,times)
(43,struct drm_i915_private *i915)
(44,fault_attr)
(45,-1)
(46,flags | size)
(47,vm->fault_attr.interval = 1)
(48,vm)
(49,flags)
(50,1)
(51,0)
(52,vm)
(53,explode)
(54,vm->fault_attr)
(55,goto err_purge;)
(56,if (IS_ERR(explode)
(57,vm)
(58,explode)
(59,vma)
(60,err)
(61,)
(62,probability)
(63,interval)
(64,i)
(65,sizeof(vm->fault_attr)
(66,err = i915_vma_pin(vma, 0, 0, flags)
(67,err)
(68,IS_ERR(purge)
(69,vm->fault_attr)
(70,memset(&vm->fault_attr, 0, sizeof(vm->fault_attr)
(71,atomic_set(&vm->fault_attr.times, -1)
(72,vm)
(73,memset(&vm->fault_attr, 0, sizeof(vm->fault_attr)
(74,i)
(75,vma)
(76,i915_gem_object_put(explode)
(77,vm)
(78,explode)
(79,)
(80,i915)
(81,vm->fault_attr.times)
(82,vm->fault_attr.probability)
(83,sizes)
(84,vma)
(85,explode)
(86,err = i915_vma_pin(vma, 0, 0, flags | size)
(87,purge)
(88,i915_gem_object_put(purge)
(89,IS_ERR(vma)
(90,fault_attr)
(91,vma)
(92,0)
(93,vm->fault_attr.interval)
(94,flags = PIN_USER | PIN_OFFSET_FIXED)
(95,if (IS_ERR(vma)
(96,i = 0)
(97,goto err_purge;)
(98,0)
(99,0)
(100,vma)
(101,purge)
(102,err)
(103,vma)
(104,size)
(105,sizes[i])
(106,fault_attr)
(107,PTR_ERR(vma)
(108,sizes)
(109,i)
(110,vma = i915_vma_instance(purge, vm, NULL)
(111,++i)
(112,explode = fake_dma_object(i915, size)
(113,i < ARRAY_SIZE(sizes)
(114,sizes)
(115,fault_attr)
(116,purge)
(117,vm->fault_attr)
(118,fake_dma_object(i915, size)
(119,return err;)
(120,err)
(121,RET)
(122,if (err)
(123,goto err_explode;)
(124,0)
(125,0)
(126,vm)
(127,sizeof(vm->fault_attr)
(128,vm->fault_attr.probability = 100)
(129,vma)
(130,err = PTR_ERR(explode)
(131,IS_ERR(vma)
(132,fake_dma_object(i915, size)
(133,PTR_ERR(vma)
(134,if (IS_ERR(purge)
(135,0)
(136,0)
(137,explode)
(138,err)
(139,sizes)
(140,i)
(141,i915_gem_object_put(purge)
(142,vma)
(143,purge)
(144,i915)
(145,vm->fault_attr)
(146,PIN_USER | PIN_OFFSET_FIXED)
(147,err)
(148,size)
(149,vma)
(150,vm)
(151,purge)
(152,100)
(153,PIN_USER)
(154,flags)
(155,IS_ERR(explode)
(156,err = PTR_ERR(vma)
(157,i915_gem_object_put(explode)
(158,vm)
(159,i915_vma_instance(explode, vm, NULL)
(160,explode)
(161,return PTR_ERR(purge)
(162,vma)
(163,vm)
(164,ARRAY_SIZE(sizes)
(165,for (i = 0; i < ARRAY_SIZE(sizes)
(166,i915_vma_pin(vma, 0, 0, flags)
(167,err_purge:)
(168,size = sizes[i])
(169,&vm->fault_attr)
(170,size)
(171,err)
(172,vma = i915_vma_instance(explode, vm, NULL)
(173,if (IS_ERR(vma)
(174,vm->fault_attr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^