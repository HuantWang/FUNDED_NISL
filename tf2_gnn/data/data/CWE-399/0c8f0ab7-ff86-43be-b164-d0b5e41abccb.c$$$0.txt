-----label-----
1
-----code-----
static int
apply_imm60 (struct module *mod, struct insn *insn, uint64_t val)
{
	if (slot(insn) != 1 && slot(insn) != 2) {
		printk(KERN_ERR "%s: invalid slot number %d for IMM60\n",
		       mod->name, slot(insn));
		return 0;
	}
	if (val + ((uint64_t) 1 << 59) >= (1UL << 60)) {
		printk(KERN_ERR "%s: value %ld out of IMM60 range\n",
			mod->name, (long) val);
		return 0;
	}
	ia64_patch_imm60((u64) insn, val);
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
23,25
24,25
24,26
25,26
25,27
26,27
26,28
27,28
29,30
32,33
32,34
33,34
33,35
34,35
36,37
39,40
39,41
40,41
41,42
43,44
43,45
44,45
44,46
45,46
45,47
46,47
48,49
49,50
49,51
50,51
50,52
51,52
51,53
52,53
57,58
58,59
58,60
61,62
61,63
62,63
63,64
65,66
66,67
66,68
66,69
67,68
69,70
69,71
70,71
70,72
71,72
74,75
76,77
78,79
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,28,30,31,35,37,38,42,47,53,54,55,56,59,60,64,68,72,73,75,77,79
-----computeFrom-----
24,25
24,26
25,26
25,27
32,33
32,34
44,45
44,46
45,46
45,47
49,50
49,51
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ProblemStatement;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static intapply_imm60 (struct module *mod, struct insn *insn, uint64_t val){	if (slot(insn) != 1 && slot(insn) != 2) {		printk(KERN_ERR "%s: invalid slot number %d for IMM60\n",		       mod->name, slot(insn));		return 0;	}	if (val + ((uint64_t) 1 << 59) >= (1UL << 60)) {		printk(KERN_ERR "%s: value %ld out of IMM60 range\n",			mod->name, (long) val);		return 0;	}	ia64_patch_imm60((u64) insn, val);	return 1;}
static int
apply_imm60 (struct module *mod, struct insn *insn, uint64_t val)
apply_imm60
struct module *mod
struct module
module
*mod
*
mod
struct insn *insn
struct insn
insn
*insn
*
insn
uint64_t val
uint64_t
uint64_t
val
val
{	if (slot(insn) != 1 && slot(insn) != 2) {		printk(KERN_ERR "%s: invalid slot number %d for IMM60\n",		       mod->name, slot(insn));		return 0;	}	if (val + ((uint64_t) 1 << 59) >= (1UL << 60)) {		printk(KERN_ERR "%s: value %ld out of IMM60 range\n",			mod->name, (long) val);		return 0;	}	ia64_patch_imm60((u64) insn, val);	return 1;}
if (slot(insn) != 1 && slot(insn) != 2) {		printk(KERN_ERR "%s: invalid slot number %d for IMM60\n",		       mod->name, slot(insn));		return 0;	}
slot(insn) != 1 && slot(insn) != 2
slot(insn) != 1
slot(insn)
slot
slot
insn
insn
1
slot(insn) != 2
slot(insn)
slot
slot
insn
insn
2
{		printk(KERN_ERR "%s: invalid slot number %d for IMM60\n",		       mod->name, slot(insn));		return 0;	}
printk(KERN_ERR "%s: invalid slot number %d for IMM60\n",		       mod->name, slot(insn));
return 0;
0
if (val + ((uint64_t) 1 << 59) >= (1UL << 60)) {		printk(KERN_ERR "%s: value %ld out of IMM60 range\n",			mod->name, (long) val);		return 0;	}
val + ((uint64_t) 1 << 59) >= (1UL << 60)
val + ((uint64_t) 1 << 59)
val
val
((uint64_t) 1 << 59)
(uint64_t) 1 << 59
(uint64_t) 1
uint64_t
uint64_t
uint64_t

1
59
(1UL << 60)
1UL << 60
1UL
60
{		printk(KERN_ERR "%s: value %ld out of IMM60 range\n",			mod->name, (long) val);		return 0;	}
printk(KERN_ERR "%s: value %ld out of IMM60 range\n",			mod->name, (long) val);
return 0;
0
ia64_patch_imm60((u64) insn, val);
ia64_patch_imm60((u64) insn, val)
ia64_patch_imm60
ia64_patch_imm60
(u64) insn
u64
u64
u64

insn
insn
val
val
return 1;
1
-----joern-----
(15,21,0)
(11,34,0)
(23,26,0)
(32,30,0)
(33,21,0)
(13,2,0)
(20,28,0)
(17,30,0)
(3,35,0)
(28,7,0)
(27,5,0)
(19,15,0)
(1,21,0)
(21,1,0)
(26,32,0)
(38,30,0)
(10,18,0)
(34,0,0)
(3,8,0)
(6,18,0)
(30,32,0)
(26,14,0)
(16,5,0)
(34,11,0)
(24,11,0)
(25,8,0)
(21,15,0)
(37,19,0)
(18,9,0)
(35,3,0)
(29,1,0)
(10,2,0)
(28,19,0)
(15,19,0)
(3,7,0)
(26,11,0)
(1,7,0)
(11,26,0)
(4,5,0)
(8,3,0)
(8,5,0)
(10,4,0)
(8,14,0)
(0,34,0)
(19,28,0)
(22,4,0)
(32,26,0)
(2,12,0)
(36,3,0)
(31,34,0)
(11,34,1)
(8,14,1)
(25,3,1)
(28,20,1)
(13,32,1)
(8,25,1)
(6,15,1)
(26,14,1)
(21,1,1)
(11,24,1)
(15,21,1)
(36,32,1)
(19,37,1)
(19,28,1)
(30,38,1)
(10,2,1)
(23,15,1)
(4,22,1)
(34,0,1)
(15,19,1)
(3,36,1)
(18,6,1)
(1,7,1)
(3,7,1)
(24,34,1)
(33,1,1)
(34,31,1)
(29,19,1)
(22,8,1)
(17,26,1)
(21,33,1)
(38,17,1)
(3,35,1)
(10,18,1)
(10,4,1)
(32,30,1)
(28,7,1)
(2,13,1)
(26,11,1)
(37,28,1)
(8,3,1)
(1,29,1)
(31,23,1)
(32,26,1)
(8,32,2)
(15,21,2)
(31,15,2)
(1,19,2)
(26,11,2)
(30,15,2)
(38,15,2)
(10,4,2)
(10,2,2)
(21,1,2)
(1,7,2)
(2,32,2)
(11,15,2)
(33,19,2)
(34,15,2)
(8,14,2)
(10,18,2)
(6,15,2)
(25,32,2)
(22,32,2)
(11,34,2)
(8,3,2)
(29,19,2)
(3,32,2)
(21,19,2)
(34,0,2)
(32,26,2)
(32,30,2)
(15,19,2)
(18,15,2)
(26,15,2)
(32,15,2)
(13,32,2)
(36,32,2)
(3,35,2)
(4,32,2)
(3,7,2)
(24,15,2)
(17,15,2)
(26,14,2)
(23,15,2)
(19,28,2)
(28,7,2)
-----------------------------------
(0,uint64_t)
(1,slot(insn)
(2,return 0;)
(3,(u64)
(4,return 1;)
(5,)
(6,0)
(7,struct insn *insn)
(8,ia64_patch_imm60((u64)
(9,)
(10,RET)
(11,(uint64_t)
(12,)
(13,0)
(14,uint64_t val)
(15,slot(insn)
(16,if (slot(insn)
(17,1UL)
(18,return 0;)
(19,slot(insn)
(20,insn)
(21,slot(insn)
(22,1)
(23,val)
(24,59)
(25,val)
(26,val + ((uint64_t)
(27,if (val + ((uint64_t)
(28,slot(insn)
(29,insn)
(30,1UL << 60)
(31,1)
(32,val + ((uint64_t)
(33,2)
(34,(uint64_t)
(35,u64)
(36,insn)
(37,1)
(38,60)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^