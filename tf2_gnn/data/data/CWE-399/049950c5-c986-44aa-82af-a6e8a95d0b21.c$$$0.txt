-----label-----
1
-----code-----
static int alb_set_slave_mac_addr(struct slave *slave, u8 addr[], int hw)
{
	struct net_device *dev = slave->dev;
	struct sockaddr s_addr;

	if (!hw) {
		memcpy(dev->dev_addr, addr, dev->addr_len);
		return 0;
	}

	/* for rlb each slave must have a unique hw mac addresses so that */
	/* each slave will receive packets destined to a different mac */
	memcpy(s_addr.sa_data, addr, dev->addr_len);
	s_addr.sa_family = dev->type;
	if (dev_set_mac_address(dev, &s_addr)) {
		pr_err("%s: Error: dev_set_mac_address of dev %s failed!\n"
		       "ALB mode requires that the base driver support setting the hw address also when the network device's interface is open\n",
		       dev->master->name, dev->name);
		return -EOPNOTSUPP;
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
22,23
23,24
23,25
24,25
26,27
26,28
26,29
29,30
30,31
30,32
31,32
34,35
35,36
35,37
36,37
38,39
40,41
40,42
41,42
42,43
44,45
44,46
45,46
46,47
46,48
46,49
46,50
47,48
49,50
49,51
50,51
53,54
55,56
55,57
56,57
59,60
61,62
62,63
62,64
62,65
62,66
63,64
65,66
65,67
66,67
69,70
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
81,82
81,83
82,83
85,86
85,87
86,87
86,88
86,89
87,88
89,90
91,92
92,93
94,95
94,96
95,96
96,97
96,98
96,99
96,100
97,98
100,101
100,102
101,102
101,103
102,103
106,107
106,108
107,108
110,111
111,112
112,113
114,115
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,25,27,28,32,33,37,39,43,48,51,52,54,57,58,60,64,67,68,70,73,74,79,80,83,84,88,90,93,98,99,103,104,105,108,109,113,115
-----computeFrom-----
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int alb_set_slave_mac_addr(struct slave *slave, u8 addr[], int hw){	struct net_device *dev = slave->dev;	struct sockaddr s_addr;	if (!hw) {		memcpy(dev->dev_addr, addr, dev->addr_len);		return 0;	}	/* for rlb each slave must have a unique hw mac addresses so that */	/* each slave will receive packets destined to a different mac */	memcpy(s_addr.sa_data, addr, dev->addr_len);	s_addr.sa_family = dev->type;	if (dev_set_mac_address(dev, &s_addr)) {		pr_err("%s: Error: dev_set_mac_address of dev %s failed!\n"		       "ALB mode requires that the base driver support setting the hw address also when the network device's interface is open\n",		       dev->master->name, dev->name);		return -EOPNOTSUPP;	}	return 0;}
static int
alb_set_slave_mac_addr(struct slave *slave, u8 addr[], int hw)
alb_set_slave_mac_addr
struct slave *slave
struct slave
slave
*slave
*
slave
u8 addr[]
u8
u8
addr[]
addr
[]
int hw
int
hw
hw
{	struct net_device *dev = slave->dev;	struct sockaddr s_addr;	if (!hw) {		memcpy(dev->dev_addr, addr, dev->addr_len);		return 0;	}	/* for rlb each slave must have a unique hw mac addresses so that */	/* each slave will receive packets destined to a different mac */	memcpy(s_addr.sa_data, addr, dev->addr_len);	s_addr.sa_family = dev->type;	if (dev_set_mac_address(dev, &s_addr)) {		pr_err("%s: Error: dev_set_mac_address of dev %s failed!\n"		       "ALB mode requires that the base driver support setting the hw address also when the network device's interface is open\n",		       dev->master->name, dev->name);		return -EOPNOTSUPP;	}	return 0;}
struct net_device *dev = slave->dev;
struct net_device *dev = slave->dev;
struct net_device
net_device
*dev = slave->dev
*
dev
= slave->dev
slave->dev
slave
slave
dev
struct sockaddr s_addr;
struct sockaddr s_addr;
struct sockaddr
sockaddr
s_addr
s_addr
if (!hw) {		memcpy(dev->dev_addr, addr, dev->addr_len);		return 0;	}
!hw
hw
hw
{		memcpy(dev->dev_addr, addr, dev->addr_len);		return 0;	}
memcpy(dev->dev_addr, addr, dev->addr_len);
memcpy(dev->dev_addr, addr, dev->addr_len)
memcpy
memcpy
dev->dev_addr
dev
dev
dev_addr
addr
addr
dev->addr_len
dev
dev
addr_len
return 0;
0
memcpy(s_addr.sa_data, addr, dev->addr_len);
memcpy(s_addr.sa_data, addr, dev->addr_len)
memcpy
memcpy
s_addr.sa_data
s_addr
s_addr
sa_data
addr
addr
dev->addr_len
dev
dev
addr_len
s_addr.sa_family = dev->type;
s_addr.sa_family = dev->type
s_addr.sa_family
s_addr
s_addr
sa_family
dev->type
dev
dev
type
if (dev_set_mac_address(dev, &s_addr)) {		pr_err("%s: Error: dev_set_mac_address of dev %s failed!\n"		       "ALB mode requires that the base driver support setting the hw address also when the network device's interface is open\n",		       dev->master->name, dev->name);		return -EOPNOTSUPP;	}
dev_set_mac_address(dev, &s_addr)
dev_set_mac_address
dev_set_mac_address
dev
dev
&s_addr
s_addr
s_addr
{		pr_err("%s: Error: dev_set_mac_address of dev %s failed!\n"		       "ALB mode requires that the base driver support setting the hw address also when the network device's interface is open\n",		       dev->master->name, dev->name);		return -EOPNOTSUPP;	}
pr_err("%s: Error: dev_set_mac_address of dev %s failed!\n"		       "ALB mode requires that the base driver support setting the hw address also when the network device's interface is open\n",		       dev->master->name, dev->name);
pr_err("%s: Error: dev_set_mac_address of dev %s failed!\n"		       "ALB mode requires that the base driver support setting the hw address also when the network device's interface is open\n",		       dev->master->name, dev->name)
pr_err
pr_err
"%s: Error: dev_set_mac_address of dev %s failed!\n"		       "ALB mode requires that the base driver support setting the hw address also when the network device's interface is open\n"
dev->master->name
dev->master
dev
dev
master
name
dev->name
dev
dev
name
return -EOPNOTSUPP;
-EOPNOTSUPP
EOPNOTSUPP
EOPNOTSUPP
return 0;
0
-----joern-----
(40,51,0)
(41,51,0)
(54,9,0)
(60,10,0)
(46,24,0)
(50,41,0)
(29,61,0)
(11,55,0)
(52,0,0)
(42,14,0)
(12,0,0)
(31,13,0)
(35,29,0)
(46,1,0)
(22,5,0)
(55,0,0)
(23,44,0)
(37,55,0)
(26,42,0)
(5,9,0)
(58,21,0)
(15,21,0)
(12,51,0)
(18,38,0)
(38,51,0)
(34,51,0)
(51,61,0)
(56,12,0)
(36,9,0)
(28,23,0)
(33,12,0)
(3,61,0)
(29,10,0)
(35,27,0)
(18,61,0)
(9,5,0)
(5,41,0)
(19,10,0)
(30,29,0)
(48,61,0)
(59,38,0)
(45,61,0)
(7,23,0)
(38,18,0)
(43,41,0)
(5,61,0)
(17,51,0)
(51,23,0)
(20,24,0)
(14,10,0)
(14,1,0)
(0,55,0)
(41,5,0)
(47,8,0)
(10,18,0)
(46,21,0)
(16,61,0)
(49,40,0)
(27,39,0)
(21,51,0)
(53,46,0)
(23,51,0)
(5,4,0)
(34,24,0)
(24,46,0)
(0,4,0)
(57,38,0)
(13,2,0)
(21,46,0)
(55,51,0)
(6,34,0)
(8,40,0)
(40,8,0)
(32,34,0)
(35,14,0)
(25,27,0)
(24,34,0)
(0,39,0)
(0,12,0)
(42,26,1)
(35,29,1)
(19,60,1)
(34,51,1)
(38,51,1)
(0,12,1)
(51,23,1)
(24,20,1)
(0,4,1)
(38,59,1)
(23,7,1)
(14,10,1)
(35,27,1)
(57,10,1)
(24,34,1)
(22,9,1)
(0,55,1)
(59,57,1)
(14,42,1)
(46,21,1)
(52,12,1)
(34,6,1)
(7,28,1)
(9,54,1)
(50,22,1)
(28,17,1)
(41,43,1)
(10,19,1)
(35,14,1)
(40,8,1)
(49,18,1)
(29,10,1)
(5,41,1)
(5,4,1)
(33,13,1)
(12,51,1)
(47,49,1)
(32,53,1)
(21,51,1)
(31,51,1)
(18,38,1)
(25,0,1)
(30,40,1)
(6,32,1)
(40,51,1)
(21,58,1)
(36,13,1)
(29,30,1)
(12,56,1)
(41,51,1)
(55,11,1)
(27,25,1)
(43,50,1)
(11,37,1)
(23,44,1)
(37,52,1)
(54,36,1)
(13,31,1)
(20,34,1)
(53,40,1)
(60,5,1)
(58,15,1)
(26,46,1)
(55,51,1)
(5,9,1)
(15,24,1)
(46,24,1)
(8,47,1)
(56,33,1)
(13,2,1)
(24,34,2)
(41,13,2)
(46,24,2)
(24,40,2)
(49,13,2)
(54,13,2)
(18,38,2)
(46,21,2)
(20,40,2)
(26,40,2)
(12,13,2)
(27,13,2)
(29,40,2)
(32,40,2)
(43,13,2)
(37,13,2)
(0,12,2)
(22,13,2)
(57,13,2)
(40,8,2)
(38,51,2)
(21,51,2)
(12,51,2)
(56,13,2)
(34,40,2)
(51,23,2)
(21,40,2)
(8,13,2)
(0,55,2)
(52,13,2)
(5,13,2)
(0,13,2)
(34,51,2)
(55,13,2)
(6,40,2)
(29,10,2)
(35,14,2)
(5,4,2)
(40,51,2)
(36,13,2)
(46,40,2)
(50,13,2)
(13,2,2)
(41,51,2)
(59,13,2)
(11,13,2)
(19,13,2)
(60,13,2)
(9,13,2)
(35,29,2)
(35,27,2)
(38,13,2)
(18,13,2)
(42,40,2)
(25,13,2)
(58,40,2)
(14,10,2)
(30,40,2)
(40,13,2)
(14,40,2)
(5,41,2)
(33,13,2)
(47,13,2)
(0,4,2)
(23,44,2)
(53,40,2)
(15,40,2)
(55,51,2)
(5,9,2)
(10,13,2)
-----------------------------------
(0,memcpy(dev->dev_addr, addr, dev->addr_len)
(1,)
(2,int hw)
(3,dev)
(4,u8 addr[])
(5,memcpy(s_addr.sa_data, addr, dev->addr_len)
(6,master)
(7,dev)
(8,&s_addr)
(9,s_addr.sa_data)
(10,s_addr.sa_family)
(11,addr_len)
(12,dev->dev_addr)
(13,!hw)
(14,return -EOPNOTSUPP;)
(15,dev)
(16,s_addr)
(17,dev)
(18,s_addr.sa_family = dev->type)
(19,sa_family)
(20,name)
(21,dev->name)
(22,addr)
(23,slave->dev)
(24,dev->master->name)
(25,0)
(26,EOPNOTSUPP)
(27,return 0;)
(28,slave)
(29,return 0;)
(30,0)
(31,hw)
(32,dev)
(33,dev)
(34,dev->master)
(35,RET)
(36,s_addr)
(37,dev)
(38,dev->type)
(39,)
(40,dev_set_mac_address(dev, &s_addr)
(41,dev->addr_len)
(42,-EOPNOTSUPP)
(43,addr_len)
(44,struct slave *slave)
(45,if (!hw)
(46,pr_err("%s: Error: dev_set_mac_address of dev %s failed!\\n"\n\\n\\t\\t       "ALB mode requires that the base driver support setting the hw address also when the network device\'s interface is open\\n",\n\\n\\t\\t       dev->master->name, dev->name)
(47,s_addr)
(48,if (dev_set_mac_address(dev, &s_addr)
(49,dev)
(50,dev)
(51,*dev = slave->dev)
(52,addr)
(53,"%s: Error: dev_set_mac_address of dev %s failed!\\n"\n\\n\\t\\t       "ALB mode requires that the base driver support setting the hw address also when the network device\'s interface is open\\n")
(54,sa_data)
(55,dev->addr_len)
(56,dev_addr)
(57,dev)
(58,name)
(59,type)
(60,s_addr)
(61,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^