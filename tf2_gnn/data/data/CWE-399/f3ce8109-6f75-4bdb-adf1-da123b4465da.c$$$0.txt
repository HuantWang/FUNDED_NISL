-----label-----
0
-----code-----
void suspend_nvs_free(void)
{
	struct nvs_page *entry;

	list_for_each_entry(entry, &nvs_list, node)
		if (entry->data) {
			free_page((unsigned long)entry->data);
			entry->data = NULL;
			if (entry->kaddr) {
				if (entry->unmap) {
					iounmap(entry->kaddr);
					entry->unmap = false;
				} else {
					acpi_os_unmap_memory(entry->kaddr,
							     entry->size);
				}
				entry->kaddr = NULL;
			}
		}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
10,11
11,12
11,13
12,13
14,15
14,16
17,18
18,19
18,20
18,21
18,22
19,20
21,22
23,24
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
34,36
34,37
35,36
36,37
36,38
37,38
39,40
39,41
40,41
40,42
43,44
43,45
44,45
47,48
48,49
48,50
49,50
49,51
50,51
53,54
55,56
55,57
56,57
56,58
57,58
60,61
60,62
61,62
61,63
61,64
62,63
62,64
63,64
66,67
66,68
67,68
68,69
68,70
69,70
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
82,83
83,84
84,85
84,86
84,87
85,86
87,88
87,89
88,89
91,92
91,93
92,93
95,96
96,97
96,98
97,98
97,99
98,99
101,102
-----nextToken-----
2,4,6,8,13,15,16,20,22,25,27,32,33,38,41,42,45,46,51,52,54,58,59,64,65,70,73,74,79,80,81,86,89,90,93,94,99,100,102
-----computeFrom-----
48,49
48,50
76,77
76,78
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
void suspend_nvs_free(void){	struct nvs_page *entry;	list_for_each_entry(entry, &nvs_list, node)		if (entry->data) {			free_page((unsigned long)entry->data);			entry->data = NULL;			if (entry->kaddr) {				if (entry->unmap) {					iounmap(entry->kaddr);					entry->unmap = false;				} else {					acpi_os_unmap_memory(entry->kaddr,							     entry->size);				}				entry->kaddr = NULL;			}		}}
void
suspend_nvs_free(void)
suspend_nvs_free
void
void


{	struct nvs_page *entry;	list_for_each_entry(entry, &nvs_list, node)		if (entry->data) {			free_page((unsigned long)entry->data);			entry->data = NULL;			if (entry->kaddr) {				if (entry->unmap) {					iounmap(entry->kaddr);					entry->unmap = false;				} else {					acpi_os_unmap_memory(entry->kaddr,							     entry->size);				}				entry->kaddr = NULL;			}		}}
struct nvs_page *entry;
struct nvs_page *entry;
struct nvs_page
nvs_page
*entry
*
entry
list_for_each_entry(entry, &nvs_list, node)
list_for_each_entry(entry, &nvs_list, node)
list_for_each_entry
list_for_each_entry
entry
entry
&nvs_list
nvs_list
nvs_list
node
node
)
if (entry->data) {			free_page((unsigned long)entry->data);			entry->data = NULL;			if (entry->kaddr) {				if (entry->unmap) {					iounmap(entry->kaddr);					entry->unmap = false;				} else {					acpi_os_unmap_memory(entry->kaddr,							     entry->size);				}				entry->kaddr = NULL;			}		}
entry->data
entry
entry
data
{			free_page((unsigned long)entry->data);			entry->data = NULL;			if (entry->kaddr) {				if (entry->unmap) {					iounmap(entry->kaddr);					entry->unmap = false;				} else {					acpi_os_unmap_memory(entry->kaddr,							     entry->size);				}				entry->kaddr = NULL;			}		}
free_page((unsigned long)entry->data);
free_page((unsigned long)entry->data)
free_page
free_page
(unsigned long)entry->data
unsigned long
unsigned long

entry->data
entry
entry
data
entry->data = NULL;
entry->data = NULL
entry->data
entry
entry
data
NULL
NULL
if (entry->kaddr) {				if (entry->unmap) {					iounmap(entry->kaddr);					entry->unmap = false;				} else {					acpi_os_unmap_memory(entry->kaddr,							     entry->size);				}				entry->kaddr = NULL;			}
entry->kaddr
entry
entry
kaddr
{				if (entry->unmap) {					iounmap(entry->kaddr);					entry->unmap = false;				} else {					acpi_os_unmap_memory(entry->kaddr,							     entry->size);				}				entry->kaddr = NULL;			}
if (entry->unmap) {					iounmap(entry->kaddr);					entry->unmap = false;				} else {					acpi_os_unmap_memory(entry->kaddr,							     entry->size);				}
entry->unmap
entry
entry
unmap
{					iounmap(entry->kaddr);					entry->unmap = false;				}
iounmap(entry->kaddr);
iounmap(entry->kaddr)
iounmap
iounmap
entry->kaddr
entry
entry
kaddr
entry->unmap = false;
entry->unmap = false
entry->unmap
entry
entry
unmap
false
{					acpi_os_unmap_memory(entry->kaddr,							     entry->size);				}
acpi_os_unmap_memory(entry->kaddr,							     entry->size);
acpi_os_unmap_memory(entry->kaddr,							     entry->size)
acpi_os_unmap_memory
acpi_os_unmap_memory
entry->kaddr
entry
entry
kaddr
entry->size
entry
entry
size
entry->kaddr = NULL;
entry->kaddr = NULL
entry->kaddr
entry
entry
kaddr
NULL
NULL
-----joern-----
(15,42,0)
(19,44,0)
(15,25,0)
(43,39,0)
(42,15,0)
(49,50,0)
(6,3,0)
(0,41,0)
(24,36,0)
(35,3,0)
(47,42,0)
(13,45,0)
(4,14,0)
(27,43,0)
(28,34,0)
(46,39,0)
(39,34,0)
(31,47,0)
(22,25,0)
(18,36,0)
(11,41,0)
(17,4,0)
(14,23,0)
(11,50,0)
(8,4,0)
(21,26,0)
(42,40,0)
(3,32,0)
(9,26,0)
(16,44,0)
(50,11,0)
(2,10,0)
(7,32,0)
(30,10,0)
(44,45,0)
(32,23,0)
(5,41,0)
(42,47,0)
(40,42,0)
(33,20,0)
(14,4,0)
(38,20,0)
(29,50,0)
(1,47,0)
(12,43,0)
(41,11,0)
(45,25,0)
(11,37,0)
(47,31,1)
(39,46,1)
(2,30,1)
(33,38,1)
(48,26,1)
(5,50,1)
(35,14,1)
(45,13,1)
(27,11,1)
(19,16,1)
(48,10,1)
(7,3,1)
(50,49,1)
(9,21,1)
(42,40,1)
(12,27,1)
(31,1,1)
(0,5,1)
(15,42,1)
(1,10,1)
(3,6,1)
(8,17,1)
(13,44,1)
(11,50,1)
(26,9,1)
(43,12,1)
(38,26,1)
(10,2,1)
(44,19,1)
(6,35,1)
(4,8,1)
(48,39,1)
(21,45,1)
(14,4,1)
(49,29,1)
(46,43,1)
(42,47,1)
(41,0,1)
(16,15,1)
(29,20,1)
(32,7,1)
(27,32,1)
(20,33,1)
(11,41,1)
(17,20,1)
(46,26,2)
(12,26,2)
(14,20,2)
(26,10,2)
(1,10,2)
(16,10,2)
(38,26,2)
(27,26,2)
(50,20,2)
(15,42,2)
(17,20,2)
(8,20,2)
(14,4,2)
(3,20,2)
(11,20,2)
(15,10,2)
(47,10,2)
(42,10,2)
(4,20,2)
(11,50,2)
(7,20,2)
(31,10,2)
(35,20,2)
(49,20,2)
(39,26,2)
(21,10,2)
(11,41,2)
(45,10,2)
(6,20,2)
(42,40,2)
(9,10,2)
(42,47,2)
(32,20,2)
(29,20,2)
(33,26,2)
(0,20,2)
(41,20,2)
(13,10,2)
(44,10,2)
(19,10,2)
(5,20,2)
(20,26,2)
(43,26,2)
-----------------------------------
(0,size)
(1,entry)
(2,data)
(3,entry->unmap)
(4,entry->kaddr)
(5,entry)
(6,unmap)
(7,false)
(8,kaddr)
(9,kaddr)
(10,entry->data)
(11,acpi_os_unmap_memory(entry->kaddr,\n\\n\\t\\t\\t\\t\\t\\t\\t     entry->size)
(12,kaddr)
(13,NULL)
(14,iounmap(entry->kaddr)
(15,free_page((unsigned long)
(16,entry)
(17,entry)
(18,entry)
(19,data)
(20,entry->unmap)
(21,entry)
(22,if (entry->kaddr)
(23,)
(24,if (entry->data)
(25,)
(26,entry->kaddr)
(27,entry)
(28,if (entry->unmap)
(29,entry)
(30,entry)
(31,data)
(32,entry->unmap = false)
(33,unmap)
(34,)
(35,entry)
(36,)
(37,)
(38,entry)
(39,entry->kaddr = NULL)
(40,unsigned long)
(41,entry->size)
(42,(unsigned long)
(43,entry->kaddr)
(44,entry->data)
(45,entry->data = NULL)
(46,NULL)
(47,entry->data)
(48,RET)
(49,kaddr)
(50,entry->kaddr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^