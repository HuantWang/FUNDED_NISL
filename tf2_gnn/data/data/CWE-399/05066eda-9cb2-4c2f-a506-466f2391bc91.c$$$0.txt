-----label-----
1
-----code-----
static Node *
lval(Flattenctx *s, Node *n)
{
	Node *r;

	switch (exprop(n)) {
	case Ovar:	r = n;	break;
	case Oidx:	r = rval(s, n);	break;
	case Oderef:	r = rval(s, n);	break;
	case Omemb:	r = rval(s, n);	break;
	case Ostruct:	r = rval(s, n);	break;

	/* for chaining */
	case Oucon:	r = rval(s, n);	break;
	case Oarr:	r = rval(s, n);	break;
	case Ogap:	r = temp(s, n);	break;

	/* not actually expressible as lvalues in syntax, but we generate them */
	case Oudata:	r = rval(s, n);	break;
	case Outag:	r = rval(s, n);	break;
	case Otupget:	r = rval(s, n);	break;
	default:
			fatal(n, "%s cannot be an lvalue", opstr[exprop(n)]);
			break;
	}
	return r;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
16,18
19,20
19,21
19,22
20,21
21,22
21,23
22,23
24,25
24,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
33,38
33,39
33,40
33,41
33,42
33,43
33,44
33,45
33,46
33,47
33,48
33,49
33,50
33,51
33,52
33,53
33,54
33,55
33,56
33,57
33,58
33,59
33,60
33,61
33,62
33,63
33,64
33,65
33,66
33,67
33,68
33,69
34,35
35,36
37,38
38,39
38,40
39,40
41,42
44,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
51,54
52,53
54,55
56,57
59,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
71,72
74,75
75,76
77,78
78,79
78,80
79,80
81,82
81,83
81,84
82,83
84,85
86,87
89,90
90,91
92,93
93,94
93,95
94,95
96,97
96,98
96,99
97,98
99,100
101,102
104,105
105,106
107,108
108,109
108,110
109,110
111,112
111,113
111,114
112,113
114,115
116,117
119,120
120,121
122,123
123,124
123,125
124,125
126,127
126,128
126,129
127,128
129,130
131,132
134,135
135,136
137,138
138,139
138,140
139,140
141,142
141,143
141,144
142,143
144,145
146,147
149,150
150,151
152,153
153,154
153,155
154,155
156,157
156,158
156,159
157,158
159,160
161,162
164,165
165,166
167,168
168,169
168,170
169,170
171,172
171,173
171,174
172,173
174,175
176,177
179,180
180,181
182,183
183,184
183,185
184,185
186,187
186,188
186,189
187,188
189,190
191,192
195,196
196,197
196,198
196,199
196,200
197,198
199,200
202,203
202,204
203,204
205,206
205,207
206,207
208,209
211,212
212,213
-----nextToken-----
3,5,6,9,11,12,15,17,18,23,25,26,30,32,36,40,42,43,46,50,53,55,57,58,61,65,68,70,72,73,76,80,83,85,87,88,91,95,98,100,102,103,106,110,113,115,117,118,121,125,128,130,132,133,136,140,143,145,147,148,151,155,158,160,162,163,166,170,173,175,177,178,181,185,188,190,192,193,194,198,200,201,204,207,209,210,213
-----computeFrom-----
38,39
38,40
48,49
48,50
63,64
63,65
78,79
78,80
93,94
93,95
108,109
108,110
123,124
123,125
138,139
138,140
153,154
153,155
168,169
168,170
183,184
183,185
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;SwitchStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
static Node *lval(Flattenctx *s, Node *n){	Node *r;	switch (exprop(n)) {	case Ovar:	r = n;	break;	case Oidx:	r = rval(s, n);	break;	case Oderef:	r = rval(s, n);	break;	case Omemb:	r = rval(s, n);	break;	case Ostruct:	r = rval(s, n);	break;	/* for chaining */	case Oucon:	r = rval(s, n);	break;	case Oarr:	r = rval(s, n);	break;	case Ogap:	r = temp(s, n);	break;	/* not actually expressible as lvalues in syntax, but we generate them */	case Oudata:	r = rval(s, n);	break;	case Outag:	r = rval(s, n);	break;	case Otupget:	r = rval(s, n);	break;	default:			fatal(n, "%s cannot be an lvalue", opstr[exprop(n)]);			break;	}	return r;}
static Node
Node
*lval(Flattenctx *s, Node *n)
*
lval
Flattenctx *s
Flattenctx
Flattenctx
*s
*
s
Node *n
Node
Node
*n
*
n
{	Node *r;	switch (exprop(n)) {	case Ovar:	r = n;	break;	case Oidx:	r = rval(s, n);	break;	case Oderef:	r = rval(s, n);	break;	case Omemb:	r = rval(s, n);	break;	case Ostruct:	r = rval(s, n);	break;	/* for chaining */	case Oucon:	r = rval(s, n);	break;	case Oarr:	r = rval(s, n);	break;	case Ogap:	r = temp(s, n);	break;	/* not actually expressible as lvalues in syntax, but we generate them */	case Oudata:	r = rval(s, n);	break;	case Outag:	r = rval(s, n);	break;	case Otupget:	r = rval(s, n);	break;	default:			fatal(n, "%s cannot be an lvalue", opstr[exprop(n)]);			break;	}	return r;}
Node *r;
Node *r;
Node
Node
*r
*
r
switch (exprop(n)) {	case Ovar:	r = n;	break;	case Oidx:	r = rval(s, n);	break;	case Oderef:	r = rval(s, n);	break;	case Omemb:	r = rval(s, n);	break;	case Ostruct:	r = rval(s, n);	break;	/* for chaining */	case Oucon:	r = rval(s, n);	break;	case Oarr:	r = rval(s, n);	break;	case Ogap:	r = temp(s, n);	break;	/* not actually expressible as lvalues in syntax, but we generate them */	case Oudata:	r = rval(s, n);	break;	case Outag:	r = rval(s, n);	break;	case Otupget:	r = rval(s, n);	break;	default:			fatal(n, "%s cannot be an lvalue", opstr[exprop(n)]);			break;	}
exprop(n)
exprop
exprop
n
n
{	case Ovar:	r = n;	break;	case Oidx:	r = rval(s, n);	break;	case Oderef:	r = rval(s, n);	break;	case Omemb:	r = rval(s, n);	break;	case Ostruct:	r = rval(s, n);	break;	/* for chaining */	case Oucon:	r = rval(s, n);	break;	case Oarr:	r = rval(s, n);	break;	case Ogap:	r = temp(s, n);	break;	/* not actually expressible as lvalues in syntax, but we generate them */	case Oudata:	r = rval(s, n);	break;	case Outag:	r = rval(s, n);	break;	case Otupget:	r = rval(s, n);	break;	default:			fatal(n, "%s cannot be an lvalue", opstr[exprop(n)]);			break;	}
case Ovar:
Ovar
Ovar
r = n;
r = n
r
r
n
n
break;
case Oidx:
Oidx
Oidx
r = rval(s, n);
r = rval(s, n)
r
r
rval(s, n)
rval
rval
s
s
n
n
break;
case Oderef:
Oderef
Oderef
r = rval(s, n);
r = rval(s, n)
r
r
rval(s, n)
rval
rval
s
s
n
n
break;
case Omemb:
Omemb
Omemb
r = rval(s, n);
r = rval(s, n)
r
r
rval(s, n)
rval
rval
s
s
n
n
break;
case Ostruct:
Ostruct
Ostruct
r = rval(s, n);
r = rval(s, n)
r
r
rval(s, n)
rval
rval
s
s
n
n
break;
case Oucon:
Oucon
Oucon
r = rval(s, n);
r = rval(s, n)
r
r
rval(s, n)
rval
rval
s
s
n
n
break;
case Oarr:
Oarr
Oarr
r = rval(s, n);
r = rval(s, n)
r
r
rval(s, n)
rval
rval
s
s
n
n
break;
case Ogap:
Ogap
Ogap
r = temp(s, n);
r = temp(s, n)
r
r
temp(s, n)
temp
temp
s
s
n
n
break;
case Oudata:
Oudata
Oudata
r = rval(s, n);
r = rval(s, n)
r
r
rval(s, n)
rval
rval
s
s
n
n
break;
case Outag:
Outag
Outag
r = rval(s, n);
r = rval(s, n)
r
r
rval(s, n)
rval
rval
s
s
n
n
break;
case Otupget:
Otupget
Otupget
r = rval(s, n);
r = rval(s, n)
r
r
rval(s, n)
rval
rval
s
s
n
n
break;
default:
fatal(n, "%s cannot be an lvalue", opstr[exprop(n)]);
fatal(n, "%s cannot be an lvalue", opstr[exprop(n)])
fatal
fatal
n
n
"%s cannot be an lvalue"
opstr[exprop(n)]
opstr
opstr
exprop(n)
exprop
exprop
n
n
break;
return r;
r
r
-----joern-----
(3,14,0)
(38,73,0)
(79,61,0)
(20,60,0)
(69,61,0)
(32,67,0)
(45,86,0)
(21,86,0)
(0,68,0)
(14,34,0)
(52,86,0)
(82,61,0)
(14,67,0)
(74,77,0)
(42,61,0)
(32,11,0)
(51,61,0)
(88,86,0)
(24,37,0)
(78,12,0)
(37,61,0)
(13,61,0)
(34,68,0)
(35,76,0)
(77,29,0)
(60,84,0)
(26,5,0)
(59,11,0)
(57,56,0)
(19,45,0)
(88,61,0)
(43,76,0)
(57,61,0)
(40,86,0)
(56,11,0)
(47,61,0)
(40,73,0)
(12,86,0)
(2,29,0)
(14,60,0)
(76,86,0)
(82,59,0)
(73,61,0)
(56,57,0)
(37,52,0)
(93,61,0)
(17,56,0)
(14,78,0)
(63,84,0)
(10,57,0)
(7,61,0)
(60,61,0)
(71,67,0)
(68,34,0)
(67,61,0)
(29,77,0)
(39,61,0)
(80,61,0)
(89,61,0)
(34,61,0)
(77,21,0)
(50,61,0)
(44,61,0)
(48,14,0)
(40,11,0)
(14,47,0)
(28,43,0)
(5,47,0)
(29,61,0)
(59,82,0)
(56,86,0)
(78,61,0)
(68,11,0)
(8,61,0)
(1,12,0)
(9,84,0)
(49,78,0)
(5,11,0)
(12,78,0)
(52,11,0)
(84,11,0)
(14,55,0)
(67,32,0)
(65,88,0)
(85,5,0)
(76,43,0)
(47,5,0)
(90,29,0)
(23,61,0)
(41,61,0)
(52,37,0)
(30,61,0)
(59,86,0)
(16,12,0)
(94,61,0)
(70,21,0)
(53,32,0)
(83,61,0)
(43,61,0)
(12,11,0)
(66,59,0)
(33,56,0)
(91,61,0)
(87,52,0)
(29,86,0)
(25,61,0)
(15,59,0)
(14,43,0)
(46,55,0)
(36,34,0)
(14,82,0)
(92,47,0)
(5,86,0)
(73,40,0)
(14,37,0)
(54,55,0)
(14,88,0)
(64,32,0)
(14,73,0)
(18,61,0)
(72,68,0)
(84,60,0)
(14,57,0)
(27,52,0)
(31,61,0)
(75,82,0)
(62,40,0)
(22,61,0)
(76,11,0)
(68,86,0)
(32,86,0)
(21,77,0)
(4,40,0)
(6,88,0)
(84,86,0)
(81,61,0)
(58,76,0)
(71,45,1)
(70,74,1)
(16,1,1)
(73,40,1)
(3,14,1)
(56,86,1)
(38,45,1)
(12,11,1)
(87,27,1)
(32,11,1)
(62,4,1)
(48,23,1)
(45,86,1)
(66,75,1)
(23,47,1)
(48,41,1)
(52,86,1)
(4,38,1)
(29,86,1)
(40,11,1)
(29,77,1)
(59,86,1)
(57,56,1)
(72,0,1)
(78,12,1)
(76,86,1)
(32,64,1)
(48,8,1)
(48,91,1)
(36,45,1)
(75,45,1)
(14,57,1)
(84,86,1)
(85,92,1)
(5,86,1)
(21,86,1)
(22,60,1)
(12,16,1)
(83,37,1)
(90,45,1)
(37,52,1)
(59,11,1)
(88,65,1)
(12,86,1)
(14,48,1)
(45,19,1)
(24,45,1)
(15,66,1)
(20,45,1)
(48,50,1)
(84,9,1)
(14,82,1)
(56,17,1)
(35,58,1)
(14,37,1)
(5,26,1)
(51,67,1)
(27,24,1)
(89,34,1)
(34,68,1)
(17,33,1)
(68,72,1)
(59,15,1)
(53,71,1)
(50,29,1)
(48,94,1)
(21,70,1)
(28,45,1)
(0,36,1)
(76,35,1)
(63,20,1)
(5,11,1)
(76,11,1)
(14,67,1)
(52,87,1)
(14,78,1)
(74,2,1)
(79,78,1)
(26,85,1)
(94,88,1)
(43,76,1)
(65,6,1)
(14,34,1)
(14,88,1)
(48,79,1)
(1,49,1)
(14,43,1)
(40,62,1)
(32,86,1)
(68,86,1)
(10,45,1)
(47,5,1)
(67,32,1)
(84,11,1)
(48,22,1)
(33,10,1)
(64,53,1)
(92,45,1)
(56,11,1)
(41,73,1)
(91,82,1)
(68,11,1)
(52,11,1)
(48,83,1)
(49,45,1)
(60,84,1)
(88,86,1)
(14,73,1)
(58,28,1)
(6,45,1)
(48,51,1)
(42,43,1)
(48,42,1)
(14,47,1)
(9,63,1)
(14,60,1)
(77,21,1)
(40,86,1)
(2,90,1)
(8,57,1)
(82,59,1)
(48,89,1)
(0,45,2)
(29,77,2)
(88,45,2)
(26,45,2)
(34,45,2)
(22,45,2)
(83,45,2)
(23,45,2)
(29,45,2)
(84,11,2)
(38,45,2)
(21,86,2)
(45,86,2)
(40,11,2)
(56,45,2)
(94,45,2)
(84,86,2)
(27,45,2)
(70,45,2)
(82,59,2)
(41,45,2)
(73,45,2)
(32,45,2)
(79,45,2)
(77,21,2)
(1,45,2)
(92,45,2)
(89,45,2)
(33,45,2)
(84,45,2)
(78,45,2)
(76,45,2)
(56,86,2)
(82,45,2)
(59,45,2)
(12,45,2)
(14,82,2)
(5,45,2)
(74,45,2)
(40,45,2)
(67,32,2)
(9,45,2)
(53,45,2)
(66,45,2)
(40,86,2)
(16,45,2)
(14,37,2)
(90,45,2)
(2,45,2)
(88,86,2)
(12,86,2)
(43,76,2)
(52,45,2)
(62,45,2)
(42,45,2)
(14,78,2)
(68,11,2)
(14,34,2)
(87,45,2)
(76,86,2)
(51,45,2)
(14,60,2)
(76,11,2)
(28,45,2)
(67,45,2)
(14,47,2)
(5,86,2)
(75,45,2)
(85,45,2)
(50,45,2)
(5,11,2)
(59,86,2)
(24,45,2)
(32,86,2)
(29,86,2)
(60,84,2)
(17,45,2)
(4,45,2)
(32,11,2)
(78,12,2)
(65,45,2)
(73,40,2)
(77,45,2)
(57,56,2)
(6,45,2)
(34,68,2)
(60,45,2)
(14,73,2)
(57,45,2)
(56,11,2)
(91,45,2)
(47,45,2)
(20,45,2)
(58,45,2)
(72,45,2)
(47,5,2)
(12,11,2)
(15,45,2)
(49,45,2)
(36,45,2)
(37,45,2)
(21,45,2)
(52,86,2)
(8,45,2)
(14,88,2)
(43,45,2)
(10,45,2)
(14,43,2)
(14,67,2)
(71,45,2)
(35,45,2)
(52,11,2)
(59,11,2)
(68,86,2)
(14,57,2)
(68,45,2)
(37,52,2)
(64,45,2)
(3,14,2)
(63,45,2)
-----------------------------------
(0,s)
(1,s)
(2,"%s cannot be an lvalue")
(3,RET)
(4,s)
(5,rval(s, n)
(6,r)
(7,case Ostruct:)
(8,break;)
(9,n)
(10,r)
(11,Flattenctx *s)
(12,rval(s, n)
(13,default:)
(14,return r;)
(15,n)
(16,n)
(17,n)
(18,case Oucon:)
(19,n)
(20,r)
(21,exprop(n)
(22,break;)
(23,break;)
(24,r)
(25,case Oderef:)
(26,n)
(27,s)
(28,r)
(29,fatal(n, "%s cannot be an lvalue", opstr[exprop(n)
(30,case Omemb:)
(31,case Ogap:)
(32,rval(s, n)
(33,s)
(34,r = rval(s, n)
(35,n)
(36,r)
(37,r = rval(s, n)
(38,r)
(39,case Oidx:)
(40,rval(s, n)
(41,break;)
(42,break;)
(43,r = rval(s, n)
(44,case Oudata:)
(45,exprop(n)
(46,switch (exprop(n)
(47,r = rval(s, n)
(48,r)
(49,r)
(50,break;)
(51,break;)
(52,rval(s, n)
(53,s)
(54,r)
(55,)
(56,temp(s, n)
(57,r = temp(s, n)
(58,s)
(59,rval(s, n)
(60,r = rval(s, n)
(61,)
(62,n)
(63,s)
(64,n)
(65,n)
(66,s)
(67,r = rval(s, n)
(68,rval(s, n)
(69,case Oarr:)
(70,n)
(71,r)
(72,n)
(73,r = rval(s, n)
(74,opstr)
(75,r)
(76,rval(s, n)
(77,opstr[exprop(n)
(78,r = rval(s, n)
(79,break;)
(80,case Outag:)
(81,case Ovar:)
(82,r = rval(s, n)
(83,break;)
(84,rval(s, n)
(85,s)
(86,Node *n)
(87,n)
(88,r = n)
(89,break;)
(90,n)
(91,break;)
(92,r)
(93,case Otupget:)
(94,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^