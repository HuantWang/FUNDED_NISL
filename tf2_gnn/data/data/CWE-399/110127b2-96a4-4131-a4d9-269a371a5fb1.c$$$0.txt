-----label-----
1
-----code-----
Res* evaluateFunction3(Node *appRes, int applyAll, Node *node, Env *env, ruleExecInfo_t* rei, int reiSaveFlag, rError_t *errmsg, Region *r) {
    unsigned int i;
	unsigned int n;
	Node* subtrees0[MAX_FUNC_PARAMS];
	Node* args[MAX_FUNC_PARAMS];
	i = 0;
	Node *appFuncRes = appRes;
    while(appFuncRes->nodeType == N_PARTIAL_APPLICATION) {
        i++;
        subtrees0[MAX_FUNC_PARAMS - i] = appFuncRes->subtrees[1];
        appFuncRes = appFuncRes->subtrees[0];
    }
    /* app can only be N_FUNC_SYM_LINK */
    char* fn = appFuncRes->text;
	if(strcmp(fn, "nop") == 0) {
    	return newIntRes(r, 0);
    }
/*    printEnvIndent(env);
	printf("calling function %s\n", fn);
	char buf0[ERR_MSG_LEN];
	generateErrMsg("", node->expr, node->base, buf0);
	printf("%s", buf0); */
    Res *appArgRes = appRes->subtrees[1];

    n = appArgRes->degree;
    Res** appArgs = appArgRes->subtrees;
    Node** nodeArgs = node->subtrees[1]->subtrees;
    ExprType *coercionType = NULL;
    #ifdef DEBUG
    char buf[ERR_MSG_LEN>1024?ERR_MSG_LEN:1024];
	sprintf(buf, "Action: %s\n", fn);
    writeToTmp("eval.log", buf);
    #endif
    /* char buf2[ERR_MSG_LEN]; */

    Res* res;
    Region *newRegion = make_region(0, NULL);
    Env *global = globalEnv(env);
    Env *nEnv = newEnv(newHashTable(100), global, env);

    List *localTypingConstraints = NULL;
    FunctionDesc *fd = NULL;
    /* look up function descriptor */
    fd = (FunctionDesc *)lookupFromEnv(ruleEngineConfig.extFuncDescIndex, fn);
        /* find matching arity */
/*    if(fd!=NULL) {
        if((fd->exprType->vararg == ONCE && T_FUNC_ARITY(fd->exprType) == n) ||
            (fd->exprType->vararg == STAR && T_FUNC_ARITY(fd->exprType) - 2 <= n) ||
            (fd->exprType->vararg == PLUS && T_FUNC_ARITY(fd->exprType) - 1 <= n)) {
        } else {
            snprintf(buf, ERR_MSG_LEN, "error: arity mismatch for function %s", fn);
            generateErrMsg(buf, node->expr, node->base, buf2);
            addRErrorMsg(errmsg, -1, buf2);
            res = newErrorRes(r, -1);
            RETURN;
        }
    }*/

    localTypingConstraints = newList(r);
    char ioParam[MAX_FUNC_PARAMS];
    /* evaluation parameters and try to resolve remaining tvars with unification */
    for(i=0;i<n;i++) {
        switch(appArgs[i]->iotype) {
            case IO_TYPE_INPUT | IO_TYPE_OUTPUT: /* input/output */
                ioParam[i] = 'p';
                args[i] = evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion);
                if(args[i]->nodeType==N_ERROR) {
                    res = (Res *)args[i];
                    RETURN;
                }
                break;
            case IO_TYPE_INPUT: /* input */
                ioParam[i] = 'i';
                args[i] = appArgs[i];
                break;
            case IO_TYPE_DYNAMIC: /* dynamic */
            	if(isVariableNode(appArgs[i])) {
					args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion);
					if(TYPE(args[i]) == T_UNSPECED) {
						ioParam[i] = 'o';
					} else {
						ioParam[i] = 'p';
						if(args[i]->nodeType==N_ERROR) {
							res = (Res *)args[i];
							RETURN;
						}
					}
            	} else {
            		ioParam[i] = 'i';
            		args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion);
					if(args[i]->nodeType==N_ERROR) {
						res = (Res *)args[i];
						RETURN;
					}
            	}
                break;
            case IO_TYPE_OUTPUT: /* output */
                ioParam[i] = 'o';
                args[i] = newUnspecifiedRes(r);
                break;
            case IO_TYPE_EXPRESSION: /* expression */
                ioParam[i] = 'e';
                args[i] = appArgs[i];
                break;
            case IO_TYPE_ACTIONS: /* actions */
                ioParam[i] = 'a';
                args[i] = appArgs[i];
                break;
        }
    }
    /* try to type all input parameters */
    coercionType = node->subtrees[1]->coercionType;
    if(coercionType!=NULL) {
    	/*for(i=0;i<n;i++) {
			 if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->exprType != NULL) {
				if(unifyWith(args[i]->exprType, nodeArgs[i]->exprType, env->current, r) == NULL) {
					snprintf(buf, ERR_MSG_LEN, "error: dynamically typed parameter does not have expected type.");
					                    generateErrMsg(buf, nodeArgs[i]->expr, nodeArgs[i]->base, buf2);
					                    addRErrorMsg(errmsg, TYPE_ERROR, buf2);
					                    res = newErrorRes(r, TYPE_ERROR);
					                    RETURN;
				}
			}
		}*/


        ExprType *argType = newTupleRes(n, args, r)->exprType;
		if(typeFuncParam(node->subtrees[1], argType, coercionType, env->current, localTypingConstraints, errmsg, newRegion)!=0) {
			res = newErrorRes(r, TYPE_ERROR);
			RETURN;
		}
		/* solve local typing constraints */
		/* typingConstraintsToString(localTypingConstraints, localTVarEnv, buf, 1024);
		printf("%s\n", buf); */
		Node *errnode;
		if(!solveConstraints(localTypingConstraints, env->current, errmsg, &errnode, r)) {
			res = newErrorRes(r, -1);
			RETURN;
		}
		/*printVarTypeEnvToStdOut(localTVarEnv); */
		/* do the input value conversion */
		ExprType **coercionTypes = coercionType->subtrees;
		for(i=0;i<n;i++) {
			if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->coerce) {
				args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion);
				if(args[i]->nodeType==N_ERROR) {
					res = (Res *)args[i];
					RETURN;
				}
			}
		}
    }


    if(fd!=NULL) {
        switch(fd->nodeType) {
            case N_FD_DECONSTRUCTOR:
                res = deconstruct(fn, args, n, fd->value.proj, errmsg, r);
                break;
            case N_FD_CONSTRUCTOR:
                res = construct(fn, args, n, instantiate(node->exprType, env->current, 1, r), r);
                break;
            case N_FD_C_FUNC:
                res = (Res *) fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion);
                break;
            case N_FD_EXTERNAL:
            	res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);
                break;
            default:
                printf("error!");
                RETURN;
        }
    } else {
        res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);
    }

    if(res->nodeType==N_ERROR) {
        RETURN;
    }

    for(i=0;i<n;i++) {
        Res *resp = NULL;

        if(ioParam[i] == 'o' || ioParam[i] == 'p') {
            if(appArgs[i]->coerce) {
                args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion);
            }
            if(args[i]->nodeType==N_ERROR) {
                res = (Res *)args[i];
                RETURN ;
            }
            resp = setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r);
            /*char *buf = convertResToString(args[i]);
            printEnvIndent(env);
            printf("setting variable %s to %s\n", appArgs[i]->text, buf);
            free(buf);*/
        }
        if(resp!=NULL && resp->nodeType==N_ERROR) {
            res = resp;
            RETURN;
        }
    }
    /*printEnvIndent(env);
	printf("exiting function %s\n", fn);
*/
    /*return res;*/
ret:
    deleteEnv(nEnv, 2);
    cpEnv(env,r);
    res = cpRes(res,r);
    region_free(newRegion);
    return res;

}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
4,11
4,12
4,13
4,14
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
24,25
26,27
26,28
29,30
29,31
30,31
32,33
32,34
35,36
35,37
37,38
39,40
39,41
40,41
42,43
42,44
45,46
45,47
46,47
48,49
48,50
51,52
51,53
51,54
51,55
51,56
51,57
51,58
51,59
51,60
51,61
51,62
51,63
51,64
51,65
51,66
51,67
51,68
51,69
51,70
51,71
51,72
51,73
51,74
51,75
51,76
51,77
51,78
51,79
51,80
51,81
51,82
51,83
51,84
51,85
52,53
53,54
53,55
55,56
57,58
58,59
58,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
69,70
70,71
72,73
73,74
73,75
74,75
76,77
76,78
76,79
79,80
80,81
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
91,92
91,93
91,94
94,95
95,96
97,98
97,99
98,99
98,100
99,100
99,101
100,101
103,104
105,106
105,107
105,108
106,107
107,108
108,109
110,111
111,112
111,113
112,113
112,114
113,114
115,116
115,117
116,117
118,119
120,121
120,122
121,122
121,123
122,123
126,127
127,128
127,129
128,129
130,131
130,132
131,132
131,133
132,133
136,137
137,138
137,139
139,140
139,141
139,142
142,143
143,144
143,145
144,145
147,148
147,149
148,149
148,150
149,150
149,151
149,152
150,151
152,153
156,157
157,158
158,159
158,160
158,161
159,160
161,162
164,165
165,166
165,167
166,167
168,169
168,170
168,171
171,172
172,173
172,174
173,174
173,175
174,175
178,179
179,180
179,181
180,181
182,183
182,184
183,184
186,187
187,188
187,189
188,189
190,191
190,192
190,193
190,194
194,195
195,196
195,197
196,197
199,200
200,201
200,202
201,202
203,204
203,205
203,206
203,207
207,208
208,209
208,210
209,210
209,211
210,211
210,212
211,212
216,217
217,218
217,219
218,219
220,221
220,222
220,223
223,224
224,225
226,227
227,228
227,229
228,229
230,231
230,232
233,234
234,235
234,236
235,236
237,238
237,239
237,240
240,241
241,242
241,243
241,244
242,243
245,246
247,248
248,249
248,250
249,250
251,252
251,253
251,254
254,255
255,256
255,257
256,257
258,259
260,261
261,262
261,263
262,263
264,265
264,266
264,267
267,268
268,269
268,270
268,271
268,272
269,270
271,272
271,273
272,273
275,276
277,278
279,280
280,281
280,282
281,282
283,284
283,285
283,286
286,287
287,288
289,290
290,291
290,292
291,292
293,294
293,295
293,296
296,297
297,298
299,300
300,301
300,302
301,302
303,304
303,305
304,305
304,306
305,306
307,308
309,310
309,311
309,312
310,311
312,313
312,314
313,314
316,317
318,319
319,320
319,321
320,321
322,323
322,324
323,324
325,326
327,328
328,329
328,330
330,331
330,332
332,333
333,334
335,336
335,337
335,338
335,339
336,337
337,338
337,339
338,339
341,342
341,343
342,343
344,345
346,347
347,348
349,350
350,351
350,352
351,352
351,353
352,353
352,354
353,354
355,356
358,359
358,360
358,361
358,362
358,363
358,364
358,365
358,366
358,367
358,368
358,369
358,370
358,371
358,372
358,373
358,374
358,375
358,376
358,377
358,378
358,379
358,380
358,381
358,382
359,360
360,361
360,362
361,362
363,364
365,366
366,367
366,368
367,368
367,369
368,369
370,371
373,374
374,375
374,376
375,376
375,377
376,377
378,379
380,381
380,382
380,383
380,384
380,385
380,386
380,387
380,388
380,389
381,382
383,384
383,385
384,385
386,387
388,389
391,392
393,394
395,396
397,398
399,400
401,402
401,403
402,403
402,404
403,404
403,405
404,405
404,406
405,406
407,408
410,411
412,413
412,414
413,414
414,415
414,416
415,416
417,418
417,419
418,419
418,420
419,420
421,422
423,424
423,425
424,425
426,427
428,429
429,430
432,433
433,434
435,436
436,437
436,438
437,438
437,439
438,439
440,441
443,444
444,445
444,446
445,446
445,447
446,447
448,449
450,451
450,452
451,452
453,454
456,457
457,458
459,460
459,461
459,462
460,461
460,462
461,462
463,464
463,465
464,465
466,467
468,469
468,470
469,470
470,471
470,472
471,472
471,473
472,473
474,475
476,477
476,478
476,479
476,480
476,481
476,482
476,483
476,484
477,478
479,480
479,481
480,481
480,482
481,482
483,484
486,487
486,488
487,488
489,490
491,492
493,494
495,496
497,498
499,500
501,502
501,503
501,504
502,503
502,504
503,504
503,505
504,505
506,507
506,508
507,508
509,510
511,512
513,514
514,515
515,516
515,517
516,517
516,518
517,518
519,520
522,523
522,524
523,524
524,525
524,526
525,526
525,527
526,527
528,529
531,532
531,533
532,533
532,534
533,534
533,535
534,535
534,536
535,536
537,538
540,541
542,543
542,544
543,544
544,545
544,546
545,546
547,548
547,549
548,549
548,550
549,550
551,552
553,554
553,555
554,555
556,557
558,559
559,560
561,562
561,563
561,564
562,563
563,564
563,565
564,565
564,566
565,566
567,568
570,571
571,572
571,573
572,573
572,574
573,574
575,576
577,578
577,579
577,580
577,581
577,582
577,583
577,584
577,585
577,586
578,579
580,581
580,582
581,582
583,584
585,586
588,589
590,591
592,593
594,595
596,597
598,599
598,600
599,600
599,601
600,601
600,602
601,602
601,603
602,603
604,605
607,608
609,610
609,611
610,611
611,612
611,613
612,613
614,615
614,616
615,616
615,617
616,617
618,619
620,621
620,622
621,622
623,624
625,626
626,627
629,630
630,631
632,633
633,634
633,635
634,635
634,636
635,636
637,638
640,641
641,642
641,643
642,643
642,644
643,644
645,646
647,648
647,649
648,649
650,651
653,654
654,655
656,657
657,658
657,659
658,659
658,660
659,660
661,662
664,665
665,666
665,667
666,667
666,668
667,668
669,670
671,672
671,673
672,673
674,675
677,678
678,679
680,681
681,682
681,683
682,683
682,684
683,684
685,686
688,689
689,690
689,691
690,691
690,692
691,692
693,694
695,696
695,697
696,697
698,699
701,702
702,703
702,704
703,704
705,706
705,707
706,707
706,708
707,708
707,709
708,709
713,714
713,715
714,715
714,716
715,716
717,718
719,720
719,721
719,722
719,723
719,724
719,725
720,721
721,722
721,723
722,723
724,725
724,726
724,727
727,728
728,729
728,730
729,730
729,731
729,732
729,733
730,731
732,733
734,735
736,737
739,740
739,741
740,741
740,742
741,742
741,743
741,744
741,745
741,746
741,747
741,748
741,749
742,743
744,745
744,746
745,746
745,747
746,747
750,751
752,753
754,755
754,756
755,756
758,759
760,761
762,763
765,766
765,767
766,767
767,768
767,769
768,769
770,771
770,772
770,773
771,772
773,774
775,776
777,778
778,779
780,781
781,782
781,783
782,783
784,785
784,786
787,788
787,789
788,789
789,790
789,791
789,792
789,793
789,794
789,795
790,791
792,793
794,795
794,796
795,796
798,799
800,801
801,802
803,804
805,806
805,807
806,807
807,808
807,809
808,809
810,811
810,812
810,813
811,812
813,814
815,816
817,818
818,819
820,821
821,822
821,823
822,823
824,825
824,826
824,827
824,828
828,829
829,830
829,831
830,831
833,834
833,835
833,836
833,837
834,835
835,836
835,837
836,837
839,840
839,841
840,841
842,843
844,845
845,846
847,848
848,849
848,850
849,850
849,851
850,851
851,852
851,853
852,853
852,854
853,854
853,855
854,855
856,857
859,860
859,861
860,861
860,862
861,862
863,864
866,867
866,868
867,868
867,869
868,869
870,871
873,874
873,875
874,875
875,876
875,877
876,877
876,878
877,878
879,880
881,882
881,883
881,884
881,885
881,886
881,887
881,888
882,883
884,885
884,886
885,886
887,888
889,890
889,891
890,891
892,893
894,895
894,896
895,896
897,898
899,900
899,901
900,901
903,904
905,906
907,908
907,909
908,909
908,910
909,910
909,911
910,911
910,912
911,912
913,914
916,917
918,919
918,920
919,920
920,921
920,922
921,922
923,924
923,925
924,925
924,926
925,926
927,928
929,930
929,931
930,931
932,933
934,935
935,936
937,938
937,939
937,940
938,939
938,940
939,940
941,942
943,944
944,945
944,946
945,946
945,947
946,947
949,950
949,951
949,952
949,953
949,954
949,955
949,956
949,957
949,958
949,959
949,960
949,961
949,962
949,963
949,964
950,951
951,952
953,954
954,955
954,956
955,956
957,958
957,959
957,960
957,961
957,962
957,963
957,964
958,959
960,961
962,963
964,965
966,967
966,968
967,968
967,969
968,969
972,973
974,975
977,978
978,979
980,981
981,982
981,983
982,983
984,985
984,986
984,987
984,988
984,989
984,990
985,986
987,988
989,990
991,992
993,994
993,995
993,996
993,997
993,998
994,995
996,997
996,998
997,998
1000,1001
1000,1002
1001,1002
1005,1006
1007,1008
1010,1011
1011,1012
1013,1014
1014,1015
1014,1016
1015,1016
1017,1018
1017,1019
1018,1019
1018,1020
1019,1020
1021,1022
1023,1024
1023,1025
1023,1026
1023,1027
1023,1028
1023,1029
1023,1030
1023,1031
1023,1032
1024,1025
1024,1026
1025,1026
1025,1027
1026,1027
1030,1031
1032,1033
1034,1035
1036,1037
1038,1039
1040,1041
1042,1043
1044,1045
1047,1048
1048,1049
1050,1051
1051,1052
1051,1053
1052,1053
1054,1055
1054,1056
1054,1057
1054,1058
1054,1059
1054,1060
1054,1061
1054,1062
1054,1063
1054,1064
1054,1065
1055,1056
1057,1058
1059,1060
1061,1062
1063,1064
1065,1066
1067,1068
1069,1070
1071,1072
1073,1074
1075,1076
1079,1080
1080,1081
1080,1082
1081,1082
1084,1085
1085,1086
1087,1088
1088,1089
1089,1090
1089,1091
1090,1091
1092,1093
1092,1094
1092,1095
1092,1096
1092,1097
1092,1098
1092,1099
1092,1100
1092,1101
1092,1102
1092,1103
1093,1094
1095,1096
1097,1098
1099,1100
1101,1102
1103,1104
1105,1106
1107,1108
1109,1110
1111,1112
1113,1114
1115,1116
1115,1117
1116,1117
1116,1118
1117,1118
1117,1119
1118,1119
1121,1122
1123,1124
1124,1125
1125,1126
1127,1128
1127,1129
1127,1130
1127,1131
1128,1129
1129,1130
1129,1131
1130,1131
1133,1134
1133,1135
1134,1135
1136,1137
1138,1139
1139,1140
1141,1142
1141,1143
1141,1144
1142,1143
1143,1144
1143,1145
1144,1145
1146,1147
1146,1148
1146,1149
1149,1150
1150,1151
1152,1153
1152,1154
1153,1154
1153,1155
1154,1155
1154,1156
1155,1156
1155,1157
1156,1157
1158,1159
1161,1162
1161,1163
1162,1163
1162,1164
1163,1164
1165,1166
1168,1169
1168,1170
1168,1171
1169,1170
1169,1171
1170,1171
1170,1172
1171,1172
1171,1173
1172,1173
1174,1175
1177,1178
1178,1179
1179,1180
1179,1181
1180,1181
1180,1182
1181,1182
1183,1184
1185,1186
1185,1187
1185,1188
1185,1189
1185,1190
1185,1191
1185,1192
1186,1187
1188,1189
1188,1190
1189,1190
1191,1192
1193,1194
1193,1195
1194,1195
1196,1197
1198,1199
1198,1200
1199,1200
1199,1201
1200,1201
1202,1203
1205,1206
1205,1207
1206,1207
1209,1210
1211,1212
1213,1214
1213,1215
1214,1215
1214,1216
1215,1216
1215,1217
1216,1217
1216,1218
1217,1218
1219,1220
1222,1223
1224,1225
1224,1226
1225,1226
1226,1227
1226,1228
1227,1228
1229,1230
1229,1231
1230,1231
1230,1232
1231,1232
1233,1234
1235,1236
1235,1237
1236,1237
1238,1239
1240,1241
1241,1242
1243,1244
1244,1245
1244,1246
1245,1246
1247,1248
1247,1249
1247,1250
1247,1251
1247,1252
1247,1253
1247,1254
1248,1249
1250,1251
1250,1252
1251,1252
1251,1253
1252,1253
1254,1255
1257,1258
1257,1259
1258,1259
1260,1261
1262,1263
1264,1265
1266,1267
1268,1269
1270,1271
1270,1272
1271,1272
1271,1273
1272,1273
1272,1274
1273,1274
1275,1276
1277,1278
1277,1279
1278,1279
1278,1280
1279,1280
1282,1283
1284,1285
1284,1286
1285,1286
1286,1287
1286,1288
1287,1288
1289,1290
1291,1292
1292,1293
1294,1295
1294,1296
1296,1297
1297,1298
1297,1299
1297,1300
1298,1299
1300,1301
1303,1304
1304,1305
1304,1306
1304,1307
1305,1306
1307,1308
1309,1310
1311,1312
1312,1313
1312,1314
1313,1314
1315,1316
1315,1317
1315,1318
1316,1317
1318,1319
1320,1321
1322,1323
1323,1324
1323,1325
1324,1325
1326,1327
1328,1329
1329,1330
-----nextToken-----

-----computeFrom-----
83,84
83,85
98,99
98,100
111,112
111,113
115,116
115,117
127,128
127,129
148,149
148,150
179,180
179,181
300,301
300,302
319,320
319,321
337,338
337,339
341,342
341,343
360,361
360,362
366,367
366,368
374,375
374,376
402,403
402,404
414,415
414,416
436,437
436,438
444,445
444,446
470,471
470,472
502,503
502,504
515,516
515,517
524,525
524,526
532,533
532,534
544,545
544,546
563,564
563,565
571,572
571,573
599,600
599,601
611,612
611,613
633,634
633,635
641,642
641,643
657,658
657,659
665,666
665,667
681,682
681,683
689,690
689,691
702,703
702,704
714,715
714,716
740,741
740,742
767,768
767,769
807,808
807,809
835,836
835,837
839,840
839,841
849,850
849,851
851,852
851,853
852,853
852,854
859,860
859,861
875,876
875,877
908,909
908,910
920,921
920,922
938,939
938,940
954,955
954,956
981,982
981,983
1014,1015
1014,1016
1051,1052
1051,1053
1089,1090
1089,1091
1116,1117
1116,1118
1129,1130
1129,1131
1133,1134
1133,1135
1153,1154
1153,1155
1154,1155
1154,1156
1161,1162
1161,1163
1179,1180
1179,1181
1214,1215
1214,1216
1226,1227
1226,1228
1244,1245
1244,1246
1271,1272
1271,1273
1272,1273
1272,1274
1277,1278
1277,1279
1286,1287
1286,1288
1312,1313
1312,1314
-----guardedBy-----
406,425
408,427
510,520
536,555
538,557
603,622
605,624
716,831
869,886
871,933
912,931
914,933
940,1027
1166,1261
1218,1237
1220,1239
1280,1290
-----guardedByNegation-----
508,555
510,557
-----lastLexicalUse-----
510,557
-----jump-----
510,557
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Pointer;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Pointer;Name;ArrayModifier;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;WhileStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;CaseStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
Res* evaluateFunction3(Node *appRes, int applyAll, Node *node, Env *env, ruleExecInfo_t* rei, int reiSaveFlag, rError_t *errmsg, Region *r) {    unsigned int i;	unsigned int n;	Node* subtrees0[MAX_FUNC_PARAMS];	Node* args[MAX_FUNC_PARAMS];	i = 0;	Node *appFuncRes = appRes;    while(appFuncRes->nodeType == N_PARTIAL_APPLICATION) {        i++;        subtrees0[MAX_FUNC_PARAMS - i] = appFuncRes->subtrees[1];        appFuncRes = appFuncRes->subtrees[0];    }    /* app can only be N_FUNC_SYM_LINK */    char* fn = appFuncRes->text;	if(strcmp(fn, "nop") == 0) {    	return newIntRes(r, 0);    }/*    printEnvIndent(env);	printf("calling function %s\n", fn);	char buf0[ERR_MSG_LEN];	generateErrMsg("", node->expr, node->base, buf0);	printf("%s", buf0); */    Res *appArgRes = appRes->subtrees[1];    n = appArgRes->degree;    Res** appArgs = appArgRes->subtrees;    Node** nodeArgs = node->subtrees[1]->subtrees;    ExprType *coercionType = NULL;    #ifdef DEBUG    char buf[ERR_MSG_LEN>1024?ERR_MSG_LEN:1024];	sprintf(buf, "Action: %s\n", fn);    writeToTmp("eval.log", buf);    #endif    /* char buf2[ERR_MSG_LEN]; */    Res* res;    Region *newRegion = make_region(0, NULL);    Env *global = globalEnv(env);    Env *nEnv = newEnv(newHashTable(100), global, env);    List *localTypingConstraints = NULL;    FunctionDesc *fd = NULL;    /* look up function descriptor */    fd = (FunctionDesc *)lookupFromEnv(ruleEngineConfig.extFuncDescIndex, fn);        /* find matching arity *//*    if(fd!=NULL) {        if((fd->exprType->vararg == ONCE && T_FUNC_ARITY(fd->exprType) == n) ||            (fd->exprType->vararg == STAR && T_FUNC_ARITY(fd->exprType) - 2 <= n) ||            (fd->exprType->vararg == PLUS && T_FUNC_ARITY(fd->exprType) - 1 <= n)) {        } else {            snprintf(buf, ERR_MSG_LEN, "error: arity mismatch for function %s", fn);            generateErrMsg(buf, node->expr, node->base, buf2);            addRErrorMsg(errmsg, -1, buf2);            res = newErrorRes(r, -1);            RETURN;        }    }*/    localTypingConstraints = newList(r);    char ioParam[MAX_FUNC_PARAMS];    /* evaluation parameters and try to resolve remaining tvars with unification */    for(i=0;i<n;i++) {        switch(appArgs[i]->iotype) {            case IO_TYPE_INPUT | IO_TYPE_OUTPUT: /* input/output */                ioParam[i] = 'p';                args[i] = evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion);                if(args[i]->nodeType==N_ERROR) {                    res = (Res *)args[i];                    RETURN;                }                break;            case IO_TYPE_INPUT: /* input */                ioParam[i] = 'i';                args[i] = appArgs[i];                break;            case IO_TYPE_DYNAMIC: /* dynamic */            	if(isVariableNode(appArgs[i])) {					args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion);					if(TYPE(args[i]) == T_UNSPECED) {						ioParam[i] = 'o';					} else {						ioParam[i] = 'p';						if(args[i]->nodeType==N_ERROR) {							res = (Res *)args[i];							RETURN;						}					}            	} else {            		ioParam[i] = 'i';            		args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion);					if(args[i]->nodeType==N_ERROR) {						res = (Res *)args[i];						RETURN;					}            	}                break;            case IO_TYPE_OUTPUT: /* output */                ioParam[i] = 'o';                args[i] = newUnspecifiedRes(r);                break;            case IO_TYPE_EXPRESSION: /* expression */                ioParam[i] = 'e';                args[i] = appArgs[i];                break;            case IO_TYPE_ACTIONS: /* actions */                ioParam[i] = 'a';                args[i] = appArgs[i];                break;        }    }    /* try to type all input parameters */    coercionType = node->subtrees[1]->coercionType;    if(coercionType!=NULL) {    	/*for(i=0;i<n;i++) {			 if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->exprType != NULL) {				if(unifyWith(args[i]->exprType, nodeArgs[i]->exprType, env->current, r) == NULL) {					snprintf(buf, ERR_MSG_LEN, "error: dynamically typed parameter does not have expected type.");					                    generateErrMsg(buf, nodeArgs[i]->expr, nodeArgs[i]->base, buf2);					                    addRErrorMsg(errmsg, TYPE_ERROR, buf2);					                    res = newErrorRes(r, TYPE_ERROR);					                    RETURN;				}			}		}*/        ExprType *argType = newTupleRes(n, args, r)->exprType;		if(typeFuncParam(node->subtrees[1], argType, coercionType, env->current, localTypingConstraints, errmsg, newRegion)!=0) {			res = newErrorRes(r, TYPE_ERROR);			RETURN;		}		/* solve local typing constraints */		/* typingConstraintsToString(localTypingConstraints, localTVarEnv, buf, 1024);		printf("%s\n", buf); */		Node *errnode;		if(!solveConstraints(localTypingConstraints, env->current, errmsg, &errnode, r)) {			res = newErrorRes(r, -1);			RETURN;		}		/*printVarTypeEnvToStdOut(localTVarEnv); */		/* do the input value conversion */		ExprType **coercionTypes = coercionType->subtrees;		for(i=0;i<n;i++) {			if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->coerce) {				args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion);				if(args[i]->nodeType==N_ERROR) {					res = (Res *)args[i];					RETURN;				}			}		}    }    if(fd!=NULL) {        switch(fd->nodeType) {            case N_FD_DECONSTRUCTOR:                res = deconstruct(fn, args, n, fd->value.proj, errmsg, r);                break;            case N_FD_CONSTRUCTOR:                res = construct(fn, args, n, instantiate(node->exprType, env->current, 1, r), r);                break;            case N_FD_C_FUNC:                res = (Res *) fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion);                break;            case N_FD_EXTERNAL:            	res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);                break;            default:                printf("error!");                RETURN;        }    } else {        res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);    }    if(res->nodeType==N_ERROR) {        RETURN;    }    for(i=0;i<n;i++) {        Res *resp = NULL;        if(ioParam[i] == 'o' || ioParam[i] == 'p') {            if(appArgs[i]->coerce) {                args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion);            }            if(args[i]->nodeType==N_ERROR) {                res = (Res *)args[i];                RETURN ;            }            resp = setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r);            /*char *buf = convertResToString(args[i]);            printEnvIndent(env);            printf("setting variable %s to %s\n", appArgs[i]->text, buf);            free(buf);*/        }        if(resp!=NULL && resp->nodeType==N_ERROR) {            res = resp;            RETURN;        }    }    /*printEnvIndent(env);	printf("exiting function %s\n", fn);*/    /*return res;*/ret:    deleteEnv(nEnv, 2);    cpEnv(env,r);    res = cpRes(res,r);    region_free(newRegion);    return res;}
Res
Res
* evaluateFunction3(Node *appRes, int applyAll, Node *node, Env *env, ruleExecInfo_t* rei, int reiSaveFlag, rError_t *errmsg, Region *r)
*
evaluateFunction3
Node *appRes
Node
Node
*appRes
*
appRes
int applyAll
int
applyAll
applyAll
Node *node
Node
Node
*node
*
node
Env *env
Env
Env
*env
*
env
ruleExecInfo_t* rei
ruleExecInfo_t
ruleExecInfo_t
* rei
*
rei
int reiSaveFlag
int
reiSaveFlag
reiSaveFlag
rError_t *errmsg
rError_t
rError_t
*errmsg
*
errmsg
Region *r
Region
Region
*r
*
r
{    unsigned int i;	unsigned int n;	Node* subtrees0[MAX_FUNC_PARAMS];	Node* args[MAX_FUNC_PARAMS];	i = 0;	Node *appFuncRes = appRes;    while(appFuncRes->nodeType == N_PARTIAL_APPLICATION) {        i++;        subtrees0[MAX_FUNC_PARAMS - i] = appFuncRes->subtrees[1];        appFuncRes = appFuncRes->subtrees[0];    }    /* app can only be N_FUNC_SYM_LINK */    char* fn = appFuncRes->text;	if(strcmp(fn, "nop") == 0) {    	return newIntRes(r, 0);    }/*    printEnvIndent(env);	printf("calling function %s\n", fn);	char buf0[ERR_MSG_LEN];	generateErrMsg("", node->expr, node->base, buf0);	printf("%s", buf0); */    Res *appArgRes = appRes->subtrees[1];    n = appArgRes->degree;    Res** appArgs = appArgRes->subtrees;    Node** nodeArgs = node->subtrees[1]->subtrees;    ExprType *coercionType = NULL;    #ifdef DEBUG    char buf[ERR_MSG_LEN>1024?ERR_MSG_LEN:1024];	sprintf(buf, "Action: %s\n", fn);    writeToTmp("eval.log", buf);    #endif    /* char buf2[ERR_MSG_LEN]; */    Res* res;    Region *newRegion = make_region(0, NULL);    Env *global = globalEnv(env);    Env *nEnv = newEnv(newHashTable(100), global, env);    List *localTypingConstraints = NULL;    FunctionDesc *fd = NULL;    /* look up function descriptor */    fd = (FunctionDesc *)lookupFromEnv(ruleEngineConfig.extFuncDescIndex, fn);        /* find matching arity *//*    if(fd!=NULL) {        if((fd->exprType->vararg == ONCE && T_FUNC_ARITY(fd->exprType) == n) ||            (fd->exprType->vararg == STAR && T_FUNC_ARITY(fd->exprType) - 2 <= n) ||            (fd->exprType->vararg == PLUS && T_FUNC_ARITY(fd->exprType) - 1 <= n)) {        } else {            snprintf(buf, ERR_MSG_LEN, "error: arity mismatch for function %s", fn);            generateErrMsg(buf, node->expr, node->base, buf2);            addRErrorMsg(errmsg, -1, buf2);            res = newErrorRes(r, -1);            RETURN;        }    }*/    localTypingConstraints = newList(r);    char ioParam[MAX_FUNC_PARAMS];    /* evaluation parameters and try to resolve remaining tvars with unification */    for(i=0;i<n;i++) {        switch(appArgs[i]->iotype) {            case IO_TYPE_INPUT | IO_TYPE_OUTPUT: /* input/output */                ioParam[i] = 'p';                args[i] = evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion);                if(args[i]->nodeType==N_ERROR) {                    res = (Res *)args[i];                    RETURN;                }                break;            case IO_TYPE_INPUT: /* input */                ioParam[i] = 'i';                args[i] = appArgs[i];                break;            case IO_TYPE_DYNAMIC: /* dynamic */            	if(isVariableNode(appArgs[i])) {					args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion);					if(TYPE(args[i]) == T_UNSPECED) {						ioParam[i] = 'o';					} else {						ioParam[i] = 'p';						if(args[i]->nodeType==N_ERROR) {							res = (Res *)args[i];							RETURN;						}					}            	} else {            		ioParam[i] = 'i';            		args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion);					if(args[i]->nodeType==N_ERROR) {						res = (Res *)args[i];						RETURN;					}            	}                break;            case IO_TYPE_OUTPUT: /* output */                ioParam[i] = 'o';                args[i] = newUnspecifiedRes(r);                break;            case IO_TYPE_EXPRESSION: /* expression */                ioParam[i] = 'e';                args[i] = appArgs[i];                break;            case IO_TYPE_ACTIONS: /* actions */                ioParam[i] = 'a';                args[i] = appArgs[i];                break;        }    }    /* try to type all input parameters */    coercionType = node->subtrees[1]->coercionType;    if(coercionType!=NULL) {    	/*for(i=0;i<n;i++) {			 if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->exprType != NULL) {				if(unifyWith(args[i]->exprType, nodeArgs[i]->exprType, env->current, r) == NULL) {					snprintf(buf, ERR_MSG_LEN, "error: dynamically typed parameter does not have expected type.");					                    generateErrMsg(buf, nodeArgs[i]->expr, nodeArgs[i]->base, buf2);					                    addRErrorMsg(errmsg, TYPE_ERROR, buf2);					                    res = newErrorRes(r, TYPE_ERROR);					                    RETURN;				}			}		}*/        ExprType *argType = newTupleRes(n, args, r)->exprType;		if(typeFuncParam(node->subtrees[1], argType, coercionType, env->current, localTypingConstraints, errmsg, newRegion)!=0) {			res = newErrorRes(r, TYPE_ERROR);			RETURN;		}		/* solve local typing constraints */		/* typingConstraintsToString(localTypingConstraints, localTVarEnv, buf, 1024);		printf("%s\n", buf); */		Node *errnode;		if(!solveConstraints(localTypingConstraints, env->current, errmsg, &errnode, r)) {			res = newErrorRes(r, -1);			RETURN;		}		/*printVarTypeEnvToStdOut(localTVarEnv); */		/* do the input value conversion */		ExprType **coercionTypes = coercionType->subtrees;		for(i=0;i<n;i++) {			if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->coerce) {				args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion);				if(args[i]->nodeType==N_ERROR) {					res = (Res *)args[i];					RETURN;				}			}		}    }    if(fd!=NULL) {        switch(fd->nodeType) {            case N_FD_DECONSTRUCTOR:                res = deconstruct(fn, args, n, fd->value.proj, errmsg, r);                break;            case N_FD_CONSTRUCTOR:                res = construct(fn, args, n, instantiate(node->exprType, env->current, 1, r), r);                break;            case N_FD_C_FUNC:                res = (Res *) fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion);                break;            case N_FD_EXTERNAL:            	res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);                break;            default:                printf("error!");                RETURN;        }    } else {        res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);    }    if(res->nodeType==N_ERROR) {        RETURN;    }    for(i=0;i<n;i++) {        Res *resp = NULL;        if(ioParam[i] == 'o' || ioParam[i] == 'p') {            if(appArgs[i]->coerce) {                args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion);            }            if(args[i]->nodeType==N_ERROR) {                res = (Res *)args[i];                RETURN ;            }            resp = setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r);            /*char *buf = convertResToString(args[i]);            printEnvIndent(env);            printf("setting variable %s to %s\n", appArgs[i]->text, buf);            free(buf);*/        }        if(resp!=NULL && resp->nodeType==N_ERROR) {            res = resp;            RETURN;        }    }    /*printEnvIndent(env);	printf("exiting function %s\n", fn);*/    /*return res;*/ret:    deleteEnv(nEnv, 2);    cpEnv(env,r);    res = cpRes(res,r);    region_free(newRegion);    return res;}
unsigned int i;
unsigned int i;
unsigned int
i
i
unsigned int n;
unsigned int n;
unsigned int
n
n
Node* subtrees0[MAX_FUNC_PARAMS];
Node* subtrees0[MAX_FUNC_PARAMS];
Node
Node
* subtrees0[MAX_FUNC_PARAMS]
*
subtrees0
[MAX_FUNC_PARAMS]
MAX_FUNC_PARAMS
MAX_FUNC_PARAMS
Node* args[MAX_FUNC_PARAMS];
Node* args[MAX_FUNC_PARAMS];
Node
Node
* args[MAX_FUNC_PARAMS]
*
args
[MAX_FUNC_PARAMS]
MAX_FUNC_PARAMS
MAX_FUNC_PARAMS
i = 0;
i = 0
i
i
0
Node *appFuncRes = appRes;
Node *appFuncRes = appRes;
Node
Node
*appFuncRes = appRes
*
appFuncRes
= appRes
appRes
appRes
while(appFuncRes->nodeType == N_PARTIAL_APPLICATION) {        i++;        subtrees0[MAX_FUNC_PARAMS - i] = appFuncRes->subtrees[1];        appFuncRes = appFuncRes->subtrees[0];    }
appFuncRes->nodeType == N_PARTIAL_APPLICATION
appFuncRes->nodeType
appFuncRes
appFuncRes
nodeType
N_PARTIAL_APPLICATION
N_PARTIAL_APPLICATION
{        i++;        subtrees0[MAX_FUNC_PARAMS - i] = appFuncRes->subtrees[1];        appFuncRes = appFuncRes->subtrees[0];    }
i++;
i++
i
i
subtrees0[MAX_FUNC_PARAMS - i] = appFuncRes->subtrees[1];
subtrees0[MAX_FUNC_PARAMS - i] = appFuncRes->subtrees[1]
subtrees0[MAX_FUNC_PARAMS - i]
subtrees0
subtrees0
MAX_FUNC_PARAMS - i
MAX_FUNC_PARAMS
MAX_FUNC_PARAMS
i
i
appFuncRes->subtrees[1]
appFuncRes->subtrees
appFuncRes
appFuncRes
subtrees
1
appFuncRes = appFuncRes->subtrees[0];
appFuncRes = appFuncRes->subtrees[0]
appFuncRes
appFuncRes
appFuncRes->subtrees[0]
appFuncRes->subtrees
appFuncRes
appFuncRes
subtrees
0
char* fn = appFuncRes->text;
char* fn = appFuncRes->text;
char
* fn = appFuncRes->text
*
fn
= appFuncRes->text
appFuncRes->text
appFuncRes
appFuncRes
text
if(strcmp(fn, "nop") == 0) {    	return newIntRes(r, 0);    }
strcmp(fn, "nop") == 0
strcmp(fn, "nop")
strcmp
strcmp
fn
fn
"nop"
0
{    	return newIntRes(r, 0);    }
return newIntRes(r, 0);
newIntRes(r, 0)
newIntRes
newIntRes
r
r
0
Res *appArgRes = appRes->subtrees[1];
Res *appArgRes = appRes->subtrees[1];
Res
Res
*appArgRes = appRes->subtrees[1]
*
appArgRes
= appRes->subtrees[1]
appRes->subtrees[1]
appRes->subtrees
appRes
appRes
subtrees
1
n = appArgRes->degree;
n = appArgRes->degree
n
n
appArgRes->degree
appArgRes
appArgRes
degree
Res** appArgs = appArgRes->subtrees;
Res** appArgs = appArgRes->subtrees;
Res
Res
** appArgs = appArgRes->subtrees
*
*
appArgs
= appArgRes->subtrees
appArgRes->subtrees
appArgRes
appArgRes
subtrees
Node** nodeArgs = node->subtrees[1]->subtrees;
Node** nodeArgs = node->subtrees[1]->subtrees;
Node
Node
** nodeArgs = node->subtrees[1]->subtrees
*
*
nodeArgs
= node->subtrees[1]->subtrees
node->subtrees[1]->subtrees
node->subtrees[1]
node->subtrees
node
node
subtrees
1
subtrees
ExprType *coercionType = NULL;
ExprType *coercionType = NULL;
ExprType
ExprType
*coercionType = NULL
*
coercionType
= NULL
NULL
NULL
Res* res;
Res* res;
Res
Res
* res
*
res
Region *newRegion = make_region(0, NULL);
Region *newRegion = make_region(0, NULL);
Region
Region
*newRegion = make_region(0, NULL)
*
newRegion
= make_region(0, NULL)
make_region(0, NULL)
make_region
make_region
0
NULL
NULL
Env *global = globalEnv(env);
Env *global = globalEnv(env);
Env
Env
*global = globalEnv(env)
*
global
= globalEnv(env)
globalEnv(env)
globalEnv
globalEnv
env
env
Env *nEnv = newEnv(newHashTable(100), global, env);
Env *nEnv = newEnv(newHashTable(100), global, env);
Env
Env
*nEnv = newEnv(newHashTable(100), global, env)
*
nEnv
= newEnv(newHashTable(100), global, env)
newEnv(newHashTable(100), global, env)
newEnv
newEnv
newHashTable(100)
newHashTable
newHashTable
100
global
global
env
env
List *localTypingConstraints = NULL;
List *localTypingConstraints = NULL;
List
List
*localTypingConstraints = NULL
*
localTypingConstraints
= NULL
NULL
NULL
FunctionDesc *fd = NULL;
FunctionDesc *fd = NULL;
FunctionDesc
FunctionDesc
*fd = NULL
*
fd
= NULL
NULL
NULL
fd = (FunctionDesc *)lookupFromEnv(ruleEngineConfig.extFuncDescIndex, fn);
fd = (FunctionDesc *)lookupFromEnv(ruleEngineConfig.extFuncDescIndex, fn)
fd
fd
(FunctionDesc *)lookupFromEnv(ruleEngineConfig.extFuncDescIndex, fn)
FunctionDesc *
FunctionDesc
FunctionDesc
*
*
lookupFromEnv(ruleEngineConfig.extFuncDescIndex, fn)
lookupFromEnv
lookupFromEnv
ruleEngineConfig.extFuncDescIndex
ruleEngineConfig
ruleEngineConfig
extFuncDescIndex
fn
fn
localTypingConstraints = newList(r);
localTypingConstraints = newList(r)
localTypingConstraints
localTypingConstraints
newList(r)
newList
newList
r
r
char ioParam[MAX_FUNC_PARAMS];
char ioParam[MAX_FUNC_PARAMS];
char
ioParam[MAX_FUNC_PARAMS]
ioParam
[MAX_FUNC_PARAMS]
MAX_FUNC_PARAMS
MAX_FUNC_PARAMS
for(i=0;i<n;i++) {        switch(appArgs[i]->iotype) {            case IO_TYPE_INPUT | IO_TYPE_OUTPUT: /* input/output */                ioParam[i] = 'p';                args[i] = evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion);                if(args[i]->nodeType==N_ERROR) {                    res = (Res *)args[i];                    RETURN;                }                break;            case IO_TYPE_INPUT: /* input */                ioParam[i] = 'i';                args[i] = appArgs[i];                break;            case IO_TYPE_DYNAMIC: /* dynamic */            	if(isVariableNode(appArgs[i])) {					args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion);					if(TYPE(args[i]) == T_UNSPECED) {						ioParam[i] = 'o';					} else {						ioParam[i] = 'p';						if(args[i]->nodeType==N_ERROR) {							res = (Res *)args[i];							RETURN;						}					}            	} else {            		ioParam[i] = 'i';            		args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion);					if(args[i]->nodeType==N_ERROR) {						res = (Res *)args[i];						RETURN;					}            	}                break;            case IO_TYPE_OUTPUT: /* output */                ioParam[i] = 'o';                args[i] = newUnspecifiedRes(r);                break;            case IO_TYPE_EXPRESSION: /* expression */                ioParam[i] = 'e';                args[i] = appArgs[i];                break;            case IO_TYPE_ACTIONS: /* actions */                ioParam[i] = 'a';                args[i] = appArgs[i];                break;        }    }
i=0;
i=0
i
i
0
i<n
i
i
n
n
i++
i
i
{        switch(appArgs[i]->iotype) {            case IO_TYPE_INPUT | IO_TYPE_OUTPUT: /* input/output */                ioParam[i] = 'p';                args[i] = evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion);                if(args[i]->nodeType==N_ERROR) {                    res = (Res *)args[i];                    RETURN;                }                break;            case IO_TYPE_INPUT: /* input */                ioParam[i] = 'i';                args[i] = appArgs[i];                break;            case IO_TYPE_DYNAMIC: /* dynamic */            	if(isVariableNode(appArgs[i])) {					args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion);					if(TYPE(args[i]) == T_UNSPECED) {						ioParam[i] = 'o';					} else {						ioParam[i] = 'p';						if(args[i]->nodeType==N_ERROR) {							res = (Res *)args[i];							RETURN;						}					}            	} else {            		ioParam[i] = 'i';            		args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion);					if(args[i]->nodeType==N_ERROR) {						res = (Res *)args[i];						RETURN;					}            	}                break;            case IO_TYPE_OUTPUT: /* output */                ioParam[i] = 'o';                args[i] = newUnspecifiedRes(r);                break;            case IO_TYPE_EXPRESSION: /* expression */                ioParam[i] = 'e';                args[i] = appArgs[i];                break;            case IO_TYPE_ACTIONS: /* actions */                ioParam[i] = 'a';                args[i] = appArgs[i];                break;        }    }
switch(appArgs[i]->iotype) {            case IO_TYPE_INPUT | IO_TYPE_OUTPUT: /* input/output */                ioParam[i] = 'p';                args[i] = evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion);                if(args[i]->nodeType==N_ERROR) {                    res = (Res *)args[i];                    RETURN;                }                break;            case IO_TYPE_INPUT: /* input */                ioParam[i] = 'i';                args[i] = appArgs[i];                break;            case IO_TYPE_DYNAMIC: /* dynamic */            	if(isVariableNode(appArgs[i])) {					args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion);					if(TYPE(args[i]) == T_UNSPECED) {						ioParam[i] = 'o';					} else {						ioParam[i] = 'p';						if(args[i]->nodeType==N_ERROR) {							res = (Res *)args[i];							RETURN;						}					}            	} else {            		ioParam[i] = 'i';            		args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion);					if(args[i]->nodeType==N_ERROR) {						res = (Res *)args[i];						RETURN;					}            	}                break;            case IO_TYPE_OUTPUT: /* output */                ioParam[i] = 'o';                args[i] = newUnspecifiedRes(r);                break;            case IO_TYPE_EXPRESSION: /* expression */                ioParam[i] = 'e';                args[i] = appArgs[i];                break;            case IO_TYPE_ACTIONS: /* actions */                ioParam[i] = 'a';                args[i] = appArgs[i];                break;        }
appArgs[i]->iotype
appArgs[i]
appArgs
appArgs
i
i
iotype
{            case IO_TYPE_INPUT | IO_TYPE_OUTPUT: /* input/output */                ioParam[i] = 'p';                args[i] = evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion);                if(args[i]->nodeType==N_ERROR) {                    res = (Res *)args[i];                    RETURN;                }                break;            case IO_TYPE_INPUT: /* input */                ioParam[i] = 'i';                args[i] = appArgs[i];                break;            case IO_TYPE_DYNAMIC: /* dynamic */            	if(isVariableNode(appArgs[i])) {					args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion);					if(TYPE(args[i]) == T_UNSPECED) {						ioParam[i] = 'o';					} else {						ioParam[i] = 'p';						if(args[i]->nodeType==N_ERROR) {							res = (Res *)args[i];							RETURN;						}					}            	} else {            		ioParam[i] = 'i';            		args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion);					if(args[i]->nodeType==N_ERROR) {						res = (Res *)args[i];						RETURN;					}            	}                break;            case IO_TYPE_OUTPUT: /* output */                ioParam[i] = 'o';                args[i] = newUnspecifiedRes(r);                break;            case IO_TYPE_EXPRESSION: /* expression */                ioParam[i] = 'e';                args[i] = appArgs[i];                break;            case IO_TYPE_ACTIONS: /* actions */                ioParam[i] = 'a';                args[i] = appArgs[i];                break;        }
case IO_TYPE_INPUT | IO_TYPE_OUTPUT:
IO_TYPE_INPUT | IO_TYPE_OUTPUT
IO_TYPE_INPUT
IO_TYPE_INPUT
IO_TYPE_OUTPUT
IO_TYPE_OUTPUT
ioParam[i] = 'p';
ioParam[i] = 'p'
ioParam[i]
ioParam
ioParam
i
i
'p'
args[i] = evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion);
args[i] = evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion)
args[i]
args
args
i
i
evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion)
evaluateExpression3
evaluateExpression3
appArgs[i]
appArgs
appArgs
i
i
applyAll
applyAll
0
rei
rei
reiSaveFlag
reiSaveFlag
env
env
errmsg
errmsg
newRegion
newRegion
if(args[i]->nodeType==N_ERROR) {                    res = (Res *)args[i];                    RETURN;                }
args[i]->nodeType==N_ERROR
args[i]->nodeType
args[i]
args
args
i
i
nodeType
N_ERROR
N_ERROR
{                    res = (Res *)args[i];                    RETURN;                }
res = (Res *)args[i];
res = (Res *)args[i]
res
res
(Res *)args[i]
Res *
Res
Res
*
*
args[i]
args
args
i
i
RETURN;
RETURN
RETURN
break;
case IO_TYPE_INPUT:
IO_TYPE_INPUT
IO_TYPE_INPUT
ioParam[i] = 'i';
ioParam[i] = 'i'
ioParam[i]
ioParam
ioParam
i
i
'i'
args[i] = appArgs[i];
args[i] = appArgs[i]
args[i]
args
args
i
i
appArgs[i]
appArgs
appArgs
i
i
break;
case IO_TYPE_DYNAMIC:
IO_TYPE_DYNAMIC
IO_TYPE_DYNAMIC
if(isVariableNode(appArgs[i])) {					args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion);					if(TYPE(args[i]) == T_UNSPECED) {						ioParam[i] = 'o';					} else {						ioParam[i] = 'p';						if(args[i]->nodeType==N_ERROR) {							res = (Res *)args[i];							RETURN;						}					}            	} else {            		ioParam[i] = 'i';            		args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion);					if(args[i]->nodeType==N_ERROR) {						res = (Res *)args[i];						RETURN;					}            	}
isVariableNode(appArgs[i])
isVariableNode
isVariableNode
appArgs[i]
appArgs
appArgs
i
i
{					args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion);					if(TYPE(args[i]) == T_UNSPECED) {						ioParam[i] = 'o';					} else {						ioParam[i] = 'p';						if(args[i]->nodeType==N_ERROR) {							res = (Res *)args[i];							RETURN;						}					}            	}
args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion);
args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion)
args[i]
args
args
i
i
attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion)
attemptToEvaluateVar3
attemptToEvaluateVar3
appArgs[i]->text
appArgs[i]
appArgs
appArgs
i
i
text
appArgs[i]
appArgs
appArgs
i
i
rei
rei
reiSaveFlag
reiSaveFlag
env
env
errmsg
errmsg
newRegion
newRegion
if(TYPE(args[i]) == T_UNSPECED) {						ioParam[i] = 'o';					} else {						ioParam[i] = 'p';						if(args[i]->nodeType==N_ERROR) {							res = (Res *)args[i];							RETURN;						}					}
TYPE(args[i]) == T_UNSPECED
TYPE(args[i])
TYPE
TYPE
args[i]
args
args
i
i
T_UNSPECED
T_UNSPECED
{						ioParam[i] = 'o';					}
ioParam[i] = 'o';
ioParam[i] = 'o'
ioParam[i]
ioParam
ioParam
i
i
'o'
{						ioParam[i] = 'p';						if(args[i]->nodeType==N_ERROR) {							res = (Res *)args[i];							RETURN;						}					}
ioParam[i] = 'p';
ioParam[i] = 'p'
ioParam[i]
ioParam
ioParam
i
i
'p'
if(args[i]->nodeType==N_ERROR) {							res = (Res *)args[i];							RETURN;						}
args[i]->nodeType==N_ERROR
args[i]->nodeType
args[i]
args
args
i
i
nodeType
N_ERROR
N_ERROR
{							res = (Res *)args[i];							RETURN;						}
res = (Res *)args[i];
res = (Res *)args[i]
res
res
(Res *)args[i]
Res *
Res
Res
*
*
args[i]
args
args
i
i
RETURN;
RETURN
RETURN
{            		ioParam[i] = 'i';            		args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion);					if(args[i]->nodeType==N_ERROR) {						res = (Res *)args[i];						RETURN;					}            	}
ioParam[i] = 'i';
ioParam[i] = 'i'
ioParam[i]
ioParam
ioParam
i
i
'i'
args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion);
args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion)
args[i]
args
args
i
i
evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion)
evaluateExpression3
evaluateExpression3
appArgs[i]
appArgs
appArgs
i
i
applyAll
applyAll
1
rei
rei
reiSaveFlag
reiSaveFlag
env
env
errmsg
errmsg
newRegion
newRegion
if(args[i]->nodeType==N_ERROR) {						res = (Res *)args[i];						RETURN;					}
args[i]->nodeType==N_ERROR
args[i]->nodeType
args[i]
args
args
i
i
nodeType
N_ERROR
N_ERROR
{						res = (Res *)args[i];						RETURN;					}
res = (Res *)args[i];
res = (Res *)args[i]
res
res
(Res *)args[i]
Res *
Res
Res
*
*
args[i]
args
args
i
i
RETURN;
RETURN
RETURN
break;
case IO_TYPE_OUTPUT:
IO_TYPE_OUTPUT
IO_TYPE_OUTPUT
ioParam[i] = 'o';
ioParam[i] = 'o'
ioParam[i]
ioParam
ioParam
i
i
'o'
args[i] = newUnspecifiedRes(r);
args[i] = newUnspecifiedRes(r)
args[i]
args
args
i
i
newUnspecifiedRes(r)
newUnspecifiedRes
newUnspecifiedRes
r
r
break;
case IO_TYPE_EXPRESSION:
IO_TYPE_EXPRESSION
IO_TYPE_EXPRESSION
ioParam[i] = 'e';
ioParam[i] = 'e'
ioParam[i]
ioParam
ioParam
i
i
'e'
args[i] = appArgs[i];
args[i] = appArgs[i]
args[i]
args
args
i
i
appArgs[i]
appArgs
appArgs
i
i
break;
case IO_TYPE_ACTIONS:
IO_TYPE_ACTIONS
IO_TYPE_ACTIONS
ioParam[i] = 'a';
ioParam[i] = 'a'
ioParam[i]
ioParam
ioParam
i
i
'a'
args[i] = appArgs[i];
args[i] = appArgs[i]
args[i]
args
args
i
i
appArgs[i]
appArgs
appArgs
i
i
break;
coercionType = node->subtrees[1]->coercionType;
coercionType = node->subtrees[1]->coercionType
coercionType
coercionType
node->subtrees[1]->coercionType
node->subtrees[1]
node->subtrees
node
node
subtrees
1
coercionType
if(coercionType!=NULL) {    	/*for(i=0;i<n;i++) {			 if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->exprType != NULL) {				if(unifyWith(args[i]->exprType, nodeArgs[i]->exprType, env->current, r) == NULL) {					snprintf(buf, ERR_MSG_LEN, "error: dynamically typed parameter does not have expected type.");					                    generateErrMsg(buf, nodeArgs[i]->expr, nodeArgs[i]->base, buf2);					                    addRErrorMsg(errmsg, TYPE_ERROR, buf2);					                    res = newErrorRes(r, TYPE_ERROR);					                    RETURN;				}			}		}*/        ExprType *argType = newTupleRes(n, args, r)->exprType;		if(typeFuncParam(node->subtrees[1], argType, coercionType, env->current, localTypingConstraints, errmsg, newRegion)!=0) {			res = newErrorRes(r, TYPE_ERROR);			RETURN;		}		/* solve local typing constraints */		/* typingConstraintsToString(localTypingConstraints, localTVarEnv, buf, 1024);		printf("%s\n", buf); */		Node *errnode;		if(!solveConstraints(localTypingConstraints, env->current, errmsg, &errnode, r)) {			res = newErrorRes(r, -1);			RETURN;		}		/*printVarTypeEnvToStdOut(localTVarEnv); */		/* do the input value conversion */		ExprType **coercionTypes = coercionType->subtrees;		for(i=0;i<n;i++) {			if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->coerce) {				args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion);				if(args[i]->nodeType==N_ERROR) {					res = (Res *)args[i];					RETURN;				}			}		}    }
coercionType!=NULL
coercionType
coercionType
NULL
NULL
{    	/*for(i=0;i<n;i++) {			 if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->exprType != NULL) {				if(unifyWith(args[i]->exprType, nodeArgs[i]->exprType, env->current, r) == NULL) {					snprintf(buf, ERR_MSG_LEN, "error: dynamically typed parameter does not have expected type.");					                    generateErrMsg(buf, nodeArgs[i]->expr, nodeArgs[i]->base, buf2);					                    addRErrorMsg(errmsg, TYPE_ERROR, buf2);					                    res = newErrorRes(r, TYPE_ERROR);					                    RETURN;				}			}		}*/        ExprType *argType = newTupleRes(n, args, r)->exprType;		if(typeFuncParam(node->subtrees[1], argType, coercionType, env->current, localTypingConstraints, errmsg, newRegion)!=0) {			res = newErrorRes(r, TYPE_ERROR);			RETURN;		}		/* solve local typing constraints */		/* typingConstraintsToString(localTypingConstraints, localTVarEnv, buf, 1024);		printf("%s\n", buf); */		Node *errnode;		if(!solveConstraints(localTypingConstraints, env->current, errmsg, &errnode, r)) {			res = newErrorRes(r, -1);			RETURN;		}		/*printVarTypeEnvToStdOut(localTVarEnv); */		/* do the input value conversion */		ExprType **coercionTypes = coercionType->subtrees;		for(i=0;i<n;i++) {			if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->coerce) {				args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion);				if(args[i]->nodeType==N_ERROR) {					res = (Res *)args[i];					RETURN;				}			}		}    }
ExprType *argType = newTupleRes(n, args, r)->exprType;
ExprType *argType = newTupleRes(n, args, r)->exprType;
ExprType
ExprType
*argType = newTupleRes(n, args, r)->exprType
*
argType
= newTupleRes(n, args, r)->exprType
newTupleRes(n, args, r)->exprType
newTupleRes(n, args, r)
newTupleRes
newTupleRes
n
n
args
args
r
r
exprType
if(typeFuncParam(node->subtrees[1], argType, coercionType, env->current, localTypingConstraints, errmsg, newRegion)!=0) {			res = newErrorRes(r, TYPE_ERROR);			RETURN;		}
typeFuncParam(node->subtrees[1], argType, coercionType, env->current, localTypingConstraints, errmsg, newRegion)!=0
typeFuncParam(node->subtrees[1], argType, coercionType, env->current, localTypingConstraints, errmsg, newRegion)
typeFuncParam
typeFuncParam
node->subtrees[1]
node->subtrees
node
node
subtrees
1
argType
argType
coercionType
coercionType
env->current
env
env
current
localTypingConstraints
localTypingConstraints
errmsg
errmsg
newRegion
newRegion
0
{			res = newErrorRes(r, TYPE_ERROR);			RETURN;		}
res = newErrorRes(r, TYPE_ERROR);
res = newErrorRes(r, TYPE_ERROR)
res
res
newErrorRes(r, TYPE_ERROR)
newErrorRes
newErrorRes
r
r
TYPE_ERROR
TYPE_ERROR
RETURN;
RETURN
RETURN
Node *errnode;
Node *errnode;
Node
Node
*errnode
*
errnode
if(!solveConstraints(localTypingConstraints, env->current, errmsg, &errnode, r)) {			res = newErrorRes(r, -1);			RETURN;		}
!solveConstraints(localTypingConstraints, env->current, errmsg, &errnode, r)
solveConstraints(localTypingConstraints, env->current, errmsg, &errnode, r)
solveConstraints
solveConstraints
localTypingConstraints
localTypingConstraints
env->current
env
env
current
errmsg
errmsg
&errnode
errnode
errnode
r
r
{			res = newErrorRes(r, -1);			RETURN;		}
res = newErrorRes(r, -1);
res = newErrorRes(r, -1)
res
res
newErrorRes(r, -1)
newErrorRes
newErrorRes
r
r
-1
1
RETURN;
RETURN
RETURN
ExprType **coercionTypes = coercionType->subtrees;
ExprType **coercionTypes = coercionType->subtrees;
ExprType
ExprType
**coercionTypes = coercionType->subtrees
*
*
coercionTypes
= coercionType->subtrees
coercionType->subtrees
coercionType
coercionType
subtrees
for(i=0;i<n;i++) {			if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->coerce) {				args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion);				if(args[i]->nodeType==N_ERROR) {					res = (Res *)args[i];					RETURN;				}			}		}
i=0;
i=0
i
i
0
i<n
i
i
n
n
i++
i
i
{			if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->coerce) {				args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion);				if(args[i]->nodeType==N_ERROR) {					res = (Res *)args[i];					RETURN;				}			}		}
if((ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->coerce) {				args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion);				if(args[i]->nodeType==N_ERROR) {					res = (Res *)args[i];					RETURN;				}			}
(ioParam[i] == 'i' || ioParam[i] == 'p') && nodeArgs[i]->coerce
(ioParam[i] == 'i' || ioParam[i] == 'p')
ioParam[i] == 'i' || ioParam[i] == 'p'
ioParam[i] == 'i'
ioParam[i]
ioParam
ioParam
i
i
'i'
ioParam[i] == 'p'
ioParam[i]
ioParam
ioParam
i
i
'p'
nodeArgs[i]->coerce
nodeArgs[i]
nodeArgs
nodeArgs
i
i
coerce
{				args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion);				if(args[i]->nodeType==N_ERROR) {					res = (Res *)args[i];					RETURN;				}			}
args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion);
args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion)
args[i]
args
args
i
i
processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion)
processCoercion
processCoercion
nodeArgs[i]
nodeArgs
nodeArgs
i
i
args[i]
args
args
i
i
coercionTypes[i]
coercionTypes
coercionTypes
i
i
env->current
env
env
current
errmsg
errmsg
newRegion
newRegion
if(args[i]->nodeType==N_ERROR) {					res = (Res *)args[i];					RETURN;				}
args[i]->nodeType==N_ERROR
args[i]->nodeType
args[i]
args
args
i
i
nodeType
N_ERROR
N_ERROR
{					res = (Res *)args[i];					RETURN;				}
res = (Res *)args[i];
res = (Res *)args[i]
res
res
(Res *)args[i]
Res *
Res
Res
*
*
args[i]
args
args
i
i
RETURN;
RETURN
RETURN
if(fd!=NULL) {        switch(fd->nodeType) {            case N_FD_DECONSTRUCTOR:                res = deconstruct(fn, args, n, fd->value.proj, errmsg, r);                break;            case N_FD_CONSTRUCTOR:                res = construct(fn, args, n, instantiate(node->exprType, env->current, 1, r), r);                break;            case N_FD_C_FUNC:                res = (Res *) fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion);                break;            case N_FD_EXTERNAL:            	res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);                break;            default:                printf("error!");                RETURN;        }    } else {        res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);    }
fd!=NULL
fd
fd
NULL
NULL
{        switch(fd->nodeType) {            case N_FD_DECONSTRUCTOR:                res = deconstruct(fn, args, n, fd->value.proj, errmsg, r);                break;            case N_FD_CONSTRUCTOR:                res = construct(fn, args, n, instantiate(node->exprType, env->current, 1, r), r);                break;            case N_FD_C_FUNC:                res = (Res *) fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion);                break;            case N_FD_EXTERNAL:            	res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);                break;            default:                printf("error!");                RETURN;        }    }
switch(fd->nodeType) {            case N_FD_DECONSTRUCTOR:                res = deconstruct(fn, args, n, fd->value.proj, errmsg, r);                break;            case N_FD_CONSTRUCTOR:                res = construct(fn, args, n, instantiate(node->exprType, env->current, 1, r), r);                break;            case N_FD_C_FUNC:                res = (Res *) fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion);                break;            case N_FD_EXTERNAL:            	res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);                break;            default:                printf("error!");                RETURN;        }
fd->nodeType
fd
fd
nodeType
{            case N_FD_DECONSTRUCTOR:                res = deconstruct(fn, args, n, fd->value.proj, errmsg, r);                break;            case N_FD_CONSTRUCTOR:                res = construct(fn, args, n, instantiate(node->exprType, env->current, 1, r), r);                break;            case N_FD_C_FUNC:                res = (Res *) fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion);                break;            case N_FD_EXTERNAL:            	res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);                break;            default:                printf("error!");                RETURN;        }
case N_FD_DECONSTRUCTOR:
N_FD_DECONSTRUCTOR
N_FD_DECONSTRUCTOR
res = deconstruct(fn, args, n, fd->value.proj, errmsg, r);
res = deconstruct(fn, args, n, fd->value.proj, errmsg, r)
res
res
deconstruct(fn, args, n, fd->value.proj, errmsg, r)
deconstruct
deconstruct
fn
fn
args
args
n
n
fd->value.proj
fd->value
fd
fd
value
proj
errmsg
errmsg
r
r
break;
case N_FD_CONSTRUCTOR:
N_FD_CONSTRUCTOR
N_FD_CONSTRUCTOR
res = construct(fn, args, n, instantiate(node->exprType, env->current, 1, r), r);
res = construct(fn, args, n, instantiate(node->exprType, env->current, 1, r), r)
res
res
construct(fn, args, n, instantiate(node->exprType, env->current, 1, r), r)
construct
construct
fn
fn
args
args
n
n
instantiate(node->exprType, env->current, 1, r)
instantiate
instantiate
node->exprType
node
node
exprType
env->current
env
env
current
1
r
r
r
r
break;
case N_FD_C_FUNC:
N_FD_C_FUNC
N_FD_C_FUNC
res = (Res *) fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion);
res = (Res *) fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion)
res
res
(Res *) fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion)
Res *
Res
Res
*
*
fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion)
fd->value.func
fd->value
fd
fd
value
func
args
args
n
n
node
node
rei
rei
reiSaveFlag
reiSaveFlag
env
env
errmsg
errmsg
newRegion
newRegion
break;
case N_FD_EXTERNAL:
N_FD_EXTERNAL
N_FD_EXTERNAL
res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);
res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion)
res
res
execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion)
execAction3
execAction3
fn
fn
args
args
n
n
applyAll
applyAll
node
node
nEnv
nEnv
rei
rei
reiSaveFlag
reiSaveFlag
errmsg
errmsg
newRegion
newRegion
break;
default:
printf("error!");
printf("error!")
printf
printf
"error!"
RETURN;
RETURN
RETURN
{        res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);    }
res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion);
res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion)
res
res
execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion)
execAction3
execAction3
fn
fn
args
args
n
n
applyAll
applyAll
node
node
nEnv
nEnv
rei
rei
reiSaveFlag
reiSaveFlag
errmsg
errmsg
newRegion
newRegion
if(res->nodeType==N_ERROR) {        RETURN;    }
res->nodeType==N_ERROR
res->nodeType
res
res
nodeType
N_ERROR
N_ERROR
{        RETURN;    }
RETURN;
RETURN
RETURN
for(i=0;i<n;i++) {        Res *resp = NULL;        if(ioParam[i] == 'o' || ioParam[i] == 'p') {            if(appArgs[i]->coerce) {                args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion);            }            if(args[i]->nodeType==N_ERROR) {                res = (Res *)args[i];                RETURN ;            }            resp = setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r);            /*char *buf = convertResToString(args[i]);            printEnvIndent(env);            printf("setting variable %s to %s\n", appArgs[i]->text, buf);            free(buf);*/        }        if(resp!=NULL && resp->nodeType==N_ERROR) {            res = resp;            RETURN;        }    }
i=0;
i=0
i
i
0
i<n
i
i
n
n
i++
i
i
{        Res *resp = NULL;        if(ioParam[i] == 'o' || ioParam[i] == 'p') {            if(appArgs[i]->coerce) {                args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion);            }            if(args[i]->nodeType==N_ERROR) {                res = (Res *)args[i];                RETURN ;            }            resp = setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r);            /*char *buf = convertResToString(args[i]);            printEnvIndent(env);            printf("setting variable %s to %s\n", appArgs[i]->text, buf);            free(buf);*/        }        if(resp!=NULL && resp->nodeType==N_ERROR) {            res = resp;            RETURN;        }    }
Res *resp = NULL;
Res *resp = NULL;
Res
Res
*resp = NULL
*
resp
= NULL
NULL
NULL
if(ioParam[i] == 'o' || ioParam[i] == 'p') {            if(appArgs[i]->coerce) {                args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion);            }            if(args[i]->nodeType==N_ERROR) {                res = (Res *)args[i];                RETURN ;            }            resp = setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r);            /*char *buf = convertResToString(args[i]);            printEnvIndent(env);            printf("setting variable %s to %s\n", appArgs[i]->text, buf);            free(buf);*/        }
ioParam[i] == 'o' || ioParam[i] == 'p'
ioParam[i] == 'o'
ioParam[i]
ioParam
ioParam
i
i
'o'
ioParam[i] == 'p'
ioParam[i]
ioParam
ioParam
i
i
'p'
{            if(appArgs[i]->coerce) {                args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion);            }            if(args[i]->nodeType==N_ERROR) {                res = (Res *)args[i];                RETURN ;            }            resp = setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r);            /*char *buf = convertResToString(args[i]);            printEnvIndent(env);            printf("setting variable %s to %s\n", appArgs[i]->text, buf);            free(buf);*/        }
if(appArgs[i]->coerce) {                args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion);            }
appArgs[i]->coerce
appArgs[i]
appArgs
appArgs
i
i
coerce
{                args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion);            }
args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion);
args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion)
args[i]
args
args
i
i
processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion)
processCoercion
processCoercion
nodeArgs[i]
nodeArgs
nodeArgs
i
i
args[i]
args
args
i
i
appArgs[i]->exprType
appArgs[i]
appArgs
appArgs
i
i
exprType
env->current
env
env
current
errmsg
errmsg
newRegion
newRegion
if(args[i]->nodeType==N_ERROR) {                res = (Res *)args[i];                RETURN ;            }
args[i]->nodeType==N_ERROR
args[i]->nodeType
args[i]
args
args
i
i
nodeType
N_ERROR
N_ERROR
{                res = (Res *)args[i];                RETURN ;            }
res = (Res *)args[i];
res = (Res *)args[i]
res
res
(Res *)args[i]
Res *
Res
Res
*
*
args[i]
args
args
i
i
RETURN ;
RETURN
RETURN
resp = setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r);
resp = setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r)
resp
resp
setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r)
setVariableValue
setVariableValue
appArgs[i]->text
appArgs[i]
appArgs
appArgs
i
i
text
args[i]
args
args
i
i
rei
rei
env
env
errmsg
errmsg
r
r
if(resp!=NULL && resp->nodeType==N_ERROR) {            res = resp;            RETURN;        }
resp!=NULL && resp->nodeType==N_ERROR
resp!=NULL
resp
resp
NULL
NULL
resp->nodeType==N_ERROR
resp->nodeType
resp
resp
nodeType
N_ERROR
N_ERROR
{            res = resp;            RETURN;        }
res = resp;
res = resp
res
res
resp
resp
RETURN;
RETURN
RETURN
ret:    deleteEnv(nEnv, 2);
ret
deleteEnv(nEnv, 2);
deleteEnv(nEnv, 2)
deleteEnv
deleteEnv
nEnv
nEnv
2
cpEnv(env,r);
cpEnv(env,r)
cpEnv
cpEnv
env
env
r
r
res = cpRes(res,r);
res = cpRes(res,r)
res
res
cpRes(res,r)
cpRes
cpRes
res
res
r
r
region_free(newRegion);
region_free(newRegion)
region_free
region_free
newRegion
newRegion
return res;
res
res
-----joern-----
(48,409,0)
(667,496,0)
(213,661,0)
(453,579,0)
(683,421,0)
(590,473,0)
(154,162,0)
(628,156,0)
(453,659,0)
(321,11,0)
(334,73,0)
(620,160,0)
(668,577,0)
(668,125,0)
(83,496,0)
(551,156,0)
(651,194,0)
(612,83,0)
(687,110,0)
(325,334,0)
(278,668,0)
(577,492,0)
(388,147,0)
(433,271,0)
(701,230,0)
(268,708,0)
(514,328,0)
(6,523,0)
(606,160,0)
(216,380,0)
(168,632,0)
(108,1,0)
(248,156,0)
(685,92,0)
(438,333,0)
(372,421,0)
(664,703,0)
(315,478,0)
(163,267,0)
(232,643,0)
(330,247,0)
(190,633,0)
(121,397,0)
(216,96,0)
(547,545,0)
(418,400,0)
(182,221,0)
(548,664,0)
(243,690,0)
(456,309,0)
(108,147,0)
(83,73,0)
(393,176,0)
(481,156,0)
(524,613,0)
(189,429,0)
(476,267,0)
(353,412,0)
(113,236,0)
(328,105,0)
(579,221,0)
(636,269,0)
(91,337,0)
(368,421,0)
(165,633,0)
(375,74,0)
(105,393,0)
(520,697,0)
(156,80,0)
(585,402,0)
(294,400,0)
(289,386,0)
(393,522,0)
(231,656,0)
(509,232,0)
(679,577,0)
(533,556,0)
(25,393,0)
(650,273,0)
(388,421,0)
(108,5,0)
(203,160,0)
(115,646,0)
(212,288,0)
(100,701,0)
(479,700,0)
(608,644,0)
(314,33,0)
(421,630,0)
(370,576,0)
(616,226,0)
(267,63,0)
(478,160,0)
(24,264,0)
(156,340,0)
(508,522,0)
(698,421,0)
(441,121,0)
(544,673,0)
(198,35,0)
(698,491,0)
(497,160,0)
(338,182,0)
(267,210,0)
(108,473,0)
(513,353,0)
(274,667,0)
(283,686,0)
(108,421,0)
(199,230,0)
(500,338,0)
(42,290,0)
(121,662,0)
(455,182,0)
(640,328,0)
(1,545,0)
(667,504,0)
(393,29,0)
(338,606,0)
(582,160,0)
(148,635,0)
(677,395,0)
(693,160,0)
(328,514,0)
(121,350,0)
(388,633,0)
(137,160,0)
(70,57,0)
(267,64,0)
(241,124,0)
(698,11,0)
(327,264,0)
(697,64,0)
(262,170,0)
(587,154,0)
(559,613,0)
(57,13,0)
(282,656,0)
(237,545,0)
(104,560,0)
(231,147,0)
(486,606,0)
(508,640,0)
(683,1,0)
(610,545,0)
(462,388,0)
(640,508,0)
(288,44,0)
(303,375,0)
(121,23,0)
(478,524,0)
(167,74,0)
(697,221,0)
(65,375,0)
(299,421,0)
(404,210,0)
(442,412,0)
(258,62,0)
(484,67,0)
(667,64,0)
(75,364,0)
(92,189,0)
(549,267,0)
(407,546,0)
(260,504,0)
(675,160,0)
(2,83,0)
(15,388,0)
(405,4,0)
(632,473,0)
(170,151,0)
(664,336,0)
(684,671,0)
(375,23,0)
(709,26,0)
(240,280,0)
(496,704,0)
(288,212,0)
(40,697,0)
(9,338,0)
(372,11,0)
(190,278,0)
(528,453,0)
(387,138,0)
(319,473,0)
(176,597,0)
(161,223,0)
(705,708,0)
(249,400,0)
(114,17,0)
(656,282,0)
(18,319,0)
(372,499,0)
(601,216,0)
(333,707,0)
(288,123,0)
(507,643,0)
(579,606,0)
(641,490,0)
(504,73,0)
(302,584,0)
(177,160,0)
(673,442,0)
(100,167,0)
(399,74,0)
(20,545,0)
(369,230,0)
(654,14,0)
(413,61,0)
(108,499,0)
(669,138,0)
(319,336,0)
(101,454,0)
(634,336,0)
(491,490,0)
(276,545,0)
(560,160,0)
(194,64,0)
(615,160,0)
(455,488,0)
(368,276,0)
(524,592,0)
(440,459,0)
(399,633,0)
(398,392,0)
(286,567,0)
(74,570,0)
(504,276,0)
(683,73,0)
(290,107,0)
(7,567,0)
(267,701,0)
(564,579,0)
(338,74,0)
(264,73,0)
(223,473,0)
(164,190,0)
(372,263,0)
(698,73,0)
(344,393,0)
(108,73,0)
(231,276,0)
(269,459,0)
(586,391,0)
(318,230,0)
(696,336,0)
(634,473,0)
(231,73,0)
(620,492,0)
(429,335,0)
(255,611,0)
(639,492,0)
(524,77,0)
(57,633,0)
(493,80,0)
(388,499,0)
(129,267,0)
(110,92,0)
(84,300,0)
(494,111,0)
(158,337,0)
(321,147,0)
(121,494,0)
(304,60,0)
(384,94,0)
(252,17,0)
(536,149,0)
(504,499,0)
(227,132,0)
(412,200,0)
(121,700,0)
(123,94,0)
(266,74,0)
(88,194,0)
(568,412,0)
(659,453,0)
(698,499,0)
(642,668,0)
(674,524,0)
(508,149,0)
(602,483,0)
(273,336,0)
(668,80,0)
(508,633,0)
(167,100,0)
(56,507,0)
(197,407,0)
(630,421,0)
(507,522,0)
(182,62,0)
(507,576,0)
(375,340,0)
(534,418,0)
(424,569,0)
(661,473,0)
(194,340,0)
(595,214,0)
(193,407,0)
(195,160,0)
(178,29,0)
(169,392,0)
(37,687,0)
(245,212,0)
(122,275,0)
(79,491,0)
(486,160,0)
(535,339,0)
(311,160,0)
(10,554,0)
(106,522,0)
(215,87,0)
(72,701,0)
(678,662,0)
(537,630,0)
(351,486,0)
(629,611,0)
(402,619,0)
(454,11,0)
(683,382,0)
(517,697,0)
(567,407,0)
(38,333,0)
(73,264,0)
(310,622,0)
(309,473,0)
(87,215,0)
(142,621,0)
(263,372,0)
(77,48,0)
(182,455,0)
(210,160,0)
(267,17,0)
(680,62,0)
(382,511,0)
(218,75,0)
(17,160,0)
(276,645,0)
(524,214,0)
(329,123,0)
(454,518,0)
(47,545,0)
(531,509,0)
(121,613,0)
(83,278,0)
(11,132,0)
(270,556,0)
(264,632,0)
(588,658,0)
(123,403,0)
(285,247,0)
(5,614,0)
(355,683,0)
(407,80,0)
(67,395,0)
(638,83,0)
(584,11,0)
(280,473,0)
(458,455,0)
(81,308,0)
(377,124,0)
(668,57,0)
(375,4,0)
(683,473,0)
(287,402,0)
(121,214,0)
(39,675,0)
(97,336,0)
(233,221,0)
(656,231,0)
(618,263,0)
(639,667,0)
(524,294,0)
(191,570,0)
(524,494,0)
(201,194,0)
(388,11,0)
(372,276,0)
(244,709,0)
(598,621,0)
(132,11,0)
(504,496,0)
(447,268,0)
(183,571,0)
(667,80,0)
(353,576,0)
(611,629,0)
(34,125,0)
(434,521,0)
(138,149,0)
(83,11,0)
(231,576,0)
(666,123,0)
(472,554,0)
(697,686,0)
(98,661,0)
(471,156,0)
(156,74,0)
(375,653,0)
(68,473,0)
(207,160,0)
(527,156,0)
(646,115,0)
(146,308,0)
(567,473,0)
(421,545,0)
(365,426,0)
(156,64,0)
(459,269,0)
(499,670,0)
(558,455,0)
(631,353,0)
(232,509,0)
(701,100,0)
(181,640,0)
(556,533,0)
(692,160,0)
(57,668,0)
(317,160,0)
(580,399,0)
(280,643,0)
(373,77,0)
(297,68,0)
(506,97,0)
(268,579,0)
(354,442,0)
(264,653,0)
(118,494,0)
(337,492,0)
(600,233,0)
(395,652,0)
(128,511,0)
(174,492,0)
(321,337,0)
(264,64,0)
(281,326,0)
(298,579,0)
(637,271,0)
(362,629,0)
(454,1,0)
(538,270,0)
(575,375,0)
(210,233,0)
(375,546,0)
(295,264,0)
(71,372,0)
(353,667,0)
(683,276,0)
(596,156,0)
(334,473,0)
(224,409,0)
(698,633,0)
(702,60,0)
(171,407,0)
(667,457,0)
(61,160,0)
(21,167,0)
(368,473,0)
(514,673,0)
(214,135,0)
(321,73,0)
(469,545,0)
(189,92,0)
(508,619,0)
(54,504,0)
(232,176,0)
(194,653,0)
(505,194,0)
(713,215,0)
(407,567,0)
(349,190,0)
(648,622,0)
(58,507,0)
(504,576,0)
(609,160,0)
(454,73,0)
(359,160,0)
(62,492,0)
(393,619,0)
(496,667,0)
(570,675,0)
(468,414,0)
(668,388,0)
(393,391,0)
(202,414,0)
(382,683,0)
(386,557,0)
(542,48,0)
(673,514,0)
(139,61,0)
(512,629,0)
(392,29,0)
(33,221,0)
(121,268,0)
(400,294,0)
(414,576,0)
(259,545,0)
(584,499,0)
(501,267,0)
(321,1,0)
(179,473,0)
(206,167,0)
(518,454,0)
(131,333,0)
(338,221,0)
(23,708,0)
(99,615,0)
(329,44,0)
(446,375,0)
(681,635,0)
(695,335,0)
(217,615,0)
(683,147,0)
(420,114,0)
(374,584,0)
(584,1,0)
(607,200,0)
(66,264,0)
(366,556,0)
(698,278,0)
(108,276,0)
(432,399,0)
(423,41,0)
(400,418,0)
(44,160,0)
(343,501,0)
(454,276,0)
(611,606,0)
(323,620,0)
(0,407,0)
(205,634,0)
(44,96,0)
(411,194,0)
(511,382,0)
(489,560,0)
(338,613,0)
(452,23,0)
(337,221,0)
(687,48,0)
(231,421,0)
(229,634,0)
(407,340,0)
(622,74,0)
(231,1,0)
(148,518,0)
(466,375,0)
(383,630,0)
(442,633,0)
(401,160,0)
(569,488,0)
(394,182,0)
(275,1,0)
(264,80,0)
(301,148,0)
(543,338,0)
(406,623,0)
(194,80,0)
(68,176,0)
(167,221,0)
(368,1,0)
(526,707,0)
(649,230,0)
(524,350,0)
(17,114,0)
(524,478,0)
(710,557,0)
(465,350,0)
(83,576,0)
(219,333,0)
(236,221,0)
(263,662,0)
(574,486,0)
(1,333,0)
(630,336,0)
(454,278,0)
(518,136,0)
(136,518,0)
(121,294,0)
(419,569,0)
(231,499,0)
(293,137,0)
(490,491,0)
(5,214,0)
(326,473,0)
(150,632,0)
(67,307,0)
(579,74,0)
(697,517,0)
(388,668,0)
(637,368,0)
(77,41,0)
(60,663,0)
(393,539,0)
(321,421,0)
(454,147,0)
(195,478,0)
(697,210,0)
(426,638,0)
(626,125,0)
(83,421,0)
(339,569,0)
(264,663,0)
(273,576,0)
(271,637,0)
(12,156,0)
(228,397,0)
(320,638,0)
(134,659,0)
(620,221,0)
(707,333,0)
(507,149,0)
(480,382,0)
(156,492,0)
(267,174,0)
(337,64,0)
(573,707,0)
(264,492,0)
(329,523,0)
(445,506,0)
(477,686,0)
(503,708,0)
(555,594,0)
(388,1,0)
(333,340,0)
(312,230,0)
(166,333,0)
(29,545,0)
(253,26,0)
(661,539,0)
(200,412,0)
(571,160,0)
(529,708,0)
(390,384,0)
(613,708,0)
(407,499,0)
(594,606,0)
(172,671,0)
(143,403,0)
(55,330,0)
(509,115,0)
(613,338,0)
(667,353,0)
(508,643,0)
(175,539,0)
(82,174,0)
(43,346,0)
(518,148,0)
(80,658,0)
(94,384,0)
(107,160,0)
(109,368,0)
(663,60,0)
(233,210,0)
(504,11,0)
(442,673,0)
(328,640,0)
(621,17,0)
(174,267,0)
(331,236,0)
(384,123,0)
(11,545,0)
(683,499,0)
(467,74,0)
(256,337,0)
(272,579,0)
(501,308,0)
(450,160,0)
(589,708,0)
(36,290,0)
(75,67,0)
(540,581,0)
(668,278,0)
(507,619,0)
(592,194,0)
(299,473,0)
(380,675,0)
(645,276,0)
(305,194,0)
(524,662,0)
(454,421,0)
(712,416,0)
(507,391,0)
(524,23,0)
(437,160,0)
(156,488,0)
(554,473,0)
(337,321,0)
(711,223,0)
(415,174,0)
(395,67,0)
(591,231,0)
(372,1,0)
(706,160,0)
(232,576,0)
(363,467,0)
(699,645,0)
(28,108,0)
(638,426,0)
(105,328,0)
(665,135,0)
(117,633,0)
(185,375,0)
(211,194,0)
(495,288,0)
(584,473,0)
(662,263,0)
(371,368,0)
(584,421,0)
(263,618,0)
(644,608,0)
(294,126,0)
(62,182,0)
(449,121,0)
(414,496,0)
(675,380,0)
(566,698,0)
(372,147,0)
(599,663,0)
(69,33,0)
(307,523,0)
(563,68,0)
(358,683,0)
(393,105,0)
(218,195,0)
(652,160,0)
(412,160,0)
(51,107,0)
(345,696,0)
(124,160,0)
(565,659,0)
(372,473,0)
(22,160,0)
(5,108,0)
(232,29,0)
(23,375,0)
(357,372,0)
(333,64,0)
(94,123,0)
(550,713,0)
(59,154,0)
(194,592,0)
(157,703,0)
(188,334,0)
(622,576,0)
(459,584,0)
(644,611,0)
(74,160,0)
(215,713,0)
(90,299,0)
(360,335,0)
(209,280,0)
(603,329,0)
(428,147,0)
(159,594,0)
(322,143,0)
(50,670,0)
(698,1,0)
(604,486,0)
(614,5,0)
(226,708,0)
(523,307,0)
(121,592,0)
(267,80,0)
(154,137,0)
(247,330,0)
(491,698,0)
(246,275,0)
(321,496,0)
(386,656,0)
(683,11,0)
(63,267,0)
(579,64,0)
(86,579,0)
(691,664,0)
(368,499,0)
(16,267,0)
(337,653,0)
(562,708,0)
(617,189,0)
(584,459,0)
(625,330,0)
(151,170,0)
(121,148,0)
(397,121,0)
(378,160,0)
(393,149,0)
(368,11,0)
(26,709,0)
(682,160,0)
(236,700,0)
(389,698,0)
(483,17,0)
(222,97,0)
(457,273,0)
(189,48,0)
(485,409,0)
(141,384,0)
(428,473,0)
(504,147,0)
(321,276,0)
(443,658,0)
(313,63,0)
(339,114,0)
(393,643,0)
(284,521,0)
(696,675,0)
(76,381,0)
(347,428,0)
(504,667,0)
(532,576,0)
(133,26,0)
(430,545,0)
(385,111,0)
(686,697,0)
(306,545,0)
(308,488,0)
(337,429,0)
(427,457,0)
(584,276,0)
(388,278,0)
(672,708,0)
(482,194,0)
(330,606,0)
(463,517,0)
(556,270,0)
(632,336,0)
(265,57,0)
(273,457,0)
(703,337,0)
(277,395,0)
(579,268,0)
(391,545,0)
(326,522,0)
(407,492,0)
(149,342,0)
(14,137,0)
(321,576,0)
(296,375,0)
(250,321,0)
(454,499,0)
(348,508,0)
(170,336,0)
(429,337,0)
(267,501,0)
(261,294,0)
(508,391,0)
(108,11,0)
(541,646,0)
(425,342,0)
(45,321,0)
(402,473,0)
(507,539,0)
(232,391,0)
(388,276,0)
(321,278,0)
(498,94,0)
(662,381,0)
(200,709,0)
(83,638,0)
(31,333,0)
(579,453,0)
(194,488,0)
(341,524,0)
(270,1,0)
(307,403,0)
(232,539,0)
(671,391,0)
(186,708,0)
(644,107,0)
(180,336,0)
(144,160,0)
(192,508,0)
(504,278,0)
(539,545,0)
(332,160,0)
(156,416,0)
(61,4,0)
(461,407,0)
(336,160,0)
(232,522,0)
(242,592,0)
(658,80,0)
(140,108,0)
(646,507,0)
(97,506,0)
(92,110,0)
(103,160,0)
(194,74,0)
(238,545,0)
(53,195,0)
(26,488,0)
(231,496,0)
(594,44,0)
(375,80,0)
(697,40,0)
(120,668,0)
(584,147,0)
(645,221,0)
(194,4,0)
(78,442,0)
(278,690,0)
(687,429,0)
(83,276,0)
(448,299,0)
(700,236,0)
(154,4,0)
(439,375,0)
(220,652,0)
(689,333,0)
(507,29,0)
(502,356,0)
(570,74,0)
(83,499,0)
(375,488,0)
(494,215,0)
(388,73,0)
(152,429,0)
(225,697,0)
(319,422,0)
(521,160,0)
(508,29,0)
(3,581,0)
(182,338,0)
(153,606,0)
(73,583,0)
(713,1,0)
(567,336,0)
(33,75,0)
(643,670,0)
(143,652,0)
(279,380,0)
(668,64,0)
(407,653,0)
(524,386,0)
(571,80,0)
(627,232,0)
(292,409,0)
(700,346,0)
(519,696,0)
(569,339,0)
(581,473,0)
(251,708,0)
(524,148,0)
(516,545,0)
(316,264,0)
(145,326,0)
(125,668,0)
(508,539,0)
(110,687,0)
(436,288,0)
(507,646,0)
(333,653,0)
(444,216,0)
(333,492,0)
(552,160,0)
(184,194,0)
(655,697,0)
(634,147,0)
(102,583,0)
(52,620,0)
(375,64,0)
(350,708,0)
(417,643,0)
(321,499,0)
(663,264,0)
(372,73,0)
(125,412,0)
(594,123,0)
(407,64,0)
(688,273,0)
(239,176,0)
(647,132,0)
(530,619,0)
(156,653,0)
(60,473,0)
(147,634,0)
(130,231,0)
(194,606,0)
(97,576,0)
(119,170,0)
(60,336,0)
(698,276,0)
(196,570,0)
(504,1,0)
(524,700,0)
(454,633,0)
(656,386,0)
(49,329,0)
(333,1,0)
(410,194,0)
(8,173,0)
(368,73,0)
(231,11,0)
(400,221,0)
(384,44,0)
(208,407,0)
(116,160,0)
(393,633,0)
(264,340,0)
(13,230,0)
(214,5,0)
(356,107,0)
(460,48,0)
(507,176,0)
(660,639,0)
(422,319,0)
(605,77,0)
(170,473,0)
(554,11,0)
(593,356,0)
(336,696,0)
(155,708,0)
(592,376,0)
(408,97,0)
(619,545,0)
(698,147,0)
(114,339,0)
(522,545,0)
(187,160,0)
(578,576,0)
(416,712,0)
(194,546,0)
(416,156,0)
(85,126,0)
(215,494,0)
(350,416,0)
(686,492,0)
(467,473,0)
(457,667,0)
(254,100,0)
(93,633,0)
(435,708,0)
(132,473,0)
(204,713,0)
(324,338,0)
(581,276,0)
(630,473,0)
(577,668,0)
(396,533,0)
(464,167,0)
(257,105,0)
(515,232,0)
(337,703,0)
(525,467,0)
(361,375,0)
(107,644,0)
(14,492,0)
(709,200,0)
(703,664,0)
(162,154,0)
(30,407,0)
(524,268,0)
(235,189,0)
(561,577,0)
(83,1,0)
(524,221,0)
(308,501,0)
(231,278,0)
(147,545,0)
(232,619,0)
(504,421,0)
(154,492,0)
(19,454,0)
(474,639,0)
(32,579,0)
(416,350,0)
(632,264,0)
(89,337,0)
(611,644,0)
(572,687,0)
(470,370,0)
(132,336,0)
(234,545,0)
(523,329,0)
(451,160,0)
(223,499,0)
(333,546,0)
(659,107,0)
(80,160,0)
(125,633,0)
(367,545,0)
(77,429,0)
(4,160,0)
(624,117,0)
(553,13,0)
(27,483,0)
(664,576,0)
(584,73,0)
(112,428,0)
(368,637,0)
(83,147,0)
(657,375,0)
(13,483,0)
(510,44,0)
(46,182,0)
(368,147,0)
(291,162,0)
(375,606,0)
(667,639,0)
(138,473,0)
(483,13,0)
(232,149,0)
(508,176,0)
(694,319,0)
(392,473,0)
(475,545,0)
(499,407,0)
(352,422,0)
(606,594,0)
(127,652,0)
(137,14,0)
(431,270,0)
(95,230,0)
(4,154,0)
(380,216,0)
(676,160,0)
(487,667,0)
(115,509,0)
(379,44,0)
(63,313,1)
(456,367,1)
(223,161,1)
(683,276,1)
(85,294,1)
(606,594,1)
(484,143,1)
(222,115,1)
(83,1,1)
(338,74,1)
(83,499,1)
(526,275,1)
(507,29,1)
(441,672,1)
(533,556,1)
(1,333,1)
(178,392,1)
(659,134,1)
(701,100,1)
(663,60,1)
(524,77,1)
(506,97,1)
(174,492,1)
(683,1,1)
(115,646,1)
(598,17,1)
(625,606,1)
(452,356,1)
(195,478,1)
(553,40,1)
(502,290,1)
(668,64,1)
(507,391,1)
(24,66,1)
(255,629,1)
(562,350,1)
(579,606,1)
(265,388,1)
(611,255,1)
(375,546,1)
(564,447,1)
(97,336,1)
(380,279,1)
(536,138,1)
(333,653,1)
(573,526,1)
(575,361,1)
(628,596,1)
(275,246,1)
(118,533,1)
(375,340,1)
(553,85,1)
(40,697,1)
(495,44,1)
(108,473,1)
(454,73,1)
(234,533,1)
(94,384,1)
(428,112,1)
(288,436,1)
(567,286,1)
(571,183,1)
(256,91,1)
(588,443,1)
(231,1,1)
(333,707,1)
(669,271,1)
(294,400,1)
(572,429,1)
(524,613,1)
(3,29,1)
(231,576,1)
(321,421,1)
(561,679,1)
(216,601,1)
(434,284,1)
(368,11,1)
(232,619,1)
(17,114,1)
(579,221,1)
(383,299,1)
(194,488,1)
(622,576,1)
(375,4,1)
(192,399,1)
(232,539,1)
(314,69,1)
(59,587,1)
(388,1,1)
(43,700,1)
(696,675,1)
(698,566,1)
(584,302,1)
(232,576,1)
(229,428,1)
(278,668,1)
(284,486,1)
(508,176,1)
(138,387,1)
(236,221,1)
(388,278,1)
(182,455,1)
(646,507,1)
(493,521,1)
(351,560,1)
(4,154,1)
(375,657,1)
(262,119,1)
(270,1,1)
(137,14,1)
(549,129,1)
(323,52,1)
(620,492,1)
(337,653,1)
(309,473,1)
(593,502,1)
(514,328,1)
(448,90,1)
(329,123,1)
(154,162,1)
(592,194,1)
(393,149,1)
(232,643,1)
(389,278,1)
(413,139,1)
(264,492,1)
(339,535,1)
(703,664,1)
(165,93,1)
(330,55,1)
(637,368,1)
(456,547,1)
(416,712,1)
(121,592,1)
(55,625,1)
(299,473,1)
(645,221,1)
(454,19,1)
(646,541,1)
(698,73,1)
(329,603,1)
(83,2,1)
(241,4,1)
(212,288,1)
(407,80,1)
(456,475,1)
(56,509,1)
(303,446,1)
(572,115,1)
(110,687,1)
(688,650,1)
(495,123,1)
(93,13,1)
(326,145,1)
(604,351,1)
(272,86,1)
(94,498,1)
(79,698,1)
(108,140,1)
(711,643,1)
(309,456,1)
(156,12,1)
(197,208,1)
(190,164,1)
(638,83,1)
(503,23,1)
(124,377,1)
(411,211,1)
(478,524,1)
(267,701,1)
(689,131,1)
(29,178,1)
(379,510,1)
(341,315,1)
(297,563,1)
(408,222,1)
(524,214,1)
(352,319,1)
(363,473,1)
(234,385,1)
(19,101,1)
(280,240,1)
(454,11,1)
(629,362,1)
(463,655,1)
(462,15,1)
(615,217,1)
(687,429,1)
(289,426,1)
(324,559,1)
(501,343,1)
(114,339,1)
(163,476,1)
(194,340,1)
(235,687,1)
(121,294,1)
(393,391,1)
(535,569,1)
(121,268,1)
(528,659,1)
(223,473,1)
(563,271,1)
(156,340,1)
(698,147,1)
(600,404,1)
(475,511,1)
(336,696,1)
(80,658,1)
(524,221,1)
(115,509,1)
(683,355,1)
(195,53,1)
(63,267,1)
(156,64,1)
(27,602,1)
(151,170,1)
(372,421,1)
(189,48,1)
(611,606,1)
(584,421,1)
(321,278,1)
(384,141,1)
(164,349,1)
(702,334,1)
(660,457,1)
(147,634,1)
(537,383,1)
(671,172,1)
(281,422,1)
(687,48,1)
(52,61,1)
(480,683,1)
(158,256,1)
(152,426,1)
(188,325,1)
(368,276,1)
(190,633,1)
(507,522,1)
(586,671,1)
(254,167,1)
(504,276,1)
(680,258,1)
(39,247,1)
(83,576,1)
(321,496,1)
(267,501,1)
(420,339,1)
(273,576,1)
(232,176,1)
(89,321,1)
(621,142,1)
(412,200,1)
(75,33,1)
(638,320,1)
(325,151,1)
(579,74,1)
(225,43,1)
(517,463,1)
(62,492,1)
(368,1,1)
(330,606,1)
(667,457,1)
(607,709,1)
(501,308,1)
(212,245,1)
(459,440,1)
(264,64,1)
(581,540,1)
(68,297,1)
(657,185,1)
(387,669,1)
(569,488,1)
(215,87,1)
(109,371,1)
(82,415,1)
(667,64,1)
(233,221,1)
(661,98,1)
(514,673,1)
(388,11,1)
(489,412,1)
(232,29,1)
(498,384,1)
(508,29,1)
(487,274,1)
(491,698,1)
(353,412,1)
(432,633,1)
(157,664,1)
(461,193,1)
(483,27,1)
(91,89,1)
(556,366,1)
(482,411,1)
(590,210,1)
(287,422,1)
(209,151,1)
(125,412,1)
(246,122,1)
(44,96,1)
(169,422,1)
(156,492,1)
(698,276,1)
(375,74,1)
(611,629,1)
(407,492,1)
(476,174,1)
(313,267,1)
(524,592,1)
(415,549,1)
(685,189,1)
(36,621,1)
(217,99,1)
(630,336,1)
(370,576,1)
(172,684,1)
(125,633,1)
(507,149,1)
(356,593,1)
(524,674,1)
(171,197,1)
(101,301,1)
(46,62,1)
(697,517,1)
(81,146,1)
(698,278,1)
(455,558,1)
(547,276,1)
(524,294,1)
(45,703,1)
(366,270,1)
(504,11,1)
(633,165,1)
(121,350,1)
(428,473,1)
(397,228,1)
(554,10,1)
(388,147,1)
(321,250,1)
(473,179,1)
(466,65,1)
(185,466,1)
(175,661,1)
(57,70,1)
(446,452,1)
(507,576,1)
(667,353,1)
(456,234,1)
(567,336,1)
(291,405,1)
(83,276,1)
(338,500,1)
(460,622,1)
(508,619,1)
(261,40,1)
(218,75,1)
(477,283,1)
(104,489,1)
(511,128,1)
(264,340,1)
(206,72,1)
(667,504,1)
(595,269,1)
(454,147,1)
(632,473,1)
(368,499,1)
(542,460,1)
(454,633,1)
(337,703,1)
(392,473,1)
(624,681,1)
(694,467,1)
(100,254,1)
(519,345,1)
(100,167,1)
(293,80,1)
(475,176,1)
(353,631,1)
(307,523,1)
(146,701,1)
(393,29,1)
(231,421,1)
(453,659,1)
(321,499,1)
(483,17,1)
(10,472,1)
(524,148,1)
(667,639,1)
(636,459,1)
(83,11,1)
(267,174,1)
(26,253,1)
(424,419,1)
(543,9,1)
(470,423,1)
(161,711,1)
(566,389,1)
(98,213,1)
(540,3,1)
(524,268,1)
(574,604,1)
(271,433,1)
(691,152,1)
(426,638,1)
(372,1,1)
(400,418,1)
(283,225,1)
(668,125,1)
(154,59,1)
(132,336,1)
(148,518,1)
(14,492,1)
(377,241,1)
(631,513,1)
(271,637,1)
(507,176,1)
(194,80,1)
(240,209,1)
(350,416,1)
(97,576,1)
(123,94,1)
(290,42,1)
(513,414,1)
(375,653,1)
(220,127,1)
(321,1,1)
(231,130,1)
(121,23,1)
(23,375,1)
(474,660,1)
(507,58,1)
(441,186,1)
(167,74,1)
(427,273,1)
(322,212,1)
(674,341,1)
(486,606,1)
(406,397,1)
(386,656,1)
(697,64,1)
(683,499,1)
(267,64,1)
(523,6,1)
(445,97,1)
(33,314,1)
(696,519,1)
(28,595,1)
(258,455,1)
(354,328,1)
(709,26,1)
(154,492,1)
(524,700,1)
(518,136,1)
(511,382,1)
(49,67,1)
(368,73,1)
(556,270,1)
(288,44,1)
(112,347,1)
(584,1,1)
(141,390,1)
(113,479,1)
(584,276,1)
(490,641,1)
(143,322,1)
(456,422,1)
(97,408,1)
(640,181,1)
(269,459,1)
(231,73,1)
(372,499,1)
(38,219,1)
(442,78,1)
(368,421,1)
(348,192,1)
(555,159,1)
(698,11,1)
(634,205,1)
(713,550,1)
(338,182,1)
(248,527,1)
(319,336,1)
(632,336,1)
(181,508,1)
(666,307,1)
(211,201,1)
(66,327,1)
(508,348,1)
(108,147,1)
(422,319,1)
(407,546,1)
(344,640,1)
(167,464,1)
(639,492,1)
(149,536,1)
(599,60,1)
(507,539,1)
(648,370,1)
(465,356,1)
(232,391,1)
(226,616,1)
(117,624,1)
(584,147,1)
(431,538,1)
(467,74,1)
(393,539,1)
(422,352,1)
(182,394,1)
(25,344,1)
(603,49,1)
(194,482,1)
(370,470,1)
(508,539,1)
(436,495,1)
(363,309,1)
(83,496,1)
(527,551,1)
(333,340,1)
(407,64,1)
(524,494,1)
(310,648,1)
(305,505,1)
(570,675,1)
(194,653,1)
(232,149,1)
(554,473,1)
(464,21,1)
(372,11,1)
(139,622,1)
(380,216,1)
(481,628,1)
(643,417,1)
(374,149,1)
(62,680,1)
(393,176,1)
(440,584,1)
(215,713,1)
(432,117,1)
(60,336,1)
(504,496,1)
(153,212,1)
(672,268,1)
(279,216,1)
(333,64,1)
(508,391,1)
(683,11,1)
(13,483,1)
(439,303,1)
(117,633,1)
(667,80,1)
(299,448,1)
(174,82,1)
(458,543,1)
(245,288,1)
(219,707,1)
(504,576,1)
(468,506,1)
(132,473,1)
(454,499,1)
(204,118,1)
(469,11,1)
(236,331,1)
(508,643,1)
(634,336,1)
(194,64,1)
(681,148,1)
(372,473,1)
(441,503,1)
(247,330,1)
(321,147,1)
(257,393,1)
(617,235,1)
(166,438,1)
(74,570,1)
(675,380,1)
(585,287,1)
(372,357,1)
(21,206,1)
(584,11,1)
(678,511,1)
(544,442,1)
(443,493,1)
(182,221,1)
(405,137,1)
(208,567,1)
(518,454,1)
(328,105,1)
(83,421,1)
(244,26,1)
(620,323,1)
(571,80,1)
(407,340,1)
(129,501,1)
(333,492,1)
(651,410,1)
(216,96,1)
(320,83,1)
(73,264,1)
(267,210,1)
(5,614,1)
(319,473,1)
(644,611,1)
(268,579,1)
(447,356,1)
(32,564,1)
(397,121,1)
(2,612,1)
(92,189,1)
(319,18,1)
(624,514,1)
(18,694,1)
(77,429,1)
(388,73,1)
(698,421,1)
(486,574,1)
(375,64,1)
(338,606,1)
(500,182,1)
(37,572,1)
(454,1,1)
(57,633,1)
(61,413,1)
(559,356,1)
(189,617,1)
(225,63,1)
(362,512,1)
(353,576,1)
(656,282,1)
(438,38,1)
(407,653,1)
(253,133,1)
(539,175,1)
(77,605,1)
(121,700,1)
(584,473,1)
(337,221,1)
(639,474,1)
(479,63,1)
(200,709,1)
(34,190,1)
(645,699,1)
(658,588,1)
(304,702,1)
(429,337,1)
(263,618,1)
(308,81,1)
(417,280,1)
(90,522,1)
(61,4,1)
(260,54,1)
(337,64,1)
(372,73,1)
(697,686,1)
(456,469,1)
(421,630,1)
(523,329,1)
(414,202,1)
(231,499,1)
(83,73,1)
(594,44,1)
(121,449,1)
(621,17,1)
(627,48,1)
(367,421,1)
(76,662,1)
(121,214,1)
(99,124,1)
(550,204,1)
(179,590,1)
(267,80,1)
(334,188,1)
(541,507,1)
(441,562,1)
(15,125,1)
(577,561,1)
(249,261,1)
(499,407,1)
(371,73,1)
(132,647,1)
(338,221,1)
(170,262,1)
(581,473,1)
(273,336,1)
(388,462,1)
(329,44,1)
(44,379,1)
(395,652,1)
(399,74,1)
(391,586,1)
(75,67,1)
(264,653,1)
(652,220,1)
(490,491,1)
(156,653,1)
(602,553,1)
(382,480,1)
(662,263,1)
(168,150,1)
(504,147,1)
(683,421,1)
(16,163,1)
(622,310,1)
(579,64,1)
(239,68,1)
(105,393,1)
(521,434,1)
(326,473,1)
(449,441,1)
(707,573,1)
(385,494,1)
(697,210,1)
(698,1,1)
(250,45,1)
(524,662,1)
(453,528,1)
(331,113,1)
(156,488,1)
(388,499,1)
(570,196,1)
(183,478,1)
(578,532,1)
(108,11,1)
(558,458,1)
(60,473,1)
(232,515,1)
(677,484,1)
(316,24,1)
(579,272,1)
(612,506,1)
(193,30,1)
(131,166,1)
(520,517,1)
(505,242,1)
(356,107,1)
(180,74,1)
(699,581,1)
(663,599,1)
(328,640,1)
(418,534,1)
(534,249,1)
(404,107,1)
(288,123,1)
(472,619,1)
(210,233,1)
(613,338,1)
(679,57,1)
(60,304,1)
(664,548,1)
(596,465,1)
(594,123,1)
(67,395,1)
(416,156,1)
(393,25,1)
(620,221,1)
(454,276,1)
(664,576,1)
(524,23,1)
(154,137,1)
(580,432,1)
(457,427,1)
(315,620,1)
(242,290,1)
(92,685,1)
(143,652,1)
(6,329,1)
(227,554,1)
(512,51,1)
(388,421,1)
(290,107,1)
(9,324,1)
(407,461,1)
(368,147,1)
(343,308,1)
(624,490,1)
(194,606,1)
(683,473,1)
(296,575,1)
(120,642,1)
(231,278,1)
(668,80,1)
(247,285,1)
(31,689,1)
(457,273,1)
(170,473,1)
(86,453,1)
(454,421,1)
(456,516,1)
(83,147,1)
(668,577,1)
(231,496,1)
(375,80,1)
(399,580,1)
(516,147,1)
(396,556,1)
(605,373,1)
(119,422,1)
(107,644,1)
(228,121,1)
(133,568,1)
(327,632,1)
(656,231,1)
(384,44,1)
(167,221,1)
(388,633,1)
(184,88,1)
(533,396,1)
(298,32,1)
(373,110,1)
(644,608,1)
(650,504,1)
(400,221,1)
(630,537,1)
(641,491,1)
(524,386,1)
(200,607,1)
(121,148,1)
(334,473,1)
(491,79,1)
(713,1,1)
(475,269,1)
(459,584,1)
(358,499,1)
(522,106,1)
(205,229,1)
(355,358,1)
(266,675,1)
(532,397,1)
(108,1,1)
(419,252,1)
(665,214,1)
(213,422,1)
(233,600,1)
(218,195,1)
(108,276,1)
(661,473,1)
(504,1,1)
(601,444,1)
(231,11,1)
(508,149,1)
(504,278,1)
(48,542,1)
(77,48,1)
(382,683,1)
(156,74,1)
(372,276,1)
(395,277,1)
(507,643,1)
(134,565,1)
(264,632,1)
(407,567,1)
(551,481,1)
(7,223,1)
(471,248,1)
(347,539,1)
(630,473,1)
(524,350,1)
(567,473,1)
(402,585,1)
(5,108,1)
(576,578,1)
(399,633,1)
(640,508,1)
(700,236,1)
(368,109,1)
(507,619,1)
(11,132,1)
(659,107,1)
(152,710,1)
(30,0,1)
(280,473,1)
(182,62,1)
(267,16,1)
(442,633,1)
(121,494,1)
(70,265,1)
(698,499,1)
(664,336,1)
(565,298,1)
(108,421,1)
(0,171,1)
(106,326,1)
(252,467,1)
(191,266,1)
(372,147,1)
(337,492,1)
(616,356,1)
(647,227,1)
(423,77,1)
(548,691,1)
(321,73,1)
(398,169,1)
(302,374,1)
(274,639,1)
(697,520,1)
(686,477,1)
(36,399,1)
(337,158,1)
(591,289,1)
(339,569,1)
(508,633,1)
(42,36,1)
(105,257,1)
(142,598,1)
(270,431,1)
(65,296,1)
(626,34,1)
(88,651,1)
(345,180,1)
(231,147,1)
(375,488,1)
(267,17,1)
(83,278,1)
(214,5,1)
(709,244,1)
(587,162,1)
(349,514,1)
(194,74,1)
(393,522,1)
(569,424,1)
(108,499,1)
(58,56,1)
(125,626,1)
(301,490,1)
(506,445,1)
(194,546,1)
(269,636,1)
(170,336,1)
(162,291,1)
(232,522,1)
(128,382,1)
(683,147,1)
(69,247,1)
(78,354,1)
(384,123,1)
(110,92,1)
(388,276,1)
(475,76,1)
(441,705,1)
(619,530,1)
(393,633,1)
(705,226,1)
(202,468,1)
(504,499,1)
(504,421,1)
(698,633,1)
(392,398,1)
(504,73,1)
(531,232,1)
(121,613,1)
(14,654,1)
(295,316,1)
(308,488,1)
(683,73,1)
(140,28,1)
(337,321,1)
(276,645,1)
(568,336,1)
(33,221,1)
(515,627,1)
(368,473,1)
(642,577,1)
(668,388,1)
(441,592,1)
(584,73,1)
(150,663,1)
(333,546,1)
(594,555,1)
(579,453,1)
(667,487,1)
(648,576,1)
(496,667,1)
(130,591,1)
(145,281,1)
(26,488,1)
(121,662,1)
(285,330,1)
(697,221,1)
(357,71,1)
(494,215,1)
(673,442,1)
(668,57,1)
(114,420,1)
(321,11,1)
(710,386,1)
(264,80,1)
(402,473,1)
(634,473,1)
(577,492,1)
(510,652,1)
(530,402,1)
(12,471,1)
(442,412,1)
(286,7,1)
(410,305,1)
(668,120,1)
(122,391,1)
(508,522,1)
(273,688,1)
(277,677,1)
(194,4,1)
(321,276,1)
(186,613,1)
(57,13,1)
(622,74,1)
(687,37,1)
(654,293,1)
(475,665,1)
(455,488,1)
(201,184,1)
(444,39,1)
(264,663,1)
(361,439,1)
(433,637,1)
(470,110,1)
(365,638,1)
(525,363,1)
(532,406,1)
(54,353,1)
(138,473,1)
(196,191,1)
(673,544,1)
(703,157,1)
(560,104,1)
(393,643,1)
(655,686,1)
(467,473,1)
(108,73,1)
(156,80,1)
(72,621,1)
(509,531,1)
(686,492,1)
(68,473,1)
(467,525,1)
(375,606,1)
(264,295,1)
(176,239,1)
(189,429,1)
(263,372,1)
(231,276,1)
(414,576,1)
(51,615,1)
(333,31,1)
(394,46,1)
(393,619,1)
(632,168,1)
(426,365,1)
(454,278,1)
(612,496,1)
(538,1,1)
(390,666,1)
(504,260,1)
(321,576,1)
(584,499,1)
(53,571,1)
(159,153,1)
(509,232,1)
(71,678,1)
(385,533,2)
(524,350,2)
(606,594,2)
(667,639,2)
(395,652,2)
(493,247,2)
(202,506,2)
(698,1,2)
(108,499,2)
(616,356,2)
(507,149,2)
(267,621,2)
(114,247,2)
(334,473,2)
(99,247,2)
(97,336,2)
(80,658,2)
(602,621,2)
(548,115,2)
(189,429,2)
(227,422,2)
(504,421,2)
(388,421,2)
(345,247,2)
(617,687,2)
(231,421,2)
(249,40,2)
(75,247,2)
(182,455,2)
(24,151,2)
(399,399,2)
(395,212,2)
(631,506,2)
(584,276,2)
(36,247,2)
(325,151,2)
(231,426,2)
(197,151,2)
(132,473,2)
(216,96,2)
(278,514,2)
(375,340,2)
(661,422,2)
(520,621,2)
(301,490,2)
(698,73,2)
(233,247,2)
(584,11,2)
(110,622,2)
(406,397,2)
(100,167,2)
(380,216,2)
(330,606,2)
(248,356,2)
(524,386,2)
(466,356,2)
(156,488,2)
(524,294,2)
(643,151,2)
(295,151,2)
(664,115,2)
(280,151,2)
(268,356,2)
(524,592,2)
(584,499,2)
(105,393,2)
(500,356,2)
(402,473,2)
(449,247,2)
(400,418,2)
(447,356,2)
(156,340,2)
(338,221,2)
(81,621,2)
(525,467,2)
(509,232,2)
(5,614,2)
(375,4,2)
(58,509,2)
(277,212,2)
(175,422,2)
(156,64,2)
(184,290,2)
(204,533,2)
(167,74,2)
(362,247,2)
(374,271,2)
(326,422,2)
(347,422,2)
(333,340,2)
(382,683,2)
(106,422,2)
(680,356,2)
(60,336,2)
(85,40,2)
(121,214,2)
(388,278,2)
(524,77,2)
(194,606,2)
(6,212,2)
(622,74,2)
(473,247,2)
(154,162,2)
(252,247,2)
(592,290,2)
(709,247,2)
(271,151,2)
(232,29,2)
(368,1,2)
(506,115,2)
(270,1,2)
(337,221,2)
(507,619,2)
(696,247,2)
(619,422,2)
(407,340,2)
(141,212,2)
(656,282,2)
(328,399,2)
(524,214,2)
(519,247,2)
(467,473,2)
(588,247,2)
(554,422,2)
(528,356,2)
(567,473,2)
(236,63,2)
(570,247,2)
(468,506,2)
(424,247,2)
(309,467,2)
(94,212,2)
(229,422,2)
(584,1,2)
(457,273,2)
(539,422,2)
(232,619,2)
(156,653,2)
(611,247,2)
(663,151,2)
(407,151,2)
(264,80,2)
(448,422,2)
(540,422,2)
(188,151,2)
(645,422,2)
(626,514,2)
(319,473,2)
(697,64,2)
(121,613,2)
(380,247,2)
(584,473,2)
(467,74,2)
(620,492,2)
(426,638,2)
(483,17,2)
(490,514,2)
(44,96,2)
(206,621,2)
(668,514,2)
(483,621,2)
(375,64,2)
(507,643,2)
(638,83,2)
(416,156,2)
(576,247,2)
(210,247,2)
(422,467,2)
(115,509,2)
(40,697,2)
(307,212,2)
(215,87,2)
(632,473,2)
(327,151,2)
(400,40,2)
(388,11,2)
(454,490,2)
(54,506,2)
(241,247,2)
(88,290,2)
(664,336,2)
(377,247,2)
(75,67,2)
(368,421,2)
(579,64,2)
(65,356,2)
(112,422,2)
(372,473,2)
(267,501,2)
(667,457,2)
(389,514,2)
(665,269,2)
(656,231,2)
(417,151,2)
(21,621,2)
(446,356,2)
(399,74,2)
(467,467,2)
(180,247,2)
(581,473,2)
(288,212,2)
(310,247,2)
(639,506,2)
(115,622,2)
(494,215,2)
(297,271,2)
(240,151,2)
(77,429,2)
(697,517,2)
(418,40,2)
(698,11,2)
(289,426,2)
(508,633,2)
(223,151,2)
(640,508,2)
(128,151,2)
(650,506,2)
(524,613,2)
(231,276,2)
(232,176,2)
(66,151,2)
(201,290,2)
(370,622,2)
(386,426,2)
(579,221,2)
(132,336,2)
(495,212,2)
(541,509,2)
(83,421,2)
(407,64,2)
(267,701,2)
(567,151,2)
(117,399,2)
(524,247,2)
(222,115,2)
(504,278,2)
(698,421,2)
(427,506,2)
(11,422,2)
(148,518,2)
(471,356,2)
(646,507,2)
(4,154,2)
(567,336,2)
(393,176,2)
(508,539,2)
(333,492,2)
(283,621,2)
(442,633,2)
(267,17,2)
(17,247,2)
(504,499,2)
(687,622,2)
(314,247,2)
(244,247,2)
(174,492,2)
(357,511,2)
(414,506,2)
(524,221,2)
(125,514,2)
(455,356,2)
(333,546,2)
(375,546,2)
(91,115,2)
(462,514,2)
(245,212,2)
(231,73,2)
(74,570,2)
(411,290,2)
(554,473,2)
(83,576,2)
(486,247,2)
(223,473,2)
(454,276,2)
(543,356,2)
(581,422,2)
(208,151,2)
(484,212,2)
(414,576,2)
(250,115,2)
(363,247,2)
(19,490,2)
(100,621,2)
(514,328,2)
(83,499,2)
(441,247,2)
(272,356,2)
(637,151,2)
(164,514,2)
(372,421,2)
(77,48,2)
(151,422,2)
(339,247,2)
(683,147,2)
(9,356,2)
(393,149,2)
(34,514,2)
(703,664,2)
(478,247,2)
(232,622,2)
(445,115,2)
(375,356,2)
(705,356,2)
(356,107,2)
(162,247,2)
(328,105,2)
(470,622,2)
(644,608,2)
(218,195,2)
(439,356,2)
(350,356,2)
(328,640,2)
(170,422,2)
(535,247,2)
(407,546,2)
(550,533,2)
(397,247,2)
(440,271,2)
(709,26,2)
(675,380,2)
(481,356,2)
(193,151,2)
(518,490,2)
(421,630,2)
(630,422,2)
(698,514,2)
(72,621,2)
(496,667,2)
(673,442,2)
(674,247,2)
(646,509,2)
(118,533,2)
(509,622,2)
(171,151,2)
(157,115,2)
(489,247,2)
(482,290,2)
(415,621,2)
(569,247,2)
(648,622,2)
(694,467,2)
(256,115,2)
(701,100,2)
(358,151,2)
(39,247,2)
(33,221,2)
(321,496,2)
(190,514,2)
(453,659,2)
(399,621,2)
(454,499,2)
(644,611,2)
(269,271,2)
(264,340,2)
(503,356,2)
(267,80,2)
(195,247,2)
(384,44,2)
(110,687,2)
(668,64,2)
(412,200,2)
(599,151,2)
(189,48,2)
(521,247,2)
(294,400,2)
(268,579,2)
(504,1,2)
(507,176,2)
(310,622,2)
(290,107,2)
(508,149,2)
(523,212,2)
(338,182,2)
(622,247,2)
(383,422,2)
(565,356,2)
(194,4,2)
(154,137,2)
(496,506,2)
(110,92,2)
(303,356,2)
(711,151,2)
(645,221,2)
(505,290,2)
(507,509,2)
(559,356,2)
(375,606,2)
(321,147,2)
(329,212,2)
(577,492,2)
(83,147,2)
(316,151,2)
(604,247,2)
(392,422,2)
(121,592,2)
(504,73,2)
(134,356,2)
(165,621,2)
(338,606,2)
(291,247,2)
(69,247,2)
(620,247,2)
(321,421,2)
(677,212,2)
(507,522,2)
(89,115,2)
(92,189,2)
(57,514,2)
(607,247,2)
(13,621,2)
(276,645,2)
(683,421,2)
(480,151,2)
(15,514,2)
(287,422,2)
(290,247,2)
(683,499,2)
(156,80,2)
(421,422,2)
(667,64,2)
(429,115,2)
(299,473,2)
(524,268,2)
(402,422,2)
(621,17,2)
(683,151,2)
(194,290,2)
(375,653,2)
(579,453,2)
(200,709,2)
(53,247,2)
(67,395,2)
(262,422,2)
(512,247,2)
(454,1,2)
(51,247,2)
(194,488,2)
(668,80,2)
(309,473,2)
(121,268,2)
(139,247,2)
(655,621,2)
(467,247,2)
(321,576,2)
(104,247,2)
(457,506,2)
(48,622,2)
(266,247,2)
(356,290,2)
(331,63,2)
(423,110,2)
(372,147,2)
(210,233,2)
(422,319,2)
(370,576,2)
(601,247,2)
(475,422,2)
(502,290,2)
(123,212,2)
(73,264,2)
(148,490,2)
(611,606,2)
(125,412,2)
(491,698,2)
(407,653,2)
(698,147,2)
(146,621,2)
(633,621,2)
(394,356,2)
(368,276,2)
(194,653,2)
(442,412,2)
(598,247,2)
(507,539,2)
(463,621,2)
(490,491,2)
(67,212,2)
(98,422,2)
(393,619,2)
(640,399,2)
(534,40,2)
(263,618,2)
(594,44,2)
(372,1,2)
(133,247,2)
(145,422,2)
(108,269,2)
(323,247,2)
(386,656,2)
(296,356,2)
(149,271,2)
(384,123,2)
(686,492,2)
(400,221,2)
(662,263,2)
(211,290,2)
(233,221,2)
(587,247,2)
(524,662,2)
(574,247,2)
(90,422,2)
(398,422,2)
(533,556,2)
(524,148,2)
(501,308,2)
(273,506,2)
(121,148,2)
(294,40,2)
(333,64,2)
(536,271,2)
(264,663,2)
(613,338,2)
(355,151,2)
(393,29,2)
(399,633,2)
(688,506,2)
(454,633,2)
(713,1,2)
(4,247,2)
(375,80,2)
(108,11,2)
(17,114,2)
(668,577,2)
(105,640,2)
(464,621,2)
(352,467,2)
(77,110,2)
(659,356,2)
(683,1,2)
(83,496,2)
(504,147,2)
(353,412,2)
(138,473,2)
(16,621,2)
(592,194,2)
(14,247,2)
(288,123,2)
(667,80,2)
(428,422,2)
(257,640,2)
(508,522,2)
(595,269,2)
(621,247,2)
(368,151,2)
(40,621,2)
(194,546,2)
(611,629,2)
(174,621,2)
(143,652,2)
(11,132,2)
(388,633,2)
(151,170,2)
(499,151,2)
(579,606,2)
(561,514,2)
(700,63,2)
(701,621,2)
(182,356,2)
(341,247,2)
(158,115,2)
(393,391,2)
(384,212,2)
(504,506,2)
(647,422,2)
(13,483,2)
(123,94,2)
(407,492,2)
(486,606,2)
(167,221,2)
(558,356,2)
(454,73,2)
(42,247,2)
(656,426,2)
(57,13,2)
(321,278,2)
(121,494,2)
(205,422,2)
(667,353,2)
(209,151,2)
(132,422,2)
(654,247,2)
(83,276,2)
(683,11,2)
(182,221,2)
(232,576,2)
(698,633,2)
(659,107,2)
(337,703,2)
(324,356,2)
(254,621,2)
(508,619,2)
(506,97,2)
(392,473,2)
(584,271,2)
(10,422,2)
(524,700,2)
(129,621,2)
(508,29,2)
(194,340,2)
(518,136,2)
(247,330,2)
(405,247,2)
(231,496,2)
(433,151,2)
(407,80,2)
(231,1,2)
(231,11,2)
(678,511,2)
(80,247,2)
(579,74,2)
(156,74,2)
(596,356,2)
(215,533,2)
(702,151,2)
(523,329,2)
(556,270,2)
(368,73,2)
(443,247,2)
(544,328,2)
(305,290,2)
(388,1,2)
(108,73,2)
(319,467,2)
(372,499,2)
(593,290,2)
(108,473,2)
(568,247,2)
(138,271,2)
(137,247,2)
(121,294,2)
(271,637,2)
(648,247,2)
(179,247,2)
(531,622,2)
(537,422,2)
(212,288,2)
(108,421,2)
(390,212,2)
(683,473,2)
(263,511,2)
(120,514,2)
(276,422,2)
(23,375,2)
(154,247,2)
(683,73,2)
(213,422,2)
(571,247,2)
(30,151,2)
(639,492,2)
(194,64,2)
(83,115,2)
(313,621,2)
(428,473,2)
(333,653,2)
(264,64,2)
(161,151,2)
(170,336,2)
(26,247,2)
(348,399,2)
(420,247,2)
(632,151,2)
(530,422,2)
(578,247,2)
(83,1,2)
(232,539,2)
(319,336,2)
(354,328,2)
(637,368,2)
(504,576,2)
(82,621,2)
(372,511,2)
(353,576,2)
(326,473,2)
(584,421,2)
(547,422,2)
(432,621,2)
(518,454,2)
(372,73,2)
(710,426,2)
(350,416,2)
(630,336,2)
(273,576,2)
(697,221,2)
(293,247,2)
(580,399,2)
(387,271,2)
(642,514,2)
(32,356,2)
(232,522,2)
(236,221,2)
(278,668,2)
(662,511,2)
(212,212,2)
(508,391,2)
(668,388,2)
(591,426,2)
(507,391,2)
(697,686,2)
(23,356,2)
(337,64,2)
(361,356,2)
(551,356,2)
(235,687,2)
(321,115,2)
(338,74,2)
(651,290,2)
(264,632,2)
(685,687,2)
(83,73,2)
(372,276,2)
(94,384,2)
(353,506,2)
(321,276,2)
(27,621,2)
(474,506,2)
(363,467,2)
(432,399,2)
(124,247,2)
(514,673,2)
(156,492,2)
(101,490,2)
(455,488,2)
(613,356,2)
(61,4,2)
(575,356,2)
(527,356,2)
(388,73,2)
(315,247,2)
(634,473,2)
(25,640,2)
(186,356,2)
(508,399,2)
(675,247,2)
(79,514,2)
(320,115,2)
(487,506,2)
(150,151,2)
(668,57,2)
(286,151,2)
(393,640,2)
(393,522,2)
(281,422,2)
(288,44,2)
(629,247,2)
(667,504,2)
(267,210,2)
(560,247,2)
(498,212,2)
(382,151,2)
(542,622,2)
(683,276,2)
(454,11,2)
(641,514,2)
(225,621,2)
(658,247,2)
(242,290,2)
(472,422,2)
(46,356,2)
(622,622,2)
(393,539,2)
(667,506,2)
(18,467,2)
(62,492,2)
(517,621,2)
(232,643,2)
(114,339,2)
(71,511,2)
(263,372,2)
(494,533,2)
(232,149,2)
(524,23,2)
(108,147,2)
(231,499,2)
(97,115,2)
(115,646,2)
(491,514,2)
(108,276,2)
(298,356,2)
(564,356,2)
(196,247,2)
(344,640,2)
(661,473,2)
(700,236,2)
(26,488,2)
(343,621,2)
(73,151,2)
(117,633,2)
(452,356,2)
(571,80,2)
(299,422,2)
(226,356,2)
(29,422,2)
(436,212,2)
(274,506,2)
(152,115,2)
(673,328,2)
(33,247,2)
(627,622,2)
(156,356,2)
(78,328,2)
(121,700,2)
(107,247,2)
(121,350,2)
(45,115,2)
(600,247,2)
(691,115,2)
(338,356,2)
(442,328,2)
(93,621,2)
(0,151,2)
(121,662,2)
(368,147,2)
(373,110,2)
(388,514,2)
(92,687,2)
(634,336,2)
(337,321,2)
(524,494,2)
(577,514,2)
(214,5,2)
(477,621,2)
(5,108,2)
(121,247,2)
(130,426,2)
(507,576,2)
(269,459,2)
(264,151,2)
(167,621,2)
(61,247,2)
(458,356,2)
(501,621,2)
(321,73,2)
(189,687,2)
(413,247,2)
(454,278,2)
(125,633,2)
(622,576,2)
(37,622,2)
(336,247,2)
(459,584,2)
(329,123,2)
(57,633,2)
(231,576,2)
(612,115,2)
(669,271,2)
(228,247,2)
(562,356,2)
(368,499,2)
(679,514,2)
(121,23,2)
(232,391,2)
(334,151,2)
(86,356,2)
(511,151,2)
(365,115,2)
(304,151,2)
(218,75,2)
(585,422,2)
(697,621,2)
(426,115,2)
(566,514,2)
(280,473,2)
(453,356,2)
(154,492,2)
(696,675,2)
(388,276,2)
(444,247,2)
(672,356,2)
(60,473,2)
(142,247,2)
(2,115,2)
(699,422,2)
(68,271,2)
(302,271,2)
(119,422,2)
(605,110,2)
(200,247,2)
(375,74,2)
(261,40,2)
(634,422,2)
(231,278,2)
(83,278,2)
(603,212,2)
(630,473,2)
(307,523,2)
(5,269,2)
(532,247,2)
(410,290,2)
(190,633,2)
(351,247,2)
(113,63,2)
(429,337,2)
(339,569,2)
(183,247,2)
(181,399,2)
(620,221,2)
(109,151,2)
(60,151,2)
(397,121,2)
(504,496,2)
(273,336,2)
(253,247,2)
(393,633,2)
(83,11,2)
(508,643,2)
(687,429,2)
(62,356,2)
(664,576,2)
(194,74,2)
(321,1,2)
(511,382,2)
(624,399,2)
(308,621,2)
(52,247,2)
(456,467,2)
(194,80,2)
(465,356,2)
(584,147,2)
(638,115,2)
(239,271,2)
(333,707,2)
(522,422,2)
(176,271,2)
(698,499,2)
(28,269,2)
(215,713,2)
(553,621,2)
(368,473,2)
(388,147,2)
(255,247,2)
(59,247,2)
(178,422,2)
(580,621,2)
(407,567,2)
(185,356,2)
(108,1,2)
(412,247,2)
(525,247,2)
(260,506,2)
(214,269,2)
(549,621,2)
(628,356,2)
(478,524,2)
(1,333,2)
(70,514,2)
(504,11,2)
(147,634,2)
(367,422,2)
(192,399,2)
(329,44,2)
(393,643,2)
(408,115,2)
(49,212,2)
(416,356,2)
(267,174,2)
(476,621,2)
(516,422,2)
(632,336,2)
(168,151,2)
(454,147,2)
(368,11,2)
(404,247,2)
(388,499,2)
(504,276,2)
(660,506,2)
(265,514,2)
(56,509,2)
(584,73,2)
(3,422,2)
(372,11,2)
(143,212,2)
(321,499,2)
(663,60,2)
(572,622,2)
(284,247,2)
(416,712,2)
(321,11,2)
(163,621,2)
(217,247,2)
(337,492,2)
(515,622,2)
(258,356,2)
(697,210,2)
(508,176,2)
(713,533,2)
(337,115,2)
(169,422,2)
(461,151,2)
(336,696,2)
(459,271,2)
(43,63,2)
(195,478,2)
(703,115,2)
(636,271,2)
(681,490,2)
(147,422,2)
(434,247,2)
(479,63,2)
(63,267,2)
(454,421,2)
(216,247,2)
(563,271,2)
(698,278,2)
(68,473,2)
(668,125,2)
(182,62,2)
(137,14,2)
(170,473,2)
(63,621,2)
(279,247,2)
(371,151,2)
(460,622,2)
(570,675,2)
(644,247,2)
(579,356,2)
(322,212,2)
(698,276,2)
(337,653,2)
(267,64,2)
(666,212,2)
(499,407,2)
(419,247,2)
(264,653,2)
(308,488,2)
(514,399,2)
(375,488,2)
(97,576,2)
(264,492,2)
(590,247,2)
(7,151,2)
(469,422,2)
(107,644,2)
(140,269,2)
(569,488,2)
(594,123,2)
(686,621,2)
(76,511,2)
(74,247,2)
(507,29,2)
(231,147,2)
(14,492,2)
(191,247,2)
(12,356,2)
(687,48,2)
(615,247,2)
(349,514,2)
(657,356,2)
(513,506,2)
-----------------------------------
(0,reiSaveFlag)
(1,args[i] = evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion)
(2,i)
(3,args)
(4,*nEnv = newEnv(newHashTable(100)
(5,(Res *)
(6,1)
(7,appArgs)
(8,switch(fd->nodeType)
(9,args)
(10,i)
(11,args[i] = appArgs[i])
(12,newRegion)
(13,**coercionTypes = coercionType->subtrees)
(14,globalEnv(env)
(15,args)
(16,newRegion)
(17,coercionType = node->subtrees[1]->coercionType)
(18,i)
(19,i)
(20,case IO_TYPE_EXPRESSION:)
(21,args)
(22,fn)
(23,res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion)
(24,env)
(25,i)
(26,node->subtrees)
(27,subtrees)
(28,args)
(29,ioParam[i] = \'o\')
(30,env)
(31,newRegion)
(32,args)
(33,newIntRes(r, 0)
(34,nodeArgs)
(35,)
(36,fd)
(37,NULL)
(38,0)
(39,appArgRes)
(40,!solveConstraints(localTypingConstraints, env->current, errmsg, &errnode, r)
(41,)
(42,NULL)
(43,RETURN)
(44,*appFuncRes = appRes)
(45,args)
(46,1)
(47,IO_TYPE_OUTPUT:)
(48,*resp = NULL)
(49,appFuncRes)
(50,if(args[i]->nodeType==N_ERROR)
(51,fd)
(52,env)
(53,res)
(54,args)
(55,"nop")
(56,ioParam)
(57,coercionTypes[i])
(58,i)
(59,env)
(60,appArgs[i])
(61,deleteEnv(nEnv, 2)
(62,env->current)
(63,typeFuncParam(node->subtrees[1], argType, coercionType, env->current, localTypingConstraints, errmsg, newRegion)
(64,rError_t *errmsg)
(65,rei)
(66,reiSaveFlag)
(67,subtrees0[MAX_FUNC_PARAMS - i])
(68,ioParam[i])
(69,r)
(70,i)
(71,args)
(72,argType)
(73,args[i] = attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion)
(74,n = appArgRes->degree)
(75,return newIntRes(r, 0)
(76,RETURN)
(77,res = resp)
(78,i)
(79,nodeType)
(80,*newRegion = make_region(0, NULL)
(81,subtrees)
(82,current)
(83,args[i])
(84,if((ioParam[i] == \'i\' || ioParam[i] == \'p\')
(85,RETURN)
(86,errmsg)
(87,Res *)
(88,node)
(89,rei)
(90,args)
(91,env)
(92,resp->nodeType==N_ERROR)
(93,i)
(94,appFuncRes->subtrees[0])
(95,coercionTypes)
(96,Node *appRes)
(97,appArgs[i])
(98,i)
(99,fd)
(100,newTupleRes(n, args, r)
(101,args)
(102,if(TYPE(args[i])
(103,i)
(104,NULL)
(105,ioParam[i] == \'p\')
(106,\'e\')
(107,fd = (FunctionDesc *)
(108,args[i])
(109,i)
(110,resp!=NULL && resp->nodeType==N_ERROR)
(111,)
(112,i)
(113,r)
(114,node->subtrees[1]->coercionType)
(115,ioParam[i] == \'o\' || ioParam[i] == \'p\')
(116,localTypingConstraints)
(117,i++)
(118,res)
(119,appArgs)
(120,newRegion)
(121,res->nodeType)
(122,args)
(123,appFuncRes = appFuncRes->subtrees[0])
(124,*localTypingConstraints = NULL)
(125,nodeArgs[i])
(126,)
(127,i)
(128,N_ERROR)
(129,argType)
(130,i)
(131,env)
(132,appArgs[i])
(133,node)
(134,value)
(135,)
(136,Res *)
(137,*global = globalEnv(env)
(138,ioParam[i])
(139,nEnv)
(140,i)
(141,subtrees)
(142,NULL)
(143,i++)
(144,appFuncRes)
(145,i)
(146,node)
(147,args[i] = appArgs[i])
(148,res = (Res *)
(149,ioParam[i] = \'p\')
(150,appArgs)
(151,isVariableNode(appArgs[i])
(152,resp)
(153,fn)
(154,newEnv(newHashTable(100)
(155,case N_FD_EXTERNAL:)
(156,fd->value.func(args, n, node, rei, reiSaveFlag,  env, errmsg, newRegion)
(157,text)
(158,r)
(159,appFuncRes)
(160,)
(161,i)
(162,newHashTable(100)
(163,errmsg)
(164,i)
(165,0)
(166,reiSaveFlag)
(167,newTupleRes(n, args, r)
(168,i)
(169,ioParam)
(170,appArgs[i])
(171,rei)
(172,i)
(173,)
(174,env->current)
(175,\'i\')
(176,ioParam[i] = \'o\')
(177,for(i=0;i<n;i++)
(178,\'o\')
(179,0)
(180,appArgs)
(181,\'i\')
(182,instantiate(node->exprType, env->current, 1, r)
(183,newRegion)
(184,nEnv)
(185,errmsg)
(186,break;)
(187,if(fd!=NULL)
(188,i)
(189,resp->nodeType)
(190,args[i])
(191,appArgRes)
(192,ioParam)
(193,errmsg)
(194,execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion)
(195,return res;)
(196,degree)
(197,1)
(198,switch(appArgs[i]->iotype)
(199,if(typeFuncParam(node->subtrees[1], argType, coercionType, env->current, localTypingConstraints, errmsg, newRegion)
(200,node->subtrees[1]->subtrees)
(201,rei)
(202,i)
(203,if(coercionType!=NULL)
(204,args)
(205,i)
(206,n)
(207,ioParam)
(208,applyAll)
(209,ioParam)
(210,localTypingConstraints = newList(r)
(211,reiSaveFlag)
(212,appFuncRes->nodeType == N_PARTIAL_APPLICATION)
(213,ioParam)
(214,res = (Res *)
(215,(Res *)
(216,appRes->subtrees)
(217,NULL)
(218,RET)
(219,applyAll)
(220,0)
(221,Region *r)
(222,appArgs)
(223,args[i])
(224,if(resp!=NULL && resp->nodeType==N_ERROR)
(225,localTypingConstraints)
(226,printf("error!")
(227,appArgs)
(228,N_ERROR)
(229,appArgs)
(230,)
(231,args[i])
(232,ioParam[i])
(233,newList(r)
(234,break;)
(235,resp)
(236,newErrorRes(r, TYPE_ERROR)
(237,case IO_TYPE_OUTPUT:)
(238,if(args[i]->nodeType==N_ERROR)
(239,\'o\')
(240,i)
(241,localTypingConstraints)
(242,res)
(243,if(args[i]->nodeType==N_ERROR)
(244,1)
(245,N_PARTIAL_APPLICATION)
(246,i)
(247,strcmp(fn, "nop")
(248,env)
(249,r)
(250,i)
(251,case N_FD_CONSTRUCTOR:)
(252,coercionType)
(253,subtrees)
(254,exprType)
(255,fn)
(256,errmsg)
(257,\'p\')
(258,env)
(259,case IO_TYPE_INPUT:)
(260,i)
(261,res)
(262,i)
(263,(Res *)
(264,attemptToEvaluateVar3(appArgs[i]->text, appArgs[i], rei, reiSaveFlag, env, errmsg, newRegion)
(265,coercionTypes)
(266,n)
(267,typeFuncParam(node->subtrees[1], argType, coercionType, env->current, localTypingConstraints, errmsg, newRegion)
(268,res = deconstruct(fn, args, n, fd->value.proj, errmsg, r)
(269,args[i]->nodeType==N_ERROR)
(270,args[i])
(271,TYPE(args[i])
(272,r)
(273,appArgs[i])
(274,errmsg)
(275,args[i])
(276,args[i] = newUnspecifiedRes(r)
(277,i)
(278,args[i] = processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion)
(279,1)
(280,ioParam[i])
(281,ioParam)
(282,Res *)
(283,env)
(284,"eval.log")
(285,0)
(286,i)
(287,ioParam)
(288,appFuncRes->nodeType)
(289,res)
(290,fd!=NULL)
(291,100)
(292,resp)
(293,global)
(294,res = newErrorRes(r, -1)
(295,newRegion)
(296,nEnv)
(297,i)
(298,n)
(299,args[i])
(300,)
(301,res)
(302,i)
(303,args)
(304,i)
(305,args)
(306,case IO_TYPE_ACTIONS:)
(307,subtrees0[MAX_FUNC_PARAMS - i] = appFuncRes->subtrees[1])
(308,node->subtrees)
(309,i++)
(310,n)
(311,n)
(312,errnode)
(313,0)
(314,0)
(315,res)
(316,errmsg)
(317,global)
(318,if(!solveConstraints(localTypingConstraints, env->current, errmsg, &errnode, r)
(319,appArgs[i])
(320,nodeType)
(321,args[i])
(322,i)
(323,r)
(324,fn)
(325,args)
(326,ioParam[i])
(327,rei)
(328,ioParam[i] == \'i\' || ioParam[i] == \'p\')
(329,appFuncRes->subtrees)
(330,strcmp(fn, "nop")
(331,TYPE_ERROR)
(332,nodeArgs)
(333,evaluateExpression3(appArgs[i], applyAll, 0, rei, reiSaveFlag, env, errmsg, newRegion)
(334,args[i])
(335,)
(336,** appArgs = appArgRes->subtrees)
(337,setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r)
(338,construct(fn, args, n, instantiate(node->exprType, env->current, 1, r)
(339,node->subtrees[1])
(340,int reiSaveFlag)
(341,res)
(342,)
(343,1)
(344,ioParam)
(345,appArgRes)
(346,)
(347,args)
(348,i)
(349,args)
(350,res = (Res *)
(351,buf)
(352,iotype)
(353,nodeArgs[i])
(354,nodeArgs)
(355,i)
(356,fd->nodeType)
(357,i)
(358,args)
(359,fd)
(360,if(args[i]->nodeType==N_ERROR)
(361,applyAll)
(362,extFuncDescIndex)
(363,i)
(364,)
(365,N_ERROR)
(366,nodeType)
(367,break;)
(368,args[i])
(369,argType)
(370,i++)
(371,args)
(372,args[i])
(373,res)
(374,args)
(375,execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion)
(376,)
(377,NULL)
(378,if(strcmp(fn, "nop")
(379,appRes)
(380,appRes->subtrees[1])
(381,)
(382,args[i]->nodeType)
(383,appArgs)
(384,appFuncRes->subtrees)
(385,RETURN)
(386,res = (Res *)
(387,i)
(388,args[i])
(389,args)
(390,appFuncRes)
(391,ioParam[i] = \'p\')
(392,ioParam[i])
(393,ioParam[i])
(394,r)
(395,MAX_FUNC_PARAMS - i)
(396,N_ERROR)
(397,res->nodeType==N_ERROR)
(398,i)
(399,i<n)
(400,newErrorRes(r, -1)
(401,newRegion)
(402,ioParam[i])
(403,)
(404,localTypingConstraints)
(405,nEnv)
(406,RETURN)
(407,evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion)
(408,i)
(409,)
(410,n)
(411,errmsg)
(412,** nodeArgs = node->subtrees[1]->subtrees)
(413,2)
(414,args[i])
(415,env)
(416,(Res *)
(417,\'i\')
(418,-1)
(419,node)
(420,coercionType)
(421,args[i] = appArgs[i])
(422,appArgs[i]->iotype)
(423,RETURN)
(424,subtrees)
(425,if(args[i]->nodeType==N_ERROR)
(426,args[i]->nodeType==N_ERROR)
(427,exprType)
(428,args[i])
(429,resp = setVariableValue(appArgs[i]->text, args[i],rei,env,errmsg,r)
(430,if(isVariableNode(appArgs[i])
(431,i)
(432,i)
(433,T_UNSPECED)
(434,buf)
(435,case N_FD_C_FUNC:)
(436,nodeType)
(437,buf)
(438,rei)
(439,n)
(440,nodeType)
(441,res)
(442,nodeArgs[i])
(443,0)
(444,appRes)
(445,coerce)
(446,fn)
(447,res)
(448,i)
(449,nodeType)
(450,while(appFuncRes->nodeType == N_PARTIAL_APPLICATION)
(451,if(res->nodeType==N_ERROR)
(452,res)
(453,fd->value.proj)
(454,args[i])
(455,node->exprType)
(456,i)
(457,appArgs[i]->exprType)
(458,node)
(459,args[i]->nodeType)
(460,resp)
(461,newRegion)
(462,i)
(463,errnode)
(464,r)
(465,res)
(466,reiSaveFlag)
(467,i<n)
(468,args)
(469,break;)
(470,i)
(471,errmsg)
(472,args)
(473,i=0)
(474,current)
(475,break;)
(476,localTypingConstraints)
(477,current)
(478,res = cpRes(res,r)
(479,res)
(480,nodeType)
(481,node)
(482,newRegion)
(483,coercionType->subtrees)
(484,subtrees0)
(485,if(ioParam[i] == \'o\' || ioParam[i] == \'p\')
(486,sprintf(buf, "Action: %s\\n", fn)
(487,newRegion)
(488,Node *node)
(489,coercionType)
(490,args[i]->nodeType==N_ERROR)
(491,args[i]->nodeType)
(492,Env *env)
(493,newRegion)
(494,res = (Res *)
(495,appFuncRes)
(496,args[i] = processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion)
(497,res)
(498,0)
(499,args[i] = evaluateExpression3(appArgs[i], applyAll, 1, rei, reiSaveFlag, env, errmsg, newRegion)
(500,r)
(501,node->subtrees[1])
(502,fd)
(503,break;)
(504,args[i])
(505,fn)
(506,appArgs[i]->coerce)
(507,ioParam[i])
(508,ioParam[i])
(509,ioParam[i] == \'o\')
(510,appFuncRes)
(511,args[i]->nodeType==N_ERROR)
(512,ruleEngineConfig)
(513,nodeArgs)
(514,(ioParam[i] == \'i\' || ioParam[i] == \'p\')
(515,i)
(516,break;)
(517,&errnode)
(518,(Res *)
(519,subtrees)
(520,r)
(521,writeToTmp("eval.log", buf)
(522,ioParam[i] = \'e\')
(523,appFuncRes->subtrees[1])
(524,cpRes(res,r)
(525,n)
(526,appArgs)
(527,reiSaveFlag)
(528,proj)
(529,default:)
(530,\'a\')
(531,\'o\')
(532,i)
(533,args[i]->nodeType==N_ERROR)
(534,1)
(535,1)
(536,\'p\')
(537,i)
(538,args)
(539,ioParam[i] = \'i\')
(540,i)
(541,\'p\')
(542,NULL)
(543,n)
(544,coerce)
(545,)
(546,int applyAll)
(547,break;)
(548,i)
(549,coercionType)
(550,i)
(551,rei)
(552,args)
(553,coercionTypes)
(554,args[i])
(555,text)
(556,args[i]->nodeType)
(557,)
(558,exprType)
(559,res)
(560,*coercionType = NULL)
(561,current)
(562,break;)
(563,ioParam)
(564,fn)
(565,fd)
(566,i)
(567,appArgs[i])
(568,nodeArgs)
(569,node->subtrees)
(570,appArgRes->degree)
(571,region_free(newRegion)
(572,resp)
(573,i)
(574,fn)
(575,node)
(576,i=0)
(577,env->current)
(578,0)
(579,deconstruct(fn, args, n, fd->value.proj, errmsg, r)
(580,n)
(581,args[i])
(582,subtrees0)
(583,)
(584,args[i])
(585,i)
(586,\'p\')
(587,global)
(588,NULL)
(589,case N_FD_DECONSTRUCTOR:)
(590,i)
(591,args)
(592,res = execAction3(fn, args, n, applyAll, node, nEnv, rei, reiSaveFlag, errmsg, newRegion)
(593,nodeType)
(594,appFuncRes->text)
(595,res)
(596,args)
(597,)
(598,coercionType)
(599,text)
(600,r)
(601,subtrees)
(602,coercionType)
(603,subtrees)
(604,"Action: %s\\n")
(605,resp)
(606,* fn = appFuncRes->text)
(607,subtrees)
(608,FunctionDesc *)
(609,for(i=0;i<n;i++)
(610,case IO_TYPE_DYNAMIC:)
(611,lookupFromEnv(ruleEngineConfig.extFuncDescIndex, fn)
(612,args)
(613,res = construct(fn, args, n, instantiate(node->exprType, env->current, 1, r)
(614,Res *)
(615,*fd = NULL)
(616,"error!")
(617,nodeType)
(618,Res *)
(619,ioParam[i] = \'a\')
(620,cpEnv(env,r)
(621,coercionType!=NULL)
(622,i<n)
(623,)
(624,i)
(625,fn)
(626,i)
(627,ioParam)
(628,n)
(629,ruleEngineConfig.extFuncDescIndex)
(630,appArgs[i])
(631,i)
(632,appArgs[i])
(633,i=0)
(634,appArgs[i])
(635,)
(636,N_ERROR)
(637,TYPE(args[i])
(638,args[i]->nodeType)
(639,env->current)
(640,ioParam[i] == \'i\')
(641,N_ERROR)
(642,errmsg)
(643,ioParam[i] = \'i\')
(644,(FunctionDesc *)
(645,newUnspecifiedRes(r)
(646,ioParam[i] == \'p\')
(647,i)
(648,i)
(649,for(i=0;i<n;i++)
(650,appArgs)
(651,applyAll)
(652,i = 0)
(653,ruleExecInfo_t* rei)
(654,env)
(655,errmsg)
(656,(Res *)
(657,newRegion)
(658,make_region(0, NULL)
(659,fd->value)
(660,env)
(661,ioParam[i])
(662,res = (Res *)
(663,appArgs[i]->text)
(664,appArgs[i])
(665,RETURN)
(666,appFuncRes)
(667,processCoercion(nodeArgs[i], args[i], appArgs[i]->exprType, env->current, errmsg, newRegion)
(668,processCoercion(nodeArgs[i], args[i], coercionTypes[i], env->current, errmsg, newRegion)
(669,ioParam)
(670,)
(671,ioParam[i])
(672,break;)
(673,nodeArgs[i]->coerce)
(674,r)
(675,*appArgRes = appRes->subtrees[1])
(676,ret:)
(677,MAX_FUNC_PARAMS)
(678,res)
(679,env)
(680,current)
(681,RETURN)
(682,coercionType)
(683,args[i])
(684,ioParam)
(685,N_ERROR)
(686,env->current)
(687,resp!=NULL)
(688,i)
(689,errmsg)
(690,)
(691,appArgs)
(692,appArgRes)
(693,appArgs)
(694,appArgs)
(695,if(appArgs[i]->coerce)
(696,appArgRes->subtrees)
(697,solveConstraints(localTypingConstraints, env->current, errmsg, &errnode, r)
(698,args[i])
(699,r)
(700,res = newErrorRes(r, TYPE_ERROR)
(701,*argType = newTupleRes(n, args, r)
(702,appArgs)
(703,appArgs[i]->text)
(704,)
(705,RETURN)
(706,nEnv)
(707,appArgs[i])
(708,)
(709,node->subtrees[1])
(710,RETURN)
(711,args)
(712,Res *)
(713,args[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^