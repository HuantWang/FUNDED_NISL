-----label-----
0
-----code-----
static void saa7146_set_clipping_rect(struct saa7146_dev *dev, struct saa7146_fh *fh)
{
	enum v4l2_field field = fh->ov.win.field;
	int clipcount = fh->ov.nclips;
	
	struct	saa7146_video_dma vdma2;

	u32 clip_format	= saa7146_read(dev, CLIP_FORMAT_CTRL);
	u32 arbtr_ctrl	= saa7146_read(dev, PCI_BT_V1);

	// fixme: is this used at all? SAA7146_CLIPPING_RECT_INVERTED;
	u32 type = SAA7146_CLIPPING_RECT;

	/* check clipcount, disable clipping if clipcount == 0*/
	if( clipcount == 0 ) {
		saa7146_disable_clipping(dev);
		return;
	}

	calculate_clipping_registers_rect(dev, fh, &vdma2, &clip_format, &arbtr_ctrl, field);

	/* set clipping format */
	clip_format &= 0xffff0008;
	clip_format |= (type << 4);

	/* prepare video dma2 */
	saa7146_write(dev, BASE_EVEN2,		vdma2.base_even);
	saa7146_write(dev, BASE_ODD2,		vdma2.base_odd);
	saa7146_write(dev, PROT_ADDR2,		vdma2.prot_addr);
	saa7146_write(dev, BASE_PAGE2,		vdma2.base_page);
	saa7146_write(dev, PITCH2,		vdma2.pitch);
	saa7146_write(dev, NUM_LINE_BYTE2,	vdma2.num_line_byte);
	
	/* prepare the rest */
	saa7146_write(dev, CLIP_FORMAT_CTRL,clip_format);
	saa7146_write(dev, PCI_BT_V1, arbtr_ctrl);	

	/* upload clip_control-register, clipping-registers, enable video dma2 */
	saa7146_write(dev, MC2, (MASK_05 | MASK_21 | MASK_03 | MASK_19));
	saa7146_write(dev, MC1, (MASK_05 | MASK_21));
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
18,19
19,20
19,21
20,21
22,23
22,24
24,25
25,26
25,27
26,27
26,28
27,28
27,29
28,29
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
40,42
41,42
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
55,57
57,58
58,59
58,60
58,61
59,60
61,62
63,64
65,66
66,67
66,68
67,68
69,70
69,71
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
83,85
85,86
86,87
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
95,96
95,97
96,97
98,99
101,102
102,103
102,104
102,105
102,106
102,107
102,108
102,109
103,104
105,106
107,108
109,110
110,111
112,113
113,114
115,116
116,117
118,119
120,121
121,122
121,123
122,123
125,126
126,127
126,128
127,128
129,130
130,131
130,132
131,132
134,135
135,136
135,137
135,138
135,139
136,137
138,139
140,141
142,143
142,144
143,144
146,147
147,148
147,149
147,150
147,151
148,149
150,151
152,153
154,155
154,156
155,156
158,159
159,160
159,161
159,162
159,163
160,161
162,163
164,165
166,167
166,168
167,168
170,171
171,172
171,173
171,174
171,175
172,173
174,175
176,177
178,179
178,180
179,180
182,183
183,184
183,185
183,186
183,187
184,185
186,187
188,189
190,191
190,192
191,192
194,195
195,196
195,197
195,198
195,199
196,197
198,199
200,201
202,203
202,204
203,204
206,207
207,208
207,209
207,210
207,211
208,209
210,211
212,213
214,215
216,217
217,218
217,219
217,220
217,221
218,219
220,221
222,223
224,225
226,227
227,228
227,229
227,230
227,231
228,229
230,231
232,233
234,235
235,236
235,237
236,237
236,238
237,238
237,239
238,239
240,241
242,243
244,245
246,247
247,248
247,249
247,250
247,251
248,249
250,251
252,253
254,255
255,256
255,257
256,257
258,259
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,29,30,31,32,35,37,42,43,44,48,50,54,56,60,62,64,68,70,74,76,78,82,84,87,91,92,97,99,100,104,106,108,111,114,117,119,123,124,128,132,133,137,139,141,144,145,149,151,153,156,157,161,163,165,168,169,173,175,177,180,181,185,187,189,192,193,197,199,201,204,205,209,211,213,215,219,221,223,225,229,231,233,239,241,243,245,249,251,253,257,259
-----computeFrom-----
89,90
89,91
121,122
121,123
126,127
126,128
130,131
130,132
235,236
235,237
236,237
236,238
237,238
237,239
255,256
255,257
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void saa7146_set_clipping_rect(struct saa7146_dev *dev, struct saa7146_fh *fh){	enum v4l2_field field = fh->ov.win.field;	int clipcount = fh->ov.nclips;		struct	saa7146_video_dma vdma2;	u32 clip_format	= saa7146_read(dev, CLIP_FORMAT_CTRL);	u32 arbtr_ctrl	= saa7146_read(dev, PCI_BT_V1);	// fixme: is this used at all? SAA7146_CLIPPING_RECT_INVERTED;	u32 type = SAA7146_CLIPPING_RECT;	/* check clipcount, disable clipping if clipcount == 0*/	if( clipcount == 0 ) {		saa7146_disable_clipping(dev);		return;	}	calculate_clipping_registers_rect(dev, fh, &vdma2, &clip_format, &arbtr_ctrl, field);	/* set clipping format */	clip_format &= 0xffff0008;	clip_format |= (type << 4);	/* prepare video dma2 */	saa7146_write(dev, BASE_EVEN2,		vdma2.base_even);	saa7146_write(dev, BASE_ODD2,		vdma2.base_odd);	saa7146_write(dev, PROT_ADDR2,		vdma2.prot_addr);	saa7146_write(dev, BASE_PAGE2,		vdma2.base_page);	saa7146_write(dev, PITCH2,		vdma2.pitch);	saa7146_write(dev, NUM_LINE_BYTE2,	vdma2.num_line_byte);		/* prepare the rest */	saa7146_write(dev, CLIP_FORMAT_CTRL,clip_format);	saa7146_write(dev, PCI_BT_V1, arbtr_ctrl);		/* upload clip_control-register, clipping-registers, enable video dma2 */	saa7146_write(dev, MC2, (MASK_05 | MASK_21 | MASK_03 | MASK_19));	saa7146_write(dev, MC1, (MASK_05 | MASK_21));}
static void
saa7146_set_clipping_rect(struct saa7146_dev *dev, struct saa7146_fh *fh)
saa7146_set_clipping_rect
struct saa7146_dev *dev
struct saa7146_dev
saa7146_dev
*dev
*
dev
struct saa7146_fh *fh
struct saa7146_fh
saa7146_fh
*fh
*
fh
{	enum v4l2_field field = fh->ov.win.field;	int clipcount = fh->ov.nclips;		struct	saa7146_video_dma vdma2;	u32 clip_format	= saa7146_read(dev, CLIP_FORMAT_CTRL);	u32 arbtr_ctrl	= saa7146_read(dev, PCI_BT_V1);	// fixme: is this used at all? SAA7146_CLIPPING_RECT_INVERTED;	u32 type = SAA7146_CLIPPING_RECT;	/* check clipcount, disable clipping if clipcount == 0*/	if( clipcount == 0 ) {		saa7146_disable_clipping(dev);		return;	}	calculate_clipping_registers_rect(dev, fh, &vdma2, &clip_format, &arbtr_ctrl, field);	/* set clipping format */	clip_format &= 0xffff0008;	clip_format |= (type << 4);	/* prepare video dma2 */	saa7146_write(dev, BASE_EVEN2,		vdma2.base_even);	saa7146_write(dev, BASE_ODD2,		vdma2.base_odd);	saa7146_write(dev, PROT_ADDR2,		vdma2.prot_addr);	saa7146_write(dev, BASE_PAGE2,		vdma2.base_page);	saa7146_write(dev, PITCH2,		vdma2.pitch);	saa7146_write(dev, NUM_LINE_BYTE2,	vdma2.num_line_byte);		/* prepare the rest */	saa7146_write(dev, CLIP_FORMAT_CTRL,clip_format);	saa7146_write(dev, PCI_BT_V1, arbtr_ctrl);		/* upload clip_control-register, clipping-registers, enable video dma2 */	saa7146_write(dev, MC2, (MASK_05 | MASK_21 | MASK_03 | MASK_19));	saa7146_write(dev, MC1, (MASK_05 | MASK_21));}
enum v4l2_field field = fh->ov.win.field;
enum v4l2_field field = fh->ov.win.field;
enum v4l2_field
v4l2_field
field = fh->ov.win.field
field
= fh->ov.win.field
fh->ov.win.field
fh->ov.win
fh->ov
fh
fh
ov
win
field
int clipcount = fh->ov.nclips;
int clipcount = fh->ov.nclips;
int
clipcount = fh->ov.nclips
clipcount
= fh->ov.nclips
fh->ov.nclips
fh->ov
fh
fh
ov
nclips
struct	saa7146_video_dma vdma2;
struct	saa7146_video_dma vdma2;
struct	saa7146_video_dma
saa7146_video_dma
vdma2
vdma2
u32 clip_format	= saa7146_read(dev, CLIP_FORMAT_CTRL);
u32 clip_format	= saa7146_read(dev, CLIP_FORMAT_CTRL);
u32
u32
clip_format	= saa7146_read(dev, CLIP_FORMAT_CTRL)
clip_format
= saa7146_read(dev, CLIP_FORMAT_CTRL)
saa7146_read(dev, CLIP_FORMAT_CTRL)
saa7146_read
saa7146_read
dev
dev
CLIP_FORMAT_CTRL
CLIP_FORMAT_CTRL
u32 arbtr_ctrl	= saa7146_read(dev, PCI_BT_V1);
u32 arbtr_ctrl	= saa7146_read(dev, PCI_BT_V1);
u32
u32
arbtr_ctrl	= saa7146_read(dev, PCI_BT_V1)
arbtr_ctrl
= saa7146_read(dev, PCI_BT_V1)
saa7146_read(dev, PCI_BT_V1)
saa7146_read
saa7146_read
dev
dev
PCI_BT_V1
PCI_BT_V1
u32 type = SAA7146_CLIPPING_RECT;
u32 type = SAA7146_CLIPPING_RECT;
u32
u32
type = SAA7146_CLIPPING_RECT
type
= SAA7146_CLIPPING_RECT
SAA7146_CLIPPING_RECT
SAA7146_CLIPPING_RECT
if( clipcount == 0 ) {		saa7146_disable_clipping(dev);		return;	}
clipcount == 0
clipcount
clipcount
0
{		saa7146_disable_clipping(dev);		return;	}
saa7146_disable_clipping(dev);
saa7146_disable_clipping(dev)
saa7146_disable_clipping
saa7146_disable_clipping
dev
dev
return;
calculate_clipping_registers_rect(dev, fh, &vdma2, &clip_format, &arbtr_ctrl, field);
calculate_clipping_registers_rect(dev, fh, &vdma2, &clip_format, &arbtr_ctrl, field)
calculate_clipping_registers_rect
calculate_clipping_registers_rect
dev
dev
fh
fh
&vdma2
vdma2
vdma2
&clip_format
clip_format
clip_format
&arbtr_ctrl
arbtr_ctrl
arbtr_ctrl
field
field
clip_format &= 0xffff0008;
clip_format &= 0xffff0008
clip_format
clip_format
0xffff0008
clip_format |= (type << 4);
clip_format |= (type << 4)
clip_format
clip_format
(type << 4)
type << 4
type
type
4
saa7146_write(dev, BASE_EVEN2,		vdma2.base_even);
saa7146_write(dev, BASE_EVEN2,		vdma2.base_even)
saa7146_write
saa7146_write
dev
dev
BASE_EVEN2
BASE_EVEN2
vdma2.base_even
vdma2
vdma2
base_even
saa7146_write(dev, BASE_ODD2,		vdma2.base_odd);
saa7146_write(dev, BASE_ODD2,		vdma2.base_odd)
saa7146_write
saa7146_write
dev
dev
BASE_ODD2
BASE_ODD2
vdma2.base_odd
vdma2
vdma2
base_odd
saa7146_write(dev, PROT_ADDR2,		vdma2.prot_addr);
saa7146_write(dev, PROT_ADDR2,		vdma2.prot_addr)
saa7146_write
saa7146_write
dev
dev
PROT_ADDR2
PROT_ADDR2
vdma2.prot_addr
vdma2
vdma2
prot_addr
saa7146_write(dev, BASE_PAGE2,		vdma2.base_page);
saa7146_write(dev, BASE_PAGE2,		vdma2.base_page)
saa7146_write
saa7146_write
dev
dev
BASE_PAGE2
BASE_PAGE2
vdma2.base_page
vdma2
vdma2
base_page
saa7146_write(dev, PITCH2,		vdma2.pitch);
saa7146_write(dev, PITCH2,		vdma2.pitch)
saa7146_write
saa7146_write
dev
dev
PITCH2
PITCH2
vdma2.pitch
vdma2
vdma2
pitch
saa7146_write(dev, NUM_LINE_BYTE2,	vdma2.num_line_byte);
saa7146_write(dev, NUM_LINE_BYTE2,	vdma2.num_line_byte)
saa7146_write
saa7146_write
dev
dev
NUM_LINE_BYTE2
NUM_LINE_BYTE2
vdma2.num_line_byte
vdma2
vdma2
num_line_byte
saa7146_write(dev, CLIP_FORMAT_CTRL,clip_format);
saa7146_write(dev, CLIP_FORMAT_CTRL,clip_format)
saa7146_write
saa7146_write
dev
dev
CLIP_FORMAT_CTRL
CLIP_FORMAT_CTRL
clip_format
clip_format
saa7146_write(dev, PCI_BT_V1, arbtr_ctrl);
saa7146_write(dev, PCI_BT_V1, arbtr_ctrl)
saa7146_write
saa7146_write
dev
dev
PCI_BT_V1
PCI_BT_V1
arbtr_ctrl
arbtr_ctrl
saa7146_write(dev, MC2, (MASK_05 | MASK_21 | MASK_03 | MASK_19));
saa7146_write(dev, MC2, (MASK_05 | MASK_21 | MASK_03 | MASK_19))
saa7146_write
saa7146_write
dev
dev
MC2
MC2
(MASK_05 | MASK_21 | MASK_03 | MASK_19)
MASK_05 | MASK_21 | MASK_03 | MASK_19
MASK_05 | MASK_21 | MASK_03
MASK_05 | MASK_21
MASK_05
MASK_05
MASK_21
MASK_21
MASK_03
MASK_03
MASK_19
MASK_19
saa7146_write(dev, MC1, (MASK_05 | MASK_21));
saa7146_write(dev, MC1, (MASK_05 | MASK_21))
saa7146_write
saa7146_write
dev
dev
MC1
MC1
(MASK_05 | MASK_21)
MASK_05 | MASK_21
MASK_05
MASK_05
MASK_21
MASK_21
-----joern-----
(79,23,0)
(30,28,0)
(120,6,0)
(114,15,0)
(72,78,0)
(110,81,0)
(8,42,0)
(89,65,0)
(0,15,0)
(9,0,0)
(87,41,0)
(36,4,0)
(71,38,0)
(51,4,0)
(46,67,0)
(62,12,0)
(13,101,0)
(65,4,0)
(44,15,0)
(58,65,0)
(61,99,0)
(7,11,0)
(42,83,0)
(82,4,0)
(5,4,0)
(13,15,0)
(18,112,0)
(78,81,0)
(109,7,0)
(101,13,0)
(13,4,0)
(78,15,0)
(105,27,0)
(75,12,0)
(42,89,0)
(37,91,0)
(53,4,0)
(12,4,0)
(83,107,0)
(71,107,0)
(43,28,0)
(42,4,0)
(84,114,0)
(33,4,0)
(78,4,0)
(26,5,0)
(10,110,0)
(42,15,0)
(53,15,0)
(93,38,0)
(59,28,0)
(40,4,0)
(86,61,0)
(107,83,0)
(118,12,0)
(11,7,0)
(34,51,0)
(74,23,0)
(56,2,0)
(45,43,0)
(108,67,0)
(27,15,0)
(113,44,0)
(55,74,0)
(80,6,0)
(100,124,0)
(89,42,0)
(60,7,0)
(117,4,0)
(66,44,0)
(14,110,0)
(38,71,0)
(57,11,0)
(2,0,0)
(53,67,0)
(107,71,0)
(0,2,0)
(50,107,0)
(42,90,0)
(67,53,0)
(28,30,0)
(74,15,0)
(38,90,0)
(28,43,0)
(30,6,0)
(96,124,0)
(64,112,0)
(39,13,0)
(5,112,0)
(111,105,0)
(88,90,0)
(41,44,0)
(98,42,0)
(81,65,0)
(103,71,0)
(11,4,0)
(8,23,0)
(92,51,0)
(81,110,0)
(12,23,0)
(122,31,0)
(123,2,0)
(54,116,0)
(77,88,0)
(51,65,0)
(68,0,0)
(3,81,0)
(52,89,0)
(106,27,0)
(88,31,0)
(116,31,0)
(24,53,0)
(49,41,0)
(42,8,0)
(48,30,0)
(32,5,0)
(11,15,0)
(102,43,0)
(0,4,0)
(76,99,0)
(97,54,0)
(61,15,0)
(70,83,0)
(21,4,0)
(25,11,0)
(20,78,0)
(12,15,0)
(19,8,0)
(119,101,0)
(73,13,0)
(27,4,0)
(81,4,0)
(22,42,0)
(63,105,0)
(91,42,0)
(6,15,0)
(112,5,0)
(35,74,0)
(47,78,0)
(104,53,0)
(44,41,0)
(5,15,0)
(44,4,0)
(121,114,0)
(17,54,0)
(29,101,0)
(85,42,0)
(42,91,0)
(31,88,0)
(65,114,0)
(27,105,0)
(31,116,0)
(114,65,0)
(6,30,0)
(95,116,0)
(16,88,0)
(115,38,0)
(110,124,0)
(116,4,0)
(1,76,0)
(23,4,0)
(83,4,0)
(124,4,0)
(6,4,0)
(69,4,0)
(94,27,0)
(23,74,0)
(42,89,1)
(42,15,1)
(17,97,1)
(23,74,1)
(20,47,1)
(42,90,1)
(16,77,1)
(19,89,1)
(121,58,1)
(107,71,1)
(1,27,1)
(71,103,1)
(92,42,1)
(110,124,1)
(74,55,1)
(60,57,1)
(24,104,1)
(34,92,1)
(68,13,1)
(9,68,1)
(79,65,1)
(14,3,1)
(49,66,1)
(105,63,1)
(22,54,1)
(114,84,1)
(13,101,1)
(58,116,1)
(51,34,1)
(57,25,1)
(98,22,1)
(45,59,1)
(96,23,1)
(13,15,1)
(0,2,1)
(115,70,1)
(3,51,1)
(83,107,1)
(7,109,1)
(61,15,1)
(85,8,1)
(29,73,1)
(8,23,1)
(72,44,1)
(27,15,1)
(55,35,1)
(62,78,1)
(88,16,1)
(5,15,1)
(12,15,1)
(88,90,1)
(118,75,1)
(47,72,1)
(54,17,1)
(0,15,1)
(26,32,1)
(25,81,1)
(53,15,1)
(35,79,1)
(112,64,1)
(11,15,1)
(39,5,1)
(110,10,1)
(100,96,1)
(8,19,1)
(27,105,1)
(46,108,1)
(113,0,1)
(1,76,1)
(86,54,1)
(44,15,1)
(75,62,1)
(109,60,1)
(111,106,1)
(97,124,1)
(108,24,1)
(32,53,1)
(64,18,1)
(52,91,1)
(74,15,1)
(123,56,1)
(50,71,1)
(87,49,1)
(2,123,1)
(12,23,1)
(104,11,1)
(81,110,1)
(6,30,1)
(5,112,1)
(78,20,1)
(93,115,1)
(11,7,1)
(122,88,1)
(103,38,1)
(48,80,1)
(66,113,1)
(53,67,1)
(6,15,1)
(43,102,1)
(59,48,1)
(114,15,1)
(54,116,1)
(12,118,1)
(44,41,1)
(124,100,1)
(77,95,1)
(106,94,1)
(101,119,1)
(95,83,1)
(84,121,1)
(38,90,1)
(119,29,1)
(38,93,1)
(120,12,1)
(10,14,1)
(89,65,1)
(31,122,1)
(67,46,1)
(31,88,1)
(81,65,1)
(116,31,1)
(80,120,1)
(89,52,1)
(78,81,1)
(71,38,1)
(28,43,1)
(30,28,1)
(63,111,1)
(61,86,1)
(73,39,1)
(76,61,1)
(42,91,1)
(41,87,1)
(65,114,1)
(91,37,1)
(102,45,1)
(56,9,1)
(37,98,1)
(94,6,1)
(107,50,1)
(51,65,1)
(42,85,1)
(42,83,1)
(42,8,1)
(78,15,1)
(18,26,1)
(25,54,2)
(106,54,2)
(20,54,2)
(64,54,2)
(32,54,2)
(8,54,2)
(14,54,2)
(8,23,2)
(28,43,2)
(13,15,2)
(60,54,2)
(71,38,2)
(31,88,2)
(27,54,2)
(109,54,2)
(2,54,2)
(75,54,2)
(37,54,2)
(44,54,2)
(91,54,2)
(12,54,2)
(101,54,2)
(42,91,2)
(0,2,2)
(5,54,2)
(112,54,2)
(6,15,2)
(0,54,2)
(113,54,2)
(53,15,2)
(104,54,2)
(107,71,2)
(89,54,2)
(53,54,2)
(65,114,2)
(13,54,2)
(5,112,2)
(0,15,2)
(52,54,2)
(19,54,2)
(13,101,2)
(49,54,2)
(59,54,2)
(6,30,2)
(38,90,2)
(54,116,2)
(61,54,2)
(11,54,2)
(63,54,2)
(86,54,2)
(92,54,2)
(44,15,2)
(78,54,2)
(120,54,2)
(42,83,2)
(10,54,2)
(42,54,2)
(51,54,2)
(42,15,2)
(110,54,2)
(30,54,2)
(5,15,2)
(116,31,2)
(123,54,2)
(41,54,2)
(56,54,2)
(22,54,2)
(68,54,2)
(78,81,2)
(119,54,2)
(72,54,2)
(43,54,2)
(29,54,2)
(81,54,2)
(87,54,2)
(78,15,2)
(67,54,2)
(44,41,2)
(42,90,2)
(88,90,2)
(39,54,2)
(110,124,2)
(27,15,2)
(23,74,2)
(105,54,2)
(46,54,2)
(26,54,2)
(27,105,2)
(108,54,2)
(48,54,2)
(34,54,2)
(118,54,2)
(94,54,2)
(81,65,2)
(18,54,2)
(51,65,2)
(111,54,2)
(85,54,2)
(62,54,2)
(1,76,2)
(9,54,2)
(42,8,2)
(83,107,2)
(45,54,2)
(53,67,2)
(42,89,2)
(80,54,2)
(12,23,2)
(3,54,2)
(89,65,2)
(74,15,2)
(66,54,2)
(12,15,2)
(28,54,2)
(61,15,2)
(6,54,2)
(73,54,2)
(11,7,2)
(30,28,2)
(7,54,2)
(76,54,2)
(24,54,2)
(102,54,2)
(57,54,2)
(114,15,2)
(81,110,2)
(11,15,2)
(47,54,2)
(98,54,2)
-----------------------------------
(0,saa7146_write(dev, PITCH2,\\t\\tvdma2.pitch)
(1,RET)
(2,vdma2.pitch)
(3,clip_format)
(4,)
(5,saa7146_write(dev, PROT_ADDR2,\\t\\tvdma2.prot_addr)
(6,saa7146_write(dev, MC2, (MASK_05 | MASK_21 | MASK_03 | MASK_19)
(7,vdma2.base_even)
(8,&arbtr_ctrl)
(9,PITCH2)
(10,4)
(11,saa7146_write(dev, BASE_EVEN2,\\t\\tvdma2.base_even)
(12,saa7146_write(dev, PCI_BT_V1, arbtr_ctrl)
(13,saa7146_write(dev, BASE_PAGE2,\\t\\tvdma2.base_page)
(14,type)
(15,struct saa7146_dev *dev)
(16,ov)
(17,0)
(18,vdma2)
(19,arbtr_ctrl)
(20,clip_format)
(21,type)
(22,dev)
(23,arbtr_ctrl\\t= saa7146_read(dev, PCI_BT_V1)
(24,BASE_ODD2)
(25,dev)
(26,PROT_ADDR2)
(27,saa7146_write(dev, MC1, (MASK_05 | MASK_21)
(28,MASK_21 | MASK_03 | MASK_19)
(29,vdma2)
(30,MASK_05 | MASK_21 | MASK_03 | MASK_19)
(31,fh->ov.nclips)
(32,dev)
(33,if( clipcount == 0 )
(34,0xffff0008)
(35,dev)
(36,clip_format)
(37,vdma2)
(38,fh->ov)
(39,dev)
(40,clipcount)
(41,vdma2.num_line_byte)
(42,calculate_clipping_registers_rect(dev, fh, &vdma2, &clip_format, &arbtr_ctrl, field)
(43,MASK_03 | MASK_19)
(44,saa7146_write(dev, NUM_LINE_BYTE2,\\tvdma2.num_line_byte)
(45,MASK_03)
(46,base_odd)
(47,CLIP_FORMAT_CTRL)
(48,MASK_05)
(49,vdma2)
(50,field)
(51,clip_format &= 0xffff0008)
(52,clip_format)
(53,saa7146_write(dev, BASE_ODD2,\\t\\tvdma2.base_odd)
(54,clipcount == 0)
(55,PCI_BT_V1)
(56,vdma2)
(57,BASE_EVEN2)
(58,clip_format)
(59,MASK_21)
(60,vdma2)
(61,saa7146_disable_clipping(dev)
(62,dev)
(63,MASK_21)
(64,prot_addr)
(65,clip_format\\t= saa7146_read(dev, CLIP_FORMAT_CTRL)
(66,NUM_LINE_BYTE2)
(67,vdma2.base_odd)
(68,dev)
(69,arbtr_ctrl)
(70,field)
(71,fh->ov.win)
(72,dev)
(73,BASE_PAGE2)
(74,saa7146_read(dev, PCI_BT_V1)
(75,PCI_BT_V1)
(76,return;)
(77,fh)
(78,saa7146_write(dev, CLIP_FORMAT_CTRL,clip_format)
(79,arbtr_ctrl)
(80,MC2)
(81,clip_format |= (type << 4)
(82,field)
(83,field = fh->ov.win.field)
(84,CLIP_FORMAT_CTRL)
(85,field)
(86,dev)
(87,num_line_byte)
(88,fh->ov)
(89,&clip_format)
(90,struct saa7146_fh *fh)
(91,&vdma2)
(92,clip_format)
(93,ov)
(94,dev)
(95,clipcount)
(96,type)
(97,clipcount)
(98,fh)
(99,)
(100,SAA7146_CLIPPING_RECT)
(101,vdma2.base_page)
(102,MASK_19)
(103,win)
(104,dev)
(105,MASK_05 | MASK_21)
(106,MC1)
(107,fh->ov.win.field)
(108,vdma2)
(109,base_even)
(110,type << 4)
(111,MASK_05)
(112,vdma2.prot_addr)
(113,dev)
(114,saa7146_read(dev, CLIP_FORMAT_CTRL)
(115,fh)
(116,clipcount = fh->ov.nclips)
(117,vdma2)
(118,arbtr_ctrl)
(119,base_page)
(120,dev)
(121,dev)
(122,nclips)
(123,pitch)
(124,type = SAA7146_CLIPPING_RECT)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^