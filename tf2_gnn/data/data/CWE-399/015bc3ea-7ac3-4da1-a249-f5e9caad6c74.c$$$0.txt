-----label-----
1
-----code-----
static int acpi_ac_add(struct acpi_device *device)
{
	int result = 0;
	struct acpi_ac *ac = NULL;


	if (!device)
		return -EINVAL;

	ac = kzalloc(sizeof(struct acpi_ac), GFP_KERNEL);
	if (!ac)
		return -ENOMEM;

	ac->device = device;
	strcpy(acpi_device_name(device), ACPI_AC_DEVICE_NAME);
	strcpy(acpi_device_class(device), ACPI_AC_CLASS);
	device->driver_data = ac;

	result = acpi_ac_get_state(ac);
	if (result)
		goto end;

#ifdef CONFIG_ACPI_PROCFS_POWER
	result = acpi_ac_add_fs(device);
#endif
	if (result)
		goto end;
	ac->charger.name = acpi_device_bid(device);
	ac->charger.type = POWER_SUPPLY_TYPE_MAINS;
	ac->charger.properties = ac_props;
	ac->charger.num_properties = ARRAY_SIZE(ac_props);
	ac->charger.get_property = get_ac_property;
	result = power_supply_register(&ac->device->dev, &ac->charger);
	if (result)
		goto end;

	printk(KERN_INFO PREFIX "%s [%s] (%s)\n",
	       acpi_device_name(device), acpi_device_bid(device),
	       ac->state ? "on-line" : "off-line");

      end:
	if (result) {
#ifdef CONFIG_ACPI_PROCFS_POWER
		acpi_ac_remove_fs(device);
#endif
		kfree(ac);
	}

	return result;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
29,30
29,31
30,31
31,32
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
41,44
42,43
44,45
45,46
45,47
46,47
49,50
51,52
51,53
52,53
53,54
55,56
56,57
57,58
59,60
60,61
60,62
61,62
61,63
62,63
65,66
67,68
68,69
68,70
68,71
69,70
71,72
71,73
72,73
74,75
76,77
78,79
79,80
79,81
79,82
80,81
82,83
82,84
83,84
85,86
87,88
89,90
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
98,100
99,100
101,102
101,103
102,103
104,105
106,107
106,108
107,108
109,110
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
118,120
119,120
119,121
120,121
124,125
124,126
125,126
127,128
129,130
130,131
130,132
131,132
131,133
132,133
132,134
133,134
137,138
139,140
140,141
140,142
141,142
141,143
142,143
142,144
143,144
147,148
149,150
150,151
150,152
151,152
151,153
152,153
152,154
153,154
157,158
157,159
158,159
160,161
162,163
163,164
163,165
164,165
164,166
165,166
165,167
166,167
170,171
172,173
173,174
173,175
174,175
176,177
176,178
176,179
177,178
179,180
180,181
180,182
181,182
181,183
182,183
186,187
187,188
187,189
188,189
191,192
191,193
192,193
194,195
196,197
197,198
197,199
199,200
199,201
200,201
202,203
203,204
204,205
204,206
205,206
207,208
209,210
210,211
-----nextToken-----
2,4,7,9,10,14,16,18,22,24,25,28,32,36,40,43,47,48,50,54,58,63,64,66,70,73,75,77,81,84,86,88,93,94,96,100,103,105,108,110,113,115,121,122,123,126,128,134,135,136,138,144,145,146,148,154,155,156,159,161,167,168,169,171,175,178,183,184,185,189,190,193,195,198,201,206,208,211
-----computeFrom-----
38,39
38,40
60,61
60,62
90,91
90,92
98,99
98,100
117,118
117,119
130,131
130,132
140,141
140,142
150,151
150,152
163,164
163,165
173,174
173,175
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ProblemStatement;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int acpi_ac_add(struct acpi_device *device){	int result = 0;	struct acpi_ac *ac = NULL;	if (!device)		return -EINVAL;	ac = kzalloc(sizeof(struct acpi_ac), GFP_KERNEL);	if (!ac)		return -ENOMEM;	ac->device = device;	strcpy(acpi_device_name(device), ACPI_AC_DEVICE_NAME);	strcpy(acpi_device_class(device), ACPI_AC_CLASS);	device->driver_data = ac;	result = acpi_ac_get_state(ac);	if (result)		goto end;#ifdef CONFIG_ACPI_PROCFS_POWER	result = acpi_ac_add_fs(device);#endif	if (result)		goto end;	ac->charger.name = acpi_device_bid(device);	ac->charger.type = POWER_SUPPLY_TYPE_MAINS;	ac->charger.properties = ac_props;	ac->charger.num_properties = ARRAY_SIZE(ac_props);	ac->charger.get_property = get_ac_property;	result = power_supply_register(&ac->device->dev, &ac->charger);	if (result)		goto end;	printk(KERN_INFO PREFIX "%s [%s] (%s)\n",	       acpi_device_name(device), acpi_device_bid(device),	       ac->state ? "on-line" : "off-line");      end:	if (result) {#ifdef CONFIG_ACPI_PROCFS_POWER		acpi_ac_remove_fs(device);#endif		kfree(ac);	}	return result;}
static int
acpi_ac_add(struct acpi_device *device)
acpi_ac_add
struct acpi_device *device
struct acpi_device
acpi_device
*device
*
device
{	int result = 0;	struct acpi_ac *ac = NULL;	if (!device)		return -EINVAL;	ac = kzalloc(sizeof(struct acpi_ac), GFP_KERNEL);	if (!ac)		return -ENOMEM;	ac->device = device;	strcpy(acpi_device_name(device), ACPI_AC_DEVICE_NAME);	strcpy(acpi_device_class(device), ACPI_AC_CLASS);	device->driver_data = ac;	result = acpi_ac_get_state(ac);	if (result)		goto end;#ifdef CONFIG_ACPI_PROCFS_POWER	result = acpi_ac_add_fs(device);#endif	if (result)		goto end;	ac->charger.name = acpi_device_bid(device);	ac->charger.type = POWER_SUPPLY_TYPE_MAINS;	ac->charger.properties = ac_props;	ac->charger.num_properties = ARRAY_SIZE(ac_props);	ac->charger.get_property = get_ac_property;	result = power_supply_register(&ac->device->dev, &ac->charger);	if (result)		goto end;	printk(KERN_INFO PREFIX "%s [%s] (%s)\n",	       acpi_device_name(device), acpi_device_bid(device),	       ac->state ? "on-line" : "off-line");      end:	if (result) {#ifdef CONFIG_ACPI_PROCFS_POWER		acpi_ac_remove_fs(device);#endif		kfree(ac);	}	return result;}
int result = 0;
int result = 0;
int
result = 0
result
= 0
0
struct acpi_ac *ac = NULL;
struct acpi_ac *ac = NULL;
struct acpi_ac
acpi_ac
*ac = NULL
*
ac
= NULL
NULL
NULL
if (!device)		return -EINVAL;
!device
device
device
return -EINVAL;
-EINVAL
EINVAL
EINVAL
ac = kzalloc(sizeof(struct acpi_ac), GFP_KERNEL);
ac = kzalloc(sizeof(struct acpi_ac), GFP_KERNEL)
ac
ac
kzalloc(sizeof(struct acpi_ac), GFP_KERNEL)
kzalloc
kzalloc
sizeof(struct acpi_ac)
struct acpi_ac
struct acpi_ac
acpi_ac

GFP_KERNEL
GFP_KERNEL
if (!ac)		return -ENOMEM;
!ac
ac
ac
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
ac->device = device;
ac->device = device
ac->device
ac
ac
device
device
device
strcpy(acpi_device_name(device), ACPI_AC_DEVICE_NAME);
strcpy(acpi_device_name(device), ACPI_AC_DEVICE_NAME)
strcpy
strcpy
acpi_device_name(device)
acpi_device_name
acpi_device_name
device
device
ACPI_AC_DEVICE_NAME
ACPI_AC_DEVICE_NAME
strcpy(acpi_device_class(device), ACPI_AC_CLASS);
strcpy(acpi_device_class(device), ACPI_AC_CLASS)
strcpy
strcpy
acpi_device_class(device)
acpi_device_class
acpi_device_class
device
device
ACPI_AC_CLASS
ACPI_AC_CLASS
device->driver_data = ac;
device->driver_data = ac
device->driver_data
device
device
driver_data
ac
ac
result = acpi_ac_get_state(ac);
result = acpi_ac_get_state(ac)
result
result
acpi_ac_get_state(ac)
acpi_ac_get_state
acpi_ac_get_state
ac
ac
if (result)		goto end;
result
result
goto end;
end
if (result)		goto end;
result
result
goto end;
end
ac->charger.name = acpi_device_bid(device);
ac->charger.name = acpi_device_bid(device)
ac->charger.name
ac->charger
ac
ac
charger
name
acpi_device_bid(device)
acpi_device_bid
acpi_device_bid
device
device
ac->charger.type = POWER_SUPPLY_TYPE_MAINS;
ac->charger.type = POWER_SUPPLY_TYPE_MAINS
ac->charger.type
ac->charger
ac
ac
charger
type
POWER_SUPPLY_TYPE_MAINS
POWER_SUPPLY_TYPE_MAINS
ac->charger.properties = ac_props;
ac->charger.properties = ac_props
ac->charger.properties
ac->charger
ac
ac
charger
properties
ac_props
ac_props
ac->charger.num_properties = ARRAY_SIZE(ac_props);
ac->charger.num_properties = ARRAY_SIZE(ac_props)
ac->charger.num_properties
ac->charger
ac
ac
charger
num_properties
ARRAY_SIZE(ac_props)
ARRAY_SIZE
ARRAY_SIZE
ac_props
ac_props
ac->charger.get_property = get_ac_property;
ac->charger.get_property = get_ac_property
ac->charger.get_property
ac->charger
ac
ac
charger
get_property
get_ac_property
get_ac_property
result = power_supply_register(&ac->device->dev, &ac->charger);
result = power_supply_register(&ac->device->dev, &ac->charger)
result
result
power_supply_register(&ac->device->dev, &ac->charger)
power_supply_register
power_supply_register
&ac->device->dev
ac->device->dev
ac->device
ac
ac
device
dev
&ac->charger
ac->charger
ac
ac
charger
if (result)		goto end;
result
result
goto end;
end
printk(KERN_INFO PREFIX "%s [%s] (%s)\n",	       acpi_device_name(device), acpi_device_bid(device),	       ac->state ? "on-line" : "off-line");
end:	if (result) {#ifdef CONFIG_ACPI_PROCFS_POWER		acpi_ac_remove_fs(device);#endif		kfree(ac);	}
end
if (result) {#ifdef CONFIG_ACPI_PROCFS_POWER		acpi_ac_remove_fs(device);#endif		kfree(ac);	}
result
result
{#ifdef CONFIG_ACPI_PROCFS_POWER		acpi_ac_remove_fs(device);#endif		kfree(ac);	}
kfree(ac);
kfree(ac)
kfree
kfree
ac
ac
return result;
result
result
-----joern-----
(69,9,0)
(76,47,0)
(50,97,0)
(119,51,0)
(45,47,0)
(19,64,0)
(106,117,0)
(120,55,0)
(103,2,0)
(123,121,0)
(120,17,0)
(85,120,0)
(26,25,0)
(63,65,0)
(88,19,0)
(2,70,0)
(61,33,0)
(71,31,0)
(33,96,0)
(43,42,0)
(24,46,0)
(2,21,0)
(17,47,0)
(95,97,0)
(121,43,0)
(54,47,0)
(109,104,0)
(13,43,0)
(61,105,0)
(105,47,0)
(35,19,0)
(114,21,0)
(70,2,0)
(40,109,0)
(36,113,0)
(121,64,0)
(73,0,0)
(104,109,0)
(5,64,0)
(81,104,0)
(9,64,0)
(26,103,0)
(62,76,0)
(67,58,0)
(99,106,0)
(106,42,0)
(113,36,0)
(61,47,0)
(34,39,0)
(44,47,0)
(109,107,0)
(43,47,0)
(7,75,0)
(77,76,0)
(39,64,0)
(112,113,0)
(30,71,0)
(68,61,0)
(69,57,0)
(41,51,0)
(16,55,0)
(58,119,0)
(61,70,0)
(122,57,0)
(18,25,0)
(56,55,0)
(113,64,0)
(25,43,0)
(93,44,0)
(52,26,0)
(51,119,0)
(105,110,0)
(0,64,0)
(9,69,0)
(25,64,0)
(91,44,0)
(32,64,0)
(39,91,0)
(100,65,0)
(21,2,0)
(20,33,0)
(82,104,0)
(19,58,0)
(70,47,0)
(10,9,0)
(72,9,0)
(115,45,0)
(25,26,0)
(27,47,0)
(57,47,0)
(15,116,0)
(91,39,0)
(38,91,0)
(116,31,0)
(73,42,0)
(119,47,0)
(58,19,0)
(98,73,0)
(12,89,0)
(83,36,0)
(104,64,0)
(0,47,0)
(8,24,0)
(84,45,0)
(55,64,0)
(55,120,0)
(3,5,0)
(103,26,0)
(22,114,0)
(29,110,0)
(87,117,0)
(92,70,0)
(96,42,0)
(97,95,0)
(64,113,0)
(51,42,0)
(4,121,0)
(114,64,0)
(116,64,0)
(36,83,0)
(95,42,0)
(71,42,0)
(21,114,0)
(101,69,0)
(108,47,0)
(28,47,0)
(117,47,0)
(37,100,0)
(89,42,0)
(117,106,0)
(96,33,0)
(86,47,0)
(78,17,0)
(79,25,0)
(1,47,0)
(60,47,0)
(63,61,0)
(80,105,0)
(23,39,0)
(107,47,0)
(75,107,0)
(14,47,0)
(94,114,0)
(63,46,0)
(49,47,0)
(2,103,0)
(102,96,0)
(33,47,0)
(110,64,0)
(59,95,0)
(97,47,0)
(6,73,0)
(110,105,0)
(64,47,0)
(111,0,0)
(107,75,0)
(11,118,1)
(50,95,1)
(73,42,1)
(123,5,1)
(61,105,1)
(89,12,1)
(59,43,1)
(67,19,1)
(114,94,1)
(57,122,1)
(25,43,1)
(63,61,1)
(9,64,1)
(11,90,1)
(5,64,1)
(7,109,1)
(11,48,1)
(43,42,1)
(25,79,1)
(63,46,1)
(15,71,1)
(120,85,1)
(95,42,1)
(114,64,1)
(71,42,1)
(106,42,1)
(52,25,1)
(36,83,1)
(119,51,1)
(26,25,1)
(109,104,1)
(113,112,1)
(5,3,1)
(82,81,1)
(105,110,1)
(46,24,1)
(66,33,1)
(61,70,1)
(21,114,1)
(33,96,1)
(13,121,1)
(34,17,1)
(48,74,1)
(45,115,1)
(84,76,1)
(3,64,1)
(2,103,1)
(2,21,1)
(55,16,1)
(25,64,1)
(118,53,1)
(78,120,1)
(39,23,1)
(12,45,1)
(9,10,1)
(35,88,1)
(32,89,1)
(87,106,1)
(91,39,1)
(113,36,1)
(111,73,1)
(19,35,1)
(116,15,1)
(122,69,1)
(26,52,1)
(80,0,1)
(24,8,1)
(53,105,1)
(96,42,1)
(17,78,1)
(117,87,1)
(4,123,1)
(39,64,1)
(110,29,1)
(6,98,1)
(96,102,1)
(11,74,1)
(36,32,1)
(102,20,1)
(65,100,1)
(55,64,1)
(19,64,1)
(117,106,1)
(110,64,1)
(58,67,1)
(76,77,1)
(51,42,1)
(43,13,1)
(104,64,1)
(72,107,1)
(37,5,1)
(90,66,1)
(104,82,1)
(73,6,1)
(56,119,1)
(121,4,1)
(109,40,1)
(112,36,1)
(121,64,1)
(91,38,1)
(85,55,1)
(94,22,1)
(79,18,1)
(88,66,1)
(20,53,1)
(58,19,1)
(40,104,1)
(103,26,1)
(98,117,1)
(29,80,1)
(101,9,1)
(95,59,1)
(99,97,1)
(97,95,1)
(10,72,1)
(69,101,1)
(120,55,1)
(38,39,1)
(115,84,1)
(61,33,1)
(41,58,1)
(106,99,1)
(18,92,1)
(23,34,1)
(107,75,1)
(89,42,1)
(93,91,1)
(71,30,1)
(75,7,1)
(92,57,1)
(8,89,1)
(74,70,1)
(30,11,1)
(44,93,1)
(97,50,1)
(100,37,1)
(16,56,1)
(0,64,1)
(68,116,1)
(64,113,1)
(70,2,1)
(0,111,1)
(61,68,1)
(68,11,1)
(22,103,1)
(81,44,1)
(77,62,1)
(69,9,1)
(63,65,1)
(51,41,1)
(116,64,1)
(55,66,2)
(91,39,2)
(24,89,2)
(118,53,2)
(29,5,2)
(22,66,2)
(61,105,2)
(106,42,2)
(80,5,2)
(117,106,2)
(116,64,2)
(3,89,2)
(110,5,2)
(99,5,2)
(92,66,2)
(19,64,2)
(68,5,2)
(30,11,2)
(36,83,2)
(94,66,2)
(91,66,2)
(0,64,2)
(9,66,2)
(75,66,2)
(81,66,2)
(101,66,2)
(63,46,2)
(9,64,2)
(39,64,2)
(61,5,2)
(4,5,2)
(34,66,2)
(122,66,2)
(88,66,2)
(48,74,2)
(109,104,2)
(78,66,2)
(73,5,2)
(97,95,2)
(123,5,2)
(38,66,2)
(17,66,2)
(121,64,2)
(25,64,2)
(66,53,2)
(56,66,2)
(65,5,2)
(104,66,2)
(67,66,2)
(10,66,2)
(102,53,2)
(113,36,2)
(33,96,2)
(2,103,2)
(51,42,2)
(82,66,2)
(13,5,2)
(114,66,2)
(59,5,2)
(58,19,2)
(2,21,2)
(79,66,2)
(37,5,2)
(26,25,2)
(43,42,2)
(55,64,2)
(89,42,2)
(70,2,2)
(107,75,2)
(119,51,2)
(95,5,2)
(52,66,2)
(51,66,2)
(36,89,2)
(46,89,2)
(111,5,2)
(87,5,2)
(7,66,2)
(105,5,2)
(107,66,2)
(33,53,2)
(15,11,2)
(110,64,2)
(64,113,2)
(61,33,2)
(90,66,2)
(32,89,2)
(50,5,2)
(64,89,2)
(104,64,2)
(73,42,2)
(8,89,2)
(95,42,2)
(100,5,2)
(71,11,2)
(121,5,2)
(120,66,2)
(43,5,2)
(70,66,2)
(69,9,2)
(21,66,2)
(58,66,2)
(97,5,2)
(21,114,2)
(16,66,2)
(109,66,2)
(69,66,2)
(105,110,2)
(119,66,2)
(57,66,2)
(106,5,2)
(116,11,2)
(39,66,2)
(25,66,2)
(96,42,2)
(117,5,2)
(18,66,2)
(112,89,2)
(20,53,2)
(103,66,2)
(103,26,2)
(35,66,2)
(96,53,2)
(74,66,2)
(41,66,2)
(63,61,2)
(63,65,2)
(85,66,2)
(120,55,2)
(93,66,2)
(72,66,2)
(61,70,2)
(114,64,2)
(5,89,2)
(2,66,2)
(98,5,2)
(11,5,2)
(0,5,2)
(71,42,2)
(53,5,2)
(40,66,2)
(26,66,2)
(113,89,2)
(44,66,2)
(6,5,2)
(23,66,2)
(25,43,2)
(19,66,2)
(5,64,2)
-----------------------------------
(0,device->driver_data = ac)
(1,if (result)
(2,power_supply_register(&ac->device->dev, &ac->charger)
(3,ac)
(4,device)
(5,!ac)
(6,driver_data)
(7,ac_props)
(8,EINVAL)
(9,ac->charger)
(10,charger)
(11,result)
(12,device)
(13,device)
(14,if (result)
(15,ac)
(16,charger)
(17,ac->charger.type = POWER_SUPPLY_TYPE_MAINS)
(18,ac)
(19,ac->charger)
(20,result)
(21,&ac->charger)
(22,ac)
(23,charger)
(24,-EINVAL)
(25,ac->device)
(26,ac->device->dev)
(27,result)
(28,if (!device)
(29,ac)
(30,device)
(31,)
(32,ac)
(33,result = acpi_ac_add_fs(device)
(34,ac)
(35,charger)
(36,sizeof(struct acpi_ac)
(37,ENOMEM)
(38,properties)
(39,ac->charger)
(40,num_properties)
(41,device)
(42,struct acpi_device *device)
(43,ac->device = device)
(44,ac->charger.properties = ac_props)
(45,*ac = NULL)
(46,return -EINVAL;)
(47,)
(48,goto end;)
(49,ac)
(50,ACPI_AC_DEVICE_NAME)
(51,acpi_device_bid(device)
(52,dev)
(53,result)
(54,if (result)
(55,ac->charger)
(56,ac)
(57,ac->charger.get_property = get_ac_property)
(58,ac->charger.name)
(59,device)
(60,if (result)
(61,return result;)
(62,result)
(63,RET)
(64,ac = kzalloc(sizeof(struct acpi_ac)
(65,return -ENOMEM;)
(66,result)
(67,name)
(68,result)
(69,ac->charger.get_property)
(70,result = power_supply_register(&ac->device->dev, &ac->charger)
(71,acpi_ac_remove_fs(device)
(72,ac)
(73,device->driver_data)
(74,result)
(75,ARRAY_SIZE(ac_props)
(76,result = 0)
(77,0)
(78,POWER_SUPPLY_TYPE_MAINS)
(79,device)
(80,result)
(81,ac)
(82,charger)
(83,struct acpi_ac)
(84,ac)
(85,type)
(86,if (!ac)
(87,ACPI_AC_CLASS)
(88,ac)
(89,!device)
(90,goto end;)
(91,ac->charger.properties)
(92,result)
(93,ac_props)
(94,charger)
(95,acpi_device_name(device)
(96,acpi_ac_add_fs(device)
(97,strcpy(acpi_device_name(device)
(98,device)
(99,device)
(100,-ENOMEM)
(101,get_property)
(102,device)
(103,&ac->device->dev)
(104,ac->charger)
(105,result = acpi_ac_get_state(ac)
(106,acpi_device_class(device)
(107,ac->charger.num_properties = ARRAY_SIZE(ac_props)
(108,end:)
(109,ac->charger.num_properties)
(110,acpi_ac_get_state(ac)
(111,ac)
(112,GFP_KERNEL)
(113,kzalloc(sizeof(struct acpi_ac)
(114,ac->charger)
(115,NULL)
(116,kfree(ac)
(117,strcpy(acpi_device_class(device)
(118,goto end;)
(119,ac->charger.name = acpi_device_bid(device)
(120,ac->charger.type)
(121,ac->device)
(122,get_ac_property)
(123,ac)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^