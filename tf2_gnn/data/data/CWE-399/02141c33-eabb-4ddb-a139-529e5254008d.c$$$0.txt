-----label-----
1
-----code-----
static acpi_status find_csr_space(struct acpi_resource *resource, void *data)
{
	struct csr_space *space = data;
	struct acpi_resource_address64 addr;
	acpi_status status;

	status = acpi_resource_to_address64(resource, &addr);
	if (ACPI_SUCCESS(status) &&
	    addr.resource_type == ACPI_MEMORY_RANGE &&
	    addr.address.address_length &&
	    addr.producer_consumer == ACPI_CONSUMER) {
		space->base = addr.address.minimum;
		space->length = addr.address.address_length;
		return AE_CTRL_TERMINATE;
	}
	return AE_OK;		/* keep looking */
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
7,8
9,10
9,11
12,13
12,14
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
44,46
44,47
45,46
47,48
49,50
50,51
52,53
52,54
53,54
53,55
54,55
54,56
55,56
55,57
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
66,67
68,69
68,70
69,70
69,71
70,71
74,75
74,76
75,76
75,77
76,77
79,80
81,82
81,83
81,84
82,83
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
94,95
95,96
95,97
96,97
96,98
97,98
100,101
100,102
101,102
101,103
102,103
106,107
107,108
109,110
110,111
-----nextToken-----
3,5,8,10,11,13,15,16,21,23,24,27,31,33,37,39,43,46,48,51,58,60,64,65,67,71,72,73,77,78,80,86,87,91,92,93,98,99,103,104,105,108,111
-----computeFrom-----
41,42
41,43
53,54
53,55
54,55
54,56
55,56
55,57
61,62
61,63
74,75
74,76
83,84
83,85
95,96
95,97
-----guardedBy-----
73,105
72,104
77,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static acpi_status find_csr_space(struct acpi_resource *resource, void *data){	struct csr_space *space = data;	struct acpi_resource_address64 addr;	acpi_status status;	status = acpi_resource_to_address64(resource, &addr);	if (ACPI_SUCCESS(status) &&	    addr.resource_type == ACPI_MEMORY_RANGE &&	    addr.address.address_length &&	    addr.producer_consumer == ACPI_CONSUMER) {		space->base = addr.address.minimum;		space->length = addr.address.address_length;		return AE_CTRL_TERMINATE;	}	return AE_OK;		/* keep looking */}
static acpi_status
acpi_status
find_csr_space(struct acpi_resource *resource, void *data)
find_csr_space
struct acpi_resource *resource
struct acpi_resource
acpi_resource
*resource
*
resource
void *data
void
*data
*
data
{	struct csr_space *space = data;	struct acpi_resource_address64 addr;	acpi_status status;	status = acpi_resource_to_address64(resource, &addr);	if (ACPI_SUCCESS(status) &&	    addr.resource_type == ACPI_MEMORY_RANGE &&	    addr.address.address_length &&	    addr.producer_consumer == ACPI_CONSUMER) {		space->base = addr.address.minimum;		space->length = addr.address.address_length;		return AE_CTRL_TERMINATE;	}	return AE_OK;		/* keep looking */}
struct csr_space *space = data;
struct csr_space *space = data;
struct csr_space
csr_space
*space = data
*
space
= data
data
data
struct acpi_resource_address64 addr;
struct acpi_resource_address64 addr;
struct acpi_resource_address64
acpi_resource_address64
addr
addr
acpi_status status;
acpi_status status;
acpi_status
acpi_status
status
status
status = acpi_resource_to_address64(resource, &addr);
status = acpi_resource_to_address64(resource, &addr)
status
status
acpi_resource_to_address64(resource, &addr)
acpi_resource_to_address64
acpi_resource_to_address64
resource
resource
&addr
addr
addr
if (ACPI_SUCCESS(status) &&	    addr.resource_type == ACPI_MEMORY_RANGE &&	    addr.address.address_length &&	    addr.producer_consumer == ACPI_CONSUMER) {		space->base = addr.address.minimum;		space->length = addr.address.address_length;		return AE_CTRL_TERMINATE;	}
ACPI_SUCCESS(status) &&	    addr.resource_type == ACPI_MEMORY_RANGE &&	    addr.address.address_length &&	    addr.producer_consumer == ACPI_CONSUMER
ACPI_SUCCESS(status) &&	    addr.resource_type == ACPI_MEMORY_RANGE &&	    addr.address.address_length
ACPI_SUCCESS(status) &&	    addr.resource_type == ACPI_MEMORY_RANGE
ACPI_SUCCESS(status)
ACPI_SUCCESS
ACPI_SUCCESS
status
status
addr.resource_type == ACPI_MEMORY_RANGE
addr.resource_type
addr
addr
resource_type
ACPI_MEMORY_RANGE
ACPI_MEMORY_RANGE
addr.address.address_length
addr.address
addr
addr
address
address_length
addr.producer_consumer == ACPI_CONSUMER
addr.producer_consumer
addr
addr
producer_consumer
ACPI_CONSUMER
ACPI_CONSUMER
{		space->base = addr.address.minimum;		space->length = addr.address.address_length;		return AE_CTRL_TERMINATE;	}
space->base = addr.address.minimum;
space->base = addr.address.minimum
space->base
space
space
base
addr.address.minimum
addr.address
addr
addr
address
minimum
space->length = addr.address.address_length;
space->length = addr.address.address_length
space->length
space
space
length
addr.address.address_length
addr.address
addr
addr
address
address_length
return AE_CTRL_TERMINATE;
AE_CTRL_TERMINATE
AE_CTRL_TERMINATE
return AE_OK;
AE_OK
AE_OK
-----joern-----
(17,28,0)
(23,2,0)
(20,38,0)
(44,34,0)
(19,38,0)
(26,53,0)
(43,20,0)
(15,17,0)
(3,44,0)
(4,2,0)
(13,34,0)
(57,20,0)
(40,31,0)
(47,53,0)
(45,26,0)
(36,32,0)
(9,2,0)
(12,37,0)
(6,2,0)
(0,47,0)
(26,45,0)
(56,2,0)
(44,3,0)
(3,24,0)
(25,55,0)
(13,31,0)
(54,49,0)
(5,31,0)
(36,16,0)
(38,34,0)
(14,37,0)
(42,25,0)
(33,26,0)
(16,54,0)
(21,25,0)
(28,17,0)
(54,32,0)
(31,40,0)
(34,44,0)
(47,25,0)
(13,52,0)
(49,37,0)
(34,38,0)
(51,49,0)
(27,52,0)
(52,13,0)
(46,45,0)
(29,6,0)
(18,40,0)
(50,47,0)
(11,3,0)
(8,40,0)
(52,35,0)
(24,17,0)
(34,13,0)
(48,28,0)
(36,47,0)
(17,59,0)
(7,35,0)
(53,26,0)
(1,24,0)
(39,35,0)
(17,24,0)
(38,20,0)
(10,6,0)
(37,49,0)
(53,32,0)
(31,13,0)
(41,16,0)
(25,2,0)
(10,36,0)
(35,52,0)
(16,25,0)
(30,36,0)
(49,54,0)
(24,2,0)
(22,45,0)
(58,16,0)
(28,48,1)
(25,55,1)
(31,5,1)
(10,36,1)
(29,44,1)
(40,18,1)
(43,57,1)
(10,6,1)
(36,47,1)
(44,3,1)
(1,25,1)
(14,12,1)
(58,44,1)
(49,51,1)
(13,52,1)
(26,33,1)
(3,24,1)
(20,43,1)
(53,26,1)
(22,47,1)
(48,15,1)
(49,37,1)
(35,7,1)
(36,30,1)
(30,53,1)
(13,31,1)
(38,20,1)
(24,17,1)
(0,54,1)
(34,13,1)
(16,25,1)
(54,49,1)
(3,11,1)
(6,29,1)
(26,45,1)
(57,3,1)
(47,25,1)
(33,45,1)
(12,16,1)
(17,28,1)
(7,39,1)
(51,37,1)
(31,40,1)
(52,27,1)
(25,42,1)
(15,1,1)
(5,40,1)
(47,50,1)
(34,38,1)
(36,16,1)
(19,20,1)
(52,35,1)
(45,46,1)
(17,59,1)
(41,58,1)
(8,52,1)
(44,34,1)
(38,19,1)
(16,41,1)
(39,38,1)
(18,8,1)
(50,0,1)
(42,21,1)
(37,14,1)
(46,22,1)
(27,35,1)
(11,24,1)
(22,44,2)
(46,44,2)
(35,38,2)
(10,6,2)
(49,37,2)
(47,44,2)
(0,44,2)
(53,44,2)
(52,35,2)
(19,3,2)
(24,17,2)
(38,20,2)
(16,44,2)
(16,25,2)
(44,3,2)
(30,44,2)
(26,44,2)
(26,45,2)
(31,52,2)
(29,44,2)
(54,49,2)
(13,38,2)
(38,3,2)
(17,59,2)
(34,38,2)
(47,25,2)
(51,44,2)
(17,28,2)
(36,44,2)
(50,44,2)
(7,38,2)
(57,3,2)
(25,55,2)
(49,44,2)
(31,40,2)
(36,47,2)
(20,3,2)
(33,44,2)
(13,52,2)
(5,52,2)
(58,44,2)
(27,38,2)
(45,44,2)
(52,38,2)
(41,44,2)
(14,44,2)
(40,52,2)
(39,38,2)
(18,52,2)
(12,44,2)
(53,26,2)
(13,31,2)
(43,3,2)
(8,52,2)
(37,44,2)
(6,44,2)
(10,36,2)
(44,34,2)
(36,16,2)
(34,13,2)
(3,24,2)
(34,3,2)
(54,44,2)
-----------------------------------
(0,space)
(1,status)
(2,)
(3,ACPI_SUCCESS(status)
(4,if (ACPI_SUCCESS(status)
(5,ACPI_CONSUMER)
(6,return AE_OK;)
(7,address)
(8,addr)
(9,status)
(10,RET)
(11,status)
(12,addr)
(13,addr.address.address_length &&\n\\n\\t    addr.producer_consumer == ACPI_CONSUMER)
(14,address)
(15,resource)
(16,space->base)
(17,acpi_resource_to_address64(resource, &addr)
(18,producer_consumer)
(19,ACPI_MEMORY_RANGE)
(20,addr.resource_type)
(21,space)
(22,addr)
(23,addr)
(24,status = acpi_resource_to_address64(resource, &addr)
(25,*space = data)
(26,addr.address.address_length)
(27,address_length)
(28,&addr)
(29,AE_OK)
(30,AE_CTRL_TERMINATE)
(31,addr.producer_consumer == ACPI_CONSUMER)
(32,)
(33,address_length)
(34,addr.resource_type == ACPI_MEMORY_RANGE &&\n\\n\\t    addr.address.address_length &&\n\\n\\t    addr.producer_consumer == ACPI_CONSUMER)
(35,addr.address)
(36,return AE_CTRL_TERMINATE;)
(37,addr.address)
(38,addr.resource_type == ACPI_MEMORY_RANGE)
(39,addr)
(40,addr.producer_consumer)
(41,base)
(42,data)
(43,resource_type)
(44,ACPI_SUCCESS(status)
(45,addr.address)
(46,address)
(47,space->length)
(48,addr)
(49,addr.address.minimum)
(50,length)
(51,minimum)
(52,addr.address.address_length)
(53,space->length = addr.address.address_length)
(54,space->base = addr.address.minimum)
(55,void *data)
(56,space)
(57,addr)
(58,space)
(59,struct acpi_resource *resource)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^