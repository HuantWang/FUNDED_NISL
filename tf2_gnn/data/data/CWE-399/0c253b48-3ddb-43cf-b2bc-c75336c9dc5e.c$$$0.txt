-----label-----
1
-----code-----
static int cpu0_cpufreq_probe(struct platform_device *pdev)
{
	struct device_node *np;
	int ret;

	for_each_child_of_node(of_find_node_by_path("/cpus"), np) {
		if (of_get_property(np, "operating-points", NULL))
			break;
	}

	if (!np) {
		pr_err("failed to find cpu0 node\n");
		return -ENOENT;
	}

	cpu_dev = &pdev->dev;
	cpu_dev->of_node = np;

	cpu_clk = devm_clk_get(cpu_dev, NULL);
	if (IS_ERR(cpu_clk)) {
		ret = PTR_ERR(cpu_clk);
		pr_err("failed to get cpu0 clock: %d\n", ret);
		goto out_put_node;
	}

	cpu_reg = devm_regulator_get(cpu_dev, "cpu0");
	if (IS_ERR(cpu_reg)) {
		pr_warn("failed to get cpu0 regulator\n");
		cpu_reg = NULL;
	}

	ret = of_init_opp_table(cpu_dev);
	if (ret) {
		pr_err("failed to init OPP table: %d\n", ret);
		goto out_put_node;
	}

	ret = opp_init_cpufreq_table(cpu_dev, &freq_table);
	if (ret) {
		pr_err("failed to init cpufreq table: %d\n", ret);
		goto out_put_node;
	}

	of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance);

	if (of_property_read_u32(np, "clock-latency", &transition_latency))
		transition_latency = CPUFREQ_ETERNAL;

	if (cpu_reg) {
		struct opp *opp;
		unsigned long min_uV, max_uV;
		int i;

		/*
		 * OPP is maintained in order of increasing frequency, and
		 * freq_table initialised from OPP is therefore sorted in the
		 * same order.
		 */
		for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)
			;
		rcu_read_lock();
		opp = opp_find_freq_exact(cpu_dev,
				freq_table[0].frequency * 1000, true);
		min_uV = opp_get_voltage(opp);
		opp = opp_find_freq_exact(cpu_dev,
				freq_table[i-1].frequency * 1000, true);
		max_uV = opp_get_voltage(opp);
		rcu_read_unlock();
		ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);
		if (ret > 0)
			transition_latency += ret * 1000;
	}

	ret = cpufreq_register_driver(&cpu0_cpufreq_driver);
	if (ret) {
		pr_err("failed register driver: %d\n", ret);
		goto out_free_table;
	}

	of_node_put(np);
	return 0;

out_free_table:
	opp_free_cpufreq_table(cpu_dev, &freq_table);
out_put_node:
	of_node_put(np);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
22,23
24,25
25,26
25,27
25,28
26,27
28,29
28,30
29,30
32,33
34,35
35,36
36,37
36,38
37,38
37,39
37,40
37,41
38,39
40,41
43,44
46,47
46,48
47,48
48,49
50,51
50,52
51,52
52,53
52,54
53,54
56,57
57,58
58,59
60,61
61,62
61,63
62,63
64,65
65,66
65,67
66,67
69,70
70,71
70,72
71,72
71,73
72,73
75,76
77,78
78,79
78,80
79,80
81,82
81,83
81,84
82,83
84,85
86,87
88,89
88,90
89,90
89,91
90,91
92,93
93,94
95,96
95,97
95,98
96,97
97,98
97,99
98,99
100,101
100,102
101,102
103,104
105,106
106,107
106,108
106,109
107,108
110,111
112,113
114,115
115,116
115,117
116,117
118,119
118,120
118,121
119,120
121,122
124,125
124,126
125,126
125,127
126,127
128,129
129,130
131,132
131,133
132,133
133,134
133,135
134,135
137,138
138,139
138,140
139,140
141,142
143,144
144,145
144,146
145,146
147,148
147,149
148,149
150,151
152,153
152,154
153,154
155,156
155,157
156,157
157,158
157,159
157,160
158,159
161,162
163,164
165,166
166,167
166,168
167,168
169,170
169,171
169,172
170,171
172,173
174,175
175,176
177,178
177,179
178,179
180,181
180,182
181,182
182,183
182,184
182,185
183,184
186,187
188,189
190,191
191,192
191,193
191,194
191,195
192,193
194,195
197,198
198,199
200,201
200,202
201,202
201,203
201,204
201,205
202,203
204,205
207,208
208,209
210,211
211,212
211,213
212,213
214,215
216,217
216,218
217,218
219,220
219,221
219,222
219,223
219,224
219,225
219,226
219,227
219,228
219,229
219,230
219,231
220,221
221,222
221,223
222,223
224,225
224,226
227,228
228,229
228,230
228,231
230,231
232,233
234,235
235,236
235,237
237,238
239,240
239,241
239,242
239,243
240,241
241,242
241,243
242,243
245,246
245,247
246,247
246,248
247,248
247,249
248,249
250,251
253,254
255,256
256,257
259,260
260,261
261,262
263,264
264,265
264,266
265,266
267,268
267,269
267,270
267,271
268,269
270,271
272,273
272,274
273,274
273,275
274,275
274,276
275,276
281,282
282,283
282,284
283,284
285,286
285,287
286,287
288,289
290,291
291,292
291,293
292,293
294,295
294,296
294,297
294,298
295,296
297,298
299,300
299,301
300,301
300,302
301,302
301,303
302,303
304,305
304,306
305,306
311,312
312,313
312,314
313,314
315,316
315,317
316,317
318,319
320,321
321,322
322,323
324,325
325,326
325,327
326,327
328,329
328,330
328,331
328,332
329,330
331,332
333,334
335,336
337,338
337,339
338,339
338,340
339,340
342,343
343,344
343,345
344,345
346,347
346,348
347,348
350,351
351,352
351,353
352,353
354,355
354,356
355,356
357,358
358,359
360,361
360,362
361,362
363,364
363,365
364,365
365,366
365,367
365,368
366,367
369,370
371,372
373,374
374,375
374,376
375,376
377,378
379,380
381,382
381,383
383,384
384,385
384,386
384,387
385,386
387,388
389,390
390,391
392,393
392,394
394,395
395,396
395,397
396,397
398,399
400,401
401,402
-----nextToken-----
2,4,7,9,10,15,17,18,21,23,27,30,31,33,39,41,42,44,45,49,54,55,59,63,67,68,73,74,76,80,83,85,87,91,94,99,102,104,108,109,111,113,117,120,122,123,127,130,135,136,140,142,146,149,151,154,159,160,162,164,168,171,173,176,179,184,185,187,189,193,195,196,199,203,205,206,209,213,215,218,223,225,226,229,231,233,236,238,243,244,249,251,252,254,257,258,262,266,269,271,276,277,278,279,280,284,287,289,293,296,298,303,306,307,308,309,310,314,317,319,323,327,330,332,334,336,340,341,345,348,349,353,356,359,362,367,368,370,372,376,378,380,382,386,388,391,393,397,399,402
-----computeFrom-----
61,62
61,63
70,71
70,72
78,79
78,80
97,98
97,99
115,116
115,117
138,139
138,140
144,145
144,146
166,167
166,168
211,212
211,213
241,242
241,243
245,246
245,247
264,265
264,266
272,273
272,274
282,283
282,284
291,292
291,293
299,300
299,301
304,305
304,306
312,313
312,314
325,326
325,327
338,339
338,340
343,344
343,345
346,347
346,348
351,352
351,353
-----guardedBy-----
340,348
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;BreakStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int cpu0_cpufreq_probe(struct platform_device *pdev){	struct device_node *np;	int ret;	for_each_child_of_node(of_find_node_by_path("/cpus"), np) {		if (of_get_property(np, "operating-points", NULL))			break;	}	if (!np) {		pr_err("failed to find cpu0 node\n");		return -ENOENT;	}	cpu_dev = &pdev->dev;	cpu_dev->of_node = np;	cpu_clk = devm_clk_get(cpu_dev, NULL);	if (IS_ERR(cpu_clk)) {		ret = PTR_ERR(cpu_clk);		pr_err("failed to get cpu0 clock: %d\n", ret);		goto out_put_node;	}	cpu_reg = devm_regulator_get(cpu_dev, "cpu0");	if (IS_ERR(cpu_reg)) {		pr_warn("failed to get cpu0 regulator\n");		cpu_reg = NULL;	}	ret = of_init_opp_table(cpu_dev);	if (ret) {		pr_err("failed to init OPP table: %d\n", ret);		goto out_put_node;	}	ret = opp_init_cpufreq_table(cpu_dev, &freq_table);	if (ret) {		pr_err("failed to init cpufreq table: %d\n", ret);		goto out_put_node;	}	of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance);	if (of_property_read_u32(np, "clock-latency", &transition_latency))		transition_latency = CPUFREQ_ETERNAL;	if (cpu_reg) {		struct opp *opp;		unsigned long min_uV, max_uV;		int i;		/*		 * OPP is maintained in order of increasing frequency, and		 * freq_table initialised from OPP is therefore sorted in the		 * same order.		 */		for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)			;		rcu_read_lock();		opp = opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true);		min_uV = opp_get_voltage(opp);		opp = opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true);		max_uV = opp_get_voltage(opp);		rcu_read_unlock();		ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);		if (ret > 0)			transition_latency += ret * 1000;	}	ret = cpufreq_register_driver(&cpu0_cpufreq_driver);	if (ret) {		pr_err("failed register driver: %d\n", ret);		goto out_free_table;	}	of_node_put(np);	return 0;out_free_table:	opp_free_cpufreq_table(cpu_dev, &freq_table);out_put_node:	of_node_put(np);	return ret;}
static int
cpu0_cpufreq_probe(struct platform_device *pdev)
cpu0_cpufreq_probe
struct platform_device *pdev
struct platform_device
platform_device
*pdev
*
pdev
{	struct device_node *np;	int ret;	for_each_child_of_node(of_find_node_by_path("/cpus"), np) {		if (of_get_property(np, "operating-points", NULL))			break;	}	if (!np) {		pr_err("failed to find cpu0 node\n");		return -ENOENT;	}	cpu_dev = &pdev->dev;	cpu_dev->of_node = np;	cpu_clk = devm_clk_get(cpu_dev, NULL);	if (IS_ERR(cpu_clk)) {		ret = PTR_ERR(cpu_clk);		pr_err("failed to get cpu0 clock: %d\n", ret);		goto out_put_node;	}	cpu_reg = devm_regulator_get(cpu_dev, "cpu0");	if (IS_ERR(cpu_reg)) {		pr_warn("failed to get cpu0 regulator\n");		cpu_reg = NULL;	}	ret = of_init_opp_table(cpu_dev);	if (ret) {		pr_err("failed to init OPP table: %d\n", ret);		goto out_put_node;	}	ret = opp_init_cpufreq_table(cpu_dev, &freq_table);	if (ret) {		pr_err("failed to init cpufreq table: %d\n", ret);		goto out_put_node;	}	of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance);	if (of_property_read_u32(np, "clock-latency", &transition_latency))		transition_latency = CPUFREQ_ETERNAL;	if (cpu_reg) {		struct opp *opp;		unsigned long min_uV, max_uV;		int i;		/*		 * OPP is maintained in order of increasing frequency, and		 * freq_table initialised from OPP is therefore sorted in the		 * same order.		 */		for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)			;		rcu_read_lock();		opp = opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true);		min_uV = opp_get_voltage(opp);		opp = opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true);		max_uV = opp_get_voltage(opp);		rcu_read_unlock();		ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);		if (ret > 0)			transition_latency += ret * 1000;	}	ret = cpufreq_register_driver(&cpu0_cpufreq_driver);	if (ret) {		pr_err("failed register driver: %d\n", ret);		goto out_free_table;	}	of_node_put(np);	return 0;out_free_table:	opp_free_cpufreq_table(cpu_dev, &freq_table);out_put_node:	of_node_put(np);	return ret;}
struct device_node *np;
struct device_node *np;
struct device_node
device_node
*np
*
np
int ret;
int ret;
int
ret
ret
for_each_child_of_node(of_find_node_by_path("/cpus"), np)
for_each_child_of_node(of_find_node_by_path("/cpus"), np)
for_each_child_of_node
for_each_child_of_node
of_find_node_by_path("/cpus")
of_find_node_by_path
of_find_node_by_path
"/cpus"
np
np
)
{		if (of_get_property(np, "operating-points", NULL))			break;	}
if (of_get_property(np, "operating-points", NULL))			break;
of_get_property(np, "operating-points", NULL)
of_get_property
of_get_property
np
np
"operating-points"
NULL
NULL
break;
if (!np) {		pr_err("failed to find cpu0 node\n");		return -ENOENT;	}
!np
np
np
{		pr_err("failed to find cpu0 node\n");		return -ENOENT;	}
pr_err("failed to find cpu0 node\n");
pr_err("failed to find cpu0 node\n")
pr_err
pr_err
"failed to find cpu0 node\n"
return -ENOENT;
-ENOENT
ENOENT
ENOENT
cpu_dev = &pdev->dev;
cpu_dev = &pdev->dev
cpu_dev
cpu_dev
&pdev->dev
pdev->dev
pdev
pdev
dev
cpu_dev->of_node = np;
cpu_dev->of_node = np
cpu_dev->of_node
cpu_dev
cpu_dev
of_node
np
np
cpu_clk = devm_clk_get(cpu_dev, NULL);
cpu_clk = devm_clk_get(cpu_dev, NULL)
cpu_clk
cpu_clk
devm_clk_get(cpu_dev, NULL)
devm_clk_get
devm_clk_get
cpu_dev
cpu_dev
NULL
NULL
if (IS_ERR(cpu_clk)) {		ret = PTR_ERR(cpu_clk);		pr_err("failed to get cpu0 clock: %d\n", ret);		goto out_put_node;	}
IS_ERR(cpu_clk)
IS_ERR
IS_ERR
(cpu_clk)
cpu_clk
cpu_clk
{		ret = PTR_ERR(cpu_clk);		pr_err("failed to get cpu0 clock: %d\n", ret);		goto out_put_node;	}
ret = PTR_ERR(cpu_clk);
ret = PTR_ERR(cpu_clk)
ret
ret
PTR_ERR(cpu_clk)
PTR_ERR
PTR_ERR
cpu_clk
cpu_clk
pr_err("failed to get cpu0 clock: %d\n", ret);
pr_err("failed to get cpu0 clock: %d\n", ret)
pr_err
pr_err
"failed to get cpu0 clock: %d\n"
ret
ret
goto out_put_node;
out_put_node
cpu_reg = devm_regulator_get(cpu_dev, "cpu0");
cpu_reg = devm_regulator_get(cpu_dev, "cpu0")
cpu_reg
cpu_reg
devm_regulator_get(cpu_dev, "cpu0")
devm_regulator_get
devm_regulator_get
cpu_dev
cpu_dev
"cpu0"
if (IS_ERR(cpu_reg)) {		pr_warn("failed to get cpu0 regulator\n");		cpu_reg = NULL;	}
IS_ERR(cpu_reg)
IS_ERR
IS_ERR
(cpu_reg)
cpu_reg
cpu_reg
{		pr_warn("failed to get cpu0 regulator\n");		cpu_reg = NULL;	}
pr_warn("failed to get cpu0 regulator\n");
pr_warn("failed to get cpu0 regulator\n")
pr_warn
pr_warn
"failed to get cpu0 regulator\n"
cpu_reg = NULL;
cpu_reg = NULL
cpu_reg
cpu_reg
NULL
NULL
ret = of_init_opp_table(cpu_dev);
ret = of_init_opp_table(cpu_dev)
ret
ret
of_init_opp_table(cpu_dev)
of_init_opp_table
of_init_opp_table
cpu_dev
cpu_dev
if (ret) {		pr_err("failed to init OPP table: %d\n", ret);		goto out_put_node;	}
ret
ret
{		pr_err("failed to init OPP table: %d\n", ret);		goto out_put_node;	}
pr_err("failed to init OPP table: %d\n", ret);
pr_err("failed to init OPP table: %d\n", ret)
pr_err
pr_err
"failed to init OPP table: %d\n"
ret
ret
goto out_put_node;
out_put_node
ret = opp_init_cpufreq_table(cpu_dev, &freq_table);
ret = opp_init_cpufreq_table(cpu_dev, &freq_table)
ret
ret
opp_init_cpufreq_table(cpu_dev, &freq_table)
opp_init_cpufreq_table
opp_init_cpufreq_table
cpu_dev
cpu_dev
&freq_table
freq_table
freq_table
if (ret) {		pr_err("failed to init cpufreq table: %d\n", ret);		goto out_put_node;	}
ret
ret
{		pr_err("failed to init cpufreq table: %d\n", ret);		goto out_put_node;	}
pr_err("failed to init cpufreq table: %d\n", ret);
pr_err("failed to init cpufreq table: %d\n", ret)
pr_err
pr_err
"failed to init cpufreq table: %d\n"
ret
ret
goto out_put_node;
out_put_node
of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance);
of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance)
of_property_read_u32
of_property_read_u32
np
np
"voltage-tolerance"
&voltage_tolerance
voltage_tolerance
voltage_tolerance
if (of_property_read_u32(np, "clock-latency", &transition_latency))		transition_latency = CPUFREQ_ETERNAL;
of_property_read_u32(np, "clock-latency", &transition_latency)
of_property_read_u32
of_property_read_u32
np
np
"clock-latency"
&transition_latency
transition_latency
transition_latency
transition_latency = CPUFREQ_ETERNAL;
transition_latency = CPUFREQ_ETERNAL
transition_latency
transition_latency
CPUFREQ_ETERNAL
CPUFREQ_ETERNAL
if (cpu_reg) {		struct opp *opp;		unsigned long min_uV, max_uV;		int i;		/*		 * OPP is maintained in order of increasing frequency, and		 * freq_table initialised from OPP is therefore sorted in the		 * same order.		 */		for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)			;		rcu_read_lock();		opp = opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true);		min_uV = opp_get_voltage(opp);		opp = opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true);		max_uV = opp_get_voltage(opp);		rcu_read_unlock();		ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);		if (ret > 0)			transition_latency += ret * 1000;	}
cpu_reg
cpu_reg
{		struct opp *opp;		unsigned long min_uV, max_uV;		int i;		/*		 * OPP is maintained in order of increasing frequency, and		 * freq_table initialised from OPP is therefore sorted in the		 * same order.		 */		for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)			;		rcu_read_lock();		opp = opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true);		min_uV = opp_get_voltage(opp);		opp = opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true);		max_uV = opp_get_voltage(opp);		rcu_read_unlock();		ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);		if (ret > 0)			transition_latency += ret * 1000;	}
struct opp *opp;
struct opp *opp;
struct opp
opp
*opp
*
opp
unsigned long min_uV, max_uV;
unsigned long min_uV, max_uV;
unsigned long
min_uV
min_uV
max_uV
max_uV
int i;
int i;
int
i
i
for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)			;
i = 0;
i = 0
i
i
0
freq_table[i].frequency != CPUFREQ_TABLE_END
freq_table[i].frequency
freq_table[i]
freq_table
freq_table
i
i
frequency
CPUFREQ_TABLE_END
CPUFREQ_TABLE_END
i++
i
i
;
rcu_read_lock();
rcu_read_lock()
rcu_read_lock
rcu_read_lock
opp = opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true);
opp = opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true)
opp
opp
opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true)
opp_find_freq_exact
opp_find_freq_exact
cpu_dev
cpu_dev
freq_table[0].frequency * 1000
freq_table[0].frequency
freq_table[0]
freq_table
freq_table
0
frequency
1000
true
min_uV = opp_get_voltage(opp);
min_uV = opp_get_voltage(opp)
min_uV
min_uV
opp_get_voltage(opp)
opp_get_voltage
opp_get_voltage
opp
opp
opp = opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true);
opp = opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true)
opp
opp
opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true)
opp_find_freq_exact
opp_find_freq_exact
cpu_dev
cpu_dev
freq_table[i-1].frequency * 1000
freq_table[i-1].frequency
freq_table[i-1]
freq_table
freq_table
i-1
i
i
1
frequency
1000
true
max_uV = opp_get_voltage(opp);
max_uV = opp_get_voltage(opp)
max_uV
max_uV
opp_get_voltage(opp)
opp_get_voltage
opp_get_voltage
opp
opp
rcu_read_unlock();
rcu_read_unlock()
rcu_read_unlock
rcu_read_unlock
ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);
ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV)
ret
ret
regulator_set_voltage_time(cpu_reg, min_uV, max_uV)
regulator_set_voltage_time
regulator_set_voltage_time
cpu_reg
cpu_reg
min_uV
min_uV
max_uV
max_uV
if (ret > 0)			transition_latency += ret * 1000;
ret > 0
ret
ret
0
transition_latency += ret * 1000;
transition_latency += ret * 1000
transition_latency
transition_latency
ret * 1000
ret
ret
1000
ret = cpufreq_register_driver(&cpu0_cpufreq_driver);
ret = cpufreq_register_driver(&cpu0_cpufreq_driver)
ret
ret
cpufreq_register_driver(&cpu0_cpufreq_driver)
cpufreq_register_driver
cpufreq_register_driver
&cpu0_cpufreq_driver
cpu0_cpufreq_driver
cpu0_cpufreq_driver
if (ret) {		pr_err("failed register driver: %d\n", ret);		goto out_free_table;	}
ret
ret
{		pr_err("failed register driver: %d\n", ret);		goto out_free_table;	}
pr_err("failed register driver: %d\n", ret);
pr_err("failed register driver: %d\n", ret)
pr_err
pr_err
"failed register driver: %d\n"
ret
ret
goto out_free_table;
out_free_table
of_node_put(np);
of_node_put(np)
of_node_put
of_node_put
np
np
return 0;
0
out_free_table:	opp_free_cpufreq_table(cpu_dev, &freq_table);
out_free_table
opp_free_cpufreq_table(cpu_dev, &freq_table);
opp_free_cpufreq_table(cpu_dev, &freq_table)
opp_free_cpufreq_table
opp_free_cpufreq_table
cpu_dev
cpu_dev
&freq_table
freq_table
freq_table
out_put_node:	of_node_put(np);
out_put_node
of_node_put(np);
of_node_put(np)
of_node_put
of_node_put
np
np
return ret;
ret
ret
-----joern-----
(149,39,0)
(17,1,0)
(78,4,0)
(79,19,0)
(124,69,0)
(85,72,0)
(9,132,0)
(130,90,0)
(102,72,0)
(16,39,0)
(57,15,0)
(118,150,0)
(132,9,0)
(0,54,0)
(106,187,0)
(100,4,0)
(145,178,0)
(174,125,0)
(60,128,0)
(168,70,0)
(100,30,0)
(166,187,0)
(62,83,0)
(167,30,0)
(20,102,0)
(88,46,0)
(170,187,0)
(138,130,0)
(38,100,0)
(186,83,0)
(53,46,0)
(134,142,0)
(91,120,0)
(110,150,0)
(92,66,0)
(34,40,0)
(3,39,0)
(83,8,0)
(77,86,0)
(98,26,0)
(197,66,0)
(36,112,0)
(113,83,0)
(112,36,0)
(26,165,0)
(194,46,0)
(95,187,0)
(128,80,0)
(21,139,0)
(31,74,0)
(157,11,0)
(165,26,0)
(27,46,0)
(125,46,0)
(120,91,0)
(28,91,0)
(56,187,0)
(67,14,0)
(148,8,0)
(87,187,0)
(96,74,0)
(113,23,0)
(24,121,0)
(51,37,0)
(82,187,0)
(80,46,0)
(172,65,0)
(23,113,0)
(193,58,0)
(190,97,0)
(94,74,0)
(136,163,0)
(169,48,0)
(12,142,0)
(113,95,0)
(121,24,0)
(113,72,0)
(53,164,0)
(23,178,0)
(28,187,0)
(33,90,0)
(178,74,0)
(74,125,0)
(104,130,0)
(68,189,0)
(189,68,0)
(175,23,0)
(128,191,0)
(95,21,0)
(55,108,0)
(188,144,0)
(154,162,0)
(93,46,0)
(126,187,0)
(160,72,0)
(25,118,0)
(102,95,0)
(30,142,0)
(189,39,0)
(161,95,0)
(137,80,0)
(107,52,0)
(177,22,0)
(89,187,0)
(132,80,0)
(101,197,0)
(138,191,0)
(149,24,0)
(131,149,0)
(171,28,0)
(147,30,0)
(90,142,0)
(144,141,0)
(191,138,0)
(125,19,0)
(66,197,0)
(10,109,0)
(65,164,0)
(102,83,0)
(16,22,0)
(102,144,0)
(113,144,0)
(70,107,0)
(8,187,0)
(91,28,0)
(90,130,0)
(122,90,0)
(73,138,0)
(139,21,0)
(19,53,0)
(155,58,0)
(178,46,0)
(163,187,0)
(21,95,0)
(162,196,0)
(15,178,0)
(97,107,0)
(135,141,0)
(65,26,0)
(151,165,0)
(183,69,0)
(50,132,0)
(64,36,0)
(118,24,0)
(117,107,0)
(26,65,0)
(14,187,0)
(19,125,0)
(115,164,0)
(140,70,0)
(30,100,0)
(32,196,0)
(111,120,0)
(40,14,0)
(29,53,0)
(133,52,0)
(184,43,0)
(149,187,0)
(6,36,0)
(114,191,0)
(102,113,0)
(75,16,0)
(99,46,0)
(119,187,0)
(2,113,0)
(107,97,0)
(42,11,0)
(49,197,0)
(113,1,0)
(84,144,0)
(39,189,0)
(66,187,0)
(164,53,0)
(139,105,0)
(4,100,0)
(176,135,0)
(180,142,0)
(39,187,0)
(59,128,0)
(123,139,0)
(149,107,0)
(152,68,0)
(41,187,0)
(35,124,0)
(76,23,0)
(113,66,0)
(44,189,0)
(58,1,0)
(195,46,0)
(47,48,0)
(185,187,0)
(5,139,0)
(196,162,0)
(129,187,0)
(20,183,0)
(103,9,0)
(156,15,0)
(48,43,0)
(48,28,0)
(173,164,0)
(54,187,0)
(80,128,0)
(24,187,0)
(182,24,0)
(143,46,0)
(61,112,0)
(149,28,0)
(164,65,0)
(1,187,0)
(18,165,0)
(192,121,0)
(146,16,0)
(127,185,0)
(45,11,0)
(181,102,0)
(130,138,0)
(7,187,0)
(102,66,0)
(70,52,0)
(74,178,0)
(81,196,0)
(1,58,0)
(20,149,0)
(196,187,0)
(9,46,0)
(37,183,0)
(116,134,0)
(74,9,0)
(102,1,0)
(14,40,0)
(191,128,0)
(102,187,0)
(63,46,0)
(159,118,0)
(61,64,1)
(182,144,1)
(36,112,1)
(124,35,1)
(71,39,1)
(148,83,1)
(4,78,1)
(17,8,1)
(83,62,1)
(30,167,1)
(157,45,1)
(62,186,1)
(127,110,1)
(48,47,1)
(127,177,1)
(158,24,1)
(81,32,1)
(72,160,1)
(113,1,1)
(178,74,1)
(149,107,1)
(118,25,1)
(136,179,1)
(20,102,1)
(14,40,1)
(28,91,1)
(75,146,1)
(116,4,1)
(50,103,1)
(139,105,1)
(57,178,1)
(191,138,1)
(20,149,1)
(113,72,1)
(11,157,1)
(79,174,1)
(60,191,1)
(26,165,1)
(65,26,1)
(113,66,1)
(35,109,1)
(51,124,1)
(159,158,1)
(102,72,1)
(20,183,1)
(128,60,1)
(115,29,1)
(33,104,1)
(59,137,1)
(153,36,1)
(160,85,1)
(102,83,1)
(138,130,1)
(194,4,1)
(78,100,1)
(80,128,1)
(134,116,1)
(49,92,1)
(19,53,1)
(132,80,1)
(138,73,1)
(102,95,1)
(29,194,1)
(47,169,1)
(161,109,1)
(133,70,1)
(34,67,1)
(92,108,1)
(104,59,1)
(76,175,1)
(149,131,1)
(127,133,1)
(139,123,1)
(102,113,1)
(96,31,1)
(196,162,1)
(152,44,1)
(44,3,1)
(181,163,1)
(153,72,1)
(90,142,1)
(84,188,1)
(70,107,1)
(95,21,1)
(74,125,1)
(171,153,1)
(130,90,1)
(32,71,1)
(144,84,1)
(122,33,1)
(177,16,1)
(131,185,1)
(3,158,1)
(171,113,1)
(86,77,1)
(64,6,1)
(58,155,1)
(4,100,1)
(113,144,1)
(94,145,1)
(185,127,1)
(193,17,1)
(176,86,1)
(26,98,1)
(114,138,1)
(40,34,1)
(113,23,1)
(192,182,1)
(100,30,1)
(2,15,1)
(171,15,1)
(155,193,1)
(102,144,1)
(74,9,1)
(31,94,1)
(135,176,1)
(156,57,1)
(16,39,1)
(107,97,1)
(45,42,1)
(182,86,1)
(5,161,1)
(173,65,1)
(70,168,1)
(167,147,1)
(113,95,1)
(112,61,1)
(55,1,1)
(98,165,1)
(25,159,1)
(102,1,1)
(108,55,1)
(140,107,1)
(30,142,1)
(66,197,1)
(103,80,1)
(8,148,1)
(73,130,1)
(169,179,1)
(111,171,1)
(164,65,1)
(6,196,1)
(142,180,1)
(146,71,1)
(101,49,1)
(13,11,1)
(68,152,1)
(147,134,1)
(154,81,1)
(143,9,1)
(97,190,1)
(18,115,1)
(172,26,1)
(23,178,1)
(186,95,1)
(168,140,1)
(121,192,1)
(91,120,1)
(164,173,1)
(23,76,1)
(165,151,1)
(19,79,1)
(113,83,1)
(9,132,1)
(15,178,1)
(123,5,1)
(39,189,1)
(137,125,1)
(149,39,1)
(74,96,1)
(65,172,1)
(183,37,1)
(149,24,1)
(1,58,1)
(189,68,1)
(102,66,1)
(179,28,1)
(197,101,1)
(180,12,1)
(128,191,1)
(100,38,1)
(53,164,1)
(145,143,1)
(188,135,1)
(127,14,1)
(190,117,1)
(16,75,1)
(24,121,1)
(162,154,1)
(48,28,1)
(149,28,1)
(85,36,1)
(102,181,1)
(184,48,1)
(15,156,1)
(77,66,1)
(163,136,1)
(117,108,1)
(110,118,1)
(147,142,1)
(38,30,1)
(12,153,1)
(132,50,1)
(120,111,1)
(175,2,1)
(118,24,1)
(21,139,1)
(125,19,1)
(134,142,1)
(151,18,1)
(10,11,1)
(67,184,1)
(109,10,1)
(90,122,1)
(37,51,1)
(10,13,1)
(191,114,1)
(174,53,1)
(3,158,2)
(113,144,2)
(127,108,2)
(156,153,2)
(9,132,2)
(103,153,2)
(25,158,2)
(189,68,2)
(113,72,2)
(18,153,2)
(19,153,2)
(16,39,2)
(90,142,2)
(66,108,2)
(40,179,2)
(51,109,2)
(65,153,2)
(23,178,2)
(67,179,2)
(101,108,2)
(149,108,2)
(197,108,2)
(102,1,2)
(191,138,2)
(57,153,2)
(35,109,2)
(149,39,2)
(137,153,2)
(79,153,2)
(107,97,2)
(146,71,2)
(128,191,2)
(142,153,2)
(116,4,2)
(149,158,2)
(139,105,2)
(176,86,2)
(127,158,2)
(134,4,2)
(118,24,2)
(21,139,2)
(138,130,2)
(185,179,2)
(169,179,2)
(160,36,2)
(38,153,2)
(74,153,2)
(78,4,2)
(55,109,2)
(162,71,2)
(39,158,2)
(168,108,2)
(4,100,2)
(61,71,2)
(128,153,2)
(113,66,2)
(130,153,2)
(30,4,2)
(16,71,2)
(84,86,2)
(23,15,2)
(149,71,2)
(120,71,2)
(178,74,2)
(185,71,2)
(111,71,2)
(158,108,2)
(152,158,2)
(5,109,2)
(102,83,2)
(107,108,2)
(29,153,2)
(31,153,2)
(196,71,2)
(90,153,2)
(100,153,2)
(100,30,2)
(113,23,2)
(62,109,2)
(182,108,2)
(191,153,2)
(30,142,2)
(17,109,2)
(136,179,2)
(145,153,2)
(83,109,2)
(30,153,2)
(181,179,2)
(123,109,2)
(24,121,2)
(77,108,2)
(36,112,2)
(174,153,2)
(37,109,2)
(80,153,2)
(96,153,2)
(20,183,2)
(102,72,2)
(60,153,2)
(72,36,2)
(117,108,2)
(167,153,2)
(102,95,2)
(165,153,2)
(125,153,2)
(53,153,2)
(14,40,2)
(6,71,2)
(48,179,2)
(50,153,2)
(1,109,2)
(124,109,2)
(113,95,2)
(175,15,2)
(39,189,2)
(132,80,2)
(133,108,2)
(80,128,2)
(173,153,2)
(95,109,2)
(190,108,2)
(100,4,2)
(68,158,2)
(180,153,2)
(196,162,2)
(1,58,2)
(122,153,2)
(78,153,2)
(153,71,2)
(163,179,2)
(34,179,2)
(28,71,2)
(66,197,2)
(171,71,2)
(164,153,2)
(36,71,2)
(108,109,2)
(125,19,2)
(161,109,2)
(114,153,2)
(33,153,2)
(149,24,2)
(149,107,2)
(110,158,2)
(38,4,2)
(24,108,2)
(138,153,2)
(132,153,2)
(178,153,2)
(95,21,2)
(59,153,2)
(20,102,2)
(91,71,2)
(4,153,2)
(172,153,2)
(28,91,2)
(14,179,2)
(9,153,2)
(118,158,2)
(113,1,2)
(85,36,2)
(130,90,2)
(184,179,2)
(131,71,2)
(186,109,2)
(134,142,2)
(71,158,2)
(32,71,2)
(113,83,2)
(149,179,2)
(121,108,2)
(112,71,2)
(102,66,2)
(47,179,2)
(81,71,2)
(155,109,2)
(144,86,2)
(185,108,2)
(131,179,2)
(20,149,2)
(149,28,2)
(76,15,2)
(73,153,2)
(53,164,2)
(48,28,2)
(92,108,2)
(70,107,2)
(91,120,2)
(127,179,2)
(64,71,2)
(113,15,2)
(189,158,2)
(21,109,2)
(102,113,2)
(102,144,2)
(97,108,2)
(86,108,2)
(193,109,2)
(183,109,2)
(164,65,2)
(44,158,2)
(192,108,2)
(140,108,2)
(4,4,2)
(177,71,2)
(131,158,2)
(26,165,2)
(139,109,2)
(135,86,2)
(147,4,2)
(98,153,2)
(74,125,2)
(104,153,2)
(188,86,2)
(185,158,2)
(194,153,2)
(12,153,2)
(2,15,2)
(75,71,2)
(8,109,2)
(151,153,2)
(127,71,2)
(115,153,2)
(159,158,2)
(65,26,2)
(94,153,2)
(49,108,2)
(74,9,2)
(58,109,2)
(13,11,2)
(167,4,2)
(19,53,2)
(102,179,2)
(15,178,2)
(70,108,2)
(147,153,2)
(143,153,2)
(131,108,2)
(148,109,2)
(26,153,2)
(154,71,2)
(15,153,2)
(179,71,2)
-----------------------------------
(0,if (of_get_property(np, "operating-points", NULL)
(1,cpu_clk = devm_clk_get(cpu_dev, NULL)
(2,transition_latency)
(3,ret)
(4,freq_table[i].frequency != CPUFREQ_TABLE_END)
(5,pdev)
(6,np)
(7,if (ret)
(8,cpu_dev->of_node = np)
(9,max_uV = opp_get_voltage(opp)
(10,np)
(11,of_get_property(np, "operating-points", NULL)
(12,i)
(13,break;)
(14,opp_free_cpufreq_table(cpu_dev, &freq_table)
(15,ret > 0)
(16,pr_err("failed to init cpufreq table: %d\\n", ret)
(17,cpu_clk)
(18,freq_table)
(19,opp_get_voltage(opp)
(20,RET)
(21,&pdev->dev)
(22,)
(23,ret * 1000)
(24,ret = of_init_opp_table(cpu_dev)
(25,ret)
(26,freq_table[0].frequency)
(27,for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)
(28,ret = cpufreq_register_driver(&cpu0_cpufreq_driver)
(29,opp)
(30,freq_table[i])
(31,min_uV)
(32,np)
(33,i)
(34,freq_table)
(35,"failed to find cpu0 node\\n")
(36,of_property_read_u32(np, "clock-latency", &transition_latency)
(37,-ENOENT)
(38,frequency)
(39,ret = opp_init_cpufreq_table(cpu_dev, &freq_table)
(40,&freq_table)
(41,if (cpu_reg)
(42,np)
(43,)
(44,cpu_dev)
(45,"operating-points")
(46,)
(47,ret)
(48,pr_err("failed register driver: %d\\n", ret)
(49,cpu_dev)
(50,opp)
(51,ENOENT)
(52,)
(53,opp = opp_find_freq_exact(cpu_dev,\n\\n\\t\\t\\t\\tfreq_table[0].frequency * 1000, true)
(54,)
(55,cpu_clk)
(56,np)
(57,ret)
(58,devm_clk_get(cpu_dev, NULL)
(59,cpu_dev)
(60,true)
(61,transition_latency)
(62,of_node)
(63,opp)
(64,"clock-latency")
(65,freq_table[0].frequency * 1000)
(66,cpu_reg = devm_regulator_get(cpu_dev, "cpu0")
(67,cpu_dev)
(68,&freq_table)
(69,)
(70,pr_err("failed to get cpu0 clock: %d\\n", ret)
(71,ret)
(72,transition_latency = CPUFREQ_ETERNAL)
(73,frequency)
(74,regulator_set_voltage_time(cpu_reg, min_uV, max_uV)
(75,ret)
(76,1000)
(77,cpu_reg)
(78,CPUFREQ_TABLE_END)
(79,opp)
(80,opp = opp_find_freq_exact(cpu_dev,\n\\n\\t\\t\\t\\tfreq_table[i-1].frequency * 1000, true)
(81,"voltage-tolerance")
(82,if (ret)
(83,cpu_dev->of_node)
(84,NULL)
(85,transition_latency)
(86,IS_ERR(cpu_reg)
(87,out_free_table:)
(88,i)
(89,if (IS_ERR(cpu_reg)
(90,i-1)
(91,cpufreq_register_driver(&cpu0_cpufreq_driver)
(92,cpu_reg)
(93,max_uV)
(94,cpu_reg)
(95,cpu_dev = &pdev->dev)
(96,max_uV)
(97,PTR_ERR(cpu_clk)
(98,frequency)
(99,min_uV)
(100,freq_table[i].frequency)
(101,"cpu0")
(102,return 0;)
(103,max_uV)
(104,freq_table)
(105,struct platform_device *pdev)
(106,ret)
(107,ret = PTR_ERR(cpu_clk)
(108,IS_ERR(cpu_clk)
(109,!np)
(110,goto out_put_node;)
(111,cpu0_cpufreq_driver)
(112,&transition_latency)
(113,transition_latency += ret * 1000)
(114,1000)
(115,cpu_dev)
(116,i)
(117,ret)
(118,pr_err("failed to init OPP table: %d\\n", ret)
(119,out_put_node:)
(120,&cpu0_cpufreq_driver)
(121,of_init_opp_table(cpu_dev)
(122,1)
(123,dev)
(124,pr_err("failed to find cpu0 node\\n")
(125,min_uV = opp_get_voltage(opp)
(126,if (ret)
(127,np)
(128,opp_find_freq_exact(cpu_dev,\n\\n\\t\\t\\t\\tfreq_table[i-1].frequency * 1000, true)
(129,if (of_property_read_u32(np, "clock-latency", &transition_latency)
(130,freq_table[i-1])
(131,ret)
(132,opp_get_voltage(opp)
(133,goto out_put_node;)
(134,i++)
(135,pr_warn("failed to get cpu0 regulator\\n")
(136,np)
(137,opp)
(138,freq_table[i-1].frequency)
(139,pdev->dev)
(140,"failed to get cpu0 clock: %d\\n")
(141,)
(142,i = 0)
(143,rcu_read_unlock()
(144,cpu_reg = NULL)
(145,ret)
(146,"failed to init cpufreq table: %d\\n")
(147,freq_table)
(148,np)
(149,return ret;)
(150,)
(151,0)
(152,freq_table)
(153,cpu_reg)
(154,voltage_tolerance)
(155,NULL)
(156,0)
(157,NULL)
(158,ret)
(159,"failed to init OPP table: %d\\n")
(160,CPUFREQ_ETERNAL)
(161,cpu_dev)
(162,&voltage_tolerance)
(163,of_node_put(np)
(164,opp_find_freq_exact(cpu_dev,\n\\n\\t\\t\\t\\tfreq_table[0].frequency * 1000, true)
(165,freq_table[0])
(166,if (!np)
(167,i)
(168,ret)
(169,"failed register driver: %d\\n")
(170,if (IS_ERR(cpu_clk)
(171,ret)
(172,1000)
(173,true)
(174,min_uV)
(175,ret)
(176,"failed to get cpu0 regulator\\n")
(177,goto out_put_node;)
(178,ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV)
(179,ret)
(180,0)
(181,0)
(182,ret)
(183,return -ENOENT;)
(184,goto out_free_table;)
(185,of_node_put(np)
(186,cpu_dev)
(187,)
(188,cpu_reg)
(189,opp_init_cpufreq_table(cpu_dev, &freq_table)
(190,cpu_clk)
(191,freq_table[i-1].frequency * 1000)
(192,cpu_dev)
(193,cpu_dev)
(194,rcu_read_lock()
(195,if (ret > 0)
(196,of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance)
(197,devm_regulator_get(cpu_dev, "cpu0")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^