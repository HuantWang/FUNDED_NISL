-----label-----
1
-----code-----
const struct firmware *
nvhost_client_request_firmware(struct platform_device *dev, const char *fw_name)
{
	struct nvhost_chip_support *op = nvhost_get_chip_ops();
	const struct firmware *fw;
	char *fw_path = NULL;
	int path_len, err;

	if (!fw_name)
		return NULL;

	if (op->soc_name) {
		path_len = strlen(fw_name) + strlen(op->soc_name);
		path_len += 2; /* for the path separator and zero terminator*/

		fw_path = kzalloc(sizeof(*fw_path) * path_len,
				     GFP_KERNEL);
		if (!fw_path)
			return NULL;

		sprintf(fw_path, "%s/%s", op->soc_name, fw_name);
		fw_name = fw_path;
	}

	err = request_firmware(&fw, fw_name, &dev->dev);
	kfree(fw_path);
	if (err) {
		dev_err(&dev->dev, "failed to get firmware\n");
		return NULL;
	}

	/* note: caller must release_firmware */
	return fw;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
15,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
46,47
47,48
47,49
47,50
49,50
51,52
53,54
53,55
54,55
55,56
57,58
58,59
60,61
60,62
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
79,80
79,81
80,81
83,84
84,85
84,86
85,86
88,89
89,90
89,91
90,91
92,93
92,94
92,95
93,94
95,96
95,97
96,97
97,98
98,99
99,100
101,102
103,104
105,106
105,107
106,107
107,108
109,110
110,111
112,113
113,114
113,115
113,116
113,117
113,118
114,115
116,117
119,120
119,121
120,121
123,124
125,126
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
135,136
135,137
135,138
135,139
136,137
138,139
139,140
141,142
143,144
144,145
144,146
145,146
148,149
149,150
149,151
150,151
152,153
154,155
154,156
155,156
157,158
157,159
158,159
159,160
159,161
159,162
160,161
162,163
163,164
163,165
164,165
168,169
169,170
171,172
172,173
-----nextToken-----
3,5,6,9,11,12,14,16,17,22,24,25,29,33,35,36,39,41,42,45,48,50,52,56,59,63,64,69,73,75,78,81,82,86,87,91,94,100,102,104,108,111,115,117,118,121,122,124,128,130,134,137,140,142,146,147,151,153,156,161,165,166,167,170,173
-----computeFrom-----
67,68
67,69
70,71
70,72
84,85
84,86
89,90
89,91
95,96
95,97
126,127
126,128
132,133
132,134
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
const struct firmware *nvhost_client_request_firmware(struct platform_device *dev, const char *fw_name){	struct nvhost_chip_support *op = nvhost_get_chip_ops();	const struct firmware *fw;	char *fw_path = NULL;	int path_len, err;	if (!fw_name)		return NULL;	if (op->soc_name) {		path_len = strlen(fw_name) + strlen(op->soc_name);		path_len += 2; /* for the path separator and zero terminator*/		fw_path = kzalloc(sizeof(*fw_path) * path_len,				     GFP_KERNEL);		if (!fw_path)			return NULL;		sprintf(fw_path, "%s/%s", op->soc_name, fw_name);		fw_name = fw_path;	}	err = request_firmware(&fw, fw_name, &dev->dev);	kfree(fw_path);	if (err) {		dev_err(&dev->dev, "failed to get firmware\n");		return NULL;	}	/* note: caller must release_firmware */	return fw;}
const struct firmware
firmware
*nvhost_client_request_firmware(struct platform_device *dev, const char *fw_name)
*
nvhost_client_request_firmware
struct platform_device *dev
struct platform_device
platform_device
*dev
*
dev
const char *fw_name
const char
*fw_name
*
fw_name
{	struct nvhost_chip_support *op = nvhost_get_chip_ops();	const struct firmware *fw;	char *fw_path = NULL;	int path_len, err;	if (!fw_name)		return NULL;	if (op->soc_name) {		path_len = strlen(fw_name) + strlen(op->soc_name);		path_len += 2; /* for the path separator and zero terminator*/		fw_path = kzalloc(sizeof(*fw_path) * path_len,				     GFP_KERNEL);		if (!fw_path)			return NULL;		sprintf(fw_path, "%s/%s", op->soc_name, fw_name);		fw_name = fw_path;	}	err = request_firmware(&fw, fw_name, &dev->dev);	kfree(fw_path);	if (err) {		dev_err(&dev->dev, "failed to get firmware\n");		return NULL;	}	/* note: caller must release_firmware */	return fw;}
struct nvhost_chip_support *op = nvhost_get_chip_ops();
struct nvhost_chip_support *op = nvhost_get_chip_ops();
struct nvhost_chip_support
nvhost_chip_support
*op = nvhost_get_chip_ops()
*
op
= nvhost_get_chip_ops()
nvhost_get_chip_ops()
nvhost_get_chip_ops
nvhost_get_chip_ops
const struct firmware *fw;
const struct firmware *fw;
const struct firmware
firmware
*fw
*
fw
char *fw_path = NULL;
char *fw_path = NULL;
char
*fw_path = NULL
*
fw_path
= NULL
NULL
NULL
int path_len, err;
int path_len, err;
int
path_len
path_len
err
err
if (!fw_name)		return NULL;
!fw_name
fw_name
fw_name
return NULL;
NULL
NULL
if (op->soc_name) {		path_len = strlen(fw_name) + strlen(op->soc_name);		path_len += 2; /* for the path separator and zero terminator*/		fw_path = kzalloc(sizeof(*fw_path) * path_len,				     GFP_KERNEL);		if (!fw_path)			return NULL;		sprintf(fw_path, "%s/%s", op->soc_name, fw_name);		fw_name = fw_path;	}
op->soc_name
op
op
soc_name
{		path_len = strlen(fw_name) + strlen(op->soc_name);		path_len += 2; /* for the path separator and zero terminator*/		fw_path = kzalloc(sizeof(*fw_path) * path_len,				     GFP_KERNEL);		if (!fw_path)			return NULL;		sprintf(fw_path, "%s/%s", op->soc_name, fw_name);		fw_name = fw_path;	}
path_len = strlen(fw_name) + strlen(op->soc_name);
path_len = strlen(fw_name) + strlen(op->soc_name)
path_len
path_len
strlen(fw_name) + strlen(op->soc_name)
strlen(fw_name)
strlen
strlen
fw_name
fw_name
strlen(op->soc_name)
strlen
strlen
op->soc_name
op
op
soc_name
path_len += 2;
path_len += 2
path_len
path_len
2
fw_path = kzalloc(sizeof(*fw_path) * path_len,				     GFP_KERNEL);
fw_path = kzalloc(sizeof(*fw_path) * path_len,				     GFP_KERNEL)
fw_path
fw_path
kzalloc(sizeof(*fw_path) * path_len,				     GFP_KERNEL)
kzalloc
kzalloc
sizeof(*fw_path) * path_len
sizeof(*fw_path)
(*fw_path)
*fw_path
fw_path
fw_path
path_len
path_len
GFP_KERNEL
GFP_KERNEL
if (!fw_path)			return NULL;
!fw_path
fw_path
fw_path
return NULL;
NULL
NULL
sprintf(fw_path, "%s/%s", op->soc_name, fw_name);
sprintf(fw_path, "%s/%s", op->soc_name, fw_name)
sprintf
sprintf
fw_path
fw_path
"%s/%s"
op->soc_name
op
op
soc_name
fw_name
fw_name
fw_name = fw_path;
fw_name = fw_path
fw_name
fw_name
fw_path
fw_path
err = request_firmware(&fw, fw_name, &dev->dev);
err = request_firmware(&fw, fw_name, &dev->dev)
err
err
request_firmware(&fw, fw_name, &dev->dev)
request_firmware
request_firmware
&fw
fw
fw
fw_name
fw_name
&dev->dev
dev->dev
dev
dev
dev
kfree(fw_path);
kfree(fw_path)
kfree
kfree
fw_path
fw_path
if (err) {		dev_err(&dev->dev, "failed to get firmware\n");		return NULL;	}
err
err
{		dev_err(&dev->dev, "failed to get firmware\n");		return NULL;	}
dev_err(&dev->dev, "failed to get firmware\n");
dev_err(&dev->dev, "failed to get firmware\n")
dev_err
dev_err
&dev->dev
dev->dev
dev
dev
dev
"failed to get firmware\n"
return NULL;
NULL
NULL
return fw;
fw
fw
-----joern-----
(30,32,0)
(24,84,0)
(39,20,0)
(57,62,0)
(83,0,0)
(62,33,0)
(8,33,0)
(69,84,0)
(31,36,0)
(20,39,0)
(28,76,0)
(70,33,0)
(10,33,0)
(0,12,0)
(23,79,0)
(83,64,0)
(6,64,0)
(16,13,0)
(49,79,0)
(43,20,0)
(75,61,0)
(34,2,0)
(84,81,0)
(6,56,0)
(71,36,0)
(72,35,0)
(67,56,0)
(79,49,0)
(79,35,0)
(44,80,0)
(42,2,0)
(76,35,0)
(11,10,0)
(55,60,0)
(76,41,0)
(75,37,0)
(45,78,0)
(32,35,0)
(7,6,0)
(17,65,0)
(31,65,0)
(3,42,0)
(31,13,0)
(78,56,0)
(56,58,0)
(59,62,0)
(38,76,0)
(42,41,0)
(75,12,0)
(21,33,0)
(54,9,0)
(0,83,0)
(50,33,0)
(18,44,0)
(64,6,0)
(61,33,0)
(39,75,0)
(27,75,0)
(10,62,0)
(83,2,0)
(32,12,0)
(75,39,0)
(31,53,0)
(49,42,0)
(40,49,0)
(47,44,0)
(2,41,0)
(32,60,0)
(73,62,0)
(85,32,0)
(61,75,0)
(84,69,0)
(64,83,0)
(1,51,0)
(29,33,0)
(4,73,0)
(77,6,0)
(60,32,0)
(48,61,0)
(19,0,0)
(49,52,0)
(15,33,0)
(69,44,0)
(36,81,0)
(13,33,0)
(20,80,0)
(52,73,0)
(35,79,0)
(9,12,0)
(44,69,0)
(75,76,0)
(46,33,0)
(52,49,0)
(37,75,0)
(26,78,0)
(2,83,0)
(82,60,0)
(58,56,0)
(14,32,0)
(56,33,0)
(60,56,0)
(76,12,0)
(5,53,0)
(25,33,0)
(10,35,0)
(32,41,0)
(51,35,0)
(74,41,0)
(68,20,0)
(73,52,0)
(22,42,0)
(66,37,0)
(35,41,0)
(49,40,1)
(20,68,1)
(6,77,1)
(31,13,1)
(9,54,1)
(75,76,1)
(66,48,1)
(73,4,1)
(55,30,1)
(38,28,1)
(54,62,1)
(43,27,1)
(42,3,1)
(16,63,1)
(18,47,1)
(26,9,1)
(4,72,1)
(58,67,1)
(35,79,1)
(47,63,1)
(60,56,1)
(72,42,1)
(20,80,1)
(76,12,1)
(10,35,1)
(56,58,1)
(24,69,1)
(0,12,1)
(39,20,1)
(22,2,1)
(85,51,1)
(31,36,1)
(17,9,1)
(48,78,1)
(49,42,1)
(77,7,1)
(64,6,1)
(34,78,1)
(78,45,1)
(75,37,1)
(40,52,1)
(59,56,1)
(0,19,1)
(6,56,1)
(71,84,1)
(23,49,1)
(10,11,1)
(73,62,1)
(69,44,1)
(30,85,1)
(60,82,1)
(62,57,1)
(84,24,1)
(32,60,1)
(84,69,1)
(53,5,1)
(52,73,1)
(1,35,1)
(76,35,1)
(37,66,1)
(82,55,1)
(32,12,1)
(49,52,1)
(44,18,1)
(79,49,1)
(51,1,1)
(48,76,1)
(83,64,1)
(65,17,1)
(75,12,1)
(51,35,1)
(45,26,1)
(78,56,1)
(79,23,1)
(36,71,1)
(42,2,1)
(75,39,1)
(13,16,1)
(5,51,1)
(31,53,1)
(57,59,1)
(83,0,1)
(7,0,1)
(19,34,1)
(61,75,1)
(27,37,1)
(31,65,1)
(9,12,1)
(14,60,1)
(32,14,1)
(28,32,1)
(76,38,1)
(3,22,1)
(2,83,1)
(63,10,1)
(44,80,1)
(32,35,1)
(10,62,1)
(11,61,1)
(68,43,1)
(44,80,2)
(20,51,2)
(44,63,2)
(68,78,2)
(32,35,2)
(42,78,2)
(79,49,2)
(83,0,2)
(24,63,2)
(19,78,2)
(52,73,2)
(76,35,2)
(39,51,2)
(32,51,2)
(56,58,2)
(37,78,2)
(69,44,2)
(71,63,2)
(2,83,2)
(84,69,2)
(31,53,2)
(10,35,2)
(72,78,2)
(2,78,2)
(55,51,2)
(36,63,2)
(75,12,2)
(6,56,2)
(60,51,2)
(48,51,2)
(76,51,2)
(9,12,2)
(10,78,2)
(75,39,2)
(82,51,2)
(16,63,2)
(30,51,2)
(23,78,2)
(66,78,2)
(14,51,2)
(77,78,2)
(22,78,2)
(79,78,2)
(68,51,2)
(38,51,2)
(35,78,2)
(45,9,2)
(49,52,2)
(11,78,2)
(83,64,2)
(78,9,2)
(52,78,2)
(28,51,2)
(7,78,2)
(49,78,2)
(39,78,2)
(43,78,2)
(61,75,2)
(76,12,2)
(85,51,2)
(1,78,2)
(75,76,2)
(5,51,2)
(31,65,2)
(34,78,2)
(64,6,2)
(31,36,2)
(4,78,2)
(27,78,2)
(66,51,2)
(32,60,2)
(6,78,2)
(40,78,2)
(27,51,2)
(84,63,2)
(83,78,2)
(0,78,2)
(75,78,2)
(49,42,2)
(10,51,2)
(3,78,2)
(10,62,2)
(39,20,2)
(47,63,2)
(32,12,2)
(48,78,2)
(35,79,2)
(53,51,2)
(65,9,2)
(73,62,2)
(75,37,2)
(31,13,2)
(78,56,2)
(18,63,2)
(61,51,2)
(51,78,2)
(0,12,2)
(75,51,2)
(26,9,2)
(69,63,2)
(20,80,2)
(13,63,2)
(17,9,2)
(37,51,2)
(11,51,2)
(61,78,2)
(73,78,2)
(63,51,2)
(63,78,2)
(42,2,2)
(64,78,2)
(51,35,2)
(43,51,2)
(60,56,2)
(20,78,2)
-----------------------------------
(0,strlen(fw_name)
(1,fw_path)
(2,path_len = strlen(fw_name)
(3,2)
(4,fw_path)
(5,NULL)
(6,op->soc_name)
(7,op)
(8,path_len)
(9,!fw_name)
(10,kfree(fw_path)
(11,fw_path)
(12,const char *fw_name)
(13,return fw;)
(14,fw_name)
(15,fw)
(16,fw)
(17,NULL)
(18,dev)
(19,fw_name)
(20,dev->dev)
(21,err)
(22,path_len)
(23,GFP_KERNEL)
(24,"failed to get firmware\\n")
(25,if (op->soc_name)
(26,op)
(27,fw_name)
(28,fw_name)
(29,if (!fw_name)
(30,"%s/%s")
(31,RET)
(32,sprintf(fw_path, "%s/%s", op->soc_name, fw_name)
(33,)
(34,path_len)
(35,fw_path = kzalloc(sizeof(*fw_path)
(36,return NULL;)
(37,&fw)
(38,fw_path)
(39,&dev->dev)
(40,path_len)
(41,)
(42,path_len += 2)
(43,dev)
(44,dev->dev)
(45,soc_name)
(46,if (err)
(47,dev)
(48,err)
(49,sizeof(*fw_path)
(50,op)
(51,!fw_path)
(52,sizeof(*fw_path)
(53,return NULL;)
(54,fw_name)
(55,op)
(56,*op = nvhost_get_chip_ops()
(57,NULL)
(58,nvhost_get_chip_ops()
(59,fw_path)
(60,op->soc_name)
(61,err = request_firmware(&fw, fw_name, &dev->dev)
(62,*fw_path = NULL)
(63,err)
(64,strlen(op->soc_name)
(65,return NULL;)
(66,fw)
(67,op)
(68,dev)
(69,&dev->dev)
(70,fw_path)
(71,NULL)
(72,fw_path)
(73,*fw_path)
(74,if (!fw_path)
(75,request_firmware(&fw, fw_name, &dev->dev)
(76,fw_name = fw_path)
(77,soc_name)
(78,op->soc_name)
(79,kzalloc(sizeof(*fw_path)
(80,struct platform_device *dev)
(81,)
(82,soc_name)
(83,strlen(fw_name)
(84,dev_err(&dev->dev, "failed to get firmware\\n")
(85,fw_path)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^