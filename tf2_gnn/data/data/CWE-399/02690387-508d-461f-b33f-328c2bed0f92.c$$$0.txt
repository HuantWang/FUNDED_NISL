-----label-----
1
-----code-----
VOS_STATUS
WLANBAP_GetCurrentChannel
(
  ptBtampContext  pBtampCtx,
  v_U32_t *channel, // return current channel here
  v_U32_t *activeFlag   // return active flag here
)
{
  //v_U32_t cb_enabled;
  tHalHandle halHandle;

  /*------------------------------------------------------------------------
    Sanity check BAP control block
   ------------------------------------------------------------------------*/

  if (( NULL == pBtampCtx ) || (NULL == channel) || (NULL == activeFlag))
  {
    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,
                 "Invalid BAP pointer in %s", __FUNCTION__);
    return VOS_STATUS_E_FAULT;
  }

  halHandle =  VOS_GET_HAL_CB(pBtampCtx->pvosGCtx);

  if(NULL == halHandle)
  {
     VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,
                  "halHandle is NULL in %s", __FUNCTION__);
     return VOS_STATUS_E_FAULT;
  }

  if (ccmCfgGetInt(halHandle, WNI_CFG_CURRENT_CHANNEL, channel)
          != eHAL_STATUS_SUCCESS )
  {
    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,
                 "Get CFG failed in %s", __FUNCTION__);
    return VOS_STATUS_E_FAULT;
  }

  *activeFlag  = FALSE;  // return active flag here

  return VOS_STATUS_SUCCESS;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
24,25
25,26
25,27
26,27
28,29
30,31
30,32
31,32
31,33
32,33
32,34
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
51,52
51,53
52,53
53,54
53,55
53,56
53,57
53,58
54,55
56,57
58,59
61,62
63,64
64,65
66,67
67,68
67,69
68,69
70,71
70,72
71,72
73,74
73,75
74,75
77,78
77,79
78,79
78,80
79,80
81,82
83,84
83,85
84,85
85,86
85,87
85,88
85,89
85,90
86,87
88,89
90,91
93,94
95,96
96,97
98,99
98,100
99,100
99,101
100,101
100,102
100,103
100,104
101,102
103,104
105,106
107,108
109,110
111,112
111,113
112,113
113,114
113,115
113,116
113,117
113,118
114,115
116,117
118,119
121,122
123,124
124,125
126,127
127,128
127,129
128,129
129,130
131,132
133,134
134,135
-----nextToken-----
3,5,8,10,13,15,16,19,21,22,27,29,36,38,42,44,48,50,55,57,59,60,62,65,69,72,75,76,80,82,87,89,91,92,94,97,102,104,106,108,110,115,117,119,120,122,125,130,132,135
-----computeFrom-----
31,32
31,33
32,33
32,34
34,35
34,36
40,41
40,42
46,47
46,48
67,68
67,69
78,79
78,80
99,100
99,101
127,128
127,129
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
VOS_STATUSWLANBAP_GetCurrentChannel(  ptBtampContext  pBtampCtx,  v_U32_t *channel, // return current channel here  v_U32_t *activeFlag   // return active flag here){  //v_U32_t cb_enabled;  tHalHandle halHandle;  /*------------------------------------------------------------------------    Sanity check BAP control block   ------------------------------------------------------------------------*/  if (( NULL == pBtampCtx ) || (NULL == channel) || (NULL == activeFlag))  {    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Invalid BAP pointer in %s", __FUNCTION__);    return VOS_STATUS_E_FAULT;  }  halHandle =  VOS_GET_HAL_CB(pBtampCtx->pvosGCtx);  if(NULL == halHandle)  {     VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "halHandle is NULL in %s", __FUNCTION__);     return VOS_STATUS_E_FAULT;  }  if (ccmCfgGetInt(halHandle, WNI_CFG_CURRENT_CHANNEL, channel)          != eHAL_STATUS_SUCCESS )  {    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Get CFG failed in %s", __FUNCTION__);    return VOS_STATUS_E_FAULT;  }  *activeFlag  = FALSE;  // return active flag here  return VOS_STATUS_SUCCESS;}
VOS_STATUS
VOS_STATUS
WLANBAP_GetCurrentChannel(  ptBtampContext  pBtampCtx,  v_U32_t *channel, // return current channel here  v_U32_t *activeFlag   // return active flag here)
WLANBAP_GetCurrentChannel
ptBtampContext  pBtampCtx
ptBtampContext
ptBtampContext
pBtampCtx
pBtampCtx
v_U32_t *channel
v_U32_t
v_U32_t
*channel
*
channel
v_U32_t *activeFlag
v_U32_t
v_U32_t
*activeFlag
*
activeFlag
{  //v_U32_t cb_enabled;  tHalHandle halHandle;  /*------------------------------------------------------------------------    Sanity check BAP control block   ------------------------------------------------------------------------*/  if (( NULL == pBtampCtx ) || (NULL == channel) || (NULL == activeFlag))  {    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Invalid BAP pointer in %s", __FUNCTION__);    return VOS_STATUS_E_FAULT;  }  halHandle =  VOS_GET_HAL_CB(pBtampCtx->pvosGCtx);  if(NULL == halHandle)  {     VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "halHandle is NULL in %s", __FUNCTION__);     return VOS_STATUS_E_FAULT;  }  if (ccmCfgGetInt(halHandle, WNI_CFG_CURRENT_CHANNEL, channel)          != eHAL_STATUS_SUCCESS )  {    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Get CFG failed in %s", __FUNCTION__);    return VOS_STATUS_E_FAULT;  }  *activeFlag  = FALSE;  // return active flag here  return VOS_STATUS_SUCCESS;}
tHalHandle halHandle;
tHalHandle halHandle;
tHalHandle
tHalHandle
halHandle
halHandle
if (( NULL == pBtampCtx ) || (NULL == channel) || (NULL == activeFlag))  {    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Invalid BAP pointer in %s", __FUNCTION__);    return VOS_STATUS_E_FAULT;  }
( NULL == pBtampCtx ) || (NULL == channel) || (NULL == activeFlag)
( NULL == pBtampCtx ) || (NULL == channel)
( NULL == pBtampCtx )
NULL == pBtampCtx
NULL
NULL
pBtampCtx
pBtampCtx
(NULL == channel)
NULL == channel
NULL
NULL
channel
channel
(NULL == activeFlag)
NULL == activeFlag
NULL
NULL
activeFlag
activeFlag
{    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Invalid BAP pointer in %s", __FUNCTION__);    return VOS_STATUS_E_FAULT;  }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Invalid BAP pointer in %s", __FUNCTION__);
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Invalid BAP pointer in %s", __FUNCTION__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"Invalid BAP pointer in %s"
__FUNCTION__
__FUNCTION__
return VOS_STATUS_E_FAULT;
VOS_STATUS_E_FAULT
VOS_STATUS_E_FAULT
halHandle =  VOS_GET_HAL_CB(pBtampCtx->pvosGCtx);
halHandle =  VOS_GET_HAL_CB(pBtampCtx->pvosGCtx)
halHandle
halHandle
VOS_GET_HAL_CB(pBtampCtx->pvosGCtx)
VOS_GET_HAL_CB
VOS_GET_HAL_CB
pBtampCtx->pvosGCtx
pBtampCtx
pBtampCtx
pvosGCtx
if(NULL == halHandle)  {     VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "halHandle is NULL in %s", __FUNCTION__);     return VOS_STATUS_E_FAULT;  }
NULL == halHandle
NULL
NULL
halHandle
halHandle
{     VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "halHandle is NULL in %s", __FUNCTION__);     return VOS_STATUS_E_FAULT;  }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "halHandle is NULL in %s", __FUNCTION__);
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "halHandle is NULL in %s", __FUNCTION__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"halHandle is NULL in %s"
__FUNCTION__
__FUNCTION__
return VOS_STATUS_E_FAULT;
VOS_STATUS_E_FAULT
VOS_STATUS_E_FAULT
if (ccmCfgGetInt(halHandle, WNI_CFG_CURRENT_CHANNEL, channel)          != eHAL_STATUS_SUCCESS )  {    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Get CFG failed in %s", __FUNCTION__);    return VOS_STATUS_E_FAULT;  }
ccmCfgGetInt(halHandle, WNI_CFG_CURRENT_CHANNEL, channel)          != eHAL_STATUS_SUCCESS
ccmCfgGetInt(halHandle, WNI_CFG_CURRENT_CHANNEL, channel)
ccmCfgGetInt
ccmCfgGetInt
halHandle
halHandle
WNI_CFG_CURRENT_CHANNEL
WNI_CFG_CURRENT_CHANNEL
channel
channel
eHAL_STATUS_SUCCESS
eHAL_STATUS_SUCCESS
{    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Get CFG failed in %s", __FUNCTION__);    return VOS_STATUS_E_FAULT;  }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Get CFG failed in %s", __FUNCTION__);
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                 "Get CFG failed in %s", __FUNCTION__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"Get CFG failed in %s"
__FUNCTION__
__FUNCTION__
return VOS_STATUS_E_FAULT;
VOS_STATUS_E_FAULT
VOS_STATUS_E_FAULT
*activeFlag  = FALSE;
*activeFlag  = FALSE
*activeFlag
activeFlag
activeFlag
FALSE
FALSE
return VOS_STATUS_SUCCESS;
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
-----joern-----
(5,55,0)
(54,43,0)
(50,51,0)
(50,12,0)
(31,53,0)
(62,3,0)
(23,31,0)
(26,5,0)
(47,52,0)
(18,4,0)
(50,5,0)
(1,30,0)
(12,6,0)
(40,32,0)
(51,50,0)
(53,4,0)
(47,51,0)
(32,10,0)
(19,5,0)
(2,47,0)
(20,29,0)
(59,30,0)
(3,48,0)
(56,29,0)
(29,4,0)
(49,16,0)
(60,4,0)
(22,57,0)
(13,30,0)
(10,53,0)
(5,50,0)
(8,4,0)
(7,0,0)
(43,53,0)
(63,41,0)
(37,4,0)
(38,12,0)
(58,49,0)
(61,18,0)
(28,30,0)
(39,53,0)
(56,6,0)
(41,16,0)
(18,56,0)
(31,55,0)
(42,3,0)
(51,47,0)
(12,50,0)
(36,45,0)
(24,47,0)
(0,48,0)
(44,49,0)
(34,49,0)
(57,14,0)
(63,57,0)
(63,0,0)
(35,3,0)
(25,12,0)
(63,18,0)
(17,49,0)
(53,10,0)
(33,4,0)
(31,45,0)
(11,41,0)
(9,32,0)
(32,52,0)
(27,31,0)
(64,3,0)
(15,43,0)
(30,14,0)
(10,32,0)
(21,31,0)
(45,31,0)
(46,56,0)
(29,20,1)
(57,22,1)
(45,36,1)
(28,43,1)
(7,3,1)
(21,27,1)
(25,38,1)
(43,53,1)
(32,52,1)
(35,64,1)
(5,55,1)
(62,35,1)
(18,61,1)
(31,21,1)
(27,23,1)
(38,5,1)
(1,13,1)
(12,6,1)
(31,53,1)
(42,51,1)
(49,58,1)
(26,19,1)
(31,55,1)
(41,11,1)
(34,45,1)
(2,24,1)
(3,62,1)
(43,54,1)
(12,25,1)
(17,44,1)
(0,7,1)
(18,56,1)
(44,34,1)
(47,2,1)
(20,56,1)
(9,39,1)
(50,12,1)
(22,30,1)
(10,32,1)
(56,46,1)
(63,41,1)
(39,51,1)
(63,18,1)
(32,40,1)
(58,17,1)
(36,31,1)
(54,15,1)
(63,57,1)
(11,49,1)
(13,28,1)
(53,10,1)
(46,45,1)
(61,29,1)
(23,43,1)
(40,9,1)
(19,47,1)
(59,1,1)
(56,6,1)
(51,47,1)
(45,31,1)
(15,53,1)
(51,50,1)
(64,42,1)
(5,26,1)
(30,59,1)
(47,52,1)
(63,0,1)
(50,5,1)
(5,47,2)
(22,43,2)
(10,32,2)
(10,51,2)
(12,6,2)
(21,43,2)
(53,10,2)
(25,5,2)
(18,45,2)
(40,51,2)
(45,43,2)
(19,47,2)
(63,0,2)
(11,45,2)
(56,45,2)
(44,45,2)
(9,51,2)
(50,47,2)
(23,43,2)
(63,57,2)
(39,51,2)
(5,55,2)
(43,53,2)
(46,45,2)
(32,51,2)
(31,55,2)
(26,47,2)
(32,52,2)
(31,53,2)
(42,51,2)
(34,45,2)
(61,45,2)
(29,45,2)
(31,43,2)
(41,45,2)
(47,52,2)
(50,5,2)
(56,6,2)
(49,45,2)
(28,43,2)
(7,51,2)
(0,51,2)
(18,56,2)
(38,5,2)
(58,45,2)
(64,51,2)
(20,45,2)
(17,45,2)
(13,43,2)
(30,43,2)
(35,51,2)
(51,47,2)
(45,31,2)
(36,43,2)
(62,51,2)
(3,51,2)
(63,41,2)
(12,5,2)
(59,43,2)
(53,51,2)
(27,43,2)
(57,43,2)
(15,51,2)
(50,12,2)
(54,51,2)
(1,43,2)
(51,50,2)
(43,51,2)
(63,18,2)
-----------------------------------
(0,return VOS_STATUS_E_FAULT;)
(1,"halHandle is NULL in %s")
(2,pBtampCtx)
(3,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,\n\\n                 "Invalid BAP pointer in %s", __FUNCTION__)
(4,)
(5,NULL == channel)
(6,v_U32_t *activeFlag)
(7,VOS_STATUS_E_FAULT)
(8,if (( NULL == pBtampCtx )
(9,pBtampCtx)
(10,VOS_GET_HAL_CB(pBtampCtx->pvosGCtx)
(11,VOS_STATUS_E_FAULT)
(12,NULL == activeFlag)
(13,VOS_TRACE_LEVEL_ERROR)
(14,)
(15,NULL)
(16,)
(17,"Get CFG failed in %s")
(18,return VOS_STATUS_SUCCESS;)
(19,NULL)
(20,FALSE)
(21,channel)
(22,VOS_STATUS_E_FAULT)
(23,halHandle)
(24,NULL)
(25,activeFlag)
(26,channel)
(27,WNI_CFG_CURRENT_CHANNEL)
(28,VOS_MODULE_ID_BAP)
(29,*activeFlag  = FALSE)
(30,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,\n\\n                  "halHandle is NULL in %s", __FUNCTION__)
(31,ccmCfgGetInt(halHandle, WNI_CFG_CURRENT_CHANNEL, channel)
(32,pBtampCtx->pvosGCtx)
(33,if(NULL == halHandle)
(34,VOS_MODULE_ID_BAP)
(35,"Invalid BAP pointer in %s")
(36,eHAL_STATUS_SUCCESS)
(37,halHandle)
(38,NULL)
(39,halHandle)
(40,pvosGCtx)
(41,return VOS_STATUS_E_FAULT;)
(42,VOS_MODULE_ID_BAP)
(43,NULL == halHandle)
(44,VOS_TRACE_LEVEL_ERROR)
(45,ccmCfgGetInt(halHandle, WNI_CFG_CURRENT_CHANNEL, channel)
(46,activeFlag)
(47,NULL == pBtampCtx)
(48,)
(49,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,\n\\n                 "Get CFG failed in %s", __FUNCTION__)
(50,(NULL == channel)
(51,( NULL == pBtampCtx )
(52,ptBtampContext  pBtampCtx)
(53,halHandle =  VOS_GET_HAL_CB(pBtampCtx->pvosGCtx)
(54,halHandle)
(55,v_U32_t *channel)
(56,*activeFlag)
(57,return VOS_STATUS_E_FAULT;)
(58,__FUNCTION__)
(59,__FUNCTION__)
(60,if (ccmCfgGetInt(halHandle, WNI_CFG_CURRENT_CHANNEL, channel)
(61,VOS_STATUS_SUCCESS)
(62,__FUNCTION__)
(63,RET)
(64,VOS_TRACE_LEVEL_ERROR)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^