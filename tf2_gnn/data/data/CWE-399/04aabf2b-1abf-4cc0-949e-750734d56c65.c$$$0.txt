-----label-----
1
-----code-----
static int acpi_nfit_register_region(struct acpi_nfit_desc *acpi_desc,
		struct nfit_spa *nfit_spa)
{
	static struct nd_mapping_desc mappings[ND_MAX_MAPPINGS];
	struct acpi_nfit_system_address *spa = nfit_spa->spa;
	struct nd_blk_region_desc ndbr_desc;
	struct nd_region_desc *ndr_desc;
	struct nfit_memdev *nfit_memdev;
	struct nvdimm_bus *nvdimm_bus;
	struct resource res;
	int count = 0, rc;

	if (nfit_spa->nd_region)
		return 0;

	if (spa->range_index == 0 && !nfit_spa_is_virtual(spa)) {
		dev_dbg(acpi_desc->dev, "detected invalid spa index\n");
		return 0;
	}

	memset(&res, 0, sizeof(res));
	memset(&mappings, 0, sizeof(mappings));
	memset(&ndbr_desc, 0, sizeof(ndbr_desc));
	res.start = spa->address;
	res.end = res.start + spa->length - 1;
	ndr_desc = &ndbr_desc.ndr_desc;
	ndr_desc->res = &res;
	ndr_desc->provider_data = nfit_spa;
	ndr_desc->attr_groups = acpi_nfit_region_attribute_groups;
	if (spa->flags & ACPI_NFIT_PROXIMITY_VALID)
		ndr_desc->numa_node = acpi_map_pxm_to_online_node(
						spa->proximity_domain);
	else
		ndr_desc->numa_node = NUMA_NO_NODE;

	/*
	 * Persistence domain bits are hierarchical, if
	 * ACPI_NFIT_CAPABILITY_CACHE_FLUSH is set then
	 * ACPI_NFIT_CAPABILITY_MEM_FLUSH is implied.
	 */
	if (acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_CACHE_FLUSH)
		set_bit(ND_REGION_PERSIST_CACHE, &ndr_desc->flags);
	else if (acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_MEM_FLUSH)
		set_bit(ND_REGION_PERSIST_MEMCTRL, &ndr_desc->flags);

	list_for_each_entry(nfit_memdev, &acpi_desc->memdevs, list) {
		struct acpi_nfit_memory_map *memdev = nfit_memdev->memdev;
		struct nd_mapping_desc *mapping;

		if (memdev->range_index != spa->range_index)
			continue;
		if (count >= ND_MAX_MAPPINGS) {
			dev_err(acpi_desc->dev, "spa%d exceeds max mappings %d\n",
					spa->range_index, ND_MAX_MAPPINGS);
			return -ENXIO;
		}
		mapping = &mappings[count++];
		rc = acpi_nfit_init_mapping(acpi_desc, mapping, ndr_desc,
				memdev, nfit_spa);
		if (rc)
			goto out;
	}

	ndr_desc->mapping = mappings;
	ndr_desc->num_mappings = count;
	rc = acpi_nfit_init_interleave_set(acpi_desc, ndr_desc, spa);
	if (rc)
		goto out;

	nvdimm_bus = acpi_desc->nvdimm_bus;
	if (nfit_spa_type(spa) == NFIT_SPA_PM) {
		rc = acpi_nfit_insert_resource(acpi_desc, ndr_desc);
		if (rc) {
			dev_warn(acpi_desc->dev,
				"failed to insert pmem resource to iomem: %d\n",
				rc);
			goto out;
		}

		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,
				ndr_desc);
		if (!nfit_spa->nd_region)
			rc = -ENOMEM;
	} else if (nfit_spa_is_volatile(spa)) {
		nfit_spa->nd_region = nvdimm_volatile_region_create(nvdimm_bus,
				ndr_desc);
		if (!nfit_spa->nd_region)
			rc = -ENOMEM;
	} else if (nfit_spa_is_virtual(spa)) {
		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,
				ndr_desc);
		if (!nfit_spa->nd_region)
			rc = -ENOMEM;
	}

 out:
	if (rc)
		dev_err(acpi_desc->dev, "failed to register spa range %d\n",
				nfit_spa->spa->range_index);
	return rc;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
17,46
17,47
17,48
17,49
18,19
19,20
19,21
20,21
22,23
22,24
24,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
31,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
53,54
53,55
54,55
56,57
56,58
59,60
60,61
60,62
61,62
63,64
63,65
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
73,76
75,76
75,77
77,78
79,80
81,82
81,83
82,83
82,84
83,84
86,87
88,89
88,90
89,90
89,91
90,91
90,92
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
102,103
102,104
103,104
104,105
104,106
104,107
105,106
107,108
107,109
108,109
112,113
114,115
115,116
115,117
115,118
115,119
116,117
118,119
119,120
122,123
123,124
124,125
126,127
127,128
127,129
127,130
127,131
128,129
130,131
131,132
134,135
135,136
136,137
138,139
139,140
139,141
139,142
139,143
140,141
142,143
143,144
146,147
147,148
148,149
150,151
151,152
151,153
152,153
152,154
153,154
156,157
156,158
157,158
160,161
161,162
161,163
162,163
162,164
163,164
166,167
166,168
167,168
167,169
168,169
168,170
169,170
172,173
172,174
173,174
177,178
178,179
178,180
179,180
181,182
182,183
182,184
183,184
186,187
187,188
187,189
188,189
188,190
189,190
192,193
193,194
195,196
196,197
196,198
197,198
197,199
198,199
201,202
203,204
204,205
204,206
205,206
205,207
206,207
209,210
211,212
211,213
211,214
212,213
212,214
213,214
213,215
214,215
217,218
219,220
220,221
220,222
221,222
221,223
222,223
225,226
225,227
226,227
228,229
228,230
229,230
232,233
233,234
233,235
234,235
234,236
235,236
238,239
240,241
240,242
240,243
241,242
241,243
242,243
242,244
243,244
246,247
248,249
249,250
249,251
249,252
250,251
252,253
254,255
255,256
255,257
256,257
259,260
259,261
260,261
260,262
261,262
261,263
262,263
265,266
267,268
268,269
268,270
268,271
269,270
271,272
273,274
274,275
274,276
275,276
278,279
279,280
279,281
279,282
279,283
280,281
282,283
284,285
285,286
285,287
286,287
289,290
291,292
292,293
292,294
292,295
292,296
292,297
292,298
292,299
293,294
294,295
294,296
295,296
297,298
297,299
297,300
300,301
301,302
301,303
302,303
305,306
306,307
306,308
307,308
309,310
309,311
312,313
312,314
313,314
313,315
314,315
314,316
315,316
318,319
318,320
319,320
323,324
323,325
324,325
324,326
325,326
327,328
329,330
329,331
330,331
331,332
331,333
331,334
331,335
331,336
332,333
334,335
334,336
335,336
339,340
339,341
340,341
343,344
345,346
346,347
347,348
349,350
350,351
350,352
351,352
353,354
354,355
354,356
355,356
357,358
358,359
360,361
361,362
361,363
362,363
364,365
364,366
364,367
364,368
364,369
364,370
365,366
367,368
369,370
371,372
373,374
375,376
377,378
377,379
378,379
380,381
382,383
383,384
383,385
384,385
384,386
385,386
388,389
390,391
391,392
391,393
392,393
392,394
393,394
396,397
398,399
399,400
399,401
400,401
402,403
402,404
402,405
402,406
403,404
405,406
407,408
409,410
411,412
411,413
412,413
414,415
416,417
417,418
417,419
418,419
420,421
420,422
421,422
424,425
424,426
424,427
425,426
425,427
426,427
426,428
427,428
429,430
431,432
433,434
433,435
433,436
433,437
434,435
435,436
435,437
436,437
438,439
438,440
438,441
439,440
441,442
443,444
445,446
445,447
446,447
448,449
448,450
449,450
450,451
450,452
450,453
450,454
451,452
453,454
453,455
454,455
458,459
460,461
462,463
463,464
463,465
464,465
464,466
465,466
468,469
468,470
468,471
469,470
471,472
473,474
475,476
475,477
476,477
477,478
477,479
478,479
481,482
482,483
482,484
483,484
485,486
486,487
488,489
488,490
488,491
489,490
489,491
490,491
492,493
494,495
494,496
495,496
496,497
496,498
497,498
497,499
498,499
501,502
501,503
501,504
502,503
504,505
506,507
508,509
508,510
509,510
510,511
510,512
511,512
514,515
515,516
515,517
516,517
518,519
519,520
521,522
521,523
522,523
522,524
523,524
525,526
527,528
527,529
528,529
529,530
529,531
530,531
530,532
531,532
534,535
534,536
534,537
535,536
537,538
539,540
541,542
541,543
542,543
543,544
543,545
544,545
547,548
548,549
548,550
549,550
551,552
552,553
554,555
554,556
556,557
556,558
557,558
559,560
560,561
560,562
560,563
560,564
561,562
563,564
563,565
564,565
568,569
568,570
569,570
569,571
570,571
574,575
575,576
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,26,30,32,33,37,38,42,44,48,50,51,55,57,58,62,64,65,69,71,74,76,78,80,84,85,87,93,94,95,99,101,106,109,110,111,113,117,120,121,125,129,132,133,137,141,144,145,149,154,155,158,159,164,165,170,171,174,175,176,180,184,185,190,191,194,199,200,202,207,208,210,215,216,218,223,224,227,230,231,236,237,239,244,245,247,251,253,257,258,263,264,266,270,272,276,277,281,283,287,288,290,296,298,299,303,304,308,310,311,316,317,320,321,322,326,328,333,336,337,338,341,342,344,348,352,356,359,363,366,368,370,372,374,376,379,381,386,387,389,394,395,397,401,404,406,408,410,413,415,419,422,423,428,430,432,437,440,442,444,447,452,455,456,457,459,461,466,467,470,472,474,479,480,484,487,491,493,499,500,503,505,507,512,513,517,520,524,526,532,533,536,538,540,545,546,550,553,555,558,562,565,566,567,571,572,573,576
-----computeFrom-----
89,90
89,91
90,91
90,92
151,152
151,153
161,162
161,163
166,167
166,168
167,168
167,169
178,179
178,180
187,188
187,189
196,197
196,198
204,205
204,206
212,213
212,214
220,221
220,222
233,234
233,235
241,242
241,243
260,261
260,262
313,314
313,315
324,325
324,326
350,351
350,352
361,362
361,363
383,384
383,385
391,392
391,393
399,400
399,401
417,418
417,419
425,426
425,427
435,436
435,437
463,464
463,465
482,483
482,484
496,497
496,498
515,516
515,517
529,530
529,531
548,549
548,550
-----guardedBy-----
215,230
328,344
-----guardedByNegation-----
244,263
245,264
430,526
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;IfStatement;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ContinueStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LabelStatement;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int acpi_nfit_register_region(struct acpi_nfit_desc *acpi_desc,		struct nfit_spa *nfit_spa){	static struct nd_mapping_desc mappings[ND_MAX_MAPPINGS];	struct acpi_nfit_system_address *spa = nfit_spa->spa;	struct nd_blk_region_desc ndbr_desc;	struct nd_region_desc *ndr_desc;	struct nfit_memdev *nfit_memdev;	struct nvdimm_bus *nvdimm_bus;	struct resource res;	int count = 0, rc;	if (nfit_spa->nd_region)		return 0;	if (spa->range_index == 0 && !nfit_spa_is_virtual(spa)) {		dev_dbg(acpi_desc->dev, "detected invalid spa index\n");		return 0;	}	memset(&res, 0, sizeof(res));	memset(&mappings, 0, sizeof(mappings));	memset(&ndbr_desc, 0, sizeof(ndbr_desc));	res.start = spa->address;	res.end = res.start + spa->length - 1;	ndr_desc = &ndbr_desc.ndr_desc;	ndr_desc->res = &res;	ndr_desc->provider_data = nfit_spa;	ndr_desc->attr_groups = acpi_nfit_region_attribute_groups;	if (spa->flags & ACPI_NFIT_PROXIMITY_VALID)		ndr_desc->numa_node = acpi_map_pxm_to_online_node(						spa->proximity_domain);	else		ndr_desc->numa_node = NUMA_NO_NODE;	/*	 * Persistence domain bits are hierarchical, if	 * ACPI_NFIT_CAPABILITY_CACHE_FLUSH is set then	 * ACPI_NFIT_CAPABILITY_MEM_FLUSH is implied.	 */	if (acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_CACHE_FLUSH)		set_bit(ND_REGION_PERSIST_CACHE, &ndr_desc->flags);	else if (acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_MEM_FLUSH)		set_bit(ND_REGION_PERSIST_MEMCTRL, &ndr_desc->flags);	list_for_each_entry(nfit_memdev, &acpi_desc->memdevs, list) {		struct acpi_nfit_memory_map *memdev = nfit_memdev->memdev;		struct nd_mapping_desc *mapping;		if (memdev->range_index != spa->range_index)			continue;		if (count >= ND_MAX_MAPPINGS) {			dev_err(acpi_desc->dev, "spa%d exceeds max mappings %d\n",					spa->range_index, ND_MAX_MAPPINGS);			return -ENXIO;		}		mapping = &mappings[count++];		rc = acpi_nfit_init_mapping(acpi_desc, mapping, ndr_desc,				memdev, nfit_spa);		if (rc)			goto out;	}	ndr_desc->mapping = mappings;	ndr_desc->num_mappings = count;	rc = acpi_nfit_init_interleave_set(acpi_desc, ndr_desc, spa);	if (rc)		goto out;	nvdimm_bus = acpi_desc->nvdimm_bus;	if (nfit_spa_type(spa) == NFIT_SPA_PM) {		rc = acpi_nfit_insert_resource(acpi_desc, ndr_desc);		if (rc) {			dev_warn(acpi_desc->dev,				"failed to insert pmem resource to iomem: %d\n",				rc);			goto out;		}		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	} else if (nfit_spa_is_volatile(spa)) {		nfit_spa->nd_region = nvdimm_volatile_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	} else if (nfit_spa_is_virtual(spa)) {		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	} out:	if (rc)		dev_err(acpi_desc->dev, "failed to register spa range %d\n",				nfit_spa->spa->range_index);	return rc;}
static int
acpi_nfit_register_region(struct acpi_nfit_desc *acpi_desc,		struct nfit_spa *nfit_spa)
acpi_nfit_register_region
struct acpi_nfit_desc *acpi_desc
struct acpi_nfit_desc
acpi_nfit_desc
*acpi_desc
*
acpi_desc
struct nfit_spa *nfit_spa
struct nfit_spa
nfit_spa
*nfit_spa
*
nfit_spa
{	static struct nd_mapping_desc mappings[ND_MAX_MAPPINGS];	struct acpi_nfit_system_address *spa = nfit_spa->spa;	struct nd_blk_region_desc ndbr_desc;	struct nd_region_desc *ndr_desc;	struct nfit_memdev *nfit_memdev;	struct nvdimm_bus *nvdimm_bus;	struct resource res;	int count = 0, rc;	if (nfit_spa->nd_region)		return 0;	if (spa->range_index == 0 && !nfit_spa_is_virtual(spa)) {		dev_dbg(acpi_desc->dev, "detected invalid spa index\n");		return 0;	}	memset(&res, 0, sizeof(res));	memset(&mappings, 0, sizeof(mappings));	memset(&ndbr_desc, 0, sizeof(ndbr_desc));	res.start = spa->address;	res.end = res.start + spa->length - 1;	ndr_desc = &ndbr_desc.ndr_desc;	ndr_desc->res = &res;	ndr_desc->provider_data = nfit_spa;	ndr_desc->attr_groups = acpi_nfit_region_attribute_groups;	if (spa->flags & ACPI_NFIT_PROXIMITY_VALID)		ndr_desc->numa_node = acpi_map_pxm_to_online_node(						spa->proximity_domain);	else		ndr_desc->numa_node = NUMA_NO_NODE;	/*	 * Persistence domain bits are hierarchical, if	 * ACPI_NFIT_CAPABILITY_CACHE_FLUSH is set then	 * ACPI_NFIT_CAPABILITY_MEM_FLUSH is implied.	 */	if (acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_CACHE_FLUSH)		set_bit(ND_REGION_PERSIST_CACHE, &ndr_desc->flags);	else if (acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_MEM_FLUSH)		set_bit(ND_REGION_PERSIST_MEMCTRL, &ndr_desc->flags);	list_for_each_entry(nfit_memdev, &acpi_desc->memdevs, list) {		struct acpi_nfit_memory_map *memdev = nfit_memdev->memdev;		struct nd_mapping_desc *mapping;		if (memdev->range_index != spa->range_index)			continue;		if (count >= ND_MAX_MAPPINGS) {			dev_err(acpi_desc->dev, "spa%d exceeds max mappings %d\n",					spa->range_index, ND_MAX_MAPPINGS);			return -ENXIO;		}		mapping = &mappings[count++];		rc = acpi_nfit_init_mapping(acpi_desc, mapping, ndr_desc,				memdev, nfit_spa);		if (rc)			goto out;	}	ndr_desc->mapping = mappings;	ndr_desc->num_mappings = count;	rc = acpi_nfit_init_interleave_set(acpi_desc, ndr_desc, spa);	if (rc)		goto out;	nvdimm_bus = acpi_desc->nvdimm_bus;	if (nfit_spa_type(spa) == NFIT_SPA_PM) {		rc = acpi_nfit_insert_resource(acpi_desc, ndr_desc);		if (rc) {			dev_warn(acpi_desc->dev,				"failed to insert pmem resource to iomem: %d\n",				rc);			goto out;		}		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	} else if (nfit_spa_is_volatile(spa)) {		nfit_spa->nd_region = nvdimm_volatile_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	} else if (nfit_spa_is_virtual(spa)) {		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	} out:	if (rc)		dev_err(acpi_desc->dev, "failed to register spa range %d\n",				nfit_spa->spa->range_index);	return rc;}
static struct nd_mapping_desc mappings[ND_MAX_MAPPINGS];
static struct nd_mapping_desc mappings[ND_MAX_MAPPINGS];
static struct nd_mapping_desc
nd_mapping_desc
mappings[ND_MAX_MAPPINGS]
mappings
[ND_MAX_MAPPINGS]
ND_MAX_MAPPINGS
ND_MAX_MAPPINGS
struct acpi_nfit_system_address *spa = nfit_spa->spa;
struct acpi_nfit_system_address *spa = nfit_spa->spa;
struct acpi_nfit_system_address
acpi_nfit_system_address
*spa = nfit_spa->spa
*
spa
= nfit_spa->spa
nfit_spa->spa
nfit_spa
nfit_spa
spa
struct nd_blk_region_desc ndbr_desc;
struct nd_blk_region_desc ndbr_desc;
struct nd_blk_region_desc
nd_blk_region_desc
ndbr_desc
ndbr_desc
struct nd_region_desc *ndr_desc;
struct nd_region_desc *ndr_desc;
struct nd_region_desc
nd_region_desc
*ndr_desc
*
ndr_desc
struct nfit_memdev *nfit_memdev;
struct nfit_memdev *nfit_memdev;
struct nfit_memdev
nfit_memdev
*nfit_memdev
*
nfit_memdev
struct nvdimm_bus *nvdimm_bus;
struct nvdimm_bus *nvdimm_bus;
struct nvdimm_bus
nvdimm_bus
*nvdimm_bus
*
nvdimm_bus
struct resource res;
struct resource res;
struct resource
resource
res
res
int count = 0, rc;
int count = 0, rc;
int
count = 0
count
= 0
0
rc
rc
if (nfit_spa->nd_region)		return 0;
nfit_spa->nd_region
nfit_spa
nfit_spa
nd_region
return 0;
0
if (spa->range_index == 0 && !nfit_spa_is_virtual(spa)) {		dev_dbg(acpi_desc->dev, "detected invalid spa index\n");		return 0;	}
spa->range_index == 0 && !nfit_spa_is_virtual(spa)
spa->range_index == 0
spa->range_index
spa
spa
range_index
0
!nfit_spa_is_virtual(spa)
nfit_spa_is_virtual(spa)
nfit_spa_is_virtual
nfit_spa_is_virtual
spa
spa
{		dev_dbg(acpi_desc->dev, "detected invalid spa index\n");		return 0;	}
dev_dbg(acpi_desc->dev, "detected invalid spa index\n");
dev_dbg(acpi_desc->dev, "detected invalid spa index\n")
dev_dbg
dev_dbg
acpi_desc->dev
acpi_desc
acpi_desc
dev
"detected invalid spa index\n"
return 0;
0
memset(&res, 0, sizeof(res));
memset(&res, 0, sizeof(res))
memset
memset
&res
res
res
0
sizeof(res)
(res)
res
res
memset(&mappings, 0, sizeof(mappings));
memset(&mappings, 0, sizeof(mappings))
memset
memset
&mappings
mappings
mappings
0
sizeof(mappings)
(mappings)
mappings
mappings
memset(&ndbr_desc, 0, sizeof(ndbr_desc));
memset(&ndbr_desc, 0, sizeof(ndbr_desc))
memset
memset
&ndbr_desc
ndbr_desc
ndbr_desc
0
sizeof(ndbr_desc)
(ndbr_desc)
ndbr_desc
ndbr_desc
res.start = spa->address;
res.start = spa->address
res.start
res
res
start
spa->address
spa
spa
address
res.end = res.start + spa->length - 1;
res.end = res.start + spa->length - 1
res.end
res
res
end
res.start + spa->length - 1
res.start + spa->length
res.start
res
res
start
spa->length
spa
spa
length
1
ndr_desc = &ndbr_desc.ndr_desc;
ndr_desc = &ndbr_desc.ndr_desc
ndr_desc
ndr_desc
&ndbr_desc.ndr_desc
ndbr_desc.ndr_desc
ndbr_desc
ndbr_desc
ndr_desc
ndr_desc->res = &res;
ndr_desc->res = &res
ndr_desc->res
ndr_desc
ndr_desc
res
&res
res
res
ndr_desc->provider_data = nfit_spa;
ndr_desc->provider_data = nfit_spa
ndr_desc->provider_data
ndr_desc
ndr_desc
provider_data
nfit_spa
nfit_spa
ndr_desc->attr_groups = acpi_nfit_region_attribute_groups;
ndr_desc->attr_groups = acpi_nfit_region_attribute_groups
ndr_desc->attr_groups
ndr_desc
ndr_desc
attr_groups
acpi_nfit_region_attribute_groups
acpi_nfit_region_attribute_groups
if (spa->flags & ACPI_NFIT_PROXIMITY_VALID)		ndr_desc->numa_node = acpi_map_pxm_to_online_node(						spa->proximity_domain);	else		ndr_desc->numa_node = NUMA_NO_NODE;
spa->flags & ACPI_NFIT_PROXIMITY_VALID
spa->flags
spa
spa
flags
ACPI_NFIT_PROXIMITY_VALID
ACPI_NFIT_PROXIMITY_VALID
ndr_desc->numa_node = acpi_map_pxm_to_online_node(						spa->proximity_domain);
ndr_desc->numa_node = acpi_map_pxm_to_online_node(						spa->proximity_domain)
ndr_desc->numa_node
ndr_desc
ndr_desc
numa_node
acpi_map_pxm_to_online_node(						spa->proximity_domain)
acpi_map_pxm_to_online_node
acpi_map_pxm_to_online_node
spa->proximity_domain
spa
spa
proximity_domain
ndr_desc->numa_node = NUMA_NO_NODE;
ndr_desc->numa_node = NUMA_NO_NODE
ndr_desc->numa_node
ndr_desc
ndr_desc
numa_node
NUMA_NO_NODE
NUMA_NO_NODE
if (acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_CACHE_FLUSH)		set_bit(ND_REGION_PERSIST_CACHE, &ndr_desc->flags);	else if (acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_MEM_FLUSH)		set_bit(ND_REGION_PERSIST_MEMCTRL, &ndr_desc->flags);
acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_CACHE_FLUSH
acpi_desc->platform_cap
acpi_desc
acpi_desc
platform_cap
ACPI_NFIT_CAPABILITY_CACHE_FLUSH
ACPI_NFIT_CAPABILITY_CACHE_FLUSH
set_bit(ND_REGION_PERSIST_CACHE, &ndr_desc->flags);
set_bit(ND_REGION_PERSIST_CACHE, &ndr_desc->flags)
set_bit
set_bit
ND_REGION_PERSIST_CACHE
ND_REGION_PERSIST_CACHE
&ndr_desc->flags
ndr_desc->flags
ndr_desc
ndr_desc
flags
if (acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_MEM_FLUSH)		set_bit(ND_REGION_PERSIST_MEMCTRL, &ndr_desc->flags);
acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_MEM_FLUSH
acpi_desc->platform_cap
acpi_desc
acpi_desc
platform_cap
ACPI_NFIT_CAPABILITY_MEM_FLUSH
ACPI_NFIT_CAPABILITY_MEM_FLUSH
set_bit(ND_REGION_PERSIST_MEMCTRL, &ndr_desc->flags);
set_bit(ND_REGION_PERSIST_MEMCTRL, &ndr_desc->flags)
set_bit
set_bit
ND_REGION_PERSIST_MEMCTRL
ND_REGION_PERSIST_MEMCTRL
&ndr_desc->flags
ndr_desc->flags
ndr_desc
ndr_desc
flags
list_for_each_entry(nfit_memdev, &acpi_desc->memdevs, list)
list_for_each_entry(nfit_memdev, &acpi_desc->memdevs, list)
list_for_each_entry
list_for_each_entry
nfit_memdev
nfit_memdev
&acpi_desc->memdevs
acpi_desc->memdevs
acpi_desc
acpi_desc
memdevs
list
list
)
{		struct acpi_nfit_memory_map *memdev = nfit_memdev->memdev;		struct nd_mapping_desc *mapping;		if (memdev->range_index != spa->range_index)			continue;		if (count >= ND_MAX_MAPPINGS) {			dev_err(acpi_desc->dev, "spa%d exceeds max mappings %d\n",					spa->range_index, ND_MAX_MAPPINGS);			return -ENXIO;		}		mapping = &mappings[count++];		rc = acpi_nfit_init_mapping(acpi_desc, mapping, ndr_desc,				memdev, nfit_spa);		if (rc)			goto out;	}
struct acpi_nfit_memory_map *memdev = nfit_memdev->memdev;
struct acpi_nfit_memory_map *memdev = nfit_memdev->memdev;
struct acpi_nfit_memory_map
acpi_nfit_memory_map
*memdev = nfit_memdev->memdev
*
memdev
= nfit_memdev->memdev
nfit_memdev->memdev
nfit_memdev
nfit_memdev
memdev
struct nd_mapping_desc *mapping;
struct nd_mapping_desc *mapping;
struct nd_mapping_desc
nd_mapping_desc
*mapping
*
mapping
if (memdev->range_index != spa->range_index)			continue;
memdev->range_index != spa->range_index
memdev->range_index
memdev
memdev
range_index
spa->range_index
spa
spa
range_index
continue;
if (count >= ND_MAX_MAPPINGS) {			dev_err(acpi_desc->dev, "spa%d exceeds max mappings %d\n",					spa->range_index, ND_MAX_MAPPINGS);			return -ENXIO;		}
count >= ND_MAX_MAPPINGS
count
count
ND_MAX_MAPPINGS
ND_MAX_MAPPINGS
{			dev_err(acpi_desc->dev, "spa%d exceeds max mappings %d\n",					spa->range_index, ND_MAX_MAPPINGS);			return -ENXIO;		}
dev_err(acpi_desc->dev, "spa%d exceeds max mappings %d\n",					spa->range_index, ND_MAX_MAPPINGS);
dev_err(acpi_desc->dev, "spa%d exceeds max mappings %d\n",					spa->range_index, ND_MAX_MAPPINGS)
dev_err
dev_err
acpi_desc->dev
acpi_desc
acpi_desc
dev
"spa%d exceeds max mappings %d\n"
spa->range_index
spa
spa
range_index
ND_MAX_MAPPINGS
ND_MAX_MAPPINGS
return -ENXIO;
-ENXIO
ENXIO
ENXIO
mapping = &mappings[count++];
mapping = &mappings[count++]
mapping
mapping
&mappings[count++]
mappings[count++]
mappings
mappings
count++
count
count
rc = acpi_nfit_init_mapping(acpi_desc, mapping, ndr_desc,				memdev, nfit_spa);
rc = acpi_nfit_init_mapping(acpi_desc, mapping, ndr_desc,				memdev, nfit_spa)
rc
rc
acpi_nfit_init_mapping(acpi_desc, mapping, ndr_desc,				memdev, nfit_spa)
acpi_nfit_init_mapping
acpi_nfit_init_mapping
acpi_desc
acpi_desc
mapping
mapping
ndr_desc
ndr_desc
memdev
memdev
nfit_spa
nfit_spa
if (rc)			goto out;
rc
rc
goto out;
out
ndr_desc->mapping = mappings;
ndr_desc->mapping = mappings
ndr_desc->mapping
ndr_desc
ndr_desc
mapping
mappings
mappings
ndr_desc->num_mappings = count;
ndr_desc->num_mappings = count
ndr_desc->num_mappings
ndr_desc
ndr_desc
num_mappings
count
count
rc = acpi_nfit_init_interleave_set(acpi_desc, ndr_desc, spa);
rc = acpi_nfit_init_interleave_set(acpi_desc, ndr_desc, spa)
rc
rc
acpi_nfit_init_interleave_set(acpi_desc, ndr_desc, spa)
acpi_nfit_init_interleave_set
acpi_nfit_init_interleave_set
acpi_desc
acpi_desc
ndr_desc
ndr_desc
spa
spa
if (rc)		goto out;
rc
rc
goto out;
out
nvdimm_bus = acpi_desc->nvdimm_bus;
nvdimm_bus = acpi_desc->nvdimm_bus
nvdimm_bus
nvdimm_bus
acpi_desc->nvdimm_bus
acpi_desc
acpi_desc
nvdimm_bus
if (nfit_spa_type(spa) == NFIT_SPA_PM) {		rc = acpi_nfit_insert_resource(acpi_desc, ndr_desc);		if (rc) {			dev_warn(acpi_desc->dev,				"failed to insert pmem resource to iomem: %d\n",				rc);			goto out;		}		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	} else if (nfit_spa_is_volatile(spa)) {		nfit_spa->nd_region = nvdimm_volatile_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	} else if (nfit_spa_is_virtual(spa)) {		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	}
nfit_spa_type(spa) == NFIT_SPA_PM
nfit_spa_type(spa)
nfit_spa_type
nfit_spa_type
spa
spa
NFIT_SPA_PM
NFIT_SPA_PM
{		rc = acpi_nfit_insert_resource(acpi_desc, ndr_desc);		if (rc) {			dev_warn(acpi_desc->dev,				"failed to insert pmem resource to iomem: %d\n",				rc);			goto out;		}		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	}
rc = acpi_nfit_insert_resource(acpi_desc, ndr_desc);
rc = acpi_nfit_insert_resource(acpi_desc, ndr_desc)
rc
rc
acpi_nfit_insert_resource(acpi_desc, ndr_desc)
acpi_nfit_insert_resource
acpi_nfit_insert_resource
acpi_desc
acpi_desc
ndr_desc
ndr_desc
if (rc) {			dev_warn(acpi_desc->dev,				"failed to insert pmem resource to iomem: %d\n",				rc);			goto out;		}
rc
rc
{			dev_warn(acpi_desc->dev,				"failed to insert pmem resource to iomem: %d\n",				rc);			goto out;		}
dev_warn(acpi_desc->dev,				"failed to insert pmem resource to iomem: %d\n",				rc);
dev_warn(acpi_desc->dev,				"failed to insert pmem resource to iomem: %d\n",				rc)
dev_warn
dev_warn
acpi_desc->dev
acpi_desc
acpi_desc
dev
"failed to insert pmem resource to iomem: %d\n"
rc
rc
goto out;
out
nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);
nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc)
nfit_spa->nd_region
nfit_spa
nfit_spa
nd_region
nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc)
nvdimm_pmem_region_create
nvdimm_pmem_region_create
nvdimm_bus
nvdimm_bus
ndr_desc
ndr_desc
if (!nfit_spa->nd_region)			rc = -ENOMEM;
!nfit_spa->nd_region
nfit_spa->nd_region
nfit_spa
nfit_spa
nd_region
rc = -ENOMEM;
rc = -ENOMEM
rc
rc
-ENOMEM
ENOMEM
ENOMEM
if (nfit_spa_is_volatile(spa)) {		nfit_spa->nd_region = nvdimm_volatile_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	} else if (nfit_spa_is_virtual(spa)) {		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	}
nfit_spa_is_volatile(spa)
nfit_spa_is_volatile
nfit_spa_is_volatile
spa
spa
{		nfit_spa->nd_region = nvdimm_volatile_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	}
nfit_spa->nd_region = nvdimm_volatile_region_create(nvdimm_bus,				ndr_desc);
nfit_spa->nd_region = nvdimm_volatile_region_create(nvdimm_bus,				ndr_desc)
nfit_spa->nd_region
nfit_spa
nfit_spa
nd_region
nvdimm_volatile_region_create(nvdimm_bus,				ndr_desc)
nvdimm_volatile_region_create
nvdimm_volatile_region_create
nvdimm_bus
nvdimm_bus
ndr_desc
ndr_desc
if (!nfit_spa->nd_region)			rc = -ENOMEM;
!nfit_spa->nd_region
nfit_spa->nd_region
nfit_spa
nfit_spa
nd_region
rc = -ENOMEM;
rc = -ENOMEM
rc
rc
-ENOMEM
ENOMEM
ENOMEM
if (nfit_spa_is_virtual(spa)) {		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	}
nfit_spa_is_virtual(spa)
nfit_spa_is_virtual
nfit_spa_is_virtual
spa
spa
{		nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);		if (!nfit_spa->nd_region)			rc = -ENOMEM;	}
nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc);
nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc)
nfit_spa->nd_region
nfit_spa
nfit_spa
nd_region
nvdimm_pmem_region_create(nvdimm_bus,				ndr_desc)
nvdimm_pmem_region_create
nvdimm_pmem_region_create
nvdimm_bus
nvdimm_bus
ndr_desc
ndr_desc
if (!nfit_spa->nd_region)			rc = -ENOMEM;
!nfit_spa->nd_region
nfit_spa->nd_region
nfit_spa
nfit_spa
nd_region
rc = -ENOMEM;
rc = -ENOMEM
rc
rc
-ENOMEM
ENOMEM
ENOMEM
out:	if (rc)		dev_err(acpi_desc->dev, "failed to register spa range %d\n",				nfit_spa->spa->range_index);
out
if (rc)		dev_err(acpi_desc->dev, "failed to register spa range %d\n",				nfit_spa->spa->range_index);
rc
rc
dev_err(acpi_desc->dev, "failed to register spa range %d\n",				nfit_spa->spa->range_index);
dev_err(acpi_desc->dev, "failed to register spa range %d\n",				nfit_spa->spa->range_index)
dev_err
dev_err
acpi_desc->dev
acpi_desc
acpi_desc
dev
"failed to register spa range %d\n"
nfit_spa->spa->range_index
nfit_spa->spa
nfit_spa
nfit_spa
spa
range_index
return rc;
rc
rc
-----joern-----
(223,222,0)
(84,18,0)
(139,209,0)
(301,18,0)
(242,289,0)
(165,3,0)
(17,49,0)
(90,260,0)
(93,96,0)
(174,309,0)
(32,103,0)
(88,267,0)
(5,158,0)
(96,93,0)
(235,146,0)
(84,284,0)
(185,182,0)
(235,50,0)
(107,235,0)
(179,48,0)
(112,137,0)
(71,236,0)
(78,277,0)
(131,234,0)
(37,235,0)
(140,299,0)
(236,3,0)
(1,58,0)
(254,169,0)
(240,84,0)
(109,222,0)
(289,18,0)
(234,54,0)
(188,146,0)
(295,245,0)
(134,205,0)
(49,299,0)
(242,292,0)
(42,299,0)
(125,269,0)
(197,18,0)
(81,44,0)
(161,186,0)
(278,170,0)
(184,222,0)
(253,8,0)
(134,18,0)
(215,69,0)
(279,146,0)
(163,27,0)
(275,25,0)
(15,179,0)
(18,299,0)
(294,20,0)
(148,248,0)
(164,27,0)
(222,109,0)
(203,152,0)
(216,277,0)
(48,179,0)
(153,190,0)
(124,266,0)
(219,117,0)
(214,218,0)
(136,244,0)
(207,309,0)
(205,299,0)
(138,158,0)
(157,308,0)
(53,177,0)
(160,235,0)
(118,149,0)
(75,54,0)
(59,249,0)
(271,235,0)
(309,174,0)
(257,212,0)
(120,39,0)
(56,18,0)
(191,22,0)
(54,234,0)
(308,146,0)
(36,299,0)
(14,111,0)
(259,267,0)
(200,236,0)
(246,311,0)
(62,244,0)
(42,202,0)
(93,18,0)
(158,138,0)
(162,261,0)
(85,50,0)
(55,122,0)
(297,134,0)
(46,279,0)
(258,304,0)
(242,13,0)
(2,93,0)
(211,251,0)
(3,291,0)
(29,84,0)
(269,39,0)
(49,267,0)
(198,157,0)
(3,236,0)
(152,236,0)
(194,73,0)
(298,168,0)
(242,8,0)
(251,284,0)
(302,184,0)
(152,65,0)
(84,146,0)
(251,187,0)
(91,299,0)
(84,236,0)
(168,248,0)
(121,89,0)
(286,89,0)
(117,219,0)
(40,131,0)
(309,212,0)
(312,56,0)
(16,248,0)
(127,74,0)
(264,311,0)
(126,149,0)
(21,111,0)
(120,291,0)
(27,291,0)
(251,271,0)
(232,267,0)
(58,187,0)
(39,97,0)
(213,200,0)
(72,157,0)
(289,177,0)
(304,258,0)
(255,150,0)
(12,269,0)
(82,299,0)
(52,266,0)
(261,13,0)
(204,182,0)
(143,258,0)
(263,118,0)
(74,199,0)
(210,269,0)
(157,260,0)
(195,137,0)
(208,235,0)
(212,27,0)
(218,146,0)
(276,153,0)
(277,216,0)
(25,50,0)
(235,18,0)
(184,291,0)
(32,10,0)
(149,118,0)
(142,120,0)
(156,124,0)
(6,229,0)
(292,18,0)
(216,236,0)
(10,34,0)
(280,32,0)
(41,205,0)
(25,65,0)
(211,20,0)
(251,299,0)
(238,103,0)
(311,229,0)
(105,299,0)
(167,118,0)
(237,3,0)
(131,40,0)
(103,32,0)
(287,299,0)
(40,221,0)
(231,235,0)
(224,117,0)
(77,284,0)
(188,128,0)
(172,299,0)
(74,299,0)
(221,40,0)
(89,286,0)
(50,175,0)
(28,299,0)
(282,245,0)
(111,18,0)
(50,69,0)
(67,292,0)
(305,243,0)
(170,96,0)
(180,87,0)
(154,218,0)
(245,82,0)
(258,291,0)
(99,71,0)
(300,299,0)
(199,146,0)
(133,15,0)
(96,170,0)
(10,32,0)
(218,16,0)
(109,74,0)
(54,236,0)
(229,311,0)
(186,209,0)
(177,291,0)
(39,56,0)
(176,109,0)
(285,19,0)
(166,299,0)
(68,251,0)
(109,18,0)
(69,299,0)
(57,199,0)
(235,291,0)
(87,73,0)
(43,184,0)
(129,244,0)
(168,298,0)
(221,236,0)
(239,71,0)
(308,157,0)
(171,216,0)
(155,308,0)
(187,58,0)
(290,152,0)
(190,299,0)
(65,152,0)
(283,232,0)
(177,299,0)
(110,221,0)
(7,189,0)
(183,120,0)
(61,7,0)
(26,299,0)
(64,69,0)
(56,74,0)
(184,43,0)
(306,187,0)
(65,25,0)
(159,16,0)
(157,16,0)
(202,42,0)
(235,271,0)
(201,153,0)
(218,18,0)
(311,264,0)
(292,42,0)
(137,146,0)
(60,299,0)
(274,242,0)
(192,175,0)
(150,236,0)
(279,261,0)
(242,153,0)
(18,129,0)
(303,289,0)
(236,299,0)
(269,291,0)
(209,186,0)
(66,69,0)
(249,190,0)
(267,299,0)
(293,299,0)
(135,265,0)
(251,16,0)
(101,298,0)
(182,291,0)
(252,197,0)
(117,79,0)
(189,7,0)
(199,74,0)
(117,299,0)
(272,25,0)
(51,197,0)
(71,261,0)
(251,158,0)
(31,299,0)
(24,271,0)
(70,299,0)
(269,210,0)
(193,264,0)
(145,189,0)
(251,189,0)
(277,78,0)
(242,111,0)
(118,146,0)
(87,18,0)
(111,265,0)
(256,84,0)
(56,39,0)
(103,267,0)
(286,236,0)
(249,236,0)
(174,146,0)
(225,175,0)
(200,48,0)
(211,242,0)
(119,221,0)
(233,199,0)
(242,87,0)
(268,186,0)
(273,270,0)
(151,93,0)
(266,299,0)
(123,292,0)
(242,245,0)
(285,122,0)
(79,117,0)
(196,299,0)
(92,219,0)
(128,188,0)
(298,18,0)
(307,19,0)
(181,274,0)
(284,84,0)
(190,249,0)
(144,97,0)
(100,174,0)
(94,232,0)
(244,129,0)
(258,168,0)
(230,122,0)
(235,34,0)
(34,69,0)
(38,248,0)
(35,298,0)
(241,128,0)
(16,218,0)
(130,308,0)
(226,79,0)
(178,236,0)
(104,48,0)
(80,216,0)
(169,291,0)
(30,174,0)
(129,18,0)
(227,134,0)
(34,10,0)
(9,184,0)
(234,131,0)
(137,270,0)
(310,69,0)
(8,78,0)
(270,137,0)
(179,82,0)
(206,223,0)
(228,34,0)
(8,18,0)
(113,15,0)
(270,243,0)
(23,299,0)
(83,258,0)
(48,200,0)
(266,45,0)
(15,190,0)
(115,279,0)
(106,299,0)
(217,200,0)
(22,236,0)
(76,109,0)
(114,69,0)
(27,212,0)
(298,74,0)
(102,202,0)
(179,15,0)
(211,305,0)
(212,309,0)
(247,40,0)
(147,188,0)
(222,44,0)
(311,299,0)
(122,18,0)
(108,286,0)
(266,124,0)
(284,299,0)
(132,56,0)
(169,168,0)
(98,261,0)
(19,285,0)
(220,223,0)
(47,87,0)
(63,8,0)
(175,50,0)
(265,299,0)
(262,45,0)
(0,249,0)
(141,169,0)
(116,138,0)
(261,279,0)
(82,179,0)
(122,285,0)
(271,69,0)
(45,266,0)
(223,291,0)
(33,188,0)
(261,71,0)
(4,305,0)
(281,289,0)
(186,236,0)
(197,49,0)
(49,17,1)
(155,86,1)
(84,236,1)
(59,153,1)
(206,22,1)
(27,291,1)
(122,18,1)
(86,16,1)
(16,218,1)
(286,236,1)
(269,291,1)
(5,43,1)
(101,35,1)
(247,221,1)
(289,18,1)
(129,244,1)
(200,236,1)
(6,246,1)
(258,168,1)
(251,68,1)
(176,76,1)
(190,249,1)
(87,18,1)
(271,235,1)
(251,16,1)
(4,270,1)
(0,59,1)
(8,253,1)
(197,51,1)
(48,200,1)
(181,261,1)
(164,163,1)
(193,266,1)
(198,72,1)
(137,146,1)
(89,121,1)
(288,65,1)
(245,282,1)
(117,219,1)
(2,151,1)
(258,83,1)
(255,22,1)
(84,18,1)
(138,116,1)
(158,138,1)
(222,109,1)
(141,86,1)
(3,291,1)
(51,252,1)
(296,284,1)
(56,18,1)
(56,74,1)
(261,162,1)
(197,18,1)
(231,107,1)
(74,199,1)
(35,169,1)
(103,267,1)
(53,289,1)
(242,245,1)
(71,99,1)
(258,291,1)
(62,136,1)
(159,89,1)
(250,304,1)
(218,214,1)
(279,146,1)
(133,113,1)
(212,27,1)
(153,201,1)
(251,189,1)
(99,239,1)
(252,205,1)
(25,272,1)
(279,115,1)
(199,146,1)
(157,16,1)
(156,131,1)
(249,236,1)
(20,294,1)
(220,206,1)
(283,94,1)
(123,18,1)
(277,216,1)
(221,236,1)
(269,125,1)
(147,33,1)
(135,111,1)
(33,149,1)
(282,295,1)
(246,264,1)
(212,257,1)
(89,286,1)
(285,122,1)
(251,158,1)
(130,155,1)
(207,174,1)
(191,89,1)
(78,277,1)
(311,229,1)
(40,247,1)
(253,63,1)
(235,50,1)
(250,189,1)
(131,40,1)
(179,15,1)
(149,126,1)
(284,84,1)
(93,2,1)
(169,254,1)
(165,178,1)
(63,209,1)
(233,127,1)
(242,87,1)
(251,284,1)
(29,256,1)
(111,21,1)
(118,146,1)
(152,290,1)
(112,195,1)
(214,154,1)
(226,311,1)
(143,168,1)
(218,146,1)
(174,100,1)
(30,250,1)
(303,42,1)
(137,112,1)
(273,137,1)
(90,157,1)
(46,232,1)
(298,74,1)
(15,190,1)
(236,3,1)
(170,96,1)
(77,49,1)
(268,265,1)
(234,54,1)
(80,8,1)
(14,177,1)
(261,71,1)
(201,276,1)
(211,305,1)
(103,238,1)
(124,156,1)
(134,297,1)
(232,267,1)
(10,32,1)
(238,280,1)
(50,175,1)
(149,118,1)
(270,137,1)
(34,10,1)
(39,56,1)
(306,304,1)
(157,308,1)
(184,222,1)
(266,124,1)
(85,128,1)
(185,267,1)
(125,12,1)
(223,291,1)
(15,133,1)
(295,190,1)
(150,236,1)
(88,236,1)
(142,150,1)
(82,179,1)
(19,285,1)
(67,123,1)
(32,103,1)
(56,132,1)
(235,146,1)
(242,8,1)
(276,117,1)
(136,301,1)
(109,18,1)
(263,78,1)
(302,9,1)
(184,302,1)
(249,0,1)
(294,182,1)
(237,165,1)
(22,191,1)
(217,213,1)
(298,18,1)
(184,291,1)
(251,187,1)
(94,288,1)
(187,58,1)
(239,98,1)
(186,236,1)
(242,292,1)
(12,39,1)
(84,29,1)
(107,160,1)
(311,264,1)
(154,159,1)
(73,194,1)
(208,231,1)
(17,197,1)
(177,291,1)
(126,118,1)
(57,233,1)
(117,79,1)
(309,212,1)
(195,131,1)
(131,234,1)
(270,273,1)
(194,87,1)
(305,4,1)
(79,226,1)
(210,269,1)
(75,40,1)
(160,37,1)
(22,236,1)
(174,146,1)
(228,232,1)
(308,146,1)
(188,146,1)
(42,202,1)
(95,296,1)
(163,207,1)
(8,18,1)
(167,263,1)
(211,20,1)
(250,11,1)
(162,71,1)
(102,292,1)
(83,143,1)
(21,14,1)
(109,74,1)
(257,27,1)
(235,34,1)
(171,80,1)
(223,220,1)
(68,309,1)
(7,61,1)
(188,147,1)
(292,67,1)
(179,48,1)
(1,306,1)
(254,141,1)
(132,312,1)
(100,30,1)
(216,236,1)
(229,6,1)
(211,251,1)
(250,43,1)
(9,222,1)
(115,46,1)
(122,230,1)
(250,95,1)
(58,1,1)
(259,88,1)
(3,237,1)
(169,291,1)
(180,47,1)
(224,79,1)
(108,74,1)
(182,204,1)
(235,18,1)
(261,279,1)
(209,186,1)
(308,130,1)
(43,184,1)
(242,289,1)
(221,110,1)
(281,303,1)
(264,193,1)
(128,188,1)
(219,92,1)
(85,19,1)
(304,258,1)
(213,15,1)
(40,221,1)
(71,236,1)
(289,281,1)
(183,142,1)
(161,268,1)
(110,119,1)
(85,170,1)
(209,139,1)
(120,291,1)
(232,283,1)
(168,298,1)
(241,188,1)
(109,176,1)
(280,228,1)
(301,82,1)
(274,181,1)
(55,307,1)
(298,101,1)
(263,73,1)
(24,34,1)
(244,62,1)
(267,259,1)
(98,279,1)
(218,18,1)
(48,104,1)
(235,208,1)
(192,225,1)
(157,198,1)
(116,5,1)
(145,210,1)
(182,291,1)
(93,18,1)
(94,65,1)
(242,111,1)
(202,102,1)
(87,180,1)
(45,262,1)
(76,223,1)
(104,200,1)
(250,150,1)
(211,242,1)
(251,271,1)
(68,250,1)
(200,217,1)
(139,186,1)
(84,146,1)
(230,55,1)
(150,255,1)
(242,153,1)
(312,120,1)
(113,245,1)
(250,187,1)
(186,161,1)
(269,39,1)
(203,25,1)
(292,18,1)
(120,183,1)
(134,18,1)
(262,52,1)
(128,241,1)
(250,90,1)
(127,296,1)
(25,50,1)
(54,236,1)
(151,278,1)
(189,7,1)
(11,173,1)
(307,149,1)
(47,209,1)
(177,53,1)
(92,224,1)
(52,124,1)
(205,41,1)
(275,50,1)
(152,236,1)
(65,25,1)
(54,75,1)
(250,158,1)
(61,145,1)
(216,171,1)
(265,135,1)
(266,45,1)
(49,267,1)
(290,203,1)
(37,24,1)
(119,182,1)
(118,167,1)
(227,173,1)
(250,210,1)
(121,286,1)
(96,93,1)
(297,227,1)
(272,275,1)
(242,274,1)
(173,271,1)
(204,185,1)
(286,108,1)
(225,85,1)
(175,192,1)
(256,240,1)
(240,77,1)
(18,129,1)
(41,134,1)
(65,152,1)
(27,164,1)
(111,18,1)
(309,174,1)
(72,308,1)
(235,291,1)
(278,128,1)
(199,57,1)
(93,18,2)
(211,251,2)
(283,131,2)
(103,267,2)
(157,86,2)
(242,111,2)
(130,86,2)
(223,291,2)
(122,149,2)
(254,86,2)
(154,89,2)
(0,131,2)
(186,236,2)
(87,18,2)
(209,186,2)
(29,173,2)
(161,131,2)
(311,264,2)
(203,131,2)
(109,18,2)
(309,174,2)
(78,277,2)
(15,190,2)
(281,131,2)
(312,150,2)
(65,25,2)
(121,296,2)
(6,131,2)
(201,131,2)
(268,131,2)
(227,173,2)
(133,131,2)
(113,131,2)
(43,22,2)
(101,86,2)
(306,304,2)
(266,124,2)
(290,131,2)
(296,173,2)
(139,131,2)
(309,212,2)
(111,131,2)
(49,173,2)
(122,18,2)
(50,131,2)
(75,40,2)
(56,18,2)
(170,96,2)
(157,308,2)
(167,131,2)
(62,131,2)
(276,131,2)
(118,131,2)
(279,232,2)
(19,285,2)
(12,150,2)
(14,131,2)
(187,58,2)
(158,43,2)
(261,232,2)
(89,296,2)
(242,87,2)
(110,182,2)
(143,86,2)
(18,131,2)
(152,131,2)
(192,131,2)
(27,291,2)
(9,22,2)
(258,168,2)
(232,267,2)
(173,232,2)
(117,219,2)
(135,131,2)
(298,86,2)
(117,131,2)
(218,18,2)
(222,109,2)
(220,22,2)
(289,131,2)
(305,131,2)
(184,291,2)
(233,296,2)
(277,216,2)
(271,235,2)
(11,173,2)
(206,22,2)
(127,296,2)
(80,209,2)
(78,209,2)
(272,131,2)
(181,232,2)
(232,131,2)
(30,250,2)
(79,131,2)
(277,209,2)
(120,291,2)
(197,18,2)
(141,86,2)
(71,236,2)
(179,48,2)
(285,149,2)
(236,3,2)
(116,43,2)
(34,232,2)
(265,131,2)
(136,131,2)
(240,173,2)
(7,210,2)
(230,149,2)
(109,22,2)
(22,89,2)
(163,250,2)
(21,131,2)
(171,209,2)
(35,86,2)
(194,209,2)
(137,146,2)
(208,232,2)
(251,187,2)
(219,131,2)
(168,298,2)
(307,149,2)
(128,188,2)
(82,131,2)
(308,146,2)
(2,128,2)
(250,232,2)
(226,131,2)
(8,209,2)
(10,232,2)
(104,131,2)
(158,138,2)
(63,209,2)
(200,236,2)
(184,222,2)
(257,250,2)
(224,131,2)
(264,131,2)
(73,209,2)
(129,131,2)
(68,232,2)
(269,150,2)
(37,232,2)
(134,18,2)
(269,291,2)
(10,32,2)
(174,146,2)
(18,129,2)
(279,146,2)
(255,22,2)
(160,232,2)
(258,86,2)
(301,131,2)
(278,128,2)
(34,10,2)
(48,200,2)
(239,232,2)
(175,131,2)
(56,150,2)
(71,232,2)
(270,131,2)
(188,146,2)
(164,250,2)
(210,269,2)
(61,210,2)
(221,182,2)
(168,86,2)
(251,284,2)
(42,202,2)
(263,131,2)
(20,182,2)
(274,232,2)
(235,232,2)
(131,182,2)
(238,232,2)
(102,131,2)
(280,232,2)
(112,131,2)
(251,232,2)
(286,296,2)
(59,131,2)
(137,131,2)
(150,22,2)
(129,244,2)
(123,131,2)
(152,236,2)
(295,131,2)
(32,232,2)
(271,232,2)
(15,131,2)
(87,209,2)
(197,173,2)
(46,232,2)
(8,18,2)
(22,236,2)
(235,50,2)
(189,7,2)
(169,86,2)
(150,236,2)
(251,16,2)
(223,22,2)
(298,74,2)
(246,131,2)
(266,45,2)
(177,291,2)
(249,131,2)
(162,232,2)
(235,146,2)
(155,86,2)
(251,158,2)
(252,173,2)
(212,27,2)
(244,131,2)
(89,286,2)
(228,232,2)
(132,150,2)
(242,8,2)
(103,232,2)
(309,250,2)
(210,150,2)
(241,149,2)
(24,232,2)
(67,131,2)
(19,149,2)
(72,86,2)
(304,86,2)
(131,234,2)
(3,291,2)
(65,152,2)
(84,173,2)
(134,173,2)
(195,131,2)
(216,209,2)
(182,291,2)
(83,86,2)
(93,128,2)
(205,173,2)
(53,131,2)
(311,131,2)
(84,236,2)
(120,150,2)
(311,229,2)
(209,131,2)
(292,131,2)
(57,296,2)
(222,22,2)
(85,131,2)
(107,232,2)
(212,250,2)
(211,305,2)
(108,296,2)
(159,89,2)
(54,40,2)
(234,40,2)
(96,128,2)
(275,131,2)
(117,79,2)
(95,296,2)
(294,182,2)
(77,173,2)
(251,189,2)
(39,150,2)
(45,131,2)
(242,245,2)
(157,16,2)
(253,209,2)
(111,18,2)
(147,149,2)
(25,50,2)
(142,150,2)
(284,173,2)
(213,131,2)
(145,210,2)
(74,199,2)
(40,221,2)
(190,249,2)
(242,232,2)
(118,146,2)
(27,250,2)
(190,131,2)
(119,182,2)
(270,137,2)
(199,296,2)
(249,236,2)
(297,173,2)
(303,131,2)
(200,131,2)
(188,149,2)
(186,131,2)
(298,18,2)
(207,250,2)
(229,131,2)
(176,22,2)
(56,74,2)
(242,292,2)
(221,236,2)
(153,131,2)
(180,209,2)
(288,65,2)
(52,131,2)
(187,304,2)
(115,232,2)
(199,146,2)
(234,54,2)
(191,89,2)
(16,218,2)
(76,22,2)
(258,291,2)
(273,131,2)
(235,34,2)
(177,131,2)
(304,258,2)
(48,131,2)
(266,131,2)
(149,118,2)
(4,131,2)
(247,182,2)
(84,146,2)
(156,131,2)
(54,236,2)
(218,146,2)
(51,173,2)
(1,304,2)
(125,150,2)
(65,131,2)
(43,184,2)
(183,150,2)
(216,236,2)
(131,40,2)
(40,182,2)
(308,86,2)
(5,43,2)
(32,103,2)
(39,56,2)
(55,149,2)
(198,86,2)
(138,43,2)
(74,296,2)
(211,242,2)
(92,131,2)
(286,236,2)
(96,93,2)
(284,84,2)
(261,279,2)
(256,173,2)
(282,131,2)
(235,18,2)
(245,131,2)
(49,267,2)
(124,131,2)
(184,22,2)
(262,131,2)
(58,304,2)
(174,250,2)
(169,291,2)
(41,173,2)
(170,128,2)
(151,128,2)
(84,18,2)
(218,89,2)
(98,232,2)
(82,179,2)
(16,89,2)
(292,18,2)
(17,173,2)
(42,131,2)
(90,86,2)
(242,289,2)
(261,71,2)
(211,20,2)
(189,210,2)
(100,250,2)
(289,18,2)
(285,122,2)
(302,22,2)
(25,131,2)
(217,131,2)
(50,175,2)
(126,131,2)
(225,131,2)
(86,89,2)
(47,209,2)
(202,131,2)
(128,149,2)
(193,131,2)
(109,74,2)
(149,131,2)
(231,232,2)
(214,89,2)
(235,291,2)
(179,15,2)
(33,149,2)
(269,39,2)
(99,232,2)
(242,153,2)
(94,131,2)
(251,271,2)
(179,131,2)
-----------------------------------
(0,address)
(1,ENOMEM)
(2,flags)
(3,nfit_spa->spa)
(4,0)
(5,rc)
(6,mappings)
(7,-ENOMEM)
(8,ndr_desc->numa_node)
(9,nfit_spa)
(10,&mappings[count++])
(11,goto out;)
(12,nfit_spa)
(13,)
(14,ndr_desc)
(15,res.start)
(16,rc = acpi_nfit_insert_resource(acpi_desc, ndr_desc)
(17,count)
(18,ndr_desc = &ndbr_desc.ndr_desc)
(19,set_bit(ND_REGION_PERSIST_CACHE, &ndr_desc->flags)
(20,return 0;)
(21,attr_groups)
(22,nfit_spa_is_volatile(spa)
(23,mappings)
(24,rc)
(25,memdev->range_index)
(26,if (acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_CACHE_FLUSH)
(27,nfit_spa->spa)
(28,if (spa->range_index == 0 && !nfit_spa_is_virtual(spa)
(29,spa)
(30,acpi_desc)
(31,if (rc)
(32,mappings[count++])
(33,acpi_desc)
(34,mapping = &mappings[count++])
(35,nvdimm_bus)
(36,ndr_desc)
(37,acpi_desc)
(38,if (rc)
(39,nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,\n\\n\\t\\t\\t\\tndr_desc)
(40,spa->range_index == 0)
(41,mappings)
(42,ndr_desc->res = &res)
(43,!nfit_spa->nd_region)
(44,)
(45,sizeof(res)
(46,acpi_desc)
(47,ndr_desc)
(48,spa->length - 1)
(49,ndr_desc->num_mappings = count)
(50,*memdev = nfit_memdev->memdev)
(51,num_mappings)
(52,0)
(53,nfit_spa)
(54,nfit_spa_is_virtual(spa)
(55,ndr_desc)
(56,nvdimm_pmem_region_create(nvdimm_bus,\n\\n\\t\\t\\t\\tndr_desc)
(57,nvdimm_bus)
(58,-ENOMEM)
(59,spa)
(60,if (spa->flags & ACPI_NFIT_PROXIMITY_VALID)
(61,ENOMEM)
(62,ndr_desc)
(63,ndr_desc)
(64,mapping)
(65,memdev->range_index != spa->range_index)
(66,if (memdev->range_index != spa->range_index)
(67,res)
(68,rc)
(69,)
(70,res)
(71,spa->range_index)
(72,"failed to insert pmem resource to iomem: %d\\n")
(73,ndr_desc->numa_node = NUMA_NO_NODE)
(74,nvdimm_bus = acpi_desc->nvdimm_bus)
(75,spa)
(76,nvdimm_bus)
(77,rc)
(78,ndr_desc->numa_node = acpi_map_pxm_to_online_node(\n\\n\\t\\t\\t\\t\\t\\tspa->proximity_domain)
(79,&ndbr_desc)
(80,spa)
(81,if (!nfit_spa->nd_region)
(82,res.end = res.start + spa->length - 1)
(83,nd_region)
(84,acpi_nfit_init_interleave_set(acpi_desc, ndr_desc, spa)
(85,memdev)
(86,rc)
(87,ndr_desc->numa_node)
(88,count)
(89,nfit_spa_type(spa)
(90,goto out;)
(91,spa)
(92,ndbr_desc)
(93,ndr_desc->flags)
(94,count)
(95,goto out;)
(96,&ndr_desc->flags)
(97,)
(98,"spa%d exceeds max mappings %d\\n")
(99,range_index)
(100,dev)
(101,ndr_desc)
(102,res)
(103,count++)
(104,1)
(105,nvdimm_bus)
(106,if (nfit_spa->nd_region)
(107,ndr_desc)
(108,spa)
(109,nvdimm_volatile_region_create(nvdimm_bus,\n\\n\\t\\t\\t\\tndr_desc)
(110,range_index)
(111,ndr_desc->attr_groups)
(112,dev)
(113,res)
(114,if (rc)
(115,dev)
(116,ENOMEM)
(117,memset(&ndbr_desc, 0, sizeof(ndbr_desc)
(118,acpi_desc->platform_cap)
(119,spa)
(120,nfit_spa->nd_region)
(121,NFIT_SPA_PM)
(122,ndr_desc->flags)
(123,ndr_desc)
(124,&res)
(125,nd_region)
(126,ACPI_NFIT_CAPABILITY_CACHE_FLUSH)
(127,nvdimm_bus)
(128,acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_MEM_FLUSH)
(129,&ndbr_desc.ndr_desc)
(130,dev)
(131,spa->range_index == 0 && !nfit_spa_is_virtual(spa)
(132,ndr_desc)
(133,start)
(134,ndr_desc->mapping)
(135,acpi_nfit_region_attribute_groups)
(136,ndbr_desc)
(137,acpi_desc->dev)
(138,-ENOMEM)
(139,ACPI_NFIT_PROXIMITY_VALID)
(140,ndbr_desc)
(141,nfit_spa)
(142,nfit_spa)
(143,nfit_spa)
(144,if (!nfit_spa->nd_region)
(145,rc)
(146,struct acpi_nfit_desc *acpi_desc)
(147,platform_cap)
(148,if (!nfit_spa->nd_region)
(149,acpi_desc->platform_cap & ACPI_NFIT_CAPABILITY_CACHE_FLUSH)
(150,nfit_spa_is_virtual(spa)
(151,ndr_desc)
(152,spa->range_index)
(153,res.start)
(154,acpi_desc)
(155,acpi_desc)
(156,res)
(157,dev_warn(acpi_desc->dev,\n\\n\\t\\t\\t\\t"failed to insert pmem resource to iomem: %d\\n",\n\\n\\t\\t\\t\\trc)
(158,rc = -ENOMEM)
(159,rc)
(160,mapping)
(161,flags)
(162,ND_MAX_MAPPINGS)
(163,nfit_spa)
(164,spa)
(165,nfit_spa)
(166,count)
(167,platform_cap)
(168,nfit_spa->nd_region = nvdimm_pmem_region_create(nvdimm_bus,\n\\n\\t\\t\\t\\tndr_desc)
(169,nfit_spa->nd_region)
(170,set_bit(ND_REGION_PERSIST_MEMCTRL, &ndr_desc->flags)
(171,proximity_domain)
(172,rc)
(173,rc)
(174,acpi_desc->dev)
(175,nfit_memdev->memdev)
(176,ndr_desc)
(177,ndr_desc->provider_data = nfit_spa)
(178,spa)
(179,res.start + spa->length - 1)
(180,numa_node)
(181,ENXIO)
(182,nfit_spa->nd_region)
(183,nd_region)
(184,nfit_spa->nd_region)
(185,nfit_spa)
(186,spa->flags)
(187,rc = -ENOMEM)
(188,acpi_desc->platform_cap)
(189,rc = -ENOMEM)
(190,res.start = spa->address)
(191,spa)
(192,memdev)
(193,mappings)
(194,NUMA_NO_NODE)
(195,acpi_desc)
(196,out:)
(197,ndr_desc->num_mappings)
(198,rc)
(199,acpi_desc->nvdimm_bus)
(200,spa->length)
(201,start)
(202,&res)
(203,spa)
(204,nd_region)
(205,ndr_desc->mapping = mappings)
(206,nfit_spa)
(207,"failed to register spa range %d\\n")
(208,nfit_spa)
(209,spa->flags & ACPI_NFIT_PROXIMITY_VALID)
(210,!nfit_spa->nd_region)
(211,RET)
(212,nfit_spa->spa->range_index)
(213,spa)
(214,ndr_desc)
(215,if (count >= ND_MAX_MAPPINGS)
(216,spa->proximity_domain)
(217,length)
(218,acpi_nfit_insert_resource(acpi_desc, ndr_desc)
(219,sizeof(ndbr_desc)
(220,nd_region)
(221,spa->range_index)
(222,nfit_spa->nd_region = nvdimm_volatile_region_create(nvdimm_bus,\n\\n\\t\\t\\t\\tndr_desc)
(223,nfit_spa->nd_region)
(224,0)
(225,nfit_memdev)
(226,ndbr_desc)
(227,ndr_desc)
(228,mapping)
(229,sizeof(mappings)
(230,flags)
(231,memdev)
(232,count >= ND_MAX_MAPPINGS)
(233,acpi_desc)
(234,!nfit_spa_is_virtual(spa)
(235,acpi_nfit_init_mapping(acpi_desc, mapping, ndr_desc,\n\\n\\t\\t\\t\\tmemdev, nfit_spa)
(236,*spa = nfit_spa->spa)
(237,spa)
(238,count)
(239,spa)
(240,acpi_desc)
(241,ACPI_NFIT_CAPABILITY_MEM_FLUSH)
(242,return -ENXIO;)
(243,)
(244,ndbr_desc.ndr_desc)
(245,res.end)
(246,0)
(247,0)
(248,)
(249,spa->address)
(250,rc)
(251,return rc;)
(252,ndr_desc)
(253,numa_node)
(254,nd_region)
(255,spa)
(256,ndr_desc)
(257,range_index)
(258,nfit_spa->nd_region)
(259,0)
(260,)
(261,dev_err(acpi_desc->dev, "spa%d exceeds max mappings %d\\n",\n\\n\\t\\t\\t\\t\\tspa->range_index, ND_MAX_MAPPINGS)
(262,res)
(263,acpi_desc)
(264,&mappings)
(265,ndr_desc->attr_groups = acpi_nfit_region_attribute_groups)
(266,memset(&res, 0, sizeof(res)
(267,count = 0)
(268,spa)
(269,nfit_spa->nd_region)
(270,dev_dbg(acpi_desc->dev, "detected invalid spa index\\n")
(271,rc = acpi_nfit_init_mapping(acpi_desc, mapping, ndr_desc,\n\\n\\t\\t\\t\\tmemdev, nfit_spa)
(272,range_index)
(273,"detected invalid spa index\\n")
(274,-ENXIO)
(275,memdev)
(276,res)
(277,acpi_map_pxm_to_online_node(\n\\n\\t\\t\\t\\t\\t\\tspa->proximity_domain)
(278,ND_REGION_PERSIST_MEMCTRL)
(279,acpi_desc->dev)
(280,mappings)
(281,provider_data)
(282,end)
(283,ND_MAX_MAPPINGS)
(284,rc = acpi_nfit_init_interleave_set(acpi_desc, ndr_desc, spa)
(285,&ndr_desc->flags)
(286,nfit_spa_type(spa)
(287,if (nfit_spa_type(spa)
(288,continue;)
(289,ndr_desc->provider_data)
(290,range_index)
(291,struct nfit_spa *nfit_spa)
(292,ndr_desc->res)
(293,nfit_memdev)
(294,0)
(295,res)
(296,rc)
(297,mapping)
(298,nvdimm_pmem_region_create(nvdimm_bus,\n\\n\\t\\t\\t\\tndr_desc)
(299,)
(300,if (rc)
(301,ndr_desc)
(302,nd_region)
(303,ndr_desc)
(304,!nfit_spa->nd_region)
(305,return 0;)
(306,rc)
(307,ND_REGION_PERSIST_CACHE)
(308,acpi_desc->dev)
(309,dev_err(acpi_desc->dev, "failed to register spa range %d\\n",\n\\n\\t\\t\\t\\tnfit_spa->spa->range_index)
(310,memdev)
(311,memset(&mappings, 0, sizeof(mappings)
(312,nvdimm_bus)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^