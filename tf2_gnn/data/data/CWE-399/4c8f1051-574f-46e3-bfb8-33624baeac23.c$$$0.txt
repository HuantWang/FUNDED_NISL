-----label-----
0
-----code-----
static struct cpufreq_policy *cpufreq_policy_alloc(struct device *dev)
{
	struct cpufreq_policy *policy;
	int ret;

	policy = kzalloc(sizeof(*policy), GFP_KERNEL);
	if (!policy)
		return NULL;

	if (!alloc_cpumask_var(&policy->cpus, GFP_KERNEL))
		goto err_free_policy;

	if (!zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL))
		goto err_free_cpumask;

	ret = kobject_init_and_add(&policy->kobj, &ktype_cpufreq, &dev->kobj,
				   "cpufreq");
	if (ret) {
		pr_err("%s: failed to init policy->kobj: %d\n", __func__, ret);
		goto err_free_rcpumask;
	}

	INIT_LIST_HEAD(&policy->policy_list);
	init_rwsem(&policy->rwsem);
	spin_lock_init(&policy->transition_lock);
	init_waitqueue_head(&policy->transition_wait);
	init_completion(&policy->kobj_unregister);
	INIT_WORK(&policy->update, handle_update);

	policy->cpu = dev->id;

	/* Set this once on allocation */
	policy->kobj_cpu = dev->id;

	return policy;

err_free_rcpumask:
	free_cpumask_var(policy->related_cpus);
err_free_cpumask:
	free_cpumask_var(policy->cpus);
err_free_policy:
	kfree(policy);

	return NULL;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
13,19
13,20
13,21
13,22
13,23
13,24
13,25
13,26
13,27
13,28
13,29
13,30
13,31
13,32
13,33
13,34
14,15
15,16
15,17
16,17
18,19
18,20
21,22
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
30,32
30,33
31,32
33,34
34,35
35,36
36,37
38,39
40,41
40,42
41,42
42,43
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
50,51
52,53
53,54
53,55
54,55
57,58
59,60
61,62
61,63
62,63
63,64
63,65
63,66
64,65
66,67
67,68
67,69
68,69
71,72
73,74
75,76
76,77
76,78
77,78
79,80
79,81
79,82
79,83
79,84
80,81
82,83
83,84
83,85
84,85
87,88
88,89
90,91
91,92
91,93
92,93
96,97
96,98
97,98
99,100
99,101
100,101
101,102
101,103
101,104
101,105
102,103
105,106
107,108
109,110
111,112
112,113
112,114
113,114
115,116
116,117
116,118
117,118
120,121
121,122
121,123
122,123
124,125
125,126
125,127
126,127
129,130
130,131
130,132
131,132
133,134
134,135
134,136
135,136
138,139
139,140
139,141
140,141
142,143
143,144
143,145
144,145
147,148
148,149
148,150
149,150
151,152
152,153
152,154
153,154
156,157
157,158
157,159
157,160
158,159
160,161
161,162
161,163
162,163
165,166
167,168
168,169
168,170
169,170
169,171
170,171
173,174
173,175
174,175
177,178
178,179
178,180
179,180
179,181
180,181
183,184
183,185
184,185
187,188
188,189
190,191
190,192
192,193
193,194
193,195
194,195
196,197
196,198
197,198
200,201
200,202
202,203
203,204
203,205
204,205
206,207
206,208
207,208
210,211
210,212
212,213
213,214
213,215
214,215
216,217
218,219
219,220
-----nextToken-----
3,5,6,9,11,12,17,19,20,23,25,29,32,37,39,43,46,51,55,56,58,60,65,69,70,72,74,78,81,85,86,89,93,94,95,98,103,104,106,108,110,114,118,119,123,127,128,132,136,137,141,145,146,150,154,155,159,163,164,166,171,172,175,176,181,182,185,186,189,191,195,198,199,201,205,208,209,211,215,217,220
-----computeFrom-----
27,28
27,29
76,77
76,78
168,169
168,170
178,179
178,180
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct cpufreq_policy *cpufreq_policy_alloc(struct device *dev){	struct cpufreq_policy *policy;	int ret;	policy = kzalloc(sizeof(*policy), GFP_KERNEL);	if (!policy)		return NULL;	if (!alloc_cpumask_var(&policy->cpus, GFP_KERNEL))		goto err_free_policy;	if (!zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL))		goto err_free_cpumask;	ret = kobject_init_and_add(&policy->kobj, &ktype_cpufreq, &dev->kobj,				   "cpufreq");	if (ret) {		pr_err("%s: failed to init policy->kobj: %d\n", __func__, ret);		goto err_free_rcpumask;	}	INIT_LIST_HEAD(&policy->policy_list);	init_rwsem(&policy->rwsem);	spin_lock_init(&policy->transition_lock);	init_waitqueue_head(&policy->transition_wait);	init_completion(&policy->kobj_unregister);	INIT_WORK(&policy->update, handle_update);	policy->cpu = dev->id;	/* Set this once on allocation */	policy->kobj_cpu = dev->id;	return policy;err_free_rcpumask:	free_cpumask_var(policy->related_cpus);err_free_cpumask:	free_cpumask_var(policy->cpus);err_free_policy:	kfree(policy);	return NULL;}
static struct cpufreq_policy
cpufreq_policy
*cpufreq_policy_alloc(struct device *dev)
*
cpufreq_policy_alloc
struct device *dev
struct device
device
*dev
*
dev
{	struct cpufreq_policy *policy;	int ret;	policy = kzalloc(sizeof(*policy), GFP_KERNEL);	if (!policy)		return NULL;	if (!alloc_cpumask_var(&policy->cpus, GFP_KERNEL))		goto err_free_policy;	if (!zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL))		goto err_free_cpumask;	ret = kobject_init_and_add(&policy->kobj, &ktype_cpufreq, &dev->kobj,				   "cpufreq");	if (ret) {		pr_err("%s: failed to init policy->kobj: %d\n", __func__, ret);		goto err_free_rcpumask;	}	INIT_LIST_HEAD(&policy->policy_list);	init_rwsem(&policy->rwsem);	spin_lock_init(&policy->transition_lock);	init_waitqueue_head(&policy->transition_wait);	init_completion(&policy->kobj_unregister);	INIT_WORK(&policy->update, handle_update);	policy->cpu = dev->id;	/* Set this once on allocation */	policy->kobj_cpu = dev->id;	return policy;err_free_rcpumask:	free_cpumask_var(policy->related_cpus);err_free_cpumask:	free_cpumask_var(policy->cpus);err_free_policy:	kfree(policy);	return NULL;}
struct cpufreq_policy *policy;
struct cpufreq_policy *policy;
struct cpufreq_policy
cpufreq_policy
*policy
*
policy
int ret;
int ret;
int
ret
ret
policy = kzalloc(sizeof(*policy), GFP_KERNEL);
policy = kzalloc(sizeof(*policy), GFP_KERNEL)
policy
policy
kzalloc(sizeof(*policy), GFP_KERNEL)
kzalloc
kzalloc
sizeof(*policy)
(*policy)
*policy
policy
policy
GFP_KERNEL
GFP_KERNEL
if (!policy)		return NULL;
!policy
policy
policy
return NULL;
NULL
NULL
if (!alloc_cpumask_var(&policy->cpus, GFP_KERNEL))		goto err_free_policy;
!alloc_cpumask_var(&policy->cpus, GFP_KERNEL)
alloc_cpumask_var(&policy->cpus, GFP_KERNEL)
alloc_cpumask_var
alloc_cpumask_var
&policy->cpus
policy->cpus
policy
policy
cpus
GFP_KERNEL
GFP_KERNEL
goto err_free_policy;
err_free_policy
if (!zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL))		goto err_free_cpumask;
!zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL)
zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL)
zalloc_cpumask_var
zalloc_cpumask_var
&policy->related_cpus
policy->related_cpus
policy
policy
related_cpus
GFP_KERNEL
GFP_KERNEL
goto err_free_cpumask;
err_free_cpumask
ret = kobject_init_and_add(&policy->kobj, &ktype_cpufreq, &dev->kobj,				   "cpufreq");
ret = kobject_init_and_add(&policy->kobj, &ktype_cpufreq, &dev->kobj,				   "cpufreq")
ret
ret
kobject_init_and_add(&policy->kobj, &ktype_cpufreq, &dev->kobj,				   "cpufreq")
kobject_init_and_add
kobject_init_and_add
&policy->kobj
policy->kobj
policy
policy
kobj
&ktype_cpufreq
ktype_cpufreq
ktype_cpufreq
&dev->kobj
dev->kobj
dev
dev
kobj
"cpufreq"
if (ret) {		pr_err("%s: failed to init policy->kobj: %d\n", __func__, ret);		goto err_free_rcpumask;	}
ret
ret
{		pr_err("%s: failed to init policy->kobj: %d\n", __func__, ret);		goto err_free_rcpumask;	}
pr_err("%s: failed to init policy->kobj: %d\n", __func__, ret);
pr_err("%s: failed to init policy->kobj: %d\n", __func__, ret)
pr_err
pr_err
"%s: failed to init policy->kobj: %d\n"
__func__
__func__
ret
ret
goto err_free_rcpumask;
err_free_rcpumask
INIT_LIST_HEAD(&policy->policy_list);
INIT_LIST_HEAD(&policy->policy_list)
INIT_LIST_HEAD
INIT_LIST_HEAD
&policy->policy_list
policy->policy_list
policy
policy
policy_list
init_rwsem(&policy->rwsem);
init_rwsem(&policy->rwsem)
init_rwsem
init_rwsem
&policy->rwsem
policy->rwsem
policy
policy
rwsem
spin_lock_init(&policy->transition_lock);
spin_lock_init(&policy->transition_lock)
spin_lock_init
spin_lock_init
&policy->transition_lock
policy->transition_lock
policy
policy
transition_lock
init_waitqueue_head(&policy->transition_wait);
init_waitqueue_head(&policy->transition_wait)
init_waitqueue_head
init_waitqueue_head
&policy->transition_wait
policy->transition_wait
policy
policy
transition_wait
init_completion(&policy->kobj_unregister);
init_completion(&policy->kobj_unregister)
init_completion
init_completion
&policy->kobj_unregister
policy->kobj_unregister
policy
policy
kobj_unregister
INIT_WORK(&policy->update, handle_update);
INIT_WORK(&policy->update, handle_update)
INIT_WORK
INIT_WORK
&policy->update
policy->update
policy
policy
update
handle_update
handle_update
policy->cpu = dev->id;
policy->cpu = dev->id
policy->cpu
policy
policy
cpu
dev->id
dev
dev
id
policy->kobj_cpu = dev->id;
policy->kobj_cpu = dev->id
policy->kobj_cpu
policy
policy
kobj_cpu
dev->id
dev
dev
id
return policy;
policy
policy
err_free_rcpumask:	free_cpumask_var(policy->related_cpus);
err_free_rcpumask
free_cpumask_var(policy->related_cpus);
free_cpumask_var(policy->related_cpus)
free_cpumask_var
free_cpumask_var
policy->related_cpus
policy
policy
related_cpus
err_free_cpumask:	free_cpumask_var(policy->cpus);
err_free_cpumask
free_cpumask_var(policy->cpus);
free_cpumask_var(policy->cpus)
free_cpumask_var
free_cpumask_var
policy->cpus
policy
policy
cpus
err_free_policy:	kfree(policy);
err_free_policy
kfree(policy);
kfree(policy)
kfree
kfree
policy
policy
return NULL;
NULL
NULL
-----joern-----
(7,71,0)
(5,103,0)
(96,11,0)
(33,44,0)
(94,61,0)
(59,104,0)
(106,7,0)
(0,58,0)
(30,115,0)
(58,36,0)
(7,106,0)
(76,108,0)
(99,112,0)
(68,106,0)
(51,118,0)
(108,11,0)
(98,106,0)
(90,48,0)
(54,107,0)
(65,108,0)
(42,61,0)
(26,71,0)
(106,11,0)
(107,67,0)
(114,11,0)
(71,7,0)
(93,98,0)
(39,102,0)
(65,67,0)
(4,47,0)
(85,115,0)
(35,69,0)
(50,6,0)
(92,106,0)
(10,4,0)
(72,36,0)
(60,54,0)
(83,41,0)
(1,77,0)
(80,26,0)
(22,88,0)
(49,11,0)
(19,11,0)
(9,11,0)
(53,60,0)
(89,76,0)
(95,31,0)
(68,78,0)
(35,106,0)
(28,41,0)
(9,69,0)
(103,67,0)
(104,106,0)
(45,62,0)
(25,104,0)
(116,44,0)
(113,106,0)
(17,112,0)
(16,101,0)
(20,11,0)
(22,6,0)
(2,48,0)
(81,11,0)
(51,49,0)
(90,11,0)
(108,65,0)
(76,106,0)
(100,35,0)
(103,52,0)
(0,11,0)
(23,49,0)
(77,31,0)
(85,11,0)
(117,88,0)
(4,106,0)
(74,103,0)
(52,103,0)
(88,106,0)
(98,34,0)
(52,48,0)
(13,118,0)
(84,11,0)
(101,106,0)
(69,9,0)
(112,90,0)
(40,104,0)
(24,4,0)
(109,6,0)
(21,76,0)
(66,79,0)
(97,60,0)
(48,59,0)
(115,106,0)
(104,59,0)
(59,48,0)
(48,90,0)
(51,79,0)
(73,88,0)
(6,22,0)
(94,41,0)
(47,11,0)
(82,68,0)
(46,112,0)
(36,106,0)
(48,2,0)
(44,45,0)
(87,11,0)
(31,77,0)
(62,45,0)
(8,107,0)
(58,0,0)
(20,78,0)
(43,11,0)
(56,7,0)
(44,106,0)
(88,22,0)
(55,1,0)
(60,106,0)
(48,52,0)
(91,65,0)
(38,68,0)
(101,11,0)
(34,37,0)
(78,68,0)
(47,4,0)
(118,106,0)
(41,106,0)
(61,94,0)
(71,26,0)
(6,109,0)
(41,94,0)
(105,11,0)
(1,11,0)
(57,11,0)
(78,20,0)
(64,2,0)
(118,11,0)
(14,65,0)
(63,31,0)
(75,90,0)
(29,92,0)
(110,36,0)
(12,98,0)
(115,85,0)
(54,11,0)
(32,107,0)
(18,35,0)
(3,115,0)
(61,42,0)
(45,44,0)
(77,1,0)
(15,61,0)
(69,35,0)
(86,48,0)
(31,106,0)
(112,102,0)
(36,58,0)
(34,98,0)
(62,11,0)
(37,11,0)
(107,54,0)
(37,34,0)
(104,106,1)
(7,71,1)
(66,92,1)
(89,54,1)
(112,17,1)
(27,90,1)
(98,106,1)
(85,115,1)
(40,75,1)
(6,22,1)
(82,38,1)
(71,26,1)
(110,72,1)
(63,62,1)
(112,90,1)
(16,47,1)
(48,2,1)
(101,106,1)
(8,60,1)
(5,74,1)
(98,93,1)
(36,106,1)
(83,28,1)
(53,97,1)
(3,30,1)
(2,64,1)
(4,106,1)
(64,59,1)
(36,110,1)
(13,108,1)
(50,22,1)
(48,52,1)
(92,29,1)
(92,106,1)
(86,52,1)
(26,80,1)
(78,68,1)
(55,77,1)
(80,113,1)
(65,67,1)
(48,86,1)
(104,25,1)
(97,1,1)
(51,118,1)
(118,13,1)
(77,31,1)
(91,14,1)
(61,15,1)
(49,23,1)
(70,42,1)
(12,27,1)
(88,73,1)
(59,104,1)
(95,63,1)
(47,4,1)
(60,53,1)
(31,95,1)
(52,103,1)
(65,91,1)
(61,94,1)
(99,27,1)
(58,36,1)
(44,33,1)
(69,35,1)
(7,56,1)
(76,106,1)
(10,85,1)
(1,77,1)
(72,9,1)
(117,92,1)
(41,83,1)
(44,106,1)
(62,45,1)
(28,109,1)
(74,2,1)
(45,44,1)
(42,61,1)
(48,59,1)
(68,82,1)
(0,58,1)
(10,70,1)
(116,0,1)
(6,50,1)
(31,106,1)
(76,21,1)
(109,6,1)
(15,94,1)
(51,49,1)
(37,34,1)
(22,88,1)
(54,107,1)
(88,106,1)
(20,78,1)
(106,7,1)
(38,37,1)
(17,46,1)
(25,40,1)
(94,41,1)
(115,106,1)
(18,20,1)
(103,5,1)
(29,106,1)
(118,106,1)
(115,3,1)
(60,106,1)
(14,76,1)
(107,67,1)
(73,117,1)
(33,116,1)
(90,48,1)
(41,106,1)
(56,71,1)
(21,89,1)
(79,66,1)
(108,65,1)
(35,106,1)
(24,10,1)
(51,79,1)
(101,16,1)
(32,8,1)
(103,67,1)
(68,106,1)
(9,69,1)
(16,111,1)
(46,99,1)
(39,112,1)
(100,18,1)
(4,24,1)
(35,100,1)
(111,109,1)
(93,12,1)
(34,98,1)
(23,101,1)
(30,39,1)
(75,42,1)
(107,32,1)
(1,55,1)
(32,27,2)
(98,106,2)
(48,59,2)
(61,94,2)
(108,65,2)
(24,27,2)
(45,44,2)
(44,27,2)
(85,115,2)
(41,109,2)
(16,27,2)
(60,27,2)
(112,90,2)
(8,27,2)
(52,42,2)
(55,27,2)
(9,27,2)
(77,27,2)
(31,27,2)
(22,92,2)
(118,106,2)
(3,27,2)
(17,27,2)
(4,106,2)
(74,42,2)
(104,106,2)
(54,27,2)
(86,42,2)
(83,109,2)
(51,118,2)
(16,42,2)
(23,42,2)
(53,27,2)
(10,27,2)
(103,42,2)
(68,106,2)
(6,92,2)
(116,27,2)
(51,79,2)
(0,58,2)
(31,106,2)
(42,61,2)
(59,42,2)
(35,27,2)
(20,78,2)
(4,27,2)
(93,27,2)
(13,27,2)
(117,92,2)
(112,27,2)
(49,109,2)
(79,92,2)
(90,42,2)
(25,42,2)
(94,109,2)
(88,106,2)
(27,42,2)
(49,27,2)
(36,106,2)
(69,27,2)
(24,42,2)
(23,27,2)
(35,106,2)
(62,45,2)
(65,67,2)
(66,92,2)
(100,27,2)
(6,22,2)
(1,77,2)
(110,27,2)
(33,27,2)
(115,27,2)
(52,103,2)
(40,42,2)
(54,107,2)
(104,42,2)
(18,27,2)
(7,71,2)
(44,106,2)
(111,109,2)
(108,27,2)
(77,31,2)
(73,92,2)
(30,27,2)
(5,42,2)
(51,49,2)
(98,27,2)
(48,2,2)
(0,27,2)
(60,106,2)
(101,109,2)
(78,27,2)
(88,92,2)
(58,27,2)
(76,106,2)
(64,42,2)
(78,68,2)
(91,27,2)
(90,48,2)
(62,27,2)
(47,42,2)
(4,42,2)
(70,42,2)
(72,27,2)
(97,27,2)
(34,27,2)
(10,42,2)
(76,27,2)
(61,109,2)
(20,27,2)
(75,42,2)
(82,27,2)
(68,27,2)
(2,42,2)
(65,27,2)
(28,109,2)
(22,88,2)
(23,109,2)
(95,27,2)
(42,109,2)
(63,27,2)
(92,106,2)
(14,27,2)
(47,27,2)
(9,69,2)
(21,27,2)
(16,109,2)
(106,7,2)
(89,27,2)
(94,41,2)
(99,27,2)
(45,27,2)
(109,6,2)
(85,27,2)
(107,67,2)
(101,27,2)
(46,27,2)
(39,27,2)
(69,35,2)
(12,27,2)
(48,52,2)
(50,92,2)
(48,42,2)
(103,67,2)
(118,27,2)
(115,106,2)
(49,42,2)
(41,106,2)
(58,36,2)
(38,27,2)
(59,104,2)
(1,27,2)
(34,98,2)
(37,34,2)
(15,109,2)
(47,4,2)
(101,42,2)
(109,92,2)
(71,26,2)
(36,27,2)
(107,27,2)
(37,27,2)
(101,106,2)
-----------------------------------
(0,init_waitqueue_head(&policy->transition_wait)
(1,INIT_WORK(&policy->update, handle_update)
(2,&ktype_cpufreq)
(3,related_cpus)
(4,policy->cpus)
(5,kobj)
(6,alloc_cpumask_var(&policy->cpus, GFP_KERNEL)
(7,kzalloc(sizeof(*policy)
(8,dev)
(9,spin_lock_init(&policy->transition_lock)
(10,policy)
(11,)
(12,policy)
(13,policy)
(14,dev)
(15,GFP_KERNEL)
(16,policy)
(17,ret)
(18,policy)
(19,err_free_cpumask:)
(20,init_rwsem(&policy->rwsem)
(21,kobj_cpu)
(22,&policy->cpus)
(23,NULL)
(24,cpus)
(25,kobj)
(26,*policy)
(27,ret)
(28,policy)
(29,policy)
(30,policy)
(31,policy->update)
(32,id)
(33,kobj_unregister)
(34,&policy->policy_list)
(35,policy->transition_lock)
(36,policy->transition_wait)
(37,INIT_LIST_HEAD(&policy->policy_list)
(38,policy)
(39,goto err_free_rcpumask;)
(40,policy)
(41,policy->related_cpus)
(42,!zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL)
(43,if (!policy)
(44,policy->kobj_unregister)
(45,&policy->kobj_unregister)
(46,__func__)
(47,free_cpumask_var(policy->cpus)
(48,kobject_init_and_add(&policy->kobj, &ktype_cpufreq, &dev->kobj,\n\\n\\t\\t\\t\\t   "cpufreq")
(49,return NULL;)
(50,GFP_KERNEL)
(51,RET)
(52,&dev->kobj)
(53,cpu)
(54,policy->cpu = dev->id)
(55,handle_update)
(56,GFP_KERNEL)
(57,if (ret)
(58,&policy->transition_wait)
(59,&policy->kobj)
(60,policy->cpu)
(61,zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL)
(62,init_completion(&policy->kobj_unregister)
(63,policy)
(64,ktype_cpufreq)
(65,dev->id)
(66,NULL)
(67,struct device *dev)
(68,policy->rwsem)
(69,&policy->transition_lock)
(70,goto err_free_cpumask;)
(71,sizeof(*policy)
(72,policy)
(73,cpus)
(74,dev)
(75,ret)
(76,policy->kobj_cpu)
(77,&policy->update)
(78,&policy->rwsem)
(79,return NULL;)
(80,policy)
(81,err_free_policy:)
(82,rwsem)
(83,related_cpus)
(84,if (!zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL)
(85,free_cpumask_var(policy->related_cpus)
(86,"cpufreq")
(87,err_free_rcpumask:)
(88,policy->cpus)
(89,policy)
(90,ret = kobject_init_and_add(&policy->kobj, &ktype_cpufreq, &dev->kobj,\n\\n\\t\\t\\t\\t   "cpufreq")
(91,id)
(92,!policy)
(93,policy_list)
(94,&policy->related_cpus)
(95,update)
(96,policy)
(97,policy)
(98,policy->policy_list)
(99,"%s: failed to init policy->kobj: %d\\n")
(100,transition_lock)
(101,kfree(policy)
(102,)
(103,dev->kobj)
(104,policy->kobj)
(105,if (!alloc_cpumask_var(&policy->cpus, GFP_KERNEL)
(106,policy = kzalloc(sizeof(*policy)
(107,dev->id)
(108,policy->kobj_cpu = dev->id)
(109,!alloc_cpumask_var(&policy->cpus, GFP_KERNEL)
(110,transition_wait)
(111,goto err_free_policy;)
(112,pr_err("%s: failed to init policy->kobj: %d\\n", __func__, ret)
(113,policy)
(114,ret)
(115,policy->related_cpus)
(116,policy)
(117,policy)
(118,return policy;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^