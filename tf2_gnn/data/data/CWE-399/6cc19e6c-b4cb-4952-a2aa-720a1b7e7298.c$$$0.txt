-----label-----
0
-----code-----
eHalStatus csrValidateMCCBeaconInterval(tpAniSirGlobal pMac, tANI_U8 channelId,
                                     tANI_U16 *beaconInterval, tANI_U32 cursessionId,
                                     tVOS_CON_MODE currBssPersona)
{
    tANI_U32 sessionId = 0;
    tANI_U16 new_beaconInterval = 0;
  
    //If MCC is not supported just break
    if (!pMac->roam.configParam.fenableMCCMode){
        return eHAL_STATUS_FAILURE;
    }

    for (sessionId = 0; sessionId < CSR_ROAM_SESSION_MAX; sessionId++ )
    {
        if (cursessionId != sessionId )
        {
            if (!CSR_IS_SESSION_VALID( pMac, sessionId ))
            {
                continue;
            }

            switch (currBssPersona)
            {
                case VOS_STA_MODE:
                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&
                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona
                                      == VOS_P2P_CLIENT_MODE)) //check for P2P client mode
                    {
                        smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));
                    }
                    //IF SAP has started and STA wants to connect on different channel MCC should
                    //MCC should not be enabled so making it false to enforce on same channel
                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona
                                      == VOS_STA_SAP_MODE)
                    {
                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn 
                                                        != channelId )
                        {
                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));
                            return eHAL_STATUS_FAILURE;
                        }
                    }
                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona
                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario
                    {
                        /* if GO in MCC support different beacon interval, 
                         * change the BI of the P2P-GO */
                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn 
                                != channelId ) &&
                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval 
                                != *beaconInterval))
                       {
                           /* if GO in MCC support different beacon interval, return success */
                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)
                           {
                               return eHAL_STATUS_SUCCESS;
                           }
                           // Send only Broadcast disassoc and update beaconInterval
                           //If configuration is set to 0x04 then dont
                           // disconnect all the station
                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||
                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))
                           {
                               //Check to pass the right beacon Interval
                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval, 
                                                         pMac->roam.roamSession[sessionId].bssParams.beaconInterval);
                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );
                               //Update the becon Interval
                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
                               {
                                   //Update the beaconInterval now
                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),
                                                 pMac->roam.configParam.fAllowMCCGODiffBI);

                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;
                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;
                                    return csrUpdateMCCp2pBeaconInterval(pMac);
                               }
                               return eHAL_STATUS_SUCCESS;
                           }
                           //Disconnect the P2P session
                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)
                           {
                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;
                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);
                           }
                           else
                           {
                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));
                               return eHAL_STATUS_FAILURE;
                           }
                        }
                    }
                    break;

                case VOS_P2P_CLIENT_MODE:
                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&
                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona
                                                                == VOS_STA_MODE)) //check for P2P client mode
                    {
                        smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));
                    }
                    //IF SAP has started and STA wants to connect on different channel MCC should
                    //MCC should not be enabled so making it false to enforce on same channel
                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona
                                      == VOS_STA_SAP_MODE)
                    {
                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn 
                                                        != channelId )
                        {
                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));
                            return eHAL_STATUS_FAILURE;
                        }
                    }
                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona
                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario
                    {
                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn 
                                != channelId ) &&
                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval 
                                != *beaconInterval))
                        {
                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));
                            return eHAL_STATUS_FAILURE;
                        }
                    }
                    break;

                case VOS_P2P_GO_MODE :
                {
                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&
                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona
                            == VOS_P2P_CLIENT_MODE) ||
                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona
                            == VOS_STA_MODE))) //check for P2P_client scenario
                    {
                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel
                               == 0 )&&
                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval
                               == 0))
                        {
                            continue;
                        }

                            
                        if (csrIsConnStateConnectedInfra(pMac, sessionId) &&
                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel
                                != channelId ) &&
                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval
                                != *beaconInterval))
                        {
                            /*
                             * Updated beaconInterval should be used only when we are starting a new BSS 
                             * not incase of client or STA case
                             */
                            //Calculate beacon Interval for P2P-GO incase of MCC
                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, 
                                                pMac->roam.roamSession[sessionId].bssParams.beaconInterval,
                                                *beaconInterval );
                            if(*beaconInterval != new_beaconInterval)
                                *beaconInterval = new_beaconInterval;
                            return eHAL_STATUS_SUCCESS;
                         }
                    }
                }
                break;

                default :
                    smsLog(pMac, LOG1, FL(" Persona not supported : %d"),currBssPersona);
                    return eHAL_STATUS_FAILURE;
            }
        }
    }

    return eHAL_STATUS_SUCCESS;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
6,7
6,8
7,8
9,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
32,33
32,34
32,35
32,36
32,37
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
49,51
50,51
51,52
51,53
52,53
52,54
53,54
53,55
54,55
59,60
60,61
61,62
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
72,73
74,75
75,76
77,78
78,79
78,80
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
86,87
87,88
87,89
87,90
88,89
90,91
92,93
94,95
96,97
96,98
97,98
99,100
99,101
99,102
99,103
99,104
99,105
99,106
99,107
99,108
99,109
99,110
99,111
100,101
101,102
103,104
103,105
103,106
104,105
104,106
105,106
105,107
106,107
106,108
107,108
107,109
108,109
108,110
109,110
113,114
116,117
117,118
117,119
118,119
118,120
119,120
119,121
120,121
120,122
121,122
121,123
122,123
122,124
123,124
127,128
131,132
133,134
134,135
135,136
135,137
135,138
135,139
136,137
138,139
140,141
142,143
142,144
143,144
146,147
146,148
146,149
147,148
147,149
148,149
148,150
149,150
149,151
150,151
150,152
151,152
151,153
152,153
152,154
153,154
157,158
161,162
163,164
164,165
164,166
165,166
165,167
166,167
166,168
167,168
167,169
168,169
168,170
169,170
169,171
170,171
170,172
171,172
175,176
179,180
181,182
181,183
182,183
183,184
183,185
183,186
183,187
184,185
186,187
188,189
190,191
190,192
191,192
194,195
195,196
197,198
197,199
198,199
198,200
199,200
199,201
200,201
200,202
201,202
201,203
202,203
202,204
203,204
203,205
204,205
208,209
212,213
214,215
215,216
215,217
216,217
216,218
217,218
218,219
218,220
219,220
219,221
220,221
220,222
221,222
221,223
222,223
222,224
223,224
223,225
224,225
228,229
232,233
234,235
235,236
235,237
236,237
236,238
237,238
237,239
238,239
238,240
239,240
239,241
240,241
240,242
241,242
245,246
249,250
250,251
252,253
253,254
253,255
253,256
254,255
254,256
255,256
255,257
256,257
256,258
257,258
257,259
258,259
264,265
265,266
266,267
268,269
268,270
268,271
269,270
269,271
270,271
271,272
271,273
272,273
272,274
273,274
273,275
274,275
274,276
275,276
281,282
282,283
282,284
283,284
283,285
284,285
284,286
285,286
285,287
286,287
292,293
292,294
292,295
292,296
293,294
294,295
294,296
295,296
297,298
297,299
297,300
297,301
298,299
300,301
302,303
303,304
305,306
305,307
306,307
306,308
307,308
307,309
308,309
308,310
309,310
309,311
310,311
314,315
318,319
319,320
319,321
319,322
319,323
319,324
319,325
320,321
322,323
324,325
326,327
326,328
327,328
330,331
331,332
333,334
335,336
335,337
336,337
336,338
337,338
339,340
339,341
340,341
340,342
341,342
341,343
342,343
342,344
343,344
343,345
344,345
348,349
352,353
352,354
352,355
352,356
353,354
354,355
354,356
354,357
354,358
354,359
355,356
357,358
359,360
361,362
361,363
362,363
365,366
365,367
366,367
366,368
367,368
367,369
368,369
373,374
374,375
374,376
375,376
375,377
376,377
376,378
377,378
377,379
378,379
378,380
379,380
379,381
380,381
384,385
388,389
390,391
391,392
391,393
392,393
392,394
393,394
393,395
394,395
394,396
395,396
395,397
396,397
396,398
397,398
401,402
405,406
407,408
408,409
408,410
409,410
411,412
413,414
414,415
416,417
416,418
416,419
417,418
417,419
418,419
418,420
419,420
419,421
420,421
420,422
421,422
427,428
427,429
428,429
429,430
429,431
430,431
430,432
431,432
431,433
432,433
432,434
433,434
433,435
434,435
434,436
435,436
439,440
443,444
445,446
446,447
446,448
446,449
446,450
446,451
446,452
446,453
447,448
449,450
451,452
453,454
456,457
458,459
460,461
460,462
461,462
462,463
462,464
462,465
462,466
463,464
465,466
467,468
469,470
469,471
470,471
473,474
474,475
477,478
478,479
480,481
480,482
480,483
481,482
481,483
482,483
482,484
483,484
483,485
484,485
484,486
485,486
485,487
486,487
490,491
493,494
494,495
494,496
495,496
495,497
496,497
496,498
497,498
497,499
498,499
498,500
499,500
499,501
500,501
504,505
508,509
510,511
511,512
512,513
512,514
512,515
512,516
513,514
515,516
517,518
519,520
519,521
520,521
523,524
523,525
523,526
524,525
524,526
525,526
525,527
526,527
526,528
527,528
527,529
528,529
528,530
529,530
529,531
530,531
534,535
538,539
540,541
541,542
541,543
542,543
542,544
543,544
543,545
544,545
544,546
545,546
545,547
546,547
546,548
547,548
547,549
548,549
552,553
556,557
558,559
558,560
559,560
560,561
560,562
560,563
560,564
561,562
563,564
565,566
567,568
567,569
568,569
571,572
572,573
574,575
574,576
575,576
575,577
576,577
576,578
577,578
577,579
578,579
578,580
579,580
579,581
580,581
580,582
581,582
585,586
589,590
591,592
592,593
592,594
593,594
593,595
594,595
595,596
595,597
596,597
596,598
597,598
597,599
598,599
598,600
599,600
599,601
600,601
600,602
601,602
605,606
609,610
611,612
612,613
612,614
613,614
613,615
614,615
614,616
615,616
615,617
616,617
616,618
617,618
617,619
618,619
622,623
626,627
627,628
629,630
629,631
630,631
631,632
631,633
631,634
631,635
632,633
634,635
636,637
638,639
638,640
639,640
642,643
643,644
646,647
647,648
649,650
650,651
650,652
651,652
651,653
652,653
652,654
653,654
653,655
654,655
654,656
655,656
655,657
656,657
660,661
663,664
664,665
664,666
665,666
666,667
666,668
667,668
667,669
668,669
668,670
669,670
669,671
670,671
670,672
671,672
671,673
672,673
676,677
680,681
682,683
683,684
683,685
684,685
684,686
685,686
685,687
686,687
686,688
687,688
687,689
688,689
688,690
689,690
693,694
697,698
699,700
699,701
700,701
700,702
701,702
701,703
702,703
703,704
703,705
704,705
704,706
705,706
705,707
706,707
706,708
707,708
707,709
708,709
708,710
709,710
713,714
718,719
719,720
719,721
720,721
720,722
721,722
721,723
722,723
722,724
723,724
723,725
724,725
724,726
725,726
729,730
734,735
736,737
736,738
737,738
737,739
738,739
738,740
739,740
739,741
739,742
740,741
742,743
744,745
746,747
747,748
747,749
748,749
748,750
749,750
749,751
750,751
750,752
751,752
751,753
752,753
752,754
753,754
757,758
761,762
763,764
764,765
764,766
765,766
765,767
766,767
766,768
767,768
767,769
768,769
768,770
769,770
769,771
770,771
774,775
778,779
779,780
781,782
781,783
781,784
782,783
783,784
783,785
784,785
786,787
786,788
786,789
786,790
787,788
789,790
791,792
791,793
792,793
792,794
793,794
793,795
794,795
794,796
795,796
795,797
796,797
800,801
804,805
805,806
807,808
807,809
808,809
808,810
809,810
810,811
812,813
814,815
815,816
815,817
816,817
817,818
819,820
821,822
822,823
826,827
827,828
827,829
827,830
827,831
827,832
828,829
830,831
832,833
834,835
834,836
835,836
838,839
840,841
841,842
843,844
844,845
-----nextToken-----

-----computeFrom-----
65,66
65,67
69,70
69,71
79,80
79,81
104,105
104,106
117,118
117,119
147,148
147,149
165,166
165,167
198,199
198,200
216,217
216,218
218,219
218,220
235,236
235,237
254,255
254,256
269,270
269,271
271,272
271,273
282,283
282,284
294,295
294,296
336,337
336,338
374,375
374,376
391,392
391,393
417,418
417,419
429,430
429,431
481,482
481,483
494,495
494,496
524,525
524,526
542,543
542,544
575,576
575,577
593,594
593,595
595,596
595,597
612,613
612,614
651,652
651,653
664,665
664,666
666,667
666,668
683,684
683,685
701,702
701,703
703,704
703,705
719,720
719,721
737,738
737,739
738,739
738,740
747,748
747,749
764,765
764,766
783,784
783,785
808,809
808,810
815,816
815,817
-----guardedBy-----
83,801
124,139
154,187
156,174
158,176
155,173
159,177
172,187
205,466
207,438
209,452
206,437
210,441
251,387
242,466
244,438
246,452
243,437
247,441
289,371
290,372
287,412
288,399
338,389
351,387
345,412
347,400
349,402
346,399
350,403
422,450
423,437
501,516
531,564
533,551
535,553
532,550
536,554
549,564
582,635
584,621
586,623
583,620
587,624
619,635
690,797
692,799
694,801
691,798
780,818
771,797
775,801
773,799
772,798
813,820
811,818
-----guardedByNegation-----
124,466
126,438
128,452
125,437
160,211
154,466
156,438
158,452
155,437
159,441
261,424
262,425
259,466
260,437
289,424
290,425
287,466
288,437
422,466
501,635
503,621
505,623
502,620
537,588
531,635
533,621
535,623
532,620
536,624
-----lastLexicalUse-----
124,466
154,466
156,438
158,452
155,437
159,441
289,424
287,466
290,425
288,437
422,466
501,635
531,635
533,621
535,623
532,620
536,624
-----jump-----
124,466
154,466
156,438
158,452
155,437
159,441
289,424
287,466
290,425
288,437
422,466
501,635
531,635
533,621
535,623
532,620
536,624
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ContinueStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;CompoundStatement;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ContinueStatement;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
eHalStatus csrValidateMCCBeaconInterval(tpAniSirGlobal pMac, tANI_U8 channelId,                                     tANI_U16 *beaconInterval, tANI_U32 cursessionId,                                     tVOS_CON_MODE currBssPersona){    tANI_U32 sessionId = 0;    tANI_U16 new_beaconInterval = 0;      //If MCC is not supported just break    if (!pMac->roam.configParam.fenableMCCMode){        return eHAL_STATUS_FAILURE;    }    for (sessionId = 0; sessionId < CSR_ROAM_SESSION_MAX; sessionId++ )    {        if (cursessionId != sessionId )        {            if (!CSR_IS_SESSION_VALID( pMac, sessionId ))            {                continue;            }            switch (currBssPersona)            {                case VOS_STA_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }                    break;                case VOS_P2P_CLIENT_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }                    break;                case VOS_P2P_GO_MODE :                {                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))) //check for P2P_client scenario                    {                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }                                                    if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }                    }                }                break;                default :                    smsLog(pMac, LOG1, FL(" Persona not supported : %d"),currBssPersona);                    return eHAL_STATUS_FAILURE;            }        }    }    return eHAL_STATUS_SUCCESS;}
eHalStatus
eHalStatus
csrValidateMCCBeaconInterval(tpAniSirGlobal pMac, tANI_U8 channelId,                                     tANI_U16 *beaconInterval, tANI_U32 cursessionId,                                     tVOS_CON_MODE currBssPersona)
csrValidateMCCBeaconInterval
tpAniSirGlobal pMac
tpAniSirGlobal
tpAniSirGlobal
pMac
pMac
tANI_U8 channelId
tANI_U8
tANI_U8
channelId
channelId
tANI_U16 *beaconInterval
tANI_U16
tANI_U16
*beaconInterval
*
beaconInterval
tANI_U32 cursessionId
tANI_U32
tANI_U32
cursessionId
cursessionId
tVOS_CON_MODE currBssPersona
tVOS_CON_MODE
tVOS_CON_MODE
currBssPersona
currBssPersona
{    tANI_U32 sessionId = 0;    tANI_U16 new_beaconInterval = 0;      //If MCC is not supported just break    if (!pMac->roam.configParam.fenableMCCMode){        return eHAL_STATUS_FAILURE;    }    for (sessionId = 0; sessionId < CSR_ROAM_SESSION_MAX; sessionId++ )    {        if (cursessionId != sessionId )        {            if (!CSR_IS_SESSION_VALID( pMac, sessionId ))            {                continue;            }            switch (currBssPersona)            {                case VOS_STA_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }                    break;                case VOS_P2P_CLIENT_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }                    break;                case VOS_P2P_GO_MODE :                {                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))) //check for P2P_client scenario                    {                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }                                                    if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }                    }                }                break;                default :                    smsLog(pMac, LOG1, FL(" Persona not supported : %d"),currBssPersona);                    return eHAL_STATUS_FAILURE;            }        }    }    return eHAL_STATUS_SUCCESS;}
tANI_U32 sessionId = 0;
tANI_U32 sessionId = 0;
tANI_U32
tANI_U32
sessionId = 0
sessionId
= 0
0
tANI_U16 new_beaconInterval = 0;
tANI_U16 new_beaconInterval = 0;
tANI_U16
tANI_U16
new_beaconInterval = 0
new_beaconInterval
= 0
0
if (!pMac->roam.configParam.fenableMCCMode){        return eHAL_STATUS_FAILURE;    }
!pMac->roam.configParam.fenableMCCMode
pMac->roam.configParam.fenableMCCMode
pMac->roam.configParam
pMac->roam
pMac
pMac
roam
configParam
fenableMCCMode
{        return eHAL_STATUS_FAILURE;    }
return eHAL_STATUS_FAILURE;
eHAL_STATUS_FAILURE
eHAL_STATUS_FAILURE
for (sessionId = 0; sessionId < CSR_ROAM_SESSION_MAX; sessionId++ )    {        if (cursessionId != sessionId )        {            if (!CSR_IS_SESSION_VALID( pMac, sessionId ))            {                continue;            }            switch (currBssPersona)            {                case VOS_STA_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }                    break;                case VOS_P2P_CLIENT_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }                    break;                case VOS_P2P_GO_MODE :                {                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))) //check for P2P_client scenario                    {                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }                                                    if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }                    }                }                break;                default :                    smsLog(pMac, LOG1, FL(" Persona not supported : %d"),currBssPersona);                    return eHAL_STATUS_FAILURE;            }        }    }
sessionId = 0;
sessionId = 0
sessionId
sessionId
0
sessionId < CSR_ROAM_SESSION_MAX
sessionId
sessionId
CSR_ROAM_SESSION_MAX
CSR_ROAM_SESSION_MAX
sessionId++
sessionId
sessionId
{        if (cursessionId != sessionId )        {            if (!CSR_IS_SESSION_VALID( pMac, sessionId ))            {                continue;            }            switch (currBssPersona)            {                case VOS_STA_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }                    break;                case VOS_P2P_CLIENT_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }                    break;                case VOS_P2P_GO_MODE :                {                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))) //check for P2P_client scenario                    {                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }                                                    if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }                    }                }                break;                default :                    smsLog(pMac, LOG1, FL(" Persona not supported : %d"),currBssPersona);                    return eHAL_STATUS_FAILURE;            }        }    }
if (cursessionId != sessionId )        {            if (!CSR_IS_SESSION_VALID( pMac, sessionId ))            {                continue;            }            switch (currBssPersona)            {                case VOS_STA_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }                    break;                case VOS_P2P_CLIENT_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }                    break;                case VOS_P2P_GO_MODE :                {                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))) //check for P2P_client scenario                    {                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }                                                    if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }                    }                }                break;                default :                    smsLog(pMac, LOG1, FL(" Persona not supported : %d"),currBssPersona);                    return eHAL_STATUS_FAILURE;            }        }
cursessionId != sessionId
cursessionId
cursessionId
sessionId
sessionId
{            if (!CSR_IS_SESSION_VALID( pMac, sessionId ))            {                continue;            }            switch (currBssPersona)            {                case VOS_STA_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }                    break;                case VOS_P2P_CLIENT_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }                    break;                case VOS_P2P_GO_MODE :                {                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))) //check for P2P_client scenario                    {                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }                                                    if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }                    }                }                break;                default :                    smsLog(pMac, LOG1, FL(" Persona not supported : %d"),currBssPersona);                    return eHAL_STATUS_FAILURE;            }        }
if (!CSR_IS_SESSION_VALID( pMac, sessionId ))            {                continue;            }
!CSR_IS_SESSION_VALID( pMac, sessionId )
CSR_IS_SESSION_VALID( pMac, sessionId )
CSR_IS_SESSION_VALID
CSR_IS_SESSION_VALID
pMac
pMac
sessionId
sessionId
{                continue;            }
continue;
switch (currBssPersona)            {                case VOS_STA_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }                    break;                case VOS_P2P_CLIENT_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }                    break;                case VOS_P2P_GO_MODE :                {                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))) //check for P2P_client scenario                    {                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }                                                    if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }                    }                }                break;                default :                    smsLog(pMac, LOG1, FL(" Persona not supported : %d"),currBssPersona);                    return eHAL_STATUS_FAILURE;            }
currBssPersona
currBssPersona
{                case VOS_STA_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }                    break;                case VOS_P2P_CLIENT_MODE:                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }                    break;                case VOS_P2P_GO_MODE :                {                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))) //check for P2P_client scenario                    {                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }                                                    if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }                    }                }                break;                default :                    smsLog(pMac, LOG1, FL(" Persona not supported : %d"),currBssPersona);                    return eHAL_STATUS_FAILURE;            }
case VOS_STA_MODE:
VOS_STA_MODE
VOS_STA_MODE
if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }
pMac->roam.roamSession[sessionId].pCurRoamProfile &&                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE)
pMac->roam.roamSession[sessionId].pCurRoamProfile
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
pCurRoamProfile
(pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE)
pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                      == VOS_P2P_CLIENT_MODE
pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona
pMac->roam.roamSession[sessionId].pCurRoamProfile
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
pCurRoamProfile
csrPersona
VOS_P2P_CLIENT_MODE
VOS_P2P_CLIENT_MODE
{                        smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));                    }
smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"));
smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT"))
smsLog
smsLog
pMac
pMac
LOG1
LOG1
FL(" Beacon Interval Validation not required for STA/CLIENT")
FL
FL
" Beacon Interval Validation not required for STA/CLIENT"
if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }
pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE
pMac->roam.roamSession[sessionId].bssParams.bssPersona
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
bssPersona
VOS_STA_SAP_MODE
VOS_STA_SAP_MODE
{                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }                    }
if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }
pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId
pMac->roam.roamSession[sessionId].bssParams.operationChn
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
operationChn
channelId
channelId
{                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));                            return eHAL_STATUS_FAILURE;                        }
smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"));
smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****"))
smsLog
smsLog
pMac
pMac
LOGE
LOGE
FL("***MCC is not enabled for SAP +STA****")
FL
FL
"***MCC is not enabled for SAP +STA****"
return eHAL_STATUS_FAILURE;
eHAL_STATUS_FAILURE
eHAL_STATUS_FAILURE
if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }
pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_P2P_GO_MODE
pMac->roam.roamSession[sessionId].bssParams.bssPersona
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
bssPersona
VOS_P2P_GO_MODE
VOS_P2P_GO_MODE
{                        /* if GO in MCC support different beacon interval,                          * change the BI of the P2P-GO */                       if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }                    }
if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                       {                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }
(pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                           (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval)
(pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId )
pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId
pMac->roam.roamSession[sessionId].bssParams.operationChn
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
operationChn
channelId
channelId
(pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval)
pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval
pMac->roam.roamSession[sessionId].bssParams.beaconInterval
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
beaconInterval
*beaconInterval
beaconInterval
beaconInterval
{                           /* if GO in MCC support different beacon interval, return success */                           if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }                        }
if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)                           {                               return eHAL_STATUS_SUCCESS;                           }                           // Send only Broadcast disassoc and update beaconInterval                           //If configuration is set to 0x04 then dont                           // disconnect all the station                           else if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }
pMac->roam.configParam.fAllowMCCGODiffBI == 0x01
pMac->roam.configParam.fAllowMCCGODiffBI
pMac->roam.configParam
pMac->roam
pMac
pMac
roam
configParam
fAllowMCCGODiffBI
0x01
{                               return eHAL_STATUS_SUCCESS;                           }
return eHAL_STATUS_SUCCESS;
eHAL_STATUS_SUCCESS
eHAL_STATUS_SUCCESS
if ((pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04))                           {                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }                           //Disconnect the P2P session                           else if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }
(pMac->roam.configParam.fAllowMCCGODiffBI == 0x02) ||                                   (pMac->roam.configParam.fAllowMCCGODiffBI == 0x04)
(pMac->roam.configParam.fAllowMCCGODiffBI == 0x02)
pMac->roam.configParam.fAllowMCCGODiffBI == 0x02
pMac->roam.configParam.fAllowMCCGODiffBI
pMac->roam.configParam
pMac->roam
pMac
pMac
roam
configParam
fAllowMCCGODiffBI
0x02
(pMac->roam.configParam.fAllowMCCGODiffBI == 0x04)
pMac->roam.configParam.fAllowMCCGODiffBI == 0x04
pMac->roam.configParam.fAllowMCCGODiffBI
pMac->roam.configParam
pMac->roam
pMac
pMac
roam
configParam
fAllowMCCGODiffBI
0x04
{                               //Check to pass the right beacon Interval                               new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);                               smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );                               //Update the becon Interval                               if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }                               return eHAL_STATUS_SUCCESS;                           }
new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval);
new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
new_beaconInterval
new_beaconInterval
csrCalculateMCCBeaconInterval(pMac, *beaconInterval,                                                          pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
csrCalculateMCCBeaconInterval
csrCalculateMCCBeaconInterval
pMac
pMac
*beaconInterval
beaconInterval
beaconInterval
pMac->roam.roamSession[sessionId].bssParams.beaconInterval
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
beaconInterval
smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval );
smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d"),*beaconInterval,new_beaconInterval )
smsLog
smsLog
pMac
pMac
LOG1
LOG1
FL(" Peer AP BI : %d, new Beacon Interval: %d")
FL
FL
" Peer AP BI : %d, new Beacon Interval: %d"
*beaconInterval
beaconInterval
beaconInterval
new_beaconInterval
new_beaconInterval
if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)                               {                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }
new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval
new_beaconInterval
new_beaconInterval
pMac->roam.roamSession[sessionId].bssParams.beaconInterval
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
beaconInterval
{                                   //Update the beaconInterval now                                   smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);                                   pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;                                   pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;                                    return csrUpdateMCCp2pBeaconInterval(pMac);                               }
smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI);
smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\n"),                                                 pMac->roam.configParam.fAllowMCCGODiffBI)
smsLog
smsLog
pMac
pMac
LOGE
LOGE
FL(" Beacon Interval got changed config used: %d\n")
FL
FL
" Beacon Interval got changed config used: %d\n"
pMac->roam.configParam.fAllowMCCGODiffBI
pMac->roam.configParam
pMac->roam
pMac
pMac
roam
configParam
fAllowMCCGODiffBI
pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval;
pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval
pMac->roam.roamSession[sessionId].bssParams.beaconInterval
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
beaconInterval
new_beaconInterval
new_beaconInterval
pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE;
pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE
pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
updatebeaconInterval
eANI_BOOLEAN_TRUE
eANI_BOOLEAN_TRUE
return csrUpdateMCCp2pBeaconInterval(pMac);
csrUpdateMCCp2pBeaconInterval(pMac)
csrUpdateMCCp2pBeaconInterval
csrUpdateMCCp2pBeaconInterval
pMac
pMac
return eHAL_STATUS_SUCCESS;
eHAL_STATUS_SUCCESS
eHAL_STATUS_SUCCESS
if (pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)                           {                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }                           else                           {                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }
pMac->roam.configParam.fAllowMCCGODiffBI == 0x03
pMac->roam.configParam.fAllowMCCGODiffBI
pMac->roam.configParam
pMac->roam
pMac
pMac
roam
configParam
fAllowMCCGODiffBI
0x03
{                               pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;                               return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);                           }
pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE;
pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE
pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
updatebeaconInterval
eANI_BOOLEAN_FALSE
eANI_BOOLEAN_FALSE
return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE);
csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE)
csrRoamCallCallback
csrRoamCallCallback
pMac
pMac
sessionId
sessionId
NULL
NULL
0
eCSR_ROAM_SEND_P2P_STOP_BSS
eCSR_ROAM_SEND_P2P_STOP_BSS
eCSR_ROAM_RESULT_NONE
eCSR_ROAM_RESULT_NONE
{                               smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));                               return eHAL_STATUS_FAILURE;                           }
smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."));
smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP..."))
smsLog
smsLog
pMac
pMac
LOGE
LOGE
FL("BeaconInterval is different cannot connect to preferred AP...")
FL
FL
"BeaconInterval is different cannot connect to preferred AP..."
return eHAL_STATUS_FAILURE;
eHAL_STATUS_FAILURE
eHAL_STATUS_FAILURE
break;
case VOS_P2P_CLIENT_MODE:
VOS_P2P_CLIENT_MODE
VOS_P2P_CLIENT_MODE
if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE)) //check for P2P client mode                    {                        smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));                    }                    //IF SAP has started and STA wants to connect on different channel MCC should                    //MCC should not be enabled so making it false to enforce on same channel                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }
pMac->roam.roamSession[sessionId].pCurRoamProfile &&                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE)
pMac->roam.roamSession[sessionId].pCurRoamProfile
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
pCurRoamProfile
(pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE)
pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                                                                == VOS_STA_MODE
pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona
pMac->roam.roamSession[sessionId].pCurRoamProfile
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
pCurRoamProfile
csrPersona
VOS_STA_MODE
VOS_STA_MODE
{                        smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));                    }
smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."));
smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation..."))
smsLog
smsLog
pMac
pMac
LOG1
LOG1
FL(" Ignore Beacon Interval Validation...")
FL
FL
" Ignore Beacon Interval Validation..."
if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE)                    {                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }                    }                    else if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }
pMac->roam.roamSession[sessionId].bssParams.bssPersona                                      == VOS_STA_SAP_MODE
pMac->roam.roamSession[sessionId].bssParams.bssPersona
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
bssPersona
VOS_STA_SAP_MODE
VOS_STA_SAP_MODE
{                        if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }                    }
if (pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId )                        {                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }
pMac->roam.roamSession[sessionId].bssParams.operationChn                                                         != channelId
pMac->roam.roamSession[sessionId].bssParams.operationChn
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
operationChn
channelId
channelId
{                            smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));                            return eHAL_STATUS_FAILURE;                        }
smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"));
smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****"))
smsLog
smsLog
pMac
pMac
LOGE
LOGE
FL("***MCC is not enabled for SAP + CLIENT****")
FL
FL
"***MCC is not enabled for SAP + CLIENT****"
return eHAL_STATUS_FAILURE;
eHAL_STATUS_FAILURE
eHAL_STATUS_FAILURE
if (pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE) //Check for P2P go scenario                    {                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }
pMac->roam.roamSession[sessionId].bssParams.bssPersona                                    == VOS_P2P_GO_MODE
pMac->roam.roamSession[sessionId].bssParams.bssPersona
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
bssPersona
VOS_P2P_GO_MODE
VOS_P2P_GO_MODE
{                        if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }                    }
if ((pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval))                        {                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }
(pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId ) &&                            (pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval)
(pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId )
pMac->roam.roamSession[sessionId].bssParams.operationChn                                 != channelId
pMac->roam.roamSession[sessionId].bssParams.operationChn
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
operationChn
channelId
channelId
(pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval)
pMac->roam.roamSession[sessionId].bssParams.beaconInterval                                 != *beaconInterval
pMac->roam.roamSession[sessionId].bssParams.beaconInterval
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
beaconInterval
*beaconInterval
beaconInterval
beaconInterval
{                            smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));                            return eHAL_STATUS_FAILURE;                        }
smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."));
smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ..."))
smsLog
smsLog
pMac
pMac
LOGE
LOGE
FL("BeaconInterval is different cannot connect to P2P_GO network ...")
FL
FL
"BeaconInterval is different cannot connect to P2P_GO network ..."
return eHAL_STATUS_FAILURE;
eHAL_STATUS_FAILURE
eHAL_STATUS_FAILURE
break;
case VOS_P2P_GO_MODE :
VOS_P2P_GO_MODE
VOS_P2P_GO_MODE
{                    if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))) //check for P2P_client scenario                    {                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }                                                    if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }                    }                }
if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))) //check for P2P_client scenario                    {                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }                                                    if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }                    }
pMac->roam.roamSession[sessionId].pCurRoamProfile  &&                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))
pMac->roam.roamSession[sessionId].pCurRoamProfile
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
pCurRoamProfile
((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE))
(pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE) ||                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE)
(pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE)
pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_P2P_CLIENT_MODE
pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona
pMac->roam.roamSession[sessionId].pCurRoamProfile
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
pCurRoamProfile
csrPersona
VOS_P2P_CLIENT_MODE
VOS_P2P_CLIENT_MODE
(pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE)
pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona                            == VOS_STA_MODE
pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona
pMac->roam.roamSession[sessionId].pCurRoamProfile
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
pCurRoamProfile
csrPersona
VOS_STA_MODE
VOS_STA_MODE
{                        if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }                                                    if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }                    }
if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0))                        {                            continue;                        }
(pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )&&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0)
(pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0 )
pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                               == 0
pMac->roam.roamSession[sessionId].connectedProfile.operationChannel
pMac->roam.roamSession[sessionId].connectedProfile
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
connectedProfile
operationChannel
0
(pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0)
pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                               == 0
pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval
pMac->roam.roamSession[sessionId].connectedProfile
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
connectedProfile
beaconInterval
0
{                            continue;                        }
continue;
if (csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval))                        {                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }
csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId ) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval)
csrIsConnStateConnectedInfra(pMac, sessionId) &&                           (pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId )
csrIsConnStateConnectedInfra(pMac, sessionId)
csrIsConnStateConnectedInfra
csrIsConnStateConnectedInfra
pMac
pMac
sessionId
sessionId
(pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId )
pMac->roam.roamSession[sessionId].connectedProfile.operationChannel                                != channelId
pMac->roam.roamSession[sessionId].connectedProfile.operationChannel
pMac->roam.roamSession[sessionId].connectedProfile
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
connectedProfile
operationChannel
channelId
channelId
(pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval)
pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval                                != *beaconInterval
pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval
pMac->roam.roamSession[sessionId].connectedProfile
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
connectedProfile
beaconInterval
*beaconInterval
beaconInterval
beaconInterval
{                            /*                             * Updated beaconInterval should be used only when we are starting a new BSS                              * not incase of client or STA case                             */                            //Calculate beacon Interval for P2P-GO incase of MCC                            new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );                            if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;                            return eHAL_STATUS_SUCCESS;                         }
new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval );
new_beaconInterval = csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval )
new_beaconInterval
new_beaconInterval
csrCalculateMCCBeaconInterval(pMac,                                                 pMac->roam.roamSession[sessionId].bssParams.beaconInterval,                                                *beaconInterval )
csrCalculateMCCBeaconInterval
csrCalculateMCCBeaconInterval
pMac
pMac
pMac->roam.roamSession[sessionId].bssParams.beaconInterval
pMac->roam.roamSession[sessionId].bssParams
pMac->roam.roamSession[sessionId]
pMac->roam.roamSession
pMac->roam
pMac
pMac
roam
roamSession
sessionId
sessionId
bssParams
beaconInterval
*beaconInterval
beaconInterval
beaconInterval
if(*beaconInterval != new_beaconInterval)                                *beaconInterval = new_beaconInterval;
*beaconInterval != new_beaconInterval
*beaconInterval
beaconInterval
beaconInterval
new_beaconInterval
new_beaconInterval
*beaconInterval = new_beaconInterval;
*beaconInterval = new_beaconInterval
*beaconInterval
beaconInterval
beaconInterval
new_beaconInterval
new_beaconInterval
return eHAL_STATUS_SUCCESS;
eHAL_STATUS_SUCCESS
eHAL_STATUS_SUCCESS
break;
default :
smsLog(pMac, LOG1, FL(" Persona not supported : %d"),currBssPersona);
smsLog(pMac, LOG1, FL(" Persona not supported : %d"),currBssPersona)
smsLog
smsLog
pMac
pMac
LOG1
LOG1
FL(" Persona not supported : %d")
FL
FL
" Persona not supported : %d"
currBssPersona
currBssPersona
return eHAL_STATUS_FAILURE;
eHAL_STATUS_FAILURE
eHAL_STATUS_FAILURE
return eHAL_STATUS_SUCCESS;
eHAL_STATUS_SUCCESS
eHAL_STATUS_SUCCESS
-----joern-----
(509,533,0)
(304,563,0)
(560,313,0)
(327,254,0)
(582,99,0)
(448,313,0)
(93,383,0)
(302,380,0)
(558,453,0)
(549,497,0)
(408,74,0)
(372,13,0)
(497,257,0)
(209,186,0)
(198,383,0)
(100,265,0)
(477,383,0)
(440,375,0)
(427,440,0)
(187,266,0)
(115,98,0)
(161,113,0)
(352,260,0)
(553,42,0)
(121,341,0)
(219,164,0)
(175,381,0)
(481,406,0)
(162,526,0)
(561,220,0)
(67,475,0)
(45,566,0)
(321,259,0)
(275,219,0)
(33,313,0)
(373,516,0)
(316,517,0)
(483,412,0)
(72,162,0)
(98,294,0)
(237,433,0)
(457,383,0)
(375,383,0)
(73,79,0)
(577,390,0)
(108,563,0)
(45,167,0)
(10,176,0)
(577,238,0)
(573,280,0)
(42,489,0)
(572,478,0)
(119,556,0)
(259,113,0)
(514,128,0)
(329,20,0)
(458,12,0)
(434,494,0)
(118,145,0)
(348,119,0)
(335,229,0)
(244,560,0)
(354,433,0)
(432,10,0)
(361,494,0)
(455,343,0)
(277,574,0)
(523,81,0)
(558,445,0)
(74,408,0)
(276,239,0)
(252,40,0)
(537,229,0)
(204,203,0)
(28,135,0)
(146,369,0)
(314,110,0)
(544,297,0)
(432,313,0)
(163,135,0)
(343,347,0)
(290,383,0)
(406,367,0)
(19,512,0)
(538,253,0)
(487,2,0)
(394,383,0)
(15,563,0)
(196,254,0)
(507,550,0)
(242,290,0)
(286,127,0)
(280,359,0)
(275,411,0)
(183,322,0)
(98,383,0)
(164,219,0)
(246,92,0)
(206,561,0)
(527,406,0)
(344,452,0)
(120,366,0)
(110,434,0)
(502,248,0)
(102,553,0)
(408,520,0)
(453,346,0)
(247,428,0)
(561,441,0)
(367,58,0)
(334,164,0)
(232,382,0)
(3,11,0)
(371,375,0)
(238,331,0)
(286,189,0)
(454,65,0)
(543,123,0)
(165,266,0)
(366,567,0)
(577,146,0)
(515,519,0)
(8,512,0)
(231,18,0)
(413,246,0)
(216,511,0)
(178,445,0)
(529,383,0)
(560,431,0)
(343,455,0)
(93,420,0)
(89,198,0)
(149,494,0)
(222,203,0)
(431,560,0)
(336,225,0)
(380,383,0)
(210,383,0)
(380,302,0)
(424,248,0)
(533,550,0)
(467,219,0)
(489,392,0)
(510,51,0)
(476,457,0)
(284,175,0)
(298,550,0)
(542,345,0)
(550,533,0)
(4,190,0)
(307,7,0)
(387,403,0)
(343,369,0)
(347,343,0)
(289,271,0)
(426,97,0)
(213,175,0)
(152,21,0)
(33,237,0)
(124,210,0)
(505,549,0)
(240,424,0)
(451,452,0)
(535,227,0)
(283,347,0)
(575,235,0)
(198,431,0)
(457,166,0)
(236,324,0)
(253,414,0)
(172,202,0)
(298,324,0)
(74,313,0)
(249,450,0)
(77,355,0)
(34,110,0)
(224,566,0)
(447,380,0)
(577,119,0)
(352,293,0)
(548,408,0)
(28,101,0)
(50,458,0)
(366,120,0)
(280,573,0)
(397,438,0)
(210,123,0)
(516,373,0)
(486,398,0)
(471,88,0)
(279,241,0)
(299,352,0)
(186,544,0)
(367,313,0)
(575,530,0)
(235,459,0)
(55,459,0)
(248,582,0)
(567,366,0)
(36,310,0)
(51,383,0)
(496,313,0)
(20,250,0)
(282,285,0)
(396,421,0)
(13,59,0)
(211,332,0)
(170,59,0)
(403,383,0)
(221,49,0)
(189,321,0)
(281,473,0)
(93,313,0)
(451,88,0)
(220,561,0)
(345,54,0)
(266,383,0)
(200,338,0)
(141,483,0)
(94,438,0)
(530,412,0)
(159,216,0)
(260,352,0)
(356,377,0)
(577,421,0)
(421,557,0)
(558,383,0)
(256,220,0)
(113,473,0)
(355,328,0)
(123,210,0)
(211,377,0)
(393,298,0)
(378,547,0)
(498,508,0)
(402,357,0)
(539,478,0)
(248,424,0)
(300,573,0)
(551,23,0)
(81,261,0)
(525,477,0)
(439,271,0)
(285,386,0)
(37,423,0)
(31,358,0)
(157,196,0)
(46,180,0)
(466,463,0)
(553,326,0)
(191,367,0)
(494,313,0)
(340,93,0)
(85,296,0)
(188,280,0)
(512,193,0)
(138,259,0)
(107,343,0)
(30,383,0)
(431,198,0)
(415,473,0)
(338,193,0)
(362,433,0)
(14,101,0)
(5,149,0)
(483,567,0)
(405,383,0)
(297,97,0)
(496,87,0)
(110,383,0)
(484,382,0)
(139,122,0)
(566,518,0)
(579,92,0)
(439,438,0)
(330,60,0)
(391,7,0)
(370,465,0)
(114,448,0)
(547,351,0)
(66,343,0)
(535,518,0)
(44,222,0)
(216,114,0)
(97,297,0)
(95,529,0)
(254,322,0)
(429,37,0)
(404,284,0)
(167,180,0)
(113,259,0)
(414,253,0)
(497,549,0)
(470,266,0)
(560,465,0)
(530,575,0)
(20,383,0)
(220,463,0)
(29,30,0)
(489,42,0)
(271,439,0)
(474,434,0)
(48,326,0)
(554,381,0)
(411,383,0)
(60,153,0)
(540,520,0)
(343,21,0)
(520,408,0)
(503,272,0)
(7,526,0)
(576,431,0)
(186,475,0)
(518,535,0)
(65,454,0)
(284,313,0)
(245,563,0)
(412,483,0)
(366,313,0)
(279,517,0)
(78,169,0)
(549,527,0)
(33,95,0)
(207,189,0)
(238,355,0)
(1,516,0)
(267,448,0)
(50,185,0)
(134,496,0)
(500,232,0)
(257,497,0)
(397,475,0)
(342,210,0)
(7,391,0)
(544,186,0)
(437,275,0)
(180,313,0)
(292,464,0)
(457,313,0)
(227,487,0)
(422,324,0)
(346,453,0)
(264,296,0)
(333,212,0)
(218,489,0)
(278,581,0)
(445,558,0)
(527,549,0)
(511,127,0)
(485,23,0)
(56,455,0)
(445,92,0)
(352,299,0)
(359,313,0)
(367,406,0)
(219,275,0)
(565,390,0)
(386,523,0)
(230,176,0)
(343,383,0)
(171,403,0)
(324,383,0)
(377,211,0)
(186,127,0)
(526,162,0)
(222,465,0)
(577,80,0)
(526,7,0)
(270,169,0)
(423,152,0)
(446,12,0)
(419,12,0)
(311,358,0)
(238,423,0)
(254,196,0)
(469,388,0)
(293,352,0)
(412,530,0)
(99,582,0)
(317,357,0)
(201,435,0)
(88,23,0)
(570,405,0)
(480,515,0)
(473,113,0)
(302,581,0)
(428,563,0)
(208,571,0)
(459,359,0)
(574,538,0)
(390,291,0)
(521,294,0)
(448,114,0)
(249,101,0)
(400,290,0)
(6,50,0)
(112,526,0)
(42,553,0)
(253,313,0)
(523,313,0)
(169,383,0)
(364,547,0)
(465,222,0)
(83,197,0)
(227,535,0)
(76,477,0)
(518,166,0)
(425,402,0)
(569,249,0)
(25,397,0)
(18,225,0)
(248,313,0)
(21,369,0)
(546,555,0)
(448,187,0)
(90,51,0)
(194,61,0)
(38,369,0)
(420,93,0)
(493,246,0)
(162,322,0)
(75,332,0)
(518,566,0)
(482,358,0)
(259,313,0)
(271,383,0)
(491,529,0)
(577,464,0)
(339,231,0)
(241,338,0)
(168,326,0)
(577,75,0)
(442,74,0)
(126,558,0)
(24,239,0)
(140,432,0)
(269,233,0)
(517,279,0)
(315,497,0)
(132,457,0)
(145,563,0)
(403,54,0)
(365,313,0)
(79,202,0)
(413,383,0)
(58,367,0)
(363,501,0)
(195,2,0)
(519,190,0)
(167,45,0)
(433,237,0)
(375,306,0)
(101,28,0)
(53,487,0)
(49,424,0)
(272,313,0)
(190,59,0)
(529,95,0)
(360,351,0)
(384,211,0)
(155,555,0)
(84,181,0)
(531,30,0)
(290,231,0)
(438,439,0)
(23,383,0)
(205,287,0)
(223,98,0)
(581,302,0)
(211,383,0)
(362,21,0)
(184,146,0)
(95,33,0)
(424,49,0)
(580,167,0)
(562,272,0)
(547,383,0)
(22,555,0)
(263,454,0)
(475,186,0)
(376,394,0)
(12,383,0)
(158,321,0)
(495,187,0)
(392,441,0)
(64,193,0)
(16,202,0)
(10,432,0)
(533,3,0)
(373,127,0)
(27,202,0)
(149,5,0)
(71,520,0)
(61,414,0)
(54,403,0)
(154,77,0)
(128,5,0)
(405,212,0)
(375,440,0)
(166,457,0)
(203,391,0)
(577,428,0)
(487,227,0)
(468,155,0)
(285,383,0)
(250,20,0)
(351,547,0)
(577,515,0)
(156,343,0)
(251,202,0)
(261,81,0)
(122,51,0)
(160,286,0)
(389,65,0)
(262,444,0)
(59,215,0)
(212,444,0)
(359,280,0)
(338,313,0)
(88,451,0)
(308,261,0)
(63,374,0)
(353,225,0)
(136,49,0)
(54,345,0)
(272,503,0)
(355,77,0)
(559,358,0)
(35,383,0)
(388,92,0)
(104,411,0)
(435,30,0)
(475,397,0)
(231,290,0)
(272,357,0)
(103,523,0)
(411,275,0)
(17,496,0)
(452,451,0)
(36,3,0)
(196,383,0)
(130,21,0)
(133,232,0)
(410,215,0)
(443,563,0)
(35,557,0)
(214,33,0)
(294,180,0)
(26,302,0)
(18,231,0)
(568,444,0)
(111,271,0)
(305,519,0)
(444,313,0)
(228,375,0)
(555,401,0)
(462,81,0)
(432,382,0)
(430,253,0)
(501,120,0)
(373,299,0)
(176,277,0)
(566,127,0)
(519,92,0)
(52,581,0)
(460,250,0)
(345,77,0)
(47,414,0)
(459,235,0)
(325,75,0)
(345,313,0)
(488,95,0)
(358,383,0)
(402,383,0)
(287,290,0)
(278,293,0)
(179,423,0)
(534,386,0)
(290,287,0)
(143,529,0)
(96,28,0)
(444,212,0)
(296,313,0)
(552,451,0)
(406,527,0)
(450,477,0)
(520,383,0)
(229,383,0)
(74,346,0)
(12,458,0)
(273,278,0)
(456,582,0)
(225,383,0)
(151,125,0)
(582,248,0)
(444,262,0)
(175,284,0)
(579,535,0)
(381,383,0)
(116,233,0)
(318,563,0)
(555,155,0)
(144,402,0)
(255,293,0)
(326,553,0)
(277,176,0)
(382,432,0)
(416,210,0)
(337,241,0)
(37,153,0)
(438,397,0)
(210,563,0)
(395,358,0)
(450,249,0)
(193,338,0)
(388,297,0)
(322,254,0)
(564,235,0)
(511,216,0)
(106,573,0)
(455,92,0)
(322,162,0)
(32,153,0)
(203,222,0)
(413,21,0)
(125,261,0)
(153,37,0)
(233,202,0)
(417,152,0)
(120,501,0)
(297,544,0)
(523,386,0)
(535,579,0)
(501,383,0)
(414,61,0)
(81,523,0)
(235,575,0)
(555,383,0)
(57,346,0)
(581,278,0)
(237,33,0)
(260,92,0)
(43,35,0)
(413,571,0)
(359,459,0)
(322,313,0)
(538,574,0)
(153,313,0)
(199,328,0)
(558,59,0)
(249,313,0)
(68,198,0)
(41,279,0)
(328,331,0)
(262,97,0)
(189,286,0)
(436,463,0)
(326,383,0)
(2,487,0)
(229,60,0)
(357,272,0)
(274,9,0)
(51,122,0)
(381,175,0)
(320,211,0)
(0,5,0)
(323,373,0)
(35,398,0)
(513,579,0)
(434,110,0)
(386,285,0)
(309,149,0)
(571,413,0)
(80,479,0)
(265,202,0)
(210,536,0)
(499,80,0)
(473,383,0)
(503,516,0)
(3,533,0)
(399,18,0)
(288,237,0)
(385,380,0)
(577,79,0)
(438,313,0)
(522,301,0)
(232,383,0)
(177,120,0)
(494,149,0)
(461,358,0)
(530,99,0)
(494,434,0)
(164,571,0)
(122,454,0)
(176,10,0)
(547,226,0)
(193,512,0)
(77,345,0)
(114,216,0)
(137,42,0)
(357,402,0)
(295,129,0)
(458,50,0)
(174,563,0)
(234,257,0)
(61,383,0)
(109,196,0)
(477,450,0)
(30,479,0)
(257,284,0)
(185,50,0)
(550,298,0)
(258,114,0)
(303,413,0)
(180,294,0)
(5,128,0)
(142,458,0)
(219,313,0)
(212,405,0)
(105,567,0)
(550,313,0)
(581,313,0)
(567,483,0)
(147,381,0)
(293,278,0)
(454,122,0)
(59,558,0)
(512,383,0)
(11,310,0)
(62,93,0)
(180,167,0)
(117,563,0)
(49,383,0)
(463,220,0)
(39,260,0)
(350,362,0)
(21,413,0)
(532,35,0)
(492,366,0)
(23,88,0)
(301,13,0)
(182,227,0)
(253,538,0)
(166,518,0)
(407,265,0)
(131,453,0)
(391,203,0)
(2,313,0)
(297,388,0)
(516,503,0)
(358,313,0)
(153,60,0)
(150,313,0)
(441,561,0)
(398,35,0)
(324,298,0)
(135,28,0)
(545,441,0)
(319,10,0)
(349,11,0)
(246,413,0)
(243,61,0)
(225,18,0)
(261,125,0)
(541,355,0)
(464,226,0)
(301,92,0)
(148,511,0)
(472,359,0)
(259,321,0)
(241,279,0)
(250,2,0)
(129,313,0)
(173,405,0)
(379,501,0)
(506,418,0)
(392,489,0)
(268,439,0)
(169,58,0)
(312,54,0)
(97,262,0)
(2,250,0)
(578,538,0)
(573,383,0)
(338,241,0)
(69,285,0)
(86,277,0)
(91,503,0)
(99,530,0)
(58,169,0)
(566,45,0)
(490,575,0)
(449,262,0)
(465,560,0)
(358,36,0)
(571,164,0)
(284,257,0)
(13,301,0)
(266,187,0)
(504,412,0)
(463,383,0)
(60,229,0)
(294,98,0)
(217,20,0)
(441,392,0)
(368,58,0)
(82,411,0)
(577,36,0)
(321,189,0)
(382,232,0)
(70,563,0)
(515,215,0)
(299,373,0)
(409,45,0)
(152,331,0)
(394,238,0)
(187,448,0)
(453,558,0)
(574,277,0)
(30,435,0)
(101,249,0)
(433,362,0)
(346,74,0)
(528,3,0)
(290,331,0)
(192,450,0)
(423,37,0)
(571,164,1)
(542,54,1)
(411,383,1)
(497,257,1)
(432,382,1)
(81,462,1)
(133,538,1)
(340,496,1)
(376,328,1)
(389,454,1)
(396,35,1)
(520,71,1)
(324,236,1)
(169,270,1)
(496,313,1)
(511,148,1)
(303,130,1)
(439,268,1)
(210,536,1)
(34,527,1)
(403,171,1)
(70,555,1)
(254,327,1)
(461,11,1)
(430,414,1)
(295,252,1)
(278,273,1)
(70,517,1)
(456,248,1)
(432,313,1)
(402,383,1)
(39,293,1)
(2,195,1)
(213,381,1)
(253,313,1)
(244,431,1)
(577,421,1)
(499,30,1)
(18,399,1)
(382,232,1)
(451,552,1)
(113,473,1)
(445,92,1)
(247,210,1)
(577,428,1)
(147,406,1)
(351,360,1)
(421,396,1)
(302,26,1)
(273,581,1)
(293,255,1)
(317,402,1)
(425,125,1)
(555,155,1)
(101,249,1)
(503,272,1)
(259,313,1)
(581,52,1)
(295,524,1)
(361,434,1)
(77,154,1)
(74,313,1)
(397,25,1)
(229,335,1)
(347,283,1)
(183,254,1)
(366,313,1)
(45,167,1)
(193,64,1)
(358,383,1)
(363,582,1)
(170,166,1)
(232,383,1)
(384,452,1)
(102,326,1)
(519,92,1)
(218,42,1)
(523,386,1)
(162,322,1)
(394,383,1)
(171,387,1)
(299,373,1)
(433,237,1)
(337,338,1)
(268,271,1)
(37,429,1)
(344,451,1)
(301,92,1)
(312,403,1)
(175,213,1)
(208,164,1)
(501,379,1)
(550,313,1)
(388,469,1)
(246,92,1)
(259,113,1)
(179,37,1)
(294,98,1)
(582,248,1)
(0,149,1)
(49,383,1)
(560,313,1)
(286,127,1)
(443,99,1)
(366,120,1)
(50,6,1)
(545,561,1)
(128,514,1)
(530,575,1)
(100,233,1)
(59,558,1)
(157,99,1)
(544,297,1)
(191,58,1)
(19,8,1)
(296,313,1)
(385,373,1)
(224,45,1)
(321,158,1)
(368,169,1)
(578,253,1)
(407,100,1)
(284,404,1)
(426,262,1)
(153,32,1)
(450,192,1)
(463,466,1)
(567,366,1)
(289,517,1)
(567,105,1)
(388,92,1)
(391,203,1)
(324,383,1)
(138,113,1)
(253,430,1)
(346,74,1)
(120,177,1)
(316,279,1)
(2,250,1)
(230,10,1)
(222,44,1)
(577,238,1)
(448,187,1)
(489,42,1)
(562,357,1)
(149,494,1)
(419,446,1)
(95,488,1)
(355,541,1)
(390,565,1)
(93,383,1)
(32,60,1)
(192,477,1)
(573,383,1)
(7,307,1)
(149,309,1)
(406,481,1)
(488,529,1)
(494,313,1)
(272,562,1)
(334,219,1)
(207,321,1)
(473,383,1)
(408,520,1)
(501,383,1)
(264,129,1)
(219,313,1)
(77,345,1)
(203,204,1)
(189,321,1)
(262,449,1)
(35,398,1)
(386,285,1)
(237,33,1)
(457,383,1)
(20,383,1)
(442,408,1)
(326,383,1)
(281,135,1)
(129,313,1)
(343,383,1)
(243,194,1)
(338,313,1)
(125,261,1)
(482,311,1)
(382,484,1)
(549,497,1)
(297,388,1)
(126,170,1)
(209,475,1)
(412,483,1)
(313,150,1)
(529,383,1)
(73,296,1)
(453,131,1)
(492,120,1)
(322,313,1)
(487,2,1)
(67,397,1)
(295,496,1)
(79,73,1)
(321,259,1)
(203,222,1)
(193,512,1)
(453,346,1)
(393,324,1)
(470,165,1)
(210,123,1)
(359,280,1)
(216,159,1)
(444,313,1)
(6,458,1)
(198,383,1)
(13,59,1)
(250,20,1)
(559,482,1)
(186,475,1)
(52,302,1)
(238,394,1)
(568,212,1)
(302,380,1)
(135,163,1)
(261,81,1)
(472,280,1)
(70,544,1)
(467,275,1)
(338,193,1)
(17,134,1)
(131,346,1)
(512,19,1)
(367,58,1)
(28,96,1)
(503,91,1)
(110,314,1)
(61,243,1)
(98,383,1)
(49,221,1)
(522,59,1)
(295,443,1)
(186,127,1)
(95,529,1)
(576,198,1)
(97,426,1)
(573,106,1)
(362,21,1)
(249,313,1)
(378,286,1)
(129,295,1)
(36,3,1)
(280,573,1)
(509,550,1)
(142,12,1)
(284,175,1)
(249,450,1)
(370,560,1)
(326,48,1)
(485,551,1)
(330,229,1)
(524,420,1)
(227,182,1)
(219,467,1)
(159,114,1)
(130,392,1)
(89,68,1)
(270,78,1)
(75,325,1)
(505,497,1)
(155,468,1)
(527,549,1)
(5,0,1)
(41,241,1)
(581,302,1)
(358,313,1)
(278,581,1)
(180,294,1)
(167,580,1)
(532,43,1)
(105,366,1)
(342,416,1)
(517,279,1)
(339,18,1)
(58,169,1)
(214,95,1)
(254,196,1)
(329,217,1)
(153,313,1)
(577,146,1)
(2,313,1)
(235,564,1)
(7,526,1)
(518,535,1)
(275,411,1)
(152,417,1)
(107,21,1)
(122,51,1)
(123,543,1)
(469,97,1)
(399,225,1)
(288,33,1)
(15,286,1)
(241,338,1)
(235,459,1)
(475,397,1)
(190,59,1)
(111,289,1)
(525,574,1)
(189,207,1)
(136,524,1)
(345,54,1)
(357,317,1)
(163,28,1)
(3,528,1)
(161,473,1)
(375,440,1)
(23,383,1)
(544,186,1)
(168,441,1)
(560,244,1)
(96,101,1)
(427,371,1)
(397,438,1)
(558,453,1)
(348,185,1)
(577,515,1)
(494,434,1)
(88,471,1)
(199,355,1)
(491,350,1)
(481,367,1)
(554,147,1)
(551,392,1)
(441,561,1)
(301,522,1)
(381,383,1)
(298,324,1)
(359,472,1)
(114,448,1)
(574,538,1)
(550,298,1)
(577,75,1)
(229,383,1)
(335,537,1)
(405,383,1)
(577,36,1)
(305,13,1)
(513,227,1)
(188,573,1)
(233,269,1)
(33,95,1)
(459,55,1)
(266,383,1)
(1,503,1)
(35,383,1)
(187,266,1)
(44,465,1)
(23,485,1)
(452,344,1)
(217,566,1)
(31,559,1)
(64,512,1)
(45,409,1)
(65,389,1)
(287,205,1)
(141,567,1)
(212,405,1)
(526,162,1)
(261,308,1)
(238,355,1)
(320,384,1)
(538,253,1)
(428,247,1)
(43,511,1)
(543,342,1)
(151,261,1)
(520,383,1)
(187,495,1)
(309,494,1)
(411,82,1)
(466,436,1)
(76,525,1)
(228,574,1)
(537,290,1)
(267,187,1)
(74,408,1)
(387,152,1)
(519,305,1)
(540,126,1)
(231,339,1)
(451,88,1)
(386,534,1)
(516,503,1)
(176,230,1)
(575,490,1)
(454,263,1)
(500,133,1)
(394,376,1)
(483,567,1)
(354,237,1)
(37,153,1)
(350,343,1)
(560,431,1)
(315,257,1)
(566,45,1)
(454,122,1)
(415,281,1)
(476,391,1)
(405,173,1)
(241,337,1)
(211,377,1)
(414,47,1)
(185,50,1)
(449,444,1)
(121,391,1)
(319,432,1)
(232,500,1)
(271,111,1)
(406,367,1)
(416,524,1)
(535,227,1)
(258,448,1)
(561,220,1)
(66,455,1)
(176,10,1)
(225,353,1)
(444,568,1)
(29,299,1)
(496,17,1)
(373,516,1)
(85,264,1)
(367,313,1)
(458,12,1)
(295,15,1)
(277,86,1)
(42,137,1)
(360,364,1)
(262,444,1)
(431,198,1)
(46,294,1)
(437,411,1)
(308,81,1)
(434,110,1)
(250,460,1)
(248,424,1)
(255,278,1)
(424,49,1)
(435,201,1)
(290,231,1)
(438,313,1)
(417,423,1)
(148,216,1)
(53,2,1)
(408,548,1)
(528,533,1)
(156,107,1)
(523,103,1)
(57,74,1)
(483,141,1)
(166,457,1)
(30,383,1)
(122,139,1)
(290,383,1)
(552,88,1)
(582,456,1)
(553,102,1)
(294,521,1)
(477,76,1)
(381,554,1)
(346,57,1)
(58,368,1)
(457,313,1)
(5,149,1)
(15,375,1)
(480,190,1)
(56,347,1)
(204,222,1)
(529,143,1)
(307,526,1)
(8,128,1)
(580,180,1)
(15,125,1)
(22,527,1)
(253,414,1)
(223,457,1)
(495,266,1)
(471,23,1)
(398,486,1)
(502,424,1)
(103,386,1)
(198,89,1)
(124,123,1)
(420,93,1)
(150,365,1)
(184,362,1)
(285,383,1)
(429,153,1)
(353,336,1)
(285,69,1)
(166,518,1)
(515,480,1)
(74,442,1)
(566,127,1)
(248,502,1)
(473,415,1)
(299,352,1)
(54,312,1)
(490,235,1)
(392,441,1)
(465,560,1)
(140,382,1)
(50,458,1)
(227,487,1)
(153,60,1)
(356,320,1)
(90,544,1)
(517,316,1)
(463,383,1)
(169,383,1)
(106,300,1)
(409,167,1)
(220,463,1)
(533,509,1)
(18,225,1)
(413,383,1)
(547,383,1)
(373,323,1)
(533,550,1)
(248,313,1)
(275,437,1)
(566,224,1)
(259,138,1)
(311,461,1)
(527,406,1)
(47,61,1)
(423,37,1)
(13,372,1)
(210,383,1)
(493,303,1)
(152,21,1)
(154,345,1)
(54,403,1)
(236,422,1)
(272,357,1)
(190,4,1)
(295,121,1)
(474,110,1)
(441,545,1)
(119,348,1)
(104,246,1)
(373,127,1)
(450,477,1)
(78,524,1)
(489,218,1)
(462,523,1)
(431,576,1)
(165,128,1)
(530,412,1)
(465,370,1)
(443,166,1)
(26,380,1)
(125,151,1)
(71,540,1)
(12,383,1)
(375,383,1)
(242,362,1)
(424,240,1)
(579,92,1)
(260,92,1)
(507,298,1)
(455,56,1)
(550,507,1)
(115,223,1)
(577,79,1)
(11,349,1)
(246,493,1)
(219,275,1)
(413,246,1)
(577,464,1)
(36,358,1)
(359,313,1)
(561,206,1)
(240,49,1)
(284,313,1)
(364,378,1)
(234,284,1)
(132,476,1)
(571,208,1)
(547,351,1)
(265,407,1)
(72,322,1)
(180,313,1)
(345,313,1)
(445,178,1)
(91,272,1)
(48,168,1)
(14,249,1)
(225,383,1)
(177,501,1)
(30,435,1)
(93,62,1)
(570,186,1)
(372,301,1)
(477,383,1)
(222,465,1)
(433,354,1)
(99,582,1)
(448,313,1)
(558,383,1)
(511,127,1)
(468,546,1)
(88,23,1)
(260,39,1)
(221,136,1)
(377,356,1)
(345,542,1)
(440,427,1)
(280,188,1)
(135,28,1)
(457,132,1)
(336,287,1)
(81,523,1)
(438,94,1)
(13,301,1)
(333,405,1)
(114,258,1)
(205,400,1)
(365,185,1)
(164,219,1)
(403,383,1)
(565,65,1)
(10,432,1)
(271,383,1)
(400,242,1)
(414,61,1)
(343,21,1)
(380,383,1)
(460,20,1)
(577,119,1)
(486,532,1)
(20,329,1)
(220,256,1)
(68,7,1)
(286,160,1)
(200,193,1)
(352,293,1)
(446,265,1)
(452,451,1)
(458,142,1)
(112,162,1)
(80,499,1)
(549,505,1)
(439,271,1)
(515,519,1)
(314,34,1)
(548,520,1)
(249,569,1)
(455,92,1)
(322,183,1)
(110,383,1)
(395,31,1)
(238,423,1)
(120,501,1)
(391,7,1)
(12,419,1)
(343,455,1)
(277,176,1)
(139,51,1)
(137,553,1)
(402,144,1)
(86,176,1)
(101,14,1)
(70,511,1)
(173,570,1)
(82,104,1)
(531,29,1)
(292,547,1)
(33,214,1)
(93,313,1)
(279,41,1)
(252,420,1)
(349,3,1)
(21,413,1)
(175,381,1)
(33,313,1)
(272,313,1)
(577,80,1)
(300,412,1)
(295,70,1)
(362,433,1)
(371,228,1)
(514,5,1)
(201,531,1)
(55,359,1)
(143,491,1)
(263,122,1)
(128,5,1)
(180,46,1)
(459,359,1)
(579,513,1)
(535,579,1)
(282,135,1)
(569,450,1)
(343,347,1)
(146,184,1)
(546,22,1)
(269,116,1)
(97,262,1)
(496,87,1)
(367,191,1)
(558,445,1)
(94,439,1)
(286,189,1)
(422,452,1)
(438,439,1)
(497,315,1)
(144,425,1)
(237,288,1)
(534,285,1)
(444,212,1)
(323,516,1)
(113,161,1)
(15,299,1)
(290,287,1)
(412,504,1)
(60,229,1)
(404,175,1)
(186,209,1)
(343,66,1)
(194,524,1)
(212,333,1)
(355,77,1)
(413,571,1)
(3,533,1)
(526,112,1)
(206,220,1)
(4,519,1)
(325,211,1)
(358,395,1)
(279,241,1)
(42,553,1)
(51,383,1)
(392,489,1)
(564,459,1)
(62,340,1)
(69,282,1)
(504,483,1)
(327,196,1)
(28,101,1)
(512,383,1)
(257,284,1)
(297,97,1)
(51,510,1)
(494,361,1)
(257,234,1)
(109,157,1)
(538,578,1)
(338,200,1)
(574,277,1)
(216,114,1)
(447,385,1)
(484,232,1)
(264,313,1)
(160,189,1)
(283,156,1)
(164,334,1)
(577,390,1)
(182,487,1)
(98,115,1)
(211,383,1)
(158,259,1)
(357,402,1)
(464,292,1)
(434,474,1)
(521,98,1)
(134,296,1)
(266,470,1)
(436,65,1)
(178,453,1)
(352,260,1)
(293,278,1)
(99,530,1)
(511,216,1)
(575,235,1)
(423,179,1)
(10,319,1)
(541,77,1)
(167,180,1)
(480,13,1)
(60,330,1)
(196,109,1)
(298,393,1)
(25,438,1)
(296,85,1)
(516,1,1)
(328,199,1)
(322,254,1)
(510,90,1)
(196,383,1)
(553,326,1)
(432,140,1)
(379,363,1)
(523,313,1)
(162,72,1)
(256,463,1)
(518,566,1)
(210,124,1)
(581,313,1)
(366,492,1)
(487,53,1)
(231,18,1)
(448,267,1)
(65,454,1)
(380,447,1)
(195,250,1)
(61,383,1)
(555,383,1)
(475,67,1)
(457,391,2)
(281,135,2)
(405,383,2)
(427,574,2)
(564,412,2)
(560,313,2)
(426,186,2)
(552,392,2)
(234,406,2)
(432,382,2)
(574,277,2)
(496,313,2)
(425,125,2)
(70,511,2)
(129,496,2)
(255,373,2)
(408,166,2)
(3,452,2)
(562,125,2)
(8,128,2)
(451,88,2)
(295,574,2)
(81,135,2)
(501,383,2)
(463,383,2)
(85,299,2)
(444,186,2)
(451,392,2)
(187,128,2)
(322,313,2)
(105,582,2)
(296,544,2)
(290,383,2)
(85,496,2)
(189,135,2)
(186,517,2)
(259,313,2)
(491,392,2)
(18,362,2)
(376,362,2)
(122,51,2)
(402,383,2)
(128,5,2)
(286,127,2)
(515,166,2)
(43,511,2)
(114,448,2)
(518,566,2)
(385,373,2)
(494,313,2)
(529,392,2)
(78,524,2)
(264,517,2)
(264,496,2)
(122,544,2)
(355,362,2)
(295,527,2)
(577,79,2)
(257,284,2)
(227,487,2)
(238,362,2)
(514,527,2)
(110,383,2)
(125,261,2)
(15,125,2)
(95,392,2)
(112,99,2)
(358,452,2)
(188,412,2)
(229,383,2)
(299,373,2)
(357,402,2)
(475,397,2)
(129,527,2)
(219,313,2)
(182,566,2)
(7,99,2)
(264,166,2)
(10,538,2)
(261,135,2)
(436,65,2)
(273,373,2)
(133,538,2)
(4,13,2)
(263,544,2)
(575,412,2)
(561,220,2)
(129,511,2)
(193,128,2)
(94,517,2)
(264,125,2)
(362,392,2)
(387,362,2)
(345,362,2)
(413,392,2)
(177,582,2)
(347,392,2)
(89,7,2)
(433,237,2)
(170,166,2)
(348,185,2)
(213,406,2)
(231,18,2)
(126,166,2)
(581,313,2)
(282,135,2)
(579,92,2)
(198,383,2)
(541,362,2)
(302,373,2)
(352,373,2)
(389,544,2)
(296,391,2)
(292,286,2)
(220,65,2)
(285,135,2)
(67,517,2)
(379,582,2)
(434,527,2)
(101,574,2)
(312,362,2)
(187,266,2)
(295,299,2)
(34,527,2)
(264,391,2)
(476,391,2)
(340,496,2)
(483,567,2)
(186,127,2)
(137,441,2)
(398,511,2)
(74,313,2)
(162,322,2)
(232,538,2)
(144,125,2)
(307,99,2)
(408,520,2)
(0,527,2)
(300,412,2)
(363,582,2)
(21,392,2)
(367,313,2)
(295,391,2)
(527,524,2)
(481,524,2)
(489,441,2)
(28,574,2)
(544,186,2)
(295,420,2)
(146,362,2)
(496,87,2)
(577,390,2)
(196,383,2)
(569,574,2)
(280,573,2)
(449,186,2)
(382,538,2)
(37,153,2)
(237,33,2)
(568,186,2)
(252,420,2)
(577,36,2)
(77,362,2)
(575,235,2)
(216,114,2)
(151,135,2)
(271,383,2)
(507,452,2)
(351,286,2)
(454,544,2)
(555,155,2)
(566,127,2)
(278,373,2)
(279,128,2)
(81,523,2)
(574,524,2)
(489,42,2)
(382,232,2)
(53,566,2)
(358,383,2)
(573,383,2)
(37,362,2)
(459,359,2)
(391,203,2)
(175,381,2)
(109,99,2)
(439,271,2)
(221,524,2)
(36,3,2)
(264,185,2)
(463,65,2)
(29,299,2)
(516,503,2)
(296,99,2)
(129,299,2)
(295,511,2)
(301,166,2)
(49,524,2)
(296,527,2)
(224,457,2)
(196,99,2)
(297,97,2)
(70,527,2)
(131,166,2)
(225,383,2)
(333,186,2)
(453,346,2)
(546,527,2)
(66,392,2)
(411,383,2)
(272,357,2)
(495,128,2)
(295,524,2)
(295,125,2)
(20,383,2)
(313,185,2)
(85,391,2)
(277,538,2)
(132,391,2)
(231,362,2)
(99,582,2)
(547,383,2)
(253,524,2)
(510,544,2)
(61,524,2)
(404,406,2)
(198,7,2)
(223,457,2)
(577,464,2)
(535,227,2)
(278,581,2)
(85,125,2)
(431,198,2)
(57,166,2)
(343,383,2)
(11,452,2)
(297,388,2)
(296,496,2)
(106,412,2)
(368,524,2)
(558,166,2)
(428,524,2)
(180,313,2)
(338,313,2)
(359,280,2)
(51,383,2)
(485,392,2)
(362,21,2)
(320,452,2)
(179,362,2)
(51,544,2)
(438,517,2)
(163,574,2)
(529,383,2)
(296,524,2)
(453,166,2)
(528,452,2)
(496,296,2)
(260,92,2)
(243,524,2)
(241,128,2)
(377,452,2)
(59,166,2)
(497,406,2)
(577,428,2)
(296,511,2)
(386,285,2)
(336,362,2)
(535,566,2)
(160,135,2)
(516,125,2)
(219,275,2)
(538,524,2)
(95,529,2)
(293,373,2)
(295,517,2)
(515,519,2)
(74,408,2)
(149,527,2)
(294,457,2)
(13,301,2)
(180,294,2)
(324,383,2)
(473,383,2)
(275,411,2)
(509,452,2)
(103,135,2)
(367,58,2)
(164,392,2)
(238,355,2)
(236,452,2)
(268,517,2)
(149,494,2)
(5,527,2)
(325,452,2)
(13,166,2)
(80,299,2)
(70,517,2)
(353,362,2)
(270,524,2)
(577,421,2)
(180,457,2)
(567,366,2)
(375,440,2)
(293,278,2)
(503,272,2)
(422,452,2)
(424,49,2)
(210,123,2)
(544,517,2)
(440,574,2)
(531,299,2)
(280,412,2)
(397,438,2)
(388,92,2)
(520,383,2)
(190,13,2)
(337,128,2)
(119,185,2)
(512,128,2)
(464,286,2)
(204,7,2)
(497,257,2)
(166,518,2)
(165,128,2)
(32,362,2)
(420,496,2)
(517,128,2)
(393,452,2)
(296,185,2)
(271,517,2)
(444,212,2)
(178,166,2)
(88,23,2)
(264,99,2)
(115,457,2)
(490,412,2)
(247,524,2)
(22,527,2)
(480,166,2)
(364,286,2)
(571,392,2)
(161,135,2)
(254,196,2)
(554,406,2)
(264,286,2)
(511,216,2)
(14,574,2)
(533,452,2)
(267,128,2)
(573,412,2)
(433,392,2)
(193,512,2)
(459,412,2)
(469,186,2)
(566,45,2)
(432,538,2)
(2,566,2)
(275,392,2)
(295,99,2)
(248,424,2)
(462,135,2)
(397,517,2)
(358,313,2)
(211,452,2)
(262,186,2)
(582,524,2)
(60,229,2)
(285,383,2)
(45,457,2)
(148,128,2)
(373,127,2)
(296,313,2)
(581,302,2)
(166,457,2)
(212,405,2)
(542,362,2)
(48,441,2)
(229,362,2)
(441,561,2)
(28,101,2)
(99,524,2)
(429,362,2)
(386,135,2)
(411,392,2)
(511,128,2)
(442,166,2)
(85,166,2)
(264,511,2)
(560,431,2)
(240,524,2)
(421,511,2)
(71,166,2)
(289,517,2)
(157,99,2)
(159,128,2)
(158,135,2)
(413,246,2)
(349,452,2)
(290,362,2)
(359,412,2)
(249,450,2)
(85,286,2)
(85,524,2)
(169,524,2)
(154,362,2)
(77,345,2)
(511,127,2)
(457,383,2)
(322,99,2)
(76,574,2)
(533,550,2)
(129,125,2)
(414,524,2)
(7,526,2)
(549,406,2)
(262,444,2)
(42,553,2)
(581,373,2)
(295,286,2)
(567,582,2)
(242,362,2)
(439,517,2)
(60,362,2)
(85,527,2)
(30,299,2)
(571,164,2)
(395,452,2)
(458,12,2)
(39,373,2)
(113,135,2)
(548,166,2)
(150,185,2)
(46,457,2)
(82,392,2)
(185,50,2)
(210,524,2)
(530,575,2)
(167,180,2)
(445,166,2)
(392,65,2)
(346,74,2)
(85,517,2)
(2,250,2)
(350,392,2)
(18,225,2)
(50,458,2)
(139,544,2)
(475,517,2)
(339,362,2)
(438,439,2)
(98,383,2)
(405,186,2)
(367,524,2)
(472,412,2)
(49,383,2)
(272,313,2)
(551,392,2)
(237,392,2)
(162,99,2)
(79,296,2)
(375,574,2)
(70,544,2)
(328,362,2)
(423,362,2)
(244,7,2)
(558,383,2)
(257,406,2)
(102,441,2)
(545,65,2)
(225,362,2)
(381,383,2)
(445,92,2)
(219,392,2)
(352,293,2)
(303,392,2)
(241,338,2)
(457,313,2)
(90,544,2)
(579,566,2)
(432,313,2)
(534,135,2)
(138,135,2)
(129,574,2)
(164,219,2)
(135,574,2)
(266,128,2)
(402,125,2)
(260,373,2)
(45,167,2)
(296,420,2)
(85,185,2)
(59,558,2)
(199,362,2)
(414,61,2)
(412,582,2)
(330,362,2)
(74,166,2)
(373,516,2)
(346,166,2)
(555,527,2)
(54,362,2)
(296,574,2)
(321,259,2)
(372,166,2)
(5,149,2)
(283,392,2)
(296,286,2)
(129,391,2)
(12,383,2)
(65,544,2)
(120,582,2)
(530,412,2)
(577,119,2)
(121,391,2)
(10,432,2)
(111,517,2)
(394,383,2)
(93,496,2)
(91,125,2)
(513,566,2)
(85,420,2)
(437,392,2)
(561,65,2)
(200,128,2)
(512,383,2)
(417,362,2)
(371,574,2)
(21,413,2)
(468,527,2)
(532,511,2)
(537,362,2)
(264,299,2)
(232,383,2)
(153,362,2)
(261,81,2)
(129,99,2)
(294,98,2)
(547,286,2)
(345,313,2)
(173,186,2)
(308,135,2)
(183,99,2)
(65,454,2)
(101,249,2)
(214,392,2)
(317,125,2)
(58,524,2)
(553,441,2)
(494,434,2)
(266,383,2)
(256,65,2)
(487,566,2)
(456,524,2)
(195,566,2)
(324,452,2)
(297,186,2)
(455,392,2)
(467,392,2)
(75,452,2)
(443,99,2)
(288,392,2)
(153,313,2)
(502,524,2)
(558,453,2)
(176,10,2)
(394,362,2)
(211,383,2)
(42,441,2)
(212,186,2)
(362,433,2)
(326,441,2)
(169,383,2)
(560,7,2)
(3,533,2)
(47,524,2)
(259,113,2)
(570,186,2)
(574,538,2)
(218,441,2)
(314,527,2)
(88,392,2)
(406,524,2)
(203,7,2)
(216,128,2)
(525,574,2)
(171,362,2)
(98,457,2)
(555,383,2)
(184,362,2)
(73,296,2)
(415,135,2)
(167,457,2)
(248,524,2)
(527,549,2)
(352,260,2)
(550,298,2)
(465,560,2)
(222,7,2)
(135,28,2)
(354,392,2)
(192,574,2)
(279,241,2)
(343,21,2)
(486,511,2)
(492,582,2)
(400,362,2)
(482,452,2)
(17,296,2)
(550,313,2)
(396,511,2)
(356,452,2)
(254,99,2)
(258,128,2)
(576,7,2)
(129,313,2)
(355,77,2)
(577,515,2)
(299,125,2)
(68,7,2)
(343,455,2)
(217,566,2)
(335,362,2)
(392,489,2)
(113,473,2)
(62,496,2)
(20,566,2)
(253,313,2)
(558,445,2)
(466,65,2)
(15,299,2)
(388,186,2)
(523,135,2)
(323,125,2)
(210,536,2)
(272,125,2)
(550,452,2)
(413,383,2)
(334,392,2)
(366,313,2)
(484,538,2)
(378,286,2)
(290,287,2)
(176,538,2)
(366,120,2)
(15,286,2)
(295,166,2)
(361,527,2)
(519,13,2)
(566,457,2)
(582,248,2)
(521,457,2)
(207,135,2)
(448,187,2)
(64,128,2)
(205,362,2)
(248,313,2)
(444,313,2)
(523,386,2)
(1,125,2)
(56,392,2)
(264,527,2)
(416,524,2)
(2,313,2)
(493,392,2)
(166,391,2)
(250,566,2)
(359,313,2)
(104,392,2)
(391,99,2)
(253,414,2)
(535,579,2)
(55,412,2)
(235,459,2)
(524,420,2)
(544,297,2)
(526,162,2)
(578,524,2)
(434,110,2)
(264,574,2)
(471,392,2)
(41,128,2)
(329,566,2)
(30,435,2)
(577,238,2)
(250,20,2)
(123,524,2)
(540,166,2)
(465,7,2)
(93,313,2)
(299,352,2)
(447,373,2)
(526,99,2)
(97,262,2)
(380,383,2)
(343,392,2)
(296,517,2)
(501,582,2)
(413,571,2)
(538,253,2)
(186,475,2)
(409,457,2)
(345,54,2)
(305,13,2)
(153,60,2)
(23,383,2)
(477,574,2)
(530,582,2)
(85,511,2)
(455,92,2)
(286,189,2)
(33,313,2)
(474,527,2)
(152,362,2)
(152,21,2)
(326,383,2)
(264,544,2)
(298,452,2)
(85,574,2)
(380,373,2)
(191,524,2)
(58,169,2)
(301,92,2)
(296,166,2)
(52,373,2)
(547,351,2)
(227,566,2)
(129,166,2)
(298,324,2)
(44,7,2)
(246,92,2)
(15,574,2)
(577,75,2)
(452,451,2)
(238,423,2)
(206,65,2)
(35,398,2)
(543,524,2)
(441,65,2)
(344,392,2)
(134,296,2)
(424,524,2)
(33,95,2)
(450,574,2)
(448,313,2)
(505,406,2)
(201,299,2)
(189,321,2)
(107,392,2)
(284,313,2)
(360,286,2)
(30,383,2)
(147,406,2)
(370,7,2)
(143,392,2)
(296,125,2)
(235,412,2)
(580,457,2)
(504,582,2)
(246,392,2)
(85,99,2)
(194,524,2)
(190,59,2)
(517,279,2)
(384,452,2)
(13,59,2)
(86,538,2)
(375,383,2)
(230,538,2)
(222,465,2)
(473,135,2)
(210,383,2)
(129,517,2)
(342,524,2)
(518,535,2)
(69,135,2)
(120,501,2)
(338,128,2)
(319,538,2)
(431,7,2)
(577,80,2)
(168,441,2)
(295,496,2)
(286,135,2)
(35,511,2)
(124,524,2)
(390,65,2)
(295,544,2)
(19,128,2)
(26,373,2)
(518,457,2)
(366,582,2)
(577,146,2)
(129,544,2)
(522,166,2)
(500,538,2)
(264,420,2)
(443,166,2)
(519,92,2)
(220,463,2)
(461,452,2)
(249,313,2)
(487,2,2)
(450,477,2)
(403,383,2)
(488,392,2)
(72,99,2)
(130,392,2)
(25,517,2)
(357,125,2)
(54,403,2)
(435,299,2)
(430,524,2)
(287,362,2)
(327,99,2)
(315,406,2)
(36,452,2)
(302,380,2)
(399,362,2)
(559,452,2)
(460,566,2)
(549,497,2)
(228,574,2)
(316,128,2)
(290,231,2)
(448,128,2)
(423,37,2)
(438,313,2)
(343,347,2)
(565,65,2)
(381,406,2)
(110,527,2)
(93,383,2)
(129,524,2)
(31,452,2)
(483,582,2)
(311,452,2)
(96,574,2)
(470,128,2)
(309,527,2)
(129,286,2)
(264,524,2)
(420,93,2)
(141,582,2)
(156,392,2)
(373,125,2)
(527,406,2)
(403,362,2)
(391,7,2)
(338,193,2)
(494,527,2)
(35,383,2)
(499,299,2)
(321,135,2)
(553,326,2)
(452,392,2)
(392,441,2)
(208,392,2)
(277,176,2)
(33,392,2)
(97,186,2)
(61,383,2)
(175,406,2)
(365,185,2)
(128,527,2)
(520,166,2)
(523,313,2)
(454,122,2)
(284,175,2)
(129,420,2)
(211,377,2)
(140,538,2)
(259,135,2)
(136,524,2)
(203,222,2)
(322,254,2)
(125,135,2)
(114,128,2)
(23,392,2)
(503,125,2)
(249,574,2)
(284,406,2)
(99,530,2)
(209,517,2)
(477,383,2)
(155,527,2)
(85,544,2)
(296,299,2)
(412,483,2)
(406,367,2)
-----------------------------------
(0,bssPersona)
(1,operationChn)
(2,pMac->roam.roamSession[sessionId])
(3,pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval)
(4,new_beaconInterval)
(5,pMac->roam.roamSession[sessionId].bssParams.bssPersona)
(6,fenableMCCMode)
(7,pMac->roam.roamSession[sessionId].connectedProfile.operationChannel\n\\n                               == 0)
(8,pMac)
(9,)
(10,pMac->roam.roamSession[sessionId].pCurRoamProfile)
(11,pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval =  eANI_BOOLEAN_FALSE)
(12,pMac->roam)
(13,*beaconInterval != new_beaconInterval)
(14,bssParams)
(15,break;)
(16,sessionId)
(17,sessionId)
(18,pMac->roam.configParam)
(19,roam)
(20,pMac->roam)
(21,new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, *beaconInterval, \n\\n                                                         pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
(22,pMac)
(23,pMac->roam)
(24,switch (currBssPersona)
(25,bssParams)
(26,roamSession)
(27,if (!pMac->roam.configParam.fenableMCCMode)
(28,pMac->roam.roamSession[sessionId].bssParams.bssPersona)
(29,pMac)
(30,smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to P2P_GO network ...")
(31,eCSR_ROAM_SEND_P2P_STOP_BSS)
(32,sessionId)
(33,pMac->roam.roamSession[sessionId])
(34,pMac)
(35,smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP +STA****")
(36,return csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE)
(37,pMac->roam.roamSession[sessionId].bssParams)
(38,if (new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
(39,beaconInterval)
(40,)
(41,bssPersona)
(42,pMac->roam.configParam.fAllowMCCGODiffBI)
(43,pMac)
(44,beaconInterval)
(45,pMac->roam.roamSession[sessionId].connectedProfile.operationChannel)
(46,sessionId)
(47,roamSession)
(48,roam)
(49,pMac->roam)
(50,pMac->roam.configParam.fenableMCCMode)
(51,pMac->roam)
(52,sessionId)
(53,connectedProfile)
(54,pMac->roam.roamSession)
(55,pCurRoamProfile)
(56,beaconInterval)
(57,bssParams)
(58,pMac->roam.roamSession)
(59,new_beaconInterval = csrCalculateMCCBeaconInterval(pMac, \n\\n                                                pMac->roam.roamSession[sessionId].bssParams.beaconInterval,\n\\n                                                *beaconInterval )
(60,pMac->roam.roamSession)
(61,pMac->roam)
(62,sessionId)
(63,if ( pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)
(64,roamSession)
(65,pMac->roam.configParam.fAllowMCCGODiffBI == 0x01)
(66,new_beaconInterval)
(67,operationChn)
(68,pMac)
(69,roam)
(70,break;)
(71,roam)
(72,connectedProfile)
(73,eHAL_STATUS_SUCCESS)
(74,pMac->roam.roamSession[sessionId])
(75,return eHAL_STATUS_FAILURE;)
(76,roam)
(77,pMac->roam.roamSession[sessionId].bssParams)
(78,pMac)
(79,return eHAL_STATUS_SUCCESS;)
(80,return eHAL_STATUS_FAILURE;)
(81,pMac->roam.roamSession[sessionId].bssParams)
(82,roam)
(83,if ((pMac->roam.roamSession[sessionId].bssParams.operationChn \n\\n                                != channelId )
(84,if (pMac->roam.roamSession[sessionId].bssParams.operationChn \n\\n                                                        != channelId )
(85,CSR_ROAM_SESSION_MAX)
(86,VOS_STA_MODE)
(87,tANI_U32 cursessionId)
(88,pMac->roam.configParam)
(89,roam)
(90,pMac)
(91,bssParams)
(92,tANI_U16 *beaconInterval)
(93,CSR_IS_SESSION_VALID( pMac, sessionId )
(94,sessionId)
(95,pMac->roam.roamSession)
(96,bssPersona)
(97,pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
(98,pMac->roam)
(99,pMac->roam.roamSession[sessionId].pCurRoamProfile  &&\n\\n                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona\n\\n                            == VOS_P2P_CLIENT_MODE)
(100,new_beaconInterval)
(101,pMac->roam.roamSession[sessionId].bssParams)
(102,configParam)
(103,sessionId)
(104,pMac)
(105,pCurRoamProfile)
(106,roam)
(107,pMac)
(108,if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&\n\\n                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona\n\\n                                                                == VOS_STA_MODE)
(109,roam)
(110,pMac->roam)
(111,roam)
(112,operationChannel)
(113,pMac->roam.roamSession)
(114,pMac->roam.roamSession[sessionId].bssParams)
(115,roam)
(116,sessionId)
(117,case VOS_STA_MODE:)
(118,if (pMac->roam.roamSession[sessionId].pCurRoamProfile  &&\n\\n                      ((pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona\n\\n                            == VOS_P2P_CLIENT_MODE)
(119,return eHAL_STATUS_FAILURE;)
(120,pMac->roam.roamSession)
(121,continue;)
(122,pMac->roam.configParam)
(123,FL(" Persona not supported : %d")
(124,currBssPersona)
(125,pMac->roam.roamSession[sessionId].bssParams.bssPersona\n\\n                                    == VOS_P2P_GO_MODE)
(126,pMac)
(127,tANI_U8 channelId)
(128,pMac->roam.roamSession[sessionId].bssParams.bssPersona\n\\n                                      == VOS_STA_SAP_MODE)
(129,sessionId++)
(130,new_beaconInterval)
(131,beaconInterval)
(132,sessionId)
(133,pMac)
(134,cursessionId)
(135,pMac->roam.roamSession[sessionId].bssParams.bssPersona\n\\n                                      == VOS_STA_SAP_MODE)
(136,pMac)
(137,fAllowMCCGODiffBI)
(138,sessionId)
(139,configParam)
(140,sessionId)
(141,csrPersona)
(142,configParam)
(143,roam)
(144,roam)
(145,)
(146,return eHAL_STATUS_SUCCESS;)
(147,pMac)
(148,channelId)
(149,pMac->roam.roamSession[sessionId].bssParams)
(150,0)
(151,VOS_P2P_GO_MODE)
(152,pMac->roam.roamSession[sessionId].bssParams.beaconInterval = new_beaconInterval)
(153,pMac->roam.roamSession[sessionId])
(154,bssParams)
(155,FL(" Beacon Interval Validation not required for STA/CLIENT")
(156,LOG1)
(157,pMac)
(158,bssParams)
(159,operationChn)
(160,channelId)
(161,roamSession)
(162,pMac->roam.roamSession[sessionId].connectedProfile)
(163,VOS_STA_SAP_MODE)
(164,pMac->roam.roamSession[sessionId].bssParams)
(165,pMac)
(166,csrIsConnStateConnectedInfra(pMac, sessionId)
(167,pMac->roam.roamSession[sessionId].connectedProfile)
(168,pMac)
(169,pMac->roam)
(170,new_beaconInterval)
(171,roam)
(172,for (sessionId = 0; sessionId < CSR_ROAM_SESSION_MAX; sessionId++ )
(173,roam)
(174,case VOS_P2P_GO_MODE :)
(175,pMac->roam.roamSession)
(176,pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona)
(177,roamSession)
(178,beaconInterval)
(179,beaconInterval)
(180,pMac->roam.roamSession[sessionId])
(181,)
(182,beaconInterval)
(183,sessionId)
(184,eHAL_STATUS_SUCCESS)
(185,!pMac->roam.configParam.fenableMCCMode)
(186,pMac->roam.roamSession[sessionId].bssParams.operationChn \n\\n                                != channelId)
(187,pMac->roam.roamSession)
(188,roamSession)
(189,pMac->roam.roamSession[sessionId].bssParams.operationChn)
(190,*beaconInterval = new_beaconInterval)
(191,sessionId)
(192,roamSession)
(193,pMac->roam.roamSession)
(194,pMac)
(195,sessionId)
(196,pMac->roam)
(197,)
(198,pMac->roam)
(199,eANI_BOOLEAN_TRUE)
(200,sessionId)
(201,"BeaconInterval is different cannot connect to P2P_GO network ...")
(202,)
(203,pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval\n\\n                               == 0)
(204,0)
(205," Beacon Interval got changed config used: %d\\n")
(206,fAllowMCCGODiffBI)
(207,operationChn)
(208,beaconInterval)
(209,channelId)
(210,smsLog(pMac, LOG1, FL(" Persona not supported : %d")
(211,smsLog(pMac, LOGE, FL("BeaconInterval is different cannot connect to preferred AP...")
(212,pMac->roam.roamSession)
(213,roamSession)
(214,sessionId)
(215,)
(216,pMac->roam.roamSession[sessionId].bssParams.operationChn)
(217,pMac)
(218,0x04)
(219,pMac->roam.roamSession[sessionId])
(220,pMac->roam.configParam)
(221,roam)
(222,pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval)
(223,pMac)
(224,channelId)
(225,pMac->roam)
(226,)
(227,pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval)
(228,pMac)
(229,pMac->roam)
(230,csrPersona)
(231,pMac->roam.configParam.fAllowMCCGODiffBI)
(232,pMac->roam)
(233,sessionId = 0)
(234,pCurRoamProfile)
(235,pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona)
(236,roam)
(237,pMac->roam.roamSession[sessionId].bssParams)
(238,return csrUpdateMCCp2pBeaconInterval(pMac)
(239,)
(240,roamSession)
(241,pMac->roam.roamSession[sessionId].bssParams)
(242,pMac)
(243,roam)
(244,sessionId)
(245,if (pMac->roam.roamSession[sessionId].pCurRoamProfile &&\n\\n                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona\n\\n                                      == VOS_P2P_CLIENT_MODE)
(246,*beaconInterval)
(247,eHAL_STATUS_FAILURE)
(248,pMac->roam.roamSession[sessionId])
(249,pMac->roam.roamSession[sessionId])
(250,pMac->roam.roamSession)
(251,new_beaconInterval)
(252,continue;)
(253,pMac->roam.roamSession[sessionId])
(254,pMac->roam.roamSession)
(255,beaconInterval)
(256,configParam)
(257,pMac->roam.roamSession[sessionId].pCurRoamProfile)
(258,bssParams)
(259,pMac->roam.roamSession[sessionId])
(260,*beaconInterval)
(261,pMac->roam.roamSession[sessionId].bssParams.bssPersona)
(262,pMac->roam.roamSession[sessionId].bssParams)
(263,fAllowMCCGODiffBI)
(264,sessionId)
(265,new_beaconInterval = 0)
(266,pMac->roam)
(267,sessionId)
(268,roamSession)
(269,0)
(270,roam)
(271,pMac->roam)
(272,pMac->roam.roamSession[sessionId])
(273,bssParams)
(274,if (pMac->roam.roamSession[sessionId].bssParams.operationChn \n\\n                                                        != channelId )
(275,pMac->roam.roamSession)
(276,if (!CSR_IS_SESSION_VALID( pMac, sessionId )
(277,pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona\n\\n                                                                == VOS_STA_MODE)
(278,pMac->roam.roamSession[sessionId].bssParams)
(279,pMac->roam.roamSession[sessionId].bssParams.bssPersona)
(280,pMac->roam.roamSession)
(281,pMac)
(282,pMac)
(283," Peer AP BI : %d, new Beacon Interval: %d")
(284,pMac->roam.roamSession[sessionId])
(285,pMac->roam)
(286,pMac->roam.roamSession[sessionId].bssParams.operationChn \n\\n                                                        != channelId)
(287,FL(" Beacon Interval got changed config used: %d\\n")
(288,bssParams)
(289,pMac)
(290,smsLog(pMac, LOGE, FL(" Beacon Interval got changed config used: %d\\n")
(291,)
(292,eHAL_STATUS_FAILURE)
(293,pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
(294,pMac->roam.roamSession)
(295,sessionId)
(296,sessionId < CSR_ROAM_SESSION_MAX)
(297,pMac->roam.roamSession[sessionId].bssParams.beaconInterval \n\\n                                != *beaconInterval)
(298,pMac->roam.roamSession)
(299,(pMac->roam.roamSession[sessionId].bssParams.operationChn \n\\n                                != channelId )
(300,pMac)
(301,*beaconInterval)
(302,pMac->roam.roamSession)
(303,pMac)
(304,default :)
(305,beaconInterval)
(306,)
(307,0)
(308,bssPersona)
(309,bssParams)
(310,)
(311,sessionId)
(312,roamSession)
(313,sessionId = 0)
(314,roam)
(315,csrPersona)
(316,VOS_P2P_GO_MODE)
(317,roamSession)
(318,case VOS_P2P_CLIENT_MODE:)
(319,pCurRoamProfile)
(320,LOGE)
(321,pMac->roam.roamSession[sessionId].bssParams)
(322,pMac->roam.roamSession[sessionId])
(323,channelId)
(324,pMac->roam)
(325,eHAL_STATUS_FAILURE)
(326,pMac->roam)
(327,roamSession)
(328,pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval = eANI_BOOLEAN_TRUE)
(329,roam)
(330,roamSession)
(331,)
(332,)
(333,roamSession)
(334,bssParams)
(335,roam)
(336,pMac)
(337,bssParams)
(338,pMac->roam.roamSession[sessionId])
(339,fAllowMCCGODiffBI)
(340,pMac)
(341,)
(342,LOG1)
(343,smsLog(pMac, LOG1, FL(" Peer AP BI : %d, new Beacon Interval: %d")
(344,0x03)
(345,pMac->roam.roamSession[sessionId])
(346,pMac->roam.roamSession[sessionId].bssParams)
(347,FL(" Peer AP BI : %d, new Beacon Interval: %d")
(348,eHAL_STATUS_FAILURE)
(349,eANI_BOOLEAN_FALSE)
(350,new_beaconInterval)
(351,FL("***MCC is not enabled for SAP + CLIENT****")
(352,pMac->roam.roamSession[sessionId].bssParams.beaconInterval \n\\n                                != *beaconInterval)
(353,roam)
(354,beaconInterval)
(355,pMac->roam.roamSession[sessionId].bssParams.updatebeaconInterval)
(356,"BeaconInterval is different cannot connect to preferred AP...")
(357,pMac->roam.roamSession)
(358,csrRoamCallCallback(pMac, sessionId, NULL, 0, eCSR_ROAM_SEND_P2P_STOP_BSS, eCSR_ROAM_RESULT_NONE)
(359,pMac->roam.roamSession[sessionId])
(360,"***MCC is not enabled for SAP + CLIENT****")
(361,sessionId)
(362,new_beaconInterval != pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
(363,pMac)
(364,LOGE)
(365,sessionId)
(366,pMac->roam.roamSession[sessionId])
(367,pMac->roam.roamSession[sessionId])
(368,roamSession)
(369,)
(370,connectedProfile)
(371,LOG1)
(372,new_beaconInterval)
(373,pMac->roam.roamSession[sessionId].bssParams.operationChn \n\\n                                != channelId)
(374,)
(375,smsLog(pMac, LOG1, FL(" Ignore Beacon Interval Validation...")
(376,pMac)
(377,FL("BeaconInterval is different cannot connect to preferred AP...")
(378,pMac)
(379,roam)
(380,pMac->roam)
(381,pMac->roam)
(382,pMac->roam.roamSession)
(383,tpAniSirGlobal pMac)
(384,pMac)
(385,pMac)
(386,pMac->roam.roamSession)
(387,pMac)
(388,*beaconInterval)
(389,0x01)
(390,return eHAL_STATUS_SUCCESS;)
(391,(pMac->roam.roamSession[sessionId].connectedProfile.operationChannel\n\\n                               == 0 )
(392,(pMac->roam.configParam.fAllowMCCGODiffBI == 0x02)
(393,roamSession)
(394,csrUpdateMCCp2pBeaconInterval(pMac)
(395,eCSR_ROAM_RESULT_NONE)
(396,eHAL_STATUS_FAILURE)
(397,pMac->roam.roamSession[sessionId].bssParams)
(398,FL("***MCC is not enabled for SAP +STA****")
(399,configParam)
(400,LOGE)
(401,)
(402,pMac->roam)
(403,pMac->roam)
(404,sessionId)
(405,pMac->roam)
(406,pMac->roam.roamSession[sessionId].pCurRoamProfile)
(407,0)
(408,pMac->roam.roamSession)
(409,operationChannel)
(410,if(*beaconInterval != new_beaconInterval)
(411,pMac->roam)
(412,pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona\n\\n                            == VOS_P2P_CLIENT_MODE)
(413,csrCalculateMCCBeaconInterval(pMac, *beaconInterval, \n\\n                                                         pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
(414,pMac->roam.roamSession)
(415,roam)
(416,pMac)
(417,new_beaconInterval)
(418,)
(419,roam)
(420,!CSR_IS_SESSION_VALID( pMac, sessionId )
(421,return eHAL_STATUS_FAILURE;)
(422,pMac)
(423,pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
(424,pMac->roam.roamSession)
(425,pMac)
(426,beaconInterval)
(427," Ignore Beacon Interval Validation...")
(428,return eHAL_STATUS_FAILURE;)
(429,bssParams)
(430,sessionId)
(431,pMac->roam.roamSession)
(432,pMac->roam.roamSession[sessionId])
(433,pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
(434,pMac->roam.roamSession)
(435,FL("BeaconInterval is different cannot connect to P2P_GO network ...")
(436,pMac)
(437,roamSession)
(438,pMac->roam.roamSession[sessionId])
(439,pMac->roam.roamSession)
(440,FL(" Ignore Beacon Interval Validation...")
(441,pMac->roam.configParam.fAllowMCCGODiffBI == 0x02)
(442,sessionId)
(443,break;)
(444,pMac->roam.roamSession[sessionId])
(445,*beaconInterval)
(446,pMac)
(447,roam)
(448,pMac->roam.roamSession[sessionId])
(449,bssParams)
(450,pMac->roam.roamSession)
(451,pMac->roam.configParam.fAllowMCCGODiffBI)
(452,pMac->roam.configParam.fAllowMCCGODiffBI == 0x03)
(453,pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
(454,pMac->roam.configParam.fAllowMCCGODiffBI)
(455,*beaconInterval)
(456,pCurRoamProfile)
(457,csrIsConnStateConnectedInfra(pMac, sessionId)
(458,pMac->roam.configParam)
(459,pMac->roam.roamSession[sessionId].pCurRoamProfile)
(460,roamSession)
(461,pMac)
(462,bssParams)
(463,pMac->roam)
(464,return eHAL_STATUS_FAILURE;)
(465,pMac->roam.roamSession[sessionId].connectedProfile)
(466,roam)
(467,sessionId)
(468," Beacon Interval Validation not required for STA/CLIENT")
(469,beaconInterval)
(470,roam)
(471,configParam)
(472,sessionId)
(473,pMac->roam)
(474,roamSession)
(475,pMac->roam.roamSession[sessionId].bssParams.operationChn)
(476,pMac)
(477,pMac->roam)
(478,)
(479,)
(480,eHAL_STATUS_SUCCESS)
(481,pCurRoamProfile)
(482,NULL)
(483,pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona)
(484,roamSession)
(485,roam)
(486,"***MCC is not enabled for SAP +STA****")
(487,pMac->roam.roamSession[sessionId].connectedProfile)
(488,roamSession)
(489,pMac->roam.configParam.fAllowMCCGODiffBI == 0x04)
(490,VOS_STA_MODE)
(491,pMac)
(492,sessionId)
(493,beaconInterval)
(494,pMac->roam.roamSession[sessionId])
(495,roamSession)
(496,cursessionId != sessionId)
(497,pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona)
(498,if ((pMac->roam.roamSession[sessionId].bssParams.operationChn \n\\n                                != channelId )
(499,eHAL_STATUS_FAILURE)
(500,roam)
(501,pMac->roam)
(502,sessionId)
(503,pMac->roam.roamSession[sessionId].bssParams)
(504,VOS_P2P_CLIENT_MODE)
(505,VOS_P2P_CLIENT_MODE)
(506,if (cursessionId != sessionId )
(507,sessionId)
(508,)
(509,bssParams)
(510,roam)
(511,pMac->roam.roamSession[sessionId].bssParams.operationChn \n\\n                                                        != channelId)
(512,pMac->roam)
(513,beaconInterval)
(514,VOS_STA_SAP_MODE)
(515,return eHAL_STATUS_SUCCESS;)
(516,pMac->roam.roamSession[sessionId].bssParams.operationChn)
(517,pMac->roam.roamSession[sessionId].bssParams.bssPersona\n\\n                                      == VOS_P2P_GO_MODE)
(518,(pMac->roam.roamSession[sessionId].connectedProfile.operationChannel\n\\n                                != channelId )
(519,*beaconInterval)
(520,pMac->roam)
(521,roamSession)
(522,beaconInterval)
(523,pMac->roam.roamSession[sessionId])
(524,currBssPersona)
(525,pMac)
(526,pMac->roam.roamSession[sessionId].connectedProfile.operationChannel)
(527,pMac->roam.roamSession[sessionId].pCurRoamProfile &&\n\\n                       (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona\n\\n                                      == VOS_P2P_CLIENT_MODE)
(528,updatebeaconInterval)
(529,pMac->roam)
(530,(pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona\n\\n                            == VOS_P2P_CLIENT_MODE)
(531,LOGE)
(532,LOGE)
(533,pMac->roam.roamSession[sessionId].bssParams)
(534,roamSession)
(535,pMac->roam.roamSession[sessionId].connectedProfile.beaconInterval\n\\n                                != *beaconInterval)
(536,tVOS_CON_MODE currBssPersona)
(537,pMac)
(538,pMac->roam.roamSession[sessionId].pCurRoamProfile)
(539,if (csrIsConnStateConnectedInfra(pMac, sessionId)
(540,pMac)
(541,updatebeaconInterval)
(542,sessionId)
(543," Persona not supported : %d")
(544,(pMac->roam.roamSession[sessionId].bssParams.operationChn \n\\n                                != channelId )
(545,0x02)
(546,LOG1)
(547,smsLog(pMac, LOGE, FL("***MCC is not enabled for SAP + CLIENT****")
(548,roamSession)
(549,pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona\n\\n                                      == VOS_P2P_CLIENT_MODE)
(550,pMac->roam.roamSession[sessionId])
(551,pMac)
(552,fAllowMCCGODiffBI)
(553,pMac->roam.configParam)
(554,roam)
(555,smsLog(pMac, LOG1, FL(" Beacon Interval Validation not required for STA/CLIENT")
(556,)
(557,)
(558,csrCalculateMCCBeaconInterval(pMac, \n\\n                                                pMac->roam.roamSession[sessionId].bssParams.beaconInterval,\n\\n                                                *beaconInterval )
(559,0)
(560,pMac->roam.roamSession[sessionId])
(561,pMac->roam.configParam.fAllowMCCGODiffBI)
(562,sessionId)
(563,)
(564,csrPersona)
(565,eHAL_STATUS_SUCCESS)
(566,pMac->roam.roamSession[sessionId].connectedProfile.operationChannel\n\\n                                != channelId)
(567,pMac->roam.roamSession[sessionId].pCurRoamProfile)
(568,sessionId)
(569,sessionId)
(570,pMac)
(571,pMac->roam.roamSession[sessionId].bssParams.beaconInterval)
(572,if ((pMac->roam.roamSession[sessionId].connectedProfile.operationChannel\n\\n                               == 0 )
(573,pMac->roam)
(574,pMac->roam.roamSession[sessionId].pCurRoamProfile &&\n\\n                      (pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona\n\\n                                                                == VOS_STA_MODE)
(575,pMac->roam.roamSession[sessionId].pCurRoamProfile->csrPersona\n\\n                            == VOS_STA_MODE)
(576,roamSession)
(577,RET)
(578,pCurRoamProfile)
(579,*beaconInterval)
(580,connectedProfile)
(581,pMac->roam.roamSession[sessionId])
(582,pMac->roam.roamSession[sessionId].pCurRoamProfile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^