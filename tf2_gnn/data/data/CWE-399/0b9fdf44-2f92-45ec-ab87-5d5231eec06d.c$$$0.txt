-----label-----
1
-----code-----
void ipoib_mcast_join_task(struct work_struct *work)
{
	struct ipoib_dev_priv *priv =
		container_of(work, struct ipoib_dev_priv, mcast_task.work);
	struct net_device *dev = priv->dev;

	if (!test_bit(IPOIB_MCAST_RUN, &priv->flags))
		return;

	if (ib_query_gid(priv->ca, priv->port, 0, &priv->local_gid))
		ipoib_warn(priv, "ib_query_gid() failed\n");
	else
		memcpy(priv->dev->dev_addr + 4, priv->local_gid.raw, sizeof (union ib_gid));

	{
		struct ib_port_attr attr;

		if (!ib_query_port(priv->ca, priv->port, &attr))
			priv->local_lid = attr.lid;
		else
			ipoib_warn(priv, "ib_query_port failed\n");
	}

	if (!priv->broadcast) {
		struct ipoib_mcast *broadcast;

		if (!test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags))
			return;

		broadcast = ipoib_mcast_alloc(dev, 1);
		if (!broadcast) {
			ipoib_warn(priv, "failed to allocate broadcast group\n");
			mutex_lock(&mcast_mutex);
			if (test_bit(IPOIB_MCAST_RUN, &priv->flags))
				queue_delayed_work(ipoib_workqueue,
						   &priv->mcast_task, HZ);
			mutex_unlock(&mcast_mutex);
			return;
		}

		spin_lock_irq(&priv->lock);
		memcpy(broadcast->mcmember.mgid.raw, priv->dev->broadcast + 4,
		       sizeof (union ib_gid));
		priv->broadcast = broadcast;

		__ipoib_mcast_add(dev, priv->broadcast);
		spin_unlock_irq(&priv->lock);
	}

	if (!test_bit(IPOIB_MCAST_FLAG_ATTACHED, &priv->broadcast->flags)) {
		if (!test_bit(IPOIB_MCAST_FLAG_BUSY, &priv->broadcast->flags))
			ipoib_mcast_join(dev, priv->broadcast, 0);
		return;
	}

	while (1) {
		struct ipoib_mcast *mcast = NULL;

		spin_lock_irq(&priv->lock);
		list_for_each_entry(mcast, &priv->multicast_list, list) {
			if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
			    && !test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)
			    && !test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {
				/* Found the next unjoined group */
				break;
			}
		}
		spin_unlock_irq(&priv->lock);

		if (&mcast->list == &priv->multicast_list) {
			/* All done */
			break;
		}

		ipoib_mcast_join(dev, mcast, 1);
		return;
	}

	ipoib_dbg_mcast(priv, "successfully joined all multicast groups\n");

	clear_bit(IPOIB_MCAST_RUN, &priv->flags);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
14,15
16,17
17,18
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
26,28
27,28
30,31
30,32
31,32
32,33
32,34
32,35
33,34
35,36
37,38
38,39
38,40
39,40
43,44
43,45
43,46
44,45
44,46
44,47
44,48
44,49
45,46
47,48
47,49
48,49
51,52
51,53
52,53
56,57
57,58
57,59
58,59
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
69,72
69,73
70,71
72,73
72,74
73,74
73,75
74,75
74,76
75,76
80,81
80,82
81,82
81,83
82,83
86,87
87,88
87,89
88,89
91,92
91,93
92,93
93,94
93,95
94,95
96,97
98,99
98,100
98,101
99,100
100,101
100,102
100,103
100,104
101,102
103,104
103,105
104,105
107,108
107,109
108,109
111,112
112,113
114,115
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
124,125
125,126
125,127
125,128
126,127
128,129
131,132
131,133
132,133
133,134
133,135
134,135
137,138
137,139
137,140
137,141
137,142
137,143
137,144
137,145
137,146
138,139
139,140
139,141
140,141
142,143
142,144
145,146
145,147
146,147
147,148
147,149
147,150
148,149
150,151
152,153
153,154
153,155
154,155
158,159
159,160
159,161
160,161
162,163
162,164
162,165
163,164
165,166
168,169
168,170
169,170
170,171
172,173
172,174
172,175
172,176
172,177
173,174
174,175
174,176
174,177
175,176
177,178
180,181
181,182
181,183
182,183
184,185
185,186
185,187
188,189
188,190
189,190
189,191
189,192
190,191
192,193
194,195
195,196
195,197
196,197
199,200
200,201
200,202
200,203
200,204
201,202
203,204
205,206
206,207
206,208
207,208
210,211
212,213
213,214
213,215
214,215
216,217
217,218
220,221
221,222
221,223
222,223
224,225
225,226
225,227
226,227
229,230
230,231
230,232
230,233
230,234
231,232
233,234
233,235
234,235
234,236
235,236
235,237
236,237
241,242
241,243
242,243
242,244
243,244
243,245
244,245
249,250
250,251
250,252
251,252
254,255
255,256
255,257
256,257
256,258
257,258
260,261
262,263
263,264
263,265
263,266
264,265
266,267
268,269
268,270
269,270
272,273
273,274
273,275
274,275
276,277
277,278
277,279
278,279
281,282
281,283
282,283
283,284
283,285
283,286
284,285
286,287
288,289
289,290
289,291
290,291
290,292
291,292
295,296
295,297
296,297
296,298
297,298
298,299
298,300
298,301
299,300
301,302
303,304
304,305
304,306
305,306
305,307
306,307
310,311
311,312
311,313
311,314
311,315
312,313
314,315
316,317
316,318
317,318
322,323
322,324
324,325
324,326
324,327
324,328
324,329
324,330
324,331
324,332
324,333
325,326
326,327
326,328
327,328
329,330
329,331
329,332
332,333
333,334
335,336
336,337
336,338
337,338
339,340
340,341
340,342
341,342
344,345
345,346
345,347
345,348
345,349
346,347
348,349
350,351
351,352
351,353
352,353
355,356
357,358
358,359
359,360
359,361
360,361
360,362
361,362
361,363
362,363
363,364
363,365
363,366
364,365
366,367
368,369
369,370
369,371
370,371
373,374
374,375
374,376
374,377
375,376
377,378
379,380
380,381
380,382
381,382
384,385
385,386
385,387
385,388
386,387
388,389
390,391
391,392
391,393
392,393
395,396
397,398
398,399
398,400
399,400
401,402
402,403
402,404
403,404
406,407
406,408
407,408
407,409
408,409
409,410
409,411
410,411
413,414
414,415
414,416
415,416
418,419
420,421
421,422
421,423
421,424
421,425
422,423
424,425
426,427
430,431
431,432
431,433
431,434
432,433
434,435
437,438
438,439
438,440
438,441
439,440
441,442
443,444
444,445
444,446
445,446
-----nextToken-----
2,4,7,9,10,15,21,23,24,28,29,34,36,40,41,42,46,49,50,53,54,55,59,60,64,66,67,71,76,77,78,79,83,84,85,89,90,95,97,102,105,106,109,110,113,118,119,122,123,127,129,130,135,136,141,143,144,149,151,155,156,157,161,164,166,167,171,176,178,179,183,186,187,191,193,197,198,202,204,208,209,211,215,218,219,223,227,228,232,237,238,239,240,245,246,247,248,252,253,258,259,261,265,267,270,271,275,279,280,285,287,292,293,294,300,302,307,308,309,313,315,318,319,320,321,323,328,330,331,334,338,342,343,347,349,353,354,356,365,367,371,372,376,378,382,383,387,389,393,394,396,400,404,405,411,412,416,417,419,423,425,427,428,429,433,435,436,440,442,446,447
-----computeFrom-----
72,73
72,74
115,116
115,117
159,160
159,161
241,242
241,243
255,256
255,257
360,361
360,362
361,362
361,363
407,408
407,409
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ProblemStatement;ProblemStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;WhileStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void ipoib_mcast_join_task(struct work_struct *work){	struct ipoib_dev_priv *priv =		container_of(work, struct ipoib_dev_priv, mcast_task.work);	struct net_device *dev = priv->dev;	if (!test_bit(IPOIB_MCAST_RUN, &priv->flags))		return;	if (ib_query_gid(priv->ca, priv->port, 0, &priv->local_gid))		ipoib_warn(priv, "ib_query_gid() failed\n");	else		memcpy(priv->dev->dev_addr + 4, priv->local_gid.raw, sizeof (union ib_gid));	{		struct ib_port_attr attr;		if (!ib_query_port(priv->ca, priv->port, &attr))			priv->local_lid = attr.lid;		else			ipoib_warn(priv, "ib_query_port failed\n");	}	if (!priv->broadcast) {		struct ipoib_mcast *broadcast;		if (!test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags))			return;		broadcast = ipoib_mcast_alloc(dev, 1);		if (!broadcast) {			ipoib_warn(priv, "failed to allocate broadcast group\n");			mutex_lock(&mcast_mutex);			if (test_bit(IPOIB_MCAST_RUN, &priv->flags))				queue_delayed_work(ipoib_workqueue,						   &priv->mcast_task, HZ);			mutex_unlock(&mcast_mutex);			return;		}		spin_lock_irq(&priv->lock);		memcpy(broadcast->mcmember.mgid.raw, priv->dev->broadcast + 4,		       sizeof (union ib_gid));		priv->broadcast = broadcast;		__ipoib_mcast_add(dev, priv->broadcast);		spin_unlock_irq(&priv->lock);	}	if (!test_bit(IPOIB_MCAST_FLAG_ATTACHED, &priv->broadcast->flags)) {		if (!test_bit(IPOIB_MCAST_FLAG_BUSY, &priv->broadcast->flags))			ipoib_mcast_join(dev, priv->broadcast, 0);		return;	}	while (1) {		struct ipoib_mcast *mcast = NULL;		spin_lock_irq(&priv->lock);		list_for_each_entry(mcast, &priv->multicast_list, list) {			if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {				/* Found the next unjoined group */				break;			}		}		spin_unlock_irq(&priv->lock);		if (&mcast->list == &priv->multicast_list) {			/* All done */			break;		}		ipoib_mcast_join(dev, mcast, 1);		return;	}	ipoib_dbg_mcast(priv, "successfully joined all multicast groups\n");	clear_bit(IPOIB_MCAST_RUN, &priv->flags);}
void
ipoib_mcast_join_task(struct work_struct *work)
ipoib_mcast_join_task
struct work_struct *work
struct work_struct
work_struct
*work
*
work
{	struct ipoib_dev_priv *priv =		container_of(work, struct ipoib_dev_priv, mcast_task.work);	struct net_device *dev = priv->dev;	if (!test_bit(IPOIB_MCAST_RUN, &priv->flags))		return;	if (ib_query_gid(priv->ca, priv->port, 0, &priv->local_gid))		ipoib_warn(priv, "ib_query_gid() failed\n");	else		memcpy(priv->dev->dev_addr + 4, priv->local_gid.raw, sizeof (union ib_gid));	{		struct ib_port_attr attr;		if (!ib_query_port(priv->ca, priv->port, &attr))			priv->local_lid = attr.lid;		else			ipoib_warn(priv, "ib_query_port failed\n");	}	if (!priv->broadcast) {		struct ipoib_mcast *broadcast;		if (!test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags))			return;		broadcast = ipoib_mcast_alloc(dev, 1);		if (!broadcast) {			ipoib_warn(priv, "failed to allocate broadcast group\n");			mutex_lock(&mcast_mutex);			if (test_bit(IPOIB_MCAST_RUN, &priv->flags))				queue_delayed_work(ipoib_workqueue,						   &priv->mcast_task, HZ);			mutex_unlock(&mcast_mutex);			return;		}		spin_lock_irq(&priv->lock);		memcpy(broadcast->mcmember.mgid.raw, priv->dev->broadcast + 4,		       sizeof (union ib_gid));		priv->broadcast = broadcast;		__ipoib_mcast_add(dev, priv->broadcast);		spin_unlock_irq(&priv->lock);	}	if (!test_bit(IPOIB_MCAST_FLAG_ATTACHED, &priv->broadcast->flags)) {		if (!test_bit(IPOIB_MCAST_FLAG_BUSY, &priv->broadcast->flags))			ipoib_mcast_join(dev, priv->broadcast, 0);		return;	}	while (1) {		struct ipoib_mcast *mcast = NULL;		spin_lock_irq(&priv->lock);		list_for_each_entry(mcast, &priv->multicast_list, list) {			if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {				/* Found the next unjoined group */				break;			}		}		spin_unlock_irq(&priv->lock);		if (&mcast->list == &priv->multicast_list) {			/* All done */			break;		}		ipoib_mcast_join(dev, mcast, 1);		return;	}	ipoib_dbg_mcast(priv, "successfully joined all multicast groups\n");	clear_bit(IPOIB_MCAST_RUN, &priv->flags);}
struct ipoib_dev_priv
struct ipoib_dev_priv
struct ipoib_dev_priv
ipoib_dev_priv
v
*priv =		container_of(work, struct ipoib_dev_priv, mcast_task.work);
struct net_device *dev = priv->dev;
struct net_device *dev = priv->dev;
struct net_device
net_device
*dev = priv->dev
*
dev
= priv->dev
priv->dev
priv
priv
dev
if (!test_bit(IPOIB_MCAST_RUN, &priv->flags))		return;
!test_bit(IPOIB_MCAST_RUN, &priv->flags)
test_bit(IPOIB_MCAST_RUN, &priv->flags)
test_bit
test_bit
IPOIB_MCAST_RUN
IPOIB_MCAST_RUN
&priv->flags
priv->flags
priv
priv
flags
return;
if (ib_query_gid(priv->ca, priv->port, 0, &priv->local_gid))		ipoib_warn(priv, "ib_query_gid() failed\n");	else		memcpy(priv->dev->dev_addr + 4, priv->local_gid.raw, sizeof (union ib_gid));
ib_query_gid(priv->ca, priv->port, 0, &priv->local_gid)
ib_query_gid
ib_query_gid
priv->ca
priv
priv
ca
priv->port
priv
priv
port
0
&priv->local_gid
priv->local_gid
priv
priv
local_gid
ipoib_warn(priv, "ib_query_gid() failed\n");
ipoib_warn(priv, "ib_query_gid() failed\n")
ipoib_warn
ipoib_warn
priv
priv
"ib_query_gid() failed\n"
memcpy(priv->dev->dev_addr + 4, priv->local_gid.raw, sizeof (union ib_gid));
memcpy(priv->dev->dev_addr + 4, priv->local_gid.raw, sizeof (union ib_gid))
memcpy
memcpy
priv->dev->dev_addr + 4
priv->dev->dev_addr
priv->dev
priv
priv
dev
dev_addr
4
priv->local_gid.raw
priv->local_gid
priv
priv
local_gid
raw
sizeof (union ib_gid)
union ib_gid
union ib_gid
ib_gid

{		struct ib_port_attr attr;		if (!ib_query_port(priv->ca, priv->port, &attr))			priv->local_lid = attr.lid;		else			ipoib_warn(priv, "ib_query_port failed\n");	}
struct ib_port_attr attr;
struct ib_port_attr attr;
struct ib_port_attr
ib_port_attr
attr
attr
if (!ib_query_port(priv->ca, priv->port, &attr))			priv->local_lid = attr.lid;		else			ipoib_warn(priv, "ib_query_port failed\n");
!ib_query_port(priv->ca, priv->port, &attr)
ib_query_port(priv->ca, priv->port, &attr)
ib_query_port
ib_query_port
priv->ca
priv
priv
ca
priv->port
priv
priv
port
&attr
attr
attr
priv->local_lid = attr.lid;
priv->local_lid = attr.lid
priv->local_lid
priv
priv
local_lid
attr.lid
attr
attr
lid
ipoib_warn(priv, "ib_query_port failed\n");
ipoib_warn(priv, "ib_query_port failed\n")
ipoib_warn
ipoib_warn
priv
priv
"ib_query_port failed\n"
if (!priv->broadcast) {		struct ipoib_mcast *broadcast;		if (!test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags))			return;		broadcast = ipoib_mcast_alloc(dev, 1);		if (!broadcast) {			ipoib_warn(priv, "failed to allocate broadcast group\n");			mutex_lock(&mcast_mutex);			if (test_bit(IPOIB_MCAST_RUN, &priv->flags))				queue_delayed_work(ipoib_workqueue,						   &priv->mcast_task, HZ);			mutex_unlock(&mcast_mutex);			return;		}		spin_lock_irq(&priv->lock);		memcpy(broadcast->mcmember.mgid.raw, priv->dev->broadcast + 4,		       sizeof (union ib_gid));		priv->broadcast = broadcast;		__ipoib_mcast_add(dev, priv->broadcast);		spin_unlock_irq(&priv->lock);	}
!priv->broadcast
priv->broadcast
priv
priv
broadcast
{		struct ipoib_mcast *broadcast;		if (!test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags))			return;		broadcast = ipoib_mcast_alloc(dev, 1);		if (!broadcast) {			ipoib_warn(priv, "failed to allocate broadcast group\n");			mutex_lock(&mcast_mutex);			if (test_bit(IPOIB_MCAST_RUN, &priv->flags))				queue_delayed_work(ipoib_workqueue,						   &priv->mcast_task, HZ);			mutex_unlock(&mcast_mutex);			return;		}		spin_lock_irq(&priv->lock);		memcpy(broadcast->mcmember.mgid.raw, priv->dev->broadcast + 4,		       sizeof (union ib_gid));		priv->broadcast = broadcast;		__ipoib_mcast_add(dev, priv->broadcast);		spin_unlock_irq(&priv->lock);	}
struct ipoib_mcast *broadcast;
struct ipoib_mcast *broadcast;
struct ipoib_mcast
ipoib_mcast
*broadcast
*
broadcast
if (!test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags))			return;
!test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags)
test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags)
test_bit
test_bit
IPOIB_FLAG_ADMIN_UP
IPOIB_FLAG_ADMIN_UP
&priv->flags
priv->flags
priv
priv
flags
return;
broadcast = ipoib_mcast_alloc(dev, 1);
broadcast = ipoib_mcast_alloc(dev, 1)
broadcast
broadcast
ipoib_mcast_alloc(dev, 1)
ipoib_mcast_alloc
ipoib_mcast_alloc
dev
dev
1
if (!broadcast) {			ipoib_warn(priv, "failed to allocate broadcast group\n");			mutex_lock(&mcast_mutex);			if (test_bit(IPOIB_MCAST_RUN, &priv->flags))				queue_delayed_work(ipoib_workqueue,						   &priv->mcast_task, HZ);			mutex_unlock(&mcast_mutex);			return;		}
!broadcast
broadcast
broadcast
{			ipoib_warn(priv, "failed to allocate broadcast group\n");			mutex_lock(&mcast_mutex);			if (test_bit(IPOIB_MCAST_RUN, &priv->flags))				queue_delayed_work(ipoib_workqueue,						   &priv->mcast_task, HZ);			mutex_unlock(&mcast_mutex);			return;		}
ipoib_warn(priv, "failed to allocate broadcast group\n");
ipoib_warn(priv, "failed to allocate broadcast group\n")
ipoib_warn
ipoib_warn
priv
priv
"failed to allocate broadcast group\n"
mutex_lock(&mcast_mutex);
mutex_lock(&mcast_mutex);
mutex_lock
mutex_lock
(&mcast_mutex)
&mcast_mutex
&
mcast_mutex
if (test_bit(IPOIB_MCAST_RUN, &priv->flags))				queue_delayed_work(ipoib_workqueue,						   &priv->mcast_task, HZ);
test_bit(IPOIB_MCAST_RUN, &priv->flags)
test_bit
test_bit
IPOIB_MCAST_RUN
IPOIB_MCAST_RUN
&priv->flags
priv->flags
priv
priv
flags
queue_delayed_work(ipoib_workqueue,						   &priv->mcast_task, HZ);
queue_delayed_work(ipoib_workqueue,						   &priv->mcast_task, HZ)
queue_delayed_work
queue_delayed_work
ipoib_workqueue
ipoib_workqueue
&priv->mcast_task
priv->mcast_task
priv
priv
mcast_task
HZ
HZ
mutex_unlock(&mcast_mutex);
mutex_unlock(&mcast_mutex)
mutex_unlock
mutex_unlock
&mcast_mutex
mcast_mutex
mcast_mutex
return;
spin_lock_irq(&priv->lock);
spin_lock_irq(&priv->lock)
spin_lock_irq
spin_lock_irq
&priv->lock
priv->lock
priv
priv
lock
memcpy(broadcast->mcmember.mgid.raw, priv->dev->broadcast + 4,		       sizeof (union ib_gid));
memcpy(broadcast->mcmember.mgid.raw, priv->dev->broadcast + 4,		       sizeof (union ib_gid))
memcpy
memcpy
broadcast->mcmember.mgid.raw
broadcast->mcmember.mgid
broadcast->mcmember
broadcast
broadcast
mcmember
mgid
raw
priv->dev->broadcast + 4
priv->dev->broadcast
priv->dev
priv
priv
dev
broadcast
4
sizeof (union ib_gid)
union ib_gid
union ib_gid
ib_gid

priv->broadcast = broadcast;
priv->broadcast = broadcast
priv->broadcast
priv
priv
broadcast
broadcast
broadcast
__ipoib_mcast_add(dev, priv->broadcast);
__ipoib_mcast_add(dev, priv->broadcast)
__ipoib_mcast_add
__ipoib_mcast_add
dev
dev
priv->broadcast
priv
priv
broadcast
spin_unlock_irq(&priv->lock);
spin_unlock_irq(&priv->lock)
spin_unlock_irq
spin_unlock_irq
&priv->lock
priv->lock
priv
priv
lock
if (!test_bit(IPOIB_MCAST_FLAG_ATTACHED, &priv->broadcast->flags)) {		if (!test_bit(IPOIB_MCAST_FLAG_BUSY, &priv->broadcast->flags))			ipoib_mcast_join(dev, priv->broadcast, 0);		return;	}
!test_bit(IPOIB_MCAST_FLAG_ATTACHED, &priv->broadcast->flags)
test_bit(IPOIB_MCAST_FLAG_ATTACHED, &priv->broadcast->flags)
test_bit
test_bit
IPOIB_MCAST_FLAG_ATTACHED
IPOIB_MCAST_FLAG_ATTACHED
&priv->broadcast->flags
priv->broadcast->flags
priv->broadcast
priv
priv
broadcast
flags
{		if (!test_bit(IPOIB_MCAST_FLAG_BUSY, &priv->broadcast->flags))			ipoib_mcast_join(dev, priv->broadcast, 0);		return;	}
if (!test_bit(IPOIB_MCAST_FLAG_BUSY, &priv->broadcast->flags))			ipoib_mcast_join(dev, priv->broadcast, 0);
!test_bit(IPOIB_MCAST_FLAG_BUSY, &priv->broadcast->flags)
test_bit(IPOIB_MCAST_FLAG_BUSY, &priv->broadcast->flags)
test_bit
test_bit
IPOIB_MCAST_FLAG_BUSY
IPOIB_MCAST_FLAG_BUSY
&priv->broadcast->flags
priv->broadcast->flags
priv->broadcast
priv
priv
broadcast
flags
ipoib_mcast_join(dev, priv->broadcast, 0);
ipoib_mcast_join(dev, priv->broadcast, 0)
ipoib_mcast_join
ipoib_mcast_join
dev
dev
priv->broadcast
priv
priv
broadcast
0
return;
while (1) {		struct ipoib_mcast *mcast = NULL;		spin_lock_irq(&priv->lock);		list_for_each_entry(mcast, &priv->multicast_list, list) {			if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {				/* Found the next unjoined group */				break;			}		}		spin_unlock_irq(&priv->lock);		if (&mcast->list == &priv->multicast_list) {			/* All done */			break;		}		ipoib_mcast_join(dev, mcast, 1);		return;	}
1
{		struct ipoib_mcast *mcast = NULL;		spin_lock_irq(&priv->lock);		list_for_each_entry(mcast, &priv->multicast_list, list) {			if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {				/* Found the next unjoined group */				break;			}		}		spin_unlock_irq(&priv->lock);		if (&mcast->list == &priv->multicast_list) {			/* All done */			break;		}		ipoib_mcast_join(dev, mcast, 1);		return;	}
struct ipoib_mcast *mcast = NULL;
struct ipoib_mcast *mcast = NULL;
struct ipoib_mcast
ipoib_mcast
*mcast = NULL
*
mcast
= NULL
NULL
NULL
spin_lock_irq(&priv->lock);
spin_lock_irq(&priv->lock)
spin_lock_irq
spin_lock_irq
&priv->lock
priv->lock
priv
priv
lock
list_for_each_entry(mcast, &priv->multicast_list, list)
list_for_each_entry(mcast, &priv->multicast_list, list)
list_for_each_entry
list_for_each_entry
mcast
mcast
&priv->multicast_list
priv->multicast_list
priv
priv
multicast_list
list
list
)
{			if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {				/* Found the next unjoined group */				break;			}		}
if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {				/* Found the next unjoined group */				break;			}
!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)
!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)			    && !test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)
!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
test_bit
test_bit
IPOIB_MCAST_FLAG_SENDONLY
IPOIB_MCAST_FLAG_SENDONLY
&mcast->flags
mcast->flags
mcast
mcast
flags
!test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)
test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)
test_bit
test_bit
IPOIB_MCAST_FLAG_BUSY
IPOIB_MCAST_FLAG_BUSY
&mcast->flags
mcast->flags
mcast
mcast
flags
!test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)
test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)
test_bit
test_bit
IPOIB_MCAST_FLAG_ATTACHED
IPOIB_MCAST_FLAG_ATTACHED
&mcast->flags
mcast->flags
mcast
mcast
flags
{				/* Found the next unjoined group */				break;			}
break;
spin_unlock_irq(&priv->lock);
spin_unlock_irq(&priv->lock)
spin_unlock_irq
spin_unlock_irq
&priv->lock
priv->lock
priv
priv
lock
if (&mcast->list == &priv->multicast_list) {			/* All done */			break;		}
&mcast->list == &priv->multicast_list
&mcast->list
mcast->list
mcast
mcast
list
&priv->multicast_list
priv->multicast_list
priv
priv
multicast_list
{			/* All done */			break;		}
break;
ipoib_mcast_join(dev, mcast, 1);
ipoib_mcast_join(dev, mcast, 1)
ipoib_mcast_join
ipoib_mcast_join
dev
dev
mcast
mcast
1
return;
ipoib_dbg_mcast(priv, "successfully joined all multicast groups\n");
ipoib_dbg_mcast(priv, "successfully joined all multicast groups\n")
ipoib_dbg_mcast
ipoib_dbg_mcast
priv
priv
"successfully joined all multicast groups\n"
clear_bit(IPOIB_MCAST_RUN, &priv->flags);
clear_bit(IPOIB_MCAST_RUN, &priv->flags)
clear_bit
clear_bit
IPOIB_MCAST_RUN
IPOIB_MCAST_RUN
&priv->flags
priv->flags
priv
priv
flags
-----joern-----
(155,223,0)
(29,237,0)
(54,8,0)
(157,213,0)
(41,174,0)
(129,98,0)
(42,127,0)
(182,85,0)
(67,33,0)
(158,130,0)
(110,61,0)
(211,119,0)
(246,230,0)
(218,35,0)
(40,243,0)
(37,254,0)
(121,92,0)
(195,0,0)
(72,190,0)
(254,37,0)
(116,16,0)
(60,85,0)
(86,177,0)
(253,196,0)
(234,226,0)
(198,254,0)
(172,120,0)
(152,67,0)
(86,125,0)
(26,11,0)
(210,64,0)
(221,32,0)
(176,126,0)
(177,86,0)
(248,40,0)
(11,26,0)
(145,35,0)
(156,165,0)
(143,17,0)
(138,206,0)
(184,16,0)
(190,124,0)
(120,71,0)
(220,80,0)
(159,226,0)
(123,126,0)
(194,124,0)
(66,216,0)
(142,143,0)
(224,102,0)
(8,245,0)
(196,222,0)
(92,175,0)
(240,19,0)
(178,72,0)
(144,205,0)
(238,183,0)
(180,20,0)
(187,59,0)
(178,19,0)
(56,15,0)
(160,95,0)
(181,226,0)
(122,117,0)
(51,61,0)
(44,73,0)
(133,108,0)
(150,251,0)
(4,230,0)
(77,178,0)
(169,179,0)
(165,226,0)
(56,235,0)
(63,216,0)
(233,73,0)
(196,41,0)
(56,65,0)
(230,130,0)
(68,190,0)
(88,95,0)
(77,14,0)
(16,213,0)
(153,167,0)
(140,112,0)
(240,205,0)
(73,102,0)
(39,67,0)
(205,240,0)
(80,230,0)
(217,114,0)
(174,70,0)
(124,190,0)
(35,11,0)
(79,55,0)
(148,100,0)
(20,180,0)
(247,226,0)
(61,227,0)
(100,187,0)
(235,95,0)
(34,0,0)
(173,55,0)
(1,4,0)
(96,161,0)
(30,215,0)
(89,27,0)
(245,8,0)
(87,205,0)
(62,227,0)
(99,104,0)
(225,98,0)
(62,130,0)
(166,193,0)
(103,70,0)
(119,13,0)
(49,3,0)
(174,221,0)
(82,37,0)
(199,124,0)
(170,108,0)
(222,196,0)
(93,30,0)
(225,128,0)
(135,20,0)
(72,178,0)
(232,119,0)
(105,5,0)
(149,227,0)
(244,167,0)
(106,250,0)
(14,77,0)
(18,70,0)
(178,77,0)
(66,229,0)
(227,61,0)
(114,217,0)
(17,76,0)
(175,75,0)
(143,13,0)
(203,220,0)
(19,178,0)
(75,161,0)
(242,132,0)
(230,104,0)
(96,90,0)
(23,229,0)
(56,6,0)
(12,33,0)
(117,105,0)
(102,73,0)
(102,192,0)
(178,104,0)
(229,23,0)
(136,161,0)
(69,23,0)
(219,240,0)
(147,192,0)
(157,104,0)
(227,226,0)
(70,103,0)
(50,62,0)
(90,217,0)
(76,63,0)
(120,172,0)
(88,223,0)
(9,66,0)
(237,29,0)
(119,161,0)
(236,82,0)
(168,80,0)
(189,80,0)
(15,64,0)
(78,71,0)
(132,242,0)
(53,20,0)
(10,193,0)
(171,161,0)
(46,129,0)
(28,104,0)
(193,166,0)
(186,241,0)
(127,102,0)
(163,250,0)
(27,95,0)
(162,130,0)
(193,10,0)
(137,26,0)
(146,19,0)
(188,241,0)
(21,117,0)
(130,104,0)
(221,174,0)
(57,217,0)
(75,175,0)
(114,63,0)
(74,179,0)
(125,86,0)
(107,226,0)
(56,83,0)
(213,157,0)
(25,201,0)
(39,167,0)
(172,98,0)
(252,71,0)
(213,16,0)
(128,225,0)
(33,67,0)
(22,125,0)
(60,183,0)
(128,55,0)
(241,180,0)
(197,75,0)
(80,220,0)
(175,92,0)
(130,62,0)
(13,143,0)
(23,161,0)
(228,72,0)
(202,98,0)
(111,96,0)
(139,100,0)
(118,242,0)
(207,183,0)
(208,82,0)
(200,48,0)
(47,103,0)
(183,60,0)
(223,88,0)
(52,129,0)
(76,17,0)
(102,224,0)
(125,230,0)
(231,75,0)
(126,227,0)
(17,143,0)
(35,145,0)
(134,26,0)
(108,67,0)
(24,105,0)
(38,226,0)
(129,227,0)
(220,227,0)
(217,90,0)
(5,105,0)
(32,221,0)
(250,126,0)
(115,103,0)
(243,179,0)
(215,30,0)
(131,206,0)
(239,237,0)
(180,241,0)
(36,96,0)
(204,125,0)
(71,120,0)
(185,193,0)
(91,33,0)
(237,177,0)
(105,117,0)
(229,66,0)
(92,121,0)
(205,130,0)
(59,187,0)
(101,129,0)
(113,8,0)
(167,39,0)
(154,165,0)
(187,100,0)
(13,119,0)
(40,226,0)
(81,201,0)
(19,240,0)
(216,66,0)
(7,62,0)
(109,4,0)
(63,76,0)
(250,230,0)
(3,98,0)
(212,222,0)
(141,41,0)
(209,86,0)
(41,196,0)
(242,5,0)
(11,35,0)
(191,158,0)
(90,96,0)
(70,174,0)
(216,63,0)
(65,98,0)
(5,242,0)
(220,104,0)
(206,121,0)
(67,39,0)
(55,128,0)
(43,192,0)
(214,23,0)
(164,166,0)
(94,164,0)
(190,72,0)
(59,104,0)
(174,41,0)
(192,102,0)
(179,243,0)
(58,222,0)
(67,108,0)
(102,127,0)
(166,164,0)
(63,114,0)
(161,98,0)
(129,161,0)
(85,60,0)
(249,98,0)
(243,40,0)
(31,112,0)
(2,104,0)
(177,237,0)
(117,230,0)
(0,226,0)
(45,164,0)
(84,254,0)
(215,95,0)
(126,250,0)
(97,27,0)
(121,206,0)
(208,236,1)
(134,137,1)
(216,66,1)
(115,47,1)
(132,242,1)
(44,233,1)
(243,179,1)
(220,80,1)
(23,161,1)
(72,228,1)
(43,147,1)
(184,158,1)
(193,166,1)
(119,211,1)
(174,221,1)
(27,97,1)
(142,172,1)
(230,130,1)
(4,1,1)
(102,73,1)
(53,180,1)
(22,204,1)
(117,230,1)
(123,250,1)
(56,15,1)
(77,72,1)
(56,40,1)
(41,141,1)
(173,76,1)
(40,243,1)
(138,175,1)
(15,126,1)
(54,113,1)
(9,17,1)
(209,125,1)
(250,230,1)
(170,10,1)
(92,175,1)
(85,60,1)
(23,69,1)
(105,117,1)
(24,117,1)
(240,205,1)
(178,77,1)
(203,230,1)
(20,53,1)
(96,36,1)
(75,161,1)
(230,246,1)
(199,194,1)
(221,32,1)
(121,206,1)
(47,41,1)
(89,158,1)
(212,58,1)
(139,148,1)
(114,217,1)
(100,139,1)
(161,136,1)
(220,227,1)
(252,161,1)
(224,102,1)
(233,174,1)
(185,227,1)
(106,163,1)
(197,225,1)
(190,68,1)
(97,89,1)
(254,198,1)
(218,245,1)
(140,224,1)
(126,123,1)
(174,41,1)
(141,196,1)
(150,92,1)
(80,230,1)
(221,70,1)
(78,252,1)
(92,121,1)
(178,19,1)
(12,91,1)
(83,145,1)
(50,162,1)
(16,116,1)
(21,118,1)
(126,227,1)
(238,207,1)
(179,74,1)
(250,106,1)
(74,169,1)
(195,34,1)
(58,67,1)
(34,150,1)
(135,85,1)
(46,101,1)
(145,35,1)
(36,111,1)
(35,11,1)
(101,92,1)
(227,61,1)
(133,170,1)
(130,62,1)
(56,65,1)
(82,208,1)
(81,25,1)
(205,87,1)
(103,115,1)
(148,220,1)
(63,216,1)
(192,43,1)
(131,138,1)
(231,197,1)
(18,103,1)
(152,33,1)
(75,231,1)
(26,134,1)
(29,237,1)
(237,177,1)
(236,224,1)
(67,33,1)
(241,186,1)
(111,57,1)
(105,24,1)
(217,90,1)
(84,82,1)
(162,145,1)
(96,161,1)
(86,125,1)
(125,22,1)
(188,135,1)
(187,100,1)
(109,178,1)
(169,248,1)
(19,146,1)
(229,23,1)
(34,200,1)
(172,120,1)
(215,30,1)
(39,167,1)
(37,254,1)
(253,222,1)
(201,81,1)
(196,253,1)
(116,184,1)
(70,103,1)
(211,232,1)
(248,0,1)
(93,20,1)
(240,219,1)
(214,9,1)
(102,127,1)
(158,130,1)
(239,245,1)
(87,144,1)
(180,241,1)
(69,214,1)
(118,29,1)
(158,191,1)
(56,83,1)
(60,183,1)
(108,133,1)
(19,240,1)
(175,75,1)
(183,238,1)
(6,10,1)
(76,63,1)
(167,244,1)
(189,203,1)
(124,199,1)
(57,216,1)
(200,76,1)
(191,130,1)
(120,71,1)
(143,13,1)
(91,108,1)
(245,8,1)
(194,19,1)
(5,105,1)
(157,213,1)
(147,73,1)
(222,212,1)
(223,155,1)
(178,72,1)
(136,171,1)
(13,119,1)
(225,128,1)
(56,235,1)
(90,96,1)
(137,218,1)
(68,124,1)
(20,180,1)
(113,112,1)
(77,14,1)
(242,5,1)
(33,12,1)
(42,192,1)
(79,173,1)
(233,201,1)
(146,240,1)
(127,42,1)
(34,151,1)
(110,149,1)
(17,143,1)
(59,187,1)
(164,45,1)
(196,222,1)
(207,182,1)
(129,227,1)
(168,189,1)
(41,196,1)
(113,37,1)
(30,93,1)
(62,227,1)
(119,161,1)
(31,140,1)
(128,55,1)
(61,51,1)
(213,16,1)
(63,114,1)
(56,6,1)
(62,7,1)
(153,152,1)
(129,161,1)
(176,132,1)
(7,50,1)
(122,21,1)
(102,192,1)
(144,157,1)
(15,132,1)
(235,215,1)
(232,142,1)
(125,230,1)
(8,54,1)
(88,223,1)
(204,239,1)
(117,122,1)
(174,70,1)
(25,67,1)
(71,78,1)
(112,31,1)
(10,193,1)
(67,108,1)
(72,190,1)
(67,39,1)
(80,168,1)
(93,85,1)
(171,151,1)
(86,209,1)
(166,164,1)
(190,124,1)
(65,129,1)
(155,27,1)
(198,84,1)
(244,153,1)
(186,188,1)
(73,44,1)
(51,110,1)
(219,205,1)
(66,229,1)
(228,190,1)
(182,88,1)
(246,4,1)
(177,86,1)
(1,109,1)
(94,185,1)
(205,130,1)
(151,29,1)
(52,46,1)
(45,94,1)
(206,131,1)
(126,250,1)
(0,195,1)
(55,79,1)
(70,18,1)
(239,59,1)
(129,52,1)
(76,17,1)
(11,26,1)
(163,176,1)
(77,14,2)
(37,254,2)
(88,158,2)
(221,67,2)
(212,67,2)
(120,151,2)
(92,121,2)
(217,90,2)
(100,158,2)
(121,76,2)
(63,114,2)
(1,158,2)
(46,92,2)
(132,29,2)
(58,67,2)
(76,17,2)
(74,92,2)
(105,117,2)
(138,76,2)
(172,151,2)
(50,145,2)
(237,177,2)
(106,132,2)
(243,151,2)
(174,67,2)
(151,29,2)
(44,10,2)
(0,76,2)
(113,10,2)
(125,245,2)
(173,76,2)
(101,92,2)
(11,245,2)
(240,205,2)
(250,230,2)
(158,145,2)
(214,17,2)
(85,60,2)
(130,62,2)
(80,230,2)
(11,26,2)
(209,245,2)
(174,41,2)
(243,92,2)
(132,242,2)
(21,29,2)
(16,158,2)
(30,158,2)
(127,10,2)
(22,158,2)
(120,71,2)
(116,158,2)
(248,92,2)
(169,92,2)
(177,86,2)
(229,23,2)
(53,85,2)
(8,10,2)
(128,55,2)
(188,85,2)
(140,224,2)
(33,10,2)
(201,67,2)
(59,158,2)
(105,29,2)
(77,158,2)
(135,85,2)
(147,10,2)
(139,158,2)
(204,158,2)
(20,180,2)
(66,17,2)
(253,67,2)
(5,29,2)
(175,75,2)
(208,224,2)
(207,158,2)
(13,119,2)
(153,10,2)
(182,158,2)
(245,10,2)
(71,151,2)
(41,67,2)
(7,145,2)
(180,85,2)
(119,161,2)
(67,10,2)
(243,76,2)
(206,76,2)
(118,29,2)
(193,166,2)
(12,10,2)
(197,76,2)
(233,10,2)
(195,76,2)
(67,33,2)
(198,224,2)
(93,158,2)
(85,158,2)
(235,158,2)
(143,151,2)
(40,151,2)
(56,6,2)
(56,65,2)
(88,223,2)
(70,67,2)
(4,158,2)
(200,76,2)
(137,245,2)
(126,227,2)
(225,76,2)
(73,10,2)
(230,130,2)
(180,241,2)
(34,92,2)
(227,61,2)
(114,217,2)
(217,216,2)
(223,158,2)
(92,76,2)
(92,175,2)
(124,158,2)
(75,76,2)
(74,151,2)
(0,92,2)
(68,158,2)
(80,158,2)
(178,19,2)
(121,206,2)
(35,11,2)
(78,151,2)
(83,145,2)
(179,92,2)
(177,158,2)
(114,216,2)
(183,158,2)
(126,250,2)
(15,29,2)
(145,35,2)
(102,73,2)
(29,237,2)
(241,85,2)
(17,151,2)
(189,158,2)
(109,158,2)
(57,216,2)
(243,179,2)
(174,70,2)
(133,10,2)
(70,103,2)
(167,10,2)
(97,158,2)
(125,230,2)
(10,193,2)
(74,76,2)
(5,105,2)
(145,245,2)
(179,76,2)
(196,67,2)
(40,92,2)
(215,30,2)
(22,245,2)
(35,245,2)
(221,32,2)
(169,76,2)
(211,151,2)
(119,151,2)
(86,158,2)
(148,158,2)
(56,235,2)
(220,80,2)
(13,151,2)
(203,158,2)
(56,83,2)
(63,216,2)
(205,158,2)
(40,76,2)
(20,85,2)
(220,227,2)
(115,67,2)
(168,158,2)
(31,224,2)
(229,17,2)
(142,151,2)
(62,145,2)
(170,10,2)
(204,245,2)
(134,245,2)
(65,92,2)
(90,216,2)
(187,100,2)
(131,76,2)
(184,158,2)
(129,227,2)
(59,187,2)
(62,227,2)
(158,130,2)
(89,158,2)
(81,67,2)
(176,132,2)
(190,124,2)
(213,158,2)
(196,222,2)
(191,145,2)
(82,224,2)
(171,151,2)
(84,224,2)
(178,158,2)
(228,158,2)
(248,151,2)
(177,245,2)
(91,10,2)
(222,67,2)
(23,161,2)
(175,76,2)
(67,108,2)
(239,245,2)
(216,17,2)
(87,158,2)
(245,8,2)
(6,10,2)
(224,10,2)
(47,67,2)
(18,67,2)
(224,102,2)
(25,67,2)
(157,213,2)
(231,76,2)
(246,158,2)
(19,158,2)
(166,164,2)
(169,151,2)
(232,151,2)
(238,158,2)
(39,167,2)
(69,17,2)
(152,10,2)
(220,158,2)
(112,224,2)
(136,151,2)
(40,243,2)
(90,96,2)
(144,158,2)
(76,151,2)
(24,29,2)
(86,245,2)
(54,10,2)
(174,221,2)
(237,158,2)
(72,190,2)
(155,158,2)
(215,158,2)
(199,158,2)
(75,161,2)
(172,120,2)
(237,245,2)
(34,76,2)
(225,128,2)
(76,63,2)
(146,158,2)
(163,132,2)
(17,143,2)
(79,76,2)
(52,92,2)
(34,151,2)
(37,224,2)
(23,17,2)
(102,192,2)
(103,67,2)
(218,245,2)
(60,183,2)
(117,230,2)
(190,158,2)
(39,10,2)
(19,240,2)
(252,151,2)
(162,145,2)
(63,17,2)
(213,16,2)
(130,145,2)
(242,5,2)
(126,132,2)
(122,29,2)
(60,158,2)
(239,158,2)
(250,132,2)
(209,158,2)
(244,10,2)
(192,10,2)
(86,125,2)
(29,158,2)
(102,127,2)
(178,77,2)
(179,151,2)
(129,161,2)
(161,151,2)
(26,245,2)
(102,10,2)
(111,216,2)
(72,158,2)
(195,92,2)
(242,29,2)
(150,92,2)
(187,158,2)
(248,76,2)
(219,158,2)
(143,13,2)
(254,224,2)
(55,76,2)
(96,161,2)
(41,196,2)
(29,245,2)
(216,66,2)
(157,158,2)
(36,216,2)
(42,10,2)
(67,39,2)
(141,67,2)
(43,10,2)
(0,151,2)
(108,10,2)
(236,224,2)
(66,229,2)
(27,158,2)
(9,17,2)
(129,92,2)
(186,85,2)
(178,72,2)
(96,216,2)
(117,29,2)
(205,130,2)
(195,151,2)
(125,158,2)
(56,15,2)
(240,158,2)
(230,158,2)
(194,158,2)
(128,76,2)
(123,132,2)
-----------------------------------
(0,ipoib_dbg_mcast(priv, "successfully joined all multicast groups\\n")
(1,broadcast)
(2,if (!broadcast)
(3,)
(4,priv->broadcast)
(5,&priv->broadcast->flags)
(6,return;)
(7,1)
(8,priv->broadcast)
(9,IPOIB_MCAST_FLAG_BUSY)
(10,!test_bit(IPOIB_MCAST_RUN, &priv->flags)
(11,&priv->flags)
(12,port)
(13,&mcast->flags)
(14,union ib_gid)
(15,return;)
(16,priv->lock)
(17,!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
(18,raw)
(19,broadcast->mcmember.mgid.raw)
(20,queue_delayed_work(ipoib_workqueue,\n\\n\\t\\t\\t\\t\\t\\t   &priv->mcast_task, HZ)
(21,priv)
(22,broadcast)
(23,mcast->flags)
(24,flags)
(25,priv)
(26,priv->flags)
(27,ipoib_warn(priv, "failed to allocate broadcast group\\n")
(28,if (!test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags)
(29,!test_bit(IPOIB_MCAST_FLAG_ATTACHED, &priv->broadcast->flags)
(30,&mcast_mutex)
(31,"ib_query_port failed\\n")
(32,union ib_gid)
(33,priv->port)
(34,priv)
(35,test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags)
(36,flags)
(37,priv->local_lid = attr.lid)
(38,while (1)
(39,&priv->local_gid)
(40,clear_bit(IPOIB_MCAST_RUN, &priv->flags)
(41,priv->dev->dev_addr + 4)
(42,attr)
(43,port)
(44,ca)
(45,flags)
(46,mcast)
(47,priv)
(48,)
(49,if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
(50,dev)
(51,dev)
(52,1)
(53,HZ)
(54,broadcast)
(55,priv->lock)
(56,RET)
(57,IPOIB_MCAST_FLAG_ATTACHED)
(58,priv)
(59,spin_unlock_irq(&priv->lock)
(60,&priv->flags)
(61,priv->dev)
(62,ipoib_mcast_alloc(dev, 1)
(63,!test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)
(64,)
(65,return;)
(66,test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)
(67,ib_query_gid(priv->ca, priv->port, 0, &priv->local_gid)
(68,broadcast)
(69,flags)
(70,priv->local_gid.raw)
(71,priv->lock)
(72,priv->dev->broadcast + 4)
(73,priv->ca)
(74,flags)
(75,mcast->list)
(76,!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
(77,sizeof (union ib_gid)
(78,lock)
(79,lock)
(80,priv->broadcast)
(81,"ib_query_gid()
(82,priv->local_lid)
(83,return;)
(84,attr)
(85,test_bit(IPOIB_MCAST_RUN, &priv->flags)
(86,priv->broadcast->flags)
(87,mcmember)
(88,mutex_lock(&mcast_mutex)
(89,priv)
(90,&mcast->flags)
(91,priv)
(92,&mcast->list == &priv->multicast_list)
(93,mcast_mutex)
(94,priv)
(95,)
(96,mcast->flags)
(97,"failed to allocate broadcast group\\n")
(98,)
(99,broadcast)
(100,priv->lock)
(101,dev)
(102,ib_query_port(priv->ca, priv->port, &attr)
(103,priv->local_gid)
(104,)
(105,priv->broadcast->flags)
(106,broadcast)
(107,dev)
(108,priv->ca)
(109,priv)
(110,priv)
(111,mcast)
(112,ipoib_warn(priv, "ib_query_port failed\\n")
(113,priv)
(114,!test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)
(115,local_gid)
(116,lock)
(117,priv->broadcast)
(118,IPOIB_MCAST_FLAG_BUSY)
(119,mcast->flags)
(120,&priv->lock)
(121,&priv->multicast_list)
(122,broadcast)
(123,0)
(124,priv->dev)
(125,priv->broadcast)
(126,ipoib_mcast_join(dev, priv->broadcast, 0)
(127,&attr)
(128,&priv->lock)
(129,ipoib_mcast_join(dev, mcast, 1)
(130,broadcast = ipoib_mcast_alloc(dev, 1)
(131,multicast_list)
(132,!test_bit(IPOIB_MCAST_FLAG_BUSY, &priv->broadcast->flags)
(133,ca)
(134,flags)
(135,ipoib_workqueue)
(136,NULL)
(137,priv)
(138,priv)
(139,lock)
(140,priv)
(141,4)
(142,IPOIB_MCAST_FLAG_SENDONLY)
(143,test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
(144,broadcast)
(145,!test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags)
(146,raw)
(147,priv)
(148,priv)
(149,dev)
(150,break;)
(151,1)
(152,0)
(153,priv)
(154,attr)
(155,mcast_mutex)
(156,if (!ib_query_port(priv->ca, priv->port, &attr)
(157,spin_lock_irq(&priv->lock)
(158,!broadcast)
(159,if (!test_bit(IPOIB_MCAST_FLAG_ATTACHED, &priv->broadcast->flags)
(160,if (test_bit(IPOIB_MCAST_RUN, &priv->flags)
(161,*mcast = NULL)
(162,broadcast)
(163,priv)
(164,priv->flags)
(165,)
(166,&priv->flags)
(167,priv->local_gid)
(168,broadcast)
(169,priv)
(170,priv)
(171,mcast)
(172,spin_lock_irq(&priv->lock)
(173,priv)
(174,memcpy(priv->dev->dev_addr + 4, priv->local_gid.raw, sizeof (union ib_gid)
(175,&mcast->list)
(176,dev)
(177,&priv->broadcast->flags)
(178,memcpy(broadcast->mcmember.mgid.raw, priv->dev->broadcast + 4,\n\\n\\t\\t       sizeof (union ib_gid)
(179,priv->flags)
(180,&priv->mcast_task)
(181,if (ib_query_gid(priv->ca, priv->port, 0, &priv->local_gid)
(182,IPOIB_MCAST_RUN)
(183,priv->flags)
(184,priv)
(185,IPOIB_MCAST_RUN)
(186,mcast_task)
(187,&priv->lock)
(188,priv)
(189,priv)
(190,priv->dev->broadcast)
(191,broadcast)
(192,priv->port)
(193,test_bit(IPOIB_MCAST_RUN, &priv->flags)
(194,priv)
(195,"successfully joined all multicast groups\\n")
(196,priv->dev->dev_addr)
(197,mcast)
(198,lid)
(199,dev)
(200,break;)
(201,ipoib_warn(priv, "ib_query_gid()
(202,mcast)
(203,dev)
(204,priv)
(205,broadcast->mcmember)
(206,priv->multicast_list)
(207,priv)
(208,local_lid)
(209,flags)
(210,if (!test_bit(IPOIB_MCAST_FLAG_BUSY, &priv->broadcast->flags)
(211,flags)
(212,dev)
(213,&priv->lock)
(214,mcast)
(215,mutex_unlock(&mcast_mutex)
(216,!test_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags)
(217,test_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)
(218,IPOIB_FLAG_ADMIN_UP)
(219,mgid)
(220,__ipoib_mcast_add(dev, priv->broadcast)
(221,sizeof (union ib_gid)
(222,priv->dev)
(223,&mcast_mutex)
(224,!ib_query_port(priv->ca, priv->port, &attr)
(225,spin_unlock_irq(&priv->lock)
(226,)
(227,*dev = priv->dev)
(228,4)
(229,&mcast->flags)
(230,priv->broadcast = broadcast)
(231,list)
(232,mcast)
(233,priv)
(234,if (!test_bit(IPOIB_MCAST_RUN, &priv->flags)
(235,return;)
(236,priv)
(237,test_bit(IPOIB_MCAST_FLAG_ATTACHED, &priv->broadcast->flags)
(238,flags)
(239,IPOIB_MCAST_FLAG_ATTACHED)
(240,broadcast->mcmember.mgid)
(241,priv->mcast_task)
(242,test_bit(IPOIB_MCAST_FLAG_BUSY, &priv->broadcast->flags)
(243,&priv->flags)
(244,local_gid)
(245,!priv->broadcast)
(246,broadcast)
(247,if (!priv->broadcast)
(248,IPOIB_MCAST_RUN)
(249,if (&mcast->list == &priv->multicast_list)
(250,priv->broadcast)
(251,)
(252,priv)
(253,dev_addr)
(254,attr.lid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^