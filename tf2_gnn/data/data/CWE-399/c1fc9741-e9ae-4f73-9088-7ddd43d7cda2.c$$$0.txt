-----label-----
0
-----code-----
static struct fdtable *alloc_fdtable(int nr)
{
	struct fdtable *fdt = NULL;
	int nfds = 0;
  	fd_set *new_openset = NULL, *new_execset = NULL;
	struct file **new_fds;

	fdt = kzalloc(sizeof(*fdt), GFP_KERNEL);
	if (!fdt)
  		goto out;

	nfds = max_t(int, 8 * L1_CACHE_BYTES, roundup_pow_of_two(nfds));
	if (nfds > NR_OPEN)
		nfds = NR_OPEN;

  	new_openset = alloc_fdset(nfds);
  	new_execset = alloc_fdset(nfds);
  	if (!new_openset || !new_execset)
  		goto out;
	fdt->open_fds = new_openset;
	fdt->close_on_exec = new_execset;
	fdt->max_fdset = nfds;

	nfds = NR_OPEN_DEFAULT;
	/*
	 * Expand to the max in easy steps, and keep expanding it until
	 * we have enough for the requested fd array size.
	 */
	do {
#if NR_OPEN_DEFAULT < 256
		if (nfds < 256)
			nfds = 256;
		else
#endif
		if (nfds < (PAGE_SIZE / sizeof(struct file *)))
			nfds = PAGE_SIZE / sizeof(struct file *);
		else {
			nfds = nfds * 2;
			if (nfds > NR_OPEN)
				nfds = NR_OPEN;
  		}
	} while (nfds <= nr);
	new_fds = alloc_fd_array(nfds);
	if (!new_fds)
		goto out2;
	fdt->fd = new_fds;
	fdt->max_fds = nfds;
	fdt->free_files = NULL;
	return fdt;
out2:
	nfds = fdt->max_fdset;
out:
  	if (new_openset)
  		free_fdset(new_openset, nfds);
  	if (new_execset)
  		free_fdset(new_execset, nfds);
	kfree(fdt);
	return NULL;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
22,23
23,24
23,25
25,26
25,27
27,28
29,30
30,31
30,32
30,33
31,32
33,34
33,35
33,36
36,37
37,38
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
49,52
53,54
54,55
54,56
55,56
57,58
57,59
57,60
58,59
60,61
61,62
62,63
63,64
65,66
67,68
67,69
68,69
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
99,101
100,101
102,103
104,105
104,106
105,106
105,107
106,107
107,108
109,110
110,111
112,113
114,115
115,116
115,117
116,117
116,118
117,118
120,121
122,123
123,124
123,125
124,125
124,126
125,126
128,129
130,131
131,132
131,133
132,133
132,134
133,134
136,137
138,139
139,140
139,141
140,141
142,143
144,145
144,146
145,146
146,147
146,148
146,149
147,148
147,149
148,149
151,152
152,153
152,154
153,154
156,157
156,158
156,159
157,158
157,159
158,159
160,161
161,162
161,163
162,163
164,165
165,166
165,167
166,167
168,169
170,171
171,172
171,173
172,173
174,175
174,176
175,176
177,178
178,179
178,180
179,180
181,182
183,184
183,185
184,185
185,186
185,187
186,187
188,189
188,190
189,190
192,193
192,194
193,194
193,195
194,195
196,197
198,199
199,200
199,201
200,201
202,203
204,205
204,206
205,206
207,208
209,210
210,211
210,212
211,212
213,214
213,215
214,215
216,217
218,219
218,220
219,220
220,221
222,223
224,225
225,226
225,227
226,227
226,228
227,228
230,231
232,233
233,234
233,235
234,235
234,236
235,236
238,239
240,241
241,242
241,243
242,243
242,244
243,244
246,247
248,249
249,250
251,252
251,253
253,254
254,255
254,256
255,256
257,258
257,259
258,259
261,262
261,263
263,264
263,265
264,265
266,267
267,268
267,269
267,270
268,269
270,271
272,273
274,275
274,276
275,276
277,278
278,279
278,280
278,281
279,280
281,282
283,284
285,286
286,287
286,288
287,288
289,290
291,292
292,293
-----nextToken-----
3,5,6,8,10,15,17,18,21,24,26,28,32,34,35,38,40,41,44,48,50,51,52,56,59,64,66,70,72,77,79,83,85,89,92,94,98,101,103,108,111,113,118,119,121,126,127,129,134,135,137,141,143,149,150,154,155,159,163,167,169,173,176,180,182,187,190,191,195,197,201,203,206,208,212,215,217,221,223,228,229,231,236,237,239,244,245,247,250,252,256,259,260,262,265,269,271,273,276,280,282,284,288,290,293
-----computeFrom-----
54,55
54,56
75,76
75,77
81,82
81,83
87,88
87,89
96,97
96,98
105,106
105,107
115,116
115,117
123,124
123,125
131,132
131,133
139,140
139,141
147,148
147,149
152,153
152,154
157,158
157,159
161,162
161,163
171,172
171,173
174,175
174,176
185,186
185,187
188,189
188,190
193,194
193,195
199,200
199,201
204,205
204,206
210,211
210,212
225,226
225,227
233,234
233,235
241,242
241,243
254,255
254,256
-----guardedBy-----
77,83
79,85
149,154
167,180
159,173
163,176
195,201
197,203
-----guardedByNegation-----
149,201
159,201
-----lastLexicalUse-----
149,201
159,201
-----jump-----
149,201
159,201
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;ProblemStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct fdtable *alloc_fdtable(int nr){	struct fdtable *fdt = NULL;	int nfds = 0;  	fd_set *new_openset = NULL, *new_execset = NULL;	struct file **new_fds;	fdt = kzalloc(sizeof(*fdt), GFP_KERNEL);	if (!fdt)  		goto out;	nfds = max_t(int, 8 * L1_CACHE_BYTES, roundup_pow_of_two(nfds));	if (nfds > NR_OPEN)		nfds = NR_OPEN;  	new_openset = alloc_fdset(nfds);  	new_execset = alloc_fdset(nfds);  	if (!new_openset || !new_execset)  		goto out;	fdt->open_fds = new_openset;	fdt->close_on_exec = new_execset;	fdt->max_fdset = nfds;	nfds = NR_OPEN_DEFAULT;	/*	 * Expand to the max in easy steps, and keep expanding it until	 * we have enough for the requested fd array size.	 */	do {#if NR_OPEN_DEFAULT < 256		if (nfds < 256)			nfds = 256;		else#endif		if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}	} while (nfds <= nr);	new_fds = alloc_fd_array(nfds);	if (!new_fds)		goto out2;	fdt->fd = new_fds;	fdt->max_fds = nfds;	fdt->free_files = NULL;	return fdt;out2:	nfds = fdt->max_fdset;out:  	if (new_openset)  		free_fdset(new_openset, nfds);  	if (new_execset)  		free_fdset(new_execset, nfds);	kfree(fdt);	return NULL;}
static struct fdtable
fdtable
*alloc_fdtable(int nr)
*
alloc_fdtable
int nr
int
nr
nr
{	struct fdtable *fdt = NULL;	int nfds = 0;  	fd_set *new_openset = NULL, *new_execset = NULL;	struct file **new_fds;	fdt = kzalloc(sizeof(*fdt), GFP_KERNEL);	if (!fdt)  		goto out;	nfds = max_t(int, 8 * L1_CACHE_BYTES, roundup_pow_of_two(nfds));	if (nfds > NR_OPEN)		nfds = NR_OPEN;  	new_openset = alloc_fdset(nfds);  	new_execset = alloc_fdset(nfds);  	if (!new_openset || !new_execset)  		goto out;	fdt->open_fds = new_openset;	fdt->close_on_exec = new_execset;	fdt->max_fdset = nfds;	nfds = NR_OPEN_DEFAULT;	/*	 * Expand to the max in easy steps, and keep expanding it until	 * we have enough for the requested fd array size.	 */	do {#if NR_OPEN_DEFAULT < 256		if (nfds < 256)			nfds = 256;		else#endif		if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}	} while (nfds <= nr);	new_fds = alloc_fd_array(nfds);	if (!new_fds)		goto out2;	fdt->fd = new_fds;	fdt->max_fds = nfds;	fdt->free_files = NULL;	return fdt;out2:	nfds = fdt->max_fdset;out:  	if (new_openset)  		free_fdset(new_openset, nfds);  	if (new_execset)  		free_fdset(new_execset, nfds);	kfree(fdt);	return NULL;}
struct fdtable *fdt = NULL;
struct fdtable *fdt = NULL;
struct fdtable
fdtable
*fdt = NULL
*
fdt
= NULL
NULL
NULL
int nfds = 0;
int nfds = 0;
int
nfds = 0
nfds
= 0
0
fd_set *new_openset = NULL, *new_execset = NULL;
fd_set *new_openset = NULL, *new_execset = NULL;
fd_set
fd_set
*new_openset = NULL
*
new_openset
= NULL
NULL
NULL
*new_execset = NULL
*
new_execset
= NULL
NULL
NULL
struct file **new_fds;
struct file **new_fds;
struct file
file
**new_fds
*
*
new_fds
fdt = kzalloc(sizeof(*fdt), GFP_KERNEL);
fdt = kzalloc(sizeof(*fdt), GFP_KERNEL)
fdt
fdt
kzalloc(sizeof(*fdt), GFP_KERNEL)
kzalloc
kzalloc
sizeof(*fdt)
(*fdt)
*fdt
fdt
fdt
GFP_KERNEL
GFP_KERNEL
if (!fdt)  		goto out;
!fdt
fdt
fdt
goto out;
out
nfds = max_t(int, 8 * L1_CACHE_BYTES, roundup_pow_of_two(nfds));
if (nfds > NR_OPEN)		nfds = NR_OPEN;
nfds > NR_OPEN
nfds
nfds
NR_OPEN
NR_OPEN
nfds = NR_OPEN;
nfds = NR_OPEN
nfds
nfds
NR_OPEN
NR_OPEN
new_openset = alloc_fdset(nfds);
new_openset = alloc_fdset(nfds)
new_openset
new_openset
alloc_fdset(nfds)
alloc_fdset
alloc_fdset
nfds
nfds
new_execset = alloc_fdset(nfds);
new_execset = alloc_fdset(nfds)
new_execset
new_execset
alloc_fdset(nfds)
alloc_fdset
alloc_fdset
nfds
nfds
if (!new_openset || !new_execset)  		goto out;
!new_openset || !new_execset
!new_openset
new_openset
new_openset
!new_execset
new_execset
new_execset
goto out;
out
fdt->open_fds = new_openset;
fdt->open_fds = new_openset
fdt->open_fds
fdt
fdt
open_fds
new_openset
new_openset
fdt->close_on_exec = new_execset;
fdt->close_on_exec = new_execset
fdt->close_on_exec
fdt
fdt
close_on_exec
new_execset
new_execset
fdt->max_fdset = nfds;
fdt->max_fdset = nfds
fdt->max_fdset
fdt
fdt
max_fdset
nfds
nfds
nfds = NR_OPEN_DEFAULT;
nfds = NR_OPEN_DEFAULT
nfds
nfds
NR_OPEN_DEFAULT
NR_OPEN_DEFAULT
do {#if NR_OPEN_DEFAULT < 256		if (nfds < 256)			nfds = 256;		else#endif		if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}	} while (nfds <= nr);
{#if NR_OPEN_DEFAULT < 256		if (nfds < 256)			nfds = 256;		else#endif		if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}	}
if (nfds < 256)			nfds = 256;		else#endif		if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}
nfds < 256
nfds
nfds
256
nfds = 256;
nfds = 256
nfds
nfds
256
if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}
nfds < (PAGE_SIZE / sizeof(struct file *))
nfds
nfds
(PAGE_SIZE / sizeof(struct file *))
PAGE_SIZE / sizeof(struct file *)
PAGE_SIZE
PAGE_SIZE
sizeof(struct file *)
struct file *
struct file
file
*
*
nfds = PAGE_SIZE / sizeof(struct file *);
nfds = PAGE_SIZE / sizeof(struct file *)
nfds
nfds
PAGE_SIZE / sizeof(struct file *)
PAGE_SIZE
PAGE_SIZE
sizeof(struct file *)
struct file *
struct file
file
*
*
{			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}
nfds = nfds * 2;
nfds = nfds * 2
nfds
nfds
nfds * 2
nfds
nfds
2
if (nfds > NR_OPEN)				nfds = NR_OPEN;
nfds > NR_OPEN
nfds
nfds
NR_OPEN
NR_OPEN
nfds = NR_OPEN;
nfds = NR_OPEN
nfds
nfds
NR_OPEN
NR_OPEN
nfds <= nr
nfds
nfds
nr
nr
new_fds = alloc_fd_array(nfds);
new_fds = alloc_fd_array(nfds)
new_fds
new_fds
alloc_fd_array(nfds)
alloc_fd_array
alloc_fd_array
nfds
nfds
if (!new_fds)		goto out2;
!new_fds
new_fds
new_fds
goto out2;
out2
fdt->fd = new_fds;
fdt->fd = new_fds
fdt->fd
fdt
fdt
fd
new_fds
new_fds
fdt->max_fds = nfds;
fdt->max_fds = nfds
fdt->max_fds
fdt
fdt
max_fds
nfds
nfds
fdt->free_files = NULL;
fdt->free_files = NULL
fdt->free_files
fdt
fdt
free_files
NULL
NULL
return fdt;
fdt
fdt
out2:	nfds = fdt->max_fdset;
out2
nfds = fdt->max_fdset;
nfds = fdt->max_fdset
nfds
nfds
fdt->max_fdset
fdt
fdt
max_fdset
out:  	if (new_openset)  		free_fdset(new_openset, nfds);
out
if (new_openset)  		free_fdset(new_openset, nfds);
new_openset
new_openset
free_fdset(new_openset, nfds);
free_fdset(new_openset, nfds)
free_fdset
free_fdset
new_openset
new_openset
nfds
nfds
if (new_execset)  		free_fdset(new_execset, nfds);
new_execset
new_execset
free_fdset(new_execset, nfds);
free_fdset(new_execset, nfds)
free_fdset
free_fdset
new_execset
new_execset
nfds
nfds
kfree(fdt);
kfree(fdt)
kfree
kfree
fdt
fdt
return NULL;
NULL
NULL
-----joern-----
(138,71,0)
(133,147,0)
(41,100,0)
(104,90,0)
(0,129,0)
(18,31,0)
(13,36,0)
(53,52,0)
(109,120,0)
(24,59,0)
(100,108,0)
(29,147,0)
(32,103,0)
(75,160,0)
(39,120,0)
(54,112,0)
(98,22,0)
(119,112,0)
(28,129,0)
(152,74,0)
(87,112,0)
(153,99,0)
(78,0,0)
(101,129,0)
(33,86,0)
(16,122,0)
(62,49,0)
(156,61,0)
(59,32,0)
(22,135,0)
(92,34,0)
(76,70,0)
(48,128,0)
(17,151,0)
(113,159,0)
(87,129,0)
(49,61,0)
(60,59,0)
(147,13,0)
(1,80,0)
(49,112,0)
(124,36,0)
(96,34,0)
(54,61,0)
(31,102,0)
(153,129,0)
(136,27,0)
(100,135,0)
(125,61,0)
(123,129,0)
(151,13,0)
(122,51,0)
(42,129,0)
(146,119,0)
(11,80,0)
(87,27,0)
(54,70,0)
(14,4,0)
(149,5,0)
(81,161,0)
(141,3,0)
(116,112,0)
(140,4,0)
(53,59,0)
(127,135,0)
(99,59,0)
(111,129,0)
(93,135,0)
(73,78,0)
(153,53,0)
(153,90,0)
(27,129,0)
(45,3,0)
(26,129,0)
(45,108,0)
(63,71,0)
(22,102,0)
(34,92,0)
(35,70,0)
(27,51,0)
(47,136,0)
(88,7,0)
(161,84,0)
(66,74,0)
(74,59,0)
(31,13,0)
(110,51,0)
(84,129,0)
(130,129,0)
(161,112,0)
(86,0,0)
(20,45,0)
(1,129,0)
(160,115,0)
(46,153,0)
(115,25,0)
(25,115,0)
(31,108,0)
(80,119,0)
(22,13,0)
(64,99,0)
(114,129,0)
(49,84,0)
(142,32,0)
(45,13,0)
(44,7,0)
(157,93,0)
(118,102,0)
(80,129,0)
(22,3,0)
(89,51,0)
(70,129,0)
(32,59,0)
(4,59,0)
(38,108,0)
(93,3,0)
(79,43,0)
(90,87,0)
(43,129,0)
(97,27,0)
(147,132,0)
(93,13,0)
(54,27,0)
(56,89,0)
(100,102,0)
(34,96,0)
(82,39,0)
(93,108,0)
(51,122,0)
(159,3,0)
(103,32,0)
(49,140,0)
(94,22,0)
(65,39,0)
(59,129,0)
(117,0,0)
(158,13,0)
(147,108,0)
(55,140,0)
(100,3,0)
(51,27,0)
(148,122,0)
(52,84,0)
(161,27,0)
(57,53,0)
(31,0,0)
(52,129,0)
(159,48,0)
(115,160,0)
(162,54,0)
(120,129,0)
(119,27,0)
(23,8,0)
(71,59,0)
(143,4,0)
(128,48,0)
(90,59,0)
(8,129,0)
(49,27,0)
(150,43,0)
(15,59,0)
(19,151,0)
(39,59,0)
(3,159,0)
(77,129,0)
(67,129,0)
(155,87,0)
(134,60,0)
(147,3,0)
(68,136,0)
(45,129,0)
(5,103,0)
(2,100,0)
(8,59,0)
(99,1,0)
(22,108,0)
(140,129,0)
(72,102,0)
(96,84,0)
(45,102,0)
(40,96,0)
(84,161,0)
(69,153,0)
(9,49,0)
(139,108,0)
(49,7,0)
(126,129,0)
(131,92,0)
(147,102,0)
(137,99,0)
(92,80,0)
(4,140,0)
(51,89,0)
(60,129,0)
(54,80,0)
(89,61,0)
(107,52,0)
(145,105,0)
(58,15,0)
(48,159,0)
(74,45,0)
(100,13,0)
(0,31,0)
(160,93,0)
(7,129,0)
(93,160,0)
(50,90,0)
(30,112,0)
(12,135,0)
(46,8,0)
(13,22,0)
(31,3,0)
(4,87,0)
(54,140,0)
(135,129,0)
(6,1,0)
(21,53,0)
(103,5,0)
(119,80,0)
(37,129,0)
(5,43,0)
(86,129,0)
(61,129,0)
(154,54,0)
(93,102,0)
(10,129,0)
(85,129,0)
(71,86,0)
(121,84,0)
(87,112,1)
(60,59,1)
(127,12,1)
(157,100,1)
(30,136,1)
(100,13,1)
(4,59,1)
(161,81,1)
(141,93,1)
(47,27,1)
(93,160,1)
(99,137,1)
(139,38,1)
(95,15,1)
(49,61,1)
(100,2,1)
(74,59,1)
(24,7,1)
(61,125,1)
(144,54,1)
(29,133,1)
(76,61,1)
(92,80,1)
(31,18,1)
(86,0,1)
(119,112,1)
(80,119,1)
(93,135,1)
(21,57,1)
(46,8,1)
(142,103,1)
(148,16,1)
(84,161,1)
(49,7,1)
(153,90,1)
(100,108,1)
(12,87,1)
(54,140,1)
(75,157,1)
(19,13,1)
(31,3,1)
(3,159,1)
(6,99,1)
(45,108,1)
(93,13,1)
(156,43,1)
(11,136,1)
(49,84,1)
(89,61,1)
(96,84,1)
(151,17,1)
(100,135,1)
(73,0,1)
(81,121,1)
(154,162,1)
(143,55,1)
(91,83,1)
(100,102,1)
(93,3,1)
(150,79,1)
(120,109,1)
(162,91,1)
(133,108,1)
(22,108,1)
(54,70,1)
(158,93,1)
(147,102,1)
(49,140,1)
(64,34,1)
(41,135,1)
(35,76,1)
(136,27,1)
(48,113,1)
(59,32,1)
(2,41,1)
(52,107,1)
(87,155,1)
(133,151,1)
(22,102,1)
(17,19,1)
(53,59,1)
(48,128,1)
(134,144,1)
(137,64,1)
(119,27,1)
(62,9,1)
(97,15,1)
(1,80,1)
(153,53,1)
(22,13,1)
(147,13,1)
(31,102,1)
(68,47,1)
(106,78,1)
(53,21,1)
(22,98,1)
(31,108,1)
(23,120,1)
(34,96,1)
(43,150,1)
(93,108,1)
(119,146,1)
(78,73,1)
(57,1,1)
(34,92,1)
(108,139,1)
(135,127,1)
(136,68,1)
(22,3,1)
(151,13,1)
(22,135,1)
(134,49,1)
(58,59,1)
(103,5,1)
(102,118,1)
(72,100,1)
(104,52,1)
(4,14,1)
(89,56,1)
(41,147,1)
(56,122,1)
(14,143,1)
(91,140,1)
(16,110,1)
(45,13,1)
(149,24,1)
(88,44,1)
(82,45,1)
(52,84,1)
(115,75,1)
(146,11,1)
(54,80,1)
(133,102,1)
(74,66,1)
(65,82,1)
(152,86,1)
(122,148,1)
(140,4,1)
(117,147,1)
(49,62,1)
(94,158,1)
(4,87,1)
(131,84,1)
(54,154,1)
(125,156,1)
(109,39,1)
(15,59,1)
(66,152,1)
(159,48,1)
(45,3,1)
(147,29,1)
(50,104,1)
(63,78,1)
(116,30,1)
(138,63,1)
(1,6,1)
(49,27,1)
(32,103,1)
(13,22,1)
(39,65,1)
(9,144,1)
(96,40,1)
(121,80,1)
(86,33,1)
(8,59,1)
(0,31,1)
(161,27,1)
(5,43,1)
(60,134,1)
(5,149,1)
(144,91,1)
(18,117,1)
(15,58,1)
(113,141,1)
(118,72,1)
(115,25,1)
(92,131,1)
(54,61,1)
(46,153,1)
(32,142,1)
(69,60,1)
(153,69,1)
(7,88,1)
(107,53,1)
(31,13,1)
(153,99,1)
(38,151,1)
(45,20,1)
(100,3,1)
(133,3,1)
(90,59,1)
(54,112,1)
(83,34,1)
(45,102,1)
(87,27,1)
(90,50,1)
(20,74,1)
(99,59,1)
(39,59,1)
(27,51,1)
(110,97,1)
(147,132,1)
(112,116,1)
(33,71,1)
(51,122,1)
(11,112,1)
(71,59,1)
(55,106,1)
(98,94,1)
(70,35,1)
(40,92,1)
(161,112,1)
(160,115,1)
(78,0,1)
(91,95,1)
(71,138,1)
(49,112,1)
(54,27,1)
(44,70,1)
(147,3,1)
(93,102,1)
(8,23,1)
(51,89,1)
(147,108,1)
(155,90,1)
(63,78,2)
(109,78,2)
(72,100,2)
(152,78,2)
(147,3,2)
(54,61,2)
(151,13,2)
(39,59,2)
(117,34,2)
(107,34,2)
(48,93,2)
(51,15,2)
(2,147,2)
(22,135,2)
(89,61,2)
(49,112,2)
(13,93,2)
(147,108,2)
(21,34,2)
(90,59,2)
(86,78,2)
(8,59,2)
(155,34,2)
(144,78,2)
(80,15,2)
(74,59,2)
(69,78,2)
(147,102,2)
(45,102,2)
(51,122,2)
(62,144,2)
(49,140,2)
(20,78,2)
(45,108,2)
(121,15,2)
(86,0,2)
(99,34,2)
(60,59,2)
(0,34,2)
(30,136,2)
(93,3,2)
(22,108,2)
(49,144,2)
(45,78,2)
(81,15,2)
(40,92,2)
(93,102,2)
(34,92,2)
(120,78,2)
(147,132,2)
(87,27,2)
(47,15,2)
(15,59,2)
(4,59,2)
(31,13,2)
(71,59,2)
(52,84,2)
(133,147,2)
(3,93,2)
(16,15,2)
(75,100,2)
(127,34,2)
(151,93,2)
(60,78,2)
(106,78,2)
(148,15,2)
(115,100,2)
(104,34,2)
(50,34,2)
(45,13,2)
(31,102,2)
(92,80,2)
(22,93,2)
(103,5,2)
(49,27,2)
(54,27,2)
(153,34,2)
(49,61,2)
(6,34,2)
(100,3,2)
(115,25,2)
(153,53,2)
(119,27,2)
(158,93,2)
(83,34,2)
(1,34,2)
(99,59,2)
(14,78,2)
(87,34,2)
(100,102,2)
(153,90,2)
(34,96,2)
(136,15,2)
(161,15,2)
(54,140,2)
(19,93,2)
(54,70,2)
(59,32,2)
(147,147,2)
(161,27,2)
(161,112,2)
(112,136,2)
(157,100,2)
(31,34,2)
(48,128,2)
(96,92,2)
(110,15,2)
(1,80,2)
(140,4,2)
(4,78,2)
(17,93,2)
(144,15,2)
(41,147,2)
(98,93,2)
(119,112,2)
(22,13,2)
(135,34,2)
(133,34,2)
(147,34,2)
(53,34,2)
(89,15,2)
(131,15,2)
(22,102,2)
(91,34,2)
(69,34,2)
(113,93,2)
(160,115,2)
(54,80,2)
(49,84,2)
(29,34,2)
(80,119,2)
(57,34,2)
(11,15,2)
(51,89,2)
(91,15,2)
(78,34,2)
(100,147,2)
(34,15,2)
(153,78,2)
(160,100,2)
(53,59,2)
(33,78,2)
(102,100,2)
(22,3,2)
(31,108,2)
(144,34,2)
(153,99,2)
(154,91,2)
(52,34,2)
(93,135,2)
(55,78,2)
(92,15,2)
(18,34,2)
(2,34,2)
(71,78,2)
(78,0,2)
(94,93,2)
(84,161,2)
(153,15,2)
(100,13,2)
(82,78,2)
(9,144,2)
(69,15,2)
(134,15,2)
(4,87,2)
(3,159,2)
(147,13,2)
(12,34,2)
(5,43,2)
(134,34,2)
(46,8,2)
(66,78,2)
(87,112,2)
(13,22,2)
(100,135,2)
(136,27,2)
(68,15,2)
(29,147,2)
(32,103,2)
(97,15,2)
(49,7,2)
(60,15,2)
(140,78,2)
(137,34,2)
(27,15,2)
(93,160,2)
(41,34,2)
(159,48,2)
(56,15,2)
(139,151,2)
(45,3,2)
(23,78,2)
(39,78,2)
(143,78,2)
(93,100,2)
(74,78,2)
(108,151,2)
(122,15,2)
(138,78,2)
(54,112,2)
(90,34,2)
(8,78,2)
(91,78,2)
(95,15,2)
(118,100,2)
(93,13,2)
(84,15,2)
(146,15,2)
(27,51,2)
(93,108,2)
(31,3,2)
(162,91,2)
(141,93,2)
(65,78,2)
(96,84,2)
(60,34,2)
(159,93,2)
(116,136,2)
(38,151,2)
(46,153,2)
(73,34,2)
(64,34,2)
(100,34,2)
(100,108,2)
(54,91,2)
(134,78,2)
(0,31,2)
(119,15,2)
-----------------------------------
(0,new_fds = alloc_fd_array(nfds)
(1,fdt->open_fds = new_openset)
(2,256)
(3,nfds = PAGE_SIZE / sizeof(struct file *)
(4,fdt->max_fdset)
(5,*fdt)
(6,new_openset)
(7,*new_execset = NULL)
(8,return fdt;)
(9,new_execset)
(10,new_execset)
(11,new_openset)
(12,nfds)
(13,nfds = nfds * 2)
(14,max_fdset)
(15,!fdt)
(16,8)
(17,NR_OPEN)
(18,nfds)
(19,nfds)
(20,nfds)
(21,close_on_exec)
(22,nfds * 2)
(23,fdt)
(24,fdt)
(25,struct file *)
(26,if (nfds > NR_OPEN)
(27,nfds = max_t(int, 8 * L1_CACHE_BYTES, roundup_pow_of_two(nfds)
(28,out:)
(29,nr)
(30,nfds)
(31,alloc_fd_array(nfds)
(32,kzalloc(sizeof(*fdt)
(33,new_fds)
(34,!new_openset || !new_execset)
(35,NULL)
(36,)
(37,new_fds)
(38,nfds)
(39,fdt->free_files)
(40,new_execset)
(41,nfds)
(42,do)
(43,*fdt = NULL)
(44,new_execset)
(45,fdt->max_fds = nfds)
(46,RET)
(47,nfds)
(48,sizeof(struct file *)
(49,free_fdset(new_execset, nfds)
(50,max_fdset)
(51,max_t(int, 8 * L1_CACHE_BYTES, roundup_pow_of_two(nfds)
(52,fdt->close_on_exec = new_execset)
(53,fdt->close_on_exec)
(54,free_fdset(new_openset, nfds)
(55,nfds)
(56,nfds)
(57,fdt)
(58,fdt)
(59,fdt = kzalloc(sizeof(*fdt)
(60,kfree(fdt)
(61,nfds = 0)
(62,nfds)
(63,fdt)
(64,fdt)
(65,free_files)
(66,max_fds)
(67,new_openset)
(68,NR_OPEN)
(69,NULL)
(70,*new_openset = NULL)
(71,fdt->fd)
(72,nfds)
(73,new_fds)
(74,fdt->max_fds)
(75,PAGE_SIZE)
(76,new_openset)
(77,if (!new_fds)
(78,!new_fds)
(79,fdt)
(80,new_openset = alloc_fdset(nfds)
(81,nfds)
(82,fdt)
(83,goto out;)
(84,new_execset = alloc_fdset(nfds)
(85,if (new_openset)
(86,fdt->fd = new_fds)
(87,fdt->max_fdset = nfds)
(88,NULL)
(89,roundup_pow_of_two(nfds)
(90,fdt->max_fdset)
(91,new_openset)
(92,!new_openset)
(93,nfds < (PAGE_SIZE / sizeof(struct file *)
(94,nfds)
(95,goto out;)
(96,!new_execset)
(97,nfds)
(98,2)
(99,fdt->open_fds)
(100,nfds < 256)
(101,if (!new_openset || !new_execset)
(102,nfds = 256)
(103,sizeof(*fdt)
(104,fdt)
(105,)
(106,goto out2;)
(107,new_execset)
(108,nfds = NR_OPEN)
(109,NULL)
(110,int)
(111,out2:)
(112,nfds = NR_OPEN)
(113,PAGE_SIZE)
(114,if (new_execset)
(115,sizeof(struct file *)
(116,NR_OPEN)
(117,new_fds)
(118,256)
(119,alloc_fdset(nfds)
(120,fdt->free_files = NULL)
(121,new_execset)
(122,8 * L1_CACHE_BYTES)
(123,nfds)
(124,if (nfds > NR_OPEN)
(125,0)
(126,if (!fdt)
(127,NR_OPEN_DEFAULT)
(128,struct file *)
(129,)
(130,fdt)
(131,new_openset)
(132,int nr)
(133,nfds)
(134,fdt)
(135,nfds = NR_OPEN_DEFAULT)
(136,nfds > NR_OPEN)
(137,open_fds)
(138,fd)
(139,NR_OPEN)
(140,nfds = fdt->max_fdset)
(141,nfds)
(142,GFP_KERNEL)
(143,fdt)
(144,new_execset)
(145,if (nfds < 256)
(146,nfds)
(147,nfds <= nr)
(148,L1_CACHE_BYTES)
(149,fdt)
(150,NULL)
(151,nfds > NR_OPEN)
(152,fdt)
(153,return NULL;)
(154,nfds)
(155,nfds)
(156,nfds)
(157,nfds)
(158,nfds)
(159,PAGE_SIZE / sizeof(struct file *)
(160,PAGE_SIZE / sizeof(struct file *)
(161,alloc_fdset(nfds)
(162,new_openset)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^