-----label-----
1
-----code-----
acpi_status
acpi_ev_execute_reg_method(union acpi_operand_object *region_obj, u32 function)
{
	struct acpi_evaluate_info *info;
	union acpi_operand_object *args[3];
	union acpi_operand_object *region_obj2;
	acpi_status status;

	ACPI_FUNCTION_TRACE(ev_execute_reg_method);

	region_obj2 = acpi_ns_get_secondary_object(region_obj);
	if (!region_obj2) {
		return_ACPI_STATUS(AE_NOT_EXIST);
	}

	if (region_obj2->extra.method_REG == NULL ||
	    region_obj->region.handler == NULL ||
	    !acpi_gbl_reg_methods_enabled) {
		return_ACPI_STATUS(AE_OK);
	}

	/* _REG(DISCONNECT) should be paired with _REG(CONNECT) */

	if ((function == ACPI_REG_CONNECT &&
	     region_obj->common.flags & AOPOBJ_REG_CONNECTED) ||
	    (function == ACPI_REG_DISCONNECT &&
	     !(region_obj->common.flags & AOPOBJ_REG_CONNECTED))) {
		return_ACPI_STATUS(AE_OK);
	}

	/* Allocate and initialize the evaluation information block */

	info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info));
	if (!info) {
		return_ACPI_STATUS(AE_NO_MEMORY);
	}

	info->prefix_node = region_obj2->extra.method_REG;
	info->relative_pathname = NULL;
	info->parameters = args;
	info->flags = ACPI_IGNORE_RETURN_VALUE;

	/*
	 * The _REG method has two arguments:
	 *
	 * arg0 - Integer:
	 *  Operation region space ID Same value as region_obj->Region.space_id
	 *
	 * arg1 - Integer:
	 *  connection status 1 for connecting the handler, 0 for disconnecting
	 *  the handler (Passed as a parameter)
	 */
	args[0] =
	    acpi_ut_create_integer_object((u64)region_obj->region.space_id);
	if (!args[0]) {
		status = AE_NO_MEMORY;
		goto cleanup1;
	}

	args[1] = acpi_ut_create_integer_object((u64)function);
	if (!args[1]) {
		status = AE_NO_MEMORY;
		goto cleanup2;
	}

	args[2] = NULL;		/* Terminate list */

	/* Execute the method, no return value */

	ACPI_DEBUG_EXEC(acpi_ut_display_init_pathname
			(ACPI_TYPE_METHOD, info->prefix_node, NULL));

	status = acpi_ns_evaluate(info);
	acpi_ut_remove_reference(args[1]);

	if (ACPI_FAILURE(status)) {
		goto cleanup2;
	}

	if (function == ACPI_REG_CONNECT) {
		region_obj->common.flags |= AOPOBJ_REG_CONNECTED;
	} else {
		region_obj->common.flags &= ~AOPOBJ_REG_CONNECTED;
	}

cleanup2:
	acpi_ut_remove_reference(args[0]);

cleanup1:
	ACPI_FREE(info);
	return_ACPI_STATUS(status);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
32,33
34,35
35,36
35,37
36,37
38,39
38,40
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
52,53
54,55
55,56
55,57
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
65,66
67,68
68,69
69,70
69,71
70,71
72,73
73,74
75,76
75,77
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
80,81
80,82
81,82
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
94,95
96,97
97,98
99,100
100,101
101,102
101,103
102,103
104,105
105,106
107,108
107,109
108,109
108,110
109,110
110,111
110,112
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
118,120
119,120
123,124
125,126
126,127
126,128
127,128
127,129
128,129
130,131
132,133
133,134
134,135
134,136
135,136
135,137
136,137
136,138
137,138
141,142
143,144
144,145
145,146
145,147
146,147
148,149
149,150
151,152
152,153
152,154
153,154
155,156
155,157
156,157
158,159
159,160
159,161
160,161
163,164
163,165
164,165
165,166
167,168
168,169
169,170
169,171
170,171
172,173
173,174
175,176
176,177
176,178
177,178
177,179
178,179
181,182
181,183
182,183
182,184
183,184
187,188
188,189
188,190
189,190
189,191
190,191
193,194
195,196
196,197
196,198
197,198
197,199
198,199
201,202
203,204
204,205
204,206
205,206
205,207
206,207
209,210
211,212
212,213
212,214
213,214
213,215
214,215
217,218
217,219
218,219
220,221
220,222
221,222
221,223
222,223
225,226
225,227
226,227
226,228
227,228
231,232
231,233
232,233
233,234
233,235
234,235
237,238
237,239
238,239
239,240
239,241
240,241
242,243
244,245
246,247
247,248
247,249
248,249
248,250
249,250
252,253
252,254
253,254
255,256
255,257
256,257
256,258
257,258
260,261
262,263
262,264
263,264
264,265
264,266
265,266
268,269
268,270
269,270
270,271
270,272
271,272
273,274
275,276
277,278
278,279
278,280
279,280
279,281
280,281
283,284
285,286
286,287
286,288
287,288
289,290
289,291
289,292
289,293
290,291
292,293
294,295
294,296
295,296
298,299
300,301
301,302
301,303
302,303
304,305
304,306
305,306
307,308
309,310
310,311
310,312
311,312
313,314
313,315
314,315
317,318
317,319
318,319
318,320
319,320
321,322
323,324
324,325
326,327
326,328
326,329
327,328
327,329
328,329
330,331
332,333
333,334
334,335
334,336
335,336
335,337
336,337
336,338
337,338
341,342
343,344
344,345
345,346
345,347
346,347
346,348
347,348
347,349
348,349
352,353
353,354
355,356
355,357
357,358
358,359
358,360
359,360
361,362
361,363
362,363
365,366
365,367
367,368
368,369
368,370
369,370
371,372
373,374
374,375
374,376
375,376
377,378
-----nextToken-----
3,5,8,10,11,14,16,21,23,24,28,30,31,33,37,39,40,44,46,50,53,57,60,62,66,71,74,82,83,84,86,91,92,93,95,98,103,106,113,115,120,121,122,124,129,131,138,139,140,142,147,150,154,157,161,162,166,171,174,179,180,184,185,186,191,192,194,199,200,202,207,208,210,215,216,219,223,224,228,229,230,235,236,241,243,245,250,251,254,258,259,261,266,267,272,274,276,281,282,284,288,291,293,296,297,299,303,306,308,312,315,316,320,322,325,329,331,338,339,340,342,349,350,351,354,356,360,363,364,366,370,372,376,378
-----computeFrom-----
55,56
55,57
76,77
76,78
77,78
77,79
78,79
78,80
87,88
87,89
108,109
108,110
110,111
110,112
111,112
111,113
116,117
116,118
126,127
126,128
127,128
127,129
134,135
134,136
152,153
152,154
176,177
176,178
188,189
188,190
196,197
196,198
204,205
204,206
212,213
212,214
239,240
239,241
247,248
247,249
270,271
270,272
278,279
278,280
301,302
301,303
327,328
327,329
334,335
334,336
345,346
345,347
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
acpi_statusacpi_ev_execute_reg_method(union acpi_operand_object *region_obj, u32 function){	struct acpi_evaluate_info *info;	union acpi_operand_object *args[3];	union acpi_operand_object *region_obj2;	acpi_status status;	ACPI_FUNCTION_TRACE(ev_execute_reg_method);	region_obj2 = acpi_ns_get_secondary_object(region_obj);	if (!region_obj2) {		return_ACPI_STATUS(AE_NOT_EXIST);	}	if (region_obj2->extra.method_REG == NULL ||	    region_obj->region.handler == NULL ||	    !acpi_gbl_reg_methods_enabled) {		return_ACPI_STATUS(AE_OK);	}	/* _REG(DISCONNECT) should be paired with _REG(CONNECT) */	if ((function == ACPI_REG_CONNECT &&	     region_obj->common.flags & AOPOBJ_REG_CONNECTED) ||	    (function == ACPI_REG_DISCONNECT &&	     !(region_obj->common.flags & AOPOBJ_REG_CONNECTED))) {		return_ACPI_STATUS(AE_OK);	}	/* Allocate and initialize the evaluation information block */	info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info));	if (!info) {		return_ACPI_STATUS(AE_NO_MEMORY);	}	info->prefix_node = region_obj2->extra.method_REG;	info->relative_pathname = NULL;	info->parameters = args;	info->flags = ACPI_IGNORE_RETURN_VALUE;	/*	 * The _REG method has two arguments:	 *	 * arg0 - Integer:	 *  Operation region space ID Same value as region_obj->Region.space_id	 *	 * arg1 - Integer:	 *  connection status 1 for connecting the handler, 0 for disconnecting	 *  the handler (Passed as a parameter)	 */	args[0] =	    acpi_ut_create_integer_object((u64)region_obj->region.space_id);	if (!args[0]) {		status = AE_NO_MEMORY;		goto cleanup1;	}	args[1] = acpi_ut_create_integer_object((u64)function);	if (!args[1]) {		status = AE_NO_MEMORY;		goto cleanup2;	}	args[2] = NULL;		/* Terminate list */	/* Execute the method, no return value */	ACPI_DEBUG_EXEC(acpi_ut_display_init_pathname			(ACPI_TYPE_METHOD, info->prefix_node, NULL));	status = acpi_ns_evaluate(info);	acpi_ut_remove_reference(args[1]);	if (ACPI_FAILURE(status)) {		goto cleanup2;	}	if (function == ACPI_REG_CONNECT) {		region_obj->common.flags |= AOPOBJ_REG_CONNECTED;	} else {		region_obj->common.flags &= ~AOPOBJ_REG_CONNECTED;	}cleanup2:	acpi_ut_remove_reference(args[0]);cleanup1:	ACPI_FREE(info);	return_ACPI_STATUS(status);}
acpi_status
acpi_status
acpi_ev_execute_reg_method(union acpi_operand_object *region_obj, u32 function)
acpi_ev_execute_reg_method
union acpi_operand_object *region_obj
union acpi_operand_object
acpi_operand_object
*region_obj
*
region_obj
u32 function
u32
u32
function
function
{	struct acpi_evaluate_info *info;	union acpi_operand_object *args[3];	union acpi_operand_object *region_obj2;	acpi_status status;	ACPI_FUNCTION_TRACE(ev_execute_reg_method);	region_obj2 = acpi_ns_get_secondary_object(region_obj);	if (!region_obj2) {		return_ACPI_STATUS(AE_NOT_EXIST);	}	if (region_obj2->extra.method_REG == NULL ||	    region_obj->region.handler == NULL ||	    !acpi_gbl_reg_methods_enabled) {		return_ACPI_STATUS(AE_OK);	}	/* _REG(DISCONNECT) should be paired with _REG(CONNECT) */	if ((function == ACPI_REG_CONNECT &&	     region_obj->common.flags & AOPOBJ_REG_CONNECTED) ||	    (function == ACPI_REG_DISCONNECT &&	     !(region_obj->common.flags & AOPOBJ_REG_CONNECTED))) {		return_ACPI_STATUS(AE_OK);	}	/* Allocate and initialize the evaluation information block */	info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info));	if (!info) {		return_ACPI_STATUS(AE_NO_MEMORY);	}	info->prefix_node = region_obj2->extra.method_REG;	info->relative_pathname = NULL;	info->parameters = args;	info->flags = ACPI_IGNORE_RETURN_VALUE;	/*	 * The _REG method has two arguments:	 *	 * arg0 - Integer:	 *  Operation region space ID Same value as region_obj->Region.space_id	 *	 * arg1 - Integer:	 *  connection status 1 for connecting the handler, 0 for disconnecting	 *  the handler (Passed as a parameter)	 */	args[0] =	    acpi_ut_create_integer_object((u64)region_obj->region.space_id);	if (!args[0]) {		status = AE_NO_MEMORY;		goto cleanup1;	}	args[1] = acpi_ut_create_integer_object((u64)function);	if (!args[1]) {		status = AE_NO_MEMORY;		goto cleanup2;	}	args[2] = NULL;		/* Terminate list */	/* Execute the method, no return value */	ACPI_DEBUG_EXEC(acpi_ut_display_init_pathname			(ACPI_TYPE_METHOD, info->prefix_node, NULL));	status = acpi_ns_evaluate(info);	acpi_ut_remove_reference(args[1]);	if (ACPI_FAILURE(status)) {		goto cleanup2;	}	if (function == ACPI_REG_CONNECT) {		region_obj->common.flags |= AOPOBJ_REG_CONNECTED;	} else {		region_obj->common.flags &= ~AOPOBJ_REG_CONNECTED;	}cleanup2:	acpi_ut_remove_reference(args[0]);cleanup1:	ACPI_FREE(info);	return_ACPI_STATUS(status);}
struct acpi_evaluate_info *info;
struct acpi_evaluate_info *info;
struct acpi_evaluate_info
acpi_evaluate_info
*info
*
info
union acpi_operand_object *args[3];
union acpi_operand_object *args[3];
union acpi_operand_object
acpi_operand_object
*args[3]
*
args
[3]
3
union acpi_operand_object *region_obj2;
union acpi_operand_object *region_obj2;
union acpi_operand_object
acpi_operand_object
*region_obj2
*
region_obj2
acpi_status status;
acpi_status status;
acpi_status
acpi_status
status
status
ACPI_FUNCTION_TRACE(ev_execute_reg_method);
ACPI_FUNCTION_TRACE(ev_execute_reg_method);
ACPI_FUNCTION_TRACE
ACPI_FUNCTION_TRACE
(ev_execute_reg_method)
ev_execute_reg_method
ev_execute_reg_method
region_obj2 = acpi_ns_get_secondary_object(region_obj);
region_obj2 = acpi_ns_get_secondary_object(region_obj)
region_obj2
region_obj2
acpi_ns_get_secondary_object(region_obj)
acpi_ns_get_secondary_object
acpi_ns_get_secondary_object
region_obj
region_obj
if (!region_obj2) {		return_ACPI_STATUS(AE_NOT_EXIST);	}
!region_obj2
region_obj2
region_obj2
{		return_ACPI_STATUS(AE_NOT_EXIST);	}
return_ACPI_STATUS(AE_NOT_EXIST);
return_ACPI_STATUS(AE_NOT_EXIST);
return_ACPI_STATUS
return_ACPI_STATUS
(AE_NOT_EXIST)
AE_NOT_EXIST
AE_NOT_EXIST
if (region_obj2->extra.method_REG == NULL ||	    region_obj->region.handler == NULL ||	    !acpi_gbl_reg_methods_enabled) {		return_ACPI_STATUS(AE_OK);	}
region_obj2->extra.method_REG == NULL ||	    region_obj->region.handler == NULL ||	    !acpi_gbl_reg_methods_enabled
region_obj2->extra.method_REG == NULL ||	    region_obj->region.handler == NULL
region_obj2->extra.method_REG == NULL
region_obj2->extra.method_REG
region_obj2->extra
region_obj2
region_obj2
extra
method_REG
NULL
NULL
region_obj->region.handler == NULL
region_obj->region.handler
region_obj->region
region_obj
region_obj
region
handler
NULL
NULL
!acpi_gbl_reg_methods_enabled
acpi_gbl_reg_methods_enabled
acpi_gbl_reg_methods_enabled
{		return_ACPI_STATUS(AE_OK);	}
return_ACPI_STATUS(AE_OK);
return_ACPI_STATUS(AE_OK);
return_ACPI_STATUS
return_ACPI_STATUS
(AE_OK)
AE_OK
AE_OK
if ((function == ACPI_REG_CONNECT &&	     region_obj->common.flags & AOPOBJ_REG_CONNECTED) ||	    (function == ACPI_REG_DISCONNECT &&	     !(region_obj->common.flags & AOPOBJ_REG_CONNECTED))) {		return_ACPI_STATUS(AE_OK);	}
(function == ACPI_REG_CONNECT &&	     region_obj->common.flags & AOPOBJ_REG_CONNECTED) ||	    (function == ACPI_REG_DISCONNECT &&	     !(region_obj->common.flags & AOPOBJ_REG_CONNECTED))
(function == ACPI_REG_CONNECT &&	     region_obj->common.flags & AOPOBJ_REG_CONNECTED)
function == ACPI_REG_CONNECT &&	     region_obj->common.flags & AOPOBJ_REG_CONNECTED
function == ACPI_REG_CONNECT
function
function
ACPI_REG_CONNECT
ACPI_REG_CONNECT
region_obj->common.flags & AOPOBJ_REG_CONNECTED
region_obj->common.flags
region_obj->common
region_obj
region_obj
common
flags
AOPOBJ_REG_CONNECTED
AOPOBJ_REG_CONNECTED
(function == ACPI_REG_DISCONNECT &&	     !(region_obj->common.flags & AOPOBJ_REG_CONNECTED))
function == ACPI_REG_DISCONNECT &&	     !(region_obj->common.flags & AOPOBJ_REG_CONNECTED)
function == ACPI_REG_DISCONNECT
function
function
ACPI_REG_DISCONNECT
ACPI_REG_DISCONNECT
!(region_obj->common.flags & AOPOBJ_REG_CONNECTED)
(region_obj->common.flags & AOPOBJ_REG_CONNECTED)
region_obj->common.flags & AOPOBJ_REG_CONNECTED
region_obj->common.flags
region_obj->common
region_obj
region_obj
common
flags
AOPOBJ_REG_CONNECTED
AOPOBJ_REG_CONNECTED
{		return_ACPI_STATUS(AE_OK);	}
return_ACPI_STATUS(AE_OK);
return_ACPI_STATUS(AE_OK);
return_ACPI_STATUS
return_ACPI_STATUS
(AE_OK)
AE_OK
AE_OK
info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info));
info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info))
info
info
ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info))
ACPI_ALLOCATE_ZEROED
ACPI_ALLOCATE_ZEROED
sizeof(struct acpi_evaluate_info)
struct acpi_evaluate_info
struct acpi_evaluate_info
acpi_evaluate_info

if (!info) {		return_ACPI_STATUS(AE_NO_MEMORY);	}
!info
info
info
{		return_ACPI_STATUS(AE_NO_MEMORY);	}
return_ACPI_STATUS(AE_NO_MEMORY);
return_ACPI_STATUS(AE_NO_MEMORY);
return_ACPI_STATUS
return_ACPI_STATUS
(AE_NO_MEMORY)
AE_NO_MEMORY
AE_NO_MEMORY
info->prefix_node = region_obj2->extra.method_REG;
info->prefix_node = region_obj2->extra.method_REG
info->prefix_node
info
info
prefix_node
region_obj2->extra.method_REG
region_obj2->extra
region_obj2
region_obj2
extra
method_REG
info->relative_pathname = NULL;
info->relative_pathname = NULL
info->relative_pathname
info
info
relative_pathname
NULL
NULL
info->parameters = args;
info->parameters = args
info->parameters
info
info
parameters
args
args
info->flags = ACPI_IGNORE_RETURN_VALUE;
info->flags = ACPI_IGNORE_RETURN_VALUE
info->flags
info
info
flags
ACPI_IGNORE_RETURN_VALUE
ACPI_IGNORE_RETURN_VALUE
args[0] =	    acpi_ut_create_integer_object((u64)region_obj->region.space_id);
args[0] =	    acpi_ut_create_integer_object((u64)region_obj->region.space_id)
args[0]
args
args
0
acpi_ut_create_integer_object((u64)region_obj->region.space_id)
acpi_ut_create_integer_object
acpi_ut_create_integer_object
(u64)region_obj->region.space_id
u64
u64
u64

region_obj->region.space_id
region_obj->region
region_obj
region_obj
region
space_id
if (!args[0]) {		status = AE_NO_MEMORY;		goto cleanup1;	}
!args[0]
args[0]
args
args
0
{		status = AE_NO_MEMORY;		goto cleanup1;	}
status = AE_NO_MEMORY;
status = AE_NO_MEMORY
status
status
AE_NO_MEMORY
AE_NO_MEMORY
goto cleanup1;
cleanup1
args[1] = acpi_ut_create_integer_object((u64)function);
args[1] = acpi_ut_create_integer_object((u64)function)
args[1]
args
args
1
acpi_ut_create_integer_object((u64)function)
acpi_ut_create_integer_object
acpi_ut_create_integer_object
(u64)function
u64
u64
u64

function
function
if (!args[1]) {		status = AE_NO_MEMORY;		goto cleanup2;	}
!args[1]
args[1]
args
args
1
{		status = AE_NO_MEMORY;		goto cleanup2;	}
status = AE_NO_MEMORY;
status = AE_NO_MEMORY
status
status
AE_NO_MEMORY
AE_NO_MEMORY
goto cleanup2;
cleanup2
args[2] = NULL;
args[2] = NULL
args[2]
args
args
2
NULL
NULL
ACPI_DEBUG_EXEC(acpi_ut_display_init_pathname			(ACPI_TYPE_METHOD, info->prefix_node, NULL));
ACPI_DEBUG_EXEC(acpi_ut_display_init_pathname			(ACPI_TYPE_METHOD, info->prefix_node, NULL))
ACPI_DEBUG_EXEC
ACPI_DEBUG_EXEC
acpi_ut_display_init_pathname			(ACPI_TYPE_METHOD, info->prefix_node, NULL)
acpi_ut_display_init_pathname
acpi_ut_display_init_pathname
ACPI_TYPE_METHOD
ACPI_TYPE_METHOD
info->prefix_node
info
info
prefix_node
NULL
NULL
status = acpi_ns_evaluate(info);
status = acpi_ns_evaluate(info)
status
status
acpi_ns_evaluate(info)
acpi_ns_evaluate
acpi_ns_evaluate
info
info
acpi_ut_remove_reference(args[1]);
acpi_ut_remove_reference(args[1])
acpi_ut_remove_reference
acpi_ut_remove_reference
args[1]
args
args
1
if (ACPI_FAILURE(status)) {		goto cleanup2;	}
ACPI_FAILURE(status)
ACPI_FAILURE
ACPI_FAILURE
status
status
{		goto cleanup2;	}
goto cleanup2;
cleanup2
if (function == ACPI_REG_CONNECT) {		region_obj->common.flags |= AOPOBJ_REG_CONNECTED;	} else {		region_obj->common.flags &= ~AOPOBJ_REG_CONNECTED;	}
function == ACPI_REG_CONNECT
function
function
ACPI_REG_CONNECT
ACPI_REG_CONNECT
{		region_obj->common.flags |= AOPOBJ_REG_CONNECTED;	}
region_obj->common.flags |= AOPOBJ_REG_CONNECTED;
region_obj->common.flags |= AOPOBJ_REG_CONNECTED
region_obj->common.flags
region_obj->common
region_obj
region_obj
common
flags
AOPOBJ_REG_CONNECTED
AOPOBJ_REG_CONNECTED
{		region_obj->common.flags &= ~AOPOBJ_REG_CONNECTED;	}
region_obj->common.flags &= ~AOPOBJ_REG_CONNECTED;
region_obj->common.flags &= ~AOPOBJ_REG_CONNECTED
region_obj->common.flags
region_obj->common
region_obj
region_obj
common
flags
~AOPOBJ_REG_CONNECTED
AOPOBJ_REG_CONNECTED
AOPOBJ_REG_CONNECTED
cleanup2:	acpi_ut_remove_reference(args[0]);
cleanup2
acpi_ut_remove_reference(args[0]);
acpi_ut_remove_reference(args[0])
acpi_ut_remove_reference
acpi_ut_remove_reference
args[0]
args
args
0
cleanup1:	ACPI_FREE(info);
cleanup1
ACPI_FREE(info);
ACPI_FREE(info)
ACPI_FREE
ACPI_FREE
info
info
return_ACPI_STATUS(status);
return_ACPI_STATUS(status)
return_ACPI_STATUS
return_ACPI_STATUS
status
status
-----joern-----
(37,82,0)
(10,81,0)
(22,88,0)
(137,87,0)
(109,108,0)
(97,185,0)
(119,129,0)
(67,113,0)
(80,116,0)
(64,185,0)
(11,188,0)
(104,46,0)
(60,156,0)
(13,119,0)
(40,71,0)
(85,76,0)
(144,101,0)
(147,188,0)
(181,93,0)
(168,97,0)
(148,0,0)
(122,13,0)
(25,109,0)
(22,137,0)
(77,131,0)
(128,103,0)
(22,160,0)
(149,188,0)
(160,131,0)
(81,188,0)
(127,139,0)
(114,188,0)
(191,172,0)
(181,66,0)
(78,99,0)
(157,99,0)
(144,172,0)
(21,116,0)
(81,10,0)
(27,188,0)
(175,90,0)
(199,169,0)
(52,77,0)
(100,96,0)
(194,44,0)
(37,151,0)
(88,87,0)
(118,132,0)
(185,188,0)
(189,88,0)
(89,35,0)
(45,193,0)
(163,81,0)
(3,136,0)
(193,124,0)
(5,87,0)
(6,165,0)
(185,97,0)
(130,4,0)
(176,156,0)
(96,129,0)
(111,15,0)
(136,188,0)
(182,79,0)
(186,108,0)
(99,116,0)
(66,164,0)
(135,188,0)
(131,15,0)
(106,156,0)
(56,188,0)
(22,141,0)
(21,145,0)
(98,141,0)
(57,77,0)
(132,38,0)
(66,181,0)
(20,111,0)
(39,188,0)
(66,139,0)
(103,47,0)
(94,103,0)
(99,129,0)
(115,190,0)
(180,188,0)
(121,188,0)
(159,36,0)
(179,130,0)
(55,79,0)
(132,65,0)
(173,180,0)
(73,58,0)
(37,110,0)
(87,58,0)
(145,109,0)
(178,172,0)
(70,35,0)
(93,181,0)
(87,188,0)
(34,81,0)
(90,44,0)
(131,188,0)
(32,132,0)
(116,99,0)
(75,35,0)
(54,111,0)
(196,92,0)
(61,91,0)
(113,81,0)
(154,96,0)
(155,79,0)
(115,188,0)
(137,39,0)
(170,87,0)
(96,46,0)
(187,137,0)
(71,113,0)
(13,31,0)
(164,66,0)
(44,90,0)
(172,129,0)
(180,90,0)
(44,81,0)
(28,69,0)
(112,5,0)
(30,188,0)
(140,173,0)
(24,11,0)
(48,188,0)
(126,163,0)
(110,37,0)
(25,65,0)
(143,188,0)
(47,103,0)
(167,31,0)
(165,169,0)
(17,137,0)
(15,131,0)
(166,113,0)
(102,188,0)
(158,188,0)
(4,188,0)
(113,71,0)
(71,93,0)
(139,66,0)
(65,25,0)
(103,131,0)
(184,141,0)
(58,73,0)
(22,173,0)
(4,82,0)
(16,164,0)
(101,144,0)
(26,5,0)
(74,190,0)
(152,198,0)
(130,142,0)
(171,63,0)
(105,188,0)
(11,87,0)
(50,21,0)
(141,4,0)
(88,147,0)
(51,188,0)
(49,76,0)
(138,144,0)
(169,188,0)
(76,38,0)
(65,101,0)
(161,188,0)
(111,38,0)
(192,195,0)
(91,59,0)
(0,87,0)
(151,195,0)
(86,130,0)
(109,145,0)
(53,119,0)
(62,0,0)
(108,109,0)
(23,28,0)
(145,21,0)
(82,37,0)
(117,22,0)
(18,190,0)
(133,101,0)
(153,88,0)
(119,13,0)
(43,93,0)
(90,180,0)
(123,91,0)
(70,188,0)
(2,147,0)
(41,173,0)
(73,8,0)
(190,42,0)
(174,165,0)
(172,144,0)
(195,151,0)
(22,165,0)
(22,0,0)
(101,65,0)
(116,21,0)
(151,37,0)
(58,87,0)
(46,96,0)
(139,46,0)
(31,7,0)
(46,139,0)
(79,182,0)
(109,25,0)
(150,44,0)
(108,38,0)
(19,10,0)
(156,129,0)
(173,87,0)
(5,35,0)
(35,70,0)
(195,129,0)
(14,59,0)
(142,130,0)
(65,132,0)
(72,106,0)
(106,22,0)
(0,136,0)
(105,77,0)
(31,13,0)
(182,188,0)
(107,115,0)
(134,119,0)
(35,5,0)
(15,111,0)
(95,188,0)
(82,4,0)
(10,129,0)
(1,151,0)
(68,160,0)
(183,195,0)
(120,125,0)
(83,108,0)
(198,185,0)
(22,162,0)
(156,106,0)
(111,54,0)
(97,87,0)
(93,71,0)
(8,73,0)
(5,180,0)
(146,158,0)
(36,197,0)
(63,87,0)
(33,188,0)
(177,42,0)
(29,160,0)
(77,105,0)
(115,91,0)
(115,185,0)
(9,39,0)
(92,12,0)
(79,4,0)
(111,38,1)
(132,32,1)
(172,191,1)
(112,75,1)
(77,52,1)
(10,19,1)
(22,173,1)
(139,46,1)
(50,116,1)
(92,196,1)
(174,47,1)
(111,20,1)
(155,120,1)
(170,25,1)
(87,58,1)
(79,4,1)
(64,70,1)
(90,44,1)
(31,13,1)
(163,126,1)
(128,94,1)
(190,18,1)
(47,103,1)
(70,35,1)
(79,55,1)
(5,26,1)
(68,142,1)
(107,11,1)
(105,77,1)
(181,93,1)
(81,10,1)
(163,81,1)
(181,66,1)
(185,97,1)
(136,3,1)
(194,173,1)
(137,17,1)
(106,156,1)
(155,14,1)
(44,81,1)
(41,28,1)
(20,160,1)
(127,46,1)
(140,41,1)
(148,39,1)
(157,108,1)
(103,131,1)
(169,199,1)
(192,183,1)
(71,40,1)
(187,180,1)
(156,176,1)
(199,165,1)
(166,163,1)
(32,118,1)
(106,72,1)
(115,185,1)
(13,119,1)
(142,130,1)
(66,164,1)
(99,129,1)
(5,87,1)
(170,92,1)
(101,144,1)
(98,147,1)
(3,0,1)
(24,177,1)
(154,100,1)
(93,71,1)
(73,8,1)
(145,21,1)
(36,159,1)
(141,184,1)
(178,132,1)
(103,128,1)
(22,160,1)
(131,15,1)
(94,131,1)
(83,186,1)
(53,134,1)
(109,145,1)
(10,129,1)
(137,87,1)
(120,198,1)
(119,129,1)
(14,91,1)
(113,67,1)
(179,86,1)
(37,151,1)
(22,88,1)
(18,74,1)
(97,87,1)
(11,87,1)
(108,83,1)
(113,81,1)
(123,47,1)
(159,163,1)
(118,193,1)
(165,6,1)
(155,31,1)
(86,4,1)
(116,99,1)
(195,192,1)
(171,87,1)
(176,60,1)
(15,111,1)
(77,131,1)
(96,154,1)
(173,87,1)
(23,63,1)
(144,138,1)
(25,109,1)
(147,2,1)
(11,24,1)
(191,178,1)
(46,104,1)
(80,99,1)
(65,132,1)
(152,105,1)
(158,146,1)
(126,81,1)
(109,108,1)
(43,71,1)
(155,22,1)
(37,110,1)
(119,53,1)
(89,5,1)
(173,140,1)
(66,139,1)
(19,34,1)
(166,36,1)
(97,168,1)
(175,44,1)
(100,93,1)
(40,113,1)
(63,171,1)
(21,50,1)
(182,79,1)
(26,112,1)
(25,65,1)
(130,179,1)
(150,194,1)
(62,148,1)
(35,89,1)
(196,25,1)
(9,137,1)
(13,122,1)
(39,9,1)
(0,87,1)
(29,68,1)
(76,85,1)
(17,187,1)
(52,57,1)
(21,116,1)
(180,90,1)
(58,73,1)
(96,129,1)
(61,123,1)
(82,37,1)
(46,96,1)
(138,172,1)
(116,80,1)
(139,127,1)
(16,139,1)
(72,156,1)
(90,175,1)
(111,54,1)
(91,61,1)
(198,152,1)
(164,16,1)
(24,182,1)
(184,98,1)
(76,38,1)
(22,137,1)
(5,180,1)
(172,129,1)
(115,107,1)
(4,82,1)
(22,0,1)
(101,133,1)
(88,87,1)
(45,181,1)
(115,190,1)
(160,29,1)
(93,43,1)
(1,195,1)
(22,117,1)
(34,158,1)
(108,38,1)
(132,38,1)
(99,78,1)
(189,153,1)
(117,106,1)
(151,195,1)
(74,142,1)
(177,190,1)
(67,166,1)
(6,174,1)
(85,49,1)
(88,189,1)
(130,4,1)
(35,5,1)
(168,64,1)
(167,13,1)
(122,119,1)
(104,96,1)
(71,113,1)
(49,198,1)
(186,65,1)
(153,136,1)
(2,88,1)
(193,45,1)
(41,63,1)
(31,167,1)
(115,91,1)
(84,115,1)
(60,76,1)
(55,155,1)
(198,185,1)
(44,150,1)
(73,170,1)
(151,1,1)
(75,169,1)
(195,129,1)
(28,23,1)
(144,172,1)
(133,144,1)
(78,157,1)
(63,87,1)
(57,185,1)
(183,141,1)
(156,129,1)
(22,141,1)
(134,76,1)
(22,165,1)
(0,62,1)
(118,181,1)
(65,101,1)
(25,65,2)
(4,82,2)
(15,111,2)
(22,88,2)
(174,47,2)
(53,76,2)
(74,142,2)
(122,76,2)
(134,76,2)
(182,142,2)
(47,103,2)
(47,142,2)
(155,142,2)
(198,185,2)
(139,93,2)
(99,108,2)
(70,47,2)
(173,87,2)
(109,65,2)
(5,87,2)
(195,129,2)
(156,76,2)
(65,101,2)
(123,47,2)
(101,144,2)
(138,132,2)
(18,142,2)
(78,108,2)
(35,47,2)
(31,13,2)
(165,47,2)
(157,108,2)
(25,109,2)
(112,47,2)
(182,79,2)
(22,0,2)
(58,73,2)
(115,190,2)
(16,139,2)
(46,93,2)
(61,47,2)
(133,132,2)
(50,108,2)
(181,93,2)
(111,38,2)
(91,47,2)
(144,172,2)
(85,198,2)
(15,142,2)
(37,151,2)
(22,160,2)
(199,47,2)
(13,76,2)
(145,21,2)
(154,93,2)
(80,108,2)
(116,108,2)
(81,10,2)
(142,130,2)
(64,47,2)
(109,108,2)
(22,173,2)
(66,93,2)
(65,132,2)
(145,108,2)
(106,156,2)
(10,129,2)
(68,142,2)
(186,65,2)
(5,47,2)
(20,142,2)
(105,47,2)
(21,116,2)
(108,65,2)
(130,4,2)
(22,137,2)
(193,181,2)
(21,108,2)
(97,47,2)
(137,87,2)
(115,91,2)
(71,113,2)
(105,77,2)
(96,93,2)
(185,97,2)
(190,142,2)
(11,87,2)
(127,93,2)
(116,99,2)
(66,164,2)
(73,8,2)
(35,5,2)
(83,65,2)
(57,47,2)
(13,119,2)
(92,25,2)
(164,139,2)
(176,76,2)
(88,87,2)
(55,142,2)
(128,142,2)
(22,165,2)
(22,141,2)
(168,47,2)
(26,47,2)
(82,37,2)
(0,87,2)
(46,96,2)
(22,76,2)
(90,44,2)
(103,142,2)
(156,129,2)
(31,76,2)
(28,63,2)
(97,87,2)
(79,4,2)
(119,129,2)
(120,198,2)
(104,93,2)
(45,181,2)
(77,47,2)
(117,76,2)
(198,47,2)
(94,142,2)
(23,63,2)
(93,71,2)
(89,47,2)
(37,110,2)
(152,47,2)
(169,47,2)
(106,76,2)
(75,47,2)
(76,38,2)
(151,195,2)
(5,180,2)
(49,198,2)
(109,145,2)
(87,58,2)
(36,163,2)
(160,142,2)
(60,76,2)
(101,132,2)
(111,54,2)
(185,47,2)
(70,35,2)
(163,81,2)
(79,142,2)
(66,139,2)
(72,76,2)
(111,142,2)
(172,132,2)
(76,198,2)
(103,131,2)
(191,132,2)
(108,38,2)
(167,76,2)
(196,25,2)
(100,93,2)
(77,131,2)
(159,163,2)
(29,142,2)
(96,129,2)
(14,47,2)
(44,81,2)
(119,76,2)
(6,47,2)
(139,46,2)
(178,132,2)
(132,38,2)
(52,47,2)
(131,15,2)
(99,129,2)
(144,132,2)
(172,129,2)
(180,90,2)
(115,185,2)
(177,142,2)
(181,66,2)
(63,87,2)
(113,81,2)
(131,142,2)
-----------------------------------
(0,info->parameters)
(1,space_id)
(2,ACPI_IGNORE_RETURN_VALUE)
(3,args)
(4,args[0] =\n\\n\\t    acpi_ut_create_integer_object((u64)
(5,info->prefix_node)
(6,2)
(7,)
(8,struct acpi_evaluate_info)
(9,NULL)
(10,acpi_ns_get_secondary_object(region_obj)
(11,ACPI_FREE(info)
(12,)
(13,region_obj->common.flags)
(14,goto cleanup2;)
(15,acpi_ut_create_integer_object((u64)
(16,acpi_gbl_reg_methods_enabled)
(17,relative_pathname)
(18,AE_NO_MEMORY)
(19,region_obj)
(20,function)
(21,region_obj->common.flags & AOPOBJ_REG_CONNECTED)
(22,region_obj->common.flags |= AOPOBJ_REG_CONNECTED)
(23,AE_NO_MEMORY)
(24,info)
(25,(function == ACPI_REG_CONNECT &&\n\\n\\t     region_obj->common.flags & AOPOBJ_REG_CONNECTED)
(26,prefix_node)
(27,status)
(28,return_ACPI_STATUS(AE_NO_MEMORY)
(29,1)
(30,if (!info)
(31,region_obj->common.flags &= ~AOPOBJ_REG_CONNECTED)
(32,ACPI_REG_CONNECT)
(33,if (region_obj2->extra.method_REG == NULL ||\n\\n\\t    region_obj->region.handler == NULL ||\n\\n\\t    !acpi_gbl_reg_methods_enabled)
(34,region_obj2)
(35,acpi_ut_display_init_pathname\n\\n\\t\\t\\t(ACPI_TYPE_METHOD, info->prefix_node, NULL)
(36,return_ACPI_STATUS(AE_NOT_EXIST)
(37,(u64)
(38,u32 function)
(39,info->relative_pathname = NULL)
(40,method_REG)
(41,info)
(42,)
(43,NULL)
(44,region_obj2->extra)
(45,AE_OK)
(46,region_obj->region.handler)
(47,!args[1])
(48,region_obj2)
(49,function)
(50,AOPOBJ_REG_CONNECTED)
(51,cleanup1:)
(52,1)
(53,common)
(54,u64)
(55,0)
(56,if (ACPI_FAILURE(status)
(57,args)
(58,ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info)
(59,)
(60,region_obj)
(61,AE_NO_MEMORY)
(62,parameters)
(63,!info)
(64,status)
(65,function == ACPI_REG_CONNECT &&\n\\n\\t     region_obj->common.flags & AOPOBJ_REG_CONNECTED)
(66,region_obj->region.handler == NULL ||\n\\n\\t    !acpi_gbl_reg_methods_enabled)
(67,extra)
(68,args)
(69,)
(70,ACPI_DEBUG_EXEC(acpi_ut_display_init_pathname\n\\n\\t\\t\\t(ACPI_TYPE_METHOD, info->prefix_node, NULL)
(71,region_obj2->extra.method_REG)
(72,flags)
(73,sizeof(struct acpi_evaluate_info)
(74,status)
(75,ACPI_TYPE_METHOD)
(76,function == ACPI_REG_CONNECT)
(77,args[1])
(78,common)
(79,args[0])
(80,flags)
(81,region_obj2 = acpi_ns_get_secondary_object(region_obj)
(82,acpi_ut_create_integer_object((u64)
(83,ACPI_REG_DISCONNECT)
(84,RET)
(85,ACPI_REG_CONNECT)
(86,args)
(87,info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_evaluate_info)
(88,info->flags)
(89,NULL)
(90,region_obj2->extra.method_REG)
(91,status = AE_NO_MEMORY)
(92,return_ACPI_STATUS(AE_OK)
(93,region_obj2->extra.method_REG == NULL)
(94,args)
(95,cleanup2:)
(96,region_obj->region)
(97,acpi_ns_evaluate(info)
(98,args)
(99,region_obj->common)
(100,region_obj)
(101,region_obj->common.flags & AOPOBJ_REG_CONNECTED)
(102,if ((function == ACPI_REG_CONNECT &&\n\\n\\t     region_obj->common.flags & AOPOBJ_REG_CONNECTED)
(103,args[1])
(104,handler)
(105,acpi_ut_remove_reference(args[1])
(106,region_obj->common.flags)
(107,status)
(108,function == ACPI_REG_DISCONNECT)
(109,function == ACPI_REG_DISCONNECT &&\n\\n\\t     !(region_obj->common.flags & AOPOBJ_REG_CONNECTED)
(110,u64)
(111,(u64)
(112,info)
(113,region_obj2->extra)
(114,if (!args[1])
(115,return_ACPI_STATUS(status)
(116,region_obj->common.flags)
(117,AOPOBJ_REG_CONNECTED)
(118,function)
(119,region_obj->common)
(120,goto cleanup2;)
(121,info)
(122,flags)
(123,status)
(124,)
(125,)
(126,region_obj2)
(127,NULL)
(128,1)
(129,union acpi_operand_object *region_obj)
(130,args[0])
(131,args[1] = acpi_ut_create_integer_object((u64)
(132,function == ACPI_REG_CONNECT)
(133,AOPOBJ_REG_CONNECTED)
(134,region_obj)
(135,if (function == ACPI_REG_CONNECT)
(136,info->parameters = args)
(137,info->relative_pathname)
(138,flags)
(139,region_obj->region.handler == NULL)
(140,prefix_node)
(141,args[0])
(142,!args[0])
(143,args)
(144,region_obj->common.flags)
(145,!(region_obj->common.flags & AOPOBJ_REG_CONNECTED)
(146,ev_execute_reg_method)
(147,info->flags = ACPI_IGNORE_RETURN_VALUE)
(148,info)
(149,if (!args[0])
(150,extra)
(151,region_obj->region.space_id)
(152,status)
(153,info)
(154,region)
(155,args)
(156,region_obj->common)
(157,region_obj)
(158,ACPI_FUNCTION_TRACE(ev_execute_reg_method)
(159,AE_NOT_EXIST)
(160,args[1])
(161,if (!region_obj2)
(162,)
(163,!region_obj2)
(164,!acpi_gbl_reg_methods_enabled)
(165,args[2])
(166,region_obj2)
(167,~AOPOBJ_REG_CONNECTED)
(168,info)
(169,args[2] = NULL)
(170,info)
(171,info)
(172,region_obj->common)
(173,info->prefix_node)
(174,args)
(175,method_REG)
(176,common)
(177,goto cleanup1;)
(178,region_obj)
(179,0)
(180,info->prefix_node = region_obj2->extra.method_REG)
(181,region_obj2->extra.method_REG == NULL ||\n\\n\\t    region_obj->region.handler == NULL ||\n\\n\\t    !acpi_gbl_reg_methods_enabled)
(182,acpi_ut_remove_reference(args[0])
(183,region_obj)
(184,0)
(185,status = acpi_ns_evaluate(info)
(186,function)
(187,info)
(188,)
(189,flags)
(190,status = AE_NO_MEMORY)
(191,common)
(192,region)
(193,return_ACPI_STATUS(AE_OK)
(194,region_obj2)
(195,region_obj->region)
(196,AE_OK)
(197,)
(198,ACPI_FAILURE(status)
(199,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^