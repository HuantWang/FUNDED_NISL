-----label-----
1
-----code-----
static int setup_mmio_scc (struct pci_dev *dev, const char *name)
{
	unsigned long ctl_base = pci_resource_start(dev, 0);
	unsigned long dma_base = pci_resource_start(dev, 1);
	unsigned long ctl_size = pci_resource_len(dev, 0);
	unsigned long dma_size = pci_resource_len(dev, 1);
	void __iomem *ctl_addr;
	void __iomem *dma_addr;
	int i, ret;

	for (i = 0; i < MAX_HWIFS; i++) {
		if (scc_ports[i].ctl == 0)
			break;
	}
	if (i >= MAX_HWIFS)
		return -ENOMEM;

	ret = pci_request_selected_regions(dev, (1 << 2) - 1, name);
	if (ret < 0) {
		printk(KERN_ERR "%s: can't reserve resources\n", name);
		return ret;
	}

	if ((ctl_addr = ioremap(ctl_base, ctl_size)) == NULL)
		goto fail_0;

	if ((dma_addr = ioremap(dma_base, dma_size)) == NULL)
		goto fail_1;

	pci_set_master(dev);
	scc_ports[i].ctl = (unsigned long)ctl_addr;
	scc_ports[i].dma = (unsigned long)dma_addr;
	pci_set_drvdata(dev, (void *) &scc_ports[i]);

	return 1;

 fail_1:
	iounmap(ctl_addr);
 fail_0:
	return -ENOMEM;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
16,29
16,30
16,31
16,32
16,33
16,34
16,35
16,36
16,37
16,38
16,39
16,40
17,18
18,19
18,20
20,21
20,22
22,23
23,24
23,25
23,26
24,25
26,27
29,30
30,31
30,32
32,33
32,34
34,35
35,36
35,37
35,38
36,37
38,39
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
56,57
56,58
58,59
59,60
59,61
59,62
60,61
62,63
65,66
66,67
66,68
68,69
70,71
71,72
72,73
73,74
75,76
76,77
76,78
78,79
80,81
81,82
82,83
83,84
85,86
86,87
86,88
86,89
88,89
90,91
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
98,99
98,100
99,100
101,102
103,104
104,105
106,107
107,108
107,109
108,109
108,110
109,110
109,111
110,111
110,112
111,112
113,114
118,119
118,120
119,120
119,121
120,121
122,123
124,125
125,126
126,127
128,129
129,130
129,131
130,131
132,133
132,134
132,135
132,136
133,134
135,136
137,138
137,139
138,139
139,140
139,141
143,144
145,146
145,147
146,147
146,148
147,148
150,151
150,152
151,152
152,153
153,154
155,156
155,157
156,157
156,158
157,158
158,159
158,160
159,160
161,162
161,163
161,164
162,163
164,165
166,167
168,169
170,171
172,173
172,174
173,174
173,175
174,175
175,176
175,177
176,177
178,179
178,180
178,181
179,180
181,182
183,184
185,186
187,188
189,190
190,191
190,192
191,192
193,194
195,196
196,197
196,198
197,198
197,199
198,199
198,200
199,200
201,202
204,205
204,206
205,206
205,207
208,209
210,211
211,212
211,213
212,213
212,214
213,214
213,215
214,215
216,217
219,220
219,221
220,221
220,222
223,224
225,226
226,227
226,228
226,229
227,228
229,230
231,232
231,233
232,233
232,234
234,235
236,237
237,238
237,239
238,239
240,241
242,243
244,245
244,246
246,247
247,248
247,249
248,249
250,251
251,252
253,254
253,255
255,256
256,257
257,258
-----nextToken-----
2,4,7,9,10,12,14,15,19,21,25,27,28,31,33,37,39,40,43,45,49,51,52,55,57,61,63,64,67,69,74,77,79,84,87,89,91,96,97,100,102,105,112,114,115,116,117,121,123,127,131,134,136,140,141,142,144,148,149,154,160,163,165,167,169,171,177,180,182,184,186,188,192,194,200,202,203,206,207,209,215,217,218,221,222,224,228,230,233,235,239,241,243,245,249,252,254,258
-----computeFrom-----
94,95
94,96
98,99
98,100
108,109
108,110
119,120
119,121
129,130
129,131
137,138
137,139
139,140
139,141
146,147
146,148
156,157
156,158
158,159
158,160
173,174
173,175
175,176
175,177
196,197
196,198
211,212
211,213
-----guardedBy-----
148,154
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ProblemStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ProblemStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;LabelStatement;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static int setup_mmio_scc (struct pci_dev *dev, const char *name){	unsigned long ctl_base = pci_resource_start(dev, 0);	unsigned long dma_base = pci_resource_start(dev, 1);	unsigned long ctl_size = pci_resource_len(dev, 0);	unsigned long dma_size = pci_resource_len(dev, 1);	void __iomem *ctl_addr;	void __iomem *dma_addr;	int i, ret;	for (i = 0; i < MAX_HWIFS; i++) {		if (scc_ports[i].ctl == 0)			break;	}	if (i >= MAX_HWIFS)		return -ENOMEM;	ret = pci_request_selected_regions(dev, (1 << 2) - 1, name);	if (ret < 0) {		printk(KERN_ERR "%s: can't reserve resources\n", name);		return ret;	}	if ((ctl_addr = ioremap(ctl_base, ctl_size)) == NULL)		goto fail_0;	if ((dma_addr = ioremap(dma_base, dma_size)) == NULL)		goto fail_1;	pci_set_master(dev);	scc_ports[i].ctl = (unsigned long)ctl_addr;	scc_ports[i].dma = (unsigned long)dma_addr;	pci_set_drvdata(dev, (void *) &scc_ports[i]);	return 1; fail_1:	iounmap(ctl_addr); fail_0:	return -ENOMEM;}
static int
setup_mmio_scc (struct pci_dev *dev, const char *name)
setup_mmio_scc
struct pci_dev *dev
struct pci_dev
pci_dev
*dev
*
dev
const char *name
const char
*name
*
name
{	unsigned long ctl_base = pci_resource_start(dev, 0);	unsigned long dma_base = pci_resource_start(dev, 1);	unsigned long ctl_size = pci_resource_len(dev, 0);	unsigned long dma_size = pci_resource_len(dev, 1);	void __iomem *ctl_addr;	void __iomem *dma_addr;	int i, ret;	for (i = 0; i < MAX_HWIFS; i++) {		if (scc_ports[i].ctl == 0)			break;	}	if (i >= MAX_HWIFS)		return -ENOMEM;	ret = pci_request_selected_regions(dev, (1 << 2) - 1, name);	if (ret < 0) {		printk(KERN_ERR "%s: can't reserve resources\n", name);		return ret;	}	if ((ctl_addr = ioremap(ctl_base, ctl_size)) == NULL)		goto fail_0;	if ((dma_addr = ioremap(dma_base, dma_size)) == NULL)		goto fail_1;	pci_set_master(dev);	scc_ports[i].ctl = (unsigned long)ctl_addr;	scc_ports[i].dma = (unsigned long)dma_addr;	pci_set_drvdata(dev, (void *) &scc_ports[i]);	return 1; fail_1:	iounmap(ctl_addr); fail_0:	return -ENOMEM;}
unsigned long ctl_base = pci_resource_start(dev, 0);
unsigned long ctl_base = pci_resource_start(dev, 0);
unsigned long
ctl_base = pci_resource_start(dev, 0)
ctl_base
= pci_resource_start(dev, 0)
pci_resource_start(dev, 0)
pci_resource_start
pci_resource_start
dev
dev
0
unsigned long dma_base = pci_resource_start(dev, 1);
unsigned long dma_base = pci_resource_start(dev, 1);
unsigned long
dma_base = pci_resource_start(dev, 1)
dma_base
= pci_resource_start(dev, 1)
pci_resource_start(dev, 1)
pci_resource_start
pci_resource_start
dev
dev
1
unsigned long ctl_size = pci_resource_len(dev, 0);
unsigned long ctl_size = pci_resource_len(dev, 0);
unsigned long
ctl_size = pci_resource_len(dev, 0)
ctl_size
= pci_resource_len(dev, 0)
pci_resource_len(dev, 0)
pci_resource_len
pci_resource_len
dev
dev
0
unsigned long dma_size = pci_resource_len(dev, 1);
unsigned long dma_size = pci_resource_len(dev, 1);
unsigned long
dma_size = pci_resource_len(dev, 1)
dma_size
= pci_resource_len(dev, 1)
pci_resource_len(dev, 1)
pci_resource_len
pci_resource_len
dev
dev
1
void __iomem
void __iomem
void
__iomem
__iomem
m
*ctl_addr;
*ctl_addr
ctl_addr
ctl_addr
void __iomem
void __iomem
void
__iomem
__iomem
m
*dma_addr;
*dma_addr
dma_addr
dma_addr
int i, ret;
int i, ret;
int
i
i
ret
ret
for (i = 0; i < MAX_HWIFS; i++) {		if (scc_ports[i].ctl == 0)			break;	}
i = 0;
i = 0
i
i
0
i < MAX_HWIFS
i
i
MAX_HWIFS
MAX_HWIFS
i++
i
i
{		if (scc_ports[i].ctl == 0)			break;	}
if (scc_ports[i].ctl == 0)			break;
scc_ports[i].ctl == 0
scc_ports[i].ctl
scc_ports[i]
scc_ports
scc_ports
i
i
ctl
0
break;
if (i >= MAX_HWIFS)		return -ENOMEM;
i >= MAX_HWIFS
i
i
MAX_HWIFS
MAX_HWIFS
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
ret = pci_request_selected_regions(dev, (1 << 2) - 1, name);
ret = pci_request_selected_regions(dev, (1 << 2) - 1, name)
ret
ret
pci_request_selected_regions(dev, (1 << 2) - 1, name)
pci_request_selected_regions
pci_request_selected_regions
dev
dev
(1 << 2) - 1
(1 << 2)
1 << 2
1
2
1
name
name
if (ret < 0) {		printk(KERN_ERR "%s: can't reserve resources\n", name);		return ret;	}
ret < 0
ret
ret
0
{		printk(KERN_ERR "%s: can't reserve resources\n", name);		return ret;	}
printk(KERN_ERR "%s: can't reserve resources\n", name);
return ret;
ret
ret
if ((ctl_addr = ioremap(ctl_base, ctl_size)) == NULL)		goto fail_0;
(ctl_addr = ioremap(ctl_base, ctl_size)) == NULL
(ctl_addr = ioremap(ctl_base, ctl_size))
ctl_addr = ioremap(ctl_base, ctl_size)
ctl_addr
ctl_addr
ioremap(ctl_base, ctl_size)
ioremap
ioremap
ctl_base
ctl_base
ctl_size
ctl_size
NULL
NULL
goto fail_0;
fail_0
if ((dma_addr = ioremap(dma_base, dma_size)) == NULL)		goto fail_1;
(dma_addr = ioremap(dma_base, dma_size)) == NULL
(dma_addr = ioremap(dma_base, dma_size))
dma_addr = ioremap(dma_base, dma_size)
dma_addr
dma_addr
ioremap(dma_base, dma_size)
ioremap
ioremap
dma_base
dma_base
dma_size
dma_size
NULL
NULL
goto fail_1;
fail_1
pci_set_master(dev);
pci_set_master(dev)
pci_set_master
pci_set_master
dev
dev
scc_ports[i].ctl = (unsigned long)ctl_addr;
scc_ports[i].ctl = (unsigned long)ctl_addr
scc_ports[i].ctl
scc_ports[i]
scc_ports
scc_ports
i
i
ctl
(unsigned long)ctl_addr
unsigned long
unsigned long

ctl_addr
ctl_addr
scc_ports[i].dma = (unsigned long)dma_addr;
scc_ports[i].dma = (unsigned long)dma_addr
scc_ports[i].dma
scc_ports[i]
scc_ports
scc_ports
i
i
dma
(unsigned long)dma_addr
unsigned long
unsigned long

dma_addr
dma_addr
pci_set_drvdata(dev, (void *) &scc_ports[i]);
pci_set_drvdata(dev, (void *) &scc_ports[i])
pci_set_drvdata
pci_set_drvdata
dev
dev
(void *) &scc_ports[i]
void *
void
*
*
&scc_ports[i]
scc_ports[i]
scc_ports
scc_ports
i
i
return 1;
1
fail_1:	iounmap(ctl_addr);
fail_1
iounmap(ctl_addr);
iounmap(ctl_addr);
iounmap
iounmap
(ctl_addr)
ctl_addr
ctl_addr
fail_0:	return -ENOMEM;
fail_0
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
-----joern-----
(127,50,0)
(129,36,0)
(97,89,0)
(49,127,0)
(27,74,0)
(129,45,0)
(90,129,0)
(86,36,0)
(59,1,0)
(80,0,0)
(101,112,0)
(41,79,0)
(32,36,0)
(61,36,0)
(62,4,0)
(60,89,0)
(59,103,0)
(3,81,0)
(37,36,0)
(112,101,0)
(115,12,0)
(84,8,0)
(57,34,0)
(118,48,0)
(70,84,0)
(120,50,0)
(1,59,0)
(60,78,0)
(107,29,0)
(97,59,0)
(67,50,0)
(100,89,0)
(57,108,0)
(122,111,0)
(50,8,0)
(47,94,0)
(46,87,0)
(35,108,0)
(72,113,0)
(103,74,0)
(53,8,0)
(119,37,0)
(66,8,0)
(13,36,0)
(127,2,0)
(76,34,0)
(15,60,0)
(10,36,0)
(125,79,0)
(45,89,0)
(87,71,0)
(44,89,0)
(26,36,0)
(111,29,0)
(109,97,0)
(4,11,0)
(58,36,0)
(108,57,0)
(12,29,0)
(119,11,0)
(107,36,0)
(108,35,0)
(121,57,0)
(91,78,0)
(52,84,0)
(16,45,0)
(75,37,0)
(87,129,0)
(55,44,0)
(60,101,0)
(106,36,0)
(21,66,0)
(98,14,0)
(81,53,0)
(93,99,0)
(105,29,0)
(45,129,0)
(94,117,0)
(113,66,0)
(87,29,0)
(65,87,0)
(6,10,0)
(43,108,0)
(23,36,0)
(81,14,0)
(14,36,0)
(39,98,0)
(9,78,0)
(40,0,0)
(20,111,0)
(98,108,0)
(5,28,0)
(68,76,0)
(69,45,0)
(51,36,0)
(59,97,0)
(14,98,0)
(85,76,0)
(2,36,0)
(97,36,0)
(22,36,0)
(128,100,0)
(63,100,0)
(103,59,0)
(30,53,0)
(0,8,0)
(38,91,0)
(119,91,0)
(95,36,0)
(18,32,0)
(126,36,0)
(102,112,0)
(78,36,0)
(99,113,0)
(110,101,0)
(77,66,0)
(78,60,0)
(50,127,0)
(31,57,0)
(76,89,0)
(119,117,0)
(111,2,0)
(117,36,0)
(60,83,0)
(53,81,0)
(88,8,0)
(32,89,0)
(123,44,0)
(34,76,0)
(96,74,0)
(54,36,0)
(74,8,0)
(111,122,0)
(101,60,0)
(66,113,0)
(124,53,0)
(73,71,0)
(48,8,0)
(42,8,0)
(113,99,0)
(37,81,0)
(34,36,0)
(71,100,0)
(7,36,0)
(91,116,0)
(37,127,0)
(114,107,0)
(17,112,0)
(25,60,0)
(57,10,0)
(92,35,0)
(33,98,0)
(100,71,0)
(29,87,0)
(44,10,0)
(74,103,0)
(71,36,0)
(98,39,0)
(10,44,0)
(2,111,0)
(29,12,0)
(24,34,0)
(79,78,0)
(56,36,0)
(82,36,0)
(60,15,1)
(31,121,1)
(57,10,1)
(105,79,1)
(111,20,1)
(70,48,1)
(103,74,1)
(92,108,1)
(119,37,1)
(81,53,1)
(46,65,1)
(45,69,1)
(37,81,1)
(35,92,1)
(19,35,1)
(120,32,1)
(125,78,1)
(32,89,1)
(87,71,1)
(127,49,1)
(2,111,1)
(43,12,1)
(79,78,1)
(121,43,1)
(75,97,1)
(66,21,1)
(47,107,1)
(101,110,1)
(34,76,1)
(0,40,1)
(100,89,1)
(69,16,1)
(48,8,1)
(117,94,1)
(115,29,1)
(96,109,1)
(21,77,1)
(97,59,1)
(9,0,1)
(76,89,1)
(55,6,1)
(98,33,1)
(67,120,1)
(128,63,1)
(35,108,1)
(70,8,1)
(17,102,1)
(114,19,1)
(81,3,1)
(66,8,1)
(15,101,1)
(118,99,1)
(84,52,1)
(112,17,1)
(84,8,1)
(6,71,1)
(71,100,1)
(109,14,1)
(98,108,1)
(74,8,1)
(16,90,1)
(111,29,1)
(104,99,1)
(108,57,1)
(99,93,1)
(119,117,1)
(45,89,1)
(124,2,1)
(24,129,1)
(42,34,1)
(102,25,1)
(63,73,1)
(74,27,1)
(47,64,1)
(44,123,1)
(88,42,1)
(49,50,1)
(80,84,1)
(48,118,1)
(107,29,1)
(76,85,1)
(91,38,1)
(79,41,1)
(38,79,1)
(101,112,1)
(100,128,1)
(4,62,1)
(62,0,1)
(98,39,1)
(129,45,1)
(0,8,1)
(44,89,1)
(50,8,1)
(127,50,1)
(60,83,1)
(50,67,1)
(10,44,1)
(107,114,1)
(64,12,1)
(78,60,1)
(3,53,1)
(41,125,1)
(30,124,1)
(53,8,1)
(14,98,1)
(33,81,1)
(8,88,1)
(113,72,1)
(93,113,1)
(57,31,1)
(52,70,1)
(37,127,1)
(27,96,1)
(87,46,1)
(53,30,1)
(37,75,1)
(72,66,1)
(60,101,1)
(11,4,1)
(119,91,1)
(80,104,1)
(65,105,1)
(59,1,1)
(77,84,1)
(99,113,1)
(119,11,1)
(91,78,1)
(40,80,1)
(12,115,1)
(94,47,1)
(57,34,1)
(59,103,1)
(113,66,1)
(60,89,1)
(29,87,1)
(90,10,1)
(32,18,1)
(123,55,1)
(87,129,1)
(25,9,1)
(68,24,1)
(20,127,1)
(110,112,1)
(85,68,1)
(12,29,1)
(97,89,1)
(111,122,1)
(18,35,1)
(76,89,2)
(35,108,2)
(62,0,2)
(59,1,2)
(72,84,2)
(119,117,2)
(113,66,2)
(98,108,2)
(53,8,2)
(87,79,2)
(29,79,2)
(50,8,2)
(27,35,2)
(18,35,2)
(32,89,2)
(37,127,2)
(59,35,2)
(3,35,2)
(60,83,2)
(97,89,2)
(33,35,2)
(48,99,2)
(91,79,2)
(84,8,2)
(2,111,2)
(71,100,2)
(41,0,2)
(59,103,2)
(14,98,2)
(14,35,2)
(111,122,2)
(81,53,2)
(17,0,2)
(96,35,2)
(111,29,2)
(113,84,2)
(129,45,2)
(87,129,2)
(118,99,2)
(79,78,2)
(19,35,2)
(124,35,2)
(121,12,2)
(81,35,2)
(25,0,2)
(10,44,2)
(47,12,2)
(104,99,2)
(117,35,2)
(47,35,2)
(115,79,2)
(78,60,2)
(45,89,2)
(99,113,2)
(119,37,2)
(31,12,2)
(49,35,2)
(60,101,2)
(12,79,2)
(94,12,2)
(66,84,2)
(77,84,2)
(12,29,2)
(102,0,2)
(79,0,2)
(65,79,2)
(119,11,2)
(50,35,2)
(117,12,2)
(48,8,2)
(127,50,2)
(74,35,2)
(93,84,2)
(101,112,2)
(53,35,2)
(108,12,2)
(60,89,2)
(38,79,2)
(74,8,2)
(100,89,2)
(44,89,2)
(64,12,2)
(46,79,2)
(127,35,2)
(37,81,2)
(35,12,2)
(30,35,2)
(111,35,2)
(60,0,2)
(37,35,2)
(57,12,2)
(67,35,2)
(20,35,2)
(78,0,2)
(92,12,2)
(57,34,2)
(21,84,2)
(103,35,2)
(97,59,2)
(43,12,2)
(112,0,2)
(120,35,2)
(107,35,2)
(91,78,2)
(97,35,2)
(109,35,2)
(98,35,2)
(94,35,2)
(2,35,2)
(105,79,2)
(114,35,2)
(4,0,2)
(119,91,2)
(87,71,2)
(57,10,2)
(52,99,2)
(107,29,2)
(125,0,2)
(15,0,2)
(99,84,2)
(98,39,2)
(11,0,2)
(34,76,2)
(101,0,2)
(66,8,2)
(84,99,2)
(70,99,2)
(29,87,2)
(110,0,2)
(108,57,2)
(32,35,2)
(0,8,2)
(9,0,2)
(75,35,2)
(103,74,2)
-----------------------------------
(0,i >= MAX_HWIFS)
(1,void *)
(2,scc_ports[i].ctl = (unsigned long)
(3,dma)
(4,-ENOMEM)
(5,if (scc_ports[i].ctl == 0)
(6,dma_base)
(7,fail_1:)
(8,i = 0)
(9,ret)
(10,dma_base = pci_resource_start(dev, 1)
(11,return -ENOMEM;)
(12,(ctl_addr = ioremap(ctl_base, ctl_size)
(13,for (i = 0; i < MAX_HWIFS; i++)
(14,scc_ports[i].dma = (unsigned long)
(15,name)
(16,dev)
(17,2)
(18,dev)
(19,goto fail_1;)
(20,ctl_addr)
(21,i)
(22,fail_0:)
(23,dma_addr)
(24,dma_size)
(25,dev)
(26,ctl_base)
(27,i)
(28,)
(29,ctl_addr = ioremap(ctl_base, ctl_size)
(30,i)
(31,dma_size)
(32,pci_set_master(dev)
(33,dma_addr)
(34,dma_size = pci_resource_len(dev, 1)
(35,(dma_addr = ioremap(dma_base, dma_size)
(36,)
(37,return 1;)
(38,ret)
(39,unsigned long)
(40,MAX_HWIFS)
(41,0)
(42,i)
(43,dma_addr)
(44,pci_resource_start(dev, 1)
(45,pci_resource_len(dev, 0)
(46,ctl_size)
(47,ENOMEM)
(48,i++)
(49,ctl)
(50,scc_ports[i])
(51,dma_base)
(52,MAX_HWIFS)
(53,scc_ports[i])
(54,ctl_addr)
(55,dev)
(56,if ((dma_addr = ioremap(dma_base, dma_size)
(57,ioremap(dma_base, dma_size)
(58,if ((ctl_addr = ioremap(ctl_base, ctl_size)
(59,(void *)
(60,pci_request_selected_regions(dev, (1 << 2)
(61,dma_size)
(62,ENOMEM)
(63,dev)
(64,goto fail_0;)
(65,ctl_base)
(66,scc_ports[i])
(67,i)
(68,dev)
(69,0)
(70,i)
(71,ctl_base = pci_resource_start(dev, 0)
(72,ctl)
(73,ctl_base)
(74,scc_ports[i])
(75,1)
(76,pci_resource_len(dev, 1)
(77,scc_ports)
(78,ret = pci_request_selected_regions(dev, (1 << 2)
(79,ret < 0)
(80,i)
(81,scc_ports[i].dma)
(82,i)
(83,const char *name)
(84,i < MAX_HWIFS)
(85,1)
(86,ctl_size)
(87,ioremap(ctl_base, ctl_size)
(88,0)
(89,struct pci_dev *dev)
(90,ctl_size)
(91,return ret;)
(92,NULL)
(93,0)
(94,-ENOMEM)
(95,ret)
(96,scc_ports)
(97,pci_set_drvdata(dev, (void *)
(98,(unsigned long)
(99,scc_ports[i].ctl == 0)
(100,pci_resource_start(dev, 0)
(101,(1 << 2)
(102,1)
(103,&scc_ports[i])
(104,break;)
(105,ctl_addr)
(106,if (i >= MAX_HWIFS)
(107,iounmap(ctl_addr)
(108,dma_addr = ioremap(dma_base, dma_size)
(109,dev)
(110,1)
(111,(unsigned long)
(112,1 << 2)
(113,scc_ports[i].ctl)
(114,ctl_addr)
(115,NULL)
(116,)
(117,return -ENOMEM;)
(118,i)
(119,RET)
(120,scc_ports)
(121,dma_base)
(122,unsigned long)
(123,1)
(124,scc_ports)
(125,ret)
(126,if (ret < 0)
(127,scc_ports[i].ctl)
(128,0)
(129,ctl_size = pci_resource_len(dev, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^