-----label-----
0
-----code-----
void show_free_areas(void)
{
	struct page_state ps;
	int cpu, temperature;
	unsigned long active;
	unsigned long inactive;
	unsigned long free;
	struct zone *zone;

	for_each_zone(zone) {
		show_node(zone);
		printk("%s per-cpu:", zone->name);

		if (!zone->present_pages) {
			printk(" empty\n");
			continue;
		} else
			printk("\n");

		for (cpu = 0; cpu < NR_CPUS; ++cpu) {
			struct per_cpu_pageset *pageset = zone->pageset + cpu;
			for (temperature = 0; temperature < 2; temperature++)
				printk("cpu %d %s: low %d, high %d, batch %d\n",
					cpu,
					temperature ? "cold" : "hot",
					pageset->pcp[temperature].low,
					pageset->pcp[temperature].high,
					pageset->pcp[temperature].batch);
		}
	}

	get_page_state(&ps);
	get_zone_counts(&active, &inactive, &free);

	printk("\nFree pages: %11ukB (%ukB HighMem)\n",
		K(nr_free_pages()),
		K(nr_free_highpages()));

	printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu free:%u\n",
		active,
		inactive,
		ps.nr_dirty,
		ps.nr_writeback,
		nr_free_pages());

	for_each_zone(zone) {
		show_node(zone);
		printk("%s"
			" free:%lukB"
			" min:%lukB"
			" low:%lukB"
			" high:%lukB"
			" active:%lukB"
			" inactive:%lukB"
			"\n",
			zone->name,
			K(zone->free_pages),
			K(zone->pages_min),
			K(zone->pages_low),
			K(zone->pages_high),
			K(zone->nr_active),
			K(zone->nr_inactive)
			);
	}

	for_each_zone(zone) {
		struct list_head *elem;
 		unsigned long nr, flags, order, total = 0;

		show_node(zone);
		printk("%s: ", zone->name);
		if (!zone->present_pages) {
			printk("empty\n");
			continue;
		}

		spin_lock_irqsave(&zone->lock, flags);
		for (order = 0; order < MAX_ORDER; order++) {
			nr = 0;
			list_for_each(elem, &zone->free_area[order].free_list)
				++nr;
			total += nr << order;
			printk("%lu*%lukB ", nr, K(1UL) << order);
		}
		spin_unlock_irqrestore(&zone->lock, flags);
		printk("= %lukB\n", K(total));
	}

	show_swap_cache_info();
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
10,11
11,12
11,13
12,13
14,15
16,17
17,18
17,19
17,20
19,20
21,22
23,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
33,34
34,35
34,36
36,37
38,39
39,40
39,41
40,41
42,43
42,44
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
52,56
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
60,63
61,62
64,65
64,66
65,66
68,69
68,70
68,71
69,70
70,71
70,72
71,72
74,75
74,76
75,76
76,77
76,78
77,78
81,82
82,83
82,84
83,84
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
95,96
97,98
98,99
100,101
100,102
101,102
102,103
102,104
103,104
105,106
105,107
105,108
108,109
109,110
109,111
110,111
110,112
111,112
114,115
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
122,123
122,124
123,124
126,127
127,128
129,130
130,131
130,132
130,133
130,134
130,135
130,136
130,137
131,132
134,135
136,137
136,138
136,139
137,138
141,142
141,143
142,143
142,144
143,144
143,145
144,145
147,148
150,151
150,152
151,152
151,153
152,153
152,154
153,154
156,157
159,160
159,161
160,161
160,162
161,162
161,163
162,163
165,166
168,169
169,170
169,171
170,171
172,173
173,174
175,176
176,177
176,178
176,179
176,180
177,178
179,180
180,181
182,183
183,184
185,186
186,187
188,189
189,190
189,191
189,192
189,193
190,191
193,194
193,195
194,195
196,197
197,198
199,200
199,201
200,201
202,203
203,204
205,206
206,207
206,208
206,209
206,210
206,211
206,212
206,213
207,208
210,211
212,213
214,215
214,216
215,216
218,219
218,220
219,220
222,223
223,224
225,226
226,227
226,228
227,228
229,230
231,232
232,233
232,234
233,234
234,235
234,236
235,236
237,238
239,240
240,241
240,242
240,243
240,244
240,245
240,246
240,247
240,248
240,249
241,242
244,245
244,246
245,246
248,249
248,250
249,250
251,252
251,253
252,253
255,256
255,257
256,257
258,259
258,260
259,260
262,263
262,264
263,264
265,266
265,267
266,267
269,270
269,271
270,271
272,273
272,274
273,274
276,277
276,278
277,278
279,280
279,281
280,281
283,284
283,285
284,285
286,287
286,288
287,288
290,291
291,292
291,293
292,293
294,295
296,297
297,298
297,299
297,300
297,301
297,302
297,303
297,304
297,305
297,306
298,299
299,300
299,301
300,301
302,303
302,304
305,306
306,307
306,308
306,309
306,310
306,311
308,309
310,311
312,313
314,315
314,316
316,317
318,319
319,320
319,321
320,321
322,323
324,325
325,326
325,327
325,328
326,327
329,330
329,331
330,331
333,334
333,335
334,335
335,336
335,337
336,337
339,340
339,341
340,341
341,342
341,343
342,343
346,347
347,348
347,349
347,350
348,349
350,351
351,352
351,353
352,353
355,356
357,358
357,359
357,360
357,361
358,359
359,360
359,361
360,361
363,364
363,365
364,365
366,367
368,369
369,370
371,372
371,373
371,374
371,375
371,376
371,377
372,373
373,374
373,375
374,375
377,378
378,379
379,380
379,381
379,382
380,381
382,383
384,385
385,386
385,387
386,387
386,388
387,388
387,389
388,389
391,392
394,395
395,396
396,397
398,399
399,400
399,401
400,401
402,403
402,404
403,404
405,406
407,408
408,409
408,410
408,411
408,412
409,410
412,413
414,415
414,416
415,416
415,417
416,417
419,420
421,422
422,423
422,424
422,425
423,424
425,426
426,427
426,428
427,428
430,431
432,433
433,434
433,435
433,436
434,435
437,438
437,439
438,439
440,441
442,443
443,444
444,445
-----nextToken-----
2,4,6,8,13,15,18,20,22,25,27,30,32,35,37,41,43,44,48,50,56,58,62,63,66,67,72,73,78,79,80,84,85,90,91,94,96,99,104,106,107,112,113,115,120,121,124,125,128,132,133,135,138,139,140,145,146,148,149,154,155,157,158,163,164,166,167,171,174,178,181,184,187,191,192,195,198,201,204,208,209,211,213,216,217,220,221,224,228,230,236,238,242,243,246,247,250,253,254,257,260,261,264,267,268,271,274,275,278,281,282,285,288,289,293,295,301,303,304,307,309,311,313,315,317,321,323,327,328,331,332,337,338,343,344,345,349,353,354,356,361,362,365,367,370,375,376,381,383,389,390,392,393,397,401,404,406,410,411,413,417,418,420,424,428,429,431,435,436,439,441,445
-----computeFrom-----
88,89
88,90
92,93
92,94
109,110
109,111
118,119
118,120
122,123
122,124
359,360
359,361
363,364
363,365
373,374
373,375
399,400
399,401
402,403
402,404
414,415
414,416
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ProblemStatement;ExpressionStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void show_free_areas(void){	struct page_state ps;	int cpu, temperature;	unsigned long active;	unsigned long inactive;	unsigned long free;	struct zone *zone;	for_each_zone(zone) {		show_node(zone);		printk("%s per-cpu:", zone->name);		if (!zone->present_pages) {			printk(" empty\n");			continue;		} else			printk("\n");		for (cpu = 0; cpu < NR_CPUS; ++cpu) {			struct per_cpu_pageset *pageset = zone->pageset + cpu;			for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);		}	}	get_page_state(&ps);	get_zone_counts(&active, &inactive, &free);	printk("\nFree pages: %11ukB (%ukB HighMem)\n",		K(nr_free_pages()),		K(nr_free_highpages()));	printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu free:%u\n",		active,		inactive,		ps.nr_dirty,		ps.nr_writeback,		nr_free_pages());	for_each_zone(zone) {		show_node(zone);		printk("%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n",			zone->name,			K(zone->free_pages),			K(zone->pages_min),			K(zone->pages_low),			K(zone->pages_high),			K(zone->nr_active),			K(zone->nr_inactive)			);	}	for_each_zone(zone) {		struct list_head *elem; 		unsigned long nr, flags, order, total = 0;		show_node(zone);		printk("%s: ", zone->name);		if (!zone->present_pages) {			printk("empty\n");			continue;		}		spin_lock_irqsave(&zone->lock, flags);		for (order = 0; order < MAX_ORDER; order++) {			nr = 0;			list_for_each(elem, &zone->free_area[order].free_list)				++nr;			total += nr << order;			printk("%lu*%lukB ", nr, K(1UL) << order);		}		spin_unlock_irqrestore(&zone->lock, flags);		printk("= %lukB\n", K(total));	}	show_swap_cache_info();}
void
show_free_areas(void)
show_free_areas
void
void


{	struct page_state ps;	int cpu, temperature;	unsigned long active;	unsigned long inactive;	unsigned long free;	struct zone *zone;	for_each_zone(zone) {		show_node(zone);		printk("%s per-cpu:", zone->name);		if (!zone->present_pages) {			printk(" empty\n");			continue;		} else			printk("\n");		for (cpu = 0; cpu < NR_CPUS; ++cpu) {			struct per_cpu_pageset *pageset = zone->pageset + cpu;			for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);		}	}	get_page_state(&ps);	get_zone_counts(&active, &inactive, &free);	printk("\nFree pages: %11ukB (%ukB HighMem)\n",		K(nr_free_pages()),		K(nr_free_highpages()));	printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu free:%u\n",		active,		inactive,		ps.nr_dirty,		ps.nr_writeback,		nr_free_pages());	for_each_zone(zone) {		show_node(zone);		printk("%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n",			zone->name,			K(zone->free_pages),			K(zone->pages_min),			K(zone->pages_low),			K(zone->pages_high),			K(zone->nr_active),			K(zone->nr_inactive)			);	}	for_each_zone(zone) {		struct list_head *elem; 		unsigned long nr, flags, order, total = 0;		show_node(zone);		printk("%s: ", zone->name);		if (!zone->present_pages) {			printk("empty\n");			continue;		}		spin_lock_irqsave(&zone->lock, flags);		for (order = 0; order < MAX_ORDER; order++) {			nr = 0;			list_for_each(elem, &zone->free_area[order].free_list)				++nr;			total += nr << order;			printk("%lu*%lukB ", nr, K(1UL) << order);		}		spin_unlock_irqrestore(&zone->lock, flags);		printk("= %lukB\n", K(total));	}	show_swap_cache_info();}
struct page_state ps;
struct page_state ps;
struct page_state
page_state
ps
ps
int cpu, temperature;
int cpu, temperature;
int
cpu
cpu
temperature
temperature
unsigned long active;
unsigned long active;
unsigned long
active
active
unsigned long inactive;
unsigned long inactive;
unsigned long
inactive
inactive
unsigned long free;
unsigned long free;
unsigned long
free
free
struct zone *zone;
struct zone *zone;
struct zone
zone
*zone
*
zone
for_each_zone(zone)
for_each_zone(zone)
for_each_zone
for_each_zone
zone
zone
)
{		show_node(zone);		printk("%s per-cpu:", zone->name);		if (!zone->present_pages) {			printk(" empty\n");			continue;		} else			printk("\n");		for (cpu = 0; cpu < NR_CPUS; ++cpu) {			struct per_cpu_pageset *pageset = zone->pageset + cpu;			for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);		}	}
show_node(zone);
show_node(zone)
show_node
show_node
zone
zone
printk("%s per-cpu:", zone->name);
printk("%s per-cpu:", zone->name)
printk
printk
"%s per-cpu:"
zone->name
zone
zone
name
if (!zone->present_pages) {			printk(" empty\n");			continue;		} else			printk("\n");
!zone->present_pages
zone->present_pages
zone
zone
present_pages
{			printk(" empty\n");			continue;		}
printk(" empty\n");
printk(" empty\n")
printk
printk
" empty\n"
continue;
printk("\n");
printk("\n")
printk
printk
"\n"
for (cpu = 0; cpu < NR_CPUS; ++cpu) {			struct per_cpu_pageset *pageset = zone->pageset + cpu;			for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);		}
cpu = 0;
cpu = 0
cpu
cpu
0
cpu < NR_CPUS
cpu
cpu
NR_CPUS
NR_CPUS
++cpu
cpu
cpu
{			struct per_cpu_pageset *pageset = zone->pageset + cpu;			for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);		}
struct per_cpu_pageset *pageset = zone->pageset + cpu;
struct per_cpu_pageset *pageset = zone->pageset + cpu;
struct per_cpu_pageset
per_cpu_pageset
*pageset = zone->pageset + cpu
*
pageset
= zone->pageset + cpu
zone->pageset + cpu
zone->pageset
zone
zone
pageset
cpu
cpu
for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);
temperature = 0;
temperature = 0
temperature
temperature
0
temperature < 2
temperature
temperature
2
temperature++
temperature
temperature
printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);
printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch)
printk
printk
"cpu %d %s: low %d, high %d, batch %d\n"
cpu
cpu
temperature ? "cold" : "hot"
temperature
temperature
"cold"
"hot"
pageset->pcp[temperature].low
pageset->pcp[temperature]
pageset->pcp
pageset
pageset
pcp
temperature
temperature
low
pageset->pcp[temperature].high
pageset->pcp[temperature]
pageset->pcp
pageset
pageset
pcp
temperature
temperature
high
pageset->pcp[temperature].batch
pageset->pcp[temperature]
pageset->pcp
pageset
pageset
pcp
temperature
temperature
batch
get_page_state(&ps);
get_page_state(&ps)
get_page_state
get_page_state
&ps
ps
ps
get_zone_counts(&active, &inactive, &free);
get_zone_counts(&active, &inactive, &free)
get_zone_counts
get_zone_counts
&active
active
active
&inactive
inactive
inactive
&free
free
free
printk("\nFree pages: %11ukB (%ukB HighMem)\n",		K(nr_free_pages()),		K(nr_free_highpages()));
printk("\nFree pages: %11ukB (%ukB HighMem)\n",		K(nr_free_pages()),		K(nr_free_highpages()))
printk
printk
"\nFree pages: %11ukB (%ukB HighMem)\n"
K(nr_free_pages())
K
K
nr_free_pages()
nr_free_pages
nr_free_pages
K(nr_free_highpages())
K
K
nr_free_highpages()
nr_free_highpages
nr_free_highpages
printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu free:%u\n",		active,		inactive,		ps.nr_dirty,		ps.nr_writeback,		nr_free_pages());
printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu free:%u\n",		active,		inactive,		ps.nr_dirty,		ps.nr_writeback,		nr_free_pages())
printk
printk
"Active:%lu inactive:%lu dirty:%lu writeback:%lu free:%u\n"
active
active
inactive
inactive
ps.nr_dirty
ps
ps
nr_dirty
ps.nr_writeback
ps
ps
nr_writeback
nr_free_pages()
nr_free_pages
nr_free_pages
for_each_zone(zone)
for_each_zone(zone)
for_each_zone
for_each_zone
zone
zone
)
{		show_node(zone);		printk("%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n",			zone->name,			K(zone->free_pages),			K(zone->pages_min),			K(zone->pages_low),			K(zone->pages_high),			K(zone->nr_active),			K(zone->nr_inactive)			);	}
show_node(zone);
show_node(zone)
show_node
show_node
zone
zone
printk("%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n",			zone->name,			K(zone->free_pages),			K(zone->pages_min),			K(zone->pages_low),			K(zone->pages_high),			K(zone->nr_active),			K(zone->nr_inactive)			);
printk("%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n",			zone->name,			K(zone->free_pages),			K(zone->pages_min),			K(zone->pages_low),			K(zone->pages_high),			K(zone->nr_active),			K(zone->nr_inactive)			)
printk
printk
"%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n"
zone->name
zone
zone
name
K(zone->free_pages)
K
K
zone->free_pages
zone
zone
free_pages
K(zone->pages_min)
K
K
zone->pages_min
zone
zone
pages_min
K(zone->pages_low)
K
K
zone->pages_low
zone
zone
pages_low
K(zone->pages_high)
K
K
zone->pages_high
zone
zone
pages_high
K(zone->nr_active)
K
K
zone->nr_active
zone
zone
nr_active
K(zone->nr_inactive)
K
K
zone->nr_inactive
zone
zone
nr_inactive
for_each_zone(zone)
for_each_zone(zone)
for_each_zone
for_each_zone
zone
zone
)
{		struct list_head *elem; 		unsigned long nr, flags, order, total = 0;		show_node(zone);		printk("%s: ", zone->name);		if (!zone->present_pages) {			printk("empty\n");			continue;		}		spin_lock_irqsave(&zone->lock, flags);		for (order = 0; order < MAX_ORDER; order++) {			nr = 0;			list_for_each(elem, &zone->free_area[order].free_list)				++nr;			total += nr << order;			printk("%lu*%lukB ", nr, K(1UL) << order);		}		spin_unlock_irqrestore(&zone->lock, flags);		printk("= %lukB\n", K(total));	}
struct list_head *elem;
struct list_head *elem;
struct list_head
list_head
*elem
*
elem
unsigned long nr, flags, order, total = 0;
unsigned long nr, flags, order, total = 0;
unsigned long
nr
nr
flags
flags
order
order
total = 0
total
= 0
0
show_node(zone);
show_node(zone)
show_node
show_node
zone
zone
printk("%s: ", zone->name);
printk("%s: ", zone->name)
printk
printk
"%s: "
zone->name
zone
zone
name
if (!zone->present_pages) {			printk("empty\n");			continue;		}
!zone->present_pages
zone->present_pages
zone
zone
present_pages
{			printk("empty\n");			continue;		}
printk("empty\n");
printk("empty\n")
printk
printk
"empty\n"
continue;
spin_lock_irqsave(&zone->lock, flags);
spin_lock_irqsave(&zone->lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&zone->lock
zone->lock
zone
zone
lock
flags
flags
for (order = 0; order < MAX_ORDER; order++) {			nr = 0;			list_for_each(elem, &zone->free_area[order].free_list)				++nr;			total += nr << order;			printk("%lu*%lukB ", nr, K(1UL) << order);		}
order = 0;
order = 0
order
order
0
order < MAX_ORDER
order
order
MAX_ORDER
MAX_ORDER
order++
order
order
{			nr = 0;			list_for_each(elem, &zone->free_area[order].free_list)				++nr;			total += nr << order;			printk("%lu*%lukB ", nr, K(1UL) << order);		}
nr = 0;
nr = 0
nr
nr
0
list_for_each(elem, &zone->free_area[order].free_list)				++
list_for_each(elem, &zone->free_area[order].free_list)				++
list_for_each(elem, &zone->free_area[order].free_list)
list_for_each
list_for_each
elem
elem
&zone->free_area[order].free_list
zone->free_area[order].free_list
zone->free_area[order]
zone->free_area
zone
zone
free_area
order
order
free_list
+
nr;
nr
nr
total += nr << order;
total += nr << order
total
total
nr << order
nr
nr
order
order
printk("%lu*%lukB ", nr, K(1UL) << order);
printk("%lu*%lukB ", nr, K(1UL) << order)
printk
printk
"%lu*%lukB "
nr
nr
K(1UL) << order
K(1UL)
K
K
1UL
order
order
spin_unlock_irqrestore(&zone->lock, flags);
spin_unlock_irqrestore(&zone->lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&zone->lock
zone->lock
zone
zone
lock
flags
flags
printk("= %lukB\n", K(total));
printk("= %lukB\n", K(total))
printk
printk
"= %lukB\n"
K(total)
K
K
total
total
show_swap_cache_info();
show_swap_cache_info()
show_swap_cache_info
show_swap_cache_info
-----joern-----
(186,24,0)
(105,87,0)
(75,209,0)
(11,48,0)
(60,62,0)
(71,209,0)
(115,55,0)
(139,55,0)
(11,63,0)
(184,32,0)
(36,0,0)
(77,48,0)
(77,150,0)
(71,54,0)
(160,38,0)
(146,133,0)
(206,52,0)
(141,68,0)
(97,18,0)
(38,18,0)
(148,12,0)
(102,9,0)
(41,71,0)
(86,77,0)
(159,37,0)
(106,99,0)
(121,46,0)
(198,209,0)
(149,88,0)
(73,172,0)
(52,48,0)
(81,37,0)
(23,125,0)
(71,41,0)
(17,80,0)
(19,74,0)
(154,37,0)
(51,13,0)
(25,163,0)
(139,115,0)
(28,48,0)
(40,18,0)
(45,106,0)
(148,186,0)
(117,77,0)
(150,77,0)
(30,77,0)
(127,18,0)
(74,6,0)
(80,172,0)
(100,124,0)
(144,122,0)
(172,166,0)
(153,133,0)
(107,18,0)
(17,96,0)
(158,209,0)
(36,46,0)
(186,148,0)
(77,117,0)
(183,131,0)
(35,151,0)
(59,200,0)
(131,37,0)
(195,12,0)
(134,73,0)
(58,200,0)
(202,89,0)
(98,72,0)
(68,141,0)
(38,163,0)
(78,118,0)
(72,113,0)
(27,84,0)
(96,77,0)
(31,136,0)
(156,89,0)
(6,74,0)
(109,147,0)
(110,48,0)
(85,89,0)
(6,6,0)
(186,99,0)
(4,27,0)
(88,55,0)
(99,186,0)
(174,154,0)
(186,101,0)
(152,20,0)
(134,150,0)
(210,161,0)
(77,81,0)
(121,21,0)
(22,151,0)
(26,54,0)
(201,72,0)
(203,68,0)
(199,141,0)
(190,186,0)
(176,81,0)
(186,53,0)
(71,122,0)
(47,209,0)
(175,37,0)
(134,37,0)
(21,121,0)
(179,125,0)
(9,1,0)
(56,74,0)
(117,131,0)
(135,80,0)
(82,24,0)
(131,117,0)
(200,58,0)
(181,115,0)
(171,72,0)
(113,72,0)
(6,133,0)
(193,12,0)
(129,150,0)
(203,18,0)
(99,106,0)
(54,71,0)
(167,186,0)
(93,117,0)
(96,17,0)
(155,209,0)
(196,124,0)
(53,209,0)
(77,96,0)
(180,18,0)
(177,170,0)
(13,138,0)
(101,186,0)
(137,154,0)
(1,9,0)
(74,115,0)
(186,167,0)
(142,134,0)
(125,190,0)
(114,159,0)
(12,148,0)
(14,166,0)
(205,88,0)
(65,46,0)
(72,171,0)
(163,38,0)
(50,106,0)
(43,171,0)
(169,82,0)
(149,15,0)
(173,200,0)
(108,27,0)
(172,11,0)
(80,17,0)
(42,171,0)
(13,75,0)
(68,203,0)
(143,73,0)
(208,172,0)
(122,71,0)
(81,77,0)
(2,72,0)
(194,75,0)
(79,163,0)
(39,138,0)
(124,6,0)
(11,172,0)
(119,136,0)
(66,165,0)
(44,101,0)
(192,29,0)
(49,17,0)
(161,75,0)
(182,186,0)
(34,209,0)
(0,36,0)
(116,166,0)
(5,97,0)
(132,6,0)
(74,136,0)
(89,156,0)
(189,18,0)
(128,73,0)
(185,18,0)
(58,40,0)
(87,136,0)
(73,134,0)
(33,165,0)
(120,201,0)
(90,18,0)
(186,190,0)
(149,136,0)
(196,18,0)
(145,139,0)
(167,165,0)
(165,167,0)
(24,186,0)
(1,209,0)
(190,125,0)
(147,118,0)
(88,115,0)
(188,37,0)
(170,131,0)
(15,149,0)
(57,18,0)
(164,63,0)
(40,58,0)
(162,184,0)
(64,81,0)
(70,11,0)
(156,186,0)
(8,75,0)
(32,184,0)
(191,196,0)
(63,11,0)
(124,133,0)
(83,87,0)
(124,196,0)
(204,130,0)
(61,96,0)
(69,40,0)
(76,80,0)
(104,63,0)
(138,13,0)
(131,170,0)
(29,48,0)
(16,29,0)
(67,15,0)
(46,209,0)
(168,184,0)
(150,134,0)
(197,170,0)
(170,172,0)
(6,55,0)
(157,88,0)
(18,209,0)
(112,35,0)
(178,101,0)
(140,209,0)
(130,53,0)
(207,209,0)
(72,209,0)
(84,27,0)
(24,82,0)
(91,149,0)
(20,136,0)
(92,82,0)
(111,209,0)
(95,201,0)
(46,36,0)
(187,203,0)
(94,41,0)
(126,115,0)
(186,156,0)
(17,37,0)
(46,121,0)
(103,138,0)
(133,18,0)
(10,141,0)
(88,149,0)
(7,72,0)
(3,81,0)
(72,201,0)
(73,172,1)
(42,43,1)
(119,40,1)
(164,208,1)
(7,98,1)
(23,156,1)
(72,171,1)
(154,37,1)
(56,19,1)
(156,89,1)
(66,33,1)
(103,39,1)
(82,169,1)
(91,15,1)
(131,183,1)
(148,12,1)
(192,52,1)
(74,56,1)
(133,153,1)
(143,117,1)
(150,129,1)
(186,24,1)
(104,164,1)
(63,104,1)
(146,186,1)
(62,60,1)
(153,146,1)
(196,124,1)
(197,81,1)
(44,182,1)
(168,13,1)
(81,64,1)
(172,11,1)
(52,206,1)
(48,28,1)
(154,137,1)
(200,59,1)
(176,3,1)
(28,110,1)
(186,167,1)
(30,154,1)
(77,117,1)
(20,136,1)
(147,109,1)
(98,2,1)
(45,50,1)
(37,175,1)
(161,210,1)
(163,79,1)
(149,15,1)
(26,1,1)
(22,35,1)
(174,37,1)
(74,115,1)
(52,48,1)
(21,65,1)
(83,136,1)
(181,126,1)
(99,106,1)
(115,181,1)
(6,6,1)
(106,45,1)
(167,165,1)
(165,66,1)
(97,5,1)
(190,125,1)
(186,148,1)
(15,67,1)
(204,72,1)
(138,103,1)
(64,3,1)
(65,71,1)
(3,86,1)
(129,134,1)
(139,115,1)
(144,41,1)
(110,22,1)
(131,170,1)
(6,74,1)
(102,29,1)
(69,58,1)
(35,112,1)
(49,80,1)
(203,187,1)
(72,113,1)
(83,20,1)
(132,139,1)
(4,38,1)
(149,91,1)
(77,81,1)
(13,138,1)
(33,99,1)
(74,136,1)
(43,201,1)
(184,162,1)
(88,115,1)
(191,203,1)
(141,10,1)
(101,178,1)
(17,37,1)
(186,99,1)
(152,88,1)
(77,96,1)
(58,200,1)
(77,150,1)
(9,102,1)
(120,7,1)
(6,133,1)
(61,17,1)
(173,84,1)
(51,161,1)
(123,155,1)
(208,29,1)
(145,115,1)
(149,136,1)
(2,46,1)
(157,205,1)
(29,48,1)
(5,133,1)
(80,76,1)
(72,201,1)
(117,93,1)
(10,199,1)
(178,44,1)
(79,25,1)
(203,68,1)
(11,48,1)
(50,190,1)
(78,147,1)
(206,154,1)
(81,176,1)
(80,172,1)
(71,41,1)
(85,202,1)
(77,48,1)
(76,135,1)
(202,101,1)
(67,157,1)
(114,77,1)
(108,4,1)
(81,37,1)
(16,192,1)
(169,92,1)
(193,195,1)
(93,131,1)
(134,142,1)
(122,144,1)
(136,31,1)
(94,54,1)
(160,97,1)
(183,170,1)
(36,0,1)
(126,87,1)
(134,37,1)
(187,68,1)
(40,58,1)
(112,32,1)
(11,70,1)
(137,174,1)
(17,49,1)
(54,26,1)
(173,78,1)
(29,16,1)
(201,95,1)
(205,6,1)
(40,69,1)
(70,63,1)
(41,94,1)
(162,168,1)
(60,32,1)
(150,134,1)
(170,172,1)
(121,21,1)
(113,171,1)
(182,130,1)
(105,83,1)
(59,173,1)
(109,84,1)
(124,133,1)
(71,122,1)
(68,141,1)
(38,163,1)
(96,17,1)
(39,51,1)
(1,9,1)
(0,121,1)
(139,145,1)
(125,179,1)
(186,156,1)
(175,188,1)
(88,149,1)
(170,177,1)
(174,159,1)
(95,120,1)
(25,160,1)
(19,132,1)
(130,204,1)
(124,100,1)
(159,37,1)
(110,62,1)
(31,119,1)
(117,131,1)
(131,37,1)
(92,167,1)
(84,27,1)
(46,36,1)
(71,54,1)
(199,87,1)
(155,196,1)
(128,143,1)
(100,191,1)
(17,80,1)
(73,128,1)
(192,48,1)
(86,30,1)
(20,152,1)
(179,23,1)
(124,6,1)
(134,73,1)
(159,114,1)
(11,63,1)
(96,61,1)
(27,108,1)
(87,105,1)
(177,197,1)
(188,172,1)
(46,121,1)
(186,190,1)
(186,101,1)
(171,42,1)
(195,24,1)
(12,193,1)
(24,82,1)
(135,150,1)
(89,85,1)
(142,73,1)
(87,136,1)
(32,184,1)
(186,156,2)
(13,138,2)
(150,154,2)
(78,84,2)
(11,29,2)
(60,32,2)
(117,154,2)
(105,87,2)
(172,11,2)
(20,87,2)
(19,87,2)
(49,154,2)
(88,115,2)
(63,29,2)
(91,87,2)
(64,3,2)
(142,154,2)
(71,41,2)
(15,87,2)
(35,32,2)
(73,172,2)
(205,87,2)
(109,84,2)
(96,154,2)
(84,27,2)
(121,21,2)
(56,87,2)
(159,154,2)
(174,154,2)
(203,68,2)
(29,29,2)
(73,154,2)
(190,125,2)
(148,12,2)
(196,124,2)
(70,29,2)
(87,136,2)
(11,63,2)
(17,80,2)
(114,154,2)
(74,87,2)
(124,133,2)
(77,154,2)
(143,154,2)
(93,154,2)
(112,32,2)
(22,32,2)
(170,154,2)
(46,36,2)
(36,0,2)
(177,154,2)
(174,29,2)
(104,29,2)
(134,154,2)
(186,101,2)
(68,141,2)
(3,154,2)
(157,87,2)
(16,29,2)
(62,32,2)
(124,6,2)
(150,134,2)
(17,37,2)
(37,29,2)
(131,154,2)
(76,154,2)
(40,58,2)
(74,115,2)
(61,154,2)
(86,154,2)
(74,136,2)
(88,149,2)
(149,136,2)
(186,99,2)
(172,29,2)
(186,148,2)
(58,200,2)
(1,9,2)
(139,87,2)
(188,29,2)
(164,29,2)
(126,87,2)
(24,82,2)
(46,121,2)
(139,115,2)
(87,87,2)
(129,154,2)
(77,150,2)
(30,154,2)
(186,190,2)
(175,29,2)
(156,89,2)
(20,136,2)
(154,154,2)
(208,29,2)
(80,154,2)
(186,167,2)
(152,87,2)
(170,172,2)
(134,73,2)
(192,29,2)
(159,37,2)
(77,48,2)
(181,87,2)
(32,184,2)
(206,29,2)
(137,154,2)
(17,154,2)
(77,117,2)
(167,165,2)
(117,131,2)
(77,81,2)
(147,84,2)
(71,54,2)
(6,6,2)
(72,201,2)
(38,163,2)
(128,154,2)
(71,122,2)
(67,87,2)
(83,87,2)
(183,154,2)
(6,87,2)
(77,96,2)
(81,154,2)
(99,106,2)
(131,170,2)
(52,48,2)
(115,87,2)
(72,171,2)
(154,37,2)
(149,87,2)
(29,48,2)
(134,37,2)
(11,48,2)
(135,154,2)
(176,3,2)
(131,37,2)
(6,74,2)
(80,172,2)
(52,29,2)
(197,154,2)
(81,37,2)
(137,29,2)
(96,17,2)
(132,87,2)
(149,15,2)
(186,24,2)
(88,87,2)
(145,87,2)
(72,113,2)
(154,29,2)
(6,133,2)
-----------------------------------
(0,nr_free_highpages()
(1,get_page_state(&ps)
(2,"Active:%lu inactive:%lu dirty:%lu writeback:%lu free:%u\\n")
(3,temperature)
(4,zone)
(5,zone)
(6,total += nr << order)
(7,inactive)
(8,if (!zone->present_pages)
(9,&ps)
(10,lock)
(11,zone->pageset + cpu)
(12,zone->nr_inactive)
(13,printk("%s per-cpu:", zone->name)
(14,pageset)
(15,K(1UL)
(16,NR_CPUS)
(17,pageset->pcp[temperature])
(18,)
(19,nr)
(20,order++)
(21,nr_free_pages()
(22,continue;)
(23,zone)
(24,K(zone->nr_active)
(25,zone)
(26,active)
(27,zone->present_pages)
(28,0)
(29,cpu < NR_CPUS)
(30,"cpu %d %s: low %d, high %d, batch %d\\n")
(31,0)
(32,!zone->present_pages)
(33,zone)
(34,zone)
(35,printk(" empty\\n")
(36,K(nr_free_highpages()
(37,temperature = 0)
(38,printk("%s: ", zone->name)
(39,zone)
(40,spin_lock_irqsave(&zone->lock, flags)
(41,&inactive)
(42,nr_writeback)
(43,ps)
(44,zone)
(45,pages_low)
(46,printk("\\nFree pages: %11ukB (%ukB HighMem)
(47,inactive)
(48,cpu = 0)
(49,temperature)
(50,zone)
(51,"%s per-cpu:")
(52,++cpu)
(53,)
(54,&active)
(55,)
(56,order)
(57,order)
(58,&zone->lock)
(59,lock)
(60,"\\n")
(61,batch)
(62,printk("\\n")
(63,zone->pageset)
(64,"cold")
(65,"\\nFree pages: %11ukB (%ukB HighMem)
(66,pages_high)
(67,1UL)
(68,&zone->lock)
(69,flags)
(70,cpu)
(71,get_zone_counts(&active, &inactive, &free)
(72,printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu free:%u\\n",\n\\n\\t\\tactive,\n\\n\\t\\tinactive,\n\\n\\t\\tps.nr_dirty,\n\\n\\t\\tps.nr_writeback,\n\\n\\t\\tnr_free_pages()
(73,pageset->pcp)
(74,nr << order)
(75,)
(76,pcp)
(77,printk("cpu %d %s: low %d, high %d, batch %d\\n",\n\\n\\t\\t\\t\\t\\tcpu,\n\\n\\t\\t\\t\\t\\ttemperature ? "cold" : "hot",\n\\n\\t\\t\\t\\t\\tpageset->pcp[temperature].low,\n\\n\\t\\t\\t\\t\\tpageset->pcp[temperature].high,\n\\n\\t\\t\\t\\t\\tpageset->pcp[temperature].batch)
(78,continue;)
(79,name)
(80,pageset->pcp)
(81,temperature ? "cold" : "hot")
(82,zone->nr_active)
(83,order)
(84,!zone->present_pages)
(85,free_pages)
(86,cpu)
(87,order < MAX_ORDER)
(88,printk("%lu*%lukB ", nr, K(1UL)
(89,zone->free_pages)
(90,nr)
(91,order)
(92,zone)
(93,low)
(94,inactive)
(95,nr_dirty)
(96,pageset->pcp[temperature].batch)
(97,show_node(zone)
(98,active)
(99,K(zone->pages_low)
(100,total)
(101,zone->name)
(102,ps)
(103,name)
(104,pageset)
(105,MAX_ORDER)
(106,zone->pages_low)
(107,total)
(108,present_pages)
(109,"empty\\n")
(110,cpu)
(111,active)
(112," empty\\n")
(113,nr_free_pages()
(114,temperature)
(115,nr = 0)
(116,for (temperature = 0; temperature < 2; temperature++)
(117,pageset->pcp[temperature].low)
(118,)
(119,order)
(120,ps)
(121,K(nr_free_pages()
(122,&free)
(123,RET)
(124,K(total)
(125,zone->pages_min)
(126,nr)
(127,elem)
(128,pcp)
(129,high)
(130,show_node(zone)
(131,pageset->pcp[temperature])
(132,total)
(133,total = 0)
(134,pageset->pcp[temperature])
(135,pageset)
(136,order = 0)
(137,2)
(138,zone->name)
(139,++nr)
(140,cpu)
(141,zone->lock)
(142,temperature)
(143,pageset)
(144,free)
(145,nr)
(146,total)
(147,printk("empty\\n")
(148,K(zone->nr_inactive)
(149,K(1UL)
(150,pageset->pcp[temperature].high)
(151,)
(152,order)
(153,0)
(154,temperature < 2)
(155,show_swap_cache_info()
(156,K(zone->free_pages)
(157,nr)
(158,free)
(159,temperature++)
(160,"%s: ")
(161,show_node(zone)
(162,present_pages)
(163,zone->name)
(164,zone)
(165,zone->pages_high)
(166,)
(167,K(zone->pages_high)
(168,zone)
(169,nr_active)
(170,pageset->pcp)
(171,ps.nr_writeback)
(172,*pageset = zone->pageset + cpu)
(173,zone)
(174,temperature)
(175,0)
(176,"hot")
(177,pcp)
(178,name)
(179,pages_min)
(180,for (order = 0; order < MAX_ORDER; order++)
(181,0)
(182,"%s"\n\\n\\t\\t\\t" free:%lukB"\n\\n\\t\\t\\t" min:%lukB"\n\\n\\t\\t\\t" low:%lukB"\n\\n\\t\\t\\t" high:%lukB"\n\\n\\t\\t\\t" active:%lukB"\n\\n\\t\\t\\t" inactive:%lukB"\n\\n\\t\\t\\t"\\n")
(183,temperature)
(184,zone->present_pages)
(185,if (!zone->present_pages)
(186,printk("%s"\n\\n\\t\\t\\t" free:%lukB"\n\\n\\t\\t\\t" min:%lukB"\n\\n\\t\\t\\t" low:%lukB"\n\\n\\t\\t\\t" high:%lukB"\n\\n\\t\\t\\t" active:%lukB"\n\\n\\t\\t\\t" inactive:%lukB"\n\\n\\t\\t\\t"\\n",\n\\n\\t\\t\\tzone->name,\n\\n\\t\\t\\tK(zone->free_pages)
(187,flags)
(188,temperature)
(189,flags)
(190,K(zone->pages_min)
(191,"= %lukB\\n")
(192,cpu)
(193,nr_inactive)
(194,for (cpu = 0; cpu < NR_CPUS; ++cpu)
(195,zone)
(196,printk("= %lukB\\n", K(total)
(197,pageset)
(198,ps)
(199,zone)
(200,zone->lock)
(201,ps.nr_dirty)
(202,zone)
(203,spin_unlock_irqrestore(&zone->lock, flags)
(204,zone)
(205,"%lu*%lukB ")
(206,cpu)
(207,temperature)
(208,pageset)
(209,)
(210,zone)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^