-----label-----
1
-----code-----
static void
swr_flush_frontbuffer(struct pipe_screen *p_screen,
                      struct pipe_resource *resource,
                      unsigned level,
                      unsigned layer,
                      void *context_private,
                      struct pipe_box *sub_box)
{
   struct swr_screen *screen = swr_screen(p_screen);
   struct sw_winsys *winsys = screen->winsys;
   struct swr_resource *spr = swr_resource(resource);
   struct pipe_context *pipe = screen->pipe;

   if (pipe) {
      swr_fence_finish(p_screen, screen->flush_fence, 0);
      swr_resource_unused(resource);
      SwrEndFrame(swr_context(pipe)->swrContext);
   }

   debug_assert(spr->display_target);
   if (spr->display_target)
      winsys->displaytarget_display(
         winsys, spr->display_target, context_private, sub_box);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
23,24
25,26
25,27
27,28
27,29
30,31
30,32
31,32
33,34
33,35
36,37
36,38
36,39
36,40
36,41
36,42
36,43
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
54,56
54,57
57,58
58,59
58,60
59,60
62,63
63,64
63,65
64,65
66,67
66,68
66,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
79,80
79,81
79,82
82,83
83,84
83,85
84,85
87,88
87,89
88,89
90,91
90,92
90,93
91,92
92,93
92,94
92,95
92,96
93,94
95,96
97,98
97,99
98,99
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
112,113
112,114
113,114
113,115
114,115
116,117
119,120
120,121
120,122
121,122
123,124
123,125
124,125
127,128
127,129
128,129
128,130
129,130
132,133
133,134
133,135
133,136
133,137
133,138
134,135
134,136
135,136
138,139
140,141
140,142
141,142
144,145
146,147
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,22,24,26,28,29,32,34,35,40,42,43,47,49,53,55,56,60,61,65,67,68,72,74,78,80,81,85,86,89,94,96,99,100,101,105,107,111,115,117,118,122,125,126,130,131,136,137,139,142,143,145,147
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static voidswr_flush_frontbuffer(struct pipe_screen *p_screen,                      struct pipe_resource *resource,                      unsigned level,                      unsigned layer,                      void *context_private,                      struct pipe_box *sub_box){   struct swr_screen *screen = swr_screen(p_screen);   struct sw_winsys *winsys = screen->winsys;   struct swr_resource *spr = swr_resource(resource);   struct pipe_context *pipe = screen->pipe;   if (pipe) {      swr_fence_finish(p_screen, screen->flush_fence, 0);      swr_resource_unused(resource);      SwrEndFrame(swr_context(pipe)->swrContext);   }   debug_assert(spr->display_target);   if (spr->display_target)      winsys->displaytarget_display(         winsys, spr->display_target, context_private, sub_box);}
static void
swr_flush_frontbuffer(struct pipe_screen *p_screen,                      struct pipe_resource *resource,                      unsigned level,                      unsigned layer,                      void *context_private,                      struct pipe_box *sub_box)
swr_flush_frontbuffer
struct pipe_screen *p_screen
struct pipe_screen
pipe_screen
*p_screen
*
p_screen
struct pipe_resource *resource
struct pipe_resource
pipe_resource
*resource
*
resource
unsigned level
unsigned
level
level
unsigned layer
unsigned
layer
layer
void *context_private
void
*context_private
*
context_private
struct pipe_box *sub_box
struct pipe_box
pipe_box
*sub_box
*
sub_box
{   struct swr_screen *screen = swr_screen(p_screen);   struct sw_winsys *winsys = screen->winsys;   struct swr_resource *spr = swr_resource(resource);   struct pipe_context *pipe = screen->pipe;   if (pipe) {      swr_fence_finish(p_screen, screen->flush_fence, 0);      swr_resource_unused(resource);      SwrEndFrame(swr_context(pipe)->swrContext);   }   debug_assert(spr->display_target);   if (spr->display_target)      winsys->displaytarget_display(         winsys, spr->display_target, context_private, sub_box);}
struct swr_screen *screen = swr_screen(p_screen);
struct swr_screen *screen = swr_screen(p_screen);
struct swr_screen
swr_screen
*screen = swr_screen(p_screen)
*
screen
= swr_screen(p_screen)
swr_screen(p_screen)
swr_screen
swr_screen
p_screen
p_screen
struct sw_winsys *winsys = screen->winsys;
struct sw_winsys *winsys = screen->winsys;
struct sw_winsys
sw_winsys
*winsys = screen->winsys
*
winsys
= screen->winsys
screen->winsys
screen
screen
winsys
struct swr_resource *spr = swr_resource(resource);
struct swr_resource *spr = swr_resource(resource);
struct swr_resource
swr_resource
*spr = swr_resource(resource)
*
spr
= swr_resource(resource)
swr_resource(resource)
swr_resource
swr_resource
resource
resource
struct pipe_context *pipe = screen->pipe;
struct pipe_context *pipe = screen->pipe;
struct pipe_context
pipe_context
*pipe = screen->pipe
*
pipe
= screen->pipe
screen->pipe
screen
screen
pipe
if (pipe) {      swr_fence_finish(p_screen, screen->flush_fence, 0);      swr_resource_unused(resource);      SwrEndFrame(swr_context(pipe)->swrContext);   }
pipe
pipe
{      swr_fence_finish(p_screen, screen->flush_fence, 0);      swr_resource_unused(resource);      SwrEndFrame(swr_context(pipe)->swrContext);   }
swr_fence_finish(p_screen, screen->flush_fence, 0);
swr_fence_finish(p_screen, screen->flush_fence, 0)
swr_fence_finish
swr_fence_finish
p_screen
p_screen
screen->flush_fence
screen
screen
flush_fence
0
swr_resource_unused(resource);
swr_resource_unused(resource)
swr_resource_unused
swr_resource_unused
resource
resource
SwrEndFrame(swr_context(pipe)->swrContext);
SwrEndFrame(swr_context(pipe)->swrContext)
SwrEndFrame
SwrEndFrame
swr_context(pipe)->swrContext
swr_context(pipe)
swr_context
swr_context
pipe
pipe
swrContext
debug_assert(spr->display_target);
debug_assert(spr->display_target)
debug_assert
debug_assert
spr->display_target
spr
spr
display_target
if (spr->display_target)      winsys->displaytarget_display(         winsys, spr->display_target, context_private, sub_box);
spr->display_target
spr
spr
display_target
winsys->displaytarget_display(         winsys, spr->display_target, context_private, sub_box);
winsys->displaytarget_display(         winsys, spr->display_target, context_private, sub_box)
winsys->displaytarget_display
winsys
winsys
displaytarget_display
winsys
winsys
spr->display_target
spr
spr
display_target
context_private
context_private
sub_box
sub_box
-----joern-----
(2,18,0)
(9,10,0)
(52,49,0)
(27,8,0)
(49,17,0)
(30,39,0)
(48,3,0)
(49,35,0)
(3,11,0)
(44,30,0)
(32,43,0)
(31,11,0)
(4,49,0)
(14,4,0)
(52,27,0)
(37,43,0)
(28,52,0)
(15,17,0)
(51,2,0)
(10,46,0)
(7,3,0)
(54,39,0)
(43,8,0)
(29,11,0)
(41,19,0)
(11,3,0)
(58,17,0)
(46,17,0)
(0,27,0)
(8,43,0)
(15,40,0)
(43,15,0)
(50,17,0)
(16,27,0)
(6,17,0)
(27,13,0)
(36,49,0)
(35,49,0)
(27,52,0)
(40,15,0)
(40,25,0)
(41,47,0)
(21,17,0)
(57,8,0)
(1,4,0)
(26,30,0)
(53,44,0)
(18,19,0)
(24,41,0)
(38,52,0)
(33,10,0)
(55,27,0)
(44,2,0)
(3,15,0)
(18,2,0)
(42,35,0)
(22,15,0)
(23,39,0)
(12,40,0)
(34,17,0)
(30,17,0)
(45,17,0)
(39,15,0)
(27,56,0)
(11,25,0)
(8,17,0)
(10,49,0)
(35,47,0)
(11,19,0)
(39,30,0)
(2,44,0)
(46,10,0)
(3,7,1)
(57,15,1)
(28,55,1)
(5,4,1)
(2,51,1)
(15,40,1)
(10,33,1)
(11,25,1)
(39,15,1)
(9,20,1)
(43,37,1)
(11,29,1)
(35,47,1)
(41,24,1)
(7,48,1)
(46,10,1)
(43,15,1)
(0,52,1)
(52,49,1)
(11,3,1)
(31,20,1)
(23,54,1)
(4,1,1)
(27,13,1)
(5,27,1)
(39,23,1)
(20,30,1)
(27,8,1)
(55,4,1)
(26,49,1)
(3,15,1)
(29,3,1)
(27,16,1)
(16,0,1)
(38,28,1)
(1,14,1)
(2,44,1)
(8,43,1)
(36,8,1)
(32,57,1)
(18,2,1)
(30,39,1)
(40,25,1)
(40,12,1)
(10,49,1)
(41,47,1)
(24,11,1)
(27,52,1)
(53,41,1)
(49,35,1)
(51,44,1)
(12,22,1)
(42,36,1)
(9,18,1)
(44,53,1)
(4,49,1)
(27,56,1)
(52,38,1)
(54,26,1)
(37,32,1)
(48,31,1)
(44,30,1)
(35,42,1)
(14,46,1)
(33,9,1)
(31,20,2)
(10,49,2)
(7,20,2)
(11,3,2)
(35,47,2)
(39,15,2)
(3,20,2)
(11,25,2)
(53,20,2)
(11,20,2)
(30,39,2)
(18,20,2)
(48,20,2)
(3,15,2)
(29,20,2)
(43,15,2)
(8,43,2)
(15,40,2)
(27,56,2)
(41,20,2)
(27,8,2)
(52,49,2)
(27,4,2)
(16,4,2)
(44,20,2)
(28,4,2)
(2,20,2)
(52,4,2)
(18,2,2)
(27,52,2)
(49,35,2)
(51,20,2)
(0,4,2)
(46,10,2)
(2,44,2)
(40,25,2)
(55,4,2)
(27,13,2)
(41,47,2)
(4,49,2)
(44,30,2)
(38,4,2)
(24,20,2)
-----------------------------------
(0,context_private)
(1,display_target)
(2,swr_context(pipe)
(3,screen->flush_fence)
(4,spr->display_target)
(5,RET)
(6,if (pipe)
(7,flush_fence)
(8,*winsys = screen->winsys)
(9,spr)
(10,spr->display_target)
(11,swr_fence_finish(p_screen, screen->flush_fence, 0)
(12,p_screen)
(13,void *context_private)
(14,spr)
(15,*screen = swr_screen(p_screen)
(16,sub_box)
(17,)
(18,SwrEndFrame(swr_context(pipe)
(19,)
(20,pipe)
(21,spr)
(22,screen)
(23,pipe)
(24,resource)
(25,struct pipe_screen *p_screen)
(26,pipe)
(27,winsys->displaytarget_display(\n\\n         winsys, spr->display_target, context_private, sub_box)
(28,spr)
(29,0)
(30,*pipe = screen->pipe)
(31,p_screen)
(32,screen)
(33,display_target)
(34,pipe)
(35,swr_resource(resource)
(36,spr)
(37,winsys)
(38,display_target)
(39,screen->pipe)
(40,swr_screen(p_screen)
(41,swr_resource_unused(resource)
(42,resource)
(43,screen->winsys)
(44,swr_context(pipe)
(45,if (spr->display_target)
(46,debug_assert(spr->display_target)
(47,struct pipe_resource *resource)
(48,screen)
(49,*spr = swr_resource(resource)
(50,screen)
(51,swrContext)
(52,spr->display_target)
(53,pipe)
(54,screen)
(55,winsys)
(56,struct pipe_box *sub_box)
(57,winsys)
(58,winsys)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^