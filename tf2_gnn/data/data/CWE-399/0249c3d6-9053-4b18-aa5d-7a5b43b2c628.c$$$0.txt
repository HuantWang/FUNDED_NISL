-----label-----
1
-----code-----
static int f2fs_set_acl(struct inode *inode, int type,
			struct posix_acl *acl, struct page *ipage)
{
	struct f2fs_sb_info *sbi = F2FS_SB(inode->i_sb);
	struct f2fs_inode_info *fi = F2FS_I(inode);
	int name_index;
	void *value = NULL;
	size_t size = 0;
	int error;

	if (!test_opt(sbi, POSIX_ACL))
		return 0;
	if (S_ISLNK(inode->i_mode))
		return -EOPNOTSUPP;

	switch (type) {
	case ACL_TYPE_ACCESS:
		name_index = F2FS_XATTR_INDEX_POSIX_ACL_ACCESS;
		if (acl) {
			error = posix_acl_equiv_mode(acl, &inode->i_mode);
			if (error < 0)
				return error;
			set_acl_inode(fi, inode->i_mode);
			if (error == 0)
				acl = NULL;
		}
		break;

	case ACL_TYPE_DEFAULT:
		name_index = F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT;
		if (!S_ISDIR(inode->i_mode))
			return acl ? -EACCES : 0;
		break;

	default:
		return -EINVAL;
	}

	if (acl) {
		value = f2fs_acl_to_disk(acl, &size);
		if (IS_ERR(value)) {
			cond_clear_inode_flag(fi, FI_ACL_MODE);
			return (int)PTR_ERR(value);
		}
	}

	error = f2fs_setxattr(inode, name_index, "", value, size, ipage);

	kfree(value);
	if (!error)
		set_cached_acl(inode, type, acl);

	cond_clear_inode_flag(fi, FI_ACL_MODE);
	return error;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
27,42
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
39,40
39,41
40,41
43,44
44,45
44,46
45,46
47,48
47,49
47,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
59,60
61,62
62,63
62,64
64,65
64,66
64,67
67,68
68,69
70,71
71,72
71,73
72,73
74,75
74,76
76,77
78,79
79,80
79,81
81,82
83,84
83,85
84,85
85,86
85,87
85,88
86,87
88,89
90,91
92,93
94,95
94,96
95,96
95,97
96,97
98,99
98,100
99,100
102,103
103,104
104,105
106,107
106,108
107,108
109,110
109,111
109,112
109,113
109,114
109,115
109,116
109,117
109,118
109,119
110,111
111,112
113,114
114,115
114,116
115,116
117,118
119,120
119,121
120,121
122,123
122,124
122,125
122,126
123,124
124,125
124,126
125,126
127,128
127,129
127,130
128,129
130,131
132,133
133,134
133,135
134,135
137,138
137,139
138,139
138,140
139,140
142,143
143,144
145,146
146,147
146,148
146,149
147,148
149,150
151,152
151,153
152,153
155,156
155,157
156,157
156,158
157,158
160,161
161,162
161,163
162,163
164,165
167,168
168,169
170,171
171,172
171,173
172,173
174,175
176,177
176,178
177,178
178,179
178,180
179,180
181,182
181,183
182,183
185,186
186,187
186,188
186,189
187,188
189,190
190,191
195,196
196,197
197,198
199,200
199,201
200,201
202,203
202,204
203,204
204,205
204,206
205,206
207,208
207,209
207,210
208,209
210,211
212,213
213,214
215,216
215,217
216,217
216,218
217,218
219,220
221,222
221,223
222,223
223,224
223,225
223,226
224,225
226,227
228,229
230,231
231,232
231,233
232,233
232,234
235,236
235,237
236,237
238,239
240,241
241,242
241,243
242,243
244,245
244,246
244,247
244,248
244,249
244,250
244,251
245,246
247,248
249,250
252,253
254,255
256,257
258,259
259,260
259,261
260,261
262,263
264,265
264,266
265,266
266,267
268,269
269,270
269,271
269,272
269,273
270,271
272,273
274,275
276,277
278,279
279,280
279,281
279,282
280,281
282,283
284,285
286,287
287,288
-----nextToken-----
2,4,7,9,10,12,14,17,19,20,23,25,26,31,33,34,38,41,42,46,48,49,53,55,58,60,63,65,66,69,73,75,77,80,82,87,89,91,93,97,100,101,105,108,112,116,118,121,126,129,131,135,136,140,141,144,148,150,153,154,158,159,163,165,166,169,173,175,180,183,184,188,191,192,193,194,198,201,206,209,211,214,218,220,225,227,229,233,234,237,239,243,246,248,250,251,253,255,257,261,263,267,271,273,275,277,281,283,285,288
-----computeFrom-----
114,115
114,116
124,125
124,126
138,139
138,140
156,157
156,158
161,162
161,163
171,172
171,173
204,205
204,206
241,242
241,243
-----guardedBy-----
140,144
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;ConditionalExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int f2fs_set_acl(struct inode *inode, int type,			struct posix_acl *acl, struct page *ipage){	struct f2fs_sb_info *sbi = F2FS_SB(inode->i_sb);	struct f2fs_inode_info *fi = F2FS_I(inode);	int name_index;	void *value = NULL;	size_t size = 0;	int error;	if (!test_opt(sbi, POSIX_ACL))		return 0;	if (S_ISLNK(inode->i_mode))		return -EOPNOTSUPP;	switch (type) {	case ACL_TYPE_ACCESS:		name_index = F2FS_XATTR_INDEX_POSIX_ACL_ACCESS;		if (acl) {			error = posix_acl_equiv_mode(acl, &inode->i_mode);			if (error < 0)				return error;			set_acl_inode(fi, inode->i_mode);			if (error == 0)				acl = NULL;		}		break;	case ACL_TYPE_DEFAULT:		name_index = F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT;		if (!S_ISDIR(inode->i_mode))			return acl ? -EACCES : 0;		break;	default:		return -EINVAL;	}	if (acl) {		value = f2fs_acl_to_disk(acl, &size);		if (IS_ERR(value)) {			cond_clear_inode_flag(fi, FI_ACL_MODE);			return (int)PTR_ERR(value);		}	}	error = f2fs_setxattr(inode, name_index, "", value, size, ipage);	kfree(value);	if (!error)		set_cached_acl(inode, type, acl);	cond_clear_inode_flag(fi, FI_ACL_MODE);	return error;}
static int
f2fs_set_acl(struct inode *inode, int type,			struct posix_acl *acl, struct page *ipage)
f2fs_set_acl
struct inode *inode
struct inode
inode
*inode
*
inode
int type
int
type
type
struct posix_acl *acl
struct posix_acl
posix_acl
*acl
*
acl
struct page *ipage
struct page
page
*ipage
*
ipage
{	struct f2fs_sb_info *sbi = F2FS_SB(inode->i_sb);	struct f2fs_inode_info *fi = F2FS_I(inode);	int name_index;	void *value = NULL;	size_t size = 0;	int error;	if (!test_opt(sbi, POSIX_ACL))		return 0;	if (S_ISLNK(inode->i_mode))		return -EOPNOTSUPP;	switch (type) {	case ACL_TYPE_ACCESS:		name_index = F2FS_XATTR_INDEX_POSIX_ACL_ACCESS;		if (acl) {			error = posix_acl_equiv_mode(acl, &inode->i_mode);			if (error < 0)				return error;			set_acl_inode(fi, inode->i_mode);			if (error == 0)				acl = NULL;		}		break;	case ACL_TYPE_DEFAULT:		name_index = F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT;		if (!S_ISDIR(inode->i_mode))			return acl ? -EACCES : 0;		break;	default:		return -EINVAL;	}	if (acl) {		value = f2fs_acl_to_disk(acl, &size);		if (IS_ERR(value)) {			cond_clear_inode_flag(fi, FI_ACL_MODE);			return (int)PTR_ERR(value);		}	}	error = f2fs_setxattr(inode, name_index, "", value, size, ipage);	kfree(value);	if (!error)		set_cached_acl(inode, type, acl);	cond_clear_inode_flag(fi, FI_ACL_MODE);	return error;}
struct f2fs_sb_info *sbi = F2FS_SB(inode->i_sb);
struct f2fs_sb_info *sbi = F2FS_SB(inode->i_sb);
struct f2fs_sb_info
f2fs_sb_info
*sbi = F2FS_SB(inode->i_sb)
*
sbi
= F2FS_SB(inode->i_sb)
F2FS_SB(inode->i_sb)
F2FS_SB
F2FS_SB
inode->i_sb
inode
inode
i_sb
struct f2fs_inode_info *fi = F2FS_I(inode);
struct f2fs_inode_info *fi = F2FS_I(inode);
struct f2fs_inode_info
f2fs_inode_info
*fi = F2FS_I(inode)
*
fi
= F2FS_I(inode)
F2FS_I(inode)
F2FS_I
F2FS_I
inode
inode
int name_index;
int name_index;
int
name_index
name_index
void *value = NULL;
void *value = NULL;
void
*value = NULL
*
value
= NULL
NULL
NULL
size_t size = 0;
size_t size = 0;
size_t
size_t
size = 0
size
= 0
0
int error;
int error;
int
error
error
if (!test_opt(sbi, POSIX_ACL))		return 0;
!test_opt(sbi, POSIX_ACL)
test_opt(sbi, POSIX_ACL)
test_opt
test_opt
sbi
sbi
POSIX_ACL
POSIX_ACL
return 0;
0
if (S_ISLNK(inode->i_mode))		return -EOPNOTSUPP;
S_ISLNK(inode->i_mode)
S_ISLNK
S_ISLNK
inode->i_mode
inode
inode
i_mode
return -EOPNOTSUPP;
-EOPNOTSUPP
EOPNOTSUPP
EOPNOTSUPP
switch (type) {	case ACL_TYPE_ACCESS:		name_index = F2FS_XATTR_INDEX_POSIX_ACL_ACCESS;		if (acl) {			error = posix_acl_equiv_mode(acl, &inode->i_mode);			if (error < 0)				return error;			set_acl_inode(fi, inode->i_mode);			if (error == 0)				acl = NULL;		}		break;	case ACL_TYPE_DEFAULT:		name_index = F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT;		if (!S_ISDIR(inode->i_mode))			return acl ? -EACCES : 0;		break;	default:		return -EINVAL;	}
type
type
{	case ACL_TYPE_ACCESS:		name_index = F2FS_XATTR_INDEX_POSIX_ACL_ACCESS;		if (acl) {			error = posix_acl_equiv_mode(acl, &inode->i_mode);			if (error < 0)				return error;			set_acl_inode(fi, inode->i_mode);			if (error == 0)				acl = NULL;		}		break;	case ACL_TYPE_DEFAULT:		name_index = F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT;		if (!S_ISDIR(inode->i_mode))			return acl ? -EACCES : 0;		break;	default:		return -EINVAL;	}
case ACL_TYPE_ACCESS:
ACL_TYPE_ACCESS
ACL_TYPE_ACCESS
name_index = F2FS_XATTR_INDEX_POSIX_ACL_ACCESS;
name_index = F2FS_XATTR_INDEX_POSIX_ACL_ACCESS
name_index
name_index
F2FS_XATTR_INDEX_POSIX_ACL_ACCESS
F2FS_XATTR_INDEX_POSIX_ACL_ACCESS
if (acl) {			error = posix_acl_equiv_mode(acl, &inode->i_mode);			if (error < 0)				return error;			set_acl_inode(fi, inode->i_mode);			if (error == 0)				acl = NULL;		}
acl
acl
{			error = posix_acl_equiv_mode(acl, &inode->i_mode);			if (error < 0)				return error;			set_acl_inode(fi, inode->i_mode);			if (error == 0)				acl = NULL;		}
error = posix_acl_equiv_mode(acl, &inode->i_mode);
error = posix_acl_equiv_mode(acl, &inode->i_mode)
error
error
posix_acl_equiv_mode(acl, &inode->i_mode)
posix_acl_equiv_mode
posix_acl_equiv_mode
acl
acl
&inode->i_mode
inode->i_mode
inode
inode
i_mode
if (error < 0)				return error;
error < 0
error
error
0
return error;
error
error
set_acl_inode(fi, inode->i_mode);
set_acl_inode(fi, inode->i_mode)
set_acl_inode
set_acl_inode
fi
fi
inode->i_mode
inode
inode
i_mode
if (error == 0)				acl = NULL;
error == 0
error
error
0
acl = NULL;
acl = NULL
acl
acl
NULL
NULL
break;
case ACL_TYPE_DEFAULT:
ACL_TYPE_DEFAULT
ACL_TYPE_DEFAULT
name_index = F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT;
name_index = F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT
name_index
name_index
F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT
F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT
if (!S_ISDIR(inode->i_mode))			return acl ? -EACCES : 0;
!S_ISDIR(inode->i_mode)
S_ISDIR(inode->i_mode)
S_ISDIR
S_ISDIR
inode->i_mode
inode
inode
i_mode
return acl ? -EACCES : 0;
acl ? -EACCES : 0
acl
acl
-EACCES
EACCES
EACCES
0
break;
default:
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (acl) {		value = f2fs_acl_to_disk(acl, &size);		if (IS_ERR(value)) {			cond_clear_inode_flag(fi, FI_ACL_MODE);			return (int)PTR_ERR(value);		}	}
acl
acl
{		value = f2fs_acl_to_disk(acl, &size);		if (IS_ERR(value)) {			cond_clear_inode_flag(fi, FI_ACL_MODE);			return (int)PTR_ERR(value);		}	}
value = f2fs_acl_to_disk(acl, &size);
value = f2fs_acl_to_disk(acl, &size)
value
value
f2fs_acl_to_disk(acl, &size)
f2fs_acl_to_disk
f2fs_acl_to_disk
acl
acl
&size
size
size
if (IS_ERR(value)) {			cond_clear_inode_flag(fi, FI_ACL_MODE);			return (int)PTR_ERR(value);		}
IS_ERR(value)
IS_ERR
IS_ERR
value
value
{			cond_clear_inode_flag(fi, FI_ACL_MODE);			return (int)PTR_ERR(value);		}
cond_clear_inode_flag(fi, FI_ACL_MODE);
cond_clear_inode_flag(fi, FI_ACL_MODE)
cond_clear_inode_flag
cond_clear_inode_flag
fi
fi
FI_ACL_MODE
FI_ACL_MODE
return (int)PTR_ERR(value);
(int)PTR_ERR(value)
int
int

PTR_ERR(value)
PTR_ERR
PTR_ERR
value
value
error = f2fs_setxattr(inode, name_index, "", value, size, ipage);
error = f2fs_setxattr(inode, name_index, "", value, size, ipage)
error
error
f2fs_setxattr(inode, name_index, "", value, size, ipage)
f2fs_setxattr
f2fs_setxattr
inode
inode
name_index
name_index
""
value
value
size
size
ipage
ipage
kfree(value);
kfree(value)
kfree
kfree
value
value
if (!error)		set_cached_acl(inode, type, acl);
!error
error
error
set_cached_acl(inode, type, acl);
set_cached_acl(inode, type, acl)
set_cached_acl
set_cached_acl
inode
inode
type
type
acl
acl
cond_clear_inode_flag(fi, FI_ACL_MODE);
cond_clear_inode_flag(fi, FI_ACL_MODE)
cond_clear_inode_flag
cond_clear_inode_flag
fi
fi
FI_ACL_MODE
FI_ACL_MODE
return error;
error
error
-----joern-----
(30,7,0)
(35,77,0)
(54,12,0)
(44,28,0)
(114,63,0)
(69,133,0)
(0,10,0)
(12,66,0)
(139,84,0)
(55,36,0)
(87,9,0)
(135,41,0)
(40,133,0)
(71,101,0)
(113,114,0)
(50,29,0)
(98,10,0)
(5,7,0)
(38,133,0)
(6,63,0)
(58,89,0)
(66,79,0)
(102,133,0)
(135,29,0)
(142,113,0)
(74,44,0)
(122,54,0)
(137,133,0)
(42,128,0)
(112,143,0)
(33,92,0)
(25,20,0)
(41,135,0)
(77,106,0)
(81,133,0)
(33,29,0)
(34,13,0)
(123,78,0)
(103,114,0)
(102,113,0)
(27,114,0)
(28,78,0)
(72,9,0)
(105,36,0)
(67,41,0)
(1,78,0)
(141,133,0)
(46,114,0)
(19,16,0)
(16,143,0)
(9,75,0)
(92,33,0)
(70,2,0)
(59,42,0)
(17,12,0)
(42,106,0)
(5,64,0)
(120,133,0)
(80,124,0)
(121,96,0)
(124,77,0)
(96,143,0)
(93,15,0)
(7,30,0)
(114,29,0)
(129,50,0)
(104,102,0)
(101,109,0)
(115,133,0)
(34,136,0)
(89,84,0)
(94,22,0)
(124,62,0)
(34,15,0)
(41,143,0)
(111,135,0)
(100,136,0)
(48,2,0)
(101,28,0)
(88,90,0)
(20,2,0)
(8,133,0)
(47,124,0)
(125,33,0)
(83,50,0)
(110,68,0)
(75,23,0)
(21,89,0)
(73,143,0)
(91,115,0)
(143,112,0)
(76,59,0)
(119,114,0)
(7,133,0)
(114,89,0)
(134,2,0)
(85,133,0)
(56,115,0)
(140,96,0)
(34,37,0)
(99,115,0)
(13,28,0)
(18,133,0)
(45,16,0)
(64,5,0)
(52,5,0)
(23,75,0)
(136,2,0)
(51,13,0)
(65,28,0)
(53,42,0)
(127,112,0)
(12,17,0)
(43,2,0)
(41,78,0)
(138,40,0)
(126,56,0)
(39,114,0)
(10,109,0)
(132,7,0)
(28,101,0)
(84,77,0)
(84,106,0)
(118,135,0)
(114,86,0)
(30,50,0)
(96,79,0)
(131,31,0)
(22,37,0)
(40,63,0)
(114,90,0)
(10,29,0)
(36,28,0)
(84,56,0)
(14,114,0)
(3,124,0)
(31,113,0)
(117,133,0)
(75,9,0)
(57,33,0)
(34,102,0)
(12,54,0)
(116,5,0)
(114,115,0)
(112,29,0)
(97,133,0)
(124,106,0)
(24,20,0)
(144,63,0)
(124,29,0)
(63,133,0)
(60,77,0)
(107,21,0)
(130,42,0)
(54,89,0)
(90,2,0)
(113,133,0)
(9,29,0)
(95,90,0)
(89,68,0)
(82,2,0)
(50,30,0)
(16,133,0)
(34,128,0)
(84,89,0)
(49,100,0)
(11,2,0)
(108,44,0)
(143,133,0)
(114,113,0)
(40,89,0)
(56,84,0)
(114,20,0)
(42,59,0)
(34,66,0)
(109,10,0)
(109,101,0)
(61,2,0)
(101,106,0)
(34,102,1)
(65,32,1)
(94,92,1)
(136,100,1)
(12,54,1)
(66,12,1)
(46,103,1)
(50,29,1)
(42,106,1)
(19,31,1)
(128,42,1)
(91,63,1)
(118,67,1)
(44,28,1)
(64,5,1)
(22,94,1)
(124,62,1)
(143,112,1)
(34,66,1)
(32,20,1)
(57,64,1)
(40,138,1)
(101,109,1)
(122,96,1)
(53,23,1)
(5,7,1)
(47,3,1)
(144,143,1)
(24,25,1)
(10,98,1)
(34,13,1)
(39,142,1)
(116,52,1)
(33,125,1)
(129,83,1)
(140,21,1)
(56,126,1)
(125,57,1)
(36,105,1)
(70,32,1)
(20,24,1)
(56,115,1)
(54,89,1)
(19,124,1)
(14,27,1)
(114,86,1)
(40,89,1)
(60,35,1)
(51,44,1)
(142,26,1)
(104,16,1)
(9,87,1)
(102,113,1)
(30,50,1)
(98,0,1)
(6,144,1)
(76,53,1)
(114,115,1)
(49,4,1)
(42,59,1)
(37,22,1)
(114,20,1)
(101,106,1)
(48,23,1)
(58,26,1)
(28,101,1)
(89,84,1)
(95,88,1)
(54,122,1)
(55,41,1)
(96,143,1)
(131,40,1)
(40,63,1)
(109,10,1)
(124,47,1)
(92,33,1)
(90,95,1)
(135,111,1)
(70,36,1)
(124,77,1)
(127,73,1)
(115,99,1)
(25,4,1)
(113,114,1)
(34,128,1)
(34,15,1)
(142,21,1)
(77,60,1)
(52,115,1)
(88,4,1)
(34,136,1)
(41,143,1)
(12,17,1)
(10,29,1)
(21,89,1)
(105,55,1)
(23,75,1)
(124,106,1)
(36,28,1)
(42,130,1)
(112,29,1)
(121,140,1)
(75,9,1)
(114,29,1)
(100,49,1)
(130,53,1)
(102,104,1)
(135,29,1)
(126,139,1)
(13,51,1)
(96,121,1)
(103,39,1)
(7,30,1)
(63,6,1)
(5,116,1)
(84,56,1)
(72,90,1)
(15,93,1)
(50,129,1)
(114,89,1)
(67,44,1)
(0,71,1)
(41,135,1)
(45,19,1)
(84,77,1)
(59,76,1)
(70,77,1)
(34,37,1)
(84,106,1)
(31,113,1)
(9,29,1)
(114,63,1)
(112,127,1)
(31,131,1)
(77,106,1)
(138,113,1)
(107,89,1)
(71,65,1)
(99,91,1)
(114,14,1)
(73,7,1)
(44,74,1)
(27,119,1)
(139,58,1)
(16,143,1)
(124,29,1)
(21,107,1)
(74,108,1)
(13,28,1)
(35,36,1)
(33,29,1)
(93,64,1)
(26,70,1)
(119,46,1)
(3,80,1)
(4,92,1)
(87,72,1)
(83,132,1)
(114,90,1)
(80,31,1)
(16,45,1)
(111,118,1)
(108,28,1)
(26,48,1)
(114,20,2)
(56,26,2)
(102,113,2)
(102,21,2)
(13,28,2)
(118,44,2)
(57,64,2)
(114,86,2)
(20,4,2)
(126,26,2)
(143,112,2)
(64,5,2)
(87,4,2)
(34,13,2)
(131,21,2)
(103,26,2)
(28,32,2)
(40,26,2)
(44,32,2)
(88,4,2)
(37,92,2)
(70,32,2)
(27,21,2)
(35,36,2)
(16,26,2)
(22,92,2)
(114,21,2)
(66,21,2)
(3,31,2)
(136,4,2)
(65,32,2)
(36,44,2)
(34,102,2)
(114,63,2)
(30,50,2)
(84,26,2)
(124,29,2)
(40,21,2)
(56,115,2)
(23,4,2)
(77,106,2)
(75,4,2)
(103,21,2)
(104,21,2)
(54,89,2)
(47,31,2)
(15,64,2)
(114,115,2)
(45,26,2)
(67,44,2)
(26,32,2)
(36,28,2)
(124,106,2)
(14,21,2)
(48,23,2)
(101,32,2)
(113,114,2)
(142,26,2)
(98,32,2)
(90,4,2)
(74,32,2)
(84,77,2)
(33,64,2)
(28,101,2)
(54,21,2)
(89,84,2)
(128,23,2)
(31,21,2)
(31,113,2)
(51,44,2)
(113,26,2)
(75,9,2)
(25,4,2)
(7,30,2)
(14,26,2)
(80,31,2)
(124,62,2)
(39,21,2)
(114,29,2)
(92,64,2)
(76,53,2)
(124,77,2)
(104,26,2)
(31,26,2)
(32,4,2)
(125,64,2)
(122,21,2)
(19,26,2)
(34,15,2)
(108,32,2)
(72,4,2)
(33,29,2)
(89,26,2)
(131,26,2)
(12,21,2)
(60,36,2)
(40,89,2)
(96,21,2)
(135,44,2)
(16,21,2)
(23,75,2)
(16,143,2)
(142,21,2)
(46,21,2)
(92,33,2)
(138,21,2)
(101,109,2)
(112,29,2)
(114,89,2)
(5,7,2)
(130,53,2)
(84,56,2)
(140,21,2)
(139,26,2)
(0,32,2)
(41,143,2)
(34,37,2)
(94,92,2)
(111,44,2)
(40,63,2)
(26,44,2)
(109,32,2)
(135,29,2)
(102,26,2)
(55,44,2)
(121,21,2)
(138,26,2)
(26,23,2)
(42,106,2)
(24,4,2)
(77,36,2)
(109,10,2)
(13,44,2)
(114,90,2)
(44,28,2)
(100,4,2)
(105,44,2)
(70,44,2)
(12,17,2)
(113,21,2)
(12,54,2)
(41,44,2)
(41,135,2)
(21,26,2)
(45,21,2)
(95,4,2)
(96,143,2)
(71,32,2)
(93,64,2)
(119,21,2)
(34,66,2)
(9,29,2)
(58,26,2)
(10,29,2)
(4,92,2)
(59,53,2)
(10,32,2)
(84,106,2)
(34,128,2)
(49,4,2)
(119,26,2)
(39,26,2)
(46,26,2)
(34,136,2)
(9,4,2)
(19,21,2)
(50,29,2)
(107,26,2)
(114,26,2)
(42,59,2)
(53,23,2)
(101,106,2)
(124,31,2)
(42,23,2)
(27,26,2)
(21,89,2)
-----------------------------------
(0,inode)
(1,if (error == 0)
(2,)
(3,type)
(4,type)
(5,test_opt(sbi, POSIX_ACL)
(6,NULL)
(7,*sbi = F2FS_SB(inode->i_sb)
(8,switch (type)
(9,inode->i_mode)
(10,inode->i_mode)
(11,default:)
(12,(int)
(13,return error;)
(14,ipage)
(15,return 0;)
(16,cond_clear_inode_flag(fi, FI_ACL_MODE)
(17,int)
(18,sbi)
(19,fi)
(20,name_index = F2FS_XATTR_INDEX_POSIX_ACL_ACCESS)
(21,IS_ERR(value)
(22,-EOPNOTSUPP)
(23,!S_ISDIR(inode->i_mode)
(24,F2FS_XATTR_INDEX_POSIX_ACL_ACCESS)
(25,name_index)
(26,acl)
(27,size)
(28,error = posix_acl_equiv_mode(acl, &inode->i_mode)
(29,struct inode *inode)
(30,F2FS_SB(inode->i_sb)
(31,!error)
(32,acl)
(33,inode->i_mode)
(34,RET)
(35,acl)
(36,error == 0)
(37,return -EOPNOTSUPP;)
(38,if (acl)
(39,inode)
(40,kfree(value)
(41,set_acl_inode(fi, inode->i_mode)
(42,acl ? -EACCES : 0)
(43,case ACL_TYPE_DEFAULT:)
(44,error < 0)
(45,FI_ACL_MODE)
(46,"")
(47,acl)
(48,break;)
(49,EINVAL)
(50,inode->i_sb)
(51,error)
(52,sbi)
(53,acl)
(54,PTR_ERR(value)
(55,error)
(56,&size)
(57,inode)
(58,value)
(59,-EACCES)
(60,NULL)
(61,case ACL_TYPE_ACCESS:)
(62,int type)
(63,*value = NULL)
(64,!test_opt(sbi, POSIX_ACL)
(65,error)
(66,return (int)
(67,fi)
(68,)
(69,if (!error)
(70,break;)
(71,acl)
(72,inode)
(73,fi)
(74,0)
(75,S_ISDIR(inode->i_mode)
(76,EACCES)
(77,acl = NULL)
(78,)
(79,)
(80,inode)
(81,if (S_ISLNK(inode->i_mode)
(82,if (!S_ISDIR(inode->i_mode)
(83,inode)
(84,f2fs_acl_to_disk(acl, &size)
(85,name_index)
(86,struct page *ipage)
(87,i_mode)
(88,name_index)
(89,value = f2fs_acl_to_disk(acl, &size)
(90,name_index = F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT)
(91,size)
(92,S_ISLNK(inode->i_mode)
(93,0)
(94,EOPNOTSUPP)
(95,F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT)
(96,cond_clear_inode_flag(fi, FI_ACL_MODE)
(97,size)
(98,i_mode)
(99,0)
(100,-EINVAL)
(101,posix_acl_equiv_mode(acl, &inode->i_mode)
(102,return error;)
(103,name_index)
(104,error)
(105,0)
(106,struct posix_acl *acl)
(107,value)
(108,error)
(109,&inode->i_mode)
(110,if (IS_ERR(value)
(111,i_mode)
(112,F2FS_I(inode)
(113,error = f2fs_setxattr(inode, name_index, "", value, size, ipage)
(114,f2fs_setxattr(inode, name_index, "", value, size, ipage)
(115,size = 0)
(116,POSIX_ACL)
(117,error)
(118,inode)
(119,value)
(120,fi)
(121,FI_ACL_MODE)
(122,value)
(123,if (error < 0)
(124,set_cached_acl(inode, type, acl)
(125,i_mode)
(126,size)
(127,inode)
(128,return acl ? -EACCES : 0;)
(129,i_sb)
(130,0)
(131,error)
(132,sbi)
(133,)
(134,if (acl)
(135,inode->i_mode)
(136,return -EINVAL;)
(137,value)
(138,value)
(139,acl)
(140,fi)
(141,if (!test_opt(sbi, POSIX_ACL)
(142,error)
(143,*fi = F2FS_I(inode)
(144,value)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^