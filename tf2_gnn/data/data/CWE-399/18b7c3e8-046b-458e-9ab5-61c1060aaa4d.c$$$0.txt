-----label-----
0
-----code-----
static void acpi_scan_init_hotplug(acpi_handle handle, int type)
{
	struct acpi_device_pnp pnp = {};
	struct acpi_hardware_id *hwid;
	struct acpi_scan_handler *handler;

	INIT_LIST_HEAD(&pnp.ids);
	acpi_set_pnp_ids(handle, &pnp, type);

	if (!pnp.type.hardware_id)
		return;

	/*
	 * This relies on the fact that acpi_install_notify_handler() will not
	 * install the same notify handler routine twice for the same handle.
	 */
	list_for_each_entry(hwid, &pnp.ids, list) {
		handler = acpi_scan_match_handler(hwid->id, NULL);
		if (handler) {
			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,
					acpi_hotplug_notify_cb, handler);
			break;
		}
	}

	acpi_free_pnp_ids(&pnp);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
10,11
10,12
12,13
14,15
14,16
14,17
14,18
14,19
14,20
14,21
14,22
14,23
14,24
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
30,31
31,32
31,33
32,33
34,35
34,36
37,38
38,39
38,40
39,40
41,42
42,43
42,44
43,44
46,47
47,48
47,49
47,50
47,51
48,49
50,51
52,53
53,54
55,56
57,58
57,59
58,59
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
67,70
67,71
68,69
70,71
72,73
73,74
73,75
74,75
77,78
79,80
80,81
80,82
81,82
82,83
82,84
83,84
85,86
85,87
85,88
86,87
88,89
88,90
89,90
92,93
94,95
94,96
95,96
97,98
97,99
98,99
99,100
99,101
99,102
99,103
99,104
100,101
102,103
104,105
106,107
108,109
111,112
112,113
112,114
113,114
115,116
116,117
-----nextToken-----
2,4,7,9,11,13,18,20,22,26,28,29,33,35,36,40,44,45,49,51,54,56,62,63,64,65,69,71,75,76,78,84,87,90,91,93,96,101,103,105,107,109,110,114,117
-----computeFrom-----
82,83
82,84
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
static void acpi_scan_init_hotplug(acpi_handle handle, int type){	struct acpi_device_pnp pnp = {};	struct acpi_hardware_id *hwid;	struct acpi_scan_handler *handler;	INIT_LIST_HEAD(&pnp.ids);	acpi_set_pnp_ids(handle, &pnp, type);	if (!pnp.type.hardware_id)		return;	/*	 * This relies on the fact that acpi_install_notify_handler() will not	 * install the same notify handler routine twice for the same handle.	 */	list_for_each_entry(hwid, &pnp.ids, list) {		handler = acpi_scan_match_handler(hwid->id, NULL);		if (handler) {			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);			break;		}	}	acpi_free_pnp_ids(&pnp);}
static void
acpi_scan_init_hotplug(acpi_handle handle, int type)
acpi_scan_init_hotplug
acpi_handle handle
acpi_handle
acpi_handle
handle
handle
int type
int
type
type
{	struct acpi_device_pnp pnp = {};	struct acpi_hardware_id *hwid;	struct acpi_scan_handler *handler;	INIT_LIST_HEAD(&pnp.ids);	acpi_set_pnp_ids(handle, &pnp, type);	if (!pnp.type.hardware_id)		return;	/*	 * This relies on the fact that acpi_install_notify_handler() will not	 * install the same notify handler routine twice for the same handle.	 */	list_for_each_entry(hwid, &pnp.ids, list) {		handler = acpi_scan_match_handler(hwid->id, NULL);		if (handler) {			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);			break;		}	}	acpi_free_pnp_ids(&pnp);}
struct acpi_device_pnp pnp = {};
struct acpi_device_pnp pnp = {};
struct acpi_device_pnp
acpi_device_pnp
pnp = {}
pnp
= {}
{}
struct acpi_hardware_id *hwid;
struct acpi_hardware_id *hwid;
struct acpi_hardware_id
acpi_hardware_id
*hwid
*
hwid
struct acpi_scan_handler *handler;
struct acpi_scan_handler *handler;
struct acpi_scan_handler
acpi_scan_handler
*handler
*
handler
INIT_LIST_HEAD(&pnp.ids);
INIT_LIST_HEAD(&pnp.ids)
INIT_LIST_HEAD
INIT_LIST_HEAD
&pnp.ids
pnp.ids
pnp
pnp
ids
acpi_set_pnp_ids(handle, &pnp, type);
acpi_set_pnp_ids(handle, &pnp, type)
acpi_set_pnp_ids
acpi_set_pnp_ids
handle
handle
&pnp
pnp
pnp
type
type
if (!pnp.type.hardware_id)		return;
!pnp.type.hardware_id
pnp.type.hardware_id
pnp.type
pnp
pnp
type
hardware_id
return;
list_for_each_entry(hwid, &pnp.ids, list)
list_for_each_entry(hwid, &pnp.ids, list)
list_for_each_entry
list_for_each_entry
hwid
hwid
&pnp.ids
pnp.ids
pnp
pnp
ids
list
list
)
{		handler = acpi_scan_match_handler(hwid->id, NULL);		if (handler) {			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);			break;		}	}
handler = acpi_scan_match_handler(hwid->id, NULL);
handler = acpi_scan_match_handler(hwid->id, NULL)
handler
handler
acpi_scan_match_handler(hwid->id, NULL)
acpi_scan_match_handler
acpi_scan_match_handler
hwid->id
hwid
hwid
id
NULL
NULL
if (handler) {			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);			break;		}
handler
handler
{			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);			break;		}
acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);
acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler)
acpi_install_notify_handler
acpi_install_notify_handler
handle
handle
ACPI_SYSTEM_NOTIFY
ACPI_SYSTEM_NOTIFY
acpi_hotplug_notify_cb
acpi_hotplug_notify_cb
handler
handler
break;
acpi_free_pnp_ids(&pnp);
acpi_free_pnp_ids(&pnp)
acpi_free_pnp_ids
acpi_free_pnp_ids
&pnp
pnp
pnp
-----joern-----
(15,27,0)
(28,21,0)
(33,36,0)
(24,38,0)
(7,32,0)
(39,20,0)
(12,30,0)
(6,27,0)
(3,43,0)
(41,31,0)
(30,13,0)
(27,29,0)
(23,26,0)
(30,31,0)
(25,19,0)
(1,19,0)
(40,20,0)
(16,20,0)
(13,19,0)
(28,25,0)
(31,38,0)
(2,26,0)
(9,26,0)
(20,0,0)
(26,36,0)
(29,44,0)
(20,18,0)
(31,30,0)
(8,38,0)
(42,21,0)
(35,29,0)
(20,19,0)
(17,19,0)
(22,7,0)
(37,13,0)
(26,30,0)
(21,28,0)
(25,28,0)
(44,29,0)
(11,21,0)
(5,19,0)
(14,19,0)
(32,7,0)
(20,16,0)
(4,26,0)
(34,16,0)
(26,18,0)
(32,19,0)
(29,27,0)
(38,31,0)
(32,7,1)
(9,2,1)
(28,21,1)
(21,42,1)
(15,20,1)
(6,15,1)
(24,12,1)
(42,11,1)
(7,22,1)
(20,0,1)
(22,10,1)
(23,9,1)
(29,35,1)
(44,29,1)
(31,38,1)
(25,28,1)
(2,10,1)
(22,33,1)
(3,32,1)
(39,16,1)
(20,16,1)
(10,30,1)
(12,44,1)
(8,24,1)
(34,40,1)
(40,25,1)
(26,4,1)
(41,38,1)
(30,31,1)
(33,26,1)
(26,30,1)
(4,23,1)
(35,27,1)
(16,34,1)
(29,27,1)
(20,18,1)
(38,8,1)
(27,6,1)
(31,41,1)
(43,44,1)
(3,43,1)
(26,18,1)
(20,39,1)
(8,44,2)
(33,10,2)
(4,10,2)
(12,44,2)
(30,44,2)
(26,10,2)
(26,30,2)
(24,44,2)
(20,0,2)
(44,29,2)
(30,31,2)
(28,21,2)
(26,18,2)
(29,27,2)
(38,44,2)
(20,18,2)
(23,10,2)
(32,7,2)
(10,44,2)
(22,44,2)
(31,44,2)
(9,10,2)
(31,38,2)
(7,44,2)
(3,43,2)
(25,28,2)
(2,10,2)
(43,44,2)
(32,44,2)
(20,16,2)
(41,44,2)
-----------------------------------
(0,int type)
(1,)
(2,handle)
(3,RET)
(4,handler)
(5,hwid)
(6,type)
(7,&pnp)
(8,id)
(9,ACPI_SYSTEM_NOTIFY)
(10,handler)
(11,pnp)
(12,handler)
(13,)
(14,if (!pnp.type.hardware_id)
(15,pnp)
(16,&pnp)
(17,handler)
(18,acpi_handle handle)
(19,)
(20,acpi_set_pnp_ids(handle, &pnp, type)
(21,pnp.ids)
(22,pnp)
(23,acpi_hotplug_notify_cb)
(24,hwid)
(25,INIT_LIST_HEAD(&pnp.ids)
(26,acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,\n\\n\\t\\t\\t\\t\\tacpi_hotplug_notify_cb, handler)
(27,pnp.type)
(28,&pnp.ids)
(29,pnp.type.hardware_id)
(30,handler = acpi_scan_match_handler(hwid->id, NULL)
(31,acpi_scan_match_handler(hwid->id, NULL)
(32,acpi_free_pnp_ids(&pnp)
(33,break;)
(34,pnp)
(35,hardware_id)
(36,)
(37,if (handler)
(38,hwid->id)
(39,type)
(40,handle)
(41,NULL)
(42,ids)
(43,return;)
(44,!pnp.type.hardware_id)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^