-----label-----
1
-----code-----
static int tpk_printk(const unsigned char *buf, int count)
{
	static char tmp[TPK_STR_SIZE + 4];
	int i = tpk_curr;

	if (buf == NULL) {
		/* flush tmp[] */
		if (tpk_curr > 0) {
			/* non nl or cr terminated message - add nl */
			tmp[tpk_curr + 0] = '\n';
			tmp[tpk_curr + 1] = '\0';
			printk(KERN_INFO "%s%s", tpk_tag, tmp);
			tpk_curr = 0;
		}
		return i;
	}

	for (i = 0; i < count; i++) {
		tmp[tpk_curr] = buf[i];
		if (tpk_curr < TPK_STR_SIZE) {
			switch (buf[i]) {
			case '\r':
				/* replace cr with nl */
				tmp[tpk_curr + 0] = '\n';
				tmp[tpk_curr + 1] = '\0';
				printk(KERN_INFO "%s%s", tpk_tag, tmp);
				tpk_curr = 0;
				if (buf[i + 1] == '\n')
					i++;
				break;
			case '\n':
				tmp[tpk_curr + 1] = '\0';
				printk(KERN_INFO "%s%s", tpk_tag, tmp);
				tpk_curr = 0;
				break;
			default:
				tpk_curr++;
			}
		} else {
			/* end of tmp buffer reached: cut the message in two */
			tmp[tpk_curr + 1] = '\\';
			tmp[tpk_curr + 2] = '\n';
			tmp[tpk_curr + 3] = '\0';
			printk(KERN_INFO "%s%s", tpk_tag, tmp);
			tpk_curr = 0;
		}
	}

	return count;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
12,13
14,15
14,16
14,17
14,18
14,19
15,16
16,17
16,18
18,19
18,20
20,21
21,22
21,23
22,23
25,26
26,27
26,28
28,29
28,30
30,31
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
39,41
40,41
40,42
41,42
41,43
42,43
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
48,50
49,50
51,52
51,53
52,53
56,57
57,58
57,59
58,59
58,60
59,60
61,62
61,63
62,63
66,67
67,68
68,69
68,70
69,70
72,73
73,74
75,76
75,77
75,78
75,79
76,77
77,78
77,79
78,79
81,82
81,83
82,83
84,85
86,87
87,88
89,90
89,91
90,91
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
98,99
100,101
102,103
102,104
102,105
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
110,112
111,112
113,114
115,116
115,117
115,118
115,119
115,120
115,121
115,122
115,123
115,124
115,125
115,126
115,127
115,128
115,129
116,117
118,119
119,120
119,121
120,121
120,122
121,122
123,124
123,125
124,125
128,129
129,130
129,131
130,131
130,132
131,132
133,134
133,135
134,135
138,139
139,140
140,141
140,142
141,142
144,145
144,146
145,146
145,147
146,147
146,148
147,148
149,150
149,151
150,151
154,155
155,156
156,157
159,160
161,162
162,163
162,164
163,164
163,165
164,165
166,167
166,168
167,168
171,172
172,173
173,174
173,175
174,175
179,180
180,181
181,182
183,184
183,185
183,186
183,187
183,188
184,185
185,186
185,187
186,187
186,188
187,188
189,190
189,191
190,191
194,195
195,196
195,197
196,197
196,198
197,198
199,200
199,201
200,201
204,205
205,206
205,207
206,207
206,208
207,208
209,210
209,211
210,211
214,215
215,216
216,217
216,218
217,218
220,221
221,222
-----nextToken-----
2,4,6,8,9,11,13,17,19,23,24,27,29,32,36,38,43,44,50,53,54,55,60,63,64,65,70,71,74,79,80,83,85,88,94,96,99,101,105,107,112,114,117,122,125,126,127,132,135,136,137,142,143,148,151,152,153,157,158,160,165,168,169,170,175,176,177,178,182,188,191,192,193,198,201,202,203,208,211,212,213,218,219,222
-----computeFrom-----
21,22
21,23
34,35
34,36
41,42
41,43
47,48
47,49
51,52
51,53
57,58
57,59
61,62
61,63
68,69
68,70
77,78
77,79
81,82
81,83
91,92
91,93
103,104
103,105
119,120
119,121
123,124
123,125
129,130
129,131
133,134
133,135
140,141
140,142
145,146
145,147
149,150
149,151
162,163
162,164
166,167
166,168
173,174
173,175
185,186
185,187
189,190
189,191
195,196
195,197
199,200
199,201
205,206
205,207
209,210
209,211
216,217
216,218
-----guardedBy-----
43,70
105,182
151,157
-----guardedByNegation-----
105,218
-----lastLexicalUse-----
105,218
-----jump-----
105,218
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;SwitchStatement;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int tpk_printk(const unsigned char *buf, int count){	static char tmp[TPK_STR_SIZE + 4];	int i = tpk_curr;	if (buf == NULL) {		/* flush tmp[] */		if (tpk_curr > 0) {			/* non nl or cr terminated message - add nl */			tmp[tpk_curr + 0] = '\n';			tmp[tpk_curr + 1] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}		return i;	}	for (i = 0; i < count; i++) {		tmp[tpk_curr] = buf[i];		if (tpk_curr < TPK_STR_SIZE) {			switch (buf[i]) {			case '\r':				/* replace cr with nl */				tmp[tpk_curr + 0] = '\n';				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				if (buf[i + 1] == '\n')					i++;				break;			case '\n':				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				break;			default:				tpk_curr++;			}		} else {			/* end of tmp buffer reached: cut the message in two */			tmp[tpk_curr + 1] = '\\';			tmp[tpk_curr + 2] = '\n';			tmp[tpk_curr + 3] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}	}	return count;}
static int
tpk_printk(const unsigned char *buf, int count)
tpk_printk
const unsigned char *buf
const unsigned char
*buf
*
buf
int count
int
count
count
{	static char tmp[TPK_STR_SIZE + 4];	int i = tpk_curr;	if (buf == NULL) {		/* flush tmp[] */		if (tpk_curr > 0) {			/* non nl or cr terminated message - add nl */			tmp[tpk_curr + 0] = '\n';			tmp[tpk_curr + 1] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}		return i;	}	for (i = 0; i < count; i++) {		tmp[tpk_curr] = buf[i];		if (tpk_curr < TPK_STR_SIZE) {			switch (buf[i]) {			case '\r':				/* replace cr with nl */				tmp[tpk_curr + 0] = '\n';				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				if (buf[i + 1] == '\n')					i++;				break;			case '\n':				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				break;			default:				tpk_curr++;			}		} else {			/* end of tmp buffer reached: cut the message in two */			tmp[tpk_curr + 1] = '\\';			tmp[tpk_curr + 2] = '\n';			tmp[tpk_curr + 3] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}	}	return count;}
static char tmp[TPK_STR_SIZE + 4];
static char tmp[TPK_STR_SIZE + 4];
static char
tmp[TPK_STR_SIZE + 4]
tmp
[TPK_STR_SIZE + 4]
TPK_STR_SIZE + 4
TPK_STR_SIZE
TPK_STR_SIZE
4
int i = tpk_curr;
int i = tpk_curr;
int
i = tpk_curr
i
= tpk_curr
tpk_curr
tpk_curr
if (buf == NULL) {		/* flush tmp[] */		if (tpk_curr > 0) {			/* non nl or cr terminated message - add nl */			tmp[tpk_curr + 0] = '\n';			tmp[tpk_curr + 1] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}		return i;	}
buf == NULL
buf
buf
NULL
NULL
{		/* flush tmp[] */		if (tpk_curr > 0) {			/* non nl or cr terminated message - add nl */			tmp[tpk_curr + 0] = '\n';			tmp[tpk_curr + 1] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}		return i;	}
if (tpk_curr > 0) {			/* non nl or cr terminated message - add nl */			tmp[tpk_curr + 0] = '\n';			tmp[tpk_curr + 1] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}
tpk_curr > 0
tpk_curr
tpk_curr
0
{			/* non nl or cr terminated message - add nl */			tmp[tpk_curr + 0] = '\n';			tmp[tpk_curr + 1] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}
tmp[tpk_curr + 0] = '\n';
tmp[tpk_curr + 0] = '\n'
tmp[tpk_curr + 0]
tmp
tmp
tpk_curr + 0
tpk_curr
tpk_curr
0
'\n'
tmp[tpk_curr + 1] = '\0';
tmp[tpk_curr + 1] = '\0'
tmp[tpk_curr + 1]
tmp
tmp
tpk_curr + 1
tpk_curr
tpk_curr
1
'\0'
printk(KERN_INFO "%s%s", tpk_tag, tmp);
tpk_curr = 0;
tpk_curr = 0
tpk_curr
tpk_curr
0
return i;
i
i
for (i = 0; i < count; i++) {		tmp[tpk_curr] = buf[i];		if (tpk_curr < TPK_STR_SIZE) {			switch (buf[i]) {			case '\r':				/* replace cr with nl */				tmp[tpk_curr + 0] = '\n';				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				if (buf[i + 1] == '\n')					i++;				break;			case '\n':				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				break;			default:				tpk_curr++;			}		} else {			/* end of tmp buffer reached: cut the message in two */			tmp[tpk_curr + 1] = '\\';			tmp[tpk_curr + 2] = '\n';			tmp[tpk_curr + 3] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}	}
i = 0;
i = 0
i
i
0
i < count
i
i
count
count
i++
i
i
{		tmp[tpk_curr] = buf[i];		if (tpk_curr < TPK_STR_SIZE) {			switch (buf[i]) {			case '\r':				/* replace cr with nl */				tmp[tpk_curr + 0] = '\n';				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				if (buf[i + 1] == '\n')					i++;				break;			case '\n':				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				break;			default:				tpk_curr++;			}		} else {			/* end of tmp buffer reached: cut the message in two */			tmp[tpk_curr + 1] = '\\';			tmp[tpk_curr + 2] = '\n';			tmp[tpk_curr + 3] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}	}
tmp[tpk_curr] = buf[i];
tmp[tpk_curr] = buf[i]
tmp[tpk_curr]
tmp
tmp
tpk_curr
tpk_curr
buf[i]
buf
buf
i
i
if (tpk_curr < TPK_STR_SIZE) {			switch (buf[i]) {			case '\r':				/* replace cr with nl */				tmp[tpk_curr + 0] = '\n';				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				if (buf[i + 1] == '\n')					i++;				break;			case '\n':				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				break;			default:				tpk_curr++;			}		} else {			/* end of tmp buffer reached: cut the message in two */			tmp[tpk_curr + 1] = '\\';			tmp[tpk_curr + 2] = '\n';			tmp[tpk_curr + 3] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}
tpk_curr < TPK_STR_SIZE
tpk_curr
tpk_curr
TPK_STR_SIZE
TPK_STR_SIZE
{			switch (buf[i]) {			case '\r':				/* replace cr with nl */				tmp[tpk_curr + 0] = '\n';				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				if (buf[i + 1] == '\n')					i++;				break;			case '\n':				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				break;			default:				tpk_curr++;			}		}
switch (buf[i]) {			case '\r':				/* replace cr with nl */				tmp[tpk_curr + 0] = '\n';				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				if (buf[i + 1] == '\n')					i++;				break;			case '\n':				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				break;			default:				tpk_curr++;			}
buf[i]
buf
buf
i
i
{			case '\r':				/* replace cr with nl */				tmp[tpk_curr + 0] = '\n';				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				if (buf[i + 1] == '\n')					i++;				break;			case '\n':				tmp[tpk_curr + 1] = '\0';				printk(KERN_INFO "%s%s", tpk_tag, tmp);				tpk_curr = 0;				break;			default:				tpk_curr++;			}
case '\r':
'\r'
tmp[tpk_curr + 0] = '\n';
tmp[tpk_curr + 0] = '\n'
tmp[tpk_curr + 0]
tmp
tmp
tpk_curr + 0
tpk_curr
tpk_curr
0
'\n'
tmp[tpk_curr + 1] = '\0';
tmp[tpk_curr + 1] = '\0'
tmp[tpk_curr + 1]
tmp
tmp
tpk_curr + 1
tpk_curr
tpk_curr
1
'\0'
printk(KERN_INFO "%s%s", tpk_tag, tmp);
tpk_curr = 0;
tpk_curr = 0
tpk_curr
tpk_curr
0
if (buf[i + 1] == '\n')					i++;
buf[i + 1] == '\n'
buf[i + 1]
buf
buf
i + 1
i
i
1
'\n'
i++;
i++
i
i
break;
case '\n':
'\n'
tmp[tpk_curr + 1] = '\0';
tmp[tpk_curr + 1] = '\0'
tmp[tpk_curr + 1]
tmp
tmp
tpk_curr + 1
tpk_curr
tpk_curr
1
'\0'
printk(KERN_INFO "%s%s", tpk_tag, tmp);
tpk_curr = 0;
tpk_curr = 0
tpk_curr
tpk_curr
0
break;
default:
tpk_curr++;
tpk_curr++
tpk_curr
tpk_curr
{			/* end of tmp buffer reached: cut the message in two */			tmp[tpk_curr + 1] = '\\';			tmp[tpk_curr + 2] = '\n';			tmp[tpk_curr + 3] = '\0';			printk(KERN_INFO "%s%s", tpk_tag, tmp);			tpk_curr = 0;		}
tmp[tpk_curr + 1] = '\\';
tmp[tpk_curr + 1] = '\\'
tmp[tpk_curr + 1]
tmp
tmp
tpk_curr + 1
tpk_curr
tpk_curr
1
'\\'
tmp[tpk_curr + 2] = '\n';
tmp[tpk_curr + 2] = '\n'
tmp[tpk_curr + 2]
tmp
tmp
tpk_curr + 2
tpk_curr
tpk_curr
2
'\n'
tmp[tpk_curr + 3] = '\0';
tmp[tpk_curr + 3] = '\0'
tmp[tpk_curr + 3]
tmp
tmp
tpk_curr + 3
tpk_curr
tpk_curr
3
'\0'
printk(KERN_INFO "%s%s", tpk_tag, tmp);
tpk_curr = 0;
tpk_curr = 0
tpk_curr
tpk_curr
0
return count;
count
count
-----joern-----
(94,123,0)
(76,67,0)
(92,135,0)
(65,112,0)
(72,54,0)
(121,29,0)
(108,97,0)
(33,2,0)
(0,104,0)
(119,32,0)
(9,65,0)
(101,40,0)
(38,28,0)
(71,73,0)
(84,40,0)
(100,2,0)
(57,131,0)
(103,0,0)
(123,135,0)
(25,108,0)
(8,63,0)
(106,73,0)
(68,61,0)
(11,77,0)
(117,102,0)
(132,128,0)
(95,89,0)
(85,41,0)
(134,73,0)
(77,73,0)
(75,62,0)
(102,113,0)
(111,61,0)
(93,104,0)
(95,106,0)
(132,112,0)
(52,67,0)
(19,73,0)
(120,135,0)
(30,49,0)
(86,135,0)
(20,50,0)
(133,45,0)
(33,65,0)
(108,54,0)
(88,19,0)
(128,40,0)
(45,73,0)
(37,102,0)
(82,68,0)
(113,93,0)
(12,132,0)
(126,90,0)
(113,102,0)
(82,123,0)
(131,57,0)
(5,73,0)
(122,16,0)
(42,80,0)
(129,19,0)
(15,69,0)
(49,135,0)
(118,41,0)
(6,73,0)
(70,50,0)
(81,16,0)
(131,90,0)
(123,69,0)
(34,14,0)
(110,65,0)
(17,112,0)
(116,131,0)
(64,128,0)
(50,125,0)
(41,18,0)
(60,84,0)
(21,84,0)
(15,112,0)
(7,97,0)
(114,59,0)
(14,59,0)
(53,49,0)
(128,132,0)
(130,128,0)
(23,39,0)
(128,64,0)
(59,39,0)
(91,132,0)
(1,15,0)
(56,68,0)
(39,125,0)
(133,63,0)
(127,45,0)
(28,112,0)
(35,113,0)
(89,95,0)
(65,33,0)
(55,79,0)
(83,89,0)
(124,101,0)
(80,122,0)
(97,108,0)
(31,73,0)
(66,79,0)
(29,112,0)
(98,95,0)
(47,89,0)
(115,122,0)
(96,18,0)
(16,104,0)
(63,133,0)
(32,33,0)
(22,14,0)
(13,80,0)
(48,133,0)
(122,80,0)
(36,57,0)
(78,32,0)
(109,135,0)
(90,125,0)
(59,14,0)
(101,112,0)
(27,0,0)
(10,64,0)
(74,106,0)
(68,49,0)
(43,93,0)
(99,101,0)
(65,40,0)
(26,63,0)
(51,112,0)
(18,5,0)
(54,104,0)
(3,5,0)
(4,73,0)
(67,73,0)
(44,57,0)
(18,41,0)
(105,15,0)
(24,97,0)
(87,46,0)
(58,46,0)
(107,73,0)
(66,33,1)
(64,128,1)
(130,67,1)
(68,49,1)
(106,74,1)
(11,101,1)
(121,107,1)
(36,116,1)
(56,46,1)
(3,18,1)
(15,112,1)
(18,41,1)
(129,5,1)
(44,36,1)
(7,24,1)
(34,22,1)
(20,90,1)
(95,89,1)
(121,0,1)
(5,3,1)
(96,101,1)
(77,11,1)
(33,65,1)
(97,7,1)
(123,69,1)
(128,132,1)
(24,25,1)
(43,113,1)
(101,124,1)
(85,118,1)
(60,49,1)
(63,8,1)
(81,122,1)
(65,40,1)
(132,91,1)
(84,40,1)
(42,13,1)
(45,127,1)
(35,54,1)
(58,87,1)
(27,103,1)
(55,66,1)
(131,57,1)
(90,126,1)
(9,110,1)
(38,64,1)
(64,10,1)
(1,105,1)
(19,88,1)
(16,81,1)
(110,32,1)
(13,115,1)
(126,131,1)
(59,14,1)
(0,27,1)
(52,45,1)
(102,37,1)
(17,51,1)
(79,55,1)
(15,69,1)
(28,38,1)
(46,58,1)
(48,106,1)
(119,15,1)
(94,15,1)
(67,76,1)
(39,23,1)
(49,53,1)
(127,133,1)
(82,123,1)
(105,112,1)
(29,121,1)
(133,63,1)
(57,44,1)
(118,96,1)
(80,42,1)
(26,48,1)
(82,68,1)
(91,12,1)
(98,101,1)
(101,40,1)
(84,21,1)
(93,43,1)
(113,102,1)
(117,35,1)
(53,30,1)
(50,70,1)
(101,112,1)
(15,1,1)
(25,16,1)
(114,46,1)
(65,112,1)
(8,26,1)
(23,59,1)
(115,79,1)
(51,84,1)
(78,119,1)
(21,60,1)
(28,112,1)
(56,50,1)
(89,83,1)
(123,94,1)
(124,99,1)
(74,95,1)
(41,85,1)
(22,114,1)
(99,79,1)
(108,97,1)
(68,56,1)
(122,80,1)
(121,134,1)
(54,72,1)
(12,130,1)
(72,108,1)
(121,77,1)
(70,20,1)
(37,117,1)
(107,19,1)
(128,40,1)
(105,29,1)
(65,9,1)
(29,112,1)
(83,47,1)
(116,39,1)
(132,112,1)
(10,128,1)
(14,34,1)
(103,93,1)
(88,129,1)
(134,28,1)
(87,84,1)
(47,98,1)
(112,17,1)
(134,64,1)
(76,52,1)
(32,78,1)
(8,101,2)
(117,79,2)
(67,101,2)
(128,40,2)
(127,101,2)
(84,40,2)
(15,84,2)
(1,84,2)
(55,15,2)
(12,101,2)
(5,101,2)
(87,84,2)
(108,79,2)
(108,97,2)
(131,57,2)
(51,84,2)
(34,46,2)
(64,128,2)
(19,101,2)
(22,46,2)
(38,64,2)
(16,79,2)
(99,79,2)
(33,15,2)
(113,79,2)
(72,79,2)
(129,101,2)
(133,101,2)
(54,79,2)
(112,84,2)
(128,101,2)
(105,84,2)
(48,101,2)
(122,79,2)
(115,79,2)
(37,79,2)
(123,84,2)
(121,15,2)
(76,101,2)
(10,101,2)
(32,15,2)
(88,101,2)
(97,79,2)
(13,79,2)
(66,15,2)
(43,79,2)
(29,112,2)
(68,49,2)
(20,46,2)
(102,79,2)
(96,101,2)
(79,15,2)
(70,46,2)
(0,79,2)
(15,69,2)
(78,15,2)
(15,112,2)
(80,79,2)
(52,101,2)
(128,132,2)
(126,46,2)
(98,101,2)
(124,79,2)
(132,112,2)
(42,79,2)
(18,101,2)
(134,101,2)
(77,101,2)
(95,101,2)
(1,15,2)
(56,84,2)
(28,64,2)
(110,15,2)
(131,46,2)
(85,101,2)
(64,101,2)
(101,79,2)
(35,79,2)
(116,46,2)
(118,101,2)
(18,41,2)
(106,101,2)
(93,79,2)
(11,101,2)
(119,15,2)
(95,89,2)
(103,79,2)
(45,101,2)
(25,79,2)
(27,79,2)
(3,101,2)
(101,112,2)
(91,101,2)
(39,46,2)
(113,102,2)
(41,101,2)
(24,79,2)
(65,15,2)
(83,101,2)
(133,63,2)
(105,15,2)
(59,14,2)
(82,68,2)
(65,40,2)
(46,84,2)
(114,46,2)
(90,46,2)
(74,101,2)
(36,46,2)
(28,112,2)
(122,80,2)
(58,84,2)
(130,101,2)
(14,46,2)
(26,101,2)
(7,79,2)
(44,46,2)
(123,69,2)
(89,101,2)
(33,65,2)
(9,15,2)
(132,101,2)
(81,79,2)
(29,15,2)
(63,101,2)
(57,46,2)
(101,40,2)
(15,15,2)
(65,112,2)
(17,84,2)
(107,101,2)
(59,46,2)
(94,84,2)
(68,84,2)
(23,46,2)
(47,101,2)
(50,46,2)
(82,123,2)
-----------------------------------
(0,tpk_curr = 0)
(1,count)
(2,)
(3,'\\0')
(4,if (buf[i + 1] == '\\n')
(5,tmp[tpk_curr + 1] = '\\0')
(6,case '\\r':)
(7,2)
(8,1)
(9,i)
(10,'\\n')
(11,tpk_curr)
(12,i)
(13,tpk_curr)
(14,tpk_curr + 0)
(15,i < count)
(16,tmp[tpk_curr + 1] = '\\\\')
(17,0)
(18,tmp[tpk_curr + 1])
(19,tpk_curr = 0)
(20,tpk_curr)
(21,NULL)
(22,tpk_curr)
(23,'\\n')
(24,tpk_curr)
(25,tmp)
(26,tpk_curr)
(27,0)
(28,i++)
(29,i++)
(30,i)
(31,default:)
(32,tmp[tpk_curr])
(33,tmp[tpk_curr] = buf[i])
(34,0)
(35,tmp)
(36,tpk_curr)
(37,3)
(38,i)
(39,tmp[tpk_curr + 0] = '\\n')
(40,const unsigned char *buf)
(41,tpk_curr + 1)
(42,1)
(43,'\\0')
(44,1)
(45,tmp[tpk_curr + 1] = '\\0')
(46,tpk_curr > 0)
(47,tpk_curr)
(48,tmp)
(49,i = tpk_curr)
(50,tpk_curr = 0)
(51,i)
(52,tpk_curr)
(53,tpk_curr)
(54,tmp[tpk_curr + 2] = '\\n')
(55,TPK_STR_SIZE)
(56,i)
(57,tpk_curr + 1)
(58,0)
(59,tmp[tpk_curr + 0])
(60,buf)
(61,)
(62,)
(63,tpk_curr + 1)
(64,buf[i + 1] == '\\n')
(65,buf[i])
(66,tpk_curr)
(67,tpk_curr = 0)
(68,return i;)
(69,int count)
(70,0)
(71,case '\\n':)
(72,'\\n')
(73,)
(74,'\\n')
(75,switch (buf[i])
(76,0)
(77,tpk_curr++)
(78,tpk_curr)
(79,tpk_curr < TPK_STR_SIZE)
(80,tpk_curr + 1)
(81,'\\\\')
(82,RET)
(83,0)
(84,buf == NULL)
(85,1)
(86,if (buf == NULL)
(87,tpk_curr)
(88,0)
(89,tpk_curr + 0)
(90,tmp[tpk_curr + 1] = '\\0')
(91,1)
(92,for (i = 0; i < count; i++)
(93,tmp[tpk_curr + 3] = '\\0')
(94,count)
(95,tmp[tpk_curr + 0])
(96,tmp)
(97,tpk_curr + 2)
(98,tmp)
(99,buf)
(100,if (tpk_curr < TPK_STR_SIZE)
(101,buf[i])
(102,tpk_curr + 3)
(103,tpk_curr)
(104,)
(105,i)
(106,tmp[tpk_curr + 0] = '\\n')
(107,break;)
(108,tmp[tpk_curr + 2])
(109,tmp)
(110,buf)
(111,if (tpk_curr > 0)
(112,i = 0)
(113,tmp[tpk_curr + 3])
(114,tmp)
(115,tmp)
(116,tmp)
(117,tpk_curr)
(118,tpk_curr)
(119,tmp)
(120,i)
(121,i)
(122,tmp[tpk_curr + 1])
(123,return count;)
(124,i)
(125,)
(126,'\\0')
(127,'\\0')
(128,buf[i + 1])
(129,tpk_curr)
(130,buf)
(131,tmp[tpk_curr + 1])
(132,i + 1)
(133,tmp[tpk_curr + 1])
(134,break;)
(135,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^