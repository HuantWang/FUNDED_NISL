-----label-----
1
-----code-----
jas_image_t *jp2_decode(jas_stream_t *in, const char *optstr)
{
	jp2_box_t *box;
	int found;
	jas_image_t *image;
	jp2_dec_t *dec;
	bool samedtype;
	int dtype;
	unsigned int i;
	jp2_cmap_t *cmapd;
	jp2_pclr_t *pclrd;
	jp2_cdef_t *cdefd;
	unsigned int channo;
	int newcmptno;
	int_fast32_t *lutents;
#if 0
	jp2_cdefchan_t *cdefent;
	int cmptno;
#endif
	jp2_cmapent_t *cmapent;
	jas_icchdr_t icchdr;
	jas_iccprof_t *iccprof;

	dec = 0;
	box = 0;
	image = 0;

	JAS_DBGLOG(100, ("jp2_decode(%p, \"%s\")\n", in, optstr));

	if (!(dec = jp2_dec_create())) {
		goto error;
	}

	/* Get the first box.  This should be a JP box. */
	if (!(box = jp2_box_get(in))) {
		jas_eprintf("error: cannot get box\n");
		goto error;
	}
	if (box->type != JP2_BOX_JP) {
		jas_eprintf("error: expecting signature box\n");
		goto error;
	}
	if (box->data.jp.magic != JP2_JP_MAGIC) {
		jas_eprintf("incorrect magic number\n");
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/* Get the second box.  This should be a FTYP box. */
	if (!(box = jp2_box_get(in))) {
		goto error;
	}
	if (box->type != JP2_BOX_FTYP) {
		jas_eprintf("expecting file type box\n");
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/* Get more boxes... */
	found = 0;
	while ((box = jp2_box_get(in))) {
		if (jas_getdbglevel() >= 1) {
			jas_eprintf("got box type %s\n", box->info->name);
		}
		switch (box->type) {
		case JP2_BOX_JP2C:
			found = 1;
			break;
		case JP2_BOX_IHDR:
			if (!dec->ihdr) {
				dec->ihdr = box;
				box = 0;
			}
			break;
		case JP2_BOX_BPCC:
			if (!dec->bpcc) {
				dec->bpcc = box;
				box = 0;
			}
			break;
		case JP2_BOX_CDEF:
			if (!dec->cdef) {
				dec->cdef = box;
				box = 0;
			}
			break;
		case JP2_BOX_PCLR:
			if (!dec->pclr) {
				dec->pclr = box;
				box = 0;
			}
			break;
		case JP2_BOX_CMAP:
			if (!dec->cmap) {
				dec->cmap = box;
				box = 0;
			}
			break;
		case JP2_BOX_COLR:
			if (!dec->colr) {
				dec->colr = box;
				box = 0;
			}
			break;
		}
		if (box) {
			jp2_box_destroy(box);
			box = 0;
		}
		if (found) {
			break;
		}
	}

	if (!found) {
		jas_eprintf("error: no code stream found\n");
		goto error;
	}

	if (!(dec->image = jpc_decode(in, optstr))) {
		jas_eprintf("error: cannot decode code stream\n");
		goto error;
	}

	/* An IHDR box must be present. */
	if (!dec->ihdr) {
		jas_eprintf("error: missing IHDR box\n");
		goto error;
	}

	/* Does the number of components indicated in the IHDR box match
	  the value specified in the code stream? */
	if (dec->ihdr->data.ihdr.numcmpts != JAS_CAST(jas_uint,
	  jas_image_numcmpts(dec->image))) {
		jas_eprintf("warning: number of components mismatch\n");
	}

	/* At least one component must be present. */
	if (!jas_image_numcmpts(dec->image)) {
		jas_eprintf("error: no components\n");
		goto error;
	}

	/* Determine if all components have the same data type. */
	samedtype = true;
	dtype = jas_image_cmptdtype(dec->image, 0);
	for (i = 1; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)); ++i) {
		if (jas_image_cmptdtype(dec->image, i) != dtype) {
			samedtype = false;
			break;
		}
	}

	/* Is the component data type indicated in the IHDR box consistent
	  with the data in the code stream? */
	if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||
	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {
		jas_eprintf("warning: component data type mismatch\n");
	}

	/* Is the compression type supported? */
	if (dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE) {
		jas_eprintf("error: unsupported compression type\n");
		goto error;
	}

	if (dec->bpcc) {
		/* Is the number of components indicated in the BPCC box
		  consistent with the code stream data? */
		if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(jas_uint, jas_image_numcmpts(
		  dec->image))) {
			jas_eprintf("warning: number of components mismatch\n");
		}
		/* Is the component data type information indicated in the BPCC
		  box consistent with the code stream data? */
		if (!samedtype) {
			for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));
			  ++i) {
				if (jas_image_cmptdtype(dec->image, i) !=
				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {
					jas_eprintf("warning: component data type mismatch\n");
				}
			}
		} else {
			jas_eprintf("warning: superfluous BPCC box\n");
		}
	}

	/* A COLR box must be present. */
	if (!dec->colr) {
		jas_eprintf("error: no COLR box\n");
		goto error;
	}

	switch (dec->colr->data.colr.method) {
	case JP2_COLR_ENUM:
		jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));
		break;
	case JP2_COLR_ICC:
		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,
		  dec->colr->data.colr.iccplen);
		if (!iccprof) {
			jas_eprintf("error: failed to parse ICC profile\n");
			goto error;
		}
		jas_iccprof_gethdr(iccprof, &icchdr);
		jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);
		jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));
		dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);
		if (!dec->image->cmprof_) {
			jas_iccprof_destroy(iccprof);
			goto error;
		}
		jas_iccprof_destroy(iccprof);
		break;
	}

	/* If a CMAP box is present, a PCLR box must also be present. */
	if (dec->cmap && !dec->pclr) {
		jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");
		jp2_box_destroy(dec->cmap);
		dec->cmap = 0;
	}

	/* If a CMAP box is not present, a PCLR box must not be present. */
	if (!dec->cmap && dec->pclr) {
		jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");
		jp2_box_destroy(dec->pclr);
		dec->pclr = 0;
	}

	/* Determine the number of channels (which is essentially the number
	  of components after any palette mappings have been applied). */
	dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans :
	  JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));

	/* Perform a basic sanity check on the CMAP box if present. */
	if (dec->cmap) {
		for (i = 0; i < dec->numchans; ++i) {
			/* Is the component number reasonable? */
			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(jas_uint,
			  jas_image_numcmpts(dec->image))) {
				jas_eprintf("error: invalid component number in CMAP box\n");
				goto error;
			}
			/* Is the LUT index reasonable? */
			if (dec->cmap->data.cmap.ents[i].pcol >=
			  dec->pclr->data.pclr.numchans) {
				jas_eprintf("error: invalid CMAP LUT index\n");
				goto error;
			}
		}
	}

	/* Allocate space for the channel-number to component-number LUT. */
	if (!(dec->chantocmptlut = jas_alloc2(dec->numchans,
	  sizeof(uint_fast16_t)))) {
		jas_eprintf("error: no memory\n");
		goto error;
	}

	if (!dec->cmap) {
		for (i = 0; i < dec->numchans; ++i) {
			dec->chantocmptlut[i] = i;
		}
	} else {
		cmapd = &dec->cmap->data.cmap;
		pclrd = &dec->pclr->data.pclr;
		cdefd = &dec->cdef->data.cdef;
		for (channo = 0; channo < cmapd->numchans; ++channo) {
			cmapent = &cmapd->ents[channo];
			if (cmapent->map == JP2_CMAP_DIRECT) {
				dec->chantocmptlut[channo] = channo;
			} else if (cmapent->map == JP2_CMAP_PALETTE) {
				if (!pclrd->numlutents) {
					goto error;
				}
				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));
				if (!lutents) {
					goto error;
				}
				for (i = 0; i < pclrd->numlutents; ++i) {
					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];
				}
				newcmptno = jas_image_numcmpts(dec->image);
				jas_image_depalettize(dec->image, cmapent->cmptno,
				  pclrd->numlutents, lutents,
				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);
				dec->chantocmptlut[channo] = newcmptno;
				jas_free(lutents);
#if 0
				if (dec->cdef) {
					cdefent = jp2_cdef_lookup(cdefd, channo);
					if (!cdefent) {
						abort();
					}
				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));
				} else {
				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));
				}
#else
				/* suppress -Wunused-but-set-variable */
				(void)cdefd;
#endif
			} else {
				jas_eprintf("error: invalid MTYP in CMAP box\n");
				goto error;
			}
		}
	}

	/* Mark all components as being of unknown type. */

	for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)); ++i) {
		jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);
	}

	/* Determine the type of each component. */
	if (dec->cdef) {
		for (i = 0; i < dec->cdef->data.cdef.numchans; ++i) {
			/* Is the channel number reasonable? */
			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {
				jas_eprintf("error: invalid channel number in CDEF box\n");
				goto error;
			}
			jas_image_setcmpttype(dec->image,
			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],
			  jp2_getct(jas_image_clrspc(dec->image),
			  dec->cdef->data.cdef.ents[i].type,
			  dec->cdef->data.cdef.ents[i].assoc));
		}
	} else {
		for (i = 0; i < dec->numchans; ++i) {
			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],
			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));
		}
	}

	/* Delete any components that are not of interest. */
	for (i = jas_image_numcmpts(dec->image); i > 0; --i) {
		if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {
			jas_image_delcmpt(dec->image, i - 1);
		}
	}

	/* Ensure that some components survived. */
	if (!jas_image_numcmpts(dec->image)) {
		jas_eprintf("error: no components\n");
		goto error;
	}
#if 0
jas_eprintf("no of components is %d\n", jas_image_numcmpts(dec->image));
#endif

	/* Prevent the image from being destroyed later. */
	image = dec->image;
	dec->image = 0;

	jp2_dec_destroy(dec);

	return image;

error:
	if (box) {
		jp2_box_destroy(box);
	}
	if (dec) {
		jp2_dec_destroy(dec);
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
15,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
18,29
18,30
18,31
18,32
18,33
18,34
18,35
18,36
18,37
18,38
18,39
18,40
18,41
18,42
18,43
18,44
18,45
18,46
18,47
18,48
18,49
18,50
18,51
18,52
18,53
18,54
18,55
18,56
18,57
18,58
18,59
18,60
18,61
18,62
18,63
18,64
18,65
18,66
18,67
18,68
18,69
18,70
18,71
18,72
18,73
18,74
18,75
18,76
18,77
18,78
18,79
18,80
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
38,39
39,40
39,41
40,41
42,43
42,44
45,46
46,47
46,48
48,49
50,51
51,52
51,53
53,54
55,56
56,57
56,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
67,68
68,69
68,70
69,70
71,72
71,73
74,75
75,76
75,77
76,77
78,79
78,80
81,82
82,83
82,84
84,85
86,87
87,88
87,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
98,99
99,100
99,101
100,101
102,103
102,104
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
115,117
118,119
119,120
119,121
120,121
123,124
124,125
124,126
125,126
128,129
129,130
129,131
130,131
133,134
134,135
134,136
134,137
135,136
138,139
139,140
139,141
139,142
141,142
143,144
145,146
145,147
146,147
147,148
148,149
148,150
149,150
151,152
152,153
154,155
155,156
157,158
157,159
158,159
159,160
160,161
160,162
161,162
163,164
163,165
164,165
166,167
168,169
168,170
169,170
170,171
170,172
171,172
174,175
176,177
176,178
177,178
177,179
178,179
178,180
179,180
182,183
184,185
184,186
185,186
186,187
186,188
187,188
190,191
192,193
192,194
193,194
193,195
194,195
194,196
195,196
195,197
196,197
196,198
197,198
202,203
204,205
204,206
205,206
206,207
206,208
207,208
210,211
212,213
213,214
213,215
214,215
216,217
218,219
219,220
219,221
220,221
223,224
223,225
224,225
225,226
226,227
226,228
227,228
229,230
229,231
230,231
232,233
234,235
235,236
237,238
237,239
238,239
238,240
239,240
239,241
240,241
243,244
245,246
245,247
246,247
247,248
247,249
248,249
251,252
253,254
254,255
254,256
255,256
257,258
259,260
260,261
260,262
261,262
264,265
265,266
265,267
266,267
269,270
269,271
270,271
271,272
271,273
272,273
274,275
274,276
275,276
277,278
279,280
279,281
279,282
279,283
280,281
280,282
281,282
281,283
282,283
283,284
286,287
287,288
288,289
288,290
288,291
289,290
292,293
292,294
293,294
293,295
294,295
298,299
298,300
299,300
299,301
300,301
303,304
303,305
303,306
303,307
303,308
303,309
303,310
303,311
303,312
303,313
303,314
303,315
303,316
303,317
303,318
303,319
303,320
303,321
303,322
303,323
303,324
304,305
305,306
307,308
308,309
308,310
309,310
313,314
314,315
316,317
316,318
317,318
318,319
318,320
319,320
322,323
322,324
323,324
324,325
324,326
325,326
325,327
326,327
329,330
331,332
332,333
332,334
333,334
337,338
338,339
340,341
340,342
341,342
342,343
342,344
343,344
346,347
346,348
347,348
348,349
348,350
349,350
349,351
350,351
353,354
355,356
356,357
356,358
357,358
361,362
362,363
364,365
364,366
365,366
366,367
366,368
367,368
370,371
370,372
371,372
372,373
372,374
373,374
373,375
374,375
377,378
379,380
380,381
380,382
381,382
385,386
386,387
388,389
388,390
389,390
390,391
390,392
391,392
394,395
394,396
395,396
396,397
396,398
397,398
397,399
398,399
401,402
403,404
404,405
404,406
405,406
409,410
410,411
412,413
412,414
413,414
414,415
414,416
415,416
418,419
418,420
419,420
420,421
420,422
421,422
421,423
422,423
425,426
427,428
428,429
428,430
429,430
433,434
434,435
436,437
436,438
437,438
438,439
438,440
439,440
442,443
442,444
443,444
444,445
444,446
445,446
445,447
446,447
449,450
451,452
452,453
452,454
453,454
457,458
457,459
458,459
460,461
460,462
461,462
462,463
462,464
463,464
465,466
467,468
468,469
468,470
469,470
472,473
472,474
473,474
475,476
477,478
477,479
478,479
479,480
481,482
481,483
482,483
483,484
483,485
484,485
487,488
489,490
489,491
490,491
491,492
492,493
492,494
493,494
493,495
494,495
497,498
497,499
497,500
498,499
500,501
502,503
504,505
504,506
505,506
506,507
506,508
507,508
510,511
512,513
512,514
513,514
514,515
514,516
515,516
518,519
518,520
519,520
520,521
520,522
521,522
524,525
526,527
526,528
527,528
527,529
528,529
528,530
529,530
529,531
530,531
530,532
531,532
531,533
532,533
538,539
538,540
538,541
539,540
541,542
543,544
543,545
544,545
546,547
546,548
547,548
550,551
551,552
552,553
552,554
553,554
556,557
556,558
557,558
558,559
558,560
559,560
561,562
561,563
562,563
565,566
565,567
566,567
567,568
567,569
568,569
571,572
573,574
574,575
574,576
575,576
578,579
579,580
579,581
580,581
582,583
582,584
582,585
583,584
585,586
585,587
586,587
590,591
590,592
590,593
590,594
591,592
592,593
592,594
593,594
596,597
596,598
597,598
599,600
599,601
599,602
600,601
602,603
604,605
604,606
605,606
607,608
607,609
608,609
611,612
612,613
614,615
615,616
615,617
616,617
616,618
617,618
617,619
617,620
618,619
620,621
620,622
621,622
624,625
626,627
628,629
628,630
629,630
630,631
630,632
631,632
635,636
635,637
636,637
636,638
637,638
638,639
638,640
639,640
641,642
641,643
642,643
642,644
643,644
643,645
644,645
644,646
645,646
645,647
646,647
652,653
652,654
653,654
655,656
657,658
658,659
658,660
659,660
660,661
662,663
662,664
663,664
663,665
664,665
664,666
665,666
665,667
666,667
666,668
667,668
673,674
675,676
676,677
677,678
677,679
678,679
681,682
681,683
682,683
682,684
683,684
683,685
684,685
684,686
685,686
685,687
686,687
686,688
687,688
693,694
695,696
695,697
696,697
697,698
697,699
698,699
701,702
703,704
703,705
704,705
704,706
705,706
708,709
708,710
709,710
709,711
710,711
710,712
711,712
711,713
712,713
712,714
713,714
713,715
714,715
714,716
715,716
721,722
721,723
721,724
722,723
724,725
726,727
726,728
727,728
729,730
729,731
730,731
733,734
734,735
735,736
735,737
736,737
739,740
739,741
739,742
740,741
741,742
743,744
744,745
744,746
744,747
744,748
745,746
746,747
746,748
747,748
750,751
750,752
751,752
753,754
753,755
753,756
754,755
756,757
758,759
758,760
759,760
761,762
761,763
762,763
765,766
766,767
768,769
769,770
769,771
770,771
770,772
771,772
771,773
771,774
772,773
774,775
774,776
775,776
778,779
780,781
780,782
781,782
783,784
783,785
784,785
784,786
785,786
785,787
786,787
786,788
787,788
787,789
788,789
794,795
796,797
797,798
798,799
798,800
799,800
802,803
803,804
804,805
804,806
805,806
808,809
808,810
809,810
810,811
810,812
811,812
814,815
814,816
815,816
816,817
816,818
817,818
820,821
822,823
822,824
823,824
823,825
824,825
824,826
825,826
825,827
826,827
826,828
827,828
833,834
833,835
833,836
833,837
833,838
833,839
833,840
833,841
833,842
833,843
833,844
833,845
833,846
834,835
835,836
837,838
838,839
838,840
838,841
839,840
841,842
841,843
842,843
845,846
845,847
846,847
848,849
849,850
849,851
850,851
850,852
851,852
851,853
852,853
858,859
859,860
861,862
862,863
862,864
863,864
865,866
865,867
865,868
866,867
868,869
868,870
869,870
869,871
870,871
870,872
871,872
871,873
872,873
878,879
878,880
879,880
879,881
880,881
880,882
881,882
881,883
882,883
888,889
888,890
889,890
890,891
892,893
892,894
893,894
894,895
894,896
895,896
898,899
900,901
901,902
901,903
901,904
902,903
904,905
906,907
907,908
909,910
910,911
910,912
910,913
911,912
914,915
914,916
915,916
918,919
919,920
919,921
919,922
920,921
922,923
922,924
923,924
926,927
926,928
927,928
929,930
929,931
930,931
933,934
934,935
934,936
935,936
935,937
936,937
936,938
937,938
941,942
941,943
942,943
944,945
946,947
946,948
947,948
948,949
948,950
949,950
949,951
950,951
954,955
954,956
955,956
956,957
956,958
957,958
959,960
961,962
963,964
964,965
964,966
965,966
967,968
970,971
970,972
971,972
971,973
972,973
972,974
973,974
976,977
977,978
977,979
978,979
981,982
981,983
981,984
982,983
983,984
983,985
984,985
987,988
988,989
988,990
989,990
991,992
991,993
992,993
995,996
996,997
996,998
997,998
997,999
998,999
1002,1003
1002,1004
1003,1004
1003,1005
1004,1005
1005,1006
1005,1007
1006,1007
1009,1010
1009,1011
1010,1011
1013,1014
1013,1015
1013,1016
1014,1015
1015,1016
1015,1017
1016,1017
1019,1020
1020,1021
1020,1022
1021,1022
1023,1024
1023,1025
1024,1025
1027,1028
1028,1029
1028,1030
1029,1030
1029,1031
1030,1031
1034,1035
1035,1036
1035,1037
1036,1037
1036,1038
1037,1038
1040,1041
1040,1042
1040,1043
1041,1042
1041,1043
1042,1043
1045,1046
1045,1047
1046,1047
1046,1048
1047,1048
1047,1049
1048,1049
1048,1050
1049,1050
1055,1056
1055,1057
1055,1058
1056,1057
1058,1059
1060,1061
1060,1062
1061,1062
1063,1064
1063,1065
1064,1065
1067,1068
1067,1069
1068,1069
1068,1070
1069,1070
1072,1073
1073,1074
1073,1075
1073,1076
1073,1077
1074,1075
1075,1076
1075,1077
1076,1077
1079,1080
1079,1081
1080,1081
1082,1083
1082,1084
1083,1084
1086,1087
1087,1088
1089,1090
1089,1091
1090,1091
1090,1092
1091,1092
1091,1093
1092,1093
1092,1094
1093,1094
1093,1095
1094,1095
1094,1096
1095,1096
1095,1097
1096,1097
1096,1098
1097,1098
1097,1099
1098,1099
1104,1105
1107,1108
1107,1109
1107,1110
1108,1109
1110,1111
1112,1113
1112,1114
1113,1114
1115,1116
1115,1117
1116,1117
1119,1120
1119,1121
1120,1121
1121,1122
1121,1123
1122,1123
1125,1126
1127,1128
1127,1129
1128,1129
1128,1130
1129,1130
1129,1131
1130,1131
1130,1132
1131,1132
1131,1133
1132,1133
1132,1134
1133,1134
1133,1135
1134,1135
1134,1136
1135,1136
1141,1142
1144,1145
1144,1146
1145,1146
1145,1147
1146,1147
1146,1148
1147,1148
1147,1149
1148,1149
1154,1155
1154,1156
1155,1156
1156,1157
1156,1158
1157,1158
1160,1161
1162,1163
1162,1164
1163,1164
1164,1165
1165,1166
1165,1167
1166,1167
1166,1168
1167,1168
1170,1171
1170,1172
1170,1173
1171,1172
1173,1174
1173,1175
1174,1175
1177,1178
1178,1179
1178,1180
1179,1180
1182,1183
1182,1184
1183,1184
1184,1185
1184,1186
1185,1186
1188,1189
1190,1191
1190,1192
1190,1193
1191,1192
1192,1193
1192,1194
1193,1194
1196,1197
1197,1198
1197,1199
1197,1200
1197,1201
1198,1199
1199,1200
1199,1201
1200,1201
1203,1204
1203,1205
1204,1205
1206,1207
1206,1208
1207,1208
1210,1211
1211,1212
1213,1214
1214,1215
1215,1216
1215,1217
1216,1217
1216,1218
1217,1218
1217,1219
1218,1219
1221,1222
1223,1224
1225,1226
1225,1227
1225,1228
1225,1229
1226,1227
1227,1228
1227,1229
1228,1229
1230,1231
1231,1232
1231,1233
1232,1233
1232,1234
1233,1234
1233,1235
1234,1235
1239,1240
1240,1241
1240,1242
1241,1242
1243,1244
1244,1245
1244,1246
1245,1246
1245,1247
1246,1247
1246,1248
1247,1248
1252,1253
1253,1254
1253,1255
1254,1255
1256,1257
1257,1258
1257,1259
1258,1259
1258,1260
1259,1260
1259,1261
1260,1261
1265,1266
1265,1267
1265,1268
1265,1269
1266,1267
1267,1268
1267,1269
1268,1269
1271,1272
1271,1273
1272,1273
1274,1275
1274,1276
1275,1276
1278,1279
1279,1280
1281,1282
1281,1283
1282,1283
1283,1284
1283,1285
1284,1285
1286,1287
1287,1288
1287,1289
1288,1289
1288,1290
1289,1290
1292,1293
1294,1295
1294,1296
1294,1297
1295,1296
1295,1297
1296,1297
1296,1298
1297,1298
1300,1301
1302,1303
1303,1304
1304,1305
1304,1306
1305,1306
1305,1307
1306,1307
1306,1308
1307,1308
1310,1311
1312,1313
1314,1315
1314,1316
1314,1317
1315,1316
1315,1317
1316,1317
1316,1318
1317,1318
1320,1321
1322,1323
1322,1324
1322,1325
1322,1326
1322,1327
1322,1328
1322,1329
1322,1330
1322,1331
1323,1324
1323,1325
1324,1325
1325,1326
1325,1327
1326,1327
1329,1330
1330,1331
1332,1333
1333,1334
1333,1335
1334,1335
1336,1337
1336,1338
1336,1339
1337,1338
1339,1340
1339,1341
1340,1341
1343,1344
1344,1345
1344,1346
1345,1346
1348,1349
1348,1350
1349,1350
1350,1351
1352,1353
1353,1354
1355,1356
1355,1357
1355,1358
1355,1359
1356,1357
1357,1358
1357,1359
1358,1359
1361,1362
1361,1363
1362,1363
1364,1365
1364,1366
1365,1366
1368,1369
1369,1370
1371,1372
1372,1373
1373,1374
1373,1375
1374,1375
1374,1376
1375,1376
1377,1378
1379,1380
1379,1381
1380,1381
1380,1382
1381,1382
1384,1385
1384,1386
1385,1386
1385,1387
1386,1387
1389,1390
1389,1391
1390,1391
1392,1393
1392,1394
1393,1394
1396,1397
1397,1398
1397,1399
1398,1399
1400,1401
1400,1402
1401,1402
1403,1404
1403,1405
1404,1405
1407,1408
1408,1409
1408,1410
1408,1411
1408,1412
1408,1413
1408,1414
1408,1415
1409,1410
1411,1412
1411,1413
1412,1413
1415,1416
1415,1417
1416,1417
1419,1420
1419,1421
1420,1421
1423,1424
1425,1426
1425,1427
1426,1427
1428,1429
1428,1430
1429,1430
1429,1431
1430,1431
1433,1434
1433,1435
1434,1435
1437,1438
1439,1440
1440,1441
1440,1442
1441,1442
1441,1443
1442,1443
1442,1444
1443,1444
1446,1447
1448,1449
1450,1451
1451,1452
1451,1453
1452,1453
1454,1455
1456,1457
1457,1458
1457,1459
1458,1459
1458,1460
1461,1462
1463,1464
1463,1465
1464,1465
1465,1466
1465,1467
1466,1467
1469,1470
1471,1472
1471,1473
1471,1474
1471,1475
1472,1473
1473,1474
1473,1475
1474,1475
1477,1478
1477,1479
1478,1479
1480,1481
1480,1482
1480,1483
1481,1482
1483,1484
1485,1486
1485,1487
1486,1487
1488,1489
1488,1490
1489,1490
1492,1493
1493,1494
1495,1496
1496,1497
1497,1498
1497,1499
1497,1500
1497,1501
1498,1499
1500,1501
1500,1502
1501,1502
1504,1505
1506,1507
1508,1509
1508,1510
1508,1511
1509,1510
1509,1511
1510,1511
1513,1514
1514,1515
1514,1516
1514,1517
1514,1518
1515,1516
1516,1517
1516,1518
1517,1518
1520,1521
1520,1522
1521,1522
1523,1524
1523,1525
1524,1525
1524,1526
1525,1526
1525,1527
1526,1527
1526,1528
1527,1528
1533,1534
1534,1535
1536,1537
1536,1538
1537,1538
1537,1539
1538,1539
1538,1540
1539,1540
1539,1541
1540,1541
1540,1542
1541,1542
1541,1543
1542,1543
1542,1544
1543,1544
1543,1545
1544,1545
1544,1546
1545,1546
1551,1552
1554,1555
1554,1556
1555,1556
1558,1559
1558,1560
1559,1560
1560,1561
1560,1562
1561,1562
1564,1565
1566,1567
1567,1568
1567,1569
1567,1570
1567,1571
1568,1569
1570,1571
1570,1572
1571,1572
1574,1575
1574,1576
1575,1576
1575,1577
1576,1577
1579,1580
1579,1581
1580,1581
1580,1582
1581,1582
1581,1583
1582,1583
1582,1584
1583,1584
1583,1585
1584,1585
1584,1586
1585,1586
1591,1592
1594,1595
1594,1596
1594,1597
1594,1598
1595,1596
1597,1598
1597,1599
1598,1599
1600,1601
1600,1602
1601,1602
1604,1605
1604,1606
1605,1606
1605,1607
1606,1607
1606,1608
1607,1608
1607,1609
1608,1609
1608,1610
1609,1610
1609,1611
1610,1611
1616,1617
1619,1620
1619,1621
1620,1621
1620,1622
1621,1622
1621,1623
1622,1623
1622,1624
1623,1624
1623,1625
1624,1625
1624,1626
1625,1626
1631,1632
1634,1635
1635,1636
1635,1637
1635,1638
1635,1639
1636,1637
1637,1638
1637,1639
1638,1639
1641,1642
1641,1643
1642,1643
1644,1645
1644,1646
1645,1646
1648,1649
1649,1650
1651,1652
1652,1653
1653,1654
1653,1655
1653,1656
1653,1657
1654,1655
1656,1657
1656,1658
1657,1658
1660,1661
1660,1662
1661,1662
1661,1663
1662,1663
1665,1666
1667,1668
1667,1669
1667,1670
1667,1671
1668,1669
1670,1671
1670,1672
1671,1672
1673,1674
1673,1675
1674,1675
1678,1679
1678,1680
1679,1680
1682,1683
1682,1684
1682,1685
1682,1686
1683,1684
1684,1685
1684,1686
1685,1686
1687,1688
1687,1689
1688,1689
1690,1691
1690,1692
1691,1692
1694,1695
1694,1696
1695,1696
1698,1699
1699,1700
1701,1702
1702,1703
1702,1704
1703,1704
1703,1705
1704,1705
1704,1706
1704,1707
1705,1706
1707,1708
1707,1709
1708,1709
1711,1712
1711,1713
1712,1713
1715,1716
1717,1718
1718,1719
1719,1720
1719,1721
1719,1722
1720,1721
1722,1723
1722,1724
1723,1724
1726,1727
1726,1728
1727,1728
1730,1731
1730,1732
1731,1732
1732,1733
1732,1734
1733,1734
1735,1736
1735,1737
1736,1737
1739,1740
1739,1741
1740,1741
1741,1742
1741,1743
1742,1743
1745,1746
1747,1748
1748,1749
1748,1750
1749,1750
1751,1752
1751,1753
1752,1753
1755,1756
1756,1757
1756,1758
1757,1758
1757,1759
1758,1759
1762,1763
1763,1764
1763,1765
1764,1765
1766,1767
1768,1769
1769,1770
1771,1772
1771,1773
1773,1774
1773,1775
1774,1775
1776,1777
1777,1778
1778,1779
1778,1780
1779,1780
1781,1782
1783,1784
1783,1785
1784,1785
1786,1787
1787,1788
1788,1789
1788,1790
1789,1790
1791,1792
1793,1794
-----nextToken-----
3,5,6,9,11,12,14,16,17,22,24,25,28,30,34,36,37,41,43,44,47,49,52,54,57,59,63,65,66,70,72,73,77,79,80,83,85,88,90,94,96,97,101,103,104,108,110,114,116,117,121,122,126,127,131,132,136,137,140,142,144,150,153,156,162,165,167,172,173,175,180,181,183,188,189,191,198,199,200,201,203,208,209,211,215,217,221,222,228,231,233,236,241,242,244,249,250,252,256,258,262,263,267,268,273,276,278,284,285,290,291,295,296,297,301,302,306,310,311,312,315,320,321,327,328,330,334,335,336,339,344,345,351,352,354,358,359,360,363,368,369,375,376,378,382,383,384,387,392,393,399,400,402,406,407,408,411,416,417,423,424,426,430,431,432,435,440,441,447,448,450,454,455,456,459,464,466,470,471,474,476,480,485,486,488,495,496,499,501,503,508,509,511,516,517,522,523,525,533,534,535,536,537,540,542,545,548,549,554,555,560,563,564,569,570,572,576,577,581,584,587,588,589,594,595,598,601,603,606,609,610,613,619,622,623,625,627,632,633,634,640,647,648,649,650,651,654,656,661,668,669,670,671,672,674,679,680,688,689,690,691,692,694,699,700,702,706,707,716,717,718,719,720,723,725,728,731,732,737,738,742,748,749,752,755,757,760,763,764,767,773,776,777,779,782,789,790,791,792,793,795,800,801,806,807,812,813,818,819,821,828,829,830,831,832,836,840,843,844,847,853,854,855,856,857,860,864,867,873,874,875,876,877,883,884,885,886,887,891,896,897,899,903,905,908,912,913,916,917,921,924,925,928,931,932,938,939,940,943,945,951,952,953,958,960,962,966,968,969,974,975,979,980,985,986,990,993,994,999,1000,1001,1007,1008,1011,1012,1017,1018,1022,1025,1026,1031,1032,1033,1038,1039,1043,1044,1050,1051,1052,1053,1054,1057,1059,1062,1065,1066,1070,1071,1077,1078,1081,1084,1085,1088,1099,1100,1101,1102,1103,1105,1106,1109,1111,1114,1117,1118,1123,1124,1126,1136,1137,1138,1139,1140,1142,1143,1149,1150,1151,1152,1153,1158,1159,1161,1168,1169,1172,1175,1176,1180,1181,1186,1187,1189,1194,1195,1201,1202,1205,1208,1209,1212,1219,1220,1222,1224,1229,1235,1236,1237,1238,1242,1248,1249,1250,1251,1255,1261,1262,1263,1264,1269,1270,1273,1276,1277,1280,1285,1290,1291,1293,1298,1299,1301,1308,1309,1311,1313,1318,1319,1321,1327,1328,1331,1335,1338,1341,1342,1346,1347,1351,1354,1359,1360,1363,1366,1367,1370,1376,1378,1382,1383,1387,1388,1391,1394,1395,1399,1402,1405,1406,1410,1413,1414,1417,1418,1421,1422,1424,1427,1431,1432,1435,1436,1438,1444,1445,1447,1449,1453,1455,1459,1460,1462,1467,1468,1470,1475,1476,1479,1482,1484,1487,1490,1491,1494,1499,1502,1503,1505,1507,1511,1512,1518,1519,1522,1528,1529,1530,1531,1532,1535,1546,1547,1548,1549,1550,1552,1553,1556,1557,1562,1563,1565,1569,1572,1573,1577,1578,1586,1587,1588,1589,1590,1592,1593,1596,1599,1602,1603,1611,1612,1613,1614,1615,1617,1618,1626,1627,1628,1629,1630,1632,1633,1639,1640,1643,1646,1647,1650,1655,1658,1659,1663,1664,1666,1669,1672,1675,1676,1677,1680,1681,1686,1689,1692,1693,1696,1697,1700,1706,1709,1710,1713,1714,1716,1721,1724,1725,1728,1729,1734,1737,1738,1743,1744,1746,1750,1753,1754,1759,1760,1761,1765,1767,1770,1772,1775,1780,1782,1785,1790,1792,1794
-----computeFrom-----
119,120
119,121
124,125
124,126
129,130
129,131
148,149
148,150
160,161
160,162
177,178
177,179
193,194
193,195
219,220
219,221
226,227
226,228
238,239
238,240
260,261
260,262
265,266
265,267
271,272
271,273
281,282
281,283
308,309
308,310
324,325
324,326
332,333
332,334
348,349
348,350
356,357
356,358
372,373
372,374
380,381
380,382
396,397
396,398
404,405
404,406
420,421
420,422
428,429
428,430
444,445
444,446
452,453
452,454
468,469
468,470
492,493
492,494
527,528
527,529
574,575
574,576
579,580
579,581
592,593
592,594
596,597
596,598
616,617
616,618
630,631
630,632
636,637
636,638
638,639
638,640
641,642
641,643
658,659
658,660
662,663
662,664
682,683
682,684
710,711
710,712
746,747
746,748
750,751
750,752
770,771
770,772
862,863
862,864
934,935
934,936
971,972
971,973
996,997
996,998
1003,1004
1003,1005
1028,1029
1028,1030
1035,1036
1035,1037
1075,1076
1075,1077
1079,1080
1079,1081
1091,1092
1091,1093
1128,1129
1128,1130
1165,1166
1165,1167
1199,1200
1199,1201
1203,1204
1203,1205
1215,1216
1215,1217
1227,1228
1227,1229
1240,1241
1240,1242
1253,1254
1253,1255
1267,1268
1267,1269
1271,1272
1271,1273
1283,1284
1283,1285
1295,1296
1295,1297
1304,1305
1304,1306
1315,1316
1315,1317
1333,1334
1333,1335
1357,1358
1357,1359
1361,1362
1361,1363
1373,1374
1373,1375
1384,1385
1384,1386
1389,1390
1389,1391
1397,1398
1397,1399
1440,1441
1440,1442
1473,1474
1473,1475
1477,1478
1477,1479
1516,1517
1516,1518
1520,1521
1520,1522
1538,1539
1538,1540
1637,1638
1637,1639
1641,1642
1641,1643
1678,1679
1678,1680
1684,1685
1684,1686
1694,1695
1694,1696
1703,1704
1703,1705
1711,1712
1711,1713
1726,1727
1726,1728
1748,1749
1748,1750
1756,1757
1756,1758
-----guardedBy-----
979,999
975,1000
1011,1031
1012,1032
1318,1435
1710,1725
1709,1724
1713,1728
-----guardedByNegation-----
1298,1435
1299,1319
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;SwitchStatement;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;GotoStatement;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
jas_image_t *jp2_decode(jas_stream_t *in, const char *optstr){	jp2_box_t *box;	int found;	jas_image_t *image;	jp2_dec_t *dec;	bool samedtype;	int dtype;	unsigned int i;	jp2_cmap_t *cmapd;	jp2_pclr_t *pclrd;	jp2_cdef_t *cdefd;	unsigned int channo;	int newcmptno;	int_fast32_t *lutents;#if 0	jp2_cdefchan_t *cdefent;	int cmptno;#endif	jp2_cmapent_t *cmapent;	jas_icchdr_t icchdr;	jas_iccprof_t *iccprof;	dec = 0;	box = 0;	image = 0;	JAS_DBGLOG(100, ("jp2_decode(%p, \"%s\")\n", in, optstr));	if (!(dec = jp2_dec_create())) {		goto error;	}	/* Get the first box.  This should be a JP box. */	if (!(box = jp2_box_get(in))) {		jas_eprintf("error: cannot get box\n");		goto error;	}	if (box->type != JP2_BOX_JP) {		jas_eprintf("error: expecting signature box\n");		goto error;	}	if (box->data.jp.magic != JP2_JP_MAGIC) {		jas_eprintf("incorrect magic number\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Get the second box.  This should be a FTYP box. */	if (!(box = jp2_box_get(in))) {		goto error;	}	if (box->type != JP2_BOX_FTYP) {		jas_eprintf("expecting file type box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Get more boxes... */	found = 0;	while ((box = jp2_box_get(in))) {		if (jas_getdbglevel() >= 1) {			jas_eprintf("got box type %s\n", box->info->name);		}		switch (box->type) {		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}		if (box) {			jp2_box_destroy(box);			box = 0;		}		if (found) {			break;		}	}	if (!found) {		jas_eprintf("error: no code stream found\n");		goto error;	}	if (!(dec->image = jpc_decode(in, optstr))) {		jas_eprintf("error: cannot decode code stream\n");		goto error;	}	/* An IHDR box must be present. */	if (!dec->ihdr) {		jas_eprintf("error: missing IHDR box\n");		goto error;	}	/* Does the number of components indicated in the IHDR box match	  the value specified in the code stream? */	if (dec->ihdr->data.ihdr.numcmpts != JAS_CAST(jas_uint,	  jas_image_numcmpts(dec->image))) {		jas_eprintf("warning: number of components mismatch\n");	}	/* At least one component must be present. */	if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}	/* Determine if all components have the same data type. */	samedtype = true;	dtype = jas_image_cmptdtype(dec->image, 0);	for (i = 1; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)); ++i) {		if (jas_image_cmptdtype(dec->image, i) != dtype) {			samedtype = false;			break;		}	}	/* Is the component data type indicated in the IHDR box consistent	  with the data in the code stream? */	if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {		jas_eprintf("warning: component data type mismatch\n");	}	/* Is the compression type supported? */	if (dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE) {		jas_eprintf("error: unsupported compression type\n");		goto error;	}	if (dec->bpcc) {		/* Is the number of components indicated in the BPCC box		  consistent with the code stream data? */		if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(jas_uint, jas_image_numcmpts(		  dec->image))) {			jas_eprintf("warning: number of components mismatch\n");		}		/* Is the component data type information indicated in the BPCC		  box consistent with the code stream data? */		if (!samedtype) {			for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));			  ++i) {				if (jas_image_cmptdtype(dec->image, i) !=				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		} else {			jas_eprintf("warning: superfluous BPCC box\n");		}	}	/* A COLR box must be present. */	if (!dec->colr) {		jas_eprintf("error: no COLR box\n");		goto error;	}	switch (dec->colr->data.colr.method) {	case JP2_COLR_ENUM:		jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));		break;	case JP2_COLR_ICC:		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen);		if (!iccprof) {			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}		jas_iccprof_gethdr(iccprof, &icchdr);		jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);		jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));		dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);		if (!dec->image->cmprof_) {			jas_iccprof_destroy(iccprof);			goto error;		}		jas_iccprof_destroy(iccprof);		break;	}	/* If a CMAP box is present, a PCLR box must also be present. */	if (dec->cmap && !dec->pclr) {		jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");		jp2_box_destroy(dec->cmap);		dec->cmap = 0;	}	/* If a CMAP box is not present, a PCLR box must not be present. */	if (!dec->cmap && dec->pclr) {		jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");		jp2_box_destroy(dec->pclr);		dec->pclr = 0;	}	/* Determine the number of channels (which is essentially the number	  of components after any palette mappings have been applied). */	dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans :	  JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));	/* Perform a basic sanity check on the CMAP box if present. */	if (dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(jas_uint,			  jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >=			  dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}	}	/* Allocate space for the channel-number to component-number LUT. */	if (!(dec->chantocmptlut = jas_alloc2(dec->numchans,	  sizeof(uint_fast16_t)))) {		jas_eprintf("error: no memory\n");		goto error;	}	if (!dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			dec->chantocmptlut[i] = i;		}	} else {		cmapd = &dec->cmap->data.cmap;		pclrd = &dec->pclr->data.pclr;		cdefd = &dec->cdef->data.cdef;		for (channo = 0; channo < cmapd->numchans; ++channo) {			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				if (!pclrd->numlutents) {					goto error;				}				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				if (!lutents) {					goto error;				}				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno,				  pclrd->numlutents, lutents,				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#else				/* suppress -Wunused-but-set-variable */				(void)cdefd;#endif			} else {				jas_eprintf("error: invalid MTYP in CMAP box\n");				goto error;			}		}	}	/* Mark all components as being of unknown type. */	for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)); ++i) {		jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);	}	/* Determine the type of each component. */	if (dec->cdef) {		for (i = 0; i < dec->cdef->data.cdef.numchans; ++i) {			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type,			  dec->cdef->data.cdef.ents[i].assoc));		}	} else {		for (i = 0; i < dec->numchans; ++i) {			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}	}	/* Delete any components that are not of interest. */	for (i = jas_image_numcmpts(dec->image); i > 0; --i) {		if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {			jas_image_delcmpt(dec->image, i - 1);		}	}	/* Ensure that some components survived. */	if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}#if 0jas_eprintf("no of components is %d\n", jas_image_numcmpts(dec->image));#endif	/* Prevent the image from being destroyed later. */	image = dec->image;	dec->image = 0;	jp2_dec_destroy(dec);	return image;error:	if (box) {		jp2_box_destroy(box);	}	if (dec) {		jp2_dec_destroy(dec);	}	return 0;}
jas_image_t
jas_image_t
*jp2_decode(jas_stream_t *in, const char *optstr)
*
jp2_decode
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
const char *optstr
const char
*optstr
*
optstr
{	jp2_box_t *box;	int found;	jas_image_t *image;	jp2_dec_t *dec;	bool samedtype;	int dtype;	unsigned int i;	jp2_cmap_t *cmapd;	jp2_pclr_t *pclrd;	jp2_cdef_t *cdefd;	unsigned int channo;	int newcmptno;	int_fast32_t *lutents;#if 0	jp2_cdefchan_t *cdefent;	int cmptno;#endif	jp2_cmapent_t *cmapent;	jas_icchdr_t icchdr;	jas_iccprof_t *iccprof;	dec = 0;	box = 0;	image = 0;	JAS_DBGLOG(100, ("jp2_decode(%p, \"%s\")\n", in, optstr));	if (!(dec = jp2_dec_create())) {		goto error;	}	/* Get the first box.  This should be a JP box. */	if (!(box = jp2_box_get(in))) {		jas_eprintf("error: cannot get box\n");		goto error;	}	if (box->type != JP2_BOX_JP) {		jas_eprintf("error: expecting signature box\n");		goto error;	}	if (box->data.jp.magic != JP2_JP_MAGIC) {		jas_eprintf("incorrect magic number\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Get the second box.  This should be a FTYP box. */	if (!(box = jp2_box_get(in))) {		goto error;	}	if (box->type != JP2_BOX_FTYP) {		jas_eprintf("expecting file type box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Get more boxes... */	found = 0;	while ((box = jp2_box_get(in))) {		if (jas_getdbglevel() >= 1) {			jas_eprintf("got box type %s\n", box->info->name);		}		switch (box->type) {		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}		if (box) {			jp2_box_destroy(box);			box = 0;		}		if (found) {			break;		}	}	if (!found) {		jas_eprintf("error: no code stream found\n");		goto error;	}	if (!(dec->image = jpc_decode(in, optstr))) {		jas_eprintf("error: cannot decode code stream\n");		goto error;	}	/* An IHDR box must be present. */	if (!dec->ihdr) {		jas_eprintf("error: missing IHDR box\n");		goto error;	}	/* Does the number of components indicated in the IHDR box match	  the value specified in the code stream? */	if (dec->ihdr->data.ihdr.numcmpts != JAS_CAST(jas_uint,	  jas_image_numcmpts(dec->image))) {		jas_eprintf("warning: number of components mismatch\n");	}	/* At least one component must be present. */	if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}	/* Determine if all components have the same data type. */	samedtype = true;	dtype = jas_image_cmptdtype(dec->image, 0);	for (i = 1; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)); ++i) {		if (jas_image_cmptdtype(dec->image, i) != dtype) {			samedtype = false;			break;		}	}	/* Is the component data type indicated in the IHDR box consistent	  with the data in the code stream? */	if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {		jas_eprintf("warning: component data type mismatch\n");	}	/* Is the compression type supported? */	if (dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE) {		jas_eprintf("error: unsupported compression type\n");		goto error;	}	if (dec->bpcc) {		/* Is the number of components indicated in the BPCC box		  consistent with the code stream data? */		if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(jas_uint, jas_image_numcmpts(		  dec->image))) {			jas_eprintf("warning: number of components mismatch\n");		}		/* Is the component data type information indicated in the BPCC		  box consistent with the code stream data? */		if (!samedtype) {			for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));			  ++i) {				if (jas_image_cmptdtype(dec->image, i) !=				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		} else {			jas_eprintf("warning: superfluous BPCC box\n");		}	}	/* A COLR box must be present. */	if (!dec->colr) {		jas_eprintf("error: no COLR box\n");		goto error;	}	switch (dec->colr->data.colr.method) {	case JP2_COLR_ENUM:		jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));		break;	case JP2_COLR_ICC:		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen);		if (!iccprof) {			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}		jas_iccprof_gethdr(iccprof, &icchdr);		jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);		jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));		dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);		if (!dec->image->cmprof_) {			jas_iccprof_destroy(iccprof);			goto error;		}		jas_iccprof_destroy(iccprof);		break;	}	/* If a CMAP box is present, a PCLR box must also be present. */	if (dec->cmap && !dec->pclr) {		jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");		jp2_box_destroy(dec->cmap);		dec->cmap = 0;	}	/* If a CMAP box is not present, a PCLR box must not be present. */	if (!dec->cmap && dec->pclr) {		jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");		jp2_box_destroy(dec->pclr);		dec->pclr = 0;	}	/* Determine the number of channels (which is essentially the number	  of components after any palette mappings have been applied). */	dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans :	  JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));	/* Perform a basic sanity check on the CMAP box if present. */	if (dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(jas_uint,			  jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >=			  dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}	}	/* Allocate space for the channel-number to component-number LUT. */	if (!(dec->chantocmptlut = jas_alloc2(dec->numchans,	  sizeof(uint_fast16_t)))) {		jas_eprintf("error: no memory\n");		goto error;	}	if (!dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			dec->chantocmptlut[i] = i;		}	} else {		cmapd = &dec->cmap->data.cmap;		pclrd = &dec->pclr->data.pclr;		cdefd = &dec->cdef->data.cdef;		for (channo = 0; channo < cmapd->numchans; ++channo) {			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				if (!pclrd->numlutents) {					goto error;				}				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				if (!lutents) {					goto error;				}				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno,				  pclrd->numlutents, lutents,				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#else				/* suppress -Wunused-but-set-variable */				(void)cdefd;#endif			} else {				jas_eprintf("error: invalid MTYP in CMAP box\n");				goto error;			}		}	}	/* Mark all components as being of unknown type. */	for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)); ++i) {		jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);	}	/* Determine the type of each component. */	if (dec->cdef) {		for (i = 0; i < dec->cdef->data.cdef.numchans; ++i) {			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type,			  dec->cdef->data.cdef.ents[i].assoc));		}	} else {		for (i = 0; i < dec->numchans; ++i) {			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}	}	/* Delete any components that are not of interest. */	for (i = jas_image_numcmpts(dec->image); i > 0; --i) {		if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {			jas_image_delcmpt(dec->image, i - 1);		}	}	/* Ensure that some components survived. */	if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}#if 0jas_eprintf("no of components is %d\n", jas_image_numcmpts(dec->image));#endif	/* Prevent the image from being destroyed later. */	image = dec->image;	dec->image = 0;	jp2_dec_destroy(dec);	return image;error:	if (box) {		jp2_box_destroy(box);	}	if (dec) {		jp2_dec_destroy(dec);	}	return 0;}
jp2_box_t *box;
jp2_box_t *box;
jp2_box_t
jp2_box_t
*box
*
box
int found;
int found;
int
found
found
jas_image_t *image;
jas_image_t *image;
jas_image_t
jas_image_t
*image
*
image
jp2_dec_t *dec;
jp2_dec_t *dec;
jp2_dec_t
jp2_dec_t
*dec
*
dec
bool samedtype;
bool samedtype;
bool
samedtype
samedtype
int dtype;
int dtype;
int
dtype
dtype
unsigned int i;
unsigned int i;
unsigned int
i
i
jp2_cmap_t *cmapd;
jp2_cmap_t *cmapd;
jp2_cmap_t
jp2_cmap_t
*cmapd
*
cmapd
jp2_pclr_t *pclrd;
jp2_pclr_t *pclrd;
jp2_pclr_t
jp2_pclr_t
*pclrd
*
pclrd
jp2_cdef_t *cdefd;
jp2_cdef_t *cdefd;
jp2_cdef_t
jp2_cdef_t
*cdefd
*
cdefd
unsigned int channo;
unsigned int channo;
unsigned int
channo
channo
int newcmptno;
int newcmptno;
int
newcmptno
newcmptno
int_fast32_t *lutents;
int_fast32_t *lutents;
int_fast32_t
int_fast32_t
*lutents
*
lutents
jp2_cmapent_t *cmapent;
jp2_cmapent_t *cmapent;
jp2_cmapent_t
jp2_cmapent_t
*cmapent
*
cmapent
jas_icchdr_t icchdr;
jas_icchdr_t icchdr;
jas_icchdr_t
jas_icchdr_t
icchdr
icchdr
jas_iccprof_t *iccprof;
jas_iccprof_t *iccprof;
jas_iccprof_t
jas_iccprof_t
*iccprof
*
iccprof
dec = 0;
dec = 0
dec
dec
0
box = 0;
box = 0
box
box
0
image = 0;
image = 0
image
image
0
JAS_DBGLOG(100, ("jp2_decode(%p, \"%s\")\n", in, optstr));
JAS_DBGLOG(100, ("jp2_decode(%p, \"%s\")\n", in, optstr))
JAS_DBGLOG
JAS_DBGLOG
100
("jp2_decode(%p, \"%s\")\n", in, optstr)
"jp2_decode(%p, \"%s\")\n", in, optstr
"jp2_decode(%p, \"%s\")\n"
in
in
optstr
optstr
if (!(dec = jp2_dec_create())) {		goto error;	}
!(dec = jp2_dec_create())
(dec = jp2_dec_create())
dec = jp2_dec_create()
dec
dec
jp2_dec_create()
jp2_dec_create
jp2_dec_create
{		goto error;	}
goto error;
error
if (!(box = jp2_box_get(in))) {		jas_eprintf("error: cannot get box\n");		goto error;	}
!(box = jp2_box_get(in))
(box = jp2_box_get(in))
box = jp2_box_get(in)
box
box
jp2_box_get(in)
jp2_box_get
jp2_box_get
in
in
{		jas_eprintf("error: cannot get box\n");		goto error;	}
jas_eprintf("error: cannot get box\n");
jas_eprintf("error: cannot get box\n")
jas_eprintf
jas_eprintf
"error: cannot get box\n"
goto error;
error
if (box->type != JP2_BOX_JP) {		jas_eprintf("error: expecting signature box\n");		goto error;	}
box->type != JP2_BOX_JP
box->type
box
box
type
JP2_BOX_JP
JP2_BOX_JP
{		jas_eprintf("error: expecting signature box\n");		goto error;	}
jas_eprintf("error: expecting signature box\n");
jas_eprintf("error: expecting signature box\n")
jas_eprintf
jas_eprintf
"error: expecting signature box\n"
goto error;
error
if (box->data.jp.magic != JP2_JP_MAGIC) {		jas_eprintf("incorrect magic number\n");		goto error;	}
box->data.jp.magic != JP2_JP_MAGIC
box->data.jp.magic
box->data.jp
box->data
box
box
data
jp
magic
JP2_JP_MAGIC
JP2_JP_MAGIC
{		jas_eprintf("incorrect magic number\n");		goto error;	}
jas_eprintf("incorrect magic number\n");
jas_eprintf("incorrect magic number\n")
jas_eprintf
jas_eprintf
"incorrect magic number\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (!(box = jp2_box_get(in))) {		goto error;	}
!(box = jp2_box_get(in))
(box = jp2_box_get(in))
box = jp2_box_get(in)
box
box
jp2_box_get(in)
jp2_box_get
jp2_box_get
in
in
{		goto error;	}
goto error;
error
if (box->type != JP2_BOX_FTYP) {		jas_eprintf("expecting file type box\n");		goto error;	}
box->type != JP2_BOX_FTYP
box->type
box
box
type
JP2_BOX_FTYP
JP2_BOX_FTYP
{		jas_eprintf("expecting file type box\n");		goto error;	}
jas_eprintf("expecting file type box\n");
jas_eprintf("expecting file type box\n")
jas_eprintf
jas_eprintf
"expecting file type box\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
found = 0;
found = 0
found
found
0
while ((box = jp2_box_get(in))) {		if (jas_getdbglevel() >= 1) {			jas_eprintf("got box type %s\n", box->info->name);		}		switch (box->type) {		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}		if (box) {			jp2_box_destroy(box);			box = 0;		}		if (found) {			break;		}	}
(box = jp2_box_get(in))
box = jp2_box_get(in)
box
box
jp2_box_get(in)
jp2_box_get
jp2_box_get
in
in
{		if (jas_getdbglevel() >= 1) {			jas_eprintf("got box type %s\n", box->info->name);		}		switch (box->type) {		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}		if (box) {			jp2_box_destroy(box);			box = 0;		}		if (found) {			break;		}	}
if (jas_getdbglevel() >= 1) {			jas_eprintf("got box type %s\n", box->info->name);		}
jas_getdbglevel() >= 1
jas_getdbglevel()
jas_getdbglevel
jas_getdbglevel
1
{			jas_eprintf("got box type %s\n", box->info->name);		}
jas_eprintf("got box type %s\n", box->info->name);
jas_eprintf("got box type %s\n", box->info->name)
jas_eprintf
jas_eprintf
"got box type %s\n"
box->info->name
box->info
box
box
info
name
switch (box->type) {		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}
box->type
box
box
type
{		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}
case JP2_BOX_JP2C:
JP2_BOX_JP2C
JP2_BOX_JP2C
found = 1;
found = 1
found
found
1
break;
case JP2_BOX_IHDR:
JP2_BOX_IHDR
JP2_BOX_IHDR
if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}
!dec->ihdr
dec->ihdr
dec
dec
ihdr
{				dec->ihdr = box;				box = 0;			}
dec->ihdr = box;
dec->ihdr = box
dec->ihdr
dec
dec
ihdr
box
box
box = 0;
box = 0
box
box
0
break;
case JP2_BOX_BPCC:
JP2_BOX_BPCC
JP2_BOX_BPCC
if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}
!dec->bpcc
dec->bpcc
dec
dec
bpcc
{				dec->bpcc = box;				box = 0;			}
dec->bpcc = box;
dec->bpcc = box
dec->bpcc
dec
dec
bpcc
box
box
box = 0;
box = 0
box
box
0
break;
case JP2_BOX_CDEF:
JP2_BOX_CDEF
JP2_BOX_CDEF
if (!dec->cdef) {				dec->cdef = box;				box = 0;			}
!dec->cdef
dec->cdef
dec
dec
cdef
{				dec->cdef = box;				box = 0;			}
dec->cdef = box;
dec->cdef = box
dec->cdef
dec
dec
cdef
box
box
box = 0;
box = 0
box
box
0
break;
case JP2_BOX_PCLR:
JP2_BOX_PCLR
JP2_BOX_PCLR
if (!dec->pclr) {				dec->pclr = box;				box = 0;			}
!dec->pclr
dec->pclr
dec
dec
pclr
{				dec->pclr = box;				box = 0;			}
dec->pclr = box;
dec->pclr = box
dec->pclr
dec
dec
pclr
box
box
box = 0;
box = 0
box
box
0
break;
case JP2_BOX_CMAP:
JP2_BOX_CMAP
JP2_BOX_CMAP
if (!dec->cmap) {				dec->cmap = box;				box = 0;			}
!dec->cmap
dec->cmap
dec
dec
cmap
{				dec->cmap = box;				box = 0;			}
dec->cmap = box;
dec->cmap = box
dec->cmap
dec
dec
cmap
box
box
box = 0;
box = 0
box
box
0
break;
case JP2_BOX_COLR:
JP2_BOX_COLR
JP2_BOX_COLR
if (!dec->colr) {				dec->colr = box;				box = 0;			}
!dec->colr
dec->colr
dec
dec
colr
{				dec->colr = box;				box = 0;			}
dec->colr = box;
dec->colr = box
dec->colr
dec
dec
colr
box
box
box = 0;
box = 0
box
box
0
break;
if (box) {			jp2_box_destroy(box);			box = 0;		}
box
box
{			jp2_box_destroy(box);			box = 0;		}
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (found) {			break;		}
found
found
{			break;		}
break;
if (!found) {		jas_eprintf("error: no code stream found\n");		goto error;	}
!found
found
found
{		jas_eprintf("error: no code stream found\n");		goto error;	}
jas_eprintf("error: no code stream found\n");
jas_eprintf("error: no code stream found\n")
jas_eprintf
jas_eprintf
"error: no code stream found\n"
goto error;
error
if (!(dec->image = jpc_decode(in, optstr))) {		jas_eprintf("error: cannot decode code stream\n");		goto error;	}
!(dec->image = jpc_decode(in, optstr))
(dec->image = jpc_decode(in, optstr))
dec->image = jpc_decode(in, optstr)
dec->image
dec
dec
image
jpc_decode(in, optstr)
jpc_decode
jpc_decode
in
in
optstr
optstr
{		jas_eprintf("error: cannot decode code stream\n");		goto error;	}
jas_eprintf("error: cannot decode code stream\n");
jas_eprintf("error: cannot decode code stream\n")
jas_eprintf
jas_eprintf
"error: cannot decode code stream\n"
goto error;
error
if (!dec->ihdr) {		jas_eprintf("error: missing IHDR box\n");		goto error;	}
!dec->ihdr
dec->ihdr
dec
dec
ihdr
{		jas_eprintf("error: missing IHDR box\n");		goto error;	}
jas_eprintf("error: missing IHDR box\n");
jas_eprintf("error: missing IHDR box\n")
jas_eprintf
jas_eprintf
"error: missing IHDR box\n"
goto error;
error
if (dec->ihdr->data.ihdr.numcmpts != JAS_CAST(jas_uint,	  jas_image_numcmpts(dec->image))) {		jas_eprintf("warning: number of components mismatch\n");	}
dec->ihdr->data.ihdr.numcmpts != JAS_CAST(jas_uint,	  jas_image_numcmpts(dec->image))
dec->ihdr->data.ihdr.numcmpts
dec->ihdr->data.ihdr
dec->ihdr->data
dec->ihdr
dec
dec
ihdr
data
ihdr
numcmpts
JAS_CAST(jas_uint,	  jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
jas_uint
jas_uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
{		jas_eprintf("warning: number of components mismatch\n");	}
jas_eprintf("warning: number of components mismatch\n");
jas_eprintf("warning: number of components mismatch\n")
jas_eprintf
jas_eprintf
"warning: number of components mismatch\n"
if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}
!jas_image_numcmpts(dec->image)
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
{		jas_eprintf("error: no components\n");		goto error;	}
jas_eprintf("error: no components\n");
jas_eprintf("error: no components\n")
jas_eprintf
jas_eprintf
"error: no components\n"
goto error;
error
samedtype = true;
samedtype = true
samedtype
samedtype
true
dtype = jas_image_cmptdtype(dec->image, 0);
dtype = jas_image_cmptdtype(dec->image, 0)
dtype
dtype
jas_image_cmptdtype(dec->image, 0)
jas_image_cmptdtype
jas_image_cmptdtype
dec->image
dec
dec
image
0
for (i = 1; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)); ++i) {		if (jas_image_cmptdtype(dec->image, i) != dtype) {			samedtype = false;			break;		}	}
i = 1;
i = 1
i
i
1
i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image))
i
i
JAS_CAST(jas_uint, jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
jas_uint
jas_uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
++i
i
i
{		if (jas_image_cmptdtype(dec->image, i) != dtype) {			samedtype = false;			break;		}	}
if (jas_image_cmptdtype(dec->image, i) != dtype) {			samedtype = false;			break;		}
jas_image_cmptdtype(dec->image, i) != dtype
jas_image_cmptdtype(dec->image, i)
jas_image_cmptdtype
jas_image_cmptdtype
dec->image
dec
dec
image
i
i
dtype
dtype
{			samedtype = false;			break;		}
samedtype = false;
samedtype = false
samedtype
samedtype
false
break;
if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {		jas_eprintf("warning: component data type mismatch\n");	}
(samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)
(samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype))
samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
samedtype
samedtype
dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
dec->ihdr->data.ihdr.bpc
dec->ihdr->data.ihdr
dec->ihdr->data
dec->ihdr
dec
dec
ihdr
data
ihdr
bpc
JP2_DTYPETOBPC(dtype)
JP2_DTYPETOBPC
JP2_DTYPETOBPC
dtype
dtype
(!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)
!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL
!samedtype
samedtype
samedtype
dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL
dec->ihdr->data.ihdr.bpc
dec->ihdr->data.ihdr
dec->ihdr->data
dec->ihdr
dec
dec
ihdr
data
ihdr
bpc
JP2_IHDR_BPCNULL
JP2_IHDR_BPCNULL
{		jas_eprintf("warning: component data type mismatch\n");	}
jas_eprintf("warning: component data type mismatch\n");
jas_eprintf("warning: component data type mismatch\n")
jas_eprintf
jas_eprintf
"warning: component data type mismatch\n"
if (dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE) {		jas_eprintf("error: unsupported compression type\n");		goto error;	}
dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE
dec->ihdr->data.ihdr.comptype
dec->ihdr->data.ihdr
dec->ihdr->data
dec->ihdr
dec
dec
ihdr
data
ihdr
comptype
JP2_IHDR_COMPTYPE
JP2_IHDR_COMPTYPE
{		jas_eprintf("error: unsupported compression type\n");		goto error;	}
jas_eprintf("error: unsupported compression type\n");
jas_eprintf("error: unsupported compression type\n")
jas_eprintf
jas_eprintf
"error: unsupported compression type\n"
goto error;
error
if (dec->bpcc) {		/* Is the number of components indicated in the BPCC box		  consistent with the code stream data? */		if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(jas_uint, jas_image_numcmpts(		  dec->image))) {			jas_eprintf("warning: number of components mismatch\n");		}		/* Is the component data type information indicated in the BPCC		  box consistent with the code stream data? */		if (!samedtype) {			for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));			  ++i) {				if (jas_image_cmptdtype(dec->image, i) !=				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		} else {			jas_eprintf("warning: superfluous BPCC box\n");		}	}
dec->bpcc
dec
dec
bpcc
{		/* Is the number of components indicated in the BPCC box		  consistent with the code stream data? */		if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(jas_uint, jas_image_numcmpts(		  dec->image))) {			jas_eprintf("warning: number of components mismatch\n");		}		/* Is the component data type information indicated in the BPCC		  box consistent with the code stream data? */		if (!samedtype) {			for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));			  ++i) {				if (jas_image_cmptdtype(dec->image, i) !=				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		} else {			jas_eprintf("warning: superfluous BPCC box\n");		}	}
if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(jas_uint, jas_image_numcmpts(		  dec->image))) {			jas_eprintf("warning: number of components mismatch\n");		}
dec->bpcc->data.bpcc.numcmpts != JAS_CAST(jas_uint, jas_image_numcmpts(		  dec->image))
dec->bpcc->data.bpcc.numcmpts
dec->bpcc->data.bpcc
dec->bpcc->data
dec->bpcc
dec
dec
bpcc
data
bpcc
numcmpts
JAS_CAST(jas_uint, jas_image_numcmpts(		  dec->image))
JAS_CAST
JAS_CAST
jas_uint
jas_uint
jas_image_numcmpts(		  dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
{			jas_eprintf("warning: number of components mismatch\n");		}
jas_eprintf("warning: number of components mismatch\n");
jas_eprintf("warning: number of components mismatch\n")
jas_eprintf
jas_eprintf
"warning: number of components mismatch\n"
if (!samedtype) {			for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));			  ++i) {				if (jas_image_cmptdtype(dec->image, i) !=				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		} else {			jas_eprintf("warning: superfluous BPCC box\n");		}
!samedtype
samedtype
samedtype
{			for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));			  ++i) {				if (jas_image_cmptdtype(dec->image, i) !=				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		}
for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));			  ++i) {				if (jas_image_cmptdtype(dec->image, i) !=				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}
i = 0;
i = 0
i
i
0
i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image))
i
i
JAS_CAST(jas_uint, jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
jas_uint
jas_uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
++i
i
i
{				if (jas_image_cmptdtype(dec->image, i) !=				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}
if (jas_image_cmptdtype(dec->image, i) !=				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}
jas_image_cmptdtype(dec->image, i) !=				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])
jas_image_cmptdtype(dec->image, i)
jas_image_cmptdtype
jas_image_cmptdtype
dec->image
dec
dec
image
i
i
JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])
JP2_BPCTODTYPE
JP2_BPCTODTYPE
dec->bpcc->data.bpcc.bpcs[i]
dec->bpcc->data.bpcc.bpcs
dec->bpcc->data.bpcc
dec->bpcc->data
dec->bpcc
dec
dec
bpcc
data
bpcc
bpcs
i
i
{					jas_eprintf("warning: component data type mismatch\n");				}
jas_eprintf("warning: component data type mismatch\n");
jas_eprintf("warning: component data type mismatch\n")
jas_eprintf
jas_eprintf
"warning: component data type mismatch\n"
{			jas_eprintf("warning: superfluous BPCC box\n");		}
jas_eprintf("warning: superfluous BPCC box\n");
jas_eprintf("warning: superfluous BPCC box\n")
jas_eprintf
jas_eprintf
"warning: superfluous BPCC box\n"
if (!dec->colr) {		jas_eprintf("error: no COLR box\n");		goto error;	}
!dec->colr
dec->colr
dec
dec
colr
{		jas_eprintf("error: no COLR box\n");		goto error;	}
jas_eprintf("error: no COLR box\n");
jas_eprintf("error: no COLR box\n")
jas_eprintf
jas_eprintf
"error: no COLR box\n"
goto error;
error
switch (dec->colr->data.colr.method) {	case JP2_COLR_ENUM:		jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));		break;	case JP2_COLR_ICC:		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen);		if (!iccprof) {			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}		jas_iccprof_gethdr(iccprof, &icchdr);		jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);		jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));		dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);		if (!dec->image->cmprof_) {			jas_iccprof_destroy(iccprof);			goto error;		}		jas_iccprof_destroy(iccprof);		break;	}
dec->colr->data.colr.method
dec->colr->data.colr
dec->colr->data
dec->colr
dec
dec
colr
data
colr
method
{	case JP2_COLR_ENUM:		jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));		break;	case JP2_COLR_ICC:		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen);		if (!iccprof) {			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}		jas_iccprof_gethdr(iccprof, &icchdr);		jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);		jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));		dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);		if (!dec->image->cmprof_) {			jas_iccprof_destroy(iccprof);			goto error;		}		jas_iccprof_destroy(iccprof);		break;	}
case JP2_COLR_ENUM:
JP2_COLR_ENUM
JP2_COLR_ENUM
jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));
jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr))
jas_image_setclrspc
jas_image_setclrspc
dec->image
dec
dec
image
jp2_getcs(&dec->colr->data.colr)
jp2_getcs
jp2_getcs
&dec->colr->data.colr
dec->colr->data.colr
dec->colr->data
dec->colr
dec
dec
colr
data
colr
break;
case JP2_COLR_ICC:
JP2_COLR_ICC
JP2_COLR_ICC
iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen);
iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen)
iccprof
iccprof
jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen)
jas_iccprof_createfrombuf
jas_iccprof_createfrombuf
dec->colr->data.colr.iccp
dec->colr->data.colr
dec->colr->data
dec->colr
dec
dec
colr
data
colr
iccp
dec->colr->data.colr.iccplen
dec->colr->data.colr
dec->colr->data
dec->colr
dec
dec
colr
data
colr
iccplen
if (!iccprof) {			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}
!iccprof
iccprof
iccprof
{			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}
jas_eprintf("error: failed to parse ICC profile\n");
jas_eprintf("error: failed to parse ICC profile\n")
jas_eprintf
jas_eprintf
"error: failed to parse ICC profile\n"
goto error;
error
jas_iccprof_gethdr(iccprof, &icchdr);
jas_iccprof_gethdr(iccprof, &icchdr)
jas_iccprof_gethdr
jas_iccprof_gethdr
iccprof
iccprof
&icchdr
icchdr
icchdr
jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);
jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc)
jas_eprintf
jas_eprintf
"ICC Profile CS %08x\n"
icchdr.colorspc
icchdr
icchdr
colorspc
jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));
jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc))
jas_image_setclrspc
jas_image_setclrspc
dec->image
dec
dec
image
fromiccpcs(icchdr.colorspc)
fromiccpcs
fromiccpcs
icchdr.colorspc
icchdr
icchdr
colorspc
dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);
dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof)
dec->image->cmprof_
dec->image
dec
dec
image
cmprof_
jas_cmprof_createfromiccprof(iccprof)
jas_cmprof_createfromiccprof
jas_cmprof_createfromiccprof
iccprof
iccprof
if (!dec->image->cmprof_) {			jas_iccprof_destroy(iccprof);			goto error;		}
!dec->image->cmprof_
dec->image->cmprof_
dec->image
dec
dec
image
cmprof_
{			jas_iccprof_destroy(iccprof);			goto error;		}
jas_iccprof_destroy(iccprof);
jas_iccprof_destroy(iccprof)
jas_iccprof_destroy
jas_iccprof_destroy
iccprof
iccprof
goto error;
error
jas_iccprof_destroy(iccprof);
jas_iccprof_destroy(iccprof)
jas_iccprof_destroy
jas_iccprof_destroy
iccprof
iccprof
break;
if (dec->cmap && !dec->pclr) {		jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");		jp2_box_destroy(dec->cmap);		dec->cmap = 0;	}
dec->cmap && !dec->pclr
dec->cmap
dec
dec
cmap
!dec->pclr
dec->pclr
dec
dec
pclr
{		jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");		jp2_box_destroy(dec->cmap);		dec->cmap = 0;	}
jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");
jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n")
jas_eprintf
jas_eprintf
"warning: missing PCLR box or superfluous CMAP box\n"
jp2_box_destroy(dec->cmap);
jp2_box_destroy(dec->cmap)
jp2_box_destroy
jp2_box_destroy
dec->cmap
dec
dec
cmap
dec->cmap = 0;
dec->cmap = 0
dec->cmap
dec
dec
cmap
0
if (!dec->cmap && dec->pclr) {		jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");		jp2_box_destroy(dec->pclr);		dec->pclr = 0;	}
!dec->cmap && dec->pclr
!dec->cmap
dec->cmap
dec
dec
cmap
dec->pclr
dec
dec
pclr
{		jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");		jp2_box_destroy(dec->pclr);		dec->pclr = 0;	}
jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");
jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n")
jas_eprintf
jas_eprintf
"warning: missing CMAP box or superfluous PCLR box\n"
jp2_box_destroy(dec->pclr);
jp2_box_destroy(dec->pclr)
jp2_box_destroy
jp2_box_destroy
dec->pclr
dec
dec
pclr
dec->pclr = 0;
dec->pclr = 0
dec->pclr
dec
dec
pclr
0
dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans :	  JAS_CAST(jas_uint, jas_image_numcmpts(dec->image));
dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans :	  JAS_CAST(jas_uint, jas_image_numcmpts(dec->image))
dec->numchans
dec
dec
numchans
dec->cmap ? dec->cmap->data.cmap.numchans :	  JAS_CAST(jas_uint, jas_image_numcmpts(dec->image))
dec->cmap
dec
dec
cmap
dec->cmap->data.cmap.numchans
dec->cmap->data.cmap
dec->cmap->data
dec->cmap
dec
dec
cmap
data
cmap
numchans
JAS_CAST(jas_uint, jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
jas_uint
jas_uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
if (dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(jas_uint,			  jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >=			  dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}	}
dec->cmap
dec
dec
cmap
{		for (i = 0; i < dec->numchans; ++i) {			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(jas_uint,			  jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >=			  dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}	}
for (i = 0; i < dec->numchans; ++i) {			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(jas_uint,			  jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >=			  dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}
i = 0;
i = 0
i
i
0
i < dec->numchans
i
i
dec->numchans
dec
dec
numchans
++i
i
i
{			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(jas_uint,			  jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >=			  dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}
if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(jas_uint,			  jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}
dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(jas_uint,			  jas_image_numcmpts(dec->image))
dec->cmap->data.cmap.ents[i].cmptno
dec->cmap->data.cmap.ents[i]
dec->cmap->data.cmap.ents
dec->cmap->data.cmap
dec->cmap->data
dec->cmap
dec
dec
cmap
data
cmap
ents
i
i
cmptno
JAS_CAST(jas_uint,			  jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
jas_uint
jas_uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
{				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}
jas_eprintf("error: invalid component number in CMAP box\n");
jas_eprintf("error: invalid component number in CMAP box\n")
jas_eprintf
jas_eprintf
"error: invalid component number in CMAP box\n"
goto error;
error
if (dec->cmap->data.cmap.ents[i].pcol >=			  dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}
dec->cmap->data.cmap.ents[i].pcol >=			  dec->pclr->data.pclr.numchans
dec->cmap->data.cmap.ents[i].pcol
dec->cmap->data.cmap.ents[i]
dec->cmap->data.cmap.ents
dec->cmap->data.cmap
dec->cmap->data
dec->cmap
dec
dec
cmap
data
cmap
ents
i
i
pcol
dec->pclr->data.pclr.numchans
dec->pclr->data.pclr
dec->pclr->data
dec->pclr
dec
dec
pclr
data
pclr
numchans
{				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}
jas_eprintf("error: invalid CMAP LUT index\n");
jas_eprintf("error: invalid CMAP LUT index\n")
jas_eprintf
jas_eprintf
"error: invalid CMAP LUT index\n"
goto error;
error
if (!(dec->chantocmptlut = jas_alloc2(dec->numchans,	  sizeof(uint_fast16_t)))) {		jas_eprintf("error: no memory\n");		goto error;	}
!(dec->chantocmptlut = jas_alloc2(dec->numchans,	  sizeof(uint_fast16_t)))
(dec->chantocmptlut = jas_alloc2(dec->numchans,	  sizeof(uint_fast16_t)))
dec->chantocmptlut = jas_alloc2(dec->numchans,	  sizeof(uint_fast16_t))
dec->chantocmptlut
dec
dec
chantocmptlut
jas_alloc2(dec->numchans,	  sizeof(uint_fast16_t))
jas_alloc2
jas_alloc2
dec->numchans
dec
dec
numchans
sizeof(uint_fast16_t)
uint_fast16_t
uint_fast16_t
uint_fast16_t

{		jas_eprintf("error: no memory\n");		goto error;	}
jas_eprintf("error: no memory\n");
jas_eprintf("error: no memory\n")
jas_eprintf
jas_eprintf
"error: no memory\n"
goto error;
error
if (!dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			dec->chantocmptlut[i] = i;		}	} else {		cmapd = &dec->cmap->data.cmap;		pclrd = &dec->pclr->data.pclr;		cdefd = &dec->cdef->data.cdef;		for (channo = 0; channo < cmapd->numchans; ++channo) {			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				if (!pclrd->numlutents) {					goto error;				}				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				if (!lutents) {					goto error;				}				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno,				  pclrd->numlutents, lutents,				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#else				/* suppress -Wunused-but-set-variable */				(void)cdefd;#endif			} else {				jas_eprintf("error: invalid MTYP in CMAP box\n");				goto error;			}		}	}
!dec->cmap
dec->cmap
dec
dec
cmap
{		for (i = 0; i < dec->numchans; ++i) {			dec->chantocmptlut[i] = i;		}	}
for (i = 0; i < dec->numchans; ++i) {			dec->chantocmptlut[i] = i;		}
i = 0;
i = 0
i
i
0
i < dec->numchans
i
i
dec->numchans
dec
dec
numchans
++i
i
i
{			dec->chantocmptlut[i] = i;		}
dec->chantocmptlut[i] = i;
dec->chantocmptlut[i] = i
dec->chantocmptlut[i]
dec->chantocmptlut
dec
dec
chantocmptlut
i
i
i
i
{		cmapd = &dec->cmap->data.cmap;		pclrd = &dec->pclr->data.pclr;		cdefd = &dec->cdef->data.cdef;		for (channo = 0; channo < cmapd->numchans; ++channo) {			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				if (!pclrd->numlutents) {					goto error;				}				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				if (!lutents) {					goto error;				}				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno,				  pclrd->numlutents, lutents,				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#else				/* suppress -Wunused-but-set-variable */				(void)cdefd;#endif			} else {				jas_eprintf("error: invalid MTYP in CMAP box\n");				goto error;			}		}	}
cmapd = &dec->cmap->data.cmap;
cmapd = &dec->cmap->data.cmap
cmapd
cmapd
&dec->cmap->data.cmap
dec->cmap->data.cmap
dec->cmap->data
dec->cmap
dec
dec
cmap
data
cmap
pclrd = &dec->pclr->data.pclr;
pclrd = &dec->pclr->data.pclr
pclrd
pclrd
&dec->pclr->data.pclr
dec->pclr->data.pclr
dec->pclr->data
dec->pclr
dec
dec
pclr
data
pclr
cdefd = &dec->cdef->data.cdef;
cdefd = &dec->cdef->data.cdef
cdefd
cdefd
&dec->cdef->data.cdef
dec->cdef->data.cdef
dec->cdef->data
dec->cdef
dec
dec
cdef
data
cdef
for (channo = 0; channo < cmapd->numchans; ++channo) {			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				if (!pclrd->numlutents) {					goto error;				}				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				if (!lutents) {					goto error;				}				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno,				  pclrd->numlutents, lutents,				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#else				/* suppress -Wunused-but-set-variable */				(void)cdefd;#endif			} else {				jas_eprintf("error: invalid MTYP in CMAP box\n");				goto error;			}		}
channo = 0;
channo = 0
channo
channo
0
channo < cmapd->numchans
channo
channo
cmapd->numchans
cmapd
cmapd
numchans
++channo
channo
channo
{			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				if (!pclrd->numlutents) {					goto error;				}				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				if (!lutents) {					goto error;				}				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno,				  pclrd->numlutents, lutents,				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#else				/* suppress -Wunused-but-set-variable */				(void)cdefd;#endif			} else {				jas_eprintf("error: invalid MTYP in CMAP box\n");				goto error;			}		}
cmapent = &cmapd->ents[channo];
cmapent = &cmapd->ents[channo]
cmapent
cmapent
&cmapd->ents[channo]
cmapd->ents[channo]
cmapd->ents
cmapd
cmapd
ents
channo
channo
if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				if (!pclrd->numlutents) {					goto error;				}				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				if (!lutents) {					goto error;				}				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno,				  pclrd->numlutents, lutents,				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#else				/* suppress -Wunused-but-set-variable */				(void)cdefd;#endif			} else {				jas_eprintf("error: invalid MTYP in CMAP box\n");				goto error;			}
cmapent->map == JP2_CMAP_DIRECT
cmapent->map
cmapent
cmapent
map
JP2_CMAP_DIRECT
JP2_CMAP_DIRECT
{				dec->chantocmptlut[channo] = channo;			}
dec->chantocmptlut[channo] = channo;
dec->chantocmptlut[channo] = channo
dec->chantocmptlut[channo]
dec->chantocmptlut
dec
dec
chantocmptlut
channo
channo
channo
channo
if (cmapent->map == JP2_CMAP_PALETTE) {				if (!pclrd->numlutents) {					goto error;				}				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				if (!lutents) {					goto error;				}				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno,				  pclrd->numlutents, lutents,				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#else				/* suppress -Wunused-but-set-variable */				(void)cdefd;#endif			} else {				jas_eprintf("error: invalid MTYP in CMAP box\n");				goto error;			}
cmapent->map == JP2_CMAP_PALETTE
cmapent->map
cmapent
cmapent
map
JP2_CMAP_PALETTE
JP2_CMAP_PALETTE
{				if (!pclrd->numlutents) {					goto error;				}				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				if (!lutents) {					goto error;				}				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno,				  pclrd->numlutents, lutents,				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#else				/* suppress -Wunused-but-set-variable */				(void)cdefd;#endif			}
if (!pclrd->numlutents) {					goto error;				}
!pclrd->numlutents
pclrd->numlutents
pclrd
pclrd
numlutents
{					goto error;				}
goto error;
error
lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));
lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t))
lutents
lutents
jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t))
jas_alloc2
jas_alloc2
pclrd->numlutents
pclrd
pclrd
numlutents
sizeof(int_fast32_t)
int_fast32_t
int_fast32_t
int_fast32_t

if (!lutents) {					goto error;				}
!lutents
lutents
lutents
{					goto error;				}
goto error;
error
for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}
i = 0;
i = 0
i
i
0
i < pclrd->numlutents
i
i
pclrd->numlutents
pclrd
pclrd
numlutents
++i
i
i
{					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}
lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];
lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans]
lutents[i]
lutents
lutents
i
i
pclrd->lutdata[cmapent->pcol + i * pclrd->numchans]
pclrd->lutdata
pclrd
pclrd
lutdata
cmapent->pcol + i * pclrd->numchans
cmapent->pcol
cmapent
cmapent
pcol
i * pclrd->numchans
i
i
pclrd->numchans
pclrd
pclrd
numchans
newcmptno = jas_image_numcmpts(dec->image);
newcmptno = jas_image_numcmpts(dec->image)
newcmptno
newcmptno
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
jas_image_depalettize(dec->image, cmapent->cmptno,				  pclrd->numlutents, lutents,				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);
jas_image_depalettize(dec->image, cmapent->cmptno,				  pclrd->numlutents, lutents,				  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno)
jas_image_depalettize
jas_image_depalettize
dec->image
dec
dec
image
cmapent->cmptno
cmapent
cmapent
cmptno
pclrd->numlutents
pclrd
pclrd
numlutents
lutents
lutents
JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol])
JP2_BPCTODTYPE
JP2_BPCTODTYPE
pclrd->bpc[cmapent->pcol]
pclrd->bpc
pclrd
pclrd
bpc
cmapent->pcol
cmapent
cmapent
pcol
newcmptno
newcmptno
dec->chantocmptlut[channo] = newcmptno;
dec->chantocmptlut[channo] = newcmptno
dec->chantocmptlut[channo]
dec->chantocmptlut
dec
dec
chantocmptlut
channo
channo
newcmptno
newcmptno
jas_free(lutents);
jas_free(lutents)
jas_free
jas_free
lutents
lutents
(void)cdefd;
(void)cdefd
void
void

cdefd
cdefd
{				jas_eprintf("error: invalid MTYP in CMAP box\n");				goto error;			}
jas_eprintf("error: invalid MTYP in CMAP box\n");
jas_eprintf("error: invalid MTYP in CMAP box\n")
jas_eprintf
jas_eprintf
"error: invalid MTYP in CMAP box\n"
goto error;
error
for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)); ++i) {		jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);	}
i = 0;
i = 0
i
i
0
i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image))
i
i
JAS_CAST(jas_uint, jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
jas_uint
jas_uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
++i
i
i
{		jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);	}
jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);
jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN)
jas_image_setcmpttype
jas_image_setcmpttype
dec->image
dec
dec
image
i
i
JAS_IMAGE_CT_UNKNOWN
JAS_IMAGE_CT_UNKNOWN
if (dec->cdef) {		for (i = 0; i < dec->cdef->data.cdef.numchans; ++i) {			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type,			  dec->cdef->data.cdef.ents[i].assoc));		}	} else {		for (i = 0; i < dec->numchans; ++i) {			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}	}
dec->cdef
dec
dec
cdef
{		for (i = 0; i < dec->cdef->data.cdef.numchans; ++i) {			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type,			  dec->cdef->data.cdef.ents[i].assoc));		}	}
for (i = 0; i < dec->cdef->data.cdef.numchans; ++i) {			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type,			  dec->cdef->data.cdef.ents[i].assoc));		}
i = 0;
i = 0
i
i
0
i < dec->cdef->data.cdef.numchans
i
i
dec->cdef->data.cdef.numchans
dec->cdef->data.cdef
dec->cdef->data
dec->cdef
dec
dec
cdef
data
cdef
numchans
++i
i
i
{			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type,			  dec->cdef->data.cdef.ents[i].assoc));		}
if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}
dec->cdef->data.cdef.ents[i].channo >= dec->numchans
dec->cdef->data.cdef.ents[i].channo
dec->cdef->data.cdef.ents[i]
dec->cdef->data.cdef.ents
dec->cdef->data.cdef
dec->cdef->data
dec->cdef
dec
dec
cdef
data
cdef
ents
i
i
channo
dec->numchans
dec
dec
numchans
{				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}
jas_eprintf("error: invalid channel number in CDEF box\n");
jas_eprintf("error: invalid channel number in CDEF box\n")
jas_eprintf
jas_eprintf
"error: invalid channel number in CDEF box\n"
goto error;
error
jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type,			  dec->cdef->data.cdef.ents[i].assoc));
jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type,			  dec->cdef->data.cdef.ents[i].assoc))
jas_image_setcmpttype
jas_image_setcmpttype
dec->image
dec
dec
image
dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo]
dec->chantocmptlut
dec
dec
chantocmptlut
dec->cdef->data.cdef.ents[i].channo
dec->cdef->data.cdef.ents[i]
dec->cdef->data.cdef.ents
dec->cdef->data.cdef
dec->cdef->data
dec->cdef
dec
dec
cdef
data
cdef
ents
i
i
channo
jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type,			  dec->cdef->data.cdef.ents[i].assoc)
jp2_getct
jp2_getct
jas_image_clrspc(dec->image)
jas_image_clrspc
jas_image_clrspc
dec->image
dec
dec
image
dec->cdef->data.cdef.ents[i].type
dec->cdef->data.cdef.ents[i]
dec->cdef->data.cdef.ents
dec->cdef->data.cdef
dec->cdef->data
dec->cdef
dec
dec
cdef
data
cdef
ents
i
i
type
dec->cdef->data.cdef.ents[i].assoc
dec->cdef->data.cdef.ents[i]
dec->cdef->data.cdef.ents
dec->cdef->data.cdef
dec->cdef->data
dec->cdef
dec
dec
cdef
data
cdef
ents
i
i
assoc
{		for (i = 0; i < dec->numchans; ++i) {			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}	}
for (i = 0; i < dec->numchans; ++i) {			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}
i = 0;
i = 0
i
i
0
i < dec->numchans
i
i
dec->numchans
dec
dec
numchans
++i
i
i
{			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}
jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));
jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1))
jas_image_setcmpttype
jas_image_setcmpttype
dec->image
dec
dec
image
dec->chantocmptlut[i]
dec->chantocmptlut
dec
dec
chantocmptlut
i
i
jp2_getct(jas_image_clrspc(dec->image), 0, i + 1)
jp2_getct
jp2_getct
jas_image_clrspc(dec->image)
jas_image_clrspc
jas_image_clrspc
dec->image
dec
dec
image
0
i + 1
i
i
1
for (i = jas_image_numcmpts(dec->image); i > 0; --i) {		if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {			jas_image_delcmpt(dec->image, i - 1);		}	}
i = jas_image_numcmpts(dec->image);
i = jas_image_numcmpts(dec->image)
i
i
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
i > 0
i
i
0
--i
i
i
{		if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {			jas_image_delcmpt(dec->image, i - 1);		}	}
if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {			jas_image_delcmpt(dec->image, i - 1);		}
jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN
jas_image_cmpttype(dec->image, i - 1)
jas_image_cmpttype
jas_image_cmpttype
dec->image
dec
dec
image
i - 1
i
i
1
JAS_IMAGE_CT_UNKNOWN
JAS_IMAGE_CT_UNKNOWN
{			jas_image_delcmpt(dec->image, i - 1);		}
jas_image_delcmpt(dec->image, i - 1);
jas_image_delcmpt(dec->image, i - 1)
jas_image_delcmpt
jas_image_delcmpt
dec->image
dec
dec
image
i - 1
i
i
1
if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}
!jas_image_numcmpts(dec->image)
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
{		jas_eprintf("error: no components\n");		goto error;	}
jas_eprintf("error: no components\n");
jas_eprintf("error: no components\n")
jas_eprintf
jas_eprintf
"error: no components\n"
goto error;
error
image = dec->image;
image = dec->image
image
image
dec->image
dec
dec
image
dec->image = 0;
dec->image = 0
dec->image
dec
dec
image
0
jp2_dec_destroy(dec);
jp2_dec_destroy(dec)
jp2_dec_destroy
jp2_dec_destroy
dec
dec
return image;
image
image
error:	if (box) {		jp2_box_destroy(box);	}
error
if (box) {		jp2_box_destroy(box);	}
box
box
{		jp2_box_destroy(box);	}
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
if (dec) {		jp2_dec_destroy(dec);	}
dec
dec
{		jp2_dec_destroy(dec);	}
jp2_dec_destroy(dec);
jp2_dec_destroy(dec)
jp2_dec_destroy
jp2_dec_destroy
dec
dec
return 0;
0
-----joern-----
(67,756,0)
(424,1142,0)
(674,724,0)
(449,369,0)
(749,459,0)
(270,493,0)
(979,938,0)
(690,1030,0)
(506,740,0)
(917,1040,0)
(243,527,0)
(327,467,0)
(1067,1098,0)
(971,358,0)
(390,747,0)
(370,751,0)
(1034,751,0)
(1143,429,0)
(879,265,0)
(874,736,0)
(484,704,0)
(880,1,0)
(782,205,0)
(236,721,0)
(125,294,0)
(438,84,0)
(214,559,0)
(358,726,0)
(792,270,0)
(161,503,0)
(467,1144,0)
(1166,675,0)
(763,747,0)
(244,690,0)
(31,1131,0)
(1003,460,0)
(748,152,0)
(770,605,0)
(25,747,0)
(908,573,0)
(650,271,0)
(44,72,0)
(423,521,0)
(578,905,0)
(711,459,0)
(26,911,0)
(629,132,0)
(623,747,0)
(59,747,0)
(1133,72,0)
(121,474,0)
(213,763,0)
(714,354,0)
(220,508,0)
(1066,489,0)
(637,949,0)
(1037,610,0)
(483,747,0)
(424,652,0)
(485,979,0)
(682,938,0)
(484,747,0)
(393,747,0)
(596,501,0)
(917,940,0)
(966,133,0)
(993,747,0)
(551,72,0)
(387,352,0)
(53,1002,0)
(278,1031,0)
(939,407,0)
(782,81,0)
(925,72,0)
(224,281,0)
(648,72,0)
(744,695,0)
(759,894,0)
(1119,255,0)
(940,72,0)
(1078,1118,0)
(233,323,0)
(927,747,0)
(843,809,0)
(312,623,0)
(441,45,0)
(53,267,0)
(613,986,0)
(451,737,0)
(987,743,0)
(743,987,0)
(425,828,0)
(879,460,0)
(823,849,0)
(953,785,0)
(401,823,0)
(1098,897,0)
(840,1089,0)
(366,223,0)
(1060,133,0)
(33,72,0)
(744,586,0)
(1002,536,0)
(1119,649,0)
(744,96,0)
(660,72,0)
(668,1164,0)
(719,72,0)
(982,707,0)
(1101,241,0)
(981,72,0)
(747,672,0)
(83,778,0)
(50,753,0)
(570,912,0)
(580,912,0)
(811,634,0)
(323,1025,0)
(57,543,0)
(85,25,0)
(592,1073,0)
(801,209,0)
(143,914,0)
(472,300,0)
(503,371,0)
(524,409,0)
(329,74,0)
(474,747,0)
(28,325,0)
(317,589,0)
(889,747,0)
(1078,599,0)
(702,926,0)
(112,508,0)
(848,599,0)
(493,387,0)
(1068,72,0)
(172,986,0)
(196,657,0)
(844,66,0)
(821,1010,0)
(175,1101,0)
(47,29,0)
(452,518,0)
(104,982,0)
(853,427,0)
(793,203,0)
(744,522,0)
(663,881,0)
(653,72,0)
(467,327,0)
(691,1118,0)
(555,77,0)
(662,1031,0)
(315,1155,0)
(536,1002,0)
(1,72,0)
(468,828,0)
(313,481,0)
(720,733,0)
(960,543,0)
(448,967,0)
(232,20,0)
(328,852,0)
(308,369,0)
(744,72,0)
(171,318,0)
(744,776,0)
(917,756,0)
(316,721,0)
(66,1077,0)
(804,1122,0)
(347,660,0)
(1077,657,0)
(481,11,0)
(765,852,0)
(344,1083,0)
(915,747,0)
(361,431,0)
(434,46,0)
(559,747,0)
(796,714,0)
(788,398,0)
(461,1039,0)
(465,569,0)
(1042,264,0)
(805,552,0)
(896,223,0)
(968,995,0)
(75,682,0)
(1095,72,0)
(18,354,0)
(266,881,0)
(894,369,0)
(946,151,0)
(743,116,0)
(524,599,0)
(937,714,0)
(980,938,0)
(754,503,0)
(835,476,0)
(1071,1025,0)
(713,594,0)
(1141,536,0)
(929,768,0)
(877,408,0)
(76,907,0)
(82,72,0)
(574,543,0)
(593,368,0)
(621,161,0)
(294,125,0)
(212,20,0)
(40,571,0)
(246,585,0)
(686,496,0)
(163,337,0)
(778,634,0)
(742,1076,0)
(1117,1029,0)
(106,397,0)
(589,459,0)
(688,553,0)
(369,407,0)
(586,483,0)
(581,562,0)
(110,680,0)
(846,938,0)
(935,99,0)
(161,621,0)
(846,747,0)
(581,535,0)
(978,197,0)
(253,390,0)
(579,1155,0)
(441,756,0)
(1155,555,0)
(705,402,0)
(812,430,0)
(797,938,0)
(533,914,0)
(242,151,0)
(902,230,0)
(540,745,0)
(516,308,0)
(796,47,0)
(917,389,0)
(514,93,0)
(505,912,0)
(773,852,0)
(181,187,0)
(132,946,0)
(623,312,0)
(480,852,0)
(22,509,0)
(41,594,0)
(917,126,0)
(838,599,0)
(180,915,0)
(254,429,0)
(1078,904,0)
(502,542,0)
(497,152,0)
(532,430,0)
(945,303,0)
(755,133,0)
(797,747,0)
(539,753,0)
(836,797,0)
(924,351,0)
(663,891,0)
(744,266,0)
(17,1066,0)
(728,81,0)
(592,276,0)
(461,187,0)
(403,728,0)
(25,223,0)
(158,389,0)
(76,747,0)
(534,690,0)
(898,1020,0)
(288,476,0)
(450,1009,0)
(359,643,0)
(277,721,0)
(914,543,0)
(437,339,0)
(113,805,0)
(717,598,0)
(162,1060,0)
(1056,1125,0)
(714,796,0)
(22,881,0)
(1111,1000,0)
(323,747,0)
(199,994,0)
(207,634,0)
(422,543,0)
(353,940,0)
(967,1118,0)
(711,241,0)
(973,97,0)
(146,72,0)
(708,367,0)
(589,747,0)
(274,1005,0)
(955,707,0)
(892,118,0)
(753,251,0)
(441,640,0)
(170,508,0)
(706,425,0)
(635,66,0)
(223,886,0)
(36,553,0)
(490,1102,0)
(1110,241,0)
(1110,51,0)
(400,915,0)
(601,194,0)
(124,313,0)
(470,215,0)
(881,988,0)
(894,133,0)
(997,1110,0)
(744,309,0)
(556,736,0)
(384,663,0)
(529,1051,0)
(212,967,0)
(73,236,0)
(378,366,0)
(350,846,0)
(271,425,0)
(400,464,0)
(275,852,0)
(377,1000,0)
(380,441,0)
(1167,885,0)
(867,579,0)
(374,1156,0)
(591,852,0)
(567,115,0)
(507,1164,0)
(102,20,0)
(1165,394,0)
(1016,390,0)
(1167,728,0)
(932,23,0)
(340,747,0)
(409,156,0)
(515,72,0)
(803,159,0)
(1096,981,0)
(998,221,0)
(364,1155,0)
(38,529,0)
(917,280,0)
(718,483,0)
(407,1043,0)
(60,230,0)
(329,747,0)
(999,22,0)
(757,61,0)
(227,803,0)
(208,122,0)
(1127,1167,0)
(91,726,0)
(527,747,0)
(744,390,0)
(986,524,0)
(806,84,0)
(178,148,0)
(830,737,0)
(706,602,0)
(677,157,0)
(1102,784,0)
(817,138,0)
(258,852,0)
(749,150,0)
(622,1122,0)
(51,1110,0)
(1087,774,0)
(788,118,0)
(663,747,0)
(975,939,0)
(797,131,0)
(500,747,0)
(64,72,0)
(790,71,0)
(71,736,0)
(300,747,0)
(490,885,0)
(565,1073,0)
(832,543,0)
(615,663,0)
(855,725,0)
(839,205,0)
(491,1073,0)
(1051,688,0)
(779,983,0)
(1119,178,0)
(519,280,0)
(835,197,0)
(725,1148,0)
(726,1155,0)
(29,47,0)
(994,645,0)
(430,1030,0)
(1074,888,0)
(305,1037,0)
(340,29,0)
(100,688,0)
(535,581,0)
(265,142,0)
(642,974,0)
(217,355,0)
(367,721,0)
(272,364,0)
(646,17,0)
(267,723,0)
(630,261,0)
(612,747,0)
(890,600,0)
(454,768,0)
(1156,900,0)
(554,1028,0)
(71,455,0)
(409,524,0)
(127,621,0)
(1025,705,0)
(8,131,0)
(917,640,0)
(891,1122,0)
(268,733,0)
(749,466,0)
(322,688,0)
(1149,42,0)
(371,451,0)
(609,1068,0)
(876,500,0)
(365,938,0)
(894,11,0)
(785,886,0)
(5,292,0)
(959,206,0)
(360,1113,0)
(1050,885,0)
(84,907,0)
(788,290,0)
(312,581,0)
(920,926,0)
(455,199,0)
(285,1043,0)
(1098,230,0)
(1154,266,0)
(882,474,0)
(503,161,0)
(433,74,0)
(309,594,0)
(276,682,0)
(626,322,0)
(374,650,0)
(917,886,0)
(849,7,0)
(1000,594,0)
(785,639,0)
(510,492,0)
(948,917,0)
(944,857,0)
(744,25,0)
(1142,223,0)
(1134,51,0)
(1040,988,0)
(871,339,0)
(1054,354,0)
(59,535,0)
(151,897,0)
(673,752,0)
(27,82,0)
(548,375,0)
(1160,114,0)
(178,774,0)
(103,542,0)
(188,698,0)
(820,1002,0)
(900,1156,0)
(619,72,0)
(764,178,0)
(1151,490,0)
(972,444,0)
(1130,984,0)
(321,72,0)
(566,72,0)
(153,904,0)
(972,696,0)
(118,747,0)
(560,432,0)
(930,335,0)
(299,827,0)
(282,484,0)
(283,730,0)
(810,322,0)
(493,5,0)
(697,852,0)
(687,1156,0)
(645,994,0)
(555,1155,0)
(564,143,0)
(739,329,0)
(621,236,0)
(206,747,0)
(363,762,0)
(727,136,0)
(20,212,0)
(456,902,0)
(681,340,0)
(675,784,0)
(271,650,0)
(478,230,0)
(709,983,0)
(589,150,0)
(7,429,0)
(1102,490,0)
(202,1102,0)
(917,912,0)
(851,212,0)
(713,1125,0)
(246,938,0)
(1051,529,0)
(114,1160,0)
(507,192,0)
(148,980,0)
(416,136,0)
(755,313,0)
(142,369,0)
(1122,891,0)
(134,726,0)
(963,1073,0)
(1032,25,0)
(582,902,0)
(297,852,0)
(778,83,0)
(77,555,0)
(974,204,0)
(861,852,0)
(520,559,0)
(230,543,0)
(23,938,0)
(493,270,0)
(596,886,0)
(192,804,0)
(20,747,0)
(913,315,0)
(650,1084,0)
(357,785,0)
(767,552,0)
(130,880,0)
(412,640,0)
(656,694,0)
(77,270,0)
(98,366,0)
(737,881,0)
(245,72,0)
(886,1005,0)
(489,993,0)
(1112,711,0)
(45,195,0)
(1012,124,0)
(1082,791,0)
(782,569,0)
(9,100,0)
(417,898,0)
(225,482,0)
(581,430,0)
(190,562,0)
(398,1164,0)
(744,979,0)
(914,143,0)
(917,1076,0)
(255,747,0)
(838,675,0)
(645,425,0)
(365,403,0)
(625,289,0)
(745,886,0)
(1156,687,0)
(390,5,0)
(711,747,0)
(340,938,0)
(1075,542,0)
(924,969,0)
(311,747,0)
(967,212,0)
(873,1113,0)
(94,114,0)
(863,393,0)
(341,72,0)
(252,897,0)
(953,747,0)
(763,351,0)
(904,153,0)
(802,805,0)
(414,126,0)
(267,926,0)
(271,307,0)
(206,938,0)
(284,161,0)
(965,737,0)
(164,72,0)
(43,101,0)
(763,223,0)
(457,77,0)
(523,1102,0)
(675,747,0)
(1081,704,0)
(5,886,0)
(136,747,0)
(676,885,0)
(389,379,0)
(1006,32,0)
(481,313,0)
(279,924,0)
(749,747,0)
(14,246,0)
(976,687,0)
(246,747,0)
(351,924,0)
(954,72,0)
(182,995,0)
(444,889,0)
(251,753,0)
(22,747,0)
(61,757,0)
(1135,330,0)
(631,455,0)
(1046,294,0)
(780,72,0)
(577,83,0)
(100,857,0)
(1031,879,0)
(513,1078,0)
(1084,650,0)
(1113,747,0)
(1158,174,0)
(775,993,0)
(1049,695,0)
(590,72,0)
(366,98,0)
(589,888,0)
(974,784,0)
(259,560,0)
(888,589,0)
(1141,223,0)
(1119,592,0)
(1122,804,0)
(766,852,0)
(410,290,0)
(970,72,0)
(228,768,0)
(942,452,0)
(703,255,0)
(403,365,0)
(118,788,0)
(962,657,0)
(670,406,0)
(696,972,0)
(226,741,0)
(1002,53,0)
(585,246,0)
(586,375,0)
(1090,1111,0)
(386,489,0)
(1018,374,0)
(476,596,0)
(544,364,0)
(309,122,0)
(315,755,0)
(322,142,0)
(223,195,0)
(196,402,0)
(143,938,0)
(949,599,0)
(46,230,0)
(559,596,0)
(66,938,0)
(977,507,0)
(684,45,0)
(980,747,0)
(818,976,0)
(678,904,0)
(893,1041,0)
(736,223,0)
(899,645,0)
(396,853,0)
(459,934,0)
(744,741,0)
(187,382,0)
(120,745,0)
(687,976,0)
(492,791,0)
(303,747,0)
(98,1144,0)
(550,426,0)
(658,794,0)
(993,387,0)
(794,223,0)
(869,527,0)
(484,459,0)
(1023,267,0)
(18,319,0)
(822,483,0)
(1000,1111,0)
(123,122,0)
(49,557,0)
(46,543,0)
(1061,72,0)
(452,747,0)
(756,501,0)
(15,1142,0)
(74,172,0)
(849,823,0)
(455,71,0)
(143,747,0)
(183,389,0)
(2,72,0)
(547,711,0)
(131,797,0)
(939,1155,0)
(262,365,0)
(78,131,0)
(912,570,0)
(1146,623,0)
(440,926,0)
(1035,424,0)
(308,1073,0)
(846,350,0)
(191,411,0)
(350,319,0)
(1079,500,0)
(781,398,0)
(23,81,0)
(407,939,0)
(603,248,0)
(331,266,0)
(388,1082,0)
(335,666,0)
(122,1156,0)
(883,402,0)
(895,29,0)
(1162,756,0)
(209,801,0)
(55,886,0)
(952,794,0)
(319,18,0)
(545,142,0)
(1028,426,0)
(441,379,0)
(571,530,0)
(116,743,0)
(762,150,0)
(1136,200,0)
(334,1017,0)
(617,409,0)
(136,938,0)
(500,938,0)
(801,459,0)
(808,78,0)
(1161,1091,0)
(1,880,0)
(425,271,0)
(628,452,0)
(731,476,0)
(904,1078,0)
(46,786,0)
(318,150,0)
(37,578,0)
(329,150,0)
(362,124,0)
(563,522,0)
(584,142,0)
(864,543,0)
(598,982,0)
(991,1093,0)
(774,594,0)
(798,315,0)
(373,1068,0)
(35,464,0)
(498,755,0)
(270,77,0)
(1125,592,0)
(374,747,0)
(987,150,0)
(1065,612,0)
(828,425,0)
(235,68,0)
(320,1107,0)
(52,880,0)
(777,984,0)
(184,758,0)
(343,846,0)
(499,788,0)
(209,320,0)
(992,505,0)
(476,835,0)
(48,957,0)
(530,492,0)
(650,374,0)
(81,728,0)
(518,1036,0)
(1108,49,0)
(348,72,0)
(575,852,0)
(221,911,0)
(787,682,0)
(294,596,0)
(124,688,0)
(295,5,0)
(914,533,0)
(640,292,0)
(1109,927,0)
(176,1073,0)
(996,382,0)
(571,881,0)
(1044,610,0)
(1144,98,0)
(399,915,0)
(81,23,0)
(1048,300,0)
(142,592,0)
(738,894,0)
(221,688,0)
(349,762,0)
(1039,461,0)
(256,447,0)
(495,602,0)
(687,698,0)
(984,777,0)
(1088,725,0)
(961,1130,0)
(475,143,0)
(728,1167,0)
(1103,72,0)
(482,456,0)
(946,132,0)
(531,99,0)
(128,72,0)
(990,1040,0)
(537,72,0)
(1121,411,0)
(474,713,0)
(1045,426,0)
(312,157,0)
(329,459,0)
(958,692,0)
(976,747,0)
(595,762,0)
(251,702,0)
(606,309,0)
(222,508,0)
(436,675,0)
(126,310,0)
(733,912,0)
(185,1055,0)
(1159,366,0)
(688,1051,0)
(868,1040,0)
(193,1041,0)
(1140,599,0)
(1124,1155,0)
(1152,993,0)
(602,938,0)
(312,592,0)
(672,747,0)
(614,926,0)
(587,960,0)
(696,707,0)
(715,415,0)
(571,747,0)
(114,406,0)
(872,365,0)
(1024,852,0)
(418,352,0)
(912,580,0)
(1164,72,0)
(535,59,0)
(411,747,0)
(1080,758,0)
(776,456,0)
(768,747,0)
(333,72,0)
(191,1101,0)
(744,713,0)
(266,747,0)
(236,621,0)
(983,72,0)
(201,522,0)
(7,849,0)
(695,747,0)
(446,688,0)
(42,150,0)
(528,374,0)
(0,72,0)
(463,926,0)
(147,750,0)
(549,920,0)
(647,749,0)
(83,747,0)
(165,592,0)
(192,507,0)
(115,61,0)
(492,530,0)
(826,493,0)
(1085,694,0)
(441,1040,0)
(109,290,0)
(813,665,0)
(783,850,0)
(943,478,0)
(381,83,0)
(831,1131,0)
(1053,750,0)
(66,747,0)
(229,909,0)
(1038,757,0)
(692,747,0)
(189,2,0)
(1105,30,0)
(87,307,0)
(969,924,0)
(500,908,0)
(441,126,0)
(638,182,0)
(581,312,0)
(1029,784,0)
(740,594,0)
(140,695,0)
(488,724,0)
(1030,157,0)
(365,747,0)
(610,559,0)
(265,879,0)
(730,369,0)
(710,96,0)
(398,788,0)
(784,72,0)
(808,744,0)
(231,264,0)
(994,926,0)
(346,382,0)
(750,108,0)
(342,906,0)
(142,265,0)
(583,801,0)
(1097,852,0)
(61,115,0)
(438,518,0)
(669,543,0)
(68,159,0)
(460,688,0)
(561,126,0)
(456,543,0)
(421,905,0)
(197,835,0)
(460,879,0)
(533,35,0)
(529,588,0)
(318,747,0)
(819,885,0)
(1005,159,0)
(950,387,0)
(744,264,0)
(419,733,0)
(735,906,0)
(482,1093,0)
(111,431,0)
(50,794,0)
(1137,394,0)
(828,920,0)
(453,98,0)
(632,996,0)
(364,142,0)
(1077,66,0)
(169,45,0)
(1115,1,0)
(339,1155,0)
(1010,174,0)
(493,747,0)
(1027,72,0)
(1007,411,0)
(1067,197,0)
(750,136,0)
(58,865,0)
(908,500,0)
(920,828,0)
(151,946,0)
(132,596,0)
(56,211,0)
(1102,747,0)
(597,760,0)
(552,805,0)
(86,393,0)
(1160,152,0)
(153,757,0)
(588,529,0)
(1129,1085,0)
(588,187,0)
(426,747,0)
(618,972,0)
(39,356,0)
(257,938,0)
(393,598,0)
(917,45,0)
(136,750,0)
(415,585,0)
(90,994,0)
(976,784,0)
(857,100,0)
(920,760,0)
(993,5,0)
(443,493,0)
(794,50,0)
(177,811,0)
(1091,1068,0)
(936,1107,0)
(993,489,0)
(142,322,0)
(260,99,0)
(426,785,0)
(142,300,0)
(854,451,0)
(81,671,0)
(693,329,0)
(1093,747,0)
(1157,31,0)
(1021,827,0)
(152,1076,0)
(154,569,0)
(441,886,0)
(769,741,0)
(989,987,0)
(607,84,0)
(132,747,0)
(138,422,0)
(1125,1073,0)
(29,354,0)
(1039,888,0)
(661,1067,0)
(20,150,0)
(664,1008,0)
(611,1066,0)
(24,438,0)
(665,525,0)
(107,130,0)
(129,42,0)
(1047,893,0)
(442,566,0)
(1141,747,0)
(339,871,0)
(1005,886,0)
(1063,579,0)
(747,859,0)
(689,172,0)
(811,906,0)
(1148,206,0)
(152,1160,0)
(250,580,0)
(1072,84,0)
(903,68,0)
(11,481,0)
(891,663,0)
(685,838,0)
(300,938,0)
(704,51,0)
(302,173,0)
(771,59,0)
(199,455,0)
(1142,747,0)
(303,72,0)
(825,607,0)
(824,1141,0)
(740,324,0)
(1065,352,0)
(860,953,0)
(476,747,0)
(65,1141,0)
(230,1098,0)
(750,906,0)
(799,1039,0)
(234,255,0)
(917,405,0)
(530,571,0)
(610,1037,0)
(859,747,0)
(1052,594,0)
(101,714,0)
(624,63,0)
(238,323,0)
(1145,2,0)
(298,72,0)
(815,294,0)
(862,652,0)
(1094,934,0)
(7,543,0)
(511,418,0)
(197,1067,0)
(407,369,0)
(512,640,0)
(736,71,0)
(768,5,0)
(1062,623,0)
(761,42,0)
(19,744,0)
(261,852,0)
(716,566,0)
(957,261,0)
(897,151,0)
(1011,339,0)
(156,17,0)
(269,340,0)
(690,594,0)
(562,581,0)
(951,101,0)
(602,706,0)
(957,566,0)
(426,1028,0)
(63,160,0)
(150,886,0)
(704,484,0)
(683,72,0)
(487,980,0)
(723,204,0)
(280,639,0)
(558,354,0)
(166,460,0)
(115,747,0)
(598,393,0)
(721,605,0)
(13,100,0)
(915,596,0)
(1116,199,0)
(915,400,0)
(6,588,0)
(1113,596,0)
(210,939,0)
(918,118,0)
(173,746,0)
(974,747,0)
(392,806,0)
(713,474,0)
(326,354,0)
(870,586,0)
(471,438,0)
(156,409,0)
(431,747,0)
(1144,467,0)
(856,319,0)
(393,881,0)
(938,68,0)
(1142,424,0)
(522,747,0)
(682,747,0)
(391,246,0)
(439,589,0)
(829,327,0)
(394,747,0)
(1025,323,0)
(837,72,0)
(1091,721,0)
(264,596,0)
(816,720,0)
(711,150,0)
(97,887,0)
(10,530,0)
(737,451,0)
(938,257,0)
(572,980,0)
(155,79,0)
(219,985,0)
(425,645,0)
(801,150,0)
(1107,320,0)
(562,1030,0)
(99,881,0)
(604,852,0)
(784,241,0)
(760,920,0)
(654,22,0)
(742,72,0)
(402,705,0)
(1120,72,0)
(987,747,0)
(853,230,0)
(68,95,0)
(99,747,0)
(652,424,0)
(884,370,0)
(148,178,0)
(690,996,0)
(621,127,0)
(546,889,0)
(239,221,0)
(569,782,0)
(580,159,0)
(729,78,0)
(922,571,0)
(294,747,0)
(241,1101,0)
(593,552,0)
(1057,1020,0)
(267,53,0)
(655,713,0)
(1015,763,0)
(186,338,0)
(477,59,0)
(47,796,0)
(78,72,0)
(319,350,0)
(122,747,0)
(1037,325,0)
(489,1066,0)
(327,926,0)
(304,927,0)
(728,403,0)
(1066,17,0)
(313,124,0)
(74,329,0)
(982,598,0)
(643,72,0)
(734,953,0)
(366,747,0)
(291,1030,0)
(81,782,0)
(99,260,0)
(964,852,0)
(464,400,0)
(1076,167,0)
(902,456,0)
(845,981,0)
(552,593,0)
(809,747,0)
(1084,702,0)
(371,503,0)
(1164,752,0)
(117,23,0)
(1069,53,0)
(795,543,0)
(722,974,0)
(1128,1085,0)
(951,1028,0)
(1107,5,0)
(168,660,0)
(464,35,0)
(408,752,0)
(51,704,0)
(411,938,0)
(847,422,0)
(701,464,0)
(1114,1094,0)
(714,101,0)
(21,150,0)
(198,562,0)
(538,979,0)
(907,76,0)
(779,809,0)
(122,309,0)
(430,581,0)
(794,747,0)
(1118,967,0)
(927,776,0)
(395,806,0)
(800,1105,0)
(772,702,0)
(526,1093,0)
(986,172,0)
(325,1037,0)
(42,1149,0)
(985,1148,0)
(509,22,0)
(481,579,0)
(573,908,0)
(313,755,0)
(435,1167,0)
(699,72,0)
(383,776,0)
(888,1039,0)
(600,906,0)
(679,18,0)
(652,760,0)
(451,371,0)
(692,785,0)
(49,747,0)
(931,946,0)
(70,723,0)
(255,1119,0)
(206,1148,0)
(518,438,0)
(542,1075,0)
(1153,160,0)
(293,290,0)
(445,809,0)
(1101,191,0)
(137,612,0)
(1099,1160,0)
(369,1073,0)
(541,1029,0)
(789,261,0)
(659,115,0)
(636,1009,0)
(16,1113,0)
(204,974,0)
(858,427,0)
(529,594,0)
(429,938,0)
(167,1076,0)
(1092,951,0)
(1123,408,0)
(149,72,0)
(633,819,0)
(1029,747,0)
(919,786,0)
(338,447,0)
(881,886,0)
(1028,951,0)
(801,747,0)
(119,852,0)
(80,72,0)
(286,1119,0)
(429,747,0)
(306,72,0)
(1138,524,0)
(1132,1059,0)
(323,785,0)
(372,1163,0)
(983,779,0)
(1098,1067,0)
(569,747,0)
(415,521,0)
(576,280,0)
(866,742,0)
(1148,985,0)
(627,823,0)
(320,209,0)
(358,133,0)
(203,135,0)
(911,221,0)
(444,972,0)
(1001,482,0)
(755,315,0)
(644,987,0)
(83,938,0)
(897,1098,0)
(479,1142,0)
(408,747,0)
(1022,488,0)
(542,747,0)
(204,723,0)
(406,114,0)
(527,5,0)
(744,894,0)
(752,1164,0)
(413,801,0)
(241,784,0)
(1009,643,0)
(675,838,0)
(59,938,0)
(1104,774,0)
(707,982,0)
(241,1110,0)
(248,355,0)
(142,364,0)
(612,5,0)
(1126,318,0)
(732,612,0)
(1014,326,0)
(271,1008,0)
(276,592,0)
(667,72,0)
(255,938,0)
(786,46,0)
(707,696,0)
(307,938,0)
(1030,690,0)
(429,7,0)
(698,687,0)
(559,610,0)
(141,72,0)
(408,938,0)
(814,96,0)
(458,517,0)
(1130,747,0)
(466,749,0)
(179,1076,0)
(901,1017,0)
(623,938,0)
(144,351,0)
(1083,375,0)
(237,72,0)
(402,196,0)
(725,84,0)
(620,602,0)
(758,747,0)
(428,484,0)
(4,940,0)
(1004,541,0)
(541,375,0)
(351,763,0)
(96,784,0)
(309,740,0)
(236,1068,0)
(928,614,0)
(192,367,0)
(142,1073,0)
(68,938,0)
(933,72,0)
(1147,891,0)
(741,747,0)
(194,1089,0)
(757,153,0)
(296,852,0)
(1155,382,0)
(969,996,0)
(215,1030,0)
(486,1058,0)
(521,290,0)
(422,138,0)
(264,747,0)
(1113,873,0)
(1085,1076,0)
(805,886,0)
(273,1084,0)
(916,82,0)
(404,728,0)
(744,318,0)
(907,84,0)
(69,410,0)
(744,692,0)
(569,1156,0)
(700,206,0)
(145,804,0)
(307,747,0)
(996,969,0)
(695,1156,0)
(809,779,0)
(542,223,0)
(441,280,0)
(586,205,0)
(723,267,0)
(314,692,0)
(927,938,0)
(216,791,0)
(474,1156,0)
(521,415,0)
(608,132,0)
(1009,747,0)
(504,400,0)
(385,312,0)
(42,747,0)
(300,142,0)
(865,58,0)
(1043,407,0)
(483,586,0)
(332,289,0)
(657,196,0)
(702,1084,0)
(702,251,0)
(536,1141,0)
(29,340,0)
(524,986,0)
(205,1139,0)
(1149,934,0)
(376,307,0)
(947,881,0)
(139,375,0)
(712,852,0)
(612,1065,0)
(827,747,0)
(1086,76,0)
(1118,1078,0)
(247,835,0)
(776,927,0)
(733,720,0)
(411,191,0)
(54,133,0)
(1029,541,0)
(585,415,0)
(367,192,0)
(979,747,0)
(803,1076,0)
(287,72,0)
(889,444,0)
(482,1001,0)
(1013,797,0)
(249,901,0)
(923,953,0)
(1076,803,0)
(579,481,0)
(726,358,0)
(850,594,0)
(878,1144,0)
(768,454,0)
(367,1068,0)
(791,1082,0)
(205,375,0)
(841,865,0)
(131,72,0)
(96,747,0)
(88,852,0)
(634,811,0)
(1031,1155,0)
(105,593,0)
(1093,938,0)
(953,734,0)
(17,156,0)
(473,887,0)
(241,711,0)
(178,1119,0)
(116,527,0)
(11,494,0)
(187,461,0)
(741,387,0)
(694,1085,0)
(910,135,0)
(62,72,0)
(34,1130,0)
(522,459,0)
(462,976,0)
(641,525,0)
(921,72,0)
(1111,187,0)
(804,192,0)
(3,72,0)
(941,536,0)
(517,281,0)
(634,778,0)
(527,116,0)
(1107,747,0)
(682,276,0)
(752,408,0)
(762,595,0)
(1026,749,0)
(568,1058,0)
(1106,912,0)
(345,1111,0)
(889,938,0)
(118,938,0)
(518,452,0)
(737,747,0)
(1064,130,0)
(127,367,0)
(23,747,0)
(483,1156,0)
(452,938,0)
(956,467,0)
(1148,725,0)
(469,251,0)
(101,951,0)
(657,1077,0)
(89,596,0)
(984,1130,0)
(875,138,0)
(791,492,0)
(994,199,0)
(307,271,0)
(736,747,0)
(1100,1029,0)
(616,588,0)
(1130,938,0)
(960,230,0)
(425,706,0)
(35,533,0)
(20,459,0)
(367,127,0)
(602,747,0)
(753,50,0)
(807,371,0)
(12,846,0)
(760,652,0)
(651,72,0)
(809,938,0)
(76,938,0)
(1093,482,0)
(762,747,0)
(774,178,0)
(1019,782,0)
(240,76,0)
(842,72,0)
(879,1031,0)
(980,148,0)
(172,74,0)
(92,72,0)
(782,885,0)
(301,459,0)
(150,310,0)
(420,229,0)
(484,150,0)
(834,889,0)
(336,50,0)
(115,938,0)
(505,72,0)
(263,1107,0)
(705,1025,0)
(1033,705,0)
(711,150,1)
(642,723,1)
(29,340,1)
(471,24,1)
(23,117,1)
(1050,676,1)
(46,230,1)
(679,326,1)
(1118,691,1)
(55,1070,1)
(955,982,1)
(239,998,1)
(994,926,1)
(959,806,1)
(550,29,1)
(721,277,1)
(408,1123,1)
(389,183,1)
(1100,1004,1)
(827,299,1)
(559,520,1)
(29,895,1)
(835,247,1)
(881,947,1)
(682,747,1)
(1165,811,1)
(1107,263,1)
(793,957,1)
(1001,482,1)
(360,16,1)
(1039,799,1)
(94,1160,1)
(358,133,1)
(706,602,1)
(987,644,1)
(218,1034,1)
(73,367,1)
(83,938,1)
(901,249,1)
(1096,845,1)
(597,652,1)
(34,696,1)
(946,931,1)
(294,815,1)
(1060,133,1)
(152,497,1)
(246,391,1)
(125,294,1)
(1111,345,1)
(744,19,1)
(541,1029,1)
(607,825,1)
(429,1143,1)
(19,833,1)
(804,1122,1)
(1114,743,1)
(158,441,1)
(594,41,1)
(171,595,1)
(1063,894,1)
(1046,18,1)
(60,325,1)
(694,1085,1)
(997,51,1)
(218,641,1)
(407,939,1)
(83,747,1)
(395,607,1)
(340,681,1)
(554,426,1)
(345,1090,1)
(406,114,1)
(853,396,1)
(552,767,1)
(875,817,1)
(320,1107,1)
(718,822,1)
(745,540,1)
(943,230,1)
(362,579,1)
(646,1066,1)
(340,747,1)
(530,571,1)
(201,1149,1)
(117,932,1)
(778,83,1)
(140,827,1)
(331,509,1)
(623,747,1)
(1003,1031,1)
(212,851,1)
(122,123,1)
(78,729,1)
(151,242,1)
(250,1106,1)
(1153,63,1)
(1070,389,1)
(267,53,1)
(329,150,1)
(477,385,1)
(410,69,1)
(430,1030,1)
(953,923,1)
(475,564,1)
(744,522,1)
(493,5,1)
(797,747,1)
(441,380,1)
(1124,187,1)
(765,595,1)
(431,111,1)
(1060,162,1)
(49,1108,1)
(1002,820,1)
(217,248,1)
(1082,388,1)
(1125,592,1)
(1052,996,1)
(415,585,1)
(453,366,1)
(121,882,1)
(315,1155,1)
(364,1155,1)
(814,387,1)
(89,264,1)
(1108,833,1)
(479,645,1)
(784,241,1)
(476,747,1)
(524,986,1)
(1115,660,1)
(833,218,1)
(996,969,1)
(1047,1082,1)
(1086,240,1)
(804,145,1)
(156,409,1)
(318,747,1)
(77,270,1)
(1092,1028,1)
(1093,938,1)
(393,881,1)
(25,747,1)
(394,747,1)
(309,594,1)
(985,219,1)
(136,938,1)
(505,912,1)
(693,739,1)
(974,747,1)
(478,230,1)
(132,608,1)
(574,914,1)
(456,902,1)
(294,747,1)
(580,250,1)
(764,148,1)
(611,489,1)
(722,642,1)
(586,870,1)
(120,593,1)
(859,747,1)
(869,987,1)
(589,317,1)
(208,857,1)
(410,290,1)
(612,5,1)
(489,993,1)
(394,1137,1)
(367,708,1)
(807,451,1)
(74,433,1)
(303,945,1)
(263,936,1)
(115,938,1)
(663,881,1)
(529,588,1)
(1148,206,1)
(1029,747,1)
(1000,1111,1)
(450,131,1)
(833,917,1)
(602,747,1)
(819,633,1)
(932,490,1)
(896,25,1)
(256,338,1)
(788,499,1)
(218,674,1)
(792,493,1)
(233,758,1)
(709,573,1)
(378,1159,1)
(142,265,1)
(589,459,1)
(300,938,1)
(960,230,1)
(616,446,1)
(991,456,1)
(1150,745,1)
(624,125,1)
(365,938,1)
(215,470,1)
(812,532,1)
(503,754,1)
(885,1050,1)
(206,938,1)
(323,785,1)
(218,910,1)
(1,880,1)
(927,747,1)
(411,938,1)
(623,938,1)
(720,733,1)
(547,96,1)
(975,210,1)
(388,791,1)
(498,124,1)
(28,1037,1)
(612,732,1)
(952,658,1)
(495,620,1)
(417,900,1)
(1162,596,1)
(744,713,1)
(353,4,1)
(169,223,1)
(153,757,1)
(66,844,1)
(851,20,1)
(411,1007,1)
(343,12,1)
(178,774,1)
(504,915,1)
(999,654,1)
(467,1144,1)
(441,280,1)
(930,1091,1)
(1019,569,1)
(1150,119,1)
(710,814,1)
(1014,47,1)
(1022,911,1)
(902,230,1)
(810,626,1)
(578,37,1)
(177,906,1)
(939,1155,1)
(266,747,1)
(536,941,1)
(192,507,1)
(838,599,1)
(1066,489,1)
(189,1145,1)
(979,538,1)
(744,776,1)
(398,788,1)
(761,1094,1)
(307,938,1)
(621,236,1)
(472,592,1)
(458,156,1)
(1051,529,1)
(473,97,1)
(828,468,1)
(560,259,1)
(913,798,1)
(1000,594,1)
(492,530,1)
(21,318,1)
(1098,897,1)
(115,747,1)
(10,571,1)
(915,399,1)
(359,1009,1)
(730,369,1)
(437,1011,1)
(665,813,1)
(984,1130,1)
(1054,1091,1)
(1076,803,1)
(279,351,1)
(118,892,1)
(744,96,1)
(478,943,1)
(828,920,1)
(493,747,1)
(704,484,1)
(104,598,1)
(588,187,1)
(846,938,1)
(989,669,1)
(702,251,1)
(794,952,1)
(120,865,1)
(66,938,1)
(1112,547,1)
(339,1155,1)
(839,586,1)
(507,977,1)
(218,968,1)
(914,533,1)
(608,629,1)
(714,101,1)
(1102,747,1)
(920,549,1)
(1144,98,1)
(620,650,1)
(924,279,1)
(1155,555,1)
(836,8,1)
(183,158,1)
(523,1151,1)
(581,535,1)
(246,747,1)
(482,225,1)
(866,406,1)
(485,957,1)
(729,303,1)
(650,374,1)
(1021,784,1)
(897,252,1)
(122,1156,1)
(571,40,1)
(610,559,1)
(23,747,1)
(249,573,1)
(2,189,1)
(1043,285,1)
(882,142,1)
(539,50,1)
(307,747,1)
(910,203,1)
(1090,377,1)
(744,25,1)
(917,756,1)
(50,336,1)
(645,899,1)
(727,811,1)
(22,881,1)
(911,221,1)
(371,451,1)
(196,657,1)
(816,733,1)
(529,38,1)
(143,938,1)
(906,735,1)
(1143,254,1)
(349,745,1)
(589,747,1)
(225,1093,1)
(452,942,1)
(165,358,1)
(234,431,1)
(166,1003,1)
(441,1040,1)
(1037,305,1)
(658,374,1)
(191,411,1)
(613,172,1)
(296,45,1)
(305,610,1)
(1023,53,1)
(243,869,1)
(586,375,1)
(476,596,1)
(19,49,1)
(123,208,1)
(513,1118,1)
(46,786,1)
(962,402,1)
(1070,1150,1)
(740,506,1)
(744,309,1)
(546,834,1)
(600,890,1)
(990,881,1)
(116,527,1)
(744,979,1)
(51,1134,1)
(1079,806,1)
(291,431,1)
(197,835,1)
(635,962,1)
(755,315,1)
(1078,513,1)
(971,1060,1)
(204,974,1)
(1142,747,1)
(90,199,1)
(924,351,1)
(462,818,1)
(708,770,1)
(409,524,1)
(1085,1076,1)
(218,421,1)
(70,267,1)
(303,747,1)
(788,118,1)
(413,743,1)
(976,462,1)
(876,1079,1)
(1132,1070,1)
(96,747,1)
(593,552,1)
(145,1122,1)
(137,418,1)
(1028,426,1)
(890,750,1)
(889,546,1)
(556,706,1)
(440,394,1)
(877,668,1)
(946,132,1)
(690,996,1)
(228,929,1)
(927,938,1)
(878,98,1)
(12,856,1)
(339,437,1)
(737,830,1)
(441,756,1)
(505,992,1)
(1164,752,1)
(81,23,1)
(327,467,1)
(54,730,1)
(681,269,1)
(1085,1128,1)
(377,594,1)
(821,153,1)
(506,309,1)
(48,1132,1)
(17,1066,1)
(68,95,1)
(474,747,1)
(375,548,1)
(1119,255,1)
(1045,550,1)
(1039,888,1)
(255,703,1)
(917,886,1)
(124,688,1)
(728,403,1)
(282,428,1)
(251,753,1)
(142,300,1)
(1082,791,1)
(429,747,1)
(300,747,1)
(626,300,1)
(188,976,1)
(768,747,1)
(993,387,1)
(634,778,1)
(374,747,1)
(1150,296,1)
(218,831,1)
(295,390,1)
(911,26,1)
(1013,836,1)
(127,621,1)
(236,721,1)
(1012,362,1)
(741,747,1)
(251,469,1)
(1102,202,1)
(644,989,1)
(451,737,1)
(307,376,1)
(739,153,1)
(391,14,1)
(83,577,1)
(737,747,1)
(596,89,1)
(1098,1067,1)
(562,1030,1)
(783,312,1)
(1010,821,1)
(142,592,1)
(695,747,1)
(541,375,1)
(329,747,1)
(841,58,1)
(468,920,1)
(140,838,1)
(1135,871,1)
(313,755,1)
(76,1086,1)
(848,1140,1)
(412,512,1)
(407,1043,1)
(207,177,1)
(109,1164,1)
(136,416,1)
(744,741,1)
(763,1015,1)
(750,136,1)
(119,261,1)
(937,101,1)
(425,828,1)
(315,913,1)
(218,858,1)
(989,574,1)
(567,1038,1)
(520,214,1)
(663,384,1)
(571,747,1)
(464,400,1)
(235,903,1)
(84,907,1)
(411,747,1)
(978,835,1)
(386,993,1)
(500,938,1)
(888,589,1)
(325,1037,1)
(702,926,1)
(448,212,1)
(914,143,1)
(940,353,1)
(618,707,1)
(758,747,1)
(202,523,1)
(529,594,1)
(711,1112,1)
(393,863,1)
(522,747,1)
(569,465,1)
(700,959,1)
(434,478,1)
(308,369,1)
(682,75,1)
(1040,868,1)
(476,288,1)
(705,1033,1)
(682,938,1)
(749,150,1)
(754,371,1)
(612,747,1)
(312,623,1)
(1119,592,1)
(142,322,1)
(218,372,1)
(1106,981,1)
(867,1063,1)
(67,1162,1)
(1026,647,1)
(587,1001,1)
(162,11,1)
(8,983,1)
(868,990,1)
(438,471,1)
(781,788,1)
(1110,997,1)
(908,500,1)
(1138,986,1)
(1160,152,1)
(400,504,1)
(791,216,1)
(743,116,1)
(442,716,1)
(640,412,1)
(241,711,1)
(1014,173,1)
(559,747,1)
(1081,484,1)
(1048,472,1)
(760,652,1)
(1033,1025,1)
(82,916,1)
(231,873,1)
(460,166,1)
(749,1026,1)
(533,35,1)
(808,78,1)
(879,1031,1)
(519,785,1)
(785,357,1)
(840,194,1)
(942,628,1)
(769,1065,1)
(711,747,1)
(205,839,1)
(838,675,1)
(737,881,1)
(595,762,1)
(74,329,1)
(132,596,1)
(670,114,1)
(919,434,1)
(949,637,1)
(1141,747,1)
(1101,191,1)
(1078,1118,1)
(1083,344,1)
(1046,335,1)
(1072,490,1)
(430,812,1)
(675,1166,1)
(242,946,1)
(657,1077,1)
(1160,1099,1)
(763,223,1)
(181,466,1)
(564,325,1)
(915,747,1)
(994,90,1)
(255,938,1)
(818,695,1)
(1072,327,1)
(772,251,1)
(209,801,1)
(1035,1142,1)
(798,498,1)
(802,105,1)
(632,1155,1)
(917,45,1)
(577,381,1)
(172,689,1)
(271,425,1)
(549,760,1)
(758,1080,1)
(614,928,1)
(662,278,1)
(215,1030,1)
(969,924,1)
(426,785,1)
(1150,765,1)
(596,886,1)
(957,48,1)
(1009,636,1)
(118,747,1)
(218,334,1)
(603,257,1)
(309,122,1)
(849,823,1)
(1166,436,1)
(385,623,1)
(1142,223,1)
(48,886,1)
(122,747,1)
(86,260,1)
(133,966,1)
(248,603,1)
(392,395,1)
(1130,961,1)
(376,87,1)
(753,539,1)
(917,940,1)
(399,180,1)
(733,912,1)
(725,84,1)
(598,717,1)
(542,747,1)
(224,517,1)
(518,452,1)
(573,908,1)
(1071,323,1)
(824,65,1)
(584,265,1)
(917,640,1)
(1126,171,1)
(542,223,1)
(423,410,1)
(81,728,1)
(484,747,1)
(891,1147,1)
(1113,360,1)
(1152,775,1)
(843,445,1)
(1118,967,1)
(276,682,1)
(917,126,1)
(989,325,1)
(572,487,1)
(180,143,1)
(314,958,1)
(850,783,1)
(894,369,1)
(1044,559,1)
(527,747,1)
(1109,7,1)
(621,161,1)
(796,714,1)
(698,188,1)
(66,747,1)
(1140,827,1)
(457,270,1)
(469,753,1)
(297,873,1)
(801,583,1)
(872,782,1)
(1038,904,1)
(763,747,1)
(920,760,1)
(813,777,1)
(579,1155,1)
(129,761,1)
(1107,747,1)
(899,994,1)
(782,569,1)
(808,744,1)
(1016,454,1)
(421,578,1)
(312,581,1)
(731,60,1)
(730,283,1)
(725,1088,1)
(364,544,1)
(470,1030,1)
(811,906,1)
(161,284,1)
(545,364,1)
(1113,596,1)
(43,951,1)
(264,1042,1)
(883,705,1)
(55,566,1)
(1137,1165,1)
(240,1072,1)
(156,17,1)
(844,635,1)
(402,705,1)
(527,5,1)
(329,693,1)
(742,866,1)
(206,747,1)
(638,694,1)
(42,150,1)
(776,383,1)
(870,483,1)
(958,734,1)
(711,459,1)
(526,991,1)
(741,226,1)
(182,638,1)
(144,763,1)
(309,606,1)
(750,1053,1)
(1064,107,1)
(740,594,1)
(100,688,1)
(753,50,1)
(390,253,1)
(199,455,1)
(1159,829,1)
(511,320,1)
(192,804,1)
(369,407,1)
(1049,140,1)
(799,888,1)
(982,104,1)
(907,76,1)
(98,453,1)
(322,688,1)
(1007,1121,1)
(464,701,1)
(283,369,1)
(446,1000,1)
(846,343,1)
(252,151,1)
(776,927,1)
(65,327,1)
(720,816,1)
(944,100,1)
(961,34,1)
(420,196,1)
(460,688,1)
(521,290,1)
(398,781,1)
(745,886,1)
(1142,15,1)
(381,207,1)
(979,747,1)
(374,1156,1)
(61,115,1)
(675,784,1)
(749,459,1)
(441,886,1)
(1024,454,1)
(855,206,1)
(302,47,1)
(154,23,1)
(1105,800,1)
(723,267,1)
(218,110,1)
(358,726,1)
(806,84,1)
(76,747,1)
(532,562,1)
(75,787,1)
(652,424,1)
(687,976,1)
(853,230,1)
(271,307,1)
(881,886,1)
(424,1142,1)
(395,84,1)
(344,205,1)
(59,747,1)
(1151,819,1)
(794,223,1)
(600,906,1)
(267,926,1)
(254,422,1)
(846,747,1)
(338,186,1)
(936,209,1)
(998,857,1)
(797,938,1)
(861,734,1)
(800,696,1)
(1167,885,1)
(9,13,1)
(409,617,1)
(588,6,1)
(40,922,1)
(313,124,1)
(78,131,1)
(241,1101,1)
(652,862,1)
(76,938,1)
(825,985,1)
(218,1158,1)
(811,634,1)
(980,572,1)
(888,1074,1)
(971,133,1)
(402,883,1)
(246,938,1)
(829,614,1)
(271,650,1)
(5,295,1)
(408,938,1)
(441,640,1)
(419,570,1)
(941,1141,1)
(1151,885,1)
(483,1156,1)
(770,721,1)
(384,615,1)
(365,262,1)
(692,314,1)
(300,1048,1)
(1084,273,1)
(953,785,1)
(672,311,1)
(210,449,1)
(552,805,1)
(948,218,1)
(756,67,1)
(503,371,1)
(583,413,1)
(661,197,1)
(398,1164,1)
(894,133,1)
(422,138,1)
(499,118,1)
(826,1124,1)
(757,61,1)
(659,567,1)
(691,967,1)
(484,150,1)
(576,519,1)
(274,55,1)
(1029,784,1)
(373,609,1)
(483,747,1)
(284,503,1)
(903,979,1)
(18,354,1)
(99,747,1)
(524,599,1)
(673,408,1)
(1102,784,1)
(879,460,1)
(336,794,1)
(340,938,1)
(829,926,1)
(939,975,1)
(423,290,1)
(267,1023,1)
(7,849,1)
(59,938,1)
(124,1012,1)
(703,234,1)
(319,350,1)
(325,28,1)
(97,973,1)
(347,940,1)
(244,534,1)
(517,458,1)
(544,272,1)
(558,1054,1)
(917,280,1)
(563,201,1)
(847,46,1)
(654,745,1)
(255,747,1)
(20,102,1)
(81,782,1)
(707,982,1)
(205,375,1)
(218,1057,1)
(894,759,1)
(918,521,1)
(983,779,1)
(586,483,1)
(219,1148,1)
(548,139,1)
(987,150,1)
(277,316,1)
(768,5,1)
(413,459,1)
(127,367,1)
(874,556,1)
(482,456,1)
(466,749,1)
(22,999,1)
(428,711,1)
(459,301,1)
(16,745,1)
(845,742,1)
(1031,662,1)
(41,1052,1)
(26,221,1)
(354,558,1)
(42,747,1)
(387,950,1)
(834,618,1)
(465,154,1)
(213,632,1)
(744,586,1)
(602,495,1)
(270,493,1)
(461,1039,1)
(1099,152,1)
(713,474,1)
(452,938,1)
(34,1105,1)
(1116,455,1)
(873,1113,1)
(148,980,1)
(218,193,1)
(915,596,1)
(1150,712,1)
(238,233,1)
(323,238,1)
(1121,175,1)
(1158,1010,1)
(204,723,1)
(68,235,1)
(606,122,1)
(599,848,1)
(685,599,1)
(51,704,1)
(114,94,1)
(570,912,1)
(695,1049,1)
(580,159,1)
(218,840,1)
(184,1082,1)
(132,747,1)
(241,1110,1)
(805,886,1)
(790,736,1)
(53,1069,1)
(926,463,1)
(1091,721,1)
(900,1156,1)
(20,747,1)
(416,727,1)
(14,715,1)
(187,461,1)
(502,745,1)
(329,459,1)
(762,150,1)
(562,190,1)
(260,99,1)
(439,181,1)
(956,1144,1)
(530,10,1)
(862,424,1)
(23,938,1)
(438,84,1)
(153,904,1)
(771,477,1)
(1053,147,1)
(59,771,1)
(777,984,1)
(555,77,1)
(809,747,1)
(801,150,1)
(393,747,1)
(782,885,1)
(489,386,1)
(726,134,1)
(113,802,1)
(610,1044,1)
(750,906,1)
(1161,229,1)
(732,137,1)
(452,747,1)
(723,70,1)
(762,747,1)
(797,1013,1)
(752,673,1)
(707,955,1)
(50,794,1)
(1032,85,1)
(142,369,1)
(643,359,1)
(774,594,1)
(199,1116,1)
(203,793,1)
(886,1005,1)
(433,329,1)
(312,592,1)
(311,1,1)
(221,239,1)
(1037,610,1)
(951,1092,1)
(229,420,1)
(404,403,1)
(917,389,1)
(928,271,1)
(803,159,1)
(789,630,1)
(916,27,1)
(257,938,1)
(236,73,1)
(380,1150,1)
(566,442,1)
(218,1153,1)
(1144,878,1)
(168,347,1)
(366,747,1)
(322,810,1)
(280,576,1)
(11,481,1)
(96,710,1)
(702,772,1)
(1157,260,1)
(1028,554,1)
(56,215,1)
(273,702,1)
(370,884,1)
(1004,1083,1)
(367,192,1)
(689,74,1)
(1125,1056,1)
(819,885,1)
(99,881,1)
(581,430,1)
(534,291,1)
(1107,5,1)
(688,1051,1)
(262,872,1)
(806,392,1)
(631,71,1)
(101,951,1)
(1119,178,1)
(976,784,1)
(1056,713,1)
(660,168,1)
(1122,622,1)
(898,417,1)
(418,511,1)
(783,740,1)
(1141,223,1)
(326,354,1)
(482,1093,1)
(483,718,1)
(1167,1127,1)
(425,706,1)
(1029,1117,1)
(805,113,1)
(623,1062,1)
(1093,526,1)
(507,1164,1)
(917,912,1)
(1046,758,1)
(1128,1129,1)
(957,261,1)
(1129,167,1)
(500,747,1)
(675,747,1)
(35,464,1)
(960,587,1)
(1123,877,1)
(823,627,1)
(71,736,1)
(272,322,1)
(49,747,1)
(1066,611,1)
(738,358,1)
(374,528,1)
(425,645,1)
(957,566,1)
(126,414,1)
(186,167,1)
(676,394,1)
(63,624,1)
(1149,42,1)
(897,151,1)
(742,1076,1)
(212,20,1)
(366,378,1)
(304,1109,1)
(441,45,1)
(734,953,1)
(687,698,1)
(744,390,1)
(788,290,1)
(326,1014,1)
(47,796,1)
(178,148,1)
(857,100,1)
(1030,690,1)
(270,792,1)
(856,679,1)
(1011,911,1)
(424,1035,1)
(1042,231,1)
(629,1067,1)
(830,965,1)
(809,938,1)
(350,846,1)
(455,71,1)
(218,217,1)
(361,308,1)
(1130,938,1)
(403,365,1)
(1145,505,1)
(1024,640,1)
(782,1019,1)
(582,776,1)
(733,268,1)
(197,978,1)
(950,741,1)
(694,656,1)
(1148,725,1)
(1031,1155,1)
(1062,1146,1)
(1093,747,1)
(293,109,1)
(290,293,1)
(947,266,1)
(684,169,1)
(981,1096,1)
(705,1025,1)
(760,597,1)
(490,1102,1)
(98,366,1)
(762,363,1)
(1161,196,1)
(679,354,1)
(1150,1024,1)
(895,340,1)
(1005,159,1)
(579,867,1)
(1136,859,1)
(663,747,1)
(317,439,1)
(451,854,1)
(497,748,1)
(912,580,1)
(47,29,1)
(1057,898,1)
(320,209,1)
(715,423,1)
(801,747,1)
(617,524,1)
(196,402,1)
(316,398,1)
(357,692,1)
(1146,56,1)
(993,747,1)
(484,459,1)
(22,747,1)
(752,408,1)
(917,948,1)
(1113,747,1)
(143,475,1)
(509,22,1)
(1094,1114,1)
(481,313,1)
(1,1064,1)
(150,21,1)
(383,927,1)
(20,150,1)
(801,459,1)
(696,972,1)
(736,874,1)
(713,655,1)
(1004,375,1)
(1104,1087,1)
(218,473,1)
(1067,197,1)
(650,1084,1)
(429,938,1)
(42,129,1)
(6,616,1)
(455,631,1)
(865,841,1)
(884,478,1)
(269,18,1)
(559,596,1)
(518,438,1)
(463,440,1)
(891,663,1)
(953,747,1)
(696,707,1)
(15,479,1)
(967,448,1)
(755,133,1)
(408,747,1)
(58,886,1)
(1117,1100,1)
(147,136,1)
(1146,215,1)
(107,52,1)
(1065,612,1)
(655,474,1)
(1150,297,1)
(1025,1071,1)
(85,1075,1)
(52,1115,1)
(223,896,1)
(535,59,1)
(716,2,1)
(221,688,1)
(71,790,1)
(1091,1161,1)
(522,563,1)
(822,541,1)
(992,720,1)
(892,918,1)
(38,588,1)
(747,672,1)
(889,938,1)
(1078,599,1)
(266,1154,1)
(151,946,1)
(923,860,1)
(728,1167,1)
(150,886,1)
(214,125,1)
(301,522,1)
(581,562,1)
(1018,307,1)
(973,406,1)
(110,570,1)
(528,1018,1)
(1150,861,1)
(371,807,1)
(24,452,1)
(645,994,1)
(1069,1002,1)
(136,747,1)
(105,865,1)
(435,404,1)
(247,476,1)
(232,838,1)
(827,747,1)
(678,1078,1)
(1134,704,1)
(103,502,1)
(736,223,1)
(143,747,1)
(342,541,1)
(987,747,1)
(484,282,1)
(690,594,1)
(493,387,1)
(759,738,1)
(1084,702,1)
(714,937,1)
(474,1156,1)
(1147,663,1)
(218,256,1)
(744,894,1)
(538,485,1)
(965,236,1)
(175,711,1)
(1087,764,1)
(902,582,1)
(931,132,1)
(630,745,1)
(218,1135,1)
(614,926,1)
(692,747,1)
(744,318,1)
(177,600,1)
(825,518,1)
(685,949,1)
(5,886,1)
(783,1119,1)
(1009,747,1)
(949,599,1)
(161,503,1)
(993,1152,1)
(542,103,1)
(974,784,1)
(1002,536,1)
(37,204,1)
(976,747,1)
(889,747,1)
(571,881,1)
(372,730,1)
(863,86,1)
(704,1081,1)
(13,688,1)
(803,227,1)
(206,700,1)
(814,320,1)
(585,246,1)
(308,516,1)
(436,685,1)
(268,419,1)
(31,1157,1)
(967,212,1)
(230,1098,1)
(857,944,1)
(633,81,1)
(323,747,1)
(628,985,1)
(1130,747,1)
(261,789,1)
(139,466,1)
(516,1125,1)
(974,722,1)
(917,1040,1)
(861,280,1)
(785,886,1)
(114,1160,1)
(768,228,1)
(481,579,1)
(602,938,1)
(334,901,1)
(131,797,1)
(636,450,1)
(351,763,1)
(775,409,1)
(893,1047,1)
(390,747,1)
(774,1104,1)
(29,354,1)
(749,747,1)
(622,891,1)
(744,692,1)
(431,747,1)
(198,535,1)
(982,598,1)
(396,1001,1)
(794,747,1)
(335,930,1)
(831,31,1)
(474,121,1)
(782,205,1)
(966,54,1)
(922,560,1)
(1110,51,1)
(1067,661,1)
(278,545,1)
(674,488,1)
(601,720,1)
(668,1068,1)
(1068,373,1)
(922,127,1)
(7,429,1)
(288,731,1)
(744,695,1)
(951,1028,1)
(521,415,1)
(850,594,1)
(286,255,1)
(179,859,1)
(1091,1068,1)
(1005,274,1)
(860,745,1)
(744,264,1)
(227,179,1)
(194,601,1)
(4,82,1)
(142,584,1)
(627,401,1)
(1077,66,1)
(406,670,1)
(835,476,1)
(767,805,1)
(1080,184,1)
(99,531,1)
(1075,542,1)
(904,678,1)
(400,915,1)
(712,509,1)
(264,747,1)
(365,747,1)
(100,9,1)
(968,182,1)
(865,58,1)
(1088,855,1)
(69,398,1)
(444,889,1)
(87,204,1)
(236,1068,1)
(138,875,1)
(589,150,1)
(500,876,1)
(641,665,1)
(443,826,1)
(598,393,1)
(25,1032,1)
(449,871,1)
(927,304,1)
(101,43,1)
(367,1068,1)
(854,737,1)
(351,144,1)
(524,1138,1)
(167,1076,1)
(327,926,1)
(787,165,1)
(735,342,1)
(367,721,1)
(744,266,1)
(779,809,1)
(708,521,1)
(1141,824,1)
(569,1156,1)
(815,1046,1)
(1083,375,1)
(536,1141,1)
(172,74,1)
(920,926,1)
(713,594,1)
(726,1155,1)
(118,938,1)
(977,804,1)
(102,232,1)
(259,127,1)
(540,120,1)
(68,159,1)
(318,1126,1)
(858,853,1)
(77,457,1)
(985,1148,1)
(142,364,1)
(743,987,1)
(917,1076,1)
(377,850,1)
(986,172,1)
(1015,213,1)
(454,768,1)
(527,243,1)
(216,492,1)
(190,198,1)
(426,747,1)
(441,126,1)
(736,747,1)
(342,1000,1)
(253,1016,1)
(765,126,1)
(115,659,1)
(994,199,1)
(690,244,1)
(265,879,1)
(569,747,1)
(487,286,1)
(607,84,1)
(1034,370,1)
(592,276,1)
(45,684,1)
(561,150,1)
(701,400,1)
(445,709,1)
(656,1085,1)
(285,939,1)
(904,1078,1)
(1025,323,1)
(493,443,1)
(296,1075,1)
(820,536,1)
(938,68,1)
(647,900,1)
(809,843,1)
(363,349,1)
(993,5,1)
(134,91,1)
(414,561,1)
(1111,187,1)
(929,745,1)
(935,257,1)
(488,1022,1)
(401,429,1)
(980,747,1)
(717,393,1)
(490,885,1)
(467,956,1)
(223,886,1)
(786,919,1)
(294,596,1)
(637,156,1)
(492,510,1)
(226,769,1)
(712,1040,1)
(111,361,1)
(18,319,1)
(512,5,1)
(945,643,1)
(1074,589,1)
(91,971,1)
(714,354,1)
(972,444,1)
(1154,331,1)
(17,646,1)
(748,694,1)
(218,224,1)
(980,938,1)
(193,893,1)
(817,847,1)
(366,223,1)
(615,708,1)
(871,339,1)
(218,1136,1)
(986,613,1)
(53,1002,1)
(173,302,1)
(510,530,1)
(20,459,1)
(299,1021,1)
(152,1076,1)
(531,935,1)
(426,1045,1)
(297,756,1)
(669,960,1)
(1127,435,1)
(1122,891,1)
(791,492,1)
(1156,687,1)
(609,777,1)
(83,938,2)
(19,777,2)
(267,926,2)
(66,747,2)
(833,871,2)
(299,1001,2)
(804,1122,2)
(783,857,2)
(1127,490,2)
(140,838,2)
(475,325,2)
(644,1001,2)
(1001,482,2)
(762,150,2)
(593,865,2)
(770,398,2)
(744,309,2)
(47,18,2)
(210,871,2)
(223,886,2)
(234,431,2)
(917,389,2)
(629,325,2)
(453,204,2)
(744,586,2)
(833,777,2)
(1159,204,2)
(768,5,2)
(638,694,2)
(744,478,2)
(620,204,2)
(714,354,2)
(125,294,2)
(1045,18,2)
(6,1000,2)
(789,745,2)
(274,720,2)
(926,394,2)
(476,747,2)
(199,455,2)
(573,394,2)
(365,490,2)
(377,857,2)
(241,325,2)
(953,785,2)
(522,747,2)
(260,99,2)
(19,260,2)
(693,153,2)
(46,230,2)
(796,18,2)
(927,478,2)
(307,938,2)
(678,838,2)
(1016,454,2)
(504,325,2)
(18,18,2)
(654,745,2)
(675,747,2)
(192,507,2)
(511,320,2)
(340,938,2)
(376,204,2)
(891,663,2)
(1130,260,2)
(760,204,2)
(279,466,2)
(1107,747,2)
(26,857,2)
(542,747,2)
(215,1030,2)
(581,431,2)
(365,747,2)
(533,35,2)
(805,886,2)
(410,398,2)
(529,594,2)
(395,394,2)
(982,598,2)
(950,320,2)
(942,985,2)
(535,59,2)
(996,466,2)
(738,358,2)
(711,459,2)
(550,18,2)
(250,406,2)
(1082,777,2)
(843,573,2)
(69,398,2)
(569,490,2)
(78,573,2)
(538,957,2)
(218,730,2)
(1019,490,2)
(66,938,2)
(665,777,2)
(744,406,2)
(806,806,2)
(309,122,2)
(283,871,2)
(224,156,2)
(59,747,2)
(177,811,2)
(1034,478,2)
(207,811,2)
(367,721,2)
(740,857,2)
(1135,871,2)
(840,720,2)
(278,730,2)
(260,257,2)
(744,96,2)
(196,758,2)
(1144,98,2)
(603,257,2)
(1130,938,2)
(129,743,2)
(166,730,2)
(226,320,2)
(744,204,2)
(188,827,2)
(367,777,2)
(936,209,2)
(695,747,2)
(320,1107,2)
(206,747,2)
(1111,187,2)
(381,466,2)
(294,596,2)
(733,570,2)
(152,694,2)
(377,730,2)
(655,730,2)
(261,745,2)
(1099,694,2)
(444,260,2)
(917,280,2)
(939,1155,2)
(178,431,2)
(498,358,2)
(433,153,2)
(841,886,2)
(196,657,2)
(48,720,2)
(29,354,2)
(1009,747,2)
(560,127,2)
(860,745,2)
(500,394,2)
(695,827,2)
(138,478,2)
(320,1001,2)
(218,871,2)
(1085,167,2)
(187,461,2)
(218,957,2)
(876,327,2)
(320,325,2)
(212,838,2)
(116,987,2)
(857,100,2)
(846,747,2)
(744,713,2)
(602,938,2)
(602,204,2)
(132,596,2)
(308,369,2)
(307,204,2)
(15,204,2)
(371,236,2)
(709,573,2)
(559,596,2)
(744,692,2)
(592,730,2)
(294,747,2)
(249,573,2)
(1138,153,2)
(304,478,2)
(318,595,2)
(692,734,2)
(742,406,2)
(968,694,2)
(327,467,2)
(833,730,2)
(423,398,2)
(1113,747,2)
(418,320,2)
(1112,325,2)
(255,938,2)
(233,758,2)
(528,204,2)
(833,406,2)
(531,257,2)
(769,320,2)
(907,327,2)
(1146,431,2)
(702,926,2)
(640,454,2)
(140,827,2)
(217,257,2)
(438,84,2)
(898,900,2)
(19,167,2)
(521,415,2)
(1060,358,2)
(1003,730,2)
(277,398,2)
(96,747,2)
(236,721,2)
(316,398,2)
(303,573,2)
(985,1148,2)
(239,857,2)
(663,881,2)
(43,18,2)
(236,367,2)
(900,1156,2)
(202,490,2)
(1121,711,2)
(987,150,2)
(429,938,2)
(602,747,2)
(96,1001,2)
(47,29,2)
(873,745,2)
(142,322,2)
(1079,394,2)
(1137,466,2)
(917,756,2)
(34,260,2)
(22,881,2)
(552,805,2)
(744,318,2)
(426,747,2)
(1091,721,2)
(993,387,2)
(749,150,2)
(19,911,2)
(372,730,2)
(22,745,2)
(482,1093,2)
(1117,541,2)
(688,1000,2)
(276,730,2)
(850,857,2)
(288,325,2)
(955,260,2)
(482,478,2)
(125,1082,2)
(230,1098,2)
(833,167,2)
(436,827,2)
(782,569,2)
(946,132,2)
(749,747,2)
(169,1075,2)
(707,260,2)
(122,857,2)
(577,466,2)
(737,747,2)
(1039,466,2)
(327,926,2)
(65,327,2)
(7,849,2)
(389,1150,2)
(188,838,2)
(984,260,2)
(907,394,2)
(251,204,2)
(917,886,2)
(1067,325,2)
(601,720,2)
(900,838,2)
(886,720,2)
(1007,711,2)
(392,327,2)
(596,886,2)
(413,1001,2)
(365,938,2)
(656,167,2)
(850,594,2)
(1152,153,2)
(1118,967,2)
(917,218,2)
(1028,18,2)
(115,747,2)
(134,730,2)
(749,900,2)
(218,156,2)
(493,747,2)
(402,705,2)
(204,327,2)
(1142,223,2)
(703,431,2)
(727,811,2)
(408,777,2)
(503,236,2)
(635,758,2)
(743,325,2)
(886,1070,2)
(196,402,2)
(581,562,2)
(205,541,2)
(715,777,2)
(84,907,2)
(246,938,2)
(60,325,2)
(70,327,2)
(197,835,2)
(1129,167,2)
(1110,711,2)
(340,747,2)
(846,18,2)
(652,424,2)
(201,743,2)
(833,900,2)
(593,552,2)
(100,688,2)
(1043,871,2)
(744,1001,2)
(957,261,2)
(300,747,2)
(430,431,2)
(573,908,2)
(920,204,2)
(400,325,2)
(464,400,2)
(801,1001,2)
(851,838,2)
(524,153,2)
(509,22,2)
(899,204,2)
(526,478,2)
(506,857,2)
(711,325,2)
(744,260,2)
(280,734,2)
(519,734,2)
(938,957,2)
(393,747,2)
(1049,827,2)
(913,358,2)
(254,478,2)
(617,153,2)
(98,394,2)
(1122,708,2)
(833,1082,2)
(358,133,2)
(820,327,2)
(958,734,2)
(351,763,2)
(702,251,2)
(359,573,2)
(582,478,2)
(562,1030,2)
(570,912,2)
(801,747,2)
(1012,358,2)
(265,730,2)
(1026,900,2)
(1164,752,2)
(102,838,2)
(162,358,2)
(623,431,2)
(700,806,2)
(1005,720,2)
(342,466,2)
(77,466,2)
(974,784,2)
(1000,1111,2)
(441,1040,2)
(255,747,2)
(1156,827,2)
(395,806,2)
(55,1070,2)
(10,777,2)
(744,1082,2)
(133,730,2)
(387,320,2)
(429,478,2)
(763,466,2)
(390,747,2)
(827,325,2)
(408,938,2)
(276,682,2)
(941,327,2)
(91,730,2)
(507,1164,2)
(634,778,2)
(474,1156,2)
(274,1070,2)
(156,17,2)
(972,444,2)
(1048,730,2)
(20,747,2)
(1075,745,2)
(42,150,2)
(218,777,2)
(462,827,2)
(151,325,2)
(354,1091,2)
(828,204,2)
(778,811,2)
(19,153,2)
(679,18,2)
(425,204,2)
(268,570,2)
(878,204,2)
(726,730,2)
(483,747,2)
(725,84,2)
(41,466,2)
(19,871,2)
(238,758,2)
(241,1101,2)
(1051,1000,2)
(966,730,2)
(782,490,2)
(136,811,2)
(994,204,2)
(806,84,2)
(232,838,2)
(1072,394,2)
(809,573,2)
(595,762,2)
(951,18,2)
(540,886,2)
(342,1000,2)
(587,1001,2)
(912,406,2)
(231,873,2)
(131,797,2)
(838,675,2)
(142,265,2)
(455,204,2)
(212,20,2)
(466,900,2)
(154,490,2)
(713,594,2)
(12,18,2)
(145,708,2)
(96,325,2)
(902,478,2)
(775,153,2)
(626,730,2)
(814,325,2)
(714,18,2)
(251,753,2)
(529,1000,2)
(114,694,2)
(606,857,2)
(259,127,2)
(1011,911,2)
(478,325,2)
(61,838,2)
(429,747,2)
(1075,542,2)
(1165,466,2)
(836,573,2)
(509,745,2)
(101,18,2)
(829,204,2)
(788,290,2)
(735,1000,2)
(979,957,2)
(586,483,2)
(85,1075,2)
(323,785,2)
(1002,536,2)
(148,980,2)
(11,481,2)
(903,957,2)
(177,1000,2)
(889,747,2)
(1005,159,2)
(403,490,2)
(395,327,2)
(115,938,2)
(1025,323,2)
(723,267,2)
(892,521,2)
(894,133,2)
(598,393,2)
(1108,833,2)
(1000,594,2)
(555,77,2)
(1052,466,2)
(833,573,2)
(68,95,2)
(218,720,2)
(987,325,2)
(726,358,2)
(1065,320,2)
(533,325,2)
(871,339,2)
(827,747,2)
(757,838,2)
(744,741,2)
(452,747,2)
(778,1000,2)
(529,588,2)
(734,745,2)
(764,431,2)
(178,148,2)
(833,911,2)
(1142,747,2)
(956,204,2)
(914,533,2)
(272,730,2)
(1148,206,2)
(282,711,2)
(663,708,2)
(846,938,2)
(928,204,2)
(329,747,2)
(1119,431,2)
(99,881,2)
(364,1155,2)
(726,1155,2)
(881,509,2)
(390,454,2)
(1091,1068,2)
(1077,66,2)
(890,811,2)
(991,478,2)
(246,398,2)
(579,358,2)
(862,204,2)
(633,490,2)
(295,454,2)
(454,745,2)
(734,953,2)
(1084,702,2)
(661,325,2)
(467,394,2)
(423,777,2)
(101,951,2)
(1155,466,2)
(897,151,2)
(369,871,2)
(571,747,2)
(596,873,2)
(366,747,2)
(850,730,2)
(68,957,2)
(778,466,2)
(524,986,2)
(409,153,2)
(744,730,2)
(800,696,2)
(838,599,2)
(939,871,2)
(987,747,2)
(1077,758,2)
(153,904,2)
(323,747,2)
(1094,743,2)
(758,747,2)
(881,886,2)
(45,1075,2)
(716,720,2)
(771,431,2)
(425,828,2)
(634,1000,2)
(730,369,2)
(322,688,2)
(270,493,2)
(744,390,2)
(1079,327,2)
(702,204,2)
(732,320,2)
(1046,1082,2)
(456,478,2)
(1013,573,2)
(367,1068,2)
(312,623,2)
(894,358,2)
(413,325,2)
(953,747,2)
(794,204,2)
(76,938,2)
(631,204,2)
(707,982,2)
(313,358,2)
(753,50,2)
(791,777,2)
(731,325,2)
(961,260,2)
(976,784,2)
(824,327,2)
(687,976,2)
(920,760,2)
(524,599,2)
(1113,596,2)
(684,1075,2)
(668,777,2)
(997,711,2)
(986,153,2)
(142,364,2)
(180,325,2)
(392,394,2)
(218,125,2)
(985,806,2)
(421,204,2)
(19,859,2)
(720,570,2)
(208,857,2)
(221,857,2)
(223,1075,2)
(105,865,2)
(561,595,2)
(957,720,2)
(742,1076,2)
(1122,891,2)
(722,327,2)
(271,204,2)
(548,466,2)
(104,260,2)
(644,325,2)
(523,490,2)
(8,573,2)
(244,431,2)
(748,694,2)
(136,747,2)
(935,257,2)
(484,150,2)
(713,730,2)
(889,938,2)
(983,573,2)
(315,1155,2)
(838,827,2)
(750,906,2)
(861,745,2)
(51,711,2)
(1053,811,2)
(782,205,2)
(351,466,2)
(859,747,2)
(969,466,2)
(518,438,2)
(119,745,2)
(917,1040,2)
(1123,777,2)
(399,325,2)
(271,650,2)
(753,204,2)
(725,806,2)
(19,730,2)
(817,478,2)
(329,459,2)
(750,136,2)
(131,573,2)
(1148,725,2)
(744,264,2)
(1039,888,2)
(674,911,2)
(967,838,2)
(1004,541,2)
(326,18,2)
(21,595,2)
(76,747,2)
(579,1155,2)
(741,320,2)
(743,1001,2)
(408,747,2)
(331,509,2)
(257,957,2)
(794,747,2)
(728,403,2)
(740,594,2)
(618,260,2)
(1102,394,2)
(623,747,2)
(219,806,2)
(583,1001,2)
(960,1001,2)
(483,1156,2)
(833,570,2)
(1025,758,2)
(827,1001,2)
(976,838,2)
(446,1000,2)
(801,459,2)
(35,464,2)
(425,706,2)
(127,777,2)
(763,747,2)
(777,984,2)
(776,927,2)
(761,743,2)
(204,723,2)
(1156,838,2)
(714,101,2)
(744,167,2)
(914,325,2)
(84,327,2)
(1031,1155,2)
(470,431,2)
(733,912,2)
(744,720,2)
(1164,777,2)
(71,736,2)
(857,1000,2)
(811,634,2)
(228,745,2)
(993,153,2)
(772,204,2)
(55,720,2)
(586,375,2)
(989,325,2)
(99,257,2)
(545,730,2)
(600,906,2)
(23,490,2)
(441,640,2)
(796,714,2)
(25,1075,2)
(218,694,2)
(61,115,2)
(1033,758,2)
(1076,803,2)
(452,938,2)
(218,573,2)
(247,325,2)
(1149,743,2)
(398,1164,2)
(460,730,2)
(19,1082,2)
(1119,592,2)
(349,745,2)
(1038,838,2)
(1082,791,2)
(187,466,2)
(58,886,2)
(1125,592,2)
(12,1091,2)
(171,595,2)
(127,367,2)
(271,307,2)
(1047,1082,2)
(744,257,2)
(1029,784,2)
(218,900,2)
(1140,827,2)
(803,859,2)
(327,204,2)
(833,153,2)
(682,730,2)
(636,573,2)
(505,912,2)
(209,801,2)
(472,730,2)
(608,325,2)
(81,23,2)
(907,76,2)
(957,566,2)
(479,204,2)
(392,806,2)
(532,431,2)
(203,957,2)
(404,490,2)
(293,777,2)
(1154,509,2)
(19,156,2)
(755,133,2)
(241,1110,2)
(1065,612,2)
(833,257,2)
(839,541,2)
(144,466,2)
(68,159,2)
(569,747,2)
(469,204,2)
(589,466,2)
(806,394,2)
(335,1091,2)
(417,900,2)
(221,688,2)
(1104,431,2)
(66,758,2)
(383,478,2)
(822,541,2)
(86,260,2)
(673,777,2)
(807,236,2)
(339,1155,2)
(516,730,2)
(71,204,2)
(19,957,2)
(1107,5,2)
(614,926,2)
(521,290,2)
(1153,125,2)
(49,747,2)
(336,204,2)
(974,327,2)
(317,466,2)
(218,1082,2)
(990,509,2)
(546,260,2)
(503,371,2)
(744,266,2)
(911,221,2)
(425,645,2)
(396,1001,2)
(1141,223,2)
(13,1000,2)
(182,694,2)
(451,737,2)
(322,730,2)
(235,957,2)
(391,777,2)
(74,153,2)
(982,260,2)
(541,466,2)
(868,509,2)
(994,199,2)
(1092,18,2)
(1101,191,2)
(19,406,2)
(1144,204,2)
(1028,426,2)
(902,230,2)
(986,172,2)
(19,573,2)
(580,406,2)
(784,1001,2)
(512,454,2)
(858,1001,2)
(175,711,2)
(704,711,2)
(710,1001,2)
(979,747,2)
(1018,204,2)
(647,900,2)
(194,720,2)
(1151,394,2)
(450,573,2)
(207,466,2)
(652,204,2)
(403,365,2)
(549,204,2)
(937,18,2)
(132,747,2)
(744,125,2)
(980,431,2)
(143,325,2)
(645,994,2)
(291,431,2)
(1078,1118,2)
(856,18,2)
(578,204,2)
(411,711,2)
(363,745,2)
(167,859,2)
(865,58,2)
(609,777,2)
(675,156,2)
(458,156,2)
(323,758,2)
(9,1000,2)
(358,730,2)
(63,125,2)
(424,204,2)
(473,406,2)
(111,730,2)
(489,993,2)
(728,1167,2)
(768,747,2)
(793,957,2)
(253,454,2)
(735,466,2)
(345,857,2)
(1102,490,2)
(1156,687,2)
(1150,886,2)
(1029,466,2)
(866,406,2)
(690,431,2)
(204,974,2)
(915,596,2)
(744,957,2)
(883,758,2)
(690,996,2)
(406,694,2)
(1068,777,2)
(147,811,2)
(456,902,2)
(784,241,2)
(19,720,2)
(927,938,2)
(87,204,2)
(893,1082,2)
(607,84,2)
(874,204,2)
(555,466,2)
(834,260,2)
(744,522,2)
(373,777,2)
(173,47,2)
(343,1091,2)
(705,1025,2)
(264,747,2)
(801,325,2)
(148,431,2)
(1128,167,2)
(588,1000,2)
(271,425,2)
(19,694,2)
(1076,859,2)
(869,987,2)
(360,745,2)
(28,125,2)
(586,541,2)
(634,466,2)
(313,124,2)
(481,579,2)
(1107,209,2)
(779,573,2)
(989,1001,2)
(67,873,2)
(497,694,2)
(729,573,2)
(484,459,2)
(505,720,2)
(374,1156,2)
(350,1091,2)
(1080,1082,2)
(47,796,2)
(876,394,2)
(833,859,2)
(426,18,2)
(539,204,2)
(1124,466,2)
(461,466,2)
(343,18,2)
(1004,466,2)
(35,325,2)
(445,573,2)
(466,749,2)
(1087,431,2)
(459,743,2)
(474,730,2)
(218,167,2)
(976,827,2)
(374,747,2)
(19,125,2)
(622,708,2)
(650,204,2)
(14,398,2)
(536,327,2)
(407,939,2)
(375,466,2)
(571,777,2)
(792,466,2)
(242,325,2)
(19,570,2)
(580,159,2)
(782,885,2)
(388,777,2)
(1147,708,2)
(415,777,2)
(241,1001,2)
(527,747,2)
(993,747,2)
(474,747,2)
(252,325,2)
(81,490,2)
(914,143,2)
(675,827,2)
(581,535,2)
(610,559,2)
(923,745,2)
(615,708,2)
(547,325,2)
(191,411,2)
(476,596,2)
(833,720,2)
(1091,758,2)
(462,838,2)
(1078,838,2)
(167,1076,2)
(566,720,2)
(161,236,2)
(424,1142,2)
(767,865,2)
(394,747,2)
(81,782,2)
(358,358,2)
(437,911,2)
(1132,1070,2)
(691,838,2)
(502,745,2)
(774,594,2)
(844,758,2)
(381,1000,2)
(205,375,2)
(659,838,2)
(974,747,2)
(811,466,2)
(1159,394,2)
(650,1084,2)
(917,912,2)
(507,708,2)
(400,915,2)
(946,325,2)
(833,125,2)
(297,745,2)
(692,747,2)
(50,794,2)
(299,325,2)
(1149,42,2)
(29,340,2)
(312,431,2)
(122,1156,2)
(739,153,2)
(932,490,2)
(285,871,2)
(46,786,2)
(547,1001,2)
(744,694,2)
(1030,690,2)
(518,985,2)
(1037,610,2)
(585,246,2)
(741,747,2)
(218,204,2)
(296,745,2)
(218,1001,2)
(998,857,2)
(823,478,2)
(350,846,2)
(1044,125,2)
(441,756,2)
(193,1082,2)
(1090,730,2)
(706,602,2)
(218,911,2)
(422,138,2)
(777,260,2)
(1063,358,2)
(18,354,2)
(901,573,2)
(613,153,2)
(1102,747,2)
(803,159,2)
(209,1001,2)
(179,859,2)
(1002,327,2)
(319,350,2)
(493,387,2)
(422,478,2)
(808,78,2)
(364,730,2)
(879,460,2)
(818,838,2)
(657,1077,2)
(136,938,2)
(785,886,2)
(715,398,2)
(687,838,2)
(759,358,2)
(98,366,2)
(690,594,2)
(1109,478,2)
(1069,327,2)
(19,204,2)
(117,490,2)
(23,747,2)
(785,734,2)
(257,938,2)
(118,747,2)
(1070,886,2)
(720,733,2)
(747,672,2)
(784,325,2)
(1160,152,2)
(319,18,2)
(534,431,2)
(371,451,2)
(730,871,2)
(122,747,2)
(845,406,2)
(973,406,2)
(744,573,2)
(527,5,2)
(307,747,2)
(710,325,2)
(218,406,2)
(814,1001,2)
(938,68,2)
(744,894,2)
(835,476,2)
(818,827,2)
(1093,938,2)
(430,1030,2)
(698,827,2)
(1050,394,2)
(53,1002,2)
(977,708,2)
(908,500,2)
(344,541,2)
(312,592,2)
(871,911,2)
(436,156,2)
(1161,758,2)
(123,857,2)
(679,1091,2)
(754,236,2)
(441,1150,2)
(183,1150,2)
(1090,466,2)
(908,394,2)
(695,838,2)
(152,1076,2)
(142,730,2)
(577,811,2)
(875,478,2)
(755,358,2)
(993,5,2)
(218,859,2)
(559,125,2)
(854,236,2)
(879,730,2)
(270,466,2)
(599,827,2)
(202,394,2)
(264,873,2)
(442,720,2)
(1009,573,2)
(118,521,2)
(581,430,2)
(18,1091,2)
(11,358,2)
(320,209,2)
(806,327,2)
(895,18,2)
(744,911,2)
(490,885,2)
(110,570,2)
(380,1150,2)
(19,257,2)
(873,1113,2)
(756,873,2)
(340,18,2)
(801,150,2)
(431,730,2)
(366,394,2)
(484,711,2)
(495,204,2)
(750,811,2)
(1165,1000,2)
(156,153,2)
(246,747,2)
(598,260,2)
(920,926,2)
(151,946,2)
(624,125,2)
(696,972,2)
(468,204,2)
(687,827,2)
(76,394,2)
(812,431,2)
(589,459,2)
(718,541,2)
(378,204,2)
(485,957,2)
(398,788,2)
(90,204,2)
(983,779,2)
(541,1029,2)
(262,490,2)
(142,300,2)
(791,492,2)
(830,236,2)
(682,938,2)
(83,466,2)
(713,474,2)
(953,745,2)
(230,325,2)
(381,811,2)
(5,454,2)
(737,236,2)
(589,150,2)
(441,280,2)
(369,407,2)
(1160,694,2)
(312,581,2)
(786,478,2)
(927,747,2)
(492,777,2)
(984,1130,2)
(113,865,2)
(999,745,2)
(804,708,2)
(20,150,2)
(645,204,2)
(273,204,2)
(1086,394,2)
(345,466,2)
(463,394,2)
(736,204,2)
(833,260,2)
(744,979,2)
(583,325,2)
(685,827,2)
(1005,1070,2)
(59,938,2)
(922,777,2)
(94,694,2)
(411,938,2)
(805,865,2)
(960,230,2)
(240,327,2)
(682,747,2)
(708,777,2)
(362,358,2)
(788,118,2)
(570,406,2)
(1157,260,2)
(600,811,2)
(25,747,2)
(1083,375,2)
(1126,595,2)
(1117,466,2)
(266,747,2)
(676,394,2)
(89,873,2)
(752,777,2)
(530,777,2)
(798,358,2)
(1113,745,2)
(908,327,2)
(705,758,2)
(366,223,2)
(1001,478,2)
(1022,911,2)
(1125,730,2)
(595,745,2)
(115,838,2)
(165,730,2)
(906,466,2)
(853,230,2)
(911,857,2)
(1144,394,2)
(802,865,2)
(483,541,2)
(137,320,2)
(453,394,2)
(808,744,2)
(821,153,2)
(849,478,2)
(409,524,2)
(309,594,2)
(1093,478,2)
(484,747,2)
(5,886,2)
(589,747,2)
(50,204,2)
(302,47,2)
(490,394,2)
(523,394,2)
(1060,133,2)
(833,957,2)
(884,478,2)
(743,116,2)
(1136,859,2)
(19,1001,2)
(326,354,2)
(685,156,2)
(930,1091,2)
(917,1076,2)
(987,1001,2)
(758,1082,2)
(552,865,2)
(1062,431,2)
(513,838,2)
(745,886,2)
(428,711,2)
(1086,327,2)
(1031,730,2)
(762,745,2)
(120,886,2)
(980,938,2)
(1051,529,2)
(499,521,2)
(345,730,2)
(833,204,2)
(325,125,2)
(1167,490,2)
(91,358,2)
(191,711,2)
(420,196,2)
(969,924,2)
(826,466,2)
(263,209,2)
(1166,156,2)
(838,156,2)
(426,785,2)
(1078,599,2)
(441,126,2)
(1066,489,2)
(554,18,2)
(374,204,2)
(811,906,2)
(1000,857,2)
(1066,153,2)
(489,153,2)
(562,431,2)
(627,478,2)
(948,218,2)
(269,18,2)
(917,640,2)
(77,270,2)
(478,230,2)
(1029,541,2)
(2,720,2)
(1111,857,2)
(1049,838,2)
(1112,1001,2)
(521,777,2)
(623,938,2)
(831,260,2)
(522,743,2)
(73,367,2)
(945,573,2)
(1102,784,2)
(158,1150,2)
(229,196,2)
(1105,696,2)
(978,325,2)
(744,153,2)
(584,730,2)
(267,327,2)
(161,503,2)
(416,811,2)
(896,1075,2)
(256,167,2)
(517,156,2)
(1037,125,2)
(305,125,2)
(675,784,2)
(14,777,2)
(308,730,2)
(612,747,2)
(863,260,2)
(1067,197,2)
(721,398,2)
(78,131,2)
(885,394,2)
(406,114,2)
(835,325,2)
(704,484,2)
(592,276,2)
(378,394,2)
(20,459,2)
(415,398,2)
(477,431,2)
(621,367,2)
(7,478,2)
(643,573,2)
(301,743,2)
(1110,51,2)
(393,260,2)
(265,879,2)
(178,774,2)
(236,1068,2)
(634,811,2)
(198,431,2)
(1093,747,2)
(153,757,2)
(621,161,2)
(749,459,2)
(24,985,2)
(637,156,2)
(83,811,2)
(481,358,2)
(919,478,2)
(828,920,2)
(1114,743,2)
(1057,900,2)
(1081,711,2)
(99,747,2)
(888,466,2)
(443,466,2)
(1119,255,2)
(218,478,2)
(642,327,2)
(811,1000,2)
(214,125,2)
(1162,873,2)
(7,429,2)
(286,431,2)
(879,1031,2)
(1141,327,2)
(1042,873,2)
(569,1156,2)
(401,478,2)
(156,409,2)
(670,694,2)
(744,156,2)
(314,734,2)
(588,187,2)
(1142,204,2)
(799,466,2)
(467,204,2)
(521,398,2)
(83,747,2)
(1166,827,2)
(931,325,2)
(956,394,2)
(1021,325,2)
(410,290,2)
(949,156,2)
(681,18,2)
(797,938,2)
(816,570,2)
(411,747,2)
(917,126,2)
(243,987,2)
(172,153,2)
(460,688,2)
(897,325,2)
(1054,1091,2)
(571,881,2)
(81,728,2)
(394,466,2)
(318,747,2)
(457,466,2)
(325,1037,2)
(38,1000,2)
(744,776,2)
(357,734,2)
(790,204,2)
(37,204,2)
(658,204,2)
(142,369,2)
(1167,885,2)
(924,466,2)
(774,431,2)
(717,260,2)
(398,521,2)
(510,777,2)
(728,490,2)
(576,734,2)
(218,570,2)
(500,327,2)
(487,431,2)
(809,938,2)
(121,730,2)
(40,777,2)
(1032,1075,2)
(904,1078,2)
(255,431,2)
(225,478,2)
(688,1051,2)
(438,985,2)
(723,327,2)
(1130,747,2)
(393,881,2)
(976,747,2)
(696,260,2)
(1029,747,2)
(407,1043,2)
(900,827,2)
(542,223,2)
(56,215,2)
(616,1000,2)
(206,806,2)
(610,125,2)
(558,1091,2)
(536,1141,2)
(367,192,2)
(192,708,2)
(1145,720,2)
(947,509,2)
(1010,153,2)
(419,570,2)
(240,394,2)
(300,938,2)
(915,747,2)
(597,204,2)
(1098,897,2)
(142,592,2)
(1084,204,2)
(849,823,2)
(572,431,2)
(17,1066,2)
(1119,178,2)
(415,585,2)
(847,478,2)
(917,940,2)
(329,150,2)
(760,652,2)
(853,1001,2)
(339,911,2)
(467,1144,2)
(1072,327,2)
(206,938,2)
(856,1091,2)
(833,1001,2)
(641,777,2)
(744,695,2)
(815,1082,2)
(632,466,2)
(918,521,2)
(16,745,2)
(833,694,2)
(493,5,2)
(114,1160,2)
(994,926,2)
(694,167,2)
(334,573,2)
(788,521,2)
(440,394,2)
(929,745,2)
(1148,806,2)
(783,730,2)
(878,394,2)
(1015,466,2)
(889,260,2)
(952,204,2)
(143,747,2)
(434,478,2)
(192,804,2)
(327,394,2)
(17,153,2)
(1143,478,2)
(810,730,2)
(329,153,2)
(787,730,2)
(414,595,2)
(1024,745,2)
(996,969,2)
(1111,466,2)
(663,747,2)
(441,886,2)
(706,204,2)
(209,325,2)
(959,806,2)
(669,1001,2)
(891,708,2)
(611,153,2)
(607,806,2)
(431,747,2)
(493,466,2)
(1000,730,2)
(361,730,2)
(744,871,2)
(1085,1076,2)
(951,1028,2)
(488,911,2)
(246,777,2)
(621,236,2)
(1106,406,2)
(981,406,2)
(949,599,2)
(736,747,2)
(46,478,2)
(544,730,2)
(1056,730,2)
(755,315,2)
(888,589,2)
(967,212,2)
(1000,466,2)
(386,153,2)
(585,398,2)
(132,325,2)
(412,454,2)
(124,358,2)
(855,806,2)
(126,595,2)
(527,987,2)
(867,358,2)
(441,45,2)
(962,758,2)
(819,885,2)
(971,358,2)
(992,720,2)
(744,570,2)
(530,571,2)
(290,777,2)
(1134,711,2)
(1116,204,2)
(76,327,2)
(1083,541,2)
(83,1000,2)
(1100,541,2)
(819,490,2)
(172,74,2)
(1096,406,2)
(744,25,2)
(74,329,2)
(612,320,2)
(385,431,2)
(518,452,2)
(744,859,2)
(319,1091,2)
(811,811,2)
(490,490,2)
(1090,857,2)
(711,747,2)
(134,358,2)
(829,394,2)
(520,125,2)
(227,859,2)
(912,580,2)
(1098,325,2)
(781,521,2)
(980,747,2)
(402,758,2)
(1118,838,2)
(31,260,2)
(886,1005,2)
(768,745,2)
(116,527,2)
(439,466,2)
(464,325,2)
(882,730,2)
(394,1000,2)
(218,153,2)
(189,720,2)
(1035,204,2)
(482,456,2)
(794,223,2)
(694,1085,2)
(197,325,2)
(1071,758,2)
(1158,153,2)
(657,758,2)
(965,236,2)
(541,375,2)
(391,398,2)
(1023,327,2)
(471,985,2)
(779,809,2)
(59,431,2)
(384,708,2)
(213,466,2)
(711,1001,2)
(465,490,2)
(1088,806,2)
(53,327,2)
(1021,1001,2)
(350,18,2)
(97,406,2)
(630,745,2)
(216,777,2)
(98,204,2)
(662,730,2)
(1100,466,2)
(218,257,2)
(241,711,2)
(490,1102,2)
(118,938,2)
(190,431,2)
(452,985,2)
(737,881,2)
(542,745,2)
(612,5,2)
(975,871,2)
(894,369,2)
(1074,466,2)
(19,478,2)
(556,204,2)
(743,987,2)
(218,260,2)
(904,838,2)
(573,327,2)
(1137,1000,2)
(535,431,2)
(461,1039,2)
(971,730,2)
(1111,730,2)
(712,745,2)
(492,530,2)
(215,431,2)
(455,71,2)
(944,1000,2)
(797,573,2)
(577,1000,2)
(377,466,2)
(825,806,2)
(757,61,2)
(75,730,2)
(687,698,2)
(711,150,2)
(1014,18,2)
(54,730,2)
(744,900,2)
(476,325,2)
(19,900,2)
(559,747,2)
(585,777,2)
(1151,490,2)
(701,325,2)
(563,743,2)
(594,466,2)
(22,747,2)
(177,466,2)
(207,1000,2)
(646,153,2)
(100,1000,2)
(248,257,2)
(752,408,2)
(84,394,2)
(846,1091,2)
(42,747,2)
(186,167,2)
(500,747,2)
(567,838,2)
(313,755,2)
(906,1000,2)
(614,204,2)
(833,478,2)
(778,83,2)
(1030,431,2)
(127,621,2)
(294,1082,2)
(150,595,2)
(813,777,2)
(309,857,2)
(124,688,2)
(29,18,2)
(199,204,2)
(181,466,2)
(407,871,2)
(917,45,2)
(865,886,2)
(736,223,2)
(696,707,2)
(797,747,2)
(972,260,2)
(109,777,2)
(541,541,2)
(915,325,2)
(1155,555,2)
(143,938,2)
(924,351,2)
(564,325,2)
(266,509,2)
(910,957,2)
(267,53,2)
(689,153,2)
(943,325,2)
(481,313,2)
(300,730,2)
(776,478,2)
(366,204,2)
(103,745,2)
(139,466,2)
(150,886,2)
(284,236,2)
(698,838,2)
(184,1082,2)
(449,871,2)
(451,236,2)
(338,167,2)
(1040,509,2)
(358,726,2)
(762,747,2)
(877,777,2)
(1101,711,2)
(315,358,2)
(500,938,2)
(303,747,2)
(444,889,2)
(870,541,2)
(20,838,2)
(628,985,2)
(848,827,2)
(1098,1067,2)
(650,374,2)
(153,838,2)
(809,747,2)
(448,838,2)
(574,325,2)
(872,490,2)
(833,156,2)
(51,704,2)
(42,743,2)
(763,223,2)
(18,319,2)
(49,833,2)
(1141,747,2)
(1,880,2)
(744,777,2)
(454,768,2)
(23,938,2)
(435,490,2)
(765,745,2)
(370,478,2)
-----------------------------------
(0,cdefd)
(1,JAS_DBGLOG(100, ("jp2_decode(%p, \\"%s\\")
(2,box = 0)
(3,if (!(box = jp2_box_get(in)
(4,box)
(5,dec->pclr = box)
(6,ents)
(7,jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc)
(8,image)
(9,map)
(10,data)
(11,lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans])
(12,dec)
(13,cmapent)
(14,dec)
(15,cdef)
(16,dec)
(17,dec->pclr->data.pclr.numchans)
(18,i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(19,0)
(20,dec->cmap)
(21,box)
(22,dec->ihdr)
(23,dec->image)
(24,i)
(25,dec->cdef)
(26,JP2_CMAP_PALETTE)
(27,dec)
(28,method)
(29,jas_image_cmptdtype(dec->image, i)
(30,)
(31,jas_eprintf("error: missing IHDR box\\n")
(32,)
(33,if (!jas_image_numcmpts(dec->image)
(34,dec)
(35,&dec->colr->data.colr)
(36,if (cmapent->map == JP2_CMAP_DIRECT)
(37,"error: invalid channel number in CDEF box\\n")
(38,channo)
(39,for (i = 0; i < dec->cdef->data.cdef.numchans; ++i)
(40,ihdr)
(41,0)
(42,dec->cmap)
(43,bpcs)
(44,iccprof)
(45,box = 0)
(46,jas_iccprof_gethdr(iccprof, &icchdr)
(47,jas_image_cmptdtype(dec->image, i)
(48,found)
(49,jp2_dec_destroy(dec)
(50,dec->cdef->data)
(51,dec->cmap->data.cmap)
(52,"jp2_decode(%p, \\"%s\\")
(53,dec->cdef->data.cdef.ents)
(54,i)
(55,box)
(56,abort()
(57,case JP2_COLR_ENUM:)
(58,jas_getdbglevel()
(59,dec->image)
(60,iccprof)
(61,jas_image_numcmpts(dec->image)
(62,if (!(dec->image = jpc_decode(in, optstr)
(63,jas_eprintf("error: no COLR box\\n")
(64,icchdr)
(65,dec)
(66,dec->image)
(67,0)
(68,jpc_decode(in, optstr)
(69,i)
(70,channo)
(71,dec->cdef->data)
(72,)
(73,samedtype)
(74,dec->cmap->data)
(75,image)
(76,dec->image)
(77,dec->pclr->data.pclr)
(78,return image;)
(79,)
(80,box)
(81,jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],\\n\\t\\t\\t  jp2_getct(jas_image_clrspc(dec->image)
(82,dec = 0)
(83,dec->image)
(84,i = jas_image_numcmpts(dec->image)
(85,dec)
(86,dec)
(87,dec)
(88,if (!dec->bpcc)
(89,box)
(90,i)
(91,pclrd)
(92,if (box->data.jp.magic != JP2_JP_MAGIC)
(93,)
(94,magic)
(95,const char *optstr)
(96,dec->numchans)
(97,jas_eprintf("incorrect magic number\\n")
(98,dec->cdef->data)
(99,dec->ihdr)
(100,cmapent->map)
(101,dec->bpcc->data.bpcc.bpcs)
(102,cmap)
(103,cdef)
(104,ihdr)
(105,"got box type %s\\n")
(106,if (jas_image_cmptdtype(dec->image, i)
(107,in)
(108,)
(109,i)
(110,goto error;)
(111,cdef)
(112,if (jas_getdbglevel()
(113,info)
(114,box->data.jp.magic)
(115,dec->image)
(116,!dec->pclr)
(117,image)
(118,dec->image)
(119,break;)
(120,box)
(121,chantocmptlut)
(122,dec->chantocmptlut)
(123,chantocmptlut)
(124,cmapent->pcol)
(125,!dec->colr)
(126,box = 0)
(127,(samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
(128,cmapd)
(129,cmap)
(130,)
(131,image = dec->image)
(132,dec->colr)
(133,i = 0)
(134,numlutents)
(135,)
(136,dec->image)
(137,dec)
(138,icchdr.colorspc)
(139,i)
(140,dec)
(141,if (!(dec = jp2_dec_create()
(142,jas_image_depalettize(dec->image, cmapent->cmptno,\\n\\t\\t\\t\\t  pclrd->numlutents, lutents,\\n\\t\\t\\t\\t  JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol])
(143,dec->image)
(144,data)
(145,bpc)
(146,if (dec->cmap)
(147,i)
(148,jas_image_clrspc(dec->image)
(149,if (box)
(150,dec->cmap = box)
(151,dec->colr->data.colr)
(152,box->data)
(153,dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(jas_uint,\\n\\t\\t\\t  jas_image_numcmpts(dec->image)
(154,dec)
(155,if (jas_image_cmptdtype(dec->image, i)
(156,dec->cmap->data.cmap.ents[i].pcol >=\\n\\t\\t\\t  dec->pclr->data.pclr.numchans)
(157,)
(158,box)
(159,jas_stream_t *in)
(160,)
(161,dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)
(162,i)
(163,for (i = 0; i < dec->numchans; ++i)
(164,newcmptno)
(165,newcmptno)
(166,pcol)
(167,!(box = jp2_box_get(in)
(168,0)
(169,box)
(170,if (box)
(171,dec)
(172,dec->cmap->data.cmap)
(173,jas_eprintf("warning: component data type mismatch\\n")
(174,)
(175,jas_uint)
(176,if (!lutents)
(177,i)
(178,jp2_getct(jas_image_clrspc(dec->image)
(179,box)
(180,dec)
(181,cmapd)
(182,jas_eprintf("error: expecting signature box\\n")
(183,0)
(184,dec)
(185,for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(186,"error: cannot get box\\n")
(187,cmapd = &dec->cmap->data.cmap)
(188,uint_fast16_t)
(189,0)
(190,type)
(191,jas_image_numcmpts(dec->image)
(192,dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
(193,goto error;)
(194,jas_eprintf("expecting file type box\\n")
(195,)
(196,dec->bpcc->data.bpcc.numcmpts != JAS_CAST(jas_uint, jas_image_numcmpts(\\n\\t\\t  dec->image)
(197,dec->colr->data.colr)
(198,cdefent)
(199,dec->cdef->data.cdef.ents)
(200,)
(201,dec)
(202,numchans)
(203,jas_eprintf("error: no code stream found\\n")
(204,dec->cdef->data.cdef.ents[i].channo >= dec->numchans)
(205,dec->chantocmptlut[i] = i)
(206,dec->image)
(207,jas_uint)
(208,dec)
(209,!dec->cmap)
(210,pclrd)
(211,)
(212,dec->cmap->data)
(213,dec)
(214,dec)
(215,!cdefent)
(216,comptype)
(217,goto error;)
(218,box)
(219,JAS_IMAGE_CT_UNKNOWN)
(220,switch (box->type)
(221,cmapent->map)
(222,if (found)
(223,dec->cdef = box)
(224,goto error;)
(225,cmprof_)
(226,pclr)
(227,in)
(228,pclr)
(229,jas_eprintf("warning: number of components mismatch\\n")
(230,iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,\\n\\t\\t  dec->colr->data.colr.iccplen)
(231,dec)
(232,dec)
(233,dec)
(234,dec)
(235,optstr)
(236,!samedtype)
(237,image)
(238,bpcc)
(239,map)
(240,dec)
(241,dec->cmap ? dec->cmap->data.cmap.numchans :\\n\\t  JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(242,colr)
(243,pclr)
(244,channo)
(245,error:)
(246,dec->image)
(247,data)
(248,jas_eprintf("error: cannot decode code stream\\n")
(249,"error: no components\\n")
(250,in)
(251,dec->cdef->data.cdef.ents)
(252,iccplen)
(253,pclr)
(254,dec)
(255,dec->image)
(256,goto error;)
(257,!(dec->image = jpc_decode(in, optstr)
(258,case JP2_BOX_PCLR:)
(259,"warning: component data type mismatch\\n")
(260,!dec->ihdr)
(261,found = 1)
(262,image)
(263,pclr)
(264,dec->colr)
(265,JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol])
(266,dec->ihdr)
(267,dec->cdef->data.cdef.ents[i])
(268,type)
(269,dec)
(270,dec->pclr->data)
(271,jas_image_setcmpttype(dec->image,\\n\\t\\t\\t  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],\\n\\t\\t\\t  jp2_getct(jas_image_clrspc(dec->image)
(272,pclrd)
(273,channo)
(274,in)
(275,if (!dec->cdef)
(276,jas_image_numcmpts(dec->image)
(277,false)
(278,pclrd)
(279,cdef)
(280,box = 0)
(281,)
(282,cmap)
(283,lutents)
(284,JP2_IHDR_BPCNULL)
(285,int_fast32_t)
(286,newcmptno)
(287,if (dec)
(288,colr)
(289,)
(290,i = 1)
(291,cdefent)
(292,)
(293,1)
(294,dec->colr)
(295,box)
(296,break;)
(297,break;)
(298,if (!(box = jp2_box_get(in)
(299,cmap)
(300,dec->image)
(301,0)
(302,"warning: component data type mismatch\\n")
(303,jp2_dec_destroy(dec)
(304,image)
(305,colr)
(306,channo)
(307,dec->image)
(308,jas_free(lutents)
(309,dec->chantocmptlut[channo])
(310,)
(311,dec)
(312,jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image)
(313,cmapent->pcol + i * pclrd->numchans)
(314,bpcc)
(315,pclrd->numchans)
(316,samedtype)
(317,cmap)
(318,dec->cmap)
(319,JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(320,!dec->cmap && dec->pclr)
(321,if (!found)
(322,cmapent->cmptno)
(323,dec->bpcc)
(324,)
(325,dec->colr->data.colr.method)
(326,++i)
(327,i < dec->cdef->data.cdef.numchans)
(328,if (!dec->ihdr)
(329,dec->cmap)
(330,)
(331,dec)
(332,if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(jas_uint,\\n\\t\\t\\t  jas_image_numcmpts(dec->image)
(333,lutents)
(334,goto error;)
(335,jas_eprintf("warning: superfluous BPCC box\\n")
(336,data)
(337,)
(338,jas_eprintf("error: cannot get box\\n")
(339,pclrd->numlutents)
(340,dec->image)
(341,if (dec->bpcc)
(342,i)
(343,image)
(344,i)
(345,numchans)
(346,for (channo = 0; channo < cmapd->numchans; ++channo)
(347,image)
(348,cmptno)
(349,dec)
(350,jas_image_numcmpts(dec->image)
(351,dec->cdef->data)
(352,)
(353,0)
(354,i = 0)
(355,)
(356,)
(357,box)
(358,i < pclrd->numlutents)
(359,0)
(360,colr)
(361,dec)
(362,cmapent)
(363,cmap)
(364,pclrd->numlutents)
(365,dec->image)
(366,dec->cdef)
(367,samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
(368,)
(369,lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t)
(370,jas_eprintf("error: failed to parse ICC profile\\n")
(371,dec->ihdr->data.ihdr)
(372,goto error;)
(373,true)
(374,dec->chantocmptlut)
(375,i = 0)
(376,image)
(377,channo)
(378,cdef)
(379,)
(380,box)
(381,dec)
(382,)
(383,cmprof_)
(384,ihdr)
(385,newcmptno)
(386,data)
(387,dec->pclr = 0)
(388,JP2_IHDR_COMPTYPE)
(389,box = 0)
(390,dec->pclr)
(391,image)
(392,0)
(393,dec->ihdr)
(394,dec->cdef)
(395,i)
(396,iccprof)
(397,)
(398,jas_image_cmptdtype(dec->image, i)
(399,colr)
(400,dec->colr->data)
(401,icchdr)
(402,dec->bpcc->data.bpcc.numcmpts)
(403,jas_image_clrspc(dec->image)
(404,0)
(405,)
(406,box->data.jp.magic != JP2_JP_MAGIC)
(407,jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t)
(408,dec->image)
(409,dec->cmap->data.cmap.ents[i].pcol)
(410,++i)
(411,dec->image)
(412,0)
(413,dec)
(414,0)
(415,JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(416,image)
(417,"error: no memory\\n")
(418,jas_eprintf("warning: missing CMAP box or superfluous PCLR box\\n")
(419,box)
(420,"warning: number of components mismatch\\n")
(421,goto error;)
(422,jas_eprintf("ICC Profile CS %08x\\n", icchdr.colorspc)
(423,i)
(424,dec->cdef->data)
(425,jp2_getct(jas_image_clrspc(dec->image)
(426,dec->bpcc)
(427,)
(428,dec)
(429,dec->image)
(430,cdefent->assoc)
(431,dec->cdef)
(432,)
(433,data)
(434,iccprof)
(435,i)
(436,dec)
(437,numlutents)
(438,i - 1)
(439,dec)
(440,i)
(441,jp2_box_destroy(box)
(442,0)
(443,pclr)
(444,jas_image_numcmpts(dec->image)
(445,dec)
(446,cmapent)
(447,)
(448,cmap)
(449,lutents)
(450,dec)
(451,dec->ihdr->data)
(452,dec->image)
(453,data)
(454,!dec->pclr)
(455,dec->cdef->data.cdef)
(456,dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof)
(457,pclr)
(458,"error: invalid CMAP LUT index\\n")
(459,dec->cmap = 0)
(460,cmapent->pcol)
(461,&dec->cmap->data.cmap)
(462,numchans)
(463,0)
(464,dec->colr->data.colr)
(465,chantocmptlut)
(466,!dec->cmap)
(467,dec->cdef->data.cdef.numchans)
(468,assoc)
(469,ents)
(470,cdefent)
(471,1)
(472,dec)
(473,goto error;)
(474,dec->chantocmptlut)
(475,image)
(476,dec->colr)
(477,dec)
(478,!iccprof)
(479,dec)
(480,case JP2_BOX_JP2C:)
(481,pclrd->lutdata[cmapent->pcol + i * pclrd->numchans])
(482,dec->image->cmprof_)
(483,dec->chantocmptlut)
(484,dec->cmap)
(485,dec)
(486,if (!samedtype)
(487,dec)
(488,jas_eprintf("error: invalid MTYP in CMAP box\\n")
(489,dec->pclr->data)
(490,i < dec->numchans)
(491,if (dec->cdef)
(492,dec->ihdr->data.ihdr)
(493,dec->pclr)
(494,)
(495,image)
(496,)
(497,data)
(498,i)
(499,i)
(500,dec->image)
(501,)
(502,dec)
(503,dec->ihdr->data.ihdr.bpc)
(504,data)
(505,jp2_box_destroy(box)
(506,channo)
(507,JP2_DTYPETOBPC(dtype)
(508,)
(509,!dec->ihdr)
(510,ihdr)
(511,"warning: missing CMAP box or superfluous PCLR box\\n")
(512,box)
(513,i)
(514,for (i = 0; i < dec->numchans; ++i)
(515,switch (dec->colr->data.colr.method)
(516,lutents)
(517,jas_eprintf("error: invalid CMAP LUT index\\n")
(518,jas_image_delcmpt(dec->image, i - 1)
(519,box)
(520,colr)
(521,i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(522,dec->cmap)
(523,dec)
(524,dec->cmap->data.cmap.ents[i])
(525,)
(526,image)
(527,dec->pclr)
(528,chantocmptlut)
(529,cmapd->ents[channo])
(530,dec->ihdr->data)
(531,ihdr)
(532,cdefent)
(533,jp2_getcs(&dec->colr->data.colr)
(534,cdefd)
(535,jas_image_clrspc(dec->image)
(536,dec->cdef->data)
(537,i)
(538,image)
(539,cdef)
(540,type)
(541,i < dec->numchans)
(542,dec->cdef)
(543,)
(544,numlutents)
(545,lutents)
(546,image)
(547,dec)
(548,0)
(549,i)
(550,dec)
(551,if (dec->cmap && !dec->pclr)
(552,box->info->name)
(553,)
(554,data)
(555,&dec->pclr->data.pclr)
(556,dec)
(557,)
(558,0)
(559,dec->colr)
(560,jas_eprintf("warning: component data type mismatch\\n")
(561,box)
(562,cdefent->type)
(563,cmap)
(564,dec)
(565,for (i = 0; i < pclrd->numlutents; ++i)
(566,found = 0)
(567,dec)
(568,if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(jas_uint, jas_image_numcmpts(\\n\\t\\t  dec->image)
(569,dec->chantocmptlut)
(570,!(box = jp2_box_get(in)
(571,dec->ihdr)
(572,image)
(573,!jas_image_numcmpts(dec->image)
(574,break;)
(575,if (!dec->cmap)
(576,0)
(577,image)
(578,jas_eprintf("error: invalid channel number in CDEF box\\n")
(579,pclrd->lutdata)
(580,jp2_box_get(in)
(581,jp2_getct(jas_image_clrspc(dec->image)
(582,iccprof)
(583,cmap)
(584,newcmptno)
(585,jas_image_numcmpts(dec->image)
(586,dec->chantocmptlut[i])
(587,iccprof)
(588,cmapd->ents)
(589,dec->cmap)
(590,if (box->type != JP2_BOX_JP)
(591,case JP2_BOX_IHDR:)
(592,newcmptno = jas_image_numcmpts(dec->image)
(593,jas_eprintf("got box type %s\\n", box->info->name)
(594,channo = 0)
(595,!dec->cmap)
(596,dec->colr = box)
(597,ents)
(598,dec->ihdr->data)
(599,i = 0)
(600,++i)
(601,"expecting file type box\\n")
(602,dec->image)
(603,"error: cannot decode code stream\\n")
(604,case JP2_BOX_COLR:)
(605,)
(606,channo)
(607,--i)
(608,colr)
(609,samedtype)
(610,dec->colr->data)
(611,pclr)
(612,dec->pclr)
(613,ents)
(614,++i)
(615,dec)
(616,cmapd)
(617,pcol)
(618,jas_uint)
(619,if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
(620,dec)
(621,!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)
(622,ihdr)
(623,dec->image)
(624,"error: no COLR box\\n")
(625,if (dec->cmap->data.cmap.ents[i].pcol >=\\n\\t\\t\\t  dec->pclr->data.pclr.numchans)
(626,cmapent)
(627,colorspc)
(628,dec)
(629,dec)
(630,found)
(631,cdef)
(632,cdefd)
(633,i)
(634,JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(635,dec)
(636,image)
(637,i)
(638,"error: expecting signature box\\n")
(639,)
(640,box = 0)
(641,goto error;)
(642,dec)
(643,dec->image = 0)
(644,cmap)
(645,dec->cdef->data.cdef.ents[i].type)
(646,numchans)
(647,dec)
(648,samedtype)
(649,)
(650,dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo])
(651,dec)
(652,dec->cdef->data.cdef)
(653,if (!dec->ihdr)
(654,dec)
(655,channo)
(656,JP2_BOX_JP)
(657,JAS_CAST(jas_uint, jas_image_numcmpts(\\n\\t\\t  dec->image)
(658,dec)
(659,image)
(660,image = 0)
(661,iccp)
(662,bpc)
(663,dec->ihdr)
(664,if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans)
(665,jas_eprintf("error: no components\\n")
(666,)
(667,if (!jas_image_numcmpts(dec->image)
(668,dtype)
(669,break;)
(670,JP2_JP_MAGIC)
(671,)
(672,jp2_dec_create()
(673,0)
(674,goto error;)
(675,dec->numchans)
(676,i)
(677,if (!cdefent)
(678,cmptno)
(679,i)
(680,)
(681,image)
(682,dec->image)
(683,if (dec->ihdr->data.ihdr.numcmpts != JAS_CAST(jas_uint,\\n\\t  jas_image_numcmpts(dec->image)
(684,0)
(685,i)
(686,if (jas_image_cmpttype(dec->image, i - 1)
(687,jas_alloc2(dec->numchans,\\n\\t  sizeof(uint_fast16_t)
(688,cmapent = &cmapd->ents[channo])
(689,cmap)
(690,jp2_cdef_lookup(cdefd, channo)
(691,ents)
(692,dec->bpcc)
(693,cmap)
(694,box->type != JP2_BOX_JP)
(695,dec->chantocmptlut)
(696,dec->ihdr->data.ihdr.numcmpts != JAS_CAST(jas_uint,\\n\\t  jas_image_numcmpts(dec->image)
(697,if (!dec->colr)
(698,sizeof(uint_fast16_t)
(699,if (box->type != JP2_BOX_FTYP)
(700,image)
(701,colr)
(702,dec->cdef->data.cdef.ents[i])
(703,image)
(704,dec->cmap->data)
(705,dec->bpcc->data.bpcc)
(706,jas_image_clrspc(dec->image)
(707,dec->ihdr->data.ihdr.numcmpts)
(708,samedtype)
(709,"no of components is %d\\n")
(710,numchans)
(711,dec->cmap)
(712,break;)
(713,dec->chantocmptlut[channo])
(714,dec->bpcc->data.bpcc.bpcs[i])
(715,jas_uint)
(716,found)
(717,data)
(718,chantocmptlut)
(719,for (i = 1; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(720,box->type != JP2_BOX_FTYP)
(721,samedtype = false)
(722,numchans)
(723,dec->cdef->data.cdef.ents[i].channo)
(724,)
(725,i - 1)
(726,pclrd->numlutents)
(727,dec)
(728,jp2_getct(jas_image_clrspc(dec->image)
(729,image)
(730,!lutents)
(731,dec)
(732,pclr)
(733,box->type)
(734,!dec->bpcc)
(735,0)
(736,dec->cdef)
(737,dec->ihdr)
(738,lutents)
(739,dec)
(740,dec->chantocmptlut[channo] = channo)
(741,dec->pclr)
(742,jp2_box_destroy(box)
(743,dec->cmap && !dec->pclr)
(744,return 0;)
(745,box->type)
(746,)
(747,dec = jp2_dec_create()
(748,box)
(749,dec->cmap)
(750,jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN)
(751,)
(752,jas_image_cmptdtype(dec->image, 0)
(753,dec->cdef->data.cdef)
(754,bpc)
(755,i * pclrd->numchans)
(756,box = 0)
(757,JAS_CAST(jas_uint,\\n\\t\\t\\t  jas_image_numcmpts(dec->image)
(758,dec->bpcc)
(759,i)
(760,dec->cdef->data.cdef.ents)
(761,dec)
(762,dec->cmap)
(763,dec->cdef)
(764,0)
(765,break;)
(766,if (!dec->pclr)
(767,name)
(768,dec->pclr)
(769,dec)
(770,break;)
(771,image)
(772,i)
(773,case JP2_BOX_CMAP:)
(774,channo + 1)
(775,dec)
(776,dec->image->cmprof_)
(777,!jas_image_numcmpts(dec->image)
(778,jas_image_numcmpts(dec->image)
(779,jas_image_numcmpts(dec->image)
(780,pclrd)
(781,dtype)
(782,dec->chantocmptlut[i])
(783,channo)
(784,dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans :\\n\\t  JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(785,dec->bpcc = box)
(786,&icchdr)
(787,dec)
(788,jas_image_cmptdtype(dec->image, i)
(789,1)
(790,data)
(791,dec->ihdr->data.ihdr.comptype)
(792,data)
(793,"error: no code stream found\\n")
(794,dec->cdef)
(795,case JP2_COLR_ICC:)
(796,JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])
(797,dec->image)
(798,pclrd)
(799,cmap)
(800,"warning: number of components mismatch\\n")
(801,dec->cmap)
(802,box)
(803,jp2_box_get(in)
(804,dec->ihdr->data.ihdr.bpc)
(805,box->info)
(806,i > 0)
(807,ihdr)
(808,RET)
(809,dec->image)
(810,cmptno)
(811,i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(812,assoc)
(813,"error: no components\\n")
(814,dec)
(815,colr)
(816,JP2_BOX_FTYP)
(817,icchdr)
(818,dec)
(819,++i)
(820,cdef)
(821,"error: invalid component number in CMAP box\\n")
(822,dec)
(823,icchdr.colorspc)
(824,cdef)
(825,i)
(826,dec)
(827,dec->cmap)
(828,dec->cdef->data.cdef.ents[i].assoc)
(829,i)
(830,ihdr)
(831,goto error;)
(832,if (!iccprof)
(833,dec)
(834,dec)
(835,dec->colr->data)
(836,dec)
(837,for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(838,i < dec->numchans)
(839,i)
(840,goto error;)
(841,1)
(842,if (!(dec->chantocmptlut = jas_alloc2(dec->numchans,\\n\\t  sizeof(uint_fast16_t)
(843,image)
(844,image)
(845,box)
(846,dec->image)
(847,"ICC Profile CS %08x\\n")
(848,0)
(849,fromiccpcs(icchdr.colorspc)
(850,++channo)
(851,data)
(852,)
(853,jas_iccprof_destroy(iccprof)
(854,data)
(855,i)
(856,jas_uint)
(857,cmapent->map == JP2_CMAP_DIRECT)
(858,goto error;)
(859,!(dec = jp2_dec_create()
(860,dec)
(861,break;)
(862,cdef)
(863,ihdr)
(864,if (!dec->image->cmprof_)
(865,jas_getdbglevel()
(866,box)
(867,lutdata)
(868,0)
(869,dec)
(870,i)
(871,!pclrd->numlutents)
(872,dec)
(873,!dec->colr)
(874,cdef)
(875,colorspc)
(876,image)
(877,dec)
(878,cdef)
(879,pclrd->bpc[cmapent->pcol])
(880,)
(881,dec->ihdr = box)
(882,dec)
(883,numcmpts)
(884,"error: failed to parse ICC profile\\n")
(885,i = 0)
(886,box = jp2_box_get(in)
(887,)
(888,dec->cmap->data)
(889,dec->image)
(890,i)
(891,dec->ihdr->data)
(892,image)
(893,jas_eprintf("error: unsupported compression type\\n")
(894,lutents[i])
(895,i)
(896,box)
(897,dec->colr->data.colr.iccplen)
(898,jas_eprintf("error: no memory\\n")
(899,type)
(900,!(dec->chantocmptlut = jas_alloc2(dec->numchans,\\n\\t  sizeof(uint_fast16_t)
(901,jas_eprintf("error: no components\\n")
(902,jas_cmprof_createfromiccprof(iccprof)
(903,in)
(904,dec->cmap->data.cmap.ents[i].cmptno)
(905,)
(906,i = 0)
(907,jas_image_numcmpts(dec->image)
(908,jas_image_numcmpts(dec->image)
(909,)
(910,goto error;)
(911,cmapent->map == JP2_CMAP_PALETTE)
(912,box = jp2_box_get(in)
(913,numchans)
(914,jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr)
(915,dec->colr)
(916,0)
(917,jp2_box_destroy(box)
(918,dec)
(919,icchdr)
(920,dec->cdef->data.cdef.ents[i])
(921,if (dec->cdef)
(922,dec)
(923,bpcc)
(924,dec->cdef->data.cdef)
(925,if (dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE)
(926,i = 0)
(927,dec->image)
(928,i)
(929,dec)
(930,"warning: superfluous BPCC box\\n")
(931,data)
(932,dec)
(933,while ((box = jp2_box_get(in)
(934,)
(935,dec)
(936,dec)
(937,i)
(938,dec->image = jpc_decode(in, optstr)
(939,pclrd->numlutents)
(940,box = 0)
(941,data)
(942,image)
(943,iccprof)
(944,JP2_CMAP_DIRECT)
(945,dec)
(946,dec->colr->data)
(947,box)
(948,box)
(949,++i)
(950,0)
(951,dec->bpcc->data.bpcc)
(952,cdef)
(953,dec->bpcc)
(954,cmapent)
(955,numcmpts)
(956,numchans)
(957,!found)
(958,dec)
(959,dec)
(960,jas_iccprof_destroy(iccprof)
(961,image)
(962,jas_uint)
(963,if (!pclrd->numlutents)
(964,case JP2_BOX_BPCC:)
(965,dec)
(966,0)
(967,dec->cmap->data.cmap)
(968,goto error;)
(969,&dec->cdef->data.cdef)
(970,if (!dec->cmap && dec->pclr)
(971,i)
(972,JAS_CAST(jas_uint,\\n\\t  jas_image_numcmpts(dec->image)
(973,"incorrect magic number\\n")
(974,dec->numchans)
(975,numlutents)
(976,dec->numchans)
(977,dtype)
(978,colr)
(979,dec->image)
(980,dec->image)
(981,box = 0)
(982,dec->ihdr->data.ihdr)
(983,jas_eprintf("no of components is %d\\n", jas_image_numcmpts(dec->image)
(984,jas_image_numcmpts(dec->image)
(985,jas_image_cmpttype(dec->image, i - 1)
(986,dec->cmap->data.cmap.ents)
(987,dec->cmap)
(988,)
(989,dec)
(990,box)
(991,dec)
(992,box)
(993,dec->pclr)
(994,dec->cdef->data.cdef.ents[i])
(995,)
(996,cdefd = &dec->cdef->data.cdef)
(997,numchans)
(998,cmapent)
(999,ihdr)
(1000,channo < cmapd->numchans)
(1001,!dec->image->cmprof_)
(1002,dec->cdef->data.cdef)
(1003,cmapent)
(1004,i)
(1005,jp2_box_get(in)
(1006,for (i = 0; i < dec->numchans; ++i)
(1007,image)
(1008,)
(1009,dec->image)
(1010,jas_eprintf("error: invalid component number in CMAP box\\n")
(1011,pclrd)
(1012,pcol)
(1013,image)
(1014,i)
(1015,cdef)
(1016,dec)
(1017,)
(1018,dec)
(1019,i)
(1020,)
(1021,dec)
(1022,"error: invalid MTYP in CMAP box\\n")
(1023,i)
(1024,break;)
(1025,dec->bpcc->data)
(1026,cmap)
(1027,for (i = jas_image_numcmpts(dec->image)
(1028,dec->bpcc->data)
(1029,dec->numchans)
(1030,cdefent = jp2_cdef_lookup(cdefd, channo)
(1031,pclrd->bpc)
(1032,cdef)
(1033,bpcc)
(1034,goto error;)
(1035,data)
(1036,)
(1037,dec->colr->data.colr)
(1038,jas_uint)
(1039,dec->cmap->data.cmap)
(1040,box = 0)
(1041,)
(1042,colr)
(1043,sizeof(int_fast32_t)
(1044,data)
(1045,bpcc)
(1046,dec)
(1047,"error: unsupported compression type\\n")
(1048,image)
(1049,chantocmptlut)
(1050,0)
(1051,&cmapd->ents[channo])
(1052,channo)
(1053,JAS_IMAGE_CT_UNKNOWN)
(1054,i)
(1055,)
(1056,newcmptno)
(1057,goto error;)
(1058,)
(1059,)
(1060,++i)
(1061,found)
(1062,image)
(1063,pclrd)
(1064,optstr)
(1065,jp2_box_destroy(dec->pclr)
(1066,dec->pclr->data.pclr)
(1067,dec->colr->data.colr.iccp)
(1068,samedtype = true)
(1069,ents)
(1070,found)
(1071,data)
(1072,i)
(1073,)
(1074,data)
(1075,!dec->cdef)
(1076,box = jp2_box_get(in)
(1077,jas_image_numcmpts(\\n\\t\\t  dec->image)
(1078,dec->cmap->data.cmap.ents[i])
(1079,dec)
(1080,bpcc)
(1081,data)
(1082,dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE)
(1083,++i)
(1084,dec->cdef->data.cdef.ents[i].channo)
(1085,box->type)
(1086,image)
(1087,channo)
(1088,1)
(1089,)
(1090,cmapd)
(1091,!samedtype)
(1092,bpcc)
(1093,dec->image)
(1094,jas_eprintf("warning: missing PCLR box or superfluous CMAP box\\n")
(1095,cdefent)
(1096,0)
(1097,case JP2_BOX_CDEF:)
(1098,jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,\\n\\t\\t  dec->colr->data.colr.iccplen)
(1099,jp)
(1100,dec)
(1101,JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)
(1102,dec->numchans)
(1103,if (!dec->cmap)
(1104,1)
(1105,jas_eprintf("warning: number of components mismatch\\n")
(1106,box)
(1107,dec->pclr)
(1108,dec)
(1109,dec)
(1110,dec->cmap->data.cmap.numchans)
(1111,cmapd->numchans)
(1112,cmap)
(1113,dec->colr)
(1114,"warning: missing PCLR box or superfluous CMAP box\\n")
(1115,100)
(1116,ents)
(1117,numchans)
(1118,dec->cmap->data.cmap.ents)
(1119,jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image)
(1120,if (!dec->colr)
(1121,dec)
(1122,dec->ihdr->data.ihdr)
(1123,image)
(1124,pclrd)
(1125,dec->chantocmptlut[channo] = newcmptno)
(1126,cmap)
(1127,1)
(1128,type)
(1129,box)
(1130,dec->image)
(1131,)
(1132,break;)
(1133,dtype)
(1134,cmap)
(1135,goto error;)
(1136,goto error;)
(1137,cdef)
(1138,i)
(1139,)
(1140,i)
(1141,dec->cdef)
(1142,dec->cdef)
(1143,image)
(1144,dec->cdef->data.cdef)
(1145,box)
(1146,dec)
(1147,data)
(1148,jas_image_cmpttype(dec->image, i - 1)
(1149,jp2_box_destroy(dec->cmap)
(1150,box)
(1151,i)
(1152,pclr)
(1153,goto error;)
(1154,ihdr)
(1155,pclrd = &dec->pclr->data.pclr)
(1156,dec->chantocmptlut = jas_alloc2(dec->numchans,\\n\\t  sizeof(uint_fast16_t)
(1157,"error: missing IHDR box\\n")
(1158,goto error;)
(1159,dec)
(1160,box->data.jp)
(1161,samedtype)
(1162,box)
(1163,)
(1164,dtype = jas_image_cmptdtype(dec->image, 0)
(1165,dec)
(1166,numchans)
(1167,i + 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
