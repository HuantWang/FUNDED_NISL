-----label-----
1
-----code-----
static int jpc_dec_cp_setfromrgn(jpc_dec_cp_t *cp, jpc_rgn_t *rgn)
{
	jpc_dec_ccp_t *ccp;
	ccp = &cp->ccps[rgn->compno];
	ccp->roishift = rgn->roishift;
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
39,40
40,41
40,42
41,42
41,43
42,43
45,46
45,47
46,47
49,50
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,28,33,34,37,38,43,44,47,48,50
-----computeFrom-----
26,27
26,28
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int jpc_dec_cp_setfromrgn(jpc_dec_cp_t *cp, jpc_rgn_t *rgn){	jpc_dec_ccp_t *ccp;	ccp = &cp->ccps[rgn->compno];	ccp->roishift = rgn->roishift;	return 0;}
static int
jpc_dec_cp_setfromrgn(jpc_dec_cp_t *cp, jpc_rgn_t *rgn)
jpc_dec_cp_setfromrgn
jpc_dec_cp_t *cp
jpc_dec_cp_t
jpc_dec_cp_t
*cp
*
cp
jpc_rgn_t *rgn
jpc_rgn_t
jpc_rgn_t
*rgn
*
rgn
{	jpc_dec_ccp_t *ccp;	ccp = &cp->ccps[rgn->compno];	ccp->roishift = rgn->roishift;	return 0;}
jpc_dec_ccp_t *ccp;
jpc_dec_ccp_t *ccp;
jpc_dec_ccp_t
jpc_dec_ccp_t
*ccp
*
ccp
ccp = &cp->ccps[rgn->compno];
ccp = &cp->ccps[rgn->compno]
ccp
ccp
&cp->ccps[rgn->compno]
cp->ccps[rgn->compno]
cp->ccps
cp
cp
ccps
rgn->compno
rgn
rgn
compno
ccp->roishift = rgn->roishift;
ccp->roishift = rgn->roishift
ccp->roishift
ccp
ccp
roishift
rgn->roishift
rgn
rgn
roishift
return 0;
0
-----joern-----
(56,81,0)
(105,30,0)
(57,26,0)
(25,111,0)
(17,92,0)
(114,110,0)
(81,56,0)
(40,92,0)
(88,41,0)
(21,5,0)
(105,100,0)
(86,67,0)
(80,107,0)
(6,52,0)
(34,30,0)
(53,48,0)
(41,29,0)
(105,41,0)
(93,38,0)
(29,7,0)
(54,17,0)
(24,70,0)
(22,81,0)
(16,54,0)
(75,92,0)
(3,18,0)
(89,21,0)
(85,52,0)
(27,74,0)
(15,109,0)
(29,41,0)
(39,112,0)
(19,74,0)
(79,6,0)
(106,110,0)
(50,54,0)
(67,110,0)
(55,26,0)
(76,66,0)
(32,27,0)
(105,93,0)
(93,92,0)
(26,7,0)
(34,49,0)
(38,93,0)
(70,52,0)
(82,77,0)
(51,96,0)
(34,93,0)
(64,92,0)
(61,90,0)
(116,66,0)
(94,38,0)
(19,82,0)
(112,39,0)
(111,64,0)
(58,100,0)
(91,90,0)
(111,25,0)
(70,112,0)
(48,110,0)
(67,6,0)
(5,77,0)
(34,26,0)
(100,99,0)
(113,91,0)
(47,21,0)
(59,107,0)
(26,39,0)
(90,91,0)
(28,86,0)
(9,40,0)
(81,52,0)
(6,67,0)
(18,53,0)
(105,107,0)
(99,56,0)
(10,84,0)
(11,91,0)
(34,109,0)
(114,69,0)
(100,7,0)
(65,56,0)
(45,111,0)
(43,70,0)
(83,49,0)
(41,25,0)
(25,96,0)
(95,27,0)
(1,105,0)
(109,7,0)
(48,53,0)
(46,5,0)
(64,111,0)
(42,12,0)
(44,64,0)
(34,100,0)
(71,29,0)
(105,26,0)
(62,29,0)
(34,41,0)
(49,7,0)
(13,30,0)
(91,52,0)
(86,7,0)
(51,101,0)
(101,51,0)
(18,52,0)
(116,110,0)
(12,102,0)
(66,116,0)
(31,17,0)
(99,110,0)
(12,84,0)
(68,38,0)
(105,49,0)
(87,52,0)
(105,86,0)
(20,12,0)
(66,87,0)
(77,5,0)
(56,99,0)
(108,18,0)
(85,64,0)
(4,92,0)
(98,19,0)
(115,30,0)
(33,81,0)
(90,92,0)
(39,110,0)
(107,34,0)
(36,49,0)
(73,6,0)
(78,69,0)
(30,114,0)
(97,109,0)
(82,19,0)
(23,93,0)
(34,86,0)
(35,69,0)
(93,51,0)
(63,100,0)
(27,34,0)
(77,82,0)
(14,86,0)
(2,84,0)
(112,70,0)
(53,18,0)
(5,21,0)
(49,48,0)
(60,85,0)
(41,92,0)
(64,85,0)
(72,87,0)
(69,52,0)
(105,109,0)
(34,110,0)
(54,52,0)
(107,7,0)
(109,116,0)
(34,27,0)
(17,54,0)
(30,7,0)
(103,87,0)
(101,90,0)
(104,19,0)
(0,101,0)
(69,114,0)
(8,85,0)
(38,7,0)
(37,105,0)
(105,84,0)
(87,66,0)
(90,101,0)
(21,7,0)
(3,108,1)
(86,14,1)
(44,85,1)
(82,77,1)
(111,64,1)
(34,100,1)
(15,114,1)
(34,41,1)
(78,35,1)
(27,74,1)
(72,109,1)
(41,88,1)
(40,9,1)
(67,6,1)
(47,89,1)
(17,54,1)
(68,25,1)
(109,7,1)
(12,102,1)
(46,21,1)
(14,28,1)
(54,52,1)
(79,73,1)
(105,41,1)
(9,51,1)
(70,43,1)
(21,7,1)
(105,49,1)
(90,92,1)
(48,53,1)
(100,58,1)
(86,7,1)
(98,104,1)
(56,81,1)
(17,92,1)
(37,82,1)
(28,39,1)
(49,7,1)
(91,113,1)
(81,52,1)
(115,13,1)
(41,29,1)
(31,92,1)
(34,109,1)
(39,112,1)
(5,46,1)
(93,92,1)
(30,7,1)
(25,111,1)
(66,76,1)
(105,37,1)
(107,59,1)
(93,23,1)
(12,20,1)
(64,44,1)
(29,7,1)
(34,30,1)
(8,41,1)
(34,26,1)
(23,38,1)
(99,56,1)
(45,64,1)
(87,103,1)
(90,61,1)
(6,79,1)
(76,87,1)
(113,11,1)
(88,29,1)
(50,31,1)
(62,17,1)
(57,55,1)
(43,24,1)
(53,18,1)
(34,49,1)
(34,93,1)
(111,45,1)
(41,92,1)
(26,57,1)
(36,99,1)
(82,19,1)
(56,65,1)
(19,98,1)
(101,0,1)
(75,116,1)
(95,107,1)
(87,52,1)
(77,5,1)
(55,48,1)
(92,4,1)
(85,52,1)
(97,15,1)
(112,70,1)
(38,94,1)
(31,40,1)
(105,100,1)
(33,22,1)
(0,90,1)
(104,12,1)
(60,8,1)
(38,7,1)
(11,93,1)
(105,86,1)
(73,86,1)
(63,82,1)
(105,109,1)
(83,36,1)
(70,52,1)
(6,52,1)
(40,92,1)
(30,115,1)
(61,91,1)
(107,7,1)
(108,49,1)
(4,75,1)
(89,19,1)
(91,52,1)
(37,34,1)
(109,97,1)
(69,52,1)
(1,105,1)
(5,21,1)
(105,26,1)
(22,100,1)
(114,69,1)
(93,38,1)
(80,17,1)
(81,33,1)
(24,26,1)
(64,85,1)
(32,95,1)
(49,83,1)
(20,42,1)
(54,16,1)
(27,32,1)
(51,101,1)
(13,67,1)
(105,107,1)
(100,7,1)
(21,47,1)
(90,91,1)
(34,27,1)
(64,92,1)
(18,52,1)
(105,93,1)
(35,30,1)
(18,3,1)
(101,90,1)
(58,63,1)
(116,66,1)
(71,62,1)
(34,86,1)
(19,74,1)
(103,72,1)
(29,71,1)
(69,78,1)
(105,30,1)
(26,7,1)
(94,68,1)
(16,50,1)
(65,81,1)
(59,80,1)
(66,87,1)
(85,60,1)
(103,82,2)
(33,82,2)
(50,82,2)
(27,74,2)
(64,85,2)
(82,19,2)
(41,92,2)
(109,82,2)
(93,17,2)
(78,82,2)
(6,82,2)
(39,82,2)
(111,64,2)
(108,82,2)
(25,111,2)
(34,100,2)
(21,7,2)
(91,52,2)
(19,74,2)
(67,6,2)
(82,77,2)
(70,82,2)
(85,52,2)
(91,17,2)
(48,82,2)
(64,17,2)
(3,82,2)
(67,82,2)
(44,17,2)
(77,19,2)
(48,53,2)
(90,92,2)
(81,52,2)
(46,19,2)
(87,82,2)
(105,107,2)
(54,17,2)
(90,17,2)
(40,17,2)
(51,101,2)
(16,17,2)
(105,109,2)
(58,82,2)
(115,82,2)
(113,17,2)
(34,26,2)
(29,7,2)
(15,82,2)
(116,82,2)
(107,82,2)
(14,82,2)
(60,17,2)
(95,82,2)
(81,82,2)
(35,82,2)
(34,82,2)
(72,82,2)
(11,17,2)
(57,82,2)
(54,52,2)
(105,49,2)
(17,92,2)
(99,56,2)
(77,5,2)
(105,41,2)
(100,82,2)
(66,87,2)
(17,17,2)
(36,82,2)
(88,17,2)
(5,19,2)
(66,82,2)
(97,82,2)
(116,66,2)
(30,82,2)
(75,82,2)
(26,7,2)
(31,17,2)
(18,52,2)
(38,7,2)
(114,69,2)
(17,54,2)
(86,7,2)
(49,7,2)
(107,7,2)
(6,52,2)
(56,82,2)
(0,17,2)
(80,82,2)
(53,18,2)
(56,81,2)
(83,82,2)
(13,82,2)
(62,17,2)
(39,112,2)
(27,82,2)
(43,82,2)
(51,17,2)
(101,90,2)
(22,82,2)
(89,19,2)
(29,17,2)
(105,93,2)
(50,17,2)
(1,105,2)
(61,17,2)
(26,82,2)
(63,82,2)
(109,7,2)
(68,17,2)
(73,82,2)
(55,82,2)
(76,82,2)
(4,82,2)
(34,93,2)
(8,17,2)
(53,82,2)
(93,92,2)
(28,82,2)
(64,92,2)
(87,52,2)
(105,86,2)
(34,30,2)
(93,38,2)
(18,82,2)
(5,21,2)
(69,52,2)
(114,82,2)
(94,17,2)
(70,52,2)
(71,17,2)
(105,30,2)
(34,41,2)
(47,19,2)
(9,17,2)
(86,82,2)
(59,82,2)
(49,82,2)
(23,17,2)
(21,19,2)
(101,17,2)
(105,100,2)
(69,82,2)
(65,82,2)
(12,102,2)
(32,82,2)
(92,82,2)
(79,82,2)
(34,27,2)
(41,17,2)
(17,82,2)
(30,7,2)
(85,17,2)
(112,70,2)
(45,17,2)
(34,86,2)
(34,49,2)
(111,17,2)
(24,82,2)
(112,82,2)
(100,7,2)
(25,17,2)
(34,109,2)
(16,82,2)
(31,82,2)
(40,92,2)
(90,91,2)
(54,82,2)
(99,82,2)
(105,26,2)
(38,17,2)
(41,29,2)
-----------------------------------
(0,parheightval)
(1,RET)
(2,rlvlno)
(3,cblkwidthval)
(4,0)
(5,ccp->flags & JPC_COC)
(6,compparms->qmfbid)
(7,jpc_dec_ccp_t *ccp)
(8,compparms)
(9,rlvlno)
(10,if ((flags & JPC_COC)
(11,compparms)
(12,cp = 0)
(13,ccp)
(14,qmfbid)
(15,ccp)
(16,numrlvls)
(17,rlvlno < compparms->numrlvls)
(18,compparms->cblkwidthval)
(19,flags & JPC_COC)
(20,0)
(21,ccp->flags)
(22,compparms)
(23,rlvlno)
(24,compparms)
(25,ccp->prcwidthexpns[rlvlno] =\\n\\t\\t\\t  compparms->rlvls[rlvlno].parwidthval)
(26,ccp->cblkheightexpn)
(27,flags | JPC_CSET)
(28,ccp)
(29,ccp->prcwidthexpns)
(30,ccp->cblkctx)
(31,rlvlno)
(32,JPC_CSET)
(33,numdlvls)
(34,ccp->flags |= flags | JPC_CSET)
(35,compparms)
(36,ccp)
(37,0)
(38,ccp->prcheightexpns)
(39,ccp->cblkheightexpn = JPC_COX_GETCBLKSIZEEXPN(\\n\\t\\t  compparms->cblkheightval)
(40,++rlvlno)
(41,ccp->prcwidthexpns[rlvlno])
(42,cp)
(43,cblkheightval)
(44,rlvlno)
(45,parwidthval)
(46,JPC_COC)
(47,flags)
(48,ccp->cblkwidthexpn = JPC_COX_GETCBLKSIZEEXPN(\\n\\t\\t  compparms->cblkwidthval)
(49,ccp->cblkwidthexpn)
(50,compparms)
(51,ccp->prcheightexpns[rlvlno] =\\n\\t\\t\\t  compparms->rlvls[rlvlno].parheightval)
(52,jpc_coxcp_t *compparms)
(53,JPC_COX_GETCBLKSIZEEXPN(\\n\\t\\t  compparms->cblkwidthval)
(54,compparms->numrlvls)
(55,ccp)
(56,compparms->numdlvls + 1)
(57,cblkheightexpn)
(58,numrlvls)
(59,flags)
(60,rlvls)
(61,rlvlno)
(62,ccp)
(63,ccp)
(64,compparms->rlvls[rlvlno])
(65,1)
(66,compparms->csty & JPC_COX_PRT)
(67,ccp->qmfbid = compparms->qmfbid)
(68,ccp)
(69,compparms->cblksty)
(70,compparms->cblkheightval)
(71,prcwidthexpns)
(72,compparms)
(73,compparms)
(74,int flags)
(75,rlvlno)
(76,JPC_COX_PRT)
(77,!(ccp->flags & JPC_COC)
(78,cblksty)
(79,qmfbid)
(80,ccp)
(81,compparms->numdlvls)
(82,(flags & JPC_COC)
(83,cblkwidthexpn)
(84,)
(85,compparms->rlvls)
(86,ccp->qmfbid)
(87,compparms->csty)
(88,rlvlno)
(89,ccp)
(90,compparms->rlvls[rlvlno])
(91,compparms->rlvls)
(92,rlvlno = 0)
(93,ccp->prcheightexpns[rlvlno])
(94,prcheightexpns)
(95,flags)
(96,)
(97,csty)
(98,JPC_COC)
(99,ccp->numrlvls = compparms->numdlvls + 1)
(100,ccp->numrlvls)
(101,compparms->rlvls[rlvlno].parheightval)
(102,jpc_dec_cp_t *cp)
(103,csty)
(104,flags)
(105,return 0;)
(106,for (rlvlno = 0; rlvlno < compparms->numrlvls; ++rlvlno)
(107,ccp->flags)
(108,compparms)
(109,ccp->csty)
(110,)
(111,compparms->rlvls[rlvlno].parwidthval)
(112,JPC_COX_GETCBLKSIZEEXPN(\\n\\t\\t  compparms->cblkheightval)
(113,rlvls)
(114,ccp->cblkctx = compparms->cblksty)
(115,cblkctx)
(116,ccp->csty = compparms->csty & JPC_COX_PRT)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
