-----label-----
1
-----code-----
void jpc_iict(jas_matrix_t *c0, jas_matrix_t *c1, jas_matrix_t *c2)
{
	int numrows;
	int numcols;
	int i;
	int j;
	jpc_fix_t r;
	jpc_fix_t g;
	jpc_fix_t b;
	jpc_fix_t y;
	jpc_fix_t u;
	jpc_fix_t v;
	jpc_fix_t *c0p;
	jpc_fix_t *c1p;
	jpc_fix_t *c2p;

	numrows = jas_matrix_numrows(c0);
	assert(jas_matrix_numrows(c1) == numrows && jas_matrix_numrows(c2) == numrows);
	numcols = jas_matrix_numcols(c0);
	assert(jas_matrix_numcols(c1) == numcols && jas_matrix_numcols(c2) == numcols);
	for (i = 0; i < numrows; ++i) {
		c0p = jas_matrix_getref(c0, i, 0);
		c1p = jas_matrix_getref(c1, i, 0);
		c2p = jas_matrix_getref(c2, i, 0);
		for (j = numcols; j > 0; --j) {
			y = *c0p;
			u = *c1p;
			v = *c2p;
			r = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402), v));
			g = jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413), u),
			  jpc_fix_mul(jpc_dbltofix(-0.71414), v));
			b = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772), u));
			*c0p++ = r;
			*c1p++ = g;
			*c2p++ = b;
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
23,35
23,36
23,37
23,38
23,39
23,40
23,41
24,25
25,26
25,27
27,28
29,30
30,31
30,32
32,33
34,35
35,36
35,37
37,38
39,40
40,41
40,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
84,86
87,88
88,89
88,90
89,90
91,92
91,93
94,95
95,96
95,97
96,97
98,99
98,100
101,102
102,103
102,104
103,104
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
114,116
115,116
115,117
116,117
116,118
117,118
119,120
121,122
123,124
123,125
124,125
124,126
125,126
127,128
129,130
131,132
132,133
132,134
133,134
135,136
135,137
136,137
138,139
140,141
141,142
141,143
142,143
144,145
144,146
145,146
145,147
146,147
146,148
147,148
149,150
151,152
153,154
153,155
154,155
154,156
155,156
157,158
159,160
161,162
161,163
161,164
161,165
162,163
163,164
163,165
164,165
167,168
167,169
168,169
170,171
172,173
173,174
175,176
175,177
175,178
175,179
176,177
177,178
177,179
178,179
180,181
180,182
180,183
180,184
181,182
183,184
185,186
188,189
189,190
189,191
190,191
192,193
192,194
192,195
192,196
193,194
195,196
197,198
200,201
201,202
201,203
202,203
204,205
204,206
204,207
204,208
205,206
207,208
209,210
212,213
212,214
212,215
212,216
213,214
214,215
214,216
215,216
217,218
219,220
219,221
220,221
223,224
224,225
226,227
226,228
226,229
226,230
226,231
226,232
226,233
226,234
226,235
227,228
228,229
228,230
229,230
231,232
232,233
234,235
235,236
235,237
236,237
238,239
239,240
241,242
242,243
242,244
243,244
245,246
246,247
248,249
249,250
249,251
250,251
252,253
252,254
252,255
253,254
255,256
257,258
257,259
257,260
258,259
260,261
260,262
261,262
264,265
266,267
267,268
267,269
268,269
270,271
270,272
270,273
270,274
271,272
273,274
275,276
275,277
275,278
276,277
278,279
278,280
279,280
281,282
283,284
285,286
285,287
285,288
286,287
288,289
288,290
289,290
291,292
293,294
295,296
296,297
296,298
297,298
299,300
299,301
299,302
300,301
302,303
304,305
304,306
304,307
305,306
307,308
307,309
308,309
311,312
313,314
314,315
314,316
315,316
316,317
317,318
319,320
321,322
322,323
322,324
323,324
324,325
325,326
327,328
329,330
330,331
330,332
331,332
332,333
333,334
335,336
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,26,28,31,33,36,38,41,43,47,49,53,55,59,61,65,67,71,73,77,79,83,85,86,90,92,93,97,99,100,104,107,109,113,118,120,122,126,128,130,134,137,139,143,148,150,152,156,158,160,165,166,169,171,174,179,182,184,186,187,191,194,196,198,199,203,206,208,210,211,216,218,221,222,225,230,233,237,240,244,247,251,254,256,259,262,263,265,269,272,274,277,280,282,284,287,290,292,294,298,301,303,306,309,310,312,318,320,326,328,334,336
-----computeFrom-----
102,103
102,104
114,115
114,116
115,116
115,117
123,124
123,125
132,133
132,134
144,145
144,146
145,146
145,147
153,154
153,155
163,164
163,165
167,168
167,169
177,178
177,179
189,190
189,191
201,202
201,203
214,215
214,216
219,220
219,221
228,229
228,230
235,236
235,237
242,243
242,244
249,250
249,251
267,268
267,269
296,297
296,298
314,315
314,316
322,323
322,324
330,331
330,332
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void jpc_iict(jas_matrix_t *c0, jas_matrix_t *c1, jas_matrix_t *c2){	int numrows;	int numcols;	int i;	int j;	jpc_fix_t r;	jpc_fix_t g;	jpc_fix_t b;	jpc_fix_t y;	jpc_fix_t u;	jpc_fix_t v;	jpc_fix_t *c0p;	jpc_fix_t *c1p;	jpc_fix_t *c2p;	numrows = jas_matrix_numrows(c0);	assert(jas_matrix_numrows(c1) == numrows && jas_matrix_numrows(c2) == numrows);	numcols = jas_matrix_numcols(c0);	assert(jas_matrix_numcols(c1) == numcols && jas_matrix_numcols(c2) == numcols);	for (i = 0; i < numrows; ++i) {		c0p = jas_matrix_getref(c0, i, 0);		c1p = jas_matrix_getref(c1, i, 0);		c2p = jas_matrix_getref(c2, i, 0);		for (j = numcols; j > 0; --j) {			y = *c0p;			u = *c1p;			v = *c2p;			r = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402), v));			g = jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413), u),			  jpc_fix_mul(jpc_dbltofix(-0.71414), v));			b = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772), u));			*c0p++ = r;			*c1p++ = g;			*c2p++ = b;		}	}}
void
jpc_iict(jas_matrix_t *c0, jas_matrix_t *c1, jas_matrix_t *c2)
jpc_iict
jas_matrix_t *c0
jas_matrix_t
jas_matrix_t
*c0
*
c0
jas_matrix_t *c1
jas_matrix_t
jas_matrix_t
*c1
*
c1
jas_matrix_t *c2
jas_matrix_t
jas_matrix_t
*c2
*
c2
{	int numrows;	int numcols;	int i;	int j;	jpc_fix_t r;	jpc_fix_t g;	jpc_fix_t b;	jpc_fix_t y;	jpc_fix_t u;	jpc_fix_t v;	jpc_fix_t *c0p;	jpc_fix_t *c1p;	jpc_fix_t *c2p;	numrows = jas_matrix_numrows(c0);	assert(jas_matrix_numrows(c1) == numrows && jas_matrix_numrows(c2) == numrows);	numcols = jas_matrix_numcols(c0);	assert(jas_matrix_numcols(c1) == numcols && jas_matrix_numcols(c2) == numcols);	for (i = 0; i < numrows; ++i) {		c0p = jas_matrix_getref(c0, i, 0);		c1p = jas_matrix_getref(c1, i, 0);		c2p = jas_matrix_getref(c2, i, 0);		for (j = numcols; j > 0; --j) {			y = *c0p;			u = *c1p;			v = *c2p;			r = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402), v));			g = jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413), u),			  jpc_fix_mul(jpc_dbltofix(-0.71414), v));			b = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772), u));			*c0p++ = r;			*c1p++ = g;			*c2p++ = b;		}	}}
int numrows;
int numrows;
int
numrows
numrows
int numcols;
int numcols;
int
numcols
numcols
int i;
int i;
int
i
i
int j;
int j;
int
j
j
jpc_fix_t r;
jpc_fix_t r;
jpc_fix_t
jpc_fix_t
r
r
jpc_fix_t g;
jpc_fix_t g;
jpc_fix_t
jpc_fix_t
g
g
jpc_fix_t b;
jpc_fix_t b;
jpc_fix_t
jpc_fix_t
b
b
jpc_fix_t y;
jpc_fix_t y;
jpc_fix_t
jpc_fix_t
y
y
jpc_fix_t u;
jpc_fix_t u;
jpc_fix_t
jpc_fix_t
u
u
jpc_fix_t v;
jpc_fix_t v;
jpc_fix_t
jpc_fix_t
v
v
jpc_fix_t *c0p;
jpc_fix_t *c0p;
jpc_fix_t
jpc_fix_t
*c0p
*
c0p
jpc_fix_t *c1p;
jpc_fix_t *c1p;
jpc_fix_t
jpc_fix_t
*c1p
*
c1p
jpc_fix_t *c2p;
jpc_fix_t *c2p;
jpc_fix_t
jpc_fix_t
*c2p
*
c2p
numrows = jas_matrix_numrows(c0);
numrows = jas_matrix_numrows(c0)
numrows
numrows
jas_matrix_numrows(c0)
jas_matrix_numrows
jas_matrix_numrows
c0
c0
assert(jas_matrix_numrows(c1) == numrows && jas_matrix_numrows(c2) == numrows);
assert(jas_matrix_numrows(c1) == numrows && jas_matrix_numrows(c2) == numrows)
assert
assert
jas_matrix_numrows(c1) == numrows && jas_matrix_numrows(c2) == numrows
jas_matrix_numrows(c1) == numrows
jas_matrix_numrows(c1)
jas_matrix_numrows
jas_matrix_numrows
c1
c1
numrows
numrows
jas_matrix_numrows(c2) == numrows
jas_matrix_numrows(c2)
jas_matrix_numrows
jas_matrix_numrows
c2
c2
numrows
numrows
numcols = jas_matrix_numcols(c0);
numcols = jas_matrix_numcols(c0)
numcols
numcols
jas_matrix_numcols(c0)
jas_matrix_numcols
jas_matrix_numcols
c0
c0
assert(jas_matrix_numcols(c1) == numcols && jas_matrix_numcols(c2) == numcols);
assert(jas_matrix_numcols(c1) == numcols && jas_matrix_numcols(c2) == numcols)
assert
assert
jas_matrix_numcols(c1) == numcols && jas_matrix_numcols(c2) == numcols
jas_matrix_numcols(c1) == numcols
jas_matrix_numcols(c1)
jas_matrix_numcols
jas_matrix_numcols
c1
c1
numcols
numcols
jas_matrix_numcols(c2) == numcols
jas_matrix_numcols(c2)
jas_matrix_numcols
jas_matrix_numcols
c2
c2
numcols
numcols
for (i = 0; i < numrows; ++i) {		c0p = jas_matrix_getref(c0, i, 0);		c1p = jas_matrix_getref(c1, i, 0);		c2p = jas_matrix_getref(c2, i, 0);		for (j = numcols; j > 0; --j) {			y = *c0p;			u = *c1p;			v = *c2p;			r = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402), v));			g = jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413), u),			  jpc_fix_mul(jpc_dbltofix(-0.71414), v));			b = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772), u));			*c0p++ = r;			*c1p++ = g;			*c2p++ = b;		}	}
i = 0;
i = 0
i
i
0
i < numrows
i
i
numrows
numrows
++i
i
i
{		c0p = jas_matrix_getref(c0, i, 0);		c1p = jas_matrix_getref(c1, i, 0);		c2p = jas_matrix_getref(c2, i, 0);		for (j = numcols; j > 0; --j) {			y = *c0p;			u = *c1p;			v = *c2p;			r = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402), v));			g = jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413), u),			  jpc_fix_mul(jpc_dbltofix(-0.71414), v));			b = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772), u));			*c0p++ = r;			*c1p++ = g;			*c2p++ = b;		}	}
c0p = jas_matrix_getref(c0, i, 0);
c0p = jas_matrix_getref(c0, i, 0)
c0p
c0p
jas_matrix_getref(c0, i, 0)
jas_matrix_getref
jas_matrix_getref
c0
c0
i
i
0
c1p = jas_matrix_getref(c1, i, 0);
c1p = jas_matrix_getref(c1, i, 0)
c1p
c1p
jas_matrix_getref(c1, i, 0)
jas_matrix_getref
jas_matrix_getref
c1
c1
i
i
0
c2p = jas_matrix_getref(c2, i, 0);
c2p = jas_matrix_getref(c2, i, 0)
c2p
c2p
jas_matrix_getref(c2, i, 0)
jas_matrix_getref
jas_matrix_getref
c2
c2
i
i
0
for (j = numcols; j > 0; --j) {			y = *c0p;			u = *c1p;			v = *c2p;			r = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402), v));			g = jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413), u),			  jpc_fix_mul(jpc_dbltofix(-0.71414), v));			b = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772), u));			*c0p++ = r;			*c1p++ = g;			*c2p++ = b;		}
j = numcols;
j = numcols
j
j
numcols
numcols
j > 0
j
j
0
--j
j
j
{			y = *c0p;			u = *c1p;			v = *c2p;			r = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402), v));			g = jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413), u),			  jpc_fix_mul(jpc_dbltofix(-0.71414), v));			b = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772), u));			*c0p++ = r;			*c1p++ = g;			*c2p++ = b;		}
y = *c0p;
y = *c0p
y
y
*c0p
c0p
c0p
u = *c1p;
u = *c1p
u
u
*c1p
c1p
c1p
v = *c2p;
v = *c2p
v
v
*c2p
c2p
c2p
r = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402), v));
r = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402), v))
r
r
jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402), v))
jpc_fix_add
jpc_fix_add
y
y
jpc_fix_mul(jpc_dbltofix(1.402), v)
jpc_fix_mul
jpc_fix_mul
jpc_dbltofix(1.402)
jpc_dbltofix
jpc_dbltofix
1.402
v
v
g = jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413), u),			  jpc_fix_mul(jpc_dbltofix(-0.71414), v));
g = jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413), u),			  jpc_fix_mul(jpc_dbltofix(-0.71414), v))
g
g
jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413), u),			  jpc_fix_mul(jpc_dbltofix(-0.71414), v))
jpc_fix_add3
jpc_fix_add3
y
y
jpc_fix_mul(jpc_dbltofix(-0.34413), u)
jpc_fix_mul
jpc_fix_mul
jpc_dbltofix(-0.34413)
jpc_dbltofix
jpc_dbltofix
-0.34413
0.34413
u
u
jpc_fix_mul(jpc_dbltofix(-0.71414), v)
jpc_fix_mul
jpc_fix_mul
jpc_dbltofix(-0.71414)
jpc_dbltofix
jpc_dbltofix
-0.71414
0.71414
v
v
b = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772), u));
b = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772), u))
b
b
jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772), u))
jpc_fix_add
jpc_fix_add
y
y
jpc_fix_mul(jpc_dbltofix(1.772), u)
jpc_fix_mul
jpc_fix_mul
jpc_dbltofix(1.772)
jpc_dbltofix
jpc_dbltofix
1.772
u
u
*c0p++ = r;
*c0p++ = r
*c0p++
c0p++
c0p
c0p
r
r
*c1p++ = g;
*c1p++ = g
*c1p++
c1p++
c1p
c1p
g
g
*c2p++ = b;
*c2p++ = b
*c2p++
c2p++
c2p
c2p
b
b
-----joern-----
(43,46,0)
(83,36,0)
(31,74,0)
(13,2,0)
(19,43,0)
(56,134,0)
(107,113,0)
(77,134,0)
(32,88,0)
(53,96,0)
(97,57,0)
(100,10,0)
(87,13,0)
(98,46,0)
(67,49,0)
(92,22,0)
(6,32,0)
(75,92,0)
(106,99,0)
(138,52,0)
(26,90,0)
(78,16,0)
(41,15,0)
(56,67,0)
(30,4,0)
(9,90,0)
(64,36,0)
(22,30,0)
(5,127,0)
(15,49,0)
(86,29,0)
(96,53,0)
(105,109,0)
(132,49,0)
(68,69,0)
(74,38,0)
(134,56,0)
(38,60,0)
(3,123,0)
(123,3,0)
(126,95,0)
(57,97,0)
(30,36,0)
(79,69,0)
(90,60,0)
(133,119,0)
(82,51,0)
(128,24,0)
(115,27,0)
(16,92,0)
(43,36,0)
(99,36,0)
(7,88,0)
(26,104,0)
(69,87,0)
(53,60,0)
(119,36,0)
(3,53,0)
(136,2,0)
(63,9,0)
(119,1,0)
(135,115,0)
(59,119,0)
(25,34,0)
(32,105,0)
(90,9,0)
(9,16,0)
(31,49,0)
(112,26,0)
(20,53,0)
(134,59,0)
(59,42,0)
(105,27,0)
(29,86,0)
(10,60,0)
(139,44,0)
(17,51,0)
(127,13,0)
(29,2,0)
(92,16,0)
(23,99,0)
(113,73,0)
(80,98,0)
(17,31,0)
(0,118,0)
(52,71,0)
(62,38,0)
(53,3,0)
(3,132,0)
(15,96,0)
(73,16,0)
(117,104,0)
(97,22,0)
(118,12,0)
(88,2,0)
(118,13,0)
(38,74,0)
(84,123,0)
(128,86,0)
(67,95,0)
(116,2,0)
(48,2,0)
(89,2,0)
(119,59,0)
(50,2,0)
(44,87,0)
(13,127,0)
(120,30,0)
(101,22,0)
(24,128,0)
(12,118,0)
(61,67,0)
(19,42,0)
(6,1,0)
(18,128,0)
(35,42,0)
(26,132,0)
(128,13,0)
(108,2,0)
(118,86,0)
(40,87,0)
(65,87,0)
(38,73,0)
(72,117,0)
(104,117,0)
(71,9,0)
(58,74,0)
(127,46,0)
(130,12,0)
(24,1,0)
(30,22,0)
(115,4,0)
(96,49,0)
(85,64,0)
(109,105,0)
(124,43,0)
(121,2,0)
(103,2,0)
(60,49,0)
(12,4,0)
(39,60,0)
(125,32,0)
(122,27,0)
(111,6,0)
(95,90,0)
(104,26,0)
(76,19,0)
(74,49,0)
(66,96,0)
(129,97,0)
(34,132,0)
(109,2,0)
(54,3,0)
(98,88,0)
(32,6,0)
(73,113,0)
(71,52,0)
(51,19,0)
(57,15,0)
(95,49,0)
(90,95,0)
(140,2,0)
(91,119,0)
(70,30,0)
(86,128,0)
(55,59,0)
(21,73,0)
(10,19,0)
(9,71,0)
(33,13,0)
(47,24,0)
(93,2,0)
(102,2,0)
(51,17,0)
(27,115,0)
(137,43,0)
(11,31,0)
(114,2,0)
(43,19,0)
(28,119,0)
(8,2,0)
(22,42,0)
(34,59,0)
(81,132,0)
(14,2,0)
(105,32,0)
(37,30,0)
(73,38,0)
(131,36,0)
(27,105,0)
(90,26,0)
(88,98,0)
(94,90,0)
(60,10,0)
(132,34,0)
(86,118,0)
(27,88,0)
(16,49,0)
(99,88,0)
(45,43,0)
(78,132,1)
(68,87,1)
(85,69,1)
(32,6,1)
(97,22,1)
(10,100,1)
(127,46,1)
(34,25,1)
(23,36,1)
(41,57,1)
(64,85,1)
(90,60,1)
(6,111,1)
(138,26,1)
(67,61,1)
(96,53,1)
(117,72,1)
(26,132,1)
(30,36,1)
(129,67,1)
(81,60,1)
(26,112,1)
(11,17,1)
(9,71,1)
(63,71,1)
(40,65,1)
(123,84,1)
(127,5,1)
(55,19,1)
(112,104,1)
(98,80,1)
(51,19,1)
(107,62,1)
(139,15,1)
(97,129,1)
(124,45,1)
(95,90,1)
(74,38,1)
(24,47,1)
(73,21,1)
(128,18,1)
(12,4,1)
(20,66,1)
(56,134,1)
(111,88,1)
(80,7,1)
(113,107,1)
(36,131,1)
(73,113,1)
(34,59,1)
(25,81,1)
(118,13,1)
(76,99,1)
(122,115,1)
(16,92,1)
(27,115,1)
(75,78,1)
(90,9,1)
(23,64,1)
(9,63,1)
(71,52,1)
(39,69,1)
(91,55,1)
(84,20,1)
(21,113,1)
(69,79,1)
(128,24,1)
(118,0,1)
(24,1,1)
(105,27,1)
(44,87,1)
(119,1,1)
(131,83,1)
(18,24,1)
(33,109,1)
(109,105,1)
(68,44,1)
(128,13,1)
(70,37,1)
(3,123,1)
(37,101,1)
(86,118,1)
(12,130,1)
(15,96,1)
(66,95,1)
(88,98,1)
(69,87,1)
(134,77,1)
(99,88,1)
(105,32,1)
(132,34,1)
(94,126,1)
(119,28,1)
(51,82,1)
(9,16,1)
(104,117,1)
(47,13,1)
(125,6,1)
(22,30,1)
(64,36,1)
(87,40,1)
(118,12,1)
(101,59,1)
(43,46,1)
(77,31,1)
(27,122,1)
(31,74,1)
(43,124,1)
(130,128,1)
(115,4,1)
(53,60,1)
(92,75,1)
(137,76,1)
(3,132,1)
(87,13,1)
(110,99,1)
(53,3,1)
(72,94,1)
(57,97,1)
(54,123,1)
(135,32,1)
(28,133,1)
(73,16,1)
(82,96,1)
(99,106,1)
(30,120,1)
(15,41,1)
(59,119,1)
(0,12,1)
(5,33,1)
(32,125,1)
(62,58,1)
(67,95,1)
(27,88,1)
(17,51,1)
(32,88,1)
(29,86,1)
(61,56,1)
(3,54,1)
(65,22,1)
(45,137,1)
(115,135,1)
(100,39,1)
(44,139,1)
(79,68,1)
(10,19,1)
(26,104,1)
(120,70,1)
(106,23,1)
(134,59,1)
(31,11,1)
(133,91,1)
(6,1,1)
(30,4,1)
(43,36,1)
(92,22,1)
(98,46,1)
(126,74,1)
(52,138,1)
(99,36,1)
(60,10,1)
(90,26,1)
(19,43,1)
(38,73,1)
(86,128,1)
(13,127,1)
(58,16,1)
(83,29,1)
(38,60,1)
(119,36,1)
(20,69,2)
(43,36,2)
(101,99,2)
(15,69,2)
(139,69,2)
(58,69,2)
(73,16,2)
(9,16,2)
(26,132,2)
(0,128,2)
(128,13,2)
(115,32,2)
(95,90,2)
(82,69,2)
(31,69,2)
(98,46,2)
(53,3,2)
(19,43,2)
(39,69,2)
(25,69,2)
(95,69,2)
(11,69,2)
(19,99,2)
(3,123,2)
(126,69,2)
(85,99,2)
(92,22,2)
(115,4,2)
(26,104,2)
(86,118,2)
(27,32,2)
(57,97,2)
(107,69,2)
(97,22,2)
(134,69,2)
(26,69,2)
(64,99,2)
(123,69,2)
(73,113,2)
(74,69,2)
(30,36,2)
(38,60,2)
(53,69,2)
(37,99,2)
(87,99,2)
(53,60,2)
(94,69,2)
(134,59,2)
(90,26,2)
(135,32,2)
(79,99,2)
(17,51,2)
(120,99,2)
(112,69,2)
(15,96,2)
(24,1,2)
(60,10,2)
(54,69,2)
(78,69,2)
(119,99,2)
(86,128,2)
(44,69,2)
(67,69,2)
(61,69,2)
(96,53,2)
(130,128,2)
(104,117,2)
(29,86,2)
(100,69,2)
(27,115,2)
(88,98,2)
(9,71,2)
(40,99,2)
(99,99,2)
(59,99,2)
(52,69,2)
(12,128,2)
(16,92,2)
(90,69,2)
(138,69,2)
(27,88,2)
(60,69,2)
(127,46,2)
(56,134,2)
(69,69,2)
(62,69,2)
(32,6,2)
(22,99,2)
(76,99,2)
(63,69,2)
(34,69,2)
(72,69,2)
(99,36,2)
(137,99,2)
(71,52,2)
(133,99,2)
(38,69,2)
(124,99,2)
(106,99,2)
(66,69,2)
(30,4,2)
(118,13,2)
(119,1,2)
(71,69,2)
(118,12,2)
(23,99,2)
(84,69,2)
(132,34,2)
(74,38,2)
(10,19,2)
(44,87,2)
(90,9,2)
(105,27,2)
(77,69,2)
(57,69,2)
(59,119,2)
(99,88,2)
(10,69,2)
(96,69,2)
(118,128,2)
(6,1,2)
(17,69,2)
(81,69,2)
(128,24,2)
(122,32,2)
(104,69,2)
(41,69,2)
(91,99,2)
(32,88,2)
(16,69,2)
(43,99,2)
(67,95,2)
(22,30,2)
(28,99,2)
(90,60,2)
(9,69,2)
(21,69,2)
(31,74,2)
(45,99,2)
(3,132,2)
(92,69,2)
(70,99,2)
(3,69,2)
(69,99,2)
(55,99,2)
(56,69,2)
(69,87,2)
(51,69,2)
(119,36,2)
(129,69,2)
(79,69,2)
(105,32,2)
(65,99,2)
(30,99,2)
(64,36,2)
(68,99,2)
(43,46,2)
(73,69,2)
(12,4,2)
(75,69,2)
(51,19,2)
(113,69,2)
(34,59,2)
(97,69,2)
(87,13,2)
(13,127,2)
(38,73,2)
(132,69,2)
(117,69,2)
(109,105,2)
(68,69,2)
-----------------------------------
(0,numcols)
(1,jas_matrix_t *c1)
(2,)
(3,jpc_fix_mul(jpc_dbltofix(1.772)
(4,jas_matrix_t *c2)
(5,c0)
(6,jas_matrix_numrows(c1)
(7,numrows)
(8,numcols)
(9,jpc_fix_mul(jpc_dbltofix(-0.71414)
(10,*c0p)
(11,r)
(12,jas_matrix_numcols(c2)
(13,numcols = jas_matrix_numcols(c0)
(14,r)
(15,*c2p++ = b)
(16,v = *c2p)
(17,*c0p++)
(18,numcols)
(19,c0p = jas_matrix_getref(c0, i, 0)
(20,y)
(21,v)
(22,c2p = jas_matrix_getref(c2, i, 0)
(23,i)
(24,jas_matrix_numcols(c1)
(25,c1p)
(26,jpc_fix_mul(jpc_dbltofix(-0.34413)
(27,jas_matrix_numrows(c2)
(28,0)
(29,assert(jas_matrix_numcols(c1)
(30,jas_matrix_getref(c2, i, 0)
(31,*c0p++ = r)
(32,jas_matrix_numrows(c1)
(33,numcols)
(34,*c1p)
(35,for (j = numcols; j > 0; --j)
(36,i = 0)
(37,c2)
(38,jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402)
(39,y)
(40,numcols)
(41,b)
(42,)
(43,jas_matrix_getref(c0, i, 0)
(44,--j)
(45,i)
(46,jas_matrix_t *c0)
(47,c1)
(48,c0p)
(49,)
(50,c2p)
(51,c0p++)
(52,-0.71414)
(53,jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772)
(54,u)
(55,c1p)
(56,*c1p++)
(57,*c2p++)
(58,r)
(59,c1p = jas_matrix_getref(c1, i, 0)
(60,y = *c0p)
(61,g)
(62,y)
(63,v)
(64,++i)
(65,j)
(66,b)
(67,*c1p++ = g)
(68,j)
(69,j > 0)
(70,i)
(71,jpc_dbltofix(-0.71414)
(72,0.34413)
(73,jpc_fix_mul(jpc_dbltofix(1.402)
(74,r = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.402)
(75,c2p)
(76,c0p)
(77,c1p)
(78,v)
(79,0)
(80,c0)
(81,u)
(82,c0p)
(83,i)
(84,1.772)
(85,i)
(86,jas_matrix_numcols(c1)
(87,j = numcols)
(88,numrows = jas_matrix_numrows(c0)
(89,i)
(90,jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413)
(91,c1)
(92,*c2p)
(93,b)
(94,y)
(95,g = jpc_fix_add3(y, jpc_fix_mul(jpc_dbltofix(-0.34413)
(96,b = jpc_fix_add(y, jpc_fix_mul(jpc_dbltofix(1.772)
(97,c2p++)
(98,jas_matrix_numrows(c0)
(99,i < numrows)
(100,c0p)
(101,c2p)
(102,g)
(103,c1p)
(104,jpc_dbltofix(-0.34413)
(105,jas_matrix_numrows(c1)
(106,numrows)
(107,1.402)
(108,numrows)
(109,assert(jas_matrix_numrows(c1)
(110,RET)
(111,c1)
(112,u)
(113,jpc_dbltofix(1.402)
(114,v)
(115,jas_matrix_numrows(c2)
(116,for (i = 0; i < numrows; ++i)
(117,-0.34413)
(118,jas_matrix_numcols(c2)
(119,jas_matrix_getref(c1, i, 0)
(120,0)
(121,y)
(122,numrows)
(123,jpc_dbltofix(1.772)
(124,0)
(125,numrows)
(126,g)
(127,jas_matrix_numcols(c0)
(128,jas_matrix_numcols(c1)
(129,c2p)
(130,c2)
(131,0)
(132,u = *c1p)
(133,i)
(134,c1p++)
(135,c2)
(136,j)
(137,c0)
(138,0.71414)
(139,j)
(140,u)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
