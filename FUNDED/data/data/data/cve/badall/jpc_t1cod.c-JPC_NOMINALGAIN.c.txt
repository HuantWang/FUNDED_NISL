-----label-----
1
-----code-----
int JPC_NOMINALGAIN(int qmfbid, int numlvls, int lvlno, int orient)
{
	/* Avoid compiler warnings about unused parameters. */
	numlvls = 0;

	if (qmfbid == JPC_COX_INS) {
		return 0;
	}
	assert(qmfbid == JPC_COX_RFT);
	if (lvlno == 0) {
		assert(orient == JPC_TSFB_LL);
		return 0;
	} else {
		switch (orient) {
		case JPC_TSFB_LH:
		case JPC_TSFB_HL:
			return 1;
			break;
		case JPC_TSFB_HH:
			return 2;
			break;
		default:
			abort();
			break;
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
7,8
9,10
9,11
11,12
13,14
13,15
15,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
28,30
29,30
31,32
33,34
34,35
36,37
37,38
37,39
38,39
40,41
40,42
41,42
43,44
45,46
45,47
45,48
46,47
46,48
47,48
50,51
50,52
51,52
52,53
52,54
53,54
55,56
55,57
56,57
58,59
60,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
66,70
66,71
66,72
66,73
66,74
66,75
66,76
67,68
68,69
70,71
71,72
73,74
76,77
77,78
79,80
83,84
84,85
85,86
-----nextToken-----
2,4,6,8,10,12,14,16,18,20,25,26,30,32,35,39,42,44,48,49,54,57,59,61,65,69,72,74,75,78,80,81,82,86,87
-----computeFrom-----
23,24
23,25
28,29
28,30
40,41
40,42
46,47
46,48
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;CompoundStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ReturnStatement;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ReturnStatement;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BreakStatement;
-----ast_node-----
int JPC_NOMINALGAIN(int qmfbid, int numlvls, int lvlno, int orient){	/* Avoid compiler warnings about unused parameters. */	numlvls = 0;	if (qmfbid == JPC_COX_INS) {		return 0;	}	assert(qmfbid == JPC_COX_RFT);	if (lvlno == 0) {		assert(orient == JPC_TSFB_LL);		return 0;	} else {		switch (orient) {		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		default:			abort();			break;		}	}}
int
JPC_NOMINALGAIN(int qmfbid, int numlvls, int lvlno, int orient)
JPC_NOMINALGAIN
int qmfbid
int
qmfbid
qmfbid
int numlvls
int
numlvls
numlvls
int lvlno
int
lvlno
lvlno
int orient
int
orient
orient
{	/* Avoid compiler warnings about unused parameters. */	numlvls = 0;	if (qmfbid == JPC_COX_INS) {		return 0;	}	assert(qmfbid == JPC_COX_RFT);	if (lvlno == 0) {		assert(orient == JPC_TSFB_LL);		return 0;	} else {		switch (orient) {		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		default:			abort();			break;		}	}}
numlvls = 0;
numlvls = 0
numlvls
numlvls
0
if (qmfbid == JPC_COX_INS) {		return 0;	}
qmfbid == JPC_COX_INS
qmfbid
qmfbid
JPC_COX_INS
JPC_COX_INS
{		return 0;	}
return 0;
0
assert(qmfbid == JPC_COX_RFT);
assert(qmfbid == JPC_COX_RFT)
assert
assert
qmfbid == JPC_COX_RFT
qmfbid
qmfbid
JPC_COX_RFT
JPC_COX_RFT
if (lvlno == 0) {		assert(orient == JPC_TSFB_LL);		return 0;	} else {		switch (orient) {		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		default:			abort();			break;		}	}
lvlno == 0
lvlno
lvlno
0
{		assert(orient == JPC_TSFB_LL);		return 0;	}
assert(orient == JPC_TSFB_LL);
assert(orient == JPC_TSFB_LL)
assert
assert
orient == JPC_TSFB_LL
orient
orient
JPC_TSFB_LL
JPC_TSFB_LL
return 0;
0
{		switch (orient) {		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		default:			abort();			break;		}	}
switch (orient) {		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		default:			abort();			break;		}
orient
orient
{		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		default:			abort();			break;		}
case JPC_TSFB_LH:
JPC_TSFB_LH
JPC_TSFB_LH
case JPC_TSFB_HL:
JPC_TSFB_HL
JPC_TSFB_HL
return 1;
1
break;
case JPC_TSFB_HH:
JPC_TSFB_HH
JPC_TSFB_HH
return 2;
2
break;
default:
abort();
abort()
abort
abort
break;
-----joern-----
(22,16,0)
(9,37,0)
(37,32,0)
(13,26,0)
(3,0,0)
(30,16,0)
(40,5,0)
(44,27,0)
(7,23,0)
(25,0,0)
(26,41,0)
(42,16,0)
(43,0,0)
(19,21,0)
(12,28,0)
(10,5,0)
(40,19,0)
(23,16,0)
(0,17,0)
(15,26,0)
(31,16,0)
(1,16,0)
(39,6,0)
(14,27,0)
(29,35,0)
(33,28,0)
(25,8,0)
(20,19,0)
(41,26,0)
(4,8,0)
(45,4,0)
(5,16,0)
(34,39,0)
(0,25,0)
(41,27,0)
(40,4,0)
(28,38,0)
(11,16,0)
(46,37,0)
(28,27,0)
(18,39,0)
(26,32,0)
(36,16,0)
(40,23,0)
(2,16,0)
(40,19,1)
(33,12,1)
(39,18,1)
(39,6,1)
(19,20,1)
(37,32,1)
(24,39,1)
(25,0,1)
(28,33,1)
(13,37,1)
(40,23,1)
(41,26,1)
(10,24,1)
(26,15,1)
(26,32,1)
(0,17,1)
(40,30,1)
(40,5,1)
(40,4,1)
(40,2,1)
(20,37,1)
(7,24,1)
(45,25,1)
(31,24,1)
(43,39,1)
(0,3,1)
(46,28,1)
(3,43,1)
(34,41,1)
(9,46,1)
(30,31,1)
(37,9,1)
(23,7,1)
(18,34,1)
(4,45,1)
(5,10,1)
(28,38,1)
(15,13,1)
(40,42,1)
(24,39,2)
(26,32,2)
(0,39,2)
(20,37,2)
(39,37,2)
(43,39,2)
(15,37,2)
(19,37,2)
(40,23,2)
(30,24,2)
(7,24,2)
(18,37,2)
(10,24,2)
(45,39,2)
(3,39,2)
(40,19,2)
(25,0,2)
(26,37,2)
(25,39,2)
(41,26,2)
(31,24,2)
(23,24,2)
(40,4,2)
(0,17,2)
(41,37,2)
(39,6,2)
(34,37,2)
(4,39,2)
(37,32,2)
(13,37,2)
(40,5,2)
(28,38,2)
(5,24,2)
-----------------------------------
(0,orient == JPC_TSFB_LL)
(1,case JPC_TSFB_LH:)
(2,break;)
(3,JPC_TSFB_LL)
(4,return 0;)
(5,return 1;)
(6,int lvlno)
(7,2)
(8,)
(9,JPC_COX_INS)
(10,1)
(11,default:)
(12,numlvls)
(13,qmfbid)
(14,if (lvlno == 0)
(15,JPC_COX_RFT)
(16,)
(17,int orient)
(18,0)
(19,return 0;)
(20,0)
(21,)
(22,case JPC_TSFB_HH:)
(23,return 2;)
(24,orient)
(25,assert(orient == JPC_TSFB_LL)
(26,qmfbid == JPC_COX_RFT)
(27,)
(28,numlvls = 0)
(29,switch (orient)
(30,break;)
(31,abort()
(32,int qmfbid)
(33,0)
(34,lvlno)
(35,)
(36,case JPC_TSFB_HL:)
(37,qmfbid == JPC_COX_INS)
(38,int numlvls)
(39,lvlno == 0)
(40,RET)
(41,assert(qmfbid == JPC_COX_RFT)
(42,break;)
(43,orient)
(44,if (qmfbid == JPC_COX_INS)
(45,0)
(46,qmfbid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
