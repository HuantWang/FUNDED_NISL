-----label-----
1
-----code-----
int
TIFFSetDirectory(TIFF* tif, uint16 dirn)
{
	uint64 nextdir;
	uint16 n;

	if (!(tif->tif_flags&TIFF_BIGTIFF))
		nextdir = tif->tif_header.classic.tiff_diroff;
	else
		nextdir = tif->tif_header.big.tiff_diroff;
	for (n = dirn; n > 0 && nextdir != 0; n--)
		if (!TIFFAdvanceDirectory(tif, &nextdir, NULL))
			return (0);
	tif->tif_nextdiroff = nextdir;
	/*
	 * Set curdir to the actual directory index.  The
	 * -1 is because TIFFReadDirectory will increment
	 * tif_curdir after successfully reading the directory.
	 */
	tif->tif_curdir = (dirn - n) - 1;
	/*
	 * Reset tif_dirnumber counter and start new list of seen directories.
	 * We need this to prevent IFD loops.
	 */
	tif->tif_dirnumber = 0;
	return (TIFFReadDirectory(tif));
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
29,30
29,31
29,32
30,31
31,32
32,33
32,34
33,34
33,35
34,35
37,38
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
45,46
45,47
46,47
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
75,76
75,77
76,77
79,80
80,81
82,83
82,84
83,84
84,85
84,86
84,87
84,88
85,86
87,88
89,90
90,91
92,93
94,95
95,96
97,98
98,99
98,100
99,100
99,101
100,101
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
113,114
113,115
114,115
116,117
119,120
120,121
120,122
121,122
121,123
122,123
126,127
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,7,9,10,13,15,20,22,26,28,35,36,38,42,47,48,49,50,54,59,60,61,62,67,69,73,74,77,78,81,86,88,91,93,96,101,102,104,109,110,115,117,118,123,124,125,130,132
-----computeFrom-----
32,33
32,34
40,41
40,42
52,53
52,54
65,66
65,67
70,71
70,72
71,72
71,73
75,76
75,77
98,99
98,100
106,107
106,108
111,112
111,113
113,114
113,115
120,121
120,122
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
intTIFFSetDirectory(TIFF* tif, uint16 dirn){	uint64 nextdir;	uint16 n;	if (!(tif->tif_flags&TIFF_BIGTIFF))		nextdir = tif->tif_header.classic.tiff_diroff;	else		nextdir = tif->tif_header.big.tiff_diroff;	for (n = dirn; n > 0 && nextdir != 0; n--)		if (!TIFFAdvanceDirectory(tif, &nextdir, NULL))			return (0);	tif->tif_nextdiroff = nextdir;	/*	 * Set curdir to the actual directory index.  The	 * -1 is because TIFFReadDirectory will increment	 * tif_curdir after successfully reading the directory.	 */	tif->tif_curdir = (dirn - n) - 1;	/*	 * Reset tif_dirnumber counter and start new list of seen directories.	 * We need this to prevent IFD loops.	 */	tif->tif_dirnumber = 0;	return (TIFFReadDirectory(tif));}
int
TIFFSetDirectory(TIFF* tif, uint16 dirn)
TIFFSetDirectory
TIFF* tif
TIFF
TIFF
* tif
*
tif
uint16 dirn
uint16
uint16
dirn
dirn
{	uint64 nextdir;	uint16 n;	if (!(tif->tif_flags&TIFF_BIGTIFF))		nextdir = tif->tif_header.classic.tiff_diroff;	else		nextdir = tif->tif_header.big.tiff_diroff;	for (n = dirn; n > 0 && nextdir != 0; n--)		if (!TIFFAdvanceDirectory(tif, &nextdir, NULL))			return (0);	tif->tif_nextdiroff = nextdir;	/*	 * Set curdir to the actual directory index.  The	 * -1 is because TIFFReadDirectory will increment	 * tif_curdir after successfully reading the directory.	 */	tif->tif_curdir = (dirn - n) - 1;	/*	 * Reset tif_dirnumber counter and start new list of seen directories.	 * We need this to prevent IFD loops.	 */	tif->tif_dirnumber = 0;	return (TIFFReadDirectory(tif));}
uint64 nextdir;
uint64 nextdir;
uint64
uint64
nextdir
nextdir
uint16 n;
uint16 n;
uint16
uint16
n
n
if (!(tif->tif_flags&TIFF_BIGTIFF))		nextdir = tif->tif_header.classic.tiff_diroff;	else		nextdir = tif->tif_header.big.tiff_diroff;
!(tif->tif_flags&TIFF_BIGTIFF)
(tif->tif_flags&TIFF_BIGTIFF)
tif->tif_flags&TIFF_BIGTIFF
tif->tif_flags
tif
tif
tif_flags
TIFF_BIGTIFF
TIFF_BIGTIFF
nextdir = tif->tif_header.classic.tiff_diroff;
nextdir = tif->tif_header.classic.tiff_diroff
nextdir
nextdir
tif->tif_header.classic.tiff_diroff
tif->tif_header.classic
tif->tif_header
tif
tif
tif_header
classic
tiff_diroff
nextdir = tif->tif_header.big.tiff_diroff;
nextdir = tif->tif_header.big.tiff_diroff
nextdir
nextdir
tif->tif_header.big.tiff_diroff
tif->tif_header.big
tif->tif_header
tif
tif
tif_header
big
tiff_diroff
for (n = dirn; n > 0 && nextdir != 0; n--)		if (!TIFFAdvanceDirectory(tif, &nextdir, NULL))			return (0);
n = dirn;
n = dirn
n
n
dirn
dirn
n > 0 && nextdir != 0
n > 0
n
n
0
nextdir != 0
nextdir
nextdir
0
n--
n
n
if (!TIFFAdvanceDirectory(tif, &nextdir, NULL))			return (0);
!TIFFAdvanceDirectory(tif, &nextdir, NULL)
TIFFAdvanceDirectory(tif, &nextdir, NULL)
TIFFAdvanceDirectory
TIFFAdvanceDirectory
tif
tif
&nextdir
nextdir
nextdir
NULL
NULL
return (0);
(0)
0
tif->tif_nextdiroff = nextdir;
tif->tif_nextdiroff = nextdir
tif->tif_nextdiroff
tif
tif
tif_nextdiroff
nextdir
nextdir
tif->tif_curdir = (dirn - n) - 1;
tif->tif_curdir = (dirn - n) - 1
tif->tif_curdir
tif
tif
tif_curdir
(dirn - n) - 1
(dirn - n)
dirn - n
dirn
dirn
n
n
1
tif->tif_dirnumber = 0;
tif->tif_dirnumber = 0
tif->tif_dirnumber
tif
tif
tif_dirnumber
0
return (TIFFReadDirectory(tif));
(TIFFReadDirectory(tif))
TIFFReadDirectory(tif)
TIFFReadDirectory
TIFFReadDirectory
tif
tif
-----joern-----
(16,38,0)
(31,69,0)
(24,31,0)
(71,5,0)
(65,63,0)
(16,17,0)
(29,24,0)
(19,26,0)
(69,31,0)
(29,64,0)
(55,26,0)
(47,31,0)
(62,70,0)
(64,59,0)
(71,2,0)
(69,1,0)
(2,71,0)
(1,4,0)
(24,29,0)
(45,38,0)
(52,63,0)
(67,58,0)
(25,52,0)
(8,69,0)
(65,16,0)
(68,26,0)
(11,51,0)
(14,71,0)
(21,13,0)
(4,1,0)
(23,50,0)
(35,45,0)
(50,63,0)
(15,1,0)
(41,24,0)
(24,19,0)
(66,64,0)
(44,38,0)
(4,63,0)
(26,55,0)
(39,65,0)
(71,63,0)
(52,58,0)
(21,16,0)
(61,51,0)
(54,52,0)
(22,71,0)
(1,69,0)
(70,62,0)
(58,38,0)
(16,43,0)
(48,53,0)
(61,28,0)
(51,32,0)
(5,31,0)
(70,3,0)
(0,24,0)
(60,43,0)
(43,45,0)
(36,17,0)
(12,70,0)
(26,19,0)
(3,63,0)
(10,38,0)
(34,4,0)
(50,55,0)
(49,55,0)
(55,50,0)
(6,5,0)
(57,17,0)
(18,59,0)
(51,61,0)
(28,61,0)
(58,19,0)
(42,51,0)
(9,59,0)
(30,64,0)
(28,38,0)
(16,52,0)
(72,50,0)
(7,43,0)
(33,61,0)
(56,3,0)
(73,19,0)
(3,70,0)
(46,38,0)
(58,31,0)
(64,29,0)
(40,3,0)
(5,71,0)
(51,59,0)
(5,19,0)
(27,38,0)
(59,32,0)
(20,13,0)
(53,59,0)
(43,63,0)
(37,4,0)
(17,28,0)
(17,63,0)
(61,33,1)
(50,72,1)
(28,61,1)
(66,53,1)
(59,9,1)
(61,51,1)
(22,29,1)
(67,52,1)
(55,49,1)
(58,19,1)
(73,62,1)
(8,1,1)
(15,4,1)
(31,69,1)
(36,58,1)
(41,0,1)
(52,63,1)
(48,2,1)
(64,59,1)
(43,63,1)
(35,43,1)
(25,54,1)
(29,64,1)
(71,5,1)
(69,8,1)
(34,37,1)
(51,11,1)
(62,70,1)
(23,73,1)
(26,55,1)
(12,3,1)
(65,63,1)
(39,45,1)
(43,60,1)
(16,17,1)
(50,63,1)
(5,6,1)
(58,31,1)
(45,35,1)
(47,62,1)
(37,47,1)
(42,17,1)
(17,63,1)
(65,39,1)
(69,1,1)
(13,20,1)
(58,67,1)
(9,18,1)
(66,59,1)
(18,31,1)
(18,19,1)
(59,32,1)
(51,59,1)
(54,29,1)
(33,51,1)
(17,57,1)
(24,19,1)
(70,3,1)
(1,4,1)
(20,2,1)
(26,68,1)
(51,32,1)
(21,13,1)
(24,41,1)
(7,28,1)
(2,71,1)
(60,7,1)
(40,56,1)
(71,14,1)
(5,19,1)
(29,24,1)
(53,59,1)
(16,43,1)
(55,50,1)
(4,34,1)
(24,31,1)
(21,16,1)
(52,25,1)
(57,36,1)
(16,52,1)
(3,63,1)
(64,30,1)
(71,63,1)
(5,31,1)
(19,26,1)
(53,48,1)
(0,64,1)
(70,12,1)
(30,66,1)
(4,63,1)
(6,22,1)
(16,65,1)
(14,5,1)
(3,40,1)
(11,42,1)
(1,15,1)
(68,55,1)
(72,23,1)
(49,50,1)
(2,29,2)
(3,63,2)
(30,2,2)
(19,62,2)
(65,63,2)
(55,62,2)
(67,29,2)
(31,69,2)
(35,29,2)
(28,29,2)
(61,51,2)
(14,29,2)
(23,62,2)
(72,62,2)
(34,62,2)
(5,29,2)
(5,19,2)
(37,62,2)
(22,29,2)
(70,3,2)
(64,2,2)
(73,62,2)
(71,29,2)
(51,29,2)
(59,32,2)
(13,2,2)
(24,19,2)
(1,4,2)
(69,1,2)
(47,62,2)
(29,64,2)
(50,62,2)
(11,29,2)
(41,64,2)
(19,26,2)
(62,70,2)
(16,43,2)
(33,29,2)
(20,2,2)
(31,62,2)
(42,29,2)
(51,32,2)
(69,62,2)
(66,2,2)
(55,50,2)
(0,64,2)
(1,62,2)
(21,13,2)
(58,19,2)
(53,2,2)
(28,61,2)
(49,62,2)
(52,63,2)
(68,62,2)
(71,5,2)
(39,29,2)
(57,29,2)
(64,59,2)
(16,52,2)
(2,71,2)
(36,29,2)
(17,29,2)
(29,24,2)
(58,29,2)
(29,2,2)
(24,64,2)
(48,2,2)
(4,63,2)
(7,29,2)
(17,63,2)
(58,31,2)
(21,16,2)
(65,29,2)
(4,62,2)
(61,29,2)
(54,29,2)
(52,29,2)
(51,59,2)
(26,62,2)
(15,62,2)
(6,29,2)
(24,31,2)
(25,29,2)
(60,29,2)
(53,59,2)
(45,29,2)
(43,63,2)
(50,63,2)
(16,29,2)
(26,55,2)
(8,62,2)
(5,31,2)
(43,29,2)
(71,63,2)
(16,17,2)
-----------------------------------
(0,nextdir)
(1,tif->tif_header.big)
(2,!TIFFAdvanceDirectory(tif, &nextdir, NULL)
(3,tif->tif_flags)
(4,tif->tif_header)
(5,&nextdir)
(6,nextdir)
(7,tif)
(8,tiff_diroff)
(9,dirn)
(10,n)
(11,n)
(12,TIFF_BIGTIFF)
(13,return (0)
(14,NULL)
(15,big)
(16,return (TIFFReadDirectory(tif)
(17,tif->tif_curdir)
(18,n)
(19,nextdir = tif->tif_header.classic.tiff_diroff)
(20,0)
(21,RET)
(22,tif)
(23,tif)
(24,nextdir != 0)
(25,tif_nextdiroff)
(26,tif->tif_header.classic.tiff_diroff)
(27,for (n = dirn; n > 0 && nextdir != 0; n--)
(28,tif->tif_curdir = (dirn - n)
(29,n > 0 && nextdir != 0)
(30,0)
(31,nextdir = tif->tif_header.big.tiff_diroff)
(32,uint16 dirn)
(33,1)
(34,tif_header)
(35,0)
(36,tif)
(37,tif)
(38,)
(39,tif)
(40,tif_flags)
(41,0)
(42,dirn)
(43,tif->tif_dirnumber)
(44,if (!(tif->tif_flags&TIFF_BIGTIFF)
(45,tif->tif_dirnumber = 0)
(46,nextdir)
(47,nextdir)
(48,n)
(49,classic)
(50,tif->tif_header)
(51,dirn - n)
(52,tif->tif_nextdiroff)
(53,n--)
(54,tif)
(55,tif->tif_header.classic)
(56,tif)
(57,tif_curdir)
(58,tif->tif_nextdiroff = nextdir)
(59,n = dirn)
(60,tif_dirnumber)
(61,(dirn - n)
(62,!(tif->tif_flags&TIFF_BIGTIFF)
(63,TIFF* tif)
(64,n > 0)
(65,TIFFReadDirectory(tif)
(66,n)
(67,nextdir)
(68,tiff_diroff)
(69,tif->tif_header.big.tiff_diroff)
(70,tif->tif_flags&TIFF_BIGTIFF)
(71,TIFFAdvanceDirectory(tif, &nextdir, NULL)
(72,tif_header)
(73,nextdir)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
