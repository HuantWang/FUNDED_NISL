-----label-----
1
-----code-----
static int jas_icctxtdesc_input(jas_iccattrval_t *attrval, jas_stream_t *in,
  int cnt)
{
	int n;
	int c;
	jas_icctxtdesc_t *txtdesc = &attrval->data.txtdesc;
	txtdesc->ascdata = 0;
	txtdesc->ucdata = 0;
	if (jas_iccgetuint32(in, &txtdesc->asclen))
		goto error;
	if (!(txtdesc->ascdata = jas_malloc(txtdesc->asclen)))
		goto error;
	if (jas_stream_read(in, txtdesc->ascdata, txtdesc->asclen) !=
	  JAS_CAST(int, txtdesc->asclen))
		goto error;
	txtdesc->ascdata[txtdesc->asclen - 1] = '\0';
	if (jas_iccgetuint32(in, &txtdesc->uclangcode) ||
	  jas_iccgetuint32(in, &txtdesc->uclen))
		goto error;
	if (!(txtdesc->ucdata = jas_alloc2(txtdesc->uclen, 2)))
		goto error;
	if (jas_stream_read(in, txtdesc->ucdata, txtdesc->uclen * 2) !=
	  JAS_CAST(int, txtdesc->uclen * 2))
		goto error;
	if (jas_iccgetuint16(in, &txtdesc->sccode))
		goto error;
	if ((c = jas_stream_getc(in)) == EOF)
		goto error;
	txtdesc->maclen = c;
	if (jas_stream_read(in, txtdesc->macdata, 67) != 67)
		goto error;
	txtdesc->asclen = JAS_CAST(jas_iccuint32_t, strlen(txtdesc->ascdata) + 1);
#define WORKAROUND_BAD_PROFILES
#ifdef WORKAROUND_BAD_PROFILES
	n = txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67;
	if (n > cnt) {
		return -1;
	}
	if (n < cnt) {
		if (jas_stream_gobble(in, cnt - n) != cnt - n)
			goto error;
	}
#else
	if (txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67 != cnt)
		return -1;
#endif
	return 0;
error:
	jas_icctxtdesc_destroy(attrval);
	return -1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
21,38
21,39
21,40
21,41
21,42
21,43
21,44
22,23
23,24
23,25
25,26
27,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
36,39
39,40
40,41
41,42
41,43
42,43
42,44
43,44
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
62,63
62,64
62,65
63,64
65,66
67,68
68,69
68,70
69,70
72,73
74,75
74,76
75,76
76,77
77,78
77,79
78,79
78,80
79,80
82,83
82,84
83,84
85,86
85,87
86,87
89,90
91,92
91,93
92,93
93,94
95,96
96,97
96,98
97,98
97,99
98,99
98,100
99,100
102,103
102,104
103,104
103,105
104,105
109,110
109,111
110,111
110,112
111,112
111,113
111,114
112,113
114,115
116,117
117,118
117,119
118,119
121,122
121,123
121,124
122,123
124,125
126,127
127,128
127,129
128,129
131,132
133,134
133,135
134,135
135,136
136,137
136,138
137,138
137,139
138,139
141,142
141,143
141,144
142,143
144,145
144,146
145,146
149,150
151,152
151,153
152,153
153,154
155,156
155,157
156,157
156,158
156,159
157,158
159,160
161,162
162,163
162,164
163,164
166,167
168,169
168,170
169,170
169,171
170,171
171,172
171,173
172,173
174,175
174,176
175,176
177,178
179,180
181,182
183,184
184,185
184,186
185,186
185,187
186,187
189,190
191,192
191,193
192,193
192,194
193,194
193,195
193,196
193,197
194,195
196,197
198,199
198,200
199,200
204,205
206,207
207,208
207,209
208,209
208,210
209,210
212,213
212,214
212,215
213,214
215,216
217,218
217,219
218,219
218,220
219,220
221,222
221,223
222,223
226,227
227,228
227,229
228,229
230,231
230,232
231,232
231,233
232,233
232,234
233,234
233,235
234,235
237,238
237,239
238,239
238,240
239,240
245,246
245,247
246,247
246,248
247,248
249,250
251,252
252,253
253,254
255,256
255,257
256,257
256,258
257,258
259,260
261,262
262,263
262,264
263,264
263,265
264,265
264,266
264,267
265,266
267,268
269,270
269,271
270,271
272,273
274,275
274,276
275,276
277,278
279,280
281,282
283,284
283,285
285,286
286,287
286,288
287,288
289,290
291,292
292,293
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,24,26,29,31,35,37,38,44,45,46,51,52,53,58,59,60,64,66,70,71,73,80,81,84,87,88,90,94,100,101,105,106,107,108,113,115,119,120,123,125,129,130,132,139,140,143,146,147,148,150,154,158,160,164,165,167,173,176,178,180,182,187,188,190,195,197,200,201,202,203,205,210,211,214,216,220,223,224,225,229,235,236,240,241,242,243,244,248,250,254,258,260,266,268,271,273,276,278,280,282,284,288,290,293
-----computeFrom-----
48,49
48,50
55,56
55,57
77,78
77,79
96,97
96,98
102,103
102,104
110,111
110,112
136,137
136,138
169,170
169,171
171,172
171,173
184,185
184,186
192,193
192,194
207,208
207,209
217,218
217,219
227,228
227,229
230,231
230,232
231,232
231,233
232,233
232,234
237,238
237,239
246,247
246,248
256,257
256,258
263,264
263,265
269,270
269,271
274,275
274,276
-----guardedBy-----
260,276
258,278
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;ProblemExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;GotoStatement;Name;IfStatement;ProblemExpression;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static int jas_icctxtdesc_input(jas_iccattrval_t *attrval, jas_stream_t *in,  int cnt){	int n;	int c;	jas_icctxtdesc_t *txtdesc = &attrval->data.txtdesc;	txtdesc->ascdata = 0;	txtdesc->ucdata = 0;	if (jas_iccgetuint32(in, &txtdesc->asclen))		goto error;	if (!(txtdesc->ascdata = jas_malloc(txtdesc->asclen)))		goto error;	if (jas_stream_read(in, txtdesc->ascdata, txtdesc->asclen) !=	  JAS_CAST(int, txtdesc->asclen))		goto error;	txtdesc->ascdata[txtdesc->asclen - 1] = '\0';	if (jas_iccgetuint32(in, &txtdesc->uclangcode) ||	  jas_iccgetuint32(in, &txtdesc->uclen))		goto error;	if (!(txtdesc->ucdata = jas_alloc2(txtdesc->uclen, 2)))		goto error;	if (jas_stream_read(in, txtdesc->ucdata, txtdesc->uclen * 2) !=	  JAS_CAST(int, txtdesc->uclen * 2))		goto error;	if (jas_iccgetuint16(in, &txtdesc->sccode))		goto error;	if ((c = jas_stream_getc(in)) == EOF)		goto error;	txtdesc->maclen = c;	if (jas_stream_read(in, txtdesc->macdata, 67) != 67)		goto error;	txtdesc->asclen = JAS_CAST(jas_iccuint32_t, strlen(txtdesc->ascdata) + 1);#define WORKAROUND_BAD_PROFILES#ifdef WORKAROUND_BAD_PROFILES	n = txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67;	if (n > cnt) {		return -1;	}	if (n < cnt) {		if (jas_stream_gobble(in, cnt - n) != cnt - n)			goto error;	}#else	if (txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67 != cnt)		return -1;#endif	return 0;error:	jas_icctxtdesc_destroy(attrval);	return -1;}
static int
jas_icctxtdesc_input(jas_iccattrval_t *attrval, jas_stream_t *in,  int cnt)
jas_icctxtdesc_input
jas_iccattrval_t *attrval
jas_iccattrval_t
jas_iccattrval_t
*attrval
*
attrval
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
int cnt
int
cnt
cnt
{	int n;	int c;	jas_icctxtdesc_t *txtdesc = &attrval->data.txtdesc;	txtdesc->ascdata = 0;	txtdesc->ucdata = 0;	if (jas_iccgetuint32(in, &txtdesc->asclen))		goto error;	if (!(txtdesc->ascdata = jas_malloc(txtdesc->asclen)))		goto error;	if (jas_stream_read(in, txtdesc->ascdata, txtdesc->asclen) !=	  JAS_CAST(int, txtdesc->asclen))		goto error;	txtdesc->ascdata[txtdesc->asclen - 1] = '\0';	if (jas_iccgetuint32(in, &txtdesc->uclangcode) ||	  jas_iccgetuint32(in, &txtdesc->uclen))		goto error;	if (!(txtdesc->ucdata = jas_alloc2(txtdesc->uclen, 2)))		goto error;	if (jas_stream_read(in, txtdesc->ucdata, txtdesc->uclen * 2) !=	  JAS_CAST(int, txtdesc->uclen * 2))		goto error;	if (jas_iccgetuint16(in, &txtdesc->sccode))		goto error;	if ((c = jas_stream_getc(in)) == EOF)		goto error;	txtdesc->maclen = c;	if (jas_stream_read(in, txtdesc->macdata, 67) != 67)		goto error;	txtdesc->asclen = JAS_CAST(jas_iccuint32_t, strlen(txtdesc->ascdata) + 1);#define WORKAROUND_BAD_PROFILES#ifdef WORKAROUND_BAD_PROFILES	n = txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67;	if (n > cnt) {		return -1;	}	if (n < cnt) {		if (jas_stream_gobble(in, cnt - n) != cnt - n)			goto error;	}#else	if (txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67 != cnt)		return -1;#endif	return 0;error:	jas_icctxtdesc_destroy(attrval);	return -1;}
int n;
int n;
int
n
n
int c;
int c;
int
c
c
jas_icctxtdesc_t *txtdesc = &attrval->data.txtdesc;
jas_icctxtdesc_t *txtdesc = &attrval->data.txtdesc;
jas_icctxtdesc_t
jas_icctxtdesc_t
*txtdesc = &attrval->data.txtdesc
*
txtdesc
= &attrval->data.txtdesc
&attrval->data.txtdesc
attrval->data.txtdesc
attrval->data
attrval
attrval
data
txtdesc
txtdesc->ascdata = 0;
txtdesc->ascdata = 0
txtdesc->ascdata
txtdesc
txtdesc
ascdata
0
txtdesc->ucdata = 0;
txtdesc->ucdata = 0
txtdesc->ucdata
txtdesc
txtdesc
ucdata
0
if (jas_iccgetuint32(in, &txtdesc->asclen))		goto error;
jas_iccgetuint32(in, &txtdesc->asclen)
jas_iccgetuint32
jas_iccgetuint32
in
in
&txtdesc->asclen
txtdesc->asclen
txtdesc
txtdesc
asclen
goto error;
error
if (!(txtdesc->ascdata = jas_malloc(txtdesc->asclen)))		goto error;
!(txtdesc->ascdata = jas_malloc(txtdesc->asclen))
(txtdesc->ascdata = jas_malloc(txtdesc->asclen))
txtdesc->ascdata = jas_malloc(txtdesc->asclen)
txtdesc->ascdata
txtdesc
txtdesc
ascdata
jas_malloc(txtdesc->asclen)
jas_malloc
jas_malloc
txtdesc->asclen
txtdesc
txtdesc
asclen
goto error;
error
if (jas_stream_read(in, txtdesc->ascdata, txtdesc->asclen) !=	  JAS_CAST(int, txtdesc->asclen))		goto error;
jas_stream_read(in, txtdesc->ascdata, txtdesc->asclen) !=	  JAS_CAST(int, txtdesc->asclen)
goto error;
error
txtdesc->ascdata[txtdesc->asclen - 1] = '\0';
txtdesc->ascdata[txtdesc->asclen - 1] = '\0'
txtdesc->ascdata[txtdesc->asclen - 1]
txtdesc->ascdata
txtdesc
txtdesc
ascdata
txtdesc->asclen - 1
txtdesc->asclen
txtdesc
txtdesc
asclen
1
'\0'
if (jas_iccgetuint32(in, &txtdesc->uclangcode) ||	  jas_iccgetuint32(in, &txtdesc->uclen))		goto error;
jas_iccgetuint32(in, &txtdesc->uclangcode) ||	  jas_iccgetuint32(in, &txtdesc->uclen)
jas_iccgetuint32(in, &txtdesc->uclangcode)
jas_iccgetuint32
jas_iccgetuint32
in
in
&txtdesc->uclangcode
txtdesc->uclangcode
txtdesc
txtdesc
uclangcode
jas_iccgetuint32(in, &txtdesc->uclen)
jas_iccgetuint32
jas_iccgetuint32
in
in
&txtdesc->uclen
txtdesc->uclen
txtdesc
txtdesc
uclen
goto error;
error
if (!(txtdesc->ucdata = jas_alloc2(txtdesc->uclen, 2)))		goto error;
!(txtdesc->ucdata = jas_alloc2(txtdesc->uclen, 2))
(txtdesc->ucdata = jas_alloc2(txtdesc->uclen, 2))
txtdesc->ucdata = jas_alloc2(txtdesc->uclen, 2)
txtdesc->ucdata
txtdesc
txtdesc
ucdata
jas_alloc2(txtdesc->uclen, 2)
jas_alloc2
jas_alloc2
txtdesc->uclen
txtdesc
txtdesc
uclen
2
goto error;
error
if (jas_stream_read(in, txtdesc->ucdata, txtdesc->uclen * 2) !=	  JAS_CAST(int, txtdesc->uclen * 2))		goto error;
jas_stream_read(in, txtdesc->ucdata, txtdesc->uclen * 2) !=	  JAS_CAST(int, txtdesc->uclen * 2)
goto error;
error
if (jas_iccgetuint16(in, &txtdesc->sccode))		goto error;
jas_iccgetuint16(in, &txtdesc->sccode)
jas_iccgetuint16
jas_iccgetuint16
in
in
&txtdesc->sccode
txtdesc->sccode
txtdesc
txtdesc
sccode
goto error;
error
if ((c = jas_stream_getc(in)) == EOF)		goto error;
(c = jas_stream_getc(in)) == EOF
(c = jas_stream_getc(in))
c = jas_stream_getc(in)
c
c
jas_stream_getc(in)
jas_stream_getc
jas_stream_getc
in
in
EOF
EOF
goto error;
error
txtdesc->maclen = c;
txtdesc->maclen = c
txtdesc->maclen
txtdesc
txtdesc
maclen
c
c
if (jas_stream_read(in, txtdesc->macdata, 67) != 67)		goto error;
jas_stream_read(in, txtdesc->macdata, 67) != 67
jas_stream_read(in, txtdesc->macdata, 67)
jas_stream_read
jas_stream_read
in
in
txtdesc->macdata
txtdesc
txtdesc
macdata
67
67
goto error;
error
txtdesc->asclen = JAS_CAST(jas_iccuint32_t, strlen(txtdesc->ascdata) + 1);
txtdesc->asclen = JAS_CAST(jas_iccuint32_t, strlen(txtdesc->ascdata) + 1)
txtdesc->asclen
txtdesc
txtdesc
asclen
JAS_CAST(jas_iccuint32_t, strlen(txtdesc->ascdata) + 1)
JAS_CAST
JAS_CAST
jas_iccuint32_t
jas_iccuint32_t
strlen(txtdesc->ascdata) + 1
strlen(txtdesc->ascdata)
strlen
strlen
txtdesc->ascdata
txtdesc
txtdesc
ascdata
1
n = txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67;
n = txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67
n
n
txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67
txtdesc->asclen + txtdesc->uclen * 2 + 15
txtdesc->asclen + txtdesc->uclen * 2
txtdesc->asclen
txtdesc
txtdesc
asclen
txtdesc->uclen * 2
txtdesc->uclen
txtdesc
txtdesc
uclen
2
15
67
if (n > cnt) {		return -1;	}
n > cnt
n
n
cnt
cnt
{		return -1;	}
return -1;
-1
1
if (n < cnt) {		if (jas_stream_gobble(in, cnt - n) != cnt - n)			goto error;	}
n < cnt
n
n
cnt
cnt
{		if (jas_stream_gobble(in, cnt - n) != cnt - n)			goto error;	}
if (jas_stream_gobble(in, cnt - n) != cnt - n)			goto error;
jas_stream_gobble(in, cnt - n) != cnt - n
jas_stream_gobble(in, cnt - n)
jas_stream_gobble
jas_stream_gobble
in
in
cnt - n
cnt
cnt
n
n
cnt - n
cnt
cnt
n
n
goto error;
error
return 0;
0
error:	jas_icctxtdesc_destroy(attrval);
error
jas_icctxtdesc_destroy(attrval);
jas_icctxtdesc_destroy(attrval)
jas_icctxtdesc_destroy
jas_icctxtdesc_destroy
attrval
attrval
return -1;
-1
1
-----joern-----
(184,3,0)
(118,162,0)
(71,63,0)
(18,168,0)
(137,63,0)
(34,185,0)
(60,31,0)
(198,86,0)
(85,194,0)
(72,8,0)
(17,68,0)
(113,29,0)
(208,57,0)
(17,91,0)
(187,4,0)
(100,81,0)
(73,64,0)
(189,109,0)
(120,136,0)
(164,63,0)
(160,68,0)
(138,46,0)
(149,121,0)
(64,161,0)
(31,146,0)
(140,131,0)
(170,203,0)
(21,98,0)
(94,168,0)
(150,140,0)
(28,154,0)
(106,5,0)
(31,5,0)
(186,164,0)
(103,123,0)
(39,83,0)
(42,168,0)
(57,6,0)
(84,63,0)
(115,69,0)
(101,3,0)
(68,17,0)
(142,154,0)
(113,168,0)
(123,183,0)
(185,113,0)
(154,28,0)
(133,168,0)
(12,35,0)
(161,78,0)
(167,105,0)
(134,187,0)
(161,35,0)
(115,27,0)
(71,95,0)
(68,160,0)
(57,203,0)
(78,50,0)
(149,28,0)
(92,168,0)
(124,99,0)
(73,74,0)
(180,29,0)
(104,168,0)
(86,192,0)
(65,168,0)
(57,116,0)
(136,120,0)
(109,70,0)
(126,63,0)
(2,29,0)
(64,73,0)
(23,147,0)
(86,198,0)
(203,83,0)
(113,116,0)
(70,109,0)
(149,137,0)
(113,6,0)
(120,63,0)
(205,17,0)
(144,84,0)
(147,27,0)
(7,192,0)
(194,123,0)
(41,8,0)
(197,95,0)
(105,131,0)
(36,35,0)
(198,168,0)
(5,31,0)
(10,152,0)
(204,168,0)
(158,63,0)
(17,131,0)
(21,27,0)
(152,148,0)
(164,186,0)
(147,128,0)
(0,168,0)
(79,152,0)
(22,27,0)
(201,17,0)
(75,21,0)
(16,91,0)
(162,168,0)
(45,74,0)
(110,22,0)
(157,116,0)
(69,169,0)
(143,33,0)
(78,83,0)
(162,69,0)
(159,65,0)
(108,142,0)
(95,197,0)
(187,32,0)
(113,137,0)
(137,162,0)
(163,200,0)
(126,70,0)
(206,142,0)
(193,168,0)
(1,19,0)
(88,183,0)
(13,126,0)
(129,120,0)
(62,94,0)
(145,200,0)
(33,63,0)
(50,136,0)
(61,166,0)
(87,171,0)
(46,22,0)
(20,192,0)
(151,171,0)
(16,131,0)
(57,137,0)
(57,29,0)
(148,4,0)
(25,40,0)
(113,84,0)
(6,63,0)
(47,151,0)
(99,63,0)
(4,187,0)
(50,56,0)
(48,32,0)
(4,19,0)
(208,113,0)
(197,27,0)
(127,140,0)
(132,76,0)
(33,50,0)
(57,28,0)
(78,63,0)
(161,27,0)
(58,197,0)
(8,194,0)
(49,168,0)
(174,137,0)
(31,27,0)
(173,28,0)
(7,33,0)
(179,21,0)
(11,16,0)
(90,31,0)
(140,91,0)
(152,63,0)
(53,69,0)
(69,115,0)
(70,126,0)
(87,186,0)
(152,198,0)
(194,85,0)
(200,179,0)
(149,116,0)
(199,99,0)
(203,63,0)
(149,6,0)
(95,71,0)
(116,198,0)
(74,73,0)
(28,173,0)
(46,99,0)
(139,186,0)
(188,32,0)
(131,168,0)
(93,135,0)
(146,31,0)
(98,197,0)
(172,16,0)
(57,168,0)
(154,142,0)
(142,63,0)
(105,91,0)
(35,63,0)
(153,168,0)
(155,120,0)
(183,123,0)
(8,63,0)
(136,50,0)
(156,78,0)
(207,84,0)
(123,194,0)
(182,116,0)
(3,63,0)
(21,179,0)
(160,140,0)
(33,7,0)
(149,203,0)
(29,50,0)
(195,73,0)
(148,152,0)
(37,33,0)
(78,161,0)
(135,63,0)
(196,173,0)
(165,154,0)
(192,86,0)
(6,194,0)
(169,69,0)
(40,149,0)
(178,203,0)
(175,68,0)
(197,98,0)
(109,27,0)
(148,131,0)
(177,168,0)
(63,168,0)
(116,63,0)
(161,64,0)
(15,169,0)
(51,87,0)
(55,135,0)
(128,147,0)
(110,76,0)
(22,8,0)
(76,166,0)
(192,7,0)
(146,63,0)
(173,83,0)
(151,168,0)
(82,126,0)
(59,183,0)
(141,168,0)
(29,63,0)
(140,160,0)
(14,105,0)
(43,19,0)
(179,200,0)
(8,65,0)
(28,94,0)
(30,161,0)
(191,146,0)
(208,149,0)
(130,137,0)
(113,203,0)
(128,3,0)
(68,27,0)
(173,50,0)
(183,63,0)
(32,187,0)
(8,22,0)
(111,87,0)
(149,84,0)
(99,46,0)
(4,148,0)
(135,166,0)
(22,110,0)
(98,21,0)
(166,135,0)
(190,57,0)
(32,63,0)
(166,76,0)
(113,28,0)
(35,161,0)
(3,128,0)
(84,65,0)
(33,83,0)
(44,131,0)
(67,168,0)
(26,146,0)
(200,63,0)
(149,29,0)
(80,74,0)
(186,87,0)
(125,22,0)
(97,168,0)
(114,6,0)
(57,84,0)
(63,164,0)
(54,168,0)
(52,71,0)
(77,6,0)
(19,4,0)
(56,50,0)
(22,46,0)
(131,148,0)
(112,78,0)
(76,110,0)
(117,173,0)
(102,71,0)
(74,63,0)
(83,168,0)
(9,86,0)
(107,115,0)
(173,63,0)
(76,166,1)
(149,116,1)
(5,31,1)
(53,109,1)
(149,6,1)
(10,79,1)
(3,184,1)
(113,6,1)
(187,134,1)
(20,7,1)
(47,119,1)
(63,164,1)
(139,87,1)
(149,28,1)
(31,27,1)
(68,17,1)
(161,35,1)
(84,207,1)
(113,203,1)
(135,55,1)
(115,107,1)
(78,63,1)
(142,63,1)
(182,5,1)
(8,72,1)
(208,149,1)
(126,82,1)
(149,137,1)
(181,169,1)
(105,14,1)
(35,63,1)
(166,135,1)
(203,63,1)
(138,99,1)
(116,63,1)
(113,185,1)
(208,113,1)
(183,63,1)
(151,47,1)
(3,63,1)
(94,62,1)
(207,144,1)
(44,198,1)
(47,122,1)
(154,165,1)
(70,126,1)
(188,152,1)
(89,64,1)
(82,13,1)
(22,46,1)
(1,187,1)
(152,10,1)
(7,33,1)
(19,43,1)
(157,182,1)
(194,123,1)
(180,2,1)
(78,50,1)
(184,101,1)
(64,161,1)
(147,128,1)
(57,203,1)
(65,159,1)
(98,21,1)
(186,139,1)
(105,91,1)
(140,91,1)
(16,131,1)
(12,36,1)
(166,61,1)
(200,63,1)
(134,32,1)
(173,63,1)
(26,90,1)
(173,50,1)
(205,201,1)
(52,102,1)
(185,34,1)
(75,94,1)
(41,125,1)
(28,173,1)
(198,86,1)
(164,186,1)
(131,148,1)
(15,69,1)
(57,84,1)
(68,27,1)
(17,131,1)
(175,16,1)
(31,146,1)
(24,109,1)
(149,203,1)
(125,85,1)
(189,110,1)
(95,71,1)
(179,200,1)
(183,59,1)
(154,142,1)
(17,205,1)
(119,85,1)
(149,84,1)
(196,64,1)
(109,27,1)
(47,89,1)
(161,78,1)
(140,131,1)
(80,45,1)
(187,32,1)
(117,196,1)
(96,160,1)
(114,77,1)
(155,29,1)
(174,130,1)
(162,118,1)
(110,76,1)
(30,56,1)
(57,190,1)
(163,145,1)
(74,63,1)
(17,91,1)
(148,4,1)
(128,3,1)
(85,194,1)
(151,171,1)
(31,60,1)
(111,158,1)
(152,198,1)
(72,41,1)
(149,40,1)
(161,27,1)
(8,65,1)
(129,155,1)
(36,78,1)
(37,9,1)
(83,39,1)
(170,63,1)
(99,63,1)
(143,37,1)
(34,151,1)
(5,106,1)
(21,179,1)
(124,199,1)
(162,69,1)
(113,29,1)
(33,143,1)
(169,69,1)
(112,30,1)
(2,147,1)
(197,95,1)
(78,83,1)
(9,116,1)
(103,183,1)
(148,152,1)
(160,68,1)
(105,131,1)
(23,65,1)
(47,96,1)
(86,192,1)
(57,137,1)
(79,44,1)
(147,27,1)
(59,88,1)
(197,27,1)
(192,7,1)
(25,105,1)
(14,167,1)
(69,115,1)
(38,110,1)
(206,108,1)
(78,156,1)
(47,176,1)
(57,116,1)
(16,11,1)
(135,63,1)
(192,20,1)
(146,63,1)
(87,51,1)
(73,74,1)
(123,103,1)
(71,52,1)
(29,180,1)
(173,83,1)
(186,87,1)
(113,116,1)
(32,48,1)
(136,120,1)
(6,63,1)
(130,169,1)
(107,53,1)
(201,175,1)
(33,50,1)
(90,162,1)
(132,22,1)
(145,75,1)
(98,197,1)
(8,63,1)
(123,183,1)
(57,28,1)
(115,27,1)
(99,124,1)
(48,188,1)
(167,131,1)
(190,16,1)
(6,114,1)
(55,93,1)
(110,22,1)
(202,5,1)
(173,117,1)
(113,137,1)
(22,27,1)
(142,206,1)
(178,170,1)
(58,21,1)
(64,73,1)
(50,136,1)
(127,68,1)
(46,99,1)
(195,161,1)
(176,147,1)
(172,105,1)
(35,12,1)
(190,160,1)
(21,27,1)
(62,28,1)
(47,38,1)
(57,29,1)
(32,63,1)
(200,163,1)
(8,194,1)
(191,26,1)
(165,142,1)
(137,63,1)
(77,98,1)
(120,129,1)
(46,138,1)
(40,25,1)
(16,91,1)
(11,172,1)
(102,58,1)
(149,29,1)
(47,181,1)
(88,6,1)
(84,63,1)
(113,28,1)
(150,127,1)
(208,57,1)
(4,187,1)
(152,63,1)
(109,70,1)
(156,112,1)
(126,63,1)
(93,132,1)
(47,24,1)
(137,174,1)
(101,23,1)
(47,66,1)
(160,140,1)
(51,111,1)
(118,137,1)
(39,203,1)
(146,191,1)
(29,63,1)
(140,150,1)
(43,1,1)
(61,135,1)
(113,84,1)
(203,178,1)
(4,19,1)
(159,84,1)
(87,171,1)
(120,63,1)
(33,83,1)
(122,56,1)
(60,146,1)
(74,80,1)
(56,50,1)
(144,83,1)
(116,157,1)
(106,31,1)
(199,8,1)
(22,8,1)
(169,15,1)
(71,63,1)
(108,173,1)
(57,6,1)
(13,189,1)
(33,63,1)
(28,154,1)
(45,195,1)
(47,202,1)
(66,98,1)
(185,85,2)
(37,5,2)
(173,63,2)
(4,187,2)
(151,147,2)
(192,7,2)
(106,169,2)
(35,56,2)
(113,64,2)
(182,5,2)
(142,64,2)
(55,85,2)
(162,169,2)
(33,50,2)
(69,115,2)
(19,5,2)
(185,110,2)
(137,63,2)
(66,98,2)
(149,84,2)
(96,160,2)
(113,160,2)
(31,169,2)
(151,160,2)
(24,109,2)
(110,76,2)
(29,63,2)
(110,22,2)
(46,85,2)
(34,5,2)
(187,5,2)
(35,63,2)
(185,98,2)
(152,63,2)
(17,16,2)
(34,109,2)
(150,16,2)
(151,169,2)
(7,33,2)
(20,5,2)
(113,56,2)
(10,5,2)
(53,109,2)
(74,63,2)
(149,203,2)
(47,98,2)
(47,147,2)
(22,85,2)
(109,110,2)
(78,56,2)
(197,95,2)
(132,85,2)
(93,85,2)
(68,17,2)
(185,64,2)
(146,169,2)
(196,64,2)
(71,21,2)
(146,63,2)
(41,85,2)
(21,27,2)
(149,137,2)
(163,64,2)
(208,113,2)
(188,5,2)
(86,192,2)
(140,131,2)
(57,116,2)
(145,64,2)
(57,29,2)
(47,109,2)
(183,63,2)
(161,35,2)
(113,84,2)
(45,56,2)
(205,16,2)
(34,85,2)
(7,5,2)
(105,131,2)
(63,164,2)
(191,169,2)
(14,5,2)
(120,63,2)
(68,27,2)
(62,64,2)
(187,32,2)
(82,110,2)
(166,135,2)
(195,56,2)
(69,109,2)
(109,70,2)
(190,16,2)
(70,126,2)
(47,110,2)
(88,98,2)
(131,5,2)
(179,200,2)
(108,64,2)
(149,28,2)
(56,50,2)
(131,148,2)
(113,137,2)
(12,56,2)
(47,85,2)
(115,109,2)
(13,110,2)
(161,27,2)
(98,64,2)
(151,110,2)
(30,56,2)
(57,137,2)
(149,116,2)
(155,147,2)
(125,85,2)
(38,110,2)
(189,110,2)
(197,27,2)
(169,69,2)
(179,64,2)
(95,71,2)
(78,63,2)
(138,85,2)
(185,5,2)
(5,31,2)
(107,109,2)
(126,110,2)
(8,63,2)
(4,5,2)
(143,5,2)
(122,56,2)
(172,105,2)
(34,169,2)
(151,56,2)
(25,105,2)
(123,98,2)
(156,56,2)
(34,147,2)
(32,5,2)
(130,169,2)
(28,64,2)
(22,8,2)
(152,198,2)
(199,85,2)
(200,63,2)
(113,85,2)
(99,63,2)
(47,160,2)
(185,160,2)
(68,16,2)
(44,5,2)
(185,147,2)
(126,63,2)
(113,203,2)
(180,147,2)
(185,169,2)
(17,131,2)
(50,147,2)
(57,84,2)
(34,160,2)
(84,63,2)
(154,142,2)
(147,128,2)
(80,56,2)
(151,109,2)
(74,56,2)
(76,85,2)
(98,197,2)
(98,21,2)
(22,27,2)
(151,171,2)
(183,98,2)
(21,64,2)
(40,105,2)
(142,63,2)
(116,63,2)
(71,63,2)
(89,64,2)
(3,63,2)
(32,63,2)
(148,5,2)
(201,16,2)
(85,194,2)
(31,27,2)
(34,64,2)
(151,85,2)
(136,120,2)
(194,123,2)
(140,16,2)
(64,56,2)
(112,56,2)
(87,171,2)
(162,69,2)
(208,149,2)
(157,5,2)
(113,6,2)
(202,5,2)
(76,166,2)
(85,98,2)
(120,147,2)
(86,5,2)
(135,63,2)
(6,98,2)
(113,28,2)
(79,5,2)
(147,27,2)
(186,87,2)
(148,152,2)
(173,50,2)
(5,169,2)
(127,16,2)
(48,5,2)
(165,64,2)
(110,85,2)
(43,5,2)
(77,98,2)
(8,85,2)
(185,109,2)
(198,5,2)
(21,179,2)
(109,27,2)
(149,29,2)
(151,5,2)
(17,91,2)
(123,183,2)
(192,5,2)
(73,74,2)
(22,46,2)
(151,64,2)
(175,16,2)
(8,65,2)
(174,169,2)
(105,91,2)
(169,109,2)
(57,28,2)
(56,147,2)
(34,98,2)
(70,110,2)
(173,64,2)
(15,109,2)
(4,19,2)
(194,98,2)
(119,85,2)
(208,57,2)
(140,91,2)
(47,64,2)
(33,5,2)
(124,85,2)
(118,169,2)
(57,6,2)
(33,83,2)
(185,56,2)
(117,64,2)
(29,147,2)
(47,169,2)
(6,63,2)
(59,98,2)
(61,85,2)
(90,169,2)
(197,21,2)
(113,110,2)
(8,194,2)
(136,147,2)
(103,98,2)
(11,105,2)
(2,147,2)
(149,6,2)
(160,140,2)
(167,5,2)
(64,73,2)
(113,116,2)
(57,16,2)
(1,5,2)
(57,160,2)
(113,109,2)
(161,56,2)
(28,173,2)
(114,98,2)
(28,154,2)
(105,5,2)
(57,203,2)
(73,56,2)
(161,78,2)
(115,27,2)
(152,5,2)
(36,56,2)
(31,146,2)
(176,147,2)
(149,105,2)
(16,91,2)
(9,5,2)
(137,169,2)
(164,186,2)
(113,5,2)
(148,4,2)
(151,98,2)
(134,5,2)
(64,161,2)
(78,83,2)
(129,147,2)
(166,85,2)
(52,21,2)
(46,99,2)
(99,85,2)
(190,160,2)
(72,85,2)
(34,56,2)
(102,21,2)
(135,85,2)
(33,63,2)
(113,147,2)
(78,50,2)
(47,56,2)
(94,64,2)
(113,98,2)
(16,131,2)
(154,64,2)
(16,105,2)
(181,169,2)
(113,29,2)
(203,63,2)
(198,86,2)
(34,110,2)
(95,21,2)
(47,5,2)
(173,83,2)
(60,169,2)
(116,5,2)
(200,64,2)
(160,16,2)
(75,64,2)
(50,136,2)
(160,68,2)
(113,169,2)
(206,64,2)
(26,169,2)
(128,3,2)
(58,21,2)
-----------------------------------
(0,c)
(1,15)
(2,txtdesc)
(3,txtdesc->asclen)
(4,txtdesc->uclen * 2 + 15 + 67)
(5,jas_stream_read(in, txtdesc->macdata, 67)
(6,txtdesc->ucdata)
(7,strlen(txtdesc->ascdata)
(8,txtdesc->ucdata)
(9,jas_iccuint32_t)
(10,asclen)
(11,cnt)
(12,asclen)
(13,txtdesc)
(14,cnt)
(15,EOF)
(16,n < cnt)
(17,cnt - n)
(18,if ((c = jas_stream_getc(in)
(19,15 + 67)
(20,1)
(21,jas_iccgetuint32(in, &txtdesc->uclangcode)
(22,jas_stream_read(in, txtdesc->ucdata, txtdesc->uclen * 2)
(23,in)
(24,goto error;)
(25,1)
(26,txtdesc)
(27,jas_stream_t *in)
(28,txtdesc->ascdata[txtdesc->asclen - 1])
(29,txtdesc->ascdata)
(30,in)
(31,jas_stream_read(in, txtdesc->macdata, 67)
(32,txtdesc->uclen)
(33,txtdesc->ascdata)
(34,1)
(35,txtdesc->asclen)
(36,txtdesc)
(37,txtdesc)
(38,goto error;)
(39,0)
(40,-1)
(41,txtdesc)
(42,if (jas_iccgetuint32(in, &txtdesc->asclen)
(43,67)
(44,n)
(45,txtdesc)
(46,txtdesc->uclen * 2)
(47,attrval)
(48,uclen)
(49,if (jas_stream_read(in, txtdesc->ucdata, txtdesc->uclen * 2)
(50,txtdesc->ascdata = jas_malloc(txtdesc->asclen)
(51,data)
(52,uclen)
(53,c)
(54,if (!(txtdesc->ucdata = jas_alloc2(txtdesc->uclen, 2)
(55,uclen)
(56,!(txtdesc->ascdata = jas_malloc(txtdesc->asclen)
(57,return 0;)
(58,in)
(59,uclen)
(60,67)
(61,2)
(62,'\\0')
(63,*txtdesc = &attrval->data.txtdesc)
(64,jas_stream_read(in, txtdesc->ascdata, txtdesc->asclen)
(65,txtdesc->ucdata = 0)
(66,goto error;)
(67,if (jas_iccgetuint16(in, &txtdesc->sccode)
(68,jas_stream_gobble(in, cnt - n)
(69,c = jas_stream_getc(in)
(70,&txtdesc->sccode)
(71,txtdesc->uclen)
(72,ucdata)
(73,JAS_CAST(int, txtdesc->asclen)
(74,txtdesc->asclen)
(75,in)
(76,JAS_CAST(int, txtdesc->uclen * 2)
(77,txtdesc)
(78,txtdesc->ascdata)
(79,txtdesc)
(80,asclen)
(81,)
(82,sccode)
(83,txtdesc->ascdata = 0)
(84,txtdesc->ucdata)
(85,!(txtdesc->ucdata = jas_alloc2(txtdesc->uclen, 2)
(86,JAS_CAST(jas_iccuint32_t, strlen(txtdesc->ascdata)
(87,attrval->data)
(88,txtdesc)
(89,goto error;)
(90,in)
(91,int cnt)
(92,if (n < cnt)
(93,txtdesc)
(94,txtdesc->ascdata[txtdesc->asclen - 1] = '\\0')
(95,&txtdesc->uclen)
(96,goto error;)
(97,if (jas_stream_read(in, txtdesc->ascdata, txtdesc->asclen)
(98,jas_iccgetuint32(in, &txtdesc->uclangcode)
(99,txtdesc->uclen)
(100,if (jas_stream_gobble(in, cnt - n)
(101,txtdesc)
(102,txtdesc)
(103,2)
(104,n)
(105,n > cnt)
(106,67)
(107,in)
(108,txtdesc)
(109,jas_iccgetuint16(in, &txtdesc->sccode)
(110,jas_stream_read(in, txtdesc->ucdata, txtdesc->uclen * 2)
(111,attrval)
(112,txtdesc)
(113,return -1;)
(114,ucdata)
(115,jas_stream_getc(in)
(116,txtdesc->asclen)
(117,ascdata)
(118,c)
(119,goto error;)
(120,txtdesc->asclen)
(121,)
(122,goto error;)
(123,jas_alloc2(txtdesc->uclen, 2)
(124,uclen)
(125,in)
(126,txtdesc->sccode)
(127,cnt)
(128,&txtdesc->asclen)
(129,asclen)
(130,txtdesc)
(131,n = txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67)
(132,int)
(133,if (!(txtdesc->ascdata = jas_malloc(txtdesc->asclen)
(134,2)
(135,txtdesc->uclen)
(136,jas_malloc(txtdesc->asclen)
(137,txtdesc->maclen)
(138,2)
(139,txtdesc)
(140,cnt - n)
(141,if (n > cnt)
(142,txtdesc->asclen)
(143,ascdata)
(144,txtdesc)
(145,txtdesc)
(146,txtdesc->macdata)
(147,jas_iccgetuint32(in, &txtdesc->asclen)
(148,txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67)
(149,return -1;)
(150,n)
(151,jas_icctxtdesc_destroy(attrval)
(152,txtdesc->asclen)
(153,txtdesc)
(154,txtdesc->asclen - 1)
(155,txtdesc)
(156,ascdata)
(157,asclen)
(158,txtdesc)
(159,0)
(160,jas_stream_gobble(in, cnt - n)
(161,jas_stream_read(in, txtdesc->ascdata, txtdesc->asclen)
(162,txtdesc->maclen = c)
(163,uclangcode)
(164,&attrval->data.txtdesc)
(165,1)
(166,txtdesc->uclen * 2)
(167,n)
(168,)
(169,(c = jas_stream_getc(in)
(170,txtdesc)
(171,jas_iccattrval_t *attrval)
(172,n)
(173,txtdesc->ascdata)
(174,maclen)
(175,in)
(176,goto error;)
(177,if (jas_stream_read(in, txtdesc->macdata, 67)
(178,ascdata)
(179,&txtdesc->uclangcode)
(180,ascdata)
(181,goto error;)
(182,txtdesc)
(183,txtdesc->uclen)
(184,asclen)
(185,-1)
(186,attrval->data.txtdesc)
(187,txtdesc->uclen * 2)
(188,txtdesc)
(189,in)
(190,0)
(191,macdata)
(192,strlen(txtdesc->ascdata)
(193,error:)
(194,txtdesc->ucdata = jas_alloc2(txtdesc->uclen, 2)
(195,int)
(196,txtdesc)
(197,jas_iccgetuint32(in, &txtdesc->uclen)
(198,txtdesc->asclen = JAS_CAST(jas_iccuint32_t, strlen(txtdesc->ascdata)
(199,txtdesc)
(200,txtdesc->uclangcode)
(201,cnt)
(202,goto error;)
(203,txtdesc->ascdata)
(204,if (jas_iccgetuint32(in, &txtdesc->uclangcode)
(205,n)
(206,asclen)
(207,ucdata)
(208,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
