-----label-----
1
-----code-----
void jas_matrix_clip(jas_matrix_t *matrix, jas_seqent_t minval, jas_seqent_t maxval)
{
	int i;
	int j;
	jas_seqent_t v;
	jas_seqent_t *rowstart;
	jas_seqent_t *data;
	int rowstep;

	rowstep = jas_matrix_rowstep(matrix);
	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
	  rowstart += rowstep) {
		data = rowstart;
		for (j = matrix->numcols_, data = rowstart; j > 0; --j,
		  ++data) {
			v = *data;
			if (v < minval) {
				*data = minval;
			} else if (v > maxval) {
				*data = maxval;
			}
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
23,24
23,25
25,26
27,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
42,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
53,54
53,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
73,74
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
85,86
85,87
86,87
89,90
89,91
90,91
91,92
93,94
93,95
94,95
96,97
98,99
98,100
99,100
100,101
100,102
101,102
103,104
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
108,110
109,110
111,112
111,113
112,113
115,116
115,117
116,117
118,119
120,121
120,122
121,122
124,125
124,126
125,126
126,127
128,129
129,130
131,132
131,133
132,133
133,134
133,135
134,135
136,137
137,138
139,140
139,141
139,142
140,141
140,142
141,142
143,144
145,146
146,147
147,148
147,149
148,149
149,150
151,152
153,154
153,155
154,155
154,156
155,156
157,158
159,160
160,161
161,162
161,163
162,163
163,164
165,166
-----nextToken-----
2,4,7,9,10,13,15,18,20,24,26,29,31,35,37,41,43,44,48,50,51,54,56,60,63,65,71,74,75,78,82,83,84,87,88,92,95,97,102,104,110,113,114,117,119,122,123,127,130,135,138,142,144,150,152,156,158,164,166
-----computeFrom-----
58,59
58,60
69,70
69,71
76,77
76,78
85,86
85,87
93,94
93,95
100,101
100,102
108,109
108,110
115,116
115,117
120,121
120,122
133,134
133,135
140,141
140,142
147,148
147,149
154,155
154,156
161,162
161,163
-----guardedBy-----
144,152
158,166
-----guardedByNegation-----
142,156
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionList;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void jas_matrix_clip(jas_matrix_t *matrix, jas_seqent_t minval, jas_seqent_t maxval){	int i;	int j;	jas_seqent_t v;	jas_seqent_t *rowstart;	jas_seqent_t *data;	int rowstep;	rowstep = jas_matrix_rowstep(matrix);	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,	  rowstart += rowstep) {		data = rowstart;		for (j = matrix->numcols_, data = rowstart; j > 0; --j,		  ++data) {			v = *data;			if (v < minval) {				*data = minval;			} else if (v > maxval) {				*data = maxval;			}		}	}}
void
jas_matrix_clip(jas_matrix_t *matrix, jas_seqent_t minval, jas_seqent_t maxval)
jas_matrix_clip
jas_matrix_t *matrix
jas_matrix_t
jas_matrix_t
*matrix
*
matrix
jas_seqent_t minval
jas_seqent_t
jas_seqent_t
minval
minval
jas_seqent_t maxval
jas_seqent_t
jas_seqent_t
maxval
maxval
{	int i;	int j;	jas_seqent_t v;	jas_seqent_t *rowstart;	jas_seqent_t *data;	int rowstep;	rowstep = jas_matrix_rowstep(matrix);	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,	  rowstart += rowstep) {		data = rowstart;		for (j = matrix->numcols_, data = rowstart; j > 0; --j,		  ++data) {			v = *data;			if (v < minval) {				*data = minval;			} else if (v > maxval) {				*data = maxval;			}		}	}}
int i;
int i;
int
i
i
int j;
int j;
int
j
j
jas_seqent_t v;
jas_seqent_t v;
jas_seqent_t
jas_seqent_t
v
v
jas_seqent_t *rowstart;
jas_seqent_t *rowstart;
jas_seqent_t
jas_seqent_t
*rowstart
*
rowstart
jas_seqent_t *data;
jas_seqent_t *data;
jas_seqent_t
jas_seqent_t
*data
*
data
int rowstep;
int rowstep;
int
rowstep
rowstep
rowstep = jas_matrix_rowstep(matrix);
rowstep = jas_matrix_rowstep(matrix)
rowstep
rowstep
jas_matrix_rowstep(matrix)
jas_matrix_rowstep
jas_matrix_rowstep
matrix
matrix
for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,	  rowstart += rowstep) {		data = rowstart;		for (j = matrix->numcols_, data = rowstart; j > 0; --j,		  ++data) {			v = *data;			if (v < minval) {				*data = minval;			} else if (v > maxval) {				*data = maxval;			}		}	}
i = matrix->numrows_, rowstart = matrix->rows_[0];
i = matrix->numrows_, rowstart = matrix->rows_[0]
i = matrix->numrows_
i
i
matrix->numrows_
matrix
matrix
numrows_
rowstart = matrix->rows_[0]
rowstart
rowstart
matrix->rows_[0]
matrix->rows_
matrix
matrix
rows_
0
i > 0
i
i
0
--i,	  rowstart += rowstep
--i
i
i
rowstart += rowstep
rowstart
rowstart
rowstep
rowstep
{		data = rowstart;		for (j = matrix->numcols_, data = rowstart; j > 0; --j,		  ++data) {			v = *data;			if (v < minval) {				*data = minval;			} else if (v > maxval) {				*data = maxval;			}		}	}
data = rowstart;
data = rowstart
data
data
rowstart
rowstart
for (j = matrix->numcols_, data = rowstart; j > 0; --j,		  ++data) {			v = *data;			if (v < minval) {				*data = minval;			} else if (v > maxval) {				*data = maxval;			}		}
j = matrix->numcols_, data = rowstart;
j = matrix->numcols_, data = rowstart
j = matrix->numcols_
j
j
matrix->numcols_
matrix
matrix
numcols_
data = rowstart
data
data
rowstart
rowstart
j > 0
j
j
0
--j,		  ++data
--j
j
j
++data
data
data
{			v = *data;			if (v < minval) {				*data = minval;			} else if (v > maxval) {				*data = maxval;			}		}
v = *data;
v = *data
v
v
*data
data
data
if (v < minval) {				*data = minval;			} else if (v > maxval) {				*data = maxval;			}
v < minval
v
v
minval
minval
{				*data = minval;			}
*data = minval;
*data = minval
*data
data
data
minval
minval
if (v > maxval) {				*data = maxval;			}
v > maxval
v
v
maxval
maxval
{				*data = maxval;			}
*data = maxval;
*data = maxval
*data
data
data
maxval
maxval
-----joern-----
(22,37,0)
(70,75,0)
(1,70,0)
(8,75,0)
(63,75,0)
(81,54,0)
(20,64,0)
(14,42,0)
(43,10,0)
(15,69,0)
(60,63,0)
(16,37,0)
(25,26,0)
(41,7,0)
(10,43,0)
(48,42,0)
(36,26,0)
(70,1,0)
(48,63,0)
(43,37,0)
(26,1,0)
(37,11,0)
(81,28,0)
(26,26,0)
(62,10,0)
(66,43,0)
(33,55,0)
(41,45,0)
(23,26,0)
(28,8,0)
(57,69,0)
(19,63,0)
(2,23,0)
(27,37,0)
(71,55,0)
(12,79,0)
(28,11,0)
(24,64,0)
(4,79,0)
(43,41,0)
(61,70,0)
(37,14,0)
(67,34,0)
(26,14,0)
(49,57,0)
(58,5,0)
(1,79,0)
(64,75,0)
(21,48,0)
(43,57,0)
(23,14,0)
(26,52,0)
(15,10,0)
(17,28,0)
(8,28,0)
(27,41,0)
(55,48,0)
(65,79,0)
(49,37,0)
(18,15,0)
(14,20,0)
(46,79,0)
(51,1,0)
(30,10,0)
(53,8,0)
(9,37,0)
(34,28,0)
(31,8,0)
(77,30,0)
(59,48,0)
(37,26,0)
(3,81,0)
(22,54,0)
(30,7,0)
(64,20,0)
(50,79,0)
(68,14,0)
(44,22,0)
(40,30,0)
(13,15,0)
(57,73,0)
(10,5,0)
(74,57,0)
(80,20,0)
(35,23,0)
(76,79,0)
(32,38,0)
(72,41,0)
(20,14,0)
(23,38,0)
(0,49,0)
(39,21,0)
(56,79,0)
(21,52,0)
(6,34,0)
(63,48,0)
(78,64,0)
(29,27,0)
(80,64,1)
(3,15,1)
(57,74,1)
(23,26,1)
(64,24,1)
(55,71,1)
(22,44,1)
(61,51,1)
(43,57,1)
(34,28,1)
(6,37,1)
(63,60,1)
(3,57,1)
(0,15,1)
(74,49,1)
(1,70,1)
(15,10,1)
(26,36,1)
(8,75,1)
(9,28,1)
(47,55,1)
(78,68,1)
(70,61,1)
(41,72,1)
(8,31,1)
(41,7,1)
(37,16,1)
(31,53,1)
(30,10,1)
(23,2,1)
(27,37,1)
(62,34,1)
(2,35,1)
(44,81,1)
(15,69,1)
(64,75,1)
(59,1,1)
(81,3,1)
(29,30,1)
(14,20,1)
(60,19,1)
(77,40,1)
(40,10,1)
(57,69,1)
(19,59,1)
(21,39,1)
(63,75,1)
(49,37,1)
(30,77,1)
(53,17,1)
(49,0,1)
(26,14,1)
(28,8,1)
(13,30,1)
(34,67,1)
(48,63,1)
(37,26,1)
(21,48,1)
(35,55,1)
(43,41,1)
(25,21,1)
(43,66,1)
(30,7,1)
(70,75,1)
(26,26,1)
(71,33,1)
(10,43,1)
(37,14,1)
(16,9,1)
(33,14,1)
(43,37,1)
(81,28,1)
(33,26,1)
(18,13,1)
(26,1,1)
(55,48,1)
(20,64,1)
(15,18,1)
(6,22,1)
(72,27,1)
(23,14,1)
(22,37,1)
(24,78,1)
(39,34,1)
(66,62,1)
(3,41,1)
(68,48,1)
(27,29,1)
(36,25,1)
(67,6,1)
(20,80,1)
(17,23,1)
(20,64,2)
(62,34,2)
(35,55,2)
(3,34,2)
(49,15,2)
(36,55,2)
(34,28,2)
(74,15,2)
(57,69,2)
(66,34,2)
(43,41,2)
(30,7,2)
(31,55,2)
(41,30,2)
(26,55,2)
(23,14,2)
(43,57,2)
(43,37,2)
(77,34,2)
(23,26,2)
(34,55,2)
(72,30,2)
(2,55,2)
(37,14,2)
(26,14,2)
(53,55,2)
(17,55,2)
(16,55,2)
(70,75,2)
(44,34,2)
(40,34,2)
(10,34,2)
(63,75,2)
(29,30,2)
(27,30,2)
(26,1,2)
(22,37,2)
(8,75,2)
(15,69,2)
(48,63,2)
(57,15,2)
(0,15,2)
(30,34,2)
(55,48,2)
(55,55,2)
(27,37,2)
(21,55,2)
(49,37,2)
(14,20,2)
(33,55,2)
(9,55,2)
(22,34,2)
(39,55,2)
(25,55,2)
(10,43,2)
(15,30,2)
(43,34,2)
(28,55,2)
(67,34,2)
(6,34,2)
(26,26,2)
(34,34,2)
(41,7,2)
(21,48,2)
(15,10,2)
(71,55,2)
(28,8,2)
(81,34,2)
(6,55,2)
(64,75,2)
(1,70,2)
(23,55,2)
(37,26,2)
(8,55,2)
(37,55,2)
(18,30,2)
(81,28,2)
(30,10,2)
(67,55,2)
(13,30,2)
-----------------------------------
(0,data)
(1,rowstep = jas_matrix_rowstep(matrix)
(2,rowstart)
(3,j)
(4,i)
(5,)
(6,j)
(7,jas_seqent_t minval)
(8,matrix->numcols_)
(9,data)
(10,v = *data)
(11,)
(12,data)
(13,v)
(14,rowstart = matrix->rows_[0])
(15,v > maxval)
(16,rowstart)
(17,j)
(18,maxval)
(19,matrix)
(20,matrix->rows_[0])
(21,--i)
(22,++data)
(23,data = rowstart)
(24,rows_)
(25,rowstart)
(26,rowstart += rowstep)
(27,*data)
(28,j = matrix->numcols_)
(29,data)
(30,v < minval)
(31,numcols_)
(32,for (j = matrix->numcols_, data = rowstart; j > 0; --j,\\n\\t\\t  ++data)
(33,i)
(34,j > 0)
(35,data)
(36,rowstep)
(37,data = rowstart)
(38,)
(39,i)
(40,v)
(41,*data = minval)
(42,)
(43,*data)
(44,data)
(45,)
(46,j)
(47,RET)
(48,i = matrix->numrows_)
(49,*data)
(50,for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,\\n\\t  rowstart += rowstep)
(51,rowstep)
(52,)
(53,matrix)
(54,)
(55,i > 0)
(56,rowstep)
(57,*data = maxval)
(58,if (v < minval)
(59,i)
(60,numrows_)
(61,matrix)
(62,v)
(63,matrix->numrows_)
(64,matrix->rows_)
(65,rowstart)
(66,data)
(67,0)
(68,rowstart)
(69,jas_seqent_t maxval)
(70,jas_matrix_rowstep(matrix)
(71,0)
(72,minval)
(73,)
(74,maxval)
(75,jas_matrix_t *matrix)
(76,v)
(77,minval)
(78,matrix)
(79,)
(80,0)
(81,--j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
