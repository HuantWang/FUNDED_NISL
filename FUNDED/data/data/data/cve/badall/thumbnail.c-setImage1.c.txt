-----label-----
1
-----code-----
static void
setImage1(const uint8* br, uint32 rw, uint32 rh)
{
    int step = rh;
    int limit = tnh;
    int err = 0;
    int bpr = TIFFhowmany8(rw);
    int sy = 0;
    uint8* row = thumbnail;
    uint32 dy;
    for (dy = 0; dy < tnh; dy++) {
	const uint8* rows[256];
	uint32 nrows = 1;
	fprintf(stderr, "bpr=%d, sy=%d, bpr*sy=%d\n", bpr, sy, bpr*sy);
	rows[0] = br + bpr*sy;
	err += step;
	while (err >= limit) {
	    err -= limit;
	    sy++;
	    if (err >= limit)
		rows[nrows++] = br + bpr*sy;
	}
	setrow(row, nrows, rows);
	row += tnw;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
23,24
23,25
25,26
25,27
27,28
28,29
30,31
31,32
31,33
33,34
33,35
35,36
36,37
38,39
39,40
39,41
41,42
41,43
43,44
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
59,60
59,61
61,62
63,64
64,65
64,66
65,66
67,68
67,69
67,70
70,71
71,72
73,74
74,75
74,76
75,76
77,78
79,80
79,81
79,82
79,83
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
90,91
91,92
93,94
93,95
93,96
93,97
93,98
93,99
93,100
93,101
94,95
95,96
95,97
96,97
98,99
98,100
98,101
101,102
103,104
104,105
104,106
105,106
107,108
107,109
109,110
111,112
112,113
112,114
112,115
112,116
112,117
112,118
113,114
115,116
118,119
120,121
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
129,131
130,131
133,134
133,135
134,135
136,137
136,138
137,138
139,140
141,142
142,143
142,144
143,144
145,146
147,148
147,149
148,149
148,150
149,150
151,152
153,154
153,155
153,156
154,155
155,156
155,157
156,157
158,159
160,161
161,162
162,163
164,165
164,166
165,166
165,167
166,167
168,169
170,171
171,172
171,173
172,173
172,174
173,174
175,176
176,177
178,179
178,180
179,180
181,182
181,183
182,183
184,185
186,187
187,188
187,189
187,190
187,191
188,189
190,191
192,193
194,195
196,197
197,198
197,199
198,199
200,201
-----nextToken-----
2,4,7,9,10,13,15,18,20,24,26,29,32,34,37,40,42,44,47,49,53,55,58,60,62,66,68,69,72,76,78,83,84,87,89,92,97,99,100,102,106,108,110,114,116,117,119,121,124,126,131,132,135,138,140,144,146,150,152,157,159,163,167,169,174,177,180,183,185,189,191,193,195,199,201
-----computeFrom-----
81,82
81,83
85,86
85,87
122,123
122,124
128,129
128,130
133,134
133,135
136,137
136,138
142,143
142,144
148,149
148,150
155,156
155,157
165,166
165,167
171,172
171,173
178,179
178,180
181,182
181,183
197,198
197,199
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static voidsetImage1(const uint8* br, uint32 rw, uint32 rh){    int step = rh;    int limit = tnh;    int err = 0;    int bpr = TIFFhowmany8(rw);    int sy = 0;    uint8* row = thumbnail;    uint32 dy;    for (dy = 0; dy < tnh; dy++) {	const uint8* rows[256];	uint32 nrows = 1;	fprintf(stderr, "bpr=%d, sy=%d, bpr*sy=%d\n", bpr, sy, bpr*sy);	rows[0] = br + bpr*sy;	err += step;	while (err >= limit) {	    err -= limit;	    sy++;	    if (err >= limit)		rows[nrows++] = br + bpr*sy;	}	setrow(row, nrows, rows);	row += tnw;    }}
static void
setImage1(const uint8* br, uint32 rw, uint32 rh)
setImage1
const uint8* br
const uint8
uint8
* br
*
br
uint32 rw
uint32
uint32
rw
rw
uint32 rh
uint32
uint32
rh
rh
{    int step = rh;    int limit = tnh;    int err = 0;    int bpr = TIFFhowmany8(rw);    int sy = 0;    uint8* row = thumbnail;    uint32 dy;    for (dy = 0; dy < tnh; dy++) {	const uint8* rows[256];	uint32 nrows = 1;	fprintf(stderr, "bpr=%d, sy=%d, bpr*sy=%d\n", bpr, sy, bpr*sy);	rows[0] = br + bpr*sy;	err += step;	while (err >= limit) {	    err -= limit;	    sy++;	    if (err >= limit)		rows[nrows++] = br + bpr*sy;	}	setrow(row, nrows, rows);	row += tnw;    }}
int step = rh;
int step = rh;
int
step = rh
step
= rh
rh
rh
int limit = tnh;
int limit = tnh;
int
limit = tnh
limit
= tnh
tnh
tnh
int err = 0;
int err = 0;
int
err = 0
err
= 0
0
int bpr = TIFFhowmany8(rw);
int bpr = TIFFhowmany8(rw);
int
bpr = TIFFhowmany8(rw)
bpr
= TIFFhowmany8(rw)
TIFFhowmany8(rw)
TIFFhowmany8
TIFFhowmany8
rw
rw
int sy = 0;
int sy = 0;
int
sy = 0
sy
= 0
0
uint8* row = thumbnail;
uint8* row = thumbnail;
uint8
uint8
* row = thumbnail
*
row
= thumbnail
thumbnail
thumbnail
uint32 dy;
uint32 dy;
uint32
uint32
dy
dy
for (dy = 0; dy < tnh; dy++) {	const uint8* rows[256];	uint32 nrows = 1;	fprintf(stderr, "bpr=%d, sy=%d, bpr*sy=%d\n", bpr, sy, bpr*sy);	rows[0] = br + bpr*sy;	err += step;	while (err >= limit) {	    err -= limit;	    sy++;	    if (err >= limit)		rows[nrows++] = br + bpr*sy;	}	setrow(row, nrows, rows);	row += tnw;    }
dy = 0;
dy = 0
dy
dy
0
dy < tnh
dy
dy
tnh
tnh
dy++
dy
dy
{	const uint8* rows[256];	uint32 nrows = 1;	fprintf(stderr, "bpr=%d, sy=%d, bpr*sy=%d\n", bpr, sy, bpr*sy);	rows[0] = br + bpr*sy;	err += step;	while (err >= limit) {	    err -= limit;	    sy++;	    if (err >= limit)		rows[nrows++] = br + bpr*sy;	}	setrow(row, nrows, rows);	row += tnw;    }
const uint8* rows[256];
const uint8* rows[256];
const uint8
uint8
* rows[256]
*
rows
[256]
256
uint32 nrows = 1;
uint32 nrows = 1;
uint32
uint32
nrows = 1
nrows
= 1
1
fprintf(stderr, "bpr=%d, sy=%d, bpr*sy=%d\n", bpr, sy, bpr*sy);
fprintf(stderr, "bpr=%d, sy=%d, bpr*sy=%d\n", bpr, sy, bpr*sy)
fprintf
fprintf
stderr
stderr
"bpr=%d, sy=%d, bpr*sy=%d\n"
bpr
bpr
sy
sy
bpr*sy
bpr
bpr
sy
sy
rows[0] = br + bpr*sy;
rows[0] = br + bpr*sy
rows[0]
rows
rows
0
br + bpr*sy
br
br
bpr*sy
bpr
bpr
sy
sy
err += step;
err += step
err
err
step
step
while (err >= limit) {	    err -= limit;	    sy++;	    if (err >= limit)		rows[nrows++] = br + bpr*sy;	}
err >= limit
err
err
limit
limit
{	    err -= limit;	    sy++;	    if (err >= limit)		rows[nrows++] = br + bpr*sy;	}
err -= limit;
err -= limit
err
err
limit
limit
sy++;
sy++
sy
sy
if (err >= limit)		rows[nrows++] = br + bpr*sy;
err >= limit
err
err
limit
limit
rows[nrows++] = br + bpr*sy;
rows[nrows++] = br + bpr*sy
rows[nrows++]
rows
rows
nrows++
nrows
nrows
br + bpr*sy
br
br
bpr*sy
bpr
bpr
sy
sy
setrow(row, nrows, rows);
setrow(row, nrows, rows)
setrow
setrow
row
row
nrows
nrows
rows
rows
row += tnw;
row += tnw
row
row
tnw
tnw
-----joern-----
(9,54,0)
(16,28,0)
(74,0,0)
(18,1,0)
(30,54,0)
(43,22,0)
(83,54,0)
(21,72,0)
(40,15,0)
(56,53,0)
(52,78,0)
(0,72,0)
(15,35,0)
(45,15,0)
(24,83,0)
(53,84,0)
(14,60,0)
(26,51,0)
(94,69,0)
(57,72,0)
(73,84,0)
(28,28,0)
(71,18,0)
(81,18,0)
(44,82,0)
(3,69,0)
(74,35,0)
(80,44,0)
(96,88,0)
(65,92,0)
(67,69,0)
(38,88,0)
(79,84,0)
(87,60,0)
(93,44,0)
(74,83,0)
(64,30,0)
(20,30,0)
(58,36,0)
(22,43,0)
(34,89,0)
(9,30,0)
(51,15,0)
(37,72,0)
(5,69,0)
(88,89,0)
(23,54,0)
(9,71,0)
(68,82,0)
(47,54,0)
(89,69,0)
(71,69,0)
(25,83,0)
(7,37,0)
(27,37,0)
(31,39,0)
(60,0,0)
(84,69,0)
(42,69,0)
(78,72,0)
(0,74,0)
(8,71,0)
(30,9,0)
(36,37,0)
(39,72,0)
(41,69,0)
(13,9,0)
(54,69,0)
(22,40,0)
(30,71,0)
(32,65,0)
(51,54,0)
(63,28,0)
(33,9,0)
(43,39,0)
(91,82,0)
(19,68,0)
(95,41,0)
(53,39,0)
(83,74,0)
(85,69,0)
(66,30,0)
(15,40,0)
(37,65,0)
(10,54,0)
(2,65,0)
(36,89,0)
(12,74,0)
(47,59,0)
(37,37,0)
(90,39,0)
(11,78,0)
(55,53,0)
(48,59,0)
(4,72,0)
(70,89,0)
(53,72,0)
(36,28,0)
(51,71,0)
(78,84,0)
(53,78,0)
(28,59,0)
(50,22,0)
(37,41,0)
(76,69,0)
(30,72,0)
(62,82,0)
(6,30,0)
(83,71,0)
(61,51,0)
(17,41,0)
(88,28,0)
(28,89,0)
(46,69,0)
(65,69,0)
(28,37,0)
(49,47,0)
(15,51,0)
(29,36,0)
(78,78,0)
(86,43,0)
(18,71,0)
(37,28,0)
(77,53,0)
(93,80,1)
(30,54,1)
(88,38,1)
(28,28,1)
(30,9,1)
(71,18,1)
(64,20,1)
(53,56,1)
(78,52,1)
(18,1,1)
(15,35,1)
(29,58,1)
(43,39,1)
(38,96,1)
(54,10,1)
(70,34,1)
(83,25,1)
(81,8,1)
(30,71,1)
(37,28,1)
(47,49,1)
(88,28,1)
(68,19,1)
(53,78,1)
(50,88,1)
(65,92,1)
(88,89,1)
(52,11,1)
(51,26,1)
(37,27,1)
(56,77,1)
(27,7,1)
(6,39,1)
(58,37,1)
(22,43,1)
(20,66,1)
(53,84,1)
(31,44,1)
(66,6,1)
(78,84,1)
(44,93,1)
(17,95,1)
(82,62,1)
(28,37,1)
(80,68,1)
(23,71,1)
(65,32,1)
(87,14,1)
(28,63,1)
(91,84,1)
(86,50,1)
(84,79,1)
(51,54,1)
(74,35,1)
(58,40,1)
(78,78,1)
(90,31,1)
(44,82,1)
(16,36,1)
(68,82,1)
(41,17,1)
(55,36,1)
(18,81,1)
(32,2,1)
(53,39,1)
(11,53,1)
(12,60,1)
(13,33,1)
(83,54,1)
(96,47,1)
(10,23,1)
(80,82,1)
(34,65,1)
(36,28,1)
(63,16,1)
(73,54,1)
(89,70,1)
(43,86,1)
(37,37,1)
(9,13,1)
(74,83,1)
(61,45,1)
(7,0,1)
(37,65,1)
(19,78,1)
(83,71,1)
(79,73,1)
(49,28,1)
(36,29,1)
(47,54,1)
(51,71,1)
(40,15,1)
(25,24,1)
(75,44,1)
(60,87,1)
(62,91,1)
(36,89,1)
(9,71,1)
(39,90,1)
(33,64,1)
(8,41,1)
(95,89,1)
(14,30,1)
(77,55,1)
(9,54,1)
(58,88,1)
(24,12,1)
(0,74,1)
(37,41,1)
(45,22,1)
(15,51,1)
(26,61,1)
(36,37,1)
(28,89,1)
(24,44,2)
(80,44,2)
(7,44,2)
(44,82,2)
(28,36,2)
(88,28,2)
(27,44,2)
(43,39,2)
(40,88,2)
(39,44,2)
(43,88,2)
(9,71,2)
(36,44,2)
(36,89,2)
(45,88,2)
(16,36,2)
(60,44,2)
(96,36,2)
(56,44,2)
(74,83,2)
(6,44,2)
(14,44,2)
(29,44,2)
(37,41,2)
(13,44,2)
(36,28,2)
(30,9,2)
(29,36,2)
(18,1,2)
(77,44,2)
(71,18,2)
(51,71,2)
(37,44,2)
(33,44,2)
(78,44,2)
(55,44,2)
(74,35,2)
(31,44,2)
(9,44,2)
(12,44,2)
(44,44,2)
(68,44,2)
(66,44,2)
(68,82,2)
(15,88,2)
(40,15,2)
(58,44,2)
(53,84,2)
(22,43,2)
(15,35,2)
(53,39,2)
(63,36,2)
(28,89,2)
(28,28,2)
(87,44,2)
(20,44,2)
(25,44,2)
(51,88,2)
(30,71,2)
(64,44,2)
(37,65,2)
(36,36,2)
(61,88,2)
(36,37,2)
(22,88,2)
(83,71,2)
(37,28,2)
(51,54,2)
(0,74,2)
(88,36,2)
(50,88,2)
(88,89,2)
(15,51,2)
(28,37,2)
(58,36,2)
(53,78,2)
(0,44,2)
(78,84,2)
(11,44,2)
(52,44,2)
(19,44,2)
(38,36,2)
(83,44,2)
(30,54,2)
(26,88,2)
(86,88,2)
(93,44,2)
(30,44,2)
(47,36,2)
(53,44,2)
(74,44,2)
(83,54,2)
(37,37,2)
(9,54,2)
(49,36,2)
(78,78,2)
(47,54,2)
(65,92,2)
(90,44,2)
-----------------------------------
(0,rows[0] = br + bpr*sy)
(1,uint32 rw)
(2,step)
(3,for (dy = 0; dy < tnh; dy++)
(4,nrows)
(5,err)
(6,stderr)
(7,err)
(8,bpr)
(9,bpr*sy)
(10,0)
(11,row)
(12,br)
(13,sy)
(14,rows)
(15,br + bpr*sy)
(16,err)
(17,0)
(18,TIFFhowmany8(rw)
(19,dy)
(20,bpr)
(21,while (err >= limit)
(22,rows[nrows++])
(23,sy)
(24,bpr)
(25,sy)
(26,sy)
(27,step)
(28,err -= limit)
(29,limit)
(30,fprintf(stderr, "bpr=%d, sy=%d, bpr*sy=%d\\n", bpr, sy, bpr*sy)
(31,nrows)
(32,rh)
(33,bpr)
(34,limit)
(35,const uint8* br)
(36,err >= limit)
(37,err += step)
(38,limit)
(39,nrows = 1)
(40,rows[nrows++] = br + bpr*sy)
(41,err = 0)
(42,row)
(43,nrows++)
(44,dy < tnh)
(45,br)
(46,dy)
(47,sy++)
(48,if (err >= limit)
(49,sy)
(50,rows)
(51,bpr*sy)
(52,tnw)
(53,setrow(row, nrows, rows)
(54,sy = 0)
(55,row)
(56,rows)
(57,rows)
(58,err)
(59,)
(60,rows[0])
(61,bpr)
(62,0)
(63,limit)
(64,sy)
(65,step = rh)
(66,"bpr=%d, sy=%d, bpr*sy=%d\\n")
(67,limit)
(68,dy++)
(69,)
(70,tnh)
(71,bpr = TIFFhowmany8(rw)
(72,)
(73,row)
(74,br + bpr*sy)
(75,RET)
(76,bpr)
(77,nrows)
(78,row += tnw)
(79,thumbnail)
(80,dy)
(81,rw)
(82,dy = 0)
(83,bpr*sy)
(84,* row = thumbnail)
(85,sy)
(86,nrows)
(87,0)
(88,err >= limit)
(89,limit = tnh)
(90,1)
(91,dy)
(92,uint32 rh)
(93,tnh)
(94,step)
(95,err)
(96,err)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
