-----label-----
1
-----code-----
char *jas_strdup(const char *s)
{
	size_t n;
	char *p;
	n = strlen(s) + 1;
	if (!(p = jas_malloc(n))) {
		return 0;
	}
	strcpy(p, s);
	return p;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
35,36
35,37
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
47,48
49,50
50,51
50,52
50,53
51,52
53,54
55,56
57,58
58,59
-----nextToken-----
2,4,5,7,9,10,15,17,20,22,23,27,31,33,34,40,43,45,48,52,54,56,59
-----computeFrom-----
25,26
25,27
28,29
28,30
38,39
38,40
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
char *jas_strdup(const char *s){	size_t n;	char *p;	n = strlen(s) + 1;	if (!(p = jas_malloc(n))) {		return 0;	}	strcpy(p, s);	return p;}
char
*jas_strdup(const char *s)
*
jas_strdup
const char *s
const char
*s
*
s
{	size_t n;	char *p;	n = strlen(s) + 1;	if (!(p = jas_malloc(n))) {		return 0;	}	strcpy(p, s);	return p;}
size_t n;
size_t n;
size_t
size_t
n
n
char *p;
char *p;
char
*p
*
p
n = strlen(s) + 1;
n = strlen(s) + 1
n
n
strlen(s) + 1
strlen(s)
strlen
strlen
s
s
1
if (!(p = jas_malloc(n))) {		return 0;	}
!(p = jas_malloc(n))
(p = jas_malloc(n))
p = jas_malloc(n)
p
p
jas_malloc(n)
jas_malloc
jas_malloc
n
n
{		return 0;	}
return 0;
0
strcpy(p, s);
strcpy(p, s)
strcpy
strcpy
p
p
s
s
return p;
p
p
-----joern-----
(23,4,0)
(19,22,0)
(0,4,0)
(14,5,0)
(16,13,0)
(18,15,0)
(8,0,0)
(20,1,0)
(7,3,0)
(1,4,0)
(10,5,0)
(15,0,0)
(1,22,0)
(9,22,0)
(5,6,0)
(8,22,0)
(1,3,0)
(13,22,0)
(12,8,0)
(15,7,0)
(22,8,0)
(13,4,0)
(7,15,0)
(24,4,0)
(2,7,0)
(22,19,0)
(0,15,0)
(14,13,0)
(17,1,0)
(21,4,0)
(11,0,0)
(16,1,1)
(5,10,1)
(15,7,1)
(20,17,1)
(1,22,1)
(1,3,1)
(19,22,1)
(13,16,1)
(12,9,1)
(8,0,1)
(1,20,1)
(14,5,1)
(8,12,1)
(13,22,1)
(7,2,1)
(22,8,1)
(10,19,1)
(0,15,1)
(15,18,1)
(14,13,1)
(9,0,1)
(17,19,1)
(7,3,1)
(2,11,1)
(18,7,1)
(15,7,2)
(1,19,2)
(14,13,2)
(1,22,2)
(19,22,2)
(8,0,2)
(0,15,2)
(17,19,2)
(16,19,2)
(14,5,2)
(7,3,2)
(13,22,2)
(13,19,2)
(1,3,2)
(10,19,2)
(22,8,2)
(20,19,2)
(5,19,2)
-----------------------------------
(0,n = strlen(s)
(1,strcpy(p, s)
(2,s)
(3,const char *s)
(4,)
(5,return 0;)
(6,)
(7,strlen(s)
(8,jas_malloc(n)
(9,p)
(10,0)
(11,n)
(12,n)
(13,return p;)
(14,RET)
(15,strlen(s)
(16,p)
(17,p)
(18,1)
(19,!(p = jas_malloc(n)
(20,s)
(21,n)
(22,p = jas_malloc(n)
(23,if (!(p = jas_malloc(n)
(24,p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
