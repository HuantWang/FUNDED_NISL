-----label-----
1
-----code-----
static int
LZWDecodeCompat(TIFF* tif, uint8* op0, tmsize_t occ0, uint16 s)
{
	static const char module[] = "LZWDecodeCompat";
	LZWCodecState *sp = DecoderState(tif);
	char *op = (char*) op0;
	long occ = (long) occ0;
	char *tp;
	unsigned char *bp;
	int code, nbits;
	long nextbits, nextdata, nbitsmask;
	code_t *codep, *free_entp, *maxcodep, *oldcodep;

	(void) s;
	assert(sp != NULL);

	/*
	  Fail if value does not fit in long.
	*/
	if ((tmsize_t) occ != occ0)
	        return (0);

	/*
	 * Restart interrupted output operation.
	 */
	if (sp->dec_restart) {
		long residue;

		codep = sp->dec_codep;
		residue = codep->length - sp->dec_restart;
		if (residue > occ) {
			/*
			 * Residue from previous decode is sufficient
			 * to satisfy decode request.  Skip to the
			 * start of the decoded string, place decoded
			 * values in the output buffer, and return.
			 */
			sp->dec_restart += occ;
			do {
				codep = codep->next;
			} while (--residue > occ);
			tp = op + occ;
			do {
				*--tp = codep->value;
				codep = codep->next;
			} while (--occ);
			return (1);
		}
		/*
		 * Residue satisfies only part of the decode request.
		 */
		op += residue, occ -= residue;
		tp = op;
		do {
			*--tp = codep->value;
			codep = codep->next;
		} while (--residue);
		sp->dec_restart = 0;
	}

	bp = (unsigned char *)tif->tif_rawcp;
	nbits = sp->lzw_nbits;
	nextdata = sp->lzw_nextdata;
	nextbits = sp->lzw_nextbits;
	nbitsmask = sp->dec_nbitsmask;
	oldcodep = sp->dec_oldcodep;
	free_entp = sp->dec_free_entp;
	maxcodep = sp->dec_maxcodep;

	while (occ > 0) {
		NextCode(tif, sp, bp, code, GetNextCodeCompat);
		if (code == CODE_EOI)
			break;
		if (code == CODE_CLEAR) {
			free_entp = sp->dec_codetab + CODE_FIRST;
			_TIFFmemset(free_entp, 0,
				    (CSIZE - CODE_FIRST) * sizeof (code_t));
			nbits = BITS_MIN;
			nbitsmask = MAXCODE(BITS_MIN);
			maxcodep = sp->dec_codetab + nbitsmask;
			NextCode(tif, sp, bp, code, GetNextCodeCompat);
			if (code == CODE_EOI)
				break;
			if (code >= CODE_CLEAR) {
				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,
				"LZWDecode: Corrupted LZW table at scanline %d",
					     tif->tif_row);
				return (0);
			}
			*op++ = code, occ--;
			oldcodep = sp->dec_codetab + code;
			continue;
		}
		codep = sp->dec_codetab + code;

		/*
		 * Add the new entry to the code table.
		 */
		if (free_entp < &sp->dec_codetab[0] ||
		    free_entp >= &sp->dec_codetab[CSIZE]) {
			TIFFErrorExt(tif->tif_clientdata, module,
			    "Corrupted LZW table at scanline %d", tif->tif_row);
			return (0);
		}

		free_entp->next = oldcodep;
		if (free_entp->next < &sp->dec_codetab[0] ||
		    free_entp->next >= &sp->dec_codetab[CSIZE]) {
			TIFFErrorExt(tif->tif_clientdata, module,
			    "Corrupted LZW table at scanline %d", tif->tif_row);
			return (0);
		}
		free_entp->firstchar = free_entp->next->firstchar;
		free_entp->length = free_entp->next->length+1;
		free_entp->value = (codep < free_entp) ?
		    codep->firstchar : free_entp->firstchar;
		if (++free_entp > maxcodep) {
			if (++nbits > BITS_MAX)		/* should not happen */
				nbits = BITS_MAX;
			nbitsmask = MAXCODE(nbits);
			maxcodep = sp->dec_codetab + nbitsmask;
		}
		oldcodep = codep;
		if (code >= 256) {
			/*
			 * Code maps to a string, copy string
			 * value to output (written in reverse).
			 */
			if(codep->length == 0) {
				TIFFErrorExt(tif->tif_clientdata, module,
				    "Wrong length of decoded "
				    "string: data probably corrupted at scanline %d",
				    tif->tif_row);
				return (0);
			}
			if (codep->length > occ) {
				/*
				 * String is too long for decode buffer,
				 * locate portion that will fit, copy to
				 * the decode buffer, and setup restart
				 * logic for the next decoding call.
				 */
				sp->dec_codep = codep;
				do {
					codep = codep->next;
				} while (codep->length > occ);
				sp->dec_restart = occ;
				tp = op + occ;
				do  {
					*--tp = codep->value;
					codep = codep->next;
				}  while (--occ);
				break;
			}
			assert(occ >= codep->length);
			op += codep->length, occ -= codep->length;
			tp = op;
			do {
				*--tp = codep->value;
			} while( (codep = codep->next) != NULL );
		} else
			*op++ = code, occ--;
	}

	tif->tif_rawcp = (uint8*) bp;
	sp->lzw_nbits = nbits;
	sp->lzw_nextdata = nextdata;
	sp->lzw_nextbits = nextbits;
	sp->dec_nbitsmask = nbitsmask;
	sp->dec_oldcodep = oldcodep;
	sp->dec_free_entp = free_entp;
	sp->dec_maxcodep = maxcodep;

	if (occ > 0) {
#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))
		TIFFErrorExt(tif->tif_clientdata, module,
			"Not enough data at scanline %d (short %I64d bytes)",
			     tif->tif_row, (unsigned __int64) occ);
#else
		TIFFErrorExt(tif->tif_clientdata, module,
			"Not enough data at scanline %d (short %llu bytes)",
			     tif->tif_row, (unsigned long long) occ);
#endif
		return (0);
	}
	return (1);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
27,42
27,43
27,44
27,45
27,46
27,47
27,48
27,49
27,50
27,51
27,52
27,53
27,54
27,55
27,56
27,57
27,58
27,59
28,29
29,30
29,31
31,32
31,33
31,34
34,35
36,37
37,38
37,39
38,39
40,41
40,42
40,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
52,53
52,54
52,55
55,56
56,57
56,58
57,58
57,59
59,60
61,62
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
70,72
73,74
75,76
76,77
76,78
78,79
78,80
81,82
82,83
82,84
84,85
84,86
87,88
88,89
88,90
88,91
90,91
92,93
94,95
95,96
95,97
95,98
95,99
97,98
99,100
101,102
103,104
104,105
104,106
104,107
104,108
104,109
105,106
107,108
107,109
110,111
110,112
113,114
113,115
116,117
116,118
119,120
120,121
120,122
121,122
121,123
124,125
126,127
127,128
127,129
128,129
130,131
130,132
131,132
133,134
135,136
135,137
136,137
136,138
137,138
137,139
138,139
138,140
139,140
142,143
144,145
146,147
147,148
149,150
149,151
150,151
150,152
151,152
154,155
154,156
154,157
154,158
154,159
154,160
154,161
154,162
155,156
156,157
156,158
158,159
160,161
161,162
161,163
162,163
164,165
164,166
165,166
168,169
169,170
169,171
170,171
172,173
172,174
173,174
173,175
174,175
177,178
177,179
178,179
181,182
181,183
182,183
182,184
183,184
185,186
187,188
187,189
187,190
187,191
187,192
188,189
189,190
189,191
190,191
190,192
191,192
194,195
196,197
196,198
197,198
198,199
199,200
199,201
200,201
202,203
202,204
203,204
206,207
206,208
207,208
208,209
210,211
212,213
213,214
213,215
214,215
216,217
216,218
217,218
219,220
221,222
221,223
222,223
222,224
223,224
224,225
224,226
225,226
226,227
227,228
229,230
229,231
230,231
233,234
234,235
234,236
235,236
237,238
237,239
238,239
241,242
242,243
244,245
245,246
247,248
248,249
248,250
249,250
249,251
250,251
252,253
254,255
254,256
255,256
257,258
259,260
260,261
260,262
261,262
263,264
265,266
265,267
266,267
266,268
267,268
268,269
268,270
269,270
270,271
271,272
273,274
273,275
274,275
277,278
278,279
278,280
279,280
281,282
281,283
282,283
285,286
286,287
288,289
289,290
289,291
290,291
290,292
291,292
295,296
296,297
296,298
297,298
299,300
299,301
300,301
300,302
302,303
304,305
304,306
305,306
308,309
309,310
309,311
310,311
312,313
312,314
313,314
316,317
317,318
317,319
318,319
320,321
320,322
321,322
324,325
325,326
325,327
326,327
328,329
328,330
329,330
332,333
333,334
333,335
334,335
336,337
336,338
337,338
340,341
341,342
341,343
342,343
344,345
344,346
345,346
348,349
349,350
349,351
350,351
352,353
352,354
353,354
356,357
357,358
357,359
358,359
360,361
360,362
361,362
364,365
364,366
365,366
365,367
366,367
369,370
369,371
369,372
369,373
369,374
369,375
369,376
369,377
369,378
369,379
369,380
369,381
369,382
370,371
371,372
371,373
371,374
371,375
371,376
371,377
372,373
374,375
376,377
378,379
380,381
382,383
384,385
384,386
385,386
385,387
386,387
388,389
391,392
391,393
392,393
392,394
393,394
395,396
397,398
397,399
397,400
397,401
397,402
397,403
397,404
397,405
397,406
397,407
397,408
398,399
399,400
399,401
400,401
402,403
402,404
403,404
403,405
404,405
407,408
409,410
410,411
410,412
410,413
410,414
411,412
413,414
416,417
416,418
417,418
418,419
418,420
419,420
421,422
423,424
424,425
424,426
425,426
428,429
429,430
429,431
430,431
432,433
434,435
435,436
435,437
436,437
438,439
438,440
439,440
441,442
443,444
444,445
444,446
445,446
447,448
447,449
448,449
448,450
449,450
452,453
454,455
455,456
455,457
455,458
455,459
455,460
455,461
456,457
458,459
460,461
462,463
464,465
466,467
468,469
468,470
469,470
469,471
470,471
472,473
475,476
475,477
476,477
476,478
477,478
479,480
481,482
481,483
482,483
483,484
483,485
483,486
483,487
483,488
484,485
486,487
486,488
487,488
490,491
490,492
491,492
495,496
495,497
496,497
499,500
500,501
502,503
503,504
503,505
504,505
504,506
505,506
506,507
507,508
509,510
511,512
512,513
514,515
515,516
515,517
516,517
518,519
518,520
519,520
519,521
520,521
523,524
526,527
527,528
527,529
528,529
530,531
530,532
531,532
531,533
532,533
535,536
537,538
537,539
538,539
538,540
539,540
539,541
540,541
542,543
543,544
543,545
544,545
544,546
545,546
549,550
549,551
550,551
552,553
553,554
553,555
554,555
554,556
555,556
558,559
560,561
560,562
561,562
562,563
562,564
562,565
562,566
562,567
563,564
565,566
565,567
566,567
569,570
572,573
572,574
573,574
576,577
577,578
579,580
580,581
580,582
581,582
581,583
582,583
585,586
587,588
587,589
588,589
588,590
589,590
589,591
590,591
590,592
591,592
594,595
595,596
595,597
596,597
596,598
597,598
601,602
601,603
602,603
602,604
603,604
606,607
607,608
607,609
608,609
608,610
609,610
612,613
614,615
614,616
615,616
616,617
616,618
616,619
616,620
616,621
617,618
619,620
619,621
620,621
623,624
626,627
626,628
627,628
630,631
631,632
633,634
634,635
634,636
635,636
635,637
636,637
639,640
639,641
640,641
640,642
641,642
645,646
646,647
646,648
647,648
647,649
648,649
651,652
651,653
652,653
652,654
653,654
653,655
654,655
659,660
660,661
660,662
661,662
661,663
662,663
665,666
665,667
665,668
666,667
667,668
667,669
668,669
670,671
672,673
672,674
673,674
676,677
676,678
677,678
680,681
680,682
681,682
681,683
682,683
683,684
685,686
687,688
687,689
687,690
688,689
688,690
689,690
689,691
690,691
691,692
693,694
695,696
696,697
696,698
697,698
699,700
701,702
702,703
702,704
703,704
705,706
705,707
706,707
708,709
710,711
711,712
711,713
712,713
714,715
714,716
715,716
715,717
716,717
719,720
721,722
722,723
722,724
723,724
725,726
727,728
727,729
727,730
728,729
728,730
729,730
732,733
732,734
732,735
732,736
732,737
732,738
733,734
733,735
734,735
734,736
735,736
735,737
736,737
740,741
740,742
741,742
742,743
742,744
742,745
742,746
742,747
743,744
745,746
745,747
746,747
749,750
752,753
752,754
753,754
756,757
757,758
759,760
759,761
760,761
760,762
761,762
761,763
762,763
765,766
767,768
767,769
767,770
767,771
767,772
767,773
768,769
769,770
769,771
770,771
770,772
771,772
774,775
776,777
776,778
777,778
778,779
779,780
779,781
780,781
782,783
782,784
783,784
786,787
786,788
787,788
787,789
788,789
791,792
793,794
794,795
794,796
795,796
795,797
796,797
799,800
801,802
802,803
802,804
803,804
805,806
805,807
806,807
808,809
810,811
810,812
811,812
811,813
812,813
813,814
813,815
814,815
815,816
816,817
818,819
818,820
819,820
822,823
823,824
823,825
824,825
826,827
826,828
827,828
830,831
831,832
834,835
835,836
835,837
836,837
838,839
838,840
839,840
841,842
841,843
842,843
845,846
846,847
846,848
847,848
847,849
848,849
850,851
850,852
851,852
854,855
854,856
855,856
857,858
857,859
858,859
861,862
862,863
862,864
863,864
865,866
867,868
867,869
868,869
869,870
870,871
870,872
871,872
872,873
873,874
875,876
875,877
876,877
879,880
879,881
880,881
881,882
881,883
882,883
884,885
884,886
885,886
888,889
890,891
891,892
891,893
892,893
892,894
893,894
894,895
895,896
897,898
899,900
900,901
902,903
903,904
903,905
904,905
904,906
905,906
908,909
908,910
909,910
909,911
910,911
912,913
914,915
916,917
917,918
917,919
918,919
918,920
919,920
922,923
924,925
925,926
925,927
926,927
926,928
927,928
930,931
932,933
933,934
933,935
934,935
934,936
935,936
938,939
940,941
941,942
941,943
942,943
942,944
943,944
946,947
948,949
949,950
949,951
950,951
950,952
951,952
954,955
956,957
957,958
957,959
958,959
958,960
959,960
962,963
964,965
965,966
965,967
966,967
966,968
967,968
970,971
972,973
972,974
973,974
973,975
974,975
977,978
977,979
978,979
979,980
979,981
979,982
979,983
979,984
979,985
980,981
982,983
982,984
983,984
986,987
989,990
989,991
990,991
993,994
993,995
994,995
994,996
997,998
999,1000
1000,1001
1002,1003
1003,1004
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,30,32,33,35,39,41,42,46,48,51,53,54,58,60,62,65,67,71,72,74,77,79,80,83,85,86,89,91,93,96,98,100,102,106,108,109,111,112,114,115,117,118,122,123,125,129,132,134,140,141,143,145,148,152,153,157,159,163,166,167,171,175,176,179,180,184,186,192,193,195,201,204,205,209,211,215,218,220,228,231,232,236,239,240,243,246,251,253,256,258,262,264,272,275,276,280,283,284,287,292,293,294,298,301,303,306,307,311,314,315,319,322,323,327,330,331,335,338,339,343,346,347,351,354,355,359,362,363,367,368,373,375,377,379,381,383,387,389,390,394,396,401,405,406,408,412,414,415,420,422,426,427,431,433,437,440,442,446,450,451,453,457,459,461,463,465,467,471,473,474,478,480,485,488,489,492,493,494,497,498,501,508,510,513,517,521,522,524,525,529,533,534,536,541,546,547,548,551,556,557,559,564,567,568,570,571,574,575,578,583,584,586,592,593,598,599,600,604,605,610,611,613,618,621,622,624,625,628,629,632,637,638,642,643,644,649,650,655,656,657,658,663,664,669,671,674,675,678,679,684,686,692,694,698,700,704,707,709,713,717,718,720,724,726,730,731,737,738,739,744,747,748,750,751,754,755,758,763,764,766,772,773,775,781,784,785,789,790,792,797,798,800,804,807,809,817,820,821,825,828,829,832,833,837,840,843,844,849,852,853,856,859,860,864,866,874,877,878,883,886,887,889,896,898,901,906,907,911,913,915,920,921,923,928,929,931,936,937,939,944,945,947,952,953,955,960,961,963,968,969,971,975,976,981,984,985,987,988,991,992,995,996,998,1001,1004
-----computeFrom-----
130,131
130,132
136,137
136,138
161,162
161,163
169,170
169,171
172,173
172,174
182,183
182,184
189,190
189,191
199,200
199,201
206,207
206,208
213,214
213,215
216,217
216,218
224,225
224,226
234,235
234,236
249,250
249,251
254,255
254,256
260,261
260,262
268,269
268,270
278,279
278,280
289,290
289,291
296,297
296,298
309,310
309,311
317,318
317,319
325,326
325,327
333,334
333,335
341,342
341,343
349,350
349,351
357,358
357,359
365,366
365,367
385,386
385,387
392,393
392,394
399,400
399,401
402,403
402,404
416,417
416,418
418,419
418,420
429,430
429,431
435,436
435,437
444,445
444,446
447,448
447,449
469,470
469,471
476,477
476,478
504,505
504,506
515,516
515,517
518,519
518,520
527,528
527,529
530,531
530,532
538,539
538,540
539,540
539,541
549,550
549,551
580,581
580,582
588,589
588,590
589,590
589,591
601,602
601,603
634,635
634,636
646,647
646,648
651,652
651,653
660,661
660,662
667,668
667,669
681,682
681,683
689,690
689,691
696,697
696,698
702,703
702,704
711,712
711,713
714,715
714,716
722,723
722,724
728,729
728,730
734,735
734,736
760,761
760,762
769,770
769,771
779,780
779,781
786,787
786,788
794,795
794,796
802,803
802,804
805,806
805,807
813,814
813,815
823,824
823,825
838,839
838,840
847,848
847,849
854,855
854,856
862,863
862,864
870,871
870,872
879,880
879,881
881,882
881,883
892,893
892,894
903,904
903,905
917,918
917,919
925,926
925,927
933,934
933,935
941,942
941,943
949,950
949,951
957,958
957,959
965,966
965,967
973,974
973,975
-----guardedBy-----
184,209
186,243
394,524
396,480
686,713
694,700
692,698
763,828
764,790
766,832
975,998
-----guardedByNegation-----
730,898
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;ExpressionList;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;ExpressionList;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static intLZWDecodeCompat(TIFF* tif, uint8* op0, tmsize_t occ0, uint16 s){	static const char module[] = "LZWDecodeCompat";	LZWCodecState *sp = DecoderState(tif);	char *op = (char*) op0;	long occ = (long) occ0;	char *tp;	unsigned char *bp;	int code, nbits;	long nextbits, nextdata, nbitsmask;	code_t *codep, *free_entp, *maxcodep, *oldcodep;	(void) s;	assert(sp != NULL);	/*	  Fail if value does not fit in long.	*/	if ((tmsize_t) occ != occ0)	        return (0);	/*	 * Restart interrupted output operation.	 */	if (sp->dec_restart) {		long residue;		codep = sp->dec_codep;		residue = codep->length - sp->dec_restart;		if (residue > occ) {			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}		/*		 * Residue satisfies only part of the decode request.		 */		op += residue, occ -= residue;		tp = op;		do {			*--tp = codep->value;			codep = codep->next;		} while (--residue);		sp->dec_restart = 0;	}	bp = (unsigned char *)tif->tif_rawcp;	nbits = sp->lzw_nbits;	nextdata = sp->lzw_nextdata;	nextbits = sp->lzw_nextbits;	nbitsmask = sp->dec_nbitsmask;	oldcodep = sp->dec_oldcodep;	free_entp = sp->dec_free_entp;	maxcodep = sp->dec_maxcodep;	while (occ > 0) {		NextCode(tif, sp, bp, code, GetNextCodeCompat);		if (code == CODE_EOI)			break;		if (code == CODE_CLEAR) {			free_entp = sp->dec_codetab + CODE_FIRST;			_TIFFmemset(free_entp, 0,				    (CSIZE - CODE_FIRST) * sizeof (code_t));			nbits = BITS_MIN;			nbitsmask = MAXCODE(BITS_MIN);			maxcodep = sp->dec_codetab + nbitsmask;			NextCode(tif, sp, bp, code, GetNextCodeCompat);			if (code == CODE_EOI)				break;			if (code >= CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = code, occ--;			oldcodep = sp->dec_codetab + code;			continue;		}		codep = sp->dec_codetab + code;		/*		 * Add the new entry to the code table.		 */		if (free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->next = oldcodep;		if (free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->firstchar = free_entp->next->firstchar;		free_entp->length = free_entp->next->length+1;		free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar;		if (++free_entp > maxcodep) {			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}		oldcodep = codep;		if (code >= 256) {			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length, occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		} else			*op++ = code, occ--;	}	tif->tif_rawcp = (uint8*) bp;	sp->lzw_nbits = nbits;	sp->lzw_nextdata = nextdata;	sp->lzw_nextbits = nextbits;	sp->dec_nbitsmask = nbitsmask;	sp->dec_oldcodep = oldcodep;	sp->dec_free_entp = free_entp;	sp->dec_maxcodep = maxcodep;	if (occ > 0) {#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %I64d bytes)",			     tif->tif_row, (unsigned __int64) occ);#else		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ);#endif		return (0);	}	return (1);}
static int
LZWDecodeCompat(TIFF* tif, uint8* op0, tmsize_t occ0, uint16 s)
LZWDecodeCompat
TIFF* tif
TIFF
TIFF
* tif
*
tif
uint8* op0
uint8
uint8
* op0
*
op0
tmsize_t occ0
tmsize_t
tmsize_t
occ0
occ0
uint16 s
uint16
uint16
s
s
{	static const char module[] = "LZWDecodeCompat";	LZWCodecState *sp = DecoderState(tif);	char *op = (char*) op0;	long occ = (long) occ0;	char *tp;	unsigned char *bp;	int code, nbits;	long nextbits, nextdata, nbitsmask;	code_t *codep, *free_entp, *maxcodep, *oldcodep;	(void) s;	assert(sp != NULL);	/*	  Fail if value does not fit in long.	*/	if ((tmsize_t) occ != occ0)	        return (0);	/*	 * Restart interrupted output operation.	 */	if (sp->dec_restart) {		long residue;		codep = sp->dec_codep;		residue = codep->length - sp->dec_restart;		if (residue > occ) {			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}		/*		 * Residue satisfies only part of the decode request.		 */		op += residue, occ -= residue;		tp = op;		do {			*--tp = codep->value;			codep = codep->next;		} while (--residue);		sp->dec_restart = 0;	}	bp = (unsigned char *)tif->tif_rawcp;	nbits = sp->lzw_nbits;	nextdata = sp->lzw_nextdata;	nextbits = sp->lzw_nextbits;	nbitsmask = sp->dec_nbitsmask;	oldcodep = sp->dec_oldcodep;	free_entp = sp->dec_free_entp;	maxcodep = sp->dec_maxcodep;	while (occ > 0) {		NextCode(tif, sp, bp, code, GetNextCodeCompat);		if (code == CODE_EOI)			break;		if (code == CODE_CLEAR) {			free_entp = sp->dec_codetab + CODE_FIRST;			_TIFFmemset(free_entp, 0,				    (CSIZE - CODE_FIRST) * sizeof (code_t));			nbits = BITS_MIN;			nbitsmask = MAXCODE(BITS_MIN);			maxcodep = sp->dec_codetab + nbitsmask;			NextCode(tif, sp, bp, code, GetNextCodeCompat);			if (code == CODE_EOI)				break;			if (code >= CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = code, occ--;			oldcodep = sp->dec_codetab + code;			continue;		}		codep = sp->dec_codetab + code;		/*		 * Add the new entry to the code table.		 */		if (free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->next = oldcodep;		if (free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->firstchar = free_entp->next->firstchar;		free_entp->length = free_entp->next->length+1;		free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar;		if (++free_entp > maxcodep) {			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}		oldcodep = codep;		if (code >= 256) {			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length, occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		} else			*op++ = code, occ--;	}	tif->tif_rawcp = (uint8*) bp;	sp->lzw_nbits = nbits;	sp->lzw_nextdata = nextdata;	sp->lzw_nextbits = nextbits;	sp->dec_nbitsmask = nbitsmask;	sp->dec_oldcodep = oldcodep;	sp->dec_free_entp = free_entp;	sp->dec_maxcodep = maxcodep;	if (occ > 0) {#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %I64d bytes)",			     tif->tif_row, (unsigned __int64) occ);#else		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ);#endif		return (0);	}	return (1);}
static const char module[] = "LZWDecodeCompat";
static const char module[] = "LZWDecodeCompat";
static const char
module[] = "LZWDecodeCompat"
module
[]
= "LZWDecodeCompat"
"LZWDecodeCompat"
LZWCodecState *sp = DecoderState(tif);
LZWCodecState *sp = DecoderState(tif);
LZWCodecState
LZWCodecState
*sp = DecoderState(tif)
*
sp
= DecoderState(tif)
DecoderState(tif)
DecoderState
DecoderState
tif
tif
char *op = (char*) op0;
char *op = (char*) op0;
char
*op = (char*) op0
*
op
= (char*) op0
(char*) op0
char*
char
*
*
op0
op0
long occ = (long) occ0;
long occ = (long) occ0;
long
occ = (long) occ0
occ
= (long) occ0
(long) occ0
long
long

occ0
occ0
char *tp;
char *tp;
char
*tp
*
tp
unsigned char *bp;
unsigned char *bp;
unsigned char
*bp
*
bp
int code, nbits;
int code, nbits;
int
code
code
nbits
nbits
long nextbits, nextdata, nbitsmask;
long nextbits, nextdata, nbitsmask;
long
nextbits
nextbits
nextdata
nextdata
nbitsmask
nbitsmask
code_t *codep, *free_entp, *maxcodep, *oldcodep;
code_t *codep, *free_entp, *maxcodep, *oldcodep;
code_t
code_t
*codep
*
codep
*free_entp
*
free_entp
*maxcodep
*
maxcodep
*oldcodep
*
oldcodep
(void) s;
(void) s
void
void

s
s
assert(sp != NULL);
assert(sp != NULL)
assert
assert
sp != NULL
sp
sp
NULL
NULL
if ((tmsize_t) occ != occ0)	        return (0);
(tmsize_t) occ != occ0
(tmsize_t) occ
tmsize_t
tmsize_t
tmsize_t

occ
occ
occ0
occ0
return (0);
(0)
0
if (sp->dec_restart) {		long residue;		codep = sp->dec_codep;		residue = codep->length - sp->dec_restart;		if (residue > occ) {			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}		/*		 * Residue satisfies only part of the decode request.		 */		op += residue, occ -= residue;		tp = op;		do {			*--tp = codep->value;			codep = codep->next;		} while (--residue);		sp->dec_restart = 0;	}
sp->dec_restart
sp
sp
dec_restart
{		long residue;		codep = sp->dec_codep;		residue = codep->length - sp->dec_restart;		if (residue > occ) {			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}		/*		 * Residue satisfies only part of the decode request.		 */		op += residue, occ -= residue;		tp = op;		do {			*--tp = codep->value;			codep = codep->next;		} while (--residue);		sp->dec_restart = 0;	}
long residue;
long residue;
long
residue
residue
codep = sp->dec_codep;
codep = sp->dec_codep
codep
codep
sp->dec_codep
sp
sp
dec_codep
residue = codep->length - sp->dec_restart;
residue = codep->length - sp->dec_restart
residue
residue
codep->length - sp->dec_restart
codep->length
codep
codep
length
sp->dec_restart
sp
sp
dec_restart
if (residue > occ) {			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}
residue > occ
residue
residue
occ
occ
{			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}
sp->dec_restart += occ;
sp->dec_restart += occ
sp->dec_restart
sp
sp
dec_restart
occ
occ
do {				codep = codep->next;			} while (--residue > occ);
{				codep = codep->next;			}
codep = codep->next;
codep = codep->next
codep
codep
codep->next
codep
codep
next
--residue > occ
--residue
residue
residue
occ
occ
tp = op + occ;
tp = op + occ
tp
tp
op + occ
op
op
occ
occ
do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);
{				*--tp = codep->value;				codep = codep->next;			}
*--tp = codep->value;
*--tp = codep->value
*--tp
--tp
tp
tp
codep->value
codep
codep
value
codep = codep->next;
codep = codep->next
codep
codep
codep->next
codep
codep
next
--occ
occ
occ
return (1);
(1)
1
op += residue, occ -= residue;
op += residue, occ -= residue
op += residue
op
op
residue
residue
occ -= residue
occ
occ
residue
residue
tp = op;
tp = op
tp
tp
op
op
do {			*--tp = codep->value;			codep = codep->next;		} while (--residue);
{			*--tp = codep->value;			codep = codep->next;		}
*--tp = codep->value;
*--tp = codep->value
*--tp
--tp
tp
tp
codep->value
codep
codep
value
codep = codep->next;
codep = codep->next
codep
codep
codep->next
codep
codep
next
--residue
residue
residue
sp->dec_restart = 0;
sp->dec_restart = 0
sp->dec_restart
sp
sp
dec_restart
0
bp = (unsigned char *)tif->tif_rawcp;
bp = (unsigned char *)tif->tif_rawcp
bp
bp
(unsigned char *)tif->tif_rawcp
unsigned char *
unsigned char
*
*
tif->tif_rawcp
tif
tif
tif_rawcp
nbits = sp->lzw_nbits;
nbits = sp->lzw_nbits
nbits
nbits
sp->lzw_nbits
sp
sp
lzw_nbits
nextdata = sp->lzw_nextdata;
nextdata = sp->lzw_nextdata
nextdata
nextdata
sp->lzw_nextdata
sp
sp
lzw_nextdata
nextbits = sp->lzw_nextbits;
nextbits = sp->lzw_nextbits
nextbits
nextbits
sp->lzw_nextbits
sp
sp
lzw_nextbits
nbitsmask = sp->dec_nbitsmask;
nbitsmask = sp->dec_nbitsmask
nbitsmask
nbitsmask
sp->dec_nbitsmask
sp
sp
dec_nbitsmask
oldcodep = sp->dec_oldcodep;
oldcodep = sp->dec_oldcodep
oldcodep
oldcodep
sp->dec_oldcodep
sp
sp
dec_oldcodep
free_entp = sp->dec_free_entp;
free_entp = sp->dec_free_entp
free_entp
free_entp
sp->dec_free_entp
sp
sp
dec_free_entp
maxcodep = sp->dec_maxcodep;
maxcodep = sp->dec_maxcodep
maxcodep
maxcodep
sp->dec_maxcodep
sp
sp
dec_maxcodep
while (occ > 0) {		NextCode(tif, sp, bp, code, GetNextCodeCompat);		if (code == CODE_EOI)			break;		if (code == CODE_CLEAR) {			free_entp = sp->dec_codetab + CODE_FIRST;			_TIFFmemset(free_entp, 0,				    (CSIZE - CODE_FIRST) * sizeof (code_t));			nbits = BITS_MIN;			nbitsmask = MAXCODE(BITS_MIN);			maxcodep = sp->dec_codetab + nbitsmask;			NextCode(tif, sp, bp, code, GetNextCodeCompat);			if (code == CODE_EOI)				break;			if (code >= CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = code, occ--;			oldcodep = sp->dec_codetab + code;			continue;		}		codep = sp->dec_codetab + code;		/*		 * Add the new entry to the code table.		 */		if (free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->next = oldcodep;		if (free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->firstchar = free_entp->next->firstchar;		free_entp->length = free_entp->next->length+1;		free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar;		if (++free_entp > maxcodep) {			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}		oldcodep = codep;		if (code >= 256) {			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length, occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		} else			*op++ = code, occ--;	}
occ > 0
occ
occ
0
{		NextCode(tif, sp, bp, code, GetNextCodeCompat);		if (code == CODE_EOI)			break;		if (code == CODE_CLEAR) {			free_entp = sp->dec_codetab + CODE_FIRST;			_TIFFmemset(free_entp, 0,				    (CSIZE - CODE_FIRST) * sizeof (code_t));			nbits = BITS_MIN;			nbitsmask = MAXCODE(BITS_MIN);			maxcodep = sp->dec_codetab + nbitsmask;			NextCode(tif, sp, bp, code, GetNextCodeCompat);			if (code == CODE_EOI)				break;			if (code >= CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = code, occ--;			oldcodep = sp->dec_codetab + code;			continue;		}		codep = sp->dec_codetab + code;		/*		 * Add the new entry to the code table.		 */		if (free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->next = oldcodep;		if (free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->firstchar = free_entp->next->firstchar;		free_entp->length = free_entp->next->length+1;		free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar;		if (++free_entp > maxcodep) {			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}		oldcodep = codep;		if (code >= 256) {			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length, occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		} else			*op++ = code, occ--;	}
NextCode(tif, sp, bp, code, GetNextCodeCompat);
NextCode(tif, sp, bp, code, GetNextCodeCompat)
NextCode
NextCode
tif
tif
sp
sp
bp
bp
code
code
GetNextCodeCompat
GetNextCodeCompat
if (code == CODE_EOI)			break;
code == CODE_EOI
code
code
CODE_EOI
CODE_EOI
break;
if (code == CODE_CLEAR) {			free_entp = sp->dec_codetab + CODE_FIRST;			_TIFFmemset(free_entp, 0,				    (CSIZE - CODE_FIRST) * sizeof (code_t));			nbits = BITS_MIN;			nbitsmask = MAXCODE(BITS_MIN);			maxcodep = sp->dec_codetab + nbitsmask;			NextCode(tif, sp, bp, code, GetNextCodeCompat);			if (code == CODE_EOI)				break;			if (code >= CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = code, occ--;			oldcodep = sp->dec_codetab + code;			continue;		}
code == CODE_CLEAR
code
code
CODE_CLEAR
CODE_CLEAR
{			free_entp = sp->dec_codetab + CODE_FIRST;			_TIFFmemset(free_entp, 0,				    (CSIZE - CODE_FIRST) * sizeof (code_t));			nbits = BITS_MIN;			nbitsmask = MAXCODE(BITS_MIN);			maxcodep = sp->dec_codetab + nbitsmask;			NextCode(tif, sp, bp, code, GetNextCodeCompat);			if (code == CODE_EOI)				break;			if (code >= CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = code, occ--;			oldcodep = sp->dec_codetab + code;			continue;		}
free_entp = sp->dec_codetab + CODE_FIRST;
free_entp = sp->dec_codetab + CODE_FIRST
free_entp
free_entp
sp->dec_codetab + CODE_FIRST
sp->dec_codetab
sp
sp
dec_codetab
CODE_FIRST
CODE_FIRST
_TIFFmemset(free_entp, 0,				    (CSIZE - CODE_FIRST) * sizeof (code_t));
_TIFFmemset(free_entp, 0,				    (CSIZE - CODE_FIRST) * sizeof (code_t))
_TIFFmemset
_TIFFmemset
free_entp
free_entp
0
(CSIZE - CODE_FIRST) * sizeof (code_t)
(CSIZE - CODE_FIRST)
CSIZE - CODE_FIRST
CSIZE
CSIZE
CODE_FIRST
CODE_FIRST
sizeof (code_t)
code_t
code_t
code_t

nbits = BITS_MIN;
nbits = BITS_MIN
nbits
nbits
BITS_MIN
BITS_MIN
nbitsmask = MAXCODE(BITS_MIN);
nbitsmask = MAXCODE(BITS_MIN)
nbitsmask
nbitsmask
MAXCODE(BITS_MIN)
MAXCODE
MAXCODE
BITS_MIN
BITS_MIN
maxcodep = sp->dec_codetab + nbitsmask;
maxcodep = sp->dec_codetab + nbitsmask
maxcodep
maxcodep
sp->dec_codetab + nbitsmask
sp->dec_codetab
sp
sp
dec_codetab
nbitsmask
nbitsmask
NextCode(tif, sp, bp, code, GetNextCodeCompat);
NextCode(tif, sp, bp, code, GetNextCodeCompat)
NextCode
NextCode
tif
tif
sp
sp
bp
bp
code
code
GetNextCodeCompat
GetNextCodeCompat
if (code == CODE_EOI)				break;
code == CODE_EOI
code
code
CODE_EOI
CODE_EOI
break;
if (code >= CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}
code >= CODE_CLEAR
code
code
CODE_CLEAR
CODE_CLEAR
{				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}
TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);
TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
tif->tif_name
tif
tif
tif_name
"LZWDecode: Corrupted LZW table at scanline %d"
tif->tif_row
tif
tif
tif_row
return (0);
(0)
0
*op++ = code, occ--;
*op++ = code, occ--
*op++ = code
*op++
op++
op
op
code
code
occ--
occ
occ
oldcodep = sp->dec_codetab + code;
oldcodep = sp->dec_codetab + code
oldcodep
oldcodep
sp->dec_codetab + code
sp->dec_codetab
sp
sp
dec_codetab
code
code
continue;
codep = sp->dec_codetab + code;
codep = sp->dec_codetab + code
codep
codep
sp->dec_codetab + code
sp->dec_codetab
sp
sp
dec_codetab
code
code
if (free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}
free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]
free_entp < &sp->dec_codetab[0]
free_entp
free_entp
&sp->dec_codetab[0]
sp->dec_codetab[0]
sp->dec_codetab
sp
sp
dec_codetab
0
free_entp >= &sp->dec_codetab[CSIZE]
free_entp
free_entp
&sp->dec_codetab[CSIZE]
sp->dec_codetab[CSIZE]
sp->dec_codetab
sp
sp
dec_codetab
CSIZE
CSIZE
{			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}
TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);
TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Corrupted LZW table at scanline %d"
tif->tif_row
tif
tif
tif_row
return (0);
(0)
0
free_entp->next = oldcodep;
free_entp->next = oldcodep
free_entp->next
free_entp
free_entp
next
oldcodep
oldcodep
if (free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}
free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]
free_entp->next < &sp->dec_codetab[0]
free_entp->next
free_entp
free_entp
next
&sp->dec_codetab[0]
sp->dec_codetab[0]
sp->dec_codetab
sp
sp
dec_codetab
0
free_entp->next >= &sp->dec_codetab[CSIZE]
free_entp->next
free_entp
free_entp
next
&sp->dec_codetab[CSIZE]
sp->dec_codetab[CSIZE]
sp->dec_codetab
sp
sp
dec_codetab
CSIZE
CSIZE
{			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}
TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);
TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Corrupted LZW table at scanline %d"
tif->tif_row
tif
tif
tif_row
return (0);
(0)
0
free_entp->firstchar = free_entp->next->firstchar;
free_entp->firstchar = free_entp->next->firstchar
free_entp->firstchar
free_entp
free_entp
firstchar
free_entp->next->firstchar
free_entp->next
free_entp
free_entp
next
firstchar
free_entp->length = free_entp->next->length+1;
free_entp->length = free_entp->next->length+1
free_entp->length
free_entp
free_entp
length
free_entp->next->length+1
free_entp->next->length
free_entp->next
free_entp
free_entp
next
length
1
free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar;
free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar
free_entp->value
free_entp
free_entp
value
(codep < free_entp) ?		    codep->firstchar : free_entp->firstchar
(codep < free_entp)
codep < free_entp
codep
codep
free_entp
free_entp
codep->firstchar
codep
codep
firstchar
free_entp->firstchar
free_entp
free_entp
firstchar
if (++free_entp > maxcodep) {			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}
++free_entp > maxcodep
++free_entp
free_entp
free_entp
maxcodep
maxcodep
{			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}
if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;
++nbits > BITS_MAX
++nbits
nbits
nbits
BITS_MAX
BITS_MAX
nbits = BITS_MAX;
nbits = BITS_MAX
nbits
nbits
BITS_MAX
BITS_MAX
nbitsmask = MAXCODE(nbits);
nbitsmask = MAXCODE(nbits)
nbitsmask
nbitsmask
MAXCODE(nbits)
MAXCODE
MAXCODE
nbits
nbits
maxcodep = sp->dec_codetab + nbitsmask;
maxcodep = sp->dec_codetab + nbitsmask
maxcodep
maxcodep
sp->dec_codetab + nbitsmask
sp->dec_codetab
sp
sp
dec_codetab
nbitsmask
nbitsmask
oldcodep = codep;
oldcodep = codep
oldcodep
oldcodep
codep
codep
if (code >= 256) {			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length, occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		} else			*op++ = code, occ--;
code >= 256
code
code
256
{			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length, occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		}
if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}
codep->length == 0
codep->length
codep
codep
length
0
{				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}
TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);
TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Wrong length of decoded "				    "string: data probably corrupted at scanline %d"
tif->tif_row
tif
tif
tif_row
return (0);
(0)
0
if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}
codep->length > occ
codep->length
codep
codep
length
occ
occ
{				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}
sp->dec_codep = codep;
sp->dec_codep = codep
sp->dec_codep
sp
sp
dec_codep
codep
codep
do {					codep = codep->next;				} while (codep->length > occ);
{					codep = codep->next;				}
codep = codep->next;
codep = codep->next
codep
codep
codep->next
codep
codep
next
codep->length > occ
codep->length
codep
codep
length
occ
occ
sp->dec_restart = occ;
sp->dec_restart = occ
sp->dec_restart
sp
sp
dec_restart
occ
occ
tp = op + occ;
tp = op + occ
tp
tp
op + occ
op
op
occ
occ
do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);
{					*--tp = codep->value;					codep = codep->next;				}
*--tp = codep->value;
*--tp = codep->value
*--tp
--tp
tp
tp
codep->value
codep
codep
value
codep = codep->next;
codep = codep->next
codep
codep
codep->next
codep
codep
next
--occ
occ
occ
break;
assert(occ >= codep->length);
assert(occ >= codep->length)
assert
assert
occ >= codep->length
occ
occ
codep->length
codep
codep
length
op += codep->length, occ -= codep->length;
op += codep->length, occ -= codep->length
op += codep->length
op
op
codep->length
codep
codep
length
occ -= codep->length
occ
occ
codep->length
codep
codep
length
tp = op;
tp = op
tp
tp
op
op
do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );
{				*--tp = codep->value;			}
*--tp = codep->value;
*--tp = codep->value
*--tp
--tp
tp
tp
codep->value
codep
codep
value
(codep = codep->next) != NULL
(codep = codep->next)
codep = codep->next
codep
codep
codep->next
codep
codep
next
NULL
NULL
*op++ = code, occ--;
*op++ = code, occ--
*op++ = code
*op++
op++
op
op
code
code
occ--
occ
occ
tif->tif_rawcp = (uint8*) bp;
tif->tif_rawcp = (uint8*) bp
tif->tif_rawcp
tif
tif
tif_rawcp
(uint8*) bp
uint8*
uint8
uint8
*
*
bp
bp
sp->lzw_nbits = nbits;
sp->lzw_nbits = nbits
sp->lzw_nbits
sp
sp
lzw_nbits
nbits
nbits
sp->lzw_nextdata = nextdata;
sp->lzw_nextdata = nextdata
sp->lzw_nextdata
sp
sp
lzw_nextdata
nextdata
nextdata
sp->lzw_nextbits = nextbits;
sp->lzw_nextbits = nextbits
sp->lzw_nextbits
sp
sp
lzw_nextbits
nextbits
nextbits
sp->dec_nbitsmask = nbitsmask;
sp->dec_nbitsmask = nbitsmask
sp->dec_nbitsmask
sp
sp
dec_nbitsmask
nbitsmask
nbitsmask
sp->dec_oldcodep = oldcodep;
sp->dec_oldcodep = oldcodep
sp->dec_oldcodep
sp
sp
dec_oldcodep
oldcodep
oldcodep
sp->dec_free_entp = free_entp;
sp->dec_free_entp = free_entp
sp->dec_free_entp
sp
sp
dec_free_entp
free_entp
free_entp
sp->dec_maxcodep = maxcodep;
sp->dec_maxcodep = maxcodep
sp->dec_maxcodep
sp
sp
dec_maxcodep
maxcodep
maxcodep
if (occ > 0) {#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %I64d bytes)",			     tif->tif_row, (unsigned __int64) occ);#else		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ);#endif		return (0);	}
occ > 0
occ
occ
0
{#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %I64d bytes)",			     tif->tif_row, (unsigned __int64) occ);#else		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ);#endif		return (0);	}
TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ);
TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Not enough data at scanline %d (short %llu bytes)"
tif->tif_row
tif
tif
tif_row
(unsigned long long) occ
unsigned long long
unsigned long long

occ
occ
return (0);
(0)
0
return (1);
(1)
1
-----joern-----
(421,520,0)
(451,520,0)
(282,120,0)
(526,145,0)
(421,588,0)
(82,593,0)
(252,140,0)
(500,471,0)
(95,415,0)
(263,139,0)
(268,285,0)
(279,193,0)
(427,523,0)
(530,265,0)
(353,523,0)
(10,8,0)
(312,38,0)
(3,550,0)
(124,16,0)
(332,281,0)
(136,312,0)
(501,430,0)
(303,333,0)
(28,523,0)
(405,235,0)
(203,430,0)
(479,163,0)
(267,152,0)
(490,404,0)
(381,252,0)
(327,223,0)
(378,464,0)
(189,588,0)
(586,512,0)
(407,171,0)
(602,19,0)
(526,235,0)
(91,253,0)
(56,277,0)
(244,179,0)
(172,29,0)
(433,588,0)
(19,271,0)
(121,69,0)
(89,15,0)
(550,59,0)
(329,487,0)
(450,450,0)
(190,140,0)
(313,509,0)
(165,200,0)
(309,304,0)
(518,167,0)
(285,85,0)
(586,310,0)
(550,353,0)
(497,174,0)
(237,297,0)
(600,262,0)
(489,258,0)
(563,143,0)
(19,326,0)
(297,312,0)
(200,453,0)
(157,15,0)
(311,297,0)
(383,312,0)
(450,398,0)
(510,122,0)
(503,552,0)
(429,55,0)
(272,147,0)
(55,54,0)
(449,546,0)
(434,578,0)
(317,403,0)
(345,558,0)
(289,272,0)
(341,216,0)
(222,302,0)
(35,410,0)
(205,193,0)
(349,246,0)
(520,523,0)
(444,77,0)
(423,328,0)
(592,145,0)
(415,95,0)
(69,199,0)
(357,179,0)
(474,318,0)
(68,312,0)
(450,553,0)
(440,331,0)
(10,534,0)
(277,318,0)
(526,78,0)
(526,505,0)
(493,372,0)
(463,444,0)
(129,493,0)
(586,143,0)
(123,422,0)
(75,494,0)
(204,326,0)
(55,258,0)
(61,265,0)
(586,84,0)
(586,152,0)
(298,356,0)
(555,337,0)
(141,258,0)
(597,577,0)
(246,588,0)
(466,383,0)
(28,16,0)
(404,216,0)
(494,187,0)
(437,8,0)
(514,560,0)
(379,243,0)
(513,46,0)
(497,179,0)
(95,343,0)
(587,83,0)
(588,167,0)
(22,491,0)
(372,392,0)
(36,309,0)
(234,312,0)
(581,79,0)
(592,234,0)
(586,268,0)
(31,38,0)
(297,8,0)
(472,312,0)
(331,35,0)
(159,130,0)
(577,121,0)
(245,453,0)
(23,450,0)
(123,12,0)
(569,235,0)
(356,186,0)
(76,273,0)
(16,83,0)
(595,398,0)
(46,520,0)
(546,258,0)
(339,450,0)
(511,28,0)
(586,479,0)
(3,155,0)
(358,571,0)
(325,216,0)
(454,534,0)
(578,494,0)
(121,101,0)
(475,524,0)
(477,171,0)
(504,36,0)
(44,128,0)
(382,421,0)
(353,550,0)
(424,71,0)
(410,35,0)
(526,179,0)
(194,120,0)
(230,435,0)
(145,285,0)
(593,187,0)
(232,301,0)
(140,285,0)
(346,133,0)
(235,546,0)
(144,398,0)
(586,258,0)
(193,205,0)
(476,258,0)
(158,481,0)
(554,258,0)
(308,588,0)
(222,494,0)
(229,520,0)
(133,372,0)
(172,84,0)
(197,271,0)
(507,285,0)
(343,556,0)
(365,79,0)
(170,210,0)
(211,95,0)
(359,189,0)
(422,258,0)
(536,553,0)
(545,13,0)
(197,312,0)
(39,258,0)
(6,186,0)
(560,523,0)
(426,272,0)
(228,494,0)
(453,200,0)
(248,79,0)
(586,136,0)
(69,344,0)
(524,312,0)
(243,523,0)
(179,232,0)
(64,588,0)
(80,56,0)
(334,222,0)
(586,158,0)
(179,494,0)
(221,300,0)
(491,229,0)
(223,341,0)
(318,277,0)
(130,492,0)
(366,523,0)
(598,542,0)
(42,320,0)
(32,377,0)
(146,312,0)
(148,127,0)
(351,531,0)
(603,27,0)
(392,312,0)
(336,414,0)
(579,222,0)
(340,146,0)
(93,45,0)
(575,100,0)
(78,312,0)
(246,520,0)
(147,258,0)
(272,127,0)
(281,529,0)
(266,45,0)
(163,62,0)
(376,531,0)
(226,145,0)
(377,285,0)
(302,222,0)
(526,234,0)
(408,325,0)
(335,27,0)
(13,301,0)
(406,54,0)
(360,586,0)
(393,100,0)
(477,422,0)
(418,8,0)
(19,258,0)
(265,530,0)
(471,377,0)
(240,8,0)
(231,446,0)
(491,72,0)
(104,216,0)
(138,448,0)
(187,593,0)
(297,250,0)
(529,250,0)
(462,492,0)
(259,448,0)
(51,508,0)
(337,448,0)
(374,12,0)
(186,6,0)
(321,273,0)
(294,526,0)
(494,15,0)
(568,72,0)
(453,452,0)
(537,250,0)
(177,75,0)
(506,413,0)
(540,392,0)
(281,201,0)
(354,61,0)
(492,83,0)
(487,329,0)
(526,126,0)
(86,265,0)
(110,523,0)
(442,258,0)
(481,398,0)
(538,124,0)
(570,78,0)
(101,76,0)
(443,490,0)
(496,508,0)
(296,463,0)
(395,477,0)
(229,588,0)
(189,515,0)
(586,505,0)
(123,171,0)
(336,552,0)
(108,556,0)
(429,101,0)
(6,75,0)
(409,41,0)
(373,100,0)
(489,171,0)
(202,472,0)
(187,494,0)
(272,149,0)
(357,234,0)
(119,340,0)
(524,260,0)
(588,520,0)
(295,59,0)
(459,8,0)
(77,250,0)
(391,422,0)
(85,312,0)
(107,308,0)
(16,241,0)
(592,179,0)
(54,55,0)
(233,150,0)
(131,361,0)
(604,454,0)
(160,8,0)
(273,15,0)
(588,254,0)
(284,490,0)
(205,24,0)
(305,446,0)
(448,312,0)
(13,216,0)
(62,258,0)
(175,477,0)
(422,383,0)
(47,258,0)
(102,258,0)
(593,312,0)
(186,356,0)
(130,310,0)
(414,336,0)
(497,505,0)
(421,523,0)
(92,503,0)
(304,309,0)
(455,318,0)
(52,312,0)
(23,430,0)
(247,503,0)
(94,520,0)
(481,158,0)
(594,149,0)
(117,110,0)
(35,331,0)
(309,388,0)
(560,520,0)
(363,105,0)
(551,100,0)
(342,297,0)
(10,326,0)
(189,520,0)
(302,528,0)
(202,502,0)
(589,101,0)
(357,377,0)
(214,149,0)
(330,79,0)
(553,398,0)
(457,593,0)
(234,587,0)
(136,290,0)
(361,312,0)
(458,509,0)
(140,252,0)
(49,223,0)
(177,63,0)
(26,247,0)
(526,577,0)
(19,534,0)
(0,186,0)
(299,458,0)
(105,213,0)
(502,202,0)
(333,250,0)
(491,147,0)
(357,268,0)
(572,451,0)
(29,120,0)
(564,433,0)
(229,99,0)
(302,20,0)
(34,436,0)
(441,120,0)
(489,422,0)
(9,163,0)
(241,16,0)
(366,588,0)
(464,241,0)
(370,258,0)
(357,363,0)
(140,10,0)
(503,247,0)
(473,429,0)
(153,229,0)
(33,377,0)
(265,258,0)
(155,3,0)
(335,216,0)
(450,104,0)
(118,76,0)
(100,393,0)
(325,189,0)
(340,410,0)
(369,491,0)
(517,258,0)
(526,479,0)
(246,553,0)
(360,497,0)
(357,158,0)
(534,15,0)
(560,588,0)
(12,15,0)
(309,36,0)
(54,312,0)
(53,489,0)
(520,384,0)
(225,258,0)
(277,323,0)
(526,136,0)
(402,136,0)
(29,246,0)
(316,145,0)
(276,487,0)
(179,285,0)
(558,59,0)
(41,458,0)
(301,13,0)
(433,520,0)
(523,258,0)
(465,388,0)
(64,520,0)
(122,285,0)
(154,250,0)
(396,118,0)
(216,341,0)
(484,472,0)
(371,509,0)
(458,21,0)
(191,5,0)
(393,216,0)
(246,450,0)
(281,147,0)
(559,472,0)
(88,358,0)
(300,429,0)
(360,526,0)
(223,312,0)
(287,479,0)
(56,567,0)
(358,258,0)
(229,523,0)
(283,312,0)
(200,494,0)
(337,528,0)
(143,312,0)
(115,258,0)
(387,268,0)
(452,8,0)
(438,361,0)
(481,450,0)
(246,398,0)
(567,435,0)
(122,494,0)
(535,52,0)
(523,336,0)
(397,444,0)
(341,223,0)
(173,553,0)
(380,331,0)
(515,430,0)
(2,143,0)
(113,497,0)
(512,64,0)
(199,521,0)
(81,344,0)
(60,152,0)
(152,122,0)
(63,502,0)
(315,28,0)
(133,241,0)
(596,29,0)
(578,285,0)
(193,132,0)
(63,494,0)
(38,312,0)
(98,419,0)
(357,145,0)
(532,373,0)
(241,133,0)
(192,76,0)
(360,357,0)
(412,529,0)
(471,179,0)
(482,147,0)
(586,235,0)
(485,436,0)
(252,5,0)
(76,118,0)
(264,258,0)
(200,285,0)
(290,120,0)
(134,16,0)
(400,530,0)
(410,340,0)
(278,83,0)
(508,301,0)
(280,246,0)
(268,452,0)
(432,388,0)
(415,57,0)
(5,252,0)
(301,578,0)
(215,62,0)
(20,35,0)
(591,588,0)
(116,104,0)
(76,101,0)
(292,12,0)
(388,309,0)
(239,144,0)
(418,5,0)
(271,258,0)
(362,356,0)
(586,52,0)
(144,239,0)
(526,377,0)
(236,79,0)
(64,523,0)
(528,302,0)
(526,512,0)
(464,312,0)
(227,600,0)
(70,366,0)
(528,337,0)
(347,268,0)
(127,250,0)
(308,284,0)
(285,258,0)
(123,521,0)
(534,454,0)
(425,171,0)
(491,126,0)
(417,147,0)
(271,197,0)
(260,59,0)
(121,258,0)
(79,250,0)
(469,383,0)
(471,363,0)
(536,450,0)
(392,372,0)
(246,523,0)
(586,363,0)
(319,506,0)
(38,250,0)
(87,506,0)
(404,490,0)
(521,344,0)
(530,312,0)
(269,493,0)
(497,363,0)
(140,494,0)
(472,202,0)
(471,310,0)
(163,258,0)
(536,398,0)
(355,393,0)
(18,399,0)
(41,250,0)
(548,372,0)
(574,256,0)
(360,558,0)
(526,52,0)
(600,517,0)
(84,172,0)
(403,560,0)
(149,250,0)
(210,23,0)
(446,62,0)
(492,553,0)
(578,452,0)
(275,304,0)
(592,505,0)
(497,377,0)
(229,491,0)
(399,537,0)
(158,328,0)
(357,310,0)
(561,233,0)
(46,150,0)
(30,567,0)
(471,145,0)
(565,341,0)
(151,284,0)
(358,460,0)
(219,578,0)
(558,524,0)
(525,297,0)
(471,158,0)
(477,175,0)
(398,144,0)
(293,297,0)
(145,10,0)
(301,508,0)
(526,268,0)
(146,340,0)
(522,481,0)
(401,3,0)
(580,534,0)
(291,21,0)
(99,229,0)
(242,258,0)
(411,258,0)
(592,310,0)
(166,197,0)
(50,36,0)
(350,54,0)
(399,428,0)
(75,177,0)
(272,174,0)
(390,464,0)
(458,516,0)
(78,61,0)
(433,523,0)
(167,216,0)
(592,268,0)
(10,271,0)
(152,312,0)
(182,83,0)
(526,152,0)
(553,384,0)
(586,179,0)
(246,29,0)
(168,56,0)
(322,258,0)
(599,146,0)
(199,69,0)
(212,175,0)
(290,216,0)
(118,312,0)
(478,529,0)
(43,284,0)
(217,325,0)
(458,41,0)
(436,281,0)
(128,16,0)
(209,140,0)
(145,494,0)
(112,72,0)
(13,285,0)
(281,436,0)
(105,373,0)
(527,326,0)
(20,302,0)
(238,144,0)
(331,494,0)
(543,85,0)
(576,8,0)
(331,285,0)
(336,523,0)
(127,272,0)
(448,337,0)
(558,155,0)
(111,197,0)
(413,506,0)
(461,512,0)
(493,132,0)
(224,487,0)
(114,479,0)
(61,258,0)
(181,335,0)
(383,422,0)
(206,586,0)
(567,71,0)
(546,413,0)
(199,68,0)
(85,285,0)
(556,490,0)
(72,491,0)
(4,550,0)
(156,258,0)
(592,201,0)
(216,8,0)
(509,250,0)
(308,523,0)
(539,557,0)
(508,216,0)
(247,338,0)
(431,21,0)
(357,428,0)
(519,290,0)
(588,523,0)
(208,258,0)
(436,250,0)
(286,366,0)
(363,210,0)
(79,312,0)
(460,358,0)
(483,15,0)
(5,418,0)
(360,471,0)
(64,120,0)
(77,444,0)
(235,312,0)
(169,154,0)
(435,567,0)
(450,254,0)
(46,523,0)
(62,446,0)
(95,490,0)
(429,300,0)
(399,333,0)
(454,361,0)
(307,139,0)
(270,216,0)
(541,575,0)
(306,399,0)
(260,523,0)
(586,154,0)
(1,577,0)
(7,413,0)
(562,433,0)
(429,69,0)
(268,494,0)
(468,253,0)
(497,234,0)
(586,577,0)
(79,463,0)
(549,281,0)
(11,357,0)
(96,536,0)
(531,312,0)
(601,234,0)
(27,335,0)
(416,200,0)
(97,520,0)
(403,216,0)
(220,104,0)
(489,12,0)
(471,505,0)
(353,398,0)
(348,146,0)
(497,158,0)
(21,458,0)
(331,10,0)
(274,85,0)
(189,325,0)
(556,343,0)
(58,59,0)
(184,64,0)
(104,450,0)
(143,489,0)
(463,258,0)
(90,118,0)
(488,234,0)
(573,353,0)
(377,494,0)
(164,403,0)
(515,189,0)
(324,393,0)
(189,523,0)
(36,15,0)
(452,453,0)
(377,418,0)
(584,277,0)
(207,68,0)
(21,250,0)
(137,260,0)
(592,377,0)
(586,377,0)
(583,353,0)
(486,530,0)
(163,273,0)
(356,312,0)
(413,258,0)
(326,216,0)
(526,310,0)
(284,308,0)
(399,147,0)
(66,167,0)
(526,154,0)
(253,491,0)
(176,587,0)
(75,285,0)
(196,41,0)
(373,105,0)
(560,403,0)
(75,6,0)
(456,83,0)
(122,258,0)
(297,463,0)
(326,8,0)
(375,52,0)
(366,520,0)
(420,335,0)
(308,520,0)
(586,78,0)
(444,397,0)
(491,253,0)
(180,557,0)
(533,23,0)
(100,575,0)
(261,77,0)
(471,268,0)
(154,517,0)
(135,556,0)
(188,121,0)
(63,285,0)
(373,216,0)
(367,23,0)
(101,15,0)
(502,63,0)
(451,588,0)
(536,505,0)
(505,536,0)
(578,301,0)
(529,281,0)
(13,494,0)
(338,247,0)
(506,312,0)
(162,258,0)
(328,547,0)
(471,234,0)
(262,600,0)
(451,523,0)
(526,158,0)
(35,20,0)
(553,16,0)
(222,285,0)
(125,77,0)
(329,258,0)
(200,10,0)
(505,233,0)
(495,537,0)
(497,145,0)
(144,109,0)
(445,179,0)
(600,463,0)
(517,600,0)
(163,521,0)
(183,524,0)
(364,537,0)
(490,447,0)
(73,258,0)
(479,312,0)
(360,256,0)
(547,15,0)
(497,268,0)
(253,250,0)
(526,143,0)
(424,56,0)
(46,588,0)
(471,516,0)
(385,193,0)
(586,145,0)
(368,336,0)
(37,199,0)
(585,258,0)
(68,199,0)
(56,424,0)
(210,363,0)
(435,277,0)
(477,12,0)
(161,430,0)
(509,458,0)
(142,75,0)
(497,310,0)
(582,435,0)
(63,177,0)
(586,234,0)
(247,523,0)
(526,84,0)
(498,271,0)
(257,521,0)
(241,464,0)
(128,243,0)
(17,320,0)
(25,68,0)
(467,172,0)
(372,83,0)
(300,285,0)
(273,542,0)
(243,128,0)
(232,8,0)
(360,592,0)
(14,592,0)
(394,343,0)
(74,127,0)
(255,392,0)
(512,312,0)
(499,202,0)
(310,130,0)
(310,205,0)
(446,312,0)
(149,272,0)
(520,16,0)
(343,57,0)
(537,399,0)
(487,312,0)
(542,273,0)
(592,363,0)
(590,123,0)
(470,404,0)
(288,136,0)
(48,10,0)
(300,494,0)
(72,250,0)
(249,187,0)
(132,493,0)
(386,63,0)
(254,430,0)
(185,553,0)
(222,10,0)
(318,372,0)
(480,132,0)
(361,454,0)
(132,24,0)
(451,547,0)
(312,258,0)
(357,505,0)
(195,419,0)
(333,399,0)
(155,424,0)
(40,492,0)
(521,123,0)
(526,363,0)
(36,494,0)
(121,55,0)
(251,404,0)
(352,95,0)
(544,78,0)
(314,13,0)
(84,415,0)
(178,373,0)
(384,83,0)
(439,55,0)
(193,372,0)
(167,588,0)
(577,312,0)
(301,232,0)
(106,8,0)
(52,19,0)
(566,133,0)
(481,553,0)
(398,258,0)
(79,15,0)
(218,154,0)
(588,588,0)
(67,512,0)
(592,158,0)
(444,463,0)
(389,69,0)
(103,333,0)
(95,352,1)
(217,359,1)
(179,494,1)
(379,128,1)
(353,523,1)
(199,37,1)
(52,535,1)
(178,532,1)
(127,250,1)
(33,452,1)
(497,505,1)
(593,312,1)
(28,523,1)
(9,479,1)
(597,122,1)
(412,177,1)
(337,448,1)
(272,149,1)
(272,127,1)
(481,553,1)
(357,268,1)
(526,52,1)
(358,88,1)
(497,158,1)
(123,12,1)
(429,300,1)
(29,246,1)
(89,534,1)
(334,10,1)
(288,560,1)
(172,467,1)
(165,268,1)
(52,312,1)
(246,520,1)
(512,67,1)
(134,372,1)
(579,334,1)
(44,277,1)
(65,557,1)
(551,105,1)
(524,312,1)
(64,588,1)
(331,494,1)
(385,310,1)
(386,216,1)
(444,77,1)
(170,23,1)
(173,185,1)
(366,520,1)
(410,340,1)
(191,252,1)
(171,425,1)
(592,179,1)
(206,433,1)
(274,507,1)
(502,202,1)
(110,523,1)
(118,90,1)
(471,145,1)
(347,20,1)
(286,575,1)
(526,363,1)
(232,301,1)
(360,526,1)
(43,490,1)
(399,537,1)
(433,564,1)
(10,271,1)
(149,594,1)
(169,366,1)
(223,312,1)
(593,457,1)
(308,523,1)
(445,418,1)
(235,312,1)
(68,25,1)
(429,473,1)
(0,356,1)
(177,63,1)
(166,498,1)
(500,458,1)
(435,277,1)
(527,69,1)
(503,92,1)
(586,206,1)
(336,414,1)
(12,292,1)
(421,520,1)
(140,285,1)
(253,250,1)
(84,172,1)
(158,481,1)
(143,563,1)
(558,345,1)
(36,309,1)
(555,448,1)
(439,285,1)
(436,485,1)
(19,271,1)
(599,331,1)
(499,472,1)
(346,134,1)
(229,588,1)
(300,221,1)
(481,522,1)
(222,494,1)
(257,175,1)
(183,475,1)
(526,158,1)
(390,133,1)
(421,588,1)
(41,250,1)
(133,566,1)
(246,450,1)
(510,152,1)
(435,567,1)
(123,171,1)
(356,362,1)
(252,140,1)
(470,251,1)
(592,268,1)
(54,312,1)
(575,100,1)
(575,541,1)
(586,310,1)
(167,216,1)
(440,302,1)
(360,357,1)
(506,312,1)
(200,285,1)
(19,534,1)
(302,222,1)
(195,98,1)
(600,463,1)
(335,216,1)
(210,170,1)
(496,13,1)
(243,379,1)
(314,545,1)
(546,413,1)
(185,28,1)
(586,512,1)
(360,558,1)
(357,377,1)
(534,454,1)
(87,319,1)
(269,480,1)
(345,110,1)
(261,125,1)
(526,294,1)
(144,238,1)
(373,100,1)
(602,52,1)
(481,450,1)
(104,116,1)
(560,523,1)
(135,108,1)
(103,27,1)
(357,11,1)
(375,163,1)
(287,114,1)
(558,524,1)
(332,529,1)
(586,145,1)
(212,477,1)
(586,268,1)
(457,82,1)
(335,420,1)
(586,84,1)
(400,86,1)
(586,78,1)
(373,216,1)
(415,95,1)
(279,385,1)
(520,16,1)
(329,487,1)
(361,438,1)
(588,588,1)
(493,132,1)
(403,317,1)
(119,146,1)
(466,391,1)
(557,180,1)
(25,207,1)
(443,290,1)
(234,601,1)
(467,29,1)
(492,553,1)
(137,524,1)
(366,523,1)
(152,267,1)
(588,523,1)
(451,588,1)
(169,65,1)
(159,492,1)
(108,394,1)
(497,145,1)
(124,16,1)
(189,523,1)
(125,296,1)
(544,489,1)
(592,14,1)
(394,415,1)
(574,503,1)
(497,363,1)
(475,28,1)
(308,284,1)
(477,395,1)
(275,388,1)
(525,311,1)
(455,474,1)
(301,578,1)
(17,297,1)
(331,285,1)
(520,94,1)
(426,127,1)
(422,383,1)
(336,368,1)
(526,310,1)
(587,176,1)
(188,577,1)
(246,349,1)
(360,586,1)
(573,4,1)
(471,505,1)
(169,198,1)
(1,597,1)
(88,523,1)
(577,312,1)
(136,402,1)
(583,573,1)
(491,229,1)
(293,366,1)
(266,320,1)
(139,307,1)
(215,413,1)
(168,155,1)
(290,216,1)
(63,285,1)
(147,482,1)
(393,355,1)
(133,372,1)
(241,133,1)
(297,250,1)
(170,575,1)
(247,26,1)
(176,234,1)
(246,523,1)
(357,234,1)
(366,588,1)
(433,520,1)
(586,235,1)
(404,216,1)
(286,55,1)
(529,478,1)
(389,521,1)
(458,509,1)
(586,363,1)
(85,312,1)
(482,417,1)
(565,223,1)
(409,196,1)
(284,490,1)
(291,431,1)
(64,520,1)
(373,178,1)
(199,68,1)
(471,310,1)
(342,237,1)
(586,179,1)
(380,440,1)
(453,245,1)
(468,91,1)
(586,136,1)
(472,484,1)
(526,152,1)
(357,505,1)
(446,305,1)
(420,181,1)
(66,591,1)
(223,49,1)
(312,38,1)
(13,285,1)
(519,136,1)
(493,372,1)
(2,517,1)
(560,588,1)
(592,145,1)
(471,268,1)
(591,450,1)
(321,12,1)
(337,555,1)
(94,97,1)
(360,497,1)
(210,23,1)
(526,268,1)
(117,567,1)
(187,249,1)
(577,1,1)
(78,312,1)
(296,531,1)
(179,285,1)
(113,272,1)
(526,479,1)
(331,380,1)
(75,494,1)
(318,372,1)
(568,22,1)
(546,449,1)
(477,171,1)
(121,188,1)
(5,252,1)
(340,146,1)
(333,303,1)
(542,598,1)
(127,74,1)
(121,55,1)
(297,312,1)
(367,588,1)
(142,63,1)
(540,255,1)
(584,260,1)
(533,367,1)
(280,596,1)
(474,584,1)
(247,523,1)
(75,6,1)
(465,504,1)
(493,129,1)
(592,310,1)
(97,553,1)
(491,147,1)
(359,560,1)
(403,216,1)
(298,142,1)
(145,285,1)
(318,455,1)
(588,167,1)
(505,536,1)
(553,173,1)
(186,0,1)
(241,464,1)
(251,443,1)
(122,285,1)
(112,568,1)
(432,465,1)
(163,9,1)
(189,325,1)
(222,10,1)
(331,10,1)
(249,593,1)
(63,502,1)
(189,520,1)
(451,572,1)
(38,31,1)
(289,426,1)
(285,85,1)
(200,10,1)
(421,523,1)
(313,41,1)
(360,256,1)
(352,211,1)
(19,326,1)
(586,154,1)
(193,279,1)
(121,101,1)
(67,461,1)
(308,520,1)
(292,374,1)
(471,500,1)
(143,312,1)
(69,199,1)
(144,109,1)
(62,446,1)
(368,427,1)
(163,521,1)
(246,398,1)
(487,312,1)
(448,138,1)
(140,10,1)
(592,505,1)
(308,588,1)
(100,393,1)
(268,387,1)
(309,388,1)
(358,460,1)
(234,312,1)
(586,152,1)
(10,534,1)
(5,191,1)
(326,216,1)
(398,144,1)
(563,2,1)
(481,398,1)
(538,132,1)
(330,248,1)
(586,52,1)
(532,363,1)
(79,463,1)
(79,581,1)
(511,315,1)
(85,543,1)
(383,469,1)
(444,397,1)
(454,361,1)
(541,100,1)
(545,179,1)
(184,512,1)
(354,78,1)
(453,200,1)
(524,183,1)
(296,587,1)
(589,273,1)
(586,577,1)
(433,588,1)
(45,93,1)
(219,13,1)
(349,280,1)
(74,148,1)
(497,113,1)
(260,523,1)
(507,271,1)
(114,546,1)
(492,462,1)
(18,306,1)
(34,549,1)
(96,139,1)
(128,16,1)
(504,50,1)
(427,398,1)
(328,423,1)
(391,463,1)
(281,529,1)
(572,328,1)
(535,375,1)
(222,579,1)
(471,377,1)
(272,147,1)
(327,270,1)
(131,580,1)
(130,492,1)
(387,347,1)
(252,381,1)
(406,439,1)
(509,250,1)
(226,316,1)
(149,250,1)
(469,466,1)
(560,520,1)
(297,525,1)
(431,299,1)
(281,147,1)
(526,78,1)
(164,27,1)
(48,145,1)
(282,421,1)
(23,450,1)
(450,398,1)
(169,282,1)
(247,338,1)
(578,285,1)
(268,494,1)
(310,130,1)
(402,288,1)
(549,332,1)
(221,232,1)
(22,369,1)
(318,277,1)
(36,494,1)
(46,513,1)
(93,266,1)
(4,243,1)
(200,494,1)
(377,32,1)
(111,166,1)
(550,353,1)
(601,488,1)
(464,378,1)
(122,494,1)
(462,40,1)
(495,18,1)
(528,337,1)
(383,312,1)
(42,17,1)
(489,422,1)
(10,48,1)
(78,570,1)
(586,158,1)
(399,147,1)
(429,101,1)
(491,253,1)
(454,604,1)
(348,599,1)
(181,139,1)
(123,590,1)
(526,512,1)
(129,269,1)
(216,341,1)
(357,145,1)
(526,154,1)
(202,499,1)
(95,490,1)
(377,285,1)
(320,42,1)
(299,509,1)
(497,268,1)
(526,377,1)
(404,470,1)
(228,45,1)
(301,508,1)
(187,593,1)
(592,377,1)
(523,336,1)
(317,164,1)
(529,250,1)
(451,520,1)
(305,231,1)
(61,354,1)
(92,247,1)
(90,396,1)
(477,422,1)
(489,171,1)
(588,520,1)
(30,424,1)
(421,382,1)
(253,468,1)
(530,486,1)
(20,35,1)
(101,76,1)
(297,463,1)
(449,235,1)
(520,523,1)
(578,494,1)
(294,491,1)
(31,283,1)
(351,503,1)
(480,205,1)
(413,506,1)
(598,321,1)
(236,330,1)
(592,363,1)
(526,577,1)
(257,171,1)
(521,123,1)
(438,131,1)
(61,265,1)
(363,210,1)
(128,44,1)
(51,496,1)
(190,377,1)
(300,285,1)
(76,192,1)
(586,143,1)
(526,145,1)
(537,364,1)
(326,204,1)
(509,371,1)
(517,600,1)
(144,239,1)
(584,243,1)
(425,407,1)
(56,567,1)
(38,250,1)
(98,557,1)
(255,548,1)
(50,494,1)
(419,195,1)
(487,224,1)
(393,216,1)
(471,234,1)
(118,312,1)
(479,312,1)
(49,327,1)
(586,479,1)
(489,12,1)
(559,386,1)
(429,69,1)
(46,523,1)
(366,70,1)
(46,588,1)
(343,556,1)
(55,54,1)
(154,218,1)
(408,217,1)
(193,372,1)
(16,241,1)
(479,287,1)
(580,451,1)
(309,304,1)
(530,312,1)
(553,398,1)
(303,103,1)
(21,250,1)
(28,16,1)
(311,342,1)
(578,434,1)
(467,421,1)
(189,588,1)
(243,523,1)
(211,84,1)
(369,253,1)
(581,365,1)
(471,179,1)
(306,333,1)
(79,250,1)
(202,472,1)
(243,128,1)
(536,450,1)
(230,582,1)
(360,592,1)
(214,289,1)
(136,312,1)
(446,312,1)
(592,158,1)
(600,227,1)
(395,429,1)
(436,250,1)
(539,79,1)
(248,101,1)
(553,16,1)
(315,16,1)
(259,222,1)
(283,147,1)
(558,155,1)
(471,158,1)
(423,158,1)
(498,62,1)
(196,419,1)
(355,324,1)
(382,343,1)
(570,544,1)
(536,96,1)
(592,234,1)
(233,561,1)
(122,510,1)
(567,435,1)
(566,346,1)
(471,363,1)
(424,56,1)
(333,250,1)
(360,471,1)
(53,143,1)
(522,419,1)
(124,538,1)
(270,45,1)
(123,422,1)
(276,358,1)
(526,505,1)
(153,72,1)
(198,320,1)
(218,169,1)
(488,124,1)
(536,553,1)
(371,313,1)
(302,528,1)
(26,329,1)
(404,490,1)
(267,60,1)
(548,531,1)
(13,494,1)
(82,228,1)
(3,401,1)
(560,514,1)
(353,583,1)
(14,281,1)
(180,539,1)
(590,257,1)
(207,389,1)
(341,223,1)
(561,505,1)
(556,490,1)
(204,527,1)
(562,121,1)
(256,574,1)
(63,494,1)
(155,3,1)
(497,310,1)
(286,46,1)
(105,373,1)
(478,412,1)
(595,312,1)
(357,179,1)
(339,515,1)
(35,410,1)
(20,302,1)
(477,12,1)
(77,250,1)
(265,530,1)
(268,285,1)
(399,333,1)
(560,403,1)
(193,132,1)
(286,89,1)
(80,168,1)
(260,137,1)
(377,494,1)
(515,189,1)
(146,348,1)
(362,298,1)
(364,495,1)
(148,20,1)
(271,197,1)
(159,124,1)
(407,175,1)
(374,36,1)
(104,216,1)
(518,66,1)
(340,119,1)
(526,136,1)
(263,326,1)
(564,562,1)
(238,595,1)
(537,250,1)
(7,265,1)
(396,589,1)
(179,244,1)
(484,559,1)
(307,263,1)
(27,603,1)
(301,13,1)
(450,104,1)
(229,523,1)
(23,533,1)
(200,416,1)
(76,273,1)
(316,177,1)
(526,234,1)
(175,212,1)
(405,569,1)
(116,220,1)
(246,553,1)
(56,80,1)
(167,518,1)
(508,51,1)
(490,404,1)
(163,273,1)
(146,312,1)
(145,494,1)
(209,190,1)
(393,100,1)
(418,5,1)
(304,275,1)
(229,99,1)
(358,571,1)
(526,143,1)
(514,403,1)
(513,233,1)
(229,153,1)
(28,511,1)
(32,33,1)
(526,84,1)
(485,34,1)
(186,356,1)
(35,331,1)
(526,179,1)
(235,405,1)
(357,363,1)
(586,234,1)
(151,43,1)
(392,312,1)
(79,312,1)
(110,117,1)
(356,312,1)
(273,542,1)
(13,314,1)
(569,61,1)
(3,550,1)
(10,326,1)
(140,209,1)
(463,444,1)
(527,429,1)
(72,112,1)
(365,236,1)
(361,312,1)
(86,422,1)
(163,62,1)
(594,214,1)
(308,107,1)
(324,551,1)
(452,453,1)
(429,55,1)
(154,250,1)
(145,226,1)
(192,118,1)
(54,350,1)
(458,41,1)
(378,390,1)
(341,565,1)
(222,285,1)
(229,520,1)
(91,433,1)
(350,406,1)
(177,75,1)
(472,312,1)
(197,111,1)
(536,398,1)
(473,300,1)
(372,392,1)
(531,312,1)
(596,64,1)
(357,158,1)
(244,445,1)
(451,523,1)
(494,187,1)
(497,377,1)
(13,216,1)
(586,505,1)
(486,400,1)
(506,87,1)
(75,285,1)
(72,250,1)
(6,186,1)
(401,550,1)
(132,493,1)
(46,520,1)
(27,335,1)
(392,540,1)
(376,351,1)
(175,477,1)
(199,521,1)
(556,343,1)
(205,193,1)
(319,7,1)
(433,523,1)
(435,230,1)
(461,308,1)
(231,215,1)
(503,552,1)
(448,312,1)
(543,274,1)
(220,339,1)
(526,235,1)
(357,310,1)
(434,219,1)
(64,184,1)
(497,179,1)
(508,216,1)
(70,286,1)
(284,151,1)
(443,308,1)
(578,452,1)
(56,277,1)
(21,291,1)
(140,494,1)
(381,140,1)
(130,159,1)
(40,520,1)
(416,165,1)
(152,312,1)
(290,519,1)
(68,312,1)
(64,523,1)
(353,398,1)
(325,408,1)
(531,376,1)
(60,19,1)
(77,261,1)
(237,293,1)
(300,494,1)
(172,29,1)
(121,69,1)
(325,216,1)
(11,399,1)
(582,30,1)
(450,450,1)
(603,335,1)
(224,276,1)
(37,68,1)
(512,312,1)
(19,602,1)
(41,409,1)
(281,436,1)
(245,200,1)
(586,377,1)
(277,318,1)
(246,588,1)
(458,21,1)
(95,343,1)
(138,259,1)
(76,118,1)
(556,135,1)
(107,284,1)
(491,72,1)
(604,361,1)
(336,552,1)
(503,247,1)
(388,432,1)
(227,154,1)
(489,53,1)
(401,110,1)
(197,312,1)
(497,234,1)
(450,553,1)
(600,262,1)
(464,312,1)
(33,20,2)
(586,154,2)
(257,429,2)
(401,28,2)
(312,38,2)
(363,560,2)
(217,560,2)
(502,202,2)
(284,308,2)
(404,216,2)
(477,12,2)
(173,28,2)
(78,557,2)
(394,560,2)
(309,388,2)
(152,557,2)
(493,132,2)
(570,560,2)
(209,20,2)
(600,557,2)
(129,124,2)
(462,28,2)
(235,560,2)
(286,531,2)
(116,560,2)
(87,28,2)
(114,560,2)
(130,28,2)
(191,20,2)
(580,419,2)
(492,553,2)
(353,398,2)
(269,124,2)
(544,557,2)
(426,20,2)
(563,557,2)
(586,143,2)
(234,312,2)
(60,320,2)
(366,520,2)
(285,531,2)
(526,505,2)
(308,523,2)
(577,557,2)
(582,28,2)
(600,463,2)
(562,320,2)
(471,145,2)
(218,560,2)
(30,28,2)
(449,366,2)
(304,45,2)
(20,177,2)
(528,177,2)
(512,560,2)
(169,320,2)
(29,246,2)
(163,366,2)
(220,560,2)
(463,444,2)
(410,340,2)
(19,326,2)
(436,250,2)
(590,429,2)
(423,419,2)
(497,505,2)
(281,147,2)
(301,578,2)
(155,28,2)
(38,250,2)
(235,312,2)
(255,531,2)
(229,588,2)
(433,560,2)
(425,175,2)
(331,494,2)
(127,250,2)
(205,124,2)
(326,20,2)
(64,560,2)
(75,285,2)
(168,28,2)
(188,557,2)
(534,419,2)
(287,320,2)
(45,320,2)
(526,433,2)
(189,560,2)
(377,285,2)
(146,312,2)
(219,13,2)
(265,530,2)
(586,152,2)
(229,523,2)
(597,560,2)
(400,28,2)
(332,177,2)
(489,171,2)
(592,145,2)
(199,521,2)
(551,560,2)
(52,312,2)
(559,45,2)
(241,531,2)
(594,20,2)
(530,28,2)
(84,560,2)
(249,45,2)
(287,366,2)
(458,509,2)
(159,28,2)
(265,531,2)
(121,55,2)
(601,28,2)
(534,454,2)
(37,429,2)
(474,28,2)
(418,20,2)
(545,20,2)
(486,531,2)
(318,277,2)
(444,77,2)
(421,588,2)
(336,414,2)
(509,250,2)
(481,398,2)
(124,16,2)
(579,177,2)
(271,197,2)
(241,133,2)
(569,320,2)
(243,523,2)
(546,560,2)
(300,20,2)
(565,45,2)
(563,366,2)
(485,177,2)
(1,320,2)
(227,560,2)
(286,28,2)
(383,312,2)
(536,553,2)
(277,243,2)
(600,366,2)
(211,421,2)
(20,302,2)
(121,560,2)
(97,28,2)
(602,320,2)
(132,124,2)
(526,268,2)
(290,216,2)
(163,560,2)
(599,302,2)
(184,560,2)
(163,521,2)
(497,179,2)
(386,45,2)
(424,28,2)
(517,600,2)
(302,177,2)
(328,419,2)
(256,503,2)
(19,560,2)
(526,136,2)
(558,155,2)
(222,10,2)
(85,312,2)
(5,20,2)
(63,494,2)
(223,45,2)
(307,20,2)
(538,28,2)
(597,320,2)
(292,45,2)
(446,28,2)
(193,132,2)
(379,243,2)
(548,531,2)
(281,529,2)
(567,110,2)
(584,28,2)
(268,285,2)
(229,99,2)
(187,45,2)
(562,560,2)
(286,139,2)
(272,20,2)
(399,537,2)
(369,433,2)
(463,531,2)
(135,421,2)
(586,310,2)
(165,20,2)
(357,310,2)
(407,175,2)
(479,557,2)
(233,139,2)
(586,136,2)
(497,20,2)
(235,366,2)
(158,419,2)
(121,366,2)
(205,193,2)
(7,531,2)
(145,285,2)
(41,419,2)
(592,505,2)
(315,531,2)
(573,28,2)
(592,234,2)
(429,101,2)
(526,310,2)
(70,419,2)
(439,531,2)
(569,366,2)
(452,20,2)
(43,560,2)
(320,366,2)
(140,285,2)
(360,592,2)
(130,124,2)
(20,35,2)
(297,250,2)
(558,524,2)
(53,366,2)
(60,557,2)
(44,28,2)
(399,27,2)
(488,28,2)
(243,243,2)
(53,320,2)
(514,27,2)
(528,337,2)
(14,177,2)
(68,312,2)
(560,523,2)
(114,320,2)
(172,29,2)
(570,320,2)
(575,560,2)
(497,234,2)
(246,560,2)
(310,130,2)
(510,320,2)
(477,171,2)
(122,560,2)
(530,531,2)
(9,557,2)
(602,557,2)
(479,312,2)
(550,28,2)
(86,28,2)
(62,28,2)
(78,560,2)
(195,557,2)
(124,28,2)
(497,158,2)
(546,320,2)
(475,28,2)
(378,531,2)
(511,531,2)
(123,429,2)
(526,235,2)
(471,310,2)
(111,531,2)
(526,154,2)
(309,45,2)
(75,6,2)
(593,45,2)
(360,526,2)
(111,28,2)
(27,139,2)
(334,177,2)
(222,285,2)
(95,343,2)
(458,419,2)
(85,28,2)
(490,560,2)
(79,463,2)
(79,312,2)
(127,20,2)
(431,419,2)
(470,560,2)
(478,177,2)
(281,177,2)
(80,110,2)
(481,419,2)
(335,216,2)
(60,560,2)
(586,433,2)
(422,531,2)
(40,28,2)
(471,505,2)
(563,320,2)
(450,553,2)
(575,100,2)
(562,366,2)
(393,100,2)
(489,422,2)
(296,531,2)
(473,20,2)
(259,177,2)
(231,531,2)
(451,523,2)
(67,560,2)
(70,28,2)
(21,250,2)
(46,520,2)
(302,528,2)
(46,523,2)
(448,177,2)
(421,520,2)
(382,560,2)
(100,560,2)
(52,320,2)
(180,45,2)
(152,320,2)
(64,520,2)
(354,366,2)
(155,3,2)
(10,326,2)
(189,325,2)
(36,45,2)
(305,531,2)
(114,557,2)
(422,383,2)
(454,419,2)
(341,45,2)
(282,560,2)
(503,247,2)
(489,557,2)
(602,560,2)
(510,557,2)
(311,366,2)
(28,523,2)
(178,560,2)
(214,20,2)
(556,560,2)
(163,273,2)
(596,560,2)
(376,503,2)
(584,243,2)
(10,534,2)
(491,72,2)
(172,560,2)
(78,320,2)
(360,357,2)
(393,216,2)
(526,84,2)
(375,560,2)
(122,366,2)
(546,557,2)
(104,560,2)
(229,433,2)
(357,27,2)
(429,20,2)
(366,139,2)
(522,419,2)
(28,16,2)
(3,550,2)
(361,312,2)
(260,28,2)
(586,479,2)
(546,413,2)
(303,27,2)
(168,110,2)
(142,63,2)
(375,366,2)
(435,28,2)
(270,45,2)
(221,20,2)
(562,557,2)
(29,560,2)
(108,560,2)
(353,523,2)
(19,320,2)
(372,531,2)
(53,560,2)
(234,28,2)
(435,110,2)
(248,45,2)
(68,429,2)
(247,338,2)
(4,28,2)
(41,250,2)
(383,531,2)
(451,419,2)
(35,302,2)
(78,366,2)
(19,366,2)
(177,63,2)
(316,177,2)
(401,110,2)
(331,285,2)
(454,361,2)
(395,429,2)
(415,95,2)
(592,158,2)
(101,76,2)
(143,560,2)
(536,398,2)
(245,20,2)
(600,560,2)
(487,312,2)
(535,366,2)
(464,312,2)
(36,494,2)
(107,308,2)
(413,531,2)
(479,320,2)
(466,28,2)
(61,265,2)
(586,145,2)
(451,520,2)
(577,312,2)
(458,41,2)
(474,243,2)
(436,177,2)
(349,560,2)
(193,28,2)
(353,28,2)
(405,320,2)
(362,63,2)
(135,560,2)
(246,553,2)
(266,320,2)
(348,302,2)
(469,531,2)
(300,285,2)
(121,69,2)
(105,560,2)
(520,28,2)
(273,542,2)
(107,560,2)
(563,560,2)
(593,312,2)
(396,45,2)
(341,223,2)
(5,252,2)
(131,419,2)
(7,28,2)
(177,75,2)
(521,123,2)
(433,523,2)
(586,179,2)
(13,494,2)
(465,45,2)
(72,250,2)
(517,320,2)
(218,557,2)
(592,310,2)
(340,146,2)
(193,372,2)
(134,531,2)
(6,186,2)
(169,560,2)
(379,28,2)
(589,45,2)
(480,124,2)
(523,336,2)
(561,139,2)
(372,392,2)
(588,588,2)
(592,377,2)
(163,557,2)
(352,421,2)
(285,28,2)
(301,20,2)
(183,28,2)
(467,421,2)
(85,531,2)
(578,494,2)
(560,27,2)
(166,28,2)
(179,494,2)
(46,588,2)
(21,419,2)
(526,52,2)
(122,285,2)
(77,250,2)
(592,177,2)
(114,366,2)
(499,45,2)
(366,523,2)
(439,28,2)
(272,127,2)
(265,28,2)
(337,177,2)
(505,536,2)
(199,68,2)
(72,433,2)
(337,448,2)
(19,534,2)
(604,419,2)
(179,285,2)
(54,531,2)
(308,588,2)
(471,234,2)
(22,433,2)
(444,28,2)
(200,494,2)
(385,124,2)
(355,575,2)
(600,320,2)
(570,366,2)
(169,366,2)
(210,575,2)
(260,523,2)
(532,575,2)
(2,320,2)
(470,308,2)
(510,366,2)
(415,560,2)
(144,239,2)
(358,571,2)
(489,366,2)
(597,366,2)
(202,472,2)
(218,320,2)
(525,366,2)
(429,69,2)
(202,45,2)
(108,421,2)
(537,250,2)
(123,171,2)
(484,45,2)
(176,28,2)
(529,177,2)
(1,557,2)
(235,557,2)
(574,503,2)
(9,320,2)
(529,250,2)
(70,560,2)
(172,421,2)
(61,366,2)
(289,20,2)
(200,285,2)
(302,222,2)
(235,320,2)
(294,433,2)
(533,560,2)
(375,320,2)
(42,366,2)
(170,575,2)
(508,216,2)
(443,560,2)
(438,419,2)
(343,560,2)
(301,13,2)
(413,28,2)
(36,309,2)
(544,560,2)
(350,531,2)
(305,28,2)
(424,110,2)
(177,45,2)
(366,560,2)
(495,27,2)
(526,143,2)
(271,531,2)
(285,85,2)
(357,179,2)
(200,20,2)
(489,12,2)
(415,421,2)
(110,110,2)
(226,177,2)
(494,187,2)
(449,320,2)
(410,302,2)
(582,110,2)
(215,28,2)
(61,320,2)
(556,421,2)
(468,433,2)
(577,320,2)
(324,575,2)
(569,557,2)
(271,28,2)
(568,433,2)
(64,588,2)
(230,110,2)
(458,21,2)
(63,502,2)
(132,493,2)
(56,567,2)
(91,433,2)
(429,300,2)
(148,20,2)
(490,308,2)
(100,393,2)
(251,308,2)
(358,460,2)
(87,531,2)
(524,28,2)
(163,320,2)
(212,429,2)
(1,560,2)
(3,110,2)
(215,531,2)
(188,366,2)
(300,494,2)
(450,560,2)
(339,560,2)
(586,512,2)
(412,177,2)
(433,366,2)
(52,366,2)
(297,463,2)
(360,558,2)
(247,523,2)
(105,373,2)
(3,28,2)
(374,45,2)
(556,343,2)
(75,63,2)
(167,560,2)
(544,320,2)
(313,419,2)
(393,575,2)
(151,308,2)
(457,45,2)
(10,271,2)
(103,27,2)
(130,492,2)
(2,557,2)
(121,320,2)
(290,560,2)
(77,531,2)
(138,177,2)
(560,520,2)
(64,523,2)
(152,560,2)
(128,243,2)
(52,560,2)
(82,45,2)
(357,158,2)
(453,20,2)
(246,523,2)
(360,586,2)
(149,250,2)
(228,45,2)
(366,419,2)
(420,139,2)
(144,109,2)
(450,450,2)
(149,20,2)
(405,560,2)
(267,560,2)
(171,175,2)
(286,419,2)
(279,28,2)
(526,145,2)
(50,45,2)
(331,302,2)
(227,557,2)
(444,397,2)
(78,312,2)
(360,497,2)
(472,45,2)
(48,177,2)
(229,520,2)
(118,45,2)
(497,377,2)
(274,28,2)
(279,124,2)
(357,377,2)
(299,419,2)
(272,149,2)
(391,531,2)
(354,320,2)
(76,118,2)
(76,273,2)
(557,45,2)
(446,312,2)
(394,421,2)
(124,124,2)
(206,433,2)
(101,45,2)
(387,20,2)
(246,520,2)
(327,45,2)
(586,234,2)
(291,419,2)
(388,45,2)
(363,575,2)
(356,63,2)
(154,320,2)
(496,13,2)
(592,363,2)
(450,104,2)
(497,310,2)
(308,560,2)
(12,45,2)
(467,560,2)
(564,366,2)
(56,28,2)
(448,312,2)
(538,124,2)
(136,560,2)
(89,419,2)
(404,560,2)
(479,366,2)
(586,268,2)
(399,147,2)
(246,450,2)
(122,320,2)
(23,450,2)
(416,20,2)
(284,560,2)
(55,54,2)
(357,363,2)
(517,366,2)
(274,531,2)
(297,312,2)
(90,45,2)
(79,250,2)
(53,557,2)
(540,531,2)
(371,419,2)
(503,552,2)
(408,560,2)
(572,419,2)
(30,110,2)
(581,45,2)
(0,63,2)
(527,20,2)
(434,13,2)
(204,20,2)
(222,177,2)
(517,557,2)
(192,45,2)
(252,140,2)
(200,10,2)
(280,560,2)
(197,312,2)
(46,139,2)
(11,27,2)
(207,429,2)
(413,506,2)
(586,158,2)
(269,28,2)
(491,253,2)
(360,256,2)
(122,494,2)
(65,557,2)
(498,531,2)
(435,567,2)
(471,377,2)
(93,320,2)
(390,531,2)
(444,531,2)
(567,28,2)
(241,464,2)
(227,320,2)
(363,210,2)
(481,553,2)
(546,366,2)
(324,560,2)
(105,575,2)
(505,139,2)
(286,560,2)
(216,45,2)
(391,28,2)
(361,419,2)
(267,366,2)
(535,320,2)
(310,28,2)
(251,560,2)
(284,490,2)
(318,372,2)
(531,312,2)
(506,312,2)
(543,531,2)
(354,560,2)
(218,366,2)
(366,531,2)
(588,167,2)
(526,78,2)
(181,139,2)
(515,560,2)
(435,277,2)
(62,446,2)
(28,531,2)
(373,575,2)
(405,557,2)
(366,588,2)
(351,503,2)
(210,23,2)
(586,363,2)
(75,494,2)
(404,490,2)
(152,366,2)
(491,147,2)
(230,28,2)
(128,28,2)
(513,139,2)
(159,124,2)
(385,28,2)
(121,557,2)
(512,312,2)
(133,531,2)
(189,523,2)
(330,45,2)
(530,312,2)
(140,10,2)
(357,234,2)
(569,560,2)
(380,302,2)
(132,28,2)
(13,216,2)
(306,27,2)
(55,28,2)
(335,139,2)
(461,560,2)
(95,560,2)
(498,28,2)
(591,560,2)
(373,560,2)
(402,560,2)
(267,320,2)
(267,557,2)
(542,45,2)
(25,429,2)
(54,28,2)
(205,28,2)
(480,28,2)
(471,363,2)
(321,45,2)
(232,301,2)
(366,28,2)
(492,28,2)
(566,531,2)
(69,199,2)
(493,28,2)
(400,531,2)
(497,268,2)
(246,398,2)
(170,560,2)
(325,560,2)
(497,363,2)
(491,229,2)
(509,419,2)
(477,422,2)
(287,560,2)
(100,575,2)
(237,366,2)
(18,27,2)
(592,268,2)
(564,320,2)
(129,28,2)
(62,531,2)
(117,28,2)
(223,312,2)
(399,333,2)
(104,216,2)
(544,366,2)
(507,28,2)
(143,320,2)
(268,494,2)
(273,45,2)
(507,531,2)
(541,575,2)
(140,494,2)
(137,28,2)
(555,177,2)
(450,398,2)
(583,28,2)
(261,531,2)
(314,20,2)
(508,13,2)
(377,494,2)
(553,28,2)
(373,100,2)
(419,557,2)
(86,531,2)
(367,560,2)
(403,216,2)
(377,20,2)
(152,312,2)
(526,179,2)
(94,28,2)
(455,243,2)
(16,531,2)
(146,302,2)
(389,429,2)
(61,557,2)
(166,531,2)
(526,377,2)
(506,28,2)
(70,531,2)
(443,308,2)
(535,557,2)
(452,453,2)
(432,45,2)
(526,152,2)
(406,28,2)
(392,531,2)
(19,557,2)
(253,433,2)
(169,557,2)
(84,172,2)
(231,28,2)
(537,27,2)
(187,593,2)
(301,508,2)
(471,179,2)
(185,28,2)
(433,320,2)
(486,28,2)
(360,471,2)
(27,335,2)
(455,28,2)
(567,435,2)
(543,28,2)
(236,45,2)
(433,520,2)
(504,45,2)
(189,520,2)
(350,28,2)
(118,312,2)
(524,312,2)
(125,531,2)
(63,45,2)
(578,452,2)
(453,200,2)
(133,372,2)
(575,575,2)
(421,523,2)
(586,577,2)
(34,177,2)
(319,28,2)
(275,45,2)
(449,560,2)
(493,124,2)
(110,28,2)
(541,560,2)
(560,403,2)
(578,285,2)
(216,341,2)
(333,27,2)
(440,302,2)
(587,28,2)
(23,560,2)
(252,20,2)
(55,531,2)
(536,450,2)
(519,560,2)
(310,124,2)
(2,366,2)
(60,366,2)
(526,577,2)
(44,243,2)
(188,560,2)
(178,575,2)
(189,588,2)
(164,27,2)
(287,557,2)
(175,477,2)
(526,512,2)
(532,560,2)
(422,28,2)
(409,419,2)
(381,20,2)
(600,262,2)
(558,28,2)
(526,158,2)
(359,560,2)
(309,304,2)
(277,318,2)
(19,271,2)
(196,419,2)
(345,28,2)
(143,557,2)
(342,366,2)
(506,531,2)
(123,12,2)
(79,45,2)
(520,16,2)
(74,20,2)
(491,433,2)
(526,234,2)
(317,27,2)
(140,20,2)
(352,560,2)
(308,520,2)
(69,429,2)
(66,560,2)
(56,277,2)
(564,557,2)
(95,490,2)
(500,419,2)
(318,243,2)
(494,45,2)
(347,20,2)
(418,5,2)
(95,421,2)
(489,560,2)
(167,216,2)
(356,312,2)
(429,55,2)
(526,479,2)
(272,147,2)
(186,356,2)
(143,312,2)
(577,366,2)
(123,422,2)
(364,27,2)
(520,523,2)
(526,363,2)
(479,560,2)
(549,177,2)
(578,13,2)
(246,588,2)
(110,523,2)
(243,128,2)
(477,429,2)
(424,56,2)
(471,419,2)
(551,575,2)
(592,179,2)
(197,531,2)
(145,177,2)
(76,45,2)
(336,552,2)
(536,139,2)
(35,410,2)
(539,45,2)
(158,481,2)
(263,20,2)
(597,557,2)
(318,28,2)
(393,560,2)
(253,250,2)
(481,450,2)
(586,84,2)
(518,560,2)
(553,16,2)
(121,101,2)
(143,366,2)
(603,139,2)
(243,28,2)
(70,139,2)
(163,62,2)
(550,353,2)
(471,158,2)
(117,110,2)
(77,28,2)
(198,320,2)
(340,302,2)
(421,421,2)
(445,20,2)
(63,285,2)
(373,216,2)
(13,20,2)
(406,531,2)
(535,560,2)
(357,268,2)
(122,557,2)
(113,20,2)
(588,523,2)
(277,28,2)
(392,312,2)
(32,20,2)
(383,28,2)
(227,366,2)
(531,503,2)
(308,284,2)
(49,45,2)
(588,560,2)
(197,28,2)
(98,557,2)
(1,366,2)
(466,531,2)
(404,308,2)
(2,560,2)
(153,433,2)
(493,372,2)
(398,144,2)
(35,331,2)
(268,20,2)
(598,45,2)
(521,429,2)
(405,366,2)
(354,557,2)
(463,28,2)
(553,398,2)
(51,13,2)
(433,588,2)
(343,421,2)
(490,404,2)
(10,177,2)
(281,436,2)
(84,421,2)
(61,560,2)
(326,216,2)
(298,63,2)
(433,557,2)
(296,28,2)
(6,63,2)
(56,110,2)
(515,189,2)
(222,494,2)
(382,421,2)
(446,531,2)
(333,250,2)
(564,560,2)
(472,312,2)
(570,557,2)
(365,45,2)
(293,366,2)
(517,560,2)
(329,487,2)
(469,28,2)
(16,241,2)
(210,560,2)
(211,560,2)
(325,216,2)
(13,285,2)
(112,433,2)
(510,560,2)
(154,250,2)
(297,366,2)
(17,366,2)
(119,302,2)
(193,124,2)
(343,556,2)
(145,494,2)
(586,78,2)
(375,557,2)
(261,28,2)
(464,531,2)
(308,308,2)
(9,366,2)
(136,312,2)
(471,268,2)
(502,45,2)
(80,28,2)
(186,63,2)
(96,139,2)
(199,429,2)
(357,145,2)
(403,27,2)
(175,429,2)
(451,588,2)
(560,588,2)
(128,16,2)
(52,557,2)
(331,10,2)
(9,560,2)
(125,28,2)
(319,531,2)
(154,560,2)
(190,20,2)
(54,312,2)
(244,20,2)
(346,531,2)
(355,560,2)
(155,110,2)
(288,560,2)
(357,505,2)
(154,366,2)
(179,20,2)
(586,505,2)
(577,560,2)
(188,320,2)
(489,320,2)
(602,366,2)
(556,490,2)
(154,557,2)
(586,377,2)
(139,20,2)
(586,52,2)
(586,235,2)
(151,560,2)
(449,557,2)
(43,308,2)
(421,560,2)
(497,145,2)
(588,520,2)
(232,20,2)
-----------------------------------
(0,CSIZE)
(1,dec_maxcodep)
(2,sp)
(3,--tp)
(4,tp)
(5,free_entp->next->length+1)
(6,&sp->dec_codetab[CSIZE])
(7,nextbits)
(8,)
(9,nbitsmask)
(10,free_entp->next = oldcodep)
(11,0)
(12,nbits = BITS_MIN)
(13,codep < free_entp)
(14,0)
(15,)
(16,residue = codep->length - sp->dec_restart)
(17,code)
(18,"Wrong length of decoded "\n\\n\\t\\t\\t\\t    "string: data probably corrupted at scanline %d")
(19,sp->dec_oldcodep = oldcodep)
(20,free_entp->next < &sp->dec_codetab[0] ||\n\\n\\t\\t    free_entp->next >= &sp->dec_codetab[CSIZE])
(21,tif->tif_row)
(22,"Not enough data at scanline %d (short %I64d bytes)
(23,tp = op)
(24,)
(25,dec_codetab)
(26,occ)
(27,codep->length == 0)
(28,residue > occ)
(29,tp = op + occ)
(30,codep)
(31,tif)
(32,length)
(33,free_entp)
(34,tif)
(35,free_entp->next >= &sp->dec_codetab[CSIZE])
(36,_TIFFmemset(free_entp, 0,\n\\n\\t\\t\\t\\t    (CSIZE - CODE_FIRST)
(37,nbitsmask)
(38,DecoderState(tif)
(39,sp)
(40,tp)
(41,tif->tif_clientdata)
(42,CODE_EOI)
(43,codep)
(44,residue)
(45,code == CODE_CLEAR)
(46,occ--)
(47,while (occ > 0)
(48,oldcodep)
(49,dec_codetab)
(50,free_entp)
(51,firstchar)
(52,sp->dec_oldcodep)
(53,nbits)
(54,sp->dec_maxcodep)
(55,maxcodep = sp->dec_maxcodep)
(56,codep->value)
(57,)
(58,do)
(59,)
(60,sp)
(61,sp->lzw_nextdata = nextdata)
(62,nbitsmask = sp->dec_nbitsmask)
(63,free_entp < &sp->dec_codetab[0])
(64,sp->dec_restart = occ)
(65,break;)
(66,codep)
(67,dec_restart)
(68,sp->dec_codetab)
(69,maxcodep = sp->dec_codetab + nbitsmask)
(70,0)
(71,)
(72,tif->tif_row)
(73,occ)
(74,tif_clientdata)
(75,free_entp >= &sp->dec_codetab[CSIZE])
(76,sp->dec_codetab + nbitsmask)
(77,tif->tif_rawcp)
(78,sp->lzw_nextdata)
(79,NextCode(tif, sp, bp, code, GetNextCodeCompat)
(80,value)
(81,if (++nbits > BITS_MAX)
(82,sp)
(83,)
(84,*--tp)
(85,sp->dec_free_entp)
(86,nextdata)
(87,lzw_nextbits)
(88,s)
(89,continue;)
(90,dec_codetab)
(91,tif)
(92,occ0)
(93,CODE_CLEAR)
(94,residue)
(95,codep->value)
(96,op)
(97,occ)
(98,code)
(99,unsigned __int64)
(100,codep = codep->next)
(101,maxcodep = sp->dec_codetab + nbitsmask)
(102,if ((tmsize_t)
(103,tif)
(104,codep->length)
(105,*--tp = codep->value)
(106,if (free_entp < &sp->dec_codetab[0] ||\n\\n\\t\\t    free_entp >= &sp->dec_codetab[CSIZE])
(107,occ)
(108,codep)
(109,uint8* op0)
(110,--occ)
(111,dec_oldcodep)
(112,tif_row)
(113,0)
(114,sp)
(115,nbits)
(116,length)
(117,occ)
(118,sp->dec_codetab)
(119,CSIZE)
(120,)
(121,sp->dec_maxcodep = maxcodep)
(122,sp->dec_free_entp = free_entp)
(123,MAXCODE(nbits)
(124,--residue)
(125,tif)
(126,)
(127,tif->tif_clientdata)
(128,--residue)
(129,next)
(130,--tp)
(131,sp)
(132,codep = codep->next)
(133,codep->length)
(134,residue)
(135,next)
(136,sp->dec_codep)
(137,occ)
(138,dec_codetab)
(139,code >= 256)
(140,free_entp->next)
(141,oldcodep)
(142,free_entp)
(143,sp->lzw_nbits)
(144,(char*)
(145,free_entp->next)
(146,sp->dec_codetab)
(147,module[] = "LZWDecodeCompat")
(148,tif)
(149,tif->tif_row)
(150,)
(151,length)
(152,sp->dec_free_entp)
(153,occ)
(154,tif->tif_rawcp)
(155,*--tp)
(156,codep)
(157,if (code >= CODE_CLEAR)
(158,*op++)
(159,tp)
(160,if (code == CODE_CLEAR)
(161,if(codep->length == 0)
(162,op)
(163,sp->dec_nbitsmask = nbitsmask)
(164,codep)
(165,free_entp)
(166,sp)
(167,codep->length)
(168,codep)
(169,tif)
(170,tp)
(171,nbits = BITS_MAX)
(172,--tp)
(173,residue)
(174,)
(175,++nbits > BITS_MAX)
(176,0)
(177,free_entp < &sp->dec_codetab[0] ||\n\\n\\t\\t    free_entp >= &sp->dec_codetab[CSIZE])
(178,value)
(179,free_entp->value)
(180,CODE_EOI)
(181,codep)
(182,if (residue > occ)
(183,dec_restart)
(184,occ)
(185,op)
(186,sp->dec_codetab[CSIZE])
(187,sp->dec_codetab + CODE_FIRST)
(188,maxcodep)
(189,occ >= codep->length)
(190,free_entp)
(191,1)
(192,nbitsmask)
(193,codep->value)
(194,do)
(195,CODE_CLEAR)
(196,tif)
(197,sp->dec_oldcodep)
(198,break;)
(199,sp->dec_codetab + nbitsmask)
(200,free_entp->next)
(201,)
(202,sp->dec_codetab[0])
(203,do)
(204,codep)
(205,*--tp = codep->value)
(206,1)
(207,sp)
(208,tp)
(209,next)
(210,--tp)
(211,codep)
(212,BITS_MAX)
(213,)
(214,tif)
(215,nbitsmask)
(216,codep = sp->dec_codetab + code)
(217,codep)
(218,tif_rawcp)
(219,free_entp)
(220,codep)
(221,free_entp)
(222,free_entp->next)
(223,sp->dec_codetab)
(224,NULL)
(225,bp)
(226,next)
(227,bp)
(228,free_entp)
(229,(unsigned __int64)
(230,next)
(231,sp)
(232,free_entp->value = (codep < free_entp)
(233,*op++ = code)
(234,sp->dec_restart)
(235,sp->lzw_nextbits)
(236,bp)
(237,sp)
(238,op0)
(239,char*)
(240,if (free_entp->next < &sp->dec_codetab[0] ||\n\\n\\t\\t    free_entp->next >= &sp->dec_codetab[CSIZE])
(241,codep->length - sp->dec_restart)
(242,module)
(243,--residue > occ)
(244,value)
(245,firstchar)
(246,op + occ)
(247,(tmsize_t)
(248,tif)
(249,CODE_FIRST)
(250,TIFF* tif)
(251,codep)
(252,free_entp->next->length)
(253,tif->tif_clientdata)
(254,)
(255,sp)
(256,return (0)
(257,nbitsmask)
(258,)
(259,sp)
(260,sp->dec_restart += occ)
(261,tif_rawcp)
(262,uint8*)
(263,code)
(264,maxcodep)
(265,nextdata = sp->lzw_nextdata)
(266,code)
(267,dec_free_entp)
(268,free_entp->firstchar)
(269,codep)
(270,codep)
(271,oldcodep = sp->dec_oldcodep)
(272,TIFFErrorExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t    "Corrupted LZW table at scanline %d", tif->tif_row)
(273,nbitsmask = MAXCODE(BITS_MIN)
(274,sp)
(275,code_t)
(276,sp)
(277,codep = codep->next)
(278,residue)
(279,value)
(280,op)
(281,TIFFErrorExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t    "Corrupted LZW table at scanline %d", tif->tif_row)
(282,break;)
(283,sp)
(284,codep->length)
(285,free_entp = sp->dec_free_entp)
(286,occ)
(287,dec_nbitsmask)
(288,sp)
(289,"Corrupted LZW table at scanline %d")
(290,sp->dec_codep = codep)
(291,tif_row)
(292,BITS_MIN)
(293,tif)
(294,0)
(295,do)
(296,bp)
(297,NextCode(tif, sp, bp, code, GetNextCodeCompat)
(298,sp)
(299,"LZWDecode: Corrupted LZW table at scanline %d")
(300,++free_entp)
(301,(codep < free_entp)
(302,free_entp->next < &sp->dec_codetab[0])
(303,tif_clientdata)
(304,sizeof (code_t)
(305,dec_nbitsmask)
(306,module)
(307,256)
(308,codep->length > occ)
(309,(CSIZE - CODE_FIRST)
(310,*--tp)
(311,code)
(312,*sp = DecoderState(tif)
(313,tif)
(314,free_entp)
(315,residue)
(316,free_entp)
(317,length)
(318,codep->next)
(319,sp)
(320,code == CODE_EOI)
(321,nbitsmask)
(322,free_entp)
(323,)
(324,codep)
(325,codep->length)
(326,oldcodep = codep)
(327,sp)
(328,*op++ = code)
(329,assert(sp != NULL)
(330,sp)
(331,free_entp->next)
(332,module)
(333,tif->tif_clientdata)
(334,free_entp)
(335,codep->length)
(336,(long)
(337,sp->dec_codetab[0])
(338,tmsize_t)
(339,op)
(340,sp->dec_codetab[CSIZE])
(341,sp->dec_codetab + code)
(342,bp)
(343,codep = codep->next)
(344,)
(345,1)
(346,codep)
(347,free_entp)
(348,dec_codetab)
(349,occ)
(350,dec_maxcodep)
(351,sp)
(352,value)
(353,op + occ)
(354,nextdata)
(355,next)
(356,sp->dec_codetab)
(357,return (0)
(358,(void)
(359,occ)
(360,RET)
(361,sp->dec_codetab)
(362,dec_codetab)
(363,*--tp)
(364,tif_row)
(365,code)
(366,occ > 0)
(367,tp)
(368,occ0)
(369,module)
(370,if (occ > 0)
(371,tif_name)
(372,codep = sp->dec_codep)
(373,codep->value)
(374,nbits)
(375,sp)
(376,dec_restart)
(377,free_entp->length)
(378,dec_restart)
(379,occ)
(380,next)
(381,length)
(382,occ)
(383,sp->lzw_nbits)
(384,)
(385,codep)
(386,free_entp)
(387,firstchar)
(388,CSIZE - CODE_FIRST)
(389,maxcodep)
(390,sp)
(391,nbits)
(392,sp->dec_codep)
(393,codep->next)
(394,codep)
(395,nbits)
(396,sp)
(397,unsigned char *)
(398,*op = (char*)
(399,TIFFErrorExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t\\t    "Wrong length of decoded "\n\\n\\t\\t\\t\\t    "string: data probably corrupted at scanline %d",\n\\n\\t\\t\\t\\t    tif->tif_row)
(400,sp)
(401,tp)
(402,dec_codep)
(403,codep->length)
(404,codep->next)
(405,lzw_nextbits)
(406,sp)
(407,nbits)
(408,length)
(409,tif_clientdata)
(410,&sp->dec_codetab[CSIZE])
(411,code)
(412,tif)
(413,nextbits = sp->lzw_nextbits)
(414,long)
(415,*--tp = codep->value)
(416,next)
(417,module)
(418,free_entp->length = free_entp->next->length+1)
(419,code >= CODE_CLEAR)
(420,length)
(421,--occ)
(422,nbits = sp->lzw_nbits)
(423,code)
(424,*--tp = codep->value)
(425,BITS_MAX)
(426,module)
(427,occ)
(428,)
(429,++free_entp > maxcodep)
(430,)
(431,tif)
(432,CODE_FIRST)
(433,occ > 0)
(434,firstchar)
(435,codep->next)
(436,tif->tif_row)
(437,if (code >= 256)
(438,dec_codetab)
(439,maxcodep)
(440,free_entp)
(441,do)
(442,if (sp->dec_restart)
(443,codep)
(444,(unsigned char *)
(445,free_entp)
(446,sp->dec_nbitsmask)
(447,)
(448,sp->dec_codetab)
(449,nextbits)
(450,op += codep->length)
(451,occ--)
(452,free_entp->firstchar = free_entp->next->firstchar)
(453,free_entp->next->firstchar)
(454,sp->dec_codetab + code)
(455,next)
(456,do)
(457,dec_codetab)
(458,TIFFErrorExt(tif->tif_clientdata, tif->tif_name,\n\\n\\t\\t\\t\\t"LZWDecode: Corrupted LZW table at scanline %d",\n\\n\\t\\t\\t\\t\\t     tif->tif_row)
(459,if (++free_entp > maxcodep)
(460,void)
(461,sp)
(462,op)
(463,bp = (unsigned char *)
(464,sp->dec_restart)
(465,CSIZE)
(466,sp)
(467,tp)
(468,tif_clientdata)
(469,lzw_nbits)
(470,next)
(471,return (0)
(472,sp->dec_codetab)
(473,maxcodep)
(474,codep)
(475,sp)
(476,nextdata)
(477,++nbits)
(478,tif_clientdata)
(479,sp->dec_nbitsmask)
(480,codep)
(481,op++)
(482,"LZWDecodeCompat")
(483,if (code == CODE_EOI)
(484,dec_codetab)
(485,tif_row)
(486,lzw_nextdata)
(487,sp != NULL)
(488,sp)
(489,sp->lzw_nbits = nbits)
(490,codep = codep->next)
(491,TIFFErrorExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t"Not enough data at scanline %d (short %I64d bytes)
(492,tp = op)
(493,codep->next)
(494,free_entp = sp->dec_codetab + CODE_FIRST)
(495,tif)
(496,codep)
(497,return (0)
(498,oldcodep)
(499,0)
(500,0)
(501,if (codep->length > occ)
(502,&sp->dec_codetab[0])
(503,(tmsize_t)
(504,0)
(505,*op++)
(506,sp->lzw_nextbits)
(507,free_entp)
(508,codep->firstchar)
(509,tif->tif_name)
(510,free_entp)
(511,occ)
(512,sp->dec_restart)
(513,occ)
(514,occ)
(515,assert(occ >= codep->length)
(516,)
(517,tif->tif_rawcp = (uint8*)
(518,length)
(519,codep)
(520,occ -= residue)
(521,nbitsmask = MAXCODE(nbits)
(522,op)
(523,occ = (long)
(524,sp->dec_restart)
(525,GetNextCodeCompat)
(526,return (0)
(527,oldcodep)
(528,&sp->dec_codetab[0])
(529,tif->tif_clientdata)
(530,sp->lzw_nextdata)
(531,sp->dec_restart)
(532,codep)
(533,op)
(534,oldcodep = sp->dec_codetab + code)
(535,dec_oldcodep)
(536,op++)
(537,tif->tif_row)
(538,residue)
(539,code)
(540,dec_codep)
(541,NULL)
(542,MAXCODE(BITS_MIN)
(543,dec_free_entp)
(544,sp)
(545,codep)
(546,sp->lzw_nextbits = nextbits)
(547,)
(548,codep)
(549,"Corrupted LZW table at scanline %d")
(550,tp = op + occ)
(551,codep)
(552,tmsize_t occ0)
(553,op += residue)
(554,nextbits)
(555,0)
(556,codep->next)
(557,code == CODE_EOI)
(558,return (1)
(559,sp)
(560,codep->length > occ)
(561,code)
(562,occ)
(563,lzw_nbits)
(564,0)
(565,code)
(566,length)
(567,codep = codep->next)
(568,tif)
(569,sp)
(570,lzw_nextdata)
(571,uint16 s)
(572,occ)
(573,op)
(574,0)
(575,(codep = codep->next)
(576,if (code == CODE_EOI)
(577,sp->dec_maxcodep)
(578,free_entp->firstchar)
(579,next)
(580,oldcodep)
(581,GetNextCodeCompat)
(582,codep)
(583,occ)
(584,codep)
(585,nbitsmask)
(586,return (1)
(587,sp->dec_restart = 0)
(588,occ -= codep->length)
(589,maxcodep)
(590,nbits)
(591,occ)
(592,return (0)
(593,sp->dec_codetab)
(594,tif_row)
(595,op)
(596,tp)
(597,sp)
(598,BITS_MIN)
(599,sp)
(600,(uint8*)
(601,dec_restart)
(602,oldcodep)
(603,0)
(604,code)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
