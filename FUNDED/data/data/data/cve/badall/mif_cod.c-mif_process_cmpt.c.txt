-----label-----
1
-----code-----
static int mif_process_cmpt(mif_hdr_t *hdr, char *buf)
{
	jas_tvparser_t *tvp;
	mif_cmpt_t *cmpt;
	int id;

	cmpt = 0;
	tvp = 0;

	if (!(cmpt = mif_cmpt_create())) {
		goto error;
	}
	cmpt->tlx = 0;
	cmpt->tly = 0;
	cmpt->sampperx = 0;
	cmpt->samppery = 0;
	cmpt->width = 0;
	cmpt->height = 0;
	cmpt->prec = 0;
	cmpt->sgnd = -1;
	cmpt->data = 0;

	if (!(tvp = jas_tvparser_create(buf))) {
		goto error;
	}
	while (!(id = jas_tvparser_next(tvp))) {
		switch (jas_taginfo_nonull(jas_taginfos_lookup(mif_tags,
		  jas_tvparser_gettag(tvp)))->id) {
		case MIF_TLX:
			cmpt->tlx = atoi(jas_tvparser_getval(tvp));
			break;
		case MIF_TLY:
			cmpt->tly = atoi(jas_tvparser_getval(tvp));
			break;
		case MIF_WIDTH:
			cmpt->width = atoi(jas_tvparser_getval(tvp));
			break;
		case MIF_HEIGHT:
			cmpt->height = atoi(jas_tvparser_getval(tvp));
			break;
		case MIF_HSAMP:
			cmpt->sampperx = atoi(jas_tvparser_getval(tvp));
			break;
		case MIF_VSAMP:
			cmpt->samppery = atoi(jas_tvparser_getval(tvp));
			break;
		case MIF_PREC:
			cmpt->prec = atoi(jas_tvparser_getval(tvp));
			break;
		case MIF_SGND:
			cmpt->sgnd = atoi(jas_tvparser_getval(tvp));
			break;
		case MIF_DATA:
			if (!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)))) {
				return -1;
			}
			break;
		}
	}
	jas_tvparser_destroy(tvp);
	if (!cmpt->sampperx || !cmpt->samppery) {
		goto error;
	}
	if (mif_hdr_addcmpt(hdr, hdr->numcmpts, cmpt)) {
		goto error;
	}
	return 0;

error:
	if (cmpt) {
		mif_cmpt_destroy(cmpt);
	}
	if (tvp) {
		jas_tvparser_destroy(tvp);
	}
	return -1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
16,29
16,30
16,31
16,32
16,33
16,34
16,35
16,36
16,37
16,38
16,39
16,40
17,18
18,19
18,20
19,20
21,22
21,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
34,35
36,37
37,38
37,39
38,39
41,42
42,43
42,44
43,44
46,47
46,48
47,48
48,49
49,50
49,51
50,51
52,53
53,54
55,56
56,57
58,59
59,60
59,61
60,61
60,62
61,62
65,66
66,67
66,68
67,68
67,69
68,69
72,73
73,74
73,75
74,75
74,76
75,76
79,80
80,81
80,82
81,82
81,83
82,83
86,87
87,88
87,89
88,89
88,90
89,90
93,94
94,95
94,96
95,96
95,97
96,97
100,101
101,102
101,103
102,103
102,104
103,104
107,108
108,109
108,110
109,110
109,111
110,111
113,114
115,116
116,117
116,118
117,118
117,119
118,119
122,123
122,124
123,124
124,125
125,126
125,127
126,127
128,129
128,130
129,130
131,132
133,134
134,135
136,137
136,138
137,138
138,139
139,140
139,141
140,141
142,143
142,144
143,144
145,146
147,148
148,149
148,150
149,150
149,151
150,151
150,152
151,152
153,154
153,155
153,156
154,155
156,157
158,159
158,160
159,160
161,162
164,165
164,166
164,167
164,168
164,169
164,170
164,171
164,172
164,173
164,174
164,175
164,176
164,177
164,178
164,179
164,180
164,181
164,182
164,183
164,184
164,185
164,186
164,187
164,188
164,189
164,190
164,191
165,166
166,167
168,169
169,170
169,171
170,171
170,172
171,172
174,175
174,176
175,176
177,178
177,179
178,179
180,181
183,184
184,185
186,187
187,188
187,189
188,189
188,190
189,190
192,193
192,194
193,194
195,196
195,197
196,197
198,199
201,202
202,203
204,205
205,206
205,207
206,207
206,208
207,208
210,211
210,212
211,212
213,214
213,215
214,215
216,217
219,220
220,221
222,223
223,224
223,225
224,225
224,226
225,226
228,229
228,230
229,230
231,232
231,233
232,233
234,235
237,238
238,239
240,241
241,242
241,243
242,243
242,244
243,244
246,247
246,248
247,248
249,250
249,251
250,251
252,253
255,256
256,257
258,259
259,260
259,261
260,261
260,262
261,262
264,265
264,266
265,266
267,268
267,269
268,269
270,271
273,274
274,275
276,277
277,278
277,279
278,279
278,280
279,280
282,283
282,284
283,284
285,286
285,287
286,287
288,289
291,292
292,293
294,295
295,296
295,297
296,297
296,298
297,298
300,301
300,302
301,302
303,304
303,305
304,305
306,307
309,310
310,311
312,313
312,314
313,314
314,315
315,316
315,317
316,317
316,318
317,318
320,321
320,322
321,322
323,324
323,325
324,325
326,327
328,329
329,330
330,331
333,334
334,335
334,336
335,336
337,338
339,340
339,341
340,341
340,342
341,342
342,343
342,344
343,344
346,347
347,348
347,349
348,349
351,352
352,353
354,355
354,356
355,356
355,357
355,358
355,359
356,357
358,359
360,361
360,362
361,362
364,365
366,367
367,368
369,370
371,372
371,373
373,374
373,375
374,375
376,377
377,378
378,379
378,380
379,380
381,382
383,384
383,385
384,385
386,387
387,388
388,389
388,390
389,390
391,392
393,394
394,395
-----nextToken-----
2,4,7,9,10,12,14,15,20,22,23,27,29,30,33,35,39,40,44,45,51,54,57,62,63,64,69,70,71,76,77,78,83,84,85,90,91,92,97,98,99,104,105,106,111,112,114,119,120,121,127,130,132,135,141,144,146,152,155,157,160,162,163,167,172,173,176,179,181,182,185,190,191,194,197,199,200,203,208,209,212,215,217,218,221,226,227,230,233,235,236,239,244,245,248,251,253,254,257,262,263,266,269,271,272,275,280,281,284,287,289,290,293,298,299,302,305,307,308,311,318,319,322,325,327,331,332,336,338,344,345,349,350,353,357,359,362,363,365,368,370,372,375,380,382,385,390,392,395
-----computeFrom-----
37,38
37,39
42,43
42,44
49,50
49,51
59,60
59,61
66,67
66,68
73,74
73,75
80,81
80,82
87,88
87,89
94,95
94,96
101,102
101,103
108,109
108,110
116,117
116,118
125,126
125,127
139,140
139,141
169,170
169,171
187,188
187,189
205,206
205,207
223,224
223,225
241,242
241,243
259,260
259,261
277,278
277,279
295,296
295,297
315,316
315,317
340,341
340,342
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;WhileStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static int mif_process_cmpt(mif_hdr_t *hdr, char *buf){	jas_tvparser_t *tvp;	mif_cmpt_t *cmpt;	int id;	cmpt = 0;	tvp = 0;	if (!(cmpt = mif_cmpt_create())) {		goto error;	}	cmpt->tlx = 0;	cmpt->tly = 0;	cmpt->sampperx = 0;	cmpt->samppery = 0;	cmpt->width = 0;	cmpt->height = 0;	cmpt->prec = 0;	cmpt->sgnd = -1;	cmpt->data = 0;	if (!(tvp = jas_tvparser_create(buf))) {		goto error;	}	while (!(id = jas_tvparser_next(tvp))) {		switch (jas_taginfo_nonull(jas_taginfos_lookup(mif_tags,		  jas_tvparser_gettag(tvp)))->id) {		case MIF_TLX:			cmpt->tlx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_TLY:			cmpt->tly = atoi(jas_tvparser_getval(tvp));			break;		case MIF_WIDTH:			cmpt->width = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HEIGHT:			cmpt->height = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HSAMP:			cmpt->sampperx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_VSAMP:			cmpt->samppery = atoi(jas_tvparser_getval(tvp));			break;		case MIF_PREC:			cmpt->prec = atoi(jas_tvparser_getval(tvp));			break;		case MIF_SGND:			cmpt->sgnd = atoi(jas_tvparser_getval(tvp));			break;		case MIF_DATA:			if (!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)))) {				return -1;			}			break;		}	}	jas_tvparser_destroy(tvp);	if (!cmpt->sampperx || !cmpt->samppery) {		goto error;	}	if (mif_hdr_addcmpt(hdr, hdr->numcmpts, cmpt)) {		goto error;	}	return 0;error:	if (cmpt) {		mif_cmpt_destroy(cmpt);	}	if (tvp) {		jas_tvparser_destroy(tvp);	}	return -1;}
static int
mif_process_cmpt(mif_hdr_t *hdr, char *buf)
mif_process_cmpt
mif_hdr_t *hdr
mif_hdr_t
mif_hdr_t
*hdr
*
hdr
char *buf
char
*buf
*
buf
{	jas_tvparser_t *tvp;	mif_cmpt_t *cmpt;	int id;	cmpt = 0;	tvp = 0;	if (!(cmpt = mif_cmpt_create())) {		goto error;	}	cmpt->tlx = 0;	cmpt->tly = 0;	cmpt->sampperx = 0;	cmpt->samppery = 0;	cmpt->width = 0;	cmpt->height = 0;	cmpt->prec = 0;	cmpt->sgnd = -1;	cmpt->data = 0;	if (!(tvp = jas_tvparser_create(buf))) {		goto error;	}	while (!(id = jas_tvparser_next(tvp))) {		switch (jas_taginfo_nonull(jas_taginfos_lookup(mif_tags,		  jas_tvparser_gettag(tvp)))->id) {		case MIF_TLX:			cmpt->tlx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_TLY:			cmpt->tly = atoi(jas_tvparser_getval(tvp));			break;		case MIF_WIDTH:			cmpt->width = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HEIGHT:			cmpt->height = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HSAMP:			cmpt->sampperx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_VSAMP:			cmpt->samppery = atoi(jas_tvparser_getval(tvp));			break;		case MIF_PREC:			cmpt->prec = atoi(jas_tvparser_getval(tvp));			break;		case MIF_SGND:			cmpt->sgnd = atoi(jas_tvparser_getval(tvp));			break;		case MIF_DATA:			if (!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)))) {				return -1;			}			break;		}	}	jas_tvparser_destroy(tvp);	if (!cmpt->sampperx || !cmpt->samppery) {		goto error;	}	if (mif_hdr_addcmpt(hdr, hdr->numcmpts, cmpt)) {		goto error;	}	return 0;error:	if (cmpt) {		mif_cmpt_destroy(cmpt);	}	if (tvp) {		jas_tvparser_destroy(tvp);	}	return -1;}
jas_tvparser_t *tvp;
jas_tvparser_t *tvp;
jas_tvparser_t
jas_tvparser_t
*tvp
*
tvp
mif_cmpt_t *cmpt;
mif_cmpt_t *cmpt;
mif_cmpt_t
mif_cmpt_t
*cmpt
*
cmpt
int id;
int id;
int
id
id
cmpt = 0;
cmpt = 0
cmpt
cmpt
0
tvp = 0;
tvp = 0
tvp
tvp
0
if (!(cmpt = mif_cmpt_create())) {		goto error;	}
!(cmpt = mif_cmpt_create())
(cmpt = mif_cmpt_create())
cmpt = mif_cmpt_create()
cmpt
cmpt
mif_cmpt_create()
mif_cmpt_create
mif_cmpt_create
{		goto error;	}
goto error;
error
cmpt->tlx = 0;
cmpt->tlx = 0
cmpt->tlx
cmpt
cmpt
tlx
0
cmpt->tly = 0;
cmpt->tly = 0
cmpt->tly
cmpt
cmpt
tly
0
cmpt->sampperx = 0;
cmpt->sampperx = 0
cmpt->sampperx
cmpt
cmpt
sampperx
0
cmpt->samppery = 0;
cmpt->samppery = 0
cmpt->samppery
cmpt
cmpt
samppery
0
cmpt->width = 0;
cmpt->width = 0
cmpt->width
cmpt
cmpt
width
0
cmpt->height = 0;
cmpt->height = 0
cmpt->height
cmpt
cmpt
height
0
cmpt->prec = 0;
cmpt->prec = 0
cmpt->prec
cmpt
cmpt
prec
0
cmpt->sgnd = -1;
cmpt->sgnd = -1
cmpt->sgnd
cmpt
cmpt
sgnd
-1
1
cmpt->data = 0;
cmpt->data = 0
cmpt->data
cmpt
cmpt
data
0
if (!(tvp = jas_tvparser_create(buf))) {		goto error;	}
!(tvp = jas_tvparser_create(buf))
(tvp = jas_tvparser_create(buf))
tvp = jas_tvparser_create(buf)
tvp
tvp
jas_tvparser_create(buf)
jas_tvparser_create
jas_tvparser_create
buf
buf
{		goto error;	}
goto error;
error
while (!(id = jas_tvparser_next(tvp))) {		switch (jas_taginfo_nonull(jas_taginfos_lookup(mif_tags,		  jas_tvparser_gettag(tvp)))->id) {		case MIF_TLX:			cmpt->tlx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_TLY:			cmpt->tly = atoi(jas_tvparser_getval(tvp));			break;		case MIF_WIDTH:			cmpt->width = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HEIGHT:			cmpt->height = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HSAMP:			cmpt->sampperx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_VSAMP:			cmpt->samppery = atoi(jas_tvparser_getval(tvp));			break;		case MIF_PREC:			cmpt->prec = atoi(jas_tvparser_getval(tvp));			break;		case MIF_SGND:			cmpt->sgnd = atoi(jas_tvparser_getval(tvp));			break;		case MIF_DATA:			if (!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)))) {				return -1;			}			break;		}	}
!(id = jas_tvparser_next(tvp))
(id = jas_tvparser_next(tvp))
id = jas_tvparser_next(tvp)
id
id
jas_tvparser_next(tvp)
jas_tvparser_next
jas_tvparser_next
tvp
tvp
{		switch (jas_taginfo_nonull(jas_taginfos_lookup(mif_tags,		  jas_tvparser_gettag(tvp)))->id) {		case MIF_TLX:			cmpt->tlx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_TLY:			cmpt->tly = atoi(jas_tvparser_getval(tvp));			break;		case MIF_WIDTH:			cmpt->width = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HEIGHT:			cmpt->height = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HSAMP:			cmpt->sampperx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_VSAMP:			cmpt->samppery = atoi(jas_tvparser_getval(tvp));			break;		case MIF_PREC:			cmpt->prec = atoi(jas_tvparser_getval(tvp));			break;		case MIF_SGND:			cmpt->sgnd = atoi(jas_tvparser_getval(tvp));			break;		case MIF_DATA:			if (!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)))) {				return -1;			}			break;		}	}
switch (jas_taginfo_nonull(jas_taginfos_lookup(mif_tags,		  jas_tvparser_gettag(tvp)))->id) {		case MIF_TLX:			cmpt->tlx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_TLY:			cmpt->tly = atoi(jas_tvparser_getval(tvp));			break;		case MIF_WIDTH:			cmpt->width = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HEIGHT:			cmpt->height = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HSAMP:			cmpt->sampperx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_VSAMP:			cmpt->samppery = atoi(jas_tvparser_getval(tvp));			break;		case MIF_PREC:			cmpt->prec = atoi(jas_tvparser_getval(tvp));			break;		case MIF_SGND:			cmpt->sgnd = atoi(jas_tvparser_getval(tvp));			break;		case MIF_DATA:			if (!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)))) {				return -1;			}			break;		}
jas_taginfo_nonull(jas_taginfos_lookup(mif_tags,		  jas_tvparser_gettag(tvp)))->id
jas_taginfo_nonull(jas_taginfos_lookup(mif_tags,		  jas_tvparser_gettag(tvp)))
jas_taginfo_nonull
jas_taginfo_nonull
jas_taginfos_lookup(mif_tags,		  jas_tvparser_gettag(tvp))
jas_taginfos_lookup
jas_taginfos_lookup
mif_tags
mif_tags
jas_tvparser_gettag(tvp)
jas_tvparser_gettag
jas_tvparser_gettag
tvp
tvp
id
{		case MIF_TLX:			cmpt->tlx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_TLY:			cmpt->tly = atoi(jas_tvparser_getval(tvp));			break;		case MIF_WIDTH:			cmpt->width = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HEIGHT:			cmpt->height = atoi(jas_tvparser_getval(tvp));			break;		case MIF_HSAMP:			cmpt->sampperx = atoi(jas_tvparser_getval(tvp));			break;		case MIF_VSAMP:			cmpt->samppery = atoi(jas_tvparser_getval(tvp));			break;		case MIF_PREC:			cmpt->prec = atoi(jas_tvparser_getval(tvp));			break;		case MIF_SGND:			cmpt->sgnd = atoi(jas_tvparser_getval(tvp));			break;		case MIF_DATA:			if (!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)))) {				return -1;			}			break;		}
case MIF_TLX:
MIF_TLX
MIF_TLX
cmpt->tlx = atoi(jas_tvparser_getval(tvp));
cmpt->tlx = atoi(jas_tvparser_getval(tvp))
cmpt->tlx
cmpt
cmpt
tlx
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case MIF_TLY:
MIF_TLY
MIF_TLY
cmpt->tly = atoi(jas_tvparser_getval(tvp));
cmpt->tly = atoi(jas_tvparser_getval(tvp))
cmpt->tly
cmpt
cmpt
tly
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case MIF_WIDTH:
MIF_WIDTH
MIF_WIDTH
cmpt->width = atoi(jas_tvparser_getval(tvp));
cmpt->width = atoi(jas_tvparser_getval(tvp))
cmpt->width
cmpt
cmpt
width
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case MIF_HEIGHT:
MIF_HEIGHT
MIF_HEIGHT
cmpt->height = atoi(jas_tvparser_getval(tvp));
cmpt->height = atoi(jas_tvparser_getval(tvp))
cmpt->height
cmpt
cmpt
height
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case MIF_HSAMP:
MIF_HSAMP
MIF_HSAMP
cmpt->sampperx = atoi(jas_tvparser_getval(tvp));
cmpt->sampperx = atoi(jas_tvparser_getval(tvp))
cmpt->sampperx
cmpt
cmpt
sampperx
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case MIF_VSAMP:
MIF_VSAMP
MIF_VSAMP
cmpt->samppery = atoi(jas_tvparser_getval(tvp));
cmpt->samppery = atoi(jas_tvparser_getval(tvp))
cmpt->samppery
cmpt
cmpt
samppery
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case MIF_PREC:
MIF_PREC
MIF_PREC
cmpt->prec = atoi(jas_tvparser_getval(tvp));
cmpt->prec = atoi(jas_tvparser_getval(tvp))
cmpt->prec
cmpt
cmpt
prec
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case MIF_SGND:
MIF_SGND
MIF_SGND
cmpt->sgnd = atoi(jas_tvparser_getval(tvp));
cmpt->sgnd = atoi(jas_tvparser_getval(tvp))
cmpt->sgnd
cmpt
cmpt
sgnd
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case MIF_DATA:
MIF_DATA
MIF_DATA
if (!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)))) {				return -1;			}
!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)))
(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)))
cmpt->data = jas_strdup(jas_tvparser_getval(tvp))
cmpt->data
cmpt
cmpt
data
jas_strdup(jas_tvparser_getval(tvp))
jas_strdup
jas_strdup
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
{				return -1;			}
return -1;
-1
1
break;
jas_tvparser_destroy(tvp);
jas_tvparser_destroy(tvp)
jas_tvparser_destroy
jas_tvparser_destroy
tvp
tvp
if (!cmpt->sampperx || !cmpt->samppery) {		goto error;	}
!cmpt->sampperx || !cmpt->samppery
!cmpt->sampperx
cmpt->sampperx
cmpt
cmpt
sampperx
!cmpt->samppery
cmpt->samppery
cmpt
cmpt
samppery
{		goto error;	}
goto error;
error
if (mif_hdr_addcmpt(hdr, hdr->numcmpts, cmpt)) {		goto error;	}
mif_hdr_addcmpt(hdr, hdr->numcmpts, cmpt)
mif_hdr_addcmpt
mif_hdr_addcmpt
hdr
hdr
hdr->numcmpts
hdr
hdr
numcmpts
cmpt
cmpt
{		goto error;	}
goto error;
error
return 0;
0
error:	if (cmpt) {		mif_cmpt_destroy(cmpt);	}
error
if (cmpt) {		mif_cmpt_destroy(cmpt);	}
cmpt
cmpt
{		mif_cmpt_destroy(cmpt);	}
mif_cmpt_destroy(cmpt);
mif_cmpt_destroy(cmpt)
mif_cmpt_destroy
mif_cmpt_destroy
cmpt
cmpt
if (tvp) {		jas_tvparser_destroy(tvp);	}
tvp
tvp
{		jas_tvparser_destroy(tvp);	}
jas_tvparser_destroy(tvp);
jas_tvparser_destroy(tvp)
jas_tvparser_destroy
jas_tvparser_destroy
tvp
tvp
return -1;
-1
1
-----joern-----
(33,44,0)
(131,91,0)
(174,141,0)
(110,194,0)
(0,143,0)
(175,138,0)
(46,179,0)
(36,88,0)
(162,138,0)
(187,27,0)
(160,130,0)
(142,67,0)
(196,27,0)
(81,100,0)
(1,194,0)
(3,211,0)
(176,81,0)
(143,46,0)
(176,205,0)
(64,60,0)
(81,27,0)
(12,44,0)
(172,146,0)
(188,81,0)
(148,44,0)
(118,194,0)
(68,194,0)
(120,205,0)
(75,62,0)
(65,161,0)
(209,106,0)
(120,81,0)
(121,141,0)
(85,204,0)
(130,160,0)
(11,213,0)
(96,204,0)
(164,44,0)
(143,194,0)
(10,149,0)
(147,156,0)
(29,106,0)
(29,183,0)
(38,127,0)
(182,41,0)
(103,194,0)
(196,116,0)
(184,94,0)
(124,149,0)
(143,88,0)
(127,146,0)
(176,88,0)
(176,54,0)
(120,83,0)
(13,30,0)
(64,106,0)
(60,113,0)
(215,44,0)
(88,27,0)
(73,8,0)
(130,44,0)
(120,196,0)
(149,124,0)
(42,118,0)
(139,194,0)
(176,21,0)
(169,100,0)
(176,199,0)
(181,194,0)
(120,185,0)
(143,3,0)
(186,155,0)
(48,140,0)
(189,78,0)
(185,82,0)
(31,88,0)
(143,67,0)
(73,44,0)
(53,176,0)
(40,44,0)
(205,73,0)
(209,111,0)
(159,139,0)
(104,194,0)
(204,27,0)
(135,48,0)
(5,74,0)
(176,46,0)
(168,54,0)
(3,27,0)
(8,73,0)
(66,67,0)
(153,196,0)
(35,106,0)
(212,44,0)
(120,88,0)
(143,187,0)
(192,27,0)
(106,208,0)
(84,169,0)
(45,201,0)
(176,67,0)
(30,27,0)
(8,134,0)
(120,187,0)
(123,180,0)
(119,161,0)
(88,76,0)
(100,169,0)
(45,27,0)
(27,26,0)
(101,122,0)
(48,27,0)
(77,30,0)
(79,46,0)
(113,60,0)
(166,120,0)
(111,209,0)
(26,27,0)
(202,199,0)
(182,62,0)
(143,199,0)
(163,203,0)
(213,106,0)
(191,46,0)
(138,175,0)
(94,55,0)
(93,166,0)
(176,161,0)
(187,110,0)
(155,130,0)
(143,161,0)
(58,194,0)
(57,74,0)
(60,64,0)
(143,205,0)
(162,106,0)
(27,192,0)
(43,187,0)
(171,44,0)
(23,71,0)
(211,194,0)
(15,44,0)
(63,194,0)
(18,194,0)
(141,106,0)
(62,106,0)
(55,89,0)
(90,209,0)
(21,27,0)
(120,21,0)
(203,194,0)
(141,174,0)
(14,29,0)
(62,182,0)
(134,106,0)
(185,27,0)
(70,25,0)
(125,190,0)
(205,27,0)
(127,27,0)
(161,27,0)
(177,194,0)
(214,44,0)
(17,27,0)
(176,196,0)
(150,151,0)
(102,34,0)
(34,106,0)
(208,106,0)
(105,160,0)
(149,10,0)
(206,187,0)
(120,172,0)
(49,60,0)
(6,127,0)
(0,176,0)
(100,194,0)
(178,44,0)
(22,140,0)
(199,181,0)
(107,194,0)
(157,44,0)
(74,5,0)
(94,27,0)
(176,204,0)
(74,106,0)
(101,146,0)
(158,211,0)
(115,185,0)
(30,130,0)
(146,44,0)
(99,122,0)
(95,194,0)
(120,155,0)
(160,105,0)
(82,44,0)
(197,172,0)
(176,94,0)
(127,38,0)
(71,7,0)
(55,174,0)
(173,44,0)
(129,10,0)
(21,175,0)
(143,81,0)
(120,67,0)
(143,196,0)
(30,211,0)
(204,203,0)
(193,44,0)
(120,161,0)
(59,107,0)
(143,54,0)
(137,44,0)
(46,27,0)
(120,204,0)
(144,71,0)
(13,167,0)
(56,116,0)
(87,54,0)
(86,172,0)
(109,35,0)
(39,156,0)
(54,41,0)
(120,46,0)
(2,64,0)
(143,21,0)
(71,156,0)
(143,172,0)
(25,213,0)
(30,13,0)
(76,194,0)
(122,106,0)
(111,82,0)
(120,199,0)
(156,7,0)
(174,55,0)
(92,110,0)
(143,204,0)
(143,185,0)
(175,44,0)
(176,48,0)
(97,94,0)
(128,162,0)
(120,54,0)
(146,101,0)
(50,107,0)
(82,111,0)
(106,34,0)
(105,106,0)
(195,106,0)
(112,44,0)
(138,162,0)
(52,134,0)
(67,27,0)
(117,48,0)
(176,185,0)
(143,94,0)
(143,155,0)
(198,81,0)
(134,8,0)
(167,38,0)
(20,199,0)
(176,3,0)
(179,5,0)
(16,181,0)
(124,35,0)
(210,207,0)
(165,21,0)
(127,116,0)
(5,179,0)
(34,37,0)
(78,194,0)
(167,13,0)
(116,194,0)
(25,70,0)
(38,167,0)
(72,205,0)
(120,94,0)
(47,185,0)
(133,44,0)
(51,45,0)
(89,55,0)
(114,3,0)
(28,44,0)
(35,124,0)
(176,155,0)
(145,196,0)
(132,118,0)
(200,105,0)
(161,78,0)
(154,3,0)
(155,27,0)
(98,136,0)
(108,30,0)
(176,194,0)
(29,118,0)
(120,48,0)
(32,155,0)
(172,27,0)
(170,205,0)
(70,44,0)
(140,194,0)
(213,25,0)
(0,120,0)
(176,187,0)
(41,44,0)
(179,44,0)
(80,76,0)
(69,194,0)
(151,143,0)
(152,127,0)
(54,27,0)
(143,48,0)
(126,21,0)
(41,182,0)
(122,101,0)
(9,44,0)
(199,27,0)
(139,106,0)
(19,124,0)
(61,194,0)
(156,71,0)
(176,172,0)
(67,70,0)
(71,27,0)
(120,3,0)
(10,149,1)
(100,169,1)
(13,30,1)
(143,155,1)
(51,4,1)
(93,89,1)
(204,85,1)
(88,36,1)
(89,55,1)
(127,152,1)
(75,54,1)
(143,187,1)
(52,205,1)
(19,113,1)
(120,205,1)
(105,106,1)
(120,54,1)
(109,19,1)
(27,192,1)
(96,116,1)
(32,10,1)
(170,72,1)
(31,100,1)
(46,191,1)
(175,138,1)
(105,200,1)
(145,153,1)
(57,46,1)
(167,13,1)
(120,172,1)
(172,86,1)
(49,193,1)
(108,77,1)
(203,163,1)
(94,27,1)
(172,27,1)
(176,185,1)
(11,67,1)
(205,170,1)
(176,48,1)
(176,204,1)
(74,106,1)
(168,87,1)
(54,168,1)
(79,10,1)
(113,60,1)
(24,45,1)
(162,128,1)
(92,187,1)
(143,204,1)
(120,3,1)
(49,212,1)
(26,27,1)
(166,93,1)
(198,188,1)
(49,15,1)
(98,26,1)
(154,114,1)
(143,185,1)
(176,196,1)
(4,125,1)
(143,205,1)
(4,98,1)
(22,48,1)
(120,196,1)
(48,27,1)
(143,88,1)
(123,71,1)
(77,139,1)
(64,2,1)
(0,143,1)
(73,8,1)
(29,14,1)
(49,137,1)
(143,151,1)
(195,76,1)
(35,109,1)
(129,149,1)
(97,10,1)
(167,38,1)
(212,179,1)
(118,132,1)
(71,27,1)
(120,161,1)
(60,64,1)
(43,206,1)
(62,106,1)
(150,24,1)
(46,27,1)
(187,43,1)
(141,106,1)
(45,51,1)
(120,81,1)
(206,181,1)
(36,31,1)
(65,26,1)
(3,154,1)
(85,96,1)
(21,126,1)
(176,155,1)
(99,172,1)
(199,202,1)
(120,204,1)
(131,167,1)
(161,119,1)
(143,3,1)
(134,52,1)
(200,155,1)
(34,37,1)
(122,99,1)
(128,21,1)
(23,156,1)
(25,213,1)
(56,196,1)
(115,10,1)
(147,39,1)
(127,116,1)
(82,111,1)
(0,176,1)
(176,21,1)
(121,94,1)
(124,35,1)
(53,71,1)
(176,53,1)
(185,27,1)
(213,106,1)
(187,27,1)
(72,10,1)
(176,46,1)
(117,135,1)
(163,204,1)
(55,174,1)
(8,134,1)
(196,27,1)
(49,214,1)
(162,106,1)
(0,120,1)
(120,67,1)
(140,22,1)
(120,21,1)
(142,66,1)
(214,130,1)
(84,81,1)
(176,67,1)
(4,123,1)
(182,62,1)
(86,197,1)
(120,88,1)
(120,187,1)
(87,10,1)
(47,115,1)
(90,185,1)
(158,3,1)
(122,106,1)
(176,3,1)
(38,127,1)
(160,105,1)
(133,41,1)
(143,21,1)
(5,74,1)
(102,195,1)
(120,94,1)
(209,106,1)
(202,20,1)
(211,158,1)
(120,46,1)
(189,161,1)
(64,106,1)
(143,46,1)
(186,32,1)
(49,133,1)
(24,4,1)
(165,10,1)
(30,130,1)
(81,198,1)
(185,47,1)
(173,175,1)
(125,208,1)
(143,48,1)
(151,150,1)
(176,172,1)
(59,50,1)
(29,118,1)
(188,110,1)
(29,106,1)
(45,27,1)
(12,89,1)
(2,49,1)
(49,173,1)
(176,199,1)
(181,16,1)
(34,102,1)
(213,11,1)
(143,199,1)
(78,189,1)
(159,113,1)
(14,24,1)
(17,118,1)
(191,79,1)
(101,122,1)
(35,106,1)
(139,159,1)
(80,88,1)
(143,172,1)
(10,129,1)
(178,73,1)
(48,117,1)
(49,12,1)
(49,178,1)
(184,97,1)
(155,27,1)
(15,146,1)
(30,211,1)
(209,90,1)
(179,5,1)
(30,27,1)
(139,106,1)
(94,184,1)
(126,165,1)
(41,182,1)
(30,108,1)
(107,59,1)
(176,187,1)
(111,209,1)
(143,54,1)
(176,205,1)
(39,144,1)
(137,70,1)
(132,42,1)
(119,65,1)
(20,203,1)
(174,141,1)
(141,121,1)
(106,34,1)
(62,75,1)
(3,27,1)
(156,7,1)
(152,6,1)
(116,56,1)
(143,81,1)
(49,208,1)
(42,107,1)
(49,10,1)
(156,147,1)
(67,27,1)
(67,142,1)
(161,27,1)
(153,211,1)
(6,13,1)
(66,10,1)
(176,81,1)
(120,48,1)
(150,29,1)
(130,160,1)
(176,94,1)
(71,23,1)
(88,27,1)
(143,94,1)
(71,7,1)
(149,124,1)
(120,166,1)
(196,145,1)
(155,186,1)
(76,80,1)
(110,92,1)
(146,101,1)
(193,82,1)
(127,27,1)
(204,27,1)
(143,161,1)
(134,106,1)
(120,199,1)
(169,84,1)
(205,27,1)
(114,140,1)
(144,167,1)
(81,27,1)
(127,146,1)
(143,196,1)
(176,54,1)
(4,131,1)
(143,67,1)
(120,185,1)
(54,27,1)
(74,57,1)
(135,78,1)
(70,25,1)
(176,88,1)
(199,27,1)
(120,155,1)
(16,199,1)
(197,10,1)
(192,17,1)
(71,156,1)
(208,106,1)
(138,162,1)
(176,161,1)
(21,27,1)
(12,89,2)
(110,26,2)
(49,10,2)
(2,10,2)
(155,27,2)
(150,208,2)
(124,35,2)
(143,67,2)
(60,208,2)
(166,89,2)
(13,30,2)
(185,10,2)
(30,211,2)
(76,26,2)
(120,88,2)
(60,10,2)
(13,113,2)
(73,8,2)
(143,196,2)
(48,26,2)
(187,26,2)
(36,26,2)
(116,26,2)
(143,205,2)
(139,106,2)
(84,26,2)
(90,10,2)
(6,13,2)
(142,10,2)
(176,48,2)
(113,208,2)
(14,24,2)
(92,26,2)
(158,26,2)
(94,27,2)
(120,3,2)
(162,10,2)
(200,10,2)
(176,196,2)
(178,10,2)
(149,124,2)
(204,26,2)
(113,89,2)
(41,182,2)
(19,113,2)
(173,10,2)
(191,10,2)
(205,27,2)
(196,27,2)
(188,26,2)
(11,10,2)
(212,10,2)
(208,26,2)
(204,27,2)
(130,160,2)
(123,71,2)
(43,26,2)
(71,27,2)
(176,3,2)
(49,89,2)
(147,167,2)
(72,10,2)
(176,54,2)
(47,10,2)
(27,192,2)
(167,38,2)
(71,156,2)
(80,26,2)
(89,55,2)
(105,106,2)
(75,10,2)
(143,187,2)
(86,10,2)
(176,21,2)
(2,89,2)
(120,172,2)
(102,26,2)
(203,26,2)
(109,113,2)
(120,185,2)
(176,172,2)
(38,13,2)
(176,205,2)
(184,10,2)
(30,130,2)
(101,122,2)
(181,26,2)
(176,204,2)
(150,26,2)
(150,71,2)
(143,167,2)
(57,10,2)
(140,26,2)
(120,48,2)
(151,26,2)
(143,161,2)
(199,26,2)
(151,71,2)
(108,113,2)
(120,46,2)
(79,10,2)
(99,10,2)
(65,26,2)
(195,26,2)
(176,94,2)
(197,10,2)
(160,10,2)
(22,26,2)
(120,196,2)
(20,26,2)
(176,199,2)
(182,62,2)
(151,208,2)
(24,208,2)
(120,54,2)
(161,27,2)
(143,88,2)
(127,146,2)
(29,118,2)
(70,25,2)
(156,167,2)
(49,208,2)
(60,64,2)
(64,208,2)
(172,10,2)
(32,10,2)
(21,10,2)
(4,167,2)
(174,10,2)
(124,113,2)
(4,71,2)
(10,113,2)
(150,167,2)
(34,26,2)
(135,26,2)
(168,10,2)
(206,26,2)
(115,10,2)
(111,10,2)
(193,10,2)
(55,174,2)
(51,4,2)
(176,185,2)
(120,155,2)
(160,105,2)
(29,24,2)
(71,167,2)
(146,10,2)
(143,21,2)
(185,27,2)
(16,26,2)
(143,3,2)
(209,106,2)
(29,106,2)
(153,26,2)
(129,113,2)
(143,48,2)
(176,81,2)
(48,27,2)
(134,10,2)
(213,106,2)
(120,187,2)
(176,67,2)
(24,26,2)
(120,161,2)
(46,10,2)
(82,10,2)
(187,27,2)
(41,10,2)
(54,27,2)
(175,10,2)
(35,106,2)
(202,26,2)
(120,94,2)
(100,26,2)
(0,143,2)
(81,26,2)
(182,10,2)
(162,106,2)
(0,120,2)
(105,10,2)
(3,26,2)
(176,155,2)
(146,101,2)
(39,167,2)
(94,10,2)
(117,26,2)
(25,213,2)
(34,37,2)
(70,10,2)
(127,13,2)
(151,167,2)
(4,208,2)
(113,60,2)
(62,10,2)
(88,26,2)
(198,26,2)
(143,185,2)
(143,155,2)
(89,10,2)
(163,26,2)
(21,27,2)
(156,7,2)
(87,10,2)
(25,10,2)
(24,167,2)
(23,167,2)
(209,10,2)
(176,88,2)
(53,71,2)
(143,54,2)
(175,138,2)
(35,113,2)
(120,199,2)
(121,10,2)
(74,106,2)
(139,113,2)
(24,71,2)
(120,67,2)
(127,116,2)
(106,34,2)
(45,27,2)
(77,113,2)
(165,10,2)
(143,81,2)
(67,10,2)
(179,10,2)
(56,26,2)
(96,26,2)
(208,106,2)
(82,111,2)
(143,71,2)
(143,172,2)
(137,10,2)
(176,161,2)
(144,167,2)
(0,176,2)
(122,10,2)
(176,46,2)
(131,167,2)
(5,10,2)
(154,26,2)
(66,10,2)
(74,10,2)
(5,74,2)
(81,27,2)
(189,26,2)
(161,26,2)
(170,10,2)
(38,127,2)
(179,5,2)
(143,208,2)
(46,27,2)
(143,199,2)
(138,162,2)
(62,106,2)
(120,204,2)
(52,10,2)
(8,134,2)
(172,27,2)
(106,26,2)
(111,209,2)
(15,10,2)
(97,10,2)
(67,27,2)
(8,10,2)
(169,26,2)
(155,10,2)
(3,27,2)
(71,7,2)
(64,10,2)
(93,89,2)
(4,26,2)
(30,27,2)
(143,46,2)
(119,26,2)
(98,26,2)
(134,106,2)
(159,113,2)
(213,10,2)
(101,10,2)
(64,106,2)
(120,21,2)
(10,149,2)
(143,26,2)
(196,26,2)
(60,89,2)
(64,89,2)
(167,13,2)
(141,106,2)
(145,26,2)
(45,4,2)
(130,10,2)
(149,113,2)
(141,10,2)
(2,208,2)
(30,113,2)
(120,81,2)
(122,106,2)
(133,10,2)
(152,13,2)
(113,10,2)
(176,187,2)
(126,10,2)
(214,10,2)
(211,26,2)
(54,10,2)
(176,71,2)
(174,141,2)
(31,26,2)
(143,94,2)
(138,10,2)
(199,27,2)
(100,169,2)
(78,26,2)
(26,27,2)
(125,208,2)
(143,204,2)
(73,10,2)
(186,10,2)
(127,27,2)
(120,89,2)
(128,10,2)
(55,10,2)
(120,205,2)
(205,10,2)
(167,113,2)
(114,26,2)
(85,26,2)
(88,27,2)
-----------------------------------
(0,RET)
(1,cmpt)
(2,tvp)
(3,cmpt->sampperx)
(4,cmpt)
(5,atoi(jas_tvparser_getval(tvp)
(6,cmpt)
(7,mif_hdr_t *hdr)
(8,atoi(jas_tvparser_getval(tvp)
(9,case MIF_SGND:)
(10,jas_taginfo_nonull(jas_taginfos_lookup(mif_tags,\\n\\t\\t  jas_tvparser_gettag(tvp)
(11,tvp)
(12,break;)
(13,!cmpt->sampperx)
(14,tvp)
(15,break;)
(16,0)
(17,cmpt)
(18,if (!(cmpt = mif_cmpt_create()
(19,mif_tags)
(20,cmpt)
(21,cmpt->width)
(22,0)
(23,cmpt)
(24,tvp)
(25,atoi(jas_tvparser_getval(tvp)
(26,!(cmpt = mif_cmpt_create()
(27,cmpt = mif_cmpt_create()
(28,case MIF_DATA:)
(29,jas_tvparser_destroy(tvp)
(30,cmpt->sampperx)
(31,cmpt)
(32,cmpt)
(33,case MIF_VSAMP:)
(34,jas_tvparser_create(buf)
(35,jas_tvparser_gettag(tvp)
(36,data)
(37,char *buf)
(38,!cmpt->samppery)
(39,hdr)
(40,case MIF_PREC:)
(41,cmpt->prec = atoi(jas_tvparser_getval(tvp)
(42,tvp)
(43,prec)
(44,)
(45,mif_cmpt_destroy(cmpt)
(46,cmpt->height)
(47,sgnd)
(48,cmpt->tly)
(49,id)
(50,cmpt)
(51,cmpt)
(52,tvp)
(53,0)
(54,cmpt->prec)
(55,cmpt->data = jas_strdup(jas_tvparser_getval(tvp)
(56,0)
(57,tvp)
(58,if (!cmpt->sampperx || !cmpt->samppery)
(59,0)
(60,id = jas_tvparser_next(tvp)
(61,id)
(62,jas_tvparser_getval(tvp)
(63,tvp)
(64,jas_tvparser_next(tvp)
(65,cmpt)
(66,cmpt)
(67,cmpt->tlx)
(68,while (!(id = jas_tvparser_next(tvp)
(69,error:)
(70,cmpt->tlx = atoi(jas_tvparser_getval(tvp)
(71,mif_hdr_addcmpt(hdr, hdr->numcmpts, cmpt)
(72,cmpt)
(73,cmpt->tly = atoi(jas_tvparser_getval(tvp)
(74,jas_tvparser_getval(tvp)
(75,tvp)
(76,cmpt->data = 0)
(77,cmpt)
(78,cmpt->tlx = 0)
(79,cmpt)
(80,0)
(81,cmpt->sgnd)
(82,cmpt->sgnd = atoi(jas_tvparser_getval(tvp)
(83,)
(84,1)
(85,width)
(86,samppery)
(87,cmpt)
(88,cmpt->data)
(89,!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)
(90,tvp)
(91,)
(92,0)
(93,1)
(94,cmpt->data)
(95,if (tvp)
(96,cmpt)
(97,cmpt)
(98,goto error;)
(99,tvp)
(100,cmpt->sgnd = -1)
(101,atoi(jas_tvparser_getval(tvp)
(102,buf)
(103,if (!(tvp = jas_tvparser_create(buf)
(104,if (cmpt)
(105,jas_tvparser_getval(tvp)
(106,tvp = jas_tvparser_create(buf)
(107,cmpt = 0)
(108,sampperx)
(109,tvp)
(110,cmpt->prec = 0)
(111,atoi(jas_tvparser_getval(tvp)
(112,case MIF_TLY:)
(113,!(id = jas_tvparser_next(tvp)
(114,cmpt)
(115,cmpt)
(116,cmpt->samppery = 0)
(117,tly)
(118,tvp = 0)
(119,tlx)
(120,return -1;)
(121,tvp)
(122,jas_tvparser_getval(tvp)
(123,goto error;)
(124,jas_taginfos_lookup(mif_tags,\\n\\t\\t  jas_tvparser_gettag(tvp)
(125,goto error;)
(126,width)
(127,cmpt->samppery)
(128,tvp)
(129,id)
(130,cmpt->sampperx = atoi(jas_tvparser_getval(tvp)
(131,goto error;)
(132,0)
(133,break;)
(134,jas_tvparser_getval(tvp)
(135,cmpt)
(136,)
(137,break;)
(138,atoi(jas_tvparser_getval(tvp)
(139,jas_tvparser_destroy(tvp)
(140,cmpt->tly = 0)
(141,jas_tvparser_getval(tvp)
(142,tlx)
(143,return -1;)
(144,hdr)
(145,samppery)
(146,cmpt->samppery = atoi(jas_tvparser_getval(tvp)
(147,numcmpts)
(148,case MIF_HSAMP:)
(149,jas_taginfo_nonull(jas_taginfos_lookup(mif_tags,\\n\\t\\t  jas_tvparser_gettag(tvp)
(150,1)
(151,-1)
(152,samppery)
(153,cmpt)
(154,sampperx)
(155,cmpt->sampperx)
(156,hdr->numcmpts)
(157,case MIF_HEIGHT:)
(158,0)
(159,tvp)
(160,atoi(jas_tvparser_getval(tvp)
(161,cmpt->tlx)
(162,jas_tvparser_getval(tvp)
(163,0)
(164,case MIF_WIDTH:)
(165,cmpt)
(166,-1)
(167,!cmpt->sampperx || !cmpt->samppery)
(168,prec)
(169,-1)
(170,tly)
(171,case MIF_TLX:)
(172,cmpt->samppery)
(173,break;)
(174,jas_strdup(jas_tvparser_getval(tvp)
(175,cmpt->width = atoi(jas_tvparser_getval(tvp)
(176,return 0;)
(177,if (mif_hdr_addcmpt(hdr, hdr->numcmpts, cmpt)
(178,break;)
(179,cmpt->height = atoi(jas_tvparser_getval(tvp)
(180,)
(181,cmpt->height = 0)
(182,atoi(jas_tvparser_getval(tvp)
(183,)
(184,data)
(185,cmpt->sgnd)
(186,sampperx)
(187,cmpt->prec)
(188,cmpt)
(189,0)
(190,)
(191,height)
(192,mif_cmpt_create()
(193,break;)
(194,)
(195,tvp)
(196,cmpt->samppery)
(197,cmpt)
(198,sgnd)
(199,cmpt->height)
(200,tvp)
(201,)
(202,height)
(203,cmpt->width = 0)
(204,cmpt->width)
(205,cmpt->tly)
(206,cmpt)
(207,)
(208,!(tvp = jas_tvparser_create(buf)
(209,jas_tvparser_getval(tvp)
(210,switch (jas_taginfo_nonull(jas_taginfos_lookup(mif_tags,\\n\\t\\t  jas_tvparser_gettag(tvp)
(211,cmpt->sampperx = 0)
(212,break;)
(213,jas_tvparser_getval(tvp)
(214,break;)
(215,if (!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
