-----label-----
1
-----code-----
void *jas_realloc(void *ptr, size_t size)
{
	void *result;
	jas_mb_t *mb;
	jas_mb_t *old_mb;
	size_t old_size;
	size_t ext_size;
	size_t mem;

	JAS_DBGLOG(100, ("jas_realloc(%x, %zu)\n", ptr, size));
	if (!ptr) {
		return jas_malloc(size);
	}
	if (ptr && !size) {
		jas_free(ptr);
	}
	if (!jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)) {
		jas_eprintf("requested memory size is too large\n");
		return 0;
	}
	old_mb = jas_get_mb(ptr);
	old_size = old_mb->size;
	JAS_DBGLOG(101, ("jas_realloc: old_mb=%x; old_size=%zu\n", old_mb,
	  old_size));
	if (size > old_size) {
		if (!jas_safe_size_add(jas_mem, ext_size, &mem) || mem > jas_max_mem) {
			jas_eprintf("maximum memory limit would be exceeded\n");
			return 0;
		}
	} else {
		if (!jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)) {
			jas_eprintf("heap corruption detected\n");
			abort();
		}
	}
	JAS_DBGLOG(100, ("jas_realloc: realloc(%p, %zu)\n", old_mb, ext_size));
	if (!(mb = realloc(old_mb, ext_size))) {
		result = 0;
	} else {
		result = jas_mb_get_data(mb);
		mb->size = size;
		jas_mem = mem;
	}
	JAS_DBGLOG(100, ("jas_realloc(%p, %zu) -> %p (%p)\n", ptr, size, result,
	  mb));
	JAS_DBGLOG(102, ("max_mem=%zu; mem=%zu\n", jas_max_mem, jas_mem));
	return result;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
6,7
6,8
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
16,29
16,30
16,31
16,32
16,33
16,34
16,35
17,18
18,19
18,20
20,21
20,22
23,24
24,25
24,26
25,26
27,28
27,29
30,31
31,32
31,33
32,33
34,35
34,36
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
60,61
61,62
61,63
61,64
63,64
65,66
67,68
67,69
68,69
69,70
71,72
72,73
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
80,81
82,83
83,84
85,86
86,87
87,88
87,89
88,89
90,91
92,93
92,94
93,94
94,95
94,96
94,97
94,98
95,96
97,98
99,100
101,102
102,103
104,105
104,106
105,106
106,107
106,108
107,108
110,111
112,113
113,114
113,115
114,115
116,117
116,118
117,118
119,120
121,122
122,123
122,124
123,124
125,126
125,127
126,127
129,130
130,131
130,132
130,133
131,132
134,135
135,136
135,137
135,138
137,138
139,140
141,142
141,143
141,144
142,143
142,144
143,144
145,146
147,148
148,149
148,150
149,150
149,151
150,151
151,152
151,153
151,154
151,155
152,153
154,155
156,157
158,159
159,160
161,162
161,163
162,163
164,165
166,167
166,168
167,168
168,169
168,170
169,170
172,173
174,175
175,176
175,177
176,177
177,178
177,179
177,180
177,181
178,179
180,181
182,183
182,184
183,184
185,186
187,188
188,189
190,191
190,192
191,192
192,193
192,194
193,194
196,197
197,198
198,199
200,201
201,202
201,203
201,204
202,203
205,206
206,207
206,208
206,209
208,209
210,211
212,213
212,214
212,215
213,214
214,215
215,216
215,217
216,217
218,219
218,220
218,221
219,220
221,222
223,224
225,226
226,227
227,228
227,229
228,229
231,232
231,233
231,234
232,233
233,234
233,235
234,235
236,237
236,238
237,238
239,240
241,242
242,243
242,244
243,244
243,245
244,245
247,248
249,250
250,251
250,252
251,252
253,254
255,256
256,257
256,258
256,259
257,258
260,261
261,262
261,263
261,264
261,265
261,266
263,264
265,266
267,268
269,270
271,272
272,273
272,274
272,275
273,274
276,277
277,278
277,279
277,280
279,280
281,282
283,284
284,285
-----nextToken-----
2,4,5,7,9,10,13,15,19,21,22,26,28,29,33,35,36,40,42,46,48,52,54,58,59,62,64,66,70,75,77,81,84,89,91,96,98,100,103,108,109,111,115,118,120,124,127,128,132,133,136,138,140,144,146,153,155,157,160,163,165,170,171,173,179,181,184,186,189,194,195,199,203,204,207,209,211,217,220,222,224,229,230,235,238,240,245,246,248,252,254,258,259,262,264,266,268,270,274,275,278,280,282,285
-----computeFrom-----
79,80
79,81
113,114
113,115
122,123
122,124
142,143
142,144
149,150
149,151
161,162
161,163
182,183
182,184
215,216
215,217
227,228
227,229
233,234
233,235
242,243
242,244
250,251
250,252
-----guardedBy-----
81,91
-----guardedByNegation-----
146,184
144,186
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
void *jas_realloc(void *ptr, size_t size){	void *result;	jas_mb_t *mb;	jas_mb_t *old_mb;	size_t old_size;	size_t ext_size;	size_t mem;	JAS_DBGLOG(100, ("jas_realloc(%x, %zu)\n", ptr, size));	if (!ptr) {		return jas_malloc(size);	}	if (ptr && !size) {		jas_free(ptr);	}	if (!jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)) {		jas_eprintf("requested memory size is too large\n");		return 0;	}	old_mb = jas_get_mb(ptr);	old_size = old_mb->size;	JAS_DBGLOG(101, ("jas_realloc: old_mb=%x; old_size=%zu\n", old_mb,	  old_size));	if (size > old_size) {		if (!jas_safe_size_add(jas_mem, ext_size, &mem) || mem > jas_max_mem) {			jas_eprintf("maximum memory limit would be exceeded\n");			return 0;		}	} else {		if (!jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)) {			jas_eprintf("heap corruption detected\n");			abort();		}	}	JAS_DBGLOG(100, ("jas_realloc: realloc(%p, %zu)\n", old_mb, ext_size));	if (!(mb = realloc(old_mb, ext_size))) {		result = 0;	} else {		result = jas_mb_get_data(mb);		mb->size = size;		jas_mem = mem;	}	JAS_DBGLOG(100, ("jas_realloc(%p, %zu) -> %p (%p)\n", ptr, size, result,	  mb));	JAS_DBGLOG(102, ("max_mem=%zu; mem=%zu\n", jas_max_mem, jas_mem));	return result;}
void
*jas_realloc(void *ptr, size_t size)
*
jas_realloc
void *ptr
void
*ptr
*
ptr
size_t size
size_t
size_t
size
size
{	void *result;	jas_mb_t *mb;	jas_mb_t *old_mb;	size_t old_size;	size_t ext_size;	size_t mem;	JAS_DBGLOG(100, ("jas_realloc(%x, %zu)\n", ptr, size));	if (!ptr) {		return jas_malloc(size);	}	if (ptr && !size) {		jas_free(ptr);	}	if (!jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)) {		jas_eprintf("requested memory size is too large\n");		return 0;	}	old_mb = jas_get_mb(ptr);	old_size = old_mb->size;	JAS_DBGLOG(101, ("jas_realloc: old_mb=%x; old_size=%zu\n", old_mb,	  old_size));	if (size > old_size) {		if (!jas_safe_size_add(jas_mem, ext_size, &mem) || mem > jas_max_mem) {			jas_eprintf("maximum memory limit would be exceeded\n");			return 0;		}	} else {		if (!jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)) {			jas_eprintf("heap corruption detected\n");			abort();		}	}	JAS_DBGLOG(100, ("jas_realloc: realloc(%p, %zu)\n", old_mb, ext_size));	if (!(mb = realloc(old_mb, ext_size))) {		result = 0;	} else {		result = jas_mb_get_data(mb);		mb->size = size;		jas_mem = mem;	}	JAS_DBGLOG(100, ("jas_realloc(%p, %zu) -> %p (%p)\n", ptr, size, result,	  mb));	JAS_DBGLOG(102, ("max_mem=%zu; mem=%zu\n", jas_max_mem, jas_mem));	return result;}
void *result;
void *result;
void
*result
*
result
jas_mb_t *mb;
jas_mb_t *mb;
jas_mb_t
jas_mb_t
*mb
*
mb
jas_mb_t *old_mb;
jas_mb_t *old_mb;
jas_mb_t
jas_mb_t
*old_mb
*
old_mb
size_t old_size;
size_t old_size;
size_t
size_t
old_size
old_size
size_t ext_size;
size_t ext_size;
size_t
size_t
ext_size
ext_size
size_t mem;
size_t mem;
size_t
size_t
mem
mem
JAS_DBGLOG(100, ("jas_realloc(%x, %zu)\n", ptr, size));
JAS_DBGLOG(100, ("jas_realloc(%x, %zu)\n", ptr, size))
JAS_DBGLOG
JAS_DBGLOG
100
("jas_realloc(%x, %zu)\n", ptr, size)
"jas_realloc(%x, %zu)\n", ptr, size
"jas_realloc(%x, %zu)\n"
ptr
ptr
size
size
if (!ptr) {		return jas_malloc(size);	}
!ptr
ptr
ptr
{		return jas_malloc(size);	}
return jas_malloc(size);
jas_malloc(size)
jas_malloc
jas_malloc
size
size
if (ptr && !size) {		jas_free(ptr);	}
ptr && !size
ptr
ptr
!size
size
size
{		jas_free(ptr);	}
jas_free(ptr);
jas_free(ptr)
jas_free
jas_free
ptr
ptr
if (!jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)) {		jas_eprintf("requested memory size is too large\n");		return 0;	}
!jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)
jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)
jas_safe_size_add
jas_safe_size_add
size
size
JAS_MB_SIZE
JAS_MB_SIZE
&ext_size
ext_size
ext_size
{		jas_eprintf("requested memory size is too large\n");		return 0;	}
jas_eprintf("requested memory size is too large\n");
jas_eprintf("requested memory size is too large\n")
jas_eprintf
jas_eprintf
"requested memory size is too large\n"
return 0;
0
old_mb = jas_get_mb(ptr);
old_mb = jas_get_mb(ptr)
old_mb
old_mb
jas_get_mb(ptr)
jas_get_mb
jas_get_mb
ptr
ptr
old_size = old_mb->size;
old_size = old_mb->size
old_size
old_size
old_mb->size
old_mb
old_mb
size
JAS_DBGLOG(101, ("jas_realloc: old_mb=%x; old_size=%zu\n", old_mb,	  old_size));
JAS_DBGLOG(101, ("jas_realloc: old_mb=%x; old_size=%zu\n", old_mb,	  old_size))
JAS_DBGLOG
JAS_DBGLOG
101
("jas_realloc: old_mb=%x; old_size=%zu\n", old_mb,	  old_size)
"jas_realloc: old_mb=%x; old_size=%zu\n", old_mb,	  old_size
"jas_realloc: old_mb=%x; old_size=%zu\n"
old_mb
old_mb
old_size
old_size
if (size > old_size) {		if (!jas_safe_size_add(jas_mem, ext_size, &mem) || mem > jas_max_mem) {			jas_eprintf("maximum memory limit would be exceeded\n");			return 0;		}	} else {		if (!jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)) {			jas_eprintf("heap corruption detected\n");			abort();		}	}
size > old_size
size
size
old_size
old_size
{		if (!jas_safe_size_add(jas_mem, ext_size, &mem) || mem > jas_max_mem) {			jas_eprintf("maximum memory limit would be exceeded\n");			return 0;		}	}
if (!jas_safe_size_add(jas_mem, ext_size, &mem) || mem > jas_max_mem) {			jas_eprintf("maximum memory limit would be exceeded\n");			return 0;		}
!jas_safe_size_add(jas_mem, ext_size, &mem) || mem > jas_max_mem
!jas_safe_size_add(jas_mem, ext_size, &mem)
jas_safe_size_add(jas_mem, ext_size, &mem)
jas_safe_size_add
jas_safe_size_add
jas_mem
jas_mem
ext_size
ext_size
&mem
mem
mem
mem > jas_max_mem
mem
mem
jas_max_mem
jas_max_mem
{			jas_eprintf("maximum memory limit would be exceeded\n");			return 0;		}
jas_eprintf("maximum memory limit would be exceeded\n");
jas_eprintf("maximum memory limit would be exceeded\n")
jas_eprintf
jas_eprintf
"maximum memory limit would be exceeded\n"
return 0;
0
{		if (!jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)) {			jas_eprintf("heap corruption detected\n");			abort();		}	}
if (!jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)) {			jas_eprintf("heap corruption detected\n");			abort();		}
!jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)
jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)
jas_safe_size_sub
jas_safe_size_sub
jas_mem
jas_mem
old_size - size
old_size
old_size
size
size
&jas_mem
jas_mem
jas_mem
{			jas_eprintf("heap corruption detected\n");			abort();		}
jas_eprintf("heap corruption detected\n");
jas_eprintf("heap corruption detected\n")
jas_eprintf
jas_eprintf
"heap corruption detected\n"
abort();
abort()
abort
abort
JAS_DBGLOG(100, ("jas_realloc: realloc(%p, %zu)\n", old_mb, ext_size));
JAS_DBGLOG(100, ("jas_realloc: realloc(%p, %zu)\n", old_mb, ext_size))
JAS_DBGLOG
JAS_DBGLOG
100
("jas_realloc: realloc(%p, %zu)\n", old_mb, ext_size)
"jas_realloc: realloc(%p, %zu)\n", old_mb, ext_size
"jas_realloc: realloc(%p, %zu)\n"
old_mb
old_mb
ext_size
ext_size
if (!(mb = realloc(old_mb, ext_size))) {		result = 0;	} else {		result = jas_mb_get_data(mb);		mb->size = size;		jas_mem = mem;	}
!(mb = realloc(old_mb, ext_size))
(mb = realloc(old_mb, ext_size))
mb = realloc(old_mb, ext_size)
mb
mb
realloc(old_mb, ext_size)
realloc
realloc
old_mb
old_mb
ext_size
ext_size
{		result = 0;	}
result = 0;
result = 0
result
result
0
{		result = jas_mb_get_data(mb);		mb->size = size;		jas_mem = mem;	}
result = jas_mb_get_data(mb);
result = jas_mb_get_data(mb)
result
result
jas_mb_get_data(mb)
jas_mb_get_data
jas_mb_get_data
mb
mb
mb->size = size;
mb->size = size
mb->size
mb
mb
size
size
size
jas_mem = mem;
jas_mem = mem
jas_mem
jas_mem
mem
mem
JAS_DBGLOG(100, ("jas_realloc(%p, %zu) -> %p (%p)\n", ptr, size, result,	  mb));
JAS_DBGLOG(100, ("jas_realloc(%p, %zu) -> %p (%p)\n", ptr, size, result,	  mb))
JAS_DBGLOG
JAS_DBGLOG
100
("jas_realloc(%p, %zu) -> %p (%p)\n", ptr, size, result,	  mb)
"jas_realloc(%p, %zu) -> %p (%p)\n", ptr, size, result,	  mb
"jas_realloc(%p, %zu) -> %p (%p)\n"
ptr
ptr
size
size
result
result
mb
mb
JAS_DBGLOG(102, ("max_mem=%zu; mem=%zu\n", jas_max_mem, jas_mem));
JAS_DBGLOG(102, ("max_mem=%zu; mem=%zu\n", jas_max_mem, jas_mem))
JAS_DBGLOG
JAS_DBGLOG
102
("max_mem=%zu; mem=%zu\n", jas_max_mem, jas_mem)
"max_mem=%zu; mem=%zu\n", jas_max_mem, jas_mem
"max_mem=%zu; mem=%zu\n"
jas_max_mem
jas_max_mem
jas_mem
jas_mem
return result;
result
result
-----joern-----
(9,145,0)
(124,69,0)
(45,106,0)
(40,69,0)
(132,81,0)
(145,5,0)
(113,97,0)
(131,41,0)
(117,54,0)
(93,43,0)
(108,41,0)
(54,117,0)
(43,73,0)
(126,17,0)
(111,97,0)
(103,123,0)
(21,77,0)
(17,126,0)
(109,125,0)
(30,25,0)
(118,38,0)
(81,132,0)
(101,30,0)
(30,122,0)
(24,82,0)
(120,94,0)
(16,28,0)
(22,89,0)
(32,126,0)
(56,31,0)
(52,25,0)
(112,98,0)
(88,126,0)
(5,122,0)
(5,105,0)
(61,23,0)
(98,73,0)
(75,69,0)
(65,69,0)
(10,32,0)
(95,106,0)
(85,137,0)
(36,115,0)
(13,142,0)
(138,69,0)
(90,43,0)
(79,97,0)
(124,141,0)
(143,127,0)
(87,50,0)
(132,72,0)
(76,130,0)
(102,85,0)
(28,4,0)
(97,122,0)
(77,49,0)
(67,69,0)
(137,69,0)
(66,85,0)
(42,41,0)
(107,54,0)
(63,82,0)
(134,1,0)
(99,89,0)
(53,69,0)
(48,69,0)
(82,24,0)
(35,122,0)
(89,22,0)
(142,110,0)
(0,141,0)
(67,109,0)
(15,126,0)
(78,91,0)
(52,142,0)
(67,28,0)
(114,117,0)
(72,106,0)
(27,81,0)
(60,131,0)
(139,32,0)
(103,33,0)
(41,42,0)
(6,119,0)
(2,81,0)
(8,69,0)
(35,137,0)
(83,91,0)
(137,85,0)
(58,130,0)
(100,33,0)
(84,69,0)
(125,82,0)
(71,5,0)
(32,137,0)
(46,47,0)
(135,62,0)
(115,81,0)
(3,51,0)
(51,110,0)
(12,113,0)
(20,28,0)
(119,34,0)
(117,69,0)
(37,124,0)
(33,122,0)
(11,69,0)
(49,77,0)
(116,136,0)
(126,32,0)
(52,119,0)
(80,68,0)
(130,54,0)
(126,15,0)
(29,35,0)
(109,105,0)
(7,22,0)
(116,123,0)
(144,42,0)
(89,69,0)
(94,123,0)
(18,49,0)
(91,49,0)
(25,57,0)
(129,97,0)
(33,103,0)
(81,115,0)
(104,145,0)
(73,98,0)
(38,105,0)
(42,69,0)
(52,67,0)
(82,43,0)
(97,113,0)
(32,122,0)
(50,23,0)
(98,123,0)
(23,141,0)
(145,82,0)
(86,31,0)
(31,50,0)
(55,125,0)
(140,67,0)
(121,73,0)
(62,44,0)
(47,22,0)
(92,103,0)
(14,131,0)
(74,47,0)
(43,82,0)
(39,69,0)
(97,79,0)
(96,38,0)
(128,35,0)
(19,15,0)
(59,137,0)
(77,69,0)
(1,34,0)
(70,69,0)
(64,44,0)
(73,69,0)
(133,109,0)
(125,109,0)
(85,73,0)
(26,116,0)
(72,132,0)
(141,124,0)
(106,72,0)
(145,104,1)
(51,3,1)
(13,51,1)
(113,12,1)
(128,42,1)
(38,118,1)
(129,103,1)
(134,72,1)
(25,30,1)
(72,132,1)
(35,137,1)
(108,144,1)
(37,38,1)
(12,111,1)
(52,142,1)
(82,43,1)
(27,35,1)
(26,103,1)
(71,145,1)
(33,122,1)
(89,74,1)
(101,94,1)
(139,88,1)
(99,72,1)
(137,85,1)
(42,41,1)
(89,22,1)
(129,116,1)
(121,79,1)
(79,97,1)
(90,63,1)
(52,25,1)
(32,122,1)
(77,83,1)
(56,86,1)
(0,37,1)
(94,120,1)
(5,71,1)
(78,18,1)
(20,16,1)
(9,109,1)
(33,100,1)
(116,123,1)
(29,128,1)
(126,32,1)
(15,19,1)
(97,122,1)
(35,122,1)
(99,17,1)
(118,96,1)
(142,13,1)
(133,24,1)
(97,113,1)
(52,67,1)
(45,95,1)
(77,49,1)
(103,92,1)
(95,132,1)
(144,137,1)
(43,93,1)
(24,82,1)
(103,33,1)
(125,82,1)
(28,20,1)
(86,87,1)
(3,79,1)
(19,32,1)
(21,124,1)
(67,109,1)
(135,17,1)
(116,26,1)
(92,94,1)
(58,76,1)
(120,117,1)
(96,5,1)
(43,73,1)
(117,54,1)
(14,60,1)
(124,56,1)
(42,14,1)
(18,21,1)
(145,82,1)
(132,81,1)
(52,119,1)
(74,46,1)
(125,55,1)
(111,129,1)
(32,137,1)
(100,92,1)
(106,45,1)
(104,9,1)
(5,122,1)
(37,28,1)
(85,73,1)
(93,90,1)
(30,122,1)
(64,62,1)
(59,73,1)
(98,112,1)
(16,24,1)
(35,29,1)
(73,98,1)
(112,121,1)
(119,6,1)
(6,1,1)
(60,108,1)
(98,123,1)
(87,61,1)
(17,126,1)
(88,35,1)
(109,125,1)
(46,7,1)
(115,36,1)
(2,27,1)
(81,115,1)
(72,106,1)
(10,139,1)
(103,123,1)
(32,10,1)
(94,123,1)
(107,114,1)
(76,107,1)
(99,64,1)
(117,58,1)
(126,15,1)
(1,134,1)
(140,77,1)
(61,0,1)
(55,133,1)
(63,89,1)
(83,78,1)
(36,2,1)
(67,140,1)
(66,102,1)
(124,141,1)
(30,101,1)
(85,66,1)
(62,135,1)
(67,28,1)
(7,99,1)
(102,59,1)
(45,132,2)
(3,79,2)
(19,35,2)
(18,35,2)
(126,32,2)
(134,72,2)
(1,72,2)
(113,94,2)
(5,122,2)
(101,94,2)
(78,35,2)
(92,94,2)
(10,35,2)
(135,17,2)
(77,35,2)
(82,72,2)
(59,79,2)
(15,35,2)
(117,54,2)
(82,35,2)
(35,122,2)
(97,122,2)
(104,24,2)
(67,109,2)
(132,35,2)
(5,24,2)
(102,79,2)
(89,72,2)
(94,123,2)
(116,123,2)
(27,35,2)
(29,79,2)
(144,79,2)
(103,123,2)
(66,79,2)
(43,72,2)
(90,35,2)
(6,72,2)
(33,92,2)
(25,94,2)
(30,94,2)
(56,72,2)
(17,126,2)
(0,35,2)
(124,35,2)
(72,106,2)
(82,43,2)
(90,72,2)
(38,24,2)
(85,79,2)
(2,35,2)
(21,35,2)
(72,35,2)
(112,79,2)
(108,79,2)
(99,72,2)
(83,35,2)
(67,28,2)
(9,24,2)
(35,79,2)
(0,72,2)
(28,24,2)
(95,132,2)
(73,98,2)
(16,24,2)
(137,79,2)
(89,22,2)
(72,132,2)
(33,122,2)
(87,72,2)
(55,24,2)
(99,35,2)
(67,72,2)
(46,35,2)
(67,35,2)
(42,79,2)
(52,119,2)
(52,142,2)
(61,72,2)
(126,35,2)
(137,85,2)
(73,79,2)
(18,72,2)
(56,35,2)
(103,33,2)
(24,35,2)
(109,24,2)
(51,79,2)
(98,79,2)
(124,72,2)
(139,35,2)
(42,41,2)
(35,137,2)
(109,125,2)
(43,73,2)
(36,35,2)
(97,94,2)
(24,82,2)
(63,35,2)
(81,115,2)
(37,72,2)
(96,24,2)
(79,97,2)
(98,123,2)
(116,103,2)
(115,35,2)
(86,72,2)
(88,35,2)
(74,72,2)
(74,35,2)
(87,35,2)
(46,72,2)
(77,49,2)
(106,132,2)
(125,24,2)
(71,24,2)
(63,72,2)
(100,92,2)
(13,79,2)
(81,35,2)
(61,35,2)
(14,79,2)
(26,103,2)
(52,67,2)
(21,72,2)
(124,141,2)
(85,73,2)
(60,79,2)
(7,35,2)
(32,137,2)
(89,35,2)
(86,35,2)
(103,94,2)
(78,72,2)
(37,35,2)
(43,35,2)
(77,72,2)
(126,15,2)
(32,35,2)
(32,122,2)
(79,94,2)
(111,94,2)
(12,94,2)
(119,72,2)
(121,79,2)
(118,24,2)
(7,72,2)
(20,24,2)
(128,79,2)
(62,17,2)
(140,72,2)
(132,81,2)
(140,35,2)
(133,24,2)
(97,113,2)
(93,35,2)
(24,72,2)
(93,72,2)
(52,25,2)
(30,122,2)
(142,79,2)
(17,35,2)
(64,17,2)
(129,94,2)
(145,82,2)
(83,72,2)
(125,82,2)
(145,24,2)
-----------------------------------
(0,"jas_realloc(%p, %zu)
(1,jas_eprintf("maximum memory limit would be exceeded\\n")
(2,ext_size)
(3,"requested memory size is too large\\n")
(4,)
(5,mb->size = size)
(6,0)
(7,"jas_realloc: realloc(%p, %zu)
(8,if (!(mb = realloc(old_mb, ext_size)
(9,mb)
(10,size)
(11,if (ptr && !size)
(12,ext_size)
(13,0)
(14,old_size)
(15,&jas_mem)
(16,result)
(17,!jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)
(18,"max_mem=%zu; mem=%zu\\n")
(19,jas_mem)
(20,0)
(21,102)
(22,)
(23,)
(24,!(mb = realloc(old_mb, ext_size)
(25,return jas_malloc(size)
(26,ptr)
(27,jas_mem)
(28,result = 0)
(29,old_size)
(30,jas_malloc(size)
(31,)
(32,old_size - size)
(33,!size)
(34,)
(35,size > old_size)
(36,mem)
(37,100)
(38,jas_mem = mem)
(39,ext_size)
(40,old_size)
(41,)
(42,JAS_DBGLOG(101, ("jas_realloc: old_mb=%x; old_size=%zu\\n", old_mb,\\n\\t  old_size)
(43,realloc(old_mb, ext_size)
(44,)
(45,jas_max_mem)
(46,old_mb)
(47,)
(48,mem)
(49,)
(50,)
(51,jas_eprintf("requested memory size is too large\\n")
(52,RET)
(53,if (!ptr)
(54,)
(55,mb)
(56,mb)
(57,)
(58,size)
(59,old_size)
(60,old_mb)
(61,ptr)
(62,jas_eprintf("heap corruption detected\\n")
(63,mb)
(64,abort()
(65,if (!jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)
(66,size)
(67,return result;)
(68,)
(69,)
(70,if (size > old_size)
(71,size)
(72,!jas_safe_size_add(jas_mem, ext_size, &mem)
(73,old_mb = jas_get_mb(ptr)
(74,ext_size)
(75,old_mb)
(76,ptr)
(77,JAS_DBGLOG(102, ("max_mem=%zu; mem=%zu\\n", jas_max_mem, jas_mem)
(78,jas_max_mem)
(79,!jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)
(80,if (!jas_safe_size_add(jas_mem, ext_size, &mem)
(81,jas_safe_size_add(jas_mem, ext_size, &mem)
(82,mb = realloc(old_mb, ext_size)
(83,jas_mem)
(84,result)
(85,old_mb->size)
(86,result)
(87,size)
(88,jas_mem)
(89,JAS_DBGLOG(100, ("jas_realloc: realloc(%p, %zu)
(90,old_mb)
(91,)
(92,ptr)
(93,ext_size)
(94,!ptr)
(95,mem)
(96,jas_mem)
(97,jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)
(98,jas_get_mb(ptr)
(99,100)
(100,size)
(101,size)
(102,old_mb)
(103,ptr && !size)
(104,size)
(105,)
(106,mem > jas_max_mem)
(107,"jas_realloc(%x, %zu)
(108,"jas_realloc: old_mb=%x; old_size=%zu\\n")
(109,result = jas_mb_get_data(mb)
(110,)
(111,JAS_MB_SIZE)
(112,ptr)
(113,&ext_size)
(114,100)
(115,&mem)
(116,jas_free(ptr)
(117,JAS_DBGLOG(100, ("jas_realloc(%x, %zu)
(118,mem)
(119,return 0;)
(120,ptr)
(121,old_mb)
(122,size_t size)
(123,void *ptr)
(124,JAS_DBGLOG(100, ("jas_realloc(%p, %zu)
(125,jas_mb_get_data(mb)
(126,jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)
(127,)
(128,size)
(129,size)
(130,)
(131,)
(132,!jas_safe_size_add(jas_mem, ext_size, &mem)
(133,result)
(134,"maximum memory limit would be exceeded\\n")
(135,"heap corruption detected\\n")
(136,)
(137,old_size = old_mb->size)
(138,mb)
(139,old_size)
(140,result)
(141,)
(142,return 0;)
(143,if (!jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)
(144,101)
(145,mb->size)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
