-----label-----
1
-----code-----
int jpc_floorlog2(int x)
{
	int y;

	/* The argument must be positive. */
	assert(x > 0);

	y = 0;
	while (x > 1) {
		x >>= 1;
		++y;
	}
	return y;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
10,11
11,12
11,13
13,14
15,16
16,17
16,18
17,18
19,20
19,21
20,21
23,24
24,25
24,26
25,26
28,29
28,30
29,30
29,31
30,31
33,34
33,35
34,35
35,36
35,37
36,37
39,40
40,41
41,42
43,44
44,45
-----nextToken-----
2,4,6,8,12,14,18,21,22,26,27,31,32,37,38,42,45
-----computeFrom-----
19,20
19,21
24,25
24,26
29,30
29,31
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int jpc_floorlog2(int x){	int y;	/* The argument must be positive. */	assert(x > 0);	y = 0;	while (x > 1) {		x >>= 1;		++y;	}	return y;}
int
jpc_floorlog2(int x)
jpc_floorlog2
int x
int
x
x
{	int y;	/* The argument must be positive. */	assert(x > 0);	y = 0;	while (x > 1) {		x >>= 1;		++y;	}	return y;}
int y;
int y;
int
y
y
assert(x > 0);
assert(x > 0)
assert
assert
x > 0
x
x
0
y = 0;
y = 0
y
y
0
while (x > 1) {		x >>= 1;		++y;	}
x > 1
x
x
1
{		x >>= 1;		++y;	}
x >>= 1;
x >>= 1
x
x
1
++y;
++y
y
y
return y;
y
y
-----joern-----
(21,9,0)
(15,8,0)
(1,17,0)
(21,20,0)
(3,20,0)
(10,7,0)
(12,8,0)
(18,7,0)
(2,22,0)
(17,9,0)
(13,22,0)
(20,20,0)
(20,9,0)
(14,7,0)
(19,20,0)
(8,7,0)
(0,21,0)
(7,22,0)
(20,6,0)
(16,17,0)
(11,22,0)
(8,22,0)
(13,17,0)
(5,21,0)
(18,6,0)
(17,13,0)
(4,18,0)
(4,20,1)
(16,1,1)
(8,7,1)
(8,15,1)
(3,19,1)
(17,16,1)
(18,7,1)
(10,13,1)
(20,3,1)
(21,0,1)
(13,17,1)
(17,9,1)
(0,5,1)
(18,4,1)
(21,20,1)
(19,21,1)
(5,18,1)
(5,7,1)
(20,20,1)
(7,14,1)
(21,9,1)
(14,10,1)
(15,21,1)
(20,9,1)
(12,8,1)
(18,7,2)
(19,21,2)
(8,7,2)
(12,8,2)
(5,21,2)
(21,21,2)
(20,21,2)
(4,21,2)
(18,21,2)
(20,9,2)
(21,20,2)
(13,17,2)
(0,21,2)
(17,9,2)
(21,9,2)
(20,20,2)
(3,21,2)
-----------------------------------
(0,1)
(1,x)
(2,while (x > 1)
(3,1)
(4,y)
(5,x)
(6,)
(7,y = 0)
(8,return y;)
(9,int x)
(10,y)
(11,y)
(12,RET)
(13,assert(x > 0)
(14,0)
(15,y)
(16,0)
(17,x > 0)
(18,++y)
(19,x)
(20,x >>= 1)
(21,x > 1)
(22,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
