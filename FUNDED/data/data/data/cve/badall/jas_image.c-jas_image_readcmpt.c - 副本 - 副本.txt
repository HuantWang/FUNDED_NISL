-----label-----
1
-----code-----
int jas_image_readcmpt(jas_image_t *image, int cmptno, jas_image_coord_t x,
  jas_image_coord_t y, jas_image_coord_t width, jas_image_coord_t height,
  jas_matrix_t *data)
{
	jas_image_cmpt_t *cmpt;
	jas_image_coord_t i;
	jas_image_coord_t j;
	int k;
	jas_seqent_t v;
	int c;
	jas_seqent_t *dr;
	jas_seqent_t *d;
	int drs;

	JAS_DBGLOG(100, ("jas_image_readcmpt(%p, %d, %ld, %ld, %ld, %ld, %p)\n",
	  image, cmptno, JAS_CAST(long, x), JAS_CAST(long, y),
	  JAS_CAST(long, width), JAS_CAST(long, height), data));

	if (cmptno < 0 || cmptno >= image->numcmpts_) {
		return -1;
	}

	cmpt = image->cmpts_[cmptno];
	if (x >= cmpt->width_ || y >= cmpt->height_ ||
	  x + width > cmpt->width_ ||
	  y + height > cmpt->height_) {
		return -1;
	}

	if (!jas_matrix_numrows(data) || !jas_matrix_numcols(data)) {
		return -1;
	}

	if (jas_matrix_numrows(data) != height || jas_matrix_numcols(data) != width) {
		if (jas_matrix_resize(data, height, width)) {
			return -1;
		}
	}

	dr = jas_matrix_getref(data, 0, 0);
	drs = jas_matrix_rowstep(data);
	for (i = 0; i < height; ++i, dr += drs) {
		d = dr;
		if (jas_stream_seek(cmpt->stream_, (cmpt->width_ * (y + i) + x)
		  * cmpt->cps_, SEEK_SET) < 0) {
			return -1;
		}
		for (j = width; j > 0; --j, ++d) {
			v = 0;
			for (k = cmpt->cps_; k > 0; --k) {
				if ((c = jas_stream_getc(cmpt->stream_)) == EOF) {
					return -1;
				}
				v = (v << 8) | (c & 0xff);
			}
			*d = bitstoint(v, cmpt->prec_, cmpt->sgnd_);
		}
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
41,49
41,50
41,51
41,52
41,53
41,54
41,55
41,56
41,57
41,58
41,59
41,60
42,43
43,44
43,45
44,45
46,47
46,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
64,65
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
75,76
77,78
78,79
78,80
79,80
81,82
81,83
84,85
85,86
85,87
86,87
88,89
88,90
91,92
92,93
92,94
94,95
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
106,107
106,108
107,108
110,111
111,112
112,113
114,115
115,116
115,117
116,117
118,119
118,120
119,120
119,121
120,121
123,124
125,126
125,127
126,127
126,128
127,128
127,129
128,129
128,130
129,130
129,131
130,131
132,133
132,134
133,134
136,137
136,138
137,138
139,140
139,141
140,141
143,144
143,145
144,145
144,146
145,146
147,148
149,150
149,151
150,151
153,154
153,155
154,155
154,156
155,156
157,158
159,160
159,161
160,161
163,164
164,165
165,166
167,168
167,169
168,169
168,170
169,170
170,171
170,172
171,172
173,174
175,176
176,177
176,178
177,178
179,180
181,182
182,183
183,184
185,186
185,187
186,187
186,188
187,188
187,189
188,189
188,190
189,190
191,192
193,194
195,196
195,197
196,197
196,198
197,198
199,200
201,202
203,204
204,205
204,206
205,206
205,207
205,208
205,209
206,207
208,209
210,211
212,213
214,215
215,216
216,217
218,219
219,220
219,221
220,221
222,223
222,224
222,225
222,226
223,224
225,226
229,230
230,231
230,232
231,232
233,234
233,235
234,235
236,237
238,239
238,240
238,241
238,242
239,240
240,241
240,242
241,242
244,245
244,246
245,246
247,248
249,250
249,251
250,251
251,252
253,254
253,255
254,255
256,257
258,259
258,260
258,261
259,260
260,261
260,262
261,262
263,264
265,266
265,267
266,267
266,268
267,268
267,269
267,270
267,271
268,269
270,271
270,272
271,272
274,275
274,276
275,276
276,277
276,278
277,278
277,279
278,279
278,280
279,280
282,283
283,284
283,285
284,285
286,287
288,289
290,291
290,292
291,292
294,295
297,298
298,299
299,300
301,302
301,303
301,304
301,305
302,303
303,304
303,305
304,305
306,307
308,309
308,310
309,310
312,313
312,314
313,314
314,315
316,317
317,318
319,320
319,321
319,322
320,321
321,322
321,323
322,323
325,326
325,327
325,328
325,329
326,327
327,328
327,329
328,329
330,331
330,332
331,332
334,335
334,336
335,336
338,339
339,340
341,342
341,343
342,343
342,344
343,344
343,345
344,345
345,346
345,347
346,347
348,349
348,350
349,350
351,352
351,353
352,353
355,356
357,358
358,359
359,360
361,362
362,363
362,364
363,364
365,366
365,367
366,367
367,368
367,369
368,369
371,372
372,373
372,374
373,374
376,377
377,378
377,379
378,379
379,380
381,382
381,383
381,384
381,385
382,383
384,385
386,387
386,388
387,388
390,391
390,392
391,392
394,395
-----nextToken-----
2,4,7,9,10,12,14,17,19,22,24,27,29,32,34,37,39,40,45,47,48,52,54,58,60,63,65,69,71,74,76,80,82,83,87,89,90,93,95,101,102,105,108,109,113,117,121,122,124,131,134,135,138,141,142,146,148,151,152,156,158,161,162,166,172,174,178,180,184,190,192,194,198,200,202,207,209,211,213,217,221,224,226,227,228,232,235,237,242,243,246,248,252,255,257,262,264,269,272,273,280,281,285,287,289,292,293,295,296,300,305,307,310,311,315,318,323,324,329,332,333,336,337,340,347,350,353,354,356,360,364,369,370,374,375,380,383,385,388,389,392,393,395
-----computeFrom-----
98,99
98,100
99,100
99,101
103,104
103,105
115,116
115,117
126,127
126,128
127,128
127,129
128,129
128,130
129,130
129,131
136,137
136,138
143,144
143,145
144,145
144,146
153,154
153,155
154,155
154,156
168,169
168,170
186,187
186,188
187,188
187,189
195,196
195,197
219,220
219,221
230,231
230,232
240,241
240,242
244,245
244,246
253,254
253,255
260,261
260,262
266,267
266,268
274,275
274,276
276,277
276,278
277,278
277,279
283,284
283,285
303,304
303,305
308,309
308,310
321,322
321,323
327,328
327,329
334,335
334,336
343,344
343,345
345,346
345,347
362,363
362,364
365,366
365,367
367,368
367,369
372,373
372,374
377,378
377,379
-----guardedBy-----
200,209
202,213
194,211
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ProblemStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int jas_image_readcmpt(jas_image_t *image, int cmptno, jas_image_coord_t x,  jas_image_coord_t y, jas_image_coord_t width, jas_image_coord_t height,  jas_matrix_t *data){	jas_image_cmpt_t *cmpt;	jas_image_coord_t i;	jas_image_coord_t j;	int k;	jas_seqent_t v;	int c;	jas_seqent_t *dr;	jas_seqent_t *d;	int drs;	JAS_DBGLOG(100, ("jas_image_readcmpt(%p, %d, %ld, %ld, %ld, %ld, %p)\n",	  image, cmptno, JAS_CAST(long, x), JAS_CAST(long, y),	  JAS_CAST(long, width), JAS_CAST(long, height), data));	if (cmptno < 0 || cmptno >= image->numcmpts_) {		return -1;	}	cmpt = image->cmpts_[cmptno];	if (x >= cmpt->width_ || y >= cmpt->height_ ||	  x + width > cmpt->width_ ||	  y + height > cmpt->height_) {		return -1;	}	if (!jas_matrix_numrows(data) || !jas_matrix_numcols(data)) {		return -1;	}	if (jas_matrix_numrows(data) != height || jas_matrix_numcols(data) != width) {		if (jas_matrix_resize(data, height, width)) {			return -1;		}	}	dr = jas_matrix_getref(data, 0, 0);	drs = jas_matrix_rowstep(data);	for (i = 0; i < height; ++i, dr += drs) {		d = dr;		if (jas_stream_seek(cmpt->stream_, (cmpt->width_ * (y + i) + x)		  * cmpt->cps_, SEEK_SET) < 0) {			return -1;		}		for (j = width; j > 0; --j, ++d) {			v = 0;			for (k = cmpt->cps_; k > 0; --k) {				if ((c = jas_stream_getc(cmpt->stream_)) == EOF) {					return -1;				}				v = (v << 8) | (c & 0xff);			}			*d = bitstoint(v, cmpt->prec_, cmpt->sgnd_);		}	}	return 0;}
int
jas_image_readcmpt(jas_image_t *image, int cmptno, jas_image_coord_t x,  jas_image_coord_t y, jas_image_coord_t width, jas_image_coord_t height,  jas_matrix_t *data)
jas_image_readcmpt
jas_image_t *image
jas_image_t
jas_image_t
*image
*
image
int cmptno
int
cmptno
cmptno
jas_image_coord_t x
jas_image_coord_t
jas_image_coord_t
x
x
jas_image_coord_t y
jas_image_coord_t
jas_image_coord_t
y
y
jas_image_coord_t width
jas_image_coord_t
jas_image_coord_t
width
width
jas_image_coord_t height
jas_image_coord_t
jas_image_coord_t
height
height
jas_matrix_t *data
jas_matrix_t
jas_matrix_t
*data
*
data
{	jas_image_cmpt_t *cmpt;	jas_image_coord_t i;	jas_image_coord_t j;	int k;	jas_seqent_t v;	int c;	jas_seqent_t *dr;	jas_seqent_t *d;	int drs;	JAS_DBGLOG(100, ("jas_image_readcmpt(%p, %d, %ld, %ld, %ld, %ld, %p)\n",	  image, cmptno, JAS_CAST(long, x), JAS_CAST(long, y),	  JAS_CAST(long, width), JAS_CAST(long, height), data));	if (cmptno < 0 || cmptno >= image->numcmpts_) {		return -1;	}	cmpt = image->cmpts_[cmptno];	if (x >= cmpt->width_ || y >= cmpt->height_ ||	  x + width > cmpt->width_ ||	  y + height > cmpt->height_) {		return -1;	}	if (!jas_matrix_numrows(data) || !jas_matrix_numcols(data)) {		return -1;	}	if (jas_matrix_numrows(data) != height || jas_matrix_numcols(data) != width) {		if (jas_matrix_resize(data, height, width)) {			return -1;		}	}	dr = jas_matrix_getref(data, 0, 0);	drs = jas_matrix_rowstep(data);	for (i = 0; i < height; ++i, dr += drs) {		d = dr;		if (jas_stream_seek(cmpt->stream_, (cmpt->width_ * (y + i) + x)		  * cmpt->cps_, SEEK_SET) < 0) {			return -1;		}		for (j = width; j > 0; --j, ++d) {			v = 0;			for (k = cmpt->cps_; k > 0; --k) {				if ((c = jas_stream_getc(cmpt->stream_)) == EOF) {					return -1;				}				v = (v << 8) | (c & 0xff);			}			*d = bitstoint(v, cmpt->prec_, cmpt->sgnd_);		}	}	return 0;}
jas_image_cmpt_t *cmpt;
jas_image_cmpt_t *cmpt;
jas_image_cmpt_t
jas_image_cmpt_t
*cmpt
*
cmpt
jas_image_coord_t i;
jas_image_coord_t i;
jas_image_coord_t
jas_image_coord_t
i
i
jas_image_coord_t j;
jas_image_coord_t j;
jas_image_coord_t
jas_image_coord_t
j
j
int k;
int k;
int
k
k
jas_seqent_t v;
jas_seqent_t v;
jas_seqent_t
jas_seqent_t
v
v
int c;
int c;
int
c
c
jas_seqent_t *dr;
jas_seqent_t *dr;
jas_seqent_t
jas_seqent_t
*dr
*
dr
jas_seqent_t *d;
jas_seqent_t *d;
jas_seqent_t
jas_seqent_t
*d
*
d
int drs;
int drs;
int
drs
drs
JAS_DBGLOG(100, ("jas_image_readcmpt(%p, %d, %ld, %ld, %ld, %ld, %p)\n",	  image, cmptno, JAS_CAST(long, x), JAS_CAST(long, y),	  JAS_CAST(long, width), JAS_CAST(long, height), data));
if (cmptno < 0 || cmptno >= image->numcmpts_) {		return -1;	}
cmptno < 0 || cmptno >= image->numcmpts_
cmptno < 0
cmptno
cmptno
0
cmptno >= image->numcmpts_
cmptno
cmptno
image->numcmpts_
image
image
numcmpts_
{		return -1;	}
return -1;
-1
1
cmpt = image->cmpts_[cmptno];
cmpt = image->cmpts_[cmptno]
cmpt
cmpt
image->cmpts_[cmptno]
image->cmpts_
image
image
cmpts_
cmptno
cmptno
if (x >= cmpt->width_ || y >= cmpt->height_ ||	  x + width > cmpt->width_ ||	  y + height > cmpt->height_) {		return -1;	}
x >= cmpt->width_ || y >= cmpt->height_ ||	  x + width > cmpt->width_ ||	  y + height > cmpt->height_
x >= cmpt->width_ || y >= cmpt->height_ ||	  x + width > cmpt->width_
x >= cmpt->width_ || y >= cmpt->height_
x >= cmpt->width_
x
x
cmpt->width_
cmpt
cmpt
width_
y >= cmpt->height_
y
y
cmpt->height_
cmpt
cmpt
height_
x + width > cmpt->width_
x + width
x
x
width
width
cmpt->width_
cmpt
cmpt
width_
y + height > cmpt->height_
y + height
y
y
height
height
cmpt->height_
cmpt
cmpt
height_
{		return -1;	}
return -1;
-1
1
if (!jas_matrix_numrows(data) || !jas_matrix_numcols(data)) {		return -1;	}
!jas_matrix_numrows(data) || !jas_matrix_numcols(data)
!jas_matrix_numrows(data)
jas_matrix_numrows(data)
jas_matrix_numrows
jas_matrix_numrows
data
data
!jas_matrix_numcols(data)
jas_matrix_numcols(data)
jas_matrix_numcols
jas_matrix_numcols
data
data
{		return -1;	}
return -1;
-1
1
if (jas_matrix_numrows(data) != height || jas_matrix_numcols(data) != width) {		if (jas_matrix_resize(data, height, width)) {			return -1;		}	}
jas_matrix_numrows(data) != height || jas_matrix_numcols(data) != width
jas_matrix_numrows(data) != height
jas_matrix_numrows(data)
jas_matrix_numrows
jas_matrix_numrows
data
data
height
height
jas_matrix_numcols(data) != width
jas_matrix_numcols(data)
jas_matrix_numcols
jas_matrix_numcols
data
data
width
width
{		if (jas_matrix_resize(data, height, width)) {			return -1;		}	}
if (jas_matrix_resize(data, height, width)) {			return -1;		}
jas_matrix_resize(data, height, width)
jas_matrix_resize
jas_matrix_resize
data
data
height
height
width
width
{			return -1;		}
return -1;
-1
1
dr = jas_matrix_getref(data, 0, 0);
dr = jas_matrix_getref(data, 0, 0)
dr
dr
jas_matrix_getref(data, 0, 0)
jas_matrix_getref
jas_matrix_getref
data
data
0
0
drs = jas_matrix_rowstep(data);
drs = jas_matrix_rowstep(data)
drs
drs
jas_matrix_rowstep(data)
jas_matrix_rowstep
jas_matrix_rowstep
data
data
for (i = 0; i < height; ++i, dr += drs) {		d = dr;		if (jas_stream_seek(cmpt->stream_, (cmpt->width_ * (y + i) + x)		  * cmpt->cps_, SEEK_SET) < 0) {			return -1;		}		for (j = width; j > 0; --j, ++d) {			v = 0;			for (k = cmpt->cps_; k > 0; --k) {				if ((c = jas_stream_getc(cmpt->stream_)) == EOF) {					return -1;				}				v = (v << 8) | (c & 0xff);			}			*d = bitstoint(v, cmpt->prec_, cmpt->sgnd_);		}	}
i = 0;
i = 0
i
i
0
i < height
i
i
height
height
++i, dr += drs
++i
i
i
dr += drs
dr
dr
drs
drs
{		d = dr;		if (jas_stream_seek(cmpt->stream_, (cmpt->width_ * (y + i) + x)		  * cmpt->cps_, SEEK_SET) < 0) {			return -1;		}		for (j = width; j > 0; --j, ++d) {			v = 0;			for (k = cmpt->cps_; k > 0; --k) {				if ((c = jas_stream_getc(cmpt->stream_)) == EOF) {					return -1;				}				v = (v << 8) | (c & 0xff);			}			*d = bitstoint(v, cmpt->prec_, cmpt->sgnd_);		}	}
d = dr;
d = dr
d
d
dr
dr
if (jas_stream_seek(cmpt->stream_, (cmpt->width_ * (y + i) + x)		  * cmpt->cps_, SEEK_SET) < 0) {			return -1;		}
jas_stream_seek(cmpt->stream_, (cmpt->width_ * (y + i) + x)		  * cmpt->cps_, SEEK_SET) < 0
jas_stream_seek(cmpt->stream_, (cmpt->width_ * (y + i) + x)		  * cmpt->cps_, SEEK_SET)
jas_stream_seek
jas_stream_seek
cmpt->stream_
cmpt
cmpt
stream_
(cmpt->width_ * (y + i) + x)		  * cmpt->cps_
(cmpt->width_ * (y + i) + x)
cmpt->width_ * (y + i) + x
cmpt->width_ * (y + i)
cmpt->width_
cmpt
cmpt
width_
(y + i)
y + i
y
y
i
i
x
x
cmpt->cps_
cmpt
cmpt
cps_
SEEK_SET
SEEK_SET
0
{			return -1;		}
return -1;
-1
1
for (j = width; j > 0; --j, ++d) {			v = 0;			for (k = cmpt->cps_; k > 0; --k) {				if ((c = jas_stream_getc(cmpt->stream_)) == EOF) {					return -1;				}				v = (v << 8) | (c & 0xff);			}			*d = bitstoint(v, cmpt->prec_, cmpt->sgnd_);		}
j = width;
j = width
j
j
width
width
j > 0
j
j
0
--j, ++d
--j
j
j
++d
d
d
{			v = 0;			for (k = cmpt->cps_; k > 0; --k) {				if ((c = jas_stream_getc(cmpt->stream_)) == EOF) {					return -1;				}				v = (v << 8) | (c & 0xff);			}			*d = bitstoint(v, cmpt->prec_, cmpt->sgnd_);		}
v = 0;
v = 0
v
v
0
for (k = cmpt->cps_; k > 0; --k) {				if ((c = jas_stream_getc(cmpt->stream_)) == EOF) {					return -1;				}				v = (v << 8) | (c & 0xff);			}
k = cmpt->cps_;
k = cmpt->cps_
k
k
cmpt->cps_
cmpt
cmpt
cps_
k > 0
k
k
0
--k
k
k
{				if ((c = jas_stream_getc(cmpt->stream_)) == EOF) {					return -1;				}				v = (v << 8) | (c & 0xff);			}
if ((c = jas_stream_getc(cmpt->stream_)) == EOF) {					return -1;				}
(c = jas_stream_getc(cmpt->stream_)) == EOF
(c = jas_stream_getc(cmpt->stream_))
c = jas_stream_getc(cmpt->stream_)
c
c
jas_stream_getc(cmpt->stream_)
jas_stream_getc
jas_stream_getc
cmpt->stream_
cmpt
cmpt
stream_
EOF
EOF
{					return -1;				}
return -1;
-1
1
v = (v << 8) | (c & 0xff);
v = (v << 8) | (c & 0xff)
v
v
(v << 8) | (c & 0xff)
(v << 8)
v << 8
v
v
8
(c & 0xff)
c & 0xff
c
c
0xff
*d = bitstoint(v, cmpt->prec_, cmpt->sgnd_);
*d = bitstoint(v, cmpt->prec_, cmpt->sgnd_)
*d
d
d
bitstoint(v, cmpt->prec_, cmpt->sgnd_)
bitstoint
bitstoint
v
v
cmpt->prec_
cmpt
cmpt
prec_
cmpt->sgnd_
cmpt
cmpt
sgnd_
return 0;
0
-----joern-----
(12,72,0)
(105,59,0)
(31,87,0)
(97,88,0)
(148,8,0)
(97,72,0)
(20,59,0)
(117,132,0)
(5,14,0)
(138,59,0)
(16,81,0)
(127,155,0)
(35,58,0)
(152,59,0)
(79,87,0)
(44,59,0)
(23,62,0)
(21,133,0)
(121,57,0)
(113,11,0)
(94,132,0)
(15,130,0)
(45,109,0)
(27,57,0)
(97,124,0)
(56,100,0)
(56,15,0)
(64,92,0)
(74,106,0)
(31,11,0)
(14,29,0)
(105,69,0)
(49,152,0)
(37,106,0)
(62,23,0)
(8,52,0)
(27,28,0)
(43,44,0)
(119,35,0)
(153,59,0)
(47,28,0)
(44,37,0)
(40,56,0)
(30,47,0)
(105,109,0)
(125,59,0)
(37,121,0)
(48,31,0)
(147,107,0)
(9,59,0)
(1,62,0)
(138,66,0)
(93,65,0)
(58,44,0)
(105,72,0)
(98,59,0)
(41,15,0)
(154,49,0)
(17,153,0)
(17,44,0)
(68,114,0)
(81,94,0)
(73,37,0)
(153,17,0)
(28,47,0)
(105,81,0)
(22,81,0)
(99,125,0)
(69,152,0)
(58,35,0)
(134,27,0)
(107,114,0)
(32,121,0)
(101,30,0)
(129,49,0)
(82,109,0)
(18,133,0)
(89,51,0)
(30,44,0)
(131,97,0)
(35,133,0)
(108,11,0)
(120,8,0)
(74,63,0)
(4,30,0)
(143,124,0)
(92,20,0)
(37,44,0)
(94,59,0)
(141,53,0)
(54,87,0)
(142,3,0)
(51,107,0)
(97,69,0)
(92,44,0)
(28,27,0)
(36,69,0)
(105,88,0)
(80,14,0)
(149,59,0)
(61,15,0)
(65,130,0)
(102,155,0)
(109,148,0)
(144,110,0)
(72,153,0)
(118,47,0)
(152,49,0)
(31,111,0)
(97,109,0)
(116,27,0)
(150,88,0)
(155,44,0)
(87,133,0)
(62,145,0)
(97,99,0)
(31,107,0)
(84,28,0)
(135,133,0)
(71,0,0)
(85,69,0)
(137,17,0)
(66,44,0)
(42,87,0)
(19,59,0)
(110,145,0)
(132,94,0)
(151,99,0)
(124,20,0)
(34,87,0)
(97,0,0)
(131,105,0)
(18,57,0)
(14,44,0)
(10,66,0)
(88,138,0)
(103,110,0)
(38,62,0)
(95,97,0)
(33,95,0)
(18,3,0)
(25,65,0)
(136,58,0)
(62,57,0)
(47,63,0)
(26,17,0)
(78,101,0)
(148,59,0)
(107,18,0)
(110,106,0)
(58,47,0)
(87,3,0)
(87,31,0)
(49,44,0)
(97,81,0)
(76,2,0)
(13,3,0)
(55,74,0)
(18,106,0)
(115,59,0)
(65,107,0)
(15,56,0)
(50,75,0)
(66,138,0)
(112,58,0)
(87,145,0)
(155,125,0)
(70,51,0)
(77,18,0)
(146,99,0)
(30,101,0)
(105,124,0)
(0,29,0)
(125,155,0)
(8,148,0)
(67,88,0)
(97,24,0)
(75,133,0)
(2,3,0)
(139,18,0)
(87,114,0)
(91,92,0)
(128,31,0)
(126,72,0)
(46,18,0)
(39,66,0)
(83,18,0)
(105,99,0)
(101,3,0)
(20,92,0)
(90,59,0)
(11,122,0)
(86,121,0)
(140,0,0)
(29,14,0)
(105,0,0)
(104,124,0)
(6,23,0)
(29,59,0)
(60,30,0)
(96,59,0)
(87,57,0)
(28,106,0)
(121,37,0)
(7,59,0)
(132,52,0)
(18,107,0)
(31,56,0)
(123,105,0)
(155,102,1)
(45,82,1)
(144,62,1)
(27,57,1)
(97,95,1)
(2,3,1)
(2,76,1)
(87,145,1)
(80,5,1)
(101,3,1)
(31,11,1)
(6,38,1)
(36,85,1)
(4,60,1)
(105,109,1)
(37,121,1)
(37,73,1)
(79,65,1)
(105,72,1)
(64,91,1)
(110,106,1)
(15,61,1)
(5,0,1)
(41,40,1)
(16,29,1)
(97,88,1)
(132,117,1)
(40,65,1)
(31,107,1)
(108,113,1)
(137,72,1)
(20,92,1)
(105,88,1)
(95,33,1)
(30,44,1)
(105,123,1)
(21,47,1)
(104,143,1)
(88,150,1)
(97,72,1)
(37,106,1)
(8,120,1)
(11,108,1)
(101,30,1)
(107,18,1)
(112,119,1)
(56,15,1)
(110,103,1)
(31,128,1)
(23,6,1)
(18,133,1)
(152,49,1)
(124,104,1)
(86,43,1)
(58,136,1)
(135,21,1)
(138,66,1)
(89,107,1)
(71,138,1)
(97,0,1)
(51,70,1)
(70,89,1)
(58,44,1)
(93,25,1)
(28,27,1)
(94,132,1)
(121,57,1)
(47,28,1)
(105,81,1)
(121,32,1)
(18,139,1)
(83,77,1)
(17,44,1)
(97,69,1)
(65,93,1)
(72,12,1)
(133,135,1)
(78,3,1)
(34,54,1)
(75,50,1)
(82,94,1)
(113,51,1)
(50,101,1)
(31,111,1)
(146,44,1)
(8,52,1)
(87,31,1)
(26,137,1)
(78,2,1)
(65,107,1)
(49,154,1)
(27,116,1)
(25,51,1)
(31,56,1)
(62,23,1)
(102,127,1)
(105,99,1)
(85,125,1)
(30,4,1)
(75,133,1)
(127,99,1)
(119,133,1)
(33,62,1)
(44,37,1)
(131,105,1)
(126,152,1)
(28,106,1)
(99,151,1)
(62,145,1)
(49,44,1)
(60,78,1)
(97,124,1)
(153,17,1)
(66,44,1)
(147,101,1)
(139,46,1)
(54,79,1)
(136,112,1)
(148,8,1)
(14,44,1)
(66,10,1)
(58,47,1)
(55,110,1)
(3,142,1)
(15,130,1)
(103,144,1)
(123,35,1)
(46,83,1)
(140,71,1)
(117,81,1)
(132,52,1)
(92,64,1)
(74,106,1)
(0,140,1)
(38,1,1)
(105,69,1)
(18,106,1)
(155,44,1)
(84,27,1)
(131,97,1)
(67,20,1)
(150,67,1)
(97,81,1)
(97,99,1)
(61,41,1)
(74,55,1)
(35,133,1)
(92,44,1)
(143,153,1)
(142,13,1)
(30,47,1)
(42,34,1)
(79,11,1)
(119,75,1)
(12,126,1)
(97,109,1)
(128,48,1)
(69,36,1)
(48,42,1)
(76,87,1)
(65,130,1)
(17,26,1)
(109,45,1)
(13,35,1)
(32,86,1)
(77,147,1)
(87,57,1)
(29,14,1)
(21,110,1)
(154,129,1)
(14,80,1)
(1,148,1)
(28,84,1)
(39,88,1)
(120,109,1)
(79,56,1)
(73,121,1)
(81,22,1)
(10,39,1)
(129,69,1)
(105,0,1)
(35,58,1)
(62,57,1)
(105,124,1)
(18,3,1)
(110,145,1)
(116,134,1)
(51,107,1)
(87,3,1)
(18,57,1)
(87,133,1)
(91,124,1)
(118,74,1)
(125,155,1)
(22,16,1)
(151,146,1)
(134,118,1)
(119,35,2)
(79,101,2)
(97,81,2)
(136,35,2)
(2,101,2)
(148,8,2)
(28,106,2)
(70,101,2)
(40,65,2)
(105,81,2)
(31,56,2)
(17,44,2)
(135,62,2)
(97,99,2)
(101,101,2)
(56,65,2)
(47,110,2)
(47,28,2)
(87,133,2)
(78,101,2)
(18,3,2)
(31,107,2)
(34,101,2)
(105,109,2)
(97,88,2)
(4,101,2)
(94,132,2)
(131,105,2)
(87,101,2)
(58,62,2)
(15,65,2)
(61,65,2)
(76,101,2)
(134,110,2)
(66,44,2)
(131,97,2)
(147,101,2)
(62,23,2)
(33,62,2)
(105,62,2)
(97,0,2)
(8,52,2)
(13,35,2)
(107,101,2)
(78,35,2)
(30,44,2)
(112,35,2)
(110,106,2)
(97,62,2)
(29,14,2)
(89,101,2)
(18,133,2)
(18,57,2)
(56,15,2)
(105,0,2)
(58,44,2)
(30,35,2)
(31,11,2)
(105,124,2)
(105,99,2)
(28,27,2)
(84,110,2)
(142,35,2)
(62,57,2)
(25,51,2)
(97,124,2)
(2,3,2)
(11,51,2)
(18,106,2)
(4,35,2)
(77,101,2)
(105,69,2)
(49,44,2)
(14,44,2)
(87,3,2)
(37,106,2)
(152,49,2)
(108,51,2)
(65,107,2)
(110,145,2)
(74,110,2)
(65,130,2)
(101,35,2)
(60,101,2)
(60,35,2)
(116,110,2)
(62,145,2)
(65,51,2)
(101,30,2)
(155,44,2)
(75,133,2)
(105,88,2)
(37,121,2)
(97,72,2)
(132,52,2)
(21,62,2)
(46,101,2)
(119,62,2)
(153,17,2)
(30,101,2)
(48,101,2)
(133,62,2)
(35,133,2)
(54,101,2)
(35,62,2)
(87,31,2)
(83,101,2)
(128,101,2)
(55,110,2)
(42,101,2)
(118,110,2)
(75,35,2)
(125,155,2)
(144,62,2)
(30,47,2)
(27,57,2)
(35,58,2)
(113,51,2)
(15,130,2)
(27,110,2)
(28,110,2)
(92,44,2)
(3,35,2)
(18,101,2)
(51,101,2)
(58,47,2)
(103,62,2)
(121,57,2)
(93,51,2)
(20,92,2)
(35,35,2)
(41,65,2)
(97,69,2)
(139,101,2)
(97,109,2)
(51,107,2)
(74,106,2)
(136,62,2)
(138,66,2)
(95,62,2)
(105,72,2)
(101,3,2)
(31,111,2)
(107,18,2)
(31,101,2)
(58,35,2)
(50,35,2)
(87,57,2)
(110,62,2)
(87,145,2)
(44,37,2)
(112,62,2)
(123,62,2)
-----------------------------------
(0,cmptparms.height)
(1,image)
(2,++i)
(3,i = 0)
(4,width_)
(5,cmpt)
(6,cmptparms)
(7,cmptparms)
(8,JAS_IMAGE_CDT_GETSGND(dtype)
(9,j)
(10,width_)
(11,v = 0)
(12,hstep)
(13,i)
(14,cmpt->height_)
(15,numlutents - 1)
(16,cmptparms)
(17,cmpt->hstep_)
(18,jas_image_readcmptsample(image, cmptno, i, j)
(19,if (jas_image_addcmpt(image, newcmptno, &cmptparms)
(20,cmptparms.vstep = cmpt->vstep_)
(21,j)
(22,prec)
(23,&cmptparms)
(24,)
(25,v)
(26,hstep_)
(27,image->cmpts_)
(28,image->cmpts_[cmptno])
(29,cmptparms.height = cmpt->height_)
(30,cmpt->width_)
(31,lutents[v])
(32,cmpts_)
(33,1)
(34,i)
(35,j < cmpt->height_)
(36,tly)
(37,image->cmpts_[cmptno])
(38,newcmptno)
(39,cmpt)
(40,v)
(41,numlutents)
(42,j)
(43,cmpt)
(44,cmpt = image->cmpts_[cmptno])
(45,sgnd)
(46,i)
(47,cmpt = image->cmpts_[cmptno])
(48,lutents)
(49,cmpt->tly_)
(50,j)
(51,v < 0)
(52,int dtype)
(53,)
(54,newcmptno)
(55,cmptno)
(56,v = numlutents - 1)
(57,jas_image_t *image)
(58,cmpt->height_)
(59,)
(60,cmpt)
(61,1)
(62,jas_image_addcmpt(image, newcmptno, &cmptparms)
(63,)
(64,vstep_)
(65,v >= numlutents)
(66,cmpt->width_)
(67,cmptparms)
(68,if (v < 0)
(69,cmptparms.tly)
(70,0)
(71,cmptparms)
(72,cmptparms.hstep)
(73,cmptno)
(74,++cmptno)
(75,++j)
(76,i)
(77,image)
(78,i)
(79,image)
(80,height_)
(81,cmptparms.prec)
(82,cmptparms)
(83,cmptno)
(84,cmptno)
(85,cmptparms)
(86,image)
(87,jas_image_writecmptsample(image, newcmptno, i, j,\\n\\t\\t\\t  lutents[v])
(88,cmptparms.width)
(89,v)
(90,v)
(91,cmpt)
(92,cmpt->vstep_)
(93,numlutents)
(94,cmptparms.prec = JAS_IMAGE_CDT_GETPREC(dtype)
(95,-1)
(96,if (newcmptno <= cmptno)
(97,return -1;)
(98,for (j = 0; j < cmpt->height_; ++j)
(99,cmptparms.tlx)
(100,)
(101,i < cmpt->width_)
(102,tlx_)
(103,cmptno)
(104,vstep)
(105,return 0;)
(106,int cmptno)
(107,v = jas_image_readcmptsample(image, cmptno, i, j)
(108,0)
(109,cmptparms.sgnd)
(110,newcmptno <= cmptno)
(111,int_fast32_t *lutents)
(112,cmpt)
(113,v)
(114,)
(115,i)
(116,cmpts_)
(117,dtype)
(118,cmpt)
(119,j)
(120,dtype)
(121,image->cmpts_)
(122,)
(123,0)
(124,cmptparms.vstep)
(125,cmptparms.tlx = cmpt->tlx_)
(126,cmptparms)
(127,cmpt)
(128,v)
(129,cmpt)
(130,int numlutents)
(131,RET)
(132,JAS_IMAGE_CDT_GETPREC(dtype)
(133,j = 0)
(134,image)
(135,0)
(136,height_)
(137,cmpt)
(138,cmptparms.width = cmpt->width_)
(139,j)
(140,height)
(141,for (i = 0; i < cmpt->width_; ++i)
(142,0)
(143,cmptparms)
(144,newcmptno)
(145,int newcmptno)
(146,cmptparms)
(147,v)
(148,cmptparms.sgnd = JAS_IMAGE_CDT_GETSGND(dtype)
(149,cmpt)
(150,width)
(151,tlx)
(152,cmptparms.tly = cmpt->tly_)
(153,cmptparms.hstep = cmpt->hstep_)
(154,tly_)
(155,cmpt->tlx_)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
