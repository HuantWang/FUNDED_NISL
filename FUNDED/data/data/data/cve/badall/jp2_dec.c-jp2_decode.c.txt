-----label-----
1
-----code-----
int jp2_validate(jas_stream_t *in)
{
	char buf[JP2_VALIDATELEN];
	int i;
	int n;
#if 0
	jas_stream_t *tmpstream;
	jp2_box_t *box;
#endif

	assert(JAS_STREAM_MAXPUTBACK >= JP2_VALIDATELEN);

	/* Read the validation data (i.e., the data used for detecting
	  the format). */
	if ((n = jas_stream_read(in, buf, JP2_VALIDATELEN)) < 0) {
		return -1;
	}

	/* Put the validation data back onto the stream, so that the
	  stream position will not be changed. */
	for (i = n - 1; i >= 0; --i) {
		if (jas_stream_ungetc(in, buf[i]) == EOF) {
			return -1;
		}
	}

	/* Did we read enough data? */
	if (n < JP2_VALIDATELEN) {
		return -1;
	}

	/* Is the box type correct? */
	if (((buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7]) !=
	  JP2_BOX_JP)
	{
		return -1;
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
15,16
15,17
17,18
18,19
20,21
21,22
21,23
23,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
45,48
45,49
46,47
48,49
50,51
52,53
55,56
56,57
57,58
59,60
59,61
59,62
59,63
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
72,73
73,74
75,76
76,77
76,78
77,78
77,79
78,79
78,80
78,81
79,80
81,82
83,84
83,85
84,85
86,87
88,89
90,91
91,92
92,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
101,102
102,103
104,105
104,106
105,106
105,107
106,107
107,108
107,109
108,109
108,110
109,110
109,111
110,111
111,112
111,113
112,113
112,114
113,114
117,118
118,119
118,120
119,120
119,121
120,121
124,125
125,126
125,127
126,127
126,128
127,128
131,132
131,133
132,133
135,136
137,138
138,139
139,140
141,142
-----nextToken-----
2,4,7,9,10,14,16,19,22,24,27,29,33,36,38,44,47,49,51,53,54,58,63,66,67,70,71,74,80,82,85,87,89,93,97,99,103,114,115,116,121,122,123,128,129,130,133,134,136,140,142
-----computeFrom-----
34,35
34,36
40,41
40,42
42,43
42,44
61,62
61,63
64,65
64,66
68,69
68,70
77,78
77,79
95,96
95,97
105,106
105,107
107,108
107,109
108,109
108,110
109,110
109,111
111,112
111,113
118,119
118,120
125,126
125,127
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int jp2_validate(jas_stream_t *in){	char buf[JP2_VALIDATELEN];	int i;	int n;#if 0	jas_stream_t *tmpstream;	jp2_box_t *box;#endif	assert(JAS_STREAM_MAXPUTBACK >= JP2_VALIDATELEN);	/* Read the validation data (i.e., the data used for detecting	  the format). */	if ((n = jas_stream_read(in, buf, JP2_VALIDATELEN)) < 0) {		return -1;	}	/* Put the validation data back onto the stream, so that the	  stream position will not be changed. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < JP2_VALIDATELEN) {		return -1;	}	/* Is the box type correct? */	if (((buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7]) !=	  JP2_BOX_JP)	{		return -1;	}	return 0;}
int
jp2_validate(jas_stream_t *in)
jp2_validate
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	char buf[JP2_VALIDATELEN];	int i;	int n;#if 0	jas_stream_t *tmpstream;	jp2_box_t *box;#endif	assert(JAS_STREAM_MAXPUTBACK >= JP2_VALIDATELEN);	/* Read the validation data (i.e., the data used for detecting	  the format). */	if ((n = jas_stream_read(in, buf, JP2_VALIDATELEN)) < 0) {		return -1;	}	/* Put the validation data back onto the stream, so that the	  stream position will not be changed. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < JP2_VALIDATELEN) {		return -1;	}	/* Is the box type correct? */	if (((buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7]) !=	  JP2_BOX_JP)	{		return -1;	}	return 0;}
char buf[JP2_VALIDATELEN];
char buf[JP2_VALIDATELEN];
char
buf[JP2_VALIDATELEN]
buf
[JP2_VALIDATELEN]
JP2_VALIDATELEN
JP2_VALIDATELEN
int i;
int i;
int
i
i
int n;
int n;
int
n
n
assert(JAS_STREAM_MAXPUTBACK >= JP2_VALIDATELEN);
assert(JAS_STREAM_MAXPUTBACK >= JP2_VALIDATELEN)
assert
assert
JAS_STREAM_MAXPUTBACK >= JP2_VALIDATELEN
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
JP2_VALIDATELEN
JP2_VALIDATELEN
if ((n = jas_stream_read(in, buf, JP2_VALIDATELEN)) < 0) {		return -1;	}
(n = jas_stream_read(in, buf, JP2_VALIDATELEN)) < 0
(n = jas_stream_read(in, buf, JP2_VALIDATELEN))
n = jas_stream_read(in, buf, JP2_VALIDATELEN)
n
n
jas_stream_read(in, buf, JP2_VALIDATELEN)
jas_stream_read
jas_stream_read
in
in
buf
buf
JP2_VALIDATELEN
JP2_VALIDATELEN
0
{		return -1;	}
return -1;
-1
1
for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
i = n - 1;
i = n - 1
i
i
n - 1
n
n
1
i >= 0
i
i
0
--i
i
i
{		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}
jas_stream_ungetc(in, buf[i]) == EOF
jas_stream_ungetc(in, buf[i])
jas_stream_ungetc
jas_stream_ungetc
in
in
buf[i]
buf
buf
i
i
EOF
EOF
{			return -1;		}
return -1;
-1
1
if (n < JP2_VALIDATELEN) {		return -1;	}
n < JP2_VALIDATELEN
n
n
JP2_VALIDATELEN
JP2_VALIDATELEN
{		return -1;	}
return -1;
-1
1
if (((buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7]) !=	  JP2_BOX_JP)	{		return -1;	}
((buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7]) !=	  JP2_BOX_JP
((buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7])
(buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7]
(buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8)
(buf[4] << 24) | (buf[5] << 16)
(buf[4] << 24)
buf[4] << 24
buf[4]
buf
buf
4
24
(buf[5] << 16)
buf[5] << 16
buf[5]
buf
buf
5
16
(buf[6] << 8)
buf[6] << 8
buf[6]
buf
buf
6
8
buf[7]
buf
buf
7
JP2_BOX_JP
JP2_BOX_JP
{		return -1;	}
return -1;
-1
1
return 0;
0
-----joern-----
(21,68,0)
(24,54,0)
(53,72,0)
(67,46,0)
(17,18,0)
(26,11,0)
(84,21,0)
(77,44,0)
(51,76,0)
(13,72,0)
(32,84,0)
(15,75,0)
(74,57,0)
(8,6,0)
(10,53,0)
(82,50,0)
(34,72,0)
(23,47,0)
(14,76,0)
(44,37,0)
(60,71,0)
(25,11,0)
(85,76,0)
(66,46,0)
(56,44,0)
(42,76,0)
(11,73,0)
(83,76,0)
(49,58,0)
(46,66,0)
(35,53,0)
(39,56,0)
(24,22,0)
(62,16,0)
(65,29,0)
(59,34,0)
(49,3,0)
(48,28,0)
(73,37,0)
(58,86,0)
(78,16,0)
(22,61,0)
(16,78,0)
(2,79,0)
(50,82,0)
(72,71,0)
(3,70,0)
(29,58,0)
(37,73,0)
(6,16,0)
(45,82,0)
(1,25,0)
(16,6,0)
(71,24,0)
(63,56,0)
(44,56,0)
(27,78,0)
(28,24,0)
(7,18,0)
(16,61,0)
(52,36,0)
(7,50,0)
(49,31,0)
(73,7,0)
(36,31,0)
(81,78,0)
(54,24,0)
(9,54,0)
(37,44,0)
(55,50,0)
(4,28,0)
(69,22,0)
(40,22,0)
(11,25,0)
(80,24,0)
(12,82,0)
(66,76,0)
(37,57,0)
(41,22,0)
(50,7,0)
(19,76,0)
(75,3,0)
(71,72,0)
(49,21,0)
(64,57,0)
(57,37,0)
(43,76,0)
(5,76,0)
(18,7,0)
(7,73,0)
(38,76,0)
(47,76,0)
(78,72,0)
(0,46,0)
(33,71,0)
(31,20,0)
(49,47,0)
(30,25,0)
(73,11,0)
(22,24,0)
(18,17,1)
(37,57,1)
(66,46,1)
(10,35,1)
(0,67,1)
(34,72,1)
(81,62,1)
(49,3,1)
(41,80,1)
(44,77,1)
(23,18,1)
(69,41,1)
(28,48,1)
(40,69,1)
(24,22,1)
(25,30,1)
(49,58,1)
(56,39,1)
(28,24,1)
(13,54,1)
(17,7,1)
(18,7,1)
(32,28,1)
(53,72,1)
(34,59,1)
(46,0,1)
(6,8,1)
(22,40,1)
(9,24,1)
(71,33,1)
(54,9,1)
(49,47,1)
(62,53,1)
(16,61,1)
(33,60,1)
(73,37,1)
(6,16,1)
(53,10,1)
(47,23,1)
(4,53,1)
(49,21,1)
(11,26,1)
(60,13,1)
(50,82,1)
(64,74,1)
(71,24,1)
(75,15,1)
(54,24,1)
(31,36,1)
(63,11,1)
(29,65,1)
(58,29,1)
(78,72,1)
(35,72,1)
(11,25,1)
(45,28,1)
(26,25,1)
(27,81,1)
(37,44,1)
(74,44,1)
(52,18,1)
(49,31,1)
(36,52,1)
(12,45,1)
(50,55,1)
(73,11,1)
(48,4,1)
(77,56,1)
(65,54,1)
(44,56,1)
(15,6,1)
(72,71,1)
(80,66,1)
(78,27,1)
(35,34,1)
(30,1,1)
(55,82,1)
(7,73,1)
(7,50,1)
(84,32,1)
(1,50,1)
(8,16,1)
(3,75,1)
(16,78,1)
(39,63,1)
(22,61,1)
(59,6,1)
(21,84,1)
(82,12,1)
(57,64,1)
(16,61,2)
(57,28,2)
(71,54,2)
(28,53,2)
(73,28,2)
(64,28,2)
(50,82,2)
(23,18,2)
(4,53,2)
(16,78,2)
(81,53,2)
(10,6,2)
(28,24,2)
(6,53,2)
(12,28,2)
(72,71,2)
(56,28,2)
(32,28,2)
(53,72,2)
(1,28,2)
(50,28,2)
(78,53,2)
(11,25,2)
(53,54,2)
(7,28,2)
(49,3,2)
(77,28,2)
(49,21,2)
(3,6,2)
(82,28,2)
(31,18,2)
(7,73,2)
(10,54,2)
(24,22,2)
(26,28,2)
(71,24,2)
(53,6,2)
(35,54,2)
(29,54,2)
(27,53,2)
(35,6,2)
(7,50,2)
(13,54,2)
(49,47,2)
(65,54,2)
(66,46,2)
(11,28,2)
(49,58,2)
(49,31,2)
(15,6,2)
(33,54,2)
(44,28,2)
(62,53,2)
(34,6,2)
(75,6,2)
(37,28,2)
(30,28,2)
(6,16,2)
(39,28,2)
(18,7,2)
(22,61,2)
(84,28,2)
(74,28,2)
(60,54,2)
(58,54,2)
(45,28,2)
(48,53,2)
(59,6,2)
(78,72,2)
(44,56,2)
(73,37,2)
(72,54,2)
(73,11,2)
(16,53,2)
(37,57,2)
(55,28,2)
(54,24,2)
(25,28,2)
(37,44,2)
(52,18,2)
(47,18,2)
(8,53,2)
(17,28,2)
(18,28,2)
(34,72,2)
(21,28,2)
(63,28,2)
(36,18,2)
-----------------------------------
(0,JP2_VALIDATELEN)
(1,buf)
(2,if (jas_stream_ungetc(in, buf[i])
(3,return -1;)
(4,n)
(5,if (((buf[4] << 24)
(6,jas_stream_ungetc(in, buf[i])
(7,(buf[4] << 24)
(8,EOF)
(9,0)
(10,0)
(11,buf[5] << 16)
(12,4)
(13,i)
(14,buf)
(15,1)
(16,jas_stream_ungetc(in, buf[i])
(17,JP2_BOX_JP)
(18,((buf[4] << 24)
(19,n)
(20,)
(21,return -1;)
(22,jas_stream_read(in, buf, JP2_VALIDATELEN)
(23,0)
(24,n = jas_stream_read(in, buf, JP2_VALIDATELEN)
(25,buf[5])
(26,16)
(27,i)
(28,n < JP2_VALIDATELEN)
(29,-1)
(30,5)
(31,return -1;)
(32,1)
(33,1)
(34,--i)
(35,i)
(36,-1)
(37,(buf[6] << 8)
(38,i)
(39,6)
(40,JP2_VALIDATELEN)
(41,in)
(42,if (n < JP2_VALIDATELEN)
(43,tmpstream)
(44,buf[6] << 8)
(45,buf)
(46,JAS_STREAM_MAXPUTBACK >= JP2_VALIDATELEN)
(47,return 0;)
(48,JP2_VALIDATELEN)
(49,RET)
(50,buf[4] << 24)
(51,box)
(52,1)
(53,i >= 0)
(54,(n = jas_stream_read(in, buf, JP2_VALIDATELEN)
(55,24)
(56,buf[6])
(57,buf[7])
(58,return -1;)
(59,i)
(60,n)
(61,jas_stream_t *in)
(62,in)
(63,buf)
(64,7)
(65,1)
(66,assert(JAS_STREAM_MAXPUTBACK >= JP2_VALIDATELEN)
(67,JAS_STREAM_MAXPUTBACK)
(68,)
(69,buf)
(70,)
(71,n - 1)
(72,i = n - 1)
(73,(buf[5] << 16)
(74,buf)
(75,-1)
(76,)
(77,8)
(78,buf[i])
(79,)
(80,n)
(81,buf)
(82,buf[4])
(83,for (i = n - 1; i >= 0; --i)
(84,-1)
(85,if ((n = jas_stream_read(in, buf, JP2_VALIDATELEN)
(86,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
