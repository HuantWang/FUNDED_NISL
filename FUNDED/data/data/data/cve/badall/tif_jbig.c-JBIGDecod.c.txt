-----label-----
1
-----code-----
static int JBIGDecode(TIFF* tif, uint8* buffer, tmsize_t size, uint16 s)
{
	struct jbg_dec_state decoder;
	int decodeStatus = 0;
	unsigned char* pImage = NULL;
	(void) size, (void) s;

	if (isFillOrder(tif, tif->tif_dir.td_fillorder))
	{
		TIFFReverseBits(tif->tif_rawdata, tif->tif_rawdatasize);
	}

	jbg_dec_init(&decoder);

#if defined(HAVE_JBG_NEWLEN)
	jbg_newlen(tif->tif_rawdata, (size_t)tif->tif_rawdatasize);
	/*
	 * I do not check the return status of jbg_newlen because even if this
	 * function fails it does not necessarily mean that decoding the image
	 * will fail.  It is generally only needed for received fax images
	 * that do not contain the actual length of the image in the BIE
	 * header.  I do not log when an error occurs because that will cause
	 * problems when converting JBIG encoded TIFF's to
	 * PostScript.  As long as the actual image length is contained in the
	 * BIE header jbg_dec_in should succeed.
	 */
#endif /* HAVE_JBG_NEWLEN */

	decodeStatus = jbg_dec_in(&decoder, (unsigned char*)tif->tif_rawdata,
				  (size_t)tif->tif_rawdatasize, NULL);
	if (JBG_EOK != decodeStatus)
	{
		/*
		 * XXX: JBG_EN constant was defined in pre-2.0 releases of the
		 * JBIG-KIT. Since the 2.0 the error reporting functions were
		 * changed. We will handle both cases here.
		 */
		TIFFErrorExt(tif->tif_clientdata,
			     "JBIG", "Error (%d) decoding: %s",
			     decodeStatus,
#if defined(JBG_EN)
			     jbg_strerror(decodeStatus, JBG_EN)
#else
			     jbg_strerror(decodeStatus)
#endif
			     );
		jbg_dec_free(&decoder);
		return 0;
	}

	pImage = jbg_dec_getimage(&decoder, 0);
	_TIFFmemcpy(buffer, pImage, jbg_dec_getsize(&decoder));
	jbg_dec_free(&decoder);
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
37,38
37,39
39,40
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
50,51
51,52
51,53
52,53
52,54
53,54
53,55
56,57
58,59
58,60
59,60
59,61
62,63
64,65
64,66
65,66
65,67
65,68
66,67
68,69
70,71
70,72
71,72
71,73
72,73
76,77
77,78
78,79
78,80
78,81
79,80
81,82
81,83
82,83
85,86
85,87
86,87
89,90
90,91
90,92
91,92
93,94
94,95
96,97
97,98
97,99
98,99
100,101
100,102
100,103
100,104
100,105
101,102
103,104
104,105
106,107
106,108
107,108
107,109
109,110
111,112
111,113
112,113
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
124,125
126,127
126,128
127,128
127,129
128,129
130,131
132,133
132,134
132,135
133,134
134,135
134,136
134,137
134,138
134,139
134,140
135,136
137,138
137,139
138,139
143,144
145,146
145,147
146,147
148,149
150,151
151,152
151,153
152,153
154,155
155,156
157,158
159,160
160,161
160,162
161,162
163,164
163,165
163,166
164,165
166,167
167,168
170,171
171,172
171,173
171,174
171,175
172,173
174,175
176,177
178,179
178,180
179,180
181,182
182,183
184,185
185,186
185,187
186,187
188,189
189,190
191,192
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,31,33,36,38,40,43,45,46,49,54,55,57,60,61,63,67,69,73,74,75,80,83,84,87,88,92,95,99,102,105,108,110,113,114,118,119,122,123,125,129,131,136,139,140,141,142,144,147,149,153,156,158,162,165,168,169,173,175,177,180,183,187,190,192
-----computeFrom-----
97,98
97,99
127,128
127,129
160,161
160,162
-----guardedBy-----
131,149
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;ExpressionList;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int JBIGDecode(TIFF* tif, uint8* buffer, tmsize_t size, uint16 s){	struct jbg_dec_state decoder;	int decodeStatus = 0;	unsigned char* pImage = NULL;	(void) size, (void) s;	if (isFillOrder(tif, tif->tif_dir.td_fillorder))	{		TIFFReverseBits(tif->tif_rawdata, tif->tif_rawdatasize);	}	jbg_dec_init(&decoder);#if defined(HAVE_JBG_NEWLEN)	jbg_newlen(tif->tif_rawdata, (size_t)tif->tif_rawdatasize);	/*	 * I do not check the return status of jbg_newlen because even if this	 * function fails it does not necessarily mean that decoding the image	 * will fail.  It is generally only needed for received fax images	 * that do not contain the actual length of the image in the BIE	 * header.  I do not log when an error occurs because that will cause	 * problems when converting JBIG encoded TIFF's to	 * PostScript.  As long as the actual image length is contained in the	 * BIE header jbg_dec_in should succeed.	 */#endif /* HAVE_JBG_NEWLEN */	decodeStatus = jbg_dec_in(&decoder, (unsigned char*)tif->tif_rawdata,				  (size_t)tif->tif_rawdatasize, NULL);	if (JBG_EOK != decodeStatus)	{		/*		 * XXX: JBG_EN constant was defined in pre-2.0 releases of the		 * JBIG-KIT. Since the 2.0 the error reporting functions were		 * changed. We will handle both cases here.		 */		TIFFErrorExt(tif->tif_clientdata,			     "JBIG", "Error (%d) decoding: %s",			     decodeStatus,#if defined(JBG_EN)			     jbg_strerror(decodeStatus, JBG_EN)#else			     jbg_strerror(decodeStatus)#endif			     );		jbg_dec_free(&decoder);		return 0;	}	pImage = jbg_dec_getimage(&decoder, 0);	_TIFFmemcpy(buffer, pImage, jbg_dec_getsize(&decoder));	jbg_dec_free(&decoder);	return 1;}
static int
JBIGDecode(TIFF* tif, uint8* buffer, tmsize_t size, uint16 s)
JBIGDecode
TIFF* tif
TIFF
TIFF
* tif
*
tif
uint8* buffer
uint8
uint8
* buffer
*
buffer
tmsize_t size
tmsize_t
tmsize_t
size
size
uint16 s
uint16
uint16
s
s
{	struct jbg_dec_state decoder;	int decodeStatus = 0;	unsigned char* pImage = NULL;	(void) size, (void) s;	if (isFillOrder(tif, tif->tif_dir.td_fillorder))	{		TIFFReverseBits(tif->tif_rawdata, tif->tif_rawdatasize);	}	jbg_dec_init(&decoder);#if defined(HAVE_JBG_NEWLEN)	jbg_newlen(tif->tif_rawdata, (size_t)tif->tif_rawdatasize);	/*	 * I do not check the return status of jbg_newlen because even if this	 * function fails it does not necessarily mean that decoding the image	 * will fail.  It is generally only needed for received fax images	 * that do not contain the actual length of the image in the BIE	 * header.  I do not log when an error occurs because that will cause	 * problems when converting JBIG encoded TIFF's to	 * PostScript.  As long as the actual image length is contained in the	 * BIE header jbg_dec_in should succeed.	 */#endif /* HAVE_JBG_NEWLEN */	decodeStatus = jbg_dec_in(&decoder, (unsigned char*)tif->tif_rawdata,				  (size_t)tif->tif_rawdatasize, NULL);	if (JBG_EOK != decodeStatus)	{		/*		 * XXX: JBG_EN constant was defined in pre-2.0 releases of the		 * JBIG-KIT. Since the 2.0 the error reporting functions were		 * changed. We will handle both cases here.		 */		TIFFErrorExt(tif->tif_clientdata,			     "JBIG", "Error (%d) decoding: %s",			     decodeStatus,#if defined(JBG_EN)			     jbg_strerror(decodeStatus, JBG_EN)#else			     jbg_strerror(decodeStatus)#endif			     );		jbg_dec_free(&decoder);		return 0;	}	pImage = jbg_dec_getimage(&decoder, 0);	_TIFFmemcpy(buffer, pImage, jbg_dec_getsize(&decoder));	jbg_dec_free(&decoder);	return 1;}
struct jbg_dec_state decoder;
struct jbg_dec_state decoder;
struct jbg_dec_state
jbg_dec_state
decoder
decoder
int decodeStatus = 0;
int decodeStatus = 0;
int
decodeStatus = 0
decodeStatus
= 0
0
unsigned char* pImage = NULL;
unsigned char* pImage = NULL;
unsigned char
* pImage = NULL
*
pImage
= NULL
NULL
NULL
(void) size, (void) s;
(void) size, (void) s
(void) size
void
void

size
size
(void) s
void
void

s
s
if (isFillOrder(tif, tif->tif_dir.td_fillorder))	{		TIFFReverseBits(tif->tif_rawdata, tif->tif_rawdatasize);	}
isFillOrder(tif, tif->tif_dir.td_fillorder)
isFillOrder
isFillOrder
tif
tif
tif->tif_dir.td_fillorder
tif->tif_dir
tif
tif
tif_dir
td_fillorder
{		TIFFReverseBits(tif->tif_rawdata, tif->tif_rawdatasize);	}
TIFFReverseBits(tif->tif_rawdata, tif->tif_rawdatasize);
TIFFReverseBits(tif->tif_rawdata, tif->tif_rawdatasize)
TIFFReverseBits
TIFFReverseBits
tif->tif_rawdata
tif
tif
tif_rawdata
tif->tif_rawdatasize
tif
tif
tif_rawdatasize
jbg_dec_init(&decoder);
jbg_dec_init(&decoder)
jbg_dec_init
jbg_dec_init
&decoder
decoder
decoder
decodeStatus = jbg_dec_in(&decoder, (unsigned char*)tif->tif_rawdata,				  (size_t)tif->tif_rawdatasize, NULL);
decodeStatus = jbg_dec_in(&decoder, (unsigned char*)tif->tif_rawdata,				  (size_t)tif->tif_rawdatasize, NULL)
decodeStatus
decodeStatus
jbg_dec_in(&decoder, (unsigned char*)tif->tif_rawdata,				  (size_t)tif->tif_rawdatasize, NULL)
jbg_dec_in
jbg_dec_in
&decoder
decoder
decoder
(unsigned char*)tif->tif_rawdata
unsigned char*
unsigned char
*
*
tif->tif_rawdata
tif
tif
tif_rawdata
(size_t)tif->tif_rawdatasize
size_t
size_t
size_t

tif->tif_rawdatasize
tif
tif
tif_rawdatasize
NULL
NULL
if (JBG_EOK != decodeStatus)	{		/*		 * XXX: JBG_EN constant was defined in pre-2.0 releases of the		 * JBIG-KIT. Since the 2.0 the error reporting functions were		 * changed. We will handle both cases here.		 */		TIFFErrorExt(tif->tif_clientdata,			     "JBIG", "Error (%d) decoding: %s",			     decodeStatus,#if defined(JBG_EN)			     jbg_strerror(decodeStatus, JBG_EN)#else			     jbg_strerror(decodeStatus)#endif			     );		jbg_dec_free(&decoder);		return 0;	}
JBG_EOK != decodeStatus
JBG_EOK
JBG_EOK
decodeStatus
decodeStatus
{		/*		 * XXX: JBG_EN constant was defined in pre-2.0 releases of the		 * JBIG-KIT. Since the 2.0 the error reporting functions were		 * changed. We will handle both cases here.		 */		TIFFErrorExt(tif->tif_clientdata,			     "JBIG", "Error (%d) decoding: %s",			     decodeStatus,#if defined(JBG_EN)			     jbg_strerror(decodeStatus, JBG_EN)#else			     jbg_strerror(decodeStatus)#endif			     );		jbg_dec_free(&decoder);		return 0;	}
TIFFErrorExt(tif->tif_clientdata,			     "JBIG", "Error (%d) decoding: %s",			     decodeStatus,#if defined(JBG_EN)			     jbg_strerror(decodeStatus, JBG_EN)#else			     jbg_strerror(decodeStatus)#endif			     );
TIFFErrorExt(tif->tif_clientdata,			     "JBIG", "Error (%d) decoding: %s",			     decodeStatus,#if defined(JBG_EN)			     jbg_strerror(decodeStatus, JBG_EN)#else			     jbg_strerror(decodeStatus)#endif			     )
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
"JBIG"
"Error (%d) decoding: %s"
decodeStatus
decodeStatus
jbg_strerror(decodeStatus)
jbg_strerror
jbg_strerror
decodeStatus
decodeStatus
jbg_dec_free(&decoder);
jbg_dec_free(&decoder)
jbg_dec_free
jbg_dec_free
&decoder
decoder
decoder
return 0;
0
pImage = jbg_dec_getimage(&decoder, 0);
pImage = jbg_dec_getimage(&decoder, 0)
pImage
pImage
jbg_dec_getimage(&decoder, 0)
jbg_dec_getimage
jbg_dec_getimage
&decoder
decoder
decoder
0
_TIFFmemcpy(buffer, pImage, jbg_dec_getsize(&decoder));
_TIFFmemcpy(buffer, pImage, jbg_dec_getsize(&decoder))
_TIFFmemcpy
_TIFFmemcpy
buffer
buffer
pImage
pImage
jbg_dec_getsize(&decoder)
jbg_dec_getsize
jbg_dec_getsize
&decoder
decoder
decoder
jbg_dec_free(&decoder);
jbg_dec_free(&decoder)
jbg_dec_free
jbg_dec_free
&decoder
decoder
decoder
return 1;
1
-----joern-----
(5,26,0)
(87,46,0)
(88,63,0)
(57,28,0)
(21,42,0)
(76,54,0)
(77,1,0)
(20,82,0)
(56,34,0)
(42,17,0)
(53,42,0)
(82,50,0)
(30,6,0)
(1,62,0)
(51,38,0)
(56,18,0)
(44,26,0)
(75,52,0)
(42,21,0)
(59,69,0)
(88,28,0)
(82,12,0)
(31,6,0)
(69,46,0)
(21,90,0)
(6,65,0)
(6,31,0)
(9,42,0)
(68,70,0)
(56,19,0)
(35,82,0)
(30,17,0)
(28,88,0)
(81,63,0)
(12,46,0)
(45,71,0)
(36,15,0)
(41,23,0)
(75,46,0)
(22,68,0)
(88,41,0)
(58,62,0)
(25,16,0)
(55,52,0)
(85,74,0)
(74,46,0)
(50,71,0)
(50,82,0)
(60,49,0)
(33,23,0)
(70,68,0)
(38,51,0)
(63,88,0)
(32,23,0)
(36,19,0)
(38,88,0)
(14,70,0)
(85,1,0)
(88,38,0)
(11,31,0)
(23,17,0)
(78,30,0)
(91,70,0)
(72,74,0)
(41,88,0)
(84,52,0)
(75,68,0)
(43,17,0)
(83,12,0)
(26,5,0)
(76,12,0)
(12,76,0)
(5,46,0)
(13,36,0)
(86,54,0)
(61,46,0)
(67,0,0)
(40,46,0)
(73,21,0)
(15,36,0)
(16,64,0)
(18,56,0)
(23,41,0)
(7,49,0)
(47,69,0)
(63,46,0)
(54,76,0)
(90,17,0)
(64,46,0)
(27,46,0)
(4,30,0)
(8,43,0)
(58,0,0)
(49,63,0)
(68,75,0)
(48,76,0)
(71,50,0)
(90,21,0)
(43,38,0)
(31,17,0)
(82,79,0)
(52,75,0)
(3,90,0)
(2,46,0)
(19,46,0)
(66,56,0)
(82,46,0)
(89,39,0)
(52,17,0)
(0,58,0)
(6,30,0)
(37,88,0)
(70,17,0)
(64,16,0)
(39,46,0)
(92,31,0)
(10,39,0)
(41,29,0)
(38,43,0)
(80,43,0)
(36,24,0)
(29,41,0)
(68,22,0)
(35,20,1)
(39,89,1)
(36,15,1)
(23,17,1)
(56,18,1)
(31,17,1)
(63,88,1)
(26,44,1)
(68,22,1)
(68,70,1)
(20,12,1)
(85,1,1)
(66,39,1)
(28,57,1)
(52,55,1)
(88,41,1)
(80,8,1)
(75,52,1)
(30,78,1)
(30,17,1)
(43,80,1)
(23,33,1)
(6,30,1)
(92,11,1)
(56,66,1)
(38,51,1)
(4,90,1)
(74,72,1)
(8,41,1)
(55,84,1)
(36,24,1)
(53,3,1)
(82,12,1)
(57,81,1)
(69,59,1)
(13,56,1)
(77,58,1)
(1,77,1)
(50,71,1)
(33,32,1)
(70,91,1)
(75,68,1)
(86,83,1)
(42,17,1)
(6,31,1)
(45,35,1)
(58,0,1)
(59,47,1)
(3,36,1)
(52,17,1)
(32,28,1)
(48,54,1)
(88,28,1)
(12,76,1)
(88,38,1)
(82,79,1)
(56,34,1)
(76,54,1)
(67,49,1)
(60,7,1)
(88,37,1)
(89,10,1)
(38,43,1)
(16,25,1)
(54,86,1)
(71,45,1)
(37,38,1)
(21,42,1)
(10,69,1)
(49,60,1)
(90,21,1)
(73,42,1)
(49,63,1)
(14,52,1)
(41,23,1)
(11,30,1)
(78,4,1)
(44,90,1)
(90,17,1)
(64,16,1)
(83,49,1)
(91,14,1)
(43,17,1)
(36,13,1)
(76,48,1)
(31,92,1)
(72,64,1)
(5,26,1)
(84,5,1)
(81,75,1)
(7,63,1)
(42,9,1)
(21,73,1)
(41,29,1)
(85,74,1)
(82,50,1)
(9,53,1)
(70,17,1)
(0,67,1)
(44,6,1)
(25,82,1)
(83,49,2)
(64,49,2)
(56,34,2)
(88,28,2)
(92,90,2)
(82,50,2)
(35,49,2)
(58,0,2)
(12,49,2)
(64,16,2)
(63,88,2)
(85,1,2)
(72,49,2)
(36,24,2)
(86,49,2)
(67,49,2)
(41,29,2)
(38,51,2)
(74,49,2)
(77,49,2)
(1,49,2)
(88,41,2)
(90,17,2)
(88,38,2)
(48,49,2)
(82,49,2)
(85,74,2)
(30,17,2)
(42,17,2)
(71,49,2)
(12,76,2)
(82,79,2)
(21,42,2)
(56,18,2)
(6,30,2)
(11,90,2)
(41,23,2)
(76,49,2)
(50,71,2)
(68,70,2)
(82,12,2)
(31,90,2)
(76,54,2)
(4,90,2)
(78,90,2)
(31,17,2)
(43,17,2)
(5,26,2)
(75,52,2)
(6,31,2)
(6,90,2)
(90,21,2)
(30,90,2)
(0,49,2)
(38,43,2)
(52,17,2)
(70,17,2)
(25,49,2)
(68,22,2)
(20,49,2)
(50,49,2)
(58,49,2)
(75,68,2)
(54,49,2)
(16,49,2)
(49,63,2)
(45,49,2)
(23,17,2)
(36,15,2)
-----------------------------------
(0,&decoder)
(1,return 0;)
(2,pImage)
(3,tif)
(4,tif)
(5,jbg_dec_init(&decoder)
(6,TIFFReverseBits(tif->tif_rawdata, tif->tif_rawdatasize)
(7,JBG_EOK)
(8,tif)
(9,tif_dir)
(10,pImage)
(11,tif)
(12,pImage = jbg_dec_getimage(&decoder, 0)
(13,s)
(14,tif)
(15,void)
(16,&decoder)
(17,TIFF* tif)
(18,void)
(19,)
(20,buffer)
(21,tif->tif_dir.td_fillorder)
(22,size_t)
(23,tif->tif_rawdata)
(24,uint16 s)
(25,decoder)
(26,&decoder)
(27,decoder)
(28,&decoder)
(29,unsigned char*)
(30,tif->tif_rawdata)
(31,tif->tif_rawdatasize)
(32,tif)
(33,tif_rawdata)
(34,tmsize_t size)
(35,pImage)
(36,(void)
(37,NULL)
(38,(size_t)
(39,* pImage = NULL)
(40,if (JBG_EOK != decodeStatus)
(41,(unsigned char*)
(42,tif->tif_dir)
(43,tif->tif_rawdatasize)
(44,decoder)
(45,decoder)
(46,)
(47,decodeStatus)
(48,0)
(49,JBG_EOK != decodeStatus)
(50,jbg_dec_getsize(&decoder)
(51,size_t)
(52,tif->tif_rawdata)
(53,tif)
(54,&decoder)
(55,tif_rawdata)
(56,(void)
(57,decoder)
(58,jbg_dec_free(&decoder)
(59,0)
(60,decodeStatus)
(61,if (isFillOrder(tif, tif->tif_dir.td_fillorder)
(62,)
(63,decodeStatus = jbg_dec_in(&decoder, (unsigned char*)
(64,jbg_dec_free(&decoder)
(65,)
(66,size)
(67,decoder)
(68,(size_t)
(69,decodeStatus = 0)
(70,tif->tif_rawdatasize)
(71,&decoder)
(72,1)
(73,td_fillorder)
(74,return 1;)
(75,jbg_newlen(tif->tif_rawdata, (size_t)
(76,jbg_dec_getimage(&decoder, 0)
(77,0)
(78,tif_rawdata)
(79,uint8* buffer)
(80,tif_rawdatasize)
(81,decodeStatus)
(82,_TIFFmemcpy(buffer, pImage, jbg_dec_getsize(&decoder)
(83,pImage)
(84,tif)
(85,RET)
(86,decoder)
(87,decodeStatus)
(88,jbg_dec_in(&decoder, (unsigned char*)
(89,NULL)
(90,isFillOrder(tif, tif->tif_dir.td_fillorder)
(91,tif_rawdatasize)
(92,tif_rawdatasize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
