-----label-----
1
-----code-----
void
TIFFPrintDirectory(TIFF* tif, FILE* fd, long flags)
{
	TIFFDirectory *td = &tif->tif_dir;
	char *sep;
	long l, n;

#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))
	fprintf(fd, "TIFF Directory at offset 0x%I64x (%I64u)\n",
		(unsigned __int64) tif->tif_diroff,
		(unsigned __int64) tif->tif_diroff);
#else
	fprintf(fd, "TIFF Directory at offset 0x%llx (%llu)\n",
		(unsigned long long) tif->tif_diroff,
		(unsigned long long) tif->tif_diroff);
#endif
	if (TIFFFieldSet(tif,FIELD_SUBFILETYPE)) {
		fprintf(fd, "  Subfile Type:");
		sep = " ";
		if (td->td_subfiletype & FILETYPE_REDUCEDIMAGE) {
			fprintf(fd, "%sreduced-resolution image", sep);
			sep = "/";
		}
		if (td->td_subfiletype & FILETYPE_PAGE) {
			fprintf(fd, "%smulti-page document", sep);
			sep = "/";
		}
		if (td->td_subfiletype & FILETYPE_MASK)
			fprintf(fd, "%stransparency mask", sep);
		fprintf(fd, " (%lu = 0x%lx)\n",
		    (unsigned long) td->td_subfiletype, (long) td->td_subfiletype);
	}
	if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)) {
		fprintf(fd, "  Image Width: %lu Image Length: %lu",
		    (unsigned long) td->td_imagewidth, (unsigned long) td->td_imagelength);
		if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))
			fprintf(fd, " Image Depth: %lu",
			    (unsigned long) td->td_imagedepth);
		fprintf(fd, "\n");
	}
	if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS)) {
		fprintf(fd, "  Tile Width: %lu Tile Length: %lu",
		    (unsigned long) td->td_tilewidth, (unsigned long) td->td_tilelength);
		if (TIFFFieldSet(tif,FIELD_TILEDEPTH))
			fprintf(fd, " Tile Depth: %lu",
			    (unsigned long) td->td_tiledepth);
		fprintf(fd, "\n");
	}
	if (TIFFFieldSet(tif,FIELD_RESOLUTION)) {
		fprintf(fd, "  Resolution: %g, %g",
		    td->td_xresolution, td->td_yresolution);
		if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)) {
			switch (td->td_resolutionunit) {
			case RESUNIT_NONE:
				fprintf(fd, " (unitless)");
				break;
			case RESUNIT_INCH:
				fprintf(fd, " pixels/inch");
				break;
			case RESUNIT_CENTIMETER:
				fprintf(fd, " pixels/cm");
				break;
			default:
				fprintf(fd, " (unit %u = 0x%x)",
				    td->td_resolutionunit,
				    td->td_resolutionunit);
				break;
			}
		}
		fprintf(fd, "\n");
	}
	if (TIFFFieldSet(tif,FIELD_POSITION))
		fprintf(fd, "  Position: %g, %g\n",
		    td->td_xposition, td->td_yposition);
	if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))
		fprintf(fd, "  Bits/Sample: %u\n", td->td_bitspersample);
	if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT)) {
		fprintf(fd, "  Sample Format: ");
		switch (td->td_sampleformat) {
		case SAMPLEFORMAT_VOID:
			fprintf(fd, "void\n");
			break;
		case SAMPLEFORMAT_INT:
			fprintf(fd, "signed integer\n");
			break;
		case SAMPLEFORMAT_UINT:
			fprintf(fd, "unsigned integer\n");
			break;
		case SAMPLEFORMAT_IEEEFP:
			fprintf(fd, "IEEE floating point\n");
			break;
		case SAMPLEFORMAT_COMPLEXINT:
			fprintf(fd, "complex signed integer\n");
			break;
		case SAMPLEFORMAT_COMPLEXIEEEFP:
			fprintf(fd, "complex IEEE floating point\n");
			break;
		default:
			fprintf(fd, "%u (0x%x)\n",
			    td->td_sampleformat, td->td_sampleformat);
			break;
		}
	}
	if (TIFFFieldSet(tif,FIELD_COMPRESSION)) {
		const TIFFCodec* c = TIFFFindCODEC(td->td_compression);
		fprintf(fd, "  Compression Scheme: ");
		if (c)
			fprintf(fd, "%s\n", c->name);
		else
			fprintf(fd, "%u (0x%x)\n",
			    td->td_compression, td->td_compression);
	}
	if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC)) {
		fprintf(fd, "  Photometric Interpretation: ");
		if (td->td_photometric < NPHOTONAMES)
			fprintf(fd, "%s\n", photoNames[td->td_photometric]);
		else {
			switch (td->td_photometric) {
			case PHOTOMETRIC_LOGL:
				fprintf(fd, "CIE Log2(L)\n");
				break;
			case PHOTOMETRIC_LOGLUV:
				fprintf(fd, "CIE Log2(L) (u',v')\n");
				break;
			default:
				fprintf(fd, "%u (0x%x)\n",
				    td->td_photometric, td->td_photometric);
				break;
			}
		}
	}
	if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES) && td->td_extrasamples) {
		uint16 i;
		fprintf(fd, "  Extra Samples: %u<", td->td_extrasamples);
		sep = "";
		for (i = 0; i < td->td_extrasamples; i++) {
			switch (td->td_sampleinfo[i]) {
			case EXTRASAMPLE_UNSPECIFIED:
				fprintf(fd, "%sunspecified", sep);
				break;
			case EXTRASAMPLE_ASSOCALPHA:
				fprintf(fd, "%sassoc-alpha", sep);
				break;
			case EXTRASAMPLE_UNASSALPHA:
				fprintf(fd, "%sunassoc-alpha", sep);
				break;
			default:
				fprintf(fd, "%s%u (0x%x)", sep,
				    td->td_sampleinfo[i], td->td_sampleinfo[i]);
				break;
			}
			sep = ", ";
		}
		fprintf(fd, ">\n");
	}
	if (TIFFFieldSet(tif,FIELD_INKNAMES)) {
		char* cp;
		uint16 i;
		fprintf(fd, "  Ink Names: ");
		i = td->td_samplesperpixel;
		sep = "";
		for (cp = td->td_inknames; 
		     i > 0 && cp < td->td_inknames + td->td_inknameslen; 
		     cp = strchr(cp,'\0')+1, i--) {
			size_t max_chars = 
				td->td_inknameslen - (cp - td->td_inknames);
			fputs(sep, fd);
			_TIFFprintAsciiBounded(fd, cp, max_chars);
			sep = ", ";
		}
                fputs("\n", fd);
	}
	if (TIFFFieldSet(tif,FIELD_THRESHHOLDING)) {
		fprintf(fd, "  Thresholding: ");
		switch (td->td_threshholding) {
		case THRESHHOLD_BILEVEL:
			fprintf(fd, "bilevel art scan\n");
			break;
		case THRESHHOLD_HALFTONE:
			fprintf(fd, "halftone or dithered scan\n");
			break;
		case THRESHHOLD_ERRORDIFFUSE:
			fprintf(fd, "error diffused\n");
			break;
		default:
			fprintf(fd, "%u (0x%x)\n",
			    td->td_threshholding, td->td_threshholding);
			break;
		}
	}
	if (TIFFFieldSet(tif,FIELD_FILLORDER)) {
		fprintf(fd, "  FillOrder: ");
		switch (td->td_fillorder) {
		case FILLORDER_MSB2LSB:
			fprintf(fd, "msb-to-lsb\n");
			break;
		case FILLORDER_LSB2MSB:
			fprintf(fd, "lsb-to-msb\n");
			break;
		default:
			fprintf(fd, "%u (0x%x)\n",
			    td->td_fillorder, td->td_fillorder);
			break;
		}
	}
	if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))
        {
		fprintf(fd, "  YCbCr Subsampling: %u, %u\n",
			td->td_ycbcrsubsampling[0], td->td_ycbcrsubsampling[1] );
	}
	if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING)) {
		fprintf(fd, "  YCbCr Positioning: ");
		switch (td->td_ycbcrpositioning) {
		case YCBCRPOSITION_CENTERED:
			fprintf(fd, "centered\n");
			break;
		case YCBCRPOSITION_COSITED:
			fprintf(fd, "cosited\n");
			break;
		default:
			fprintf(fd, "%u (0x%x)\n",
			    td->td_ycbcrpositioning, td->td_ycbcrpositioning);
			break;
		}
	}
	if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))
		fprintf(fd, "  Halftone Hints: light %u dark %u\n",
		    td->td_halftonehints[0], td->td_halftonehints[1]);
	if (TIFFFieldSet(tif,FIELD_ORIENTATION)) {
		fprintf(fd, "  Orientation: ");
		if (td->td_orientation < NORIENTNAMES)
			fprintf(fd, "%s\n", orientNames[td->td_orientation]);
		else
			fprintf(fd, "%u (0x%x)\n",
			    td->td_orientation, td->td_orientation);
	}
	if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))
		fprintf(fd, "  Samples/Pixel: %u\n", td->td_samplesperpixel);
	if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP)) {
		fprintf(fd, "  Rows/Strip: ");
		if (td->td_rowsperstrip == (uint32) -1)
			fprintf(fd, "(infinite)\n");
		else
			fprintf(fd, "%lu\n", (unsigned long) td->td_rowsperstrip);
	}
	if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))
		fprintf(fd, "  Min Sample Value: %u\n", td->td_minsamplevalue);
	if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))
		fprintf(fd, "  Max Sample Value: %u\n", td->td_maxsamplevalue);
	if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE)) {
		int i;
		int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;
		fprintf(fd, "  SMin Sample Value:");
		for (i = 0; i < count; ++i)
			fprintf(fd, " %g", td->td_sminsamplevalue[i]);
		fprintf(fd, "\n");
	}
	if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE)) {
		int i;
		int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;
		fprintf(fd, "  SMax Sample Value:");
		for (i = 0; i < count; ++i)
			fprintf(fd, " %g", td->td_smaxsamplevalue[i]);
		fprintf(fd, "\n");
	}
	if (TIFFFieldSet(tif,FIELD_PLANARCONFIG)) {
		fprintf(fd, "  Planar Configuration: ");
		switch (td->td_planarconfig) {
		case PLANARCONFIG_CONTIG:
			fprintf(fd, "single image plane\n");
			break;
		case PLANARCONFIG_SEPARATE:
			fprintf(fd, "separate image planes\n");
			break;
		default:
			fprintf(fd, "%u (0x%x)\n",
			    td->td_planarconfig, td->td_planarconfig);
			break;
		}
	}
	if (TIFFFieldSet(tif,FIELD_PAGENUMBER))
		fprintf(fd, "  Page Number: %u-%u\n",
		    td->td_pagenumber[0], td->td_pagenumber[1]);
	if (TIFFFieldSet(tif,FIELD_COLORMAP)) {
		fprintf(fd, "  Color Map: ");
		if (flags & TIFFPRINT_COLORMAP) {
			fprintf(fd, "\n");
			n = 1L<<td->td_bitspersample;
			for (l = 0; l < n; l++)
				fprintf(fd, "   %5ld: %5u %5u %5u\n",
				    l,
				    td->td_colormap[0][l],
				    td->td_colormap[1][l],
				    td->td_colormap[2][l]);
		} else
			fprintf(fd, "(present)\n");
	}
	if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE)) {
		int i;
		fprintf(fd, "  Reference Black/White:\n");
		for (i = 0; i < 3; i++)
		fprintf(fd, "    %2d: %5g %5g\n", i,
			td->td_refblackwhite[2*i+0],
			td->td_refblackwhite[2*i+1]);
	}
	if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION)) {
		fprintf(fd, "  Transfer Function: ");
		if (flags & TIFFPRINT_CURVES) {
			fprintf(fd, "\n");
			n = 1L<<td->td_bitspersample;
			for (l = 0; l < n; l++) {
				uint16 i;
				fprintf(fd, "    %2ld: %5u",
				    l, td->td_transferfunction[0][l]);
				for (i = 1; i < td->td_samplesperpixel; i++)
					fprintf(fd, " %5u",
					    td->td_transferfunction[i][l]);
				fputc('\n', fd);
			}
		} else
			fprintf(fd, "(present)\n");
	}
	if (TIFFFieldSet(tif, FIELD_SUBIFD) && (td->td_subifd)) {
		uint16 i;
		fprintf(fd, "  SubIFD Offsets:");
		for (i = 0; i < td->td_nsubifd; i++)
#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))
			fprintf(fd, " %5I64u",
				(unsigned __int64) td->td_subifd[i]);
#else
			fprintf(fd, " %5llu",
				(unsigned long long) td->td_subifd[i]);
#endif
		fputc('\n', fd);
	}

	/*
	** Custom tag support.
	*/
	{
		int  i;
		short count;

		count = (short) TIFFGetTagListCount(tif);
		for(i = 0; i < count; i++) {
			uint32 tag = TIFFGetTagListEntry(tif, i);
			const TIFFField *fip;
			uint32 value_count;
			int mem_alloc = 0;
			void *raw_data;

			fip = TIFFFieldWithTag(tif, tag);
			if(fip == NULL)
				continue;

			if(fip->field_passcount) {
				if (fip->field_readcount == TIFF_VARIABLE2 ) {
					if(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)
						continue;
				} else if (fip->field_readcount == TIFF_VARIABLE ) {
					uint16 small_value_count;
					if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)
						continue;
					value_count = small_value_count;
				} else {
					assert (fip->field_readcount == TIFF_VARIABLE
						|| fip->field_readcount == TIFF_VARIABLE2);
					continue;
				} 
			} else {
				if (fip->field_readcount == TIFF_VARIABLE
				    || fip->field_readcount == TIFF_VARIABLE2)
					value_count = 1;
				else if (fip->field_readcount == TIFF_SPP)
					value_count = td->td_samplesperpixel;
				else
					value_count = fip->field_readcount;
				if (fip->field_tag == TIFFTAG_DOTRANGE
				    && strcmp(fip->field_name,"DotRange") == 0) {
					/* TODO: This is an evil exception and should not have been
					   handled this way ... likely best if we move it into
					   the directory structure with an explicit field in 
					   libtiff 4.1 and assign it a FIELD_ value */
					static uint16 dotrange[2];
					raw_data = dotrange;
					TIFFGetField(tif, tag, dotrange+0, dotrange+1);
				} else if (fip->field_type == TIFF_ASCII
					   || fip->field_readcount == TIFF_VARIABLE
					   || fip->field_readcount == TIFF_VARIABLE2
					   || fip->field_readcount == TIFF_SPP
					   || value_count > 1) {
					if(TIFFGetField(tif, tag, &raw_data) != 1)
						continue;
				} else {
					raw_data = _TIFFmalloc(
					    _TIFFDataSize(fip->field_type)
					    * value_count);
					mem_alloc = 1;
					if(TIFFGetField(tif, tag, raw_data) != 1) {
						_TIFFfree(raw_data);
						continue;
					}
				}
			}

			/*
			 * Catch the tags which needs to be specially handled
			 * and pretty print them. If tag not handled in
			 * _TIFFPrettyPrintField() fall down and print it as
			 * any other tag.
			 */
			if (!_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data))
				_TIFFPrintField(fd, fip, value_count, raw_data);

			if(mem_alloc)
				_TIFFfree(raw_data);
		}
	}
        
	if (tif->tif_tagmethods.printdir)
		(*tif->tif_tagmethods.printdir)(tif, fd, flags);

        _TIFFFillStriles( tif );
        
	if ((flags & TIFFPRINT_STRIPS) &&
	    TIFFFieldSet(tif,FIELD_STRIPOFFSETS)) {
		uint32 s;

		fprintf(fd, "  %lu %s:\n",
		    (unsigned long) td->td_nstrips,
		    isTiled(tif) ? "Tiles" : "Strips");
		for (s = 0; s < td->td_nstrips; s++)
#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))
			fprintf(fd, "    %3lu: [%8I64u, %8I64u]\n",
			    (unsigned long) s,
			    (unsigned __int64) td->td_stripoffset[s],
			    (unsigned __int64) td->td_stripbytecount[s]);
#else
			fprintf(fd, "    %3lu: [%8llu, %8llu]\n",
			    (unsigned long) s,
			    (unsigned long long) td->td_stripoffset[s],
			    (unsigned long long) td->td_stripbytecount[s]);
#endif
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
21,38
21,39
21,40
21,41
21,42
21,43
21,44
21,45
21,46
21,47
21,48
21,49
21,50
21,51
21,52
21,53
21,54
21,55
21,56
21,57
21,58
22,23
23,24
23,25
24,25
26,27
26,28
26,29
29,30
30,31
31,32
31,33
32,33
35,36
36,37
36,38
38,39
38,40
41,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
49,52
49,53
49,54
50,51
52,53
55,56
55,57
56,57
56,58
59,60
59,61
60,61
63,64
63,65
64,65
64,66
67,68
67,69
68,69
71,72
71,73
72,73
72,74
72,75
73,74
75,76
77,78
79,80
79,81
79,82
79,83
79,84
79,85
80,81
81,82
81,83
81,84
82,83
84,85
87,88
88,89
88,90
89,90
92,93
92,94
93,94
93,95
94,95
94,96
95,96
98,99
100,101
100,102
101,102
102,103
102,104
102,105
102,106
103,104
105,106
108,109
110,111
111,112
111,113
112,113
115,116
115,117
116,117
116,118
117,118
117,119
118,119
121,122
123,124
123,125
124,125
125,126
125,127
125,128
125,129
126,127
128,129
131,132
133,134
134,135
134,136
135,136
138,139
138,140
139,140
139,141
140,141
140,142
141,142
144,145
146,147
147,148
147,149
147,150
147,151
148,149
150,151
153,154
155,156
156,157
156,158
156,159
156,160
156,161
157,158
159,160
162,163
162,164
163,164
163,165
166,167
166,168
167,168
170,171
170,172
171,172
171,173
174,175
174,176
175,176
178,179
178,180
179,180
179,181
179,182
180,181
182,183
184,185
186,187
186,188
186,189
187,188
188,189
188,190
188,191
188,192
188,193
189,190
191,192
194,195
194,196
195,196
195,197
198,199
198,200
199,200
202,203
202,204
203,204
203,205
206,207
206,208
207,208
210,211
210,212
211,212
211,213
211,214
212,213
214,215
216,217
218,219
219,220
219,221
219,222
219,223
220,221
222,223
225,226
225,227
226,227
226,228
229,230
229,231
230,231
233,234
234,235
234,236
234,237
235,236
237,238
240,241
240,242
241,242
241,243
241,244
242,243
244,245
246,247
248,249
248,250
248,251
249,250
250,251
250,252
250,253
250,254
250,255
251,252
253,254
256,257
256,258
257,258
257,259
260,261
260,262
261,262
264,265
264,266
265,266
265,267
268,269
268,270
269,270
272,273
272,274
273,274
273,275
273,276
274,275
276,277
278,279
280,281
281,282
281,283
281,284
281,285
282,283
284,285
287,288
287,289
288,289
288,290
291,292
291,293
292,293
295,296
296,297
296,298
296,299
297,298
299,300
302,303
302,304
303,304
303,305
303,306
304,305
306,307
308,309
310,311
310,312
310,313
311,312
312,313
312,314
312,315
312,316
312,317
313,314
315,316
318,319
318,320
319,320
322,323
322,324
323,324
326,327
326,328
327,328
327,329
327,330
328,329
330,331
332,333
334,335
335,336
335,337
336,337
336,338
337,338
340,341
340,342
340,343
340,344
340,345
340,346
340,347
340,348
340,349
340,350
340,351
340,352
341,342
342,343
344,345
345,346
345,347
345,348
346,347
348,349
352,353
353,354
355,356
356,357
356,358
356,359
357,358
359,360
363,364
364,365
366,367
367,368
367,369
367,370
368,369
370,371
375,376
376,377
376,378
376,379
376,380
376,381
377,378
379,380
382,383
382,384
383,384
386,387
386,388
387,388
391,392
392,393
392,394
392,395
393,394
395,396
398,399
398,400
399,400
399,401
399,402
400,401
402,403
404,405
406,407
407,408
407,409
407,410
407,411
407,412
408,409
410,411
413,414
413,415
414,415
417,418
417,419
418,419
421,422
421,423
422,423
422,424
422,425
423,424
425,426
427,428
429,430
430,431
430,432
430,433
430,434
431,432
433,434
436,437
436,438
437,438
440,441
440,442
441,442
441,443
441,444
442,443
444,445
446,447
448,449
448,450
449,450
450,451
450,452
450,453
451,452
453,454
456,457
456,458
457,458
457,459
458,459
461,462
461,463
461,464
461,465
461,466
461,467
461,468
461,469
461,470
461,471
461,472
461,473
461,474
461,475
461,476
461,477
461,478
461,479
461,480
461,481
461,482
462,463
463,464
465,466
466,467
466,468
466,469
467,468
469,470
473,474
474,475
476,477
477,478
477,479
477,480
478,479
480,481
484,485
485,486
487,488
488,489
488,490
488,491
489,490
491,492
495,496
496,497
498,499
499,500
499,501
499,502
500,501
502,503
506,507
507,508
509,510
510,511
510,512
510,513
511,512
513,514
517,518
518,519
520,521
521,522
521,523
521,524
522,523
524,525
529,530
530,531
530,532
530,533
530,534
530,535
531,532
533,534
536,537
536,538
537,538
540,541
540,542
541,542
545,546
545,547
546,547
546,548
546,549
547,548
549,550
551,552
553,554
553,555
553,556
554,555
555,556
555,557
556,557
558,559
558,560
558,561
561,562
562,563
562,564
563,564
565,566
565,567
566,567
569,570
570,571
570,572
570,573
571,572
573,574
576,577
576,578
576,579
577,578
579,580
580,581
580,582
580,583
580,584
581,582
583,584
586,587
586,588
587,588
590,591
591,592
591,593
591,594
591,595
591,596
592,593
594,595
597,598
597,599
598,599
601,602
601,603
602,603
605,606
605,607
606,607
606,608
606,609
607,608
609,610
611,612
613,614
613,615
614,615
615,616
615,617
615,618
616,617
618,619
621,622
621,623
621,624
622,623
622,624
623,624
623,625
624,625
627,628
629,630
630,631
630,632
630,633
630,634
631,632
633,634
636,637
636,638
637,638
639,640
639,641
640,641
643,644
644,645
644,646
645,646
645,647
646,647
649,650
649,651
649,652
649,653
649,654
649,655
649,656
649,657
649,658
650,651
651,652
653,654
654,655
654,656
654,657
655,656
657,658
661,662
662,663
664,665
665,666
665,667
665,668
666,667
668,669
673,674
674,675
674,676
674,677
674,678
674,679
675,676
677,678
680,681
680,682
681,682
684,685
684,686
685,686
689,690
689,691
690,691
690,692
691,692
691,693
691,694
692,693
694,695
696,697
698,699
698,700
699,700
702,703
702,704
702,705
702,706
702,707
703,704
704,705
704,706
705,706
707,708
709,710
710,711
710,712
710,713
710,714
711,712
713,714
716,717
716,718
717,718
720,721
721,722
721,723
722,723
725,726
725,727
725,728
725,729
726,727
727,728
727,729
728,729
731,732
731,733
732,733
734,735
734,736
735,736
738,739
739,740
741,742
741,743
742,743
742,744
743,744
743,745
744,745
744,746
745,746
748,749
750,751
750,752
750,753
750,754
750,755
750,756
750,757
750,758
750,759
750,760
750,761
750,762
751,752
752,753
754,755
755,756
755,757
755,758
755,759
756,757
758,759
761,762
764,765
765,766
767,768
768,769
768,770
768,771
768,772
769,770
771,772
774,775
777,778
778,779
780,781
781,782
781,783
781,784
781,785
782,783
784,785
787,788
791,792
792,793
792,794
792,795
792,796
792,797
792,798
793,794
795,796
798,799
800,801
800,802
801,802
801,803
802,803
805,806
807,808
807,809
808,809
808,810
809,810
812,813
815,816
816,817
816,818
817,818
820,821
821,822
821,823
821,824
822,823
824,825
827,828
827,829
828,829
828,830
828,831
829,830
831,832
833,834
835,836
835,837
835,838
835,839
835,840
835,841
835,842
836,837
837,838
837,839
839,840
839,841
842,843
843,844
843,845
844,845
846,847
848,849
849,850
849,851
849,852
850,851
852,853
855,856
856,857
856,858
857,858
859,860
859,861
860,861
863,864
864,865
864,866
865,866
868,869
868,870
868,871
868,872
869,870
870,871
870,872
871,872
873,874
873,875
874,875
877,878
877,879
878,879
878,880
879,880
882,883
882,884
883,884
885,886
885,887
886,887
886,888
887,888
890,891
890,892
891,892
894,895
894,896
895,896
895,897
896,897
898,899
898,900
899,900
899,901
899,902
900,901
902,903
906,907
907,908
909,910
909,911
909,912
909,913
910,911
911,912
911,913
912,913
914,915
914,916
916,917
917,918
917,919
918,919
918,920
919,920
922,923
923,924
923,925
924,925
926,927
926,928
927,928
930,931
931,932
931,933
931,934
932,933
934,935
936,937
938,939
939,940
939,941
939,942
939,943
940,941
942,943
944,945
946,947
948,949
949,950
949,951
950,951
953,954
954,955
954,956
954,957
955,956
958,959
960,961
960,962
961,962
961,963
961,964
962,963
964,965
966,967
968,969
968,970
969,970
970,971
970,972
970,973
971,972
973,974
976,977
976,978
977,978
977,979
978,979
981,982
981,983
981,984
981,985
981,986
981,987
981,988
981,989
981,990
981,991
981,992
981,993
982,983
983,984
985,986
986,987
986,988
986,989
987,988
989,990
993,994
994,995
996,997
997,998
997,999
997,1000
998,999
1000,1001
1004,1005
1005,1006
1007,1008
1008,1009
1008,1010
1008,1011
1009,1010
1011,1012
1016,1017
1017,1018
1017,1019
1017,1020
1017,1021
1017,1022
1018,1019
1020,1021
1023,1024
1023,1025
1024,1025
1027,1028
1027,1029
1028,1029
1032,1033
1032,1034
1033,1034
1033,1035
1033,1036
1034,1035
1036,1037
1038,1039
1040,1041
1040,1042
1041,1042
1042,1043
1042,1044
1042,1045
1043,1044
1045,1046
1048,1049
1048,1050
1049,1050
1049,1051
1050,1051
1053,1054
1053,1055
1053,1056
1053,1057
1053,1058
1053,1059
1053,1060
1053,1061
1053,1062
1054,1055
1055,1056
1057,1058
1058,1059
1058,1060
1058,1061
1059,1060
1061,1062
1065,1066
1066,1067
1068,1069
1069,1070
1069,1071
1069,1072
1070,1071
1072,1073
1077,1078
1078,1079
1078,1080
1078,1081
1078,1082
1078,1083
1079,1080
1081,1082
1084,1085
1084,1086
1085,1086
1088,1089
1088,1090
1089,1090
1093,1094
1093,1095
1094,1095
1094,1096
1094,1097
1095,1096
1097,1098
1099,1100
1101,1102
1102,1103
1103,1104
1103,1105
1103,1106
1103,1107
1103,1108
1104,1105
1106,1107
1109,1110
1109,1111
1110,1111
1110,1112
1111,1112
1115,1116
1115,1117
1116,1117
1116,1118
1117,1118
1121,1122
1121,1123
1122,1123
1122,1124
1122,1125
1123,1124
1125,1126
1127,1128
1129,1130
1129,1131
1130,1131
1131,1132
1131,1133
1131,1134
1132,1133
1134,1135
1137,1138
1137,1139
1138,1139
1138,1140
1139,1140
1142,1143
1142,1144
1142,1145
1142,1146
1142,1147
1142,1148
1142,1149
1142,1150
1142,1151
1143,1144
1144,1145
1146,1147
1147,1148
1147,1149
1147,1150
1148,1149
1150,1151
1154,1155
1155,1156
1157,1158
1158,1159
1158,1160
1158,1161
1159,1160
1161,1162
1166,1167
1167,1168
1167,1169
1167,1170
1167,1171
1167,1172
1168,1169
1170,1171
1173,1174
1173,1175
1174,1175
1177,1178
1177,1179
1178,1179
1182,1183
1182,1184
1183,1184
1183,1185
1183,1186
1184,1185
1186,1187
1188,1189
1190,1191
1191,1192
1191,1193
1191,1194
1191,1195
1191,1196
1192,1193
1194,1195
1197,1198
1197,1199
1198,1199
1198,1200
1199,1200
1203,1204
1203,1205
1204,1205
1204,1206
1205,1206
1209,1210
1209,1211
1210,1211
1210,1212
1210,1213
1211,1212
1213,1214
1215,1216
1217,1218
1217,1219
1218,1219
1219,1220
1219,1221
1219,1222
1220,1221
1222,1223
1225,1226
1225,1227
1225,1228
1226,1227
1226,1228
1227,1228
1227,1229
1228,1229
1231,1232
1233,1234
1234,1235
1234,1236
1234,1237
1234,1238
1235,1236
1237,1238
1240,1241
1240,1242
1241,1242
1243,1244
1243,1245
1244,1245
1247,1248
1248,1249
1248,1250
1248,1251
1248,1252
1248,1253
1249,1250
1251,1252
1254,1255
1254,1256
1255,1256
1258,1259
1258,1260
1259,1260
1262,1263
1262,1264
1263,1264
1263,1265
1263,1266
1264,1265
1266,1267
1268,1269
1270,1271
1271,1272
1271,1273
1271,1274
1271,1275
1272,1273
1274,1275
1277,1278
1277,1279
1278,1279
1281,1282
1281,1283
1282,1283
1282,1284
1282,1285
1283,1284
1285,1286
1287,1288
1289,1290
1289,1291
1290,1291
1291,1292
1291,1293
1291,1294
1292,1293
1294,1295
1297,1298
1297,1299
1297,1300
1298,1299
1298,1300
1299,1300
1299,1301
1300,1301
1303,1304
1303,1305
1304,1305
1305,1306
1308,1309
1309,1310
1309,1311
1309,1312
1310,1311
1312,1313
1315,1316
1316,1317
1316,1318
1316,1319
1316,1320
1317,1318
1319,1320
1322,1323
1322,1324
1323,1324
1323,1325
1326,1327
1326,1328
1327,1328
1330,1331
1330,1332
1331,1332
1331,1333
1331,1334
1332,1333
1334,1335
1336,1337
1338,1339
1339,1340
1339,1341
1339,1342
1339,1343
1340,1341
1342,1343
1345,1346
1345,1347
1346,1347
1349,1350
1349,1351
1350,1351
1350,1352
1350,1353
1351,1352
1353,1354
1355,1356
1357,1358
1358,1359
1358,1360
1358,1361
1358,1362
1359,1360
1361,1362
1364,1365
1364,1366
1365,1366
1368,1369
1368,1370
1369,1370
1369,1371
1369,1372
1370,1371
1372,1373
1374,1375
1376,1377
1376,1378
1376,1379
1376,1380
1376,1381
1377,1378
1378,1379
1378,1380
1380,1381
1382,1383
1383,1384
1383,1385
1385,1386
1385,1387
1387,1388
1388,1389
1388,1390
1388,1391
1389,1390
1390,1391
1390,1392
1391,1392
1391,1393
1392,1393
1395,1396
1397,1398
1397,1399
1398,1399
1402,1403
1403,1404
1403,1405
1403,1406
1404,1405
1406,1407
1409,1410
1409,1411
1409,1412
1409,1413
1410,1411
1411,1412
1411,1413
1412,1413
1415,1416
1415,1417
1416,1417
1418,1419
1420,1421
1421,1422
1423,1424
1424,1425
1424,1426
1424,1427
1424,1428
1425,1426
1427,1428
1430,1431
1430,1432
1431,1432
1431,1433
1432,1433
1435,1436
1437,1438
1438,1439
1438,1440
1438,1441
1439,1440
1441,1442
1444,1445
1444,1446
1445,1446
1445,1447
1445,1448
1446,1447
1448,1449
1450,1451
1452,1453
1452,1454
1452,1455
1452,1456
1452,1457
1453,1454
1454,1455
1454,1456
1456,1457
1458,1459
1459,1460
1459,1461
1461,1462
1461,1463
1463,1464
1464,1465
1464,1466
1464,1467
1465,1466
1466,1467
1466,1468
1467,1468
1467,1469
1468,1469
1471,1472
1473,1474
1473,1475
1474,1475
1478,1479
1479,1480
1479,1481
1479,1482
1480,1481
1482,1483
1485,1486
1485,1487
1485,1488
1485,1489
1486,1487
1487,1488
1487,1489
1488,1489
1491,1492
1491,1493
1492,1493
1494,1495
1496,1497
1497,1498
1499,1500
1500,1501
1500,1502
1500,1503
1500,1504
1501,1502
1503,1504
1506,1507
1506,1508
1507,1508
1507,1509
1508,1509
1511,1512
1513,1514
1514,1515
1514,1516
1514,1517
1515,1516
1517,1518
1520,1521
1520,1522
1521,1522
1521,1523
1521,1524
1522,1523
1524,1525
1526,1527
1528,1529
1528,1530
1529,1530
1530,1531
1530,1532
1530,1533
1531,1532
1533,1534
1536,1537
1536,1538
1537,1538
1537,1539
1538,1539
1541,1542
1541,1543
1541,1544
1541,1545
1541,1546
1541,1547
1541,1548
1541,1549
1541,1550
1542,1543
1543,1544
1545,1546
1546,1547
1546,1548
1546,1549
1547,1548
1549,1550
1553,1554
1554,1555
1556,1557
1557,1558
1557,1559
1557,1560
1558,1559
1560,1561
1565,1566
1566,1567
1566,1568
1566,1569
1566,1570
1566,1571
1567,1568
1569,1570
1572,1573
1572,1574
1573,1574
1576,1577
1576,1578
1577,1578
1581,1582
1581,1583
1582,1583
1582,1584
1582,1585
1583,1584
1585,1586
1587,1588
1589,1590
1590,1591
1590,1592
1590,1593
1590,1594
1590,1595
1591,1592
1593,1594
1596,1597
1596,1598
1597,1598
1597,1599
1598,1599
1602,1603
1602,1604
1603,1604
1603,1605
1604,1605
1608,1609
1608,1610
1609,1610
1609,1611
1609,1612
1610,1611
1612,1613
1614,1615
1616,1617
1616,1618
1617,1618
1618,1619
1618,1620
1618,1621
1619,1620
1621,1622
1624,1625
1624,1626
1624,1627
1625,1626
1625,1627
1626,1627
1628,1629
1630,1631
1630,1632
1630,1633
1631,1632
1632,1633
1632,1634
1632,1635
1633,1634
1635,1636
1638,1639
1639,1640
1639,1641
1640,1641
1642,1643
1642,1644
1644,1645
1644,1646
1645,1646
1648,1649
1648,1650
1648,1651
1648,1652
1649,1650
1650,1651
1650,1652
1651,1652
1654,1655
1654,1656
1655,1656
1657,1658
1659,1660
1660,1661
1662,1663
1663,1664
1663,1665
1663,1666
1663,1667
1663,1668
1663,1669
1663,1670
1664,1665
1666,1667
1669,1670
1671,1672
1671,1673
1672,1673
1672,1674
1673,1674
1673,1675
1674,1675
1678,1679
1680,1681
1680,1682
1681,1682
1681,1683
1682,1683
1682,1684
1683,1684
1687,1688
1689,1690
1689,1691
1690,1691
1690,1692
1691,1692
1691,1693
1692,1693
1696,1697
1698,1699
1699,1700
1699,1701
1699,1702
1700,1701
1702,1703
1705,1706
1705,1707
1706,1707
1706,1708
1706,1709
1707,1708
1709,1710
1711,1712
1713,1714
1713,1715
1713,1716
1714,1715
1715,1716
1715,1717
1717,1718
1719,1720
1720,1721
1720,1722
1720,1723
1721,1722
1723,1724
1726,1727
1726,1728
1726,1729
1726,1730
1727,1728
1728,1729
1728,1730
1729,1730
1732,1733
1732,1734
1733,1734
1736,1737
1737,1738
1739,1740
1740,1741
1740,1742
1740,1743
1740,1744
1740,1745
1740,1746
1741,1742
1743,1744
1746,1747
1748,1749
1748,1750
1749,1750
1749,1751
1750,1751
1753,1754
1753,1755
1754,1755
1754,1756
1756,1757
1759,1760
1759,1761
1760,1761
1760,1762
1761,1762
1764,1765
1764,1766
1765,1766
1765,1767
1767,1768
1770,1771
1770,1772
1771,1772
1771,1773
1771,1774
1772,1773
1774,1775
1776,1777
1778,1779
1778,1780
1779,1780
1780,1781
1780,1782
1780,1783
1781,1782
1783,1784
1786,1787
1786,1788
1786,1789
1787,1788
1787,1789
1788,1789
1790,1791
1792,1793
1792,1794
1792,1795
1793,1794
1794,1795
1794,1796
1794,1797
1795,1796
1797,1798
1800,1801
1801,1802
1801,1803
1802,1803
1804,1805
1804,1806
1806,1807
1806,1808
1807,1808
1810,1811
1810,1812
1810,1813
1810,1814
1811,1812
1812,1813
1812,1814
1813,1814
1816,1817
1816,1818
1817,1818
1819,1820
1821,1822
1822,1823
1824,1825
1824,1826
1824,1827
1824,1828
1825,1826
1826,1827
1826,1828
1827,1828
1829,1830
1831,1832
1832,1833
1832,1834
1832,1835
1832,1836
1832,1837
1833,1834
1835,1836
1838,1839
1840,1841
1840,1842
1841,1842
1841,1843
1842,1843
1842,1844
1843,1844
1847,1848
1849,1850
1849,1851
1849,1852
1849,1853
1850,1851
1851,1852
1851,1853
1852,1853
1855,1856
1855,1857
1856,1857
1858,1859
1858,1860
1859,1860
1862,1863
1863,1864
1865,1866
1866,1867
1866,1868
1866,1869
1866,1870
1867,1868
1869,1870
1872,1873
1872,1874
1873,1874
1873,1875
1874,1875
1874,1876
1875,1876
1878,1879
1880,1881
1882,1883
1883,1884
1883,1885
1883,1886
1884,1885
1887,1888
1889,1890
1890,1891
1890,1892
1890,1893
1891,1892
1893,1894
1896,1897
1896,1898
1897,1898
1897,1899
1898,1899
1898,1900
1898,1901
1899,1900
1901,1902
1903,1904
1905,1906
1906,1907
1906,1908
1907,1908
1910,1911
1910,1912
1910,1913
1910,1914
1911,1912
1912,1913
1912,1914
1913,1914
1915,1916
1917,1918
1918,1919
1918,1920
1918,1921
1919,1920
1921,1922
1924,1925
1924,1926
1924,1927
1924,1928
1925,1926
1926,1927
1926,1928
1927,1928
1930,1931
1930,1932
1931,1932
1933,1934
1933,1935
1934,1935
1937,1938
1938,1939
1940,1941
1941,1942
1941,1943
1941,1944
1941,1945
1942,1943
1944,1945
1947,1948
1947,1949
1948,1949
1948,1950
1951,1952
1951,1953
1952,1953
1952,1954
1953,1954
1956,1957
1958,1959
1959,1960
1959,1961
1959,1962
1960,1961
1963,1964
1965,1966
1965,1967
1965,1968
1965,1969
1966,1967
1967,1968
1967,1969
1969,1970
1971,1972
1972,1973
1972,1974
1974,1975
1976,1977
1977,1978
1977,1979
1978,1979
1980,1981
1980,1982
1981,1982
1981,1983
1984,1985
1984,1986
1985,1986
1987,1988
1989,1990
1989,1991
1989,1992
1989,1993
1990,1991
1991,1992
1991,1993
1992,1993
1995,1996
1995,1997
1996,1997
1998,1999
2000,2001
2001,2002
2003,2004
2003,2005
2003,2006
2003,2007
2003,2008
2003,2009
2003,2010
2003,2011
2003,2012
2003,2013
2004,2005
2005,2006
2005,2007
2006,2007
2008,2009
2008,2010
2010,2011
2011,2012
2011,2013
2011,2014
2012,2013
2014,2015
2016,2017
2018,2019
2019,2020
2019,2021
2020,2021
2022,2023
2022,2024
2025,2026
2026,2027
2026,2028
2027,2028
2029,2030
2031,2032
2032,2033
2032,2034
2034,2035
2034,2036
2036,2037
2038,2039
2039,2040
2039,2041
2041,2042
2041,2043
2044,2045
2045,2046
2045,2047
2046,2047
2048,2049
2048,2050
2048,2051
2049,2050
2051,2052
2053,2054
2055,2056
2055,2057
2056,2057
2056,2058
2057,2058
2059,2060
2062,2063
2062,2064
2062,2065
2063,2064
2063,2065
2064,2065
2067,2068
2068,2069
2068,2070
2068,2071
2069,2070
2069,2071
2070,2071
2070,2072
2071,2072
2074,2075
2076,2077
2077,2078
2077,2079
2078,2079
2078,2080
2079,2080
2079,2081
2079,2082
2079,2083
2079,2084
2080,2081
2082,2083
2084,2085
2086,2087
2087,2088
2089,2090
2090,2091
2094,2095
2094,2096
2094,2097
2095,2096
2095,2097
2096,2097
2096,2098
2097,2098
2100,2101
2102,2103
2102,2104
2102,2105
2103,2104
2104,2105
2104,2106
2105,2106
2107,2108
2109,2110
2109,2111
2110,2111
2110,2112
2111,2112
2111,2113
2111,2114
2111,2115
2111,2116
2112,2113
2114,2115
2116,2117
2118,2119
2119,2120
2121,2122
2122,2123
2126,2127
2127,2128
2127,2129
2128,2129
2130,2131
2132,2133
2132,2134
2133,2134
2134,2135
2134,2136
2135,2136
2137,2138
2137,2139
2138,2139
2138,2140
2139,2140
2139,2141
2140,2141
2143,2144
2145,2146
2145,2147
2146,2147
2146,2148
2147,2148
2150,2151
2153,2154
2153,2155
2154,2155
2154,2156
2154,2157
2155,2156
2155,2157
2156,2157
2156,2158
2157,2158
2157,2159
2158,2159
2161,2162
2163,2164
2163,2165
2164,2165
2164,2166
2165,2166
2168,2169
2170,2171
2171,2172
2171,2173
2172,2173
2175,2176
2175,2177
2175,2178
2176,2177
2176,2178
2177,2178
2177,2179
2178,2179
2181,2182
2183,2184
2184,2185
2184,2186
2185,2186
2187,2188
2187,2189
2188,2189
2191,2192
2192,2193
2192,2194
2193,2194
2195,2196
2195,2197
2196,2197
2199,2200
2199,2201
2199,2202
2200,2201
2200,2202
2201,2202
2201,2203
2202,2203
2202,2204
2203,2204
2206,2207
2208,2209
2208,2210
2209,2210
2209,2211
2209,2212
2210,2211
2212,2213
2212,2214
2213,2214
2218,2219
2218,2220
2218,2221
2219,2220
2220,2221
2220,2222
2221,2222
2223,2224
2223,2225
2225,2226
2227,2228
2228,2229
2228,2230
2229,2230
2231,2232
2233,2234
2234,2235
2234,2236
2234,2237
2234,2238
2234,2239
2235,2236
2237,2238
2239,2240
2241,2242
2241,2243
2242,2243
2245,2246
2245,2247
2246,2247
2249,2250
2249,2251
2249,2252
2250,2251
2250,2252
2251,2252
2251,2253
2252,2253
2252,2254
2253,2254
2253,2255
2254,2255
2254,2256
2255,2256
2255,2257
2256,2257
2259,2260
2261,2262
2261,2263
2262,2263
2262,2264
2263,2264
2266,2267
2268,2269
2268,2270
2269,2270
2269,2271
2270,2271
2273,2274
2275,2276
2275,2277
2276,2277
2276,2278
2277,2278
2280,2281
2282,2283
2282,2284
2283,2284
2286,2287
2287,2288
2287,2289
2288,2289
2288,2290
2289,2290
2289,2291
2289,2292
2289,2293
2290,2291
2292,2293
2294,2295
2296,2297
2297,2298
2301,2302
2301,2303
2301,2304
2302,2303
2303,2304
2303,2305
2304,2305
2306,2307
2306,2308
2307,2308
2309,2310
2309,2311
2310,2311
2310,2312
2311,2312
2313,2314
2313,2315
2314,2315
2317,2318
2319,2320
2320,2321
2320,2322
2321,2322
2324,2325
2324,2326
2325,2326
2325,2327
2326,2327
2326,2328
2326,2329
2326,2330
2327,2328
2329,2330
2331,2332
2333,2334
2336,2337
2336,2338
2337,2338
2338,2339
2338,2340
2339,2340
2341,2342
2344,2345
2344,2346
2345,2346
2346,2347
2346,2348
2346,2349
2346,2350
2346,2351
2346,2352
2346,2353
2347,2348
2349,2350
2351,2352
2353,2354
2355,2356
2357,2358
2359,2360
2361,2362
2362,2363
2362,2364
2362,2365
2362,2366
2362,2367
2363,2364
2365,2366
2367,2368
2369,2370
2371,2372
2373,2374
2373,2375
2374,2375
2376,2377
2377,2378
2377,2379
2378,2379
2380,2381
2382,2383
2382,2384
2383,2384
2383,2385
2384,2385
2384,2386
2385,2386
2389,2390
2390,2391
2390,2392
2390,2393
2390,2394
2391,2392
2392,2393
2393,2394
2393,2395
2394,2395
2394,2396
2395,2396
2399,2400
2401,2402
2403,2404
2405,2406
2406,2407
2406,2408
2407,2408
2409,2410
2411,2412
2411,2413
2412,2413
2412,2414
2413,2414
2414,2415
2414,2416
2415,2416
2417,2418
2419,2420
2419,2421
2419,2422
2420,2421
2422,2423
2424,2425
2426,2427
2426,2428
2426,2429
2427,2428
2428,2429
2428,2430
2429,2430
2431,2432
2433,2434
2434,2435
2434,2436
2434,2437
2434,2438
2434,2439
2435,2436
2437,2438
2440,2441
2440,2442
2441,2442
2441,2443
2444,2445
2444,2446
2445,2446
2448,2449
2448,2450
2448,2451
2449,2450
2449,2451
2450,2451
2452,2453
2456,2457
2456,2458
2456,2459
2456,2460
2457,2458
2458,2459
2458,2460
2459,2460
2462,2463
2462,2464
2463,2464
2465,2466
2465,2467
2466,2467
2469,2470
2470,2471
2472,2473
2473,2474
2473,2475
2473,2476
2473,2477
2473,2478
2473,2479
2474,2475
2476,2477
2479,2480
2479,2481
2480,2481
2480,2482
2483,2484
2485,2486
2485,2487
2486,2487
2486,2488
2489,2490
2489,2491
2490,2491
2490,2492
2491,2492
2494,2495
2496,2497
2496,2498
2497,2498
2497,2499
2500,2501
2500,2502
2501,2502
2501,2503
2502,2503
2505,2506
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,25,27,28,33,34,37,39,40,43,45,47,51,53,54,57,58,61,62,65,66,69,70,74,76,78,83,85,86,90,91,96,97,99,104,106,107,109,113,114,119,120,122,127,129,130,132,136,137,142,143,145,149,151,152,154,158,160,161,164,165,168,169,172,173,176,177,181,183,185,190,192,193,196,197,200,201,204,205,208,209,213,215,217,221,223,224,227,228,231,232,236,238,239,243,245,247,252,254,255,258,259,262,263,266,267,270,271,275,277,279,283,285,286,289,290,293,294,298,300,301,305,307,309,314,316,317,320,321,324,325,329,331,333,338,339,343,347,349,350,351,354,358,360,361,362,365,369,371,372,373,374,378,380,381,384,385,388,389,390,394,396,397,401,403,405,409,411,412,415,416,419,420,424,426,428,432,434,435,438,439,443,445,447,452,454,455,459,460,464,468,470,471,472,475,479,481,482,483,486,490,492,493,494,497,501,503,504,505,508,512,514,515,516,519,523,525,526,527,528,532,534,535,538,539,542,543,544,548,550,552,557,559,560,564,567,568,572,574,575,578,582,584,585,588,589,593,595,596,599,600,603,604,608,610,612,617,619,620,625,626,628,632,634,635,638,641,642,647,648,652,656,658,659,660,663,667,669,670,671,672,676,678,679,682,683,686,687,688,693,695,697,700,701,706,708,712,714,715,718,719,723,724,729,730,733,736,737,740,746,747,749,753,757,759,760,762,763,766,770,772,773,775,776,779,783,785,786,788,789,790,794,796,797,799,803,804,806,810,811,813,814,818,819,823,825,826,830,832,834,838,840,841,845,847,851,853,854,858,861,862,866,867,872,875,876,880,881,884,888,889,892,893,897,901,903,904,905,908,913,915,920,921,925,928,929,933,935,937,941,943,945,947,951,952,956,957,959,963,965,967,972,974,975,979,980,984,988,990,991,992,995,999,1001,1002,1003,1006,1010,1012,1013,1014,1015,1019,1021,1022,1025,1026,1029,1030,1031,1035,1037,1039,1044,1046,1047,1051,1052,1056,1060,1062,1063,1064,1067,1071,1073,1074,1075,1076,1080,1082,1083,1086,1087,1090,1091,1092,1096,1098,1100,1105,1107,1108,1112,1113,1114,1118,1119,1120,1124,1126,1128,1133,1135,1136,1140,1141,1145,1149,1151,1152,1153,1156,1160,1162,1163,1164,1165,1169,1171,1172,1175,1176,1179,1180,1181,1185,1187,1189,1193,1195,1196,1200,1201,1202,1206,1207,1208,1212,1214,1216,1221,1223,1224,1229,1230,1232,1236,1238,1239,1242,1245,1246,1250,1252,1253,1256,1257,1260,1261,1265,1267,1269,1273,1275,1276,1279,1280,1284,1286,1288,1293,1295,1296,1301,1302,1306,1307,1311,1313,1314,1318,1320,1321,1324,1325,1328,1329,1333,1335,1337,1341,1343,1344,1347,1348,1352,1354,1356,1360,1362,1363,1366,1367,1371,1373,1375,1379,1381,1384,1386,1393,1394,1396,1399,1400,1401,1405,1407,1408,1413,1414,1417,1419,1422,1426,1428,1429,1433,1434,1436,1440,1442,1443,1447,1449,1451,1455,1457,1460,1462,1469,1470,1472,1475,1476,1477,1481,1483,1484,1489,1490,1493,1495,1498,1502,1504,1505,1509,1510,1512,1516,1518,1519,1523,1525,1527,1532,1534,1535,1539,1540,1544,1548,1550,1551,1552,1555,1559,1561,1562,1563,1564,1568,1570,1571,1574,1575,1578,1579,1580,1584,1586,1588,1592,1594,1595,1599,1600,1601,1605,1606,1607,1611,1613,1615,1620,1622,1623,1627,1629,1634,1636,1637,1641,1643,1646,1647,1652,1653,1656,1658,1661,1665,1667,1668,1670,1675,1676,1677,1679,1684,1685,1686,1688,1693,1694,1695,1697,1701,1703,1704,1708,1710,1712,1716,1718,1722,1724,1725,1730,1731,1734,1735,1738,1742,1744,1745,1747,1751,1752,1755,1757,1758,1762,1763,1766,1768,1769,1773,1775,1777,1782,1784,1785,1789,1791,1796,1798,1799,1803,1805,1808,1809,1814,1815,1818,1820,1823,1828,1830,1834,1836,1837,1839,1844,1845,1846,1848,1853,1854,1857,1860,1861,1864,1868,1870,1871,1876,1877,1879,1881,1885,1886,1888,1892,1894,1895,1900,1902,1904,1908,1909,1914,1916,1920,1922,1923,1928,1929,1932,1935,1936,1939,1943,1945,1946,1949,1950,1954,1955,1957,1961,1962,1964,1968,1970,1973,1975,1979,1982,1983,1986,1988,1993,1994,1997,1999,2002,2007,2009,2013,2015,2017,2021,2023,2024,2028,2030,2033,2035,2037,2040,2042,2043,2047,2050,2052,2054,2058,2060,2061,2065,2066,2072,2073,2075,2081,2083,2085,2088,2091,2092,2093,2098,2099,2101,2106,2108,2113,2115,2117,2120,2123,2124,2125,2129,2131,2136,2141,2142,2144,2148,2149,2151,2152,2159,2160,2162,2166,2167,2169,2173,2174,2179,2180,2182,2186,2189,2190,2194,2197,2198,2204,2205,2207,2211,2214,2215,2216,2217,2222,2224,2226,2230,2232,2236,2238,2240,2243,2244,2247,2248,2257,2258,2260,2264,2265,2267,2271,2272,2274,2278,2279,2281,2284,2285,2291,2293,2295,2298,2299,2300,2305,2308,2312,2315,2316,2318,2322,2323,2328,2330,2332,2334,2335,2340,2342,2343,2348,2350,2352,2354,2356,2358,2360,2364,2366,2368,2370,2372,2375,2379,2381,2386,2387,2388,2396,2397,2398,2400,2402,2404,2408,2410,2416,2418,2421,2423,2425,2430,2432,2436,2438,2439,2442,2443,2446,2447,2451,2453,2454,2455,2460,2461,2464,2467,2468,2471,2475,2477,2478,2481,2482,2484,2487,2488,2492,2493,2495,2498,2499,2503,2504,2506
-----computeFrom-----
88,89
88,90
93,94
93,95
111,112
111,113
116,117
116,118
134,135
134,136
139,140
139,141
622,623
622,624
690,691
690,692
721,722
721,723
727,728
727,729
731,732
731,733
816,817
816,818
856,857
856,858
864,865
864,866
870,871
870,872
877,878
877,879
878,879
878,880
882,883
882,884
885,886
885,887
895,896
895,897
898,899
898,900
917,918
917,919
923,924
923,925
949,950
949,951
1226,1227
1226,1228
1298,1299
1298,1300
1303,1304
1303,1305
1390,1391
1390,1392
1411,1412
1411,1413
1415,1416
1415,1417
1466,1467
1466,1468
1487,1488
1487,1489
1491,1492
1491,1493
1625,1626
1625,1627
1639,1640
1639,1641
1642,1643
1642,1644
1650,1651
1650,1652
1654,1655
1654,1656
1728,1729
1728,1730
1732,1733
1732,1734
1753,1754
1753,1755
1754,1755
1754,1756
1764,1765
1764,1766
1765,1766
1765,1767
1787,1788
1787,1789
1801,1802
1801,1803
1804,1805
1804,1806
1812,1813
1812,1814
1816,1817
1816,1818
1851,1852
1851,1853
1855,1856
1855,1857
1897,1898
1897,1899
1926,1927
1926,1928
1930,1931
1930,1932
1977,1978
1977,1979
1991,1992
1991,1993
1995,1996
1995,1997
2045,2046
2045,2047
2056,2057
2056,2058
2069,2070
2069,2071
2078,2079
2078,2080
2095,2096
2095,2097
2110,2111
2110,2112
2127,2128
2127,2129
2137,2138
2137,2139
2138,2139
2138,2140
2145,2146
2145,2147
2155,2156
2155,2157
2156,2157
2156,2158
2163,2164
2163,2165
2171,2172
2171,2173
2176,2177
2176,2178
2184,2185
2184,2186
2192,2193
2192,2194
2200,2201
2200,2202
2201,2202
2201,2203
2208,2209
2208,2210
2228,2229
2228,2230
2241,2242
2241,2243
2245,2246
2245,2247
2250,2251
2250,2252
2251,2252
2251,2253
2252,2253
2252,2254
2253,2254
2253,2255
2254,2255
2254,2256
2261,2262
2261,2263
2268,2269
2268,2270
2275,2276
2275,2277
2282,2283
2282,2284
2288,2289
2288,2290
2303,2304
2303,2305
2309,2310
2309,2311
2320,2321
2320,2322
2325,2326
2325,2327
2412,2413
2412,2414
2414,2415
2414,2416
2458,2459
2458,2460
2462,2463
2462,2464
-----guardedBy-----
625,641
626,642
700,810
701,737
1229,1245
1230,1246
1908,1954
1909,1955
2334,2342
2423,2453
-----guardedByNegation-----
625,686
626,687
1229,1260
1230,1261
1301,1328
1302,1329
2075,2151
2073,2149
2072,2148
2099,2149
2101,2144
2098,2148
2167,2198
2166,2197
2180,2198
2179,2197
2214,2315
2278,2315
2258,2316
2284,2318
-----lastLexicalUse-----
625,686
626,687
1229,1260
1230,1261
-----jump-----
625,686
626,687
1229,1260
1230,1261
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;SwitchStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionList;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ContinueStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ContinueStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
voidTIFFPrintDirectory(TIFF* tif, FILE* fd, long flags){	TIFFDirectory *td = &tif->tif_dir;	char *sep;	long l, n;#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))	fprintf(fd, "TIFF Directory at offset 0x%I64x (%I64u)\n",		(unsigned __int64) tif->tif_diroff,		(unsigned __int64) tif->tif_diroff);#else	fprintf(fd, "TIFF Directory at offset 0x%llx (%llu)\n",		(unsigned long long) tif->tif_diroff,		(unsigned long long) tif->tif_diroff);#endif	if (TIFFFieldSet(tif,FIELD_SUBFILETYPE)) {		fprintf(fd, "  Subfile Type:");		sep = " ";		if (td->td_subfiletype & FILETYPE_REDUCEDIMAGE) {			fprintf(fd, "%sreduced-resolution image", sep);			sep = "/";		}		if (td->td_subfiletype & FILETYPE_PAGE) {			fprintf(fd, "%smulti-page document", sep);			sep = "/";		}		if (td->td_subfiletype & FILETYPE_MASK)			fprintf(fd, "%stransparency mask", sep);		fprintf(fd, " (%lu = 0x%lx)\n",		    (unsigned long) td->td_subfiletype, (long) td->td_subfiletype);	}	if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)) {		fprintf(fd, "  Image Width: %lu Image Length: %lu",		    (unsigned long) td->td_imagewidth, (unsigned long) td->td_imagelength);		if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			fprintf(fd, " Image Depth: %lu",			    (unsigned long) td->td_imagedepth);		fprintf(fd, "\n");	}	if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS)) {		fprintf(fd, "  Tile Width: %lu Tile Length: %lu",		    (unsigned long) td->td_tilewidth, (unsigned long) td->td_tilelength);		if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			fprintf(fd, " Tile Depth: %lu",			    (unsigned long) td->td_tiledepth);		fprintf(fd, "\n");	}	if (TIFFFieldSet(tif,FIELD_RESOLUTION)) {		fprintf(fd, "  Resolution: %g, %g",		    td->td_xresolution, td->td_yresolution);		if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)) {			switch (td->td_resolutionunit) {			case RESUNIT_NONE:				fprintf(fd, " (unitless)");				break;			case RESUNIT_INCH:				fprintf(fd, " pixels/inch");				break;			case RESUNIT_CENTIMETER:				fprintf(fd, " pixels/cm");				break;			default:				fprintf(fd, " (unit %u = 0x%x)",				    td->td_resolutionunit,				    td->td_resolutionunit);				break;			}		}		fprintf(fd, "\n");	}	if (TIFFFieldSet(tif,FIELD_POSITION))		fprintf(fd, "  Position: %g, %g\n",		    td->td_xposition, td->td_yposition);	if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))		fprintf(fd, "  Bits/Sample: %u\n", td->td_bitspersample);	if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT)) {		fprintf(fd, "  Sample Format: ");		switch (td->td_sampleformat) {		case SAMPLEFORMAT_VOID:			fprintf(fd, "void\n");			break;		case SAMPLEFORMAT_INT:			fprintf(fd, "signed integer\n");			break;		case SAMPLEFORMAT_UINT:			fprintf(fd, "unsigned integer\n");			break;		case SAMPLEFORMAT_IEEEFP:			fprintf(fd, "IEEE floating point\n");			break;		case SAMPLEFORMAT_COMPLEXINT:			fprintf(fd, "complex signed integer\n");			break;		case SAMPLEFORMAT_COMPLEXIEEEFP:			fprintf(fd, "complex IEEE floating point\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_sampleformat, td->td_sampleformat);			break;		}	}	if (TIFFFieldSet(tif,FIELD_COMPRESSION)) {		const TIFFCodec* c = TIFFFindCODEC(td->td_compression);		fprintf(fd, "  Compression Scheme: ");		if (c)			fprintf(fd, "%s\n", c->name);		else			fprintf(fd, "%u (0x%x)\n",			    td->td_compression, td->td_compression);	}	if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC)) {		fprintf(fd, "  Photometric Interpretation: ");		if (td->td_photometric < NPHOTONAMES)			fprintf(fd, "%s\n", photoNames[td->td_photometric]);		else {			switch (td->td_photometric) {			case PHOTOMETRIC_LOGL:				fprintf(fd, "CIE Log2(L)\n");				break;			case PHOTOMETRIC_LOGLUV:				fprintf(fd, "CIE Log2(L) (u',v')\n");				break;			default:				fprintf(fd, "%u (0x%x)\n",				    td->td_photometric, td->td_photometric);				break;			}		}	}	if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES) && td->td_extrasamples) {		uint16 i;		fprintf(fd, "  Extra Samples: %u<", td->td_extrasamples);		sep = "";		for (i = 0; i < td->td_extrasamples; i++) {			switch (td->td_sampleinfo[i]) {			case EXTRASAMPLE_UNSPECIFIED:				fprintf(fd, "%sunspecified", sep);				break;			case EXTRASAMPLE_ASSOCALPHA:				fprintf(fd, "%sassoc-alpha", sep);				break;			case EXTRASAMPLE_UNASSALPHA:				fprintf(fd, "%sunassoc-alpha", sep);				break;			default:				fprintf(fd, "%s%u (0x%x)", sep,				    td->td_sampleinfo[i], td->td_sampleinfo[i]);				break;			}			sep = ", ";		}		fprintf(fd, ">\n");	}	if (TIFFFieldSet(tif,FIELD_INKNAMES)) {		char* cp;		uint16 i;		fprintf(fd, "  Ink Names: ");		i = td->td_samplesperpixel;		sep = "";		for (cp = td->td_inknames; 		     i > 0 && cp < td->td_inknames + td->td_inknameslen; 		     cp = strchr(cp,'\0')+1, i--) {			size_t max_chars = 				td->td_inknameslen - (cp - td->td_inknames);			fputs(sep, fd);			_TIFFprintAsciiBounded(fd, cp, max_chars);			sep = ", ";		}                fputs("\n", fd);	}	if (TIFFFieldSet(tif,FIELD_THRESHHOLDING)) {		fprintf(fd, "  Thresholding: ");		switch (td->td_threshholding) {		case THRESHHOLD_BILEVEL:			fprintf(fd, "bilevel art scan\n");			break;		case THRESHHOLD_HALFTONE:			fprintf(fd, "halftone or dithered scan\n");			break;		case THRESHHOLD_ERRORDIFFUSE:			fprintf(fd, "error diffused\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_threshholding, td->td_threshholding);			break;		}	}	if (TIFFFieldSet(tif,FIELD_FILLORDER)) {		fprintf(fd, "  FillOrder: ");		switch (td->td_fillorder) {		case FILLORDER_MSB2LSB:			fprintf(fd, "msb-to-lsb\n");			break;		case FILLORDER_LSB2MSB:			fprintf(fd, "lsb-to-msb\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_fillorder, td->td_fillorder);			break;		}	}	if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))        {		fprintf(fd, "  YCbCr Subsampling: %u, %u\n",			td->td_ycbcrsubsampling[0], td->td_ycbcrsubsampling[1] );	}	if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING)) {		fprintf(fd, "  YCbCr Positioning: ");		switch (td->td_ycbcrpositioning) {		case YCBCRPOSITION_CENTERED:			fprintf(fd, "centered\n");			break;		case YCBCRPOSITION_COSITED:			fprintf(fd, "cosited\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_ycbcrpositioning, td->td_ycbcrpositioning);			break;		}	}	if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))		fprintf(fd, "  Halftone Hints: light %u dark %u\n",		    td->td_halftonehints[0], td->td_halftonehints[1]);	if (TIFFFieldSet(tif,FIELD_ORIENTATION)) {		fprintf(fd, "  Orientation: ");		if (td->td_orientation < NORIENTNAMES)			fprintf(fd, "%s\n", orientNames[td->td_orientation]);		else			fprintf(fd, "%u (0x%x)\n",			    td->td_orientation, td->td_orientation);	}	if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))		fprintf(fd, "  Samples/Pixel: %u\n", td->td_samplesperpixel);	if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP)) {		fprintf(fd, "  Rows/Strip: ");		if (td->td_rowsperstrip == (uint32) -1)			fprintf(fd, "(infinite)\n");		else			fprintf(fd, "%lu\n", (unsigned long) td->td_rowsperstrip);	}	if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))		fprintf(fd, "  Min Sample Value: %u\n", td->td_minsamplevalue);	if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))		fprintf(fd, "  Max Sample Value: %u\n", td->td_maxsamplevalue);	if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE)) {		int i;		int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;		fprintf(fd, "  SMin Sample Value:");		for (i = 0; i < count; ++i)			fprintf(fd, " %g", td->td_sminsamplevalue[i]);		fprintf(fd, "\n");	}	if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE)) {		int i;		int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;		fprintf(fd, "  SMax Sample Value:");		for (i = 0; i < count; ++i)			fprintf(fd, " %g", td->td_smaxsamplevalue[i]);		fprintf(fd, "\n");	}	if (TIFFFieldSet(tif,FIELD_PLANARCONFIG)) {		fprintf(fd, "  Planar Configuration: ");		switch (td->td_planarconfig) {		case PLANARCONFIG_CONTIG:			fprintf(fd, "single image plane\n");			break;		case PLANARCONFIG_SEPARATE:			fprintf(fd, "separate image planes\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_planarconfig, td->td_planarconfig);			break;		}	}	if (TIFFFieldSet(tif,FIELD_PAGENUMBER))		fprintf(fd, "  Page Number: %u-%u\n",		    td->td_pagenumber[0], td->td_pagenumber[1]);	if (TIFFFieldSet(tif,FIELD_COLORMAP)) {		fprintf(fd, "  Color Map: ");		if (flags & TIFFPRINT_COLORMAP) {			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++)				fprintf(fd, "   %5ld: %5u %5u %5u\n",				    l,				    td->td_colormap[0][l],				    td->td_colormap[1][l],				    td->td_colormap[2][l]);		} else			fprintf(fd, "(present)\n");	}	if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE)) {		int i;		fprintf(fd, "  Reference Black/White:\n");		for (i = 0; i < 3; i++)		fprintf(fd, "    %2d: %5g %5g\n", i,			td->td_refblackwhite[2*i+0],			td->td_refblackwhite[2*i+1]);	}	if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION)) {		fprintf(fd, "  Transfer Function: ");		if (flags & TIFFPRINT_CURVES) {			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++) {				uint16 i;				fprintf(fd, "    %2ld: %5u",				    l, td->td_transferfunction[0][l]);				for (i = 1; i < td->td_samplesperpixel; i++)					fprintf(fd, " %5u",					    td->td_transferfunction[i][l]);				fputc('\n', fd);			}		} else			fprintf(fd, "(present)\n");	}	if (TIFFFieldSet(tif, FIELD_SUBIFD) && (td->td_subifd)) {		uint16 i;		fprintf(fd, "  SubIFD Offsets:");		for (i = 0; i < td->td_nsubifd; i++)#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))			fprintf(fd, " %5I64u",				(unsigned __int64) td->td_subifd[i]);#else			fprintf(fd, " %5llu",				(unsigned long long) td->td_subifd[i]);#endif		fputc('\n', fd);	}	/*	** Custom tag support.	*/	{		int  i;		short count;		count = (short) TIFFGetTagListCount(tif);		for(i = 0; i < count; i++) {			uint32 tag = TIFFGetTagListEntry(tif, i);			const TIFFField *fip;			uint32 value_count;			int mem_alloc = 0;			void *raw_data;			fip = TIFFFieldWithTag(tif, tag);			if(fip == NULL)				continue;			if(fip->field_passcount) {				if (fip->field_readcount == TIFF_VARIABLE2 ) {					if(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)						continue;				} else if (fip->field_readcount == TIFF_VARIABLE ) {					uint16 small_value_count;					if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)						continue;					value_count = small_value_count;				} else {					assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2);					continue;				} 			} else {				if (fip->field_readcount == TIFF_VARIABLE				    || fip->field_readcount == TIFF_VARIABLE2)					value_count = 1;				else if (fip->field_readcount == TIFF_SPP)					value_count = td->td_samplesperpixel;				else					value_count = fip->field_readcount;				if (fip->field_tag == TIFFTAG_DOTRANGE				    && strcmp(fip->field_name,"DotRange") == 0) {					/* TODO: This is an evil exception and should not have been					   handled this way ... likely best if we move it into					   the directory structure with an explicit field in 					   libtiff 4.1 and assign it a FIELD_ value */					static uint16 dotrange[2];					raw_data = dotrange;					TIFFGetField(tif, tag, dotrange+0, dotrange+1);				} else if (fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2					   || fip->field_readcount == TIFF_SPP					   || value_count > 1) {					if(TIFFGetField(tif, tag, &raw_data) != 1)						continue;				} else {					raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count);					mem_alloc = 1;					if(TIFFGetField(tif, tag, raw_data) != 1) {						_TIFFfree(raw_data);						continue;					}				}			}			/*			 * Catch the tags which needs to be specially handled			 * and pretty print them. If tag not handled in			 * _TIFFPrettyPrintField() fall down and print it as			 * any other tag.			 */			if (!_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data))				_TIFFPrintField(fd, fip, value_count, raw_data);			if(mem_alloc)				_TIFFfree(raw_data);		}	}        	if (tif->tif_tagmethods.printdir)		(*tif->tif_tagmethods.printdir)(tif, fd, flags);        _TIFFFillStriles( tif );        	if ((flags & TIFFPRINT_STRIPS) &&	    TIFFFieldSet(tif,FIELD_STRIPOFFSETS)) {		uint32 s;		fprintf(fd, "  %lu %s:\n",		    (unsigned long) td->td_nstrips,		    isTiled(tif) ? "Tiles" : "Strips");		for (s = 0; s < td->td_nstrips; s++)#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))			fprintf(fd, "    %3lu: [%8I64u, %8I64u]\n",			    (unsigned long) s,			    (unsigned __int64) td->td_stripoffset[s],			    (unsigned __int64) td->td_stripbytecount[s]);#else			fprintf(fd, "    %3lu: [%8llu, %8llu]\n",			    (unsigned long) s,			    (unsigned long long) td->td_stripoffset[s],			    (unsigned long long) td->td_stripbytecount[s]);#endif	}}
void
TIFFPrintDirectory(TIFF* tif, FILE* fd, long flags)
TIFFPrintDirectory
TIFF* tif
TIFF
TIFF
* tif
*
tif
FILE* fd
FILE
FILE
* fd
*
fd
long flags
long
flags
flags
{	TIFFDirectory *td = &tif->tif_dir;	char *sep;	long l, n;#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))	fprintf(fd, "TIFF Directory at offset 0x%I64x (%I64u)\n",		(unsigned __int64) tif->tif_diroff,		(unsigned __int64) tif->tif_diroff);#else	fprintf(fd, "TIFF Directory at offset 0x%llx (%llu)\n",		(unsigned long long) tif->tif_diroff,		(unsigned long long) tif->tif_diroff);#endif	if (TIFFFieldSet(tif,FIELD_SUBFILETYPE)) {		fprintf(fd, "  Subfile Type:");		sep = " ";		if (td->td_subfiletype & FILETYPE_REDUCEDIMAGE) {			fprintf(fd, "%sreduced-resolution image", sep);			sep = "/";		}		if (td->td_subfiletype & FILETYPE_PAGE) {			fprintf(fd, "%smulti-page document", sep);			sep = "/";		}		if (td->td_subfiletype & FILETYPE_MASK)			fprintf(fd, "%stransparency mask", sep);		fprintf(fd, " (%lu = 0x%lx)\n",		    (unsigned long) td->td_subfiletype, (long) td->td_subfiletype);	}	if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)) {		fprintf(fd, "  Image Width: %lu Image Length: %lu",		    (unsigned long) td->td_imagewidth, (unsigned long) td->td_imagelength);		if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			fprintf(fd, " Image Depth: %lu",			    (unsigned long) td->td_imagedepth);		fprintf(fd, "\n");	}	if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS)) {		fprintf(fd, "  Tile Width: %lu Tile Length: %lu",		    (unsigned long) td->td_tilewidth, (unsigned long) td->td_tilelength);		if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			fprintf(fd, " Tile Depth: %lu",			    (unsigned long) td->td_tiledepth);		fprintf(fd, "\n");	}	if (TIFFFieldSet(tif,FIELD_RESOLUTION)) {		fprintf(fd, "  Resolution: %g, %g",		    td->td_xresolution, td->td_yresolution);		if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)) {			switch (td->td_resolutionunit) {			case RESUNIT_NONE:				fprintf(fd, " (unitless)");				break;			case RESUNIT_INCH:				fprintf(fd, " pixels/inch");				break;			case RESUNIT_CENTIMETER:				fprintf(fd, " pixels/cm");				break;			default:				fprintf(fd, " (unit %u = 0x%x)",				    td->td_resolutionunit,				    td->td_resolutionunit);				break;			}		}		fprintf(fd, "\n");	}	if (TIFFFieldSet(tif,FIELD_POSITION))		fprintf(fd, "  Position: %g, %g\n",		    td->td_xposition, td->td_yposition);	if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))		fprintf(fd, "  Bits/Sample: %u\n", td->td_bitspersample);	if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT)) {		fprintf(fd, "  Sample Format: ");		switch (td->td_sampleformat) {		case SAMPLEFORMAT_VOID:			fprintf(fd, "void\n");			break;		case SAMPLEFORMAT_INT:			fprintf(fd, "signed integer\n");			break;		case SAMPLEFORMAT_UINT:			fprintf(fd, "unsigned integer\n");			break;		case SAMPLEFORMAT_IEEEFP:			fprintf(fd, "IEEE floating point\n");			break;		case SAMPLEFORMAT_COMPLEXINT:			fprintf(fd, "complex signed integer\n");			break;		case SAMPLEFORMAT_COMPLEXIEEEFP:			fprintf(fd, "complex IEEE floating point\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_sampleformat, td->td_sampleformat);			break;		}	}	if (TIFFFieldSet(tif,FIELD_COMPRESSION)) {		const TIFFCodec* c = TIFFFindCODEC(td->td_compression);		fprintf(fd, "  Compression Scheme: ");		if (c)			fprintf(fd, "%s\n", c->name);		else			fprintf(fd, "%u (0x%x)\n",			    td->td_compression, td->td_compression);	}	if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC)) {		fprintf(fd, "  Photometric Interpretation: ");		if (td->td_photometric < NPHOTONAMES)			fprintf(fd, "%s\n", photoNames[td->td_photometric]);		else {			switch (td->td_photometric) {			case PHOTOMETRIC_LOGL:				fprintf(fd, "CIE Log2(L)\n");				break;			case PHOTOMETRIC_LOGLUV:				fprintf(fd, "CIE Log2(L) (u',v')\n");				break;			default:				fprintf(fd, "%u (0x%x)\n",				    td->td_photometric, td->td_photometric);				break;			}		}	}	if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES) && td->td_extrasamples) {		uint16 i;		fprintf(fd, "  Extra Samples: %u<", td->td_extrasamples);		sep = "";		for (i = 0; i < td->td_extrasamples; i++) {			switch (td->td_sampleinfo[i]) {			case EXTRASAMPLE_UNSPECIFIED:				fprintf(fd, "%sunspecified", sep);				break;			case EXTRASAMPLE_ASSOCALPHA:				fprintf(fd, "%sassoc-alpha", sep);				break;			case EXTRASAMPLE_UNASSALPHA:				fprintf(fd, "%sunassoc-alpha", sep);				break;			default:				fprintf(fd, "%s%u (0x%x)", sep,				    td->td_sampleinfo[i], td->td_sampleinfo[i]);				break;			}			sep = ", ";		}		fprintf(fd, ">\n");	}	if (TIFFFieldSet(tif,FIELD_INKNAMES)) {		char* cp;		uint16 i;		fprintf(fd, "  Ink Names: ");		i = td->td_samplesperpixel;		sep = "";		for (cp = td->td_inknames; 		     i > 0 && cp < td->td_inknames + td->td_inknameslen; 		     cp = strchr(cp,'\0')+1, i--) {			size_t max_chars = 				td->td_inknameslen - (cp - td->td_inknames);			fputs(sep, fd);			_TIFFprintAsciiBounded(fd, cp, max_chars);			sep = ", ";		}                fputs("\n", fd);	}	if (TIFFFieldSet(tif,FIELD_THRESHHOLDING)) {		fprintf(fd, "  Thresholding: ");		switch (td->td_threshholding) {		case THRESHHOLD_BILEVEL:			fprintf(fd, "bilevel art scan\n");			break;		case THRESHHOLD_HALFTONE:			fprintf(fd, "halftone or dithered scan\n");			break;		case THRESHHOLD_ERRORDIFFUSE:			fprintf(fd, "error diffused\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_threshholding, td->td_threshholding);			break;		}	}	if (TIFFFieldSet(tif,FIELD_FILLORDER)) {		fprintf(fd, "  FillOrder: ");		switch (td->td_fillorder) {		case FILLORDER_MSB2LSB:			fprintf(fd, "msb-to-lsb\n");			break;		case FILLORDER_LSB2MSB:			fprintf(fd, "lsb-to-msb\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_fillorder, td->td_fillorder);			break;		}	}	if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))        {		fprintf(fd, "  YCbCr Subsampling: %u, %u\n",			td->td_ycbcrsubsampling[0], td->td_ycbcrsubsampling[1] );	}	if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING)) {		fprintf(fd, "  YCbCr Positioning: ");		switch (td->td_ycbcrpositioning) {		case YCBCRPOSITION_CENTERED:			fprintf(fd, "centered\n");			break;		case YCBCRPOSITION_COSITED:			fprintf(fd, "cosited\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_ycbcrpositioning, td->td_ycbcrpositioning);			break;		}	}	if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))		fprintf(fd, "  Halftone Hints: light %u dark %u\n",		    td->td_halftonehints[0], td->td_halftonehints[1]);	if (TIFFFieldSet(tif,FIELD_ORIENTATION)) {		fprintf(fd, "  Orientation: ");		if (td->td_orientation < NORIENTNAMES)			fprintf(fd, "%s\n", orientNames[td->td_orientation]);		else			fprintf(fd, "%u (0x%x)\n",			    td->td_orientation, td->td_orientation);	}	if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))		fprintf(fd, "  Samples/Pixel: %u\n", td->td_samplesperpixel);	if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP)) {		fprintf(fd, "  Rows/Strip: ");		if (td->td_rowsperstrip == (uint32) -1)			fprintf(fd, "(infinite)\n");		else			fprintf(fd, "%lu\n", (unsigned long) td->td_rowsperstrip);	}	if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))		fprintf(fd, "  Min Sample Value: %u\n", td->td_minsamplevalue);	if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))		fprintf(fd, "  Max Sample Value: %u\n", td->td_maxsamplevalue);	if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE)) {		int i;		int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;		fprintf(fd, "  SMin Sample Value:");		for (i = 0; i < count; ++i)			fprintf(fd, " %g", td->td_sminsamplevalue[i]);		fprintf(fd, "\n");	}	if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE)) {		int i;		int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;		fprintf(fd, "  SMax Sample Value:");		for (i = 0; i < count; ++i)			fprintf(fd, " %g", td->td_smaxsamplevalue[i]);		fprintf(fd, "\n");	}	if (TIFFFieldSet(tif,FIELD_PLANARCONFIG)) {		fprintf(fd, "  Planar Configuration: ");		switch (td->td_planarconfig) {		case PLANARCONFIG_CONTIG:			fprintf(fd, "single image plane\n");			break;		case PLANARCONFIG_SEPARATE:			fprintf(fd, "separate image planes\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_planarconfig, td->td_planarconfig);			break;		}	}	if (TIFFFieldSet(tif,FIELD_PAGENUMBER))		fprintf(fd, "  Page Number: %u-%u\n",		    td->td_pagenumber[0], td->td_pagenumber[1]);	if (TIFFFieldSet(tif,FIELD_COLORMAP)) {		fprintf(fd, "  Color Map: ");		if (flags & TIFFPRINT_COLORMAP) {			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++)				fprintf(fd, "   %5ld: %5u %5u %5u\n",				    l,				    td->td_colormap[0][l],				    td->td_colormap[1][l],				    td->td_colormap[2][l]);		} else			fprintf(fd, "(present)\n");	}	if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE)) {		int i;		fprintf(fd, "  Reference Black/White:\n");		for (i = 0; i < 3; i++)		fprintf(fd, "    %2d: %5g %5g\n", i,			td->td_refblackwhite[2*i+0],			td->td_refblackwhite[2*i+1]);	}	if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION)) {		fprintf(fd, "  Transfer Function: ");		if (flags & TIFFPRINT_CURVES) {			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++) {				uint16 i;				fprintf(fd, "    %2ld: %5u",				    l, td->td_transferfunction[0][l]);				for (i = 1; i < td->td_samplesperpixel; i++)					fprintf(fd, " %5u",					    td->td_transferfunction[i][l]);				fputc('\n', fd);			}		} else			fprintf(fd, "(present)\n");	}	if (TIFFFieldSet(tif, FIELD_SUBIFD) && (td->td_subifd)) {		uint16 i;		fprintf(fd, "  SubIFD Offsets:");		for (i = 0; i < td->td_nsubifd; i++)#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))			fprintf(fd, " %5I64u",				(unsigned __int64) td->td_subifd[i]);#else			fprintf(fd, " %5llu",				(unsigned long long) td->td_subifd[i]);#endif		fputc('\n', fd);	}	/*	** Custom tag support.	*/	{		int  i;		short count;		count = (short) TIFFGetTagListCount(tif);		for(i = 0; i < count; i++) {			uint32 tag = TIFFGetTagListEntry(tif, i);			const TIFFField *fip;			uint32 value_count;			int mem_alloc = 0;			void *raw_data;			fip = TIFFFieldWithTag(tif, tag);			if(fip == NULL)				continue;			if(fip->field_passcount) {				if (fip->field_readcount == TIFF_VARIABLE2 ) {					if(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)						continue;				} else if (fip->field_readcount == TIFF_VARIABLE ) {					uint16 small_value_count;					if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)						continue;					value_count = small_value_count;				} else {					assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2);					continue;				} 			} else {				if (fip->field_readcount == TIFF_VARIABLE				    || fip->field_readcount == TIFF_VARIABLE2)					value_count = 1;				else if (fip->field_readcount == TIFF_SPP)					value_count = td->td_samplesperpixel;				else					value_count = fip->field_readcount;				if (fip->field_tag == TIFFTAG_DOTRANGE				    && strcmp(fip->field_name,"DotRange") == 0) {					/* TODO: This is an evil exception and should not have been					   handled this way ... likely best if we move it into					   the directory structure with an explicit field in 					   libtiff 4.1 and assign it a FIELD_ value */					static uint16 dotrange[2];					raw_data = dotrange;					TIFFGetField(tif, tag, dotrange+0, dotrange+1);				} else if (fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2					   || fip->field_readcount == TIFF_SPP					   || value_count > 1) {					if(TIFFGetField(tif, tag, &raw_data) != 1)						continue;				} else {					raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count);					mem_alloc = 1;					if(TIFFGetField(tif, tag, raw_data) != 1) {						_TIFFfree(raw_data);						continue;					}				}			}			/*			 * Catch the tags which needs to be specially handled			 * and pretty print them. If tag not handled in			 * _TIFFPrettyPrintField() fall down and print it as			 * any other tag.			 */			if (!_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data))				_TIFFPrintField(fd, fip, value_count, raw_data);			if(mem_alloc)				_TIFFfree(raw_data);		}	}        	if (tif->tif_tagmethods.printdir)		(*tif->tif_tagmethods.printdir)(tif, fd, flags);        _TIFFFillStriles( tif );        	if ((flags & TIFFPRINT_STRIPS) &&	    TIFFFieldSet(tif,FIELD_STRIPOFFSETS)) {		uint32 s;		fprintf(fd, "  %lu %s:\n",		    (unsigned long) td->td_nstrips,		    isTiled(tif) ? "Tiles" : "Strips");		for (s = 0; s < td->td_nstrips; s++)#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))			fprintf(fd, "    %3lu: [%8I64u, %8I64u]\n",			    (unsigned long) s,			    (unsigned __int64) td->td_stripoffset[s],			    (unsigned __int64) td->td_stripbytecount[s]);#else			fprintf(fd, "    %3lu: [%8llu, %8llu]\n",			    (unsigned long) s,			    (unsigned long long) td->td_stripoffset[s],			    (unsigned long long) td->td_stripbytecount[s]);#endif	}}
TIFFDirectory *td = &tif->tif_dir;
TIFFDirectory *td = &tif->tif_dir;
TIFFDirectory
TIFFDirectory
*td = &tif->tif_dir
*
td
= &tif->tif_dir
&tif->tif_dir
tif->tif_dir
tif
tif
tif_dir
char *sep;
char *sep;
char
*sep
*
sep
long l, n;
long l, n;
long
l
l
n
n
fprintf(fd, "TIFF Directory at offset 0x%llx (%llu)\n",		(unsigned long long) tif->tif_diroff,		(unsigned long long) tif->tif_diroff);
fprintf(fd, "TIFF Directory at offset 0x%llx (%llu)\n",		(unsigned long long) tif->tif_diroff,		(unsigned long long) tif->tif_diroff)
fprintf
fprintf
fd
fd
"TIFF Directory at offset 0x%llx (%llu)\n"
(unsigned long long) tif->tif_diroff
unsigned long long
unsigned long long

tif->tif_diroff
tif
tif
tif_diroff
(unsigned long long) tif->tif_diroff
unsigned long long
unsigned long long

tif->tif_diroff
tif
tif
tif_diroff
if (TIFFFieldSet(tif,FIELD_SUBFILETYPE)) {		fprintf(fd, "  Subfile Type:");		sep = " ";		if (td->td_subfiletype & FILETYPE_REDUCEDIMAGE) {			fprintf(fd, "%sreduced-resolution image", sep);			sep = "/";		}		if (td->td_subfiletype & FILETYPE_PAGE) {			fprintf(fd, "%smulti-page document", sep);			sep = "/";		}		if (td->td_subfiletype & FILETYPE_MASK)			fprintf(fd, "%stransparency mask", sep);		fprintf(fd, " (%lu = 0x%lx)\n",		    (unsigned long) td->td_subfiletype, (long) td->td_subfiletype);	}
TIFFFieldSet(tif,FIELD_SUBFILETYPE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SUBFILETYPE
FIELD_SUBFILETYPE
{		fprintf(fd, "  Subfile Type:");		sep = " ";		if (td->td_subfiletype & FILETYPE_REDUCEDIMAGE) {			fprintf(fd, "%sreduced-resolution image", sep);			sep = "/";		}		if (td->td_subfiletype & FILETYPE_PAGE) {			fprintf(fd, "%smulti-page document", sep);			sep = "/";		}		if (td->td_subfiletype & FILETYPE_MASK)			fprintf(fd, "%stransparency mask", sep);		fprintf(fd, " (%lu = 0x%lx)\n",		    (unsigned long) td->td_subfiletype, (long) td->td_subfiletype);	}
fprintf(fd, "  Subfile Type:");
fprintf(fd, "  Subfile Type:")
fprintf
fprintf
fd
fd
"  Subfile Type:"
sep = " ";
sep = " "
sep
sep
" "
if (td->td_subfiletype & FILETYPE_REDUCEDIMAGE) {			fprintf(fd, "%sreduced-resolution image", sep);			sep = "/";		}
td->td_subfiletype & FILETYPE_REDUCEDIMAGE
td->td_subfiletype
td
td
td_subfiletype
FILETYPE_REDUCEDIMAGE
FILETYPE_REDUCEDIMAGE
{			fprintf(fd, "%sreduced-resolution image", sep);			sep = "/";		}
fprintf(fd, "%sreduced-resolution image", sep);
fprintf(fd, "%sreduced-resolution image", sep)
fprintf
fprintf
fd
fd
"%sreduced-resolution image"
sep
sep
sep = "/";
sep = "/"
sep
sep
"/"
if (td->td_subfiletype & FILETYPE_PAGE) {			fprintf(fd, "%smulti-page document", sep);			sep = "/";		}
td->td_subfiletype & FILETYPE_PAGE
td->td_subfiletype
td
td
td_subfiletype
FILETYPE_PAGE
FILETYPE_PAGE
{			fprintf(fd, "%smulti-page document", sep);			sep = "/";		}
fprintf(fd, "%smulti-page document", sep);
fprintf(fd, "%smulti-page document", sep)
fprintf
fprintf
fd
fd
"%smulti-page document"
sep
sep
sep = "/";
sep = "/"
sep
sep
"/"
if (td->td_subfiletype & FILETYPE_MASK)			fprintf(fd, "%stransparency mask", sep);
td->td_subfiletype & FILETYPE_MASK
td->td_subfiletype
td
td
td_subfiletype
FILETYPE_MASK
FILETYPE_MASK
fprintf(fd, "%stransparency mask", sep);
fprintf(fd, "%stransparency mask", sep)
fprintf
fprintf
fd
fd
"%stransparency mask"
sep
sep
fprintf(fd, " (%lu = 0x%lx)\n",		    (unsigned long) td->td_subfiletype, (long) td->td_subfiletype);
fprintf(fd, " (%lu = 0x%lx)\n",		    (unsigned long) td->td_subfiletype, (long) td->td_subfiletype)
fprintf
fprintf
fd
fd
" (%lu = 0x%lx)\n"
(unsigned long) td->td_subfiletype
unsigned long
unsigned long

td->td_subfiletype
td
td
td_subfiletype
(long) td->td_subfiletype
long
long

td->td_subfiletype
td
td
td_subfiletype
if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)) {		fprintf(fd, "  Image Width: %lu Image Length: %lu",		    (unsigned long) td->td_imagewidth, (unsigned long) td->td_imagelength);		if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			fprintf(fd, " Image Depth: %lu",			    (unsigned long) td->td_imagedepth);		fprintf(fd, "\n");	}
TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_IMAGEDIMENSIONS
FIELD_IMAGEDIMENSIONS
{		fprintf(fd, "  Image Width: %lu Image Length: %lu",		    (unsigned long) td->td_imagewidth, (unsigned long) td->td_imagelength);		if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			fprintf(fd, " Image Depth: %lu",			    (unsigned long) td->td_imagedepth);		fprintf(fd, "\n");	}
fprintf(fd, "  Image Width: %lu Image Length: %lu",		    (unsigned long) td->td_imagewidth, (unsigned long) td->td_imagelength);
fprintf(fd, "  Image Width: %lu Image Length: %lu",		    (unsigned long) td->td_imagewidth, (unsigned long) td->td_imagelength)
fprintf
fprintf
fd
fd
"  Image Width: %lu Image Length: %lu"
(unsigned long) td->td_imagewidth
unsigned long
unsigned long

td->td_imagewidth
td
td
td_imagewidth
(unsigned long) td->td_imagelength
unsigned long
unsigned long

td->td_imagelength
td
td
td_imagelength
if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			fprintf(fd, " Image Depth: %lu",			    (unsigned long) td->td_imagedepth);
TIFFFieldSet(tif,FIELD_IMAGEDEPTH)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_IMAGEDEPTH
FIELD_IMAGEDEPTH
fprintf(fd, " Image Depth: %lu",			    (unsigned long) td->td_imagedepth);
fprintf(fd, " Image Depth: %lu",			    (unsigned long) td->td_imagedepth)
fprintf
fprintf
fd
fd
" Image Depth: %lu"
(unsigned long) td->td_imagedepth
unsigned long
unsigned long

td->td_imagedepth
td
td
td_imagedepth
fprintf(fd, "\n");
fprintf(fd, "\n")
fprintf
fprintf
fd
fd
"\n"
if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS)) {		fprintf(fd, "  Tile Width: %lu Tile Length: %lu",		    (unsigned long) td->td_tilewidth, (unsigned long) td->td_tilelength);		if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			fprintf(fd, " Tile Depth: %lu",			    (unsigned long) td->td_tiledepth);		fprintf(fd, "\n");	}
TIFFFieldSet(tif,FIELD_TILEDIMENSIONS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_TILEDIMENSIONS
FIELD_TILEDIMENSIONS
{		fprintf(fd, "  Tile Width: %lu Tile Length: %lu",		    (unsigned long) td->td_tilewidth, (unsigned long) td->td_tilelength);		if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			fprintf(fd, " Tile Depth: %lu",			    (unsigned long) td->td_tiledepth);		fprintf(fd, "\n");	}
fprintf(fd, "  Tile Width: %lu Tile Length: %lu",		    (unsigned long) td->td_tilewidth, (unsigned long) td->td_tilelength);
fprintf(fd, "  Tile Width: %lu Tile Length: %lu",		    (unsigned long) td->td_tilewidth, (unsigned long) td->td_tilelength)
fprintf
fprintf
fd
fd
"  Tile Width: %lu Tile Length: %lu"
(unsigned long) td->td_tilewidth
unsigned long
unsigned long

td->td_tilewidth
td
td
td_tilewidth
(unsigned long) td->td_tilelength
unsigned long
unsigned long

td->td_tilelength
td
td
td_tilelength
if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			fprintf(fd, " Tile Depth: %lu",			    (unsigned long) td->td_tiledepth);
TIFFFieldSet(tif,FIELD_TILEDEPTH)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_TILEDEPTH
FIELD_TILEDEPTH
fprintf(fd, " Tile Depth: %lu",			    (unsigned long) td->td_tiledepth);
fprintf(fd, " Tile Depth: %lu",			    (unsigned long) td->td_tiledepth)
fprintf
fprintf
fd
fd
" Tile Depth: %lu"
(unsigned long) td->td_tiledepth
unsigned long
unsigned long

td->td_tiledepth
td
td
td_tiledepth
fprintf(fd, "\n");
fprintf(fd, "\n")
fprintf
fprintf
fd
fd
"\n"
if (TIFFFieldSet(tif,FIELD_RESOLUTION)) {		fprintf(fd, "  Resolution: %g, %g",		    td->td_xresolution, td->td_yresolution);		if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)) {			switch (td->td_resolutionunit) {			case RESUNIT_NONE:				fprintf(fd, " (unitless)");				break;			case RESUNIT_INCH:				fprintf(fd, " pixels/inch");				break;			case RESUNIT_CENTIMETER:				fprintf(fd, " pixels/cm");				break;			default:				fprintf(fd, " (unit %u = 0x%x)",				    td->td_resolutionunit,				    td->td_resolutionunit);				break;			}		}		fprintf(fd, "\n");	}
TIFFFieldSet(tif,FIELD_RESOLUTION)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_RESOLUTION
FIELD_RESOLUTION
{		fprintf(fd, "  Resolution: %g, %g",		    td->td_xresolution, td->td_yresolution);		if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)) {			switch (td->td_resolutionunit) {			case RESUNIT_NONE:				fprintf(fd, " (unitless)");				break;			case RESUNIT_INCH:				fprintf(fd, " pixels/inch");				break;			case RESUNIT_CENTIMETER:				fprintf(fd, " pixels/cm");				break;			default:				fprintf(fd, " (unit %u = 0x%x)",				    td->td_resolutionunit,				    td->td_resolutionunit);				break;			}		}		fprintf(fd, "\n");	}
fprintf(fd, "  Resolution: %g, %g",		    td->td_xresolution, td->td_yresolution);
fprintf(fd, "  Resolution: %g, %g",		    td->td_xresolution, td->td_yresolution)
fprintf
fprintf
fd
fd
"  Resolution: %g, %g"
td->td_xresolution
td
td
td_xresolution
td->td_yresolution
td
td
td_yresolution
if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)) {			switch (td->td_resolutionunit) {			case RESUNIT_NONE:				fprintf(fd, " (unitless)");				break;			case RESUNIT_INCH:				fprintf(fd, " pixels/inch");				break;			case RESUNIT_CENTIMETER:				fprintf(fd, " pixels/cm");				break;			default:				fprintf(fd, " (unit %u = 0x%x)",				    td->td_resolutionunit,				    td->td_resolutionunit);				break;			}		}
TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_RESOLUTIONUNIT
FIELD_RESOLUTIONUNIT
{			switch (td->td_resolutionunit) {			case RESUNIT_NONE:				fprintf(fd, " (unitless)");				break;			case RESUNIT_INCH:				fprintf(fd, " pixels/inch");				break;			case RESUNIT_CENTIMETER:				fprintf(fd, " pixels/cm");				break;			default:				fprintf(fd, " (unit %u = 0x%x)",				    td->td_resolutionunit,				    td->td_resolutionunit);				break;			}		}
switch (td->td_resolutionunit) {			case RESUNIT_NONE:				fprintf(fd, " (unitless)");				break;			case RESUNIT_INCH:				fprintf(fd, " pixels/inch");				break;			case RESUNIT_CENTIMETER:				fprintf(fd, " pixels/cm");				break;			default:				fprintf(fd, " (unit %u = 0x%x)",				    td->td_resolutionunit,				    td->td_resolutionunit);				break;			}
td->td_resolutionunit
td
td
td_resolutionunit
{			case RESUNIT_NONE:				fprintf(fd, " (unitless)");				break;			case RESUNIT_INCH:				fprintf(fd, " pixels/inch");				break;			case RESUNIT_CENTIMETER:				fprintf(fd, " pixels/cm");				break;			default:				fprintf(fd, " (unit %u = 0x%x)",				    td->td_resolutionunit,				    td->td_resolutionunit);				break;			}
case RESUNIT_NONE:
RESUNIT_NONE
RESUNIT_NONE
fprintf(fd, " (unitless)");
fprintf(fd, " (unitless)")
fprintf
fprintf
fd
fd
" (unitless)"
break;
case RESUNIT_INCH:
RESUNIT_INCH
RESUNIT_INCH
fprintf(fd, " pixels/inch");
fprintf(fd, " pixels/inch")
fprintf
fprintf
fd
fd
" pixels/inch"
break;
case RESUNIT_CENTIMETER:
RESUNIT_CENTIMETER
RESUNIT_CENTIMETER
fprintf(fd, " pixels/cm");
fprintf(fd, " pixels/cm")
fprintf
fprintf
fd
fd
" pixels/cm"
break;
default:
fprintf(fd, " (unit %u = 0x%x)",				    td->td_resolutionunit,				    td->td_resolutionunit);
fprintf(fd, " (unit %u = 0x%x)",				    td->td_resolutionunit,				    td->td_resolutionunit)
fprintf
fprintf
fd
fd
" (unit %u = 0x%x)"
td->td_resolutionunit
td
td
td_resolutionunit
td->td_resolutionunit
td
td
td_resolutionunit
break;
fprintf(fd, "\n");
fprintf(fd, "\n")
fprintf
fprintf
fd
fd
"\n"
if (TIFFFieldSet(tif,FIELD_POSITION))		fprintf(fd, "  Position: %g, %g\n",		    td->td_xposition, td->td_yposition);
TIFFFieldSet(tif,FIELD_POSITION)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_POSITION
FIELD_POSITION
fprintf(fd, "  Position: %g, %g\n",		    td->td_xposition, td->td_yposition);
fprintf(fd, "  Position: %g, %g\n",		    td->td_xposition, td->td_yposition)
fprintf
fprintf
fd
fd
"  Position: %g, %g\n"
td->td_xposition
td
td
td_xposition
td->td_yposition
td
td
td_yposition
if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))		fprintf(fd, "  Bits/Sample: %u\n", td->td_bitspersample);
TIFFFieldSet(tif,FIELD_BITSPERSAMPLE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_BITSPERSAMPLE
FIELD_BITSPERSAMPLE
fprintf(fd, "  Bits/Sample: %u\n", td->td_bitspersample);
fprintf(fd, "  Bits/Sample: %u\n", td->td_bitspersample)
fprintf
fprintf
fd
fd
"  Bits/Sample: %u\n"
td->td_bitspersample
td
td
td_bitspersample
if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT)) {		fprintf(fd, "  Sample Format: ");		switch (td->td_sampleformat) {		case SAMPLEFORMAT_VOID:			fprintf(fd, "void\n");			break;		case SAMPLEFORMAT_INT:			fprintf(fd, "signed integer\n");			break;		case SAMPLEFORMAT_UINT:			fprintf(fd, "unsigned integer\n");			break;		case SAMPLEFORMAT_IEEEFP:			fprintf(fd, "IEEE floating point\n");			break;		case SAMPLEFORMAT_COMPLEXINT:			fprintf(fd, "complex signed integer\n");			break;		case SAMPLEFORMAT_COMPLEXIEEEFP:			fprintf(fd, "complex IEEE floating point\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_sampleformat, td->td_sampleformat);			break;		}	}
TIFFFieldSet(tif,FIELD_SAMPLEFORMAT)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SAMPLEFORMAT
FIELD_SAMPLEFORMAT
{		fprintf(fd, "  Sample Format: ");		switch (td->td_sampleformat) {		case SAMPLEFORMAT_VOID:			fprintf(fd, "void\n");			break;		case SAMPLEFORMAT_INT:			fprintf(fd, "signed integer\n");			break;		case SAMPLEFORMAT_UINT:			fprintf(fd, "unsigned integer\n");			break;		case SAMPLEFORMAT_IEEEFP:			fprintf(fd, "IEEE floating point\n");			break;		case SAMPLEFORMAT_COMPLEXINT:			fprintf(fd, "complex signed integer\n");			break;		case SAMPLEFORMAT_COMPLEXIEEEFP:			fprintf(fd, "complex IEEE floating point\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_sampleformat, td->td_sampleformat);			break;		}	}
fprintf(fd, "  Sample Format: ");
fprintf(fd, "  Sample Format: ")
fprintf
fprintf
fd
fd
"  Sample Format: "
switch (td->td_sampleformat) {		case SAMPLEFORMAT_VOID:			fprintf(fd, "void\n");			break;		case SAMPLEFORMAT_INT:			fprintf(fd, "signed integer\n");			break;		case SAMPLEFORMAT_UINT:			fprintf(fd, "unsigned integer\n");			break;		case SAMPLEFORMAT_IEEEFP:			fprintf(fd, "IEEE floating point\n");			break;		case SAMPLEFORMAT_COMPLEXINT:			fprintf(fd, "complex signed integer\n");			break;		case SAMPLEFORMAT_COMPLEXIEEEFP:			fprintf(fd, "complex IEEE floating point\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_sampleformat, td->td_sampleformat);			break;		}
td->td_sampleformat
td
td
td_sampleformat
{		case SAMPLEFORMAT_VOID:			fprintf(fd, "void\n");			break;		case SAMPLEFORMAT_INT:			fprintf(fd, "signed integer\n");			break;		case SAMPLEFORMAT_UINT:			fprintf(fd, "unsigned integer\n");			break;		case SAMPLEFORMAT_IEEEFP:			fprintf(fd, "IEEE floating point\n");			break;		case SAMPLEFORMAT_COMPLEXINT:			fprintf(fd, "complex signed integer\n");			break;		case SAMPLEFORMAT_COMPLEXIEEEFP:			fprintf(fd, "complex IEEE floating point\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_sampleformat, td->td_sampleformat);			break;		}
case SAMPLEFORMAT_VOID:
SAMPLEFORMAT_VOID
SAMPLEFORMAT_VOID
fprintf(fd, "void\n");
fprintf(fd, "void\n")
fprintf
fprintf
fd
fd
"void\n"
break;
case SAMPLEFORMAT_INT:
SAMPLEFORMAT_INT
SAMPLEFORMAT_INT
fprintf(fd, "signed integer\n");
fprintf(fd, "signed integer\n")
fprintf
fprintf
fd
fd
"signed integer\n"
break;
case SAMPLEFORMAT_UINT:
SAMPLEFORMAT_UINT
SAMPLEFORMAT_UINT
fprintf(fd, "unsigned integer\n");
fprintf(fd, "unsigned integer\n")
fprintf
fprintf
fd
fd
"unsigned integer\n"
break;
case SAMPLEFORMAT_IEEEFP:
SAMPLEFORMAT_IEEEFP
SAMPLEFORMAT_IEEEFP
fprintf(fd, "IEEE floating point\n");
fprintf(fd, "IEEE floating point\n")
fprintf
fprintf
fd
fd
"IEEE floating point\n"
break;
case SAMPLEFORMAT_COMPLEXINT:
SAMPLEFORMAT_COMPLEXINT
SAMPLEFORMAT_COMPLEXINT
fprintf(fd, "complex signed integer\n");
fprintf(fd, "complex signed integer\n")
fprintf
fprintf
fd
fd
"complex signed integer\n"
break;
case SAMPLEFORMAT_COMPLEXIEEEFP:
SAMPLEFORMAT_COMPLEXIEEEFP
SAMPLEFORMAT_COMPLEXIEEEFP
fprintf(fd, "complex IEEE floating point\n");
fprintf(fd, "complex IEEE floating point\n")
fprintf
fprintf
fd
fd
"complex IEEE floating point\n"
break;
default:
fprintf(fd, "%u (0x%x)\n",			    td->td_sampleformat, td->td_sampleformat);
fprintf(fd, "%u (0x%x)\n",			    td->td_sampleformat, td->td_sampleformat)
fprintf
fprintf
fd
fd
"%u (0x%x)\n"
td->td_sampleformat
td
td
td_sampleformat
td->td_sampleformat
td
td
td_sampleformat
break;
if (TIFFFieldSet(tif,FIELD_COMPRESSION)) {		const TIFFCodec* c = TIFFFindCODEC(td->td_compression);		fprintf(fd, "  Compression Scheme: ");		if (c)			fprintf(fd, "%s\n", c->name);		else			fprintf(fd, "%u (0x%x)\n",			    td->td_compression, td->td_compression);	}
TIFFFieldSet(tif,FIELD_COMPRESSION)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_COMPRESSION
FIELD_COMPRESSION
{		const TIFFCodec* c = TIFFFindCODEC(td->td_compression);		fprintf(fd, "  Compression Scheme: ");		if (c)			fprintf(fd, "%s\n", c->name);		else			fprintf(fd, "%u (0x%x)\n",			    td->td_compression, td->td_compression);	}
const TIFFCodec* c = TIFFFindCODEC(td->td_compression);
const TIFFCodec* c = TIFFFindCODEC(td->td_compression);
const TIFFCodec
TIFFCodec
* c = TIFFFindCODEC(td->td_compression)
*
c
= TIFFFindCODEC(td->td_compression)
TIFFFindCODEC(td->td_compression)
TIFFFindCODEC
TIFFFindCODEC
td->td_compression
td
td
td_compression
fprintf(fd, "  Compression Scheme: ");
fprintf(fd, "  Compression Scheme: ")
fprintf
fprintf
fd
fd
"  Compression Scheme: "
if (c)			fprintf(fd, "%s\n", c->name);		else			fprintf(fd, "%u (0x%x)\n",			    td->td_compression, td->td_compression);
c
c
fprintf(fd, "%s\n", c->name);
fprintf(fd, "%s\n", c->name)
fprintf
fprintf
fd
fd
"%s\n"
c->name
c
c
name
fprintf(fd, "%u (0x%x)\n",			    td->td_compression, td->td_compression);
fprintf(fd, "%u (0x%x)\n",			    td->td_compression, td->td_compression)
fprintf
fprintf
fd
fd
"%u (0x%x)\n"
td->td_compression
td
td
td_compression
td->td_compression
td
td
td_compression
if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC)) {		fprintf(fd, "  Photometric Interpretation: ");		if (td->td_photometric < NPHOTONAMES)			fprintf(fd, "%s\n", photoNames[td->td_photometric]);		else {			switch (td->td_photometric) {			case PHOTOMETRIC_LOGL:				fprintf(fd, "CIE Log2(L)\n");				break;			case PHOTOMETRIC_LOGLUV:				fprintf(fd, "CIE Log2(L) (u',v')\n");				break;			default:				fprintf(fd, "%u (0x%x)\n",				    td->td_photometric, td->td_photometric);				break;			}		}	}
TIFFFieldSet(tif,FIELD_PHOTOMETRIC)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_PHOTOMETRIC
FIELD_PHOTOMETRIC
{		fprintf(fd, "  Photometric Interpretation: ");		if (td->td_photometric < NPHOTONAMES)			fprintf(fd, "%s\n", photoNames[td->td_photometric]);		else {			switch (td->td_photometric) {			case PHOTOMETRIC_LOGL:				fprintf(fd, "CIE Log2(L)\n");				break;			case PHOTOMETRIC_LOGLUV:				fprintf(fd, "CIE Log2(L) (u',v')\n");				break;			default:				fprintf(fd, "%u (0x%x)\n",				    td->td_photometric, td->td_photometric);				break;			}		}	}
fprintf(fd, "  Photometric Interpretation: ");
fprintf(fd, "  Photometric Interpretation: ")
fprintf
fprintf
fd
fd
"  Photometric Interpretation: "
if (td->td_photometric < NPHOTONAMES)			fprintf(fd, "%s\n", photoNames[td->td_photometric]);		else {			switch (td->td_photometric) {			case PHOTOMETRIC_LOGL:				fprintf(fd, "CIE Log2(L)\n");				break;			case PHOTOMETRIC_LOGLUV:				fprintf(fd, "CIE Log2(L) (u',v')\n");				break;			default:				fprintf(fd, "%u (0x%x)\n",				    td->td_photometric, td->td_photometric);				break;			}		}
td->td_photometric < NPHOTONAMES
td->td_photometric
td
td
td_photometric
NPHOTONAMES
NPHOTONAMES
fprintf(fd, "%s\n", photoNames[td->td_photometric]);
fprintf(fd, "%s\n", photoNames[td->td_photometric])
fprintf
fprintf
fd
fd
"%s\n"
photoNames[td->td_photometric]
photoNames
photoNames
td->td_photometric
td
td
td_photometric
{			switch (td->td_photometric) {			case PHOTOMETRIC_LOGL:				fprintf(fd, "CIE Log2(L)\n");				break;			case PHOTOMETRIC_LOGLUV:				fprintf(fd, "CIE Log2(L) (u',v')\n");				break;			default:				fprintf(fd, "%u (0x%x)\n",				    td->td_photometric, td->td_photometric);				break;			}		}
switch (td->td_photometric) {			case PHOTOMETRIC_LOGL:				fprintf(fd, "CIE Log2(L)\n");				break;			case PHOTOMETRIC_LOGLUV:				fprintf(fd, "CIE Log2(L) (u',v')\n");				break;			default:				fprintf(fd, "%u (0x%x)\n",				    td->td_photometric, td->td_photometric);				break;			}
td->td_photometric
td
td
td_photometric
{			case PHOTOMETRIC_LOGL:				fprintf(fd, "CIE Log2(L)\n");				break;			case PHOTOMETRIC_LOGLUV:				fprintf(fd, "CIE Log2(L) (u',v')\n");				break;			default:				fprintf(fd, "%u (0x%x)\n",				    td->td_photometric, td->td_photometric);				break;			}
case PHOTOMETRIC_LOGL:
PHOTOMETRIC_LOGL
PHOTOMETRIC_LOGL
fprintf(fd, "CIE Log2(L)\n");
fprintf(fd, "CIE Log2(L)\n")
fprintf
fprintf
fd
fd
"CIE Log2(L)\n"
break;
case PHOTOMETRIC_LOGLUV:
PHOTOMETRIC_LOGLUV
PHOTOMETRIC_LOGLUV
fprintf(fd, "CIE Log2(L) (u',v')\n");
fprintf(fd, "CIE Log2(L) (u',v')\n")
fprintf
fprintf
fd
fd
"CIE Log2(L) (u',v')\n"
break;
default:
fprintf(fd, "%u (0x%x)\n",				    td->td_photometric, td->td_photometric);
fprintf(fd, "%u (0x%x)\n",				    td->td_photometric, td->td_photometric)
fprintf
fprintf
fd
fd
"%u (0x%x)\n"
td->td_photometric
td
td
td_photometric
td->td_photometric
td
td
td_photometric
break;
if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES) && td->td_extrasamples) {		uint16 i;		fprintf(fd, "  Extra Samples: %u<", td->td_extrasamples);		sep = "";		for (i = 0; i < td->td_extrasamples; i++) {			switch (td->td_sampleinfo[i]) {			case EXTRASAMPLE_UNSPECIFIED:				fprintf(fd, "%sunspecified", sep);				break;			case EXTRASAMPLE_ASSOCALPHA:				fprintf(fd, "%sassoc-alpha", sep);				break;			case EXTRASAMPLE_UNASSALPHA:				fprintf(fd, "%sunassoc-alpha", sep);				break;			default:				fprintf(fd, "%s%u (0x%x)", sep,				    td->td_sampleinfo[i], td->td_sampleinfo[i]);				break;			}			sep = ", ";		}		fprintf(fd, ">\n");	}
TIFFFieldSet(tif,FIELD_EXTRASAMPLES) && td->td_extrasamples
TIFFFieldSet(tif,FIELD_EXTRASAMPLES)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_EXTRASAMPLES
FIELD_EXTRASAMPLES
td->td_extrasamples
td
td
td_extrasamples
{		uint16 i;		fprintf(fd, "  Extra Samples: %u<", td->td_extrasamples);		sep = "";		for (i = 0; i < td->td_extrasamples; i++) {			switch (td->td_sampleinfo[i]) {			case EXTRASAMPLE_UNSPECIFIED:				fprintf(fd, "%sunspecified", sep);				break;			case EXTRASAMPLE_ASSOCALPHA:				fprintf(fd, "%sassoc-alpha", sep);				break;			case EXTRASAMPLE_UNASSALPHA:				fprintf(fd, "%sunassoc-alpha", sep);				break;			default:				fprintf(fd, "%s%u (0x%x)", sep,				    td->td_sampleinfo[i], td->td_sampleinfo[i]);				break;			}			sep = ", ";		}		fprintf(fd, ">\n");	}
uint16 i;
uint16 i;
uint16
uint16
i
i
fprintf(fd, "  Extra Samples: %u<", td->td_extrasamples);
fprintf(fd, "  Extra Samples: %u<", td->td_extrasamples)
fprintf
fprintf
fd
fd
"  Extra Samples: %u<"
td->td_extrasamples
td
td
td_extrasamples
sep = "";
sep = ""
sep
sep
""
for (i = 0; i < td->td_extrasamples; i++) {			switch (td->td_sampleinfo[i]) {			case EXTRASAMPLE_UNSPECIFIED:				fprintf(fd, "%sunspecified", sep);				break;			case EXTRASAMPLE_ASSOCALPHA:				fprintf(fd, "%sassoc-alpha", sep);				break;			case EXTRASAMPLE_UNASSALPHA:				fprintf(fd, "%sunassoc-alpha", sep);				break;			default:				fprintf(fd, "%s%u (0x%x)", sep,				    td->td_sampleinfo[i], td->td_sampleinfo[i]);				break;			}			sep = ", ";		}
i = 0;
i = 0
i
i
0
i < td->td_extrasamples
i
i
td->td_extrasamples
td
td
td_extrasamples
i++
i
i
{			switch (td->td_sampleinfo[i]) {			case EXTRASAMPLE_UNSPECIFIED:				fprintf(fd, "%sunspecified", sep);				break;			case EXTRASAMPLE_ASSOCALPHA:				fprintf(fd, "%sassoc-alpha", sep);				break;			case EXTRASAMPLE_UNASSALPHA:				fprintf(fd, "%sunassoc-alpha", sep);				break;			default:				fprintf(fd, "%s%u (0x%x)", sep,				    td->td_sampleinfo[i], td->td_sampleinfo[i]);				break;			}			sep = ", ";		}
switch (td->td_sampleinfo[i]) {			case EXTRASAMPLE_UNSPECIFIED:				fprintf(fd, "%sunspecified", sep);				break;			case EXTRASAMPLE_ASSOCALPHA:				fprintf(fd, "%sassoc-alpha", sep);				break;			case EXTRASAMPLE_UNASSALPHA:				fprintf(fd, "%sunassoc-alpha", sep);				break;			default:				fprintf(fd, "%s%u (0x%x)", sep,				    td->td_sampleinfo[i], td->td_sampleinfo[i]);				break;			}
td->td_sampleinfo[i]
td->td_sampleinfo
td
td
td_sampleinfo
i
i
{			case EXTRASAMPLE_UNSPECIFIED:				fprintf(fd, "%sunspecified", sep);				break;			case EXTRASAMPLE_ASSOCALPHA:				fprintf(fd, "%sassoc-alpha", sep);				break;			case EXTRASAMPLE_UNASSALPHA:				fprintf(fd, "%sunassoc-alpha", sep);				break;			default:				fprintf(fd, "%s%u (0x%x)", sep,				    td->td_sampleinfo[i], td->td_sampleinfo[i]);				break;			}
case EXTRASAMPLE_UNSPECIFIED:
EXTRASAMPLE_UNSPECIFIED
EXTRASAMPLE_UNSPECIFIED
fprintf(fd, "%sunspecified", sep);
fprintf(fd, "%sunspecified", sep)
fprintf
fprintf
fd
fd
"%sunspecified"
sep
sep
break;
case EXTRASAMPLE_ASSOCALPHA:
EXTRASAMPLE_ASSOCALPHA
EXTRASAMPLE_ASSOCALPHA
fprintf(fd, "%sassoc-alpha", sep);
fprintf(fd, "%sassoc-alpha", sep)
fprintf
fprintf
fd
fd
"%sassoc-alpha"
sep
sep
break;
case EXTRASAMPLE_UNASSALPHA:
EXTRASAMPLE_UNASSALPHA
EXTRASAMPLE_UNASSALPHA
fprintf(fd, "%sunassoc-alpha", sep);
fprintf(fd, "%sunassoc-alpha", sep)
fprintf
fprintf
fd
fd
"%sunassoc-alpha"
sep
sep
break;
default:
fprintf(fd, "%s%u (0x%x)", sep,				    td->td_sampleinfo[i], td->td_sampleinfo[i]);
fprintf(fd, "%s%u (0x%x)", sep,				    td->td_sampleinfo[i], td->td_sampleinfo[i])
fprintf
fprintf
fd
fd
"%s%u (0x%x)"
sep
sep
td->td_sampleinfo[i]
td->td_sampleinfo
td
td
td_sampleinfo
i
i
td->td_sampleinfo[i]
td->td_sampleinfo
td
td
td_sampleinfo
i
i
break;
sep = ", ";
sep = ", "
sep
sep
", "
fprintf(fd, ">\n");
fprintf(fd, ">\n")
fprintf
fprintf
fd
fd
">\n"
if (TIFFFieldSet(tif,FIELD_INKNAMES)) {		char* cp;		uint16 i;		fprintf(fd, "  Ink Names: ");		i = td->td_samplesperpixel;		sep = "";		for (cp = td->td_inknames; 		     i > 0 && cp < td->td_inknames + td->td_inknameslen; 		     cp = strchr(cp,'\0')+1, i--) {			size_t max_chars = 				td->td_inknameslen - (cp - td->td_inknames);			fputs(sep, fd);			_TIFFprintAsciiBounded(fd, cp, max_chars);			sep = ", ";		}                fputs("\n", fd);	}
TIFFFieldSet(tif,FIELD_INKNAMES)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_INKNAMES
FIELD_INKNAMES
{		char* cp;		uint16 i;		fprintf(fd, "  Ink Names: ");		i = td->td_samplesperpixel;		sep = "";		for (cp = td->td_inknames; 		     i > 0 && cp < td->td_inknames + td->td_inknameslen; 		     cp = strchr(cp,'\0')+1, i--) {			size_t max_chars = 				td->td_inknameslen - (cp - td->td_inknames);			fputs(sep, fd);			_TIFFprintAsciiBounded(fd, cp, max_chars);			sep = ", ";		}                fputs("\n", fd);	}
char* cp;
char* cp;
char
* cp
*
cp
uint16 i;
uint16 i;
uint16
uint16
i
i
fprintf(fd, "  Ink Names: ");
fprintf(fd, "  Ink Names: ")
fprintf
fprintf
fd
fd
"  Ink Names: "
i = td->td_samplesperpixel;
i = td->td_samplesperpixel
i
i
td->td_samplesperpixel
td
td
td_samplesperpixel
sep = "";
sep = ""
sep
sep
""
for (cp = td->td_inknames; 		     i > 0 && cp < td->td_inknames + td->td_inknameslen; 		     cp = strchr(cp,'\0')+1, i--) {			size_t max_chars = 				td->td_inknameslen - (cp - td->td_inknames);			fputs(sep, fd);			_TIFFprintAsciiBounded(fd, cp, max_chars);			sep = ", ";		}
cp = td->td_inknames;
cp = td->td_inknames
cp
cp
td->td_inknames
td
td
td_inknames
i > 0 && cp < td->td_inknames + td->td_inknameslen
i > 0
i
i
0
cp < td->td_inknames + td->td_inknameslen
cp
cp
td->td_inknames + td->td_inknameslen
td->td_inknames
td
td
td_inknames
td->td_inknameslen
td
td
td_inknameslen
cp = strchr(cp,'\0')+1, i--
cp = strchr(cp,'\0')+1
cp
cp
strchr(cp,'\0')+1
strchr(cp,'\0')
strchr
strchr
cp
cp
'\0'
1
i--
i
i
{			size_t max_chars = 				td->td_inknameslen - (cp - td->td_inknames);			fputs(sep, fd);			_TIFFprintAsciiBounded(fd, cp, max_chars);			sep = ", ";		}
size_t max_chars = 				td->td_inknameslen - (cp - td->td_inknames);
size_t max_chars = 				td->td_inknameslen - (cp - td->td_inknames);
size_t
size_t
max_chars = 				td->td_inknameslen - (cp - td->td_inknames)
max_chars
= 				td->td_inknameslen - (cp - td->td_inknames)
td->td_inknameslen - (cp - td->td_inknames)
td->td_inknameslen
td
td
td_inknameslen
(cp - td->td_inknames)
cp - td->td_inknames
cp
cp
td->td_inknames
td
td
td_inknames
fputs(sep, fd);
fputs(sep, fd)
fputs
fputs
sep
sep
fd
fd
_TIFFprintAsciiBounded(fd, cp, max_chars);
_TIFFprintAsciiBounded(fd, cp, max_chars)
_TIFFprintAsciiBounded
_TIFFprintAsciiBounded
fd
fd
cp
cp
max_chars
max_chars
sep = ", ";
sep = ", "
sep
sep
", "
fputs("\n", fd);
fputs("\n", fd)
fputs
fputs
"\n"
fd
fd
if (TIFFFieldSet(tif,FIELD_THRESHHOLDING)) {		fprintf(fd, "  Thresholding: ");		switch (td->td_threshholding) {		case THRESHHOLD_BILEVEL:			fprintf(fd, "bilevel art scan\n");			break;		case THRESHHOLD_HALFTONE:			fprintf(fd, "halftone or dithered scan\n");			break;		case THRESHHOLD_ERRORDIFFUSE:			fprintf(fd, "error diffused\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_threshholding, td->td_threshholding);			break;		}	}
TIFFFieldSet(tif,FIELD_THRESHHOLDING)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_THRESHHOLDING
FIELD_THRESHHOLDING
{		fprintf(fd, "  Thresholding: ");		switch (td->td_threshholding) {		case THRESHHOLD_BILEVEL:			fprintf(fd, "bilevel art scan\n");			break;		case THRESHHOLD_HALFTONE:			fprintf(fd, "halftone or dithered scan\n");			break;		case THRESHHOLD_ERRORDIFFUSE:			fprintf(fd, "error diffused\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_threshholding, td->td_threshholding);			break;		}	}
fprintf(fd, "  Thresholding: ");
fprintf(fd, "  Thresholding: ")
fprintf
fprintf
fd
fd
"  Thresholding: "
switch (td->td_threshholding) {		case THRESHHOLD_BILEVEL:			fprintf(fd, "bilevel art scan\n");			break;		case THRESHHOLD_HALFTONE:			fprintf(fd, "halftone or dithered scan\n");			break;		case THRESHHOLD_ERRORDIFFUSE:			fprintf(fd, "error diffused\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_threshholding, td->td_threshholding);			break;		}
td->td_threshholding
td
td
td_threshholding
{		case THRESHHOLD_BILEVEL:			fprintf(fd, "bilevel art scan\n");			break;		case THRESHHOLD_HALFTONE:			fprintf(fd, "halftone or dithered scan\n");			break;		case THRESHHOLD_ERRORDIFFUSE:			fprintf(fd, "error diffused\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_threshholding, td->td_threshholding);			break;		}
case THRESHHOLD_BILEVEL:
THRESHHOLD_BILEVEL
THRESHHOLD_BILEVEL
fprintf(fd, "bilevel art scan\n");
fprintf(fd, "bilevel art scan\n")
fprintf
fprintf
fd
fd
"bilevel art scan\n"
break;
case THRESHHOLD_HALFTONE:
THRESHHOLD_HALFTONE
THRESHHOLD_HALFTONE
fprintf(fd, "halftone or dithered scan\n");
fprintf(fd, "halftone or dithered scan\n")
fprintf
fprintf
fd
fd
"halftone or dithered scan\n"
break;
case THRESHHOLD_ERRORDIFFUSE:
THRESHHOLD_ERRORDIFFUSE
THRESHHOLD_ERRORDIFFUSE
fprintf(fd, "error diffused\n");
fprintf(fd, "error diffused\n")
fprintf
fprintf
fd
fd
"error diffused\n"
break;
default:
fprintf(fd, "%u (0x%x)\n",			    td->td_threshholding, td->td_threshholding);
fprintf(fd, "%u (0x%x)\n",			    td->td_threshholding, td->td_threshholding)
fprintf
fprintf
fd
fd
"%u (0x%x)\n"
td->td_threshholding
td
td
td_threshholding
td->td_threshholding
td
td
td_threshholding
break;
if (TIFFFieldSet(tif,FIELD_FILLORDER)) {		fprintf(fd, "  FillOrder: ");		switch (td->td_fillorder) {		case FILLORDER_MSB2LSB:			fprintf(fd, "msb-to-lsb\n");			break;		case FILLORDER_LSB2MSB:			fprintf(fd, "lsb-to-msb\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_fillorder, td->td_fillorder);			break;		}	}
TIFFFieldSet(tif,FIELD_FILLORDER)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_FILLORDER
FIELD_FILLORDER
{		fprintf(fd, "  FillOrder: ");		switch (td->td_fillorder) {		case FILLORDER_MSB2LSB:			fprintf(fd, "msb-to-lsb\n");			break;		case FILLORDER_LSB2MSB:			fprintf(fd, "lsb-to-msb\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_fillorder, td->td_fillorder);			break;		}	}
fprintf(fd, "  FillOrder: ");
fprintf(fd, "  FillOrder: ")
fprintf
fprintf
fd
fd
"  FillOrder: "
switch (td->td_fillorder) {		case FILLORDER_MSB2LSB:			fprintf(fd, "msb-to-lsb\n");			break;		case FILLORDER_LSB2MSB:			fprintf(fd, "lsb-to-msb\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_fillorder, td->td_fillorder);			break;		}
td->td_fillorder
td
td
td_fillorder
{		case FILLORDER_MSB2LSB:			fprintf(fd, "msb-to-lsb\n");			break;		case FILLORDER_LSB2MSB:			fprintf(fd, "lsb-to-msb\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_fillorder, td->td_fillorder);			break;		}
case FILLORDER_MSB2LSB:
FILLORDER_MSB2LSB
FILLORDER_MSB2LSB
fprintf(fd, "msb-to-lsb\n");
fprintf(fd, "msb-to-lsb\n")
fprintf
fprintf
fd
fd
"msb-to-lsb\n"
break;
case FILLORDER_LSB2MSB:
FILLORDER_LSB2MSB
FILLORDER_LSB2MSB
fprintf(fd, "lsb-to-msb\n");
fprintf(fd, "lsb-to-msb\n")
fprintf
fprintf
fd
fd
"lsb-to-msb\n"
break;
default:
fprintf(fd, "%u (0x%x)\n",			    td->td_fillorder, td->td_fillorder);
fprintf(fd, "%u (0x%x)\n",			    td->td_fillorder, td->td_fillorder)
fprintf
fprintf
fd
fd
"%u (0x%x)\n"
td->td_fillorder
td
td
td_fillorder
td->td_fillorder
td
td
td_fillorder
break;
if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))        {		fprintf(fd, "  YCbCr Subsampling: %u, %u\n",			td->td_ycbcrsubsampling[0], td->td_ycbcrsubsampling[1] );	}
TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_YCBCRSUBSAMPLING
FIELD_YCBCRSUBSAMPLING
{		fprintf(fd, "  YCbCr Subsampling: %u, %u\n",			td->td_ycbcrsubsampling[0], td->td_ycbcrsubsampling[1] );	}
fprintf(fd, "  YCbCr Subsampling: %u, %u\n",			td->td_ycbcrsubsampling[0], td->td_ycbcrsubsampling[1] );
fprintf(fd, "  YCbCr Subsampling: %u, %u\n",			td->td_ycbcrsubsampling[0], td->td_ycbcrsubsampling[1] )
fprintf
fprintf
fd
fd
"  YCbCr Subsampling: %u, %u\n"
td->td_ycbcrsubsampling[0]
td->td_ycbcrsubsampling
td
td
td_ycbcrsubsampling
0
td->td_ycbcrsubsampling[1]
td->td_ycbcrsubsampling
td
td
td_ycbcrsubsampling
1
if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING)) {		fprintf(fd, "  YCbCr Positioning: ");		switch (td->td_ycbcrpositioning) {		case YCBCRPOSITION_CENTERED:			fprintf(fd, "centered\n");			break;		case YCBCRPOSITION_COSITED:			fprintf(fd, "cosited\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_ycbcrpositioning, td->td_ycbcrpositioning);			break;		}	}
TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_YCBCRPOSITIONING
FIELD_YCBCRPOSITIONING
{		fprintf(fd, "  YCbCr Positioning: ");		switch (td->td_ycbcrpositioning) {		case YCBCRPOSITION_CENTERED:			fprintf(fd, "centered\n");			break;		case YCBCRPOSITION_COSITED:			fprintf(fd, "cosited\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_ycbcrpositioning, td->td_ycbcrpositioning);			break;		}	}
fprintf(fd, "  YCbCr Positioning: ");
fprintf(fd, "  YCbCr Positioning: ")
fprintf
fprintf
fd
fd
"  YCbCr Positioning: "
switch (td->td_ycbcrpositioning) {		case YCBCRPOSITION_CENTERED:			fprintf(fd, "centered\n");			break;		case YCBCRPOSITION_COSITED:			fprintf(fd, "cosited\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_ycbcrpositioning, td->td_ycbcrpositioning);			break;		}
td->td_ycbcrpositioning
td
td
td_ycbcrpositioning
{		case YCBCRPOSITION_CENTERED:			fprintf(fd, "centered\n");			break;		case YCBCRPOSITION_COSITED:			fprintf(fd, "cosited\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_ycbcrpositioning, td->td_ycbcrpositioning);			break;		}
case YCBCRPOSITION_CENTERED:
YCBCRPOSITION_CENTERED
YCBCRPOSITION_CENTERED
fprintf(fd, "centered\n");
fprintf(fd, "centered\n")
fprintf
fprintf
fd
fd
"centered\n"
break;
case YCBCRPOSITION_COSITED:
YCBCRPOSITION_COSITED
YCBCRPOSITION_COSITED
fprintf(fd, "cosited\n");
fprintf(fd, "cosited\n")
fprintf
fprintf
fd
fd
"cosited\n"
break;
default:
fprintf(fd, "%u (0x%x)\n",			    td->td_ycbcrpositioning, td->td_ycbcrpositioning);
fprintf(fd, "%u (0x%x)\n",			    td->td_ycbcrpositioning, td->td_ycbcrpositioning)
fprintf
fprintf
fd
fd
"%u (0x%x)\n"
td->td_ycbcrpositioning
td
td
td_ycbcrpositioning
td->td_ycbcrpositioning
td
td
td_ycbcrpositioning
break;
if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))		fprintf(fd, "  Halftone Hints: light %u dark %u\n",		    td->td_halftonehints[0], td->td_halftonehints[1]);
TIFFFieldSet(tif,FIELD_HALFTONEHINTS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_HALFTONEHINTS
FIELD_HALFTONEHINTS
fprintf(fd, "  Halftone Hints: light %u dark %u\n",		    td->td_halftonehints[0], td->td_halftonehints[1]);
fprintf(fd, "  Halftone Hints: light %u dark %u\n",		    td->td_halftonehints[0], td->td_halftonehints[1])
fprintf
fprintf
fd
fd
"  Halftone Hints: light %u dark %u\n"
td->td_halftonehints[0]
td->td_halftonehints
td
td
td_halftonehints
0
td->td_halftonehints[1]
td->td_halftonehints
td
td
td_halftonehints
1
if (TIFFFieldSet(tif,FIELD_ORIENTATION)) {		fprintf(fd, "  Orientation: ");		if (td->td_orientation < NORIENTNAMES)			fprintf(fd, "%s\n", orientNames[td->td_orientation]);		else			fprintf(fd, "%u (0x%x)\n",			    td->td_orientation, td->td_orientation);	}
TIFFFieldSet(tif,FIELD_ORIENTATION)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_ORIENTATION
FIELD_ORIENTATION
{		fprintf(fd, "  Orientation: ");		if (td->td_orientation < NORIENTNAMES)			fprintf(fd, "%s\n", orientNames[td->td_orientation]);		else			fprintf(fd, "%u (0x%x)\n",			    td->td_orientation, td->td_orientation);	}
fprintf(fd, "  Orientation: ");
fprintf(fd, "  Orientation: ")
fprintf
fprintf
fd
fd
"  Orientation: "
if (td->td_orientation < NORIENTNAMES)			fprintf(fd, "%s\n", orientNames[td->td_orientation]);		else			fprintf(fd, "%u (0x%x)\n",			    td->td_orientation, td->td_orientation);
td->td_orientation < NORIENTNAMES
td->td_orientation
td
td
td_orientation
NORIENTNAMES
NORIENTNAMES
fprintf(fd, "%s\n", orientNames[td->td_orientation]);
fprintf(fd, "%s\n", orientNames[td->td_orientation])
fprintf
fprintf
fd
fd
"%s\n"
orientNames[td->td_orientation]
orientNames
orientNames
td->td_orientation
td
td
td_orientation
fprintf(fd, "%u (0x%x)\n",			    td->td_orientation, td->td_orientation);
fprintf(fd, "%u (0x%x)\n",			    td->td_orientation, td->td_orientation)
fprintf
fprintf
fd
fd
"%u (0x%x)\n"
td->td_orientation
td
td
td_orientation
td->td_orientation
td
td
td_orientation
if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))		fprintf(fd, "  Samples/Pixel: %u\n", td->td_samplesperpixel);
TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SAMPLESPERPIXEL
FIELD_SAMPLESPERPIXEL
fprintf(fd, "  Samples/Pixel: %u\n", td->td_samplesperpixel);
fprintf(fd, "  Samples/Pixel: %u\n", td->td_samplesperpixel)
fprintf
fprintf
fd
fd
"  Samples/Pixel: %u\n"
td->td_samplesperpixel
td
td
td_samplesperpixel
if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP)) {		fprintf(fd, "  Rows/Strip: ");		if (td->td_rowsperstrip == (uint32) -1)			fprintf(fd, "(infinite)\n");		else			fprintf(fd, "%lu\n", (unsigned long) td->td_rowsperstrip);	}
TIFFFieldSet(tif,FIELD_ROWSPERSTRIP)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_ROWSPERSTRIP
FIELD_ROWSPERSTRIP
{		fprintf(fd, "  Rows/Strip: ");		if (td->td_rowsperstrip == (uint32) -1)			fprintf(fd, "(infinite)\n");		else			fprintf(fd, "%lu\n", (unsigned long) td->td_rowsperstrip);	}
fprintf(fd, "  Rows/Strip: ");
fprintf(fd, "  Rows/Strip: ")
fprintf
fprintf
fd
fd
"  Rows/Strip: "
if (td->td_rowsperstrip == (uint32) -1)			fprintf(fd, "(infinite)\n");		else			fprintf(fd, "%lu\n", (unsigned long) td->td_rowsperstrip);
td->td_rowsperstrip == (uint32) -1
td->td_rowsperstrip
td
td
td_rowsperstrip
(uint32) -1
(uint32)
uint32
uint32
1
fprintf(fd, "(infinite)\n");
fprintf(fd, "(infinite)\n")
fprintf
fprintf
fd
fd
"(infinite)\n"
fprintf(fd, "%lu\n", (unsigned long) td->td_rowsperstrip);
fprintf(fd, "%lu\n", (unsigned long) td->td_rowsperstrip)
fprintf
fprintf
fd
fd
"%lu\n"
(unsigned long) td->td_rowsperstrip
unsigned long
unsigned long

td->td_rowsperstrip
td
td
td_rowsperstrip
if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))		fprintf(fd, "  Min Sample Value: %u\n", td->td_minsamplevalue);
TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_MINSAMPLEVALUE
FIELD_MINSAMPLEVALUE
fprintf(fd, "  Min Sample Value: %u\n", td->td_minsamplevalue);
fprintf(fd, "  Min Sample Value: %u\n", td->td_minsamplevalue)
fprintf
fprintf
fd
fd
"  Min Sample Value: %u\n"
td->td_minsamplevalue
td
td
td_minsamplevalue
if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))		fprintf(fd, "  Max Sample Value: %u\n", td->td_maxsamplevalue);
TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_MAXSAMPLEVALUE
FIELD_MAXSAMPLEVALUE
fprintf(fd, "  Max Sample Value: %u\n", td->td_maxsamplevalue);
fprintf(fd, "  Max Sample Value: %u\n", td->td_maxsamplevalue)
fprintf
fprintf
fd
fd
"  Max Sample Value: %u\n"
td->td_maxsamplevalue
td
td
td_maxsamplevalue
if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE)) {		int i;		int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;		fprintf(fd, "  SMin Sample Value:");		for (i = 0; i < count; ++i)			fprintf(fd, " %g", td->td_sminsamplevalue[i]);		fprintf(fd, "\n");	}
TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SMINSAMPLEVALUE
FIELD_SMINSAMPLEVALUE
{		int i;		int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;		fprintf(fd, "  SMin Sample Value:");		for (i = 0; i < count; ++i)			fprintf(fd, " %g", td->td_sminsamplevalue[i]);		fprintf(fd, "\n");	}
int i;
int i;
int
i
i
int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;
int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;
int
count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1
count
= (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1
(tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1
(tif->tif_flags & TIFF_PERSAMPLE)
tif->tif_flags & TIFF_PERSAMPLE
tif->tif_flags
tif
tif
tif_flags
TIFF_PERSAMPLE
TIFF_PERSAMPLE
td->td_samplesperpixel
td
td
td_samplesperpixel
1
fprintf(fd, "  SMin Sample Value:");
fprintf(fd, "  SMin Sample Value:")
fprintf
fprintf
fd
fd
"  SMin Sample Value:"
for (i = 0; i < count; ++i)			fprintf(fd, " %g", td->td_sminsamplevalue[i]);
i = 0;
i = 0
i
i
0
i < count
i
i
count
count
++i
i
i
fprintf(fd, " %g", td->td_sminsamplevalue[i]);
fprintf(fd, " %g", td->td_sminsamplevalue[i])
fprintf
fprintf
fd
fd
" %g"
td->td_sminsamplevalue[i]
td->td_sminsamplevalue
td
td
td_sminsamplevalue
i
i
fprintf(fd, "\n");
fprintf(fd, "\n")
fprintf
fprintf
fd
fd
"\n"
if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE)) {		int i;		int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;		fprintf(fd, "  SMax Sample Value:");		for (i = 0; i < count; ++i)			fprintf(fd, " %g", td->td_smaxsamplevalue[i]);		fprintf(fd, "\n");	}
TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SMAXSAMPLEVALUE
FIELD_SMAXSAMPLEVALUE
{		int i;		int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;		fprintf(fd, "  SMax Sample Value:");		for (i = 0; i < count; ++i)			fprintf(fd, " %g", td->td_smaxsamplevalue[i]);		fprintf(fd, "\n");	}
int i;
int i;
int
i
i
int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;
int count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1;
int
count = (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1
count
= (tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1
(tif->tif_flags & TIFF_PERSAMPLE) ? td->td_samplesperpixel : 1
(tif->tif_flags & TIFF_PERSAMPLE)
tif->tif_flags & TIFF_PERSAMPLE
tif->tif_flags
tif
tif
tif_flags
TIFF_PERSAMPLE
TIFF_PERSAMPLE
td->td_samplesperpixel
td
td
td_samplesperpixel
1
fprintf(fd, "  SMax Sample Value:");
fprintf(fd, "  SMax Sample Value:")
fprintf
fprintf
fd
fd
"  SMax Sample Value:"
for (i = 0; i < count; ++i)			fprintf(fd, " %g", td->td_smaxsamplevalue[i]);
i = 0;
i = 0
i
i
0
i < count
i
i
count
count
++i
i
i
fprintf(fd, " %g", td->td_smaxsamplevalue[i]);
fprintf(fd, " %g", td->td_smaxsamplevalue[i])
fprintf
fprintf
fd
fd
" %g"
td->td_smaxsamplevalue[i]
td->td_smaxsamplevalue
td
td
td_smaxsamplevalue
i
i
fprintf(fd, "\n");
fprintf(fd, "\n")
fprintf
fprintf
fd
fd
"\n"
if (TIFFFieldSet(tif,FIELD_PLANARCONFIG)) {		fprintf(fd, "  Planar Configuration: ");		switch (td->td_planarconfig) {		case PLANARCONFIG_CONTIG:			fprintf(fd, "single image plane\n");			break;		case PLANARCONFIG_SEPARATE:			fprintf(fd, "separate image planes\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_planarconfig, td->td_planarconfig);			break;		}	}
TIFFFieldSet(tif,FIELD_PLANARCONFIG)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_PLANARCONFIG
FIELD_PLANARCONFIG
{		fprintf(fd, "  Planar Configuration: ");		switch (td->td_planarconfig) {		case PLANARCONFIG_CONTIG:			fprintf(fd, "single image plane\n");			break;		case PLANARCONFIG_SEPARATE:			fprintf(fd, "separate image planes\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_planarconfig, td->td_planarconfig);			break;		}	}
fprintf(fd, "  Planar Configuration: ");
fprintf(fd, "  Planar Configuration: ")
fprintf
fprintf
fd
fd
"  Planar Configuration: "
switch (td->td_planarconfig) {		case PLANARCONFIG_CONTIG:			fprintf(fd, "single image plane\n");			break;		case PLANARCONFIG_SEPARATE:			fprintf(fd, "separate image planes\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_planarconfig, td->td_planarconfig);			break;		}
td->td_planarconfig
td
td
td_planarconfig
{		case PLANARCONFIG_CONTIG:			fprintf(fd, "single image plane\n");			break;		case PLANARCONFIG_SEPARATE:			fprintf(fd, "separate image planes\n");			break;		default:			fprintf(fd, "%u (0x%x)\n",			    td->td_planarconfig, td->td_planarconfig);			break;		}
case PLANARCONFIG_CONTIG:
PLANARCONFIG_CONTIG
PLANARCONFIG_CONTIG
fprintf(fd, "single image plane\n");
fprintf(fd, "single image plane\n")
fprintf
fprintf
fd
fd
"single image plane\n"
break;
case PLANARCONFIG_SEPARATE:
PLANARCONFIG_SEPARATE
PLANARCONFIG_SEPARATE
fprintf(fd, "separate image planes\n");
fprintf(fd, "separate image planes\n")
fprintf
fprintf
fd
fd
"separate image planes\n"
break;
default:
fprintf(fd, "%u (0x%x)\n",			    td->td_planarconfig, td->td_planarconfig);
fprintf(fd, "%u (0x%x)\n",			    td->td_planarconfig, td->td_planarconfig)
fprintf
fprintf
fd
fd
"%u (0x%x)\n"
td->td_planarconfig
td
td
td_planarconfig
td->td_planarconfig
td
td
td_planarconfig
break;
if (TIFFFieldSet(tif,FIELD_PAGENUMBER))		fprintf(fd, "  Page Number: %u-%u\n",		    td->td_pagenumber[0], td->td_pagenumber[1]);
TIFFFieldSet(tif,FIELD_PAGENUMBER)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_PAGENUMBER
FIELD_PAGENUMBER
fprintf(fd, "  Page Number: %u-%u\n",		    td->td_pagenumber[0], td->td_pagenumber[1]);
fprintf(fd, "  Page Number: %u-%u\n",		    td->td_pagenumber[0], td->td_pagenumber[1])
fprintf
fprintf
fd
fd
"  Page Number: %u-%u\n"
td->td_pagenumber[0]
td->td_pagenumber
td
td
td_pagenumber
0
td->td_pagenumber[1]
td->td_pagenumber
td
td
td_pagenumber
1
if (TIFFFieldSet(tif,FIELD_COLORMAP)) {		fprintf(fd, "  Color Map: ");		if (flags & TIFFPRINT_COLORMAP) {			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++)				fprintf(fd, "   %5ld: %5u %5u %5u\n",				    l,				    td->td_colormap[0][l],				    td->td_colormap[1][l],				    td->td_colormap[2][l]);		} else			fprintf(fd, "(present)\n");	}
TIFFFieldSet(tif,FIELD_COLORMAP)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_COLORMAP
FIELD_COLORMAP
{		fprintf(fd, "  Color Map: ");		if (flags & TIFFPRINT_COLORMAP) {			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++)				fprintf(fd, "   %5ld: %5u %5u %5u\n",				    l,				    td->td_colormap[0][l],				    td->td_colormap[1][l],				    td->td_colormap[2][l]);		} else			fprintf(fd, "(present)\n");	}
fprintf(fd, "  Color Map: ");
fprintf(fd, "  Color Map: ")
fprintf
fprintf
fd
fd
"  Color Map: "
if (flags & TIFFPRINT_COLORMAP) {			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++)				fprintf(fd, "   %5ld: %5u %5u %5u\n",				    l,				    td->td_colormap[0][l],				    td->td_colormap[1][l],				    td->td_colormap[2][l]);		} else			fprintf(fd, "(present)\n");
flags & TIFFPRINT_COLORMAP
flags
flags
TIFFPRINT_COLORMAP
TIFFPRINT_COLORMAP
{			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++)				fprintf(fd, "   %5ld: %5u %5u %5u\n",				    l,				    td->td_colormap[0][l],				    td->td_colormap[1][l],				    td->td_colormap[2][l]);		}
fprintf(fd, "\n");
fprintf(fd, "\n")
fprintf
fprintf
fd
fd
"\n"
n = 1L<<td->td_bitspersample;
n = 1L<<td->td_bitspersample
n
n
1L<<td->td_bitspersample
1L
td->td_bitspersample
td
td
td_bitspersample
for (l = 0; l < n; l++)				fprintf(fd, "   %5ld: %5u %5u %5u\n",				    l,				    td->td_colormap[0][l],				    td->td_colormap[1][l],				    td->td_colormap[2][l]);
l = 0;
l = 0
l
l
0
l < n
l
l
n
n
l++
l
l
fprintf(fd, "   %5ld: %5u %5u %5u\n",				    l,				    td->td_colormap[0][l],				    td->td_colormap[1][l],				    td->td_colormap[2][l]);
fprintf(fd, "   %5ld: %5u %5u %5u\n",				    l,				    td->td_colormap[0][l],				    td->td_colormap[1][l],				    td->td_colormap[2][l])
fprintf
fprintf
fd
fd
"   %5ld: %5u %5u %5u\n"
l
l
td->td_colormap[0][l]
td->td_colormap[0]
td->td_colormap
td
td
td_colormap
0
l
l
td->td_colormap[1][l]
td->td_colormap[1]
td->td_colormap
td
td
td_colormap
1
l
l
td->td_colormap[2][l]
td->td_colormap[2]
td->td_colormap
td
td
td_colormap
2
l
l
fprintf(fd, "(present)\n");
fprintf(fd, "(present)\n")
fprintf
fprintf
fd
fd
"(present)\n"
if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE)) {		int i;		fprintf(fd, "  Reference Black/White:\n");		for (i = 0; i < 3; i++)		fprintf(fd, "    %2d: %5g %5g\n", i,			td->td_refblackwhite[2*i+0],			td->td_refblackwhite[2*i+1]);	}
TIFFFieldSet(tif,FIELD_REFBLACKWHITE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_REFBLACKWHITE
FIELD_REFBLACKWHITE
{		int i;		fprintf(fd, "  Reference Black/White:\n");		for (i = 0; i < 3; i++)		fprintf(fd, "    %2d: %5g %5g\n", i,			td->td_refblackwhite[2*i+0],			td->td_refblackwhite[2*i+1]);	}
int i;
int i;
int
i
i
fprintf(fd, "  Reference Black/White:\n");
fprintf(fd, "  Reference Black/White:\n")
fprintf
fprintf
fd
fd
"  Reference Black/White:\n"
for (i = 0; i < 3; i++)		fprintf(fd, "    %2d: %5g %5g\n", i,			td->td_refblackwhite[2*i+0],			td->td_refblackwhite[2*i+1]);
i = 0;
i = 0
i
i
0
i < 3
i
i
3
i++
i
i
fprintf(fd, "    %2d: %5g %5g\n", i,			td->td_refblackwhite[2*i+0],			td->td_refblackwhite[2*i+1]);
fprintf(fd, "    %2d: %5g %5g\n", i,			td->td_refblackwhite[2*i+0],			td->td_refblackwhite[2*i+1])
fprintf
fprintf
fd
fd
"    %2d: %5g %5g\n"
i
i
td->td_refblackwhite[2*i+0]
td->td_refblackwhite
td
td
td_refblackwhite
2*i+0
2*i
2
i
i
0
td->td_refblackwhite[2*i+1]
td->td_refblackwhite
td
td
td_refblackwhite
2*i+1
2*i
2
i
i
1
if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION)) {		fprintf(fd, "  Transfer Function: ");		if (flags & TIFFPRINT_CURVES) {			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++) {				uint16 i;				fprintf(fd, "    %2ld: %5u",				    l, td->td_transferfunction[0][l]);				for (i = 1; i < td->td_samplesperpixel; i++)					fprintf(fd, " %5u",					    td->td_transferfunction[i][l]);				fputc('\n', fd);			}		} else			fprintf(fd, "(present)\n");	}
TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_TRANSFERFUNCTION
FIELD_TRANSFERFUNCTION
{		fprintf(fd, "  Transfer Function: ");		if (flags & TIFFPRINT_CURVES) {			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++) {				uint16 i;				fprintf(fd, "    %2ld: %5u",				    l, td->td_transferfunction[0][l]);				for (i = 1; i < td->td_samplesperpixel; i++)					fprintf(fd, " %5u",					    td->td_transferfunction[i][l]);				fputc('\n', fd);			}		} else			fprintf(fd, "(present)\n");	}
fprintf(fd, "  Transfer Function: ");
fprintf(fd, "  Transfer Function: ")
fprintf
fprintf
fd
fd
"  Transfer Function: "
if (flags & TIFFPRINT_CURVES) {			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++) {				uint16 i;				fprintf(fd, "    %2ld: %5u",				    l, td->td_transferfunction[0][l]);				for (i = 1; i < td->td_samplesperpixel; i++)					fprintf(fd, " %5u",					    td->td_transferfunction[i][l]);				fputc('\n', fd);			}		} else			fprintf(fd, "(present)\n");
flags & TIFFPRINT_CURVES
flags
flags
TIFFPRINT_CURVES
TIFFPRINT_CURVES
{			fprintf(fd, "\n");			n = 1L<<td->td_bitspersample;			for (l = 0; l < n; l++) {				uint16 i;				fprintf(fd, "    %2ld: %5u",				    l, td->td_transferfunction[0][l]);				for (i = 1; i < td->td_samplesperpixel; i++)					fprintf(fd, " %5u",					    td->td_transferfunction[i][l]);				fputc('\n', fd);			}		}
fprintf(fd, "\n");
fprintf(fd, "\n")
fprintf
fprintf
fd
fd
"\n"
n = 1L<<td->td_bitspersample;
n = 1L<<td->td_bitspersample
n
n
1L<<td->td_bitspersample
1L
td->td_bitspersample
td
td
td_bitspersample
for (l = 0; l < n; l++) {				uint16 i;				fprintf(fd, "    %2ld: %5u",				    l, td->td_transferfunction[0][l]);				for (i = 1; i < td->td_samplesperpixel; i++)					fprintf(fd, " %5u",					    td->td_transferfunction[i][l]);				fputc('\n', fd);			}
l = 0;
l = 0
l
l
0
l < n
l
l
n
n
l++
l
l
{				uint16 i;				fprintf(fd, "    %2ld: %5u",				    l, td->td_transferfunction[0][l]);				for (i = 1; i < td->td_samplesperpixel; i++)					fprintf(fd, " %5u",					    td->td_transferfunction[i][l]);				fputc('\n', fd);			}
uint16 i;
uint16 i;
uint16
uint16
i
i
fprintf(fd, "    %2ld: %5u",				    l, td->td_transferfunction[0][l]);
fprintf(fd, "    %2ld: %5u",				    l, td->td_transferfunction[0][l])
fprintf
fprintf
fd
fd
"    %2ld: %5u"
l
l
td->td_transferfunction[0][l]
td->td_transferfunction[0]
td->td_transferfunction
td
td
td_transferfunction
0
l
l
for (i = 1; i < td->td_samplesperpixel; i++)					fprintf(fd, " %5u",					    td->td_transferfunction[i][l]);
i = 1;
i = 1
i
i
1
i < td->td_samplesperpixel
i
i
td->td_samplesperpixel
td
td
td_samplesperpixel
i++
i
i
fprintf(fd, " %5u",					    td->td_transferfunction[i][l]);
fprintf(fd, " %5u",					    td->td_transferfunction[i][l])
fprintf
fprintf
fd
fd
" %5u"
td->td_transferfunction[i][l]
td->td_transferfunction[i]
td->td_transferfunction
td
td
td_transferfunction
i
i
l
l
fputc('\n', fd);
fputc('\n', fd)
fputc
fputc
'\n'
fd
fd
fprintf(fd, "(present)\n");
fprintf(fd, "(present)\n")
fprintf
fprintf
fd
fd
"(present)\n"
if (TIFFFieldSet(tif, FIELD_SUBIFD) && (td->td_subifd)) {		uint16 i;		fprintf(fd, "  SubIFD Offsets:");		for (i = 0; i < td->td_nsubifd; i++)#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))			fprintf(fd, " %5I64u",				(unsigned __int64) td->td_subifd[i]);#else			fprintf(fd, " %5llu",				(unsigned long long) td->td_subifd[i]);#endif		fputc('\n', fd);	}
TIFFFieldSet(tif, FIELD_SUBIFD) && (td->td_subifd)
TIFFFieldSet(tif, FIELD_SUBIFD)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SUBIFD
FIELD_SUBIFD
(td->td_subifd)
td->td_subifd
td
td
td_subifd
{		uint16 i;		fprintf(fd, "  SubIFD Offsets:");		for (i = 0; i < td->td_nsubifd; i++)#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))			fprintf(fd, " %5I64u",				(unsigned __int64) td->td_subifd[i]);#else			fprintf(fd, " %5llu",				(unsigned long long) td->td_subifd[i]);#endif		fputc('\n', fd);	}
uint16 i;
uint16 i;
uint16
uint16
i
i
fprintf(fd, "  SubIFD Offsets:");
fprintf(fd, "  SubIFD Offsets:")
fprintf
fprintf
fd
fd
"  SubIFD Offsets:"
for (i = 0; i < td->td_nsubifd; i++)#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))			fprintf(fd, " %5I64u",				(unsigned __int64) td->td_subifd[i]);#else			fprintf(fd, " %5llu",				(unsigned long long) td->td_subifd[i]);
i = 0;
i = 0
i
i
0
i < td->td_nsubifd
i
i
td->td_nsubifd
td
td
td_nsubifd
i++
i
i
fprintf(fd, " %5llu",				(unsigned long long) td->td_subifd[i]);
fprintf(fd, " %5llu",				(unsigned long long) td->td_subifd[i])
fprintf
fprintf
fd
fd
" %5llu"
(unsigned long long) td->td_subifd[i]
unsigned long long
unsigned long long

td->td_subifd[i]
td->td_subifd
td
td
td_subifd
i
i
fputc('\n', fd);
fputc('\n', fd)
fputc
fputc
'\n'
fd
fd
{		int  i;		short count;		count = (short) TIFFGetTagListCount(tif);		for(i = 0; i < count; i++) {			uint32 tag = TIFFGetTagListEntry(tif, i);			const TIFFField *fip;			uint32 value_count;			int mem_alloc = 0;			void *raw_data;			fip = TIFFFieldWithTag(tif, tag);			if(fip == NULL)				continue;			if(fip->field_passcount) {				if (fip->field_readcount == TIFF_VARIABLE2 ) {					if(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)						continue;				} else if (fip->field_readcount == TIFF_VARIABLE ) {					uint16 small_value_count;					if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)						continue;					value_count = small_value_count;				} else {					assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2);					continue;				} 			} else {				if (fip->field_readcount == TIFF_VARIABLE				    || fip->field_readcount == TIFF_VARIABLE2)					value_count = 1;				else if (fip->field_readcount == TIFF_SPP)					value_count = td->td_samplesperpixel;				else					value_count = fip->field_readcount;				if (fip->field_tag == TIFFTAG_DOTRANGE				    && strcmp(fip->field_name,"DotRange") == 0) {					/* TODO: This is an evil exception and should not have been					   handled this way ... likely best if we move it into					   the directory structure with an explicit field in 					   libtiff 4.1 and assign it a FIELD_ value */					static uint16 dotrange[2];					raw_data = dotrange;					TIFFGetField(tif, tag, dotrange+0, dotrange+1);				} else if (fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2					   || fip->field_readcount == TIFF_SPP					   || value_count > 1) {					if(TIFFGetField(tif, tag, &raw_data) != 1)						continue;				} else {					raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count);					mem_alloc = 1;					if(TIFFGetField(tif, tag, raw_data) != 1) {						_TIFFfree(raw_data);						continue;					}				}			}			/*			 * Catch the tags which needs to be specially handled			 * and pretty print them. If tag not handled in			 * _TIFFPrettyPrintField() fall down and print it as			 * any other tag.			 */			if (!_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data))				_TIFFPrintField(fd, fip, value_count, raw_data);			if(mem_alloc)				_TIFFfree(raw_data);		}	}
int  i;
int  i;
int
i
i
short count;
short count;
short
count
count
count = (short) TIFFGetTagListCount(tif);
count = (short) TIFFGetTagListCount(tif)
count
count
(short) TIFFGetTagListCount(tif)
short
short

TIFFGetTagListCount(tif)
TIFFGetTagListCount
TIFFGetTagListCount
tif
tif
for(i = 0; i < count; i++) {			uint32 tag = TIFFGetTagListEntry(tif, i);			const TIFFField *fip;			uint32 value_count;			int mem_alloc = 0;			void *raw_data;			fip = TIFFFieldWithTag(tif, tag);			if(fip == NULL)				continue;			if(fip->field_passcount) {				if (fip->field_readcount == TIFF_VARIABLE2 ) {					if(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)						continue;				} else if (fip->field_readcount == TIFF_VARIABLE ) {					uint16 small_value_count;					if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)						continue;					value_count = small_value_count;				} else {					assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2);					continue;				} 			} else {				if (fip->field_readcount == TIFF_VARIABLE				    || fip->field_readcount == TIFF_VARIABLE2)					value_count = 1;				else if (fip->field_readcount == TIFF_SPP)					value_count = td->td_samplesperpixel;				else					value_count = fip->field_readcount;				if (fip->field_tag == TIFFTAG_DOTRANGE				    && strcmp(fip->field_name,"DotRange") == 0) {					/* TODO: This is an evil exception and should not have been					   handled this way ... likely best if we move it into					   the directory structure with an explicit field in 					   libtiff 4.1 and assign it a FIELD_ value */					static uint16 dotrange[2];					raw_data = dotrange;					TIFFGetField(tif, tag, dotrange+0, dotrange+1);				} else if (fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2					   || fip->field_readcount == TIFF_SPP					   || value_count > 1) {					if(TIFFGetField(tif, tag, &raw_data) != 1)						continue;				} else {					raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count);					mem_alloc = 1;					if(TIFFGetField(tif, tag, raw_data) != 1) {						_TIFFfree(raw_data);						continue;					}				}			}			/*			 * Catch the tags which needs to be specially handled			 * and pretty print them. If tag not handled in			 * _TIFFPrettyPrintField() fall down and print it as			 * any other tag.			 */			if (!_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data))				_TIFFPrintField(fd, fip, value_count, raw_data);			if(mem_alloc)				_TIFFfree(raw_data);		}
i = 0;
i = 0
i
i
0
i < count
i
i
count
count
i++
i
i
{			uint32 tag = TIFFGetTagListEntry(tif, i);			const TIFFField *fip;			uint32 value_count;			int mem_alloc = 0;			void *raw_data;			fip = TIFFFieldWithTag(tif, tag);			if(fip == NULL)				continue;			if(fip->field_passcount) {				if (fip->field_readcount == TIFF_VARIABLE2 ) {					if(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)						continue;				} else if (fip->field_readcount == TIFF_VARIABLE ) {					uint16 small_value_count;					if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)						continue;					value_count = small_value_count;				} else {					assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2);					continue;				} 			} else {				if (fip->field_readcount == TIFF_VARIABLE				    || fip->field_readcount == TIFF_VARIABLE2)					value_count = 1;				else if (fip->field_readcount == TIFF_SPP)					value_count = td->td_samplesperpixel;				else					value_count = fip->field_readcount;				if (fip->field_tag == TIFFTAG_DOTRANGE				    && strcmp(fip->field_name,"DotRange") == 0) {					/* TODO: This is an evil exception and should not have been					   handled this way ... likely best if we move it into					   the directory structure with an explicit field in 					   libtiff 4.1 and assign it a FIELD_ value */					static uint16 dotrange[2];					raw_data = dotrange;					TIFFGetField(tif, tag, dotrange+0, dotrange+1);				} else if (fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2					   || fip->field_readcount == TIFF_SPP					   || value_count > 1) {					if(TIFFGetField(tif, tag, &raw_data) != 1)						continue;				} else {					raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count);					mem_alloc = 1;					if(TIFFGetField(tif, tag, raw_data) != 1) {						_TIFFfree(raw_data);						continue;					}				}			}			/*			 * Catch the tags which needs to be specially handled			 * and pretty print them. If tag not handled in			 * _TIFFPrettyPrintField() fall down and print it as			 * any other tag.			 */			if (!_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data))				_TIFFPrintField(fd, fip, value_count, raw_data);			if(mem_alloc)				_TIFFfree(raw_data);		}
uint32 tag = TIFFGetTagListEntry(tif, i);
uint32 tag = TIFFGetTagListEntry(tif, i);
uint32
uint32
tag = TIFFGetTagListEntry(tif, i)
tag
= TIFFGetTagListEntry(tif, i)
TIFFGetTagListEntry(tif, i)
TIFFGetTagListEntry
TIFFGetTagListEntry
tif
tif
i
i
const TIFFField *fip;
const TIFFField *fip;
const TIFFField
TIFFField
*fip
*
fip
uint32 value_count;
uint32 value_count;
uint32
uint32
value_count
value_count
int mem_alloc = 0;
int mem_alloc = 0;
int
mem_alloc = 0
mem_alloc
= 0
0
void *raw_data;
void *raw_data;
void
*raw_data
*
raw_data
fip = TIFFFieldWithTag(tif, tag);
fip = TIFFFieldWithTag(tif, tag)
fip
fip
TIFFFieldWithTag(tif, tag)
TIFFFieldWithTag
TIFFFieldWithTag
tif
tif
tag
tag
if(fip == NULL)				continue;
fip == NULL
fip
fip
NULL
NULL
continue;
if(fip->field_passcount) {				if (fip->field_readcount == TIFF_VARIABLE2 ) {					if(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)						continue;				} else if (fip->field_readcount == TIFF_VARIABLE ) {					uint16 small_value_count;					if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)						continue;					value_count = small_value_count;				} else {					assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2);					continue;				} 			} else {				if (fip->field_readcount == TIFF_VARIABLE				    || fip->field_readcount == TIFF_VARIABLE2)					value_count = 1;				else if (fip->field_readcount == TIFF_SPP)					value_count = td->td_samplesperpixel;				else					value_count = fip->field_readcount;				if (fip->field_tag == TIFFTAG_DOTRANGE				    && strcmp(fip->field_name,"DotRange") == 0) {					/* TODO: This is an evil exception and should not have been					   handled this way ... likely best if we move it into					   the directory structure with an explicit field in 					   libtiff 4.1 and assign it a FIELD_ value */					static uint16 dotrange[2];					raw_data = dotrange;					TIFFGetField(tif, tag, dotrange+0, dotrange+1);				} else if (fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2					   || fip->field_readcount == TIFF_SPP					   || value_count > 1) {					if(TIFFGetField(tif, tag, &raw_data) != 1)						continue;				} else {					raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count);					mem_alloc = 1;					if(TIFFGetField(tif, tag, raw_data) != 1) {						_TIFFfree(raw_data);						continue;					}				}			}
fip->field_passcount
fip
fip
field_passcount
{				if (fip->field_readcount == TIFF_VARIABLE2 ) {					if(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)						continue;				} else if (fip->field_readcount == TIFF_VARIABLE ) {					uint16 small_value_count;					if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)						continue;					value_count = small_value_count;				} else {					assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2);					continue;				} 			}
if (fip->field_readcount == TIFF_VARIABLE2 ) {					if(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)						continue;				} else if (fip->field_readcount == TIFF_VARIABLE ) {					uint16 small_value_count;					if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)						continue;					value_count = small_value_count;				} else {					assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2);					continue;				}
fip->field_readcount == TIFF_VARIABLE2
fip->field_readcount
fip
fip
field_readcount
TIFF_VARIABLE2
TIFF_VARIABLE2
{					if(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)						continue;				}
if(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)						continue;
TIFFGetField(tif, tag, &value_count, &raw_data) != 1
TIFFGetField(tif, tag, &value_count, &raw_data)
TIFFGetField
TIFFGetField
tif
tif
tag
tag
&value_count
value_count
value_count
&raw_data
raw_data
raw_data
1
continue;
if (fip->field_readcount == TIFF_VARIABLE ) {					uint16 small_value_count;					if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)						continue;					value_count = small_value_count;				} else {					assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2);					continue;				}
fip->field_readcount == TIFF_VARIABLE
fip->field_readcount
fip
fip
field_readcount
TIFF_VARIABLE
TIFF_VARIABLE
{					uint16 small_value_count;					if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)						continue;					value_count = small_value_count;				}
uint16 small_value_count;
uint16 small_value_count;
uint16
uint16
small_value_count
small_value_count
if(TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1)						continue;
TIFFGetField(tif, tag, &small_value_count, &raw_data) != 1
TIFFGetField(tif, tag, &small_value_count, &raw_data)
TIFFGetField
TIFFGetField
tif
tif
tag
tag
&small_value_count
small_value_count
small_value_count
&raw_data
raw_data
raw_data
1
continue;
value_count = small_value_count;
value_count = small_value_count
value_count
value_count
small_value_count
small_value_count
{					assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2);					continue;				}
assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2);
assert (fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2)
assert
assert
fip->field_readcount == TIFF_VARIABLE						|| fip->field_readcount == TIFF_VARIABLE2
fip->field_readcount == TIFF_VARIABLE
fip->field_readcount
fip
fip
field_readcount
TIFF_VARIABLE
TIFF_VARIABLE
fip->field_readcount == TIFF_VARIABLE2
fip->field_readcount
fip
fip
field_readcount
TIFF_VARIABLE2
TIFF_VARIABLE2
continue;
{				if (fip->field_readcount == TIFF_VARIABLE				    || fip->field_readcount == TIFF_VARIABLE2)					value_count = 1;				else if (fip->field_readcount == TIFF_SPP)					value_count = td->td_samplesperpixel;				else					value_count = fip->field_readcount;				if (fip->field_tag == TIFFTAG_DOTRANGE				    && strcmp(fip->field_name,"DotRange") == 0) {					/* TODO: This is an evil exception and should not have been					   handled this way ... likely best if we move it into					   the directory structure with an explicit field in 					   libtiff 4.1 and assign it a FIELD_ value */					static uint16 dotrange[2];					raw_data = dotrange;					TIFFGetField(tif, tag, dotrange+0, dotrange+1);				} else if (fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2					   || fip->field_readcount == TIFF_SPP					   || value_count > 1) {					if(TIFFGetField(tif, tag, &raw_data) != 1)						continue;				} else {					raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count);					mem_alloc = 1;					if(TIFFGetField(tif, tag, raw_data) != 1) {						_TIFFfree(raw_data);						continue;					}				}			}
if (fip->field_readcount == TIFF_VARIABLE				    || fip->field_readcount == TIFF_VARIABLE2)					value_count = 1;				else if (fip->field_readcount == TIFF_SPP)					value_count = td->td_samplesperpixel;				else					value_count = fip->field_readcount;
fip->field_readcount == TIFF_VARIABLE				    || fip->field_readcount == TIFF_VARIABLE2
fip->field_readcount == TIFF_VARIABLE
fip->field_readcount
fip
fip
field_readcount
TIFF_VARIABLE
TIFF_VARIABLE
fip->field_readcount == TIFF_VARIABLE2
fip->field_readcount
fip
fip
field_readcount
TIFF_VARIABLE2
TIFF_VARIABLE2
value_count = 1;
value_count = 1
value_count
value_count
1
if (fip->field_readcount == TIFF_SPP)					value_count = td->td_samplesperpixel;				else					value_count = fip->field_readcount;
fip->field_readcount == TIFF_SPP
fip->field_readcount
fip
fip
field_readcount
TIFF_SPP
TIFF_SPP
value_count = td->td_samplesperpixel;
value_count = td->td_samplesperpixel
value_count
value_count
td->td_samplesperpixel
td
td
td_samplesperpixel
value_count = fip->field_readcount;
value_count = fip->field_readcount
value_count
value_count
fip->field_readcount
fip
fip
field_readcount
if (fip->field_tag == TIFFTAG_DOTRANGE				    && strcmp(fip->field_name,"DotRange") == 0) {					/* TODO: This is an evil exception and should not have been					   handled this way ... likely best if we move it into					   the directory structure with an explicit field in 					   libtiff 4.1 and assign it a FIELD_ value */					static uint16 dotrange[2];					raw_data = dotrange;					TIFFGetField(tif, tag, dotrange+0, dotrange+1);				} else if (fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2					   || fip->field_readcount == TIFF_SPP					   || value_count > 1) {					if(TIFFGetField(tif, tag, &raw_data) != 1)						continue;				} else {					raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count);					mem_alloc = 1;					if(TIFFGetField(tif, tag, raw_data) != 1) {						_TIFFfree(raw_data);						continue;					}				}
fip->field_tag == TIFFTAG_DOTRANGE				    && strcmp(fip->field_name,"DotRange") == 0
fip->field_tag == TIFFTAG_DOTRANGE
fip->field_tag
fip
fip
field_tag
TIFFTAG_DOTRANGE
TIFFTAG_DOTRANGE
strcmp(fip->field_name,"DotRange") == 0
strcmp(fip->field_name,"DotRange")
strcmp
strcmp
fip->field_name
fip
fip
field_name
"DotRange"
0
{					/* TODO: This is an evil exception and should not have been					   handled this way ... likely best if we move it into					   the directory structure with an explicit field in 					   libtiff 4.1 and assign it a FIELD_ value */					static uint16 dotrange[2];					raw_data = dotrange;					TIFFGetField(tif, tag, dotrange+0, dotrange+1);				}
static uint16 dotrange[2];
static uint16 dotrange[2];
static uint16
uint16
dotrange[2]
dotrange
[2]
2
raw_data = dotrange;
raw_data = dotrange
raw_data
raw_data
dotrange
dotrange
TIFFGetField(tif, tag, dotrange+0, dotrange+1);
TIFFGetField(tif, tag, dotrange+0, dotrange+1)
TIFFGetField
TIFFGetField
tif
tif
tag
tag
dotrange+0
dotrange
dotrange
0
dotrange+1
dotrange
dotrange
1
if (fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2					   || fip->field_readcount == TIFF_SPP					   || value_count > 1) {					if(TIFFGetField(tif, tag, &raw_data) != 1)						continue;				} else {					raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count);					mem_alloc = 1;					if(TIFFGetField(tif, tag, raw_data) != 1) {						_TIFFfree(raw_data);						continue;					}				}
fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2					   || fip->field_readcount == TIFF_SPP					   || value_count > 1
fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2					   || fip->field_readcount == TIFF_SPP
fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE					   || fip->field_readcount == TIFF_VARIABLE2
fip->field_type == TIFF_ASCII					   || fip->field_readcount == TIFF_VARIABLE
fip->field_type == TIFF_ASCII
fip->field_type
fip
fip
field_type
TIFF_ASCII
TIFF_ASCII
fip->field_readcount == TIFF_VARIABLE
fip->field_readcount
fip
fip
field_readcount
TIFF_VARIABLE
TIFF_VARIABLE
fip->field_readcount == TIFF_VARIABLE2
fip->field_readcount
fip
fip
field_readcount
TIFF_VARIABLE2
TIFF_VARIABLE2
fip->field_readcount == TIFF_SPP
fip->field_readcount
fip
fip
field_readcount
TIFF_SPP
TIFF_SPP
value_count > 1
value_count
value_count
1
{					if(TIFFGetField(tif, tag, &raw_data) != 1)						continue;				}
if(TIFFGetField(tif, tag, &raw_data) != 1)						continue;
TIFFGetField(tif, tag, &raw_data) != 1
TIFFGetField(tif, tag, &raw_data)
TIFFGetField
TIFFGetField
tif
tif
tag
tag
&raw_data
raw_data
raw_data
1
continue;
{					raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count);					mem_alloc = 1;					if(TIFFGetField(tif, tag, raw_data) != 1) {						_TIFFfree(raw_data);						continue;					}				}
raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count);
raw_data = _TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count)
raw_data
raw_data
_TIFFmalloc(					    _TIFFDataSize(fip->field_type)					    * value_count)
_TIFFmalloc
_TIFFmalloc
_TIFFDataSize(fip->field_type)					    * value_count
_TIFFDataSize(fip->field_type)
_TIFFDataSize
_TIFFDataSize
fip->field_type
fip
fip
field_type
value_count
value_count
mem_alloc = 1;
mem_alloc = 1
mem_alloc
mem_alloc
1
if(TIFFGetField(tif, tag, raw_data) != 1) {						_TIFFfree(raw_data);						continue;					}
TIFFGetField(tif, tag, raw_data) != 1
TIFFGetField(tif, tag, raw_data)
TIFFGetField
TIFFGetField
tif
tif
tag
tag
raw_data
raw_data
1
{						_TIFFfree(raw_data);						continue;					}
_TIFFfree(raw_data);
_TIFFfree(raw_data)
_TIFFfree
_TIFFfree
raw_data
raw_data
continue;
if (!_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data))				_TIFFPrintField(fd, fip, value_count, raw_data);
!_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data)
_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data)
_TIFFPrettyPrintField
_TIFFPrettyPrintField
tif
tif
fip
fip
fd
fd
tag
tag
value_count
value_count
raw_data
raw_data
_TIFFPrintField(fd, fip, value_count, raw_data);
_TIFFPrintField(fd, fip, value_count, raw_data)
_TIFFPrintField
_TIFFPrintField
fd
fd
fip
fip
value_count
value_count
raw_data
raw_data
if(mem_alloc)				_TIFFfree(raw_data);
mem_alloc
mem_alloc
_TIFFfree(raw_data);
_TIFFfree(raw_data)
_TIFFfree
_TIFFfree
raw_data
raw_data
if (tif->tif_tagmethods.printdir)		(*tif->tif_tagmethods.printdir)(tif, fd, flags);
tif->tif_tagmethods.printdir
tif->tif_tagmethods
tif
tif
tif_tagmethods
printdir
(*tif->tif_tagmethods.printdir)(tif, fd, flags);
(*tif->tif_tagmethods.printdir)(tif, fd, flags)
(*tif->tif_tagmethods.printdir)
*tif->tif_tagmethods.printdir
tif->tif_tagmethods.printdir
tif->tif_tagmethods
tif
tif
tif_tagmethods
printdir
tif
tif
fd
fd
flags
flags
_TIFFFillStriles( tif );
_TIFFFillStriles( tif )
_TIFFFillStriles
_TIFFFillStriles
tif
tif
if ((flags & TIFFPRINT_STRIPS) &&	    TIFFFieldSet(tif,FIELD_STRIPOFFSETS)) {		uint32 s;		fprintf(fd, "  %lu %s:\n",		    (unsigned long) td->td_nstrips,		    isTiled(tif) ? "Tiles" : "Strips");		for (s = 0; s < td->td_nstrips; s++)#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))			fprintf(fd, "    %3lu: [%8I64u, %8I64u]\n",			    (unsigned long) s,			    (unsigned __int64) td->td_stripoffset[s],			    (unsigned __int64) td->td_stripbytecount[s]);#else			fprintf(fd, "    %3lu: [%8llu, %8llu]\n",			    (unsigned long) s,			    (unsigned long long) td->td_stripoffset[s],			    (unsigned long long) td->td_stripbytecount[s]);#endif	}
(flags & TIFFPRINT_STRIPS) &&	    TIFFFieldSet(tif,FIELD_STRIPOFFSETS)
(flags & TIFFPRINT_STRIPS)
flags & TIFFPRINT_STRIPS
flags
flags
TIFFPRINT_STRIPS
TIFFPRINT_STRIPS
TIFFFieldSet(tif,FIELD_STRIPOFFSETS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_STRIPOFFSETS
FIELD_STRIPOFFSETS
{		uint32 s;		fprintf(fd, "  %lu %s:\n",		    (unsigned long) td->td_nstrips,		    isTiled(tif) ? "Tiles" : "Strips");		for (s = 0; s < td->td_nstrips; s++)#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))			fprintf(fd, "    %3lu: [%8I64u, %8I64u]\n",			    (unsigned long) s,			    (unsigned __int64) td->td_stripoffset[s],			    (unsigned __int64) td->td_stripbytecount[s]);#else			fprintf(fd, "    %3lu: [%8llu, %8llu]\n",			    (unsigned long) s,			    (unsigned long long) td->td_stripoffset[s],			    (unsigned long long) td->td_stripbytecount[s]);#endif	}
uint32 s;
uint32 s;
uint32
uint32
s
s
fprintf(fd, "  %lu %s:\n",		    (unsigned long) td->td_nstrips,		    isTiled(tif) ? "Tiles" : "Strips");
fprintf(fd, "  %lu %s:\n",		    (unsigned long) td->td_nstrips,		    isTiled(tif) ? "Tiles" : "Strips")
fprintf
fprintf
fd
fd
"  %lu %s:\n"
(unsigned long) td->td_nstrips
unsigned long
unsigned long

td->td_nstrips
td
td
td_nstrips
isTiled(tif) ? "Tiles" : "Strips"
isTiled(tif)
isTiled
isTiled
tif
tif
"Tiles"
"Strips"
for (s = 0; s < td->td_nstrips; s++)#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))			fprintf(fd, "    %3lu: [%8I64u, %8I64u]\n",			    (unsigned long) s,			    (unsigned __int64) td->td_stripoffset[s],			    (unsigned __int64) td->td_stripbytecount[s]);#else			fprintf(fd, "    %3lu: [%8llu, %8llu]\n",			    (unsigned long) s,			    (unsigned long long) td->td_stripoffset[s],			    (unsigned long long) td->td_stripbytecount[s]);
s = 0;
s = 0
s
s
0
s < td->td_nstrips
s
s
td->td_nstrips
td
td
td_nstrips
s++
s
s
fprintf(fd, "    %3lu: [%8llu, %8llu]\n",			    (unsigned long) s,			    (unsigned long long) td->td_stripoffset[s],			    (unsigned long long) td->td_stripbytecount[s]);
fprintf(fd, "    %3lu: [%8llu, %8llu]\n",			    (unsigned long) s,			    (unsigned long long) td->td_stripoffset[s],			    (unsigned long long) td->td_stripbytecount[s])
fprintf
fprintf
fd
fd
"    %3lu: [%8llu, %8llu]\n"
(unsigned long) s
unsigned long
unsigned long

s
s
(unsigned long long) td->td_stripoffset[s]
unsigned long long
unsigned long long

td->td_stripoffset[s]
td->td_stripoffset
td
td
td_stripoffset
s
s
(unsigned long long) td->td_stripbytecount[s]
unsigned long long
unsigned long long

td->td_stripbytecount[s]
td->td_stripbytecount
td
td
td_stripbytecount
s
s
-----joern-----
(289,1025,0)
(104,498,0)
(152,368,0)
(693,1026,0)
(214,299,0)
(1312,941,0)
(1002,357,0)
(1147,1011,0)
(325,386,0)
(1218,1219,0)
(681,608,0)
(232,1168,0)
(1016,984,0)
(1187,58,0)
(318,1077,0)
(431,648,0)
(649,138,0)
(1290,816,0)
(1123,1056,0)
(1252,1210,0)
(311,39,0)
(660,1338,0)
(348,1179,0)
(294,1062,0)
(23,451,0)
(1257,273,0)
(1312,1210,0)
(187,1338,0)
(1025,63,0)
(449,1329,0)
(530,1110,0)
(800,365,0)
(1189,38,0)
(235,1210,0)
(770,1011,0)
(481,875,0)
(805,482,0)
(1145,560,0)
(802,1381,0)
(330,724,0)
(238,273,0)
(917,128,0)
(1053,933,0)
(1078,1365,0)
(947,1170,0)
(507,711,0)
(108,1223,0)
(1138,786,0)
(472,579,0)
(143,614,0)
(872,1219,0)
(40,260,0)
(987,77,0)
(801,941,0)
(188,844,0)
(477,892,0)
(36,1161,0)
(502,1168,0)
(385,1342,0)
(1104,1170,0)
(102,978,0)
(607,1210,0)
(1057,608,0)
(678,1210,0)
(1372,1210,0)
(598,884,0)
(724,330,0)
(852,562,0)
(724,189,0)
(957,316,0)
(1231,432,0)
(632,300,0)
(387,845,0)
(1126,941,0)
(799,648,0)
(656,1210,0)
(976,1238,0)
(1003,523,0)
(381,973,0)
(1026,693,0)
(230,1057,0)
(396,1253,0)
(551,190,0)
(149,1095,0)
(268,1118,0)
(205,30,0)
(213,978,0)
(1073,510,0)
(1083,859,0)
(358,1253,0)
(952,587,0)
(317,1292,0)
(211,510,0)
(1227,884,0)
(659,627,0)
(525,648,0)
(1269,193,0)
(979,1061,0)
(1241,126,0)
(1322,158,0)
(794,1038,0)
(1252,69,0)
(1344,1354,0)
(217,941,0)
(1383,1012,0)
(1050,474,0)
(429,470,0)
(1328,585,0)
(220,610,0)
(927,611,0)
(873,1093,0)
(67,800,0)
(394,560,0)
(123,1005,0)
(1097,648,0)
(1180,984,0)
(512,582,0)
(335,1281,0)
(934,923,0)
(822,596,0)
(1303,529,0)
(1363,207,0)
(206,970,0)
(495,760,0)
(216,1292,0)
(40,686,0)
(6,1099,0)
(599,972,0)
(875,1152,0)
(260,69,0)
(7,973,0)
(1237,1073,0)
(1337,621,0)
(1079,855,0)
(251,828,0)
(1017,384,0)
(566,648,0)
(1279,648,0)
(994,614,0)
(706,716,0)
(1151,286,0)
(1126,1210,0)
(715,1318,0)
(1082,1210,0)
(29,285,0)
(316,800,0)
(246,1116,0)
(734,344,0)
(231,903,0)
(65,1213,0)
(226,912,0)
(970,1010,0)
(1127,794,0)
(303,919,0)
(744,148,0)
(503,787,0)
(1136,1278,0)
(1252,1038,0)
(434,1155,0)
(269,648,0)
(1234,1388,0)
(1264,1126,0)
(361,301,0)
(579,648,0)
(471,678,0)
(1033,1345,0)
(922,1255,0)
(425,1038,0)
(170,1395,0)
(1264,1365,0)
(83,1154,0)
(638,569,0)
(1107,857,0)
(798,525,0)
(40,488,0)
(332,76,0)
(421,1210,0)
(183,1371,0)
(558,1210,0)
(932,290,0)
(1040,978,0)
(1061,513,0)
(854,122,0)
(327,1110,0)
(1260,648,0)
(1107,1210,0)
(945,872,0)
(394,608,0)
(1246,1109,0)
(1154,1237,0)
(30,728,0)
(1190,1110,0)
(967,1347,0)
(680,1110,0)
(1238,1332,0)
(1098,671,0)
(422,608,0)
(596,498,0)
(1188,474,0)
(1022,12,0)
(582,1210,0)
(56,828,0)
(747,1342,0)
(1308,1210,0)
(499,198,0)
(1101,262,0)
(906,550,0)
(884,1227,0)
(432,587,0)
(447,442,0)
(148,133,0)
(611,648,0)
(1018,282,0)
(541,491,0)
(787,235,0)
(404,277,0)
(1133,368,0)
(1014,661,0)
(258,1088,0)
(775,653,0)
(339,354,0)
(1012,539,0)
(1350,923,0)
(204,498,0)
(556,255,0)
(1170,1104,0)
(92,1265,0)
(1263,70,0)
(14,50,0)
(742,587,0)
(501,1110,0)
(1239,1227,0)
(1062,190,0)
(737,912,0)
(453,648,0)
(426,998,0)
(844,1210,0)
(908,1304,0)
(1284,86,0)
(1124,1210,0)
(613,704,0)
(409,434,0)
(129,1210,0)
(901,231,0)
(1364,55,0)
(322,1082,0)
(1134,1173,0)
(639,57,0)
(1047,48,0)
(892,648,0)
(686,40,0)
(754,1263,0)
(277,794,0)
(576,1056,0)
(844,1088,0)
(630,836,0)
(826,1210,0)
(125,695,0)
(622,1020,0)
(628,442,0)
(452,1110,0)
(1151,1210,0)
(175,607,0)
(774,517,0)
(260,40,0)
(812,167,0)
(550,311,0)
(1004,1073,0)
(1212,1210,0)
(1000,1110,0)
(806,1210,0)
(455,1095,0)
(845,387,0)
(1252,56,0)
(363,678,0)
(273,791,0)
(1237,1154,0)
(850,608,0)
(922,562,0)
(482,648,0)
(71,101,0)
(990,948,0)
(1381,498,0)
(458,973,0)
(1117,614,0)
(653,131,0)
(1151,1010,0)
(525,569,0)
(963,587,0)
(1205,513,0)
(1068,437,0)
(58,1253,0)
(1266,669,0)
(684,235,0)
(1223,1210,0)
(789,797,0)
(390,164,0)
(1059,855,0)
(555,331,0)
(185,1367,0)
(1007,607,0)
(860,684,0)
(46,568,0)
(1241,794,0)
(124,372,0)
(127,1182,0)
(300,668,0)
(1267,1394,0)
(1283,724,0)
(418,631,0)
(913,410,0)
(671,344,0)
(788,1363,0)
(1172,1118,0)
(295,1210,0)
(726,984,0)
(345,1252,0)
(658,1106,0)
(1049,610,0)
(425,404,0)
(891,415,0)
(222,562,0)
(355,823,0)
(1203,998,0)
(132,683,0)
(1093,873,0)
(1358,213,0)
(674,1205,0)
(221,678,0)
(514,648,0)
(73,360,0)
(213,1010,0)
(492,1063,0)
(1355,711,0)
(995,845,0)
(1120,202,0)
(341,539,0)
(701,1182,0)
(352,1207,0)
(436,1146,0)
(552,1310,0)
(3,801,0)
(703,611,0)
(1,805,0)
(615,860,0)
(1329,608,0)
(354,1062,0)
(400,433,0)
(980,608,0)
(1142,279,0)
(1179,348,0)
(1335,57,0)
(1182,279,0)
(685,252,0)
(949,1247,0)
(1177,185,0)
(254,587,0)
(965,1057,0)
(1148,884,0)
(116,1210,0)
(988,820,0)
(921,1079,0)
(1300,1155,0)
(336,617,0)
(84,431,0)
(1094,1338,0)
(1178,202,0)
(585,1210,0)
(924,648,0)
(193,567,0)
(1311,508,0)
(1377,1210,0)
(1116,1129,0)
(982,1056,0)
(224,509,0)
(1316,1260,0)
(1255,1073,0)
(344,117,0)
(1165,510,0)
(549,425,0)
(1205,648,0)
(1075,1219,0)
(399,290,0)
(1223,108,0)
(1158,202,0)
(1185,1089,0)
(265,100,0)
(635,30,0)
(542,648,0)
(19,1168,0)
(619,1263,0)
(264,834,0)
(1012,941,0)
(610,343,0)
(1309,848,0)
(355,1210,0)
(534,1252,0)
(457,86,0)
(626,432,0)
(1326,117,0)
(1195,801,0)
(1193,482,0)
(930,1210,0)
(961,815,0)
(1155,1253,0)
(1062,1210,0)
(853,1258,0)
(721,1265,0)
(578,1037,0)
(1318,76,0)
(1141,1124,0)
(1095,455,0)
(1157,1087,0)
(866,189,0)
(1301,648,0)
(253,904,0)
(513,430,0)
(900,1209,0)
(235,575,0)
(370,264,0)
(214,648,0)
(274,438,0)
(1235,748,0)
(1261,780,0)
(1019,265,0)
(861,486,0)
(941,306,0)
(1325,349,0)
(994,669,0)
(885,1210,0)
(677,608,0)
(293,240,0)
(223,849,0)
(1122,105,0)
(668,300,0)
(402,1081,0)
(177,306,0)
(1008,1312,0)
(1334,1056,0)
(239,857,0)
(602,678,0)
(684,860,0)
(1206,811,0)
(271,193,0)
(614,994,0)
(292,33,0)
(170,1210,0)
(267,1209,0)
(1248,33,0)
(364,887,0)
(859,1083,0)
(841,69,0)
(1294,671,0)
(807,648,0)
(1394,1366,0)
(819,769,0)
(1313,578,0)
(546,498,0)
(890,690,0)
(872,403,0)
(181,681,0)
(976,264,0)
(128,47,0)
(817,791,0)
(1207,514,0)
(186,1146,0)
(178,278,0)
(567,648,0)
(299,214,0)
(953,1026,0)
(1158,868,0)
(432,491,0)
(41,648,0)
(793,1094,0)
(85,1129,0)
(983,1065,0)
(1354,582,0)
(1011,464,0)
(997,1056,0)
(566,872,0)
(255,648,0)
(589,904,0)
(923,1350,0)
(86,608,0)
(1023,1107,0)
(728,30,0)
(837,315,0)
(904,1238,0)
(1093,450,0)
(1036,566,0)
(1109,41,0)
(996,1299,0)
(581,923,0)
(1124,857,0)
(169,403,0)
(387,608,0)
(656,360,0)
(1126,1078,0)
(641,1126,0)
(919,303,0)
(600,498,0)
(342,324,0)
(1107,657,0)
(1012,1210,0)
(938,129,0)
(102,1238,0)
(1318,1002,0)
(749,380,0)
(649,554,0)
(1196,1010,0)
(201,820,0)
(380,1093,0)
(1342,550,0)
(981,987,0)
(733,153,0)
(489,648,0)
(725,970,0)
(1079,648,0)
(580,567,0)
(803,899,0)
(781,709,0)
(1067,510,0)
(315,648,0)
(1280,1110,0)
(160,648,0)
(1145,1396,0)
(910,648,0)
(4,975,0)
(1028,1308,0)
(272,451,0)
(1077,189,0)
(758,1110,0)
(1058,1110,0)
(1171,223,0)
(1297,425,0)
(338,1157,0)
(424,659,0)
(678,335,0)
(582,1354,0)
(486,1210,0)
(284,651,0)
(527,1292,0)
(648,1347,0)
(610,521,0)
(612,1210,0)
(1055,1079,0)
(90,629,0)
(1391,1301,0)
(875,648,0)
(1249,1110,0)
(435,56,0)
(673,182,0)
(260,56,0)
(1331,160,0)
(998,426,0)
(978,213,0)
(109,656,0)
(234,848,0)
(191,1022,0)
(794,903,0)
(1247,1038,0)
(365,648,0)
(401,955,0)
(748,1235,0)
(862,1020,0)
(97,983,0)
(926,930,0)
(520,129,0)
(753,1110,0)
(184,431,0)
(993,453,0)
(694,529,0)
(259,1110,0)
(544,500,0)
(629,845,0)
(1026,582,0)
(977,1252,0)
(304,1074,0)
(72,451,0)
(529,845,0)
(958,196,0)
(425,562,0)
(896,367,0)
(1096,585,0)
(235,684,0)
(94,1189,0)
(373,956,0)
(705,786,0)
(485,238,0)
(1270,295,0)
(1379,1390,0)
(895,1110,0)
(146,554,0)
(295,887,0)
(1386,980,0)
(180,695,0)
(698,1022,0)
(265,98,0)
(320,189,0)
(531,608,0)
(989,384,0)
(867,1133,0)
(843,207,0)
(1381,1210,0)
(61,826,0)
(40,608,0)
(1233,1027,0)
(1255,608,0)
(939,324,0)
(1228,252,0)
(179,399,0)
(968,521,0)
(172,126,0)
(916,426,0)
(972,608,0)
(278,1237,0)
(633,983,0)
(1061,415,0)
(162,500,0)
(1212,1106,0)
(1305,302,0)
(151,367,0)
(1277,1393,0)
(570,1344,0)
(1118,268,0)
(408,389,0)
(670,998,0)
(649,1210,0)
(923,1210,0)
(597,557,0)
(290,399,0)
(1065,983,0)
(513,1205,0)
(209,836,0)
(444,994,0)
(976,299,0)
(255,1235,0)
(872,566,0)
(1204,1113,0)
(366,764,0)
(1151,970,0)
(1395,648,0)
(1258,531,0)
(1198,42,0)
(53,892,0)
(431,1063,0)
(712,360,0)
(1307,1092,0)
(1042,931,0)
(673,1130,0)
(986,1107,0)
(761,608,0)
(78,1145,0)
(335,330,0)
(678,189,0)
(442,1372,0)
(743,223,0)
(339,648,0)
(1175,567,0)
(700,352,0)
(474,264,0)
(316,1210,0)
(826,587,0)
(712,1210,0)
(1021,1279,0)
(1116,648,0)
(47,77,0)
(1106,874,0)
(1090,257,0)
(101,608,0)
(683,608,0)
(48,1219,0)
(1288,956,0)
(111,827,0)
(388,412,0)
(1095,149,0)
(249,55,0)
(778,1012,0)
(579,436,0)
(728,554,0)
(362,302,0)
(954,307,0)
(740,1096,0)
(978,1040,0)
(772,695,0)
(1065,331,0)
(1307,70,0)
(857,415,0)
(1106,658,0)
(105,1367,0)
(1218,1210,0)
(868,1145,0)
(618,1212,0)
(791,273,0)
(468,596,0)
(617,35,0)
(806,887,0)
(1194,918,0)
(473,1138,0)
(869,57,0)
(554,138,0)
(129,498,0)
(350,365,0)
(975,1210,0)
(299,590,0)
(809,343,0)
(241,1064,0)
(1078,1126,0)
(298,402,0)
(675,1253,0)
(164,845,0)
(1264,489,0)
(736,1091,0)
(519,148,0)
(1213,410,0)
(572,134,0)
(1167,433,0)
(865,799,0)
(923,815,0)
(513,1061,0)
(791,57,0)
(245,656,0)
(780,608,0)
(103,450,0)
(671,648,0)
(106,100,0)
(610,1027,0)
(250,915,0)
(960,189,0)
(1054,290,0)
(1103,498,0)
(1229,1126,0)
(434,648,0)
(445,1253,0)
(1235,255,0)
(391,498,0)
(196,1210,0)
(1352,948,0)
(1161,1210,0)
(920,160,0)
(432,636,0)
(196,984,0)
(438,791,0)
(380,653,0)
(182,1069,0)
(343,610,0)
(144,999,0)
(992,1260,0)
(595,933,0)
(470,608,0)
(1174,1110,0)
(88,1110,0)
(652,922,0)
(789,1130,0)
(757,515,0)
(974,510,0)
(707,40,0)
(1080,404,0)
(1070,1255,0)
(1317,542,0)
(60,1152,0)
(722,1210,0)
(312,608,0)
(243,1345,0)
(505,807,0)
(411,1151,0)
(1236,690,0)
(1062,354,0)
(1217,425,0)
(1345,1210,0)
(994,444,0)
(410,608,0)
(403,648,0)
(1202,1395,0)
(123,1210,0)
(1114,976,0)
(1157,1210,0)
(569,1140,0)
(1240,1396,0)
(1207,352,0)
(692,600,0)
(1149,1110,0)
(40,1073,0)
(795,1394,0)
(198,122,0)
(1385,648,0)
(273,300,0)
(651,117,0)
(437,372,0)
(1160,506,0)
(1324,1107,0)
(526,514,0)
(792,648,0)
(137,998,0)
(440,1110,0)
(1393,368,0)
(662,138,0)
(601,919,0)
(1073,820,0)
(55,648,0)
(604,111,0)
(174,850,0)
(98,887,0)
(533,488,0)
(161,1377,0)
(1318,1140,0)
(889,885,0)
(522,1179,0)
(1211,116,0)
(236,826,0)
(617,308,0)
(953,608,0)
(433,117,0)
(329,331,0)
(256,100,0)
(148,1210,0)
(238,57,0)
(82,683,0)
(870,1219,0)
(299,976,0)
(1084,975,0)
(45,1304,0)
(1367,105,0)
(1291,1043,0)
(1181,636,0)
(126,1241,0)
(1252,845,0)
(262,209,0)
(491,648,0)
(594,510,0)
(19,648,0)
(1135,1335,0)
(58,1210,0)
(858,149,0)
(659,1210,0)
(719,1155,0)
(1247,648,0)
(1299,760,0)
(30,648,0)
(1232,1113,0)
(794,1241,0)
(1301,108,0)
(1308,766,0)
(20,661,0)
(1060,436,0)
(864,686,0)
(266,1258,0)
(1001,437,0)
(153,648,0)
(759,764,0)
(1163,973,0)
(1271,474,0)
(642,1124,0)
(488,404,0)
(119,50,0)
(368,1080,0)
(653,380,0)
(959,722,0)
(1377,568,0)
(928,1301,0)
(9,164,0)
(1099,1167,0)
(337,941,0)
(1071,766,0)
(321,1253,0)
(333,231,0)
(1304,608,0)
(197,587,0)
(1306,1104,0)
(532,1388,0)
(732,539,0)
(111,384,0)
(199,1056,0)
(834,264,0)
(1396,648,0)
(1345,17,0)
(308,617,0)
(279,1182,0)
(147,68,0)
(276,436,0)
(49,489,0)
(488,562,0)
(1088,844,0)
(122,648,0)
(838,1140,0)
(159,117,0)
(814,35,0)
(244,1205,0)
(810,1081,0)
(1096,648,0)
(1048,1110,0)
(1255,922,0)
(1339,649,0)
(328,292,0)
(1369,1189,0)
(508,1210,0)
(300,57,0)
(92,101,0)
(636,432,0)
(1347,648,0)
(354,339,0)
(1121,40,0)
(420,659,0)
(944,1312,0)
(1238,1188,0)
(1312,252,0)
(218,1238,0)
(1357,1158,0)
(43,330,0)
(128,257,0)
(144,1017,0)
(829,63,0)
(193,1210,0)
(1234,1097,0)
(346,235,0)
(912,648,0)
(176,1087,0)
(1237,608,0)
(445,1210,0)
(1062,1235,0)
(588,1075,0)
(464,523,0)
(523,464,0)
(113,355,0)
(359,887,0)
(768,724,0)
(847,1247,0)
(1118,757,0)
(118,394,0)
(731,108,0)
(35,648,0)
(247,1065,0)
(260,1038,0)
(1168,924,0)
(1251,587,0)
(1223,317,0)
(975,307,0)
(648,1110,0)
(1354,1344,0)
(1094,221,0)
(948,1352,0)
(696,1299,0)
(784,1350,0)
(794,69,0)
(669,994,0)
(1341,1083,0)
(569,525,0)
(560,394,0)
(1265,92,0)
(1224,578,0)
(904,213,0)
(874,1106,0)
(102,264,0)
(446,784,0)
(1370,389,0)
(1130,399,0)
(1078,807,0)
(135,464,0)
(755,352,0)
(1356,100,0)
(1102,1212,0)
(1255,240,0)
(314,608,0)
(640,816,0)
(392,953,0)
(432,1210,0)
(474,1188,0)
(699,608,0)
(1351,256,0)
(1285,984,0)
(1295,827,0)
(87,973,0)
(1126,252,0)
(1323,384,0)
(326,1110,0)
(1363,608,0)
(107,1110,0)
(697,285,0)
(287,339,0)
(380,1210,0)
(515,757,0)
(375,836,0)
(606,708,0)
(11,669,0)
(583,510,0)
(1273,286,0)
(836,648,0)
(820,608,0)
(436,579,0)
(730,722,0)
(1302,470,0)
(1298,649,0)
(1183,560,0)
(813,531,0)
(352,648,0)
(574,354,0)
(1207,1056,0)
(142,273,0)
(983,648,0)
(577,286,0)
(93,1082,0)
(273,238,0)
(929,295,0)
(1292,648,0)
(1258,853,0)
(1336,1095,0)
(311,827,0)
(892,805,0)
(709,1156,0)
(667,995,0)
(998,608,0)
(1075,1210,0)
(488,40,0)
(1209,498,0)
(417,931,0)
(883,1003,0)
(1286,637,0)
(1226,1219,0)
(404,1366,0)
(1186,315,0)
(340,16,0)
(1017,405,0)
(44,401,0)
(805,1210,0)
(348,648,0)
(649,1310,0)
(1382,360,0)
(297,343,0)
(450,648,0)
(1080,562,0)
(1124,1156,0)
(399,1130,0)
(1125,255,0)
(219,508,0)
(221,1094,0)
(1035,637,0)
(157,48,0)
(376,919,0)
(666,123,0)
(621,1210,0)
(351,498,0)
(1144,1307,0)
(637,282,0)
(936,608,0)
(349,57,0)
(487,165,0)
(529,903,0)
(1250,780,0)
(115,762,0)
(462,252,0)
(403,872,0)
(605,12,0)
(1081,402,0)
(592,1140,0)
(1088,648,0)
(1069,182,0)
(227,759,0)
(500,585,0)
(504,518,0)
(145,1253,0)
(121,875,0)
(678,221,0)
(1188,1238,0)
(1132,973,0)
(1348,910,0)
(28,799,0)
(454,252,0)
(571,308,0)
(291,31,0)
(1244,476,0)
(378,955,0)
(120,1157,0)
(242,764,0)
(827,111,0)
(279,1365,0)
(775,648,0)
(1349,1223,0)
(438,153,0)
(1388,764,0)
(898,855,0)
(611,1155,0)
(1027,1233,0)
(565,608,0)
(971,649,0)
(70,1307,0)
(469,805,0)
(964,558,0)
(2,990,0)
(545,984,0)
(493,19,0)
(554,728,0)
(821,612,0)
(79,769,0)
(288,1305,0)
(281,1385,0)
(1354,818,0)
(790,510,0)
(1118,1172,0)
(663,1012,0)
(918,608,0)
(1321,510,0)
(1109,1365,0)
(275,712,0)
(1089,1185,0)
(1274,1308,0)
(410,1213,0)
(1113,1104,0)
(1168,19,0)
(484,1096,0)
(1045,348,0)
(762,1279,0)
(273,1210,0)
(34,1343,0)
(831,834,0)
(1024,307,0)
(1390,787,0)
(369,1365,0)
(21,801,0)
(741,834,0)
(27,365,0)
(548,1344,0)
(637,845,0)
(1152,811,0)
(24,521,0)
(467,498,0)
(1009,291,0)
(1013,1146,0)
(443,1395,0)
(1099,1210,0)
(1252,404,0)
(1155,1210,0)
(933,608,0)
(668,956,0)
(1105,228,0)
(1170,282,0)
(991,1099,0)
(1061,1210,0)
(1164,98,0)
(942,885,0)
(1091,608,0)
(450,1093,0)
(1388,1234,0)
(531,1258,0)
(1289,303,0)
(528,235,0)
(309,1110,0)
(709,1210,0)
(868,1020,0)
(324,769,0)
(716,695,0)
(811,648,0)
(210,784,0)
(266,451,0)
(76,648,0)
(1359,542,0)
(209,262,0)
(1333,1218,0)
(300,273,0)
(1037,976,0)
(1371,1210,0)
(827,1210,0)
(380,1005,0)
(110,903,0)
(166,629,0)
(191,845,0)
(386,1020,0)
(8,980,0)
(792,133,0)
(1113,845,0)
(349,262,0)
(185,648,0)
(407,792,0)
(720,56,0)
(636,648,0)
(543,936,0)
(506,608,0)
(557,307,0)
(200,745,0)
(673,231,0)
(1168,1210,0)
(301,648,0)
(943,590,0)
(1182,648,0)
(1237,278,0)
(1006,1264,0)
(439,1323,0)
(153,438,0)
(371,1219,0)
(1039,1075,0)
(70,1263,0)
(1367,185,0)
(567,193,0)
(377,191,0)
(1342,648,0)
(66,355,0)
(1225,314,0)
(985,1116,0)
(1002,1318,0)
(523,1003,0)
(1200,1237,0)
(691,924,0)
(1106,1212,0)
(935,1061,0)
(405,1017,0)
(563,995,0)
(365,800,0)
(1130,789,0)
(436,1210,0)
(897,761,0)
(270,317,0)
(398,1152,0)
(1063,431,0)
(1083,648,0)
(946,967,0)
(947,476,0)
(319,1279,0)
(419,984,0)
(509,510,0)
(425,69,0)
(550,384,0)
(1111,69,0)
(461,1312,0)
(283,1350,0)
(723,1110,0)
(885,973,0)
(1380,1365,0)
(1312,539,0)
(1044,123,0)
(37,510,0)
(160,815,0)
(133,792,0)
(257,128,0)
(1262,191,0)
(779,849,0)
(208,1040,0)
(126,845,0)
(1252,1073,0)
(80,498,0)
(465,759,0)
(497,1161,0)
(263,170,0)
(1065,1210,0)
(856,425,0)
(1093,380,0)
(990,1210,0)
(323,1219,0)
(1384,1097,0)
(855,55,0)
(1278,1210,0)
(796,712,0)
(967,608,0)
(464,786,0)
(168,1371,0)
(1037,578,0)
(1252,903,0)
(1292,317,0)
(557,1210,0)
(745,1253,0)
(1389,252,0)
(101,92,0)
(1372,442,0)
(310,828,0)
(437,1210,0)
(1227,848,0)
(51,910,0)
(623,566,0)
(756,421,0)
(368,608,0)
(914,775,0)
(139,369,0)
(676,1092,0)
(1353,38,0)
(1086,77,0)
(709,857,0)
(540,1281,0)
(1243,453,0)
(42,859,0)
(223,648,0)
(5,1199,0)
(834,648,0)
(1069,845,0)
(441,196,0)
(1080,368,0)
(860,648,0)
(374,761,0)
(1338,1094,0)
(59,1365,0)
(645,1156,0)
(1027,610,0)
(489,1264,0)
(22,1110,0)
(771,76,0)
(334,1132,0)
(661,1014,0)
(948,158,0)
(442,648,0)
(1368,587,0)
(1293,116,0)
(787,1390,0)
(687,133,0)
(1222,806,0)
(1169,1110,0)
(553,1252,0)
(1360,523,0)
(679,1069,0)
(586,252,0)
(905,845,0)
(1012,252,0)
(167,608,0)
(229,404,0)
(729,1281,0)
(1152,1210,0)
(260,903,0)
(871,489,0)
(620,990,0)
(872,1210,0)
(496,1343,0)
(760,1299,0)
(820,695,0)
(752,684,0)
(511,31,0)
(791,438,0)
(262,823,0)
(425,903,0)
(280,153,0)
(881,31,0)
(738,170,0)
(425,1210,0)
(1237,517,0)
(1259,266,0)
(475,1110,0)
(925,33,0)
(112,1372,0)
(907,58,0)
(31,845,0)
(335,678,0)
(1220,1097,0)
(1145,868,0)
(15,102,0)
(554,649,0)
(1340,252,0)
(386,1210,0)
(13,314,0)
(1150,621,0)
(625,967,0)
(311,550,0)
(562,517,0)
(1043,648,0)
(421,190,0)
(1362,222,0)
(804,1110,0)
(225,498,0)
(277,404,0)
(767,1223,0)
(406,403,0)
(1268,924,0)
(1119,197,0)
(427,384,0)
(538,402,0)
(459,339,0)
(273,57,0)
(910,102,0)
(354,574,0)
(1097,1234,0)
(708,648,0)
(197,1210,0)
(182,673,0)
(1376,1132,0)
(746,1253,0)
(393,498,0)
(722,877,0)
(1017,144,0)
(32,320,0)
(1027,453,0)
(1185,1061,0)
(41,1109,0)
(1015,1080,0)
(1170,947,0)
(195,514,0)
(584,718,0)
(26,1178,0)
(47,128,0)
(305,1043,0)
(716,266,0)
(1287,973,0)
(1374,498,0)
(922,404,0)
(248,915,0)
(765,1252,0)
(231,1038,0)
(50,1092,0)
(735,1207,0)
(261,899,0)
(874,648,0)
(228,608,0)
(1034,582,0)
(238,760,0)
(383,126,0)
(590,299,0)
(849,98,0)
(800,316,0)
(1299,648,0)
(483,676,0)
(158,948,0)
(480,214,0)
(1115,1110,0)
(655,636,0)
(1046,823,0)
(911,509,0)
(165,1002,0)
(150,1124,0)
(1002,165,0)
(893,180,0)
(515,648,0)
(600,1210,0)
(665,709,0)
(851,699,0)
(1029,1110,0)
(634,312,0)
(855,984,0)
(382,1218,0)
(591,111,0)
(1051,134,0)
(516,421,0)
(1230,807,0)
(1214,909,0)
(1390,648,0)
(212,681,0)
(760,238,0)
(1347,967,0)
(710,1020,0)
(1272,775,0)
(414,1278,0)
(647,565,0)
(849,223,0)
(654,1265,0)
(155,348,0)
(518,608,0)
(343,518,0)
(1282,709,0)
(930,498,0)
(171,1253,0)
(937,668,0)
(978,102,0)
(448,214,0)
(48,1210,0)
(1343,1210,0)
(820,1073,0)
(368,1133,0)
(617,202,0)
(1263,608,0)
(603,1207,0)
(717,303,0)
(1201,728,0)
(1129,1116,0)
(855,1210,0)
(282,637,0)
(285,608,0)
(474,1238,0)
(357,1002,0)
(99,316,0)
(368,1073,0)
(1126,539,0)
(1252,136,0)
(805,892,0)
(750,661,0)
(194,877,0)
(74,1062,0)
(105,608,0)
(54,585,0)
(1275,1110,0)
(1124,832,0)
(956,648,0)
(330,335,0)
(849,1213,0)
(535,1005,0)
(614,1210,0)
(331,648,0)
(81,1065,0)
(455,12,0)
(815,923,0)
(536,35,0)
(12,455,0)
(1061,1185,0)
(816,608,0)
(610,1210,0)
(412,138,0)
(607,1056,0)
(508,1064,0)
(1112,627,0)
(1100,676,0)
(33,648,0)
(301,433,0)
(1252,562,0)
(878,1167,0)
(98,849,0)
(842,811,0)
(624,1307,0)
(514,1207,0)
(727,1156,0)
(114,1305,0)
(91,410,0)
(863,1110,0)
(1032,1363,0)
(356,859,0)
(1227,100,0)
(1161,1056,0)
(661,845,0)
(367,1210,0)
(286,360,0)
(96,445,0)
(833,857,0)
(1346,558,0)
(1254,185,0)
(463,415,0)
(827,144,0)
(1025,1210,0)
(894,434,0)
(650,1110,0)
(836,209,0)
(1278,1020,0)
(1043,557,0)
(173,1255,0)
(1167,138,0)
(593,17,0)
(1132,1210,0)
(1242,101,0)
(1167,1099,0)
(585,1096,0)
(880,257,0)
(1162,422,0)
(1156,657,0)
(560,1145,0)
(1131,716,0)
(713,1252,0)
(1022,191,0)
(451,1110,0)
(231,673,0)
(646,105,0)
(1166,445,0)
(12,1022,0)
(479,677,0)
(1281,648,0)
(609,904,0)
(763,953,0)
(776,860,0)
(353,1366,0)
(561,22,0)
(612,38,0)
(108,1301,0)
(1139,19,0)
(428,360,0)
(1159,562,0)
(111,604,0)
(807,1078,0)
(77,47,0)
(122,198,0)
(52,1138,0)
(158,648,0)
(235,787,0)
(303,1388,0)
(1191,827,0)
(855,1079,0)
(1189,1210,0)
(1146,436,0)
(368,1393,0)
(233,612,0)
(987,845,0)
(1338,189,0)
(1276,1219,0)
(64,1091,0)
(387,1073,0)
(1373,268,0)
(308,1210,0)
(1344,608,0)
(1030,874,0)
(904,1210,0)
(494,202,0)
(669,648,0)
(801,1210,0)
(1085,165,0)
(0,745,0)
(1258,266,0)
(221,1385,0)
(1265,648,0)
(956,668,0)
(140,844,0)
(1343,608,0)
(827,311,0)
(616,525,0)
(903,529,0)
(1130,673,0)
(222,404,0)
(1152,973,0)
(876,936,0)
(1314,1219,0)
(1153,41,0)
(1252,608,0)
(1038,1247,0)
(1319,1038,0)
(948,990,0)
(1330,708,0)
(714,122,0)
(402,845,0)
(240,1255,0)
(825,1154,0)
(785,349,0)
(1235,1062,0)
(1143,1025,0)
(537,868,0)
(367,984,0)
(745,1210,0)
(818,1354,0)
(141,1088,0)
(815,160,0)
(904,1010,0)
(794,277,0)
(192,1151,0)
(453,1027,0)
(801,252,0)
(1361,387,0)
(163,872,0)
(998,404,0)
(456,1385,0)
(582,1110,0)
(590,648,0)
(784,648,0)
(564,930,0)
(539,307,0)
(824,138,0)
(282,1170,0)
(777,1310,0)
(1305,1210,0)
(313,806,0)
(773,197,0)
(1152,875,0)
(830,482,0)
(789,1014,0)
(149,845,0)
(845,510,0)
(35,617,0)
(672,265,0)
(966,699,0)
(904,264,0)
(39,311,0)
(1138,1210,0)
(1209,1210,0)
(1216,1110,0)
(909,404,0)
(1081,797,0)
(884,1210,0)
(344,671,0)
(999,144,0)
(423,386,0)
(500,648,0)
(292,384,0)
(596,1210,0)
(808,228,0)
(751,498,0)
(573,1219,0)
(1315,515,0)
(940,422,0)
(1327,1188,0)
(1199,995,0)
(919,1210,0)
(33,292,0)
(718,1140,0)
(436,877,0)
(848,1227,0)
(136,1252,0)
(62,1390,0)
(1343,1092,0)
(846,1329,0)
(702,557,0)
(156,972,0)
(433,301,0)
(207,1363,0)
(1076,209,0)
(1066,1381,0)
(1207,1210,0)
(909,68,0)
(1221,590,0)
(902,1219,0)
(1197,405,0)
(42,1332,0)
(1378,252,0)
(757,1118,0)
(653,775,0)
(1395,170,0)
(1392,498,0)
(1155,434,0)
(559,450,0)
(1011,138,0)
(95,887,0)
(433,1167,0)
(165,1210,0)
(1026,953,0)
(811,1152,0)
(835,792,0)
(859,360,0)
(550,1342,0)
(144,827,0)
(1192,955,0)
(664,1110,0)
(491,432,0)
(1256,1372,0)
(55,855,0)
(709,389,0)
(739,1014,0)
(962,515,0)
(347,600,0)
(1104,1113,0)
(1031,394,0)
(840,486,0)
(296,1377,0)
(18,506,0)
(557,1043,0)
(759,1210,0)
(879,149,0)
(783,1126,0)
(324,1210,0)
(102,910,0)
(1320,308,0)
(782,1069,0)
(643,380,0)
(22,608,0)
(317,1223,0)
(955,401,0)
(1215,167,0)
(31,291,0)
(1185,912,0)
(518,343,0)
(690,648,0)
(1052,874,0)
(430,513,0)
(1108,1040,0)
(1003,648,0)
(711,608,0)
(1155,611,0)
(805,498,0)
(1082,1310,0)
(1146,648,0)
(689,1343,0)
(899,608,0)
(801,539,0)
(1176,368,0)
(215,38,0)
(924,1168,0)
(682,1078,0)
(1350,784,0)
(1137,498,0)
(955,845,0)
(1072,1017,0)
(969,850,0)
(644,1237,0)
(797,789,0)
(578,859,0)
(1126,1264,0)
(886,182,0)
(951,987,0)
(1184,1077,0)
(1014,789,0)
(1040,648,0)
(77,987,0)
(995,1199,0)
(76,1318,0)
(1385,221,0)
(395,1158,0)
(478,579,0)
(416,415,0)
(25,41,0)
(257,845,0)
(425,56,0)
(231,69,0)
(154,278,0)
(1245,491,0)
(482,805,0)
(882,677,0)
(797,1081,0)
(290,845,0)
(621,1173,0)
(976,1037,0)
(331,1065,0)
(130,158,0)
(1279,762,0)
(912,1185,0)
(131,653,0)
(397,260,0)
(950,1296,0)
(1208,1083,0)
(524,565,0)
(405,648,0)
(1213,849,0)
(888,1003,0)
(134,608,0)
(848,648,0)
(10,387,0)
(1396,1145,0)
(1387,312,0)
(585,500,0)
(116,415,0)
(688,1110,0)
(389,832,0)
(466,1110,0)
(839,1396,0)
(379,273,0)
(1281,335,0)
(89,918,0)
(915,648,0)
(237,301,0)
(133,148,0)
(425,845,0)
(1375,1253,0)
(203,405,0)
(998,1073,0)
(582,1026,0)
(470,429,1)
(1385,648,1)
(565,647,1)
(816,608,1)
(661,845,1)
(485,760,1)
(13,1057,1)
(8,1386,1)
(1206,842,1)
(101,71,1)
(1308,1028,1)
(181,212,1)
(1349,767,1)
(1328,1057,1)
(690,1236,1)
(243,1033,1)
(116,1210,1)
(762,115,1)
(1179,348,1)
(248,250,1)
(346,528,1)
(1132,334,1)
(947,1170,1)
(548,1026,1)
(93,322,1)
(1390,648,1)
(678,221,1)
(1113,1204,1)
(1186,837,1)
(582,1026,1)
(953,608,1)
(1348,51,1)
(311,550,1)
(1121,1199,1)
(560,1183,1)
(1301,648,1)
(330,43,1)
(325,423,1)
(992,659,1)
(40,1073,1)
(301,361,1)
(509,224,1)
(345,1237,1)
(14,119,1)
(784,648,1)
(207,1363,1)
(602,471,1)
(289,1143,1)
(1094,1338,1)
(1357,395,1)
(760,495,1)
(780,608,1)
(908,1372,1)
(1285,196,1)
(80,930,1)
(660,187,1)
(1061,1210,1)
(410,91,1)
(135,1138,1)
(1385,281,1)
(648,1347,1)
(433,301,1)
(1154,825,1)
(635,1339,1)
(541,1245,1)
(799,648,1)
(1158,1357,1)
(191,845,1)
(1316,992,1)
(117,159,1)
(278,178,1)
(380,1093,1)
(30,205,1)
(77,987,1)
(160,1331,1)
(143,1117,1)
(368,1073,1)
(1045,1156,1)
(923,815,1)
(320,32,1)
(1065,1210,1)
(262,209,1)
(456,602,1)
(834,648,1)
(314,608,1)
(1257,379,1)
(239,116,1)
(1343,1210,1)
(952,432,1)
(731,1301,1)
(1312,539,1)
(918,89,1)
(897,470,1)
(858,1038,1)
(959,730,1)
(316,1210,1)
(762,1279,1)
(709,1156,1)
(328,1323,1)
(841,1111,1)
(628,447,1)
(387,1073,1)
(722,1210,1)
(1301,1391,1)
(736,64,1)
(323,48,1)
(1108,1358,1)
(273,300,1)
(980,608,1)
(1153,25,1)
(276,1060,1)
(329,247,1)
(504,1027,1)
(990,948,1)
(1054,932,1)
(373,1288,1)
(1386,204,1)
(342,939,1)
(231,1038,1)
(1028,1274,1)
(1336,149,1)
(1372,442,1)
(165,1002,1)
(1252,903,1)
(148,133,1)
(1015,1133,1)
(709,1210,1)
(714,389,1)
(459,287,1)
(617,35,1)
(1155,434,1)
(1191,292,1)
(784,210,1)
(111,604,1)
(1152,875,1)
(1318,715,1)
(1377,161,1)
(420,1304,1)
(189,866,1)
(105,1122,1)
(1258,531,1)
(893,147,1)
(904,213,1)
(334,1376,1)
(247,81,1)
(1167,878,1)
(345,56,1)
(617,336,1)
(1124,1156,1)
(1061,513,1)
(134,608,1)
(86,608,1)
(321,745,1)
(671,1098,1)
(412,388,1)
(581,934,1)
(544,54,1)
(1383,663,1)
(836,648,1)
(994,444,1)
(561,207,1)
(834,741,1)
(842,398,1)
(97,633,1)
(1050,218,1)
(1252,977,1)
(864,40,1)
(1041,164,1)
(231,69,1)
(41,1153,1)
(240,1255,1)
(875,121,1)
(1075,588,1)
(670,1203,1)
(102,1238,1)
(740,484,1)
(795,1267,1)
(941,217,1)
(709,857,1)
(60,708,1)
(256,100,1)
(1246,41,1)
(747,385,1)
(42,859,1)
(1342,648,1)
(392,763,1)
(599,923,1)
(410,608,1)
(174,969,1)
(1323,439,1)
(1049,70,1)
(335,330,1)
(1207,1210,1)
(1175,271,1)
(474,1238,1)
(407,687,1)
(1344,608,1)
(855,1210,1)
(1043,648,1)
(128,917,1)
(1013,186,1)
(1079,1055,1)
(605,1022,1)
(703,434,1)
(1107,1023,1)
(1232,282,1)
(437,1210,1)
(846,1077,1)
(1252,1038,1)
(1213,410,1)
(1268,691,1)
(1194,228,1)
(677,479,1)
(936,608,1)
(601,413,1)
(422,608,1)
(913,1164,1)
(904,264,1)
(744,519,1)
(998,670,1)
(219,1311,1)
(134,1051,1)
(944,461,1)
(957,99,1)
(1343,1092,1)
(318,320,1)
(298,538,1)
(1139,493,1)
(1017,405,1)
(172,383,1)
(972,156,1)
(1248,925,1)
(105,608,1)
(1291,702,1)
(1288,791,1)
(106,1356,1)
(821,233,1)
(123,1044,1)
(674,1185,1)
(1260,648,1)
(31,845,1)
(789,1014,1)
(250,699,1)
(125,772,1)
(40,608,1)
(65,410,1)
(708,1330,1)
(785,1325,1)
(15,1040,1)
(898,1059,1)
(1200,562,1)
(442,628,1)
(1133,867,1)
(1083,1341,1)
(1082,93,1)
(791,57,1)
(565,608,1)
(434,894,1)
(109,245,1)
(955,845,1)
(1236,890,1)
(265,672,1)
(998,608,1)
(229,797,1)
(1287,1152,1)
(715,76,1)
(987,845,1)
(1247,648,1)
(1374,1209,1)
(140,816,1)
(539,341,1)
(1003,648,1)
(1261,422,1)
(671,648,1)
(1030,1052,1)
(1299,648,1)
(1311,134,1)
(527,108,1)
(505,1264,1)
(1078,1365,1)
(1126,1210,1)
(692,347,1)
(1371,1210,1)
(1001,470,1)
(300,668,1)
(897,1375,1)
(666,565,1)
(876,543,1)
(609,1151,1)
(34,496,1)
(845,387,1)
(345,426,1)
(368,1133,1)
(1062,1210,1)
(1035,1286,1)
(89,1194,1)
(820,608,1)
(812,919,1)
(170,1210,1)
(775,648,1)
(869,262,1)
(585,1210,1)
(782,679,1)
(1026,953,1)
(1019,100,1)
(425,69,1)
(405,203,1)
(1078,682,1)
(1213,65,1)
(926,564,1)
(780,1250,1)
(1137,805,1)
(333,901,1)
(1339,971,1)
(1106,874,1)
(1289,717,1)
(12,1022,1)
(179,290,1)
(64,349,1)
(1019,256,1)
(265,98,1)
(1239,848,1)
(555,329,1)
(1127,1241,1)
(273,238,1)
(426,998,1)
(976,1238,1)
(1080,1015,1)
(844,1088,1)
(5,995,1)
(446,581,1)
(1228,1126,1)
(222,1362,1)
(1101,355,1)
(1192,47,1)
(1059,315,1)
(220,1049,1)
(53,469,1)
(279,1365,1)
(1045,1063,1)
(1079,648,1)
(922,652,1)
(756,516,1)
(425,903,1)
(1095,149,1)
(1386,80,1)
(221,1385,1)
(881,511,1)
(402,298,1)
(94,1369,1)
(240,293,1)
(496,689,1)
(1351,884,1)
(849,779,1)
(831,370,1)
(173,1070,1)
(1230,505,1)
(33,1248,1)
(691,232,1)
(139,941,1)
(1292,648,1)
(1146,1013,1)
(1361,905,1)
(1156,727,1)
(986,1324,1)
(562,852,1)
(1124,1210,1)
(1039,915,1)
(773,1119,1)
(311,39,1)
(324,342,1)
(335,1281,1)
(678,335,1)
(1261,1016,1)
(1244,947,1)
(75,425,1)
(883,888,1)
(614,994,1)
(1152,811,1)
(712,1210,1)
(293,1255,1)
(212,92,1)
(284,1099,1)
(1031,118,1)
(1011,138,1)
(1319,401,1)
(379,142,1)
(1,1260,1)
(287,294,1)
(1198,1238,1)
(434,648,1)
(653,775,1)
(1062,1235,1)
(32,678,1)
(1370,408,1)
(1150,312,1)
(871,1229,1)
(1237,1154,1)
(1350,283,1)
(639,869,1)
(1304,608,1)
(875,648,1)
(424,420,1)
(171,445,1)
(1097,648,1)
(1263,619,1)
(1381,1210,1)
(1012,539,1)
(103,559,1)
(478,472,1)
(597,92,1)
(995,845,1)
(1104,1306,1)
(1099,1167,1)
(778,1383,1)
(1185,1089,1)
(770,412,1)
(1242,87,1)
(312,1387,1)
(43,724,1)
(1102,565,1)
(214,648,1)
(1396,1240,1)
(1317,1025,1)
(102,910,1)
(1107,1210,1)
(1261,1285,1)
(489,648,1)
(975,1084,1)
(820,988,1)
(642,1141,1)
(21,1195,1)
(147,909,1)
(35,648,1)
(226,979,1)
(1386,1137,1)
(1341,1208,1)
(1252,608,1)
(524,380,1)
(222,404,1)
(791,438,1)
(533,260,1)
(1388,1234,1)
(62,684,1)
(1393,1277,1)
(1254,1177,1)
(607,1007,1)
(1304,45,1)
(122,648,1)
(1391,928,1)
(500,648,1)
(286,577,1)
(684,860,1)
(695,125,1)
(1270,929,1)
(1073,820,1)
(737,226,1)
(646,1329,1)
(805,1210,1)
(331,555,1)
(473,52,1)
(464,523,1)
(809,518,1)
(728,1201,1)
(401,955,1)
(980,8,1)
(578,859,1)
(826,1210,1)
(783,1109,1)
(228,1105,1)
(577,1273,1)
(384,989,1)
(641,783,1)
(1088,258,1)
(514,526,1)
(439,827,1)
(1379,62,1)
(84,857,1)
(1302,681,1)
(525,648,1)
(892,648,1)
(354,339,1)
(1252,562,1)
(989,427,1)
(977,553,1)
(614,1210,1)
(598,1148,1)
(1105,808,1)
(197,773,1)
(761,608,1)
(649,1210,1)
(1312,944,1)
(26,308,1)
(1212,1210,1)
(794,1038,1)
(1034,512,1)
(1144,624,1)
(182,886,1)
(67,957,1)
(1052,618,1)
(1007,175,1)
(291,1009,1)
(707,1121,1)
(209,836,1)
(837,1305,1)
(1145,560,1)
(857,833,1)
(514,648,1)
(906,1342,1)
(244,674,1)
(1182,648,1)
(1278,414,1)
(998,404,1)
(1116,246,1)
(273,1210,1)
(1326,649,1)
(285,608,1)
(700,755,1)
(1345,1210,1)
(522,348,1)
(808,850,1)
(1160,170,1)
(649,554,1)
(507,86,1)
(1065,983,1)
(1088,648,1)
(885,942,1)
(1140,838,1)
(123,1210,1)
(835,407,1)
(180,893,1)
(902,872,1)
(343,809,1)
(910,648,1)
(791,817,1)
(133,792,1)
(621,1337,1)
(375,1076,1)
(385,111,1)
(208,1108,1)
(571,1158,1)
(806,1210,1)
(1292,216,1)
(138,824,1)
(1283,1281,1)
(1096,740,1)
(518,608,1)
(1044,666,1)
(265,100,1)
(630,375,1)
(198,122,1)
(1225,13,1)
(543,982,1)
(369,139,1)
(619,754,1)
(1242,316,1)
(45,908,1)
(668,956,1)
(158,648,1)
(582,1210,1)
(232,502,1)
(1247,949,1)
(1168,924,1)
(237,6,1)
(558,1210,1)
(908,314,1)
(590,648,1)
(1386,104,1)
(296,972,1)
(988,201,1)
(76,648,1)
(1135,273,1)
(1205,244,1)
(888,1360,1)
(1229,641,1)
(1265,721,1)
(814,536,1)
(1298,1011,1)
(1264,1006,1)
(1152,1210,1)
(305,1291,1)
(579,478,1)
(425,1297,1)
(349,57,1)
(64,486,1)
(644,1200,1)
(667,629,1)
(914,1093,1)
(967,946,1)
(590,943,1)
(872,566,1)
(866,960,1)
(850,608,1)
(315,1186,1)
(1158,202,1)
(672,1019,1)
(599,918,1)
(1394,795,1)
(1093,450,1)
(370,286,1)
(893,490,1)
(324,1210,1)
(1055,921,1)
(1094,793,1)
(917,257,1)
(275,1037,1)
(1040,648,1)
(1187,907,1)
(1081,810,1)
(1063,431,1)
(920,1350,1)
(730,1226,1)
(739,661,1)
(840,861,1)
(1266,143,1)
(964,757,1)
(345,686,1)
(100,106,1)
(640,1290,1)
(560,394,1)
(1209,900,1)
(380,1210,1)
(1188,1327,1)
(1124,857,1)
(160,648,1)
(257,1090,1)
(909,404,1)
(1335,1135,1)
(651,117,1)
(431,184,1)
(1033,167,1)
(815,961,1)
(934,918,1)
(1354,818,1)
(1323,384,1)
(450,103,1)
(801,539,1)
(50,1092,1)
(82,1062,1)
(1155,1210,1)
(694,110,1)
(137,1394,1)
(1057,965,1)
(733,280,1)
(472,1146,1)
(909,1214,1)
(889,708,1)
(230,677,1)
(1168,19,1)
(261,803,1)
(1267,404,1)
(633,331,1)
(331,648,1)
(1075,1210,1)
(404,277,1)
(713,534,1)
(345,240,1)
(369,1365,1)
(772,266,1)
(794,903,1)
(1069,845,1)
(486,840,1)
(51,15,1)
(951,981,1)
(403,648,1)
(1286,291,1)
(61,236,1)
(337,1228,1)
(1136,1158,1)
(858,69,1)
(812,1168,1)
(1188,474,1)
(83,278,1)
(513,430,1)
(152,291,1)
(1243,220,1)
(449,846,1)
(516,614,1)
(1245,636,1)
(453,648,1)
(502,413,1)
(1235,748,1)
(44,955,1)
(566,648,1)
(1354,1344,1)
(994,669,1)
(1221,1114,1)
(1043,305,1)
(792,648,1)
(803,844,1)
(337,586,1)
(930,1210,1)
(1128,1393,1)
(1309,234,1)
(550,1342,1)
(1084,4,1)
(975,1210,1)
(388,1082,1)
(511,1199,1)
(427,610,1)
(1120,494,1)
(295,1270,1)
(721,654,1)
(734,117,1)
(531,813,1)
(399,290,1)
(291,31,1)
(90,166,1)
(344,117,1)
(827,311,1)
(712,796,1)
(412,138,1)
(489,49,1)
(355,1210,1)
(266,1258,1)
(1252,69,1)
(516,683,1)
(655,1181,1)
(585,1096,1)
(337,454,1)
(186,276,1)
(982,607,1)
(184,84,1)
(880,629,1)
(316,800,1)
(1313,42,1)
(18,1160,1)
(487,1085,1)
(668,937,1)
(6,991,1)
(300,632,1)
(1325,1335,1)
(368,1080,1)
(130,1322,1)
(494,386,1)
(686,864,1)
(1177,105,1)
(922,404,1)
(757,515,1)
(532,980,1)
(1255,922,1)
(425,404,1)
(206,725,1)
(874,648,1)
(1012,778,1)
(824,662,1)
(1284,457,1)
(1272,914,1)
(77,1086,1)
(720,435,1)
(928,1349,1)
(1166,96,1)
(910,1348,1)
(1062,354,1)
(901,182,1)
(1107,857,1)
(1384,532,1)
(779,1213,1)
(22,561,1)
(948,1352,1)
(55,249,1)
(488,533,1)
(450,648,1)
(1114,578,1)
(386,1210,1)
(924,1268,1)
(838,592,1)
(260,69,1)
(746,58,1)
(893,1244,1)
(245,681,1)
(730,902,1)
(482,648,1)
(1151,970,1)
(257,845,1)
(126,172,1)
(1360,135,1)
(529,845,1)
(274,153,1)
(937,956,1)
(523,1003,1)
(1329,608,1)
(897,746,1)
(156,599,1)
(1259,1189,1)
(185,648,1)
(815,160,1)
(683,608,1)
(1271,1050,1)
(1240,839,1)
(20,1081,1)
(732,557,1)
(493,924,1)
(653,131,1)
(588,1039,1)
(495,1299,1)
(4,279,1)
(453,993,1)
(50,14,1)
(678,189,1)
(1262,1095,1)
(1168,1210,1)
(69,841,1)
(1026,693,1)
(1281,648,1)
(1130,399,1)
(624,22,1)
(394,1031,1)
(684,752,1)
(1162,235,1)
(826,61,1)
(978,1040,1)
(1025,1210,1)
(709,389,1)
(367,896,1)
(255,556,1)
(525,616,1)
(1100,1308,1)
(1237,1073,1)
(438,153,1)
(1083,648,1)
(993,1243,1)
(116,1293,1)
(1293,1211,1)
(983,648,1)
(1151,192,1)
(1386,1304,1)
(260,1038,1)
(625,269,1)
(1346,964,1)
(161,296,1)
(175,799,1)
(1211,285,1)
(1170,1104,1)
(921,898,1)
(157,1047,1)
(811,648,1)
(56,720,1)
(1350,784,1)
(409,719,1)
(85,1116,1)
(536,1320,1)
(890,437,1)
(969,1278,1)
(953,392,1)
(1386,351,1)
(484,500,1)
(827,1210,1)
(433,400,1)
(687,744,1)
(775,1272,1)
(461,1008,1)
(893,1041,1)
(600,692,1)
(768,1283,1)
(332,487,1)
(912,737,1)
(607,1210,1)
(868,1145,1)
(781,665,1)
(1312,941,1)
(770,138,1)
(399,179,1)
(110,401,1)
(474,264,1)
(1256,112,1)
(893,222,1)
(153,648,1)
(1066,1260,1)
(183,676,1)
(948,158,1)
(197,1210,1)
(1082,1210,1)
(57,639,1)
(1330,606,1)
(255,648,1)
(940,1162,1)
(850,174,1)
(185,1254,1)
(612,821,1)
(1097,1220,1)
(378,1192,1)
(797,1081,1)
(465,227,1)
(512,648,1)
(477,53,1)
(932,1014,1)
(91,913,1)
(618,1102,1)
(395,1178,1)
(724,189,1)
(771,332,1)
(1189,94,1)
(1151,286,1)
(507,421,1)
(1294,734,1)
(611,927,1)
(421,1210,1)
(528,936,1)
(12,605,1)
(1017,384,1)
(132,82,1)
(1252,1073,1)
(1078,807,1)
(1223,108,1)
(279,1182,1)
(836,630,1)
(1263,608,1)
(1022,698,1)
(282,1018,1)
(270,1292,1)
(31,881,1)
(491,648,1)
(58,1210,1)
(1377,1210,1)
(656,109,1)
(99,762,1)
(48,1210,1)
(41,648,1)
(52,676,1)
(70,1263,1)
(1363,788,1)
(33,648,1)
(470,608,1)
(66,50,1)
(1116,648,1)
(28,865,1)
(1018,637,1)
(59,539,1)
(776,615,1)
(1194,1368,1)
(382,1333,1)
(595,134,1)
(567,648,1)
(808,806,1)
(58,1187,1)
(352,648,1)
(886,1069,1)
(1008,1109,1)
(817,438,1)
(49,871,1)
(437,1068,1)
(797,789,1)
(260,397,1)
(1207,514,1)
(979,935,1)
(904,1210,1)
(1126,1264,1)
(1132,1210,1)
(556,1125,1)
(249,1364,1)
(661,750,1)
(354,574,1)
(406,169,1)
(844,1210,1)
(238,57,1)
(1307,1144,1)
(312,608,1)
(1325,57,1)
(414,1136,1)
(1324,1063,1)
(965,230,1)
(526,195,1)
(759,1210,1)
(178,154,1)
(600,1210,1)
(118,537,1)
(318,189,1)
(946,625,1)
(676,1092,1)
(563,667,1)
(1077,1184,1)
(1023,986,1)
(167,608,1)
(401,44,1)
(1389,1012,1)
(196,1210,1)
(911,1073,1)
(314,1225,1)
(344,671,1)
(92,101,1)
(956,648,1)
(149,879,1)
(634,933,1)
(1162,936,1)
(801,941,1)
(1085,569,1)
(543,761,1)
(1091,736,1)
(569,1140,1)
(799,28,1)
(930,926,1)
(519,1129,1)
(701,1142,1)
(1300,690,1)
(515,962,1)
(280,1257,1)
(896,151,1)
(425,845,1)
(246,985,1)
(1208,356,1)
(337,1389,1)
(455,1095,1)
(1364,1079,1)
(1393,368,1)
(1109,1246,1)
(2,620,1)
(443,263,1)
(150,1179,1)
(196,958,1)
(729,221,1)
(515,648,1)
(48,157,1)
(347,1260,1)
(71,1242,1)
(273,791,1)
(1047,915,1)
(98,849,1)
(9,845,1)
(1303,694,1)
(70,1307,1)
(714,1179,1)
(1159,455,1)
(282,637,1)
(646,1011,1)
(1242,167,1)
(221,1094,1)
(25,279,1)
(75,136,1)
(580,1175,1)
(1014,739,1)
(163,945,1)
(745,0,1)
(1395,1202,1)
(224,911,1)
(1167,433,1)
(904,1238,1)
(513,1205,1)
(592,612,1)
(900,267,1)
(1202,443,1)
(724,768,1)
(1194,742,1)
(162,544,1)
(1176,152,1)
(955,378,1)
(1295,1191,1)
(141,188,1)
(812,980,1)
(966,851,1)
(438,274,1)
(121,481,1)
(884,1210,1)
(81,1129,1)
(481,811,1)
(872,403,1)
(585,500,1)
(717,376,1)
(678,1210,1)
(408,1124,1)
(202,1120,1)
(108,731,1)
(960,324,1)
(745,1210,1)
(432,1210,1)
(288,114,1)
(1122,646,1)
(1312,1210,1)
(805,892,1)
(847,1319,1)
(833,239,1)
(919,303,1)
(223,648,1)
(659,1210,1)
(561,1343,1)
(761,374,1)
(1279,648,1)
(1368,826,1)
(395,202,1)
(1145,78,1)
(851,436,1)
(339,648,1)
(549,856,1)
(924,648,1)
(665,1282,1)
(567,580,1)
(1189,1210,1)
(1395,648,1)
(689,207,1)
(860,776,1)
(610,1210,1)
(411,213,1)
(939,1091,1)
(198,499,1)
(1161,497,1)
(308,617,1)
(564,1260,1)
(1124,642,1)
(550,906,1)
(1011,464,1)
(348,648,1)
(1226,1218,1)
(708,648,1)
(1057,608,1)
(1002,357,1)
(872,1210,1)
(1113,845,1)
(759,465,1)
(1327,474,1)
(1119,542,1)
(972,608,1)
(1027,1233,1)
(645,1107,1)
(767,780,1)
(1118,1172,1)
(1329,449,1)
(128,257,1)
(1227,100,1)
(377,1262,1)
(151,315,1)
(317,1292,1)
(749,711,1)
(892,477,1)
(436,1210,1)
(849,1213,1)
(483,1100,1)
(801,1210,1)
(1180,855,1)
(339,459,1)
(1231,542,1)
(912,648,1)
(547,70,1)
(905,509,1)
(228,608,1)
(1338,189,1)
(114,422,1)
(479,882,1)
(1237,278,1)
(164,845,1)
(313,265,1)
(1318,76,1)
(36,799,1)
(1138,1210,1)
(349,785,1)
(1182,127,1)
(1086,987,1)
(903,529,1)
(958,441,1)
(1342,747,1)
(35,814,1)
(1250,1261,1)
(155,1045,1)
(603,799,1)
(400,301,1)
(1222,313,1)
(30,648,1)
(617,202,1)
(570,548,1)
(899,608,1)
(606,762,1)
(47,128,1)
(170,1395,1)
(636,655,1)
(629,845,1)
(547,292,1)
(290,845,1)
(1032,716,1)
(212,975,1)
(1158,868,1)
(258,141,1)
(445,1210,1)
(810,402,1)
(343,518,1)
(673,231,1)
(447,1256,1)
(949,847,1)
(319,1345,1)
(1274,1329,1)
(566,623,1)
(115,1279,1)
(506,608,1)
(967,608,1)
(1069,782,1)
(471,363,1)
(328,384,1)
(1278,1210,1)
(1129,85,1)
(1181,626,1)
(223,1171,1)
(267,1260,1)
(1025,289,1)
(285,697,1)
(983,97,1)
(87,1132,1)
(1290,558,1)
(1305,1210,1)
(460,240,1)
(1238,1188,1)
(40,488,1)
(681,181,1)
(1386,1374,1)
(584,165,1)
(1290,990,1)
(1141,150,1)
(303,1388,1)
(376,601,1)
(697,29,1)
(985,508,1)
(1080,562,1)
(435,1393,1)
(806,1222,1)
(1305,288,1)
(1138,473,1)
(1363,608,1)
(1344,570,1)
(859,1083,1)
(793,1338,1)
(595,148,1)
(1318,1140,1)
(854,714,1)
(529,1303,1)
(879,858,1)
(1070,797,1)
(1099,1210,1)
(1386,467,1)
(154,644,1)
(499,122,1)
(855,55,1)
(22,608,1)
(144,1017,1)
(204,600,1)
(1053,595,1)
(789,1130,1)
(403,406,1)
(586,801,1)
(210,446,1)
(942,889,1)
(852,1159,1)
(1308,1210,1)
(557,1210,1)
(271,1269,1)
(520,938,1)
(380,653,1)
(1307,1092,1)
(725,904,1)
(1373,515,1)
(233,1367,1)
(610,343,1)
(1387,634,1)
(987,951,1)
(201,1004,1)
(1002,1318,1)
(432,491,1)
(277,794,1)
(669,648,1)
(480,448,1)
(166,164,1)
(290,1054,1)
(923,1350,1)
(794,1241,1)
(1038,1247,1)
(469,1,1)
(553,765,1)
(1252,404,1)
(1077,189,1)
(757,1118,1)
(203,1197,1)
(148,1210,1)
(402,845,1)
(1109,1365,1)
(542,1359,1)
(787,503,1)
(1037,976,1)
(227,1388,1)
(111,384,1)
(722,959,1)
(112,314,1)
(679,399,1)
(1306,1113,1)
(690,648,1)
(1252,56,1)
(981,128,1)
(425,1038,1)
(1014,661,1)
(263,738,1)
(996,300,1)
(730,1276,1)
(1090,880,1)
(918,608,1)
(1235,255,1)
(1148,265,1)
(300,57,1)
(457,285,1)
(363,1077,1)
(802,1066,1)
(1145,1396,1)
(730,323,1)
(718,1140,1)
(1322,2,1)
(490,686,1)
(569,525,1)
(1227,848,1)
(1281,540,1)
(1126,1078,1)
(491,541,1)
(488,404,1)
(1356,295,1)
(755,514,1)
(995,563,1)
(1215,812,1)
(1259,1367,1)
(235,684,1)
(394,608,1)
(595,1065,1)
(1081,402,1)
(554,146,1)
(636,648,1)
(1183,394,1)
(925,328,1)
(468,822,1)
(820,695,1)
(970,206,1)
(1157,1210,1)
(962,1315,1)
(336,35,1)
(916,998,1)
(843,1363,1)
(193,567,1)
(1218,382,1)
(1299,696,1)
(969,506,1)
(933,1053,1)
(1197,311,1)
(558,1346,1)
(855,1079,1)
(659,424,1)
(191,377,1)
(1237,608,1)
(904,253,1)
(1003,883,1)
(1269,933,1)
(1396,648,1)
(1347,967,1)
(1178,202,1)
(1171,743,1)
(129,520,1)
(907,690,1)
(423,868,1)
(1009,31,1)
(159,1326,1)
(29,582,1)
(611,648,1)
(991,344,1)
(500,162,1)
(803,816,1)
(508,219,1)
(867,1176,1)
(146,728,1)
(557,1043,1)
(1072,405,1)
(1017,1072,1)
(742,197,1)
(455,12,1)
(572,1223,1)
(763,1034,1)
(865,1157,1)
(629,90,1)
(1143,228,1)
(935,709,1)
(647,524,1)
(596,468,1)
(1036,403,1)
(794,69,1)
(356,656,1)
(86,1284,1)
(387,608,1)
(1095,1336,1)
(1021,319,1)
(436,579,1)
(1367,185,1)
(882,123,1)
(27,350,1)
(1161,1210,1)
(582,1354,1)
(1362,75,1)
(1260,1316,1)
(482,830,1)
(294,74,1)
(1264,489,1)
(218,970,1)
(426,916,1)
(236,542,1)
(656,1210,1)
(292,384,1)
(596,1210,1)
(1179,522,1)
(1096,648,1)
(235,787,1)
(74,86,1)
(816,640,1)
(315,648,1)
(448,590,1)
(101,608,1)
(938,1260,1)
(1290,312,1)
(256,1351,1)
(1302,712,1)
(238,485,1)
(352,700,1)
(436,1146,1)
(390,9,1)
(441,315,1)
(200,690,1)
(195,735,1)
(182,1069,1)
(355,113,1)
(956,373,1)
(230,722,1)
(662,464,1)
(716,266,1)
(537,506,1)
(1131,695,1)
(579,648,1)
(801,3,1)
(425,56,1)
(1381,802,1)
(260,56,1)
(1205,648,1)
(807,1230,1)
(858,903,1)
(897,171,1)
(54,1328,1)
(915,648,1)
(1331,920,1)
(322,344,1)
(238,760,1)
(343,297,1)
(295,1210,1)
(709,781,1)
(765,713,1)
(64,972,1)
(1184,318,1)
(1106,658,1)
(1279,1021,1)
(673,182,1)
(1255,1073,1)
(813,1259,1)
(1193,892,1)
(217,337,1)
(169,163,1)
(474,1271,1)
(1276,1075,1)
(1264,1365,1)
(253,589,1)
(432,636,1)
(1012,1210,1)
(811,1206,1)
(235,1210,1)
(822,1260,1)
(1355,507,1)
(1241,126,1)
(1335,57,1)
(1209,1210,1)
(794,1127,1)
(927,703,1)
(40,260,1)
(96,690,1)
(825,83,1)
(386,325,1)
(47,77,1)
(1371,168,1)
(486,1210,1)
(1040,208,1)
(666,1212,1)
(1227,1239,1)
(727,645,1)
(827,111,1)
(893,75,1)
(616,798,1)
(1011,1147,1)
(283,784,1)
(1016,367,1)
(1255,608,1)
(136,1252,1)
(126,845,1)
(488,562,1)
(945,915,1)
(317,270,1)
(425,1210,1)
(349,262,1)
(638,1140,1)
(42,1198,1)
(1142,1365,1)
(222,562,1)
(216,527,1)
(976,264,1)
(1199,995,1)
(299,214,1)
(1091,608,1)
(144,999,1)
(827,144,1)
(387,10,1)
(1061,1185,1)
(127,701,1)
(1334,1161,1)
(1146,648,1)
(1185,912,1)
(1195,1109,1)
(669,11,1)
(142,349,1)
(1204,1232,1)
(292,33,1)
(1359,1317,1)
(849,223,1)
(301,648,1)
(1170,282,1)
(1147,770,1)
(367,1210,1)
(108,1301,1)
(1261,1180,1)
(188,140,1)
(893,1128,1)
(454,1312,1)
(1207,352,1)
(234,598,1)
(119,1377,1)
(997,1207,1)
(268,1373,1)
(1224,1313,1)
(711,1355,1)
(610,1027,1)
(1129,1116,1)
(554,728,1)
(13,585,1)
(231,903,1)
(638,718,1)
(503,1390,1)
(899,261,1)
(102,264,1)
(1214,426,1)
(168,183,1)
(78,560,1)
(897,321,1)
(1343,608,1)
(389,1370,1)
(884,1227,1)
(398,60,1)
(351,596,1)
(699,608,1)
(1372,1210,1)
(1217,549,1)
(683,132,1)
(120,338,1)
(933,608,1)
(299,590,1)
(467,129,1)
(457,1061,1)
(1111,47,1)
(943,1221,1)
(92,1265,1)
(397,707,1)
(750,20,1)
(1203,137,1)
(1376,708,1)
(531,608,1)
(734,651,1)
(741,831,1)
(542,648,1)
(646,1371,1)
(1126,941,1)
(1006,489,1)
(971,1298,1)
(1012,941,1)
(1273,859,1)
(652,173,1)
(149,845,1)
(1252,845,1)
(543,997,1)
(303,1289,1)
(839,560,1)
(207,843,1)
(1098,1294,1)
(800,365,1)
(1164,850,1)
(1201,30,1)
(702,597,1)
(518,504,1)
(572,780,1)
(1390,1379,1)
(297,518,1)
(698,191,1)
(1063,492,1)
(637,1035,1)
(341,732,1)
(677,608,1)
(1315,621,1)
(998,1073,1)
(76,771,1)
(350,67,1)
(421,756,1)
(754,1307,1)
(716,706,1)
(1022,191,1)
(1151,1210,1)
(1155,611,1)
(1027,453,1)
(506,18,1)
(445,1166,1)
(1131,180,1)
(637,845,1)
(374,897,1)
(1242,1287,1)
(1223,317,1)
(1277,368,1)
(830,1193,1)
(1313,264,1)
(1345,243,1)
(153,733,1)
(787,1390,1)
(718,584,1)
(929,98,1)
(1076,1101,1)
(743,1213,1)
(805,482,1)
(330,724,1)
(1365,1380,1)
(365,27,1)
(589,609,1)
(878,433,1)
(193,1210,1)
(264,834,1)
(922,562,1)
(612,1210,1)
(429,1302,1)
(1065,331,1)
(1194,952,1)
(158,130,1)
(508,1210,1)
(192,411,1)
(681,608,1)
(1167,138,1)
(1037,578,1)
(538,455,1)
(976,299,1)
(651,284,1)
(686,40,1)
(1068,1001,1)
(649,138,1)
(213,978,1)
(550,384,1)
(738,899,1)
(1126,539,1)
(0,200,1)
(361,237,1)
(923,1210,1)
(365,648,1)
(1125,354,1)
(626,1231,1)
(735,603,1)
(621,1210,1)
(894,409,1)
(11,1266,1)
(1258,853,1)
(214,480,1)
(1320,571,1)
(122,854,1)
(3,21,1)
(935,198,1)
(1060,677,1)
(55,648,1)
(936,876,1)
(167,1215,1)
(205,635,1)
(19,648,1)
(856,136,1)
(180,695,1)
(338,761,1)
(383,229,1)
(308,1210,1)
(654,101,1)
(706,1131,1)
(846,1091,1)
(113,66,1)
(431,648,1)
(320,189,1)
(348,155,1)
(643,749,1)
(915,248,1)
(281,456,1)
(807,648,1)
(1282,198,1)
(543,1334,1)
(1242,458,1)
(1051,572,1)
(10,1361,1)
(1109,41,1)
(1212,1106,1)
(104,1381,1)
(492,431,1)
(716,695,1)
(874,1030,1)
(413,759,1)
(796,275,1)
(1178,26,1)
(19,1139,1)
(458,885,1)
(1223,1210,1)
(1252,1210,1)
(848,1309,1)
(719,1300,1)
(1004,716,1)
(623,1036,1)
(1142,369,1)
(1380,59,1)
(534,345,1)
(405,648,1)
(634,193,1)
(554,138,1)
(1358,1037,1)
(1104,1113,1)
(696,996,1)
(164,390,1)
(1093,873,1)
(591,1295,1)
(368,608,1)
(433,117,1)
(425,562,1)
(1234,1097,1)
(699,966,1)
(1220,1384,1)
(1160,899,1)
(129,1210,1)
(848,648,1)
(860,648,1)
(885,1210,1)
(1118,268,1)
(620,757,1)
(1199,5,1)
(990,1210,1)
(442,648,1)
(663,1109,1)
(978,102,1)
(730,699,1)
(1369,569,1)
(861,50,1)
(559,643,1)
(1130,673,1)
(497,36,1)
(788,1032,1)
(893,460,1)
(676,483,1)
(632,668,1)
(540,729,1)
(961,160,1)
(1157,120,1)
(1117,683,1)
(165,1210,1)
(578,1224,1)
(422,940,1)
(682,807,1)
(1080,404,1)
(1375,1155,1)
(882,711,1)
(187,1385,1)
(260,903,1)
(1343,34,1)
(1265,648,1)
(792,835,1)
(273,57,1)
(1218,1210,1)
(1367,105,1)
(711,608,1)
(111,591,1)
(1333,915,1)
(760,1299,1)
(615,346,1)
(919,1210,1)
(728,30,1)
(231,333,1)
(1337,1150,1)
(752,860,1)
(1297,1217,1)
(798,638,1)
(1338,660,1)
(992,1304,2)
(497,799,2)
(292,33,2)
(1109,279,2)
(339,648,2)
(1212,1210,2)
(62,936,2)
(478,677,2)
(930,1260,2)
(506,608,2)
(1094,1077,2)
(1277,291,2)
(1272,711,2)
(645,1063,2)
(793,1077,2)
(1047,915,2)
(346,936,2)
(115,167,2)
(765,1393,2)
(821,1367,2)
(283,918,2)
(636,648,2)
(1027,70,2)
(425,562,2)
(294,86,2)
(1318,569,2)
(455,12,2)
(770,676,2)
(809,518,2)
(851,677,2)
(1171,1213,2)
(709,389,2)
(77,128,2)
(490,686,2)
(398,708,2)
(1380,92,2)
(305,92,2)
(1030,565,2)
(203,292,2)
(335,1281,2)
(1044,711,2)
(166,164,2)
(542,648,2)
(249,315,2)
(1252,1393,2)
(170,1395,2)
(649,138,2)
(1104,282,2)
(1153,279,2)
(918,608,2)
(1309,265,2)
(132,86,2)
(204,1260,2)
(324,1091,2)
(1155,611,2)
(485,349,2)
(66,50,2)
(387,608,2)
(434,648,2)
(300,668,2)
(1224,681,2)
(136,455,2)
(1012,1109,2)
(651,344,2)
(784,648,2)
(1167,138,2)
(842,708,2)
(135,676,2)
(220,70,2)
(127,279,2)
(722,677,2)
(1170,282,2)
(539,92,2)
(1043,648,2)
(1111,47,2)
(301,648,2)
(129,1210,2)
(387,1073,2)
(1107,1210,2)
(1281,648,2)
(904,1037,2)
(998,404,2)
(386,506,2)
(1040,1037,2)
(757,515,2)
(349,57,2)
(765,426,2)
(387,716,2)
(1226,915,2)
(1170,1104,2)
(1278,1210,2)
(395,1158,2)
(991,344,2)
(564,1260,2)
(835,1129,2)
(295,850,2)
(369,279,2)
(500,648,2)
(179,1014,2)
(40,1073,2)
(1084,92,2)
(757,312,2)
(884,265,2)
(266,1258,2)
(656,681,2)
(528,936,2)
(1036,915,2)
(97,1129,2)
(976,264,2)
(185,648,2)
(1137,1260,2)
(1394,797,2)
(486,50,2)
(739,1081,2)
(1213,850,2)
(1107,857,2)
(923,918,2)
(1077,1091,2)
(661,1081,2)
(1130,399,2)
(998,1073,2)
(1214,426,2)
(377,1095,2)
(800,365,2)
(1107,1063,2)
(1096,1057,2)
(601,413,2)
(712,1210,2)
(977,455,2)
(683,86,2)
(1283,1077,2)
(709,1210,2)
(676,1092,2)
(1015,291,2)
(100,850,2)
(1252,426,2)
(427,70,2)
(19,648,2)
(464,676,2)
(380,1210,2)
(980,608,2)
(438,153,2)
(550,1342,2)
(70,1307,2)
(928,780,2)
(635,1011,2)
(83,455,2)
(1193,1260,2)
(300,349,2)
(1235,748,2)
(1220,980,2)
(237,344,2)
(42,859,2)
(611,690,2)
(349,50,2)
(1336,629,2)
(1246,279,2)
(75,686,2)
(1152,875,2)
(567,648,2)
(279,1365,2)
(1145,560,2)
(1265,648,2)
(567,933,2)
(792,1129,2)
(798,569,2)
(296,972,2)
(370,681,2)
(933,608,2)
(43,1077,2)
(461,1109,2)
(700,799,2)
(92,1265,2)
(94,1367,2)
(1297,136,2)
(805,1210,2)
(21,1109,2)
(1152,708,2)
(629,845,2)
(1271,1037,2)
(678,189,2)
(33,292,2)
(329,1129,2)
(953,608,2)
(162,1057,2)
(606,762,2)
(884,1210,2)
(668,349,2)
(240,1255,2)
(216,780,2)
(641,1109,2)
(990,1210,2)
(344,344,2)
(403,915,2)
(785,349,2)
(432,636,2)
(169,915,2)
(400,344,2)
(286,681,2)
(1142,92,2)
(295,1210,2)
(699,677,2)
(104,1260,2)
(880,629,2)
(1307,1092,2)
(919,413,2)
(632,349,2)
(962,312,2)
(673,182,2)
(1118,312,2)
(10,716,2)
(811,648,2)
(198,285,2)
(949,401,2)
(660,1077,2)
(424,1304,2)
(155,285,2)
(139,279,2)
(712,681,2)
(291,31,2)
(1282,198,2)
(236,542,2)
(1126,1210,2)
(328,70,2)
(1381,1210,2)
(515,648,2)
(91,850,2)
(1168,1210,2)
(1234,1097,2)
(1377,972,2)
(1252,240,2)
(180,716,2)
(1372,442,2)
(238,349,2)
(149,845,2)
(1168,19,2)
(912,648,2)
(678,221,2)
(1082,1011,2)
(380,653,2)
(425,845,2)
(338,761,2)
(410,608,2)
(800,762,2)
(679,399,2)
(898,315,2)
(1152,811,2)
(119,972,2)
(1231,542,2)
(412,1011,2)
(923,1350,2)
(31,845,2)
(434,690,2)
(578,1037,2)
(264,681,2)
(1326,1011,2)
(643,711,2)
(1299,349,2)
(268,312,2)
(1157,1210,2)
(102,1238,2)
(1364,315,2)
(861,50,2)
(1126,539,2)
(713,1393,2)
(1325,349,2)
(1018,291,2)
(616,569,2)
(77,987,2)
(523,1003,2)
(914,711,2)
(860,648,2)
(596,1260,2)
(586,1109,2)
(1240,560,2)
(1205,285,2)
(1045,285,2)
(113,50,2)
(1078,1365,2)
(1195,1109,2)
(422,608,2)
(555,1129,2)
(142,349,2)
(825,455,2)
(554,1011,2)
(489,648,2)
(231,903,2)
(1132,708,2)
(789,1014,2)
(369,1365,2)
(1223,1210,2)
(684,936,2)
(260,1199,2)
(1093,711,2)
(1357,506,2)
(801,1109,2)
(1312,1210,2)
(352,799,2)
(1276,915,2)
(133,1129,2)
(75,455,2)
(731,780,2)
(209,50,2)
(240,797,2)
(1158,506,2)
(282,291,2)
(1252,56,2)
(1062,1210,2)
(414,506,2)
(150,1179,2)
(995,629,2)
(1343,1210,2)
(1260,648,2)
(955,47,2)
(872,1210,2)
(1183,506,2)
(807,648,2)
(795,797,2)
(488,1199,2)
(670,797,2)
(1126,1109,2)
(794,797,2)
(929,850,2)
(1,1260,2)
(791,349,2)
(905,716,2)
(233,1367,2)
(513,430,2)
(469,1260,2)
(904,1238,2)
(191,845,2)
(998,608,2)
(157,915,2)
(433,117,2)
(647,711,2)
(6,344,2)
(944,1109,2)
(1278,506,2)
(421,86,2)
(637,291,2)
(1108,1037,2)
(569,569,2)
(740,1057,2)
(1316,1304,2)
(354,574,2)
(1237,278,2)
(810,455,2)
(1287,708,2)
(563,629,2)
(293,797,2)
(317,1292,2)
(333,182,2)
(977,1393,2)
(579,648,2)
(1224,1037,2)
(964,757,2)
(144,1017,2)
(782,399,2)
(684,860,2)
(159,1011,2)
(1323,292,2)
(1237,1073,2)
(633,1129,2)
(686,1199,2)
(674,285,2)
(1318,76,2)
(1207,1210,2)
(896,315,2)
(1011,464,2)
(1244,291,2)
(311,550,2)
(413,980,2)
(380,1093,2)
(133,792,2)
(752,936,2)
(653,131,2)
(404,277,2)
(402,455,2)
(1158,202,2)
(756,86,2)
(345,1393,2)
(405,648,2)
(569,525,2)
(235,787,2)
(848,265,2)
(509,716,2)
(976,1238,2)
(474,1037,2)
(186,677,2)
(671,1011,2)
(738,899,2)
(1055,315,2)
(617,1158,2)
(600,1260,2)
(553,240,2)
(401,47,2)
(1017,384,2)
(1232,282,2)
(994,669,2)
(60,708,2)
(672,265,2)
(165,1002,2)
(781,198,2)
(167,608,2)
(464,523,2)
(1338,189,2)
(1132,1210,2)
(1317,228,2)
(432,542,2)
(849,1213,2)
(702,92,2)
(152,291,2)
(484,1057,2)
(343,518,2)
(694,401,2)
(316,1210,2)
(578,681,2)
(394,506,2)
(892,648,2)
(994,444,2)
(265,98,2)
(1363,608,2)
(201,716,2)
(465,980,2)
(1248,70,2)
(292,292,2)
(292,384,2)
(193,933,2)
(814,1158,2)
(12,1022,2)
(108,1301,2)
(1145,506,2)
(1073,820,2)
(747,292,2)
(223,1213,2)
(499,285,2)
(1079,648,2)
(299,578,2)
(1150,312,2)
(836,50,2)
(1339,1011,2)
(760,1299,2)
(1350,784,2)
(144,999,2)
(590,578,2)
(1159,455,2)
(257,845,2)
(41,279,2)
(1299,648,2)
(844,1210,2)
(912,285,2)
(1255,922,2)
(127,92,2)
(495,349,2)
(1152,1210,2)
(875,648,2)
(557,1210,2)
(607,799,2)
(581,918,2)
(267,1260,2)
(989,70,2)
(1209,1210,2)
(1202,899,2)
(1375,690,2)
(389,1179,2)
(1027,453,2)
(433,344,2)
(1004,716,2)
(797,789,2)
(122,648,2)
(947,291,2)
(446,918,2)
(785,50,2)
(1318,1140,2)
(526,799,2)
(288,422,2)
(404,797,2)
(1167,344,2)
(2,757,2)
(678,1210,2)
(1038,401,2)
(442,648,2)
(458,708,2)
(720,1393,2)
(314,608,2)
(235,1210,2)
(1002,357,2)
(701,92,2)
(977,686,2)
(55,315,2)
(1212,565,2)
(590,648,2)
(926,1260,2)
(532,980,2)
(1178,1158,2)
(945,915,2)
(489,1109,2)
(1348,1037,2)
(867,291,2)
(970,1037,2)
(1393,368,2)
(299,214,2)
(1077,189,2)
(1238,1188,2)
(1106,565,2)
(1391,780,2)
(923,1210,2)
(900,1260,2)
(859,1083,2)
(403,648,2)
(82,86,2)
(500,1057,2)
(273,300,2)
(163,915,2)
(344,671,2)
(187,1077,2)
(1252,404,2)
(222,75,2)
(182,1069,2)
(1011,676,2)
(743,1213,2)
(74,86,2)
(213,1037,2)
(559,711,2)
(1247,401,2)
(1396,648,2)
(231,1038,2)
(1295,292,2)
(65,850,2)
(938,1260,2)
(1003,648,2)
(250,699,2)
(868,506,2)
(1370,1179,2)
(1360,676,2)
(1022,191,2)
(1177,105,2)
(830,1260,2)
(9,716,2)
(40,260,2)
(1091,608,2)
(1157,761,2)
(708,648,2)
(614,1210,2)
(136,240,2)
(31,1199,2)
(612,1210,2)
(1263,1307,2)
(1342,648,2)
(227,980,2)
(210,918,2)
(188,816,2)
(1263,608,2)
(493,413,2)
(1313,681,2)
(874,565,2)
(1185,285,2)
(1362,75,2)
(701,279,2)
(1305,422,2)
(1345,167,2)
(285,608,2)
(936,608,2)
(1080,562,2)
(247,1129,2)
(111,292,2)
(1325,50,2)
(255,86,2)
(1086,128,2)
(1062,354,2)
(1158,868,2)
(765,686,2)
(538,455,2)
(549,136,2)
(875,708,2)
(123,711,2)
(1294,344,2)
(787,1390,2)
(117,1011,2)
(426,797,2)
(81,1129,2)
(673,231,2)
(96,690,2)
(913,850,2)
(1252,845,2)
(733,349,2)
(1357,1158,2)
(98,849,2)
(454,1109,2)
(805,482,2)
(550,292,2)
(722,1210,2)
(553,455,2)
(243,167,2)
(529,401,2)
(1303,401,2)
(368,291,2)
(221,1094,2)
(1097,980,2)
(588,915,2)
(910,1037,2)
(336,1158,2)
(1184,1091,2)
(924,648,2)
(299,590,2)
(229,797,2)
(514,648,2)
(518,70,2)
(661,845,2)
(165,1210,2)
(148,133,2)
(1009,1199,2)
(200,690,2)
(102,264,2)
(1106,874,2)
(136,686,2)
(189,1091,2)
(1179,285,2)
(271,933,2)
(981,128,2)
(1308,1329,2)
(1298,1011,2)
(729,1077,2)
(742,542,2)
(1043,92,2)
(320,189,2)
(1292,780,2)
(1127,797,2)
(562,455,2)
(1077,1077,2)
(1093,873,2)
(1201,1011,2)
(799,648,2)
(975,1210,2)
(744,1129,2)
(368,608,2)
(713,455,2)
(151,315,2)
(1350,918,2)
(260,69,2)
(869,50,2)
(745,1210,2)
(1301,648,2)
(1361,716,2)
(709,198,2)
(582,1210,2)
(534,1393,2)
(628,314,2)
(1109,1365,2)
(282,637,2)
(888,676,2)
(678,1077,2)
(30,1011,2)
(881,1199,2)
(1385,1077,2)
(827,1210,2)
(909,426,2)
(40,608,2)
(775,711,2)
(1206,708,2)
(834,648,2)
(886,399,2)
(1235,255,2)
(854,285,2)
(1390,936,2)
(351,1260,2)
(456,1077,2)
(219,134,2)
(137,797,2)
(303,1388,2)
(554,138,2)
(105,608,2)
(1124,1156,2)
(1223,780,2)
(345,686,2)
(184,285,2)
(492,285,2)
(34,207,2)
(114,422,2)
(140,816,2)
(1331,918,2)
(703,690,2)
(879,629,2)
(663,1109,2)
(354,86,2)
(467,1260,2)
(262,209,2)
(153,349,2)
(402,845,2)
(1098,344,2)
(437,1210,2)
(750,1081,2)
(1161,1210,2)
(1017,405,2)
(482,648,2)
(436,1210,2)
(1104,1113,2)
(223,648,2)
(1057,608,2)
(1381,1260,2)
(93,1011,2)
(1328,1057,2)
(960,1091,2)
(308,1158,2)
(724,1077,2)
(698,1095,2)
(1156,1063,2)
(713,240,2)
(1126,941,2)
(1062,86,2)
(1146,648,2)
(453,70,2)
(303,413,2)
(591,292,2)
(906,292,2)
(783,1109,2)
(1102,565,2)
(885,708,2)
(503,936,2)
(1187,690,2)
(1113,282,2)
(447,314,2)
(990,757,2)
(106,850,2)
(1291,92,2)
(602,1077,2)
(1155,1210,2)
(70,1263,2)
(794,69,2)
(1327,1037,2)
(1041,164,2)
(361,344,2)
(907,690,2)
(279,279,2)
(277,797,2)
(1189,1210,2)
(1329,608,2)
(1377,1210,2)
(1341,681,2)
(642,1179,2)
(860,936,2)
(585,500,2)
(61,542,2)
(238,760,2)
(615,936,2)
(516,86,2)
(280,349,2)
(1211,285,2)
(519,1129,2)
(977,426,2)
(196,1210,2)
(235,684,2)
(323,915,2)
(425,69,2)
(848,648,2)
(1343,1092,2)
(1139,413,2)
(1022,1095,2)
(146,1011,2)
(222,404,2)
(160,918,2)
(629,164,2)
(1168,924,2)
(265,100,2)
(577,681,2)
(892,1260,2)
(1101,50,2)
(872,403,2)
(1252,1038,2)
(560,394,2)
(1185,1089,2)
(246,134,2)
(554,728,2)
(755,799,2)
(1324,1063,2)
(1035,291,2)
(1003,676,2)
(1114,578,2)
(948,757,2)
(1038,1247,2)
(1347,967,2)
(193,1210,2)
(1181,542,2)
(1013,677,2)
(1345,1210,2)
(614,683,2)
(1011,1011,2)
(154,455,2)
(311,39,2)
(1197,292,2)
(345,455,2)
(195,799,2)
(621,312,2)
(311,292,2)
(1098,1011,2)
(158,648,2)
(301,344,2)
(515,312,2)
(990,948,2)
(1019,850,2)
(35,648,2)
(956,349,2)
(1343,207,2)
(1017,292,2)
(1312,941,2)
(923,815,2)
(42,1037,2)
(318,1091,2)
(1023,1063,2)
(827,292,2)
(102,910,2)
(1061,1185,2)
(1267,797,2)
(1099,344,2)
(841,47,2)
(978,1040,2)
(976,578,2)
(1028,1329,2)
(566,648,2)
(1158,1158,2)
(557,92,2)
(1312,1109,2)
(1065,1129,2)
(922,404,2)
(797,1081,2)
(85,134,2)
(1109,41,2)
(930,1210,2)
(1019,265,2)
(1217,136,2)
(238,57,2)
(92,101,2)
(474,1238,2)
(1279,648,2)
(801,1210,2)
(330,1077,2)
(126,845,2)
(1385,648,2)
(1222,850,2)
(284,344,2)
(883,676,2)
(222,562,2)
(794,1038,2)
(610,1210,2)
(589,1037,2)
(773,542,2)
(120,761,2)
(411,1037,2)
(164,716,2)
(141,816,2)
(578,859,2)
(1063,431,2)
(1133,291,2)
(281,1077,2)
(623,915,2)
(1179,348,2)
(491,648,2)
(244,285,2)
(505,1109,2)
(1151,970,2)
(849,850,2)
(148,1129,2)
(612,1367,2)
(1167,433,2)
(1138,676,2)
(407,1129,2)
(1125,86,2)
(1252,608,2)
(865,761,2)
(525,1367,2)
(58,690,2)
(1080,291,2)
(687,1129,2)
(592,1367,2)
(585,1057,2)
(1304,608,2)
(78,560,2)
(1151,1210,2)
(275,681,2)
(1168,413,2)
(328,292,2)
(534,455,2)
(1135,349,2)
(270,780,2)
(1388,1234,2)
(724,189,2)
(525,569,2)
(1248,292,2)
(1026,953,2)
(375,50,2)
(59,92,2)
(331,1129,2)
(1393,291,2)
(948,158,2)
(1039,915,2)
(757,1118,2)
(1151,286,2)
(1235,86,2)
(1205,648,2)
(55,648,2)
(149,629,2)
(1349,780,2)
(988,716,2)
(941,279,2)
(1389,1109,2)
(542,228,2)
(889,708,2)
(508,134,2)
(1335,57,2)
(1070,797,2)
(1021,167,2)
(1052,565,2)
(826,542,2)
(80,1260,2)
(610,343,2)
(442,314,2)
(253,1037,2)
(1154,455,2)
(425,903,2)
(1033,167,2)
(1207,799,2)
(1175,933,2)
(686,40,2)
(1088,648,2)
(1124,857,2)
(827,111,2)
(822,1260,2)
(33,648,2)
(437,470,2)
(136,426,2)
(342,1091,2)
(1147,676,2)
(399,290,2)
(1099,1167,2)
(308,617,2)
(486,1210,2)
(850,608,2)
(47,128,2)
(985,134,2)
(58,1210,2)
(279,1182,2)
(435,1393,2)
(520,1260,2)
(827,144,2)
(922,562,2)
(1372,1210,2)
(436,677,2)
(585,1210,2)
(1069,845,2)
(431,648,2)
(603,799,2)
(579,677,2)
(780,608,2)
(40,1199,2)
(534,686,2)
(1049,70,2)
(759,980,2)
(522,285,2)
(1311,134,2)
(158,757,2)
(1333,915,2)
(1012,539,2)
(168,676,2)
(1126,1264,2)
(1118,1172,2)
(1265,101,2)
(820,695,2)
(276,677,2)
(412,138,2)
(368,1073,2)
(1262,1095,2)
(1192,47,2)
(383,797,2)
(1218,915,2)
(1189,1367,2)
(721,101,2)
(1379,936,2)
(1014,1081,2)
(290,1014,2)
(1368,542,2)
(56,1393,2)
(553,686,2)
(971,1011,2)
(101,608,2)
(122,285,2)
(1068,470,2)
(471,1077,2)
(343,70,2)
(265,850,2)
(745,690,2)
(1338,1077,2)
(32,1077,2)
(1128,1393,2)
(439,292,2)
(1059,315,2)
(919,303,2)
(121,708,2)
(473,676,2)
(378,47,2)
(943,578,2)
(408,1179,2)
(815,160,2)
(209,836,2)
(1016,315,2)
(273,1210,2)
(363,1077,2)
(847,401,2)
(1065,1210,2)
(536,1158,2)
(1100,1329,2)
(939,1091,2)
(1130,673,2)
(558,1210,2)
(349,262,2)
(667,629,2)
(894,690,2)
(1351,265,2)
(1252,455,2)
(1252,562,2)
(234,265,2)
(996,349,2)
(1095,629,2)
(373,349,2)
(425,1038,2)
(1072,292,2)
(1096,648,2)
(1002,569,2)
(725,1037,2)
(902,915,2)
(872,915,2)
(325,506,2)
(1213,410,2)
(191,1095,2)
(558,757,2)
(817,349,2)
(1131,716,2)
(3,1109,2)
(138,676,2)
(909,404,2)
(257,629,2)
(584,569,2)
(1243,70,2)
(1124,1179,2)
(423,506,2)
(669,683,2)
(468,1260,2)
(67,762,2)
(682,1109,2)
(436,579,2)
(164,845,2)
(441,315,2)
(1354,1344,2)
(40,488,2)
(597,92,2)
(1106,658,2)
(983,648,2)
(619,1307,2)
(1121,1199,2)
(26,1158,2)
(816,608,2)
(1081,455,2)
(20,1081,2)
(178,455,2)
(406,915,2)
(610,1027,2)
(1113,845,2)
(837,422,2)
(54,1057,2)
(1395,648,2)
(1062,1235,2)
(1073,716,2)
(182,399,2)
(109,681,2)
(1358,1037,2)
(699,608,2)
(666,711,2)
(51,1037,2)
(792,648,2)
(260,56,2)
(1199,995,2)
(260,1038,2)
(1221,578,2)
(1182,279,2)
(50,1092,2)
(1266,683,2)
(217,279,2)
(1011,138,2)
(799,761,2)
(1286,291,2)
(321,690,2)
(1136,506,2)
(25,279,2)
(730,677,2)
(334,708,2)
(550,384,2)
(1147,1011,2)
(1085,569,2)
(811,708,2)
(961,918,2)
(318,1077,2)
(395,506,2)
(425,136,2)
(644,455,2)
(1369,1367,2)
(718,1140,2)
(1061,285,2)
(611,648,2)
(316,800,2)
(910,648,2)
(728,1011,2)
(1080,404,2)
(316,762,2)
(948,1352,2)
(1254,105,2)
(470,608,2)
(855,315,2)
(126,797,2)
(1188,1037,2)
(324,1210,2)
(616,1367,2)
(1075,915,2)
(916,797,2)
(833,285,2)
(671,648,2)
(52,676,2)
(557,1043,2)
(1305,1210,2)
(1031,506,2)
(289,228,2)
(1237,608,2)
(102,1037,2)
(834,681,2)
(1143,228,2)
(1237,455,2)
(864,1199,2)
(175,799,2)
(1359,228,2)
(802,1260,2)
(1207,514,2)
(1180,315,2)
(856,136,2)
(1198,1037,2)
(221,1385,2)
(1239,265,2)
(494,506,2)
(831,681,2)
(116,1210,2)
(315,648,2)
(728,30,2)
(676,1329,2)
(979,285,2)
(638,1367,2)
(1374,1260,2)
(1012,1210,2)
(1367,105,2)
(1212,1106,2)
(355,1210,2)
(213,978,2)
(1061,1210,2)
(762,1279,2)
(287,86,2)
(1312,539,2)
(1256,314,2)
(617,202,2)
(410,850,2)
(1140,1367,2)
(502,413,2)
(84,285,2)
(273,57,2)
(226,285,2)
(972,608,2)
(1258,531,2)
(1292,648,2)
(1252,686,2)
(997,799,2)
(935,285,2)
(789,1130,2)
(556,86,2)
(298,455,2)
(855,1210,2)
(746,690,2)
(11,683,2)
(265,265,2)
(379,349,2)
(937,349,2)
(1142,279,2)
(263,899,2)
(533,1199,2)
(806,850,2)
(1078,1109,2)
(1319,401,2)
(1335,349,2)
(1178,202,2)
(1315,312,2)
(678,335,2)
(806,1210,2)
(1081,402,2)
(300,57,2)
(255,648,2)
(1065,983,2)
(214,648,2)
(651,117,2)
(443,899,2)
(1166,690,2)
(1273,681,2)
(1182,648,2)
(53,1260,2)
(420,1304,2)
(22,608,2)
(110,401,2)
(438,349,2)
(385,292,2)
(1007,799,2)
(544,1057,2)
(144,292,2)
(648,1347,2)
(170,1210,2)
(1237,1154,2)
(805,1260,2)
(1255,797,2)
(348,285,2)
(636,542,2)
(1006,1109,2)
(1308,1210,2)
(35,1158,2)
(1356,850,2)
(921,315,2)
(1182,92,2)
(425,56,2)
(474,264,2)
(692,1260,2)
(716,266,2)
(735,799,2)
(388,1011,2)
(273,791,2)
(341,92,2)
(483,1329,2)
(450,648,2)
(1320,1158,2)
(600,1210,2)
(173,797,2)
(767,780,2)
(994,683,2)
(504,70,2)
(1191,292,2)
(838,1367,2)
(1170,291,2)
(1384,980,2)
(1344,608,2)
(75,426,2)
(1008,1109,2)
(1037,976,2)
(596,1210,2)
(1323,384,2)
(716,716,2)
(727,1063,2)
(1365,92,2)
(858,629,2)
(264,834,2)
(654,101,2)
(1207,352,2)
(330,724,2)
(205,1011,2)
(193,567,2)
(1227,848,2)
(1376,708,2)
(365,762,2)
(345,240,2)
(878,344,2)
(1396,560,2)
(165,569,2)
(317,780,2)
(859,681,2)
(1301,780,2)
(1097,648,2)
(1090,629,2)
(925,292,2)
(1151,1037,2)
(899,608,2)
(857,285,2)
(1260,1304,2)
(1258,853,2)
(1037,681,2)
(775,648,2)
(677,608,2)
(488,404,2)
(313,850,2)
(626,542,2)
(1050,1037,2)
(1252,1210,2)
(1238,1037,2)
(1146,677,2)
(1119,542,2)
(1083,648,2)
(947,1170,2)
(1293,285,2)
(620,757,2)
(1037,1037,2)
(1257,349,2)
(1306,282,2)
(732,92,2)
(1373,312,2)
(1313,1037,2)
(932,1014,2)
(868,1145,2)
(796,681,2)
(791,438,2)
(1241,126,2)
(445,1210,2)
(367,1210,2)
(770,1011,2)
(904,1210,2)
(662,676,2)
(312,608,2)
(523,676,2)
(1063,285,2)
(659,1304,2)
(450,711,2)
(1223,317,2)
(534,240,2)
(691,413,2)
(652,797,2)
(617,35,2)
(231,182,2)
(734,1011,2)
(531,608,2)
(1245,542,2)
(1294,1011,2)
(390,716,2)
(185,105,2)
(218,1037,2)
(221,1077,2)
(1145,1396,2)
(355,50,2)
(448,578,2)
(849,223,2)
(57,50,2)
(496,207,2)
(1120,506,2)
(354,339,2)
(1229,1109,2)
(986,1063,2)
(28,761,2)
(349,349,2)
(1247,648,2)
(1141,1179,2)
(1337,312,2)
(368,1133,2)
(717,413,2)
(784,918,2)
(1148,265,2)
(118,506,2)
(344,117,2)
(637,845,2)
(815,918,2)
(409,690,2)
(1075,1210,2)
(776,936,2)
(791,57,2)
(207,1363,2)
(904,213,2)
(987,128,2)
(345,426,2)
(87,708,2)
(607,1210,2)
(665,198,2)
(718,569,2)
(874,648,2)
(239,285,2)
(1367,185,2)
(50,972,2)
(845,716,2)
(455,1095,2)
(425,404,2)
(214,578,2)
(890,470,2)
(696,349,2)
(534,426,2)
(690,470,2)
(598,265,2)
(1383,1109,2)
(129,1260,2)
(754,1307,2)
(761,608,2)
(308,1210,2)
(716,695,2)
(1342,292,2)
(537,506,2)
(1371,676,2)
(1268,413,2)
(347,1260,2)
(147,426,2)
(472,677,2)
(1234,980,2)
(518,608,2)
(778,1109,2)
(540,1077,2)
(1372,314,2)
(380,711,2)
(706,716,2)
(76,648,2)
(44,47,2)
(332,569,2)
(69,47,2)
(228,608,2)
(477,1260,2)
(1065,331,2)
(1129,134,2)
(1230,1109,2)
(715,569,2)
(1088,816,2)
(123,1210,2)
(966,677,2)
(197,1210,2)
(820,608,2)
(924,413,2)
(1208,681,2)
(180,695,2)
(1322,757,2)
(709,857,2)
(41,648,2)
(582,1026,2)
(958,315,2)
(1241,797,2)
(112,314,2)
(48,915,2)
(765,240,2)
(569,1367,2)
(339,86,2)
(560,506,2)
(224,716,2)
(911,716,2)
(820,716,2)
(206,1037,2)
(1002,1318,2)
(1228,1109,2)
(160,648,2)
(290,845,2)
(630,50,2)
(840,50,2)
(801,941,2)
(260,903,2)
(1255,608,2)
(798,1367,2)
(208,1037,2)
(794,1241,2)
(431,285,2)
(656,1210,2)
(919,1210,2)
(571,1158,2)
(956,648,2)
(585,1096,2)
(513,285,2)
(765,455,2)
(0,690,2)
(352,648,2)
(673,399,2)
(1117,683,2)
(844,1088,2)
(714,285,2)
(1155,434,2)
(524,711,2)
(232,413,2)
(983,1129,2)
(278,455,2)
(1012,941,2)
(768,1077,2)
(292,70,2)
(621,1210,2)
(331,648,2)
(1082,1210,2)
(481,708,2)
(111,604,2)
(1371,1210,2)
(1118,268,2)
(432,491,2)
(1274,1329,2)
(432,1210,2)
(245,681,2)
(872,566,2)
(514,799,2)
(1255,1073,2)
(196,315,2)
(455,629,2)
(344,1011,2)
(749,711,2)
(365,648,2)
(1203,797,2)
(638,569,2)
(649,1011,2)
(1116,648,2)
(49,1109,2)
(401,955,2)
(1099,1210,2)
(569,1140,2)
(852,455,2)
(982,799,2)
(161,972,2)
(172,797,2)
(1079,315,2)
(337,279,2)
(978,102,2)
(235,936,2)
(1346,757,2)
(1164,850,2)
(771,569,2)
(1186,422,2)
(525,648,2)
(12,1095,2)
(885,1210,2)
(14,972,2)
(826,1210,2)
(1130,1014,2)
(335,330,2)
(98,850,2)
(350,762,2)
(136,1252,2)
(277,794,2)
(987,845,2)
(376,413,2)
(707,1199,2)
(952,542,2)
(1094,1338,2)
(866,1091,2)
(47,77,2)
(4,92,2)
(903,401,2)
(741,681,2)
(445,690,2)
(273,238,2)
(649,554,2)
(582,1354,2)
(762,167,2)
(659,1210,2)
(128,257,2)
(1252,69,2)
(805,892,2)
(1124,1210,2)
(995,845,2)
(315,422,2)
(90,164,2)
(794,903,2)
(322,1011,2)
(198,122,2)
(274,349,2)
(487,569,2)
(1388,980,2)
(33,70,2)
(1025,228,2)
(491,542,2)
(1227,265,2)
(116,285,2)
(384,70,2)
(1037,578,2)
(1200,455,2)
(27,762,2)
(649,1210,2)
(689,207,2)
(871,1109,2)
(47,629,2)
(421,1210,2)
(967,608,2)
(884,1227,2)
(787,936,2)
(827,311,2)
(614,994,2)
(394,608,2)
(15,1037,2)
(291,1199,2)
(297,518,2)
(789,1081,2)
(978,1037,2)
(386,1210,2)
(1285,315,2)
(1184,1077,2)
(925,70,2)
(231,69,2)
(951,128,2)
(153,648,2)
(258,816,2)
(1126,1078,2)
(1095,149,2)
(807,1109,2)
(639,50,2)
(553,426,2)
(425,1210,2)
(824,676,2)
(382,915,2)
(1185,912,2)
(1281,1077,2)
(845,387,2)
(1227,100,2)
(433,301,2)
(737,285,2)
(565,608,2)
(1264,489,2)
(713,686,2)
(1155,690,2)
(681,608,2)
(405,292,2)
(1252,1073,2)
(197,542,2)
(566,915,2)
(1060,677,2)
(553,1393,2)
(653,775,2)
(399,1014,2)
(48,1210,2)
(920,918,2)
(273,349,2)
(855,55,2)
(653,711,2)
(942,708,2)
(262,50,2)
(959,677,2)
(256,265,2)
(915,699,2)
(136,1393,2)
(855,1079,2)
(202,506,2)
(1078,807,2)
(397,1199,2)
(460,240,2)
(256,100,2)
(513,1205,2)
(508,1210,2)
(1209,1260,2)
(30,648,2)
(904,264,2)
(975,92,2)
(976,299,2)
(367,315,2)
(711,608,2)
(934,918,2)
(111,384,2)
(955,845,2)
(610,70,2)
(1395,899,2)
(1027,1233,2)
(1343,608,2)
(1069,399,2)
(1054,1014,2)
(426,998,2)
(1279,167,2)
(170,899,2)
(541,542,2)
(368,1080,2)
(488,562,2)
(436,1146,2)
(977,240,2)
(1188,474,2)
(1334,799,2)
(1176,291,2)
(1252,903,2)
(1264,1365,2)
(1138,1210,2)
(1061,513,2)
(1264,1109,2)
(618,565,2)
(1288,349,2)
(75,240,2)
(1026,693,2)
(709,1156,2)
(1330,762,2)
(482,1260,2)
(1025,1210,2)
(1014,661,2)
(605,1095,2)
(1269,933,2)
(130,757,2)
(1300,690,2)
(779,1213,2)
(86,608,2)
(1236,470,2)
(672,850,2)
(480,578,2)
(893,716,2)
(356,681,2)
(1289,413,2)
(1066,1260,2)
(1001,470,2)
(683,608,2)
(319,167,2)
(797,455,2)
(348,648,2)
(5,629,2)
(801,539,2)
(1390,648,2)
(671,344,2)
(1199,629,2)
(529,845,2)
(917,629,2)
(134,608,2)
(99,762,2)
(957,762,2)
(708,762,2)
(36,799,2)
(1129,1116,2)
(183,676,2)
(320,1077,2)
(1040,648,2)
(690,648,2)
(1083,681,2)
(993,70,2)
(128,629,2)
(1076,50,2)
(903,529,2)
(580,933,2)
(511,1199,2)
(760,349,2)
(922,797,2)
(19,413,2)
(103,711,2)
(453,648,2)
(719,690,2)
(655,542,2)
(171,690,2)
(565,711,2)
(527,780,2)
(901,182,2)
(108,780,2)
(248,699,2)
(76,569,2)
(927,690,2)
(1223,108,2)
(668,956,2)
(1354,818,2)
(915,648,2)
(1270,850,2)
(836,648,2)
(734,344,2)
(839,560,2)
(669,648,2)
(1093,450,2)
(998,797,2)
(1116,134,2)
(1218,1210,2)
(1204,282,2)
(759,1210,2)
(279,92,2)
(713,426,2)
(143,683,2)
(459,86,2)
(844,816,2)
(148,1210,2)
(75,1393,2)
(335,1077,2)
(1161,799,2)
(192,1037,2)
(609,1037,2)
-----------------------------------
(0,"bilevel art scan\\n")
(1,fd)
(2,"%lu\\n")
(3,sep)
(4,fd)
(5,TIFF_VARIABLE2)
(6," %5u")
(7,case PHOTOMETRIC_LOGLUV:)
(8,FIELD_COMPRESSION)
(9,fip)
(10,tag)
(11,td_imagedepth)
(12,strcmp(fip->field_name,"DotRange")
(13,tif)
(14,TIFFPRINT_COLORMAP)
(15,cp)
(16,)
(17,)
(18,FIELD_SMINSAMPLEVALUE)
(19,td->td_compression)
(20,fip)
(21,"%sunspecified")
(22,_TIFFFillStriles( tif )
(23,for(i = 0; i < count; i++)
(24,for (s = 0; s < td->td_nstrips; s++)
(25,td)
(26,i)
(27,td_photometric)
(28,td_fillorder)
(29,tif)
(30,td->td_transferfunction)
(31,fip->field_readcount)
(32,i)
(33,td->td_nstrips)
(34,flags)
(35,td->td_sminsamplevalue)
(36,fd)
(37,if (!_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data)
(38,)
(39,unsigned __int64)
(40,TIFFGetField(tif, tag, &value_count, &raw_data)
(41,td->td_sampleinfo)
(42,i--)
(43,1)
(44,TIFF_SPP)
(45,FIELD_SAMPLEFORMAT)
(46,if (flags & TIFFPRINT_COLORMAP)
(47,fip->field_readcount == TIFF_VARIABLE\n\\n\\t\\t\\t\\t    || fip->field_readcount == TIFF_VARIABLE2)
(48,fprintf(fd, " pixels/inch")
(49,td_sampleinfo)
(50,flags & TIFFPRINT_COLORMAP)
(51,td)
(52,fd)
(53,td)
(54,"  Position: %g, %g\\n")
(55,td->td_ycbcrpositioning)
(56,value_count = small_value_count)
(57,l = 0)
(58,fprintf(fd, "error diffused\\n")
(59,i)
(60,fd)
(61,"separate image planes\\n")
(62,td)
(63,)
(64,tif)
(65,TIFF_PERSAMPLE)
(66,fd)
(67,photoNames)
(68,)
(69,value_count = 1)
(70,(flags & TIFFPRINT_STRIPS)
(71,FIELD_EXTRASAMPLES)
(72,i)
(73,for (cp = td->td_inknames; \n\\n\\t\\t     i > 0 && cp < td->td_inknames + td->td_inknameslen; \n\\n\\t\\t     cp = strchr(cp,\'\\0\')
(74,fd)
(75,mem_alloc)
(76,td->td_subifd)
(77,fip->field_readcount == TIFF_VARIABLE2)
(78,1)
(79,i)
(80,break;)
(81,fd)
(82,tif)
(83,dotrange)
(84,td)
(85,NORIENTNAMES)
(86,TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)
(87,break;)
(88,td)
(89,FIELD_PAGENUMBER)
(90,field_passcount)
(91,tif_flags)
(92,TIFFFieldSet(tif,FIELD_EXTRASAMPLES)
(93,fd)
(94,fd)
(95,for (i = 0; i < count; ++i)
(96,fd)
(97,td_orientation)
(98,count = (tif->tif_flags & TIFF_PERSAMPLE)
(99,fd)
(100,i = 0)
(101,TIFFFieldSet(tif,FIELD_EXTRASAMPLES)
(102,cp - td->td_inknames)
(103,td_tilewidth)
(104,break;)
(105,TIFFFieldSet(tif, FIELD_SUBIFD)
(106,0)
(107,if (TIFFFieldSet(tif,FIELD_FILLORDER)
(108,td->td_halftonehints[0])
(109,"  Ink Names: ")
(110,value_count)
(111,(unsigned long)
(112,fd)
(113,"\\n")
(114,fd)
(115,NPHOTONAMES)
(116,fprintf(fd, "  Subfile Type:")
(117,i = 1)
(118,tif)
(119,flags)
(120,"  FillOrder: ")
(121,td_photometric)
(122,td->td_subfiletype)
(123,fprintf(fd, "\\n")
(124,switch (td->td_threshholding)
(125,0)
(126,fip->field_type)
(127,td_extrasamples)
(128,fip->field_readcount == TIFF_VARIABLE)
(129,fprintf(fd, "complex signed integer\\n")
(130,td_rowsperstrip)
(131,unsigned long)
(132,FIELD_IMAGEDEPTH)
(133,orientNames[td->td_orientation])
(134,TIFFFieldSet(tif,FIELD_ORIENTATION)
(135,n)
(136,!_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data)
(137,tif)
(138,l = 0)
(139,i)
(140,fd)
(141,td)
(142,fd)
(143," Image Depth: %lu")
(144,(unsigned __int64)
(145,case THRESHHOLD_BILEVEL:)
(146,l)
(147,continue;)
(148,fprintf(fd, "%s\\n", orientNames[td->td_orientation])
(149,fip->field_tag)
(150,fd)
(151,fd)
(152,tif)
(153,td->td_colormap)
(154,dotrange)
(155,td_subfiletype)
(156,FIELD_COLORMAP)
(157," pixels/inch")
(158,td->td_rowsperstrip)
(159,1)
(160,td->td_pagenumber)
(161,"  Color Map: ")
(162,td_xposition)
(163," (unit %u = 0x%x)
(164,fip == NULL)
(165,fprintf(fd, " %5I64u",\n\\n\\t\\t\\t\\t(unsigned __int64)
(166,fip)
(167,TIFFFieldSet(tif,FIELD_PHOTOMETRIC)
(168,"(present)
(169,td)
(170,fprintf(fd, "  Max Sample Value: %u\\n", td->td_maxsamplevalue)
(171,break;)
(172,field_type)
(173,tag)
(174,FIELD_SMAXSAMPLEVALUE)
(175,fd)
(176,switch (td->td_fillorder)
(177,switch (td->td_sampleinfo[i])
(178,0)
(179,TIFF_VARIABLE2)
(180,i++)
(181,FIELD_INKNAMES)
(182,fip->field_readcount == TIFF_SPP)
(183,fd)
(184,td_subfiletype)
(185,td->td_subifd)
(186,td)
(187,2)
(188,"  Min Sample Value: %u\\n")
(189,i = 0)
(190,)
(191,fip->field_name)
(192,fd)
(193,fprintf(fd, "  Samples/Pixel: %u\\n", td->td_samplesperpixel)
(194,if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)
(195,td)
(196,fprintf(fd, "cosited\\n")
(197,fprintf(fd, "single image plane\\n")
(198,td->td_subfiletype & FILETYPE_MASK)
(199,case FILLORDER_MSB2LSB:)
(200,fd)
(201,tif)
(202,i = 0)
(203,td_stripbytecount)
(204,break;)
(205,td_transferfunction)
(206,", ")
(207,tif->tif_tagmethods.printdir)
(208,td_inknameslen)
(209,1L<<td->td_bitspersample)
(210,td_pagenumber)
(211,fip)
(212,tif)
(213,max_chars = \n\\n\\t\\t\\t\\ttd->td_inknameslen - (cp - td->td_inknames)
(214,td->td_inknameslen)
(215,for (i = 0; i < td->td_nsubifd; i++)
(216,td_halftonehints)
(217,", ")
(218,cp)
(219,"  Orientation: ")
(220,"  %lu %s:\\n")
(221,td->td_refblackwhite[2*i+0])
(222,_TIFFfree(raw_data)
(223,td->td_samplesperpixel)
(224,0)
(225,default:)
(226,td)
(227,fd)
(228,TIFFFieldSet(tif,FIELD_PLANARCONFIG)
(229,raw_data)
(230,tif)
(231,value_count > 1)
(232,"%u (0x%x)
(233,fd)
(234,td)
(235,fprintf(fd, "  YCbCr Subsampling: %u, %u\\n",\n\\n\\t\\t\\ttd->td_ycbcrsubsampling[0], td->td_ycbcrsubsampling[1] )
(236,fd)
(237,td)
(238,td->td_colormap[2][l])
(239,sep)
(240,TIFFGetField(tif, tag, &raw_data)
(241,if (td->td_orientation < NORIENTNAMES)
(242,c)
(243,"  Photometric Interpretation: ")
(244,td_subfiletype)
(245,fd)
(246,td_orientation)
(247,"%u (0x%x)
(248,td_resolutionunit)
(249,td_ycbcrpositioning)
(250,td)
(251,small_value_count)
(252,)
(253,max_chars)
(254,case PLANARCONFIG_CONTIG:)
(255,td->td_imagelength)
(256,++i)
(257,fip->field_readcount)
(258,td_minsamplevalue)
(259,if (TIFFFieldSet(tif,FIELD_ORIENTATION)
(260,&value_count)
(261,FIELD_MAXSAMPLEVALUE)
(262,n = 1L<<td->td_bitspersample)
(263,"  Max Sample Value: %u\\n")
(264,cp = td->td_inknames)
(265,i < count)
(266,count = (short)
(267,fd)
(268,-1)
(269,td)
(270,1)
(271,"  Samples/Pixel: %u\\n")
(272,count)
(273,fprintf(fd, "   %5ld: %5u %5u %5u\\n",\n\\n\\t\\t\\t\\t    l,\n\\n\\t\\t\\t\\t    td->td_colormap[0][l],\n\\n\\t\\t\\t\\t    td->td_colormap[1][l],\n\\n\\t\\t\\t\\t    td->td_colormap[2][l])
(274,0)
(275,"\\n")
(276,"  Resolution: %g, %g")
(277,_TIFFmalloc(\n\\n\\t\\t\\t\\t\\t    _TIFFDataSize(fip->field_type)
(278,dotrange+0)
(279,i < td->td_extrasamples)
(280,td)
(281,td_refblackwhite)
(282,fip->field_readcount == TIFF_VARIABLE)
(283,0)
(284,i)
(285,TIFFFieldSet(tif,FIELD_SUBFILETYPE)
(286,sep = "")
(287,td)
(288,"  YCbCr Positioning: ")
(289,"  Planar Configuration: ")
(290,fip->field_readcount)
(291,fip->field_readcount == TIFF_VARIABLE)
(292,s < td->td_nstrips)
(293,1)
(294,"  Image Width: %lu Image Length: %lu")
(295,fprintf(fd, "  SMax Sample Value:")
(296,fd)
(297,"Strips")
(298,field_type)
(299,td->td_inknames + td->td_inknameslen)
(300,td->td_colormap[1][l])
(301,td->td_transferfunction)
(302,)
(303,c->name)
(304,if (fip->field_readcount == TIFF_VARIABLE2 )
(305,td_extrasamples)
(306,)
(307,)
(308,fprintf(fd, " %g", td->td_sminsamplevalue[i])
(309,if (TIFFFieldSet(tif,FIELD_POSITION)
(310,if(TIFFGetField(tif, tag, &small_value_count, &raw_data)
(311,(unsigned __int64)
(312,TIFFFieldSet(tif,FIELD_ROWSPERSTRIP)
(313,fd)
(314,TIFFFieldSet(tif,FIELD_BITSPERSAMPLE)
(315,td->td_ycbcrpositioning)
(316,fprintf(fd, "%s\\n", photoNames[td->td_photometric])
(317,td->td_halftonehints[1])
(318,i)
(319,td)
(320,i++)
(321,break;)
(322,\'\\n\')
(323,break;)
(324,fprintf(fd, "  Reference Black/White:\\n")
(325,"  SMin Sample Value:")
(326,if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE)
(327,if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT)
(328,s)
(329,td)
(330,2*i+1)
(331,td->td_orientation)
(332,td)
(333,1)
(334,"CIE Log2(L)
(335,td->td_refblackwhite[2*i+1])
(336,i)
(337,sep)
(338,fd)
(339,td->td_imagewidth)
(340,if(TIFFGetField(tif, tag, &value_count, &raw_data)
(341,"")
(342,"  Reference Black/White:\\n")
(343,isTiled(tif)
(344,i < td->td_samplesperpixel)
(345,tif)
(346,"  YCbCr Subsampling: %u, %u\\n")
(347,fd)
(348,td->td_subfiletype)
(349,l < n)
(350,td)
(351,break;)
(352,td->td_fillorder)
(353,if(TIFFGetField(tif, tag, raw_data)
(354,(unsigned long)
(355,fprintf(fd, "\\n")
(356,i)
(357,unsigned __int64)
(358,case THRESHHOLD_ERRORDIFFUSE:)
(359,i)
(360,)
(361,td_transferfunction)
(362,switch (td->td_ycbcrpositioning)
(363,fd)
(364,count)
(365,td->td_photometric)
(366,if (c)
(367,fprintf(fd, "centered\\n")
(368,TIFFGetField(tif, tag, &small_value_count, &raw_data)
(369,i++)
(370,cp)
(371,case RESUNIT_CENTIMETER:)
(372,)
(373,td_colormap)
(374,FIELD_FILLORDER)
(375,td)
(376,"%s\\n")
(377,field_name)
(378,field_readcount)
(379,"   %5ld: %5u %5u %5u\\n")
(380,fprintf(fd, "  Tile Width: %lu Tile Length: %lu",\n\\n\\t\\t    (unsigned long)
(381,case PHOTOMETRIC_LOGL:)
(382," (unitless)
(383,fip)
(384,s = 0)
(385,td)
(386,fprintf(fd, "  SMin Sample Value:")
(387,TIFFFieldWithTag(tif, tag)
(388,l)
(389,sep = "/")
(390,NULL)
(391,case SAMPLEFORMAT_IEEEFP:)
(392,tif_diroff)
(393,case SAMPLEFORMAT_INT:)
(394,tif->tif_flags)
(395,i)
(396,case THRESHHOLD_HALFTONE:)
(397,value_count)
(398,"%u (0x%x)
(399,fip->field_readcount == TIFF_VARIABLE2)
(400,i)
(401,fip->field_readcount == TIFF_SPP)
(402,fip->field_type)
(403,td->td_resolutionunit)
(404,raw_data = _TIFFmalloc(\n\\n\\t\\t\\t\\t\\t    _TIFFDataSize(fip->field_type)
(405,td->td_stripbytecount)
(406,td_resolutionunit)
(407,td)
(408,sep)
(409,td)
(410,tif->tif_flags)
(411,sep)
(412,l++)
(413,c)
(414,"\\n")
(415,)
(416,if (td->td_subfiletype & FILETYPE_MASK)
(417,if (fip->field_readcount == TIFF_VARIABLE\n\\n\\t\\t\\t\\t    || fip->field_readcount == TIFF_VARIABLE2)
(418,switch (td->td_photometric)
(419,case YCBCRPOSITION_CENTERED:)
(420,fd)
(421,fprintf(fd, "\\n")
(422,TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING)
(423,fd)
(424,"  Sample Format: ")
(425,_TIFFPrintField(fd, fip, value_count, raw_data)
(426,TIFFGetField(tif, tag, raw_data)
(427,s)
(428,i)
(429,FIELD_THRESHHOLDING)
(430,long)
(431,td->td_subfiletype)
(432,fprintf(fd, "%u (0x%x)
(433,td->td_transferfunction[i])
(434,td->td_threshholding)
(435,value_count)
(436,fprintf(fd, "  Resolution: %g, %g",\n\\n\\t\\t    td->td_xresolution, td->td_yresolution)
(437,fprintf(fd, "  Thresholding: ")
(438,td->td_colormap[0])
(439,s)
(440,if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC)
(441,fd)
(442,td->td_bitspersample)
(443,td)
(444,unsigned long)
(445,fprintf(fd, "halftone or dithered scan\\n")
(446,td)
(447,td)
(448,td)
(449,FIELD_TRANSFERFUNCTION)
(450,td->td_tilewidth)
(451,)
(452,if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES)
(453,td->td_nstrips)
(454,break;)
(455,fip->field_tag == TIFFTAG_DOTRANGE\n\\n\\t\\t\\t\\t    && strcmp(fip->field_name,"DotRange")
(456,td)
(457,tif)
(458,break;)
(459,td_imagewidth)
(460,continue;)
(461,"%sassoc-alpha")
(462,case EXTRASAMPLE_UNASSALPHA:)
(463,if (td->td_subfiletype & FILETYPE_PAGE)
(464,n = 1L<<td->td_bitspersample)
(465,"  Compression Scheme: ")
(466,if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE)
(467,break;)
(468,"void\\n")
(469,"%u (0x%x)
(470,TIFFFieldSet(tif,FIELD_THRESHHOLDING)
(471,"    %2d: %5g %5g\\n")
(472,td)
(473,"\\n")
(474,strchr(cp,\'\\0\')
(475,if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)
(476,)
(477,td_sampleformat)
(478,td_yresolution)
(479,FIELD_RESOLUTION)
(480,td_inknameslen)
(481,td)
(482,td->td_sampleformat)
(483,TIFFPRINT_CURVES)
(484,td)
(485,l)
(486,fprintf(fd, "(present)
(487," %5I64u")
(488,&raw_data)
(489,td->td_sampleinfo)
(490,continue;)
(491,td->td_planarconfig)
(492,FILETYPE_REDUCEDIMAGE)
(493,td)
(494,i)
(495,2)
(496,fd)
(497,"msb-to-lsb\\n")
(498,)
(499,FILETYPE_MASK)
(500,td->td_xposition)
(501,if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE)
(502,fd)
(503,1)
(504,tif)
(505,td)
(506,TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE)
(507,tif)
(508,fprintf(fd, "  Orientation: ")
(509,mem_alloc = 0)
(510,)
(511,fip)
(512,fd)
(513,(long)
(514,td->td_fillorder)
(515,td->td_rowsperstrip)
(516,fd)
(517,)
(518,isTiled(tif)
(519,fd)
(520,"complex signed integer\\n")
(521,)
(522,FILETYPE_PAGE)
(523,1L<<td->td_bitspersample)
(524,tif)
(525,td->td_nsubifd)
(526,td_fillorder)
(527,td)
(528,fd)
(529,fip->field_readcount)
(530,if (TIFFFieldSet(tif,FIELD_COLORMAP)
(531,TIFFGetTagListCount(tif)
(532,c)
(533,raw_data)
(534,fip)
(535,if (TIFFFieldSet(tif,FIELD_TILEDEPTH)
(536,td)
(537,count)
(538,fip)
(539,sep = "")
(540,td_refblackwhite)
(541,td_planarconfig)
(542,td->td_planarconfig)
(543,tif)
(544,td)
(545,default:)
(546,case SAMPLEFORMAT_COMPLEXINT:)
(547,RET)
(548,tif)
(549,fip)
(550,td->td_stripoffset[s])
(551,if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH)
(552,for (i = 1; i < td->td_samplesperpixel; i++)
(553,value_count)
(554,td->td_transferfunction[0][l])
(555,td_orientation)
(556,td_imagelength)
(557,fprintf(fd, "  Extra Samples: %u<", td->td_extrasamples)
(558,fprintf(fd, "(infinite)
(559,td)
(560,tif->tif_flags & TIFF_PERSAMPLE)
(561,tif)
(562,raw_data = dotrange)
(563,field_readcount)
(564,fd)
(565,TIFFFieldSet(tif,FIELD_TILEDEPTH)
(566,td->td_resolutionunit)
(567,td->td_samplesperpixel)
(568,)
(569,i < td->td_nsubifd)
(570,tif_diroff)
(571,fd)
(572,tif)
(573,default:)
(574,unsigned long)
(575,)
(576,default:)
(577,"")
(578,i > 0)
(579,td->td_yresolution)
(580,td_samplesperpixel)
(581,"  Page Number: %u-%u\\n")
(582,fprintf(fd, "TIFF Directory at offset 0x%I64x (%I64u)
(583,if(fip == NULL)
(584,i)
(585,fprintf(fd, "  Position: %g, %g\\n",\n\\n\\t\\t    td->td_xposition, td->td_yposition)
(586,break;)
(587,)
(588," pixels/cm")
(589,cp)
(590,td->td_inknames)
(591,s)
(592,i)
(593,if (td->td_photometric < NPHOTONAMES)
(594,value_count)
(595,tif)
(596,fprintf(fd, "void\\n")
(597,fd)
(598," %g")
(599,tif)
(600,fprintf(fd, "IEEE floating point\\n")
(601,fd)
(602,i)
(603,fd)
(604,unsigned long)
(605,0)
(606,td)
(607,fprintf(fd, "lsb-to-msb\\n")
(608,TIFF* tif)
(609,fd)
(610,fprintf(fd, "  %lu %s:\\n",\n\\n\\t\\t    (unsigned long)
(611,td->td_threshholding)
(612,fprintf(fd, "  SubIFD Offsets:")
(613,switch (td->td_resolutionunit)
(614,fprintf(fd, " Image Depth: %lu",\n\\n\\t\\t\\t    (unsigned long)
(615,td)
(616,td_nsubifd)
(617,td->td_sminsamplevalue[i])
(618," Tile Depth: %lu")
(619,FIELD_STRIPOFFSETS)
(620,fd)
(621,fprintf(fd, "  Rows/Strip: ")
(622,for (i = 0; i < count; ++i)
(623,td_resolutionunit)
(624,flags)
(625,tif)
(626,"%u (0x%x)
(627,)
(628,td_bitspersample)
(629,fip->field_passcount)
(630,td_bitspersample)
(631,)
(632,l)
(633,td)
(634,tif)
(635,td)
(636,td->td_planarconfig)
(637,fip->field_readcount)
(638,i)
(639,0)
(640,FIELD_MINSAMPLEVALUE)
(641,"%s%u (0x%x)
(642,sep)
(643,"  Tile Width: %lu Tile Length: %lu")
(644,tag)
(645,sep)
(646,tif)
(647,FIELD_TILEDEPTH)
(648,*td = &tif->tif_dir)
(649,fprintf(fd, "    %2ld: %5u",\n\\n\\t\\t\\t\\t    l, td->td_transferfunction[0][l])
(650,if (TIFFFieldSet(tif, FIELD_SUBIFD)
(651,i++)
(652,raw_data)
(653,(unsigned long)
(654,td)
(655,td_planarconfig)
(656,fprintf(fd, "  Ink Names: ")
(657,)
(658,unsigned long)
(659,fprintf(fd, "  Sample Format: ")
(660,i)
(661,fip->field_readcount)
(662,l)
(663,fd)
(664,if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE)
(665,"%stransparency mask")
(666,fd)
(667,fip)
(668,td->td_colormap[1])
(669,td->td_imagedepth)
(670,raw_data)
(671,td->td_samplesperpixel)
(672,count)
(673,fip->field_readcount == TIFF_SPP\n\\n\\t\\t\\t\\t\\t   || value_count > 1)
(674,td)
(675,default:)
(676,flags & TIFFPRINT_CURVES)
(677,TIFFFieldSet(tif,FIELD_RESOLUTION)
(678,fprintf(fd, "    %2d: %5g %5g\\n", i,\n\\n\\t\\t\\ttd->td_refblackwhite[2*i+0],\n\\n\\t\\t\\ttd->td_refblackwhite[2*i+1])
(679,fip)
(680,n)
(681,TIFFFieldSet(tif,FIELD_INKNAMES)
(682,i)
(683,TIFFFieldSet(tif,FIELD_IMAGEDEPTH)
(684,td->td_ycbcrsubsampling[0])
(685,case EXTRASAMPLE_ASSOCALPHA:)
(686,TIFFGetField(tif, tag, &value_count, &raw_data)
(687,orientNames)
(688,if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP)
(689,tif)
(690,td->td_threshholding)
(691,td)
(692,"IEEE floating point\\n")
(693,unsigned __int64)
(694,fip)
(695,i = 0)
(696,td_colormap)
(697,FIELD_SUBFILETYPE)
(698,"DotRange")
(699,TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)
(700,td_fillorder)
(701,td)
(702,"  Extra Samples: %u<")
(703,td)
(704,)
(705,for (l = 0; l < n; l++)
(706,count)
(707,tag)
(708,td->td_photometric)
(709,fprintf(fd, "%stransparency mask", sep)
(710,i)
(711,TIFFFieldSet(tif,FIELD_TILEDIMENSIONS)
(712,fputs("\\n", fd)
(713,fd)
(714,td)
(715,i)
(716,i < count)
(717,c)
(718,i++)
(719,"%u (0x%x)
(720,small_value_count)
(721,td_extrasamples)
(722,fprintf(fd, "\\n")
(723,if (TIFFFieldSet(tif,FIELD_SUBFILETYPE)
(724,2*i)
(725,sep)
(726,case YCBCRPOSITION_COSITED:)
(727,"/")
(728,td->td_transferfunction[0])
(729,td)
(730,fd)
(731,0)
(732,sep)
(733,td_colormap)
(734,i)
(735,"%u (0x%x)
(736,FIELD_REFBLACKWHITE)
(737,td_subfiletype)
(738,fd)
(739,TIFF_VARIABLE)
(740,td_yposition)
(741,td_inknames)
(742,break;)
(743,td)
(744,"%s\\n")
(745,fprintf(fd, "bilevel art scan\\n")
(746,break;)
(747,td_stripoffset)
(748,unsigned long)
(749,fd)
(750,field_readcount)
(751,case SAMPLEFORMAT_UINT:)
(752,0)
(753,if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING)
(754,tif)
(755,td)
(756,"\\n")
(757,td->td_rowsperstrip == (uint32)
(758,if (TIFFFieldSet(tif,FIELD_INKNAMES)
(759,fprintf(fd, "  Compression Scheme: ")
(760,td->td_colormap[2])
(761,TIFFFieldSet(tif,FIELD_FILLORDER)
(762,td->td_photometric < NPHOTONAMES)
(763,tif)
(764,)
(765,tag)
(766,)
(767,fd)
(768,i)
(769,)
(770,l)
(771,td_subifd)
(772,i)
(773,"single image plane\\n")
(774,dotrange)
(775,td->td_tilelength)
(776,td_ycbcrsubsampling)
(777,i)
(778,sep)
(779,1)
(780,TIFFFieldSet(tif,FIELD_HALFTONEHINTS)
(781,sep)
(782,field_readcount)
(783,fd)
(784,td->td_pagenumber)
(785,n)
(786,)
(787,td->td_ycbcrsubsampling[1])
(788,tif_tagmethods)
(789,fip->field_readcount == TIFF_VARIABLE\n\\n\\t\\t\\t\\t\\t   || fip->field_readcount == TIFF_VARIABLE2\n\\n\\t\\t\\t\\t\\t   || fip->field_readcount == TIFF_SPP\n\\n\\t\\t\\t\\t\\t   || value_count > 1)
(790,tag)
(791,td->td_colormap[0][l])
(792,td->td_orientation)
(793,0)
(794,_TIFFDataSize(fip->field_type)
(795,1)
(796,fd)
(797,fip->field_type == TIFF_ASCII\n\\n\\t\\t\\t\\t\\t   || fip->field_readcount == TIFF_VARIABLE\n\\n\\t\\t\\t\\t\\t   || fip->field_readcount == TIFF_VARIABLE2\n\\n\\t\\t\\t\\t\\t   || fip->field_readcount == TIFF_SPP\n\\n\\t\\t\\t\\t\\t   || value_count > 1)
(798,td)
(799,td->td_fillorder)
(800,photoNames[td->td_photometric])
(801,fprintf(fd, "%sunspecified", sep)
(802,"signed integer\\n")
(803,tif)
(804,if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL)
(805,fprintf(fd, "%u (0x%x)
(806,fprintf(fd, "\\n")
(807,td->td_sampleinfo)
(808,tif)
(809,"Tiles")
(810,TIFF_ASCII)
(811,td->td_photometric)
(812,tif)
(813,tif)
(814,td_sminsamplevalue)
(815,td->td_pagenumber[1])
(816,TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE)
(817,l)
(818,unsigned __int64)
(819,for (i = 0; i < 3; i++)
(820,TIFFGetTagListEntry(tif, i)
(821,"  SubIFD Offsets:")
(822,fd)
(823,)
(824,0)
(825,1)
(826,fprintf(fd, "separate image planes\\n")
(827,fprintf(fd, "    %3lu: [%8I64u, %8I64u]\\n",\n\\n\\t\\t\\t    (unsigned long)
(828,)
(829,switch (td->td_planarconfig)
(830,td_sampleformat)
(831,td)
(832,)
(833," ")
(834,td->td_inknames)
(835,td_orientation)
(836,td->td_bitspersample)
(837,td)
(838,0)
(839,td)
(840,"(present)
(841,1)
(842,td)
(843,printdir)
(844,fprintf(fd, "  Min Sample Value: %u\\n", td->td_minsamplevalue)
(845,fip = TIFFFieldWithTag(tif, tag)
(846,tif)
(847,td)
(848,td->td_smaxsamplevalue)
(849,(tif->tif_flags & TIFF_PERSAMPLE)
(850,TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE)
(851,tif)
(852,dotrange)
(853,short)
(854,td_subfiletype)
(855,fprintf(fd, "%u (0x%x)
(856,fd)
(857,sep = " ")
(858,fip)
(859,i = td->td_samplesperpixel)
(860,td->td_ycbcrsubsampling)
(861,fd)
(862,count)
(863,if (TIFFFieldSet(tif,FIELD_RESOLUTION)
(864,1)
(865,td)
(866,0)
(867,small_value_count)
(868,count = (tif->tif_flags & TIFF_PERSAMPLE)
(869,l)
(870,case RESUNIT_NONE:)
(871,td)
(872,fprintf(fd, " (unit %u = 0x%x)
(873,unsigned long)
(874,td->td_tiledepth)
(875,td->td_photometric)
(876,FIELD_YCBCRSUBSAMPLING)
(877,)
(878,l)
(879,field_tag)
(880,fip)
(881,field_readcount)
(882,tif)
(883,td_bitspersample)
(884,fprintf(fd, " %g", td->td_smaxsamplevalue[i])
(885,fprintf(fd, "CIE Log2(L)
(886,TIFF_SPP)
(887,)
(888,td)
(889,fd)
(890,td)
(891,if (td->td_subfiletype & FILETYPE_REDUCEDIMAGE)
(892,td->td_sampleformat)
(893,i)
(894,td_threshholding)
(895,l)
(896,"centered\\n")
(897,tif)
(898,"%u (0x%x)
(899,TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE)
(900,"complex IEEE floating point\\n")
(901,value_count)
(902,break;)
(903,value_count = fip->field_readcount)
(904,_TIFFprintAsciiBounded(fd, cp, max_chars)
(905,fip)
(906,s)
(907,fd)
(908,tif)
(909,_TIFFfree(raw_data)
(910,td->td_inknames)
(911,mem_alloc)
(912,td->td_subfiletype)
(913,tif)
(914,td)
(915,td->td_resolutionunit)
(916,1)
(917,TIFF_VARIABLE)
(918,TIFFFieldSet(tif,FIELD_PAGENUMBER)
(919,fprintf(fd, "%s\\n", c->name)
(920,td)
(921,td)
(922,&raw_data)
(923,fprintf(fd, "  Page Number: %u-%u\\n",\n\\n\\t\\t    td->td_pagenumber[0], td->td_pagenumber[1])
(924,td->td_compression)
(925,td)
(926,"unsigned integer\\n")
(927,td_threshholding)
(928,td)
(929,fd)
(930,fprintf(fd, "unsigned integer\\n")
(931,)
(932,fip)
(933,TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL)
(934,fd)
(935,fd)
(936,TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING)
(937,1)
(938,fd)
(939,fd)
(940,FIELD_YCBCRPOSITIONING)
(941,sep = ", ")
(942,"CIE Log2(L)
(943,td_inknames)
(944,sep)
(945,fd)
(946,tif_dir)
(947,assert (fip->field_readcount == TIFF_VARIABLE\n\\n\\t\\t\\t\\t\\t\\t|| fip->field_readcount == TIFF_VARIABLE2)
(948,(unsigned long)
(949,td_samplesperpixel)
(950,if(TIFFGetField(tif, tag, &raw_data)
(951,field_readcount)
(952,break;)
(953,tif->tif_diroff)
(954,for (i = 0; i < td->td_extrasamples; i++)
(955,fip->field_readcount)
(956,td->td_colormap)
(957,"%s\\n")
(958,"cosited\\n")
(959,"\\n")
(960,i)
(961,1)
(962,td_rowsperstrip)
(963,default:)
(964,fd)
(965,FIELD_POSITION)
(966,FIELD_RESOLUTIONUNIT)
(967,tif->tif_dir)
(968,s)
(969,tif)
(970,sep = ", ")
(971,"    %2ld: %5u")
(972,TIFFFieldSet(tif,FIELD_COLORMAP)
(973,)
(974,if(mem_alloc)
(975,fprintf(fd, ">\\n")
(976,cp < td->td_inknames + td->td_inknameslen)
(977,raw_data)
(978,td->td_inknameslen - (cp - td->td_inknames)
(979," (%lu = 0x%lx)
(980,TIFFFieldSet(tif,FIELD_COMPRESSION)
(981,fip)
(982,break;)
(983,td->td_orientation)
(984,)
(985,td)
(986,"%sreduced-resolution image")
(987,fip->field_readcount)
(988,i)
(989,0)
(990,fprintf(fd, "%lu\\n", (unsigned long)
(991,fd)
(992,td)
(993,td_nstrips)
(994,(unsigned long)
(995,fip->field_readcount)
(996,td)
(997,break;)
(998,TIFFGetField(tif, tag, raw_data)
(999,unsigned __int64)
(1000,if (TIFFFieldSet(tif,FIELD_THRESHHOLDING)
(1001,fd)
(1002,(unsigned __int64)
(1003,td->td_bitspersample)
(1004,tag)
(1005,)
(1006,i)
(1007,"lsb-to-msb\\n")
(1008,fd)
(1009,TIFF_VARIABLE)
(1010,)
(1011,l < n)
(1012,fprintf(fd, "%sunassoc-alpha", sep)
(1013,td_xresolution)
(1014,fip->field_readcount == TIFF_VARIABLE)
(1015,raw_data)
(1016,break;)
(1017,td->td_stripbytecount[s])
(1018,TIFF_VARIABLE)
(1019,i)
(1020,)
(1021,td_photometric)
(1022,strcmp(fip->field_name,"DotRange")
(1023,sep)
(1024,i)
(1025,fprintf(fd, "  Planar Configuration: ")
(1026,(unsigned __int64)
(1027,(unsigned long)
(1028,"  Transfer Function: ")
(1029,if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION)
(1030,td_tiledepth)
(1031,tif_flags)
(1032,tif)
(1033,fd)
(1034,"TIFF Directory at offset 0x%I64x (%I64u)
(1035,field_readcount)
(1036,td)
(1037,i > 0 && cp < td->td_inknames + td->td_inknameslen)
(1038,value_count = td->td_samplesperpixel)
(1039,fd)
(1040,td->td_inknameslen)
(1041,continue;)
(1042,if (fip->field_tag == TIFFTAG_DOTRANGE\n\\n\\t\\t\\t\\t    && strcmp(fip->field_name,"DotRange")
(1043,td->td_extrasamples)
(1044,"\\n")
(1045,td)
(1046,for (l = 0; l < n; l++)
(1047,fd)
(1048,if ((flags & TIFFPRINT_STRIPS)
(1049,fd)
(1050,cp)
(1051,FIELD_ORIENTATION)
(1052,td)
(1053,FIELD_SAMPLESPERPIXEL)
(1054,field_readcount)
(1055,td_ycbcrpositioning)
(1056,)
(1057,TIFFFieldSet(tif,FIELD_POSITION)
(1058,if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE)
(1059,fd)
(1060,fd)
(1061,fprintf(fd, " (%lu = 0x%lx)
(1062,fprintf(fd, "  Image Width: %lu Image Length: %lu",\n\\n\\t\\t    (unsigned long)
(1063,td->td_subfiletype & FILETYPE_REDUCEDIMAGE)
(1064,)
(1065,fprintf(fd, "%u (0x%x)
(1066,fd)
(1067,raw_data)
(1068,"  Thresholding: ")
(1069,fip->field_readcount)
(1070,tif)
(1071,if (flags & TIFFPRINT_CURVES)
(1072,s)
(1073,tag = TIFFGetTagListEntry(tif, i)
(1074,)
(1075,fprintf(fd, " pixels/cm")
(1076,1L)
(1077,i < 3)
(1078,td->td_sampleinfo[i])
(1079,td->td_ycbcrpositioning)
(1080,&raw_data)
(1081,fip->field_type == TIFF_ASCII)
(1082,fputc(\'\\n\', fd)
(1083,td->td_samplesperpixel)
(1084,">\\n")
(1085,fd)
(1086,TIFF_VARIABLE2)
(1087,)
(1088,td->td_minsamplevalue)
(1089,unsigned long)
(1090,field_readcount)
(1091,TIFFFieldSet(tif,FIELD_REFBLACKWHITE)
(1092,long flags)
(1093,(unsigned long)
(1094,2*i+0)
(1095,fip->field_tag == TIFFTAG_DOTRANGE)
(1096,td->td_yposition)
(1097,td->td_compression)
(1098,td_samplesperpixel)
(1099,fprintf(fd, " %5u",\n\\n\\t\\t\\t\\t\\t    td->td_transferfunction[i][l])
(1100,flags)
(1101,n)
(1102,fd)
(1103,case SAMPLEFORMAT_VOID:)
(1104,fip->field_readcount == TIFF_VARIABLE2)
(1105,FIELD_PLANARCONFIG)
(1106,(unsigned long)
(1107,fprintf(fd, "%sreduced-resolution image", sep)
(1108,td)
(1109,td->td_sampleinfo[i])
(1110,)
(1111,value_count)
(1112,switch (td->td_sampleformat)
(1113,fip->field_readcount)
(1114,cp)
(1115,if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS)
(1116,td->td_orientation)
(1117,fd)
(1118,(uint32)
(1119,fd)
(1120,0)
(1121,tif)
(1122,FIELD_SUBIFD)
(1123,case FILLORDER_LSB2MSB:)
(1124,fprintf(fd, "%smulti-page document", sep)
(1125,td)
(1126,fprintf(fd, "%s%u (0x%x)
(1127,value_count)
(1128,continue;)
(1129,td->td_orientation < NORIENTNAMES)
(1130,fip->field_readcount == TIFF_VARIABLE2\n\\n\\t\\t\\t\\t\\t   || fip->field_readcount == TIFF_SPP\n\\n\\t\\t\\t\\t\\t   || value_count > 1)
(1131,i)
(1132,fprintf(fd, "CIE Log2(L)
(1133,&small_value_count)
(1134,if (td->td_rowsperstrip == (uint32)
(1135,l)
(1136,fd)
(1137,break;)
(1138,fprintf(fd, "\\n")
(1139,td_compression)
(1140,i = 0)
(1141,"%smulti-page document")
(1142,i)
(1143,fd)
(1144,TIFFPRINT_STRIPS)
(1145,(tif->tif_flags & TIFF_PERSAMPLE)
(1146,td->td_xresolution)
(1147,n)
(1148,fd)
(1149,if (TIFFFieldSet(tif,FIELD_COMPRESSION)
(1150,fd)
(1151,fputs(sep, fd)
(1152,fprintf(fd, "%u (0x%x)
(1153,td_sampleinfo)
(1154,dotrange+1)
(1155,fprintf(fd, "%u (0x%x)
(1156,sep = "/")
(1157,fprintf(fd, "  FillOrder: ")
(1158,i < count)
(1159,raw_data)
(1160,tif)
(1161,fprintf(fd, "msb-to-lsb\\n")
(1162,tif)
(1163,default:)
(1164,count)
(1165,if(fip->field_passcount)
(1166,"halftone or dithered scan\\n")
(1167,td->td_transferfunction[i][l])
(1168,fprintf(fd, "%u (0x%x)
(1169,if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE)
(1170,fip->field_readcount == TIFF_VARIABLE\n\\n\\t\\t\\t\\t\\t\\t|| fip->field_readcount == TIFF_VARIABLE2)
(1171,td_samplesperpixel)
(1172,uint32)
(1173,)
(1174,sep)
(1175,td)
(1176,tag)
(1177,td)
(1178,++i)
(1179,td->td_subfiletype & FILETYPE_PAGE)
(1180,break;)
(1181,td)
(1182,td->td_extrasamples)
(1183,TIFF_PERSAMPLE)
(1184,3)
(1185,(unsigned long)
(1186,td_ycbcrpositioning)
(1187,"error diffused\\n")
(1188,strchr(cp,\'\\0\')
(1189,fputc(\'\\n\', fd)
(1190,if (TIFFFieldSet(tif,FIELD_PLANARCONFIG)
(1191,fd)
(1192,fip)
(1193,td)
(1194,tif)
(1195,fd)
(1196,max_chars)
(1197,td)
(1198,i)
(1199,fip->field_readcount == TIFF_VARIABLE2)
(1200,tif)
(1201,0)
(1202,td_maxsamplevalue)
(1203,tag)
(1204,field_readcount)
(1205,td->td_subfiletype)
(1206,td_photometric)
(1207,fprintf(fd, "%u (0x%x)
(1208,td)
(1209,fprintf(fd, "complex IEEE floating point\\n")
(1210,FILE* fd)
(1211,fd)
(1212,fprintf(fd, " Tile Depth: %lu",\n\\n\\t\\t\\t    (unsigned long)
(1213,tif->tif_flags & TIFF_PERSAMPLE)
(1214,raw_data)
(1215,FIELD_PHOTOMETRIC)
(1216,if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING)
(1217,value_count)
(1218,fprintf(fd, " (unitless)
(1219,)
(1220,td_compression)
(1221,td)
(1222,"\\n")
(1223,fprintf(fd, "  Halftone Hints: light %u dark %u\\n",\n\\n\\t\\t    td->td_halftonehints[0], td->td_halftonehints[1])
(1224,0)
(1225,FIELD_BITSPERSAMPLE)
(1226,break;)
(1227,td->td_smaxsamplevalue[i])
(1228,break;)
(1229,sep)
(1230,td_sampleinfo)
(1231,fd)
(1232,fip)
(1233,unsigned long)
(1234,TIFFFindCODEC(td->td_compression)
(1235,(unsigned long)
(1236,td_threshholding)
(1237,TIFFGetField(tif, tag, dotrange+0, dotrange+1)
(1238,cp = strchr(cp,\'\\0\')
(1239,i)
(1240,td_samplesperpixel)
(1241,_TIFFDataSize(fip->field_type)
(1242,tif)
(1243,td)
(1244,continue;)
(1245,td)
(1246,i)
(1247,td->td_samplesperpixel)
(1248,td_nstrips)
(1249,if (TIFFFieldSet(tif,FIELD_PAGENUMBER)
(1250,FIELD_HALFTONEHINTS)
(1251,case PLANARCONFIG_SEPARATE:)
(1252,_TIFFPrettyPrintField(tif, fip, fd, tag, value_count, raw_data)
(1253,)
(1254,td_subifd)
(1255,TIFFGetField(tif, tag, &raw_data)
(1256,"  Bits/Sample: %u\\n")
(1257,l)
(1258,(short)
(1259,count)
(1260,td->td_sampleformat)
(1261,tif)
(1262,fip)
(1263,TIFFFieldSet(tif,FIELD_STRIPOFFSETS)
(1264,td->td_sampleinfo[i])
(1265,td->td_extrasamples)
(1266,td)
(1267,mem_alloc)
(1268,td_compression)
(1269,fd)
(1270,"  SMax Sample Value:")
(1271,\'\\0\')
(1272,td_tilelength)
(1273,sep)
(1274,fd)
(1275,if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS)
(1276,break;)
(1277,1)
(1278,fprintf(fd, "\\n")
(1279,td->td_photometric)
(1280,if (tif->tif_tagmethods.printdir)
(1281,td->td_refblackwhite)
(1282,fd)
(1283,2)
(1284,FIELD_IMAGEDIMENSIONS)
(1285,break;)
(1286,fip)
(1287,break;)
(1288,td)
(1289,name)
(1290,tif)
(1291,td)
(1292,td->td_halftonehints)
(1293,"  Subfile Type:")
(1294,td)
(1295,"    %3lu: [%8I64u, %8I64u]\\n")
(1296,)
(1297,raw_data)
(1298,fd)
(1299,td->td_colormap)
(1300,fd)
(1301,td->td_halftonehints)
(1302,tif)
(1303,field_readcount)
(1304,TIFFFieldSet(tif,FIELD_SAMPLEFORMAT)
(1305,fprintf(fd, "  YCbCr Positioning: ")
(1306,TIFF_VARIABLE2)
(1307,flags & TIFFPRINT_STRIPS)
(1308,fprintf(fd, "  Transfer Function: ")
(1309,td_smaxsamplevalue)
(1310,)
(1311,fd)
(1312,fprintf(fd, "%sassoc-alpha", sep)
(1313,i)
(1314,case RESUNIT_INCH:)
(1315,td)
(1316,td_sampleformat)
(1317,td)
(1318,td->td_subifd[i])
(1319,value_count)
(1320," %g")
(1321,mem_alloc)
(1322,td)
(1323,s++)
(1324,fd)
(1325,l)
(1326,i)
(1327,1)
(1328,fd)
(1329,TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION)
(1330,td_photometric)
(1331,td_pagenumber)
(1332,)
(1333,fd)
(1334,break;)
(1335,l++)
(1336,TIFFTAG_DOTRANGE)
(1337,"  Rows/Strip: ")
(1338,2*i)
(1339,l)
(1340,case EXTRASAMPLE_UNSPECIFIED:)
(1341,td_samplesperpixel)
(1342,td->td_stripoffset)
(1343,(*tif->tif_tagmethods.printdir)
(1344,tif->tif_diroff)
(1345,fprintf(fd, "  Photometric Interpretation: ")
(1346,"(infinite)
(1347,&tif->tif_dir)
(1348,td_inknames)
(1349,"  Halftone Hints: light %u dark %u\\n")
(1350,td->td_pagenumber[0])
(1351,i)
(1352,unsigned long)
(1353,i)
(1354,(unsigned __int64)
(1355,FIELD_TILEDIMENSIONS)
(1356,i)
(1357,count)
(1358,max_chars)
(1359,td_planarconfig)
(1360,1L)
(1361,tif)
(1362,raw_data)
(1363,tif->tif_tagmethods)
(1364,td)
(1365,i = 0)
(1366,)
(1367,TIFFFieldSet(tif, FIELD_SUBIFD)
(1368,break;)
(1369,\'\\n\')
(1370,"/")
(1371,fprintf(fd, "(present)
(1372,fprintf(fd, "  Bits/Sample: %u\\n", td->td_bitspersample)
(1373,1)
(1374,break;)
(1375,break;)
(1376,fd)
(1377,fprintf(fd, "  Color Map: ")
(1378,default:)
(1379,td_ycbcrsubsampling)
(1380,0)
(1381,fprintf(fd, "signed integer\\n")
(1382,cp)
(1383,"%sunassoc-alpha")
(1384,td)
(1385,td->td_refblackwhite)
(1386,tif)
(1387,FIELD_ROWSPERSTRIP)
(1388,* c = TIFFFindCODEC(td->td_compression)
(1389,break;)
(1390,td->td_ycbcrsubsampling)
(1391,td_halftonehints)
(1392,case SAMPLEFORMAT_COMPLEXIEEEFP:)
(1393,TIFFGetField(tif, tag, &small_value_count, &raw_data)
(1394,mem_alloc = 1)
(1395,td->td_maxsamplevalue)
(1396,td->td_samplesperpixel)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
