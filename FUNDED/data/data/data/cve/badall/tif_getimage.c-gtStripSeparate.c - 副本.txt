-----label-----
1
-----code-----
static int
gtStripSeparate(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)
{
	TIFF* tif = img->tif;
	tileSeparateRoutine put = img->put.separate;
	unsigned char *buf = NULL;
	unsigned char *p0 = NULL, *p1 = NULL, *p2 = NULL, *pa = NULL;
	uint32 row, y, nrow, rowstoread;
	tmsize_t pos;
	tmsize_t scanline;
	uint32 rowsperstrip, offset_row;
	uint32 imagewidth = img->width;
	tmsize_t stripsize;
	tmsize_t bufsize;
	int32 fromskew, toskew;
	int alpha = img->alpha;
	int ret = 1, flip;
        uint16 colorchannels;

	stripsize = TIFFStripSize(tif);  
	bufsize = TIFFSafeMultiply(tmsize_t,alpha?4:3,stripsize);
	if (bufsize == 0) {
		TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Integer overflow in %s", "gtStripSeparate");
		return (0);
	}

	flip = setorientation(img);
	if (flip & FLIP_VERTICALLY) {
		y = h - 1;
		toskew = -(int32)(w + w);
	}
	else {
		y = 0;
		toskew = -(int32)(w - w);
	}

        switch( img->photometric )
        {
          case PHOTOMETRIC_MINISWHITE:
          case PHOTOMETRIC_MINISBLACK:
          case PHOTOMETRIC_PALETTE:
            colorchannels = 1;
            break;

          default:
            colorchannels = 3;
            break;
        }

	TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip);
	scanline = TIFFScanlineSize(tif);  
	fromskew = (w < imagewidth ? imagewidth - w : 0);
	for (row = 0; row < h; row += nrow)
	{
		rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;
		nrow = (row + rowstoread > h ? h - row : rowstoread);
		offset_row = row + img->row_offset;
                if( buf == NULL )
                {
                    if (_TIFFReadEncodedStripAndAllocBuffer(
                            tif, TIFFComputeStrip(tif, offset_row, 0),
                            (void**) &buf, bufsize,
                            ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)
                        && (buf == NULL || img->stoponerr))
                    {
                            ret = 0;
                            break;
                    }
                    p0 = buf;
                    if( colorchannels == 1 )
                    {
                        p2 = p1 = p0;
                        pa = (alpha?(p0+3*stripsize):NULL);
                    }
                    else
                    {
                        p1 = p0 + stripsize;
                        p2 = p1 + stripsize;
                        pa = (alpha?(p2+stripsize):NULL);
                    }
                }
		else if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 0),
		    p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)
		    && img->stoponerr)
		{
			ret = 0;
			break;
		}
		if (colorchannels > 1 
                    && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 1),
                                            p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)
		    && img->stoponerr)
		{
			ret = 0;
			break;
		}
		if (colorchannels > 1 
                    && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 2),
                                            p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)
		    && img->stoponerr)
		{
			ret = 0;
			break;
		}
		if (alpha)
		{
			if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),
			    pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)
			    && img->stoponerr)
			{
				ret = 0;
				break;
			}
		}

		pos = ((row + img->row_offset) % rowsperstrip) * scanline + \
			((tmsize_t) img->col_offset * img->samplesperpixel);
		(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, p0 + pos, p1 + pos,
		    p2 + pos, (alpha?(pa+pos):NULL));
		y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);
	}

	if (flip & FLIP_HORIZONTALLY) {
		uint32 line;

		for (line = 0; line < h; line++) {
			uint32 *left = raster + (line * w);
			uint32 *right = left + w - 1;

			while ( left < right ) {
				uint32 temp = *left;
				*left = *right;
				*right = temp;
				left++;
				right--;
			}
		}
	}

	_TIFFfree(buf);
	return (ret);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
27,42
27,43
27,44
27,45
27,46
27,47
27,48
27,49
27,50
27,51
27,52
27,53
27,54
27,55
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
56,57
56,58
56,59
59,60
60,61
62,63
63,64
63,65
63,66
63,67
63,68
65,66
65,67
65,68
68,69
69,70
71,72
71,73
71,74
74,75
75,76
77,78
77,79
77,80
80,81
81,82
83,84
83,85
83,86
86,87
87,88
89,90
90,91
90,92
90,93
90,94
90,95
91,92
93,94
95,96
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
114,117
115,116
117,118
119,120
121,122
122,123
122,124
123,124
125,126
125,127
127,128
128,129
128,130
129,130
132,133
133,134
133,135
134,135
136,137
138,139
139,140
139,141
140,141
142,143
144,145
145,146
145,147
145,148
146,147
148,149
150,151
152,153
153,154
153,155
155,156
155,157
157,158
158,159
158,160
159,160
162,163
163,164
163,165
163,166
165,166
165,167
167,168
169,170
171,172
172,173
172,174
173,174
175,176
177,178
178,179
178,180
179,180
181,182
181,183
182,183
184,185
186,187
187,188
187,189
188,189
190,191
190,192
190,193
190,194
191,192
193,194
195,196
195,197
195,198
196,197
200,201
202,203
202,204
203,204
203,205
204,205
207,208
207,209
208,209
209,210
209,211
209,212
209,213
209,214
210,211
212,213
212,214
213,214
216,217
216,218
217,218
219,220
223,224
224,225
226,227
227,228
227,229
228,229
230,231
230,232
231,232
233,234
235,236
235,237
235,238
236,237
236,238
237,238
239,240
241,242
241,243
242,243
243,244
243,245
244,245
246,247
246,248
247,248
250,251
251,252
251,253
252,253
254,255
255,256
255,257
256,257
257,258
259,260
259,261
260,261
262,263
264,265
264,266
265,266
266,267
266,268
267,268
270,271
271,272
271,273
272,273
274,275
275,276
275,277
276,277
277,278
279,280
279,281
280,281
282,283
284,285
284,286
285,286
285,287
286,287
289,290
289,291
289,292
289,293
289,294
289,295
289,296
289,297
290,291
291,292
293,294
294,295
296,297
297,298
299,300
300,301
300,302
301,302
306,307
307,308
307,309
308,309
312,313
313,314
313,315
313,316
313,317
314,315
316,317
318,319
320,321
321,322
323,324
324,325
324,326
325,326
327,328
327,329
328,329
330,331
332,333
333,334
333,335
334,335
336,337
337,338
337,339
337,340
338,339
338,340
339,340
341,342
343,344
343,345
344,345
346,347
349,350
349,351
349,352
349,353
350,351
351,352
351,353
352,353
355,356
355,357
356,357
358,359
360,361
360,362
361,362
363,364
365,366
365,367
365,368
365,369
365,370
365,371
365,372
365,373
365,374
365,375
366,367
367,368
367,369
368,369
370,371
370,372
371,372
373,374
373,375
374,375
375,376
375,377
376,377
378,379
378,380
379,380
382,383
384,385
385,386
385,387
386,387
388,389
389,390
389,391
389,392
390,391
390,392
391,392
391,393
392,393
394,395
396,397
398,399
398,400
399,400
401,402
403,404
405,406
406,407
406,408
407,408
409,410
409,411
410,411
412,413
412,414
413,414
416,417
416,418
416,419
417,418
417,419
418,419
420,421
422,423
422,424
422,425
423,424
423,425
424,425
424,426
425,426
425,427
426,427
426,428
426,429
426,430
426,431
426,432
427,428
429,430
431,432
431,433
431,434
431,435
432,433
434,435
436,437
439,440
439,441
440,441
440,442
442,443
442,444
445,446
446,447
448,449
450,451
450,452
451,452
452,453
452,454
453,454
453,455
454,455
455,456
455,457
456,457
458,459
458,460
459,460
462,463
464,465
466,467
468,469
468,470
469,470
470,471
472,473
474,475
475,476
475,477
476,477
476,478
477,478
479,480
481,482
481,483
482,483
485,486
485,487
486,487
487,488
487,489
488,489
492,493
493,494
493,495
494,495
496,497
498,499
498,500
498,501
499,500
499,501
500,501
503,504
503,505
504,505
505,506
505,507
506,507
508,509
508,510
509,510
511,512
513,514
514,515
514,516
515,516
517,518
518,519
518,520
518,521
519,520
521,522
522,523
522,524
523,524
525,526
525,527
527,528
529,530
531,532
531,533
531,534
532,533
533,534
533,535
534,535
536,537
536,538
537,538
539,540
541,542
542,543
542,544
543,544
545,546
545,547
546,547
548,549
550,551
551,552
551,553
552,553
554,555
555,556
555,557
555,558
556,557
558,559
559,560
559,561
560,561
562,563
564,565
566,567
566,568
567,568
567,569
568,569
568,570
569,570
569,571
569,572
569,573
569,574
570,571
572,573
574,575
574,576
574,577
574,578
575,576
577,578
579,580
582,583
584,585
584,586
585,586
586,587
586,588
587,588
587,589
588,589
589,590
589,591
590,591
592,593
592,594
593,594
596,597
598,599
600,601
602,603
602,604
603,604
604,605
606,607
608,609
608,610
609,610
612,613
612,614
613,614
614,615
614,616
615,616
619,620
619,621
620,621
620,622
621,622
621,623
622,623
622,624
623,624
626,627
626,628
627,628
627,629
627,630
627,631
627,632
628,629
630,631
632,633
632,634
632,635
632,636
633,634
635,636
637,638
640,641
642,643
642,644
643,644
644,645
644,646
645,646
645,647
646,647
647,648
647,649
648,649
650,651
650,652
651,652
654,655
656,657
658,659
660,661
660,662
661,662
662,663
664,665
666,667
666,668
667,668
670,671
670,672
671,672
672,673
672,674
673,674
677,678
677,679
678,679
678,680
679,680
679,681
680,681
680,682
681,682
684,685
684,686
685,686
685,687
685,688
685,689
685,690
686,687
688,689
690,691
690,692
690,693
690,694
691,692
693,694
695,696
698,699
700,701
700,702
701,702
702,703
702,704
703,704
703,705
704,705
705,706
705,707
706,707
708,709
708,710
709,710
712,713
714,715
716,717
718,719
718,720
719,720
720,721
722,723
724,725
724,726
725,726
728,729
728,730
729,730
730,731
730,732
731,732
735,736
735,737
736,737
738,739
739,740
739,741
740,741
740,742
741,742
741,743
742,743
742,744
742,745
742,746
742,747
743,744
745,746
747,748
747,749
747,750
747,751
748,749
750,751
752,753
754,755
756,757
758,759
758,760
759,760
760,761
760,762
761,762
761,763
762,763
763,764
763,765
764,765
766,767
766,768
767,768
770,771
772,773
774,775
776,777
776,778
777,778
778,779
780,781
782,783
782,784
783,784
786,787
786,788
787,788
788,789
788,790
789,790
793,794
794,795
794,796
795,796
797,798
797,799
798,799
798,800
799,800
800,801
800,802
801,802
802,803
802,804
803,804
805,806
805,807
806,807
809,810
811,812
813,814
814,815
814,816
815,816
815,817
816,817
816,818
817,818
820,821
820,822
821,822
824,825
824,826
825,826
828,829
829,830
829,831
829,832
829,833
829,834
829,835
829,836
829,837
829,838
829,839
829,840
829,841
829,842
830,831
831,832
832,833
834,835
836,837
836,838
837,838
839,840
839,841
840,841
842,843
845,846
847,848
849,850
851,852
853,854
855,856
855,857
856,857
858,859
860,861
860,862
861,862
863,864
865,866
865,867
866,867
868,869
870,871
871,872
871,873
871,874
872,873
874,875
875,876
875,877
876,877
878,879
880,881
882,883
883,884
883,885
884,885
886,887
887,888
887,889
887,890
888,889
889,890
889,891
890,891
892,893
894,895
895,896
895,897
896,897
896,898
897,898
900,901
902,903
902,904
903,904
903,905
904,905
907,908
909,910
909,911
910,911
910,912
911,912
913,914
915,916
915,917
916,917
917,918
917,919
918,919
920,921
922,923
922,924
922,925
922,926
923,924
924,925
924,926
925,926
928,929
928,930
929,930
931,932
933,934
934,935
936,937
936,938
936,939
937,938
938,939
938,940
939,940
941,942
941,943
941,944
944,945
945,946
945,947
946,947
948,949
949,950
949,951
950,951
952,953
954,955
955,956
955,957
956,957
958,959
958,960
958,961
961,962
962,963
962,964
963,964
963,965
964,965
966,967
969,970
969,971
970,971
970,972
971,972
973,974
975,976
975,977
975,978
975,979
975,980
976,977
977,978
977,979
978,979
980,981
980,982
982,983
983,984
984,985
986,987
987,988
987,989
988,989
989,990
991,992
992,993
994,995
995,996
995,997
996,997
997,998
999,1000
1001,1002
1002,1003
1003,1004
1005,1006
1006,1007
1007,1008
1009,1010
1010,1011
1010,1012
1011,1012
1013,1014
1015,1016
1016,1017
1017,1018
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,31,33,34,38,39,43,45,50,51,52,55,57,58,61,64,66,67,70,72,73,76,78,79,82,84,85,88,92,94,96,98,100,104,106,110,112,116,118,120,124,126,130,131,135,137,141,143,147,149,151,154,156,160,161,164,166,168,170,174,176,180,183,185,189,192,194,197,198,199,201,205,206,211,214,215,218,220,221,222,225,229,232,234,238,240,245,248,249,253,258,261,263,268,269,273,278,281,283,287,288,292,295,298,302,303,304,305,309,310,311,315,317,319,322,326,329,331,335,340,342,345,347,348,353,354,357,359,362,364,369,372,377,380,381,383,387,393,395,397,400,402,404,408,411,414,415,419,421,428,430,433,435,437,438,441,443,444,447,449,457,460,461,463,465,467,471,473,478,480,483,484,489,490,491,495,497,501,502,507,510,512,516,520,524,526,528,530,535,538,540,544,547,549,553,557,561,563,565,571,573,576,578,580,581,583,591,594,595,597,599,601,605,607,610,611,616,617,618,624,625,629,631,634,636,638,639,641,649,652,653,655,657,659,663,665,668,669,674,675,676,682,683,687,689,692,694,696,697,699,707,710,711,713,715,717,721,723,726,727,732,733,734,737,744,746,749,751,753,755,757,765,768,769,771,773,775,779,781,784,785,790,791,792,796,804,807,808,810,812,818,819,822,823,826,827,833,835,838,841,843,844,846,848,850,852,854,857,859,862,864,867,869,873,877,879,881,885,891,893,898,899,901,905,906,908,912,914,919,921,926,927,930,932,935,940,942,943,947,951,953,957,959,960,965,967,968,972,974,979,981,985,990,993,998,1000,1004,1008,1012,1014,1018
-----computeFrom-----
178,179
178,180
187,188
187,189
203,204
203,205
227,228
227,229
236,237
236,238
243,244
243,245
246,247
246,248
251,252
251,253
259,260
259,261
266,267
266,268
271,272
271,273
279,280
279,281
300,301
300,302
307,308
307,309
324,325
324,326
333,334
333,335
338,339
338,340
343,344
343,345
351,352
351,353
355,356
355,357
360,361
360,362
367,368
367,369
370,371
370,372
373,374
373,375
375,376
375,377
385,386
385,387
390,391
390,392
391,392
391,393
398,399
398,400
406,407
406,408
409,410
409,411
417,418
417,419
424,425
424,426
425,426
425,427
450,451
450,452
452,453
452,454
453,454
453,455
455,456
455,457
475,476
475,477
476,477
476,478
487,488
487,489
493,494
493,495
499,500
499,501
505,506
505,507
508,509
508,510
514,515
514,516
522,523
522,524
525,526
525,527
533,534
533,535
536,537
536,538
542,543
542,544
545,546
545,547
551,552
551,553
559,560
559,561
567,568
567,569
568,569
568,570
584,585
584,586
586,587
586,588
587,588
587,589
589,590
589,591
614,615
614,616
620,621
620,622
621,622
621,623
622,623
622,624
626,627
626,628
642,643
642,644
644,645
644,646
645,646
645,647
647,648
647,649
672,673
672,674
678,679
678,680
679,680
679,681
680,681
680,682
684,685
684,686
700,701
700,702
702,703
702,704
703,704
703,705
705,706
705,707
730,731
730,732
740,741
740,742
741,742
741,743
758,759
758,760
760,761
760,762
761,762
761,763
763,764
763,765
788,789
788,790
794,795
794,796
797,798
797,799
798,799
798,800
800,801
800,802
802,803
802,804
814,815
814,816
836,837
836,838
839,840
839,841
855,856
855,857
860,861
860,862
865,866
865,867
875,876
875,877
883,884
883,885
889,890
889,891
910,911
910,912
924,925
924,926
928,929
928,930
945,946
945,947
949,950
949,951
962,963
962,964
963,964
963,965
970,971
970,972
987,988
987,989
995,996
995,997
-----guardedBy-----
419,497
421,565
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;UnaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ConditionalExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static intgtStripSeparate(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h){	TIFF* tif = img->tif;	tileSeparateRoutine put = img->put.separate;	unsigned char *buf = NULL;	unsigned char *p0 = NULL, *p1 = NULL, *p2 = NULL, *pa = NULL;	uint32 row, y, nrow, rowstoread;	tmsize_t pos;	tmsize_t scanline;	uint32 rowsperstrip, offset_row;	uint32 imagewidth = img->width;	tmsize_t stripsize;	tmsize_t bufsize;	int32 fromskew, toskew;	int alpha = img->alpha;	int ret = 1, flip;        uint16 colorchannels;	stripsize = TIFFStripSize(tif);  	bufsize = TIFFSafeMultiply(tmsize_t,alpha?4:3,stripsize);	if (bufsize == 0) {		TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Integer overflow in %s", "gtStripSeparate");		return (0);	}	flip = setorientation(img);	if (flip & FLIP_VERTICALLY) {		y = h - 1;		toskew = -(int32)(w + w);	}	else {		y = 0;		toskew = -(int32)(w - w);	}        switch( img->photometric )        {          case PHOTOMETRIC_MINISWHITE:          case PHOTOMETRIC_MINISBLACK:          case PHOTOMETRIC_PALETTE:            colorchannels = 1;            break;          default:            colorchannels = 3;            break;        }	TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip);	scanline = TIFFScanlineSize(tif);  	fromskew = (w < imagewidth ? imagewidth - w : 0);	for (row = 0; row < h; row += nrow)	{		rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;		nrow = (row + rowstoread > h ? h - row : rowstoread);		offset_row = row + img->row_offset;                if( buf == NULL )                {                    if (_TIFFReadEncodedStripAndAllocBuffer(                            tif, TIFFComputeStrip(tif, offset_row, 0),                            (void**) &buf, bufsize,                            ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)                        && (buf == NULL || img->stoponerr))                    {                            ret = 0;                            break;                    }                    p0 = buf;                    if( colorchannels == 1 )                    {                        p2 = p1 = p0;                        pa = (alpha?(p0+3*stripsize):NULL);                    }                    else                    {                        p1 = p0 + stripsize;                        p2 = p1 + stripsize;                        pa = (alpha?(p2+stripsize):NULL);                    }                }		else if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 0),		    p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 1),                                            p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 2),                                            p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (alpha)		{			if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),			    pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)			    && img->stoponerr)			{				ret = 0;				break;			}		}		pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel);		(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, p0 + pos, p1 + pos,		    p2 + pos, (alpha?(pa+pos):NULL));		y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);	}	if (flip & FLIP_HORIZONTALLY) {		uint32 line;		for (line = 0; line < h; line++) {			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}	}	_TIFFfree(buf);	return (ret);}
static int
gtStripSeparate(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)
gtStripSeparate
TIFFRGBAImage* img
TIFFRGBAImage
TIFFRGBAImage
* img
*
img
uint32* raster
uint32
uint32
* raster
*
raster
uint32 w
uint32
uint32
w
w
uint32 h
uint32
uint32
h
h
{	TIFF* tif = img->tif;	tileSeparateRoutine put = img->put.separate;	unsigned char *buf = NULL;	unsigned char *p0 = NULL, *p1 = NULL, *p2 = NULL, *pa = NULL;	uint32 row, y, nrow, rowstoread;	tmsize_t pos;	tmsize_t scanline;	uint32 rowsperstrip, offset_row;	uint32 imagewidth = img->width;	tmsize_t stripsize;	tmsize_t bufsize;	int32 fromskew, toskew;	int alpha = img->alpha;	int ret = 1, flip;        uint16 colorchannels;	stripsize = TIFFStripSize(tif);  	bufsize = TIFFSafeMultiply(tmsize_t,alpha?4:3,stripsize);	if (bufsize == 0) {		TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Integer overflow in %s", "gtStripSeparate");		return (0);	}	flip = setorientation(img);	if (flip & FLIP_VERTICALLY) {		y = h - 1;		toskew = -(int32)(w + w);	}	else {		y = 0;		toskew = -(int32)(w - w);	}        switch( img->photometric )        {          case PHOTOMETRIC_MINISWHITE:          case PHOTOMETRIC_MINISBLACK:          case PHOTOMETRIC_PALETTE:            colorchannels = 1;            break;          default:            colorchannels = 3;            break;        }	TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip);	scanline = TIFFScanlineSize(tif);  	fromskew = (w < imagewidth ? imagewidth - w : 0);	for (row = 0; row < h; row += nrow)	{		rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;		nrow = (row + rowstoread > h ? h - row : rowstoread);		offset_row = row + img->row_offset;                if( buf == NULL )                {                    if (_TIFFReadEncodedStripAndAllocBuffer(                            tif, TIFFComputeStrip(tif, offset_row, 0),                            (void**) &buf, bufsize,                            ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)                        && (buf == NULL || img->stoponerr))                    {                            ret = 0;                            break;                    }                    p0 = buf;                    if( colorchannels == 1 )                    {                        p2 = p1 = p0;                        pa = (alpha?(p0+3*stripsize):NULL);                    }                    else                    {                        p1 = p0 + stripsize;                        p2 = p1 + stripsize;                        pa = (alpha?(p2+stripsize):NULL);                    }                }		else if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 0),		    p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 1),                                            p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 2),                                            p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (alpha)		{			if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),			    pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)			    && img->stoponerr)			{				ret = 0;				break;			}		}		pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel);		(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, p0 + pos, p1 + pos,		    p2 + pos, (alpha?(pa+pos):NULL));		y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);	}	if (flip & FLIP_HORIZONTALLY) {		uint32 line;		for (line = 0; line < h; line++) {			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}	}	_TIFFfree(buf);	return (ret);}
TIFF* tif = img->tif;
TIFF* tif = img->tif;
TIFF
TIFF
* tif = img->tif
*
tif
= img->tif
img->tif
img
img
tif
tileSeparateRoutine put = img->put.separate;
tileSeparateRoutine put = img->put.separate;
tileSeparateRoutine
tileSeparateRoutine
put = img->put.separate
put
= img->put.separate
img->put.separate
img->put
img
img
put
separate
unsigned char *buf = NULL;
unsigned char *buf = NULL;
unsigned char
*buf = NULL
*
buf
= NULL
NULL
NULL
unsigned char *p0 = NULL, *p1 = NULL, *p2 = NULL, *pa = NULL;
unsigned char *p0 = NULL, *p1 = NULL, *p2 = NULL, *pa = NULL;
unsigned char
*p0 = NULL
*
p0
= NULL
NULL
NULL
*p1 = NULL
*
p1
= NULL
NULL
NULL
*p2 = NULL
*
p2
= NULL
NULL
NULL
*pa = NULL
*
pa
= NULL
NULL
NULL
uint32 row, y, nrow, rowstoread;
uint32 row, y, nrow, rowstoread;
uint32
uint32
row
row
y
y
nrow
nrow
rowstoread
rowstoread
tmsize_t pos;
tmsize_t pos;
tmsize_t
tmsize_t
pos
pos
tmsize_t scanline;
tmsize_t scanline;
tmsize_t
tmsize_t
scanline
scanline
uint32 rowsperstrip, offset_row;
uint32 rowsperstrip, offset_row;
uint32
uint32
rowsperstrip
rowsperstrip
offset_row
offset_row
uint32 imagewidth = img->width;
uint32 imagewidth = img->width;
uint32
uint32
imagewidth = img->width
imagewidth
= img->width
img->width
img
img
width
tmsize_t stripsize;
tmsize_t stripsize;
tmsize_t
tmsize_t
stripsize
stripsize
tmsize_t bufsize;
tmsize_t bufsize;
tmsize_t
tmsize_t
bufsize
bufsize
int32 fromskew, toskew;
int32 fromskew, toskew;
int32
int32
fromskew
fromskew
toskew
toskew
int alpha = img->alpha;
int alpha = img->alpha;
int
alpha = img->alpha
alpha
= img->alpha
img->alpha
img
img
alpha
int ret = 1, flip;
int ret = 1, flip;
int
ret = 1
ret
= 1
1
flip
flip
uint16 colorchannels;
uint16 colorchannels;
uint16
uint16
colorchannels
colorchannels
stripsize = TIFFStripSize(tif);
stripsize = TIFFStripSize(tif)
stripsize
stripsize
TIFFStripSize(tif)
TIFFStripSize
TIFFStripSize
tif
tif
bufsize = TIFFSafeMultiply(tmsize_t,alpha?4:3,stripsize);
bufsize = TIFFSafeMultiply(tmsize_t,alpha?4:3,stripsize)
bufsize
bufsize
TIFFSafeMultiply(tmsize_t,alpha?4:3,stripsize)
TIFFSafeMultiply
TIFFSafeMultiply
tmsize_t
tmsize_t
alpha?4:3
alpha
alpha
4
3
stripsize
stripsize
if (bufsize == 0) {		TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Integer overflow in %s", "gtStripSeparate");		return (0);	}
bufsize == 0
bufsize
bufsize
0
{		TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Integer overflow in %s", "gtStripSeparate");		return (0);	}
TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Integer overflow in %s", "gtStripSeparate");
TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Integer overflow in %s", "gtStripSeparate")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
TIFFFileName(tif)
TIFFFileName
TIFFFileName
tif
tif
"Integer overflow in %s"
"gtStripSeparate"
return (0);
(0)
0
flip = setorientation(img);
flip = setorientation(img)
flip
flip
setorientation(img)
setorientation
setorientation
img
img
if (flip & FLIP_VERTICALLY) {		y = h - 1;		toskew = -(int32)(w + w);	}	else {		y = 0;		toskew = -(int32)(w - w);	}
flip & FLIP_VERTICALLY
flip
flip
FLIP_VERTICALLY
FLIP_VERTICALLY
{		y = h - 1;		toskew = -(int32)(w + w);	}
y = h - 1;
y = h - 1
y
y
h - 1
h
h
1
toskew = -(int32)(w + w);
toskew = -(int32)(w + w)
toskew
toskew
-(int32)(w + w)
(int32)(w + w)
(int32)
int32
int32
w + w
w
w
w
w
{		y = 0;		toskew = -(int32)(w - w);	}
y = 0;
y = 0
y
y
0
toskew = -(int32)(w - w);
toskew = -(int32)(w - w)
toskew
toskew
-(int32)(w - w)
(int32)(w - w)
(int32)
int32
int32
w - w
w
w
w
w
switch( img->photometric )        {          case PHOTOMETRIC_MINISWHITE:          case PHOTOMETRIC_MINISBLACK:          case PHOTOMETRIC_PALETTE:            colorchannels = 1;            break;          default:            colorchannels = 3;            break;        }
img->photometric
img
img
photometric
{          case PHOTOMETRIC_MINISWHITE:          case PHOTOMETRIC_MINISBLACK:          case PHOTOMETRIC_PALETTE:            colorchannels = 1;            break;          default:            colorchannels = 3;            break;        }
case PHOTOMETRIC_MINISWHITE:
PHOTOMETRIC_MINISWHITE
PHOTOMETRIC_MINISWHITE
case PHOTOMETRIC_MINISBLACK:
PHOTOMETRIC_MINISBLACK
PHOTOMETRIC_MINISBLACK
case PHOTOMETRIC_PALETTE:
PHOTOMETRIC_PALETTE
PHOTOMETRIC_PALETTE
colorchannels = 1;
colorchannels = 1
colorchannels
colorchannels
1
break;
default:
colorchannels = 3;
colorchannels = 3
colorchannels
colorchannels
3
break;
TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip);
TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip)
TIFFGetFieldDefaulted
TIFFGetFieldDefaulted
tif
tif
TIFFTAG_ROWSPERSTRIP
TIFFTAG_ROWSPERSTRIP
&rowsperstrip
rowsperstrip
rowsperstrip
scanline = TIFFScanlineSize(tif);
scanline = TIFFScanlineSize(tif)
scanline
scanline
TIFFScanlineSize(tif)
TIFFScanlineSize
TIFFScanlineSize
tif
tif
fromskew = (w < imagewidth ? imagewidth - w : 0);
fromskew = (w < imagewidth ? imagewidth - w : 0)
fromskew
fromskew
(w < imagewidth ? imagewidth - w : 0)
w < imagewidth ? imagewidth - w : 0
w < imagewidth
w
w
imagewidth
imagewidth
imagewidth - w
imagewidth
imagewidth
w
w
0
for (row = 0; row < h; row += nrow)	{		rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;		nrow = (row + rowstoread > h ? h - row : rowstoread);		offset_row = row + img->row_offset;                if( buf == NULL )                {                    if (_TIFFReadEncodedStripAndAllocBuffer(                            tif, TIFFComputeStrip(tif, offset_row, 0),                            (void**) &buf, bufsize,                            ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)                        && (buf == NULL || img->stoponerr))                    {                            ret = 0;                            break;                    }                    p0 = buf;                    if( colorchannels == 1 )                    {                        p2 = p1 = p0;                        pa = (alpha?(p0+3*stripsize):NULL);                    }                    else                    {                        p1 = p0 + stripsize;                        p2 = p1 + stripsize;                        pa = (alpha?(p2+stripsize):NULL);                    }                }		else if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 0),		    p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 1),                                            p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 2),                                            p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (alpha)		{			if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),			    pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)			    && img->stoponerr)			{				ret = 0;				break;			}		}		pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel);		(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, p0 + pos, p1 + pos,		    p2 + pos, (alpha?(pa+pos):NULL));		y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);	}
row = 0;
row = 0
row
row
0
row < h
row
row
h
h
row += nrow
row
row
nrow
nrow
{		rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;		nrow = (row + rowstoread > h ? h - row : rowstoread);		offset_row = row + img->row_offset;                if( buf == NULL )                {                    if (_TIFFReadEncodedStripAndAllocBuffer(                            tif, TIFFComputeStrip(tif, offset_row, 0),                            (void**) &buf, bufsize,                            ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)                        && (buf == NULL || img->stoponerr))                    {                            ret = 0;                            break;                    }                    p0 = buf;                    if( colorchannels == 1 )                    {                        p2 = p1 = p0;                        pa = (alpha?(p0+3*stripsize):NULL);                    }                    else                    {                        p1 = p0 + stripsize;                        p2 = p1 + stripsize;                        pa = (alpha?(p2+stripsize):NULL);                    }                }		else if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 0),		    p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 1),                                            p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 2),                                            p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}		if (alpha)		{			if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),			    pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)			    && img->stoponerr)			{				ret = 0;				break;			}		}		pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel);		(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, p0 + pos, p1 + pos,		    p2 + pos, (alpha?(pa+pos):NULL));		y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);	}
rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;
rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip
rowstoread
rowstoread
rowsperstrip - (row + img->row_offset) % rowsperstrip
rowsperstrip
rowsperstrip
(row + img->row_offset) % rowsperstrip
(row + img->row_offset)
row + img->row_offset
row
row
img->row_offset
img
img
row_offset
rowsperstrip
rowsperstrip
nrow = (row + rowstoread > h ? h - row : rowstoread);
nrow = (row + rowstoread > h ? h - row : rowstoread)
nrow
nrow
(row + rowstoread > h ? h - row : rowstoread)
row + rowstoread > h ? h - row : rowstoread
row + rowstoread > h
row + rowstoread
row
row
rowstoread
rowstoread
h
h
h - row
h
h
row
row
rowstoread
rowstoread
offset_row = row + img->row_offset;
offset_row = row + img->row_offset
offset_row
offset_row
row + img->row_offset
row
row
img->row_offset
img
img
row_offset
if( buf == NULL )                {                    if (_TIFFReadEncodedStripAndAllocBuffer(                            tif, TIFFComputeStrip(tif, offset_row, 0),                            (void**) &buf, bufsize,                            ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)                        && (buf == NULL || img->stoponerr))                    {                            ret = 0;                            break;                    }                    p0 = buf;                    if( colorchannels == 1 )                    {                        p2 = p1 = p0;                        pa = (alpha?(p0+3*stripsize):NULL);                    }                    else                    {                        p1 = p0 + stripsize;                        p2 = p1 + stripsize;                        pa = (alpha?(p2+stripsize):NULL);                    }                }		else if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 0),		    p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}
buf == NULL
buf
buf
NULL
NULL
{                    if (_TIFFReadEncodedStripAndAllocBuffer(                            tif, TIFFComputeStrip(tif, offset_row, 0),                            (void**) &buf, bufsize,                            ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)                        && (buf == NULL || img->stoponerr))                    {                            ret = 0;                            break;                    }                    p0 = buf;                    if( colorchannels == 1 )                    {                        p2 = p1 = p0;                        pa = (alpha?(p0+3*stripsize):NULL);                    }                    else                    {                        p1 = p0 + stripsize;                        p2 = p1 + stripsize;                        pa = (alpha?(p2+stripsize):NULL);                    }                }
if (_TIFFReadEncodedStripAndAllocBuffer(                            tif, TIFFComputeStrip(tif, offset_row, 0),                            (void**) &buf, bufsize,                            ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)                        && (buf == NULL || img->stoponerr))                    {                            ret = 0;                            break;                    }
_TIFFReadEncodedStripAndAllocBuffer(                            tif, TIFFComputeStrip(tif, offset_row, 0),                            (void**) &buf, bufsize,                            ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)                        && (buf == NULL || img->stoponerr)
_TIFFReadEncodedStripAndAllocBuffer(                            tif, TIFFComputeStrip(tif, offset_row, 0),                            (void**) &buf, bufsize,                            ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)
_TIFFReadEncodedStripAndAllocBuffer(                            tif, TIFFComputeStrip(tif, offset_row, 0),                            (void**) &buf, bufsize,                            ((row + img->row_offset)%rowsperstrip + nrow) * scanline)
_TIFFReadEncodedStripAndAllocBuffer
_TIFFReadEncodedStripAndAllocBuffer
tif
tif
TIFFComputeStrip(tif, offset_row, 0)
TIFFComputeStrip
TIFFComputeStrip
tif
tif
offset_row
offset_row
0
(void**) &buf
void**
void
**
*
*
&buf
buf
buf
bufsize
bufsize
((row + img->row_offset)%rowsperstrip + nrow) * scanline
((row + img->row_offset)%rowsperstrip + nrow)
(row + img->row_offset)%rowsperstrip + nrow
(row + img->row_offset)%rowsperstrip
(row + img->row_offset)
row + img->row_offset
row
row
img->row_offset
img
img
row_offset
rowsperstrip
rowsperstrip
nrow
nrow
scanline
scanline
(tmsize_t)(-1)
(tmsize_t)
tmsize_t
tmsize_t
-1
1
(buf == NULL || img->stoponerr)
buf == NULL || img->stoponerr
buf == NULL
buf
buf
NULL
NULL
img->stoponerr
img
img
stoponerr
{                            ret = 0;                            break;                    }
ret = 0;
ret = 0
ret
ret
0
break;
p0 = buf;
p0 = buf
p0
p0
buf
buf
if( colorchannels == 1 )                    {                        p2 = p1 = p0;                        pa = (alpha?(p0+3*stripsize):NULL);                    }                    else                    {                        p1 = p0 + stripsize;                        p2 = p1 + stripsize;                        pa = (alpha?(p2+stripsize):NULL);                    }
colorchannels == 1
colorchannels
colorchannels
1
{                        p2 = p1 = p0;                        pa = (alpha?(p0+3*stripsize):NULL);                    }
p2 = p1 = p0;
p2 = p1 = p0
p2
p2
p1 = p0
p1
p1
p0
p0
pa = (alpha?(p0+3*stripsize):NULL);
pa = (alpha?(p0+3*stripsize):NULL)
pa
pa
(alpha?(p0+3*stripsize):NULL)
alpha?(p0+3*stripsize):NULL
alpha
alpha
(p0+3*stripsize)
p0+3*stripsize
p0
p0
3*stripsize
3
stripsize
stripsize
NULL
NULL
{                        p1 = p0 + stripsize;                        p2 = p1 + stripsize;                        pa = (alpha?(p2+stripsize):NULL);                    }
p1 = p0 + stripsize;
p1 = p0 + stripsize
p1
p1
p0 + stripsize
p0
p0
stripsize
stripsize
p2 = p1 + stripsize;
p2 = p1 + stripsize
p2
p2
p1 + stripsize
p1
p1
stripsize
stripsize
pa = (alpha?(p2+stripsize):NULL);
pa = (alpha?(p2+stripsize):NULL)
pa
pa
(alpha?(p2+stripsize):NULL)
alpha?(p2+stripsize):NULL
alpha
alpha
(p2+stripsize)
p2+stripsize
p2
p2
stripsize
stripsize
NULL
NULL
if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 0),		    p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}
TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 0),		    p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)		    && img->stoponerr
TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 0),		    p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)
TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 0),		    p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)
TIFFReadEncodedStrip
TIFFReadEncodedStrip
tif
tif
TIFFComputeStrip(tif, offset_row, 0)
TIFFComputeStrip
TIFFComputeStrip
tif
tif
offset_row
offset_row
0
p0
p0
((row + img->row_offset)%rowsperstrip + nrow) * scanline
((row + img->row_offset)%rowsperstrip + nrow)
(row + img->row_offset)%rowsperstrip + nrow
(row + img->row_offset)%rowsperstrip
(row + img->row_offset)
row + img->row_offset
row
row
img->row_offset
img
img
row_offset
rowsperstrip
rowsperstrip
nrow
nrow
scanline
scanline
(tmsize_t)(-1)
(tmsize_t)
tmsize_t
tmsize_t
-1
1
img->stoponerr
img
img
stoponerr
{			ret = 0;			break;		}
ret = 0;
ret = 0
ret
ret
0
break;
if (colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 1),                                            p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}
colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 1),                                            p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr
colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 1),                                            p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)
colorchannels > 1
colorchannels
colorchannels
1
TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 1),                                            p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)
TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 1),                                            p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)
TIFFReadEncodedStrip
TIFFReadEncodedStrip
tif
tif
TIFFComputeStrip(tif, offset_row, 1)
TIFFComputeStrip
TIFFComputeStrip
tif
tif
offset_row
offset_row
1
p1
p1
((row + img->row_offset)%rowsperstrip + nrow) * scanline
((row + img->row_offset)%rowsperstrip + nrow)
(row + img->row_offset)%rowsperstrip + nrow
(row + img->row_offset)%rowsperstrip
(row + img->row_offset)
row + img->row_offset
row
row
img->row_offset
img
img
row_offset
rowsperstrip
rowsperstrip
nrow
nrow
scanline
scanline
(tmsize_t)(-1)
(tmsize_t)
tmsize_t
tmsize_t
-1
1
img->stoponerr
img
img
stoponerr
{			ret = 0;			break;		}
ret = 0;
ret = 0
ret
ret
0
break;
if (colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 2),                                            p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr)		{			ret = 0;			break;		}
colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 2),                                            p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)		    && img->stoponerr
colorchannels > 1                     && TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 2),                                            p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)
colorchannels > 1
colorchannels
colorchannels
1
TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 2),                                            p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)
TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 2),                                            p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)
TIFFReadEncodedStrip
TIFFReadEncodedStrip
tif
tif
TIFFComputeStrip(tif, offset_row, 2)
TIFFComputeStrip
TIFFComputeStrip
tif
tif
offset_row
offset_row
2
p2
p2
((row + img->row_offset)%rowsperstrip + nrow) * scanline
((row + img->row_offset)%rowsperstrip + nrow)
(row + img->row_offset)%rowsperstrip + nrow
(row + img->row_offset)%rowsperstrip
(row + img->row_offset)
row + img->row_offset
row
row
img->row_offset
img
img
row_offset
rowsperstrip
rowsperstrip
nrow
nrow
scanline
scanline
(tmsize_t)(-1)
(tmsize_t)
tmsize_t
tmsize_t
-1
1
img->stoponerr
img
img
stoponerr
{			ret = 0;			break;		}
ret = 0;
ret = 0
ret
ret
0
break;
if (alpha)		{			if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),			    pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)			    && img->stoponerr)			{				ret = 0;				break;			}		}
alpha
alpha
{			if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),			    pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)			    && img->stoponerr)			{				ret = 0;				break;			}		}
if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),			    pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)			    && img->stoponerr)			{				ret = 0;				break;			}
TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),			    pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)			    && img->stoponerr
TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),			    pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)
TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),			    pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)
TIFFReadEncodedStrip
TIFFReadEncodedStrip
tif
tif
TIFFComputeStrip(tif, offset_row, colorchannels)
TIFFComputeStrip
TIFFComputeStrip
tif
tif
offset_row
offset_row
colorchannels
colorchannels
pa
pa
((row + img->row_offset)%rowsperstrip + nrow) * scanline
((row + img->row_offset)%rowsperstrip + nrow)
(row + img->row_offset)%rowsperstrip + nrow
(row + img->row_offset)%rowsperstrip
(row + img->row_offset)
row + img->row_offset
row
row
img->row_offset
img
img
row_offset
rowsperstrip
rowsperstrip
nrow
nrow
scanline
scanline
(tmsize_t)(-1)
(tmsize_t)
tmsize_t
tmsize_t
-1
1
img->stoponerr
img
img
stoponerr
{				ret = 0;				break;			}
ret = 0;
ret = 0
ret
ret
0
break;
pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel);
pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel)
pos
pos
((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel)
((row + img->row_offset) % rowsperstrip) * scanline
((row + img->row_offset) % rowsperstrip)
(row + img->row_offset) % rowsperstrip
(row + img->row_offset)
row + img->row_offset
row
row
img->row_offset
img
img
row_offset
rowsperstrip
rowsperstrip
scanline
scanline
((tmsize_t) img->col_offset * img->samplesperpixel)
(tmsize_t) img->col_offset * img->samplesperpixel
(tmsize_t) img->col_offset
tmsize_t
tmsize_t
tmsize_t

img->col_offset
img
img
col_offset
img->samplesperpixel
img
img
samplesperpixel
(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, p0 + pos, p1 + pos,		    p2 + pos, (alpha?(pa+pos):NULL));
(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, p0 + pos, p1 + pos,		    p2 + pos, (alpha?(pa+pos):NULL))
(*put)
*put
put
put
img
img
raster+y*w
raster
raster
y*w
y
y
w
w
0
y
y
w
w
nrow
nrow
fromskew
fromskew
toskew
toskew
p0 + pos
p0
p0
pos
pos
p1 + pos
p1
p1
pos
pos
p2 + pos
p2
p2
pos
pos
(alpha?(pa+pos):NULL)
alpha?(pa+pos):NULL
alpha
alpha
(pa+pos)
pa+pos
pa
pa
pos
pos
NULL
NULL
y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);
y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow)
y
y
((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow)
(flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow
(flip & FLIP_VERTICALLY)
flip & FLIP_VERTICALLY
flip
flip
FLIP_VERTICALLY
FLIP_VERTICALLY
-(int32) nrow
(int32) nrow
int32
int32
int32

nrow
nrow
(int32) nrow
int32
int32
int32

nrow
nrow
if (flip & FLIP_HORIZONTALLY) {		uint32 line;		for (line = 0; line < h; line++) {			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}	}
flip & FLIP_HORIZONTALLY
flip
flip
FLIP_HORIZONTALLY
FLIP_HORIZONTALLY
{		uint32 line;		for (line = 0; line < h; line++) {			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}	}
uint32 line;
uint32 line;
uint32
uint32
line
line
for (line = 0; line < h; line++) {			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}
line = 0;
line = 0
line
line
0
line < h
line
line
h
h
line++
line
line
{			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}
uint32 *left = raster + (line * w);
uint32 *left = raster + (line * w);
uint32
uint32
*left = raster + (line * w)
*
left
= raster + (line * w)
raster + (line * w)
raster
raster
(line * w)
line * w
line
line
w
w
uint32 *right = left + w - 1;
uint32 *right = left + w - 1;
uint32
uint32
*right = left + w - 1
*
right
= left + w - 1
left + w - 1
left + w
left
left
w
w
1
while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}
left < right
left
left
right
right
{				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}
uint32 temp = *left;
uint32 temp = *left;
uint32
uint32
temp = *left
temp
= *left
*left
left
left
*left = *right;
*left = *right
*left
left
left
*right
right
right
*right = temp;
*right = temp
*right
right
right
temp
temp
left++;
left++
left
left
right--;
right--
right
right
_TIFFfree(buf);
_TIFFfree(buf)
_TIFFfree
_TIFFfree
buf
buf
return (ret);
(ret)
ret
ret
-----joern-----
(169,16,0)
(66,60,0)
(119,227,0)
(152,304,0)
(34,253,0)
(246,91,0)
(246,97,0)
(143,72,0)
(78,288,0)
(230,58,0)
(59,273,0)
(246,292,0)
(257,95,0)
(1,16,0)
(318,17,0)
(9,10,0)
(250,203,0)
(161,102,0)
(172,226,0)
(53,113,0)
(214,220,0)
(46,273,0)
(0,226,0)
(128,205,0)
(322,231,0)
(314,1,0)
(69,287,0)
(115,132,0)
(55,134,0)
(84,35,0)
(5,287,0)
(178,226,0)
(122,1,0)
(207,207,0)
(268,99,0)
(72,143,0)
(6,226,0)
(13,60,0)
(1,34,0)
(99,72,0)
(119,308,0)
(98,267,0)
(158,190,0)
(262,303,0)
(126,299,0)
(120,226,0)
(35,158,0)
(132,115,0)
(287,1,0)
(0,307,0)
(313,111,0)
(185,39,0)
(278,17,0)
(138,60,0)
(130,226,0)
(277,0,0)
(17,278,0)
(16,278,0)
(11,166,0)
(19,235,0)
(115,274,0)
(197,133,0)
(175,241,0)
(64,78,0)
(277,4,0)
(1,26,0)
(201,95,0)
(245,138,0)
(159,126,0)
(133,197,0)
(269,108,0)
(150,235,0)
(148,264,0)
(124,204,0)
(70,267,0)
(278,61,0)
(303,16,0)
(100,76,0)
(259,41,0)
(146,15,0)
(7,300,0)
(47,277,0)
(170,329,0)
(69,297,0)
(26,4,0)
(106,226,0)
(232,150,0)
(132,12,0)
(207,213,0)
(102,76,0)
(262,148,0)
(164,276,0)
(201,235,0)
(246,172,0)
(138,72,0)
(238,226,0)
(20,311,0)
(137,79,0)
(300,329,0)
(65,226,0)
(181,60,0)
(184,226,0)
(222,128,0)
(203,250,0)
(27,133,0)
(111,135,0)
(243,73,0)
(1,132,0)
(217,201,0)
(167,227,0)
(68,192,0)
(215,91,0)
(271,157,0)
(143,300,0)
(4,277,0)
(42,226,0)
(203,111,0)
(304,92,0)
(191,20,0)
(133,27,0)
(212,244,0)
(25,235,0)
(61,92,0)
(149,61,0)
(10,297,0)
(98,183,0)
(281,307,0)
(228,45,0)
(96,329,0)
(198,265,0)
(48,269,0)
(134,175,0)
(85,308,0)
(121,1,0)
(189,100,0)
(321,213,0)
(4,80,0)
(219,137,0)
(53,226,0)
(246,267,0)
(110,17,0)
(204,299,0)
(40,90,0)
(240,53,0)
(142,297,0)
(221,111,0)
(71,303,0)
(236,142,0)
(304,303,0)
(123,226,0)
(206,268,0)
(213,12,0)
(287,69,0)
(300,143,0)
(129,316,0)
(143,264,0)
(17,303,0)
(39,234,0)
(29,300,0)
(135,329,0)
(277,297,0)
(150,126,0)
(227,119,0)
(1,329,0)
(323,226,0)
(85,303,0)
(187,303,0)
(247,123,0)
(286,29,0)
(102,24,0)
(264,143,0)
(86,303,0)
(181,205,0)
(135,16,0)
(17,157,0)
(30,134,0)
(29,1,0)
(234,226,0)
(326,308,0)
(251,34,0)
(63,205,0)
(20,254,0)
(4,26,0)
(199,226,0)
(296,181,0)
(327,69,0)
(188,226,0)
(27,34,0)
(256,274,0)
(29,234,0)
(69,213,0)
(272,205,0)
(270,13,0)
(82,226,0)
(127,241,0)
(325,293,0)
(246,205,0)
(252,13,0)
(172,90,0)
(166,60,0)
(62,80,0)
(248,45,0)
(205,226,0)
(114,288,0)
(56,29,0)
(50,69,0)
(263,226,0)
(89,95,0)
(155,99,0)
(165,128,0)
(269,157,0)
(293,92,0)
(131,1,0)
(312,26,0)
(207,311,0)
(37,169,0)
(85,157,0)
(193,226,0)
(13,262,0)
(103,16,0)
(311,20,0)
(97,205,0)
(239,298,0)
(154,108,0)
(266,293,0)
(137,16,0)
(282,238,0)
(86,250,0)
(238,234,0)
(284,14,0)
(192,288,0)
(134,158,0)
(204,175,0)
(162,116,0)
(301,241,0)
(289,226,0)
(11,73,0)
(83,307,0)
(16,329,0)
(169,37,0)
(218,58,0)
(32,246,0)
(28,108,0)
(261,304,0)
(21,157,0)
(196,78,0)
(320,220,0)
(194,116,0)
(220,221,0)
(79,137,0)
(90,172,0)
(36,264,0)
(186,86,0)
(291,186,0)
(101,11,0)
(205,181,0)
(255,97,0)
(209,276,0)
(72,99,0)
(75,268,0)
(145,226,0)
(148,262,0)
(311,37,0)
(80,0,0)
(189,146,0)
(86,157,0)
(41,254,0)
(229,105,0)
(141,66,0)
(279,213,0)
(203,135,0)
(169,328,0)
(310,60,0)
(125,203,0)
(66,230,0)
(278,16,0)
(45,235,0)
(136,226,0)
(1,265,0)
(99,155,0)
(111,221,0)
(307,60,0)
(202,226,0)
(30,299,0)
(166,11,0)
(230,70,0)
(90,205,0)
(224,169,0)
(264,148,0)
(308,329,0)
(8,277,0)
(179,234,0)
(31,1,0)
(225,78,0)
(69,265,0)
(85,61,0)
(264,94,0)
(254,310,0)
(116,97,0)
(45,175,0)
(267,98,0)
(113,53,0)
(58,234,0)
(292,93,0)
(151,250,0)
(156,85,0)
(305,272,0)
(180,226,0)
(317,196,0)
(190,126,0)
(274,115,0)
(116,194,0)
(283,226,0)
(262,13,0)
(144,135,0)
(194,60,0)
(91,94,0)
(298,205,0)
(276,254,0)
(292,246,0)
(158,299,0)
(295,0,0)
(61,278,0)
(268,60,0)
(38,119,0)
(91,203,0)
(10,274,0)
(153,146,0)
(207,329,0)
(260,30,0)
(107,100,0)
(163,175,0)
(308,119,0)
(211,142,0)
(102,272,0)
(19,299,0)
(287,174,0)
(306,41,0)
(140,166,0)
(108,60,0)
(242,186,0)
(74,15,0)
(278,308,0)
(311,137,0)
(1,207,0)
(220,135,0)
(221,220,0)
(72,138,0)
(78,297,0)
(328,169,0)
(97,246,0)
(67,128,0)
(17,92,0)
(94,298,0)
(86,186,0)
(200,98,0)
(316,135,0)
(316,231,0)
(18,135,0)
(231,316,0)
(190,235,0)
(307,0,0)
(95,201,0)
(265,253,0)
(33,207,0)
(196,175,0)
(133,142,0)
(98,200,0)
(51,148,0)
(285,20,0)
(310,254,0)
(294,310,0)
(293,265,0)
(267,246,0)
(88,226,0)
(230,66,0)
(1,287,0)
(97,116,0)
(58,230,0)
(262,157,0)
(23,132,0)
(319,58,0)
(22,278,0)
(118,114,0)
(244,53,0)
(269,227,0)
(175,196,0)
(315,166,0)
(250,86,0)
(52,24,0)
(290,1,0)
(53,205,0)
(61,85,0)
(57,1,0)
(267,70,0)
(303,157,0)
(99,268,0)
(272,102,0)
(216,138,0)
(298,94,0)
(104,172,0)
(112,241,0)
(210,221,0)
(137,311,0)
(302,200,0)
(235,201,0)
(108,269,0)
(304,157,0)
(91,246,0)
(24,102,0)
(292,39,0)
(37,311,0)
(26,226,0)
(34,27,0)
(2,97,0)
(227,269,0)
(146,226,0)
(190,158,0)
(81,10,0)
(80,297,0)
(94,226,0)
(203,91,0)
(73,11,0)
(233,14,0)
(324,181,0)
(77,123,0)
(128,165,0)
(24,205,0)
(70,230,0)
(117,24,0)
(1,213,0)
(116,157,0)
(146,123,0)
(93,292,0)
(43,226,0)
(87,288,0)
(80,4,0)
(207,265,0)
(275,299,0)
(54,53,0)
(53,244,0)
(173,80,0)
(258,94,0)
(15,105,0)
(182,226,0)
(201,175,0)
(168,85,0)
(147,316,0)
(139,190,0)
(177,192,0)
(142,133,0)
(235,241,0)
(116,303,0)
(1,29,0)
(160,19,0)
(109,86,0)
(274,256,0)
(186,60,0)
(192,92,0)
(35,175,0)
(195,113,0)
(78,196,0)
(39,292,0)
(196,174,0)
(208,66,0)
(249,194,0)
(69,207,0)
(49,246,0)
(265,293,0)
(274,10,0)
(311,207,0)
(237,165,0)
(176,254,0)
(280,234,0)
(3,4,0)
(44,194,0)
(171,15,0)
(183,98,0)
(1,297,0)
(269,303,0)
(309,288,0)
(95,297,0)
(126,30,0)
(73,226,0)
(303,303,0)
(1,60,0)
(128,226,0)
(134,30,0)
(223,262,0)
(254,226,0)
(304,92,1)
(53,244,1)
(102,161,1)
(103,308,1)
(264,94,1)
(39,185,1)
(316,135,1)
(218,267,1)
(61,85,1)
(306,259,1)
(259,254,1)
(185,97,1)
(78,297,1)
(164,304,1)
(267,246,1)
(13,270,1)
(17,157,1)
(230,58,1)
(7,70,1)
(139,35,1)
(258,128,1)
(141,58,1)
(13,60,1)
(229,15,1)
(284,53,1)
(305,24,1)
(246,172,1)
(286,121,1)
(45,248,1)
(68,177,1)
(111,221,1)
(179,280,1)
(240,123,1)
(28,154,1)
(203,250,1)
(189,100,1)
(228,19,1)
(39,234,1)
(292,93,1)
(147,135,1)
(231,322,1)
(281,83,1)
(84,30,1)
(255,32,1)
(157,21,1)
(223,7,1)
(47,8,1)
(110,318,1)
(252,223,1)
(203,135,1)
(274,10,1)
(1,213,1)
(204,175,1)
(300,143,1)
(245,99,1)
(237,222,1)
(137,16,1)
(86,157,1)
(307,60,1)
(262,157,1)
(86,303,1)
(69,207,1)
(215,203,1)
(293,92,1)
(142,211,1)
(29,300,1)
(186,242,1)
(97,116,1)
(69,213,1)
(154,48,1)
(31,57,1)
(158,190,1)
(169,224,1)
(278,22,1)
(85,308,1)
(32,111,1)
(97,205,1)
(0,307,1)
(250,86,1)
(17,303,1)
(26,4,1)
(51,262,1)
(163,192,1)
(211,236,1)
(20,191,1)
(69,327,1)
(292,39,1)
(290,314,1)
(114,288,1)
(48,38,1)
(91,203,1)
(324,296,1)
(191,285,1)
(227,167,1)
(67,132,1)
(200,302,1)
(54,240,1)
(277,0,1)
(313,231,1)
(58,234,1)
(80,62,1)
(123,247,1)
(326,304,1)
(278,17,1)
(30,134,1)
(246,97,1)
(116,157,1)
(260,45,1)
(125,250,1)
(132,115,1)
(298,239,1)
(128,205,1)
(57,131,1)
(194,44,1)
(56,286,1)
(307,281,1)
(138,60,1)
(116,303,1)
(238,282,1)
(304,303,1)
(99,155,1)
(80,297,1)
(80,0,1)
(272,305,1)
(254,310,1)
(276,254,1)
(89,257,1)
(146,123,1)
(35,175,1)
(265,293,1)
(159,150,1)
(64,317,1)
(267,98,1)
(143,72,1)
(231,316,1)
(315,140,1)
(38,326,1)
(246,205,1)
(71,187,1)
(318,61,1)
(279,321,1)
(137,219,1)
(266,325,1)
(53,205,1)
(261,157,1)
(276,209,1)
(124,126,1)
(196,174,1)
(107,102,1)
(327,50,1)
(101,166,1)
(316,129,1)
(271,26,1)
(24,205,1)
(243,205,1)
(138,216,1)
(314,287,1)
(148,262,1)
(1,265,1)
(99,268,1)
(249,162,1)
(278,61,1)
(1,26,1)
(181,324,1)
(192,92,1)
(317,163,1)
(310,294,1)
(66,208,1)
(277,297,1)
(156,103,1)
(232,158,1)
(303,71,1)
(10,81,1)
(108,60,1)
(164,229,1)
(142,297,1)
(311,37,1)
(4,3,1)
(1,132,1)
(295,234,1)
(75,206,1)
(207,311,1)
(1,297,1)
(97,2,1)
(146,153,1)
(296,63,1)
(77,0,1)
(303,303,1)
(49,292,1)
(294,176,1)
(304,157,1)
(303,157,1)
(309,276,1)
(204,124,1)
(233,284,1)
(25,175,1)
(167,269,1)
(293,266,1)
(192,288,1)
(104,14,1)
(117,14,1)
(321,41,1)
(18,144,1)
(4,277,1)
(32,231,1)
(62,173,1)
(52,117,1)
(280,73,1)
(1,16,1)
(304,152,1)
(210,313,1)
(135,18,1)
(74,70,1)
(285,33,1)
(67,34,1)
(269,108,1)
(137,79,1)
(4,80,1)
(176,172,1)
(119,227,1)
(236,251,1)
(208,141,1)
(61,92,1)
(102,24,1)
(282,276,1)
(181,60,1)
(5,122,1)
(126,30,1)
(169,328,1)
(235,201,1)
(1,29,1)
(151,86,1)
(173,277,1)
(143,264,1)
(53,113,1)
(70,267,1)
(70,230,1)
(83,295,1)
(209,164,1)
(291,109,1)
(41,254,1)
(312,94,1)
(247,77,1)
(257,217,1)
(135,16,1)
(148,51,1)
(94,298,1)
(91,94,1)
(189,146,1)
(72,138,1)
(1,287,1)
(166,315,1)
(207,265,1)
(150,232,1)
(73,11,1)
(98,183,1)
(58,319,1)
(109,49,1)
(133,142,1)
(264,36,1)
(244,212,1)
(20,254,1)
(274,256,1)
(29,234,1)
(207,207,1)
(2,116,1)
(113,195,1)
(310,60,1)
(35,84,1)
(287,174,1)
(85,303,1)
(225,64,1)
(72,99,1)
(262,13,1)
(149,85,1)
(11,166,1)
(118,45,1)
(134,55,1)
(134,175,1)
(23,213,1)
(230,66,1)
(308,119,1)
(195,54,1)
(206,264,1)
(78,225,1)
(102,272,1)
(160,204,1)
(203,125,1)
(192,68,1)
(16,278,1)
(44,249,1)
(37,169,1)
(264,148,1)
(278,308,1)
(134,158,1)
(248,228,1)
(69,297,1)
(190,139,1)
(55,260,1)
(234,179,1)
(212,113,1)
(261,303,1)
(221,220,1)
(198,41,1)
(15,171,1)
(222,67,1)
(9,23,1)
(250,151,1)
(33,1,1)
(239,258,1)
(277,47,1)
(17,110,1)
(177,288,1)
(40,104,1)
(98,200,1)
(302,246,1)
(116,194,1)
(190,126,1)
(262,303,1)
(177,114,1)
(150,235,1)
(111,135,1)
(165,237,1)
(153,238,1)
(168,156,1)
(91,215,1)
(66,60,1)
(272,205,1)
(122,300,1)
(288,87,1)
(187,207,1)
(45,235,1)
(61,149,1)
(269,157,1)
(227,269,1)
(24,52,1)
(205,181,1)
(90,205,1)
(311,137,1)
(10,297,1)
(85,157,1)
(214,210,1)
(50,5,1)
(1,207,1)
(19,235,1)
(11,101,1)
(17,92,1)
(29,56,1)
(194,60,1)
(269,303,1)
(19,160,1)
(171,74,1)
(220,320,1)
(8,312,1)
(217,25,1)
(90,40,1)
(203,111,1)
(100,107,1)
(41,306,1)
(251,265,1)
(175,196,1)
(128,165,1)
(1,34,1)
(213,279,1)
(298,205,1)
(287,69,1)
(95,297,1)
(131,290,1)
(27,133,1)
(133,197,1)
(303,16,1)
(190,235,1)
(166,60,1)
(242,291,1)
(238,234,1)
(85,168,1)
(219,20,1)
(270,252,1)
(69,265,1)
(86,186,1)
(319,218,1)
(169,16,1)
(201,95,1)
(220,135,1)
(201,175,1)
(322,316,1)
(21,271,1)
(325,198,1)
(95,89,1)
(1,60,1)
(81,9,1)
(282,192,1)
(216,245,1)
(228,235,1)
(172,90,1)
(108,28,1)
(311,20,1)
(207,213,1)
(144,16,1)
(152,261,1)
(3,277,1)
(140,243,1)
(121,31,1)
(161,272,1)
(22,61,1)
(224,20,1)
(87,309,1)
(320,214,1)
(268,75,1)
(268,60,1)
(146,15,1)
(126,159,1)
(246,91,1)
(78,288,1)
(162,255,1)
(129,147,1)
(45,175,1)
(14,233,1)
(196,78,1)
(34,27,1)
(186,60,1)
(114,118,1)
(36,148,1)
(115,274,1)
(246,292,1)
(15,70,2)
(172,14,2)
(227,269,2)
(238,14,2)
(246,205,2)
(250,304,2)
(39,304,2)
(62,277,2)
(80,0,2)
(71,70,2)
(277,297,2)
(90,205,2)
(272,14,2)
(35,175,2)
(250,86,2)
(215,304,2)
(194,304,2)
(262,13,2)
(110,61,2)
(279,41,2)
(167,304,2)
(61,92,2)
(1,60,2)
(8,14,2)
(313,231,2)
(207,213,2)
(119,227,2)
(99,155,2)
(267,304,2)
(207,311,2)
(98,304,2)
(116,157,2)
(126,45,2)
(5,70,2)
(286,70,2)
(217,192,2)
(128,205,2)
(99,70,2)
(23,41,2)
(19,235,2)
(304,303,2)
(228,192,2)
(176,14,2)
(292,304,2)
(126,30,2)
(31,70,2)
(268,60,2)
(306,14,2)
(81,41,2)
(192,92,2)
(232,45,2)
(270,70,2)
(132,41,2)
(33,70,2)
(235,192,2)
(320,231,2)
(307,60,2)
(190,126,2)
(259,14,2)
(269,108,2)
(94,298,2)
(45,45,2)
(86,157,2)
(293,92,2)
(187,70,2)
(85,303,2)
(72,138,2)
(151,304,2)
(30,134,2)
(221,220,2)
(213,41,2)
(128,165,2)
(266,41,2)
(78,288,2)
(268,70,2)
(194,60,2)
(261,70,2)
(16,304,2)
(19,45,2)
(262,157,2)
(207,207,2)
(325,41,2)
(124,45,2)
(52,14,2)
(311,137,2)
(264,70,2)
(276,14,2)
(72,99,2)
(133,142,2)
(303,303,2)
(218,267,2)
(288,276,2)
(128,14,2)
(196,192,2)
(287,69,2)
(216,70,2)
(304,14,2)
(265,293,2)
(172,90,2)
(3,277,2)
(229,70,2)
(1,297,2)
(137,79,2)
(97,205,2)
(207,265,2)
(27,41,2)
(74,70,2)
(69,70,2)
(224,20,2)
(100,14,2)
(196,174,2)
(230,58,2)
(242,304,2)
(72,70,2)
(201,95,2)
(230,267,2)
(311,20,2)
(141,58,2)
(122,70,2)
(134,175,2)
(304,70,2)
(87,276,2)
(73,11,2)
(177,192,2)
(173,277,2)
(169,20,2)
(303,16,2)
(103,304,2)
(118,192,2)
(97,304,2)
(94,14,2)
(13,70,2)
(208,58,2)
(35,45,2)
(200,304,2)
(152,14,2)
(85,304,2)
(192,276,2)
(146,123,2)
(114,192,2)
(1,132,2)
(45,192,2)
(258,14,2)
(10,297,2)
(131,70,2)
(95,192,2)
(292,39,2)
(185,304,2)
(319,267,2)
(1,265,2)
(220,231,2)
(48,304,2)
(312,14,2)
(207,70,2)
(260,45,2)
(32,304,2)
(308,304,2)
(287,174,2)
(222,14,2)
(302,304,2)
(293,41,2)
(316,135,2)
(108,60,2)
(117,14,2)
(142,41,2)
(29,300,2)
(68,192,2)
(205,181,2)
(30,45,2)
(111,135,2)
(29,234,2)
(214,231,2)
(4,14,2)
(206,70,2)
(69,297,2)
(169,16,2)
(246,172,2)
(252,70,2)
(139,45,2)
(201,192,2)
(135,304,2)
(135,16,2)
(272,205,2)
(138,70,2)
(111,221,2)
(4,80,2)
(27,133,2)
(11,166,2)
(278,17,2)
(95,297,2)
(221,231,2)
(85,308,2)
(50,70,2)
(147,304,2)
(28,304,2)
(9,41,2)
(231,316,2)
(45,235,2)
(91,203,2)
(149,304,2)
(119,304,2)
(269,303,2)
(1,16,2)
(4,277,2)
(80,297,2)
(10,41,2)
(161,14,2)
(282,14,2)
(98,183,2)
(1,26,2)
(235,201,2)
(80,277,2)
(70,304,2)
(211,41,2)
(190,235,2)
(1,34,2)
(47,14,2)
(91,94,2)
(1,207,2)
(41,14,2)
(311,70,2)
(1,29,2)
(238,234,2)
(133,41,2)
(40,14,2)
(90,14,2)
(99,268,2)
(18,304,2)
(166,60,2)
(267,246,2)
(143,70,2)
(91,304,2)
(56,70,2)
(129,304,2)
(17,61,2)
(21,14,2)
(177,276,2)
(37,169,2)
(164,14,2)
(156,304,2)
(143,72,2)
(78,297,2)
(61,85,2)
(290,70,2)
(262,70,2)
(246,97,2)
(1,213,2)
(49,304,2)
(26,14,2)
(311,37,2)
(34,27,2)
(305,14,2)
(58,267,2)
(191,70,2)
(314,70,2)
(201,175,2)
(277,0,2)
(34,41,2)
(114,288,2)
(158,45,2)
(153,14,2)
(227,304,2)
(277,14,2)
(109,304,2)
(57,70,2)
(13,60,2)
(157,14,2)
(152,70,2)
(291,304,2)
(86,303,2)
(69,213,2)
(237,14,2)
(70,230,2)
(107,14,2)
(322,304,2)
(219,20,2)
(204,45,2)
(246,91,2)
(225,192,2)
(53,205,2)
(204,175,2)
(53,113,2)
(102,272,2)
(158,190,2)
(86,186,2)
(26,4,2)
(298,14,2)
(287,70,2)
(285,70,2)
(294,14,2)
(132,115,2)
(190,45,2)
(230,66,2)
(220,135,2)
(265,41,2)
(70,267,2)
(245,70,2)
(186,304,2)
(116,303,2)
(192,288,2)
(58,234,2)
(148,262,2)
(61,304,2)
(17,303,2)
(186,60,2)
(278,61,2)
(162,304,2)
(22,61,2)
(257,192,2)
(160,45,2)
(143,264,2)
(45,175,2)
(17,92,2)
(169,328,2)
(300,143,2)
(115,274,2)
(20,70,2)
(278,308,2)
(189,100,2)
(236,41,2)
(66,60,2)
(168,304,2)
(17,157,2)
(116,194,2)
(41,254,2)
(203,111,2)
(7,70,2)
(53,244,2)
(309,276,2)
(142,297,2)
(68,276,2)
(146,14,2)
(246,292,2)
(24,14,2)
(154,304,2)
(326,304,2)
(146,15,2)
(292,93,2)
(264,94,2)
(102,24,2)
(159,45,2)
(150,235,2)
(248,45,2)
(66,58,2)
(310,14,2)
(67,14,2)
(261,14,2)
(116,304,2)
(134,158,2)
(69,207,2)
(269,157,2)
(274,10,2)
(203,135,2)
(104,14,2)
(318,61,2)
(165,14,2)
(38,304,2)
(231,304,2)
(196,78,2)
(97,116,2)
(269,304,2)
(98,200,2)
(1,70,2)
(303,70,2)
(0,307,2)
(304,92,2)
(203,250,2)
(181,60,2)
(29,70,2)
(276,254,2)
(55,45,2)
(198,41,2)
(144,304,2)
(125,304,2)
(163,192,2)
(121,70,2)
(278,304,2)
(203,304,2)
(138,60,2)
(89,192,2)
(64,192,2)
(2,304,2)
(75,70,2)
(223,70,2)
(304,157,2)
(133,197,2)
(298,205,2)
(175,196,2)
(108,304,2)
(274,41,2)
(86,304,2)
(115,41,2)
(16,278,2)
(69,265,2)
(274,256,2)
(209,14,2)
(249,304,2)
(210,231,2)
(20,254,2)
(148,70,2)
(102,14,2)
(171,70,2)
(264,148,2)
(85,157,2)
(189,146,2)
(175,192,2)
(37,20,2)
(255,304,2)
(192,192,2)
(303,157,2)
(327,70,2)
(316,304,2)
(310,60,2)
(248,192,2)
(24,205,2)
(308,119,2)
(44,304,2)
(1,287,2)
(271,14,2)
(51,70,2)
(246,304,2)
(134,45,2)
(254,14,2)
(254,310,2)
(137,16,2)
(111,231,2)
(317,192,2)
(251,41,2)
(39,234,2)
(300,70,2)
(267,98,2)
(321,41,2)
(239,14,2)
(25,192,2)
(36,70,2)
(137,20,2)
(228,45,2)
(262,303,2)
(78,192,2)
(84,45,2)
(150,45,2)
-----------------------------------
(0,imagewidth = img->width)
(1,(*put)
(2,0)
(3,0)
(4,w < imagewidth ? imagewidth - w : 0)
(5,raster)
(6,toskew)
(7,pos)
(8,w)
(9,w)
(10,w - w)
(11,img->put.contig)
(12,)
(13,img->row_offset)
(14,subsamplingver == 0)
(15,ret = 0)
(16,nrow = (row + rowstoread > h ? h - row : rowstoread)
(17,h - row)
(18,nrow)
(19,right--)
(20,flip & FLIP_VERTICALLY)
(21,0)
(22,rowstoread)
(23,toskew)
(24,tif->tif_clientdata)
(25,right)
(26,fromskew = (w < imagewidth ? imagewidth - w : 0)
(27,-(int32)
(28,row_offset)
(29,buf + pos)
(30,temp = *left)
(31,fromskew)
(32,tif)
(33,y)
(34,toskew = -(int32)
(35,*left)
(36,scanline)
(37,-(int32)
(38,rowsperstrip)
(39,&buf)
(40,tif)
(41,flip & FLIP_VERTICALLY)
(42,pos)
(43,y)
(44,row_offset)
(45,left < right)
(46,for (line = 0; line < h; line++)
(47,imagewidth)
(48,row)
(49,maxstripsize)
(50,y)
(51,rowsperstrip)
(52,tif_clientdata)
(53,TIFFGetFieldDefaulted(tif, TIFFTAG_YCBCRSUBSAMPLING, &subsamplinghor, &subsamplingver)
(54,TIFFTAG_YCBCRSUBSAMPLING)
(55,left)
(56,pos)
(57,nrow)
(58,buf == NULL)
(59,line)
(60,TIFFRGBAImage* img)
(61,row + rowstoread > h)
(62,w)
(63,tif)
(64,line)
(65,for (row = 0; row < h; row += nrow)
(66,img->stoponerr)
(67,tif)
(68,h)
(69,y*w)
(70,_TIFFReadEncodedStripAndAllocBuffer(tif,\n\\n\\t\\t    TIFFComputeStrip(tif,row+img->row_offset, 0)
(71,nrow)
(72,(tmsize_t)
(73,put = img->put.contig)
(74,ret)
(75,col_offset)
(76,)
(77,ret)
(78,line * w)
(79,int32)
(80,imagewidth - w)
(81,w)
(82,subsamplingver)
(83,img)
(84,left)
(85,row + rowstoread)
(86,row + img->row_offset)
(87,0)
(88,nrowsub)
(89,1)
(90,TIFFStripSize(tif)
(91,((row + img->row_offset)
(92,uint32 h)
(93,void**)
(94,scanline = TIFFScanlineSize(tif)
(95,w - 1)
(96,if ((nrowsub%subsamplingver)
(97,TIFFComputeStrip(tif,row+img->row_offset, 0)
(98,(tmsize_t)
(99,(tmsize_t)
(100,return (0)
(101,contig)
(102,TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif)
(103,nrow)
(104,maxstripsize)
(105,)
(106,subsamplinghor)
(107,0)
(108,img->row_offset)
(109,row)
(110,row)
(111,nrowsub+=subsamplingver-nrowsub%subsamplingver)
(112,while ( left < right )
(113,&subsamplinghor)
(114,line++)
(115,-(int32)
(116,row+img->row_offset)
(117,tif)
(118,line)
(119,rowsperstrip - (row + img->row_offset)
(120,tif)
(121,toskew)
(122,img)
(123,ret = 1)
(124,left)
(125,nrowsub)
(126,*right = temp)
(127,right)
(128,TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip)
(129,subsamplingver)
(130,nrow)
(131,w)
(132,toskew = -(int32)
(133,(int32)
(134,*left)
(135,nrowsub = nrow)
(136,fromskew)
(137,(int32)
(138,img->samplesperpixel)
(139,right)
(140,img)
(141,img)
(142,w + w)
(143,((row + img->row_offset)
(144,nrowsub)
(145,row)
(146,return (ret)
(147,nrowsub)
(148,(row + img->row_offset)
(149,h)
(150,*right)
(151,rowsperstrip)
(152,h)
(153,ret)
(154,img)
(155,tmsize_t)
(156,row)
(157,row = 0)
(158,*left = *right)
(159,temp)
(160,right)
(161,"Invalid vertical YCbCr subsampling")
(162,row)
(163,left)
(164,flip)
(165,&rowsperstrip)
(166,img->put)
(167,rowsperstrip)
(168,rowstoread)
(169,(int32)
(170,if (_TIFFReadEncodedStripAndAllocBuffer(tif,\n\\n\\t\\t    TIFFComputeStrip(tif,row+img->row_offset, 0)
(171,0)
(172,maxstripsize = TIFFStripSize(tif)
(173,imagewidth)
(174,uint32* raster)
(175,*left = raster + (line * w)
(176,flip)
(177,line)
(178,put)
(179,NULL)
(180,ret)
(181,img->tif)
(182,flip)
(183,tmsize_t)
(184,if (flip & FLIP_VERTICALLY)
(185,buf)
(186,img->row_offset)
(187,row)
(188,if( subsamplingver == 0 )
(189,RET)
(190,*right)
(191,FLIP_VERTICALLY)
(192,line < h)
(193,imagewidth)
(194,img->row_offset)
(195,subsamplinghor)
(196,raster + (line * w)
(197,int32)
(198,y)
(199,buf)
(200,-1)
(201,left + w - 1)
(202,if (flip & FLIP_HORIZONTALLY)
(203,(row + img->row_offset)
(204,left++)
(205,* tif = img->tif)
(206,img)
(207,y += ((flip & FLIP_VERTICALLY)
(208,stoponerr)
(209,FLIP_HORIZONTALLY)
(210,subsamplingver)
(211,w)
(212,subsamplingver)
(213,y = 0)
(214,nrowsub)
(215,scanline)
(216,samplesperpixel)
(217,left)
(218,buf)
(219,nrow)
(220,nrowsub%subsamplingver)
(221,subsamplingver-nrowsub%subsamplingver)
(222,TIFFTAG_ROWSPERSTRIP)
(223,row)
(224,nrow)
(225,w)
(226,)
(227,(row + img->row_offset)
(228,left)
(229,break;)
(230,buf == NULL || img->stoponerr)
(231,(nrowsub%subsamplingver)
(232,right)
(233,0)
(234,* buf = NULL)
(235,*right = left + w - 1)
(236,w)
(237,rowsperstrip)
(238,_TIFFfree(buf)
(239,tif)
(240,tif)
(241,)
(242,row_offset)
(243,put)
(244,&subsamplingver)
(245,img)
(246,_TIFFReadEncodedStripAndAllocBuffer(tif,\n\\n\\t\\t    TIFFComputeStrip(tif,row+img->row_offset, 0)
(247,1)
(248,right)
(249,img)
(250,(row + img->row_offset)
(251,toskew)
(252,img)
(253,)
(254,flip = setorientation(img)
(255,tif)
(256,int32)
(257,w)
(258,scanline)
(259,flip)
(260,temp)
(261,row)
(262,row + img->row_offset)
(263,maxstripsize)
(264,((row + img->row_offset)
(265,y = h - 1)
(266,1)
(267,_TIFFReadEncodedStripAndAllocBuffer(tif,\n\\n\\t\\t    TIFFComputeStrip(tif,row+img->row_offset, 0)
(268,img->col_offset)
(269,row + img->row_offset)
(270,row_offset)
(271,row)
(272,TIFFFileName(tif)
(273,)
(274,(int32)
(275,temp)
(276,flip & FLIP_HORIZONTALLY)
(277,w < imagewidth)
(278,row + rowstoread > h ? h - row : rowstoread)
(279,0)
(280,buf)
(281,width)
(282,buf)
(283,scanline)
(284,subsamplingver)
(285,flip)
(286,buf)
(287,raster+y*w)
(288,line = 0)
(289,rowstoread)
(290,y)
(291,img)
(292,(void**)
(293,h - 1)
(294,img)
(295,imagewidth)
(296,img)
(297,uint32 w)
(298,TIFFScanlineSize(tif)
(299,)
(300,pos = ((row + img->row_offset)
(301,left)
(302,1)
(303,row += nrow)
(304,row < h)
(305,tif)
(306,FLIP_VERTICALLY)
(307,img->width)
(308,rowstoread = rowsperstrip - (row + img->row_offset)
(309,line)
(310,setorientation(img)
(311,(flip & FLIP_VERTICALLY)
(312,fromskew)
(313,nrowsub)
(314,0)
(315,put)
(316,nrowsub%subsamplingver)
(317,raster)
(318,h)
(319,NULL)
(320,subsamplingver)
(321,y)
(322,0)
(323,rowsperstrip)
(324,tif)
(325,h)
(326,rowstoread)
(327,w)
(328,int32)
(329,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
