-----label-----
1
-----code-----
static int jpc_pi_nextrpcl(register jpc_pi_t *pi)
{
	int rlvlno;
	jpc_pirlvl_t *pirlvl;
	jpc_pchg_t *pchg;
	int prchind;
	int prcvind;
	int *prclyrno;
	int compno;
	jpc_picomp_t *picomp;
	int xstep;
	int ystep;
	uint_fast32_t r;
	uint_fast32_t rpx;
	uint_fast32_t rpy;
	uint_fast32_t trx0;
	uint_fast32_t try0;

	pchg = pi->pchg;
	if (!pi->prgvolfirst) {
		goto skip;
	} else {
		pi->xstep = 0;
		pi->ystep = 0;
		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;
		  ++compno, ++picomp) {
			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <
			  picomp->numrlvls; ++rlvlno, ++pirlvl) {
				// Check for the potential for overflow problems.
				if (pirlvl->prcwidthexpn + picomp->numrlvls >
				  JAS_UINTFAST32_NUMBITS - 2 ||
				  pirlvl->prcheightexpn + picomp->numrlvls >
				  JAS_UINTFAST32_NUMBITS - 2) {
					return -1;
				}
				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<
				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));
				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<
				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));
				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);
				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);
			}
		}
		pi->prgvolfirst = 0;
	}

	for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&
	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {
		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=
		  pi->ystep - (pi->y % pi->ystep)) {
			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=
			  pi->xstep - (pi->x % pi->xstep)) {
				for (pi->compno = pchg->compnostart,
				  pi->picomp = &pi->picomps[pi->compno];
				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <
				  pi->numcomps; ++pi->compno, ++pi->picomp) {
					if (pi->rlvlno >= pi->picomp->numrlvls) {
						continue;
					}
					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];
					if (pi->pirlvl->numprcs == 0) {
						continue;
					}
					r = pi->picomp->numrlvls - 1 - pi->rlvlno;
					rpx = r + pi->pirlvl->prcwidthexpn;
					rpy = r + pi->pirlvl->prcheightexpn;
					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);
					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);
					if (((pi->x == pi->xstart &&
					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))
					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&
					  ((pi->y == pi->ystart &&
					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))
					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {
						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,
						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -
						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);
						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,
						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -
						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);
						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;

						assert(pi->prcno < pi->pirlvl->numprcs);
						for (pi->lyrno = 0; pi->lyrno <
						  pi->numlyrs && pi->lyrno < JAS_CAST(int,
						  pchg->lyrnoend); ++pi->lyrno) {
							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];
							if (pi->lyrno >= *prclyrno) {
								++(*prclyrno);
								return 0;
							}
skip:
							;
						}
					}
				}
			}
		}
	}
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
12,13
13,14
13,15
15,16
17,18
18,19
18,20
19,20
21,22
21,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
41,42
42,43
42,44
44,45
44,46
47,48
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
59,60
60,61
60,62
62,63
64,65
65,66
65,67
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
103,105
104,105
107,108
107,109
107,110
108,109
109,110
109,111
110,111
113,114
114,115
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
119,121
120,121
124,125
125,126
125,127
126,127
126,128
127,128
131,132
131,133
131,134
131,135
132,133
133,134
133,135
134,135
134,136
135,136
138,139
138,140
139,140
141,142
141,143
142,143
145,146
145,147
146,147
148,149
148,150
149,150
152,153
152,154
153,154
154,155
156,157
157,158
159,160
160,161
160,162
160,163
160,164
161,162
162,163
162,164
163,164
163,165
164,165
167,168
167,169
168,169
170,171
170,172
171,172
174,175
174,176
175,176
177,178
177,179
178,179
181,182
181,183
182,183
183,184
185,186
186,187
188,189
188,190
188,191
188,192
188,193
189,190
189,191
190,191
190,192
191,192
191,193
192,193
192,194
193,194
193,195
194,195
197,198
197,199
198,199
201,202
201,203
202,203
205,206
205,207
206,207
206,208
207,208
207,209
208,209
211,212
211,213
212,213
215,216
215,217
216,217
219,220
220,221
221,222
223,224
224,225
224,226
225,226
227,228
227,229
228,229
228,230
229,230
232,233
233,234
233,235
234,235
234,236
234,237
235,236
237,238
240,241
241,242
241,243
242,243
242,244
243,244
243,245
244,245
244,246
245,246
248,249
248,250
249,250
252,253
255,256
256,257
256,258
257,258
259,260
259,261
260,261
260,262
261,262
264,265
265,266
265,267
266,267
266,268
266,269
267,268
269,270
272,273
273,274
273,275
274,275
274,276
275,276
275,277
276,277
276,278
277,278
280,281
280,282
281,282
284,285
287,288
288,289
288,290
289,290
289,291
290,291
293,294
293,295
293,296
294,295
295,296
296,297
296,298
297,298
300,301
302,303
302,304
302,305
303,304
305,306
305,307
306,307
309,310
311,312
312,313
312,314
313,314
313,315
314,315
317,318
317,319
317,320
318,319
319,320
320,321
320,322
321,322
324,325
326,327
326,328
326,329
327,328
329,330
329,331
330,331
333,334
335,336
336,337
336,338
337,338
337,339
338,339
342,343
342,344
342,345
342,346
343,344
344,345
344,346
345,346
345,347
346,347
349,350
349,351
350,351
353,354
353,355
354,355
354,356
355,356
355,357
356,357
359,360
359,361
360,361
363,364
363,365
364,365
364,366
365,366
368,369
368,370
369,370
372,373
373,374
373,375
374,375
377,378
378,379
378,380
378,381
378,382
379,380
380,381
380,382
381,382
381,383
382,383
385,386
385,387
386,387
389,390
389,391
390,391
390,392
391,392
394,395
394,396
395,396
398,399
398,400
399,400
399,401
400,401
403,404
403,405
404,405
404,406
405,406
408,409
409,410
409,411
410,411
410,412
411,412
414,415
414,416
415,416
418,419
419,420
419,421
419,422
419,423
420,421
421,422
421,423
422,423
422,424
423,424
426,427
426,428
427,428
430,431
430,432
431,432
431,433
432,433
435,436
435,437
436,437
439,440
439,441
440,441
440,442
441,442
444,445
444,446
445,446
445,447
446,447
449,450
450,451
450,452
451,452
451,453
452,453
455,456
455,457
456,457
459,460
459,461
459,462
459,463
460,461
461,462
462,463
462,464
463,464
464,465
464,466
465,466
468,469
469,470
469,471
470,471
473,474
474,475
475,476
-----nextToken-----
2,4,7,9,10,14,16,20,22,23,27,29,30,33,35,38,40,43,45,46,49,51,55,57,58,61,63,66,68,72,74,78,80,84,86,90,92,96,98,102,105,106,111,112,115,121,122,123,128,129,130,136,137,140,143,144,147,150,151,155,158,165,166,169,172,173,176,179,180,184,187,195,196,199,200,203,204,209,210,213,214,217,218,222,226,230,231,236,238,239,246,247,250,251,253,254,258,262,263,268,270,271,278,279,282,283,285,286,291,292,298,299,301,304,307,308,310,315,316,322,323,325,328,331,332,334,339,340,341,347,348,351,352,357,358,361,362,366,367,370,371,375,376,383,384,387,388,392,393,396,397,401,402,406,407,412,413,416,417,424,425,428,429,433,434,437,438,442,443,447,448,453,454,457,458,466,467,471,472,476
-----computeFrom-----
100,101
100,102
118,119
118,120
125,126
125,127
134,135
134,136
138,139
138,140
145,146
145,147
163,164
163,165
167,168
167,169
174,175
174,176
190,191
190,192
191,192
191,193
192,193
192,194
201,202
201,203
205,206
205,207
206,207
206,208
215,216
215,217
224,225
224,226
227,228
227,229
233,234
233,235
241,242
241,243
242,243
242,244
243,244
243,245
256,257
256,258
259,260
259,261
265,266
265,267
273,274
273,275
274,275
274,276
275,276
275,277
288,289
288,290
312,313
312,314
336,337
336,338
344,345
344,346
353,354
353,355
354,355
354,356
363,364
363,365
380,381
380,382
389,390
389,391
398,399
398,400
403,404
403,405
409,410
409,411
421,422
421,423
430,431
430,432
439,440
439,441
444,445
444,446
450,451
450,452
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;GotoStatement;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ProblemStatement;ExpressionStatement;ExpressionList;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ProblemStatement;ProblemStatement;ReturnStatement;LiteralExpression;
-----ast_node-----
static int jpc_pi_nextrpcl(register jpc_pi_t *pi){	int rlvlno;	jpc_pirlvl_t *pirlvl;	jpc_pchg_t *pchg;	int prchind;	int prcvind;	int *prclyrno;	int compno;	jpc_picomp_t *picomp;	int xstep;	int ystep;	uint_fast32_t r;	uint_fast32_t rpx;	uint_fast32_t rpy;	uint_fast32_t trx0;	uint_fast32_t try0;	pchg = pi->pchg;	if (!pi->prgvolfirst) {		goto skip;	} else {		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}	for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}	return 1;}
static int
jpc_pi_nextrpcl(register jpc_pi_t *pi)
jpc_pi_nextrpcl
register jpc_pi_t *pi
register jpc_pi_t
jpc_pi_t
*pi
*
pi
{	int rlvlno;	jpc_pirlvl_t *pirlvl;	jpc_pchg_t *pchg;	int prchind;	int prcvind;	int *prclyrno;	int compno;	jpc_picomp_t *picomp;	int xstep;	int ystep;	uint_fast32_t r;	uint_fast32_t rpx;	uint_fast32_t rpy;	uint_fast32_t trx0;	uint_fast32_t try0;	pchg = pi->pchg;	if (!pi->prgvolfirst) {		goto skip;	} else {		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}	for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}	return 1;}
int rlvlno;
int rlvlno;
int
rlvlno
rlvlno
jpc_pirlvl_t *pirlvl;
jpc_pirlvl_t *pirlvl;
jpc_pirlvl_t
jpc_pirlvl_t
*pirlvl
*
pirlvl
jpc_pchg_t *pchg;
jpc_pchg_t *pchg;
jpc_pchg_t
jpc_pchg_t
*pchg
*
pchg
int prchind;
int prchind;
int
prchind
prchind
int prcvind;
int prcvind;
int
prcvind
prcvind
int *prclyrno;
int *prclyrno;
int
*prclyrno
*
prclyrno
int compno;
int compno;
int
compno
compno
jpc_picomp_t *picomp;
jpc_picomp_t *picomp;
jpc_picomp_t
jpc_picomp_t
*picomp
*
picomp
int xstep;
int xstep;
int
xstep
xstep
int ystep;
int ystep;
int
ystep
ystep
uint_fast32_t r;
uint_fast32_t r;
uint_fast32_t
uint_fast32_t
r
r
uint_fast32_t rpx;
uint_fast32_t rpx;
uint_fast32_t
uint_fast32_t
rpx
rpx
uint_fast32_t rpy;
uint_fast32_t rpy;
uint_fast32_t
uint_fast32_t
rpy
rpy
uint_fast32_t trx0;
uint_fast32_t trx0;
uint_fast32_t
uint_fast32_t
trx0
trx0
uint_fast32_t try0;
uint_fast32_t try0;
uint_fast32_t
uint_fast32_t
try0
try0
pchg = pi->pchg;
pchg = pi->pchg
pchg
pchg
pi->pchg
pi
pi
pchg
if (!pi->prgvolfirst) {		goto skip;	} else {		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}
!pi->prgvolfirst
pi->prgvolfirst
pi
pi
prgvolfirst
{		goto skip;	}
goto skip;
skip
{		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}
pi->xstep = 0;
pi->xstep = 0
pi->xstep
pi
pi
xstep
0
pi->ystep = 0;
pi->ystep = 0
pi->ystep
pi
pi
ystep
0
for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}
compno = 0, picomp = pi->picomps;
compno = 0, picomp = pi->picomps
compno = 0
compno
compno
0
picomp = pi->picomps
picomp
picomp
pi->picomps
pi
pi
picomps
compno < pi->numcomps
compno
compno
pi->numcomps
pi
pi
numcomps
++compno, ++picomp
++compno
compno
compno
++picomp
picomp
picomp
{			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}
for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}
rlvlno = 0, pirlvl = picomp->pirlvls;
rlvlno = 0, pirlvl = picomp->pirlvls
rlvlno = 0
rlvlno
rlvlno
0
pirlvl = picomp->pirlvls
pirlvl
pirlvl
picomp->pirlvls
picomp
picomp
pirlvls
rlvlno <			  picomp->numrlvls
rlvlno
rlvlno
picomp->numrlvls
picomp
picomp
numrlvls
++rlvlno, ++pirlvl
++rlvlno
rlvlno
rlvlno
++pirlvl
pirlvl
pirlvl
{				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}
if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}
pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2
pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2
pirlvl->prcwidthexpn + picomp->numrlvls
pirlvl->prcwidthexpn
pirlvl
pirlvl
prcwidthexpn
picomp->numrlvls
picomp
picomp
numrlvls
JAS_UINTFAST32_NUMBITS - 2
JAS_UINTFAST32_NUMBITS
JAS_UINTFAST32_NUMBITS
2
pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2
pirlvl->prcheightexpn + picomp->numrlvls
pirlvl->prcheightexpn
pirlvl
pirlvl
prcheightexpn
picomp->numrlvls
picomp
picomp
numrlvls
JAS_UINTFAST32_NUMBITS - 2
JAS_UINTFAST32_NUMBITS
JAS_UINTFAST32_NUMBITS
2
{					return -1;				}
return -1;
-1
1
xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));
xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1))
xstep
xstep
picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1))
picomp->hsamp
picomp
picomp
hsamp
(JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1))
JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1)
JAS_CAST(uint_fast32_t, 1)
JAS_CAST
JAS_CAST
uint_fast32_t
uint_fast32_t
1
(pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1)
pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1
pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno
pirlvl->prcwidthexpn + picomp->numrlvls
pirlvl->prcwidthexpn
pirlvl
pirlvl
prcwidthexpn
picomp->numrlvls
picomp
picomp
numrlvls
rlvlno
rlvlno
1
ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));
ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1))
ystep
ystep
picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1))
picomp->vsamp
picomp
picomp
vsamp
(JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1))
JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1)
JAS_CAST(uint_fast32_t, 1)
JAS_CAST
JAS_CAST
uint_fast32_t
uint_fast32_t
1
(pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1)
pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1
pirlvl->prcheightexpn + picomp->numrlvls - rlvlno
pirlvl->prcheightexpn + picomp->numrlvls
pirlvl->prcheightexpn
pirlvl
pirlvl
prcheightexpn
picomp->numrlvls
picomp
picomp
numrlvls
rlvlno
rlvlno
1
pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);
pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep)
pi->xstep
pi
pi
xstep
(!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep)
(!pi->xstep)
!pi->xstep
pi->xstep
pi
pi
xstep
xstep
xstep
JAS_MIN(pi->xstep, xstep)
JAS_MIN
JAS_MIN
pi->xstep
pi
pi
xstep
xstep
xstep
pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);
pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep)
pi->ystep
pi
pi
ystep
(!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep)
(!pi->ystep)
!pi->ystep
pi->ystep
pi
pi
ystep
ystep
ystep
JAS_MIN(pi->ystep, ystep)
JAS_MIN
JAS_MIN
pi->ystep
pi
pi
ystep
ystep
ystep
pi->prgvolfirst = 0;
pi->prgvolfirst = 0
pi->prgvolfirst
pi
pi
prgvolfirst
0
for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}
pi->rlvlno = pchg->rlvlnostart;
pi->rlvlno = pchg->rlvlnostart
pi->rlvlno
pi
pi
rlvlno
pchg->rlvlnostart
pchg
pchg
rlvlnostart
pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls
pi->rlvlno < pchg->rlvlnoend
pi->rlvlno
pi
pi
rlvlno
pchg->rlvlnoend
pchg
pchg
rlvlnoend
pi->rlvlno < pi->maxrlvls
pi->rlvlno
pi
pi
rlvlno
pi->maxrlvls
pi
pi
maxrlvls
++pi->rlvlno
pi->rlvlno
pi
pi
rlvlno
{		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}
for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}
pi->y = pi->ystart;
pi->y = pi->ystart
pi->y
pi
pi
y
pi->ystart
pi
pi
ystart
pi->y < pi->yend
pi->y
pi
pi
y
pi->yend
pi
pi
yend
pi->y +=		  pi->ystep - (pi->y % pi->ystep)
pi->y
pi
pi
y
pi->ystep - (pi->y % pi->ystep)
pi->ystep
pi
pi
ystep
(pi->y % pi->ystep)
pi->y % pi->ystep
pi->y
pi
pi
y
pi->ystep
pi
pi
ystep
{			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}
for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}
pi->x = pi->xstart;
pi->x = pi->xstart
pi->x
pi
pi
x
pi->xstart
pi
pi
xstart
pi->x < pi->xend
pi->x
pi
pi
x
pi->xend
pi
pi
xend
pi->x +=			  pi->xstep - (pi->x % pi->xstep)
pi->x
pi
pi
x
pi->xstep - (pi->x % pi->xstep)
pi->xstep
pi
pi
xstep
(pi->x % pi->xstep)
pi->x % pi->xstep
pi->x
pi
pi
x
pi->xstep
pi
pi
xstep
{				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}
for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps;
++pi->compno, ++pi->picomp
++pi->compno, ++pi->picomp
++pi->compno
pi->compno
pi
pi
compno
++pi->picomp
pi->picomp
pi
pi
picomp
p
) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}
return 1;
1
-----joern-----
(339,107,0)
(85,440,0)
(503,449,0)
(523,484,0)
(268,320,0)
(235,194,0)
(363,320,0)
(524,539,0)
(517,210,0)
(351,181,0)
(92,423,0)
(412,572,0)
(455,70,0)
(594,348,0)
(18,363,0)
(281,562,0)
(415,290,0)
(304,204,0)
(283,250,0)
(297,282,0)
(430,429,0)
(267,400,0)
(472,249,0)
(148,16,0)
(281,351,0)
(360,332,0)
(314,349,0)
(353,592,0)
(182,551,0)
(271,338,0)
(102,401,0)
(408,320,0)
(484,491,0)
(150,520,0)
(82,441,0)
(368,430,0)
(527,538,0)
(279,305,0)
(38,144,0)
(242,320,0)
(128,55,0)
(575,320,0)
(361,320,0)
(271,600,0)
(354,268,0)
(27,242,0)
(105,227,0)
(69,429,0)
(171,472,0)
(361,323,0)
(353,204,0)
(353,414,0)
(603,222,0)
(366,452,0)
(163,181,0)
(517,426,0)
(534,375,0)
(74,299,0)
(51,40,0)
(13,538,0)
(13,320,0)
(229,490,0)
(462,429,0)
(342,318,0)
(449,348,0)
(193,516,0)
(299,293,0)
(578,508,0)
(475,66,0)
(447,241,0)
(248,210,0)
(562,281,0)
(311,278,0)
(552,215,0)
(396,101,0)
(264,393,0)
(250,283,0)
(379,320,0)
(437,155,0)
(49,161,0)
(493,553,0)
(124,80,0)
(309,345,0)
(487,316,0)
(483,283,0)
(115,279,0)
(409,326,0)
(374,201,0)
(23,367,0)
(561,539,0)
(526,605,0)
(517,301,0)
(531,183,0)
(476,301,0)
(568,28,0)
(555,532,0)
(588,183,0)
(353,301,0)
(246,429,0)
(394,583,0)
(1,215,0)
(367,320,0)
(390,320,0)
(464,398,0)
(87,320,0)
(473,282,0)
(517,226,0)
(326,187,0)
(460,541,0)
(136,550,0)
(497,601,0)
(554,320,0)
(206,110,0)
(561,145,0)
(255,320,0)
(291,475,0)
(79,437,0)
(269,257,0)
(289,33,0)
(258,53,0)
(268,485,0)
(363,134,0)
(372,107,0)
(345,309,0)
(511,149,0)
(386,227,0)
(432,437,0)
(209,452,0)
(302,572,0)
(354,426,0)
(8,605,0)
(595,192,0)
(362,559,0)
(280,354,0)
(37,16,0)
(572,320,0)
(331,339,0)
(305,279,0)
(495,167,0)
(311,517,0)
(578,517,0)
(53,541,0)
(279,430,0)
(401,320,0)
(65,72,0)
(395,390,0)
(606,573,0)
(283,483,0)
(561,545,0)
(594,556,0)
(416,215,0)
(158,201,0)
(192,320,0)
(464,318,0)
(532,391,0)
(205,601,0)
(32,497,0)
(294,537,0)
(452,219,0)
(499,429,0)
(315,339,0)
(307,605,0)
(287,503,0)
(319,573,0)
(561,204,0)
(52,473,0)
(544,289,0)
(588,320,0)
(354,414,0)
(388,515,0)
(405,525,0)
(474,332,0)
(408,194,0)
(560,381,0)
(190,194,0)
(382,87,0)
(101,590,0)
(336,602,0)
(79,354,0)
(282,167,0)
(466,192,0)
(288,226,0)
(566,110,0)
(245,571,0)
(91,300,0)
(463,514,0)
(101,320,0)
(188,231,0)
(502,590,0)
(278,290,0)
(383,576,0)
(227,320,0)
(492,536,0)
(561,426,0)
(467,296,0)
(266,41,0)
(337,209,0)
(501,316,0)
(402,201,0)
(401,53,0)
(149,278,0)
(219,320,0)
(20,297,0)
(444,555,0)
(419,290,0)
(508,578,0)
(127,393,0)
(521,80,0)
(542,190,0)
(66,477,0)
(351,281,0)
(387,463,0)
(173,33,0)
(194,56,0)
(29,107,0)
(561,379,0)
(392,381,0)
(117,531,0)
(62,110,0)
(254,264,0)
(250,467,0)
(207,365,0)
(564,254,0)
(149,320,0)
(271,516,0)
(465,108,0)
(597,208,0)
(503,52,0)
(134,409,0)
(31,604,0)
(359,145,0)
(573,194,0)
(87,305,0)
(301,289,0)
(547,484,0)
(138,187,0)
(389,53,0)
(395,428,0)
(430,572,0)
(192,495,0)
(293,299,0)
(145,320,0)
(10,208,0)
(523,544,0)
(85,267,0)
(3,320,0)
(590,502,0)
(610,497,0)
(276,470,0)
(470,77,0)
(403,258,0)
(129,210,0)
(398,107,0)
(470,561,0)
(349,41,0)
(490,320,0)
(58,144,0)
(11,123,0)
(204,515,0)
(94,610,0)
(17,397,0)
(529,118,0)
(208,320,0)
(536,303,0)
(381,231,0)
(17,320,0)
(258,160,0)
(22,477,0)
(354,172,0)
(55,128,0)
(57,252,0)
(264,331,0)
(220,432,0)
(427,65,0)
(215,552,0)
(390,305,0)
(549,117,0)
(473,52,0)
(353,426,0)
(473,320,0)
(296,467,0)
(532,86,0)
(0,183,0)
(6,414,0)
(318,118,0)
(134,363,0)
(97,3,0)
(553,483,0)
(551,182,0)
(561,414,0)
(573,606,0)
(94,538,0)
(16,14,0)
(81,2,0)
(348,594,0)
(593,257,0)
(471,320,0)
(185,72,0)
(550,320,0)
(255,538,0)
(160,258,0)
(222,408,0)
(494,13,0)
(272,289,0)
(362,250,0)
(426,194,0)
(111,255,0)
(181,320,0)
(496,75,0)
(561,80,0)
(571,98,0)
(72,554,0)
(41,13,0)
(192,610,0)
(39,149,0)
(464,209,0)
(159,401,0)
(531,117,0)
(183,588,0)
(354,208,0)
(203,541,0)
(174,242,0)
(121,320,0)
(238,151,0)
(93,397,0)
(275,490,0)
(544,320,0)
(602,100,0)
(103,368,0)
(448,190,0)
(112,389,0)
(164,162,0)
(34,7,0)
(517,578,0)
(376,402,0)
(543,527,0)
(238,85,0)
(145,517,0)
(143,408,0)
(527,266,0)
(559,362,0)
(354,80,0)
(117,320,0)
(371,348,0)
(510,336,0)
(562,194,0)
(181,53,0)
(383,55,0)
(244,321,0)
(606,608,0)
(354,301,0)
(308,289,0)
(552,421,0)
(200,365,0)
(214,121,0)
(230,429,0)
(323,193,0)
(528,242,0)
(525,405,0)
(525,307,0)
(234,281,0)
(353,172,0)
(117,289,0)
(542,501,0)
(113,42,0)
(90,272,0)
(409,576,0)
(3,561,0)
(135,405,0)
(369,75,0)
(447,420,0)
(578,17,0)
(516,33,0)
(94,497,0)
(225,554,0)
(470,55,0)
(316,501,0)
(356,252,0)
(538,601,0)
(139,588,0)
(561,208,0)
(434,320,0)
(553,493,0)
(431,151,0)
(381,320,0)
(332,360,0)
(362,423,0)
(160,528,0)
(149,517,0)
(179,289,0)
(471,77,0)
(87,382,0)
(579,373,0)
(600,271,0)
(125,472,0)
(442,592,0)
(266,561,0)
(222,603,0)
(199,193,0)
(491,484,0)
(477,452,0)
(341,147,0)
(3,134,0)
(423,362,0)
(193,100,0)
(216,434,0)
(610,94,0)
(303,272,0)
(86,532,0)
(483,553,0)
(501,516,0)
(109,518,0)
(443,429,0)
(52,503,0)
(561,301,0)
(309,320,0)
(2,81,0)
(405,33,0)
(503,348,0)
(537,421,0)
(517,539,0)
(3,77,0)
(389,402,0)
(144,292,0)
(35,268,0)
(182,598,0)
(239,420,0)
(391,532,0)
(94,191,0)
(598,29,0)
(334,98,0)
(331,81,0)
(588,485,0)
(507,429,0)
(252,450,0)
(165,491,0)
(414,278,0)
(561,210,0)
(353,210,0)
(172,320,0)
(181,351,0)
(461,349,0)
(324,126,0)
(342,552,0)
(236,98,0)
(308,160,0)
(441,320,0)
(326,336,0)
(361,194,0)
(440,85,0)
(600,406,0)
(427,50,0)
(120,269,0)
(312,126,0)
(478,399,0)
(475,420,0)
(12,126,0)
(80,305,0)
(50,179,0)
(550,316,0)
(256,556,0)
(349,77,0)
(227,156,0)
(42,320,0)
(231,381,0)
(274,542,0)
(552,342,0)
(310,596,0)
(68,219,0)
(435,575,0)
(120,123,0)
(226,538,0)
(561,226,0)
(406,320,0)
(452,514,0)
(582,390,0)
(437,210,0)
(100,602,0)
(25,576,0)
(590,14,0)
(538,94,0)
(488,471,0)
(467,575,0)
(354,545,0)
(293,608,0)
(260,309,0)
(67,153,0)
(323,361,0)
(19,516,0)
(373,382,0)
(255,191,0)
(537,107,0)
(472,320,0)
(7,320,0)
(399,278,0)
(76,399,0)
(54,375,0)
(497,450,0)
(509,50,0)
(367,77,0)
(449,297,0)
(198,86,0)
(576,383,0)
(539,320,0)
(556,452,0)
(307,525,0)
(14,590,0)
(223,268,0)
(437,379,0)
(397,601,0)
(343,434,0)
(532,555,0)
(227,604,0)
(471,561,0)
(65,33,0)
(493,122,0)
(229,394,0)
(344,592,0)
(482,167,0)
(233,429,0)
(292,144,0)
(86,305,0)
(407,452,0)
(72,185,0)
(193,323,0)
(196,366,0)
(154,121,0)
(153,159,0)
(41,349,0)
(7,289,0)
(398,464,0)
(411,498,0)
(516,501,0)
(311,320,0)
(467,250,0)
(152,588,0)
(98,571,0)
(267,85,0)
(41,266,0)
(399,338,0)
(286,14,0)
(410,430,0)
(380,296,0)
(93,282,0)
(116,429,0)
(355,70,0)
(408,222,0)
(382,428,0)
(349,320,0)
(401,159,0)
(353,545,0)
(402,376,0)
(428,395,0)
(317,531,0)
(255,495,0)
(609,238,0)
(353,379,0)
(343,502,0)
(545,77,0)
(556,594,0)
(270,263,0)
(84,401,0)
(339,331,0)
(393,420,0)
(427,455,0)
(191,94,0)
(292,420,0)
(299,305,0)
(63,575,0)
(237,87,0)
(402,389,0)
(55,383,0)
(95,477,0)
(0,206,0)
(43,323,0)
(585,17,0)
(520,235,0)
(491,33,0)
(50,427,0)
(325,556,0)
(290,278,0)
(297,449,0)
(297,320,0)
(16,430,0)
(603,516,0)
(458,123,0)
(176,551,0)
(490,229,0)
(202,2,0)
(284,2,0)
(554,72,0)
(454,101,0)
(184,219,0)
(353,80,0)
(518,156,0)
(40,187,0)
(424,272,0)
(480,414,0)
(353,539,0)
(178,393,0)
(354,379,0)
(285,263,0)
(590,101,0)
(592,320,0)
(101,604,0)
(436,441,0)
(192,538,0)
(42,113,0)
(187,40,0)
(316,550,0)
(375,320,0)
(406,194,0)
(503,397,0)
(160,308,0)
(517,172,0)
(212,527,0)
(354,539,0)
(528,160,0)
(469,172,0)
(253,289,0)
(594,81,0)
(520,185,0)
(91,206,0)
(573,320,0)
(187,326,0)
(603,267,0)
(17,282,0)
(541,53,0)
(555,320,0)
(217,562,0)
(441,343,0)
(513,551,0)
(569,600,0)
(175,271,0)
(242,194,0)
(358,258,0)
(134,3,0)
(345,471,0)
(420,567,0)
(273,341,0)
(100,193,0)
(13,41,0)
(21,206,0)
(242,528,0)
(289,308,0)
(527,495,0)
(272,303,0)
(477,66,0)
(121,517,0)
(15,93,0)
(210,282,0)
(353,208,0)
(106,86,0)
(471,345,0)
(605,289,0)
(439,307,0)
(107,498,0)
(490,485,0)
(277,235,0)
(81,331,0)
(399,320,0)
(126,312,0)
(313,226,0)
(530,525,0)
(589,523,0)
(133,87,0)
(156,227,0)
(9,429,0)
(170,389,0)
(517,268,0)
(157,255,0)
(548,185,0)
(346,537,0)
(183,0,0)
(527,320,0)
(413,42,0)
(296,320,0)
(266,527,0)
(179,320,0)
(504,122,0)
(60,209,0)
(232,296,0)
(161,147,0)
(201,402,0)
(331,264,0)
(190,320,0)
(238,609,0)
(563,309,0)
(397,503,0)
(421,537,0)
(366,421,0)
(123,289,0)
(159,376,0)
(13,495,0)
(46,172,0)
(253,355,0)
(479,107,0)
(571,609,0)
(399,517,0)
(385,3,0)
(300,91,0)
(580,181,0)
(539,604,0)
(5,490,0)
(263,320,0)
(208,53,0)
(508,93,0)
(570,429,0)
(93,320,0)
(322,379,0)
(535,550,0)
(587,17,0)
(559,65,0)
(182,450,0)
(484,516,0)
(395,263,0)
(393,264,0)
(517,80,0)
(609,602,0)
(263,395,0)
(505,301,0)
(445,583,0)
(517,592,0)
(470,320,0)
(455,427,0)
(575,467,0)
(353,226,0)
(607,398,0)
(512,545,0)
(338,399,0)
(142,235,0)
(350,390,0)
(83,545,0)
(598,182,0)
(75,320,0)
(261,471,0)
(264,254,0)
(118,318,0)
(122,493,0)
(210,320,0)
(500,42,0)
(354,137,0)
(262,297,0)
(126,320,0)
(484,523,0)
(400,267,0)
(301,320,0)
(89,533,0)
(81,594,0)
(29,598,0)
(250,362,0)
(128,108,0)
(121,278,0)
(508,121,0)
(201,430,0)
(376,159,0)
(421,366,0)
(206,0,0)
(140,366,0)
(423,491,0)
(545,320,0)
(221,279,0)
(417,440,0)
(211,363,0)
(561,172,0)
(561,592,0)
(243,603,0)
(515,167,0)
(517,204,0)
(546,455,0)
(128,405,0)
(224,528,0)
(219,452,0)
(599,429,0)
(451,269,0)
(80,320,0)
(269,120,0)
(17,578,0)
(370,93,0)
(572,430,0)
(561,268,0)
(354,204,0)
(335,282,0)
(257,269,0)
(144,452,0)
(453,554,0)
(602,33,0)
(290,320,0)
(438,609,0)
(489,94,0)
(14,16,0)
(44,299,0)
(450,182,0)
(98,289,0)
(437,226,0)
(114,292,0)
(299,320,0)
(349,561,0)
(247,473,0)
(336,326,0)
(86,320,0)
(557,117,0)
(252,452,0)
(486,128,0)
(433,179,0)
(553,311,0)
(586,311,0)
(24,303,0)
(132,179,0)
(364,400,0)
(609,571,0)
(558,473,0)
(235,520,0)
(485,257,0)
(576,409,0)
(459,122,0)
(338,70,0)
(605,320,0)
(267,603,0)
(240,449,0)
(258,320,0)
(368,373,0)
(297,397,0)
(70,455,0)
(306,555,0)
(70,338,0)
(61,573,0)
(360,149,0)
(172,495,0)
(577,495,0)
(517,379,0)
(400,77,0)
(209,464,0)
(305,56,0)
(382,373,0)
(372,241,0)
(353,268,0)
(159,153,0)
(131,400,0)
(498,107,0)
(336,516,0)
(204,320,0)
(180,429,0)
(96,40,0)
(485,583,0)
(75,100,0)
(71,204,0)
(185,520,0)
(146,222,0)
(502,343,0)
(329,33,0)
(283,25,0)
(565,544,0)
(422,544,0)
(561,266,0)
(59,463,0)
(269,151,0)
(576,25,0)
(354,145,0)
(506,546,0)
(253,320,0)
(4,190,0)
(574,355,0)
(161,463,0)
(197,253,0)
(226,320,0)
(326,409,0)
(338,271,0)
(375,130,0)
(373,368,0)
(235,320,0)
(77,367,0)
(501,542,0)
(194,391,0)
(519,408,0)
(598,66,0)
(265,429,0)
(481,539,0)
(347,406,0)
(425,353,0)
(517,545,0)
(457,145,0)
(354,592,0)
(409,134,0)
(151,238,0)
(378,367,0)
(107,567,0)
(384,427,0)
(126,289,0)
(353,429,0)
(104,33,0)
(311,553,0)
(303,536,0)
(213,108,0)
(455,546,0)
(257,546,0)
(406,600,0)
(7,440,0)
(45,429,0)
(48,65,0)
(473,397,0)
(550,53,0)
(228,470,0)
(355,253,0)
(229,312,0)
(330,368,0)
(259,559,0)
(272,320,0)
(218,339,0)
(357,253,0)
(610,192,0)
(468,475,0)
(55,470,0)
(72,65,0)
(26,426,0)
(191,255,0)
(518,206,0)
(446,118,0)
(434,343,0)
(375,53,0)
(354,210,0)
(353,145,0)
(318,342,0)
(423,365,0)
(472,604,0)
(428,382,0)
(418,91,0)
(354,226,0)
(498,452,0)
(108,128,0)
(544,523,0)
(156,518,0)
(426,320,0)
(525,516,0)
(66,598,0)
(251,522,0)
(189,610,0)
(449,503,0)
(575,278,0)
(575,517,0)
(168,429,0)
(123,120,0)
(99,254,0)
(562,320,0)
(379,397,0)
(151,583,0)
(70,355,0)
(437,172,0)
(581,311,0)
(25,283,0)
(130,375,0)
(456,447,0)
(400,320,0)
(591,332,0)
(391,194,0)
(333,372,0)
(36,379,0)
(100,75,0)
(517,414,0)
(327,562,0)
(185,516,0)
(295,493,0)
(400,561,0)
(79,353,0)
(149,360,0)
(421,552,0)
(88,406,0)
(450,252,0)
(450,497,0)
(249,472,0)
(440,7,0)
(141,336,0)
(30,361,0)
(73,13,0)
(78,602,0)
(169,29,0)
(300,137,0)
(312,229,0)
(121,508,0)
(123,320,0)
(517,208,0)
(64,166,0)
(183,531,0)
(298,498,0)
(177,398,0)
(546,583,0)
(517,145,0)
(394,229,0)
(592,561,0)
(257,485,0)
(47,153,0)
(186,312,0)
(389,320,0)
(352,429,0)
(348,601,0)
(341,452,0)
(119,120,0)
(195,426,0)
(332,320,0)
(493,491,0)
(93,508,0)
(179,50,0)
(390,395,0)
(414,320,0)
(66,475,0)
(540,361,0)
(187,405,0)
(541,430,0)
(441,604,0)
(85,238,0)
(365,423,0)
(343,441,0)
(254,452,0)
(231,463,0)
(340,7,0)
(98,320,0)
(153,320,0)
(318,464,0)
(377,29,0)
(584,420,0)
(559,516,0)
(328,434,0)
(190,542,0)
(404,559,0)
(605,307,0)
(586,581,1)
(419,415,1)
(433,132,1)
(496,78,1)
(407,463,1)
(393,420,1)
(276,409,1)
(397,503,1)
(258,320,1)
(121,278,1)
(353,425,1)
(296,232,1)
(35,151,1)
(101,396,1)
(606,573,1)
(495,577,1)
(328,216,1)
(19,536,1)
(52,473,1)
(561,80,1)
(108,213,1)
(42,320,1)
(81,2,1)
(366,140,1)
(8,526,1)
(354,145,1)
(411,298,1)
(498,452,1)
(575,517,1)
(1,421,1)
(255,538,1)
(14,16,1)
(318,464,1)
(42,500,1)
(36,322,1)
(545,320,1)
(301,320,1)
(523,589,1)
(219,68,1)
(332,591,1)
(556,325,1)
(402,389,1)
(421,537,1)
(388,204,1)
(517,578,1)
(102,84,1)
(152,531,1)
(418,156,1)
(517,145,1)
(353,80,1)
(7,320,1)
(490,320,1)
(360,332,1)
(224,242,1)
(269,120,1)
(94,610,1)
(422,565,1)
(55,470,1)
(551,513,1)
(170,112,1)
(503,287,1)
(179,289,1)
(323,361,1)
(341,273,1)
(258,358,1)
(295,122,1)
(531,117,1)
(123,11,1)
(96,336,1)
(301,476,1)
(261,77,1)
(577,172,1)
(585,587,1)
(297,320,1)
(395,263,1)
(242,320,1)
(364,431,1)
(401,53,1)
(302,410,1)
(303,24,1)
(107,498,1)
(101,320,1)
(400,561,1)
(468,477,1)
(75,320,1)
(83,376,1)
(359,457,1)
(368,330,1)
(4,19,1)
(536,492,1)
(113,42,1)
(182,598,1)
(156,227,1)
(523,544,1)
(446,464,1)
(213,465,1)
(396,454,1)
(15,121,1)
(87,237,1)
(463,387,1)
(345,471,1)
(360,149,1)
(58,38,1)
(177,292,1)
(335,210,1)
(128,405,1)
(553,311,1)
(222,146,1)
(417,7,1)
(476,505,1)
(351,181,1)
(30,540,1)
(70,355,1)
(95,29,1)
(185,516,1)
(199,323,1)
(501,316,1)
(379,320,1)
(312,186,1)
(138,40,1)
(363,18,1)
(372,107,1)
(313,397,1)
(354,172,1)
(238,85,1)
(376,159,1)
(486,108,1)
(449,297,1)
(59,495,1)
(249,472,1)
(134,363,1)
(471,320,1)
(399,76,1)
(145,359,1)
(477,452,1)
(420,584,1)
(240,297,1)
(204,320,1)
(517,414,1)
(284,202,1)
(399,278,1)
(125,164,1)
(181,320,1)
(117,320,1)
(71,231,1)
(493,491,1)
(517,80,1)
(592,320,1)
(361,194,1)
(354,268,1)
(366,452,1)
(470,320,1)
(85,267,1)
(605,8,1)
(143,400,1)
(74,502,1)
(277,142,1)
(298,479,1)
(406,194,1)
(119,123,1)
(326,187,1)
(515,388,1)
(172,46,1)
(375,53,1)
(101,604,1)
(220,342,1)
(161,49,1)
(493,122,1)
(484,523,1)
(93,282,1)
(227,320,1)
(481,524,1)
(524,394,1)
(423,92,1)
(353,301,1)
(141,510,1)
(428,395,1)
(299,305,1)
(592,344,1)
(539,320,1)
(32,348,1)
(257,269,1)
(263,320,1)
(82,604,1)
(237,133,1)
(437,379,1)
(490,485,1)
(578,508,1)
(363,320,1)
(529,446,1)
(212,592,1)
(517,592,1)
(283,483,1)
(540,75,1)
(379,36,1)
(117,549,1)
(271,516,1)
(389,53,1)
(471,77,1)
(367,320,1)
(131,364,1)
(163,428,1)
(400,77,1)
(307,439,1)
(435,63,1)
(381,392,1)
(187,405,1)
(489,191,1)
(500,413,1)
(441,604,1)
(390,320,1)
(189,192,1)
(292,144,1)
(275,485,1)
(434,320,1)
(231,381,1)
(527,320,1)
(562,217,1)
(511,39,1)
(63,602,1)
(267,400,1)
(362,423,1)
(525,307,1)
(255,320,1)
(98,289,1)
(314,527,1)
(520,150,1)
(556,452,1)
(134,3,1)
(11,458,1)
(602,100,1)
(13,320,1)
(25,576,1)
(80,521,1)
(437,226,1)
(393,127,1)
(473,397,1)
(354,208,1)
(74,244,1)
(488,261,1)
(309,563,1)
(201,430,1)
(126,289,1)
(559,516,1)
(413,430,1)
(20,52,1)
(29,107,1)
(451,268,1)
(164,113,1)
(382,87,1)
(70,338,1)
(149,320,1)
(483,553,1)
(338,271,1)
(67,401,1)
(353,204,1)
(268,223,1)
(531,317,1)
(399,320,1)
(438,85,1)
(23,378,1)
(578,17,1)
(7,34,1)
(519,143,1)
(595,466,1)
(190,194,1)
(209,452,1)
(448,4,1)
(261,561,1)
(120,123,1)
(591,474,1)
(72,185,1)
(157,226,1)
(401,102,1)
(279,221,1)
(370,15,1)
(472,604,1)
(471,561,1)
(234,562,1)
(467,296,1)
(90,289,1)
(211,3,1)
(573,319,1)
(22,95,1)
(325,256,1)
(29,169,1)
(232,380,1)
(255,495,1)
(198,106,1)
(517,426,1)
(423,491,1)
(172,320,1)
(406,88,1)
(469,282,1)
(185,548,1)
(194,391,1)
(197,338,1)
(558,379,1)
(349,461,1)
(208,320,1)
(326,336,1)
(148,286,1)
(536,303,1)
(17,585,1)
(436,82,1)
(112,130,1)
(432,220,1)
(188,452,1)
(7,289,1)
(517,301,1)
(82,249,1)
(238,609,1)
(174,27,1)
(68,184,1)
(332,320,1)
(31,539,1)
(605,289,1)
(315,218,1)
(528,224,1)
(289,308,1)
(79,437,1)
(311,517,1)
(454,343,1)
(345,309,1)
(311,320,1)
(331,339,1)
(403,528,1)
(544,320,1)
(235,194,1)
(228,276,1)
(160,258,1)
(383,55,1)
(516,501,1)
(227,105,1)
(81,331,1)
(384,70,1)
(509,179,1)
(338,399,1)
(517,210,1)
(472,171,1)
(398,107,1)
(149,278,1)
(354,80,1)
(430,572,1)
(150,235,1)
(404,467,1)
(17,282,1)
(74,310,1)
(272,320,1)
(441,436,1)
(292,420,1)
(466,191,1)
(179,433,1)
(573,320,1)
(272,289,1)
(480,345,1)
(380,575,1)
(139,152,1)
(66,477,1)
(562,320,1)
(494,349,1)
(188,341,1)
(394,229,1)
(372,333,1)
(362,559,1)
(263,285,1)
(498,411,1)
(414,320,1)
(350,382,1)
(49,292,1)
(535,487,1)
(412,302,1)
(537,107,1)
(377,551,1)
(336,141,1)
(610,497,1)
(353,414,1)
(5,275,1)
(561,208,1)
(368,430,1)
(260,471,1)
(175,600,1)
(559,259,1)
(330,103,1)
(390,305,1)
(453,48,1)
(464,209,1)
(247,558,1)
(467,575,1)
(347,399,1)
(437,172,1)
(192,320,1)
(502,343,1)
(218,2,1)
(517,268,1)
(549,557,1)
(472,320,1)
(340,267,1)
(587,145,1)
(573,194,1)
(555,306,1)
(236,334,1)
(239,231,1)
(190,320,1)
(598,66,1)
(77,367,1)
(485,257,1)
(387,59,1)
(353,379,1)
(123,320,1)
(373,368,1)
(121,214,1)
(447,420,1)
(281,234,1)
(126,320,1)
(316,550,1)
(270,390,1)
(13,495,1)
(285,270,1)
(548,520,1)
(128,486,1)
(561,204,1)
(300,91,1)
(226,320,1)
(517,226,1)
(109,227,1)
(202,556,1)
(354,280,1)
(406,320,1)
(557,21,1)
(588,320,1)
(165,516,1)
(103,579,1)
(365,200,1)
(439,605,1)
(182,551,1)
(94,191,1)
(178,254,1)
(440,417,1)
(354,592,1)
(39,517,1)
(196,537,1)
(538,94,1)
(248,129,1)
(115,80,1)
(609,602,1)
(53,541,1)
(561,592,1)
(478,506,1)
(582,350,1)
(541,460,1)
(530,135,1)
(504,311,1)
(94,489,1)
(341,452,1)
(293,299,1)
(186,126,1)
(60,398,1)
(252,356,1)
(336,516,1)
(133,194,1)
(93,370,1)
(561,210,1)
(16,37,1)
(78,65,1)
(487,542,1)
(559,65,1)
(473,282,1)
(288,313,1)
(354,210,1)
(73,494,1)
(544,422,1)
(257,593,1)
(117,289,1)
(400,131,1)
(80,320,1)
(389,320,1)
(517,545,1)
(250,362,1)
(491,484,1)
(123,289,1)
(111,157,1)
(38,114,1)
(100,75,1)
(525,516,1)
(226,288,1)
(253,320,1)
(74,25,1)
(561,545,1)
(192,495,1)
(561,539,1)
(376,402,1)
(351,281,1)
(294,318,1)
(501,542,1)
(225,453,1)
(609,571,1)
(547,165,1)
(437,432,1)
(605,320,1)
(297,397,1)
(127,178,1)
(200,207,1)
(503,52,1)
(209,337,1)
(140,196,1)
(371,342,1)
(473,247,1)
(555,320,1)
(3,561,1)
(144,58,1)
(227,604,1)
(354,379,1)
(291,468,1)
(449,240,1)
(193,323,1)
(353,208,1)
(0,183,1)
(484,516,1)
(546,455,1)
(470,561,1)
(92,365,1)
(98,320,1)
(455,70,1)
(176,252,1)
(179,320,1)
(358,403,1)
(452,219,1)
(210,248,1)
(357,197,1)
(21,502,1)
(327,181,1)
(356,57,1)
(10,597,1)
(458,451,1)
(317,117,1)
(17,320,1)
(297,282,1)
(72,554,1)
(154,17,1)
(561,266,1)
(385,283,1)
(502,590,1)
(342,552,1)
(423,365,1)
(244,351,1)
(527,495,1)
(264,254,1)
(79,354,1)
(88,347,1)
(354,204,1)
(474,149,1)
(331,264,1)
(517,539,1)
(361,30,1)
(610,189,1)
(153,47,1)
(267,603,1)
(349,561,1)
(581,250,1)
(75,369,1)
(204,304,1)
(415,414,1)
(169,377,1)
(374,158,1)
(434,328,1)
(346,294,1)
(425,376,1)
(297,262,1)
(455,427,1)
(543,212,1)
(266,527,1)
(132,384,1)
(181,53,1)
(219,320,1)
(250,467,1)
(450,182,1)
(539,481,1)
(39,278,1)
(216,441,1)
(428,382,1)
(460,203,1)
(206,0,1)
(534,345,1)
(517,379,1)
(427,65,1)
(475,291,1)
(255,111,1)
(344,442,1)
(128,108,1)
(171,125,1)
(25,283,1)
(512,83,1)
(517,204,1)
(215,416,1)
(242,194,1)
(283,250,1)
(48,405,1)
(450,252,1)
(280,300,1)
(37,148,1)
(513,176,1)
(65,72,1)
(203,208,1)
(550,136,1)
(544,289,1)
(375,54,1)
(187,40,1)
(593,269,1)
(79,353,1)
(353,145,1)
(564,99,1)
(268,320,1)
(461,314,1)
(375,320,1)
(400,320,1)
(610,192,1)
(571,245,1)
(193,516,1)
(399,517,1)
(354,539,1)
(561,301,1)
(258,53,1)
(311,586,1)
(560,188,1)
(97,385,1)
(457,428,1)
(408,194,1)
(156,518,1)
(532,555,1)
(381,320,1)
(590,101,1)
(26,305,1)
(87,320,1)
(477,22,1)
(408,320,1)
(333,447,1)
(257,546,1)
(561,145,1)
(99,339,1)
(114,107,1)
(142,554,1)
(343,434,1)
(561,379,1)
(431,546,1)
(282,335,1)
(390,582,1)
(532,86,1)
(242,174,1)
(266,41,1)
(517,208,1)
(561,226,1)
(565,547,1)
(311,278,1)
(149,517,1)
(427,50,1)
(471,488,1)
(561,426,1)
(528,242,1)
(130,375,1)
(353,539,1)
(144,452,1)
(479,420,1)
(354,226,1)
(135,491,1)
(369,496,1)
(245,98,1)
(208,10,1)
(86,198,1)
(259,404,1)
(133,606,1)
(409,134,1)
(112,53,1)
(3,320,1)
(125,156,1)
(409,326,1)
(195,26,1)
(441,320,1)
(392,560,1)
(600,569,1)
(526,530,1)
(305,279,1)
(319,61,1)
(271,175,1)
(243,222,1)
(527,538,1)
(353,226,1)
(86,305,1)
(254,452,1)
(13,538,1)
(12,490,1)
(235,320,1)
(54,534,1)
(600,406,1)
(597,515,1)
(414,6,1)
(354,414,1)
(542,274,1)
(85,440,1)
(607,177,1)
(153,320,1)
(354,301,1)
(183,531,1)
(274,190,1)
(41,349,1)
(231,463,1)
(207,559,1)
(279,430,1)
(541,430,1)
(34,340,1)
(223,35,1)
(149,511,1)
(355,253,1)
(569,406,1)
(508,93,1)
(136,535,1)
(537,346,1)
(354,426,1)
(576,383,1)
(604,31,1)
(121,320,1)
(253,289,1)
(437,210,1)
(361,320,1)
(579,87,1)
(264,393,1)
(229,312,1)
(603,516,1)
(348,594,1)
(185,520,1)
(503,348,1)
(91,418,1)
(159,401,1)
(55,128,1)
(527,543,1)
(506,25,1)
(18,211,1)
(93,397,1)
(395,390,1)
(576,409,1)
(290,419,1)
(229,490,1)
(465,470,1)
(254,564,1)
(475,420,1)
(561,414,1)
(214,154,1)
(190,448,1)
(353,426,1)
(492,303,1)
(51,96,1)
(584,239,1)
(589,544,1)
(550,320,1)
(47,67,1)
(416,1,1)
(122,459,1)
(334,438,1)
(572,412,1)
(126,324,1)
(271,600,1)
(563,260,1)
(281,562,1)
(6,480,1)
(382,373,1)
(521,124,1)
(93,320,1)
(353,545,1)
(299,44,1)
(118,529,1)
(503,449,1)
(91,206,1)
(355,574,1)
(27,301,1)
(272,424,1)
(571,98,1)
(201,374,1)
(66,475,1)
(575,435,1)
(307,605,1)
(367,23,1)
(40,51,1)
(304,71,1)
(262,20,1)
(562,194,1)
(440,7,1)
(389,170,1)
(473,320,1)
(580,163,1)
(121,517,1)
(312,126,1)
(24,272,1)
(252,452,1)
(210,320,1)
(497,450,1)
(554,320,1)
(391,532,1)
(114,372,1)
(287,52,1)
(508,121,1)
(13,73,1)
(588,139,1)
(222,408,1)
(253,357,1)
(447,456,1)
(405,525,1)
(542,190,1)
(598,29,1)
(94,497,1)
(343,441,1)
(322,497,1)
(87,305,1)
(442,360,1)
(520,235,1)
(235,277,1)
(181,580,1)
(183,588,1)
(57,32,1)
(490,5,1)
(306,444,1)
(308,160,1)
(574,253,1)
(603,243,1)
(493,295,1)
(269,151,1)
(518,206,1)
(572,320,1)
(84,402,1)
(603,222,1)
(3,77,1)
(459,504,1)
(588,485,1)
(339,315,1)
(145,320,1)
(86,320,1)
(342,318,1)
(41,13,1)
(299,320,1)
(349,77,1)
(105,386,1)
(256,371,1)
(353,172,1)
(336,602,1)
(16,430,1)
(221,115,1)
(61,293,1)
(160,528,1)
(575,320,1)
(449,348,1)
(510,134,1)
(561,172,1)
(401,320,1)
(309,320,1)
(286,101,1)
(378,545,1)
(518,109,1)
(2,284,1)
(50,179,1)
(552,421,1)
(192,538,1)
(444,426,1)
(398,607,1)
(553,493,1)
(46,469,1)
(303,272,1)
(159,153,1)
(561,268,1)
(324,12,1)
(426,320,1)
(464,398,1)
(106,555,1)
(594,556,1)
(353,592,1)
(402,201,1)
(408,519,1)
(310,536,1)
(296,320,1)
(590,14,1)
(323,43,1)
(187,138,1)
(505,351,1)
(146,408,1)
(184,407,1)
(575,278,1)
(517,172,1)
(44,74,1)
(158,389,1)
(273,161,1)
(456,538,1)
(290,320,1)
(421,366,1)
(424,90,1)
(3,97,1)
(151,238,1)
(193,199,1)
(594,81,1)
(120,119,1)
(353,268,1)
(76,478,1)
(43,361,1)
(318,118,1)
(191,255,1)
(470,228,1)
(192,595,1)
(349,320,1)
(98,236,1)
(545,512,1)
(129,113,1)
(337,60,1)
(354,545,1)
(124,360,1)
(17,397,1)
(386,206,1)
(470,77,1)
(552,215,1)
(100,193,1)
(426,195,1)
(161,463,1)
(278,290,1)
(217,327,1)
(550,53,1)
(353,210,1)
(50,509,1)
(339,107,1)
(554,225,1)
(575,320,2)
(224,351,2)
(342,552,2)
(555,360,2)
(592,360,2)
(266,360,2)
(149,428,2)
(267,400,2)
(597,231,2)
(87,502,2)
(536,303,2)
(278,345,2)
(428,502,2)
(515,231,2)
(94,191,2)
(190,536,2)
(517,80,2)
(483,553,2)
(467,296,2)
(354,414,2)
(376,345,2)
(94,342,2)
(477,452,2)
(50,25,2)
(54,345,2)
(343,156,2)
(534,345,2)
(457,428,2)
(471,561,2)
(319,502,2)
(527,538,2)
(218,342,2)
(354,80,2)
(588,502,2)
(160,528,2)
(267,25,2)
(289,308,2)
(314,360,2)
(118,292,2)
(278,290,2)
(437,342,2)
(610,192,2)
(209,292,2)
(470,77,2)
(133,536,2)
(237,502,2)
(563,360,2)
(368,351,2)
(257,25,2)
(75,536,2)
(93,428,2)
(468,342,2)
(389,320,2)
(193,323,2)
(94,610,2)
(133,25,2)
(424,351,2)
(311,278,2)
(87,305,2)
(553,311,2)
(151,238,2)
(353,80,2)
(484,536,2)
(517,268,2)
(437,226,2)
(519,25,2)
(183,588,2)
(449,348,2)
(122,250,2)
(581,250,2)
(561,145,2)
(368,25,2)
(588,320,2)
(102,402,2)
(26,360,2)
(214,428,2)
(296,320,2)
(384,25,2)
(388,231,2)
(126,320,2)
(91,206,2)
(70,25,2)
(191,255,2)
(311,320,2)
(348,594,2)
(68,113,2)
(25,536,2)
(517,539,2)
(293,25,2)
(561,226,2)
(176,342,2)
(98,25,2)
(390,305,2)
(149,320,2)
(105,502,2)
(501,536,2)
(272,320,2)
(130,375,2)
(257,269,2)
(508,428,2)
(473,282,2)
(209,452,2)
(441,113,2)
(253,289,2)
(87,25,2)
(161,463,2)
(428,351,2)
(565,536,2)
(291,342,2)
(592,320,2)
(518,502,2)
(296,536,2)
(467,536,2)
(578,428,2)
(408,25,2)
(297,397,2)
(123,320,2)
(552,421,2)
(249,156,2)
(236,25,2)
(484,516,2)
(544,536,2)
(70,338,2)
(584,231,2)
(16,343,2)
(237,536,2)
(239,231,2)
(242,194,2)
(23,376,2)
(550,320,2)
(25,283,2)
(452,219,2)
(562,320,2)
(498,452,2)
(70,355,2)
(279,430,2)
(501,542,2)
(434,156,2)
(182,342,2)
(606,573,2)
(404,467,2)
(313,342,2)
(305,360,2)
(600,406,2)
(281,428,2)
(133,351,2)
(435,536,2)
(323,361,2)
(300,91,2)
(98,289,2)
(144,231,2)
(594,81,2)
(181,428,2)
(25,576,2)
(459,250,2)
(312,126,2)
(474,345,2)
(297,52,2)
(400,320,2)
(603,516,2)
(332,345,2)
(374,345,2)
(134,3,2)
(330,360,2)
(387,113,2)
(600,25,2)
(554,320,2)
(580,428,2)
(606,351,2)
(606,502,2)
(395,390,2)
(126,289,2)
(88,25,2)
(422,536,2)
(107,498,2)
(473,342,2)
(372,342,2)
(393,342,2)
(385,283,2)
(140,318,2)
(503,52,2)
(437,210,2)
(360,149,2)
(165,536,2)
(467,575,2)
(411,231,2)
(10,231,2)
(571,25,2)
(190,194,2)
(502,25,2)
(511,428,2)
(590,101,2)
(381,113,2)
(513,342,2)
(124,360,2)
(182,551,2)
(510,134,2)
(380,536,2)
(540,536,2)
(93,320,2)
(271,516,2)
(561,426,2)
(605,536,2)
(242,320,2)
(398,292,2)
(550,536,2)
(254,452,2)
(250,536,2)
(358,351,2)
(117,320,2)
(354,172,2)
(561,379,2)
(65,72,2)
(119,25,2)
(392,292,2)
(517,545,2)
(399,278,2)
(106,360,2)
(42,320,2)
(579,25,2)
(269,120,2)
(354,592,2)
(409,283,2)
(392,113,2)
(211,283,2)
(181,320,2)
(160,258,2)
(151,25,2)
(316,536,2)
(121,278,2)
(587,428,2)
(44,351,2)
(531,117,2)
(342,292,2)
(201,231,2)
(337,292,2)
(397,503,2)
(503,348,2)
(20,52,2)
(406,320,2)
(393,420,2)
(446,292,2)
(17,282,2)
(268,320,2)
(373,368,2)
(426,360,2)
(394,229,2)
(517,379,2)
(318,292,2)
(419,345,2)
(389,53,2)
(258,351,2)
(353,208,2)
(103,360,2)
(255,320,2)
(257,546,2)
(183,531,2)
(101,343,2)
(430,572,2)
(378,376,2)
(182,598,2)
(179,320,2)
(346,318,2)
(441,320,2)
(128,409,2)
(347,25,2)
(520,536,2)
(3,320,2)
(92,467,2)
(463,113,2)
(355,25,2)
(517,414,2)
(131,25,2)
(517,301,2)
(229,312,2)
(343,441,2)
(247,342,2)
(293,536,2)
(485,257,2)
(57,342,2)
(472,113,2)
(369,536,2)
(61,25,2)
(29,107,2)
(73,360,2)
(197,25,2)
(101,604,2)
(333,342,2)
(3,561,2)
(368,536,2)
(549,502,2)
(271,25,2)
(206,0,2)
(483,250,2)
(561,204,2)
(376,231,2)
(66,477,2)
(524,25,2)
(255,342,2)
(471,360,2)
(401,53,2)
(345,309,2)
(187,40,2)
(96,134,2)
(274,536,2)
(87,320,2)
(226,342,2)
(238,85,2)
(307,536,2)
(253,320,2)
(148,343,2)
(310,536,2)
(112,231,2)
(55,409,2)
(389,345,2)
(382,360,2)
(503,342,2)
(153,320,2)
(297,282,2)
(364,25,2)
(498,231,2)
(545,376,2)
(82,25,2)
(326,134,2)
(373,351,2)
(242,351,2)
(455,25,2)
(490,485,2)
(199,536,2)
(183,502,2)
(582,382,2)
(285,382,2)
(172,113,2)
(546,25,2)
(85,25,2)
(434,25,2)
(328,156,2)
(497,342,2)
(100,75,2)
(41,360,2)
(561,268,2)
(553,493,2)
(428,360,2)
(480,345,2)
(219,113,2)
(360,345,2)
(502,343,2)
(428,382,2)
(284,342,2)
(179,25,2)
(135,536,2)
(490,25,2)
(311,250,2)
(81,331,2)
(77,367,2)
(203,231,2)
(231,113,2)
(188,292,2)
(575,536,2)
(532,360,2)
(545,320,2)
(79,353,2)
(561,592,2)
(349,77,2)
(452,113,2)
(455,427,2)
(77,376,2)
(30,536,2)
(76,25,2)
(573,320,2)
(558,342,2)
(502,156,2)
(91,156,2)
(354,210,2)
(505,351,2)
(354,545,2)
(290,320,2)
(41,13,2)
(8,536,2)
(376,402,2)
(253,25,2)
(222,25,2)
(97,283,2)
(561,210,2)
(501,316,2)
(508,93,2)
(103,536,2)
(113,42,2)
(31,25,2)
(74,25,2)
(561,545,2)
(82,113,2)
(245,25,2)
(473,397,2)
(40,134,2)
(372,107,2)
(208,320,2)
(353,172,2)
(5,25,2)
(41,349,2)
(170,345,2)
(156,518,2)
(375,320,2)
(309,360,2)
(61,536,2)
(194,360,2)
(607,292,2)
(58,231,2)
(530,536,2)
(235,320,2)
(516,536,2)
(120,25,2)
(375,345,2)
(433,25,2)
(520,235,2)
(561,414,2)
(37,343,2)
(373,360,2)
(192,320,2)
(436,113,2)
(441,604,2)
(149,517,2)
(572,320,2)
(532,86,2)
(486,409,2)
(362,423,2)
(138,134,2)
(273,292,2)
(318,118,2)
(159,153,2)
(171,156,2)
(402,389,2)
(466,191,2)
(215,318,2)
(561,360,2)
(13,495,2)
(338,25,2)
(207,467,2)
(229,490,2)
(589,536,2)
(353,268,2)
(231,381,2)
(427,50,2)
(554,536,2)
(264,254,2)
(495,113,2)
(308,351,2)
(437,172,2)
(423,365,2)
(114,231,2)
(152,502,2)
(417,25,2)
(610,497,2)
(484,523,2)
(367,376,2)
(405,536,2)
(134,283,2)
(39,345,2)
(263,382,2)
(426,320,2)
(595,191,2)
(508,121,2)
(188,113,2)
(112,345,2)
(349,320,2)
(35,25,2)
(575,517,2)
(381,320,2)
(551,342,2)
(237,25,2)
(109,502,2)
(517,226,2)
(555,320,2)
(163,428,2)
(159,401,2)
(349,360,2)
(531,502,2)
(276,409,2)
(338,271,2)
(306,360,2)
(303,351,2)
(336,602,2)
(7,25,2)
(606,536,2)
(299,305,2)
(103,25,2)
(81,2,2)
(464,398,2)
(261,360,2)
(217,428,2)
(335,113,2)
(299,320,2)
(579,360,2)
(368,360,2)
(345,360,2)
(532,555,2)
(149,278,2)
(521,360,2)
(87,536,2)
(300,156,2)
(432,342,2)
(550,53,2)
(418,156,2)
(13,360,2)
(127,342,2)
(156,227,2)
(14,343,2)
(21,502,2)
(517,204,2)
(400,25,2)
(349,561,2)
(195,360,2)
(120,123,2)
(63,536,2)
(201,345,2)
(579,351,2)
(312,25,2)
(377,342,2)
(243,25,2)
(50,179,2)
(308,160,2)
(490,320,2)
(473,320,2)
(319,25,2)
(475,420,2)
(280,156,2)
(539,25,2)
(361,320,2)
(298,231,2)
(311,517,2)
(181,53,2)
(489,191,2)
(339,107,2)
(235,536,2)
(491,484,2)
(250,467,2)
(449,297,2)
(509,25,2)
(479,231,2)
(193,516,2)
(546,455,2)
(421,366,2)
(192,538,2)
(517,428,2)
(18,283,2)
(286,343,2)
(255,538,2)
(60,292,2)
(240,52,2)
(179,289,2)
(123,25,2)
(187,405,2)
(74,502,2)
(186,25,2)
(370,428,2)
(415,345,2)
(598,342,2)
(299,25,2)
(605,289,2)
(353,545,2)
(141,134,2)
(526,536,2)
(465,409,2)
(476,351,2)
(72,536,2)
(470,320,2)
(262,52,2)
(360,332,2)
(493,122,2)
(444,360,2)
(368,502,2)
(561,266,2)
(366,318,2)
(506,25,2)
(336,516,2)
(402,345,2)
(449,52,2)
(250,362,2)
(80,360,2)
(153,402,2)
(74,536,2)
(394,25,2)
(421,318,2)
(326,336,2)
(351,281,2)
(409,134,2)
(423,467,2)
(292,342,2)
(527,495,2)
(590,343,2)
(543,360,2)
(72,554,2)
(354,156,2)
(108,409,2)
(470,561,2)
(237,360,2)
(244,351,2)
(354,226,2)
(4,536,2)
(564,342,2)
(371,342,2)
(72,185,2)
(59,113,2)
(328,113,2)
(75,320,2)
(409,326,2)
(227,604,2)
(121,428,2)
(216,25,2)
(325,342,2)
(573,194,2)
(19,536,2)
(317,502,2)
(192,495,2)
(65,536,2)
(593,25,2)
(290,345,2)
(136,536,2)
(38,231,2)
(169,342,2)
(295,250,2)
(219,320,2)
(604,25,2)
(330,502,2)
(267,603,2)
(544,289,2)
(260,360,2)
(132,25,2)
(454,343,2)
(556,452,2)
(373,536,2)
(185,536,2)
(447,342,2)
(355,253,2)
(80,320,2)
(294,318,2)
(427,65,2)
(264,393,2)
(472,320,2)
(275,25,2)
(100,536,2)
(406,194,2)
(332,320,2)
(171,113,2)
(94,497,2)
(229,25,2)
(164,113,2)
(52,473,2)
(307,605,2)
(198,360,2)
(434,113,2)
(573,25,2)
(536,351,2)
(44,25,2)
(603,25,2)
(252,342,2)
(210,320,2)
(258,320,2)
(569,25,2)
(15,428,2)
(125,156,2)
(301,351,2)
(470,409,2)
(453,536,2)
(529,292,2)
(48,536,2)
(319,351,2)
(61,502,2)
(401,320,2)
(351,181,2)
(29,342,2)
(39,428,2)
(399,25,2)
(353,145,2)
(562,194,2)
(277,536,2)
(561,80,2)
(299,536,2)
(464,209,2)
(400,77,2)
(461,360,2)
(408,194,2)
(238,25,2)
(390,382,2)
(517,592,2)
(292,231,2)
(281,562,2)
(354,268,2)
(201,430,2)
(128,108,2)
(258,53,2)
(414,345,2)
(397,342,2)
(502,590,2)
(51,134,2)
(117,502,2)
(517,578,2)
(591,345,2)
(492,351,2)
(6,345,2)
(353,210,2)
(437,379,2)
(511,345,2)
(354,539,2)
(154,428,2)
(330,25,2)
(379,320,2)
(353,226,2)
(172,320,2)
(354,426,2)
(121,517,2)
(407,113,2)
(353,379,2)
(44,502,2)
(603,222,2)
(268,25,2)
(115,360,2)
(386,502,2)
(598,66,2)
(47,402,2)
(401,402,2)
(561,539,2)
(177,292,2)
(282,113,2)
(338,399,2)
(156,502,2)
(52,342,2)
(261,376,2)
(17,397,2)
(598,29,2)
(71,231,2)
(382,25,2)
(400,561,2)
(353,301,2)
(556,342,2)
(512,376,2)
(451,25,2)
(150,536,2)
(212,360,2)
(206,502,2)
(297,320,2)
(334,25,2)
(431,25,2)
(523,536,2)
(144,452,2)
(248,113,2)
(66,342,2)
(348,342,2)
(528,242,2)
(528,351,2)
(353,376,2)
(343,113,2)
(518,206,2)
(497,450,2)
(213,409,2)
(66,475,2)
(133,360,2)
(477,342,2)
(79,354,2)
(3,77,2)
(375,53,2)
(101,320,2)
(494,360,2)
(609,571,2)
(260,376,2)
(361,536,2)
(299,351,2)
(289,351,2)
(95,342,2)
(402,201,2)
(159,402,2)
(293,502,2)
(178,342,2)
(0,183,2)
(460,231,2)
(272,289,2)
(548,536,2)
(34,25,2)
(269,25,2)
(428,395,2)
(324,25,2)
(344,360,2)
(354,145,2)
(576,283,2)
(354,208,2)
(428,25,2)
(196,318,2)
(81,342,2)
(389,231,2)
(517,145,2)
(493,491,2)
(402,231,2)
(588,485,2)
(382,87,2)
(145,320,2)
(82,156,2)
(362,559,2)
(330,536,2)
(328,25,2)
(16,430,2)
(283,536,2)
(590,14,2)
(315,342,2)
(38,342,2)
(523,544,2)
(450,182,2)
(577,113,2)
(609,25,2)
(143,25,2)
(373,502,2)
(455,70,2)
(502,113,2)
(299,502,2)
(126,25,2)
(238,609,2)
(111,342,2)
(360,428,2)
(232,536,2)
(27,351,2)
(87,360,2)
(602,100,2)
(538,342,2)
(84,402,2)
(563,376,2)
(283,250,2)
(12,25,2)
(420,231,2)
(255,495,2)
(264,342,2)
(408,320,2)
(542,190,2)
(485,25,2)
(187,134,2)
(189,191,2)
(395,382,2)
(552,215,2)
(363,320,2)
(472,156,2)
(339,342,2)
(561,172,2)
(249,113,2)
(441,156,2)
(53,541,2)
(557,502,2)
(353,539,2)
(283,483,2)
(537,107,2)
(74,351,2)
(318,464,2)
(539,320,2)
(78,536,2)
(14,16,2)
(391,360,2)
(362,467,2)
(293,299,2)
(525,536,2)
(573,536,2)
(610,191,2)
(574,25,2)
(234,428,2)
(249,472,2)
(399,517,2)
(478,25,2)
(354,204,2)
(185,520,2)
(208,231,2)
(86,360,2)
(541,231,2)
(560,113,2)
(537,318,2)
(488,360,2)
(185,516,2)
(330,351,2)
(434,320,2)
(316,550,2)
(399,320,2)
(160,351,2)
(263,320,2)
(226,320,2)
(342,318,2)
(269,151,2)
(396,343,2)
(36,342,2)
(421,537,2)
(193,536,2)
(100,193,2)
(90,351,2)
(79,437,2)
(13,320,2)
(517,210,2)
(440,25,2)
(304,231,2)
(525,516,2)
(395,263,2)
(535,536,2)
(142,536,2)
(303,272,2)
(340,25,2)
(416,318,2)
(13,538,2)
(578,17,2)
(345,376,2)
(491,536,2)
(425,376,2)
(481,25,2)
(471,320,2)
(353,204,2)
(158,345,2)
(356,342,2)
(326,187,2)
(22,342,2)
(605,320,2)
(145,428,2)
(161,292,2)
(353,592,2)
(227,502,2)
(559,65,2)
(553,250,2)
(331,342,2)
(204,320,2)
(427,25,2)
(406,25,2)
(114,342,2)
(423,491,2)
(170,231,2)
(93,282,2)
(469,113,2)
(121,320,2)
(125,113,2)
(439,536,2)
(390,320,2)
(571,98,2)
(204,231,2)
(343,434,2)
(516,501,2)
(99,342,2)
(458,25,2)
(237,351,2)
(86,320,2)
(287,52,2)
(322,342,2)
(252,452,2)
(58,342,2)
(428,536,2)
(354,379,2)
(383,55,2)
(123,289,2)
(560,292,2)
(382,502,2)
(192,191,2)
(184,113,2)
(256,342,2)
(93,397,2)
(272,351,2)
(305,279,2)
(345,471,2)
(366,452,2)
(128,405,2)
(361,194,2)
(602,536,2)
(606,25,2)
(293,351,2)
(336,134,2)
(367,320,2)
(174,351,2)
(259,467,2)
(504,250,2)
(139,502,2)
(3,283,2)
(216,156,2)
(11,25,2)
(474,428,2)
(222,408,2)
(223,25,2)
(49,292,2)
(194,391,2)
(117,289,2)
(405,525,2)
(67,402,2)
(146,25,2)
(517,426,2)
(210,113,2)
(517,208,2)
(292,420,2)
(43,536,2)
(609,602,2)
(98,320,2)
(129,113,2)
(542,536,2)
(493,250,2)
(373,25,2)
(221,360,2)
(381,292,2)
(144,342,2)
(231,463,2)
(576,383,2)
(32,342,2)
(440,7,2)
(382,373,2)
(591,428,2)
(220,342,2)
(559,467,2)
(190,320,2)
(562,428,2)
(175,25,2)
(561,208,2)
(541,430,2)
(55,470,2)
(266,41,2)
(357,25,2)
(83,376,2)
(191,342,2)
(319,536,2)
(24,351,2)
(403,351,2)
(450,342,2)
(414,320,2)
(216,113,2)
(44,536,2)
(7,289,2)
(107,231,2)
(157,342,2)
(227,320,2)
(471,77,2)
(343,25,2)
(573,502,2)
(487,536,2)
(7,320,2)
(46,113,2)
(0,502,2)
(202,342,2)
(442,360,2)
(133,502,2)
(359,428,2)
(301,320,2)
(228,409,2)
(55,128,2)
(391,532,2)
(86,305,2)
(341,292,2)
(488,376,2)
(61,351,2)
(527,360,2)
(292,144,2)
(441,25,2)
(448,536,2)
(472,604,2)
(363,283,2)
(538,94,2)
(576,409,2)
(456,342,2)
(579,536,2)
(368,430,2)
(351,428,2)
(331,264,2)
(350,382,2)
(578,508,2)
(544,320,2)
(231,292,2)
(309,320,2)
(447,420,2)
(464,292,2)
(149,345,2)
(503,449,2)
(517,172,2)
(130,345,2)
(327,428,2)
(288,342,2)
(1,318,2)
(594,556,2)
(561,301,2)
(438,25,2)
(585,428,2)
(103,351,2)
(579,502,2)
(341,452,2)
(103,502,2)
(266,527,2)
(2,342,2)
(525,307,2)
(496,536,2)
(354,301,2)
(17,428,2)
(573,351,2)
(365,467,2)
(379,342,2)
(353,426,2)
(353,414,2)
(85,440,2)
(382,351,2)
(475,342,2)
(436,156,2)
(279,360,2)
(331,339,2)
(559,516,2)
(552,318,2)
(332,428,2)
(53,231,2)
(398,107,2)
(376,159,2)
(575,278,2)
(471,376,2)
(134,363,2)
(271,600,2)
(450,252,2)
(85,267,2)
(200,467,2)
(594,342,2)
(436,25,2)
(158,231,2)
(254,342,2)
(87,351,2)
(547,536,2)
(309,376,2)
(382,536,2)
(374,231,2)
(586,250,2)
(17,320,2)
(323,536,2)
(527,320,2)
(235,194,2)
(383,409,2)
(270,382,2)
(225,536,2)
-----------------------------------
(0,&pi->pirlvl->prclyrnos[pi->prcno])
(1,JAS_UINTFAST32_NUMBITS)
(2,JAS_CAST(uint_fast32_t, 1)
(3,pi->y)
(4,pi)
(5,prcno)
(6,x)
(7,pi->pirlvl)
(8,pirlvl)
(9,try0)
(10,rlvlno)
(11,pirlvl)
(12,pi)
(13,pi->ystep)
(14,JAS_CAST(int,\\n\\t\\t\\t\\t\\t\\t  pchg->lyrnoend)
(15,pi)
(16,pchg->lyrnoend)
(17,pi->xstep)
(18,ystart)
(19,r)
(20,pi)
(21,prclyrno)
(22,numrlvls)
(23,ystart)
(24,numprcs)
(25,((pi->x == pi->xstart &&\\n\\t\\t\\t\\t\\t  ((trx0 << r)
(26,pi)
(27,pi)
(28,)
(29,pirlvl->prcheightexpn)
(30,picomp)
(31,0)
(32,ystep)
(33,)
(34,pirlvl)
(35,pi)
(36,xstep)
(37,lyrnoend)
(38,picomp)
(39,pi)
(40,JAS_CAST(uint_fast32_t, 1)
(41,pi->y % pi->ystep)
(42,pi->prgvolfirst)
(43,vsamp)
(44,compno)
(45,compno)
(46,ystep)
(47,maxrlvls)
(48,trx0)
(49,compno)
(50,pi->pirlvl->prcwidthexpn)
(51,1)
(52,!pi->xstep)
(53,pi->rlvlno = pchg->rlvlnostart)
(54,rlvlno)
(55,pi->y % (JAS_CAST(uint_fast32_t, 1)
(56,)
(57,picomp)
(58,numrlvls)
(59,compno)
(60,picomp)
(61,pi)
(62,skip:)
(63,pi)
(64,for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=\\n\\t\\t\\t  pi->xstep - (pi->x % pi->xstep)
(65,trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r)
(66,picomp->numrlvls - rlvlno - 1)
(67,pi)
(68,picomps)
(69,if (!pi->prgvolfirst)
(70,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->hsamp << r)
(71,pi)
(72,JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r)
(73,ystep)
(74,pi)
(75,pi->ystart)
(76,x)
(77,pi->y = pi->ystart)
(78,try0)
(79,RET)
(80,pi->compno)
(81,JAS_CAST(uint_fast32_t, 1)
(82,pi)
(83,pi)
(84,pi)
(85,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->vsamp << r)
(86,pi->compno)
(87,pi->compno)
(88,picomp)
(89,for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=\\n\\t\\t  pi->ystep - (pi->y % pi->ystep)
(90,pi)
(91,*prclyrno)
(92,rpx)
(93,pi->xstep)
(94,(!pi->ystep)
(95,picomp)
(96,uint_fast32_t)
(97,y)
(98,pi->pirlvl)
(99,picomp)
(100,JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r)
(101,pi->lyrno)
(102,rlvlno)
(103,pchg)
(104,if (pi->pirlvl->numprcs == 0)
(105,lyrno)
(106,pi)
(107,pirlvl = picomp->pirlvls)
(108,JAS_CAST(uint_fast32_t, 1)
(109,prclyrno)
(110,)
(111,ystep)
(112,pi)
(113,!pi->prgvolfirst)
(114,rlvlno)
(115,pchg)
(116,prclyrno)
(117,pi->pirlvl)
(118,JAS_UINTFAST32_NUMBITS - 2)
(119,numhprcs)
(120,pi->pirlvl->numhprcs)
(121,pi->x)
(122,JAS_CAST(uint_fast32_t, 1)
(123,pi->pirlvl)
(124,pi)
(125,pi)
(126,pi->pirlvl)
(127,1)
(128,JAS_CAST(uint_fast32_t, 1)
(129,pi)
(130,++pi->rlvlno)
(131,y)
(132,pi)
(133,pi)
(134,pi->y == pi->ystart)
(135,rpy)
(136,rlvlno)
(137,)
(138,rpy)
(139,prcno)
(140,numrlvls)
(141,r)
(142,pi)
(143,pi)
(144,picomp->numrlvls)
(145,pi->x)
(146,vsamp)
(147,)
(148,pchg)
(149,pi->x)
(150,hsamp)
(151,prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->vsamp << r)
(152,pi)
(153,pi->maxrlvls)
(154,pi)
(155,)
(156,pi->lyrno >= *prclyrno)
(157,pi)
(158,pchg)
(159,pi->rlvlno < pi->maxrlvls)
(160,pi->picomp->pirlvls[pi->rlvlno])
(161,++compno)
(162,)
(163,pi)
(164,goto skip;)
(165,rpx)
(166,)
(167,)
(168,prcvind)
(169,prcheightexpn)
(170,rlvlno)
(171,lyrno)
(172,pi->ystep)
(173,if (pi->rlvlno >= pi->picomp->numrlvls)
(174,picomp)
(175,r)
(176,uint_fast32_t)
(177,pirlvl)
(178,rlvlno)
(179,pi->pirlvl)
(180,xstep)
(181,pi->rlvlno)
(182,JAS_CAST(uint_fast32_t, 1)
(183,pi->pirlvl->prclyrnos[pi->prcno])
(184,pi)
(185,pi->picomp->hsamp << r)
(186,numprcs)
(187,JAS_CAST(uint_fast32_t, 1)
(188,compno)
(189,ystep)
(190,pi->picomp)
(191,!pi->ystep)
(192,pi->ystep)
(193,pi->picomp->vsamp << r)
(194,pi->picomp = &pi->picomps[pi->compno])
(195,picomp)
(196,picomp)
(197,pi)
(198,compno)
(199,r)
(200,1)
(201,pchg->rlvlnoend)
(202,uint_fast32_t)
(203,pchg)
(204,pi->prgvolfirst)
(205,if (pirlvl->prcwidthexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2 ||\\n\\t\\t\\t\\t  pirlvl->prcheightexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2)
(206,prclyrno = &pi->pirlvl->prclyrnos[pi->prcno])
(207,uint_fast32_t)
(208,pi->rlvlno)
(209,picomp->numrlvls)
(210,pi->xstep)
(211,pi)
(212,pi)
(213,1)
(214,x)
(215,JAS_UINTFAST32_NUMBITS - 2)
(216,pi)
(217,picomp)
(218,pirlvl)
(219,pi->picomps)
(220,1)
(221,compnostart)
(222,pi->picomp->vsamp)
(223,prcno)
(224,pirlvls)
(225,xstart)
(226,pi->ystep)
(227,pi->lyrno)
(228,y)
(229,pi->prcno < pi->pirlvl->numprcs)
(230,r)
(231,compno < pi->numcomps)
(232,xstart)
(233,rpy)
(234,numrlvls)
(235,pi->picomp)
(236,pirlvl)
(237,compno)
(238,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->vsamp << r)
(239,rlvlno)
(240,xstep)
(241,)
(242,pi->picomp)
(243,r)
(244,continue;)
(245,prcheightexpn)
(246,rpx)
(247,xstep)
(248,xstep)
(249,++pi->lyrno)
(250,pi->x == pi->xstart &&\\n\\t\\t\\t\\t\\t  ((trx0 << r)
(251,for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\\n\\t\\t\\t  picomp->numrlvls; ++rlvlno, ++pirlvl)
(252,picomp->vsamp)
(253,pi->pirlvl)
(254,picomp->numrlvls)
(255,pi->ystep)
(256,picomp)
(257,prcvind * pi->pirlvl->numhprcs + prchind)
(258,pi->rlvlno)
(259,r)
(260,pi)
(261,pi)
(262,xstep)
(263,pi->numcomps)
(264,picomp->numrlvls - rlvlno - 1)
(265,prchind)
(266,pi->ystep - (pi->y % pi->ystep)
(267,JPC_CEILDIV(pi->y,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->vsamp << r)
(268,pi->prcno)
(269,prcvind * pi->pirlvl->numhprcs)
(270,pi)
(271,pi->picomp->hsamp << r)
(272,pi->pirlvl)
(273,picomp)
(274,numrlvls)
(275,pi)
(276,pi)
(277,picomp)
(278,pi->x = pi->xstart)
(279,pchg->compnostart)
(280,0)
(281,pi->picomp->numrlvls)
(282,pi->xstep = 0)
(283,(pi->x == pi->xstart &&\\n\\t\\t\\t\\t\\t  ((trx0 << r)
(284,1)
(285,numcomps)
(286,int)
(287,xstep)
(288,ystep)
(289,pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno])
(290,pi->xstart)
(291,1)
(292,rlvlno <\\n\\t\\t\\t  picomp->numrlvls)
(293,++pi->compno)
(294,pirlvl)
(295,rpx)
(296,pi->xstart)
(297,pi->xstep)
(298,picomp)
(299,pi->compno)
(300,++(*prclyrno)
(301,pi->pirlvl)
(302,pi)
(303,pi->pirlvl->numprcs)
(304,prgvolfirst)
(305,pi->compno = pchg->compnostart)
(306,picomps)
(307,pi->pirlvl->prcheightexpn)
(308,&pi->picomp->pirlvls[pi->rlvlno])
(309,pi->yend)
(310,continue;)
(311,pi->x)
(312,pi->pirlvl->numprcs)
(313,pi)
(314,pi)
(315,prcwidthexpn)
(316,1 - pi->rlvlno)
(317,prclyrnos)
(318,pirlvl->prcwidthexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2)
(319,picomp)
(320,register jpc_pi_t *pi)
(321,)
(322,pi)
(323,pi->picomp->vsamp)
(324,pirlvl)
(325,hsamp)
(326,(try0 << r)
(327,pi)
(328,numlyrs)
(329,if (((pi->x == pi->xstart &&\\n\\t\\t\\t\\t\\t  ((trx0 << r)
(330,compnoend)
(331,pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1)
(332,pi->xend)
(333,pirlvl)
(334,pi)
(335,0)
(336,try0 << r)
(337,numrlvls)
(338,JPC_CEILDIV(pi->x,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->hsamp << r)
(339,pirlvl->prcwidthexpn)
(340,pi)
(341,++picomp)
(342,pirlvl->prcwidthexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2 ||\\n\\t\\t\\t\\t  pirlvl->prcheightexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2)
(343,pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs)
(344,y)
(345,pi->y < pi->yend)
(346,prcheightexpn)
(347,pi)
(348,xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1)
(349,pi->y)
(350,pi)
(351,pi->rlvlno >= pi->picomp->numrlvls)
(352,picomp)
(353,return 1;)
(354,return 0;)
(355,pi->pirlvl->prcwidthexpn)
(356,vsamp)
(357,pirlvl)
(358,rlvlno)
(359,x)
(360,pi->x < pi->xend)
(361,pi->picomp)
(362,(trx0 << r)
(363,pi->ystart)
(364,pi)
(365,JAS_CAST(uint_fast32_t, 1)
(366,picomp->numrlvls)
(367,pi->ystart)
(368,pchg->compnoend)
(369,ystart)
(370,xstep)
(371,xstep)
(372,++pirlvl)
(373,JAS_CAST(int, pchg->compnoend)
(374,rlvlnoend)
(375,pi->rlvlno)
(376,pi->rlvlno < pchg->rlvlnoend &&\\n\\t  pi->rlvlno < pi->maxrlvls)
(377,pirlvl)
(378,pi)
(379,pi->xstep)
(380,pi)
(381,pi->numcomps)
(382,pi->compno < JAS_CAST(int, pchg->compnoend)
(383,!(pi->y % (JAS_CAST(uint_fast32_t, 1)
(384,trx0)
(385,pi)
(386,pi)
(387,0)
(388,0)
(389,pi->rlvlno)
(390,pi->compno)
(391,&pi->picomps[pi->compno])
(392,numcomps)
(393,rlvlno - 1)
(394,assert(pi->prcno < pi->pirlvl->numprcs)
(395,pi->compno <\\n\\t\\t\\t\\t  pi->numcomps)
(396,lyrno)
(397,pi->xstep = (!pi->xstep)
(398,pirlvl->prcwidthexpn)
(399,pi->x)
(400,pi->y)
(401,pi->rlvlno)
(402,pi->rlvlno < pchg->rlvlnoend)
(403,pi)
(404,trx0)
(405,rpy = r + pi->pirlvl->prcheightexpn)
(406,pi->picomp)
(407,picomp)
(408,pi->picomp)
(409,pi->y == pi->ystart &&\\n\\t\\t\\t\\t\\t  ((try0 << r)
(410,pchg)
(411,pirlvls)
(412,pchg)
(413,pi)
(414,pi->x)
(415,pi)
(416,2)
(417,prcheightexpn)
(418,prclyrno)
(419,xstart)
(420,rlvlno = 0)
(421,pirlvl->prcheightexpn + picomp->numrlvls)
(422,pirlvl)
(423,JAS_CAST(uint_fast32_t, 1)
(424,pirlvl)
(425,1)
(426,pi->picomp)
(427,JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn)
(428,pi->compno < JAS_CAST(int, pchg->compnoend)
(429,)
(430,pchg = pi->pchg)
(431,prcvind)
(432,-1)
(433,pirlvl)
(434,pi->numlyrs)
(435,x)
(436,lyrno)
(437,return -1;)
(438,try0)
(439,prcheightexpn)
(440,pi->pirlvl->prcheightexpn)
(441,pi->lyrno)
(442,pi)
(443,rlvlno)
(444,pi)
(445,for (pi->lyrno = 0; pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs && pi->lyrno < JAS_CAST(int,\\n\\t\\t\\t\\t\\t\\t  pchg->lyrnoend)
(446,JAS_UINTFAST32_NUMBITS)
(447,++rlvlno)
(448,picomp)
(449,JAS_MIN(pi->xstep, xstep)
(450,picomp->vsamp * (JAS_CAST(uint_fast32_t, 1)
(451,prcvind)
(452,picomp = pi->picomps)
(453,pi)
(454,pi)
(455,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->hsamp << r)
(456,rlvlno)
(457,pi)
(458,pi)
(459,1)
(460,rlvlnostart)
(461,y)
(462,trx0)
(463,compno = 0)
(464,pirlvl->prcwidthexpn + picomp->numrlvls)
(465,uint_fast32_t)
(466,pi)
(467,pi->x == pi->xstart)
(468,rlvlno)
(469,pi)
(470,pi->y)
(471,pi->y)
(472,pi->lyrno)
(473,pi->xstep)
(474,pi)
(475,rlvlno - 1)
(476,pirlvl)
(477,picomp->numrlvls)
(478,pi)
(479,pirlvl)
(480,pi)
(481,lyrno)
(482,for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\\n\\t\\t  ++compno, ++picomp)
(483,!(pi->x % (JAS_CAST(uint_fast32_t, 1)
(484,r + pi->pirlvl->prcwidthexpn)
(485,pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind)
(486,rpy)
(487,1)
(488,y)
(489,ystep)
(490,pi->prcno)
(491,rpx = r + pi->pirlvl->prcwidthexpn)
(492,0)
(493,JAS_CAST(uint_fast32_t, 1)
(494,pi)
(495,pi->ystep = 0)
(496,pi)
(497,ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1)
(498,picomp->pirlvls)
(499,pchg)
(500,prgvolfirst)
(501,pi->picomp->numrlvls - 1 - pi->rlvlno)
(502,pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs && pi->lyrno < JAS_CAST(int,\\n\\t\\t\\t\\t\\t\\t  pchg->lyrnoend)
(503,(!pi->xstep)
(504,uint_fast32_t)
(505,pi)
(506,prchind)
(507,for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&\\n\\t  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno)
(508,pi->x % pi->xstep)
(509,prcwidthexpn)
(510,try0)
(511,x)
(512,y)
(513,1)
(514,)
(515,pi->prgvolfirst = 0)
(516,r = pi->picomp->numrlvls - 1 - pi->rlvlno)
(517,pi->x +=\\n\\t\\t\\t  pi->xstep - (pi->x % pi->xstep)
(518,*prclyrno)
(519,picomp)
(520,pi->picomp->hsamp)
(521,compno)
(522,)
(523,pi->pirlvl->prcwidthexpn)
(524,pi)
(525,r + pi->pirlvl->prcheightexpn)
(526,pi)
(527,pi->ystep)
(528,pi->picomp->pirlvls)
(529,2)
(530,r)
(531,pi->pirlvl->prclyrnos)
(532,pi->picomps[pi->compno])
(533,)
(534,pi)
(535,pi)
(536,pi->pirlvl->numprcs == 0)
(537,pirlvl->prcheightexpn)
(538,pi->ystep = (!pi->ystep)
(539,pi->lyrno)
(540,pi)
(541,pchg->rlvlnostart)
(542,pi->picomp->numrlvls)
(543,ystep)
(544,pi->pirlvl)
(545,pi->y)
(546,prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->hsamp << r)
(547,r)
(548,r)
(549,pirlvl)
(550,pi->rlvlno)
(551,JAS_CAST(uint_fast32_t, 1)
(552,pirlvl->prcheightexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2)
(553,pi->x % (JAS_CAST(uint_fast32_t, 1)
(554,pi->xstart)
(555,pi->picomps)
(556,picomp->hsamp)
(557,pi)
(558,pi)
(559,trx0 << r)
(560,pi)
(561,pi->y +=\\n\\t\\t  pi->ystep - (pi->y % pi->ystep)
(562,pi->picomp)
(563,yend)
(564,numrlvls)
(565,pi)
(566,if (pi->lyrno >= *prclyrno)
(567,)
(568,for (pi->compno = pchg->compnostart,\\n\\t\\t\\t\\t  pi->picomp = &pi->picomps[pi->compno];\\n\\t\\t\\t\\t  pi->compno < JAS_CAST(int, pchg->compnoend)
(569,hsamp)
(570,ystep)
(571,pi->pirlvl->prcheightexpn)
(572,pi->pchg)
(573,pi->picomp)
(574,prcwidthexpn)
(575,pi->x)
(576,(pi->y == pi->ystart &&\\n\\t\\t\\t\\t\\t  ((try0 << r)
(577,0)
(578,pi->xstep - (pi->x % pi->xstep)
(579,int)
(580,rlvlno)
(581,pi)
(582,compno)
(583,)
(584,0)
(585,xstep)
(586,x)
(587,pi)
(588,pi->prcno)
(589,prcwidthexpn)
(590,pi->lyrno < JAS_CAST(int,\\n\\t\\t\\t\\t\\t\\t  pchg->lyrnoend)
(591,xend)
(592,pi->y)
(593,prchind)
(594,picomp->hsamp * (JAS_CAST(uint_fast32_t, 1)
(595,ystep)
(596,)
(597,pi)
(598,pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1)
(599,pirlvl)
(600,pi->picomp->hsamp)
(601,)
(602,try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r)
(603,pi->picomp->vsamp << r)
(604,pi->lyrno = 0)
(605,pi->pirlvl)
(606,++pi->picomp)
(607,prcwidthexpn)
(608,)
(609,JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn)
(610,JAS_MIN(pi->ystep, ystep)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
