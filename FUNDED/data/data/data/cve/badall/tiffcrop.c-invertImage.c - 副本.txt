-----label-----
1
-----code-----
static int
invertImage(uint16 photometric, uint16 spp, uint16 bps, uint32 width, uint32 length, unsigned char *work_buff)
  {
  uint32   row, col;
  unsigned char  bytebuff1, bytebuff2, bytebuff3, bytebuff4;
  unsigned char *src;
  uint16        *src_uint16;
  uint32        *src_uint32;

  if (spp != 1)
    {
    TIFFError("invertImage", "Image inversion not supported for more than one sample per pixel");
    return (-1);
    }

  if (photometric !=  PHOTOMETRIC_MINISWHITE && photometric !=  PHOTOMETRIC_MINISBLACK)
    {
    TIFFError("invertImage", "Only black and white and grayscale images can be inverted");
    return (-1);
    }

  src = work_buff;
  if (src == NULL)
    {
    TIFFError ("invertImage", "Invalid crop buffer passed to invertImage");
    return (-1);
    }

  switch (bps)
    {
    case 32: src_uint32 = (uint32 *)src;
             for (row = 0; row < length; row++)
               for (col = 0; col < width; col++)
                 {
		 *src_uint32 = (uint32)0xFFFFFFFF - *src_uint32;
                  src_uint32++;
                 }
            break;
    case 16: src_uint16 = (uint16 *)src;
             for (row = 0; row < length; row++)
               for (col = 0; col < width; col++)
                 {
		 *src_uint16 = (uint16)0xFFFF - *src_uint16;
                  src_uint16++;
                 }
            break;
    case 8: for (row = 0; row < length; row++)
              for (col = 0; col < width; col++)
                {
		*src = (uint8)255 - *src;
                 src++;
                }
            break;
    case 4: for (row = 0; row < length; row++)
              for (col = 0; col < width; col++)
                {
		bytebuff1 = 16 - (uint8)(*src & 240 >> 4);
		bytebuff2 = 16 - (*src & 15);
		*src = bytebuff1 << 4 & bytebuff2;
                src++;
                }
            break;
    case 2: for (row = 0; row < length; row++)
              for (col = 0; col < width; col++)
                {
		bytebuff1 = 4 - (uint8)(*src & 192 >> 6);
		bytebuff2 = 4 - (uint8)(*src & 48  >> 4);
		bytebuff3 = 4 - (uint8)(*src & 12  >> 2);
		bytebuff4 = 4 - (uint8)(*src & 3);
		*src = (bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2) | bytebuff4;
                src++;
                }
            break;
    case 1: for (row = 0; row < length; row++)
              for (col = 0; col < width; col += 8 /(spp * bps))
                {
                *src = ~(*src);
                src++;
                }
            break;
    default: TIFFError("invertImage", "Unsupported bit depth %d", bps);
      return (-1);
    }

  return (0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
10,11
10,12
11,12
13,14
15,16
15,17
16,17
18,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
30,31
30,32
32,33
32,34
35,36
35,37
35,38
35,39
35,40
35,41
35,42
35,43
35,44
35,45
35,46
36,37
37,38
37,39
37,40
38,39
40,41
42,43
44,45
45,46
45,47
45,48
45,49
45,50
47,48
49,50
51,52
53,54
55,56
56,57
56,58
58,59
58,60
61,62
62,63
62,64
63,64
65,66
65,67
68,69
69,70
69,71
70,71
72,73
72,74
75,76
75,77
76,77
76,78
77,78
80,81
80,82
81,82
82,83
82,84
82,85
83,84
87,88
88,89
89,90
91,92
91,93
92,93
92,94
93,94
93,95
94,95
96,97
98,99
98,100
99,100
101,102
103,104
103,105
104,105
105,106
105,107
105,108
106,107
110,111
111,112
112,113
114,115
115,116
115,117
116,117
118,119
120,121
120,122
121,122
121,123
122,123
124,125
126,127
126,128
127,128
128,129
128,130
128,131
129,130
133,134
134,135
135,136
137,138
137,139
138,139
140,141
140,142
140,143
140,144
140,145
140,146
140,147
140,148
140,149
140,150
140,151
140,152
140,153
140,154
140,155
140,156
140,157
140,158
140,159
140,160
140,161
140,162
140,163
141,142
143,144
144,145
144,146
145,146
147,148
147,149
148,149
148,150
149,150
151,152
153,154
155,156
155,157
155,158
155,159
156,157
157,158
157,159
158,159
161,162
161,163
162,163
164,165
166,167
167,168
169,170
169,171
169,172
169,173
170,171
171,172
171,173
172,173
175,176
175,177
176,177
178,179
180,181
181,182
183,184
183,185
184,185
185,186
185,187
186,187
187,188
189,190
189,191
190,191
190,192
191,192
191,193
192,193
196,197
197,198
199,200
200,201
201,202
204,205
206,207
207,208
207,209
208,209
210,211
210,212
211,212
211,213
212,213
214,215
216,217
218,219
218,220
218,221
218,222
219,220
220,221
220,222
221,222
224,225
224,226
225,226
227,228
229,230
230,231
232,233
232,234
232,235
232,236
233,234
234,235
234,236
235,236
238,239
238,240
239,240
241,242
243,244
244,245
246,247
246,248
247,248
248,249
248,250
249,250
250,251
252,253
252,254
253,254
253,255
254,255
254,256
255,256
259,260
260,261
262,263
263,264
264,265
267,268
269,270
269,271
269,272
269,273
270,271
271,272
271,273
272,273
275,276
275,277
276,277
278,279
280,281
281,282
283,284
283,285
283,286
283,287
284,285
285,286
285,287
286,287
289,290
289,291
290,291
292,293
294,295
295,296
297,298
297,299
298,299
299,300
299,301
300,301
301,302
303,304
303,305
304,305
304,306
305,306
305,307
306,307
310,311
311,312
313,314
314,315
315,316
318,319
320,321
320,322
320,323
320,324
321,322
322,323
322,324
323,324
326,327
326,328
327,328
329,330
331,332
332,333
334,335
334,336
334,337
334,338
335,336
336,337
336,338
337,338
340,341
340,342
341,342
343,344
345,346
346,347
348,349
348,350
348,351
348,352
349,350
350,351
350,352
351,352
353,354
353,355
355,356
355,357
356,357
357,358
359,360
359,361
360,361
361,362
363,364
363,365
366,367
367,368
367,369
368,369
370,371
370,372
372,373
373,374
373,375
374,375
375,376
378,379
379,380
379,381
380,381
381,382
383,384
383,385
384,385
384,386
385,386
388,389
390,391
391,392
392,393
395,396
397,398
397,399
397,400
397,401
398,399
399,400
399,401
400,401
403,404
403,405
404,405
406,407
408,409
409,410
411,412
411,413
411,414
411,415
412,413
413,414
413,415
414,415
417,418
417,419
418,419
420,421
422,423
423,424
425,426
425,427
425,428
425,429
425,430
425,431
426,427
427,428
427,429
428,429
430,431
430,432
432,433
432,434
433,434
434,435
436,437
436,438
437,438
438,439
440,441
440,442
443,444
444,445
444,446
445,446
447,448
447,449
449,450
449,451
450,451
451,452
453,454
453,455
454,455
455,456
457,458
457,459
460,461
461,462
461,463
462,463
464,465
464,466
466,467
466,468
467,468
468,469
470,471
470,472
471,472
472,473
474,475
474,476
477,478
478,479
478,480
479,480
481,482
481,483
483,484
483,485
484,485
485,486
487,488
487,489
488,489
489,490
492,493
493,494
493,495
494,495
495,496
497,498
497,499
498,499
498,500
499,500
499,501
500,501
501,502
501,503
502,503
505,506
506,507
506,508
507,508
510,511
511,512
511,513
512,513
515,516
517,518
518,519
519,520
522,523
524,525
524,526
524,527
524,528
525,526
526,527
526,528
527,528
530,531
530,532
531,532
533,534
535,536
536,537
538,539
538,540
538,541
538,542
539,540
540,541
540,542
541,542
544,545
544,546
545,546
547,548
549,550
549,551
550,551
552,553
552,554
554,555
555,556
555,557
556,557
558,559
560,561
560,562
561,562
562,563
562,564
563,564
564,565
566,567
567,568
568,569
569,570
571,572
572,573
573,574
577,578
578,579
578,580
578,581
578,582
579,580
583,584
585,586
586,587
587,588
589,590
590,591
-----nextToken-----
2,4,7,9,12,14,17,19,22,24,27,29,31,33,34,39,41,43,46,48,50,52,54,57,59,60,64,66,67,71,73,74,78,79,84,85,86,90,95,97,100,102,107,108,109,113,117,119,123,125,130,131,132,136,139,142,146,150,152,154,159,160,163,165,168,173,174,177,179,182,188,193,194,195,198,202,203,205,209,213,215,217,222,223,226,228,231,236,237,240,242,245,251,256,257,258,261,265,266,268,273,274,277,279,282,287,288,291,293,296,302,307,308,309,312,316,317,319,324,325,328,330,333,338,339,342,344,347,352,354,358,362,364,365,369,371,376,377,382,386,387,389,393,394,396,401,402,405,407,410,415,416,419,421,424,429,431,435,439,441,442,446,448,452,456,458,459,463,465,469,473,475,476,480,482,486,490,491,496,503,504,508,509,513,514,516,520,521,523,528,529,532,534,537,542,543,546,548,551,553,557,559,565,570,574,575,576,580,581,582,584,588,591
-----computeFrom-----
76,77
76,78
92,93
92,94
93,94
93,95
98,99
98,100
115,116
115,117
121,122
121,123
144,145
144,146
157,158
157,159
161,162
161,163
171,172
171,173
175,176
175,177
185,186
185,187
189,190
189,191
207,208
207,209
220,221
220,222
224,225
224,226
234,235
234,236
238,239
238,240
248,249
248,250
252,253
252,254
271,272
271,273
275,276
275,277
285,286
285,287
289,290
289,291
299,300
299,301
303,304
303,305
322,323
322,324
326,327
326,328
336,337
336,338
340,341
340,342
350,351
350,352
353,354
353,355
359,360
359,361
363,364
363,365
367,368
367,369
370,371
370,372
373,374
373,375
379,380
379,381
383,384
383,385
384,385
384,386
399,400
399,401
403,404
403,405
413,414
413,415
417,418
417,419
427,428
427,429
430,431
430,432
436,437
436,438
440,441
440,442
444,445
444,446
447,448
447,449
453,454
453,455
457,458
457,459
461,462
461,463
464,465
464,466
470,471
470,472
474,475
474,476
478,479
478,480
481,482
481,483
487,488
487,489
493,494
493,495
497,498
497,499
498,499
498,500
499,500
499,501
501,502
501,503
506,507
506,508
511,512
511,513
526,527
526,528
530,531
530,532
540,541
540,542
544,545
544,546
549,550
549,551
552,553
552,554
555,556
555,557
562,563
562,564
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static intinvertImage(uint16 photometric, uint16 spp, uint16 bps, uint32 width, uint32 length, unsigned char *work_buff)  {  uint32   row, col;  unsigned char  bytebuff1, bytebuff2, bytebuff3, bytebuff4;  unsigned char *src;  uint16        *src_uint16;  uint32        *src_uint32;  if (spp != 1)    {    TIFFError("invertImage", "Image inversion not supported for more than one sample per pixel");    return (-1);    }  if (photometric !=  PHOTOMETRIC_MINISWHITE && photometric !=  PHOTOMETRIC_MINISBLACK)    {    TIFFError("invertImage", "Only black and white and grayscale images can be inverted");    return (-1);    }  src = work_buff;  if (src == NULL)    {    TIFFError ("invertImage", "Invalid crop buffer passed to invertImage");    return (-1);    }  switch (bps)    {    case 32: src_uint32 = (uint32 *)src;             for (row = 0; row < length; row++)               for (col = 0; col < width; col++)                 {		 *src_uint32 = (uint32)0xFFFFFFFF - *src_uint32;                  src_uint32++;                 }            break;    case 16: src_uint16 = (uint16 *)src;             for (row = 0; row < length; row++)               for (col = 0; col < width; col++)                 {		 *src_uint16 = (uint16)0xFFFF - *src_uint16;                  src_uint16++;                 }            break;    case 8: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		*src = (uint8)255 - *src;                 src++;                }            break;    case 4: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		bytebuff1 = 16 - (uint8)(*src & 240 >> 4);		bytebuff2 = 16 - (*src & 15);		*src = bytebuff1 << 4 & bytebuff2;                src++;                }            break;    case 2: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		bytebuff1 = 4 - (uint8)(*src & 192 >> 6);		bytebuff2 = 4 - (uint8)(*src & 48  >> 4);		bytebuff3 = 4 - (uint8)(*src & 12  >> 2);		bytebuff4 = 4 - (uint8)(*src & 3);		*src = (bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2) | bytebuff4;                src++;                }            break;    case 1: for (row = 0; row < length; row++)              for (col = 0; col < width; col += 8 /(spp * bps))                {                *src = ~(*src);                src++;                }            break;    default: TIFFError("invertImage", "Unsupported bit depth %d", bps);      return (-1);    }  return (0);}
static int
invertImage(uint16 photometric, uint16 spp, uint16 bps, uint32 width, uint32 length, unsigned char *work_buff)
invertImage
uint16 photometric
uint16
uint16
photometric
photometric
uint16 spp
uint16
uint16
spp
spp
uint16 bps
uint16
uint16
bps
bps
uint32 width
uint32
uint32
width
width
uint32 length
uint32
uint32
length
length
unsigned char *work_buff
unsigned char
*work_buff
*
work_buff
{  uint32   row, col;  unsigned char  bytebuff1, bytebuff2, bytebuff3, bytebuff4;  unsigned char *src;  uint16        *src_uint16;  uint32        *src_uint32;  if (spp != 1)    {    TIFFError("invertImage", "Image inversion not supported for more than one sample per pixel");    return (-1);    }  if (photometric !=  PHOTOMETRIC_MINISWHITE && photometric !=  PHOTOMETRIC_MINISBLACK)    {    TIFFError("invertImage", "Only black and white and grayscale images can be inverted");    return (-1);    }  src = work_buff;  if (src == NULL)    {    TIFFError ("invertImage", "Invalid crop buffer passed to invertImage");    return (-1);    }  switch (bps)    {    case 32: src_uint32 = (uint32 *)src;             for (row = 0; row < length; row++)               for (col = 0; col < width; col++)                 {		 *src_uint32 = (uint32)0xFFFFFFFF - *src_uint32;                  src_uint32++;                 }            break;    case 16: src_uint16 = (uint16 *)src;             for (row = 0; row < length; row++)               for (col = 0; col < width; col++)                 {		 *src_uint16 = (uint16)0xFFFF - *src_uint16;                  src_uint16++;                 }            break;    case 8: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		*src = (uint8)255 - *src;                 src++;                }            break;    case 4: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		bytebuff1 = 16 - (uint8)(*src & 240 >> 4);		bytebuff2 = 16 - (*src & 15);		*src = bytebuff1 << 4 & bytebuff2;                src++;                }            break;    case 2: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		bytebuff1 = 4 - (uint8)(*src & 192 >> 6);		bytebuff2 = 4 - (uint8)(*src & 48  >> 4);		bytebuff3 = 4 - (uint8)(*src & 12  >> 2);		bytebuff4 = 4 - (uint8)(*src & 3);		*src = (bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2) | bytebuff4;                src++;                }            break;    case 1: for (row = 0; row < length; row++)              for (col = 0; col < width; col += 8 /(spp * bps))                {                *src = ~(*src);                src++;                }            break;    default: TIFFError("invertImage", "Unsupported bit depth %d", bps);      return (-1);    }  return (0);}
uint32   row, col;
uint32   row, col;
uint32
uint32
row
row
col
col
unsigned char  bytebuff1, bytebuff2, bytebuff3, bytebuff4;
unsigned char  bytebuff1, bytebuff2, bytebuff3, bytebuff4;
unsigned char
bytebuff1
bytebuff1
bytebuff2
bytebuff2
bytebuff3
bytebuff3
bytebuff4
bytebuff4
unsigned char *src;
unsigned char *src;
unsigned char
*src
*
src
uint16        *src_uint16;
uint16        *src_uint16;
uint16
uint16
*src_uint16
*
src_uint16
uint32        *src_uint32;
uint32        *src_uint32;
uint32
uint32
*src_uint32
*
src_uint32
if (spp != 1)    {    TIFFError("invertImage", "Image inversion not supported for more than one sample per pixel");    return (-1);    }
spp != 1
spp
spp
1
{    TIFFError("invertImage", "Image inversion not supported for more than one sample per pixel");    return (-1);    }
TIFFError("invertImage", "Image inversion not supported for more than one sample per pixel");
TIFFError("invertImage", "Image inversion not supported for more than one sample per pixel")
TIFFError
TIFFError
"invertImage"
"Image inversion not supported for more than one sample per pixel"
return (-1);
(-1)
-1
1
if (photometric !=  PHOTOMETRIC_MINISWHITE && photometric !=  PHOTOMETRIC_MINISBLACK)    {    TIFFError("invertImage", "Only black and white and grayscale images can be inverted");    return (-1);    }
photometric !=  PHOTOMETRIC_MINISWHITE && photometric !=  PHOTOMETRIC_MINISBLACK
photometric !=  PHOTOMETRIC_MINISWHITE
photometric
photometric
PHOTOMETRIC_MINISWHITE
PHOTOMETRIC_MINISWHITE
photometric !=  PHOTOMETRIC_MINISBLACK
photometric
photometric
PHOTOMETRIC_MINISBLACK
PHOTOMETRIC_MINISBLACK
{    TIFFError("invertImage", "Only black and white and grayscale images can be inverted");    return (-1);    }
TIFFError("invertImage", "Only black and white and grayscale images can be inverted");
TIFFError("invertImage", "Only black and white and grayscale images can be inverted")
TIFFError
TIFFError
"invertImage"
"Only black and white and grayscale images can be inverted"
return (-1);
(-1)
-1
1
src = work_buff;
src = work_buff
src
src
work_buff
work_buff
if (src == NULL)    {    TIFFError ("invertImage", "Invalid crop buffer passed to invertImage");    return (-1);    }
src == NULL
src
src
NULL
NULL
{    TIFFError ("invertImage", "Invalid crop buffer passed to invertImage");    return (-1);    }
TIFFError ("invertImage", "Invalid crop buffer passed to invertImage");
TIFFError ("invertImage", "Invalid crop buffer passed to invertImage")
TIFFError
TIFFError
"invertImage"
"Invalid crop buffer passed to invertImage"
return (-1);
(-1)
-1
1
switch (bps)    {    case 32: src_uint32 = (uint32 *)src;             for (row = 0; row < length; row++)               for (col = 0; col < width; col++)                 {		 *src_uint32 = (uint32)0xFFFFFFFF - *src_uint32;                  src_uint32++;                 }            break;    case 16: src_uint16 = (uint16 *)src;             for (row = 0; row < length; row++)               for (col = 0; col < width; col++)                 {		 *src_uint16 = (uint16)0xFFFF - *src_uint16;                  src_uint16++;                 }            break;    case 8: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		*src = (uint8)255 - *src;                 src++;                }            break;    case 4: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		bytebuff1 = 16 - (uint8)(*src & 240 >> 4);		bytebuff2 = 16 - (*src & 15);		*src = bytebuff1 << 4 & bytebuff2;                src++;                }            break;    case 2: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		bytebuff1 = 4 - (uint8)(*src & 192 >> 6);		bytebuff2 = 4 - (uint8)(*src & 48  >> 4);		bytebuff3 = 4 - (uint8)(*src & 12  >> 2);		bytebuff4 = 4 - (uint8)(*src & 3);		*src = (bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2) | bytebuff4;                src++;                }            break;    case 1: for (row = 0; row < length; row++)              for (col = 0; col < width; col += 8 /(spp * bps))                {                *src = ~(*src);                src++;                }            break;    default: TIFFError("invertImage", "Unsupported bit depth %d", bps);      return (-1);    }
bps
bps
{    case 32: src_uint32 = (uint32 *)src;             for (row = 0; row < length; row++)               for (col = 0; col < width; col++)                 {		 *src_uint32 = (uint32)0xFFFFFFFF - *src_uint32;                  src_uint32++;                 }            break;    case 16: src_uint16 = (uint16 *)src;             for (row = 0; row < length; row++)               for (col = 0; col < width; col++)                 {		 *src_uint16 = (uint16)0xFFFF - *src_uint16;                  src_uint16++;                 }            break;    case 8: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		*src = (uint8)255 - *src;                 src++;                }            break;    case 4: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		bytebuff1 = 16 - (uint8)(*src & 240 >> 4);		bytebuff2 = 16 - (*src & 15);		*src = bytebuff1 << 4 & bytebuff2;                src++;                }            break;    case 2: for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		bytebuff1 = 4 - (uint8)(*src & 192 >> 6);		bytebuff2 = 4 - (uint8)(*src & 48  >> 4);		bytebuff3 = 4 - (uint8)(*src & 12  >> 2);		bytebuff4 = 4 - (uint8)(*src & 3);		*src = (bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2) | bytebuff4;                src++;                }            break;    case 1: for (row = 0; row < length; row++)              for (col = 0; col < width; col += 8 /(spp * bps))                {                *src = ~(*src);                src++;                }            break;    default: TIFFError("invertImage", "Unsupported bit depth %d", bps);      return (-1);    }
case 32:
32
src_uint32 = (uint32 *)src;
src_uint32 = (uint32 *)src
src_uint32
src_uint32
(uint32 *)src
uint32 *
uint32
uint32
*
*
src
src
for (row = 0; row < length; row++)               for (col = 0; col < width; col++)                 {		 *src_uint32 = (uint32)0xFFFFFFFF - *src_uint32;                  src_uint32++;                 }
row = 0;
row = 0
row
row
0
row < length
row
row
length
length
row++
row
row
for (col = 0; col < width; col++)                 {		 *src_uint32 = (uint32)0xFFFFFFFF - *src_uint32;                  src_uint32++;                 }
col = 0;
col = 0
col
col
0
col < width
col
col
width
width
col++
col
col
{		 *src_uint32 = (uint32)0xFFFFFFFF - *src_uint32;                  src_uint32++;                 }
*src_uint32 = (uint32)0xFFFFFFFF - *src_uint32;
*src_uint32 = (uint32)0xFFFFFFFF - *src_uint32
*src_uint32
src_uint32
src_uint32
(uint32)0xFFFFFFFF - *src_uint32
(uint32)0xFFFFFFFF
uint32
uint32
uint32

0xFFFFFFFF
*src_uint32
src_uint32
src_uint32
src_uint32++;
src_uint32++
src_uint32
src_uint32
break;
case 16:
16
src_uint16 = (uint16 *)src;
src_uint16 = (uint16 *)src
src_uint16
src_uint16
(uint16 *)src
uint16 *
uint16
uint16
*
*
src
src
for (row = 0; row < length; row++)               for (col = 0; col < width; col++)                 {		 *src_uint16 = (uint16)0xFFFF - *src_uint16;                  src_uint16++;                 }
row = 0;
row = 0
row
row
0
row < length
row
row
length
length
row++
row
row
for (col = 0; col < width; col++)                 {		 *src_uint16 = (uint16)0xFFFF - *src_uint16;                  src_uint16++;                 }
col = 0;
col = 0
col
col
0
col < width
col
col
width
width
col++
col
col
{		 *src_uint16 = (uint16)0xFFFF - *src_uint16;                  src_uint16++;                 }
*src_uint16 = (uint16)0xFFFF - *src_uint16;
*src_uint16 = (uint16)0xFFFF - *src_uint16
*src_uint16
src_uint16
src_uint16
(uint16)0xFFFF - *src_uint16
(uint16)0xFFFF
uint16
uint16
uint16

0xFFFF
*src_uint16
src_uint16
src_uint16
src_uint16++;
src_uint16++
src_uint16
src_uint16
break;
case 8:
8
for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		*src = (uint8)255 - *src;                 src++;                }
row = 0;
row = 0
row
row
0
row < length
row
row
length
length
row++
row
row
for (col = 0; col < width; col++)                {		*src = (uint8)255 - *src;                 src++;                }
col = 0;
col = 0
col
col
0
col < width
col
col
width
width
col++
col
col
{		*src = (uint8)255 - *src;                 src++;                }
*src = (uint8)255 - *src;
*src = (uint8)255 - *src
*src
src
src
(uint8)255 - *src
(uint8)255
uint8
uint8
uint8

255
*src
src
src
src++;
src++
src
src
break;
case 4:
4
for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		bytebuff1 = 16 - (uint8)(*src & 240 >> 4);		bytebuff2 = 16 - (*src & 15);		*src = bytebuff1 << 4 & bytebuff2;                src++;                }
row = 0;
row = 0
row
row
0
row < length
row
row
length
length
row++
row
row
for (col = 0; col < width; col++)                {		bytebuff1 = 16 - (uint8)(*src & 240 >> 4);		bytebuff2 = 16 - (*src & 15);		*src = bytebuff1 << 4 & bytebuff2;                src++;                }
col = 0;
col = 0
col
col
0
col < width
col
col
width
width
col++
col
col
{		bytebuff1 = 16 - (uint8)(*src & 240 >> 4);		bytebuff2 = 16 - (*src & 15);		*src = bytebuff1 << 4 & bytebuff2;                src++;                }
bytebuff1 = 16 - (uint8)(*src & 240 >> 4);
bytebuff1 = 16 - (uint8)(*src & 240 >> 4)
bytebuff1
bytebuff1
16 - (uint8)(*src & 240 >> 4)
16
(uint8)(*src & 240 >> 4)
(uint8)
uint8
uint8
*src & 240 >> 4
*src
src
src
240 >> 4
240
4
bytebuff2 = 16 - (*src & 15);
bytebuff2 = 16 - (*src & 15)
bytebuff2
bytebuff2
16 - (*src & 15)
16
(*src & 15)
*src & 15
*src
src
src
15
*src = bytebuff1 << 4 & bytebuff2;
*src = bytebuff1 << 4 & bytebuff2
*src
src
src
bytebuff1 << 4 & bytebuff2
bytebuff1 << 4
bytebuff1
bytebuff1
4
bytebuff2
bytebuff2
src++;
src++
src
src
break;
case 2:
2
for (row = 0; row < length; row++)              for (col = 0; col < width; col++)                {		bytebuff1 = 4 - (uint8)(*src & 192 >> 6);		bytebuff2 = 4 - (uint8)(*src & 48  >> 4);		bytebuff3 = 4 - (uint8)(*src & 12  >> 2);		bytebuff4 = 4 - (uint8)(*src & 3);		*src = (bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2) | bytebuff4;                src++;                }
row = 0;
row = 0
row
row
0
row < length
row
row
length
length
row++
row
row
for (col = 0; col < width; col++)                {		bytebuff1 = 4 - (uint8)(*src & 192 >> 6);		bytebuff2 = 4 - (uint8)(*src & 48  >> 4);		bytebuff3 = 4 - (uint8)(*src & 12  >> 2);		bytebuff4 = 4 - (uint8)(*src & 3);		*src = (bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2) | bytebuff4;                src++;                }
col = 0;
col = 0
col
col
0
col < width
col
col
width
width
col++
col
col
{		bytebuff1 = 4 - (uint8)(*src & 192 >> 6);		bytebuff2 = 4 - (uint8)(*src & 48  >> 4);		bytebuff3 = 4 - (uint8)(*src & 12  >> 2);		bytebuff4 = 4 - (uint8)(*src & 3);		*src = (bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2) | bytebuff4;                src++;                }
bytebuff1 = 4 - (uint8)(*src & 192 >> 6);
bytebuff1 = 4 - (uint8)(*src & 192 >> 6)
bytebuff1
bytebuff1
4 - (uint8)(*src & 192 >> 6)
4
(uint8)(*src & 192 >> 6)
(uint8)
uint8
uint8
*src & 192 >> 6
*src
src
src
192 >> 6
192
6
bytebuff2 = 4 - (uint8)(*src & 48  >> 4);
bytebuff2 = 4 - (uint8)(*src & 48  >> 4)
bytebuff2
bytebuff2
4 - (uint8)(*src & 48  >> 4)
4
(uint8)(*src & 48  >> 4)
(uint8)
uint8
uint8
*src & 48  >> 4
*src
src
src
48  >> 4
48
4
bytebuff3 = 4 - (uint8)(*src & 12  >> 2);
bytebuff3 = 4 - (uint8)(*src & 12  >> 2)
bytebuff3
bytebuff3
4 - (uint8)(*src & 12  >> 2)
4
(uint8)(*src & 12  >> 2)
(uint8)
uint8
uint8
*src & 12  >> 2
*src
src
src
12  >> 2
12
2
bytebuff4 = 4 - (uint8)(*src & 3);
bytebuff4 = 4 - (uint8)(*src & 3)
bytebuff4
bytebuff4
4 - (uint8)(*src & 3)
4
(uint8)(*src & 3)
(uint8)
uint8
uint8
*src & 3
*src
src
src
3
*src = (bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2) | bytebuff4;
*src = (bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2) | bytebuff4
*src
src
src
(bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2) | bytebuff4
(bytebuff1 << 6) | (bytebuff2 << 4) | (bytebuff3 << 2)
(bytebuff1 << 6) | (bytebuff2 << 4)
(bytebuff1 << 6)
bytebuff1 << 6
bytebuff1
bytebuff1
6
(bytebuff2 << 4)
bytebuff2 << 4
bytebuff2
bytebuff2
4
(bytebuff3 << 2)
bytebuff3 << 2
bytebuff3
bytebuff3
2
bytebuff4
bytebuff4
src++;
src++
src
src
break;
case 1:
1
for (row = 0; row < length; row++)              for (col = 0; col < width; col += 8 /(spp * bps))                {                *src = ~(*src);                src++;                }
row = 0;
row = 0
row
row
0
row < length
row
row
length
length
row++
row
row
for (col = 0; col < width; col += 8 /(spp * bps))                {                *src = ~(*src);                src++;                }
col = 0;
col = 0
col
col
0
col < width
col
col
width
width
col += 8 /(spp * bps)
col
col
8 /(spp * bps)
8
(spp * bps)
spp * bps
spp
spp
bps
bps
{                *src = ~(*src);                src++;                }
*src = ~(*src);
*src = ~(*src)
*src
src
src
~(*src)
(*src)
*src
src
src
src++;
src++
src
src
break;
default:
TIFFError("invertImage", "Unsupported bit depth %d", bps);
TIFFError("invertImage", "Unsupported bit depth %d", bps)
TIFFError
TIFFError
"invertImage"
"Unsupported bit depth %d"
bps
bps
return (-1);
(-1)
-1
1
return (0);
(0)
0
-----joern-----
(133,146,0)
(244,303,0)
(106,295,0)
(80,269,0)
(46,251,0)
(24,32,0)
(0,46,0)
(248,193,0)
(254,235,0)
(150,159,0)
(270,183,0)
(265,37,0)
(68,82,0)
(164,210,0)
(34,215,0)
(297,146,0)
(281,201,0)
(128,275,0)
(148,317,0)
(191,89,0)
(217,328,0)
(268,166,0)
(82,68,0)
(299,288,0)
(204,75,0)
(48,12,0)
(5,22,0)
(327,328,0)
(10,327,0)
(65,170,0)
(62,23,0)
(177,32,0)
(208,158,0)
(18,331,0)
(28,181,0)
(127,38,0)
(84,169,0)
(217,230,0)
(143,148,0)
(91,217,0)
(221,299,0)
(302,247,0)
(86,49,0)
(209,216,0)
(82,224,0)
(119,251,0)
(179,55,0)
(253,44,0)
(317,148,0)
(188,3,0)
(260,318,0)
(104,230,0)
(63,251,0)
(78,269,0)
(96,249,0)
(278,175,0)
(291,121,0)
(145,50,0)
(159,150,0)
(37,190,0)
(231,33,0)
(79,307,0)
(137,120,0)
(180,146,0)
(12,95,0)
(139,232,0)
(99,240,0)
(334,313,0)
(246,49,0)
(227,328,0)
(243,74,0)
(311,19,0)
(314,92,0)
(136,330,0)
(313,334,0)
(326,288,0)
(237,47,0)
(64,251,0)
(1,20,0)
(75,299,0)
(147,219,0)
(307,190,0)
(95,229,0)
(296,33,0)
(40,321,0)
(335,269,0)
(327,20,0)
(234,174,0)
(59,198,0)
(295,82,0)
(263,54,0)
(301,29,0)
(226,36,0)
(132,82,0)
(54,190,0)
(175,249,0)
(102,8,0)
(66,53,0)
(277,146,0)
(170,251,0)
(214,121,0)
(69,83,0)
(207,92,0)
(261,336,0)
(113,146,0)
(288,326,0)
(177,248,0)
(157,271,0)
(229,95,0)
(61,251,0)
(334,303,0)
(313,305,0)
(267,170,0)
(166,121,0)
(130,240,0)
(228,220,0)
(193,248,0)
(2,78,0)
(230,229,0)
(157,98,0)
(148,326,0)
(322,139,0)
(140,37,0)
(247,143,0)
(310,28,0)
(331,276,0)
(89,202,0)
(193,293,0)
(193,187,0)
(298,23,0)
(38,21,0)
(111,121,0)
(325,181,0)
(305,313,0)
(161,181,0)
(88,230,0)
(157,88,0)
(77,40,0)
(248,206,0)
(85,3,0)
(65,110,0)
(284,146,0)
(126,287,0)
(210,198,0)
(319,251,0)
(11,8,0)
(104,121,0)
(27,187,0)
(332,219,0)
(192,8,0)
(255,288,0)
(114,78,0)
(21,295,0)
(157,146,0)
(138,318,0)
(148,143,0)
(174,13,0)
(158,19,0)
(157,85,0)
(327,10,0)
(295,21,0)
(80,272,0)
(122,80,0)
(115,146,0)
(35,146,0)
(245,70,0)
(134,251,0)
(40,21,0)
(59,105,0)
(289,336,0)
(41,103,0)
(264,39,0)
(161,313,0)
(141,68,0)
(103,121,0)
(220,229,0)
(130,269,0)
(49,246,0)
(225,1,0)
(313,161,0)
(52,152,0)
(285,251,0)
(50,202,0)
(295,28,0)
(256,53,0)
(328,217,0)
(250,251,0)
(93,88,0)
(215,50,0)
(33,16,0)
(312,29,0)
(196,251,0)
(44,226,0)
(55,53,0)
(38,121,0)
(213,28,0)
(107,146,0)
(157,56,0)
(36,226,0)
(145,215,0)
(168,247,0)
(30,338,0)
(333,192,0)
(235,272,0)
(110,49,0)
(78,169,0)
(205,46,0)
(3,188,0)
(175,190,0)
(19,318,0)
(121,146,0)
(309,183,0)
(337,177,0)
(157,214,0)
(266,251,0)
(55,190,0)
(215,121,0)
(92,190,0)
(287,253,0)
(219,183,0)
(230,276,0)
(142,233,0)
(158,158,0)
(253,287,0)
(334,38,0)
(65,236,0)
(59,194,0)
(87,251,0)
(135,46,0)
(271,50,0)
(78,158,0)
(90,152,0)
(303,334,0)
(101,56,0)
(85,97,0)
(32,276,0)
(72,103,0)
(36,121,0)
(252,189,0)
(105,304,0)
(98,121,0)
(81,97,0)
(165,251,0)
(22,121,0)
(47,183,0)
(142,315,0)
(1,276,0)
(92,58,0)
(283,240,0)
(170,22,0)
(219,269,0)
(150,188,0)
(166,224,0)
(182,58,0)
(103,97,0)
(37,189,0)
(262,326,0)
(290,112,0)
(173,22,0)
(229,220,0)
(95,75,0)
(229,230,0)
(178,54,0)
(293,193,0)
(110,65,0)
(3,330,0)
(108,249,0)
(60,157,0)
(194,251,0)
(257,189,0)
(20,1,0)
(339,12,0)
(308,175,0)
(163,249,0)
(293,230,0)
(33,232,0)
(54,23,0)
(88,121,0)
(70,282,0)
(300,23,0)
(197,146,0)
(4,299,0)
(201,57,0)
(39,121,0)
(51,251,0)
(326,148,0)
(89,121,0)
(103,72,0)
(131,80,0)
(29,304,0)
(21,224,0)
(154,53,0)
(321,68,0)
(44,253,0)
(236,110,0)
(17,184,0)
(7,55,0)
(206,248,0)
(222,44,0)
(232,139,0)
(273,253,0)
(158,169,0)
(124,104,0)
(282,13,0)
(211,251,0)
(139,16,0)
(306,169,0)
(14,251,0)
(19,158,0)
(320,335,0)
(15,176,0)
(67,152,0)
(125,76,0)
(20,327,0)
(258,58,0)
(6,97,0)
(233,112,0)
(110,236,0)
(274,130,0)
(28,295,0)
(324,201,0)
(121,155,0)
(95,12,0)
(318,160,0)
(22,170,0)
(239,125,0)
(226,44,0)
(323,251,0)
(49,110,0)
(280,271,0)
(42,136,0)
(162,192,0)
(100,187,0)
(181,224,0)
(318,19,0)
(98,142,0)
(40,121,0)
(97,251,0)
(335,76,0)
(176,186,0)
(271,121,0)
(22,173,0)
(56,170,0)
(176,170,0)
(94,335,0)
(259,174,0)
(199,189,0)
(26,307,0)
(136,97,0)
(217,121,0)
(220,287,0)
(32,177,0)
(56,236,0)
(216,194,0)
(299,75,0)
(153,36,0)
(318,203,0)
(184,121,0)
(156,149,0)
(167,146,0)
(218,161,0)
(36,230,0)
(6,188,0)
(112,185,0)
(328,327,0)
(118,98,0)
(143,104,0)
(25,120,0)
(329,52,0)
(75,95,0)
(104,143,0)
(233,142,0)
(172,199,0)
(223,65,0)
(39,315,0)
(46,160,0)
(97,103,0)
(171,272,0)
(232,33,0)
(331,121,0)
(321,40,0)
(129,293,0)
(316,96,0)
(6,3,0)
(74,58,0)
(59,282,0)
(116,76,0)
(242,251,0)
(192,269,0)
(50,145,0)
(293,121,0)
(43,6,0)
(187,193,0)
(184,233,0)
(288,276,0)
(71,300,0)
(143,247,0)
(236,186,0)
(292,251,0)
(307,152,0)
(44,222,0)
(31,214,0)
(75,1,0)
(241,85,0)
(73,130,0)
(226,83,0)
(12,32,0)
(212,154,0)
(338,8,0)
(109,20,0)
(336,203,0)
(144,220,0)
(214,21,0)
(181,161,0)
(233,184,0)
(83,226,0)
(59,157,0)
(215,145,0)
(188,6,0)
(275,105,0)
(248,177,0)
(287,276,0)
(151,321,0)
(117,83,0)
(45,146,0)
(188,150,0)
(195,303,0)
(9,251,0)
(38,334,0)
(123,150,0)
(120,121,0)
(198,57,0)
(185,112,0)
(184,142,0)
(286,76,0)
(112,233,0)
(68,321,0)
(200,272,0)
(294,139,0)
(279,146,0)
(149,240,0)
(104,124,1)
(102,11,1)
(139,16,1)
(124,262,1)
(44,222,1)
(322,294,1)
(189,252,1)
(331,18,1)
(28,181,1)
(40,21,1)
(244,38,1)
(25,121,1)
(288,326,1)
(7,53,1)
(326,148,1)
(55,179,1)
(111,291,1)
(157,60,1)
(157,85,1)
(50,145,1)
(46,160,1)
(179,7,1)
(213,214,1)
(192,162,1)
(172,192,1)
(104,121,1)
(237,136,1)
(80,269,1)
(22,5,1)
(306,175,1)
(303,195,1)
(333,338,1)
(125,76,1)
(80,272,1)
(60,51,1)
(308,278,1)
(32,177,1)
(36,230,1)
(27,293,1)
(194,216,1)
(44,226,1)
(247,168,1)
(109,225,1)
(157,88,1)
(15,236,1)
(8,102,1)
(307,79,1)
(169,84,1)
(218,325,1)
(103,72,1)
(110,49,1)
(69,36,1)
(137,25,1)
(318,160,1)
(290,98,1)
(262,255,1)
(38,127,1)
(230,229,1)
(78,158,1)
(68,321,1)
(9,92,1)
(39,264,1)
(268,21,1)
(221,4,1)
(52,329,1)
(333,8,1)
(215,121,1)
(36,153,1)
(258,97,1)
(301,232,1)
(29,312,1)
(233,112,1)
(156,166,1)
(241,219,1)
(51,55,1)
(175,308,1)
(147,332,1)
(54,23,1)
(60,292,1)
(310,213,1)
(295,106,1)
(300,71,1)
(40,77,1)
(176,15,1)
(223,49,1)
(188,6,1)
(177,248,1)
(327,10,1)
(81,238,1)
(100,27,1)
(58,182,1)
(271,280,1)
(128,29,1)
(215,50,1)
(275,128,1)
(313,334,1)
(225,288,1)
(260,311,1)
(12,48,1)
(309,270,1)
(59,198,1)
(265,140,1)
(144,228,1)
(138,260,1)
(149,240,1)
(181,161,1)
(184,121,1)
(52,152,1)
(170,22,1)
(171,200,1)
(198,210,1)
(123,85,1)
(234,259,1)
(256,66,1)
(130,269,1)
(178,263,1)
(108,163,1)
(162,333,1)
(90,238,1)
(278,249,1)
(292,175,1)
(231,296,1)
(336,203,1)
(191,50,1)
(92,207,1)
(152,67,1)
(96,316,1)
(336,261,1)
(235,272,1)
(60,14,1)
(201,324,1)
(65,170,1)
(118,335,1)
(14,307,1)
(0,205,1)
(165,37,1)
(7,154,1)
(311,208,1)
(163,238,1)
(324,281,1)
(116,54,1)
(335,269,1)
(130,240,1)
(176,170,1)
(149,156,1)
(4,12,1)
(261,289,1)
(271,121,1)
(267,238,1)
(121,111,1)
(148,143,1)
(22,173,1)
(208,89,1)
(337,24,1)
(131,122,1)
(238,120,1)
(188,150,1)
(20,327,1)
(85,241,1)
(22,121,1)
(278,96,1)
(196,54,1)
(338,8,1)
(89,191,1)
(59,105,1)
(141,132,1)
(120,121,1)
(293,230,1)
(193,187,1)
(274,73,1)
(291,232,1)
(168,302,1)
(281,120,1)
(318,203,1)
(325,130,1)
(228,88,1)
(54,178,1)
(229,95,1)
(270,92,1)
(67,90,1)
(5,267,1)
(47,237,1)
(60,9,1)
(158,169,1)
(204,299,1)
(120,137,1)
(314,58,1)
(216,209,1)
(127,218,1)
(273,126,1)
(210,164,1)
(220,144,1)
(233,184,1)
(39,121,1)
(157,56,1)
(329,80,1)
(99,55,1)
(62,298,1)
(55,190,1)
(226,83,1)
(74,243,1)
(36,121,1)
(157,271,1)
(183,309,1)
(249,108,1)
(192,8,1)
(219,269,1)
(255,32,1)
(327,328,1)
(70,245,1)
(121,155,1)
(78,169,1)
(205,135,1)
(184,142,1)
(37,190,1)
(161,313,1)
(40,121,1)
(140,199,1)
(164,201,1)
(184,17,1)
(240,283,1)
(19,318,1)
(92,190,1)
(60,165,1)
(3,188,1)
(331,121,1)
(302,104,1)
(92,58,1)
(217,91,1)
(97,103,1)
(71,335,1)
(143,104,1)
(56,101,1)
(114,2,1)
(254,331,1)
(334,38,1)
(42,3,1)
(56,170,1)
(212,130,1)
(136,42,1)
(253,44,1)
(192,269,1)
(38,121,1)
(252,257,1)
(105,275,1)
(85,97,1)
(239,39,1)
(193,293,1)
(33,231,1)
(195,244,1)
(150,159,1)
(59,157,1)
(33,16,1)
(328,227,1)
(295,28,1)
(104,230,1)
(125,239,1)
(94,320,1)
(298,238,1)
(6,97,1)
(73,240,1)
(282,70,1)
(41,81,1)
(21,295,1)
(1,20,1)
(338,30,1)
(209,46,1)
(53,256,1)
(286,116,1)
(220,287,1)
(139,322,1)
(312,301,1)
(174,234,1)
(47,183,1)
(82,68,1)
(226,36,1)
(48,339,1)
(199,189,1)
(98,121,1)
(6,3,1)
(103,121,1)
(26,152,1)
(320,125,1)
(24,287,1)
(145,215,1)
(214,121,1)
(158,19,1)
(65,223,1)
(23,62,1)
(132,181,1)
(207,314,1)
(6,43,1)
(283,99,1)
(77,141,1)
(293,129,1)
(88,121,1)
(332,47,1)
(280,78,1)
(75,299,1)
(93,1,1)
(136,97,1)
(43,150,1)
(320,76,1)
(335,94,1)
(79,26,1)
(245,174,1)
(175,249,1)
(122,235,1)
(54,190,1)
(321,40,1)
(83,117,1)
(157,214,1)
(18,230,1)
(75,1,1)
(316,78,1)
(55,53,1)
(175,190,1)
(235,254,1)
(112,290,1)
(148,317,1)
(307,152,1)
(17,112,1)
(272,171,1)
(217,230,1)
(2,158,1)
(30,176,1)
(318,138,1)
(334,303,1)
(59,194,1)
(117,69,1)
(78,114,1)
(129,337,1)
(37,189,1)
(86,56,1)
(142,233,1)
(339,220,1)
(2,169,1)
(91,109,1)
(229,220,1)
(89,121,1)
(95,75,1)
(65,236,1)
(12,32,1)
(296,139,1)
(84,306,1)
(66,238,1)
(236,110,1)
(287,253,1)
(122,272,1)
(73,149,1)
(187,100,1)
(154,212,1)
(88,93,1)
(227,217,1)
(299,288,1)
(335,76,1)
(263,23,1)
(75,204,1)
(314,74,1)
(263,300,1)
(293,121,1)
(140,189,1)
(219,183,1)
(110,65,1)
(151,40,1)
(49,86,1)
(80,131,1)
(143,247,1)
(158,158,1)
(166,121,1)
(95,12,1)
(34,271,1)
(135,238,1)
(219,147,1)
(26,52,1)
(295,82,1)
(313,305,1)
(217,121,1)
(182,258,1)
(112,185,1)
(59,282,1)
(307,190,1)
(259,336,1)
(76,286,1)
(332,183,1)
(96,249,1)
(103,41,1)
(60,196,1)
(46,0,1)
(328,217,1)
(248,206,1)
(28,310,1)
(200,307,1)
(101,192,1)
(74,58,1)
(106,28,1)
(243,219,1)
(154,53,1)
(38,21,1)
(214,31,1)
(264,142,1)
(157,98,1)
(150,123,1)
(126,80,1)
(215,34,1)
(11,37,1)
(321,151,1)
(199,172,1)
(37,265,1)
(299,221,1)
(294,336,1)
(31,82,1)
(232,33,1)
(300,23,1)
(166,268,1)
(232,139,1)
(78,269,1)
(257,170,1)
(248,193,1)
(49,246,1)
(98,118,1)
(130,274,1)
(153,273,1)
(142,233,2)
(137,232,2)
(110,49,2)
(175,249,2)
(40,21,2)
(74,92,2)
(42,219,2)
(230,80,2)
(32,177,2)
(275,232,2)
(214,121,2)
(188,150,2)
(37,238,2)
(147,92,2)
(327,80,2)
(170,238,2)
(178,238,2)
(145,78,2)
(243,92,2)
(253,80,2)
(39,121,2)
(149,130,2)
(150,219,2)
(12,32,2)
(62,238,2)
(290,335,2)
(181,161,2)
(19,318,2)
(281,120,2)
(103,72,2)
(25,232,2)
(31,130,2)
(295,28,2)
(78,158,2)
(316,175,2)
(233,335,2)
(148,143,2)
(50,145,2)
(108,238,2)
(68,130,2)
(82,130,2)
(70,336,2)
(161,313,2)
(52,152,2)
(122,307,2)
(254,80,2)
(2,175,2)
(311,78,2)
(337,80,2)
(106,130,2)
(130,55,2)
(162,192,2)
(7,238,2)
(238,120,2)
(37,189,2)
(131,307,2)
(248,80,2)
(217,230,2)
(131,80,2)
(143,247,2)
(326,80,2)
(233,184,2)
(23,238,2)
(36,121,2)
(27,80,2)
(6,97,2)
(12,80,2)
(156,130,2)
(32,80,2)
(6,3,2)
(143,80,2)
(28,130,2)
(103,238,2)
(313,130,2)
(128,232,2)
(215,50,2)
(192,8,2)
(83,80,2)
(150,159,2)
(92,238,2)
(298,238,2)
(299,288,2)
(1,80,2)
(195,130,2)
(85,97,2)
(143,104,2)
(111,232,2)
(92,190,2)
(300,23,2)
(157,214,2)
(3,219,2)
(152,238,2)
(295,130,2)
(80,272,2)
(210,120,2)
(321,40,2)
(216,238,2)
(260,78,2)
(103,121,2)
(273,80,2)
(219,269,2)
(157,271,2)
(50,78,2)
(168,80,2)
(140,238,2)
(220,80,2)
(232,139,2)
(22,173,2)
(56,192,2)
(179,55,2)
(175,190,2)
(8,37,2)
(236,192,2)
(264,335,2)
(117,80,2)
(26,238,2)
(226,83,2)
(19,78,2)
(234,336,2)
(97,238,2)
(263,238,2)
(176,170,2)
(191,78,2)
(135,238,2)
(98,121,2)
(291,232,2)
(97,103,2)
(149,240,2)
(170,22,2)
(39,335,2)
(11,37,2)
(78,169,2)
(182,238,2)
(158,19,2)
(296,139,2)
(175,238,2)
(235,272,2)
(92,92,2)
(14,238,2)
(169,175,2)
(177,248,2)
(26,307,2)
(75,80,2)
(219,219,2)
(201,120,2)
(129,80,2)
(232,336,2)
(308,175,2)
(132,130,2)
(207,92,2)
(3,188,2)
(49,246,2)
(47,219,2)
(313,334,2)
(92,58,2)
(120,121,2)
(52,307,2)
(162,37,2)
(91,80,2)
(73,55,2)
(293,80,2)
(157,85,2)
(82,68,2)
(138,78,2)
(326,148,2)
(33,139,2)
(231,139,2)
(318,203,2)
(142,335,2)
(307,190,2)
(274,55,2)
(158,169,2)
(299,80,2)
(306,175,2)
(78,78,2)
(59,282,2)
(136,97,2)
(331,121,2)
(219,92,2)
(109,80,2)
(59,105,2)
(314,92,2)
(292,238,2)
(36,230,2)
(21,295,2)
(125,76,2)
(207,238,2)
(193,187,2)
(38,130,2)
(59,194,2)
(28,181,2)
(271,78,2)
(213,130,2)
(33,16,2)
(78,269,2)
(140,37,2)
(263,54,2)
(334,130,2)
(283,55,2)
(157,238,2)
(331,80,2)
(229,220,2)
(130,269,2)
(166,130,2)
(139,336,2)
(230,229,2)
(244,130,2)
(112,335,2)
(187,80,2)
(29,232,2)
(89,78,2)
(65,170,2)
(110,65,2)
(147,219,2)
(22,238,2)
(93,80,2)
(248,206,2)
(247,80,2)
(158,158,2)
(233,112,2)
(301,232,2)
(318,160,2)
(105,232,2)
(322,336,2)
(148,317,2)
(225,80,2)
(9,238,2)
(334,38,2)
(192,37,2)
(114,78,2)
(98,335,2)
(38,21,2)
(324,120,2)
(69,80,2)
(223,192,2)
(145,215,2)
(60,238,2)
(24,80,2)
(76,54,2)
(339,80,2)
(262,80,2)
(73,130,2)
(227,80,2)
(123,219,2)
(20,327,2)
(157,98,2)
(172,37,2)
(48,80,2)
(314,238,2)
(55,238,2)
(121,232,2)
(125,335,2)
(95,75,2)
(139,16,2)
(114,175,2)
(75,299,2)
(6,219,2)
(192,192,2)
(127,130,2)
(95,80,2)
(37,190,2)
(5,238,2)
(158,78,2)
(282,336,2)
(80,80,2)
(71,54,2)
(34,78,2)
(95,12,2)
(258,238,2)
(192,269,2)
(274,130,2)
(214,130,2)
(335,54,2)
(193,80,2)
(188,219,2)
(215,121,2)
(333,192,2)
(338,192,2)
(310,130,2)
(40,130,2)
(303,130,2)
(38,121,2)
(335,335,2)
(249,238,2)
(199,189,2)
(232,33,2)
(328,80,2)
(104,121,2)
(226,80,2)
(141,130,2)
(293,121,2)
(100,80,2)
(253,44,2)
(0,238,2)
(228,80,2)
(174,336,2)
(270,92,2)
(59,157,2)
(184,121,2)
(22,121,2)
(239,335,2)
(130,240,2)
(300,54,2)
(278,175,2)
(46,238,2)
(175,175,2)
(110,192,2)
(79,307,2)
(1,20,2)
(215,78,2)
(51,238,2)
(90,238,2)
(226,36,2)
(178,54,2)
(65,192,2)
(161,130,2)
(329,307,2)
(318,78,2)
(320,54,2)
(309,92,2)
(80,307,2)
(220,287,2)
(313,305,2)
(328,217,2)
(335,269,2)
(55,53,2)
(120,232,2)
(80,269,2)
(307,152,2)
(20,80,2)
(255,80,2)
(37,37,2)
(30,192,2)
(229,95,2)
(15,192,2)
(307,238,2)
(165,238,2)
(81,238,2)
(55,55,2)
(136,219,2)
(84,175,2)
(17,335,2)
(164,120,2)
(336,203,2)
(75,1,2)
(200,307,2)
(4,80,2)
(151,130,2)
(321,130,2)
(280,78,2)
(221,80,2)
(18,80,2)
(218,130,2)
(102,37,2)
(193,293,2)
(307,307,2)
(79,238,2)
(217,121,2)
(302,80,2)
(104,80,2)
(205,238,2)
(308,238,2)
(101,192,2)
(229,80,2)
(148,80,2)
(116,54,2)
(338,8,2)
(335,76,2)
(325,130,2)
(327,328,2)
(288,80,2)
(219,183,2)
(189,238,2)
(287,253,2)
(256,238,2)
(49,192,2)
(46,160,2)
(235,80,2)
(252,238,2)
(66,238,2)
(184,335,2)
(181,130,2)
(293,230,2)
(77,130,2)
(78,175,2)
(94,54,2)
(278,238,2)
(204,80,2)
(209,238,2)
(188,6,2)
(55,190,2)
(271,121,2)
(99,55,2)
(65,236,2)
(53,238,2)
(157,88,2)
(183,92,2)
(294,336,2)
(85,219,2)
(312,232,2)
(154,55,2)
(94,335,2)
(157,56,2)
(44,80,2)
(36,80,2)
(198,120,2)
(212,55,2)
(21,130,2)
(267,238,2)
(126,80,2)
(112,185,2)
(171,307,2)
(332,92,2)
(179,238,2)
(333,37,2)
(44,222,2)
(104,230,2)
(217,80,2)
(208,78,2)
(248,193,2)
(196,238,2)
(44,226,2)
(245,336,2)
(257,238,2)
(54,54,2)
(54,190,2)
(272,307,2)
(268,130,2)
(259,336,2)
(2,78,2)
(236,110,2)
(68,321,2)
(88,121,2)
(295,82,2)
(67,238,2)
(86,192,2)
(177,80,2)
(96,175,2)
(54,23,2)
(7,55,2)
(166,121,2)
(54,238,2)
(265,37,2)
(59,198,2)
(320,335,2)
(288,326,2)
(153,80,2)
(332,219,2)
(89,121,2)
(74,58,2)
(286,54,2)
(88,80,2)
(327,10,2)
(130,130,2)
(144,80,2)
(265,238,2)
(184,142,2)
(40,121,2)
(96,249,2)
(122,80,2)
(56,170,2)
(176,192,2)
(194,238,2)
(237,219,2)
(287,80,2)
(240,55,2)
(124,80,2)
(43,219,2)
(41,238,2)
(118,335,2)
(163,238,2)
(334,303,2)
(121,155,2)
(58,238,2)
(154,53,2)
(199,37,2)
(241,219,2)
(47,183,2)
-----------------------------------
(0,bps)
(1,bytebuff4 = 4 - (uint8)
(2,col)
(3,*src_uint32 = (uint32)
(4,bytebuff3)
(5,src)
(6,*src_uint32)
(7,row)
(8,col = 0)
(9,break;)
(10,uint8)
(11,col)
(12,bytebuff2 << 4)
(13,)
(14,break;)
(15,src_uint16)
(16,uint16 photometric)
(17,src)
(18,src)
(19,8 /(spp * bps)
(20,4 - (uint8)
(21,*src = bytebuff1 << 4 & bytebuff2)
(22,(uint16 *)
(23,row = 0)
(24,bytebuff2)
(25,src)
(26,row)
(27,48)
(28,bytebuff1 << 4)
(29,TIFFError("invertImage", "Only black and white and grayscale images can be inverted")
(30,col)
(31,src)
(32,bytebuff2 = 4 - (uint8)
(33,photometric !=  PHOTOMETRIC_MINISBLACK)
(34,src)
(35,if (photometric !=  PHOTOMETRIC_MINISWHITE && photometric !=  PHOTOMETRIC_MINISBLACK)
(36,*src)
(37,row < length)
(38,*src)
(39,src++)
(40,*src)
(41,src)
(42,src_uint32)
(43,src_uint32)
(44,(uint8)
(45,row)
(46,TIFFError("invertImage", "Unsupported bit depth %d", bps)
(47,col++)
(48,4)
(49,(uint16)
(50,*src = ~(*src)
(51,break;)
(52,row++)
(53,row = 0)
(54,row < length)
(55,row < length)
(56,*src_uint16)
(57,)
(58,row = 0)
(59,RET)
(60,0)
(61,for (row = 0; row < length; row++)
(62,0)
(63,case 2:)
(64,for (row = 0; row < length; row++)
(65,*src_uint16)
(66,row)
(67,0)
(68,16 - (*src & 15)
(69,192)
(70,-1)
(71,row)
(72,uint32 *)
(73,col)
(74,row++)
(75,(bytebuff3 << 2)
(76,col = 0)
(77,src)
(78,col < width)
(79,length)
(80,col < width)
(81,src_uint32)
(82,bytebuff2 = 16 - (*src & 15)
(83,192 >> 6)
(84,0)
(85,*src_uint32)
(86,0xFFFF)
(87,for (row = 0; row < length; row++)
(88,*src)
(89,src++)
(90,row)
(91,src)
(92,row < length)
(93,src)
(94,width)
(95,(bytebuff2 << 4)
(96,row++)
(97,src_uint32 = (uint32 *)
(98,*src)
(99,col)
(100,4)
(101,src_uint16)
(102,0)
(103,(uint32 *)
(104,*src)
(105,return (-1)
(106,bytebuff2)
(107,bytebuff4)
(108,0)
(109,4)
(110,(uint16)
(111,work_buff)
(112,(uint8)
(113,if (spp != 1)
(114,width)
(115,switch (bps)
(116,col)
(117,6)
(118,src)
(119,case 16:)
(120,src == NULL)
(121,src = work_buff)
(122,col)
(123,0xFFFFFFFF)
(124,src)
(125,col++)
(126,bytebuff1)
(127,src)
(128,1)
(129,src)
(130,col < width)
(131,width)
(132,bytebuff2)
(133,col)
(134,case 1:)
(135,"invertImage")
(136,src_uint32++)
(137,NULL)
(138,bps)
(139,photometric !=  PHOTOMETRIC_MINISWHITE)
(140,row)
(141,16)
(142,*src = (uint8)
(143,*src & 12  >> 2)
(144,6)
(145,~(*src)
(146,)
(147,width)
(148,(uint8)
(149,col++)
(150,(uint32)
(151,15)
(152,row = 0)
(153,src)
(154,row++)
(155,unsigned char *work_buff)
(156,col)
(157,return (0)
(158,col += 8 /(spp * bps)
(159,uint32)
(160,uint16 bps)
(161,16 - (uint8)
(162,width)
(163,row)
(164,1)
(165,break;)
(166,src++)
(167,src_uint32)
(168,2)
(169,col = 0)
(170,src_uint16 = (uint16 *)
(171,0)
(172,row)
(173,uint16 *)
(174,TIFFError("invertImage", "Image inversion not supported for more than one sample per pixel")
(175,row < length)
(176,src_uint16++)
(177,4 - (uint8)
(178,length)
(179,length)
(180,bytebuff1)
(181,bytebuff1 = 16 - (uint8)
(182,0)
(183,col = 0)
(184,*src)
(185,uint8)
(186,)
(187,48  >> 4)
(188,(uint32)
(189,row = 0)
(190,uint32 length)
(191,src)
(192,col < width)
(193,*src & 48  >> 4)
(194,return (-1)
(195,4)
(196,break;)
(197,src)
(198,return (-1)
(199,row++)
(200,col)
(201,TIFFError ("invertImage", "Invalid crop buffer passed to invertImage")
(202,)
(203,uint16 spp)
(204,bytebuff4)
(205,"Unsupported bit depth %d")
(206,uint8)
(207,length)
(208,col)
(209,1)
(210,-1)
(211,case 32:)
(212,row)
(213,bytebuff1)
(214,*src)
(215,*src)
(216,-1)
(217,*src)
(218,16)
(219,col < width)
(220,bytebuff1 << 6)
(221,2)
(222,uint8)
(223,src_uint16)
(224,)
(225,bytebuff4)
(226,*src & 192 >> 6)
(227,3)
(228,bytebuff1)
(229,(bytebuff1 << 6)
(230,*src = (bytebuff1 << 6)
(231,PHOTOMETRIC_MINISBLACK)
(232,photometric !=  PHOTOMETRIC_MINISWHITE && photometric !=  PHOTOMETRIC_MINISBLACK)
(233,(uint8)
(234,"Image inversion not supported for more than one sample per pixel")
(235,col++)
(236,*src_uint16 = (uint16)
(237,col)
(238,bps)
(239,col)
(240,col = 0)
(241,src_uint32)
(242,for (row = 0; row < length; row++)
(243,row)
(244,240)
(245,1)
(246,uint16)
(247,12  >> 2)
(248,(uint8)
(249,row = 0)
(250,case 4:)
(251,)
(252,0)
(253,4 - (uint8)
(254,col)
(255,bytebuff3)
(256,0)
(257,row)
(258,row)
(259,"invertImage")
(260,spp)
(261,1)
(262,4)
(263,row)
(264,src)
(265,length)
(266,for (row = 0; row < length; row++)
(267,src_uint16)
(268,src)
(269,uint32 width)
(270,col)
(271,*src)
(272,col = 0)
(273,4)
(274,width)
(275,-1)
(276,)
(277,bytebuff3)
(278,row)
(279,src_uint16)
(280,src)
(281,"invertImage")
(282,return (-1)
(283,0)
(284,if (src == NULL)
(285,for (row = 0; row < length; row++)
(286,0)
(287,bytebuff1 = 4 - (uint8)
(288,bytebuff3 = 4 - (uint8)
(289,spp)
(290,255)
(291,src)
(292,break;)
(293,*src)
(294,photometric)
(295,bytebuff1 << 4 & bytebuff2)
(296,photometric)
(297,bytebuff2)
(298,row)
(299,bytebuff3 << 2)
(300,row++)
(301,"invertImage")
(302,12)
(303,240 >> 4)
(304,)
(305,uint8)
(306,col)
(307,row < length)
(308,length)
(309,0)
(310,4)
(311,8)
(312,"Only black and white and grayscale images can be inverted")
(313,(uint8)
(314,row)
(315,)
(316,row)
(317,uint8)
(318,spp * bps)
(319,case 8:)
(320,col)
(321,*src & 15)
(322,PHOTOMETRIC_MINISWHITE)
(323,default:)
(324,"Invalid crop buffer passed to invertImage")
(325,bytebuff1)
(326,4 - (uint8)
(327,(uint8)
(328,*src & 3)
(329,row)
(330,)
(331,src++)
(332,col)
(333,col)
(334,*src & 240 >> 4)
(335,col < width)
(336,spp != 1)
(337,4)
(338,col++)
(339,bytebuff2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
