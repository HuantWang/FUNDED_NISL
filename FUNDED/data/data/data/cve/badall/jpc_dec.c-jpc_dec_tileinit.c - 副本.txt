-----label-----
1
-----code-----
static int jpc_dec_tileinit(jpc_dec_t *dec, jpc_dec_tile_t *tile)
{
	jpc_dec_tcomp_t *tcomp;
	int compno;
	int rlvlno;
	jpc_dec_rlvl_t *rlvl;
	jpc_dec_band_t *band;
	jpc_dec_prc_t *prc;
	int bndno;
	jpc_tsfb_band_t *bnd;
	int bandno;
	jpc_dec_ccp_t *ccp;
	int prccnt;
	jpc_dec_cblk_t *cblk;
	int cblkcnt;
	uint_fast32_t tlprcxstart;
	uint_fast32_t tlprcystart;
	uint_fast32_t brprcxend;
	uint_fast32_t brprcyend;
	uint_fast32_t tlcbgxstart;
	uint_fast32_t tlcbgystart;
	uint_fast32_t brcbgxend;
	uint_fast32_t brcbgyend;
	uint_fast32_t cbgxstart;
	uint_fast32_t cbgystart;
	uint_fast32_t cbgxend;
	uint_fast32_t cbgyend;
	uint_fast32_t tlcblkxstart;
	uint_fast32_t tlcblkystart;
	uint_fast32_t brcblkxend;
	uint_fast32_t brcblkyend;
	uint_fast32_t cblkxstart;
	uint_fast32_t cblkystart;
	uint_fast32_t cblkxend;
	uint_fast32_t cblkyend;
	uint_fast32_t tmpxstart;
	uint_fast32_t tmpystart;
	uint_fast32_t tmpxend;
	uint_fast32_t tmpyend;
	jpc_dec_cp_t *cp;
	jpc_tsfb_band_t bnds[JPC_MAXBANDS];
	jpc_pchg_t *pchg;
	int pchgno;
	jpc_dec_cmpt_t *cmpt;

	cp = tile->cp;
	tile->realmode = 0;
	if (cp->mctid == JPC_MCT_ICT) {
		tile->realmode = 1;
	}

	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <
	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {
		ccp = &tile->cp->ccps[compno];
		if (ccp->qmfbid == JPC_COX_INS) {
			tile->realmode = 1;
		}
		tcomp->numrlvls = ccp->numrlvls;
		if (!(tcomp->rlvls = jas_alloc2(tcomp->numrlvls,
		  sizeof(jpc_dec_rlvl_t)))) {
			return -1;
		}
		if (!(tcomp->data = jas_seq2d_create(JPC_CEILDIV(tile->xstart,
		  cmpt->hstep), JPC_CEILDIV(tile->ystart, cmpt->vstep),
		  JPC_CEILDIV(tile->xend, cmpt->hstep), JPC_CEILDIV(tile->yend,
		  cmpt->vstep)))) {
			return -1;
		}
		if (!(tcomp->tsfb = jpc_cod_gettsfb(ccp->qmfbid,
		  tcomp->numrlvls - 1))) {
			return -1;
		}
		{
			jpc_tsfb_getbands(tcomp->tsfb, jas_seq2d_xstart(tcomp->data),
			  jas_seq2d_ystart(tcomp->data), jas_seq2d_xend(tcomp->data),
			  jas_seq2d_yend(tcomp->data), bnds);
		}
		for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;
		  ++rlvlno, ++rlvl) {
			rlvl->bands = 0;
			rlvl->xstart = JPC_CEILDIVPOW2(tcomp->xstart,
			  tcomp->numrlvls - 1 - rlvlno);
			rlvl->ystart = JPC_CEILDIVPOW2(tcomp->ystart,
			  tcomp->numrlvls - 1 - rlvlno);
			rlvl->xend = JPC_CEILDIVPOW2(tcomp->xend,
			  tcomp->numrlvls - 1 - rlvlno);
			rlvl->yend = JPC_CEILDIVPOW2(tcomp->yend,
			  tcomp->numrlvls - 1 - rlvlno);
			rlvl->prcwidthexpn = ccp->prcwidthexpns[rlvlno];
			rlvl->prcheightexpn = ccp->prcheightexpns[rlvlno];
			tlprcxstart = JPC_FLOORDIVPOW2(rlvl->xstart,
			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;
			tlprcystart = JPC_FLOORDIVPOW2(rlvl->ystart,
			  rlvl->prcheightexpn) << rlvl->prcheightexpn;
			brprcxend = JPC_CEILDIVPOW2(rlvl->xend,
			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;
			brprcyend = JPC_CEILDIVPOW2(rlvl->yend,
			  rlvl->prcheightexpn) << rlvl->prcheightexpn;
			rlvl->numhprcs = (brprcxend - tlprcxstart) >>
			  rlvl->prcwidthexpn;
			rlvl->numvprcs = (brprcyend - tlprcystart) >>
			  rlvl->prcheightexpn;
			rlvl->numprcs = rlvl->numhprcs * rlvl->numvprcs;

			if (rlvl->xstart >= rlvl->xend || rlvl->ystart >= rlvl->yend) {
				rlvl->bands = 0;
				rlvl->numprcs = 0;
				rlvl->numhprcs = 0;
				rlvl->numvprcs = 0;
				continue;
			}	
			if (!rlvlno) {
				tlcbgxstart = tlprcxstart;
				tlcbgystart = tlprcystart;
				brcbgxend = brprcxend;
				brcbgyend = brprcyend;
				rlvl->cbgwidthexpn = rlvl->prcwidthexpn;
				rlvl->cbgheightexpn = rlvl->prcheightexpn;
			} else {
				tlcbgxstart = JPC_CEILDIVPOW2(tlprcxstart, 1);
				tlcbgystart = JPC_CEILDIVPOW2(tlprcystart, 1);
				brcbgxend = JPC_CEILDIVPOW2(brprcxend, 1);
				brcbgyend = JPC_CEILDIVPOW2(brprcyend, 1);
				rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1;
				rlvl->cbgheightexpn = rlvl->prcheightexpn - 1;
			}
			rlvl->cblkwidthexpn = JAS_MIN(ccp->cblkwidthexpn,
			  rlvl->cbgwidthexpn);
			rlvl->cblkheightexpn = JAS_MIN(ccp->cblkheightexpn,
			  rlvl->cbgheightexpn);

			rlvl->numbands = (!rlvlno) ? 1 : 3;
			if (!(rlvl->bands = jas_alloc2(rlvl->numbands,
			  sizeof(jpc_dec_band_t)))) {
				return -1;
			}
			for (bandno = 0, band = rlvl->bands;
			  bandno < rlvl->numbands; ++bandno, ++band) {
				bndno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) +
				  bandno + 1);
				bnd = &bnds[bndno];

				band->orient = bnd->orient;
				band->stepsize = ccp->stepsizes[bndno];
				band->analgain = JPC_NOMINALGAIN(ccp->qmfbid,
				  tcomp->numrlvls - 1, rlvlno, band->orient);
				band->absstepsize = jpc_calcabsstepsize(band->stepsize,
				  cmpt->prec + band->analgain);
				band->numbps = ccp->numguardbits +
				  JPC_QCX_GETEXPN(band->stepsize) - 1;
				band->roishift = (ccp->roishift + band->numbps >= JPC_PREC) ?
				  (JPC_PREC - 1 - band->numbps) : ccp->roishift;
				band->data = 0;
				band->prcs = 0;
				if (bnd->xstart == bnd->xend || bnd->ystart == bnd->yend) {
					continue;
				}
				if (!(band->data = jas_seq2d_create(0, 0, 0, 0))) {
					return -1;
				}
				jas_seq2d_bindsub(band->data, tcomp->data, bnd->locxstart,
				  bnd->locystart, bnd->locxend, bnd->locyend);
				jas_seq2d_setshift(band->data, bnd->xstart, bnd->ystart);

				assert(rlvl->numprcs);

				if (!(band->prcs = jas_alloc2(rlvl->numprcs,
				  sizeof(jpc_dec_prc_t)))) {
					return -1;
				}

/************************************************/
				cbgxstart = tlcbgxstart;
				cbgystart = tlcbgystart;
				for (prccnt = rlvl->numprcs, prc = band->prcs;
				  prccnt > 0; --prccnt, ++prc) {
					cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);
					cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);
					prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,
					  jas_seq2d_xstart(band->data)));
					prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,
					  jas_seq2d_ystart(band->data)));
					prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,
					  jas_seq2d_xend(band->data)));
					prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,
					  jas_seq2d_yend(band->data)));
					if (prc->xend > prc->xstart && prc->yend > prc->ystart) {
						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,
						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;
						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,
						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;
						brcblkxend = JPC_CEILDIVPOW2(prc->xend,
						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;
						brcblkyend = JPC_CEILDIVPOW2(prc->yend,
						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;
						prc->numhcblks = (brcblkxend - tlcblkxstart) >>
						  rlvl->cblkwidthexpn;
						prc->numvcblks = (brcblkyend - tlcblkystart) >>
						  rlvl->cblkheightexpn;
						prc->numcblks = prc->numhcblks * prc->numvcblks;
						assert(prc->numcblks > 0);

						if (!(prc->incltagtree = jpc_tagtree_create(
						  prc->numhcblks, prc->numvcblks))) {
							return -1;
						}
						if (!(prc->numimsbstagtree = jpc_tagtree_create(
						  prc->numhcblks, prc->numvcblks))) {
							return -1;
						}
						if (!(prc->cblks = jas_alloc2(prc->numcblks,
						  sizeof(jpc_dec_cblk_t)))) {
							return -1;
						}

						cblkxstart = cbgxstart;
						cblkystart = cbgystart;
						for (cblkcnt = prc->numcblks, cblk = prc->cblks;
						  cblkcnt > 0;) {
							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);
							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);
							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);
							tmpystart = JAS_MAX(cblkystart, prc->ystart);
							tmpxend = JAS_MIN(cblkxend, prc->xend);
							tmpyend = JAS_MIN(cblkyend, prc->yend);
							if (tmpxend > tmpxstart && tmpyend > tmpystart) {
								cblk->firstpassno = -1;
								cblk->mqdec = 0;
								cblk->nulldec = 0;
								cblk->flags = 0;
								cblk->numpasses = 0;
								cblk->segs.head = 0;
								cblk->segs.tail = 0;
								cblk->curseg = 0;
								cblk->numimsbs = 0;
								cblk->numlenbits = 3;
								cblk->flags = 0;
								if (!(cblk->data = jas_seq2d_create(0, 0, 0,
								  0))) {
									return -1;
								}
								jas_seq2d_bindsub(cblk->data, band->data,
								  tmpxstart, tmpystart, tmpxend, tmpyend);
								++cblk;
								--cblkcnt;
							}
							cblkxstart += 1 << rlvl->cblkwidthexpn;
							if (cblkxstart >= cbgxend) {
								cblkxstart = cbgxstart;
								cblkystart += 1 << rlvl->cblkheightexpn;
							}
						}

					} else {
						prc->cblks = 0;
						prc->incltagtree = 0;
						prc->numimsbstagtree = 0;
					}
					cbgxstart += 1 << rlvl->cbgwidthexpn;
					if (cbgxstart >= brcbgxend) {
						cbgxstart = tlcbgxstart;
						cbgystart += 1 << rlvl->cbgheightexpn;
					}

				}
/********************************************/
			}
		}
	}

	if (!(tile->pi = jpc_dec_pi_create(dec, tile))) {
		return -1;
	}

	for (pchgno = 0; pchgno < jpc_pchglist_numpchgs(tile->cp->pchglist);
	  ++pchgno) {
		pchg = jpc_pchg_copy(jpc_pchglist_get(tile->cp->pchglist, pchgno));
		assert(pchg);
		jpc_pi_addpchg(tile->pi, pchg);
	}
	jpc_pi_init(tile->pi);

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
17,46
17,47
17,48
17,49
17,50
17,51
17,52
17,53
17,54
17,55
17,56
17,57
17,58
17,59
17,60
17,61
17,62
17,63
17,64
17,65
17,66
17,67
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
33,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
44,45
46,47
46,48
49,50
50,51
50,52
51,52
53,54
53,55
56,57
57,58
57,59
59,60
61,62
62,63
62,64
63,64
65,66
65,67
68,69
69,70
69,71
71,72
73,74
74,75
74,76
75,76
77,78
77,79
80,81
81,82
81,83
83,84
85,86
86,87
86,88
87,88
89,90
89,91
92,93
93,94
93,95
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
133,134
134,135
134,136
135,136
137,138
139,140
140,141
140,142
141,142
143,144
145,146
146,147
146,148
147,148
149,150
151,152
152,153
152,154
153,154
155,156
157,158
158,159
158,160
159,160
161,162
163,164
164,165
164,166
165,166
167,168
169,170
170,171
170,172
171,172
173,174
175,176
176,177
176,178
177,178
179,180
181,182
182,183
182,184
183,184
185,186
187,188
188,189
188,190
189,190
191,192
193,194
194,195
194,196
195,196
197,198
199,200
200,201
200,202
201,202
203,204
205,206
206,207
206,208
207,208
209,210
211,212
212,213
212,214
213,214
215,216
217,218
218,219
218,220
219,220
221,222
223,224
224,225
224,226
225,226
227,228
229,230
230,231
230,232
231,232
233,234
235,236
236,237
236,238
237,238
239,240
241,242
242,243
242,244
243,244
245,246
245,247
248,249
249,250
249,251
250,251
252,253
252,254
254,255
255,256
257,258
258,259
258,260
259,260
261,262
261,263
264,265
265,266
265,267
267,268
269,270
270,271
270,272
271,272
273,274
273,275
276,277
277,278
277,279
278,279
280,281
280,282
281,282
284,285
285,286
285,287
286,287
286,288
287,288
291,292
291,293
292,293
292,294
293,294
293,295
294,295
297,298
299,300
300,301
301,302
301,303
302,303
302,304
303,304
307,308
307,309
307,310
307,311
308,309
309,310
309,311
309,312
310,311
310,312
311,312
314,315
314,316
315,316
317,318
317,319
318,319
321,322
321,323
322,323
324,325
324,326
325,326
328,329
328,330
329,330
331,332
331,333
332,333
335,336
335,337
335,338
336,337
337,338
339,340
340,341
342,343
343,344
345,346
345,347
345,348
345,349
345,350
345,351
345,352
345,353
346,347
347,348
347,349
348,349
350,351
351,352
351,353
352,353
352,354
353,354
353,355
354,355
358,359
360,361
360,362
361,362
361,363
362,363
362,364
363,364
366,367
368,369
369,370
370,371
370,372
371,372
371,373
372,373
376,377
377,378
377,379
378,379
378,380
379,380
382,383
382,384
383,384
386,387
386,388
387,388
388,389
389,390
389,391
390,391
390,392
391,392
394,395
394,396
394,397
395,396
397,398
397,399
398,399
401,402
402,403
402,404
403,404
406,407
407,408
408,409
410,411
410,412
411,412
412,413
413,414
413,415
414,415
414,416
415,416
418,419
418,420
418,421
418,422
418,423
419,420
421,422
421,423
421,424
422,423
424,425
424,426
425,426
428,429
428,430
429,430
432,433
432,434
432,435
433,434
435,436
435,437
436,437
439,440
439,441
440,441
443,444
443,445
443,446
444,445
446,447
446,448
447,448
450,451
450,452
451,452
454,455
454,456
454,457
455,456
457,458
457,459
458,459
461,462
461,463
462,463
465,466
466,467
467,468
469,470
469,471
470,471
471,472
472,473
472,474
473,474
473,475
474,475
477,478
477,479
477,480
478,479
480,481
480,482
481,482
484,485
484,486
485,486
485,487
486,487
490,491
491,492
492,493
494,495
495,496
496,497
496,498
496,499
496,500
496,501
496,502
496,503
497,498
499,500
499,501
500,501
503,504
503,505
504,505
506,507
506,508
507,508
510,511
510,512
511,512
513,514
513,515
514,515
517,518
517,519
518,519
520,521
520,522
521,522
524,525
524,526
525,526
527,528
527,529
528,529
531,532
533,534
533,535
533,536
533,537
534,535
535,536
535,537
536,537
536,538
537,538
540,541
540,542
541,542
543,544
543,545
544,545
547,548
547,549
548,549
550,551
550,552
551,552
554,555
554,556
555,556
556,557
558,559
559,560
561,562
561,563
561,564
561,565
561,566
561,567
561,568
561,569
561,570
561,571
561,572
561,573
561,574
561,575
561,576
561,577
561,578
561,579
561,580
561,581
561,582
562,563
563,564
563,565
564,565
564,566
565,566
569,570
570,571
570,572
571,572
571,573
572,573
575,576
575,577
575,578
576,577
578,579
578,580
579,580
582,583
582,584
583,584
583,585
584,585
584,586
585,586
589,590
591,592
592,593
592,594
593,594
593,595
594,595
597,598
597,599
597,600
598,599
600,601
600,602
601,602
604,605
604,606
605,606
605,607
606,607
606,608
607,608
611,612
613,614
614,615
614,616
615,616
615,617
616,617
619,620
619,621
619,622
620,621
622,623
622,624
623,624
626,627
626,628
627,628
627,629
628,629
628,630
629,630
633,634
635,636
636,637
636,638
637,638
637,639
638,639
641,642
641,643
641,644
642,643
644,645
644,646
645,646
648,649
648,650
649,650
649,651
650,651
650,652
651,652
655,656
657,658
658,659
658,660
659,660
659,661
660,661
663,664
663,665
664,665
664,666
665,666
668,669
670,671
671,672
671,673
672,673
672,674
673,674
676,677
676,678
677,678
677,679
678,679
681,682
683,684
684,685
684,686
685,686
687,688
687,689
688,689
688,690
688,691
689,690
691,692
691,693
692,693
695,696
695,697
696,697
699,700
699,701
700,701
703,704
704,705
704,706
705,706
707,708
707,709
708,709
708,710
708,711
709,710
711,712
711,713
712,713
715,716
715,717
716,717
719,720
719,721
720,721
723,724
724,725
724,726
725,726
727,728
727,729
728,729
728,730
728,731
729,730
731,732
731,733
732,733
735,736
735,737
736,737
739,740
739,741
740,741
743,744
744,745
744,746
745,746
747,748
747,749
748,749
748,750
748,751
749,750
751,752
751,753
752,753
755,756
755,757
756,757
759,760
759,761
760,761
763,764
764,765
764,766
765,766
765,767
766,767
769,770
769,771
770,771
771,772
771,773
772,773
774,775
776,777
776,778
777,778
780,781
781,782
781,783
782,783
782,784
783,784
786,787
786,788
787,788
788,789
788,790
789,790
791,792
793,794
793,795
794,795
797,798
798,799
798,800
799,800
799,801
800,801
803,804
803,805
804,805
804,806
805,806
808,809
808,810
809,810
812,813
812,814
813,814
813,815
814,815
814,816
815,816
815,817
816,817
819,820
819,821
820,821
823,824
823,825
824,825
824,826
825,826
828,829
828,830
829,830
832,833
832,834
832,835
832,836
832,837
833,834
834,835
834,836
835,836
835,837
836,837
840,841
841,842
841,843
842,843
842,844
843,844
847,848
848,849
848,850
849,850
849,851
850,851
854,855
855,856
855,857
856,857
856,858
857,858
862,863
862,864
862,865
863,864
864,865
866,867
866,868
866,869
866,870
866,871
866,872
867,868
868,869
868,870
869,870
871,872
873,874
874,875
874,876
875,876
877,878
879,880
880,881
880,882
881,882
883,884
885,886
886,887
886,888
887,888
889,890
891,892
892,893
892,894
893,894
893,895
894,895
897,898
897,899
898,899
901,902
902,903
902,904
903,904
903,905
904,905
907,908
907,909
908,909
911,912
911,913
911,914
911,915
911,916
911,917
912,913
913,914
913,915
914,915
916,917
916,918
916,919
917,918
919,920
922,923
923,924
923,925
924,925
926,927
926,928
926,929
927,928
929,930
932,933
933,934
933,935
934,935
936,937
936,938
936,939
937,938
939,940
942,943
943,944
943,945
944,945
946,947
946,948
946,949
947,948
949,950
952,953
953,954
953,955
954,955
954,956
955,956
958,959
958,960
959,960
959,961
960,961
964,965
965,966
965,967
966,967
966,968
967,968
970,971
970,972
971,972
971,973
972,973
976,977
977,978
977,979
978,979
978,980
979,980
982,983
982,984
982,985
983,984
985,986
985,987
986,987
989,990
989,991
990,991
993,994
994,995
994,996
995,996
995,997
996,997
999,1000
999,1001
999,1002
1000,1001
1002,1003
1002,1004
1003,1004
1006,1007
1006,1008
1007,1008
1010,1011
1011,1012
1011,1013
1012,1013
1012,1014
1013,1014
1016,1017
1016,1018
1016,1019
1017,1018
1018,1019
1019,1020
1023,1024
1023,1025
1024,1025
1025,1026
1026,1027
1026,1028
1027,1028
1027,1029
1028,1029
1031,1032
1031,1033
1031,1034
1032,1033
1034,1035
1034,1036
1035,1036
1038,1039
1039,1040
1039,1041
1040,1041
1043,1044
1044,1045
1045,1046
1047,1048
1047,1049
1047,1050
1047,1051
1048,1049
1049,1050
1049,1051
1050,1051
1050,1052
1051,1052
1054,1055
1054,1056
1055,1056
1057,1058
1057,1059
1058,1059
1061,1062
1061,1063
1062,1063
1064,1065
1064,1066
1065,1066
1068,1069
1068,1070
1069,1070
1070,1071
1072,1073
1073,1074
1075,1076
1075,1077
1075,1078
1075,1079
1075,1080
1075,1081
1075,1082
1075,1083
1075,1084
1075,1085
1075,1086
1075,1087
1075,1088
1075,1089
1075,1090
1075,1091
1075,1092
1075,1093
1075,1094
1076,1077
1077,1078
1077,1079
1078,1079
1080,1081
1080,1082
1080,1083
1081,1082
1082,1083
1083,1084
1086,1087
1087,1088
1087,1089
1088,1089
1088,1090
1089,1090
1089,1091
1091,1092
1092,1093
1092,1094
1093,1094
1096,1097
1099,1100
1100,1101
1100,1102
1101,1102
1103,1104
1104,1105
1104,1106
1105,1106
1107,1108
1109,1110
1110,1111
1110,1112
1111,1112
1111,1113
1112,1113
1115,1116
1115,1117
1116,1117
1119,1120
1120,1121
1120,1122
1121,1122
1121,1123
1122,1123
1125,1126
1125,1127
1126,1127
1126,1128
1127,1128
1130,1131
1132,1133
1133,1134
1133,1135
1134,1135
1134,1136
1135,1136
1138,1139
1138,1140
1138,1141
1138,1142
1138,1143
1139,1140
1141,1142
1141,1143
1142,1143
1145,1146
1145,1147
1146,1147
1146,1148
1147,1148
1151,1152
1153,1154
1153,1155
1154,1155
1157,1158
1158,1159
1158,1160
1159,1160
1159,1161
1160,1161
1163,1164
1163,1165
1163,1166
1164,1165
1166,1167
1166,1168
1167,1168
1170,1171
1170,1172
1171,1172
1171,1173
1172,1173
1175,1176
1175,1177
1176,1177
1179,1180
1180,1181
1180,1182
1181,1182
1181,1183
1182,1183
1185,1186
1185,1187
1186,1187
1186,1188
1187,1188
1187,1189
1188,1189
1191,1192
1191,1193
1192,1193
1194,1195
1194,1196
1195,1196
1199,1200
1200,1201
1200,1202
1201,1202
1201,1203
1202,1203
1205,1206
1205,1207
1205,1208
1206,1207
1207,1208
1207,1209
1208,1209
1208,1210
1209,1210
1209,1211
1210,1211
1213,1214
1213,1215
1214,1215
1217,1218
1219,1220
1220,1221
1220,1222
1221,1222
1221,1223
1222,1223
1225,1226
1225,1227
1226,1227
1229,1230
1229,1231
1230,1231
1233,1234
1234,1235
1234,1236
1235,1236
1235,1237
1236,1237
1240,1241
1241,1242
1241,1243
1242,1243
1242,1244
1243,1244
1247,1248
1247,1249
1248,1249
1248,1250
1249,1250
1249,1251
1250,1251
1250,1252
1251,1252
1254,1255
1254,1256
1255,1256
1258,1259
1258,1260
1259,1260
1259,1261
1260,1261
1263,1264
1263,1265
1264,1265
1267,1268
1269,1270
1269,1271
1270,1271
1271,1272
1272,1273
1272,1274
1273,1274
1273,1275
1274,1275
1277,1278
1277,1279
1277,1280
1277,1281
1277,1282
1278,1279
1284,1285
1285,1286
1286,1287
1288,1289
1289,1290
1289,1291
1289,1292
1289,1293
1289,1294
1289,1295
1289,1296
1290,1291
1292,1293
1292,1294
1293,1294
1296,1297
1296,1298
1297,1298
1300,1301
1300,1302
1301,1302
1304,1305
1304,1306
1305,1306
1308,1309
1308,1310
1309,1310
1312,1313
1312,1314
1313,1314
1316,1317
1317,1318
1317,1319
1317,1320
1317,1321
1318,1319
1320,1321
1320,1322
1321,1322
1324,1325
1324,1326
1325,1326
1328,1329
1328,1330
1329,1330
1332,1333
1333,1334
1333,1335
1334,1335
1336,1337
1336,1338
1337,1338
1340,1341
1340,1342
1341,1342
1342,1343
1343,1344
1343,1345
1344,1345
1344,1346
1345,1346
1348,1349
1348,1350
1348,1351
1349,1350
1351,1352
1351,1353
1352,1353
1355,1356
1356,1357
1356,1358
1357,1358
1360,1361
1361,1362
1362,1363
1364,1365
1365,1366
1365,1367
1366,1367
1368,1369
1370,1371
1371,1372
1371,1373
1372,1373
1374,1375
1376,1377
1376,1378
1376,1379
1376,1380
1377,1378
1378,1379
1378,1380
1379,1380
1379,1381
1380,1381
1382,1383
1382,1384
1383,1384
1386,1387
1386,1388
1387,1388
1389,1390
1389,1391
1390,1391
1393,1394
1393,1395
1394,1395
1397,1398
1397,1399
1398,1399
1399,1400
1401,1402
1402,1403
1404,1405
1404,1406
1404,1407
1404,1408
1404,1409
1404,1410
1404,1411
1404,1412
1404,1413
1405,1406
1406,1407
1406,1408
1407,1408
1409,1410
1409,1411
1410,1411
1412,1413
1413,1414
1413,1415
1415,1416
1415,1417
1416,1417
1419,1420
1420,1421
1420,1422
1421,1422
1423,1424
1423,1425
1424,1425
1426,1427
1427,1428
1427,1429
1429,1430
1429,1431
1430,1431
1433,1434
1434,1435
1434,1436
1435,1436
1435,1437
1436,1437
1439,1440
1439,1441
1439,1442
1440,1441
1442,1443
1444,1445
1444,1446
1444,1447
1445,1446
1447,1448
1449,1450
1449,1451
1450,1451
1452,1453
1452,1454
1453,1454
1456,1457
1457,1458
1457,1459
1458,1459
1458,1460
1459,1460
1462,1463
1462,1464
1462,1465
1463,1464
1465,1466
1467,1468
1467,1469
1467,1470
1468,1469
1470,1471
1472,1473
1472,1474
1473,1474
1475,1476
1475,1477
1476,1477
1479,1480
1480,1481
1480,1482
1481,1482
1481,1483
1482,1483
1485,1486
1485,1487
1485,1488
1486,1487
1488,1489
1490,1491
1490,1492
1490,1493
1491,1492
1493,1494
1495,1496
1495,1497
1496,1497
1498,1499
1498,1500
1499,1500
1502,1503
1503,1504
1503,1505
1504,1505
1504,1506
1505,1506
1508,1509
1508,1510
1508,1511
1509,1510
1511,1512
1513,1514
1513,1515
1513,1516
1514,1515
1516,1517
1518,1519
1518,1520
1519,1520
1521,1522
1521,1523
1522,1523
1525,1526
1525,1527
1525,1528
1526,1527
1526,1528
1527,1528
1527,1529
1528,1529
1528,1530
1529,1530
1532,1533
1532,1534
1533,1534
1536,1537
1536,1538
1537,1538
1537,1539
1538,1539
1541,1542
1541,1543
1542,1543
1545,1546
1545,1547
1545,1548
1545,1549
1545,1550
1545,1551
1545,1552
1545,1553
1545,1554
1545,1555
1545,1556
1545,1557
1545,1558
1545,1559
1546,1547
1547,1548
1547,1549
1548,1549
1550,1551
1550,1552
1551,1552
1551,1553
1551,1554
1552,1553
1554,1555
1554,1556
1555,1556
1558,1559
1558,1560
1559,1560
1562,1563
1562,1564
1563,1564
1566,1567
1567,1568
1567,1569
1568,1569
1570,1571
1570,1572
1571,1572
1571,1573
1571,1574
1572,1573
1574,1575
1574,1576
1575,1576
1578,1579
1578,1580
1579,1580
1582,1583
1582,1584
1583,1584
1586,1587
1587,1588
1587,1589
1588,1589
1590,1591
1590,1592
1591,1592
1591,1593
1591,1594
1592,1593
1594,1595
1594,1596
1595,1596
1598,1599
1598,1600
1599,1600
1602,1603
1602,1604
1603,1604
1606,1607
1607,1608
1607,1609
1608,1609
1610,1611
1610,1612
1611,1612
1611,1613
1611,1614
1612,1613
1614,1615
1614,1616
1615,1616
1618,1619
1618,1620
1619,1620
1622,1623
1622,1624
1623,1624
1626,1627
1627,1628
1627,1629
1628,1629
1628,1630
1629,1630
1632,1633
1632,1634
1633,1634
1634,1635
1634,1636
1635,1636
1637,1638
1639,1640
1639,1641
1640,1641
1643,1644
1644,1645
1644,1646
1645,1646
1645,1647
1646,1647
1649,1650
1649,1651
1650,1651
1651,1652
1651,1653
1652,1653
1654,1655
1656,1657
1656,1658
1657,1658
1660,1661
1661,1662
1661,1663
1662,1663
1662,1664
1663,1664
1666,1667
1666,1668
1667,1668
1667,1669
1668,1669
1671,1672
1671,1673
1672,1673
1675,1676
1676,1677
1676,1678
1677,1678
1679,1680
1679,1681
1680,1681
1680,1682
1681,1682
1685,1686
1685,1687
1686,1687
1687,1688
1688,1689
1688,1690
1689,1690
1689,1691
1690,1691
1693,1694
1693,1695
1693,1696
1694,1695
1696,1697
1696,1698
1697,1698
1700,1701
1700,1702
1701,1702
1704,1705
1705,1706
1706,1707
1708,1709
1708,1710
1709,1710
1710,1711
1711,1712
1711,1713
1712,1713
1712,1714
1713,1714
1716,1717
1716,1718
1716,1719
1717,1718
1719,1720
1719,1721
1720,1721
1723,1724
1723,1725
1724,1725
1727,1728
1728,1729
1729,1730
1731,1732
1731,1733
1732,1733
1733,1734
1734,1735
1734,1736
1735,1736
1735,1737
1736,1737
1739,1740
1739,1741
1739,1742
1740,1741
1742,1743
1742,1744
1743,1744
1746,1747
1747,1748
1747,1749
1748,1749
1751,1752
1752,1753
1753,1754
1755,1756
1756,1757
1756,1758
1757,1758
1759,1760
1761,1762
1762,1763
1762,1764
1763,1764
1765,1766
1767,1768
1767,1769
1767,1770
1768,1769
1769,1770
1769,1771
1770,1771
1770,1772
1771,1772
1773,1774
1773,1775
1774,1775
1777,1778
1777,1779
1778,1779
1780,1781
1780,1782
1781,1782
1784,1785
1784,1786
1785,1786
1788,1789
1788,1790
1788,1791
1788,1792
1788,1793
1788,1794
1788,1795
1788,1796
1788,1797
1789,1790
1790,1791
1790,1792
1791,1792
1793,1794
1793,1795
1794,1795
1796,1797
1797,1798
1797,1799
1799,1800
1799,1801
1800,1801
1803,1804
1804,1805
1804,1806
1805,1806
1807,1808
1807,1809
1808,1809
1810,1811
1811,1812
1811,1813
1813,1814
1813,1815
1814,1815
1817,1818
1818,1819
1818,1820
1819,1820
1821,1822
1821,1823
1821,1824
1822,1823
1824,1825
1826,1827
1826,1828
1827,1828
1830,1831
1831,1832
1831,1833
1832,1833
1834,1835
1834,1836
1834,1837
1835,1836
1837,1838
1839,1840
1839,1841
1840,1841
1843,1844
1844,1845
1844,1846
1845,1846
1847,1848
1847,1849
1847,1850
1848,1849
1850,1851
1852,1853
1852,1854
1853,1854
1856,1857
1857,1858
1857,1859
1858,1859
1860,1861
1860,1862
1860,1863
1861,1862
1863,1864
1865,1866
1865,1867
1866,1867
1869,1870
1869,1871
1870,1871
1870,1872
1871,1872
1871,1873
1872,1873
1874,1875
1876,1877
1876,1878
1877,1878
1879,1880
1881,1882
1881,1883
1881,1884
1881,1885
1881,1886
1881,1887
1881,1888
1881,1889
1881,1890
1881,1891
1881,1892
1881,1893
1881,1894
1881,1895
1881,1896
1882,1883
1883,1884
1883,1885
1884,1885
1884,1886
1885,1886
1888,1889
1890,1891
1891,1892
1891,1893
1892,1893
1892,1894
1893,1894
1897,1898
1898,1899
1898,1900
1899,1900
1899,1901
1900,1901
1904,1905
1905,1906
1905,1907
1906,1907
1906,1908
1907,1908
1911,1912
1912,1913
1912,1914
1913,1914
1913,1915
1914,1915
1918,1919
1919,1920
1919,1921
1920,1921
1920,1922
1921,1922
1921,1923
1922,1923
1927,1928
1928,1929
1928,1930
1929,1930
1929,1931
1930,1931
1930,1932
1931,1932
1936,1937
1937,1938
1937,1939
1938,1939
1938,1940
1939,1940
1943,1944
1944,1945
1944,1946
1945,1946
1945,1947
1946,1947
1950,1951
1951,1952
1951,1953
1952,1953
1952,1954
1953,1954
1957,1958
1958,1959
1958,1960
1959,1960
1959,1961
1960,1961
1964,1965
1964,1966
1965,1966
1966,1967
1967,1968
1967,1969
1968,1969
1968,1970
1969,1970
1972,1973
1972,1974
1972,1975
1972,1976
1972,1977
1973,1974
1979,1980
1980,1981
1981,1982
1983,1984
1984,1985
1984,1986
1984,1987
1984,1988
1984,1989
1984,1990
1984,1991
1985,1986
1987,1988
1987,1989
1988,1989
1991,1992
1991,1993
1992,1993
1995,1996
1997,1998
1999,2000
2001,2002
2003,2004
2004,2005
2005,2006
2007,2008
2008,2009
2009,2010
2011,2012
2012,2013
2012,2014
2013,2014
2015,2016
2015,2017
2017,2018
2017,2019
2018,2019
2021,2022
2021,2023
2022,2023
2022,2024
2023,2024
2025,2026
2027,2028
2027,2029
2028,2029
2029,2030
2029,2031
2030,2031
2032,2033
2034,2035
2035,2036
2035,2037
2036,2037
2038,2039
2038,2040
2040,2041
2040,2042
2041,2042
2044,2045
2044,2046
2044,2047
2045,2046
2046,2047
2046,2048
2047,2048
2047,2049
2048,2049
2052,2053
2053,2054
2053,2055
2054,2055
2054,2056
2055,2056
2059,2060
2060,2061
2060,2062
2061,2062
2061,2063
2062,2063
2066,2067
2067,2068
2067,2069
2068,2069
2070,2071
2070,2072
2072,2073
2072,2074
2073,2074
2076,2077
2076,2078
2077,2078
2077,2079
2078,2079
2080,2081
2082,2083
2082,2084
2083,2084
2084,2085
2084,2086
2085,2086
2087,2088
2089,2090
2090,2091
2090,2092
2091,2092
2093,2094
2093,2095
2095,2096
2095,2097
2096,2097
2099,2100
2099,2101
2100,2101
2101,2102
2102,2103
2102,2104
2103,2104
2103,2105
2104,2105
2107,2108
2107,2109
2107,2110
2108,2109
2110,2111
2112,2113
2114,2115
2115,2116
2116,2117
2118,2119
2118,2120
2118,2121
2118,2122
2119,2120
2120,2121
2120,2122
2121,2122
2124,2125
2124,2126
2125,2126
2127,2128
2127,2129
2128,2129
2130,2131
2130,2132
2131,2132
2131,2133
2132,2133
2136,2137
2137,2138
2139,2140
2139,2141
2139,2142
2140,2141
2141,2142
2141,2143
2142,2143
2144,2145
2144,2146
2145,2146
2147,2148
2147,2149
2147,2150
2148,2149
2150,2151
2150,2152
2151,2152
2151,2153
2152,2153
2156,2157
2158,2159
2159,2160
2159,2161
2160,2161
2162,2163
2164,2165
2165,2166
2165,2167
2165,2168
2166,2167
2168,2169
2168,2170
2169,2170
2172,2173
2174,2175
2175,2176
2175,2177
2176,2177
2178,2179
2178,2180
2179,2180
2182,2183
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,27,29,32,34,38,40,41,45,47,48,52,54,55,58,60,64,66,67,70,72,76,78,79,82,84,88,90,91,94,96,100,102,106,108,112,114,118,120,124,126,130,132,136,138,142,144,148,150,154,156,160,162,166,168,172,174,178,180,184,186,190,192,196,198,202,204,208,210,214,216,220,222,226,228,232,234,238,240,244,246,247,251,253,256,260,262,263,266,268,272,274,275,279,282,283,288,289,290,295,296,298,304,305,306,312,313,316,319,320,323,326,327,330,333,334,338,341,344,349,355,356,357,359,364,365,367,373,374,375,380,381,384,385,392,393,396,399,400,404,405,409,416,417,420,423,426,427,430,431,434,437,438,441,442,445,448,449,452,453,456,459,460,463,464,468,475,476,479,482,483,487,488,489,493,498,501,502,505,508,509,512,515,516,519,522,523,526,529,530,532,538,539,542,545,546,549,552,553,557,560,566,567,568,573,574,577,580,581,586,587,588,590,595,596,599,602,603,608,609,610,612,617,618,621,624,625,630,631,632,634,639,640,643,646,647,652,653,654,656,661,662,666,667,669,674,675,679,680,682,686,690,693,694,697,698,701,702,706,710,713,714,717,718,721,722,726,730,733,734,737,738,741,742,746,750,753,754,757,758,761,762,767,768,773,775,778,779,784,785,790,792,795,796,801,802,806,807,810,811,817,818,821,822,826,827,830,831,837,838,839,844,845,846,851,852,853,858,859,860,861,865,870,872,876,878,882,884,888,890,895,896,899,900,905,906,909,910,915,918,920,921,925,928,930,931,935,938,940,941,945,948,950,951,956,957,961,962,963,968,969,973,974,975,980,981,984,987,988,991,992,997,998,1001,1004,1005,1008,1009,1014,1015,1020,1021,1022,1029,1030,1033,1036,1037,1041,1042,1046,1052,1053,1056,1059,1060,1063,1066,1067,1071,1074,1079,1084,1085,1090,1094,1095,1097,1098,1102,1106,1108,1113,1114,1117,1118,1123,1124,1128,1129,1131,1136,1137,1140,1143,1144,1148,1149,1150,1152,1155,1156,1161,1162,1165,1168,1169,1173,1174,1177,1178,1183,1184,1189,1190,1193,1196,1197,1198,1203,1204,1211,1212,1215,1216,1218,1223,1224,1227,1228,1231,1232,1237,1238,1239,1244,1245,1246,1252,1253,1256,1257,1261,1262,1265,1266,1268,1275,1276,1279,1280,1281,1282,1283,1287,1291,1294,1295,1298,1299,1302,1303,1306,1307,1310,1311,1314,1315,1319,1322,1323,1326,1327,1330,1331,1335,1338,1339,1346,1347,1350,1353,1354,1358,1359,1363,1367,1369,1373,1375,1381,1384,1385,1388,1391,1392,1395,1396,1400,1403,1408,1411,1414,1417,1418,1422,1425,1428,1431,1432,1437,1438,1441,1443,1446,1448,1451,1454,1455,1460,1461,1464,1466,1469,1471,1474,1477,1478,1483,1484,1487,1489,1492,1494,1497,1500,1501,1506,1507,1510,1512,1515,1517,1520,1523,1524,1530,1531,1534,1535,1539,1540,1543,1544,1549,1553,1556,1557,1560,1561,1564,1565,1569,1573,1576,1577,1580,1581,1584,1585,1589,1593,1596,1597,1600,1601,1604,1605,1609,1613,1616,1617,1620,1621,1624,1625,1630,1631,1636,1638,1641,1642,1647,1648,1653,1655,1658,1659,1664,1665,1669,1670,1673,1674,1678,1682,1683,1684,1691,1692,1695,1698,1699,1702,1703,1707,1714,1715,1718,1721,1722,1725,1726,1730,1737,1738,1741,1744,1745,1749,1750,1754,1758,1760,1764,1766,1772,1775,1776,1779,1782,1783,1786,1787,1792,1795,1798,1801,1802,1806,1809,1812,1815,1816,1820,1823,1825,1828,1829,1833,1836,1838,1841,1842,1846,1849,1851,1854,1855,1859,1862,1864,1867,1868,1873,1875,1878,1880,1886,1887,1889,1894,1895,1896,1901,1902,1903,1908,1909,1910,1915,1916,1917,1923,1924,1925,1926,1932,1933,1934,1935,1940,1941,1942,1947,1948,1949,1954,1955,1956,1961,1962,1963,1970,1971,1974,1975,1976,1977,1978,1982,1986,1989,1990,1993,1994,1996,1998,2000,2002,2006,2010,2014,2016,2019,2020,2024,2026,2031,2033,2037,2039,2042,2043,2049,2050,2051,2056,2057,2058,2063,2064,2065,2069,2071,2074,2075,2079,2081,2086,2088,2092,2094,2097,2098,2105,2106,2109,2111,2113,2117,2122,2123,2126,2129,2133,2134,2135,2138,2143,2146,2149,2153,2154,2155,2157,2161,2163,2167,2170,2171,2173,2177,2180,2181,2183
-----computeFrom-----
277,278
277,279
285,286
285,287
292,293
292,294
301,302
301,303
310,311
310,312
314,315
314,316
321,322
321,323
328,329
328,330
347,348
347,349
361,362
361,363
370,371
370,372
377,378
377,379
389,390
389,391
413,414
413,415
472,473
472,474
484,485
484,486
536,537
536,538
540,541
540,542
547,548
547,549
563,564
563,565
570,571
570,572
582,583
582,584
583,584
583,585
592,593
592,594
604,605
604,606
605,606
605,607
614,615
614,616
626,627
626,628
627,628
627,629
636,637
636,638
648,649
648,650
649,650
649,651
658,659
658,660
671,672
671,673
684,685
684,686
687,688
687,689
704,705
704,706
707,708
707,709
724,725
724,726
727,728
727,729
744,745
744,746
747,748
747,749
764,765
764,766
769,770
769,771
771,772
771,773
781,782
781,783
786,787
786,788
788,789
788,790
798,799
798,800
803,804
803,805
813,814
813,815
814,815
814,816
823,824
823,825
834,835
834,836
841,842
841,843
848,849
848,850
855,856
855,857
868,869
868,870
874,875
874,876
880,881
880,882
886,887
886,888
892,893
892,894
902,903
902,904
913,914
913,915
923,924
923,925
933,934
933,935
943,944
943,945
953,954
953,955
958,959
958,960
965,966
965,967
970,971
970,972
977,978
977,979
994,995
994,996
1011,1012
1011,1013
1026,1027
1026,1028
1050,1051
1050,1052
1054,1055
1054,1056
1061,1062
1061,1063
1077,1078
1077,1079
1087,1088
1087,1089
1088,1089
1088,1090
1089,1090
1089,1091
1092,1093
1092,1094
1100,1101
1100,1102
1110,1111
1110,1112
1120,1121
1120,1122
1133,1134
1133,1135
1145,1146
1145,1147
1158,1159
1158,1160
1170,1171
1170,1172
1180,1181
1180,1182
1185,1186
1185,1187
1186,1187
1186,1188
1200,1201
1200,1202
1207,1208
1207,1209
1208,1209
1208,1210
1220,1221
1220,1222
1221,1222
1221,1223
1234,1235
1234,1236
1241,1242
1241,1243
1248,1249
1248,1250
1249,1250
1249,1251
1258,1259
1258,1260
1272,1273
1272,1274
1343,1344
1343,1345
1365,1366
1365,1367
1371,1372
1371,1373
1379,1380
1379,1381
1386,1387
1386,1388
1393,1394
1393,1395
1406,1407
1406,1408
1409,1410
1409,1411
1413,1414
1413,1415
1420,1421
1420,1422
1423,1424
1423,1425
1427,1428
1427,1429
1434,1435
1434,1436
1457,1458
1457,1459
1480,1481
1480,1482
1503,1504
1503,1505
1526,1527
1526,1528
1527,1528
1527,1529
1536,1537
1536,1538
1547,1548
1547,1549
1550,1551
1550,1552
1567,1568
1567,1569
1570,1571
1570,1572
1587,1588
1587,1589
1590,1591
1590,1592
1607,1608
1607,1609
1610,1611
1610,1612
1627,1628
1627,1629
1632,1633
1632,1634
1634,1635
1634,1636
1644,1645
1644,1646
1649,1650
1649,1651
1651,1652
1651,1653
1661,1662
1661,1663
1666,1667
1666,1668
1679,1680
1679,1681
1688,1689
1688,1690
1711,1712
1711,1713
1734,1735
1734,1736
1756,1757
1756,1758
1762,1763
1762,1764
1770,1771
1770,1772
1777,1778
1777,1779
1784,1785
1784,1786
1790,1791
1790,1792
1793,1794
1793,1795
1797,1798
1797,1799
1804,1805
1804,1806
1807,1808
1807,1809
1811,1812
1811,1813
1818,1819
1818,1820
1831,1832
1831,1833
1844,1845
1844,1846
1857,1858
1857,1859
1870,1871
1870,1872
1871,1872
1871,1873
1876,1877
1876,1878
1883,1884
1883,1885
1891,1892
1891,1893
1898,1899
1898,1900
1905,1906
1905,1907
1912,1913
1912,1914
1919,1920
1919,1921
1928,1929
1928,1930
1937,1938
1937,1939
1944,1945
1944,1946
1951,1952
1951,1953
1958,1959
1958,1960
1967,1968
1967,1969
2012,2013
2012,2014
2015,2016
2015,2017
2022,2023
2022,2024
2029,2030
2029,2031
2035,2036
2035,2037
2038,2039
2038,2040
2046,2047
2046,2048
2053,2054
2053,2055
2060,2061
2060,2062
2067,2068
2067,2069
2070,2071
2070,2072
2077,2078
2077,2079
2084,2085
2084,2086
2090,2091
2090,2092
2093,2094
2093,2095
2102,2103
2102,2104
2120,2121
2120,2122
2124,2125
2124,2126
2141,2142
2141,2143
-----guardedBy-----
830,858
1543,1867
1535,1829
1540,1868
1531,1855
1544,1842
1880,1998
1878,2002
1875,1996
1873,2000
2024,2031
2079,2086
-----guardedByNegation-----
1543,2063
-----lastLexicalUse-----
1543,2063
-----jump-----
1543,2063
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ContinueStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int jpc_dec_tileinit(jpc_dec_t *dec, jpc_dec_tile_t *tile){	jpc_dec_tcomp_t *tcomp;	int compno;	int rlvlno;	jpc_dec_rlvl_t *rlvl;	jpc_dec_band_t *band;	jpc_dec_prc_t *prc;	int bndno;	jpc_tsfb_band_t *bnd;	int bandno;	jpc_dec_ccp_t *ccp;	int prccnt;	jpc_dec_cblk_t *cblk;	int cblkcnt;	uint_fast32_t tlprcxstart;	uint_fast32_t tlprcystart;	uint_fast32_t brprcxend;	uint_fast32_t brprcyend;	uint_fast32_t tlcbgxstart;	uint_fast32_t tlcbgystart;	uint_fast32_t brcbgxend;	uint_fast32_t brcbgyend;	uint_fast32_t cbgxstart;	uint_fast32_t cbgystart;	uint_fast32_t cbgxend;	uint_fast32_t cbgyend;	uint_fast32_t tlcblkxstart;	uint_fast32_t tlcblkystart;	uint_fast32_t brcblkxend;	uint_fast32_t brcblkyend;	uint_fast32_t cblkxstart;	uint_fast32_t cblkystart;	uint_fast32_t cblkxend;	uint_fast32_t cblkyend;	uint_fast32_t tmpxstart;	uint_fast32_t tmpystart;	uint_fast32_t tmpxend;	uint_fast32_t tmpyend;	jpc_dec_cp_t *cp;	jpc_tsfb_band_t bnds[JPC_MAXBANDS];	jpc_pchg_t *pchg;	int pchgno;	jpc_dec_cmpt_t *cmpt;	cp = tile->cp;	tile->realmode = 0;	if (cp->mctid == JPC_MCT_ICT) {		tile->realmode = 1;	}	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		ccp = &tile->cp->ccps[compno];		if (ccp->qmfbid == JPC_COX_INS) {			tile->realmode = 1;		}		tcomp->numrlvls = ccp->numrlvls;		if (!(tcomp->rlvls = jas_alloc2(tcomp->numrlvls,		  sizeof(jpc_dec_rlvl_t)))) {			return -1;		}		if (!(tcomp->data = jas_seq2d_create(JPC_CEILDIV(tile->xstart,		  cmpt->hstep), JPC_CEILDIV(tile->ystart, cmpt->vstep),		  JPC_CEILDIV(tile->xend, cmpt->hstep), JPC_CEILDIV(tile->yend,		  cmpt->vstep)))) {			return -1;		}		if (!(tcomp->tsfb = jpc_cod_gettsfb(ccp->qmfbid,		  tcomp->numrlvls - 1))) {			return -1;		}		{			jpc_tsfb_getbands(tcomp->tsfb, jas_seq2d_xstart(tcomp->data),			  jas_seq2d_ystart(tcomp->data), jas_seq2d_xend(tcomp->data),			  jas_seq2d_yend(tcomp->data), bnds);		}		for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;		  ++rlvlno, ++rlvl) {			rlvl->bands = 0;			rlvl->xstart = JPC_CEILDIVPOW2(tcomp->xstart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->ystart = JPC_CEILDIVPOW2(tcomp->ystart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->xend = JPC_CEILDIVPOW2(tcomp->xend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->yend = JPC_CEILDIVPOW2(tcomp->yend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->prcwidthexpn = ccp->prcwidthexpns[rlvlno];			rlvl->prcheightexpn = ccp->prcheightexpns[rlvlno];			tlprcxstart = JPC_FLOORDIVPOW2(rlvl->xstart,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			tlprcystart = JPC_FLOORDIVPOW2(rlvl->ystart,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			brprcxend = JPC_CEILDIVPOW2(rlvl->xend,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			brprcyend = JPC_CEILDIVPOW2(rlvl->yend,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			rlvl->numhprcs = (brprcxend - tlprcxstart) >>			  rlvl->prcwidthexpn;			rlvl->numvprcs = (brprcyend - tlprcystart) >>			  rlvl->prcheightexpn;			rlvl->numprcs = rlvl->numhprcs * rlvl->numvprcs;			if (rlvl->xstart >= rlvl->xend || rlvl->ystart >= rlvl->yend) {				rlvl->bands = 0;				rlvl->numprcs = 0;				rlvl->numhprcs = 0;				rlvl->numvprcs = 0;				continue;			}				if (!rlvlno) {				tlcbgxstart = tlprcxstart;				tlcbgystart = tlprcystart;				brcbgxend = brprcxend;				brcbgyend = brprcyend;				rlvl->cbgwidthexpn = rlvl->prcwidthexpn;				rlvl->cbgheightexpn = rlvl->prcheightexpn;			} else {				tlcbgxstart = JPC_CEILDIVPOW2(tlprcxstart, 1);				tlcbgystart = JPC_CEILDIVPOW2(tlprcystart, 1);				brcbgxend = JPC_CEILDIVPOW2(brprcxend, 1);				brcbgyend = JPC_CEILDIVPOW2(brprcyend, 1);				rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1;				rlvl->cbgheightexpn = rlvl->prcheightexpn - 1;			}			rlvl->cblkwidthexpn = JAS_MIN(ccp->cblkwidthexpn,			  rlvl->cbgwidthexpn);			rlvl->cblkheightexpn = JAS_MIN(ccp->cblkheightexpn,			  rlvl->cbgheightexpn);			rlvl->numbands = (!rlvlno) ? 1 : 3;			if (!(rlvl->bands = jas_alloc2(rlvl->numbands,			  sizeof(jpc_dec_band_t)))) {				return -1;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				bndno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) +				  bandno + 1);				bnd = &bnds[bndno];				band->orient = bnd->orient;				band->stepsize = ccp->stepsizes[bndno];				band->analgain = JPC_NOMINALGAIN(ccp->qmfbid,				  tcomp->numrlvls - 1, rlvlno, band->orient);				band->absstepsize = jpc_calcabsstepsize(band->stepsize,				  cmpt->prec + band->analgain);				band->numbps = ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize) - 1;				band->roishift = (ccp->roishift + band->numbps >= JPC_PREC) ?				  (JPC_PREC - 1 - band->numbps) : ccp->roishift;				band->data = 0;				band->prcs = 0;				if (bnd->xstart == bnd->xend || bnd->ystart == bnd->yend) {					continue;				}				if (!(band->data = jas_seq2d_create(0, 0, 0, 0))) {					return -1;				}				jas_seq2d_bindsub(band->data, tcomp->data, bnd->locxstart,				  bnd->locystart, bnd->locxend, bnd->locyend);				jas_seq2d_setshift(band->data, bnd->xstart, bnd->ystart);				assert(rlvl->numprcs);				if (!(band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t)))) {					return -1;				}/************************************************/				cbgxstart = tlcbgxstart;				cbgystart = tlcbgystart;				for (prccnt = rlvl->numprcs, prc = band->prcs;				  prccnt > 0; --prccnt, ++prc) {					cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);					cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);					prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)));					prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)));					prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)));					prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)));					if (prc->xend > prc->xstart && prc->yend > prc->ystart) {						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					} else {						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}					cbgxstart += 1 << rlvl->cbgwidthexpn;					if (cbgxstart >= brcbgxend) {						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}				}/********************************************/			}		}	}	if (!(tile->pi = jpc_dec_pi_create(dec, tile))) {		return -1;	}	for (pchgno = 0; pchgno < jpc_pchglist_numpchgs(tile->cp->pchglist);	  ++pchgno) {		pchg = jpc_pchg_copy(jpc_pchglist_get(tile->cp->pchglist, pchgno));		assert(pchg);		jpc_pi_addpchg(tile->pi, pchg);	}	jpc_pi_init(tile->pi);	return 0;}
static int
jpc_dec_tileinit(jpc_dec_t *dec, jpc_dec_tile_t *tile)
jpc_dec_tileinit
jpc_dec_t *dec
jpc_dec_t
jpc_dec_t
*dec
*
dec
jpc_dec_tile_t *tile
jpc_dec_tile_t
jpc_dec_tile_t
*tile
*
tile
{	jpc_dec_tcomp_t *tcomp;	int compno;	int rlvlno;	jpc_dec_rlvl_t *rlvl;	jpc_dec_band_t *band;	jpc_dec_prc_t *prc;	int bndno;	jpc_tsfb_band_t *bnd;	int bandno;	jpc_dec_ccp_t *ccp;	int prccnt;	jpc_dec_cblk_t *cblk;	int cblkcnt;	uint_fast32_t tlprcxstart;	uint_fast32_t tlprcystart;	uint_fast32_t brprcxend;	uint_fast32_t brprcyend;	uint_fast32_t tlcbgxstart;	uint_fast32_t tlcbgystart;	uint_fast32_t brcbgxend;	uint_fast32_t brcbgyend;	uint_fast32_t cbgxstart;	uint_fast32_t cbgystart;	uint_fast32_t cbgxend;	uint_fast32_t cbgyend;	uint_fast32_t tlcblkxstart;	uint_fast32_t tlcblkystart;	uint_fast32_t brcblkxend;	uint_fast32_t brcblkyend;	uint_fast32_t cblkxstart;	uint_fast32_t cblkystart;	uint_fast32_t cblkxend;	uint_fast32_t cblkyend;	uint_fast32_t tmpxstart;	uint_fast32_t tmpystart;	uint_fast32_t tmpxend;	uint_fast32_t tmpyend;	jpc_dec_cp_t *cp;	jpc_tsfb_band_t bnds[JPC_MAXBANDS];	jpc_pchg_t *pchg;	int pchgno;	jpc_dec_cmpt_t *cmpt;	cp = tile->cp;	tile->realmode = 0;	if (cp->mctid == JPC_MCT_ICT) {		tile->realmode = 1;	}	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		ccp = &tile->cp->ccps[compno];		if (ccp->qmfbid == JPC_COX_INS) {			tile->realmode = 1;		}		tcomp->numrlvls = ccp->numrlvls;		if (!(tcomp->rlvls = jas_alloc2(tcomp->numrlvls,		  sizeof(jpc_dec_rlvl_t)))) {			return -1;		}		if (!(tcomp->data = jas_seq2d_create(JPC_CEILDIV(tile->xstart,		  cmpt->hstep), JPC_CEILDIV(tile->ystart, cmpt->vstep),		  JPC_CEILDIV(tile->xend, cmpt->hstep), JPC_CEILDIV(tile->yend,		  cmpt->vstep)))) {			return -1;		}		if (!(tcomp->tsfb = jpc_cod_gettsfb(ccp->qmfbid,		  tcomp->numrlvls - 1))) {			return -1;		}		{			jpc_tsfb_getbands(tcomp->tsfb, jas_seq2d_xstart(tcomp->data),			  jas_seq2d_ystart(tcomp->data), jas_seq2d_xend(tcomp->data),			  jas_seq2d_yend(tcomp->data), bnds);		}		for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;		  ++rlvlno, ++rlvl) {			rlvl->bands = 0;			rlvl->xstart = JPC_CEILDIVPOW2(tcomp->xstart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->ystart = JPC_CEILDIVPOW2(tcomp->ystart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->xend = JPC_CEILDIVPOW2(tcomp->xend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->yend = JPC_CEILDIVPOW2(tcomp->yend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->prcwidthexpn = ccp->prcwidthexpns[rlvlno];			rlvl->prcheightexpn = ccp->prcheightexpns[rlvlno];			tlprcxstart = JPC_FLOORDIVPOW2(rlvl->xstart,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			tlprcystart = JPC_FLOORDIVPOW2(rlvl->ystart,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			brprcxend = JPC_CEILDIVPOW2(rlvl->xend,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			brprcyend = JPC_CEILDIVPOW2(rlvl->yend,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			rlvl->numhprcs = (brprcxend - tlprcxstart) >>			  rlvl->prcwidthexpn;			rlvl->numvprcs = (brprcyend - tlprcystart) >>			  rlvl->prcheightexpn;			rlvl->numprcs = rlvl->numhprcs * rlvl->numvprcs;			if (rlvl->xstart >= rlvl->xend || rlvl->ystart >= rlvl->yend) {				rlvl->bands = 0;				rlvl->numprcs = 0;				rlvl->numhprcs = 0;				rlvl->numvprcs = 0;				continue;			}				if (!rlvlno) {				tlcbgxstart = tlprcxstart;				tlcbgystart = tlprcystart;				brcbgxend = brprcxend;				brcbgyend = brprcyend;				rlvl->cbgwidthexpn = rlvl->prcwidthexpn;				rlvl->cbgheightexpn = rlvl->prcheightexpn;			} else {				tlcbgxstart = JPC_CEILDIVPOW2(tlprcxstart, 1);				tlcbgystart = JPC_CEILDIVPOW2(tlprcystart, 1);				brcbgxend = JPC_CEILDIVPOW2(brprcxend, 1);				brcbgyend = JPC_CEILDIVPOW2(brprcyend, 1);				rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1;				rlvl->cbgheightexpn = rlvl->prcheightexpn - 1;			}			rlvl->cblkwidthexpn = JAS_MIN(ccp->cblkwidthexpn,			  rlvl->cbgwidthexpn);			rlvl->cblkheightexpn = JAS_MIN(ccp->cblkheightexpn,			  rlvl->cbgheightexpn);			rlvl->numbands = (!rlvlno) ? 1 : 3;			if (!(rlvl->bands = jas_alloc2(rlvl->numbands,			  sizeof(jpc_dec_band_t)))) {				return -1;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				bndno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) +				  bandno + 1);				bnd = &bnds[bndno];				band->orient = bnd->orient;				band->stepsize = ccp->stepsizes[bndno];				band->analgain = JPC_NOMINALGAIN(ccp->qmfbid,				  tcomp->numrlvls - 1, rlvlno, band->orient);				band->absstepsize = jpc_calcabsstepsize(band->stepsize,				  cmpt->prec + band->analgain);				band->numbps = ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize) - 1;				band->roishift = (ccp->roishift + band->numbps >= JPC_PREC) ?				  (JPC_PREC - 1 - band->numbps) : ccp->roishift;				band->data = 0;				band->prcs = 0;				if (bnd->xstart == bnd->xend || bnd->ystart == bnd->yend) {					continue;				}				if (!(band->data = jas_seq2d_create(0, 0, 0, 0))) {					return -1;				}				jas_seq2d_bindsub(band->data, tcomp->data, bnd->locxstart,				  bnd->locystart, bnd->locxend, bnd->locyend);				jas_seq2d_setshift(band->data, bnd->xstart, bnd->ystart);				assert(rlvl->numprcs);				if (!(band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t)))) {					return -1;				}/************************************************/				cbgxstart = tlcbgxstart;				cbgystart = tlcbgystart;				for (prccnt = rlvl->numprcs, prc = band->prcs;				  prccnt > 0; --prccnt, ++prc) {					cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);					cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);					prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)));					prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)));					prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)));					prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)));					if (prc->xend > prc->xstart && prc->yend > prc->ystart) {						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					} else {						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}					cbgxstart += 1 << rlvl->cbgwidthexpn;					if (cbgxstart >= brcbgxend) {						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}				}/********************************************/			}		}	}	if (!(tile->pi = jpc_dec_pi_create(dec, tile))) {		return -1;	}	for (pchgno = 0; pchgno < jpc_pchglist_numpchgs(tile->cp->pchglist);	  ++pchgno) {		pchg = jpc_pchg_copy(jpc_pchglist_get(tile->cp->pchglist, pchgno));		assert(pchg);		jpc_pi_addpchg(tile->pi, pchg);	}	jpc_pi_init(tile->pi);	return 0;}
jpc_dec_tcomp_t *tcomp;
jpc_dec_tcomp_t *tcomp;
jpc_dec_tcomp_t
jpc_dec_tcomp_t
*tcomp
*
tcomp
int compno;
int compno;
int
compno
compno
int rlvlno;
int rlvlno;
int
rlvlno
rlvlno
jpc_dec_rlvl_t *rlvl;
jpc_dec_rlvl_t *rlvl;
jpc_dec_rlvl_t
jpc_dec_rlvl_t
*rlvl
*
rlvl
jpc_dec_band_t *band;
jpc_dec_band_t *band;
jpc_dec_band_t
jpc_dec_band_t
*band
*
band
jpc_dec_prc_t *prc;
jpc_dec_prc_t *prc;
jpc_dec_prc_t
jpc_dec_prc_t
*prc
*
prc
int bndno;
int bndno;
int
bndno
bndno
jpc_tsfb_band_t *bnd;
jpc_tsfb_band_t *bnd;
jpc_tsfb_band_t
jpc_tsfb_band_t
*bnd
*
bnd
int bandno;
int bandno;
int
bandno
bandno
jpc_dec_ccp_t *ccp;
jpc_dec_ccp_t *ccp;
jpc_dec_ccp_t
jpc_dec_ccp_t
*ccp
*
ccp
int prccnt;
int prccnt;
int
prccnt
prccnt
jpc_dec_cblk_t *cblk;
jpc_dec_cblk_t *cblk;
jpc_dec_cblk_t
jpc_dec_cblk_t
*cblk
*
cblk
int cblkcnt;
int cblkcnt;
int
cblkcnt
cblkcnt
uint_fast32_t tlprcxstart;
uint_fast32_t tlprcxstart;
uint_fast32_t
uint_fast32_t
tlprcxstart
tlprcxstart
uint_fast32_t tlprcystart;
uint_fast32_t tlprcystart;
uint_fast32_t
uint_fast32_t
tlprcystart
tlprcystart
uint_fast32_t brprcxend;
uint_fast32_t brprcxend;
uint_fast32_t
uint_fast32_t
brprcxend
brprcxend
uint_fast32_t brprcyend;
uint_fast32_t brprcyend;
uint_fast32_t
uint_fast32_t
brprcyend
brprcyend
uint_fast32_t tlcbgxstart;
uint_fast32_t tlcbgxstart;
uint_fast32_t
uint_fast32_t
tlcbgxstart
tlcbgxstart
uint_fast32_t tlcbgystart;
uint_fast32_t tlcbgystart;
uint_fast32_t
uint_fast32_t
tlcbgystart
tlcbgystart
uint_fast32_t brcbgxend;
uint_fast32_t brcbgxend;
uint_fast32_t
uint_fast32_t
brcbgxend
brcbgxend
uint_fast32_t brcbgyend;
uint_fast32_t brcbgyend;
uint_fast32_t
uint_fast32_t
brcbgyend
brcbgyend
uint_fast32_t cbgxstart;
uint_fast32_t cbgxstart;
uint_fast32_t
uint_fast32_t
cbgxstart
cbgxstart
uint_fast32_t cbgystart;
uint_fast32_t cbgystart;
uint_fast32_t
uint_fast32_t
cbgystart
cbgystart
uint_fast32_t cbgxend;
uint_fast32_t cbgxend;
uint_fast32_t
uint_fast32_t
cbgxend
cbgxend
uint_fast32_t cbgyend;
uint_fast32_t cbgyend;
uint_fast32_t
uint_fast32_t
cbgyend
cbgyend
uint_fast32_t tlcblkxstart;
uint_fast32_t tlcblkxstart;
uint_fast32_t
uint_fast32_t
tlcblkxstart
tlcblkxstart
uint_fast32_t tlcblkystart;
uint_fast32_t tlcblkystart;
uint_fast32_t
uint_fast32_t
tlcblkystart
tlcblkystart
uint_fast32_t brcblkxend;
uint_fast32_t brcblkxend;
uint_fast32_t
uint_fast32_t
brcblkxend
brcblkxend
uint_fast32_t brcblkyend;
uint_fast32_t brcblkyend;
uint_fast32_t
uint_fast32_t
brcblkyend
brcblkyend
uint_fast32_t cblkxstart;
uint_fast32_t cblkxstart;
uint_fast32_t
uint_fast32_t
cblkxstart
cblkxstart
uint_fast32_t cblkystart;
uint_fast32_t cblkystart;
uint_fast32_t
uint_fast32_t
cblkystart
cblkystart
uint_fast32_t cblkxend;
uint_fast32_t cblkxend;
uint_fast32_t
uint_fast32_t
cblkxend
cblkxend
uint_fast32_t cblkyend;
uint_fast32_t cblkyend;
uint_fast32_t
uint_fast32_t
cblkyend
cblkyend
uint_fast32_t tmpxstart;
uint_fast32_t tmpxstart;
uint_fast32_t
uint_fast32_t
tmpxstart
tmpxstart
uint_fast32_t tmpystart;
uint_fast32_t tmpystart;
uint_fast32_t
uint_fast32_t
tmpystart
tmpystart
uint_fast32_t tmpxend;
uint_fast32_t tmpxend;
uint_fast32_t
uint_fast32_t
tmpxend
tmpxend
uint_fast32_t tmpyend;
uint_fast32_t tmpyend;
uint_fast32_t
uint_fast32_t
tmpyend
tmpyend
jpc_dec_cp_t *cp;
jpc_dec_cp_t *cp;
jpc_dec_cp_t
jpc_dec_cp_t
*cp
*
cp
jpc_tsfb_band_t bnds[JPC_MAXBANDS];
jpc_tsfb_band_t bnds[JPC_MAXBANDS];
jpc_tsfb_band_t
jpc_tsfb_band_t
bnds[JPC_MAXBANDS]
bnds
[JPC_MAXBANDS]
JPC_MAXBANDS
JPC_MAXBANDS
jpc_pchg_t *pchg;
jpc_pchg_t *pchg;
jpc_pchg_t
jpc_pchg_t
*pchg
*
pchg
int pchgno;
int pchgno;
int
pchgno
pchgno
jpc_dec_cmpt_t *cmpt;
jpc_dec_cmpt_t *cmpt;
jpc_dec_cmpt_t
jpc_dec_cmpt_t
*cmpt
*
cmpt
cp = tile->cp;
cp = tile->cp
cp
cp
tile->cp
tile
tile
cp
tile->realmode = 0;
tile->realmode = 0
tile->realmode
tile
tile
realmode
0
if (cp->mctid == JPC_MCT_ICT) {		tile->realmode = 1;	}
cp->mctid == JPC_MCT_ICT
cp->mctid
cp
cp
mctid
JPC_MCT_ICT
JPC_MCT_ICT
{		tile->realmode = 1;	}
tile->realmode = 1;
tile->realmode = 1
tile->realmode
tile
tile
realmode
1
for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		ccp = &tile->cp->ccps[compno];		if (ccp->qmfbid == JPC_COX_INS) {			tile->realmode = 1;		}		tcomp->numrlvls = ccp->numrlvls;		if (!(tcomp->rlvls = jas_alloc2(tcomp->numrlvls,		  sizeof(jpc_dec_rlvl_t)))) {			return -1;		}		if (!(tcomp->data = jas_seq2d_create(JPC_CEILDIV(tile->xstart,		  cmpt->hstep), JPC_CEILDIV(tile->ystart, cmpt->vstep),		  JPC_CEILDIV(tile->xend, cmpt->hstep), JPC_CEILDIV(tile->yend,		  cmpt->vstep)))) {			return -1;		}		if (!(tcomp->tsfb = jpc_cod_gettsfb(ccp->qmfbid,		  tcomp->numrlvls - 1))) {			return -1;		}		{			jpc_tsfb_getbands(tcomp->tsfb, jas_seq2d_xstart(tcomp->data),			  jas_seq2d_ystart(tcomp->data), jas_seq2d_xend(tcomp->data),			  jas_seq2d_yend(tcomp->data), bnds);		}		for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;		  ++rlvlno, ++rlvl) {			rlvl->bands = 0;			rlvl->xstart = JPC_CEILDIVPOW2(tcomp->xstart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->ystart = JPC_CEILDIVPOW2(tcomp->ystart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->xend = JPC_CEILDIVPOW2(tcomp->xend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->yend = JPC_CEILDIVPOW2(tcomp->yend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->prcwidthexpn = ccp->prcwidthexpns[rlvlno];			rlvl->prcheightexpn = ccp->prcheightexpns[rlvlno];			tlprcxstart = JPC_FLOORDIVPOW2(rlvl->xstart,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			tlprcystart = JPC_FLOORDIVPOW2(rlvl->ystart,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			brprcxend = JPC_CEILDIVPOW2(rlvl->xend,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			brprcyend = JPC_CEILDIVPOW2(rlvl->yend,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			rlvl->numhprcs = (brprcxend - tlprcxstart) >>			  rlvl->prcwidthexpn;			rlvl->numvprcs = (brprcyend - tlprcystart) >>			  rlvl->prcheightexpn;			rlvl->numprcs = rlvl->numhprcs * rlvl->numvprcs;			if (rlvl->xstart >= rlvl->xend || rlvl->ystart >= rlvl->yend) {				rlvl->bands = 0;				rlvl->numprcs = 0;				rlvl->numhprcs = 0;				rlvl->numvprcs = 0;				continue;			}				if (!rlvlno) {				tlcbgxstart = tlprcxstart;				tlcbgystart = tlprcystart;				brcbgxend = brprcxend;				brcbgyend = brprcyend;				rlvl->cbgwidthexpn = rlvl->prcwidthexpn;				rlvl->cbgheightexpn = rlvl->prcheightexpn;			} else {				tlcbgxstart = JPC_CEILDIVPOW2(tlprcxstart, 1);				tlcbgystart = JPC_CEILDIVPOW2(tlprcystart, 1);				brcbgxend = JPC_CEILDIVPOW2(brprcxend, 1);				brcbgyend = JPC_CEILDIVPOW2(brprcyend, 1);				rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1;				rlvl->cbgheightexpn = rlvl->prcheightexpn - 1;			}			rlvl->cblkwidthexpn = JAS_MIN(ccp->cblkwidthexpn,			  rlvl->cbgwidthexpn);			rlvl->cblkheightexpn = JAS_MIN(ccp->cblkheightexpn,			  rlvl->cbgheightexpn);			rlvl->numbands = (!rlvlno) ? 1 : 3;			if (!(rlvl->bands = jas_alloc2(rlvl->numbands,			  sizeof(jpc_dec_band_t)))) {				return -1;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				bndno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) +				  bandno + 1);				bnd = &bnds[bndno];				band->orient = bnd->orient;				band->stepsize = ccp->stepsizes[bndno];				band->analgain = JPC_NOMINALGAIN(ccp->qmfbid,				  tcomp->numrlvls - 1, rlvlno, band->orient);				band->absstepsize = jpc_calcabsstepsize(band->stepsize,				  cmpt->prec + band->analgain);				band->numbps = ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize) - 1;				band->roishift = (ccp->roishift + band->numbps >= JPC_PREC) ?				  (JPC_PREC - 1 - band->numbps) : ccp->roishift;				band->data = 0;				band->prcs = 0;				if (bnd->xstart == bnd->xend || bnd->ystart == bnd->yend) {					continue;				}				if (!(band->data = jas_seq2d_create(0, 0, 0, 0))) {					return -1;				}				jas_seq2d_bindsub(band->data, tcomp->data, bnd->locxstart,				  bnd->locystart, bnd->locxend, bnd->locyend);				jas_seq2d_setshift(band->data, bnd->xstart, bnd->ystart);				assert(rlvl->numprcs);				if (!(band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t)))) {					return -1;				}/************************************************/				cbgxstart = tlcbgxstart;				cbgystart = tlcbgystart;				for (prccnt = rlvl->numprcs, prc = band->prcs;				  prccnt > 0; --prccnt, ++prc) {					cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);					cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);					prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)));					prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)));					prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)));					prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)));					if (prc->xend > prc->xstart && prc->yend > prc->ystart) {						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					} else {						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}					cbgxstart += 1 << rlvl->cbgwidthexpn;					if (cbgxstart >= brcbgxend) {						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}				}/********************************************/			}		}	}
compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts;
compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts
compno = 0
compno
compno
0
tcomp = tile->tcomps
tcomp
tcomp
tile->tcomps
tile
tile
tcomps
cmpt = dec->cmpts
cmpt
cmpt
dec->cmpts
dec
dec
cmpts
compno <	  dec->numcomps
compno
compno
dec->numcomps
dec
dec
numcomps
++compno, ++tcomp, ++cmpt
++compno
compno
compno
++tcomp
tcomp
tcomp
++cmpt
cmpt
cmpt
{		ccp = &tile->cp->ccps[compno];		if (ccp->qmfbid == JPC_COX_INS) {			tile->realmode = 1;		}		tcomp->numrlvls = ccp->numrlvls;		if (!(tcomp->rlvls = jas_alloc2(tcomp->numrlvls,		  sizeof(jpc_dec_rlvl_t)))) {			return -1;		}		if (!(tcomp->data = jas_seq2d_create(JPC_CEILDIV(tile->xstart,		  cmpt->hstep), JPC_CEILDIV(tile->ystart, cmpt->vstep),		  JPC_CEILDIV(tile->xend, cmpt->hstep), JPC_CEILDIV(tile->yend,		  cmpt->vstep)))) {			return -1;		}		if (!(tcomp->tsfb = jpc_cod_gettsfb(ccp->qmfbid,		  tcomp->numrlvls - 1))) {			return -1;		}		{			jpc_tsfb_getbands(tcomp->tsfb, jas_seq2d_xstart(tcomp->data),			  jas_seq2d_ystart(tcomp->data), jas_seq2d_xend(tcomp->data),			  jas_seq2d_yend(tcomp->data), bnds);		}		for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;		  ++rlvlno, ++rlvl) {			rlvl->bands = 0;			rlvl->xstart = JPC_CEILDIVPOW2(tcomp->xstart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->ystart = JPC_CEILDIVPOW2(tcomp->ystart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->xend = JPC_CEILDIVPOW2(tcomp->xend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->yend = JPC_CEILDIVPOW2(tcomp->yend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->prcwidthexpn = ccp->prcwidthexpns[rlvlno];			rlvl->prcheightexpn = ccp->prcheightexpns[rlvlno];			tlprcxstart = JPC_FLOORDIVPOW2(rlvl->xstart,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			tlprcystart = JPC_FLOORDIVPOW2(rlvl->ystart,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			brprcxend = JPC_CEILDIVPOW2(rlvl->xend,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			brprcyend = JPC_CEILDIVPOW2(rlvl->yend,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			rlvl->numhprcs = (brprcxend - tlprcxstart) >>			  rlvl->prcwidthexpn;			rlvl->numvprcs = (brprcyend - tlprcystart) >>			  rlvl->prcheightexpn;			rlvl->numprcs = rlvl->numhprcs * rlvl->numvprcs;			if (rlvl->xstart >= rlvl->xend || rlvl->ystart >= rlvl->yend) {				rlvl->bands = 0;				rlvl->numprcs = 0;				rlvl->numhprcs = 0;				rlvl->numvprcs = 0;				continue;			}				if (!rlvlno) {				tlcbgxstart = tlprcxstart;				tlcbgystart = tlprcystart;				brcbgxend = brprcxend;				brcbgyend = brprcyend;				rlvl->cbgwidthexpn = rlvl->prcwidthexpn;				rlvl->cbgheightexpn = rlvl->prcheightexpn;			} else {				tlcbgxstart = JPC_CEILDIVPOW2(tlprcxstart, 1);				tlcbgystart = JPC_CEILDIVPOW2(tlprcystart, 1);				brcbgxend = JPC_CEILDIVPOW2(brprcxend, 1);				brcbgyend = JPC_CEILDIVPOW2(brprcyend, 1);				rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1;				rlvl->cbgheightexpn = rlvl->prcheightexpn - 1;			}			rlvl->cblkwidthexpn = JAS_MIN(ccp->cblkwidthexpn,			  rlvl->cbgwidthexpn);			rlvl->cblkheightexpn = JAS_MIN(ccp->cblkheightexpn,			  rlvl->cbgheightexpn);			rlvl->numbands = (!rlvlno) ? 1 : 3;			if (!(rlvl->bands = jas_alloc2(rlvl->numbands,			  sizeof(jpc_dec_band_t)))) {				return -1;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				bndno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) +				  bandno + 1);				bnd = &bnds[bndno];				band->orient = bnd->orient;				band->stepsize = ccp->stepsizes[bndno];				band->analgain = JPC_NOMINALGAIN(ccp->qmfbid,				  tcomp->numrlvls - 1, rlvlno, band->orient);				band->absstepsize = jpc_calcabsstepsize(band->stepsize,				  cmpt->prec + band->analgain);				band->numbps = ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize) - 1;				band->roishift = (ccp->roishift + band->numbps >= JPC_PREC) ?				  (JPC_PREC - 1 - band->numbps) : ccp->roishift;				band->data = 0;				band->prcs = 0;				if (bnd->xstart == bnd->xend || bnd->ystart == bnd->yend) {					continue;				}				if (!(band->data = jas_seq2d_create(0, 0, 0, 0))) {					return -1;				}				jas_seq2d_bindsub(band->data, tcomp->data, bnd->locxstart,				  bnd->locystart, bnd->locxend, bnd->locyend);				jas_seq2d_setshift(band->data, bnd->xstart, bnd->ystart);				assert(rlvl->numprcs);				if (!(band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t)))) {					return -1;				}/************************************************/				cbgxstart = tlcbgxstart;				cbgystart = tlcbgystart;				for (prccnt = rlvl->numprcs, prc = band->prcs;				  prccnt > 0; --prccnt, ++prc) {					cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);					cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);					prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)));					prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)));					prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)));					prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)));					if (prc->xend > prc->xstart && prc->yend > prc->ystart) {						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					} else {						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}					cbgxstart += 1 << rlvl->cbgwidthexpn;					if (cbgxstart >= brcbgxend) {						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}				}/********************************************/			}		}	}
ccp = &tile->cp->ccps[compno];
ccp = &tile->cp->ccps[compno]
ccp
ccp
&tile->cp->ccps[compno]
tile->cp->ccps[compno]
tile->cp->ccps
tile->cp
tile
tile
cp
ccps
compno
compno
if (ccp->qmfbid == JPC_COX_INS) {			tile->realmode = 1;		}
ccp->qmfbid == JPC_COX_INS
ccp->qmfbid
ccp
ccp
qmfbid
JPC_COX_INS
JPC_COX_INS
{			tile->realmode = 1;		}
tile->realmode = 1;
tile->realmode = 1
tile->realmode
tile
tile
realmode
1
tcomp->numrlvls = ccp->numrlvls;
tcomp->numrlvls = ccp->numrlvls
tcomp->numrlvls
tcomp
tcomp
numrlvls
ccp->numrlvls
ccp
ccp
numrlvls
if (!(tcomp->rlvls = jas_alloc2(tcomp->numrlvls,		  sizeof(jpc_dec_rlvl_t)))) {			return -1;		}
!(tcomp->rlvls = jas_alloc2(tcomp->numrlvls,		  sizeof(jpc_dec_rlvl_t)))
(tcomp->rlvls = jas_alloc2(tcomp->numrlvls,		  sizeof(jpc_dec_rlvl_t)))
tcomp->rlvls = jas_alloc2(tcomp->numrlvls,		  sizeof(jpc_dec_rlvl_t))
tcomp->rlvls
tcomp
tcomp
rlvls
jas_alloc2(tcomp->numrlvls,		  sizeof(jpc_dec_rlvl_t))
jas_alloc2
jas_alloc2
tcomp->numrlvls
tcomp
tcomp
numrlvls
sizeof(jpc_dec_rlvl_t)
jpc_dec_rlvl_t
jpc_dec_rlvl_t
jpc_dec_rlvl_t

{			return -1;		}
return -1;
-1
1
if (!(tcomp->data = jas_seq2d_create(JPC_CEILDIV(tile->xstart,		  cmpt->hstep), JPC_CEILDIV(tile->ystart, cmpt->vstep),		  JPC_CEILDIV(tile->xend, cmpt->hstep), JPC_CEILDIV(tile->yend,		  cmpt->vstep)))) {			return -1;		}
!(tcomp->data = jas_seq2d_create(JPC_CEILDIV(tile->xstart,		  cmpt->hstep), JPC_CEILDIV(tile->ystart, cmpt->vstep),		  JPC_CEILDIV(tile->xend, cmpt->hstep), JPC_CEILDIV(tile->yend,		  cmpt->vstep)))
(tcomp->data = jas_seq2d_create(JPC_CEILDIV(tile->xstart,		  cmpt->hstep), JPC_CEILDIV(tile->ystart, cmpt->vstep),		  JPC_CEILDIV(tile->xend, cmpt->hstep), JPC_CEILDIV(tile->yend,		  cmpt->vstep)))
tcomp->data = jas_seq2d_create(JPC_CEILDIV(tile->xstart,		  cmpt->hstep), JPC_CEILDIV(tile->ystart, cmpt->vstep),		  JPC_CEILDIV(tile->xend, cmpt->hstep), JPC_CEILDIV(tile->yend,		  cmpt->vstep))
tcomp->data
tcomp
tcomp
data
jas_seq2d_create(JPC_CEILDIV(tile->xstart,		  cmpt->hstep), JPC_CEILDIV(tile->ystart, cmpt->vstep),		  JPC_CEILDIV(tile->xend, cmpt->hstep), JPC_CEILDIV(tile->yend,		  cmpt->vstep))
jas_seq2d_create
jas_seq2d_create
JPC_CEILDIV(tile->xstart,		  cmpt->hstep)
JPC_CEILDIV
JPC_CEILDIV
tile->xstart
tile
tile
xstart
cmpt->hstep
cmpt
cmpt
hstep
JPC_CEILDIV(tile->ystart, cmpt->vstep)
JPC_CEILDIV
JPC_CEILDIV
tile->ystart
tile
tile
ystart
cmpt->vstep
cmpt
cmpt
vstep
JPC_CEILDIV(tile->xend, cmpt->hstep)
JPC_CEILDIV
JPC_CEILDIV
tile->xend
tile
tile
xend
cmpt->hstep
cmpt
cmpt
hstep
JPC_CEILDIV(tile->yend,		  cmpt->vstep)
JPC_CEILDIV
JPC_CEILDIV
tile->yend
tile
tile
yend
cmpt->vstep
cmpt
cmpt
vstep
{			return -1;		}
return -1;
-1
1
if (!(tcomp->tsfb = jpc_cod_gettsfb(ccp->qmfbid,		  tcomp->numrlvls - 1))) {			return -1;		}
!(tcomp->tsfb = jpc_cod_gettsfb(ccp->qmfbid,		  tcomp->numrlvls - 1))
(tcomp->tsfb = jpc_cod_gettsfb(ccp->qmfbid,		  tcomp->numrlvls - 1))
tcomp->tsfb = jpc_cod_gettsfb(ccp->qmfbid,		  tcomp->numrlvls - 1)
tcomp->tsfb
tcomp
tcomp
tsfb
jpc_cod_gettsfb(ccp->qmfbid,		  tcomp->numrlvls - 1)
jpc_cod_gettsfb
jpc_cod_gettsfb
ccp->qmfbid
ccp
ccp
qmfbid
tcomp->numrlvls - 1
tcomp->numrlvls
tcomp
tcomp
numrlvls
1
{			return -1;		}
return -1;
-1
1
{			jpc_tsfb_getbands(tcomp->tsfb, jas_seq2d_xstart(tcomp->data),			  jas_seq2d_ystart(tcomp->data), jas_seq2d_xend(tcomp->data),			  jas_seq2d_yend(tcomp->data), bnds);		}
jpc_tsfb_getbands(tcomp->tsfb, jas_seq2d_xstart(tcomp->data),			  jas_seq2d_ystart(tcomp->data), jas_seq2d_xend(tcomp->data),			  jas_seq2d_yend(tcomp->data), bnds);
jpc_tsfb_getbands(tcomp->tsfb, jas_seq2d_xstart(tcomp->data),			  jas_seq2d_ystart(tcomp->data), jas_seq2d_xend(tcomp->data),			  jas_seq2d_yend(tcomp->data), bnds)
jpc_tsfb_getbands
jpc_tsfb_getbands
tcomp->tsfb
tcomp
tcomp
tsfb
jas_seq2d_xstart(tcomp->data)
jas_seq2d_xstart
jas_seq2d_xstart
tcomp->data
tcomp
tcomp
data
jas_seq2d_ystart(tcomp->data)
jas_seq2d_ystart
jas_seq2d_ystart
tcomp->data
tcomp
tcomp
data
jas_seq2d_xend(tcomp->data)
jas_seq2d_xend
jas_seq2d_xend
tcomp->data
tcomp
tcomp
data
jas_seq2d_yend(tcomp->data)
jas_seq2d_yend
jas_seq2d_yend
tcomp->data
tcomp
tcomp
data
bnds
bnds
for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;		  ++rlvlno, ++rlvl) {			rlvl->bands = 0;			rlvl->xstart = JPC_CEILDIVPOW2(tcomp->xstart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->ystart = JPC_CEILDIVPOW2(tcomp->ystart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->xend = JPC_CEILDIVPOW2(tcomp->xend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->yend = JPC_CEILDIVPOW2(tcomp->yend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->prcwidthexpn = ccp->prcwidthexpns[rlvlno];			rlvl->prcheightexpn = ccp->prcheightexpns[rlvlno];			tlprcxstart = JPC_FLOORDIVPOW2(rlvl->xstart,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			tlprcystart = JPC_FLOORDIVPOW2(rlvl->ystart,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			brprcxend = JPC_CEILDIVPOW2(rlvl->xend,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			brprcyend = JPC_CEILDIVPOW2(rlvl->yend,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			rlvl->numhprcs = (brprcxend - tlprcxstart) >>			  rlvl->prcwidthexpn;			rlvl->numvprcs = (brprcyend - tlprcystart) >>			  rlvl->prcheightexpn;			rlvl->numprcs = rlvl->numhprcs * rlvl->numvprcs;			if (rlvl->xstart >= rlvl->xend || rlvl->ystart >= rlvl->yend) {				rlvl->bands = 0;				rlvl->numprcs = 0;				rlvl->numhprcs = 0;				rlvl->numvprcs = 0;				continue;			}				if (!rlvlno) {				tlcbgxstart = tlprcxstart;				tlcbgystart = tlprcystart;				brcbgxend = brprcxend;				brcbgyend = brprcyend;				rlvl->cbgwidthexpn = rlvl->prcwidthexpn;				rlvl->cbgheightexpn = rlvl->prcheightexpn;			} else {				tlcbgxstart = JPC_CEILDIVPOW2(tlprcxstart, 1);				tlcbgystart = JPC_CEILDIVPOW2(tlprcystart, 1);				brcbgxend = JPC_CEILDIVPOW2(brprcxend, 1);				brcbgyend = JPC_CEILDIVPOW2(brprcyend, 1);				rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1;				rlvl->cbgheightexpn = rlvl->prcheightexpn - 1;			}			rlvl->cblkwidthexpn = JAS_MIN(ccp->cblkwidthexpn,			  rlvl->cbgwidthexpn);			rlvl->cblkheightexpn = JAS_MIN(ccp->cblkheightexpn,			  rlvl->cbgheightexpn);			rlvl->numbands = (!rlvlno) ? 1 : 3;			if (!(rlvl->bands = jas_alloc2(rlvl->numbands,			  sizeof(jpc_dec_band_t)))) {				return -1;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				bndno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) +				  bandno + 1);				bnd = &bnds[bndno];				band->orient = bnd->orient;				band->stepsize = ccp->stepsizes[bndno];				band->analgain = JPC_NOMINALGAIN(ccp->qmfbid,				  tcomp->numrlvls - 1, rlvlno, band->orient);				band->absstepsize = jpc_calcabsstepsize(band->stepsize,				  cmpt->prec + band->analgain);				band->numbps = ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize) - 1;				band->roishift = (ccp->roishift + band->numbps >= JPC_PREC) ?				  (JPC_PREC - 1 - band->numbps) : ccp->roishift;				band->data = 0;				band->prcs = 0;				if (bnd->xstart == bnd->xend || bnd->ystart == bnd->yend) {					continue;				}				if (!(band->data = jas_seq2d_create(0, 0, 0, 0))) {					return -1;				}				jas_seq2d_bindsub(band->data, tcomp->data, bnd->locxstart,				  bnd->locystart, bnd->locxend, bnd->locyend);				jas_seq2d_setshift(band->data, bnd->xstart, bnd->ystart);				assert(rlvl->numprcs);				if (!(band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t)))) {					return -1;				}/************************************************/				cbgxstart = tlcbgxstart;				cbgystart = tlcbgystart;				for (prccnt = rlvl->numprcs, prc = band->prcs;				  prccnt > 0; --prccnt, ++prc) {					cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);					cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);					prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)));					prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)));					prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)));					prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)));					if (prc->xend > prc->xstart && prc->yend > prc->ystart) {						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					} else {						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}					cbgxstart += 1 << rlvl->cbgwidthexpn;					if (cbgxstart >= brcbgxend) {						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}				}/********************************************/			}		}
rlvlno = 0, rlvl = tcomp->rlvls;
rlvlno = 0, rlvl = tcomp->rlvls
rlvlno = 0
rlvlno
rlvlno
0
rlvl = tcomp->rlvls
rlvl
rlvl
tcomp->rlvls
tcomp
tcomp
rlvls
rlvlno < tcomp->numrlvls
rlvlno
rlvlno
tcomp->numrlvls
tcomp
tcomp
numrlvls
++rlvlno, ++rlvl
++rlvlno
rlvlno
rlvlno
++rlvl
rlvl
rlvl
{			rlvl->bands = 0;			rlvl->xstart = JPC_CEILDIVPOW2(tcomp->xstart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->ystart = JPC_CEILDIVPOW2(tcomp->ystart,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->xend = JPC_CEILDIVPOW2(tcomp->xend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->yend = JPC_CEILDIVPOW2(tcomp->yend,			  tcomp->numrlvls - 1 - rlvlno);			rlvl->prcwidthexpn = ccp->prcwidthexpns[rlvlno];			rlvl->prcheightexpn = ccp->prcheightexpns[rlvlno];			tlprcxstart = JPC_FLOORDIVPOW2(rlvl->xstart,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			tlprcystart = JPC_FLOORDIVPOW2(rlvl->ystart,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			brprcxend = JPC_CEILDIVPOW2(rlvl->xend,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;			brprcyend = JPC_CEILDIVPOW2(rlvl->yend,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;			rlvl->numhprcs = (brprcxend - tlprcxstart) >>			  rlvl->prcwidthexpn;			rlvl->numvprcs = (brprcyend - tlprcystart) >>			  rlvl->prcheightexpn;			rlvl->numprcs = rlvl->numhprcs * rlvl->numvprcs;			if (rlvl->xstart >= rlvl->xend || rlvl->ystart >= rlvl->yend) {				rlvl->bands = 0;				rlvl->numprcs = 0;				rlvl->numhprcs = 0;				rlvl->numvprcs = 0;				continue;			}				if (!rlvlno) {				tlcbgxstart = tlprcxstart;				tlcbgystart = tlprcystart;				brcbgxend = brprcxend;				brcbgyend = brprcyend;				rlvl->cbgwidthexpn = rlvl->prcwidthexpn;				rlvl->cbgheightexpn = rlvl->prcheightexpn;			} else {				tlcbgxstart = JPC_CEILDIVPOW2(tlprcxstart, 1);				tlcbgystart = JPC_CEILDIVPOW2(tlprcystart, 1);				brcbgxend = JPC_CEILDIVPOW2(brprcxend, 1);				brcbgyend = JPC_CEILDIVPOW2(brprcyend, 1);				rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1;				rlvl->cbgheightexpn = rlvl->prcheightexpn - 1;			}			rlvl->cblkwidthexpn = JAS_MIN(ccp->cblkwidthexpn,			  rlvl->cbgwidthexpn);			rlvl->cblkheightexpn = JAS_MIN(ccp->cblkheightexpn,			  rlvl->cbgheightexpn);			rlvl->numbands = (!rlvlno) ? 1 : 3;			if (!(rlvl->bands = jas_alloc2(rlvl->numbands,			  sizeof(jpc_dec_band_t)))) {				return -1;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				bndno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) +				  bandno + 1);				bnd = &bnds[bndno];				band->orient = bnd->orient;				band->stepsize = ccp->stepsizes[bndno];				band->analgain = JPC_NOMINALGAIN(ccp->qmfbid,				  tcomp->numrlvls - 1, rlvlno, band->orient);				band->absstepsize = jpc_calcabsstepsize(band->stepsize,				  cmpt->prec + band->analgain);				band->numbps = ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize) - 1;				band->roishift = (ccp->roishift + band->numbps >= JPC_PREC) ?				  (JPC_PREC - 1 - band->numbps) : ccp->roishift;				band->data = 0;				band->prcs = 0;				if (bnd->xstart == bnd->xend || bnd->ystart == bnd->yend) {					continue;				}				if (!(band->data = jas_seq2d_create(0, 0, 0, 0))) {					return -1;				}				jas_seq2d_bindsub(band->data, tcomp->data, bnd->locxstart,				  bnd->locystart, bnd->locxend, bnd->locyend);				jas_seq2d_setshift(band->data, bnd->xstart, bnd->ystart);				assert(rlvl->numprcs);				if (!(band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t)))) {					return -1;				}/************************************************/				cbgxstart = tlcbgxstart;				cbgystart = tlcbgystart;				for (prccnt = rlvl->numprcs, prc = band->prcs;				  prccnt > 0; --prccnt, ++prc) {					cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);					cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);					prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)));					prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)));					prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)));					prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)));					if (prc->xend > prc->xstart && prc->yend > prc->ystart) {						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					} else {						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}					cbgxstart += 1 << rlvl->cbgwidthexpn;					if (cbgxstart >= brcbgxend) {						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}				}/********************************************/			}		}
rlvl->bands = 0;
rlvl->bands = 0
rlvl->bands
rlvl
rlvl
bands
0
rlvl->xstart = JPC_CEILDIVPOW2(tcomp->xstart,			  tcomp->numrlvls - 1 - rlvlno);
rlvl->xstart = JPC_CEILDIVPOW2(tcomp->xstart,			  tcomp->numrlvls - 1 - rlvlno)
rlvl->xstart
rlvl
rlvl
xstart
JPC_CEILDIVPOW2(tcomp->xstart,			  tcomp->numrlvls - 1 - rlvlno)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
tcomp->xstart
tcomp
tcomp
xstart
tcomp->numrlvls - 1 - rlvlno
tcomp->numrlvls - 1
tcomp->numrlvls
tcomp
tcomp
numrlvls
1
rlvlno
rlvlno
rlvl->ystart = JPC_CEILDIVPOW2(tcomp->ystart,			  tcomp->numrlvls - 1 - rlvlno);
rlvl->ystart = JPC_CEILDIVPOW2(tcomp->ystart,			  tcomp->numrlvls - 1 - rlvlno)
rlvl->ystart
rlvl
rlvl
ystart
JPC_CEILDIVPOW2(tcomp->ystart,			  tcomp->numrlvls - 1 - rlvlno)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
tcomp->ystart
tcomp
tcomp
ystart
tcomp->numrlvls - 1 - rlvlno
tcomp->numrlvls - 1
tcomp->numrlvls
tcomp
tcomp
numrlvls
1
rlvlno
rlvlno
rlvl->xend = JPC_CEILDIVPOW2(tcomp->xend,			  tcomp->numrlvls - 1 - rlvlno);
rlvl->xend = JPC_CEILDIVPOW2(tcomp->xend,			  tcomp->numrlvls - 1 - rlvlno)
rlvl->xend
rlvl
rlvl
xend
JPC_CEILDIVPOW2(tcomp->xend,			  tcomp->numrlvls - 1 - rlvlno)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
tcomp->xend
tcomp
tcomp
xend
tcomp->numrlvls - 1 - rlvlno
tcomp->numrlvls - 1
tcomp->numrlvls
tcomp
tcomp
numrlvls
1
rlvlno
rlvlno
rlvl->yend = JPC_CEILDIVPOW2(tcomp->yend,			  tcomp->numrlvls - 1 - rlvlno);
rlvl->yend = JPC_CEILDIVPOW2(tcomp->yend,			  tcomp->numrlvls - 1 - rlvlno)
rlvl->yend
rlvl
rlvl
yend
JPC_CEILDIVPOW2(tcomp->yend,			  tcomp->numrlvls - 1 - rlvlno)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
tcomp->yend
tcomp
tcomp
yend
tcomp->numrlvls - 1 - rlvlno
tcomp->numrlvls - 1
tcomp->numrlvls
tcomp
tcomp
numrlvls
1
rlvlno
rlvlno
rlvl->prcwidthexpn = ccp->prcwidthexpns[rlvlno];
rlvl->prcwidthexpn = ccp->prcwidthexpns[rlvlno]
rlvl->prcwidthexpn
rlvl
rlvl
prcwidthexpn
ccp->prcwidthexpns[rlvlno]
ccp->prcwidthexpns
ccp
ccp
prcwidthexpns
rlvlno
rlvlno
rlvl->prcheightexpn = ccp->prcheightexpns[rlvlno];
rlvl->prcheightexpn = ccp->prcheightexpns[rlvlno]
rlvl->prcheightexpn
rlvl
rlvl
prcheightexpn
ccp->prcheightexpns[rlvlno]
ccp->prcheightexpns
ccp
ccp
prcheightexpns
rlvlno
rlvlno
tlprcxstart = JPC_FLOORDIVPOW2(rlvl->xstart,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;
tlprcxstart = JPC_FLOORDIVPOW2(rlvl->xstart,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn
tlprcxstart
tlprcxstart
JPC_FLOORDIVPOW2(rlvl->xstart,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn
JPC_FLOORDIVPOW2(rlvl->xstart,			  rlvl->prcwidthexpn)
JPC_FLOORDIVPOW2
JPC_FLOORDIVPOW2
rlvl->xstart
rlvl
rlvl
xstart
rlvl->prcwidthexpn
rlvl
rlvl
prcwidthexpn
rlvl->prcwidthexpn
rlvl
rlvl
prcwidthexpn
tlprcystart = JPC_FLOORDIVPOW2(rlvl->ystart,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;
tlprcystart = JPC_FLOORDIVPOW2(rlvl->ystart,			  rlvl->prcheightexpn) << rlvl->prcheightexpn
tlprcystart
tlprcystart
JPC_FLOORDIVPOW2(rlvl->ystart,			  rlvl->prcheightexpn) << rlvl->prcheightexpn
JPC_FLOORDIVPOW2(rlvl->ystart,			  rlvl->prcheightexpn)
JPC_FLOORDIVPOW2
JPC_FLOORDIVPOW2
rlvl->ystart
rlvl
rlvl
ystart
rlvl->prcheightexpn
rlvl
rlvl
prcheightexpn
rlvl->prcheightexpn
rlvl
rlvl
prcheightexpn
brprcxend = JPC_CEILDIVPOW2(rlvl->xend,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn;
brprcxend = JPC_CEILDIVPOW2(rlvl->xend,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn
brprcxend
brprcxend
JPC_CEILDIVPOW2(rlvl->xend,			  rlvl->prcwidthexpn) << rlvl->prcwidthexpn
JPC_CEILDIVPOW2(rlvl->xend,			  rlvl->prcwidthexpn)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
rlvl->xend
rlvl
rlvl
xend
rlvl->prcwidthexpn
rlvl
rlvl
prcwidthexpn
rlvl->prcwidthexpn
rlvl
rlvl
prcwidthexpn
brprcyend = JPC_CEILDIVPOW2(rlvl->yend,			  rlvl->prcheightexpn) << rlvl->prcheightexpn;
brprcyend = JPC_CEILDIVPOW2(rlvl->yend,			  rlvl->prcheightexpn) << rlvl->prcheightexpn
brprcyend
brprcyend
JPC_CEILDIVPOW2(rlvl->yend,			  rlvl->prcheightexpn) << rlvl->prcheightexpn
JPC_CEILDIVPOW2(rlvl->yend,			  rlvl->prcheightexpn)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
rlvl->yend
rlvl
rlvl
yend
rlvl->prcheightexpn
rlvl
rlvl
prcheightexpn
rlvl->prcheightexpn
rlvl
rlvl
prcheightexpn
rlvl->numhprcs = (brprcxend - tlprcxstart) >>			  rlvl->prcwidthexpn;
rlvl->numhprcs = (brprcxend - tlprcxstart) >>			  rlvl->prcwidthexpn
rlvl->numhprcs
rlvl
rlvl
numhprcs
(brprcxend - tlprcxstart) >>			  rlvl->prcwidthexpn
(brprcxend - tlprcxstart)
brprcxend - tlprcxstart
brprcxend
brprcxend
tlprcxstart
tlprcxstart
rlvl->prcwidthexpn
rlvl
rlvl
prcwidthexpn
rlvl->numvprcs = (brprcyend - tlprcystart) >>			  rlvl->prcheightexpn;
rlvl->numvprcs = (brprcyend - tlprcystart) >>			  rlvl->prcheightexpn
rlvl->numvprcs
rlvl
rlvl
numvprcs
(brprcyend - tlprcystart) >>			  rlvl->prcheightexpn
(brprcyend - tlprcystart)
brprcyend - tlprcystart
brprcyend
brprcyend
tlprcystart
tlprcystart
rlvl->prcheightexpn
rlvl
rlvl
prcheightexpn
rlvl->numprcs = rlvl->numhprcs * rlvl->numvprcs;
rlvl->numprcs = rlvl->numhprcs * rlvl->numvprcs
rlvl->numprcs
rlvl
rlvl
numprcs
rlvl->numhprcs * rlvl->numvprcs
rlvl->numhprcs
rlvl
rlvl
numhprcs
rlvl->numvprcs
rlvl
rlvl
numvprcs
if (rlvl->xstart >= rlvl->xend || rlvl->ystart >= rlvl->yend) {				rlvl->bands = 0;				rlvl->numprcs = 0;				rlvl->numhprcs = 0;				rlvl->numvprcs = 0;				continue;			}
rlvl->xstart >= rlvl->xend || rlvl->ystart >= rlvl->yend
rlvl->xstart >= rlvl->xend
rlvl->xstart
rlvl
rlvl
xstart
rlvl->xend
rlvl
rlvl
xend
rlvl->ystart >= rlvl->yend
rlvl->ystart
rlvl
rlvl
ystart
rlvl->yend
rlvl
rlvl
yend
{				rlvl->bands = 0;				rlvl->numprcs = 0;				rlvl->numhprcs = 0;				rlvl->numvprcs = 0;				continue;			}
rlvl->bands = 0;
rlvl->bands = 0
rlvl->bands
rlvl
rlvl
bands
0
rlvl->numprcs = 0;
rlvl->numprcs = 0
rlvl->numprcs
rlvl
rlvl
numprcs
0
rlvl->numhprcs = 0;
rlvl->numhprcs = 0
rlvl->numhprcs
rlvl
rlvl
numhprcs
0
rlvl->numvprcs = 0;
rlvl->numvprcs = 0
rlvl->numvprcs
rlvl
rlvl
numvprcs
0
continue;
if (!rlvlno) {				tlcbgxstart = tlprcxstart;				tlcbgystart = tlprcystart;				brcbgxend = brprcxend;				brcbgyend = brprcyend;				rlvl->cbgwidthexpn = rlvl->prcwidthexpn;				rlvl->cbgheightexpn = rlvl->prcheightexpn;			} else {				tlcbgxstart = JPC_CEILDIVPOW2(tlprcxstart, 1);				tlcbgystart = JPC_CEILDIVPOW2(tlprcystart, 1);				brcbgxend = JPC_CEILDIVPOW2(brprcxend, 1);				brcbgyend = JPC_CEILDIVPOW2(brprcyend, 1);				rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1;				rlvl->cbgheightexpn = rlvl->prcheightexpn - 1;			}
!rlvlno
rlvlno
rlvlno
{				tlcbgxstart = tlprcxstart;				tlcbgystart = tlprcystart;				brcbgxend = brprcxend;				brcbgyend = brprcyend;				rlvl->cbgwidthexpn = rlvl->prcwidthexpn;				rlvl->cbgheightexpn = rlvl->prcheightexpn;			}
tlcbgxstart = tlprcxstart;
tlcbgxstart = tlprcxstart
tlcbgxstart
tlcbgxstart
tlprcxstart
tlprcxstart
tlcbgystart = tlprcystart;
tlcbgystart = tlprcystart
tlcbgystart
tlcbgystart
tlprcystart
tlprcystart
brcbgxend = brprcxend;
brcbgxend = brprcxend
brcbgxend
brcbgxend
brprcxend
brprcxend
brcbgyend = brprcyend;
brcbgyend = brprcyend
brcbgyend
brcbgyend
brprcyend
brprcyend
rlvl->cbgwidthexpn = rlvl->prcwidthexpn;
rlvl->cbgwidthexpn = rlvl->prcwidthexpn
rlvl->cbgwidthexpn
rlvl
rlvl
cbgwidthexpn
rlvl->prcwidthexpn
rlvl
rlvl
prcwidthexpn
rlvl->cbgheightexpn = rlvl->prcheightexpn;
rlvl->cbgheightexpn = rlvl->prcheightexpn
rlvl->cbgheightexpn
rlvl
rlvl
cbgheightexpn
rlvl->prcheightexpn
rlvl
rlvl
prcheightexpn
{				tlcbgxstart = JPC_CEILDIVPOW2(tlprcxstart, 1);				tlcbgystart = JPC_CEILDIVPOW2(tlprcystart, 1);				brcbgxend = JPC_CEILDIVPOW2(brprcxend, 1);				brcbgyend = JPC_CEILDIVPOW2(brprcyend, 1);				rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1;				rlvl->cbgheightexpn = rlvl->prcheightexpn - 1;			}
tlcbgxstart = JPC_CEILDIVPOW2(tlprcxstart, 1);
tlcbgxstart = JPC_CEILDIVPOW2(tlprcxstart, 1)
tlcbgxstart
tlcbgxstart
JPC_CEILDIVPOW2(tlprcxstart, 1)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
tlprcxstart
tlprcxstart
1
tlcbgystart = JPC_CEILDIVPOW2(tlprcystart, 1);
tlcbgystart = JPC_CEILDIVPOW2(tlprcystart, 1)
tlcbgystart
tlcbgystart
JPC_CEILDIVPOW2(tlprcystart, 1)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
tlprcystart
tlprcystart
1
brcbgxend = JPC_CEILDIVPOW2(brprcxend, 1);
brcbgxend = JPC_CEILDIVPOW2(brprcxend, 1)
brcbgxend
brcbgxend
JPC_CEILDIVPOW2(brprcxend, 1)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
brprcxend
brprcxend
1
brcbgyend = JPC_CEILDIVPOW2(brprcyend, 1);
brcbgyend = JPC_CEILDIVPOW2(brprcyend, 1)
brcbgyend
brcbgyend
JPC_CEILDIVPOW2(brprcyend, 1)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
brprcyend
brprcyend
1
rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1;
rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1
rlvl->cbgwidthexpn
rlvl
rlvl
cbgwidthexpn
rlvl->prcwidthexpn - 1
rlvl->prcwidthexpn
rlvl
rlvl
prcwidthexpn
1
rlvl->cbgheightexpn = rlvl->prcheightexpn - 1;
rlvl->cbgheightexpn = rlvl->prcheightexpn - 1
rlvl->cbgheightexpn
rlvl
rlvl
cbgheightexpn
rlvl->prcheightexpn - 1
rlvl->prcheightexpn
rlvl
rlvl
prcheightexpn
1
rlvl->cblkwidthexpn = JAS_MIN(ccp->cblkwidthexpn,			  rlvl->cbgwidthexpn);
rlvl->cblkwidthexpn = JAS_MIN(ccp->cblkwidthexpn,			  rlvl->cbgwidthexpn)
rlvl->cblkwidthexpn
rlvl
rlvl
cblkwidthexpn
JAS_MIN(ccp->cblkwidthexpn,			  rlvl->cbgwidthexpn)
JAS_MIN
JAS_MIN
ccp->cblkwidthexpn
ccp
ccp
cblkwidthexpn
rlvl->cbgwidthexpn
rlvl
rlvl
cbgwidthexpn
rlvl->cblkheightexpn = JAS_MIN(ccp->cblkheightexpn,			  rlvl->cbgheightexpn);
rlvl->cblkheightexpn = JAS_MIN(ccp->cblkheightexpn,			  rlvl->cbgheightexpn)
rlvl->cblkheightexpn
rlvl
rlvl
cblkheightexpn
JAS_MIN(ccp->cblkheightexpn,			  rlvl->cbgheightexpn)
JAS_MIN
JAS_MIN
ccp->cblkheightexpn
ccp
ccp
cblkheightexpn
rlvl->cbgheightexpn
rlvl
rlvl
cbgheightexpn
rlvl->numbands = (!rlvlno) ? 1 : 3;
rlvl->numbands = (!rlvlno) ? 1 : 3
rlvl->numbands
rlvl
rlvl
numbands
(!rlvlno) ? 1 : 3
(!rlvlno)
!rlvlno
rlvlno
rlvlno
1
3
if (!(rlvl->bands = jas_alloc2(rlvl->numbands,			  sizeof(jpc_dec_band_t)))) {				return -1;			}
!(rlvl->bands = jas_alloc2(rlvl->numbands,			  sizeof(jpc_dec_band_t)))
(rlvl->bands = jas_alloc2(rlvl->numbands,			  sizeof(jpc_dec_band_t)))
rlvl->bands = jas_alloc2(rlvl->numbands,			  sizeof(jpc_dec_band_t))
rlvl->bands
rlvl
rlvl
bands
jas_alloc2(rlvl->numbands,			  sizeof(jpc_dec_band_t))
jas_alloc2
jas_alloc2
rlvl->numbands
rlvl
rlvl
numbands
sizeof(jpc_dec_band_t)
jpc_dec_band_t
jpc_dec_band_t
jpc_dec_band_t

{				return -1;			}
return -1;
-1
1
for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				bndno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) +				  bandno + 1);				bnd = &bnds[bndno];				band->orient = bnd->orient;				band->stepsize = ccp->stepsizes[bndno];				band->analgain = JPC_NOMINALGAIN(ccp->qmfbid,				  tcomp->numrlvls - 1, rlvlno, band->orient);				band->absstepsize = jpc_calcabsstepsize(band->stepsize,				  cmpt->prec + band->analgain);				band->numbps = ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize) - 1;				band->roishift = (ccp->roishift + band->numbps >= JPC_PREC) ?				  (JPC_PREC - 1 - band->numbps) : ccp->roishift;				band->data = 0;				band->prcs = 0;				if (bnd->xstart == bnd->xend || bnd->ystart == bnd->yend) {					continue;				}				if (!(band->data = jas_seq2d_create(0, 0, 0, 0))) {					return -1;				}				jas_seq2d_bindsub(band->data, tcomp->data, bnd->locxstart,				  bnd->locystart, bnd->locxend, bnd->locyend);				jas_seq2d_setshift(band->data, bnd->xstart, bnd->ystart);				assert(rlvl->numprcs);				if (!(band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t)))) {					return -1;				}/************************************************/				cbgxstart = tlcbgxstart;				cbgystart = tlcbgystart;				for (prccnt = rlvl->numprcs, prc = band->prcs;				  prccnt > 0; --prccnt, ++prc) {					cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);					cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);					prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)));					prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)));					prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)));					prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)));					if (prc->xend > prc->xstart && prc->yend > prc->ystart) {						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					} else {						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}					cbgxstart += 1 << rlvl->cbgwidthexpn;					if (cbgxstart >= brcbgxend) {						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}				}/********************************************/			}
bandno = 0, band = rlvl->bands;
bandno = 0, band = rlvl->bands
bandno = 0
bandno
bandno
0
band = rlvl->bands
band
band
rlvl->bands
rlvl
rlvl
bands
bandno < rlvl->numbands
bandno
bandno
rlvl->numbands
rlvl
rlvl
numbands
++bandno, ++band
++bandno
bandno
bandno
++band
band
band
{				bndno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) +				  bandno + 1);				bnd = &bnds[bndno];				band->orient = bnd->orient;				band->stepsize = ccp->stepsizes[bndno];				band->analgain = JPC_NOMINALGAIN(ccp->qmfbid,				  tcomp->numrlvls - 1, rlvlno, band->orient);				band->absstepsize = jpc_calcabsstepsize(band->stepsize,				  cmpt->prec + band->analgain);				band->numbps = ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize) - 1;				band->roishift = (ccp->roishift + band->numbps >= JPC_PREC) ?				  (JPC_PREC - 1 - band->numbps) : ccp->roishift;				band->data = 0;				band->prcs = 0;				if (bnd->xstart == bnd->xend || bnd->ystart == bnd->yend) {					continue;				}				if (!(band->data = jas_seq2d_create(0, 0, 0, 0))) {					return -1;				}				jas_seq2d_bindsub(band->data, tcomp->data, bnd->locxstart,				  bnd->locystart, bnd->locxend, bnd->locyend);				jas_seq2d_setshift(band->data, bnd->xstart, bnd->ystart);				assert(rlvl->numprcs);				if (!(band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t)))) {					return -1;				}/************************************************/				cbgxstart = tlcbgxstart;				cbgystart = tlcbgystart;				for (prccnt = rlvl->numprcs, prc = band->prcs;				  prccnt > 0; --prccnt, ++prc) {					cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);					cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);					prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)));					prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)));					prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)));					prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)));					if (prc->xend > prc->xstart && prc->yend > prc->ystart) {						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					} else {						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}					cbgxstart += 1 << rlvl->cbgwidthexpn;					if (cbgxstart >= brcbgxend) {						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}				}/********************************************/			}
bndno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) +				  bandno + 1);
bndno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) +				  bandno + 1)
bndno
bndno
(!rlvlno) ? 0 : (3 * (rlvlno - 1) +				  bandno + 1)
(!rlvlno)
!rlvlno
rlvlno
rlvlno
0
(3 * (rlvlno - 1) +				  bandno + 1)
3 * (rlvlno - 1) +				  bandno + 1
3 * (rlvlno - 1) +				  bandno
3 * (rlvlno - 1)
3
(rlvlno - 1)
rlvlno - 1
rlvlno
rlvlno
1
bandno
bandno
1
bnd = &bnds[bndno];
bnd = &bnds[bndno]
bnd
bnd
&bnds[bndno]
bnds[bndno]
bnds
bnds
bndno
bndno
band->orient = bnd->orient;
band->orient = bnd->orient
band->orient
band
band
orient
bnd->orient
bnd
bnd
orient
band->stepsize = ccp->stepsizes[bndno];
band->stepsize = ccp->stepsizes[bndno]
band->stepsize
band
band
stepsize
ccp->stepsizes[bndno]
ccp->stepsizes
ccp
ccp
stepsizes
bndno
bndno
band->analgain = JPC_NOMINALGAIN(ccp->qmfbid,				  tcomp->numrlvls - 1, rlvlno, band->orient);
band->analgain = JPC_NOMINALGAIN(ccp->qmfbid,				  tcomp->numrlvls - 1, rlvlno, band->orient)
band->analgain
band
band
analgain
JPC_NOMINALGAIN(ccp->qmfbid,				  tcomp->numrlvls - 1, rlvlno, band->orient)
JPC_NOMINALGAIN
JPC_NOMINALGAIN
ccp->qmfbid
ccp
ccp
qmfbid
tcomp->numrlvls - 1
tcomp->numrlvls
tcomp
tcomp
numrlvls
1
rlvlno
rlvlno
band->orient
band
band
orient
band->absstepsize = jpc_calcabsstepsize(band->stepsize,				  cmpt->prec + band->analgain);
band->absstepsize = jpc_calcabsstepsize(band->stepsize,				  cmpt->prec + band->analgain)
band->absstepsize
band
band
absstepsize
jpc_calcabsstepsize(band->stepsize,				  cmpt->prec + band->analgain)
jpc_calcabsstepsize
jpc_calcabsstepsize
band->stepsize
band
band
stepsize
cmpt->prec + band->analgain
cmpt->prec
cmpt
cmpt
prec
band->analgain
band
band
analgain
band->numbps = ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize) - 1;
band->numbps = ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize) - 1
band->numbps
band
band
numbps
ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize) - 1
ccp->numguardbits +				  JPC_QCX_GETEXPN(band->stepsize)
ccp->numguardbits
ccp
ccp
numguardbits
JPC_QCX_GETEXPN(band->stepsize)
JPC_QCX_GETEXPN
JPC_QCX_GETEXPN
band->stepsize
band
band
stepsize
1
band->roishift = (ccp->roishift + band->numbps >= JPC_PREC) ?				  (JPC_PREC - 1 - band->numbps) : ccp->roishift;
band->roishift = (ccp->roishift + band->numbps >= JPC_PREC) ?				  (JPC_PREC - 1 - band->numbps) : ccp->roishift
band->roishift
band
band
roishift
(ccp->roishift + band->numbps >= JPC_PREC) ?				  (JPC_PREC - 1 - band->numbps) : ccp->roishift
(ccp->roishift + band->numbps >= JPC_PREC)
ccp->roishift + band->numbps >= JPC_PREC
ccp->roishift + band->numbps
ccp->roishift
ccp
ccp
roishift
band->numbps
band
band
numbps
JPC_PREC
JPC_PREC
(JPC_PREC - 1 - band->numbps)
JPC_PREC - 1 - band->numbps
JPC_PREC - 1
JPC_PREC
JPC_PREC
1
band->numbps
band
band
numbps
ccp->roishift
ccp
ccp
roishift
band->data = 0;
band->data = 0
band->data
band
band
data
0
band->prcs = 0;
band->prcs = 0
band->prcs
band
band
prcs
0
if (bnd->xstart == bnd->xend || bnd->ystart == bnd->yend) {					continue;				}
bnd->xstart == bnd->xend || bnd->ystart == bnd->yend
bnd->xstart == bnd->xend
bnd->xstart
bnd
bnd
xstart
bnd->xend
bnd
bnd
xend
bnd->ystart == bnd->yend
bnd->ystart
bnd
bnd
ystart
bnd->yend
bnd
bnd
yend
{					continue;				}
continue;
if (!(band->data = jas_seq2d_create(0, 0, 0, 0))) {					return -1;				}
!(band->data = jas_seq2d_create(0, 0, 0, 0))
(band->data = jas_seq2d_create(0, 0, 0, 0))
band->data = jas_seq2d_create(0, 0, 0, 0)
band->data
band
band
data
jas_seq2d_create(0, 0, 0, 0)
jas_seq2d_create
jas_seq2d_create
0
0
0
0
{					return -1;				}
return -1;
-1
1
jas_seq2d_bindsub(band->data, tcomp->data, bnd->locxstart,				  bnd->locystart, bnd->locxend, bnd->locyend);
jas_seq2d_bindsub(band->data, tcomp->data, bnd->locxstart,				  bnd->locystart, bnd->locxend, bnd->locyend)
jas_seq2d_bindsub
jas_seq2d_bindsub
band->data
band
band
data
tcomp->data
tcomp
tcomp
data
bnd->locxstart
bnd
bnd
locxstart
bnd->locystart
bnd
bnd
locystart
bnd->locxend
bnd
bnd
locxend
bnd->locyend
bnd
bnd
locyend
jas_seq2d_setshift(band->data, bnd->xstart, bnd->ystart);
jas_seq2d_setshift(band->data, bnd->xstart, bnd->ystart)
jas_seq2d_setshift
jas_seq2d_setshift
band->data
band
band
data
bnd->xstart
bnd
bnd
xstart
bnd->ystart
bnd
bnd
ystart
assert(rlvl->numprcs);
assert(rlvl->numprcs)
assert
assert
rlvl->numprcs
rlvl
rlvl
numprcs
if (!(band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t)))) {					return -1;				}
!(band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t)))
(band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t)))
band->prcs = jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t))
band->prcs
band
band
prcs
jas_alloc2(rlvl->numprcs,				  sizeof(jpc_dec_prc_t))
jas_alloc2
jas_alloc2
rlvl->numprcs
rlvl
rlvl
numprcs
sizeof(jpc_dec_prc_t)
jpc_dec_prc_t
jpc_dec_prc_t
jpc_dec_prc_t

{					return -1;				}
return -1;
-1
1
cbgxstart = tlcbgxstart;
cbgxstart = tlcbgxstart
cbgxstart
cbgxstart
tlcbgxstart
tlcbgxstart
cbgystart = tlcbgystart;
cbgystart = tlcbgystart
cbgystart
cbgystart
tlcbgystart
tlcbgystart
for (prccnt = rlvl->numprcs, prc = band->prcs;				  prccnt > 0; --prccnt, ++prc) {					cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);					cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);					prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)));					prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)));					prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)));					prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)));					if (prc->xend > prc->xstart && prc->yend > prc->ystart) {						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					} else {						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}					cbgxstart += 1 << rlvl->cbgwidthexpn;					if (cbgxstart >= brcbgxend) {						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}				}
prccnt = rlvl->numprcs, prc = band->prcs;
prccnt = rlvl->numprcs, prc = band->prcs
prccnt = rlvl->numprcs
prccnt
prccnt
rlvl->numprcs
rlvl
rlvl
numprcs
prc = band->prcs
prc
prc
band->prcs
band
band
prcs
prccnt > 0
prccnt
prccnt
0
--prccnt, ++prc
--prccnt
prccnt
prccnt
++prc
prc
prc
{					cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);					cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);					prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)));					prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)));					prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)));					prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)));					if (prc->xend > prc->xstart && prc->yend > prc->ystart) {						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					} else {						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}					cbgxstart += 1 << rlvl->cbgwidthexpn;					if (cbgxstart >= brcbgxend) {						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}				}
cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn);
cbgxend = cbgxstart + (1 << rlvl->cbgwidthexpn)
cbgxend
cbgxend
cbgxstart + (1 << rlvl->cbgwidthexpn)
cbgxstart
cbgxstart
(1 << rlvl->cbgwidthexpn)
1 << rlvl->cbgwidthexpn
1
rlvl->cbgwidthexpn
rlvl
rlvl
cbgwidthexpn
cbgyend = cbgystart + (1 << rlvl->cbgheightexpn);
cbgyend = cbgystart + (1 << rlvl->cbgheightexpn)
cbgyend
cbgyend
cbgystart + (1 << rlvl->cbgheightexpn)
cbgystart
cbgystart
(1 << rlvl->cbgheightexpn)
1 << rlvl->cbgheightexpn
1
rlvl->cbgheightexpn
rlvl
rlvl
cbgheightexpn
prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)));
prc->xstart = JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)))
prc->xstart
prc
prc
xstart
JAS_MAX(cbgxstart, JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data)))
JAS_MAX
JAS_MAX
cbgxstart
cbgxstart
JAS_CAST(uint_fast32_t,					  jas_seq2d_xstart(band->data))
JAS_CAST
JAS_CAST
uint_fast32_t
uint_fast32_t
jas_seq2d_xstart(band->data)
jas_seq2d_xstart
jas_seq2d_xstart
band->data
band
band
data
prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)));
prc->ystart = JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)))
prc->ystart
prc
prc
ystart
JAS_MAX(cbgystart, JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data)))
JAS_MAX
JAS_MAX
cbgystart
cbgystart
JAS_CAST(uint_fast32_t,					  jas_seq2d_ystart(band->data))
JAS_CAST
JAS_CAST
uint_fast32_t
uint_fast32_t
jas_seq2d_ystart(band->data)
jas_seq2d_ystart
jas_seq2d_ystart
band->data
band
band
data
prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)));
prc->xend = JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)))
prc->xend
prc
prc
xend
JAS_MIN(cbgxend, JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data)))
JAS_MIN
JAS_MIN
cbgxend
cbgxend
JAS_CAST(uint_fast32_t,					  jas_seq2d_xend(band->data))
JAS_CAST
JAS_CAST
uint_fast32_t
uint_fast32_t
jas_seq2d_xend(band->data)
jas_seq2d_xend
jas_seq2d_xend
band->data
band
band
data
prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)));
prc->yend = JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)))
prc->yend
prc
prc
yend
JAS_MIN(cbgyend, JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data)))
JAS_MIN
JAS_MIN
cbgyend
cbgyend
JAS_CAST(uint_fast32_t,					  jas_seq2d_yend(band->data))
JAS_CAST
JAS_CAST
uint_fast32_t
uint_fast32_t
jas_seq2d_yend(band->data)
jas_seq2d_yend
jas_seq2d_yend
band->data
band
band
data
if (prc->xend > prc->xstart && prc->yend > prc->ystart) {						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					} else {						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}
prc->xend > prc->xstart && prc->yend > prc->ystart
prc->xend > prc->xstart
prc->xend
prc
prc
xend
prc->xstart
prc
prc
xstart
prc->yend > prc->ystart
prc->yend
prc
prc
yend
prc->ystart
prc
prc
ystart
{						tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;						brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;						prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;						prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;						prc->numcblks = prc->numhcblks * prc->numvcblks;						assert(prc->numcblks > 0);						if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}						if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}						cblkxstart = cbgxstart;						cblkystart = cbgystart;						for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}					}
tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;
tlcblkxstart = JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn
tlcblkxstart
tlcblkxstart
JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn
JPC_FLOORDIVPOW2(prc->xstart,						  rlvl->cblkwidthexpn)
JPC_FLOORDIVPOW2
JPC_FLOORDIVPOW2
prc->xstart
prc
prc
xstart
rlvl->cblkwidthexpn
rlvl
rlvl
cblkwidthexpn
rlvl->cblkwidthexpn
rlvl
rlvl
cblkwidthexpn
tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;
tlcblkystart = JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn
tlcblkystart
tlcblkystart
JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn
JPC_FLOORDIVPOW2(prc->ystart,						  rlvl->cblkheightexpn)
JPC_FLOORDIVPOW2
JPC_FLOORDIVPOW2
prc->ystart
prc
prc
ystart
rlvl->cblkheightexpn
rlvl
rlvl
cblkheightexpn
rlvl->cblkheightexpn
rlvl
rlvl
cblkheightexpn
brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn;
brcblkxend = JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn
brcblkxend
brcblkxend
JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn) << rlvl->cblkwidthexpn
JPC_CEILDIVPOW2(prc->xend,						  rlvl->cblkwidthexpn)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
prc->xend
prc
prc
xend
rlvl->cblkwidthexpn
rlvl
rlvl
cblkwidthexpn
rlvl->cblkwidthexpn
rlvl
rlvl
cblkwidthexpn
brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn;
brcblkyend = JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn
brcblkyend
brcblkyend
JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn) << rlvl->cblkheightexpn
JPC_CEILDIVPOW2(prc->yend,						  rlvl->cblkheightexpn)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
prc->yend
prc
prc
yend
rlvl->cblkheightexpn
rlvl
rlvl
cblkheightexpn
rlvl->cblkheightexpn
rlvl
rlvl
cblkheightexpn
prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn;
prc->numhcblks = (brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn
prc->numhcblks
prc
prc
numhcblks
(brcblkxend - tlcblkxstart) >>						  rlvl->cblkwidthexpn
(brcblkxend - tlcblkxstart)
brcblkxend - tlcblkxstart
brcblkxend
brcblkxend
tlcblkxstart
tlcblkxstart
rlvl->cblkwidthexpn
rlvl
rlvl
cblkwidthexpn
prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn;
prc->numvcblks = (brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn
prc->numvcblks
prc
prc
numvcblks
(brcblkyend - tlcblkystart) >>						  rlvl->cblkheightexpn
(brcblkyend - tlcblkystart)
brcblkyend - tlcblkystart
brcblkyend
brcblkyend
tlcblkystart
tlcblkystart
rlvl->cblkheightexpn
rlvl
rlvl
cblkheightexpn
prc->numcblks = prc->numhcblks * prc->numvcblks;
prc->numcblks = prc->numhcblks * prc->numvcblks
prc->numcblks
prc
prc
numcblks
prc->numhcblks * prc->numvcblks
prc->numhcblks
prc
prc
numhcblks
prc->numvcblks
prc
prc
numvcblks
assert(prc->numcblks > 0);
assert(prc->numcblks > 0)
assert
assert
prc->numcblks > 0
prc->numcblks
prc
prc
numcblks
0
if (!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}
!(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))
(prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))
prc->incltagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks)
prc->incltagtree
prc
prc
incltagtree
jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks)
jpc_tagtree_create
jpc_tagtree_create
prc->numhcblks
prc
prc
numhcblks
prc->numvcblks
prc
prc
numvcblks
{							return -1;						}
return -1;
-1
1
if (!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))) {							return -1;						}
!(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))
(prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks))
prc->numimsbstagtree = jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks)
prc->numimsbstagtree
prc
prc
numimsbstagtree
jpc_tagtree_create(						  prc->numhcblks, prc->numvcblks)
jpc_tagtree_create
jpc_tagtree_create
prc->numhcblks
prc
prc
numhcblks
prc->numvcblks
prc
prc
numvcblks
{							return -1;						}
return -1;
-1
1
if (!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))) {							return -1;						}
!(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))
(prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t)))
prc->cblks = jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t))
prc->cblks
prc
prc
cblks
jas_alloc2(prc->numcblks,						  sizeof(jpc_dec_cblk_t))
jas_alloc2
jas_alloc2
prc->numcblks
prc
prc
numcblks
sizeof(jpc_dec_cblk_t)
jpc_dec_cblk_t
jpc_dec_cblk_t
jpc_dec_cblk_t

{							return -1;						}
return -1;
-1
1
cblkxstart = cbgxstart;
cblkxstart = cbgxstart
cblkxstart
cblkxstart
cbgxstart
cbgxstart
cblkystart = cbgystart;
cblkystart = cbgystart
cblkystart
cblkystart
cbgystart
cbgystart
for (cblkcnt = prc->numcblks, cblk = prc->cblks;						  cblkcnt > 0;) {							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}
cblkcnt = prc->numcblks, cblk = prc->cblks;
cblkcnt = prc->numcblks, cblk = prc->cblks
cblkcnt = prc->numcblks
cblkcnt
cblkcnt
prc->numcblks
prc
prc
numcblks
cblk = prc->cblks
cblk
cblk
prc->cblks
prc
prc
cblks
cblkcnt > 0
cblkcnt
cblkcnt
0
{							cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);							cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);							tmpxstart = JAS_MAX(cblkxstart, prc->xstart);							tmpystart = JAS_MAX(cblkystart, prc->ystart);							tmpxend = JAS_MIN(cblkxend, prc->xend);							tmpyend = JAS_MIN(cblkyend, prc->yend);							if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}							cblkxstart += 1 << rlvl->cblkwidthexpn;							if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}						}
cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn);
cblkxend = cblkxstart + (1 << rlvl->cblkwidthexpn)
cblkxend
cblkxend
cblkxstart + (1 << rlvl->cblkwidthexpn)
cblkxstart
cblkxstart
(1 << rlvl->cblkwidthexpn)
1 << rlvl->cblkwidthexpn
1
rlvl->cblkwidthexpn
rlvl
rlvl
cblkwidthexpn
cblkyend = cblkystart + (1 << rlvl->cblkheightexpn);
cblkyend = cblkystart + (1 << rlvl->cblkheightexpn)
cblkyend
cblkyend
cblkystart + (1 << rlvl->cblkheightexpn)
cblkystart
cblkystart
(1 << rlvl->cblkheightexpn)
1 << rlvl->cblkheightexpn
1
rlvl->cblkheightexpn
rlvl
rlvl
cblkheightexpn
tmpxstart = JAS_MAX(cblkxstart, prc->xstart);
tmpxstart = JAS_MAX(cblkxstart, prc->xstart)
tmpxstart
tmpxstart
JAS_MAX(cblkxstart, prc->xstart)
JAS_MAX
JAS_MAX
cblkxstart
cblkxstart
prc->xstart
prc
prc
xstart
tmpystart = JAS_MAX(cblkystart, prc->ystart);
tmpystart = JAS_MAX(cblkystart, prc->ystart)
tmpystart
tmpystart
JAS_MAX(cblkystart, prc->ystart)
JAS_MAX
JAS_MAX
cblkystart
cblkystart
prc->ystart
prc
prc
ystart
tmpxend = JAS_MIN(cblkxend, prc->xend);
tmpxend = JAS_MIN(cblkxend, prc->xend)
tmpxend
tmpxend
JAS_MIN(cblkxend, prc->xend)
JAS_MIN
JAS_MIN
cblkxend
cblkxend
prc->xend
prc
prc
xend
tmpyend = JAS_MIN(cblkyend, prc->yend);
tmpyend = JAS_MIN(cblkyend, prc->yend)
tmpyend
tmpyend
JAS_MIN(cblkyend, prc->yend)
JAS_MIN
JAS_MIN
cblkyend
cblkyend
prc->yend
prc
prc
yend
if (tmpxend > tmpxstart && tmpyend > tmpystart) {								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}
tmpxend > tmpxstart && tmpyend > tmpystart
tmpxend > tmpxstart
tmpxend
tmpxend
tmpxstart
tmpxstart
tmpyend > tmpystart
tmpyend
tmpyend
tmpystart
tmpystart
{								cblk->firstpassno = -1;								cblk->mqdec = 0;								cblk->nulldec = 0;								cblk->flags = 0;								cblk->numpasses = 0;								cblk->segs.head = 0;								cblk->segs.tail = 0;								cblk->curseg = 0;								cblk->numimsbs = 0;								cblk->numlenbits = 3;								cblk->flags = 0;								if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}								jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);								++cblk;								--cblkcnt;							}
cblk->firstpassno = -1;
cblk->firstpassno = -1
cblk->firstpassno
cblk
cblk
firstpassno
-1
1
cblk->mqdec = 0;
cblk->mqdec = 0
cblk->mqdec
cblk
cblk
mqdec
0
cblk->nulldec = 0;
cblk->nulldec = 0
cblk->nulldec
cblk
cblk
nulldec
0
cblk->flags = 0;
cblk->flags = 0
cblk->flags
cblk
cblk
flags
0
cblk->numpasses = 0;
cblk->numpasses = 0
cblk->numpasses
cblk
cblk
numpasses
0
cblk->segs.head = 0;
cblk->segs.head = 0
cblk->segs.head
cblk->segs
cblk
cblk
segs
head
0
cblk->segs.tail = 0;
cblk->segs.tail = 0
cblk->segs.tail
cblk->segs
cblk
cblk
segs
tail
0
cblk->curseg = 0;
cblk->curseg = 0
cblk->curseg
cblk
cblk
curseg
0
cblk->numimsbs = 0;
cblk->numimsbs = 0
cblk->numimsbs
cblk
cblk
numimsbs
0
cblk->numlenbits = 3;
cblk->numlenbits = 3
cblk->numlenbits
cblk
cblk
numlenbits
3
cblk->flags = 0;
cblk->flags = 0
cblk->flags
cblk
cblk
flags
0
if (!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))) {									return -1;								}
!(cblk->data = jas_seq2d_create(0, 0, 0,								  0))
(cblk->data = jas_seq2d_create(0, 0, 0,								  0))
cblk->data = jas_seq2d_create(0, 0, 0,								  0)
cblk->data
cblk
cblk
data
jas_seq2d_create(0, 0, 0,								  0)
jas_seq2d_create
jas_seq2d_create
0
0
0
0
{									return -1;								}
return -1;
-1
1
jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend);
jas_seq2d_bindsub(cblk->data, band->data,								  tmpxstart, tmpystart, tmpxend, tmpyend)
jas_seq2d_bindsub
jas_seq2d_bindsub
cblk->data
cblk
cblk
data
band->data
band
band
data
tmpxstart
tmpxstart
tmpystart
tmpystart
tmpxend
tmpxend
tmpyend
tmpyend
++cblk;
++cblk
cblk
cblk
--cblkcnt;
--cblkcnt
cblkcnt
cblkcnt
cblkxstart += 1 << rlvl->cblkwidthexpn;
cblkxstart += 1 << rlvl->cblkwidthexpn
cblkxstart
cblkxstart
1 << rlvl->cblkwidthexpn
1
rlvl->cblkwidthexpn
rlvl
rlvl
cblkwidthexpn
if (cblkxstart >= cbgxend) {								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}
cblkxstart >= cbgxend
cblkxstart
cblkxstart
cbgxend
cbgxend
{								cblkxstart = cbgxstart;								cblkystart += 1 << rlvl->cblkheightexpn;							}
cblkxstart = cbgxstart;
cblkxstart = cbgxstart
cblkxstart
cblkxstart
cbgxstart
cbgxstart
cblkystart += 1 << rlvl->cblkheightexpn;
cblkystart += 1 << rlvl->cblkheightexpn
cblkystart
cblkystart
1 << rlvl->cblkheightexpn
1
rlvl->cblkheightexpn
rlvl
rlvl
cblkheightexpn
{						prc->cblks = 0;						prc->incltagtree = 0;						prc->numimsbstagtree = 0;					}
prc->cblks = 0;
prc->cblks = 0
prc->cblks
prc
prc
cblks
0
prc->incltagtree = 0;
prc->incltagtree = 0
prc->incltagtree
prc
prc
incltagtree
0
prc->numimsbstagtree = 0;
prc->numimsbstagtree = 0
prc->numimsbstagtree
prc
prc
numimsbstagtree
0
cbgxstart += 1 << rlvl->cbgwidthexpn;
cbgxstart += 1 << rlvl->cbgwidthexpn
cbgxstart
cbgxstart
1 << rlvl->cbgwidthexpn
1
rlvl->cbgwidthexpn
rlvl
rlvl
cbgwidthexpn
if (cbgxstart >= brcbgxend) {						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}
cbgxstart >= brcbgxend
cbgxstart
cbgxstart
brcbgxend
brcbgxend
{						cbgxstart = tlcbgxstart;						cbgystart += 1 << rlvl->cbgheightexpn;					}
cbgxstart = tlcbgxstart;
cbgxstart = tlcbgxstart
cbgxstart
cbgxstart
tlcbgxstart
tlcbgxstart
cbgystart += 1 << rlvl->cbgheightexpn;
cbgystart += 1 << rlvl->cbgheightexpn
cbgystart
cbgystart
1 << rlvl->cbgheightexpn
1
rlvl->cbgheightexpn
rlvl
rlvl
cbgheightexpn
if (!(tile->pi = jpc_dec_pi_create(dec, tile))) {		return -1;	}
!(tile->pi = jpc_dec_pi_create(dec, tile))
(tile->pi = jpc_dec_pi_create(dec, tile))
tile->pi = jpc_dec_pi_create(dec, tile)
tile->pi
tile
tile
pi
jpc_dec_pi_create(dec, tile)
jpc_dec_pi_create
jpc_dec_pi_create
dec
dec
tile
tile
{		return -1;	}
return -1;
-1
1
for (pchgno = 0; pchgno < jpc_pchglist_numpchgs(tile->cp->pchglist);	  ++pchgno) {		pchg = jpc_pchg_copy(jpc_pchglist_get(tile->cp->pchglist, pchgno));		assert(pchg);		jpc_pi_addpchg(tile->pi, pchg);	}
pchgno = 0;
pchgno = 0
pchgno
pchgno
0
pchgno < jpc_pchglist_numpchgs(tile->cp->pchglist)
pchgno
pchgno
jpc_pchglist_numpchgs(tile->cp->pchglist)
jpc_pchglist_numpchgs
jpc_pchglist_numpchgs
tile->cp->pchglist
tile->cp
tile
tile
cp
pchglist
++pchgno
pchgno
pchgno
{		pchg = jpc_pchg_copy(jpc_pchglist_get(tile->cp->pchglist, pchgno));		assert(pchg);		jpc_pi_addpchg(tile->pi, pchg);	}
pchg = jpc_pchg_copy(jpc_pchglist_get(tile->cp->pchglist, pchgno));
pchg = jpc_pchg_copy(jpc_pchglist_get(tile->cp->pchglist, pchgno))
pchg
pchg
jpc_pchg_copy(jpc_pchglist_get(tile->cp->pchglist, pchgno))
jpc_pchg_copy
jpc_pchg_copy
jpc_pchglist_get(tile->cp->pchglist, pchgno)
jpc_pchglist_get
jpc_pchglist_get
tile->cp->pchglist
tile->cp
tile
tile
cp
pchglist
pchgno
pchgno
assert(pchg);
assert(pchg)
assert
assert
pchg
pchg
jpc_pi_addpchg(tile->pi, pchg);
jpc_pi_addpchg(tile->pi, pchg)
jpc_pi_addpchg
jpc_pi_addpchg
tile->pi
tile
tile
pi
pchg
pchg
jpc_pi_init(tile->pi);
jpc_pi_init(tile->pi)
jpc_pi_init
jpc_pi_init
tile->pi
tile
tile
pi
return 0;
0
-----joern-----
(41,17,0)
(52,8,0)
(53,48,0)
(50,43,0)
(48,53,0)
(7,43,0)
(54,58,0)
(22,41,0)
(47,57,0)
(38,0,0)
(43,15,0)
(58,46,0)
(26,42,0)
(23,31,0)
(21,3,0)
(11,42,0)
(31,39,0)
(59,47,0)
(28,42,0)
(41,22,0)
(57,47,0)
(58,56,0)
(56,58,0)
(25,61,0)
(5,42,0)
(57,37,0)
(3,40,0)
(20,21,0)
(9,28,0)
(22,37,0)
(37,22,0)
(17,53,0)
(18,46,0)
(34,8,0)
(49,26,0)
(0,8,0)
(45,28,0)
(44,8,0)
(12,51,0)
(51,42,0)
(41,61,0)
(16,48,0)
(33,26,0)
(28,47,0)
(6,8,0)
(27,17,0)
(17,40,0)
(43,60,0)
(36,57,0)
(56,8,0)
(26,56,0)
(29,42,0)
(3,15,0)
(30,8,0)
(19,29,0)
(53,8,0)
(0,31,0)
(3,21,0)
(32,53,0)
(43,42,0)
(51,57,0)
(17,41,0)
(15,55,0)
(31,0,0)
(61,1,0)
(22,1,0)
(57,51,0)
(47,28,0)
(2,22,0)
(46,1,0)
(37,57,0)
(13,46,0)
(40,3,0)
(21,0,0)
(40,17,0)
(46,58,0)
(61,41,0)
(15,3,0)
(4,37,0)
(14,61,0)
(10,51,0)
(48,39,0)
(35,56,0)
(42,5,1)
(31,23,1)
(48,16,1)
(61,1,1)
(58,46,1)
(41,61,1)
(29,19,1)
(11,56,1)
(41,22,1)
(49,33,1)
(26,42,1)
(5,11,1)
(46,13,1)
(7,50,1)
(46,1,1)
(20,43,1)
(43,7,1)
(31,39,1)
(14,27,1)
(2,61,1)
(25,14,1)
(28,45,1)
(47,59,1)
(54,46,1)
(26,49,1)
(4,2,1)
(53,48,1)
(58,54,1)
(21,20,1)
(17,53,1)
(57,51,1)
(57,36,1)
(28,42,1)
(37,57,1)
(0,31,1)
(13,18,1)
(24,26,1)
(3,21,1)
(18,35,1)
(57,47,1)
(16,32,1)
(59,28,1)
(51,42,1)
(33,42,1)
(61,25,1)
(21,0,1)
(9,51,1)
(50,26,1)
(26,56,1)
(38,53,1)
(22,37,1)
(36,51,1)
(17,41,1)
(48,39,1)
(45,9,1)
(47,28,1)
(27,21,1)
(56,58,1)
(40,17,1)
(35,0,1)
(10,12,1)
(3,40,1)
(23,38,1)
(15,3,1)
(43,60,1)
(29,42,1)
(51,10,1)
(43,42,1)
(19,15,1)
(33,29,1)
(22,1,1)
(12,4,1)
(4,26,2)
(57,26,2)
(51,26,2)
(12,26,2)
(33,26,2)
(15,3,2)
(36,51,2)
(22,1,2)
(15,26,2)
(40,26,2)
(9,51,2)
(43,26,2)
(17,53,2)
(37,57,2)
(41,22,2)
(17,41,2)
(22,37,2)
(61,1,2)
(59,51,2)
(26,56,2)
(48,39,2)
(14,26,2)
(41,26,2)
(47,51,2)
(22,26,2)
(25,26,2)
(50,26,2)
(41,61,2)
(27,26,2)
(57,47,2)
(46,1,2)
(43,42,2)
(3,26,2)
(21,26,2)
(29,42,2)
(28,42,2)
(0,31,2)
(10,26,2)
(40,17,2)
(58,46,2)
(17,26,2)
(3,40,2)
(7,26,2)
(47,28,2)
(45,51,2)
(37,26,2)
(56,58,2)
(20,26,2)
(53,48,2)
(49,26,2)
(57,51,2)
(31,39,2)
(26,26,2)
(29,26,2)
(21,0,2)
(43,60,2)
(26,42,2)
(28,51,2)
(3,21,2)
(51,42,2)
(61,26,2)
(2,26,2)
(19,26,2)
-----------------------------------
(0,mant = JPC_QCX_GETMANT(refstepsize)
(1,int numrlvls)
(2,numrlvls)
(3,JPC_QCX_MANT(mant)
(4,1)
(5,0)
(6,numbands)
(7,bandno)
(8,)
(9,bandno)
(10,0)
(11,bandno)
(12,bandno)
(13,numrlvls)
(14,numrlvls)
(15,stepsizes[bandno] = JPC_QCX_MANT(mant)
(16,refstepsize)
(17,expn +\\n\\t\\t  (numrlvls - 1)
(18,3)
(19,bandno)
(20,mant)
(21,JPC_QCX_MANT(mant)
(22,numrlvls - 1 - ((bandno > 0)
(23,refstepsize)
(24,RET)
(25,1)
(26,bandno < numbands)
(27,expn)
(28,bandno + 2)
(29,++bandno)
(30,mant)
(31,JPC_QCX_GETMANT(refstepsize)
(32,expn)
(33,bandno)
(34,expn)
(35,numbands)
(36,0)
(37,1 - ((bandno > 0)
(38,mant)
(39,uint_fast16_t refstepsize)
(40,JPC_QCX_EXPN(expn +\\n\\t\\t  (numrlvls - 1)
(41,(numrlvls - 1)
(42,bandno = 0)
(43,stepsizes[bandno])
(44,bandno)
(45,2)
(46,3 * numrlvls)
(47,(bandno + 2)
(48,JPC_QCX_GETEXPN(refstepsize)
(49,numbands)
(50,stepsizes)
(51,bandno > 0)
(52,for (bandno = 0; bandno < numbands; ++bandno)
(53,expn = JPC_QCX_GETEXPN(refstepsize)
(54,2)
(55,)
(56,numbands = 3 * numrlvls - 2)
(57,(bandno > 0)
(58,3 * numrlvls - 2)
(59,3)
(60,uint_fast16_t *stepsizes)
(61,numrlvls - 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
