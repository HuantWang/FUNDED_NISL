-----label-----
1
-----code-----
jas_stream_t *jas_stream_tmpfile()
{
	jas_stream_t *stream;
	jas_stream_fileobj_t *obj;

	if (!(stream = jas_stream_create())) {
		return 0;
	}

	/* A temporary file stream is always opened for both reading and
	writing in binary mode. */
	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;

	/* Allocate memory for the underlying temporary file object. */
	if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {
		jas_stream_destroy(stream);
		return 0;
	}
	obj->fd = -1;
	obj->flags = 0;
	obj->pathname[0] = '\0';
	stream->obj_ = obj;

	/* Choose a file name. */
	tmpnam(obj->pathname);

	/* Open the underlying file. */
	if ((obj->fd = open(obj->pathname, O_CREAT | O_EXCL | O_RDWR | O_TRUNC | O_BINARY,
	  JAS_STREAM_PERMS)) < 0) {
		jas_stream_destroy(stream);
		return 0;
	}

	/* Unlink the file so that it will disappear if the program
	terminates abnormally. */
	/* Under UNIX, one can unlink an open file and continue to do I/O
	on it.  Not all operating systems support this functionality, however.
	For example, under Microsoft Windows the unlink operation will fail,
	since the file is open. */
	if (unlink(obj->pathname)) {
		/* We will try unlinking the file again after it is closed. */
		obj->flags |= JAS_STREAM_FILEOBJ_DELONCLOSE;
	}

	/* Use full buffering. */
	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);

	stream->ops_ = &jas_stream_fileops;

	return stream;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
7,8
7,9
7,10
7,11
7,12
7,13
7,14
7,15
7,16
7,17
7,18
7,19
7,20
7,21
7,22
8,9
9,10
9,11
10,11
12,13
12,14
15,16
16,17
16,18
17,18
19,20
19,21
22,23
22,24
23,24
24,25
25,26
25,27
26,27
28,29
29,30
31,32
32,33
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
41,43
42,43
44,45
46,47
48,49
48,50
49,50
50,51
51,52
51,53
52,53
54,55
54,56
55,56
57,58
58,59
58,60
59,60
62,63
62,64
63,64
64,65
64,66
65,66
67,68
69,70
71,72
72,73
72,74
73,74
73,75
74,75
77,78
79,80
80,81
80,82
81,82
81,83
82,83
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
105,106
107,108
107,109
108,109
111,112
111,113
112,113
112,114
113,114
114,115
114,116
115,116
115,117
116,117
119,120
119,121
119,122
119,123
120,121
122,123
122,124
123,124
126,127
126,128
127,128
127,129
128,129
128,130
129,130
129,131
130,131
132,133
134,135
136,137
138,139
140,141
143,144
143,145
144,145
145,146
145,147
146,147
148,149
150,151
152,153
152,154
153,154
153,155
154,155
156,157
156,158
157,158
160,161
161,162
162,163
162,164
163,164
163,165
164,165
167,168
169,170
170,171
170,172
170,173
170,174
170,175
171,172
173,174
175,176
179,180
180,181
180,182
181,182
181,183
182,183
185,186
186,187
188,189
189,190
-----nextToken-----
3,5,6,11,13,14,18,20,21,27,30,33,38,39,43,45,47,53,56,60,61,66,68,70,75,76,78,83,84,85,91,92,93,94,99,100,102,106,109,110,117,118,121,124,125,131,133,135,137,139,141,142,147,149,151,155,158,159,165,166,168,172,174,176,177,178,183,184,187,190
-----computeFrom-----
25,26
25,27
35,36
35,37
40,41
40,42
41,42
41,43
51,52
51,53
72,73
72,74
80,81
80,82
87,88
87,89
96,97
96,98
112,113
112,114
114,115
114,116
126,127
126,128
127,128
127,129
128,129
128,130
129,130
129,131
162,163
162,164
180,181
180,182
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
jas_stream_t *jas_stream_tmpfile(){	jas_stream_t *stream;	jas_stream_fileobj_t *obj;	if (!(stream = jas_stream_create())) {		return 0;	}	/* A temporary file stream is always opened for both reading and	writing in binary mode. */	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;	/* Allocate memory for the underlying temporary file object. */	if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	obj->fd = -1;	obj->flags = 0;	obj->pathname[0] = '\0';	stream->obj_ = obj;	/* Choose a file name. */	tmpnam(obj->pathname);	/* Open the underlying file. */	if ((obj->fd = open(obj->pathname, O_CREAT | O_EXCL | O_RDWR | O_TRUNC | O_BINARY,	  JAS_STREAM_PERMS)) < 0) {		jas_stream_destroy(stream);		return 0;	}	/* Unlink the file so that it will disappear if the program	terminates abnormally. */	/* Under UNIX, one can unlink an open file and continue to do I/O	on it.  Not all operating systems support this functionality, however.	For example, under Microsoft Windows the unlink operation will fail,	since the file is open. */	if (unlink(obj->pathname)) {		/* We will try unlinking the file again after it is closed. */		obj->flags |= JAS_STREAM_FILEOBJ_DELONCLOSE;	}	/* Use full buffering. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	stream->ops_ = &jas_stream_fileops;	return stream;}
jas_stream_t
jas_stream_t
*jas_stream_tmpfile()
*
jas_stream_tmpfile
{	jas_stream_t *stream;	jas_stream_fileobj_t *obj;	if (!(stream = jas_stream_create())) {		return 0;	}	/* A temporary file stream is always opened for both reading and	writing in binary mode. */	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;	/* Allocate memory for the underlying temporary file object. */	if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	obj->fd = -1;	obj->flags = 0;	obj->pathname[0] = '\0';	stream->obj_ = obj;	/* Choose a file name. */	tmpnam(obj->pathname);	/* Open the underlying file. */	if ((obj->fd = open(obj->pathname, O_CREAT | O_EXCL | O_RDWR | O_TRUNC | O_BINARY,	  JAS_STREAM_PERMS)) < 0) {		jas_stream_destroy(stream);		return 0;	}	/* Unlink the file so that it will disappear if the program	terminates abnormally. */	/* Under UNIX, one can unlink an open file and continue to do I/O	on it.  Not all operating systems support this functionality, however.	For example, under Microsoft Windows the unlink operation will fail,	since the file is open. */	if (unlink(obj->pathname)) {		/* We will try unlinking the file again after it is closed. */		obj->flags |= JAS_STREAM_FILEOBJ_DELONCLOSE;	}	/* Use full buffering. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	stream->ops_ = &jas_stream_fileops;	return stream;}
jas_stream_t *stream;
jas_stream_t *stream;
jas_stream_t
jas_stream_t
*stream
*
stream
jas_stream_fileobj_t *obj;
jas_stream_fileobj_t *obj;
jas_stream_fileobj_t
jas_stream_fileobj_t
*obj
*
obj
if (!(stream = jas_stream_create())) {		return 0;	}
!(stream = jas_stream_create())
(stream = jas_stream_create())
stream = jas_stream_create()
stream
stream
jas_stream_create()
jas_stream_create
jas_stream_create
{		return 0;	}
return 0;
0
stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;
stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
stream->openmode_
stream
stream
openmode_
JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
JAS_STREAM_READ | JAS_STREAM_WRITE
JAS_STREAM_READ
JAS_STREAM_READ
JAS_STREAM_WRITE
JAS_STREAM_WRITE
JAS_STREAM_BINARY
JAS_STREAM_BINARY
if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {		jas_stream_destroy(stream);		return 0;	}
!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))
(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))
obj = jas_malloc(sizeof(jas_stream_fileobj_t))
obj
obj
jas_malloc(sizeof(jas_stream_fileobj_t))
jas_malloc
jas_malloc
sizeof(jas_stream_fileobj_t)
jas_stream_fileobj_t
jas_stream_fileobj_t
jas_stream_fileobj_t

{		jas_stream_destroy(stream);		return 0;	}
jas_stream_destroy(stream);
jas_stream_destroy(stream)
jas_stream_destroy
jas_stream_destroy
stream
stream
return 0;
0
obj->fd = -1;
obj->fd = -1
obj->fd
obj
obj
fd
-1
1
obj->flags = 0;
obj->flags = 0
obj->flags
obj
obj
flags
0
obj->pathname[0] = '\0';
obj->pathname[0] = '\0'
obj->pathname[0]
obj->pathname
obj
obj
pathname
0
'\0'
stream->obj_ = obj;
stream->obj_ = obj
stream->obj_
stream
stream
obj_
obj
obj
tmpnam(obj->pathname);
tmpnam(obj->pathname)
tmpnam
tmpnam
obj->pathname
obj
obj
pathname
if ((obj->fd = open(obj->pathname, O_CREAT | O_EXCL | O_RDWR | O_TRUNC | O_BINARY,	  JAS_STREAM_PERMS)) < 0) {		jas_stream_destroy(stream);		return 0;	}
(obj->fd = open(obj->pathname, O_CREAT | O_EXCL | O_RDWR | O_TRUNC | O_BINARY,	  JAS_STREAM_PERMS)) < 0
(obj->fd = open(obj->pathname, O_CREAT | O_EXCL | O_RDWR | O_TRUNC | O_BINARY,	  JAS_STREAM_PERMS))
obj->fd = open(obj->pathname, O_CREAT | O_EXCL | O_RDWR | O_TRUNC | O_BINARY,	  JAS_STREAM_PERMS)
obj->fd
obj
obj
fd
open(obj->pathname, O_CREAT | O_EXCL | O_RDWR | O_TRUNC | O_BINARY,	  JAS_STREAM_PERMS)
open
open
obj->pathname
obj
obj
pathname
O_CREAT | O_EXCL | O_RDWR | O_TRUNC | O_BINARY
O_CREAT | O_EXCL | O_RDWR | O_TRUNC
O_CREAT | O_EXCL | O_RDWR
O_CREAT | O_EXCL
O_CREAT
O_CREAT
O_EXCL
O_EXCL
O_RDWR
O_RDWR
O_TRUNC
O_TRUNC
O_BINARY
O_BINARY
JAS_STREAM_PERMS
JAS_STREAM_PERMS
0
{		jas_stream_destroy(stream);		return 0;	}
jas_stream_destroy(stream);
jas_stream_destroy(stream)
jas_stream_destroy
jas_stream_destroy
stream
stream
return 0;
0
if (unlink(obj->pathname)) {		/* We will try unlinking the file again after it is closed. */		obj->flags |= JAS_STREAM_FILEOBJ_DELONCLOSE;	}
unlink(obj->pathname)
unlink
unlink
obj->pathname
obj
obj
pathname
{		/* We will try unlinking the file again after it is closed. */		obj->flags |= JAS_STREAM_FILEOBJ_DELONCLOSE;	}
obj->flags |= JAS_STREAM_FILEOBJ_DELONCLOSE;
obj->flags |= JAS_STREAM_FILEOBJ_DELONCLOSE
obj->flags
obj
obj
flags
JAS_STREAM_FILEOBJ_DELONCLOSE
JAS_STREAM_FILEOBJ_DELONCLOSE
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0)
jas_stream_initbuf
jas_stream_initbuf
stream
stream
JAS_STREAM_FULLBUF
JAS_STREAM_FULLBUF
0
0
stream->ops_ = &jas_stream_fileops;
stream->ops_ = &jas_stream_fileops
stream->ops_
stream
stream
ops_
&jas_stream_fileops
jas_stream_fileops
jas_stream_fileops
return stream;
stream
stream
-----joern-----
(13,2,0)
(10,3,0)
(8,1,0)
(6,2,0)
(15,12,0)
(14,10,0)
(5,1,0)
(8,11,0)
(4,19,0)
(19,3,0)
(20,19,0)
(22,10,0)
(11,19,0)
(9,8,0)
(0,1,0)
(11,1,0)
(7,11,0)
(10,1,0)
(2,16,0)
(2,1,0)
(12,1,0)
(18,19,0)
(19,11,0)
(17,1,0)
(21,8,0)
(18,7,1)
(12,15,1)
(8,11,1)
(21,12,1)
(8,21,1)
(15,2,1)
(7,10,1)
(13,11,1)
(9,8,1)
(10,3,1)
(2,6,1)
(10,22,1)
(2,16,1)
(20,4,1)
(6,13,1)
(4,18,1)
(19,20,1)
(22,14,1)
(19,3,1)
(11,19,1)
(8,11,2)
(19,3,2)
(11,19,2)
(10,3,2)
(9,8,2)
(2,16,2)
-----------------------------------
(0,buf)
(1,)
(2,jas_stream_puts(stream, buf)
(3,const char *fmt)
(4,fmt)
(5,ret)
(6,buf)
(7,ret)
(8,return ret;)
(9,RET)
(10,va_start(ap, fmt)
(11,ret = vsprintf(buf, fmt, ap)
(12,va_end(ap)
(13,stream)
(14,ap)
(15,ap)
(16,jas_stream_t *stream)
(17,ap)
(18,buf)
(19,vsprintf(buf, fmt, ap)
(20,ap)
(21,ret)
(22,fmt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
