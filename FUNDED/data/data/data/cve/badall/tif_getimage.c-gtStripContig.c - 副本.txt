-----label-----
1
-----code-----
static int
gtStripContig(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)
{
	TIFF* tif = img->tif;
	tileContigRoutine put = img->put.contig;
	uint32 row, y, nrow, nrowsub, rowstoread;
	tmsize_t pos;
	unsigned char* buf = NULL;
	uint32 rowsperstrip;
	uint16 subsamplinghor,subsamplingver;
	uint32 imagewidth = img->width;
	tmsize_t scanline;
	int32 fromskew, toskew;
	int ret = 1, flip;
        tmsize_t maxstripsize;

	TIFFGetFieldDefaulted(tif, TIFFTAG_YCBCRSUBSAMPLING, &subsamplinghor, &subsamplingver);
	if( subsamplingver == 0 ) {
		TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Invalid vertical YCbCr subsampling");
		return (0);
	}
	
	maxstripsize = TIFFStripSize(tif);

	flip = setorientation(img);
	if (flip & FLIP_VERTICALLY) {
		y = h - 1;
		toskew = -(int32)(w + w);
	} else {
		y = 0;
		toskew = -(int32)(w - w);
	}

	TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip);

	scanline = TIFFScanlineSize(tif);
	fromskew = (w < imagewidth ? imagewidth - w : 0);
	for (row = 0; row < h; row += nrow)
	{
		rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;
		nrow = (row + rowstoread > h ? h - row : rowstoread);
		nrowsub = nrow;
		if ((nrowsub%subsamplingver)!=0)
			nrowsub+=subsamplingver-nrowsub%subsamplingver;
		if (_TIFFReadEncodedStripAndAllocBuffer(tif,
		    TIFFComputeStrip(tif,row+img->row_offset, 0),
		    (void**)(&buf),
                    maxstripsize,
		    ((row + img->row_offset)%rowsperstrip + nrowsub) * scanline)==(tmsize_t)(-1)
		    && (buf == NULL || img->stoponerr))
		{
			ret = 0;
			break;
		}

		pos = ((row + img->row_offset) % rowsperstrip) * scanline + \
			((tmsize_t) img->col_offset * img->samplesperpixel);
		(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, buf + pos);
		y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);
	}

	if (flip & FLIP_HORIZONTALLY) {
		uint32 line;

		for (line = 0; line < h; line++) {
			uint32 *left = raster + (line * w);
			uint32 *right = left + w - 1;

			while ( left < right ) {
				uint32 temp = *left;
				*left = *right;
				*right = temp;
				left++;
				right--;
			}
		}
	}

	_TIFFfree(buf);
	return (ret);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
27,42
27,43
27,44
27,45
27,46
27,47
27,48
27,49
27,50
27,51
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
54,57
54,58
54,59
54,60
55,56
57,58
59,60
61,62
63,64
65,66
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
76,77
76,78
76,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
97,98
97,99
98,99
100,101
100,102
102,103
103,104
103,105
104,105
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
114,117
115,116
117,118
119,120
121,122
122,123
122,124
122,125
124,125
124,126
126,127
128,129
130,131
131,132
131,133
132,133
134,135
136,137
137,138
137,139
137,140
137,141
137,142
138,139
140,141
142,143
144,145
145,146
147,148
148,149
150,151
150,152
151,152
151,153
152,153
155,156
155,157
156,157
157,158
157,159
157,160
157,161
158,159
160,161
160,162
161,162
164,165
164,166
165,166
167,168
170,171
171,172
173,174
174,175
174,176
175,176
177,178
177,179
178,179
180,181
182,183
183,184
183,185
184,185
186,187
186,188
187,188
189,190
191,192
191,193
191,194
192,193
192,194
193,194
195,196
197,198
197,199
198,199
199,200
199,201
200,201
202,203
202,204
203,204
206,207
207,208
207,209
208,209
210,211
211,212
211,213
212,213
213,214
215,216
215,217
216,217
218,219
220,221
220,222
221,222
222,223
222,224
223,224
226,227
227,228
227,229
228,229
230,231
231,232
231,233
232,233
233,234
235,236
235,237
236,237
238,239
240,241
241,242
241,243
241,244
241,245
242,243
244,245
246,247
248,249
249,250
251,252
252,253
252,254
253,254
255,256
255,257
256,257
258,259
260,261
261,262
261,263
262,263
264,265
265,266
265,267
265,268
266,267
266,268
267,268
269,270
271,272
271,273
272,273
274,275
277,278
277,279
277,280
277,281
278,279
279,280
279,281
280,281
283,284
283,285
284,285
286,287
288,289
288,290
289,290
291,292
293,294
293,295
293,296
293,297
293,298
293,299
293,300
293,301
294,295
295,296
295,297
296,297
298,299
298,300
299,300
301,302
301,303
302,303
303,304
303,305
304,305
306,307
306,308
307,308
310,311
312,313
313,314
313,315
314,315
316,317
317,318
317,319
317,320
318,319
318,320
319,320
319,321
320,321
322,323
324,325
326,327
326,328
327,328
329,330
331,332
333,334
334,335
334,336
335,336
337,338
339,340
339,341
340,341
340,342
341,342
342,343
342,344
343,344
345,346
348,349
349,350
349,351
350,351
352,353
352,354
353,354
355,356
355,357
356,357
358,359
360,361
360,362
361,362
361,363
362,363
362,364
363,364
363,365
363,366
363,367
363,368
363,369
364,365
366,367
368,369
368,370
368,371
368,372
369,370
371,372
373,374
373,375
374,375
376,377
376,378
377,378
381,382
381,383
382,383
382,384
384,385
384,386
387,388
388,389
389,390
391,392
393,394
393,395
394,395
395,396
395,397
396,397
396,398
397,398
398,399
398,400
399,400
401,402
401,403
402,403
405,406
407,408
409,410
411,412
411,413
412,413
413,414
415,416
417,418
418,419
418,420
419,420
419,421
420,421
422,423
424,425
424,426
425,426
428,429
428,430
429,430
430,431
430,432
431,432
435,436
436,437
436,438
437,438
439,440
439,441
440,441
440,442
441,442
442,443
442,444
443,444
444,445
444,446
445,446
447,448
447,449
448,449
451,452
453,454
455,456
456,457
456,458
457,458
457,459
458,459
458,460
459,460
462,463
462,464
463,464
466,467
466,468
467,468
470,471
471,472
471,473
471,474
471,475
471,476
471,477
471,478
471,479
471,480
471,481
472,473
473,474
474,475
476,477
478,479
478,480
479,480
481,482
481,483
482,483
484,485
487,488
489,490
491,492
493,494
495,496
497,498
497,499
498,499
500,501
502,503
503,504
503,505
504,505
506,507
507,508
507,509
507,510
508,509
509,510
509,511
510,511
512,513
514,515
515,516
515,517
516,517
516,518
517,518
520,521
522,523
522,524
523,524
523,525
524,525
527,528
529,530
529,531
530,531
530,532
531,532
533,534
535,536
535,537
536,537
537,538
537,539
538,539
540,541
542,543
542,544
542,545
542,546
543,544
544,545
544,546
545,546
548,549
548,550
549,550
551,552
553,554
554,555
556,557
556,558
556,559
557,558
558,559
558,560
559,560
561,562
561,563
561,564
564,565
565,566
565,567
566,567
568,569
569,570
569,571
570,571
572,573
574,575
575,576
575,577
576,577
578,579
578,580
578,581
581,582
582,583
582,584
583,584
583,585
584,585
586,587
589,590
589,591
590,591
590,592
591,592
593,594
595,596
595,597
595,598
595,599
595,600
596,597
597,598
597,599
598,599
600,601
600,602
602,603
603,604
604,605
606,607
607,608
607,609
608,609
609,610
611,612
612,613
614,615
615,616
615,617
616,617
617,618
619,620
621,622
622,623
623,624
625,626
626,627
627,628
629,630
630,631
630,632
631,632
633,634
635,636
636,637
637,638
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,31,33,34,38,39,43,45,50,51,52,56,58,60,62,64,66,70,72,75,77,78,81,85,87,91,93,95,99,101,105,106,110,112,116,118,120,123,125,127,129,133,135,139,141,143,146,149,153,154,159,162,163,166,168,169,172,176,179,181,185,188,190,194,196,201,204,205,209,214,217,219,224,225,229,234,237,239,243,245,247,250,254,257,259,263,268,270,273,275,276,281,282,285,287,290,292,297,300,305,308,309,311,315,321,323,325,328,330,332,336,338,344,346,347,351,354,357,359,365,367,370,372,375,378,379,380,383,385,386,390,392,400,403,404,406,408,410,414,416,421,423,426,427,432,433,434,438,446,449,450,452,454,460,461,464,465,468,469,475,477,480,483,485,486,488,490,492,494,496,499,501,505,511,513,518,519,521,525,526,528,532,534,539,541,546,547,550,552,555,560,562,563,567,571,573,577,579,580,585,587,588,592,594,599,601,605,610,613,618,620,624,628,632,634,638
-----computeFrom-----
151,152
151,153
174,175
174,176
183,184
183,185
192,193
192,194
199,200
199,201
202,203
202,204
207,208
207,209
215,216
215,217
222,223
222,224
227,228
227,229
235,236
235,237
252,253
252,254
261,262
261,263
266,267
266,268
271,272
271,273
279,280
279,281
283,284
283,285
288,289
288,290
295,296
295,297
298,299
298,300
301,302
301,303
303,304
303,305
313,314
313,315
318,319
318,320
319,320
319,321
326,327
326,328
334,335
334,336
340,341
340,342
342,343
342,344
349,350
349,351
352,353
352,354
355,356
355,357
361,362
361,363
362,363
362,364
373,374
373,375
393,394
393,395
395,396
395,397
396,397
396,398
398,399
398,400
418,419
418,420
419,420
419,421
430,431
430,432
436,437
436,438
439,440
439,441
440,441
440,442
442,443
442,444
444,445
444,446
456,457
456,458
478,479
478,480
481,482
481,483
497,498
497,499
503,504
503,505
509,510
509,511
530,531
530,532
544,545
544,546
548,549
548,550
565,566
565,567
569,570
569,571
582,583
582,584
583,584
583,585
590,591
590,592
607,608
607,609
615,616
615,617
-----guardedBy-----
346,359
344,357
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static intgtStripContig(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h){	TIFF* tif = img->tif;	tileContigRoutine put = img->put.contig;	uint32 row, y, nrow, nrowsub, rowstoread;	tmsize_t pos;	unsigned char* buf = NULL;	uint32 rowsperstrip;	uint16 subsamplinghor,subsamplingver;	uint32 imagewidth = img->width;	tmsize_t scanline;	int32 fromskew, toskew;	int ret = 1, flip;        tmsize_t maxstripsize;	TIFFGetFieldDefaulted(tif, TIFFTAG_YCBCRSUBSAMPLING, &subsamplinghor, &subsamplingver);	if( subsamplingver == 0 ) {		TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Invalid vertical YCbCr subsampling");		return (0);	}		maxstripsize = TIFFStripSize(tif);	flip = setorientation(img);	if (flip & FLIP_VERTICALLY) {		y = h - 1;		toskew = -(int32)(w + w);	} else {		y = 0;		toskew = -(int32)(w - w);	}	TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip);	scanline = TIFFScanlineSize(tif);	fromskew = (w < imagewidth ? imagewidth - w : 0);	for (row = 0; row < h; row += nrow)	{		rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;		nrow = (row + rowstoread > h ? h - row : rowstoread);		nrowsub = nrow;		if ((nrowsub%subsamplingver)!=0)			nrowsub+=subsamplingver-nrowsub%subsamplingver;		if (_TIFFReadEncodedStripAndAllocBuffer(tif,		    TIFFComputeStrip(tif,row+img->row_offset, 0),		    (void**)(&buf),                    maxstripsize,		    ((row + img->row_offset)%rowsperstrip + nrowsub) * scanline)==(tmsize_t)(-1)		    && (buf == NULL || img->stoponerr))		{			ret = 0;			break;		}		pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel);		(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, buf + pos);		y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);	}	if (flip & FLIP_HORIZONTALLY) {		uint32 line;		for (line = 0; line < h; line++) {			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}	}	_TIFFfree(buf);	return (ret);}
static int
gtStripContig(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)
gtStripContig
TIFFRGBAImage* img
TIFFRGBAImage
TIFFRGBAImage
* img
*
img
uint32* raster
uint32
uint32
* raster
*
raster
uint32 w
uint32
uint32
w
w
uint32 h
uint32
uint32
h
h
{	TIFF* tif = img->tif;	tileContigRoutine put = img->put.contig;	uint32 row, y, nrow, nrowsub, rowstoread;	tmsize_t pos;	unsigned char* buf = NULL;	uint32 rowsperstrip;	uint16 subsamplinghor,subsamplingver;	uint32 imagewidth = img->width;	tmsize_t scanline;	int32 fromskew, toskew;	int ret = 1, flip;        tmsize_t maxstripsize;	TIFFGetFieldDefaulted(tif, TIFFTAG_YCBCRSUBSAMPLING, &subsamplinghor, &subsamplingver);	if( subsamplingver == 0 ) {		TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Invalid vertical YCbCr subsampling");		return (0);	}		maxstripsize = TIFFStripSize(tif);	flip = setorientation(img);	if (flip & FLIP_VERTICALLY) {		y = h - 1;		toskew = -(int32)(w + w);	} else {		y = 0;		toskew = -(int32)(w - w);	}	TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip);	scanline = TIFFScanlineSize(tif);	fromskew = (w < imagewidth ? imagewidth - w : 0);	for (row = 0; row < h; row += nrow)	{		rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;		nrow = (row + rowstoread > h ? h - row : rowstoread);		nrowsub = nrow;		if ((nrowsub%subsamplingver)!=0)			nrowsub+=subsamplingver-nrowsub%subsamplingver;		if (_TIFFReadEncodedStripAndAllocBuffer(tif,		    TIFFComputeStrip(tif,row+img->row_offset, 0),		    (void**)(&buf),                    maxstripsize,		    ((row + img->row_offset)%rowsperstrip + nrowsub) * scanline)==(tmsize_t)(-1)		    && (buf == NULL || img->stoponerr))		{			ret = 0;			break;		}		pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel);		(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, buf + pos);		y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);	}	if (flip & FLIP_HORIZONTALLY) {		uint32 line;		for (line = 0; line < h; line++) {			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}	}	_TIFFfree(buf);	return (ret);}
TIFF* tif = img->tif;
TIFF* tif = img->tif;
TIFF
TIFF
* tif = img->tif
*
tif
= img->tif
img->tif
img
img
tif
tileContigRoutine put = img->put.contig;
tileContigRoutine put = img->put.contig;
tileContigRoutine
tileContigRoutine
put = img->put.contig
put
= img->put.contig
img->put.contig
img->put
img
img
put
contig
uint32 row, y, nrow, nrowsub, rowstoread;
uint32 row, y, nrow, nrowsub, rowstoread;
uint32
uint32
row
row
y
y
nrow
nrow
nrowsub
nrowsub
rowstoread
rowstoread
tmsize_t pos;
tmsize_t pos;
tmsize_t
tmsize_t
pos
pos
unsigned char* buf = NULL;
unsigned char* buf = NULL;
unsigned char
* buf = NULL
*
buf
= NULL
NULL
NULL
uint32 rowsperstrip;
uint32 rowsperstrip;
uint32
uint32
rowsperstrip
rowsperstrip
uint16 subsamplinghor,subsamplingver;
uint16 subsamplinghor,subsamplingver;
uint16
uint16
subsamplinghor
subsamplinghor
subsamplingver
subsamplingver
uint32 imagewidth = img->width;
uint32 imagewidth = img->width;
uint32
uint32
imagewidth = img->width
imagewidth
= img->width
img->width
img
img
width
tmsize_t scanline;
tmsize_t scanline;
tmsize_t
tmsize_t
scanline
scanline
int32 fromskew, toskew;
int32 fromskew, toskew;
int32
int32
fromskew
fromskew
toskew
toskew
int ret = 1, flip;
int ret = 1, flip;
int
ret = 1
ret
= 1
1
flip
flip
tmsize_t maxstripsize;
tmsize_t maxstripsize;
tmsize_t
tmsize_t
maxstripsize
maxstripsize
TIFFGetFieldDefaulted(tif, TIFFTAG_YCBCRSUBSAMPLING, &subsamplinghor, &subsamplingver);
TIFFGetFieldDefaulted(tif, TIFFTAG_YCBCRSUBSAMPLING, &subsamplinghor, &subsamplingver)
TIFFGetFieldDefaulted
TIFFGetFieldDefaulted
tif
tif
TIFFTAG_YCBCRSUBSAMPLING
TIFFTAG_YCBCRSUBSAMPLING
&subsamplinghor
subsamplinghor
subsamplinghor
&subsamplingver
subsamplingver
subsamplingver
if( subsamplingver == 0 ) {		TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Invalid vertical YCbCr subsampling");		return (0);	}
subsamplingver == 0
subsamplingver
subsamplingver
0
{		TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Invalid vertical YCbCr subsampling");		return (0);	}
TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Invalid vertical YCbCr subsampling");
TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), "Invalid vertical YCbCr subsampling")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
TIFFFileName(tif)
TIFFFileName
TIFFFileName
tif
tif
"Invalid vertical YCbCr subsampling"
return (0);
(0)
0
maxstripsize = TIFFStripSize(tif);
maxstripsize = TIFFStripSize(tif)
maxstripsize
maxstripsize
TIFFStripSize(tif)
TIFFStripSize
TIFFStripSize
tif
tif
flip = setorientation(img);
flip = setorientation(img)
flip
flip
setorientation(img)
setorientation
setorientation
img
img
if (flip & FLIP_VERTICALLY) {		y = h - 1;		toskew = -(int32)(w + w);	} else {		y = 0;		toskew = -(int32)(w - w);	}
flip & FLIP_VERTICALLY
flip
flip
FLIP_VERTICALLY
FLIP_VERTICALLY
{		y = h - 1;		toskew = -(int32)(w + w);	}
y = h - 1;
y = h - 1
y
y
h - 1
h
h
1
toskew = -(int32)(w + w);
toskew = -(int32)(w + w)
toskew
toskew
-(int32)(w + w)
(int32)(w + w)
(int32)
int32
int32
w + w
w
w
w
w
{		y = 0;		toskew = -(int32)(w - w);	}
y = 0;
y = 0
y
y
0
toskew = -(int32)(w - w);
toskew = -(int32)(w - w)
toskew
toskew
-(int32)(w - w)
(int32)(w - w)
(int32)
int32
int32
w - w
w
w
w
w
TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip);
TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip)
TIFFGetFieldDefaulted
TIFFGetFieldDefaulted
tif
tif
TIFFTAG_ROWSPERSTRIP
TIFFTAG_ROWSPERSTRIP
&rowsperstrip
rowsperstrip
rowsperstrip
scanline = TIFFScanlineSize(tif);
scanline = TIFFScanlineSize(tif)
scanline
scanline
TIFFScanlineSize(tif)
TIFFScanlineSize
TIFFScanlineSize
tif
tif
fromskew = (w < imagewidth ? imagewidth - w : 0);
fromskew = (w < imagewidth ? imagewidth - w : 0)
fromskew
fromskew
(w < imagewidth ? imagewidth - w : 0)
w < imagewidth ? imagewidth - w : 0
w < imagewidth
w
w
imagewidth
imagewidth
imagewidth - w
imagewidth
imagewidth
w
w
0
for (row = 0; row < h; row += nrow)	{		rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;		nrow = (row + rowstoread > h ? h - row : rowstoread);		nrowsub = nrow;		if ((nrowsub%subsamplingver)!=0)			nrowsub+=subsamplingver-nrowsub%subsamplingver;		if (_TIFFReadEncodedStripAndAllocBuffer(tif,		    TIFFComputeStrip(tif,row+img->row_offset, 0),		    (void**)(&buf),                    maxstripsize,		    ((row + img->row_offset)%rowsperstrip + nrowsub) * scanline)==(tmsize_t)(-1)		    && (buf == NULL || img->stoponerr))		{			ret = 0;			break;		}		pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel);		(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, buf + pos);		y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);	}
row = 0;
row = 0
row
row
0
row < h
row
row
h
h
row += nrow
row
row
nrow
nrow
{		rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;		nrow = (row + rowstoread > h ? h - row : rowstoread);		nrowsub = nrow;		if ((nrowsub%subsamplingver)!=0)			nrowsub+=subsamplingver-nrowsub%subsamplingver;		if (_TIFFReadEncodedStripAndAllocBuffer(tif,		    TIFFComputeStrip(tif,row+img->row_offset, 0),		    (void**)(&buf),                    maxstripsize,		    ((row + img->row_offset)%rowsperstrip + nrowsub) * scanline)==(tmsize_t)(-1)		    && (buf == NULL || img->stoponerr))		{			ret = 0;			break;		}		pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel);		(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, buf + pos);		y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);	}
rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip;
rowstoread = rowsperstrip - (row + img->row_offset) % rowsperstrip
rowstoread
rowstoread
rowsperstrip - (row + img->row_offset) % rowsperstrip
rowsperstrip
rowsperstrip
(row + img->row_offset) % rowsperstrip
(row + img->row_offset)
row + img->row_offset
row
row
img->row_offset
img
img
row_offset
rowsperstrip
rowsperstrip
nrow = (row + rowstoread > h ? h - row : rowstoread);
nrow = (row + rowstoread > h ? h - row : rowstoread)
nrow
nrow
(row + rowstoread > h ? h - row : rowstoread)
row + rowstoread > h ? h - row : rowstoread
row + rowstoread > h
row + rowstoread
row
row
rowstoread
rowstoread
h
h
h - row
h
h
row
row
rowstoread
rowstoread
nrowsub = nrow;
nrowsub = nrow
nrowsub
nrowsub
nrow
nrow
if ((nrowsub%subsamplingver)!=0)			nrowsub+=subsamplingver-nrowsub%subsamplingver;
(nrowsub%subsamplingver)!=0
(nrowsub%subsamplingver)
nrowsub%subsamplingver
nrowsub
nrowsub
subsamplingver
subsamplingver
0
nrowsub+=subsamplingver-nrowsub%subsamplingver;
nrowsub+=subsamplingver-nrowsub%subsamplingver
nrowsub
nrowsub
subsamplingver-nrowsub%subsamplingver
subsamplingver
subsamplingver
nrowsub%subsamplingver
nrowsub
nrowsub
subsamplingver
subsamplingver
if (_TIFFReadEncodedStripAndAllocBuffer(tif,		    TIFFComputeStrip(tif,row+img->row_offset, 0),		    (void**)(&buf),                    maxstripsize,		    ((row + img->row_offset)%rowsperstrip + nrowsub) * scanline)==(tmsize_t)(-1)		    && (buf == NULL || img->stoponerr))		{			ret = 0;			break;		}
_TIFFReadEncodedStripAndAllocBuffer(tif,		    TIFFComputeStrip(tif,row+img->row_offset, 0),		    (void**)(&buf),                    maxstripsize,		    ((row + img->row_offset)%rowsperstrip + nrowsub) * scanline)==(tmsize_t)(-1)		    && (buf == NULL || img->stoponerr)
_TIFFReadEncodedStripAndAllocBuffer(tif,		    TIFFComputeStrip(tif,row+img->row_offset, 0),		    (void**)(&buf),                    maxstripsize,		    ((row + img->row_offset)%rowsperstrip + nrowsub) * scanline)==(tmsize_t)(-1)
_TIFFReadEncodedStripAndAllocBuffer(tif,		    TIFFComputeStrip(tif,row+img->row_offset, 0),		    (void**)(&buf),                    maxstripsize,		    ((row + img->row_offset)%rowsperstrip + nrowsub) * scanline)
_TIFFReadEncodedStripAndAllocBuffer
_TIFFReadEncodedStripAndAllocBuffer
tif
tif
TIFFComputeStrip(tif,row+img->row_offset, 0)
TIFFComputeStrip
TIFFComputeStrip
tif
tif
row+img->row_offset
row
row
img->row_offset
img
img
row_offset
0
(void**)(&buf)
void**
void
**
*
*
(&buf)
&buf
buf
buf
maxstripsize
maxstripsize
((row + img->row_offset)%rowsperstrip + nrowsub) * scanline
((row + img->row_offset)%rowsperstrip + nrowsub)
(row + img->row_offset)%rowsperstrip + nrowsub
(row + img->row_offset)%rowsperstrip
(row + img->row_offset)
row + img->row_offset
row
row
img->row_offset
img
img
row_offset
rowsperstrip
rowsperstrip
nrowsub
nrowsub
scanline
scanline
(tmsize_t)(-1)
(tmsize_t)
tmsize_t
tmsize_t
-1
1
(buf == NULL || img->stoponerr)
buf == NULL || img->stoponerr
buf == NULL
buf
buf
NULL
NULL
img->stoponerr
img
img
stoponerr
{			ret = 0;			break;		}
ret = 0;
ret = 0
ret
ret
0
break;
pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel);
pos = ((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel)
pos
pos
((row + img->row_offset) % rowsperstrip) * scanline + \			((tmsize_t) img->col_offset * img->samplesperpixel)
((row + img->row_offset) % rowsperstrip) * scanline
((row + img->row_offset) % rowsperstrip)
(row + img->row_offset) % rowsperstrip
(row + img->row_offset)
row + img->row_offset
row
row
img->row_offset
img
img
row_offset
rowsperstrip
rowsperstrip
scanline
scanline
((tmsize_t) img->col_offset * img->samplesperpixel)
(tmsize_t) img->col_offset * img->samplesperpixel
(tmsize_t) img->col_offset
tmsize_t
tmsize_t
tmsize_t

img->col_offset
img
img
col_offset
img->samplesperpixel
img
img
samplesperpixel
(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, buf + pos);
(*put)(img, raster+y*w, 0, y, w, nrow, fromskew, toskew, buf + pos)
(*put)
*put
put
put
img
img
raster+y*w
raster
raster
y*w
y
y
w
w
0
y
y
w
w
nrow
nrow
fromskew
fromskew
toskew
toskew
buf + pos
buf
buf
pos
pos
y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow);
y += ((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow)
y
y
((flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow)
(flip & FLIP_VERTICALLY) ? -(int32) nrow : (int32) nrow
(flip & FLIP_VERTICALLY)
flip & FLIP_VERTICALLY
flip
flip
FLIP_VERTICALLY
FLIP_VERTICALLY
-(int32) nrow
(int32) nrow
int32
int32
int32

nrow
nrow
(int32) nrow
int32
int32
int32

nrow
nrow
if (flip & FLIP_HORIZONTALLY) {		uint32 line;		for (line = 0; line < h; line++) {			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}	}
flip & FLIP_HORIZONTALLY
flip
flip
FLIP_HORIZONTALLY
FLIP_HORIZONTALLY
{		uint32 line;		for (line = 0; line < h; line++) {			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}	}
uint32 line;
uint32 line;
uint32
uint32
line
line
for (line = 0; line < h; line++) {			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}
line = 0;
line = 0
line
line
0
line < h
line
line
h
h
line++
line
line
{			uint32 *left = raster + (line * w);			uint32 *right = left + w - 1;			while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}		}
uint32 *left = raster + (line * w);
uint32 *left = raster + (line * w);
uint32
uint32
*left = raster + (line * w)
*
left
= raster + (line * w)
raster + (line * w)
raster
raster
(line * w)
line * w
line
line
w
w
uint32 *right = left + w - 1;
uint32 *right = left + w - 1;
uint32
uint32
*right = left + w - 1
*
right
= left + w - 1
left + w - 1
left + w
left
left
w
w
1
while ( left < right ) {				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}
left < right
left
left
right
right
{				uint32 temp = *left;				*left = *right;				*right = temp;				left++;				right--;			}
uint32 temp = *left;
uint32 temp = *left;
uint32
uint32
temp = *left
temp
= *left
*left
left
left
*left = *right;
*left = *right
*left
left
left
*right
right
right
*right = temp;
*right = temp
*right
right
right
temp
temp
left++;
left++
left
left
right--;
right--
right
right
_TIFFfree(buf);
_TIFFfree(buf)
_TIFFfree
_TIFFfree
buf
buf
return (ret);
(ret)
ret
ret
-----joern-----
(169,16,0)
(66,60,0)
(119,227,0)
(152,304,0)
(34,253,0)
(246,91,0)
(246,97,0)
(143,72,0)
(78,288,0)
(230,58,0)
(59,273,0)
(246,292,0)
(257,95,0)
(1,16,0)
(318,17,0)
(9,10,0)
(250,203,0)
(161,102,0)
(172,226,0)
(53,113,0)
(214,220,0)
(46,273,0)
(0,226,0)
(128,205,0)
(322,231,0)
(314,1,0)
(69,287,0)
(115,132,0)
(55,134,0)
(84,35,0)
(5,287,0)
(178,226,0)
(122,1,0)
(207,207,0)
(268,99,0)
(72,143,0)
(6,226,0)
(13,60,0)
(1,34,0)
(99,72,0)
(119,308,0)
(98,267,0)
(158,190,0)
(262,303,0)
(126,299,0)
(120,226,0)
(35,158,0)
(132,115,0)
(287,1,0)
(0,307,0)
(313,111,0)
(185,39,0)
(278,17,0)
(138,60,0)
(130,226,0)
(277,0,0)
(17,278,0)
(16,278,0)
(11,166,0)
(19,235,0)
(115,274,0)
(197,133,0)
(175,241,0)
(64,78,0)
(277,4,0)
(1,26,0)
(201,95,0)
(245,138,0)
(159,126,0)
(133,197,0)
(269,108,0)
(150,235,0)
(148,264,0)
(124,204,0)
(70,267,0)
(278,61,0)
(303,16,0)
(100,76,0)
(259,41,0)
(146,15,0)
(7,300,0)
(47,277,0)
(170,329,0)
(69,297,0)
(26,4,0)
(106,226,0)
(232,150,0)
(132,12,0)
(207,213,0)
(102,76,0)
(262,148,0)
(164,276,0)
(201,235,0)
(246,172,0)
(138,72,0)
(238,226,0)
(20,311,0)
(137,79,0)
(300,329,0)
(65,226,0)
(181,60,0)
(184,226,0)
(222,128,0)
(203,250,0)
(27,133,0)
(111,135,0)
(243,73,0)
(1,132,0)
(217,201,0)
(167,227,0)
(68,192,0)
(215,91,0)
(271,157,0)
(143,300,0)
(4,277,0)
(42,226,0)
(203,111,0)
(304,92,0)
(191,20,0)
(133,27,0)
(212,244,0)
(25,235,0)
(61,92,0)
(149,61,0)
(10,297,0)
(98,183,0)
(281,307,0)
(228,45,0)
(96,329,0)
(198,265,0)
(48,269,0)
(134,175,0)
(85,308,0)
(121,1,0)
(189,100,0)
(321,213,0)
(4,80,0)
(219,137,0)
(53,226,0)
(246,267,0)
(110,17,0)
(204,299,0)
(40,90,0)
(240,53,0)
(142,297,0)
(221,111,0)
(71,303,0)
(236,142,0)
(304,303,0)
(123,226,0)
(206,268,0)
(213,12,0)
(287,69,0)
(300,143,0)
(129,316,0)
(143,264,0)
(17,303,0)
(39,234,0)
(29,300,0)
(135,329,0)
(277,297,0)
(150,126,0)
(227,119,0)
(1,329,0)
(323,226,0)
(85,303,0)
(187,303,0)
(247,123,0)
(286,29,0)
(102,24,0)
(264,143,0)
(86,303,0)
(181,205,0)
(135,16,0)
(17,157,0)
(30,134,0)
(29,1,0)
(234,226,0)
(326,308,0)
(251,34,0)
(63,205,0)
(20,254,0)
(4,26,0)
(199,226,0)
(296,181,0)
(327,69,0)
(188,226,0)
(27,34,0)
(256,274,0)
(29,234,0)
(69,213,0)
(272,205,0)
(270,13,0)
(82,226,0)
(127,241,0)
(325,293,0)
(246,205,0)
(252,13,0)
(172,90,0)
(166,60,0)
(62,80,0)
(248,45,0)
(205,226,0)
(114,288,0)
(56,29,0)
(50,69,0)
(263,226,0)
(89,95,0)
(155,99,0)
(165,128,0)
(269,157,0)
(293,92,0)
(131,1,0)
(312,26,0)
(207,311,0)
(37,169,0)
(85,157,0)
(193,226,0)
(13,262,0)
(103,16,0)
(311,20,0)
(97,205,0)
(239,298,0)
(154,108,0)
(266,293,0)
(137,16,0)
(282,238,0)
(86,250,0)
(238,234,0)
(284,14,0)
(192,288,0)
(134,158,0)
(204,175,0)
(162,116,0)
(301,241,0)
(289,226,0)
(11,73,0)
(83,307,0)
(16,329,0)
(169,37,0)
(218,58,0)
(32,246,0)
(28,108,0)
(261,304,0)
(21,157,0)
(196,78,0)
(320,220,0)
(194,116,0)
(220,221,0)
(79,137,0)
(90,172,0)
(36,264,0)
(186,86,0)
(291,186,0)
(101,11,0)
(205,181,0)
(255,97,0)
(209,276,0)
(72,99,0)
(75,268,0)
(145,226,0)
(148,262,0)
(311,37,0)
(80,0,0)
(189,146,0)
(86,157,0)
(41,254,0)
(229,105,0)
(141,66,0)
(279,213,0)
(203,135,0)
(169,328,0)
(310,60,0)
(125,203,0)
(66,230,0)
(278,16,0)
(45,235,0)
(136,226,0)
(1,265,0)
(99,155,0)
(111,221,0)
(307,60,0)
(202,226,0)
(30,299,0)
(166,11,0)
(230,70,0)
(90,205,0)
(224,169,0)
(264,148,0)
(308,329,0)
(8,277,0)
(179,234,0)
(31,1,0)
(225,78,0)
(69,265,0)
(85,61,0)
(264,94,0)
(254,310,0)
(116,97,0)
(45,175,0)
(267,98,0)
(113,53,0)
(58,234,0)
(292,93,0)
(151,250,0)
(156,85,0)
(305,272,0)
(180,226,0)
(317,196,0)
(190,126,0)
(274,115,0)
(116,194,0)
(283,226,0)
(262,13,0)
(144,135,0)
(194,60,0)
(91,94,0)
(298,205,0)
(276,254,0)
(292,246,0)
(158,299,0)
(295,0,0)
(61,278,0)
(268,60,0)
(38,119,0)
(91,203,0)
(10,274,0)
(153,146,0)
(207,329,0)
(260,30,0)
(107,100,0)
(163,175,0)
(308,119,0)
(211,142,0)
(102,272,0)
(19,299,0)
(287,174,0)
(306,41,0)
(140,166,0)
(108,60,0)
(242,186,0)
(74,15,0)
(278,308,0)
(311,137,0)
(1,207,0)
(220,135,0)
(221,220,0)
(72,138,0)
(78,297,0)
(328,169,0)
(97,246,0)
(67,128,0)
(17,92,0)
(94,298,0)
(86,186,0)
(200,98,0)
(316,135,0)
(316,231,0)
(18,135,0)
(231,316,0)
(190,235,0)
(307,0,0)
(95,201,0)
(265,253,0)
(33,207,0)
(196,175,0)
(133,142,0)
(98,200,0)
(51,148,0)
(285,20,0)
(310,254,0)
(294,310,0)
(293,265,0)
(267,246,0)
(88,226,0)
(230,66,0)
(1,287,0)
(97,116,0)
(58,230,0)
(262,157,0)
(23,132,0)
(319,58,0)
(22,278,0)
(118,114,0)
(244,53,0)
(269,227,0)
(175,196,0)
(315,166,0)
(250,86,0)
(52,24,0)
(290,1,0)
(53,205,0)
(61,85,0)
(57,1,0)
(267,70,0)
(303,157,0)
(99,268,0)
(272,102,0)
(216,138,0)
(298,94,0)
(104,172,0)
(112,241,0)
(210,221,0)
(137,311,0)
(302,200,0)
(235,201,0)
(108,269,0)
(304,157,0)
(91,246,0)
(24,102,0)
(292,39,0)
(37,311,0)
(26,226,0)
(34,27,0)
(2,97,0)
(227,269,0)
(146,226,0)
(190,158,0)
(81,10,0)
(80,297,0)
(94,226,0)
(203,91,0)
(73,11,0)
(233,14,0)
(324,181,0)
(77,123,0)
(128,165,0)
(24,205,0)
(70,230,0)
(117,24,0)
(1,213,0)
(116,157,0)
(146,123,0)
(93,292,0)
(43,226,0)
(87,288,0)
(80,4,0)
(207,265,0)
(275,299,0)
(54,53,0)
(53,244,0)
(173,80,0)
(258,94,0)
(15,105,0)
(182,226,0)
(201,175,0)
(168,85,0)
(147,316,0)
(139,190,0)
(177,192,0)
(142,133,0)
(235,241,0)
(116,303,0)
(1,29,0)
(160,19,0)
(109,86,0)
(274,256,0)
(186,60,0)
(192,92,0)
(35,175,0)
(195,113,0)
(78,196,0)
(39,292,0)
(196,174,0)
(208,66,0)
(249,194,0)
(69,207,0)
(49,246,0)
(265,293,0)
(274,10,0)
(311,207,0)
(237,165,0)
(176,254,0)
(280,234,0)
(3,4,0)
(44,194,0)
(171,15,0)
(183,98,0)
(1,297,0)
(269,303,0)
(309,288,0)
(95,297,0)
(126,30,0)
(73,226,0)
(303,303,0)
(1,60,0)
(128,226,0)
(134,30,0)
(223,262,0)
(254,226,0)
(304,92,1)
(53,244,1)
(102,161,1)
(103,308,1)
(264,94,1)
(39,185,1)
(316,135,1)
(218,267,1)
(61,85,1)
(306,259,1)
(259,254,1)
(185,97,1)
(78,297,1)
(164,304,1)
(267,246,1)
(13,270,1)
(17,157,1)
(230,58,1)
(7,70,1)
(139,35,1)
(258,128,1)
(141,58,1)
(13,60,1)
(229,15,1)
(284,53,1)
(305,24,1)
(246,172,1)
(286,121,1)
(45,248,1)
(68,177,1)
(111,221,1)
(179,280,1)
(240,123,1)
(28,154,1)
(203,250,1)
(189,100,1)
(228,19,1)
(39,234,1)
(292,93,1)
(147,135,1)
(231,322,1)
(281,83,1)
(84,30,1)
(255,32,1)
(157,21,1)
(223,7,1)
(47,8,1)
(110,318,1)
(252,223,1)
(203,135,1)
(274,10,1)
(1,213,1)
(204,175,1)
(300,143,1)
(245,99,1)
(237,222,1)
(137,16,1)
(86,157,1)
(307,60,1)
(262,157,1)
(86,303,1)
(69,207,1)
(215,203,1)
(293,92,1)
(142,211,1)
(29,300,1)
(186,242,1)
(97,116,1)
(69,213,1)
(154,48,1)
(31,57,1)
(158,190,1)
(169,224,1)
(278,22,1)
(85,308,1)
(32,111,1)
(97,205,1)
(0,307,1)
(250,86,1)
(17,303,1)
(26,4,1)
(51,262,1)
(163,192,1)
(211,236,1)
(20,191,1)
(69,327,1)
(292,39,1)
(290,314,1)
(114,288,1)
(48,38,1)
(91,203,1)
(324,296,1)
(191,285,1)
(227,167,1)
(67,132,1)
(200,302,1)
(54,240,1)
(277,0,1)
(313,231,1)
(58,234,1)
(80,62,1)
(123,247,1)
(326,304,1)
(278,17,1)
(30,134,1)
(246,97,1)
(116,157,1)
(260,45,1)
(125,250,1)
(132,115,1)
(298,239,1)
(128,205,1)
(57,131,1)
(194,44,1)
(56,286,1)
(307,281,1)
(138,60,1)
(116,303,1)
(238,282,1)
(304,303,1)
(99,155,1)
(80,297,1)
(80,0,1)
(272,305,1)
(254,310,1)
(276,254,1)
(89,257,1)
(146,123,1)
(35,175,1)
(265,293,1)
(159,150,1)
(64,317,1)
(267,98,1)
(143,72,1)
(231,316,1)
(315,140,1)
(38,326,1)
(246,205,1)
(71,187,1)
(318,61,1)
(279,321,1)
(137,219,1)
(266,325,1)
(53,205,1)
(261,157,1)
(276,209,1)
(124,126,1)
(196,174,1)
(107,102,1)
(327,50,1)
(101,166,1)
(316,129,1)
(271,26,1)
(24,205,1)
(243,205,1)
(138,216,1)
(314,287,1)
(148,262,1)
(1,265,1)
(99,268,1)
(249,162,1)
(278,61,1)
(1,26,1)
(181,324,1)
(192,92,1)
(317,163,1)
(310,294,1)
(66,208,1)
(277,297,1)
(156,103,1)
(232,158,1)
(303,71,1)
(10,81,1)
(108,60,1)
(164,229,1)
(142,297,1)
(311,37,1)
(4,3,1)
(1,132,1)
(295,234,1)
(75,206,1)
(207,311,1)
(1,297,1)
(97,2,1)
(146,153,1)
(296,63,1)
(77,0,1)
(303,303,1)
(49,292,1)
(294,176,1)
(304,157,1)
(303,157,1)
(309,276,1)
(204,124,1)
(233,284,1)
(25,175,1)
(167,269,1)
(293,266,1)
(192,288,1)
(104,14,1)
(117,14,1)
(321,41,1)
(18,144,1)
(4,277,1)
(32,231,1)
(62,173,1)
(52,117,1)
(280,73,1)
(1,16,1)
(304,152,1)
(210,313,1)
(135,18,1)
(74,70,1)
(285,33,1)
(67,34,1)
(269,108,1)
(137,79,1)
(4,80,1)
(176,172,1)
(119,227,1)
(236,251,1)
(208,141,1)
(61,92,1)
(102,24,1)
(282,276,1)
(181,60,1)
(5,122,1)
(126,30,1)
(169,328,1)
(235,201,1)
(1,29,1)
(151,86,1)
(173,277,1)
(143,264,1)
(53,113,1)
(70,267,1)
(70,230,1)
(83,295,1)
(209,164,1)
(291,109,1)
(41,254,1)
(312,94,1)
(247,77,1)
(257,217,1)
(135,16,1)
(148,51,1)
(94,298,1)
(91,94,1)
(189,146,1)
(72,138,1)
(1,287,1)
(166,315,1)
(207,265,1)
(150,232,1)
(73,11,1)
(98,183,1)
(58,319,1)
(109,49,1)
(133,142,1)
(264,36,1)
(244,212,1)
(20,254,1)
(274,256,1)
(29,234,1)
(207,207,1)
(2,116,1)
(113,195,1)
(310,60,1)
(35,84,1)
(287,174,1)
(85,303,1)
(225,64,1)
(72,99,1)
(262,13,1)
(149,85,1)
(11,166,1)
(118,45,1)
(134,55,1)
(134,175,1)
(23,213,1)
(230,66,1)
(308,119,1)
(195,54,1)
(206,264,1)
(78,225,1)
(102,272,1)
(160,204,1)
(203,125,1)
(192,68,1)
(16,278,1)
(44,249,1)
(37,169,1)
(264,148,1)
(278,308,1)
(134,158,1)
(248,228,1)
(69,297,1)
(190,139,1)
(55,260,1)
(234,179,1)
(212,113,1)
(261,303,1)
(221,220,1)
(198,41,1)
(15,171,1)
(222,67,1)
(9,23,1)
(250,151,1)
(33,1,1)
(239,258,1)
(277,47,1)
(17,110,1)
(177,288,1)
(40,104,1)
(98,200,1)
(302,246,1)
(116,194,1)
(190,126,1)
(262,303,1)
(177,114,1)
(150,235,1)
(111,135,1)
(165,237,1)
(153,238,1)
(168,156,1)
(91,215,1)
(66,60,1)
(272,205,1)
(122,300,1)
(288,87,1)
(187,207,1)
(45,235,1)
(61,149,1)
(269,157,1)
(227,269,1)
(24,52,1)
(205,181,1)
(90,205,1)
(311,137,1)
(10,297,1)
(85,157,1)
(214,210,1)
(50,5,1)
(1,207,1)
(19,235,1)
(11,101,1)
(17,92,1)
(29,56,1)
(194,60,1)
(269,303,1)
(19,160,1)
(171,74,1)
(220,320,1)
(8,312,1)
(217,25,1)
(90,40,1)
(203,111,1)
(100,107,1)
(41,306,1)
(251,265,1)
(175,196,1)
(128,165,1)
(1,34,1)
(213,279,1)
(298,205,1)
(287,69,1)
(95,297,1)
(131,290,1)
(27,133,1)
(133,197,1)
(303,16,1)
(190,235,1)
(166,60,1)
(242,291,1)
(238,234,1)
(85,168,1)
(219,20,1)
(270,252,1)
(69,265,1)
(86,186,1)
(319,218,1)
(169,16,1)
(201,95,1)
(220,135,1)
(201,175,1)
(322,316,1)
(21,271,1)
(325,198,1)
(95,89,1)
(1,60,1)
(81,9,1)
(282,192,1)
(216,245,1)
(228,235,1)
(172,90,1)
(108,28,1)
(311,20,1)
(207,213,1)
(144,16,1)
(152,261,1)
(3,277,1)
(140,243,1)
(121,31,1)
(161,272,1)
(22,61,1)
(224,20,1)
(87,309,1)
(320,214,1)
(268,75,1)
(268,60,1)
(146,15,1)
(126,159,1)
(246,91,1)
(78,288,1)
(162,255,1)
(129,147,1)
(45,175,1)
(14,233,1)
(196,78,1)
(34,27,1)
(186,60,1)
(114,118,1)
(36,148,1)
(115,274,1)
(246,292,1)
(15,70,2)
(172,14,2)
(227,269,2)
(238,14,2)
(246,205,2)
(250,304,2)
(39,304,2)
(62,277,2)
(80,0,2)
(71,70,2)
(277,297,2)
(90,205,2)
(272,14,2)
(35,175,2)
(250,86,2)
(215,304,2)
(194,304,2)
(262,13,2)
(110,61,2)
(279,41,2)
(167,304,2)
(61,92,2)
(1,60,2)
(8,14,2)
(313,231,2)
(207,213,2)
(119,227,2)
(99,155,2)
(267,304,2)
(207,311,2)
(98,304,2)
(116,157,2)
(126,45,2)
(5,70,2)
(286,70,2)
(217,192,2)
(128,205,2)
(99,70,2)
(23,41,2)
(19,235,2)
(304,303,2)
(228,192,2)
(176,14,2)
(292,304,2)
(126,30,2)
(31,70,2)
(268,60,2)
(306,14,2)
(81,41,2)
(192,92,2)
(232,45,2)
(270,70,2)
(132,41,2)
(33,70,2)
(235,192,2)
(320,231,2)
(307,60,2)
(190,126,2)
(259,14,2)
(269,108,2)
(94,298,2)
(45,45,2)
(86,157,2)
(293,92,2)
(187,70,2)
(85,303,2)
(72,138,2)
(151,304,2)
(30,134,2)
(221,220,2)
(213,41,2)
(128,165,2)
(266,41,2)
(78,288,2)
(268,70,2)
(194,60,2)
(261,70,2)
(16,304,2)
(19,45,2)
(262,157,2)
(207,207,2)
(325,41,2)
(124,45,2)
(52,14,2)
(311,137,2)
(264,70,2)
(276,14,2)
(72,99,2)
(133,142,2)
(303,303,2)
(218,267,2)
(288,276,2)
(128,14,2)
(196,192,2)
(287,69,2)
(216,70,2)
(304,14,2)
(265,293,2)
(172,90,2)
(3,277,2)
(229,70,2)
(1,297,2)
(137,79,2)
(97,205,2)
(207,265,2)
(27,41,2)
(74,70,2)
(69,70,2)
(224,20,2)
(100,14,2)
(196,174,2)
(230,58,2)
(242,304,2)
(72,70,2)
(201,95,2)
(230,267,2)
(311,20,2)
(141,58,2)
(122,70,2)
(134,175,2)
(304,70,2)
(87,276,2)
(73,11,2)
(177,192,2)
(173,277,2)
(169,20,2)
(303,16,2)
(103,304,2)
(118,192,2)
(97,304,2)
(94,14,2)
(13,70,2)
(208,58,2)
(35,45,2)
(200,304,2)
(152,14,2)
(85,304,2)
(192,276,2)
(146,123,2)
(114,192,2)
(1,132,2)
(45,192,2)
(258,14,2)
(10,297,2)
(131,70,2)
(95,192,2)
(292,39,2)
(185,304,2)
(319,267,2)
(1,265,2)
(220,231,2)
(48,304,2)
(312,14,2)
(207,70,2)
(260,45,2)
(32,304,2)
(308,304,2)
(287,174,2)
(222,14,2)
(302,304,2)
(293,41,2)
(316,135,2)
(108,60,2)
(117,14,2)
(142,41,2)
(29,300,2)
(68,192,2)
(205,181,2)
(30,45,2)
(111,135,2)
(29,234,2)
(214,231,2)
(4,14,2)
(206,70,2)
(69,297,2)
(169,16,2)
(246,172,2)
(252,70,2)
(139,45,2)
(201,192,2)
(135,304,2)
(135,16,2)
(272,205,2)
(138,70,2)
(111,221,2)
(4,80,2)
(27,133,2)
(11,166,2)
(278,17,2)
(95,297,2)
(221,231,2)
(85,308,2)
(50,70,2)
(147,304,2)
(28,304,2)
(9,41,2)
(231,316,2)
(45,235,2)
(91,203,2)
(149,304,2)
(119,304,2)
(269,303,2)
(1,16,2)
(4,277,2)
(80,297,2)
(10,41,2)
(161,14,2)
(282,14,2)
(98,183,2)
(1,26,2)
(235,201,2)
(80,277,2)
(70,304,2)
(211,41,2)
(190,235,2)
(1,34,2)
(47,14,2)
(91,94,2)
(1,207,2)
(41,14,2)
(311,70,2)
(1,29,2)
(238,234,2)
(133,41,2)
(40,14,2)
(90,14,2)
(99,268,2)
(18,304,2)
(166,60,2)
(267,246,2)
(143,70,2)
(91,304,2)
(56,70,2)
(129,304,2)
(17,61,2)
(21,14,2)
(177,276,2)
(37,169,2)
(164,14,2)
(156,304,2)
(143,72,2)
(78,297,2)
(61,85,2)
(290,70,2)
(262,70,2)
(246,97,2)
(1,213,2)
(49,304,2)
(26,14,2)
(311,37,2)
(34,27,2)
(305,14,2)
(58,267,2)
(191,70,2)
(314,70,2)
(201,175,2)
(277,0,2)
(34,41,2)
(114,288,2)
(158,45,2)
(153,14,2)
(227,304,2)
(277,14,2)
(109,304,2)
(57,70,2)
(13,60,2)
(157,14,2)
(152,70,2)
(291,304,2)
(86,303,2)
(69,213,2)
(237,14,2)
(70,230,2)
(107,14,2)
(322,304,2)
(219,20,2)
(204,45,2)
(246,91,2)
(225,192,2)
(53,205,2)
(204,175,2)
(53,113,2)
(102,272,2)
(158,190,2)
(86,186,2)
(26,4,2)
(298,14,2)
(287,70,2)
(285,70,2)
(294,14,2)
(132,115,2)
(190,45,2)
(230,66,2)
(220,135,2)
(265,41,2)
(70,267,2)
(245,70,2)
(186,304,2)
(116,303,2)
(192,288,2)
(58,234,2)
(148,262,2)
(61,304,2)
(17,303,2)
(186,60,2)
(278,61,2)
(162,304,2)
(22,61,2)
(257,192,2)
(160,45,2)
(143,264,2)
(45,175,2)
(17,92,2)
(169,328,2)
(300,143,2)
(115,274,2)
(20,70,2)
(278,308,2)
(189,100,2)
(236,41,2)
(66,60,2)
(168,304,2)
(17,157,2)
(116,194,2)
(41,254,2)
(203,111,2)
(7,70,2)
(53,244,2)
(309,276,2)
(142,297,2)
(68,276,2)
(146,14,2)
(246,292,2)
(24,14,2)
(154,304,2)
(326,304,2)
(146,15,2)
(292,93,2)
(264,94,2)
(102,24,2)
(159,45,2)
(150,235,2)
(248,45,2)
(66,58,2)
(310,14,2)
(67,14,2)
(261,14,2)
(116,304,2)
(134,158,2)
(69,207,2)
(269,157,2)
(274,10,2)
(203,135,2)
(104,14,2)
(318,61,2)
(165,14,2)
(38,304,2)
(231,304,2)
(196,78,2)
(97,116,2)
(269,304,2)
(98,200,2)
(1,70,2)
(303,70,2)
(0,307,2)
(304,92,2)
(203,250,2)
(181,60,2)
(29,70,2)
(276,254,2)
(55,45,2)
(198,41,2)
(144,304,2)
(125,304,2)
(163,192,2)
(121,70,2)
(278,304,2)
(203,304,2)
(138,60,2)
(89,192,2)
(64,192,2)
(2,304,2)
(75,70,2)
(223,70,2)
(304,157,2)
(133,197,2)
(298,205,2)
(175,196,2)
(108,304,2)
(274,41,2)
(86,304,2)
(115,41,2)
(16,278,2)
(69,265,2)
(274,256,2)
(209,14,2)
(249,304,2)
(210,231,2)
(20,254,2)
(148,70,2)
(102,14,2)
(171,70,2)
(264,148,2)
(85,157,2)
(189,146,2)
(175,192,2)
(37,20,2)
(255,304,2)
(192,192,2)
(303,157,2)
(327,70,2)
(316,304,2)
(310,60,2)
(248,192,2)
(24,205,2)
(308,119,2)
(44,304,2)
(1,287,2)
(271,14,2)
(51,70,2)
(246,304,2)
(134,45,2)
(254,14,2)
(254,310,2)
(137,16,2)
(111,231,2)
(317,192,2)
(251,41,2)
(39,234,2)
(300,70,2)
(267,98,2)
(321,41,2)
(239,14,2)
(25,192,2)
(36,70,2)
(137,20,2)
(228,45,2)
(262,303,2)
(78,192,2)
(84,45,2)
(150,45,2)
-----------------------------------
(0,imagewidth = img->width)
(1,(*put)
(2,0)
(3,0)
(4,w < imagewidth ? imagewidth - w : 0)
(5,raster)
(6,toskew)
(7,pos)
(8,w)
(9,w)
(10,w - w)
(11,img->put.contig)
(12,)
(13,img->row_offset)
(14,subsamplingver == 0)
(15,ret = 0)
(16,nrow = (row + rowstoread > h ? h - row : rowstoread)
(17,h - row)
(18,nrow)
(19,right--)
(20,flip & FLIP_VERTICALLY)
(21,0)
(22,rowstoread)
(23,toskew)
(24,tif->tif_clientdata)
(25,right)
(26,fromskew = (w < imagewidth ? imagewidth - w : 0)
(27,-(int32)
(28,row_offset)
(29,buf + pos)
(30,temp = *left)
(31,fromskew)
(32,tif)
(33,y)
(34,toskew = -(int32)
(35,*left)
(36,scanline)
(37,-(int32)
(38,rowsperstrip)
(39,&buf)
(40,tif)
(41,flip & FLIP_VERTICALLY)
(42,pos)
(43,y)
(44,row_offset)
(45,left < right)
(46,for (line = 0; line < h; line++)
(47,imagewidth)
(48,row)
(49,maxstripsize)
(50,y)
(51,rowsperstrip)
(52,tif_clientdata)
(53,TIFFGetFieldDefaulted(tif, TIFFTAG_YCBCRSUBSAMPLING, &subsamplinghor, &subsamplingver)
(54,TIFFTAG_YCBCRSUBSAMPLING)
(55,left)
(56,pos)
(57,nrow)
(58,buf == NULL)
(59,line)
(60,TIFFRGBAImage* img)
(61,row + rowstoread > h)
(62,w)
(63,tif)
(64,line)
(65,for (row = 0; row < h; row += nrow)
(66,img->stoponerr)
(67,tif)
(68,h)
(69,y*w)
(70,_TIFFReadEncodedStripAndAllocBuffer(tif,\n\\n\\t\\t    TIFFComputeStrip(tif,row+img->row_offset, 0)
(71,nrow)
(72,(tmsize_t)
(73,put = img->put.contig)
(74,ret)
(75,col_offset)
(76,)
(77,ret)
(78,line * w)
(79,int32)
(80,imagewidth - w)
(81,w)
(82,subsamplingver)
(83,img)
(84,left)
(85,row + rowstoread)
(86,row + img->row_offset)
(87,0)
(88,nrowsub)
(89,1)
(90,TIFFStripSize(tif)
(91,((row + img->row_offset)
(92,uint32 h)
(93,void**)
(94,scanline = TIFFScanlineSize(tif)
(95,w - 1)
(96,if ((nrowsub%subsamplingver)
(97,TIFFComputeStrip(tif,row+img->row_offset, 0)
(98,(tmsize_t)
(99,(tmsize_t)
(100,return (0)
(101,contig)
(102,TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif)
(103,nrow)
(104,maxstripsize)
(105,)
(106,subsamplinghor)
(107,0)
(108,img->row_offset)
(109,row)
(110,row)
(111,nrowsub+=subsamplingver-nrowsub%subsamplingver)
(112,while ( left < right )
(113,&subsamplinghor)
(114,line++)
(115,-(int32)
(116,row+img->row_offset)
(117,tif)
(118,line)
(119,rowsperstrip - (row + img->row_offset)
(120,tif)
(121,toskew)
(122,img)
(123,ret = 1)
(124,left)
(125,nrowsub)
(126,*right = temp)
(127,right)
(128,TIFFGetFieldDefaulted(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip)
(129,subsamplingver)
(130,nrow)
(131,w)
(132,toskew = -(int32)
(133,(int32)
(134,*left)
(135,nrowsub = nrow)
(136,fromskew)
(137,(int32)
(138,img->samplesperpixel)
(139,right)
(140,img)
(141,img)
(142,w + w)
(143,((row + img->row_offset)
(144,nrowsub)
(145,row)
(146,return (ret)
(147,nrowsub)
(148,(row + img->row_offset)
(149,h)
(150,*right)
(151,rowsperstrip)
(152,h)
(153,ret)
(154,img)
(155,tmsize_t)
(156,row)
(157,row = 0)
(158,*left = *right)
(159,temp)
(160,right)
(161,"Invalid vertical YCbCr subsampling")
(162,row)
(163,left)
(164,flip)
(165,&rowsperstrip)
(166,img->put)
(167,rowsperstrip)
(168,rowstoread)
(169,(int32)
(170,if (_TIFFReadEncodedStripAndAllocBuffer(tif,\n\\n\\t\\t    TIFFComputeStrip(tif,row+img->row_offset, 0)
(171,0)
(172,maxstripsize = TIFFStripSize(tif)
(173,imagewidth)
(174,uint32* raster)
(175,*left = raster + (line * w)
(176,flip)
(177,line)
(178,put)
(179,NULL)
(180,ret)
(181,img->tif)
(182,flip)
(183,tmsize_t)
(184,if (flip & FLIP_VERTICALLY)
(185,buf)
(186,img->row_offset)
(187,row)
(188,if( subsamplingver == 0 )
(189,RET)
(190,*right)
(191,FLIP_VERTICALLY)
(192,line < h)
(193,imagewidth)
(194,img->row_offset)
(195,subsamplinghor)
(196,raster + (line * w)
(197,int32)
(198,y)
(199,buf)
(200,-1)
(201,left + w - 1)
(202,if (flip & FLIP_HORIZONTALLY)
(203,(row + img->row_offset)
(204,left++)
(205,* tif = img->tif)
(206,img)
(207,y += ((flip & FLIP_VERTICALLY)
(208,stoponerr)
(209,FLIP_HORIZONTALLY)
(210,subsamplingver)
(211,w)
(212,subsamplingver)
(213,y = 0)
(214,nrowsub)
(215,scanline)
(216,samplesperpixel)
(217,left)
(218,buf)
(219,nrow)
(220,nrowsub%subsamplingver)
(221,subsamplingver-nrowsub%subsamplingver)
(222,TIFFTAG_ROWSPERSTRIP)
(223,row)
(224,nrow)
(225,w)
(226,)
(227,(row + img->row_offset)
(228,left)
(229,break;)
(230,buf == NULL || img->stoponerr)
(231,(nrowsub%subsamplingver)
(232,right)
(233,0)
(234,* buf = NULL)
(235,*right = left + w - 1)
(236,w)
(237,rowsperstrip)
(238,_TIFFfree(buf)
(239,tif)
(240,tif)
(241,)
(242,row_offset)
(243,put)
(244,&subsamplingver)
(245,img)
(246,_TIFFReadEncodedStripAndAllocBuffer(tif,\n\\n\\t\\t    TIFFComputeStrip(tif,row+img->row_offset, 0)
(247,1)
(248,right)
(249,img)
(250,(row + img->row_offset)
(251,toskew)
(252,img)
(253,)
(254,flip = setorientation(img)
(255,tif)
(256,int32)
(257,w)
(258,scanline)
(259,flip)
(260,temp)
(261,row)
(262,row + img->row_offset)
(263,maxstripsize)
(264,((row + img->row_offset)
(265,y = h - 1)
(266,1)
(267,_TIFFReadEncodedStripAndAllocBuffer(tif,\n\\n\\t\\t    TIFFComputeStrip(tif,row+img->row_offset, 0)
(268,img->col_offset)
(269,row + img->row_offset)
(270,row_offset)
(271,row)
(272,TIFFFileName(tif)
(273,)
(274,(int32)
(275,temp)
(276,flip & FLIP_HORIZONTALLY)
(277,w < imagewidth)
(278,row + rowstoread > h ? h - row : rowstoread)
(279,0)
(280,buf)
(281,width)
(282,buf)
(283,scanline)
(284,subsamplingver)
(285,flip)
(286,buf)
(287,raster+y*w)
(288,line = 0)
(289,rowstoread)
(290,y)
(291,img)
(292,(void**)
(293,h - 1)
(294,img)
(295,imagewidth)
(296,img)
(297,uint32 w)
(298,TIFFScanlineSize(tif)
(299,)
(300,pos = ((row + img->row_offset)
(301,left)
(302,1)
(303,row += nrow)
(304,row < h)
(305,tif)
(306,FLIP_VERTICALLY)
(307,img->width)
(308,rowstoread = rowsperstrip - (row + img->row_offset)
(309,line)
(310,setorientation(img)
(311,(flip & FLIP_VERTICALLY)
(312,fromskew)
(313,nrowsub)
(314,0)
(315,put)
(316,nrowsub%subsamplingver)
(317,raster)
(318,h)
(319,NULL)
(320,subsamplingver)
(321,y)
(322,0)
(323,rowsperstrip)
(324,tif)
(325,h)
(326,rowstoread)
(327,w)
(328,int32)
(329,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
