-----label-----
1
-----code-----
static int
LZWDecodeCompat(TIFF* tif, uint8* op0, tmsize_t occ0, uint16 s)
{
	static const char module[] = "LZWDecodeCompat";
	LZWCodecState *sp = DecoderState(tif);
	char *op = (char*) op0;
	long occ = (long) occ0;
	char *tp;
	unsigned char *bp;
	int code, nbits;
	long nextbits, nextdata, nbitsmask;
	code_t *codep, *free_entp, *maxcodep, *oldcodep;

	(void) s;
	assert(sp != NULL);

	/*
	  Fail if value does not fit in long.
	*/
	if ((tmsize_t) occ != occ0)
	        return (0);

	/*
	 * Restart interrupted output operation.
	 */
	if (sp->dec_restart) {
		long residue;

		codep = sp->dec_codep;
		residue = codep->length - sp->dec_restart;
		if (residue > occ) {
			/*
			 * Residue from previous decode is sufficient
			 * to satisfy decode request.  Skip to the
			 * start of the decoded string, place decoded
			 * values in the output buffer, and return.
			 */
			sp->dec_restart += occ;
			do {
				codep = codep->next;
			} while (--residue > occ);
			tp = op + occ;
			do {
				*--tp = codep->value;
				codep = codep->next;
			} while (--occ);
			return (1);
		}
		/*
		 * Residue satisfies only part of the decode request.
		 */
		op += residue;
		occ -= residue;
		tp = op;
		do {
			*--tp = codep->value;
			codep = codep->next;
		} while (--residue);
		sp->dec_restart = 0;
	}

	bp = (unsigned char *)tif->tif_rawcp;
#ifdef LZW_CHECKEOS
	sp->dec_bitsleft = (((uint64)tif->tif_rawcc) << 3);
#endif
	nbits = sp->lzw_nbits;
	nextdata = sp->lzw_nextdata;
	nextbits = sp->lzw_nextbits;
	nbitsmask = sp->dec_nbitsmask;
	oldcodep = sp->dec_oldcodep;
	free_entp = sp->dec_free_entp;
	maxcodep = sp->dec_maxcodep;

	while (occ > 0) {
		NextCode(tif, sp, bp, code, GetNextCodeCompat);
		if (code == CODE_EOI)
			break;
		if (code == CODE_CLEAR) {
			do {
				free_entp = sp->dec_codetab + CODE_FIRST;
				_TIFFmemset(free_entp, 0,
					    (CSIZE - CODE_FIRST) * sizeof (code_t));
				nbits = BITS_MIN;
				nbitsmask = MAXCODE(BITS_MIN);
				maxcodep = sp->dec_codetab + nbitsmask;
				NextCode(tif, sp, bp, code, GetNextCodeCompat);
			} while (code == CODE_CLEAR);	/* consecutive CODE_CLEAR codes */
			if (code == CODE_EOI)
				break;
			if (code > CODE_CLEAR) {
				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,
				"LZWDecode: Corrupted LZW table at scanline %d",
					     tif->tif_row);
				return (0);
			}
			*op++ = (char)code;
			occ--;
			oldcodep = sp->dec_codetab + code;
			continue;
		}
		codep = sp->dec_codetab + code;

		/*
		 * Add the new entry to the code table.
		 */
		if (free_entp < &sp->dec_codetab[0] ||
		    free_entp >= &sp->dec_codetab[CSIZE]) {
			TIFFErrorExt(tif->tif_clientdata, module,
			    "Corrupted LZW table at scanline %d", tif->tif_row);
			return (0);
		}

		free_entp->next = oldcodep;
		if (free_entp->next < &sp->dec_codetab[0] ||
		    free_entp->next >= &sp->dec_codetab[CSIZE]) {
			TIFFErrorExt(tif->tif_clientdata, module,
			    "Corrupted LZW table at scanline %d", tif->tif_row);
			return (0);
		}
		free_entp->firstchar = free_entp->next->firstchar;
		free_entp->length = free_entp->next->length+1;
		free_entp->value = (codep < free_entp) ?
		    codep->firstchar : free_entp->firstchar;
		if (++free_entp > maxcodep) {
			if (++nbits > BITS_MAX)		/* should not happen */
				nbits = BITS_MAX;
			nbitsmask = MAXCODE(nbits);
			maxcodep = sp->dec_codetab + nbitsmask;
		}
		oldcodep = codep;
		if (code >= 256) {
			/*
			 * Code maps to a string, copy string
			 * value to output (written in reverse).
			 */
			if(codep->length == 0) {
				TIFFErrorExt(tif->tif_clientdata, module,
				    "Wrong length of decoded "
				    "string: data probably corrupted at scanline %d",
				    tif->tif_row);
				return (0);
			}
			if (codep->length > occ) {
				/*
				 * String is too long for decode buffer,
				 * locate portion that will fit, copy to
				 * the decode buffer, and setup restart
				 * logic for the next decoding call.
				 */
				sp->dec_codep = codep;
				do {
					codep = codep->next;
				} while (codep->length > occ);
				sp->dec_restart = occ;
				tp = op + occ;
				do  {
					*--tp = codep->value;
					codep = codep->next;
				}  while (--occ);
				break;
			}
			assert(occ >= codep->length);
			op += codep->length;
			occ -= codep->length;
			tp = op;
			do {
				*--tp = codep->value;
			} while( (codep = codep->next) != NULL );
		} else {
			*op++ = (char)code;
			occ--;
		}
	}

	tif->tif_rawcc -= (tmsize_t)( (uint8*) bp - tif->tif_rawcp );
	tif->tif_rawcp = (uint8*) bp;
	sp->lzw_nbits = (unsigned short)nbits;
	sp->lzw_nextdata = nextdata;
	sp->lzw_nextbits = nextbits;
	sp->dec_nbitsmask = nbitsmask;
	sp->dec_oldcodep = oldcodep;
	sp->dec_free_entp = free_entp;
	sp->dec_maxcodep = maxcodep;

	if (occ > 0) {
#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))
		TIFFErrorExt(tif->tif_clientdata, module,
			"Not enough data at scanline %d (short %I64d bytes)",
			     tif->tif_row, (unsigned __int64) occ);
#else
		TIFFErrorExt(tif->tif_clientdata, module,
			"Not enough data at scanline %d (short %llu bytes)",
			     tif->tif_row, (unsigned long long) occ);
#endif
		return (0);
	}
	return (1);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
27,42
27,43
27,44
27,45
27,46
27,47
27,48
27,49
27,50
27,51
27,52
27,53
27,54
27,55
27,56
27,57
27,58
27,59
27,60
28,29
29,30
29,31
31,32
31,33
31,34
34,35
36,37
37,38
37,39
38,39
40,41
40,42
40,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
52,53
52,54
52,55
55,56
56,57
56,58
57,58
57,59
59,60
61,62
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
70,72
73,74
75,76
76,77
76,78
78,79
78,80
81,82
82,83
82,84
84,85
84,86
87,88
88,89
88,90
88,91
90,91
92,93
94,95
95,96
95,97
95,98
95,99
97,98
99,100
101,102
103,104
104,105
104,106
104,107
104,108
104,109
105,106
107,108
107,109
110,111
110,112
113,114
113,115
116,117
116,118
119,120
120,121
120,122
121,122
121,123
124,125
126,127
127,128
127,129
128,129
130,131
130,132
131,132
133,134
135,136
135,137
136,137
136,138
137,138
137,139
138,139
138,140
139,140
142,143
144,145
146,147
147,148
149,150
149,151
150,151
150,152
151,152
154,155
154,156
154,157
154,158
154,159
154,160
154,161
154,162
154,163
155,156
156,157
156,158
158,159
160,161
161,162
161,163
162,163
164,165
164,166
165,166
168,169
169,170
169,171
170,171
172,173
172,174
173,174
173,175
174,175
177,178
177,179
178,179
181,182
181,183
182,183
182,184
183,184
185,186
187,188
187,189
187,190
187,191
187,192
188,189
189,190
189,191
190,191
190,192
191,192
194,195
196,197
196,198
197,198
198,199
199,200
199,201
200,201
202,203
202,204
203,204
206,207
206,208
207,208
208,209
210,211
212,213
213,214
213,215
214,215
216,217
216,218
217,218
219,220
221,222
221,223
222,223
222,224
223,224
224,225
224,226
225,226
226,227
227,228
229,230
229,231
230,231
233,234
234,235
234,236
235,236
237,238
237,239
238,239
241,242
242,243
244,245
245,246
247,248
248,249
248,250
249,250
251,252
253,254
254,255
254,256
255,256
257,258
259,260
260,261
260,262
261,262
263,264
265,266
265,267
266,267
266,268
267,268
268,269
268,270
269,270
270,271
271,272
273,274
273,275
274,275
277,278
278,279
278,280
279,280
281,282
281,283
282,283
285,286
286,287
288,289
289,290
289,291
290,291
290,292
291,292
295,296
296,297
296,298
297,298
299,300
299,301
300,301
300,302
302,303
304,305
304,306
305,306
308,309
309,310
309,311
310,311
312,313
312,314
313,314
316,317
317,318
317,319
318,319
320,321
320,322
321,322
324,325
325,326
325,327
326,327
328,329
328,330
329,330
332,333
333,334
333,335
334,335
336,337
336,338
337,338
340,341
341,342
341,343
342,343
344,345
344,346
345,346
348,349
349,350
349,351
350,351
352,353
352,354
353,354
356,357
357,358
357,359
358,359
360,361
360,362
361,362
364,365
364,366
365,366
365,367
366,367
369,370
369,371
369,372
369,373
369,374
369,375
369,376
369,377
369,378
369,379
369,380
369,381
369,382
370,371
371,372
371,373
371,374
371,375
371,376
371,377
372,373
374,375
376,377
378,379
380,381
382,383
384,385
384,386
385,386
385,387
386,387
388,389
391,392
391,393
392,393
392,394
393,394
395,396
397,398
397,399
397,400
397,401
397,402
397,403
397,404
398,399
398,400
399,400
399,401
399,402
399,403
399,404
399,405
400,401
401,402
401,403
402,403
404,405
404,406
405,406
405,407
406,407
409,410
411,412
412,413
412,414
412,415
412,416
413,414
415,416
418,419
418,420
419,420
420,421
420,422
421,422
423,424
425,426
426,427
426,428
427,428
430,431
431,432
431,433
432,433
434,435
436,437
437,438
437,439
438,439
440,441
440,442
441,442
443,444
445,446
446,447
446,448
447,448
449,450
449,451
450,451
450,452
451,452
454,455
456,457
457,458
457,459
457,460
457,461
457,462
457,463
458,459
460,461
462,463
464,465
466,467
468,469
470,471
470,472
471,472
473,474
475,476
475,477
476,477
476,478
477,478
479,480
482,483
482,484
483,484
483,485
484,485
486,487
488,489
488,490
489,490
490,491
490,492
490,493
490,494
490,495
491,492
493,494
493,495
494,495
497,498
497,499
498,499
502,503
502,504
503,504
506,507
507,508
509,510
510,511
510,512
511,512
512,513
513,514
515,516
515,517
516,517
516,518
519,520
521,522
522,523
523,524
525,526
526,527
526,528
527,528
529,530
529,531
530,531
530,532
531,532
534,535
537,538
538,539
538,540
539,540
541,542
541,543
542,543
542,544
543,544
546,547
548,549
548,550
549,550
549,551
550,551
550,552
551,552
553,554
554,555
554,556
555,556
555,557
556,557
560,561
560,562
561,562
563,564
564,565
564,566
565,566
565,567
566,567
569,570
571,572
571,573
572,573
573,574
573,575
573,576
573,577
573,578
574,575
576,577
576,578
577,578
580,581
583,584
583,585
584,585
587,588
588,589
590,591
591,592
591,593
592,593
592,594
593,594
596,597
598,599
598,600
599,600
599,601
600,601
600,602
601,602
601,603
602,603
605,606
606,607
606,608
607,608
607,609
608,609
612,613
612,614
613,614
613,615
614,615
617,618
618,619
618,620
619,620
619,621
620,621
623,624
625,626
625,627
626,627
627,628
627,629
627,630
627,631
627,632
628,629
630,631
630,632
631,632
634,635
637,638
637,639
638,639
641,642
642,643
644,645
645,646
645,647
646,647
646,648
647,648
650,651
650,652
651,652
651,653
652,653
656,657
657,658
657,659
658,659
658,660
659,660
662,663
662,664
663,664
663,665
664,665
664,666
665,666
670,671
671,672
671,673
672,673
672,674
673,674
676,677
676,678
676,679
677,678
678,679
678,680
679,680
681,682
683,684
683,685
684,685
687,688
687,689
688,689
691,692
691,693
692,693
692,694
693,694
694,695
696,697
698,699
698,700
698,701
699,700
699,701
700,701
700,702
701,702
702,703
704,705
706,707
707,708
707,709
708,709
710,711
712,713
713,714
713,715
714,715
716,717
716,718
717,718
719,720
721,722
722,723
722,724
723,724
725,726
725,727
726,727
726,728
727,728
730,731
732,733
733,734
733,735
734,735
736,737
738,739
738,740
738,741
739,740
739,741
740,741
743,744
743,745
743,746
743,747
743,748
743,749
743,750
744,745
744,746
745,746
745,747
746,747
746,748
747,748
751,752
751,753
752,753
753,754
753,755
753,756
753,757
753,758
754,755
756,757
756,758
757,758
760,761
763,764
763,765
764,765
767,768
768,769
770,771
770,772
771,772
771,773
772,773
772,774
773,774
776,777
778,779
778,780
778,781
778,782
778,783
778,784
779,780
780,781
780,782
781,782
781,783
782,783
785,786
787,788
787,789
788,789
789,790
790,791
790,792
791,792
793,794
793,795
794,795
797,798
797,799
798,799
798,800
799,800
802,803
804,805
805,806
805,807
806,807
806,808
807,808
810,811
812,813
813,814
813,815
814,815
816,817
816,818
817,818
819,820
821,822
821,823
822,823
822,824
823,824
824,825
824,826
825,826
826,827
827,828
829,830
829,831
830,831
833,834
834,835
834,836
835,836
837,838
837,839
838,839
841,842
842,843
845,846
846,847
846,848
847,848
849,850
849,851
850,851
852,853
852,854
853,854
856,857
857,858
857,859
858,859
860,861
860,862
861,862
864,865
865,866
865,867
866,867
868,869
868,870
869,870
872,873
873,874
873,875
874,875
876,877
878,879
878,880
879,880
880,881
881,882
881,883
882,883
883,884
884,885
886,887
886,888
887,888
890,891
890,892
891,892
892,893
892,894
893,894
895,896
895,897
896,897
899,900
901,902
901,903
902,903
903,904
903,905
904,905
905,906
906,907
908,909
908,910
909,910
909,911
912,913
914,915
915,916
916,917
918,919
919,920
919,921
920,921
920,922
921,922
924,925
924,926
925,926
926,927
928,929
928,930
929,930
929,931
930,931
930,932
931,932
933,934
935,936
937,938
937,939
938,939
941,942
942,943
942,944
943,944
943,945
944,945
947,948
947,949
948,949
948,950
949,950
951,952
953,954
955,956
956,957
956,958
957,958
957,959
958,959
961,962
961,963
962,963
962,964
965,966
967,968
968,969
968,970
969,970
969,971
970,971
973,974
975,976
976,977
976,978
977,978
977,979
978,979
981,982
983,984
984,985
984,986
985,986
985,987
986,987
989,990
991,992
992,993
992,994
993,994
993,995
994,995
997,998
999,1000
1000,1001
1000,1002
1001,1002
1001,1003
1002,1003
1005,1006
1007,1008
1008,1009
1008,1010
1009,1010
1009,1011
1010,1011
1013,1014
1015,1016
1015,1017
1016,1017
1016,1018
1017,1018
1020,1021
1020,1022
1021,1022
1022,1023
1022,1024
1022,1025
1022,1026
1022,1027
1022,1028
1023,1024
1025,1026
1025,1027
1026,1027
1029,1030
1032,1033
1032,1034
1033,1034
1036,1037
1036,1038
1037,1038
1037,1039
1040,1041
1042,1043
1043,1044
1045,1046
1046,1047
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,30,32,33,35,39,41,42,46,48,51,53,54,58,60,62,65,67,71,72,74,77,79,80,83,85,86,89,91,93,96,98,100,102,106,108,109,111,112,114,115,117,118,122,123,125,129,132,134,140,141,143,145,148,152,153,157,159,163,166,167,171,175,176,179,180,184,186,192,193,195,201,204,205,209,211,215,218,220,228,231,232,236,239,240,243,246,250,252,256,258,262,264,272,275,276,280,283,284,287,292,293,294,298,301,303,306,307,311,314,315,319,322,323,327,330,331,335,338,339,343,346,347,351,354,355,359,362,363,367,368,373,375,377,379,381,383,387,389,390,394,396,403,407,408,410,414,416,417,422,424,428,429,433,435,439,442,444,448,452,453,455,459,461,463,465,467,469,472,474,478,480,481,485,487,492,495,496,499,500,501,504,505,508,514,517,518,520,524,528,532,533,535,536,540,544,545,547,552,557,558,559,562,567,568,570,575,578,579,581,582,585,586,589,594,595,597,603,604,609,610,611,615,616,621,622,624,629,632,633,635,636,639,640,643,648,649,653,654,655,660,661,666,667,668,669,674,675,680,682,685,686,689,690,695,697,703,705,709,711,715,718,720,724,728,729,731,735,737,741,742,748,749,750,755,758,759,761,762,765,766,769,774,775,777,783,784,786,792,795,796,800,801,803,808,809,811,815,818,820,828,831,832,836,839,840,843,844,848,851,854,855,859,862,863,867,870,871,875,877,885,888,889,894,897,898,900,907,910,911,913,917,922,923,927,932,934,936,939,940,945,946,950,952,954,959,960,963,964,966,971,972,974,979,980,982,987,988,990,995,996,998,1003,1004,1006,1011,1012,1014,1018,1019,1024,1027,1028,1030,1031,1034,1035,1038,1039,1041,1044,1047
-----computeFrom-----
130,131
130,132
136,137
136,138
161,162
161,163
169,170
169,171
172,173
172,174
182,183
182,184
189,190
189,191
199,200
199,201
206,207
206,208
213,214
213,215
216,217
216,218
224,225
224,226
234,235
234,236
248,249
248,250
254,255
254,256
260,261
260,262
268,269
268,270
278,279
278,280
289,290
289,291
296,297
296,298
309,310
309,311
317,318
317,319
325,326
325,327
333,334
333,335
341,342
341,343
349,350
349,351
357,358
357,359
365,366
365,367
385,386
385,387
392,393
392,394
401,402
401,403
404,405
404,406
418,419
418,420
420,421
420,422
431,432
431,433
437,438
437,439
446,447
446,448
449,450
449,451
470,471
470,472
476,477
476,478
483,484
483,485
510,511
510,512
526,527
526,528
529,530
529,531
538,539
538,540
541,542
541,543
549,550
549,551
550,551
550,552
560,561
560,562
591,592
591,593
599,600
599,601
600,601
600,602
612,613
612,614
645,646
645,647
657,658
657,659
662,663
662,664
671,672
671,673
678,679
678,680
692,693
692,694
700,701
700,702
707,708
707,709
713,714
713,715
722,723
722,724
725,726
725,727
733,734
733,735
739,740
739,741
745,746
745,747
771,772
771,773
780,781
780,782
790,791
790,792
797,798
797,799
805,806
805,807
813,814
813,815
816,817
816,818
824,825
824,826
834,835
834,836
849,850
849,851
857,858
857,859
865,866
865,867
873,874
873,875
881,882
881,883
890,891
890,892
892,893
892,894
903,904
903,905
919,920
919,921
928,929
928,930
942,943
942,944
956,957
956,958
968,969
968,970
976,977
976,978
984,985
984,986
992,993
992,994
1000,1001
1000,1002
1008,1009
1008,1010
1016,1017
1016,1018
-----guardedBy-----
184,209
186,243
394,535
396,487
697,724
705,711
703,709
774,839
775,801
777,843
1018,1041
-----guardedByNegation-----
741,913
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static intLZWDecodeCompat(TIFF* tif, uint8* op0, tmsize_t occ0, uint16 s){	static const char module[] = "LZWDecodeCompat";	LZWCodecState *sp = DecoderState(tif);	char *op = (char*) op0;	long occ = (long) occ0;	char *tp;	unsigned char *bp;	int code, nbits;	long nextbits, nextdata, nbitsmask;	code_t *codep, *free_entp, *maxcodep, *oldcodep;	(void) s;	assert(sp != NULL);	/*	  Fail if value does not fit in long.	*/	if ((tmsize_t) occ != occ0)	        return (0);	/*	 * Restart interrupted output operation.	 */	if (sp->dec_restart) {		long residue;		codep = sp->dec_codep;		residue = codep->length - sp->dec_restart;		if (residue > occ) {			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}		/*		 * Residue satisfies only part of the decode request.		 */		op += residue;		occ -= residue;		tp = op;		do {			*--tp = codep->value;			codep = codep->next;		} while (--residue);		sp->dec_restart = 0;	}	bp = (unsigned char *)tif->tif_rawcp;#ifdef LZW_CHECKEOS	sp->dec_bitsleft = (((uint64)tif->tif_rawcc) << 3);#endif	nbits = sp->lzw_nbits;	nextdata = sp->lzw_nextdata;	nextbits = sp->lzw_nextbits;	nbitsmask = sp->dec_nbitsmask;	oldcodep = sp->dec_oldcodep;	free_entp = sp->dec_free_entp;	maxcodep = sp->dec_maxcodep;	while (occ > 0) {		NextCode(tif, sp, bp, code, GetNextCodeCompat);		if (code == CODE_EOI)			break;		if (code == CODE_CLEAR) {			do {				free_entp = sp->dec_codetab + CODE_FIRST;				_TIFFmemset(free_entp, 0,					    (CSIZE - CODE_FIRST) * sizeof (code_t));				nbits = BITS_MIN;				nbitsmask = MAXCODE(BITS_MIN);				maxcodep = sp->dec_codetab + nbitsmask;				NextCode(tif, sp, bp, code, GetNextCodeCompat);			} while (code == CODE_CLEAR);	/* consecutive CODE_CLEAR codes */			if (code == CODE_EOI)				break;			if (code > CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = (char)code;			occ--;			oldcodep = sp->dec_codetab + code;			continue;		}		codep = sp->dec_codetab + code;		/*		 * Add the new entry to the code table.		 */		if (free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->next = oldcodep;		if (free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->firstchar = free_entp->next->firstchar;		free_entp->length = free_entp->next->length+1;		free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar;		if (++free_entp > maxcodep) {			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}		oldcodep = codep;		if (code >= 256) {			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length;			occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		} else {			*op++ = (char)code;			occ--;		}	}	tif->tif_rawcc -= (tmsize_t)( (uint8*) bp - tif->tif_rawcp );	tif->tif_rawcp = (uint8*) bp;	sp->lzw_nbits = (unsigned short)nbits;	sp->lzw_nextdata = nextdata;	sp->lzw_nextbits = nextbits;	sp->dec_nbitsmask = nbitsmask;	sp->dec_oldcodep = oldcodep;	sp->dec_free_entp = free_entp;	sp->dec_maxcodep = maxcodep;	if (occ > 0) {#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %I64d bytes)",			     tif->tif_row, (unsigned __int64) occ);#else		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ);#endif		return (0);	}	return (1);}
static int
LZWDecodeCompat(TIFF* tif, uint8* op0, tmsize_t occ0, uint16 s)
LZWDecodeCompat
TIFF* tif
TIFF
TIFF
* tif
*
tif
uint8* op0
uint8
uint8
* op0
*
op0
tmsize_t occ0
tmsize_t
tmsize_t
occ0
occ0
uint16 s
uint16
uint16
s
s
{	static const char module[] = "LZWDecodeCompat";	LZWCodecState *sp = DecoderState(tif);	char *op = (char*) op0;	long occ = (long) occ0;	char *tp;	unsigned char *bp;	int code, nbits;	long nextbits, nextdata, nbitsmask;	code_t *codep, *free_entp, *maxcodep, *oldcodep;	(void) s;	assert(sp != NULL);	/*	  Fail if value does not fit in long.	*/	if ((tmsize_t) occ != occ0)	        return (0);	/*	 * Restart interrupted output operation.	 */	if (sp->dec_restart) {		long residue;		codep = sp->dec_codep;		residue = codep->length - sp->dec_restart;		if (residue > occ) {			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}		/*		 * Residue satisfies only part of the decode request.		 */		op += residue;		occ -= residue;		tp = op;		do {			*--tp = codep->value;			codep = codep->next;		} while (--residue);		sp->dec_restart = 0;	}	bp = (unsigned char *)tif->tif_rawcp;#ifdef LZW_CHECKEOS	sp->dec_bitsleft = (((uint64)tif->tif_rawcc) << 3);#endif	nbits = sp->lzw_nbits;	nextdata = sp->lzw_nextdata;	nextbits = sp->lzw_nextbits;	nbitsmask = sp->dec_nbitsmask;	oldcodep = sp->dec_oldcodep;	free_entp = sp->dec_free_entp;	maxcodep = sp->dec_maxcodep;	while (occ > 0) {		NextCode(tif, sp, bp, code, GetNextCodeCompat);		if (code == CODE_EOI)			break;		if (code == CODE_CLEAR) {			do {				free_entp = sp->dec_codetab + CODE_FIRST;				_TIFFmemset(free_entp, 0,					    (CSIZE - CODE_FIRST) * sizeof (code_t));				nbits = BITS_MIN;				nbitsmask = MAXCODE(BITS_MIN);				maxcodep = sp->dec_codetab + nbitsmask;				NextCode(tif, sp, bp, code, GetNextCodeCompat);			} while (code == CODE_CLEAR);	/* consecutive CODE_CLEAR codes */			if (code == CODE_EOI)				break;			if (code > CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = (char)code;			occ--;			oldcodep = sp->dec_codetab + code;			continue;		}		codep = sp->dec_codetab + code;		/*		 * Add the new entry to the code table.		 */		if (free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->next = oldcodep;		if (free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->firstchar = free_entp->next->firstchar;		free_entp->length = free_entp->next->length+1;		free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar;		if (++free_entp > maxcodep) {			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}		oldcodep = codep;		if (code >= 256) {			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length;			occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		} else {			*op++ = (char)code;			occ--;		}	}	tif->tif_rawcc -= (tmsize_t)( (uint8*) bp - tif->tif_rawcp );	tif->tif_rawcp = (uint8*) bp;	sp->lzw_nbits = (unsigned short)nbits;	sp->lzw_nextdata = nextdata;	sp->lzw_nextbits = nextbits;	sp->dec_nbitsmask = nbitsmask;	sp->dec_oldcodep = oldcodep;	sp->dec_free_entp = free_entp;	sp->dec_maxcodep = maxcodep;	if (occ > 0) {#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %I64d bytes)",			     tif->tif_row, (unsigned __int64) occ);#else		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ);#endif		return (0);	}	return (1);}
static const char module[] = "LZWDecodeCompat";
static const char module[] = "LZWDecodeCompat";
static const char
module[] = "LZWDecodeCompat"
module
[]
= "LZWDecodeCompat"
"LZWDecodeCompat"
LZWCodecState *sp = DecoderState(tif);
LZWCodecState *sp = DecoderState(tif);
LZWCodecState
LZWCodecState
*sp = DecoderState(tif)
*
sp
= DecoderState(tif)
DecoderState(tif)
DecoderState
DecoderState
tif
tif
char *op = (char*) op0;
char *op = (char*) op0;
char
*op = (char*) op0
*
op
= (char*) op0
(char*) op0
char*
char
*
*
op0
op0
long occ = (long) occ0;
long occ = (long) occ0;
long
occ = (long) occ0
occ
= (long) occ0
(long) occ0
long
long

occ0
occ0
char *tp;
char *tp;
char
*tp
*
tp
unsigned char *bp;
unsigned char *bp;
unsigned char
*bp
*
bp
int code, nbits;
int code, nbits;
int
code
code
nbits
nbits
long nextbits, nextdata, nbitsmask;
long nextbits, nextdata, nbitsmask;
long
nextbits
nextbits
nextdata
nextdata
nbitsmask
nbitsmask
code_t *codep, *free_entp, *maxcodep, *oldcodep;
code_t *codep, *free_entp, *maxcodep, *oldcodep;
code_t
code_t
*codep
*
codep
*free_entp
*
free_entp
*maxcodep
*
maxcodep
*oldcodep
*
oldcodep
(void) s;
(void) s
void
void

s
s
assert(sp != NULL);
assert(sp != NULL)
assert
assert
sp != NULL
sp
sp
NULL
NULL
if ((tmsize_t) occ != occ0)	        return (0);
(tmsize_t) occ != occ0
(tmsize_t) occ
tmsize_t
tmsize_t
tmsize_t

occ
occ
occ0
occ0
return (0);
(0)
0
if (sp->dec_restart) {		long residue;		codep = sp->dec_codep;		residue = codep->length - sp->dec_restart;		if (residue > occ) {			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}		/*		 * Residue satisfies only part of the decode request.		 */		op += residue;		occ -= residue;		tp = op;		do {			*--tp = codep->value;			codep = codep->next;		} while (--residue);		sp->dec_restart = 0;	}
sp->dec_restart
sp
sp
dec_restart
{		long residue;		codep = sp->dec_codep;		residue = codep->length - sp->dec_restart;		if (residue > occ) {			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}		/*		 * Residue satisfies only part of the decode request.		 */		op += residue;		occ -= residue;		tp = op;		do {			*--tp = codep->value;			codep = codep->next;		} while (--residue);		sp->dec_restart = 0;	}
long residue;
long residue;
long
residue
residue
codep = sp->dec_codep;
codep = sp->dec_codep
codep
codep
sp->dec_codep
sp
sp
dec_codep
residue = codep->length - sp->dec_restart;
residue = codep->length - sp->dec_restart
residue
residue
codep->length - sp->dec_restart
codep->length
codep
codep
length
sp->dec_restart
sp
sp
dec_restart
if (residue > occ) {			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}
residue > occ
residue
residue
occ
occ
{			/*			 * Residue from previous decode is sufficient			 * to satisfy decode request.  Skip to the			 * start of the decoded string, place decoded			 * values in the output buffer, and return.			 */			sp->dec_restart += occ;			do {				codep = codep->next;			} while (--residue > occ);			tp = op + occ;			do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);			return (1);		}
sp->dec_restart += occ;
sp->dec_restart += occ
sp->dec_restart
sp
sp
dec_restart
occ
occ
do {				codep = codep->next;			} while (--residue > occ);
{				codep = codep->next;			}
codep = codep->next;
codep = codep->next
codep
codep
codep->next
codep
codep
next
--residue > occ
--residue
residue
residue
occ
occ
tp = op + occ;
tp = op + occ
tp
tp
op + occ
op
op
occ
occ
do {				*--tp = codep->value;				codep = codep->next;			} while (--occ);
{				*--tp = codep->value;				codep = codep->next;			}
*--tp = codep->value;
*--tp = codep->value
*--tp
--tp
tp
tp
codep->value
codep
codep
value
codep = codep->next;
codep = codep->next
codep
codep
codep->next
codep
codep
next
--occ
occ
occ
return (1);
(1)
1
op += residue;
op += residue
op
op
residue
residue
occ -= residue;
occ -= residue
occ
occ
residue
residue
tp = op;
tp = op
tp
tp
op
op
do {			*--tp = codep->value;			codep = codep->next;		} while (--residue);
{			*--tp = codep->value;			codep = codep->next;		}
*--tp = codep->value;
*--tp = codep->value
*--tp
--tp
tp
tp
codep->value
codep
codep
value
codep = codep->next;
codep = codep->next
codep
codep
codep->next
codep
codep
next
--residue
residue
residue
sp->dec_restart = 0;
sp->dec_restart = 0
sp->dec_restart
sp
sp
dec_restart
0
bp = (unsigned char *)tif->tif_rawcp;
bp = (unsigned char *)tif->tif_rawcp
bp
bp
(unsigned char *)tif->tif_rawcp
unsigned char *
unsigned char
*
*
tif->tif_rawcp
tif
tif
tif_rawcp
nbits = sp->lzw_nbits;
nbits = sp->lzw_nbits
nbits
nbits
sp->lzw_nbits
sp
sp
lzw_nbits
nextdata = sp->lzw_nextdata;
nextdata = sp->lzw_nextdata
nextdata
nextdata
sp->lzw_nextdata
sp
sp
lzw_nextdata
nextbits = sp->lzw_nextbits;
nextbits = sp->lzw_nextbits
nextbits
nextbits
sp->lzw_nextbits
sp
sp
lzw_nextbits
nbitsmask = sp->dec_nbitsmask;
nbitsmask = sp->dec_nbitsmask
nbitsmask
nbitsmask
sp->dec_nbitsmask
sp
sp
dec_nbitsmask
oldcodep = sp->dec_oldcodep;
oldcodep = sp->dec_oldcodep
oldcodep
oldcodep
sp->dec_oldcodep
sp
sp
dec_oldcodep
free_entp = sp->dec_free_entp;
free_entp = sp->dec_free_entp
free_entp
free_entp
sp->dec_free_entp
sp
sp
dec_free_entp
maxcodep = sp->dec_maxcodep;
maxcodep = sp->dec_maxcodep
maxcodep
maxcodep
sp->dec_maxcodep
sp
sp
dec_maxcodep
while (occ > 0) {		NextCode(tif, sp, bp, code, GetNextCodeCompat);		if (code == CODE_EOI)			break;		if (code == CODE_CLEAR) {			do {				free_entp = sp->dec_codetab + CODE_FIRST;				_TIFFmemset(free_entp, 0,					    (CSIZE - CODE_FIRST) * sizeof (code_t));				nbits = BITS_MIN;				nbitsmask = MAXCODE(BITS_MIN);				maxcodep = sp->dec_codetab + nbitsmask;				NextCode(tif, sp, bp, code, GetNextCodeCompat);			} while (code == CODE_CLEAR);	/* consecutive CODE_CLEAR codes */			if (code == CODE_EOI)				break;			if (code > CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = (char)code;			occ--;			oldcodep = sp->dec_codetab + code;			continue;		}		codep = sp->dec_codetab + code;		/*		 * Add the new entry to the code table.		 */		if (free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->next = oldcodep;		if (free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->firstchar = free_entp->next->firstchar;		free_entp->length = free_entp->next->length+1;		free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar;		if (++free_entp > maxcodep) {			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}		oldcodep = codep;		if (code >= 256) {			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length;			occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		} else {			*op++ = (char)code;			occ--;		}	}
occ > 0
occ
occ
0
{		NextCode(tif, sp, bp, code, GetNextCodeCompat);		if (code == CODE_EOI)			break;		if (code == CODE_CLEAR) {			do {				free_entp = sp->dec_codetab + CODE_FIRST;				_TIFFmemset(free_entp, 0,					    (CSIZE - CODE_FIRST) * sizeof (code_t));				nbits = BITS_MIN;				nbitsmask = MAXCODE(BITS_MIN);				maxcodep = sp->dec_codetab + nbitsmask;				NextCode(tif, sp, bp, code, GetNextCodeCompat);			} while (code == CODE_CLEAR);	/* consecutive CODE_CLEAR codes */			if (code == CODE_EOI)				break;			if (code > CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = (char)code;			occ--;			oldcodep = sp->dec_codetab + code;			continue;		}		codep = sp->dec_codetab + code;		/*		 * Add the new entry to the code table.		 */		if (free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->next = oldcodep;		if (free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}		free_entp->firstchar = free_entp->next->firstchar;		free_entp->length = free_entp->next->length+1;		free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar;		if (++free_entp > maxcodep) {			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}		oldcodep = codep;		if (code >= 256) {			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length;			occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		} else {			*op++ = (char)code;			occ--;		}	}
NextCode(tif, sp, bp, code, GetNextCodeCompat);
NextCode(tif, sp, bp, code, GetNextCodeCompat)
NextCode
NextCode
tif
tif
sp
sp
bp
bp
code
code
GetNextCodeCompat
GetNextCodeCompat
if (code == CODE_EOI)			break;
code == CODE_EOI
code
code
CODE_EOI
CODE_EOI
break;
if (code == CODE_CLEAR) {			do {				free_entp = sp->dec_codetab + CODE_FIRST;				_TIFFmemset(free_entp, 0,					    (CSIZE - CODE_FIRST) * sizeof (code_t));				nbits = BITS_MIN;				nbitsmask = MAXCODE(BITS_MIN);				maxcodep = sp->dec_codetab + nbitsmask;				NextCode(tif, sp, bp, code, GetNextCodeCompat);			} while (code == CODE_CLEAR);	/* consecutive CODE_CLEAR codes */			if (code == CODE_EOI)				break;			if (code > CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = (char)code;			occ--;			oldcodep = sp->dec_codetab + code;			continue;		}
code == CODE_CLEAR
code
code
CODE_CLEAR
CODE_CLEAR
{			do {				free_entp = sp->dec_codetab + CODE_FIRST;				_TIFFmemset(free_entp, 0,					    (CSIZE - CODE_FIRST) * sizeof (code_t));				nbits = BITS_MIN;				nbitsmask = MAXCODE(BITS_MIN);				maxcodep = sp->dec_codetab + nbitsmask;				NextCode(tif, sp, bp, code, GetNextCodeCompat);			} while (code == CODE_CLEAR);	/* consecutive CODE_CLEAR codes */			if (code == CODE_EOI)				break;			if (code > CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}			*op++ = (char)code;			occ--;			oldcodep = sp->dec_codetab + code;			continue;		}
do {				free_entp = sp->dec_codetab + CODE_FIRST;				_TIFFmemset(free_entp, 0,					    (CSIZE - CODE_FIRST) * sizeof (code_t));				nbits = BITS_MIN;				nbitsmask = MAXCODE(BITS_MIN);				maxcodep = sp->dec_codetab + nbitsmask;				NextCode(tif, sp, bp, code, GetNextCodeCompat);			} while (code == CODE_CLEAR);
{				free_entp = sp->dec_codetab + CODE_FIRST;				_TIFFmemset(free_entp, 0,					    (CSIZE - CODE_FIRST) * sizeof (code_t));				nbits = BITS_MIN;				nbitsmask = MAXCODE(BITS_MIN);				maxcodep = sp->dec_codetab + nbitsmask;				NextCode(tif, sp, bp, code, GetNextCodeCompat);			}
free_entp = sp->dec_codetab + CODE_FIRST;
free_entp = sp->dec_codetab + CODE_FIRST
free_entp
free_entp
sp->dec_codetab + CODE_FIRST
sp->dec_codetab
sp
sp
dec_codetab
CODE_FIRST
CODE_FIRST
_TIFFmemset(free_entp, 0,					    (CSIZE - CODE_FIRST) * sizeof (code_t));
_TIFFmemset(free_entp, 0,					    (CSIZE - CODE_FIRST) * sizeof (code_t))
_TIFFmemset
_TIFFmemset
free_entp
free_entp
0
(CSIZE - CODE_FIRST) * sizeof (code_t)
(CSIZE - CODE_FIRST)
CSIZE - CODE_FIRST
CSIZE
CSIZE
CODE_FIRST
CODE_FIRST
sizeof (code_t)
code_t
code_t
code_t

nbits = BITS_MIN;
nbits = BITS_MIN
nbits
nbits
BITS_MIN
BITS_MIN
nbitsmask = MAXCODE(BITS_MIN);
nbitsmask = MAXCODE(BITS_MIN)
nbitsmask
nbitsmask
MAXCODE(BITS_MIN)
MAXCODE
MAXCODE
BITS_MIN
BITS_MIN
maxcodep = sp->dec_codetab + nbitsmask;
maxcodep = sp->dec_codetab + nbitsmask
maxcodep
maxcodep
sp->dec_codetab + nbitsmask
sp->dec_codetab
sp
sp
dec_codetab
nbitsmask
nbitsmask
NextCode(tif, sp, bp, code, GetNextCodeCompat);
NextCode(tif, sp, bp, code, GetNextCodeCompat)
NextCode
NextCode
tif
tif
sp
sp
bp
bp
code
code
GetNextCodeCompat
GetNextCodeCompat
code == CODE_CLEAR
code
code
CODE_CLEAR
CODE_CLEAR
if (code == CODE_EOI)				break;
code == CODE_EOI
code
code
CODE_EOI
CODE_EOI
break;
if (code > CODE_CLEAR) {				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}
code > CODE_CLEAR
code
code
CODE_CLEAR
CODE_CLEAR
{				TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);				return (0);			}
TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row);
TIFFErrorExt(tif->tif_clientdata, tif->tif_name,				"LZWDecode: Corrupted LZW table at scanline %d",					     tif->tif_row)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
tif->tif_name
tif
tif
tif_name
"LZWDecode: Corrupted LZW table at scanline %d"
tif->tif_row
tif
tif
tif_row
return (0);
(0)
0
*op++ = (char)code;
*op++ = (char)code
*op++
op++
op
op
(char)code
char
char

code
code
occ--;
occ--
occ
occ
oldcodep = sp->dec_codetab + code;
oldcodep = sp->dec_codetab + code
oldcodep
oldcodep
sp->dec_codetab + code
sp->dec_codetab
sp
sp
dec_codetab
code
code
continue;
codep = sp->dec_codetab + code;
codep = sp->dec_codetab + code
codep
codep
sp->dec_codetab + code
sp->dec_codetab
sp
sp
dec_codetab
code
code
if (free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}
free_entp < &sp->dec_codetab[0] ||		    free_entp >= &sp->dec_codetab[CSIZE]
free_entp < &sp->dec_codetab[0]
free_entp
free_entp
&sp->dec_codetab[0]
sp->dec_codetab[0]
sp->dec_codetab
sp
sp
dec_codetab
0
free_entp >= &sp->dec_codetab[CSIZE]
free_entp
free_entp
&sp->dec_codetab[CSIZE]
sp->dec_codetab[CSIZE]
sp->dec_codetab
sp
sp
dec_codetab
CSIZE
CSIZE
{			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}
TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);
TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Corrupted LZW table at scanline %d"
tif->tif_row
tif
tif
tif_row
return (0);
(0)
0
free_entp->next = oldcodep;
free_entp->next = oldcodep
free_entp->next
free_entp
free_entp
next
oldcodep
oldcodep
if (free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}
free_entp->next < &sp->dec_codetab[0] ||		    free_entp->next >= &sp->dec_codetab[CSIZE]
free_entp->next < &sp->dec_codetab[0]
free_entp->next
free_entp
free_entp
next
&sp->dec_codetab[0]
sp->dec_codetab[0]
sp->dec_codetab
sp
sp
dec_codetab
0
free_entp->next >= &sp->dec_codetab[CSIZE]
free_entp->next
free_entp
free_entp
next
&sp->dec_codetab[CSIZE]
sp->dec_codetab[CSIZE]
sp->dec_codetab
sp
sp
dec_codetab
CSIZE
CSIZE
{			TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);			return (0);		}
TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row);
TIFFErrorExt(tif->tif_clientdata, module,			    "Corrupted LZW table at scanline %d", tif->tif_row)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Corrupted LZW table at scanline %d"
tif->tif_row
tif
tif
tif_row
return (0);
(0)
0
free_entp->firstchar = free_entp->next->firstchar;
free_entp->firstchar = free_entp->next->firstchar
free_entp->firstchar
free_entp
free_entp
firstchar
free_entp->next->firstchar
free_entp->next
free_entp
free_entp
next
firstchar
free_entp->length = free_entp->next->length+1;
free_entp->length = free_entp->next->length+1
free_entp->length
free_entp
free_entp
length
free_entp->next->length+1
free_entp->next->length
free_entp->next
free_entp
free_entp
next
length
1
free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar;
free_entp->value = (codep < free_entp) ?		    codep->firstchar : free_entp->firstchar
free_entp->value
free_entp
free_entp
value
(codep < free_entp) ?		    codep->firstchar : free_entp->firstchar
(codep < free_entp)
codep < free_entp
codep
codep
free_entp
free_entp
codep->firstchar
codep
codep
firstchar
free_entp->firstchar
free_entp
free_entp
firstchar
if (++free_entp > maxcodep) {			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}
++free_entp > maxcodep
++free_entp
free_entp
free_entp
maxcodep
maxcodep
{			if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;			nbitsmask = MAXCODE(nbits);			maxcodep = sp->dec_codetab + nbitsmask;		}
if (++nbits > BITS_MAX)		/* should not happen */				nbits = BITS_MAX;
++nbits > BITS_MAX
++nbits
nbits
nbits
BITS_MAX
BITS_MAX
nbits = BITS_MAX;
nbits = BITS_MAX
nbits
nbits
BITS_MAX
BITS_MAX
nbitsmask = MAXCODE(nbits);
nbitsmask = MAXCODE(nbits)
nbitsmask
nbitsmask
MAXCODE(nbits)
MAXCODE
MAXCODE
nbits
nbits
maxcodep = sp->dec_codetab + nbitsmask;
maxcodep = sp->dec_codetab + nbitsmask
maxcodep
maxcodep
sp->dec_codetab + nbitsmask
sp->dec_codetab
sp
sp
dec_codetab
nbitsmask
nbitsmask
oldcodep = codep;
oldcodep = codep
oldcodep
oldcodep
codep
codep
if (code >= 256) {			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length;			occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		} else {			*op++ = (char)code;			occ--;		}
code >= 256
code
code
256
{			/*			 * Code maps to a string, copy string			 * value to output (written in reverse).			 */			if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}			if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}			assert(occ >= codep->length);			op += codep->length;			occ -= codep->length;			tp = op;			do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );		}
if(codep->length == 0) {				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}
codep->length == 0
codep->length
codep
codep
length
0
{				TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);				return (0);			}
TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row);
TIFFErrorExt(tif->tif_clientdata, module,				    "Wrong length of decoded "				    "string: data probably corrupted at scanline %d",				    tif->tif_row)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Wrong length of decoded "				    "string: data probably corrupted at scanline %d"
tif->tif_row
tif
tif
tif_row
return (0);
(0)
0
if (codep->length > occ) {				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}
codep->length > occ
codep->length
codep
codep
length
occ
occ
{				/*				 * String is too long for decode buffer,				 * locate portion that will fit, copy to				 * the decode buffer, and setup restart				 * logic for the next decoding call.				 */				sp->dec_codep = codep;				do {					codep = codep->next;				} while (codep->length > occ);				sp->dec_restart = occ;				tp = op + occ;				do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);				break;			}
sp->dec_codep = codep;
sp->dec_codep = codep
sp->dec_codep
sp
sp
dec_codep
codep
codep
do {					codep = codep->next;				} while (codep->length > occ);
{					codep = codep->next;				}
codep = codep->next;
codep = codep->next
codep
codep
codep->next
codep
codep
next
codep->length > occ
codep->length
codep
codep
length
occ
occ
sp->dec_restart = occ;
sp->dec_restart = occ
sp->dec_restart
sp
sp
dec_restart
occ
occ
tp = op + occ;
tp = op + occ
tp
tp
op + occ
op
op
occ
occ
do  {					*--tp = codep->value;					codep = codep->next;				}  while (--occ);
{					*--tp = codep->value;					codep = codep->next;				}
*--tp = codep->value;
*--tp = codep->value
*--tp
--tp
tp
tp
codep->value
codep
codep
value
codep = codep->next;
codep = codep->next
codep
codep
codep->next
codep
codep
next
--occ
occ
occ
break;
assert(occ >= codep->length);
assert(occ >= codep->length)
assert
assert
occ >= codep->length
occ
occ
codep->length
codep
codep
length
op += codep->length;
op += codep->length
op
op
codep->length
codep
codep
length
occ -= codep->length;
occ -= codep->length
occ
occ
codep->length
codep
codep
length
tp = op;
tp = op
tp
tp
op
op
do {				*--tp = codep->value;			} while( (codep = codep->next) != NULL );
{				*--tp = codep->value;			}
*--tp = codep->value;
*--tp = codep->value
*--tp
--tp
tp
tp
codep->value
codep
codep
value
(codep = codep->next) != NULL
(codep = codep->next)
codep = codep->next
codep
codep
codep->next
codep
codep
next
NULL
NULL
{			*op++ = (char)code;			occ--;		}
*op++ = (char)code;
*op++ = (char)code
*op++
op++
op
op
(char)code
char
char

code
code
occ--;
occ--
occ
occ
tif->tif_rawcc -= (tmsize_t)( (uint8*) bp - tif->tif_rawcp );
tif->tif_rawcc -= (tmsize_t)( (uint8*) bp - tif->tif_rawcp )
tif->tif_rawcc
tif
tif
tif_rawcc
(tmsize_t)( (uint8*) bp - tif->tif_rawcp )
(tmsize_t)
tmsize_t
tmsize_t
(uint8*) bp - tif->tif_rawcp
(uint8*) bp
uint8*
uint8
uint8
*
*
bp
bp
tif->tif_rawcp
tif
tif
tif_rawcp
tif->tif_rawcp = (uint8*) bp;
tif->tif_rawcp = (uint8*) bp
tif->tif_rawcp
tif
tif
tif_rawcp
(uint8*) bp
uint8*
uint8
uint8
*
*
bp
bp
sp->lzw_nbits = (unsigned short)nbits;
sp->lzw_nbits = (unsigned short)nbits
sp->lzw_nbits
sp
sp
lzw_nbits
(unsigned short)nbits
unsigned short
unsigned short

nbits
nbits
sp->lzw_nextdata = nextdata;
sp->lzw_nextdata = nextdata
sp->lzw_nextdata
sp
sp
lzw_nextdata
nextdata
nextdata
sp->lzw_nextbits = nextbits;
sp->lzw_nextbits = nextbits
sp->lzw_nextbits
sp
sp
lzw_nextbits
nextbits
nextbits
sp->dec_nbitsmask = nbitsmask;
sp->dec_nbitsmask = nbitsmask
sp->dec_nbitsmask
sp
sp
dec_nbitsmask
nbitsmask
nbitsmask
sp->dec_oldcodep = oldcodep;
sp->dec_oldcodep = oldcodep
sp->dec_oldcodep
sp
sp
dec_oldcodep
oldcodep
oldcodep
sp->dec_free_entp = free_entp;
sp->dec_free_entp = free_entp
sp->dec_free_entp
sp
sp
dec_free_entp
free_entp
free_entp
sp->dec_maxcodep = maxcodep;
sp->dec_maxcodep = maxcodep
sp->dec_maxcodep
sp
sp
dec_maxcodep
maxcodep
maxcodep
if (occ > 0) {#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %I64d bytes)",			     tif->tif_row, (unsigned __int64) occ);#else		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ);#endif		return (0);	}
occ > 0
occ
occ
0
{#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %I64d bytes)",			     tif->tif_row, (unsigned __int64) occ);#else		TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ);#endif		return (0);	}
TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ);
TIFFErrorExt(tif->tif_clientdata, module,			"Not enough data at scanline %d (short %llu bytes)",			     tif->tif_row, (unsigned long long) occ)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Not enough data at scanline %d (short %llu bytes)"
tif->tif_row
tif
tif
tif_row
(unsigned long long) occ
unsigned long long
unsigned long long

occ
occ
return (0);
(0)
0
return (1);
(1)
1
-----joern-----
(323,147,0)
(303,427,0)
(439,412,0)
(332,406,0)
(494,513,0)
(14,414,0)
(208,612,0)
(157,324,0)
(531,612,0)
(268,136,0)
(281,545,0)
(18,225,0)
(76,624,0)
(578,19,0)
(205,107,0)
(592,307,0)
(599,539,0)
(63,651,0)
(161,568,0)
(349,149,0)
(517,677,0)
(396,670,0)
(214,232,0)
(623,13,0)
(644,289,0)
(289,206,0)
(132,555,0)
(320,366,0)
(517,567,0)
(538,426,0)
(493,294,0)
(63,162,0)
(17,521,0)
(6,566,0)
(659,531,0)
(275,225,0)
(414,126,0)
(521,20,0)
(152,304,0)
(516,108,0)
(613,408,0)
(152,62,0)
(19,224,0)
(6,162,0)
(246,58,0)
(58,263,0)
(674,375,0)
(235,287,0)
(128,440,0)
(533,634,0)
(162,261,0)
(137,136,0)
(177,208,0)
(397,326,0)
(612,638,0)
(665,13,0)
(671,412,0)
(488,612,0)
(296,605,0)
(400,684,0)
(22,651,0)
(411,195,0)
(370,123,0)
(206,225,0)
(151,602,0)
(164,351,0)
(386,611,0)
(461,521,0)
(178,17,0)
(692,679,0)
(324,538,0)
(107,602,0)
(680,143,0)
(58,317,0)
(221,513,0)
(566,459,0)
(477,225,0)
(136,477,0)
(237,378,0)
(535,437,0)
(7,427,0)
(139,685,0)
(692,73,0)
(534,576,0)
(43,513,0)
(210,34,0)
(252,615,0)
(514,601,0)
(201,19,0)
(375,115,0)
(154,433,0)
(211,70,0)
(366,675,0)
(382,192,0)
(430,577,0)
(434,219,0)
(547,521,0)
(198,214,0)
(131,694,0)
(450,413,0)
(9,40,0)
(363,225,0)
(681,200,0)
(626,412,0)
(144,612,0)
(230,227,0)
(433,393,0)
(60,194,0)
(79,603,0)
(525,636,0)
(49,360,0)
(328,43,0)
(304,412,0)
(48,574,0)
(591,685,0)
(428,151,0)
(515,225,0)
(605,296,0)
(288,446,0)
(577,582,0)
(584,60,0)
(22,316,0)
(488,477,0)
(378,521,0)
(152,32,0)
(22,162,0)
(77,176,0)
(497,549,0)
(370,412,0)
(501,477,0)
(318,500,0)
(354,109,0)
(259,133,0)
(264,480,0)
(310,413,0)
(624,694,0)
(66,397,0)
(471,133,0)
(63,32,0)
(615,610,0)
(501,147,0)
(574,261,0)
(22,337,0)
(144,652,0)
(437,94,0)
(9,160,0)
(6,32,0)
(267,392,0)
(429,425,0)
(554,225,0)
(421,223,0)
(412,225,0)
(337,521,0)
(479,247,0)
(307,508,0)
(162,413,0)
(574,521,0)
(438,464,0)
(25,227,0)
(684,227,0)
(83,348,0)
(447,581,0)
(207,412,0)
(138,508,0)
(641,304,0)
(194,60,0)
(43,263,0)
(76,694,0)
(20,383,0)
(109,354,0)
(402,225,0)
(43,328,0)
(186,574,0)
(249,429,0)
(376,140,0)
(151,360,0)
(166,316,0)
(394,116,0)
(648,644,0)
(220,317,0)
(79,469,0)
(500,161,0)
(41,200,0)
(120,412,0)
(552,29,0)
(571,567,0)
(397,433,0)
(369,511,0)
(354,31,0)
(114,143,0)
(61,224,0)
(449,263,0)
(63,378,0)
(168,346,0)
(645,526,0)
(39,611,0)
(325,426,0)
(570,463,0)
(660,116,0)
(267,475,0)
(133,448,0)
(203,53,0)
(372,582,0)
(342,64,0)
(238,634,0)
(125,687,0)
(6,651,0)
(22,567,0)
(426,538,0)
(559,694,0)
(13,231,0)
(357,412,0)
(585,207,0)
(671,402,0)
(459,147,0)
(512,24,0)
(263,477,0)
(22,32,0)
(23,37,0)
(379,194,0)
(145,639,0)
(81,366,0)
(310,521,0)
(431,327,0)
(569,508,0)
(6,675,0)
(84,438,0)
(286,368,0)
(255,357,0)
(625,412,0)
(589,197,0)
(37,412,0)
(615,508,0)
(323,638,0)
(475,26,0)
(338,514,0)
(315,304,0)
(109,690,0)
(501,576,0)
(282,128,0)
(159,161,0)
(498,403,0)
(59,307,0)
(500,318,0)
(617,225,0)
(22,547,0)
(79,611,0)
(135,146,0)
(392,583,0)
(450,424,0)
(574,76,0)
(90,679,0)
(108,516,0)
(304,486,0)
(251,639,0)
(307,22,0)
(602,403,0)
(311,624,0)
(644,412,0)
(12,477,0)
(482,62,0)
(58,612,0)
(300,85,0)
(115,375,0)
(602,225,0)
(272,138,0)
(620,692,0)
(84,283,0)
(14,475,0)
(319,149,0)
(649,310,0)
(579,133,0)
(506,679,0)
(616,162,0)
(470,39,0)
(14,225,0)
(540,630,0)
(277,321,0)
(522,547,0)
(153,138,0)
(207,26,0)
(115,415,0)
(684,89,0)
(46,603,0)
(517,423,0)
(170,531,0)
(404,229,0)
(607,88,0)
(42,199,0)
(291,412,0)
(341,113,0)
(76,387,0)
(206,636,0)
(517,162,0)
(196,338,0)
(594,283,0)
(191,207,0)
(228,78,0)
(305,450,0)
(78,605,0)
(9,68,0)
(463,570,0)
(544,311,0)
(358,310,0)
(311,387,0)
(151,679,0)
(260,207,0)
(216,161,0)
(604,564,0)
(164,102,0)
(289,225,0)
(310,261,0)
(514,530,0)
(257,160,0)
(65,521,0)
(287,264,0)
(348,192,0)
(437,489,0)
(625,436,0)
(677,203,0)
(273,488,0)
(33,225,0)
(354,477,0)
(94,26,0)
(311,225,0)
(469,79,0)
(147,540,0)
(230,393,0)
(152,50,0)
(440,128,0)
(99,539,0)
(510,261,0)
(673,261,0)
(635,276,0)
(70,263,0)
(107,541,0)
(63,50,0)
(293,423,0)
(521,26,0)
(24,530,0)
(427,68,0)
(119,671,0)
(378,261,0)
(651,463,0)
(232,214,0)
(18,214,0)
(150,513,0)
(6,50,0)
(687,666,0)
(692,602,0)
(526,533,0)
(331,374,0)
(111,367,0)
(58,89,0)
(29,508,0)
(231,225,0)
(152,337,0)
(494,508,0)
(477,209,0)
(30,375,0)
(581,7,0)
(517,120,0)
(489,151,0)
(129,446,0)
(311,371,0)
(638,549,0)
(210,162,0)
(6,337,0)
(95,32,0)
(210,32,0)
(424,521,0)
(614,475,0)
(558,549,0)
(406,412,0)
(299,225,0)
(538,475,0)
(655,89,0)
(689,564,0)
(415,115,0)
(69,501,0)
(203,677,0)
(266,533,0)
(645,112,0)
(156,624,0)
(321,277,0)
(603,508,0)
(387,225,0)
(6,677,0)
(110,370,0)
(152,316,0)
(538,324,0)
(17,26,0)
(395,436,0)
(107,360,0)
(356,210,0)
(210,651,0)
(2,63,0)
(463,225,0)
(444,85,0)
(513,494,0)
(513,224,0)
(214,611,0)
(355,43,0)
(73,692,0)
(647,261,0)
(284,584,0)
(4,488,0)
(509,670,0)
(427,7,0)
(567,227,0)
(456,612,0)
(516,669,0)
(478,612,0)
(540,147,0)
(95,677,0)
(163,500,0)
(323,89,0)
(442,135,0)
(233,383,0)
(443,651,0)
(572,294,0)
(517,225,0)
(687,261,0)
(351,160,0)
(389,294,0)
(560,195,0)
(152,677,0)
(213,694,0)
(408,489,0)
(313,651,0)
(40,102,0)
(210,337,0)
(517,32,0)
(277,47,0)
(643,229,0)
(173,694,0)
(664,652,0)
(686,264,0)
(327,431,0)
(95,651,0)
(668,596,0)
(138,694,0)
(116,7,0)
(209,690,0)
(63,567,0)
(99,327,0)
(245,291,0)
(138,412,0)
(339,627,0)
(634,533,0)
(63,547,0)
(419,694,0)
(263,143,0)
(152,547,0)
(517,685,0)
(207,611,0)
(95,162,0)
(74,440,0)
(455,152,0)
(633,539,0)
(317,58,0)
(425,429,0)
(13,665,0)
(294,389,0)
(95,688,0)
(581,143,0)
(209,477,0)
(88,513,0)
(486,521,0)
(517,547,0)
(337,559,0)
(481,671,0)
(148,32,0)
(513,88,0)
(229,40,0)
(3,93,0)
(290,625,0)
(227,549,0)
(673,666,0)
(94,197,0)
(76,371,0)
(640,239,0)
(107,679,0)
(415,673,0)
(29,61,0)
(44,17,0)
(135,125,0)
(564,412,0)
(306,206,0)
(584,508,0)
(595,108,0)
(480,264,0)
(673,415,0)
(20,521,0)
(562,68,0)
(669,516,0)
(458,248,0)
(61,122,0)
(486,261,0)
(638,399,0)
(146,135,0)
(149,161,0)
(557,625,0)
(410,603,0)
(280,115,0)
(652,144,0)
(371,539,0)
(440,612,0)
(565,316,0)
(513,43,0)
(53,53,0)
(547,76,0)
(608,60,0)
(597,610,0)
(107,205,0)
(413,694,0)
(646,146,0)
(489,126,0)
(208,263,0)
(202,225,0)
(224,225,0)
(371,123,0)
(39,36,0)
(518,346,0)
(22,50,0)
(263,581,0)
(95,337,0)
(22,225,0)
(452,138,0)
(420,383,0)
(343,626,0)
(268,161,0)
(231,13,0)
(517,651,0)
(91,378,0)
(171,399,0)
(342,173,0)
(54,108,0)
(403,602,0)
(210,567,0)
(653,263,0)
(517,407,0)
(16,144,0)
(426,412,0)
(229,68,0)
(550,652,0)
(264,310,0)
(464,438,0)
(144,477,0)
(462,88,0)
(587,615,0)
(583,392,0)
(324,94,0)
(184,346,0)
(400,605,0)
(158,323,0)
(337,261,0)
(628,486,0)
(361,225,0)
(11,296,0)
(120,545,0)
(71,14,0)
(384,370,0)
(636,412,0)
(483,127,0)
(72,686,0)
(152,566,0)
(61,29,0)
(409,103,0)
(267,647,0)
(650,539,0)
(37,132,0)
(656,60,0)
(203,89,0)
(92,342,0)
(335,277,0)
(389,225,0)
(632,602,0)
(366,639,0)
(473,539,0)
(323,53,0)
(631,173,0)
(331,17,0)
(8,636,0)
(691,665,0)
(78,173,0)
(243,9,0)
(200,41,0)
(331,368,0)
(152,685,0)
(152,120,0)
(38,225,0)
(63,122,0)
(639,366,0)
(559,425,0)
(438,22,0)
(199,318,0)
(639,508,0)
(366,224,0)
(63,337,0)
(352,263,0)
(318,556,0)
(95,378,0)
(55,684,0)
(423,18,0)
(555,225,0)
(459,89,0)
(546,387,0)
(380,12,0)
(271,94,0)
(155,120,0)
(334,50,0)
(601,514,0)
(89,581,0)
(1,247,0)
(436,625,0)
(227,323,0)
(414,613,0)
(176,663,0)
(62,645,0)
(53,638,0)
(262,207,0)
(513,270,0)
(635,577,0)
(682,634,0)
(487,570,0)
(517,316,0)
(161,216,0)
(622,268,0)
(626,205,0)
(51,225,0)
(486,225,0)
(152,567,0)
(210,50,0)
(187,352,0)
(43,612,0)
(329,647,0)
(28,638,0)
(352,518,0)
(634,133,0)
(98,89,0)
(226,296,0)
(219,196,0)
(197,94,0)
(517,307,0)
(132,225,0)
(485,354,0)
(183,447,0)
(103,610,0)
(63,677,0)
(364,337,0)
(451,162,0)
(172,673,0)
(360,26,0)
(219,434,0)
(398,583,0)
(53,147,0)
(611,79,0)
(536,605,0)
(330,225,0)
(399,638,0)
(152,307,0)
(598,694,0)
(53,89,0)
(647,521,0)
(530,514,0)
(116,412,0)
(96,579,0)
(67,360,0)
(351,401,0)
(240,61,0)
(605,393,0)
(434,446,0)
(210,378,0)
(264,287,0)
(12,581,0)
(472,684,0)
(316,412,0)
(259,70,0)
(80,291,0)
(283,508,0)
(207,508,0)
(42,477,0)
(666,687,0)
(188,73,0)
(440,263,0)
(70,579,0)
(152,37,0)
(429,574,0)
(687,125,0)
(353,203,0)
(242,132,0)
(317,346,0)
(312,357,0)
(517,337,0)
(621,53,0)
(222,267,0)
(448,173,0)
(265,209,0)
(635,63,0)
(432,352,0)
(542,95,0)
(570,516,0)
(422,120,0)
(678,601,0)
(362,289,0)
(438,84,0)
(253,366,0)
(36,39,0)
(627,412,0)
(403,412,0)
(35,581,0)
(57,327,0)
(555,291,0)
(200,97,0)
(488,263,0)
(387,564,0)
(283,84,0)
(577,176,0)
(180,351,0)
(399,173,0)
(388,439,0)
(326,397,0)
(62,482,0)
(60,224,0)
(136,93,0)
(244,627,0)
(445,337,0)
(502,102,0)
(635,95,0)
(189,399,0)
(686,173,0)
(70,612,0)
(152,378,0)
(204,500,0)
(596,613,0)
(482,317,0)
(417,494,0)
(89,143,0)
(673,521,0)
(611,225,0)
(218,397,0)
(264,686,0)
(553,624,0)
(448,133,0)
(652,173,0)
(567,218,0)
(104,477,0)
(635,6,0)
(274,582,0)
(352,612,0)
(467,192,0)
(446,434,0)
(391,371,0)
(345,489,0)
(520,9,0)
(684,53,0)
(601,261,0)
(218,393,0)
(548,78,0)
(70,259,0)
(273,549,0)
(85,508,0)
(586,109,0)
(316,518,0)
(258,12,0)
(176,77,0)
(476,208,0)
(547,261,0)
(146,412,0)
(505,225,0)
(291,555,0)
(95,50,0)
(267,414,0)
(663,149,0)
(203,147,0)
(496,402,0)
(686,521,0)
(292,408,0)
(348,102,0)
(511,477,0)
(441,68,0)
(210,566,0)
(0,143,0)
(526,645,0)
(320,508,0)
(6,547,0)
(657,549,0)
(654,65,0)
(576,501,0)
(596,412,0)
(17,331,0)
(61,85,0)
(6,378,0)
(436,173,0)
(160,102,0)
(612,477,0)
(588,488,0)
(658,276,0)
(296,173,0)
(416,468,0)
(45,103,0)
(144,263,0)
(323,227,0)
(381,408,0)
(666,673,0)
(519,547,0)
(599,477,0)
(440,477,0)
(454,459,0)
(368,331,0)
(647,267,0)
(101,426,0)
(531,477,0)
(629,182,0)
(190,118,0)
(517,304,0)
(488,638,0)
(676,400,0)
(302,427,0)
(103,508,0)
(7,581,0)
(447,113,0)
(152,644,0)
(569,224,0)
(78,433,0)
(545,173,0)
(15,287,0)
(407,437,0)
(128,533,0)
(250,424,0)
(65,196,0)
(123,371,0)
(439,311,0)
(239,508,0)
(613,596,0)
(441,412,0)
(322,439,0)
(407,412,0)
(517,566,0)
(142,687,0)
(344,42,0)
(152,407,0)
(601,76,0)
(695,483,0)
(113,447,0)
(212,482,0)
(692,360,0)
(95,547,0)
(209,347,0)
(401,351,0)
(518,352,0)
(367,143,0)
(194,508,0)
(310,264,0)
(523,694,0)
(279,50,0)
(610,615,0)
(149,318,0)
(160,9,0)
(162,521,0)
(60,34,0)
(174,254,0)
(499,393,0)
(433,78,0)
(58,147,0)
(141,199,0)
(672,368,0)
(576,248,0)
(60,584,0)
(425,559,0)
(181,140,0)
(517,626,0)
(684,147,0)
(40,229,0)
(540,106,0)
(22,378,0)
(7,116,0)
(517,378,0)
(50,412,0)
(125,135,0)
(89,147,0)
(460,686,0)
(93,136,0)
(22,120,0)
(453,374,0)
(22,62,0)
(517,62,0)
(193,596,0)
(635,517,0)
(683,225,0)
(402,671,0)
(134,224,0)
(138,611,0)
(19,508,0)
(117,65,0)
(14,392,0)
(517,50,0)
(457,126,0)
(531,263,0)
(610,103,0)
(662,224,0)
(590,448,0)
(563,601,0)
(613,414,0)
(517,644,0)
(352,187,0)
(133,551,0)
(234,6,0)
(147,225,0)
(575,644,0)
(205,225,0)
(385,216,0)
(517,37,0)
(84,39,0)
(599,612,0)
(192,89,0)
(22,677,0)
(6,567,0)
(609,58,0)
(593,216,0)
(151,489,0)
(357,24,0)
(516,570,0)
(437,225,0)
(635,152,0)
(437,402,0)
(169,225,0)
(392,225,0)
(459,566,0)
(397,218,0)
(483,477,0)
(39,84,0)
(577,627,0)
(603,79,0)
(483,612,0)
(32,164,0)
(413,450,0)
(511,582,0)
(185,583,0)
(612,263,0)
(22,438,0)
(569,223,0)
(580,20,0)
(336,599,0)
(63,566,0)
(47,277,0)
(165,579,0)
(5,412,0)
(130,468,0)
(216,68,0)
(68,441,0)
(295,53,0)
(665,412,0)
(684,400,0)
(32,192,0)
(58,477,0)
(68,143,0)
(365,318,0)
(661,424,0)
(579,70,0)
(88,508,0)
(308,501,0)
(514,338,0)
(366,320,0)
(583,412,0)
(65,76,0)
(10,425,0)
(347,209,0)
(533,112,0)
(175,320,0)
(350,342,0)
(196,219,0)
(468,508,0)
(610,468,0)
(488,273,0)
(517,439,0)
(466,390,0)
(612,549,0)
(630,540,0)
(383,20,0)
(374,331,0)
(93,581,0)
(524,107,0)
(65,261,0)
(53,549,0)
(64,342,0)
(208,477,0)
(405,37,0)
(627,511,0)
(108,508,0)
(152,423,0)
(200,225,0)
(192,143,0)
(82,517,0)
(210,677,0)
(173,436,0)
(618,434,0)
(321,127,0)
(352,477,0)
(564,387,0)
(378,480,0)
(167,407,0)
(423,508,0)
(298,569,0)
(287,173,0)
(543,406,0)
(537,526,0)
(637,77,0)
(484,182,0)
(95,566,0)
(599,263,0)
(507,146,0)
(483,263,0)
(383,412,0)
(196,65,0)
(424,76,0)
(561,320,0)
(75,441,0)
(152,270,0)
(210,547,0)
(269,64,0)
(663,556,0)
(27,414,0)
(22,566,0)
(635,210,0)
(424,450,0)
(619,225,0)
(651,412,0)
(301,207,0)
(152,626,0)
(529,670,0)
(418,423,0)
(693,665,0)
(285,441,0)
(215,539,0)
(239,412,0)
(124,76,0)
(612,612,0)
(573,138,0)
(566,99,0)
(526,133,0)
(685,412,0)
(503,225,0)
(140,261,0)
(52,61,0)
(113,40,0)
(70,477,0)
(333,225,0)
(297,194,0)
(136,268,0)
(528,29,0)
(527,694,0)
(636,206,0)
(121,403,0)
(686,261,0)
(373,390,0)
(214,18,0)
(87,526,0)
(100,323,0)
(377,40,0)
(495,254,0)
(446,412,0)
(95,567,0)
(491,392,0)
(480,694,0)
(152,651,0)
(375,412,0)
(327,99,0)
(256,138,0)
(24,357,0)
(77,576,0)
(468,610,0)
(545,670,0)
(351,164,0)
(309,448,0)
(217,494,0)
(149,663,0)
(140,412,0)
(152,162,0)
(85,61,0)
(408,613,0)
(105,225,0)
(530,24,0)
(412,239,0)
(504,123,0)
(123,370,0)
(179,230,0)
(86,118,0)
(490,549,0)
(261,225,0)
(600,626,0)
(236,259,0)
(314,584,0)
(435,324,0)
(58,53,0)
(687,521,0)
(459,53,0)
(492,540,0)
(31,354,0)
(667,147,0)
(424,261,0)
(43,477,0)
(677,321,0)
(606,569,0)
(199,42,0)
(50,367,0)
(601,521,0)
(261,140,0)
(541,107,0)
(610,688,0)
(475,538,0)
(21,283,0)
(532,407,0)
(56,555,0)
(152,439,0)
(624,173,0)
(574,429,0)
(685,14,0)
(294,412,0)
(338,196,0)
(241,225,0)
(135,146,1)
(460,72,1)
(430,340,1)
(296,226,1)
(432,316,1)
(237,559,1)
(123,504,1)
(113,40,1)
(337,261,1)
(182,629,1)
(185,491,1)
(369,627,1)
(400,605,1)
(297,379,1)
(323,147,1)
(181,510,1)
(8,525,1)
(323,100,1)
(79,469,1)
(349,176,1)
(229,40,1)
(520,243,1)
(570,487,1)
(420,233,1)
(296,173,1)
(547,519,1)
(399,173,1)
(574,186,1)
(40,229,1)
(310,413,1)
(78,605,1)
(160,9,1)
(501,69,1)
(179,227,1)
(524,626,1)
(6,651,1)
(210,677,1)
(152,651,1)
(338,196,1)
(546,402,1)
(586,354,1)
(577,176,1)
(651,412,1)
(39,470,1)
(350,254,1)
(581,7,1)
(85,300,1)
(192,467,1)
(136,137,1)
(631,118,1)
(513,224,1)
(440,477,1)
(55,676,1)
(451,616,1)
(63,32,1)
(327,431,1)
(152,626,1)
(146,412,1)
(517,50,1)
(152,566,1)
(120,422,1)
(351,180,1)
(620,267,1)
(673,415,1)
(437,402,1)
(517,407,1)
(678,563,1)
(397,326,1)
(259,133,1)
(124,547,1)
(129,65,1)
(658,109,1)
(595,651,1)
(64,269,1)
(89,147,1)
(560,411,1)
(136,477,1)
(547,261,1)
(238,266,1)
(517,82,1)
(315,641,1)
(584,508,1)
(61,29,1)
(22,547,1)
(612,263,1)
(140,376,1)
(63,2,1)
(209,690,1)
(496,555,1)
(310,261,1)
(383,420,1)
(78,173,1)
(681,477,1)
(626,343,1)
(63,337,1)
(627,412,1)
(7,116,1)
(282,440,1)
(144,652,1)
(488,612,1)
(318,500,1)
(483,263,1)
(17,521,1)
(500,161,1)
(624,156,1)
(22,316,1)
(22,677,1)
(128,282,1)
(68,441,1)
(449,653,1)
(547,521,1)
(607,208,1)
(207,585,1)
(517,304,1)
(359,247,1)
(323,53,1)
(151,679,1)
(276,658,1)
(429,574,1)
(398,185,1)
(98,655,1)
(421,569,1)
(90,506,1)
(467,382,1)
(199,42,1)
(644,575,1)
(153,452,1)
(240,85,1)
(530,24,1)
(95,651,1)
(180,32,1)
(448,173,1)
(599,477,1)
(307,508,1)
(252,468,1)
(147,540,1)
(654,117,1)
(386,406,1)
(216,161,1)
(327,57,1)
(152,547,1)
(22,162,1)
(107,541,1)
(692,679,1)
(283,508,1)
(579,96,1)
(676,218,1)
(43,612,1)
(254,495,1)
(70,612,1)
(612,638,1)
(141,42,1)
(628,304,1)
(210,32,1)
(88,462,1)
(86,190,1)
(310,358,1)
(394,660,1)
(110,391,1)
(452,573,1)
(221,150,1)
(118,86,1)
(93,581,1)
(635,577,1)
(494,508,1)
(4,588,1)
(73,692,1)
(501,147,1)
(564,604,1)
(430,199,1)
(610,103,1)
(587,252,1)
(603,508,1)
(101,325,1)
(418,22,1)
(405,289,1)
(684,147,1)
(618,446,1)
(175,561,1)
(197,589,1)
(261,140,1)
(548,228,1)
(264,287,1)
(396,642,1)
(424,521,1)
(29,508,1)
(273,488,1)
(472,55,1)
(144,612,1)
(150,88,1)
(511,477,1)
(644,412,1)
(267,222,1)
(601,678,1)
(437,94,1)
(234,366,1)
(222,647,1)
(459,147,1)
(522,666,1)
(599,336,1)
(357,255,1)
(517,162,1)
(14,71,1)
(665,693,1)
(692,360,1)
(569,508,1)
(385,593,1)
(6,378,1)
(517,378,1)
(24,512,1)
(107,602,1)
(200,681,1)
(210,566,1)
(109,354,1)
(230,227,1)
(686,261,1)
(387,564,1)
(210,356,1)
(108,54,1)
(152,407,1)
(366,320,1)
(388,437,1)
(442,146,1)
(286,178,1)
(689,546,1)
(71,685,1)
(366,639,1)
(647,329,1)
(459,89,1)
(103,508,1)
(209,265,1)
(367,111,1)
(345,679,1)
(152,62,1)
(258,581,1)
(207,412,1)
(236,133,1)
(200,97,1)
(296,605,1)
(152,378,1)
(613,408,1)
(635,63,1)
(201,578,1)
(229,404,1)
(414,613,1)
(392,583,1)
(535,407,1)
(107,360,1)
(406,543,1)
(323,638,1)
(409,45,1)
(519,522,1)
(575,648,1)
(80,56,1)
(337,521,1)
(426,101,1)
(482,212,1)
(64,342,1)
(52,240,1)
(138,412,1)
(400,676,1)
(584,284,1)
(501,477,1)
(671,119,1)
(87,537,1)
(311,387,1)
(638,399,1)
(43,355,1)
(500,318,1)
(108,508,1)
(144,263,1)
(437,489,1)
(13,623,1)
(148,40,1)
(256,531,1)
(407,167,1)
(263,477,1)
(667,412,1)
(397,433,1)
(362,644,1)
(395,625,1)
(682,238,1)
(76,371,1)
(485,231,1)
(10,429,1)
(626,412,1)
(450,424,1)
(12,581,1)
(671,412,1)
(164,351,1)
(174,624,1)
(233,461,1)
(159,511,1)
(186,48,1)
(487,516,1)
(635,210,1)
(22,567,1)
(61,85,1)
(83,192,1)
(152,567,1)
(635,152,1)
(686,173,1)
(513,88,1)
(134,662,1)
(572,200,1)
(378,261,1)
(161,216,1)
(517,423,1)
(95,547,1)
(666,687,1)
(358,649,1)
(540,106,1)
(427,68,1)
(210,337,1)
(66,567,1)
(32,148,1)
(267,475,1)
(198,423,1)
(69,308,1)
(517,120,1)
(513,43,1)
(249,574,1)
(268,136,1)
(95,567,1)
(352,612,1)
(666,673,1)
(443,313,1)
(74,533,1)
(573,256,1)
(692,602,1)
(440,612,1)
(312,601,1)
(486,261,1)
(170,392,1)
(152,455,1)
(22,378,1)
(615,587,1)
(517,316,1)
(6,234,1)
(302,35,1)
(83,113,1)
(410,386,1)
(209,347,1)
(434,446,1)
(517,567,1)
(176,77,1)
(324,94,1)
(455,513,1)
(433,78,1)
(517,307,1)
(488,4,1)
(15,686,1)
(311,624,1)
(28,144,1)
(512,357,1)
(639,251,1)
(191,260,1)
(22,566,1)
(158,25,1)
(308,534,1)
(378,521,1)
(354,485,1)
(291,412,1)
(63,651,1)
(208,263,1)
(50,334,1)
(332,109,1)
(37,412,1)
(562,406,1)
(439,412,1)
(320,175,1)
(403,412,1)
(338,514,1)
(138,611,1)
(210,567,1)
(163,204,1)
(685,412,1)
(687,521,1)
(668,27,1)
(75,562,1)
(27,489,1)
(677,203,1)
(218,397,1)
(138,508,1)
(54,595,1)
(170,612,1)
(543,332,1)
(14,392,1)
(188,692,1)
(334,279,1)
(354,477,1)
(2,61,1)
(63,567,1)
(435,157,1)
(536,433,1)
(14,475,1)
(137,93,1)
(151,428,1)
(22,120,1)
(167,532,1)
(271,360,1)
(336,99,1)
(521,20,1)
(517,62,1)
(610,468,1)
(486,521,1)
(24,357,1)
(482,317,1)
(264,686,1)
(352,477,1)
(416,130,1)
(533,634,1)
(513,494,1)
(348,192,1)
(151,602,1)
(152,37,1)
(9,40,1)
(687,261,1)
(365,663,1)
(63,677,1)
(58,609,1)
(517,439,1)
(344,318,1)
(152,316,1)
(19,508,1)
(634,133,1)
(146,507,1)
(60,224,1)
(216,68,1)
(345,73,1)
(516,108,1)
(664,550,1)
(517,547,1)
(531,477,1)
(43,263,1)
(679,90,1)
(267,414,1)
(250,162,1)
(70,477,1)
(480,264,1)
(647,521,1)
(636,412,1)
(21,39,1)
(283,594,1)
(461,118,1)
(53,638,1)
(313,611,1)
(62,482,1)
(374,453,1)
(647,261,1)
(162,451,1)
(53,89,1)
(95,50,1)
(81,639,1)
(695,321,1)
(360,49,1)
(264,310,1)
(149,161,1)
(177,14,1)
(42,477,1)
(11,536,1)
(20,580,1)
(76,624,1)
(79,603,1)
(268,161,1)
(476,177,1)
(116,412,1)
(474,259,1)
(382,263,1)
(661,250,1)
(612,612,1)
(17,331,1)
(415,115,1)
(294,412,1)
(625,557,1)
(196,219,1)
(637,576,1)
(545,173,1)
(417,221,1)
(151,360,1)
(465,195,1)
(693,691,1)
(44,521,1)
(636,8,1)
(563,196,1)
(58,612,1)
(292,596,1)
(672,286,1)
(6,162,1)
(285,75,1)
(470,307,1)
(565,166,1)
(303,302,1)
(599,612,1)
(29,528,1)
(615,508,1)
(577,430,1)
(684,227,1)
(162,521,1)
(323,89,1)
(390,466,1)
(373,207,1)
(304,412,1)
(478,456,1)
(22,651,1)
(629,484,1)
(659,170,1)
(459,454,1)
(538,324,1)
(441,285,1)
(287,173,1)
(428,345,1)
(567,571,1)
(506,73,1)
(6,566,1)
(371,123,1)
(25,638,1)
(635,276,1)
(424,261,1)
(566,459,1)
(93,3,1)
(1,479,1)
(425,10,1)
(77,576,1)
(517,677,1)
(450,305,1)
(665,412,1)
(247,1,1)
(65,521,1)
(6,547,1)
(483,477,1)
(578,642,1)
(210,50,1)
(331,368,1)
(63,378,1)
(95,32,1)
(12,477,1)
(402,671,1)
(46,410,1)
(136,93,1)
(625,412,1)
(321,277,1)
(651,443,1)
(484,247,1)
(22,337,1)
(601,261,1)
(440,74,1)
(368,672,1)
(538,426,1)
(486,628,1)
(593,159,1)
(532,132,1)
(85,508,1)
(96,165,1)
(115,280,1)
(635,517,1)
(375,412,1)
(316,412,1)
(194,297,1)
(462,607,1)
(152,423,1)
(70,579,1)
(686,521,1)
(208,477,1)
(687,125,1)
(280,375,1)
(107,679,1)
(166,474,1)
(53,621,1)
(585,301,1)
(399,189,1)
(149,318,1)
(20,383,1)
(528,552,1)
(212,317,1)
(37,23,1)
(18,214,1)
(479,390,1)
(119,481,1)
(43,328,1)
(583,398,1)
(364,413,1)
(514,601,1)
(152,677,1)
(39,611,1)
(115,375,1)
(3,161,1)
(471,545,1)
(135,442,1)
(58,53,1)
(6,677,1)
(228,154,1)
(384,110,1)
(612,478,1)
(437,535,1)
(157,426,1)
(544,439,1)
(434,618,1)
(281,120,1)
(624,173,1)
(453,368,1)
(446,412,1)
(567,227,1)
(152,439,1)
(376,181,1)
(103,409,1)
(306,602,1)
(517,37,1)
(152,32,1)
(641,311,1)
(322,388,1)
(597,615,1)
(526,87,1)
(633,371,1)
(53,147,1)
(445,364,1)
(616,338,1)
(199,141,1)
(463,570,1)
(269,342,1)
(6,50,1)
(194,508,1)
(6,337,1)
(111,50,1)
(226,11,1)
(531,263,1)
(259,236,1)
(58,477,1)
(489,151,1)
(511,369,1)
(475,538,1)
(553,414,1)
(448,133,1)
(483,612,1)
(411,138,1)
(492,667,1)
(229,68,1)
(49,67,1)
(132,555,1)
(208,612,1)
(95,337,1)
(612,477,1)
(531,612,1)
(649,686,1)
(381,292,1)
(170,483,1)
(314,666,1)
(244,12,1)
(190,195,1)
(294,493,1)
(65,76,1)
(171,28,1)
(422,155,1)
(203,53,1)
(471,259,1)
(45,597,1)
(88,508,1)
(89,98,1)
(162,261,1)
(378,91,1)
(653,89,1)
(95,677,1)
(203,89,1)
(408,489,1)
(262,191,1)
(224,134,1)
(621,295,1)
(400,684,1)
(235,15,1)
(517,644,1)
(517,337,1)
(284,314,1)
(389,294,1)
(63,566,1)
(329,480,1)
(91,237,1)
(375,30,1)
(412,239,1)
(152,307,1)
(599,263,1)
(132,242,1)
(517,626,1)
(58,263,1)
(583,412,1)
(454,182,1)
(76,124,1)
(340,268,1)
(516,669,1)
(123,370,1)
(239,508,1)
(459,53,1)
(403,121,1)
(5,224,1)
(531,659,1)
(425,429,1)
(207,508,1)
(22,50,1)
(684,472,1)
(255,312,1)
(316,565,1)
(396,19,1)
(145,338,1)
(246,220,1)
(656,584,1)
(488,477,1)
(673,521,1)
(199,318,1)
(652,664,1)
(206,636,1)
(251,145,1)
(288,129,1)
(592,396,1)
(635,6,1)
(107,524,1)
(214,198,1)
(139,486,1)
(128,440,1)
(540,630,1)
(290,631,1)
(125,135,1)
(352,263,1)
(6,567,1)
(203,147,1)
(13,665,1)
(109,690,1)
(383,412,1)
(259,70,1)
(116,394,1)
(342,173,1)
(569,224,1)
(195,560,1)
(67,17,1)
(239,640,1)
(19,224,1)
(579,133,1)
(159,268,1)
(622,136,1)
(331,374,1)
(22,32,1)
(646,142,1)
(53,53,1)
(448,590,1)
(156,553,1)
(614,94,1)
(170,633,1)
(95,378,1)
(210,162,1)
(596,193,1)
(507,646,1)
(594,21,1)
(645,526,1)
(632,463,1)
(635,95,1)
(510,387,1)
(63,162,1)
(208,476,1)
(243,257,1)
(493,572,1)
(183,164,1)
(609,246,1)
(342,92,1)
(608,656,1)
(152,685,1)
(200,41,1)
(9,68,1)
(311,544,1)
(691,389,1)
(550,64,1)
(89,581,1)
(427,303,1)
(95,542,1)
(640,5,1)
(343,600,1)
(267,647,1)
(230,179,1)
(481,496,1)
(94,197,1)
(577,627,1)
(468,508,1)
(317,58,1)
(602,403,1)
(95,162,1)
(424,76,1)
(627,339,1)
(23,405,1)
(337,445,1)
(564,412,1)
(590,309,1)
(380,258,1)
(634,682,1)
(113,341,1)
(305,424,1)
(611,79,1)
(555,291,1)
(386,367,1)
(121,498,1)
(352,187,1)
(518,352,1)
(684,89,1)
(278,400,1)
(263,581,1)
(561,253,1)
(144,477,1)
(192,89,1)
(355,494,1)
(660,427,1)
(613,596,1)
(429,249,1)
(483,695,1)
(494,217,1)
(461,390,1)
(113,447,1)
(684,53,1)
(77,637,1)
(84,283,1)
(70,211,1)
(407,412,1)
(260,475,1)
(592,465,1)
(351,401,1)
(436,395,1)
(210,651,1)
(540,492,1)
(42,344,1)
(517,32,1)
(592,531,1)
(265,104,1)
(214,232,1)
(178,44,1)
(447,183,1)
(22,438,1)
(231,13,1)
(517,651,1)
(287,235,1)
(601,521,1)
(605,296,1)
(128,533,1)
(341,447,1)
(172,173,1)
(674,172,1)
(58,147,1)
(207,611,1)
(517,685,1)
(456,53,1)
(477,209,1)
(189,171,1)
(19,201,1)
(295,273,1)
(600,18,1)
(692,620,1)
(553,267,1)
(353,254,1)
(120,412,1)
(356,60,1)
(84,39,1)
(12,380,1)
(35,68,1)
(154,230,1)
(413,450,1)
(73,188,1)
(204,365,1)
(60,194,1)
(99,327,1)
(377,160,1)
(216,385,1)
(652,173,1)
(574,261,1)
(610,615,1)
(57,566,1)
(685,591,1)
(227,323,1)
(76,387,1)
(440,263,1)
(648,205,1)
(325,614,1)
(570,516,1)
(72,378,1)
(339,244,1)
(404,643,1)
(152,162,1)
(92,350,1)
(370,384,1)
(142,673,1)
(277,335,1)
(14,414,1)
(138,272,1)
(220,518,1)
(444,64,1)
(155,144,1)
(30,674,1)
(603,46,1)
(379,608,1)
(78,548,1)
(267,392,1)
(210,547,1)
(351,160,1)
(95,566,1)
(348,83,1)
(552,52,1)
(311,371,1)
(211,579,1)
(298,278,1)
(50,412,1)
(569,606,1)
(9,520,1)
(606,298,1)
(441,412,1)
(354,31,1)
(152,644,1)
(300,444,1)
(655,12,1)
(397,66,1)
(304,315,1)
(301,262,1)
(686,460,1)
(279,113,1)
(63,50,1)
(117,76,1)
(352,432,1)
(109,586,1)
(439,322,1)
(596,412,1)
(604,689,1)
(152,304,1)
(366,224,1)
(56,206,1)
(152,337,1)
(574,76,1)
(22,62,1)
(48,337,1)
(357,412,1)
(571,605,1)
(193,668,1)
(592,359,1)
(634,533,1)
(149,319,1)
(70,263,1)
(545,281,1)
(173,436,1)
(6,32,1)
(623,665,1)
(219,434,1)
(289,362,1)
(293,418,1)
(588,278,1)
(65,261,1)
(266,645,1)
(537,62,1)
(673,261,1)
(60,584,1)
(488,638,1)
(242,37,1)
(446,288,1)
(272,153,1)
(310,521,1)
(436,625,1)
(307,59,1)
(179,400,1)
(396,474,1)
(526,133,1)
(16,652,1)
(514,530,1)
(468,416,1)
(500,163,1)
(663,149,1)
(144,16,1)
(526,533,1)
(504,370,1)
(63,547,1)
(534,340,1)
(391,599,1)
(59,592,1)
(196,65,1)
(574,521,1)
(133,448,1)
(424,661,1)
(104,147,1)
(498,632,1)
(491,261,1)
(257,348,1)
(447,581,1)
(488,263,1)
(214,611,1)
(268,622,1)
(253,81,1)
(495,174,1)
(39,36,1)
(438,84,1)
(589,271,1)
(263,449,1)
(100,158,1)
(65,654,1)
(559,425,1)
(210,378,1)
(82,208,1)
(639,508,1)
(32,192,1)
(320,508,1)
(542,610,1)
(205,107,1)
(591,139,1)
(61,224,1)
(517,566,1)
(601,76,1)
(592,421,1)
(580,383,1)
(217,417,1)
(406,412,1)
(212,128,1)
(438,464,1)
(408,381,1)
(324,435,1)
(289,206,1)
(245,80,1)
(426,412,1)
(576,501,1)
(291,245,1)
(642,128,1)
(466,373,1)
(43,477,1)
(152,120,1)
(152,50,1)
(165,236,1)
(7,427,1)
(643,377,1)
(319,349,1)
(423,293,1)
(130,182,1)
(203,353,1)
(140,412,1)
(335,677,1)
(277,47,1)
(637,199,1)
(309,471,1)
(370,412,1)
(58,89,1)
(525,306,1)
(557,290,1)
(423,508,1)
(380,406,2)
(517,567,2)
(470,144,2)
(555,291,2)
(435,118,2)
(159,268,2)
(192,89,2)
(156,338,2)
(291,406,2)
(555,406,2)
(501,340,2)
(210,651,2)
(516,12,2)
(283,278,2)
(454,182,2)
(591,195,2)
(343,531,2)
(483,612,2)
(591,144,2)
(415,118,2)
(58,147,2)
(394,406,2)
(575,531,2)
(22,247,2)
(482,474,2)
(470,247,2)
(661,338,2)
(481,12,2)
(317,58,2)
(60,194,2)
(459,182,2)
(273,488,2)
(684,227,2)
(107,278,2)
(323,147,2)
(678,196,2)
(378,521,2)
(501,147,2)
(138,531,2)
(647,261,2)
(692,360,2)
(198,144,2)
(99,327,2)
(208,144,2)
(418,247,2)
(546,12,2)
(246,474,2)
(547,521,2)
(420,118,2)
(59,278,2)
(384,182,2)
(317,474,2)
(208,531,2)
(214,144,2)
(177,531,2)
(466,118,2)
(151,267,2)
(107,247,2)
(517,439,2)
(535,144,2)
(604,406,2)
(190,195,2)
(198,278,2)
(322,195,2)
(18,278,2)
(514,196,2)
(685,247,2)
(258,406,2)
(601,521,2)
(604,12,2)
(161,12,2)
(381,267,2)
(430,12,2)
(243,12,2)
(633,182,2)
(10,338,2)
(118,195,2)
(543,109,2)
(358,686,2)
(37,412,2)
(517,120,2)
(679,73,2)
(400,684,2)
(236,144,2)
(132,144,2)
(6,338,2)
(23,144,2)
(70,579,2)
(532,144,2)
(599,612,2)
(116,412,2)
(605,296,2)
(140,406,2)
(532,531,2)
(398,406,2)
(569,224,2)
(305,338,2)
(150,208,2)
(315,531,2)
(397,144,2)
(234,338,2)
(677,203,2)
(545,144,2)
(7,427,2)
(70,477,2)
(216,68,2)
(510,12,2)
(198,247,2)
(687,261,2)
(59,144,2)
(441,412,2)
(531,406,2)
(132,247,2)
(488,263,2)
(101,118,2)
(60,224,2)
(379,666,2)
(624,173,2)
(513,224,2)
(345,267,2)
(389,294,2)
(484,247,2)
(324,94,2)
(229,113,2)
(664,64,2)
(100,144,2)
(111,12,2)
(95,162,2)
(611,406,2)
(477,209,2)
(552,64,2)
(244,12,2)
(58,612,2)
(37,195,2)
(200,97,2)
(343,195,2)
(149,318,2)
(120,144,2)
(323,53,2)
(214,278,2)
(63,64,2)
(160,12,2)
(22,337,2)
(43,612,2)
(80,12,2)
(584,666,2)
(575,247,2)
(304,278,2)
(626,278,2)
(207,611,2)
(339,12,2)
(612,638,2)
(20,390,2)
(583,12,2)
(256,531,2)
(174,338,2)
(167,195,2)
(459,89,2)
(318,500,2)
(291,12,2)
(686,521,2)
(580,118,2)
(69,340,2)
(208,263,2)
(370,182,2)
(17,521,2)
(426,390,2)
(452,531,2)
(311,278,2)
(266,474,2)
(524,195,2)
(63,567,2)
(11,144,2)
(22,278,2)
(651,412,2)
(649,686,2)
(289,206,2)
(205,144,2)
(306,406,2)
(626,247,2)
(468,508,2)
(534,340,2)
(531,612,2)
(332,109,2)
(316,412,2)
(426,412,2)
(687,521,2)
(304,531,2)
(76,371,2)
(374,118,2)
(567,400,2)
(467,12,2)
(208,195,2)
(37,278,2)
(22,62,2)
(635,63,2)
(621,278,2)
(191,390,2)
(235,686,2)
(320,338,2)
(410,406,2)
(407,412,2)
(461,390,2)
(263,581,2)
(362,531,2)
(22,162,2)
(344,199,2)
(22,566,2)
(271,390,2)
(324,118,2)
(291,412,2)
(440,263,2)
(482,317,2)
(390,118,2)
(574,338,2)
(56,12,2)
(88,208,2)
(447,113,2)
(343,144,2)
(205,247,2)
(377,12,2)
(648,278,2)
(470,278,2)
(637,199,2)
(160,9,2)
(230,144,2)
(63,651,2)
(21,247,2)
(76,666,2)
(259,259,2)
(500,199,2)
(352,263,2)
(522,666,2)
(219,434,2)
(288,666,2)
(109,354,2)
(489,151,2)
(479,118,2)
(540,630,2)
(635,276,2)
(209,690,2)
(658,109,2)
(195,531,2)
(518,474,2)
(635,517,2)
(64,342,2)
(254,338,2)
(603,12,2)
(157,390,2)
(12,406,2)
(136,268,2)
(135,673,2)
(517,162,2)
(181,12,2)
(201,642,2)
(570,516,2)
(310,686,2)
(59,531,2)
(589,118,2)
(78,173,2)
(350,254,2)
(95,566,2)
(152,316,2)
(627,12,2)
(198,531,2)
(615,508,2)
(63,566,2)
(405,531,2)
(308,340,2)
(233,118,2)
(192,12,2)
(530,196,2)
(666,687,2)
(438,278,2)
(489,267,2)
(9,68,2)
(301,390,2)
(293,278,2)
(531,254,2)
(684,676,2)
(407,195,2)
(286,390,2)
(538,118,2)
(173,436,2)
(635,152,2)
(538,426,2)
(685,412,2)
(228,400,2)
(620,267,2)
(207,118,2)
(544,278,2)
(410,12,2)
(517,37,2)
(447,12,2)
(157,118,2)
(634,128,2)
(210,32,2)
(267,414,2)
(627,412,2)
(648,531,2)
(7,116,2)
(423,278,2)
(544,531,2)
(439,247,2)
(128,474,2)
(322,278,2)
(92,254,2)
(682,128,2)
(513,494,2)
(196,219,2)
(500,318,2)
(437,144,2)
(255,196,2)
(167,278,2)
(390,390,2)
(318,340,2)
(592,195,2)
(446,412,2)
(6,337,2)
(385,12,2)
(8,12,2)
(449,12,2)
(354,31,2)
(95,378,2)
(21,195,2)
(108,508,2)
(133,259,2)
(113,447,2)
(510,406,2)
(6,651,2)
(672,118,2)
(472,676,2)
(315,144,2)
(137,12,2)
(151,602,2)
(465,195,2)
(20,118,2)
(62,482,2)
(531,12,2)
(364,338,2)
(198,195,2)
(405,247,2)
(646,673,2)
(268,136,2)
(531,477,2)
(342,254,2)
(366,224,2)
(496,12,2)
(132,531,2)
(325,118,2)
(142,673,2)
(592,278,2)
(262,390,2)
(488,638,2)
(596,412,2)
(152,567,2)
(428,267,2)
(547,666,2)
(341,447,2)
(89,147,2)
(289,144,2)
(170,182,2)
(459,53,2)
(356,666,2)
(475,118,2)
(151,360,2)
(18,531,2)
(692,267,2)
(348,192,2)
(139,278,2)
(177,278,2)
(587,182,2)
(651,406,2)
(439,412,2)
(368,118,2)
(571,400,2)
(40,113,2)
(16,64,2)
(264,686,2)
(59,195,2)
(535,278,2)
(448,144,2)
(58,474,2)
(576,340,2)
(214,232,2)
(63,337,2)
(208,278,2)
(570,406,2)
(205,107,2)
(152,677,2)
(687,673,2)
(517,626,2)
(337,338,2)
(205,195,2)
(624,338,2)
(257,113,2)
(139,247,2)
(613,596,2)
(14,247,2)
(73,692,2)
(293,531,2)
(138,508,2)
(407,531,2)
(408,489,2)
(206,636,2)
(94,197,2)
(427,406,2)
(242,278,2)
(371,123,2)
(596,267,2)
(304,247,2)
(532,247,2)
(191,118,2)
(405,195,2)
(311,624,2)
(277,254,2)
(22,195,2)
(220,474,2)
(486,531,2)
(194,508,2)
(403,12,2)
(437,247,2)
(325,390,2)
(279,12,2)
(453,118,2)
(77,199,2)
(307,531,2)
(423,195,2)
(331,390,2)
(283,508,2)
(440,612,2)
(628,144,2)
(517,208,2)
(357,412,2)
(139,144,2)
(635,6,2)
(178,118,2)
(282,440,2)
(585,390,2)
(267,392,2)
(594,531,2)
(375,412,2)
(421,278,2)
(611,79,2)
(685,144,2)
(659,278,2)
(517,50,2)
(139,195,2)
(107,541,2)
(68,441,2)
(152,208,2)
(673,415,2)
(137,268,2)
(188,267,2)
(496,406,2)
(283,195,2)
(641,247,2)
(645,526,2)
(40,229,2)
(149,340,2)
(376,406,2)
(500,161,2)
(79,603,2)
(311,195,2)
(391,182,2)
(628,278,2)
(571,144,2)
(24,196,2)
(162,521,2)
(603,508,2)
(376,12,2)
(93,581,2)
(298,278,2)
(140,12,2)
(626,531,2)
(152,337,2)
(362,195,2)
(438,144,2)
(685,195,2)
(183,12,2)
(175,338,2)
(229,12,2)
(672,390,2)
(512,196,2)
(95,567,2)
(205,531,2)
(76,387,2)
(446,666,2)
(249,338,2)
(303,406,2)
(592,144,2)
(176,340,2)
(434,446,2)
(62,474,2)
(139,531,2)
(517,566,2)
(638,144,2)
(337,261,2)
(9,40,2)
(538,390,2)
(320,508,2)
(386,406,2)
(645,128,2)
(535,531,2)
(311,387,2)
(242,247,2)
(6,50,2)
(313,406,2)
(294,412,2)
(601,196,2)
(607,208,2)
(476,278,2)
(99,182,2)
(271,118,2)
(618,666,2)
(536,400,2)
(635,577,2)
(331,374,2)
(511,477,2)
(61,64,2)
(555,12,2)
(375,118,2)
(216,161,2)
(306,12,2)
(537,474,2)
(459,147,2)
(307,247,2)
(403,406,2)
(647,521,2)
(424,261,2)
(199,340,2)
(56,406,2)
(352,474,2)
(152,423,2)
(43,477,2)
(17,390,2)
(19,642,2)
(42,340,2)
(64,254,2)
(136,93,2)
(221,208,2)
(456,278,2)
(164,12,2)
(331,118,2)
(536,144,2)
(671,12,2)
(517,423,2)
(62,128,2)
(293,195,2)
(276,109,2)
(448,173,2)
(625,118,2)
(264,338,2)
(307,278,2)
(293,247,2)
(338,666,2)
(367,12,2)
(526,474,2)
(327,431,2)
(164,351,2)
(599,477,2)
(74,128,2)
(542,182,2)
(612,278,2)
(204,199,2)
(197,118,2)
(453,390,2)
(463,12,2)
(264,310,2)
(203,53,2)
(193,267,2)
(418,195,2)
(378,338,2)
(228,144,2)
(296,173,2)
(486,278,2)
(144,64,2)
(145,338,2)
(524,144,2)
(441,406,2)
(334,12,2)
(214,195,2)
(32,12,2)
(87,474,2)
(90,73,2)
(50,12,2)
(383,412,2)
(61,224,2)
(73,267,2)
(310,413,2)
(643,12,2)
(417,208,2)
(310,261,2)
(32,113,2)
(226,144,2)
(269,254,2)
(210,566,2)
(517,337,2)
(565,474,2)
(115,375,2)
(423,531,2)
(590,259,2)
(217,208,2)
(83,12,2)
(268,161,2)
(309,259,2)
(531,263,2)
(6,162,2)
(638,399,2)
(577,627,2)
(121,12,2)
(673,261,2)
(560,531,2)
(461,118,2)
(424,521,2)
(645,474,2)
(152,307,2)
(75,406,2)
(94,118,2)
(486,247,2)
(525,406,2)
(486,261,2)
(113,12,2)
(230,400,2)
(373,118,2)
(531,182,2)
(266,128,2)
(24,357,2)
(606,278,2)
(641,531,2)
(296,144,2)
(331,368,2)
(377,113,2)
(152,547,2)
(415,115,2)
(585,118,2)
(84,195,2)
(85,508,2)
(236,259,2)
(673,118,2)
(368,390,2)
(181,406,2)
(348,12,2)
(285,406,2)
(65,666,2)
(196,65,2)
(517,316,2)
(437,489,2)
(418,531,2)
(245,12,2)
(564,412,2)
(366,320,2)
(242,144,2)
(600,247,2)
(359,247,2)
(517,307,2)
(43,328,2)
(6,677,2)
(407,278,2)
(437,94,2)
(311,144,2)
(161,268,2)
(207,412,2)
(243,113,2)
(119,406,2)
(210,547,2)
(386,12,2)
(318,199,2)
(177,247,2)
(29,508,2)
(540,106,2)
(559,338,2)
(437,278,2)
(95,651,2)
(152,644,2)
(78,144,2)
(340,12,2)
(323,89,2)
(144,652,2)
(12,581,2)
(46,12,2)
(79,12,2)
(43,208,2)
(323,144,2)
(218,144,2)
(180,113,2)
(548,144,2)
(165,236,2)
(605,400,2)
(610,182,2)
(409,182,2)
(292,267,2)
(140,412,2)
(322,144,2)
(440,128,2)
(315,278,2)
(293,144,2)
(9,12,2)
(632,12,2)
(176,199,2)
(53,278,2)
(562,406,2)
(180,12,2)
(418,278,2)
(438,195,2)
(501,477,2)
(39,278,2)
(609,474,2)
(205,278,2)
(652,173,2)
(19,508,2)
(612,477,2)
(642,474,2)
(524,278,2)
(284,666,2)
(154,400,2)
(197,390,2)
(238,474,2)
(451,338,2)
(189,144,2)
(154,144,2)
(483,477,2)
(109,690,2)
(208,477,2)
(176,77,2)
(108,12,2)
(337,521,2)
(663,199,2)
(319,199,2)
(396,144,2)
(447,581,2)
(311,247,2)
(95,547,2)
(583,406,2)
(210,50,2)
(626,144,2)
(103,508,2)
(398,12,2)
(385,268,2)
(533,128,2)
(91,338,2)
(513,88,2)
(152,626,2)
(648,247,2)
(280,118,2)
(251,338,2)
(349,340,2)
(42,477,2)
(6,566,2)
(526,128,2)
(342,173,2)
(439,278,2)
(559,425,2)
(437,402,2)
(22,567,2)
(591,531,2)
(119,12,2)
(355,208,2)
(520,12,2)
(486,144,2)
(463,406,2)
(615,182,2)
(84,278,2)
(476,531,2)
(383,390,2)
(575,278,2)
(600,144,2)
(25,144,2)
(487,406,2)
(230,227,2)
(22,120,2)
(32,192,2)
(108,406,2)
(437,531,2)
(30,118,2)
(307,508,2)
(212,474,2)
(89,581,2)
(117,666,2)
(521,20,2)
(152,120,2)
(445,338,2)
(525,12,2)
(463,570,2)
(351,113,2)
(478,278,2)
(668,267,2)
(301,118,2)
(170,406,2)
(253,338,2)
(52,64,2)
(206,406,2)
(171,144,2)
(233,390,2)
(259,133,2)
(3,12,2)
(344,340,2)
(78,605,2)
(222,338,2)
(488,612,2)
(272,531,2)
(11,400,2)
(567,227,2)
(287,686,2)
(268,12,2)
(494,208,2)
(408,267,2)
(302,406,2)
(227,144,2)
(61,29,2)
(528,64,2)
(659,182,2)
(491,12,2)
(407,144,2)
(167,247,2)
(435,390,2)
(348,113,2)
(625,412,2)
(3,268,2)
(471,259,2)
(468,182,2)
(383,118,2)
(210,567,2)
(8,406,2)
(517,62,2)
(353,254,2)
(644,247,2)
(660,406,2)
(208,612,2)
(7,406,2)
(289,195,2)
(183,113,2)
(252,182,2)
(152,50,2)
(448,259,2)
(206,12,2)
(87,128,2)
(563,196,2)
(151,679,2)
(423,144,2)
(70,612,2)
(470,195,2)
(19,224,2)
(437,195,2)
(257,12,2)
(9,113,2)
(686,338,2)
(495,338,2)
(203,254,2)
(418,144,2)
(594,195,2)
(475,538,2)
(74,474,2)
(507,673,2)
(162,261,2)
(413,450,2)
(144,263,2)
(14,195,2)
(388,531,2)
(579,133,2)
(371,182,2)
(185,406,2)
(149,161,2)
(600,531,2)
(535,247,2)
(44,118,2)
(438,464,2)
(136,12,2)
(440,477,2)
(68,406,2)
(37,144,2)
(159,12,2)
(58,477,2)
(438,84,2)
(113,113,2)
(677,254,2)
(18,247,2)
(517,644,2)
(616,338,2)
(71,144,2)
(66,144,2)
(476,195,2)
(70,263,2)
(203,89,2)
(22,144,2)
(84,531,2)
(553,338,2)
(369,12,2)
(423,247,2)
(544,247,2)
(626,195,2)
(229,68,2)
(466,390,2)
(229,40,2)
(636,412,2)
(351,160,2)
(548,400,2)
(214,531,2)
(290,118,2)
(210,677,2)
(593,12,2)
(471,144,2)
(659,254,2)
(166,474,2)
(498,406,2)
(186,338,2)
(351,401,2)
(614,118,2)
(423,508,2)
(18,214,2)
(504,182,2)
(526,133,2)
(132,555,2)
(397,433,2)
(44,390,2)
(307,195,2)
(71,278,2)
(21,144,2)
(65,261,2)
(300,64,2)
(460,338,2)
(634,133,2)
(462,208,2)
(128,533,2)
(322,247,2)
(674,118,2)
(589,390,2)
(656,666,2)
(304,195,2)
(336,182,2)
(210,666,2)
(373,390,2)
(152,162,2)
(23,195,2)
(362,247,2)
(517,685,2)
(519,666,2)
(307,144,2)
(115,118,2)
(639,338,2)
(443,12,2)
(420,390,2)
(39,195,2)
(208,247,2)
(416,182,2)
(517,677,2)
(653,12,2)
(628,195,2)
(513,208,2)
(329,338,2)
(684,147,2)
(123,182,2)
(434,666,2)
(39,531,2)
(438,531,2)
(402,406,2)
(362,278,2)
(629,247,2)
(237,338,2)
(641,278,2)
(199,42,2)
(588,278,2)
(53,147,2)
(671,406,2)
(152,439,2)
(592,531,2)
(426,118,2)
(152,304,2)
(311,371,2)
(218,397,2)
(83,113,2)
(267,475,2)
(631,118,2)
(6,547,2)
(486,521,2)
(414,267,2)
(203,147,2)
(49,118,2)
(576,501,2)
(178,390,2)
(170,278,2)
(594,144,2)
(55,676,2)
(6,32,2)
(155,144,2)
(144,612,2)
(84,283,2)
(482,128,2)
(388,247,2)
(262,118,2)
(273,278,2)
(242,195,2)
(77,576,2)
(632,406,2)
(199,199,2)
(352,187,2)
(63,162,2)
(84,144,2)
(141,42,2)
(444,64,2)
(602,12,2)
(53,638,2)
(550,64,2)
(96,236,2)
(264,287,2)
(591,247,2)
(577,12,2)
(283,247,2)
(480,264,2)
(455,208,2)
(648,144,2)
(209,347,2)
(18,144,2)
(425,429,2)
(263,477,2)
(39,144,2)
(684,89,2)
(60,666,2)
(647,338,2)
(63,378,2)
(685,531,2)
(84,247,2)
(531,278,2)
(689,406,2)
(476,144,2)
(663,340,2)
(695,254,2)
(133,448,2)
(481,406,2)
(177,195,2)
(314,666,2)
(261,140,2)
(476,247,2)
(65,76,2)
(517,378,2)
(82,208,2)
(544,195,2)
(676,144,2)
(177,144,2)
(322,531,2)
(687,125,2)
(594,278,2)
(35,406,2)
(610,468,2)
(575,195,2)
(310,521,2)
(15,686,2)
(450,424,2)
(335,254,2)
(324,390,2)
(72,338,2)
(128,128,2)
(602,403,2)
(107,360,2)
(644,412,2)
(433,144,2)
(267,338,2)
(666,118,2)
(239,508,2)
(277,47,2)
(518,352,2)
(360,390,2)
(488,477,2)
(167,144,2)
(684,53,2)
(366,639,2)
(113,40,2)
(635,210,2)
(207,390,2)
(521,118,2)
(48,338,2)
(39,247,2)
(101,390,2)
(532,278,2)
(210,378,2)
(95,182,2)
(95,677,2)
(138,611,2)
(513,43,2)
(261,12,2)
(483,254,2)
(352,477,2)
(313,12,2)
(14,414,2)
(612,263,2)
(212,128,2)
(71,195,2)
(526,533,2)
(388,278,2)
(432,474,2)
(316,474,2)
(93,268,2)
(22,677,2)
(429,338,2)
(88,508,2)
(321,277,2)
(483,263,2)
(107,602,2)
(63,547,2)
(17,331,2)
(659,406,2)
(357,196,2)
(53,89,2)
(392,12,2)
(439,195,2)
(338,196,2)
(517,304,2)
(20,383,2)
(400,605,2)
(436,118,2)
(354,477,2)
(267,647,2)
(514,601,2)
(600,195,2)
(167,531,2)
(148,113,2)
(200,41,2)
(614,390,2)
(172,118,2)
(14,475,2)
(626,412,2)
(67,390,2)
(514,530,2)
(247,118,2)
(121,406,2)
(692,679,2)
(443,406,2)
(561,338,2)
(395,118,2)
(259,70,2)
(196,666,2)
(610,615,2)
(79,406,2)
(281,144,2)
(311,531,2)
(321,254,2)
(643,113,2)
(537,128,2)
(570,12,2)
(260,390,2)
(500,340,2)
(429,574,2)
(564,12,2)
(22,547,2)
(39,36,2)
(439,144,2)
(22,438,2)
(652,64,2)
(682,474,2)
(440,474,2)
(580,390,2)
(43,263,2)
(204,340,2)
(595,406,2)
(54,12,2)
(133,144,2)
(530,24,2)
(517,32,2)
(595,12,2)
(397,326,2)
(107,195,2)
(148,12,2)
(487,12,2)
(566,182,2)
(59,247,2)
(433,78,2)
(95,50,2)
(343,247,2)
(296,605,2)
(498,12,2)
(95,32,2)
(211,236,2)
(405,278,2)
(491,406,2)
(399,173,2)
(152,378,2)
(107,531,2)
(387,12,2)
(594,247,2)
(93,12,2)
(138,412,2)
(81,338,2)
(593,268,2)
(283,531,2)
(566,459,2)
(613,267,2)
(37,531,2)
(210,162,2)
(23,247,2)
(427,68,2)
(286,118,2)
(366,338,2)
(407,247,2)
(362,144,2)
(23,531,2)
(506,73,2)
(533,634,2)
(6,378,2)
(424,338,2)
(107,679,2)
(125,673,2)
(210,337,2)
(486,195,2)
(319,340,2)
(655,12,2)
(14,392,2)
(535,195,2)
(136,477,2)
(242,531,2)
(170,12,2)
(152,37,2)
(605,144,2)
(182,247,2)
(659,12,2)
(382,12,2)
(85,64,2)
(634,474,2)
(86,195,2)
(387,564,2)
(592,247,2)
(665,412,2)
(227,323,2)
(152,62,2)
(260,118,2)
(406,412,2)
(412,239,2)
(602,406,2)
(199,318,2)
(686,261,2)
(23,278,2)
(216,268,2)
(611,12,2)
(130,182,2)
(603,406,2)
(533,474,2)
(22,378,2)
(636,406,2)
(163,199,2)
(315,195,2)
(153,531,2)
(14,531,2)
(214,611,2)
(250,338,2)
(216,12,2)
(644,278,2)
(245,406,2)
(149,199,2)
(343,278,2)
(404,113,2)
(327,182,2)
(65,521,2)
(219,666,2)
(351,12,2)
(84,39,2)
(404,12,2)
(673,521,2)
(628,247,2)
(399,144,2)
(179,400,2)
(160,113,2)
(173,118,2)
(80,406,2)
(58,263,2)
(610,103,2)
(185,12,2)
(574,521,2)
(511,12,2)
(289,247,2)
(599,263,2)
(411,531,2)
(28,144,2)
(637,340,2)
(129,666,2)
(179,144,2)
(349,199,2)
(76,624,2)
(58,89,2)
(338,514,2)
(163,340,2)
(116,406,2)
(67,118,2)
(581,406,2)
(66,400,2)
(352,612,2)
(164,113,2)
(365,199,2)
(613,408,2)
(387,406,2)
(107,144,2)
(403,412,2)
(4,278,2)
(132,195,2)
(110,182,2)
(53,53,2)
(591,278,2)
(474,144,2)
(600,278,2)
(612,612,2)
(544,144,2)
(27,267,2)
(315,247,2)
(400,144,2)
(77,340,2)
(433,400,2)
(597,182,2)
(304,412,2)
(521,390,2)
(516,406,2)
(79,469,2)
(2,64,2)
(579,236,2)
(577,176,2)
(120,412,2)
(71,531,2)
(146,412,2)
(517,407,2)
(663,149,2)
(268,268,2)
(651,12,2)
(524,531,2)
(414,613,2)
(583,412,2)
(226,400,2)
(641,144,2)
(297,666,2)
(312,196,2)
(37,247,2)
(261,406,2)
(304,144,2)
(374,390,2)
(50,412,2)
(517,651,2)
(599,182,2)
(450,338,2)
(238,128,2)
(49,390,2)
(54,406,2)
(547,261,2)
(278,144,2)
(601,261,2)
(45,182,2)
(12,477,2)
(608,666,2)
(39,611,2)
(360,118,2)
(287,173,2)
(152,566,2)
(158,144,2)
(29,64,2)
(442,673,2)
(152,32,2)
(532,195,2)
(569,508,2)
(425,338,2)
(17,118,2)
(557,118,2)
(639,508,2)
(146,673,2)
(400,400,2)
(40,12,2)
(397,400,2)
(283,144,2)
(63,50,2)
(480,338,2)
(685,278,2)
(641,195,2)
(240,64,2)
(634,533,2)
(94,390,2)
(22,531,2)
(132,278,2)
(259,144,2)
(676,400,2)
(170,254,2)
(18,195,2)
(644,144,2)
(546,406,2)
(573,531,2)
(402,671,2)
(162,338,2)
(392,406,2)
(644,531,2)
(488,278,2)
(392,583,2)
(424,76,2)
(214,247,2)
(436,625,2)
(439,531,2)
(161,216,2)
(520,113,2)
(574,261,2)
(60,584,2)
(545,173,2)
(22,32,2)
(231,13,2)
(448,133,2)
(564,406,2)
(21,278,2)
(686,173,2)
(194,666,2)
(152,651,2)
(584,508,2)
(123,370,2)
(144,477,2)
(125,135,2)
(63,677,2)
(370,412,2)
(524,247,2)
(14,278,2)
(309,144,2)
(666,673,2)
(406,109,2)
(152,685,2)
(89,12,2)
(103,182,2)
(494,508,2)
(538,324,2)
(42,199,2)
(365,340,2)
(296,400,2)
(575,144,2)
(475,390,2)
(635,95,2)
(289,278,2)
(405,144,2)
(671,412,2)
(578,642,2)
(78,400,2)
(574,76,2)
(438,247,2)
(95,337,2)
(13,665,2)
(98,12,2)
(567,144,2)
(152,407,2)
(63,32,2)
(692,602,2)
(124,666,2)
(388,195,2)
(644,195,2)
(147,540,2)
(590,144,2)
(22,651,2)
(128,440,2)
(581,7,2)
(402,12,2)
(61,85,2)
(517,547,2)
(46,406,2)
(6,567,2)
(378,261,2)
(1,118,2)
(22,316,2)
(71,247,2)
(323,638,2)
(689,12,2)
(516,669,2)
(135,146,2)
(218,400,2)
(289,531,2)
(648,195,2)
(70,236,2)
(207,508,2)
(628,531,2)
(569,278,2)
(57,182,2)
(622,136,2)
(21,531,2)
(413,338,2)
(422,144,2)
(14,144,2)
(654,666,2)
(388,144,2)
(58,53,2)
(470,531,2)
(636,12,2)
(601,76,2)
(516,108,2)
(263,12,2)
(22,50,2)
(295,278,2)
-----------------------------------
(0,do)
(1,CODE_EOI)
(2,0)
(3,residue)
(4,len)
(5,sp)
(6,return (0)
(7,codep->length - sp->dec_restart)
(8,lzw_nextdata)
(9,codep->value)
(10,1)
(11,codep)
(12,residue > occ)
(13,sp->dec_codetab != NULL)
(14,sp->dec_maxcodep = maxcodep)
(15,codep)
(16,occ)
(17,_TIFFmemset(free_entp, 0,\n\\n\\t\\t\\t\\t\\t    (CSIZE - CODE_FIRST)
(18,tif->tif_rawcp = (uint8*)
(19,codeLoop(tif, module)
(20,sp->dec_codetab + CODE_FIRST)
(21,tif)
(22,tif->tif_rawcc -= (tmsize_t)
(23,lzw_nextbits)
(24,sp->dec_codetab[CSIZE])
(25,tp)
(26,)
(27,maxcodep)
(28,len)
(29,tif->tif_row)
(30,dec_codetab)
(31,tmsize_t)
(32,*tp)
(33,len)
(34,)
(35,residue)
(36,uint8*)
(37,sp->lzw_nextbits)
(38,codep)
(39,(uint8*)
(40,codep = codep->next)
(41,void)
(42,--occ)
(43,(unsigned __int64)
(44,free_entp)
(45,tif)
(46,tif_rawcp)
(47,char)
(48,free_entp)
(49,BITS_MIN)
(50,sp->dec_restart)
(51,occ)
(52,"Wrong length of decoded string: "\n\\n\\t\\t\\t\\t    "data probably corrupted at scanline %d")
(53,op += len)
(54,tif_rawcc)
(55,tp)
(56,nextbits)
(57,code)
(58,op + occ)
(59,tif_rawcc)
(60,TIFFErrorExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t    "Corrupted LZW table at scanline %d",\n\\n\\t\\t\\t    tif->tif_row)
(61,TIFFErrorExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t\\t    "Wrong length of decoded string: "\n\\n\\t\\t\\t\\t    "data probably corrupted at scanline %d",\n\\n\\t\\t\\t\\t    tif->tif_row)
(62,*--tp)
(63,return (0)
(64,codep->length == 0)
(65,free_entp->next)
(66,t)
(67,nbits)
(68,codep = sp->dec_codep)
(69,occ)
(70,codep->length > occ)
(71,maxcodep)
(72,codep)
(73,++nbits > BITS_MAX)
(74,occ)
(75,sp)
(76,free_entp->next = oldcodep)
(77,--tp)
(78,codep->value)
(79,(unsigned char *)
(80,sp)
(81,module)
(82,1)
(83,tp)
(84,(uint8*)
(85,tif->tif_clientdata)
(86,CODE_CLEAR)
(87,value)
(88,tif->tif_clientdata)
(89,op += residue)
(90,BITS_MAX)
(91,value)
(92,length)
(93,--residue)
(94,nbitsmask = MAXCODE(BITS_MIN)
(95,return (0)
(96,length)
(97,uint16 s)
(98,residue)
(99,*op++ = (char)
(100,len)
(101,dec_codetab)
(102,)
(103,tif->tif_row)
(104,occ)
(105,sp)
(106,uint8* op0)
(107,(unsigned short)
(108,tif->tif_rawcc)
(109,(tmsize_t)
(110,sp)
(111,0)
(112,)
(113,--residue && codep)
(114,residue)
(115,sp->dec_codetab[0])
(116,sp->dec_restart)
(117,free_entp)
(118,code == CODE_CLEAR)
(119,dec_nbitsmask)
(120,sp->dec_codep)
(121,lzw_nbits)
(122,)
(123,sp->dec_codetab + code)
(124,oldcodep)
(125,&sp->dec_codetab[CSIZE])
(126,)
(127,)
(128,--occ && codep)
(129,sp)
(130,tif)
(131,if (code == CODE_CLEAR)
(132,sp->lzw_nextbits = nextbits)
(133,codep = codep->next)
(134,"LZWDecode")
(135,sp->dec_codetab[CSIZE])
(136,--residue > occ)
(137,occ)
(138,NextCode(tif, sp, bp, code, GetNextCode)
(139,sp)
(140,sp->dec_free_entp)
(141,codep)
(142,free_entp)
(143,)
(144,codep->length > occ)
(145,tif)
(146,sp->dec_codetab)
(147,*op = (char*)
(148,tp)
(149,codep->value)
(150,module)
(151,MAXCODE(nbits)
(152,return (0)
(153,code)
(154,t)
(155,sp)
(156,codep)
(157,nbitsmask)
(158,op)
(159,codep)
(160,t = codep->value)
(161,codep = codep->next)
(162,free_entp->firstchar)
(163,next)
(164,*tp = (char)
(165,codep)
(166,sp)
(167,dec_nbitsmask)
(168,do)
(169,nextdata)
(170,occ)
(171,codep)
(172,free_entp)
(173,codep = sp->dec_codetab + code)
(174,code)
(175,tif_row)
(176,*--tp)
(177,occ)
(178,0)
(179,tp)
(180,t)
(181,sp)
(182,code > CODE_CLEAR)
(183,residue)
(184,if (codep)
(185,sp)
(186,next)
(187,long)
(188,BITS_MAX)
(189,length)
(190,code)
(191,sp)
(192,tp = op)
(193,dec_codetab)
(194,tif->tif_row)
(195,code == CODE_EOI)
(196,free_entp->next < &sp->dec_codetab[0])
(197,MAXCODE(BITS_MIN)
(198,bp)
(199,--occ && codep)
(200,(void)
(201,module)
(202,nextbits)
(203,op++)
(204,codep)
(205,sp->lzw_nbits = (unsigned short)
(206,nextdata = sp->lzw_nextdata)
(207,NextCode(tif, sp, bp, code, GetNextCode)
(208,occ > 0)
(209,(long)
(210,return (0)
(211,occ)
(212,tp)
(213,if (code >= 256)
(214,(uint8*)
(215,do)
(216,codep->next)
(217,tif_row)
(218,*tp = (char)
(219,&sp->dec_codetab[0])
(220,tp)
(221,"Not enough data at scanline %d (short %I64d bytes)
(222,maxcodep)
(223,)
(224,module[] = "LZWDecode")
(225,)
(226,next)
(227,tp = op + len)
(228,codep)
(229,codep->next)
(230,--tp)
(231,assert(sp->dec_codetab != NULL)
(232,uint8*)
(233,sp)
(234,0)
(235,firstchar)
(236,codep)
(237,free_entp)
(238,codep)
(239,DecoderState(tif)
(240,module)
(241,while (occ > 0)
(242,nextbits)
(243,codep)
(244,sp)
(245,lzw_nextbits)
(246,op)
(247,code == CODE_EOI)
(248,)
(249,length)
(250,free_entp)
(251,tif_clientdata)
(252,tif)
(253,"Corrupted LZW table at scanline %d")
(254,code >= 256)
(255,dec_codetab)
(256,tif)
(257,t)
(258,residue)
(259,codep && codep->length > occ)
(260,tif)
(261,free_entp = sp->dec_free_entp)
(262,bp)
(263,occ -= residue)
(264,(codep < free_entp)
(265,occ0)
(266,codep)
(267,++free_entp > maxcodep)
(268,--residue > occ && codep)
(269,0)
(270,)
(271,nbitsmask)
(272,GetNextCode)
(273,assert(occ >= len)
(274,if (codep)
(275,op)
(276,return (0)
(277,(char)
(278,codep)
(279,sp)
(280,0)
(281,codep)
(282,codep)
(283,tif->tif_rawcp)
(284,tif_clientdata)
(285,dec_codep)
(286,CSIZE)
(287,codep->firstchar)
(288,dec_codetab)
(289,sp->lzw_nextdata = nextdata)
(290,sp)
(291,sp->lzw_nextbits)
(292,nbitsmask)
(293,tif_rawcp)
(294,sp != NULL)
(295,op)
(296,codep->next)
(297,tif_row)
(298,tif)
(299,if ((tmsize_t)
(300,tif_clientdata)
(301,code)
(302,codep)
(303,length)
(304,sp->dec_free_entp)
(305,firstchar)
(306,nextdata)
(307,tif->tif_rawcc)
(308,op)
(309,codep)
(310,free_entp->firstchar)
(311,sp->dec_oldcodep = oldcodep)
(312,sp)
(313,sp)
(314,tif)
(315,dec_free_entp)
(316,sp->dec_restart)
(317,tp = op + occ)
(318,codep = codep->next)
(319,value)
(320,tif->tif_row)
(321,*op++ = (char)
(322,dec_oldcodep)
(323,op + len)
(324,nbitsmask-1)
(325,sp)
(326,char)
(327,(char)
(328,unsigned __int64)
(329,free_entp)
(330,tp)
(331,(CSIZE - CODE_FIRST)
(332,sp)
(333,oldcodep)
(334,dec_restart)
(335,code)
(336,occ)
(337,free_entp->length)
(338,free_entp->next < &sp->dec_codetab[0] ||\n\\n\\t\\t    free_entp->next >= &sp->dec_codetab[CSIZE])
(339,dec_restart)
(340,codep)
(341,codep)
(342,codep->length)
(343,lzw_nbits)
(344,occ)
(345,nbitsmask)
(346,)
(347,long)
(348,--tp)
(349,codep)
(350,codep)
(351,(char)
(352,(long)
(353,op)
(354,(tmsize_t)
(355,occ)
(356,0)
(357,sp->dec_codetab)
(358,firstchar)
(359,break;)
(360,nbits = BITS_MIN)
(361,maxcodep)
(362,nextdata)
(363,module)
(364,free_entp)
(365,codep)
(366,TIFFErrorExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t    "Corrupted LZW table at scanline %d",\n\\n\\t\\t\\t    tif->tif_row)
(367,sp->dec_restart = 0)
(368,CSIZE - CODE_FIRST)
(369,occ)
(370,sp->dec_codetab)
(371,oldcodep = sp->dec_codetab + code)
(372,do)
(373,code)
(374,sizeof (code_t)
(375,sp->dec_codetab)
(376,dec_free_entp)
(377,codep)
(378,free_entp->value)
(379,tif)
(380,occ)
(381,1)
(382,tp)
(383,sp->dec_codetab)
(384,dec_codetab)
(385,next)
(386,bp)
(387,oldcodep = sp->dec_oldcodep)
(388,sp)
(389,assert(sp != NULL)
(390,code == CODE_CLEAR)
(391,oldcodep)
(392,maxcodep = sp->dec_maxcodep)
(393,)
(394,dec_restart)
(395,code)
(396,break;)
(397,(char)
(398,dec_maxcodep)
(399,codep->length)
(400,codep && tp > op)
(401,char)
(402,nbitsmask = sp->dec_nbitsmask)
(403,sp->lzw_nbits)
(404,next)
(405,sp)
(406,sp->dec_restart)
(407,sp->dec_nbitsmask)
(408,nbitsmask-1)
(409,tif_row)
(410,tif)
(411,code)
(412,*sp = DecoderState(tif)
(413,free_entp->firstchar = free_entp->next->firstchar)
(414,maxcodep = sp->dec_codetab + nbitsmask-1)
(415,&sp->dec_codetab[0])
(416,tif_clientdata)
(417,tif)
(418,tif)
(419,if (free_entp->next < &sp->dec_codetab[0] ||\n\\n\\t\\t    free_entp->next >= &sp->dec_codetab[CSIZE])
(420,dec_codetab)
(421,break;)
(422,dec_codep)
(423,tif->tif_rawcp)
(424,free_entp->next)
(425,free_entp->next->length+1)
(426,sp->dec_codetab)
(427,codep->length)
(428,nbits)
(429,free_entp->next->length)
(430,1)
(431,char)
(432,occ)
(433,t = codep->value)
(434,sp->dec_codetab[0])
(435,1)
(436,sp->dec_codetab + code)
(437,sp->dec_nbitsmask = nbitsmask)
(438,(tmsize_t)
(439,sp->dec_oldcodep)
(440,--occ)
(441,sp->dec_codep)
(442,CSIZE)
(443,dec_bitsleft)
(444,tif)
(445,length)
(446,sp->dec_codetab)
(447,--residue)
(448,codep->next)
(449,residue)
(450,free_entp->next->firstchar)
(451,firstchar)
(452,bp)
(453,code_t)
(454,op)
(455,0)
(456,occ)
(457,if (++nbits > BITS_MAX)
(458,do)
(459,op++)
(460,free_entp)
(461,free_entp)
(462,tif_clientdata)
(463,sp->dec_bitsleft = (((uint64)
(464,tmsize_t)
(465,break;)
(466,CODE_CLEAR)
(467,op)
(468,tif->tif_clientdata)
(469,unsigned char *)
(470,bp)
(471,codep)
(472,op)
(473,if (code == CODE_EOI)
(474,codep)
(475,maxcodep = sp->dec_codetab + nbitsmask-1)
(476,0)
(477,occ = (long)
(478,len)
(479,code)
(480,free_entp->value = (codep < free_entp)
(481,sp)
(482,--tp)
(483,occ--)
(484,code)
(485,occ)
(486,sp->dec_free_entp = free_entp)
(487,3)
(488,occ >= len)
(489,nbitsmask = MAXCODE(nbits)
(490,do)
(491,maxcodep)
(492,op0)
(493,NULL)
(494,tif->tif_row)
(495,256)
(496,nbitsmask)
(497,if(codep->length == 0)
(498,sp)
(499,t)
(500,codep->next)
(501,op + occ)
(502,t)
(503,if (sp->dec_restart)
(504,code)
(505,bp)
(506,nbits)
(507,dec_codetab)
(508,TIFF* tif)
(509,if (codep)
(510,free_entp)
(511,sp->dec_restart += occ)
(512,CSIZE)
(513,TIFFErrorExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t"Not enough data at scanline %d (short %I64d bytes)
(514,free_entp->next >= &sp->dec_codetab[CSIZE])
(515,free_entp)
(516,(uint64)
(517,return (1)
(518,sp->dec_restart = (long)
(519,next)
(520,value)
(521,free_entp = sp->dec_codetab + CODE_FIRST)
(522,free_entp)
(523,if (++free_entp > maxcodep)
(524,nbits)
(525,sp)
(526,codep->value)
(527,if (free_entp < &sp->dec_codetab[0] ||\n\\n\\t\\t    free_entp >= &sp->dec_codetab[CSIZE])
(528,tif_row)
(529,do)
(530,&sp->dec_codetab[CSIZE])
(531,occ > 0)
(532,sp)
(533,codep = codep->next)
(534,tp)
(535,nbitsmask)
(536,codep)
(537,codep)
(538,sp->dec_codetab + nbitsmask-1)
(539,)
(540,(char*)
(541,unsigned short)
(542,0)
(543,dec_restart)
(544,oldcodep)
(545,sp->dec_codep = codep)
(546,oldcodep)
(547,free_entp->next)
(548,value)
(549,)
(550,codep)
(551,)
(552,tif)
(553,oldcodep)
(554,if (occ > 0)
(555,nextbits = sp->lzw_nextbits)
(556,)
(557,dec_codetab)
(558,if (codep)
(559,free_entp->length = free_entp->next->length+1)
(560,CODE_EOI)
(561,tif)
(562,codep)
(563,free_entp)
(564,sp->dec_oldcodep)
(565,dec_restart)
(566,*op++)
(567,*tp)
(568,)
(569,codeLoop(tif, module)
(570,((uint64)
(571,tp)
(572,sp)
(573,sp)
(574,free_entp->next)
(575,lzw_nextdata)
(576,tp = op + occ)
(577,return (1)
(578,tif)
(579,codep->length)
(580,CODE_FIRST)
(581,residue = codep->length - sp->dec_restart)
(582,)
(583,sp->dec_maxcodep)
(584,tif->tif_clientdata)
(585,GetNextCode)
(586,occ0)
(587,tif_name)
(588,occ)
(589,BITS_MIN)
(590,next)
(591,dec_maxcodep)
(592,tif)
(593,codep)
(594,tif_rawcp)
(595,tif)
(596,sp->dec_codetab)
(597,"LZWDecode: Corrupted LZW table at scanline %d")
(598,if (code == CODE_EOI)
(599,occ--)
(600,sp)
(601,free_entp->next)
(602,nbits = sp->lzw_nbits)
(603,tif->tif_rawcp)
(604,dec_oldcodep)
(605,codep = codep->next)
(606,module)
(607,tif)
(608,"Corrupted LZW table at scanline %d")
(609,occ)
(610,TIFFErrorExt(tif->tif_clientdata, tif->tif_name,\n\\n\\t\\t\\t\\t"LZWDecode: Corrupted LZW table at scanline %d",\n\\n\\t\\t\\t\\t\\t     tif->tif_row)
(611,bp = (unsigned char *)
(612,occ -= len)
(613,sp->dec_codetab + nbitsmask-1)
(614,maxcodep)
(615,tif->tif_name)
(616,free_entp)
(617,code)
(618,0)
(619,nbitsmask)
(620,nbits)
(621,len)
(622,codep)
(623,NULL)
(624,oldcodep = codep)
(625,sp->dec_codetab)
(626,sp->lzw_nbits)
(627,sp->dec_restart)
(628,free_entp)
(629,CODE_CLEAR)
(630,char*)
(631,codep)
(632,nbits)
(633,continue;)
(634,codep->next)
(635,RET)
(636,sp->lzw_nextdata)
(637,tp)
(638,len = codep->length)
(639,tif->tif_clientdata)
(640,tif)
(641,sp)
(642,codep)
(643,codep)
(644,sp->lzw_nextdata)
(645,*--tp = codep->value)
(646,sp)
(647,++free_entp)
(648,sp)
(649,free_entp)
(650,if (code > CODE_CLEAR)
(651,sp->dec_bitsleft)
(652,codep->length)
(653,occ)
(654,next)
(655,op)
(656,module)
(657,if (codep->length > occ)
(658,0)
(659,0)
(660,sp)
(661,next)
(662,module)
(663,*--tp = codep->value)
(664,length)
(665,sp->dec_codetab)
(666,free_entp < &sp->dec_codetab[0] ||\n\\n\\t\\t    free_entp >= &sp->dec_codetab[CSIZE])
(667,op)
(668,sp)
(669,uint64)
(670,)
(671,sp->dec_nbitsmask)
(672,CODE_FIRST)
(673,free_entp < &sp->dec_codetab[0])
(674,sp)
(675,)
(676,codep)
(677,*op++)
(678,next)
(679,nbits = BITS_MAX)
(680,if (residue > occ)
(681,s)
(682,next)
(683,nbits)
(684,tp > op)
(685,sp->dec_maxcodep)
(686,codep < free_entp)
(687,free_entp >= &sp->dec_codetab[CSIZE])
(688,)
(689,sp)
(690,tmsize_t occ0)
(691,sp)
(692,++nbits)
(693,dec_codetab)
(694,)
(695,occ)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
