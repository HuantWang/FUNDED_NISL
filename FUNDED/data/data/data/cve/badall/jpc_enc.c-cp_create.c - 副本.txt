-----label-----
1
-----code-----
static jpc_enc_cp_t *cp_create(const char *optstr, jas_image_t *image)
{
	jpc_enc_cp_t *cp;
	jas_tvparser_t *tvp;
	int ret;
	int numilyrrates;
	double *ilyrrates;
	int i;
	int tagid;
	jpc_enc_tcp_t *tcp;
	jpc_enc_tccp_t *tccp;
	jpc_enc_ccp_t *ccp;
	int cmptno;
	uint_fast16_t rlvlno;
	uint_fast16_t prcwidthexpn;
	uint_fast16_t prcheightexpn;
	bool enablemct;
	uint_fast32_t jp2overhead;
	uint_fast16_t lyrno;
	uint_fast32_t hsteplcm;
	uint_fast32_t vsteplcm;
	bool mctvalid;

	tvp = 0;
	cp = 0;
	ilyrrates = 0;
	numilyrrates = 0;

	if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))) {
		goto error;
	}

	prcwidthexpn = 15;
	prcheightexpn = 15;
	enablemct = true;
	jp2overhead = 0;

	cp->ccps = 0;
	cp->debug = 0;
	cp->imgareatlx = UINT_FAST32_MAX;
	cp->imgareatly = UINT_FAST32_MAX;
	cp->refgrdwidth = 0;
	cp->refgrdheight = 0;
	cp->tilegrdoffx = UINT_FAST32_MAX;
	cp->tilegrdoffy = UINT_FAST32_MAX;
	cp->tilewidth = 0;
	cp->tileheight = 0;
	cp->numcmpts = jas_image_numcmpts(image);

	hsteplcm = 1;
	vsteplcm = 1;
	for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {
		if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=
		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +
		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {
			jas_eprintf("unsupported image type\n");
			goto error;
		}
		/* Note: We ought to be calculating the LCMs here.  Fix some day. */
		hsteplcm *= jas_image_cmpthstep(image, cmptno);
		vsteplcm *= jas_image_cmptvstep(image, cmptno);
	}

	if (!(cp->ccps = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t)))) {
		goto error;
	}
	for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts); ++cmptno,
	  ++ccp) {
		ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);
		ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);
		/* XXX - this isn't quite correct for more general image */
		ccp->sampgrdsubstepx = 0;
		ccp->sampgrdsubstepx = 0;
		ccp->prec = jas_image_cmptprec(image, cmptno);
		ccp->sgnd = jas_image_cmptsgnd(image, cmptno);
		ccp->numstepsizes = 0;
		memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));
	}

	cp->rawsize = jas_image_rawsize(image);
	cp->totalsize = UINT_FAST32_MAX;

	tcp = &cp->tcp;
	tcp->csty = 0;
	tcp->intmode = true;
	tcp->prg = JPC_COD_LRCPPRG;
	tcp->numlyrs = 1;
	tcp->ilyrrates = 0;

	tccp = &cp->tccp;
	tccp->csty = 0;
	tccp->maxrlvls = 6;
	tccp->cblkwidthexpn = 6;
	tccp->cblkheightexpn = 6;
	tccp->cblksty = 0;
	tccp->numgbits = 2;

	if (!(tvp = jas_tvparser_create(optstr ? optstr : ""))) {
		goto error;
	}

	while (!(ret = jas_tvparser_next(tvp))) {
		switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,
		  jas_tvparser_gettag(tvp)))->id) {
		case OPT_DEBUG:
			cp->debug = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_IMGAREAOFFX:
			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_IMGAREAOFFY:
			cp->imgareatly = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_TILEGRDOFFX:
			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_TILEGRDOFFY:
			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_TILEWIDTH:
			cp->tilewidth = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_TILEHEIGHT:
			cp->tileheight = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_PRCWIDTH:
			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
			break;
		case OPT_PRCHEIGHT:
			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
			break;
		case OPT_CBLKWIDTH:
			tccp->cblkwidthexpn =
			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
			break;
		case OPT_CBLKHEIGHT:
			tccp->cblkheightexpn =
			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
			break;
		case OPT_MODE:
			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,
			  jas_tvparser_getval(tvp)))->id) < 0) {
				jas_eprintf("ignoring invalid mode %s\n",
				  jas_tvparser_getval(tvp));
			} else {
				tcp->intmode = (tagid == MODE_INT);
			}
			break;
		case OPT_PRG:
			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
			  jas_tvparser_getval(tvp)))->id) < 0) {
				jas_eprintf("ignoring invalid progression order %s\n",
				  jas_tvparser_getval(tvp));
			} else {
				tcp->prg = tagid;
			}
			break;
		case OPT_NOMCT:
			enablemct = false;
			break;
		case OPT_MAXRLVLS:
			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_SOP:
			cp->tcp.csty |= JPC_COD_SOP;
			break;
		case OPT_EPH:
			cp->tcp.csty |= JPC_COD_EPH;
			break;
		case OPT_LAZY:
			tccp->cblksty |= JPC_COX_LAZY;
			break;
		case OPT_TERMALL:
			tccp->cblksty |= JPC_COX_TERMALL;
			break;
		case OPT_SEGSYM:
			tccp->cblksty |= JPC_COX_SEGSYM;
			break;
		case OPT_VCAUSAL:
			tccp->cblksty |= JPC_COX_VSC;
			break;
		case OPT_RESET:
			tccp->cblksty |= JPC_COX_RESET;
			break;
		case OPT_PTERM:
			tccp->cblksty |= JPC_COX_PTERM;
			break;
		case OPT_NUMGBITS:
			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_RATE:
			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,
			  &cp->totalsize)) {
				jas_eprintf("ignoring bad rate specifier %s\n",
				  jas_tvparser_getval(tvp));
			}
			break;
		case OPT_ILYRRATES:
			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,
			  &ilyrrates)) {
				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",
				  jas_tvparser_getval(tvp));
			}
			break;

		case OPT_JP2OVERHEAD:
			jp2overhead = atoi(jas_tvparser_getval(tvp));
			break;
		default:
			jas_eprintf("warning: ignoring invalid option %s\n",
			 jas_tvparser_gettag(tvp));
			break;
		}
	}

	jas_tvparser_destroy(tvp);
	tvp = 0;

	if (cp->totalsize != UINT_FAST32_MAX) {
		cp->totalsize = (cp->totalsize > jp2overhead) ?
		  (cp->totalsize - jp2overhead) : 0;
	}

	if (cp->imgareatlx == UINT_FAST32_MAX) {
		cp->imgareatlx = 0;
	} else {
		if (hsteplcm != 1) {
			jas_eprintf("warning: overriding imgareatlx value\n");
		}
		cp->imgareatlx *= hsteplcm;
	}
	if (cp->imgareatly == UINT_FAST32_MAX) {
		cp->imgareatly = 0;
	} else {
		if (vsteplcm != 1) {
			jas_eprintf("warning: overriding imgareatly value\n");
		}
		cp->imgareatly *= vsteplcm;
	}
	cp->refgrdwidth = cp->imgareatlx + jas_image_width(image);
	cp->refgrdheight = cp->imgareatly + jas_image_height(image);
	if (cp->tilegrdoffx == UINT_FAST32_MAX) {
		cp->tilegrdoffx = cp->imgareatlx;
	}
	if (cp->tilegrdoffy == UINT_FAST32_MAX) {
		cp->tilegrdoffy = cp->imgareatly;
	}
	if (!cp->tilewidth) {
		cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;
	}
	if (!cp->tileheight) {
		cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;
	}

	if (cp->numcmpts == 3) {
		mctvalid = true;
		for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {
			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||
			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||
			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||
			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {
				mctvalid = false;
			}
		}
	} else {
		mctvalid = false;
	}
	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB) {
		jas_eprintf("warning: color space apparently not RGB\n");
	}
	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB) {
		tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);
	} else {
		tcp->mctid = JPC_MCT_NONE;
	}
	tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS);

	for (rlvlno = 0; rlvlno < tccp->maxrlvls; ++rlvlno) {
		tccp->prcwidthexpns[rlvlno] = prcwidthexpn;
		tccp->prcheightexpns[rlvlno] = prcheightexpn;
	}
	if (prcwidthexpn != 15 || prcheightexpn != 15) {
		tccp->csty |= JPC_COX_PRT;
	}

	/* Ensure that the tile width and height is valid. */
	if (!cp->tilewidth) {
		jas_eprintf("invalid tile width %lu\n", (unsigned long)
		  cp->tilewidth);
		goto error;
	}
	if (!cp->tileheight) {
		jas_eprintf("invalid tile height %lu\n", (unsigned long)
		  cp->tileheight);
		goto error;
	}

	/* Ensure that the tile grid offset is valid. */
	if (cp->tilegrdoffx > cp->imgareatlx ||
	  cp->tilegrdoffy > cp->imgareatly ||
	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||
	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly) {
		jas_eprintf("invalid tile grid offset (%lu, %lu)\n",
		  (unsigned long) cp->tilegrdoffx, (unsigned long)
		  cp->tilegrdoffy);
		goto error;
	}

	cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,
	  cp->tilewidth);
	cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,
	  cp->tileheight);
	cp->numtiles = cp->numhtiles * cp->numvtiles;

	if (ilyrrates && numilyrrates > 0) {
		tcp->numlyrs = numilyrrates + 1;
		if (!(tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1),
		  sizeof(jpc_fix_t)))) {
			goto error;
		}
		for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1); ++i) {
			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);
		}
	}

	/* Ensure that the integer mode is used in the case of lossless
	  coding. */
	if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)) {
		jas_eprintf("cannot use real mode for lossless coding\n");
		goto error;
	}

	/* Ensure that the precinct width is valid. */
	if (prcwidthexpn > 15) {
		jas_eprintf("invalid precinct width\n");
		goto error;
	}

	/* Ensure that the precinct height is valid. */
	if (prcheightexpn > 15) {
		jas_eprintf("invalid precinct height\n");
		goto error;
	}

	/* Ensure that the code block width is valid. */
	if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12) {
		jas_eprintf("invalid code block width %d\n",
		  JPC_POW2(cp->tccp.cblkwidthexpn));
		goto error;
	}

	/* Ensure that the code block height is valid. */
	if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12) {
		jas_eprintf("invalid code block height %d\n",
		  JPC_POW2(cp->tccp.cblkheightexpn));
		goto error;
	}

	/* Ensure that the code block size is not too large. */
	if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12) {
		jas_eprintf("code block size too large\n");
		goto error;
	}

	/* Ensure that the number of layers is valid. */
	if (cp->tcp.numlyrs > 16384) {
		jas_eprintf("too many layers\n");
		goto error;
	}

	/* There must be at least one resolution level. */
	if (cp->tccp.maxrlvls < 1) {
		jas_eprintf("must be at least one resolution level\n");
		goto error;
	}

	/* Ensure that the number of guard bits is valid. */
	if (cp->tccp.numgbits > 8) {
		jas_eprintf("invalid number of guard bits\n");
		goto error;
	}

	/* Ensure that the rate is within the legal range. */
	if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize) {
		jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);
	}

	/* Ensure that the intermediate layer rates are valid. */
	if (tcp->numlyrs > 1) {
		/* The intermediate layers rates must increase monotonically. */
		for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {
			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {
				jas_eprintf("intermediate layer rates must increase monotonically\n");
				goto error;
			}
		}
		/* The intermediate layer rates must be less than the overall rate. */
		if (cp->totalsize != UINT_FAST32_MAX) {
			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {
				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)
				  / cp->rawsize) {
					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");
					goto error;
				}
			}
		}
	}

	if (ilyrrates) {
		jas_free(ilyrrates);
	}

	return cp;

error:

	if (ilyrrates) {
		jas_free(ilyrrates);
	}
	if (tvp) {
		jas_tvparser_destroy(tvp);
	}
	if (cp) {
		jpc_enc_cp_destroy(cp);
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
9,11
12,13
12,14
13,14
15,16
15,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
18,29
18,30
18,31
18,32
18,33
18,34
18,35
18,36
18,37
18,38
18,39
18,40
18,41
18,42
18,43
18,44
18,45
18,46
18,47
18,48
18,49
18,50
18,51
18,52
18,53
18,54
18,55
18,56
18,57
18,58
18,59
18,60
18,61
18,62
18,63
18,64
18,65
18,66
18,67
18,68
18,69
18,70
18,71
18,72
18,73
18,74
18,75
18,76
18,77
18,78
18,79
18,80
18,81
18,82
18,83
18,84
18,85
18,86
18,87
18,88
18,89
18,90
18,91
18,92
18,93
18,94
18,95
18,96
18,97
18,98
18,99
18,100
18,101
18,102
18,103
18,104
18,105
18,106
18,107
18,108
18,109
18,110
18,111
18,112
18,113
18,114
18,115
18,116
18,117
18,118
18,119
18,120
18,121
18,122
18,123
18,124
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
28,29
30,31
30,32
33,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
49,50
50,51
50,52
52,53
54,55
55,56
55,57
57,58
59,60
60,61
60,62
61,62
63,64
63,65
66,67
67,68
67,69
68,69
70,71
70,72
73,74
74,75
74,76
75,76
77,78
77,79
80,81
81,82
81,83
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
106,107
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
130,131
132,133
133,134
133,135
135,136
137,138
138,139
138,140
139,140
142,143
143,144
143,145
144,145
147,148
148,149
148,150
149,150
152,153
153,154
153,155
154,155
157,158
157,159
158,159
159,160
160,161
160,162
161,162
163,164
163,165
164,165
166,167
167,168
167,169
168,169
171,172
172,173
174,175
175,176
175,177
176,177
179,180
180,181
180,182
181,182
184,185
185,186
185,187
186,187
189,190
190,191
190,192
191,192
194,195
195,196
195,197
196,197
196,198
197,198
201,202
202,203
202,204
203,204
203,205
204,205
208,209
209,210
209,211
210,211
210,212
211,212
214,215
216,217
217,218
217,219
218,219
218,220
219,220
222,223
224,225
225,226
225,227
226,227
226,228
227,228
231,232
232,233
232,234
233,234
233,235
234,235
238,239
239,240
239,241
240,241
240,242
241,242
244,245
246,247
247,248
247,249
248,249
248,250
249,250
252,253
254,255
255,256
255,257
256,257
256,258
257,258
261,262
262,263
262,264
263,264
263,265
264,265
268,269
269,270
269,271
270,271
270,272
271,272
274,275
274,276
275,276
277,278
279,280
280,281
280,282
281,282
284,285
285,286
285,287
286,287
289,290
289,291
289,292
289,293
290,291
291,292
291,293
292,293
295,296
295,297
296,297
298,299
298,300
299,300
301,302
303,304
304,305
306,307
306,308
306,309
307,308
307,309
308,309
308,310
309,310
309,311
310,311
310,312
311,312
311,313
311,314
312,313
314,315
316,317
318,319
318,320
318,321
319,320
321,322
323,324
325,326
325,327
326,327
328,329
330,331
330,332
331,332
331,333
332,333
332,334
332,335
333,334
335,336
337,338
339,340
339,341
339,342
340,341
342,343
344,345
346,347
346,348
347,348
349,350
351,352
351,353
352,353
353,354
353,355
354,355
357,358
359,360
360,361
360,362
361,362
363,364
363,365
363,366
364,365
366,367
368,369
370,371
371,372
371,373
372,373
374,375
374,376
374,377
375,376
377,378
379,380
381,382
381,383
382,383
383,384
384,385
384,386
385,386
385,387
386,387
389,390
389,391
389,392
390,391
392,393
392,394
393,394
396,397
397,398
397,399
398,399
401,402
402,403
404,405
405,406
406,407
406,408
407,408
408,409
410,411
411,412
413,414
414,415
415,416
416,417
416,418
417,418
417,419
418,419
421,422
421,423
422,423
424,425
426,427
427,428
427,429
428,429
428,430
429,430
432,433
434,435
435,436
435,437
436,437
438,439
439,440
439,441
440,441
443,444
444,445
444,446
445,446
445,447
446,447
450,451
451,452
451,453
452,453
452,454
453,454
457,458
458,459
458,460
459,460
459,461
460,461
463,464
465,466
466,467
466,468
467,468
467,469
468,469
472,473
473,474
473,475
474,475
474,476
475,476
479,480
480,481
480,482
481,482
483,484
484,485
484,486
485,486
488,489
489,490
489,491
490,491
490,492
491,492
495,496
496,497
496,498
497,498
497,499
498,499
502,503
503,504
503,505
504,505
504,506
505,506
509,510
510,511
510,512
511,512
511,513
512,513
516,517
517,518
517,519
518,519
518,520
519,520
523,524
524,525
524,526
525,526
525,527
526,527
530,531
530,532
531,532
532,533
533,534
533,535
534,535
536,537
536,538
537,538
539,540
539,541
539,542
540,541
542,543
545,546
546,547
548,549
548,550
549,550
550,551
551,552
551,553
552,553
554,555
554,556
555,556
557,558
559,560
560,561
560,562
561,562
561,563
562,563
562,564
563,564
565,566
565,567
565,568
566,567
568,569
570,571
570,572
571,572
573,574
576,577
576,578
576,579
576,580
576,581
576,582
576,583
576,584
576,585
576,586
576,587
576,588
576,589
576,590
576,591
576,592
576,593
576,594
576,595
576,596
576,597
576,598
576,599
576,600
576,601
576,602
576,603
576,604
576,605
576,606
576,607
576,608
576,609
576,610
576,611
576,612
576,613
576,614
576,615
576,616
576,617
576,618
576,619
576,620
576,621
576,622
576,623
576,624
576,625
576,626
576,627
576,628
576,629
576,630
576,631
576,632
576,633
576,634
576,635
576,636
576,637
576,638
576,639
576,640
576,641
576,642
576,643
576,644
576,645
576,646
576,647
576,648
576,649
576,650
576,651
576,652
576,653
576,654
576,655
576,656
576,657
576,658
576,659
576,660
577,578
578,579
580,581
581,582
581,583
582,583
582,584
583,584
586,587
586,588
587,588
589,590
589,591
590,591
592,593
595,596
596,597
598,599
599,600
599,601
600,601
600,602
601,602
604,605
604,606
605,606
607,608
607,609
608,609
610,611
613,614
614,615
616,617
617,618
617,619
618,619
618,620
619,620
622,623
622,624
623,624
625,626
625,627
626,627
628,629
631,632
632,633
634,635
635,636
635,637
636,637
636,638
637,638
640,641
640,642
641,642
643,644
643,645
644,645
646,647
649,650
650,651
652,653
653,654
653,655
654,655
654,656
655,656
658,659
658,660
659,660
661,662
661,663
662,663
664,665
667,668
668,669
670,671
671,672
671,673
672,673
672,674
673,674
676,677
676,678
677,678
679,680
679,681
680,681
682,683
685,686
686,687
688,689
689,690
689,691
690,691
690,692
691,692
694,695
694,696
695,696
697,698
697,699
698,699
700,701
703,704
704,705
706,707
707,708
707,709
708,709
710,711
710,712
711,712
713,714
713,715
714,715
716,717
716,718
717,718
719,720
722,723
723,724
725,726
726,727
726,728
727,728
729,730
729,731
730,731
732,733
732,734
733,734
735,736
735,737
736,737
738,739
741,742
742,743
744,745
745,746
745,747
746,747
746,748
747,748
750,751
750,752
751,752
753,754
753,755
754,755
756,757
756,758
757,758
759,760
762,763
763,764
765,766
766,767
766,768
767,768
767,769
768,769
771,772
771,773
772,773
774,775
774,776
775,776
777,778
777,779
778,779
780,781
783,784
784,785
786,787
786,788
786,789
787,788
787,789
788,789
789,790
789,791
790,791
792,793
792,794
793,794
793,795
794,795
796,797
796,798
796,799
797,798
799,800
801,802
801,803
802,803
804,805
808,809
809,810
810,811
810,812
810,813
811,812
814,815
814,816
815,816
817,818
819,820
820,821
821,822
821,823
822,823
822,824
823,824
826,827
827,828
827,829
828,829
830,831
833,834
834,835
836,837
836,838
836,839
837,838
837,839
838,839
839,840
839,841
840,841
842,843
842,844
843,844
843,845
844,845
846,847
846,848
846,849
847,848
849,850
851,852
851,853
852,853
854,855
858,859
859,860
860,861
860,862
860,863
861,862
864,865
864,866
865,866
867,868
869,870
870,871
871,872
871,873
872,873
872,874
873,874
876,877
879,880
880,881
882,883
883,884
883,885
884,885
888,889
889,890
891,892
892,893
892,894
893,894
893,895
894,895
897,898
897,899
898,899
900,901
900,902
901,902
903,904
906,907
907,908
909,910
910,911
910,912
911,912
911,913
912,913
912,914
913,914
917,918
920,921
921,922
923,924
924,925
924,926
925,926
925,927
926,927
926,928
927,928
931,932
934,935
935,936
937,938
938,939
938,940
939,940
939,941
940,941
943,944
946,947
947,948
949,950
950,951
950,952
951,952
951,953
952,953
955,956
958,959
959,960
961,962
962,963
962,964
963,964
963,965
964,965
967,968
970,971
971,972
973,974
974,975
974,976
975,976
975,977
976,977
979,980
982,983
983,984
985,986
986,987
986,988
987,988
987,989
988,989
991,992
994,995
995,996
997,998
998,999
998,1000
999,1000
999,1001
1000,1001
1003,1004
1006,1007
1007,1008
1009,1010
1010,1011
1010,1012
1011,1012
1011,1013
1012,1013
1012,1014
1013,1014
1017,1018
1017,1019
1018,1019
1020,1021
1020,1022
1021,1022
1023,1024
1026,1027
1027,1028
1029,1030
1029,1031
1030,1031
1030,1032
1030,1033
1030,1034
1031,1032
1033,1034
1033,1035
1034,1035
1036,1037
1038,1039
1038,1040
1039,1040
1042,1043
1043,1044
1043,1045
1044,1045
1047,1048
1048,1049
1049,1050
1049,1051
1049,1052
1050,1051
1053,1054
1053,1055
1054,1055
1056,1057
1059,1060
1060,1061
1062,1063
1062,1064
1063,1064
1063,1065
1063,1066
1063,1067
1064,1065
1066,1067
1066,1068
1067,1068
1069,1070
1071,1072
1072,1073
1074,1075
1075,1076
1077,1078
1078,1079
1079,1080
1079,1081
1079,1082
1080,1081
1083,1084
1083,1085
1084,1085
1086,1087
1089,1090
1090,1091
1092,1093
1093,1094
1093,1095
1094,1095
1096,1097
1096,1098
1097,1098
1099,1100
1099,1101
1100,1101
1102,1103
1106,1107
1107,1108
1107,1109
1107,1110
1108,1109
1111,1112
1111,1113
1112,1113
1114,1115
1117,1118
1118,1119
1118,1120
1119,1120
1121,1122
1123,1124
1124,1125
1124,1126
1125,1126
1128,1129
1128,1130
1129,1130
1129,1131
1130,1131
1130,1132
1131,1132
1134,1135
1136,1137
1137,1138
1138,1139
1138,1140
1139,1140
1139,1141
1140,1141
1143,1144
1143,1145
1143,1146
1144,1145
1145,1146
1145,1147
1146,1147
1146,1148
1147,1148
1150,1151
1152,1153
1153,1154
1153,1155
1154,1155
1154,1156
1155,1156
1158,1159
1161,1162
1161,1163
1161,1164
1162,1163
1162,1164
1163,1164
1163,1165
1164,1165
1167,1168
1169,1170
1170,1171
1171,1172
1171,1173
1172,1173
1172,1174
1173,1174
1177,1178
1177,1179
1178,1179
1178,1180
1179,1180
1179,1181
1180,1181
1183,1184
1184,1185
1185,1186
1185,1187
1186,1187
1189,1190
1190,1191
1190,1192
1191,1192
1191,1193
1192,1193
1195,1196
1197,1198
1197,1199
1197,1200
1198,1199
1198,1200
1199,1200
1199,1201
1200,1201
1203,1204
1205,1206
1206,1207
1207,1208
1207,1209
1208,1209
1208,1210
1209,1210
1213,1214
1213,1215
1214,1215
1214,1216
1215,1216
1215,1217
1216,1217
1219,1220
1220,1221
1221,1222
1221,1223
1222,1223
1225,1226
1226,1227
1226,1228
1227,1228
1227,1229
1228,1229
1231,1232
1233,1234
1234,1235
1234,1236
1235,1236
1235,1237
1236,1237
1239,1240
1239,1241
1240,1241
1240,1242
1241,1242
1244,1245
1244,1246
1245,1246
1247,1248
1249,1250
1250,1251
1250,1252
1251,1252
1251,1253
1252,1253
1255,1256
1255,1257
1256,1257
1256,1258
1257,1258
1260,1261
1260,1262
1261,1262
1263,1264
1265,1266
1265,1267
1266,1267
1266,1268
1267,1268
1267,1269
1268,1269
1271,1272
1273,1274
1274,1275
1275,1276
1275,1277
1276,1277
1276,1278
1277,1278
1280,1281
1280,1282
1281,1282
1284,1285
1284,1286
1285,1286
1285,1287
1286,1287
1286,1288
1287,1288
1290,1291
1292,1293
1293,1294
1294,1295
1294,1296
1295,1296
1295,1297
1296,1297
1299,1300
1299,1301
1300,1301
1303,1304
1303,1305
1304,1305
1305,1306
1305,1307
1306,1307
1309,1310
1310,1311
1311,1312
1311,1313
1312,1313
1312,1314
1313,1314
1316,1317
1316,1318
1317,1318
1317,1319
1318,1319
1321,1322
1321,1323
1322,1323
1325,1326
1325,1327
1326,1327
1327,1328
1327,1329
1328,1329
1331,1332
1332,1333
1333,1334
1333,1335
1334,1335
1334,1336
1335,1336
1338,1339
1338,1340
1339,1340
1339,1341
1340,1341
1343,1344
1343,1345
1344,1345
1347,1348
1347,1349
1347,1350
1348,1349
1348,1350
1349,1350
1349,1351
1350,1351
1354,1355
1354,1356
1355,1356
1356,1357
1356,1358
1357,1358
1360,1361
1360,1362
1360,1363
1360,1364
1361,1362
1362,1363
1362,1364
1363,1364
1366,1367
1366,1368
1367,1368
1369,1370
1369,1371
1370,1371
1372,1373
1374,1375
1375,1376
1377,1378
1378,1379
1378,1380
1379,1380
1379,1381
1380,1381
1380,1382
1381,1382
1381,1383
1382,1383
1382,1384
1383,1384
1383,1385
1383,1386
1384,1385
1386,1387
1388,1389
1390,1391
1390,1392
1390,1393
1391,1392
1393,1394
1396,1397
1396,1398
1397,1398
1397,1399
1397,1400
1398,1399
1400,1401
1402,1403
1404,1405
1404,1406
1404,1407
1405,1406
1407,1408
1410,1411
1410,1412
1411,1412
1411,1413
1411,1414
1412,1413
1414,1415
1416,1417
1418,1419
1418,1420
1418,1421
1419,1420
1421,1422
1424,1425
1424,1426
1425,1426
1425,1427
1425,1428
1426,1427
1428,1429
1430,1431
1432,1433
1432,1434
1432,1435
1433,1434
1435,1436
1438,1439
1439,1440
1440,1441
1440,1442
1441,1442
1444,1445
1445,1446
1446,1447
1446,1448
1447,1448
1450,1451
1450,1452
1451,1452
1451,1453
1452,1453
1452,1454
1453,1454
1455,1456
1457,1458
1457,1459
1458,1459
1458,1460
1459,1460
1461,1462
1461,1463
1462,1463
1464,1465
1466,1467
1468,1469
1469,1470
1470,1471
1470,1472
1471,1472
1474,1475
1474,1476
1474,1477
1475,1476
1475,1477
1476,1477
1476,1478
1477,1478
1479,1480
1481,1482
1481,1483
1482,1483
1482,1484
1483,1484
1485,1486
1485,1487
1486,1487
1488,1489
1490,1491
1492,1493
1493,1494
1494,1495
1494,1496
1495,1496
1495,1497
1496,1497
1499,1500
1499,1501
1499,1502
1500,1501
1501,1502
1501,1503
1502,1503
1505,1506
1506,1507
1508,1509
1509,1510
1511,1512
1512,1513
1513,1514
1513,1515
1514,1515
1514,1516
1515,1516
1518,1519
1520,1521
1521,1522
1521,1523
1522,1523
1522,1524
1523,1524
1526,1527
1526,1528
1526,1529
1527,1528
1528,1529
1528,1530
1529,1530
1532,1533
1533,1534
1535,1536
1536,1537
1538,1539
1538,1540
1538,1541
1538,1542
1539,1540
1540,1541
1540,1542
1541,1542
1544,1545
1544,1546
1545,1546
1547,1548
1547,1549
1548,1549
1551,1552
1552,1553
1554,1555
1554,1556
1555,1556
1556,1557
1556,1558
1557,1558
1557,1559
1558,1559
1558,1560
1559,1560
1562,1563
1564,1565
1566,1567
1567,1568
1567,1569
1568,1569
1568,1570
1569,1570
1569,1571
1570,1571
1573,1574
1575,1576
1577,1578
1577,1579
1578,1579
1578,1580
1579,1580
1579,1581
1580,1581
1583,1584
1583,1585
1584,1585
1587,1588
1588,1589
1589,1590
1589,1591
1590,1591
1590,1592
1591,1592
1594,1595
1596,1597
1596,1598
1597,1598
1598,1599
1598,1600
1599,1600
1602,1603
1602,1604
1603,1604
1604,1605
1604,1606
1604,1607
1605,1606
1608,1609
1608,1610
1609,1610
1609,1611
1612,1613
1612,1614
1613,1614
1616,1617
1618,1619
1618,1620
1619,1620
1620,1621
1620,1622
1621,1622
1624,1625
1624,1626
1625,1626
1626,1627
1626,1628
1626,1629
1627,1628
1630,1631
1630,1632
1631,1632
1631,1633
1634,1635
1634,1636
1635,1636
1638,1639
1640,1641
1640,1642
1641,1642
1641,1643
1642,1643
1642,1644
1643,1644
1643,1645
1644,1645
1644,1646
1645,1646
1645,1647
1646,1647
1649,1650
1649,1651
1650,1651
1653,1654
1653,1655
1654,1655
1654,1656
1655,1656
1658,1659
1658,1660
1659,1660
1662,1663
1662,1664
1663,1664
1663,1665
1664,1665
1664,1666
1665,1666
1668,1669
1668,1670
1669,1670
1672,1673
1672,1674
1673,1674
1676,1677
1676,1678
1677,1678
1677,1679
1678,1679
1678,1680
1679,1680
1682,1683
1682,1684
1683,1684
1686,1687
1686,1688
1687,1688
1690,1691
1690,1692
1691,1692
1692,1693
1692,1694
1692,1695
1692,1696
1693,1694
1696,1697
1696,1698
1697,1698
1697,1699
1700,1701
1700,1702
1701,1702
1704,1705
1704,1706
1705,1706
1705,1707
1708,1709
1708,1710
1709,1710
1712,1713
1714,1715
1715,1716
1715,1717
1716,1717
1716,1718
1717,1718
1720,1721
1720,1722
1720,1723
1721,1722
1723,1724
1723,1725
1724,1725
1724,1726
1725,1726
1728,1729
1728,1730
1729,1730
1732,1733
1732,1734
1733,1734
1736,1737
1737,1738
1737,1739
1738,1739
1738,1740
1739,1740
1742,1743
1742,1744
1742,1745
1743,1744
1745,1746
1745,1747
1746,1747
1746,1748
1747,1748
1750,1751
1750,1752
1751,1752
1754,1755
1754,1756
1755,1756
1758,1759
1759,1760
1759,1761
1760,1761
1760,1762
1761,1762
1764,1765
1764,1766
1765,1766
1765,1767
1766,1767
1769,1770
1769,1771
1770,1771
1773,1774
1773,1775
1774,1775
1774,1776
1775,1776
1777,1778
1777,1779
1778,1779
1781,1782
1781,1783
1781,1784
1781,1785
1781,1786
1781,1787
1782,1783
1783,1784
1783,1785
1784,1785
1784,1786
1785,1786
1788,1789
1788,1790
1789,1790
1792,1793
1792,1794
1793,1794
1794,1795
1795,1796
1795,1797
1796,1797
1796,1798
1797,1798
1800,1801
1800,1802
1800,1803
1801,1802
1803,1804
1804,1805
1804,1806
1805,1806
1805,1807
1806,1807
1810,1811
1811,1812
1811,1813
1812,1813
1815,1816
1816,1817
1818,1819
1819,1820
1820,1821
1821,1822
1823,1824
1824,1825
1825,1826
1825,1827
1826,1827
1826,1828
1827,1828
1827,1829
1828,1829
1828,1830
1829,1830
1832,1833
1834,1835
1835,1836
1836,1837
1836,1838
1837,1838
1837,1839
1838,1839
1842,1843
1842,1844
1843,1844
1844,1845
1844,1846
1845,1846
1848,1849
1850,1851
1850,1852
1851,1852
1851,1853
1852,1853
1855,1856
1855,1857
1856,1857
1857,1858
1857,1859
1858,1859
1861,1862
1863,1864
1863,1865
1864,1865
1864,1866
1865,1866
1868,1869
1868,1870
1869,1870
1870,1871
1870,1872
1871,1872
1874,1875
1876,1877
1876,1878
1877,1878
1877,1879
1878,1879
1878,1880
1879,1880
1879,1881
1880,1881
1880,1882
1881,1882
1886,1887
1886,1888
1887,1888
1887,1889
1888,1889
1888,1890
1889,1890
1894,1895
1894,1896
1895,1896
1896,1897
1896,1898
1896,1899
1897,1898
1900,1901
1900,1902
1901,1902
1903,1904
1903,1905
1904,1905
1904,1906
1905,1906
1909,1910
1911,1912
1911,1913
1912,1913
1912,1914
1913,1914
1913,1915
1914,1915
1914,1916
1915,1916
1915,1917
1916,1917
1921,1922
1921,1923
1922,1923
1922,1924
1923,1924
1923,1925
1924,1925
1929,1930
1929,1931
1930,1931
1931,1932
1931,1933
1931,1934
1932,1933
1935,1936
1935,1937
1936,1937
1938,1939
1938,1940
1939,1940
1939,1941
1940,1941
1944,1945
1946,1947
1946,1948
1947,1948
1947,1949
1948,1949
1948,1950
1949,1950
1949,1951
1950,1951
1950,1952
1951,1952
1955,1956
1955,1957
1956,1957
1956,1958
1957,1958
1962,1963
1962,1964
1963,1964
1964,1965
1964,1966
1965,1966
1968,1969
1970,1971
1970,1972
1971,1972
1971,1973
1972,1973
1972,1974
1973,1974
1973,1975
1974,1975
1979,1980
1979,1981
1980,1981
1981,1982
1981,1983
1982,1983
1985,1986
1987,1988
1987,1989
1988,1989
1988,1990
1989,1990
1989,1991
1990,1991
1990,1992
1991,1992
1996,1997
1996,1998
1997,1998
1998,1999
1998,2000
1999,2000
2002,2003
2004,2005
2004,2006
2005,2006
2005,2007
2006,2007
2006,2008
2007,2008
2007,2009
2008,2009
2013,2014
2013,2015
2014,2015
2015,2016
2015,2017
2016,2017
2019,2020
2021,2022
2021,2023
2022,2023
2022,2024
2023,2024
2023,2025
2024,2025
2024,2026
2025,2026
2028,2029
2030,2031
2030,2032
2031,2032
2031,2033
2032,2033
2035,2036
2035,2037
2036,2037
2039,2040
2040,2041
2041,2042
2041,2043
2041,2044
2041,2045
2042,2043
2045,2046
2045,2047
2046,2047
2046,2048
2049,2050
2049,2051
2050,2051
2053,2054
2053,2055
2054,2055
2054,2056
2057,2058
2057,2059
2058,2059
2061,2062
2061,2063
2062,2063
2062,2064
2063,2064
2063,2065
2064,2065
2068,2069
2068,2070
2069,2070
2069,2071
2069,2072
2069,2073
2070,2071
2071,2072
2071,2073
2072,2073
2075,2076
2075,2077
2076,2077
2076,2078
2077,2078
2080,2081
2080,2082
2081,2082
2084,2085
2085,2086
2087,2088
2088,2089
2088,2090
2089,2090
2089,2091
2090,2091
2090,2092
2091,2092
2091,2093
2092,2093
2095,2096
2097,2098
2097,2099
2098,2099
2098,2100
2099,2100
2102,2103
2102,2104
2103,2104
2106,2107
2106,2108
2107,2108
2108,2109
2108,2110
2109,2110
2112,2113
2114,2115
2114,2116
2115,2116
2115,2117
2116,2117
2116,2118
2117,2118
2120,2121
2122,2123
2123,2124
2123,2125
2123,2126
2123,2127
2124,2125
2125,2126
2125,2127
2126,2127
2129,2130
2129,2131
2130,2131
2132,2133
2132,2134
2133,2134
2133,2135
2134,2135
2138,2139
2139,2140
2141,2142
2142,2143
2142,2144
2143,2144
2143,2145
2144,2145
2144,2146
2145,2146
2147,2148
2147,2149
2148,2149
2148,2150
2149,2150
2152,2153
2154,2155
2154,2156
2155,2156
2156,2157
2156,2158
2157,2158
2157,2159
2160,2161
2160,2162
2161,2162
2164,2165
2164,2166
2165,2166
2168,2169
2168,2170
2169,2170
2170,2171
2170,2172
2171,2172
2174,2175
2176,2177
2176,2178
2177,2178
2179,2180
2180,2181
2181,2182
2181,2183
2182,2183
2184,2185
2186,2187
2187,2188
2189,2190
2189,2191
2191,2192
2191,2193
2192,2193
2194,2195
2195,2196
2196,2197
2196,2198
2197,2198
2199,2200
2201,2202
2201,2203
2202,2203
2204,2205
2205,2206
2206,2207
2206,2208
2207,2208
2209,2210
2211,2212
2211,2213
2212,2213
2214,2215
2215,2216
2216,2217
2216,2218
2217,2218
2219,2220
2221,2222
-----nextToken-----
3,5,6,8,10,11,14,16,17,22,24,25,29,31,32,35,37,40,42,45,47,48,51,53,56,58,62,64,65,69,71,72,76,78,79,82,84,88,90,94,96,100,102,105,107,111,113,117,119,123,125,129,131,134,136,140,141,145,146,150,151,155,156,162,165,169,170,173,177,178,182,183,187,188,192,193,198,199,200,205,206,207,212,213,215,220,221,223,228,229,230,235,236,237,242,243,245,250,251,253,258,259,260,265,266,267,272,273,276,278,282,283,287,288,293,294,297,300,302,305,313,315,317,320,322,324,327,329,334,336,338,341,343,345,348,350,355,356,358,362,365,367,369,373,376,378,380,387,388,391,394,395,399,400,403,409,412,419,420,423,425,430,431,433,437,441,442,447,448,449,454,455,456,461,462,464,469,470,471,476,477,478,482,486,487,492,493,494,499,500,501,506,507,508,513,514,515,520,521,522,527,528,529,535,538,541,543,544,547,553,556,558,564,567,569,572,574,575,579,584,585,588,591,593,594,597,602,603,606,609,611,612,615,620,621,624,627,629,630,633,638,639,642,645,647,648,651,656,657,660,663,665,666,669,674,675,678,681,683,684,687,692,693,696,699,701,702,705,709,712,715,718,720,721,724,728,731,734,737,739,740,743,748,749,752,755,758,760,761,764,769,770,773,776,779,781,782,785,791,795,798,800,803,805,806,807,812,813,816,818,824,825,829,831,832,835,841,845,848,850,853,855,856,857,862,863,866,868,874,875,877,878,881,885,886,887,890,895,896,899,902,904,905,908,914,915,916,918,919,922,928,929,930,932,933,936,941,942,944,945,948,953,954,956,957,960,965,966,968,969,972,977,978,980,981,984,989,990,992,993,996,1001,1002,1004,1005,1008,1014,1015,1016,1019,1022,1024,1025,1028,1032,1035,1037,1040,1041,1045,1046,1051,1052,1055,1057,1058,1061,1065,1068,1070,1073,1076,1081,1082,1085,1087,1088,1091,1095,1098,1101,1103,1104,1105,1109,1110,1113,1115,1116,1120,1122,1126,1127,1132,1133,1135,1141,1142,1148,1149,1151,1156,1157,1159,1160,1165,1166,1168,1174,1175,1176,1181,1182,1187,1188,1193,1194,1196,1201,1202,1204,1210,1211,1212,1217,1218,1223,1224,1229,1230,1232,1237,1238,1242,1243,1246,1248,1253,1254,1258,1259,1262,1264,1269,1270,1272,1278,1279,1282,1283,1288,1289,1291,1297,1298,1301,1302,1307,1308,1314,1315,1319,1320,1323,1324,1329,1330,1336,1337,1341,1342,1345,1346,1351,1352,1353,1358,1359,1364,1365,1368,1371,1373,1376,1385,1387,1389,1392,1394,1395,1399,1401,1403,1406,1408,1409,1413,1415,1417,1420,1422,1423,1427,1429,1431,1434,1436,1437,1442,1443,1448,1449,1454,1456,1460,1463,1465,1467,1472,1473,1478,1480,1484,1487,1489,1491,1497,1498,1503,1504,1507,1510,1516,1517,1519,1524,1525,1530,1531,1534,1537,1542,1543,1546,1549,1550,1553,1560,1561,1563,1565,1571,1572,1574,1576,1581,1582,1585,1586,1592,1593,1595,1600,1601,1606,1607,1610,1611,1614,1615,1617,1622,1623,1628,1629,1632,1633,1636,1637,1639,1647,1648,1651,1652,1656,1657,1660,1661,1666,1667,1670,1671,1674,1675,1680,1681,1684,1685,1688,1689,1694,1695,1698,1699,1702,1703,1706,1707,1710,1711,1713,1718,1719,1722,1726,1727,1730,1731,1734,1735,1740,1741,1744,1748,1749,1752,1753,1756,1757,1762,1763,1767,1768,1771,1772,1776,1779,1780,1786,1787,1790,1791,1798,1799,1802,1807,1808,1809,1813,1814,1817,1822,1830,1831,1833,1839,1840,1841,1846,1847,1849,1853,1854,1859,1860,1862,1866,1867,1872,1873,1875,1882,1883,1884,1885,1890,1891,1892,1893,1898,1899,1902,1906,1907,1908,1910,1917,1918,1919,1920,1925,1926,1927,1928,1933,1934,1937,1941,1942,1943,1945,1952,1953,1954,1958,1959,1960,1961,1966,1967,1969,1975,1976,1977,1978,1983,1984,1986,1992,1993,1994,1995,2000,2001,2003,2009,2010,2011,2012,2017,2018,2020,2026,2027,2029,2033,2034,2037,2038,2043,2044,2047,2048,2051,2052,2055,2056,2059,2060,2065,2066,2067,2073,2074,2078,2079,2082,2083,2086,2093,2094,2096,2100,2101,2104,2105,2110,2111,2113,2118,2119,2121,2127,2128,2131,2135,2136,2137,2140,2146,2150,2151,2153,2158,2159,2162,2163,2166,2167,2172,2173,2175,2178,2183,2185,2188,2190,2193,2198,2200,2203,2208,2210,2213,2218,2220,2222
-----computeFrom-----
138,139
138,140
143,144
143,145
148,149
148,150
153,154
153,155
160,161
160,162
175,176
175,177
180,181
180,182
185,186
185,187
190,191
190,192
195,196
195,197
202,203
202,204
209,210
209,211
217,218
217,219
225,226
225,227
232,233
232,234
239,240
239,241
247,248
247,249
255,256
255,257
262,263
262,264
269,270
269,271
280,281
280,282
285,286
285,287
291,292
291,293
295,296
295,297
308,309
308,310
309,310
309,311
310,311
310,312
330,331
330,332
331,332
331,333
360,361
360,362
371,372
371,373
384,385
384,386
416,417
416,418
427,428
427,429
435,436
435,437
444,445
444,446
451,452
451,453
458,459
458,460
466,467
466,468
473,474
473,475
480,481
480,482
489,490
489,491
496,497
496,498
503,504
503,505
510,511
510,512
517,518
517,519
524,525
524,526
533,534
533,535
551,552
551,553
581,582
581,583
599,600
599,601
617,618
617,619
635,636
635,637
653,654
653,655
671,672
671,673
689,690
689,691
707,708
707,709
726,727
726,728
745,746
745,747
766,767
766,768
787,788
787,789
789,790
789,791
821,822
821,823
827,828
827,829
837,838
837,839
839,840
839,841
871,872
871,873
883,884
883,885
892,893
892,894
910,911
910,912
924,925
924,926
938,939
938,940
950,951
950,952
962,963
962,964
974,975
974,976
986,987
986,988
998,999
998,1000
1010,1011
1010,1012
1093,1094
1093,1095
1124,1125
1124,1126
1129,1130
1129,1131
1138,1139
1138,1140
1145,1146
1145,1147
1153,1154
1153,1155
1162,1163
1162,1164
1171,1172
1171,1173
1179,1180
1179,1181
1190,1191
1190,1192
1198,1199
1198,1200
1207,1208
1207,1209
1215,1216
1215,1217
1226,1227
1226,1228
1234,1235
1234,1236
1239,1240
1239,1241
1250,1251
1250,1252
1255,1256
1255,1257
1266,1267
1266,1268
1275,1276
1275,1277
1285,1286
1285,1287
1294,1295
1294,1296
1311,1312
1311,1313
1316,1317
1316,1318
1333,1334
1333,1335
1338,1339
1338,1340
1348,1349
1348,1350
1356,1357
1356,1358
1362,1363
1362,1364
1366,1367
1366,1368
1379,1380
1379,1381
1380,1381
1380,1382
1381,1382
1381,1383
1382,1383
1382,1384
1396,1397
1396,1398
1410,1411
1410,1412
1424,1425
1424,1426
1440,1441
1440,1442
1446,1447
1446,1448
1451,1452
1451,1453
1452,1453
1452,1454
1457,1458
1457,1459
1475,1476
1475,1477
1476,1477
1476,1478
1481,1482
1481,1483
1494,1495
1494,1496
1513,1514
1513,1515
1521,1522
1521,1523
1540,1541
1540,1542
1544,1545
1544,1546
1556,1557
1556,1558
1567,1568
1567,1569
1578,1579
1578,1580
1579,1580
1579,1581
1583,1584
1583,1585
1589,1590
1589,1591
1641,1642
1641,1643
1642,1643
1642,1644
1643,1644
1643,1645
1644,1645
1644,1646
1653,1654
1653,1655
1662,1663
1662,1664
1663,1664
1663,1665
1676,1677
1676,1678
1677,1678
1677,1679
1715,1716
1715,1717
1723,1724
1723,1725
1737,1738
1737,1739
1745,1746
1745,1747
1759,1760
1759,1761
1764,1765
1764,1766
1774,1775
1774,1776
1777,1778
1777,1779
1783,1784
1783,1785
1788,1789
1788,1790
1795,1796
1795,1797
1804,1805
1804,1806
1826,1827
1826,1828
1827,1828
1827,1829
1851,1852
1851,1853
1864,1865
1864,1866
1877,1878
1877,1879
1878,1879
1878,1880
1886,1887
1886,1888
1912,1913
1912,1914
1913,1914
1913,1915
1921,1922
1921,1923
1947,1948
1947,1949
1948,1949
1948,1950
1971,1972
1971,1973
1988,1989
1988,1990
2005,2006
2005,2007
2022,2023
2022,2024
2023,2024
2023,2025
2030,2031
2030,2032
2062,2063
2062,2064
2071,2072
2071,2073
2075,2076
2075,2077
2076,2077
2076,2078
2089,2090
2089,2091
2102,2103
2102,2104
2115,2116
2115,2117
2125,2126
2125,2127
2129,2130
2129,2131
2132,2133
2132,2134
2143,2144
2143,2145
2154,2155
2154,2156
-----guardedBy-----
803,816
805,818
853,866
855,868
1133,1157
1132,1156
1165,1174
1166,1175
1202,1211
1201,1210
1270,1279
1269,1282
1289,1298
1288,1301
1681,1711
1667,1703
1688,1710
1776,1799
1779,1790
1892,1908
1891,1907
1890,1906
1927,1943
1926,1942
1925,1941
2034,2052
2038,2060
2037,2059
2065,2150
2066,2136
2119,2163
2118,2166
-----guardedByNegation-----
791,829
841,877
1165,1193
1166,1194
1202,1230
1201,1229
-----lastLexicalUse-----
1165,1193
1166,1194
1202,1230
1201,1229
-----jump-----
1165,1193
1166,1194
1202,1230
1201,1229
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;GotoStatement;Name;ProblemStatement;ExpressionStatement;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ProblemStatement;ProblemStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;GotoStatement;Name;WhileStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;GotoStatement;Name;ProblemStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ProblemStatement;ProblemStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static jpc_enc_cp_t *cp_create(const char *optstr, jas_image_t *image){	jpc_enc_cp_t *cp;	jas_tvparser_t *tvp;	int ret;	int numilyrrates;	double *ilyrrates;	int i;	int tagid;	jpc_enc_tcp_t *tcp;	jpc_enc_tccp_t *tccp;	jpc_enc_ccp_t *ccp;	int cmptno;	uint_fast16_t rlvlno;	uint_fast16_t prcwidthexpn;	uint_fast16_t prcheightexpn;	bool enablemct;	uint_fast32_t jp2overhead;	uint_fast16_t lyrno;	uint_fast32_t hsteplcm;	uint_fast32_t vsteplcm;	bool mctvalid;	tvp = 0;	cp = 0;	ilyrrates = 0;	numilyrrates = 0;	if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))) {		goto error;	}	prcwidthexpn = 15;	prcheightexpn = 15;	enablemct = true;	jp2overhead = 0;	cp->ccps = 0;	cp->debug = 0;	cp->imgareatlx = UINT_FAST32_MAX;	cp->imgareatly = UINT_FAST32_MAX;	cp->refgrdwidth = 0;	cp->refgrdheight = 0;	cp->tilegrdoffx = UINT_FAST32_MAX;	cp->tilegrdoffy = UINT_FAST32_MAX;	cp->tilewidth = 0;	cp->tileheight = 0;	cp->numcmpts = jas_image_numcmpts(image);	hsteplcm = 1;	vsteplcm = 1;	for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {		if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {			jas_eprintf("unsupported image type\n");			goto error;		}		/* Note: We ought to be calculating the LCMs here.  Fix some day. */		hsteplcm *= jas_image_cmpthstep(image, cmptno);		vsteplcm *= jas_image_cmptvstep(image, cmptno);	}	if (!(cp->ccps = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t)))) {		goto error;	}	for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts); ++cmptno,	  ++ccp) {		ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);		ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);		/* XXX - this isn't quite correct for more general image */		ccp->sampgrdsubstepx = 0;		ccp->sampgrdsubstepx = 0;		ccp->prec = jas_image_cmptprec(image, cmptno);		ccp->sgnd = jas_image_cmptsgnd(image, cmptno);		ccp->numstepsizes = 0;		memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));	}	cp->rawsize = jas_image_rawsize(image);	cp->totalsize = UINT_FAST32_MAX;	tcp = &cp->tcp;	tcp->csty = 0;	tcp->intmode = true;	tcp->prg = JPC_COD_LRCPPRG;	tcp->numlyrs = 1;	tcp->ilyrrates = 0;	tccp = &cp->tccp;	tccp->csty = 0;	tccp->maxrlvls = 6;	tccp->cblkwidthexpn = 6;	tccp->cblkheightexpn = 6;	tccp->cblksty = 0;	tccp->numgbits = 2;	if (!(tvp = jas_tvparser_create(optstr ? optstr : ""))) {		goto error;	}	while (!(ret = jas_tvparser_next(tvp))) {		switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id) {		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}	}	jas_tvparser_destroy(tvp);	tvp = 0;	if (cp->totalsize != UINT_FAST32_MAX) {		cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0;	}	if (cp->imgareatlx == UINT_FAST32_MAX) {		cp->imgareatlx = 0;	} else {		if (hsteplcm != 1) {			jas_eprintf("warning: overriding imgareatlx value\n");		}		cp->imgareatlx *= hsteplcm;	}	if (cp->imgareatly == UINT_FAST32_MAX) {		cp->imgareatly = 0;	} else {		if (vsteplcm != 1) {			jas_eprintf("warning: overriding imgareatly value\n");		}		cp->imgareatly *= vsteplcm;	}	cp->refgrdwidth = cp->imgareatlx + jas_image_width(image);	cp->refgrdheight = cp->imgareatly + jas_image_height(image);	if (cp->tilegrdoffx == UINT_FAST32_MAX) {		cp->tilegrdoffx = cp->imgareatlx;	}	if (cp->tilegrdoffy == UINT_FAST32_MAX) {		cp->tilegrdoffy = cp->imgareatly;	}	if (!cp->tilewidth) {		cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;	}	if (!cp->tileheight) {		cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;	}	if (cp->numcmpts == 3) {		mctvalid = true;		for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}	} else {		mctvalid = false;	}	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB) {		jas_eprintf("warning: color space apparently not RGB\n");	}	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB) {		tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);	} else {		tcp->mctid = JPC_MCT_NONE;	}	tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS);	for (rlvlno = 0; rlvlno < tccp->maxrlvls; ++rlvlno) {		tccp->prcwidthexpns[rlvlno] = prcwidthexpn;		tccp->prcheightexpns[rlvlno] = prcheightexpn;	}	if (prcwidthexpn != 15 || prcheightexpn != 15) {		tccp->csty |= JPC_COX_PRT;	}	/* Ensure that the tile width and height is valid. */	if (!cp->tilewidth) {		jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth);		goto error;	}	if (!cp->tileheight) {		jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight);		goto error;	}	/* Ensure that the tile grid offset is valid. */	if (cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly ||	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly) {		jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy);		goto error;	}	cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,	  cp->tilewidth);	cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,	  cp->tileheight);	cp->numtiles = cp->numhtiles * cp->numvtiles;	if (ilyrrates && numilyrrates > 0) {		tcp->numlyrs = numilyrrates + 1;		if (!(tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1),		  sizeof(jpc_fix_t)))) {			goto error;		}		for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1); ++i) {			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);		}	}	/* Ensure that the integer mode is used in the case of lossless	  coding. */	if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)) {		jas_eprintf("cannot use real mode for lossless coding\n");		goto error;	}	/* Ensure that the precinct width is valid. */	if (prcwidthexpn > 15) {		jas_eprintf("invalid precinct width\n");		goto error;	}	/* Ensure that the precinct height is valid. */	if (prcheightexpn > 15) {		jas_eprintf("invalid precinct height\n");		goto error;	}	/* Ensure that the code block width is valid. */	if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12) {		jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn));		goto error;	}	/* Ensure that the code block height is valid. */	if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12) {		jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn));		goto error;	}	/* Ensure that the code block size is not too large. */	if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12) {		jas_eprintf("code block size too large\n");		goto error;	}	/* Ensure that the number of layers is valid. */	if (cp->tcp.numlyrs > 16384) {		jas_eprintf("too many layers\n");		goto error;	}	/* There must be at least one resolution level. */	if (cp->tccp.maxrlvls < 1) {		jas_eprintf("must be at least one resolution level\n");		goto error;	}	/* Ensure that the number of guard bits is valid. */	if (cp->tccp.numgbits > 8) {		jas_eprintf("invalid number of guard bits\n");		goto error;	}	/* Ensure that the rate is within the legal range. */	if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize) {		jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);	}	/* Ensure that the intermediate layer rates are valid. */	if (tcp->numlyrs > 1) {		/* The intermediate layers rates must increase monotonically. */		for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}		/* The intermediate layer rates must be less than the overall rate. */		if (cp->totalsize != UINT_FAST32_MAX) {			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}	}	if (ilyrrates) {		jas_free(ilyrrates);	}	return cp;error:	if (ilyrrates) {		jas_free(ilyrrates);	}	if (tvp) {		jas_tvparser_destroy(tvp);	}	if (cp) {		jpc_enc_cp_destroy(cp);	}	return 0;}
static jpc_enc_cp_t
jpc_enc_cp_t
*cp_create(const char *optstr, jas_image_t *image)
*
cp_create
const char *optstr
const char
*optstr
*
optstr
jas_image_t *image
jas_image_t
jas_image_t
*image
*
image
{	jpc_enc_cp_t *cp;	jas_tvparser_t *tvp;	int ret;	int numilyrrates;	double *ilyrrates;	int i;	int tagid;	jpc_enc_tcp_t *tcp;	jpc_enc_tccp_t *tccp;	jpc_enc_ccp_t *ccp;	int cmptno;	uint_fast16_t rlvlno;	uint_fast16_t prcwidthexpn;	uint_fast16_t prcheightexpn;	bool enablemct;	uint_fast32_t jp2overhead;	uint_fast16_t lyrno;	uint_fast32_t hsteplcm;	uint_fast32_t vsteplcm;	bool mctvalid;	tvp = 0;	cp = 0;	ilyrrates = 0;	numilyrrates = 0;	if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))) {		goto error;	}	prcwidthexpn = 15;	prcheightexpn = 15;	enablemct = true;	jp2overhead = 0;	cp->ccps = 0;	cp->debug = 0;	cp->imgareatlx = UINT_FAST32_MAX;	cp->imgareatly = UINT_FAST32_MAX;	cp->refgrdwidth = 0;	cp->refgrdheight = 0;	cp->tilegrdoffx = UINT_FAST32_MAX;	cp->tilegrdoffy = UINT_FAST32_MAX;	cp->tilewidth = 0;	cp->tileheight = 0;	cp->numcmpts = jas_image_numcmpts(image);	hsteplcm = 1;	vsteplcm = 1;	for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {		if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {			jas_eprintf("unsupported image type\n");			goto error;		}		/* Note: We ought to be calculating the LCMs here.  Fix some day. */		hsteplcm *= jas_image_cmpthstep(image, cmptno);		vsteplcm *= jas_image_cmptvstep(image, cmptno);	}	if (!(cp->ccps = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t)))) {		goto error;	}	for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts); ++cmptno,	  ++ccp) {		ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);		ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);		/* XXX - this isn't quite correct for more general image */		ccp->sampgrdsubstepx = 0;		ccp->sampgrdsubstepx = 0;		ccp->prec = jas_image_cmptprec(image, cmptno);		ccp->sgnd = jas_image_cmptsgnd(image, cmptno);		ccp->numstepsizes = 0;		memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));	}	cp->rawsize = jas_image_rawsize(image);	cp->totalsize = UINT_FAST32_MAX;	tcp = &cp->tcp;	tcp->csty = 0;	tcp->intmode = true;	tcp->prg = JPC_COD_LRCPPRG;	tcp->numlyrs = 1;	tcp->ilyrrates = 0;	tccp = &cp->tccp;	tccp->csty = 0;	tccp->maxrlvls = 6;	tccp->cblkwidthexpn = 6;	tccp->cblkheightexpn = 6;	tccp->cblksty = 0;	tccp->numgbits = 2;	if (!(tvp = jas_tvparser_create(optstr ? optstr : ""))) {		goto error;	}	while (!(ret = jas_tvparser_next(tvp))) {		switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id) {		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}	}	jas_tvparser_destroy(tvp);	tvp = 0;	if (cp->totalsize != UINT_FAST32_MAX) {		cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0;	}	if (cp->imgareatlx == UINT_FAST32_MAX) {		cp->imgareatlx = 0;	} else {		if (hsteplcm != 1) {			jas_eprintf("warning: overriding imgareatlx value\n");		}		cp->imgareatlx *= hsteplcm;	}	if (cp->imgareatly == UINT_FAST32_MAX) {		cp->imgareatly = 0;	} else {		if (vsteplcm != 1) {			jas_eprintf("warning: overriding imgareatly value\n");		}		cp->imgareatly *= vsteplcm;	}	cp->refgrdwidth = cp->imgareatlx + jas_image_width(image);	cp->refgrdheight = cp->imgareatly + jas_image_height(image);	if (cp->tilegrdoffx == UINT_FAST32_MAX) {		cp->tilegrdoffx = cp->imgareatlx;	}	if (cp->tilegrdoffy == UINT_FAST32_MAX) {		cp->tilegrdoffy = cp->imgareatly;	}	if (!cp->tilewidth) {		cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;	}	if (!cp->tileheight) {		cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;	}	if (cp->numcmpts == 3) {		mctvalid = true;		for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}	} else {		mctvalid = false;	}	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB) {		jas_eprintf("warning: color space apparently not RGB\n");	}	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB) {		tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);	} else {		tcp->mctid = JPC_MCT_NONE;	}	tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS);	for (rlvlno = 0; rlvlno < tccp->maxrlvls; ++rlvlno) {		tccp->prcwidthexpns[rlvlno] = prcwidthexpn;		tccp->prcheightexpns[rlvlno] = prcheightexpn;	}	if (prcwidthexpn != 15 || prcheightexpn != 15) {		tccp->csty |= JPC_COX_PRT;	}	/* Ensure that the tile width and height is valid. */	if (!cp->tilewidth) {		jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth);		goto error;	}	if (!cp->tileheight) {		jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight);		goto error;	}	/* Ensure that the tile grid offset is valid. */	if (cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly ||	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly) {		jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy);		goto error;	}	cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,	  cp->tilewidth);	cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,	  cp->tileheight);	cp->numtiles = cp->numhtiles * cp->numvtiles;	if (ilyrrates && numilyrrates > 0) {		tcp->numlyrs = numilyrrates + 1;		if (!(tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1),		  sizeof(jpc_fix_t)))) {			goto error;		}		for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1); ++i) {			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);		}	}	/* Ensure that the integer mode is used in the case of lossless	  coding. */	if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)) {		jas_eprintf("cannot use real mode for lossless coding\n");		goto error;	}	/* Ensure that the precinct width is valid. */	if (prcwidthexpn > 15) {		jas_eprintf("invalid precinct width\n");		goto error;	}	/* Ensure that the precinct height is valid. */	if (prcheightexpn > 15) {		jas_eprintf("invalid precinct height\n");		goto error;	}	/* Ensure that the code block width is valid. */	if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12) {		jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn));		goto error;	}	/* Ensure that the code block height is valid. */	if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12) {		jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn));		goto error;	}	/* Ensure that the code block size is not too large. */	if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12) {		jas_eprintf("code block size too large\n");		goto error;	}	/* Ensure that the number of layers is valid. */	if (cp->tcp.numlyrs > 16384) {		jas_eprintf("too many layers\n");		goto error;	}	/* There must be at least one resolution level. */	if (cp->tccp.maxrlvls < 1) {		jas_eprintf("must be at least one resolution level\n");		goto error;	}	/* Ensure that the number of guard bits is valid. */	if (cp->tccp.numgbits > 8) {		jas_eprintf("invalid number of guard bits\n");		goto error;	}	/* Ensure that the rate is within the legal range. */	if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize) {		jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);	}	/* Ensure that the intermediate layer rates are valid. */	if (tcp->numlyrs > 1) {		/* The intermediate layers rates must increase monotonically. */		for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}		/* The intermediate layer rates must be less than the overall rate. */		if (cp->totalsize != UINT_FAST32_MAX) {			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}	}	if (ilyrrates) {		jas_free(ilyrrates);	}	return cp;error:	if (ilyrrates) {		jas_free(ilyrrates);	}	if (tvp) {		jas_tvparser_destroy(tvp);	}	if (cp) {		jpc_enc_cp_destroy(cp);	}	return 0;}
jpc_enc_cp_t *cp;
jpc_enc_cp_t *cp;
jpc_enc_cp_t
jpc_enc_cp_t
*cp
*
cp
jas_tvparser_t *tvp;
jas_tvparser_t *tvp;
jas_tvparser_t
jas_tvparser_t
*tvp
*
tvp
int ret;
int ret;
int
ret
ret
int numilyrrates;
int numilyrrates;
int
numilyrrates
numilyrrates
double *ilyrrates;
double *ilyrrates;
double
*ilyrrates
*
ilyrrates
int i;
int i;
int
i
i
int tagid;
int tagid;
int
tagid
tagid
jpc_enc_tcp_t *tcp;
jpc_enc_tcp_t *tcp;
jpc_enc_tcp_t
jpc_enc_tcp_t
*tcp
*
tcp
jpc_enc_tccp_t *tccp;
jpc_enc_tccp_t *tccp;
jpc_enc_tccp_t
jpc_enc_tccp_t
*tccp
*
tccp
jpc_enc_ccp_t *ccp;
jpc_enc_ccp_t *ccp;
jpc_enc_ccp_t
jpc_enc_ccp_t
*ccp
*
ccp
int cmptno;
int cmptno;
int
cmptno
cmptno
uint_fast16_t rlvlno;
uint_fast16_t rlvlno;
uint_fast16_t
uint_fast16_t
rlvlno
rlvlno
uint_fast16_t prcwidthexpn;
uint_fast16_t prcwidthexpn;
uint_fast16_t
uint_fast16_t
prcwidthexpn
prcwidthexpn
uint_fast16_t prcheightexpn;
uint_fast16_t prcheightexpn;
uint_fast16_t
uint_fast16_t
prcheightexpn
prcheightexpn
bool enablemct;
bool enablemct;
bool
enablemct
enablemct
uint_fast32_t jp2overhead;
uint_fast32_t jp2overhead;
uint_fast32_t
uint_fast32_t
jp2overhead
jp2overhead
uint_fast16_t lyrno;
uint_fast16_t lyrno;
uint_fast16_t
uint_fast16_t
lyrno
lyrno
uint_fast32_t hsteplcm;
uint_fast32_t hsteplcm;
uint_fast32_t
uint_fast32_t
hsteplcm
hsteplcm
uint_fast32_t vsteplcm;
uint_fast32_t vsteplcm;
uint_fast32_t
uint_fast32_t
vsteplcm
vsteplcm
bool mctvalid;
bool mctvalid;
bool
mctvalid
mctvalid
tvp = 0;
tvp = 0
tvp
tvp
0
cp = 0;
cp = 0
cp
cp
0
ilyrrates = 0;
ilyrrates = 0
ilyrrates
ilyrrates
0
numilyrrates = 0;
numilyrrates = 0
numilyrrates
numilyrrates
0
if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))) {		goto error;	}
!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))
(cp = jas_malloc(sizeof(jpc_enc_cp_t)))
cp = jas_malloc(sizeof(jpc_enc_cp_t))
cp
cp
jas_malloc(sizeof(jpc_enc_cp_t))
jas_malloc
jas_malloc
sizeof(jpc_enc_cp_t)
jpc_enc_cp_t
jpc_enc_cp_t
jpc_enc_cp_t

{		goto error;	}
goto error;
error
prcwidthexpn = 15;
prcwidthexpn = 15
prcwidthexpn
prcwidthexpn
15
prcheightexpn = 15;
prcheightexpn = 15
prcheightexpn
prcheightexpn
15
enablemct = true;
enablemct = true
enablemct
enablemct
true
jp2overhead = 0;
jp2overhead = 0
jp2overhead
jp2overhead
0
cp->ccps = 0;
cp->ccps = 0
cp->ccps
cp
cp
ccps
0
cp->debug = 0;
cp->debug = 0
cp->debug
cp
cp
debug
0
cp->imgareatlx = UINT_FAST32_MAX;
cp->imgareatlx = UINT_FAST32_MAX
cp->imgareatlx
cp
cp
imgareatlx
UINT_FAST32_MAX
UINT_FAST32_MAX
cp->imgareatly = UINT_FAST32_MAX;
cp->imgareatly = UINT_FAST32_MAX
cp->imgareatly
cp
cp
imgareatly
UINT_FAST32_MAX
UINT_FAST32_MAX
cp->refgrdwidth = 0;
cp->refgrdwidth = 0
cp->refgrdwidth
cp
cp
refgrdwidth
0
cp->refgrdheight = 0;
cp->refgrdheight = 0
cp->refgrdheight
cp
cp
refgrdheight
0
cp->tilegrdoffx = UINT_FAST32_MAX;
cp->tilegrdoffx = UINT_FAST32_MAX
cp->tilegrdoffx
cp
cp
tilegrdoffx
UINT_FAST32_MAX
UINT_FAST32_MAX
cp->tilegrdoffy = UINT_FAST32_MAX;
cp->tilegrdoffy = UINT_FAST32_MAX
cp->tilegrdoffy
cp
cp
tilegrdoffy
UINT_FAST32_MAX
UINT_FAST32_MAX
cp->tilewidth = 0;
cp->tilewidth = 0
cp->tilewidth
cp
cp
tilewidth
0
cp->tileheight = 0;
cp->tileheight = 0
cp->tileheight
cp
cp
tileheight
0
cp->numcmpts = jas_image_numcmpts(image);
cp->numcmpts = jas_image_numcmpts(image)
cp->numcmpts
cp
cp
numcmpts
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
hsteplcm = 1;
hsteplcm = 1
hsteplcm
hsteplcm
1
vsteplcm = 1;
vsteplcm = 1
vsteplcm
vsteplcm
1
for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {		if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {			jas_eprintf("unsupported image type\n");			goto error;		}		/* Note: We ought to be calculating the LCMs here.  Fix some day. */		hsteplcm *= jas_image_cmpthstep(image, cmptno);		vsteplcm *= jas_image_cmptvstep(image, cmptno);	}
cmptno = 0;
cmptno = 0
cmptno
cmptno
0
cmptno < jas_image_numcmpts(image)
cmptno
cmptno
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
++cmptno
cmptno
cmptno
{		if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {			jas_eprintf("unsupported image type\n");			goto error;		}		/* Note: We ought to be calculating the LCMs here.  Fix some day. */		hsteplcm *= jas_image_cmpthstep(image, cmptno);		vsteplcm *= jas_image_cmptvstep(image, cmptno);	}
if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {			jas_eprintf("unsupported image type\n");			goto error;		}
jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)
jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image)
jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno)
jas_image_cmptbrx(image, cmptno)
jas_image_cmptbrx
jas_image_cmptbrx
image
image
cmptno
cmptno
jas_image_cmpthstep(image, cmptno)
jas_image_cmpthstep
jas_image_cmpthstep
image
image
cmptno
cmptno
jas_image_brx(image)
jas_image_brx
jas_image_brx
image
image
jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)
jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno)
jas_image_cmptbry(image, cmptno)
jas_image_cmptbry
jas_image_cmptbry
image
image
cmptno
cmptno
jas_image_cmptvstep(image, cmptno)
jas_image_cmptvstep
jas_image_cmptvstep
image
image
cmptno
cmptno
jas_image_bry(image)
jas_image_bry
jas_image_bry
image
image
{			jas_eprintf("unsupported image type\n");			goto error;		}
jas_eprintf("unsupported image type\n");
jas_eprintf("unsupported image type\n")
jas_eprintf
jas_eprintf
"unsupported image type\n"
goto error;
error
hsteplcm *= jas_image_cmpthstep(image, cmptno);
hsteplcm *= jas_image_cmpthstep(image, cmptno)
hsteplcm
hsteplcm
jas_image_cmpthstep(image, cmptno)
jas_image_cmpthstep
jas_image_cmpthstep
image
image
cmptno
cmptno
vsteplcm *= jas_image_cmptvstep(image, cmptno);
vsteplcm *= jas_image_cmptvstep(image, cmptno)
vsteplcm
vsteplcm
jas_image_cmptvstep(image, cmptno)
jas_image_cmptvstep
jas_image_cmptvstep
image
image
cmptno
cmptno
if (!(cp->ccps = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t)))) {		goto error;	}
!(cp->ccps = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t)))
(cp->ccps = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t)))
cp->ccps = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t))
cp->ccps
cp
cp
ccps
jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t))
jas_alloc2
jas_alloc2
cp->numcmpts
cp
cp
numcmpts
sizeof(jpc_enc_ccp_t)
jpc_enc_ccp_t
jpc_enc_ccp_t
jpc_enc_ccp_t

{		goto error;	}
goto error;
error
for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts);
++cmptno,	  ++ccp
++cmptno,	  ++ccp
++cmptno
cmptno
cmptno
++ccp
ccp
ccp
p
) {		ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);		ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);		/* XXX - this isn't quite correct for more general image */		ccp->sampgrdsubstepx = 0;		ccp->sampgrdsubstepx = 0;		ccp->prec = jas_image_cmptprec(image, cmptno);		ccp->sgnd = jas_image_cmptsgnd(image, cmptno);		ccp->numstepsizes = 0;		memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));	}
cp->rawsize = jas_image_rawsize(image);
cp->rawsize = jas_image_rawsize(image)
cp->rawsize
cp
cp
rawsize
jas_image_rawsize(image)
jas_image_rawsize
jas_image_rawsize
image
image
cp->totalsize = UINT_FAST32_MAX;
cp->totalsize = UINT_FAST32_MAX
cp->totalsize
cp
cp
totalsize
UINT_FAST32_MAX
UINT_FAST32_MAX
tcp = &cp->tcp;
tcp = &cp->tcp
tcp
tcp
&cp->tcp
cp->tcp
cp
cp
tcp
tcp->csty = 0;
tcp->csty = 0
tcp->csty
tcp
tcp
csty
0
tcp->intmode = true;
tcp->intmode = true
tcp->intmode
tcp
tcp
intmode
true
tcp->prg = JPC_COD_LRCPPRG;
tcp->prg = JPC_COD_LRCPPRG
tcp->prg
tcp
tcp
prg
JPC_COD_LRCPPRG
JPC_COD_LRCPPRG
tcp->numlyrs = 1;
tcp->numlyrs = 1
tcp->numlyrs
tcp
tcp
numlyrs
1
tcp->ilyrrates = 0;
tcp->ilyrrates = 0
tcp->ilyrrates
tcp
tcp
ilyrrates
0
tccp = &cp->tccp;
tccp = &cp->tccp
tccp
tccp
&cp->tccp
cp->tccp
cp
cp
tccp
tccp->csty = 0;
tccp->csty = 0
tccp->csty
tccp
tccp
csty
0
tccp->maxrlvls = 6;
tccp->maxrlvls = 6
tccp->maxrlvls
tccp
tccp
maxrlvls
6
tccp->cblkwidthexpn = 6;
tccp->cblkwidthexpn = 6
tccp->cblkwidthexpn
tccp
tccp
cblkwidthexpn
6
tccp->cblkheightexpn = 6;
tccp->cblkheightexpn = 6
tccp->cblkheightexpn
tccp
tccp
cblkheightexpn
6
tccp->cblksty = 0;
tccp->cblksty = 0
tccp->cblksty
tccp
tccp
cblksty
0
tccp->numgbits = 2;
tccp->numgbits = 2
tccp->numgbits
tccp
tccp
numgbits
2
if (!(tvp = jas_tvparser_create(optstr ? optstr : ""))) {		goto error;	}
!(tvp = jas_tvparser_create(optstr ? optstr : ""))
(tvp = jas_tvparser_create(optstr ? optstr : ""))
tvp = jas_tvparser_create(optstr ? optstr : "")
tvp
tvp
jas_tvparser_create(optstr ? optstr : "")
jas_tvparser_create
jas_tvparser_create
optstr ? optstr : ""
optstr
optstr
optstr
optstr
""
{		goto error;	}
goto error;
error
while (!(ret = jas_tvparser_next(tvp))) {		switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id) {		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}	}
!(ret = jas_tvparser_next(tvp))
(ret = jas_tvparser_next(tvp))
ret = jas_tvparser_next(tvp)
ret
ret
jas_tvparser_next(tvp)
jas_tvparser_next
jas_tvparser_next
tvp
tvp
{		switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id) {		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}	}
switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id) {		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}
jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id
jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))
jas_taginfo_nonull
jas_taginfo_nonull
jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp))
jas_taginfos_lookup
jas_taginfos_lookup
encopts
encopts
jas_tvparser_gettag(tvp)
jas_tvparser_gettag
jas_tvparser_gettag
tvp
tvp
id
{		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}
case OPT_DEBUG:
OPT_DEBUG
OPT_DEBUG
cp->debug = atoi(jas_tvparser_getval(tvp));
cp->debug = atoi(jas_tvparser_getval(tvp))
cp->debug
cp
cp
debug
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_IMGAREAOFFX:
OPT_IMGAREAOFFX
OPT_IMGAREAOFFX
cp->imgareatlx = atoi(jas_tvparser_getval(tvp));
cp->imgareatlx = atoi(jas_tvparser_getval(tvp))
cp->imgareatlx
cp
cp
imgareatlx
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_IMGAREAOFFY:
OPT_IMGAREAOFFY
OPT_IMGAREAOFFY
cp->imgareatly = atoi(jas_tvparser_getval(tvp));
cp->imgareatly = atoi(jas_tvparser_getval(tvp))
cp->imgareatly
cp
cp
imgareatly
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_TILEGRDOFFX:
OPT_TILEGRDOFFX
OPT_TILEGRDOFFX
cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));
cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp))
cp->tilegrdoffx
cp
cp
tilegrdoffx
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_TILEGRDOFFY:
OPT_TILEGRDOFFY
OPT_TILEGRDOFFY
cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));
cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp))
cp->tilegrdoffy
cp
cp
tilegrdoffy
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_TILEWIDTH:
OPT_TILEWIDTH
OPT_TILEWIDTH
cp->tilewidth = atoi(jas_tvparser_getval(tvp));
cp->tilewidth = atoi(jas_tvparser_getval(tvp))
cp->tilewidth
cp
cp
tilewidth
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_TILEHEIGHT:
OPT_TILEHEIGHT
OPT_TILEHEIGHT
cp->tileheight = atoi(jas_tvparser_getval(tvp));
cp->tileheight = atoi(jas_tvparser_getval(tvp))
cp->tileheight
cp
cp
tileheight
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_PRCWIDTH:
OPT_PRCWIDTH
OPT_PRCWIDTH
prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
prcwidthexpn
prcwidthexpn
jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
jpc_floorlog2
jpc_floorlog2
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_PRCHEIGHT:
OPT_PRCHEIGHT
OPT_PRCHEIGHT
prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
prcheightexpn
prcheightexpn
jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
jpc_floorlog2
jpc_floorlog2
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_CBLKWIDTH:
OPT_CBLKWIDTH
OPT_CBLKWIDTH
tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
tccp->cblkwidthexpn
tccp
tccp
cblkwidthexpn
jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
jpc_floorlog2
jpc_floorlog2
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_CBLKHEIGHT:
OPT_CBLKHEIGHT
OPT_CBLKHEIGHT
tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
tccp->cblkheightexpn
tccp
tccp
cblkheightexpn
jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
jpc_floorlog2
jpc_floorlog2
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_MODE:
OPT_MODE
OPT_MODE
if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}
(tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0
(tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id)
tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id
tagid
tagid
jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id
jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))
jas_taginfo_nonull
jas_taginfo_nonull
jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp))
jas_taginfos_lookup
jas_taginfos_lookup
modetab
modetab
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
id
0
{				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			}
jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));
jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp))
jas_eprintf
jas_eprintf
"ignoring invalid mode %s\n"
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
{				tcp->intmode = (tagid == MODE_INT);			}
tcp->intmode = (tagid == MODE_INT);
tcp->intmode = (tagid == MODE_INT)
tcp->intmode
tcp
tcp
intmode
(tagid == MODE_INT)
tagid == MODE_INT
tagid
tagid
MODE_INT
MODE_INT
break;
case OPT_PRG:
OPT_PRG
OPT_PRG
if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}
(tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0
(tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id)
tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id
tagid
tagid
jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id
jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))
jas_taginfo_nonull
jas_taginfo_nonull
jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp))
jas_taginfos_lookup
jas_taginfos_lookup
prgordtab
prgordtab
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
id
0
{				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			}
jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));
jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp))
jas_eprintf
jas_eprintf
"ignoring invalid progression order %s\n"
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
{				tcp->prg = tagid;			}
tcp->prg = tagid;
tcp->prg = tagid
tcp->prg
tcp
tcp
prg
tagid
tagid
break;
case OPT_NOMCT:
OPT_NOMCT
OPT_NOMCT
enablemct = false;
enablemct = false
enablemct
enablemct
false
break;
case OPT_MAXRLVLS:
OPT_MAXRLVLS
OPT_MAXRLVLS
tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));
tccp->maxrlvls = atoi(jas_tvparser_getval(tvp))
tccp->maxrlvls
tccp
tccp
maxrlvls
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_SOP:
OPT_SOP
OPT_SOP
cp->tcp.csty |= JPC_COD_SOP;
cp->tcp.csty |= JPC_COD_SOP
cp->tcp.csty
cp->tcp
cp
cp
tcp
csty
JPC_COD_SOP
JPC_COD_SOP
break;
case OPT_EPH:
OPT_EPH
OPT_EPH
cp->tcp.csty |= JPC_COD_EPH;
cp->tcp.csty |= JPC_COD_EPH
cp->tcp.csty
cp->tcp
cp
cp
tcp
csty
JPC_COD_EPH
JPC_COD_EPH
break;
case OPT_LAZY:
OPT_LAZY
OPT_LAZY
tccp->cblksty |= JPC_COX_LAZY;
tccp->cblksty |= JPC_COX_LAZY
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_LAZY
JPC_COX_LAZY
break;
case OPT_TERMALL:
OPT_TERMALL
OPT_TERMALL
tccp->cblksty |= JPC_COX_TERMALL;
tccp->cblksty |= JPC_COX_TERMALL
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_TERMALL
JPC_COX_TERMALL
break;
case OPT_SEGSYM:
OPT_SEGSYM
OPT_SEGSYM
tccp->cblksty |= JPC_COX_SEGSYM;
tccp->cblksty |= JPC_COX_SEGSYM
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_SEGSYM
JPC_COX_SEGSYM
break;
case OPT_VCAUSAL:
OPT_VCAUSAL
OPT_VCAUSAL
tccp->cblksty |= JPC_COX_VSC;
tccp->cblksty |= JPC_COX_VSC
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_VSC
JPC_COX_VSC
break;
case OPT_RESET:
OPT_RESET
OPT_RESET
tccp->cblksty |= JPC_COX_RESET;
tccp->cblksty |= JPC_COX_RESET
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_RESET
JPC_COX_RESET
break;
case OPT_PTERM:
OPT_PTERM
OPT_PTERM
tccp->cblksty |= JPC_COX_PTERM;
tccp->cblksty |= JPC_COX_PTERM
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_PTERM
JPC_COX_PTERM
break;
case OPT_NUMGBITS:
OPT_NUMGBITS
OPT_NUMGBITS
cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));
cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp))
cp->tccp.numgbits
cp->tccp
cp
cp
tccp
numgbits
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_RATE:
OPT_RATE
OPT_RATE
if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}
ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)
ratestrtosize
ratestrtosize
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
cp->rawsize
cp
cp
rawsize
&cp->totalsize
cp->totalsize
cp
cp
totalsize
{				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}
jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));
jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp))
jas_eprintf
jas_eprintf
"ignoring bad rate specifier %s\n"
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_ILYRRATES:
OPT_ILYRRATES
OPT_ILYRRATES
if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}
jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)
jpc_atoaf
jpc_atoaf
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
&numilyrrates
numilyrrates
numilyrrates
&ilyrrates
ilyrrates
ilyrrates
{				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}
jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));
jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp))
jas_eprintf
jas_eprintf
"warning: invalid intermediate layer rates specifier ignored (%s)\n"
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_JP2OVERHEAD:
OPT_JP2OVERHEAD
OPT_JP2OVERHEAD
jp2overhead = atoi(jas_tvparser_getval(tvp));
jp2overhead = atoi(jas_tvparser_getval(tvp))
jp2overhead
jp2overhead
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
default:
jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));
jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp))
jas_eprintf
jas_eprintf
"warning: ignoring invalid option %s\n"
jas_tvparser_gettag(tvp)
jas_tvparser_gettag
jas_tvparser_gettag
tvp
tvp
break;
jas_tvparser_destroy(tvp);
jas_tvparser_destroy(tvp)
jas_tvparser_destroy
jas_tvparser_destroy
tvp
tvp
tvp = 0;
tvp = 0
tvp
tvp
0
if (cp->totalsize != UINT_FAST32_MAX) {		cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0;	}
cp->totalsize != UINT_FAST32_MAX
cp->totalsize
cp
cp
totalsize
UINT_FAST32_MAX
UINT_FAST32_MAX
{		cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0;	}
cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0;
cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0
cp->totalsize
cp
cp
totalsize
(cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0
(cp->totalsize > jp2overhead)
cp->totalsize > jp2overhead
cp->totalsize
cp
cp
totalsize
jp2overhead
jp2overhead
(cp->totalsize - jp2overhead)
cp->totalsize - jp2overhead
cp->totalsize
cp
cp
totalsize
jp2overhead
jp2overhead
0
if (cp->imgareatlx == UINT_FAST32_MAX) {		cp->imgareatlx = 0;	} else {		if (hsteplcm != 1) {			jas_eprintf("warning: overriding imgareatlx value\n");		}		cp->imgareatlx *= hsteplcm;	}
cp->imgareatlx == UINT_FAST32_MAX
cp->imgareatlx
cp
cp
imgareatlx
UINT_FAST32_MAX
UINT_FAST32_MAX
{		cp->imgareatlx = 0;	}
cp->imgareatlx = 0;
cp->imgareatlx = 0
cp->imgareatlx
cp
cp
imgareatlx
0
{		if (hsteplcm != 1) {			jas_eprintf("warning: overriding imgareatlx value\n");		}		cp->imgareatlx *= hsteplcm;	}
if (hsteplcm != 1) {			jas_eprintf("warning: overriding imgareatlx value\n");		}
hsteplcm != 1
hsteplcm
hsteplcm
1
{			jas_eprintf("warning: overriding imgareatlx value\n");		}
jas_eprintf("warning: overriding imgareatlx value\n");
jas_eprintf("warning: overriding imgareatlx value\n")
jas_eprintf
jas_eprintf
"warning: overriding imgareatlx value\n"
cp->imgareatlx *= hsteplcm;
cp->imgareatlx *= hsteplcm
cp->imgareatlx
cp
cp
imgareatlx
hsteplcm
hsteplcm
if (cp->imgareatly == UINT_FAST32_MAX) {		cp->imgareatly = 0;	} else {		if (vsteplcm != 1) {			jas_eprintf("warning: overriding imgareatly value\n");		}		cp->imgareatly *= vsteplcm;	}
cp->imgareatly == UINT_FAST32_MAX
cp->imgareatly
cp
cp
imgareatly
UINT_FAST32_MAX
UINT_FAST32_MAX
{		cp->imgareatly = 0;	}
cp->imgareatly = 0;
cp->imgareatly = 0
cp->imgareatly
cp
cp
imgareatly
0
{		if (vsteplcm != 1) {			jas_eprintf("warning: overriding imgareatly value\n");		}		cp->imgareatly *= vsteplcm;	}
if (vsteplcm != 1) {			jas_eprintf("warning: overriding imgareatly value\n");		}
vsteplcm != 1
vsteplcm
vsteplcm
1
{			jas_eprintf("warning: overriding imgareatly value\n");		}
jas_eprintf("warning: overriding imgareatly value\n");
jas_eprintf("warning: overriding imgareatly value\n")
jas_eprintf
jas_eprintf
"warning: overriding imgareatly value\n"
cp->imgareatly *= vsteplcm;
cp->imgareatly *= vsteplcm
cp->imgareatly
cp
cp
imgareatly
vsteplcm
vsteplcm
cp->refgrdwidth = cp->imgareatlx + jas_image_width(image);
cp->refgrdwidth = cp->imgareatlx + jas_image_width(image)
cp->refgrdwidth
cp
cp
refgrdwidth
cp->imgareatlx + jas_image_width(image)
cp->imgareatlx
cp
cp
imgareatlx
jas_image_width(image)
jas_image_width
jas_image_width
image
image
cp->refgrdheight = cp->imgareatly + jas_image_height(image);
cp->refgrdheight = cp->imgareatly + jas_image_height(image)
cp->refgrdheight
cp
cp
refgrdheight
cp->imgareatly + jas_image_height(image)
cp->imgareatly
cp
cp
imgareatly
jas_image_height(image)
jas_image_height
jas_image_height
image
image
if (cp->tilegrdoffx == UINT_FAST32_MAX) {		cp->tilegrdoffx = cp->imgareatlx;	}
cp->tilegrdoffx == UINT_FAST32_MAX
cp->tilegrdoffx
cp
cp
tilegrdoffx
UINT_FAST32_MAX
UINT_FAST32_MAX
{		cp->tilegrdoffx = cp->imgareatlx;	}
cp->tilegrdoffx = cp->imgareatlx;
cp->tilegrdoffx = cp->imgareatlx
cp->tilegrdoffx
cp
cp
tilegrdoffx
cp->imgareatlx
cp
cp
imgareatlx
if (cp->tilegrdoffy == UINT_FAST32_MAX) {		cp->tilegrdoffy = cp->imgareatly;	}
cp->tilegrdoffy == UINT_FAST32_MAX
cp->tilegrdoffy
cp
cp
tilegrdoffy
UINT_FAST32_MAX
UINT_FAST32_MAX
{		cp->tilegrdoffy = cp->imgareatly;	}
cp->tilegrdoffy = cp->imgareatly;
cp->tilegrdoffy = cp->imgareatly
cp->tilegrdoffy
cp
cp
tilegrdoffy
cp->imgareatly
cp
cp
imgareatly
if (!cp->tilewidth) {		cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;	}
!cp->tilewidth
cp->tilewidth
cp
cp
tilewidth
{		cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;	}
cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;
cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx
cp->tilewidth
cp
cp
tilewidth
cp->refgrdwidth - cp->tilegrdoffx
cp->refgrdwidth
cp
cp
refgrdwidth
cp->tilegrdoffx
cp
cp
tilegrdoffx
if (!cp->tileheight) {		cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;	}
!cp->tileheight
cp->tileheight
cp
cp
tileheight
{		cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;	}
cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;
cp->tileheight = cp->refgrdheight - cp->tilegrdoffy
cp->tileheight
cp
cp
tileheight
cp->refgrdheight - cp->tilegrdoffy
cp->refgrdheight
cp
cp
refgrdheight
cp->tilegrdoffy
cp
cp
tilegrdoffy
if (cp->numcmpts == 3) {		mctvalid = true;		for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}	} else {		mctvalid = false;	}
cp->numcmpts == 3
cp->numcmpts
cp
cp
numcmpts
3
{		mctvalid = true;		for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}	}
mctvalid = true;
mctvalid = true
mctvalid
mctvalid
true
for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}
cmptno = 0;
cmptno = 0
cmptno
cmptno
0
cmptno < jas_image_numcmpts(image)
cmptno
cmptno
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
++cmptno
cmptno
cmptno
{			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}
if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}
jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)
jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0)
jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0)
jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0)
jas_image_cmptprec(image, cmptno)
jas_image_cmptprec
jas_image_cmptprec
image
image
cmptno
cmptno
jas_image_cmptprec(image, 0)
jas_image_cmptprec
jas_image_cmptprec
image
image
0
jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0)
jas_image_cmptsgnd(image, cmptno)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
cmptno
cmptno
jas_image_cmptsgnd(image, 0)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
0
jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0)
jas_image_cmptwidth(image, cmptno)
jas_image_cmptwidth
jas_image_cmptwidth
image
image
cmptno
cmptno
jas_image_cmptwidth(image, 0)
jas_image_cmptwidth
jas_image_cmptwidth
image
image
0
jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)
jas_image_cmptheight(image, cmptno)
jas_image_cmptheight
jas_image_cmptheight
image
image
cmptno
cmptno
jas_image_cmptheight(image, 0)
jas_image_cmptheight
jas_image_cmptheight
image
image
0
{				mctvalid = false;			}
mctvalid = false;
mctvalid = false
mctvalid
mctvalid
false
{		mctvalid = false;	}
mctvalid = false;
mctvalid = false
mctvalid
mctvalid
false
if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB) {		jas_eprintf("warning: color space apparently not RGB\n");	}
mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB
mctvalid && enablemct
mctvalid
mctvalid
enablemct
enablemct
jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB
jas_clrspc_fam(jas_image_clrspc(image))
jas_clrspc_fam
jas_clrspc_fam
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
JAS_CLRSPC_FAM_RGB
JAS_CLRSPC_FAM_RGB
{		jas_eprintf("warning: color space apparently not RGB\n");	}
jas_eprintf("warning: color space apparently not RGB\n");
jas_eprintf("warning: color space apparently not RGB\n")
jas_eprintf
jas_eprintf
"warning: color space apparently not RGB\n"
if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB) {		tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);	} else {		tcp->mctid = JPC_MCT_NONE;	}
mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB
mctvalid && enablemct
mctvalid
mctvalid
enablemct
enablemct
jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB
jas_clrspc_fam(jas_image_clrspc(image))
jas_clrspc_fam
jas_clrspc_fam
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
JAS_CLRSPC_FAM_RGB
JAS_CLRSPC_FAM_RGB
{		tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);	}
tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);
tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT)
tcp->mctid
tcp
tcp
mctid
(tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT)
(tcp->intmode)
tcp->intmode
tcp
tcp
intmode
(JPC_MCT_RCT)
JPC_MCT_RCT
JPC_MCT_RCT
(JPC_MCT_ICT)
JPC_MCT_ICT
JPC_MCT_ICT
{		tcp->mctid = JPC_MCT_NONE;	}
tcp->mctid = JPC_MCT_NONE;
tcp->mctid = JPC_MCT_NONE
tcp->mctid
tcp
tcp
mctid
JPC_MCT_NONE
JPC_MCT_NONE
tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS);
tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS)
tccp->qmfbid
tccp
tccp
qmfbid
(tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS)
(tcp->intmode)
tcp->intmode
tcp
tcp
intmode
(JPC_COX_RFT)
JPC_COX_RFT
JPC_COX_RFT
(JPC_COX_INS)
JPC_COX_INS
JPC_COX_INS
for (rlvlno = 0; rlvlno < tccp->maxrlvls; ++rlvlno) {		tccp->prcwidthexpns[rlvlno] = prcwidthexpn;		tccp->prcheightexpns[rlvlno] = prcheightexpn;	}
rlvlno = 0;
rlvlno = 0
rlvlno
rlvlno
0
rlvlno < tccp->maxrlvls
rlvlno
rlvlno
tccp->maxrlvls
tccp
tccp
maxrlvls
++rlvlno
rlvlno
rlvlno
{		tccp->prcwidthexpns[rlvlno] = prcwidthexpn;		tccp->prcheightexpns[rlvlno] = prcheightexpn;	}
tccp->prcwidthexpns[rlvlno] = prcwidthexpn;
tccp->prcwidthexpns[rlvlno] = prcwidthexpn
tccp->prcwidthexpns[rlvlno]
tccp->prcwidthexpns
tccp
tccp
prcwidthexpns
rlvlno
rlvlno
prcwidthexpn
prcwidthexpn
tccp->prcheightexpns[rlvlno] = prcheightexpn;
tccp->prcheightexpns[rlvlno] = prcheightexpn
tccp->prcheightexpns[rlvlno]
tccp->prcheightexpns
tccp
tccp
prcheightexpns
rlvlno
rlvlno
prcheightexpn
prcheightexpn
if (prcwidthexpn != 15 || prcheightexpn != 15) {		tccp->csty |= JPC_COX_PRT;	}
prcwidthexpn != 15 || prcheightexpn != 15
prcwidthexpn != 15
prcwidthexpn
prcwidthexpn
15
prcheightexpn != 15
prcheightexpn
prcheightexpn
15
{		tccp->csty |= JPC_COX_PRT;	}
tccp->csty |= JPC_COX_PRT;
tccp->csty |= JPC_COX_PRT
tccp->csty
tccp
tccp
csty
JPC_COX_PRT
JPC_COX_PRT
if (!cp->tilewidth) {		jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth);		goto error;	}
!cp->tilewidth
cp->tilewidth
cp
cp
tilewidth
{		jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth);		goto error;	}
jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth);
jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth)
jas_eprintf
jas_eprintf
"invalid tile width %lu\n"
(unsigned long)		  cp->tilewidth
unsigned long
unsigned long

cp->tilewidth
cp
cp
tilewidth
goto error;
error
if (!cp->tileheight) {		jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight);		goto error;	}
!cp->tileheight
cp->tileheight
cp
cp
tileheight
{		jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight);		goto error;	}
jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight);
jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight)
jas_eprintf
jas_eprintf
"invalid tile height %lu\n"
(unsigned long)		  cp->tileheight
unsigned long
unsigned long

cp->tileheight
cp
cp
tileheight
goto error;
error
if (cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly ||	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly) {		jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy);		goto error;	}
cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly ||	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly
cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly ||	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx
cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly
cp->tilegrdoffx > cp->imgareatlx
cp->tilegrdoffx
cp
cp
tilegrdoffx
cp->imgareatlx
cp
cp
imgareatlx
cp->tilegrdoffy > cp->imgareatly
cp->tilegrdoffy
cp
cp
tilegrdoffy
cp->imgareatly
cp
cp
imgareatly
cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx
cp->tilegrdoffx + cp->tilewidth
cp->tilegrdoffx
cp
cp
tilegrdoffx
cp->tilewidth
cp
cp
tilewidth
cp->imgareatlx
cp
cp
imgareatlx
cp->tilegrdoffy + cp->tileheight < cp->imgareatly
cp->tilegrdoffy + cp->tileheight
cp->tilegrdoffy
cp
cp
tilegrdoffy
cp->tileheight
cp
cp
tileheight
cp->imgareatly
cp
cp
imgareatly
{		jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy);		goto error;	}
jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy);
jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy)
jas_eprintf
jas_eprintf
"invalid tile grid offset (%lu, %lu)\n"
(unsigned long) cp->tilegrdoffx
unsigned long
unsigned long

cp->tilegrdoffx
cp
cp
tilegrdoffx
(unsigned long)		  cp->tilegrdoffy
unsigned long
unsigned long

cp->tilegrdoffy
cp
cp
tilegrdoffy
goto error;
error
cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,	  cp->tilewidth);
cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,	  cp->tilewidth)
cp->numhtiles
cp
cp
numhtiles
JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,	  cp->tilewidth)
JPC_CEILDIV
JPC_CEILDIV
cp->refgrdwidth - cp->tilegrdoffx
cp->refgrdwidth
cp
cp
refgrdwidth
cp->tilegrdoffx
cp
cp
tilegrdoffx
cp->tilewidth
cp
cp
tilewidth
cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,	  cp->tileheight);
cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,	  cp->tileheight)
cp->numvtiles
cp
cp
numvtiles
JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,	  cp->tileheight)
JPC_CEILDIV
JPC_CEILDIV
cp->refgrdheight - cp->tilegrdoffy
cp->refgrdheight
cp
cp
refgrdheight
cp->tilegrdoffy
cp
cp
tilegrdoffy
cp->tileheight
cp
cp
tileheight
cp->numtiles = cp->numhtiles * cp->numvtiles;
cp->numtiles = cp->numhtiles * cp->numvtiles
cp->numtiles
cp
cp
numtiles
cp->numhtiles * cp->numvtiles
cp->numhtiles
cp
cp
numhtiles
cp->numvtiles
cp
cp
numvtiles
if (ilyrrates && numilyrrates > 0) {		tcp->numlyrs = numilyrrates + 1;		if (!(tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1),		  sizeof(jpc_fix_t)))) {			goto error;		}		for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1); ++i) {			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);		}	}
ilyrrates && numilyrrates > 0
ilyrrates
ilyrrates
numilyrrates > 0
numilyrrates
numilyrrates
0
{		tcp->numlyrs = numilyrrates + 1;		if (!(tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1),		  sizeof(jpc_fix_t)))) {			goto error;		}		for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1); ++i) {			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);		}	}
tcp->numlyrs = numilyrrates + 1;
tcp->numlyrs = numilyrrates + 1
tcp->numlyrs
tcp
tcp
numlyrs
numilyrrates + 1
numilyrrates
numilyrrates
1
if (!(tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1),		  sizeof(jpc_fix_t)))) {			goto error;		}
!(tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1),		  sizeof(jpc_fix_t)))
(tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1),		  sizeof(jpc_fix_t)))
tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1),		  sizeof(jpc_fix_t))
tcp->ilyrrates
tcp
tcp
ilyrrates
jas_alloc2((tcp->numlyrs - 1),		  sizeof(jpc_fix_t))
jas_alloc2
jas_alloc2
(tcp->numlyrs - 1)
tcp->numlyrs - 1
tcp->numlyrs
tcp
tcp
numlyrs
1
sizeof(jpc_fix_t)
jpc_fix_t
jpc_fix_t
jpc_fix_t

{			goto error;		}
goto error;
error
for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1);
++i
++i
i
i
i
) {			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);		}
if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)) {		jas_eprintf("cannot use real mode for lossless coding\n");		goto error;	}
cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)
cp->totalsize == UINT_FAST32_MAX
cp->totalsize
cp
cp
totalsize
UINT_FAST32_MAX
UINT_FAST32_MAX
(!cp->tcp.intmode)
!cp->tcp.intmode
cp->tcp.intmode
cp->tcp
cp
cp
tcp
intmode
{		jas_eprintf("cannot use real mode for lossless coding\n");		goto error;	}
jas_eprintf("cannot use real mode for lossless coding\n");
jas_eprintf("cannot use real mode for lossless coding\n")
jas_eprintf
jas_eprintf
"cannot use real mode for lossless coding\n"
goto error;
error
if (prcwidthexpn > 15) {		jas_eprintf("invalid precinct width\n");		goto error;	}
prcwidthexpn > 15
prcwidthexpn
prcwidthexpn
15
{		jas_eprintf("invalid precinct width\n");		goto error;	}
jas_eprintf("invalid precinct width\n");
jas_eprintf("invalid precinct width\n")
jas_eprintf
jas_eprintf
"invalid precinct width\n"
goto error;
error
if (prcheightexpn > 15) {		jas_eprintf("invalid precinct height\n");		goto error;	}
prcheightexpn > 15
prcheightexpn
prcheightexpn
15
{		jas_eprintf("invalid precinct height\n");		goto error;	}
jas_eprintf("invalid precinct height\n");
jas_eprintf("invalid precinct height\n")
jas_eprintf
jas_eprintf
"invalid precinct height\n"
goto error;
error
if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12) {		jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn));		goto error;	}
cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12
cp->tccp.cblkwidthexpn < 2
cp->tccp.cblkwidthexpn
cp->tccp
cp
cp
tccp
cblkwidthexpn
2
cp->tccp.cblkwidthexpn > 12
cp->tccp.cblkwidthexpn
cp->tccp
cp
cp
tccp
cblkwidthexpn
12
{		jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn));		goto error;	}
jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn));
jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn))
jas_eprintf
jas_eprintf
"invalid code block width %d\n"
JPC_POW2(cp->tccp.cblkwidthexpn)
JPC_POW2
JPC_POW2
cp->tccp.cblkwidthexpn
cp->tccp
cp
cp
tccp
cblkwidthexpn
goto error;
error
if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12) {		jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn));		goto error;	}
cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12
cp->tccp.cblkheightexpn < 2
cp->tccp.cblkheightexpn
cp->tccp
cp
cp
tccp
cblkheightexpn
2
cp->tccp.cblkheightexpn > 12
cp->tccp.cblkheightexpn
cp->tccp
cp
cp
tccp
cblkheightexpn
12
{		jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn));		goto error;	}
jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn));
jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn))
jas_eprintf
jas_eprintf
"invalid code block height %d\n"
JPC_POW2(cp->tccp.cblkheightexpn)
JPC_POW2
JPC_POW2
cp->tccp.cblkheightexpn
cp->tccp
cp
cp
tccp
cblkheightexpn
goto error;
error
if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12) {		jas_eprintf("code block size too large\n");		goto error;	}
cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12
cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn
cp->tccp.cblkwidthexpn
cp->tccp
cp
cp
tccp
cblkwidthexpn
cp->tccp.cblkheightexpn
cp->tccp
cp
cp
tccp
cblkheightexpn
12
{		jas_eprintf("code block size too large\n");		goto error;	}
jas_eprintf("code block size too large\n");
jas_eprintf("code block size too large\n")
jas_eprintf
jas_eprintf
"code block size too large\n"
goto error;
error
if (cp->tcp.numlyrs > 16384) {		jas_eprintf("too many layers\n");		goto error;	}
cp->tcp.numlyrs > 16384
cp->tcp.numlyrs
cp->tcp
cp
cp
tcp
numlyrs
16384
{		jas_eprintf("too many layers\n");		goto error;	}
jas_eprintf("too many layers\n");
jas_eprintf("too many layers\n")
jas_eprintf
jas_eprintf
"too many layers\n"
goto error;
error
if (cp->tccp.maxrlvls < 1) {		jas_eprintf("must be at least one resolution level\n");		goto error;	}
cp->tccp.maxrlvls < 1
cp->tccp.maxrlvls
cp->tccp
cp
cp
tccp
maxrlvls
1
{		jas_eprintf("must be at least one resolution level\n");		goto error;	}
jas_eprintf("must be at least one resolution level\n");
jas_eprintf("must be at least one resolution level\n")
jas_eprintf
jas_eprintf
"must be at least one resolution level\n"
goto error;
error
if (cp->tccp.numgbits > 8) {		jas_eprintf("invalid number of guard bits\n");		goto error;	}
cp->tccp.numgbits > 8
cp->tccp.numgbits
cp->tccp
cp
cp
tccp
numgbits
8
{		jas_eprintf("invalid number of guard bits\n");		goto error;	}
jas_eprintf("invalid number of guard bits\n");
jas_eprintf("invalid number of guard bits\n")
jas_eprintf
jas_eprintf
"invalid number of guard bits\n"
goto error;
error
if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize) {		jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);	}
cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize
cp->totalsize != UINT_FAST32_MAX
cp->totalsize
cp
cp
totalsize
UINT_FAST32_MAX
UINT_FAST32_MAX
cp->totalsize > cp->rawsize
cp->totalsize
cp
cp
totalsize
cp->rawsize
cp
cp
rawsize
{		jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);	}
jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);
jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize)
jas_eprintf
jas_eprintf
"warning: specified rate is unreasonably large (%lu > %lu)\n"
(unsigned long) cp->totalsize
unsigned long
unsigned long

cp->totalsize
cp
cp
totalsize
(unsigned long) cp->rawsize
unsigned long
unsigned long

cp->rawsize
cp
cp
rawsize
if (tcp->numlyrs > 1) {		/* The intermediate layers rates must increase monotonically. */		for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}		/* The intermediate layer rates must be less than the overall rate. */		if (cp->totalsize != UINT_FAST32_MAX) {			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}	}
tcp->numlyrs > 1
tcp->numlyrs
tcp
tcp
numlyrs
1
{		/* The intermediate layers rates must increase monotonically. */		for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}		/* The intermediate layer rates must be less than the overall rate. */		if (cp->totalsize != UINT_FAST32_MAX) {			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}	}
for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}
lyrno = 0;
lyrno = 0
lyrno
lyrno
0
lyrno + 2 < tcp->numlyrs
lyrno + 2
lyrno
lyrno
2
tcp->numlyrs
tcp
tcp
numlyrs
++lyrno
lyrno
lyrno
{			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}
if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}
tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]
tcp->ilyrrates[lyrno]
tcp->ilyrrates
tcp
tcp
ilyrrates
lyrno
lyrno
tcp->ilyrrates[lyrno + 1]
tcp->ilyrrates
tcp
tcp
ilyrrates
lyrno + 1
lyrno
lyrno
1
{				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}
jas_eprintf("intermediate layer rates must increase monotonically\n");
jas_eprintf("intermediate layer rates must increase monotonically\n")
jas_eprintf
jas_eprintf
"intermediate layer rates must increase monotonically\n"
goto error;
error
if (cp->totalsize != UINT_FAST32_MAX) {			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}
cp->totalsize != UINT_FAST32_MAX
cp->totalsize
cp
cp
totalsize
UINT_FAST32_MAX
UINT_FAST32_MAX
{			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}
for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}
lyrno = 0;
lyrno = 0
lyrno
lyrno
0
lyrno < tcp->numlyrs - 1
lyrno
lyrno
tcp->numlyrs - 1
tcp->numlyrs
tcp
tcp
numlyrs
1
++lyrno
lyrno
lyrno
{				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}
if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}
jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize
jpc_fixtodbl(tcp->ilyrrates[lyrno])
jpc_fixtodbl
jpc_fixtodbl
tcp->ilyrrates[lyrno]
tcp->ilyrrates
tcp
tcp
ilyrrates
lyrno
lyrno
((double) cp->totalsize)				  / cp->rawsize
((double) cp->totalsize)
(double) cp->totalsize
double
double

cp->totalsize
cp
cp
totalsize
cp->rawsize
cp
cp
rawsize
{					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}
jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");
jas_eprintf("warning: intermediate layer rates must be less than overall rate\n")
jas_eprintf
jas_eprintf
"warning: intermediate layer rates must be less than overall rate\n"
goto error;
error
if (ilyrrates) {		jas_free(ilyrrates);	}
ilyrrates
ilyrrates
{		jas_free(ilyrrates);	}
jas_free(ilyrrates);
jas_free(ilyrrates)
jas_free
jas_free
ilyrrates
ilyrrates
return cp;
cp
cp
error:	if (ilyrrates) {		jas_free(ilyrrates);	}
error
if (ilyrrates) {		jas_free(ilyrrates);	}
ilyrrates
ilyrrates
{		jas_free(ilyrrates);	}
jas_free(ilyrrates);
jas_free(ilyrrates)
jas_free
jas_free
ilyrrates
ilyrrates
if (tvp) {		jas_tvparser_destroy(tvp);	}
tvp
tvp
{		jas_tvparser_destroy(tvp);	}
jas_tvparser_destroy(tvp);
jas_tvparser_destroy(tvp)
jas_tvparser_destroy
jas_tvparser_destroy
tvp
tvp
if (cp) {		jpc_enc_cp_destroy(cp);	}
cp
cp
{		jpc_enc_cp_destroy(cp);	}
jpc_enc_cp_destroy(cp);
jpc_enc_cp_destroy(cp)
jpc_enc_cp_destroy
jpc_enc_cp_destroy
cp
cp
return 0;
0
-----joern-----
(624,87,0)
(484,108,0)
(640,406,0)
(940,661,0)
(977,280,0)
(732,728,0)
(760,953,0)
(374,427,0)
(699,856,0)
(760,1323,0)
(99,244,0)
(112,1156,0)
(624,382,0)
(585,917,0)
(1235,149,0)
(434,214,0)
(1032,733,0)
(216,406,0)
(324,688,0)
(206,403,0)
(283,39,0)
(76,382,0)
(76,1273,0)
(804,551,0)
(393,56,0)
(252,660,0)
(48,303,0)
(624,759,0)
(373,749,0)
(1004,215,0)
(60,184,0)
(1017,1311,0)
(792,295,0)
(445,82,0)
(110,406,0)
(1398,406,0)
(798,688,0)
(1296,906,0)
(76,903,0)
(1178,389,0)
(792,382,0)
(760,356,0)
(357,324,0)
(338,110,0)
(884,1343,0)
(1350,1324,0)
(825,1186,0)
(179,1365,0)
(760,859,0)
(354,406,0)
(58,431,0)
(108,1110,0)
(103,797,0)
(624,1103,0)
(1372,1054,0)
(1168,979,0)
(741,10,0)
(1385,114,0)
(862,1042,0)
(1291,905,0)
(501,124,0)
(1345,1046,0)
(939,1201,0)
(180,1035,0)
(392,601,0)
(1093,632,0)
(89,1149,0)
(143,970,0)
(962,1088,0)
(97,122,0)
(1110,108,0)
(1224,648,0)
(542,1046,0)
(689,1043,0)
(40,310,0)
(1379,1315,0)
(329,1079,0)
(406,600,0)
(26,1122,0)
(62,244,0)
(734,36,0)
(1076,688,0)
(357,734,0)
(755,518,0)
(354,1205,0)
(1398,747,0)
(1136,721,0)
(625,1303,0)
(851,1046,0)
(220,752,0)
(1101,1136,0)
(643,1159,0)
(89,222,0)
(76,1191,0)
(89,1138,0)
(1108,1000,0)
(760,1245,0)
(835,680,0)
(430,31,0)
(172,1306,0)
(187,609,0)
(808,1362,0)
(31,721,0)
(86,728,0)
(624,764,0)
(671,621,0)
(112,1086,0)
(624,1245,0)
(296,1046,0)
(479,1151,0)
(116,929,0)
(529,60,0)
(1043,660,0)
(1085,1117,0)
(1137,1081,0)
(525,615,0)
(982,701,0)
(1304,453,0)
(880,917,0)
(163,1402,0)
(1142,897,0)
(1224,787,0)
(624,875,0)
(214,1021,0)
(56,841,0)
(792,485,0)
(1224,1273,0)
(252,1286,0)
(781,617,0)
(1234,88,0)
(612,104,0)
(416,1046,0)
(89,787,0)
(208,728,0)
(1328,735,0)
(690,269,0)
(1117,406,0)
(1283,1173,0)
(1137,556,0)
(292,1347,0)
(42,1290,0)
(626,1046,0)
(293,624,0)
(1318,954,0)
(539,107,0)
(1137,447,0)
(603,1046,0)
(1118,104,0)
(478,99,0)
(1156,64,0)
(555,1291,0)
(633,997,0)
(982,406,0)
(733,450,0)
(725,1319,0)
(1144,144,0)
(1310,1366,0)
(739,58,0)
(1212,381,0)
(1191,1154,0)
(489,929,0)
(479,749,0)
(327,688,0)
(1392,601,0)
(628,848,0)
(1274,728,0)
(479,1076,0)
(1154,531,0)
(676,1201,0)
(500,556,0)
(1224,1117,0)
(1182,1123,0)
(182,590,0)
(1257,1131,0)
(387,1233,0)
(733,1014,0)
(760,798,0)
(25,970,0)
(490,1035,0)
(511,862,0)
(250,965,0)
(792,759,0)
(973,113,0)
(366,321,0)
(1137,764,0)
(166,747,0)
(64,628,0)
(1321,1314,0)
(1037,1000,0)
(716,101,0)
(872,728,0)
(445,1275,0)
(1006,230,0)
(252,970,0)
(756,114,0)
(970,1046,0)
(89,749,0)
(1174,1248,0)
(810,1046,0)
(617,430,0)
(640,917,0)
(935,1042,0)
(479,859,0)
(319,1390,0)
(868,228,0)
(1332,1096,0)
(89,356,0)
(1001,987,0)
(197,688,0)
(357,749,0)
(419,1149,0)
(1361,1052,0)
(307,961,0)
(792,1149,0)
(979,1370,0)
(366,314,0)
(114,1385,0)
(816,1352,0)
(500,859,0)
(624,324,0)
(76,1141,0)
(944,628,0)
(994,228,0)
(1182,406,0)
(1278,1290,0)
(99,1323,0)
(700,177,0)
(1192,721,0)
(99,764,0)
(454,856,0)
(2,181,0)
(1299,1199,0)
(792,1058,0)
(1154,1141,0)
(690,1286,0)
(76,648,0)
(500,244,0)
(1300,660,0)
(1390,579,0)
(685,1046,0)
(1036,820,0)
(748,624,0)
(760,1062,0)
(1375,505,0)
(1369,1300,0)
(89,1103,0)
(590,1161,0)
(459,435,0)
(166,588,0)
(217,1,0)
(1265,1065,0)
(1374,406,0)
(587,406,0)
(1264,406,0)
(99,953,0)
(5,646,0)
(1082,870,0)
(391,1334,0)
(479,40,0)
(1224,222,0)
(1198,509,0)
(1401,228,0)
(1295,551,0)
(371,728,0)
(276,654,0)
(99,556,0)
(1196,1315,0)
(1251,12,0)
(719,197,0)
(526,1046,0)
(1224,1103,0)
(1094,500,0)
(479,953,0)
(142,377,0)
(492,296,0)
(327,247,0)
(121,162,0)
(1245,479,0)
(514,1107,0)
(1002,551,0)
(117,356,0)
(412,18,0)
(76,749,0)
(1335,608,0)
(819,1323,0)
(733,1279,0)
(99,648,0)
(257,829,0)
(725,721,0)
(76,764,0)
(792,1290,0)
(552,990,0)
(89,197,0)
(465,1131,0)
(1137,902,0)
(500,759,0)
(175,1210,0)
(949,1046,0)
(88,856,0)
(89,547,0)
(500,1265,0)
(63,728,0)
(1120,868,0)
(1052,1361,0)
(522,1224,0)
(488,303,0)
(381,701,0)
(438,613,0)
(25,1335,0)
(1041,507,0)
(502,728,0)
(857,890,0)
(357,1245,0)
(1114,1046,0)
(1254,1220,0)
(76,556,0)
(630,868,0)
(869,728,0)
(1390,517,0)
(145,997,0)
(1353,728,0)
(784,1374,0)
(760,556,0)
(141,1038,0)
(655,431,0)
(1186,573,0)
(1253,283,0)
(76,981,0)
(194,608,0)
(368,1318,0)
(315,721,0)
(99,559,0)
(906,406,0)
(589,1311,0)
(918,202,0)
(355,113,0)
(705,1046,0)
(1230,110,0)
(914,1374,0)
(1023,683,0)
(1070,406,0)
(500,1107,0)
(517,990,0)
(166,1065,0)
(73,1046,0)
(1367,817,0)
(878,306,0)
(116,699,0)
(796,303,0)
(99,1248,0)
(357,1094,0)
(357,1151,0)
(792,1062,0)
(997,151,0)
(873,804,0)
(518,406,0)
(962,1042,0)
(1184,813,0)
(1030,1046,0)
(99,1210,0)
(1020,1117,0)
(1394,252,0)
(1141,688,0)
(479,1141,0)
(624,387,0)
(816,721,0)
(0,1254,0)
(528,1010,0)
(1009,885,0)
(1080,1052,0)
(1382,447,0)
(792,648,0)
(760,447,0)
(432,728,0)
(89,1117,0)
(624,919,0)
(509,666,0)
(917,81,0)
(500,382,0)
(1137,1076,0)
(1331,1099,0)
(595,1325,0)
(565,792,0)
(600,1034,0)
(1189,747,0)
(76,324,0)
(980,283,0)
(76,1081,0)
(356,406,0)
(1201,939,0)
(1254,917,0)
(1232,1151,0)
(747,728,0)
(261,1330,0)
(1366,1286,0)
(500,1210,0)
(479,672,0)
(1142,824,0)
(312,1209,0)
(582,1108,0)
(883,954,0)
(377,133,0)
(99,663,0)
(817,796,0)
(866,1258,0)
(321,1279,0)
(1254,1277,0)
(1401,1346,0)
(1265,406,0)
(50,728,0)
(959,835,0)
(89,324,0)
(314,721,0)
(357,87,0)
(154,984,0)
(793,427,0)
(1026,752,0)
(1156,112,0)
(443,1016,0)
(507,483,0)
(1098,1002,0)
(494,856,0)
(787,1000,0)
(985,149,0)
(99,981,0)
(1034,600,0)
(497,723,0)
(793,664,0)
(100,832,0)
(921,406,0)
(500,40,0)
(357,354,0)
(1224,387,0)
(731,939,0)
(1276,728,0)
(673,805,0)
(1224,531,0)
(99,87,0)
(344,1277,0)
(1096,721,0)
(627,744,0)
(209,274,0)
(1168,122,0)
(1224,1094,0)
(802,1385,0)
(1216,1346,0)
(21,1046,0)
(76,1058,0)
(513,905,0)
(1340,281,0)
(1398,588,0)
(624,749,0)
(43,1182,0)
(1064,856,0)
(433,1046,0)
(1154,197,0)
(1,217,0)
(217,233,0)
(760,1138,0)
(1154,1076,0)
(453,1114,0)
(89,447,0)
(607,242,0)
(988,362,0)
(222,929,0)
(76,356,0)
(749,942,0)
(345,406,0)
(410,40,0)
(1290,1123,0)
(99,1062,0)
(854,243,0)
(941,1273,0)
(281,242,0)
(898,728,0)
(1283,1255,0)
(357,1058,0)
(556,700,0)
(657,269,0)
(319,990,0)
(76,244,0)
(656,1016,0)
(163,1319,0)
(479,1149,0)
(792,672,0)
(1117,872,0)
(195,26,0)
(846,728,0)
(321,406,0)
(500,787,0)
(357,40,0)
(1145,1046,0)
(823,759,0)
(698,1072,0)
(637,547,0)
(1189,494,0)
(792,798,0)
(1014,1336,0)
(792,1273,0)
(353,406,0)
(838,1034,0)
(357,197,0)
(605,216,0)
(89,902,0)
(943,1099,0)
(99,1107,0)
(792,129,0)
(165,587,0)
(387,1000,0)
(951,700,0)
(500,87,0)
(1184,856,0)
(151,467,0)
(538,1075,0)
(1224,1330,0)
(718,159,0)
(1372,406,0)
(1359,287,0)
(89,875,0)
(624,1306,0)
(1334,747,0)
(357,222,0)
(1312,490,0)
(302,996,0)
(291,1046,0)
(1153,1046,0)
(800,553,0)
(19,385,0)
(647,538,0)
(792,749,0)
(161,1054,0)
(231,778,0)
(876,485,0)
(541,1046,0)
(1386,1005,0)
(479,244,0)
(862,406,0)
(1107,688,0)
(479,1295,0)
(966,96,0)
(800,1289,0)
(1154,1295,0)
(1137,1058,0)
(300,569,0)
(1137,1117,0)
(887,802,0)
(760,1107,0)
(289,1024,0)
(624,40,0)
(89,1151,0)
(76,672,0)
(1210,1297,0)
(357,953,0)
(842,856,0)
(1013,1046,0)
(624,672,0)
(691,636,0)
(881,897,0)
(583,278,0)
(793,112,0)
(479,772,0)
(190,377,0)
(1137,1265,0)
(475,813,0)
(1068,609,0)
(938,437,0)
(778,475,0)
(624,1107,0)
(991,820,0)
(479,648,0)
(604,140,0)
(1000,39,0)
(1317,1004,0)
(179,728,0)
(905,513,0)
(1138,1072,0)
(790,283,0)
(579,703,0)
(383,969,0)
(1154,1323,0)
(1050,1046,0)
(856,743,0)
(89,387,0)
(94,397,0)
(479,559,0)
(936,381,0)
(656,613,0)
(760,787,0)
(1262,728,0)
(1154,759,0)
(357,663,0)
(357,902,0)
(831,772,0)
(10,856,0)
(1055,962,0)
(1366,1199,0)
(166,406,0)
(1202,728,0)
(1290,406,0)
(357,1103,0)
(386,1268,0)
(1356,406,0)
(18,591,0)
(1280,961,0)
(76,197,0)
(124,856,0)
(61,239,0)
(1390,319,0)
(357,1374,0)
(479,759,0)
(667,736,0)
(68,197,0)
(103,696,0)
(1235,856,0)
(194,956,0)
(479,902,0)
(99,1191,0)
(1137,1323,0)
(1149,104,0)
(1033,1289,0)
(650,1046,0)
(715,696,0)
(318,1027,0)
(430,1046,0)
(1093,970,0)
(1282,824,0)
(1137,173,0)
(459,283,0)
(1134,990,0)
(130,728,0)
(479,1107,0)
(630,1301,0)
(760,772,0)
(1059,292,0)
(641,805,0)
(662,427,0)
(240,406,0)
(735,296,0)
(500,1081,0)
(867,315,0)
(1224,244,0)
(500,1295,0)
(927,590,0)
(110,1046,0)
(500,559,0)
(673,1140,0)
(1199,1366,0)
(1339,1074,0)
(415,92,0)
(571,517,0)
(885,104,0)
(1127,173,0)
(500,531,0)
(270,1046,0)
(1398,106,0)
(1154,447,0)
(500,764,0)
(76,1265,0)
(619,656,0)
(1324,406,0)
(439,31,0)
(1229,345,0)
(233,217,0)
(870,151,0)
(1137,1191,0)
(76,1264,0)
(698,406,0)
(1005,1356,0)
(479,1062,0)
(351,1046,0)
(357,1290,0)
(89,798,0)
(1154,547,0)
(986,1037,0)
(962,102,0)
(792,1076,0)
(98,919,0)
(624,1058,0)
(267,296,0)
(274,797,0)
(825,1000,0)
(473,1042,0)
(125,1046,0)
(89,953,0)
(739,929,0)
(1092,1337,0)
(479,324,0)
(1112,875,0)
(704,1305,0)
(606,1225,0)
(1137,909,0)
(1191,159,0)
(99,1330,0)
(243,476,0)
(509,406,0)
(646,5,0)
(1300,555,0)
(202,58,0)
(1137,1264,0)
(792,1081,0)
(161,964,0)
(99,1058,0)
(1037,310,0)
(222,406,0)
(852,1372,0)
(584,965,0)
(870,104,0)
(357,859,0)
(1211,1103,0)
(1205,243,0)
(500,903,0)
(760,902,0)
(1083,1046,0)
(357,1248,0)
(1156,614,0)
(981,688,0)
(792,871,0)
(413,1378,0)
(885,1362,0)
(99,1265,0)
(107,628,0)
(896,1209,0)
(99,129,0)
(1170,166,0)
(1334,406,0)
(1389,859,0)
(1316,223,0)
(357,1117,0)
(1052,406,0)
(788,1295,0)
(1186,777,0)
(1340,868,0)
(479,1330,0)
(27,226,0)
(357,547,0)
(714,1081,0)
(1380,885,0)
(1271,166,0)
(760,197,0)
(647,1311,0)
(590,406,0)
(350,1392,0)
(1043,178,0)
(97,406,0)
(704,309,0)
(176,2,0)
(1022,881,0)
(1281,133,0)
(274,856,0)
(431,624,0)
(473,406,0)
(804,161,0)
(981,659,0)
(687,879,0)
(426,728,0)
(1137,547,0)
(295,795,0)
(792,1044,0)
(1224,798,0)
(695,202,0)
(1289,166,0)
(201,459,0)
(888,559,0)
(995,739,0)
(796,817,0)
(968,1344,0)
(1137,798,0)
(1206,802,0)
(760,1094,0)
(915,368,0)
(400,840,0)
(598,1046,0)
(382,406,0)
(1157,956,0)
(1137,1273,0)
(678,356,0)
(35,979,0)
(60,721,0)
(792,903,0)
(1060,140,0)
(1076,760,0)
(243,1205,0)
(1221,890,0)
(609,1068,0)
(344,406,0)
(89,981,0)
(1128,739,0)
(601,1392,0)
(506,445,0)
(284,1142,0)
(656,944,0)
(76,1248,0)
(581,518,0)
(495,406,0)
(500,1141,0)
(635,379,0)
(792,1248,0)
(1224,981,0)
(663,1000,0)
(226,648,0)
(832,1205,0)
(911,1014,0)
(315,990,0)
(1224,902,0)
(1224,382,0)
(772,406,0)
(174,990,0)
(588,93,0)
(178,342,0)
(257,856,0)
(1137,1272,0)
(734,727,0)
(314,366,0)
(240,1385,0)
(743,856,0)
(1333,252,0)
(1238,1145,0)
(1134,1316,0)
(1325,406,0)
(442,962,0)
(112,793,0)
(1175,65,0)
(64,897,0)
(479,1191,0)
(1227,112,0)
(288,698,0)
(1224,875,0)
(1137,559,0)
(30,215,0)
(974,698,0)
(231,394,0)
(1079,406,0)
(479,981,0)
(505,1375,0)
(699,116,0)
(1335,25,0)
(1365,822,0)
(1154,244,0)
(22,1186,0)
(950,569,0)
(880,754,0)
(247,1209,0)
(798,1250,0)
(1137,1248,0)
(479,382,0)
(539,1015,0)
(1131,929,0)
(219,1372,0)
(1330,688,0)
(517,721,0)
(1219,12,0)
(107,406,0)
(1277,344,0)
(945,787,0)
(1363,932,0)
(1058,701,0)
(240,951,0)
(792,919,0)
(500,1138,0)
(1383,485,0)
(192,1295,0)
(1134,721,0)
(937,552,0)
(1218,1272,0)
(1344,968,0)
(1067,757,0)
(880,1137,0)
(357,903,0)
(1304,397,0)
(453,1304,0)
(624,1021,0)
(344,1042,0)
(1177,787,0)
(102,962,0)
(51,184,0)
(479,1273,0)
(245,556,0)
(1320,1046,0)
(337,36,0)
(74,500,0)
(96,721,0)
(414,1098,0)
(837,728,0)
(748,1014,0)
(1186,825,0)
(1334,591,0)
(624,1323,0)
(967,643,0)
(1331,977,0)
(1252,381,0)
(839,1286,0)
(1103,1321,0)
(965,1145,0)
(1031,1250,0)
(348,406,0)
(593,194,0)
(1137,981,0)
(534,666,0)
(476,243,0)
(1224,547,0)
(613,897,0)
(89,1245,0)
(8,1347,0)
(6,1076,0)
(1123,366,0)
(85,495,0)
(1108,777,0)
(475,778,0)
(649,1046,0)
(161,804,0)
(1378,1159,0)
(760,1058,0)
(1074,19,0)
(1029,447,0)
(500,1149,0)
(1349,89,0)
(701,1046,0)
(654,355,0)
(1288,922,0)
(162,1401,0)
(127,856,0)
(76,1295,0)
(1146,85,0)
(1081,967,0)
(216,917,0)
(1122,26,0)
(1019,1046,0)
(663,365,0)
(25,1286,0)
(500,648,0)
(479,1094,0)
(99,1103,0)
(1224,1151,0)
(195,406,0)
(44,406,0)
(1260,654,0)
(727,688,0)
(11,1244,0)
(624,903,0)
(1137,903,0)
(487,1195,0)
(1137,875,0)
(1309,443,0)
(357,1265,0)
(1137,40,0)
(961,406,0)
(252,1394,0)
(792,1103,0)
(157,1284,0)
(724,368,0)
(1402,163,0)
(737,412,0)
(423,222,0)
(395,214,0)
(166,1289,0)
(446,1185,0)
(659,968,0)
(443,944,0)
(696,728,0)
(820,991,0)
(1122,1006,0)
(792,354,0)
(847,362,0)
(316,95,0)
(1330,291,0)
(99,1295,0)
(304,1361,0)
(76,728,0)
(473,1088,0)
(1220,1234,0)
(500,356,0)
(500,324,0)
(1338,559,0)
(624,1191,0)
(206,805,0)
(1371,697,0)
(754,1046,0)
(1354,67,0)
(1135,717,0)
(624,1248,0)
(1258,910,0)
(415,406,0)
(28,547,0)
(1154,772,0)
(15,1191,0)
(862,1088,0)
(12,406,0)
(885,660,0)
(610,317,0)
(824,400,0)
(1072,1046,0)
(604,573,0)
(357,531,0)
(397,778,0)
(241,528,0)
(624,1094,0)
(792,839,0)
(1171,1205,0)
(562,921,0)
(1224,1058,0)
(89,1141,0)
(1058,406,0)
(361,226,0)
(1137,1210,0)
(807,141,0)
(1224,40,0)
(76,859,0)
(340,849,0)
(479,903,0)
(829,80,0)
(792,744,0)
(1006,1122,0)
(881,406,0)
(748,61,0)
(321,80,0)
(921,910,0)
(919,1384,0)
(489,384,0)
(827,345,0)
(600,406,0)
(590,1065,0)
(547,1088,0)
(216,1137,0)
(559,406,0)
(38,769,0)
(297,727,0)
(437,954,0)
(677,856,0)
(123,723,0)
(1137,1103,0)
(479,1210,0)
(982,814,0)
(1224,764,0)
(76,547,0)
(96,579,0)
(1056,64,0)
(120,1346,0)
(198,283,0)
(169,1398,0)
(1371,917,0)
(634,406,0)
(760,759,0)
(734,303,0)
(760,875,0)
(381,1252,0)
(415,1220,0)
(1332,156,0)
(567,1108,0)
(1378,856,0)
(739,406,0)
(127,996,0)
(592,542,0)
(1011,615,0)
(628,944,0)
(473,666,0)
(4,476,0)
(612,905,0)
(616,369,0)
(357,1330,0)
(480,1129,0)
(661,430,0)
(479,197,0)
(760,129,0)
(286,728,0)
(760,919,0)
(1368,1093,0)
(1356,628,0)
(1239,1046,0)
(76,1330,0)
(191,1268,0)
(792,640,0)
(792,1070,0)
(1322,342,0)
(450,299,0)
(412,165,0)
(953,1030,0)
(76,1062,0)
(910,921,0)
(55,727,0)
(805,524,0)
(792,1046,0)
(656,154,0)
(591,1252,0)
(624,1330,0)
(1137,953,0)
(828,353,0)
(1154,981,0)
(760,663,0)
(1272,406,0)
(904,321,0)
(99,919,0)
(349,672,0)
(67,721,0)
(89,903,0)
(1137,787,0)
(1321,362,0)
(324,144,0)
(225,1182,0)
(669,240,0)
(52,660,0)
(1203,1235,0)
(89,1062,0)
(76,1149,0)
(1068,1284,0)
(747,1189,0)
(328,728,0)
(906,1296,0)
(124,820,0)
(1137,197,0)
(357,648,0)
(1346,1046,0)
(46,982,0)
(712,435,0)
(1139,1398,0)
(61,739,0)
(76,1323,0)
(226,406,0)
(836,728,0)
(792,1272,0)
(479,1264,0)
(278,1137,0)
(1224,1062,0)
(1137,222,0)
(115,728,0)
(500,1245,0)
(624,902,0)
(1163,733,0)
(89,1081,0)
(479,875,0)
(1224,1138,0)
(760,1151,0)
(1137,859,0)
(1129,480,0)
(1224,1323,0)
(141,856,0)
(13,387,0)
(99,40,0)
(500,772,0)
(1053,1284,0)
(356,80,0)
(357,1149,0)
(1201,303,0)
(1119,636,0)
(1149,660,0)
(99,749,0)
(89,764,0)
(1266,753,0)
(679,935,0)
(858,953,0)
(330,1138,0)
(89,759,0)
(238,5,0)
(298,107,0)
(1200,1154,0)
(1261,399,0)
(1180,1148,0)
(695,588,0)
(1273,747,0)
(697,102,0)
(998,357,0)
(411,856,0)
(899,1343,0)
(357,556,0)
(171,1096,0)
(1295,406,0)
(489,406,0)
(749,406,0)
(336,1046,0)
(299,697,0)
(821,1334,0)
(889,988,0)
(792,1372,0)
(1220,728,0)
(764,99,0)
(1183,406,0)
(1154,1151,0)
(1171,551,0)
(99,222,0)
(948,1309,0)
(1224,559,0)
(1376,728,0)
(89,1076,0)
(1137,1138,0)
(377,190,0)
(500,197,0)
(320,1046,0)
(147,216,0)
(76,919,0)
(509,1088,0)
(563,240,0)
(151,870,0)
(1122,661,0)
(1166,699,0)
(792,556,0)
(248,988,0)
(467,151,0)
(358,1401,0)
(835,802,0)
(792,787,0)
(1021,214,0)
(75,1046,0)
(505,210,0)
(479,728,0)
(531,227,0)
(680,835,0)
(385,437,0)
(471,1081,0)
(134,871,0)
(1096,1332,0)
(556,406,0)
(792,1107,0)
(792,1323,0)
(608,1335,0)
(939,659,0)
(353,1094,0)
(1182,695,0)
(1126,231,0)
(791,1021,0)
(660,1046,0)
(1286,690,0)
(223,670,0)
(1287,1253,0)
(580,1046,0)
(89,559,0)
(254,1192,0)
(902,706,0)
(1255,1283,0)
(76,787,0)
(961,1385,0)
(334,870,0)
(533,728,0)
(1154,1330,0)
(624,1264,0)
(962,406,0)
(210,505,0)
(1137,772,0)
(1210,688,0)
(229,507,0)
(83,954,0)
(1352,816,0)
(357,1191,0)
(244,799,0)
(88,1234,0)
(660,899,0)
(834,764,0)
(792,1094,0)
(954,1046,0)
(613,406,0)
(40,406,0)
(805,673,0)
(759,1019,0)
(1374,1395,0)
(760,764,0)
(977,1331,0)
(1307,553,0)
(1371,406,0)
(760,87,0)
(1219,688,0)
(601,856,0)
(725,254,0)
(397,510,0)
(1077,856,0)
(183,65,0)
(447,660,0)
(624,559,0)
(617,1146,0)
(239,61,0)
(971,1171,0)
(566,883,0)
(901,233,0)
(479,1081,0)
(500,1117,0)
(710,107,0)
(357,981,0)
(792,1265,0)
(1209,890,0)
(111,1319,0)
(398,897,0)
(1079,1239,0)
(214,990,0)
(99,1117,0)
(184,184,0)
(881,840,0)
(761,554,0)
(760,1264,0)
(932,746,0)
(69,728,0)
(763,748,0)
(910,1258,0)
(880,1042,0)
(466,847,0)
(751,734,0)
(588,695,0)
(211,1093,0)
(984,154,0)
(89,1273,0)
(1399,1254,0)
(1038,331,0)
(1137,324,0)
(89,1210,0)
(643,967,0)
(712,1000,0)
(644,953,0)
(812,728,0)
(760,1210,0)
(1167,1058,0)
(129,1354,0)
(792,197,0)
(136,445,0)
(79,163,0)
(1181,1192,0)
(776,1356,0)
(624,1272,0)
(1154,129,0)
(1224,772,0)
(750,1043,0)
(521,1046,0)
(868,1340,0)
(1171,1072,0)
(221,420,0)
(1366,660,0)
(1155,281,0)
(357,1295,0)
(527,1046,0)
(1074,612,0)
(1137,382,0)
(99,1076,0)
(357,327,0)
(479,129,0)
(599,348,0)
(20,663,0)
(726,677,0)
(1226,744,0)
(1266,269,0)
(1171,477,0)
(1204,772,0)
(76,1076,0)
(1254,754,0)
(203,1299,0)
(381,406,0)
(661,406,0)
(760,1149,0)
(624,129,0)
(993,556,0)
(167,1004,0)
(173,1014,0)
(688,1046,0)
(357,485,0)
(832,1072,0)
(287,721,0)
(106,1398,0)
(624,1149,0)
(792,1138,0)
(365,573,0)
(733,406,0)
(853,387,0)
(624,1210,0)
(253,647,0)
(89,1248,0)
(1348,1371,0)
(519,696,0)
(624,1265,0)
(156,1401,0)
(792,1117,0)
(802,406,0)
(1300,970,0)
(1311,406,0)
(233,856,0)
(1259,310,0)
(149,1235,0)
(703,579,0)
(500,981,0)
(346,519,0)
(790,1233,0)
(355,972,0)
(569,1065,0)
(479,787,0)
(951,240,0)
(928,1046,0)
(1352,990,0)
(733,80,0)
(1371,754,0)
(299,946,0)
(785,1046,0)
(1024,683,0)
(216,1220,0)
(1084,1356,0)
(871,762,0)
(572,524,0)
(1104,935,0)
(1044,357,0)
(1242,87,0)
(17,612,0)
(792,324,0)
(726,248,0)
(874,40,0)
(357,787,0)
(792,902,0)
(820,124,0)
(444,422,0)
(1224,324,0)
(792,1264,0)
(84,1340,0)
(287,1319,0)
(357,640,0)
(474,342,0)
(479,663,0)
(345,1229,0)
(357,1062,0)
(694,839,0)
(1311,647,0)
(1351,1046,0)
(1101,1395,0)
(618,816,0)
(99,903,0)
(733,624,0)
(1224,87,0)
(162,446,0)
(1284,721,0)
(1098,856,0)
(1012,1157,0)
(1042,1115,0)
(900,1137,0)
(624,547,0)
(624,356,0)
(961,1280,0)
(1267,445,0)
(402,531,0)
(1102,365,0)
(1154,1248,0)
(1143,736,0)
(1337,924,0)
(920,701,0)
(448,1065,0)
(357,796,0)
(1154,1058,0)
(551,728,0)
(1049,759,0)
(146,1400,0)
(76,87,0)
(551,1002,0)
(89,859,0)
(499,178,0)
(1224,356,0)
(612,1074,0)
(624,787,0)
(335,1076,0)
(1224,1191,0)
(195,628,0)
(717,991,0)
(1002,1098,0)
(1384,1046,0)
(792,1295,0)
(624,556,0)
(1375,186,0)
(907,1019,0)
(624,531,0)
(99,1264,0)
(495,897,0)
(952,87,0)
(399,1261,0)
(826,721,0)
(230,1006,0)
(325,1046,0)
(1356,1005,0)
(1297,1046,0)
(1301,826,0)
(703,223,0)
(184,515,0)
(1318,368,0)
(1125,856,0)
(1154,1149,0)
(1154,663,0)
(1197,587,0)
(156,1332,0)
(665,832,0)
(554,769,0)
(479,87,0)
(451,1046,0)
(1286,987,0)
(875,536,0)
(495,85,0)
(411,59,0)
(792,531,0)
(1396,661,0)
(479,1265,0)
(227,1046,0)
(500,129,0)
(479,919,0)
(420,486,0)
(520,327,0)
(113,355,0)
(262,67,0)
(771,1272,0)
(934,202,0)
(1256,728,0)
(709,378,0)
(845,903,0)
(1207,702,0)
(517,1390,0)
(1268,430,0)
(76,1245,0)
(1146,1027,0)
(500,547,0)
(1154,764,0)
(1088,1046,0)
(18,1046,0)
(1397,495,0)
(1249,794,0)
(1291,555,0)
(1268,406,0)
(1285,939,0)
(1224,447,0)
(1224,1149,0)
(1043,905,0)
(476,406,0)
(76,447,0)
(1329,515,0)
(516,728,0)
(727,734,0)
(947,728,0)
(531,660,0)
(449,344,0)
(1364,1210,0)
(1154,798,0)
(80,728,0)
(1294,83,0)
(1395,1046,0)
(902,1000,0)
(792,173,0)
(1243,794,0)
(1182,1239,0)
(782,646,0)
(500,1062,0)
(1043,104,0)
(1224,1248,0)
(1154,919,0)
(908,646,0)
(1103,660,0)
(965,184,0)
(893,411,0)
(532,990,0)
(89,772,0)
(321,1014,0)
(648,226,0)
(575,826,0)
(321,366,0)
(815,431,0)
(792,87,0)
(769,856,0)
(479,764,0)
(1054,1046,0)
(1063,1265,0)
(760,559,0)
(875,660,0)
(1273,406,0)
(99,447,0)
(76,953,0)
(99,1141,0)
(658,190,0)
(178,230,0)
(1137,129,0)
(1360,271,0)
(162,281,0)
(400,824,0)
(357,460,0)
(624,859,0)
(1365,179,0)
(154,728,0)
(64,1156,0)
(1190,1319,0)
(850,1375,0)
(321,624,0)
(1359,723,0)
(991,717,0)
(1025,1046,0)
(579,1390,0)
(1270,728,0)
(1154,875,0)
(370,1291,0)
(339,195,0)
(1161,590,0)
(71,412,0)
(89,1191,0)
(479,1323,0)
(1042,880,0)
(138,97,0)
(792,1374,0)
(544,113,0)
(1261,1324,0)
(1137,356,0)
(1137,672,0)
(485,406,0)
(668,437,0)
(624,1151,0)
(357,1272,0)
(1089,1046,0)
(777,1186,0)
(1233,573,0)
(1403,728,0)
(569,406,0)
(99,1138,0)
(265,728,0)
(624,197,0)
(1313,728,0)
(500,1248,0)
(773,726,0)
(792,1141,0)
(1341,254,0)
(99,728,0)
(1187,1141,0)
(500,447,0)
(178,1043,0)
(760,1141,0)
(397,1304,0)
(49,255,0)
(479,798,0)
(519,1114,0)
(569,747,0)
(1402,721,0)
(577,757,0)
(560,677,0)
(129,1000,0)
(476,1395,0)
(1224,1081,0)
(1137,759,0)
(170,362,0)
(343,66,0)
(1070,624,0)
(357,1076,0)
(479,387,0)
(357,1323,0)
(1154,1265,0)
(624,1273,0)
(1094,353,0)
(196,215,0)
(1248,754,0)
(608,194,0)
(76,40,0)
(1215,981,0)
(760,1103,0)
(9,725,0)
(983,344,0)
(273,295,0)
(195,897,0)
(1244,654,0)
(1159,1378,0)
(1240,1370,0)
(76,663,0)
(407,25,0)
(89,1323,0)
(654,1244,0)
(1224,919,0)
(89,1295,0)
(37,1344,0)
(87,406,0)
(54,129,0)
(512,1046,0)
(1165,1151,0)
(26,195,0)
(1325,347,0)
(1154,1264,0)
(536,1046,0)
(417,728,0)
(1214,640,0)
(508,1255,0)
(99,531,0)
(804,406,0)
(624,663,0)
(578,510,0)
(479,1103,0)
(594,680,0)
(935,406,0)
(736,1395,0)
(1154,1062,0)
(1124,1296,0)
(1066,672,0)
(1137,749,0)
(1068,480,0)
(1289,1033,0)
(645,942,0)
(760,749,0)
(357,798,0)
(1151,1279,0)
(290,1265,0)
(1373,817,0)
(72,446,0)
(609,1319,0)
(1133,1343,0)
(856,1275,0)
(109,981,0)
(177,700,0)
(224,746,0)
(792,1330,0)
(479,1117,0)
(1004,1394,0)
(905,1291,0)
(165,412,0)
(1150,370,0)
(739,61,0)
(89,919,0)
(624,222,0)
(760,728,0)
(1354,573,0)
(1245,688,0)
(564,495,0)
(1093,1286,0)
(1137,1151,0)
(1250,1046,0)
(1302,735,0)
(518,879,0)
(89,1107,0)
(787,369,0)
(1131,673,0)
(319,721,0)
(1236,1046,0)
(792,278,0)
(939,1030,0)
(89,663,0)
(1021,515,0)
(357,875,0)
(686,129,0)
(1101,216,0)
(232,1142,0)
(357,1107,0)
(357,759,0)
(162,507,0)
(264,519,0)
(500,663,0)
(76,1210,0)
(1315,210,0)
(740,630,0)
(455,222,0)
(842,818,0)
(3,181,0)
(469,1245,0)
(500,1076,0)
(367,728,0)
(792,447,0)
(964,161,0)
(427,430,0)
(636,406,0)
(530,1070,0)
(76,772,0)
(76,1138,0)
(1160,1318,0)
(840,400,0)
(1131,406,0)
(1081,688,0)
(1400,510,0)
(1309,897,0)
(1154,1081,0)
(150,849,0)
(10,1046,0)
(535,380,0)
(1154,222,0)
(1344,856,0)
(762,1244,0)
(1254,406,0)
(670,721,0)
(735,1021,0)
(1209,247,0)
(59,411,0)
(792,621,0)
(906,897,0)
(99,356,0)
(1305,856,0)
(654,536,0)
(1269,825,0)
(500,728,0)
(1334,1065,0)
(1090,252,0)
(1299,342,0)
(1065,1046,0)
(1355,1239,0)
(1309,406,0)
(1289,800,0)
(305,804,0)
(1224,1210,0)
(1176,1149,0)
(1044,688,0)
(1347,636,0)
(477,1171,0)
(76,902,0)
(792,40,0)
(1062,688,0)
(804,1205,0)
(1137,1107,0)
(99,197,0)
(80,829,0)
(67,283,0)
(282,354,0)
(1341,1129,0)
(579,96,0)
(1362,467,0)
(832,406,0)
(479,556,0)
(964,736,0)
(955,303,0)
(140,283,0)
(1137,1245,0)
(89,1094,0)
(504,122,0)
(202,695,0)
(697,1371,0)
(795,165,0)
(231,510,0)
(760,40,0)
(1016,1046,0)
(278,406,0)
(133,406,0)
(855,919,0)
(1003,1064,0)
(160,257,0)
(670,223,0)
(357,1210,0)
(760,1330,0)
(1194,902,0)
(1073,1062,0)
(1154,859,0)
(443,154,0)
(748,1279,0)
(357,559,0)
(1217,728,0)
(102,697,0)
(500,222,0)
(127,542,0)
(664,793,0)
(1173,1283,0)
(1137,1141,0)
(437,385,0)
(826,1301,0)
(1172,798,0)
(924,317,0)
(479,1248,0)
(202,406,0)
(1116,324,0)
(792,663,0)
(269,1046,0)
(615,326,0)
(380,954,0)
(409,1046,0)
(1252,1079,0)
(1154,1210,0)
(385,19,0)
(989,542,0)
(891,111,0)
(899,660,0)
(614,1156,0)
(479,547,0)
(1154,556,0)
(382,897,0)
(549,862,0)
(862,964,0)
(1100,343,0)
(1343,899,0)
(916,1103,0)
(1164,1366,0)
(792,244,0)
(693,796,0)
(313,1371,0)
(799,573,0)
(774,1046,0)
(140,604,0)
(1154,87,0)
(482,764,0)
(569,814,0)
(1315,406,0)
(99,772,0)
(919,660,0)
(1154,1273,0)
(1293,798,0)
(1159,643,0)
(197,1224,0)
(357,278,0)
(133,377,0)
(885,905,0)
(772,1385,0)
(1224,663,0)
(1305,704,0)
(547,406,0)
(946,239,0)
(624,1076,0)
(722,494,0)
(92,415,0)
(357,1273,0)
(865,1280,0)
(1300,1286,0)
(509,969,0)
(1277,1254,0)
(672,430,0)
(113,1255,0)
(786,1136,0)
(624,648,0)
(99,547,0)
(500,1058,0)
(739,701,0)
(188,1044,0)
(1233,790,0)
(1057,1134,0)
(692,728,0)
(765,173,0)
(76,759,0)
(610,1361,0)
(357,919,0)
(1000,1037,0)
(343,1077,0)
(1208,446,0)
(538,879,0)
(114,721,0)
(140,721,0)
(1381,1067,0)
(672,406,0)
(695,1182,0)
(24,906,0)
(415,754,0)
(792,1210,0)
(1047,546,0)
(753,1266,0)
(315,1316,0)
(421,728,0)
(1393,1016,0)
(99,382,0)
(214,721,0)
(748,80,0)
(830,706,0)
(886,728,0)
(790,721,0)
(44,1228,0)
(294,1324,0)
(36,696,0)
(1394,1004,0)
(862,666,0)
(824,1142,0)
(1132,670,0)
(500,387,0)
(654,660,0)
(860,195,0)
(957,754,0)
(184,1145,0)
(347,1325,0)
(537,1114,0)
(89,382,0)
(406,634,0)
(405,327,0)
(760,648,0)
(357,382,0)
(1154,1117,0)
(960,1245,0)
(1199,1299,0)
(1095,1046,0)
(843,1261,0)
(708,880,0)
(287,1359,0)
(576,881,0)
(260,728,0)
(357,1081,0)
(76,222,0)
(632,1093,0)
(193,1079,0)
(1401,156,0)
(742,839,0)
(277,608,0)
(1362,885,0)
(158,1114,0)
(658,292,0)
(159,406,0)
(1015,539,0)
(624,244,0)
(246,287,0)
(597,1305,0)
(792,1151,0)
(1147,354,0)
(32,1046,0)
(479,531,0)
(479,1245,0)
(510,1046,0)
(332,321,0)
(479,222,0)
(792,922,0)
(1205,543,0)
(1362,215,0)
(883,301,0)
(431,1279,0)
(561,244,0)
(903,1220,0)
(611,1016,0)
(503,1046,0)
(1021,1021,0)
(500,1191,0)
(1223,1175,0)
(357,356,0)
(792,796,0)
(137,92,0)
(47,956,0)
(550,539,0)
(1224,728,0)
(1401,162,0)
(360,982,0)
(251,1121,0)
(822,263,0)
(1093,660,0)
(159,1191,0)
(376,461,0)
(1324,1261,0)
(99,1151,0)
(1136,1101,0)
(89,648,0)
(854,666,0)
(769,554,0)
(1255,212,0)
(1254,1137,0)
(168,728,0)
(870,905,0)
(135,859,0)
(1154,728,0)
(1074,956,0)
(317,924,0)
(736,964,0)
(99,387,0)
(131,1266,0)
(1007,663,0)
(59,1173,0)
(476,557,0)
(792,734,0)
(1040,1046,0)
(1337,1183,0)
(738,1330,0)
(677,726,0)
(401,728,0)
(500,672,0)
(1137,1149,0)
(99,798,0)
(745,854,0)
(424,1279,0)
(5,406,0)
(1263,60,0)
(1137,1070,0)
(317,610,0)
(942,1046,0)
(1224,556,0)
(441,263,0)
(89,244,0)
(70,1030,0)
(1357,390,0)
(1298,476,0)
(90,728,0)
(1371,1220,0)
(256,1335,0)
(636,1347,0)
(23,101,0)
(254,725,0)
(794,721,0)
(814,982,0)
(854,1042,0)
(344,1088,0)
(1028,728,0)
(758,473,0)
(155,728,0)
(1253,799,0)
(548,406,0)
(1391,1046,0)
(832,551,0)
(347,422,0)
(814,569,0)
(930,382,0)
(1224,953,0)
(806,728,0)
(760,387,0)
(500,875,0)
(760,1265,0)
(473,206,0)
(700,951,0)
(796,231,0)
(1075,538,0)
(1064,534,0)
(811,1038,0)
(1154,1245,0)
(1188,854,0)
(1113,1075,0)
(431,1014,0)
(651,1192,0)
(357,173,0)
(326,1341,0)
(1371,1137,0)
(698,102,0)
(463,871,0)
(871,660,0)
(624,981,0)
(1137,1062,0)
(926,648,0)
(982,929,0)
(1284,1068,0)
(783,415,0)
(76,1117,0)
(839,660,0)
(792,356,0)
(1106,88,0)
(881,628,0)
(206,473,0)
(792,981,0)
(818,872,0)
(199,228,0)
(348,588,0)
(99,787,0)
(1154,387,0)
(223,703,0)
(864,712,0)
(894,25,0)
(1231,347,0)
(99,759,0)
(119,760,0)
(1137,919,0)
(969,509,0)
(500,953,0)
(570,557,0)
(99,324,0)
(1154,749,0)
(984,1125,0)
(760,1117,0)
(624,1081,0)
(207,1331,0)
(624,953,0)
(1230,792,0)
(237,453,0)
(431,80,0)
(1021,296,0)
(1308,1300,0)
(107,897,0)
(792,1245,0)
(1137,1094,0)
(624,772,0)
(99,859,0)
(913,609,0)
(31,430,0)
(569,588,0)
(602,1244,0)
(861,728,0)
(568,319,0)
(666,534,0)
(674,1309,0)
(204,67,0)
(403,206,0)
(359,536,0)
(310,1046,0)
(36,394,0)
(777,1108,0)
(675,841,0)
(1137,1295,0)
(792,953,0)
(760,382,0)
(396,612,0)
(609,721,0)
(760,1248,0)
(802,835,0)
(1154,559,0)
(760,324,0)
(357,387,0)
(200,910,0)
(659,728,0)
(624,447,0)
(792,764,0)
(1154,903,0)
(1154,40,0)
(165,795,0)
(126,1070,0)
(1039,1183,0)
(1097,954,0)
(122,1168,0)
(357,348,0)
(216,754,0)
(311,154,0)
(988,248,0)
(1387,1052,0)
(698,551,0)
(760,222,0)
(212,1255,0)
(760,981,0)
(1213,12,0)
(366,1123,0)
(648,985,0)
(1246,1253,0)
(639,384,0)
(67,1354,0)
(1268,840,0)
(248,726,0)
(1154,1103,0)
(1224,197,0)
(1342,1319,0)
(89,40,0)
(368,269,0)
(500,798,0)
(205,443,0)
(1264,666,0)
(458,690,0)
(357,447,0)
(357,764,0)
(1137,663,0)
(795,1046,0)
(431,58,0)
(457,1062,0)
(89,531,0)
(723,1359,0)
(591,18,0)
(951,389,0)
(76,531,0)
(467,1362,0)
(1169,1273,0)
(1091,269,0)
(470,44,0)
(1138,406,0)
(1151,406,0)
(762,77,0)
(723,721,0)
(76,1107,0)
(479,1058,0)
(108,1279,0)
(1154,787,0)
(797,103,0)
(108,80,0)
(809,725,0)
(840,881,0)
(464,1046,0)
(1359,1129,0)
(333,1072,0)
(78,956,0)
(357,922,0)
(623,397,0)
(706,573,0)
(443,1309,0)
(736,406,0)
(1062,76,0)
(1377,1199,0)
(357,935,0)
(1137,1330,0)
(1366,970,0)
(713,212,0)
(760,1191,0)
(925,1183,0)
(962,666,0)
(1323,604,0)
(173,406,0)
(308,878,0)
(496,961,0)
(76,798,0)
(228,728,0)
(939,688,0)
(341,875,0)
(1048,220,0)
(91,555,0)
(64,406,0)
(1087,1046,0)
(760,1081,0)
(912,842,0)
(1137,244,0)
(730,1184,0)
(345,551,0)
(540,1248,0)
(255,461,0)
(1358,987,0)
(99,902,0)
(25,660,0)
(764,688,0)
(76,1094,0)
(617,406,0)
(924,1337,0)
(760,531,0)
(254,1341,0)
(268,728,0)
(1253,721,0)
(144,1046,0)
(1069,1000,0)
(16,1402,0)
(979,1168,0)
(922,660,0)
(1079,1252,0)
(792,348,0)
(829,257,0)
(720,924,0)
(1107,89,0)
(1224,1107,0)
(60,990,0)
(53,382,0)
(792,859,0)
(99,1245,0)
(666,728,0)
(958,295,0)
(1154,1191,0)
(498,517,0)
(357,129,0)
(538,647,0)
(1385,1046,0)
(479,1138,0)
(108,406,0)
(1129,1341,0)
(1154,953,0)
(624,1117,0)
(89,672,0)
(814,450,0)
(1154,324,0)
(164,1171,0)
(870,660,0)
(1131,58,0)
(258,728,0)
(1131,701,0)
(964,862,0)
(792,327,0)
(1171,406,0)
(982,58,0)
(555,1300,0)
(792,547,0)
(87,1239,0)
(1045,704,0)
(491,59,0)
(1137,184,0)
(1078,825,0)
(381,58,0)
(1027,1146,0)
(468,728,0)
(389,951,0)
(45,800,0)
(404,190,0)
(99,672,0)
(1015,399,0)
(1008,922,0)
(744,18,0)
(929,728,0)
(890,660,0)
(880,406,0)
(792,559,0)
(431,406,0)
(89,728,0)
(1224,1265,0)
(485,58,0)
(61,748,0)
(673,1131,0)
(789,319,0)
(234,227,0)
(500,902,0)
(479,356,0)
(558,1138,0)
(1222,621,0)
(369,573,0)
(57,509,0)
(1279,1046,0)
(794,326,0)
(1037,700,0)
(104,1046,0)
(1142,628,0)
(968,659,0)
(1154,356,0)
(880,1220,0)
(12,1219,0)
(1137,648,0)
(1162,281,0)
(216,1101,0)
(822,1365,0)
(202,929,0)
(946,299,0)
(362,988,0)
(1275,445,0)
(500,1323,0)
(1137,387,0)
(326,794,0)
(357,672,0)
(792,772,0)
(452,1107,0)
(1109,1323,0)
(976,210,0)
(364,728,0)
(903,406,0)
(128,1077,0)
(977,832,0)
(621,905,0)
(1275,856,0)
(1224,749,0)
(1158,690,0)
(653,790,0)
(399,1015,0)
(1234,1220,0)
(760,1295,0)
(428,728,0)
(554,728,0)
(698,1205,0)
(1224,759,0)
(1173,59,0)
(624,1295,0)
(946,1277,0)
(1292,728,0)
(127,681,0)
(792,387,0)
(76,1151,0)
(440,908,0)
(363,728,0)
(624,1138,0)
(500,1151,0)
(767,510,0)
(357,1141,0)
(500,1264,0)
(247,1046,0)
(759,688,0)
(931,613,0)
(456,479,0)
(493,587,0)
(384,489,0)
(1341,326,0)
(1361,610,0)
(1327,348,0)
(500,919,0)
(978,5,0)
(615,1319,0)
(1241,29,0)
(450,733,0)
(280,977,0)
(534,1064,0)
(574,1046,0)
(736,557,0)
(622,954,0)
(480,1068,0)
(1154,1107,0)
(832,977,0)
(992,902,0)
(152,909,0)
(792,1074,0)
(1347,292,0)
(840,1268,0)
(985,728,0)
(999,1283,0)
(380,620,0)
(151,997,0)
(1392,372,0)
(624,296,0)
(99,1273,0)
(879,538,0)
(688,1219,0)
(239,946,0)
(99,1081,0)
(58,923,0)
(744,406,0)
(101,1046,0)
(107,539,0)
(944,443,0)
(859,355,0)
(494,1189,0)
(882,108,0)
(344,666,0)
(929,116,0)
(1224,859,0)
(122,97,0)
(760,244,0)
(596,728,0)
(1224,1245,0)
(854,406,0)
(184,60,0)
(646,908,0)
(1179,489,0)
(1224,129,0)
(760,672,0)
(922,420,0)
(801,1046,0)
(587,165,0)
(89,1058,0)
(26,780,0)
(429,944,0)
(868,630,0)
(235,150,0)
(890,1209,0)
(76,129,0)
(1340,507,0)
(613,656,0)
(149,985,0)
(1252,591,0)
(587,1054,0)
(1146,617,0)
(760,1076,0)
(642,749,0)
(259,64,0)
(218,610,0)
(89,1264,0)
(453,696,0)
(1192,254,0)
(1140,673,0)
(1224,903,0)
(1248,406,0)
(1137,1145,0)
(1224,1264,0)
(322,1264,0)
(1154,1138,0)
(190,658,0)
(357,244,0)
(1291,370,0)
(375,617,0)
(760,547,0)
(148,342,0)
(1154,672,0)
(1343,406,0)
(590,747,0)
(481,453,0)
(408,1400,0)
(36,1114,0)
(803,748,0)
(76,559,0)
(85,1146,0)
(833,127,0)
(729,1046,0)
(1400,778,0)
(323,1046,0)
(41,1046,0)
(1398,1065,0)
(357,1070,0)
(1388,186,0)
(1079,1123,0)
(345,1072,0)
(230,178,0)
(868,1346,0)
(292,658,0)
(500,1330,0)
(266,996,0)
(892,314,0)
(89,129,0)
(963,1145,0)
(1272,628,0)
(352,1141,0)
(1038,141,0)
(792,875,0)
(425,345,0)
(661,1122,0)
(753,1225,0)
(14,1325,0)
(388,728,0)
(792,935,0)
(805,206,0)
(99,1094,0)
(779,1322,0)
(859,660,0)
(612,660,0)
(357,871,0)
(1018,1125,0)
(1137,87,0)
(33,1264,0)
(1334,588,0)
(996,1046,0)
(118,921,0)
(933,531,0)
(7,906,0)
(99,1149,0)
(854,1088,0)
(944,656,0)
(799,1253,0)
(427,793,0)
(778,728,0)
(202,701,0)
(682,156,0)
(500,1094,0)
(1037,406,0)
(34,353,0)
(680,283,0)
(753,83,0)
(770,159,0)
(1077,343,0)
(1154,902,0)
(1395,1101,0)
(804,1072,0)
(19,249,0)
(545,640,0)
(1237,1195,0)
(863,1110,0)
(1224,1076,0)
(263,856,0)
(299,450,0)
(897,1046,0)
(1340,446,0)
(153,635,0)
(895,473,0)
(624,1062,0)
(1316,1134,0)
(557,1046,0)
(489,701,0)
(1301,630,0)
(381,929,0)
(1027,856,0)
(877,778,0)
(953,688,0)
(629,48,0)
(500,749,0)
(437,956,0)
(1224,672,0)
(1247,1046,0)
(89,87,0)
(652,1037,0)
(1141,179,0)
(792,222,0)
(500,1103,0)
(1323,1000,0)
(1071,688,0)
(638,140,0)
(1154,648,0)
(213,76,0)
(89,1265,0)
(760,903,0)
(347,985,0)
(817,688,0)
(139,291,0)
(879,518,0)
(1142,406,0)
(1183,1337,0)
(813,475,0)
(797,274,0)
(447,970,0)
(967,728,0)
(95,215,0)
(1224,1295,0)
(1111,278,0)
(975,1094,0)
(479,447,0)
(272,489,0)
(766,728,0)
(1277,946,0)
(295,406,0)
(362,847,0)
(472,1134,0)
(696,103,0)
(760,1273,0)
(189,324,0)
(872,818,0)
(89,556,0)
(223,1316,0)
(624,1141,0)
(1225,856,0)
(1051,1046,0)
(1225,753,0)
(844,1384,0)
(76,875,0)
(105,217,0)
(1129,1359,0)
(615,721,0)
(1224,1141,0)
(775,133,0)
(279,97,0)
(1154,1094,0)
(1054,161,0)
(1125,984,0)
(1356,897,0)
(1130,728,0)
(244,1000,0)
(624,798,0)
(586,1044,0)
(890,355,0)
(1244,762,0)
(523,1297,0)
(780,26,0)
(210,1315,0)
(813,1184,0)
(1105,1058,0)
(275,903,0)
(684,728,0)
(1154,382,0)
(357,1264,0)
(591,1334,0)
(89,1330,0)
(102,698,0)
(132,1046,0)
(450,814,0)
(357,1138,0)
(697,299,0)
(1316,315,0)
(707,1088,0)
(76,387,0)
(83,753,0)
(500,1273,0)
(185,790,0)
(768,1321,0)
(263,822,0)
(1123,1046,0)
(357,772,0)
(621,660,0)
(890,536,0)
(559,557,0)
(1137,531,0)
(997,215,0)
(422,347,0)
(436,315,0)
(243,854,0)
(631,880,0)
(711,415,0)
(792,1191,0)
(427,406,0)
(748,406,0)
(76,1103,0)
(462,1352,0)
(412,406,0)
(818,842,0)
(236,632,0)
(418,1046,0)
(285,287,0)
(99,875,0)
(326,615,0)
(110,338,1)
(1132,1316,1)
(558,330,1)
(632,236,1)
(568,789,1)
(89,1265,1)
(954,622,1)
(1021,1021,1)
(863,108,1)
(76,772,1)
(89,1264,1)
(760,119,1)
(1107,452,1)
(312,890,1)
(862,549,1)
(676,303,1)
(1401,228,1)
(8,636,1)
(137,415,1)
(1043,660,1)
(216,1137,1)
(792,295,1)
(727,55,1)
(1137,672,1)
(344,1042,1)
(1193,1005,1)
(922,660,1)
(290,1088,1)
(760,859,1)
(1043,104,1)
(89,556,1)
(1183,925,1)
(166,588,1)
(677,560,1)
(1261,1324,1)
(699,856,1)
(969,383,1)
(557,570,1)
(760,1094,1)
(162,121,1)
(613,897,1)
(495,564,1)
(857,327,1)
(1078,706,1)
(415,1220,1)
(479,324,1)
(760,1273,1)
(648,226,1)
(99,902,1)
(174,532,1)
(99,903,1)
(266,302,1)
(842,912,1)
(792,565,1)
(500,1210,1)
(698,406,1)
(570,559,1)
(489,701,1)
(748,406,1)
(35,658,1)
(962,406,1)
(1103,660,1)
(495,406,1)
(624,1210,1)
(76,798,1)
(425,827,1)
(1224,648,1)
(760,648,1)
(310,1259,1)
(89,772,1)
(26,195,1)
(1191,15,1)
(862,1088,1)
(212,1255,1)
(489,929,1)
(1224,556,1)
(107,298,1)
(1352,816,1)
(1348,313,1)
(1319,1190,1)
(968,1344,1)
(1235,1203,1)
(1137,900,1)
(587,1054,1)
(1167,557,1)
(453,1114,1)
(628,944,1)
(64,897,1)
(998,1044,1)
(1225,856,1)
(68,717,1)
(1238,296,1)
(1321,362,1)
(760,1138,1)
(106,1398,1)
(1359,723,1)
(663,20,1)
(828,717,1)
(76,556,1)
(490,1312,1)
(411,893,1)
(257,160,1)
(760,1323,1)
(739,929,1)
(1154,903,1)
(1344,856,1)
(670,1132,1)
(1137,764,1)
(18,591,1)
(510,578,1)
(131,1225,1)
(1094,975,1)
(856,1275,1)
(76,1081,1)
(1002,1098,1)
(384,639,1)
(1350,294,1)
(792,1264,1)
(624,981,1)
(930,430,1)
(772,1204,1)
(796,693,1)
(110,406,1)
(733,1279,1)
(1362,215,1)
(1268,430,1)
(400,840,1)
(438,1272,1)
(243,476,1)
(1194,992,1)
(792,759,1)
(1209,312,1)
(1341,326,1)
(872,818,1)
(476,1395,1)
(880,1137,1)
(89,1141,1)
(1027,856,1)
(882,1296,1)
(105,692,1)
(982,406,1)
(479,764,1)
(814,982,1)
(1202,154,1)
(1137,1265,1)
(792,796,1)
(363,76,1)
(1300,1286,1)
(1338,1239,1)
(668,938,1)
(11,654,1)
(736,557,1)
(357,772,1)
(709,634,1)
(1224,1107,1)
(901,105,1)
(1289,1033,1)
(288,962,1)
(540,1174,1)
(624,1081,1)
(149,1235,1)
(162,446,1)
(802,1385,1)
(428,929,1)
(484,882,1)
(1244,602,1)
(121,507,1)
(720,1337,1)
(1150,555,1)
(792,1076,1)
(99,759,1)
(1224,222,1)
(859,1389,1)
(252,660,1)
(64,628,1)
(473,1042,1)
(658,292,1)
(612,905,1)
(139,1330,1)
(1326,625,1)
(1277,1254,1)
(76,559,1)
(842,856,1)
(908,646,1)
(42,1278,1)
(357,796,1)
(345,1072,1)
(639,489,1)
(753,1266,1)
(1265,406,1)
(1006,230,1)
(91,1300,1)
(415,406,1)
(760,244,1)
(1071,104,1)
(1103,1211,1)
(624,1151,1)
(1366,970,1)
(847,362,1)
(500,40,1)
(1184,856,1)
(97,138,1)
(547,406,1)
(983,449,1)
(113,1255,1)
(624,1149,1)
(1312,422,1)
(1177,945,1)
(1182,406,1)
(1257,465,1)
(1149,660,1)
(832,406,1)
(1280,865,1)
(610,1361,1)
(1079,1239,1)
(108,80,1)
(1324,406,1)
(840,881,1)
(59,411,1)
(792,447,1)
(643,1159,1)
(927,969,1)
(357,798,1)
(517,571,1)
(99,244,1)
(1116,291,1)
(760,672,1)
(322,717,1)
(467,151,1)
(166,406,1)
(1356,406,1)
(646,5,1)
(502,343,1)
(1113,538,1)
(1026,220,1)
(696,103,1)
(1059,1347,1)
(202,929,1)
(194,956,1)
(854,1042,1)
(277,593,1)
(143,447,1)
(47,513,1)
(450,814,1)
(296,492,1)
(1154,1151,1)
(146,1015,1)
(624,447,1)
(880,406,1)
(597,1045,1)
(919,98,1)
(295,406,1)
(921,118,1)
(357,902,1)
(112,1156,1)
(834,482,1)
(905,1291,1)
(76,764,1)
(651,725,1)
(792,1372,1)
(1317,215,1)
(1307,800,1)
(1224,749,1)
(1154,1058,1)
(760,87,1)
(1210,688,1)
(760,382,1)
(1392,601,1)
(943,1331,1)
(566,1326,1)
(760,222,1)
(760,324,1)
(111,891,1)
(235,908,1)
(1161,590,1)
(704,1305,1)
(1211,916,1)
(114,756,1)
(591,1334,1)
(480,1068,1)
(1283,1173,1)
(318,717,1)
(269,657,1)
(821,391,1)
(738,261,1)
(94,623,1)
(1137,1094,1)
(1281,519,1)
(1347,8,1)
(1164,1310,1)
(76,672,1)
(792,871,1)
(513,905,1)
(1224,859,1)
(385,437,1)
(1108,567,1)
(1081,471,1)
(1137,749,1)
(216,754,1)
(1304,397,1)
(1154,772,1)
(76,903,1)
(357,222,1)
(946,1277,1)
(1401,1346,1)
(479,1058,1)
(1367,1201,1)
(1216,120,1)
(1042,880,1)
(345,406,1)
(76,1330,1)
(670,721,1)
(935,406,1)
(443,205,1)
(357,1138,1)
(99,787,1)
(763,739,1)
(860,339,1)
(1047,177,1)
(1326,1026,1)
(89,129,1)
(241,965,1)
(911,173,1)
(341,1112,1)
(406,600,1)
(1255,1283,1)
(1062,457,1)
(151,997,1)
(1326,376,1)
(1383,384,1)
(870,1082,1)
(99,324,1)
(108,406,1)
(838,548,1)
(624,1107,1)
(734,303,1)
(982,929,1)
(792,787,1)
(205,1309,1)
(1137,1138,1)
(408,146,1)
(980,198,1)
(342,148,1)
(48,303,1)
(700,951,1)
(99,531,1)
(1372,406,1)
(777,1108,1)
(761,717,1)
(520,405,1)
(1137,663,1)
(569,950,1)
(1171,551,1)
(459,201,1)
(760,1076,1)
(141,856,1)
(1277,344,1)
(826,721,1)
(1374,406,1)
(105,1202,1)
(1401,358,1)
(161,964,1)
(89,1273,1)
(79,1319,1)
(981,688,1)
(739,701,1)
(769,38,1)
(564,1397,1)
(291,139,1)
(442,1055,1)
(127,856,1)
(1045,1146,1)
(462,552,1)
(552,937,1)
(1245,688,1)
(609,187,1)
(1154,1200,1)
(496,1229,1)
(1326,180,1)
(1340,868,1)
(1291,370,1)
(1097,101,1)
(165,587,1)
(396,194,1)
(76,1107,1)
(105,468,1)
(357,1094,1)
(600,1034,1)
(1290,406,1)
(259,1227,1)
(423,455,1)
(1235,856,1)
(956,78,1)
(1037,700,1)
(99,559,1)
(783,711,1)
(482,717,1)
(345,425,1)
(381,58,1)
(792,222,1)
(89,1117,1)
(375,1027,1)
(76,981,1)
(70,953,1)
(500,663,1)
(89,798,1)
(240,1385,1)
(76,759,1)
(1212,1079,1)
(736,667,1)
(1198,384,1)
(509,406,1)
(624,1323,1)
(140,283,1)
(779,1006,1)
(978,1258,1)
(839,660,1)
(99,981,1)
(327,688,1)
(244,62,1)
(846,1220,1)
(1137,382,1)
(962,666,1)
(357,749,1)
(46,360,1)
(1154,547,1)
(1126,796,1)
(368,915,1)
(1366,660,1)
(1282,1142,1)
(479,531,1)
(1137,787,1)
(667,1143,1)
(1373,1367,1)
(64,1056,1)
(479,197,1)
(1076,688,1)
(1166,222,1)
(79,111,1)
(126,735,1)
(1284,1053,1)
(1137,559,1)
(1246,1287,1)
(5,238,1)
(624,40,1)
(340,150,1)
(1349,1107,1)
(195,897,1)
(479,787,1)
(868,630,1)
(500,531,1)
(213,1062,1)
(755,647,1)
(647,253,1)
(203,342,1)
(107,406,1)
(89,547,1)
(550,107,1)
(843,1324,1)
(759,1049,1)
(635,153,1)
(479,559,1)
(694,742,1)
(25,1286,1)
(1364,688,1)
(232,422,1)
(1390,517,1)
(760,764,1)
(654,355,1)
(103,797,1)
(792,922,1)
(727,688,1)
(412,406,1)
(1154,1103,1)
(890,536,1)
(357,1062,1)
(1260,276,1)
(197,688,1)
(116,699,1)
(1362,885,1)
(792,935,1)
(76,648,1)
(955,247,1)
(1396,940,1)
(760,1103,1)
(532,1145,1)
(1334,588,1)
(1154,1149,1)
(961,1385,1)
(76,1245,1)
(427,406,1)
(976,1315,1)
(547,28,1)
(489,1179,1)
(347,985,1)
(1318,954,1)
(218,1361,1)
(185,387,1)
(134,1340,1)
(500,1151,1)
(443,154,1)
(825,1000,1)
(1174,1279,1)
(684,179,1)
(352,1187,1)
(1201,303,1)
(833,1061,1)
(99,1117,1)
(792,1151,1)
(214,721,1)
(666,534,1)
(195,406,1)
(34,828,1)
(88,856,1)
(1385,114,1)
(1332,1096,1)
(99,1323,1)
(1266,131,1)
(1371,1348,1)
(1137,759,1)
(792,1141,1)
(1131,58,1)
(604,140,1)
(275,717,1)
(500,356,1)
(245,993,1)
(767,634,1)
(563,669,1)
(1285,676,1)
(287,721,1)
(445,82,1)
(690,269,1)
(99,953,1)
(877,717,1)
(711,624,1)
(321,904,1)
(760,129,1)
(1354,67,1)
(178,499,1)
(157,609,1)
(243,854,1)
(522,197,1)
(1224,1265,1)
(1224,1103,1)
(1308,1369,1)
(1152,127,1)
(169,1304,1)
(229,1041,1)
(569,747,1)
(1058,1105,1)
(1325,406,1)
(845,275,1)
(962,442,1)
(118,562,1)
(89,222,1)
(922,1008,1)
(357,875,1)
(946,299,1)
(321,624,1)
(1397,617,1)
(24,7,1)
(713,1255,1)
(760,798,1)
(500,1103,1)
(422,347,1)
(595,908,1)
(452,514,1)
(792,875,1)
(1139,169,1)
(419,970,1)
(1224,1248,1)
(1011,254,1)
(107,628,1)
(862,406,1)
(508,717,1)
(832,665,1)
(792,485,1)
(792,764,1)
(424,1151,1)
(203,1322,1)
(238,978,1)
(1249,1243,1)
(1055,450,1)
(792,1149,1)
(1342,281,1)
(577,1067,1)
(697,1371,1)
(226,27,1)
(1092,1183,1)
(730,877,1)
(216,917,1)
(762,1244,1)
(1129,1359,1)
(1137,1141,1)
(778,475,1)
(89,40,1)
(239,946,1)
(479,1191,1)
(89,1062,1)
(12,1251,1)
(99,1058,1)
(662,374,1)
(500,129,1)
(1137,1070,1)
(890,660,1)
(853,365,1)
(944,429,1)
(788,717,1)
(822,263,1)
(273,1054,1)
(434,395,1)
(1154,1062,1)
(99,1081,1)
(1147,282,1)
(952,754,1)
(99,1245,1)
(99,1248,1)
(1154,1265,1)
(1344,37,1)
(231,510,1)
(1022,576,1)
(567,582,1)
(308,735,1)
(1101,1136,1)
(360,1277,1)
(319,721,1)
(601,856,1)
(1259,40,1)
(880,754,1)
(324,688,1)
(1137,1107,1)
(83,1294,1)
(1154,387,1)
(197,719,1)
(1224,356,1)
(802,887,1)
(1224,324,1)
(129,686,1)
(364,355,1)
(678,717,1)
(398,382,1)
(653,185,1)
(178,342,1)
(1343,884,1)
(105,432,1)
(402,933,1)
(71,737,1)
(76,324,1)
(344,1088,1)
(99,1103,1)
(140,638,1)
(832,1072,1)
(479,547,1)
(361,717,1)
(76,663,1)
(479,1265,1)
(357,387,1)
(231,778,1)
(391,1252,1)
(1268,386,1)
(1154,1210,1)
(1062,688,1)
(99,1265,1)
(760,953,1)
(1154,672,1)
(387,13,1)
(792,1323,1)
(792,1138,1)
(278,1111,1)
(735,296,1)
(917,585,1)
(609,1319,1)
(25,970,1)
(679,969,1)
(967,643,1)
(283,980,1)
(67,721,1)
(648,926,1)
(835,802,1)
(1052,1080,1)
(579,96,1)
(502,753,1)
(1248,540,1)
(87,1242,1)
(556,406,1)
(736,1395,1)
(262,129,1)
(718,717,1)
(1137,1248,1)
(659,968,1)
(725,809,1)
(1074,956,1)
(57,1198,1)
(914,1123,1)
(204,262,1)
(479,1103,1)
(357,1245,1)
(339,230,1)
(476,1298,1)
(141,807,1)
(479,456,1)
(211,112,1)
(624,1265,1)
(1173,59,1)
(1064,856,1)
(868,1346,1)
(1224,40,1)
(1146,1027,1)
(652,986,1)
(867,436,1)
(1224,1273,1)
(124,501,1)
(370,1150,1)
(105,260,1)
(1076,335,1)
(500,902,1)
(981,1215,1)
(1224,1081,1)
(698,974,1)
(1005,1386,1)
(940,26,1)
(105,836,1)
(619,613,1)
(479,1094,1)
(1326,943,1)
(1272,771,1)
(703,223,1)
(735,1021,1)
(1224,1141,1)
(357,1330,1)
(122,504,1)
(792,87,1)
(701,920,1)
(13,853,1)
(252,1333,1)
(498,319,1)
(622,1097,1)
(548,269,1)
(87,406,1)
(624,382,1)
(883,566,1)
(1137,324,1)
(479,759,1)
(495,897,1)
(1224,1191,1)
(230,178,1)
(1335,25,1)
(1111,583,1)
(941,717,1)
(624,1138,1)
(1334,406,1)
(1004,167,1)
(252,1286,1)
(792,1094,1)
(1291,555,1)
(804,305,1)
(1137,859,1)
(105,596,1)
(1093,1286,1)
(105,363,1)
(1,217,1)
(1254,1137,1)
(366,314,1)
(105,812,1)
(350,212,1)
(315,867,1)
(581,755,1)
(76,787,1)
(792,648,1)
(431,1014,1)
(1079,1123,1)
(1398,747,1)
(931,438,1)
(1110,108,1)
(792,839,1)
(99,1191,1)
(1154,1141,1)
(596,967,1)
(792,324,1)
(792,1058,1)
(74,1094,1)
(990,174,1)
(333,1138,1)
(184,1145,1)
(1252,381,1)
(906,897,1)
(698,551,1)
(474,1005,1)
(657,1091,1)
(479,1081,1)
(792,734,1)
(200,921,1)
(89,663,1)
(586,188,1)
(809,9,1)
(357,859,1)
(1254,1399,1)
(357,556,1)
(315,721,1)
(479,902,1)
(410,1016,1)
(321,1014,1)
(551,1002,1)
(588,695,1)
(76,1149,1)
(99,1149,1)
(698,1072,1)
(105,1274,1)
(792,1103,1)
(99,87,1)
(739,406,1)
(889,248,1)
(304,1052,1)
(920,1058,1)
(939,731,1)
(1165,1232,1)
(594,1000,1)
(285,1068,1)
(1209,896,1)
(349,680,1)
(1015,539,1)
(51,1021,1)
(500,447,1)
(739,58,1)
(23,542,1)
(792,744,1)
(1326,1388,1)
(447,1029,1)
(569,588,1)
(279,35,1)
(1371,406,1)
(479,875,1)
(89,1107,1)
(916,847,1)
(365,1102,1)
(292,1059,1)
(624,1141,1)
(1224,1117,1)
(147,605,1)
(202,701,1)
(462,990,1)
(695,1182,1)
(400,824,1)
(61,748,1)
(88,1106,1)
(1098,414,1)
(633,145,1)
(1224,1245,1)
(99,764,1)
(898,1146,1)
(887,1206,1)
(817,688,1)
(832,1205,1)
(1224,244,1)
(672,1066,1)
(500,1330,1)
(782,5,1)
(1176,419,1)
(792,1273,1)
(500,1323,1)
(89,981,1)
(158,537,1)
(1273,406,1)
(775,1281,1)
(1371,1220,1)
(1102,663,1)
(1398,406,1)
(1258,866,1)
(988,889,1)
(99,648,1)
(123,287,1)
(76,859,1)
(89,787,1)
(1154,356,1)
(624,903,1)
(1381,1006,1)
(1251,1213,1)
(189,1116,1)
(384,489,1)
(1293,1019,1)
(1321,768,1)
(624,764,1)
(377,142,1)
(944,443,1)
(1144,324,1)
(712,1000,1)
(896,890,1)
(830,902,1)
(988,248,1)
(72,480,1)
(102,962,1)
(933,660,1)
(1154,382,1)
(198,177,1)
(1356,1084,1)
(1223,467,1)
(263,856,1)
(1066,349,1)
(89,759,1)
(76,1141,1)
(500,1245,1)
(1135,991,1)
(1005,1356,1)
(1295,192,1)
(1094,353,1)
(133,406,1)
(26,780,1)
(167,1317,1)
(1231,1325,1)
(530,126,1)
(1134,721,1)
(966,1390,1)
(479,772,1)
(412,18,1)
(162,281,1)
(671,1222,1)
(996,266,1)
(1146,85,1)
(105,328,1)
(89,875,1)
(7,996,1)
(892,321,1)
(992,604,1)
(1326,1240,1)
(693,817,1)
(753,1225,1)
(1137,903,1)
(366,321,1)
(698,1205,1)
(1044,586,1)
(624,902,1)
(617,406,1)
(1003,1264,1)
(431,406,1)
(17,396,1)
(1154,324,1)
(99,1107,1)
(1272,406,1)
(445,1267,1)
(184,184,1)
(1154,919,1)
(357,1081,1)
(127,833,1)
(1027,318,1)
(624,787,1)
(1137,1245,1)
(1280,961,1)
(119,1076,1)
(89,1103,1)
(1064,1003,1)
(447,660,1)
(1175,1223,1)
(1378,856,1)
(629,36,1)
(792,387,1)
(661,1396,1)
(344,983,1)
(736,406,1)
(99,919,1)
(624,1103,1)
(1224,663,1)
(1021,296,1)
(381,936,1)
(792,173,1)
(500,953,1)
(414,1295,1)
(1199,1377,1)
(894,407,1)
(226,406,1)
(958,273,1)
(844,919,1)
(773,170,1)
(819,1109,1)
(744,406,1)
(99,798,1)
(1063,290,1)
(997,215,1)
(357,1103,1)
(748,1279,1)
(1309,674,1)
(792,772,1)
(624,1273,1)
(1325,14,1)
(1154,749,1)
(871,463,1)
(479,1141,1)
(1203,648,1)
(96,966,1)
(89,1323,1)
(89,1094,1)
(792,1062,1)
(1154,1076,1)
(1125,856,1)
(357,919,1)
(194,608,1)
(825,1269,1)
(105,766,1)
(610,218,1)
(519,696,1)
(343,1077,1)
(1110,863,1)
(885,905,1)
(357,87,1)
(531,660,1)
(76,1191,1)
(1154,1117,1)
(1077,128,1)
(1264,33,1)
(500,556,1)
(1006,1122,1)
(443,1309,1)
(624,1021,1)
(630,1301,1)
(44,406,1)
(1198,58,1)
(76,222,1)
(665,100,1)
(531,402,1)
(1386,1356,1)
(468,985,1)
(1353,696,1)
(473,406,1)
(993,1352,1)
(615,1319,1)
(95,215,1)
(500,74,1)
(190,404,1)
(608,1335,1)
(1186,777,1)
(76,1117,1)
(373,642,1)
(359,875,1)
(803,763,1)
(1137,1210,1)
(192,788,1)
(691,190,1)
(261,1250,1)
(792,640,1)
(1058,406,1)
(1037,406,1)
(99,875,1)
(150,235,1)
(40,406,1)
(1118,1149,1)
(624,772,1)
(1145,963,1)
(921,406,1)
(654,660,1)
(1401,156,1)
(734,727,1)
(1304,453,1)
(357,547,1)
(440,646,1)
(383,509,1)
(76,356,1)
(52,897,1)
(1199,1366,1)
(624,1062,1)
(479,1149,1)
(99,478,1)
(1187,717,1)
(695,202,1)
(661,430,1)
(792,1081,1)
(760,759,1)
(470,1152,1)
(756,772,1)
(991,820,1)
(234,531,1)
(816,721,1)
(733,1032,1)
(135,212,1)
(89,356,1)
(534,1064,1)
(760,981,1)
(1224,547,1)
(105,684,1)
(760,387,1)
(1146,617,1)
(1137,981,1)
(89,1149,1)
(719,68,1)
(812,760,1)
(814,569,1)
(792,981,1)
(500,1191,1)
(1142,628,1)
(202,406,1)
(897,398,1)
(1154,1138,1)
(1137,1323,1)
(1154,764,1)
(252,970,1)
(479,903,1)
(500,1138,1)
(1267,136,1)
(374,1156,1)
(792,547,1)
(454,144,1)
(89,1248,1)
(60,529,1)
(44,470,1)
(257,856,1)
(1324,1350,1)
(1192,1181,1)
(791,703,1)
(631,935,1)
(1305,856,1)
(287,246,1)
(500,244,1)
(1296,906,1)
(1400,408,1)
(1029,1382,1)
(1201,939,1)
(357,759,1)
(107,897,1)
(1154,1094,1)
(99,1062,1)
(982,58,1)
(183,1175,1)
(389,1178,1)
(76,1076,1)
(760,447,1)
(99,672,1)
(545,1214,1)
(1315,1196,1)
(479,1076,1)
(1072,333,1)
(109,717,1)
(500,324,1)
(1137,772,1)
(879,518,1)
(645,749,1)
(585,640,1)
(584,250,1)
(19,385,1)
(754,957,1)
(1317,95,1)
(76,902,1)
(274,209,1)
(76,1058,1)
(264,1400,1)
(880,1220,1)
(542,592,1)
(938,1074,1)
(76,749,1)
(1219,12,1)
(27,361,1)
(910,921,1)
(1326,340,1)
(1012,19,1)
(458,1158,1)
(1224,798,1)
(617,781,1)
(1079,406,1)
(1154,663,1)
(99,447,1)
(1077,856,1)
(1137,531,1)
(1193,632,1)
(984,1125,1)
(480,1129,1)
(1389,135,1)
(1085,1020,1)
(1154,875,1)
(1369,621,1)
(330,1065,1)
(836,80,1)
(1254,917,1)
(797,274,1)
(621,660,1)
(89,324,1)
(624,547,1)
(1136,786,1)
(1244,11,1)
(790,721,1)
(518,406,1)
(479,356,1)
(1021,214,1)
(127,542,1)
(253,1311,1)
(654,1260,1)
(99,1264,1)
(676,48,1)
(1049,823,1)
(703,579,1)
(612,104,1)
(127,996,1)
(105,388,1)
(355,113,1)
(656,619,1)
(357,998,1)
(500,547,1)
(624,1191,1)
(1224,1076,1)
(466,362,1)
(1254,1220,1)
(516,500,1)
(907,759,1)
(500,919,1)
(357,935,1)
(637,701,1)
(1154,1273,1)
(1346,1216,1)
(1402,16,1)
(766,554,1)
(196,30,1)
(1326,1357,1)
(717,991,1)
(959,594,1)
(948,656,1)
(792,1210,1)
(854,666,1)
(380,954,1)
(815,485,1)
(1330,738,1)
(441,1141,1)
(1224,447,1)
(537,510,1)
(686,54,1)
(99,749,1)
(760,1149,1)
(669,556,1)
(859,660,1)
(1337,1183,1)
(105,1353,1)
(612,17,1)
(450,733,1)
(99,1151,1)
(102,698,1)
(180,490,1)
(1375,505,1)
(1326,577,1)
(99,772,1)
(675,56,1)
(479,1117,1)
(239,61,1)
(965,184,1)
(1137,1081,1)
(380,535,1)
(381,406,1)
(1070,406,1)
(105,401,1)
(624,1264,1)
(105,1292,1)
(1154,1323,1)
(1300,970,1)
(386,191,1)
(99,356,1)
(535,1193,1)
(1224,902,1)
(293,1070,1)
(382,53,1)
(335,6,1)
(840,1268,1)
(1014,911,1)
(760,197,1)
(1362,808,1)
(870,660,1)
(1210,175,1)
(874,410,1)
(624,1330,1)
(611,1346,1)
(500,1273,1)
(1141,352,1)
(1154,1248,1)
(140,721,1)
(712,864,1)
(792,531,1)
(865,961,1)
(587,406,1)
(357,672,1)
(55,297,1)
(549,511,1)
(387,1000,1)
(624,531,1)
(519,1114,1)
(1356,897,1)
(111,1319,1)
(233,856,1)
(1374,784,1)
(4,354,1)
(881,406,1)
(357,1151,1)
(1297,523,1)
(862,666,1)
(1341,254,1)
(616,787,1)
(711,1014,1)
(99,222,1)
(624,919,1)
(646,782,1)
(1151,406,1)
(162,507,1)
(556,245,1)
(76,1264,1)
(476,406,1)
(951,240,1)
(890,1221,1)
(324,189,1)
(723,721,1)
(163,1319,1)
(1181,651,1)
(751,727,1)
(808,885,1)
(357,1058,1)
(136,454,1)
(1250,1031,1)
(321,80,1)
(1179,272,1)
(764,834,1)
(1233,790,1)
(89,244,1)
(479,1248,1)
(162,1401,1)
(357,485,1)
(624,663,1)
(99,1141,1)
(413,1081,1)
(781,375,1)
(623,1201,1)
(854,1088,1)
(104,1118,1)
(381,929,1)
(737,295,1)
(479,859,1)
(1137,356,1)
(415,754,1)
(212,713,1)
(105,886,1)
(76,87,1)
(710,1318,1)
(1315,406,1)
(1137,1151,1)
(500,1076,1)
(624,556,1)
(902,1000,1)
(479,798,1)
(1224,772,1)
(868,228,1)
(217,233,1)
(1124,906,1)
(924,1337,1)
(624,296,1)
(624,875,1)
(1137,1062,1)
(1326,183,1)
(67,283,1)
(539,550,1)
(357,356,1)
(206,473,1)
(1154,1191,1)
(960,717,1)
(89,197,1)
(1382,1384,1)
(254,1192,1)
(1054,161,1)
(289,1400,1)
(1137,40,1)
(794,721,1)
(105,533,1)
(656,613,1)
(733,1014,1)
(1361,1052,1)
(1114,158,1)
(1119,691,1)
(747,1189,1)
(1323,1000,1)
(1253,721,1)
(1125,1018,1)
(1137,1058,1)
(722,1273,1)
(284,232,1)
(326,794,1)
(1096,171,1)
(1154,648,1)
(399,1261,1)
(479,1245,1)
(1331,977,1)
(523,1210,1)
(1037,310,1)
(1253,1246,1)
(166,1170,1)
(1224,382,1)
(357,197,1)
(126,878,1)
(1326,3,1)
(1079,193,1)
(885,1380,1)
(870,104,1)
(792,556,1)
(601,392,1)
(6,717,1)
(357,327,1)
(332,1290,1)
(617,430,1)
(357,787,1)
(298,710,1)
(1154,1107,1)
(500,672,1)
(794,1249,1)
(485,876,1)
(913,163,1)
(792,129,1)
(559,888,1)
(760,903,1)
(357,922,1)
(1188,476,1)
(1154,87,1)
(760,1062,1)
(193,329,1)
(1123,366,1)
(1020,717,1)
(1252,1079,1)
(1137,875,1)
(876,1383,1)
(517,990,1)
(926,226,1)
(862,1042,1)
(89,559,1)
(1075,1113,1)
(572,805,1)
(970,143,1)
(494,856,1)
(555,91,1)
(282,1229,1)
(760,356,1)
(544,859,1)
(881,628,1)
(792,1248,1)
(1015,399,1)
(1073,717,1)
(481,237,1)
(1154,1245,1)
(1230,792,1)
(615,721,1)
(500,197,1)
(827,1161,1)
(1371,917,1)
(583,965,1)
(76,531,1)
(49,519,1)
(723,497,1)
(357,1141,1)
(1296,1124,1)
(764,688,1)
(888,1338,1)
(507,229,1)
(437,954,1)
(299,697,1)
(673,1140,1)
(1402,721,1)
(1137,1117,1)
(1074,612,1)
(613,931,1)
(89,672,1)
(1154,559,1)
(886,666,1)
(231,1126,1)
(1067,1381,1)
(479,672,1)
(811,847,1)
(1057,472,1)
(792,1330,1)
(593,1157,1)
(1299,1199,1)
(105,364,1)
(710,194,1)
(854,745,1)
(476,557,1)
(76,919,1)
(1268,406,1)
(472,315,1)
(950,300,1)
(1192,721,1)
(195,628,1)
(1105,1167,1)
(962,1042,1)
(961,307,1)
(509,1088,1)
(1305,597,1)
(792,953,1)
(560,773,1)
(356,117,1)
(1224,1062,1)
(1137,556,1)
(95,316,1)
(749,406,1)
(939,659,1)
(1287,244,1)
(1182,43,1)
(105,502,1)
(479,129,1)
(674,948,1)
(1264,406,1)
(624,1248,1)
(500,559,1)
(813,1184,1)
(792,672,1)
(1218,1296,1)
(22,825,1)
(395,791,1)
(145,870,1)
(1224,559,1)
(1221,857,1)
(832,551,1)
(105,428,1)
(223,670,1)
(1191,159,1)
(807,811,1)
(792,1265,1)
(624,1058,1)
(28,637,1)
(500,759,1)
(40,874,1)
(1004,215,1)
(357,871,1)
(99,1330,1)
(583,528,1)
(357,173,1)
(415,783,1)
(760,663,1)
(76,244,1)
(802,406,1)
(357,278,1)
(89,1058,1)
(99,1138,1)
(1284,721,1)
(479,663,1)
(67,204,1)
(1162,1280,1)
(303,488,1)
(1326,1307,1)
(748,803,1)
(878,308,1)
(76,875,1)
(1024,289,1)
(160,356,1)
(571,498,1)
(624,1117,1)
(214,990,1)
(1316,315,1)
(618,462,1)
(479,1264,1)
(321,1279,1)
(393,1075,1)
(699,1166,1)
(159,770,1)
(792,1044,1)
(1365,822,1)
(89,1138,1)
(1141,688,1)
(477,1171,1)
(965,1145,1)
(999,1173,1)
(1273,1169,1)
(939,688,1)
(672,406,1)
(1129,1341,1)
(338,380,1)
(1036,1,1)
(311,717,1)
(1224,672,1)
(760,1295,1)
(191,881,1)
(1160,795,1)
(489,406,1)
(500,1149,1)
(1322,342,1)
(99,1295,1)
(1100,753,1)
(881,897,1)
(929,116,1)
(479,87,1)
(210,976,1)
(624,1094,1)
(787,1000,1)
(1154,129,1)
(1093,660,1)
(612,660,1)
(725,721,1)
(188,1304,1)
(1142,406,1)
(1018,311,1)
(770,718,1)
(1224,764,1)
(177,700,1)
(1366,1286,1)
(1137,1076,1)
(357,1210,1)
(624,648,1)
(1239,1355,1)
(1120,84,1)
(1137,387,1)
(539,107,1)
(918,934,1)
(1138,406,1)
(569,406,1)
(0,344,1)
(1065,448,1)
(36,696,1)
(89,1151,1)
(1274,99,1)
(122,97,1)
(108,1279,1)
(689,750,1)
(677,856,1)
(31,439,1)
(1371,754,1)
(357,640,1)
(1056,259,1)
(1224,522,1)
(382,406,1)
(272,1395,1)
(793,664,1)
(89,1349,1)
(590,747,1)
(760,875,1)
(76,129,1)
(997,633,1)
(475,813,1)
(187,913,1)
(1159,1378,1)
(148,474,1)
(61,739,1)
(1357,743,1)
(749,373,1)
(144,1144,1)
(529,1263,1)
(463,134,1)
(1154,798,1)
(1172,1293,1)
(787,1177,1)
(1137,1295,1)
(485,406,1)
(1039,610,1)
(944,656,1)
(9,1359,1)
(89,764,1)
(1200,1191,1)
(479,1210,1)
(1326,1047,1)
(357,1273,1)
(1137,87,1)
(742,1318,1)
(690,458,1)
(14,595,1)
(1326,709,1)
(776,1394,1)
(56,393,1)
(1224,787,1)
(1290,42,1)
(214,434,1)
(750,1299,1)
(1298,4,1)
(1372,852,1)
(760,40,1)
(190,377,1)
(184,60,1)
(735,1328,1)
(453,696,1)
(1128,995,1)
(500,648,1)
(1157,956,1)
(760,772,1)
(935,1104,1)
(124,856,1)
(488,955,1)
(873,964,1)
(925,1039,1)
(215,196,1)
(1215,109,1)
(1154,40,1)
(624,129,1)
(1137,184,1)
(1152,1061,1)
(792,919,1)
(1355,87,1)
(453,481,1)
(178,1043,1)
(465,641,1)
(937,184,1)
(267,1385,1)
(92,137,1)
(1398,1139,1)
(1379,850,1)
(89,1245,1)
(1154,1295,1)
(168,551,1)
(1227,400,1)
(624,559,1)
(565,1152,1)
(202,58,1)
(37,981,1)
(519,346,1)
(164,971,1)
(1137,1103,1)
(624,759,1)
(89,387,1)
(76,1295,1)
(533,778,1)
(405,420,1)
(912,1117,1)
(559,406,1)
(881,1022,1)
(89,447,1)
(1224,1149,1)
(977,280,1)
(965,584,1)
(348,1327,1)
(329,744,1)
(427,662,1)
(936,1212,1)
(716,23,1)
(1138,558,1)
(431,624,1)
(30,632,1)
(893,491,1)
(357,559,1)
(207,477,1)
(792,749,1)
(1254,406,1)
(932,1363,1)
(1093,970,1)
(357,129,1)
(1137,1149,1)
(900,278,1)
(1368,211,1)
(99,1210,1)
(1137,197,1)
(76,953,1)
(1168,122,1)
(1390,319,1)
(1300,660,1)
(357,348,1)
(902,1194,1)
(15,159,1)
(344,406,1)
(760,1245,1)
(792,1272,1)
(479,1273,1)
(401,659,1)
(313,102,1)
(879,687,1)
(78,47,1)
(500,387,1)
(642,310,1)
(176,703,1)
(792,244,1)
(587,493,1)
(817,1373,1)
(1224,1138,1)
(1131,701,1)
(638,1060,1)
(206,403,1)
(76,382,1)
(1137,173,1)
(1143,1372,1)
(624,356,1)
(1084,776,1)
(76,387,1)
(100,207,1)
(246,285,1)
(1043,689,1)
(467,1362,1)
(624,798,1)
(1258,910,1)
(792,327,1)
(108,484,1)
(237,397,1)
(883,954,1)
(397,778,1)
(977,832,1)
(89,749,1)
(1034,838,1)
(760,1107,1)
(89,1191,1)
(866,910,1)
(76,1138,1)
(479,981,1)
(831,1072,1)
(1137,447,1)
(248,726,1)
(173,406,1)
(816,618,1)
(240,406,1)
(792,663,1)
(500,1264,1)
(448,1265,1)
(760,1117,1)
(758,895,1)
(348,406,1)
(726,677,1)
(1101,216,1)
(347,1231,1)
(1261,843,1)
(437,668,1)
(233,901,1)
(388,1321,1)
(315,990,1)
(1206,959,1)
(957,1248,1)
(76,1210,1)
(624,1245,1)
(687,518,1)
(354,406,1)
(479,919,1)
(624,293,1)
(790,653,1)
(820,124,1)
(854,406,1)
(500,772,1)
(734,751,1)
(630,740,1)
(624,859,1)
(1171,406,1)
(654,536,1)
(823,1030,1)
(1169,941,1)
(129,1000,1)
(500,1062,1)
(1289,166,1)
(658,190,1)
(479,749,1)
(934,1182,1)
(1318,1160,1)
(706,830,1)
(10,741,1)
(1224,875,1)
(92,415,1)
(1271,45,1)
(561,680,1)
(128,1100,1)
(725,1319,1)
(962,1088,1)
(707,547,1)
(895,673,1)
(173,1127,1)
(804,1205,1)
(89,648,1)
(300,982,1)
(120,1114,1)
(80,829,1)
(1068,609,1)
(590,1065,1)
(99,547,1)
(38,761,1)
(211,400,1)
(1254,754,1)
(634,406,1)
(473,1088,1)
(1032,1163,1)
(963,1238,1)
(357,1374,1)
(1224,1151,1)
(1080,1387,1)
(1053,157,1)
(1279,424,1)
(792,197,1)
(904,332,1)
(250,92,1)
(1154,981,1)
(852,219,1)
(76,1248,1)
(760,1141,1)
(20,1007,1)
(1359,287,1)
(58,431,1)
(1070,530,1)
(759,688,1)
(1154,759,1)
(358,121,1)
(96,721,1)
(457,1073,1)
(708,631,1)
(1224,87,1)
(792,559,1)
(1030,70,1)
(1109,1233,1)
(1096,721,1)
(83,954,1)
(357,1107,1)
(1137,902,1)
(48,629,1)
(356,406,1)
(455,717,1)
(1016,1393,1)
(640,406,1)
(397,510,1)
(824,1282,1)
(478,764,1)
(494,722,1)
(76,213,1)
(407,277,1)
(680,283,1)
(43,225,1)
(473,758,1)
(786,216,1)
(792,903,1)
(1400,510,1)
(357,764,1)
(1137,798,1)
(479,953,1)
(1190,1342,1)
(357,244,1)
(739,1128,1)
(201,1186,1)
(792,40,1)
(1186,825,1)
(795,165,1)
(97,406,1)
(99,1094,1)
(799,1253,1)
(500,1141,1)
(227,234,1)
(792,1245,1)
(1157,1012,1)
(170,717,1)
(1193,1299,1)
(500,1094,1)
(449,61,1)
(1149,1176,1)
(357,663,1)
(1019,907,1)
(979,1168,1)
(76,1103,1)
(166,747,1)
(357,354,1)
(357,903,1)
(163,1402,1)
(357,1070,1)
(76,1273,1)
(1340,446,1)
(805,673,1)
(1309,406,1)
(942,645,1)
(885,104,1)
(760,1330,1)
(1266,269,1)
(500,859,1)
(798,1172,1)
(493,1197,1)
(1243,615,1)
(1082,334,1)
(1154,1264,1)
(760,1058,1)
(392,350,1)
(1224,1264,1)
(973,544,1)
(1326,572,1)
(224,932,1)
(1171,1205,1)
(982,701,1)
(792,902,1)
(500,903,1)
(1204,831,1)
(16,79,1)
(274,856,1)
(500,87,1)
(295,958,1)
(357,1076,1)
(792,278,1)
(427,430,1)
(1154,1081,1)
(624,244,1)
(1224,903,1)
(1224,531,1)
(1343,406,1)
(357,447,1)
(1163,814,1)
(76,547,1)
(536,359,1)
(500,875,1)
(357,382,1)
(439,672,1)
(1295,406,1)
(171,358,1)
(760,919,1)
(890,355,1)
(624,197,1)
(89,1076,1)
(1224,1058,1)
(287,1319,1)
(661,406,1)
(839,694,1)
(437,956,1)
(733,406,1)
(60,990,1)
(156,1332,1)
(509,666,1)
(151,870,1)
(606,717,1)
(1043,905,1)
(505,210,1)
(995,477,1)
(101,716,1)
(182,927,1)
(1156,614,1)
(353,406,1)
(36,337,1)
(357,1149,1)
(1170,1271,1)
(1394,1004,1)
(792,356,1)
(327,520,1)
(624,953,1)
(870,905,1)
(1081,688,1)
(381,701,1)
(479,222,1)
(624,87,1)
(871,660,1)
(397,94,1)
(1074,1339,1)
(1075,538,1)
(829,257,1)
(1112,227,1)
(906,24,1)
(753,83,1)
(469,960,1)
(1248,406,1)
(1330,688,1)
(1384,844,1)
(99,382,1)
(1310,203,1)
(1104,679,1)
(800,1289,1)
(1230,110,1)
(760,1151,1)
(1222,1286,1)
(1371,1137,1)
(1137,1273,1)
(1137,648,1)
(660,899,1)
(436,579,1)
(216,147,1)
(89,1330,1)
(1154,197,1)
(479,1062,1)
(297,231,1)
(740,1301,1)
(479,1330,1)
(910,200,1)
(1225,606,1)
(1137,1145,1)
(113,973,1)
(1048,1258,1)
(1335,256,1)
(1278,1137,1)
(939,1030,1)
(602,654,1)
(1398,1065,1)
(357,1265,1)
(228,994,1)
(1069,283,1)
(528,241,1)
(459,283,1)
(1131,929,1)
(565,44,1)
(624,1295,1)
(793,427,1)
(663,1000,1)
(1137,1330,1)
(1151,1165,1)
(875,341,1)
(479,556,1)
(1224,981,1)
(161,804,1)
(971,106,1)
(792,1117,1)
(364,1392,1)
(411,856,1)
(826,575,1)
(89,1210,1)
(263,441,1)
(744,627,1)
(105,115,1)
(1137,547,1)
(179,1365,1)
(1323,819,1)
(1334,1065,1)
(1091,954,1)
(76,40,1)
(334,1362,1)
(624,749,1)
(76,1062,1)
(525,1011,1)
(278,406,1)
(254,725,1)
(89,1081,1)
(1318,368,1)
(1244,654,1)
(1178,240,1)
(1098,856,1)
(1136,721,1)
(62,561,1)
(1278,917,1)
(499,1043,1)
(1292,89,1)
(500,1265,1)
(804,406,1)
(236,1093,1)
(115,479,1)
(792,1070,1)
(45,106,1)
(1340,281,1)
(405,762,1)
(377,133,1)
(640,545,1)
(357,1290,1)
(479,387,1)
(376,255,1)
(1060,1323,1)
(538,879,1)
(951,389,1)
(1234,88,1)
(326,615,1)
(792,1295,1)
(491,508,1)
(5,406,1)
(500,1081,1)
(760,531,1)
(552,990,1)
(743,856,1)
(880,708,1)
(357,648,1)
(1299,342,1)
(76,1265,1)
(644,1297,1)
(89,859,1)
(299,450,1)
(680,835,1)
(357,1264,1)
(772,406,1)
(473,666,1)
(222,406,1)
(353,34,1)
(54,799,1)
(1400,778,1)
(982,46,1)
(613,406,1)
(1037,652,1)
(964,736,1)
(875,660,1)
(733,624,1)
(760,749,1)
(1009,1394,1)
(500,1117,1)
(89,919,1)
(1337,1092,1)
(33,322,1)
(1269,1078,1)
(1333,1090,1)
(1265,1063,1)
(953,688,1)
(307,496,1)
(858,644,1)
(724,1160,1)
(357,734,1)
(1363,1015,1)
(1137,953,1)
(1326,1023,1)
(338,1193,1)
(99,1273,1)
(514,717,1)
(1154,859,1)
(805,206,1)
(1377,1366,1)
(760,1265,1)
(855,536,1)
(784,914,1)
(624,672,1)
(796,817,1)
(769,856,1)
(1052,406,1)
(741,1,1)
(85,495,1)
(1220,1234,1)
(117,678,1)
(576,824,1)
(1041,1280,1)
(154,984,1)
(1326,675,1)
(624,324,1)
(882,628,1)
(1356,628,1)
(99,859,1)
(64,406,1)
(98,855,1)
(1155,1162,1)
(1133,52,1)
(771,1218,1)
(84,635,1)
(538,647,1)
(656,1016,1)
(1263,51,1)
(1023,1024,1)
(517,721,1)
(624,387,1)
(636,1119,1)
(1224,387,1)
(903,845,1)
(632,1093,1)
(624,222,1)
(792,354,1)
(1361,304,1)
(255,49,1)
(906,406,1)
(357,953,1)
(500,764,1)
(1208,72,1)
(500,382,1)
(919,660,1)
(76,1323,1)
(1107,688,1)
(1137,919,1)
(1387,658,1)
(1245,469,1)
(443,1016,1)
(1134,990,1)
(792,798,1)
(84,162,1)
(798,688,1)
(731,1285,1)
(1154,953,1)
(1394,252,1)
(169,357,1)
(89,382,1)
(961,406,1)
(112,793,1)
(1224,1210,1)
(590,406,1)
(357,1248,1)
(1309,897,1)
(625,513,1)
(1326,224,1)
(412,71,1)
(927,1042,1)
(1224,759,1)
(225,348,1)
(1142,897,1)
(1061,1326,1)
(590,182,1)
(1137,129,1)
(479,648,1)
(357,981,1)
(99,387,1)
(219,18,1)
(1154,902,1)
(627,1226,1)
(430,31,1)
(25,894,1)
(292,1347,1)
(624,1076,1)
(10,856,1)
(1142,284,1)
(880,917,1)
(317,610,1)
(105,898,1)
(420,221,1)
(1378,413,1)
(422,444,1)
(792,1191,1)
(1137,1272,1)
(994,199,1)
(492,267,1)
(368,269,1)
(429,656,1)
(319,990,1)
(346,264,1)
(1007,369,1)
(1224,919,1)
(760,556,1)
(748,624,1)
(1031,798,1)
(964,862,1)
(945,1354,1)
(105,846,1)
(260,747,1)
(357,531,1)
(479,1138,1)
(1171,1072,1)
(431,655,1)
(792,1074,1)
(220,1048,1)
(357,1323,1)
(76,1094,1)
(446,1208,1)
(210,1315,1)
(1340,507,1)
(500,787,1)
(1000,1037,1)
(1154,244,1)
(1017,589,1)
(1286,690,1)
(868,1120,1)
(294,539,1)
(1088,707,1)
(216,406,1)
(221,922,1)
(1395,1101,1)
(1131,1257,1)
(792,382,1)
(1154,556,1)
(53,930,1)
(1240,979,1)
(114,721,1)
(591,1252,1)
(891,480,1)
(347,1325,1)
(760,902,1)
(714,717,1)
(337,734,1)
(864,459,1)
(202,918,1)
(1328,1302,1)
(562,1075,1)
(500,1058,1)
(790,283,1)
(142,133,1)
(1311,1017,1)
(159,406,1)
(317,924,1)
(891,446,1)
(256,25,1)
(884,1133,1)
(1253,283,1)
(1068,1284,1)
(314,721,1)
(1366,1164,1)
(1302,1110,1)
(792,348,1)
(969,509,1)
(500,981,1)
(500,1295,1)
(975,353,1)
(209,715,1)
(479,1151,1)
(497,123,1)
(99,129,1)
(175,1364,1)
(1182,1123,1)
(748,80,1)
(824,1142,1)
(1224,1295,1)
(885,660,1)
(589,317,1)
(760,787,1)
(479,244,1)
(804,551,1)
(76,1151,1)
(1224,1323,1)
(760,1248,1)
(1224,1330,1)
(504,97,1)
(1242,952,1)
(1137,1264,1)
(715,717,1)
(1008,1288,1)
(656,154,1)
(156,682,1)
(1288,1340,1)
(500,1248,1)
(479,382,1)
(99,197,1)
(1122,661,1)
(99,663,1)
(593,956,1)
(915,724,1)
(592,989,1)
(1205,243,1)
(121,163,1)
(445,506,1)
(496,1205,1)
(555,1300,1)
(1275,445,1)
(850,317,1)
(733,80,1)
(1061,883,1)
(479,1107,1)
(1197,412,1)
(1398,588,1)
(500,1107,1)
(579,1390,1)
(31,721,1)
(105,516,1)
(1316,1134,1)
(641,239,1)
(500,798,1)
(302,10,1)
(1158,839,1)
(471,714,1)
(1340,84,1)
(765,1110,1)
(500,222,1)
(99,40,1)
(1154,447,1)
(1106,903,1)
(99,1076,1)
(500,749,1)
(12,406,1)
(609,721,1)
(1226,239,1)
(321,406,1)
(1127,765,1)
(1108,1000,1)
(898,704,1)
(501,1036,1)
(578,767,1)
(1154,531,1)
(768,1103,1)
(99,556,1)
(388,1038,1)
(1196,1379,1)
(1313,1154,1)
(924,720,1)
(319,568,1)
(1154,222,1)
(1044,688,1)
(1224,197,1)
(796,303,1)
(357,40,1)
(431,80,1)
(792,621,1)
(369,616,1)
(89,87,1)
(1380,1009,1)
(655,815,1)
(760,1264,1)
(216,1220,1)
(1154,1330,1)
(76,447,1)
(748,1014,1)
(554,769,1)
(1322,779,1)
(314,892,1)
(1229,345,1)
(479,1323,1)
(760,1210,1)
(25,660,1)
(1399,0,1)
(986,1069,1)
(247,1209,1)
(1232,942,1)
(328,228,1)
(575,1120,1)
(362,988,1)
(804,1072,1)
(760,547,1)
(511,736,1)
(506,136,1)
(1209,890,1)
(1093,1368,1)
(281,1155,1)
(1117,406,1)
(199,717,1)
(354,1147,1)
(682,1332,1)
(444,347,1)
(509,57,1)
(357,1272,1)
(1224,953,1)
(1171,164,1)
(1184,730,1)
(1311,406,1)
(818,842,1)
(847,466,1)
(624,1272,1)
(692,872,1)
(1122,26,1)
(432,1224,1)
(105,1313,1)
(357,1295,1)
(827,588,1)
(276,871,1)
(1131,406,1)
(697,102,1)
(908,440,1)
(1388,1375,1)
(357,1191,1)
(344,666,1)
(1339,612,1)
(223,1316,1)
(792,1374,1)
(903,406,1)
(1294,1266,1)
(582,22,1)
(953,858,1)
(456,1245,1)
(1224,129,1)
(1224,1094,1)
(1327,599,1)
(717,1135,1)
(1213,1071,1)
(636,406,1)
(1182,1239,1)
(760,1081,1)
(89,903,1)
(594,712,1)
(153,162,1)
(792,1107,1)
(60,721,1)
(615,525,1)
(138,279,1)
(1393,611,1)
(605,1374,1)
(1347,636,1)
(518,581,1)
(789,1352,1)
(165,412,1)
(404,377,1)
(1189,494,1)
(244,1000,1)
(974,288,1)
(1038,141,1)
(1334,821,1)
(1334,747,1)
(745,1188,1)
(621,671,1)
(89,531,1)
(1156,64,1)
(1154,787,1)
(1352,990,1)
(479,40,1)
(1117,1085,1)
(792,859,1)
(166,1065,1)
(2,176,1)
(89,953,1)
(688,1219,1)
(76,197,1)
(1090,1004,1)
(1137,222,1)
(569,1065,1)
(222,423,1)
(195,860,1)
(792,1290,1)
(1137,244,1)
(479,1295,1)
(357,324,1)
(89,1295,1)
(599,1161,1)
(647,1311,1)
(105,168,1)
(105,743,1)
(985,149,1)
(760,559,1)
(1137,1191,1)
(1134,1057,1)
(1300,1308,1)
(1214,92,1)
(89,902,1)
(1301,826,1)
(1283,999,1)
(240,563,1)
(431,1279,1)
(316,467,1)
(1183,406,1)
(479,447,1)
(305,873,1)
(133,775,1)
(357,1117,1)
(673,1131,1)
(760,1191,1)
(3,2,1)
(345,551,1)
(36,1114,1)
(899,1343,1)
(760,1107,2)
(1137,1191,2)
(888,634,2)
(216,1137,2)
(1291,555,2)
(60,703,2)
(99,648,2)
(1125,717,2)
(1137,859,2)
(820,1,2)
(1356,1394,2)
(1401,121,2)
(479,1138,2)
(231,1201,2)
(102,962,2)
(298,513,2)
(565,513,2)
(792,40,2)
(89,387,2)
(141,856,2)
(99,1076,2)
(311,717,2)
(10,856,2)
(1021,1021,2)
(505,210,2)
(193,239,2)
(1023,1400,2)
(294,539,2)
(981,717,2)
(99,1151,2)
(1315,406,2)
(1254,754,2)
(1182,1123,2)
(1311,406,2)
(1210,688,2)
(1154,1295,2)
(1361,658,2)
(357,953,2)
(419,177,2)
(1224,382,2)
(922,660,2)
(1039,610,2)
(178,1299,2)
(317,924,2)
(983,61,2)
(1154,1210,2)
(220,1258,2)
(357,348,2)
(624,1151,2)
(624,40,2)
(654,536,2)
(33,717,2)
(1137,764,2)
(1061,1400,2)
(760,772,2)
(326,794,2)
(357,859,2)
(89,1138,2)
(89,672,2)
(99,717,2)
(610,1361,2)
(816,634,2)
(748,624,2)
(739,701,2)
(792,871,2)
(500,1323,2)
(76,1138,2)
(1224,1295,2)
(887,177,2)
(792,839,2)
(627,239,2)
(792,1094,2)
(10,743,2)
(824,1142,2)
(1224,547,2)
(1248,634,2)
(60,990,2)
(98,177,2)
(214,721,2)
(1152,1400,2)
(1399,61,2)
(792,222,2)
(1253,283,2)
(357,1210,2)
(1098,856,2)
(500,749,2)
(194,513,2)
(886,717,2)
(760,749,2)
(1100,753,2)
(500,531,2)
(1194,680,2)
(939,1201,2)
(1152,106,2)
(1277,1254,2)
(96,721,2)
(500,547,2)
(212,1255,2)
(656,613,2)
(609,163,2)
(195,1299,2)
(60,721,2)
(479,1094,2)
(1268,824,2)
(1119,190,2)
(473,1042,2)
(89,859,2)
(1394,252,2)
(583,92,2)
(1246,680,2)
(690,269,2)
(965,184,2)
(89,648,2)
(919,177,2)
(430,177,2)
(1015,539,2)
(792,798,2)
(554,769,2)
(195,406,2)
(1152,703,2)
(59,411,2)
(1079,406,2)
(1231,908,2)
(1224,1151,2)
(509,666,2)
(76,1191,2)
(857,743,2)
(712,680,2)
(1224,1264,2)
(792,295,2)
(296,634,2)
(554,717,2)
(792,1070,2)
(454,177,2)
(401,717,2)
(641,239,2)
(287,721,2)
(344,406,2)
(494,717,2)
(1300,1286,2)
(349,177,2)
(534,717,2)
(589,317,2)
(1224,648,2)
(463,1340,2)
(1175,467,2)
(58,384,2)
(357,759,2)
(1102,680,2)
(1381,1006,2)
(51,703,2)
(1137,919,2)
(560,717,2)
(89,40,2)
(479,875,2)
(1224,87,2)
(1058,634,2)
(500,556,2)
(753,1225,2)
(1156,64,2)
(577,1006,2)
(792,749,2)
(321,624,2)
(1074,194,2)
(1144,177,2)
(397,743,2)
(1397,717,2)
(943,477,2)
(78,513,2)
(362,988,2)
(397,510,2)
(52,177,2)
(747,717,2)
(350,212,2)
(1265,406,2)
(1400,1015,2)
(335,717,2)
(312,890,2)
(899,1343,2)
(8,190,2)
(1224,356,2)
(398,177,2)
(1152,467,2)
(277,513,2)
(748,80,2)
(321,1014,2)
(99,382,2)
(1224,672,2)
(536,177,2)
(1343,406,2)
(572,239,2)
(754,634,2)
(1282,422,2)
(991,1,2)
(1113,317,2)
(946,61,2)
(500,197,2)
(639,743,2)
(992,680,2)
(793,400,2)
(340,908,2)
(792,658,2)
(1037,406,2)
(1209,743,2)
(805,673,2)
(1000,177,2)
(85,717,2)
(624,244,2)
(16,1280,2)
(624,903,2)
(854,1229,2)
(1291,1318,2)
(538,879,2)
(89,1107,2)
(1077,753,2)
(1069,177,2)
(1171,406,2)
(479,764,2)
(885,660,2)
(76,197,2)
(656,1016,2)
(328,717,2)
(142,519,2)
(190,519,2)
(885,104,2)
(839,660,2)
(177,700,2)
(447,177,2)
(963,634,2)
(792,875,2)
(479,244,2)
(894,194,2)
(656,1296,2)
(528,965,2)
(13,680,2)
(1061,317,2)
(1062,717,2)
(1166,717,2)
(1062,688,2)
(1324,539,2)
(25,194,2)
(717,991,2)
(1349,717,2)
(1334,588,2)
(792,663,2)
(946,299,2)
(918,1161,2)
(1388,317,2)
(141,847,2)
(357,734,2)
(138,658,2)
(183,467,2)
(982,1277,2)
(1193,1005,2)
(76,859,2)
(89,1191,2)
(1162,1280,2)
(908,646,2)
(357,1323,2)
(590,743,2)
(76,902,2)
(618,703,2)
(787,1000,2)
(480,1068,2)
(1238,634,2)
(921,406,2)
(805,239,2)
(1359,723,2)
(165,412,2)
(771,1296,2)
(993,1352,2)
(764,688,2)
(990,634,2)
(1209,890,2)
(456,717,2)
(520,743,2)
(127,996,2)
(479,859,2)
(951,389,2)
(67,680,2)
(925,610,2)
(1,217,2)
(14,908,2)
(497,1068,2)
(833,1061,2)
(289,1400,2)
(725,1359,2)
(99,1107,2)
(479,1330,2)
(467,151,2)
(969,743,2)
(479,798,2)
(243,1229,2)
(99,1210,2)
(680,835,2)
(1364,177,2)
(151,1394,2)
(369,680,2)
(357,87,2)
(357,1076,2)
(700,1352,2)
(953,177,2)
(1224,129,2)
(1183,406,2)
(559,406,2)
(958,239,2)
(317,610,2)
(72,480,2)
(1398,743,2)
(1293,177,2)
(902,1000,2)
(1371,754,2)
(513,1318,2)
(4,1229,2)
(94,743,2)
(229,1280,2)
(1224,717,2)
(357,1138,2)
(914,743,2)
(800,106,2)
(373,634,2)
(792,1372,2)
(76,1295,2)
(1152,1075,2)
(760,222,2)
(868,1346,2)
(338,1299,2)
(219,239,2)
(792,1149,2)
(493,239,2)
(89,1058,2)
(99,387,2)
(1004,632,2)
(1398,747,2)
(316,467,2)
(99,1245,2)
(99,1094,2)
(1273,717,2)
(1137,1070,2)
(128,753,2)
(1154,1273,2)
(326,254,2)
(500,875,2)
(129,680,2)
(92,743,2)
(404,519,2)
(166,406,2)
(1076,688,2)
(31,721,2)
(689,1299,2)
(1233,790,2)
(1151,406,2)
(500,859,2)
(587,1054,2)
(67,283,2)
(479,547,2)
(7,743,2)
(1323,1000,2)
(302,743,2)
(194,608,2)
(1132,579,2)
(792,1248,2)
(624,1117,2)
(366,314,2)
(189,177,2)
(1339,194,2)
(1299,1006,2)
(1374,743,2)
(760,1264,2)
(1352,703,2)
(431,384,2)
(999,717,2)
(345,406,2)
(881,824,2)
(1286,690,2)
(299,450,2)
(745,1229,2)
(673,239,2)
(880,406,2)
(1167,634,2)
(1154,672,2)
(817,1201,2)
(210,1315,2)
(329,239,2)
(385,194,2)
(428,717,2)
(500,772,2)
(1199,1005,2)
(357,981,2)
(679,969,2)
(939,688,2)
(5,1258,2)
(575,1120,2)
(906,897,2)
(704,1146,2)
(11,654,2)
(569,406,2)
(792,1117,2)
(1205,1229,2)
(1128,477,2)
(400,840,2)
(407,513,2)
(415,406,2)
(103,797,2)
(1154,859,2)
(634,406,2)
(1182,406,2)
(89,1062,2)
(569,1277,2)
(1398,1065,2)
(76,981,2)
(945,680,2)
(89,1076,2)
(357,640,2)
(760,387,2)
(1036,1,2)
(357,356,2)
(880,969,2)
(671,1318,2)
(792,129,2)
(59,717,2)
(399,1261,2)
(360,1277,2)
(901,743,2)
(796,1201,2)
(345,743,2)
(1027,856,2)
(357,922,2)
(804,239,2)
(508,717,2)
(145,1394,2)
(1300,1318,2)
(111,163,2)
(792,743,2)
(120,634,2)
(1326,1075,2)
(228,717,2)
(287,1068,2)
(950,1277,2)
(792,1075,2)
(617,406,2)
(276,1340,2)
(499,1299,2)
(760,40,2)
(357,447,2)
(900,92,2)
(1137,129,2)
(792,734,2)
(624,1248,2)
(341,177,2)
(994,717,2)
(35,658,2)
(822,717,2)
(1280,961,2)
(272,743,2)
(357,387,2)
(357,935,2)
(778,717,2)
(1323,680,2)
(162,743,2)
(792,1323,2)
(1337,1183,2)
(179,1365,2)
(357,772,2)
(489,701,2)
(1290,743,2)
(656,154,2)
(1362,215,2)
(319,990,2)
(76,387,2)
(1266,717,2)
(842,717,2)
(479,356,2)
(1300,660,2)
(905,1318,2)
(514,717,2)
(99,1149,2)
(904,743,2)
(89,556,2)
(680,283,2)
(89,663,2)
(821,239,2)
(961,406,2)
(798,177,2)
(792,981,2)
(202,1161,2)
(1326,422,2)
(1156,400,2)
(1137,447,2)
(760,87,2)
(676,1201,2)
(1201,303,2)
(792,556,2)
(1280,743,2)
(624,648,2)
(1190,1280,2)
(1161,590,2)
(910,1075,2)
(1127,1110,2)
(108,1279,2)
(1240,658,2)
(140,721,2)
(1333,632,2)
(624,547,2)
(613,1296,2)
(765,1110,2)
(1107,717,2)
(299,697,2)
(89,447,2)
(76,324,2)
(1018,717,2)
(479,129,2)
(467,1394,2)
(1188,1229,2)
(357,749,2)
(1260,1340,2)
(450,1277,2)
(45,106,2)
(736,1395,2)
(1154,197,2)
(1326,106,2)
(697,1371,2)
(982,58,2)
(624,1191,2)
(642,634,2)
(647,1311,2)
(917,92,2)
(880,917,2)
(1334,239,2)
(565,467,2)
(500,1094,2)
(792,1374,2)
(775,519,2)
(720,610,2)
(977,832,2)
(885,1394,2)
(1171,551,2)
(793,664,2)
(1301,826,2)
(1213,177,2)
(630,1301,2)
(444,908,2)
(1224,531,2)
(916,847,2)
(321,80,2)
(422,347,2)
(324,177,2)
(64,400,2)
(792,422,2)
(698,450,2)
(476,406,2)
(1092,610,2)
(760,1117,2)
(412,18,2)
(57,743,2)
(1245,717,2)
(166,1065,2)
(611,634,2)
(539,513,2)
(317,658,2)
(1116,177,2)
(1137,1058,2)
(1027,717,2)
(600,1034,2)
(870,1394,2)
(99,1081,2)
(149,1235,2)
(1326,513,2)
(615,721,2)
(760,1151,2)
(107,513,2)
(188,1304,2)
(847,362,2)
(1017,317,2)
(804,551,2)
(126,1110,2)
(1379,317,2)
(1137,387,2)
(197,688,2)
(624,672,2)
(1061,177,2)
(1224,787,2)
(479,87,2)
(462,703,2)
(606,717,2)
(960,717,2)
(479,1117,2)
(608,1335,2)
(28,634,2)
(429,656,2)
(292,1347,2)
(459,283,2)
(984,717,2)
(291,177,2)
(1123,743,2)
(165,239,2)
(284,422,2)
(1224,1058,2)
(784,743,2)
(1254,61,2)
(414,717,2)
(766,717,2)
(43,1161,2)
(920,634,2)
(1255,717,2)
(410,634,2)
(413,717,2)
(245,1352,2)
(357,1264,2)
(565,658,2)
(658,190,2)
(322,717,2)
(565,317,2)
(590,1065,2)
(53,177,2)
(1235,856,2)
(89,356,2)
(76,953,2)
(760,981,2)
(190,377,2)
(762,1340,2)
(167,632,2)
(427,406,2)
(997,215,2)
(1310,1006,2)
(1356,897,2)
(88,717,2)
(1394,467,2)
(44,406,2)
(711,743,2)
(500,1210,2)
(760,1103,2)
(1243,254,2)
(792,640,2)
(1137,759,2)
(735,296,2)
(1165,634,2)
(1137,1076,2)
(99,953,2)
(1283,1173,2)
(973,212,2)
(500,1103,2)
(952,634,2)
(1008,1340,2)
(1249,254,2)
(624,382,2)
(1326,703,2)
(156,358,2)
(1061,743,2)
(792,1400,2)
(875,177,2)
(1330,688,2)
(1335,194,2)
(866,1075,2)
(377,133,2)
(89,197,2)
(1101,743,2)
(890,355,2)
(1244,654,2)
(1054,161,2)
(760,1058,2)
(149,717,2)
(733,80,2)
(76,1264,2)
(392,212,2)
(162,446,2)
(1057,579,2)
(1281,519,2)
(108,743,2)
(1158,1318,2)
(979,658,2)
(1357,743,2)
(937,703,2)
(677,717,2)
(870,905,2)
(1154,648,2)
(618,634,2)
(638,680,2)
(89,1094,2)
(366,321,2)
(1146,1027,2)
(525,254,2)
(1292,717,2)
(1318,954,2)
(712,1000,2)
(99,87,2)
(479,222,2)
(347,1325,2)
(760,559,2)
(792,1074,2)
(305,239,2)
(347,985,2)
(89,559,2)
(760,1149,2)
(565,177,2)
(836,717,2)
(829,257,2)
(895,239,2)
(475,813,2)
(237,397,2)
(114,721,2)
(100,477,2)
(25,513,2)
(624,798,2)
(1096,721,2)
(1272,406,2)
(1006,1299,2)
(759,688,2)
(1269,680,2)
(660,177,2)
(1189,717,2)
(1061,1006,2)
(342,1005,2)
(1154,382,2)
(500,919,2)
(248,726,2)
(89,717,2)
(951,240,2)
(1042,969,2)
(1154,1107,2)
(735,1110,2)
(531,660,2)
(753,1266,2)
(743,856,2)
(482,717,2)
(654,1340,2)
(308,735,2)
(1154,559,2)
(619,1296,2)
(1114,634,2)
(507,1280,2)
(1137,547,2)
(1142,628,2)
(357,1248,2)
(1137,903,2)
(500,387,2)
(345,1072,2)
(359,177,2)
(569,1065,2)
(931,1296,2)
(169,743,2)
(357,1141,2)
(722,717,2)
(1224,1138,2)
(436,579,2)
(261,177,2)
(624,129,2)
(196,632,2)
(977,477,2)
(1225,856,2)
(862,406,2)
(99,197,2)
(740,1120,2)
(127,1061,2)
(835,802,2)
(500,1081,2)
(797,717,2)
(1224,1081,2)
(760,1210,2)
(666,717,2)
(790,721,2)
(319,1352,2)
(924,1337,2)
(951,1352,2)
(76,87,2)
(1371,406,2)
(628,1296,2)
(1322,342,2)
(1212,239,2)
(99,447,2)
(760,556,2)
(799,1253,2)
(315,990,2)
(500,1248,2)
(1157,956,2)
(1154,129,2)
(76,1103,2)
(1168,122,2)
(840,881,2)
(1154,1138,2)
(1402,163,2)
(25,970,2)
(760,1295,2)
(1289,106,2)
(1232,634,2)
(321,743,2)
(1254,1137,2)
(1201,939,2)
(1014,1110,2)
(455,717,2)
(1309,406,2)
(897,177,2)
(1328,1110,2)
(742,1318,2)
(1229,743,2)
(1252,239,2)
(944,443,2)
(1310,1005,2)
(699,717,2)
(964,736,2)
(935,969,2)
(1032,1277,2)
(107,628,2)
(853,680,2)
(1157,194,2)
(734,727,2)
(1061,422,2)
(1366,1286,2)
(233,856,2)
(234,177,2)
(76,1151,2)
(315,721,2)
(1,1,2)
(246,1068,2)
(921,1075,2)
(1038,847,2)
(733,624,2)
(901,1,2)
(383,743,2)
(1326,658,2)
(1224,1273,2)
(489,743,2)
(1074,612,2)
(624,1107,2)
(112,400,2)
(217,233,2)
(1255,1283,2)
(663,1000,2)
(1135,1,2)
(396,194,2)
(760,1330,2)
(624,87,2)
(798,688,2)
(1073,717,2)
(247,743,2)
(804,1205,2)
(1224,1245,2)
(1252,381,2)
(978,1258,2)
(105,743,2)
(79,1280,2)
(1204,634,2)
(298,1318,2)
(438,1296,2)
(184,1145,2)
(792,1264,2)
(854,1088,2)
(760,717,2)
(612,194,2)
(760,787,2)
(1377,1006,2)
(479,1081,2)
(1289,166,2)
(1154,387,2)
(1201,743,2)
(1224,875,2)
(178,1043,2)
(1390,319,2)
(151,870,2)
(1352,990,2)
(1080,658,2)
(1059,190,2)
(1164,1006,2)
(762,1244,2)
(76,556,2)
(500,787,2)
(758,239,2)
(76,1149,2)
(479,1103,2)
(948,656,2)
(134,1340,2)
(1136,721,2)
(792,1245,2)
(597,1146,2)
(1371,917,2)
(974,450,2)
(255,519,2)
(257,717,2)
(842,856,2)
(485,384,2)
(624,1149,2)
(5,406,2)
(16,163,2)
(1154,1141,2)
(623,743,2)
(343,753,2)
(759,177,2)
(697,450,2)
(1242,634,2)
(223,1316,2)
(1137,798,2)
(115,717,2)
(1154,1330,2)
(625,513,2)
(1137,184,2)
(658,292,2)
(99,1062,2)
(1224,447,2)
(773,717,2)
(129,1000,2)
(89,875,2)
(1038,141,2)
(384,489,2)
(386,824,2)
(751,1201,2)
(357,1330,2)
(1340,507,2)
(887,680,2)
(1304,397,2)
(1112,177,2)
(266,743,2)
(1154,447,2)
(724,1160,2)
(891,163,2)
(427,400,2)
(243,854,2)
(717,1,2)
(479,1151,2)
(596,717,2)
(644,177,2)
(357,1273,2)
(1049,177,2)
(624,902,2)
(586,1304,2)
(1224,556,2)
(357,1295,2)
(843,539,2)
(1340,868,2)
(1163,1277,2)
(99,749,2)
(500,40,2)
(382,177,2)
(910,921,2)
(495,717,2)
(1341,326,2)
(846,717,2)
(1297,177,2)
(274,856,2)
(18,239,2)
(558,634,2)
(133,406,2)
(1224,1103,2)
(1137,875,2)
(500,902,2)
(791,703,2)
(661,430,2)
(1224,663,2)
(99,1141,2)
(207,477,2)
(1060,680,2)
(1154,1245,2)
(1352,816,2)
(779,1006,2)
(357,903,2)
(1355,634,2)
(254,1192,2)
(99,764,2)
(1326,317,2)
(882,743,2)
(391,239,2)
(89,1273,2)
(1123,366,2)
(500,672,2)
(157,163,2)
(608,194,2)
(357,1272,2)
(624,1272,2)
(24,743,2)
(1108,1000,2)
(1186,680,2)
(1154,903,2)
(164,106,2)
(792,1330,2)
(1384,177,2)
(760,447,2)
(195,628,2)
(344,61,2)
(290,634,2)
(698,1205,2)
(760,672,2)
(636,406,2)
(1052,658,2)
(935,406,2)
(1152,513,2)
(736,239,2)
(315,579,2)
(264,1400,2)
(1088,634,2)
(1137,1265,2)
(479,749,2)
(106,743,2)
(1325,406,2)
(1301,1120,2)
(54,680,2)
(571,1352,2)
(1283,717,2)
(399,539,2)
(146,1015,2)
(1137,324,2)
(80,829,2)
(1193,1299,2)
(500,1138,2)
(99,981,2)
(890,743,2)
(760,1062,2)
(694,1318,2)
(890,536,2)
(355,113,2)
(646,5,2)
(500,1273,2)
(381,58,2)
(500,129,2)
(191,824,2)
(89,1323,2)
(500,1141,2)
(450,733,2)
(957,634,2)
(225,1161,2)
(1279,634,2)
(107,1318,2)
(659,968,2)
(239,61,2)
(612,905,2)
(1138,634,2)
(1224,1191,2)
(500,648,2)
(1277,61,2)
(239,946,2)
(737,239,2)
(1022,824,2)
(559,634,2)
(485,406,2)
(76,1210,2)
(357,324,2)
(344,1042,2)
(303,743,2)
(452,717,2)
(1338,634,2)
(327,743,2)
(739,477,2)
(15,717,2)
(804,406,2)
(1394,1004,2)
(1137,663,2)
(739,58,2)
(1347,636,2)
(1327,1161,2)
(760,859,2)
(792,648,2)
(538,317,2)
(500,1058,2)
(1312,422,2)
(601,856,2)
(1131,406,2)
(885,905,2)
(357,1245,2)
(479,663,2)
(113,1255,2)
(850,317,2)
(565,239,2)
(1387,658,2)
(1154,953,2)
(327,688,2)
(1145,634,2)
(99,1265,2)
(357,129,2)
(590,747,2)
(407,194,2)
(1067,1006,2)
(368,269,2)
(254,1359,2)
(760,1323,2)
(318,717,2)
(197,717,2)
(1176,177,2)
(1021,214,2)
(1161,743,2)
(1259,634,2)
(652,177,2)
(1015,399,2)
(76,919,2)
(1401,228,2)
(760,1141,2)
(610,658,2)
(1230,792,2)
(984,1125,2)
(178,342,2)
(1272,1296,2)
(89,1149,2)
(976,317,2)
(970,177,2)
(256,513,2)
(26,780,2)
(552,703,2)
(34,717,2)
(136,177,2)
(792,1076,2)
(672,406,2)
(274,717,2)
(76,1081,2)
(1356,406,2)
(397,778,2)
(500,1264,2)
(985,717,2)
(686,680,2)
(565,106,2)
(629,1201,2)
(1224,1210,2)
(324,688,2)
(714,717,2)
(216,406,2)
(760,1245,2)
(883,954,2)
(443,1016,2)
(792,621,2)
(1374,406,2)
(709,634,2)
(753,83,2)
(20,680,2)
(594,680,2)
(352,717,2)
(624,1141,2)
(1137,531,2)
(1068,609,2)
(1326,467,2)
(569,588,2)
(1037,177,2)
(760,1273,2)
(267,634,2)
(500,663,2)
(202,406,2)
(18,591,2)
(772,634,2)
(1146,617,2)
(177,1352,2)
(1201,1201,2)
(99,1138,2)
(643,717,2)
(1309,656,2)
(867,579,2)
(200,1075,2)
(551,1002,2)
(252,467,2)
(624,1076,2)
(1068,1284,2)
(1129,1359,2)
(1173,59,2)
(293,1110,2)
(734,303,2)
(1362,885,2)
(1198,743,2)
(1326,908,2)
(840,824,2)
(880,1220,2)
(934,1161,2)
(698,1072,2)
(1,743,2)
(431,1014,2)
(1105,634,2)
(89,1248,2)
(79,163,2)
(357,40,2)
(777,680,2)
(321,1279,2)
(615,254,2)
(357,278,2)
(99,1248,2)
(1380,1394,2)
(827,743,2)
(84,743,2)
(1239,634,2)
(240,1385,2)
(965,92,2)
(1366,970,2)
(563,1352,2)
(792,547,2)
(919,660,2)
(718,717,2)
(310,634,2)
(1154,1062,2)
(1137,648,2)
(1326,634,2)
(859,212,2)
(109,717,2)
(304,658,2)
(532,634,2)
(1224,772,2)
(1394,632,2)
(446,480,2)
(1308,1318,2)
(494,856,2)
(835,680,2)
(6,717,2)
(1154,531,2)
(76,672,2)
(624,1094,2)
(1137,1103,2)
(194,194,2)
(25,660,2)
(792,1273,2)
(562,1075,2)
(555,1318,2)
(1066,177,2)
(55,1201,2)
(108,406,2)
(1011,254,2)
(212,717,2)
(375,717,2)
(1152,477,2)
(763,477,2)
(518,317,2)
(445,82,2)
(593,194,2)
(99,1295,2)
(1230,110,2)
(217,743,2)
(1191,717,2)
(214,703,2)
(956,513,2)
(760,903,2)
(1371,1220,2)
(1154,787,2)
(939,659,2)
(787,680,2)
(624,197,2)
(955,743,2)
(74,717,2)
(727,688,2)
(95,215,2)
(807,847,2)
(832,1205,2)
(1160,239,2)
(1363,1015,2)
(1300,970,2)
(1244,1340,2)
(818,842,2)
(154,717,2)
(478,717,2)
(99,556,2)
(162,1401,2)
(792,1107,2)
(1137,1149,2)
(216,1220,2)
(76,222,2)
(1224,197,2)
(1208,480,2)
(511,239,2)
(479,382,2)
(1063,634,2)
(565,422,2)
(690,1318,2)
(565,1075,2)
(99,902,2)
(496,743,2)
(1395,743,2)
(1016,634,2)
(76,129,2)
(1261,539,2)
(415,1220,2)
(1137,1107,2)
(966,1352,2)
(381,701,2)
(1285,1201,2)
(1245,688,2)
(357,197,2)
(743,177,2)
(1002,1098,2)
(770,717,2)
(110,406,2)
(796,817,2)
(792,531,2)
(1182,1161,2)
(730,717,2)
(326,615,2)
(662,400,2)
(1002,717,2)
(1366,1006,2)
(19,385,2)
(692,717,2)
(676,743,2)
(37,717,2)
(1224,859,2)
(89,1265,2)
(519,696,2)
(540,634,2)
(624,1245,2)
(1287,680,2)
(235,908,2)
(252,632,2)
(1224,1149,2)
(710,513,2)
(1224,1062,2)
(832,406,2)
(99,1058,2)
(647,317,2)
(1307,106,2)
(529,703,2)
(99,772,2)
(479,919,2)
(389,1352,2)
(1343,177,2)
(591,1252,2)
(1137,1295,2)
(479,531,2)
(299,1277,2)
(640,92,2)
(114,634,2)
(1220,1234,2)
(535,1193,2)
(778,475,2)
(76,798,2)
(1375,505,2)
(839,1318,2)
(472,579,2)
(760,1191,2)
(365,680,2)
(736,557,2)
(1367,1201,2)
(624,1264,2)
(564,717,2)
(160,717,2)
(1152,239,2)
(1154,1117,2)
(292,190,2)
(1149,177,2)
(445,177,2)
(241,965,2)
(1137,1062,2)
(1043,104,2)
(479,1295,2)
(36,1114,2)
(967,643,2)
(881,897,2)
(792,382,2)
(985,149,2)
(137,743,2)
(792,173,2)
(1137,749,2)
(940,1299,2)
(1072,634,2)
(411,717,2)
(531,177,2)
(792,1290,2)
(76,1094,2)
(412,406,2)
(76,531,2)
(557,634,2)
(1189,494,2)
(453,1114,2)
(175,177,2)
(1324,406,2)
(1372,239,2)
(1131,58,2)
(1254,1220,2)
(792,744,2)
(479,787,2)
(1366,1005,2)
(522,717,2)
(80,717,2)
(273,239,2)
(76,244,2)
(962,1088,2)
(1258,1075,2)
(1009,1394,2)
(357,1058,2)
(1109,680,2)
(479,648,2)
(700,951,2)
(314,743,2)
(343,1077,2)
(99,1117,2)
(794,721,2)
(1071,177,2)
(97,658,2)
(56,1075,2)
(796,303,2)
(71,239,2)
(1044,688,2)
(405,743,2)
(1134,990,2)
(49,519,2)
(725,721,2)
(624,787,2)
(587,239,2)
(760,1076,2)
(89,1117,2)
(1012,194,2)
(1362,1394,2)
(89,1264,2)
(877,717,2)
(1224,1265,2)
(879,518,2)
(382,406,2)
(1224,1076,2)
(693,1201,2)
(504,658,2)
(734,1201,2)
(257,856,2)
(1154,764,2)
(479,953,2)
(640,406,2)
(1251,177,2)
(1154,1081,2)
(500,222,2)
(865,743,2)
(479,903,2)
(500,1151,2)
(792,672,2)
(753,717,2)
(830,680,2)
(1353,717,2)
(395,703,2)
(1250,177,2)
(1317,467,2)
(357,798,2)
(1218,1296,2)
(1299,1199,2)
(1401,1346,2)
(792,87,2)
(491,717,2)
(357,875,2)
(366,743,2)
(756,634,2)
(590,406,2)
(381,406,2)
(569,747,2)
(953,688,2)
(99,324,2)
(447,660,2)
(1219,12,2)
(357,531,2)
(930,177,2)
(1154,919,2)
(698,551,2)
(814,1277,2)
(624,859,2)
(500,559,2)
(793,427,2)
(353,717,2)
(356,406,2)
(701,634,2)
(1146,717,2)
(500,1265,2)
(481,397,2)
(231,778,2)
(805,206,2)
(1177,680,2)
(565,703,2)
(232,422,2)
(295,239,2)
(420,1340,2)
(1154,1076,2)
(214,990,2)
(159,406,2)
(1264,406,2)
(159,717,2)
(1398,406,2)
(184,703,2)
(76,1062,2)
(579,1352,2)
(500,953,2)
(906,743,2)
(936,239,2)
(727,1201,2)
(1137,772,2)
(500,798,2)
(1152,1015,2)
(89,1245,2)
(1090,632,2)
(116,717,2)
(631,969,2)
(881,406,2)
(748,477,2)
(658,519,2)
(715,717,2)
(735,1021,2)
(1152,1258,2)
(792,559,2)
(624,1021,2)
(1098,717,2)
(76,1076,2)
(1152,743,2)
(99,559,2)
(92,415,2)
(1029,177,2)
(27,717,2)
(1268,430,2)
(617,717,2)
(792,1258,2)
(437,956,2)
(1090,467,2)
(680,177,2)
(804,1072,2)
(443,154,2)
(1021,703,2)
(1137,953,2)
(832,1072,2)
(710,1318,2)
(704,1305,2)
(1304,743,2)
(892,743,2)
(1137,1138,2)
(998,1304,2)
(1319,1280,2)
(480,1129,2)
(967,717,2)
(1309,897,2)
(1137,1145,2)
(89,903,2)
(89,1330,2)
(1021,296,2)
(792,513,2)
(713,717,2)
(946,1277,2)
(345,551,2)
(1268,406,2)
(479,981,2)
(1006,1122,2)
(224,1015,2)
(99,547,2)
(924,610,2)
(878,735,2)
(226,717,2)
(112,1156,2)
(479,1248,2)
(187,163,2)
(790,283,2)
(697,102,2)
(76,559,2)
(1273,406,2)
(826,1120,2)
(344,1088,2)
(357,1094,2)
(1156,614,2)
(1061,106,2)
(1395,1101,2)
(1137,173,2)
(500,981,2)
(2,703,2)
(492,634,2)
(279,658,2)
(218,658,2)
(453,696,2)
(202,929,2)
(1151,634,2)
(675,1075,2)
(519,1114,2)
(624,1210,2)
(802,406,2)
(1340,446,2)
(440,1258,2)
(941,717,2)
(500,324,2)
(48,1201,2)
(677,856,2)
(489,406,2)
(357,648,2)
(427,430,2)
(991,820,2)
(1081,688,2)
(962,406,2)
(1149,660,2)
(99,222,2)
(1326,1006,2)
(479,1149,2)
(1007,680,2)
(1254,406,2)
(500,356,2)
(648,717,2)
(517,721,2)
(99,798,2)
(357,244,2)
(99,531,2)
(568,1352,2)
(831,634,2)
(1341,254,2)
(108,80,2)
(1169,717,2)
(500,1149,2)
(749,406,2)
(1110,108,2)
(500,764,2)
(1224,1141,2)
(408,1015,2)
(1400,510,2)
(313,450,2)
(206,473,2)
(162,281,2)
(1137,672,2)
(1133,177,2)
(792,1081,2)
(1378,856,2)
(76,382,2)
(902,680,2)
(1154,222,2)
(1061,634,2)
(567,680,2)
(89,919,2)
(1043,905,2)
(110,1005,2)
(230,1299,2)
(962,666,2)
(1224,902,2)
(1129,1341,2)
(1006,230,2)
(767,634,2)
(760,953,2)
(431,624,2)
(609,1319,2)
(195,897,2)
(624,1273,2)
(1045,1146,2)
(996,743,2)
(475,717,2)
(1037,310,2)
(1248,406,2)
(874,634,2)
(83,954,2)
(792,1295,2)
(1316,1134,2)
(760,324,2)
(855,177,2)
(1182,1239,2)
(873,239,2)
(0,61,2)
(466,717,2)
(111,1319,2)
(792,759,2)
(509,1088,2)
(829,717,2)
(363,717,2)
(89,787,2)
(1137,87,2)
(814,569,2)
(122,97,2)
(1196,317,2)
(357,556,2)
(643,1159,2)
(1302,1110,2)
(1216,634,2)
(230,178,2)
(719,717,2)
(124,856,2)
(479,759,2)
(808,1394,2)
(99,40,2)
(624,953,2)
(500,447,2)
(476,557,2)
(471,717,2)
(906,406,2)
(357,485,2)
(824,422,2)
(939,1030,2)
(76,1107,2)
(479,556,2)
(1326,743,2)
(1337,610,2)
(1181,1359,2)
(832,477,2)
(1224,1323,2)
(501,1,2)
(792,327,2)
(450,814,2)
(549,239,2)
(789,1352,2)
(792,908,2)
(377,519,2)
(344,666,2)
(357,1149,2)
(624,356,2)
(166,588,2)
(1316,315,2)
(1003,717,2)
(624,1062,2)
(500,1062,2)
(99,672,2)
(624,387,2)
(121,743,2)
(1356,628,2)
(354,406,2)
(667,239,2)
(1288,1340,2)
(1219,177,2)
(624,559,2)
(792,703,2)
(244,680,2)
(91,1318,2)
(1317,632,2)
(964,862,2)
(201,680,2)
(576,824,2)
(1061,477,2)
(151,997,2)
(674,656,2)
(1172,177,2)
(673,1140,2)
(1139,743,2)
(630,1120,2)
(962,1042,2)
(913,163,2)
(624,875,2)
(1224,244,2)
(1048,1258,2)
(760,531,2)
(473,406,2)
(1214,92,2)
(1296,906,2)
(648,226,2)
(926,717,2)
(761,717,2)
(1224,981,2)
(982,929,2)
(76,772,2)
(76,1330,2)
(38,717,2)
(357,1304,2)
(1061,908,2)
(1131,239,2)
(858,177,2)
(99,1264,2)
(184,60,2)
(1154,875,2)
(1154,1149,2)
(76,759,2)
(852,239,2)
(44,1152,2)
(655,384,2)
(1361,1052,2)
(46,1277,2)
(127,542,2)
(104,177,2)
(400,824,2)
(605,743,2)
(498,1352,2)
(233,743,2)
(769,856,2)
(1354,680,2)
(1094,717,2)
(659,717,2)
(876,384,2)
(67,721,2)
(669,1352,2)
(588,695,2)
(107,897,2)
(1107,688,2)
(1137,1141,2)
(733,1277,2)
(1154,1151,2)
(102,450,2)
(479,1141,2)
(439,177,2)
(516,717,2)
(871,1340,2)
(760,648,2)
(749,634,2)
(1134,579,2)
(432,717,2)
(76,717,2)
(1266,269,2)
(982,406,2)
(357,222,2)
(1348,450,2)
(1096,358,2)
(565,1006,2)
(864,680,2)
(862,1088,2)
(431,406,2)
(162,507,2)
(802,1385,2)
(99,859,2)
(76,356,2)
(357,1117,2)
(202,701,2)
(1131,701,2)
(1315,317,2)
(1398,588,2)
(792,787,2)
(1061,1258,2)
(140,680,2)
(470,1152,2)
(818,717,2)
(1393,634,2)
(871,660,2)
(726,677,2)
(248,717,2)
(1254,917,2)
(680,680,2)
(1200,717,2)
(99,663,2)
(357,1290,2)
(411,856,2)
(1137,1264,2)
(1235,717,2)
(388,717,2)
(959,177,2)
(696,103,2)
(1295,717,2)
(1152,658,2)
(1081,717,2)
(1154,798,2)
(615,1319,2)
(462,634,2)
(1224,1117,2)
(206,239,2)
(1392,601,2)
(347,908,2)
(903,717,2)
(1313,717,2)
(457,717,2)
(654,355,2)
(1284,163,2)
(368,1160,2)
(1137,244,2)
(173,406,2)
(434,703,2)
(12,177,2)
(624,764,2)
(538,647,2)
(760,919,2)
(1146,85,2)
(223,670,2)
(1154,902,2)
(881,628,2)
(802,177,2)
(1137,1081,2)
(337,1201,2)
(896,890,2)
(479,1245,2)
(1289,1033,2)
(1294,717,2)
(624,1138,2)
(112,793,2)
(1174,634,2)
(1142,406,2)
(233,1,2)
(790,680,2)
(792,244,2)
(357,354,2)
(624,772,2)
(3,703,2)
(517,990,2)
(608,513,2)
(380,954,2)
(1258,910,2)
(794,254,2)
(278,92,2)
(870,104,2)
(412,239,2)
(908,1258,2)
(788,717,2)
(699,856,2)
(792,634,2)
(338,1005,2)
(381,929,2)
(1171,1205,2)
(1154,1264,2)
(971,106,2)
(1137,197,2)
(425,743,2)
(1224,387,2)
(1326,1400,2)
(1331,977,2)
(357,1103,2)
(593,513,2)
(180,422,2)
(99,1103,2)
(1326,239,2)
(760,129,2)
(1325,908,2)
(1197,239,2)
(479,1265,2)
(1061,703,2)
(479,1062,2)
(9,1359,2)
(95,467,2)
(1389,212,2)
(357,1070,2)
(89,1103,2)
(70,177,2)
(357,1081,2)
(216,754,2)
(76,1245,2)
(1331,477,2)
(1103,847,2)
(578,634,2)
(624,447,2)
(1074,956,2)
(585,92,2)
(1373,1201,2)
(415,743,2)
(870,660,2)
(551,717,2)
(364,717,2)
(76,1323,2)
(1042,880,2)
(479,1076,2)
(760,356,2)
(604,140,2)
(809,1359,2)
(624,324,2)
(792,935,2)
(544,212,2)
(1101,216,2)
(89,382,2)
(89,798,2)
(500,1191,2)
(840,1268,2)
(1152,1006,2)
(1224,1107,2)
(476,1395,2)
(932,1015,2)
(1026,1258,2)
(161,804,2)
(154,984,2)
(1154,356,2)
(99,787,2)
(1377,1005,2)
(1093,660,2)
(199,717,2)
(1125,856,2)
(480,163,2)
(903,406,2)
(760,902,2)
(1000,1037,2)
(263,717,2)
(760,1138,2)
(150,908,2)
(1005,1356,2)
(628,944,2)
(731,1201,2)
(646,1258,2)
(357,764,2)
(1299,1005,2)
(982,701,2)
(1154,87,2)
(1142,897,2)
(1122,661,2)
(696,717,2)
(168,717,2)
(962,450,2)
(89,129,2)
(703,223,2)
(792,356,2)
(227,177,2)
(500,1330,2)
(1295,406,2)
(768,847,2)
(1070,1110,2)
(822,263,2)
(980,177,2)
(161,239,2)
(216,743,2)
(89,953,2)
(1385,634,2)
(772,406,2)
(19,194,2)
(458,1318,2)
(1347,190,2)
(1104,969,2)
(823,177,2)
(1020,717,2)
(880,1137,2)
(99,903,2)
(376,519,2)
(361,717,2)
(792,1210,2)
(859,660,2)
(1267,136,2)
(1044,1304,2)
(968,1344,2)
(800,1289,2)
(862,1042,2)
(750,1299,2)
(1330,177,2)
(338,632,2)
(1326,477,2)
(500,382,2)
(820,124,2)
(792,177,2)
(862,239,2)
(944,656,2)
(811,847,2)
(624,749,2)
(61,739,2)
(221,1340,2)
(210,317,2)
(58,431,2)
(1333,467,2)
(76,787,2)
(777,1108,2)
(213,717,2)
(792,324,2)
(222,406,2)
(633,1394,2)
(1335,25,2)
(30,632,2)
(500,1076,2)
(88,856,2)
(500,1295,2)
(500,244,2)
(99,1330,2)
(1084,1394,2)
(905,1291,2)
(203,1005,2)
(792,1058,2)
(1298,1229,2)
(1224,798,2)
(792,278,2)
(1224,1330,2)
(1171,106,2)
(1137,40,2)
(1004,467,2)
(760,875,2)
(663,680,2)
(739,406,2)
(1168,658,2)
(1264,717,2)
(216,917,2)
(1311,317,2)
(165,587,2)
(353,406,2)
(624,1081,2)
(1117,406,2)
(484,743,2)
(509,406,2)
(1224,919,2)
(868,630,2)
(357,1107,2)
(89,764,2)
(1400,778,2)
(938,194,2)
(423,717,2)
(1137,222,2)
(929,717,2)
(179,717,2)
(107,406,2)
(307,743,2)
(1221,743,2)
(1296,743,2)
(76,903,2)
(624,531,2)
(825,1000,2)
(517,1352,2)
(744,406,2)
(579,1390,2)
(645,634,2)
(1386,1394,2)
(357,672,2)
(1037,700,2)
(354,1229,2)
(1199,1366,2)
(673,1131,2)
(624,1103,2)
(1191,159,2)
(1383,384,2)
(89,902,2)
(1229,345,2)
(581,317,2)
(300,1277,2)
(890,660,2)
(588,1161,2)
(733,1279,2)
(89,1151,2)
(1041,1280,2)
(1253,680,2)
(1154,1191,2)
(565,634,2)
(792,903,2)
(776,1394,2)
(872,717,2)
(565,1015,2)
(500,1107,2)
(357,1151,2)
(209,717,2)
(672,177,2)
(1234,88,2)
(506,136,2)
(844,177,2)
(760,663,2)
(748,406,2)
(1124,743,2)
(370,1318,2)
(139,177,2)
(1154,1103,2)
(602,654,2)
(89,981,2)
(131,717,2)
(479,1264,2)
(500,1117,2)
(357,787,2)
(254,725,2)
(479,1107,2)
(443,1309,2)
(1224,749,2)
(624,1265,2)
(240,406,2)
(621,660,2)
(1079,239,2)
(1271,106,2)
(206,403,2)
(1224,1248,2)
(1226,239,2)
(148,1005,2)
(380,1193,2)
(357,382,2)
(89,1295,2)
(384,743,2)
(127,856,2)
(1129,1068,2)
(883,1326,2)
(1371,1137,2)
(691,190,2)
(894,513,2)
(222,717,2)
(473,1088,2)
(835,177,2)
(624,1330,2)
(502,717,2)
(792,764,2)
(1082,1394,2)
(357,871,2)
(792,919,2)
(76,447,2)
(981,688,2)
(814,982,2)
(792,317,2)
(565,519,2)
(495,897,2)
(205,656,2)
(1068,163,2)
(1154,324,2)
(1154,759,2)
(915,1160,2)
(1108,680,2)
(703,579,2)
(1061,658,2)
(442,450,2)
(402,177,2)
(184,184,2)
(872,818,2)
(123,1068,2)
(939,743,2)
(792,1141,2)
(1202,717,2)
(76,1058,2)
(500,1245,2)
(1390,1352,2)
(87,406,2)
(357,796,2)
(1359,1068,2)
(215,632,2)
(173,1110,2)
(182,743,2)
(357,1265,2)
(357,559,2)
(792,1044,2)
(253,317,2)
(68,717,2)
(1154,981,2)
(281,1280,2)
(479,447,2)
(1224,40,2)
(247,1209,2)
(1206,177,2)
(236,422,2)
(760,764,2)
(845,717,2)
(550,1318,2)
(1152,519,2)
(594,177,2)
(76,547,2)
(748,1279,2)
(698,406,2)
(816,721,2)
(76,1141,2)
(1154,1094,2)
(400,422,2)
(89,1210,2)
(1054,239,2)
(579,96,2)
(792,447,2)
(479,1210,2)
(244,1000,2)
(1093,422,2)
(259,400,2)
(468,717,2)
(565,1400,2)
(624,556,2)
(1061,239,2)
(319,721,2)
(163,1402,2)
(1257,239,2)
(601,212,2)
(330,634,2)
(1210,177,2)
(170,717,2)
(612,104,2)
(653,680,2)
(76,40,2)
(847,717,2)
(348,1161,2)
(1078,680,2)
(1170,106,2)
(489,929,2)
(725,1319,2)
(85,495,2)
(1265,634,2)
(1064,717,2)
(406,600,2)
(1152,634,2)
(1184,856,2)
(387,680,2)
(393,1075,2)
(355,212,2)
(1316,579,2)
(479,40,2)
(161,964,2)
(561,680,2)
(1079,1123,2)
(97,406,2)
(1154,772,2)
(203,1006,2)
(1277,344,2)
(613,897,2)
(1284,721,2)
(792,197,2)
(1094,353,2)
(479,324,2)
(792,922,2)
(1220,717,2)
(1154,244,2)
(106,1398,2)
(240,1352,2)
(479,772,2)
(1137,1248,2)
(863,743,2)
(163,1280,2)
(565,743,2)
(1031,177,2)
(760,1081,2)
(687,317,2)
(415,754,2)
(591,1334,2)
(252,970,2)
(441,717,2)
(964,239,2)
(545,92,2)
(479,559,2)
(1164,1005,2)
(1253,721,2)
(604,680,2)
(1224,764,2)
(1147,1229,2)
(1332,358,2)
(1359,287,2)
(479,717,2)
(89,547,2)
(1055,450,2)
(988,717,2)
(1354,67,2)
(792,348,2)
(110,632,2)
(1137,1272,2)
(1154,749,2)
(1043,660,2)
(357,663,2)
(1061,513,2)
(362,717,2)
(89,1081,2)
(490,422,2)
(739,929,2)
(1371,450,2)
(797,274,2)
(135,212,2)
(1322,1006,2)
(1385,114,2)
(792,1265,2)
(854,1042,2)
(875,660,2)
(348,406,2)
(1263,703,2)
(1143,239,2)
(661,406,2)
(1233,680,2)
(357,902,2)
(1061,1075,2)
(1171,1072,2)
(795,165,2)
(437,194,2)
(1401,156,2)
(513,905,2)
(961,1385,2)
(624,1058,2)
(1321,847,2)
(802,680,2)
(1111,92,2)
(1275,445,2)
(979,1168,2)
(1152,177,2)
(1141,688,2)
(708,969,2)
(965,1145,2)
(250,92,2)
(1299,342,2)
(1326,1015,2)
(1224,903,2)
(500,717,2)
(194,956,2)
(792,1006,2)
(534,1064,2)
(1290,406,2)
(1137,556,2)
(333,634,2)
(670,579,2)
(539,1318,2)
(166,747,2)
(89,531,2)
(1186,777,2)
(1334,1065,2)
(1183,610,2)
(898,717,2)
(1155,1280,2)
(171,358,2)
(624,981,2)
(12,406,2)
(61,748,2)
(473,666,2)
(769,717,2)
(825,680,2)
(624,222,2)
(1043,1299,2)
(1137,1117,2)
(1340,743,2)
(1332,1096,2)
(1224,222,2)
(879,317,2)
(282,1229,2)
(278,406,2)
(1326,1258,2)
(36,1201,2)
(374,400,2)
(826,721,2)
(143,177,2)
(1179,743,2)
(760,1094,2)
(1225,717,2)
(792,485,2)
(1070,406,2)
(856,177,2)
(624,1323,2)
(99,1273,2)
(437,954,2)
(624,919,2)
(147,743,2)
(474,1005,2)
(868,228,2)
(1138,406,2)
(556,1352,2)
(621,1318,2)
(1368,422,2)
(1402,721,2)
(314,721,2)
(632,422,2)
(1261,1324,2)
(1274,717,2)
(99,129,2)
(288,450,2)
(961,743,2)
(665,477,2)
(204,680,2)
(192,717,2)
(211,422,2)
(1058,406,2)
(226,406,2)
(868,84,2)
(760,1248,2)
(283,177,2)
(217,1,2)
(899,177,2)
(1093,970,2)
(64,628,2)
(555,1300,2)
(786,743,2)
(476,1229,2)
(332,743,2)
(668,194,2)
(110,1299,2)
(99,1323,2)
(828,717,2)
(239,477,2)
(812,717,2)
(1305,1146,2)
(927,743,2)
(47,513,2)
(76,663,2)
(1193,632,2)
(792,796,2)
(738,177,2)
(1234,717,2)
(1350,539,2)
(17,194,2)
(1142,422,2)
(89,749,2)
(1064,856,2)
(103,717,2)
(760,547,2)
(64,406,2)
(654,660,2)
(1326,519,2)
(1346,634,2)
(61,477,2)
(1150,1318,2)
(834,717,2)
(1106,717,2)
(89,772,2)
(133,519,2)
(741,743,2)
(1305,856,2)
(591,239,2)
(587,406,2)
(1061,1015,2)
(1154,1248,2)
(1224,1094,2)
(968,717,2)
(922,1340,2)
(1344,717,2)
(1103,660,2)
(1141,717,2)
(1137,356,2)
(942,634,2)
(755,317,2)
(1053,163,2)
(1019,177,2)
(1224,324,2)
(1206,680,2)
(782,1258,2)
(1154,717,2)
(792,953,2)
(1015,1318,2)
(986,177,2)
(96,1352,2)
(617,430,2)
(1224,559,2)
(929,116,2)
(449,61,2)
(1402,1280,2)
(969,509,2)
(519,1400,2)
(1199,1006,2)
(48,303,2)
(321,406,2)
(1137,1245,2)
(1369,1318,2)
(357,547,2)
(1352,634,2)
(358,121,2)
(479,387,2)
(854,666,2)
(1065,634,2)
(747,1189,2)
(89,87,2)
(36,696,2)
(153,162,2)
(202,58,2)
(223,579,2)
(64,897,2)
(977,280,2)
(651,1359,2)
(76,648,2)
(339,1299,2)
(612,660,2)
(26,1299,2)
(733,1014,2)
(889,717,2)
(158,634,2)
(495,406,2)
(262,680,2)
(792,1272,2)
(1291,370,2)
(479,902,2)
(99,759,2)
(1154,547,2)
(783,743,2)
(792,1151,2)
(1344,856,2)
(1365,822,2)
(297,1201,2)
(1137,1330,2)
(479,197,2)
(1137,1273,2)
(632,1093,2)
(1005,1394,2)
(76,749,2)
(1154,1265,2)
(609,721,2)
(944,1296,2)
(467,1362,2)
(25,1286,2)
(1137,1323,2)
(1120,84,2)
(726,717,2)
(252,1286,2)
(684,717,2)
(911,1110,2)
(31,177,2)
(1186,825,2)
(613,406,2)
(997,1394,2)
(695,1161,2)
(102,698,2)
(1077,856,2)
(1093,1286,2)
(510,634,2)
(431,80,2)
(140,283,2)
(431,1279,2)
(334,1394,2)
(124,1,2)
(1396,1299,2)
(89,324,2)
(995,477,2)
(1222,1318,2)
(1304,453,2)
(1335,513,2)
(880,754,2)
(760,382,2)
(176,703,2)
(813,1184,2)
(695,202,2)
(40,406,2)
(518,406,2)
(1154,663,2)
(99,244,2)
(260,717,2)
(357,919,2)
(1286,1318,2)
(817,688,2)
(1192,721,2)
(1184,717,2)
(760,759,2)
(803,477,2)
(1178,1352,2)
(1004,215,2)
(479,1273,2)
(547,634,2)
(477,1171,2)
(884,177,2)
(295,406,2)
(624,1110,2)
(465,239,2)
(792,1015,2)
(1137,902,2)
(1342,1280,2)
(1341,1359,2)
(565,908,2)
(1047,177,2)
(792,859,2)
(1079,1239,2)
(99,875,2)
(1137,1210,2)
(479,1323,2)
(287,1319,2)
(185,680,2)
(959,680,2)
(988,248,2)
(87,634,2)
(537,634,2)
(479,1191,2)
(1015,513,2)
(893,717,2)
(856,1275,2)
(477,106,2)
(815,384,2)
(422,908,2)
(1152,422,2)
(1390,517,2)
(550,513,2)
(1340,281,2)
(166,106,2)
(1275,177,2)
(76,1265,2)
(1117,717,2)
(1321,362,2)
(760,798,2)
(1152,317,2)
(1224,953,2)
(469,717,2)
(1152,908,2)
(1278,743,2)
(443,656,2)
(83,717,2)
(552,990,2)
(736,406,2)
(682,358,2)
(556,406,2)
(256,194,2)
(799,680,2)
(505,317,2)
(1131,929,2)
(907,177,2)
(616,680,2)
(624,663,2)
(252,660,2)
(832,551,2)
(488,743,2)
(113,212,2)
(670,721,2)
(661,1299,2)
(118,1075,2)
(860,1299,2)
(1052,406,2)
(231,510,2)
(1061,519,2)
(1224,759,2)
(792,1138,2)
(167,467,2)
(156,1332,2)
(792,106,2)
(1137,1151,2)
(781,717,2)
(26,195,2)
(42,743,2)
(733,406,2)
(424,634,2)
(1159,1378,2)
(357,1191,2)
(688,1219,2)
(760,197,2)
(1137,382,2)
(1173,717,2)
(346,1400,2)
(116,699,2)
(533,717,2)
(1318,368,2)
(792,902,2)
(1154,1323,2)
(1101,1136,2)
(565,1258,2)
(1372,406,2)
(637,634,2)
(695,1182,2)
(356,717,2)
(792,467,2)
(1392,212,2)
(198,177,2)
(1326,177,2)
(76,1273,2)
(539,107,2)
(624,1295,2)
(1056,400,2)
(500,903,2)
(1137,559,2)
(582,680,2)
(163,1319,2)
(792,1103,2)
(1137,787,2)
(975,717,2)
(1211,847,2)
(1375,317,2)
(144,177,2)
(1110,743,2)
(430,31,2)
(1137,981,2)
(1118,177,2)
(1137,1094,2)
(99,1191,2)
(357,1374,2)
(1366,660,2)
(764,717,2)
(707,634,2)
(448,634,2)
(122,658,2)
(688,177,2)
(89,222,2)
(1378,717,2)
(1154,40,2)
(1030,177,2)
(599,1161,2)
(624,759,2)
(792,477,2)
(381,239,2)
(99,356,2)
(89,244,2)
(666,534,2)
(76,764,2)
(819,680,2)
(357,327,2)
(933,177,2)
(89,759,2)
(1205,243,2)
(792,354,2)
(500,759,2)
(660,899,2)
(119,717,2)
(566,1326,2)
(357,173,2)
(275,717,2)
(1122,1299,2)
(854,406,2)
(1252,1079,2)
(1122,26,2)
(1159,717,2)
(1075,538,2)
(547,406,2)
(1203,717,2)
(723,1068,2)
(530,1110,2)
(862,666,2)
(1334,406,2)
(1215,717,2)
(243,476,2)
(163,163,2)
(117,717,2)
(816,703,2)
(635,162,2)
(792,1062,2)
(731,743,2)
(1223,467,2)
(813,717,2)
(453,397,2)
(22,680,2)
(105,1,2)
(1134,721,2)
(473,239,2)
(40,634,2)
(1187,717,2)
(1076,717,2)
(509,743,2)
(76,1248,2)
(387,1000,2)
(1085,717,2)
(595,908,2)
(723,721,2)
(523,177,2)
(357,1062,2)
(1192,1359,2)
(238,1258,2)
(174,634,2)
(277,194,2)
(760,1265,2)
(76,875,2)
(792,772,2)
(1382,177,2)
(1136,743,2)
(636,190,2)
(1227,400,2)
(385,437,2)
(479,672,2)
(1154,556,2)
(459,680,2)
(748,1014,2)
(1365,717,2)
(285,1068,2)
(99,919,2)
(792,519,2)
(1075,317,2)
(744,239,2)
(792,239,2)
(263,856,2)
(792,1191,2)
(760,244,2)
(1154,1058,2)
(479,1058,2)
(1318,239,2)
(912,717,2)
(1024,1400,2)
(1334,747,2)
(792,387,2)
(584,92,2)
(62,680,2)
(565,477,2)
(706,680,2)
(1061,467,2)
(703,1352,2)
(678,717,2)
(1126,1201,2)
(570,634,2)
(500,87,2)
(76,1117,2)
(624,296,2)
(89,1141,2)
(1137,92,2)
(1285,743,2)
(795,239,2)
-----------------------------------
(0,cp)
(1,!(ret = jas_tvparser_next(tvp)
(2,jas_eprintf("unsupported image type\\n")
(3,goto error;)
(4,cp)
(5,cp->tccp)
(6,tccp)
(7,cp)
(8,cblkwidthexpn)
(9,image)
(10,jas_tvparser_destroy(tvp)
(11,JPC_MCT_RCT)
(12,cp->tccp)
(13,prec)
(14,tccp)
(15,csty)
(16,image)
(17,ilyrrates)
(18,cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,\\n\\t  cp->tilewidth)
(19,tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i])
(20,sampgrdsubstepx)
(21,if (cp->tcp.numlyrs > 16384)
(22,0)
(23,cp)
(24,totalsize)
(25,tcp->numlyrs)
(26,(double)
(27,tccp)
(28,tilegrdoffy)
(29,)
(30,lyrno)
(31,jas_image_rawsize(image)
(32,if (!cp->tileheight)
(33,tilegrdoffy)
(34,tcp)
(35,"invalid code block width %d\\n")
(36,tccp->prcheightexpns[rlvlno] = prcheightexpn)
(37,tvp)
(38,tvp)
(39,)
(40,cp->ccps)
(41,if (!cp->tilewidth)
(42,refgrdwidth)
(43,refgrdwidth)
(44,jpc_enc_cp_destroy(cp)
(45,"invalid tile width %lu\\n")
(46,tilegrdoffx)
(47,i)
(48,++rlvlno)
(49,"invalid precinct height\\n")
(50,case OPT_ILYRRATES:)
(51,vsteplcm)
(52,tcp)
(53,totalsize)
(54,ccp)
(55,prcheightexpns)
(56,jas_eprintf("code block size too large\\n")
(57,tilegrdoffy)
(58,cp->tilegrdoffx = cp->imgareatlx)
(59,jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(60,jas_image_cmptvstep(image, cmptno)
(61,cp->tilegrdoffx > cp->imgareatlx)
(62,sampgrdstepx)
(63,case OPT_TILEHEIGHT:)
(64,cp->totalsize)
(65,)
(66,)
(67,jas_image_cmptvstep(image, cmptno)
(68,tccp)
(69,case OPT_NUMGBITS:)
(70,6)
(71,numhtiles)
(72,mctvalid)
(73,if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12)
(74,JPC_COD_SOP)
(75,if (cp)
(76,tccp->cblksty |= JPC_COX_TERMALL)
(77,)
(78,0)
(79,cmptno)
(80,cp->imgareatlx = atoi(jas_tvparser_getval(tvp)
(81,)
(82,const char *optstr)
(83,&ilyrrates)
(84,mctvalid)
(85,&cp->totalsize)
(86,case OPT_MODE:)
(87,cp->refgrdwidth)
(88,jas_tvparser_getval(tvp)
(89,tccp->cblksty |= JPC_COX_LAZY)
(90,case OPT_CBLKWIDTH:)
(91,1)
(92,cp->imgareatly == UINT_FAST32_MAX)
(93,)
(94,15)
(95,++lyrno)
(96,jas_image_brx(image)
(97,cp->tccp)
(98,prg)
(99,tccp->cblksty |= JPC_COX_PTERM)
(100,cp)
(101,cp = 0)
(102,cp->tilegrdoffy + cp->tileheight)
(103,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(104,tcp->ilyrrates = 0)
(105,ret)
(106,!cp->tilewidth)
(107,cp->totalsize)
(108,cp->imgareatlx)
(109,tccp)
(110,return cp;)
(111,++cmptno)
(112,jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)
(113,tagid == MODE_INT)
(114,jas_image_numcmpts(image)
(115,break;)
(116,atoi(jas_tvparser_getval(tvp)
(117,imgareatlx)
(118,tcp)
(119,JPC_COX_RESET)
(120,enablemct)
(121,mctvalid)
(122,cp->tccp.cblkwidthexpn)
(123,image)
(124,jas_tvparser_gettag(tvp)
(125,if (!cp->tileheight)
(126,cp)
(127,jas_tvparser_destroy(tvp)
(128,tvp)
(129,ccp->sampgrdstepy)
(130,case OPT_SOP:)
(131,numilyrrates)
(132,numilyrrates)
(133,cp->tccp)
(134,tcp)
(135,tcp)
(136,optstr)
(137,UINT_FAST32_MAX)
(138,tccp)
(139,0)
(140,jas_image_cmptsgnd(image, cmptno)
(141,jas_tvparser_getval(tvp)
(142,cblkwidthexpn)
(143,1)
(144,tccp->numgbits = 2)
(145,lyrno)
(146,prcwidthexpn)
(147,imgareatly)
(148,0)
(149,atoi(jas_tvparser_getval(tvp)
(150,jas_eprintf("must be at least one resolution level\\n")
(151,tcp->ilyrrates[lyrno + 1])
(152,if (vsteplcm != 1)
(153,"warning: color space apparently not RGB\\n")
(154,jp2overhead = atoi(jas_tvparser_getval(tvp)
(155,case OPT_CBLKHEIGHT:)
(156,jas_clrspc_fam(jas_image_clrspc(image)
(157,image)
(158,15)
(159,cp->tcp)
(160,tvp)
(161,JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,\\n\\t  cp->tileheight)
(162,mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(163,cmptno < jas_image_numcmpts(image)
(164,tileheight)
(165,cp->numhtiles * cp->numvtiles)
(166,cp->tilewidth)
(167,2)
(168,break;)
(169,cp)
(170,tagid)
(171,image)
(172,if (hsteplcm != 1)
(173,cp->imgareatlx)
(174,0)
(175,csty)
(176,"unsupported image type\\n")
(177,!(cp->ccps = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t)
(178,tcp->ilyrrates[lyrno])
(179,tccp->cblkheightexpn =\\n\\t\\t\\t  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(180,goto error;)
(181,)
(182,tilewidth)
(183,goto error;)
(184,vsteplcm *= jas_image_cmptvstep(image, cmptno)
(185,image)
(186,)
(187,cmptno)
(188,tccp)
(189,numgbits)
(190,cp->tccp.cblkwidthexpn < 2)
(191,cp)
(192,tileheight)
(193,refgrdwidth)
(194,i < JAS_CAST(int, tcp->numlyrs - 1)
(195,cp->totalsize)
(196,0)
(197,tccp->cblksty)
(198,cmptno)
(199,enablemct)
(200,numlyrs)
(201,cmptno)
(202,cp->tilegrdoffx)
(203,lyrno)
(204,cmptno)
(205,jp2overhead)
(206,(unsigned long)
(207,"invalid tile height %lu\\n")
(208,if (jpc_atoaf(jas_tvparser_getval(tvp)
(209,tvp)
(210,cp->tccp.cblkheightexpn)
(211,tcp)
(212,(tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(213,JPC_COX_TERMALL)
(214,jas_image_cmpthstep(image, cmptno)
(215,lyrno = 0)
(216,cp->imgareatly)
(217,ret = jas_tvparser_next(tvp)
(218,2)
(219,cp)
(220,jas_eprintf("too many layers\\n")
(221,JPC_MCT_NONE)
(222,cp->tilegrdoffx)
(223,jas_image_cmptbry(image, cmptno)
(224,goto error;)
(225,cp)
(226,cp->tccp)
(227,tcp->csty = 0)
(228,enablemct = false)
(229,false)
(230,jpc_fixtodbl(tcp->ilyrrates[lyrno])
(231,tccp->prcwidthexpns[rlvlno] = prcwidthexpn)
(232,cp)
(233,jas_tvparser_next(tvp)
(234,0)
(235,"must be at least one resolution level\\n")
(236,1)
(237,prcheightexpn)
(238,tccp)
(239,cp->tilegrdoffx > cp->imgareatlx ||\\n\\t  cp->tilegrdoffy > cp->imgareatly ||\\n\\t  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(240,cp->numcmpts)
(241,"warning: overriding imgareatly value\\n")
(242,)
(243,cp->refgrdheight - cp->tilegrdoffy)
(244,ccp->sampgrdstepx)
(245,ccps)
(246,cmptno)
(247,tccp->qmfbid = (tcp->intmode)
(248,jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(249,)
(250,vsteplcm)
(251,switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(252,tcp->numlyrs)
(253,cblkwidthexpn)
(254,jas_image_cmptwidth(image, cmptno)
(255,jas_eprintf("invalid precinct height\\n")
(256,1)
(257,jas_tvparser_getval(tvp)
(258,case OPT_NOMCT:)
(259,cp)
(260,break;)
(261,tccp)
(262,image)
(263,jas_tvparser_getval(tvp)
(264,prcheightexpn)
(265,case OPT_DEBUG:)
(266,0)
(267,hsteplcm)
(268,case OPT_IMGAREAOFFX:)
(269,numilyrrates = 0)
(270,if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)
(271,)
(272,cp)
(273,cp)
(274,jas_tvparser_getval(tvp)
(275,cp)
(276,tcp)
(277,int)
(278,cp->imgareatly)
(279,cp)
(280,unsigned long)
(281,mctvalid = true)
(282,cp)
(283,cmptno = 0)
(284,totalsize)
(285,image)
(286,case OPT_LAZY:)
(287,jas_image_cmptsgnd(image, cmptno)
(288,cp)
(289,"invalid precinct width\\n")
(290,cp)
(291,tccp->cblksty = 0)
(292,cp->tccp.cblkwidthexpn > 12)
(293,hsteplcm)
(294,cp)
(295,cp->numtiles)
(296,hsteplcm = 1)
(297,tccp)
(298,totalsize)
(299,cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(300,cp)
(301,)
(302,tvp)
(303,rlvlno = 0)
(304,cblkheightexpn)
(305,tileheight)
(306,)
(307,numcmpts)
(308,"warning: overriding imgareatlx value\\n")
(309,)
(310,cp->ccps = 0)
(311,jp2overhead)
(312,JPC_COX_INS)
(313,cp)
(314,jas_image_width(image)
(315,jas_image_cmptbry(image, cmptno)
(316,lyrno)
(317,cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12)
(318,tvp)
(319,jas_image_cmptbrx(image, cmptno)
(320,hsteplcm)
(321,cp->imgareatlx)
(322,cp)
(323,if (!cp->tilewidth)
(324,tccp->numgbits)
(325,if (ilyrrates && numilyrrates > 0)
(326,jas_image_cmptheight(image, cmptno)
(327,tccp->qmfbid)
(328,break;)
(329,cp)
(330,cp)
(331,)
(332,cp)
(333,0)
(334,tcp)
(335,cblksty)
(336,if (prcheightexpn > 15)
(337,prcheightexpn)
(338,cp)
(339,cp)
(340,goto error;)
(341,intmode)
(342,lyrno = 0)
(343,jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)
(344,cp->tilegrdoffy)
(345,cp->tileheight)
(346,15)
(347,cp->tccp.numgbits)
(348,cp->tilewidth)
(349,cp)
(350,"ignoring invalid mode %s\\n")
(351,if (cp->tilegrdoffy == UINT_FAST32_MAX)
(352,cblkheightexpn)
(353,cp->tcp)
(354,cp->tileheight)
(355,tcp->intmode = (tagid == MODE_INT)
(356,cp->imgareatlx)
(357,tccp->csty |= JPC_COX_PRT)
(358,enablemct)
(359,true)
(360,cp)
(361,cp)
(362,tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(363,break;)
(364,break;)
(365,ccp->sampgrdsubstepx = 0)
(366,cp->imgareatlx + jas_image_width(image)
(367,default:)
(368,numilyrrates > 0)
(369,ccp->sampgrdsubstepx = 0)
(370,sizeof(jpc_fix_t)
(371,case OPT_MAXRLVLS:)
(372,)
(373,debug)
(374,cp)
(375,cp)
(376,goto error;)
(377,cp->tccp.cblkwidthexpn)
(378,)
(379,)
(380,jas_free(ilyrrates)
(381,cp->tilegrdoffx)
(382,cp->totalsize)
(383,UINT_FAST32_MAX)
(384,cp->tilegrdoffx == UINT_FAST32_MAX)
(385,jpc_dbltofix(ilyrrates[i])
(386,rawsize)
(387,ccp->prec)
(388,break;)
(389,sizeof(jpc_enc_ccp_t)
(390,)
(391,cp)
(392,tvp)
(393,"code block size too large\\n")
(394,)
(395,image)
(396,tcp)
(397,prcwidthexpn != 15)
(398,UINT_FAST32_MAX)
(399,!cp->tcp.intmode)
(400,cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize)
(401,break;)
(402,csty)
(403,unsigned long)
(404,2)
(405,tccp)
(406,cp = jas_malloc(sizeof(jpc_enc_cp_t)
(407,tcp)
(408,15)
(409,if (!(tvp = jas_tvparser_create(optstr ? optstr : "")
(410,cp)
(411,jas_tvparser_getval(tvp)
(412,cp->numhtiles)
(413,tvp)
(414,tvp)
(415,cp->imgareatly)
(416,tvp)
(417,case OPT_IMGAREAOFFY:)
(418,if (ilyrrates)
(419,tcp)
(420,tcp->mctid = JPC_MCT_NONE)
(421,case OPT_SEGSYM:)
(422,cp->tccp.numgbits > 8)
(423,tilegrdoffx)
(424,UINT_FAST32_MAX)
(425,tileheight)
(426,case OPT_EPH:)
(427,cp->rawsize)
(428,break;)
(429,0)
(430,cp->rawsize = jas_image_rawsize(image)
(431,cp->imgareatlx)
(432,break;)
(433,if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12)
(434,cmptno)
(435,)
(436,image)
(437,ilyrrates[i])
(438,cp)
(439,image)
(440,1)
(441,tvp)
(442,tilegrdoffy)
(443,cp->totalsize - jp2overhead)
(444,8)
(445,optstr ? optstr : "")
(446,mctvalid = false)
(447,tcp->numlyrs)
(448,0)
(449,cp)
(450,cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx)
(451,if (cp->tccp.maxrlvls < 1)
(452,cblksty)
(453,prcheightexpn != 15)
(454,tvp)
(455,cp)
(456,JPC_COX_VSC)
(457,cblksty)
(458,1)
(459,++cmptno)
(460,)
(461,)
(462,cmptno)
(463,mctid)
(464,if (ilyrrates)
(465,cp)
(466,0)
(467,tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1])
(468,break;)
(469,cblksty)
(470,cp)
(471,cblkwidthexpn)
(472,image)
(473,cp->tilegrdoffy)
(474,lyrno)
(475,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(476,cp->refgrdheight)
(477,!cp->tileheight)
(478,JPC_COX_PTERM)
(479,tccp->cblksty |= JPC_COX_VSC)
(480,jas_image_cmptprec(image, cmptno)
(481,15)
(482,tccp)
(483,)
(484,imgareatlx)
(485,cp->tilegrdoffx)
(486,)
(487,if (cp->totalsize != UINT_FAST32_MAX)
(488,0)
(489,cp->tilegrdoffx)
(490,jas_eprintf("invalid number of guard bits\\n")
(491,modetab)
(492,1)
(493,numvtiles)
(494,jas_tvparser_getval(tvp)
(495,cp->totalsize)
(496,cp)
(497,0)
(498,image)
(499,lyrno)
(500,cp->tcp.csty |= JPC_COD_SOP)
(501,tvp)
(502,break;)
(503,if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize)
(504,cblkwidthexpn)
(505,JPC_POW2(cp->tccp.cblkheightexpn)
(506,"")
(507,mctvalid = false)
(508,tagid)
(509,cp->tilegrdoffy)
(510,prcwidthexpn = 15)
(511,cp)
(512,for (rlvlno = 0; rlvlno < tccp->maxrlvls; ++rlvlno)
(513,!(tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1)
(514,tccp)
(515,)
(516,break;)
(517,jas_image_cmpthstep(image, cmptno)
(518,cp->tccp)
(519,prcheightexpn > 15)
(520,qmfbid)
(521,cp)
(522,JPC_COX_SEGSYM)
(523,0)
(524,)
(525,cmptno)
(526,if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12)
(527,if (tvp)
(528,jas_eprintf("warning: overriding imgareatly value\\n")
(529,cmptno)
(530,imgareatlx)
(531,tcp->csty)
(532,cmptno)
(533,break;)
(534,atoi(jas_tvparser_getval(tvp)
(535,ilyrrates)
(536,tcp->intmode = true)
(537,prcheightexpn)
(538,cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn)
(539,cp->totalsize == UINT_FAST32_MAX)
(540,imgareatly)
(541,ilyrrates)
(542,tvp = 0)
(543,)
(544,tagid)
(545,imgareatly)
(546,)
(547,cp->tilegrdoffy)
(548,cp)
(549,tilegrdoffy)
(550,UINT_FAST32_MAX)
(551,cp->tileheight = atoi(jas_tvparser_getval(tvp)
(552,++cmptno)
(553,)
(554,jas_eprintf("warning: ignoring invalid option %s\\n",\\n\\t\\t\\t jas_tvparser_gettag(tvp)
(555,tcp->numlyrs - 1)
(556,cp->ccps)
(557,cp->refgrdheight = 0)
(558,tileheight)
(559,cp->refgrdheight)
(560,tvp)
(561,ccp)
(562,cp)
(563,numcmpts)
(564,totalsize)
(565,0)
(566,ilyrrates)
(567,stepsizes)
(568,cmptno)
(569,cp->tilewidth)
(570,0)
(571,cmptno)
(572,goto error;)
(573,)
(574,i)
(575,image)
(576,cp)
(577,goto error;)
(578,15)
(579,jas_image_cmptbrx(image, cmptno)
(580,tagid)
(581,tccp)
(582,ccp)
(583,cp)
(584,1)
(585,0)
(586,csty)
(587,cp->numvtiles)
(588,cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx)
(589,cp)
(590,cp->tilewidth)
(591,JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,\\n\\t  cp->tilewidth)
(592,0)
(593,i)
(594,cmptno)
(595,cp)
(596,break;)
(597,tvp)
(598,while (!(ret = jas_tvparser_next(tvp)
(599,cp)
(600,jas_malloc(sizeof(jpc_enc_cp_t)
(601,jas_tvparser_getval(tvp)
(602,JPC_MCT_ICT)
(603,if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(604,ccp->sgnd = jas_image_cmptsgnd(image, cmptno)
(605,cp)
(606,tvp)
(607,for (cmptno = 0; cmptno < jas_image_numcmpts(image)
(608,JAS_CAST(int, tcp->numlyrs - 1)
(609,jas_image_cmptprec(image, cmptno)
(610,cp->tccp.cblkheightexpn < 2)
(611,jp2overhead)
(612,tcp->ilyrrates)
(613,cp->totalsize)
(614,unsigned long)
(615,jas_image_cmptheight(image, cmptno)
(616,0)
(617,cp->rawsize)
(618,image)
(619,jp2overhead)
(620,)
(621,tcp->ilyrrates)
(622,0)
(623,prcwidthexpn)
(624,cp->imgareatlx *= hsteplcm)
(625,goto error;)
(626,vsteplcm)
(627,numhtiles)
(628,cp->totalsize = (cp->totalsize > jp2overhead)
(629,rlvlno)
(630,jas_clrspc_fam(jas_image_clrspc(image)
(631,cp)
(632,tcp->numlyrs > 1)
(633,1)
(634,!(cp = jas_malloc(sizeof(jpc_enc_cp_t)
(635,jas_eprintf("warning: color space apparently not RGB\\n")
(636,cp->tccp)
(637,cp)
(638,cmptno)
(639,UINT_FAST32_MAX)
(640,cp->imgareatly)
(641,"invalid tile grid offset (%lu, %lu)
(642,cp)
(643,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(644,tccp)
(645,0)
(646,cp->tccp.maxrlvls)
(647,cp->tccp.cblkwidthexpn)
(648,cp->tccp.numgbits)
(649,prcheightexpn)
(650,if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t)
(651,image)
(652,ccps)
(653,cmptno)
(654,tcp->intmode)
(655,imgareatlx)
(656,cp->totalsize > jp2overhead)
(657,0)
(658,cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12)
(659,tccp->maxrlvls = atoi(jas_tvparser_getval(tvp)
(660,tcp = &cp->tcp)
(661,cp->rawsize)
(662,rawsize)
(663,ccp->sampgrdsubstepx)
(664,unsigned long)
(665,tileheight)
(666,cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp)
(667,refgrdheight)
(668,i)
(669,cp)
(670,jas_image_bry(image)
(671,ilyrrates)
(672,cp->rawsize)
(673,(unsigned long)
(674,totalsize)
(675,goto error;)
(676,rlvlno)
(677,jas_tvparser_getval(tvp)
(678,cp)
(679,cp)
(680,cmptno < JAS_CAST(int, cp->numcmpts)
(681,)
(682,JAS_CLRSPC_FAM_RGB)
(683,)
(684,break;)
(685,if (cp->totalsize != UINT_FAST32_MAX)
(686,sampgrdstepy)
(687,cblkheightexpn)
(688,tccp = &cp->tccp)
(689,ilyrrates)
(690,numilyrrates + 1)
(691,cp)
(692,break;)
(693,rlvlno)
(694,numlyrs)
(695,cp->refgrdwidth - cp->tilegrdoffx)
(696,prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(697,cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(698,cp->tileheight)
(699,jas_tvparser_getval(tvp)
(700,cp->ccps = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t)
(701,cp->tilegrdoffx = UINT_FAST32_MAX)
(702,)
(703,jas_image_cmptbrx(image, cmptno)
(704,jas_eprintf("ignoring bad rate specifier %s\\n",\\n\\t\\t\\t\\t  jas_tvparser_getval(tvp)
(705,if (!(cp->ccps = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t)
(706,ccp->numstepsizes = 0)
(707,UINT_FAST32_MAX)
(708,imgareatly)
(709,goto error;)
(710,cp)
(711,cp)
(712,++ccp)
(713,0)
(714,tccp)
(715,prcheightexpn)
(716,0)
(717,jas_taginfo_nonull(jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(718,cp)
(719,cblksty)
(720,12)
(721,jas_image_t *image)
(722,tvp)
(723,jas_image_cmptsgnd(image, 0)
(724,numilyrrates)
(725,jas_image_cmptwidth(image, cmptno)
(726,jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(727,tccp->prcheightexpns)
(728,)
(729,if (tcp->numlyrs > 1)
(730,tvp)
(731,maxrlvls)
(732,case OPT_RATE:)
(733,cp->imgareatlx)
(734,tccp->prcheightexpns[rlvlno])
(735,hsteplcm != 1)
(736,cp->refgrdheight)
(737,cp)
(738,cblksty)
(739,cp->tilegrdoffx)
(740,JAS_CLRSPC_FAM_RGB)
(741,tvp)
(742,tcp)
(743,!(tvp = jas_tvparser_create(optstr ? optstr : "")
(744,cp->numhtiles)
(745,tilegrdoffy)
(746,)
(747,cp->tilewidth = atoi(jas_tvparser_getval(tvp)
(748,cp->imgareatlx)
(749,cp->debug)
(750,tcp)
(751,rlvlno)
(752,)
(753,jpc_atoaf(jas_tvparser_getval(tvp)
(754,cp->imgareatly = UINT_FAST32_MAX)
(755,cp)
(756,image)
(757,)
(758,tilegrdoffy)
(759,tccp->cblkwidthexpn)
(760,tccp->cblksty |= JPC_COX_RESET)
(761,"warning: ignoring invalid option %s\\n")
(762,tcp->mctid = (tcp->intmode)
(763,cp)
(764,tccp->cblksty)
(765,cp)
(766,break;)
(767,prcwidthexpn)
(768,tagid)
(769,jas_tvparser_gettag(tvp)
(770,tcp)
(771,totalsize)
(772,cp->numcmpts)
(773,prgordtab)
(774,jp2overhead)
(775,tccp)
(776,cp)
(777,sizeof(ccp->stepsizes)
(778,prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(779,lyrno)
(780,double)
(781,rawsize)
(782,maxrlvls)
(783,imgareatly)
(784,refgrdheight)
(785,if (cp->tccp.numgbits > 8)
(786,image)
(787,ccp->sampgrdsubstepx)
(788,cp)
(789,image)
(790,jas_image_cmptprec(image, cmptno)
(791,hsteplcm)
(792,return 0;)
(793,(unsigned long)
(794,jas_image_cmptheight(image, 0)
(795,cp->numtiles = cp->numhtiles * cp->numvtiles)
(796,tccp->prcwidthexpns[rlvlno])
(797,atoi(jas_tvparser_getval(tvp)
(798,tccp->cblkheightexpn)
(799,ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno)
(800,jas_eprintf("invalid tile width %lu\\n", (unsigned long)
(801,if (cp->imgareatly == UINT_FAST32_MAX)
(802,cp->numcmpts)
(803,imgareatlx)
(804,cp->tileheight)
(805,jas_eprintf("invalid tile grid offset (%lu, %lu)
(806,case OPT_VCAUSAL:)
(807,tvp)
(808,lyrno)
(809,cmptno)
(810,ccp)
(811,"ignoring invalid progression order %s\\n")
(812,break;)
(813,atoi(jas_tvparser_getval(tvp)
(814,cp->tilegrdoffx + cp->tilewidth)
(815,cp)
(816,jas_image_numcmpts(image)
(817,tccp->prcwidthexpns)
(818,atoi(jas_tvparser_getval(tvp)
(819,sgnd)
(820,jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(821,tilewidth)
(822,atoi(jas_tvparser_getval(tvp)
(823,tccp)
(824,cp->totalsize != UINT_FAST32_MAX)
(825,ccp->stepsizes)
(826,jas_image_clrspc(image)
(827,cp)
(828,cp)
(829,atoi(jas_tvparser_getval(tvp)
(830,0)
(831,cp)
(832,cp->tileheight)
(833,tvp)
(834,cblksty)
(835,JAS_CAST(int, cp->numcmpts)
(836,break;)
(837,case OPT_TILEGRDOFFX:)
(838,jpc_enc_cp_t)
(839,tcp->numlyrs)
(840,cp->totalsize > cp->rawsize)
(841,)
(842,jas_tvparser_getval(tvp)
(843,intmode)
(844,JPC_COD_LRCPPRG)
(845,imgareatly)
(846,break;)
(847,(tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(848,)
(849,)
(850,"invalid code block height %d\\n")
(851,ret)
(852,numvtiles)
(853,ccp)
(854,cp->tilegrdoffy)
(855,tcp)
(856,tvp = jas_tvparser_create(optstr ? optstr : "")
(857,tcp)
(858,maxrlvls)
(859,tcp->intmode)
(860,totalsize)
(861,case OPT_TILEWIDTH:)
(862,cp->tilegrdoffy)
(863,UINT_FAST32_MAX)
(864,ccp)
(865,3)
(866,16384)
(867,cmptno)
(868,enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(869,case OPT_PRCHEIGHT:)
(870,tcp->ilyrrates)
(871,tcp->mctid)
(872,cp->debug = atoi(jas_tvparser_getval(tvp)
(873,cp)
(874,ccps)
(875,tcp->intmode)
(876,tilegrdoffx)
(877,prcwidthexpn)
(878,jas_eprintf("warning: overriding imgareatlx value\\n")
(879,cp->tccp.cblkheightexpn)
(880,cp->imgareatly)
(881,cp->totalsize)
(882,cp)
(883,jas_free(ilyrrates)
(884,tcp)
(885,tcp->ilyrrates)
(886,break;)
(887,numcmpts)
(888,refgrdheight)
(889,id)
(890,tcp->intmode)
(891,cmptno)
(892,image)
(893,tvp)
(894,numlyrs)
(895,cp)
(896,JPC_COX_RFT)
(897,cp->totalsize = UINT_FAST32_MAX)
(898,break;)
(899,&cp->tcp)
(900,vsteplcm)
(901,tvp)
(902,ccp->numstepsizes)
(903,cp->imgareatly)
(904,imgareatlx)
(905,tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1)
(906,cp->totalsize)
(907,6)
(908,cp->tccp.maxrlvls < 1)
(909,)
(910,cp->tcp.numlyrs)
(911,0)
(912,tvp)
(913,image)
(914,cp)
(915,0)
(916,tcp)
(917,cp->imgareatly = 0)
(918,tilegrdoffx)
(919,tcp->prg)
(920,UINT_FAST32_MAX)
(921,cp->tcp)
(922,tcp->mctid)
(923,)
(924,cp->tccp.cblkheightexpn > 12)
(925,tccp)
(926,numgbits)
(927,cp)
(928,enablemct)
(929,cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp)
(930,cp)
(931,totalsize)
(932,jas_eprintf("cannot use real mode for lossless coding\\n")
(933,tcp)
(934,cp)
(935,cp->tilegrdoffy)
(936,tilegrdoffx)
(937,cmptno)
(938,ilyrrates)
(939,tccp->maxrlvls)
(940,cp)
(941,cp)
(942,cp->debug = 0)
(943,goto error;)
(944,(cp->totalsize > jp2overhead)
(945,ccp)
(946,cp->tilegrdoffy > cp->imgareatly ||\\n\\t  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(947,case OPT_TERMALL:)
(948,cp)
(949,if (prcwidthexpn > 15)
(950,tilewidth)
(951,jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t)
(952,cp)
(953,tccp->maxrlvls)
(954,ilyrrates = 0)
(955,rlvlno)
(956,i = 0)
(957,UINT_FAST32_MAX)
(958,numtiles)
(959,int)
(960,tccp)
(961,cp->numcmpts)
(962,cp->tilegrdoffy)
(963,1)
(964,cp->refgrdheight - cp->tilegrdoffy)
(965,vsteplcm != 1)
(966,image)
(967,tccp->cblkwidthexpn =\\n\\t\\t\\t  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(968,atoi(jas_tvparser_getval(tvp)
(969,cp->tilegrdoffy == UINT_FAST32_MAX)
(970,tcp->numlyrs = 1)
(971,cp)
(972,)
(973,MODE_INT)
(974,tileheight)
(975,csty)
(976,cblkheightexpn)
(977,(unsigned long)
(978,cp)
(979,jas_eprintf("invalid code block width %d\\n",\\n\\t\\t  JPC_POW2(cp->tccp.cblkwidthexpn)
(980,0)
(981,tccp->maxrlvls)
(982,cp->tilegrdoffx)
(983,tilegrdoffy)
(984,atoi(jas_tvparser_getval(tvp)
(985,cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp)
(986,cp)
(987,)
(988,jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(989,tvp)
(990,cmptno = 0)
(991,jas_taginfo_nonull(jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(992,ccp)
(993,cp)
(994,false)
(995,cp)
(996,tvp = 0)
(997,lyrno + 1)
(998,JPC_COX_PRT)
(999,id)
(1000,ccp = cp->ccps)
(1001,if (!(tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1)
(1002,atoi(jas_tvparser_getval(tvp)
(1003,tvp)
(1004,lyrno + 2)
(1005,cp->totalsize != UINT_FAST32_MAX)
(1006,jpc_fixtodbl(tcp->ilyrrates[lyrno])
(1007,ccp)
(1008,mctid)
(1009,tcp)
(1010,)
(1011,image)
(1012,i)
(1013,if (prcwidthexpn != 15 || prcheightexpn != 15)
(1014,cp->imgareatlx = 0)
(1015,cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)
(1016,jp2overhead = 0)
(1017,tccp)
(1018,tvp)
(1019,tccp->cblkwidthexpn = 6)
(1020,cp)
(1021,hsteplcm *= jas_image_cmpthstep(image, cmptno)
(1022,totalsize)
(1023,goto error;)
(1024,jas_eprintf("invalid precinct width\\n")
(1025,prcwidthexpn)
(1026,goto error;)
(1027,jas_tvparser_getval(tvp)
(1028,case OPT_TILEGRDOFFY:)
(1029,numlyrs)
(1030,tccp->maxrlvls = 6)
(1031,6)
(1032,imgareatlx)
(1033,unsigned long)
(1034,sizeof(jpc_enc_cp_t)
(1035,)
(1036,encopts)
(1037,cp->ccps)
(1038,jas_eprintf("ignoring invalid progression order %s\\n",\\n\\t\\t\\t\\t  jas_tvparser_getval(tvp)
(1039,cp)
(1040,for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts)
(1041,mctvalid)
(1042,cp->tilegrdoffy = cp->imgareatly)
(1043,tcp->ilyrrates)
(1044,tccp->csty)
(1045,"ignoring bad rate specifier %s\\n")
(1046,)
(1047,goto error;)
(1048,"too many layers\\n")
(1049,cblkwidthexpn)
(1050,if (cp->numcmpts == 3)
(1051,cmptno)
(1052,cp->tccp)
(1053,0)
(1054,cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,\\n\\t  cp->tileheight)
(1055,cp)
(1056,totalsize)
(1057,cmptno)
(1058,cp->tilegrdoffx)
(1059,12)
(1060,image)
(1061,tvp)
(1062,tccp->cblksty)
(1063,tilewidth)
(1064,jas_tvparser_getval(tvp)
(1065,cp->tilewidth = 0)
(1066,rawsize)
(1067,jas_eprintf("warning: intermediate layer rates must be less than overall rate\\n")
(1068,jas_image_cmptprec(image, cmptno)
(1069,ccp)
(1070,cp->imgareatlx)
(1071,tccp)
(1072,cp->tileheight = 0)
(1073,tccp)
(1074,tcp->ilyrrates[i])
(1075,cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12)
(1076,tccp->cblksty)
(1077,jas_tvparser_getval(tvp)
(1078,ccp)
(1079,cp->refgrdwidth)
(1080,tccp)
(1081,tccp->cblkwidthexpn)
(1082,ilyrrates)
(1083,lyrno)
(1084,totalsize)
(1085,debug)
(1086,)
(1087,tccp)
(1088,cp->tilegrdoffy = UINT_FAST32_MAX)
(1089,if (cp->tilegrdoffx == UINT_FAST32_MAX)
(1090,tcp)
(1091,numilyrrates)
(1092,cblkheightexpn)
(1093,tcp->numlyrs)
(1094,cp->tcp.csty)
(1095,if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(1096,jas_image_clrspc(image)
(1097,ilyrrates)
(1098,jas_tvparser_getval(tvp)
(1099,)
(1100,"warning: invalid intermediate layer rates specifier ignored (%s)
(1101,cp->imgareatly + jas_image_height(image)
(1102,0)
(1103,tcp->prg)
(1104,tilegrdoffy)
(1105,tilegrdoffx)
(1106,tvp)
(1107,tccp->cblksty)
(1108,ccp->stepsizes)
(1109,ccp)
(1110,cp->imgareatlx == UINT_FAST32_MAX)
(1111,imgareatly)
(1112,tcp)
(1113,12)
(1114,prcheightexpn = 15)
(1115,)
(1116,tccp)
(1117,cp->debug)
(1118,0)
(1119,tccp)
(1120,enablemct)
(1121,)
(1122,((double)
(1123,cp->refgrdwidth = cp->imgareatlx + jas_image_width(image)
(1124,UINT_FAST32_MAX)
(1125,jas_tvparser_getval(tvp)
(1126,prcwidthexpn)
(1127,imgareatlx)
(1128,tilegrdoffx)
(1129,jas_image_cmptsgnd(image, cmptno)
(1130,if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1131,cp->tilegrdoffx)
(1132,image)
(1133,cp)
(1134,jas_image_cmptvstep(image, cmptno)
(1135,id)
(1136,jas_image_height(image)
(1137,cp->imgareatly *= vsteplcm)
(1138,cp->tileheight)
(1139,tilewidth)
(1140,unsigned long)
(1141,tccp->cblkheightexpn)
(1142,cp->totalsize)
(1143,cp)
(1144,2)
(1145,vsteplcm = 1)
(1146,ratestrtosize(jas_tvparser_getval(tvp)
(1147,tileheight)
(1148,)
(1149,tcp->ilyrrates)
(1150,jpc_fix_t)
(1151,cp->imgareatlx)
(1152,cp)
(1153,if (cp->imgareatlx == UINT_FAST32_MAX)
(1154,cp->tcp.csty |= JPC_COD_EPH)
(1155,true)
(1156,(unsigned long)
(1157,++i)
(1158,numilyrrates)
(1159,atoi(jas_tvparser_getval(tvp)
(1160,ilyrrates)
(1161,!cp->tilewidth)
(1162,mctvalid)
(1163,cp)
(1164,numlyrs)
(1165,imgareatlx)
(1166,tvp)
(1167,cp)
(1168,JPC_POW2(cp->tccp.cblkwidthexpn)
(1169,tilewidth)
(1170,tilewidth)
(1171,cp->tileheight)
(1172,cblkheightexpn)
(1173,jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1174,cp)
(1175,jas_eprintf("intermediate layer rates must increase monotonically\\n")
(1176,ilyrrates)
(1177,sampgrdsubstepx)
(1178,jpc_enc_ccp_t)
(1179,tilegrdoffx)
(1180,if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1])
(1181,0)
(1182,cp->refgrdwidth)
(1183,cp->tccp)
(1184,jas_tvparser_getval(tvp)
(1185,)
(1186,memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes)
(1187,tccp)
(1188,cp)
(1189,atoi(jas_tvparser_getval(tvp)
(1190,0)
(1191,cp->tcp.csty)
(1192,jas_image_cmptwidth(image, 0)
(1193,ilyrrates)
(1194,numstepsizes)
(1195,)
(1196,tccp)
(1197,cp)
(1198,cp)
(1199,tcp->numlyrs - 1)
(1200,JPC_COD_EPH)
(1201,rlvlno < tccp->maxrlvls)
(1202,break;)
(1203,tvp)
(1204,numcmpts)
(1205,cp->tileheight = cp->refgrdheight - cp->tilegrdoffy)
(1206,cp)
(1207,if (jas_image_cmptprec(image, cmptno)
(1208,false)
(1209,(tcp->intmode)
(1210,tccp->csty)
(1211,prg)
(1212,cp)
(1213,cp)
(1214,cp)
(1215,maxrlvls)
(1216,true)
(1217,case OPT_JP2OVERHEAD:)
(1218,cp)
(1219,&cp->tccp)
(1220,cp->imgareatly = atoi(jas_tvparser_getval(tvp)
(1221,intmode)
(1222,tcp)
(1223,"intermediate layer rates must increase monotonically\\n")
(1224,tccp->cblksty |= JPC_COX_SEGSYM)
(1225,jas_tvparser_getval(tvp)
(1226,cp)
(1227,"warning: specified rate is unreasonably large (%lu > %lu)
(1228,)
(1229,!cp->tileheight)
(1230,RET)
(1231,numgbits)
(1232,cp)
(1233,ccp->prec = jas_image_cmptprec(image, cmptno)
(1234,atoi(jas_tvparser_getval(tvp)
(1235,jas_tvparser_getval(tvp)
(1236,if (cp->tilegrdoffx > cp->imgareatlx ||\\n\\t  cp->tilegrdoffy > cp->imgareatly ||\\n\\t  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(1237,for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno)
(1238,vsteplcm)
(1239,cp->refgrdwidth = 0)
(1240,goto error;)
(1241,if (jpc_fixtodbl(tcp->ilyrrates[lyrno])
(1242,refgrdwidth)
(1243,image)
(1244,(tcp->intmode)
(1245,tccp->cblksty)
(1246,cmptno)
(1247,rlvlno)
(1248,cp->imgareatly)
(1249,0)
(1250,tccp->cblkheightexpn = 6)
(1251,tccp)
(1252,cp->refgrdwidth - cp->tilegrdoffx)
(1253,jas_image_cmpthstep(image, cmptno)
(1254,cp->imgareatly)
(1255,tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1256,if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1257,tilegrdoffx)
(1258,cp->tcp.numlyrs > 16384)
(1259,0)
(1260,intmode)
(1261,cp->tcp.intmode)
(1262,case OPT_PTERM:)
(1263,image)
(1264,cp->tilegrdoffy)
(1265,cp->tilewidth)
(1266,&numilyrrates)
(1267,optstr)
(1268,cp->rawsize)
(1269,stepsizes)
(1270,case OPT_RESET:)
(1271,cp)
(1272,cp->totalsize)
(1273,cp->tilewidth)
(1274,break;)
(1275,jas_tvparser_create(optstr ? optstr : "")
(1276,case OPT_PRCWIDTH:)
(1277,cp->tilegrdoffy > cp->imgareatly)
(1278,cp)
(1279,cp->imgareatlx = UINT_FAST32_MAX)
(1280,cp->numcmpts == 3)
(1281,cp)
(1282,UINT_FAST32_MAX)
(1283,jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1284,jas_image_cmptprec(image, 0)
(1285,tccp)
(1286,tcp->numlyrs = numilyrrates + 1)
(1287,image)
(1288,tcp)
(1289,(unsigned long)
(1290,cp->refgrdwidth)
(1291,jas_alloc2((tcp->numlyrs - 1)
(1292,break;)
(1293,tccp)
(1294,ilyrrates)
(1295,cp->tileheight)
(1296,cp->totalsize != UINT_FAST32_MAX)
(1297,tccp->csty = 0)
(1298,refgrdheight)
(1299,lyrno < tcp->numlyrs - 1)
(1300,tcp->numlyrs)
(1301,jas_clrspc_fam(jas_image_clrspc(image)
(1302,hsteplcm)
(1303,)
(1304,prcwidthexpn != 15 || prcheightexpn != 15)
(1305,jas_tvparser_getval(tvp)
(1306,)
(1307,goto error;)
(1308,numlyrs)
(1309,cp->totalsize)
(1310,tcp)
(1311,cp->tccp)
(1312,"invalid number of guard bits\\n")
(1313,break;)
(1314,)
(1315,cp->tccp)
(1316,jas_image_cmptbry(image, cmptno)
(1317,lyrno)
(1318,ilyrrates && numilyrrates > 0)
(1319,cmptno = 0)
(1320,mctvalid)
(1321,tcp->prg = tagid)
(1322,++lyrno)
(1323,ccp->sgnd)
(1324,cp->tcp)
(1325,cp->tccp)
(1326,ilyrrates)
(1327,tilewidth)
(1328,1)
(1329,if (jas_image_cmptbrx(image, cmptno)
(1330,tccp->cblksty)
(1331,jas_eprintf("invalid tile height %lu\\n", (unsigned long)
(1332,jas_clrspc_fam(jas_image_clrspc(image)
(1333,numlyrs)
(1334,cp->tilewidth)
(1335,tcp->numlyrs - 1)
(1336,)
(1337,cp->tccp.cblkheightexpn)
(1338,cp)
(1339,i)
(1340,mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(1341,jas_image_cmptwidth(image, cmptno)
(1342,cmptno)
(1343,cp->tcp)
(1344,jas_tvparser_getval(tvp)
(1345,for (cmptno = 0; cmptno < jas_image_numcmpts(image)
(1346,enablemct = true)
(1347,cp->tccp.cblkwidthexpn)
(1348,imgareatly)
(1349,JPC_COX_LAZY)
(1350,tcp)
(1351,tcp)
(1352,cmptno < jas_image_numcmpts(image)
(1353,break;)
(1354,ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno)
(1355,0)
(1356,cp->totalsize)
(1357,goto error;)
(1358,for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1)
(1359,jas_image_cmptsgnd(image, cmptno)
(1360,for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno)
(1361,cp->tccp.cblkheightexpn)
(1362,tcp->ilyrrates[lyrno])
(1363,"cannot use real mode for lossless coding\\n")
(1364,tccp)
(1365,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(1366,tcp->numlyrs)
(1367,tccp)
(1368,numlyrs)
(1369,tcp)
(1370,)
(1371,cp->imgareatly)
(1372,cp->numvtiles)
(1373,prcwidthexpns)
(1374,cp->refgrdheight)
(1375,jas_eprintf("invalid code block height %d\\n",\\n\\t\\t  JPC_POW2(cp->tccp.cblkheightexpn)
(1376,case OPT_PRG:)
(1377,1)
(1378,jas_tvparser_getval(tvp)
(1379,cp)
(1380,ilyrrates)
(1381,"warning: intermediate layer rates must be less than overall rate\\n")
(1382,tcp)
(1383,cp)
(1384,tcp->prg = JPC_COD_LRCPPRG)
(1385,cp->numcmpts = jas_image_numcmpts(image)
(1386,UINT_FAST32_MAX)
(1387,cp)
(1388,goto error;)
(1389,intmode)
(1390,jas_image_cmptbrx(image, cmptno)
(1391,error:)
(1392,jas_eprintf("ignoring invalid mode %s\\n",\\n\\t\\t\\t\\t  jas_tvparser_getval(tvp)
(1393,0)
(1394,lyrno + 2 < tcp->numlyrs)
(1395,cp->refgrdheight = cp->imgareatly + jas_image_height(image)
(1396,rawsize)
(1397,cp)
(1398,cp->tilewidth)
(1399,imgareatly)
(1400,prcwidthexpn > 15)
(1401,enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(1402,jas_image_numcmpts(image)
(1403,if (ratestrtosize(jas_tvparser_getval(tvp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
