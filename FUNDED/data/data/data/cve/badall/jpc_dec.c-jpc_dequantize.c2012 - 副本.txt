-----label-----
1
-----code-----
static void jpc_dequantize(jas_matrix_t *x, jpc_fix_t absstepsize)
{
	int i;
	int j;
	int t;

	assert(absstepsize >= 0);
	if (absstepsize == jpc_inttofix(1)) {
		return;
	}

	for (i = 0; i < jas_matrix_numrows(x); ++i) {
		for (j = 0; j < jas_matrix_numcols(x); ++j) {
			t = jas_matrix_get(x, i, j);
			if (t) {
				t = jpc_fix_mul(t, absstepsize);
			} else {
				t = 0;
			}
			jas_matrix_set(x, i, j, t);
		}
	}

}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
16,19
16,20
16,21
16,22
17,18
18,19
18,20
20,21
22,23
23,24
23,25
25,26
27,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
40,41
40,42
41,42
41,43
42,43
44,45
44,46
45,46
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
59,60
59,61
60,61
62,63
64,65
65,66
67,68
68,69
68,70
68,71
68,72
69,70
70,71
70,72
71,72
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
83,84
85,86
85,87
85,88
86,87
87,88
87,89
88,89
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
99,100
99,101
99,102
100,101
102,103
103,104
104,105
104,106
105,106
107,108
107,109
107,110
108,109
110,111
112,113
114,115
115,116
116,117
116,118
117,118
120,121
121,122
121,123
121,124
121,125
121,126
122,123
124,125
126,127
128,129
130,131
-----nextToken-----
2,4,7,9,10,13,15,19,21,24,26,29,31,35,38,39,43,46,47,49,54,55,58,61,63,66,72,73,76,79,81,84,89,92,94,96,98,101,106,109,111,113,118,119,123,125,127,129,131
-----computeFrom-----
36,37
36,38
41,42
41,43
52,53
52,54
56,57
56,58
70,71
70,72
74,75
74,76
87,88
87,89
104,105
104,106
116,117
116,118
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void jpc_dequantize(jas_matrix_t *x, jpc_fix_t absstepsize){	int i;	int j;	int t;	assert(absstepsize >= 0);	if (absstepsize == jpc_inttofix(1)) {		return;	}	for (i = 0; i < jas_matrix_numrows(x); ++i) {		for (j = 0; j < jas_matrix_numcols(x); ++j) {			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}	}}
static void
jpc_dequantize(jas_matrix_t *x, jpc_fix_t absstepsize)
jpc_dequantize
jas_matrix_t *x
jas_matrix_t
jas_matrix_t
*x
*
x
jpc_fix_t absstepsize
jpc_fix_t
jpc_fix_t
absstepsize
absstepsize
{	int i;	int j;	int t;	assert(absstepsize >= 0);	if (absstepsize == jpc_inttofix(1)) {		return;	}	for (i = 0; i < jas_matrix_numrows(x); ++i) {		for (j = 0; j < jas_matrix_numcols(x); ++j) {			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}	}}
int i;
int i;
int
i
i
int j;
int j;
int
j
j
int t;
int t;
int
t
t
assert(absstepsize >= 0);
assert(absstepsize >= 0)
assert
assert
absstepsize >= 0
absstepsize
absstepsize
0
if (absstepsize == jpc_inttofix(1)) {		return;	}
absstepsize == jpc_inttofix(1)
absstepsize
absstepsize
jpc_inttofix(1)
jpc_inttofix
jpc_inttofix
1
{		return;	}
return;
for (i = 0; i < jas_matrix_numrows(x); ++i) {		for (j = 0; j < jas_matrix_numcols(x); ++j) {			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}	}
i = 0;
i = 0
i
i
0
i < jas_matrix_numrows(x)
i
i
jas_matrix_numrows(x)
jas_matrix_numrows
jas_matrix_numrows
x
x
++i
i
i
{		for (j = 0; j < jas_matrix_numcols(x); ++j) {			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}	}
for (j = 0; j < jas_matrix_numcols(x); ++j) {			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}
j = 0;
j = 0
j
j
0
j < jas_matrix_numcols(x)
j
j
jas_matrix_numcols(x)
jas_matrix_numcols
jas_matrix_numcols
x
x
++j
j
j
{			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}
t = jas_matrix_get(x, i, j);
t = jas_matrix_get(x, i, j)
t
t
jas_matrix_get(x, i, j)
jas_matrix_get
jas_matrix_get
x
x
i
i
j
j
if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}
t
t
{				t = jpc_fix_mul(t, absstepsize);			}
t = jpc_fix_mul(t, absstepsize);
t = jpc_fix_mul(t, absstepsize)
t
t
jpc_fix_mul(t, absstepsize)
jpc_fix_mul
jpc_fix_mul
t
t
absstepsize
absstepsize
{				t = 0;			}
t = 0;
t = 0
t
t
0
jas_matrix_set(x, i, j, t);
jas_matrix_set(x, i, j, t)
jas_matrix_set
jas_matrix_set
x
x
i
i
j
j
t
t
-----joern-----
(41,17,0)
(52,8,0)
(53,48,0)
(50,43,0)
(48,53,0)
(7,43,0)
(54,58,0)
(22,41,0)
(47,57,0)
(38,0,0)
(43,15,0)
(58,46,0)
(26,42,0)
(23,31,0)
(21,3,0)
(11,42,0)
(31,39,0)
(59,47,0)
(28,42,0)
(41,22,0)
(57,47,0)
(58,56,0)
(56,58,0)
(25,61,0)
(5,42,0)
(57,37,0)
(3,40,0)
(20,21,0)
(9,28,0)
(22,37,0)
(37,22,0)
(17,53,0)
(18,46,0)
(34,8,0)
(49,26,0)
(0,8,0)
(45,28,0)
(44,8,0)
(12,51,0)
(51,42,0)
(41,61,0)
(16,48,0)
(33,26,0)
(28,47,0)
(6,8,0)
(27,17,0)
(17,40,0)
(43,60,0)
(36,57,0)
(56,8,0)
(26,56,0)
(29,42,0)
(3,15,0)
(30,8,0)
(19,29,0)
(53,8,0)
(0,31,0)
(3,21,0)
(32,53,0)
(43,42,0)
(51,57,0)
(17,41,0)
(15,55,0)
(31,0,0)
(61,1,0)
(22,1,0)
(57,51,0)
(47,28,0)
(2,22,0)
(46,1,0)
(37,57,0)
(13,46,0)
(40,3,0)
(21,0,0)
(40,17,0)
(46,58,0)
(61,41,0)
(15,3,0)
(4,37,0)
(14,61,0)
(10,51,0)
(48,39,0)
(35,56,0)
(42,5,1)
(31,23,1)
(48,16,1)
(61,1,1)
(58,46,1)
(41,61,1)
(29,19,1)
(11,56,1)
(41,22,1)
(49,33,1)
(26,42,1)
(5,11,1)
(46,13,1)
(7,50,1)
(46,1,1)
(20,43,1)
(43,7,1)
(31,39,1)
(14,27,1)
(2,61,1)
(25,14,1)
(28,45,1)
(47,59,1)
(54,46,1)
(26,49,1)
(4,2,1)
(53,48,1)
(58,54,1)
(21,20,1)
(17,53,1)
(57,51,1)
(57,36,1)
(28,42,1)
(37,57,1)
(0,31,1)
(13,18,1)
(24,26,1)
(3,21,1)
(18,35,1)
(57,47,1)
(16,32,1)
(59,28,1)
(51,42,1)
(33,42,1)
(61,25,1)
(21,0,1)
(9,51,1)
(50,26,1)
(26,56,1)
(38,53,1)
(22,37,1)
(36,51,1)
(17,41,1)
(48,39,1)
(45,9,1)
(47,28,1)
(27,21,1)
(56,58,1)
(40,17,1)
(35,0,1)
(10,12,1)
(3,40,1)
(23,38,1)
(15,3,1)
(43,60,1)
(29,42,1)
(51,10,1)
(43,42,1)
(19,15,1)
(33,29,1)
(22,1,1)
(12,4,1)
(4,26,2)
(57,26,2)
(51,26,2)
(12,26,2)
(33,26,2)
(15,3,2)
(36,51,2)
(22,1,2)
(15,26,2)
(40,26,2)
(9,51,2)
(43,26,2)
(17,53,2)
(37,57,2)
(41,22,2)
(17,41,2)
(22,37,2)
(61,1,2)
(59,51,2)
(26,56,2)
(48,39,2)
(14,26,2)
(41,26,2)
(47,51,2)
(22,26,2)
(25,26,2)
(50,26,2)
(41,61,2)
(27,26,2)
(57,47,2)
(46,1,2)
(43,42,2)
(3,26,2)
(21,26,2)
(29,42,2)
(28,42,2)
(0,31,2)
(10,26,2)
(40,17,2)
(58,46,2)
(17,26,2)
(3,40,2)
(7,26,2)
(47,28,2)
(45,51,2)
(37,26,2)
(56,58,2)
(20,26,2)
(53,48,2)
(49,26,2)
(57,51,2)
(31,39,2)
(26,26,2)
(29,26,2)
(21,0,2)
(43,60,2)
(26,42,2)
(28,51,2)
(3,21,2)
(51,42,2)
(61,26,2)
(2,26,2)
(19,26,2)
-----------------------------------
(0,mant = JPC_QCX_GETMANT(refstepsize)
(1,int numrlvls)
(2,numrlvls)
(3,JPC_QCX_MANT(mant)
(4,1)
(5,0)
(6,numbands)
(7,bandno)
(8,)
(9,bandno)
(10,0)
(11,bandno)
(12,bandno)
(13,numrlvls)
(14,numrlvls)
(15,stepsizes[bandno] = JPC_QCX_MANT(mant)
(16,refstepsize)
(17,expn +\\n\\t\\t  (numrlvls - 1)
(18,3)
(19,bandno)
(20,mant)
(21,JPC_QCX_MANT(mant)
(22,numrlvls - 1 - ((bandno > 0)
(23,refstepsize)
(24,RET)
(25,1)
(26,bandno < numbands)
(27,expn)
(28,bandno + 2)
(29,++bandno)
(30,mant)
(31,JPC_QCX_GETMANT(refstepsize)
(32,expn)
(33,bandno)
(34,expn)
(35,numbands)
(36,0)
(37,1 - ((bandno > 0)
(38,mant)
(39,uint_fast16_t refstepsize)
(40,JPC_QCX_EXPN(expn +\\n\\t\\t  (numrlvls - 1)
(41,(numrlvls - 1)
(42,bandno = 0)
(43,stepsizes[bandno])
(44,bandno)
(45,2)
(46,3 * numrlvls)
(47,(bandno + 2)
(48,JPC_QCX_GETEXPN(refstepsize)
(49,numbands)
(50,stepsizes)
(51,bandno > 0)
(52,for (bandno = 0; bandno < numbands; ++bandno)
(53,expn = JPC_QCX_GETEXPN(refstepsize)
(54,2)
(55,)
(56,numbands = 3 * numrlvls - 2)
(57,(bandno > 0)
(58,3 * numrlvls - 2)
(59,3)
(60,uint_fast16_t *stepsizes)
(61,numrlvls - 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
