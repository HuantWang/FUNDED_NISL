-----label-----
1
-----code-----
static tmsize_t
multiply_ms(tmsize_t m1, tmsize_t m2)
{
	tmsize_t bytes = m1 * m2;

	if (m1 && bytes / m1 != m2)
		bytes = 0;

	return bytes;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
7,8
9,10
11,12
11,13
12,13
14,15
16,17
16,18
16,19
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
41,42
42,43
42,44
43,44
46,47
47,48
-----nextToken-----
3,5,8,10,13,15,20,22,26,28,32,36,38,40,44,45,48
-----computeFrom-----
24,25
24,26
30,31
30,32
33,34
33,35
34,35
34,36
42,43
42,44
-----guardedBy-----
36,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static tmsize_tmultiply_ms(tmsize_t m1, tmsize_t m2){	tmsize_t bytes = m1 * m2;	if (m1 && bytes / m1 != m2)		bytes = 0;	return bytes;}
static tmsize_t
tmsize_t
multiply_ms(tmsize_t m1, tmsize_t m2)
multiply_ms
tmsize_t m1
tmsize_t
tmsize_t
m1
m1
tmsize_t m2
tmsize_t
tmsize_t
m2
m2
{	tmsize_t bytes = m1 * m2;	if (m1 && bytes / m1 != m2)		bytes = 0;	return bytes;}
tmsize_t bytes = m1 * m2;
tmsize_t bytes = m1 * m2;
tmsize_t
tmsize_t
bytes = m1 * m2
bytes
= m1 * m2
m1 * m2
m1
m1
m2
m2
if (m1 && bytes / m1 != m2)		bytes = 0;
m1 && bytes / m1 != m2
m1
m1
bytes / m1 != m2
bytes / m1
bytes
bytes
m1
m1
m2
m2
bytes = 0;
bytes = 0
bytes
bytes
0
return bytes;
bytes
bytes
-----joern-----
(10,9,0)
(15,0,0)
(22,19,0)
(16,12,0)
(19,9,0)
(19,12,0)
(3,18,0)
(12,19,0)
(18,20,0)
(17,18,0)
(0,19,0)
(13,0,0)
(6,5,0)
(1,6,0)
(0,20,0)
(21,9,0)
(0,3,0)
(4,5,0)
(8,12,0)
(6,19,0)
(11,5,0)
(3,14,0)
(2,6,0)
(18,3,0)
(7,3,0)
(6,9,0)
(12,20,0)
(3,0,0)
(12,14,0)
(8,16,1)
(3,7,1)
(7,0,1)
(0,20,1)
(15,13,1)
(2,5,1)
(18,17,1)
(12,20,1)
(0,15,1)
(13,17,1)
(16,22,1)
(17,19,1)
(6,5,1)
(12,14,1)
(6,19,1)
(18,3,1)
(5,11,1)
(3,14,1)
(2,18,1)
(4,18,1)
(6,2,1)
(18,20,1)
(3,0,1)
(1,6,1)
(11,4,1)
(0,19,1)
(19,12,1)
(12,8,1)
(19,12,2)
(11,18,2)
(18,3,2)
(0,19,2)
(12,20,2)
(3,0,2)
(13,17,2)
(6,5,2)
(0,17,2)
(3,17,2)
(15,17,2)
(6,19,2)
(18,20,2)
(0,20,2)
(4,18,2)
(5,18,2)
(1,6,2)
(7,17,2)
(3,14,2)
(12,14,2)
-----------------------------------
(0,bytes / m1)
(1,RET)
(2,bytes)
(3,bytes / m1 != m2)
(4,bytes)
(5,bytes = 0)
(6,return bytes;)
(7,m2)
(8,m2)
(9,)
(10,if (m1 && bytes / m1 != m2)
(11,0)
(12,m1 * m2)
(13,bytes)
(14,tmsize_t m2)
(15,m1)
(16,m1)
(17,m1)
(18,m1 && bytes / m1 != m2)
(19,bytes = m1 * m2)
(20,tmsize_t m1)
(21,bytes)
(22,bytes)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
