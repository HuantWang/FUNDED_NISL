-----label-----
1
-----code-----
static int
TIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff)
{
	static const char module[] = "TIFFWriteDirectorySec";
	uint32 ndir;
	TIFFDirEntry* dir;
	uint32 dirsize;
	void* dirmem;
	uint32 m;
	if (tif->tif_mode == O_RDONLY)
		return (1);

        _TIFFFillStriles( tif );
        
	/*
	 * Clear write state so that subsequent images with
	 * different characteristics get the right buffers
	 * setup for them.
	 */
	if (imagedone)
	{
		if (tif->tif_flags & TIFF_POSTENCODE)
		{
			tif->tif_flags &= ~TIFF_POSTENCODE;
			if (!(*tif->tif_postencode)(tif))
			{
				TIFFErrorExt(tif->tif_clientdata,module,
				    "Error post-encoding before directory write");
				return (0);
			}
		}
		(*tif->tif_close)(tif);       /* shutdown encoder */
		/*
		 * Flush any data that might have been written
		 * by the compression close+cleanup routines.  But
                 * be careful not to write stuff if we didn't add data
                 * in the previous steps as the "rawcc" data may well be
                 * a previously read tile/strip in mixed read/write mode.
		 */
		if (tif->tif_rawcc > 0 
		    && (tif->tif_flags & TIFF_BEENWRITING) != 0 )
		{
		    if( !TIFFFlushData1(tif) )
                    {
			TIFFErrorExt(tif->tif_clientdata, module,
			    "Error flushing data before directory write");
			return (0);
                    }
		}
		if ((tif->tif_flags & TIFF_MYBUFFER) && tif->tif_rawdata)
		{
			_TIFFfree(tif->tif_rawdata);
			tif->tif_rawdata = NULL;
			tif->tif_rawcc = 0;
			tif->tif_rawdatasize = 0;
                        tif->tif_rawdataoff = 0;
                        tif->tif_rawdataloaded = 0;
		}
		tif->tif_flags &= ~(TIFF_BEENWRITING|TIFF_BUFFERSETUP);
	}
	dir=NULL;
	dirmem=NULL;
	dirsize=0;
	while (1)
	{
		ndir=0;
		if (isimage)
		{
			if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))
			{
				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth))
					goto bad;
				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS))
			{
				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth))
					goto bad;
				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_RESOLUTION))
			{
				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution))
					goto bad;
				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_POSITION))
			{
				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition))
					goto bad;
				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_SUBFILETYPE))
			{
				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))
			{
				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_COMPRESSION))
			{
				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC))
			{
				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_THRESHHOLDING))
			{
				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_FILLORDER))
			{
				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_ORIENTATION))
			{
				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))
			{
				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP))
			{
				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))
			{
				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))
			{
				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_PLANARCONFIG))
			{
				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT))
			{
				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_PAGENUMBER))
			{
				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0]))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_STRIPBYTECOUNTS))
			{
				if (!isTiled(tif))
				{
					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))
						goto bad;
				}
				else
				{
					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))
						goto bad;
				}
			}
			if (TIFFFieldSet(tif,FIELD_STRIPOFFSETS))
			{
				if (!isTiled(tif))
				{
                    /* td_stripoffset might be NULL in an odd OJPEG case. See
                     *  tif_dirread.c around line 3634.
                     * XXX: OJPEG hack.
                     * If a) compression is OJPEG, b) it's not a tiled TIFF,
                     * and c) the number of strips is 1,
                     * then we tolerate the absence of stripoffsets tag,
                     * because, presumably, all required data is in the
                     * JpegInterchangeFormat stream.
                     * We can get here when using tiffset on such a file.
                     * See http://bugzilla.maptools.org/show_bug.cgi?id=2500
                    */
                    if (tif->tif_dir.td_stripoffset != NULL &&
                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))
                        goto bad;
				}
				else
				{
					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))
						goto bad;
				}
			}
			if (TIFFFieldSet(tif,FIELD_COLORMAP))
			{
				if (!TIFFWriteDirectoryTagColormap(tif,&ndir,dir))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES))
			{
				if (tif->tif_dir.td_extrasamples)
				{
					uint16 na;
					uint16* nb;
					TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);
					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))
						goto bad;
				}
			}
			if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT))
			{
				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE))
			{
				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE))
			{
				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))
			{
				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_TILEDEPTH))
			{
				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))
			{
				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0]))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))
			{
				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0]))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING))
			{
				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE))
			{
				if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION))
			{
				if (!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_INKNAMES))
			{
				if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames))
					goto bad;
			}
			if (TIFFFieldSet(tif,FIELD_SUBIFD))
			{
				if (!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir))
					goto bad;
			}
			{
				uint32 n;
				for (n=0; n<tif->tif_nfields; n++) {
					const TIFFField* o;
					o = tif->tif_fields[n];
					if ((o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit)))
					{
						switch (o->get_field_type)
						{
							case TIFF_SETGET_ASCII:
								{
									uint32 pa;
									char* pb;
									assert(o->field_type==TIFF_ASCII);
									assert(o->field_readcount==TIFF_VARIABLE);
									assert(o->field_passcount==0);
									TIFFGetField(tif,o->field_tag,&pb);
									pa=(uint32)(strlen(pb));
									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))
										goto bad;
								}
								break;
							case TIFF_SETGET_UINT16:
								{
									uint16 p;
									assert(o->field_type==TIFF_SHORT);
									assert(o->field_readcount==1);
									assert(o->field_passcount==0);
									TIFFGetField(tif,o->field_tag,&p);
									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))
										goto bad;
								}
								break;
							case TIFF_SETGET_UINT32:
								{
									uint32 p;
									assert(o->field_type==TIFF_LONG);
									assert(o->field_readcount==1);
									assert(o->field_passcount==0);
									TIFFGetField(tif,o->field_tag,&p);
									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))
										goto bad;
								}
								break;
							case TIFF_SETGET_C32_UINT8:
								{
									uint32 pa;
									void* pb;
									assert(o->field_type==TIFF_UNDEFINED);
									assert(o->field_readcount==TIFF_VARIABLE2);
									assert(o->field_passcount==1);
									TIFFGetField(tif,o->field_tag,&pa,&pb);
									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))
										goto bad;
								}
								break;
							default:
								assert(0);   /* we should never get here */
								break;
						}
					}
				}
			}
		}
		for (m=0; m<(uint32)(tif->tif_dir.td_customValueCount); m++)
		{
                        uint16 tag = (uint16)tif->tif_dir.td_customValues[m].info->field_tag;
                        uint32 count = tif->tif_dir.td_customValues[m].count;
			switch (tif->tif_dir.td_customValues[m].info->field_type)
			{
				case TIFF_ASCII:
					if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_UNDEFINED:
					if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_BYTE:
					if (!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_SBYTE:
					if (!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_SHORT:
					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_SSHORT:
					if (!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_LONG:
					if (!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_SLONG:
					if (!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_LONG8:
					if (!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_SLONG8:
					if (!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_RATIONAL:
					if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_SRATIONAL:
					if (!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_FLOAT:
					if (!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_DOUBLE:
					if (!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_IFD:
					if (!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				case TIFF_IFD8:
					if (!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))
						goto bad;
					break;
				default:
					assert(0);   /* we should never get here */
					break;
			}
		}
		if (dir!=NULL)
			break;
		dir=_TIFFmalloc(ndir*sizeof(TIFFDirEntry));
		if (dir==NULL)
		{
			TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");
			goto bad;
		}
		if (isimage)
		{
			if ((tif->tif_diroff==0)&&(!TIFFLinkDirectory(tif)))
				goto bad;
		}
		else
			tif->tif_diroff=(TIFFSeekFile(tif,0,SEEK_END)+1)&(~((toff_t)1));
		if (pdiroff!=NULL)
			*pdiroff=tif->tif_diroff;
		if (!(tif->tif_flags&TIFF_BIGTIFF))
			dirsize=2+ndir*12+4;
		else
			dirsize=8+ndir*20+8;
		tif->tif_dataoff=tif->tif_diroff+dirsize;
		if (!(tif->tif_flags&TIFF_BIGTIFF))
			tif->tif_dataoff=(uint32)tif->tif_dataoff;
		if ((tif->tif_dataoff<tif->tif_diroff)||(tif->tif_dataoff<(uint64)dirsize))
		{
			TIFFErrorExt(tif->tif_clientdata,module,"Maximum TIFF file size exceeded");
			goto bad;
		}
		if (tif->tif_dataoff&1)
			tif->tif_dataoff++;
		if (isimage)
			tif->tif_curdir++;
	}
	if (isimage)
	{
		if (TIFFFieldSet(tif,FIELD_SUBIFD)&&(tif->tif_subifdoff==0))
		{
			uint32 na;
			TIFFDirEntry* nb;
			for (na=0, nb=dir; ; na++, nb++)
			{
				if( na == ndir )
                                {
                                    TIFFErrorExt(tif->tif_clientdata,module,
                                                 "Cannot find SubIFD tag");
                                    goto bad;
                                }
				if (nb->tdir_tag==TIFFTAG_SUBIFD)
					break;
			}
			if (!(tif->tif_flags&TIFF_BIGTIFF))
				tif->tif_subifdoff=tif->tif_diroff+2+na*12+8;
			else
				tif->tif_subifdoff=tif->tif_diroff+8+na*20+12;
		}
	}
	dirmem=_TIFFmalloc(dirsize);
	if (dirmem==NULL)
	{
		TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");
		goto bad;
	}
	if (!(tif->tif_flags&TIFF_BIGTIFF))
	{
		uint8* n;
		uint32 nTmp;
		TIFFDirEntry* o;
		n=dirmem;
		*(uint16*)n=(uint16)ndir;
		if (tif->tif_flags&TIFF_SWAB)
			TIFFSwabShort((uint16*)n);
		n+=2;
		o=dir;
		for (m=0; m<ndir; m++)
		{
			*(uint16*)n=o->tdir_tag;
			if (tif->tif_flags&TIFF_SWAB)
				TIFFSwabShort((uint16*)n);
			n+=2;
			*(uint16*)n=o->tdir_type;
			if (tif->tif_flags&TIFF_SWAB)
				TIFFSwabShort((uint16*)n);
			n+=2;
			nTmp = (uint32)o->tdir_count;
			_TIFFmemcpy(n,&nTmp,4);
			if (tif->tif_flags&TIFF_SWAB)
				TIFFSwabLong((uint32*)n);
			n+=4;
			/* This is correct. The data has been */
			/* swabbed previously in TIFFWriteDirectoryTagData */
			_TIFFmemcpy(n,&o->tdir_offset,4);
			n+=4;
			o++;
		}
		nTmp = (uint32)tif->tif_nextdiroff;
		if (tif->tif_flags&TIFF_SWAB)
			TIFFSwabLong(&nTmp);
		_TIFFmemcpy(n,&nTmp,4);
	}
	else
	{
		uint8* n;
		TIFFDirEntry* o;
		n=dirmem;
		*(uint64*)n=ndir;
		if (tif->tif_flags&TIFF_SWAB)
			TIFFSwabLong8((uint64*)n);
		n+=8;
		o=dir;
		for (m=0; m<ndir; m++)
		{
			*(uint16*)n=o->tdir_tag;
			if (tif->tif_flags&TIFF_SWAB)
				TIFFSwabShort((uint16*)n);
			n+=2;
			*(uint16*)n=o->tdir_type;
			if (tif->tif_flags&TIFF_SWAB)
				TIFFSwabShort((uint16*)n);
			n+=2;
			_TIFFmemcpy(n,&o->tdir_count,8);
			if (tif->tif_flags&TIFF_SWAB)
				TIFFSwabLong8((uint64*)n);
			n+=8;
			_TIFFmemcpy(n,&o->tdir_offset,8);
			n+=8;
			o++;
		}
		_TIFFmemcpy(n,&tif->tif_nextdiroff,8);
		if (tif->tif_flags&TIFF_SWAB)
			TIFFSwabLong8((uint64*)n);
	}
	_TIFFfree(dir);
	dir=NULL;
	if (!SeekOK(tif,tif->tif_diroff))
	{
		TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");
		goto bad;
	}
	if (!WriteOK(tif,dirmem,(tmsize_t)dirsize))
	{
		TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");
		goto bad;
	}
	_TIFFfree(dirmem);
	if (imagedone)
	{
		TIFFFreeDirectory(tif);
		tif->tif_flags &= ~TIFF_DIRTYDIRECT;
		tif->tif_flags &= ~TIFF_DIRTYSTRIP;
		(*tif->tif_cleanup)(tif);
		/*
		* Reset directory-related state for subsequent
		* directories.
		*/
		TIFFCreateDirectory(tif);
	}
	return(1);
bad:
	if (dir!=NULL)
		_TIFFfree(dir);
	if (dirmem!=NULL)
		_TIFFfree(dirmem);
	return(0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
20,21
22,23
22,24
25,26
25,27
25,28
25,29
25,30
25,31
25,32
25,33
25,34
25,35
25,36
25,37
25,38
25,39
25,40
25,41
25,42
25,43
25,44
25,45
25,46
25,47
25,48
25,49
25,50
25,51
25,52
26,27
27,28
27,29
29,30
29,31
29,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
44,46
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
56,57
56,58
59,60
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
67,68
67,69
68,69
71,72
73,74
74,75
76,77
77,78
77,79
78,79
80,81
82,83
82,84
83,84
85,86
85,87
85,88
85,89
85,90
86,87
86,88
87,88
87,89
88,89
88,90
89,90
92,93
94,95
94,96
95,96
96,97
96,98
97,98
97,99
98,99
101,102
102,103
104,105
104,106
105,106
106,107
106,108
107,108
108,109
109,110
109,111
110,111
113,114
115,116
115,117
116,117
117,118
117,119
117,120
117,121
118,119
120,121
120,122
121,122
124,125
127,128
128,129
130,131
131,132
131,133
132,133
133,134
134,135
134,136
135,136
138,139
140,141
140,142
141,142
141,143
142,143
142,144
143,144
143,145
144,145
148,149
148,150
149,150
150,151
150,152
151,152
151,153
152,153
155,156
158,159
159,160
159,161
160,161
161,162
161,163
162,163
164,165
166,167
166,168
167,168
168,169
168,170
168,171
168,172
169,170
171,172
171,173
172,173
175,176
178,179
179,180
181,182
181,183
182,183
182,184
183,184
184,185
184,186
185,186
185,187
186,187
189,190
191,192
191,193
192,193
195,196
195,197
195,198
195,199
195,200
195,201
196,197
197,198
197,199
198,199
200,201
200,202
201,202
204,205
205,206
205,207
206,207
206,208
207,208
210,211
212,213
213,214
213,215
214,215
214,216
215,216
219,220
220,221
220,222
221,222
221,223
222,223
226,227
227,228
227,229
228,229
228,230
229,230
233,234
234,235
234,236
235,236
235,237
236,237
240,241
241,242
241,243
242,243
242,244
243,244
246,247
247,248
248,249
248,250
249,250
251,252
253,254
254,255
254,256
255,256
257,258
259,260
260,261
260,262
261,262
263,264
265,266
266,267
266,268
267,268
270,271
270,272
272,273
272,274
272,275
272,276
272,277
272,278
272,279
272,280
272,281
272,282
272,283
272,284
272,285
272,286
273,274
274,275
274,276
275,276
278,279
278,280
279,280
281,282
281,283
281,284
281,285
281,286
281,287
281,288
281,289
281,290
281,291
281,292
281,293
281,294
281,295
281,296
281,297
281,298
281,299
281,300
281,301
281,302
281,303
281,304
281,305
281,306
281,307
281,308
281,309
281,310
281,311
281,312
281,313
281,314
281,315
281,316
282,283
282,284
283,284
283,285
283,286
284,285
286,287
288,289
290,291
290,292
291,292
291,293
292,293
293,294
293,295
293,296
293,297
293,298
293,299
294,295
296,297
298,299
299,300
301,302
303,304
305,306
305,307
306,307
306,308
307,308
311,312
313,314
313,315
314,315
315,316
315,317
315,318
315,319
315,320
315,321
316,317
318,319
320,321
321,322
323,324
325,326
327,328
327,329
328,329
328,330
329,330
333,334
335,336
335,337
336,337
336,338
336,339
337,338
339,340
341,342
343,344
343,345
344,345
344,346
345,346
346,347
346,348
346,349
346,350
346,351
346,352
347,348
349,350
351,352
352,353
354,355
356,357
358,359
358,360
359,360
359,361
360,361
364,365
366,367
366,368
367,368
368,369
368,370
368,371
368,372
368,373
368,374
369,370
371,372
373,374
374,375
376,377
378,379
380,381
380,382
381,382
381,383
382,383
386,387
388,389
388,390
389,390
389,391
389,392
390,391
392,393
394,395
396,397
396,398
397,398
397,399
398,399
399,400
399,401
399,402
399,403
399,404
399,405
400,401
402,403
404,405
405,406
407,408
409,410
411,412
411,413
412,413
412,414
413,414
417,418
419,420
419,421
420,421
421,422
421,423
421,424
421,425
421,426
421,427
422,423
424,425
426,427
427,428
429,430
431,432
433,434
433,435
434,435
434,436
435,436
439,440
441,442
441,443
442,443
442,444
442,445
443,444
445,446
447,448
449,450
449,451
450,451
450,452
451,452
452,453
452,454
452,455
452,456
452,457
452,458
453,454
455,456
457,458
458,459
460,461
462,463
464,465
464,466
465,466
465,467
466,467
470,471
472,473
472,474
473,474
474,475
474,476
474,477
474,478
474,479
474,480
475,476
477,478
479,480
480,481
482,483
484,485
486,487
486,488
487,488
487,489
488,489
492,493
494,495
494,496
495,496
495,497
495,498
496,497
498,499
500,501
502,503
503,504
503,505
504,505
505,506
505,507
505,508
505,509
505,510
505,511
506,507
508,509
510,511
511,512
513,514
515,516
517,518
517,519
518,519
518,520
519,520
523,524
525,526
525,527
526,527
526,528
526,529
527,528
529,530
531,532
533,534
534,535
534,536
535,536
536,537
536,538
536,539
536,540
536,541
536,542
537,538
539,540
541,542
542,543
544,545
546,547
548,549
548,550
549,550
549,551
550,551
554,555
556,557
556,558
557,558
557,559
557,560
558,559
560,561
562,563
564,565
565,566
565,567
566,567
567,568
567,569
567,570
567,571
567,572
567,573
568,569
570,571
572,573
573,574
575,576
577,578
579,580
579,581
580,581
580,582
581,582
585,586
587,588
587,589
588,589
588,590
588,591
589,590
591,592
593,594
595,596
596,597
596,598
597,598
598,599
598,600
598,601
598,602
598,603
598,604
599,600
601,602
603,604
604,605
606,607
608,609
610,611
610,612
611,612
611,613
612,613
616,617
618,619
618,620
619,620
619,621
619,622
620,621
622,623
624,625
626,627
627,628
627,629
628,629
629,630
629,631
629,632
629,633
629,634
629,635
630,631
632,633
634,635
635,636
637,638
639,640
641,642
641,643
642,643
642,644
643,644
647,648
649,650
649,651
650,651
650,652
650,653
651,652
653,654
655,656
657,658
658,659
658,660
659,660
660,661
660,662
660,663
660,664
660,665
660,666
661,662
663,664
665,666
666,667
668,669
670,671
672,673
672,674
673,674
673,675
674,675
678,679
680,681
680,682
681,682
681,683
681,684
682,683
684,685
686,687
688,689
689,690
689,691
690,691
691,692
691,693
691,694
691,695
691,696
691,697
692,693
694,695
696,697
697,698
699,700
701,702
703,704
703,705
704,705
704,706
705,706
709,710
711,712
711,713
712,713
712,714
712,715
713,714
715,716
717,718
719,720
720,721
720,722
721,722
722,723
722,724
722,725
722,726
722,727
722,728
723,724
725,726
727,728
728,729
730,731
732,733
734,735
734,736
735,736
735,737
736,737
740,741
742,743
742,744
743,744
743,745
743,746
744,745
746,747
748,749
750,751
751,752
751,753
752,753
753,754
753,755
753,756
753,757
753,758
753,759
754,755
756,757
758,759
759,760
761,762
763,764
765,766
765,767
766,767
766,768
767,768
771,772
773,774
773,775
774,775
774,776
774,777
775,776
777,778
779,780
781,782
782,783
782,784
783,784
784,785
784,786
784,787
784,788
784,789
784,790
785,786
787,788
789,790
790,791
792,793
794,795
796,797
796,798
797,798
797,799
798,799
802,803
804,805
804,806
805,806
805,807
805,808
806,807
808,809
810,811
812,813
813,814
813,815
814,815
815,816
815,817
815,818
815,819
815,820
815,821
816,817
818,819
820,821
821,822
823,824
825,826
827,828
827,829
828,829
828,830
829,830
833,834
835,836
835,837
836,837
836,838
836,839
837,838
839,840
841,842
843,844
844,845
844,846
845,846
846,847
846,848
846,849
846,850
846,851
846,852
847,848
849,850
851,852
852,853
854,855
856,857
858,859
858,860
859,860
859,861
860,861
864,865
866,867
866,868
867,868
867,869
867,870
868,869
870,871
872,873
874,875
875,876
875,877
876,877
877,878
877,879
877,880
877,881
877,882
877,883
878,879
880,881
882,883
883,884
885,886
887,888
889,890
889,891
890,891
890,892
891,892
895,896
897,898
897,899
898,899
898,900
898,901
899,900
901,902
903,904
905,906
906,907
906,908
907,908
908,909
908,910
908,911
908,912
908,913
908,914
908,915
909,910
911,912
913,914
914,915
916,917
918,919
921,922
922,923
922,924
923,924
923,925
924,925
924,926
925,926
930,931
932,933
932,934
933,934
933,935
933,936
934,935
936,937
938,939
940,941
941,942
941,943
941,944
942,943
943,944
943,945
944,945
946,947
948,949
949,950
949,951
950,951
951,952
951,953
951,954
951,955
951,956
951,957
951,958
952,953
954,955
956,957
957,958
959,960
961,962
963,964
963,965
964,965
964,966
965,966
969,970
969,971
970,971
970,972
971,972
975,976
977,978
978,979
978,980
979,980
980,981
980,982
980,983
980,984
980,985
980,986
980,987
981,982
983,984
985,986
986,987
988,989
990,991
992,993
992,994
993,994
993,995
994,995
998,999
998,1000
999,1000
999,1001
1000,1001
1004,1005
1006,1007
1006,1008
1007,1008
1007,1009
1007,1010
1008,1009
1010,1011
1012,1013
1014,1015
1015,1016
1015,1017
1015,1018
1016,1017
1017,1018
1017,1019
1018,1019
1020,1021
1022,1023
1023,1024
1023,1025
1024,1025
1024,1026
1025,1026
1025,1027
1026,1027
1026,1028
1027,1028
1027,1029
1028,1029
1032,1033
1034,1035
1035,1036
1035,1037
1035,1038
1035,1039
1035,1040
1035,1041
1035,1042
1036,1037
1038,1039
1040,1041
1041,1042
1043,1044
1045,1046
1047,1048
1047,1049
1048,1049
1048,1050
1049,1050
1053,1054
1053,1055
1054,1055
1054,1056
1055,1056
1059,1060
1061,1062
1062,1063
1062,1064
1063,1064
1064,1065
1064,1066
1064,1067
1064,1068
1064,1069
1064,1070
1064,1071
1065,1066
1067,1068
1069,1070
1070,1071
1072,1073
1074,1075
1076,1077
1076,1078
1077,1078
1077,1079
1078,1079
1082,1083
1082,1084
1083,1084
1083,1085
1084,1085
1088,1089
1090,1091
1090,1092
1091,1092
1091,1093
1091,1094
1092,1093
1094,1095
1096,1097
1098,1099
1099,1100
1099,1101
1100,1101
1101,1102
1101,1103
1101,1104
1101,1105
1102,1103
1104,1105
1106,1107
1107,1108
1109,1110
1111,1112
1113,1114
1113,1115
1114,1115
1114,1116
1114,1117
1115,1116
1117,1118
1119,1120
1121,1122
1122,1123
1122,1124
1123,1124
1123,1125
1124,1125
1124,1126
1125,1126
1129,1130
1129,1131
1129,1132
1129,1133
1130,1131
1131,1132
1131,1133
1132,1133
1134,1135
1136,1137
1137,1138
1137,1139
1138,1139
1140,1141
1140,1142
1143,1144
1144,1145
1144,1146
1144,1147
1144,1148
1144,1149
1145,1146
1147,1148
1149,1150
1151,1152
1152,1153
1154,1155
1155,1156
1157,1158
1157,1159
1158,1159
1159,1160
1159,1161
1159,1162
1159,1163
1159,1164
1159,1165
1159,1166
1160,1161
1162,1163
1164,1165
1165,1166
1167,1168
1169,1170
1171,1172
1173,1174
1175,1176
1177,1178
1177,1179
1178,1179
1178,1180
1178,1181
1179,1180
1181,1182
1183,1184
1185,1186
1186,1187
1186,1188
1187,1188
1188,1189
1188,1190
1188,1191
1188,1192
1188,1193
1188,1194
1189,1190
1191,1192
1193,1194
1194,1195
1196,1197
1198,1199
1200,1201
1200,1202
1201,1202
1201,1203
1202,1203
1206,1207
1208,1209
1208,1210
1209,1210
1209,1211
1209,1212
1210,1211
1212,1213
1214,1215
1216,1217
1217,1218
1217,1219
1218,1219
1219,1220
1219,1221
1219,1222
1219,1223
1219,1224
1219,1225
1219,1226
1220,1221
1222,1223
1224,1225
1225,1226
1227,1228
1229,1230
1231,1232
1231,1233
1232,1233
1232,1234
1233,1234
1237,1238
1237,1239
1238,1239
1238,1240
1239,1240
1243,1244
1245,1246
1245,1247
1246,1247
1246,1248
1246,1249
1247,1248
1249,1250
1251,1252
1253,1254
1254,1255
1254,1256
1255,1256
1256,1257
1256,1258
1256,1259
1256,1260
1256,1261
1256,1262
1256,1263
1257,1258
1259,1260
1261,1262
1262,1263
1264,1265
1266,1267
1268,1269
1268,1270
1269,1270
1269,1271
1270,1271
1274,1275
1274,1276
1275,1276
1275,1277
1276,1277
1280,1281
1282,1283
1282,1284
1283,1284
1283,1285
1283,1286
1284,1285
1286,1287
1288,1289
1290,1291
1291,1292
1291,1293
1292,1293
1293,1294
1293,1295
1293,1296
1293,1297
1293,1298
1293,1299
1294,1295
1296,1297
1298,1299
1299,1300
1301,1302
1303,1304
1305,1306
1305,1307
1306,1307
1306,1308
1307,1308
1311,1312
1313,1314
1313,1315
1314,1315
1314,1316
1314,1317
1315,1316
1317,1318
1319,1320
1321,1322
1322,1323
1322,1324
1323,1324
1324,1325
1324,1326
1324,1327
1324,1328
1324,1329
1324,1330
1325,1326
1327,1328
1329,1330
1330,1331
1332,1333
1334,1335
1336,1337
1336,1338
1337,1338
1337,1339
1338,1339
1342,1343
1344,1345
1344,1346
1345,1346
1345,1347
1345,1348
1346,1347
1348,1349
1350,1351
1352,1353
1353,1354
1353,1355
1354,1355
1355,1356
1355,1357
1355,1358
1355,1359
1355,1360
1355,1361
1355,1362
1356,1357
1358,1359
1360,1361
1361,1362
1363,1364
1365,1366
1368,1369
1369,1370
1369,1371
1370,1371
1370,1372
1371,1372
1371,1373
1372,1373
1377,1378
1379,1380
1379,1381
1380,1381
1380,1382
1380,1383
1381,1382
1383,1384
1385,1386
1387,1388
1388,1389
1388,1390
1389,1390
1390,1391
1390,1392
1390,1393
1390,1394
1390,1395
1390,1396
1390,1397
1391,1392
1393,1394
1395,1396
1396,1397
1398,1399
1400,1401
1403,1404
1404,1405
1404,1406
1405,1406
1405,1407
1406,1407
1406,1408
1407,1408
1412,1413
1414,1415
1414,1416
1415,1416
1415,1417
1415,1418
1416,1417
1418,1419
1420,1421
1422,1423
1423,1424
1423,1425
1424,1425
1425,1426
1425,1427
1425,1428
1425,1429
1425,1430
1425,1431
1426,1427
1428,1429
1430,1431
1431,1432
1433,1434
1435,1436
1437,1438
1437,1439
1438,1439
1438,1440
1439,1440
1443,1444
1445,1446
1445,1447
1446,1447
1446,1448
1446,1449
1447,1448
1449,1450
1451,1452
1453,1454
1454,1455
1454,1456
1455,1456
1456,1457
1456,1458
1456,1459
1456,1460
1456,1461
1456,1462
1456,1463
1457,1458
1459,1460
1461,1462
1462,1463
1464,1465
1466,1467
1469,1470
1469,1471
1470,1471
1470,1472
1471,1472
1475,1476
1477,1478
1477,1479
1478,1479
1478,1480
1478,1481
1479,1480
1481,1482
1483,1484
1485,1486
1486,1487
1486,1488
1487,1488
1488,1489
1488,1490
1488,1491
1488,1492
1489,1490
1491,1492
1493,1494
1494,1495
1496,1497
1498,1499
1500,1501
1500,1502
1501,1502
1501,1503
1501,1504
1502,1503
1504,1505
1506,1507
1508,1509
1509,1510
1509,1511
1510,1511
1511,1512
1511,1513
1511,1514
1511,1515
1511,1516
1511,1517
1511,1518
1512,1513
1514,1515
1516,1517
1517,1518
1519,1520
1521,1522
1523,1524
1523,1525
1524,1525
1524,1526
1525,1526
1529,1530
1529,1531
1530,1531
1530,1532
1531,1532
1535,1536
1537,1538
1537,1539
1538,1539
1538,1540
1538,1541
1539,1540
1541,1542
1543,1544
1545,1546
1546,1547
1546,1548
1547,1548
1548,1549
1548,1550
1548,1551
1548,1552
1549,1550
1551,1552
1553,1554
1554,1555
1556,1557
1558,1559
1560,1561
1560,1562
1561,1562
1562,1563
1562,1564
1563,1564
1565,1566
1567,1568
1567,1569
1567,1570
1567,1571
1568,1569
1569,1570
1569,1571
1570,1571
1573,1574
1573,1575
1574,1575
1576,1577
1576,1578
1577,1578
1580,1581
1581,1582
1583,1584
1583,1585
1583,1586
1584,1585
1585,1586
1585,1587
1586,1587
1588,1589
1588,1590
1591,1592
1592,1593
1592,1594
1593,1594
1595,1596
1595,1597
1596,1597
1596,1598
1597,1598
1600,1601
1602,1603
1602,1604
1603,1604
1603,1605
1604,1605
1605,1606
1605,1607
1606,1607
1606,1608
1607,1608
1610,1611
1612,1613
1613,1614
1613,1615
1613,1616
1614,1615
1616,1617
1618,1619
1618,1620
1619,1620
1622,1623
1623,1624
1623,1625
1624,1625
1624,1626
1625,1626
1628,1629
1628,1630
1628,1631
1628,1632
1628,1633
1628,1634
1628,1635
1628,1636
1628,1637
1628,1638
1628,1639
1628,1640
1628,1641
1628,1642
1628,1643
1629,1630
1630,1631
1632,1633
1632,1634
1632,1635
1632,1636
1632,1637
1632,1638
1632,1639
1632,1640
1633,1634
1634,1635
1634,1636
1635,1636
1637,1638
1639,1640
1640,1641
1640,1642
1642,1643
1642,1644
1645,1646
1646,1647
1646,1648
1647,1648
1649,1650
1649,1651
1650,1651
1650,1652
1651,1652
1654,1655
1656,1657
1657,1658
1657,1659
1658,1659
1660,1661
1660,1662
1661,1662
1661,1663
1662,1663
1665,1666
1667,1668
1668,1669
1668,1670
1669,1670
1671,1672
1671,1673
1672,1673
1672,1674
1673,1674
1677,1678
1678,1679
1678,1680
1678,1681
1678,1682
1679,1680
1681,1682
1683,1684
1683,1685
1684,1685
1687,1688
1688,1689
1690,1691
1691,1692
1691,1693
1692,1693
1694,1695
1694,1696
1695,1696
1696,1697
1698,1699
1698,1700
1699,1700
1701,1702
1703,1704
1703,1705
1704,1705
1705,1706
1705,1707
1705,1708
1705,1709
1705,1710
1705,1711
1705,1712
1706,1707
1708,1709
1710,1711
1711,1712
1713,1714
1715,1716
1715,1717
1716,1717
1716,1718
1717,1718
1720,1721
1720,1722
1721,1722
1724,1725
1726,1727
1728,1729
1731,1732
1732,1733
1734,1735
1734,1736
1734,1737
1734,1738
1734,1739
1734,1740
1735,1736
1736,1737
1736,1738
1737,1738
1739,1740
1741,1742
1742,1743
1742,1744
1743,1744
1745,1746
1745,1747
1746,1747
1746,1748
1747,1748
1750,1751
1752,1753
1753,1754
1753,1755
1754,1755
1756,1757
1756,1758
1757,1758
1757,1759
1758,1759
1762,1763
1763,1764
1763,1765
1764,1765
1766,1767
1766,1768
1767,1768
1767,1769
1768,1769
1772,1773
1773,1774
1773,1775
1773,1776
1773,1777
1774,1775
1776,1777
1778,1779
1778,1780
1779,1780
1782,1783
1783,1784
1785,1786
1785,1787
1786,1787
1787,1788
1787,1789
1787,1790
1787,1791
1787,1792
1787,1793
1788,1789
1790,1791
1792,1793
1793,1794
1795,1796
1797,1798
1797,1799
1798,1799
1798,1800
1799,1800
1802,1803
1802,1804
1803,1804
1806,1807
1808,1809
1811,1812
1812,1813
1814,1815
1814,1816
1814,1817
1814,1818
1814,1819
1814,1820
1815,1816
1816,1817
1816,1818
1817,1818
1819,1820
1821,1822
1822,1823
1822,1824
1823,1824
1825,1826
1825,1827
1826,1827
1826,1828
1827,1828
1830,1831
1832,1833
1833,1834
1833,1835
1834,1835
1836,1837
1836,1838
1837,1838
1837,1839
1838,1839
1842,1843
1843,1844
1843,1845
1844,1845
1846,1847
1846,1848
1847,1848
1847,1849
1848,1849
1852,1853
1853,1854
1853,1855
1853,1856
1853,1857
1854,1855
1856,1857
1858,1859
1858,1860
1859,1860
1862,1863
1863,1864
1865,1866
1865,1867
1866,1867
1867,1868
1867,1869
1867,1870
1867,1871
1867,1872
1867,1873
1868,1869
1870,1871
1872,1873
1873,1874
1875,1876
1877,1878
1877,1879
1878,1879
1878,1880
1879,1880
1882,1883
1882,1884
1883,1884
1886,1887
1888,1889
1891,1892
1892,1893
1894,1895
1894,1896
1894,1897
1894,1898
1894,1899
1894,1900
1894,1901
1895,1896
1896,1897
1896,1898
1897,1898
1899,1900
1901,1902
1902,1903
1902,1904
1904,1905
1904,1906
1907,1908
1908,1909
1908,1910
1909,1910
1911,1912
1911,1913
1912,1913
1912,1914
1913,1914
1916,1917
1918,1919
1919,1920
1919,1921
1920,1921
1922,1923
1922,1924
1923,1924
1923,1925
1924,1925
1927,1928
1929,1930
1930,1931
1930,1932
1931,1932
1933,1934
1933,1935
1934,1935
1934,1936
1935,1936
1939,1940
1940,1941
1940,1942
1940,1943
1940,1944
1940,1945
1941,1942
1943,1944
1945,1946
1945,1947
1946,1947
1949,1950
1950,1951
1952,1953
1953,1954
1955,1956
1955,1957
1956,1957
1957,1958
1957,1959
1957,1960
1957,1961
1957,1962
1957,1963
1957,1964
1958,1959
1960,1961
1962,1963
1963,1964
1965,1966
1967,1968
1967,1969
1968,1969
1968,1970
1969,1970
1972,1973
1972,1974
1973,1974
1976,1977
1978,1979
1980,1981
1984,1985
1985,1986
1985,1987
1986,1987
1990,1991
1990,1992
1990,1993
1990,1994
1991,1992
1992,1993
1992,1994
1993,1994
1996,1997
1996,1998
1997,1998
1999,2000
1999,2001
2000,2001
2001,2002
2003,2004
2003,2005
2004,2005
2004,2006
2005,2006
2009,2010
2010,2011
2012,2013
2012,2014
2012,2015
2013,2014
2014,2015
2014,2016
2015,2016
2017,2018
2017,2019
2019,2020
2020,2021
2020,2022
2021,2022
2021,2023
2022,2023
2025,2026
2025,2027
2026,2027
2026,2028
2027,2028
2027,2029
2028,2029
2028,2030
2029,2030
2029,2031
2030,2031
2034,2035
2038,2039
2039,2040
2039,2041
2040,2041
2042,2043
2042,2044
2044,2045
2045,2046
2045,2047
2046,2047
2046,2048
2047,2048
2047,2049
2048,2049
2048,2050
2049,2050
2053,2054
2056,2057
2056,2058
2057,2058
2057,2059
2058,2059
2058,2060
2059,2060
2059,2061
2060,2061
2060,2062
2061,2062
2061,2063
2062,2063
2066,2067
2070,2071
2070,2072
2070,2073
2070,2074
2070,2075
2070,2076
2070,2077
2070,2078
2070,2079
2070,2080
2070,2081
2070,2082
2070,2083
2070,2084
2070,2085
2070,2086
2070,2087
2070,2088
2070,2089
2070,2090
2070,2091
2070,2092
2070,2093
2070,2094
2070,2095
2070,2096
2070,2097
2070,2098
2070,2099
2070,2100
2070,2101
2070,2102
2070,2103
2070,2104
2070,2105
2070,2106
2070,2107
2070,2108
2070,2109
2070,2110
2070,2111
2070,2112
2070,2113
2070,2114
2070,2115
2070,2116
2070,2117
2070,2118
2070,2119
2070,2120
2070,2121
2071,2072
2072,2073
2074,2075
2074,2076
2075,2076
2076,2077
2076,2078
2076,2079
2076,2080
2076,2081
2076,2082
2076,2083
2077,2078
2079,2080
2081,2082
2082,2083
2084,2085
2086,2087
2088,2089
2090,2091
2090,2092
2091,2092
2091,2093
2092,2093
2092,2094
2093,2094
2093,2095
2094,2095
2098,2099
2101,2102
2104,2105
2105,2106
2107,2108
2107,2109
2108,2109
2109,2110
2109,2111
2109,2112
2109,2113
2109,2114
2109,2115
2109,2116
2110,2111
2112,2113
2114,2115
2115,2116
2117,2118
2119,2120
2121,2122
2123,2124
2123,2125
2124,2125
2124,2126
2125,2126
2125,2127
2126,2127
2126,2128
2127,2128
2131,2132
2134,2135
2137,2138
2138,2139
2140,2141
2140,2142
2141,2142
2142,2143
2142,2144
2142,2145
2142,2146
2142,2147
2142,2148
2142,2149
2143,2144
2145,2146
2147,2148
2148,2149
2150,2151
2152,2153
2154,2155
2156,2157
2156,2158
2157,2158
2157,2159
2158,2159
2158,2160
2159,2160
2159,2161
2160,2161
2164,2165
2167,2168
2170,2171
2171,2172
2173,2174
2173,2175
2174,2175
2175,2176
2175,2177
2175,2178
2175,2179
2175,2180
2175,2181
2175,2182
2176,2177
2178,2179
2180,2181
2181,2182
2183,2184
2185,2186
2187,2188
2189,2190
2189,2191
2190,2191
2190,2192
2191,2192
2191,2193
2192,2193
2192,2194
2193,2194
2197,2198
2200,2201
2203,2204
2204,2205
2206,2207
2206,2208
2207,2208
2208,2209
2208,2210
2208,2211
2208,2212
2208,2213
2208,2214
2208,2215
2209,2210
2211,2212
2213,2214
2214,2215
2216,2217
2218,2219
2220,2221
2222,2223
2222,2224
2223,2224
2223,2225
2224,2225
2224,2226
2225,2226
2225,2227
2226,2227
2230,2231
2233,2234
2236,2237
2237,2238
2239,2240
2239,2241
2240,2241
2241,2242
2241,2243
2241,2244
2241,2245
2241,2246
2241,2247
2241,2248
2242,2243
2244,2245
2246,2247
2247,2248
2249,2250
2251,2252
2253,2254
2255,2256
2255,2257
2256,2257
2256,2258
2257,2258
2257,2259
2258,2259
2258,2260
2259,2260
2263,2264
2266,2267
2269,2270
2270,2271
2272,2273
2272,2274
2273,2274
2274,2275
2274,2276
2274,2277
2274,2278
2274,2279
2274,2280
2274,2281
2275,2276
2277,2278
2279,2280
2280,2281
2282,2283
2284,2285
2286,2287
2288,2289
2288,2290
2289,2290
2289,2291
2290,2291
2290,2292
2291,2292
2291,2293
2292,2293
2296,2297
2299,2300
2302,2303
2303,2304
2305,2306
2305,2307
2306,2307
2307,2308
2307,2309
2307,2310
2307,2311
2307,2312
2307,2313
2307,2314
2308,2309
2310,2311
2312,2313
2313,2314
2315,2316
2317,2318
2319,2320
2321,2322
2321,2323
2322,2323
2322,2324
2323,2324
2323,2325
2324,2325
2324,2326
2325,2326
2329,2330
2332,2333
2335,2336
2336,2337
2338,2339
2338,2340
2339,2340
2340,2341
2340,2342
2340,2343
2340,2344
2340,2345
2340,2346
2340,2347
2341,2342
2343,2344
2345,2346
2346,2347
2348,2349
2350,2351
2352,2353
2354,2355
2354,2356
2355,2356
2355,2357
2356,2357
2356,2358
2357,2358
2357,2359
2358,2359
2362,2363
2365,2366
2368,2369
2369,2370
2371,2372
2371,2373
2372,2373
2373,2374
2373,2375
2373,2376
2373,2377
2373,2378
2373,2379
2373,2380
2374,2375
2376,2377
2378,2379
2379,2380
2381,2382
2383,2384
2385,2386
2387,2388
2387,2389
2388,2389
2388,2390
2389,2390
2389,2391
2390,2391
2390,2392
2391,2392
2395,2396
2398,2399
2401,2402
2402,2403
2404,2405
2404,2406
2405,2406
2406,2407
2406,2408
2406,2409
2406,2410
2406,2411
2406,2412
2406,2413
2407,2408
2409,2410
2411,2412
2412,2413
2414,2415
2416,2417
2418,2419
2420,2421
2420,2422
2421,2422
2421,2423
2422,2423
2422,2424
2423,2424
2423,2425
2424,2425
2428,2429
2431,2432
2434,2435
2435,2436
2437,2438
2437,2439
2438,2439
2439,2440
2439,2441
2439,2442
2439,2443
2439,2444
2439,2445
2439,2446
2440,2441
2442,2443
2444,2445
2445,2446
2447,2448
2449,2450
2451,2452
2453,2454
2453,2455
2454,2455
2454,2456
2455,2456
2455,2457
2456,2457
2456,2458
2457,2458
2461,2462
2464,2465
2467,2468
2468,2469
2470,2471
2470,2472
2471,2472
2472,2473
2472,2474
2472,2475
2472,2476
2472,2477
2472,2478
2472,2479
2473,2474
2475,2476
2477,2478
2478,2479
2480,2481
2482,2483
2484,2485
2486,2487
2486,2488
2487,2488
2487,2489
2488,2489
2488,2490
2489,2490
2489,2491
2490,2491
2494,2495
2497,2498
2500,2501
2501,2502
2503,2504
2503,2505
2504,2505
2505,2506
2505,2507
2505,2508
2505,2509
2505,2510
2505,2511
2505,2512
2506,2507
2508,2509
2510,2511
2511,2512
2513,2514
2515,2516
2517,2518
2519,2520
2519,2521
2520,2521
2520,2522
2521,2522
2521,2523
2522,2523
2522,2524
2523,2524
2527,2528
2530,2531
2533,2534
2534,2535
2536,2537
2536,2538
2537,2538
2538,2539
2538,2540
2538,2541
2538,2542
2538,2543
2538,2544
2538,2545
2539,2540
2541,2542
2543,2544
2544,2545
2546,2547
2548,2549
2550,2551
2552,2553
2552,2554
2553,2554
2553,2555
2554,2555
2554,2556
2555,2556
2555,2557
2556,2557
2560,2561
2563,2564
2566,2567
2567,2568
2569,2570
2569,2571
2570,2571
2571,2572
2571,2573
2571,2574
2571,2575
2571,2576
2571,2577
2571,2578
2572,2573
2574,2575
2576,2577
2577,2578
2579,2580
2581,2582
2583,2584
2585,2586
2585,2587
2586,2587
2586,2588
2587,2588
2587,2589
2588,2589
2588,2590
2589,2590
2593,2594
2596,2597
2600,2601
2601,2602
2601,2603
2602,2603
2606,2607
2606,2608
2607,2608
2607,2609
2608,2609
2610,2611
2613,2614
2614,2615
2614,2616
2615,2616
2617,2618
2617,2619
2618,2619
2620,2621
2620,2622
2621,2622
2623,2624
2624,2625
2624,2626
2625,2626
2628,2629
2628,2630
2629,2630
2629,2631
2630,2631
2632,2633
2634,2635
2634,2636
2635,2636
2636,2637
2636,2638
2636,2639
2636,2640
2637,2638
2639,2640
2639,2641
2640,2641
2643,2644
2646,2647
2648,2649
2648,2650
2648,2651
2649,2650
2651,2652
2652,2653
2652,2654
2653,2654
2653,2655
2654,2655
2655,2656
2655,2657
2656,2657
2656,2658
2657,2658
2661,2662
2662,2663
2663,2664
2663,2665
2664,2665
2666,2667
2668,2669
2670,2671
2671,2672
2671,2673
2672,2673
2672,2674
2673,2674
2676,2677
2676,2678
2677,2678
2678,2679
2678,2680
2679,2680
2679,2681
2679,2682
2679,2683
2680,2681
2682,2683
2685,2686
2688,2689
2689,2690
2690,2691
2691,2692
2691,2693
2692,2693
2692,2694
2693,2694
2697,2698
2697,2699
2698,2699
2698,2700
2699,2700
2701,2702
2703,2704
2704,2705
2704,2706
2705,2706
2706,2707
2708,2709
2708,2710
2709,2710
2712,2713
2712,2714
2712,2715
2713,2714
2714,2715
2715,2716
2715,2717
2716,2717
2716,2718
2717,2718
2720,2721
2722,2723
2723,2724
2723,2725
2724,2725
2726,2727
2726,2728
2727,2728
2727,2729
2729,2730
2729,2731
2730,2731
2734,2735
2735,2736
2735,2737
2736,2737
2738,2739
2738,2740
2739,2740
2739,2741
2741,2742
2741,2743
2742,2743
2746,2747
2747,2748
2747,2749
2748,2749
2748,2750
2749,2750
2752,2753
2752,2754
2753,2754
2753,2755
2754,2755
2757,2758
2759,2760
2759,2761
2760,2761
2761,2762
2762,2763
2762,2764
2763,2764
2763,2765
2764,2765
2767,2768
2769,2770
2770,2771
2770,2772
2771,2772
2771,2773
2772,2773
2775,2776
2775,2777
2776,2777
2776,2778
2777,2778
2780,2781
2780,2782
2781,2782
2784,2785
2784,2786
2785,2786
2785,2787
2786,2787
2787,2788
2787,2789
2788,2789
2788,2790
2789,2790
2792,2793
2792,2794
2793,2794
2796,2797
2797,2798
2797,2799
2798,2799
2798,2800
2799,2800
2802,2803
2802,2804
2803,2804
2803,2805
2804,2805
2807,2808
2809,2810
2809,2811
2810,2811
2811,2812
2811,2813
2811,2814
2811,2815
2812,2813
2814,2815
2814,2816
2815,2816
2818,2819
2821,2822
2823,2824
2823,2825
2824,2825
2824,2826
2825,2826
2825,2827
2826,2827
2830,2831
2831,2832
2832,2833
2832,2834
2833,2834
2836,2837
2836,2838
2837,2838
2839,2840
2840,2841
2841,2842
2841,2843
2842,2843
2845,2846
2845,2847
2846,2847
2848,2849
2849,2850
2849,2851
2850,2851
2850,2852
2851,2852
2851,2853
2851,2854
2852,2853
2854,2855
2856,2857
2858,2859
2859,2860
2859,2861
2860,2861
2860,2862
2861,2862
2865,2866
2865,2867
2865,2868
2865,2869
2866,2867
2867,2868
2867,2869
2868,2869
2870,2871
2872,2873
2873,2874
2873,2875
2874,2875
2876,2877
2876,2878
2879,2880
2879,2881
2879,2882
2880,2881
2881,2882
2881,2883
2882,2883
2882,2884
2883,2884
2886,2887
2886,2888
2887,2888
2889,2890
2891,2892
2891,2893
2892,2893
2893,2894
2895,2896
2896,2897
2898,2899
2898,2900
2899,2900
2899,2901
2900,2901
2900,2902
2901,2902
2903,2904
2905,2906
2905,2907
2906,2907
2907,2908
2907,2909
2907,2910
2907,2911
2908,2909
2910,2911
2910,2912
2911,2912
2914,2915
2917,2918
2919,2920
2919,2921
2920,2921
2920,2922
2921,2922
2921,2923
2922,2923
2925,2926
2928,2929
2928,2930
2928,2931
2929,2930
2930,2931
2931,2932
2931,2933
2932,2933
2932,2934
2933,2934
2936,2937
2938,2939
2939,2940
2939,2941
2940,2941
2940,2942
2941,2942
2944,2945
2944,2946
2945,2946
2945,2947
2946,2947
2946,2948
2947,2948
2947,2949
2948,2949
2952,2953
2952,2954
2953,2954
2957,2958
2958,2959
2958,2960
2959,2960
2959,2961
2960,2961
2963,2964
2963,2965
2964,2965
2964,2966
2965,2966
2965,2967
2966,2967
2966,2968
2967,2968
2971,2972
2971,2973
2972,2973
2976,2977
2977,2978
2977,2979
2978,2979
2980,2981
2980,2982
2981,2982
2983,2984
2985,2986
2985,2987
2986,2987
2986,2988
2987,2988
2989,2990
2991,2992
2991,2993
2992,2993
2993,2994
2993,2995
2993,2996
2993,2997
2994,2995
2996,2997
2996,2998
2997,2998
3000,3001
3003,3004
3005,3006
3005,3007
3005,3008
3006,3007
3007,3008
3008,3009
3008,3010
3009,3010
3009,3011
3010,3011
3013,3014
3015,3016
3015,3017
3015,3018
3015,3019
3015,3020
3015,3021
3015,3022
3015,3023
3015,3024
3015,3025
3015,3026
3015,3027
3016,3017
3017,3018
3017,3019
3018,3019
3020,3021
3020,3022
3023,3024
3024,3025
3024,3026
3025,3026
3027,3028
3029,3030
3030,3031
3030,3032
3031,3032
3033,3034
3033,3035
3036,3037
3037,3038
3037,3039
3038,3039
3040,3041
3042,3043
3043,3044
3043,3045
3044,3045
3045,3046
3045,3047
3046,3047
3046,3048
3047,3048
3049,3050
3051,3052
3053,3054
3053,3055
3054,3055
3054,3056
3055,3056
3058,3059
3060,3061
3060,3062
3061,3062
3061,3063
3062,3063
3062,3064
3063,3064
3066,3067
3068,3069
3069,3070
3069,3071
3070,3071
3072,3073
3072,3074
3073,3074
3073,3075
3074,3075
3076,3077
3078,3079
3080,3081
3081,3082
3081,3083
3082,3083
3085,3086
3086,3087
3086,3088
3087,3088
3089,3090
3091,3092
3091,3093
3091,3094
3091,3095
3092,3093
3093,3094
3093,3095
3094,3095
3097,3098
3097,3099
3098,3099
3100,3101
3102,3103
3103,3104
3105,3106
3105,3107
3105,3108
3105,3109
3105,3110
3105,3111
3105,3112
3105,3113
3105,3114
3105,3115
3105,3116
3105,3117
3105,3118
3106,3107
3107,3108
3107,3109
3108,3109
3109,3110
3109,3111
3110,3111
3110,3112
3111,3112
3113,3114
3115,3116
3117,3118
3117,3119
3118,3119
3121,3122
3121,3123
3122,3123
3122,3124
3123,3124
3123,3125
3124,3125
3127,3128
3129,3130
3130,3131
3130,3132
3131,3132
3133,3134
3133,3135
3134,3135
3134,3136
3135,3136
3137,3138
3139,3140
3141,3142
3142,3143
3142,3144
3143,3144
3146,3147
3147,3148
3147,3149
3148,3149
3149,3150
3149,3151
3150,3151
3150,3152
3151,3152
3153,3154
3155,3156
3157,3158
3157,3159
3158,3159
3161,3162
3161,3163
3162,3163
3162,3164
3163,3164
3163,3165
3164,3165
3167,3168
3169,3170
3170,3171
3170,3172
3171,3172
3173,3174
3173,3175
3174,3175
3174,3176
3175,3176
3177,3178
3179,3180
3181,3182
3182,3183
3182,3184
3183,3184
3186,3187
3187,3188
3187,3189
3188,3189
3190,3191
3190,3192
3191,3192
3191,3193
3192,3193
3195,3196
3195,3197
3196,3197
3199,3200
3200,3201
3200,3202
3200,3203
3200,3204
3201,3202
3203,3204
3205,3206
3206,3207
3209,3210
3209,3211
3210,3211
3210,3212
3211,3212
3211,3213
3212,3213
3215,3216
3217,3218
3218,3219
3218,3220
3219,3220
3221,3222
3221,3223
3222,3223
3222,3224
3223,3224
3225,3226
3227,3228
3229,3230
3230,3231
3230,3232
3231,3232
3234,3235
3235,3236
3235,3237
3235,3238
3235,3239
3236,3237
3238,3239
3240,3241
3241,3242
3241,3243
3242,3243
3246,3247
3247,3248
3247,3249
3248,3249
3251,3252
3252,3253
3253,3254
3255,3256
3256,3257
3256,3258
3257,3258
3259,3260
3259,3261
3260,3261
3260,3262
3261,3262
3264,3265
3264,3266
3265,3266
3268,3269
3268,3270
3269,3270
3269,3271
3270,3271
3270,3272
3271,3272
3274,3275
3276,3277
3277,3278
3277,3279
3278,3279
3280,3281
3281,3282
3283,3284
3284,3285
3284,3286
3284,3287
3284,3288
3285,3286
3287,3288
3289,3290
3290,3291
3293,3294
3293,3295
3293,3296
3293,3297
3293,3298
3293,3299
3293,3300
3293,3301
3293,3302
3293,3303
3294,3295
3295,3296
3295,3297
3296,3297
3298,3299
3298,3300
3301,3302
3302,3303
3302,3304
3303,3304
3305,3306
3305,3307
3308,3309
3309,3310
3309,3311
3310,3311
3312,3313
3314,3315
3315,3316
3315,3317
3316,3317
3317,3318
3317,3319
3318,3319
3318,3320
3319,3320
3321,3322
3323,3324
3325,3326
3327,3328
3327,3329
3328,3329
3328,3330
3329,3330
3329,3331
3330,3331
3333,3334
3335,3336
3336,3337
3336,3338
3337,3338
3339,3340
3339,3341
3340,3341
3340,3342
3341,3342
3343,3344
3345,3346
3347,3348
3348,3349
3348,3350
3349,3350
3352,3353
3353,3354
3353,3355
3354,3355
3356,3357
3358,3359
3358,3360
3358,3361
3358,3362
3359,3360
3360,3361
3360,3362
3361,3362
3364,3365
3364,3366
3365,3366
3367,3368
3369,3370
3370,3371
3372,3373
3372,3374
3372,3375
3372,3376
3372,3377
3372,3378
3372,3379
3372,3380
3372,3381
3372,3382
3372,3383
3372,3384
3373,3374
3374,3375
3374,3376
3375,3376
3376,3377
3376,3378
3377,3378
3377,3379
3378,3379
3380,3381
3382,3383
3384,3385
3384,3386
3385,3386
3388,3389
3388,3390
3389,3390
3389,3391
3390,3391
3390,3392
3391,3392
3394,3395
3396,3397
3397,3398
3397,3399
3398,3399
3400,3401
3400,3402
3401,3402
3401,3403
3402,3403
3404,3405
3406,3407
3408,3409
3409,3410
3409,3411
3410,3411
3413,3414
3414,3415
3414,3416
3415,3416
3416,3417
3416,3418
3417,3418
3417,3419
3418,3419
3420,3421
3422,3423
3424,3425
3424,3426
3425,3426
3428,3429
3428,3430
3429,3430
3429,3431
3430,3431
3430,3432
3431,3432
3434,3435
3436,3437
3437,3438
3437,3439
3438,3439
3440,3441
3440,3442
3441,3442
3441,3443
3442,3443
3444,3445
3446,3447
3448,3449
3449,3450
3449,3451
3450,3451
3453,3454
3454,3455
3454,3456
3454,3457
3454,3458
3455,3456
3457,3458
3459,3460
3460,3461
3460,3462
3461,3462
3465,3466
3465,3467
3466,3467
3466,3468
3467,3468
3467,3469
3468,3469
3471,3472
3473,3474
3474,3475
3474,3476
3475,3476
3477,3478
3477,3479
3478,3479
3478,3480
3479,3480
3481,3482
3483,3484
3485,3486
3486,3487
3486,3488
3487,3488
3490,3491
3491,3492
3491,3493
3491,3494
3491,3495
3492,3493
3494,3495
3496,3497
3497,3498
3497,3499
3498,3499
3502,3503
3503,3504
3503,3505
3504,3505
3507,3508
3508,3509
3509,3510
3511,3512
3512,3513
3512,3514
3512,3515
3512,3516
3513,3514
3515,3516
3517,3518
3518,3519
3518,3520
3519,3520
3523,3524
3523,3525
3524,3525
3524,3526
3525,3526
3525,3527
3526,3527
3529,3530
3531,3532
3532,3533
3532,3534
3533,3534
3535,3536
3535,3537
3536,3537
3536,3538
3537,3538
3539,3540
3541,3542
3543,3544
3544,3545
3544,3546
3545,3546
3547,3548
3549,3550
3550,3551
3550,3552
3551,3552
3553,3554
3555,3556
3555,3557
3556,3557
3557,3558
3557,3559
3557,3560
3558,3559
3560,3561
3562,3563
3562,3564
3563,3564
3566,3567
3566,3568
3567,3568
3568,3569
3568,3570
3568,3571
3568,3572
3569,3570
3571,3572
3571,3573
3572,3573
3575,3576
3578,3579
3580,3581
3580,3582
3581,3582
3582,3583
3582,3584
3582,3585
3582,3586
3583,3584
3585,3586
3587,3588
3589,3590
3589,3591
3590,3591
3590,3592
3591,3592
3594,3595
3596,3597
3596,3598
3597,3598
3598,3599
3598,3600
3598,3601
3598,3602
3599,3600
3601,3602
3601,3603
3602,3603
3605,3606
3608,3609
3610,3611
3611,3612
3611,3613
3612,3613
3614,3615
3616,3617
3616,3618
3617,3618
3619,3620
3619,3621
3619,3622
3619,3623
3619,3624
3620,3621
3621,3622
3621,3623
3622,3623
3624,3625
3626,3627
3627,3628
3627,3629
3628,3629
3628,3630
3629,3630
3632,3633
3633,3634
3635,3636
3636,3637
3636,3638
3637,3638
3637,3639
3638,3639
3641,3642
3642,3643
3644,3645
3645,3646
3645,3647
3646,3647
3647,3648
3648,3649
3648,3650
3649,3650
3652,3653
3654,3655
3655,3656
3655,3657
3656,3657
3658,3659
3660,3661
3661,3662
3663,3664
3663,3665
3665,3666
3665,3667
3666,3667
3666,3668
3667,3668
3669,3670
3671,3672
3672,3673
3672,3674
3673,3674
3675,3676
3677,3678
3677,3679
3678,3679
3678,3680
3679,3680
3681,3682
3683,3684
3684,3685
3684,3686
3685,3686
3687,3688
3689,3690
3690,3691
-----nextToken-----
2,4,7,9,10,12,14,16,18,21,23,24,28,30,31,33,37,39,43,45,46,50,52,55,57,58,62,64,69,70,72,75,79,81,84,90,91,93,99,100,103,111,112,114,119,122,123,125,126,129,136,137,139,145,146,147,153,154,156,157,163,165,170,173,174,176,177,180,187,188,190,193,194,199,202,203,208,209,211,216,217,218,223,224,225,230,231,232,237,238,239,244,245,250,252,256,258,262,264,268,269,271,276,277,280,285,287,289,295,297,300,302,304,308,309,310,312,317,319,322,324,326,330,331,332,334,338,340,342,348,350,353,355,357,361,362,363,365,370,372,375,377,379,383,384,385,387,391,393,395,401,403,406,408,410,414,415,416,418,423,425,428,430,432,436,437,438,440,444,446,448,454,456,459,461,463,467,468,469,471,476,478,481,483,485,489,490,491,493,497,499,501,507,509,512,514,516,520,521,522,524,528,530,532,538,540,543,545,547,551,552,553,555,559,561,563,569,571,574,576,578,582,583,584,586,590,592,594,600,602,605,607,609,613,614,615,617,621,623,625,631,633,636,638,640,644,645,646,648,652,654,656,662,664,667,669,671,675,676,677,679,683,685,687,693,695,698,700,702,706,707,708,710,714,716,718,724,726,729,731,733,737,738,739,741,745,747,749,755,757,760,762,764,768,769,770,772,776,778,780,786,788,791,793,795,799,800,801,803,807,809,811,817,819,822,824,826,830,831,832,834,838,840,842,848,850,853,855,857,861,862,863,865,869,871,873,879,881,884,886,888,892,893,894,896,900,902,904,910,912,915,917,919,920,926,927,928,929,931,935,937,939,945,947,953,955,958,960,962,966,967,968,972,973,974,976,982,984,987,989,991,995,996,997,1001,1002,1003,1005,1009,1011,1013,1019,1021,1029,1030,1031,1033,1037,1039,1042,1044,1046,1050,1051,1052,1056,1057,1058,1060,1066,1068,1071,1073,1075,1079,1080,1081,1085,1086,1087,1089,1093,1095,1097,1103,1105,1108,1110,1112,1116,1118,1120,1126,1127,1128,1133,1135,1139,1141,1142,1146,1148,1150,1153,1156,1161,1163,1166,1168,1170,1172,1174,1176,1180,1182,1184,1190,1192,1195,1197,1199,1203,1204,1205,1207,1211,1213,1215,1221,1223,1226,1228,1230,1234,1235,1236,1240,1241,1242,1244,1248,1250,1252,1258,1260,1263,1265,1267,1271,1272,1273,1277,1278,1279,1281,1285,1287,1289,1295,1297,1300,1302,1304,1308,1309,1310,1312,1316,1318,1320,1326,1328,1331,1333,1335,1339,1340,1341,1343,1347,1349,1351,1357,1359,1362,1364,1366,1367,1373,1374,1375,1376,1378,1382,1384,1386,1392,1394,1397,1399,1401,1402,1408,1409,1410,1411,1413,1417,1419,1421,1427,1429,1432,1434,1436,1440,1441,1442,1444,1448,1450,1452,1458,1460,1463,1465,1467,1468,1472,1473,1474,1476,1480,1482,1484,1490,1492,1495,1497,1499,1503,1505,1507,1513,1515,1518,1520,1522,1526,1527,1528,1532,1533,1534,1536,1540,1542,1544,1550,1552,1555,1557,1559,1564,1566,1571,1572,1575,1578,1579,1582,1587,1589,1590,1594,1598,1599,1601,1608,1609,1611,1615,1617,1620,1621,1626,1627,1631,1636,1638,1641,1643,1644,1648,1652,1653,1655,1659,1663,1664,1666,1670,1674,1675,1676,1680,1682,1685,1686,1689,1693,1697,1700,1702,1707,1709,1712,1714,1718,1719,1722,1723,1725,1727,1729,1730,1733,1738,1740,1744,1748,1749,1751,1755,1759,1760,1761,1765,1769,1770,1771,1775,1777,1780,1781,1784,1789,1791,1794,1796,1800,1801,1804,1805,1807,1809,1810,1813,1818,1820,1824,1828,1829,1831,1835,1839,1840,1841,1845,1849,1850,1851,1855,1857,1860,1861,1864,1869,1871,1874,1876,1880,1881,1884,1885,1887,1889,1890,1893,1898,1900,1903,1905,1906,1910,1914,1915,1917,1921,1925,1926,1928,1932,1936,1937,1938,1942,1944,1947,1948,1951,1954,1959,1961,1964,1966,1970,1971,1974,1975,1977,1979,1981,1982,1983,1987,1988,1989,1994,1995,1998,2002,2006,2007,2008,2011,2016,2018,2023,2024,2031,2032,2033,2035,2036,2037,2041,2043,2050,2051,2052,2054,2055,2063,2064,2065,2067,2068,2069,2073,2078,2080,2083,2085,2087,2089,2095,2096,2097,2099,2100,2102,2103,2106,2111,2113,2116,2118,2120,2122,2128,2129,2130,2132,2133,2135,2136,2139,2144,2146,2149,2151,2153,2155,2161,2162,2163,2165,2166,2168,2169,2172,2177,2179,2182,2184,2186,2188,2194,2195,2196,2198,2199,2201,2202,2205,2210,2212,2215,2217,2219,2221,2227,2228,2229,2231,2232,2234,2235,2238,2243,2245,2248,2250,2252,2254,2260,2261,2262,2264,2265,2267,2268,2271,2276,2278,2281,2283,2285,2287,2293,2294,2295,2297,2298,2300,2301,2304,2309,2311,2314,2316,2318,2320,2326,2327,2328,2330,2331,2333,2334,2337,2342,2344,2347,2349,2351,2353,2359,2360,2361,2363,2364,2366,2367,2370,2375,2377,2380,2382,2384,2386,2392,2393,2394,2396,2397,2399,2400,2403,2408,2410,2413,2415,2417,2419,2425,2426,2427,2429,2430,2432,2433,2436,2441,2443,2446,2448,2450,2452,2458,2459,2460,2462,2463,2465,2466,2469,2474,2476,2479,2481,2483,2485,2491,2492,2493,2495,2496,2498,2499,2502,2507,2509,2512,2514,2516,2518,2524,2525,2526,2528,2529,2531,2532,2535,2540,2542,2545,2547,2549,2551,2557,2558,2559,2561,2562,2564,2565,2568,2573,2575,2578,2580,2582,2584,2590,2591,2592,2594,2595,2597,2598,2599,2603,2604,2605,2609,2611,2612,2616,2619,2622,2626,2627,2631,2633,2638,2641,2642,2644,2645,2647,2650,2658,2659,2660,2665,2667,2669,2674,2675,2681,2683,2684,2686,2687,2694,2695,2696,2700,2702,2707,2710,2711,2718,2719,2721,2725,2728,2731,2732,2733,2737,2740,2743,2744,2745,2750,2751,2755,2756,2758,2765,2766,2768,2773,2774,2778,2779,2782,2783,2790,2791,2794,2795,2800,2801,2805,2806,2808,2813,2816,2817,2819,2820,2822,2827,2828,2829,2834,2835,2838,2843,2844,2847,2853,2855,2857,2862,2863,2864,2869,2871,2875,2877,2878,2884,2885,2888,2890,2894,2897,2902,2904,2909,2912,2913,2915,2916,2918,2923,2924,2926,2927,2934,2935,2937,2942,2943,2949,2950,2951,2954,2955,2956,2961,2962,2968,2969,2970,2973,2974,2975,2979,2982,2984,2988,2990,2995,2998,2999,3001,3002,3004,3011,3012,3014,3019,3021,3022,3026,3028,3032,3034,3035,3039,3041,3048,3050,3052,3056,3057,3059,3064,3065,3067,3071,3075,3077,3079,3083,3084,3088,3090,3095,3096,3099,3101,3104,3112,3114,3116,3119,3120,3125,3126,3128,3132,3136,3138,3140,3144,3145,3152,3154,3156,3159,3160,3165,3166,3168,3172,3176,3178,3180,3184,3185,3189,3193,3194,3197,3198,3202,3204,3207,3208,3213,3214,3216,3220,3224,3226,3228,3232,3233,3237,3239,3243,3244,3245,3249,3250,3254,3258,3262,3263,3266,3267,3272,3273,3275,3279,3282,3286,3288,3291,3292,3297,3299,3300,3304,3306,3307,3311,3313,3320,3322,3324,3326,3331,3332,3334,3338,3342,3344,3346,3350,3351,3355,3357,3362,3363,3366,3368,3371,3379,3381,3383,3386,3387,3392,3393,3395,3399,3403,3405,3407,3411,3412,3419,3421,3423,3426,3427,3432,3433,3435,3439,3443,3445,3447,3451,3452,3456,3458,3462,3463,3464,3469,3470,3472,3476,3480,3482,3484,3488,3489,3493,3495,3499,3500,3501,3505,3506,3510,3514,3516,3520,3521,3522,3527,3528,3530,3534,3538,3540,3542,3546,3548,3552,3554,3559,3561,3564,3565,3570,3573,3574,3576,3577,3579,3584,3586,3588,3592,3593,3595,3600,3603,3604,3606,3607,3609,3613,3615,3618,3623,3625,3630,3631,3634,3639,3640,3643,3650,3651,3653,3657,3659,3662,3664,3668,3670,3674,3676,3680,3682,3686,3688,3691
-----computeFrom-----
66,67
66,68
87,88
87,89
96,97
96,98
141,142
141,143
142,143
142,144
148,149
148,150
150,151
150,152
182,183
182,184
184,185
184,186
205,206
205,207
213,214
213,215
220,221
220,222
227,228
227,229
234,235
234,236
241,242
241,243
248,249
248,250
254,255
254,256
260,261
260,262
266,267
266,268
274,275
274,276
1024,1025
1024,1026
1025,1026
1025,1027
1569,1570
1569,1571
1573,1574
1573,1575
1592,1593
1592,1594
1603,1604
1603,1605
1605,1606
1605,1607
1649,1650
1649,1651
1660,1661
1660,1662
1671,1672
1671,1673
1691,1692
1691,1693
1745,1746
1745,1747
1756,1757
1756,1758
1766,1767
1766,1768
1825,1826
1825,1827
1836,1837
1836,1838
1846,1847
1846,1848
1911,1912
1911,1913
1922,1923
1922,1924
1933,1934
1933,1935
1992,1993
1992,1994
1996,1997
1996,1998
2607,2608
2607,2609
2614,2615
2614,2616
2620,2621
2620,2622
2629,2630
2629,2631
2653,2654
2653,2655
2655,2656
2655,2657
2671,2672
2671,2673
2676,2677
2676,2678
2678,2679
2678,2680
2698,2699
2698,2700
2704,2705
2704,2706
2715,2716
2715,2717
2723,2724
2723,2725
2726,2727
2726,2728
2727,2728
2727,2729
2729,2730
2729,2731
2735,2736
2735,2737
2738,2739
2738,2740
2739,2740
2739,2741
2741,2742
2741,2743
2747,2748
2747,2749
2752,2753
2752,2754
2762,2763
2762,2764
2770,2771
2770,2772
2785,2786
2785,2787
2787,2788
2787,2789
2797,2798
2797,2799
2824,2825
2824,2826
2850,2851
2850,2852
2859,2860
2859,2861
2882,2883
2882,2884
2886,2887
2886,2888
2900,2901
2900,2902
2920,2921
2920,2922
2931,2932
2931,2933
2939,2940
2939,2941
2944,2945
2944,2946
2945,2946
2945,2947
2946,2947
2946,2948
2952,2953
2952,2954
2958,2959
2958,2960
2963,2964
2963,2965
2964,2965
2964,2966
2965,2966
2965,2967
2971,2972
2971,2973
2977,2978
2977,2979
2986,2987
2986,2988
3008,3009
3008,3010
3037,3038
3037,3039
3043,3044
3043,3045
3061,3062
3061,3063
3081,3082
3081,3083
3086,3087
3086,3088
3093,3094
3093,3095
3097,3098
3097,3099
3107,3108
3107,3109
3122,3123
3122,3124
3142,3143
3142,3144
3147,3148
3147,3149
3162,3163
3162,3164
3182,3183
3182,3184
3187,3188
3187,3189
3210,3211
3210,3212
3230,3231
3230,3232
3247,3248
3247,3249
3256,3257
3256,3258
3269,3270
3269,3271
3309,3310
3309,3311
3315,3316
3315,3317
3328,3329
3328,3330
3348,3349
3348,3350
3353,3354
3353,3355
3360,3361
3360,3362
3364,3365
3364,3366
3374,3375
3374,3376
3389,3390
3389,3391
3409,3410
3409,3411
3414,3415
3414,3416
3429,3430
3429,3431
3449,3450
3449,3451
3466,3467
3466,3468
3486,3487
3486,3488
3503,3504
3503,3505
3524,3525
3524,3526
3550,3551
3550,3552
3627,3628
3627,3629
3636,3637
3636,3638
3666,3667
3666,3668
3678,3679
3678,3680
-----guardedBy-----
90,122
93,103
91,100
153,173
193,237
194,209
1617,1961
1620,1974
2700,2707
2800,2816
2827,2834
2828,2835
2862,2968
2863,2962
3668,3676
3680,3688
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;SwitchStatement;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;GotoStatement;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static intTIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff){	static const char module[] = "TIFFWriteDirectorySec";	uint32 ndir;	TIFFDirEntry* dir;	uint32 dirsize;	void* dirmem;	uint32 m;	if (tif->tif_mode == O_RDONLY)		return (1);        _TIFFFillStriles( tif );        	/*	 * Clear write state so that subsequent images with	 * different characteristics get the right buffers	 * setup for them.	 */	if (imagedone)	{		if (tif->tif_flags & TIFF_POSTENCODE)		{			tif->tif_flags &= ~TIFF_POSTENCODE;			if (!(*tif->tif_postencode)(tif))			{				TIFFErrorExt(tif->tif_clientdata,module,				    "Error post-encoding before directory write");				return (0);			}		}		(*tif->tif_close)(tif);       /* shutdown encoder */		/*		 * Flush any data that might have been written		 * by the compression close+cleanup routines.  But                 * be careful not to write stuff if we didn't add data                 * in the previous steps as the "rawcc" data may well be                 * a previously read tile/strip in mixed read/write mode.		 */		if (tif->tif_rawcc > 0 		    && (tif->tif_flags & TIFF_BEENWRITING) != 0 )		{		    if( !TIFFFlushData1(tif) )                    {			TIFFErrorExt(tif->tif_clientdata, module,			    "Error flushing data before directory write");			return (0);                    }		}		if ((tif->tif_flags & TIFF_MYBUFFER) && tif->tif_rawdata)		{			_TIFFfree(tif->tif_rawdata);			tif->tif_rawdata = NULL;			tif->tif_rawcc = 0;			tif->tif_rawdatasize = 0;                        tif->tif_rawdataoff = 0;                        tif->tif_rawdataloaded = 0;		}		tif->tif_flags &= ~(TIFF_BEENWRITING|TIFF_BUFFERSETUP);	}	dir=NULL;	dirmem=NULL;	dirsize=0;	while (1)	{		ndir=0;		if (isimage)		{			if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_POSITION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBFILETYPE))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_COMPRESSION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_THRESHHOLDING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_FILLORDER))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ORIENTATION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PLANARCONFIG))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PAGENUMBER))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_STRIPBYTECOUNTS))			{				if (!isTiled(tif))				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_STRIPOFFSETS))			{				if (!isTiled(tif))				{                    /* td_stripoffset might be NULL in an odd OJPEG case. See                     *  tif_dirread.c around line 3634.                     * XXX: OJPEG hack.                     * If a) compression is OJPEG, b) it's not a tiled TIFF,                     * and c) the number of strips is 1,                     * then we tolerate the absence of stripoffsets tag,                     * because, presumably, all required data is in the                     * JpegInterchangeFormat stream.                     * We can get here when using tiffset on such a file.                     * See http://bugzilla.maptools.org/show_bug.cgi?id=2500                    */                    if (tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))                        goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_COLORMAP))			{				if (!TIFFWriteDirectoryTagColormap(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES))			{				if (tif->tif_dir.td_extrasamples)				{					uint16 na;					uint16* nb;					TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE))			{				if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION))			{				if (!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_INKNAMES))			{				if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBIFD))			{				if (!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir))					goto bad;			}			{				uint32 n;				for (n=0; n<tif->tif_nfields; n++) {					const TIFFField* o;					o = tif->tif_fields[n];					if ((o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit)))					{						switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}					}				}			}		}		for (m=0; m<(uint32)(tif->tif_dir.td_customValueCount); m++)		{                        uint16 tag = (uint16)tif->tif_dir.td_customValues[m].info->field_tag;                        uint32 count = tif->tif_dir.td_customValues[m].count;			switch (tif->tif_dir.td_customValues[m].info->field_type)			{				case TIFF_ASCII:					if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_UNDEFINED:					if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_BYTE:					if (!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SBYTE:					if (!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SHORT:					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SSHORT:					if (!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG:					if (!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG:					if (!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG8:					if (!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG8:					if (!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_RATIONAL:					if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SRATIONAL:					if (!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_FLOAT:					if (!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_DOUBLE:					if (!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD:					if (!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD8:					if (!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				default:					assert(0);   /* we should never get here */					break;			}		}		if (dir!=NULL)			break;		dir=_TIFFmalloc(ndir*sizeof(TIFFDirEntry));		if (dir==NULL)		{			TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");			goto bad;		}		if (isimage)		{			if ((tif->tif_diroff==0)&&(!TIFFLinkDirectory(tif)))				goto bad;		}		else			tif->tif_diroff=(TIFFSeekFile(tif,0,SEEK_END)+1)&(~((toff_t)1));		if (pdiroff!=NULL)			*pdiroff=tif->tif_diroff;		if (!(tif->tif_flags&TIFF_BIGTIFF))			dirsize=2+ndir*12+4;		else			dirsize=8+ndir*20+8;		tif->tif_dataoff=tif->tif_diroff+dirsize;		if (!(tif->tif_flags&TIFF_BIGTIFF))			tif->tif_dataoff=(uint32)tif->tif_dataoff;		if ((tif->tif_dataoff<tif->tif_diroff)||(tif->tif_dataoff<(uint64)dirsize))		{			TIFFErrorExt(tif->tif_clientdata,module,"Maximum TIFF file size exceeded");			goto bad;		}		if (tif->tif_dataoff&1)			tif->tif_dataoff++;		if (isimage)			tif->tif_curdir++;	}	if (isimage)	{		if (TIFFFieldSet(tif,FIELD_SUBIFD)&&(tif->tif_subifdoff==0))		{			uint32 na;			TIFFDirEntry* nb;			for (na=0, nb=dir; ; na++, nb++)			{				if( na == ndir )                                {                                    TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag");                                    goto bad;                                }				if (nb->tdir_tag==TIFFTAG_SUBIFD)					break;			}			if (!(tif->tif_flags&TIFF_BIGTIFF))				tif->tif_subifdoff=tif->tif_diroff+2+na*12+8;			else				tif->tif_subifdoff=tif->tif_diroff+8+na*20+12;		}	}	dirmem=_TIFFmalloc(dirsize);	if (dirmem==NULL)	{		TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");		goto bad;	}	if (!(tif->tif_flags&TIFF_BIGTIFF))	{		uint8* n;		uint32 nTmp;		TIFFDirEntry* o;		n=dirmem;		*(uint16*)n=(uint16)ndir;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)n);		n+=2;		o=dir;		for (m=0; m<ndir; m++)		{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			nTmp = (uint32)o->tdir_count;			_TIFFmemcpy(n,&nTmp,4);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)n);			n+=4;			/* This is correct. The data has been */			/* swabbed previously in TIFFWriteDirectoryTagData */			_TIFFmemcpy(n,&o->tdir_offset,4);			n+=4;			o++;		}		nTmp = (uint32)tif->tif_nextdiroff;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong(&nTmp);		_TIFFmemcpy(n,&nTmp,4);	}	else	{		uint8* n;		TIFFDirEntry* o;		n=dirmem;		*(uint64*)n=ndir;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong8((uint64*)n);		n+=8;		o=dir;		for (m=0; m<ndir; m++)		{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			_TIFFmemcpy(n,&o->tdir_count,8);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)n);			n+=8;			_TIFFmemcpy(n,&o->tdir_offset,8);			n+=8;			o++;		}		_TIFFmemcpy(n,&tif->tif_nextdiroff,8);		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong8((uint64*)n);	}	_TIFFfree(dir);	dir=NULL;	if (!SeekOK(tif,tif->tif_diroff))	{		TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");		goto bad;	}	if (!WriteOK(tif,dirmem,(tmsize_t)dirsize))	{		TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");		goto bad;	}	_TIFFfree(dirmem);	if (imagedone)	{		TIFFFreeDirectory(tif);		tif->tif_flags &= ~TIFF_DIRTYDIRECT;		tif->tif_flags &= ~TIFF_DIRTYSTRIP;		(*tif->tif_cleanup)(tif);		/*		* Reset directory-related state for subsequent		* directories.		*/		TIFFCreateDirectory(tif);	}	return(1);bad:	if (dir!=NULL)		_TIFFfree(dir);	if (dirmem!=NULL)		_TIFFfree(dirmem);	return(0);}
static int
TIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff)
TIFFWriteDirectorySec
TIFF* tif
TIFF
TIFF
* tif
*
tif
int isimage
int
isimage
isimage
int imagedone
int
imagedone
imagedone
uint64* pdiroff
uint64
uint64
* pdiroff
*
pdiroff
{	static const char module[] = "TIFFWriteDirectorySec";	uint32 ndir;	TIFFDirEntry* dir;	uint32 dirsize;	void* dirmem;	uint32 m;	if (tif->tif_mode == O_RDONLY)		return (1);        _TIFFFillStriles( tif );        	/*	 * Clear write state so that subsequent images with	 * different characteristics get the right buffers	 * setup for them.	 */	if (imagedone)	{		if (tif->tif_flags & TIFF_POSTENCODE)		{			tif->tif_flags &= ~TIFF_POSTENCODE;			if (!(*tif->tif_postencode)(tif))			{				TIFFErrorExt(tif->tif_clientdata,module,				    "Error post-encoding before directory write");				return (0);			}		}		(*tif->tif_close)(tif);       /* shutdown encoder */		/*		 * Flush any data that might have been written		 * by the compression close+cleanup routines.  But                 * be careful not to write stuff if we didn't add data                 * in the previous steps as the "rawcc" data may well be                 * a previously read tile/strip in mixed read/write mode.		 */		if (tif->tif_rawcc > 0 		    && (tif->tif_flags & TIFF_BEENWRITING) != 0 )		{		    if( !TIFFFlushData1(tif) )                    {			TIFFErrorExt(tif->tif_clientdata, module,			    "Error flushing data before directory write");			return (0);                    }		}		if ((tif->tif_flags & TIFF_MYBUFFER) && tif->tif_rawdata)		{			_TIFFfree(tif->tif_rawdata);			tif->tif_rawdata = NULL;			tif->tif_rawcc = 0;			tif->tif_rawdatasize = 0;                        tif->tif_rawdataoff = 0;                        tif->tif_rawdataloaded = 0;		}		tif->tif_flags &= ~(TIFF_BEENWRITING|TIFF_BUFFERSETUP);	}	dir=NULL;	dirmem=NULL;	dirsize=0;	while (1)	{		ndir=0;		if (isimage)		{			if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_POSITION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBFILETYPE))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_COMPRESSION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_THRESHHOLDING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_FILLORDER))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ORIENTATION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PLANARCONFIG))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PAGENUMBER))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_STRIPBYTECOUNTS))			{				if (!isTiled(tif))				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_STRIPOFFSETS))			{				if (!isTiled(tif))				{                    /* td_stripoffset might be NULL in an odd OJPEG case. See                     *  tif_dirread.c around line 3634.                     * XXX: OJPEG hack.                     * If a) compression is OJPEG, b) it's not a tiled TIFF,                     * and c) the number of strips is 1,                     * then we tolerate the absence of stripoffsets tag,                     * because, presumably, all required data is in the                     * JpegInterchangeFormat stream.                     * We can get here when using tiffset on such a file.                     * See http://bugzilla.maptools.org/show_bug.cgi?id=2500                    */                    if (tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))                        goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_COLORMAP))			{				if (!TIFFWriteDirectoryTagColormap(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES))			{				if (tif->tif_dir.td_extrasamples)				{					uint16 na;					uint16* nb;					TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE))			{				if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION))			{				if (!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_INKNAMES))			{				if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBIFD))			{				if (!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir))					goto bad;			}			{				uint32 n;				for (n=0; n<tif->tif_nfields; n++) {					const TIFFField* o;					o = tif->tif_fields[n];					if ((o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit)))					{						switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}					}				}			}		}		for (m=0; m<(uint32)(tif->tif_dir.td_customValueCount); m++)		{                        uint16 tag = (uint16)tif->tif_dir.td_customValues[m].info->field_tag;                        uint32 count = tif->tif_dir.td_customValues[m].count;			switch (tif->tif_dir.td_customValues[m].info->field_type)			{				case TIFF_ASCII:					if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_UNDEFINED:					if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_BYTE:					if (!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SBYTE:					if (!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SHORT:					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SSHORT:					if (!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG:					if (!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG:					if (!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG8:					if (!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG8:					if (!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_RATIONAL:					if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SRATIONAL:					if (!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_FLOAT:					if (!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_DOUBLE:					if (!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD:					if (!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD8:					if (!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				default:					assert(0);   /* we should never get here */					break;			}		}		if (dir!=NULL)			break;		dir=_TIFFmalloc(ndir*sizeof(TIFFDirEntry));		if (dir==NULL)		{			TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");			goto bad;		}		if (isimage)		{			if ((tif->tif_diroff==0)&&(!TIFFLinkDirectory(tif)))				goto bad;		}		else			tif->tif_diroff=(TIFFSeekFile(tif,0,SEEK_END)+1)&(~((toff_t)1));		if (pdiroff!=NULL)			*pdiroff=tif->tif_diroff;		if (!(tif->tif_flags&TIFF_BIGTIFF))			dirsize=2+ndir*12+4;		else			dirsize=8+ndir*20+8;		tif->tif_dataoff=tif->tif_diroff+dirsize;		if (!(tif->tif_flags&TIFF_BIGTIFF))			tif->tif_dataoff=(uint32)tif->tif_dataoff;		if ((tif->tif_dataoff<tif->tif_diroff)||(tif->tif_dataoff<(uint64)dirsize))		{			TIFFErrorExt(tif->tif_clientdata,module,"Maximum TIFF file size exceeded");			goto bad;		}		if (tif->tif_dataoff&1)			tif->tif_dataoff++;		if (isimage)			tif->tif_curdir++;	}	if (isimage)	{		if (TIFFFieldSet(tif,FIELD_SUBIFD)&&(tif->tif_subifdoff==0))		{			uint32 na;			TIFFDirEntry* nb;			for (na=0, nb=dir; ; na++, nb++)			{				if( na == ndir )                                {                                    TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag");                                    goto bad;                                }				if (nb->tdir_tag==TIFFTAG_SUBIFD)					break;			}			if (!(tif->tif_flags&TIFF_BIGTIFF))				tif->tif_subifdoff=tif->tif_diroff+2+na*12+8;			else				tif->tif_subifdoff=tif->tif_diroff+8+na*20+12;		}	}	dirmem=_TIFFmalloc(dirsize);	if (dirmem==NULL)	{		TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");		goto bad;	}	if (!(tif->tif_flags&TIFF_BIGTIFF))	{		uint8* n;		uint32 nTmp;		TIFFDirEntry* o;		n=dirmem;		*(uint16*)n=(uint16)ndir;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)n);		n+=2;		o=dir;		for (m=0; m<ndir; m++)		{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			nTmp = (uint32)o->tdir_count;			_TIFFmemcpy(n,&nTmp,4);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)n);			n+=4;			/* This is correct. The data has been */			/* swabbed previously in TIFFWriteDirectoryTagData */			_TIFFmemcpy(n,&o->tdir_offset,4);			n+=4;			o++;		}		nTmp = (uint32)tif->tif_nextdiroff;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong(&nTmp);		_TIFFmemcpy(n,&nTmp,4);	}	else	{		uint8* n;		TIFFDirEntry* o;		n=dirmem;		*(uint64*)n=ndir;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong8((uint64*)n);		n+=8;		o=dir;		for (m=0; m<ndir; m++)		{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			_TIFFmemcpy(n,&o->tdir_count,8);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)n);			n+=8;			_TIFFmemcpy(n,&o->tdir_offset,8);			n+=8;			o++;		}		_TIFFmemcpy(n,&tif->tif_nextdiroff,8);		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong8((uint64*)n);	}	_TIFFfree(dir);	dir=NULL;	if (!SeekOK(tif,tif->tif_diroff))	{		TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");		goto bad;	}	if (!WriteOK(tif,dirmem,(tmsize_t)dirsize))	{		TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");		goto bad;	}	_TIFFfree(dirmem);	if (imagedone)	{		TIFFFreeDirectory(tif);		tif->tif_flags &= ~TIFF_DIRTYDIRECT;		tif->tif_flags &= ~TIFF_DIRTYSTRIP;		(*tif->tif_cleanup)(tif);		/*		* Reset directory-related state for subsequent		* directories.		*/		TIFFCreateDirectory(tif);	}	return(1);bad:	if (dir!=NULL)		_TIFFfree(dir);	if (dirmem!=NULL)		_TIFFfree(dirmem);	return(0);}
static const char module[] = "TIFFWriteDirectorySec";
static const char module[] = "TIFFWriteDirectorySec";
static const char
module[] = "TIFFWriteDirectorySec"
module
[]
= "TIFFWriteDirectorySec"
"TIFFWriteDirectorySec"
uint32 ndir;
uint32 ndir;
uint32
uint32
ndir
ndir
TIFFDirEntry* dir;
TIFFDirEntry* dir;
TIFFDirEntry
TIFFDirEntry
* dir
*
dir
uint32 dirsize;
uint32 dirsize;
uint32
uint32
dirsize
dirsize
void* dirmem;
void* dirmem;
void
* dirmem
*
dirmem
uint32 m;
uint32 m;
uint32
uint32
m
m
if (tif->tif_mode == O_RDONLY)		return (1);
tif->tif_mode == O_RDONLY
tif->tif_mode
tif
tif
tif_mode
O_RDONLY
O_RDONLY
return (1);
(1)
1
_TIFFFillStriles( tif );
_TIFFFillStriles( tif )
_TIFFFillStriles
_TIFFFillStriles
tif
tif
if (imagedone)	{		if (tif->tif_flags & TIFF_POSTENCODE)		{			tif->tif_flags &= ~TIFF_POSTENCODE;			if (!(*tif->tif_postencode)(tif))			{				TIFFErrorExt(tif->tif_clientdata,module,				    "Error post-encoding before directory write");				return (0);			}		}		(*tif->tif_close)(tif);       /* shutdown encoder */		/*		 * Flush any data that might have been written		 * by the compression close+cleanup routines.  But                 * be careful not to write stuff if we didn't add data                 * in the previous steps as the "rawcc" data may well be                 * a previously read tile/strip in mixed read/write mode.		 */		if (tif->tif_rawcc > 0 		    && (tif->tif_flags & TIFF_BEENWRITING) != 0 )		{		    if( !TIFFFlushData1(tif) )                    {			TIFFErrorExt(tif->tif_clientdata, module,			    "Error flushing data before directory write");			return (0);                    }		}		if ((tif->tif_flags & TIFF_MYBUFFER) && tif->tif_rawdata)		{			_TIFFfree(tif->tif_rawdata);			tif->tif_rawdata = NULL;			tif->tif_rawcc = 0;			tif->tif_rawdatasize = 0;                        tif->tif_rawdataoff = 0;                        tif->tif_rawdataloaded = 0;		}		tif->tif_flags &= ~(TIFF_BEENWRITING|TIFF_BUFFERSETUP);	}
imagedone
imagedone
{		if (tif->tif_flags & TIFF_POSTENCODE)		{			tif->tif_flags &= ~TIFF_POSTENCODE;			if (!(*tif->tif_postencode)(tif))			{				TIFFErrorExt(tif->tif_clientdata,module,				    "Error post-encoding before directory write");				return (0);			}		}		(*tif->tif_close)(tif);       /* shutdown encoder */		/*		 * Flush any data that might have been written		 * by the compression close+cleanup routines.  But                 * be careful not to write stuff if we didn't add data                 * in the previous steps as the "rawcc" data may well be                 * a previously read tile/strip in mixed read/write mode.		 */		if (tif->tif_rawcc > 0 		    && (tif->tif_flags & TIFF_BEENWRITING) != 0 )		{		    if( !TIFFFlushData1(tif) )                    {			TIFFErrorExt(tif->tif_clientdata, module,			    "Error flushing data before directory write");			return (0);                    }		}		if ((tif->tif_flags & TIFF_MYBUFFER) && tif->tif_rawdata)		{			_TIFFfree(tif->tif_rawdata);			tif->tif_rawdata = NULL;			tif->tif_rawcc = 0;			tif->tif_rawdatasize = 0;                        tif->tif_rawdataoff = 0;                        tif->tif_rawdataloaded = 0;		}		tif->tif_flags &= ~(TIFF_BEENWRITING|TIFF_BUFFERSETUP);	}
if (tif->tif_flags & TIFF_POSTENCODE)		{			tif->tif_flags &= ~TIFF_POSTENCODE;			if (!(*tif->tif_postencode)(tif))			{				TIFFErrorExt(tif->tif_clientdata,module,				    "Error post-encoding before directory write");				return (0);			}		}
tif->tif_flags & TIFF_POSTENCODE
tif->tif_flags
tif
tif
tif_flags
TIFF_POSTENCODE
TIFF_POSTENCODE
{			tif->tif_flags &= ~TIFF_POSTENCODE;			if (!(*tif->tif_postencode)(tif))			{				TIFFErrorExt(tif->tif_clientdata,module,				    "Error post-encoding before directory write");				return (0);			}		}
tif->tif_flags &= ~TIFF_POSTENCODE;
tif->tif_flags &= ~TIFF_POSTENCODE
tif->tif_flags
tif
tif
tif_flags
~TIFF_POSTENCODE
TIFF_POSTENCODE
TIFF_POSTENCODE
if (!(*tif->tif_postencode)(tif))			{				TIFFErrorExt(tif->tif_clientdata,module,				    "Error post-encoding before directory write");				return (0);			}
!(*tif->tif_postencode)(tif)
(*tif->tif_postencode)(tif)
(*tif->tif_postencode)
*tif->tif_postencode
tif->tif_postencode
tif
tif
tif_postencode
tif
tif
{				TIFFErrorExt(tif->tif_clientdata,module,				    "Error post-encoding before directory write");				return (0);			}
TIFFErrorExt(tif->tif_clientdata,module,				    "Error post-encoding before directory write");
TIFFErrorExt(tif->tif_clientdata,module,				    "Error post-encoding before directory write")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Error post-encoding before directory write"
return (0);
(0)
0
(*tif->tif_close)(tif);
(*tif->tif_close)(tif)
(*tif->tif_close)
*tif->tif_close
tif->tif_close
tif
tif
tif_close
tif
tif
if (tif->tif_rawcc > 0 		    && (tif->tif_flags & TIFF_BEENWRITING) != 0 )		{		    if( !TIFFFlushData1(tif) )                    {			TIFFErrorExt(tif->tif_clientdata, module,			    "Error flushing data before directory write");			return (0);                    }		}
tif->tif_rawcc > 0 		    && (tif->tif_flags & TIFF_BEENWRITING) != 0
tif->tif_rawcc > 0
tif->tif_rawcc
tif
tif
tif_rawcc
0
(tif->tif_flags & TIFF_BEENWRITING) != 0
(tif->tif_flags & TIFF_BEENWRITING)
tif->tif_flags & TIFF_BEENWRITING
tif->tif_flags
tif
tif
tif_flags
TIFF_BEENWRITING
TIFF_BEENWRITING
0
{		    if( !TIFFFlushData1(tif) )                    {			TIFFErrorExt(tif->tif_clientdata, module,			    "Error flushing data before directory write");			return (0);                    }		}
if( !TIFFFlushData1(tif) )                    {			TIFFErrorExt(tif->tif_clientdata, module,			    "Error flushing data before directory write");			return (0);                    }
!TIFFFlushData1(tif)
TIFFFlushData1(tif)
TIFFFlushData1
TIFFFlushData1
tif
tif
{			TIFFErrorExt(tif->tif_clientdata, module,			    "Error flushing data before directory write");			return (0);                    }
TIFFErrorExt(tif->tif_clientdata, module,			    "Error flushing data before directory write");
TIFFErrorExt(tif->tif_clientdata, module,			    "Error flushing data before directory write")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Error flushing data before directory write"
return (0);
(0)
0
if ((tif->tif_flags & TIFF_MYBUFFER) && tif->tif_rawdata)		{			_TIFFfree(tif->tif_rawdata);			tif->tif_rawdata = NULL;			tif->tif_rawcc = 0;			tif->tif_rawdatasize = 0;                        tif->tif_rawdataoff = 0;                        tif->tif_rawdataloaded = 0;		}
(tif->tif_flags & TIFF_MYBUFFER) && tif->tif_rawdata
(tif->tif_flags & TIFF_MYBUFFER)
tif->tif_flags & TIFF_MYBUFFER
tif->tif_flags
tif
tif
tif_flags
TIFF_MYBUFFER
TIFF_MYBUFFER
tif->tif_rawdata
tif
tif
tif_rawdata
{			_TIFFfree(tif->tif_rawdata);			tif->tif_rawdata = NULL;			tif->tif_rawcc = 0;			tif->tif_rawdatasize = 0;                        tif->tif_rawdataoff = 0;                        tif->tif_rawdataloaded = 0;		}
_TIFFfree(tif->tif_rawdata);
_TIFFfree(tif->tif_rawdata)
_TIFFfree
_TIFFfree
tif->tif_rawdata
tif
tif
tif_rawdata
tif->tif_rawdata = NULL;
tif->tif_rawdata = NULL
tif->tif_rawdata
tif
tif
tif_rawdata
NULL
NULL
tif->tif_rawcc = 0;
tif->tif_rawcc = 0
tif->tif_rawcc
tif
tif
tif_rawcc
0
tif->tif_rawdatasize = 0;
tif->tif_rawdatasize = 0
tif->tif_rawdatasize
tif
tif
tif_rawdatasize
0
tif->tif_rawdataoff = 0;
tif->tif_rawdataoff = 0
tif->tif_rawdataoff
tif
tif
tif_rawdataoff
0
tif->tif_rawdataloaded = 0;
tif->tif_rawdataloaded = 0
tif->tif_rawdataloaded
tif
tif
tif_rawdataloaded
0
tif->tif_flags &= ~(TIFF_BEENWRITING|TIFF_BUFFERSETUP);
tif->tif_flags &= ~(TIFF_BEENWRITING|TIFF_BUFFERSETUP)
tif->tif_flags
tif
tif
tif_flags
~(TIFF_BEENWRITING|TIFF_BUFFERSETUP)
(TIFF_BEENWRITING|TIFF_BUFFERSETUP)
TIFF_BEENWRITING|TIFF_BUFFERSETUP
TIFF_BEENWRITING
TIFF_BEENWRITING
TIFF_BUFFERSETUP
TIFF_BUFFERSETUP
dir=NULL;
dir=NULL
dir
dir
NULL
NULL
dirmem=NULL;
dirmem=NULL
dirmem
dirmem
NULL
NULL
dirsize=0;
dirsize=0
dirsize
dirsize
0
while (1)	{		ndir=0;		if (isimage)		{			if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_POSITION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBFILETYPE))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_COMPRESSION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_THRESHHOLDING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_FILLORDER))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ORIENTATION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PLANARCONFIG))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PAGENUMBER))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_STRIPBYTECOUNTS))			{				if (!isTiled(tif))				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_STRIPOFFSETS))			{				if (!isTiled(tif))				{                    /* td_stripoffset might be NULL in an odd OJPEG case. See                     *  tif_dirread.c around line 3634.                     * XXX: OJPEG hack.                     * If a) compression is OJPEG, b) it's not a tiled TIFF,                     * and c) the number of strips is 1,                     * then we tolerate the absence of stripoffsets tag,                     * because, presumably, all required data is in the                     * JpegInterchangeFormat stream.                     * We can get here when using tiffset on such a file.                     * See http://bugzilla.maptools.org/show_bug.cgi?id=2500                    */                    if (tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))                        goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_COLORMAP))			{				if (!TIFFWriteDirectoryTagColormap(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES))			{				if (tif->tif_dir.td_extrasamples)				{					uint16 na;					uint16* nb;					TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE))			{				if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION))			{				if (!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_INKNAMES))			{				if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBIFD))			{				if (!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir))					goto bad;			}			{				uint32 n;				for (n=0; n<tif->tif_nfields; n++) {					const TIFFField* o;					o = tif->tif_fields[n];					if ((o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit)))					{						switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}					}				}			}		}		for (m=0; m<(uint32)(tif->tif_dir.td_customValueCount); m++)		{                        uint16 tag = (uint16)tif->tif_dir.td_customValues[m].info->field_tag;                        uint32 count = tif->tif_dir.td_customValues[m].count;			switch (tif->tif_dir.td_customValues[m].info->field_type)			{				case TIFF_ASCII:					if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_UNDEFINED:					if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_BYTE:					if (!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SBYTE:					if (!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SHORT:					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SSHORT:					if (!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG:					if (!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG:					if (!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG8:					if (!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG8:					if (!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_RATIONAL:					if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SRATIONAL:					if (!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_FLOAT:					if (!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_DOUBLE:					if (!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD:					if (!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD8:					if (!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				default:					assert(0);   /* we should never get here */					break;			}		}		if (dir!=NULL)			break;		dir=_TIFFmalloc(ndir*sizeof(TIFFDirEntry));		if (dir==NULL)		{			TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");			goto bad;		}		if (isimage)		{			if ((tif->tif_diroff==0)&&(!TIFFLinkDirectory(tif)))				goto bad;		}		else			tif->tif_diroff=(TIFFSeekFile(tif,0,SEEK_END)+1)&(~((toff_t)1));		if (pdiroff!=NULL)			*pdiroff=tif->tif_diroff;		if (!(tif->tif_flags&TIFF_BIGTIFF))			dirsize=2+ndir*12+4;		else			dirsize=8+ndir*20+8;		tif->tif_dataoff=tif->tif_diroff+dirsize;		if (!(tif->tif_flags&TIFF_BIGTIFF))			tif->tif_dataoff=(uint32)tif->tif_dataoff;		if ((tif->tif_dataoff<tif->tif_diroff)||(tif->tif_dataoff<(uint64)dirsize))		{			TIFFErrorExt(tif->tif_clientdata,module,"Maximum TIFF file size exceeded");			goto bad;		}		if (tif->tif_dataoff&1)			tif->tif_dataoff++;		if (isimage)			tif->tif_curdir++;	}
1
{		ndir=0;		if (isimage)		{			if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_POSITION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBFILETYPE))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_COMPRESSION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_THRESHHOLDING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_FILLORDER))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ORIENTATION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PLANARCONFIG))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PAGENUMBER))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_STRIPBYTECOUNTS))			{				if (!isTiled(tif))				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_STRIPOFFSETS))			{				if (!isTiled(tif))				{                    /* td_stripoffset might be NULL in an odd OJPEG case. See                     *  tif_dirread.c around line 3634.                     * XXX: OJPEG hack.                     * If a) compression is OJPEG, b) it's not a tiled TIFF,                     * and c) the number of strips is 1,                     * then we tolerate the absence of stripoffsets tag,                     * because, presumably, all required data is in the                     * JpegInterchangeFormat stream.                     * We can get here when using tiffset on such a file.                     * See http://bugzilla.maptools.org/show_bug.cgi?id=2500                    */                    if (tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))                        goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_COLORMAP))			{				if (!TIFFWriteDirectoryTagColormap(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES))			{				if (tif->tif_dir.td_extrasamples)				{					uint16 na;					uint16* nb;					TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE))			{				if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION))			{				if (!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_INKNAMES))			{				if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBIFD))			{				if (!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir))					goto bad;			}			{				uint32 n;				for (n=0; n<tif->tif_nfields; n++) {					const TIFFField* o;					o = tif->tif_fields[n];					if ((o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit)))					{						switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}					}				}			}		}		for (m=0; m<(uint32)(tif->tif_dir.td_customValueCount); m++)		{                        uint16 tag = (uint16)tif->tif_dir.td_customValues[m].info->field_tag;                        uint32 count = tif->tif_dir.td_customValues[m].count;			switch (tif->tif_dir.td_customValues[m].info->field_type)			{				case TIFF_ASCII:					if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_UNDEFINED:					if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_BYTE:					if (!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SBYTE:					if (!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SHORT:					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SSHORT:					if (!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG:					if (!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG:					if (!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG8:					if (!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG8:					if (!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_RATIONAL:					if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SRATIONAL:					if (!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_FLOAT:					if (!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_DOUBLE:					if (!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD:					if (!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD8:					if (!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				default:					assert(0);   /* we should never get here */					break;			}		}		if (dir!=NULL)			break;		dir=_TIFFmalloc(ndir*sizeof(TIFFDirEntry));		if (dir==NULL)		{			TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");			goto bad;		}		if (isimage)		{			if ((tif->tif_diroff==0)&&(!TIFFLinkDirectory(tif)))				goto bad;		}		else			tif->tif_diroff=(TIFFSeekFile(tif,0,SEEK_END)+1)&(~((toff_t)1));		if (pdiroff!=NULL)			*pdiroff=tif->tif_diroff;		if (!(tif->tif_flags&TIFF_BIGTIFF))			dirsize=2+ndir*12+4;		else			dirsize=8+ndir*20+8;		tif->tif_dataoff=tif->tif_diroff+dirsize;		if (!(tif->tif_flags&TIFF_BIGTIFF))			tif->tif_dataoff=(uint32)tif->tif_dataoff;		if ((tif->tif_dataoff<tif->tif_diroff)||(tif->tif_dataoff<(uint64)dirsize))		{			TIFFErrorExt(tif->tif_clientdata,module,"Maximum TIFF file size exceeded");			goto bad;		}		if (tif->tif_dataoff&1)			tif->tif_dataoff++;		if (isimage)			tif->tif_curdir++;	}
ndir=0;
ndir=0
ndir
ndir
0
if (isimage)		{			if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_POSITION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBFILETYPE))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_COMPRESSION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_THRESHHOLDING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_FILLORDER))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ORIENTATION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PLANARCONFIG))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PAGENUMBER))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_STRIPBYTECOUNTS))			{				if (!isTiled(tif))				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_STRIPOFFSETS))			{				if (!isTiled(tif))				{                    /* td_stripoffset might be NULL in an odd OJPEG case. See                     *  tif_dirread.c around line 3634.                     * XXX: OJPEG hack.                     * If a) compression is OJPEG, b) it's not a tiled TIFF,                     * and c) the number of strips is 1,                     * then we tolerate the absence of stripoffsets tag,                     * because, presumably, all required data is in the                     * JpegInterchangeFormat stream.                     * We can get here when using tiffset on such a file.                     * See http://bugzilla.maptools.org/show_bug.cgi?id=2500                    */                    if (tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))                        goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_COLORMAP))			{				if (!TIFFWriteDirectoryTagColormap(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES))			{				if (tif->tif_dir.td_extrasamples)				{					uint16 na;					uint16* nb;					TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE))			{				if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION))			{				if (!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_INKNAMES))			{				if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBIFD))			{				if (!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir))					goto bad;			}			{				uint32 n;				for (n=0; n<tif->tif_nfields; n++) {					const TIFFField* o;					o = tif->tif_fields[n];					if ((o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit)))					{						switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}					}				}			}		}
isimage
isimage
{			if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_POSITION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBFILETYPE))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_COMPRESSION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_THRESHHOLDING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_FILLORDER))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ORIENTATION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PLANARCONFIG))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_PAGENUMBER))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_STRIPBYTECOUNTS))			{				if (!isTiled(tif))				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_STRIPOFFSETS))			{				if (!isTiled(tif))				{                    /* td_stripoffset might be NULL in an odd OJPEG case. See                     *  tif_dirread.c around line 3634.                     * XXX: OJPEG hack.                     * If a) compression is OJPEG, b) it's not a tiled TIFF,                     * and c) the number of strips is 1,                     * then we tolerate the absence of stripoffsets tag,                     * because, presumably, all required data is in the                     * JpegInterchangeFormat stream.                     * We can get here when using tiffset on such a file.                     * See http://bugzilla.maptools.org/show_bug.cgi?id=2500                    */                    if (tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))                        goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_COLORMAP))			{				if (!TIFFWriteDirectoryTagColormap(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES))			{				if (tif->tif_dir.td_extrasamples)				{					uint16 na;					uint16* nb;					TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))						goto bad;				}			}			if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0]))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE))			{				if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION))			{				if (!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_INKNAMES))			{				if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames))					goto bad;			}			if (TIFFFieldSet(tif,FIELD_SUBIFD))			{				if (!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir))					goto bad;			}			{				uint32 n;				for (n=0; n<tif->tif_nfields; n++) {					const TIFFField* o;					o = tif->tif_fields[n];					if ((o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit)))					{						switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}					}				}			}		}
if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength))					goto bad;			}
TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_IMAGEDIMENSIONS
FIELD_IMAGEDIMENSIONS
{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength))					goto bad;			}
if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth))					goto bad;
!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth)
TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth)
TIFFWriteDirectoryTagShortLong
TIFFWriteDirectoryTagShortLong
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_IMAGEWIDTH
TIFFTAG_IMAGEWIDTH
tif->tif_dir.td_imagewidth
tif->tif_dir
tif
tif
tif_dir
td_imagewidth
goto bad;
bad
if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength))					goto bad;
!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength)
TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength)
TIFFWriteDirectoryTagShortLong
TIFFWriteDirectoryTagShortLong
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_IMAGELENGTH
TIFFTAG_IMAGELENGTH
tif->tif_dir.td_imagelength
tif->tif_dir
tif
tif
tif_dir
td_imagelength
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength))					goto bad;			}
TIFFFieldSet(tif,FIELD_TILEDIMENSIONS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_TILEDIMENSIONS
FIELD_TILEDIMENSIONS
{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth))					goto bad;				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength))					goto bad;			}
if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth))					goto bad;
!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth)
TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth)
TIFFWriteDirectoryTagShortLong
TIFFWriteDirectoryTagShortLong
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_TILEWIDTH
TIFFTAG_TILEWIDTH
tif->tif_dir.td_tilewidth
tif->tif_dir
tif
tif
tif_dir
td_tilewidth
goto bad;
bad
if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength))					goto bad;
!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength)
TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength)
TIFFWriteDirectoryTagShortLong
TIFFWriteDirectoryTagShortLong
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_TILELENGTH
TIFFTAG_TILELENGTH
tif->tif_dir.td_tilelength
tif->tif_dir
tif
tif
tif_dir
td_tilelength
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_RESOLUTION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution))					goto bad;			}
TIFFFieldSet(tif,FIELD_RESOLUTION)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_RESOLUTION
FIELD_RESOLUTION
{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution))					goto bad;			}
if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution))					goto bad;
!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution)
TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution)
TIFFWriteDirectoryTagRational
TIFFWriteDirectoryTagRational
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_XRESOLUTION
TIFFTAG_XRESOLUTION
tif->tif_dir.td_xresolution
tif->tif_dir
tif
tif
tif_dir
td_xresolution
goto bad;
bad
if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution))					goto bad;
!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution)
TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution)
TIFFWriteDirectoryTagRational
TIFFWriteDirectoryTagRational
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_YRESOLUTION
TIFFTAG_YRESOLUTION
tif->tif_dir.td_yresolution
tif->tif_dir
tif
tif
tif_dir
td_yresolution
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_POSITION))			{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition))					goto bad;			}
TIFFFieldSet(tif,FIELD_POSITION)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_POSITION
FIELD_POSITION
{				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition))					goto bad;				if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition))					goto bad;			}
if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition))					goto bad;
!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition)
TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition)
TIFFWriteDirectoryTagRational
TIFFWriteDirectoryTagRational
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_XPOSITION
TIFFTAG_XPOSITION
tif->tif_dir.td_xposition
tif->tif_dir
tif
tif
tif_dir
td_xposition
goto bad;
bad
if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition))					goto bad;
!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition)
TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition)
TIFFWriteDirectoryTagRational
TIFFWriteDirectoryTagRational
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_YPOSITION
TIFFTAG_YPOSITION
tif->tif_dir.td_yposition
tif->tif_dir
tif
tif
tif_dir
td_yposition
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_SUBFILETYPE))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype))					goto bad;			}
TIFFFieldSet(tif,FIELD_SUBFILETYPE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SUBFILETYPE
FIELD_SUBFILETYPE
{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype))					goto bad;			}
if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype))					goto bad;
!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype)
TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype)
TIFFWriteDirectoryTagLong
TIFFWriteDirectoryTagLong
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_SUBFILETYPE
TIFFTAG_SUBFILETYPE
tif->tif_dir.td_subfiletype
tif->tif_dir
tif
tif
tif_dir
td_subfiletype
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample))					goto bad;			}
TIFFFieldSet(tif,FIELD_BITSPERSAMPLE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_BITSPERSAMPLE
FIELD_BITSPERSAMPLE
{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample))					goto bad;			}
if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample))					goto bad;
!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample)
TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample)
TIFFWriteDirectoryTagShortPerSample
TIFFWriteDirectoryTagShortPerSample
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_BITSPERSAMPLE
TIFFTAG_BITSPERSAMPLE
tif->tif_dir.td_bitspersample
tif->tif_dir
tif
tif
tif_dir
td_bitspersample
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_COMPRESSION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression))					goto bad;			}
TIFFFieldSet(tif,FIELD_COMPRESSION)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_COMPRESSION
FIELD_COMPRESSION
{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression))					goto bad;			}
if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression))					goto bad;
!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression)
TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression)
TIFFWriteDirectoryTagShort
TIFFWriteDirectoryTagShort
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_COMPRESSION
TIFFTAG_COMPRESSION
tif->tif_dir.td_compression
tif->tif_dir
tif
tif
tif_dir
td_compression
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric))					goto bad;			}
TIFFFieldSet(tif,FIELD_PHOTOMETRIC)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_PHOTOMETRIC
FIELD_PHOTOMETRIC
{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric))					goto bad;			}
if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric))					goto bad;
!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric)
TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric)
TIFFWriteDirectoryTagShort
TIFFWriteDirectoryTagShort
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_PHOTOMETRIC
TIFFTAG_PHOTOMETRIC
tif->tif_dir.td_photometric
tif->tif_dir
tif
tif
tif_dir
td_photometric
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_THRESHHOLDING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding))					goto bad;			}
TIFFFieldSet(tif,FIELD_THRESHHOLDING)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_THRESHHOLDING
FIELD_THRESHHOLDING
{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding))					goto bad;			}
if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding))					goto bad;
!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding)
TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding)
TIFFWriteDirectoryTagShort
TIFFWriteDirectoryTagShort
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_THRESHHOLDING
TIFFTAG_THRESHHOLDING
tif->tif_dir.td_threshholding
tif->tif_dir
tif
tif
tif_dir
td_threshholding
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_FILLORDER))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder))					goto bad;			}
TIFFFieldSet(tif,FIELD_FILLORDER)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_FILLORDER
FIELD_FILLORDER
{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder))					goto bad;			}
if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder))					goto bad;
!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder)
TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder)
TIFFWriteDirectoryTagShort
TIFFWriteDirectoryTagShort
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_FILLORDER
TIFFTAG_FILLORDER
tif->tif_dir.td_fillorder
tif->tif_dir
tif
tif
tif_dir
td_fillorder
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_ORIENTATION))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation))					goto bad;			}
TIFFFieldSet(tif,FIELD_ORIENTATION)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_ORIENTATION
FIELD_ORIENTATION
{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation))					goto bad;			}
if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation))					goto bad;
!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation)
TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation)
TIFFWriteDirectoryTagShort
TIFFWriteDirectoryTagShort
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_ORIENTATION
TIFFTAG_ORIENTATION
tif->tif_dir.td_orientation
tif->tif_dir
tif
tif
tif_dir
td_orientation
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel))					goto bad;			}
TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SAMPLESPERPIXEL
FIELD_SAMPLESPERPIXEL
{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel))					goto bad;			}
if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel))					goto bad;
!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel)
TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel)
TIFFWriteDirectoryTagShort
TIFFWriteDirectoryTagShort
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_SAMPLESPERPIXEL
TIFFTAG_SAMPLESPERPIXEL
tif->tif_dir.td_samplesperpixel
tif->tif_dir
tif
tif
tif_dir
td_samplesperpixel
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP))			{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip))					goto bad;			}
TIFFFieldSet(tif,FIELD_ROWSPERSTRIP)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_ROWSPERSTRIP
FIELD_ROWSPERSTRIP
{				if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip))					goto bad;			}
if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip))					goto bad;
!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip)
TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip)
TIFFWriteDirectoryTagShortLong
TIFFWriteDirectoryTagShortLong
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_ROWSPERSTRIP
TIFFTAG_ROWSPERSTRIP
tif->tif_dir.td_rowsperstrip
tif->tif_dir
tif
tif
tif_dir
td_rowsperstrip
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue))					goto bad;			}
TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_MINSAMPLEVALUE
FIELD_MINSAMPLEVALUE
{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue))					goto bad;			}
if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue))					goto bad;
!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue)
TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue)
TIFFWriteDirectoryTagShortPerSample
TIFFWriteDirectoryTagShortPerSample
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_MINSAMPLEVALUE
TIFFTAG_MINSAMPLEVALUE
tif->tif_dir.td_minsamplevalue
tif->tif_dir
tif
tif
tif_dir
td_minsamplevalue
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue))					goto bad;			}
TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_MAXSAMPLEVALUE
FIELD_MAXSAMPLEVALUE
{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue))					goto bad;			}
if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue))					goto bad;
!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue)
TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue)
TIFFWriteDirectoryTagShortPerSample
TIFFWriteDirectoryTagShortPerSample
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_MAXSAMPLEVALUE
TIFFTAG_MAXSAMPLEVALUE
tif->tif_dir.td_maxsamplevalue
tif->tif_dir
tif
tif
tif_dir
td_maxsamplevalue
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_PLANARCONFIG))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig))					goto bad;			}
TIFFFieldSet(tif,FIELD_PLANARCONFIG)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_PLANARCONFIG
FIELD_PLANARCONFIG
{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig))					goto bad;			}
if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig))					goto bad;
!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig)
TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig)
TIFFWriteDirectoryTagShort
TIFFWriteDirectoryTagShort
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_PLANARCONFIG
TIFFTAG_PLANARCONFIG
tif->tif_dir.td_planarconfig
tif->tif_dir
tif
tif
tif_dir
td_planarconfig
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit))					goto bad;			}
TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_RESOLUTIONUNIT
FIELD_RESOLUTIONUNIT
{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit))					goto bad;			}
if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit))					goto bad;
!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit)
TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit)
TIFFWriteDirectoryTagShort
TIFFWriteDirectoryTagShort
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_RESOLUTIONUNIT
TIFFTAG_RESOLUTIONUNIT
tif->tif_dir.td_resolutionunit
tif->tif_dir
tif
tif
tif_dir
td_resolutionunit
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_PAGENUMBER))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0]))					goto bad;			}
TIFFFieldSet(tif,FIELD_PAGENUMBER)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_PAGENUMBER
FIELD_PAGENUMBER
{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0]))					goto bad;			}
if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0]))					goto bad;
!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0])
TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0])
TIFFWriteDirectoryTagShortArray
TIFFWriteDirectoryTagShortArray
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_PAGENUMBER
TIFFTAG_PAGENUMBER
2
&tif->tif_dir.td_pagenumber[0]
tif->tif_dir.td_pagenumber[0]
tif->tif_dir.td_pagenumber
tif->tif_dir
tif
tif
tif_dir
td_pagenumber
0
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_STRIPBYTECOUNTS))			{				if (!isTiled(tif))				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}			}
TIFFFieldSet(tif,FIELD_STRIPBYTECOUNTS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_STRIPBYTECOUNTS
FIELD_STRIPBYTECOUNTS
{				if (!isTiled(tif))				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}			}
if (!isTiled(tif))				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}
!isTiled(tif)
isTiled(tif)
isTiled
isTiled
tif
tif
{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}
if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;
!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount)
TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount)
TIFFWriteDirectoryTagLongLong8Array
TIFFWriteDirectoryTagLongLong8Array
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_STRIPBYTECOUNTS
TIFFTAG_STRIPBYTECOUNTS
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
tif->tif_dir.td_stripbytecount
tif->tif_dir
tif
tif
tif_dir
td_stripbytecount
goto bad;
bad
{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;				}
if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount))						goto bad;
!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount)
TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount)
TIFFWriteDirectoryTagLongLong8Array
TIFFWriteDirectoryTagLongLong8Array
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_TILEBYTECOUNTS
TIFFTAG_TILEBYTECOUNTS
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
tif->tif_dir.td_stripbytecount
tif->tif_dir
tif
tif
tif_dir
td_stripbytecount
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_STRIPOFFSETS))			{				if (!isTiled(tif))				{                    /* td_stripoffset might be NULL in an odd OJPEG case. See                     *  tif_dirread.c around line 3634.                     * XXX: OJPEG hack.                     * If a) compression is OJPEG, b) it's not a tiled TIFF,                     * and c) the number of strips is 1,                     * then we tolerate the absence of stripoffsets tag,                     * because, presumably, all required data is in the                     * JpegInterchangeFormat stream.                     * We can get here when using tiffset on such a file.                     * See http://bugzilla.maptools.org/show_bug.cgi?id=2500                    */                    if (tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))                        goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))						goto bad;				}			}
TIFFFieldSet(tif,FIELD_STRIPOFFSETS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_STRIPOFFSETS
FIELD_STRIPOFFSETS
{				if (!isTiled(tif))				{                    /* td_stripoffset might be NULL in an odd OJPEG case. See                     *  tif_dirread.c around line 3634.                     * XXX: OJPEG hack.                     * If a) compression is OJPEG, b) it's not a tiled TIFF,                     * and c) the number of strips is 1,                     * then we tolerate the absence of stripoffsets tag,                     * because, presumably, all required data is in the                     * JpegInterchangeFormat stream.                     * We can get here when using tiffset on such a file.                     * See http://bugzilla.maptools.org/show_bug.cgi?id=2500                    */                    if (tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))                        goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))						goto bad;				}			}
if (!isTiled(tif))				{                    /* td_stripoffset might be NULL in an odd OJPEG case. See                     *  tif_dirread.c around line 3634.                     * XXX: OJPEG hack.                     * If a) compression is OJPEG, b) it's not a tiled TIFF,                     * and c) the number of strips is 1,                     * then we tolerate the absence of stripoffsets tag,                     * because, presumably, all required data is in the                     * JpegInterchangeFormat stream.                     * We can get here when using tiffset on such a file.                     * See http://bugzilla.maptools.org/show_bug.cgi?id=2500                    */                    if (tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))                        goto bad;				}				else				{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))						goto bad;				}
!isTiled(tif)
isTiled(tif)
isTiled
isTiled
tif
tif
{                    /* td_stripoffset might be NULL in an odd OJPEG case. See                     *  tif_dirread.c around line 3634.                     * XXX: OJPEG hack.                     * If a) compression is OJPEG, b) it's not a tiled TIFF,                     * and c) the number of strips is 1,                     * then we tolerate the absence of stripoffsets tag,                     * because, presumably, all required data is in the                     * JpegInterchangeFormat stream.                     * We can get here when using tiffset on such a file.                     * See http://bugzilla.maptools.org/show_bug.cgi?id=2500                    */                    if (tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))                        goto bad;				}
if (tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))                        goto bad;
tif->tif_dir.td_stripoffset != NULL &&                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
tif->tif_dir.td_stripoffset != NULL
tif->tif_dir.td_stripoffset
tif->tif_dir
tif
tif
tif_dir
td_stripoffset
NULL
NULL
!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
TIFFWriteDirectoryTagLongLong8Array
TIFFWriteDirectoryTagLongLong8Array
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_STRIPOFFSETS
TIFFTAG_STRIPOFFSETS
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
tif->tif_dir.td_stripoffset
tif->tif_dir
tif
tif
tif_dir
td_stripoffset
goto bad;
bad
{					if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))						goto bad;				}
if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset))						goto bad;
!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
TIFFWriteDirectoryTagLongLong8Array
TIFFWriteDirectoryTagLongLong8Array
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_TILEOFFSETS
TIFFTAG_TILEOFFSETS
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
tif->tif_dir.td_stripoffset
tif->tif_dir
tif
tif
tif_dir
td_stripoffset
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_COLORMAP))			{				if (!TIFFWriteDirectoryTagColormap(tif,&ndir,dir))					goto bad;			}
TIFFFieldSet(tif,FIELD_COLORMAP)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_COLORMAP
FIELD_COLORMAP
{				if (!TIFFWriteDirectoryTagColormap(tif,&ndir,dir))					goto bad;			}
if (!TIFFWriteDirectoryTagColormap(tif,&ndir,dir))					goto bad;
!TIFFWriteDirectoryTagColormap(tif,&ndir,dir)
TIFFWriteDirectoryTagColormap(tif,&ndir,dir)
TIFFWriteDirectoryTagColormap
TIFFWriteDirectoryTagColormap
tif
tif
&ndir
ndir
ndir
dir
dir
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES))			{				if (tif->tif_dir.td_extrasamples)				{					uint16 na;					uint16* nb;					TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))						goto bad;				}			}
TIFFFieldSet(tif,FIELD_EXTRASAMPLES)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_EXTRASAMPLES
FIELD_EXTRASAMPLES
{				if (tif->tif_dir.td_extrasamples)				{					uint16 na;					uint16* nb;					TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))						goto bad;				}			}
if (tif->tif_dir.td_extrasamples)				{					uint16 na;					uint16* nb;					TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))						goto bad;				}
tif->tif_dir.td_extrasamples
tif->tif_dir
tif
tif
tif_dir
td_extrasamples
{					uint16 na;					uint16* nb;					TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))						goto bad;				}
uint16 na;
uint16 na;
uint16
uint16
na
na
uint16* nb;
uint16* nb;
uint16
uint16
* nb
*
nb
TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb);
TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb)
TIFFGetFieldDefaulted
TIFFGetFieldDefaulted
tif
tif
TIFFTAG_EXTRASAMPLES
TIFFTAG_EXTRASAMPLES
&na
na
na
&nb
nb
nb
if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb))						goto bad;
!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb)
TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb)
TIFFWriteDirectoryTagShortArray
TIFFWriteDirectoryTagShortArray
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_EXTRASAMPLES
TIFFTAG_EXTRASAMPLES
na
na
nb
nb
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT))			{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat))					goto bad;			}
TIFFFieldSet(tif,FIELD_SAMPLEFORMAT)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SAMPLEFORMAT
FIELD_SAMPLEFORMAT
{				if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat))					goto bad;			}
if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat))					goto bad;
!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat)
TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat)
TIFFWriteDirectoryTagShortPerSample
TIFFWriteDirectoryTagShortPerSample
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_SAMPLEFORMAT
TIFFTAG_SAMPLEFORMAT
tif->tif_dir.td_sampleformat
tif->tif_dir
tif
tif
tif_dir
td_sampleformat
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue))					goto bad;			}
TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SMINSAMPLEVALUE
FIELD_SMINSAMPLEVALUE
{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue))					goto bad;			}
if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue))					goto bad;
!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue)
TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue)
TIFFWriteDirectoryTagSampleformatArray
TIFFWriteDirectoryTagSampleformatArray
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_SMINSAMPLEVALUE
TIFFTAG_SMINSAMPLEVALUE
tif->tif_dir.td_samplesperpixel
tif->tif_dir
tif
tif
tif_dir
td_samplesperpixel
tif->tif_dir.td_sminsamplevalue
tif->tif_dir
tif
tif
tif_dir
td_sminsamplevalue
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE))			{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue))					goto bad;			}
TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SMAXSAMPLEVALUE
FIELD_SMAXSAMPLEVALUE
{				if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue))					goto bad;			}
if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue))					goto bad;
!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue)
TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue)
TIFFWriteDirectoryTagSampleformatArray
TIFFWriteDirectoryTagSampleformatArray
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_SMAXSAMPLEVALUE
TIFFTAG_SMAXSAMPLEVALUE
tif->tif_dir.td_samplesperpixel
tif->tif_dir
tif
tif
tif_dir
td_samplesperpixel
tif->tif_dir.td_smaxsamplevalue
tif->tif_dir
tif
tif
tif_dir
td_smaxsamplevalue
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth))					goto bad;			}
TIFFFieldSet(tif,FIELD_IMAGEDEPTH)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_IMAGEDEPTH
FIELD_IMAGEDEPTH
{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth))					goto bad;			}
if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth))					goto bad;
!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth)
TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth)
TIFFWriteDirectoryTagLong
TIFFWriteDirectoryTagLong
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_IMAGEDEPTH
TIFFTAG_IMAGEDEPTH
tif->tif_dir.td_imagedepth
tif->tif_dir
tif
tif
tif_dir
td_imagedepth
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_TILEDEPTH))			{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth))					goto bad;			}
TIFFFieldSet(tif,FIELD_TILEDEPTH)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_TILEDEPTH
FIELD_TILEDEPTH
{				if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth))					goto bad;			}
if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth))					goto bad;
!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth)
TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth)
TIFFWriteDirectoryTagLong
TIFFWriteDirectoryTagLong
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_TILEDEPTH
TIFFTAG_TILEDEPTH
tif->tif_dir.td_tiledepth
tif->tif_dir
tif
tif
tif_dir
td_tiledepth
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0]))					goto bad;			}
TIFFFieldSet(tif,FIELD_HALFTONEHINTS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_HALFTONEHINTS
FIELD_HALFTONEHINTS
{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0]))					goto bad;			}
if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0]))					goto bad;
!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0])
TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0])
TIFFWriteDirectoryTagShortArray
TIFFWriteDirectoryTagShortArray
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_HALFTONEHINTS
TIFFTAG_HALFTONEHINTS
2
&tif->tif_dir.td_halftonehints[0]
tif->tif_dir.td_halftonehints[0]
tif->tif_dir.td_halftonehints
tif->tif_dir
tif
tif
tif_dir
td_halftonehints
0
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))			{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0]))					goto bad;			}
TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_YCBCRSUBSAMPLING
FIELD_YCBCRSUBSAMPLING
{				if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0]))					goto bad;			}
if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0]))					goto bad;
!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0])
TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0])
TIFFWriteDirectoryTagShortArray
TIFFWriteDirectoryTagShortArray
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_YCBCRSUBSAMPLING
TIFFTAG_YCBCRSUBSAMPLING
2
&tif->tif_dir.td_ycbcrsubsampling[0]
tif->tif_dir.td_ycbcrsubsampling[0]
tif->tif_dir.td_ycbcrsubsampling
tif->tif_dir
tif
tif
tif_dir
td_ycbcrsubsampling
0
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING))			{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning))					goto bad;			}
TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_YCBCRPOSITIONING
FIELD_YCBCRPOSITIONING
{				if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning))					goto bad;			}
if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning))					goto bad;
!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning)
TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning)
TIFFWriteDirectoryTagShort
TIFFWriteDirectoryTagShort
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_YCBCRPOSITIONING
TIFFTAG_YCBCRPOSITIONING
tif->tif_dir.td_ycbcrpositioning
tif->tif_dir
tif
tif
tif_dir
td_ycbcrpositioning
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE))			{				if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite))					goto bad;			}
TIFFFieldSet(tif,FIELD_REFBLACKWHITE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_REFBLACKWHITE
FIELD_REFBLACKWHITE
{				if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite))					goto bad;			}
if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite))					goto bad;
!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite)
TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite)
TIFFWriteDirectoryTagRationalArray
TIFFWriteDirectoryTagRationalArray
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_REFERENCEBLACKWHITE
TIFFTAG_REFERENCEBLACKWHITE
6
tif->tif_dir.td_refblackwhite
tif->tif_dir
tif
tif
tif_dir
td_refblackwhite
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION))			{				if (!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir))					goto bad;			}
TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_TRANSFERFUNCTION
FIELD_TRANSFERFUNCTION
{				if (!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir))					goto bad;			}
if (!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir))					goto bad;
!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir)
TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir)
TIFFWriteDirectoryTagTransferfunction
TIFFWriteDirectoryTagTransferfunction
tif
tif
&ndir
ndir
ndir
dir
dir
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_INKNAMES))			{				if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames))					goto bad;			}
TIFFFieldSet(tif,FIELD_INKNAMES)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_INKNAMES
FIELD_INKNAMES
{				if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames))					goto bad;			}
if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames))					goto bad;
!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames)
TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames)
TIFFWriteDirectoryTagAscii
TIFFWriteDirectoryTagAscii
tif
tif
&ndir
ndir
ndir
dir
dir
TIFFTAG_INKNAMES
TIFFTAG_INKNAMES
tif->tif_dir.td_inknameslen
tif->tif_dir
tif
tif
tif_dir
td_inknameslen
tif->tif_dir.td_inknames
tif->tif_dir
tif
tif
tif_dir
td_inknames
goto bad;
bad
if (TIFFFieldSet(tif,FIELD_SUBIFD))			{				if (!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir))					goto bad;			}
TIFFFieldSet(tif,FIELD_SUBIFD)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SUBIFD
FIELD_SUBIFD
{				if (!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir))					goto bad;			}
if (!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir))					goto bad;
!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir)
TIFFWriteDirectoryTagSubifd(tif,&ndir,dir)
TIFFWriteDirectoryTagSubifd
TIFFWriteDirectoryTagSubifd
tif
tif
&ndir
ndir
ndir
dir
dir
goto bad;
bad
{				uint32 n;				for (n=0; n<tif->tif_nfields; n++) {					const TIFFField* o;					o = tif->tif_fields[n];					if ((o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit)))					{						switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}					}				}			}
uint32 n;
uint32 n;
uint32
uint32
n
n
for (n=0; n<tif->tif_nfields; n++) {					const TIFFField* o;					o = tif->tif_fields[n];					if ((o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit)))					{						switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}					}				}
n=0;
n=0
n
n
0
n<tif->tif_nfields
n
n
tif->tif_nfields
tif
tif
tif_nfields
n++
n
n
{					const TIFFField* o;					o = tif->tif_fields[n];					if ((o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit)))					{						switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}					}				}
const TIFFField* o;
const TIFFField* o;
const TIFFField
TIFFField
* o
*
o
o = tif->tif_fields[n];
o = tif->tif_fields[n]
o
o
tif->tif_fields[n]
tif->tif_fields
tif
tif
tif_fields
n
n
if ((o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit)))					{						switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}					}
(o->field_bit>=FIELD_CODEC)&&(TIFFFieldSet(tif,o->field_bit))
(o->field_bit>=FIELD_CODEC)
o->field_bit>=FIELD_CODEC
o->field_bit
o
o
field_bit
FIELD_CODEC
FIELD_CODEC
(TIFFFieldSet(tif,o->field_bit))
TIFFFieldSet(tif,o->field_bit)
TIFFFieldSet
TIFFFieldSet
tif
tif
o->field_bit
o
o
field_bit
{						switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}					}
switch (o->get_field_type)						{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}
o->get_field_type
o
o
get_field_type
{							case TIFF_SETGET_ASCII:								{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							case TIFF_SETGET_UINT16:								{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_UINT32:								{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}								break;							case TIFF_SETGET_C32_UINT8:								{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}								break;							default:								assert(0);   /* we should never get here */								break;						}
case TIFF_SETGET_ASCII:
TIFF_SETGET_ASCII
TIFF_SETGET_ASCII
{									uint32 pa;									char* pb;									assert(o->field_type==TIFF_ASCII);									assert(o->field_readcount==TIFF_VARIABLE);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&pb);									pa=(uint32)(strlen(pb));									if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}
uint32 pa;
uint32 pa;
uint32
uint32
pa
pa
char* pb;
char* pb;
char
* pb
*
pb
assert(o->field_type==TIFF_ASCII);
assert(o->field_type==TIFF_ASCII)
assert
assert
o->field_type==TIFF_ASCII
o->field_type
o
o
field_type
TIFF_ASCII
TIFF_ASCII
assert(o->field_readcount==TIFF_VARIABLE);
assert(o->field_readcount==TIFF_VARIABLE)
assert
assert
o->field_readcount==TIFF_VARIABLE
o->field_readcount
o
o
field_readcount
TIFF_VARIABLE
TIFF_VARIABLE
assert(o->field_passcount==0);
assert(o->field_passcount==0)
assert
assert
o->field_passcount==0
o->field_passcount
o
o
field_passcount
0
TIFFGetField(tif,o->field_tag,&pb);
TIFFGetField(tif,o->field_tag,&pb)
TIFFGetField
TIFFGetField
tif
tif
o->field_tag
o
o
field_tag
&pb
pb
pb
pa=(uint32)(strlen(pb));
pa=(uint32)(strlen(pb))
pa
pa
(uint32)(strlen(pb))
(uint32)
uint32
uint32
strlen(pb)
strlen
strlen
pb
pb
if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;
!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb)
TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)o->field_tag,pa,pb)
TIFFWriteDirectoryTagAscii
TIFFWriteDirectoryTagAscii
tif
tif
&ndir
ndir
ndir
dir
dir
(uint16)o->field_tag
uint16
uint16
uint16

o->field_tag
o
o
field_tag
pa
pa
pb
pb
goto bad;
bad
break;
case TIFF_SETGET_UINT16:
TIFF_SETGET_UINT16
TIFF_SETGET_UINT16
{									uint16 p;									assert(o->field_type==TIFF_SHORT);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}
uint16 p;
uint16 p;
uint16
uint16
p
p
assert(o->field_type==TIFF_SHORT);
assert(o->field_type==TIFF_SHORT)
assert
assert
o->field_type==TIFF_SHORT
o->field_type
o
o
field_type
TIFF_SHORT
TIFF_SHORT
assert(o->field_readcount==1);
assert(o->field_readcount==1)
assert
assert
o->field_readcount==1
o->field_readcount
o
o
field_readcount
1
assert(o->field_passcount==0);
assert(o->field_passcount==0)
assert
assert
o->field_passcount==0
o->field_passcount
o
o
field_passcount
0
TIFFGetField(tif,o->field_tag,&p);
TIFFGetField(tif,o->field_tag,&p)
TIFFGetField
TIFFGetField
tif
tif
o->field_tag
o
o
field_tag
&p
p
p
if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;
!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p)
TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)o->field_tag,p)
TIFFWriteDirectoryTagShort
TIFFWriteDirectoryTagShort
tif
tif
&ndir
ndir
ndir
dir
dir
(uint16)o->field_tag
uint16
uint16
uint16

o->field_tag
o
o
field_tag
p
p
goto bad;
bad
break;
case TIFF_SETGET_UINT32:
TIFF_SETGET_UINT32
TIFF_SETGET_UINT32
{									uint32 p;									assert(o->field_type==TIFF_LONG);									assert(o->field_readcount==1);									assert(o->field_passcount==0);									TIFFGetField(tif,o->field_tag,&p);									if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;								}
uint32 p;
uint32 p;
uint32
uint32
p
p
assert(o->field_type==TIFF_LONG);
assert(o->field_type==TIFF_LONG)
assert
assert
o->field_type==TIFF_LONG
o->field_type
o
o
field_type
TIFF_LONG
TIFF_LONG
assert(o->field_readcount==1);
assert(o->field_readcount==1)
assert
assert
o->field_readcount==1
o->field_readcount
o
o
field_readcount
1
assert(o->field_passcount==0);
assert(o->field_passcount==0)
assert
assert
o->field_passcount==0
o->field_passcount
o
o
field_passcount
0
TIFFGetField(tif,o->field_tag,&p);
TIFFGetField(tif,o->field_tag,&p)
TIFFGetField
TIFFGetField
tif
tif
o->field_tag
o
o
field_tag
&p
p
p
if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p))										goto bad;
!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p)
TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)o->field_tag,p)
TIFFWriteDirectoryTagLong
TIFFWriteDirectoryTagLong
tif
tif
&ndir
ndir
ndir
dir
dir
(uint16)o->field_tag
uint16
uint16
uint16

o->field_tag
o
o
field_tag
p
p
goto bad;
bad
break;
case TIFF_SETGET_C32_UINT8:
TIFF_SETGET_C32_UINT8
TIFF_SETGET_C32_UINT8
{									uint32 pa;									void* pb;									assert(o->field_type==TIFF_UNDEFINED);									assert(o->field_readcount==TIFF_VARIABLE2);									assert(o->field_passcount==1);									TIFFGetField(tif,o->field_tag,&pa,&pb);									if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;								}
uint32 pa;
uint32 pa;
uint32
uint32
pa
pa
void* pb;
void* pb;
void
* pb
*
pb
assert(o->field_type==TIFF_UNDEFINED);
assert(o->field_type==TIFF_UNDEFINED)
assert
assert
o->field_type==TIFF_UNDEFINED
o->field_type
o
o
field_type
TIFF_UNDEFINED
TIFF_UNDEFINED
assert(o->field_readcount==TIFF_VARIABLE2);
assert(o->field_readcount==TIFF_VARIABLE2)
assert
assert
o->field_readcount==TIFF_VARIABLE2
o->field_readcount
o
o
field_readcount
TIFF_VARIABLE2
TIFF_VARIABLE2
assert(o->field_passcount==1);
assert(o->field_passcount==1)
assert
assert
o->field_passcount==1
o->field_passcount
o
o
field_passcount
1
TIFFGetField(tif,o->field_tag,&pa,&pb);
TIFFGetField(tif,o->field_tag,&pa,&pb)
TIFFGetField
TIFFGetField
tif
tif
o->field_tag
o
o
field_tag
&pa
pa
pa
&pb
pb
pb
if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb))										goto bad;
!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb)
TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)o->field_tag,pa,pb)
TIFFWriteDirectoryTagUndefinedArray
TIFFWriteDirectoryTagUndefinedArray
tif
tif
&ndir
ndir
ndir
dir
dir
(uint16)o->field_tag
uint16
uint16
uint16

o->field_tag
o
o
field_tag
pa
pa
pb
pb
goto bad;
bad
break;
default:
assert(0);
assert(0)
assert
assert
0
break;
for (m=0; m<(uint32)(tif->tif_dir.td_customValueCount); m++)		{                        uint16 tag = (uint16)tif->tif_dir.td_customValues[m].info->field_tag;                        uint32 count = tif->tif_dir.td_customValues[m].count;			switch (tif->tif_dir.td_customValues[m].info->field_type)			{				case TIFF_ASCII:					if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_UNDEFINED:					if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_BYTE:					if (!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SBYTE:					if (!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SHORT:					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SSHORT:					if (!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG:					if (!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG:					if (!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG8:					if (!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG8:					if (!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_RATIONAL:					if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SRATIONAL:					if (!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_FLOAT:					if (!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_DOUBLE:					if (!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD:					if (!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD8:					if (!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				default:					assert(0);   /* we should never get here */					break;			}		}
m=0;
m=0
m
m
0
m<(uint32)(tif->tif_dir.td_customValueCount)
m
m
(uint32)(tif->tif_dir.td_customValueCount)
(uint32)
uint32
uint32
tif->tif_dir.td_customValueCount
tif->tif_dir
tif
tif
tif_dir
td_customValueCount
m++
m
m
{                        uint16 tag = (uint16)tif->tif_dir.td_customValues[m].info->field_tag;                        uint32 count = tif->tif_dir.td_customValues[m].count;			switch (tif->tif_dir.td_customValues[m].info->field_type)			{				case TIFF_ASCII:					if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_UNDEFINED:					if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_BYTE:					if (!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SBYTE:					if (!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SHORT:					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SSHORT:					if (!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG:					if (!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG:					if (!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG8:					if (!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG8:					if (!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_RATIONAL:					if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SRATIONAL:					if (!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_FLOAT:					if (!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_DOUBLE:					if (!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD:					if (!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD8:					if (!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				default:					assert(0);   /* we should never get here */					break;			}		}
uint16 tag = (uint16)tif->tif_dir.td_customValues[m].info->field_tag;
uint16 tag = (uint16)tif->tif_dir.td_customValues[m].info->field_tag;
uint16
uint16
tag = (uint16)tif->tif_dir.td_customValues[m].info->field_tag
tag
= (uint16)tif->tif_dir.td_customValues[m].info->field_tag
(uint16)tif->tif_dir.td_customValues[m].info->field_tag
uint16
uint16
uint16

tif->tif_dir.td_customValues[m].info->field_tag
tif->tif_dir.td_customValues[m].info
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
info
field_tag
uint32 count = tif->tif_dir.td_customValues[m].count;
uint32 count = tif->tif_dir.td_customValues[m].count;
uint32
uint32
count = tif->tif_dir.td_customValues[m].count
count
= tif->tif_dir.td_customValues[m].count
tif->tif_dir.td_customValues[m].count
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
count
switch (tif->tif_dir.td_customValues[m].info->field_type)			{				case TIFF_ASCII:					if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_UNDEFINED:					if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_BYTE:					if (!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SBYTE:					if (!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SHORT:					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SSHORT:					if (!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG:					if (!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG:					if (!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG8:					if (!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG8:					if (!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_RATIONAL:					if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SRATIONAL:					if (!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_FLOAT:					if (!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_DOUBLE:					if (!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD:					if (!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD8:					if (!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				default:					assert(0);   /* we should never get here */					break;			}
tif->tif_dir.td_customValues[m].info->field_type
tif->tif_dir.td_customValues[m].info
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
info
field_type
{				case TIFF_ASCII:					if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_UNDEFINED:					if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_BYTE:					if (!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SBYTE:					if (!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SHORT:					if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SSHORT:					if (!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG:					if (!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG:					if (!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_LONG8:					if (!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SLONG8:					if (!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_RATIONAL:					if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_SRATIONAL:					if (!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_FLOAT:					if (!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_DOUBLE:					if (!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD:					if (!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				case TIFF_IFD8:					if (!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;					break;				default:					assert(0);   /* we should never get here */					break;			}
case TIFF_ASCII:
TIFF_ASCII
TIFF_ASCII
if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagAscii
TIFFWriteDirectoryTagAscii
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_UNDEFINED:
TIFF_UNDEFINED
TIFF_UNDEFINED
if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagUndefinedArray
TIFFWriteDirectoryTagUndefinedArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_BYTE:
TIFF_BYTE
TIFF_BYTE
if (!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagByteArray
TIFFWriteDirectoryTagByteArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_SBYTE:
TIFF_SBYTE
TIFF_SBYTE
if (!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagSbyteArray
TIFFWriteDirectoryTagSbyteArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_SHORT:
TIFF_SHORT
TIFF_SHORT
if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagShortArray
TIFFWriteDirectoryTagShortArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_SSHORT:
TIFF_SSHORT
TIFF_SSHORT
if (!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagSshortArray
TIFFWriteDirectoryTagSshortArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_LONG:
TIFF_LONG
TIFF_LONG
if (!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagLongArray
TIFFWriteDirectoryTagLongArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_SLONG:
TIFF_SLONG
TIFF_SLONG
if (!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagSlongArray
TIFFWriteDirectoryTagSlongArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_LONG8:
TIFF_LONG8
TIFF_LONG8
if (!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagLong8Array
TIFFWriteDirectoryTagLong8Array
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_SLONG8:
TIFF_SLONG8
TIFF_SLONG8
if (!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagSlong8Array
TIFFWriteDirectoryTagSlong8Array
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_RATIONAL:
TIFF_RATIONAL
TIFF_RATIONAL
if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagRationalArray
TIFFWriteDirectoryTagRationalArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_SRATIONAL:
TIFF_SRATIONAL
TIFF_SRATIONAL
if (!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagSrationalArray
TIFFWriteDirectoryTagSrationalArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_FLOAT:
TIFF_FLOAT
TIFF_FLOAT
if (!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagFloatArray
TIFFWriteDirectoryTagFloatArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_DOUBLE:
TIFF_DOUBLE
TIFF_DOUBLE
if (!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagDoubleArray
TIFFWriteDirectoryTagDoubleArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_IFD:
TIFF_IFD
TIFF_IFD
if (!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagIfdArray
TIFFWriteDirectoryTagIfdArray
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
case TIFF_IFD8:
TIFF_IFD8
TIFF_IFD8
if (!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value))						goto bad;
!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
TIFFWriteDirectoryTagIfdIfd8Array
TIFFWriteDirectoryTagIfdIfd8Array
tif
tif
&ndir
ndir
ndir
dir
dir
tag
tag
count
count
tif->tif_dir.td_customValues[m].value
tif->tif_dir.td_customValues[m]
tif->tif_dir.td_customValues
tif->tif_dir
tif
tif
tif_dir
td_customValues
m
m
value
goto bad;
bad
break;
default:
assert(0);
assert(0)
assert
assert
0
break;
if (dir!=NULL)			break;
dir!=NULL
dir
dir
NULL
NULL
break;
dir=_TIFFmalloc(ndir*sizeof(TIFFDirEntry));
dir=_TIFFmalloc(ndir*sizeof(TIFFDirEntry))
dir
dir
_TIFFmalloc(ndir*sizeof(TIFFDirEntry))
_TIFFmalloc
_TIFFmalloc
ndir*sizeof(TIFFDirEntry)
ndir
ndir
sizeof(TIFFDirEntry)
TIFFDirEntry
TIFFDirEntry
TIFFDirEntry

if (dir==NULL)		{			TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");			goto bad;		}
dir==NULL
dir
dir
NULL
NULL
{			TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");			goto bad;		}
TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");
TIFFErrorExt(tif->tif_clientdata,module,"Out of memory")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Out of memory"
goto bad;
bad
if (isimage)		{			if ((tif->tif_diroff==0)&&(!TIFFLinkDirectory(tif)))				goto bad;		}		else			tif->tif_diroff=(TIFFSeekFile(tif,0,SEEK_END)+1)&(~((toff_t)1));
isimage
isimage
{			if ((tif->tif_diroff==0)&&(!TIFFLinkDirectory(tif)))				goto bad;		}
if ((tif->tif_diroff==0)&&(!TIFFLinkDirectory(tif)))				goto bad;
(tif->tif_diroff==0)&&(!TIFFLinkDirectory(tif))
(tif->tif_diroff==0)
tif->tif_diroff==0
tif->tif_diroff
tif
tif
tif_diroff
0
(!TIFFLinkDirectory(tif))
!TIFFLinkDirectory(tif)
TIFFLinkDirectory(tif)
TIFFLinkDirectory
TIFFLinkDirectory
tif
tif
goto bad;
bad
tif->tif_diroff=(TIFFSeekFile(tif,0,SEEK_END)+1)&(~((toff_t)1));
tif->tif_diroff=(TIFFSeekFile(tif,0,SEEK_END)+1)&(~((toff_t)1))
tif->tif_diroff
tif
tif
tif_diroff
(TIFFSeekFile(tif,0,SEEK_END)+1)&(~((toff_t)1))
(TIFFSeekFile(tif,0,SEEK_END)+1)
TIFFSeekFile(tif,0,SEEK_END)+1
TIFFSeekFile(tif,0,SEEK_END)
TIFFSeekFile
TIFFSeekFile
tif
tif
0
SEEK_END
SEEK_END
1
(~((toff_t)1))
~((toff_t)1)
((toff_t)1)
(toff_t)1
toff_t
toff_t
toff_t

1
if (pdiroff!=NULL)			*pdiroff=tif->tif_diroff;
pdiroff!=NULL
pdiroff
pdiroff
NULL
NULL
*pdiroff=tif->tif_diroff;
*pdiroff=tif->tif_diroff
*pdiroff
pdiroff
pdiroff
tif->tif_diroff
tif
tif
tif_diroff
if (!(tif->tif_flags&TIFF_BIGTIFF))			dirsize=2+ndir*12+4;		else			dirsize=8+ndir*20+8;
!(tif->tif_flags&TIFF_BIGTIFF)
(tif->tif_flags&TIFF_BIGTIFF)
tif->tif_flags&TIFF_BIGTIFF
tif->tif_flags
tif
tif
tif_flags
TIFF_BIGTIFF
TIFF_BIGTIFF
dirsize=2+ndir*12+4;
dirsize=2+ndir*12+4
dirsize
dirsize
2+ndir*12+4
2+ndir*12
2
ndir*12
ndir
ndir
12
4
dirsize=8+ndir*20+8;
dirsize=8+ndir*20+8
dirsize
dirsize
8+ndir*20+8
8+ndir*20
8
ndir*20
ndir
ndir
20
8
tif->tif_dataoff=tif->tif_diroff+dirsize;
tif->tif_dataoff=tif->tif_diroff+dirsize
tif->tif_dataoff
tif
tif
tif_dataoff
tif->tif_diroff+dirsize
tif->tif_diroff
tif
tif
tif_diroff
dirsize
dirsize
if (!(tif->tif_flags&TIFF_BIGTIFF))			tif->tif_dataoff=(uint32)tif->tif_dataoff;
!(tif->tif_flags&TIFF_BIGTIFF)
(tif->tif_flags&TIFF_BIGTIFF)
tif->tif_flags&TIFF_BIGTIFF
tif->tif_flags
tif
tif
tif_flags
TIFF_BIGTIFF
TIFF_BIGTIFF
tif->tif_dataoff=(uint32)tif->tif_dataoff;
tif->tif_dataoff=(uint32)tif->tif_dataoff
tif->tif_dataoff
tif
tif
tif_dataoff
(uint32)tif->tif_dataoff
uint32
uint32
uint32

tif->tif_dataoff
tif
tif
tif_dataoff
if ((tif->tif_dataoff<tif->tif_diroff)||(tif->tif_dataoff<(uint64)dirsize))		{			TIFFErrorExt(tif->tif_clientdata,module,"Maximum TIFF file size exceeded");			goto bad;		}
(tif->tif_dataoff<tif->tif_diroff)||(tif->tif_dataoff<(uint64)dirsize)
(tif->tif_dataoff<tif->tif_diroff)
tif->tif_dataoff<tif->tif_diroff
tif->tif_dataoff
tif
tif
tif_dataoff
tif->tif_diroff
tif
tif
tif_diroff
(tif->tif_dataoff<(uint64)dirsize)
tif->tif_dataoff<(uint64)dirsize
tif->tif_dataoff
tif
tif
tif_dataoff
(uint64)dirsize
uint64
uint64
uint64

dirsize
dirsize
{			TIFFErrorExt(tif->tif_clientdata,module,"Maximum TIFF file size exceeded");			goto bad;		}
TIFFErrorExt(tif->tif_clientdata,module,"Maximum TIFF file size exceeded");
TIFFErrorExt(tif->tif_clientdata,module,"Maximum TIFF file size exceeded")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Maximum TIFF file size exceeded"
goto bad;
bad
if (tif->tif_dataoff&1)			tif->tif_dataoff++;
tif->tif_dataoff&1
tif->tif_dataoff
tif
tif
tif_dataoff
1
tif->tif_dataoff++;
tif->tif_dataoff++
tif->tif_dataoff
tif
tif
tif_dataoff
if (isimage)			tif->tif_curdir++;
isimage
isimage
tif->tif_curdir++;
tif->tif_curdir++
tif->tif_curdir
tif
tif
tif_curdir
if (isimage)	{		if (TIFFFieldSet(tif,FIELD_SUBIFD)&&(tif->tif_subifdoff==0))		{			uint32 na;			TIFFDirEntry* nb;			for (na=0, nb=dir; ; na++, nb++)			{				if( na == ndir )                                {                                    TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag");                                    goto bad;                                }				if (nb->tdir_tag==TIFFTAG_SUBIFD)					break;			}			if (!(tif->tif_flags&TIFF_BIGTIFF))				tif->tif_subifdoff=tif->tif_diroff+2+na*12+8;			else				tif->tif_subifdoff=tif->tif_diroff+8+na*20+12;		}	}
isimage
isimage
{		if (TIFFFieldSet(tif,FIELD_SUBIFD)&&(tif->tif_subifdoff==0))		{			uint32 na;			TIFFDirEntry* nb;			for (na=0, nb=dir; ; na++, nb++)			{				if( na == ndir )                                {                                    TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag");                                    goto bad;                                }				if (nb->tdir_tag==TIFFTAG_SUBIFD)					break;			}			if (!(tif->tif_flags&TIFF_BIGTIFF))				tif->tif_subifdoff=tif->tif_diroff+2+na*12+8;			else				tif->tif_subifdoff=tif->tif_diroff+8+na*20+12;		}	}
if (TIFFFieldSet(tif,FIELD_SUBIFD)&&(tif->tif_subifdoff==0))		{			uint32 na;			TIFFDirEntry* nb;			for (na=0, nb=dir; ; na++, nb++)			{				if( na == ndir )                                {                                    TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag");                                    goto bad;                                }				if (nb->tdir_tag==TIFFTAG_SUBIFD)					break;			}			if (!(tif->tif_flags&TIFF_BIGTIFF))				tif->tif_subifdoff=tif->tif_diroff+2+na*12+8;			else				tif->tif_subifdoff=tif->tif_diroff+8+na*20+12;		}
TIFFFieldSet(tif,FIELD_SUBIFD)&&(tif->tif_subifdoff==0)
TIFFFieldSet(tif,FIELD_SUBIFD)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SUBIFD
FIELD_SUBIFD
(tif->tif_subifdoff==0)
tif->tif_subifdoff==0
tif->tif_subifdoff
tif
tif
tif_subifdoff
0
{			uint32 na;			TIFFDirEntry* nb;			for (na=0, nb=dir; ; na++, nb++)			{				if( na == ndir )                                {                                    TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag");                                    goto bad;                                }				if (nb->tdir_tag==TIFFTAG_SUBIFD)					break;			}			if (!(tif->tif_flags&TIFF_BIGTIFF))				tif->tif_subifdoff=tif->tif_diroff+2+na*12+8;			else				tif->tif_subifdoff=tif->tif_diroff+8+na*20+12;		}
uint32 na;
uint32 na;
uint32
uint32
na
na
TIFFDirEntry* nb;
TIFFDirEntry* nb;
TIFFDirEntry
TIFFDirEntry
* nb
*
nb
for (na=0, nb=dir; ; na++, nb++)			{				if( na == ndir )                                {                                    TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag");                                    goto bad;                                }				if (nb->tdir_tag==TIFFTAG_SUBIFD)					break;			}
na=0, nb=dir;
na=0, nb=dir
na=0
na
na
0
nb=dir
nb
nb
dir
dir
na++, nb++
na++
na
na
nb++
nb
nb
{				if( na == ndir )                                {                                    TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag");                                    goto bad;                                }				if (nb->tdir_tag==TIFFTAG_SUBIFD)					break;			}
if( na == ndir )                                {                                    TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag");                                    goto bad;                                }
na == ndir
na
na
ndir
ndir
{                                    TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag");                                    goto bad;                                }
TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag");
TIFFErrorExt(tif->tif_clientdata,module,                                                 "Cannot find SubIFD tag")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Cannot find SubIFD tag"
goto bad;
bad
if (nb->tdir_tag==TIFFTAG_SUBIFD)					break;
nb->tdir_tag==TIFFTAG_SUBIFD
nb->tdir_tag
nb
nb
tdir_tag
TIFFTAG_SUBIFD
TIFFTAG_SUBIFD
break;
if (!(tif->tif_flags&TIFF_BIGTIFF))				tif->tif_subifdoff=tif->tif_diroff+2+na*12+8;			else				tif->tif_subifdoff=tif->tif_diroff+8+na*20+12;
!(tif->tif_flags&TIFF_BIGTIFF)
(tif->tif_flags&TIFF_BIGTIFF)
tif->tif_flags&TIFF_BIGTIFF
tif->tif_flags
tif
tif
tif_flags
TIFF_BIGTIFF
TIFF_BIGTIFF
tif->tif_subifdoff=tif->tif_diroff+2+na*12+8;
tif->tif_subifdoff=tif->tif_diroff+2+na*12+8
tif->tif_subifdoff
tif
tif
tif_subifdoff
tif->tif_diroff+2+na*12+8
tif->tif_diroff+2+na*12
tif->tif_diroff+2
tif->tif_diroff
tif
tif
tif_diroff
2
na*12
na
na
12
8
tif->tif_subifdoff=tif->tif_diroff+8+na*20+12;
tif->tif_subifdoff=tif->tif_diroff+8+na*20+12
tif->tif_subifdoff
tif
tif
tif_subifdoff
tif->tif_diroff+8+na*20+12
tif->tif_diroff+8+na*20
tif->tif_diroff+8
tif->tif_diroff
tif
tif
tif_diroff
8
na*20
na
na
20
12
dirmem=_TIFFmalloc(dirsize);
dirmem=_TIFFmalloc(dirsize)
dirmem
dirmem
_TIFFmalloc(dirsize)
_TIFFmalloc
_TIFFmalloc
dirsize
dirsize
if (dirmem==NULL)	{		TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");		goto bad;	}
dirmem==NULL
dirmem
dirmem
NULL
NULL
{		TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");		goto bad;	}
TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");
TIFFErrorExt(tif->tif_clientdata,module,"Out of memory")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Out of memory"
goto bad;
bad
if (!(tif->tif_flags&TIFF_BIGTIFF))	{		uint8* n;		uint32 nTmp;		TIFFDirEntry* o;		n=dirmem;		*(uint16*)n=(uint16)ndir;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)n);		n+=2;		o=dir;		for (m=0; m<ndir; m++)		{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			nTmp = (uint32)o->tdir_count;			_TIFFmemcpy(n,&nTmp,4);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)n);			n+=4;			/* This is correct. The data has been */			/* swabbed previously in TIFFWriteDirectoryTagData */			_TIFFmemcpy(n,&o->tdir_offset,4);			n+=4;			o++;		}		nTmp = (uint32)tif->tif_nextdiroff;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong(&nTmp);		_TIFFmemcpy(n,&nTmp,4);	}	else	{		uint8* n;		TIFFDirEntry* o;		n=dirmem;		*(uint64*)n=ndir;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong8((uint64*)n);		n+=8;		o=dir;		for (m=0; m<ndir; m++)		{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			_TIFFmemcpy(n,&o->tdir_count,8);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)n);			n+=8;			_TIFFmemcpy(n,&o->tdir_offset,8);			n+=8;			o++;		}		_TIFFmemcpy(n,&tif->tif_nextdiroff,8);		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong8((uint64*)n);	}
!(tif->tif_flags&TIFF_BIGTIFF)
(tif->tif_flags&TIFF_BIGTIFF)
tif->tif_flags&TIFF_BIGTIFF
tif->tif_flags
tif
tif
tif_flags
TIFF_BIGTIFF
TIFF_BIGTIFF
{		uint8* n;		uint32 nTmp;		TIFFDirEntry* o;		n=dirmem;		*(uint16*)n=(uint16)ndir;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)n);		n+=2;		o=dir;		for (m=0; m<ndir; m++)		{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			nTmp = (uint32)o->tdir_count;			_TIFFmemcpy(n,&nTmp,4);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)n);			n+=4;			/* This is correct. The data has been */			/* swabbed previously in TIFFWriteDirectoryTagData */			_TIFFmemcpy(n,&o->tdir_offset,4);			n+=4;			o++;		}		nTmp = (uint32)tif->tif_nextdiroff;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong(&nTmp);		_TIFFmemcpy(n,&nTmp,4);	}
uint8* n;
uint8* n;
uint8
uint8
* n
*
n
uint32 nTmp;
uint32 nTmp;
uint32
uint32
nTmp
nTmp
TIFFDirEntry* o;
TIFFDirEntry* o;
TIFFDirEntry
TIFFDirEntry
* o
*
o
n=dirmem;
n=dirmem
n
n
dirmem
dirmem
*(uint16*)n=(uint16)ndir;
*(uint16*)n=(uint16)ndir
*(uint16*)n
(uint16*)n
uint16*
uint16
uint16
*
*
n
n
(uint16)ndir
uint16
uint16
uint16

ndir
ndir
if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)n);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabShort((uint16*)n);
TIFFSwabShort((uint16*)n)
TIFFSwabShort
TIFFSwabShort
(uint16*)n
uint16*
uint16
uint16
*
*
n
n
n+=2;
n+=2
n
n
2
o=dir;
o=dir
o
o
dir
dir
for (m=0; m<ndir; m++)		{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			nTmp = (uint32)o->tdir_count;			_TIFFmemcpy(n,&nTmp,4);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)n);			n+=4;			/* This is correct. The data has been */			/* swabbed previously in TIFFWriteDirectoryTagData */			_TIFFmemcpy(n,&o->tdir_offset,4);			n+=4;			o++;		}
m=0;
m=0
m
m
0
m<ndir
m
m
ndir
ndir
m++
m
m
{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			nTmp = (uint32)o->tdir_count;			_TIFFmemcpy(n,&nTmp,4);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)n);			n+=4;			/* This is correct. The data has been */			/* swabbed previously in TIFFWriteDirectoryTagData */			_TIFFmemcpy(n,&o->tdir_offset,4);			n+=4;			o++;		}
*(uint16*)n=o->tdir_tag;
*(uint16*)n=o->tdir_tag
*(uint16*)n
(uint16*)n
uint16*
uint16
uint16
*
*
n
n
o->tdir_tag
o
o
tdir_tag
if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabShort((uint16*)n);
TIFFSwabShort((uint16*)n)
TIFFSwabShort
TIFFSwabShort
(uint16*)n
uint16*
uint16
uint16
*
*
n
n
n+=2;
n+=2
n
n
2
*(uint16*)n=o->tdir_type;
*(uint16*)n=o->tdir_type
*(uint16*)n
(uint16*)n
uint16*
uint16
uint16
*
*
n
n
o->tdir_type
o
o
tdir_type
if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabShort((uint16*)n);
TIFFSwabShort((uint16*)n)
TIFFSwabShort
TIFFSwabShort
(uint16*)n
uint16*
uint16
uint16
*
*
n
n
n+=2;
n+=2
n
n
2
nTmp = (uint32)o->tdir_count;
nTmp = (uint32)o->tdir_count
nTmp
nTmp
(uint32)o->tdir_count
uint32
uint32
uint32

o->tdir_count
o
o
tdir_count
_TIFFmemcpy(n,&nTmp,4);
_TIFFmemcpy(n,&nTmp,4)
_TIFFmemcpy
_TIFFmemcpy
n
n
&nTmp
nTmp
nTmp
4
if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)n);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong((uint32*)n);
TIFFSwabLong((uint32*)n)
TIFFSwabLong
TIFFSwabLong
(uint32*)n
uint32*
uint32
uint32
*
*
n
n
n+=4;
n+=4
n
n
4
_TIFFmemcpy(n,&o->tdir_offset,4);
_TIFFmemcpy(n,&o->tdir_offset,4)
_TIFFmemcpy
_TIFFmemcpy
n
n
&o->tdir_offset
o->tdir_offset
o
o
tdir_offset
4
n+=4;
n+=4
n
n
4
o++;
o++
o
o
nTmp = (uint32)tif->tif_nextdiroff;
nTmp = (uint32)tif->tif_nextdiroff
nTmp
nTmp
(uint32)tif->tif_nextdiroff
uint32
uint32
uint32

tif->tif_nextdiroff
tif
tif
tif_nextdiroff
if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong(&nTmp);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong(&nTmp);
TIFFSwabLong(&nTmp)
TIFFSwabLong
TIFFSwabLong
&nTmp
nTmp
nTmp
_TIFFmemcpy(n,&nTmp,4);
_TIFFmemcpy(n,&nTmp,4)
_TIFFmemcpy
_TIFFmemcpy
n
n
&nTmp
nTmp
nTmp
4
{		uint8* n;		TIFFDirEntry* o;		n=dirmem;		*(uint64*)n=ndir;		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong8((uint64*)n);		n+=8;		o=dir;		for (m=0; m<ndir; m++)		{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			_TIFFmemcpy(n,&o->tdir_count,8);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)n);			n+=8;			_TIFFmemcpy(n,&o->tdir_offset,8);			n+=8;			o++;		}		_TIFFmemcpy(n,&tif->tif_nextdiroff,8);		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong8((uint64*)n);	}
uint8* n;
uint8* n;
uint8
uint8
* n
*
n
TIFFDirEntry* o;
TIFFDirEntry* o;
TIFFDirEntry
TIFFDirEntry
* o
*
o
n=dirmem;
n=dirmem
n
n
dirmem
dirmem
*(uint64*)n=ndir;
*(uint64*)n=ndir
*(uint64*)n
(uint64*)n
uint64*
uint64
uint64
*
*
n
n
ndir
ndir
if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong8((uint64*)n);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong8((uint64*)n);
TIFFSwabLong8((uint64*)n)
TIFFSwabLong8
TIFFSwabLong8
(uint64*)n
uint64*
uint64
uint64
*
*
n
n
n+=8;
n+=8
n
n
8
o=dir;
o=dir
o
o
dir
dir
for (m=0; m<ndir; m++)		{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			_TIFFmemcpy(n,&o->tdir_count,8);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)n);			n+=8;			_TIFFmemcpy(n,&o->tdir_offset,8);			n+=8;			o++;		}
m=0;
m=0
m
m
0
m<ndir
m
m
ndir
ndir
m++
m
m
{			*(uint16*)n=o->tdir_tag;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			*(uint16*)n=o->tdir_type;			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);			n+=2;			_TIFFmemcpy(n,&o->tdir_count,8);			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)n);			n+=8;			_TIFFmemcpy(n,&o->tdir_offset,8);			n+=8;			o++;		}
*(uint16*)n=o->tdir_tag;
*(uint16*)n=o->tdir_tag
*(uint16*)n
(uint16*)n
uint16*
uint16
uint16
*
*
n
n
o->tdir_tag
o
o
tdir_tag
if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabShort((uint16*)n);
TIFFSwabShort((uint16*)n)
TIFFSwabShort
TIFFSwabShort
(uint16*)n
uint16*
uint16
uint16
*
*
n
n
n+=2;
n+=2
n
n
2
*(uint16*)n=o->tdir_type;
*(uint16*)n=o->tdir_type
*(uint16*)n
(uint16*)n
uint16*
uint16
uint16
*
*
n
n
o->tdir_type
o
o
tdir_type
if (tif->tif_flags&TIFF_SWAB)				TIFFSwabShort((uint16*)n);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabShort((uint16*)n);
TIFFSwabShort((uint16*)n)
TIFFSwabShort
TIFFSwabShort
(uint16*)n
uint16*
uint16
uint16
*
*
n
n
n+=2;
n+=2
n
n
2
_TIFFmemcpy(n,&o->tdir_count,8);
_TIFFmemcpy(n,&o->tdir_count,8)
_TIFFmemcpy
_TIFFmemcpy
n
n
&o->tdir_count
o->tdir_count
o
o
tdir_count
8
if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)n);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong8((uint64*)n);
TIFFSwabLong8((uint64*)n)
TIFFSwabLong8
TIFFSwabLong8
(uint64*)n
uint64*
uint64
uint64
*
*
n
n
n+=8;
n+=8
n
n
8
_TIFFmemcpy(n,&o->tdir_offset,8);
_TIFFmemcpy(n,&o->tdir_offset,8)
_TIFFmemcpy
_TIFFmemcpy
n
n
&o->tdir_offset
o->tdir_offset
o
o
tdir_offset
8
n+=8;
n+=8
n
n
8
o++;
o++
o
o
_TIFFmemcpy(n,&tif->tif_nextdiroff,8);
_TIFFmemcpy(n,&tif->tif_nextdiroff,8)
_TIFFmemcpy
_TIFFmemcpy
n
n
&tif->tif_nextdiroff
tif->tif_nextdiroff
tif
tif
tif_nextdiroff
8
if (tif->tif_flags&TIFF_SWAB)			TIFFSwabLong8((uint64*)n);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong8((uint64*)n);
TIFFSwabLong8((uint64*)n)
TIFFSwabLong8
TIFFSwabLong8
(uint64*)n
uint64*
uint64
uint64
*
*
n
n
_TIFFfree(dir);
_TIFFfree(dir)
_TIFFfree
_TIFFfree
dir
dir
dir=NULL;
dir=NULL
dir
dir
NULL
NULL
if (!SeekOK(tif,tif->tif_diroff))	{		TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");		goto bad;	}
!SeekOK(tif,tif->tif_diroff)
SeekOK(tif,tif->tif_diroff)
SeekOK
SeekOK
tif
tif
tif->tif_diroff
tif
tif
tif_diroff
{		TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");		goto bad;	}
TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");
TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"IO error writing directory"
goto bad;
bad
if (!WriteOK(tif,dirmem,(tmsize_t)dirsize))	{		TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");		goto bad;	}
!WriteOK(tif,dirmem,(tmsize_t)dirsize)
WriteOK(tif,dirmem,(tmsize_t)dirsize)
WriteOK
WriteOK
tif
tif
dirmem
dirmem
(tmsize_t)dirsize
tmsize_t
tmsize_t
tmsize_t

dirsize
dirsize
{		TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");		goto bad;	}
TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory");
TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"IO error writing directory"
goto bad;
bad
_TIFFfree(dirmem);
_TIFFfree(dirmem)
_TIFFfree
_TIFFfree
dirmem
dirmem
if (imagedone)	{		TIFFFreeDirectory(tif);		tif->tif_flags &= ~TIFF_DIRTYDIRECT;		tif->tif_flags &= ~TIFF_DIRTYSTRIP;		(*tif->tif_cleanup)(tif);		/*		* Reset directory-related state for subsequent		* directories.		*/		TIFFCreateDirectory(tif);	}
imagedone
imagedone
{		TIFFFreeDirectory(tif);		tif->tif_flags &= ~TIFF_DIRTYDIRECT;		tif->tif_flags &= ~TIFF_DIRTYSTRIP;		(*tif->tif_cleanup)(tif);		/*		* Reset directory-related state for subsequent		* directories.		*/		TIFFCreateDirectory(tif);	}
TIFFFreeDirectory(tif);
TIFFFreeDirectory(tif)
TIFFFreeDirectory
TIFFFreeDirectory
tif
tif
tif->tif_flags &= ~TIFF_DIRTYDIRECT;
tif->tif_flags &= ~TIFF_DIRTYDIRECT
tif->tif_flags
tif
tif
tif_flags
~TIFF_DIRTYDIRECT
TIFF_DIRTYDIRECT
TIFF_DIRTYDIRECT
tif->tif_flags &= ~TIFF_DIRTYSTRIP;
tif->tif_flags &= ~TIFF_DIRTYSTRIP
tif->tif_flags
tif
tif
tif_flags
~TIFF_DIRTYSTRIP
TIFF_DIRTYSTRIP
TIFF_DIRTYSTRIP
(*tif->tif_cleanup)(tif);
(*tif->tif_cleanup)(tif)
(*tif->tif_cleanup)
*tif->tif_cleanup
tif->tif_cleanup
tif
tif
tif_cleanup
tif
tif
TIFFCreateDirectory(tif);
TIFFCreateDirectory(tif)
TIFFCreateDirectory
TIFFCreateDirectory
tif
tif
return(1);
(1)
1
bad:	if (dir!=NULL)		_TIFFfree(dir);
bad
if (dir!=NULL)		_TIFFfree(dir);
dir!=NULL
dir
dir
NULL
NULL
_TIFFfree(dir);
_TIFFfree(dir)
_TIFFfree
_TIFFfree
dir
dir
if (dirmem!=NULL)		_TIFFfree(dirmem);
dirmem!=NULL
dirmem
dirmem
NULL
NULL
_TIFFfree(dirmem);
_TIFFfree(dirmem)
_TIFFfree
_TIFFfree
dirmem
dirmem
return(0);
(0)
0
-----joern-----
(1856,2053,0)
(1261,136,0)
(796,1687,0)
(202,1065,0)
(1812,1516,0)
(1728,549,0)
(661,1133,0)
(1258,57,0)
(1122,986,0)
(1029,136,0)
(165,431,0)
(74,903,0)
(298,504,0)
(111,456,0)
(907,1165,0)
(794,136,0)
(1272,67,0)
(903,69,0)
(1559,785,0)
(921,506,0)
(1326,431,0)
(1431,1453,0)
(2053,136,0)
(64,136,0)
(234,668,0)
(2129,994,0)
(52,1067,0)
(441,1024,0)
(1075,429,0)
(1546,1062,0)
(548,2011,0)
(2170,814,0)
(794,879,0)
(1879,849,0)
(144,994,0)
(1367,589,0)
(1120,1660,0)
(1303,154,0)
(1379,2009,0)
(1309,173,0)
(1991,136,0)
(1312,2007,0)
(1630,1453,0)
(62,420,0)
(1971,284,0)
(2115,12,0)
(1512,2042,0)
(1660,431,0)
(1931,957,0)
(778,140,0)
(2017,153,0)
(105,674,0)
(567,2011,0)
(219,153,0)
(129,886,0)
(50,134,0)
(1568,431,0)
(1357,1550,0)
(1047,120,0)
(165,2069,0)
(892,1166,0)
(1781,611,0)
(1048,302,0)
(1862,395,0)
(1583,2005,0)
(1633,738,0)
(2122,726,0)
(1065,1912,0)
(438,1953,0)
(2042,1043,0)
(1898,431,0)
(1210,1752,0)
(471,1557,0)
(1926,879,0)
(1555,1670,0)
(606,1132,0)
(2127,1552,0)
(310,2155,0)
(587,1470,0)
(1143,78,0)
(620,879,0)
(312,96,0)
(8,1631,0)
(404,901,0)
(1288,1991,0)
(663,786,0)
(2141,864,0)
(1278,2107,0)
(1114,391,0)
(1748,1123,0)
(995,879,0)
(1719,1881,0)
(2130,1523,0)
(1912,1065,0)
(576,836,0)
(474,307,0)
(1107,1413,0)
(2110,391,0)
(1446,1636,0)
(198,127,0)
(1420,1173,0)
(713,1207,0)
(218,1205,0)
(1097,218,0)
(307,643,0)
(187,25,0)
(566,2048,0)
(451,1138,0)
(1785,605,0)
(690,1701,0)
(114,2141,0)
(1606,506,0)
(604,1800,0)
(2118,629,0)
(1472,879,0)
(1229,136,0)
(1038,1877,0)
(1236,1691,0)
(510,2096,0)
(1854,1950,0)
(308,879,0)
(1383,190,0)
(563,1938,0)
(1907,1360,0)
(950,1203,0)
(473,1546,0)
(1104,12,0)
(1651,145,0)
(1265,879,0)
(61,879,0)
(858,879,0)
(575,1381,0)
(133,945,0)
(1502,879,0)
(1986,1841,0)
(1692,1134,0)
(1741,2138,0)
(788,879,0)
(1404,288,0)
(144,1311,0)
(1406,2053,0)
(1105,145,0)
(1344,794,0)
(564,910,0)
(878,1074,0)
(1382,879,0)
(185,872,0)
(365,879,0)
(1031,1956,0)
(541,786,0)
(1138,451,0)
(91,506,0)
(1176,11,0)
(771,1546,0)
(1928,1261,0)
(1726,2074,0)
(1928,1150,0)
(1146,416,0)
(1480,2042,0)
(2013,391,0)
(1515,431,0)
(1948,900,0)
(964,233,0)
(1445,953,0)
(222,173,0)
(125,1761,0)
(2070,474,0)
(1134,860,0)
(337,136,0)
(459,170,0)
(1950,994,0)
(1057,879,0)
(986,2103,0)
(1897,404,0)
(1925,1347,0)
(886,69,0)
(1234,864,0)
(983,1362,0)
(1378,1939,0)
(1081,534,0)
(1720,431,0)
(191,431,0)
(1661,1674,0)
(465,1060,0)
(995,136,0)
(569,2159,0)
(1888,402,0)
(1562,87,0)
(633,431,0)
(1417,1132,0)
(1433,1404,0)
(187,796,0)
(373,1858,0)
(109,609,0)
(154,1066,0)
(194,337,0)
(1520,995,0)
(1073,1784,0)
(1935,2107,0)
(397,180,0)
(112,1865,0)
(2053,1406,0)
(1797,1250,0)
(1881,431,0)
(885,2119,0)
(1156,903,0)
(997,786,0)
(1678,1375,0)
(649,1257,0)
(1385,431,0)
(52,879,0)
(313,1207,0)
(408,11,0)
(1219,164,0)
(1449,1261,0)
(1475,620,0)
(2142,190,0)
(237,2074,0)
(1744,1436,0)
(1724,391,0)
(795,1550,0)
(75,1990,0)
(1842,288,0)
(2066,1212,0)
(1427,1309,0)
(573,341,0)
(562,2155,0)
(1837,401,0)
(2023,879,0)
(1571,2096,0)
(2007,1312,0)
(1492,879,0)
(2158,1021,0)
(218,979,0)
(342,864,0)
(2047,1205,0)
(1356,134,0)
(383,431,0)
(2166,534,0)
(1229,994,0)
(1882,1867,0)
(1182,1368,0)
(2107,212,0)
(1692,2096,0)
(1344,431,0)
(695,391,0)
(1598,1640,0)
(680,52,0)
(965,539,0)
(1762,15,0)
(39,853,0)
(29,1180,0)
(1330,1149,0)
(153,900,0)
(67,1382,0)
(832,685,0)
(1495,1032,0)
(15,629,0)
(603,886,0)
(1875,1121,0)
(1120,994,0)
(2103,986,0)
(1510,365,0)
(1246,254,0)
(1175,109,0)
(1071,131,0)
(2170,1832,0)
(1353,1464,0)
(504,879,0)
(618,1137,0)
(1858,994,0)
(1778,1618,0)
(1397,2034,0)
(1984,498,0)
(2095,518,0)
(824,1347,0)
(888,212,0)
(1453,1213,0)
(2074,136,0)
(2168,594,0)
(1833,760,0)
(1359,879,0)
(1565,235,0)
(529,717,0)
(2097,1212,0)
(485,204,0)
(1651,756,0)
(1138,879,0)
(1443,1255,0)
(2105,1942,0)
(1074,878,0)
(1297,1118,0)
(1753,1820,0)
(1953,438,0)
(903,341,0)
(787,1523,0)
(2045,572,0)
(1029,1360,0)
(774,2027,0)
(2129,2113,0)
(568,219,0)
(857,879,0)
(2007,1055,0)
(1198,1540,0)
(1800,1100,0)
(1228,1926,0)
(1762,136,0)
(2074,108,0)
(1646,801,0)
(1762,994,0)
(1836,1799,0)
(1776,546,0)
(1573,879,0)
(1832,2170,0)
(2129,1553,0)
(768,2042,0)
(1913,244,0)
(640,534,0)
(520,572,0)
(256,1550,0)
(1140,620,0)
(910,1420,0)
(1144,391,0)
(1554,1759,0)
(1607,225,0)
(1784,897,0)
(1790,1034,0)
(1132,665,0)
(1280,120,0)
(455,1621,0)
(1645,61,0)
(2011,297,0)
(1165,316,0)
(1719,1704,0)
(751,136,0)
(170,69,0)
(83,1109,0)
(1521,2121,0)
(1331,1643,0)
(241,964,0)
(1132,1248,0)
(25,187,0)
(1006,1858,0)
(919,1190,0)
(434,1056,0)
(1519,1212,0)
(1597,1065,0)
(824,935,0)
(326,1858,0)
(1706,1549,0)
(629,879,0)
(1387,153,0)
(2152,1830,0)
(1038,1085,0)
(942,1018,0)
(1952,1181,0)
(1013,66,0)
(51,378,0)
(1727,583,0)
(331,561,0)
(1800,2059,0)
(1084,715,0)
(229,1109,0)
(144,1360,0)
(565,130,0)
(1347,1513,0)
(1864,1550,0)
(1886,2069,0)
(1214,454,0)
(1019,1557,0)
(1896,1034,0)
(2045,1756,0)
(1865,1018,0)
(1005,750,0)
(1358,88,0)
(674,1679,0)
(181,308,0)
(881,85,0)
(1088,1257,0)
(1751,1858,0)
(31,1490,0)
(854,1373,0)
(480,28,0)
(679,979,0)
(1399,1212,0)
(1152,590,0)
(5,1907,0)
(1423,28,0)
(1632,1030,0)
(1065,994,0)
(1393,233,0)
(686,577,0)
(89,879,0)
(1648,775,0)
(1560,1536,0)
(1117,1739,0)
(671,1790,0)
(2063,740,0)
(1190,879,0)
(703,1359,0)
(1294,2096,0)
(369,788,0)
(958,469,0)
(160,391,0)
(987,1586,0)
(870,1550,0)
(12,2117,0)
(527,1494,0)
(19,710,0)
(1324,2061,0)
(572,136,0)
(72,965,0)
(479,391,0)
(892,1761,0)
(1016,100,0)
(1695,1399,0)
(411,275,0)
(2018,1473,0)
(100,1257,0)
(1407,431,0)
(273,2141,0)
(1851,111,0)
(2058,879,0)
(114,1899,0)
(727,371,0)
(1321,270,0)
(2126,136,0)
(2024,248,0)
(1593,492,0)
(2008,144,0)
(184,1090,0)
(38,1013,0)
(858,204,0)
(1580,879,0)
(832,1530,0)
(1538,243,0)
(454,1214,0)
(1839,879,0)
(1617,572,0)
(689,1586,0)
(1605,2141,0)
(786,1997,0)
(630,144,0)
(872,879,0)
(739,1484,0)
(1949,136,0)
(1263,1943,0)
(153,1290,0)
(1535,391,0)
(2074,2029,0)
(1859,1020,0)
(64,776,0)
(1970,337,0)
(1811,1609,0)
(37,957,0)
(1774,1573,0)
(1238,1120,0)
(187,1489,0)
(912,1682,0)
(693,765,0)
(1181,1676,0)
(1330,586,0)
(197,1237,0)
(626,534,0)
(174,879,0)
(1487,652,0)
(1944,1692,0)
(278,216,0)
(70,1938,0)
(1502,2164,0)
(108,2074,0)
(1020,1300,0)
(14,1540,0)
(1601,172,0)
(819,1798,0)
(2022,2009,0)
(1701,879,0)
(1450,2096,0)
(1444,886,0)
(693,1227,0)
(833,33,0)
(1835,144,0)
(996,136,0)
(1561,2045,0)
(1934,643,0)
(751,1815,0)
(233,2076,0)
(1301,700,0)
(1181,2096,0)
(995,705,0)
(1838,530,0)
(955,1107,0)
(844,1550,0)
(1839,2061,0)
(1877,1051,0)
(1621,796,0)
(1664,1003,0)
(577,8,0)
(53,1820,0)
(1543,1227,0)
(2094,1979,0)
(1636,881,0)
(1768,2011,0)
(497,1667,0)
(979,395,0)
(1399,1695,0)
(1079,1862,0)
(1066,2158,0)
(836,576,0)
(1225,194,0)
(6,1523,0)
(584,589,0)
(1704,78,0)
(963,1213,0)
(1289,1237,0)
(1959,937,0)
(2031,1118,0)
(1183,534,0)
(1939,994,0)
(974,2094,0)
(917,23,0)
(117,995,0)
(110,1939,0)
(142,54,0)
(289,2159,0)
(1995,1979,0)
(1764,1761,0)
(998,1184,0)
(1148,431,0)
(1624,1950,0)
(1588,603,0)
(1839,529,0)
(1159,431,0)
(1201,105,0)
(2046,2155,0)
(1716,481,0)
(1667,879,0)
(2058,1629,0)
(1268,1455,0)
(1022,1492,0)
(1111,426,0)
(1965,1826,0)
(915,715,0)
(522,164,0)
(1302,779,0)
(1845,1523,0)
(105,1898,0)
(1018,1865,0)
(283,1592,0)
(2092,150,0)
(1670,682,0)
(1139,190,0)
(47,135,0)
(1663,1799,0)
(2159,289,0)
(1018,1205,0)
(646,937,0)
(1800,1515,0)
(1762,428,0)
(140,2111,0)
(968,270,0)
(341,903,0)
(224,713,0)
(1968,490,0)
(1162,1173,0)
(650,453,0)
(1938,420,0)
(28,668,0)
(1785,459,0)
(986,136,0)
(957,994,0)
(1807,1248,0)
(780,1667,0)
(1676,1181,0)
(1257,100,0)
(105,707,0)
(1250,1979,0)
(1318,1550,0)
(759,1179,0)
(2069,165,0)
(420,1938,0)
(1589,142,0)
(216,1894,0)
(1244,436,0)
(2086,1692,0)
(97,1530,0)
(1329,113,0)
(809,1911,0)
(1029,879,0)
(1831,2027,0)
(472,1964,0)
(1840,2091,0)
(46,1811,0)
(85,881,0)
(458,393,0)
(111,2051,0)
(209,1532,0)
(431,1118,0)
(1949,994,0)
(551,1949,0)
(474,1360,0)
(288,1404,0)
(959,879,0)
(1415,215,0)
(1647,684,0)
(1024,1988,0)
(273,1761,0)
(388,504,0)
(1179,1192,0)
(1978,593,0)
(476,1118,0)
(812,33,0)
(1305,1059,0)
(1270,105,0)
(367,572,0)
(1603,1375,0)
(904,796,0)
(1895,2159,0)
(2076,233,0)
(16,1573,0)
(1719,867,0)
(910,879,0)
(777,974,0)
(614,2132,0)
(1730,1261,0)
(1903,763,0)
(323,1265,0)
(1934,1030,0)
(159,1149,0)
(2128,508,0)
(751,879,0)
(57,2167,0)
(243,1066,0)
(1381,2096,0)
(1518,1212,0)
(980,1888,0)
(1300,685,0)
(1292,1856,0)
(868,1478,0)
(1669,1237,0)
(786,879,0)
(1592,879,0)
(1347,879,0)
(1871,2041,0)
(1985,1229,0)
(1667,780,0)
(1104,556,0)
(1800,136,0)
(1191,1600,0)
(2149,2007,0)
(68,1989,0)
(1501,1494,0)
(688,794,0)
(343,1862,0)
(2138,879,0)
(1621,598,0)
(1665,459,0)
(1598,773,0)
(705,995,0)
(1747,996,0)
(567,431,0)
(1453,1630,0)
(2143,1991,0)
(1935,1213,0)
(735,1871,0)
(646,1489,0)
(1541,534,0)
(1909,864,0)
(1109,87,0)
(1307,1023,0)
(1382,48,0)
(109,136,0)
(1528,307,0)
(1569,155,0)
(1738,1550,0)
(1966,832,0)
(2047,167,0)
(1326,120,0)
(734,443,0)
(619,1572,0)
(1630,1120,0)
(496,1380,0)
(1468,1118,0)
(539,1799,0)
(1159,506,0)
(1821,1596,0)
(457,132,0)
(315,1719,0)
(1824,1855,0)
(936,496,0)
(2053,994,0)
(643,1213,0)
(367,431,0)
(1283,244,0)
(383,751,0)
(170,879,0)
(1873,431,0)
(12,1104,0)
(849,1762,0)
(1799,971,0)
(658,340,0)
(1366,66,0)
(2101,766,0)
(860,2005,0)
(1055,218,0)
(589,879,0)
(1385,1492,0)
(2125,591,0)
(763,534,0)
(215,879,0)
(2092,1229,0)
(1516,1429,0)
(586,1213,0)
(1762,879,0)
(674,105,0)
(1035,1799,0)
(2058,1873,0)
(893,1987,0)
(937,1066,0)
(1252,155,0)
(1640,1598,0)
(808,1095,0)
(1457,237,0)
(425,231,0)
(545,1950,0)
(496,1386,0)
(1007,469,0)
(1473,1364,0)
(1121,879,0)
(637,456,0)
(937,879,0)
(271,1223,0)
(346,450,0)
(1987,893,0)
(2047,617,0)
(8,577,0)
(2114,49,0)
(1725,1660,0)
(504,1565,0)
(652,1487,0)
(1374,326,0)
(429,218,0)
(1290,153,0)
(563,1540,0)
(1259,751,0)
(618,1370,0)
(557,496,0)
(1057,1151,0)
(615,931,0)
(1714,1833,0)
(1839,994,0)
(1148,986,0)
(2098,1761,0)
(791,134,0)
(1567,1552,0)
(2141,1761,0)
(922,1164,0)
(2071,798,0)
(1941,132,0)
(158,994,0)
(2053,1856,0)
(784,370,0)
(1119,402,0)
(867,1719,0)
(1951,534,0)
(529,1839,0)
(1825,418,0)
(542,1992,0)
(533,1720,0)
(859,508,0)
(555,1525,0)
(100,1016,0)
(1846,826,0)
(1777,1024,0)
(351,986,0)
(1109,360,0)
(328,1519,0)
(1141,1752,0)
(1699,1766,0)
(1222,1555,0)
(212,2107,0)
(725,1550,0)
(1893,2132,0)
(1442,190,0)
(513,1929,0)
(1099,1338,0)
(2012,788,0)
(1158,190,0)
(1361,971,0)
(482,431,0)
(105,994,0)
(1918,169,0)
(611,129,0)
(1642,786,0)
(915,2155,0)
(605,2023,0)
(1404,259,0)
(1155,1261,0)
(873,534,0)
(78,879,0)
(1504,878,0)
(1007,2158,0)
(726,1212,0)
(1408,2167,0)
(684,879,0)
(27,1382,0)
(736,879,0)
(691,1065,0)
(1382,136,0)
(1901,2053,0)
(617,2047,0)
(893,1179,0)
(2089,886,0)
(360,1109,0)
(272,994,0)
(1546,473,0)
(1827,886,0)
(1234,1973,0)
(1411,225,0)
(1440,2053,0)
(1689,158,0)
(773,1598,0)
(572,994,0)
(1613,2125,0)
(1926,816,0)
(886,994,0)
(257,225,0)
(318,572,0)
(1483,2103,0)
(765,541,0)
(849,431,0)
(1107,1411,0)
(106,1874,0)
(1943,1824,0)
(571,68,0)
(1239,404,0)
(258,549,0)
(2168,879,0)
(976,1761,0)
(662,1091,0)
(1649,1953,0)
(824,73,0)
(296,431,0)
(903,74,0)
(1986,1368,0)
(1780,194,0)
(1776,1164,0)
(1256,272,0)
(973,1784,0)
(715,915,0)
(2069,1886,0)
(601,959,0)
(48,1382,0)
(1643,1893,0)
(847,1404,0)
(2116,1477,0)
(190,1383,0)
(1491,473,0)
(142,879,0)
(187,1572,0)
(1067,52,0)
(851,431,0)
(329,1540,0)
(478,1956,0)
(765,693,0)
(223,391,0)
(1878,534,0)
(1093,1550,0)
(1441,740,0)
(1829,187,0)
(2053,1319,0)
(1919,153,0)
(2057,1431,0)
(68,1212,0)
(469,1007,0)
(284,1596,0)
(546,879,0)
(1799,539,0)
(1988,1024,0)
(903,136,0)
(1215,100,0)
(1748,1212,0)
(189,431,0)
(1858,1360,0)
(707,105,0)
(1482,1550,0)
(13,952,0)
(178,158,0)
(805,914,0)
(1190,1696,0)
(963,173,0)
(1755,751,0)
(794,688,0)
(835,1776,0)
(1281,486,0)
(1404,136,0)
(150,2092,0)
(733,1550,0)
(410,1817,0)
(1479,879,0)
(2081,1213,0)
(390,886,0)
(164,2006,0)
(1217,1158,0)
(2134,1940,0)
(182,158,0)
(670,1368,0)
(1674,67,0)
(149,2094,0)
(266,391,0)
(1091,1254,0)
(1120,136,0)
(1666,1949,0)
(66,431,0)
(467,877,0)
(1696,120,0)
(509,1574,0)
(1221,192,0)
(996,54,0)
(1373,1023,0)
(474,879,0)
(1435,1223,0)
(2167,509,0)
(1961,243,0)
(1426,1166,0)
(1125,1550,0)
(1745,946,0)
(44,1234,0)
(1687,796,0)
(1183,1216,0)
(1404,879,0)
(1629,2058,0)
(231,2103,0)
(1058,1214,0)
(549,879,0)
(1742,879,0)
(1285,786,0)
(1804,1007,0)
(134,879,0)
(556,1104,0)
(1373,879,0)
(1782,1719,0)
(789,1550,0)
(1203,586,0)
(1166,892,0)
(1492,136,0)
(1183,1714,0)
(153,879,0)
(2023,605,0)
(543,402,0)
(824,1434,0)
(1133,894,0)
(889,1550,0)
(1008,779,0)
(1795,2011,0)
(1178,108,0)
(1841,1986,0)
(1573,1172,0)
(1822,428,0)
(957,879,0)
(180,397,0)
(2069,879,0)
(1057,1248,0)
(1739,1563,0)
(288,1842,0)
(2069,994,0)
(900,61,0)
(927,196,0)
(1765,121,0)
(1425,1967,0)
(1120,1238,0)
(470,781,0)
(1893,1643,0)
(681,2129,0)
(148,2073,0)
(1308,1315,0)
(1166,1956,0)
(1991,612,0)
(1184,1021,0)
(1956,994,0)
(636,2096,0)
(850,1732,0)
(120,994,0)
(1032,879,0)
(622,1089,0)
(1051,1877,0)
(1183,952,0)
(450,431,0)
(285,1939,0)
(2104,2074,0)
(1752,879,0)
(1810,1674,0)
(1112,1187,0)
(498,1248,0)
(135,879,0)
(1134,1692,0)
(2093,1799,0)
(56,534,0)
(1120,879,0)
(1224,879,0)
(219,431,0)
(600,1030,0)
(75,1987,0)
(1284,1756,0)
(1949,1666,0)
(1598,69,0)
(1057,1861,0)
(956,1104,0)
(1478,1243,0)
(1260,1119,0)
(1425,64,0)
(639,1313,0)
(991,679,0)
(1862,1079,0)
(751,994,0)
(1881,1719,0)
(1940,23,0)
(810,2069,0)
(525,196,0)
(440,1455,0)
(1492,152,0)
(2073,994,0)
(326,1500,0)
(1830,879,0)
(2001,315,0)
(368,1003,0)
(1207,713,0)
(1807,879,0)
(1575,529,0)
(1933,1779,0)
(143,1746,0)
(277,353,0)
(158,1689,0)
(758,302,0)
(496,652,0)
(1295,1172,0)
(761,1193,0)
(1085,427,0)
(833,1377,0)
(257,248,0)
(1530,776,0)
(154,52,0)
(1404,1232,0)
(1369,879,0)
(935,2030,0)
(956,2096,0)
(532,259,0)
(231,879,0)
(1518,452,0)
(775,879,0)
(1333,1275,0)
(1655,1990,0)
(1293,608,0)
(616,1032,0)
(94,1082,0)
(378,2131,0)
(609,431,0)
(972,794,0)
(382,18,0)
(1275,158,0)
(1555,1222,0)
(93,2121,0)
(2009,879,0)
(1911,1779,0)
(211,1739,0)
(2158,1066,0)
(2011,879,0)
(241,879,0)
(1193,879,0)
(1772,1997,0)
(1598,994,0)
(1311,144,0)
(102,677,0)
(1360,1255,0)
(860,1134,0)
(1991,994,0)
(741,1957,0)
(1950,126,0)
(2059,1800,0)
(65,433,0)
(866,534,0)
(134,50,0)
(1739,994,0)
(856,1784,0)
(63,1219,0)
(317,1654,0)
(244,879,0)
(1342,879,0)
(1439,428,0)
(1227,693,0)
(672,1565,0)
(986,933,0)
(760,1833,0)
(802,736,0)
(757,391,0)
(1237,879,0)
(935,429,0)
(2169,1950,0)
(572,879,0)
(1183,620,0)
(1568,499,0)
(1171,1477,0)
(2087,1707,0)
(1939,392,0)
(1109,136,0)
(237,431,0)
(582,677,0)
(2074,237,0)
(1211,1436,0)
(961,481,0)
(1416,1290,0)
(806,2101,0)
(134,1296,0)
(762,431,0)
(115,410,0)
(1390,845,0)
(750,431,0)
(969,2032,0)
(585,2053,0)
(1407,170,0)
(916,2125,0)
(32,1719,0)
(1183,1038,0)
(364,206,0)
(45,640,0)
(824,1038,0)
(665,1132,0)
(901,404,0)
(2074,994,0)
(492,879,0)
(2004,141,0)
(986,1148,0)
(1131,1091,0)
(932,1234,0)
(1055,33,0)
(934,1602,0)
(1450,945,0)
(1188,391,0)
(446,1885,0)
(1907,1474,0)
(1597,30,0)
(232,1265,0)
(1586,689,0)
(151,246,0)
(794,1180,0)
(1132,1861,0)
(572,772,0)
(1874,879,0)
(1271,192,0)
(498,1572,0)
(404,614,0)
(946,1187,0)
(1350,598,0)
(309,1871,0)
(1986,829,0)
(1179,2164,0)
(971,1799,0)
(1660,1120,0)
(978,1550,0)
(246,192,0)
(1930,957,0)
(1261,1928,0)
(559,1261,0)
(170,459,0)
(953,1732,0)
(199,539,0)
(1077,995,0)
(1195,1707,0)
(464,154,0)
(214,1939,0)
(302,758,0)
(164,1219,0)
(380,1798,0)
(2155,879,0)
(2155,915,0)
(1261,879,0)
(646,1861,0)
(2003,672,0)
(800,959,0)
(2080,2102,0)
(325,1402,0)
(2042,1480,0)
(509,2167,0)
(1517,1018,0)
(144,69,0)
(914,1798,0)
(499,1568,0)
(1042,1550,0)
(1029,296,0)
(190,879,0)
(1991,594,0)
(506,1159,0)
(1018,979,0)
(1187,946,0)
(1290,1752,0)
(1719,315,0)
(1359,87,0)
(966,1830,0)
(121,1213,0)
(1922,1095,0)
(1013,38,0)
(1069,438,0)
(495,1523,0)
(613,1654,0)
(1413,1107,0)
(1927,1372,0)
(668,1404,0)
(1269,1434,0)
(1313,1121,0)
(891,134,0)
(1968,1736,0)
(675,102,0)
(1556,69,0)
(2147,340,0)
(1185,2096,0)
(327,431,0)
(183,297,0)
(1997,431,0)
(1682,314,0)
(482,1109,0)
(17,1790,0)
(1902,1822,0)
(1332,391,0)
(1784,879,0)
(269,1705,0)
(1545,1071,0)
(1527,1029,0)
(762,2129,0)
(508,2128,0)
(1713,1236,0)
(1392,553,0)
(486,879,0)
(842,1358,0)
(144,879,0)
(321,879,0)
(1584,1874,0)
(204,858,0)
(1192,1179,0)
(1907,69,0)
(1598,136,0)
(1023,1373,0)
(1375,127,0)
(170,994,0)
(1183,73,0)
(1422,886,0)
(1992,1004,0)
(2068,1988,0)
(1053,1202,0)
(1183,935,0)
(272,136,0)
(1065,1597,0)
(1818,2073,0)
(974,879,0)
(1651,824,0)
(1770,331,0)
(1429,1516,0)
(389,290,0)
(263,78,0)
(1338,1523,0)
(1855,1523,0)
(404,136,0)
(672,534,0)
(1183,339,0)
(1262,1553,0)
(1799,879,0)
(1415,1382,0)
(1095,879,0)
(1990,172,0)
(1578,733,0)
(1386,431,0)
(489,567,0)
(726,1787,0)
(1474,1907,0)
(295,2034,0)
(71,530,0)
(2044,2168,0)
(1657,1695,0)
(1949,1363,0)
(1762,2002,0)
(561,331,0)
(128,1979,0)
(913,507,0)
(1828,1399,0)
(1012,1450,0)
(461,296,0)
(1129,2053,0)
(416,879,0)
(1168,717,0)
(1039,1953,0)
(1958,135,0)
(1399,1522,0)
(7,1721,0)
(12,879,0)
(2048,879,0)
(2034,1214,0)
(786,994,0)
(646,796,0)
(1068,1029,0)
(1799,994,0)
(363,64,0)
(469,879,0)
(570,1800,0)
(1337,131,0)
(1995,135,0)
(68,416,0)
(404,1360,0)
(1164,1213,0)
(574,391,0)
(1025,364,0)
(1405,1333,0)
(1376,1369,0)
(275,879,0)
(1709,1330,0)
(1763,881,0)
(807,1550,0)
(307,474,0)
(2020,1020,0)
(668,28,0)
(862,1583,0)
(2041,1871,0)
(508,859,0)
(2016,674,0)
(2051,111,0)
(1431,2009,0)
(1094,120,0)
(676,779,0)
(1234,44,0)
(427,1956,0)
(1136,903,0)
(1000,549,0)
(1907,60,0)
(404,1239,0)
(1534,2170,0)
(423,780,0)
(338,38,0)
(643,1934,0)
(472,1540,0)
(591,2125,0)
(456,111,0)
(1377,833,0)
(878,879,0)
(1167,492,0)
(845,945,0)
(518,1815,0)
(2163,205,0)
(264,1120,0)
(339,1961,0)
(1807,3,0)
(717,529,0)
(164,1213,0)
(1183,1434,0)
(945,2005,0)
(1843,321,0)
(1309,879,0)
(2042,994,0)
(1492,2162,0)
(1402,391,0)
(731,1530,0)
(2058,136,0)
(242,1372,0)
(87,1359,0)
(1021,2158,0)
(1391,1732,0)
(1206,592,0)
(2026,215,0)
(1862,1514,0)
(2011,136,0)
(1348,170,0)
(924,478,0)
(19,879,0)
(1029,1219,0)
(1670,1555,0)
(824,1592,0)
(1062,879,0)
(679,1009,0)
(1676,702,0)
(1233,431,0)
(463,1550,0)
(473,1213,0)
(1708,235,0)
(938,1453,0)
(1063,1947,0)
(397,230,0)
(1370,618,0)
(803,404,0)
(665,619,0)
(685,1300,0)
(1811,1942,0)
(1034,1790,0)
(1957,1066,0)
(1799,136,0)
(2074,879,0)
(1447,1364,0)
(69,1255,0)
(1739,879,0)
(766,2101,0)
(886,129,0)
(474,136,0)
(1507,1519,0)
(1833,1714,0)
(386,1248,0)
(864,1761,0)
(1024,879,0)
(402,1119,0)
(1625,1057,0)
(413,391,0)
(1328,1255,0)
(259,1404,0)
(421,994,0)
(755,482,0)
(1929,450,0)
(1230,586,0)
(609,109,0)
(1885,652,0)
(720,594,0)
(656,1065,0)
(996,1033,0)
(1935,1311,0)
(1839,136,0)
(1573,994,0)
(1734,1550,0)
(2083,391,0)
(2107,1935,0)
(1065,136,0)
(535,1222,0)
(1494,879,0)
(1905,1798,0)
(1720,1573,0)
(1650,643,0)
(1910,2111,0)
(1616,534,0)
(2151,1283,0)
(655,879,0)
(0,386,0)
(1016,1855,0)
(435,190,0)
(2158,1007,0)
(249,569,0)
(804,1972,0)
(327,1784,0)
(1372,1823,0)
(1610,596,0)
(1001,1386,0)
(528,1383,0)
(951,1669,0)
(1784,1073,0)
(1957,879,0)
(2162,1479,0)
(614,404,0)
(109,879,0)
(1100,1800,0)
(2091,1840,0)
(1802,609,0)
(155,431,0)
(811,1342,0)
(289,33,0)
(831,1056,0)
(1110,1159,0)
(1375,1603,0)
(863,1325,0)
(41,1326,0)
(1014,1580,0)
(1316,1118,0)
(279,1185,0)
(1132,879,0)
(660,1855,0)
(1161,534,0)
(945,1325,0)
(2131,378,0)
(1226,1109,0)
(60,1907,0)
(2109,1436,0)
(1109,482,0)
(742,1370,0)
(96,210,0)
(81,692,0)
(429,935,0)
(190,435,0)
(1358,1798,0)
(526,60,0)
(445,474,0)
(365,1480,0)
(120,136,0)
(1553,788,0)
(1205,33,0)
(314,1370,0)
(596,1055,0)
(491,391,0)
(2053,1360,0)
(1170,1687,0)
(836,1248,0)
(132,879,0)
(1076,2039,0)
(1207,109,0)
(1806,1135,0)
(158,136,0)
(634,1598,0)
(26,2042,0)
(311,410,0)
(1120,69,0)
(1409,1565,0)
(1266,766,0)
(824,1216,0)
(1382,994,0)
(308,850,0)
(781,801,0)
(584,1254,0)
(745,2069,0)
(1500,1074,0)
(144,1233,0)
(828,416,0)
(1490,257,0)
(1029,1527,0)
(2145,391,0)
(1639,1807,0)
(2074,69,0)
(583,879,0)
(1354,391,0)
(704,469,0)
(1403,478,0)
(728,951,0)
(1917,857,0)
(126,431,0)
(1681,12,0)
(243,879,0)
(90,273,0)
(443,1979,0)
(957,1911,0)
(268,1957,0)
(332,109,0)
(1868,1377,0)
(1283,1236,0)
(899,1184,0)
(2155,136,0)
(702,1676,0)
(1339,225,0)
(306,583,0)
(1607,798,0)
(1335,1074,0)
(1894,216,0)
(970,1550,0)
(1216,1861,0)
(1819,215,0)
(1723,1119,0)
(403,1552,0)
(498,1861,0)
(1771,2168,0)
(894,2096,0)
(2005,1523,0)
(1608,2020,0)
(643,307,0)
(1950,545,0)
(1135,1476,0)
(221,1489,0)
(981,1090,0)
(1183,1592,0)
(1869,120,0)
(59,1749,0)
(1149,1330,0)
(120,1280,0)
(1470,587,0)
(61,900,0)
(2084,957,0)
(1758,1229,0)
(1621,1489,0)
(744,561,0)
(2139,1202,0)
(2063,1217,0)
(931,553,0)
(1358,1368,0)
(1236,1213,0)
(1990,75,0)
(588,421,0)
(898,855,0)
(1717,1023,0)
(596,33,0)
(2027,1831,0)
(994,1118,0)
(1822,879,0)
(1214,2034,0)
(1815,751,0)
(1362,983,0)
(861,596,0)
(581,1165,0)
(1311,1935,0)
(1653,979,0)
(1945,391,0)
(161,959,0)
(1638,1133,0)
(1817,273,0)
(644,1179,0)
(1476,1135,0)
(203,1701,0)
(1509,1635,0)
(404,69,0)
(886,879,0)
(1586,1853,0)
(635,1523,0)
(2096,1602,0)
(547,174,0)
(1414,404,0)
(976,206,0)
(1574,509,0)
(250,391,0)
(976,273,0)
(740,2063,0)
(1434,879,0)
(73,128,0)
(2058,994,0)
(1760,1582,0)
(192,2096,0)
(1179,800,0)
(54,142,0)
(749,1166,0)
(1157,243,0)
(1033,996,0)
(2079,710,0)
(2073,136,0)
(836,386,0)
(166,2074,0)
(353,1748,0)
(1196,1732,0)
(1784,136,0)
(701,799,0)
(1811,139,0)
(669,1300,0)
(410,1368,0)
(88,1358,0)
(1981,1824,0)
(2002,1762,0)
(345,114,0)
(1183,1009,0)
(449,391,0)
(109,1175,0)
(1858,1751,0)
(359,2069,0)
(1996,1679,0)
(824,1009,0)
(631,109,0)
(989,23,0)
(799,1552,0)
(1598,1360,0)
(903,879,0)
(89,816,0)
(652,496,0)
(1320,1640,0)
(1715,1108,0)
(641,2063,0)
(247,19,0)
(1179,879,0)
(412,1842,0)
(962,114,0)
(2032,1213,0)
(1010,391,0)
(2042,136,0)
(212,879,0)
(895,129,0)
(1558,385,0)
(948,1719,0)
(1179,136,0)
(1108,879,0)
(1666,431,0)
(1563,431,0)
(2064,1622,0)
(1434,1066,0)
(1497,1224,0)
(824,736,0)
(536,127,0)
(448,275,0)
(2131,879,0)
(1938,70,0)
(1511,2069,0)
(1929,1687,0)
(393,1701,0)
(350,1907,0)
(1219,1029,0)
(1992,879,0)
(783,66,0)
(603,431,0)
(620,443,0)
(869,1472,0)
(1852,956,0)
(1411,1107,0)
(1130,2030,0)
(217,1939,0)
(437,1345,0)
(2085,952,0)
(116,1550,0)
(2077,1420,0)
(1842,879,0)
(1180,794,0)
(1205,1056,0)
(156,721,0)
(926,391,0)
(153,136,0)
(1856,1603,0)
(168,2005,0)
(1261,113,0)
(23,1940,0)
(1029,994,0)
(1352,128,0)
(1592,1250,0)
(387,1311,0)
(220,391,0)
(235,1565,0)
(1080,319,0)
(284,453,0)
(1018,1436,0)
(490,1213,0)
(1362,816,0)
(873,879,0)
(1096,974,0)
(2159,569,0)
(2050,1472,0)
(1816,54,0)
(1568,1634,0)
(1223,2096,0)
(235,598,0)
(851,1798,0)
(110,431,0)
(506,714,0)
(1248,836,0)
(995,1077,0)
(876,1244,0)
(824,534,0)
(426,1304,0)
(1243,1478,0)
(821,534,0)
(1291,915,0)
(494,61,0)
(21,1518,0)
(1977,518,0)
(447,231,0)
(2155,191,0)
(2165,1839,0)
(426,879,0)
(1253,1108,0)
(189,1858,0)
(2032,951,0)
(1254,1091,0)
(105,136,0)
(1346,762,0)
(138,403,0)
(865,1742,0)
(546,1776,0)
(1187,879,0)
(605,1785,0)
(963,341,0)
(890,605,0)
(1719,136,0)
(799,431,0)
(1370,314,0)
(2065,1229,0)
(689,1360,0)
(1633,340,0)
(190,1158,0)
(538,754,0)
(971,431,0)
(1380,496,0)
(1525,1342,0)
(1351,1179,0)
(1748,353,0)
(1074,1500,0)
(794,994,0)
(1600,879,0)
(2075,1817,0)
(2136,109,0)
(1294,2092,0)
(202,431,0)
(430,986,0)
(1158,1217,0)
(510,862,0)
(1668,189,0)
(1817,1761,0)
(1492,1385,0)
(240,598,0)
(1235,976,0)
(1027,2023,0)
(1267,1550,0)
(996,366,0)
(1672,321,0)
(748,1123,0)
(4,1550,0)
(1485,64,0)
(2160,1474,0)
(1003,879,0)
(593,2096,0)
(1401,1183,0)
(474,994,0)
(286,2006,0)
(1448,976,0)
(1572,187,0)
(638,308,0)
(1120,1630,0)
(1894,611,0)
(1077,431,0)
(1070,1779,0)
(114,1761,0)
(1696,1190,0)
(1224,1497,0)
(825,758,0)
(506,879,0)
(24,33,0)
(2030,1130,0)
(1164,1776,0)
(1793,1205,0)
(228,1118,0)
(2056,1585,0)
(192,246,0)
(1474,431,0)
(2096,894,0)
(2132,614,0)
(685,832,0)
(259,431,0)
(393,490,0)
(975,1055,0)
(1438,469,0)
(612,431,0)
(1306,1694,0)
(1,1550,0)
(2111,140,0)
(1071,879,0)
(1712,800,0)
(1809,1148,0)
(1519,647,0)
(1261,559,0)
(356,1696,0)
(1590,1798,0)
(1675,995,0)
(642,553,0)
(1421,89,0)
(195,444,0)
(107,391,0)
(1490,2096,0)
(141,816,0)
(1169,1193,0)
(549,994,0)
(1876,397,0)
(2029,2074,0)
(1824,877,0)
(1779,879,0)
(608,879,0)
(1322,2005,0)
(645,655,0)
(284,1212,0)
(928,391,0)
(506,69,0)
(2035,937,0)
(233,964,0)
(2131,1066,0)
(1799,1663,0)
(394,8,0)
(205,431,0)
(785,1559,0)
(154,879,0)
(943,1598,0)
(1790,879,0)
(1227,879,0)
(1700,682,0)
(706,139,0)
(1637,395,0)
(28,879,0)
(1627,1550,0)
(1040,850,0)
(1202,1053,0)
(2099,15,0)
(979,1436,0)
(1229,2065,0)
(167,2047,0)
(118,288,0)
(361,636,0)
(1179,994,0)
(561,879,0)
(841,1102,0)
(1954,2101,0)
(492,88,0)
(1815,518,0)
(1877,864,0)
(384,19,0)
(1518,486,0)
(653,1202,0)
(712,33,0)
(1400,1060,0)
(22,322,0)
(1264,453,0)
(2034,879,0)
(875,1479,0)
(786,541,0)
(1767,427,0)
(2011,1360,0)
(779,879,0)
(409,2041,0)
(930,1480,0)
(822,504,0)
(2113,2129,0)
(1404,994,0)
(123,1205,0)
(1044,1695,0)
(328,879,0)
(516,857,0)
(1216,879,0)
(66,1013,0)
(1349,1033,0)
(1085,1761,0)
(957,1694,0)
(651,97,0)
(957,136,0)
(1794,241,0)
(1109,879,0)
(113,1261,0)
(586,1203,0)
(347,1858,0)
(245,587,0)
(1130,337,0)
(392,1003,0)
(613,1540,0)
(1368,1798,0)
(2053,69,0)
(1154,2051,0)
(1098,1907,0)
(2092,1294,0)
(537,563,0)
(2072,1974,0)
(1193,1066,0)
(1404,668,0)
(1889,353,0)
(1858,879,0)
(1743,1580,0)
(1163,1573,0)
(1658,431,0)
(504,822,0)
(230,397,0)
(583,1727,0)
(758,1213,0)
(1682,1530,0)
(1784,327,0)
(1805,450,0)
(1194,225,0)
(2061,1839,0)
(400,2132,0)
(410,1419,0)
(1102,431,0)
(276,1949,0)
(1109,994,0)
(1056,33,0)
(1004,1992,0)
(1519,328,0)
(105,879,0)
(498,879,0)
(1319,2053,0)
(407,2005,0)
(549,136,0)
(1957,665,0)
(786,1642,0)
(1858,69,0)
(1172,1573,0)
(442,1523,0)
(261,1120,0)
(1983,1822,0)
(502,335,0)
(1037,794,0)
(42,1676,0)
(2132,1213,0)
(40,73,0)
(897,1784,0)
(871,1749,0)
(1242,395,0)
(1128,1294,0)
(642,994,0)
(82,85,0)
(30,879,0)
(549,205,0)
(1962,534,0)
(784,879,0)
(1757,1699,0)
(1029,69,0)
(179,1839,0)
(402,1888,0)
(190,136,0)
(1695,879,0)
(1656,1190,0)
(23,879,0)
(1906,1118,0)
(474,69,0)
(134,136,0)
(794,1344,0)
(1382,1415,0)
(738,1633,0)
(1953,879,0)
(477,824,0)
(689,99,0)
(60,1164,0)
(1849,2102,0)
(553,931,0)
(302,1867,0)
(1017,174,0)
(2121,2096,0)
(523,1609,0)
(877,1824,0)
(659,427,0)
(405,1362,0)
(136,534,0)
(421,136,0)
(1406,431,0)
(1261,563,0)
(1669,951,0)
(55,1476,0)
(474,1102,0)
(1104,956,0)
(2090,391,0)
(153,2017,0)
(1687,1929,0)
(304,1406,0)
(666,1894,0)
(2074,1360,0)
(392,1939,0)
(1939,136,0)
(1619,1059,0)
(1874,106,0)
(248,257,0)
(678,1746,0)
(652,1885,0)
(262,1762,0)
(1943,2096,0)
(1455,879,0)
(530,879,0)
(396,391,0)
(721,1565,0)
(324,1407,0)
(1880,751,0)
(235,1489,0)
(1432,218,0)
(506,1691,0)
(918,498,0)
(1358,1817,0)
(1363,1949,0)
(1573,1061,0)
(1212,534,0)
(1100,1173,0)
(370,995,0)
(73,879,0)
(880,640,0)
(9,763,0)
(1513,1979,0)
(438,120,0)
(281,775,0)
(218,33,0)
(1872,391,0)
(852,102,0)
(493,257,0)
(459,1785,0)
(1937,391,0)
(772,572,0)
(1078,561,0)
(1599,1057,0)
(1719,994,0)
(1229,1635,0)
(1820,53,0)
(127,879,0)
(2125,1613,0)
(163,534,0)
(1515,1800,0)
(340,2096,0)
(1581,1667,0)
(986,879,0)
(2162,1492,0)
(1524,1513,0)
(462,1369,0)
(1382,633,0)
(1496,1679,0)
(2061,431,0)
(1233,144,0)
(572,367,0)
(1451,314,0)
(140,64,0)
(2135,866,0)
(1429,2076,0)
(1043,2042,0)
(986,994,0)
(1174,481,0)
(67,1674,0)
(786,136,0)
(1505,2048,0)
(1179,893,0)
(1982,158,0)
(1498,614,0)
(386,1861,0)
(751,383,0)
(1685,1073,0)
(379,1942,0)
(370,784,0)
(599,1991,0)
(52,154,0)
(226,1118,0)
(1742,315,0)
(1461,1898,0)
(1583,862,0)
(339,210,0)
(552,391,0)
(1470,320,0)
(141,879,0)
(173,1309,0)
(1788,1309,0)
(957,1930,0)
(1963,1213,0)
(30,1597,0)
(1095,1859,0)
(414,1358,0)
(206,364,0)
(1183,974,0)
(2103,231,0)
(1065,202,0)
(1920,871,0)
(487,1062,0)
(1620,1551,0)
(1364,879,0)
(1165,879,0)
(287,1800,0)
(884,1867,0)
(945,879,0)
(1418,1344,0)
(1574,879,0)
(257,879,0)
(1834,386,0)
(375,1218,0)
(1754,2058,0)
(1203,69,0)
(1750,633,0)
(1499,172,0)
(1612,1550,0)
(144,2008,0)
(1916,1118,0)
(1355,391,0)
(357,1216,0)
(549,766,0)
(594,2168,0)
(1693,1949,0)
(1739,137,0)
(1091,879,0)
(754,879,0)
(830,506,0)
(1395,2129,0)
(1237,1669,0)
(486,1518,0)
(2,404,0)
(1611,131,0)
(1710,1903,0)
(940,1691,0)
(239,2023,0)
(173,963,0)
(550,241,0)
(1572,498,0)
(101,1382,0)
(1679,879,0)
(147,583,0)
(1844,1762,0)
(1691,1236,0)
(578,608,0)
(135,1995,0)
(994,642,0)
(2042,1512,0)
(1323,140,0)
(702,225,0)
(2078,1630,0)
(1062,1546,0)
(1454,431,0)
(341,963,0)
(2007,2149,0)
(36,1466,0)
(1424,1881,0)
(1369,1972,0)
(194,1559,0)
(172,1990,0)
(541,765,0)
(1997,786,0)
(515,510,0)
(629,15,0)
(1486,1592,0)
(1382,67,0)
(1011,284,0)
(813,1595,0)
(417,534,0)
(683,1522,0)
(2039,596,0)
(432,1470,0)
(2148,392,0)
(964,241,0)
(490,393,0)
(1030,1934,0)
(176,862,0)
(657,367,0)
(785,1056,0)
(12,136,0)
(2011,567,0)
(1911,957,0)
(1762,849,0)
(1217,2063,0)
(1340,1992,0)
(1823,1372,0)
(1891,76,0)
(914,1565,0)
(1939,110,0)
(1594,426,0)
(1113,1512,0)
(416,68,0)
(1898,105,0)
(1542,370,0)
(717,879,0)
(983,879,0)
(1204,597,0)
(903,1360,0)
(1950,879,0)
(1826,1172,0)
(1591,391,0)
(2027,254,0)
(737,1550,0)
(2043,1530,0)
(1529,1762,0)
(1791,751,0)
(1808,1739,0)
(207,391,0)
(1947,879,0)
(593,1654,0)
(1694,431,0)
(257,1490,0)
(1547,383,0)
(1737,190,0)
(714,506,0)
(1865,1888,0)
(1120,1360,0)
(280,327,0)
(1631,8,0)
(1229,2092,0)
(820,534,0)
(1456,947,0)
(177,1934,0)
(531,612,0)
(158,750,0)
(1867,879,0)
(732,1502,0)
(853,2006,0)
(174,1017,0)
(1950,136,0)
(507,1304,0)
(87,1109,0)
(996,879,0)
(625,894,0)
(402,543,0)
(399,983,0)
(572,2045,0)
(886,136,0)
(1009,833,0)
(862,510,0)
(1634,1568,0)
(504,1621,0)
(1950,677,0)
(633,1382,0)
(519,1956,0)
(377,1216,0)
(1863,2138,0)
(903,994,0)
(1598,456,0)
(2006,853,0)
(2091,1652,0)
(1026,170,0)
(1949,1360,0)
(827,858,0)
(109,994,0)
(886,603,0)
(395,1436,0)
(767,474,0)
(1184,998,0)
(894,1133,0)
(937,646,0)
(1239,431,0)
(215,1415,0)
(170,136,0)
(496,879,0)
(1500,326,0)
(855,1761,0)
(850,308,0)
(512,1974,0)
(1296,134,0)
(696,1603,0)
(14,246,0)
(193,903,0)
(1503,1907,0)
(172,879,0)
(171,878,0)
(191,2155,0)
(824,339,0)
(111,1213,0)
(1604,1815,0)
(2028,1029,0)
(738,2005,0)
(1860,534,0)
(1644,1399,0)
(624,1947,0)
(1792,364,0)
(1598,879,0)
(1932,814,0)
(337,1436,0)
(1756,2045,0)
(79,2164,0)
(296,1029,0)
(621,1736,0)
(466,131,0)
(750,158,0)
(1733,1877,0)
(708,1217,0)
(1559,194,0)
(553,431,0)
(1003,392,0)
(1908,328,0)
(1223,798,0)
(874,1598,0)
(679,991,0)
(1939,879,0)
(340,1633,0)
(1514,1862,0)
(846,1943,0)
(2038,779,0)
(1832,1855,0)
(1923,1989,0)
(2054,946,0)
(1752,1290,0)
(1199,97,0)
(560,1666,0)
(1623,1784,0)
(1736,1968,0)
(170,1026,0)
(1231,391,0)
(1462,216,0)
(1336,1935,0)
(206,976,0)
(1964,636,0)
(2146,1302,0)
(628,1853,0)
(636,1964,0)
(1820,879,0)
(866,136,0)
(1419,892,0)
(1452,879,0)
(252,462,0)
(1914,1130,0)
(404,994,0)
(2129,879,0)
(1479,2162,0)
(602,1254,0)
(126,1950,0)
(967,1377,0)
(1531,784,0)
(1009,679,0)
(506,994,0)
(395,1565,0)
(1325,945,0)
(2073,640,0)
(2011,994,0)
(50,431,0)
(586,1330,0)
(144,136,0)
(1783,1621,0)
(587,2096,0)
(1020,1859,0)
(618,1193,0)
(677,1950,0)
(2088,1519,0)
(2156,1239,0)
(1165,581,0)
(990,391,0)
(800,1179,0)
(1729,1839,0)
(1135,879,0)
(1247,2117,0)
(1603,1213,0)
(1796,391,0)
(1928,2121,0)
(508,1817,0)
(1396,1574,0)
(1287,763,0)
(397,914,0)
(1173,1420,0)
(1899,114,0)
(2108,1492,0)
(713,879,0)
(711,580,0)
(501,30,0)
(1576,979,0)
(553,642,0)
(1383,431,0)
(473,297,0)
(1065,879,0)
(665,1957,0)
(1861,1118,0)
(1779,1911,0)
(1484,1967,0)
(1826,879,0)
(1368,914,0)
(11,879,0)
(1413,2096,0)
(1858,136,0)
(2015,546,0)
(439,910,0)
(1991,879,0)
(1220,794,0)
(1310,510,0)
(1722,587,0)
(1209,212,0)
(764,2007,0)
(120,438,0)
(1054,1550,0)
(348,1333,0)
(1549,726,0)
(1119,879,0)
(632,433,0)
(871,879,0)
(569,337,0)
(2019,1118,0)
(1177,1550,0)
(1369,1540,0)
(1364,1473,0)
(1304,507,0)
(137,1739,0)
(710,2021,0)
(843,785,0)
(694,1413,0)
(855,1956,0)
(1459,996,0)
(1756,879,0)
(925,832,0)
(506,1360,0)
(227,1833,0)
(1956,136,0)
(1086,558,0)
(946,1212,0)
(667,429,0)
(104,1492,0)
(540,1811,0)
(2082,2011,0)
(1904,1222,0)
(1030,879,0)
(818,50,0)
(374,1949,0)
(2047,979,0)
(740,879,0)
(1480,365,0)
(779,1302,0)
(939,508,0)
(1254,584,0)
(992,872,0)
(1149,879,0)
(2106,1748,0)
(1746,879,0)
(334,871,0)
(2011,69,0)
(1334,756,0)
(2076,1429,0)
(122,1436,0)
(1240,996,0)
(2042,879,0)
(10,569,0)
(1899,478,0)
(1186,1165,0)
(460,2162,0)
(1699,1757,0)
(1317,679,0)
(1987,75,0)
(129,611,0)
(316,1165,0)
(1342,1525,0)
(2120,2141,0)
(419,1275,0)
(903,1658,0)
(951,2032,0)
(864,1368,0)
(301,401,0)
(84,1181,0)
(1394,475,0)
(1861,646,0)
(297,2011,0)
(300,593,0)
(1023,1307,0)
(1052,1055,0)
(687,12,0)
(1452,507,0)
(453,284,0)
(1800,994,0)
(782,693,0)
(699,1968,0)
(896,1233,0)
(1976,30,0)
(2137,251,0)
(1333,879,0)
(320,1470,0)
(1276,1013,0)
(488,1964,0)
(853,879,0)
(951,728,0)
(2049,873,0)
(1072,337,0)
(2123,496,0)
(753,2042,0)
(1343,267,0)
(1282,421,0)
(1539,273,0)
(1800,879,0)
(785,33,0)
(673,391,0)
(1241,740,0)
(1002,1831,0)
(1133,879,0)
(965,879,0)
(1907,994,0)
(608,1180,0)
(238,1798,0)
(1202,879,0)
(1839,179,0)
(243,1961,0)
(1719,879,0)
(2039,289,0)
(478,1899,0)
(736,1137,0)
(157,786,0)
(1888,1436,0)
(1275,1333,0)
(2101,879,0)
(2102,879,0)
(619,665,0)
(1484,1530,0)
(1185,1574,0)
(894,1732,0)
(1867,302,0)
(490,1968,0)
(824,952,0)
(297,473,0)
(1659,1294,0)
(354,391,0)
(1142,1550,0)
(715,879,0)
(1257,2096,0)
(2159,1895,0)
(1453,1431,0)
(1887,1127,0)
(1412,1986,0)
(837,1053,0)
(1477,879,0)
(1731,391,0)
(1460,1138,0)
(902,68,0)
(1360,689,0)
(88,492,0)
(85,879,0)
(1673,1787,0)
(1033,431,0)
(1244,718,0)
(1789,251,0)
(270,879,0)
(2112,1785,0)
(1677,352,0)
(945,845,0)
(945,1450,0)
(1707,879,0)
(2119,577,0)
(251,879,0)
(1938,563,0)
(2121,1928,0)
(2129,762,0)
(2000,391,0)
(1674,879,0)
(1654,613,0)
(518,879,0)
(1386,496,0)
(2155,994,0)
(1173,1100,0)
(505,328,0)
(186,1643,0)
(57,2096,0)
(1892,85,0)
(1273,1224,0)
(798,1223,0)
(2133,474,0)
(920,1502,0)
(1939,285,0)
(190,994,0)
(508,1368,0)
(200,1062,0)
(2117,431,0)
(503,57,0)
(960,908,0)
(824,974,0)
(1398,983,0)
(1903,1565,0)
(1208,1683,0)
(1419,410,0)
(1183,1347,0)
(1183,736,0)
(949,144,0)
(282,1255,0)
(500,733,0)
(146,534,0)
(507,1452,0)
(723,170,0)
(427,1085,0)
(746,391,0)
(1749,871,0)
(1688,765,0)
(1871,879,0)
(1972,2096,0)
(1245,391,0)
(170,1407,0)
(2020,1066,0)
(718,1244,0)
(1662,106,0)
(824,620,0)
(1907,136,0)
(401,879,0)
(1631,879,0)
(790,1633,0)
(1106,2155,0)
(1147,170,0)
(451,816,0)
(1298,1425,0)
(1299,1523,0)
(1658,903,0)
(514,629,0)
(43,1518,0)
(1508,1742,0)
(153,219,0)
(1960,75,0)
(1304,426,0)
(933,986,0)
(293,126,0)
(99,689,0)
(415,191,0)
(1549,879,0)
(719,1595,0)
(1654,593,0)
(1711,1568,0)
(291,244,0)
(120,1696,0)
(766,549,0)
(1811,879,0)
(1200,1120,0)
(1150,1928,0)
(1045,1360,0)
(1573,136,0)
(511,1515,0)
(944,801,0)
(698,142,0)
(272,640,0)
(2060,1766,0)
(1229,879,0)
(595,1549,0)
(1858,189,0)
(2062,391,0)
(840,12,0)
(2140,1185,0)
(2014,474,0)
(1165,136,0)
(78,1704,0)
(1261,994,0)
(1506,1540,0)
(779,994,0)
(1574,1185,0)
(158,879,0)
(721,763,0)
(1857,7,0)
(54,996,0)
(824,1095,0)
(834,1903,0)
(2011,1795,0)
(1570,1373,0)
(554,549,0)
(682,879,0)
(839,1261,0)
(1015,736,0)
(1833,914,0)
(1824,879,0)
(664,1563,0)
(2129,136,0)
(1595,1565,0)
(80,1187,0)
(1165,994,0)
(1858,326,0)
(1516,879,0)
(911,1550,0)
(386,836,0)
(756,452,0)
(1993,2047,0)
(988,1120,0)
(1553,2129,0)
(611,1894,0)
(2051,251,0)
(2040,1364,0)
(1883,475,0)
(77,2129,0)
(315,1742,0)
(2021,710,0)
(2036,682,0)
(982,1135,0)
(86,2058,0)
(364,1956,0)
(119,1756,0)
(429,1075,0)
(274,1550,0)
(1533,636,0)
(1121,1313,0)
(372,1682,0)
(244,1283,0)
(1183,1419,0)
(1691,506,0)
(1870,1823,0)
(1232,1404,0)
(611,1213,0)
(1384,1826,0)
(1492,994,0)
(1739,1525,0)
(98,1727,0)
(120,879,0)
(1049,956,0)
(1430,1134,0)
(246,14,0)
(716,964,0)
(770,1138,0)
(679,1205,0)
(1437,1842,0)
(1020,2020,0)
(607,534,0)
(1873,2058,0)
(1089,879,0)
(1059,879,0)
(909,134,0)
(103,294,0)
(1469,1631,0)
(1279,1817,0)
(985,2011,0)
(549,1728,0)
(1512,431,0)
(1641,1523,0)
(12,840,0)
(1635,431,0)
(97,431,0)
(1565,534,0)
(1313,639,0)
(1628,110,0)
(355,1251,0)
(612,1991,0)
(2132,1893,0)
(1670,131,0)
(1652,2091,0)
(344,165,0)
(1458,1704,0)
(952,1248,0)
(906,1413,0)
(2164,1179,0)
(1056,1055,0)
(1137,618,0)
(1603,1856,0)
(158,1275,0)
(1472,1073,0)
(1428,1065,0)
(1814,1907,0)
(1034,2069,0)
(779,136,0)
(1848,1077,0)
(1877,1038,0)
(376,534,0)
(1172,1826,0)
(1964,472,0)
(95,1598,0)
(20,2020,0)
(521,558,0)
(729,2091,0)
(1061,1573,0)
(1853,1586,0)
(410,115,0)
(2067,684,0)
(1701,393,0)
(2052,1479,0)
(235,796,0)
(265,1800,0)
(1885,2096,0)
(589,584,0)
(1087,1748,0)
(506,136,0)
(386,879,0)
(1718,1452,0)
(69,1203,0)
(2153,1415,0)
(2025,1807,0)
(134,994,0)
(769,1130,0)
(1651,1183,0)
(1807,1861,0)
(1907,879,0)
(1643,879,0)
(424,451,0)
(2150,134,0)
(1973,1234,0)
(1183,1095,0)
(170,1360,0)
(1489,38,0)
(2091,395,0)
(1769,486,0)
(709,316,0)
(406,1121,0)
(1050,1347,0)
(1183,1840,0)
(814,2096,0)
(946,1345,0)
(1831,879,0)
(1721,7,0)
(484,1385,0)
(886,1422,0)
(2069,136,0)
(1735,903,0)
(251,2051,0)
(1786,1602,0)
(1972,1369,0)
(330,1118,0)
(1949,2119,0)
(333,1029,0)
(1621,1783,0)
(2037,1490,0)
(682,1670,0)
(1980,799,0)
(1785,1213,0)
(225,1523,0)
(1371,1893,0)
(1060,879,0)
(1274,1089,0)
(788,1553,0)
(1021,1184,0)
(1884,858,0)
(1193,618,0)
(474,2133,0)
(2155,1106,0)
(524,546,0)
(1757,378,0)
(155,801,0)
(1478,879,0)
(2164,1502,0)
(314,1682,0)
(1847,1523,0)
(1840,1634,0)
(710,19,0)
(1998,785,0)
(1739,136,0)
(7,1888,0)
(743,1516,0)
(1991,1463,0)
(2124,136,0)
(113,431,0)
(152,1492,0)
(253,289,0)
(1466,337,0)
(1369,462,0)
(1388,1229,0)
(793,339,0)
(1986,1817,0)
(1697,1452,0)
(2117,12,0)
(677,102,0)
(517,144,0)
(1372,879,0)
(109,1207,0)
(320,1855,0)
(1151,1057,0)
(577,1213,0)
(102,879,0)
(1801,1972,0)
(208,1313,0)
(1315,879,0)
(1784,994,0)
(120,1326,0)
(999,2131,0)
(1702,1342,0)
(995,370,0)
(213,1192,0)
(1102,474,0)
(1866,717,0)
(1420,910,0)
(747,1227,0)
(2069,1034,0)
(823,655,0)
(145,647,0)
(864,1817,0)
(751,1259,0)
(188,1381,0)
(1714,851,0)
(1640,431,0)
(829,1986,0)
(2020,879,0)
(1377,337,0)
(456,1598,0)
(316,431,0)
(752,646,0)
(539,965,0)
(1936,1315,0)
(2161,1532,0)
(1634,1436,0)
(1115,589,0)
(1853,1636,0)
(824,1419,0)
(866,994,0)
(428,1822,0)
(882,1669,0)
(817,1382,0)
(1766,879,0)
(952,879,0)
(2154,490,0)
(995,994,0)
(1694,957,0)
(353,879,0)
(792,1434,0)
(1466,33,0)
(722,1029,0)
(815,1942,0)
(1164,60,0)
(881,1636,0)
(1824,1943,0)
(838,1550,0)
(2157,994,0)
(12,994,0)
(726,1549,0)
(959,800,0)
(1924,1658,0)
(1153,1631,0)
(824,1714,0)
(1092,1600,0)
(2009,1431,0)
(1244,2141,0)
(1277,391,0)
(1679,674,0)
(404,879,0)
(1500,1213,0)
(1160,1874,0)
(1286,963,0)
(577,2119,0)
(1192,431,0)
(1540,1523,0)
(1651,335,0)
(1803,1550,0)
(1465,153,0)
(1557,879,0)
(216,879,0)
(1300,1020,0)
(1949,879,0)
(594,1991,0)
(496,136,0)
(623,73,0)
(453,879,0)
(336,105,0)
(1635,1229,0)
(299,1839,0)
(1766,1699,0)
(848,851,0)
(1740,1858,0)
(1463,1991,0)
(596,2039,0)
(428,1762,0)
(1563,1739,0)
(1180,608,0)
(923,2074,0)
(814,2170,0)
(15,1762,0)
(450,1929,0)
(175,202,0)
(468,431,0)
(1955,685,0)
(205,549,0)
(1064,853,0)
(34,1885,0)
(1577,1855,0)
(1949,69,0)
(1703,713,0)
(1046,914,0)
(124,12,0)
(1532,879,0)
(824,1840,0)
(108,758,0)
(422,365,0)
(433,994,0)
(1636,1853,0)
(1525,1739,0)
(381,754,0)
(886,1360,0)
(366,996,0)
(1704,1719,0)
(1124,96,0)
(1915,1873,0)
(627,1149,0)
(758,108,0)
(2119,1949,0)
(337,994,0)
(378,1757,0)
(1956,1798,0)
(139,1811,0)
(996,994,0)
(900,153,0)
(2125,218,0)
(648,1450,0)
(1579,726,0)
(1236,1283,0)
(1907,1503,0)
(1101,481,0)
(1041,1404,0)
(1073,1472,0)
(1999,1429,0)
(1621,504,0)
(153,994,0)
(654,814,0)
(1467,391,0)
(2053,879,0)
(1116,1359,0)
(38,1489,0)
(1775,1831,0)
(779,676,0)
(798,1607,0)
(1636,1213,0)
(1488,1436,0)
(1302,431,0)
(436,1244,0)
(1314,1151,0)
(1572,619,0)
(1975,391,0)
(1544,1500,0)
(64,994,0)
(2006,164,0)
(1028,715,0)
(1686,1436,0)
(1365,784,0)
(1493,2131,0)
(1609,1811,0)
(1573,1720,0)
(954,170,0)
(1327,1597,0)
(2030,33,0)
(3,1807,0)
(2167,57,0)
(598,534,0)
(127,1375,0)
(92,391,0)
(1537,965,0)
(496,994,0)
(132,457,1)
(682,879,1)
(1988,1024,1)
(1913,921,1)
(1228,1362,1)
(1306,1931,1)
(992,270,1)
(1776,835,1)
(1380,496,1)
(1696,1190,1)
(1024,879,1)
(19,247,1)
(1754,132,1)
(1654,593,1)
(395,1242,1)
(2001,1742,1)
(386,879,1)
(1987,893,1)
(781,470,1)
(1988,2068,1)
(738,1633,1)
(2003,822,1)
(2101,879,1)
(1542,784,1)
(387,1935,1)
(124,1104,1)
(1843,1315,1)
(1182,230,1)
(1784,994,1)
(1244,876,1)
(404,879,1)
(1681,2117,1)
(900,61,1)
(2091,1652,1)
(1525,1342,1)
(955,1413,1)
(1670,1555,1)
(186,1331,1)
(2010,3,1)
(1719,315,1)
(1819,2026,1)
(1818,1526,1)
(1018,1517,1)
(757,901,1)
(1986,1841,1)
(236,705,1)
(1048,1867,1)
(641,740,1)
(1418,1220,1)
(1521,839,1)
(334,2030,1)
(1635,431,1)
(1818,2055,1)
(1254,1091,1)
(1358,88,1)
(609,1802,1)
(1777,441,1)
(2077,910,1)
(2096,894,1)
(68,1212,1)
(1545,1940,1)
(1697,1718,1)
(977,2017,1)
(1516,879,1)
(1992,879,1)
(135,47,1)
(824,736,1)
(1800,136,1)
(1839,529,1)
(1064,1068,1)
(829,1986,1)
(279,2140,1)
(1071,1545,1)
(46,540,1)
(1858,326,1)
(2093,1035,1)
(642,553,1)
(2152,1746,1)
(549,766,1)
(1926,1228,1)
(713,224,1)
(197,969,1)
(1954,554,1)
(572,2045,1)
(986,2103,1)
(874,634,1)
(1201,336,1)
(1818,162,1)
(508,1368,1)
(190,136,1)
(888,1209,1)
(923,237,1)
(474,69,1)
(263,1143,1)
(1184,998,1)
(1699,1766,1)
(307,1528,1)
(1833,227,1)
(1818,1900,1)
(1822,879,1)
(652,1487,1)
(963,1286,1)
(64,136,1)
(1865,1888,1)
(1494,527,1)
(1492,1385,1)
(1571,850,1)
(1407,324,1)
(338,221,1)
(1687,1929,1)
(1817,273,1)
(211,1563,1)
(2124,730,1)
(1195,2087,1)
(170,69,1)
(1229,2092,1)
(697,1422,1)
(1024,1777,1)
(522,2006,1)
(202,431,1)
(1411,1107,1)
(172,879,1)
(1445,635,1)
(2129,879,1)
(142,1589,1)
(1874,879,1)
(111,1851,1)
(1265,879,1)
(1674,1810,1)
(469,879,1)
(1304,426,1)
(67,1272,1)
(2008,144,1)
(152,1492,1)
(1154,251,1)
(1261,563,1)
(1313,208,1)
(312,1757,1)
(886,603,1)
(1229,994,1)
(209,1106,1)
(139,706,1)
(314,1682,1)
(381,179,1)
(165,431,1)
(353,879,1)
(1016,100,1)
(1184,899,1)
(769,1914,1)
(1076,1610,1)
(1450,2096,1)
(944,337,1)
(1458,78,1)
(1695,1044,1)
(1404,259,1)
(2129,1553,1)
(913,1452,1)
(286,853,1)
(750,1005,1)
(1629,2058,1)
(1818,993,1)
(1676,42,1)
(102,879,1)
(1563,431,1)
(1336,2107,1)
(2164,1502,1)
(1818,977,1)
(1765,574,1)
(89,879,1)
(1313,1121,1)
(824,974,1)
(2011,879,1)
(253,1055,1)
(1833,914,1)
(560,551,1)
(1084,562,1)
(1598,136,1)
(764,1823,1)
(174,879,1)
(325,1736,1)
(1020,1300,1)
(751,136,1)
(1501,1108,1)
(1907,879,1)
(1693,1666,1)
(995,994,1)
(1095,879,1)
(1663,1799,1)
(984,676,1)
(474,136,1)
(1818,929,1)
(575,509,1)
(1739,994,1)
(1765,990,1)
(2033,1987,1)
(1179,994,1)
(1175,109,1)
(986,879,1)
(1587,545,1)
(1621,1783,1)
(1013,66,1)
(1765,2013,1)
(468,1454,1)
(1358,1368,1)
(513,450,1)
(1372,242,1)
(2032,1213,1)
(628,1636,1)
(1327,30,1)
(936,652,1)
(632,994,1)
(1861,646,1)
(886,136,1)
(134,994,1)
(340,2096,1)
(852,675,1)
(144,879,1)
(950,586,1)
(824,1038,1)
(708,2063,1)
(446,2123,1)
(1818,358,1)
(436,1244,1)
(1639,1151,1)
(482,755,1)
(731,2043,1)
(1818,1564,1)
(1120,69,1)
(264,1200,1)
(79,1502,1)
(1294,2096,1)
(1056,1055,1)
(1140,1513,1)
(2047,1993,1)
(566,872,1)
(875,2052,1)
(1811,1609,1)
(873,2049,1)
(1326,431,1)
(12,2115,1)
(1382,1415,1)
(2020,1608,1)
(1568,1711,1)
(1877,1051,1)
(1185,2096,1)
(1762,136,1)
(194,1780,1)
(342,1727,1)
(1441,1241,1)
(1692,2086,1)
(630,1233,1)
(2141,1605,1)
(741,268,1)
(392,1003,1)
(835,546,1)
(1164,1213,1)
(337,1970,1)
(1179,800,1)
(886,69,1)
(1425,64,1)
(605,890,1)
(1512,1113,1)
(11,1176,1)
(1718,426,1)
(1530,731,1)
(1539,1473,1)
(1350,763,1)
(1274,2138,1)
(1818,1548,1)
(666,216,1)
(284,1212,1)
(1532,879,1)
(356,1190,1)
(272,994,1)
(1375,1678,1)
(1836,705,1)
(2020,1066,1)
(43,21,1)
(1052,591,1)
(154,464,1)
(1302,431,1)
(1806,982,1)
(1315,879,1)
(1818,1249,1)
(1492,879,1)
(1454,1813,1)
(151,192,1)
(1438,1434,1)
(779,994,1)
(473,1546,1)
(1607,798,1)
(1799,971,1)
(1609,523,1)
(2021,710,1)
(451,1138,1)
(1023,1717,1)
(316,431,1)
(756,1334,1)
(2075,976,1)
(766,1266,1)
(1109,136,1)
(11,879,1)
(703,1226,1)
(201,1912,1)
(1420,2077,1)
(1727,583,1)
(805,639,1)
(1807,1248,1)
(1956,994,1)
(1061,1573,1)
(1656,1047,1)
(1135,879,1)
(454,1214,1)
(2132,400,1)
(1146,97,1)
(664,1808,1)
(2039,1076,1)
(1183,1347,1)
(2140,1396,1)
(2084,37,1)
(1131,1243,1)
(1748,353,1)
(297,183,1)
(1599,619,1)
(1991,612,1)
(1667,1581,1)
(2023,1027,1)
(1261,1730,1)
(1130,769,1)
(327,280,1)
(1950,126,1)
(941,581,1)
(1766,879,1)
(1694,1306,1)
(350,1474,1)
(2133,474,1)
(759,1192,1)
(1818,1481,1)
(71,772,1)
(574,1503,1)
(2017,153,1)
(566,285,1)
(1052,1749,1)
(129,895,1)
(1929,513,1)
(957,879,1)
(1022,104,1)
(594,720,1)
(133,1583,1)
(259,532,1)
(1040,1732,1)
(308,181,1)
(917,989,1)
(1275,419,1)
(1040,953,1)
(1972,804,1)
(341,573,1)
(493,1411,1)
(353,1889,1)
(515,1310,1)
(174,547,1)
(1818,1698,1)
(952,2085,1)
(1302,2146,1)
(1168,2165,1)
(462,252,1)
(41,1869,1)
(1814,1736,1)
(516,1987,1)
(147,892,1)
(808,1922,1)
(506,1360,1)
(1911,1779,1)
(1983,262,1)
(1598,879,1)
(105,136,1)
(1015,1307,1)
(1915,1754,1)
(813,719,1)
(507,913,1)
(65,632,1)
(144,69,1)
(1280,120,1)
(388,1067,1)
(1069,1953,1)
(1701,879,1)
(1755,383,1)
(1241,1737,1)
(311,799,1)
(2118,514,1)
(467,1943,1)
(471,321,1)
(2127,1567,1)
(1707,879,1)
(824,1714,1)
(1387,1919,1)
(419,1333,1)
(1416,1752,1)
(1480,930,1)
(937,2035,1)
(2074,69,1)
(729,395,1)
(278,1462,1)
(1475,1140,1)
(405,983,1)
(1682,1530,1)
(1078,744,1)
(878,1504,1)
(868,2076,1)
(1575,717,1)
(1839,136,1)
(29,608,1)
(64,994,1)
(1258,2096,1)
(178,1982,1)
(1907,994,1)
(1172,1295,1)
(620,1475,1)
(2063,740,1)
(1451,1682,1)
(1165,136,1)
(953,1732,1)
(2042,1512,1)
(506,1159,1)
(506,69,1)
(1968,699,1)
(425,447,1)
(1229,136,1)
(886,879,1)
(827,1884,1)
(765,693,1)
(1120,1660,1)
(794,1344,1)
(877,467,1)
(1617,367,1)
(1120,1360,1)
(1762,849,1)
(364,1956,1)
(1502,879,1)
(1120,879,1)
(690,69,1)
(773,1598,1)
(2142,1442,1)
(788,879,1)
(1981,1832,1)
(549,136,1)
(2061,1324,1)
(2030,1130,1)
(498,918,1)
(546,879,1)
(1349,1459,1)
(1858,136,1)
(1011,453,1)
(66,783,1)
(1531,1365,1)
(1046,805,1)
(384,1961,1)
(1097,780,1)
(1145,1503,1)
(1584,1160,1)
(95,1736,1)
(477,721,1)
(1507,2088,1)
(1717,1373,1)
(1193,1066,1)
(304,1440,1)
(872,185,1)
(1492,2162,1)
(265,287,1)
(572,367,1)
(990,74,1)
(1818,544,1)
(2078,1453,1)
(1362,405,1)
(161,601,1)
(218,1432,1)
(458,1701,1)
(634,1640,1)
(134,1356,1)
(572,136,1)
(636,1533,1)
(141,879,1)
(96,210,1)
(848,1714,1)
(2060,378,1)
(410,1368,1)
(1871,735,1)
(1059,879,1)
(111,1213,1)
(1549,879,1)
(693,782,1)
(679,991,1)
(2051,251,1)
(1553,1262,1)
(1595,813,1)
(956,2096,1)
(1308,1032,1)
(1478,868,1)
(1647,1557,1)
(1894,216,1)
(1818,1189,1)
(1527,1029,1)
(410,115,1)
(1445,1641,1)
(1580,1743,1)
(1603,1213,1)
(102,852,1)
(1199,651,1)
(884,166,1)
(206,364,1)
(164,2006,1)
(1892,1045,1)
(1220,775,1)
(400,1893,1)
(735,309,1)
(285,1939,1)
(1945,1026,1)
(1401,2100,1)
(365,422,1)
(933,986,1)
(1770,561,1)
(284,453,1)
(687,945,1)
(1131,2076,1)
(1818,349,1)
(1969,773,1)
(1413,906,1)
(713,879,1)
(1071,879,1)
(1500,1074,1)
(561,879,1)
(1134,1430,1)
(1244,2141,1)
(448,401,1)
(1850,2113,1)
(1765,552,1)
(1382,633,1)
(208,1121,1)
(251,1789,1)
(1701,203,1)
(266,1238,1)
(1949,879,1)
(903,136,1)
(763,9,1)
(1930,957,1)
(1396,2167,1)
(1183,1009,1)
(235,598,1)
(8,1631,1)
(1335,878,1)
(1935,1336,1)
(855,1956,1)
(995,370,1)
(2123,1386,1)
(1546,1062,1)
(410,311,1)
(643,1934,1)
(611,1213,1)
(2085,13,1)
(365,879,1)
(1557,1019,1)
(648,133,1)
(505,1908,1)
(251,879,1)
(778,97,1)
(1065,1597,1)
(1388,257,1)
(541,765,1)
(288,118,1)
(450,1805,1)
(298,388,1)
(397,914,1)
(1757,378,1)
(2009,879,1)
(200,487,1)
(721,1565,1)
(1873,1915,1)
(2051,1154,1)
(2010,1151,1)
(1818,941,1)
(30,501,1)
(1415,215,1)
(1358,1817,1)
(1376,472,1)
(3,1807,1)
(818,909,1)
(1692,2096,1)
(431,468,1)
(429,218,1)
(502,1053,1)
(638,1040,1)
(109,136,1)
(1986,1412,1)
(529,717,1)
(1952,84,1)
(1598,456,1)
(1572,498,1)
(1948,61,1)
(915,1291,1)
(386,1861,1)
(1003,879,1)
(1029,1219,1)
(504,1565,1)
(1240,1033,1)
(1932,1016,1)
(585,1901,1)
(1324,1729,1)
(715,1028,1)
(395,1565,1)
(1831,879,1)
(578,1037,1)
(548,985,1)
(98,583,1)
(2022,1379,1)
(1473,1364,1)
(1556,1360,1)
(508,1817,1)
(153,900,1)
(1684,724,1)
(1113,768,1)
(1749,59,1)
(2117,431,1)
(596,2039,1)
(1529,53,1)
(617,2047,1)
(1449,1928,1)
(450,431,1)
(1941,1707,1)
(1818,1566,1)
(814,2096,1)
(714,506,1)
(2131,999,1)
(1709,1149,1)
(420,62,1)
(1564,688,1)
(1758,2092,1)
(110,431,1)
(1780,1225,1)
(1621,1489,1)
(1421,1926,1)
(1957,741,1)
(1671,867,1)
(305,2065,1)
(1886,2069,1)
(193,1156,1)
(234,28,1)
(1252,1569,1)
(869,2050,1)
(833,1377,1)
(2091,729,1)
(1800,1515,1)
(1583,862,1)
(63,164,1)
(1947,624,1)
(1091,662,1)
(1765,926,1)
(1138,770,1)
(149,974,1)
(963,1213,1)
(751,383,1)
(1107,955,1)
(1180,608,1)
(96,1124,1)
(217,872,1)
(1809,1122,1)
(1896,1790,1)
(2018,1364,1)
(1691,940,1)
(1303,680,1)
(1221,613,1)
(957,1694,1)
(1034,1896,1)
(438,1953,1)
(170,994,1)
(224,1703,1)
(903,994,1)
(272,136,1)
(1149,879,1)
(15,2099,1)
(1977,2095,1)
(442,1338,1)
(1183,1401,1)
(268,1132,1)
(596,861,1)
(1818,398,1)
(106,1874,1)
(926,1751,1)
(1148,431,1)
(2158,1007,1)
(335,502,1)
(1226,83,1)
(1276,66,1)
(1481,1043,1)
(824,952,1)
(1381,188,1)
(1715,48,1)
(104,1385,1)
(572,879,1)
(2055,897,1)
(448,1043,1)
(1762,879,1)
(1636,1213,1)
(1019,471,1)
(898,1817,1)
(1382,136,1)
(241,879,1)
(1594,1684,1)
(1038,1877,1)
(1041,259,1)
(2106,1087,1)
(1500,1544,1)
(1283,244,1)
(749,1419,1)
(1608,20,1)
(949,1835,1)
(774,1831,1)
(61,1645,1)
(797,2111,1)
(1369,1972,1)
(369,2012,1)
(1292,1603,1)
(1621,455,1)
(357,796,1)
(1862,395,1)
(2058,994,1)
(824,477,1)
(1673,726,1)
(105,674,1)
(351,1148,1)
(1209,949,1)
(758,1213,1)
(1939,136,1)
(1399,1212,1)
(658,2147,1)
(1402,325,1)
(963,173,1)
(788,369,1)
(438,1069,1)
(794,136,1)
(1229,1758,1)
(1385,431,1)
(1217,2063,1)
(257,248,1)
(840,12,1)
(1600,1092,1)
(739,2111,1)
(362,1175,1)
(587,245,1)
(1768,548,1)
(720,2168,1)
(1413,2096,1)
(988,1660,1)
(1995,135,1)
(1601,53,1)
(1025,1448,1)
(1254,602,1)
(528,1139,1)
(887,707,1)
(114,345,1)
(1333,879,1)
(742,1193,1)
(187,1489,1)
(1890,714,1)
(1382,67,1)
(675,1624,1)
(701,403,1)
(610,1930,1)
(54,1816,1)
(86,1873,1)
(2170,814,1)
(66,431,1)
(189,1668,1)
(1817,1279,1)
(1573,136,1)
(1102,431,1)
(20,1095,1)
(1662,1874,1)
(1369,879,1)
(1291,715,1)
(132,879,1)
(1742,879,1)
(964,716,1)
(219,431,1)
(1837,301,1)
(1210,1141,1)
(40,623,1)
(1796,1527,1)
(1874,1584,1)
(1638,661,1)
(557,1824,1)
(1799,994,1)
(1278,212,1)
(743,1071,1)
(2101,806,1)
(68,902,1)
(620,879,1)
(397,1876,1)
(1756,879,1)
(971,431,1)
(2131,1066,1)
(969,121,1)
(1466,36,1)
(1417,606,1)
(1266,2101,1)
(871,879,1)
(469,958,1)
(1309,879,1)
(510,515,1)
(175,1428,1)
(1515,511,1)
(347,1740,1)
(1108,879,1)
(1256,2073,1)
(2045,1561,1)
(1395,762,1)
(1264,433,1)
(803,1736,1)
(1749,871,1)
(1676,1181,1)
(745,1511,1)
(549,205,1)
(408,897,1)
(484,2108,1)
(247,384,1)
(2069,1034,1)
(1818,255,1)
(187,25,1)
(1767,659,1)
(2117,1247,1)
(148,1818,1)
(1092,1191,1)
(659,1038,1)
(52,879,1)
(109,879,1)
(1249,179,1)
(1105,1519,1)
(1621,598,1)
(1183,1095,1)
(1543,747,1)
(2120,1988,1)
(685,832,1)
(621,1968,1)
(1126,1689,1)
(891,791,1)
(593,1978,1)
(409,1871,1)
(640,45,1)
(1588,1827,1)
(1818,35,1)
(952,879,1)
(951,1669,1)
(1610,289,1)
(1714,1833,1)
(519,1368,1)
(1132,879,1)
(945,1325,1)
(2162,460,1)
(284,1971,1)
(2092,1294,1)
(968,754,1)
(359,165,1)
(1912,1065,1)
(459,1785,1)
(1818,2144,1)
(1641,2065,1)
(723,1348,1)
(318,275,1)
(922,1776,1)
(1884,1888,1)
(1858,69,1)
(153,879,1)
(1102,841,1)
(1720,533,1)
(426,879,1)
(651,1425,1)
(1014,1629,1)
(1782,32,1)
(1442,1383,1)
(460,1479,1)
(1230,1330,1)
(415,2046,1)
(1779,879,1)
(1294,1659,1)
(1453,1431,1)
(2067,1647,1)
(261,1736,1)
(1573,1720,1)
(108,758,1)
(170,879,1)
(542,1340,1)
(1765,757,1)
(73,879,1)
(1063,1089,1)
(1823,1372,1)
(1853,1636,1)
(140,1323,1)
(1135,1806,1)
(2081,303,1)
(2074,1360,1)
(9,1287,1)
(800,959,1)
(138,855,1)
(1447,114,1)
(1568,499,1)
(1308,1061,1)
(973,856,1)
(624,1063,1)
(1939,110,1)
(363,1530,1)
(734,620,1)
(777,1096,1)
(1480,365,1)
(736,879,1)
(154,879,1)
(372,912,1)
(1820,1753,1)
(1877,1733,1)
(1116,703,1)
(1765,1945,1)
(416,828,1)
(2125,916,1)
(1949,136,1)
(1031,519,1)
(794,994,1)
(999,1493,1)
(1424,948,1)
(1039,1696,1)
(100,1257,1)
(1018,979,1)
(559,1261,1)
(1589,698,1)
(1234,932,1)
(1132,1861,1)
(108,1178,1)
(1261,994,1)
(672,2003,1)
(678,1642,1)
(1818,1994,1)
(1532,2161,1)
(414,88,1)
(2053,69,1)
(1224,1273,1)
(1660,431,1)
(2058,136,1)
(1200,988,1)
(381,11,1)
(1818,292,1)
(1260,980,1)
(1253,1715,1)
(1603,696,1)
(2129,994,1)
(1866,1168,1)
(2073,640,1)
(427,1767,1)
(1193,879,1)
(2035,1959,1)
(1466,337,1)
(682,1700,1)
(485,858,1)
(2041,409,1)
(506,1691,1)
(710,2079,1)
(1180,29,1)
(1784,136,1)
(1949,994,1)
(976,206,1)
(1619,303,1)
(1960,1990,1)
(992,152,1)
(88,492,1)
(1573,879,1)
(1029,994,1)
(1966,925,1)
(799,1980,1)
(1079,1862,1)
(850,308,1)
(606,454,1)
(1963,2081,1)
(158,879,1)
(881,1763,1)
(127,536,1)
(1077,1848,1)
(1633,790,1)
(506,136,1)
(2053,1856,1)
(518,879,1)
(408,1477,1)
(1649,1039,1)
(1824,1943,1)
(586,1213,1)
(801,1646,1)
(158,1275,1)
(1933,2084,1)
(754,538,1)
(1085,427,1)
(402,1119,1)
(1691,1236,1)
(1386,1001,1)
(1463,1991,1)
(1818,1615,1)
(1331,2,1)
(192,1271,1)
(496,652,1)
(858,827,1)
(824,1009,1)
(323,1280,1)
(1765,2000,1)
(1097,617,1)
(1704,1458,1)
(866,136,1)
(1894,666,1)
(529,1575,1)
(1510,753,1)
(1183,1038,1)
(1404,288,1)
(1926,879,1)
(811,1117,1)
(1797,1592,1)
(633,1750,1)
(162,285,1)
(1785,605,1)
(1361,1836,1)
(785,1056,1)
(832,1966,1)
(721,156,1)
(456,111,1)
(433,65,1)
(536,198,1)
(1700,2036,1)
(1865,112,1)
(1055,218,1)
(1684,1813,1)
(1165,1186,1)
(257,879,1)
(1485,363,1)
(1634,1568,1)
(596,1055,1)
(120,438,1)
(1202,879,1)
(249,10,1)
(726,1579,1)
(2155,994,1)
(1235,206,1)
(1223,2096,1)
(2048,879,1)
(1920,334,1)
(762,1346,1)
(1785,2112,1)
(509,2167,1)
(1183,1840,1)
(321,1672,1)
(506,994,1)
(606,1248,1)
(717,1866,1)
(1005,182,1)
(1087,353,1)
(61,879,1)
(535,1904,1)
(142,879,1)
(616,1495,1)
(191,431,1)
(1788,1735,1)
(915,715,1)
(1903,1710,1)
(244,291,1)
(2155,879,1)
(1959,1216,1)
(2137,943,1)
(2057,2009,1)
(1096,128,1)
(854,797,1)
(1994,1886,1)
(1445,495,1)
(121,1765,1)
(37,1694,1)
(1811,139,1)
(2047,979,1)
(1074,1335,1)
(1818,1850,1)
(1359,1116,1)
(1237,879,1)
(982,851,1)
(1431,2057,1)
(2073,136,1)
(60,526,1)
(2138,1741,1)
(2052,1022,1)
(1888,402,1)
(589,879,1)
(589,1115,1)
(2116,775,1)
(1492,136,1)
(1547,1880,1)
(1412,331,1)
(572,994,1)
(1319,2053,1)
(584,1254,1)
(312,1066,1)
(679,1205,1)
(1333,348,1)
(2073,148,1)
(429,667,1)
(2099,629,1)
(1136,1736,1)
(441,1085,1)
(1494,879,1)
(2042,1480,1)
(1065,879,1)
(1383,431,1)
(1919,219,1)
(1373,879,1)
(1465,1108,1)
(995,879,1)
(1818,362,1)
(995,136,1)
(1158,1217,1)
(1598,1640,1)
(1789,2137,1)
(120,1696,1)
(2148,1003,1)
(496,936,1)
(1159,1110,1)
(113,431,1)
(100,1215,1)
(702,1676,1)
(1964,636,1)
(1089,879,1)
(945,845,1)
(1165,879,1)
(1971,1011,1)
(490,2154,1)
(2034,295,1)
(1821,284,1)
(724,421,1)
(1982,750,1)
(2097,2066,1)
(1275,1333,1)
(1259,751,1)
(633,431,1)
(232,323,1)
(540,2041,1)
(1128,1985,1)
(190,994,1)
(1401,89,1)
(487,1768,1)
(804,1801,1)
(1643,186,1)
(520,1617,1)
(1636,881,1)
(663,157,1)
(629,2118,1)
(1835,630,1)
(1576,1653,1)
(629,879,1)
(2153,215,1)
(775,1648,1)
(1573,994,1)
(135,879,1)
(2135,829,1)
(1148,1809,1)
(136,2126,1)
(1112,80,1)
(841,767,1)
(1044,1657,1)
(2136,1830,1)
(1931,2048,1)
(1030,879,1)
(561,1078,1)
(901,404,1)
(1740,189,1)
(609,431,1)
(1236,1713,1)
(736,802,1)
(474,307,1)
(10,253,1)
(1720,431,1)
(1410,366,1)
(1664,1378,1)
(31,2037,1)
(1762,994,1)
(1519,328,1)
(886,129,1)
(170,136,1)
(1471,772,1)
(213,644,1)
(2014,2070,1)
(1390,1450,1)
(1430,1692,1)
(1854,1315,1)
(2103,1483,1)
(501,1976,1)
(1029,1360,1)
(1205,1056,1)
(1423,1433,1)
(855,898,1)
(1178,758,1)
(856,327,1)
(1261,136,1)
(1813,598,1)
(976,1235,1)
(593,2096,1)
(2027,1831,1)
(900,1948,1)
(2080,1930,1)
(853,39,1)
(1498,2132,1)
(1089,622,1)
(78,879,1)
(1922,1307,1)
(1462,1444,1)
(1598,1360,1)
(203,690,1)
(1329,1155,1)
(1182,1476,1)
(1799,136,1)
(767,1736,1)
(1347,879,1)
(1839,994,1)
(358,1463,1)
(586,1330,1)
(439,564,1)
(1863,857,1)
(1921,1527,1)
(861,2039,1)
(785,1559,1)
(339,210,1)
(435,190,1)
(1445,1845,1)
(1818,483,1)
(246,192,1)
(490,1213,1)
(1784,327,1)
(2073,994,1)
(1356,2150,1)
(1765,1796,1)
(1763,85,1)
(637,111,1)
(1277,1363,1)
(850,1732,1)
(780,1667,1)
(422,1510,1)
(1811,879,1)
(1035,971,1)
(1149,159,1)
(1765,1277,1)
(1238,1120,1)
(752,937,1)
(321,879,1)
(490,393,1)
(342,2128,1)
(995,1077,1)
(1059,1305,1)
(64,1485,1)
(2102,879,1)
(986,136,1)
(2155,136,1)
(21,486,1)
(1030,1632,1)
(1070,1933,1)
(111,2051,1)
(114,2141,1)
(486,879,1)
(496,136,1)
(684,879,1)
(1378,214,1)
(599,401,1)
(367,431,1)
(1648,281,1)
(2157,421,1)
(1371,1643,1)
(204,858,1)
(747,997,1)
(1834,952,1)
(1279,2075,1)
(1427,1788,1)
(939,1727,1)
(1179,136,1)
(1006,1736,1)
(2112,605,1)
(272,640,1)
(1486,443,1)
(368,1664,1)
(1520,1077,1)
(2086,1944,1)
(1490,31,1)
(1193,1169,1)
(661,1571,1)
(2167,1408,1)
(618,1370,1)
(817,633,1)
(1859,1020,1)
(401,879,1)
(668,28,1)
(1516,1812,1)
(662,1131,1)
(539,199,1)
(459,1665,1)
(308,879,1)
(1765,479,1)
(1719,1881,1)
(864,1368,1)
(222,1309,1)
(2159,1895,1)
(1790,879,1)
(1990,172,1)
(2006,853,1)
(1347,1925,1)
(57,2096,1)
(77,1600,1)
(1715,1947,1)
(1559,194,1)
(1314,1057,1)
(404,136,1)
(109,1207,1)
(1502,732,1)
(219,568,1)
(909,1811,1)
(946,1212,1)
(361,14,1)
(1216,377,1)
(1658,431,1)
(1898,1461,1)
(1694,431,1)
(1073,1472,1)
(524,1098,1)
(34,446,1)
(2103,231,1)
(473,1491,1)
(1950,879,1)
(1420,910,1)
(849,1879,1)
(965,879,1)
(910,879,1)
(1580,879,1)
(645,823,1)
(1690,901,1)
(935,429,1)
(89,1421,1)
(538,381,1)
(1779,1070,1)
(1909,342,1)
(1563,664,1)
(1183,339,1)
(1702,811,1)
(824,1419,1)
(1066,2158,1)
(343,106,1)
(1326,41,1)
(97,1199,1)
(101,817,1)
(786,1997,1)
(75,1990,1)
(1708,1409,1)
(1818,1680,1)
(301,707,1)
(1300,685,1)
(1409,1304,1)
(474,1102,1)
(1893,1643,1)
(2155,915,1)
(2074,108,1)
(2079,19,1)
(2144,48,1)
(2069,165,1)
(860,1134,1)
(1065,994,1)
(1858,189,1)
(907,857,1)
(1273,2027,1)
(1818,1614,1)
(12,1104,1)
(144,1360,1)
(2116,688,1)
(205,2163,1)
(326,1500,1)
(1283,2151,1)
(2111,140,1)
(1600,879,1)
(1214,1058,1)
(1984,665,1)
(1429,1516,1)
(1569,801,1)
(113,1329,1)
(1474,431,1)
(1807,1861,1)
(404,614,1)
(235,1708,1)
(1217,708,1)
(866,2135,1)
(989,730,1)
(704,1438,1)
(1007,1804,1)
(740,879,1)
(912,742,1)
(691,202,1)
(545,1950,1)
(1659,1128,1)
(2053,136,1)
(331,561,1)
(1867,1882,1)
(2143,612,1)
(1359,879,1)
(1843,545,1)
(1000,1532,1)
(1929,450,1)
(1207,313,1)
(1311,1935,1)
(766,2101,1)
(383,1547,1)
(1225,843,1)
(1799,879,1)
(377,357,1)
(126,293,1)
(1818,305,1)
(239,723,1)
(895,611,1)
(677,102,1)
(2076,233,1)
(17,745,1)
(1181,2096,1)
(1290,1416,1)
(215,1819,1)
(14,246,1)
(1519,1212,1)
(345,1899,1)
(1548,1642,1)
(42,1181,1)
(873,879,1)
(847,1017,1)
(1383,528,1)
(1667,879,1)
(583,879,1)
(498,1861,1)
(2025,1639,1)
(1196,1391,1)
(686,8,1)
(824,73,1)
(231,425,1)
(1236,1283,1)
(302,1867,1)
(7,1857,1)
(1772,1285,1)
(872,879,1)
(2107,1278,1)
(2015,524,1)
(1057,1248,1)
(1165,994,1)
(243,1066,1)
(1904,682,1)
(97,431,1)
(1192,213,1)
(1484,739,1)
(1073,1685,1)
(652,1885,1)
(1243,1478,1)
(1704,78,1)
(1261,1928,1)
(993,2059,1)
(983,1398,1)
(1818,1341,1)
(1941,1886,1)
(1712,959,1)
(1992,542,1)
(1857,204,1)
(1433,1041,1)
(1234,44,1)
(2011,567,1)
(1591,1402,1)
(315,1742,1)
(12,879,1)
(772,572,1)
(1849,2080,1)
(1405,178,1)
(1858,879,1)
(1831,1002,1)
(293,1854,1)
(903,879,1)
(1631,879,1)
(134,879,1)
(1119,879,1)
(1818,1890,1)
(893,1179,1)
(2100,672,1)
(1830,966,1)
(843,1056,1)
(289,2159,1)
(1980,701,1)
(1192,431,1)
(1120,1630,1)
(1476,55,1)
(1183,1216,1)
(594,2168,1)
(1404,994,1)
(235,1489,1)
(1839,879,1)
(957,136,1)
(822,504,1)
(1364,2040,1)
(825,302,1)
(824,1840,1)
(1098,5,1)
(479,1422,1)
(2042,879,1)
(1751,1858,1)
(1741,1863,1)
(2154,393,1)
(1397,1861,1)
(57,503,1)
(1885,34,1)
(943,874,1)
(1104,556,1)
(2147,860,1)
(1132,1417,1)
(972,1344,1)
(1511,359,1)
(1215,1257,1)
(751,1815,1)
(793,96,1)
(2122,1549,1)
(1807,879,1)
(1707,1195,1)
(482,431,1)
(216,278,1)
(50,431,1)
(1651,756,1)
(374,1693,1)
(1067,52,1)
(1435,1381,1)
(1765,107,1)
(120,879,1)
(824,620,1)
(2146,2038,1)
(2047,1205,1)
(2149,2007,1)
(671,17,1)
(1062,879,1)
(215,879,1)
(433,994,1)
(1646,944,1)
(443,734,1)
(1818,1083,1)
(416,879,1)
(1132,1248,1)
(1573,1172,1)
(532,847,1)
(1925,1050,1)
(271,1435,1)
(404,69,1)
(1352,73,1)
(683,1399,1)
(582,102,1)
(332,631,1)
(1722,1381,1)
(170,1407,1)
(1362,983,1)
(930,365,1)
(1440,1736,1)
(1282,2032,1)
(1903,1565,1)
(1815,518,1)
(1170,904,1)
(1173,1162,1)
(320,1470,1)
(1804,469,1)
(1445,442,1)
(1469,276,1)
(1099,1381,1)
(1557,879,1)
(59,871,1)
(2121,2096,1)
(646,1489,1)
(2034,879,1)
(1800,994,1)
(1448,273,1)
(1907,60,1)
(1342,1702,1)
(54,142,1)
(1338,1099,1)
(1233,431,1)
(473,1213,1)
(1885,2096,1)
(270,1321,1)
(824,1216,1)
(1938,70,1)
(1001,557,1)
(2102,1849,1)
(896,517,1)
(693,1227,1)
(1372,879,1)
(1593,1167,1)
(518,1977,1)
(646,796,1)
(378,51,1)
(1950,994,1)
(744,1358,1)
(1818,984,1)
(2068,1024,1)
(105,1898,1)
(165,344,1)
(962,2141,1)
(1795,2011,1)
(445,2014,1)
(328,505,1)
(2002,1762,1)
(894,1732,1)
(964,241,1)
(1117,211,1)
(1205,1793,1)
(1765,266,1)
(2082,1736,1)
(1179,879,1)
(1428,1689,1)
(1978,300,1)
(1818,236,1)
(862,176,1)
(245,1722,1)
(780,423,1)
(748,1748,1)
(571,416,1)
(496,879,1)
(127,879,1)
(1452,879,1)
(384,96,1)
(1286,173,1)
(1637,639,1)
(134,50,1)
(2009,2022,1)
(997,663,1)
(1851,2051,1)
(1344,1418,1)
(1472,869,1)
(1330,1149,1)
(1524,1347,1)
(2,1897,1)
(1991,879,1)
(451,424,1)
(8,394,1)
(878,879,1)
(611,1894,1)
(1269,792,1)
(1826,879,1)
(1100,1173,1)
(2029,2074,1)
(1903,763,1)
(1630,1453,1)
(968,1259,1)
(623,1250,1)
(1203,950,1)
(602,1091,1)
(1187,1112,1)
(1034,1790,1)
(2006,286,1)
(1999,1516,1)
(1833,760,1)
(2092,150,1)
(881,85,1)
(1409,1859,1)
(1422,886,1)
(1957,879,1)
(5,350,1)
(837,1202,1)
(16,1720,1)
(144,994,1)
(1824,879,1)
(1654,317,1)
(218,1205,1)
(679,979,1)
(1862,1514,1)
(613,1654,1)
(791,50,1)
(1247,687,1)
(1307,1023,1)
(281,530,1)
(1748,1212,1)
(612,531,1)
(1121,879,1)
(1431,2009,1)
(2058,1873,1)
(611,1781,1)
(1661,101,1)
(1899,478,1)
(828,1146,1)
(1479,875,1)
(1881,431,1)
(1242,1637,1)
(1924,1136,1)
(112,942,1)
(853,879,1)
(12,136,1)
(1562,1359,1)
(275,879,1)
(1489,38,1)
(1813,1004,1)
(1949,69,1)
(2134,23,1)
(567,489,1)
(421,588,1)
(1377,967,1)
(1370,314,1)
(1007,469,1)
(1244,718,1)
(1369,462,1)
(1822,1902,1)
(954,1407,1)
(876,1473,1)
(2087,1830,1)
(672,1565,1)
(937,1066,1)
(1695,879,1)
(2043,1304,1)
(880,866,1)
(1111,1594,1)
(603,431,1)
(1032,616,1)
(784,879,1)
(1645,494,1)
(2129,762,1)
(1179,2164,1)
(336,1898,1)
(1739,1525,1)
(429,1075,1)
(1409,1684,1)
(2159,569,1)
(1623,1477,1)
(1900,1363,1)
(262,1844,1)
(1348,954,1)
(255,1061,1)
(849,431,1)
(218,979,1)
(1115,1367,1)
(1907,1360,1)
(69,1203,1)
(1261,879,1)
(985,567,1)
(834,272,1)
(670,1182,1)
(1679,879,1)
(751,879,1)
(140,64,1)
(1997,1772,1)
(1295,1826,1)
(2007,764,1)
(1026,170,1)
(1852,1681,1)
(153,1290,1)
(1203,586,1)
(761,736,1)
(1289,197,1)
(2007,1312,1)
(348,1405,1)
(1818,1471,1)
(2115,124,1)
(2016,1679,1)
(1525,555,1)
(1227,1543,1)
(1651,145,1)
(457,1941,1)
(2135,331,1)
(2036,584,1)
(1752,1210,1)
(1077,431,1)
(1986,1368,1)
(1459,1089,1)
(1567,1956,1)
(619,665,1)
(1723,1260,1)
(1185,279,1)
(1103,1026,1)
(1936,1308,1)
(295,1397,1)
(1628,217,1)
(1414,1239,1)
(1245,2029,1)
(1910,140,1)
(172,1499,1)
(1719,1704,1)
(1592,879,1)
(1151,1057,1)
(434,1823,1)
(214,110,1)
(1586,987,1)
(478,1403,1)
(394,1631,1)
(185,992,1)
(303,431,1)
(547,1557,1)
(1248,836,1)
(514,428,1)
(1183,1714,1)
(2053,879,1)
(1816,142,1)
(1993,780,1)
(498,879,1)
(1109,87,1)
(836,576,1)
(434,2149,1)
(307,643,1)
(1138,879,1)
(455,298,1)
(68,416,1)
(432,587,1)
(2054,1745,1)
(824,339,1)
(424,1138,1)
(302,1048,1)
(90,1539,1)
(1374,1500,1)
(784,1531,1)
(894,625,1)
(1765,491,1)
(1050,1995,1)
(105,879,1)
(1190,919,1)
(1166,1426,1)
(1666,560,1)
(753,26,1)
(1625,1599,1)
(1569,781,1)
(1934,1030,1)
(1934,177,1)
(1257,2096,1)
(533,1774,1)
(1818,1923,1)
(894,1133,1)
(73,40,1)
(2065,1229,1)
(1057,1861,1)
(1908,1497,1)
(577,1213,1)
(1813,2010,1)
(412,668,1)
(1953,1649,1)
(504,879,1)
(1470,587,1)
(554,258,1)
(2095,1791,1)
(1216,879,1)
(1172,1826,1)
(367,657,1)
(2071,1223,1)
(1642,786,1)
(1373,1570,1)
(2167,57,1)
(721,763,1)
(1183,935,1)
(296,461,1)
(782,1227,1)
(1710,834,1)
(36,1205,1)
(2168,879,1)
(1871,879,1)
(1461,1270,1)
(1133,879,1)
(1633,340,1)
(925,669,1)
(74,903,1)
(1072,979,1)
(649,1088,1)
(164,522,1)
(1183,1434,1)
(1257,649,1)
(85,82,1)
(134,136,1)
(349,1751,1)
(2059,1800,1)
(2080,2048,1)
(667,218,1)
(1830,879,1)
(601,2164,1)
(1268,360,1)
(1818,1126,1)
(765,1688,1)
(1014,132,1)
(404,1239,1)
(2041,1871,1)
(1863,581,1)
(1377,337,1)
(35,1259,1)
(498,1248,1)
(1065,136,1)
(516,684,1)
(705,995,1)
(1445,509,1)
(1603,1375,1)
(1674,879,1)
(544,74,1)
(2138,879,1)
(668,234,1)
(1271,1221,1)
(78,263,1)
(1839,2061,1)
(258,205,1)
(120,136,1)
(1344,431,1)
(1009,679,1)
(1579,2122,1)
(958,704,1)
(1392,2157,1)
(802,1015,1)
(1415,2153,1)
(906,694,1)
(750,431,1)
(53,1820,1)
(754,879,1)
(276,374,1)
(411,448,1)
(67,1674,1)
(586,1230,1)
(1202,653,1)
(539,965,1)
(155,1252,1)
(1358,414,1)
(1818,1821,1)
(15,629,1)
(1597,30,1)
(706,1609,1)
(1669,1237,1)
(2027,774,1)
(1403,924,1)
(506,879,1)
(800,1712,1)
(360,1109,1)
(948,1017,1)
(946,1187,1)
(775,879,1)
(288,1842,1)
(496,994,1)
(656,691,1)
(1018,1865,1)
(109,994,1)
(1800,879,1)
(1970,1072,1)
(1375,127,1)
(771,1062,1)
(1474,2160,1)
(530,879,1)
(1990,1655,1)
(181,638,1)
(246,151,1)
(1049,1852,1)
(746,714,1)
(689,1586,1)
(1882,884,1)
(824,1347,1)
(1429,1999,1)
(248,2024,1)
(1109,482,1)
(1023,1373,1)
(931,615,1)
(903,1658,1)
(1129,1406,1)
(176,510,1)
(182,1059,1)
(75,1960,1)
(546,2015,1)
(1818,683,1)
(1340,2010,1)
(51,2131,1)
(1060,465,1)
(903,341,1)
(1265,232,1)
(1229,1635,1)
(2048,1505,1)
(1735,193,1)
(2168,1771,1)
(1160,1634,1)
(2045,1756,1)
(144,1311,1)
(1074,878,1)
(1949,1360,1)
(1604,518,1)
(902,571,1)
(974,879,1)
(1737,2142,1)
(1029,136,1)
(577,8,1)
(1477,879,1)
(1640,1320,1)
(483,2133,1)
(1197,2029,1)
(2119,885,1)
(794,1180,1)
(1181,1952,1)
(1961,243,1)
(28,879,1)
(183,473,1)
(2164,79,1)
(1309,1427,1)
(386,1248,1)
(230,397,1)
(1381,2096,1)
(957,1911,1)
(1651,335,1)
(1169,761,1)
(2024,1490,1)
(2161,209,1)
(1083,559,1)
(740,1441,1)
(655,879,1)
(1305,1619,1)
(553,431,1)
(564,265,1)
(1574,1185,1)
(1685,1472,1)
(28,480,1)
(2042,136,1)
(370,1542,1)
(569,249,1)
(141,2004,1)
(344,810,1)
(842,799,1)
(655,645,1)
(1284,520,1)
(1808,530,1)
(191,415,1)
(794,879,1)
(857,1917,1)
(726,1212,1)
(383,431,1)
(1366,338,1)
(1120,994,1)
(252,1972,1)
(2039,289,1)
(864,1909,1)
(1907,136,1)
(1157,1538,1)
(622,1274,1)
(1728,549,1)
(404,1360,1)
(260,1106,1)
(587,2096,1)
(986,1148,1)
(604,1515,1)
(945,879,1)
(508,939,1)
(605,2023,1)
(1453,938,1)
(1298,1484,1)
(309,2138,1)
(403,138,1)
(170,1360,1)
(1679,1496,1)
(1406,304,1)
(144,136,1)
(1765,746,1)
(428,1822,1)
(1987,75,1)
(1818,260,1)
(1812,743,1)
(710,19,1)
(717,879,1)
(1159,431,1)
(509,1574,1)
(834,2073,1)
(951,728,1)
(1549,595,1)
(421,136,1)
(583,306,1)
(257,1490,1)
(324,1147,1)
(105,994,1)
(492,1593,1)
(959,161,1)
(189,431,1)
(1880,754,1)
(1631,1153,1)
(824,1434,1)
(1736,621,1)
(1384,1965,1)
(1164,1776,1)
(979,1576,1)
(1944,1381,1)
(526,1164,1)
(863,845,1)
(209,2102,1)
(2074,136,1)
(2131,879,1)
(231,879,1)
(2119,577,1)
(1842,1437,1)
(323,1580,1)
(867,1719,1)
(194,337,1)
(1570,854,1)
(315,2001,1)
(80,1067,1)
(273,90,1)
(1391,1265,1)
(1029,296,1)
(1409,1137,1)
(1568,431,1)
(2152,435,1)
(1400,1059,1)
(1729,11,1)
(1323,778,1)
(1183,736,1)
(1139,1746,1)
(969,1213,1)
(1640,431,1)
(1845,1380,1)
(179,1839,1)
(1858,994,1)
(1537,72,1)
(1382,879,1)
(12,994,1)
(1818,883,1)
(996,994,1)
(341,963,1)
(2170,1534,1)
(159,627,1)
(1065,202,1)
(1053,1202,1)
(1013,1276,1)
(976,273,1)
(339,793,1)
(1615,1280,1)
(205,431,1)
(1733,864,1)
(751,994,1)
(699,490,1)
(314,1451,1)
(1968,490,1)
(639,1313,1)
(1173,1420,1)
(508,859,1)
(1818,58,1)
(1869,1580,1)
(1828,1644,1)
(1281,1769,1)
(1399,1828,1)
(82,1892,1)
(563,1938,1)
(1876,1476,1)
(1452,1697,1)
(1404,136,1)
(1484,1530,1)
(758,302,1)
(474,994,1)
(786,994,1)
(2007,1055,1)
(1546,771,1)
(550,1429,1)
(625,1133,1)
(1606,91,1)
(47,1958,1)
(937,879,1)
(2169,126,1)
(273,2141,1)
(1660,1725,1)
(474,1360,1)
(1991,994,1)
(316,709,1)
(653,2139,1)
(404,994,1)
(1781,1894,1)
(615,1392,1)
(494,1387,1)
(370,784,1)
(110,1628,1)
(1996,1201,1)
(824,1592,1)
(2026,67,1)
(2120,1973,1)
(2047,167,1)
(1949,2119,1)
(1497,1224,1)
(173,222,1)
(2036,2094,1)
(914,1565,1)
(974,777,1)
(882,1237,1)
(495,840,1)
(2165,299,1)
(688,794,1)
(212,879,1)
(27,1947,1)
(1765,1591,1)
(568,1465,1)
(831,434,1)
(1818,610,1)
(1515,431,1)
(1689,158,1)
(291,1913,1)
(2069,136,1)
(591,2125,1)
(1800,1100,1)
(1037,972,1)
(1752,879,1)
(1460,141,1)
(1818,1145,1)
(456,637,1)
(1956,136,1)
(397,180,1)
(681,1395,1)
(903,69,1)
(1147,1736,1)
(1818,2033,1)
(1943,1263,1)
(1287,136,1)
(71,275,1)
(426,1111,1)
(1262,788,1)
(1746,879,1)
(299,2061,1)
(824,935,1)
(1870,1372,1)
(942,204,1)
(2107,212,1)
(627,1556,1)
(1739,1563,1)
(980,155,1)
(1002,1775,1)
(1827,1736,1)
(916,1749,1)
(1964,488,1)
(1476,1135,1)
(598,240,1)
(1655,172,1)
(87,1359,1)
(393,458,1)
(2053,994,1)
(1790,671,1)
(2004,2100,1)
(1721,7,1)
(1776,546,1)
(892,1166,1)
(1923,68,1)
(272,1256,1)
(806,1954,1)
(530,1838,1)
(1399,1695,1)
(52,154,1)
(698,1747,1)
(1477,1171,1)
(510,2096,1)
(30,879,1)
(865,1782,1)
(886,994,1)
(2088,328,1)
(573,963,1)
(187,796,1)
(1818,1946,1)
(1120,136,1)
(496,1386,1)
(85,879,1)
(364,1792,1)
(857,879,1)
(866,994,1)
(2070,1102,1)
(1263,846,1)
(60,1164,1)
(1877,864,1)
(957,994,1)
(1321,968,1)
(1407,431,1)
(1505,566,1)
(1950,677,1)
(1304,507,1)
(1060,879,1)
(1997,431,1)
(430,351,1)
(1732,1196,1)
(1784,879,1)
(1187,879,1)
(1239,431,1)
(1437,412,1)
(883,1232,1)
(971,1361,1)
(1818,887,1)
(2069,994,1)
(614,2132,1)
(890,2023,1)
(1008,1302,1)
(567,431,1)
(1164,922,1)
(158,136,1)
(1171,2116,1)
(190,879,1)
(1434,1269,1)
(1503,1907,1)
(1385,484,1)
(1513,1524,1)
(1239,2156,1)
(137,1739,1)
(1956,1031,1)
(310,191,1)
(1935,2107,1)
(489,2082,1)
(966,2152,1)
(603,1588,1)
(1270,2113,1)
(722,2028,1)
(1976,656,1)
(283,1486,1)
(1227,879,1)
(123,785,1)
(144,1233,1)
(235,796,1)
(118,1842,1)
(1363,1949,1)
(864,1817,1)
(187,1829,1)
(2046,2102,1)
(1586,1853,1)
(899,1007,1)
(1495,1728,1)
(143,678,1)
(2132,1893,1)
(471,2059,1)
(798,1223,1)
(504,1621,1)
(2139,1212,1)
(1651,824,1)
(570,321,1)
(676,779,1)
(940,1236,1)
(1426,749,1)
(1765,1245,1)
(1439,1822,1)
(453,650,1)
(1566,840,1)
(1853,628,1)
(1063,366,1)
(1807,2025,1)
(1581,497,1)
(959,879,1)
(331,1770,1)
(1368,914,1)
(259,431,1)
(2129,136,1)
(1842,879,1)
(1183,73,1)
(1757,1699,1)
(1156,1658,1)
(114,1899,1)
(1818,1197,1)
(1500,1213,1)
(1605,2120,1)
(480,1423,1)
(1165,316,1)
(1943,2096,1)
(1848,1675,1)
(600,445,1)
(680,640,1)
(366,996,1)
(832,1530,1)
(1939,879,1)
(1802,2136,1)
(1823,1870,1)
(1985,1635,1)
(378,2131,1)
(636,2096,1)
(1493,1626,1)
(674,2016,1)
(2037,493,1)
(45,880,1)
(472,1964,1)
(1365,117,1)
(612,431,1)
(2155,191,1)
(221,2021,1)
(719,1565,1)
(1544,1074,1)
(516,2002,1)
(507,1452,1)
(1794,550,1)
(1946,2008,1)
(2011,1360,1)
(1928,2121,1)
(1746,143,1)
(1453,1213,1)
(1552,2127,1)
(1404,879,1)
(2113,2129,1)
(1771,2044,1)
(1818,201,1)
(242,1927,1)
(1450,1012,1)
(1408,57,1)
(701,1552,1)
(1775,1940,1)
(1155,563,1)
(987,1853,1)
(155,801,1)
(2069,879,1)
(1470,432,1)
(689,99,1)
(2081,850,1)
(779,1302,1)
(1389,1319,1)
(839,113,1)
(1057,1625,1)
(1057,879,1)
(1927,596,1)
(517,1736,1)
(492,879,1)
(491,1319,1)
(1561,1756,1)
(1711,1840,1)
(1949,1666,1)
(87,1562,1)
(270,879,1)
(823,1455,1)
(1162,1420,1)
(677,582,1)
(328,879,1)
(1636,1446,1)
(651,64,1)
(1483,231,1)
(1153,1469,1)
(1183,1592,1)
(1368,670,1)
(569,337,1)
(1533,361,1)
(799,1552,1)
(117,1520,1)
(2040,1447,1)
(631,609,1)
(1189,933,1)
(956,1049,1)
(709,907,1)
(153,136,1)
(62,537,1)
(212,888,1)
(665,1957,1)
(1341,2002,1)
(1068,722,1)
(1973,1234,1)
(1698,152,1)
(684,2067,1)
(1818,1969,1)
(1773,1629,1)
(1682,372,1)
(386,0,1)
(549,994,1)
(608,879,1)
(390,603,1)
(1862,343,1)
(715,879,1)
(474,879,1)
(91,1159,1)
(1191,1060,1)
(2020,879,1)
(792,1626,1)
(1151,1314,1)
(790,340,1)
(945,1450,1)
(1315,1936,1)
(1317,155,1)
(2011,69,1)
(1190,879,1)
(406,1875,1)
(190,1383,1)
(1029,69,1)
(1290,1752,1)
(1785,1213,1)
(1621,796,1)
(1991,136,1)
(1555,1222,1)
(1183,620,1)
(1986,1817,1)
(1818,905,1)
(337,994,1)
(158,994,1)
(1858,1360,1)
(809,1779,1)
(2089,390,1)
(1598,69,1)
(1472,879,1)
(153,994,1)
(1219,63,1)
(1444,2089,1)
(1517,1865,1)
(1033,431,1)
(421,994,1)
(1272,1674,1)
(1121,406,1)
(1518,486,1)
(555,1342,1)
(1743,1014,1)
(1539,436,1)
(55,1135,1)
(447,430,1)
(1393,964,1)
(1134,1692,1)
(119,1284,1)
(1565,235,1)
(2053,1406,1)
(830,1736,1)
(1538,339,1)
(1598,994,1)
(423,1667,1)
(1624,2169,1)
(1630,2078,1)
(577,686,1)
(1214,2034,1)
(1750,27,1)
(1310,738,1)
(1053,837,1)
(1820,879,1)
(1027,239,1)
(1791,1755,1)
(497,833,1)
(732,920,1)
(1793,123,1)
(120,1326,1)
(2012,681,1)
(1799,539,1)
(1274,1296,1)
(38,1013,1)
(461,333,1)
(477,1903,1)
(1020,2020,1)
(768,1463,1)
(2011,297,1)
(1950,136,1)
(1274,2041,1)
(1805,346,1)
(1137,618,1)
(157,1997,1)
(233,1393,1)
(1183,952,1)
(300,1381,1)
(2111,1910,1)
(281,137,1)
(595,1706,1)
(1056,831,1)
(1106,2155,1)
(1953,879,1)
(1935,1213,1)
(2141,864,1)
(410,1817,1)
(1325,863,1)
(166,1726,1)
(1889,277,1)
(1419,410,1)
(428,1439,1)
(1818,1103,1)
(786,136,1)
(579,1238,1)
(1017,174,1)
(1739,879,1)
(173,1309,1)
(1398,399,1)
(904,2021,1)
(229,1494,1)
(996,879,1)
(202,175,1)
(39,1064,1)
(1665,1785,1)
(1998,1559,1)
(1183,1419,1)
(897,1784,1)
(1346,77,1)
(871,1920,1)
(192,2096,1)
(1047,1094,1)
(537,1369,1)
(2000,2008,1)
(994,642,1)
(1018,1205,1)
(301,1600,1)
(1626,433,1)
(1091,879,1)
(32,1881,1)
(1004,1992,1)
(1653,1079,1)
(967,1868,1)
(785,1998,1)
(1696,356,1)
(1219,164,1)
(1163,16,1)
(1261,113,1)
(2063,641,1)
(153,219,1)
(644,75,1)
(296,431,1)
(503,1258,1)
(1382,994,1)
(1479,879,1)
(317,593,1)
(154,1066,1)
(1792,1025,1)
(786,541,1)
(836,386,1)
(72,2093,1)
(399,451,1)
(1840,2091,1)
(1826,1384,1)
(762,431,1)
(2150,891,1)
(1222,535,1)
(1991,594,1)
(93,1521,1)
(464,1303,1)
(244,879,1)
(1330,1709,1)
(2162,1479,1)
(527,1501,1)
(1739,136,1)
(402,543,1)
(799,431,1)
(337,136,1)
(1143,315,1)
(145,1105,1)
(2104,1736,1)
(975,1052,1)
(657,318,1)
(614,1498,1)
(1818,748,1)
(851,848,1)
(227,914,1)
(1818,1587,1)
(1351,759,1)
(453,879,1)
(1784,1073,1)
(2126,2124,1)
(1901,1129,1)
(1406,431,1)
(1342,879,1)
(938,1431,1)
(340,658,1)
(1672,1843,1)
(241,1794,1)
(851,431,1)
(786,879,1)
(1288,2143,1)
(1367,1254,1)
(2160,1814,1)
(1818,437,1)
(1311,387,1)
(685,1955,1)
(1668,1006,1)
(2011,994,1)
(2042,994,1)
(1501,2017,1)
(1186,316,1)
(2091,395,1)
(2156,803,1)
(669,2020,1)
(177,1030,1)
(1815,1604,1)
(946,2054,1)
(1320,95,1)
(1528,643,1)
(1176,408,1)
(1703,332,1)
(1572,187,1)
(1141,900,1)
(798,2071,1)
(858,879,1)
(287,604,1)
(1875,1595,1)
(1867,879,1)
(1940,2134,1)
(1856,1292,1)
(1110,830,1)
(918,1984,1)
(2128,508,1)
(758,825,1)
(1296,134,1)
(1434,879,1)
(1455,879,1)
(2087,1175,1)
(1907,69,1)
(1237,1289,1)
(979,395,1)
(2163,1000,1)
(2158,1021,1)
(1183,974,1)
(1914,935,1)
(427,1956,1)
(2038,1265,1)
(327,431,1)
(1902,1983,1)
(2094,149,1)
(1917,516,1)
(1012,648,1)
(549,879,1)
(1818,1673,1)
(1595,1565,1)
(1293,578,1)
(488,636,1)
(1898,431,1)
(237,431,1)
(953,1445,1)
(1597,1327,1)
(1939,392,1)
(996,136,1)
(1688,693,1)
(932,1988,1)
(1033,1349,1)
(1766,2060,1)
(2132,1213,1)
(755,229,1)
(679,1317,1)
(1647,867,1)
(1818,1410,1)
(2023,879,1)
(1632,600,1)
(243,879,1)
(401,1837,1)
(1713,1283,1)
(619,1572,1)
(84,1607,1)
(1213,1963,1)
(1818,579,1)
(1224,879,1)
(581,1165,1)
(23,879,1)
(1109,879,1)
(1043,2042,1)
(1832,2170,1)
(996,54,1)
(2074,879,1)
(1725,261,1)
(779,136,1)
(1635,1509,1)
(1726,923,1)
(1364,879,1)
(552,773,1)
(275,411,1)
(465,1400,1)
(1133,1638,1)
(306,147,1)
(1478,879,1)
(1643,879,1)
(643,1650,1)
(2151,244,1)
(1212,2097,1)
(1232,1404,1)
(1334,1518,1)
(373,347,1)
(1104,956,1)
(106,1662,1)
(643,1213,1)
(1881,1424,1)
(983,879,1)
(1774,1032,1)
(1400,1912,1)
(216,879,1)
(2125,218,1)
(2049,1053,1)
(1455,440,1)
(333,1736,1)
(26,1512,1)
(1727,98,1)
(1719,136,1)
(779,879,1)
(1229,879,1)
(2028,296,1)
(58,1795,1)
(1748,2106,1)
(1824,877,1)
(1818,1036,1)
(996,1033,1)
(1425,1298,1)
(1940,23,1)
(1614,1728,1)
(1391,676,1)
(1756,119,1)
(823,933,1)
(1818,1671,1)
(862,510,1)
(551,1736,1)
(1965,1163,1)
(164,1213,1)
(1386,431,1)
(1947,879,1)
(1928,1150,1)
(83,482,1)
(2013,2133,1)
(440,1268,1)
(1495,1532,1)
(1669,882,1)
(121,1213,1)
(1003,368,1)
(1109,994,1)
(1818,697,1)
(635,559,1)
(1838,71,1)
(470,1466,1)
(1095,808,1)
(1124,312,1)
(1762,15,1)
(1657,1595,1)
(694,702,1)
(1719,994,1)
(1810,1661,1)
(885,577,1)
(1036,1296,1)
(646,937,1)
(243,1157,1)
(1972,2096,1)
(1719,879,1)
(1957,1066,1)
(1236,1213,1)
(1644,1695,1)
(1762,428,1)
(1233,896,1)
(1653,106,1)
(1088,320,1)
(48,1382,1)
(523,46,1)
(198,585,1)
(1680,435,1)
(1508,865,1)
(796,1687,1)
(921,1606,1)
(1893,1371,1)
(1512,431,1)
(1769,1243,1)
(781,801,1)
(1223,271,1)
(1107,1413,1)
(1058,2034,1)
(1651,1183,1)
(553,931,1)
(730,873,1)
(7,1888,1)
(965,1537,1)
(1094,1326,1)
(707,105,1)
(1509,1388,1)
(1379,264,1)
(1360,689,1)
(199,965,1)
(1045,2032,1)
(674,1679,1)
(1032,879,1)
(1868,1009,1)
(886,1360,1)
(1747,1240,1)
(1490,2096,1)
(646,752,1)
(810,1707,1)
(1499,1601,1)
(1029,879,1)
(1730,1449,1)
(398,360,1)
(392,2148,1)
(2076,1429,1)
(1818,1690,1)
(1856,1603,1)
(770,1460,1)
(1844,849,1)
(277,822,1)
(126,431,1)
(12,2117,1)
(357,1489,1)
(1742,1508,1)
(2124,1670,1)
(326,1374,1)
(292,1757,1)
(905,137,1)
(1021,1184,1)
(129,611,1)
(1801,1376,1)
(845,1390,1)
(109,609,1)
(478,1956,1)
(13,454,1)
(1553,788,1)
(233,964,1)
(1666,431,1)
(158,750,1)
(1736,1968,1)
(1191,1663,1)
(1818,1921,1)
(779,1008,1)
(2053,1360,1)
(1879,1529,1)
(929,1380,1)
(919,1656,1)
(1492,994,1)
(2074,994,1)
(1745,1187,1)
(107,1795,1)
(1678,127,1)
(1955,832,1)
(50,818,1)
(665,1132,1)
(240,1350,1)
(1526,1663,1)
(1028,1084,1)
(1457,2104,1)
(1234,864,1)
(1108,1253,1)
(1873,431,1)
(120,994,1)
(618,1193,1)
(924,962,1)
(1907,1474,1)
(170,459,1)
(1818,1389,1)
(1518,1212,1)
(0,1834,1)
(846,1981,1)
(1179,1192,1)
(1119,1723,1)
(1166,1956,1)
(1207,713,1)
(942,1721,1)
(1491,1546,1)
(1062,200,1)
(237,1457,1)
(1706,619,1)
(1545,1497,1)
(2074,237,1)
(2125,1613,1)
(1519,1507,1)
(814,654,1)
(156,1903,1)
(920,1351,1)
(1496,1996,1)
(608,1293,1)
(531,599,1)
(1432,1097,1)
(716,241,1)
(2044,1288,1)
(1404,668,1)
(1897,1414,1)
(2032,951,1)
(313,713,1)
(1534,814,1)
(903,1360,1)
(2108,270,1)
(23,917,1)
(297,473,1)
(97,1530,1)
(1268,1494,1)
(1574,879,1)
(393,1701,1)
(1130,337,1)
(486,1281,1)
(588,1282,1)
(1446,881,1)
(1250,1797,1)
(188,575,1)
(678,655,1)
(654,1932,1)
(2011,136,1)
(1473,2018,1)
(1675,1060,1)
(1167,842,1)
(1504,171,1)
(696,1375,1)
(783,1366,1)
(1939,994,1)
(204,485,1)
(19,879,1)
(2121,93,1)
(511,570,1)
(1650,1934,1)
(1753,684,1)
(1658,1924,1)
(1818,1773,1)
(2135,1018,1)
(1518,43,1)
(1592,283,1)
(437,946,1)
(2058,879,1)
(562,310,1)
(2058,86,1)
(280,1623,1)
(1055,975,1)
(1670,682,1)
(1938,420,1)
(128,1352,1)
(2050,973,1)
(2061,431,1)
(650,1264,1)
(1911,809,1)
(914,1046,1)
(1647,1232,1)
(584,589,1)
(171,373,1)
(726,1549,1)
(346,1170,1)
(1285,655,1)
(1829,498,1)
(155,431,1)
(403,1552,1)
(824,1095,1)
(1122,1455,1)
(986,994,1)
(910,439,1)
(190,1158,1)
(1958,584,1)
(894,1133,2)
(2116,688,2)
(272,994,2)
(430,1455,2)
(602,1243,2)
(1710,1912,2)
(2119,577,2)
(1997,431,2)
(242,155,2)
(994,642,2)
(1765,2008,2)
(1689,1059,2)
(457,1886,2)
(951,1527,2)
(1289,1026,2)
(635,559,2)
(1991,612,2)
(605,1736,2)
(1769,1243,2)
(506,1360,2)
(445,1736,2)
(1245,2029,2)
(148,1886,2)
(1704,1017,2)
(1025,799,2)
(2116,775,2)
(2069,1707,2)
(477,74,2)
(1956,994,2)
(2076,1497,2)
(121,773,2)
(1903,901,2)
(1710,1629,2)
(2102,1930,2)
(587,2096,2)
(1408,850,2)
(1903,1067,2)
(2104,1736,2)
(1943,2096,2)
(1497,1224,2)
(1909,799,2)
(346,2021,2)
(646,937,2)
(2095,754,2)
(100,1381,2)
(530,772,2)
(377,1626,2)
(1375,127,2)
(1976,1689,2)
(1102,431,2)
(1707,879,2)
(1108,1947,2)
(23,730,2)
(980,639,2)
(976,799,2)
(43,1243,2)
(30,1689,2)
(624,1089,2)
(563,1938,2)
(181,2065,2)
(112,639,2)
(1262,1600,2)
(1420,321,2)
(1885,2096,2)
(2073,901,2)
(677,1315,2)
(966,435,2)
(1950,1315,2)
(1576,639,2)
(1784,327,2)
(1958,584,2)
(822,504,2)
(1138,2100,2)
(1710,97,2)
(1818,676,2)
(537,1381,2)
(1963,850,2)
(2017,1108,2)
(1903,1319,2)
(594,401,2)
(170,69,2)
(1688,655,2)
(181,1380,2)
(1289,2008,2)
(1936,1032,2)
(1166,1956,2)
(1261,1928,2)
(1313,1121,2)
(1617,275,2)
(477,137,2)
(5,1736,2)
(2073,1175,2)
(930,1463,2)
(155,431,2)
(1331,1736,2)
(824,152,2)
(383,431,2)
(1598,136,2)
(535,2076,2)
(1104,556,2)
(834,152,2)
(1525,1342,2)
(1029,69,2)
(1899,478,2)
(473,1736,2)
(1799,705,2)
(1630,1453,2)
(689,2032,2)
(719,2111,2)
(773,1736,2)
(1164,1776,2)
(539,705,2)
(326,1736,2)
(79,75,2)
(1859,1307,2)
(831,155,2)
(1097,155,2)
(793,96,2)
(1520,1060,2)
(562,2102,2)
(606,1626,2)
(997,655,2)
(1701,2032,2)
(1165,994,2)
(1663,1799,2)
(834,1757,2)
(90,799,2)
(1137,618,2)
(268,1757,2)
(1707,1830,2)
(824,2008,2)
(636,2096,2)
(1817,273,2)
(847,1017,2)
(750,1059,2)
(1274,1296,2)
(1928,2121,2)
(1836,705,2)
(1720,1032,2)
(1858,189,2)
(874,1736,2)
(1950,994,2)
(170,1407,2)
(1949,1666,2)
(478,799,2)
(30,879,2)
(882,850,2)
(148,1296,2)
(477,179,2)
(148,360,2)
(1333,1059,2)
(1518,486,2)
(1710,1728,2)
(62,1381,2)
(1159,431,2)
(21,1243,2)
(1508,1017,2)
(1229,879,2)
(2076,1940,2)
(1800,1100,2)
(2073,773,2)
(1903,74,2)
(979,639,2)
(454,1626,2)
(1592,879,2)
(1431,1736,2)
(510,2096,2)
(1029,879,2)
(824,705,2)
(834,772,2)
(2069,136,2)
(1863,857,2)
(105,674,2)
(609,1830,2)
(283,584,2)
(835,1736,2)
(969,2008,2)
(1669,1503,2)
(1364,799,2)
(477,1930,2)
(1861,646,2)
(2073,1503,2)
(1925,584,2)
(676,1265,2)
(1126,1689,2)
(824,74,2)
(1465,1108,2)
(197,2133,2)
(1921,1527,2)
(1873,132,2)
(1625,619,2)
(1903,2029,2)
(241,1429,2)
(693,655,2)
(1691,1736,2)
(646,1626,2)
(1669,74,2)
(1695,879,2)
(1553,1600,2)
(1104,956,2)
(477,559,2)
(791,2041,2)
(951,1751,2)
(148,1930,2)
(308,879,2)
(1674,1947,2)
(867,1719,2)
(527,1108,2)
(1109,482,2)
(2154,2032,2)
(1579,619,2)
(1546,1062,2)
(2036,1243,2)
(479,1422,2)
(672,822,2)
(1813,619,2)
(689,99,2)
(1172,1826,2)
(1510,1463,2)
(1505,872,2)
(1261,563,2)
(350,1736,2)
(1903,1757,2)
(786,136,2)
(2164,1502,2)
(1640,431,2)
(834,1232,2)
(1519,1212,2)
(619,1572,2)
(1477,688,2)
(2129,762,2)
(834,676,2)
(201,1912,2)
(1132,879,2)
(2042,1480,2)
(1422,1736,2)
(2022,1736,2)
(2092,1381,2)
(46,2041,2)
(1418,775,2)
(148,1043,2)
(1710,435,2)
(2032,1422,2)
(2030,155,2)
(1296,134,2)
(1919,1108,2)
(549,205,2)
(273,2141,2)
(450,431,2)
(1515,321,2)
(2035,1757,2)
(1429,1497,2)
(1957,879,2)
(393,2032,2)
(1055,155,2)
(596,2039,2)
(1453,1431,2)
(642,553,2)
(436,1473,2)
(702,1676,2)
(1628,872,2)
(102,1315,2)
(209,1106,2)
(1804,1626,2)
(424,2100,2)
(994,421,2)
(1762,428,2)
(1230,2032,2)
(1903,1463,2)
(1064,1736,2)
(1707,1175,2)
(1598,879,2)
(1234,864,2)
(1848,1060,2)
(909,2041,2)
(144,1233,2)
(1593,639,2)
(191,431,2)
(2074,108,2)
(1877,1051,2)
(508,1727,2)
(1818,1757,2)
(969,1736,2)
(15,629,2)
(1224,1940,2)
(975,155,2)
(829,331,2)
(754,879,2)
(2108,270,2)
(1095,879,2)
(2165,11,2)
(1662,639,2)
(1048,1736,2)
(1903,2133,2)
(1321,1259,2)
(1383,1746,2)
(245,1381,2)
(1358,1368,2)
(962,799,2)
(1903,1106,2)
(506,1159,2)
(323,1580,2)
(197,773,2)
(2073,74,2)
(1109,1494,2)
(854,2111,2)
(1903,1061,2)
(140,97,2)
(1926,2100,2)
(2007,1312,2)
(1676,1181,2)
(1497,1940,2)
(2132,1213,2)
(1968,2032,2)
(257,1490,2)
(1573,1172,2)
(1499,53,2)
(361,1381,2)
(2032,1363,2)
(1307,1023,2)
(1330,1149,2)
(1710,2059,2)
(477,1175,2)
(824,1095,2)
(526,1736,2)
(944,639,2)
(2129,879,2)
(288,1842,2)
(951,1503,2)
(2073,1319,2)
(1260,639,2)
(2002,1762,2)
(357,1757,2)
(606,1757,2)
(1567,639,2)
(1981,1381,2)
(1903,559,2)
(1463,401,2)
(2032,901,2)
(1527,1736,2)
(1033,431,2)
(1833,639,2)
(308,1265,2)
(824,2059,2)
(834,1987,2)
(197,1503,2)
(464,1595,2)
(1320,1736,2)
(174,879,2)
(691,1689,2)
(1719,1017,2)
(38,1013,2)
(717,879,2)
(937,1626,2)
(2096,894,2)
(1950,677,2)
(11,1477,2)
(1917,1987,2)
(1924,1736,2)
(1710,1238,2)
(1710,1503,2)
(1907,1360,2)
(337,994,2)
(2103,231,2)
(216,879,2)
(206,799,2)
(477,1795,2)
(1008,1265,2)
(1604,754,2)
(887,707,2)
(148,840,2)
(920,75,2)
(1765,714,2)
(1492,879,2)
(1934,1736,2)
(89,879,2)
(677,102,2)
(1845,1380,2)
(986,2103,2)
(1719,1881,2)
(1765,2029,2)
(1944,1381,2)
(1265,1580,2)
(834,1728,2)
(506,994,2)
(2011,879,2)
(1633,340,2)
(1237,1026,2)
(1411,1107,2)
(509,2167,2)
(2028,1736,2)
(1409,1304,2)
(1401,822,2)
(734,584,2)
(212,1736,2)
(1079,1862,2)
(1779,2048,2)
(1289,1422,2)
(1404,879,2)
(1824,877,2)
(1298,2111,2)
(1091,2076,2)
(1818,1067,2)
(666,1736,2)
(517,1736,2)
(903,341,2)
(68,97,2)
(318,275,2)
(2059,321,2)
(353,879,2)
(1530,1304,2)
(307,1736,2)
(1710,1319,2)
(1029,1736,2)
(903,1360,2)
(765,655,2)
(1220,775,2)
(1063,1089,2)
(616,1532,2)
(834,137,2)
(1897,1736,2)
(1914,155,2)
(988,1736,2)
(28,879,2)
(1788,1736,2)
(864,799,2)
(47,584,2)
(1479,270,2)
(126,431,2)
(553,931,2)
(493,1381,2)
(937,879,2)
(2073,1751,2)
(246,192,2)
(1653,639,2)
(1113,1463,2)
(834,901,2)
(1065,879,2)
(1636,1213,2)
(1986,1368,2)
(148,1912,2)
(668,1017,2)
(288,1017,2)
(477,1238,2)
(0,454,2)
(164,1213,2)
(2082,1736,2)
(903,136,2)
(995,879,2)
(1195,1830,2)
(1853,1636,2)
(1176,897,2)
(1818,1259,2)
(240,2076,2)
(158,994,2)
(1692,1381,2)
(1757,378,2)
(2073,1232,2)
(1950,126,2)
(197,2008,2)
(570,321,2)
(785,1559,2)
(1108,48,2)
(2125,218,2)
(328,879,2)
(1485,1304,2)
(1305,303,2)
(516,684,2)
(824,1347,2)
(1532,2102,2)
(1888,402,2)
(1710,1175,2)
(1903,285,2)
(1873,431,2)
(824,1038,2)
(2106,822,2)
(1386,1381,2)
(794,136,2)
(636,1381,2)
(440,1494,2)
(924,799,2)
(2167,850,2)
(1765,1238,2)
(1996,2113,2)
(321,545,2)
(1131,1243,2)
(1710,1067,2)
(91,1736,2)
(2032,1751,2)
(1839,2061,2)
(806,1532,2)
(882,1422,2)
(121,2008,2)
(1931,2048,2)
(2020,1066,2)
(1287,2076,2)
(349,1751,2)
(231,1455,2)
(796,1687,2)
(2016,2113,2)
(1911,1779,2)
(1882,1736,2)
(454,1214,2)
(395,1565,2)
(153,1290,2)
(111,2051,2)
(85,2032,2)
(498,665,2)
(2087,1175,2)
(2077,321,2)
(474,1736,2)
(1494,1108,2)
(1903,1642,2)
(715,2102,2)
(850,509,2)
(953,1380,2)
(1903,1503,2)
(1391,676,2)
(472,1964,2)
(1202,879,2)
(109,136,2)
(1380,496,2)
(1583,862,2)
(2069,994,2)
(2127,639,2)
(507,426,2)
(1818,1751,2)
(861,155,2)
(1455,879,2)
(877,1381,2)
(996,994,2)
(2037,1381,2)
(1351,75,2)
(985,1736,2)
(1833,760,2)
(1939,994,2)
(655,1455,2)
(1512,1463,2)
(2003,822,2)
(1445,2065,2)
(2136,1830,2)
(591,2125,2)
(824,1067,2)
(2086,1381,2)
(508,1368,2)
(595,619,2)
(1171,775,2)
(2073,688,2)
(162,285,2)
(1060,1912,2)
(1986,1817,2)
(959,879,2)
(1057,619,2)
(1800,994,2)
(127,1736,2)
(676,779,2)
(1216,1757,2)
(2135,1595,2)
(471,321,2)
(895,1736,2)
(881,85,2)
(1818,433,2)
(370,1060,2)
(1229,1381,2)
(1710,1930,2)
(1032,1728,2)
(1319,1736,2)
(1568,639,2)
(272,136,2)
(246,1381,2)
(1655,53,2)
(1358,88,2)
(1117,530,2)
(1371,1736,2)
(1920,155,2)
(1158,1217,2)
(144,136,2)
(786,541,2)
(1587,545,2)
(1994,1886,2)
(608,879,2)
(628,2032,2)
(1289,2029,2)
(1492,136,2)
(1491,1736,2)
(1818,1232,2)
(1657,1595,2)
(824,1751,2)
(1700,1243,2)
(1999,1497,2)
(1789,1736,2)
(121,1422,2)
(1663,705,2)
(1818,840,2)
(2156,1736,2)
(933,1455,2)
(544,74,2)
(111,1736,2)
(1584,639,2)
(1656,1580,2)
(474,69,2)
(1858,879,2)
(64,1304,2)
(1549,619,2)
(2010,619,2)
(977,2017,2)
(1911,2048,2)
(1496,2113,2)
(1770,639,2)
(1500,1074,2)
(1375,1736,2)
(664,530,2)
(1648,530,2)
(1545,1497,2)
(1818,2008,2)
(515,1381,2)
(194,155,2)
(1636,2032,2)
(1780,155,2)
(309,2138,2)
(710,1757,2)
(408,1477,2)
(286,1736,2)
(181,509,2)
(1939,110,2)
(952,879,2)
(474,1102,2)
(1876,1476,2)
(1153,1736,2)
(1669,303,2)
(1290,1752,2)
(215,879,2)
(643,1736,2)
(850,2065,2)
(1903,1259,2)
(1904,2076,2)
(1237,1736,2)
(2122,619,2)
(834,545,2)
(1953,879,2)
(409,2138,2)
(1806,639,2)
(332,1830,2)
(325,1736,2)
(2009,1736,2)
(2126,730,2)
(2073,137,2)
(1363,1736,2)
(1572,665,2)
(1030,879,2)
(1109,879,2)
(936,1381,2)
(824,736,2)
(416,879,2)
(155,801,2)
(2153,1947,2)
(52,1595,2)
(845,1381,2)
(465,1059,2)
(2042,994,2)
(1952,1381,2)
(240,730,2)
(834,1175,2)
(1867,879,2)
(724,421,2)
(979,395,2)
(2080,2048,2)
(191,2102,2)
(80,1067,2)
(882,74,2)
(237,1736,2)
(1065,1597,2)
(1216,879,2)
(834,1067,2)
(1474,431,2)
(1818,152,2)
(969,714,2)
(882,773,2)
(2065,1381,2)
(1132,1626,2)
(1257,1381,2)
(1419,410,2)
(257,1381,2)
(1765,1751,2)
(1373,2111,2)
(144,994,2)
(1170,2021,2)
(109,609,2)
(2068,799,2)
(1801,1381,2)
(1685,1477,2)
(366,996,2)
(2024,1381,2)
(622,1296,2)
(938,1736,2)
(1819,1947,2)
(804,1381,2)
(1713,1736,2)
(287,321,2)
(766,1532,2)
(1800,136,2)
(1289,74,2)
(555,530,2)
(665,1626,2)
(1694,431,2)
(1044,1595,2)
(1019,2059,2)
(824,772,2)
(1321,754,2)
(1896,1707,2)
(69,2032,2)
(96,1626,2)
(969,74,2)
(946,1067,2)
(1237,2008,2)
(1455,1494,2)
(1065,994,2)
(1984,665,2)
(1771,401,2)
(982,639,2)
(96,1757,2)
(572,136,2)
(1175,1830,2)
(249,155,2)
(1311,1736,2)
(144,1311,2)
(148,1795,2)
(1041,1017,2)
(941,581,2)
(1818,285,2)
(2073,1463,2)
(772,275,2)
(2155,915,2)
(679,991,2)
(2006,1736,2)
(1703,1830,2)
(527,2017,2)
(1289,1363,2)
(55,639,2)
(849,53,2)
(436,1244,2)
(1404,1017,2)
(1124,1626,2)
(755,1494,2)
(492,879,2)
(1256,2073,2)
(667,155,2)
(1308,1061,2)
(1799,879,2)
(1725,1736,2)
(477,1319,2)
(548,1736,2)
(477,2029,2)
(834,897,2)
(1710,901,2)
(1600,879,2)
(2107,212,2)
(1595,1684,2)
(1058,1626,2)
(345,799,2)
(766,2101,2)
(1669,1026,2)
(690,2032,2)
(459,1736,2)
(951,901,2)
(1651,756,2)
(1369,1381,2)
(482,1494,2)
(1710,1232,2)
(341,963,2)
(882,1503,2)
(1821,433,2)
(1619,303,2)
(501,1689,2)
(280,1477,2)
(374,1736,2)
(68,1212,2)
(779,1265,2)
(516,2002,2)
(586,2032,2)
(2039,155,2)
(1832,2170,2)
(1120,1360,2)
(1595,1304,2)
(1183,1434,2)
(218,1205,2)
(1809,1455,2)
(704,1626,2)
(903,994,2)
(1645,1108,2)
(190,879,2)
(824,366,2)
(1166,799,2)
(2032,2029,2)
(381,179,2)
(427,1956,2)
(1159,1736,2)
(38,2021,2)
(1610,155,2)
(761,1307,2)
(324,1736,2)
(615,421,2)
(1405,1059,2)
(96,210,2)
(331,561,2)
(1309,879,2)
(1078,639,2)
(1296,2041,2)
(780,1667,2)
(1945,1026,2)
(1455,360,2)
(697,1422,2)
(951,850,2)
(1999,1940,2)
(1274,2041,2)
(1179,994,2)
(1069,1580,2)
(688,794,2)
(598,1243,2)
(685,832,2)
(834,1043,2)
(2131,1066,2)
(1991,136,2)
(1269,1626,2)
(1972,2096,2)
(1818,1987,2)
(541,765,2)
(477,2002,2)
(1939,879,2)
(1179,1192,2)
(1839,994,2)
(2073,1422,2)
(1410,366,2)
(1129,1736,2)
(1745,1067,2)
(1453,1736,2)
(1167,639,2)
(1018,1205,2)
(993,2059,2)
(867,1017,2)
(1304,426,2)
(1089,2138,2)
(1056,1055,2)
(1890,714,2)
(1710,1106,2)
(885,1736,2)
(834,1503,2)
(1912,1689,2)
(393,1701,2)
(897,1784,2)
(1003,872,2)
(289,155,2)
(679,1205,2)
(1380,1381,2)
(2138,879,2)
(1232,1404,2)
(1003,879,2)
(2073,559,2)
(203,2032,2)
(1445,509,2)
(67,1674,2)
(2133,1736,2)
(102,879,2)
(397,1476,2)
(545,1950,2)
(794,1344,2)
(1818,1463,2)
(1130,155,2)
(957,136,2)
(1710,366,2)
(1839,136,2)
(1903,1296,2)
(2093,705,2)
(1057,1861,2)
(97,2111,2)
(2058,994,2)
(665,1957,2)
(119,275,2)
(1165,316,2)
(176,1381,2)
(1076,155,2)
(384,1757,2)
(1310,1381,2)
(1710,1296,2)
(153,1108,2)
(650,433,2)
(1397,1626,2)
(1710,1527,2)
(1290,1108,2)
(1647,867,2)
(506,69,2)
(1516,1940,2)
(1061,1032,2)
(205,431,2)
(1940,730,2)
(1106,2155,2)
(2140,2167,2)
(477,545,2)
(1894,1736,2)
(2052,270,2)
(1594,1684,2)
(134,2041,2)
(786,1997,2)
(339,210,2)
(1214,2034,2)
(611,1894,2)
(1287,1243,2)
(1818,360,2)
(2076,1429,2)
(1829,665,2)
(910,321,2)
(1360,2032,2)
(598,2076,2)
(850,1381,2)
(1420,910,2)
(1294,1381,2)
(1992,879,2)
(54,142,2)
(824,2113,2)
(1879,53,2)
(1866,11,2)
(1980,639,2)
(767,1736,2)
(1387,1108,2)
(1990,172,2)
(1183,1592,2)
(1810,1947,2)
(178,1059,2)
(148,1175,2)
(1404,136,2)
(1254,1243,2)
(1638,850,2)
(834,360,2)
(2017,153,2)
(834,1259,2)
(850,676,2)
(582,1315,2)
(1669,1751,2)
(142,879,2)
(2079,1757,2)
(817,1947,2)
(1903,1795,2)
(1573,1720,2)
(204,639,2)
(974,584,2)
(120,136,2)
(110,872,2)
(381,11,2)
(1647,1232,2)
(511,321,2)
(1938,1381,2)
(106,1874,2)
(579,1238,2)
(1062,1736,2)
(969,1363,2)
(109,879,2)
(252,1381,2)
(490,393,2)
(1629,2058,2)
(1800,879,2)
(1581,155,2)
(1217,1746,2)
(2073,1061,2)
(772,572,2)
(1205,1056,2)
(285,1939,2)
(1040,1265,2)
(477,1280,2)
(912,1307,2)
(1433,1017,2)
(1881,431,2)
(2047,979,2)
(1607,798,2)
(477,707,2)
(872,152,2)
(862,510,2)
(1710,1280,2)
(231,879,2)
(959,75,2)
(148,822,2)
(851,431,2)
(148,707,2)
(2051,1736,2)
(148,705,2)
(172,879,2)
(984,676,2)
(187,796,2)
(462,1381,2)
(2073,1595,2)
(344,1707,2)
(2040,799,2)
(1492,1385,2)
(315,1742,2)
(891,2041,2)
(2053,1360,2)
(646,796,2)
(1658,431,2)
(410,115,2)
(362,1175,2)
(2113,1600,2)
(824,867,2)
(1020,1300,2)
(581,857,2)
(134,136,2)
(1903,48,2)
(174,1557,2)
(141,879,2)
(946,1212,2)
(14,1381,2)
(1710,867,2)
(922,1736,2)
(713,1830,2)
(1710,1363,2)
(321,1315,2)
(1991,879,2)
(2054,1067,2)
(779,879,2)
(1710,676,2)
(1823,1372,2)
(121,1026,2)
(1765,1795,2)
(2073,366,2)
(2042,1512,2)
(1982,1059,2)
(477,581,2)
(304,1736,2)
(1203,586,2)
(474,136,2)
(834,1930,2)
(1903,1565,2)
(623,584,2)
(1222,2076,2)
(143,1642,2)
(1366,2021,2)
(364,799,2)
(1669,714,2)
(384,1626,2)
(834,714,2)
(1469,1736,2)
(121,74,2)
(148,137,2)
(107,1795,2)
(1112,1067,2)
(1592,584,2)
(222,1736,2)
(317,1381,2)
(1483,1455,2)
(681,1600,2)
(477,688,2)
(1669,850,2)
(1038,1877,2)
(969,773,2)
(1765,1736,2)
(951,2008,2)
(1132,1248,2)
(121,901,2)
(1244,1473,2)
(1755,754,2)
(1765,74,2)
(596,1055,2)
(1439,53,2)
(1091,879,2)
(321,879,2)
(679,155,2)
(2150,2041,2)
(1739,530,2)
(856,1477,2)
(1880,754,2)
(1193,1307,2)
(477,1363,2)
(1124,1757,2)
(1280,120,2)
(1608,1307,2)
(148,1751,2)
(851,639,2)
(1651,335,2)
(669,1307,2)
(2021,1757,2)
(148,688,2)
(2023,1736,2)
(235,1489,2)
(1537,705,2)
(630,1736,2)
(1376,1381,2)
(2012,1600,2)
(1106,2102,2)
(1239,1736,2)
(1484,1530,2)
(1040,559,2)
(1133,850,2)
(546,1736,2)
(1352,584,2)
(477,1026,2)
(1826,1032,2)
(743,1497,2)
(1235,799,2)
(148,1757,2)
(882,1319,2)
(164,2006,2)
(1495,1728,2)
(871,155,2)
(370,784,2)
(1660,1736,2)
(1237,1363,2)
(1818,1886,2)
(2057,1736,2)
(1754,132,2)
(408,897,2)
(1145,1503,2)
(1373,879,2)
(1266,1532,2)
(51,1626,2)
(785,1056,2)
(2058,132,2)
(1767,799,2)
(2155,2102,2)
(824,1663,2)
(293,1315,2)
(372,1307,2)
(2126,1243,2)
(212,879,2)
(1875,1595,2)
(85,879,2)
(1077,431,2)
(1291,2102,2)
(1326,431,2)
(1813,1243,2)
(73,879,2)
(834,1422,2)
(1729,11,2)
(616,1728,2)
(148,1026,2)
(1156,1736,2)
(1630,1736,2)
(1038,799,2)
(1903,1930,2)
(308,676,2)
(154,879,2)
(9,1243,2)
(824,620,2)
(1935,1736,2)
(1130,337,2)
(953,1732,2)
(477,1061,2)
(522,1736,2)
(834,2029,2)
(1571,850,2)
(477,1527,2)
(1796,1527,2)
(578,775,2)
(2073,1930,2)
(1818,2017,2)
(1818,1380,2)
(940,1736,2)
(883,1232,2)
(1830,879,2)
(2006,853,2)
(824,1629,2)
(973,1477,2)
(850,308,2)
(1743,1629,2)
(705,995,2)
(1334,1243,2)
(1066,1626,2)
(1621,1489,2)
(577,1213,2)
(1224,879,2)
(662,1243,2)
(1839,11,2)
(1991,994,2)
(1832,1381,2)
(2081,850,2)
(1546,1736,2)
(1987,893,2)
(824,360,2)
(1580,1629,2)
(713,879,2)
(2124,2076,2)
(1382,1947,2)
(1903,1689,2)
(799,431,2)
(1071,879,2)
(530,275,2)
(622,2041,2)
(714,506,2)
(1674,879,2)
(477,2065,2)
(1504,1736,2)
(1400,1912,2)
(1180,775,2)
(890,1736,2)
(1207,1830,2)
(2073,840,2)
(1055,218,2)
(1196,1265,2)
(148,1067,2)
(1922,1307,2)
(937,1066,2)
(258,1532,2)
(613,1381,2)
(834,705,2)
(247,1757,2)
(886,1736,2)
(1959,1626,2)
(84,1381,2)
(471,2059,2)
(2041,1871,2)
(945,1325,2)
(507,1452,2)
(1710,772,2)
(433,421,2)
(2100,822,2)
(1030,1736,2)
(1103,1026,2)
(638,840,2)
(878,1736,2)
(598,730,2)
(834,559,2)
(477,435,2)
(803,1736,2)
(834,285,2)
(1751,1736,2)
(1870,155,2)
(148,48,2)
(1110,1736,2)
(1164,1736,2)
(2126,2076,2)
(572,2045,2)
(1818,1319,2)
(8,1736,2)
(2073,772,2)
(477,772,2)
(401,1600,2)
(1065,202,2)
(506,1691,2)
(1135,879,2)
(1972,1381,2)
(1254,1091,2)
(1227,879,2)
(1134,1692,2)
(1710,559,2)
(1406,431,2)
(398,360,2)
(2073,1067,2)
(740,879,2)
(477,1106,2)
(2021,1626,2)
(568,1108,2)
(824,1259,2)
(1814,1736,2)
(1667,879,2)
(834,2008,2)
(824,285,2)
(1933,2048,2)
(1701,879,2)
(275,1043,2)
(1300,1307,2)
(893,75,2)
(1710,619,2)
(1154,1736,2)
(688,775,2)
(1721,204,2)
(969,2029,2)
(550,1429,2)
(1903,1987,2)
(1120,69,2)
(1527,1029,2)
(404,879,2)
(1092,1663,2)
(1501,1108,2)
(618,1193,2)
(796,2021,2)
(229,1494,2)
(1286,1736,2)
(488,1381,2)
(7,204,2)
(2051,251,2)
(468,1813,2)
(2047,1205,2)
(1621,598,2)
(2103,1455,2)
(638,676,2)
(2032,850,2)
(1708,2111,2)
(1289,773,2)
(1237,879,2)
(855,1956,2)
(1903,933,2)
(824,48,2)
(390,1736,2)
(2113,2129,2)
(1182,639,2)
(651,1304,2)
(148,285,2)
(1732,1265,2)
(1651,1183,2)
(948,1017,2)
(50,2041,2)
(404,1239,2)
(2073,1728,2)
(426,1684,2)
(1089,2041,2)
(1621,1783,2)
(1818,1296,2)
(285,872,2)
(1434,879,2)
(951,1026,2)
(429,155,2)
(1670,682,2)
(1830,435,2)
(682,879,2)
(1741,581,2)
(1243,2076,2)
(189,431,2)
(1248,454,2)
(1949,1736,2)
(1790,1707,2)
(834,1238,2)
(1400,1059,2)
(1948,1108,2)
(1684,421,2)
(1187,879,2)
(683,1595,2)
(742,1307,2)
(1216,1626,2)
(1061,1573,2)
(1903,705,2)
(2026,1947,2)
(878,879,2)
(2073,1238,2)
(2061,11,2)
(1399,1595,2)
(386,454,2)
(1344,431,2)
(603,431,2)
(1599,619,2)
(260,1106,2)
(272,2073,2)
(741,1757,2)
(839,1381,2)
(612,401,2)
(386,1248,2)
(604,321,2)
(942,639,2)
(1858,1360,2)
(88,639,2)
(1637,639,2)
(497,155,2)
(969,850,2)
(369,1600,2)
(1289,2133,2)
(1939,136,2)
(1184,998,2)
(1908,1497,2)
(230,1476,2)
(1710,1259,2)
(1365,1060,2)
(1669,1527,2)
(2096,850,2)
(1877,799,2)
(1232,1017,2)
(882,1238,2)
(1710,179,2)
(459,1785,2)
(1120,1630,2)
(939,1727,2)
(1861,1757,2)
(1784,1073,2)
(824,1216,2)
(1070,2048,2)
(951,1319,2)
(1736,1968,2)
(882,1736,2)
(305,2065,2)
(1265,1280,2)
(1736,2032,2)
(663,655,2)
(1237,1319,2)
(1888,639,2)
(2011,1736,2)
(1309,1736,2)
(1056,155,2)
(1261,136,2)
(965,705,2)
(114,1899,2)
(813,1684,2)
(1179,136,2)
(946,1187,2)
(1739,1525,2)
(1388,1381,2)
(224,1830,2)
(141,2100,2)
(719,1684,2)
(1165,857,2)
(1274,2138,2)
(1425,2111,2)
(779,994,2)
(969,303,2)
(1684,1813,2)
(2155,994,2)
(1092,1060,2)
(490,1213,2)
(1818,1043,2)
(834,1751,2)
(824,1026,2)
(401,707,2)
(726,619,2)
(2029,1736,2)
(1635,1381,2)
(830,1736,2)
(1009,155,2)
(1833,914,2)
(951,773,2)
(1382,136,2)
(1428,1689,2)
(166,1736,2)
(1477,879,2)
(1183,1095,2)
(1710,581,2)
(460,270,2)
(2021,710,2)
(2133,474,2)
(2007,1055,2)
(740,1746,2)
(469,1626,2)
(276,1736,2)
(971,705,2)
(1498,1736,2)
(1447,799,2)
(74,1736,2)
(394,1736,2)
(194,337,2)
(11,897,2)
(1225,155,2)
(2048,872,2)
(1384,1032,2)
(629,53,2)
(1187,1067,2)
(1480,1463,2)
(2151,1736,2)
(957,2048,2)
(680,1595,2)
(1071,1940,2)
(573,1736,2)
(687,1381,2)
(624,366,2)
(1548,1642,2)
(2071,1381,2)
(693,1227,2)
(1234,44,2)
(383,754,2)
(906,1381,2)
(622,2138,2)
(2059,1800,2)
(572,879,2)
(148,179,2)
(561,879,2)
(1181,2096,2)
(1886,2069,2)
(923,1736,2)
(1901,1736,2)
(1935,2107,2)
(1289,1238,2)
(477,1912,2)
(1799,136,2)
(416,97,2)
(1838,275,2)
(1928,1381,2)
(1669,1238,2)
(655,933,2)
(1565,1684,2)
(148,1463,2)
(1404,994,2)
(2073,1106,2)
(486,879,2)
(1453,1213,2)
(1928,1150,2)
(810,1707,2)
(480,1017,2)
(429,1075,2)
(1107,1381,2)
(1018,639,2)
(1995,135,2)
(197,1363,2)
(148,2002,2)
(2162,1479,2)
(1060,879,2)
(377,1757,2)
(1058,1757,2)
(1275,1333,2)
(2014,1736,2)
(108,1736,2)
(470,155,2)
(753,1463,2)
(886,136,2)
(645,1455,2)
(1486,584,2)
(593,1381,2)
(1949,69,2)
(251,1736,2)
(1109,87,2)
(1664,872,2)
(586,1330,2)
(120,1326,2)
(1533,1381,2)
(270,879,2)
(520,275,2)
(356,1580,2)
(968,754,2)
(529,11,2)
(967,155,2)
(969,1319,2)
(834,1527,2)
(1329,1381,2)
(101,1947,2)
(850,1732,2)
(1762,879,2)
(148,1527,2)
(665,1132,2)
(1019,321,2)
(477,1067,2)
(3,1807,2)
(682,1243,2)
(1818,897,2)
(60,1736,2)
(1311,1935,2)
(336,2113,2)
(1903,897,2)
(824,1422,2)
(797,2111,2)
(554,1532,2)
(268,1626,2)
(1368,914,2)
(1277,1363,2)
(932,1988,2)
(1643,879,2)
(834,366,2)
(1710,152,2)
(1765,1527,2)
(1844,53,2)
(949,1736,2)
(524,1736,2)
(477,2059,2)
(1430,1381,2)
(456,111,2)
(1997,655,2)
(1609,2041,2)
(472,1381,2)
(1600,1663,2)
(1271,1381,2)
(272,640,2)
(307,643,2)
(1714,639,2)
(1903,1595,2)
(1708,1684,2)
(790,1381,2)
(429,218,2)
(98,799,2)
(1765,1503,2)
(1739,879,2)
(1151,1057,2)
(995,994,2)
(2076,233,2)
(1710,1642,2)
(363,1304,2)
(1597,1689,2)
(1762,136,2)
(1903,763,2)
(1747,1089,2)
(148,1728,2)
(477,366,2)
(316,431,2)
(2073,619,2)
(1171,688,2)
(701,639,2)
(496,994,2)
(1452,879,2)
(1903,1629,2)
(1087,822,2)
(657,275,2)
(1173,321,2)
(860,1134,2)
(1818,1363,2)
(1923,97,2)
(412,1017,2)
(846,1381,2)
(1710,285,2)
(1710,1663,2)
(1146,97,2)
(995,370,2)
(1651,824,2)
(1415,1947,2)
(715,879,2)
(834,688,2)
(639,1595,2)
(415,2102,2)
(840,1381,2)
(2141,799,2)
(1229,136,2)
(48,1947,2)
(1950,136,2)
(1621,796,2)
(1040,2065,2)
(400,1736,2)
(1568,499,2)
(1765,1363,2)
(148,2065,2)
(824,619,2)
(1315,879,2)
(869,1477,2)
(1862,106,2)
(158,1059,2)
(1237,773,2)
(921,1736,2)
(1415,215,2)
(197,74,2)
(1818,1930,2)
(243,879,2)
(824,707,2)
(1185,2096,2)
(154,1595,2)
(1763,2032,2)
(2032,2133,2)
(284,433,2)
(1022,270,2)
(1555,1243,2)
(1756,879,2)
(1143,1017,2)
(308,1380,2)
(219,1108,2)
(173,1309,2)
(1219,1736,2)
(1740,1736,2)
(121,1319,2)
(2121,1381,2)
(1347,879,2)
(953,509,2)
(824,1319,2)
(1710,897,2)
(904,2021,2)
(1565,1304,2)
(1852,1381,2)
(644,75,2)
(916,1749,2)
(1518,1212,2)
(781,155,2)
(1043,1463,2)
(1720,431,2)
(2004,2100,2)
(516,1987,2)
(549,1532,2)
(1746,1642,2)
(2000,2008,2)
(1743,132,2)
(114,799,2)
(2073,994,2)
(148,433,2)
(1682,1307,2)
(620,584,2)
(786,994,2)
(1762,994,2)
(552,773,2)
(148,1503,2)
(236,705,2)
(631,1830,2)
(1261,994,2)
(1273,1940,2)
(1647,1557,2)
(12,1381,2)
(638,2065,2)
(1027,1736,2)
(1005,1059,2)
(1018,979,2)
(758,1736,2)
(1874,879,2)
(1691,1236,2)
(266,1238,2)
(434,155,2)
(1947,366,2)
(618,1370,2)
(1818,1642,2)
(824,2065,2)
(689,1586,2)
(824,1795,2)
(784,879,2)
(834,822,2)
(587,1381,2)
(40,584,2)
(97,1304,2)
(109,1207,2)
(1237,714,2)
(1326,1580,2)
(717,11,2)
(209,2102,2)
(1473,1364,2)
(1598,69,2)
(1699,378,2)
(1710,1380,2)
(227,639,2)
(536,1736,2)
(678,1642,2)
(1427,1736,2)
(951,714,2)
(1572,187,2)
(1210,1108,2)
(583,879,2)
(313,1830,2)
(1636,881,2)
(808,1307,2)
(1834,454,2)
(1903,1026,2)
(60,1164,2)
(58,1795,2)
(440,360,2)
(1409,1684,2)
(1826,879,2)
(477,840,2)
(1445,840,2)
(1315,1032,2)
(108,758,2)
(1856,1736,2)
(433,994,2)
(1563,431,2)
(368,872,2)
(2027,1831,2)
(1035,705,2)
(1307,2111,2)
(145,1497,2)
(1615,1280,2)
(996,879,2)
(1598,994,2)
(456,1736,2)
(1248,836,2)
(684,1232,2)
(1903,581,2)
(1557,879,2)
(1903,773,2)
(477,714,2)
(1252,155,2)
(1244,718,2)
(849,431,2)
(1478,879,2)
(469,879,2)
(1624,1315,2)
(1100,321,2)
(1239,431,2)
(179,1839,2)
(1710,2029,2)
(671,1707,2)
(957,1694,2)
(477,822,2)
(1088,1381,2)
(477,1728,2)
(2073,1280,2)
(337,639,2)
(34,1381,2)
(2073,2133,2)
(1904,1243,2)
(1739,994,2)
(652,1381,2)
(638,1380,2)
(1710,74,2)
(1903,179,2)
(1955,1307,2)
(54,1089,2)
(432,1381,2)
(972,775,2)
(328,1497,2)
(1907,136,2)
(1939,872,2)
(1217,2063,2)
(121,1751,2)
(1289,1527,2)
(1898,2113,2)
(735,2138,2)
(53,684,2)
(834,1296,2)
(1719,315,2)
(824,935,2)
(983,879,2)
(2158,1007,2)
(684,879,2)
(2070,1736,2)
(1105,1497,2)
(632,421,2)
(661,850,2)
(685,1307,2)
(599,401,2)
(1957,1757,2)
(1484,2111,2)
(1385,431,2)
(1131,2076,2)
(513,2021,2)
(1850,2113,2)
(2161,2102,2)
(2058,1873,2)
(969,1026,2)
(172,53,2)
(951,728,2)
(888,1736,2)
(721,1903,2)
(1871,879,2)
(2091,639,2)
(1072,639,2)
(1757,1699,2)
(1440,1736,2)
(270,754,2)
(114,2141,2)
(1372,155,2)
(197,1422,2)
(1907,879,2)
(824,1009,2)
(834,1463,2)
(148,1595,2)
(1549,879,2)
(1799,971,2)
(589,879,2)
(308,2065,2)
(602,2076,2)
(455,1067,2)
(1538,96,2)
(1930,2048,2)
(1802,1830,2)
(1766,378,2)
(190,1383,2)
(148,933,2)
(1149,879,2)
(2011,297,2)
(1907,60,2)
(32,1017,2)
(1109,994,2)
(2073,1663,2)
(882,303,2)
(1651,145,2)
(1063,366,2)
(989,730,2)
(12,994,2)
(1406,1736,2)
(1489,38,2)
(958,1626,2)
(952,454,2)
(1327,1689,2)
(1360,689,2)
(1045,2032,2)
(121,1363,2)
(296,1736,2)
(882,1795,2)
(218,155,2)
(1710,433,2)
(741,1626,2)
(1660,431,2)
(186,1736,2)
(1634,1568,2)
(1108,879,2)
(591,1749,2)
(1710,48,2)
(2073,435,2)
(301,707,2)
(892,799,2)
(1894,216,2)
(2032,1026,2)
(299,11,2)
(794,775,2)
(824,676,2)
(824,179,2)
(1862,395,2)
(2158,1021,2)
(477,1503,2)
(1840,2091,2)
(2102,879,2)
(1953,1580,2)
(1494,879,2)
(1862,1514,2)
(1959,1757,2)
(1306,2048,2)
(453,879,2)
(1037,775,2)
(121,2029,2)
(1753,684,2)
(1710,1043,2)
(935,155,2)
(2046,2102,2)
(50,431,2)
(1710,2002,2)
(1026,1736,2)
(1060,1059,2)
(314,1682,2)
(617,2047,2)
(1133,879,2)
(871,879,2)
(39,1736,2)
(2032,1736,2)
(743,1940,2)
(1238,1120,2)
(1818,1629,2)
(1179,879,2)
(2047,167,2)
(638,1265,2)
(773,1598,2)
(200,1736,2)
(824,545,2)
(1977,754,2)
(1781,1736,2)
(868,2076,2)
(477,1296,2)
(2032,951,2)
(1138,879,2)
(170,879,2)
(1404,259,2)
(1668,1736,2)
(129,611,2)
(618,1307,2)
(1818,867,2)
(1370,314,2)
(1807,1248,2)
(926,1751,2)
(910,879,2)
(1181,1381,2)
(1501,2017,2)
(900,61,2)
(1341,2002,2)
(404,136,2)
(261,1736,2)
(1012,1381,2)
(134,50,2)
(1100,1173,2)
(824,897,2)
(310,2102,2)
(1877,864,2)
(1503,1907,2)
(2044,401,2)
(1148,1455,2)
(1304,1684,2)
(834,1663,2)
(1857,204,2)
(1241,1746,2)
(1811,2041,2)
(1264,433,2)
(1001,1381,2)
(901,404,2)
(617,780,2)
(110,431,2)
(183,1736,2)
(775,879,2)
(886,1360,2)
(802,1307,2)
(762,1600,2)
(1544,1736,2)
(1988,1024,2)
(2,1736,2)
(2048,879,2)
(1183,1347,2)
(1978,1381,2)
(1046,639,2)
(504,879,2)
(1050,584,2)
(148,1232,2)
(340,1381,2)
(866,994,2)
(308,1381,2)
(575,509,2)
(1281,1243,2)
(620,879,2)
(193,1736,2)
(1431,2009,2)
(1259,754,2)
(64,994,2)
(132,1707,2)
(1511,1707,2)
(1669,773,2)
(612,431,2)
(1323,97,2)
(754,11,2)
(723,1736,2)
(29,775,2)
(834,867,2)
(148,1629,2)
(1377,337,2)
(477,2008,2)
(519,639,2)
(148,1106,2)
(1961,96,2)
(1559,194,2)
(996,1089,2)
(2032,74,2)
(109,994,2)
(1437,1017,2)
(1949,136,2)
(148,2133,2)
(1183,1038,2)
(684,1557,2)
(1477,775,2)
(2032,773,2)
(292,1757,2)
(2067,867,2)
(824,137,2)
(649,1381,2)
(1201,2113,2)
(1749,155,2)
(244,879,2)
(87,1359,2)
(1884,639,2)
(1349,1089,2)
(672,1565,2)
(187,25,2)
(857,2002,2)
(1519,1497,2)
(327,431,2)
(2018,799,2)
(1949,1360,2)
(218,979,2)
(1091,1243,2)
(1382,633,2)
(1308,1032,2)
(477,619,2)
(678,655,2)
(1502,879,2)
(170,994,2)
(441,799,2)
(171,1736,2)
(900,1108,2)
(105,136,2)
(583,799,2)
(716,1429,2)
(2117,1381,2)
(901,1736,2)
(1470,587,2)
(882,901,2)
(710,19,2)
(1964,636,2)
(1493,1626,2)
(1392,421,2)
(104,270,2)
(986,1148,2)
(404,1736,2)
(1818,1061,2)
(1417,1626,2)
(585,1736,2)
(834,2059,2)
(1570,2111,2)
(1389,1319,2)
(1023,1373,2)
(148,1259,2)
(1024,879,2)
(57,850,2)
(2159,155,2)
(1903,1280,2)
(1425,64,2)
(1818,1595,2)
(1943,1381,2)
(1342,530,2)
(181,676,2)
(1085,427,2)
(801,639,2)
(976,206,2)
(1903,822,2)
(893,1179,2)
(1856,1603,2)
(1529,53,2)
(2169,1315,2)
(1395,1600,2)
(1183,1419,2)
(1407,1736,2)
(320,1381,2)
(333,1736,2)
(197,1795,2)
(1588,1736,2)
(232,1580,2)
(1404,668,2)
(1302,431,2)
(2067,1557,2)
(509,850,2)
(1466,155,2)
(726,1549,2)
(824,901,2)
(1157,96,2)
(1414,1736,2)
(896,1736,2)
(1116,1494,2)
(1902,53,2)
(931,421,2)
(1289,901,2)
(124,1381,2)
(721,763,2)
(1672,1315,2)
(918,665,2)
(1512,431,2)
(1029,296,2)
(1639,1151,2)
(1762,849,2)
(834,1061,2)
(1903,1232,2)
(2008,1736,2)
(758,1213,2)
(477,1689,2)
(411,401,2)
(886,994,2)
(402,639,2)
(61,879,2)
(1927,155,2)
(1532,879,2)
(504,1621,2)
(148,581,2)
(1029,994,2)
(1621,1067,2)
(1148,431,2)
(457,1707,2)
(461,1736,2)
(2091,1652,2)
(1338,1381,2)
(1696,1580,2)
(1903,1912,2)
(872,879,2)
(1818,933,2)
(57,2096,2)
(764,1823,2)
(148,2059,2)
(969,1795,2)
(386,1861,2)
(335,1053,2)
(1454,1813,2)
(306,799,2)
(1818,1663,2)
(1209,1736,2)
(894,1732,2)
(638,1381,2)
(1140,584,2)
(1379,1736,2)
(709,857,2)
(1903,2008,2)
(1473,799,2)
(1907,69,2)
(834,773,2)
(1565,235,2)
(751,136,2)
(2124,1243,2)
(148,1987,2)
(640,1595,2)
(903,69,2)
(780,155,2)
(882,1363,2)
(533,1032,2)
(1614,1728,2)
(2073,1026,2)
(2073,2029,2)
(308,509,2)
(1670,1243,2)
(834,1595,2)
(1710,714,2)
(1702,530,2)
(572,275,2)
(1623,1477,2)
(1451,1307,2)
(584,2076,2)
(1779,879,2)
(1992,2010,2)
(834,1795,2)
(474,994,2)
(951,303,2)
(1797,584,2)
(1903,1175,2)
(1263,1381,2)
(596,155,2)
(1448,799,2)
(2132,1736,2)
(1710,1987,2)
(129,1736,2)
(1903,840,2)
(504,1565,2)
(824,435,2)
(2079,1626,2)
(1370,1307,2)
(121,1795,2)
(1710,1422,2)
(1732,676,2)
(439,321,2)
(477,48,2)
(829,1986,2)
(1791,754,2)
(748,822,2)
(1040,1381,2)
(1559,155,2)
(1861,1626,2)
(863,1381,2)
(1818,559,2)
(646,1757,2)
(2074,879,2)
(738,1633,2)
(1669,1237,2)
(1074,1736,2)
(864,1817,2)
(148,1280,2)
(2073,2059,2)
(1591,1736,2)
(584,1243,2)
(1458,1017,2)
(1381,509,2)
(860,1381,2)
(1728,1532,2)
(2073,1043,2)
(1983,53,2)
(113,1381,2)
(1382,879,2)
(1424,1017,2)
(244,1736,2)
(1649,1580,2)
(498,1248,2)
(143,655,2)
(342,799,2)
(148,1380,2)
(1268,360,2)
(2007,1823,2)
(1828,1595,2)
(951,1363,2)
(331,639,2)
(59,155,2)
(1697,426,2)
(1936,1061,2)
(477,773,2)
(1011,433,2)
(148,74,2)
(1889,822,2)
(1481,1043,2)
(1741,857,2)
(1671,867,2)
(2073,707,2)
(621,2032,2)
(284,453,2)
(1903,688,2)
(1503,1736,2)
(1016,1381,2)
(834,707,2)
(811,530,2)
(239,1736,2)
(834,2065,2)
(553,421,2)
(1665,1736,2)
(1818,619,2)
(919,1580,2)
(1016,100,2)
(1419,799,2)
(419,1059,2)
(1474,1736,2)
(1013,2021,2)
(1837,707,2)
(1634,639,2)
(435,1746,2)
(1868,155,2)
(937,1757,2)
(1903,772,2)
(206,364,2)
(1479,879,2)
(453,433,2)
(600,1736,2)
(1261,879,2)
(996,1033,2)
(1179,75,2)
(148,773,2)
(1808,530,2)
(1102,1736,2)
(448,401,2)
(731,1304,2)
(721,1565,2)
(1018,1865,2)
(3,1151,2)
(1494,2017,2)
(882,2133,2)
(1165,136,2)
(1059,303,2)
(1007,469,2)
(97,431,2)
(1956,639,2)
(1471,772,2)
(1028,2102,2)
(569,337,2)
(1261,113,2)
(999,1626,2)
(2073,1629,2)
(360,1109,2)
(1930,957,2)
(1737,1746,2)
(1461,2113,2)
(1295,1032,2)
(190,994,2)
(149,584,2)
(2073,545,2)
(834,97,2)
(1881,1017,2)
(2073,179,2)
(271,1381,2)
(2073,1795,2)
(850,559,2)
(1199,1304,2)
(397,914,2)
(1516,879,2)
(646,1489,2)
(1818,179,2)
(1818,97,2)
(822,1067,2)
(340,2096,2)
(1907,1474,2)
(63,1736,2)
(1733,799,2)
(284,1212,2)
(477,1757,2)
(202,1689,2)
(105,2113,2)
(494,1108,2)
(27,1947,2)
(1748,822,2)
(1991,401,2)
(1603,1736,2)
(1445,559,2)
(1324,11,2)
(1757,1626,2)
(235,1684,2)
(1524,584,2)
(824,1642,2)
(1903,1238,2)
(177,1736,2)
(1077,1060,2)
(148,676,2)
(2032,1319,2)
(684,867,2)
(26,1463,2)
(1903,2113,2)
(2078,1736,2)
(1717,2111,2)
(1429,1516,2)
(2121,2096,2)
(337,136,2)
(1748,353,2)
(634,1736,2)
(1573,1032,2)
(2008,144,2)
(190,136,2)
(824,1527,2)
(121,1527,2)
(1793,155,2)
(945,1450,2)
(259,1017,2)
(1289,850,2)
(1057,1248,2)
(1964,1381,2)
(477,1595,2)
(233,964,2)
(1694,2048,2)
(2073,152,2)
(762,431,2)
(1903,152,2)
(1111,1684,2)
(431,1813,2)
(1818,714,2)
(1547,754,2)
(1283,1736,2)
(1669,2133,2)
(1089,1296,2)
(181,1265,2)
(2138,857,2)
(1869,1580,2)
(2002,53,2)
(1457,1736,2)
(351,1455,2)
(1020,1307,2)
(1183,620,2)
(134,879,2)
(1762,53,2)
(1190,879,2)
(1824,1943,2)
(729,639,2)
(1259,751,2)
(109,1830,2)
(2036,2076,2)
(619,665,2)
(799,639,2)
(1746,879,2)
(339,96,2)
(2011,69,2)
(1946,2008,2)
(1569,639,2)
(655,879,2)
(1818,1026,2)
(1939,392,2)
(619,1757,2)
(1555,1222,2)
(703,1494,2)
(995,1060,2)
(2111,97,2)
(651,2111,2)
(1099,1381,2)
(1200,1736,2)
(2042,879,2)
(1986,331,2)
(720,401,2)
(566,872,2)
(1991,594,2)
(571,97,2)
(953,2065,2)
(399,2100,2)
(1666,431,2)
(2073,136,2)
(64,136,2)
(148,1689,2)
(410,1817,2)
(945,845,2)
(86,132,2)
(1818,1106,2)
(1903,1751,2)
(1034,1790,2)
(106,639,2)
(216,1736,2)
(1721,7,2)
(2089,1736,2)
(834,2017,2)
(158,879,2)
(611,1213,2)
(779,1302,2)
(1669,1422,2)
(185,152,2)
(181,1381,2)
(850,1265,2)
(1710,1757,2)
(9,730,2)
(785,155,2)
(1746,655,2)
(275,401,2)
(477,2133,2)
(1234,1988,2)
(674,2113,2)
(1160,639,2)
(881,2032,2)
(1568,431,2)
(824,559,2)
(2147,1381,2)
(2034,879,2)
(473,1213,2)
(642,421,2)
(1765,773,2)
(428,53,2)
(777,584,2)
(496,136,2)
(1758,1381,2)
(2143,401,2)
(824,1061,2)
(834,1380,2)
(2039,289,2)
(1812,1497,2)
(1874,639,2)
(1136,1736,2)
(1237,1795,2)
(1094,1580,2)
(2073,897,2)
(1383,431,2)
(990,74,2)
(19,1757,2)
(28,1017,2)
(1818,1422,2)
(1730,1381,2)
(498,1861,2)
(402,543,2)
(2073,1987,2)
(633,431,2)
(1680,435,2)
(1029,136,2)
(1831,879,2)
(1013,66,2)
(1330,2032,2)
(852,1315,2)
(1203,2032,2)
(1238,1736,2)
(1818,2065,2)
(1654,593,2)
(477,933,2)
(215,1947,2)
(746,714,2)
(477,1422,2)
(1969,773,2)
(864,1368,2)
(467,1381,2)
(834,619,2)
(1531,1060,2)
(1233,1736,2)
(654,1381,2)
(1748,1212,2)
(2073,2065,2)
(1675,1060,2)
(1670,1555,2)
(426,879,2)
(19,1626,2)
(824,840,2)
(1236,1736,2)
(477,897,2)
(1517,639,2)
(477,1663,2)
(323,1280,2)
(264,1736,2)
(1805,2021,2)
(338,2021,2)
(798,1223,2)
(834,1642,2)
(848,639,2)
(701,799,2)
(1023,2111,2)
(2161,1106,2)
(1040,509,2)
(751,1815,2)
(137,530,2)
(1294,2096,2)
(834,433,2)
(1378,872,2)
(134,994,2)
(1640,1736,2)
(518,754,2)
(577,8,2)
(1237,1422,2)
(2025,1151,2)
(913,426,2)
(1120,994,2)
(705,1060,2)
(699,2032,2)
(1280,1580,2)
(1715,1947,2)
(2073,360,2)
(1830,1746,2)
(1726,1736,2)
(1289,1751,2)
(824,1592,2)
(1818,1280,2)
(539,965,2)
(1710,1026,2)
(1907,994,2)
(1661,1947,2)
(204,858,2)
(897,1477,2)
(1800,1515,2)
(2069,1034,2)
(2053,69,2)
(2063,740,2)
(625,850,2)
(1369,1972,2)
(2032,303,2)
(1278,1736,2)
(2115,1381,2)
(1176,1477,2)
(775,137,2)
(235,1304,2)
(1682,1530,2)
(148,1642,2)
(834,1319,2)
(148,1663,2)
(2053,1406,2)
(1818,581,2)
(1289,1736,2)
(1185,2167,2)
(477,1886,2)
(2011,1360,2)
(1990,53,2)
(404,614,2)
(1335,1736,2)
(914,639,2)
(824,1232,2)
(120,1580,2)
(1121,1595,2)
(824,1728,2)
(312,1757,2)
(1886,1707,2)
(1459,1089,2)
(1672,545,2)
(12,136,2)
(1718,426,2)
(465,1912,2)
(2069,165,2)
(658,1381,2)
(1377,155,2)
(1706,619,2)
(278,1736,2)
(824,933,2)
(158,1275,2)
(2149,1823,2)
(302,1867,2)
(1017,174,2)
(503,850,2)
(834,74,2)
(1635,431,2)
(886,69,2)
(487,1736,2)
(1490,2096,2)
(1128,1381,2)
(1851,1736,2)
(67,1947,2)
(886,603,2)
(353,822,2)
(2073,48,2)
(1719,879,2)
(2015,1736,2)
(1903,867,2)
(477,1463,2)
(824,97,2)
(2117,431,2)
(1067,52,2)
(121,2133,2)
(1631,879,2)
(1678,1736,2)
(1265,879,2)
(235,598,2)
(1710,545,2)
(824,974,2)
(123,155,2)
(1240,1089,2)
(594,2168,2)
(1272,1947,2)
(1292,1736,2)
(89,2100,2)
(1107,1413,2)
(880,1595,2)
(2075,799,2)
(410,799,2)
(1710,2017,2)
(1586,2032,2)
(876,1473,2)
(1237,2133,2)
(1446,2032,2)
(187,1489,2)
(857,1987,2)
(917,730,2)
(1818,688,2)
(1693,1736,2)
(1709,2032,2)
(2045,1756,2)
(435,190,2)
(2013,2133,2)
(1774,1032,2)
(652,1885,2)
(1223,1381,2)
(1350,730,2)
(971,431,2)
(1949,2119,2)
(1863,581,2)
(1765,1422,2)
(1333,879,2)
(8,1631,2)
(1367,1254,2)
(198,1736,2)
(637,1736,2)
(1555,2076,2)
(477,360,2)
(1183,974,2)
(1998,155,2)
(1014,1629,2)
(492,639,2)
(540,2041,2)
(9,2076,2)
(843,155,2)
(451,2100,2)
(1865,639,2)
(298,1067,2)
(1356,2041,2)
(367,431,2)
(425,1455,2)
(295,1757,2)
(477,1380,2)
(1929,2021,2)
(427,799,2)
(1632,1736,2)
(297,1736,2)
(1074,878,2)
(1692,2096,2)
(986,1455,2)
(1362,2100,2)
(1988,799,2)
(1690,901,2)
(2088,1497,2)
(1563,530,2)
(824,581,2)
(197,714,2)
(1749,871,2)
(1598,1736,2)
(1669,2008,2)
(1710,360,2)
(656,1689,2)
(2073,1296,2)
(52,154,2)
(1827,1736,2)
(751,383,2)
(1794,1429,2)
(955,1381,2)
(474,879,2)
(1190,1580,2)
(1795,1736,2)
(378,2131,2)
(1940,23,2)
(248,1381,2)
(834,1912,2)
(1073,1477,2)
(2058,136,2)
(1214,1757,2)
(1695,1595,2)
(35,1259,2)
(682,2076,2)
(1843,545,2)
(823,1455,2)
(572,367,2)
(148,772,2)
(903,1736,2)
(824,2029,2)
(1689,158,2)
(1739,136,2)
(1631,1736,2)
(105,994,2)
(1313,1595,2)
(148,2113,2)
(2074,1736,2)
(1813,730,2)
(1900,1363,2)
(477,1259,2)
(1818,2133,2)
(2087,1830,2)
(1119,639,2)
(858,639,2)
(1095,1307,2)
(498,879,2)
(303,1813,2)
(1903,2059,2)
(1237,850,2)
(1015,1307,2)
(824,714,2)
(327,1477,2)
(987,2032,2)
(1949,879,2)
(1229,2092,2)
(1347,584,2)
(1973,1988,2)
(1775,1940,2)
(2118,53,2)
(641,1746,2)
(1432,155,2)
(1597,30,2)
(1811,139,2)
(1752,879,2)
(824,1175,2)
(1336,1736,2)
(1903,1527,2)
(1293,775,2)
(1346,1600,2)
(405,2100,2)
(128,584,2)
(1007,1626,2)
(614,1736,2)
(1598,456,2)
(1676,1381,2)
(199,705,2)
(78,879,2)
(1710,137,2)
(1722,1381,2)
(1626,433,2)
(1822,53,2)
(1543,655,2)
(1049,1381,2)
(1314,619,2)
(2055,897,2)
(535,1243,2)
(2053,136,2)
(404,1360,2)
(1811,879,2)
(1700,2076,2)
(1213,850,2)
(2034,1757,2)
(158,750,2)
(1903,2065,2)
(1409,2111,2)
(477,1751,2)
(866,1595,2)
(510,1381,2)
(2149,2007,2)
(545,1315,2)
(882,2029,2)
(1004,1992,2)
(1818,366,2)
(75,1990,2)
(2030,1130,2)
(518,879,2)
(1813,2076,2)
(778,97,2)
(165,1707,2)
(491,1319,2)
(951,1669,2)
(2067,1232,2)
(2034,1626,2)
(953,559,2)
(1519,328,2)
(834,1280,2)
(824,2133,2)
(1822,879,2)
(326,1500,2)
(1122,1455,2)
(1854,1315,2)
(1818,773,2)
(1947,1089,2)
(1416,1108,2)
(1043,2042,2)
(1214,1626,2)
(1903,1728,2)
(1710,1751,2)
(799,799,2)
(882,2008,2)
(788,1600,2)
(1518,1243,2)
(1062,879,2)
(668,28,2)
(1534,1381,2)
(423,155,2)
(296,431,2)
(17,1707,2)
(265,321,2)
(1542,1060,2)
(2029,2074,2)
(824,1912,2)
(1799,994,2)
(696,1736,2)
(1237,303,2)
(135,879,2)
(1441,1746,2)
(799,1552,2)
(13,454,2)
(951,2029,2)
(1237,74,2)
(2129,1600,2)
(421,994,2)
(1935,1213,2)
(2073,2008,2)
(477,285,2)
(111,1213,2)
(736,879,2)
(1840,639,2)
(824,952,2)
(257,879,2)
(1815,518,2)
(1893,1643,2)
(148,1238,2)
(1033,1089,2)
(509,1574,2)
(443,584,2)
(986,879,2)
(414,639,2)
(1358,1817,2)
(1040,676,2)
(866,136,2)
(951,1736,2)
(2038,1265,2)
(2032,1527,2)
(1842,1017,2)
(894,850,2)
(1004,2010,2)
(1180,608,2)
(1765,1319,2)
(2065,1229,2)
(1358,639,2)
(1029,1360,2)
(2094,584,2)
(117,1060,2)
(2129,994,2)
(153,219,2)
(179,11,2)
(610,1930,2)
(506,879,2)
(1573,994,2)
(82,2032,2)
(1178,1736,2)
(1034,1707,2)
(61,1108,2)
(813,2111,2)
(1325,1381,2)
(886,129,2)
(378,1626,2)
(451,1138,2)
(1120,1660,2)
(1687,2021,2)
(963,1213,2)
(1253,1947,2)
(477,676,2)
(133,1381,2)
(148,901,2)
(1818,435,2)
(2050,1477,2)
(2123,1381,2)
(1818,2002,2)
(1751,1858,2)
(1710,1061,2)
(652,1487,2)
(1812,1940,2)
(1219,164,2)
(824,773,2)
(824,1419,2)
(2047,780,2)
(1742,879,2)
(1820,684,2)
(1065,136,2)
(1818,74,2)
(1221,1381,2)
(882,1751,2)
(1237,2029,2)
(763,1243,2)
(1811,1609,2)
(2073,1363,2)
(1987,75,2)
(903,1658,2)
(1068,1736,2)
(800,75,2)
(1658,1736,2)
(2074,136,2)
(397,180,2)
(118,1017,2)
(850,840,2)
(1172,1032,2)
(1710,1689,2)
(1735,1736,2)
(951,1795,2)
(605,2023,2)
(1363,1949,2)
(495,840,2)
(824,1886,2)
(996,54,2)
(120,879,2)
(824,1106,2)
(1250,584,2)
(1932,1381,2)
(1642,655,2)
(1098,1736,2)
(1183,339,2)
(1164,1213,2)
(1237,901,2)
(496,879,2)
(155,639,2)
(295,1626,2)
(771,1736,2)
(1552,639,2)
(202,431,2)
(2032,1795,2)
(1382,67,2)
(75,53,2)
(2060,378,2)
(1831,1940,2)
(181,559,2)
(1300,685,2)
(257,248,2)
(814,2096,2)
(20,1307,2)
(1710,1463,2)
(1163,1032,2)
(953,1381,2)
(834,1689,2)
(601,75,2)
(1236,1213,2)
(233,1429,2)
(1237,1751,2)
(1526,1663,2)
(769,155,2)
(1777,799,2)
(153,136,2)
(792,1626,2)
(1654,1381,2)
(1500,1736,2)
(1450,1381,2)
(751,879,2)
(1605,799,2)
(1971,433,2)
(814,1381,2)
(957,1911,2)
(72,705,2)
(732,75,2)
(1818,705,2)
(477,433,2)
(2073,1527,2)
(1532,1106,2)
(1669,1319,2)
(627,2032,2)
(1254,2076,2)
(395,639,2)
(365,879,2)
(48,1382,2)
(1839,529,2)
(1859,1020,2)
(2159,569,2)
(805,639,2)
(1450,2096,2)
(2128,508,2)
(139,2041,2)
(1710,933,2)
(638,509,2)
(857,879,2)
(781,801,2)
(1835,1736,2)
(1141,1108,2)
(564,321,2)
(1289,714,2)
(1417,1757,2)
(714,1736,2)
(1480,365,2)
(1227,655,2)
(834,1026,2)
(270,1259,2)
(2101,1532,2)
(197,1736,2)
(506,136,2)
(584,589,2)
(841,1736,2)
(477,1642,2)
(1893,1736,2)
(739,2111,2)
(1348,1736,2)
(31,1381,2)
(93,1381,2)
(1525,530,2)
(706,2041,2)
(1490,1381,2)
(120,994,2)
(611,1736,2)
(235,796,2)
(157,655,2)
(1603,1375,2)
(1147,1736,2)
(477,1629,2)
(1104,1381,2)
(78,1017,2)
(1242,639,2)
(1669,1363,2)
(458,2032,2)
(1556,2032,2)
(834,2113,2)
(2061,431,2)
(1472,879,2)
(1818,1238,2)
(1223,2096,2)
(1565,2111,2)
(66,431,2)
(1132,1861,2)
(2146,1265,2)
(2157,421,2)
(1244,2141,2)
(1411,1381,2)
(1084,2102,2)
(1521,1381,2)
(933,986,2)
(1818,1503,2)
(190,1746,2)
(547,1557,2)
(1929,450,2)
(1085,799,2)
(2073,97,2)
(358,1463,2)
(251,879,2)
(484,270,2)
(929,1380,2)
(71,772,2)
(698,1089,2)
(175,1689,2)
(165,431,2)
(1270,2113,2)
(1423,1017,2)
(315,1017,2)
(2101,879,2)
(1205,155,2)
(2069,879,2)
(23,879,2)
(1800,321,2)
(1824,1381,2)
(824,1296,2)
(752,1757,2)
(192,1381,2)
(1648,137,2)
(1399,1212,2)
(954,1736,2)
(1359,879,2)
(1304,507,2)
(1898,431,2)
(316,857,2)
(763,730,2)
(1903,1886,2)
(263,1017,2)
(347,1736,2)
(113,431,2)
(1213,303,2)
(968,1259,2)
(836,386,2)
(16,1032,2)
(833,1377,2)
(569,155,2)
(1642,786,2)
(1993,780,2)
(823,933,2)
(1633,1381,2)
(1179,800,2)
(1837,1600,2)
(1268,1494,2)
(1435,1381,2)
(2035,1626,2)
(2063,1746,2)
(584,1254,2)
(2032,1238,2)
(2160,1736,2)
(148,1061,2)
(420,1381,2)
(1362,983,2)
(170,459,2)
(1397,1757,2)
(1382,994,2)
(1903,1663,2)
(1228,2100,2)
(969,901,2)
(12,879,2)
(824,1714,2)
(52,879,2)
(2073,433,2)
(53,1820,2)
(121,1238,2)
(437,1067,2)
(2049,1053,2)
(1507,1497,2)
(1381,2096,2)
(1710,1595,2)
(825,1736,2)
(2125,1613,2)
(1710,2065,2)
(1669,1736,2)
(857,684,2)
(1569,155,2)
(892,1166,2)
(1109,136,2)
(1719,1704,2)
(1903,2017,2)
(834,933,2)
(1784,1477,2)
(1816,1089,2)
(873,879,2)
(1478,2076,2)
(1421,2100,2)
(485,639,2)
(221,2021,2)
(275,879,2)
(1368,639,2)
(2120,799,2)
(140,64,2)
(281,137,2)
(969,2133,2)
(957,994,2)
(983,2100,2)
(1574,879,2)
(1342,879,2)
(1237,1503,2)
(1344,775,2)
(1229,994,2)
(1912,1065,2)
(784,1060,2)
(1165,879,2)
(1644,1595,2)
(2074,237,2)
(365,1463,2)
(824,339,2)
(1135,639,2)
(41,1580,2)
(37,2048,2)
(560,1736,2)
(702,1381,2)
(120,1696,2)
(211,530,2)
(943,1736,2)
(824,1595,2)
(986,136,2)
(1175,109,2)
(42,1381,2)
(763,2076,2)
(2168,879,2)
(477,705,2)
(1249,179,2)
(148,435,2)
(2091,395,2)
(2053,994,2)
(127,879,2)
(1513,584,2)
(945,1381,2)
(1361,705,2)
(1776,546,2)
(1696,1190,2)
(2032,714,2)
(12,1104,2)
(786,879,2)
(148,619,2)
(1288,401,2)
(392,872,2)
(1903,366,2)
(12,2117,2)
(36,155,2)
(1192,75,2)
(1699,1766,2)
(2073,933,2)
(1817,799,2)
(567,1736,2)
(477,2113,2)
(834,1886,2)
(187,665,2)
(1941,1886,2)
(882,714,2)
(1710,2133,2)
(1132,1757,2)
(674,1679,2)
(448,1043,2)
(824,1238,2)
(1711,639,2)
(754,179,2)
(1407,431,2)
(2142,1746,2)
(1237,1238,2)
(1183,952,2)
(1186,857,2)
(357,1626,2)
(538,11,2)
(273,799,2)
(1002,1940,2)
(1985,1381,2)
(1995,584,2)
(144,1736,2)
(969,1751,2)
(404,994,2)
(730,1053,2)
(2170,814,2)
(1134,1381,2)
(11,879,2)
(834,2133,2)
(2043,1304,2)
(505,1497,2)
(1795,2011,2)
(490,2032,2)
(136,2076,2)
(2138,581,2)
(1036,1296,2)
(247,1626,2)
(603,1736,2)
(508,1817,2)
(925,1307,2)
(1629,132,2)
(1849,1930,2)
(1858,326,2)
(882,1026,2)
(2155,191,2)
(1183,1216,2)
(197,901,2)
(2011,136,2)
(360,1494,2)
(2073,705,2)
(1573,879,2)
(1934,1030,2)
(710,1626,2)
(1137,1307,2)
(454,1757,2)
(1183,1009,2)
(770,2100,2)
(1669,901,2)
(765,693,2)
(2032,1503,2)
(1913,1736,2)
(1603,1213,2)
(2152,435,2)
(679,979,2)
(586,1213,2)
(1842,879,2)
(2042,136,2)
(1858,69,2)
(629,879,2)
(1679,879,2)
(1961,243,2)
(1462,1736,2)
(1006,1736,2)
(1492,994,2)
(1575,11,2)
(279,2167,2)
(1449,1381,2)
(1195,1175,2)
(902,97,2)
(428,1822,2)
(1059,879,2)
(1956,136,2)
(750,431,2)
(1600,1060,2)
(120,438,2)
(956,2096,2)
(1907,1736,2)
(148,714,2)
(719,1304,2)
(1853,2032,2)
(619,1626,2)
(1226,1494,2)
(1574,1185,2)
(1183,935,2)
(2073,2002,2)
(1659,1381,2)
(1885,1381,2)
(302,1736,2)
(1782,1017,2)
(1253,48,2)
(694,1381,2)
(1598,1640,2)
(1460,2100,2)
(1818,901,2)
(68,416,2)
(1402,1736,2)
(137,1739,2)
(995,1077,2)
(2141,864,2)
(1714,1833,2)
(148,1363,2)
(87,1494,2)
(170,136,2)
(446,1381,2)
(341,1736,2)
(496,1381,2)
(152,270,2)
(1391,1265,2)
(1970,639,2)
(686,1736,2)
(1287,730,2)
(473,1546,2)
(1139,1746,2)
(832,1530,2)
(903,879,2)
(1752,1108,2)
(964,241,2)
(836,576,2)
(832,1307,2)
(992,270,2)
(1708,1304,2)
(1941,1707,2)
(1183,822,2)
(794,994,2)
(136,730,2)
(185,270,2)
(153,900,2)
(1824,879,2)
(1917,684,2)
(477,867,2)
(1369,462,2)
(1710,840,2)
(1566,840,2)
(757,901,2)
(834,435,2)
(1785,1736,2)
(1750,1947,2)
(173,1736,2)
(1965,1032,2)
(853,879,2)
(1849,2048,2)
(824,822,2)
(235,2111,2)
(486,1243,2)
(2124,730,2)
(1289,1503,2)
(775,530,2)
(2092,1294,2)
(205,1532,2)
(1183,1840,2)
(1785,1213,2)
(1193,879,2)
(2132,1893,2)
(834,840,2)
(783,2021,2)
(2011,994,2)
(751,994,2)
(1818,772,2)
(1083,559,2)
(546,879,2)
(1583,1381,2)
(1723,639,2)
(850,1380,2)
(966,1746,2)
(824,1380,2)
(442,1381,2)
(1089,879,2)
(121,1213,2)
(834,179,2)
(1021,1626,2)
(253,155,2)
(665,1757,2)
(788,879,2)
(2073,2017,2)
(1915,132,2)
(532,1017,2)
(2080,1930,2)
(549,766,2)
(1040,1380,2)
(148,867,2)
(1516,1497,2)
(809,2048,2)
(105,1898,2)
(1237,1527,2)
(884,1736,2)
(1369,879,2)
(197,2029,2)
(1386,431,2)
(477,152,2)
(722,1736,2)
(1151,619,2)
(643,1213,2)
(833,155,2)
(1119,879,2)
(528,1746,2)
(312,1626,2)
(477,1987,2)
(800,959,2)
(1595,1565,2)
(1466,337,2)
(662,2076,2)
(153,879,2)
(2073,1259,2)
(747,655,2)
(738,1381,2)
(951,1238,2)
(2131,1626,2)
(1667,155,2)
(1470,1381,2)
(1586,1853,2)
(853,1736,2)
(1710,2113,2)
(726,1212,2)
(751,754,2)
(1719,994,2)
(154,1066,2)
(818,2041,2)
(281,530,2)
(840,12,2)
(915,2102,2)
(1073,1472,2)
(95,1736,2)
(1815,754,2)
(1785,605,2)
(259,431,2)
(2032,1213,2)
(1669,1795,2)
(2020,879,2)
(1818,545,2)
(422,1463,2)
(234,1017,2)
(1865,1888,2)
(478,1956,2)
(1545,1940,2)
(1903,545,2)
(574,1503,2)
(1903,97,2)
(1742,1017,2)
(502,1053,2)
(749,799,2)
(359,1707,2)
(83,1494,2)
(2158,1626,2)
(608,775,2)
(945,879,2)
(1818,707,2)
(148,559,2)
(1168,11,2)
(241,879,2)
(403,1552,2)
(1601,53,2)
(148,2017,2)
(1553,788,2)
(1065,1689,2)
(182,1059,2)
(779,136,2)
(301,1600,2)
(882,1527,2)
(1350,2076,2)
(482,431,2)
(614,2132,2)
(1032,879,2)
(1350,1243,2)
(2073,1912,2)
(1052,155,2)
(421,2032,2)
(1838,772,2)
(589,1254,2)
(1444,1736,2)
(824,1280,2)
(2001,1017,2)
(1276,2021,2)
(1500,1213,2)
(824,1987,2)
(1687,1929,2)
(2163,1532,2)
(217,872,2)
(170,1360,2)
(15,53,2)
(188,509,2)
(1710,1795,2)
(1115,1254,2)
(557,1381,2)
(2073,867,2)
(197,850,2)
(450,2021,2)
(373,1736,2)
(2164,75,2)
(572,994,2)
(1643,1736,2)
(523,2041,2)
(1302,1265,2)
(237,431,2)
(402,1119,2)
(1505,285,2)
(1871,2138,2)
(142,1089,2)
(1279,799,2)
(158,136,2)
(477,1043,2)
(648,1381,2)
(786,655,2)
(1258,850,2)
(1404,288,2)
(1039,1580,2)
(367,275,2)
(496,1386,2)
(707,105,2)
(2092,150,2)
(969,1238,2)
(311,799,2)
(976,273,2)
(1222,1243,2)
(151,1381,2)
(156,1903,2)
(1903,433,2)
(643,1934,2)
(2107,1736,2)
(1374,1736,2)
(1727,799,2)
(530,879,2)
(1183,736,2)
(69,1203,2)
(1712,75,2)
(14,246,2)
(1183,73,2)
(197,1319,2)
(77,1600,2)
(1903,2002,2)
(744,639,2)
(951,74,2)
(2162,270,2)
(388,1067,2)
(824,1043,2)
(1445,1380,2)
(474,307,2)
(872,270,2)
(366,1089,2)
(824,1689,2)
(164,1736,2)
(834,2002,2)
(914,1565,2)
(1768,1736,2)
(593,2096,2)
(886,879,2)
(1029,1219,2)
(1385,270,2)
(308,559,2)
(1243,1478,2)
(1903,619,2)
(1528,1736,2)
(1509,1381,2)
(243,96,2)
(483,2133,2)
(1820,879,2)
(559,1261,2)
(1472,1477,2)
(1317,155,2)
(65,421,2)
(1032,1532,2)
(1315,1061,2)
(1646,639,2)
(136,1243,2)
(951,1422,2)
(1303,1595,2)
(824,2017,2)
(855,799,2)
(1162,321,2)
(1799,539,2)
(2085,454,2)
(1120,136,2)
(1807,1151,2)
(2058,879,2)
(2167,57,2)
(289,2159,2)
(1020,2020,2)
(1858,1736,2)
(1393,1429,2)
(45,1595,2)
(974,879,2)
(1382,1415,2)
(1096,584,2)
(148,1319,2)
(100,1257,2)
(320,1470,2)
(1839,879,2)
(2128,1727,2)
(1710,773,2)
(144,879,2)
(126,1315,2)
(7,1888,2)
(148,366,2)
(553,431,2)
(965,879,2)
(1492,270,2)
(1289,1319,2)
(1903,137,2)
(907,857,2)
(563,1381,2)
(2102,2048,2)
(1986,1841,2)
(639,1313,2)
(768,1463,2)
(1715,48,2)
(1776,1736,2)
(1283,244,2)
(1756,275,2)
(1149,2032,2)
(708,1746,2)
(752,1626,2)
(588,2032,2)
(2073,285,2)
(1476,1135,2)
(155,155,2)
(1489,2021,2)
(1475,584,2)
(1247,1381,2)
(551,1736,2)
(88,492,2)
(865,1017,2)
(1359,1494,2)
(132,879,2)
(138,799,2)
(1396,2167,2)
(813,1304,2)
(1017,1557,2)
(1681,1381,2)
(262,53,2)
(1079,106,2)
(1184,1626,2)
(506,1736,2)
(956,1381,2)
(915,715,2)
(1120,879,2)
(2073,676,2)
(1606,1736,2)
(1917,2002,2)
(1739,1563,2)
(132,1886,2)
(633,1947,2)
(2020,1307,2)
(2053,879,2)
(2074,994,2)
(828,97,2)
(2081,303,2)
(2155,136,2)
(609,431,2)
(1495,1532,2)
(1014,132,2)
(1282,2032,2)
(1957,1626,2)
(1762,15,2)
(1704,78,2)
(862,1381,2)
(1442,1746,2)
(969,1503,2)
(1607,1381,2)
(824,688,2)
(1867,1736,2)
(1215,1381,2)
(2053,1736,2)
(197,1238,2)
(308,840,2)
(1412,331,2)
(1960,53,2)
(2073,714,2)
(438,1580,2)
(798,1381,2)
(1422,886,2)
(1199,2111,2)
(1818,1912,2)
(121,714,2)
(581,1165,2)
(1183,1714,2)
(219,431,2)
(707,2113,2)
(529,717,2)
(1173,1420,2)
(1892,2032,2)
(1026,170,2)
(277,822,2)
(2074,69,2)
(1973,1234,2)
(1021,1184,2)
(19,879,2)
(1040,840,2)
(1452,426,2)
(121,1503,2)
(1963,303,2)
(1818,48,2)
(314,1307,2)
(1949,994,2)
(1071,1497,2)
(824,1840,2)
(824,2002,2)
(348,1059,2)
(1784,136,2)
(1574,2167,2)
(10,155,2)
(827,639,2)
(1573,136,2)
(148,1422,2)
(403,799,2)
(2073,1380,2)
(1589,1089,2)
(745,1707,2)
(1719,136,2)
(410,1368,2)
(1818,1175,2)
(1818,1527,2)
(1434,1626,2)
(834,48,2)
(297,473,2)
(2168,401,2)
(1413,1381,2)
(1053,1202,2)
(1580,132,2)
(386,879,2)
(758,302,2)
(1669,2029,2)
(1196,676,2)
(1710,705,2)
(1790,879,2)
(1698,152,2)
(148,545,2)
(1765,2133,2)
(213,75,2)
(1191,1663,2)
(1289,1795,2)
(2119,1736,2)
(549,994,2)
(1954,1532,2)
(1539,799,2)
(1980,799,2)
(97,1530,2)
(300,1381,2)
(392,1003,2)
(1807,1861,2)
(1784,994,2)
(1968,490,2)
(1284,275,2)
(1987,53,2)
(1818,1728,2)
(1843,1315,2)
(232,1280,2)
(121,1736,2)
(1938,70,2)
(951,2133,2)
(240,1243,2)
(404,69,2)
(736,1307,2)
(842,639,2)
(148,152,2)
(1557,321,2)
(2112,1736,2)
(824,73,2)
(1057,879,2)
(1903,1422,2)
(1275,1059,2)
(1710,2008,2)
(824,1434,2)
(2041,2138,2)
(2099,53,2)
(2009,879,2)
(1773,1629,2)
(1557,2059,2)
(1858,136,2)
(1372,879,2)
(1155,1381,2)
(438,1953,2)
(1572,498,2)
(2131,879,2)
(1398,2100,2)
(66,2021,2)
(105,879,2)
(756,1243,2)
(1426,799,2)
(531,401,2)
(2073,640,2)
(387,1736,2)
(148,2008,2)
(834,581,2)
(1728,549,2)
(2155,879,2)
(1710,707,2)
(645,933,2)
(152,1492,2)
(834,1629,2)
(147,799,2)
(477,901,2)
(1445,1381,2)
(577,1736,2)
(964,1429,2)
(950,2032,2)
(504,1067,2)
(899,1626,2)
(192,2096,2)
(2073,1689,2)
(1818,137,2)
(1047,1580,2)
(566,285,2)
(1950,879,2)
(447,1455,2)
(161,75,2)
(1598,1360,2)
(1903,1043,2)
(1561,275,2)
(824,1363,2)
(2023,879,2)
(2129,136,2)
(1158,1746,2)
(1818,2029,2)
(1403,799,2)
(995,136,2)
(1818,2059,2)
(963,173,2)
(2027,1940,2)
(549,136,2)
(197,1751,2)
(1399,1695,2)
(824,433,2)
(2125,1749,2)
(343,106,2)
(1580,879,2)
(1000,1532,2)
(1966,1307,2)
(935,429,2)
(1067,1595,2)
(1899,799,2)
(969,1527,2)
(159,2032,2)
(1179,2164,2)
(2033,1987,2)
(836,454,2)
(1710,1886,2)
(514,53,2)
(1261,1381,2)
(2073,2113,2)
(1492,2162,2)
(1066,2158,2)
(824,1503,2)
(255,1061,2)
(1957,1066,2)
(1236,1283,2)
(992,152,2)
(1765,1026,2)
(1595,2111,2)
(1476,639,2)
(1666,1736,2)
(170,1736,2)
(1926,879,2)
(189,1736,2)
(1562,1494,2)
(148,97,2)
(1710,822,2)
(1903,676,2)
(759,75,2)
(953,840,2)
(477,97,2)
(73,584,2)
(489,1736,2)
(670,639,2)
(1823,155,2)
(613,1654,2)
(1515,431,2)
(401,879,2)
(675,1315,2)
(2170,1381,2)
(1193,1066,2)
(2042,1463,2)
(2073,1886,2)
(1903,360,2)
(542,2010,2)
(1903,1363,2)
(2148,872,2)
(477,2017,2)
(1903,707,2)
(2011,567,2)
(1252,639,2)
(1903,1380,2)
(1765,901,2)
(1121,879,2)
(1189,933,2)
(1792,799,2)
(421,136,2)
(794,879,2)
(508,859,2)
(1766,879,2)
(411,1043,2)
(1670,2076,2)
(858,879,2)
(1772,655,2)
(1903,714,2)
(2032,2008,2)
(1197,2029,2)
(144,1360,2)
(1807,879,2)
(538,179,2)
(2134,730,2)
(1673,619,2)
(2159,1895,2)
(834,1106,2)
(1710,688,2)
(824,1930,2)
(1910,97,2)
(969,1422,2)
(197,1026,2)
(1319,2053,2)
(1233,431,2)
(2073,822,2)
(782,655,2)
(873,1053,2)
(1413,2096,2)
(1192,431,2)
(2111,140,2)
(1641,2065,2)
(2074,1360,2)
(963,1736,2)
(477,1232,2)
(364,1956,2)
(1818,2113,2)
(1938,420,2)
(197,303,2)
(1727,583,2)
(148,2029,2)
(2084,2048,2)
(1818,1795,2)
(496,652,2)
(1650,1736,2)
(957,879,2)
(659,799,2)
(1438,1626,2)
(1191,1060,2)
(2129,1553,2)
(1818,1689,2)
(190,1158,2)
(74,903,2)
(1289,303,2)
(1502,75,2)
(1207,713,2)
(559,1381,2)
(2045,275,2)
(197,1527,2)
(148,897,2)
(1564,688,2)
(1285,655,2)
(1364,879,2)
(153,994,2)
(875,270,2)
(986,994,2)
(638,559,2)
(1903,435,2)
(2048,285,2)
(2073,1642,2)
(334,155,2)
(824,1757,2)
(1229,1635,2)
(1024,799,2)
(1858,994,2)
(243,1066,2)
(567,431,2)
(774,1940,2)
(1784,879,2)
(549,879,2)
(135,584,2)
(1463,1991,2)
(834,1363,2)
(2152,1746,2)
(2053,1856,2)
(2073,581,2)
(1947,879,2)
(208,1595,2)
(1009,679,2)
(1257,2096,2)
(474,1360,2)
(1679,2113,2)
(230,397,2)
(181,840,2)
(541,655,2)
(291,1736,2)
(144,69,2)
(794,1180,2)
(214,872,2)
(1818,822,2)
(561,639,2)
(1429,1940,2)
(824,1463,2)
(1120,1736,2)
(1169,1307,2)
(898,799,2)
(1340,2010,2)
(996,136,2)
(406,1595,2)
(1031,639,2)
(905,137,2)
(2073,1757,2)
(71,275,2)
(2144,48,2)
(2137,1736,2)
(1390,1381,2)
-----------------------------------
(0,tif_dataoff)
(1,if (TIFFFieldSet(tif,FIELD_COLORMAP)
(2,count)
(3,tif->tif_dataoff++)
(4,if (TIFFFieldSet(tif,FIELD_SUBFILETYPE)
(5,tag)
(6,case TIFF_SETGET_UINT16:)
(7,&nTmp)
(8,tif->tif_dir.td_customValues)
(9,NULL)
(10,o)
(11,TIFFFieldSet(tif,FIELD_THRESHHOLDING)
(12,TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)
(13,tif)
(14,assert(o->field_readcount==TIFF_VARIABLE)
(15,tif->tif_dir.td_stripoffset)
(16,dir)
(17,tif)
(18,)
(19,tif->tif_flags)
(20,tif)
(21,module)
(22,if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue)
(23,tif->tif_flags)
(24,if (tif->tif_flags&TIFF_SWAB)
(25,uint64)
(26,dir)
(27,tif)
(28,tif->tif_dir)
(29,td_compression)
(30,tif->tif_dir)
(31,field_tag)
(32,dir)
(33,)
(34,field_tag)
(35,goto bad;)
(36,o)
(37,dir)
(38,2+ndir*12+4)
(39,tif_dir)
(40,tif_rawdataoff)
(41,ndir)
(42,1)
(43,"Error flushing data before directory write")
(44,uint16*)
(45,NULL)
(46,TIFFTAG_EXTRASAMPLES)
(47,tif_rawdata)
(48,!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue)
(49,)
(50,&ndir)
(51,0)
(52,SeekOK(tif,tif->tif_diroff)
(53,!isTiled(tif)
(54,tif->tif_dir.td_sampleformat)
(55,TIFF_SWAB)
(56,while (1)
(57,o->field_bit)
(58,goto bad;)
(59,TIFF_SWAB)
(60,tif->tif_dir.td_customValues[m].value)
(61,tif->tif_dir)
(62,pb)
(63,value)
(64,nb=dir)
(65,NULL)
(66,ndir*12)
(67,tif->tif_dir.td_samplesperpixel)
(68,TIFFErrorExt(tif->tif_clientdata,module,\n\\n                                                 "Cannot find SubIFD tag")
(69,count = tif->tif_dir.td_customValues[m].count)
(70,uint32)
(71,tif)
(72,tif)
(73,tif->tif_rawdataoff)
(74,!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(75,tif->tif_dir.td_stripoffset != NULL)
(76,)
(77,tif)
(78,tif->tif_dir)
(79,td_nstrips)
(80,tif)
(81,if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
(82,tif_dir)
(83,dir)
(84,o)
(85,tif->tif_dir)
(86,dir)
(87,tif->tif_dir.td_imagedepth)
(88,&tif->tif_nextdiroff)
(89,TIFFCreateDirectory(tif)
(90,8)
(91,dir)
(92,case TIFF_BYTE:)
(93,field_tag)
(94,if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount)
(95,tif)
(96,pdiroff!=NULL)
(97,na == ndir)
(98,TIFF_SWAB)
(99,uint16)
(100,o->field_readcount==1)
(101,TIFFTAG_SMINSAMPLEVALUE)
(102,tif->tif_dir)
(103,if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning)
(104,dir)
(105,TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution)
(106,tif->tif_flags&TIFF_SWAB)
(107,break;)
(108,tif->tif_dir.td_customValues[m].value)
(109,TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning)
(110,&ndir)
(111,tif->tif_dir.td_customValues[m])
(112,nTmp)
(113,&ndir)
(114,_TIFFmemcpy(n,&o->tdir_count,8)
(115,uint16*)
(116,if (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION)
(117,TIFFTAG_TILEWIDTH)
(118,td_stripbytecount)
(119,tif_dir)
(120,TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames)
(121,m++)
(122,if (tif->tif_flags&TIFF_SWAB)
(123,n)
(124,pa)
(125,if (tif->tif_flags&TIFF_SWAB)
(126,&ndir)
(127,tif->tif_dir)
(128,tif->tif_rawdataoff = 0)
(129,tif->tif_dir.td_customValues[m].value)
(130,)
(131,)
(132,TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION)
(133,tif)
(134,TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb)
(135,tif->tif_rawdata)
(136,dir=NULL)
(137,!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample)
(138,m)
(139,&nb)
(140,nb->tdir_tag)
(141,TIFFFreeDirectory(tif)
(142,tif->tif_dir)
(143,FIELD_YCBCRSUBSAMPLING)
(144,TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(145,return (0)
(146,if (dirmem==NULL)
(147,tif)
(148,NULL)
(149,0)
(150,uint16)
(151,TIFF_VARIABLE)
(152,!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation)
(153,TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue)
(154,tif->tif_diroff)
(155,m<ndir)
(156,dirmem)
(157,dir)
(158,TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth)
(159,tif_dir)
(160,case TIFF_LONG:)
(161,tif_dir)
(162,goto bad;)
(163,if (!SeekOK(tif,tif->tif_diroff)
(164,tif->tif_dir.td_customValues[m])
(165,&ndir)
(166,count)
(167,uint16*)
(168,pb)
(169,)
(170,TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(171,tif)
(172,tif->tif_dir)
(173,tif->tif_dir.td_customValues)
(174,isTiled(tif)
(175,ndir)
(176,1)
(177,td_customValues)
(178,TIFFTAG_IMAGEWIDTH)
(179,!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding)
(180,uint64*)
(181,tif_nfields)
(182,tif)
(183,value)
(184,if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth)
(185,FIELD_SAMPLESPERPIXEL)
(186,tif_dir)
(187,(uint64)
(188,get_field_type)
(189,&ndir)
(190,TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0])
(191,&ndir)
(192,o->field_readcount)
(193,tag)
(194,o->tdir_offset)
(195,if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric)
(196,)
(197,tif)
(198,tif)
(199,td_tilelength)
(200,tif_dir)
(201,goto bad;)
(202,&ndir)
(203,tif_dir)
(204,tif->tif_flags&TIFF_SWAB)
(205,&ndir)
(206,&o->tdir_offset)
(207,if (!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(208,TIFF_BIGTIFF)
(209,tif)
(210,uint64* pdiroff)
(211,dir)
(212,tif->tif_dir)
(213,ndir)
(214,dir)
(215,tif->tif_dir)
(216,tif->tif_dir)
(217,tif)
(218,n+=2)
(219,&ndir)
(220,if (!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(221,dirsize)
(222,td_customValues)
(223,if (!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(224,tif_dir)
(225,)
(226,if ((tif->tif_dataoff<tif->tif_diroff)
(227,n)
(228,if (isimage)
(229,tif)
(230,TIFFSwabLong8((uint64*)
(231,tif->tif_dir)
(232,FIELD_SUBIFD)
(233,(tif->tif_flags & TIFF_BEENWRITING)
(234,td_nstrips)
(235,_TIFFmalloc(dirsize)
(236,goto bad;)
(237,&ndir)
(238,if (tif->tif_flags&TIFF_SWAB)
(239,tif)
(240,0)
(241,tif->tif_flags)
(242,tif_flags)
(243,tif->tif_diroff)
(244,tif->tif_dir)
(245,field_type)
(246,o->field_readcount==TIFF_VARIABLE)
(247,tif_flags)
(248,&p)
(249,tdir_count)
(250,case TIFF_SRATIONAL:)
(251,tif->tif_dir)
(252,pb)
(253,nTmp)
(254,)
(255,goto bad;)
(256,if (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE)
(257,TIFFGetField(tif,o->field_tag,&p)
(258,dir)
(259,&ndir)
(260,goto bad;)
(261,tif)
(262,TIFFTAG_TILEOFFSETS)
(263,tif_dir)
(264,count)
(265,2)
(266,break;)
(267,)
(268,tif)
(269,if (!isTiled(tif)
(270,TIFFFieldSet(tif,FIELD_ORIENTATION)
(271,field_type)
(272,_TIFFfree(dir)
(273,n+=8)
(274,if (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS)
(275,TIFFFieldSet(tif,FIELD_SUBFILETYPE)
(276,count)
(277,tif)
(278,tif_dir)
(279,field_bit)
(280,ndir)
(281,tif)
(282,tag)
(283,tif_rawdatasize)
(284,TIFFErrorExt(tif->tif_clientdata,module,"Out of memory")
(285,!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel)
(286,td_customValues)
(287,TIFFTAG_PAGENUMBER)
(288,tif->tif_dir.td_stripbytecount)
(289,nTmp = (uint32)
(290,)
(291,tif_dir)
(292,goto bad;)
(293,ndir)
(294,)
(295,tif_flags)
(296,&ndir)
(297,tif->tif_dir.td_customValues[m].value)
(298,dirmem)
(299,dir)
(300,o)
(301,tif)
(302,tif->tif_dir.td_customValues)
(303,isimage)
(304,ndir)
(305,goto bad;)
(306,tif_flags)
(307,tif->tif_dir.td_customValues[m].value)
(308,tif->tif_nfields)
(309,tif)
(310,dir)
(311,n)
(312,pdiroff)
(313,td_ycbcrpositioning)
(314,na*12+8)
(315,tif->tif_dir.td_nstrips)
(316,&ndir)
(317,TIFF_ASCII)
(318,tif)
(319,)
(320,assert(o->field_type==TIFF_SHORT)
(321,TIFFFieldSet(tif,FIELD_PAGENUMBER)
(322,)
(323,tif)
(324,ndir)
(325,0)
(326,tif->tif_dir.td_customValues[m].value)
(327,&ndir)
(328,tif->tif_clientdata)
(329,if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)
(330,if (dir!=NULL)
(331,tif->tif_flags&TIFF_SWAB)
(332,TIFFTAG_YCBCRPOSITIONING)
(333,tif)
(334,tif)
(335,return (1)
(336,dir)
(337,o=dir)
(338,2)
(339,*pdiroff)
(340,o->field_readcount)
(341,tif->tif_dir.td_customValues[m].value)
(342,n)
(343,n)
(344,ndir)
(345,8)
(346,ndir)
(347,tag)
(348,tif_dir)
(349,goto bad;)
(350,dir)
(351,dir)
(352,)
(353,tif->tif_clientdata)
(354,if (!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(355,if (tif->tif_dir.td_extrasamples)
(356,td_inknameslen)
(357,tif)
(358,goto bad;)
(359,dir)
(360,!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth)
(361,o)
(362,goto bad;)
(363,nb)
(364,o->tdir_offset)
(365,tif->tif_dir)
(366,!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat)
(367,&ndir)
(368,tif_dir)
(369,tif_dir)
(370,tif->tif_dir.td_tilewidth)
(371,)
(372,12)
(373,count)
(374,tag)
(375,if (!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir)
(376,module)
(377,tif_dataoff)
(378,tif->tif_diroff==0)
(379,nb)
(380,for (m=0; m<ndir; m++)
(381,tif)
(382,if ((tif->tif_diroff==0)
(383,&ndir)
(384,tif)
(385,)
(386,tif->tif_dataoff)
(387,value)
(388,tif)
(389,if (!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir)
(390,dir)
(391,)
(392,tif->tif_dir.td_samplesperpixel)
(393,tif->tif_dir.td_customValues)
(394,td_customValues)
(395,n=dirmem)
(396,if (!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(397,(uint64*)
(398,goto bad;)
(399,tif)
(400,m)
(401,TIFFFieldSet(tif,FIELD_POSITION)
(402,(uint32)
(403,m++)
(404,TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(405,~TIFF_DIRTYSTRIP)
(406,tif_flags)
(407,pa)
(408,tif)
(409,td_extrasamples)
(410,(uint16*)
(411,FIELD_SUBFILETYPE)
(412,tif)
(413,if (!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(414,8)
(415,ndir)
(416,tif->tif_clientdata)
(417,dirmem)
(418,)
(419,td_imagewidth)
(420,strlen(pb)
(421,dir!=NULL)
(422,tif_dir)
(423,TIFF_SWAB)
(424,~TIFF_DIRTYDIRECT)
(425,tif_dir)
(426,TIFFFieldSet(tif,FIELD_SUBIFD)
(427,o->tdir_type)
(428,tif->tif_dir.td_nstrips)
(429,(uint16*)
(430,TIFFTAG_TILEDEPTH)
(431,ndir=0)
(432,TIFF_SHORT)
(433,dir==NULL)
(434,n)
(435,!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0])
(436,TIFFSwabLong8((uint64*)
(437,goto bad;)
(438,tif->tif_dir.td_inknames)
(439,tif_dir)
(440,FIELD_TILEDEPTH)
(441,tif)
(442,break;)
(443,tif->tif_rawcc = 0)
(444,)
(445,count)
(446,o)
(447,tif)
(448,tif)
(449,case TIFF_DOUBLE:)
(450,ndir*20)
(451,tif->tif_flags &= ~TIFF_DIRTYDIRECT)
(452,)
(453,tif->tif_clientdata)
(454,!(tif->tif_flags&TIFF_BIGTIFF)
(455,dirsize)
(456,tif->tif_dir.td_customValues[m].value)
(457,FIELD_TRANSFERFUNCTION)
(458,td_customValues)
(459,tif->tif_dir.td_customValues[m].value)
(460,td_orientation)
(461,ndir)
(462,&pb)
(463,if (TIFFFieldSet(tif,FIELD_SUBIFD)
(464,tif_diroff)
(465,FIELD_TILEDIMENSIONS)
(466,if ((tif->tif_flags & TIFF_MYBUFFER)
(467,p)
(468,0)
(469,TIFFSeekFile(tif,0,SEEK_END)
(470,m)
(471,tif)
(472,assert(o->field_passcount==0)
(473,tif->tif_dir.td_customValues[m])
(474,TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(475,)
(476,if (!(tif->tif_flags&TIFF_BIGTIFF)
(477,0)
(478,o->tdir_count)
(479,break;)
(480,tif_dir)
(481,)
(482,&ndir)
(483,goto bad;)
(484,ndir)
(485,TIFF_SWAB)
(486,tif->tif_clientdata)
(487,tif)
(488,0)
(489,ndir)
(490,tif->tif_dir.td_customValues[m])
(491,break;)
(492,tif->tif_nextdiroff)
(493,tif)
(494,tif)
(495,break;)
(496,TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)
(497,tif)
(498,tif->tif_dataoff)
(499,uint16)
(500,n)
(501,tif_dir)
(502,1)
(503,field_bit)
(504,WriteOK(tif,dirmem,(tmsize_t)
(505,tif_clientdata)
(506,TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(507,tif->tif_subifdoff==0)
(508,(uint16*)
(509,(o->field_bit>=FIELD_CODEC)
(510,o->field_passcount)
(511,ndir)
(512,if( na == ndir )
(513,8)
(514,tif)
(515,field_passcount)
(516,tif)
(517,tif)
(518,tif->tif_dir)
(519,o)
(520,TIFFTAG_SUBFILETYPE)
(521,if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition)
(522,m)
(523,na)
(524,tif)
(525,if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength)
(526,value)
(527,FIELD_IMAGEDEPTH)
(528,ndir)
(529,tif->tif_dir.td_threshholding)
(530,TIFFFieldSet(tif,FIELD_BITSPERSAMPLE)
(531,ndir)
(532,ndir)
(533,ndir)
(534,)
(535,TIFF_BUFFERSETUP)
(536,tif_dir)
(537,pa)
(538,FIELD_FILLORDER)
(539,tif->tif_dir.td_tilelength)
(540,tif)
(541,&tif->tif_dir.td_halftonehints[0])
(542,tif_curdir)
(543,uint32)
(544,goto bad;)
(545,!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit)
(546,tif->tif_dir)
(547,tif)
(548,tag)
(549,TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue)
(550,tif)
(551,tif)
(552,break;)
(553,ndir*sizeof(TIFFDirEntry)
(554,TIFFTAG_MAXSAMPLEVALUE)
(555,td_bitspersample)
(556,uint16)
(557,tif)
(558,)
(559,!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)
(560,ndir)
(561,tif->tif_flags)
(562,TIFFTAG_MINSAMPLEVALUE)
(563,pa=(uint32)
(564,tif)
(565,if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder)
(566,tif)
(567,&ndir)
(568,ndir)
(569,o->tdir_count)
(570,tif)
(571,module)
(572,TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype)
(573,value)
(574,break;)
(575,o)
(576,uint32)
(577,tif->tif_dir.td_customValues[m])
(578,tif)
(579,goto bad;)
(580,)
(581,!TIFFWriteDirectoryTagColormap(tif,&ndir,dir)
(582,td_resolutionunit)
(583,tif->tif_flags)
(584,(tif->tif_flags & TIFF_MYBUFFER)
(585,count)
(586,tif->tif_dir.td_customValues[m])
(587,o->field_type)
(588,NULL)
(589,tif->tif_rawdata)
(590,)
(591,TIFFSwabShort((uint16*)
(592,)
(593,o->field_type)
(594,tif->tif_dir.td_xposition)
(595,tif_clientdata)
(596,_TIFFmemcpy(n,&nTmp,4)
(597,)
(598,dirsize=0)
(599,tif)
(600,tif)
(601,tif)
(602,TIFF_MYBUFFER)
(603,&ndir)
(604,dir)
(605,tif->tif_dir.td_customValues)
(606,tif)
(607,if (!(tif->tif_flags&TIFF_BIGTIFF)
(608,tif->tif_dir)
(609,&ndir)
(610,goto bad;)
(611,tif->tif_dir.td_customValues[m])
(612,&ndir)
(613,assert(o->field_type==TIFF_ASCII)
(614,tif->tif_dir.td_customValues[m].value)
(615,TIFFDirEntry)
(616,FIELD_PLANARCONFIG)
(617,TIFFSwabShort((uint16*)
(618,tif->tif_diroff+2+na*12+8)
(619,(tif->tif_dataoff<tif->tif_diroff)
(620,tif->tif_rawcc)
(621,field_type)
(622,FIELD_SAMPLEFORMAT)
(623,tif)
(624,FIELD_SMINSAMPLEVALUE)
(625,n)
(626,if (dir!=NULL)
(627,tif)
(628,info)
(629,tif->tif_dir)
(630,dir)
(631,dir)
(632,dir)
(633,&ndir)
(634,dir)
(635,break;)
(636,o->field_passcount)
(637,value)
(638,tif)
(639,!(tif->tif_flags&TIFF_BIGTIFF)
(640,dir=NULL)
(641,td_ycbcrsubsampling)
(642,_TIFFmalloc(ndir*sizeof(TIFFDirEntry)
(643,tif->tif_dir.td_customValues[m])
(644,tif)
(645,FIELD_HALFTONEHINTS)
(646,tif->tif_diroff+dirsize)
(647,)
(648,o)
(649,field_readcount)
(650,tif_clientdata)
(651,na)
(652,(uint16)
(653,tif_mode)
(654,field_passcount)
(655,TIFFFieldSet(tif,FIELD_HALFTONEHINTS)
(656,TIFFTAG_IMAGELENGTH)
(657,ndir)
(658,field_readcount)
(659,o)
(660,if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)
(661,tif)
(662,tif_flags)
(663,TIFFTAG_HALFTONEHINTS)
(664,ndir)
(665,tif->tif_dataoff<tif->tif_diroff)
(666,td_customValues)
(667,n)
(668,tif->tif_dir.td_nstrips)
(669,8)
(670,8)
(671,tif_dir)
(672,_TIFFfree(dirmem)
(673,if (!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(674,tif->tif_dir.td_yresolution)
(675,tif)
(676,!TIFFWriteDirectoryTagSubifd(tif,&ndir,dir)
(677,tif->tif_dir.td_resolutionunit)
(678,tif)
(679,(uint16*)
(680,tif)
(681,TIFFTAG_XRESOLUTION)
(682,tif->tif_flags)
(683,goto bad;)
(684,TIFFFieldSet(tif,FIELD_STRIPOFFSETS)
(685,na*20+12)
(686,m)
(687,tif)
(688,!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression)
(689,(uint16)
(690,tif)
(691,dir)
(692,)
(693,tif->tif_dir.td_halftonehints)
(694,o)
(695,case TIFF_SLONG:)
(696,m)
(697,goto bad;)
(698,tif)
(699,info)
(700,)
(701,m)
(702,assert(o->field_readcount==1)
(703,tif)
(704,0)
(705,!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth)
(706,nb)
(707,!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution)
(708,0)
(709,ndir)
(710,tif->tif_flags&TIFF_BIGTIFF)
(711,if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue)
(712,if (tif->tif_flags&TIFF_SWAB)
(713,tif->tif_dir)
(714,!TIFFWriteDirectoryTagSrationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(715,tif->tif_dir)
(716,TIFF_BEENWRITING)
(717,tif->tif_dir)
(718,uint64*)
(719,dirmem)
(720,td_xposition)
(721,_TIFFfree(dirmem)
(722,tag)
(723,count)
(724,break;)
(725,if (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)
(726,TIFFErrorExt(tif->tif_clientdata,module,"Maximum TIFF file size exceeded")
(727,if (TIFFFieldSet(tif,FIELD_SUBIFD)
(728,uint32)
(729,n)
(730,imagedone)
(731,0)
(732,tif_dir)
(733,)
(734,0)
(735,tif_dir)
(736,tif->tif_subifdoff)
(737,if (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)
(738,assert(o->field_readcount==TIFF_VARIABLE2)
(739,na)
(740,tif->tif_dir)
(741,tif_diroff)
(742,2)
(743,tif)
(744,tif)
(745,6)
(746,break;)
(747,tif)
(748,goto bad;)
(749,o)
(750,&ndir)
(751,TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder)
(752,dirsize)
(753,TIFFTAG_YPOSITION)
(754,TIFFFieldSet(tif,FIELD_FILLORDER)
(755,ndir)
(756,return (0)
(757,break;)
(758,tif->tif_dir.td_customValues[m])
(759,dir)
(760,uint64*)
(761,tif)
(762,&ndir)
(763,dirmem=NULL)
(764,n)
(765,tif->tif_dir.td_halftonehints[0])
(766,tif->tif_dir.td_maxsamplevalue)
(767,tif)
(768,tif)
(769,tdir_type)
(770,tif_flags)
(771,td_customValues)
(772,!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype)
(773,!TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(774,~TIFF_POSTENCODE)
(775,TIFFFieldSet(tif,FIELD_COMPRESSION)
(776,)
(777,tif_rawdataloaded)
(778,nb)
(779,TIFFWriteDirectoryTagSubifd(tif,&ndir,dir)
(780,tif->tif_flags&TIFF_SWAB)
(781,m++)
(782,td_halftonehints)
(783,12)
(784,tif->tif_dir)
(785,_TIFFmemcpy(n,&o->tdir_offset,4)
(786,TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0])
(787,default:)
(788,tif->tif_dir)
(789,if (TIFFFieldSet(tif,FIELD_TILEDEPTH)
(790,TIFF_VARIABLE2)
(791,dir)
(792,tif)
(793,pdiroff)
(794,TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression)
(795,if (TIFFFieldSet(tif,FIELD_FILLORDER)
(796,dirsize=8+ndir*20+8)
(797,break;)
(798,o->field_type==TIFF_LONG)
(799,m<ndir)
(800,tif->tif_dir.td_stripoffset)
(801,m=0)
(802,tif_subifdoff)
(803,tif)
(804,field_tag)
(805,n)
(806,tif_dir)
(807,if (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE)
(808,tif_subifdoff)
(809,td_rowsperstrip)
(810,tif)
(811,tif)
(812,if (tif->tif_flags&TIFF_SWAB)
(813,NULL)
(814,o->field_passcount)
(815,if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb)
(816,)
(817,dir)
(818,ndir)
(819,o)
(820,if (dirmem!=NULL)
(821,if (imagedone)
(822,!WriteOK(tif,dirmem,(tmsize_t)
(823,tif)
(824,return(0)
(825,m)
(826,)
(827,tif_flags)
(828,tif_clientdata)
(829,TIFFSwabLong8((uint64*)
(830,tif)
(831,4)
(832,na*20)
(833,*(uint16*)
(834,dirmem)
(835,td_customValues)
(836,(uint32)
(837,O_RDONLY)
(838,if (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP)
(839,dir)
(840,!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)
(841,ndir)
(842,n)
(843,n)
(844,if (TIFFFieldSet(tif,FIELD_REFBLACKWHITE)
(845,&pa)
(846,o)
(847,tif)
(848,ndir)
(849,&ndir)
(850,n<tif->tif_nfields)
(851,*(uint64*)
(852,tif_dir)
(853,tif->tif_dir)
(854,tif)
(855,o++)
(856,dir)
(857,TIFFFieldSet(tif,FIELD_COLORMAP)
(858,tif->tif_flags)
(859,uint16*)
(860,assert(o->field_type==TIFF_UNDEFINED)
(861,4)
(862,o->field_passcount==1)
(863,pb)
(864,n+=2)
(865,tif)
(866,_TIFFfree(dir)
(867,!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount)
(868,tif)
(869,tif_dir)
(870,if (TIFFFieldSet(tif,FIELD_POSITION)
(871,tif->tif_flags)
(872,TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL)
(873,_TIFFFillStriles( tif )
(874,tag)
(875,tif_dir)
(876,n)
(877,&p)
(878,tif->tif_dir)
(879,TIFF* tif)
(880,dir)
(881,tif->tif_dir.td_customValues)
(882,td_customValueCount)
(883,goto bad;)
(884,tif)
(885,value)
(886,TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(887,goto bad;)
(888,tif_dir)
(889,if (TIFFFieldSet(tif,FIELD_PLANARCONFIG)
(890,td_customValues)
(891,TIFFTAG_EXTRASAMPLES)
(892,*(uint16*)
(893,!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
(894,tif->tif_fields[n])
(895,value)
(896,ndir)
(897,!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric)
(898,o)
(899,1)
(900,tif->tif_dir.td_samplesperpixel)
(901,!TIFFWriteDirectoryTagIfdArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(902,"Cannot find SubIFD tag")
(903,TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(904,dirsize)
(905,goto bad;)
(906,field_passcount)
(907,tif)
(908,)
(909,tif)
(910,tif->tif_dir)
(911,if (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL)
(912,na)
(913,0)
(914,n=dirmem)
(915,tif->tif_dir.td_minsamplevalue)
(916,n)
(917,tif_flags)
(918,tif_dataoff)
(919,tif_dir)
(920,tif)
(921,count)
(922,m)
(923,dir)
(924,o)
(925,na)
(926,break;)
(927,if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth)
(928,case TIFF_IFD:)
(929,goto bad;)
(930,td_yposition)
(931,sizeof(TIFFDirEntry)
(932,n)
(933,!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth)
(934,if ((o->field_bit>=FIELD_CODEC)
(935,*(uint16*)
(936,p)
(937,tif->tif_diroff)
(938,m)
(939,n)
(940,value)
(941,goto bad;)
(942,n)
(943,count)
(944,m)
(945,TIFFGetField(tif,o->field_tag,&pa,&pb)
(946,TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory")
(947,)
(948,tif)
(949,count)
(950,count)
(951,(uint32)
(952,tif->tif_dataoff)
(953,n++)
(954,dir)
(955,0)
(956,o->field_tag)
(957,TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip)
(958,SEEK_END)
(959,tif->tif_dir)
(960,if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0])
(961,for (na=0, nb=dir; ; na++, nb++)
(962,n)
(963,tif->tif_dir.td_customValues[m])
(964,tif->tif_flags & TIFF_BEENWRITING)
(965,tif->tif_dir)
(966,FIELD_YCBCRPOSITIONING)
(967,tdir_tag)
(968,tif)
(969,m)
(970,if (TIFFFieldSet(tif,FIELD_IMAGEDEPTH)
(971,&ndir)
(972,dir)
(973,TIFFTAG_PHOTOMETRIC)
(974,tif->tif_rawdataloaded)
(975,2)
(976,_TIFFmemcpy(n,&o->tdir_offset,8)
(977,goto bad;)
(978,if (TIFFFieldSet(tif,FIELD_HALFTONEHINTS)
(979,n+=2)
(980,nTmp)
(981,if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength)
(982,tif)
(983,tif->tif_flags)
(984,goto bad;)
(985,dir)
(986,TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth)
(987,field_tag)
(988,dir)
(989,tif)
(990,break;)
(991,uint16*)
(992,tif)
(993,goto bad;)
(994,dir=_TIFFmalloc(ndir*sizeof(TIFFDirEntry)
(995,TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILEWIDTH,tif->tif_dir.td_tilewidth)
(996,TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat)
(997,2)
(998,toff_t)
(999,tif_diroff)
(1000,tif)
(1001,ndir)
(1002,tif_flags)
(1003,tif->tif_dir)
(1004,tif->tif_curdir++)
(1005,ndir)
(1006,tif)
(1007,TIFFSeekFile(tif,0,SEEK_END)
(1008,dir)
(1009,*(uint16*)
(1010,if (!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1011,module)
(1012,field_tag)
(1013,ndir*12+4)
(1014,tif)
(1015,tif)
(1016,assert(o->field_readcount==1)
(1017,!isTiled(tif)
(1018,_TIFFmemcpy(n,&nTmp,4)
(1019,FIELD_STRIPBYTECOUNTS)
(1020,tif->tif_diroff+8+na*20+12)
(1021,~((toff_t)
(1022,TIFFTAG_ORIENTATION)
(1023,tif->tif_flags&TIFF_BIGTIFF)
(1024,tif->tif_flags)
(1025,o)
(1026,!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1027,tif_dir)
(1028,tif_dir)
(1029,TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1030,tif->tif_dir)
(1031,dir)
(1032,TIFFFieldSet(tif,FIELD_PLANARCONFIG)
(1033,&ndir)
(1034,tif->tif_dir.td_refblackwhite)
(1035,dir)
(1036,goto bad;)
(1037,TIFFTAG_COMPRESSION)
(1038,*(uint16*)
(1039,tif)
(1040,n)
(1041,dir)
(1042,if (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE)
(1043,!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition)
(1044,tif_clientdata)
(1045,tag)
(1046,dirmem)
(1047,TIFFTAG_INKNAMES)
(1048,td_customValues)
(1049,field_tag)
(1050,tif)
(1051,uint16*)
(1052,n)
(1053,tif->tif_mode == O_RDONLY)
(1054,if (TIFFFieldSet(tif,FIELD_RESOLUTION)
(1055,n+=2)
(1056,n+=4)
(1057,tif->tif_dataoff)
(1058,TIFF_BIGTIFF)
(1059,TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)
(1060,TIFFFieldSet(tif,FIELD_TILEDIMENSIONS)
(1061,!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig)
(1062,tif->tif_dir)
(1063,tif)
(1064,tif)
(1065,TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength)
(1066,tif->tif_diroff=(TIFFSeekFile(tif,0,SEEK_END)
(1067,!SeekOK(tif,tif->tif_diroff)
(1068,count)
(1069,td_inknames)
(1070,tif_dir)
(1071,(*tif->tif_close)
(1072,o)
(1073,tif->tif_dir.td_photometric)
(1074,tif->tif_dir.td_customValues)
(1075,uint16*)
(1076,nTmp)
(1077,&ndir)
(1078,tif_flags)
(1079,TIFFSwabShort((uint16*)
(1080,if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig)
(1081,ndir)
(1082,)
(1083,goto bad;)
(1084,tif)
(1085,*(uint16*)
(1086,if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition)
(1087,module)
(1088,o)
(1089,TIFFFieldSet(tif,FIELD_SAMPLEFORMAT)
(1090,)
(1091,tif->tif_flags)
(1092,FIELD_RESOLUTION)
(1093,if (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING)
(1094,dir)
(1095,tif->tif_subifdoff)
(1096,tif)
(1097,n)
(1098,count)
(1099,0)
(1100,&tif->tif_dir.td_pagenumber[0])
(1101,nb)
(1102,&ndir)
(1103,goto bad;)
(1104,(uint16)
(1105,0)
(1106,!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue)
(1107,o->field_passcount==0)
(1108,TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE)
(1109,TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth)
(1110,ndir)
(1111,FIELD_SUBIFD)
(1112,tif_clientdata)
(1113,ndir)
(1114,if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1115,tif_rawdata)
(1116,tif_dir)
(1117,TIFFTAG_BITSPERSAMPLE)
(1118,)
(1119,tif->tif_nextdiroff)
(1120,TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1121,tif->tif_flags)
(1122,tif)
(1123,)
(1124,NULL)
(1125,if (TIFFFieldSet(tif,FIELD_ORIENTATION)
(1126,goto bad;)
(1127,)
(1128,o)
(1129,dir)
(1130,o->tdir_type)
(1131,tif)
(1132,tif->tif_dataoff)
(1133,tif->tif_fields)
(1134,o->field_type==TIFF_UNDEFINED)
(1135,tif->tif_flags)
(1136,tif)
(1137,tif->tif_subifdoff=tif->tif_diroff+2+na*12+8)
(1138,tif->tif_flags)
(1139,tif)
(1140,tif)
(1141,tif)
(1142,if (TIFFFieldSet(tif,FIELD_STRIPOFFSETS)
(1143,tif)
(1144,case TIFF_SLONG8:)
(1145,goto bad;)
(1146,tif)
(1147,tif)
(1148,&ndir)
(1149,tif->tif_dir)
(1150,uint16)
(1151,tif->tif_dataoff&1)
(1152,if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding)
(1153,tif_dir)
(1154,td_customValues)
(1155,tif)
(1156,dir)
(1157,tif_diroff)
(1158,&tif->tif_dir.td_ycbcrsubsampling[0])
(1159,&ndir)
(1160,tif)
(1161,if (!WriteOK(tif,dirmem,(tmsize_t)
(1162,0)
(1163,TIFFTAG_PLANARCONFIG)
(1164,tif->tif_dir.td_customValues[m])
(1165,TIFFWriteDirectoryTagColormap(tif,&ndir,dir)
(1166,o->tdir_tag)
(1167,tif)
(1168,tif)
(1169,tif_diroff)
(1170,8)
(1171,FIELD_PHOTOMETRIC)
(1172,tif->tif_dir.td_planarconfig)
(1173,tif->tif_dir.td_pagenumber[0])
(1174,na)
(1175,!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_YCBCRPOSITIONING,tif->tif_dir.td_ycbcrpositioning)
(1176,FIELD_THRESHHOLDING)
(1177,if (TIFFFieldSet(tif,FIELD_PAGENUMBER)
(1178,value)
(1179,TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
(1180,tif->tif_dir.td_compression)
(1181,o->field_readcount)
(1182,n)
(1183,return(1)
(1184,(toff_t)
(1185,o->field_bit)
(1186,dir)
(1187,tif->tif_clientdata)
(1188,case TIFF_LONG8:)
(1189,goto bad;)
(1190,tif->tif_dir)
(1191,tif)
(1192,&ndir)
(1193,tif->tif_diroff)
(1194,if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)
(1195,FIELD_REFBLACKWHITE)
(1196,0)
(1197,goto bad;)
(1198,pa)
(1199,ndir)
(1200,tag)
(1201,TIFFTAG_YRESOLUTION)
(1202,tif->tif_mode)
(1203,tif->tif_dir.td_customValues[m].count)
(1204,if (tif->tif_dir.td_stripoffset != NULL &&\n\\n                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
(1205,n+=4)
(1206,if( !TIFFFlushData1(tif)
(1207,tif->tif_dir.td_ycbcrpositioning)
(1208,if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel)
(1209,tif)
(1210,tif_dir)
(1211,nTmp)
(1212,module[] = "TIFFWriteDirectorySec")
(1213,m=0)
(1214,tif->tif_flags&TIFF_BIGTIFF)
(1215,1)
(1216,tif->tif_dataoff)
(1217,tif->tif_dir.td_ycbcrsubsampling[0])
(1218,)
(1219,tif->tif_dir.td_customValues[m].value)
(1220,tif)
(1221,o)
(1222,TIFF_BEENWRITING|TIFF_BUFFERSETUP)
(1223,o->field_type)
(1224,(*tif->tif_postencode)
(1225,o)
(1226,TIFFTAG_IMAGEDEPTH)
(1227,tif->tif_dir)
(1228,tif)
(1229,TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)
(1230,m)
(1231,case TIFF_FLOAT:)
(1232,!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount)
(1233,&ndir)
(1234,(uint16*)
(1235,8)
(1236,tif->tif_dir.td_customValues[m])
(1237,tif->tif_dir)
(1238,!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1239,&ndir)
(1240,dir)
(1241,tif)
(1242,dirmem)
(1243,!TIFFFlushData1(tif)
(1244,(uint64*)
(1245,break;)
(1246,if (!(*tif->tif_postencode)
(1247,ndir)
(1248,tif->tif_dataoff=(uint32)
(1249,goto bad;)
(1250,tif->tif_rawdatasize = 0)
(1251,)
(1252,ndir)
(1253,FIELD_SMAXSAMPLEVALUE)
(1254,tif->tif_flags & TIFF_MYBUFFER)
(1255,)
(1256,dir)
(1257,o->field_readcount)
(1258,o)
(1259,!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_FILLORDER,tif->tif_dir.td_fillorder)
(1260,tif)
(1261,TIFFWriteDirectoryTagAscii(tif,&ndir,dir,(uint16)
(1262,td_xresolution)
(1263,field_tag)
(1264,tif)
(1265,TIFFFieldSet(tif,FIELD_SUBIFD)
(1266,td_maxsamplevalue)
(1267,if (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE)
(1268,tif)
(1269,tif_diroff)
(1270,tif)
(1271,field_readcount)
(1272,td_samplesperpixel)
(1273,tif)
(1274,tif)
(1275,tif->tif_dir.td_imagewidth)
(1276,4)
(1277,break;)
(1278,td_customValues)
(1279,8)
(1280,!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames)
(1281,tif_clientdata)
(1282,dir)
(1283,tif->tif_dir.td_customValues)
(1284,tif)
(1285,tif)
(1286,m)
(1287,dirmem)
(1288,TIFFTAG_XPOSITION)
(1289,tif_dir)
(1290,tif->tif_dir.td_smaxsamplevalue)
(1291,td_minsamplevalue)
(1292,value)
(1293,tif_dir)
(1294,o->field_tag)
(1295,td_planarconfig)
(1296,!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_EXTRASAMPLES,na,nb)
(1297,if (tif->tif_dataoff&1)
(1298,nb)
(1299,case TIFF_SETGET_C32_UINT8:)
(1300,8+na*20+12)
(1301,if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_IMAGEDEPTH,tif->tif_dir.td_imagedepth)
(1302,&ndir)
(1303,tif)
(1304,TIFFFieldSet(tif,FIELD_SUBIFD)
(1305,FIELD_IMAGEDIMENSIONS)
(1306,ndir)
(1307,!(tif->tif_flags&TIFF_BIGTIFF)
(1308,tif)
(1309,tif->tif_dir)
(1310,o)
(1311,tif->tif_dir.td_customValues[m].value)
(1312,uint32*)
(1313,tif->tif_flags&TIFF_BIGTIFF)
(1314,1)
(1315,TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)
(1316,if (isimage)
(1317,n)
(1318,if (TIFFFieldSet(tif,FIELD_PHOTOMETRIC)
(1319,!TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1320,ndir)
(1321,FIELD_ORIENTATION)
(1322,if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,(uint16)
(1323,tdir_tag)
(1324,ndir)
(1325,&pb)
(1326,&ndir)
(1327,td_imagelength)
(1328,count)
(1329,ndir)
(1330,tif->tif_dir.td_customValues)
(1331,tif)
(1332,if (!TIFFWriteDirectoryTagIfdIfd8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1333,tif->tif_dir)
(1334,0)
(1335,td_customValues)
(1336,m)
(1337,if (tif->tif_flags & TIFF_POSTENCODE)
(1338,assert(0)
(1339,p)
(1340,tif)
(1341,goto bad;)
(1342,tif->tif_dir)
(1343,if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,TIFFTAG_INKNAMES,tif->tif_dir.td_inknameslen,tif->tif_dir.td_inknames)
(1344,&ndir)
(1345,)
(1346,ndir)
(1347,tif->tif_rawdata)
(1348,tag)
(1349,ndir)
(1350,dirsize)
(1351,TIFFTAG_STRIPOFFSETS)
(1352,0)
(1353,switch (o->get_field_type)
(1354,if (!TIFFWriteDirectoryTagFloatArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1355,if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1356,nb)
(1357,if (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT)
(1358,_TIFFmemcpy(n,&tif->tif_nextdiroff,8)
(1359,tif->tif_dir)
(1360,tag = (uint16)
(1361,ndir)
(1362,tif->tif_flags &= ~TIFF_DIRTYSTRIP)
(1363,!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1364,tif->tif_flags)
(1365,tif)
(1366,ndir)
(1367,tif)
(1368,n+=8)
(1369,TIFFGetField(tif,o->field_tag,&pb)
(1370,2+na*12+8)
(1371,td_customValues)
(1372,tif->tif_flags)
(1373,tif->tif_flags)
(1374,value)
(1375,tif->tif_dir.td_customValues)
(1376,tif)
(1377,o->tdir_tag)
(1378,TIFFTAG_SAMPLESPERPIXEL)
(1379,tif)
(1380,!TIFFWriteDirectoryTagShort(tif,&ndir,dir,(uint16)
(1381,o->get_field_type)
(1382,TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMINSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_sminsamplevalue)
(1383,&ndir)
(1384,tif_dir)
(1385,&ndir)
(1386,&ndir)
(1387,TIFFTAG_SMAXSAMPLEVALUE)
(1388,tif)
(1389,goto bad;)
(1390,pa)
(1391,n)
(1392,ndir)
(1393,0)
(1394,if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YRESOLUTION,tif->tif_dir.td_yresolution)
(1395,dir)
(1396,tif)
(1397,tif)
(1398,tif_flags)
(1399,TIFFErrorExt(tif->tif_clientdata,module,"Out of memory")
(1400,tif)
(1401,1)
(1402,assert(0)
(1403,tdir_count)
(1404,TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount)
(1405,tif)
(1406,&ndir)
(1407,&ndir)
(1408,FIELD_CODEC)
(1409,dirmem)
(1410,goto bad;)
(1411,assert(o->field_passcount==0)
(1412,n)
(1413,o->field_passcount)
(1414,dir)
(1415,tif->tif_dir.td_sminsamplevalue)
(1416,td_smaxsamplevalue)
(1417,tif_dataoff)
(1418,ndir)
(1419,*(uint16*)
(1420,tif->tif_dir.td_pagenumber)
(1421,tif)
(1422,!TIFFWriteDirectoryTagByteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1423,tif)
(1424,ndir)
(1425,nb++)
(1426,tdir_tag)
(1427,tif_dir)
(1428,tif)
(1429,tif->tif_rawcc > 0)
(1430,TIFF_UNDEFINED)
(1431,tif->tif_dir.td_customValues)
(1432,2)
(1433,TIFFTAG_STRIPBYTECOUNTS)
(1434,tif->tif_diroff)
(1435,o)
(1436,)
(1437,tif_dir)
(1438,tif)
(1439,td_nstrips)
(1440,tif)
(1441,tif_dir)
(1442,dir)
(1443,switch (tif->tif_dir.td_customValues[m].info->field_type)
(1444,count)
(1445,n)
(1446,m)
(1447,tif)
(1448,n)
(1449,pa)
(1450,o->field_tag)
(1451,8)
(1452,tif->tif_subifdoff)
(1453,tif->tif_dir.td_customValues[m])
(1454,ndir)
(1455,TIFFFieldSet(tif,FIELD_TILEDEPTH)
(1456,if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_TILEDEPTH,tif->tif_dir.td_tiledepth)
(1457,ndir)
(1458,td_stripbytecount)
(1459,tif)
(1460,tif)
(1461,ndir)
(1462,tif)
(1463,!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition)
(1464,)
(1465,tif)
(1466,o++)
(1467,case TIFF_RATIONAL:)
(1468,for (m=0; m<(uint32)
(1469,tif)
(1470,o->field_type==TIFF_SHORT)
(1471,goto bad;)
(1472,tif->tif_dir)
(1473,tif->tif_flags&TIFF_SWAB)
(1474,&ndir)
(1475,tif_rawcc)
(1476,tif->tif_flags&TIFF_SWAB)
(1477,TIFFFieldSet(tif,FIELD_PHOTOMETRIC)
(1478,TIFFFlushData1(tif)
(1479,tif->tif_dir)
(1480,tif->tif_dir.td_yposition)
(1481,goto bad;)
(1482,if (TIFFFieldSet(tif,FIELD_THRESHHOLDING)
(1483,td_tiledepth)
(1484,na++)
(1485,dir)
(1486,tif)
(1487,uint16)
(1488,o)
(1489,dirsize=2+ndir*12+4)
(1490,o->field_tag)
(1491,m)
(1492,TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation)
(1493,tif)
(1494,TIFFFieldSet(tif,FIELD_IMAGEDEPTH)
(1495,tif)
(1496,tif_dir)
(1497,!(*tif->tif_postencode)
(1498,value)
(1499,tif_dir)
(1500,tif->tif_dir.td_customValues[m])
(1501,tif)
(1502,tif->tif_dir)
(1503,!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1504,tif_dir)
(1505,FIELD_ROWSPERSTRIP)
(1506,pb)
(1507,"Error post-encoding before directory write")
(1508,tif_dir)
(1509,ndir)
(1510,tif)
(1511,TIFFTAG_REFERENCEBLACKWHITE)
(1512,&ndir)
(1513,tif->tif_rawdata = NULL)
(1514,uint16*)
(1515,&ndir)
(1516,tif->tif_rawcc)
(1517,4)
(1518,TIFFErrorExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t    "Error flushing data before directory write")
(1519,TIFFErrorExt(tif->tif_clientdata,module,\n\\n\\t\\t\\t\\t    "Error post-encoding before directory write")
(1520,dir)
(1521,o)
(1522,)
(1523,)
(1524,NULL)
(1525,tif->tif_dir.td_bitspersample)
(1526,goto bad;)
(1527,!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1528,value)
(1529,tif)
(1530,na=0)
(1531,tif_dir)
(1532,TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE)
(1533,field_passcount)
(1534,0)
(1535,default:)
(1536,)
(1537,tif_dir)
(1538,tif)
(1539,n)
(1540,)
(1541,if (tif->tif_mode == O_RDONLY)
(1542,td_tilewidth)
(1543,tif_dir)
(1544,m)
(1545,tif)
(1546,tif->tif_dir.td_customValues)
(1547,ndir)
(1548,goto bad;)
(1549,tif->tif_clientdata)
(1550,)
(1551,)
(1552,m=0)
(1553,tif->tif_dir.td_xresolution)
(1554,if (!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue)
(1555,~(TIFF_BEENWRITING|TIFF_BUFFERSETUP)
(1556,count)
(1557,TIFFFieldSet(tif,FIELD_STRIPBYTECOUNTS)
(1558,if (!TIFFWriteDirectoryTagLong(tif,&ndir,dir,TIFFTAG_SUBFILETYPE,tif->tif_dir.td_subfiletype)
(1559,&o->tdir_offset)
(1560,if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_SAMPLEFORMAT,tif->tif_dir.td_sampleformat)
(1561,td_subfiletype)
(1562,td_imagedepth)
(1563,&ndir)
(1564,goto bad;)
(1565,dirmem=_TIFFmalloc(dirsize)
(1566,goto bad;)
(1567,m)
(1568,(uint16)
(1569,m)
(1570,tif_flags)
(1571,o)
(1572,tif->tif_dataoff<(uint64)
(1573,TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PLANARCONFIG,tif->tif_dir.td_planarconfig)
(1574,TIFFFieldSet(tif,o->field_bit)
(1575,td_threshholding)
(1576,2)
(1577,p)
(1578,for (n=0; n<tif->tif_nfields; n++)
(1579,"Maximum TIFF file size exceeded")
(1580,TIFFFieldSet(tif,FIELD_INKNAMES)
(1581,tif_flags)
(1582,)
(1583,assert(o->field_passcount==1)
(1584,tif_flags)
(1585,)
(1586,tif->tif_dir.td_customValues[m].info->field_tag)
(1587,goto bad;)
(1588,ndir)
(1589,tif_dir)
(1590,if (tif->tif_flags&TIFF_SWAB)
(1591,break;)
(1592,tif->tif_rawdatasize)
(1593,tif_nextdiroff)
(1594,tif)
(1595,dirmem==NULL)
(1596,)
(1597,tif->tif_dir.td_imagelength)
(1598,TIFFWriteDirectoryTagSbyteArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1599,tif)
(1600,TIFFFieldSet(tif,FIELD_RESOLUTION)
(1601,tif)
(1602,)
(1603,tif->tif_dir.td_customValues[m])
(1604,td_fillorder)
(1605,2)
(1606,tag)
(1607,assert(o->field_type==TIFF_LONG)
(1608,tif_diroff)
(1609,&na)
(1610,n)
(1611,if (tif->tif_rawcc > 0 \n\\n\\t\\t    && (tif->tif_flags & TIFF_BEENWRITING)
(1612,if (TIFFFieldSet(tif,FIELD_INKNAMES)
(1613,uint16*)
(1614,goto bad;)
(1615,goto bad;)
(1616,m)
(1617,dir)
(1618,)
(1619,tif)
(1620,if (!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite)
(1621,(tmsize_t)
(1622,)
(1623,tif)
(1624,TIFFTAG_RESOLUTIONUNIT)
(1625,tif_dataoff)
(1626,isimage)
(1627,if (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING)
(1628,ndir)
(1629,!TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir)
(1630,tif->tif_dir.td_customValues[m].value)
(1631,tif->tif_dir)
(1632,tif_dir)
(1633,o->field_readcount==TIFF_VARIABLE2)
(1634,*(uint16*)
(1635,&ndir)
(1636,tif->tif_dir.td_customValues[m])
(1637,n)
(1638,tif_fields)
(1639,tif)
(1640,&ndir)
(1641,break;)
(1642,!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_HALFTONEHINTS,2,&tif->tif_dir.td_halftonehints[0])
(1643,tif->tif_dir)
(1644,module)
(1645,tif_dir)
(1646,0)
(1647,tif)
(1648,FIELD_COMPRESSION)
(1649,tif_dir)
(1650,m)
(1651,RET)
(1652,uint16*)
(1653,n)
(1654,o->field_type==TIFF_ASCII)
(1655,td_stripoffset)
(1656,tif)
(1657,tif)
(1658,&ndir)
(1659,field_tag)
(1660,&ndir)
(1661,tif)
(1662,TIFF_SWAB)
(1663,!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength)
(1664,tif)
(1665,value)
(1666,&ndir)
(1667,tif->tif_flags)
(1668,ndir)
(1669,tif->tif_dir.td_customValueCount)
(1670,tif->tif_flags &= ~(TIFF_BEENWRITING|TIFF_BUFFERSETUP)
(1671,goto bad;)
(1672,FIELD_PAGENUMBER)
(1673,goto bad;)
(1674,tif->tif_dir)
(1675,tif)
(1676,o->field_readcount==1)
(1677,if (!TIFFWriteDirectoryTagColormap(tif,&ndir,dir)
(1678,td_customValues)
(1679,tif->tif_dir)
(1680,goto bad;)
(1681,dir)
(1682,na*12)
(1683,)
(1684,isimage)
(1685,td_photometric)
(1686,n)
(1687,8+ndir*20+8)
(1688,0)
(1689,!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGEWIDTH,tif->tif_dir.td_imagewidth)
(1690,goto bad;)
(1691,tif->tif_dir.td_customValues[m].value)
(1692,o->field_type)
(1693,dir)
(1694,&ndir)
(1695,tif->tif_clientdata)
(1696,tif->tif_dir.td_inknameslen)
(1697,tif_subifdoff)
(1698,goto bad;)
(1699,!TIFFLinkDirectory(tif)
(1700,tif_flags)
(1701,tif->tif_dir)
(1702,tif_dir)
(1703,tif)
(1704,tif->tif_dir.td_stripbytecount)
(1705,)
(1706,tif)
(1707,TIFFFieldSet(tif,FIELD_REFBLACKWHITE)
(1708,dirsize)
(1709,td_customValues)
(1710,NULL)
(1711,ndir)
(1712,td_stripoffset)
(1713,m)
(1714,*(uint64*)
(1715,tif)
(1716,if (!(tif->tif_flags&TIFF_BIGTIFF)
(1717,TIFF_BIGTIFF)
(1718,tif)
(1719,TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount)
(1720,&ndir)
(1721,TIFFSwabLong(&nTmp)
(1722,o)
(1723,tif_nextdiroff)
(1724,case TIFF_SSHORT:)
(1725,ndir)
(1726,tag)
(1727,tif->tif_flags&TIFF_SWAB)
(1728,!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MAXSAMPLEVALUE,tif->tif_dir.td_maxsamplevalue)
(1729,tif)
(1730,pb)
(1731,if (!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1732,n=0)
(1733,n)
(1734,if (TIFFFieldSet(tif,FIELD_COMPRESSION)
(1735,count)
(1736,tif->tif_dir.td_customValues[m].info->field_type)
(1737,2)
(1738,if (TIFFFieldSet(tif,FIELD_STRIPBYTECOUNTS)
(1739,TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample)
(1740,dir)
(1741,FIELD_EXTRASAMPLES)
(1742,tif->tif_dir)
(1743,FIELD_INKNAMES)
(1744,if (tif->tif_flags&TIFF_SWAB)
(1745,module)
(1746,TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING)
(1747,TIFFTAG_SAMPLEFORMAT)
(1748,TIFFErrorExt(tif->tif_clientdata,module,"IO error writing directory")
(1749,tif->tif_flags&TIFF_SWAB)
(1750,ndir)
(1751,!TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1752,tif->tif_dir)
(1753,tif)
(1754,tif)
(1755,dir)
(1756,tif->tif_dir)
(1757,(tif->tif_diroff==0)
(1758,p)
(1759,)
(1760,if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_COMPRESSION,tif->tif_dir.td_compression)
(1761,)
(1762,TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
(1763,td_customValues)
(1764,if (tif->tif_flags&TIFF_SWAB)
(1765,m)
(1766,TIFFLinkDirectory(tif)
(1767,tdir_type)
(1768,count)
(1769,tif)
(1770,TIFF_SWAB)
(1771,tif_dir)
(1772,ndir)
(1773,goto bad;)
(1774,tif)
(1775,tif)
(1776,tif->tif_dir.td_customValues)
(1777,tif_flags)
(1778,if (!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip)
(1779,tif->tif_dir)
(1780,tdir_offset)
(1781,m)
(1782,TIFFTAG_TILEBYTECOUNTS)
(1783,tmsize_t)
(1784,TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_PHOTOMETRIC,tif->tif_dir.td_photometric)
(1785,tif->tif_dir.td_customValues[m])
(1786,o)
(1787,)
(1788,tif)
(1789,tif_dir)
(1790,tif->tif_dir)
(1791,TIFFTAG_FILLORDER)
(1792,tdir_offset)
(1793,4)
(1794,tif_flags)
(1795,!TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1796,break;)
(1797,0)
(1798,)
(1799,TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_TILELENGTH,tif->tif_dir.td_tilelength)
(1800,TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0])
(1801,o)
(1802,ndir)
(1803,if (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE)
(1804,1)
(1805,20)
(1806,tif_flags)
(1807,tif->tif_dataoff)
(1808,tif)
(1809,ndir)
(1810,tif_dir)
(1811,TIFFGetFieldDefaulted(tif,TIFFTAG_EXTRASAMPLES,&na,&nb)
(1812,tif_rawcc)
(1813,1)
(1814,tif)
(1815,tif->tif_dir.td_fillorder)
(1816,td_sampleformat)
(1817,n+=8)
(1818,dir)
(1819,tif_dir)
(1820,isTiled(tif)
(1821,goto bad;)
(1822,tif->tif_dir)
(1823,tif->tif_flags&TIFF_SWAB)
(1824,TIFFGetField(tif,o->field_tag,&p)
(1825,if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue)
(1826,tif->tif_dir)
(1827,tif)
(1828,"Out of memory")
(1829,dirsize)
(1830,TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING)
(1831,tif->tif_flags)
(1832,assert(o->field_passcount==0)
(1833,(uint64*)
(1834,tif)
(1835,tag)
(1836,tif)
(1837,FIELD_POSITION)
(1838,FIELD_BITSPERSAMPLE)
(1839,TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_THRESHHOLDING,tif->tif_dir.td_threshholding)
(1840,*(uint16*)
(1841,uint64*)
(1842,tif->tif_dir)
(1843,tif)
(1844,dir)
(1845,break;)
(1846,if (!isTiled(tif)
(1847,case TIFF_SETGET_UINT32:)
(1848,ndir)
(1849,FIELD_MINSAMPLEVALUE)
(1850,goto bad;)
(1851,m)
(1852,o)
(1853,tif->tif_dir.td_customValues[m].info)
(1854,tif)
(1855,)
(1856,tif->tif_dir.td_customValues[m].value)
(1857,nTmp)
(1858,TIFFWriteDirectoryTagSshortArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1859,tif->tif_subifdoff=tif->tif_diroff+8+na*20+12)
(1860,dir)
(1861,tif->tif_dataoff=tif->tif_diroff+dirsize)
(1862,(uint16*)
(1863,tif)
(1864,if (TIFFFieldSet(tif,FIELD_EXTRASAMPLES)
(1865,&nTmp)
(1866,tif_dir)
(1867,tif->tif_dir)
(1868,o)
(1869,tif)
(1870,TIFF_SWAB)
(1871,tif->tif_dir)
(1872,case TIFF_UNDEFINED:)
(1873,&ndir)
(1874,tif->tif_flags)
(1875,tif)
(1876,n)
(1877,(uint16*)
(1878,if (imagedone)
(1879,ndir)
(1880,tif)
(1881,&ndir)
(1882,tif_dir)
(1883,if (!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution)
(1884,tif)
(1885,o->field_tag)
(1886,!TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite)
(1887,if (!TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_BITSPERSAMPLE,tif->tif_dir.td_bitspersample)
(1888,nTmp = (uint32)
(1889,tif_clientdata)
(1890,goto bad;)
(1891,if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_YCBCRSUBSAMPLING,2,&tif->tif_dir.td_ycbcrsubsampling[0])
(1892,tif)
(1893,tif->tif_dir.td_customValues)
(1894,tif->tif_dir.td_customValues)
(1895,uint32)
(1896,td_refblackwhite)
(1897,tag)
(1898,&ndir)
(1899,&o->tdir_count)
(1900,goto bad;)
(1901,tag)
(1902,tif_dir)
(1903,dirmem!=NULL)
(1904,TIFF_BEENWRITING)
(1905,n)
(1906,if (isimage)
(1907,TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1908,tif)
(1909,2)
(1910,TIFFTAG_SUBIFD)
(1911,tif->tif_dir.td_rowsperstrip)
(1912,!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_IMAGELENGTH,tif->tif_dir.td_imagelength)
(1913,tif)
(1914,o)
(1915,ndir)
(1916,if (pdiroff!=NULL)
(1917,FIELD_COLORMAP)
(1918,if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit)
(1919,dir)
(1920,tif_flags)
(1921,goto bad;)
(1922,tif)
(1923,goto bad;)
(1924,ndir)
(1925,tif_rawdata)
(1926,(*tif->tif_cleanup)
(1927,tif)
(1928,(uint16)
(1929,ndir*20+8)
(1930,!TIFFWriteDirectoryTagShortLong(tif,&ndir,dir,TIFFTAG_ROWSPERSTRIP,tif->tif_dir.td_rowsperstrip)
(1931,tif)
(1932,o)
(1933,tif)
(1934,tif->tif_dir.td_customValues)
(1935,tif->tif_dir.td_customValues[m])
(1936,FIELD_RESOLUTIONUNIT)
(1937,case TIFF_IFD8:)
(1938,(uint32)
(1939,TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_SAMPLESPERPIXEL,tif->tif_dir.td_samplesperpixel)
(1940,tif->tif_flags & TIFF_POSTENCODE)
(1941,tif)
(1942,)
(1943,o->field_tag)
(1944,o)
(1945,break;)
(1946,goto bad;)
(1947,TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE)
(1948,td_samplesperpixel)
(1949,TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(1950,TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_RESOLUTIONUNIT,tif->tif_dir.td_resolutionunit)
(1951,dirsize)
(1952,field_readcount)
(1953,tif->tif_dir)
(1954,tif)
(1955,12)
(1956,o=dir)
(1957,tif->tif_diroff)
(1958,tif)
(1959,tif)
(1960,NULL)
(1961,*pdiroff=tif->tif_diroff)
(1962,if (isimage)
(1963,0)
(1964,o->field_passcount==0)
(1965,tif)
(1966,20)
(1967,)
(1968,tif->tif_dir.td_customValues[m].info)
(1969,goto bad;)
(1970,dir)
(1971,"Out of memory")
(1972,o->field_tag)
(1973,TIFFSwabShort((uint16*)
(1974,)
(1975,case TIFF_ASCII:)
(1976,tif)
(1977,tif_dir)
(1978,field_type)
(1979,)
(1980,ndir)
(1981,tif)
(1982,dir)
(1983,tif)
(1984,tif)
(1985,dir)
(1986,(uint64*)
(1987,tif->tif_dir.td_stripoffset != NULL &&\n\\n                        !TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
(1988,tif->tif_flags&TIFF_SWAB)
(1989,)
(1990,tif->tif_dir.td_stripoffset)
(1991,TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XPOSITION,tif->tif_dir.td_xposition)
(1992,tif->tif_curdir)
(1993,n)
(1994,goto bad;)
(1995,_TIFFfree(tif->tif_rawdata)
(1996,tif)
(1997,&ndir)
(1998,4)
(1999,0)
(2000,break;)
(2001,td_nstrips)
(2002,!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_TILEOFFSETS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripoffset)
(2003,dirmem)
(2004,tif)
(2005,)
(2006,tif->tif_dir.td_customValues)
(2007,(uint32*)
(2008,!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(2009,tif->tif_dir)
(2010,isimage)
(2011,TIFFWriteDirectoryTagLongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(2012,tif)
(2013,break;)
(2014,tag)
(2015,tif_dir)
(2016,td_yresolution)
(2017,!TIFFWriteDirectoryTagSampleformatArray(tif,&ndir,dir,TIFFTAG_SMAXSAMPLEVALUE,tif->tif_dir.td_samplesperpixel,tif->tif_dir.td_smaxsamplevalue)
(2018,TIFF_SWAB)
(2019,if (!(tif->tif_flags&TIFF_BIGTIFF)
(2020,tif->tif_diroff)
(2021,!(tif->tif_flags&TIFF_BIGTIFF)
(2022,tif_dir)
(2023,tif->tif_dir)
(2024,p)
(2025,tif_dataoff)
(2026,tif)
(2027,tif->tif_flags &= ~TIFF_POSTENCODE)
(2028,dir)
(2029,!TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(2030,*(uint16*)
(2031,if (dir==NULL)
(2032,m<(uint32)
(2033,goto bad;)
(2034,tif->tif_flags)
(2035,tif_diroff)
(2036,tif)
(2037,o)
(2038,tif)
(2039,&nTmp)
(2040,tif_flags)
(2041,tif->tif_dir.td_extrasamples)
(2042,TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_YPOSITION,tif->tif_dir.td_yposition)
(2043,na)
(2044,tif)
(2045,tif->tif_dir.td_subfiletype)
(2046,tif)
(2047,(uint16*)
(2048,TIFFFieldSet(tif,FIELD_ROWSPERSTRIP)
(2049,tif)
(2050,tif)
(2051,tif->tif_dir.td_customValues)
(2052,tif)
(2053,TIFFWriteDirectoryTagSlongArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(2054,"IO error writing directory")
(2055,goto bad;)
(2056,if (!TIFFWriteDirectoryTagLongLong8Array(tif,&ndir,dir,TIFFTAG_STRIPBYTECOUNTS,tif->tif_dir.td_nstrips,tif->tif_dir.td_stripbytecount)
(2057,td_customValues)
(2058,TIFFWriteDirectoryTagTransferfunction(tif,&ndir,dir)
(2059,!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0])
(2060,tif)
(2061,&ndir)
(2062,case TIFF_SBYTE:)
(2063,tif->tif_dir.td_ycbcrsubsampling)
(2064,if (!TIFFWriteDirectoryTagShort(tif,&ndir,dir,TIFFTAG_ORIENTATION,tif->tif_dir.td_orientation)
(2065,!TIFFWriteDirectoryTagLong(tif,&ndir,dir,(uint16)
(2066,module)
(2067,FIELD_STRIPOFFSETS)
(2068,TIFF_SWAB)
(2069,TIFFWriteDirectoryTagRationalArray(tif,&ndir,dir,TIFFTAG_REFERENCEBLACKWHITE,6,tif->tif_dir.td_refblackwhite)
(2070,dir)
(2071,TIFF_LONG)
(2072,if (nb->tdir_tag==TIFFTAG_SUBIFD)
(2073,dir!=NULL)
(2074,TIFFWriteDirectoryTagDoubleArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(2075,n)
(2076,tif->tif_rawcc > 0 \n\\n\\t\\t    && (tif->tif_flags & TIFF_BEENWRITING)
(2077,td_pagenumber)
(2078,value)
(2079,TIFF_BIGTIFF)
(2080,tif)
(2081,m)
(2082,tif)
(2083,if (!TIFFWriteDirectoryTagUndefinedArray(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(2084,TIFFTAG_ROWSPERSTRIP)
(2085,tif_dataoff)
(2086,field_type)
(2087,tif)
(2088,module)
(2089,tag)
(2090,if (!TIFFWriteDirectoryTagAscii(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(2091,(uint16*)
(2092,(uint16)
(2093,TIFFTAG_TILELENGTH)
(2094,tif->tif_rawdataloaded = 0)
(2095,tif)
(2096,o = tif->tif_fields[n])
(2097,"TIFFWriteDirectorySec")
(2098,if (tif->tif_flags&TIFF_SWAB)
(2099,td_stripoffset)
(2100,imagedone)
(2101,tif->tif_dir)
(2102,TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE)
(2103,tif->tif_dir.td_tiledepth)
(2104,tif)
(2105,na)
(2106,"IO error writing directory")
(2107,tif->tif_dir.td_customValues)
(2108,tif)
(2109,for (m=0; m<ndir; m++)
(2110,if (!TIFFWriteDirectoryTagLong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(2111,nb->tdir_tag==TIFFTAG_SUBIFD)
(2112,m)
(2113,!TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution)
(2114,if (!TIFFWriteDirectoryTagShortArray(tif,&ndir,dir,TIFFTAG_PAGENUMBER,2,&tif->tif_dir.td_pagenumber[0])
(2115,pb)
(2116,tif)
(2117,&ndir)
(2118,tif_dir)
(2119,tif->tif_dir.td_customValues[m].value)
(2120,n)
(2121,o->field_tag)
(2122,module)
(2123,dir)
(2124,dir)
(2125,(uint16*)
(2126,NULL)
(2127,0)
(2128,TIFFSwabShort((uint16*)
(2129,TIFFWriteDirectoryTagRational(tif,&ndir,dir,TIFFTAG_XRESOLUTION,tif->tif_dir.td_xresolution)
(2130,case TIFF_SETGET_ASCII:)
(2131,tif->tif_diroff)
(2132,tif->tif_dir.td_customValues[m])
(2133,!TIFFWriteDirectoryTagSlong8Array(tif,&ndir,dir,tag,count,tif->tif_dir.td_customValues[m].value)
(2134,TIFF_POSTENCODE)
(2135,dir)
(2136,tif)
(2137,tif)
(2138,TIFFFieldSet(tif,FIELD_EXTRASAMPLES)
(2139,tif)
(2140,o)
(2141,n+=2)
(2142,TIFFTAG_YCBCRSUBSAMPLING)
(2143,dir)
(2144,goto bad;)
(2145,case TIFF_SHORT:)
(2146,ndir)
(2147,o)
(2148,td_samplesperpixel)
(2149,TIFFSwabLong((uint32*)
(2150,na)
(2151,td_customValues)
(2152,tif)
(2153,td_sminsamplevalue)
(2154,m)
(2155,TIFFWriteDirectoryTagShortPerSample(tif,&ndir,dir,TIFFTAG_MINSAMPLEVALUE,tif->tif_dir.td_minsamplevalue)
(2156,ndir)
(2157,dir)
(2158,(TIFFSeekFile(tif,0,SEEK_END)
(2159,(uint32)
(2160,ndir)
(2161,FIELD_MAXSAMPLEVALUE)
(2162,tif->tif_dir.td_orientation)
(2163,ndir)
(2164,tif->tif_dir.td_nstrips)
(2165,TIFFTAG_THRESHHOLDING)
(2166,bad:)
(2167,o->field_bit>=FIELD_CODEC)
(2168,tif->tif_dir)
(2169,dir)
(2170,o->field_passcount==0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
