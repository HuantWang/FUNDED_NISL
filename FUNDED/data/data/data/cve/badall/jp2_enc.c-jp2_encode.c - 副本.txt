-----label-----
1
-----code-----
int jp2_encode(jas_image_t *image, jas_stream_t *out, const char *optstr)
{
	jp2_box_t *box;
	jp2_ftyp_t *ftyp;
	jp2_ihdr_t *ihdr;
	jas_stream_t *tmpstream;
	int allcmptssame;
	jp2_bpcc_t *bpcc;
	long len;
	uint_fast16_t cmptno;
	jp2_colr_t *colr;
	char buf[4096];
	uint_fast32_t overhead;
	jp2_cdefchan_t *cdefchanent;
	jp2_cdef_t *cdef;
	int i;
	uint_fast32_t typeasoc;
	jas_iccprof_t *iccprof;
	jas_stream_t *iccstream;
	int pos;
	int needcdef;
	int prec;
	int sgnd;

	box = 0;
	tmpstream = 0;
	iccstream = 0;
	iccprof = 0;

	allcmptssame = 1;
	sgnd = jas_image_cmptsgnd(image, 0);
	prec = jas_image_cmptprec(image, 0);
	for (i = 1; i < jas_image_numcmpts(image); ++i) {
		if (jas_image_cmptsgnd(image, i) != sgnd ||
		  jas_image_cmptprec(image, i) != prec) {
			allcmptssame = 0;
			break;
		}
	}

	/* Output the signature box. */

	if (!(box = jp2_box_create(JP2_BOX_JP))) {
		jas_eprintf("cannot create JP box\n");
		goto error;
	}
	box->data.jp.magic = JP2_JP_MAGIC;
	if (jp2_box_put(box, out)) {
		jas_eprintf("cannot write JP box\n");
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/* Output the file type box. */

	if (!(box = jp2_box_create(JP2_BOX_FTYP))) {
		jas_eprintf("cannot create FTYP box\n");
		goto error;
	}
	ftyp = &box->data.ftyp;
	ftyp->majver = JP2_FTYP_MAJVER;
	ftyp->minver = JP2_FTYP_MINVER;
	ftyp->numcompatcodes = 1;
	ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE;
	if (jp2_box_put(box, out)) {
		jas_eprintf("cannot write FTYP box\n");
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/*
	 * Generate the data portion of the JP2 header box.
	 * We cannot simply output the header for this box
	 * since we do not yet know the correct value for the length
	 * field.
	 */

	if (!(tmpstream = jas_stream_memopen(0, 0))) {
		jas_eprintf("cannot create temporary stream\n");
		goto error;
	}

	/* Generate image header box. */

	if (!(box = jp2_box_create(JP2_BOX_IHDR))) {
		jas_eprintf("cannot create IHDR box\n");
		goto error;
	}
	ihdr = &box->data.ihdr;
	ihdr->width = jas_image_width(image);
	ihdr->height = jas_image_height(image);
	ihdr->numcmpts = jas_image_numcmpts(image);
	ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),
	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL;
	ihdr->comptype = JP2_IHDR_COMPTYPE;
	ihdr->csunk = 0;
	ihdr->ipr = 0;
	if (jp2_box_put(box, tmpstream)) {
		jas_eprintf("cannot write IHDR box\n");
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/* Generate bits per component box. */

	if (!allcmptssame) {
		if (!(box = jp2_box_create(JP2_BOX_BPCC))) {
			jas_eprintf("cannot create BPCC box\n");
			goto error;
		}
		bpcc = &box->data.bpcc;
		bpcc->numcmpts = jas_image_numcmpts(image);
		if (!(bpcc->bpcs = jas_alloc2(bpcc->numcmpts,
		  sizeof(uint_fast8_t)))) {
			jas_eprintf("memory allocation failed\n");
			goto error;
		}
		for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {
			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,
			  cmptno), jas_image_cmptprec(image, cmptno));
		}
		if (jp2_box_put(box, tmpstream)) {
			jas_eprintf("cannot write BPCC box\n");
			goto error;
		}
		jp2_box_destroy(box);
		box = 0;
	}

	/* Generate color specification box. */

	if (!(box = jp2_box_create(JP2_BOX_COLR))) {
		jas_eprintf("cannot create COLR box\n");
		goto error;
	}
	colr = &box->data.colr;
	switch (jas_image_clrspc(image)) {
	case JAS_CLRSPC_SRGB:
	case JAS_CLRSPC_SYCBCR:
	case JAS_CLRSPC_SGRAY:
		colr->method = JP2_COLR_ENUM;
		colr->csid = clrspctojp2(jas_image_clrspc(image));
		colr->pri = JP2_COLR_PRI;
		colr->approx = 0;
		break;
	default:
		colr->method = JP2_COLR_ICC;
		colr->pri = JP2_COLR_PRI;
		colr->approx = 0;
		/* Ensure that cmprof_ is not null. */
		if (!jas_image_cmprof(image)) {
			jas_eprintf("CM profile is null\n");
			goto error;
		}
		if (!(iccprof = jas_iccprof_createfromcmprof(
		  jas_image_cmprof(image)))) {
			jas_eprintf("cannot create ICC profile\n");
			goto error;
		}
		if (!(iccstream = jas_stream_memopen(0, 0))) {
			jas_eprintf("cannot create temporary stream\n");
			goto error;
		}
		if (jas_iccprof_save(iccprof, iccstream)) {
			jas_eprintf("cannot write ICC profile\n");
			goto error;
		}
		if ((pos = jas_stream_tell(iccstream)) < 0) {
			jas_eprintf("cannot get stream position\n");
			goto error;
		}
		colr->iccplen = pos;
		if (!(colr->iccp = jas_malloc(pos))) {
			jas_eprintf("memory allocation failed\n");
			goto error;
		}
		jas_stream_rewind(iccstream);
		if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) !=
		  colr->iccplen) {
			jas_eprintf("cannot read temporary stream\n");
			goto error;
		}
		jas_stream_close(iccstream);
		iccstream = 0;
		jas_iccprof_destroy(iccprof);
		iccprof = 0;
		break;
	}
	if (jp2_box_put(box, tmpstream)) {
		jas_eprintf("cannot write box\n");
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	needcdef = 1;
	switch (jas_clrspc_fam(jas_image_clrspc(image))) {
	case JAS_CLRSPC_FAM_RGB:
		if (jas_image_cmpttype(image, 0) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&
		  jas_image_cmpttype(image, 1) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&
		  jas_image_cmpttype(image, 2) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))
			needcdef = 0;
		break;
	case JAS_CLRSPC_FAM_YCBCR:
		if (jas_image_cmpttype(image, 0) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&
		  jas_image_cmpttype(image, 1) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&
		  jas_image_cmpttype(image, 2) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))
			needcdef = 0;
		break;
	case JAS_CLRSPC_FAM_GRAY:
		if (jas_image_cmpttype(image, 0) ==
		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))
			needcdef = 0;
		break;
	default:
		abort();
		break;
	}

	if (needcdef) {
		if (!(box = jp2_box_create(JP2_BOX_CDEF))) {
			jas_eprintf("cannot create CDEF box\n");
			goto error;
		}
		cdef = &box->data.cdef;
		cdef->numchans = jas_image_numcmpts(image);
		cdef->ents = jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t));
		for (i = 0; i < jas_image_numcmpts(image); ++i) {
			cdefchanent = &cdef->ents[i];
			cdefchanent->channo = i;
			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));
			cdefchanent->type = typeasoc >> 16;
			cdefchanent->assoc = typeasoc & 0x7fff;
		}
		if (jp2_box_put(box, tmpstream)) {
			jas_eprintf("cannot write CDEF box\n");
			goto error;
		}
		jp2_box_destroy(box);
		box = 0;
	}

	/* Determine the total length of the JP2 header box. */

	len = jas_stream_tell(tmpstream);
	jas_stream_rewind(tmpstream);

	/*
	 * Output the JP2 header box and all of the boxes which it contains.
	 */

	if (!(box = jp2_box_create(JP2_BOX_JP2H))) {
		jas_eprintf("cannot create JP2H box\n");
		goto error;
	}
	box->len = len + JP2_BOX_HDRLEN(false);
	if (jp2_box_put(box, out)) {
		jas_eprintf("cannot write JP2H box\n");
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	if (jas_stream_copy(out, tmpstream, len)) {
		jas_eprintf("cannot copy stream\n");
		goto error;
	}

	jas_stream_close(tmpstream);
	tmpstream = 0;

	/*
	 * Output the contiguous code stream box.
	 */

	if (!(box = jp2_box_create(JP2_BOX_JP2C))) {
		jas_eprintf("cannot create JP2C box\n");
		goto error;
	}
	box->len = 0;
	if (jp2_box_put(box, out)) {
		jas_eprintf("cannot write JP2C box\n");
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/* Output the JPEG-2000 code stream. */

	overhead = jas_stream_getrwcount(out);
	sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),
	  (unsigned long) overhead);

	if (jpc_encode(image, out, buf)) {
		jas_eprintf("jpc_encode failed\n");
		goto error;
	}

	return 0;

error:

	if (iccprof) {
		jas_iccprof_destroy(iccprof);
	}
	if (iccstream) {
		jas_stream_close(iccstream);
	}
	if (box) {
		jp2_box_destroy(box);
	}
	if (tmpstream) {
		jas_stream_close(tmpstream);
	}
	return -1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
22,38
22,39
22,40
22,41
22,42
22,43
22,44
22,45
22,46
22,47
22,48
22,49
22,50
22,51
22,52
22,53
22,54
22,55
22,56
22,57
22,58
22,59
22,60
22,61
22,62
22,63
22,64
22,65
22,66
22,67
22,68
22,69
22,70
22,71
22,72
22,73
22,74
22,75
22,76
22,77
22,78
22,79
22,80
22,81
22,82
22,83
22,84
22,85
22,86
22,87
22,88
22,89
22,90
22,91
22,92
22,93
22,94
22,95
22,96
22,97
22,98
22,99
22,100
22,101
22,102
22,103
22,104
22,105
22,106
22,107
22,108
22,109
22,110
22,111
22,112
23,24
24,25
24,26
25,26
27,28
27,29
30,31
31,32
31,33
32,33
34,35
34,36
37,38
38,39
38,40
39,40
41,42
41,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
52,53
52,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
63,64
64,65
64,66
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
78,80
81,82
82,83
82,84
84,85
84,86
86,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
98,100
101,102
102,103
102,104
103,104
105,106
105,107
108,109
109,110
109,111
111,112
113,114
114,115
114,116
115,116
117,118
119,120
120,121
120,122
121,122
123,124
123,125
126,127
127,128
127,129
128,129
130,131
130,132
133,134
134,135
134,136
136,137
138,139
139,140
139,141
141,142
143,144
144,145
144,146
146,147
148,149
149,150
149,151
151,152
153,154
154,155
154,156
155,156
158,159
159,160
159,161
160,161
163,164
164,165
164,166
165,166
168,169
169,170
169,171
170,171
173,174
174,175
174,176
175,176
178,179
179,180
179,181
180,181
182,183
182,184
182,185
183,184
185,186
188,189
189,190
189,191
190,191
192,193
192,194
192,195
193,194
195,196
198,199
198,200
198,201
198,202
199,200
200,201
200,202
201,202
204,205
204,206
205,206
207,208
207,209
208,209
210,211
212,213
213,214
215,216
216,217
216,218
217,218
217,219
218,219
218,220
219,220
219,221
219,222
220,221
222,223
224,225
226,227
228,229
228,230
229,230
229,231
229,232
230,231
232,233
234,235
236,237
238,239
238,240
239,240
240,241
240,242
241,242
245,246
245,247
246,247
247,248
248,249
248,250
249,250
251,252
251,253
252,253
254,255
256,257
256,258
257,258
258,259
258,260
259,260
262,263
264,265
265,266
265,267
266,267
266,268
267,268
267,269
268,269
268,270
269,270
274,275
276,277
276,278
277,278
277,279
277,280
278,279
280,281
282,283
284,285
284,286
285,286
286,287
286,288
287,288
290,291
292,293
293,294
293,295
294,295
296,297
298,299
299,300
299,301
300,301
303,304
303,305
304,305
305,306
306,307
306,308
307,308
309,310
309,311
310,311
312,313
314,315
314,316
315,316
316,317
316,318
317,318
320,321
322,323
323,324
323,325
324,325
326,327
327,328
327,329
328,329
328,330
329,330
333,334
334,335
334,336
335,336
335,337
336,337
339,340
341,342
342,343
342,344
343,344
343,345
344,345
347,348
349,350
350,351
350,352
351,352
351,353
352,353
356,357
357,358
357,359
358,359
358,360
359,360
359,361
360,361
364,365
366,367
366,368
367,368
367,369
367,370
368,369
370,371
372,373
374,375
374,376
375,376
376,377
376,378
377,378
380,381
382,383
383,384
383,385
384,385
386,387
388,389
389,390
389,391
390,391
393,394
393,395
394,395
395,396
396,397
396,398
397,398
399,400
399,401
399,402
400,401
404,405
404,406
405,406
406,407
406,408
407,408
410,411
412,413
412,414
413,414
414,415
415,416
415,417
416,417
418,419
418,420
419,420
421,422
423,424
423,425
424,425
425,426
425,427
426,427
429,430
431,432
432,433
432,434
433,434
435,436
436,437
436,438
437,438
437,439
438,439
442,443
443,444
443,445
444,445
444,446
445,446
448,449
448,450
449,450
451,452
453,454
454,455
454,456
455,456
455,457
456,457
459,460
459,461
460,461
462,463
464,465
465,466
465,467
466,467
466,468
467,468
470,471
470,472
471,472
473,474
475,476
476,477
476,478
477,478
477,479
478,479
481,482
481,483
481,484
482,483
484,485
484,486
484,487
485,486
487,488
487,489
487,490
488,489
490,491
493,494
493,495
493,496
494,495
496,497
499,500
501,502
502,503
502,504
503,504
503,505
504,505
507,508
509,510
510,511
510,512
511,512
511,513
512,513
516,517
517,518
517,519
518,519
518,520
519,520
523,524
523,525
524,525
524,526
524,527
525,526
527,528
529,530
531,532
531,533
532,533
533,534
533,535
534,535
537,538
539,540
540,541
540,542
541,542
543,544
545,546
546,547
546,548
547,548
550,551
550,552
551,552
552,553
554,555
554,556
554,557
554,558
554,559
554,560
554,561
554,562
555,556
555,557
556,557
557,558
558,559
558,560
559,560
561,562
561,563
562,563
564,565
566,567
566,568
567,568
568,569
568,570
569,570
572,573
574,575
575,576
575,577
576,577
578,579
579,580
579,581
580,581
580,582
581,582
585,586
586,587
586,588
587,588
587,589
588,589
591,592
591,593
592,593
594,595
596,597
596,598
597,598
598,599
599,600
599,601
600,601
600,602
601,602
604,605
604,606
604,607
605,606
607,608
607,609
608,609
611,612
612,613
612,614
613,614
616,617
616,618
617,618
618,619
618,620
619,620
622,623
624,625
624,626
624,627
624,628
625,626
626,627
626,628
627,628
630,631
630,632
631,632
633,634
633,635
634,635
637,638
638,639
640,641
641,642
642,643
642,644
643,644
643,645
644,645
644,646
645,646
648,649
650,651
650,652
650,653
651,652
653,654
653,655
653,656
654,655
656,657
658,659
660,661
660,662
660,663
661,662
663,664
665,666
667,668
667,669
668,669
668,670
668,671
669,670
671,672
673,674
675,676
675,677
676,677
677,678
677,679
678,679
681,682
683,684
684,685
684,686
685,686
687,688
689,690
690,691
690,692
691,692
694,695
694,696
695,696
696,697
697,698
697,699
698,699
700,701
700,702
701,702
703,704
705,706
705,707
706,707
707,708
707,709
708,709
711,712
713,714
714,715
714,716
715,716
717,718
718,719
718,720
719,720
719,721
720,721
724,725
724,726
725,726
725,727
726,727
728,729
730,731
730,732
730,733
730,734
730,735
730,736
730,737
730,738
730,739
730,740
730,741
730,742
730,743
730,744
730,745
730,746
730,747
730,748
730,749
730,750
730,751
730,752
730,753
730,754
730,755
730,756
731,732
732,733
734,735
735,736
737,738
738,739
740,741
741,742
741,743
742,743
742,744
743,744
746,747
748,749
749,750
749,751
750,751
750,752
751,752
754,755
754,756
755,756
757,758
757,759
758,759
760,761
762,763
763,764
763,765
764,765
764,766
765,766
768,769
770,771
771,772
771,773
772,773
772,774
773,774
779,780
780,781
780,782
781,782
781,783
782,783
785,786
787,788
788,789
788,790
789,790
789,791
790,791
793,794
795,796
796,797
796,798
797,798
797,799
798,799
802,803
802,804
803,804
804,805
804,806
805,806
807,808
809,810
809,811
810,811
811,812
811,813
812,813
815,816
817,818
817,819
818,819
819,820
820,821
820,822
821,822
823,824
823,825
824,825
826,827
826,828
827,828
829,830
831,832
831,833
832,833
833,834
833,835
834,835
837,838
839,840
839,841
840,841
841,842
842,843
842,844
843,844
845,846
845,847
845,848
846,847
850,851
850,852
851,852
852,853
852,854
853,854
856,857
858,859
858,860
859,860
859,861
859,862
860,861
862,863
864,865
866,867
866,868
867,868
868,869
868,870
869,870
872,873
874,875
874,876
875,876
875,877
876,877
877,878
877,879
878,879
880,881
880,882
881,882
883,884
886,887
886,888
887,888
888,889
888,890
889,890
892,893
894,895
895,896
895,897
896,897
896,898
897,898
900,901
902,903
902,904
903,904
904,905
905,906
905,907
906,907
906,908
907,908
910,911
910,912
911,912
913,914
915,916
915,917
916,917
917,918
917,919
918,919
921,922
923,924
924,925
924,926
925,926
927,928
929,930
929,931
930,931
930,932
931,932
931,933
931,934
931,935
932,933
934,935
936,937
936,938
937,938
940,941
940,942
941,942
944,945
944,946
945,946
948,949
948,950
949,950
950,951
950,952
951,952
954,955
956,957
957,958
957,959
958,959
960,961
962,963
963,964
963,965
964,965
967,968
968,969
968,970
969,970
971,972
973,974
974,975
974,976
975,976
979,980
979,981
980,981
980,982
980,983
981,982
983,984
985,986
987,988
987,989
988,989
989,990
989,991
990,991
993,994
995,996
996,997
996,998
997,998
999,1000
1001,1002
1002,1003
1002,1004
1003,1004
1006,1007
1007,1008
1007,1009
1008,1009
1011,1012
1011,1013
1012,1013
1012,1014
1013,1014
1015,1016
1015,1017
1016,1017
1018,1019
1020,1021
1020,1022
1020,1023
1020,1024
1020,1025
1020,1026
1020,1027
1020,1028
1020,1029
1020,1030
1020,1031
1020,1032
1021,1022
1022,1023
1024,1025
1024,1026
1025,1026
1025,1027
1026,1027
1026,1028
1027,1028
1027,1029
1028,1029
1028,1030
1028,1031
1029,1030
1031,1032
1034,1035
1034,1036
1035,1036
1037,1038
1039,1040
1039,1041
1040,1041
1040,1042
1040,1043
1041,1042
1043,1044
1046,1047
1046,1048
1047,1048
1049,1050
1051,1052
1051,1053
1052,1053
1052,1054
1052,1055
1053,1054
1055,1056
1058,1059
1058,1060
1059,1060
1061,1062
1063,1064
1064,1065
1064,1066
1065,1066
1069,1070
1070,1071
1072,1073
1072,1074
1073,1074
1073,1075
1074,1075
1074,1076
1075,1076
1075,1077
1076,1077
1076,1078
1076,1079
1077,1078
1079,1080
1082,1083
1082,1084
1083,1084
1085,1086
1087,1088
1087,1089
1088,1089
1088,1090
1088,1091
1089,1090
1091,1092
1094,1095
1094,1096
1095,1096
1097,1098
1099,1100
1099,1101
1100,1101
1100,1102
1100,1103
1101,1102
1103,1104
1106,1107
1106,1108
1107,1108
1109,1110
1111,1112
1112,1113
1112,1114
1113,1114
1117,1118
1118,1119
1120,1121
1120,1122
1121,1122
1121,1123
1122,1123
1122,1124
1122,1125
1123,1124
1125,1126
1128,1129
1128,1130
1129,1130
1131,1132
1133,1134
1134,1135
1134,1136
1135,1136
1140,1141
1141,1142
1142,1143
1145,1146
1145,1147
1146,1147
1148,1149
1148,1150
1148,1151
1148,1152
1148,1153
1148,1154
1148,1155
1148,1156
1149,1150
1149,1151
1150,1151
1151,1152
1152,1153
1152,1154
1153,1154
1155,1156
1155,1157
1156,1157
1158,1159
1160,1161
1160,1162
1161,1162
1162,1163
1162,1164
1163,1164
1166,1167
1168,1169
1169,1170
1169,1171
1170,1171
1172,1173
1173,1174
1173,1175
1174,1175
1174,1176
1175,1176
1179,1180
1180,1181
1180,1182
1181,1182
1181,1183
1182,1183
1185,1186
1185,1187
1186,1187
1188,1189
1190,1191
1191,1192
1191,1193
1192,1193
1192,1194
1193,1194
1196,1197
1196,1198
1196,1199
1197,1198
1199,1200
1199,1201
1200,1201
1203,1204
1204,1205
1204,1206
1205,1206
1208,1209
1208,1210
1208,1211
1208,1212
1209,1210
1210,1211
1210,1212
1211,1212
1214,1215
1214,1216
1215,1216
1217,1218
1217,1219
1218,1219
1220,1221
1222,1223
1223,1224
1225,1226
1225,1227
1225,1228
1225,1229
1225,1230
1226,1227
1227,1228
1227,1229
1228,1229
1230,1231
1231,1232
1231,1233
1232,1233
1232,1234
1233,1234
1236,1237
1238,1239
1239,1240
1239,1241
1240,1241
1240,1242
1241,1242
1244,1245
1246,1247
1247,1248
1247,1249
1248,1249
1250,1251
1250,1252
1250,1253
1251,1252
1253,1254
1253,1255
1254,1255
1256,1257
1258,1259
1258,1260
1258,1261
1259,1260
1261,1262
1263,1264
1265,1266
1266,1267
1266,1268
1267,1268
1267,1269
1268,1269
1271,1272
1271,1273
1272,1273
1275,1276
1276,1277
1276,1278
1277,1278
1277,1279
1278,1279
1281,1282
1281,1283
1282,1283
1285,1286
1285,1287
1286,1287
1286,1288
1286,1289
1287,1288
1289,1290
1291,1292
1293,1294
1293,1295
1294,1295
1295,1296
1295,1297
1296,1297
1299,1300
1301,1302
1302,1303
1302,1304
1303,1304
1305,1306
1307,1308
1308,1309
1308,1310
1309,1310
1312,1313
1313,1314
1313,1315
1314,1315
1316,1317
1316,1318
1317,1318
1319,1320
1321,1322
1322,1323
1322,1324
1323,1324
1325,1326
1327,1328
1327,1329
1328,1329
1329,1330
1330,1331
1330,1332
1331,1332
1333,1334
1333,1335
1334,1335
1336,1337
1338,1339
1338,1340
1339,1340
1340,1341
1340,1342
1341,1342
1344,1345
1346,1347
1347,1348
1347,1349
1348,1349
1348,1350
1349,1350
1352,1353
1352,1354
1353,1354
1355,1356
1355,1357
1356,1357
1359,1360
1359,1361
1360,1361
1360,1362
1360,1363
1361,1362
1363,1364
1365,1366
1367,1368
1367,1369
1368,1369
1369,1370
1369,1371
1370,1371
1373,1374
1375,1376
1376,1377
1376,1378
1377,1378
1379,1380
1381,1382
1382,1383
1382,1384
1383,1384
1386,1387
1386,1388
1387,1388
1387,1389
1387,1390
1387,1391
1388,1389
1390,1391
1392,1393
1394,1395
1396,1397
1396,1398
1397,1398
1398,1399
1398,1400
1399,1400
1402,1403
1404,1405
1405,1406
1405,1407
1406,1407
1408,1409
1410,1411
1411,1412
1411,1413
1412,1413
1415,1416
1415,1417
1416,1417
1417,1418
1418,1419
1418,1420
1419,1420
1421,1422
1421,1423
1422,1423
1424,1425
1426,1427
1426,1428
1427,1428
1428,1429
1428,1430
1429,1430
1432,1433
1434,1435
1435,1436
1435,1437
1436,1437
1436,1438
1437,1438
1441,1442
1441,1443
1442,1443
1442,1444
1442,1445
1443,1444
1445,1446
1447,1448
1449,1450
1449,1451
1450,1451
1451,1452
1451,1453
1452,1453
1455,1456
1457,1458
1458,1459
1458,1460
1459,1460
1461,1462
1463,1464
1464,1465
1464,1466
1465,1466
1468,1469
1469,1470
1469,1471
1470,1471
1472,1473
1472,1474
1473,1474
1475,1476
1477,1478
1478,1479
1478,1480
1478,1481
1478,1482
1478,1483
1479,1480
1481,1482
1484,1485
1485,1486
1485,1487
1485,1488
1486,1487
1488,1489
1491,1492
1491,1493
1492,1493
1492,1494
1495,1496
1497,1498
1497,1499
1498,1499
1498,1500
1498,1501
1498,1502
1499,1500
1501,1502
1503,1504
1505,1506
1507,1508
1507,1509
1508,1509
1509,1510
1509,1511
1510,1511
1513,1514
1515,1516
1517,1518
1517,1519
1519,1520
1519,1521
1520,1521
1522,1523
1523,1524
1524,1525
1524,1526
1525,1526
1527,1528
1529,1530
1529,1531
1530,1531
1532,1533
1533,1534
1534,1535
1534,1536
1535,1536
1537,1538
1539,1540
1539,1541
1540,1541
1542,1543
1543,1544
1544,1545
1544,1546
1545,1546
1547,1548
1549,1550
1549,1551
1550,1551
1552,1553
1553,1554
1554,1555
1554,1556
1555,1556
1557,1558
1559,1560
1560,1561
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,21,26,28,29,33,35,36,40,42,43,47,49,50,53,55,59,61,62,65,67,71,73,77,79,80,83,85,87,91,93,97,99,100,104,106,107,110,112,116,118,122,124,125,129,131,132,135,137,140,142,145,147,150,152,156,157,161,162,166,167,171,172,176,177,181,184,186,187,191,194,196,197,202,203,206,209,211,214,221,223,225,227,231,233,235,237,242,243,244,250,253,255,260,261,263,270,271,272,273,275,279,281,283,288,289,291,295,297,301,302,308,311,313,318,319,321,325,330,331,332,337,338,340,345,346,348,353,354,355,361,362,363,365,369,371,373,378,379,381,385,387,391,392,398,401,402,403,408,409,411,417,420,422,427,428,430,434,439,440,441,446,447,450,452,457,458,461,463,468,469,472,474,479,480,483,486,489,491,492,495,497,498,500,505,506,508,513,514,515,520,521,522,526,528,530,535,536,538,542,544,548,549,553,560,563,565,570,571,573,577,582,583,584,589,590,593,595,602,603,606,609,610,614,615,620,621,623,628,629,632,635,636,639,646,647,649,652,655,657,659,662,664,666,670,672,674,679,680,682,686,688,692,693,699,702,704,709,710,712,716,721,722,723,727,729,733,736,739,744,745,747,752,753,756,759,761,766,767,769,774,775,776,777,778,783,784,786,791,792,794,799,800,801,806,808,813,814,816,822,825,828,830,835,836,838,844,847,848,849,854,855,857,861,863,865,870,871,873,879,882,884,885,890,891,893,898,899,901,908,909,912,914,919,920,922,926,928,933,935,938,939,942,943,946,947,952,953,955,959,961,965,966,970,972,976,977,978,982,984,986,991,992,994,998,1000,1004,1005,1009,1010,1014,1017,1019,1023,1030,1032,1033,1036,1038,1042,1044,1045,1048,1050,1054,1056,1057,1060,1062,1066,1067,1068,1071,1078,1080,1081,1084,1086,1090,1092,1093,1096,1098,1102,1104,1105,1108,1110,1114,1115,1116,1119,1124,1126,1127,1130,1132,1136,1137,1138,1139,1143,1144,1147,1154,1157,1159,1164,1165,1167,1171,1176,1177,1178,1183,1184,1187,1189,1194,1195,1198,1201,1202,1206,1207,1212,1213,1216,1219,1221,1224,1229,1234,1235,1237,1242,1243,1245,1249,1252,1255,1257,1260,1262,1264,1269,1270,1273,1274,1279,1280,1283,1284,1288,1290,1292,1297,1298,1300,1304,1306,1310,1311,1315,1318,1320,1324,1326,1332,1335,1337,1342,1343,1345,1350,1351,1354,1357,1358,1362,1364,1366,1371,1372,1374,1378,1380,1384,1385,1389,1391,1393,1395,1400,1401,1403,1407,1409,1413,1414,1420,1423,1425,1430,1431,1433,1438,1439,1440,1444,1446,1448,1453,1454,1456,1460,1462,1466,1467,1471,1474,1476,1480,1482,1483,1487,1489,1490,1493,1494,1496,1500,1502,1504,1506,1511,1512,1514,1516,1518,1521,1526,1528,1531,1536,1538,1541,1546,1548,1551,1556,1558,1561
-----computeFrom-----
154,155
154,156
159,160
159,161
164,165
164,166
169,170
169,171
174,175
174,176
179,180
179,181
189,190
189,191
200,201
200,202
204,205
204,206
217,218
217,219
218,219
218,220
228,229
228,230
240,241
240,242
248,249
248,250
265,266
265,267
299,300
299,301
306,307
306,308
323,324
323,325
334,335
334,336
342,343
342,344
350,351
350,352
357,358
357,359
389,390
389,391
396,397
396,398
415,416
415,417
432,433
432,434
443,444
443,445
454,455
454,456
465,466
465,467
476,477
476,478
502,503
502,504
510,511
510,512
517,518
517,519
546,547
546,548
558,559
558,560
575,576
575,577
586,587
586,588
599,600
599,601
626,627
626,628
630,631
630,632
642,643
642,644
690,691
690,692
697,698
697,699
714,715
714,716
741,742
741,743
749,750
749,751
763,764
763,765
771,772
771,773
780,781
780,782
788,789
788,790
796,797
796,798
820,821
820,822
842,843
842,844
875,876
875,877
877,878
877,879
895,896
895,897
905,906
905,907
930,931
930,932
963,964
963,965
974,975
974,976
1002,1003
1002,1004
1007,1008
1007,1009
1025,1026
1025,1027
1026,1027
1026,1028
1027,1028
1027,1029
1039,1040
1039,1041
1051,1052
1051,1053
1064,1065
1064,1066
1073,1074
1073,1075
1074,1075
1074,1076
1075,1076
1075,1077
1087,1088
1087,1089
1099,1100
1099,1101
1112,1113
1112,1114
1121,1122
1121,1123
1134,1135
1134,1136
1152,1153
1152,1154
1169,1170
1169,1171
1180,1181
1180,1182
1191,1192
1191,1193
1210,1211
1210,1212
1214,1215
1214,1216
1227,1228
1227,1229
1239,1240
1239,1241
1247,1248
1247,1249
1266,1267
1266,1268
1271,1272
1271,1273
1276,1277
1276,1278
1281,1282
1281,1283
1308,1309
1308,1310
1313,1314
1313,1315
1330,1331
1330,1332
1347,1348
1347,1349
1352,1353
1352,1354
1382,1383
1382,1384
1411,1412
1411,1413
1418,1419
1418,1420
1435,1436
1435,1437
1464,1465
1464,1466
1469,1470
1469,1471
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;SwitchStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;ConditionalExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
int jp2_encode(jas_image_t *image, jas_stream_t *out, const char *optstr){	jp2_box_t *box;	jp2_ftyp_t *ftyp;	jp2_ihdr_t *ihdr;	jas_stream_t *tmpstream;	int allcmptssame;	jp2_bpcc_t *bpcc;	long len;	uint_fast16_t cmptno;	jp2_colr_t *colr;	char buf[4096];	uint_fast32_t overhead;	jp2_cdefchan_t *cdefchanent;	jp2_cdef_t *cdef;	int i;	uint_fast32_t typeasoc;	jas_iccprof_t *iccprof;	jas_stream_t *iccstream;	int pos;	int needcdef;	int prec;	int sgnd;	box = 0;	tmpstream = 0;	iccstream = 0;	iccprof = 0;	allcmptssame = 1;	sgnd = jas_image_cmptsgnd(image, 0);	prec = jas_image_cmptprec(image, 0);	for (i = 1; i < jas_image_numcmpts(image); ++i) {		if (jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec) {			allcmptssame = 0;			break;		}	}	/* Output the signature box. */	if (!(box = jp2_box_create(JP2_BOX_JP))) {		jas_eprintf("cannot create JP box\n");		goto error;	}	box->data.jp.magic = JP2_JP_MAGIC;	if (jp2_box_put(box, out)) {		jas_eprintf("cannot write JP box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Output the file type box. */	if (!(box = jp2_box_create(JP2_BOX_FTYP))) {		jas_eprintf("cannot create FTYP box\n");		goto error;	}	ftyp = &box->data.ftyp;	ftyp->majver = JP2_FTYP_MAJVER;	ftyp->minver = JP2_FTYP_MINVER;	ftyp->numcompatcodes = 1;	ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE;	if (jp2_box_put(box, out)) {		jas_eprintf("cannot write FTYP box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/*	 * Generate the data portion of the JP2 header box.	 * We cannot simply output the header for this box	 * since we do not yet know the correct value for the length	 * field.	 */	if (!(tmpstream = jas_stream_memopen(0, 0))) {		jas_eprintf("cannot create temporary stream\n");		goto error;	}	/* Generate image header box. */	if (!(box = jp2_box_create(JP2_BOX_IHDR))) {		jas_eprintf("cannot create IHDR box\n");		goto error;	}	ihdr = &box->data.ihdr;	ihdr->width = jas_image_width(image);	ihdr->height = jas_image_height(image);	ihdr->numcmpts = jas_image_numcmpts(image);	ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL;	ihdr->comptype = JP2_IHDR_COMPTYPE;	ihdr->csunk = 0;	ihdr->ipr = 0;	if (jp2_box_put(box, tmpstream)) {		jas_eprintf("cannot write IHDR box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Generate bits per component box. */	if (!allcmptssame) {		if (!(box = jp2_box_create(JP2_BOX_BPCC))) {			jas_eprintf("cannot create BPCC box\n");			goto error;		}		bpcc = &box->data.bpcc;		bpcc->numcmpts = jas_image_numcmpts(image);		if (!(bpcc->bpcs = jas_alloc2(bpcc->numcmpts,		  sizeof(uint_fast8_t)))) {			jas_eprintf("memory allocation failed\n");			goto error;		}		for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}		if (jp2_box_put(box, tmpstream)) {			jas_eprintf("cannot write BPCC box\n");			goto error;		}		jp2_box_destroy(box);		box = 0;	}	/* Generate color specification box. */	if (!(box = jp2_box_create(JP2_BOX_COLR))) {		jas_eprintf("cannot create COLR box\n");		goto error;	}	colr = &box->data.colr;	switch (jas_image_clrspc(image)) {	case JAS_CLRSPC_SRGB:	case JAS_CLRSPC_SYCBCR:	case JAS_CLRSPC_SGRAY:		colr->method = JP2_COLR_ENUM;		colr->csid = clrspctojp2(jas_image_clrspc(image));		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		break;	default:		colr->method = JP2_COLR_ICC;		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		/* Ensure that cmprof_ is not null. */		if (!jas_image_cmprof(image)) {			jas_eprintf("CM profile is null\n");			goto error;		}		if (!(iccprof = jas_iccprof_createfromcmprof(		  jas_image_cmprof(image)))) {			jas_eprintf("cannot create ICC profile\n");			goto error;		}		if (!(iccstream = jas_stream_memopen(0, 0))) {			jas_eprintf("cannot create temporary stream\n");			goto error;		}		if (jas_iccprof_save(iccprof, iccstream)) {			jas_eprintf("cannot write ICC profile\n");			goto error;		}		if ((pos = jas_stream_tell(iccstream)) < 0) {			jas_eprintf("cannot get stream position\n");			goto error;		}		colr->iccplen = pos;		if (!(colr->iccp = jas_malloc(pos))) {			jas_eprintf("memory allocation failed\n");			goto error;		}		jas_stream_rewind(iccstream);		if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) !=		  colr->iccplen) {			jas_eprintf("cannot read temporary stream\n");			goto error;		}		jas_stream_close(iccstream);		iccstream = 0;		jas_iccprof_destroy(iccprof);		iccprof = 0;		break;	}	if (jp2_box_put(box, tmpstream)) {		jas_eprintf("cannot write box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	needcdef = 1;	switch (jas_clrspc_fam(jas_image_clrspc(image))) {	case JAS_CLRSPC_FAM_RGB:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_YCBCR:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_GRAY:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))			needcdef = 0;		break;	default:		abort();		break;	}	if (needcdef) {		if (!(box = jp2_box_create(JP2_BOX_CDEF))) {			jas_eprintf("cannot create CDEF box\n");			goto error;		}		cdef = &box->data.cdef;		cdef->numchans = jas_image_numcmpts(image);		cdef->ents = jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t));		for (i = 0; i < jas_image_numcmpts(image); ++i) {			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}		if (jp2_box_put(box, tmpstream)) {			jas_eprintf("cannot write CDEF box\n");			goto error;		}		jp2_box_destroy(box);		box = 0;	}	/* Determine the total length of the JP2 header box. */	len = jas_stream_tell(tmpstream);	jas_stream_rewind(tmpstream);	/*	 * Output the JP2 header box and all of the boxes which it contains.	 */	if (!(box = jp2_box_create(JP2_BOX_JP2H))) {		jas_eprintf("cannot create JP2H box\n");		goto error;	}	box->len = len + JP2_BOX_HDRLEN(false);	if (jp2_box_put(box, out)) {		jas_eprintf("cannot write JP2H box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	if (jas_stream_copy(out, tmpstream, len)) {		jas_eprintf("cannot copy stream\n");		goto error;	}	jas_stream_close(tmpstream);	tmpstream = 0;	/*	 * Output the contiguous code stream box.	 */	if (!(box = jp2_box_create(JP2_BOX_JP2C))) {		jas_eprintf("cannot create JP2C box\n");		goto error;	}	box->len = 0;	if (jp2_box_put(box, out)) {		jas_eprintf("cannot write JP2C box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Output the JPEG-2000 code stream. */	overhead = jas_stream_getrwcount(out);	sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),	  (unsigned long) overhead);	if (jpc_encode(image, out, buf)) {		jas_eprintf("jpc_encode failed\n");		goto error;	}	return 0;error:	if (iccprof) {		jas_iccprof_destroy(iccprof);	}	if (iccstream) {		jas_stream_close(iccstream);	}	if (box) {		jp2_box_destroy(box);	}	if (tmpstream) {		jas_stream_close(tmpstream);	}	return -1;}
int
jp2_encode(jas_image_t *image, jas_stream_t *out, const char *optstr)
jp2_encode
jas_image_t *image
jas_image_t
jas_image_t
*image
*
image
jas_stream_t *out
jas_stream_t
jas_stream_t
*out
*
out
const char *optstr
const char
*optstr
*
optstr
{	jp2_box_t *box;	jp2_ftyp_t *ftyp;	jp2_ihdr_t *ihdr;	jas_stream_t *tmpstream;	int allcmptssame;	jp2_bpcc_t *bpcc;	long len;	uint_fast16_t cmptno;	jp2_colr_t *colr;	char buf[4096];	uint_fast32_t overhead;	jp2_cdefchan_t *cdefchanent;	jp2_cdef_t *cdef;	int i;	uint_fast32_t typeasoc;	jas_iccprof_t *iccprof;	jas_stream_t *iccstream;	int pos;	int needcdef;	int prec;	int sgnd;	box = 0;	tmpstream = 0;	iccstream = 0;	iccprof = 0;	allcmptssame = 1;	sgnd = jas_image_cmptsgnd(image, 0);	prec = jas_image_cmptprec(image, 0);	for (i = 1; i < jas_image_numcmpts(image); ++i) {		if (jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec) {			allcmptssame = 0;			break;		}	}	/* Output the signature box. */	if (!(box = jp2_box_create(JP2_BOX_JP))) {		jas_eprintf("cannot create JP box\n");		goto error;	}	box->data.jp.magic = JP2_JP_MAGIC;	if (jp2_box_put(box, out)) {		jas_eprintf("cannot write JP box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Output the file type box. */	if (!(box = jp2_box_create(JP2_BOX_FTYP))) {		jas_eprintf("cannot create FTYP box\n");		goto error;	}	ftyp = &box->data.ftyp;	ftyp->majver = JP2_FTYP_MAJVER;	ftyp->minver = JP2_FTYP_MINVER;	ftyp->numcompatcodes = 1;	ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE;	if (jp2_box_put(box, out)) {		jas_eprintf("cannot write FTYP box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/*	 * Generate the data portion of the JP2 header box.	 * We cannot simply output the header for this box	 * since we do not yet know the correct value for the length	 * field.	 */	if (!(tmpstream = jas_stream_memopen(0, 0))) {		jas_eprintf("cannot create temporary stream\n");		goto error;	}	/* Generate image header box. */	if (!(box = jp2_box_create(JP2_BOX_IHDR))) {		jas_eprintf("cannot create IHDR box\n");		goto error;	}	ihdr = &box->data.ihdr;	ihdr->width = jas_image_width(image);	ihdr->height = jas_image_height(image);	ihdr->numcmpts = jas_image_numcmpts(image);	ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL;	ihdr->comptype = JP2_IHDR_COMPTYPE;	ihdr->csunk = 0;	ihdr->ipr = 0;	if (jp2_box_put(box, tmpstream)) {		jas_eprintf("cannot write IHDR box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Generate bits per component box. */	if (!allcmptssame) {		if (!(box = jp2_box_create(JP2_BOX_BPCC))) {			jas_eprintf("cannot create BPCC box\n");			goto error;		}		bpcc = &box->data.bpcc;		bpcc->numcmpts = jas_image_numcmpts(image);		if (!(bpcc->bpcs = jas_alloc2(bpcc->numcmpts,		  sizeof(uint_fast8_t)))) {			jas_eprintf("memory allocation failed\n");			goto error;		}		for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}		if (jp2_box_put(box, tmpstream)) {			jas_eprintf("cannot write BPCC box\n");			goto error;		}		jp2_box_destroy(box);		box = 0;	}	/* Generate color specification box. */	if (!(box = jp2_box_create(JP2_BOX_COLR))) {		jas_eprintf("cannot create COLR box\n");		goto error;	}	colr = &box->data.colr;	switch (jas_image_clrspc(image)) {	case JAS_CLRSPC_SRGB:	case JAS_CLRSPC_SYCBCR:	case JAS_CLRSPC_SGRAY:		colr->method = JP2_COLR_ENUM;		colr->csid = clrspctojp2(jas_image_clrspc(image));		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		break;	default:		colr->method = JP2_COLR_ICC;		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		/* Ensure that cmprof_ is not null. */		if (!jas_image_cmprof(image)) {			jas_eprintf("CM profile is null\n");			goto error;		}		if (!(iccprof = jas_iccprof_createfromcmprof(		  jas_image_cmprof(image)))) {			jas_eprintf("cannot create ICC profile\n");			goto error;		}		if (!(iccstream = jas_stream_memopen(0, 0))) {			jas_eprintf("cannot create temporary stream\n");			goto error;		}		if (jas_iccprof_save(iccprof, iccstream)) {			jas_eprintf("cannot write ICC profile\n");			goto error;		}		if ((pos = jas_stream_tell(iccstream)) < 0) {			jas_eprintf("cannot get stream position\n");			goto error;		}		colr->iccplen = pos;		if (!(colr->iccp = jas_malloc(pos))) {			jas_eprintf("memory allocation failed\n");			goto error;		}		jas_stream_rewind(iccstream);		if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) !=		  colr->iccplen) {			jas_eprintf("cannot read temporary stream\n");			goto error;		}		jas_stream_close(iccstream);		iccstream = 0;		jas_iccprof_destroy(iccprof);		iccprof = 0;		break;	}	if (jp2_box_put(box, tmpstream)) {		jas_eprintf("cannot write box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	needcdef = 1;	switch (jas_clrspc_fam(jas_image_clrspc(image))) {	case JAS_CLRSPC_FAM_RGB:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_YCBCR:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_GRAY:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))			needcdef = 0;		break;	default:		abort();		break;	}	if (needcdef) {		if (!(box = jp2_box_create(JP2_BOX_CDEF))) {			jas_eprintf("cannot create CDEF box\n");			goto error;		}		cdef = &box->data.cdef;		cdef->numchans = jas_image_numcmpts(image);		cdef->ents = jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t));		for (i = 0; i < jas_image_numcmpts(image); ++i) {			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}		if (jp2_box_put(box, tmpstream)) {			jas_eprintf("cannot write CDEF box\n");			goto error;		}		jp2_box_destroy(box);		box = 0;	}	/* Determine the total length of the JP2 header box. */	len = jas_stream_tell(tmpstream);	jas_stream_rewind(tmpstream);	/*	 * Output the JP2 header box and all of the boxes which it contains.	 */	if (!(box = jp2_box_create(JP2_BOX_JP2H))) {		jas_eprintf("cannot create JP2H box\n");		goto error;	}	box->len = len + JP2_BOX_HDRLEN(false);	if (jp2_box_put(box, out)) {		jas_eprintf("cannot write JP2H box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	if (jas_stream_copy(out, tmpstream, len)) {		jas_eprintf("cannot copy stream\n");		goto error;	}	jas_stream_close(tmpstream);	tmpstream = 0;	/*	 * Output the contiguous code stream box.	 */	if (!(box = jp2_box_create(JP2_BOX_JP2C))) {		jas_eprintf("cannot create JP2C box\n");		goto error;	}	box->len = 0;	if (jp2_box_put(box, out)) {		jas_eprintf("cannot write JP2C box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Output the JPEG-2000 code stream. */	overhead = jas_stream_getrwcount(out);	sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),	  (unsigned long) overhead);	if (jpc_encode(image, out, buf)) {		jas_eprintf("jpc_encode failed\n");		goto error;	}	return 0;error:	if (iccprof) {		jas_iccprof_destroy(iccprof);	}	if (iccstream) {		jas_stream_close(iccstream);	}	if (box) {		jp2_box_destroy(box);	}	if (tmpstream) {		jas_stream_close(tmpstream);	}	return -1;}
jp2_box_t *box;
jp2_box_t *box;
jp2_box_t
jp2_box_t
*box
*
box
jp2_ftyp_t *ftyp;
jp2_ftyp_t *ftyp;
jp2_ftyp_t
jp2_ftyp_t
*ftyp
*
ftyp
jp2_ihdr_t *ihdr;
jp2_ihdr_t *ihdr;
jp2_ihdr_t
jp2_ihdr_t
*ihdr
*
ihdr
jas_stream_t *tmpstream;
jas_stream_t *tmpstream;
jas_stream_t
jas_stream_t
*tmpstream
*
tmpstream
int allcmptssame;
int allcmptssame;
int
allcmptssame
allcmptssame
jp2_bpcc_t *bpcc;
jp2_bpcc_t *bpcc;
jp2_bpcc_t
jp2_bpcc_t
*bpcc
*
bpcc
long len;
long len;
long
len
len
uint_fast16_t cmptno;
uint_fast16_t cmptno;
uint_fast16_t
uint_fast16_t
cmptno
cmptno
jp2_colr_t *colr;
jp2_colr_t *colr;
jp2_colr_t
jp2_colr_t
*colr
*
colr
char buf[4096];
char buf[4096];
char
buf[4096]
buf
[4096]
4096
uint_fast32_t overhead;
uint_fast32_t overhead;
uint_fast32_t
uint_fast32_t
overhead
overhead
jp2_cdefchan_t *cdefchanent;
jp2_cdefchan_t *cdefchanent;
jp2_cdefchan_t
jp2_cdefchan_t
*cdefchanent
*
cdefchanent
jp2_cdef_t *cdef;
jp2_cdef_t *cdef;
jp2_cdef_t
jp2_cdef_t
*cdef
*
cdef
int i;
int i;
int
i
i
uint_fast32_t typeasoc;
uint_fast32_t typeasoc;
uint_fast32_t
uint_fast32_t
typeasoc
typeasoc
jas_iccprof_t *iccprof;
jas_iccprof_t *iccprof;
jas_iccprof_t
jas_iccprof_t
*iccprof
*
iccprof
jas_stream_t *iccstream;
jas_stream_t *iccstream;
jas_stream_t
jas_stream_t
*iccstream
*
iccstream
int pos;
int pos;
int
pos
pos
int needcdef;
int needcdef;
int
needcdef
needcdef
int prec;
int prec;
int
prec
prec
int sgnd;
int sgnd;
int
sgnd
sgnd
box = 0;
box = 0
box
box
0
tmpstream = 0;
tmpstream = 0
tmpstream
tmpstream
0
iccstream = 0;
iccstream = 0
iccstream
iccstream
0
iccprof = 0;
iccprof = 0
iccprof
iccprof
0
allcmptssame = 1;
allcmptssame = 1
allcmptssame
allcmptssame
1
sgnd = jas_image_cmptsgnd(image, 0);
sgnd = jas_image_cmptsgnd(image, 0)
sgnd
sgnd
jas_image_cmptsgnd(image, 0)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
0
prec = jas_image_cmptprec(image, 0);
prec = jas_image_cmptprec(image, 0)
prec
prec
jas_image_cmptprec(image, 0)
jas_image_cmptprec
jas_image_cmptprec
image
image
0
for (i = 1; i < jas_image_numcmpts(image); ++i) {		if (jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec) {			allcmptssame = 0;			break;		}	}
i = 1;
i = 1
i
i
1
i < jas_image_numcmpts(image)
i
i
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
++i
i
i
{		if (jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec) {			allcmptssame = 0;			break;		}	}
if (jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec) {			allcmptssame = 0;			break;		}
jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec
jas_image_cmptsgnd(image, i) != sgnd
jas_image_cmptsgnd(image, i)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
i
i
sgnd
sgnd
jas_image_cmptprec(image, i) != prec
jas_image_cmptprec(image, i)
jas_image_cmptprec
jas_image_cmptprec
image
image
i
i
prec
prec
{			allcmptssame = 0;			break;		}
allcmptssame = 0;
allcmptssame = 0
allcmptssame
allcmptssame
0
break;
if (!(box = jp2_box_create(JP2_BOX_JP))) {		jas_eprintf("cannot create JP box\n");		goto error;	}
!(box = jp2_box_create(JP2_BOX_JP))
(box = jp2_box_create(JP2_BOX_JP))
box = jp2_box_create(JP2_BOX_JP)
box
box
jp2_box_create(JP2_BOX_JP)
jp2_box_create
jp2_box_create
JP2_BOX_JP
JP2_BOX_JP
{		jas_eprintf("cannot create JP box\n");		goto error;	}
jas_eprintf("cannot create JP box\n");
jas_eprintf("cannot create JP box\n")
jas_eprintf
jas_eprintf
"cannot create JP box\n"
goto error;
error
box->data.jp.magic = JP2_JP_MAGIC;
box->data.jp.magic = JP2_JP_MAGIC
box->data.jp.magic
box->data.jp
box->data
box
box
data
jp
magic
JP2_JP_MAGIC
JP2_JP_MAGIC
if (jp2_box_put(box, out)) {		jas_eprintf("cannot write JP box\n");		goto error;	}
jp2_box_put(box, out)
jp2_box_put
jp2_box_put
box
box
out
out
{		jas_eprintf("cannot write JP box\n");		goto error;	}
jas_eprintf("cannot write JP box\n");
jas_eprintf("cannot write JP box\n")
jas_eprintf
jas_eprintf
"cannot write JP box\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (!(box = jp2_box_create(JP2_BOX_FTYP))) {		jas_eprintf("cannot create FTYP box\n");		goto error;	}
!(box = jp2_box_create(JP2_BOX_FTYP))
(box = jp2_box_create(JP2_BOX_FTYP))
box = jp2_box_create(JP2_BOX_FTYP)
box
box
jp2_box_create(JP2_BOX_FTYP)
jp2_box_create
jp2_box_create
JP2_BOX_FTYP
JP2_BOX_FTYP
{		jas_eprintf("cannot create FTYP box\n");		goto error;	}
jas_eprintf("cannot create FTYP box\n");
jas_eprintf("cannot create FTYP box\n")
jas_eprintf
jas_eprintf
"cannot create FTYP box\n"
goto error;
error
ftyp = &box->data.ftyp;
ftyp = &box->data.ftyp
ftyp
ftyp
&box->data.ftyp
box->data.ftyp
box->data
box
box
data
ftyp
ftyp->majver = JP2_FTYP_MAJVER;
ftyp->majver = JP2_FTYP_MAJVER
ftyp->majver
ftyp
ftyp
majver
JP2_FTYP_MAJVER
JP2_FTYP_MAJVER
ftyp->minver = JP2_FTYP_MINVER;
ftyp->minver = JP2_FTYP_MINVER
ftyp->minver
ftyp
ftyp
minver
JP2_FTYP_MINVER
JP2_FTYP_MINVER
ftyp->numcompatcodes = 1;
ftyp->numcompatcodes = 1
ftyp->numcompatcodes
ftyp
ftyp
numcompatcodes
1
ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE;
ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE
ftyp->compatcodes[0]
ftyp->compatcodes
ftyp
ftyp
compatcodes
0
JP2_FTYP_COMPATCODE
JP2_FTYP_COMPATCODE
if (jp2_box_put(box, out)) {		jas_eprintf("cannot write FTYP box\n");		goto error;	}
jp2_box_put(box, out)
jp2_box_put
jp2_box_put
box
box
out
out
{		jas_eprintf("cannot write FTYP box\n");		goto error;	}
jas_eprintf("cannot write FTYP box\n");
jas_eprintf("cannot write FTYP box\n")
jas_eprintf
jas_eprintf
"cannot write FTYP box\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (!(tmpstream = jas_stream_memopen(0, 0))) {		jas_eprintf("cannot create temporary stream\n");		goto error;	}
!(tmpstream = jas_stream_memopen(0, 0))
(tmpstream = jas_stream_memopen(0, 0))
tmpstream = jas_stream_memopen(0, 0)
tmpstream
tmpstream
jas_stream_memopen(0, 0)
jas_stream_memopen
jas_stream_memopen
0
0
{		jas_eprintf("cannot create temporary stream\n");		goto error;	}
jas_eprintf("cannot create temporary stream\n");
jas_eprintf("cannot create temporary stream\n")
jas_eprintf
jas_eprintf
"cannot create temporary stream\n"
goto error;
error
if (!(box = jp2_box_create(JP2_BOX_IHDR))) {		jas_eprintf("cannot create IHDR box\n");		goto error;	}
!(box = jp2_box_create(JP2_BOX_IHDR))
(box = jp2_box_create(JP2_BOX_IHDR))
box = jp2_box_create(JP2_BOX_IHDR)
box
box
jp2_box_create(JP2_BOX_IHDR)
jp2_box_create
jp2_box_create
JP2_BOX_IHDR
JP2_BOX_IHDR
{		jas_eprintf("cannot create IHDR box\n");		goto error;	}
jas_eprintf("cannot create IHDR box\n");
jas_eprintf("cannot create IHDR box\n")
jas_eprintf
jas_eprintf
"cannot create IHDR box\n"
goto error;
error
ihdr = &box->data.ihdr;
ihdr = &box->data.ihdr
ihdr
ihdr
&box->data.ihdr
box->data.ihdr
box->data
box
box
data
ihdr
ihdr->width = jas_image_width(image);
ihdr->width = jas_image_width(image)
ihdr->width
ihdr
ihdr
width
jas_image_width(image)
jas_image_width
jas_image_width
image
image
ihdr->height = jas_image_height(image);
ihdr->height = jas_image_height(image)
ihdr->height
ihdr
ihdr
height
jas_image_height(image)
jas_image_height
jas_image_height
image
image
ihdr->numcmpts = jas_image_numcmpts(image);
ihdr->numcmpts = jas_image_numcmpts(image)
ihdr->numcmpts
ihdr
ihdr
numcmpts
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL;
ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL
ihdr->bpc
ihdr
ihdr
bpc
allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL
allcmptssame
allcmptssame
JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0))
JP2_SPTOBPC
JP2_SPTOBPC
jas_image_cmptsgnd(image, 0)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
0
jas_image_cmptprec(image, 0)
jas_image_cmptprec
jas_image_cmptprec
image
image
0
JP2_IHDR_BPCNULL
JP2_IHDR_BPCNULL
ihdr->comptype = JP2_IHDR_COMPTYPE;
ihdr->comptype = JP2_IHDR_COMPTYPE
ihdr->comptype
ihdr
ihdr
comptype
JP2_IHDR_COMPTYPE
JP2_IHDR_COMPTYPE
ihdr->csunk = 0;
ihdr->csunk = 0
ihdr->csunk
ihdr
ihdr
csunk
0
ihdr->ipr = 0;
ihdr->ipr = 0
ihdr->ipr
ihdr
ihdr
ipr
0
if (jp2_box_put(box, tmpstream)) {		jas_eprintf("cannot write IHDR box\n");		goto error;	}
jp2_box_put(box, tmpstream)
jp2_box_put
jp2_box_put
box
box
tmpstream
tmpstream
{		jas_eprintf("cannot write IHDR box\n");		goto error;	}
jas_eprintf("cannot write IHDR box\n");
jas_eprintf("cannot write IHDR box\n")
jas_eprintf
jas_eprintf
"cannot write IHDR box\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (!allcmptssame) {		if (!(box = jp2_box_create(JP2_BOX_BPCC))) {			jas_eprintf("cannot create BPCC box\n");			goto error;		}		bpcc = &box->data.bpcc;		bpcc->numcmpts = jas_image_numcmpts(image);		if (!(bpcc->bpcs = jas_alloc2(bpcc->numcmpts,		  sizeof(uint_fast8_t)))) {			jas_eprintf("memory allocation failed\n");			goto error;		}		for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}		if (jp2_box_put(box, tmpstream)) {			jas_eprintf("cannot write BPCC box\n");			goto error;		}		jp2_box_destroy(box);		box = 0;	}
!allcmptssame
allcmptssame
allcmptssame
{		if (!(box = jp2_box_create(JP2_BOX_BPCC))) {			jas_eprintf("cannot create BPCC box\n");			goto error;		}		bpcc = &box->data.bpcc;		bpcc->numcmpts = jas_image_numcmpts(image);		if (!(bpcc->bpcs = jas_alloc2(bpcc->numcmpts,		  sizeof(uint_fast8_t)))) {			jas_eprintf("memory allocation failed\n");			goto error;		}		for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}		if (jp2_box_put(box, tmpstream)) {			jas_eprintf("cannot write BPCC box\n");			goto error;		}		jp2_box_destroy(box);		box = 0;	}
if (!(box = jp2_box_create(JP2_BOX_BPCC))) {			jas_eprintf("cannot create BPCC box\n");			goto error;		}
!(box = jp2_box_create(JP2_BOX_BPCC))
(box = jp2_box_create(JP2_BOX_BPCC))
box = jp2_box_create(JP2_BOX_BPCC)
box
box
jp2_box_create(JP2_BOX_BPCC)
jp2_box_create
jp2_box_create
JP2_BOX_BPCC
JP2_BOX_BPCC
{			jas_eprintf("cannot create BPCC box\n");			goto error;		}
jas_eprintf("cannot create BPCC box\n");
jas_eprintf("cannot create BPCC box\n")
jas_eprintf
jas_eprintf
"cannot create BPCC box\n"
goto error;
error
bpcc = &box->data.bpcc;
bpcc = &box->data.bpcc
bpcc
bpcc
&box->data.bpcc
box->data.bpcc
box->data
box
box
data
bpcc
bpcc->numcmpts = jas_image_numcmpts(image);
bpcc->numcmpts = jas_image_numcmpts(image)
bpcc->numcmpts
bpcc
bpcc
numcmpts
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
if (!(bpcc->bpcs = jas_alloc2(bpcc->numcmpts,		  sizeof(uint_fast8_t)))) {			jas_eprintf("memory allocation failed\n");			goto error;		}
!(bpcc->bpcs = jas_alloc2(bpcc->numcmpts,		  sizeof(uint_fast8_t)))
(bpcc->bpcs = jas_alloc2(bpcc->numcmpts,		  sizeof(uint_fast8_t)))
bpcc->bpcs = jas_alloc2(bpcc->numcmpts,		  sizeof(uint_fast8_t))
bpcc->bpcs
bpcc
bpcc
bpcs
jas_alloc2(bpcc->numcmpts,		  sizeof(uint_fast8_t))
jas_alloc2
jas_alloc2
bpcc->numcmpts
bpcc
bpcc
numcmpts
sizeof(uint_fast8_t)
uint_fast8_t
uint_fast8_t
uint_fast8_t

{			jas_eprintf("memory allocation failed\n");			goto error;		}
jas_eprintf("memory allocation failed\n");
jas_eprintf("memory allocation failed\n")
jas_eprintf
jas_eprintf
"memory allocation failed\n"
goto error;
error
for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}
cmptno = 0;
cmptno = 0
cmptno
cmptno
0
cmptno < bpcc->numcmpts
cmptno
cmptno
bpcc->numcmpts
bpcc
bpcc
numcmpts
++cmptno
cmptno
cmptno
{			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}
bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));
bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno))
bpcc->bpcs[cmptno]
bpcc->bpcs
bpcc
bpcc
bpcs
cmptno
cmptno
JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno))
JP2_SPTOBPC
JP2_SPTOBPC
jas_image_cmptsgnd(image,			  cmptno)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
cmptno
cmptno
jas_image_cmptprec(image, cmptno)
jas_image_cmptprec
jas_image_cmptprec
image
image
cmptno
cmptno
if (jp2_box_put(box, tmpstream)) {			jas_eprintf("cannot write BPCC box\n");			goto error;		}
jp2_box_put(box, tmpstream)
jp2_box_put
jp2_box_put
box
box
tmpstream
tmpstream
{			jas_eprintf("cannot write BPCC box\n");			goto error;		}
jas_eprintf("cannot write BPCC box\n");
jas_eprintf("cannot write BPCC box\n")
jas_eprintf
jas_eprintf
"cannot write BPCC box\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (!(box = jp2_box_create(JP2_BOX_COLR))) {		jas_eprintf("cannot create COLR box\n");		goto error;	}
!(box = jp2_box_create(JP2_BOX_COLR))
(box = jp2_box_create(JP2_BOX_COLR))
box = jp2_box_create(JP2_BOX_COLR)
box
box
jp2_box_create(JP2_BOX_COLR)
jp2_box_create
jp2_box_create
JP2_BOX_COLR
JP2_BOX_COLR
{		jas_eprintf("cannot create COLR box\n");		goto error;	}
jas_eprintf("cannot create COLR box\n");
jas_eprintf("cannot create COLR box\n")
jas_eprintf
jas_eprintf
"cannot create COLR box\n"
goto error;
error
colr = &box->data.colr;
colr = &box->data.colr
colr
colr
&box->data.colr
box->data.colr
box->data
box
box
data
colr
switch (jas_image_clrspc(image)) {	case JAS_CLRSPC_SRGB:	case JAS_CLRSPC_SYCBCR:	case JAS_CLRSPC_SGRAY:		colr->method = JP2_COLR_ENUM;		colr->csid = clrspctojp2(jas_image_clrspc(image));		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		break;	default:		colr->method = JP2_COLR_ICC;		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		/* Ensure that cmprof_ is not null. */		if (!jas_image_cmprof(image)) {			jas_eprintf("CM profile is null\n");			goto error;		}		if (!(iccprof = jas_iccprof_createfromcmprof(		  jas_image_cmprof(image)))) {			jas_eprintf("cannot create ICC profile\n");			goto error;		}		if (!(iccstream = jas_stream_memopen(0, 0))) {			jas_eprintf("cannot create temporary stream\n");			goto error;		}		if (jas_iccprof_save(iccprof, iccstream)) {			jas_eprintf("cannot write ICC profile\n");			goto error;		}		if ((pos = jas_stream_tell(iccstream)) < 0) {			jas_eprintf("cannot get stream position\n");			goto error;		}		colr->iccplen = pos;		if (!(colr->iccp = jas_malloc(pos))) {			jas_eprintf("memory allocation failed\n");			goto error;		}		jas_stream_rewind(iccstream);		if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) !=		  colr->iccplen) {			jas_eprintf("cannot read temporary stream\n");			goto error;		}		jas_stream_close(iccstream);		iccstream = 0;		jas_iccprof_destroy(iccprof);		iccprof = 0;		break;	}
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
{	case JAS_CLRSPC_SRGB:	case JAS_CLRSPC_SYCBCR:	case JAS_CLRSPC_SGRAY:		colr->method = JP2_COLR_ENUM;		colr->csid = clrspctojp2(jas_image_clrspc(image));		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		break;	default:		colr->method = JP2_COLR_ICC;		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		/* Ensure that cmprof_ is not null. */		if (!jas_image_cmprof(image)) {			jas_eprintf("CM profile is null\n");			goto error;		}		if (!(iccprof = jas_iccprof_createfromcmprof(		  jas_image_cmprof(image)))) {			jas_eprintf("cannot create ICC profile\n");			goto error;		}		if (!(iccstream = jas_stream_memopen(0, 0))) {			jas_eprintf("cannot create temporary stream\n");			goto error;		}		if (jas_iccprof_save(iccprof, iccstream)) {			jas_eprintf("cannot write ICC profile\n");			goto error;		}		if ((pos = jas_stream_tell(iccstream)) < 0) {			jas_eprintf("cannot get stream position\n");			goto error;		}		colr->iccplen = pos;		if (!(colr->iccp = jas_malloc(pos))) {			jas_eprintf("memory allocation failed\n");			goto error;		}		jas_stream_rewind(iccstream);		if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) !=		  colr->iccplen) {			jas_eprintf("cannot read temporary stream\n");			goto error;		}		jas_stream_close(iccstream);		iccstream = 0;		jas_iccprof_destroy(iccprof);		iccprof = 0;		break;	}
case JAS_CLRSPC_SRGB:
JAS_CLRSPC_SRGB
JAS_CLRSPC_SRGB
case JAS_CLRSPC_SYCBCR:
JAS_CLRSPC_SYCBCR
JAS_CLRSPC_SYCBCR
case JAS_CLRSPC_SGRAY:
JAS_CLRSPC_SGRAY
JAS_CLRSPC_SGRAY
colr->method = JP2_COLR_ENUM;
colr->method = JP2_COLR_ENUM
colr->method
colr
colr
method
JP2_COLR_ENUM
JP2_COLR_ENUM
colr->csid = clrspctojp2(jas_image_clrspc(image));
colr->csid = clrspctojp2(jas_image_clrspc(image))
colr->csid
colr
colr
csid
clrspctojp2(jas_image_clrspc(image))
clrspctojp2
clrspctojp2
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
colr->pri = JP2_COLR_PRI;
colr->pri = JP2_COLR_PRI
colr->pri
colr
colr
pri
JP2_COLR_PRI
JP2_COLR_PRI
colr->approx = 0;
colr->approx = 0
colr->approx
colr
colr
approx
0
break;
default:
colr->method = JP2_COLR_ICC;
colr->method = JP2_COLR_ICC
colr->method
colr
colr
method
JP2_COLR_ICC
JP2_COLR_ICC
colr->pri = JP2_COLR_PRI;
colr->pri = JP2_COLR_PRI
colr->pri
colr
colr
pri
JP2_COLR_PRI
JP2_COLR_PRI
colr->approx = 0;
colr->approx = 0
colr->approx
colr
colr
approx
0
if (!jas_image_cmprof(image)) {			jas_eprintf("CM profile is null\n");			goto error;		}
!jas_image_cmprof(image)
jas_image_cmprof(image)
jas_image_cmprof
jas_image_cmprof
image
image
{			jas_eprintf("CM profile is null\n");			goto error;		}
jas_eprintf("CM profile is null\n");
jas_eprintf("CM profile is null\n")
jas_eprintf
jas_eprintf
"CM profile is null\n"
goto error;
error
if (!(iccprof = jas_iccprof_createfromcmprof(		  jas_image_cmprof(image)))) {			jas_eprintf("cannot create ICC profile\n");			goto error;		}
!(iccprof = jas_iccprof_createfromcmprof(		  jas_image_cmprof(image)))
(iccprof = jas_iccprof_createfromcmprof(		  jas_image_cmprof(image)))
iccprof = jas_iccprof_createfromcmprof(		  jas_image_cmprof(image))
iccprof
iccprof
jas_iccprof_createfromcmprof(		  jas_image_cmprof(image))
jas_iccprof_createfromcmprof
jas_iccprof_createfromcmprof
jas_image_cmprof(image)
jas_image_cmprof
jas_image_cmprof
image
image
{			jas_eprintf("cannot create ICC profile\n");			goto error;		}
jas_eprintf("cannot create ICC profile\n");
jas_eprintf("cannot create ICC profile\n")
jas_eprintf
jas_eprintf
"cannot create ICC profile\n"
goto error;
error
if (!(iccstream = jas_stream_memopen(0, 0))) {			jas_eprintf("cannot create temporary stream\n");			goto error;		}
!(iccstream = jas_stream_memopen(0, 0))
(iccstream = jas_stream_memopen(0, 0))
iccstream = jas_stream_memopen(0, 0)
iccstream
iccstream
jas_stream_memopen(0, 0)
jas_stream_memopen
jas_stream_memopen
0
0
{			jas_eprintf("cannot create temporary stream\n");			goto error;		}
jas_eprintf("cannot create temporary stream\n");
jas_eprintf("cannot create temporary stream\n")
jas_eprintf
jas_eprintf
"cannot create temporary stream\n"
goto error;
error
if (jas_iccprof_save(iccprof, iccstream)) {			jas_eprintf("cannot write ICC profile\n");			goto error;		}
jas_iccprof_save(iccprof, iccstream)
jas_iccprof_save
jas_iccprof_save
iccprof
iccprof
iccstream
iccstream
{			jas_eprintf("cannot write ICC profile\n");			goto error;		}
jas_eprintf("cannot write ICC profile\n");
jas_eprintf("cannot write ICC profile\n")
jas_eprintf
jas_eprintf
"cannot write ICC profile\n"
goto error;
error
if ((pos = jas_stream_tell(iccstream)) < 0) {			jas_eprintf("cannot get stream position\n");			goto error;		}
(pos = jas_stream_tell(iccstream)) < 0
(pos = jas_stream_tell(iccstream))
pos = jas_stream_tell(iccstream)
pos
pos
jas_stream_tell(iccstream)
jas_stream_tell
jas_stream_tell
iccstream
iccstream
0
{			jas_eprintf("cannot get stream position\n");			goto error;		}
jas_eprintf("cannot get stream position\n");
jas_eprintf("cannot get stream position\n")
jas_eprintf
jas_eprintf
"cannot get stream position\n"
goto error;
error
colr->iccplen = pos;
colr->iccplen = pos
colr->iccplen
colr
colr
iccplen
pos
pos
if (!(colr->iccp = jas_malloc(pos))) {			jas_eprintf("memory allocation failed\n");			goto error;		}
!(colr->iccp = jas_malloc(pos))
(colr->iccp = jas_malloc(pos))
colr->iccp = jas_malloc(pos)
colr->iccp
colr
colr
iccp
jas_malloc(pos)
jas_malloc
jas_malloc
pos
pos
{			jas_eprintf("memory allocation failed\n");			goto error;		}
jas_eprintf("memory allocation failed\n");
jas_eprintf("memory allocation failed\n")
jas_eprintf
jas_eprintf
"memory allocation failed\n"
goto error;
error
jas_stream_rewind(iccstream);
jas_stream_rewind(iccstream)
jas_stream_rewind
jas_stream_rewind
iccstream
iccstream
if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) !=		  colr->iccplen) {			jas_eprintf("cannot read temporary stream\n");			goto error;		}
jas_stream_read(iccstream, colr->iccp, colr->iccplen) !=		  colr->iccplen
jas_stream_read(iccstream, colr->iccp, colr->iccplen)
jas_stream_read
jas_stream_read
iccstream
iccstream
colr->iccp
colr
colr
iccp
colr->iccplen
colr
colr
iccplen
colr->iccplen
colr
colr
iccplen
{			jas_eprintf("cannot read temporary stream\n");			goto error;		}
jas_eprintf("cannot read temporary stream\n");
jas_eprintf("cannot read temporary stream\n")
jas_eprintf
jas_eprintf
"cannot read temporary stream\n"
goto error;
error
jas_stream_close(iccstream);
jas_stream_close(iccstream)
jas_stream_close
jas_stream_close
iccstream
iccstream
iccstream = 0;
iccstream = 0
iccstream
iccstream
0
jas_iccprof_destroy(iccprof);
jas_iccprof_destroy(iccprof)
jas_iccprof_destroy
jas_iccprof_destroy
iccprof
iccprof
iccprof = 0;
iccprof = 0
iccprof
iccprof
0
break;
if (jp2_box_put(box, tmpstream)) {		jas_eprintf("cannot write box\n");		goto error;	}
jp2_box_put(box, tmpstream)
jp2_box_put
jp2_box_put
box
box
tmpstream
tmpstream
{		jas_eprintf("cannot write box\n");		goto error;	}
jas_eprintf("cannot write box\n");
jas_eprintf("cannot write box\n")
jas_eprintf
jas_eprintf
"cannot write box\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
needcdef = 1;
needcdef = 1
needcdef
needcdef
1
switch (jas_clrspc_fam(jas_image_clrspc(image))) {	case JAS_CLRSPC_FAM_RGB:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_YCBCR:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_GRAY:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))			needcdef = 0;		break;	default:		abort();		break;	}
jas_clrspc_fam(jas_image_clrspc(image))
jas_clrspc_fam
jas_clrspc_fam
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
{	case JAS_CLRSPC_FAM_RGB:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_YCBCR:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_GRAY:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))			needcdef = 0;		break;	default:		abort();		break;	}
case JAS_CLRSPC_FAM_RGB:
JAS_CLRSPC_FAM_RGB
JAS_CLRSPC_FAM_RGB
if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))			needcdef = 0;
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)
jas_image_cmpttype(image, 0)
jas_image_cmpttype
jas_image_cmpttype
image
image
0
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_RGB_R
JAS_CLRSPC_CHANIND_RGB_R
jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
jas_image_cmpttype(image, 1)
jas_image_cmpttype
jas_image_cmpttype
image
image
1
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_RGB_G
JAS_CLRSPC_CHANIND_RGB_G
jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
jas_image_cmpttype(image, 2)
jas_image_cmpttype
jas_image_cmpttype
image
image
2
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_RGB_B
JAS_CLRSPC_CHANIND_RGB_B
needcdef = 0;
needcdef = 0
needcdef
needcdef
0
break;
case JAS_CLRSPC_FAM_YCBCR:
JAS_CLRSPC_FAM_YCBCR
JAS_CLRSPC_FAM_YCBCR
if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))			needcdef = 0;
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y)
jas_image_cmpttype(image, 0)
jas_image_cmpttype
jas_image_cmpttype
image
image
0
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_YCBCR_Y
JAS_CLRSPC_CHANIND_YCBCR_Y
jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
jas_image_cmpttype(image, 1)
jas_image_cmpttype
jas_image_cmpttype
image
image
1
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_YCBCR_CB
JAS_CLRSPC_CHANIND_YCBCR_CB
jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
jas_image_cmpttype(image, 2)
jas_image_cmpttype
jas_image_cmpttype
image
image
2
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_YCBCR_CR
JAS_CLRSPC_CHANIND_YCBCR_CR
needcdef = 0;
needcdef = 0
needcdef
needcdef
0
break;
case JAS_CLRSPC_FAM_GRAY:
JAS_CLRSPC_FAM_GRAY
JAS_CLRSPC_FAM_GRAY
if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))			needcdef = 0;
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y)
jas_image_cmpttype(image, 0)
jas_image_cmpttype
jas_image_cmpttype
image
image
0
JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_GRAY_Y
JAS_IMAGE_CT_GRAY_Y
needcdef = 0;
needcdef = 0
needcdef
needcdef
0
break;
default:
abort();
abort()
abort
abort
break;
if (needcdef) {		if (!(box = jp2_box_create(JP2_BOX_CDEF))) {			jas_eprintf("cannot create CDEF box\n");			goto error;		}		cdef = &box->data.cdef;		cdef->numchans = jas_image_numcmpts(image);		cdef->ents = jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t));		for (i = 0; i < jas_image_numcmpts(image); ++i) {			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}		if (jp2_box_put(box, tmpstream)) {			jas_eprintf("cannot write CDEF box\n");			goto error;		}		jp2_box_destroy(box);		box = 0;	}
needcdef
needcdef
{		if (!(box = jp2_box_create(JP2_BOX_CDEF))) {			jas_eprintf("cannot create CDEF box\n");			goto error;		}		cdef = &box->data.cdef;		cdef->numchans = jas_image_numcmpts(image);		cdef->ents = jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t));		for (i = 0; i < jas_image_numcmpts(image); ++i) {			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}		if (jp2_box_put(box, tmpstream)) {			jas_eprintf("cannot write CDEF box\n");			goto error;		}		jp2_box_destroy(box);		box = 0;	}
if (!(box = jp2_box_create(JP2_BOX_CDEF))) {			jas_eprintf("cannot create CDEF box\n");			goto error;		}
!(box = jp2_box_create(JP2_BOX_CDEF))
(box = jp2_box_create(JP2_BOX_CDEF))
box = jp2_box_create(JP2_BOX_CDEF)
box
box
jp2_box_create(JP2_BOX_CDEF)
jp2_box_create
jp2_box_create
JP2_BOX_CDEF
JP2_BOX_CDEF
{			jas_eprintf("cannot create CDEF box\n");			goto error;		}
jas_eprintf("cannot create CDEF box\n");
jas_eprintf("cannot create CDEF box\n")
jas_eprintf
jas_eprintf
"cannot create CDEF box\n"
goto error;
error
cdef = &box->data.cdef;
cdef = &box->data.cdef
cdef
cdef
&box->data.cdef
box->data.cdef
box->data
box
box
data
cdef
cdef->numchans = jas_image_numcmpts(image);
cdef->numchans = jas_image_numcmpts(image)
cdef->numchans
cdef
cdef
numchans
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
cdef->ents = jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t));
cdef->ents = jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t))
cdef->ents
cdef
cdef
ents
jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t))
jas_alloc2
jas_alloc2
cdef->numchans
cdef
cdef
numchans
sizeof(jp2_cdefchan_t)
jp2_cdefchan_t
jp2_cdefchan_t
jp2_cdefchan_t

for (i = 0; i < jas_image_numcmpts(image); ++i) {			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}
i = 0;
i = 0
i
i
0
i < jas_image_numcmpts(image)
i
i
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
++i
i
i
{			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}
cdefchanent = &cdef->ents[i];
cdefchanent = &cdef->ents[i]
cdefchanent
cdefchanent
&cdef->ents[i]
cdef->ents[i]
cdef->ents
cdef
cdef
ents
i
i
cdefchanent->channo = i;
cdefchanent->channo = i
cdefchanent->channo
cdefchanent
cdefchanent
channo
i
i
typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));
typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i))
typeasoc
typeasoc
jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i))
jp2_gettypeasoc
jp2_gettypeasoc
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
jas_image_cmpttype(image, i)
jas_image_cmpttype
jas_image_cmpttype
image
image
i
i
cdefchanent->type = typeasoc >> 16;
cdefchanent->type = typeasoc >> 16
cdefchanent->type
cdefchanent
cdefchanent
type
typeasoc >> 16
typeasoc
typeasoc
16
cdefchanent->assoc = typeasoc & 0x7fff;
cdefchanent->assoc = typeasoc & 0x7fff
cdefchanent->assoc
cdefchanent
cdefchanent
assoc
typeasoc & 0x7fff
typeasoc
typeasoc
0x7fff
if (jp2_box_put(box, tmpstream)) {			jas_eprintf("cannot write CDEF box\n");			goto error;		}
jp2_box_put(box, tmpstream)
jp2_box_put
jp2_box_put
box
box
tmpstream
tmpstream
{			jas_eprintf("cannot write CDEF box\n");			goto error;		}
jas_eprintf("cannot write CDEF box\n");
jas_eprintf("cannot write CDEF box\n")
jas_eprintf
jas_eprintf
"cannot write CDEF box\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
len = jas_stream_tell(tmpstream);
len = jas_stream_tell(tmpstream)
len
len
jas_stream_tell(tmpstream)
jas_stream_tell
jas_stream_tell
tmpstream
tmpstream
jas_stream_rewind(tmpstream);
jas_stream_rewind(tmpstream)
jas_stream_rewind
jas_stream_rewind
tmpstream
tmpstream
if (!(box = jp2_box_create(JP2_BOX_JP2H))) {		jas_eprintf("cannot create JP2H box\n");		goto error;	}
!(box = jp2_box_create(JP2_BOX_JP2H))
(box = jp2_box_create(JP2_BOX_JP2H))
box = jp2_box_create(JP2_BOX_JP2H)
box
box
jp2_box_create(JP2_BOX_JP2H)
jp2_box_create
jp2_box_create
JP2_BOX_JP2H
JP2_BOX_JP2H
{		jas_eprintf("cannot create JP2H box\n");		goto error;	}
jas_eprintf("cannot create JP2H box\n");
jas_eprintf("cannot create JP2H box\n")
jas_eprintf
jas_eprintf
"cannot create JP2H box\n"
goto error;
error
box->len = len + JP2_BOX_HDRLEN(false);
box->len = len + JP2_BOX_HDRLEN(false)
box->len
box
box
len
len + JP2_BOX_HDRLEN(false)
len
len
JP2_BOX_HDRLEN(false)
JP2_BOX_HDRLEN
JP2_BOX_HDRLEN
false
if (jp2_box_put(box, out)) {		jas_eprintf("cannot write JP2H box\n");		goto error;	}
jp2_box_put(box, out)
jp2_box_put
jp2_box_put
box
box
out
out
{		jas_eprintf("cannot write JP2H box\n");		goto error;	}
jas_eprintf("cannot write JP2H box\n");
jas_eprintf("cannot write JP2H box\n")
jas_eprintf
jas_eprintf
"cannot write JP2H box\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (jas_stream_copy(out, tmpstream, len)) {		jas_eprintf("cannot copy stream\n");		goto error;	}
jas_stream_copy(out, tmpstream, len)
jas_stream_copy
jas_stream_copy
out
out
tmpstream
tmpstream
len
len
{		jas_eprintf("cannot copy stream\n");		goto error;	}
jas_eprintf("cannot copy stream\n");
jas_eprintf("cannot copy stream\n")
jas_eprintf
jas_eprintf
"cannot copy stream\n"
goto error;
error
jas_stream_close(tmpstream);
jas_stream_close(tmpstream)
jas_stream_close
jas_stream_close
tmpstream
tmpstream
tmpstream = 0;
tmpstream = 0
tmpstream
tmpstream
0
if (!(box = jp2_box_create(JP2_BOX_JP2C))) {		jas_eprintf("cannot create JP2C box\n");		goto error;	}
!(box = jp2_box_create(JP2_BOX_JP2C))
(box = jp2_box_create(JP2_BOX_JP2C))
box = jp2_box_create(JP2_BOX_JP2C)
box
box
jp2_box_create(JP2_BOX_JP2C)
jp2_box_create
jp2_box_create
JP2_BOX_JP2C
JP2_BOX_JP2C
{		jas_eprintf("cannot create JP2C box\n");		goto error;	}
jas_eprintf("cannot create JP2C box\n");
jas_eprintf("cannot create JP2C box\n")
jas_eprintf
jas_eprintf
"cannot create JP2C box\n"
goto error;
error
box->len = 0;
box->len = 0
box->len
box
box
len
0
if (jp2_box_put(box, out)) {		jas_eprintf("cannot write JP2C box\n");		goto error;	}
jp2_box_put(box, out)
jp2_box_put
jp2_box_put
box
box
out
out
{		jas_eprintf("cannot write JP2C box\n");		goto error;	}
jas_eprintf("cannot write JP2C box\n");
jas_eprintf("cannot write JP2C box\n")
jas_eprintf
jas_eprintf
"cannot write JP2C box\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
overhead = jas_stream_getrwcount(out);
overhead = jas_stream_getrwcount(out)
overhead
overhead
jas_stream_getrwcount(out)
jas_stream_getrwcount
jas_stream_getrwcount
out
out
sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),	  (unsigned long) overhead);
sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),	  (unsigned long) overhead)
sprintf
sprintf
buf
buf
"%s\n_jp2overhead=%lu\n"
(optstr ? optstr : "")
optstr ? optstr : ""
optstr
optstr
optstr
optstr
""
(unsigned long) overhead
unsigned long
unsigned long

overhead
overhead
if (jpc_encode(image, out, buf)) {		jas_eprintf("jpc_encode failed\n");		goto error;	}
jpc_encode(image, out, buf)
jpc_encode
jpc_encode
image
image
out
out
buf
buf
{		jas_eprintf("jpc_encode failed\n");		goto error;	}
jas_eprintf("jpc_encode failed\n");
jas_eprintf("jpc_encode failed\n")
jas_eprintf
jas_eprintf
"jpc_encode failed\n"
goto error;
error
return 0;
0
error:	if (iccprof) {		jas_iccprof_destroy(iccprof);	}
error
if (iccprof) {		jas_iccprof_destroy(iccprof);	}
iccprof
iccprof
{		jas_iccprof_destroy(iccprof);	}
jas_iccprof_destroy(iccprof);
jas_iccprof_destroy(iccprof)
jas_iccprof_destroy
jas_iccprof_destroy
iccprof
iccprof
if (iccstream) {		jas_stream_close(iccstream);	}
iccstream
iccstream
{		jas_stream_close(iccstream);	}
jas_stream_close(iccstream);
jas_stream_close(iccstream)
jas_stream_close
jas_stream_close
iccstream
iccstream
if (box) {		jp2_box_destroy(box);	}
box
box
{		jp2_box_destroy(box);	}
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
if (tmpstream) {		jas_stream_close(tmpstream);	}
tmpstream
tmpstream
{		jas_stream_close(tmpstream);	}
jas_stream_close(tmpstream);
jas_stream_close(tmpstream)
jas_stream_close
jas_stream_close
tmpstream
tmpstream
return -1;
-1
1
-----joern-----
(276,495,0)
(312,800,0)
(360,696,0)
(762,161,0)
(426,386,0)
(292,327,0)
(21,224,0)
(213,462,0)
(367,375,0)
(654,247,0)
(264,131,0)
(633,656,0)
(408,673,0)
(607,318,0)
(638,326,0)
(490,352,0)
(630,4,0)
(635,438,0)
(20,327,0)
(377,153,0)
(153,337,0)
(581,684,0)
(383,168,0)
(17,140,0)
(441,361,0)
(337,170,0)
(10,23,0)
(696,652,0)
(737,552,0)
(413,427,0)
(10,449,0)
(606,746,0)
(215,735,0)
(623,481,0)
(287,99,0)
(425,652,0)
(112,28,0)
(23,10,0)
(50,763,0)
(397,81,0)
(593,652,0)
(329,509,0)
(428,743,0)
(767,75,0)
(50,804,0)
(86,166,0)
(50,143,0)
(50,785,0)
(608,459,0)
(222,652,0)
(433,158,0)
(483,541,0)
(561,327,0)
(206,652,0)
(608,804,0)
(749,652,0)
(447,656,0)
(187,620,0)
(728,146,0)
(50,731,0)
(128,515,0)
(314,759,0)
(158,773,0)
(608,168,0)
(724,658,0)
(684,465,0)
(258,142,0)
(570,803,0)
(621,646,0)
(230,446,0)
(50,160,0)
(727,652,0)
(252,630,0)
(661,327,0)
(147,279,0)
(124,652,0)
(336,652,0)
(645,765,0)
(186,206,0)
(783,654,0)
(584,502,0)
(324,491,0)
(791,557,0)
(371,100,0)
(584,327,0)
(81,652,0)
(70,509,0)
(423,652,0)
(109,28,0)
(64,175,0)
(670,792,0)
(44,109,0)
(158,286,0)
(555,652,0)
(688,481,0)
(732,664,0)
(545,81,0)
(798,614,0)
(193,666,0)
(357,207,0)
(514,371,0)
(311,22,0)
(747,311,0)
(144,445,0)
(692,361,0)
(546,347,0)
(273,447,0)
(242,656,0)
(76,557,0)
(284,702,0)
(689,652,0)
(588,2,0)
(43,420,0)
(255,547,0)
(89,656,0)
(396,168,0)
(319,217,0)
(130,362,0)
(248,98,0)
(342,161,0)
(340,321,0)
(323,270,0)
(50,490,0)
(275,687,0)
(9,552,0)
(389,265,0)
(469,559,0)
(660,308,0)
(726,775,0)
(185,652,0)
(73,652,0)
(608,490,0)
(476,755,0)
(453,509,0)
(765,536,0)
(706,652,0)
(677,148,0)
(189,3,0)
(423,347,0)
(11,761,0)
(608,204,0)
(168,772,0)
(608,414,0)
(50,414,0)
(709,698,0)
(348,702,0)
(265,509,0)
(674,29,0)
(19,306,0)
(458,464,0)
(25,767,0)
(473,652,0)
(656,395,0)
(729,344,0)
(588,611,0)
(220,792,0)
(635,124,0)
(114,650,0)
(178,652,0)
(585,562,0)
(288,49,0)
(36,60,0)
(771,509,0)
(767,557,0)
(731,696,0)
(154,140,0)
(739,696,0)
(99,551,0)
(670,754,0)
(545,280,0)
(572,459,0)
(184,599,0)
(735,652,0)
(609,689,0)
(339,652,0)
(163,632,0)
(752,652,0)
(573,2,0)
(355,287,0)
(115,326,0)
(711,771,0)
(685,290,0)
(540,140,0)
(162,457,0)
(772,652,0)
(119,490,0)
(361,744,0)
(588,772,0)
(703,327,0)
(167,166,0)
(604,302,0)
(212,140,0)
(106,556,0)
(646,659,0)
(325,76,0)
(696,360,0)
(668,779,0)
(589,2,0)
(547,442,0)
(379,669,0)
(125,549,0)
(318,109,0)
(566,706,0)
(699,228,0)
(41,414,0)
(265,542,0)
(169,691,0)
(50,459,0)
(311,747,0)
(112,298,0)
(110,420,0)
(462,769,0)
(391,144,0)
(464,686,0)
(311,725,0)
(551,99,0)
(181,414,0)
(137,555,0)
(179,139,0)
(158,547,0)
(118,66,0)
(398,661,0)
(655,99,0)
(744,29,0)
(21,555,0)
(8,464,0)
(201,279,0)
(358,763,0)
(442,547,0)
(700,2,0)
(772,588,0)
(233,743,0)
(352,664,0)
(562,561,0)
(405,698,0)
(259,302,0)
(568,697,0)
(608,404,0)
(174,652,0)
(77,121,0)
(257,611,0)
(141,286,0)
(452,588,0)
(386,226,0)
(465,562,0)
(50,189,0)
(79,463,0)
(517,216,0)
(708,658,0)
(659,118,0)
(200,599,0)
(651,232,0)
(568,689,0)
(87,652,0)
(592,584,0)
(50,575,0)
(779,339,0)
(601,596,0)
(556,465,0)
(432,447,0)
(387,588,0)
(541,314,0)
(796,731,0)
(50,545,0)
(746,605,0)
(103,545,0)
(581,657,0)
(180,654,0)
(749,773,0)
(431,652,0)
(329,304,0)
(50,404,0)
(28,109,0)
(741,633,0)
(801,183,0)
(608,265,0)
(357,360,0)
(359,484,0)
(452,290,0)
(85,279,0)
(561,761,0)
(50,464,0)
(707,580,0)
(602,556,0)
(503,755,0)
(451,404,0)
(436,425,0)
(72,631,0)
(402,137,0)
(205,631,0)
(434,99,0)
(493,633,0)
(608,785,0)
(608,160,0)
(330,605,0)
(608,285,0)
(149,20,0)
(204,557,0)
(717,326,0)
(757,803,0)
(447,193,0)
(185,125,0)
(374,785,0)
(299,707,0)
(743,125,0)
(802,749,0)
(608,575,0)
(255,580,0)
(518,124,0)
(369,652,0)
(760,143,0)
(290,452,0)
(583,557,0)
(716,160,0)
(781,600,0)
(578,680,0)
(521,307,0)
(133,703,0)
(360,357,0)
(774,388,0)
(102,465,0)
(75,570,0)
(513,201,0)
(170,580,0)
(246,124,0)
(368,731,0)
(461,140,0)
(529,382,0)
(450,529,0)
(748,202,0)
(7,204,0)
(485,686,0)
(208,146,0)
(650,125,0)
(251,140,0)
(183,664,0)
(11,657,0)
(90,571,0)
(598,11,0)
(583,25,0)
(44,327,0)
(608,746,0)
(759,98,0)
(326,717,0)
(135,515,0)
(227,265,0)
(608,731,0)
(297,652,0)
(334,71,0)
(625,121,0)
(743,36,0)
(101,24,0)
(804,547,0)
(608,596,0)
(786,652,0)
(792,327,0)
(373,761,0)
(559,552,0)
(613,353,0)
(317,652,0)
(196,264,0)
(203,664,0)
(204,120,0)
(806,586,0)
(504,652,0)
(414,557,0)
(70,143,0)
(91,700,0)
(92,434,0)
(642,404,0)
(37,62,0)
(563,329,0)
(659,646,0)
(410,556,0)
(109,318,0)
(670,646,0)
(407,652,0)
(107,684,0)
(773,519,0)
(218,771,0)
(460,189,0)
(698,453,0)
(478,664,0)
(684,581,0)
(512,684,0)
(362,327,0)
(629,247,0)
(496,162,0)
(755,503,0)
(361,201,0)
(98,759,0)
(132,652,0)
(553,570,0)
(322,440,0)
(495,773,0)
(177,351,0)
(438,635,0)
(771,559,0)
(50,652,0)
(691,656,0)
(542,720,0)
(240,652,0)
(40,665,0)
(803,675,0)
(710,586,0)
(138,620,0)
(89,652,0)
(554,175,0)
(261,20,0)
(229,664,0)
(300,652,0)
(510,314,0)
(51,746,0)
(403,503,0)
(704,140,0)
(18,46,0)
(455,308,0)
(564,509,0)
(513,85,0)
(194,327,0)
(682,536,0)
(655,803,0)
(440,322,0)
(417,448,0)
(507,279,0)
(225,777,0)
(263,138,0)
(459,306,0)
(758,666,0)
(723,588,0)
(492,246,0)
(597,228,0)
(25,583,0)
(150,327,0)
(353,547,0)
(427,652,0)
(558,319,0)
(209,737,0)
(804,0,0)
(720,542,0)
(524,89,0)
(790,22,0)
(594,244,0)
(532,285,0)
(683,652,0)
(792,670,0)
(2,673,0)
(608,76,0)
(298,112,0)
(363,326,0)
(639,800,0)
(568,482,0)
(50,168,0)
(137,327,0)
(19,557,0)
(0,652,0)
(758,652,0)
(165,190,0)
(71,279,0)
(718,258,0)
(266,547,0)
(329,322,0)
(157,663,0)
(207,773,0)
(372,652,0)
(582,475,0)
(506,50,0)
(570,75,0)
(82,662,0)
(286,652,0)
(600,761,0)
(57,665,0)
(709,36,0)
(555,137,0)
(12,628,0)
(560,189,0)
(280,545,0)
(498,652,0)
(224,630,0)
(50,699,0)
(511,125,0)
(776,160,0)
(150,167,0)
(158,121,0)
(84,306,0)
(76,680,0)
(543,459,0)
(617,153,0)
(454,211,0)
(124,351,0)
(769,462,0)
(143,747,0)
(80,490,0)
(526,652,0)
(516,194,0)
(489,762,0)
(650,165,0)
(608,529,0)
(747,784,0)
(764,204,0)
(142,238,0)
(647,703,0)
(616,352,0)
(695,226,0)
(675,803,0)
(722,753,0)
(193,447,0)
(156,767,0)
(326,363,0)
(191,655,0)
(671,751,0)
(127,46,0)
(356,445,0)
(703,452,0)
(474,777,0)
(738,652,0)
(672,207,0)
(120,664,0)
(522,745,0)
(425,436,0)
(648,641,0)
(50,513,0)
(608,699,0)
(520,115,0)
(341,804,0)
(314,510,0)
(15,658,0)
(142,664,0)
(99,610,0)
(406,129,0)
(237,140,0)
(26,763,0)
(3,652,0)
(221,664,0)
(364,650,0)
(58,575,0)
(20,261,0)
(419,652,0)
(313,280,0)
(529,758,0)
(785,758,0)
(651,652,0)
(66,327,0)
(503,488,0)
(188,140,0)
(446,580,0)
(365,610,0)
(192,583,0)
(198,632,0)
(633,125,0)
(235,652,0)
(605,279,0)
(182,660,0)
(50,76,0)
(184,327,0)
(381,583,0)
(27,769,0)
(462,213,0)
(59,442,0)
(249,585,0)
(484,535,0)
(620,138,0)
(497,99,0)
(495,580,0)
(519,773,0)
(35,495,0)
(195,314,0)
(557,23,0)
(28,558,0)
(4,166,0)
(621,632,0)
(224,21,0)
(632,327,0)
(217,319,0)
(50,258,0)
(734,21,0)
(109,44,0)
(167,150,0)
(164,409,0)
(294,762,0)
(321,557,0)
(789,699,0)
(29,744,0)
(435,652,0)
(380,193,0)
(74,635,0)
(588,452,0)
(231,232,0)
(656,691,0)
(294,201,0)
(392,4,0)
(319,194,0)
(785,423,0)
(558,28,0)
(646,621,0)
(25,384,0)
(773,797,0)
(122,382,0)
(228,652,0)
(466,804,0)
(333,185,0)
(746,201,0)
(463,270,0)
(250,786,0)
(719,56,0)
(404,557,0)
(665,327,0)
(260,561,0)
(585,327,0)
(75,548,0)
(50,204,0)
(618,664,0)
(608,464,0)
(23,557,0)
(713,678,0)
(420,652,0)
(60,36,0)
(319,558,0)
(168,758,0)
(680,664,0)
(699,696,0)
(770,664,0)
(614,268,0)
(115,125,0)
(778,70,0)
(756,600,0)
(48,165,0)
(335,292,0)
(744,85,0)
(646,670,0)
(6,246,0)
(533,634,0)
(222,462,0)
(586,11,0)
(608,148,0)
(763,557,0)
(541,664,0)
(561,562,0)
(663,202,0)
(649,140,0)
(48,279,0)
(158,326,0)
(309,145,0)
(159,709,0)
(175,652,0)
(34,66,0)
(50,586,0)
(415,167,0)
(793,173,0)
(61,651,0)
(499,100,0)
(409,608,0)
(337,652,0)
(176,709,0)
(148,758,0)
(401,339,0)
(502,584,0)
(45,207,0)
(477,652,0)
(52,66,0)
(780,76,0)
(608,763,0)
(22,327,0)
(306,664,0)
(779,475,0)
(418,138,0)
(346,652,0)
(50,148,0)
(285,581,0)
(158,462,0)
(782,373,0)
(243,439,0)
(686,652,0)
(799,529,0)
(30,4,0)
(733,48,0)
(579,522,0)
(143,70,0)
(129,145,0)
(269,477,0)
(479,785,0)
(245,753,0)
(253,140,0)
(534,652,0)
(487,19,0)
(375,3,0)
(93,596,0)
(714,54,0)
(347,423,0)
(414,75,0)
(343,587,0)
(4,630,0)
(304,62,0)
(384,25,0)
(653,137,0)
(172,457,0)
(121,652,0)
(296,664,0)
(267,523,0)
(537,307,0)
(199,8,0)
(608,321,0)
(449,10,0)
(471,298,0)
(194,319,0)
(505,664,0)
(600,756,0)
(562,585,0)
(635,0,0)
(766,652,0)
(353,652,0)
(575,178,0)
(611,652,0)
(385,362,0)
(632,621,0)
(28,112,0)
(643,70,0)
(289,652,0)
(330,327,0)
(354,699,0)
(395,656,0)
(331,166,0)
(591,258,0)
(565,280,0)
(158,481,0)
(472,639,0)
(118,49,0)
(615,131,0)
(755,153,0)
(67,316,0)
(701,664,0)
(50,265,0)
(158,36,0)
(605,330,0)
(55,621,0)
(624,513,0)
(422,321,0)
(158,705,0)
(452,703,0)
(54,99,0)
(715,184,0)
(654,602,0)
(21,292,0)
(562,465,0)
(138,85,0)
(232,651,0)
(187,247,0)
(158,614,0)
(491,462,0)
(494,439,0)
(449,326,0)
(125,439,0)
(347,327,0)
(608,513,0)
(630,224,0)
(736,10,0)
(779,105,0)
(234,652,0)
(590,329,0)
(759,314,0)
(223,756,0)
(608,515,0)
(292,21,0)
(361,605,0)
(39,217,0)
(50,654,0)
(382,652,0)
(805,561,0)
(697,652,0)
(272,761,0)
(219,161,0)
(427,326,0)
(49,118,0)
(626,706,0)
(621,55,0)
(123,664,0)
(596,425,0)
(698,709,0)
(306,803,0)
(388,216,0)
(246,580,0)
(468,115,0)
(5,539,0)
(439,125,0)
(295,652,0)
(14,305,0)
(549,125,0)
(744,361,0)
(599,200,0)
(95,652,0)
(42,290,0)
(315,652,0)
(486,201,0)
(721,165,0)
(567,449,0)
(78,232,0)
(508,19,0)
(491,8,0)
(767,25,0)
(345,44,0)
(232,327,0)
(281,194,0)
(506,608,0)
(437,552,0)
(444,285,0)
(173,36,0)
(693,697,0)
(740,798,0)
(539,211,0)
(292,166,0)
(143,552,0)
(246,125,0)
(22,311,0)
(430,475,0)
(46,652,0)
(38,767,0)
(763,183,0)
(85,744,0)
(678,571,0)
(538,148,0)
(725,327,0)
(328,652,0)
(557,652,0)
(754,670,0)
(320,521,0)
(775,327,0)
(108,664,0)
(599,184,0)
(278,330,0)
(62,327,0)
(614,798,0)
(100,652,0)
(50,285,0)
(238,775,0)
(118,659,0)
(171,697,0)
(641,652,0)
(160,378,0)
(637,36,0)
(63,462,0)
(528,25,0)
(366,449,0)
(619,652,0)
(370,568,0)
(559,771,0)
(371,758,0)
(160,614,0)
(464,8,0)
(302,664,0)
(666,193,0)
(151,652,0)
(158,165,0)
(241,44,0)
(608,371,0)
(50,321,0)
(453,698,0)
(344,652,0)
(630,651,0)
(608,652,0)
(321,662,0)
(25,99,0)
(244,658,0)
(50,515,0)
(399,497,0)
(50,371,0)
(152,786,0)
(134,754,0)
(620,761,0)
(694,652,0)
(47,339,0)
(116,371,0)
(207,357,0)
(467,652,0)
(66,118,0)
(608,258,0)
(595,436,0)
(285,247,0)
(304,658,0)
(8,491,0)
(523,332,0)
(280,696,0)
(68,178,0)
(62,304,0)
(247,657,0)
(3,375,0)
(794,610,0)
(547,266,0)
(111,13,0)
(803,655,0)
(459,557,0)
(97,348,0)
(378,652,0)
(730,717,0)
(268,614,0)
(608,545,0)
(390,150,0)
(456,378,0)
(665,112,0)
(189,758,0)
(676,184,0)
(153,755,0)
(283,652,0)
(271,206,0)
(475,664,0)
(305,136,0)
(117,611,0)
(165,587,0)
(65,652,0)
(603,503,0)
(756,327,0)
(640,72,0)
(681,614,0)
(113,255,0)
(376,745,0)
(322,542,0)
(94,755,0)
(641,614,0)
(662,664,0)
(126,758,0)
(36,173,0)
(287,314,0)
(725,311,0)
(501,503,0)
(527,292,0)
(550,634,0)
(583,306,0)
(13,139,0)
(282,652,0)
(636,108,0)
(31,491,0)
(608,654,0)
(104,535,0)
(700,611,0)
(4,327,0)
(238,142,0)
(620,187,0)
(303,792,0)
(568,125,0)
(735,125,0)
(762,294,0)
(394,279,0)
(277,244,0)
(707,614,0)
(481,652,0)
(54,530,0)
(362,580,0)
(436,327,0)
(310,707,0)
(587,165,0)
(291,170,0)
(544,531,0)
(775,238,0)
(608,143,0)
(69,519,0)
(497,664,0)
(548,75,0)
(575,696,0)
(375,327,0)
(577,627,0)
(214,120,0)
(622,555,0)
(421,547,0)
(608,189,0)
(569,652,0)
(556,602,0)
(586,247,0)
(509,658,0)
(628,658,0)
(797,773,0)
(434,664,0)
(608,586,0)
(644,337,0)
(779,314,0)
(54,420,0)
(690,788,0)
(148,344,0)
(170,337,0)
(22,552,0)
(404,108,0)
(531,788,0)
(443,136,0)
(416,438,0)
(515,304,0)
(666,758,0)
(338,652,0)
(262,50,0)
(429,652,0)
(500,440,0)
(679,332,0)
(525,357,0)
(83,140,0)
(112,665,0)
(446,462,0)
(771,304,0)
(0,635,0)
(24,166,0)
(290,327,0)
(725,552,0)
(155,255,0)
(53,222,0)
(254,652,0)
(50,596,0)
(350,200,0)
(138,201,0)
(787,725,0)
(480,658,0)
(33,761,0)
(384,19,0)
(424,722,0)
(88,71,0)
(197,446,0)
(161,762,0)
(509,453,0)
(258,557,0)
(542,322,0)
(247,187,0)
(490,557,0)
(349,669,0)
(50,746,0)
(19,384,0)
(687,56,0)
(351,124,0)
(742,627,0)
(1,513,0)
(50,529,0)
(465,657,0)
(795,246,0)
(236,620,0)
(628,36,0)
(158,656,0)
(612,99,0)
(210,287,0)
(54,302,0)
(201,294,0)
(755,652,0)
(70,542,0)
(153,617,0)
(576,652,0)
(602,657,0)
(393,725,0)
(731,477,0)
(98,327,0)
(316,448,0)
(351,125,0)
(750,675,0)
(400,664,0)
(274,286,0)
(190,165,0)
(96,728,0)
(161,165,0)
(574,55,0)
(322,329,0)
(712,664,0)
(470,689,0)
(239,22,0)
(515,509,0)
(411,575,0)
(596,758,0)
(610,99,0)
(32,362,0)
(293,533,0)
(768,773,0)
(273,432,1)
(366,567,1)
(201,294,1)
(527,335,1)
(208,728,1)
(548,75,1)
(397,545,1)
(137,653,1)
(691,169,1)
(542,322,1)
(25,583,1)
(357,207,1)
(178,68,1)
(158,286,1)
(782,602,1)
(734,292,1)
(452,703,1)
(565,313,1)
(791,363,1)
(167,166,1)
(771,711,1)
(287,210,1)
(329,509,1)
(246,125,1)
(36,173,1)
(50,596,1)
(422,680,1)
(608,654,1)
(449,366,1)
(698,709,1)
(217,39,1)
(450,799,1)
(594,628,1)
(581,684,1)
(669,379,1)
(562,585,1)
(596,758,1)
(170,580,1)
(91,206,1)
(301,376,1)
(345,319,1)
(486,190,1)
(415,24,1)
(50,143,1)
(249,102,1)
(134,792,1)
(508,25,1)
(248,195,1)
(529,450,1)
(513,624,1)
(159,564,1)
(102,11,1)
(239,143,1)
(545,103,1)
(18,127,1)
(326,717,1)
(783,180,1)
(641,614,1)
(141,353,1)
(325,142,1)
(153,617,1)
(76,557,1)
(767,557,1)
(568,697,1)
(232,231,1)
(244,277,1)
(747,311,1)
(424,495,1)
(344,729,1)
(803,655,1)
(644,121,1)
(717,730,1)
(181,41,1)
(54,99,1)
(722,424,1)
(360,357,1)
(117,339,1)
(679,523,1)
(158,656,1)
(305,14,1)
(503,501,1)
(739,797,1)
(334,88,1)
(689,470,1)
(50,654,1)
(285,247,1)
(718,591,1)
(63,408,1)
(255,580,1)
(755,503,1)
(666,193,1)
(707,580,1)
(156,528,1)
(245,722,1)
(291,644,1)
(556,465,1)
(583,192,1)
(608,490,1)
(589,224,1)
(207,672,1)
(347,546,1)
(365,612,1)
(50,763,1)
(33,85,1)
(583,306,1)
(472,650,1)
(143,760,1)
(170,291,1)
(45,739,1)
(195,502,1)
(762,161,1)
(620,138,1)
(409,164,1)
(228,597,1)
(192,381,1)
(490,557,1)
(265,509,1)
(294,762,1)
(583,557,1)
(2,573,1)
(438,416,1)
(157,384,1)
(776,716,1)
(633,741,1)
(562,561,1)
(408,2,1)
(403,603,1)
(165,587,1)
(261,20,1)
(552,9,1)
(219,486,1)
(158,773,1)
(276,35,1)
(160,614,1)
(20,149,1)
(351,177,1)
(579,255,1)
(540,154,1)
(353,547,1)
(608,404,1)
(787,393,1)
(608,464,1)
(173,793,1)
(672,45,1)
(329,590,1)
(50,414,1)
(675,750,1)
(423,347,1)
(197,686,1)
(497,399,1)
(19,306,1)
(329,304,1)
(563,265,1)
(767,38,1)
(781,373,1)
(81,397,1)
(503,403,1)
(355,551,1)
(599,184,1)
(153,377,1)
(577,659,1)
(413,115,1)
(384,19,1)
(485,464,1)
(598,586,1)
(736,449,1)
(402,622,1)
(769,27,1)
(503,488,1)
(233,428,1)
(414,557,1)
(89,656,1)
(434,99,1)
(288,66,1)
(342,219,1)
(713,707,1)
(585,327,1)
(700,91,1)
(608,143,1)
(24,101,1)
(193,447,1)
(726,258,1)
(292,327,1)
(427,326,1)
(716,268,1)
(347,327,1)
(198,163,1)
(678,713,1)
(401,47,1)
(804,547,1)
(621,55,1)
(82,321,1)
(541,483,1)
(573,589,1)
(100,499,1)
(616,490,1)
(205,72,1)
(25,99,1)
(427,413,1)
(491,324,1)
(164,568,1)
(720,542,1)
(687,275,1)
(66,327,1)
(641,648,1)
(258,718,1)
(32,755,1)
(515,509,1)
(758,666,1)
(412,540,1)
(611,257,1)
(731,696,1)
(130,32,1)
(46,18,1)
(661,398,1)
(515,128,1)
(243,494,1)
(670,792,1)
(447,656,1)
(799,100,1)
(493,382,1)
(272,33,1)
(798,740,1)
(242,549,1)
(793,637,1)
(723,168,1)
(371,758,1)
(463,79,1)
(290,327,1)
(25,767,1)
(301,455,1)
(306,84,1)
(744,29,1)
(118,49,1)
(186,271,1)
(311,22,1)
(260,805,1)
(40,57,1)
(518,71,1)
(158,165,1)
(144,391,1)
(730,638,1)
(779,314,1)
(550,533,1)
(210,355,1)
(514,344,1)
(48,165,1)
(8,491,1)
(792,220,1)
(771,509,1)
(645,60,1)
(135,509,1)
(277,594,1)
(760,70,1)
(704,599,1)
(558,28,1)
(604,259,1)
(654,247,1)
(223,781,1)
(677,538,1)
(19,487,1)
(303,621,1)
(5,287,1)
(257,117,1)
(374,479,1)
(399,384,1)
(176,159,1)
(699,789,1)
(16,256,1)
(555,137,1)
(615,264,1)
(523,267,1)
(434,92,1)
(512,285,1)
(43,689,1)
(543,572,1)
(384,25,1)
(224,21,1)
(608,285,1)
(158,614,1)
(167,150,1)
(559,552,1)
(608,575,1)
(231,78,1)
(50,586,1)
(383,425,1)
(35,81,1)
(804,341,1)
(458,8,1)
(805,585,1)
(495,276,1)
(517,388,1)
(398,557,1)
(322,440,1)
(395,656,1)
(547,442,1)
(97,551,1)
(154,261,1)
(755,153,1)
(267,510,1)
(160,776,1)
(319,217,1)
(11,598,1)
(189,758,1)
(286,274,1)
(138,85,1)
(180,581,1)
(567,791,1)
(446,462,1)
(50,545,1)
(570,803,1)
(659,646,1)
(227,304,1)
(88,48,1)
(301,312,1)
(545,280,1)
(430,541,1)
(4,327,1)
(393,22,1)
(483,302,1)
(350,184,1)
(4,392,1)
(113,155,1)
(531,544,1)
(532,465,1)
(362,580,1)
(24,166,1)
(37,515,1)
(199,491,1)
(387,723,1)
(377,503,1)
(391,743,1)
(622,651,1)
(638,700,1)
(158,481,1)
(168,396,1)
(608,371,1)
(158,121,1)
(404,451,1)
(416,74,1)
(707,310,1)
(50,529,1)
(44,241,1)
(608,160,1)
(743,125,1)
(459,557,1)
(301,179,1)
(31,213,1)
(78,61,1)
(301,517,1)
(72,640,1)
(546,785,1)
(370,16,1)
(636,404,1)
(284,348,1)
(21,734,1)
(29,674,1)
(651,232,1)
(733,650,1)
(158,547,1)
(620,236,1)
(255,113,1)
(255,547,1)
(625,641,1)
(44,327,1)
(271,89,1)
(714,667,1)
(553,414,1)
(301,682,1)
(258,557,1)
(568,689,1)
(109,318,1)
(584,592,1)
(50,575,1)
(764,661,1)
(269,731,1)
(50,731,1)
(71,334,1)
(688,749,1)
(89,524,1)
(541,314,1)
(777,474,1)
(298,471,1)
(495,580,1)
(441,692,1)
(21,555,1)
(50,258,1)
(331,86,1)
(54,714,1)
(265,389,1)
(34,261,1)
(57,109,1)
(603,476,1)
(50,699,1)
(1,605,1)
(779,339,1)
(436,595,1)
(415,166,1)
(106,654,1)
(13,111,1)
(796,368,1)
(264,196,1)
(50,746,1)
(50,148,1)
(7,764,1)
(22,552,1)
(128,135,1)
(236,138,1)
(630,4,1)
(426,720,1)
(595,596,1)
(591,183,1)
(789,354,1)
(639,472,1)
(60,36,1)
(608,699,1)
(464,8,1)
(190,165,1)
(709,176,1)
(115,326,1)
(375,367,1)
(189,460,1)
(356,144,1)
(150,390,1)
(3,375,1)
(126,395,1)
(455,660,1)
(115,125,1)
(148,758,1)
(68,575,1)
(801,763,1)
(763,358,1)
(278,746,1)
(592,108,1)
(322,329,1)
(703,647,1)
(600,756,1)
(392,30,1)
(50,189,1)
(647,133,1)
(47,420,1)
(646,670,1)
(584,327,1)
(568,125,1)
(599,200,1)
(232,327,1)
(570,553,1)
(763,557,1)
(674,361,1)
(628,12,1)
(528,434,1)
(449,326,1)
(719,687,1)
(361,605,1)
(301,537,1)
(608,148,1)
(802,495,1)
(780,325,1)
(774,446,1)
(109,44,1)
(280,696,1)
(252,4,1)
(358,26,1)
(608,414,1)
(371,116,1)
(301,550,1)
(575,58,1)
(246,124,1)
(64,554,1)
(633,656,1)
(411,228,1)
(177,518,1)
(39,194,1)
(166,331,1)
(451,642,1)
(52,34,1)
(50,513,1)
(601,423,1)
(587,343,1)
(696,360,1)
(665,40,1)
(575,696,1)
(28,112,1)
(214,204,1)
(588,387,1)
(650,125,1)
(107,512,1)
(19,557,1)
(754,134,1)
(225,558,1)
(339,401,1)
(474,225,1)
(568,370,1)
(74,804,1)
(496,548,1)
(778,559,1)
(76,780,1)
(120,214,1)
(93,601,1)
(628,36,1)
(692,513,1)
(26,661,1)
(740,681,1)
(695,386,1)
(215,124,1)
(600,761,1)
(386,426,1)
(756,327,1)
(608,746,1)
(262,362,1)
(462,769,1)
(54,302,1)
(642,352,1)
(42,723,1)
(743,36,1)
(623,688,1)
(491,462,1)
(158,326,1)
(554,427,1)
(608,515,1)
(444,532,1)
(20,327,1)
(67,797,1)
(362,327,1)
(529,758,1)
(605,330,1)
(608,529,1)
(469,552,1)
(725,787,1)
(292,527,1)
(494,511,1)
(785,374,1)
(746,606,1)
(748,663,1)
(452,290,1)
(749,802,1)
(204,557,1)
(319,194,1)
(608,189,1)
(794,365,1)
(4,166,1)
(30,167,1)
(193,380,1)
(469,737,1)
(301,245,1)
(626,566,1)
(16,158,1)
(98,248,1)
(222,53,1)
(446,580,1)
(489,161,1)
(746,201,1)
(337,170,1)
(484,359,1)
(396,383,1)
(440,500,1)
(158,462,1)
(63,167,1)
(785,758,1)
(11,761,1)
(301,284,1)
(263,629,1)
(188,777,1)
(428,559,1)
(497,99,1)
(447,273,1)
(520,468,1)
(685,42,1)
(256,667,1)
(635,438,1)
(230,197,1)
(464,458,1)
(549,125,1)
(602,556,1)
(608,545,1)
(6,795,1)
(185,333,1)
(158,36,1)
(406,675,1)
(757,287,1)
(133,290,1)
(238,775,1)
(62,37,1)
(495,773,1)
(213,462,1)
(50,204,1)
(21,292,1)
(390,415,1)
(608,785,1)
(693,171,1)
(609,706,1)
(194,327,1)
(38,156,1)
(50,515,1)
(111,362,1)
(460,560,1)
(293,268,1)
(362,385,1)
(171,185,1)
(162,496,1)
(668,301,1)
(75,570,1)
(737,209,1)
(510,314,1)
(627,742,1)
(348,97,1)
(574,632,1)
(122,529,1)
(500,329,1)
(121,77,1)
(655,99,1)
(559,771,1)
(551,99,1)
(561,327,1)
(779,668,1)
(137,327,1)
(729,148,1)
(183,801,1)
(10,736,1)
(608,731,1)
(475,582,1)
(741,493,1)
(169,242,1)
(301,323,1)
(341,466,1)
(558,319,1)
(681,697,1)
(654,783,1)
(660,182,1)
(725,327,1)
(188,558,1)
(648,707,1)
(168,758,1)
(643,778,1)
(94,337,1)
(797,773,1)
(382,122,1)
(608,804,1)
(725,552,1)
(525,207,1)
(340,422,1)
(290,685,1)
(586,806,1)
(158,433,1)
(684,465,1)
(608,265,1)
(608,168,1)
(301,679,1)
(417,316,1)
(330,327,1)
(765,645,1)
(161,165,1)
(630,651,1)
(759,98,1)
(119,120,1)
(487,508,1)
(706,626,1)
(630,252,1)
(182,502,1)
(149,46,1)
(301,356,1)
(62,327,1)
(127,175,1)
(421,735,1)
(0,635,1)
(518,412,1)
(521,320,1)
(588,611,1)
(311,725,1)
(509,453,1)
(772,588,1)
(750,803,1)
(50,76,1)
(418,263,1)
(385,130,1)
(388,774,1)
(148,677,1)
(684,107,1)
(506,608,1)
(259,497,1)
(330,278,1)
(767,75,1)
(287,314,1)
(792,327,1)
(608,321,1)
(207,773,1)
(287,99,1)
(304,62,1)
(90,678,1)
(524,633,1)
(761,272,1)
(281,261,1)
(27,63,1)
(653,402,1)
(728,96,1)
(731,796,1)
(721,412,1)
(456,160,1)
(712,662,1)
(313,178,1)
(775,327,1)
(699,696,1)
(206,186,1)
(70,643,1)
(715,261,1)
(333,246,1)
(596,93,1)
(50,168,1)
(608,763,1)
(775,726,1)
(129,406,1)
(786,152,1)
(468,732,1)
(364,114,1)
(10,449,1)
(454,539,1)
(266,547,1)
(357,525,1)
(707,614,1)
(142,238,1)
(301,104,1)
(50,262,1)
(172,162,1)
(481,623,1)
(70,509,1)
(58,411,1)
(301,748,1)
(175,64,1)
(471,665,1)
(50,265,1)
(468,712,1)
(138,201,1)
(352,616,1)
(655,191,1)
(50,160,1)
(23,10,1)
(80,119,1)
(222,462,1)
(665,327,1)
(54,420,1)
(96,213,1)
(50,804,1)
(70,542,1)
(301,695,1)
(103,280,1)
(470,609,1)
(275,363,1)
(218,469,1)
(709,36,1)
(246,580,1)
(301,417,1)
(285,444,1)
(22,790,1)
(361,441,1)
(588,452,1)
(250,222,1)
(335,630,1)
(50,464,1)
(646,621,1)
(610,794,1)
(633,125,1)
(735,125,1)
(614,798,1)
(544,633,1)
(506,50,1)
(582,430,1)
(50,785,1)
(114,600,1)
(768,786,1)
(253,659,1)
(607,44,1)
(443,305,1)
(561,761,1)
(164,16,1)
(79,190,1)
(310,299,1)
(361,201,1)
(638,244,1)
(659,118,1)
(59,421,1)
(539,5,1)
(50,321,1)
(556,410,1)
(412,704,1)
(453,698,1)
(292,166,1)
(41,306,1)
(353,613,1)
(280,565,1)
(742,577,1)
(690,531,1)
(143,70,1)
(700,2,1)
(465,562,1)
(624,1,1)
(110,43,1)
(9,437,1)
(77,625,1)
(8,199,1)
(274,141,1)
(477,269,1)
(466,266,1)
(301,205,1)
(112,298,1)
(301,172,1)
(437,720,1)
(499,371,1)
(439,243,1)
(368,696,1)
(86,555,1)
(191,757,1)
(661,327,1)
(737,552,1)
(125,439,1)
(112,665,1)
(200,350,1)
(608,204,1)
(779,475,1)
(301,309,1)
(412,188,1)
(256,54,1)
(55,574,1)
(321,340,1)
(50,371,1)
(343,721,1)
(209,747,1)
(680,578,1)
(425,436,1)
(650,364,1)
(349,599,1)
(537,521,1)
(703,327,1)
(572,675,1)
(253,627,1)
(53,446,1)
(588,2,1)
(773,519,1)
(762,489,1)
(179,13,1)
(608,596,1)
(48,733,1)
(795,286,1)
(732,475,1)
(513,201,1)
(14,549,1)
(686,485,1)
(410,106,1)
(608,258,1)
(301,719,1)
(667,301,1)
(676,715,1)
(650,165,1)
(744,361,1)
(161,342,1)
(620,761,1)
(301,690,1)
(185,125,1)
(640,246,1)
(118,66,1)
(373,761,1)
(108,636,1)
(613,255,1)
(756,223,1)
(381,767,1)
(302,604,1)
(309,129,1)
(316,67,1)
(150,327,1)
(608,409,1)
(367,189,1)
(612,510,1)
(710,247,1)
(663,157,1)
(359,266,1)
(700,611,1)
(743,233,1)
(637,700,1)
(522,579,1)
(412,253,1)
(354,477,1)
(49,288,1)
(656,691,1)
(152,250,1)
(433,256,1)
(92,548,1)
(675,803,1)
(635,124,1)
(476,94,1)
(155,0,1)
(806,710,1)
(104,484,1)
(479,3,1)
(98,327,1)
(557,23,1)
(771,304,1)
(220,303,1)
(84,459,1)
(749,773,1)
(608,459,1)
(501,603,1)
(247,187,1)
(312,639,1)
(184,327,1)
(85,744,1)
(61,611,1)
(12,743,1)
(184,676,1)
(682,765,1)
(608,513,1)
(379,349,1)
(380,447,1)
(51,201,1)
(560,758,1)
(442,59,1)
(561,260,1)
(163,118,1)
(378,456,1)
(667,779,1)
(490,80,1)
(597,699,1)
(790,239,1)
(578,76,1)
(224,630,1)
(50,490,1)
(538,772,1)
(50,459,1)
(323,463,1)
(606,51,1)
(632,198,1)
(268,614,1)
(608,586,1)
(299,378,1)
(204,7,1)
(69,768,1)
(196,115,1)
(414,181,1)
(153,337,1)
(632,327,1)
(459,543,1)
(564,60,1)
(662,82,1)
(101,224,1)
(590,563,1)
(22,327,1)
(321,557,1)
(735,215,1)
(143,552,1)
(781,761,1)
(116,514,1)
(28,109,1)
(241,345,1)
(389,227,1)
(194,516,1)
(629,600,1)
(585,249,1)
(586,247,1)
(314,759,1)
(246,492,1)
(115,520,1)
(301,90,1)
(446,230,1)
(99,610,1)
(704,669,1)
(711,218,1)
(432,126,1)
(50,404,1)
(50,285,1)
(363,326,1)
(608,76,1)
(533,293,1)
(502,584,1)
(519,69,1)
(404,557,1)
(698,405,1)
(138,418,1)
(516,281,1)
(621,632,1)
(376,522,1)
(351,125,1)
(324,31,1)
(187,620,1)
(436,327,1)
(320,395,1)
(318,607,1)
(301,443,1)
(670,754,1)
(697,693,1)
(373,782,1)
(420,110,1)
(66,52,1)
(301,454,1)
(375,327,1)
(124,351,1)
(492,6,1)
(301,208,1)
(301,615,1)
(405,709,1)
(306,803,1)
(511,481,1)
(302,384,2)
(256,266,2)
(632,327,2)
(452,723,2)
(228,797,2)
(16,190,2)
(608,371,2)
(343,412,2)
(725,327,2)
(112,665,2)
(409,268,2)
(551,99,2)
(125,439,2)
(608,495,2)
(12,743,2)
(158,326,2)
(171,246,2)
(453,60,2)
(168,395,2)
(97,551,2)
(650,125,2)
(794,510,2)
(720,60,2)
(540,261,2)
(757,287,2)
(598,600,2)
(621,55,2)
(337,707,2)
(144,743,2)
(588,2,2)
(743,36,2)
(233,720,2)
(371,758,2)
(804,547,2)
(107,600,2)
(737,559,2)
(360,357,2)
(459,557,2)
(465,562,2)
(62,60,2)
(128,60,2)
(725,559,2)
(542,322,2)
(667,384,2)
(363,743,2)
(755,153,2)
(531,633,2)
(515,509,2)
(759,502,2)
(563,60,2)
(608,268,2)
(489,190,2)
(75,570,2)
(667,720,2)
(397,797,2)
(305,549,2)
(241,319,2)
(710,600,2)
(602,556,2)
(409,549,2)
(256,707,2)
(491,462,2)
(608,287,2)
(368,797,2)
(306,803,2)
(588,395,2)
(722,495,2)
(301,268,2)
(409,190,2)
(384,548,2)
(630,651,2)
(94,707,2)
(121,707,2)
(256,495,2)
(85,190,2)
(573,224,2)
(311,559,2)
(650,190,2)
(53,446,2)
(608,168,2)
(520,661,2)
(442,650,2)
(514,395,2)
(323,190,2)
(263,600,2)
(183,661,2)
(164,707,2)
(608,60,2)
(298,109,2)
(768,446,2)
(533,268,2)
(495,773,2)
(247,600,2)
(143,552,2)
(773,519,2)
(16,287,2)
(613,255,2)
(158,547,2)
(608,650,2)
(561,600,2)
(403,603,2)
(347,395,2)
(687,363,2)
(164,495,2)
(310,268,2)
(608,804,2)
(16,650,2)
(711,720,2)
(301,720,2)
(771,559,2)
(290,327,2)
(161,190,2)
(506,608,2)
(370,16,2)
(256,60,2)
(404,661,2)
(113,266,2)
(711,559,2)
(185,246,2)
(311,725,2)
(215,412,2)
(404,557,2)
(264,115,2)
(54,99,2)
(16,395,2)
(409,548,2)
(409,246,2)
(719,363,2)
(225,558,2)
(375,395,2)
(14,549,2)
(709,60,2)
(596,758,2)
(256,743,2)
(360,797,2)
(608,76,2)
(743,125,2)
(599,261,2)
(255,266,2)
(675,803,2)
(246,255,2)
(682,60,2)
(50,785,2)
(761,190,2)
(358,661,2)
(280,797,2)
(556,465,2)
(596,395,2)
(50,371,2)
(781,190,2)
(16,60,2)
(666,193,2)
(194,261,2)
(744,29,2)
(510,502,2)
(81,797,2)
(638,700,2)
(70,559,2)
(779,339,2)
(661,327,2)
(608,596,2)
(109,319,2)
(164,362,2)
(773,446,2)
(608,446,2)
(547,650,2)
(621,118,2)
(735,125,2)
(50,596,2)
(543,675,2)
(391,743,2)
(45,797,2)
(281,261,2)
(76,661,2)
(483,384,2)
(512,600,2)
(641,614,2)
(24,166,2)
(280,696,2)
(155,266,2)
(91,633,2)
(351,125,2)
(666,395,2)
(623,495,2)
(737,552,2)
(55,118,2)
(446,213,2)
(58,797,2)
(717,743,2)
(546,395,2)
(293,268,2)
(170,707,2)
(667,551,2)
(7,661,2)
(215,650,2)
(730,700,2)
(301,255,2)
(70,509,2)
(266,412,2)
(584,327,2)
(715,261,2)
(599,200,2)
(425,436,2)
(748,384,2)
(608,395,2)
(16,502,2)
(181,675,2)
(9,720,2)
(84,675,2)
(348,551,2)
(359,266,2)
(601,395,2)
(301,797,2)
(351,412,2)
(116,395,2)
(605,190,2)
(8,213,2)
(164,548,2)
(608,255,2)
(304,60,2)
(11,600,2)
(565,797,2)
(668,301,2)
(608,633,2)
(164,675,2)
(421,650,2)
(286,255,2)
(164,395,2)
(19,306,2)
(301,510,2)
(59,412,2)
(570,675,2)
(122,395,2)
(256,363,2)
(341,266,2)
(268,614,2)
(112,298,2)
(21,292,2)
(38,548,2)
(590,60,2)
(795,255,2)
(484,266,2)
(541,384,2)
(256,395,2)
(247,187,2)
(50,362,2)
(390,224,2)
(69,446,2)
(409,287,2)
(558,28,2)
(605,330,2)
(118,49,2)
(475,384,2)
(749,495,2)
(578,661,2)
(256,551,2)
(80,661,2)
(736,363,2)
(275,363,2)
(409,115,2)
(785,758,2)
(481,495,2)
(659,261,2)
(447,395,2)
(804,266,2)
(544,633,2)
(758,666,2)
(735,412,2)
(256,362,2)
(245,495,2)
(583,548,2)
(50,545,2)
(746,201,2)
(195,502,2)
(608,246,2)
(23,10,2)
(217,261,2)
(267,510,2)
(608,763,2)
(16,446,2)
(158,614,2)
(98,502,2)
(677,395,2)
(184,327,2)
(667,797,2)
(469,559,2)
(686,213,2)
(3,395,2)
(558,319,2)
(610,510,2)
(16,510,2)
(646,621,2)
(50,575,2)
(312,650,2)
(322,329,2)
(529,758,2)
(427,326,2)
(16,633,2)
(595,395,2)
(707,614,2)
(21,630,2)
(785,395,2)
(153,337,2)
(628,743,2)
(164,115,2)
(54,302,2)
(314,759,2)
(301,395,2)
(559,720,2)
(629,600,2)
(409,266,2)
(502,584,2)
(667,213,2)
(16,213,2)
(50,321,2)
(103,797,2)
(746,190,2)
(238,661,2)
(50,529,2)
(115,125,2)
(48,165,2)
(409,213,2)
(288,261,2)
(608,490,2)
(335,630,2)
(588,452,2)
(164,384,2)
(98,327,2)
(696,360,2)
(532,600,2)
(698,60,2)
(452,703,2)
(667,190,2)
(366,363,2)
(479,395,2)
(388,446,2)
(409,743,2)
(608,699,2)
(670,621,2)
(16,675,2)
(378,268,2)
(258,557,2)
(584,661,2)
(222,446,2)
(30,167,2)
(158,165,2)
(19,548,2)
(599,184,2)
(549,495,2)
(740,246,2)
(624,190,2)
(318,319,2)
(472,650,2)
(409,502,2)
(256,650,2)
(778,559,2)
(40,109,2)
(16,246,2)
(153,617,2)
(10,449,2)
(187,600,2)
(762,190,2)
(64,115,2)
(650,165,2)
(409,60,2)
(256,549,2)
(319,217,2)
(90,707,2)
(490,661,2)
(120,661,2)
(562,600,2)
(486,190,2)
(164,60,2)
(704,261,2)
(612,510,2)
(33,190,2)
(164,246,2)
(164,190,2)
(772,395,2)
(517,446,2)
(209,559,2)
(301,287,2)
(239,559,2)
(164,266,2)
(292,630,2)
(642,661,2)
(608,731,2)
(0,635,2)
(266,650,2)
(50,148,2)
(767,557,2)
(583,306,2)
(667,363,2)
(608,189,2)
(497,99,2)
(638,743,2)
(633,125,2)
(125,495,2)
(322,440,2)
(468,384,2)
(667,287,2)
(384,19,2)
(301,446,2)
(575,696,2)
(574,118,2)
(277,743,2)
(780,661,2)
(409,446,2)
(106,600,2)
(178,797,2)
(4,327,2)
(35,797,2)
(160,614,2)
(734,630,2)
(801,661,2)
(256,510,2)
(750,287,2)
(274,255,2)
(16,707,2)
(164,446,2)
(22,552,2)
(36,700,2)
(568,125,2)
(521,395,2)
(159,60,2)
(424,495,2)
(439,495,2)
(375,327,2)
(373,761,2)
(361,201,2)
(164,510,2)
(697,246,2)
(111,362,2)
(353,255,2)
(44,319,2)
(797,446,2)
(314,502,2)
(640,246,2)
(608,190,2)
(608,464,2)
(552,720,2)
(730,743,2)
(667,650,2)
(655,287,2)
(452,290,2)
(361,605,2)
(625,707,2)
(735,650,2)
(16,551,2)
(118,66,2)
(177,650,2)
(194,327,2)
(365,510,2)
(301,650,2)
(220,621,2)
(670,754,2)
(76,557,2)
(608,363,2)
(700,611,2)
(406,675,2)
(450,395,2)
(223,190,2)
(337,170,2)
(589,224,2)
(772,588,2)
(423,395,2)
(23,363,2)
(728,213,2)
(393,559,2)
(189,758,2)
(223,600,2)
(714,667,2)
(345,319,2)
(409,707,2)
(344,395,2)
(787,559,2)
(224,630,2)
(459,675,2)
(646,118,2)
(158,286,2)
(713,707,2)
(499,395,2)
(373,600,2)
(608,384,2)
(510,314,2)
(620,600,2)
(261,115,2)
(287,314,2)
(383,395,2)
(44,327,2)
(316,797,2)
(301,551,2)
(329,509,2)
(385,707,2)
(190,165,2)
(581,684,2)
(109,44,2)
(292,166,2)
(455,502,2)
(427,115,2)
(449,363,2)
(227,60,2)
(303,621,2)
(89,633,2)
(608,746,2)
(41,675,2)
(667,549,2)
(276,797,2)
(25,548,2)
(34,261,2)
(88,650,2)
(792,327,2)
(783,600,2)
(501,603,2)
(718,661,2)
(364,190,2)
(104,266,2)
(301,743,2)
(256,675,2)
(667,255,2)
(545,797,2)
(755,707,2)
(511,495,2)
(301,213,2)
(164,255,2)
(519,446,2)
(523,510,2)
(581,600,2)
(608,143,2)
(304,62,2)
(124,412,2)
(792,621,2)
(271,633,2)
(577,659,2)
(608,707,2)
(779,301,2)
(182,502,2)
(731,797,2)
(667,633,2)
(129,675,2)
(374,395,2)
(408,224,2)
(379,599,2)
(449,326,2)
(799,395,2)
(786,446,2)
(747,311,2)
(729,395,2)
(790,559,2)
(13,362,2)
(204,661,2)
(301,675,2)
(608,529,2)
(0,266,2)
(515,60,2)
(46,115,2)
(172,548,2)
(351,650,2)
(329,304,2)
(238,775,2)
(395,549,2)
(118,261,2)
(99,610,2)
(409,510,2)
(430,384,2)
(398,363,2)
(471,109,2)
(608,213,2)
(382,395,2)
(485,213,2)
(656,549,2)
(20,327,2)
(156,548,2)
(149,115,2)
(258,661,2)
(707,580,2)
(669,599,2)
(477,797,2)
(333,246,2)
(680,661,2)
(130,707,2)
(301,190,2)
(635,124,2)
(142,661,2)
(96,213,2)
(583,557,2)
(100,395,2)
(306,675,2)
(256,720,2)
(608,148,2)
(39,261,2)
(201,190,2)
(600,761,2)
(206,633,2)
(164,633,2)
(301,548,2)
(167,166,2)
(142,238,2)
(608,285,2)
(357,797,2)
(193,447,2)
(672,797,2)
(301,384,2)
(362,580,2)
(11,761,2)
(208,213,2)
(1,190,2)
(256,502,2)
(632,118,2)
(210,551,2)
(494,495,2)
(71,650,2)
(436,327,2)
(319,261,2)
(355,551,2)
(313,797,2)
(158,462,2)
(771,509,2)
(224,21,2)
(608,258,2)
(762,161,2)
(608,265,2)
(72,246,2)
(127,115,2)
(696,797,2)
(561,761,2)
(256,446,2)
(516,261,2)
(453,698,2)
(608,675,2)
(16,797,2)
(739,797,2)
(301,549,2)
(615,115,2)
(414,557,2)
(5,287,2)
(608,414,2)
(354,797,2)
(392,167,2)
(218,559,2)
(207,773,2)
(367,395,2)
(16,548,2)
(248,502,2)
(741,395,2)
(586,247,2)
(74,266,2)
(608,785,2)
(421,412,2)
(725,552,2)
(414,675,2)
(600,600,2)
(806,600,2)
(205,246,2)
(712,661,2)
(352,661,2)
(50,490,2)
(440,60,2)
(464,213,2)
(59,650,2)
(224,167,2)
(503,707,2)
(108,661,2)
(285,247,2)
(164,551,2)
(635,438,2)
(674,190,2)
(555,137,2)
(68,797,2)
(604,384,2)
(630,4,2)
(548,75,2)
(405,60,2)
(124,351,2)
(50,515,2)
(547,412,2)
(607,319,2)
(732,384,2)
(199,213,2)
(667,266,2)
(409,363,2)
(301,495,2)
(774,446,2)
(164,650,2)
(608,204,2)
(692,190,2)
(119,661,2)
(608,115,2)
(608,459,2)
(410,600,2)
(529,395,2)
(325,661,2)
(709,36,2)
(396,395,2)
(433,256,2)
(161,165,2)
(491,213,2)
(301,363,2)
(62,327,2)
(527,630,2)
(256,268,2)
(564,60,2)
(608,545,2)
(667,675,2)
(20,115,2)
(164,502,2)
(340,661,2)
(654,247,2)
(667,268,2)
(256,797,2)
(733,650,2)
(508,548,2)
(620,138,2)
(165,412,2)
(781,600,2)
(600,190,2)
(66,327,2)
(124,650,2)
(153,707,2)
(699,797,2)
(50,285,2)
(454,287,2)
(269,797,2)
(164,743,2)
(509,453,2)
(255,580,2)
(553,675,2)
(592,661,2)
(16,495,2)
(326,717,2)
(803,655,2)
(717,700,2)
(54,420,2)
(643,559,2)
(92,548,2)
(541,314,2)
(579,255,2)
(70,542,2)
(721,412,2)
(193,395,2)
(522,255,2)
(244,743,2)
(434,548,2)
(614,246,2)
(561,327,2)
(436,395,2)
(469,720,2)
(545,280,2)
(659,118,2)
(572,675,2)
(616,661,2)
(437,720,2)
(767,75,2)
(802,495,2)
(16,720,2)
(115,384,2)
(10,363,2)
(700,633,2)
(16,743,2)
(656,691,2)
(744,190,2)
(620,761,2)
(256,246,2)
(377,707,2)
(495,580,2)
(463,190,2)
(667,395,2)
(771,304,2)
(797,773,2)
(189,395,2)
(409,675,2)
(608,720,2)
(256,213,2)
(700,2,2)
(502,661,2)
(356,743,2)
(57,109,2)
(256,384,2)
(268,246,2)
(412,115,2)
(699,696,2)
(256,255,2)
(513,201,2)
(250,446,2)
(164,213,2)
(256,287,2)
(330,327,2)
(219,190,2)
(465,600,2)
(570,803,2)
(639,650,2)
(707,268,2)
(8,491,2)
(93,395,2)
(659,646,2)
(608,551,2)
(796,797,2)
(329,60,2)
(562,585,2)
(447,656,2)
(695,720,2)
(150,327,2)
(667,60,2)
(49,261,2)
(326,743,2)
(423,347,2)
(627,659,2)
(426,720,2)
(636,661,2)
(667,510,2)
(22,327,2)
(487,548,2)
(681,246,2)
(16,384,2)
(662,661,2)
(434,99,2)
(287,551,2)
(763,557,2)
(79,190,2)
(458,213,2)
(409,362,2)
(608,654,2)
(31,213,2)
(32,707,2)
(608,797,2)
(179,362,2)
(608,404,2)
(667,246,2)
(334,650,2)
(793,700,2)
(349,599,2)
(173,700,2)
(551,510,2)
(661,363,2)
(50,586,2)
(330,190,2)
(413,115,2)
(272,190,2)
(591,661,2)
(525,797,2)
(380,395,2)
(165,587,2)
(218,720,2)
(141,255,2)
(409,384,2)
(242,549,2)
(347,327,2)
(562,561,2)
(539,287,2)
(19,557,2)
(256,633,2)
(278,190,2)
(21,555,2)
(742,659,2)
(320,395,2)
(538,395,2)
(559,552,2)
(560,395,2)
(667,495,2)
(446,462,2)
(731,696,2)
(284,551,2)
(185,125,2)
(635,266,2)
(36,173,2)
(670,792,2)
(630,167,2)
(557,23,2)
(24,224,2)
(82,661,2)
(50,258,2)
(759,98,2)
(301,60,2)
(350,261,2)
(409,633,2)
(524,633,2)
(764,661,2)
(411,797,2)
(362,327,2)
(138,85,2)
(157,384,2)
(187,620,2)
(101,224,2)
(608,362,2)
(743,720,2)
(422,661,2)
(353,547,2)
(384,25,2)
(168,758,2)
(256,548,2)
(192,548,2)
(309,675,2)
(2,224,2)
(608,266,2)
(608,513,2)
(50,731,2)
(294,190,2)
(409,395,2)
(608,510,2)
(418,600,2)
(777,558,2)
(99,510,2)
(767,548,2)
(691,549,2)
(222,462,2)
(655,99,2)
(246,124,2)
(207,797,2)
(48,650,2)
(50,654,2)
(441,190,2)
(409,495,2)
(647,723,2)
(148,395,2)
(503,488,2)
(779,475,2)
(608,548,2)
(232,327,2)
(50,189,2)
(513,190,2)
(261,20,2)
(321,661,2)
(775,327,2)
(641,707,2)
(50,143,2)
(575,797,2)
(782,600,2)
(520,384,2)
(176,60,2)
(608,575,2)
(249,600,2)
(22,559,2)
(255,547,2)
(633,656,2)
(442,412,2)
(645,60,2)
(608,321,2)
(654,600,2)
(646,670,2)
(490,557,2)
(528,548,2)
(621,632,2)
(50,160,2)
(648,707,2)
(167,150,2)
(51,190,2)
(230,213,2)
(614,798,2)
(409,797,2)
(667,502,2)
(16,363,2)
(292,327,2)
(586,600,2)
(285,600,2)
(559,559,2)
(667,115,2)
(500,60,2)
(362,707,2)
(301,502,2)
(684,465,2)
(324,213,2)
(608,515,2)
(716,268,2)
(791,363,2)
(67,797,2)
(77,707,2)
(150,224,2)
(559,771,2)
(676,261,2)
(415,224,2)
(660,502,2)
(60,36,2)
(518,650,2)
(363,700,2)
(492,255,2)
(102,600,2)
(747,559,2)
(188,261,2)
(468,661,2)
(554,115,2)
(474,558,2)
(416,266,2)
(549,125,2)
(779,314,2)
(287,99,2)
(200,261,2)
(506,50,2)
(50,76,2)
(803,287,2)
(50,513,2)
(16,266,2)
(164,549,2)
(4,166,2)
(376,255,2)
(389,60,2)
(665,327,2)
(637,700,2)
(567,363,2)
(158,481,2)
(260,600,2)
(667,362,2)
(558,261,2)
(66,261,2)
(417,797,2)
(443,549,2)
(386,720,2)
(138,201,2)
(542,60,2)
(4,167,2)
(585,327,2)
(134,621,2)
(497,384,2)
(164,287,2)
(667,743,2)
(186,633,2)
(326,700,2)
(16,255,2)
(160,268,2)
(16,362,2)
(568,689,2)
(177,412,2)
(154,261,2)
(180,600,2)
(42,723,2)
(167,224,2)
(409,720,2)
(371,395,2)
(678,707,2)
(256,190,2)
(495,797,2)
(537,395,2)
(191,287,2)
(509,60,2)
(805,600,2)
(665,109,2)
(602,600,2)
(568,16,2)
(50,746,2)
(756,600,2)
(756,327,2)
(158,121,2)
(115,326,2)
(158,256,2)
(213,462,2)
(143,70,2)
(758,395,2)
(52,261,2)
(197,213,2)
(628,36,2)
(190,412,2)
(444,600,2)
(114,190,2)
(196,115,2)
(361,190,2)
(50,265,2)
(381,548,2)
(29,190,2)
(28,109,2)
(476,707,2)
(557,363,2)
(775,661,2)
(290,723,2)
(50,699,2)
(428,720,2)
(322,60,2)
(133,723,2)
(451,661,2)
(243,495,2)
(256,115,2)
(399,384,2)
(75,675,2)
(266,547,2)
(720,542,2)
(693,246,2)
(126,395,2)
(763,661,2)
(89,656,2)
(547,442,2)
(16,268,2)
(16,115,2)
(548,675,2)
(409,650,2)
(698,709,2)
(25,583,2)
(556,600,2)
(568,697,2)
(585,600,2)
(112,109,2)
(169,549,2)
(184,261,2)
(246,125,2)
(550,268,2)
(198,118,2)
(246,580,2)
(425,395,2)
(744,361,2)
(357,207,2)
(50,464,2)
(462,769,2)
(85,744,2)
(301,246,2)
(606,190,2)
(6,255,2)
(726,661,2)
(723,395,2)
(50,804,2)
(301,115,2)
(603,707,2)
(608,743,2)
(518,412,2)
(679,510,2)
(342,190,2)
(311,22,2)
(409,255,2)
(688,495,2)
(273,395,2)
(60,700,2)
(28,112,2)
(50,414,2)
(25,99,2)
(25,767,2)
(164,268,2)
(594,743,2)
(597,797,2)
(633,395,2)
(158,36,2)
(582,384,2)
(265,60,2)
(301,633,2)
(756,190,2)
(432,395,2)
(214,661,2)
(301,707,2)
(50,763,2)
(754,621,2)
(675,287,2)
(164,797,2)
(667,548,2)
(152,446,2)
(749,773,2)
(438,266,2)
(253,261,2)
(466,266,2)
(37,60,2)
(16,549,2)
(262,362,2)
(395,656,2)
(164,720,2)
(109,318,2)
(259,384,2)
(608,160,2)
(204,557,2)
(158,656,2)
(265,509,2)
(460,395,2)
(138,600,2)
(588,611,2)
(667,707,2)
(143,559,2)
(137,327,2)
(50,459,2)
(755,503,2)
(446,580,2)
(162,548,2)
(3,375,2)
(363,326,2)
(135,60,2)
(409,551,2)
(387,723,2)
(28,319,2)
(703,327,2)
(587,412,2)
(798,246,2)
(685,723,2)
(789,797,2)
(299,268,2)
(163,118,2)
(760,559,2)
(493,395,2)
(776,268,2)
(115,661,2)
(175,115,2)
(301,266,2)
(252,167,2)
(703,723,2)
(50,204,2)
(608,549,2)
(164,363,2)
(651,232,2)
(600,756,2)
(496,548,2)
(608,502,2)
(765,60,2)
(608,586,2)
(201,294,2)
(456,268,2)
(26,661,2)
(301,362,2)
(158,773,2)
(321,557,2)
(50,404,2)
(291,707,2)
(54,667,2)
(236,600,2)
(294,762,2)
(319,194,2)
(148,758,2)
(50,168,2)
(464,8,2)
(170,580,2)
(18,115,2)
(684,600,2)
(644,707,2)
(771,720,2)
(667,446,2)
(690,633,2)
(663,384,2)
-----------------------------------
(0,box->len = len + JP2_BOX_HDRLEN(false)
(1,cdef)
(2,allcmptssame = 0)
(3,ihdr->width = jas_image_width(image)
(4,jas_image_cmptsgnd(image, i)
(5,"cannot write ICC profile\\n")
(6,tmpstream)
(7,method)
(8,box->data.jp)
(9,0)
(10,box->data.colr)
(11,cdefchanent->channo = i)
(12,box)
(13,jas_eprintf("jpc_encode failed\\n")
(14,"cannot create temporary stream\\n")
(15,if (!(box = jp2_box_create(JP2_BOX_BPCC)
(16,tmpstream)
(17,default:)
(18,1)
(19,colr->iccplen)
(20,jas_image_clrspc(image)
(21,jas_image_cmptprec(image, i)
(22,jas_image_cmptsgnd(image,\\n\\t\\t\\t  cmptno)
(23,&box->data.colr)
(24,++i)
(25,jas_stream_read(iccstream, colr->iccp, colr->iccplen)
(26,colr)
(27,JP2_BOX_JP)
(28,jas_image_cmpttype(image, 1)
(29,sizeof(jp2_cdefchan_t)
(30,image)
(31,box)
(32,image)
(33,i)
(34,image)
(35,box)
(36,box = jp2_box_create(JP2_BOX_BPCC)
(37,image)
(38,iccp)
(39,JAS_CLRSPC_CHANIND_YCBCR_Y)
(40,2)
(41,colr)
(42,image)
(43,iccstream)
(44,jas_image_cmpttype(image, 1)
(45,box)
(46,needcdef = 1)
(47,iccprof)
(48,jp2_box_destroy(box)
(49,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)
(50,return 0;)
(51,cdef)
(52,0)
(53,box)
(54,jas_stream_close(iccstream)
(55,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
(56,)
(57,image)
(58,numcompatcodes)
(59,JP2_BOX_JP2H)
(60,!(box = jp2_box_create(JP2_BOX_BPCC)
(61,sgnd)
(62,jas_image_numcmpts(image)
(63,box)
(64,0)
(65,ftyp)
(66,jas_image_cmpttype(image, 0)
(67,"cannot create FTYP box\\n")
(68,1)
(69,JP2_BOX_FTYP)
(70,bpcc->bpcs)
(71,box = 0)
(72,jas_eprintf("cannot copy stream\\n")
(73,cdef)
(74,len)
(75,colr->iccp = jas_malloc(pos)
(76,colr->pri)
(77,0)
(78,image)
(79,"cannot create CDEF box\\n")
(80,pri)
(81,ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE)
(82,0)
(83,case JAS_CLRSPC_FAM_GRAY:)
(84,pos)
(85,cdef->ents = jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t)
(86,i)
(87,if (!(tmpstream = jas_stream_memopen(0, 0)
(88,box)
(89,jp2_box_destroy(box)
(90,goto error;)
(91,allcmptssame)
(92,iccstream)
(93,numcmpts)
(94,buf)
(95,ihdr)
(96,"cannot create JP box\\n")
(97,"cannot create temporary stream\\n")
(98,jas_image_cmprof(image)
(99,iccstream = jas_stream_memopen(0, 0)
(100,ihdr->csunk = 0)
(101,i)
(102,typeasoc)
(103,0)
(104,goto error;)
(105,)
(106,typeasoc)
(107,16)
(108,colr->approx = 0)
(109,jas_image_cmpttype(image, 1)
(110,0)
(111,"jpc_encode failed\\n")
(112,jas_image_cmpttype(image, 2)
(113,out)
(114,box)
(115,jp2_box_put(box, tmpstream)
(116,csunk)
(117,allcmptssame)
(118,jas_image_cmpttype(image, 0)
(119,colr)
(120,colr->method = JP2_COLR_ICC)
(121,box = 0)
(122,0)
(123,if (!(colr->iccp = jas_malloc(pos)
(124,len = jas_stream_tell(tmpstream)
(125,tmpstream = jas_stream_memopen(0, 0)
(126,ihdr)
(127,needcdef)
(128,numcmpts)
(129,jas_eprintf("cannot get stream position\\n")
(130,out)
(131,)
(132,if (needcdef)
(133,image)
(134,JAS_CLRSPC_CHANIND_RGB_B)
(135,bpcc)
(136,)
(137,jas_image_cmptprec(image, 0)
(138,cdef->ents)
(139,)
(140,)
(141,box)
(142,colr->csid = clrspctojp2(jas_image_clrspc(image)
(143,bpcc->bpcs[cmptno])
(144,jas_eprintf("cannot write BPCC box\\n")
(145,)
(146,)
(147,if (jp2_box_put(box, tmpstream)
(148,ihdr->comptype)
(149,image)
(150,jas_image_numcmpts(image)
(151,prec)
(152,0)
(153,(unsigned long)
(154,abort()
(155,box)
(156,colr)
(157,"cannot read temporary stream\\n")
(158,jp2_box_destroy(box)
(159,box)
(160,box->len)
(161,box->data)
(162,jas_eprintf("memory allocation failed\\n")
(163,image)
(164,1)
(165,box = jp2_box_create(JP2_BOX_CDEF)
(166,i = 1)
(167,i < jas_image_numcmpts(image)
(168,ihdr->bpc)
(169,JP2_BOX_IHDR)
(170,jas_stream_getrwcount(out)
(171,tmpstream)
(172,goto error;)
(173,jp2_box_create(JP2_BOX_BPCC)
(174,len)
(175,box = 0)
(176,data)
(177,tmpstream)
(178,ftyp->numcompatcodes = 1)
(179,goto error;)
(180,cdefchanent)
(181,iccp)
(182,"CM profile is null\\n")
(183,colr->method = JP2_COLR_ENUM)
(184,jas_image_cmpttype(image, 0)
(185,jas_stream_close(tmpstream)
(186,0)
(187,&cdef->ents[i])
(188,break;)
(189,ihdr->width)
(190,!(box = jp2_box_create(JP2_BOX_CDEF)
(191,iccstream)
(192,iccplen)
(193,box->data.ihdr)
(194,jas_image_cmpttype(image, 0)
(195,iccprof)
(196,"cannot write box\\n")
(197,box)
(198,1)
(199,jp)
(200,JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y)
(201,cdef = &box->data.cdef)
(202,)
(203,if (!(iccstream = jas_stream_memopen(0, 0)
(204,colr->method)
(205,goto error;)
(206,box = 0)
(207,box->data)
(208,goto error;)
(209,cmptno)
(210,iccstream)
(211,)
(212,case JAS_CLRSPC_FAM_RGB:)
(213,!(box = jp2_box_create(JP2_BOX_JP)
(214,JP2_COLR_ICC)
(215,tmpstream)
(216,)
(217,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y)
(218,bpcc)
(219,box)
(220,2)
(221,case JAS_CLRSPC_SGRAY:)
(222,jp2_box_destroy(box)
(223,image)
(224,jas_image_cmptsgnd(image, i)
(225,needcdef)
(226,)
(227,bpcc)
(228,ftyp->minver = JP2_FTYP_MINVER)
(229,if (!jas_image_cmprof(image)
(230,out)
(231,0)
(232,jas_image_cmptsgnd(image, 0)
(233,tmpstream)
(234,if (jp2_box_put(box, out)
(235,if (jp2_box_put(box, out)
(236,i)
(237,if (jas_image_cmpttype(image, 0)
(238,clrspctojp2(jas_image_clrspc(image)
(239,image)
(240,allcmptssame)
(241,1)
(242,box)
(243,0)
(244,box = 0)
(245,goto error;)
(246,jas_stream_copy(out, tmpstream, len)
(247,cdefchanent = &cdef->ents[i])
(248,image)
(249,image)
(250,box)
(251,case JAS_CLRSPC_FAM_YCBCR:)
(252,sgnd)
(253,break;)
(254,if (!(box = jp2_box_create(JP2_BOX_FTYP)
(255,jp2_box_put(box, out)
(256,box)
(257,1)
(258,colr->csid)
(259,iccstream)
(260,i)
(261,jas_clrspc_fam(jas_image_clrspc(image)
(262,0)
(263,cdef)
(264,jas_eprintf("cannot write box\\n")
(265,bpcc->bpcs)
(266,!(box = jp2_box_create(JP2_BOX_JP2H)
(267,"cannot create ICC profile\\n")
(268,!(box = jp2_box_create(JP2_BOX_JP2C)
(269,JP2_FTYP_MAJVER)
(270,)
(271,box)
(272,0)
(273,data)
(274,0)
(275,"cannot create COLR box\\n")
(276,out)
(277,0)
(278,image)
(279,)
(280,ftyp->compatcodes)
(281,image)
(282,if (jas_stream_copy(out, tmpstream, len)
(283,typeasoc)
(284,goto error;)
(285,cdefchanent->type)
(286,box = 0)
(287,jas_iccprof_save(iccprof, iccstream)
(288,JAS_CLRSPC_CHANIND_RGB_R)
(289,if (jp2_box_put(box, out)
(290,jas_image_cmptsgnd(image, 0)
(291,out)
(292,jas_image_cmptprec(image, i)
(293,"cannot create JP2C box\\n")
(294,&box->data.cdef)
(295,switch (jas_image_clrspc(image)
(296,if ((pos = jas_stream_tell(iccstream)
(297,for (i = 1; i < jas_image_numcmpts(image)
(298,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
(299,box)
(300,cmptno)
(301,iccprof)
(302,iccstream = 0)
(303,image)
(304,bpcc->numcmpts = jas_image_numcmpts(image)
(305,jas_eprintf("cannot create temporary stream\\n")
(306,colr->iccplen = pos)
(307,)
(308,)
(309,goto error;)
(310,out)
(311,JP2_SPTOBPC(jas_image_cmptsgnd(image,\\n\\t\\t\\t  cmptno)
(312,goto error;)
(313,ftyp)
(314,iccprof = jas_iccprof_createfromcmprof(\\n\\t\\t  jas_image_cmprof(image)
(315,colr)
(316,jas_eprintf("cannot create FTYP box\\n")
(317,cdefchanent)
(318,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
(319,jas_image_cmpttype(image, 0)
(320,"cannot create IHDR box\\n")
(321,colr->approx)
(322,jas_alloc2(bpcc->numcmpts,\\n\\t\\t  sizeof(uint_fast8_t)
(323,goto error;)
(324,data)
(325,colr)
(326,box = jp2_box_create(JP2_BOX_COLR)
(327,jas_image_t *image)
(328,box)
(329,bpcc->numcmpts)
(330,jas_image_numcmpts(image)
(331,1)
(332,)
(333,tmpstream)
(334,0)
(335,image)
(336,needcdef)
(337,overhead = jas_stream_getrwcount(out)
(338,if (iccprof)
(339,iccprof = 0)
(340,approx)
(341,len)
(342,data)
(343,JP2_BOX_CDEF)
(344,ihdr->comptype = JP2_IHDR_COMPTYPE)
(345,image)
(346,overhead)
(347,jas_image_height(image)
(348,jas_eprintf("cannot create temporary stream\\n")
(349,needcdef)
(350,JAS_IMAGE_CT_GRAY_Y)
(351,jas_stream_tell(tmpstream)
(352,colr->pri = JP2_COLR_PRI)
(353,jp2_box_destroy(box)
(354,ftyp)
(355,iccprof)
(356,goto error;)
(357,box->data.ftyp)
(358,method)
(359,"cannot create JP2H box\\n")
(360,&box->data.ftyp)
(361,cdef->numchans)
(362,jpc_encode(image, out, buf)
(363,!(box = jp2_box_create(JP2_BOX_COLR)
(364,tmpstream)
(365,0)
(366,data)
(367,image)
(368,ftyp)
(369,tmpstream)
(370,tmpstream)
(371,ihdr->csunk)
(372,switch (jas_clrspc_fam(jas_image_clrspc(image)
(373,++i)
(374,height)
(375,jas_image_width(image)
(376,goto error;)
(377,overhead)
(378,box->len = 0)
(379,0)
(380,ihdr)
(381,colr)
(382,ihdr->ipr = 0)
(383,ihdr)
(384,jas_stream_read(iccstream, colr->iccp, colr->iccplen)
(385,buf)
(386,jas_eprintf("memory allocation failed\\n")
(387,JP2_IHDR_BPCNULL)
(388,jas_eprintf("cannot write JP box\\n")
(389,bpcs)
(390,image)
(391,"cannot write BPCC box\\n")
(392,i)
(393,image)
(394,for (i = 0; i < jas_image_numcmpts(image)
(395,!(box = jp2_box_create(JP2_BOX_IHDR)
(396,bpc)
(397,JP2_FTYP_COMPATCODE)
(398,image)
(399,iccstream)
(400,if (jas_iccprof_save(iccprof, iccstream)
(401,0)
(402,image)
(403,optstr)
(404,colr->approx)
(405,bpcc)
(406,"cannot get stream position\\n")
(407,if (box)
(408,break;)
(409,-1)
(410,0x7fff)
(411,ftyp)
(412,needcdef)
(413,box)
(414,colr->iccp)
(415,i)
(416,false)
(417,goto error;)
(418,ents)
(419,if (jpc_encode(image, out, buf)
(420,iccstream = 0)
(421,box)
(422,colr)
(423,ihdr->height = jas_image_height(image)
(424,"cannot write FTYP box\\n")
(425,ihdr->numcmpts = jas_image_numcmpts(image)
(426,"memory allocation failed\\n")
(427,jp2_box_destroy(box)
(428,box)
(429,if (!(box = jp2_box_create(JP2_BOX_JP2C)
(430,iccprof)
(431,if (!(box = jp2_box_create(JP2_BOX_COLR)
(432,box)
(433,box)
(434,jas_stream_rewind(iccstream)
(435,iccprof)
(436,jas_image_numcmpts(image)
(437,cmptno)
(438,JP2_BOX_HDRLEN(false)
(439,jas_stream_memopen(0, 0)
(440,sizeof(uint_fast8_t)
(441,numchans)
(442,jp2_box_create(JP2_BOX_JP2H)
(443,goto error;)
(444,type)
(445,)
(446,jp2_box_put(box, out)
(447,box->data)
(448,)
(449,box->data)
(450,ipr)
(451,approx)
(452,JP2_SPTOBPC(jas_image_cmptsgnd(image, 0)
(453,&box->data.bpcc)
(454,goto error;)
(455,goto error;)
(456,0)
(457,)
(458,magic)
(459,colr->iccplen)
(460,width)
(461,if (jas_image_cmpttype(image, 0)
(462,box = jp2_box_create(JP2_BOX_JP)
(463,jas_eprintf("cannot create CDEF box\\n")
(464,box->data.jp.magic)
(465,typeasoc = jp2_gettypeasoc(jas_image_clrspc(image)
(466,box)
(467,if (jp2_box_put(box, tmpstream)
(468,box)
(469,cmptno)
(470,0)
(471,JAS_CLRSPC_CHANIND_YCBCR_CR)
(472,"cannot write CDEF box\\n")
(473,bpcc)
(474,0)
(475,iccprof = 0)
(476,"%s\\n_jp2overhead=%lu\\n")
(477,ftyp->majver = JP2_FTYP_MAJVER)
(478,if (jas_stream_read(iccstream, colr->iccp, colr->iccplen)
(479,ihdr)
(480,for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno)
(481,box = 0)
(482,)
(483,iccprof)
(484,jas_eprintf("cannot create JP2H box\\n")
(485,JP2_JP_MAGIC)
(486,cdef)
(487,iccplen)
(488,const char *optstr)
(489,cdef)
(490,colr->pri)
(491,box->data)
(492,len)
(493,box)
(494,0)
(495,jp2_box_put(box, out)
(496,"memory allocation failed\\n")
(497,jas_stream_close(iccstream)
(498,error:)
(499,0)
(500,uint_fast8_t)
(501,"")
(502,!jas_image_cmprof(image)
(503,optstr ? optstr : "")
(504,sgnd)
(505,case JAS_CLRSPC_SRGB:)
(506,RET)
(507,if (!(box = jp2_box_create(JP2_BOX_CDEF)
(508,colr)
(509,bpcc = &box->data.bpcc)
(510,!(iccprof = jas_iccprof_createfromcmprof(\\n\\t\\t  jas_image_cmprof(image)
(511,tmpstream)
(512,typeasoc)
(513,cdef->ents)
(514,ihdr)
(515,bpcc->numcmpts)
(516,0)
(517,goto error;)
(518,len)
(519,jp2_box_create(JP2_BOX_FTYP)
(520,tmpstream)
(521,jas_eprintf("cannot create IHDR box\\n")
(522,jas_eprintf("cannot write JP2H box\\n")
(523,jas_eprintf("cannot create ICC profile\\n")
(524,box)
(525,ftyp)
(526,pos)
(527,i)
(528,iccstream)
(529,ihdr->ipr)
(530,)
(531,jas_eprintf("cannot write IHDR box\\n")
(532,cdefchanent)
(533,jas_eprintf("cannot create JP2C box\\n")
(534,if (jp2_box_put(box, tmpstream)
(535,)
(536,)
(537,goto error;)
(538,ihdr)
(539,jas_eprintf("cannot write ICC profile\\n")
(540,break;)
(541,jas_iccprof_destroy(iccprof)
(542,bpcc->bpcs = jas_alloc2(bpcc->numcmpts,\\n\\t\\t  sizeof(uint_fast8_t)
(543,iccplen)
(544,"cannot write IHDR box\\n")
(545,ftyp->compatcodes[0])
(546,image)
(547,box = jp2_box_create(JP2_BOX_JP2H)
(548,!(colr->iccp = jas_malloc(pos)
(549,!(tmpstream = jas_stream_memopen(0, 0)
(550,goto error;)
(551,!(iccstream = jas_stream_memopen(0, 0)
(552,cmptno = 0)
(553,pos)
(554,box)
(555,prec = jas_image_cmptprec(image, 0)
(556,typeasoc & 0x7fff)
(557,colr = &box->data.colr)
(558,jas_image_cmpttype(image, 0)
(559,cmptno < bpcc->numcmpts)
(560,ihdr)
(561,jas_image_cmpttype(image, i)
(562,jp2_gettypeasoc(jas_image_clrspc(image)
(563,bpcc)
(564,bpcc)
(565,compatcodes)
(566,box)
(567,box)
(568,jas_stream_close(tmpstream)
(569,if (!allcmptssame)
(570,jas_malloc(pos)
(571,)
(572,colr)
(573,0)
(574,JAS_CLRSPC_CHANIND_RGB_G)
(575,ftyp->numcompatcodes)
(576,buf)
(577,needcdef)
(578,JP2_COLR_PRI)
(579,"cannot write JP2H box\\n")
(580,jas_stream_t *out)
(581,cdefchanent->type = typeasoc >> 16)
(582,0)
(583,colr->iccplen)
(584,jas_image_cmprof(image)
(585,jas_image_clrspc(image)
(586,cdefchanent->channo)
(587,jp2_box_create(JP2_BOX_CDEF)
(588,allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0)
(589,allcmptssame)
(590,numcmpts)
(591,colr)
(592,image)
(593,if (tmpstream)
(594,box)
(595,image)
(596,ihdr->numcmpts)
(597,JP2_FTYP_MINVER)
(598,i)
(599,jas_image_cmpttype(image, 0)
(600,i < jas_image_numcmpts(image)
(601,ihdr)
(602,cdefchanent->assoc = typeasoc & 0x7fff)
(603,optstr)
(604,0)
(605,cdef->numchans = jas_image_numcmpts(image)
(606,numchans)
(607,JAS_CLRSPC_CHANIND_YCBCR_CB)
(608,return -1;)
(609,tmpstream)
(610,jas_stream_memopen(0, 0)
(611,allcmptssame = 1)
(612,iccstream)
(613,box)
(614,box = jp2_box_create(JP2_BOX_JP2C)
(615,goto error;)
(616,JP2_COLR_PRI)
(617,unsigned long)
(618,default:)
(619,if (!(box = jp2_box_create(JP2_BOX_IHDR)
(620,cdef->ents[i])
(621,jas_image_cmpttype(image, 1)
(622,prec)
(623,0)
(624,ents)
(625,box)
(626,0)
(627,needcdef = 0)
(628,jp2_box_destroy(box)
(629,cdefchanent)
(630,jas_image_cmptsgnd(image, i)
(631,)
(632,jas_image_cmpttype(image, 1)
(633,jp2_box_put(box, tmpstream)
(634,)
(635,len + JP2_BOX_HDRLEN(false)
(636,0)
(637,box)
(638,box)
(639,jas_eprintf("cannot write CDEF box\\n")
(640,"cannot copy stream\\n")
(641,jp2_box_destroy(box)
(642,colr)
(643,bpcs)
(644,overhead)
(645,"cannot create BPCC box\\n")
(646,jas_image_cmpttype(image, 1)
(647,0)
(648,box)
(649,if (jas_image_cmpttype(image, 0)
(650,jp2_box_put(box, tmpstream)
(651,sgnd = jas_image_cmptsgnd(image, 0)
(652,)
(653,0)
(654,cdefchanent->assoc)
(655,jas_stream_tell(iccstream)
(656,box = jp2_box_create(JP2_BOX_IHDR)
(657,)
(658,)
(659,jas_image_cmpttype(image, 0)
(660,jas_eprintf("CM profile is null\\n")
(661,jas_image_clrspc(image)
(662,colr->approx = 0)
(663,jas_eprintf("cannot read temporary stream\\n")
(664,)
(665,jas_image_cmpttype(image, 2)
(666,&box->data.ihdr)
(667,iccstream)
(668,iccprof)
(669,needcdef = 0)
(670,jas_image_cmpttype(image, 2)
(671,if (jas_image_cmptsgnd(image, i)
(672,data)
(673,)
(674,jp2_cdefchan_t)
(675,(pos = jas_stream_tell(iccstream)
(676,0)
(677,comptype)
(678,jas_eprintf("cannot write JP2C box\\n")
(679,goto error;)
(680,colr->pri = JP2_COLR_PRI)
(681,box)
(682,goto error;)
(683,i)
(684,typeasoc >> 16)
(685,0)
(686,box->data.jp.magic = JP2_JP_MAGIC)
(687,jas_eprintf("cannot create COLR box\\n")
(688,box)
(689,tmpstream = 0)
(690,goto error;)
(691,jp2_box_create(JP2_BOX_IHDR)
(692,cdef)
(693,0)
(694,if (!(box = jp2_box_create(JP2_BOX_JP)
(695,goto error;)
(696,ftyp = &box->data.ftyp)
(697,tmpstream = 0)
(698,box->data.bpcc)
(699,ftyp->minver)
(700,!allcmptssame)
(701,case JAS_CLRSPC_SYCBCR:)
(702,)
(703,jas_image_cmptprec(image, 0)
(704,break;)
(705,)
(706,box = 0)
(707,jp2_box_put(box, out)
(708,if (!(bpcc->bpcs = jas_alloc2(bpcc->numcmpts,\\n\\t\\t  sizeof(uint_fast8_t)
(709,box->data)
(710,cdefchanent)
(711,numcmpts)
(712,break;)
(713,"cannot write JP2C box\\n")
(714,iccstream)
(715,image)
(716,box)
(717,jp2_box_create(JP2_BOX_COLR)
(718,csid)
(719,goto error;)
(720,!(bpcc->bpcs = jas_alloc2(bpcc->numcmpts,\\n\\t\\t  sizeof(uint_fast8_t)
(721,box)
(722,jas_eprintf("cannot write FTYP box\\n")
(723,allcmptssame)
(724,if (jp2_box_put(box, tmpstream)
(725,jas_image_cmptprec(image, cmptno)
(726,image)
(727,if (!(box = jp2_box_create(JP2_BOX_JP2H)
(728,jas_eprintf("cannot create JP box\\n")
(729,JP2_IHDR_COMPTYPE)
(730,JP2_BOX_COLR)
(731,ftyp->majver)
(732,break;)
(733,box)
(734,prec)
(735,jas_stream_rewind(tmpstream)
(736,colr)
(737,++cmptno)
(738,if (iccstream)
(739,ftyp)
(740,JP2_BOX_JP2C)
(741,tmpstream)
(742,0)
(743,jp2_box_put(box, tmpstream)
(744,jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t)
(745,)
(746,cdef->numchans)
(747,bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,\\n\\t\\t\\t  cmptno)
(748,goto error;)
(749,jp2_box_destroy(box)
(750,0)
(751,)
(752,iccstream)
(753,)
(754,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
(755,sprintf(buf, "%s\\n_jp2overhead=%lu\\n", (optstr ? optstr : "")
(756,jas_image_numcmpts(image)
(757,pos)
(758,ihdr = &box->data.ihdr)
(759,jas_iccprof_createfromcmprof(\\n\\t\\t  jas_image_cmprof(image)
(760,cmptno)
(761,i = 0)
(762,box->data.cdef)
(763,colr->method)
(764,colr)
(765,jas_eprintf("cannot create BPCC box\\n")
(766,if (jp2_box_put(box, out)
(767,colr->iccp)
(768,box)
(769,jp2_box_create(JP2_BOX_JP)
(770,if (!(iccprof = jas_iccprof_createfromcmprof(\\n\\t\\t  jas_image_cmprof(image)
(771,bpcc->numcmpts)
(772,ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0)
(773,box = jp2_box_create(JP2_BOX_FTYP)
(774,"cannot write JP box\\n")
(775,jas_image_clrspc(image)
(776,len)
(777,needcdef = 0)
(778,bpcc)
(779,jas_iccprof_destroy(iccprof)
(780,pri)
(781,i)
(782,i)
(783,assoc)
(784,)
(785,ihdr->height)
(786,box = 0)
(787,cmptno)
(788,)
(789,minver)
(790,cmptno)
(791,colr)
(792,jas_image_cmpttype(image, 2)
(793,JP2_BOX_BPCC)
(794,0)
(795,out)
(796,majver)
(797,!(box = jp2_box_create(JP2_BOX_FTYP)
(798,jp2_box_create(JP2_BOX_JP2C)
(799,ihdr)
(800,)
(801,JP2_COLR_ENUM)
(802,box)
(803,pos = jas_stream_tell(iccstream)
(804,box->len)
(805,image)
(806,channo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
