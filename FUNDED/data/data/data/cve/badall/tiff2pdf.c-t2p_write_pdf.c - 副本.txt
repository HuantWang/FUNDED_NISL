-----label-----
1
-----code-----
tsize_t t2p_write_pdf(T2P* t2p, TIFF* input, TIFF* output){

	tsize_t written=0;
	ttile_t i2=0;
	tsize_t streamlen=0;
	uint16 i=0;

	t2p_read_tiff_init(t2p, input);
	if(t2p->t2p_error!=T2P_ERR_OK){return(0);}
	t2p->pdf_xrefoffsets= (uint32*) _TIFFmalloc(TIFFSafeMultiply(tmsize_t,t2p->pdf_xrefcount,sizeof(uint32)) );
	if(t2p->pdf_xrefoffsets==NULL){
		TIFFError(
			TIFF2PDF_MODULE, 
			"Can't allocate %u bytes of memory for t2p_write_pdf", 
			(unsigned int) (t2p->pdf_xrefcount * sizeof(uint32)) );
		t2p->t2p_error = T2P_ERR_ERROR;
		return(written);
	}
	t2p->pdf_xrefcount=0;
	t2p->pdf_catalog=1;
	t2p->pdf_info=2;
	t2p->pdf_pages=3;
	written += t2p_write_pdf_header(t2p, output);
	t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
	t2p->pdf_catalog=t2p->pdf_xrefcount;
	written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
	written += t2p_write_pdf_catalog(t2p, output);
	written += t2p_write_pdf_obj_end(output);
	t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
	t2p->pdf_info=t2p->pdf_xrefcount;
	written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
	written += t2p_write_pdf_info(t2p, input, output);
	written += t2p_write_pdf_obj_end(output);
	t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
	t2p->pdf_pages=t2p->pdf_xrefcount;
	written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
	written += t2p_write_pdf_pages(t2p, output);
	written += t2p_write_pdf_obj_end(output);
	for(t2p->pdf_page=0;t2p->pdf_page<t2p->tiff_pagecount;t2p->pdf_page++){
		t2p_read_tiff_data(t2p, input);
		if(t2p->t2p_error!=T2P_ERR_OK){return(0);}
		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
		written += t2p_write_pdf_page(t2p->pdf_xrefcount, t2p, output);
		written += t2p_write_pdf_obj_end(output);
		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
		written += t2p_write_pdf_stream_dict_start(output);
		written += t2p_write_pdf_stream_dict(0, t2p->pdf_xrefcount+1, output);
		written += t2p_write_pdf_stream_dict_end(output);
		written += t2p_write_pdf_stream_start(output);
		streamlen=written;
		written += t2p_write_pdf_page_content_stream(t2p, output);
		streamlen=written-streamlen;
		written += t2p_write_pdf_stream_end(output);
		written += t2p_write_pdf_obj_end(output);
		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
		written += t2p_write_pdf_stream_length(streamlen, output);
		written += t2p_write_pdf_obj_end(output);
		if(t2p->tiff_transferfunctioncount != 0){
			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
			written += t2p_write_pdf_transfer(t2p, output);
			written += t2p_write_pdf_obj_end(output);
			for(i=0; i < t2p->tiff_transferfunctioncount; i++){
				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
				written += t2p_write_pdf_stream_dict_start(output);
				written += t2p_write_pdf_transfer_dict(t2p, output, i);
				written += t2p_write_pdf_stream_dict_end(output);
				written += t2p_write_pdf_stream_start(output);
				/* streamlen=written; */ /* value not used */
				written += t2p_write_pdf_transfer_stream(t2p, output, i);
				/* streamlen=written-streamlen; */ /* value not used */
				written += t2p_write_pdf_stream_end(output);
				written += t2p_write_pdf_obj_end(output);
			}
		}
		if( (t2p->pdf_colorspace & T2P_CS_PALETTE) != 0){
			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
			t2p->pdf_palettecs=t2p->pdf_xrefcount;
			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
			written += t2p_write_pdf_stream_dict_start(output);
			written += t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output);
			written += t2p_write_pdf_stream_dict_end(output);
			written += t2p_write_pdf_stream_start(output);
			/* streamlen=written; */ /* value not used */
			written += t2p_write_pdf_xobject_palettecs_stream(t2p, output);
			/* streamlen=written-streamlen; */ /* value not used */
			written += t2p_write_pdf_stream_end(output);
			written += t2p_write_pdf_obj_end(output);
		}
		if( (t2p->pdf_colorspace & T2P_CS_ICCBASED) != 0){
			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
			t2p->pdf_icccs=t2p->pdf_xrefcount;
			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
			written += t2p_write_pdf_stream_dict_start(output);
			written += t2p_write_pdf_xobject_icccs_dict(t2p, output);
			written += t2p_write_pdf_stream_dict_end(output);
			written += t2p_write_pdf_stream_start(output);
			/* streamlen=written; */ /* value not used */
			written += t2p_write_pdf_xobject_icccs_stream(t2p, output);
			/* streamlen=written-streamlen; */ /* value not used */
			written += t2p_write_pdf_stream_end(output);
			written += t2p_write_pdf_obj_end(output);
		}
		if(t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount !=0){
			for(i2=0;i2<t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount;i2++){
				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
				written += t2p_write_pdf_stream_dict_start(output);
				written += t2p_write_pdf_xobject_stream_dict(
					i2+1, 
					t2p, 
					output);
				written += t2p_write_pdf_stream_dict_end(output);
				written += t2p_write_pdf_stream_start(output);
				streamlen=written;
				t2p_read_tiff_size_tile(t2p, input, i2);
				written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2);
				t2p_write_advance_directory(t2p, output);
				if(t2p->t2p_error!=T2P_ERR_OK){return(0);}
				streamlen=written-streamlen;
				written += t2p_write_pdf_stream_end(output);
				written += t2p_write_pdf_obj_end(output);
				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
				written += t2p_write_pdf_stream_length(streamlen, output);
				written += t2p_write_pdf_obj_end(output);
			}
		} else {
			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
			written += t2p_write_pdf_stream_dict_start(output);
			written += t2p_write_pdf_xobject_stream_dict(
				0, 
				t2p, 
				output);
			written += t2p_write_pdf_stream_dict_end(output);
			written += t2p_write_pdf_stream_start(output);
			streamlen=written;
			t2p_read_tiff_size(t2p, input);
			written += t2p_readwrite_pdf_image(t2p, input, output);
			t2p_write_advance_directory(t2p, output);
			if(t2p->t2p_error!=T2P_ERR_OK){return(0);}
			streamlen=written-streamlen;
			written += t2p_write_pdf_stream_end(output);
			written += t2p_write_pdf_obj_end(output);
			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
			written += t2p_write_pdf_stream_length(streamlen, output);
			written += t2p_write_pdf_obj_end(output);
		}
	}
	t2p->pdf_startxref = written;
	written += t2p_write_pdf_xreftable(t2p, output);
	written += t2p_write_pdf_trailer(t2p, output);
	t2p_disable(output);

	return(written);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
15,17
18,19
18,20
19,20
21,22
21,23
24,25
24,26
24,27
24,28
24,29
24,30
24,31
24,32
24,33
24,34
24,35
24,36
24,37
24,38
24,39
24,40
24,41
24,42
24,43
24,44
24,45
24,46
24,47
24,48
24,49
24,50
24,51
24,52
24,53
24,54
24,55
24,56
24,57
24,58
25,26
26,27
26,28
27,28
29,30
29,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
57,58
58,59
58,60
58,61
59,60
61,62
63,64
65,66
65,67
66,67
66,68
67,68
67,69
68,69
71,72
73,74
74,75
75,76
77,78
78,79
78,80
79,80
79,81
80,81
83,84
83,85
84,85
84,86
85,86
87,88
89,90
89,91
90,91
92,93
92,94
92,95
92,96
93,94
95,96
97,98
97,99
98,99
101,102
102,103
102,104
103,104
106,107
106,108
107,108
107,109
108,109
108,110
109,110
112,113
114,115
114,116
114,117
115,116
116,117
116,118
116,119
116,120
117,118
119,120
122,123
122,124
123,124
123,125
126,127
127,128
127,129
128,129
128,130
129,130
132,133
133,134
133,135
134,135
137,138
138,139
138,140
139,140
139,141
140,141
143,144
145,146
146,147
147,148
149,150
150,151
150,152
151,152
151,153
152,153
156,157
157,158
157,159
158,159
158,160
159,160
163,164
164,165
164,166
165,166
165,167
166,167
170,171
171,172
171,173
172,173
172,174
173,174
177,178
178,179
178,180
179,180
181,182
181,183
181,184
182,183
184,185
186,187
188,189
189,190
189,191
190,191
190,192
191,192
191,193
192,193
195,196
196,197
196,198
197,198
200,201
202,203
203,204
203,205
204,205
204,206
205,206
208,209
208,210
209,210
212,213
213,214
213,215
214,215
216,217
216,218
216,219
217,218
219,220
219,221
220,221
223,224
225,226
226,227
226,228
227,228
229,230
229,231
229,232
230,231
232,233
234,235
236,237
237,238
237,239
238,239
240,241
240,242
241,242
243,244
245,246
246,247
246,248
247,248
247,249
248,249
248,250
249,250
252,253
253,254
253,255
254,255
257,258
259,260
260,261
260,262
261,262
261,263
262,263
265,266
265,267
266,267
269,270
270,271
270,272
271,272
273,274
273,275
273,276
274,275
276,277
276,278
277,278
280,281
282,283
283,284
283,285
284,285
286,287
286,288
286,289
286,290
287,288
289,290
291,292
293,294
295,296
296,297
296,298
297,298
299,300
299,301
300,301
302,303
304,305
305,306
305,307
306,307
306,308
307,308
307,309
308,309
311,312
312,313
312,314
313,314
316,317
318,319
319,320
319,321
320,321
320,322
321,322
324,325
324,326
325,326
328,329
329,330
329,331
330,331
332,333
332,334
332,335
333,334
335,336
335,337
336,337
339,340
341,342
342,343
342,344
343,344
345,346
345,347
345,348
346,347
348,349
350,351
352,353
353,354
353,355
354,355
356,357
356,358
357,358
359,360
361,362
361,363
361,364
361,365
362,363
363,364
363,365
364,365
364,366
365,366
369,370
369,371
370,371
370,372
371,372
374,375
374,376
375,376
378,379
379,380
379,381
380,381
383,384
383,385
383,386
383,387
383,388
383,389
383,390
383,391
383,392
383,393
383,394
383,395
383,396
383,397
383,398
383,399
383,400
383,401
383,402
383,403
383,404
383,405
383,406
383,407
383,408
384,385
385,386
385,387
385,388
386,387
388,389
390,391
392,393
392,394
393,394
393,395
394,395
394,396
395,396
398,399
400,401
401,402
402,403
404,405
405,406
405,407
406,407
406,408
407,408
407,409
408,409
411,412
412,413
412,414
413,414
416,417
418,419
419,420
419,421
420,421
422,423
422,424
422,425
423,424
425,426
425,427
426,427
429,430
431,432
432,433
432,434
433,434
435,436
435,437
435,438
435,439
436,437
438,439
438,440
439,440
442,443
444,445
446,447
447,448
447,449
448,449
450,451
450,452
451,452
453,454
455,456
456,457
456,458
457,458
457,459
458,459
458,460
459,460
462,463
463,464
463,465
464,465
467,468
469,470
470,471
470,472
471,472
473,474
473,475
473,476
474,475
476,477
476,478
477,478
480,481
482,483
483,484
483,485
484,485
486,487
486,488
487,488
489,490
491,492
492,493
492,494
493,494
495,496
495,497
495,498
495,499
496,497
499,500
499,501
500,501
500,502
501,502
505,506
507,508
508,509
508,510
509,510
511,512
511,513
512,513
514,515
516,517
517,518
517,519
518,519
520,521
520,522
521,522
523,524
525,526
526,527
526,528
527,528
529,530
531,532
532,533
532,534
533,534
535,536
535,537
535,538
536,537
538,539
540,541
542,543
543,544
543,545
544,545
546,547
546,548
547,548
549,550
551,552
552,553
552,554
553,554
555,556
555,557
556,557
558,559
560,561
561,562
561,563
562,563
564,565
564,566
565,566
567,568
569,570
570,571
570,572
571,572
571,573
572,573
572,574
573,574
576,577
577,578
577,579
578,579
581,582
583,584
584,585
584,586
585,586
587,588
587,589
587,590
588,589
590,591
590,592
591,592
594,595
596,597
597,598
597,599
598,599
600,601
600,602
600,603
601,602
603,604
605,606
607,608
608,609
608,610
609,610
611,612
611,613
612,613
614,615
616,617
616,618
617,618
617,619
618,619
618,620
619,620
623,624
623,625
623,626
623,627
623,628
624,625
625,626
625,627
626,627
626,628
627,628
627,629
628,629
631,632
632,633
632,634
633,634
636,637
638,639
639,640
639,641
640,641
642,643
642,644
642,645
643,644
645,646
645,647
646,647
649,650
651,652
652,653
652,654
653,654
655,656
655,657
655,658
656,657
658,659
660,661
662,663
663,664
663,665
664,665
666,667
666,668
667,668
669,670
671,672
671,673
671,674
671,675
672,673
673,674
673,675
674,675
677,678
677,679
678,679
680,681
680,682
681,682
684,685
685,686
687,688
687,689
687,690
687,691
687,692
687,693
687,694
687,695
687,696
688,689
689,690
689,691
690,691
690,692
691,692
691,693
692,693
695,696
696,697
696,698
697,698
700,701
702,703
703,704
703,705
704,705
706,707
706,708
706,709
707,708
709,710
709,711
710,711
713,714
715,716
716,717
716,718
717,718
719,720
719,721
720,721
722,723
724,725
725,726
725,727
726,727
728,729
728,730
728,731
728,732
729,730
731,732
733,734
735,736
737,738
738,739
738,740
739,740
741,742
741,743
742,743
744,745
746,747
747,748
747,749
748,749
750,751
750,752
751,752
753,754
755,756
756,757
756,758
757,758
759,760
759,761
759,762
759,763
760,761
762,763
764,765
766,767
768,769
769,770
769,771
770,771
772,773
772,774
773,774
775,776
777,778
778,779
778,780
779,780
781,782
781,783
782,783
784,785
786,787
786,788
787,788
787,789
788,789
789,790
789,791
790,791
790,792
791,792
794,795
797,798
797,799
797,800
797,801
797,802
797,803
797,804
797,805
797,806
797,807
798,799
799,800
799,801
800,801
800,802
801,802
801,803
802,803
805,806
806,807
806,808
807,808
810,811
812,813
813,814
813,815
814,815
814,816
815,816
818,819
818,820
819,820
822,823
823,824
823,825
824,825
826,827
826,828
826,829
827,828
829,830
829,831
830,831
833,834
835,836
836,837
836,838
837,838
839,840
839,841
840,841
842,843
844,845
845,846
845,847
846,847
848,849
848,850
848,851
848,852
849,850
851,852
851,853
852,853
856,857
858,859
859,860
859,861
860,861
862,863
862,864
863,864
865,866
867,868
868,869
868,870
869,870
871,872
871,873
872,873
874,875
876,877
877,878
877,879
878,879
880,881
880,882
880,883
881,882
883,884
885,886
887,888
888,889
888,890
889,890
891,892
891,893
892,893
894,895
896,897
897,898
897,899
898,899
900,901
900,902
901,902
903,904
905,906
905,907
906,907
906,908
907,908
908,909
908,910
909,910
909,911
910,911
913,914
916,917
916,918
916,919
916,920
916,921
916,922
916,923
916,924
916,925
916,926
917,918
918,919
918,920
919,920
919,921
920,921
920,922
921,922
924,925
925,926
925,927
926,927
929,930
931,932
932,933
932,934
933,934
933,935
934,935
937,938
937,939
938,939
941,942
942,943
942,944
943,944
945,946
945,947
945,948
946,947
948,949
948,950
949,950
952,953
954,955
955,956
955,957
956,957
958,959
958,960
959,960
961,962
963,964
964,965
964,966
965,966
967,968
967,969
967,970
968,969
970,971
972,973
974,975
975,976
975,977
976,977
978,979
978,980
979,980
981,982
983,984
984,985
984,986
985,986
987,988
987,989
988,989
990,991
992,993
993,994
993,995
994,995
996,997
996,998
996,999
997,998
999,1000
1001,1002
1003,1004
1004,1005
1004,1006
1005,1006
1007,1008
1007,1009
1008,1009
1010,1011
1012,1013
1013,1014
1013,1015
1014,1015
1016,1017
1016,1018
1017,1018
1019,1020
1021,1022
1021,1023
1021,1024
1022,1023
1022,1024
1023,1024
1023,1025
1024,1025
1024,1026
1025,1026
1025,1027
1026,1027
1029,1030
1029,1031
1030,1031
1035,1036
1036,1037
1036,1038
1036,1039
1036,1040
1037,1038
1038,1039
1038,1040
1039,1040
1042,1043
1042,1044
1043,1044
1045,1046
1045,1047
1046,1047
1046,1048
1047,1048
1047,1049
1048,1049
1051,1052
1051,1053
1052,1053
1056,1057
1057,1058
1059,1060
1059,1061
1059,1062
1059,1063
1059,1064
1059,1065
1059,1066
1059,1067
1059,1068
1059,1069
1059,1070
1059,1071
1059,1072
1059,1073
1059,1074
1059,1075
1059,1076
1059,1077
1060,1061
1061,1062
1061,1063
1062,1063
1062,1064
1063,1064
1063,1065
1064,1065
1067,1068
1068,1069
1068,1070
1069,1070
1072,1073
1074,1075
1075,1076
1075,1077
1076,1077
1078,1079
1078,1080
1078,1081
1079,1080
1081,1082
1081,1083
1082,1083
1085,1086
1087,1088
1088,1089
1088,1090
1089,1090
1091,1092
1091,1093
1092,1093
1094,1095
1096,1097
1097,1098
1097,1099
1098,1099
1100,1101
1100,1102
1100,1103
1100,1104
1101,1102
1103,1104
1103,1105
1104,1105
1107,1108
1109,1110
1111,1112
1112,1113
1112,1114
1113,1114
1115,1116
1115,1117
1116,1117
1118,1119
1120,1121
1121,1122
1121,1123
1122,1123
1124,1125
1124,1126
1125,1126
1127,1128
1129,1130
1130,1131
1130,1132
1131,1132
1133,1134
1135,1136
1136,1137
1136,1138
1136,1139
1136,1140
1137,1138
1139,1140
1141,1142
1143,1144
1145,1146
1146,1147
1146,1148
1147,1148
1149,1150
1149,1151
1149,1152
1149,1153
1149,1154
1150,1151
1152,1153
1154,1155
1156,1157
1158,1159
1160,1161
1161,1162
1161,1163
1161,1164
1162,1163
1164,1165
1166,1167
1168,1169
1168,1170
1169,1170
1169,1171
1170,1171
1170,1172
1171,1172
1174,1175
1176,1177
1177,1178
1178,1179
1180,1181
1181,1182
1181,1183
1182,1183
1184,1185
1184,1186
1185,1186
1187,1188
1189,1190
1190,1191
1190,1192
1191,1192
1193,1194
1193,1195
1194,1195
1196,1197
1198,1199
1199,1200
1199,1201
1200,1201
1202,1203
1202,1204
1203,1204
1205,1206
1207,1208
1208,1209
1208,1210
1209,1210
1209,1211
1210,1211
1210,1212
1211,1212
1214,1215
1215,1216
1215,1217
1216,1217
1219,1220
1221,1222
1222,1223
1222,1224
1223,1224
1225,1226
1225,1227
1225,1228
1226,1227
1228,1229
1228,1230
1229,1230
1232,1233
1234,1235
1235,1236
1235,1237
1236,1237
1238,1239
1238,1240
1238,1241
1239,1240
1241,1242
1243,1244
1245,1246
1246,1247
1246,1248
1247,1248
1249,1250
1249,1251
1250,1251
1252,1253
1254,1255
1254,1256
1254,1257
1254,1258
1254,1259
1254,1260
1254,1261
1254,1262
1254,1263
1254,1264
1254,1265
1254,1266
1254,1267
1254,1268
1254,1269
1254,1270
1254,1271
1254,1272
1255,1256
1256,1257
1256,1258
1257,1258
1257,1259
1258,1259
1258,1260
1259,1260
1262,1263
1263,1264
1263,1265
1264,1265
1267,1268
1269,1270
1270,1271
1270,1272
1271,1272
1273,1274
1273,1275
1273,1276
1274,1275
1276,1277
1276,1278
1277,1278
1280,1281
1282,1283
1283,1284
1283,1285
1284,1285
1286,1287
1286,1288
1287,1288
1289,1290
1291,1292
1292,1293
1292,1294
1293,1294
1295,1296
1295,1297
1295,1298
1295,1299
1296,1297
1299,1300
1301,1302
1303,1304
1304,1305
1304,1306
1305,1306
1307,1308
1307,1309
1308,1309
1310,1311
1312,1313
1313,1314
1313,1315
1314,1315
1316,1317
1316,1318
1317,1318
1319,1320
1321,1322
1322,1323
1322,1324
1323,1324
1325,1326
1327,1328
1328,1329
1328,1330
1328,1331
1329,1330
1331,1332
1333,1334
1335,1336
1336,1337
1336,1338
1337,1338
1339,1340
1339,1341
1339,1342
1339,1343
1340,1341
1342,1343
1344,1345
1346,1347
1348,1349
1349,1350
1349,1351
1349,1352
1350,1351
1352,1353
1354,1355
1356,1357
1356,1358
1357,1358
1357,1359
1358,1359
1358,1360
1359,1360
1362,1363
1364,1365
1365,1366
1366,1367
1368,1369
1369,1370
1369,1371
1370,1371
1372,1373
1372,1374
1373,1374
1375,1376
1377,1378
1378,1379
1378,1380
1379,1380
1381,1382
1381,1383
1382,1383
1384,1385
1386,1387
1387,1388
1387,1389
1388,1389
1390,1391
1390,1392
1391,1392
1393,1394
1395,1396
1396,1397
1396,1398
1397,1398
1397,1399
1398,1399
1398,1400
1399,1400
1402,1403
1403,1404
1403,1405
1404,1405
1407,1408
1409,1410
1410,1411
1410,1412
1411,1412
1413,1414
1413,1415
1413,1416
1414,1415
1416,1417
1416,1418
1417,1418
1420,1421
1422,1423
1423,1424
1423,1425
1424,1425
1426,1427
1426,1428
1426,1429
1427,1428
1429,1430
1431,1432
1433,1434
1434,1435
1434,1436
1435,1436
1437,1438
1437,1439
1438,1439
1440,1441
1442,1443
1443,1444
1443,1445
1444,1445
1444,1446
1445,1446
1448,1449
1450,1451
1451,1452
1451,1453
1452,1453
1454,1455
1454,1456
1454,1457
1455,1456
1457,1458
1459,1460
1461,1462
1462,1463
1462,1464
1463,1464
1465,1466
1465,1467
1465,1468
1466,1467
1468,1469
1470,1471
1472,1473
1473,1474
1473,1475
1474,1475
1476,1477
1478,1479
1479,1480
1480,1481
-----nextToken-----
3,5,8,10,11,14,16,17,20,22,23,28,30,32,36,38,40,44,46,48,52,54,56,60,62,64,69,70,72,76,81,82,86,88,91,94,96,99,100,104,105,110,111,113,118,120,121,124,125,130,131,135,136,141,142,144,148,153,154,155,160,161,162,167,168,169,174,175,176,180,183,185,187,193,194,198,199,201,206,207,210,211,215,218,221,222,224,228,231,233,235,239,242,244,250,251,255,256,258,263,264,267,268,272,275,278,279,281,285,288,290,292,294,298,301,303,309,310,314,315,317,322,323,326,327,331,334,337,338,340,344,347,349,351,355,358,360,366,367,368,372,373,376,377,381,382,387,389,391,396,397,399,403,409,410,414,415,417,421,424,427,428,430,434,437,440,441,443,445,449,452,454,460,461,465,466,468,472,475,478,479,481,485,488,490,494,497,498,502,503,504,506,510,513,515,519,522,524,528,530,534,537,539,541,545,548,550,554,557,559,563,566,568,574,575,579,580,582,586,589,592,593,595,599,602,604,606,610,613,615,620,621,622,629,630,634,635,637,641,644,647,648,650,654,657,659,661,665,668,670,675,676,679,682,683,686,693,694,698,699,701,705,708,711,712,714,718,721,723,727,730,732,734,736,740,743,745,749,752,754,758,761,763,765,767,771,774,776,780,783,785,792,793,795,796,803,804,808,809,811,816,817,820,821,825,828,831,832,834,838,841,843,847,850,853,854,855,857,861,864,866,870,873,875,879,882,884,886,890,893,895,899,902,904,911,912,914,915,922,923,927,928,930,935,936,939,940,944,947,950,951,953,957,960,962,966,969,971,973,977,980,982,986,989,991,995,998,1000,1002,1006,1009,1011,1015,1018,1020,1027,1028,1031,1032,1033,1034,1040,1041,1044,1049,1050,1053,1054,1055,1058,1065,1066,1070,1071,1073,1077,1080,1083,1084,1086,1090,1093,1095,1099,1102,1105,1106,1108,1110,1114,1117,1119,1123,1126,1128,1132,1134,1138,1140,1142,1144,1148,1151,1153,1155,1157,1159,1163,1165,1167,1172,1173,1175,1179,1183,1186,1188,1192,1195,1197,1201,1204,1206,1212,1213,1217,1218,1220,1224,1227,1230,1231,1233,1237,1240,1242,1244,1248,1251,1253,1260,1261,1265,1266,1268,1272,1275,1278,1279,1281,1285,1288,1290,1294,1297,1298,1300,1302,1306,1309,1311,1315,1318,1320,1324,1326,1330,1332,1334,1338,1341,1343,1345,1347,1351,1353,1355,1360,1361,1363,1367,1371,1374,1376,1380,1383,1385,1389,1392,1394,1400,1401,1405,1406,1408,1412,1415,1418,1419,1421,1425,1428,1430,1432,1436,1439,1441,1446,1447,1449,1453,1456,1458,1460,1464,1467,1469,1471,1475,1477,1481
-----computeFrom-----
66,67
66,68
78,79
78,80
107,108
107,109
127,128
127,129
138,139
138,140
150,151
150,152
157,158
157,159
164,165
164,166
171,172
171,173
178,179
178,180
189,190
189,191
203,204
203,205
213,214
213,215
226,227
226,228
237,238
237,239
246,247
246,248
260,261
260,262
270,271
270,272
283,284
283,285
296,297
296,298
305,306
305,307
319,320
319,321
329,330
329,331
342,343
342,344
353,354
353,355
363,364
363,365
369,370
369,371
393,394
393,395
405,406
405,407
419,420
419,421
432,433
432,434
447,448
447,449
456,457
456,458
470,471
470,472
483,484
483,485
492,493
492,494
499,500
499,501
508,509
508,510
517,518
517,519
526,527
526,528
532,533
532,534
543,544
543,545
546,547
546,548
552,553
552,554
561,562
561,563
570,571
570,572
584,585
584,586
597,598
597,599
608,609
608,610
617,618
617,619
625,626
625,627
639,640
639,641
652,653
652,654
663,664
663,665
673,674
673,675
677,678
677,679
689,690
689,691
703,704
703,705
716,717
716,718
725,726
725,727
738,739
738,740
747,748
747,749
756,757
756,758
769,770
769,771
778,779
778,780
787,788
787,789
789,790
789,791
799,800
799,801
813,814
813,815
823,824
823,825
836,837
836,838
845,846
845,847
859,860
859,861
868,869
868,870
877,878
877,879
888,889
888,890
897,898
897,899
906,907
906,908
908,909
908,910
918,919
918,920
932,933
932,934
942,943
942,944
955,956
955,957
964,965
964,966
975,976
975,977
984,985
984,986
993,994
993,995
1004,1005
1004,1006
1013,1014
1013,1015
1022,1023
1022,1024
1038,1039
1038,1040
1042,1043
1042,1044
1061,1062
1061,1063
1075,1076
1075,1077
1088,1089
1088,1090
1097,1098
1097,1099
1103,1104
1103,1105
1112,1113
1112,1114
1121,1122
1121,1123
1130,1131
1130,1132
1146,1147
1146,1148
1169,1170
1169,1171
1181,1182
1181,1183
1184,1185
1184,1186
1190,1191
1190,1192
1199,1200
1199,1201
1208,1209
1208,1210
1222,1223
1222,1224
1235,1236
1235,1237
1246,1247
1246,1248
1256,1257
1256,1258
1270,1271
1270,1272
1283,1284
1283,1285
1292,1293
1292,1294
1304,1305
1304,1306
1313,1314
1313,1315
1322,1323
1322,1324
1336,1337
1336,1338
1357,1358
1357,1359
1369,1370
1369,1371
1372,1373
1372,1374
1378,1379
1378,1380
1387,1388
1387,1389
1396,1397
1396,1398
1410,1411
1410,1412
1423,1424
1423,1425
1434,1435
1434,1436
1443,1444
1443,1445
1451,1452
1451,1453
1462,1463
1462,1464
-----guardedBy-----
110,141
620,763
621,683
792,884
911,1000
1031,1230
1028,1050
1033,1055
1032,1054
-----guardedByNegation-----
1031,1418
-----lastLexicalUse-----
1031,1418
-----jump-----
1031,1418
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
tsize_t t2p_write_pdf(T2P* t2p, TIFF* input, TIFF* output){	tsize_t written=0;	ttile_t i2=0;	tsize_t streamlen=0;	uint16 i=0;	t2p_read_tiff_init(t2p, input);	if(t2p->t2p_error!=T2P_ERR_OK){return(0);}	t2p->pdf_xrefoffsets= (uint32*) _TIFFmalloc(TIFFSafeMultiply(tmsize_t,t2p->pdf_xrefcount,sizeof(uint32)) );	if(t2p->pdf_xrefoffsets==NULL){		TIFFError(			TIFF2PDF_MODULE, 			"Can't allocate %u bytes of memory for t2p_write_pdf", 			(unsigned int) (t2p->pdf_xrefcount * sizeof(uint32)) );		t2p->t2p_error = T2P_ERR_ERROR;		return(written);	}	t2p->pdf_xrefcount=0;	t2p->pdf_catalog=1;	t2p->pdf_info=2;	t2p->pdf_pages=3;	written += t2p_write_pdf_header(t2p, output);	t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;	t2p->pdf_catalog=t2p->pdf_xrefcount;	written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);	written += t2p_write_pdf_catalog(t2p, output);	written += t2p_write_pdf_obj_end(output);	t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;	t2p->pdf_info=t2p->pdf_xrefcount;	written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);	written += t2p_write_pdf_info(t2p, input, output);	written += t2p_write_pdf_obj_end(output);	t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;	t2p->pdf_pages=t2p->pdf_xrefcount;	written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);	written += t2p_write_pdf_pages(t2p, output);	written += t2p_write_pdf_obj_end(output);	for(t2p->pdf_page=0;t2p->pdf_page<t2p->tiff_pagecount;t2p->pdf_page++){		t2p_read_tiff_data(t2p, input);		if(t2p->t2p_error!=T2P_ERR_OK){return(0);}		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_page(t2p->pdf_xrefcount, t2p, output);		written += t2p_write_pdf_obj_end(output);		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_stream_dict_start(output);		written += t2p_write_pdf_stream_dict(0, t2p->pdf_xrefcount+1, output);		written += t2p_write_pdf_stream_dict_end(output);		written += t2p_write_pdf_stream_start(output);		streamlen=written;		written += t2p_write_pdf_page_content_stream(t2p, output);		streamlen=written-streamlen;		written += t2p_write_pdf_stream_end(output);		written += t2p_write_pdf_obj_end(output);		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_stream_length(streamlen, output);		written += t2p_write_pdf_obj_end(output);		if(t2p->tiff_transferfunctioncount != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_transfer(t2p, output);			written += t2p_write_pdf_obj_end(output);			for(i=0; i < t2p->tiff_transferfunctioncount; i++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_transfer_dict(t2p, output, i);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				/* streamlen=written; */ /* value not used */				written += t2p_write_pdf_transfer_stream(t2p, output, i);				/* streamlen=written-streamlen; */ /* value not used */				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);			}		}		if( (t2p->pdf_colorspace & T2P_CS_PALETTE) != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_palettecs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_palettecs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}		if( (t2p->pdf_colorspace & T2P_CS_ICCBASED) != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_icccs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_icccs_dict(t2p, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_icccs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}		if(t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount !=0){			for(i2=0;i2<t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount;i2++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_xobject_stream_dict(					i2+1, 					t2p, 					output);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				streamlen=written;				t2p_read_tiff_size_tile(t2p, input, i2);				written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2);				t2p_write_advance_directory(t2p, output);				if(t2p->t2p_error!=T2P_ERR_OK){return(0);}				streamlen=written-streamlen;				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_length(streamlen, output);				written += t2p_write_pdf_obj_end(output);			}		} else {			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_stream_dict(				0, 				t2p, 				output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			streamlen=written;			t2p_read_tiff_size(t2p, input);			written += t2p_readwrite_pdf_image(t2p, input, output);			t2p_write_advance_directory(t2p, output);			if(t2p->t2p_error!=T2P_ERR_OK){return(0);}			streamlen=written-streamlen;			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_length(streamlen, output);			written += t2p_write_pdf_obj_end(output);		}	}	t2p->pdf_startxref = written;	written += t2p_write_pdf_xreftable(t2p, output);	written += t2p_write_pdf_trailer(t2p, output);	t2p_disable(output);	return(written);}
tsize_t
tsize_t
t2p_write_pdf(T2P* t2p, TIFF* input, TIFF* output)
t2p_write_pdf
T2P* t2p
T2P
T2P
* t2p
*
t2p
TIFF* input
TIFF
TIFF
* input
*
input
TIFF* output
TIFF
TIFF
* output
*
output
{	tsize_t written=0;	ttile_t i2=0;	tsize_t streamlen=0;	uint16 i=0;	t2p_read_tiff_init(t2p, input);	if(t2p->t2p_error!=T2P_ERR_OK){return(0);}	t2p->pdf_xrefoffsets= (uint32*) _TIFFmalloc(TIFFSafeMultiply(tmsize_t,t2p->pdf_xrefcount,sizeof(uint32)) );	if(t2p->pdf_xrefoffsets==NULL){		TIFFError(			TIFF2PDF_MODULE, 			"Can't allocate %u bytes of memory for t2p_write_pdf", 			(unsigned int) (t2p->pdf_xrefcount * sizeof(uint32)) );		t2p->t2p_error = T2P_ERR_ERROR;		return(written);	}	t2p->pdf_xrefcount=0;	t2p->pdf_catalog=1;	t2p->pdf_info=2;	t2p->pdf_pages=3;	written += t2p_write_pdf_header(t2p, output);	t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;	t2p->pdf_catalog=t2p->pdf_xrefcount;	written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);	written += t2p_write_pdf_catalog(t2p, output);	written += t2p_write_pdf_obj_end(output);	t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;	t2p->pdf_info=t2p->pdf_xrefcount;	written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);	written += t2p_write_pdf_info(t2p, input, output);	written += t2p_write_pdf_obj_end(output);	t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;	t2p->pdf_pages=t2p->pdf_xrefcount;	written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);	written += t2p_write_pdf_pages(t2p, output);	written += t2p_write_pdf_obj_end(output);	for(t2p->pdf_page=0;t2p->pdf_page<t2p->tiff_pagecount;t2p->pdf_page++){		t2p_read_tiff_data(t2p, input);		if(t2p->t2p_error!=T2P_ERR_OK){return(0);}		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_page(t2p->pdf_xrefcount, t2p, output);		written += t2p_write_pdf_obj_end(output);		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_stream_dict_start(output);		written += t2p_write_pdf_stream_dict(0, t2p->pdf_xrefcount+1, output);		written += t2p_write_pdf_stream_dict_end(output);		written += t2p_write_pdf_stream_start(output);		streamlen=written;		written += t2p_write_pdf_page_content_stream(t2p, output);		streamlen=written-streamlen;		written += t2p_write_pdf_stream_end(output);		written += t2p_write_pdf_obj_end(output);		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_stream_length(streamlen, output);		written += t2p_write_pdf_obj_end(output);		if(t2p->tiff_transferfunctioncount != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_transfer(t2p, output);			written += t2p_write_pdf_obj_end(output);			for(i=0; i < t2p->tiff_transferfunctioncount; i++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_transfer_dict(t2p, output, i);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				/* streamlen=written; */ /* value not used */				written += t2p_write_pdf_transfer_stream(t2p, output, i);				/* streamlen=written-streamlen; */ /* value not used */				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);			}		}		if( (t2p->pdf_colorspace & T2P_CS_PALETTE) != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_palettecs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_palettecs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}		if( (t2p->pdf_colorspace & T2P_CS_ICCBASED) != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_icccs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_icccs_dict(t2p, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_icccs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}		if(t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount !=0){			for(i2=0;i2<t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount;i2++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_xobject_stream_dict(					i2+1, 					t2p, 					output);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				streamlen=written;				t2p_read_tiff_size_tile(t2p, input, i2);				written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2);				t2p_write_advance_directory(t2p, output);				if(t2p->t2p_error!=T2P_ERR_OK){return(0);}				streamlen=written-streamlen;				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_length(streamlen, output);				written += t2p_write_pdf_obj_end(output);			}		} else {			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_stream_dict(				0, 				t2p, 				output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			streamlen=written;			t2p_read_tiff_size(t2p, input);			written += t2p_readwrite_pdf_image(t2p, input, output);			t2p_write_advance_directory(t2p, output);			if(t2p->t2p_error!=T2P_ERR_OK){return(0);}			streamlen=written-streamlen;			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_length(streamlen, output);			written += t2p_write_pdf_obj_end(output);		}	}	t2p->pdf_startxref = written;	written += t2p_write_pdf_xreftable(t2p, output);	written += t2p_write_pdf_trailer(t2p, output);	t2p_disable(output);	return(written);}
tsize_t written=0;
tsize_t written=0;
tsize_t
tsize_t
written=0
written
=0
0
ttile_t i2=0;
ttile_t i2=0;
ttile_t
ttile_t
i2=0
i2
=0
0
tsize_t streamlen=0;
tsize_t streamlen=0;
tsize_t
tsize_t
streamlen=0
streamlen
=0
0
uint16 i=0;
uint16 i=0;
uint16
uint16
i=0
i
=0
0
t2p_read_tiff_init(t2p, input);
t2p_read_tiff_init(t2p, input)
t2p_read_tiff_init
t2p_read_tiff_init
t2p
t2p
input
input
if(t2p->t2p_error!=T2P_ERR_OK){return(0);}
t2p->t2p_error!=T2P_ERR_OK
t2p->t2p_error
t2p
t2p
t2p_error
T2P_ERR_OK
T2P_ERR_OK
{return(0);}
return(0);
(0)
0
t2p->pdf_xrefoffsets= (uint32*) _TIFFmalloc(TIFFSafeMultiply(tmsize_t,t2p->pdf_xrefcount,sizeof(uint32)) );
t2p->pdf_xrefoffsets= (uint32*) _TIFFmalloc(TIFFSafeMultiply(tmsize_t,t2p->pdf_xrefcount,sizeof(uint32)) )
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
(uint32*) _TIFFmalloc(TIFFSafeMultiply(tmsize_t,t2p->pdf_xrefcount,sizeof(uint32)) )
uint32*
uint32
uint32
*
*
_TIFFmalloc(TIFFSafeMultiply(tmsize_t,t2p->pdf_xrefcount,sizeof(uint32)) )
_TIFFmalloc
_TIFFmalloc
TIFFSafeMultiply(tmsize_t,t2p->pdf_xrefcount,sizeof(uint32))
TIFFSafeMultiply
TIFFSafeMultiply
tmsize_t
tmsize_t
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
sizeof(uint32)
uint32
uint32
uint32

if(t2p->pdf_xrefoffsets==NULL){		TIFFError(			TIFF2PDF_MODULE, 			"Can't allocate %u bytes of memory for t2p_write_pdf", 			(unsigned int) (t2p->pdf_xrefcount * sizeof(uint32)) );		t2p->t2p_error = T2P_ERR_ERROR;		return(written);	}
t2p->pdf_xrefoffsets==NULL
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
NULL
NULL
{		TIFFError(			TIFF2PDF_MODULE, 			"Can't allocate %u bytes of memory for t2p_write_pdf", 			(unsigned int) (t2p->pdf_xrefcount * sizeof(uint32)) );		t2p->t2p_error = T2P_ERR_ERROR;		return(written);	}
TIFFError(			TIFF2PDF_MODULE, 			"Can't allocate %u bytes of memory for t2p_write_pdf", 			(unsigned int) (t2p->pdf_xrefcount * sizeof(uint32)) );
TIFFError(			TIFF2PDF_MODULE, 			"Can't allocate %u bytes of memory for t2p_write_pdf", 			(unsigned int) (t2p->pdf_xrefcount * sizeof(uint32)) )
TIFFError
TIFFError
TIFF2PDF_MODULE
TIFF2PDF_MODULE
"Can't allocate %u bytes of memory for t2p_write_pdf"
(unsigned int) (t2p->pdf_xrefcount * sizeof(uint32))
unsigned int
unsigned int

(t2p->pdf_xrefcount * sizeof(uint32))
t2p->pdf_xrefcount * sizeof(uint32)
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
sizeof(uint32)
uint32
uint32
uint32

t2p->t2p_error = T2P_ERR_ERROR;
t2p->t2p_error = T2P_ERR_ERROR
t2p->t2p_error
t2p
t2p
t2p_error
T2P_ERR_ERROR
T2P_ERR_ERROR
return(written);
(written)
written
written
t2p->pdf_xrefcount=0;
t2p->pdf_xrefcount=0
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
0
t2p->pdf_catalog=1;
t2p->pdf_catalog=1
t2p->pdf_catalog
t2p
t2p
pdf_catalog
1
t2p->pdf_info=2;
t2p->pdf_info=2
t2p->pdf_info
t2p
t2p
pdf_info
2
t2p->pdf_pages=3;
t2p->pdf_pages=3
t2p->pdf_pages
t2p
t2p
pdf_pages
3
written += t2p_write_pdf_header(t2p, output);
written += t2p_write_pdf_header(t2p, output)
written
written
t2p_write_pdf_header(t2p, output)
t2p_write_pdf_header
t2p_write_pdf_header
t2p
t2p
output
output
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
t2p->pdf_catalog=t2p->pdf_xrefcount;
t2p->pdf_catalog=t2p->pdf_xrefcount
t2p->pdf_catalog
t2p
t2p
pdf_catalog
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_catalog(t2p, output);
written += t2p_write_pdf_catalog(t2p, output)
written
written
t2p_write_pdf_catalog(t2p, output)
t2p_write_pdf_catalog
t2p_write_pdf_catalog
t2p
t2p
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
t2p->pdf_info=t2p->pdf_xrefcount;
t2p->pdf_info=t2p->pdf_xrefcount
t2p->pdf_info
t2p
t2p
pdf_info
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_info(t2p, input, output);
written += t2p_write_pdf_info(t2p, input, output)
written
written
t2p_write_pdf_info(t2p, input, output)
t2p_write_pdf_info
t2p_write_pdf_info
t2p
t2p
input
input
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
t2p->pdf_pages=t2p->pdf_xrefcount;
t2p->pdf_pages=t2p->pdf_xrefcount
t2p->pdf_pages
t2p
t2p
pdf_pages
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_pages(t2p, output);
written += t2p_write_pdf_pages(t2p, output)
written
written
t2p_write_pdf_pages(t2p, output)
t2p_write_pdf_pages
t2p_write_pdf_pages
t2p
t2p
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
for(t2p->pdf_page=0;t2p->pdf_page<t2p->tiff_pagecount;t2p->pdf_page++){		t2p_read_tiff_data(t2p, input);		if(t2p->t2p_error!=T2P_ERR_OK){return(0);}		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_page(t2p->pdf_xrefcount, t2p, output);		written += t2p_write_pdf_obj_end(output);		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_stream_dict_start(output);		written += t2p_write_pdf_stream_dict(0, t2p->pdf_xrefcount+1, output);		written += t2p_write_pdf_stream_dict_end(output);		written += t2p_write_pdf_stream_start(output);		streamlen=written;		written += t2p_write_pdf_page_content_stream(t2p, output);		streamlen=written-streamlen;		written += t2p_write_pdf_stream_end(output);		written += t2p_write_pdf_obj_end(output);		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_stream_length(streamlen, output);		written += t2p_write_pdf_obj_end(output);		if(t2p->tiff_transferfunctioncount != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_transfer(t2p, output);			written += t2p_write_pdf_obj_end(output);			for(i=0; i < t2p->tiff_transferfunctioncount; i++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_transfer_dict(t2p, output, i);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				/* streamlen=written; */ /* value not used */				written += t2p_write_pdf_transfer_stream(t2p, output, i);				/* streamlen=written-streamlen; */ /* value not used */				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);			}		}		if( (t2p->pdf_colorspace & T2P_CS_PALETTE) != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_palettecs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_palettecs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}		if( (t2p->pdf_colorspace & T2P_CS_ICCBASED) != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_icccs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_icccs_dict(t2p, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_icccs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}		if(t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount !=0){			for(i2=0;i2<t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount;i2++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_xobject_stream_dict(					i2+1, 					t2p, 					output);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				streamlen=written;				t2p_read_tiff_size_tile(t2p, input, i2);				written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2);				t2p_write_advance_directory(t2p, output);				if(t2p->t2p_error!=T2P_ERR_OK){return(0);}				streamlen=written-streamlen;				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_length(streamlen, output);				written += t2p_write_pdf_obj_end(output);			}		} else {			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_stream_dict(				0, 				t2p, 				output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			streamlen=written;			t2p_read_tiff_size(t2p, input);			written += t2p_readwrite_pdf_image(t2p, input, output);			t2p_write_advance_directory(t2p, output);			if(t2p->t2p_error!=T2P_ERR_OK){return(0);}			streamlen=written-streamlen;			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_length(streamlen, output);			written += t2p_write_pdf_obj_end(output);		}	}
t2p->pdf_page=0;
t2p->pdf_page=0
t2p->pdf_page
t2p
t2p
pdf_page
0
t2p->pdf_page<t2p->tiff_pagecount
t2p->pdf_page
t2p
t2p
pdf_page
t2p->tiff_pagecount
t2p
t2p
tiff_pagecount
t2p->pdf_page++
t2p->pdf_page
t2p
t2p
pdf_page
{		t2p_read_tiff_data(t2p, input);		if(t2p->t2p_error!=T2P_ERR_OK){return(0);}		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_page(t2p->pdf_xrefcount, t2p, output);		written += t2p_write_pdf_obj_end(output);		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_stream_dict_start(output);		written += t2p_write_pdf_stream_dict(0, t2p->pdf_xrefcount+1, output);		written += t2p_write_pdf_stream_dict_end(output);		written += t2p_write_pdf_stream_start(output);		streamlen=written;		written += t2p_write_pdf_page_content_stream(t2p, output);		streamlen=written-streamlen;		written += t2p_write_pdf_stream_end(output);		written += t2p_write_pdf_obj_end(output);		t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;		written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);		written += t2p_write_pdf_stream_length(streamlen, output);		written += t2p_write_pdf_obj_end(output);		if(t2p->tiff_transferfunctioncount != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_transfer(t2p, output);			written += t2p_write_pdf_obj_end(output);			for(i=0; i < t2p->tiff_transferfunctioncount; i++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_transfer_dict(t2p, output, i);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				/* streamlen=written; */ /* value not used */				written += t2p_write_pdf_transfer_stream(t2p, output, i);				/* streamlen=written-streamlen; */ /* value not used */				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);			}		}		if( (t2p->pdf_colorspace & T2P_CS_PALETTE) != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_palettecs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_palettecs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}		if( (t2p->pdf_colorspace & T2P_CS_ICCBASED) != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_icccs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_icccs_dict(t2p, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_icccs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}		if(t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount !=0){			for(i2=0;i2<t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount;i2++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_xobject_stream_dict(					i2+1, 					t2p, 					output);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				streamlen=written;				t2p_read_tiff_size_tile(t2p, input, i2);				written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2);				t2p_write_advance_directory(t2p, output);				if(t2p->t2p_error!=T2P_ERR_OK){return(0);}				streamlen=written-streamlen;				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_length(streamlen, output);				written += t2p_write_pdf_obj_end(output);			}		} else {			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_stream_dict(				0, 				t2p, 				output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			streamlen=written;			t2p_read_tiff_size(t2p, input);			written += t2p_readwrite_pdf_image(t2p, input, output);			t2p_write_advance_directory(t2p, output);			if(t2p->t2p_error!=T2P_ERR_OK){return(0);}			streamlen=written-streamlen;			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_length(streamlen, output);			written += t2p_write_pdf_obj_end(output);		}	}
t2p_read_tiff_data(t2p, input);
t2p_read_tiff_data(t2p, input)
t2p_read_tiff_data
t2p_read_tiff_data
t2p
t2p
input
input
if(t2p->t2p_error!=T2P_ERR_OK){return(0);}
t2p->t2p_error!=T2P_ERR_OK
t2p->t2p_error
t2p
t2p
t2p_error
T2P_ERR_OK
T2P_ERR_OK
{return(0);}
return(0);
(0)
0
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_page(t2p->pdf_xrefcount, t2p, output);
written += t2p_write_pdf_page(t2p->pdf_xrefcount, t2p, output)
written
written
t2p_write_pdf_page(t2p->pdf_xrefcount, t2p, output)
t2p_write_pdf_page
t2p_write_pdf_page
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
t2p
t2p
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_stream_dict_start(output);
written += t2p_write_pdf_stream_dict_start(output)
written
written
t2p_write_pdf_stream_dict_start(output)
t2p_write_pdf_stream_dict_start
t2p_write_pdf_stream_dict_start
output
output
written += t2p_write_pdf_stream_dict(0, t2p->pdf_xrefcount+1, output);
written += t2p_write_pdf_stream_dict(0, t2p->pdf_xrefcount+1, output)
written
written
t2p_write_pdf_stream_dict(0, t2p->pdf_xrefcount+1, output)
t2p_write_pdf_stream_dict
t2p_write_pdf_stream_dict
0
t2p->pdf_xrefcount+1
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
1
output
output
written += t2p_write_pdf_stream_dict_end(output);
written += t2p_write_pdf_stream_dict_end(output)
written
written
t2p_write_pdf_stream_dict_end(output)
t2p_write_pdf_stream_dict_end
t2p_write_pdf_stream_dict_end
output
output
written += t2p_write_pdf_stream_start(output);
written += t2p_write_pdf_stream_start(output)
written
written
t2p_write_pdf_stream_start(output)
t2p_write_pdf_stream_start
t2p_write_pdf_stream_start
output
output
streamlen=written;
streamlen=written
streamlen
streamlen
written
written
written += t2p_write_pdf_page_content_stream(t2p, output);
written += t2p_write_pdf_page_content_stream(t2p, output)
written
written
t2p_write_pdf_page_content_stream(t2p, output)
t2p_write_pdf_page_content_stream
t2p_write_pdf_page_content_stream
t2p
t2p
output
output
streamlen=written-streamlen;
streamlen=written-streamlen
streamlen
streamlen
written-streamlen
written
written
streamlen
streamlen
written += t2p_write_pdf_stream_end(output);
written += t2p_write_pdf_stream_end(output)
written
written
t2p_write_pdf_stream_end(output)
t2p_write_pdf_stream_end
t2p_write_pdf_stream_end
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_stream_length(streamlen, output);
written += t2p_write_pdf_stream_length(streamlen, output)
written
written
t2p_write_pdf_stream_length(streamlen, output)
t2p_write_pdf_stream_length
t2p_write_pdf_stream_length
streamlen
streamlen
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
if(t2p->tiff_transferfunctioncount != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_transfer(t2p, output);			written += t2p_write_pdf_obj_end(output);			for(i=0; i < t2p->tiff_transferfunctioncount; i++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_transfer_dict(t2p, output, i);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				/* streamlen=written; */ /* value not used */				written += t2p_write_pdf_transfer_stream(t2p, output, i);				/* streamlen=written-streamlen; */ /* value not used */				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);			}		}
t2p->tiff_transferfunctioncount != 0
t2p->tiff_transferfunctioncount
t2p
t2p
tiff_transferfunctioncount
0
{			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_transfer(t2p, output);			written += t2p_write_pdf_obj_end(output);			for(i=0; i < t2p->tiff_transferfunctioncount; i++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_transfer_dict(t2p, output, i);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				/* streamlen=written; */ /* value not used */				written += t2p_write_pdf_transfer_stream(t2p, output, i);				/* streamlen=written-streamlen; */ /* value not used */				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);			}		}
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_transfer(t2p, output);
written += t2p_write_pdf_transfer(t2p, output)
written
written
t2p_write_pdf_transfer(t2p, output)
t2p_write_pdf_transfer
t2p_write_pdf_transfer
t2p
t2p
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
for(i=0; i < t2p->tiff_transferfunctioncount; i++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_transfer_dict(t2p, output, i);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				/* streamlen=written; */ /* value not used */				written += t2p_write_pdf_transfer_stream(t2p, output, i);				/* streamlen=written-streamlen; */ /* value not used */				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);			}
i=0;
i=0
i
i
0
i < t2p->tiff_transferfunctioncount
i
i
t2p->tiff_transferfunctioncount
t2p
t2p
tiff_transferfunctioncount
i++
i
i
{				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_transfer_dict(t2p, output, i);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				/* streamlen=written; */ /* value not used */				written += t2p_write_pdf_transfer_stream(t2p, output, i);				/* streamlen=written-streamlen; */ /* value not used */				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);			}
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_stream_dict_start(output);
written += t2p_write_pdf_stream_dict_start(output)
written
written
t2p_write_pdf_stream_dict_start(output)
t2p_write_pdf_stream_dict_start
t2p_write_pdf_stream_dict_start
output
output
written += t2p_write_pdf_transfer_dict(t2p, output, i);
written += t2p_write_pdf_transfer_dict(t2p, output, i)
written
written
t2p_write_pdf_transfer_dict(t2p, output, i)
t2p_write_pdf_transfer_dict
t2p_write_pdf_transfer_dict
t2p
t2p
output
output
i
i
written += t2p_write_pdf_stream_dict_end(output);
written += t2p_write_pdf_stream_dict_end(output)
written
written
t2p_write_pdf_stream_dict_end(output)
t2p_write_pdf_stream_dict_end
t2p_write_pdf_stream_dict_end
output
output
written += t2p_write_pdf_stream_start(output);
written += t2p_write_pdf_stream_start(output)
written
written
t2p_write_pdf_stream_start(output)
t2p_write_pdf_stream_start
t2p_write_pdf_stream_start
output
output
written += t2p_write_pdf_transfer_stream(t2p, output, i);
written += t2p_write_pdf_transfer_stream(t2p, output, i)
written
written
t2p_write_pdf_transfer_stream(t2p, output, i)
t2p_write_pdf_transfer_stream
t2p_write_pdf_transfer_stream
t2p
t2p
output
output
i
i
written += t2p_write_pdf_stream_end(output);
written += t2p_write_pdf_stream_end(output)
written
written
t2p_write_pdf_stream_end(output)
t2p_write_pdf_stream_end
t2p_write_pdf_stream_end
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
if( (t2p->pdf_colorspace & T2P_CS_PALETTE) != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_palettecs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_palettecs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}
(t2p->pdf_colorspace & T2P_CS_PALETTE) != 0
(t2p->pdf_colorspace & T2P_CS_PALETTE)
t2p->pdf_colorspace & T2P_CS_PALETTE
t2p->pdf_colorspace
t2p
t2p
pdf_colorspace
T2P_CS_PALETTE
T2P_CS_PALETTE
0
{			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_palettecs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_palettecs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
t2p->pdf_palettecs=t2p->pdf_xrefcount;
t2p->pdf_palettecs=t2p->pdf_xrefcount
t2p->pdf_palettecs
t2p
t2p
pdf_palettecs
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_stream_dict_start(output);
written += t2p_write_pdf_stream_dict_start(output)
written
written
t2p_write_pdf_stream_dict_start(output)
t2p_write_pdf_stream_dict_start
t2p_write_pdf_stream_dict_start
output
output
written += t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output);
written += t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output)
written
written
t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output)
t2p_write_pdf_stream_dict
t2p_write_pdf_stream_dict
t2p->pdf_palettesize
t2p
t2p
pdf_palettesize
0
output
output
written += t2p_write_pdf_stream_dict_end(output);
written += t2p_write_pdf_stream_dict_end(output)
written
written
t2p_write_pdf_stream_dict_end(output)
t2p_write_pdf_stream_dict_end
t2p_write_pdf_stream_dict_end
output
output
written += t2p_write_pdf_stream_start(output);
written += t2p_write_pdf_stream_start(output)
written
written
t2p_write_pdf_stream_start(output)
t2p_write_pdf_stream_start
t2p_write_pdf_stream_start
output
output
written += t2p_write_pdf_xobject_palettecs_stream(t2p, output);
written += t2p_write_pdf_xobject_palettecs_stream(t2p, output)
written
written
t2p_write_pdf_xobject_palettecs_stream(t2p, output)
t2p_write_pdf_xobject_palettecs_stream
t2p_write_pdf_xobject_palettecs_stream
t2p
t2p
output
output
written += t2p_write_pdf_stream_end(output);
written += t2p_write_pdf_stream_end(output)
written
written
t2p_write_pdf_stream_end(output)
t2p_write_pdf_stream_end
t2p_write_pdf_stream_end
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
if( (t2p->pdf_colorspace & T2P_CS_ICCBASED) != 0){			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_icccs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_icccs_dict(t2p, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_icccs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}
(t2p->pdf_colorspace & T2P_CS_ICCBASED) != 0
(t2p->pdf_colorspace & T2P_CS_ICCBASED)
t2p->pdf_colorspace & T2P_CS_ICCBASED
t2p->pdf_colorspace
t2p
t2p
pdf_colorspace
T2P_CS_ICCBASED
T2P_CS_ICCBASED
0
{			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			t2p->pdf_icccs=t2p->pdf_xrefcount;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_icccs_dict(t2p, output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			/* streamlen=written; */ /* value not used */			written += t2p_write_pdf_xobject_icccs_stream(t2p, output);			/* streamlen=written-streamlen; */ /* value not used */			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);		}
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
t2p->pdf_icccs=t2p->pdf_xrefcount;
t2p->pdf_icccs=t2p->pdf_xrefcount
t2p->pdf_icccs
t2p
t2p
pdf_icccs
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_stream_dict_start(output);
written += t2p_write_pdf_stream_dict_start(output)
written
written
t2p_write_pdf_stream_dict_start(output)
t2p_write_pdf_stream_dict_start
t2p_write_pdf_stream_dict_start
output
output
written += t2p_write_pdf_xobject_icccs_dict(t2p, output);
written += t2p_write_pdf_xobject_icccs_dict(t2p, output)
written
written
t2p_write_pdf_xobject_icccs_dict(t2p, output)
t2p_write_pdf_xobject_icccs_dict
t2p_write_pdf_xobject_icccs_dict
t2p
t2p
output
output
written += t2p_write_pdf_stream_dict_end(output);
written += t2p_write_pdf_stream_dict_end(output)
written
written
t2p_write_pdf_stream_dict_end(output)
t2p_write_pdf_stream_dict_end
t2p_write_pdf_stream_dict_end
output
output
written += t2p_write_pdf_stream_start(output);
written += t2p_write_pdf_stream_start(output)
written
written
t2p_write_pdf_stream_start(output)
t2p_write_pdf_stream_start
t2p_write_pdf_stream_start
output
output
written += t2p_write_pdf_xobject_icccs_stream(t2p, output);
written += t2p_write_pdf_xobject_icccs_stream(t2p, output)
written
written
t2p_write_pdf_xobject_icccs_stream(t2p, output)
t2p_write_pdf_xobject_icccs_stream
t2p_write_pdf_xobject_icccs_stream
t2p
t2p
output
output
written += t2p_write_pdf_stream_end(output);
written += t2p_write_pdf_stream_end(output)
written
written
t2p_write_pdf_stream_end(output)
t2p_write_pdf_stream_end
t2p_write_pdf_stream_end
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
if(t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount !=0){			for(i2=0;i2<t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount;i2++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_xobject_stream_dict(					i2+1, 					t2p, 					output);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				streamlen=written;				t2p_read_tiff_size_tile(t2p, input, i2);				written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2);				t2p_write_advance_directory(t2p, output);				if(t2p->t2p_error!=T2P_ERR_OK){return(0);}				streamlen=written-streamlen;				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_length(streamlen, output);				written += t2p_write_pdf_obj_end(output);			}		} else {			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_stream_dict(				0, 				t2p, 				output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			streamlen=written;			t2p_read_tiff_size(t2p, input);			written += t2p_readwrite_pdf_image(t2p, input, output);			t2p_write_advance_directory(t2p, output);			if(t2p->t2p_error!=T2P_ERR_OK){return(0);}			streamlen=written-streamlen;			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_length(streamlen, output);			written += t2p_write_pdf_obj_end(output);		}
t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount !=0
t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount
t2p->tiff_tiles[t2p->pdf_page]
t2p->tiff_tiles
t2p
t2p
tiff_tiles
t2p->pdf_page
t2p
t2p
pdf_page
tiles_tilecount
0
{			for(i2=0;i2<t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount;i2++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_xobject_stream_dict(					i2+1, 					t2p, 					output);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				streamlen=written;				t2p_read_tiff_size_tile(t2p, input, i2);				written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2);				t2p_write_advance_directory(t2p, output);				if(t2p->t2p_error!=T2P_ERR_OK){return(0);}				streamlen=written-streamlen;				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_length(streamlen, output);				written += t2p_write_pdf_obj_end(output);			}		}
for(i2=0;i2<t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount;i2++){				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_xobject_stream_dict(					i2+1, 					t2p, 					output);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				streamlen=written;				t2p_read_tiff_size_tile(t2p, input, i2);				written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2);				t2p_write_advance_directory(t2p, output);				if(t2p->t2p_error!=T2P_ERR_OK){return(0);}				streamlen=written-streamlen;				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_length(streamlen, output);				written += t2p_write_pdf_obj_end(output);			}
i2=0;
i2=0
i2
i2
0
i2<t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount
i2
i2
t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount
t2p->tiff_tiles[t2p->pdf_page]
t2p->tiff_tiles
t2p
t2p
tiff_tiles
t2p->pdf_page
t2p
t2p
pdf_page
tiles_tilecount
i2++
i2
i2
{				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_dict_start(output);				written += t2p_write_pdf_xobject_stream_dict(					i2+1, 					t2p, 					output);				written += t2p_write_pdf_stream_dict_end(output);				written += t2p_write_pdf_stream_start(output);				streamlen=written;				t2p_read_tiff_size_tile(t2p, input, i2);				written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2);				t2p_write_advance_directory(t2p, output);				if(t2p->t2p_error!=T2P_ERR_OK){return(0);}				streamlen=written-streamlen;				written += t2p_write_pdf_stream_end(output);				written += t2p_write_pdf_obj_end(output);				t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;				written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);				written += t2p_write_pdf_stream_length(streamlen, output);				written += t2p_write_pdf_obj_end(output);			}
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_stream_dict_start(output);
written += t2p_write_pdf_stream_dict_start(output)
written
written
t2p_write_pdf_stream_dict_start(output)
t2p_write_pdf_stream_dict_start
t2p_write_pdf_stream_dict_start
output
output
written += t2p_write_pdf_xobject_stream_dict(					i2+1, 					t2p, 					output);
written += t2p_write_pdf_xobject_stream_dict(					i2+1, 					t2p, 					output)
written
written
t2p_write_pdf_xobject_stream_dict(					i2+1, 					t2p, 					output)
t2p_write_pdf_xobject_stream_dict
t2p_write_pdf_xobject_stream_dict
i2+1
i2
i2
1
t2p
t2p
output
output
written += t2p_write_pdf_stream_dict_end(output);
written += t2p_write_pdf_stream_dict_end(output)
written
written
t2p_write_pdf_stream_dict_end(output)
t2p_write_pdf_stream_dict_end
t2p_write_pdf_stream_dict_end
output
output
written += t2p_write_pdf_stream_start(output);
written += t2p_write_pdf_stream_start(output)
written
written
t2p_write_pdf_stream_start(output)
t2p_write_pdf_stream_start
t2p_write_pdf_stream_start
output
output
streamlen=written;
streamlen=written
streamlen
streamlen
written
written
t2p_read_tiff_size_tile(t2p, input, i2);
t2p_read_tiff_size_tile(t2p, input, i2)
t2p_read_tiff_size_tile
t2p_read_tiff_size_tile
t2p
t2p
input
input
i2
i2
written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2);
written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2)
written
written
t2p_readwrite_pdf_image_tile(t2p, input, output, i2)
t2p_readwrite_pdf_image_tile
t2p_readwrite_pdf_image_tile
t2p
t2p
input
input
output
output
i2
i2
t2p_write_advance_directory(t2p, output);
t2p_write_advance_directory(t2p, output)
t2p_write_advance_directory
t2p_write_advance_directory
t2p
t2p
output
output
if(t2p->t2p_error!=T2P_ERR_OK){return(0);}
t2p->t2p_error!=T2P_ERR_OK
t2p->t2p_error
t2p
t2p
t2p_error
T2P_ERR_OK
T2P_ERR_OK
{return(0);}
return(0);
(0)
0
streamlen=written-streamlen;
streamlen=written-streamlen
streamlen
streamlen
written-streamlen
written
written
streamlen
streamlen
written += t2p_write_pdf_stream_end(output);
written += t2p_write_pdf_stream_end(output)
written
written
t2p_write_pdf_stream_end(output)
t2p_write_pdf_stream_end
t2p_write_pdf_stream_end
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_stream_length(streamlen, output);
written += t2p_write_pdf_stream_length(streamlen, output)
written
written
t2p_write_pdf_stream_length(streamlen, output)
t2p_write_pdf_stream_length
t2p_write_pdf_stream_length
streamlen
streamlen
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
{			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_dict_start(output);			written += t2p_write_pdf_xobject_stream_dict(				0, 				t2p, 				output);			written += t2p_write_pdf_stream_dict_end(output);			written += t2p_write_pdf_stream_start(output);			streamlen=written;			t2p_read_tiff_size(t2p, input);			written += t2p_readwrite_pdf_image(t2p, input, output);			t2p_write_advance_directory(t2p, output);			if(t2p->t2p_error!=T2P_ERR_OK){return(0);}			streamlen=written-streamlen;			written += t2p_write_pdf_stream_end(output);			written += t2p_write_pdf_obj_end(output);			t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;			written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);			written += t2p_write_pdf_stream_length(streamlen, output);			written += t2p_write_pdf_obj_end(output);		}
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_stream_dict_start(output);
written += t2p_write_pdf_stream_dict_start(output)
written
written
t2p_write_pdf_stream_dict_start(output)
t2p_write_pdf_stream_dict_start
t2p_write_pdf_stream_dict_start
output
output
written += t2p_write_pdf_xobject_stream_dict(				0, 				t2p, 				output);
written += t2p_write_pdf_xobject_stream_dict(				0, 				t2p, 				output)
written
written
t2p_write_pdf_xobject_stream_dict(				0, 				t2p, 				output)
t2p_write_pdf_xobject_stream_dict
t2p_write_pdf_xobject_stream_dict
0
t2p
t2p
output
output
written += t2p_write_pdf_stream_dict_end(output);
written += t2p_write_pdf_stream_dict_end(output)
written
written
t2p_write_pdf_stream_dict_end(output)
t2p_write_pdf_stream_dict_end
t2p_write_pdf_stream_dict_end
output
output
written += t2p_write_pdf_stream_start(output);
written += t2p_write_pdf_stream_start(output)
written
written
t2p_write_pdf_stream_start(output)
t2p_write_pdf_stream_start
t2p_write_pdf_stream_start
output
output
streamlen=written;
streamlen=written
streamlen
streamlen
written
written
t2p_read_tiff_size(t2p, input);
t2p_read_tiff_size(t2p, input)
t2p_read_tiff_size
t2p_read_tiff_size
t2p
t2p
input
input
written += t2p_readwrite_pdf_image(t2p, input, output);
written += t2p_readwrite_pdf_image(t2p, input, output)
written
written
t2p_readwrite_pdf_image(t2p, input, output)
t2p_readwrite_pdf_image
t2p_readwrite_pdf_image
t2p
t2p
input
input
output
output
t2p_write_advance_directory(t2p, output);
t2p_write_advance_directory(t2p, output)
t2p_write_advance_directory
t2p_write_advance_directory
t2p
t2p
output
output
if(t2p->t2p_error!=T2P_ERR_OK){return(0);}
t2p->t2p_error!=T2P_ERR_OK
t2p->t2p_error
t2p
t2p
t2p_error
T2P_ERR_OK
T2P_ERR_OK
{return(0);}
return(0);
(0)
0
streamlen=written-streamlen;
streamlen=written-streamlen
streamlen
streamlen
written-streamlen
written
written
streamlen
streamlen
written += t2p_write_pdf_stream_end(output);
written += t2p_write_pdf_stream_end(output)
written
written
t2p_write_pdf_stream_end(output)
t2p_write_pdf_stream_end
t2p_write_pdf_stream_end
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written;
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written
t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]
t2p->pdf_xrefoffsets
t2p
t2p
pdf_xrefoffsets
t2p->pdf_xrefcount++
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
written
written
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output);
written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
written
written
t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
t2p_write_pdf_obj_start
t2p_write_pdf_obj_start
t2p->pdf_xrefcount
t2p
t2p
pdf_xrefcount
output
output
written += t2p_write_pdf_stream_length(streamlen, output);
written += t2p_write_pdf_stream_length(streamlen, output)
written
written
t2p_write_pdf_stream_length(streamlen, output)
t2p_write_pdf_stream_length
t2p_write_pdf_stream_length
streamlen
streamlen
output
output
written += t2p_write_pdf_obj_end(output);
written += t2p_write_pdf_obj_end(output)
written
written
t2p_write_pdf_obj_end(output)
t2p_write_pdf_obj_end
t2p_write_pdf_obj_end
output
output
t2p->pdf_startxref = written;
t2p->pdf_startxref = written
t2p->pdf_startxref
t2p
t2p
pdf_startxref
written
written
written += t2p_write_pdf_xreftable(t2p, output);
written += t2p_write_pdf_xreftable(t2p, output)
written
written
t2p_write_pdf_xreftable(t2p, output)
t2p_write_pdf_xreftable
t2p_write_pdf_xreftable
t2p
t2p
output
output
written += t2p_write_pdf_trailer(t2p, output);
written += t2p_write_pdf_trailer(t2p, output)
written
written
t2p_write_pdf_trailer(t2p, output)
t2p_write_pdf_trailer
t2p_write_pdf_trailer
t2p
t2p
output
output
t2p_disable(output);
t2p_disable(output)
t2p_disable
t2p_disable
output
output
return(written);
(written)
written
written
-----joern-----
(773,750,0)
(151,77,0)
(69,414,0)
(813,758,0)
(568,441,0)
(803,253,0)
(804,526,0)
(130,544,0)
(67,13,0)
(721,310,0)
(521,465,0)
(572,273,0)
(515,89,0)
(488,738,0)
(232,102,0)
(404,319,0)
(72,178,0)
(781,376,0)
(93,261,0)
(269,13,0)
(408,377,0)
(78,715,0)
(249,49,0)
(469,189,0)
(503,89,0)
(363,715,0)
(478,709,0)
(193,526,0)
(144,544,0)
(644,544,0)
(708,564,0)
(506,798,0)
(478,220,0)
(661,189,0)
(175,434,0)
(723,192,0)
(273,572,0)
(39,54,0)
(278,220,0)
(380,244,0)
(513,686,0)
(93,544,0)
(287,264,0)
(532,16,0)
(200,523,0)
(710,261,0)
(148,116,0)
(720,198,0)
(177,304,0)
(220,478,0)
(739,397,0)
(595,244,0)
(257,138,0)
(477,93,0)
(72,492,0)
(623,244,0)
(736,13,0)
(552,636,0)
(696,216,0)
(541,566,0)
(542,57,0)
(576,198,0)
(339,442,0)
(336,244,0)
(571,269,0)
(237,350,0)
(612,220,0)
(97,234,0)
(508,544,0)
(727,726,0)
(691,350,0)
(588,595,0)
(72,253,0)
(655,544,0)
(8,336,0)
(516,144,0)
(107,144,0)
(250,403,0)
(557,262,0)
(530,414,0)
(655,521,0)
(184,15,0)
(415,573,0)
(51,244,0)
(519,130,0)
(319,244,0)
(82,113,0)
(322,766,0)
(605,87,0)
(208,340,0)
(203,279,0)
(811,566,0)
(809,78,0)
(517,0,0)
(694,244,0)
(343,262,0)
(582,713,0)
(121,709,0)
(379,315,0)
(462,806,0)
(326,117,0)
(206,732,0)
(106,214,0)
(564,49,0)
(612,374,0)
(487,782,0)
(47,544,0)
(121,544,0)
(458,17,0)
(154,758,0)
(39,377,0)
(340,350,0)
(457,729,0)
(65,116,0)
(89,261,0)
(632,28,0)
(523,544,0)
(51,658,0)
(776,450,0)
(531,350,0)
(536,772,0)
(259,805,0)
(8,576,0)
(18,570,0)
(752,758,0)
(380,78,0)
(644,247,0)
(761,726,0)
(605,195,0)
(624,92,0)
(6,5,0)
(167,709,0)
(540,30,0)
(102,199,0)
(691,749,0)
(312,758,0)
(646,205,0)
(138,49,0)
(623,159,0)
(542,180,0)
(137,744,0)
(330,262,0)
(566,811,0)
(315,544,0)
(703,544,0)
(72,320,0)
(158,71,0)
(145,174,0)
(254,350,0)
(67,371,0)
(681,779,0)
(634,9,0)
(316,509,0)
(745,261,0)
(82,132,0)
(24,194,0)
(612,230,0)
(9,145,0)
(582,261,0)
(385,350,0)
(703,408,0)
(283,261,0)
(700,28,0)
(416,480,0)
(187,140,0)
(687,387,0)
(418,514,0)
(62,544,0)
(176,374,0)
(753,287,0)
(580,244,0)
(760,573,0)
(499,760,0)
(27,771,0)
(522,13,0)
(612,342,0)
(47,307,0)
(636,21,0)
(507,686,0)
(496,376,0)
(659,264,0)
(450,255,0)
(423,121,0)
(247,426,0)
(313,444,0)
(425,312,0)
(610,244,0)
(57,261,0)
(322,544,0)
(614,88,0)
(80,258,0)
(240,244,0)
(716,794,0)
(647,709,0)
(2,544,0)
(284,544,0)
(269,571,0)
(195,104,0)
(161,697,0)
(308,709,0)
(38,2,0)
(749,377,0)
(449,164,0)
(319,124,0)
(708,69,0)
(217,74,0)
(72,374,0)
(612,113,0)
(268,118,0)
(429,193,0)
(375,2,0)
(400,221,0)
(603,544,0)
(610,807,0)
(652,749,0)
(398,72,0)
(21,257,0)
(464,244,0)
(521,244,0)
(617,497,0)
(53,140,0)
(304,630,0)
(305,377,0)
(453,421,0)
(743,110,0)
(245,244,0)
(223,13,0)
(419,236,0)
(347,465,0)
(348,413,0)
(498,261,0)
(402,242,0)
(7,163,0)
(197,709,0)
(194,350,0)
(122,630,0)
(73,703,0)
(191,650,0)
(678,647,0)
(613,78,0)
(21,49,0)
(391,16,0)
(225,244,0)
(540,710,0)
(605,794,0)
(806,350,0)
(437,704,0)
(318,462,0)
(462,244,0)
(626,271,0)
(146,371,0)
(165,806,0)
(100,257,0)
(406,714,0)
(773,755,0)
(635,17,0)
(10,343,0)
(450,544,0)
(487,279,0)
(510,771,0)
(742,245,0)
(749,652,0)
(130,261,0)
(72,55,0)
(773,654,0)
(447,581,0)
(635,27,0)
(779,271,0)
(612,383,0)
(767,647,0)
(196,377,0)
(538,688,0)
(291,558,0)
(325,480,0)
(397,544,0)
(715,350,0)
(649,40,0)
(264,659,0)
(572,613,0)
(264,49,0)
(605,374,0)
(214,544,0)
(508,758,0)
(605,230,0)
(751,444,0)
(606,77,0)
(779,758,0)
(271,779,0)
(28,632,0)
(104,195,0)
(345,613,0)
(477,244,0)
(266,728,0)
(536,244,0)
(714,336,0)
(222,610,0)
(186,745,0)
(180,542,0)
(612,739,0)
(237,9,0)
(238,350,0)
(81,13,0)
(378,93,0)
(393,544,0)
(672,340,0)
(146,377,0)
(420,627,0)
(11,566,0)
(636,244,0)
(718,9,0)
(576,147,0)
(132,544,0)
(634,20,0)
(760,264,0)
(333,27,0)
(428,766,0)
(388,242,0)
(605,492,0)
(657,405,0)
(283,189,0)
(460,365,0)
(247,758,0)
(807,634,0)
(605,341,0)
(240,279,0)
(138,748,0)
(79,393,0)
(127,350,0)
(395,188,0)
(612,320,0)
(189,661,0)
(249,787,0)
(207,49,0)
(591,786,0)
(333,662,0)
(177,419,0)
(364,501,0)
(565,260,0)
(173,633,0)
(762,554,0)
(253,248,0)
(669,403,0)
(333,426,0)
(355,393,0)
(117,346,0)
(67,749,0)
(164,804,0)
(682,262,0)
(272,633,0)
(589,727,0)
(710,540,0)
(162,121,0)
(239,70,0)
(571,728,0)
(22,572,0)
(235,116,0)
(140,544,0)
(696,678,0)
(147,244,0)
(26,582,0)
(492,361,0)
(479,711,0)
(539,0,0)
(405,802,0)
(711,110,0)
(213,745,0)
(354,758,0)
(596,47,0)
(601,179,0)
(502,212,0)
(52,606,0)
(799,138,0)
(159,388,0)
(771,758,0)
(269,526,0)
(712,758,0)
(739,809,0)
(426,480,0)
(573,255,0)
(778,544,0)
(369,0,0)
(754,188,0)
(72,627,0)
(385,806,0)
(443,286,0)
(146,464,0)
(142,199,0)
(680,164,0)
(612,773,0)
(226,544,0)
(727,244,0)
(3,304,0)
(323,268,0)
(553,383,0)
(349,758,0)
(42,244,0)
(471,758,0)
(783,758,0)
(694,311,0)
(72,341,0)
(685,77,0)
(179,507,0)
(548,414,0)
(487,262,0)
(32,512,0)
(342,650,0)
(189,283,0)
(0,544,0)
(501,758,0)
(540,244,0)
(712,779,0)
(88,198,0)
(15,193,0)
(440,47,0)
(311,694,0)
(112,758,0)
(450,244,0)
(558,261,0)
(333,371,0)
(490,421,0)
(433,502,0)
(321,606,0)
(317,654,0)
(456,167,0)
(368,346,0)
(620,787,0)
(784,214,0)
(704,357,0)
(410,292,0)
(722,235,0)
(613,749,0)
(159,77,0)
(566,544,0)
(725,603,0)
(650,342,0)
(261,758,0)
(792,221,0)
(119,69,0)
(745,186,0)
(809,17,0)
(252,287,0)
(647,544,0)
(251,54,0)
(72,773,0)
(612,188,0)
(1,580,0)
(554,78,0)
(497,544,0)
(546,30,0)
(790,374,0)
(605,558,0)
(605,342,0)
(140,261,0)
(441,25,0)
(444,544,0)
(57,542,0)
(124,526,0)
(566,509,0)
(356,67,0)
(338,244,0)
(4,407,0)
(676,731,0)
(741,57,0)
(16,475,0)
(258,688,0)
(571,244,0)
(553,812,0)
(678,696,0)
(527,177,0)
(812,544,0)
(603,665,0)
(417,183,0)
(454,10,0)
(105,637,0)
(348,62,0)
(798,244,0)
(294,809,0)
(373,235,0)
(72,195,0)
(408,74,0)
(85,92,0)
(691,78,0)
(407,544,0)
(599,264,0)
(174,194,0)
(333,78,0)
(446,305,0)
(772,13,0)
(511,532,0)
(549,210,0)
(475,16,0)
(788,732,0)
(808,497,0)
(285,286,0)
(21,636,0)
(179,487,0)
(531,237,0)
(367,400,0)
(72,113,0)
(55,197,0)
(357,244,0)
(72,558,0)
(172,595,0)
(109,371,0)
(108,595,0)
(30,17,0)
(343,10,0)
(755,773,0)
(78,350,0)
(333,13,0)
(265,486,0)
(331,662,0)
(151,30,0)
(489,393,0)
(192,637,0)
(409,748,0)
(408,703,0)
(74,704,0)
(405,709,0)
(365,371,0)
(778,244,0)
(371,77,0)
(198,180,0)
(618,710,0)
(58,416,0)
(713,670,0)
(153,686,0)
(671,660,0)
(666,244,0)
(802,721,0)
(246,322,0)
(660,224,0)
(247,644,0)
(57,544,0)
(812,261,0)
(789,273,0)
(43,244,0)
(132,82,0)
(111,315,0)
(337,419,0)
(183,750,0)
(83,783,0)
(682,544,0)
(726,814,0)
(265,244,0)
(523,261,0)
(704,539,0)
(357,704,0)
(90,164,0)
(576,758,0)
(72,639,0)
(715,661,0)
(683,630,0)
(605,102,0)
(777,714,0)
(131,612,0)
(117,544,0)
(686,544,0)
(421,420,0)
(242,2,0)
(384,810,0)
(27,744,0)
(372,351,0)
(68,498,0)
(321,77,0)
(312,353,0)
(529,8,0)
(390,478,0)
(394,338,0)
(636,130,0)
(121,341,0)
(286,292,0)
(514,244,0)
(54,544,0)
(407,261,0)
(13,581,0)
(470,350,0)
(765,380,0)
(674,85,0)
(353,312,0)
(578,339,0)
(98,179,0)
(69,708,0)
(236,244,0)
(226,244,0)
(729,544,0)
(381,778,0)
(688,544,0)
(672,244,0)
(612,91,0)
(276,39,0)
(249,564,0)
(593,699,0)
(522,526,0)
(264,249,0)
(281,713,0)
(424,20,0)
(475,806,0)
(670,194,0)
(157,682,0)
(610,715,0)
(359,647,0)
(665,603,0)
(442,339,0)
(772,749,0)
(62,348,0)
(66,197,0)
(704,377,0)
(287,49,0)
(573,244,0)
(532,544,0)
(140,53,0)
(168,529,0)
(215,778,0)
(388,151,0)
(30,77,0)
(292,286,0)
(129,333,0)
(507,179,0)
(210,400,0)
(650,709,0)
(811,805,0)
(0,539,0)
(627,223,0)
(220,278,0)
(686,507,0)
(289,707,0)
(299,373,0)
(258,80,0)
(756,283,0)
(755,544,0)
(778,321,0)
(16,532,0)
(507,244,0)
(605,55,0)
(787,249,0)
(370,605,0)
(72,383,0)
(520,336,0)
(78,380,0)
(421,544,0)
(260,544,0)
(218,637,0)
(309,482,0)
(612,558,0)
(70,414,0)
(310,261,0)
(652,244,0)
(580,49,0)
(559,544,0)
(273,244,0)
(341,121,0)
(738,284,0)
(815,783,0)
(130,636,0)
(358,21,0)
(486,265,0)
(444,345,0)
(72,276,0)
(16,244,0)
(305,78,0)
(772,49,0)
(677,260,0)
(431,655,0)
(5,77,0)
(707,289,0)
(371,5,0)
(118,442,0)
(123,710,0)
(252,760,0)
(202,93,0)
(333,17,0)
(727,544,0)
(177,758,0)
(214,248,0)
(560,269,0)
(204,257,0)
(461,174,0)
(481,8,0)
(482,633,0)
(662,601,0)
(644,244,0)
(118,268,0)
(310,721,0)
(223,78,0)
(695,260,0)
(60,712,0)
(764,786,0)
(29,632,0)
(600,699,0)
(374,544,0)
(762,245,0)
(573,414,0)
(92,85,0)
(138,760,0)
(198,88,0)
(577,629,0)
(160,262,0)
(670,244,0)
(393,255,0)
(205,244,0)
(635,78,0)
(746,226,0)
(116,235,0)
(74,514,0)
(146,78,0)
(635,13,0)
(310,544,0)
(274,244,0)
(43,758,0)
(505,475,0)
(72,220,0)
(238,531,0)
(280,487,0)
(279,262,0)
(785,608,0)
(558,544,0)
(30,13,0)
(103,470,0)
(174,350,0)
(804,164,0)
(22,595,0)
(86,361,0)
(603,261,0)
(426,512,0)
(156,237,0)
(276,544,0)
(812,553,0)
(612,55,0)
(474,755,0)
(185,407,0)
(605,729,0)
(631,670,0)
(293,197,0)
(186,342,0)
(286,544,0)
(327,63,0)
(311,526,0)
(521,544,0)
(740,754,0)
(605,253,0)
(8,758,0)
(143,791,0)
(295,225,0)
(30,540,0)
(303,661,0)
(315,366,0)
(606,798,0)
(685,498,0)
(514,74,0)
(416,207,0)
(41,629,0)
(611,288,0)
(72,188,0)
(800,508,0)
(314,308,0)
(684,603,0)
(598,276,0)
(809,371,0)
(10,244,0)
(315,261,0)
(342,471,0)
(247,749,0)
(62,509,0)
(503,244,0)
(622,635,0)
(814,262,0)
(772,17,0)
(805,544,0)
(676,235,0)
(221,400,0)
(113,82,0)
(630,261,0)
(590,807,0)
(229,812,0)
(320,167,0)
(225,163,0)
(413,544,0)
(248,758,0)
(498,685,0)
(658,49,0)
(271,244,0)
(612,195,0)
(72,678,0)
(72,729,0)
(570,5,0)
(706,261,0)
(12,812,0)
(353,244,0)
(452,399,0)
(164,637,0)
(597,612,0)
(641,146,0)
(651,17,0)
(734,339,0)
(399,452,0)
(40,487,0)
(567,571,0)
(635,350,0)
(612,492,0)
(794,709,0)
(604,353,0)
(19,353,0)
(328,573,0)
(442,71,0)
(102,544,0)
(802,405,0)
(493,623,0)
(256,805,0)
(582,544,0)
(227,343,0)
(194,340,0)
(809,749,0)
(267,492,0)
(72,230,0)
(55,522,0)
(697,732,0)
(231,531,0)
(504,180,0)
(88,244,0)
(605,802,0)
(399,804,0)
(771,226,0)
(233,576,0)
(679,782,0)
(125,522,0)
(744,27,0)
(793,498,0)
(629,544,0)
(47,261,0)
(439,244,0)
(476,794,0)
(301,544,0)
(387,237,0)
(643,287,0)
(451,632,0)
(675,225,0)
(494,804,0)
(163,193,0)
(531,42,0)
(145,205,0)
(383,447,0)
(120,542,0)
(480,21,0)
(279,240,0)
(755,709,0)
(757,169,0)
(584,772,0)
(212,709,0)
(450,529,0)
(705,388,0)
(587,357,0)
(814,439,0)
(247,662,0)
(96,762,0)
(512,244,0)
(290,247,0)
(678,67,0)
(115,610,0)
(708,244,0)
(698,536,0)
(682,244,0)
(146,17,0)
(212,502,0)
(463,236,0)
(237,387,0)
(668,659,0)
(67,262,0)
(223,17,0)
(769,117,0)
(46,729,0)
(180,312,0)
(692,230,0)
(42,531,0)
(550,573,0)
(762,581,0)
(305,13,0)
(592,221,0)
(392,521,0)
(20,145,0)
(339,509,0)
(539,377,0)
(181,223,0)
(436,102,0)
(632,544,0)
(662,262,0)
(653,397,0)
(72,102,0)
(94,216,0)
(136,564,0)
(419,529,0)
(484,147,0)
(131,712,0)
(188,385,0)
(25,441,0)
(748,138,0)
(164,544,0)
(559,743,0)
(465,691,0)
(658,772,0)
(721,802,0)
(93,477,0)
(480,49,0)
(321,778,0)
(477,554,0)
(420,421,0)
(27,758,0)
(612,802,0)
(627,308,0)
(13,81,0)
(17,526,0)
(31,470,0)
(633,544,0)
(248,214,0)
(54,39,0)
(478,544,0)
(345,444,0)
(146,13,0)
(209,252,0)
(772,536,0)
(76,557,0)
(638,130,0)
(613,13,0)
(713,582,0)
(351,261,0)
(92,726,0)
(401,63,0)
(731,709,0)
(304,177,0)
(772,426,0)
(612,627,0)
(616,310,0)
(225,637,0)
(59,464,0)
(131,711,0)
(25,414,0)
(691,426,0)
(805,811,0)
(630,544,0)
(521,655,0)
(247,13,0)
(583,634,0)
(365,244,0)
(492,544,0)
(612,729,0)
(557,544,0)
(542,244,0)
(639,544,0)
(412,212,0)
(92,330,0)
(220,635,0)
(536,523,0)
(809,426,0)
(35,532,0)
(485,57,0)
(405,544,0)
(621,62,0)
(629,709,0)
(659,244,0)
(307,739,0)
(346,117,0)
(772,371,0)
(473,276,0)
(726,727,0)
(63,758,0)
(167,320,0)
(754,709,0)
(763,745,0)
(605,383,0)
(727,255,0)
(362,252,0)
(366,315,0)
(152,274,0)
(801,289,0)
(336,8,0)
(806,462,0)
(472,503,0)
(630,304,0)
(607,140,0)
(388,77,0)
(159,623,0)
(128,652,0)
(605,639,0)
(562,478,0)
(724,540,0)
(241,691,0)
(688,258,0)
(198,758,0)
(55,665,0)
(339,544,0)
(573,544,0)
(786,244,0)
(196,338,0)
(445,253,0)
(471,312,0)
(207,252,0)
(260,509,0)
(324,118,0)
(269,17,0)
(697,161,0)
(253,544,0)
(497,9,0)
(435,322,0)
(419,758,0)
(648,655,0)
(351,395,0)
(701,408,0)
(710,544,0)
(270,330,0)
(72,794,0)
(561,43,0)
(333,749,0)
(772,78,0)
(554,477,0)
(766,322,0)
(728,544,0)
(733,670,0)
(131,660,0)
(216,261,0)
(512,426,0)
(371,365,0)
(343,22,0)
(230,544,0)
(612,639,0)
(503,691,0)
(497,244,0)
(37,523,0)
(806,465,0)
(145,350,0)
(67,78,0)
(635,749,0)
(475,350,0)
(61,283,0)
(81,244,0)
(340,475,0)
(382,694,0)
(397,709,0)
(393,414,0)
(495,234,0)
(332,639,0)
(234,664,0)
(342,186,0)
(525,758,0)
(242,388,0)
(608,261,0)
(298,54,0)
(774,688,0)
(366,758,0)
(470,255,0)
(113,144,0)
(124,163,0)
(739,307,0)
(814,343,0)
(529,450,0)
(556,78,0)
(691,503,0)
(731,676,0)
(580,544,0)
(257,204,0)
(500,426,0)
(608,278,0)
(735,212,0)
(703,244,0)
(647,678,0)
(601,786,0)
(750,183,0)
(480,416,0)
(731,555,0)
(234,261,0)
(464,146,0)
(247,78,0)
(434,333,0)
(214,261,0)
(164,244,0)
(403,544,0)
(714,261,0)
(399,526,0)
(586,452,0)
(205,145,0)
(228,666,0)
(403,464,0)
(697,258,0)
(64,89,0)
(397,739,0)
(464,403,0)
(333,758,0)
(149,27,0)
(383,629,0)
(257,49,0)
(711,63,0)
(48,644,0)
(707,341,0)
(155,159,0)
(775,249,0)
(40,262,0)
(334,743,0)
(416,244,0)
(748,244,0)
(605,699,0)
(770,727,0)
(486,377,0)
(312,63,0)
(633,482,0)
(242,244,0)
(183,544,0)
(438,245,0)
(36,265,0)
(787,244,0)
(732,110,0)
(781,301,0)
(247,27,0)
(411,311,0)
(594,539,0)
(247,17,0)
(737,650,0)
(601,262,0)
(651,244,0)
(245,762,0)
(572,262,0)
(524,88,0)
(645,151,0)
(72,342,0)
(547,569,0)
(726,262,0)
(686,261,0)
(528,708,0)
(225,544,0)
(141,651,0)
(54,261,0)
(170,183,0)
(791,174,0)
(468,69,0)
(289,261,0)
(44,51,0)
(352,132,0)
(491,42,0)
(2,242,0)
(361,758,0)
(197,55,0)
(702,581,0)
(179,262,0)
(383,553,0)
(258,697,0)
(34,639,0)
(605,220,0)
(619,240,0)
(612,253,0)
(216,544,0)
(114,196,0)
(56,230,0)
(345,244,0)
(288,257,0)
(223,77,0)
(301,781,0)
(654,758,0)
(174,791,0)
(699,366,0)
(537,450,0)
(132,261,0)
(147,576,0)
(167,544,0)
(17,651,0)
(277,330,0)
(74,377,0)
(131,605,0)
(204,244,0)
(551,80,0)
(212,544,0)
(467,321,0)
(393,49,0)
(658,51,0)
(84,132,0)
(201,557,0)
(188,754,0)
(498,544,0)
(690,492,0)
(605,739,0)
(426,49,0)
(585,582,0)
(459,310,0)
(750,773,0)
(230,501,0)
(613,262,0)
(625,580,0)
(728,571,0)
(613,345,0)
(99,682,0)
(360,434,0)
(523,536,0)
(9,497,0)
(374,53,0)
(629,383,0)
(17,399,0)
(407,104,0)
(190,81,0)
(666,662,0)
(810,709,0)
(465,521,0)
(22,262,0)
(14,351,0)
(348,441,0)
(275,608,0)
(376,781,0)
(311,124,0)
(810,544,0)
(421,261,0)
(72,739,0)
(809,49,0)
(691,27,0)
(554,581,0)
(782,244,0)
(615,350,0)
(387,244,0)
(744,244,0)
(75,754,0)
(233,758,0)
(794,544,0)
(804,311,0)
(747,413,0)
(247,371,0)
(791,244,0)
(245,544,0)
(602,572,0)
(691,662,0)
(779,247,0)
(635,426,0)
(795,49,0)
(667,728,0)
(305,371,0)
(340,672,0)
(434,544,0)
(88,544,0)
(263,271,0)
(564,708,0)
(802,40,0)
(780,416,0)
(483,20,0)
(260,677,0)
(797,727,0)
(341,305,0)
(466,781,0)
(609,471,0)
(655,261,0)
(605,678,0)
(605,113,0)
(634,807,0)
(691,371,0)
(442,118,0)
(518,207,0)
(235,373,0)
(771,177,0)
(441,348,0)
(23,284,0)
(71,544,0)
(95,558,0)
(664,234,0)
(45,810,0)
(579,301,0)
(447,78,0)
(575,703,0)
(144,113,0)
(195,810,0)
(336,714,0)
(699,544,0)
(628,814,0)
(183,261,0)
(50,233,0)
(732,697,0)
(151,274,0)
(605,773,0)
(452,244,0)
(182,225,0)
(288,49,0)
(796,758,0)
(131,72,0)
(708,544,0)
(673,658,0)
(654,419,0)
(465,350,0)
(188,395,0)
(807,350,0)
(235,676,0)
(529,758,0)
(563,559,0)
(72,802,0)
(15,244,0)
(252,207,0)
(400,210,0)
(124,319,0)
(543,204,0)
(635,371,0)
(745,544,0)
(296,507,0)
(719,226,0)
(353,544,0)
(569,758,0)
(113,233,0)
(810,195,0)
(297,71,0)
(612,276,0)
(243,413,0)
(689,405,0)
(427,385,0)
(219,289,0)
(171,521,0)
(395,351,0)
(627,420,0)
(320,664,0)
(714,544,0)
(389,601,0)
(306,124,0)
(595,544,0)
(344,569,0)
(304,244,0)
(573,760,0)
(195,238,0)
(278,608,0)
(320,288,0)
(116,544,0)
(305,17,0)
(759,145,0)
(612,678,0)
(211,22,0)
(535,634,0)
(135,242,0)
(189,244,0)
(300,216,0)
(274,151,0)
(134,576,0)
(5,570,0)
(635,662,0)
(595,22,0)
(613,371,0)
(197,544,0)
(89,503,0)
(9,350,0)
(308,627,0)
(782,487,0)
(133,477,0)
(163,225,0)
(71,442,0)
(85,262,0)
(539,196,0)
(545,525,0)
(20,350,0)
(193,269,0)
(5,321,0)
(570,244,0)
(199,758,0)
(663,167,0)
(786,601,0)
(89,544,0)
(470,544,0)
(639,509,0)
(236,419,0)
(693,672,0)
(662,666,0)
(221,544,0)
(289,544,0)
(33,238,0)
(30,78,0)
(226,771,0)
(656,350,0)
(422,25,0)
(329,450,0)
(508,255,0)
(768,559,0)
(612,341,0)
(448,755,0)
(53,758,0)
(798,606,0)
(144,709,0)
(606,159,0)
(766,637,0)
(234,544,0)
(150,350,0)
(613,17,0)
(534,749,0)
(403,261,0)
(664,320,0)
(730,301,0)
(180,758,0)
(413,348,0)
(729,685,0)
(661,531,0)
(709,758,0)
(439,814,0)
(194,670,0)
(522,17,0)
(612,699,0)
(307,47,0)
(104,407,0)
(279,726,0)
(608,544,0)
(555,731,0)
(691,13,0)
(282,486,0)
(760,49,0)
(430,62,0)
(271,544,0)
(396,345,0)
(564,658,0)
(605,627,0)
(691,17,0)
(532,261,0)
(650,544,0)
(386,644,0)
(749,486,0)
(605,320,0)
(715,610,0)
(72,699,0)
(432,284,0)
(126,447,0)
(163,526,0)
(302,308,0)
(330,814,0)
(665,55,0)
(101,397,0)
(13,762,0)
(612,794,0)
(486,408,0)
(642,92,0)
(754,544,0)
(557,255,0)
(338,196,0)
(640,573,0)
(661,350,0)
(67,17,0)
(455,554,0)
(717,439,0)
(809,13,0)
(533,708,0)
(341,707,0)
(444,261,0)
(605,276,0)
(574,613,0)
(0,244,0)
(335,525,0)
(216,696,0)
(193,15,0)
(709,731,0)
(283,544,0)
(284,738,0)
(786,85,0)
(308,544,0)
(605,188,0)
(351,544,0)
(166,508,0)
(612,102,0)
(196,146,0)
(670,713,0)
(728,261,0)
(139,399,0)
(174,791,1)
(308,709,1)
(417,170,1)
(727,544,1)
(651,244,1)
(605,802,1)
(553,812,1)
(286,544,1)
(125,55,1)
(308,302,1)
(441,348,1)
(482,633,1)
(612,699,1)
(630,261,1)
(419,529,1)
(633,272,1)
(228,331,1)
(342,186,1)
(72,188,1)
(672,693,1)
(269,571,1)
(40,487,1)
(627,308,1)
(541,509,1)
(30,17,1)
(29,508,1)
(630,122,1)
(320,664,1)
(635,426,1)
(304,630,1)
(245,438,1)
(471,609,1)
(639,332,1)
(666,244,1)
(769,682,1)
(219,801,1)
(610,244,1)
(489,287,1)
(344,525,1)
(730,579,1)
(487,279,1)
(303,238,1)
(760,264,1)
(213,650,1)
(435,246,1)
(30,78,1)
(452,586,1)
(7,193,1)
(451,29,1)
(42,491,1)
(741,485,1)
(419,236,1)
(353,244,1)
(580,244,1)
(716,476,1)
(727,244,1)
(571,244,1)
(635,78,1)
(400,367,1)
(47,261,1)
(634,583,1)
(304,244,1)
(670,244,1)
(265,36,1)
(311,124,1)
(180,542,1)
(374,790,1)
(391,532,1)
(84,144,1)
(57,741,1)
(432,23,1)
(223,17,1)
(183,544,1)
(530,548,1)
(247,27,1)
(703,544,1)
(226,719,1)
(293,766,1)
(66,293,1)
(333,27,1)
(759,174,1)
(333,371,1)
(249,564,1)
(455,447,1)
(518,482,1)
(517,369,1)
(345,396,1)
(54,544,1)
(317,773,1)
(703,244,1)
(444,544,1)
(573,640,1)
(612,113,1)
(540,710,1)
(411,124,1)
(484,134,1)
(302,314,1)
(506,52,1)
(282,408,1)
(301,730,1)
(711,63,1)
(576,147,1)
(283,261,1)
(747,243,1)
(521,392,1)
(324,442,1)
(90,680,1)
(772,426,1)
(147,244,1)
(407,544,1)
(731,555,1)
(192,637,1)
(73,701,1)
(428,192,1)
(479,743,1)
(605,699,1)
(162,210,1)
(325,21,1)
(132,261,1)
(470,544,1)
(240,619,1)
(557,255,1)
(786,764,1)
(271,244,1)
(632,451,1)
(605,230,1)
(579,292,1)
(233,50,1)
(593,600,1)
(750,183,1)
(483,145,1)
(755,474,1)
(247,644,1)
(431,648,1)
(514,244,1)
(353,604,1)
(333,129,1)
(755,544,1)
(532,511,1)
(485,504,1)
(475,806,1)
(38,705,1)
(606,798,1)
(204,543,1)
(167,544,1)
(59,403,1)
(621,413,1)
(605,729,1)
(812,229,1)
(305,78,1)
(0,244,1)
(437,539,1)
(416,244,1)
(597,346,1)
(101,25,1)
(63,327,1)
(175,360,1)
(612,253,1)
(27,771,1)
(187,374,1)
(464,244,1)
(775,564,1)
(701,74,1)
(627,420,1)
(146,13,1)
(131,711,1)
(815,569,1)
(368,117,1)
(683,527,1)
(772,749,1)
(313,751,1)
(604,19,1)
(229,12,1)
(772,17,1)
(245,544,1)
(708,69,1)
(360,811,1)
(797,770,1)
(575,73,1)
(547,344,1)
(45,384,1)
(260,544,1)
(288,257,1)
(460,109,1)
(388,242,1)
(528,533,1)
(469,283,1)
(572,613,1)
(264,659,1)
(99,726,1)
(783,83,1)
(151,274,1)
(554,477,1)
(661,531,1)
(250,641,1)
(494,311,1)
(57,261,1)
(605,794,1)
(773,750,1)
(617,718,1)
(327,401,1)
(481,53,1)
(523,544,1)
(529,450,1)
(295,7,1)
(389,179,1)
(779,247,1)
(376,496,1)
(27,744,1)
(729,544,1)
(473,305,1)
(444,313,1)
(193,269,1)
(486,408,1)
(622,220,1)
(92,726,1)
(338,244,1)
(307,47,1)
(118,324,1)
(248,214,1)
(612,374,1)
(657,487,1)
(225,544,1)
(72,639,1)
(778,381,1)
(699,593,1)
(447,126,1)
(4,185,1)
(146,17,1)
(261,706,1)
(298,251,1)
(422,70,1)
(323,118,1)
(642,624,1)
(143,461,1)
(240,244,1)
(439,244,1)
(639,544,1)
(11,541,1)
(423,162,1)
(257,204,1)
(728,266,1)
(540,724,1)
(628,343,1)
(724,710,1)
(341,121,1)
(603,261,1)
(270,814,1)
(82,132,1)
(791,244,1)
(511,35,1)
(253,445,1)
(146,371,1)
(682,544,1)
(226,544,1)
(766,322,1)
(636,552,1)
(283,544,1)
(281,582,1)
(385,806,1)
(24,340,1)
(605,383,1)
(659,668,1)
(247,662,1)
(135,2,1)
(388,151,1)
(478,544,1)
(610,807,1)
(709,731,1)
(76,330,1)
(446,341,1)
(31,811,1)
(192,723,1)
(381,215,1)
(710,123,1)
(503,244,1)
(413,544,1)
(573,544,1)
(532,261,1)
(237,387,1)
(287,264,1)
(655,431,1)
(612,802,1)
(559,768,1)
(319,244,1)
(504,366,1)
(734,71,1)
(780,58,1)
(458,399,1)
(353,544,1)
(183,417,1)
(450,544,1)
(130,544,1)
(603,725,1)
(37,200,1)
(332,34,1)
(69,468,1)
(695,25,1)
(449,494,1)
(197,66,1)
(614,720,1)
(412,735,1)
(348,62,1)
(339,544,1)
(563,732,1)
(505,385,1)
(314,376,1)
(51,44,1)
(209,518,1)
(338,394,1)
(223,78,1)
(808,617,1)
(507,296,1)
(710,544,1)
(409,799,1)
(315,544,1)
(605,220,1)
(691,426,1)
(297,210,1)
(635,622,1)
(798,244,1)
(355,79,1)
(279,240,1)
(705,151,1)
(694,382,1)
(537,329,1)
(749,486,1)
(605,492,1)
(467,606,1)
(633,544,1)
(638,358,1)
(434,175,1)
(542,57,1)
(772,371,1)
(124,319,1)
(531,237,1)
(214,261,1)
(664,234,1)
(497,544,1)
(89,261,1)
(533,69,1)
(612,342,1)
(602,613,1)
(548,268,1)
(72,802,1)
(247,749,1)
(570,18,1)
(681,247,1)
(516,576,1)
(715,610,1)
(289,261,1)
(673,772,1)
(480,21,1)
(616,459,1)
(164,90,1)
(525,545,1)
(67,749,1)
(745,261,1)
(114,146,1)
(667,560,1)
(233,576,1)
(56,692,1)
(566,509,1)
(289,544,1)
(612,492,1)
(345,444,1)
(336,244,1)
(689,657,1)
(539,0,1)
(258,80,1)
(465,691,1)
(589,761,1)
(397,653,1)
(48,386,1)
(522,13,1)
(786,244,1)
(26,631,1)
(242,244,1)
(770,589,1)
(663,456,1)
(605,639,1)
(809,426,1)
(246,428,1)
(508,544,1)
(340,672,1)
(812,261,1)
(348,413,1)
(630,544,1)
(809,17,1)
(25,414,1)
(612,558,1)
(726,814,1)
(223,181,1)
(88,524,1)
(257,138,1)
(416,207,1)
(3,630,1)
(258,688,1)
(346,117,1)
(697,161,1)
(498,68,1)
(648,347,1)
(321,606,1)
(490,453,1)
(235,373,1)
(92,330,1)
(65,722,1)
(383,629,1)
(356,678,1)
(331,601,1)
(699,544,1)
(756,303,1)
(429,269,1)
(645,30,1)
(662,666,1)
(333,426,1)
(0,544,1)
(632,544,1)
(392,171,1)
(426,480,1)
(131,605,1)
(272,173,1)
(98,40,1)
(413,747,1)
(273,789,1)
(745,544,1)
(442,339,1)
(441,568,1)
(104,407,1)
(197,544,1)
(2,544,1)
(276,598,1)
(407,4,1)
(647,709,1)
(739,397,1)
(72,729,1)
(117,326,1)
(558,544,1)
(538,788,1)
(714,406,1)
(529,8,1)
(119,136,1)
(395,351,1)
(590,9,1)
(612,55,1)
(28,700,1)
(623,493,1)
(189,469,1)
(480,416,1)
(605,739,1)
(763,213,1)
(723,17,1)
(543,100,1)
(640,415,1)
(424,483,1)
(286,443,1)
(612,220,1)
(203,85,1)
(738,488,1)
(22,595,1)
(131,660,1)
(252,760,1)
(454,227,1)
(687,156,1)
(397,709,1)
(635,27,1)
(133,93,1)
(510,177,1)
(782,244,1)
(64,241,1)
(393,355,1)
(613,13,1)
(399,452,1)
(145,205,1)
(72,383,1)
(121,544,1)
(688,544,1)
(83,815,1)
(61,756,1)
(407,261,1)
(351,261,1)
(728,544,1)
(573,414,1)
(682,244,1)
(605,678,1)
(72,739,1)
(641,39,1)
(205,244,1)
(216,300,1)
(453,308,1)
(751,574,1)
(442,71,1)
(612,639,1)
(439,717,1)
(708,528,1)
(123,618,1)
(465,521,1)
(461,194,1)
(572,273,1)
(608,261,1)
(624,674,1)
(334,559,1)
(131,712,1)
(207,252,1)
(613,345,1)
(15,244,1)
(81,190,1)
(474,448,1)
(72,55,1)
(718,20,1)
(279,726,1)
(238,531,1)
(561,779,1)
(72,773,1)
(486,265,1)
(760,573,1)
(359,268,1)
(276,544,1)
(810,709,1)
(434,544,1)
(291,95,1)
(12,629,1)
(445,803,1)
(2,375,1)
(447,78,1)
(373,299,1)
(684,197,1)
(51,244,1)
(635,371,1)
(320,167,1)
(132,352,1)
(315,111,1)
(703,575,1)
(665,603,1)
(605,102,1)
(613,371,1)
(234,261,1)
(635,17,1)
(782,679,1)
(71,158,1)
(21,257,1)
(43,561,1)
(249,787,1)
(691,27,1)
(194,340,1)
(421,544,1)
(776,537,1)
(802,721,1)
(289,219,1)
(634,9,1)
(532,544,1)
(210,549,1)
(521,244,1)
(714,544,1)
(384,531,1)
(86,492,1)
(546,685,1)
(498,544,1)
(579,766,1)
(370,738,1)
(502,433,1)
(712,60,1)
(768,563,1)
(521,544,1)
(19,425,1)
(100,138,1)
(18,6,1)
(103,31,1)
(649,802,1)
(605,342,1)
(200,584,1)
(577,292,1)
(310,616,1)
(811,566,1)
(735,709,1)
(72,320,1)
(515,64,1)
(762,554,1)
(221,592,1)
(226,244,1)
(375,38,1)
(539,196,1)
(5,570,1)
(174,194,1)
(330,277,1)
(594,196,1)
(316,639,1)
(374,544,1)
(531,42,1)
(54,261,1)
(8,576,1)
(806,462,1)
(89,515,1)
(722,794,1)
(333,17,1)
(691,78,1)
(596,440,1)
(501,364,1)
(380,765,1)
(188,754,1)
(743,334,1)
(269,13,1)
(810,45,1)
(393,414,1)
(659,244,1)
(541,677,1)
(130,261,1)
(72,699,1)
(202,455,1)
(131,72,1)
(809,749,1)
(236,463,1)
(126,383,1)
(670,733,1)
(167,663,1)
(399,804,1)
(299,116,1)
(707,289,1)
(222,115,1)
(95,502,1)
(57,544,1)
(149,771,1)
(163,193,1)
(805,256,1)
(508,255,1)
(636,130,1)
(708,244,1)
(259,566,1)
(201,76,1)
(232,261,1)
(283,61,1)
(691,17,1)
(189,244,1)
(508,800,1)
(496,781,1)
(471,312,1)
(58,325,1)
(35,505,1)
(211,572,1)
(231,237,1)
(241,635,1)
(605,253,1)
(236,244,1)
(613,749,1)
(88,244,1)
(141,458,1)
(787,244,1)
(274,152,1)
(13,762,1)
(176,233,1)
(117,544,1)
(72,102,1)
(580,1,1)
(93,544,1)
(352,84,1)
(491,231,1)
(605,195,1)
(263,626,1)
(387,687,1)
(184,429,1)
(266,667,1)
(564,708,1)
(285,78,1)
(713,281,1)
(605,276,1)
(311,694,1)
(509,316,1)
(245,244,1)
(221,544,1)
(492,544,1)
(595,244,1)
(790,176,1)
(44,673,1)
(603,544,1)
(140,607,1)
(536,698,1)
(647,767,1)
(296,686,1)
(519,638,1)
(53,140,1)
(156,807,1)
(109,5,1)
(574,67,1)
(625,760,1)
(28,632,1)
(536,523,1)
(535,590,1)
(778,244,1)
(674,346,1)
(195,810,1)
(524,614,1)
(9,497,1)
(167,709,1)
(691,662,1)
(148,65,1)
(294,739,1)
(554,78,1)
(301,544,1)
(514,418,1)
(635,749,1)
(32,500,1)
(129,434,1)
(799,207,1)
(253,544,1)
(477,133,1)
(612,230,1)
(408,703,1)
(306,163,1)
(637,218,1)
(742,96,1)
(562,738,1)
(310,261,1)
(39,54,1)
(644,48,1)
(206,502,1)
(573,255,1)
(405,709,1)
(710,261,1)
(234,495,1)
(595,544,1)
(443,285,1)
(410,286,1)
(605,773,1)
(635,662,1)
(346,368,1)
(569,547,1)
(341,707,1)
(164,544,1)
(269,17,1)
(717,628,1)
(342,650,1)
(284,544,1)
(692,199,1)
(398,482,1)
(304,3,1)
(70,414,1)
(521,655,1)
(744,244,1)
(400,221,1)
(144,107,1)
(312,353,1)
(164,244,1)
(605,320,1)
(205,646,1)
(476,28,1)
(351,14,1)
(679,280,1)
(172,588,1)
(686,261,1)
(612,341,1)
(576,198,1)
(534,486,1)
(666,228,1)
(1,625,1)
(781,466,1)
(146,78,1)
(662,601,1)
(144,544,1)
(72,195,1)
(612,678,1)
(754,740,1)
(330,814,1)
(601,786,1)
(243,422,1)
(564,658,1)
(472,89,1)
(378,202,1)
(382,411,1)
(470,103,1)
(173,580,1)
(725,684,1)
(191,737,1)
(405,689,1)
(386,290,1)
(738,284,1)
(47,596,1)
(620,775,1)
(696,216,1)
(14,372,1)
(653,101,1)
(438,742,1)
(671,28,1)
(660,671,1)
(477,93,1)
(487,782,1)
(779,271,1)
(436,232,1)
(478,390,1)
(137,149,1)
(340,475,1)
(612,729,1)
(650,709,1)
(60,43,1)
(20,424,1)
(177,419,1)
(217,704,1)
(788,206,1)
(319,404,1)
(72,276,1)
(771,177,1)
(672,244,1)
(134,198,1)
(121,423,1)
(140,544,1)
(227,22,1)
(113,144,1)
(591,389,1)
(652,244,1)
(715,661,1)
(789,602,1)
(766,637,1)
(567,728,1)
(393,255,1)
(613,78,1)
(612,188,1)
(608,544,1)
(247,78,1)
(794,716,1)
(328,499,1)
(668,599,1)
(214,544,1)
(67,356,1)
(697,258,1)
(88,544,1)
(809,78,1)
(140,261,1)
(55,197,1)
(584,809,1)
(292,286,1)
(791,143,1)
(120,57,1)
(230,544,1)
(784,106,1)
(17,651,1)
(165,465,1)
(806,465,1)
(402,135,1)
(252,362,1)
(393,544,1)
(612,320,1)
(343,22,1)
(612,597,1)
(540,244,1)
(755,709,1)
(708,544,1)
(34,27,1)
(691,371,1)
(36,282,1)
(183,261,1)
(188,395,1)
(67,17,1)
(462,244,1)
(62,509,1)
(216,261,1)
(0,517,1)
(72,398,1)
(609,342,1)
(265,244,1)
(23,470,1)
(767,359,1)
(814,439,1)
(513,98,1)
(363,661,1)
(106,253,1)
(8,336,1)
(542,120,1)
(507,244,1)
(194,670,1)
(92,642,1)
(612,773,1)
(403,669,1)
(746,510,1)
(500,480,1)
(347,691,1)
(792,376,1)
(43,244,1)
(650,191,1)
(268,118,1)
(536,244,1)
(116,544,1)
(16,244,1)
(267,501,1)
(230,56,1)
(46,223,1)
(310,544,1)
(721,310,1)
(322,435,1)
(67,371,1)
(612,102,1)
(204,244,1)
(196,338,1)
(809,13,1)
(216,544,1)
(583,535,1)
(733,713,1)
(242,402,1)
(801,121,1)
(727,797,1)
(811,805,1)
(772,536,1)
(186,745,1)
(80,551,1)
(463,337,1)
(631,24,1)
(158,297,1)
(326,769,1)
(781,301,1)
(804,311,1)
(159,388,1)
(605,370,1)
(404,306,1)
(390,562,1)
(605,55,1)
(72,253,1)
(418,217,1)
(785,275,1)
(613,17,1)
(580,544,1)
(193,15,1)
(260,565,1)
(551,688,1)
(765,556,1)
(136,658,1)
(527,248,1)
(612,627,1)
(644,244,1)
(761,557,1)
(636,244,1)
(130,519,1)
(482,309,1)
(629,544,1)
(425,361,1)
(542,244,1)
(50,113,1)
(198,180,1)
(691,749,1)
(610,222,1)
(72,220,1)
(809,371,1)
(372,754,1)
(214,784,1)
(605,558,1)
(727,255,1)
(218,105,1)
(215,467,1)
(105,13,1)
(612,195,1)
(252,287,1)
(128,534,1)
(690,267,1)
(464,59,1)
(72,558,1)
(166,783,1)
(712,779,1)
(744,137,1)
(523,261,1)
(778,544,1)
(652,128,1)
(457,46,1)
(118,442,1)
(678,647,1)
(124,163,1)
(116,148,1)
(522,17,1)
(800,166,1)
(654,419,1)
(102,436,1)
(343,10,1)
(420,421,1)
(416,780,1)
(180,312,1)
(13,81,1)
(335,63,1)
(582,585,1)
(220,478,1)
(694,244,1)
(81,244,1)
(22,572,1)
(600,471,1)
(40,649,1)
(329,168,1)
(237,9,1)
(635,13,1)
(199,142,1)
(107,516,1)
(507,686,1)
(300,94,1)
(41,577,1)
(10,454,1)
(10,244,1)
(115,363,1)
(512,32,1)
(680,449,1)
(336,520,1)
(804,164,1)
(305,17,1)
(75,806,1)
(181,627,1)
(397,544,1)
(89,544,1)
(582,261,1)
(364,230,1)
(488,284,1)
(280,279,1)
(15,184,1)
(807,634,1)
(62,430,1)
(658,51,1)
(297,749,1)
(238,33,1)
(571,567,1)
(737,312,1)
(421,490,1)
(726,727,1)
(264,249,1)
(421,261,1)
(688,774,1)
(647,544,1)
(571,728,1)
(212,709,1)
(278,608,1)
(704,357,1)
(520,714,1)
(794,544,1)
(661,189,1)
(456,257,1)
(365,460,1)
(71,544,1)
(677,260,1)
(612,739,1)
(739,307,1)
(691,503,1)
(450,776,1)
(287,643,1)
(93,378,1)
(305,13,1)
(54,298,1)
(30,540,1)
(337,529,1)
(277,270,1)
(478,709,1)
(97,167,1)
(79,489,1)
(440,397,1)
(522,125,1)
(762,245,1)
(220,278,1)
(793,729,1)
(339,509,1)
(764,591,1)
(358,288,1)
(578,734,1)
(462,318,1)
(190,736,1)
(72,342,1)
(197,709,1)
(164,637,1)
(566,544,1)
(142,102,1)
(170,755,1)
(719,746,1)
(67,13,1)
(686,544,1)
(212,412,1)
(786,85,1)
(42,244,1)
(16,391,1)
(309,633,1)
(182,675,1)
(466,301,1)
(365,244,1)
(774,538,1)
(798,506,1)
(560,522,1)
(151,30,1)
(351,544,1)
(706,558,1)
(493,155,1)
(138,760,1)
(367,221,1)
(336,714,1)
(179,487,1)
(598,473,1)
(72,230,1)
(745,763,1)
(152,645,1)
(771,226,1)
(605,341,1)
(428,637,1)
(305,371,1)
(74,514,1)
(322,544,1)
(787,620,1)
(728,261,1)
(772,78,1)
(366,315,1)
(670,713,1)
(72,627,1)
(9,145,1)
(305,446,1)
(557,201,1)
(626,681,1)
(810,544,1)
(403,544,1)
(549,400,1)
(247,13,1)
(773,755,1)
(78,715,1)
(260,509,1)
(559,544,1)
(144,709,1)
(403,261,1)
(357,244,1)
(729,457,1)
(121,709,1)
(754,544,1)
(408,74,1)
(333,78,1)
(333,662,1)
(321,778,1)
(685,498,1)
(444,261,1)
(678,696,1)
(362,209,1)
(740,75,1)
(693,208,1)
(669,250,1)
(452,244,1)
(695,662,1)
(396,444,1)
(159,623,1)
(450,255,1)
(385,427,1)
(497,808,1)
(720,180,1)
(470,255,1)
(371,5,1)
(155,388,1)
(318,165,1)
(72,492,1)
(242,2,1)
(271,544,1)
(714,261,1)
(273,244,1)
(433,212,1)
(247,371,1)
(499,393,1)
(256,259,1)
(430,621,1)
(611,320,1)
(704,539,1)
(96,554,1)
(502,212,1)
(274,244,1)
(601,179,1)
(195,104,1)
(595,172,1)
(145,174,1)
(426,512,1)
(168,8,1)
(605,374,1)
(492,690,1)
(805,544,1)
(566,11,1)
(333,13,1)
(94,647,1)
(20,145,1)
(102,544,1)
(405,544,1)
(139,804,1)
(62,544,1)
(17,399,1)
(132,544,1)
(67,78,1)
(131,612,1)
(25,441,1)
(477,244,1)
(748,244,1)
(619,203,1)
(468,119,1)
(361,86,1)
(247,426,1)
(675,295,1)
(809,294,1)
(16,532,1)
(803,654,1)
(698,523,1)
(415,550,1)
(251,276,1)
(450,244,1)
(556,715,1)
(74,704,1)
(179,507,1)
(605,188,1)
(78,380,1)
(427,188,1)
(682,157,1)
(414,530,1)
(570,244,1)
(275,478,1)
(315,261,1)
(177,304,1)
(138,748,1)
(605,627,1)
(157,99,1)
(512,244,1)
(312,63,1)
(196,146,1)
(655,544,1)
(33,195,1)
(333,749,1)
(753,264,1)
(550,328,1)
(72,341,1)
(495,97,1)
(225,637,1)
(792,371,1)
(585,26,1)
(634,20,1)
(464,403,1)
(69,414,1)
(503,89,1)
(459,405,1)
(612,794,1)
(239,426,1)
(380,244,1)
(235,116,1)
(163,225,1)
(271,263,1)
(6,321,1)
(629,709,1)
(573,244,1)
(475,16,1)
(568,348,1)
(606,159,1)
(812,544,1)
(711,479,1)
(552,130,1)
(339,578,1)
(185,810,1)
(111,379,1)
(588,108,1)
(371,365,1)
(93,261,1)
(643,753,1)
(208,475,1)
(394,114,1)
(210,400,1)
(654,317,1)
(290,333,1)
(749,652,1)
(545,335,1)
(85,92,1)
(607,187,1)
(586,139,1)
(605,113,1)
(497,244,1)
(292,410,1)
(47,544,1)
(644,544,1)
(592,792,1)
(21,636,1)
(387,244,1)
(676,235,1)
(736,762,1)
(108,211,1)
(814,343,1)
(153,513,1)
(122,683,1)
(225,182,1)
(618,546,1)
(72,374,1)
(189,283,1)
(731,676,1)
(558,291,1)
(713,582,1)
(587,437,1)
(70,239,1)
(113,82,1)
(599,249,1)
(406,777,1)
(147,484,1)
(225,244,1)
(582,544,1)
(234,544,1)
(777,481,1)
(55,665,1)
(247,17,1)
(523,37,1)
(284,432,1)
(623,244,1)
(565,695,1)
(268,323,1)
(612,276,1)
(30,13,1)
(754,709,1)
(72,113,1)
(732,697,1)
(655,261,1)
(376,781,1)
(198,88,1)
(357,587,1)
(686,153,1)
(52,159,1)
(422,414,1)
(691,13,1)
(72,794,1)
(5,321,1)
(345,244,1)
(498,261,1)
(223,13,1)
(651,141,1)
(557,544,1)
(171,655,1)
(379,699,1)
(612,383,1)
(448,419,1)
(802,405,1)
(503,472,1)
(288,611,1)
(68,793,1)
(629,41,1)
(608,785,1)
(308,544,1)
(383,553,1)
(748,409,1)
(146,464,1)
(772,13,1)
(650,544,1)
(700,632,1)
(212,544,1)
(72,678,1)
(369,594,1)
(646,759,1)
(658,772,1)
(326,268,2)
(566,25,2)
(413,544,2)
(304,502,2)
(635,78,2)
(612,55,2)
(571,766,2)
(225,544,2)
(163,193,2)
(218,292,2)
(519,482,2)
(348,62,2)
(205,738,2)
(480,482,2)
(426,512,2)
(423,210,2)
(228,346,2)
(235,28,2)
(10,244,2)
(9,497,2)
(778,544,2)
(714,544,2)
(4,738,2)
(365,376,2)
(283,738,2)
(30,78,2)
(78,738,2)
(704,210,2)
(508,544,2)
(129,811,2)
(521,738,2)
(180,542,2)
(566,502,2)
(505,738,2)
(44,25,2)
(229,292,2)
(755,709,2)
(243,268,2)
(571,244,2)
(54,210,2)
(731,676,2)
(93,544,2)
(698,25,2)
(188,738,2)
(811,25,2)
(189,283,2)
(811,805,2)
(383,553,2)
(772,78,2)
(268,738,2)
(73,210,2)
(55,766,2)
(591,346,2)
(593,502,2)
(128,210,2)
(619,346,2)
(211,268,2)
(55,665,2)
(550,25,2)
(308,709,2)
(247,749,2)
(216,268,2)
(499,25,2)
(164,637,2)
(180,312,2)
(488,811,2)
(802,346,2)
(195,810,2)
(72,55,2)
(336,502,2)
(311,124,2)
(131,612,2)
(197,709,2)
(726,727,2)
(219,210,2)
(80,502,2)
(245,544,2)
(428,766,2)
(617,738,2)
(226,544,2)
(72,773,2)
(706,502,2)
(78,715,2)
(67,13,2)
(194,670,2)
(605,276,2)
(543,482,2)
(345,268,2)
(54,544,2)
(542,244,2)
(72,482,2)
(652,210,2)
(58,482,2)
(175,811,2)
(682,268,2)
(612,253,2)
(714,502,2)
(225,766,2)
(511,738,2)
(325,482,2)
(260,509,2)
(208,738,2)
(688,502,2)
(164,544,2)
(485,502,2)
(739,307,2)
(766,292,2)
(635,27,2)
(31,811,2)
(705,376,2)
(90,766,2)
(462,738,2)
(805,25,2)
(145,174,2)
(664,482,2)
(163,225,2)
(289,261,2)
(474,502,2)
(482,25,2)
(345,444,2)
(677,25,2)
(182,766,2)
(781,738,2)
(42,738,2)
(79,25,2)
(608,738,2)
(104,738,2)
(212,544,2)
(745,261,2)
(72,492,2)
(546,376,2)
(564,658,2)
(137,502,2)
(249,564,2)
(411,766,2)
(670,713,2)
(539,210,2)
(647,268,2)
(727,268,2)
(121,210,2)
(214,544,2)
(760,264,2)
(312,353,2)
(70,414,2)
(225,244,2)
(345,244,2)
(388,376,2)
(145,205,2)
(627,420,2)
(771,177,2)
(612,383,2)
(465,521,2)
(630,502,2)
(135,376,2)
(210,400,2)
(749,486,2)
(186,502,2)
(283,261,2)
(493,376,2)
(81,292,2)
(665,603,2)
(333,27,2)
(339,544,2)
(307,47,2)
(704,539,2)
(407,738,2)
(357,244,2)
(62,544,2)
(573,244,2)
(610,244,2)
(197,766,2)
(385,738,2)
(471,502,2)
(366,502,2)
(746,502,2)
(193,15,2)
(147,244,2)
(809,371,2)
(465,691,2)
(305,78,2)
(113,144,2)
(649,346,2)
(579,738,2)
(612,627,2)
(75,738,2)
(315,544,2)
(687,738,2)
(236,502,2)
(147,502,2)
(461,738,2)
(305,210,2)
(92,330,2)
(230,502,2)
(470,544,2)
(48,811,2)
(241,738,2)
(279,726,2)
(89,261,2)
(570,376,2)
(573,414,2)
(755,502,2)
(273,244,2)
(164,766,2)
(622,738,2)
(749,210,2)
(162,210,2)
(554,477,2)
(72,341,2)
(420,376,2)
(207,482,2)
(727,255,2)
(765,738,2)
(503,738,2)
(237,387,2)
(364,502,2)
(421,544,2)
(437,210,2)
(186,745,2)
(57,544,2)
(189,244,2)
(580,25,2)
(787,244,2)
(602,268,2)
(655,261,2)
(40,346,2)
(276,544,2)
(711,63,2)
(225,637,2)
(627,308,2)
(21,636,2)
(776,502,2)
(689,346,2)
(467,376,2)
(811,502,2)
(612,729,2)
(639,544,2)
(658,772,2)
(421,376,2)
(300,268,2)
(517,210,2)
(53,140,2)
(11,502,2)
(613,17,2)
(320,167,2)
(310,544,2)
(450,544,2)
(558,544,2)
(230,544,2)
(503,244,2)
(104,407,2)
(537,502,2)
(501,502,2)
(285,738,2)
(409,482,2)
(558,502,2)
(117,268,2)
(256,25,2)
(247,644,2)
(269,766,2)
(659,244,2)
(484,502,2)
(332,502,2)
(304,630,2)
(247,662,2)
(179,487,2)
(653,25,2)
(684,766,2)
(389,346,2)
(282,210,2)
(25,482,2)
(20,738,2)
(478,544,2)
(22,268,2)
(589,268,2)
(426,480,2)
(531,738,2)
(566,544,2)
(441,268,2)
(146,17,2)
(220,478,2)
(715,661,2)
(557,544,2)
(179,507,2)
(130,482,2)
(62,268,2)
(144,502,2)
(605,113,2)
(358,482,2)
(477,292,2)
(559,544,2)
(265,244,2)
(292,738,2)
(284,811,2)
(249,25,2)
(794,28,2)
(410,738,2)
(613,371,2)
(46,376,2)
(72,276,2)
(379,502,2)
(628,268,2)
(133,292,2)
(399,766,2)
(572,273,2)
(444,261,2)
(624,346,2)
(130,261,2)
(713,582,2)
(514,210,2)
(348,268,2)
(259,25,2)
(575,210,2)
(72,102,2)
(221,544,2)
(660,28,2)
(507,346,2)
(688,544,2)
(295,766,2)
(33,738,2)
(57,261,2)
(290,811,2)
(146,371,2)
(258,80,2)
(671,28,2)
(60,811,2)
(503,89,2)
(71,738,2)
(257,138,2)
(61,738,2)
(76,268,2)
(498,261,2)
(34,502,2)
(278,608,2)
(531,42,2)
(333,749,2)
(691,371,2)
(138,748,2)
(732,502,2)
(234,544,2)
(342,186,2)
(542,502,2)
(93,292,2)
(173,25,2)
(371,376,2)
(167,709,2)
(362,482,2)
(809,426,2)
(360,811,2)
(407,261,2)
(134,502,2)
(168,502,2)
(18,376,2)
(8,576,2)
(355,25,2)
(636,244,2)
(647,544,2)
(753,25,2)
(192,766,2)
(236,244,2)
(220,738,2)
(365,244,2)
(278,738,2)
(605,492,2)
(647,709,2)
(652,244,2)
(515,738,2)
(333,13,2)
(554,78,2)
(235,116,2)
(709,731,2)
(603,544,2)
(252,482,2)
(789,268,2)
(572,268,2)
(405,544,2)
(427,738,2)
(612,102,2)
(482,633,2)
(213,502,2)
(692,502,2)
(413,482,2)
(686,544,2)
(450,255,2)
(601,786,2)
(72,113,2)
(473,210,2)
(302,376,2)
(341,121,2)
(703,210,2)
(334,502,2)
(605,678,2)
(762,245,2)
(217,210,2)
(425,502,2)
(296,346,2)
(93,261,2)
(435,292,2)
(371,5,2)
(195,104,2)
(17,651,2)
(238,738,2)
(566,509,2)
(312,502,2)
(177,419,2)
(121,709,2)
(72,699,2)
(707,289,2)
(803,502,2)
(268,118,2)
(734,738,2)
(242,376,2)
(72,627,2)
(348,482,2)
(761,268,2)
(321,376,2)
(184,766,2)
(573,544,2)
(89,544,2)
(556,738,2)
(691,78,2)
(246,766,2)
(450,244,2)
(277,268,2)
(37,25,2)
(27,771,2)
(275,738,2)
(772,749,2)
(351,261,2)
(116,28,2)
(704,357,2)
(729,376,2)
(196,210,2)
(30,17,2)
(773,755,2)
(320,482,2)
(445,502,2)
(265,210,2)
(613,268,2)
(639,502,2)
(540,376,2)
(421,261,2)
(709,28,2)
(181,376,2)
(171,738,2)
(730,738,2)
(572,613,2)
(25,414,2)
(712,779,2)
(272,25,2)
(393,255,2)
(778,376,2)
(311,694,2)
(156,738,2)
(72,383,2)
(674,346,2)
(703,544,2)
(749,652,2)
(766,637,2)
(495,482,2)
(130,544,2)
(155,376,2)
(264,659,2)
(605,773,2)
(566,346,2)
(374,544,2)
(274,244,2)
(612,374,2)
(319,766,2)
(14,738,2)
(212,709,2)
(754,738,2)
(612,220,2)
(328,25,2)
(10,268,2)
(54,261,2)
(682,244,2)
(699,502,2)
(419,502,2)
(310,261,2)
(413,268,2)
(98,346,2)
(595,268,2)
(8,502,2)
(708,244,2)
(632,544,2)
(553,292,2)
(708,25,2)
(504,502,2)
(755,544,2)
(313,268,2)
(645,376,2)
(510,502,2)
(419,236,2)
(333,662,2)
(342,650,2)
(720,502,2)
(498,376,2)
(233,502,2)
(7,766,2)
(102,502,2)
(497,544,2)
(172,268,2)
(582,261,2)
(51,25,2)
(114,210,2)
(603,261,2)
(797,268,2)
(72,374,2)
(333,17,2)
(606,376,2)
(538,502,2)
(436,502,2)
(621,268,2)
(733,738,2)
(637,292,2)
(801,210,2)
(318,738,2)
(395,351,2)
(634,9,2)
(668,25,2)
(141,766,2)
(738,811,2)
(686,261,2)
(470,811,2)
(453,376,2)
(634,20,2)
(635,371,2)
(726,814,2)
(775,25,2)
(32,482,2)
(259,346,2)
(655,544,2)
(605,627,2)
(690,502,2)
(20,145,2)
(557,255,2)
(814,343,2)
(568,482,2)
(8,336,2)
(742,292,2)
(802,405,2)
(496,738,2)
(784,502,2)
(5,321,2)
(380,244,2)
(315,261,2)
(696,268,2)
(610,807,2)
(754,709,2)
(650,502,2)
(402,376,2)
(605,558,2)
(212,28,2)
(151,30,2)
(554,292,2)
(605,738,2)
(57,502,2)
(197,544,2)
(492,502,2)
(810,709,2)
(194,738,2)
(516,502,2)
(405,709,2)
(249,787,2)
(56,502,2)
(655,738,2)
(13,292,2)
(681,811,2)
(458,766,2)
(314,376,2)
(193,766,2)
(523,261,2)
(811,566,2)
(13,762,2)
(353,544,2)
(420,421,2)
(251,210,2)
(109,376,2)
(576,502,2)
(809,13,2)
(88,502,2)
(346,268,2)
(708,69,2)
(665,766,2)
(609,502,2)
(418,210,2)
(67,78,2)
(481,502,2)
(82,502,2)
(764,346,2)
(568,268,2)
(662,601,2)
(246,292,2)
(635,13,2)
(597,346,2)
(600,502,2)
(194,340,2)
(805,544,2)
(399,804,2)
(223,78,2)
(220,278,2)
(661,738,2)
(557,268,2)
(323,738,2)
(713,738,2)
(258,502,2)
(447,78,2)
(16,738,2)
(486,210,2)
(529,450,2)
(115,738,2)
(739,25,2)
(605,320,2)
(553,812,2)
(257,482,2)
(163,766,2)
(243,482,2)
(792,738,2)
(747,482,2)
(269,571,2)
(417,502,2)
(138,482,2)
(85,346,2)
(215,376,2)
(67,17,2)
(210,738,2)
(353,502,2)
(206,502,2)
(414,268,2)
(588,268,2)
(393,25,2)
(376,738,2)
(623,244,2)
(174,194,2)
(812,292,2)
(107,502,2)
(235,373,2)
(15,766,2)
(441,348,2)
(520,502,2)
(203,346,2)
(167,482,2)
(305,371,2)
(404,766,2)
(509,502,2)
(667,766,2)
(748,244,2)
(809,78,2)
(177,304,2)
(691,738,2)
(762,292,2)
(145,738,2)
(710,376,2)
(685,498,2)
(598,210,2)
(416,482,2)
(747,268,2)
(534,210,2)
(462,244,2)
(605,739,2)
(305,17,2)
(176,502,2)
(580,544,2)
(661,531,2)
(72,253,2)
(529,502,2)
(116,544,2)
(631,738,2)
(65,28,2)
(71,544,2)
(333,426,2)
(40,487,2)
(253,544,2)
(393,544,2)
(750,502,2)
(743,502,2)
(494,766,2)
(148,28,2)
(644,244,2)
(583,738,2)
(532,738,2)
(477,93,2)
(605,729,2)
(443,738,2)
(47,544,2)
(724,376,2)
(605,794,2)
(142,502,2)
(72,230,2)
(384,738,2)
(629,292,2)
(25,268,2)
(177,502,2)
(398,482,2)
(650,544,2)
(465,738,2)
(616,346,2)
(85,92,2)
(271,811,2)
(573,255,2)
(94,268,2)
(663,482,2)
(279,240,2)
(635,738,2)
(658,25,2)
(430,482,2)
(592,738,2)
(584,25,2)
(810,544,2)
(0,244,2)
(657,346,2)
(651,244,2)
(371,365,2)
(140,502,2)
(43,811,2)
(397,25,2)
(223,376,2)
(455,292,2)
(144,544,2)
(695,346,2)
(74,704,2)
(121,544,2)
(183,261,2)
(59,210,2)
(341,707,2)
(808,738,2)
(475,16,2)
(522,13,2)
(106,502,2)
(646,738,2)
(618,376,2)
(140,261,2)
(654,419,2)
(725,766,2)
(714,261,2)
(570,244,2)
(786,244,2)
(630,544,2)
(782,346,2)
(193,269,2)
(785,738,2)
(456,482,2)
(605,383,2)
(167,544,2)
(152,376,2)
(343,268,2)
(6,376,2)
(301,544,2)
(391,738,2)
(444,544,2)
(527,502,2)
(81,244,2)
(252,760,2)
(39,54,2)
(274,376,2)
(188,754,2)
(507,686,2)
(0,210,2)
(289,544,2)
(381,376,2)
(231,738,2)
(721,346,2)
(612,195,2)
(794,544,2)
(620,25,2)
(460,376,2)
(303,738,2)
(0,544,2)
(367,738,2)
(317,502,2)
(72,558,2)
(299,28,2)
(72,639,2)
(524,502,2)
(269,17,2)
(773,750,2)
(809,25,2)
(346,117,2)
(308,544,2)
(745,544,2)
(383,292,2)
(487,782,2)
(540,244,2)
(347,738,2)
(440,25,2)
(288,257,2)
(715,738,2)
(744,502,2)
(105,292,2)
(594,210,2)
(68,376,2)
(464,210,2)
(748,482,2)
(662,666,2)
(562,738,2)
(536,25,2)
(26,738,2)
(786,85,2)
(72,342,2)
(311,766,2)
(69,25,2)
(412,28,2)
(605,188,2)
(366,315,2)
(751,268,2)
(539,0,2)
(521,544,2)
(565,346,2)
(718,738,2)
(316,502,2)
(442,738,2)
(670,244,2)
(586,766,2)
(590,738,2)
(439,244,2)
(357,210,2)
(612,341,2)
(691,27,2)
(605,802,2)
(92,346,2)
(487,346,2)
(336,714,2)
(124,766,2)
(247,13,2)
(74,514,2)
(9,738,2)
(136,25,2)
(772,536,2)
(370,738,2)
(621,482,2)
(469,738,2)
(341,210,2)
(650,709,2)
(307,25,2)
(514,244,2)
(790,502,2)
(763,502,2)
(691,503,2)
(760,573,2)
(170,502,2)
(549,738,2)
(612,802,2)
(433,28,2)
(605,195,2)
(710,261,2)
(571,728,2)
(15,244,2)
(521,244,2)
(329,502,2)
(578,738,2)
(513,346,2)
(3,502,2)
(185,738,2)
(672,738,2)
(464,244,2)
(522,17,2)
(223,13,2)
(382,766,2)
(192,637,2)
(540,710,2)
(372,738,2)
(679,346,2)
(518,482,2)
(55,197,2)
(306,766,2)
(101,25,2)
(351,738,2)
(814,439,2)
(603,766,2)
(636,130,2)
(768,502,2)
(722,28,2)
(340,475,2)
(66,766,2)
(564,25,2)
(498,544,2)
(435,766,2)
(174,738,2)
(214,261,2)
(694,244,2)
(86,502,2)
(252,287,2)
(627,376,2)
(204,482,2)
(707,210,2)
(188,395,2)
(612,342,2)
(710,544,2)
(19,502,2)
(664,234,2)
(308,376,2)
(191,502,2)
(72,794,2)
(559,502,2)
(253,502,2)
(613,345,2)
(644,544,2)
(691,426,2)
(227,268,2)
(777,502,2)
(50,502,2)
(683,502,2)
(242,244,2)
(333,811,2)
(762,554,2)
(124,319,2)
(408,74,2)
(629,709,2)
(512,244,2)
(452,766,2)
(463,502,2)
(312,63,2)
(321,778,2)
(673,25,2)
(536,523,2)
(601,346,2)
(444,268,2)
(422,482,2)
(330,268,2)
(580,244,2)
(623,376,2)
(52,376,2)
(560,766,2)
(183,502,2)
(72,739,2)
(144,709,2)
(304,244,2)
(67,749,2)
(294,25,2)
(256,346,2)
(750,183,2)
(712,811,2)
(198,180,2)
(179,346,2)
(654,502,2)
(595,244,2)
(476,28,2)
(809,749,2)
(541,502,2)
(577,292,2)
(612,113,2)
(111,502,2)
(812,544,2)
(447,292,2)
(424,738,2)
(146,464,2)
(806,738,2)
(728,544,2)
(607,502,2)
(393,414,2)
(717,268,2)
(428,292,2)
(697,258,2)
(806,465,2)
(165,738,2)
(612,188,2)
(779,271,2)
(199,502,2)
(30,540,2)
(117,544,2)
(158,738,2)
(466,738,2)
(35,738,2)
(16,532,2)
(270,268,2)
(21,482,2)
(759,738,2)
(53,502,2)
(72,195,2)
(287,264,2)
(196,338,2)
(21,257,2)
(95,502,2)
(324,738,2)
(226,502,2)
(17,766,2)
(452,244,2)
(234,261,2)
(267,502,2)
(196,146,2)
(9,145,2)
(385,806,2)
(806,462,2)
(604,502,2)
(434,811,2)
(532,261,2)
(605,230,2)
(429,766,2)
(353,244,2)
(78,380,2)
(457,376,2)
(340,672,2)
(146,78,2)
(266,766,2)
(670,738,2)
(151,274,2)
(666,244,2)
(636,482,2)
(694,766,2)
(605,699,2)
(611,482,2)
(426,482,2)
(189,738,2)
(397,544,2)
(269,13,2)
(614,502,2)
(72,320,2)
(119,25,2)
(226,244,2)
(798,244,2)
(541,346,2)
(741,502,2)
(22,595,2)
(195,738,2)
(640,25,2)
(442,71,2)
(28,632,2)
(587,210,2)
(396,268,2)
(216,544,2)
(333,371,2)
(691,13,2)
(608,544,2)
(576,198,2)
(470,255,2)
(108,268,2)
(531,237,2)
(13,81,2)
(696,216,2)
(727,244,2)
(146,13,2)
(340,738,2)
(400,738,2)
(126,292,2)
(691,662,2)
(613,749,2)
(264,25,2)
(814,268,2)
(708,544,2)
(338,210,2)
(337,502,2)
(43,244,2)
(287,25,2)
(804,766,2)
(662,346,2)
(490,376,2)
(39,210,2)
(383,629,2)
(187,502,2)
(629,544,2)
(479,502,2)
(297,738,2)
(159,388,2)
(62,509,2)
(497,244,2)
(408,210,2)
(731,28,2)
(740,738,2)
(419,529,2)
(471,312,2)
(608,261,2)
(567,766,2)
(625,25,2)
(605,341,2)
(686,346,2)
(333,78,2)
(258,688,2)
(438,292,2)
(339,738,2)
(613,78,2)
(201,268,2)
(512,482,2)
(260,544,2)
(99,268,2)
(595,544,2)
(84,502,2)
(352,502,2)
(612,773,2)
(45,738,2)
(736,292,2)
(728,261,2)
(726,268,2)
(339,509,2)
(781,301,2)
(146,210,2)
(363,738,2)
(719,502,2)
(685,376,2)
(644,811,2)
(648,738,2)
(651,766,2)
(149,502,2)
(536,244,2)
(361,502,2)
(439,268,2)
(612,276,2)
(376,781,2)
(703,244,2)
(715,610,2)
(283,544,2)
(635,426,2)
(486,408,2)
(766,322,2)
(159,623,2)
(209,482,2)
(528,25,2)
(772,371,2)
(47,25,2)
(635,662,2)
(388,151,2)
(375,376,2)
(88,544,2)
(739,397,2)
(120,502,2)
(180,502,2)
(612,699,2)
(729,544,2)
(606,159,2)
(72,188,2)
(279,346,2)
(5,570,2)
(695,25,2)
(809,17,2)
(198,88,2)
(448,502,2)
(388,242,2)
(140,544,2)
(754,544,2)
(533,25,2)
(22,572,2)
(132,544,2)
(626,811,2)
(242,2,2)
(261,502,2)
(507,244,2)
(728,766,2)
(532,544,2)
(245,292,2)
(2,376,2)
(338,244,2)
(415,25,2)
(240,346,2)
(658,51,2)
(810,738,2)
(431,738,2)
(745,502,2)
(480,416,2)
(378,292,2)
(539,196,2)
(27,744,2)
(239,482,2)
(125,766,2)
(310,346,2)
(292,286,2)
(131,711,2)
(373,28,2)
(605,342,2)
(23,811,2)
(113,502,2)
(67,371,2)
(563,502,2)
(669,210,2)
(610,738,2)
(132,502,2)
(89,738,2)
(612,678,2)
(529,8,2)
(771,226,2)
(17,399,2)
(486,265,2)
(500,482,2)
(336,244,2)
(737,502,2)
(157,268,2)
(805,346,2)
(369,210,2)
(248,502,2)
(264,249,2)
(301,738,2)
(804,164,2)
(271,544,2)
(635,17,2)
(489,25,2)
(548,268,2)
(153,346,2)
(542,57,2)
(67,268,2)
(72,220,2)
(400,221,2)
(802,721,2)
(565,25,2)
(42,244,2)
(321,606,2)
(807,738,2)
(475,738,2)
(771,502,2)
(769,268,2)
(72,729,2)
(605,220,2)
(406,502,2)
(399,452,2)
(672,244,2)
(405,346,2)
(678,696,2)
(407,544,2)
(416,207,2)
(464,403,2)
(766,766,2)
(791,244,2)
(97,482,2)
(247,426,2)
(103,811,2)
(642,346,2)
(787,25,2)
(812,261,2)
(641,210,2)
(24,738,2)
(459,346,2)
(721,310,2)
(633,25,2)
(475,806,2)
(198,502,2)
(250,210,2)
(772,25,2)
(793,376,2)
(472,738,2)
(530,268,2)
(259,502,2)
(204,244,2)
(322,544,2)
(286,738,2)
(72,802,2)
(143,738,2)
(574,268,2)
(541,25,2)
(680,766,2)
(432,811,2)
(289,210,2)
(799,482,2)
(200,25,2)
(245,244,2)
(408,703,2)
(582,544,2)
(237,9,2)
(492,544,2)
(697,502,2)
(508,255,2)
(576,147,2)
(403,210,2)
(573,25,2)
(374,502,2)
(397,709,2)
(118,738,2)
(342,502,2)
(286,544,2)
(599,25,2)
(450,502,2)
(523,544,2)
(477,244,2)
(561,811,2)
(174,791,2)
(422,268,2)
(233,576,2)
(676,28,2)
(96,292,2)
(273,268,2)
(735,28,2)
(124,163,2)
(778,244,2)
(395,738,2)
(633,544,2)
(666,346,2)
(638,482,2)
(343,22,2)
(247,27,2)
(731,555,2)
(131,660,2)
(64,738,2)
(390,738,2)
(221,738,2)
(506,376,2)
(247,78,2)
(322,766,2)
(770,268,2)
(238,531,2)
(256,502,2)
(348,413,2)
(811,346,2)
(1,25,2)
(257,204,2)
(779,811,2)
(248,214,2)
(612,794,2)
(585,738,2)
(216,261,2)
(123,376,2)
(605,55,2)
(502,212,2)
(132,261,2)
(343,10,2)
(605,639,2)
(100,482,2)
(807,634,2)
(791,738,2)
(380,738,2)
(72,678,2)
(635,749,2)
(403,261,2)
(430,268,2)
(613,13,2)
(497,738,2)
(699,544,2)
(596,25,2)
(403,544,2)
(298,210,2)
(138,760,2)
(387,244,2)
(151,376,2)
(478,709,2)
(767,268,2)
(582,738,2)
(280,346,2)
(118,442,2)
(535,738,2)
(386,811,2)
(260,346,2)
(30,376,2)
(502,28,2)
(434,544,2)
(774,502,2)
(682,544,2)
(164,244,2)
(772,426,2)
(16,244,2)
(691,17,2)
(51,244,2)
(643,25,2)
(293,766,2)
(605,253,2)
(232,502,2)
(772,17,2)
(5,376,2)
(738,284,2)
(630,261,2)
(659,25,2)
(368,268,2)
(320,664,2)
(612,346,2)
(237,738,2)
(190,292,2)
(330,814,2)
(234,482,2)
(205,244,2)
(661,189,2)
(309,25,2)
(677,346,2)
(416,244,2)
(468,25,2)
(207,252,2)
(779,247,2)
(676,235,2)
(260,25,2)
(202,292,2)
(711,502,2)
(780,482,2)
(612,492,2)
(331,346,2)
(70,482,2)
(305,13,2)
(387,738,2)
(732,697,2)
(276,210,2)
(319,244,2)
(11,346,2)
(62,482,2)
(2,544,2)
(351,544,2)
(214,502,2)
(612,639,2)
(223,17,2)
(677,260,2)
(263,811,2)
(69,414,2)
(82,132,2)
(113,82,2)
(478,738,2)
(92,726,2)
(139,766,2)
(697,161,2)
(247,371,2)
(788,502,2)
(247,17,2)
(159,376,2)
(612,739,2)
(605,374,2)
(315,502,2)
(798,376,2)
(30,13,2)
(744,244,2)
(122,502,2)
(691,749,2)
(693,738,2)
(38,376,2)
(552,482,2)
(281,738,2)
(678,268,2)
(612,558,2)
(727,544,2)
(786,346,2)
(322,292,2)
(551,502,2)
(36,210,2)
(760,25,2)
(756,738,2)
(716,28,2)
(483,738,2)
(131,72,2)
(25,441,2)
(131,712,2)
(183,544,2)
(523,25,2)
(47,261,2)
(284,544,2)
(291,502,2)
(222,738,2)
(88,244,2)
(441,482,2)
(446,210,2)
(11,25,2)
(131,605,2)
(701,210,2)
(678,647,2)
(606,798,2)
(359,268,2)
(271,244,2)
(782,244,2)
(522,766,2)
(27,502,2)
(356,268,2)
(487,279,2)
(675,766,2)
(392,738,2)
(288,482,2)
(449,766,2)
(773,502,2)
(102,544,2)
(804,311,2)
(240,244,2)
(605,102,2)
(612,320,2)
(772,13,2)
(612,230,2)
(41,292,2)
(442,339,2)
(723,766,2)
(491,738,2)
(601,179,2)
(634,738,2)
(12,292,2)
(394,210,2)
(480,21,2)
(454,268,2)
(564,708,2)
(247,811,2)
(74,210,2)
(521,655,2)
(805,502,2)
-----------------------------------
(0,t2p_write_pdf_xobject_icccs_dict(t2p, output)
(1,output)
(2,t2p->pdf_palettesize)
(3,output)
(4,pdf_xrefcount)
(5,written += t2p_write_pdf_stream_end(output)
(6,written)
(7,written)
(8,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(9,written += t2p_write_pdf_page_content_stream(t2p, output)
(10,t2p_write_pdf_stream_dict_end(output)
(11,pdf_page)
(12,t2p)
(13,written += t2p_write_pdf_obj_end(output)
(14,pdf_xrefcount)
(15,t2p_write_pdf_stream_dict_start(output)
(16,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(17,written += t2p_write_pdf_obj_end(output)
(18,output)
(19,t2p)
(20,streamlen=written)
(21,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(22,written += t2p_write_pdf_xobject_stream_dict(\n\\n\\t\\t\\t\\t0, \n\\n\\t\\t\\t\\tt2p, \n\\n\\t\\t\\t\\toutput)
(23,t2p)
(24,written)
(25,i2<t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount)
(26,t2p)
(27,written += t2p_write_pdf_obj_end(output)
(28,t2p->t2p_error!=T2P_ERR_OK)
(29,t2p)
(30,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(31,t2p)
(32,output)
(33,written)
(34,t2p)
(35,t2p)
(36,output)
(37,pdf_xrefcount)
(38,t2p)
(39,t2p->pdf_icccs=t2p->pdf_xrefcount)
(40,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(41,pdf_xrefoffsets)
(42,t2p_write_pdf_obj_end(output)
(43,t2p_disable(output)
(44,output)
(45,pdf_xrefoffsets)
(46,t2p)
(47,t2p->pdf_xrefcount)
(48,output)
(49,)
(50,written)
(51,t2p_write_pdf_stream_dict_start(output)
(52,written)
(53,t2p->pdf_info=t2p->pdf_xrefcount)
(54,t2p->pdf_xrefcount)
(55,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(56,pdf_info)
(57,t2p->pdf_xrefcount)
(58,streamlen)
(59,output)
(60,written)
(61,pdf_xrefcount)
(62,t2p->pdf_page)
(63,written=0)
(64,t2p)
(65,t2p)
(66,pdf_xrefoffsets)
(67,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(68,pdf_xrefcount)
(69,i2+1)
(70,i2++)
(71,t2p->tiff_tiles)
(72,return(0)
(73,t2p)
(74,written += t2p_write_pdf_stream_start(output)
(75,t2p)
(76,t2p)
(77,)
(78,written += t2p_write_pdf_obj_end(output)
(79,input)
(80,sizeof(uint32)
(81,t2p_write_pdf_obj_end(output)
(82,t2p->pdf_xrefcount++)
(83,0)
(84,t2p)
(85,streamlen=written-streamlen)
(86,3)
(87,)
(88,t2p_write_pdf_catalog(t2p, output)
(89,t2p->pdf_xrefcount)
(90,i)
(91,)
(92,written-streamlen)
(93,t2p->pdf_xrefcount)
(94,t2p)
(95,t2p)
(96,written)
(97,t2p)
(98,written)
(99,t2p)
(100,written)
(101,t2p)
(102,t2p->pdf_catalog)
(103,input)
(104,t2p->pdf_xrefcount++)
(105,i)
(106,t2p)
(107,pdf_xrefoffsets)
(108,0)
(109,written)
(110,)
(111,pdf_xrefcount)
(112,for(t2p->pdf_page=0;t2p->pdf_page<t2p->tiff_pagecount;t2p->pdf_page++)
(113,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(114,written)
(115,streamlen)
(116,t2p->pdf_xrefcount)
(117,t2p->t2p_error)
(118,t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount)
(119,i2)
(120,output)
(121,t2p->pdf_xrefoffsets)
(122,pdf_xrefcount)
(123,pdf_xrefcount)
(124,written += t2p_write_pdf_stream_dict_end(output)
(125,written)
(126,written)
(127,if(t2p->tiff_transferfunctioncount != 0)
(128,output)
(129,written)
(130,t2p->pdf_xrefcount)
(131,RET)
(132,t2p->pdf_xrefcount)
(133,output)
(134,written)
(135,0)
(136,written)
(137,output)
(138,written += t2p_write_pdf_stream_end(output)
(139,written)
(140,t2p->pdf_xrefcount)
(141,output)
(142,1)
(143,output)
(144,t2p->pdf_xrefoffsets)
(145,written += t2p_write_pdf_stream_start(output)
(146,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(147,t2p_write_pdf_obj_end(output)
(148,pdf_xrefcount)
(149,written)
(150,if( (t2p->pdf_colorspace & T2P_CS_PALETTE)
(151,written += t2p_write_pdf_stream_dict_start(output)
(152,output)
(153,pdf_xrefcount)
(154,streamlen)
(155,written)
(156,written)
(157,output)
(158,tiff_tiles)
(159,written += t2p_write_pdf_stream_dict_end(output)
(160,if(t2p->t2p_error!=T2P_ERR_OK)
(161,unsigned int)
(162,t2p)
(163,written += t2p_write_pdf_transfer_dict(t2p, output, i)
(164,t2p_write_pdf_transfer_stream(t2p, output, i)
(165,written)
(166,t2p)
(167,t2p->pdf_xrefoffsets)
(168,written)
(169,)
(170,t2p)
(171,t2p)
(172,output)
(173,t2p)
(174,written += t2p_write_pdf_stream_dict_end(output)
(175,pdf_startxref)
(176,t2p)
(177,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(178,)
(179,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(180,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(181,written)
(182,i)
(183,t2p->pdf_xrefcount)
(184,output)
(185,t2p)
(186,t2p->pdf_xrefcount++)
(187,t2p)
(188,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(189,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(190,output)
(191,pdf_xrefoffsets)
(192,i++)
(193,written += t2p_write_pdf_stream_dict_start(output)
(194,written += t2p_write_pdf_stream_dict(0, t2p->pdf_xrefcount+1, output)
(195,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(196,written += t2p_write_pdf_stream_dict_start(output)
(197,t2p->pdf_xrefoffsets)
(198,written += t2p_write_pdf_catalog(t2p, output)
(199,t2p->pdf_catalog=1)
(200,t2p)
(201,input)
(202,t2p)
(203,written)
(204,t2p_write_pdf_obj_end(output)
(205,t2p_write_pdf_stream_start(output)
(206,TIFF2PDF_MODULE)
(207,streamlen=written-streamlen)
(208,written)
(209,written)
(210,(t2p->pdf_colorspace & T2P_CS_ICCBASED)
(211,written)
(212,t2p->pdf_xrefoffsets)
(213,t2p)
(214,t2p->pdf_xrefcount)
(215,t2p)
(216,t2p->pdf_xrefcount)
(217,written)
(218,0)
(219,pdf_xrefcount)
(220,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(221,t2p->pdf_colorspace)
(222,output)
(223,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(224,)
(225,t2p_write_pdf_transfer_dict(t2p, output, i)
(226,t2p_write_pdf_pages(t2p, output)
(227,written)
(228,output)
(229,pdf_xrefcount)
(230,t2p->pdf_info)
(231,written)
(232,t2p)
(233,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(234,t2p->pdf_xrefcount)
(235,TIFFSafeMultiply(tmsize_t,t2p->pdf_xrefcount,sizeof(uint32)
(236,t2p_write_pdf_obj_end(output)
(237,written += t2p_write_pdf_stream_end(output)
(238,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(239,i2)
(240,t2p_write_pdf_stream_end(output)
(241,written)
(242,t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output)
(243,t2p)
(244,TIFF* output)
(245,t2p_write_pdf_transfer(t2p, output)
(246,t2p)
(247,written += t2p_write_pdf_xreftable(t2p, output)
(248,t2p->pdf_pages=t2p->pdf_xrefcount)
(249,written += t2p_write_pdf_stream_dict_end(output)
(250,t2p)
(251,t2p)
(252,written-streamlen)
(253,t2p->pdf_pages)
(254,if( (t2p->pdf_colorspace & T2P_CS_ICCBASED)
(255,TIFF* input)
(256,tiff_pagecount)
(257,written += t2p_write_pdf_obj_end(output)
(258,t2p->pdf_xrefcount * sizeof(uint32)
(259,t2p)
(260,t2p->pdf_page)
(261,t2p->pdf_xrefcount=0)
(262,)
(263,output)
(264,written += t2p_write_pdf_stream_start(output)
(265,t2p_write_pdf_stream_end(output)
(266,pdf_xrefcount)
(267,t2p)
(268,t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount !=0)
(269,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(270,streamlen)
(271,t2p_write_pdf_trailer(t2p, output)
(272,t2p_error)
(273,t2p_write_pdf_stream_dict_start(output)
(274,t2p_write_pdf_stream_dict_start(output)
(275,t2p)
(276,t2p->pdf_icccs)
(277,written)
(278,t2p->pdf_xrefcount++)
(279,written += t2p_write_pdf_stream_end(output)
(280,written)
(281,1)
(282,written)
(283,t2p->pdf_xrefcount)
(284,t2p->t2p_error)
(285,t2p)
(286,t2p->tiff_transferfunctioncount)
(287,streamlen=written)
(288,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(289,t2p->pdf_xrefcount)
(290,written)
(291,pdf_xrefcount)
(292,t2p->tiff_transferfunctioncount != 0)
(293,t2p)
(294,written)
(295,t2p)
(296,output)
(297,t2p)
(298,pdf_xrefcount)
(299,uint32)
(300,pdf_xrefcount)
(301,t2p->pdf_colorspace)
(302,pdf_xrefoffsets)
(303,written)
(304,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(305,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(306,written)
(307,t2p->pdf_xrefcount++)
(308,t2p->pdf_xrefoffsets)
(309,T2P_ERR_OK)
(310,t2p->pdf_xrefcount)
(311,written += t2p_write_pdf_stream_start(output)
(312,written += t2p_write_pdf_header(t2p, output)
(313,pdf_xrefcount)
(314,t2p)
(315,t2p->pdf_xrefcount)
(316,0)
(317,written)
(318,output)
(319,t2p_write_pdf_stream_dict_end(output)
(320,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(321,written += t2p_write_pdf_xobject_palettecs_stream(t2p, output)
(322,t2p->tiff_transferfunctioncount)
(323,0)
(324,tiles_tilecount)
(325,written)
(326,t2p_error)
(327,0)
(328,t2p)
(329,t2p)
(330,streamlen=written)
(331,written)
(332,pdf_page)
(333,t2p->pdf_startxref = written)
(334,T2P_ERR_ERROR)
(335,i2)
(336,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(337,written)
(338,t2p_write_pdf_stream_dict_start(output)
(339,t2p->pdf_page)
(340,written += t2p_write_pdf_stream_dict_start(output)
(341,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(342,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(343,written += t2p_write_pdf_stream_dict_end(output)
(344,streamlen)
(345,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(346,t2p->t2p_error!=T2P_ERR_OK)
(347,written)
(348,t2p->tiff_tiles[t2p->pdf_page])
(349,written)
(350,)
(351,t2p->pdf_xrefcount)
(352,pdf_xrefcount)
(353,t2p_write_pdf_header(t2p, output)
(354,if(t2p->pdf_xrefoffsets==NULL)
(355,i2)
(356,written)
(357,t2p_write_pdf_stream_dict_end(output)
(358,written)
(359,t2p)
(360,t2p)
(361,t2p->pdf_pages=3)
(362,streamlen)
(363,written)
(364,2)
(365,t2p_write_pdf_obj_end(output)
(366,t2p->pdf_catalog=t2p->pdf_xrefcount)
(367,T2P_CS_ICCBASED)
(368,T2P_ERR_OK)
(369,t2p)
(370,0)
(371,written += t2p_write_pdf_obj_end(output)
(372,t2p)
(373,sizeof(uint32)
(374,t2p->pdf_info)
(375,pdf_palettesize)
(376,(t2p->pdf_colorspace & T2P_CS_PALETTE)
(377,)
(378,pdf_xrefcount)
(379,t2p)
(380,t2p_write_pdf_obj_end(output)
(381,output)
(382,output)
(383,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(384,t2p)
(385,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(386,t2p)
(387,t2p_write_pdf_stream_end(output)
(388,written += t2p_write_pdf_stream_dict(t2p->pdf_palettesize, 0, output)
(389,written)
(390,pdf_xrefoffsets)
(391,output)
(392,output)
(393,t2p_read_tiff_size_tile(t2p, input, i2)
(394,output)
(395,t2p->pdf_xrefcount++)
(396,output)
(397,t2p->pdf_xrefoffsets)
(398,0)
(399,written += t2p_write_pdf_stream_end(output)
(400,t2p->pdf_colorspace & T2P_CS_ICCBASED)
(401,written)
(402,output)
(403,t2p->pdf_xrefcount)
(404,output)
(405,t2p->pdf_xrefoffsets)
(406,pdf_xrefcount)
(407,t2p->pdf_xrefcount)
(408,written += t2p_write_pdf_xobject_icccs_stream(t2p, output)
(409,output)
(410,0)
(411,written)
(412,pdf_xrefoffsets)
(413,t2p->tiff_tiles)
(414,i2=0)
(415,output)
(416,t2p_write_pdf_stream_length(streamlen, output)
(417,pdf_xrefcount)
(418,output)
(419,written += t2p_write_pdf_obj_end(output)
(420,t2p->pdf_xrefcount++)
(421,t2p->pdf_xrefcount)
(422,i2)
(423,pdf_xrefoffsets)
(424,written)
(425,written)
(426,written += t2p_write_pdf_obj_end(output)
(427,written)
(428,i)
(429,written)
(430,pdf_page)
(431,pdf_xrefcount)
(432,t2p_error)
(433,NULL)
(434,t2p->pdf_startxref)
(435,tiff_transferfunctioncount)
(436,pdf_catalog)
(437,written)
(438,output)
(439,t2p_write_pdf_stream_start(output)
(440,t2p)
(441,t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount)
(442,t2p->tiff_tiles[t2p->pdf_page])
(443,tiff_transferfunctioncount)
(444,t2p->pdf_xrefcount)
(445,pdf_pages)
(446,written)
(447,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(448,t2p)
(449,t2p)
(450,t2p_write_pdf_info(t2p, input, output)
(451,t2p_error)
(452,t2p_write_pdf_stream_end(output)
(453,t2p)
(454,output)
(455,written)
(456,t2p)
(457,pdf_palettecs)
(458,written)
(459,t2p)
(460,output)
(461,written)
(462,t2p_write_pdf_obj_end(output)
(463,output)
(464,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(465,written += t2p_write_pdf_page(t2p->pdf_xrefcount, t2p, output)
(466,T2P_CS_PALETTE)
(467,written)
(468,1)
(469,output)
(470,t2p_read_tiff_data(t2p, input)
(471,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(472,output)
(473,t2p)
(474,pdf_xrefoffsets)
(475,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(476,t2p)
(477,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(478,t2p->pdf_xrefoffsets)
(479,written)
(480,written += t2p_write_pdf_stream_length(streamlen, output)
(481,written)
(482,t2p->t2p_error!=T2P_ERR_OK)
(483,streamlen)
(484,output)
(485,t2p)
(486,written += t2p_write_pdf_stream_end(output)
(487,written += t2p_write_pdf_obj_end(output)
(488,T2P_ERR_OK)
(489,t2p)
(490,pdf_xrefcount)
(491,output)
(492,t2p->pdf_pages)
(493,output)
(494,written)
(495,pdf_xrefcount)
(496,0)
(497,t2p_write_pdf_page_content_stream(t2p, output)
(498,t2p->pdf_xrefcount)
(499,written)
(500,written)
(501,t2p->pdf_info=2)
(502,t2p->pdf_xrefoffsets==NULL)
(503,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(504,written)
(505,written)
(506,output)
(507,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(508,t2p_read_tiff_init(t2p, input)
(509,t2p->pdf_page=0)
(510,written)
(511,pdf_xrefcount)
(512,t2p_write_pdf_obj_end(output)
(513,t2p)
(514,t2p_write_pdf_stream_start(output)
(515,pdf_xrefcount)
(516,t2p)
(517,output)
(518,streamlen)
(519,pdf_xrefcount)
(520,output)
(521,t2p_write_pdf_page(t2p->pdf_xrefcount, t2p, output)
(522,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(523,t2p->pdf_xrefcount)
(524,output)
(525,i2=0)
(526,)
(527,written)
(528,output)
(529,written += t2p_write_pdf_info(t2p, input, output)
(530,0)
(531,written += t2p_write_pdf_obj_end(output)
(532,t2p->pdf_xrefcount)
(533,t2p)
(534,written)
(535,written)
(536,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(537,input)
(538,t2p)
(539,written += t2p_write_pdf_xobject_icccs_dict(t2p, output)
(540,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(541,t2p)
(542,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(543,output)
(544,T2P* t2p)
(545,0)
(546,written)
(547,0)
(548,i2)
(549,0)
(550,input)
(551,uint32)
(552,output)
(553,t2p->pdf_xrefcount++)
(554,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(555,uint32*)
(556,written)
(557,t2p_read_tiff_size(t2p, input)
(558,t2p->pdf_xrefcount)
(559,t2p->t2p_error)
(560,written)
(561,output)
(562,t2p)
(563,t2p)
(564,written += t2p_write_pdf_xobject_stream_dict(\n\\n\\t\\t\\t\\t\\ti2+1, \n\\n\\t\\t\\t\\t\\tt2p, \n\\n\\t\\t\\t\\t\\toutput)
(565,pdf_page)
(566,t2p->pdf_page)
(567,output)
(568,tiles_tilecount)
(569,streamlen=0)
(570,t2p_write_pdf_stream_end(output)
(571,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(572,written += t2p_write_pdf_stream_dict_start(output)
(573,t2p_readwrite_pdf_image_tile(t2p, input, output, i2)
(574,written)
(575,output)
(576,written += t2p_write_pdf_obj_end(output)
(577,t2p)
(578,pdf_page)
(579,t2p)
(580,t2p_write_advance_directory(t2p, output)
(581,)
(582,t2p->pdf_xrefcount)
(583,streamlen)
(584,written)
(585,pdf_xrefcount)
(586,output)
(587,output)
(588,t2p)
(589,t2p)
(590,streamlen)
(591,streamlen)
(592,pdf_colorspace)
(593,pdf_catalog)
(594,written)
(595,t2p_write_pdf_xobject_stream_dict(\n\\n\\t\\t\\t\\t0, \n\\n\\t\\t\\t\\tt2p, \n\\n\\t\\t\\t\\toutput)
(596,pdf_xrefcount)
(597,0)
(598,pdf_icccs)
(599,written)
(600,t2p)
(601,written += t2p_write_pdf_stream_length(streamlen, output)
(602,written)
(603,t2p->pdf_xrefcount)
(604,output)
(605,return(0)
(606,written += t2p_write_pdf_stream_start(output)
(607,pdf_xrefcount)
(608,t2p->pdf_xrefcount)
(609,written)
(610,t2p_write_pdf_stream_length(streamlen, output)
(611,written)
(612,return(0)
(613,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(614,t2p)
(615,if(t2p->t2p_error!=T2P_ERR_OK)
(616,pdf_xrefcount)
(617,t2p)
(618,t2p)
(619,output)
(620,output)
(621,t2p)
(622,written)
(623,t2p_write_pdf_stream_dict_end(output)
(624,written)
(625,t2p)
(626,t2p)
(627,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(628,written)
(629,t2p->pdf_xrefoffsets)
(630,t2p->pdf_xrefcount)
(631,0)
(632,t2p->t2p_error)
(633,t2p->t2p_error)
(634,written-streamlen)
(635,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(636,t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(637,i=0)
(638,t2p)
(639,t2p->pdf_page)
(640,i2)
(641,written)
(642,streamlen)
(643,written)
(644,t2p_write_pdf_xreftable(t2p, output)
(645,written)
(646,output)
(647,t2p->pdf_xrefoffsets)
(648,t2p)
(649,written)
(650,t2p->pdf_xrefoffsets)
(651,t2p_write_pdf_obj_end(output)
(652,t2p_write_pdf_obj_end(output)
(653,pdf_xrefoffsets)
(654,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(655,t2p->pdf_xrefcount)
(656,if(t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount !=0)
(657,t2p)
(658,written += t2p_write_pdf_stream_dict_start(output)
(659,t2p_write_pdf_stream_start(output)
(660,return(0)
(661,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(662,written += t2p_write_pdf_obj_end(output)
(663,pdf_xrefoffsets)
(664,t2p->pdf_xrefcount++)
(665,t2p->pdf_xrefcount++)
(666,t2p_write_pdf_obj_end(output)
(667,t2p)
(668,output)
(669,pdf_xrefcount)
(670,t2p_write_pdf_stream_dict(0, t2p->pdf_xrefcount+1, output)
(671,0)
(672,t2p_write_pdf_stream_dict_start(output)
(673,written)
(674,streamlen)
(675,output)
(676,_TIFFmalloc(TIFFSafeMultiply(tmsize_t,t2p->pdf_xrefcount,sizeof(uint32)
(677,t2p->pdf_page++)
(678,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(679,output)
(680,output)
(681,written)
(682,t2p_write_advance_directory(t2p, output)
(683,t2p)
(684,t2p)
(685,t2p->pdf_palettecs=t2p->pdf_xrefcount)
(686,t2p->pdf_xrefcount)
(687,output)
(688,t2p->pdf_xrefcount)
(689,pdf_xrefoffsets)
(690,pdf_pages)
(691,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(692,t2p)
(693,output)
(694,t2p_write_pdf_stream_start(output)
(695,t2p)
(696,t2p->pdf_xrefcount++)
(697,(unsigned int)
(698,output)
(699,t2p->pdf_catalog)
(700,T2P_ERR_OK)
(701,written)
(702,for(i=0; i < t2p->tiff_transferfunctioncount; i++)
(703,t2p_write_pdf_xobject_icccs_stream(t2p, output)
(704,written += t2p_write_pdf_stream_dict_end(output)
(705,written)
(706,0)
(707,t2p->pdf_xrefcount++)
(708,t2p_write_pdf_xobject_stream_dict(\n\\n\\t\\t\\t\\t\\ti2+1, \n\\n\\t\\t\\t\\t\\tt2p, \n\\n\\t\\t\\t\\t\\toutput)
(709,t2p->pdf_xrefoffsets= (uint32*)
(710,t2p->pdf_xrefcount)
(711,return(written)
(712,return(written)
(713,t2p->pdf_xrefcount+1)
(714,t2p->pdf_xrefcount)
(715,written += t2p_write_pdf_stream_length(streamlen, output)
(716,pdf_xrefoffsets)
(717,output)
(718,written)
(719,output)
(720,written)
(721,t2p->pdf_xrefcount++)
(722,tmsize_t)
(723,i)
(724,output)
(725,pdf_xrefcount)
(726,written += t2p_readwrite_pdf_image(t2p, input, output)
(727,t2p_readwrite_pdf_image(t2p, input, output)
(728,t2p->pdf_xrefcount)
(729,t2p->pdf_palettecs)
(730,pdf_colorspace)
(731,(uint32*)
(732,TIFFError(\n\\n\\t\\t\\tTIFF2PDF_MODULE, \n\\n\\t\\t\\t"Can\'t allocate %u bytes of memory for t2p_write_pdf", \n\\n\\t\\t\\t(unsigned int)
(733,output)
(734,t2p)
(735,t2p)
(736,written)
(737,t2p)
(738,t2p->t2p_error!=T2P_ERR_OK)
(739,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(740,pdf_xrefoffsets)
(741,pdf_xrefcount)
(742,t2p)
(743,t2p->t2p_error = T2P_ERR_ERROR)
(744,t2p_write_pdf_obj_end(output)
(745,t2p->pdf_xrefcount)
(746,t2p)
(747,tiff_tiles)
(748,t2p_write_pdf_stream_end(output)
(749,written += t2p_write_pdf_obj_end(output)
(750,t2p->pdf_xrefcount++)
(751,t2p)
(752,i2)
(753,streamlen)
(754,t2p->pdf_xrefoffsets)
(755,t2p->pdf_xrefoffsets)
(756,t2p)
(757,for(i2=0;i2<t2p->tiff_tiles[t2p->pdf_page].tiles_tilecount;i2++)
(758,)
(759,written)
(760,written += t2p_readwrite_pdf_image_tile(t2p, input, output, i2)
(761,written)
(762,written += t2p_write_pdf_transfer(t2p, output)
(763,pdf_xrefcount)
(764,output)
(765,output)
(766,i < t2p->tiff_transferfunctioncount)
(767,pdf_xrefoffsets)
(768,t2p_error)
(769,t2p)
(770,input)
(771,written += t2p_write_pdf_pages(t2p, output)
(772,written += t2p_write_pdf_obj_start(t2p->pdf_xrefcount, output)
(773,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(774,pdf_xrefcount)
(775,written)
(776,output)
(777,t2p)
(778,t2p_write_pdf_xobject_palettecs_stream(t2p, output)
(779,written += t2p_write_pdf_trailer(t2p, output)
(780,output)
(781,t2p->pdf_colorspace & T2P_CS_PALETTE)
(782,t2p_write_pdf_obj_end(output)
(783,i=0)
(784,pdf_xrefcount)
(785,pdf_xrefcount)
(786,t2p_write_pdf_stream_length(streamlen, output)
(787,t2p_write_pdf_stream_dict_end(output)
(788,"Can\'t allocate %u bytes of memory for t2p_write_pdf")
(789,output)
(790,pdf_info)
(791,t2p_write_pdf_stream_dict_end(output)
(792,t2p)
(793,t2p)
(794,t2p->pdf_xrefoffsets)
(795,if(t2p->t2p_error!=T2P_ERR_OK)
(796,i)
(797,output)
(798,t2p_write_pdf_stream_start(output)
(799,written)
(800,input)
(801,t2p)
(802,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++])
(803,t2p)
(804,written += t2p_write_pdf_transfer_stream(t2p, output, i)
(805,t2p->tiff_pagecount)
(806,written += t2p_write_pdf_obj_end(output)
(807,streamlen=written-streamlen)
(808,output)
(809,t2p->pdf_xrefoffsets[t2p->pdf_xrefcount++]=written)
(810,t2p->pdf_xrefoffsets)
(811,t2p->pdf_page<t2p->tiff_pagecount)
(812,t2p->pdf_xrefcount)
(813,if(t2p->t2p_error!=T2P_ERR_OK)
(814,written += t2p_write_pdf_stream_start(output)
(815,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
