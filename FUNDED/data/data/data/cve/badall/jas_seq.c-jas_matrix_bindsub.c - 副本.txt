-----label-----
1
-----code-----
void jas_matrix_bindsub(jas_matrix_t *mat0, jas_matrix_t *mat1,
  jas_matind_t r0, jas_matind_t c0, jas_matind_t r1, jas_matind_t c1)
{
	jas_matind_t i;

	if (mat0->data_) {
		if (!(mat0->flags_ & JAS_MATRIX_REF)) {
			jas_free(mat0->data_);
		}
		mat0->data_ = 0;
		mat0->datasize_ = 0;
	}
	if (mat0->rows_) {
		jas_free(mat0->rows_);
		mat0->rows_ = 0;
	}
	mat0->flags_ |= JAS_MATRIX_REF;
	mat0->numrows_ = r1 - r0 + 1;
	mat0->numcols_ = c1 - c0 + 1;
	mat0->maxrows_ = mat0->numrows_;
	if (!(mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *)))) {
		/*
			There is no way to indicate failure to the caller.
			So, we have no choice but to abort.
			Ideally, this function should have a non-void return type.
			In practice, a non-void return type probably would not help
			much anyways as the caller would just have to terminate anyways.
		*/
		abort();
	}

	for (i = 0; i < mat0->numrows_; ++i) {
		mat0->rows_[i] = mat1->rows_[r0 + i] + c0;
	}

	mat0->xstart_ = mat1->xstart_ + c0;
	mat0->ystart_ = mat1->ystart_ + r0;
	mat0->xend_ = mat0->xstart_ + mat0->numcols_;
	mat0->yend_ = mat0->ystart_ + mat0->numrows_;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
37,38
37,39
37,40
37,41
37,42
37,43
37,44
37,45
37,46
37,47
37,48
37,49
37,50
38,39
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
49,52
50,51
50,52
51,52
52,53
53,54
53,55
54,55
54,56
55,56
58,59
60,61
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
70,71
70,72
71,72
71,73
72,73
76,77
77,78
77,79
78,79
78,80
79,80
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
90,91
90,92
91,92
93,94
93,95
94,95
97,98
98,99
98,100
99,100
99,101
100,101
104,105
105,106
105,107
106,107
106,108
107,108
110,111
112,113
113,114
113,115
114,115
114,116
115,116
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
127,129
128,129
131,132
131,133
132,133
132,134
133,134
135,136
138,139
139,140
139,141
140,141
140,142
141,142
144,145
144,146
145,146
148,149
148,150
149,150
150,151
151,152
151,153
152,153
152,154
153,154
156,157
156,158
156,159
157,158
159,160
159,161
160,161
163,164
164,165
164,166
165,166
167,168
169,170
170,171
171,172
172,173
174,175
174,176
174,177
174,178
175,176
176,177
176,178
177,178
180,181
180,182
181,182
183,184
183,185
184,185
187,188
188,189
190,191
191,192
192,193
192,194
193,194
193,195
194,195
194,196
195,196
198,199
200,201
200,202
201,202
201,203
202,203
202,204
203,204
206,207
206,208
207,208
209,210
211,212
213,214
214,215
214,216
215,216
215,217
216,217
219,220
219,221
220,221
220,222
221,222
224,225
226,227
227,228
227,229
228,229
228,230
229,230
232,233
232,234
233,234
233,235
234,235
237,238
239,240
240,241
240,242
241,242
241,243
242,243
245,246
245,247
246,247
246,248
247,248
250,251
250,252
251,252
254,255
255,256
255,257
256,257
256,258
257,258
260,261
260,262
261,262
261,263
262,263
265,266
265,267
266,267
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,29,31,34,36,41,43,47,48,56,57,59,64,67,68,73,74,75,80,81,82,86,87,92,95,96,101,102,103,108,109,111,116,117,121,123,124,129,130,134,136,137,142,143,146,147,154,155,158,161,162,166,168,173,178,179,182,185,186,189,196,197,199,204,205,208,210,212,217,218,222,223,225,230,231,235,236,238,243,244,248,249,252,253,258,259,263,264,267,268
-----computeFrom-----
53,54
53,55
70,71
70,72
77,78
77,79
98,99
98,100
105,106
105,107
113,114
113,115
118,119
118,120
119,120
119,121
126,127
126,128
131,132
131,133
132,133
132,134
139,140
139,141
151,152
151,153
176,177
176,178
180,181
180,182
192,193
192,194
200,201
200,202
206,207
206,208
214,215
214,216
219,220
219,221
227,228
227,229
232,233
232,234
240,241
240,242
245,246
245,247
255,256
255,257
260,261
260,262
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void jas_matrix_bindsub(jas_matrix_t *mat0, jas_matrix_t *mat1,  jas_matind_t r0, jas_matind_t c0, jas_matind_t r1, jas_matind_t c1){	jas_matind_t i;	if (mat0->data_) {		if (!(mat0->flags_ & JAS_MATRIX_REF)) {			jas_free(mat0->data_);		}		mat0->data_ = 0;		mat0->datasize_ = 0;	}	if (mat0->rows_) {		jas_free(mat0->rows_);		mat0->rows_ = 0;	}	mat0->flags_ |= JAS_MATRIX_REF;	mat0->numrows_ = r1 - r0 + 1;	mat0->numcols_ = c1 - c0 + 1;	mat0->maxrows_ = mat0->numrows_;	if (!(mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *)))) {		/*			There is no way to indicate failure to the caller.			So, we have no choice but to abort.			Ideally, this function should have a non-void return type.			In practice, a non-void return type probably would not help			much anyways as the caller would just have to terminate anyways.		*/		abort();	}	for (i = 0; i < mat0->numrows_; ++i) {		mat0->rows_[i] = mat1->rows_[r0 + i] + c0;	}	mat0->xstart_ = mat1->xstart_ + c0;	mat0->ystart_ = mat1->ystart_ + r0;	mat0->xend_ = mat0->xstart_ + mat0->numcols_;	mat0->yend_ = mat0->ystart_ + mat0->numrows_;}
void
jas_matrix_bindsub(jas_matrix_t *mat0, jas_matrix_t *mat1,  jas_matind_t r0, jas_matind_t c0, jas_matind_t r1, jas_matind_t c1)
jas_matrix_bindsub
jas_matrix_t *mat0
jas_matrix_t
jas_matrix_t
*mat0
*
mat0
jas_matrix_t *mat1
jas_matrix_t
jas_matrix_t
*mat1
*
mat1
jas_matind_t r0
jas_matind_t
jas_matind_t
r0
r0
jas_matind_t c0
jas_matind_t
jas_matind_t
c0
c0
jas_matind_t r1
jas_matind_t
jas_matind_t
r1
r1
jas_matind_t c1
jas_matind_t
jas_matind_t
c1
c1
{	jas_matind_t i;	if (mat0->data_) {		if (!(mat0->flags_ & JAS_MATRIX_REF)) {			jas_free(mat0->data_);		}		mat0->data_ = 0;		mat0->datasize_ = 0;	}	if (mat0->rows_) {		jas_free(mat0->rows_);		mat0->rows_ = 0;	}	mat0->flags_ |= JAS_MATRIX_REF;	mat0->numrows_ = r1 - r0 + 1;	mat0->numcols_ = c1 - c0 + 1;	mat0->maxrows_ = mat0->numrows_;	if (!(mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *)))) {		/*			There is no way to indicate failure to the caller.			So, we have no choice but to abort.			Ideally, this function should have a non-void return type.			In practice, a non-void return type probably would not help			much anyways as the caller would just have to terminate anyways.		*/		abort();	}	for (i = 0; i < mat0->numrows_; ++i) {		mat0->rows_[i] = mat1->rows_[r0 + i] + c0;	}	mat0->xstart_ = mat1->xstart_ + c0;	mat0->ystart_ = mat1->ystart_ + r0;	mat0->xend_ = mat0->xstart_ + mat0->numcols_;	mat0->yend_ = mat0->ystart_ + mat0->numrows_;}
jas_matind_t i;
jas_matind_t i;
jas_matind_t
jas_matind_t
i
i
if (mat0->data_) {		if (!(mat0->flags_ & JAS_MATRIX_REF)) {			jas_free(mat0->data_);		}		mat0->data_ = 0;		mat0->datasize_ = 0;	}
mat0->data_
mat0
mat0
data_
{		if (!(mat0->flags_ & JAS_MATRIX_REF)) {			jas_free(mat0->data_);		}		mat0->data_ = 0;		mat0->datasize_ = 0;	}
if (!(mat0->flags_ & JAS_MATRIX_REF)) {			jas_free(mat0->data_);		}
!(mat0->flags_ & JAS_MATRIX_REF)
(mat0->flags_ & JAS_MATRIX_REF)
mat0->flags_ & JAS_MATRIX_REF
mat0->flags_
mat0
mat0
flags_
JAS_MATRIX_REF
JAS_MATRIX_REF
{			jas_free(mat0->data_);		}
jas_free(mat0->data_);
jas_free(mat0->data_)
jas_free
jas_free
mat0->data_
mat0
mat0
data_
mat0->data_ = 0;
mat0->data_ = 0
mat0->data_
mat0
mat0
data_
0
mat0->datasize_ = 0;
mat0->datasize_ = 0
mat0->datasize_
mat0
mat0
datasize_
0
if (mat0->rows_) {		jas_free(mat0->rows_);		mat0->rows_ = 0;	}
mat0->rows_
mat0
mat0
rows_
{		jas_free(mat0->rows_);		mat0->rows_ = 0;	}
jas_free(mat0->rows_);
jas_free(mat0->rows_)
jas_free
jas_free
mat0->rows_
mat0
mat0
rows_
mat0->rows_ = 0;
mat0->rows_ = 0
mat0->rows_
mat0
mat0
rows_
0
mat0->flags_ |= JAS_MATRIX_REF;
mat0->flags_ |= JAS_MATRIX_REF
mat0->flags_
mat0
mat0
flags_
JAS_MATRIX_REF
JAS_MATRIX_REF
mat0->numrows_ = r1 - r0 + 1;
mat0->numrows_ = r1 - r0 + 1
mat0->numrows_
mat0
mat0
numrows_
r1 - r0 + 1
r1 - r0
r1
r1
r0
r0
1
mat0->numcols_ = c1 - c0 + 1;
mat0->numcols_ = c1 - c0 + 1
mat0->numcols_
mat0
mat0
numcols_
c1 - c0 + 1
c1 - c0
c1
c1
c0
c0
1
mat0->maxrows_ = mat0->numrows_;
mat0->maxrows_ = mat0->numrows_
mat0->maxrows_
mat0
mat0
maxrows_
mat0->numrows_
mat0
mat0
numrows_
if (!(mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *)))) {		/*			There is no way to indicate failure to the caller.			So, we have no choice but to abort.			Ideally, this function should have a non-void return type.			In practice, a non-void return type probably would not help			much anyways as the caller would just have to terminate anyways.		*/		abort();	}
!(mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *)))
(mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *)))
mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *))
mat0->rows_
mat0
mat0
rows_
jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *))
jas_alloc2
jas_alloc2
mat0->maxrows_
mat0
mat0
maxrows_
sizeof(jas_seqent_t *)
jas_seqent_t *
jas_seqent_t
jas_seqent_t
*
*
{		/*			There is no way to indicate failure to the caller.			So, we have no choice but to abort.			Ideally, this function should have a non-void return type.			In practice, a non-void return type probably would not help			much anyways as the caller would just have to terminate anyways.		*/		abort();	}
abort();
abort()
abort
abort
for (i = 0; i < mat0->numrows_; ++i) {		mat0->rows_[i] = mat1->rows_[r0 + i] + c0;	}
i = 0;
i = 0
i
i
0
i < mat0->numrows_
i
i
mat0->numrows_
mat0
mat0
numrows_
++i
i
i
{		mat0->rows_[i] = mat1->rows_[r0 + i] + c0;	}
mat0->rows_[i] = mat1->rows_[r0 + i] + c0;
mat0->rows_[i] = mat1->rows_[r0 + i] + c0
mat0->rows_[i]
mat0->rows_
mat0
mat0
rows_
i
i
mat1->rows_[r0 + i] + c0
mat1->rows_[r0 + i]
mat1->rows_
mat1
mat1
rows_
r0 + i
r0
r0
i
i
c0
c0
mat0->xstart_ = mat1->xstart_ + c0;
mat0->xstart_ = mat1->xstart_ + c0
mat0->xstart_
mat0
mat0
xstart_
mat1->xstart_ + c0
mat1->xstart_
mat1
mat1
xstart_
c0
c0
mat0->ystart_ = mat1->ystart_ + r0;
mat0->ystart_ = mat1->ystart_ + r0
mat0->ystart_
mat0
mat0
ystart_
mat1->ystart_ + r0
mat1->ystart_
mat1
mat1
ystart_
r0
r0
mat0->xend_ = mat0->xstart_ + mat0->numcols_;
mat0->xend_ = mat0->xstart_ + mat0->numcols_
mat0->xend_
mat0
mat0
xend_
mat0->xstart_ + mat0->numcols_
mat0->xstart_
mat0
mat0
xstart_
mat0->numcols_
mat0
mat0
numcols_
mat0->yend_ = mat0->ystart_ + mat0->numrows_;
mat0->yend_ = mat0->ystart_ + mat0->numrows_
mat0->yend_
mat0
mat0
yend_
mat0->ystart_ + mat0->numrows_
mat0->ystart_
mat0
mat0
ystart_
mat0->numrows_
mat0
mat0
numrows_
-----joern-----
(73,118,0)
(95,144,0)
(89,73,0)
(154,29,0)
(97,133,0)
(27,128,0)
(54,97,0)
(98,144,0)
(107,149,0)
(47,136,0)
(23,77,0)
(86,157,0)
(150,60,0)
(14,144,0)
(81,28,0)
(149,124,0)
(147,88,0)
(51,124,0)
(102,124,0)
(68,104,0)
(27,88,0)
(6,98,0)
(126,22,0)
(28,22,0)
(131,159,0)
(52,111,0)
(36,65,0)
(136,47,0)
(49,144,0)
(25,77,0)
(9,116,0)
(119,121,0)
(5,144,0)
(85,49,0)
(74,88,0)
(7,90,0)
(38,121,0)
(13,101,0)
(4,51,0)
(147,144,0)
(69,52,0)
(104,124,0)
(105,16,0)
(134,14,0)
(121,38,0)
(25,132,0)
(34,130,0)
(44,117,0)
(60,51,0)
(45,42,0)
(49,118,0)
(101,116,0)
(31,23,0)
(97,40,0)
(28,74,0)
(39,22,0)
(42,45,0)
(79,77,0)
(20,29,0)
(97,118,0)
(56,76,0)
(148,14,0)
(146,59,0)
(42,139,0)
(59,107,0)
(99,124,0)
(11,144,0)
(151,79,0)
(77,25,0)
(68,131,0)
(38,43,0)
(108,45,0)
(106,116,0)
(56,159,0)
(140,4,0)
(75,136,0)
(11,154,0)
(135,44,0)
(123,74,0)
(74,112,0)
(48,24,0)
(61,144,0)
(65,144,0)
(45,132,0)
(103,117,0)
(106,14,0)
(66,111,0)
(149,107,0)
(53,90,0)
(29,57,0)
(110,107,0)
(50,61,0)
(26,98,0)
(109,25,0)
(83,42,0)
(18,158,0)
(60,144,0)
(138,45,0)
(77,23,0)
(145,116,0)
(121,144,0)
(117,44,0)
(160,73,0)
(25,113,0)
(137,4,0)
(88,74,0)
(1,11,0)
(115,147,0)
(0,60,0)
(14,118,0)
(17,3,0)
(4,144,0)
(118,97,0)
(82,126,0)
(84,123,0)
(94,44,0)
(40,97,0)
(72,28,0)
(35,29,0)
(32,59,0)
(122,5,0)
(104,68,0)
(95,117,0)
(22,157,0)
(147,51,0)
(12,47,0)
(145,113,0)
(24,86,0)
(8,130,0)
(154,16,0)
(156,16,0)
(91,124,0)
(93,65,0)
(86,24,0)
(139,42,0)
(123,144,0)
(4,118,0)
(130,144,0)
(80,123,0)
(87,106,0)
(142,3,0)
(68,73,0)
(139,124,0)
(141,61,0)
(128,27,0)
(154,124,0)
(113,25,0)
(19,131,0)
(59,155,0)
(125,139,0)
(44,144,0)
(114,56,0)
(65,103,0)
(126,144,0)
(37,124,0)
(98,149,0)
(88,27,0)
(29,144,0)
(145,28,0)
(58,124,0)
(14,106,0)
(55,47,0)
(131,68,0)
(30,11,0)
(79,116,0)
(3,56,0)
(103,124,0)
(56,3,0)
(112,74,0)
(23,155,0)
(28,145,0)
(40,76,0)
(24,144,0)
(143,23,0)
(117,95,0)
(16,144,0)
(77,79,0)
(113,15,0)
(152,131,0)
(61,159,0)
(90,144,0)
(154,126,0)
(117,103,0)
(10,57,0)
(131,144,0)
(63,116,0)
(64,126,0)
(73,68,0)
(127,40,0)
(92,95,0)
(62,40,0)
(100,136,0)
(136,100,0)
(33,95,0)
(28,144,0)
(3,155,0)
(79,76,0)
(120,5,0)
(73,144,0)
(88,147,0)
(129,79,0)
(42,21,0)
(90,104,0)
(118,124,0)
(16,52,0)
(159,124,0)
(70,49,0)
(46,24,0)
(47,144,0)
(41,147,0)
(2,145,0)
(125,144,0)
(95,139,0)
(153,154,0)
(44,149,0)
(51,4,0)
(71,121,0)
(67,125,0)
(96,125,0)
(107,132,0)
(159,56,0)
(57,111,0)
(107,59,0)
(60,0,1)
(23,155,1)
(51,4,1)
(86,24,1)
(125,144,1)
(141,149,1)
(2,28,1)
(79,76,1)
(146,32,1)
(95,33,1)
(3,155,1)
(147,51,1)
(59,146,1)
(153,11,1)
(88,147,1)
(139,42,1)
(127,54,1)
(154,126,1)
(131,152,1)
(79,116,1)
(105,156,1)
(25,132,1)
(145,2,1)
(38,121,1)
(106,116,1)
(150,139,1)
(112,74,1)
(62,127,1)
(90,144,1)
(13,113,1)
(9,63,1)
(16,105,1)
(54,49,1)
(5,122,1)
(114,3,1)
(44,144,1)
(17,61,1)
(98,6,1)
(68,131,1)
(80,51,1)
(108,83,1)
(45,132,1)
(125,96,1)
(24,48,1)
(29,20,1)
(109,77,1)
(130,144,1)
(87,101,1)
(129,23,1)
(73,144,1)
(84,80,1)
(98,144,1)
(149,107,1)
(77,79,1)
(39,126,1)
(96,67,1)
(120,52,1)
(49,70,1)
(106,14,1)
(101,116,1)
(3,142,1)
(56,3,1)
(68,73,1)
(95,139,1)
(92,44,1)
(101,13,1)
(77,23,1)
(49,144,1)
(1,5,1)
(81,72,1)
(40,76,1)
(154,153,1)
(104,68,1)
(6,26,1)
(117,44,1)
(152,19,1)
(147,144,1)
(137,140,1)
(48,46,1)
(88,27,1)
(59,155,1)
(16,144,1)
(103,117,1)
(28,74,1)
(160,131,1)
(140,60,1)
(4,137,1)
(29,144,1)
(97,133,1)
(110,59,1)
(82,64,1)
(154,16,1)
(122,120,1)
(53,7,1)
(4,144,1)
(121,144,1)
(5,144,1)
(73,118,1)
(35,38,1)
(97,40,1)
(44,94,1)
(26,106,1)
(0,150,1)
(61,144,1)
(28,22,1)
(50,141,1)
(145,28,1)
(42,21,1)
(61,50,1)
(10,29,1)
(42,45,1)
(71,119,1)
(31,143,1)
(41,115,1)
(65,93,1)
(159,56,1)
(134,87,1)
(4,118,1)
(100,136,1)
(135,65,1)
(69,16,1)
(12,130,1)
(60,144,1)
(14,148,1)
(73,89,1)
(24,144,1)
(93,36,1)
(142,17,1)
(123,84,1)
(40,62,1)
(126,144,1)
(18,112,1)
(131,159,1)
(55,12,1)
(116,9,1)
(143,145,1)
(57,10,1)
(47,144,1)
(136,47,1)
(75,47,1)
(45,138,1)
(36,159,1)
(28,81,1)
(145,116,1)
(22,39,1)
(52,69,1)
(33,92,1)
(138,108,1)
(148,134,1)
(63,112,1)
(74,88,1)
(32,98,1)
(120,130,1)
(118,97,1)
(78,104,1)
(70,85,1)
(83,125,1)
(23,31,1)
(25,109,1)
(1,22,1)
(7,103,1)
(63,18,1)
(107,132,1)
(46,5,1)
(107,59,1)
(67,118,1)
(85,154,1)
(87,116,1)
(27,128,1)
(20,35,1)
(64,86,1)
(95,144,1)
(8,34,1)
(27,147,1)
(72,106,1)
(28,144,1)
(47,55,1)
(154,29,1)
(123,144,1)
(79,151,1)
(19,90,1)
(113,25,1)
(121,71,1)
(14,118,1)
(119,100,1)
(11,30,1)
(117,95,1)
(90,53,1)
(151,129,1)
(115,123,1)
(56,114,1)
(14,144,1)
(65,144,1)
(126,82,1)
(30,1,1)
(44,149,1)
(147,41,1)
(131,144,1)
(130,8,1)
(156,57,1)
(94,135,1)
(107,110,1)
(35,100,1)
(11,144,1)
(25,77,1)
(56,76,1)
(89,160,1)
(136,75,1)
(121,144,2)
(134,106,2)
(97,133,2)
(49,144,2)
(103,117,2)
(27,128,2)
(154,16,2)
(112,74,2)
(65,144,2)
(136,130,2)
(98,144,2)
(79,76,2)
(25,132,2)
(56,76,2)
(131,144,2)
(109,106,2)
(86,5,2)
(61,144,2)
(154,126,2)
(68,131,2)
(90,144,2)
(29,130,2)
(148,106,2)
(25,77,2)
(95,139,2)
(88,27,2)
(129,106,2)
(46,5,2)
(59,155,2)
(40,76,2)
(118,97,2)
(38,100,2)
(11,144,2)
(25,106,2)
(16,144,2)
(28,22,2)
(4,144,2)
(106,14,2)
(77,79,2)
(73,144,2)
(39,5,2)
(44,144,2)
(52,130,2)
(31,106,2)
(24,5,2)
(145,106,2)
(69,130,2)
(86,24,2)
(87,106,2)
(147,144,2)
(73,118,2)
(126,144,2)
(56,3,2)
(117,44,2)
(79,106,2)
(139,42,2)
(44,149,2)
(29,144,2)
(123,144,2)
(77,23,2)
(79,116,2)
(72,106,2)
(16,130,2)
(47,130,2)
(12,130,2)
(126,5,2)
(82,5,2)
(121,100,2)
(55,130,2)
(5,144,2)
(23,155,2)
(38,121,2)
(64,5,2)
(68,73,2)
(42,45,2)
(48,5,2)
(14,106,2)
(156,130,2)
(105,130,2)
(101,116,2)
(2,106,2)
(107,132,2)
(35,130,2)
(125,144,2)
(18,112,2)
(24,144,2)
(51,4,2)
(77,106,2)
(28,74,2)
(71,100,2)
(147,51,2)
(13,106,2)
(130,144,2)
(75,130,2)
(143,106,2)
(23,106,2)
(113,106,2)
(131,159,2)
(3,155,2)
(106,116,2)
(106,106,2)
(28,144,2)
(119,100,2)
(74,88,2)
(28,106,2)
(117,95,2)
(81,106,2)
(145,28,2)
(14,118,2)
(104,68,2)
(97,40,2)
(107,59,2)
(4,118,2)
(151,106,2)
(136,47,2)
(22,5,2)
(154,29,2)
(60,144,2)
(101,106,2)
(149,107,2)
(20,130,2)
(100,136,2)
(14,144,2)
(57,130,2)
(159,56,2)
(88,147,2)
(45,132,2)
(42,21,2)
(10,130,2)
(145,116,2)
(100,130,2)
(47,144,2)
(95,144,2)
(113,25,2)
-----------------------------------
(0,maxrows_)
(1,mat0)
(2,i)
(3,mat1->ystart_)
(4,mat0->numrows_)
(5,mat0->rows_)
(6,xstart_)
(7,mat0)
(8,data_)
(9,0)
(10,0)
(11,mat0->flags_)
(12,mat0)
(13,i)
(14,mat0->numrows_)
(15,)
(16,mat0->datasize_)
(17,mat1)
(18,abort()
(19,mat0)
(20,data_)
(21,jas_matind_t c1)
(22,mat0->rows_ = 0)
(23,mat1->rows_)
(24,mat0->rows_)
(25,mat1->rows_[r0 + i] + c0)
(26,mat0)
(27,sizeof(jas_seqent_t *)
(28,mat0->rows_)
(29,mat0->data_)
(30,flags_)
(31,rows_)
(32,mat1)
(33,numcols_)
(34,mat0)
(35,mat0)
(36,mat0)
(37,if (mat0->data_)
(38,jas_free(mat0->data_)
(39,0)
(40,r0 + 1)
(41,maxrows_)
(42,c1 - c0 + 1)
(43,)
(44,mat0->xstart_)
(45,c0 + 1)
(46,mat0)
(47,mat0->flags_)
(48,rows_)
(49,mat0->numrows_)
(50,ystart_)
(51,mat0->maxrows_ = mat0->numrows_)
(52,mat0->datasize_ = 0)
(53,yend_)
(54,r1)
(55,flags_)
(56,mat1->ystart_ + r0)
(57,mat0->data_ = 0)
(58,i)
(59,mat1->xstart_)
(60,mat0->maxrows_)
(61,mat0->ystart_)
(62,1)
(63,i)
(64,mat0)
(65,mat0->xend_)
(66,if (!(mat0->flags_ & JAS_MATRIX_REF)
(67,mat0)
(68,mat0->ystart_ + mat0->numrows_)
(69,0)
(70,numrows_)
(71,data_)
(72,mat0)
(73,mat0->numrows_)
(74,mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *)
(75,JAS_MATRIX_REF)
(76,jas_matind_t r0)
(77,mat1->rows_[r0 + i])
(78,RET)
(79,r0 + i)
(80,mat0)
(81,rows_)
(82,rows_)
(83,c1)
(84,rows_)
(85,mat0)
(86,jas_free(mat0->rows_)
(87,i)
(88,jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *)
(89,numrows_)
(90,mat0->yend_)
(91,if (mat0->rows_)
(92,mat0)
(93,xend_)
(94,xstart_)
(95,mat0->numcols_)
(96,numcols_)
(97,r1 - r0 + 1)
(98,mat0->xstart_)
(99,for (i = 0; i < mat0->numrows_; ++i)
(100,!(mat0->flags_ & JAS_MATRIX_REF)
(101,++i)
(102,if (!(mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *)
(103,mat0->xend_ = mat0->xstart_ + mat0->numcols_)
(104,mat0->yend_ = mat0->ystart_ + mat0->numrows_)
(105,datasize_)
(106,i < mat0->numrows_)
(107,mat1->xstart_ + c0)
(108,c0)
(109,c0)
(110,c0)
(111,)
(112,!(mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *)
(113,mat0->rows_[i] = mat1->rows_[r0 + i] + c0)
(114,r0)
(115,mat0)
(116,i = 0)
(117,mat0->xstart_ + mat0->numcols_)
(118,mat0->numrows_ = r1 - r0 + 1)
(119,mat0)
(120,mat0)
(121,mat0->data_)
(122,rows_)
(123,mat0->rows_)
(124,)
(125,mat0->numcols_)
(126,mat0->rows_)
(127,r0)
(128,jas_seqent_t *)
(129,r0)
(130,mat0->data_)
(131,mat0->ystart_)
(132,jas_matind_t c0)
(133,jas_matind_t r1)
(134,mat0)
(135,mat0)
(136,mat0->flags_ & JAS_MATRIX_REF)
(137,numrows_)
(138,1)
(139,mat0->numcols_ = c1 - c0 + 1)
(140,mat0)
(141,mat0)
(142,ystart_)
(143,mat1)
(144,jas_matrix_t *mat0)
(145,mat0->rows_[i])
(146,xstart_)
(147,mat0->maxrows_)
(148,numrows_)
(149,mat0->xstart_ = mat1->xstart_ + c0)
(150,mat0)
(151,i)
(152,ystart_)
(153,JAS_MATRIX_REF)
(154,mat0->flags_ |= JAS_MATRIX_REF)
(155,jas_matrix_t *mat1)
(156,mat0)
(157,)
(158,)
(159,mat0->ystart_ = mat1->ystart_ + r0)
(160,mat0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
