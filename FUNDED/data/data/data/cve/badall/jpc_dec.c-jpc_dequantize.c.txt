-----label-----
1
-----code-----
static void jpc_dequantize(jas_matrix_t *x, jpc_fix_t absstepsize)
{
	int i;
	int j;
	int t;

	assert(absstepsize >= 0);
	if (absstepsize == jpc_inttofix(1)) {
		return;
	}

	for (i = 0; i < jas_matrix_numrows(x); ++i) {
		for (j = 0; j < jas_matrix_numcols(x); ++j) {
			t = jas_matrix_get(x, i, j);
			if (t) {
				t = jpc_fix_mul(t, absstepsize);
			} else {
				t = 0;
			}
			jas_matrix_set(x, i, j, t);
		}
	}

}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
16,19
16,20
16,21
16,22
17,18
18,19
18,20
20,21
22,23
23,24
23,25
25,26
27,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
40,41
40,42
41,42
41,43
42,43
44,45
44,46
45,46
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
59,60
59,61
60,61
62,63
64,65
65,66
67,68
68,69
68,70
68,71
68,72
69,70
70,71
70,72
71,72
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
83,84
85,86
85,87
85,88
86,87
87,88
87,89
88,89
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
99,100
99,101
99,102
100,101
102,103
103,104
104,105
104,106
105,106
107,108
107,109
107,110
108,109
110,111
112,113
114,115
115,116
116,117
116,118
117,118
120,121
121,122
121,123
121,124
121,125
121,126
122,123
124,125
126,127
128,129
130,131
-----nextToken-----
2,4,7,9,10,13,15,19,21,24,26,29,31,35,38,39,43,46,47,49,54,55,58,61,63,66,72,73,76,79,81,84,89,92,94,96,98,101,106,109,111,113,118,119,123,125,127,129,131
-----computeFrom-----
36,37
36,38
41,42
41,43
52,53
52,54
56,57
56,58
70,71
70,72
74,75
74,76
87,88
87,89
104,105
104,106
116,117
116,118
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void jpc_dequantize(jas_matrix_t *x, jpc_fix_t absstepsize){	int i;	int j;	int t;	assert(absstepsize >= 0);	if (absstepsize == jpc_inttofix(1)) {		return;	}	for (i = 0; i < jas_matrix_numrows(x); ++i) {		for (j = 0; j < jas_matrix_numcols(x); ++j) {			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}	}}
static void
jpc_dequantize(jas_matrix_t *x, jpc_fix_t absstepsize)
jpc_dequantize
jas_matrix_t *x
jas_matrix_t
jas_matrix_t
*x
*
x
jpc_fix_t absstepsize
jpc_fix_t
jpc_fix_t
absstepsize
absstepsize
{	int i;	int j;	int t;	assert(absstepsize >= 0);	if (absstepsize == jpc_inttofix(1)) {		return;	}	for (i = 0; i < jas_matrix_numrows(x); ++i) {		for (j = 0; j < jas_matrix_numcols(x); ++j) {			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}	}}
int i;
int i;
int
i
i
int j;
int j;
int
j
j
int t;
int t;
int
t
t
assert(absstepsize >= 0);
assert(absstepsize >= 0)
assert
assert
absstepsize >= 0
absstepsize
absstepsize
0
if (absstepsize == jpc_inttofix(1)) {		return;	}
absstepsize == jpc_inttofix(1)
absstepsize
absstepsize
jpc_inttofix(1)
jpc_inttofix
jpc_inttofix
1
{		return;	}
return;
for (i = 0; i < jas_matrix_numrows(x); ++i) {		for (j = 0; j < jas_matrix_numcols(x); ++j) {			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}	}
i = 0;
i = 0
i
i
0
i < jas_matrix_numrows(x)
i
i
jas_matrix_numrows(x)
jas_matrix_numrows
jas_matrix_numrows
x
x
++i
i
i
{		for (j = 0; j < jas_matrix_numcols(x); ++j) {			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}	}
for (j = 0; j < jas_matrix_numcols(x); ++j) {			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}
j = 0;
j = 0
j
j
0
j < jas_matrix_numcols(x)
j
j
jas_matrix_numcols(x)
jas_matrix_numcols
jas_matrix_numcols
x
x
++j
j
j
{			t = jas_matrix_get(x, i, j);			if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}			jas_matrix_set(x, i, j, t);		}
t = jas_matrix_get(x, i, j);
t = jas_matrix_get(x, i, j)
t
t
jas_matrix_get(x, i, j)
jas_matrix_get
jas_matrix_get
x
x
i
i
j
j
if (t) {				t = jpc_fix_mul(t, absstepsize);			} else {				t = 0;			}
t
t
{				t = jpc_fix_mul(t, absstepsize);			}
t = jpc_fix_mul(t, absstepsize);
t = jpc_fix_mul(t, absstepsize)
t
t
jpc_fix_mul(t, absstepsize)
jpc_fix_mul
jpc_fix_mul
t
t
absstepsize
absstepsize
{				t = 0;			}
t = 0;
t = 0
t
t
0
jas_matrix_set(x, i, j, t);
jas_matrix_set(x, i, j, t)
jas_matrix_set
jas_matrix_set
x
x
i
i
j
j
t
t
-----joern-----
(44,40,0)
(59,40,0)
(55,22,0)
(56,61,0)
(48,5,0)
(45,18,0)
(5,49,0)
(19,55,0)
(36,57,0)
(52,22,0)
(21,61,0)
(12,61,0)
(23,40,0)
(20,37,0)
(16,12,0)
(54,41,0)
(15,44,0)
(44,41,0)
(1,27,0)
(30,57,0)
(2,22,0)
(18,27,0)
(8,19,0)
(22,52,0)
(57,39,0)
(58,39,0)
(8,60,0)
(4,39,0)
(35,56,0)
(34,60,0)
(31,54,0)
(56,23,0)
(43,20,0)
(40,44,0)
(49,11,0)
(55,19,0)
(27,18,0)
(60,8,0)
(58,14,0)
(32,61,0)
(57,30,0)
(19,41,0)
(47,19,0)
(60,12,0)
(54,55,0)
(13,27,0)
(33,20,0)
(6,12,0)
(27,61,0)
(22,55,0)
(9,61,0)
(0,44,0)
(46,14,0)
(3,9,0)
(40,23,0)
(49,5,0)
(20,61,0)
(19,8,0)
(12,60,0)
(23,39,0)
(51,58,0)
(26,23,0)
(22,57,0)
(25,54,0)
(53,39,0)
(18,60,0)
(24,39,0)
(14,58,0)
(55,54,0)
(38,39,0)
(10,48,0)
(42,39,0)
(52,5,0)
(48,58,0)
(17,30,0)
(29,56,0)
(5,52,0)
(20,49,0)
(60,18,0)
(5,48,0)
(50,8,0)
(30,7,0)
(14,7,0)
(57,30,1)
(20,61,1)
(52,22,1)
(14,46,1)
(2,48,1)
(8,60,1)
(27,1,1)
(56,23,1)
(28,56,1)
(60,12,1)
(34,12,1)
(56,35,1)
(13,12,1)
(46,51,1)
(10,20,1)
(1,13,1)
(30,17,1)
(44,41,1)
(61,21,1)
(27,61,1)
(6,16,1)
(26,58,1)
(19,8,1)
(60,34,1)
(9,61,1)
(19,41,1)
(5,48,1)
(48,58,1)
(33,56,1)
(12,61,1)
(5,52,1)
(49,5,1)
(23,40,1)
(21,32,1)
(59,44,1)
(56,61,1)
(35,29,1)
(43,33,1)
(9,3,1)
(31,25,1)
(40,59,1)
(20,37,1)
(48,10,1)
(30,7,1)
(12,6,1)
(54,41,1)
(29,9,1)
(40,44,1)
(18,45,1)
(22,55,1)
(15,0,1)
(51,57,1)
(3,49,1)
(17,36,1)
(44,15,1)
(32,23,1)
(18,27,1)
(45,27,1)
(20,43,1)
(54,31,1)
(50,47,1)
(0,26,1)
(16,50,1)
(25,2,1)
(47,54,1)
(22,57,1)
(60,18,1)
(55,19,1)
(58,14,1)
(29,61,1)
(55,54,1)
(14,7,1)
(31,56,2)
(60,18,2)
(3,56,2)
(52,56,2)
(9,56,2)
(22,56,2)
(48,56,2)
(50,56,2)
(58,14,2)
(55,56,2)
(27,12,2)
(44,41,2)
(5,48,2)
(1,12,2)
(55,19,2)
(22,55,2)
(8,56,2)
(54,41,2)
(45,12,2)
(49,56,2)
(20,61,2)
(60,56,2)
(16,56,2)
(52,22,2)
(8,60,2)
(60,12,2)
(57,30,2)
(18,27,2)
(2,56,2)
(20,56,2)
(49,5,2)
(40,44,2)
(47,56,2)
(9,61,2)
(56,61,2)
(55,54,2)
(43,56,2)
(33,56,2)
(5,56,2)
(14,7,2)
(48,58,2)
(5,52,2)
(6,56,2)
(22,57,2)
(23,40,2)
(54,56,2)
(56,23,2)
(18,12,2)
(13,12,2)
(20,37,2)
(10,56,2)
(29,56,2)
(27,61,2)
(35,56,2)
(30,7,2)
(25,56,2)
(19,41,2)
(12,61,2)
(34,12,2)
(19,8,2)
(12,56,2)
(19,56,2)
(56,56,2)
-----------------------------------
(0,3)
(1,2)
(2,expn)
(3,bandno)
(4,bandno)
(5,JPC_QCX_MANT(mant)
(6,0)
(7,uint_fast16_t refstepsize)
(8,1 - ((bandno > 0)
(9,++bandno)
(10,mant)
(11,)
(12,bandno > 0)
(13,bandno)
(14,JPC_QCX_GETMANT(refstepsize)
(15,numrlvls)
(16,bandno)
(17,refstepsize)
(18,(bandno + 2)
(19,numrlvls - 1 - ((bandno > 0)
(20,stepsizes[bandno])
(21,0)
(22,expn +\\n\\t\\t  (numrlvls - 1)
(23,numbands = 3 * numrlvls - 2)
(24,expn)
(25,numrlvls)
(26,numbands)
(27,bandno + 2)
(28,RET)
(29,bandno)
(30,JPC_QCX_GETEXPN(refstepsize)
(31,1)
(32,bandno)
(33,stepsizes)
(34,0)
(35,numbands)
(36,expn)
(37,uint_fast16_t *stepsizes)
(38,mant)
(39,)
(40,3 * numrlvls - 2)
(41,int numrlvls)
(42,numbands)
(43,bandno)
(44,3 * numrlvls)
(45,3)
(46,refstepsize)
(47,numrlvls)
(48,JPC_QCX_MANT(mant)
(49,stepsizes[bandno] = JPC_QCX_MANT(mant)
(50,1)
(51,mant)
(52,JPC_QCX_EXPN(expn +\\n\\t\\t  (numrlvls - 1)
(53,for (bandno = 0; bandno < numbands; ++bandno)
(54,numrlvls - 1)
(55,(numrlvls - 1)
(56,bandno < numbands)
(57,expn = JPC_QCX_GETEXPN(refstepsize)
(58,mant = JPC_QCX_GETMANT(refstepsize)
(59,2)
(60,(bandno > 0)
(61,bandno = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
