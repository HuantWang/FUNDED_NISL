-----label-----
1
-----code-----
void t2p_read_tiff_size(T2P* t2p, TIFF* input){

	uint64* sbc=NULL;
#if defined(JPEG_SUPPORT) || defined (OJPEG_SUPPORT)
	unsigned char* jpt=NULL;
	tstrip_t i=0;
	tstrip_t stripcount=0;
#endif
        uint64 k = 0;

	if(t2p->pdf_transcode == T2P_TRANSCODE_RAW){
#ifdef CCITT_SUPPORT
		if(t2p->pdf_compression == T2P_COMPRESS_G4 ){
			TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc);
            if (sbc[0] != (uint64)(tmsize_t)sbc[0]) {
                TIFFError(TIFF2PDF_MODULE, "Integer overflow");
                t2p->t2p_error = T2P_ERR_ERROR;
            }
			t2p->tiff_datasize=(tmsize_t)sbc[0];
			return;
		}
#endif
#ifdef ZIP_SUPPORT
		if(t2p->pdf_compression == T2P_COMPRESS_ZIP){
			TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc);
            if (sbc[0] != (uint64)(tmsize_t)sbc[0]) {
                TIFFError(TIFF2PDF_MODULE, "Integer overflow");
                t2p->t2p_error = T2P_ERR_ERROR;
            }
			t2p->tiff_datasize=(tmsize_t)sbc[0];
			return;
		}
#endif
#ifdef OJPEG_SUPPORT
		if(t2p->tiff_compression == COMPRESSION_OJPEG){
			if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)){
				TIFFError(TIFF2PDF_MODULE, 
					"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",
					TIFFFileName(input));
				t2p->t2p_error = T2P_ERR_ERROR;
				return;
			}
			stripcount=TIFFNumberOfStrips(input);
			for(i=0;i<stripcount;i++){
				k = checkAdd64(k, sbc[i], t2p);
			}
			if(TIFFGetField(input, TIFFTAG_JPEGIFOFFSET, &(t2p->tiff_dataoffset))){
				if(t2p->tiff_dataoffset != 0){
					if(TIFFGetField(input, TIFFTAG_JPEGIFBYTECOUNT, &(t2p->tiff_datasize))!=0){
						if((uint64)t2p->tiff_datasize < k) {
							TIFFWarning(TIFF2PDF_MODULE, 
								"Input file %s has short JPEG interchange file byte count", 
								TIFFFileName(input));
							t2p->pdf_ojpegiflength=t2p->tiff_datasize;
							k = checkAdd64(k, t2p->tiff_datasize, t2p);
							k = checkAdd64(k, 6, t2p);
							k = checkAdd64(k, stripcount, t2p);
							k = checkAdd64(k, stripcount, t2p);
							t2p->tiff_datasize = (tsize_t) k;
							if ((uint64) t2p->tiff_datasize != k) {
								TIFFError(TIFF2PDF_MODULE, "Integer overflow");
								t2p->t2p_error = T2P_ERR_ERROR;
							}
							return;
						}
						return;
					}else {
						TIFFError(TIFF2PDF_MODULE, 
							"Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT",
							TIFFFileName(input));
							t2p->t2p_error = T2P_ERR_ERROR;
							return;
					}
				}
			}
			k = checkAdd64(k, stripcount, t2p);
			k = checkAdd64(k, stripcount, t2p);
			k = checkAdd64(k, 2048, t2p);
			t2p->tiff_datasize = (tsize_t) k;
			if ((uint64) t2p->tiff_datasize != k) {
				TIFFError(TIFF2PDF_MODULE, "Integer overflow");
				t2p->t2p_error = T2P_ERR_ERROR;
			}
			return;
		}
#endif
#ifdef JPEG_SUPPORT
		if(t2p->tiff_compression == COMPRESSION_JPEG) {
			uint32 count = 0;
			if(TIFFGetField(input, TIFFTAG_JPEGTABLES, &count, &jpt) != 0 ){
				if(count > 4){
					k += count;
					k -= 2; /* don't use EOI of header */
				}
			} else {
				k = 2; /* SOI for first strip */
			}
			stripcount=TIFFNumberOfStrips(input);
			if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)){
				TIFFError(TIFF2PDF_MODULE, 
					"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",
					TIFFFileName(input));
				t2p->t2p_error = T2P_ERR_ERROR;
				return;
			}
			for(i=0;i<stripcount;i++){
				k = checkAdd64(k, sbc[i], t2p);
				k -=2; /* don't use EOI of strip */
				k +=2; /* add space for restart marker */
			}
			k = checkAdd64(k, 2, t2p); /* use EOI of last strip */
			k = checkAdd64(k, 6, t2p); /* for DRI marker of first strip */
			t2p->tiff_datasize = (tsize_t) k;
			if ((uint64) t2p->tiff_datasize != k) {
				TIFFError(TIFF2PDF_MODULE, "Integer overflow");
				t2p->t2p_error = T2P_ERR_ERROR;
			}
			return;
		}
#endif
		(void) 0;
	}
	k = checkMultiply64(TIFFScanlineSize(input), t2p->tiff_length, t2p);
	if(t2p->tiff_planar==PLANARCONFIG_SEPARATE){
		k = checkMultiply64(k, t2p->tiff_samplesperpixel, t2p);
	}
	if (k == 0) {
		/* Assume we had overflow inside TIFFScanlineSize */
		t2p->t2p_error = T2P_ERR_ERROR;
	}

	t2p->tiff_datasize = (tsize_t) k;
	if ((uint64) t2p->tiff_datasize != k) {
		TIFFError(TIFF2PDF_MODULE, "Integer overflow");
		t2p->t2p_error = T2P_ERR_ERROR;
	}

	return;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
34,35
36,37
36,38
37,38
37,39
38,39
38,40
39,40
42,43
44,45
45,46
46,47
46,48
47,48
47,49
51,52
52,53
52,54
53,54
55,56
55,57
55,58
55,59
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
67,68
69,70
69,71
70,71
70,72
71,72
71,73
72,73
75,76
77,78
78,79
79,80
79,81
80,81
82,83
82,84
82,85
82,86
83,84
85,86
87,88
87,89
88,89
91,92
93,94
93,95
94,95
94,96
95,96
98,99
99,100
100,101
100,102
101,102
101,103
102,103
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
114,116
115,116
118,119
120,121
120,122
121,122
121,123
122,123
122,124
123,124
123,125
124,125
127,128
127,129
128,129
131,132
133,134
133,135
134,135
135,136
135,137
135,138
136,137
138,139
141,142
142,143
142,144
143,144
143,145
144,145
147,148
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,27,31,33,35,40,41,43,48,49,50,54,57,60,62,65,66,68,73,74,76,81,84,86,89,90,92,96,97,103,104,106,111,112,116,117,119,125,126,129,130,132,137,139,140,145,146,148,149
-----computeFrom-----
37,38
37,39
52,53
52,54
70,71
70,72
79,80
79,81
94,95
94,96
100,101
100,102
108,109
108,110
121,122
121,123
142,143
142,144
-----guardedBy-----
73,92
129,145
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;
-----ast_node-----
void t2p_read_tiff_size(T2P* t2p, TIFF* input){	uint64* sbc=NULL;#if defined(JPEG_SUPPORT) || defined (OJPEG_SUPPORT)	unsigned char* jpt=NULL;	tstrip_t i=0;	tstrip_t stripcount=0;#endif        uint64 k = 0;	if(t2p->pdf_transcode == T2P_TRANSCODE_RAW){#ifdef CCITT_SUPPORT		if(t2p->pdf_compression == T2P_COMPRESS_G4 ){			TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc);            if (sbc[0] != (uint64)(tmsize_t)sbc[0]) {                TIFFError(TIFF2PDF_MODULE, "Integer overflow");                t2p->t2p_error = T2P_ERR_ERROR;            }			t2p->tiff_datasize=(tmsize_t)sbc[0];			return;		}#endif#ifdef ZIP_SUPPORT		if(t2p->pdf_compression == T2P_COMPRESS_ZIP){			TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc);            if (sbc[0] != (uint64)(tmsize_t)sbc[0]) {                TIFFError(TIFF2PDF_MODULE, "Integer overflow");                t2p->t2p_error = T2P_ERR_ERROR;            }			t2p->tiff_datasize=(tmsize_t)sbc[0];			return;		}#endif#ifdef OJPEG_SUPPORT		if(t2p->tiff_compression == COMPRESSION_OJPEG){			if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)){				TIFFError(TIFF2PDF_MODULE, 					"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",					TIFFFileName(input));				t2p->t2p_error = T2P_ERR_ERROR;				return;			}			stripcount=TIFFNumberOfStrips(input);			for(i=0;i<stripcount;i++){				k = checkAdd64(k, sbc[i], t2p);			}			if(TIFFGetField(input, TIFFTAG_JPEGIFOFFSET, &(t2p->tiff_dataoffset))){				if(t2p->tiff_dataoffset != 0){					if(TIFFGetField(input, TIFFTAG_JPEGIFBYTECOUNT, &(t2p->tiff_datasize))!=0){						if((uint64)t2p->tiff_datasize < k) {							TIFFWarning(TIFF2PDF_MODULE, 								"Input file %s has short JPEG interchange file byte count", 								TIFFFileName(input));							t2p->pdf_ojpegiflength=t2p->tiff_datasize;							k = checkAdd64(k, t2p->tiff_datasize, t2p);							k = checkAdd64(k, 6, t2p);							k = checkAdd64(k, stripcount, t2p);							k = checkAdd64(k, stripcount, t2p);							t2p->tiff_datasize = (tsize_t) k;							if ((uint64) t2p->tiff_datasize != k) {								TIFFError(TIFF2PDF_MODULE, "Integer overflow");								t2p->t2p_error = T2P_ERR_ERROR;							}							return;						}						return;					}else {						TIFFError(TIFF2PDF_MODULE, 							"Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT",							TIFFFileName(input));							t2p->t2p_error = T2P_ERR_ERROR;							return;					}				}			}			k = checkAdd64(k, stripcount, t2p);			k = checkAdd64(k, stripcount, t2p);			k = checkAdd64(k, 2048, t2p);			t2p->tiff_datasize = (tsize_t) k;			if ((uint64) t2p->tiff_datasize != k) {				TIFFError(TIFF2PDF_MODULE, "Integer overflow");				t2p->t2p_error = T2P_ERR_ERROR;			}			return;		}#endif#ifdef JPEG_SUPPORT		if(t2p->tiff_compression == COMPRESSION_JPEG) {			uint32 count = 0;			if(TIFFGetField(input, TIFFTAG_JPEGTABLES, &count, &jpt) != 0 ){				if(count > 4){					k += count;					k -= 2; /* don't use EOI of header */				}			} else {				k = 2; /* SOI for first strip */			}			stripcount=TIFFNumberOfStrips(input);			if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)){				TIFFError(TIFF2PDF_MODULE, 					"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",					TIFFFileName(input));				t2p->t2p_error = T2P_ERR_ERROR;				return;			}			for(i=0;i<stripcount;i++){				k = checkAdd64(k, sbc[i], t2p);				k -=2; /* don't use EOI of strip */				k +=2; /* add space for restart marker */			}			k = checkAdd64(k, 2, t2p); /* use EOI of last strip */			k = checkAdd64(k, 6, t2p); /* for DRI marker of first strip */			t2p->tiff_datasize = (tsize_t) k;			if ((uint64) t2p->tiff_datasize != k) {				TIFFError(TIFF2PDF_MODULE, "Integer overflow");				t2p->t2p_error = T2P_ERR_ERROR;			}			return;		}#endif		(void) 0;	}	k = checkMultiply64(TIFFScanlineSize(input), t2p->tiff_length, t2p);	if(t2p->tiff_planar==PLANARCONFIG_SEPARATE){		k = checkMultiply64(k, t2p->tiff_samplesperpixel, t2p);	}	if (k == 0) {		/* Assume we had overflow inside TIFFScanlineSize */		t2p->t2p_error = T2P_ERR_ERROR;	}	t2p->tiff_datasize = (tsize_t) k;	if ((uint64) t2p->tiff_datasize != k) {		TIFFError(TIFF2PDF_MODULE, "Integer overflow");		t2p->t2p_error = T2P_ERR_ERROR;	}	return;}
void
t2p_read_tiff_size(T2P* t2p, TIFF* input)
t2p_read_tiff_size
T2P* t2p
T2P
T2P
* t2p
*
t2p
TIFF* input
TIFF
TIFF
* input
*
input
{	uint64* sbc=NULL;#if defined(JPEG_SUPPORT) || defined (OJPEG_SUPPORT)	unsigned char* jpt=NULL;	tstrip_t i=0;	tstrip_t stripcount=0;#endif        uint64 k = 0;	if(t2p->pdf_transcode == T2P_TRANSCODE_RAW){#ifdef CCITT_SUPPORT		if(t2p->pdf_compression == T2P_COMPRESS_G4 ){			TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc);            if (sbc[0] != (uint64)(tmsize_t)sbc[0]) {                TIFFError(TIFF2PDF_MODULE, "Integer overflow");                t2p->t2p_error = T2P_ERR_ERROR;            }			t2p->tiff_datasize=(tmsize_t)sbc[0];			return;		}#endif#ifdef ZIP_SUPPORT		if(t2p->pdf_compression == T2P_COMPRESS_ZIP){			TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc);            if (sbc[0] != (uint64)(tmsize_t)sbc[0]) {                TIFFError(TIFF2PDF_MODULE, "Integer overflow");                t2p->t2p_error = T2P_ERR_ERROR;            }			t2p->tiff_datasize=(tmsize_t)sbc[0];			return;		}#endif#ifdef OJPEG_SUPPORT		if(t2p->tiff_compression == COMPRESSION_OJPEG){			if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)){				TIFFError(TIFF2PDF_MODULE, 					"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",					TIFFFileName(input));				t2p->t2p_error = T2P_ERR_ERROR;				return;			}			stripcount=TIFFNumberOfStrips(input);			for(i=0;i<stripcount;i++){				k = checkAdd64(k, sbc[i], t2p);			}			if(TIFFGetField(input, TIFFTAG_JPEGIFOFFSET, &(t2p->tiff_dataoffset))){				if(t2p->tiff_dataoffset != 0){					if(TIFFGetField(input, TIFFTAG_JPEGIFBYTECOUNT, &(t2p->tiff_datasize))!=0){						if((uint64)t2p->tiff_datasize < k) {							TIFFWarning(TIFF2PDF_MODULE, 								"Input file %s has short JPEG interchange file byte count", 								TIFFFileName(input));							t2p->pdf_ojpegiflength=t2p->tiff_datasize;							k = checkAdd64(k, t2p->tiff_datasize, t2p);							k = checkAdd64(k, 6, t2p);							k = checkAdd64(k, stripcount, t2p);							k = checkAdd64(k, stripcount, t2p);							t2p->tiff_datasize = (tsize_t) k;							if ((uint64) t2p->tiff_datasize != k) {								TIFFError(TIFF2PDF_MODULE, "Integer overflow");								t2p->t2p_error = T2P_ERR_ERROR;							}							return;						}						return;					}else {						TIFFError(TIFF2PDF_MODULE, 							"Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT",							TIFFFileName(input));							t2p->t2p_error = T2P_ERR_ERROR;							return;					}				}			}			k = checkAdd64(k, stripcount, t2p);			k = checkAdd64(k, stripcount, t2p);			k = checkAdd64(k, 2048, t2p);			t2p->tiff_datasize = (tsize_t) k;			if ((uint64) t2p->tiff_datasize != k) {				TIFFError(TIFF2PDF_MODULE, "Integer overflow");				t2p->t2p_error = T2P_ERR_ERROR;			}			return;		}#endif#ifdef JPEG_SUPPORT		if(t2p->tiff_compression == COMPRESSION_JPEG) {			uint32 count = 0;			if(TIFFGetField(input, TIFFTAG_JPEGTABLES, &count, &jpt) != 0 ){				if(count > 4){					k += count;					k -= 2; /* don't use EOI of header */				}			} else {				k = 2; /* SOI for first strip */			}			stripcount=TIFFNumberOfStrips(input);			if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)){				TIFFError(TIFF2PDF_MODULE, 					"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",					TIFFFileName(input));				t2p->t2p_error = T2P_ERR_ERROR;				return;			}			for(i=0;i<stripcount;i++){				k = checkAdd64(k, sbc[i], t2p);				k -=2; /* don't use EOI of strip */				k +=2; /* add space for restart marker */			}			k = checkAdd64(k, 2, t2p); /* use EOI of last strip */			k = checkAdd64(k, 6, t2p); /* for DRI marker of first strip */			t2p->tiff_datasize = (tsize_t) k;			if ((uint64) t2p->tiff_datasize != k) {				TIFFError(TIFF2PDF_MODULE, "Integer overflow");				t2p->t2p_error = T2P_ERR_ERROR;			}			return;		}#endif		(void) 0;	}	k = checkMultiply64(TIFFScanlineSize(input), t2p->tiff_length, t2p);	if(t2p->tiff_planar==PLANARCONFIG_SEPARATE){		k = checkMultiply64(k, t2p->tiff_samplesperpixel, t2p);	}	if (k == 0) {		/* Assume we had overflow inside TIFFScanlineSize */		t2p->t2p_error = T2P_ERR_ERROR;	}	t2p->tiff_datasize = (tsize_t) k;	if ((uint64) t2p->tiff_datasize != k) {		TIFFError(TIFF2PDF_MODULE, "Integer overflow");		t2p->t2p_error = T2P_ERR_ERROR;	}	return;}
uint64* sbc=NULL;
uint64* sbc=NULL;
uint64
uint64
* sbc=NULL
*
sbc
=NULL
NULL
NULL
uint64 k = 0;
uint64 k = 0;
uint64
uint64
k = 0
k
= 0
0
if(t2p->pdf_transcode == T2P_TRANSCODE_RAW){#ifdef CCITT_SUPPORT		if(t2p->pdf_compression == T2P_COMPRESS_G4 ){			TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc);            if (sbc[0] != (uint64)(tmsize_t)sbc[0]) {                TIFFError(TIFF2PDF_MODULE, "Integer overflow");                t2p->t2p_error = T2P_ERR_ERROR;            }			t2p->tiff_datasize=(tmsize_t)sbc[0];			return;		}#endif#ifdef ZIP_SUPPORT		if(t2p->pdf_compression == T2P_COMPRESS_ZIP){			TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc);            if (sbc[0] != (uint64)(tmsize_t)sbc[0]) {                TIFFError(TIFF2PDF_MODULE, "Integer overflow");                t2p->t2p_error = T2P_ERR_ERROR;            }			t2p->tiff_datasize=(tmsize_t)sbc[0];			return;		}#endif#ifdef OJPEG_SUPPORT		if(t2p->tiff_compression == COMPRESSION_OJPEG){			if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)){				TIFFError(TIFF2PDF_MODULE, 					"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",					TIFFFileName(input));				t2p->t2p_error = T2P_ERR_ERROR;				return;			}			stripcount=TIFFNumberOfStrips(input);			for(i=0;i<stripcount;i++){				k = checkAdd64(k, sbc[i], t2p);			}			if(TIFFGetField(input, TIFFTAG_JPEGIFOFFSET, &(t2p->tiff_dataoffset))){				if(t2p->tiff_dataoffset != 0){					if(TIFFGetField(input, TIFFTAG_JPEGIFBYTECOUNT, &(t2p->tiff_datasize))!=0){						if((uint64)t2p->tiff_datasize < k) {							TIFFWarning(TIFF2PDF_MODULE, 								"Input file %s has short JPEG interchange file byte count", 								TIFFFileName(input));							t2p->pdf_ojpegiflength=t2p->tiff_datasize;							k = checkAdd64(k, t2p->tiff_datasize, t2p);							k = checkAdd64(k, 6, t2p);							k = checkAdd64(k, stripcount, t2p);							k = checkAdd64(k, stripcount, t2p);							t2p->tiff_datasize = (tsize_t) k;							if ((uint64) t2p->tiff_datasize != k) {								TIFFError(TIFF2PDF_MODULE, "Integer overflow");								t2p->t2p_error = T2P_ERR_ERROR;							}							return;						}						return;					}else {						TIFFError(TIFF2PDF_MODULE, 							"Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT",							TIFFFileName(input));							t2p->t2p_error = T2P_ERR_ERROR;							return;					}				}			}			k = checkAdd64(k, stripcount, t2p);			k = checkAdd64(k, stripcount, t2p);			k = checkAdd64(k, 2048, t2p);			t2p->tiff_datasize = (tsize_t) k;			if ((uint64) t2p->tiff_datasize != k) {				TIFFError(TIFF2PDF_MODULE, "Integer overflow");				t2p->t2p_error = T2P_ERR_ERROR;			}			return;		}#endif#ifdef JPEG_SUPPORT		if(t2p->tiff_compression == COMPRESSION_JPEG) {			uint32 count = 0;			if(TIFFGetField(input, TIFFTAG_JPEGTABLES, &count, &jpt) != 0 ){				if(count > 4){					k += count;					k -= 2; /* don't use EOI of header */				}			} else {				k = 2; /* SOI for first strip */			}			stripcount=TIFFNumberOfStrips(input);			if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)){				TIFFError(TIFF2PDF_MODULE, 					"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",					TIFFFileName(input));				t2p->t2p_error = T2P_ERR_ERROR;				return;			}			for(i=0;i<stripcount;i++){				k = checkAdd64(k, sbc[i], t2p);				k -=2; /* don't use EOI of strip */				k +=2; /* add space for restart marker */			}			k = checkAdd64(k, 2, t2p); /* use EOI of last strip */			k = checkAdd64(k, 6, t2p); /* for DRI marker of first strip */			t2p->tiff_datasize = (tsize_t) k;			if ((uint64) t2p->tiff_datasize != k) {				TIFFError(TIFF2PDF_MODULE, "Integer overflow");				t2p->t2p_error = T2P_ERR_ERROR;			}			return;		}#endif		(void) 0;	}
t2p->pdf_transcode == T2P_TRANSCODE_RAW
t2p->pdf_transcode
t2p
t2p
pdf_transcode
T2P_TRANSCODE_RAW
T2P_TRANSCODE_RAW
{#ifdef CCITT_SUPPORT		if(t2p->pdf_compression == T2P_COMPRESS_G4 ){			TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc);            if (sbc[0] != (uint64)(tmsize_t)sbc[0]) {                TIFFError(TIFF2PDF_MODULE, "Integer overflow");                t2p->t2p_error = T2P_ERR_ERROR;            }			t2p->tiff_datasize=(tmsize_t)sbc[0];			return;		}#endif#ifdef ZIP_SUPPORT		if(t2p->pdf_compression == T2P_COMPRESS_ZIP){			TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc);            if (sbc[0] != (uint64)(tmsize_t)sbc[0]) {                TIFFError(TIFF2PDF_MODULE, "Integer overflow");                t2p->t2p_error = T2P_ERR_ERROR;            }			t2p->tiff_datasize=(tmsize_t)sbc[0];			return;		}#endif#ifdef OJPEG_SUPPORT		if(t2p->tiff_compression == COMPRESSION_OJPEG){			if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)){				TIFFError(TIFF2PDF_MODULE, 					"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",					TIFFFileName(input));				t2p->t2p_error = T2P_ERR_ERROR;				return;			}			stripcount=TIFFNumberOfStrips(input);			for(i=0;i<stripcount;i++){				k = checkAdd64(k, sbc[i], t2p);			}			if(TIFFGetField(input, TIFFTAG_JPEGIFOFFSET, &(t2p->tiff_dataoffset))){				if(t2p->tiff_dataoffset != 0){					if(TIFFGetField(input, TIFFTAG_JPEGIFBYTECOUNT, &(t2p->tiff_datasize))!=0){						if((uint64)t2p->tiff_datasize < k) {							TIFFWarning(TIFF2PDF_MODULE, 								"Input file %s has short JPEG interchange file byte count", 								TIFFFileName(input));							t2p->pdf_ojpegiflength=t2p->tiff_datasize;							k = checkAdd64(k, t2p->tiff_datasize, t2p);							k = checkAdd64(k, 6, t2p);							k = checkAdd64(k, stripcount, t2p);							k = checkAdd64(k, stripcount, t2p);							t2p->tiff_datasize = (tsize_t) k;							if ((uint64) t2p->tiff_datasize != k) {								TIFFError(TIFF2PDF_MODULE, "Integer overflow");								t2p->t2p_error = T2P_ERR_ERROR;							}							return;						}						return;					}else {						TIFFError(TIFF2PDF_MODULE, 							"Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT",							TIFFFileName(input));							t2p->t2p_error = T2P_ERR_ERROR;							return;					}				}			}			k = checkAdd64(k, stripcount, t2p);			k = checkAdd64(k, stripcount, t2p);			k = checkAdd64(k, 2048, t2p);			t2p->tiff_datasize = (tsize_t) k;			if ((uint64) t2p->tiff_datasize != k) {				TIFFError(TIFF2PDF_MODULE, "Integer overflow");				t2p->t2p_error = T2P_ERR_ERROR;			}			return;		}#endif#ifdef JPEG_SUPPORT		if(t2p->tiff_compression == COMPRESSION_JPEG) {			uint32 count = 0;			if(TIFFGetField(input, TIFFTAG_JPEGTABLES, &count, &jpt) != 0 ){				if(count > 4){					k += count;					k -= 2; /* don't use EOI of header */				}			} else {				k = 2; /* SOI for first strip */			}			stripcount=TIFFNumberOfStrips(input);			if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)){				TIFFError(TIFF2PDF_MODULE, 					"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",					TIFFFileName(input));				t2p->t2p_error = T2P_ERR_ERROR;				return;			}			for(i=0;i<stripcount;i++){				k = checkAdd64(k, sbc[i], t2p);				k -=2; /* don't use EOI of strip */				k +=2; /* add space for restart marker */			}			k = checkAdd64(k, 2, t2p); /* use EOI of last strip */			k = checkAdd64(k, 6, t2p); /* for DRI marker of first strip */			t2p->tiff_datasize = (tsize_t) k;			if ((uint64) t2p->tiff_datasize != k) {				TIFFError(TIFF2PDF_MODULE, "Integer overflow");				t2p->t2p_error = T2P_ERR_ERROR;			}			return;		}#endif		(void) 0;	}
(void) 0;
(void) 0
void
void

0
k = checkMultiply64(TIFFScanlineSize(input), t2p->tiff_length, t2p);
k = checkMultiply64(TIFFScanlineSize(input), t2p->tiff_length, t2p)
k
k
checkMultiply64(TIFFScanlineSize(input), t2p->tiff_length, t2p)
checkMultiply64
checkMultiply64
TIFFScanlineSize(input)
TIFFScanlineSize
TIFFScanlineSize
input
input
t2p->tiff_length
t2p
t2p
tiff_length
t2p
t2p
if(t2p->tiff_planar==PLANARCONFIG_SEPARATE){		k = checkMultiply64(k, t2p->tiff_samplesperpixel, t2p);	}
t2p->tiff_planar==PLANARCONFIG_SEPARATE
t2p->tiff_planar
t2p
t2p
tiff_planar
PLANARCONFIG_SEPARATE
PLANARCONFIG_SEPARATE
{		k = checkMultiply64(k, t2p->tiff_samplesperpixel, t2p);	}
k = checkMultiply64(k, t2p->tiff_samplesperpixel, t2p);
k = checkMultiply64(k, t2p->tiff_samplesperpixel, t2p)
k
k
checkMultiply64(k, t2p->tiff_samplesperpixel, t2p)
checkMultiply64
checkMultiply64
k
k
t2p->tiff_samplesperpixel
t2p
t2p
tiff_samplesperpixel
t2p
t2p
if (k == 0) {		/* Assume we had overflow inside TIFFScanlineSize */		t2p->t2p_error = T2P_ERR_ERROR;	}
k == 0
k
k
0
{		/* Assume we had overflow inside TIFFScanlineSize */		t2p->t2p_error = T2P_ERR_ERROR;	}
t2p->t2p_error = T2P_ERR_ERROR;
t2p->t2p_error = T2P_ERR_ERROR
t2p->t2p_error
t2p
t2p
t2p_error
T2P_ERR_ERROR
T2P_ERR_ERROR
t2p->tiff_datasize = (tsize_t) k;
t2p->tiff_datasize = (tsize_t) k
t2p->tiff_datasize
t2p
t2p
tiff_datasize
(tsize_t) k
tsize_t
tsize_t
tsize_t

k
k
if ((uint64) t2p->tiff_datasize != k) {		TIFFError(TIFF2PDF_MODULE, "Integer overflow");		t2p->t2p_error = T2P_ERR_ERROR;	}
(uint64) t2p->tiff_datasize != k
(uint64) t2p->tiff_datasize
uint64
uint64
uint64

t2p->tiff_datasize
t2p
t2p
tiff_datasize
k
k
{		TIFFError(TIFF2PDF_MODULE, "Integer overflow");		t2p->t2p_error = T2P_ERR_ERROR;	}
TIFFError(TIFF2PDF_MODULE, "Integer overflow");
TIFFError(TIFF2PDF_MODULE, "Integer overflow")
TIFFError
TIFFError
TIFF2PDF_MODULE
TIFF2PDF_MODULE
"Integer overflow"
t2p->t2p_error = T2P_ERR_ERROR;
t2p->t2p_error = T2P_ERR_ERROR
t2p->t2p_error
t2p
t2p
t2p_error
T2P_ERR_ERROR
T2P_ERR_ERROR
return;
-----joern-----
(125,478,0)
(11,74,0)
(343,105,0)
(456,87,0)
(139,497,0)
(171,63,0)
(217,37,0)
(163,46,0)
(466,353,0)
(171,289,0)
(114,353,0)
(408,75,0)
(111,88,0)
(112,414,0)
(10,441,0)
(229,42,0)
(93,407,0)
(42,261,0)
(74,219,0)
(456,261,0)
(369,64,0)
(199,466,0)
(240,219,0)
(10,219,0)
(292,219,0)
(222,61,0)
(288,163,0)
(32,204,0)
(133,352,0)
(464,219,0)
(168,15,0)
(491,282,0)
(16,197,0)
(198,231,0)
(502,102,0)
(382,413,0)
(396,28,0)
(157,219,0)
(468,423,0)
(493,439,0)
(365,219,0)
(365,135,0)
(459,416,0)
(5,247,0)
(286,292,0)
(71,428,0)
(164,261,0)
(325,332,0)
(439,219,0)
(320,176,0)
(499,284,0)
(345,394,0)
(348,283,0)
(115,209,0)
(348,93,0)
(32,261,0)
(492,409,0)
(455,291,0)
(447,164,0)
(172,36,0)
(141,163,0)
(209,115,0)
(334,219,0)
(444,437,0)
(164,121,0)
(294,287,0)
(187,132,0)
(164,180,0)
(306,467,0)
(57,181,0)
(242,108,0)
(395,261,0)
(45,224,0)
(137,79,0)
(330,132,0)
(221,284,0)
(457,125,0)
(254,397,0)
(122,215,0)
(495,431,0)
(91,343,0)
(213,454,0)
(195,464,0)
(500,94,0)
(425,247,0)
(308,61,0)
(128,261,0)
(432,492,0)
(309,462,0)
(445,200,0)
(317,12,0)
(449,273,0)
(291,13,0)
(494,325,0)
(20,353,0)
(65,134,0)
(235,499,0)
(386,209,0)
(70,418,0)
(102,282,0)
(76,91,0)
(134,132,0)
(191,32,0)
(374,217,0)
(145,221,0)
(375,157,0)
(359,38,0)
(182,79,0)
(397,229,0)
(211,139,0)
(329,233,0)
(487,28,0)
(2,74,0)
(272,219,0)
(24,272,0)
(380,64,0)
(418,132,0)
(298,107,0)
(68,102,0)
(333,159,0)
(183,132,0)
(149,307,0)
(377,346,0)
(291,378,0)
(53,401,0)
(501,300,0)
(239,502,0)
(173,452,0)
(331,341,0)
(147,194,0)
(215,414,0)
(171,246,0)
(454,346,0)
(395,357,0)
(366,332,0)
(227,395,0)
(320,247,0)
(431,495,0)
(291,189,0)
(157,13,0)
(54,325,0)
(338,135,0)
(80,280,0)
(31,261,0)
(300,209,0)
(3,197,0)
(368,79,0)
(51,219,0)
(96,266,0)
(233,219,0)
(218,219,0)
(194,147,0)
(135,365,0)
(126,415,0)
(346,454,0)
(223,401,0)
(325,98,0)
(238,121,0)
(441,41,0)
(101,332,0)
(317,273,0)
(14,74,0)
(147,275,0)
(467,306,0)
(0,408,0)
(203,283,0)
(258,107,0)
(206,116,0)
(54,428,0)
(98,325,0)
(12,317,0)
(52,409,0)
(56,348,0)
(277,134,0)
(334,440,0)
(114,309,0)
(148,219,0)
(272,356,0)
(492,200,0)
(262,204,0)
(181,219,0)
(117,116,0)
(246,188,0)
(107,258,0)
(35,88,0)
(60,50,0)
(65,299,0)
(117,219,0)
(448,157,0)
(114,287,0)
(38,219,0)
(163,219,0)
(490,219,0)
(343,205,0)
(45,219,0)
(404,41,0)
(304,218,0)
(369,490,0)
(214,94,0)
(87,456,0)
(389,456,0)
(381,254,0)
(179,397,0)
(412,261,0)
(251,130,0)
(270,332,0)
(88,218,0)
(451,115,0)
(94,174,0)
(456,280,0)
(41,93,0)
(236,377,0)
(310,245,0)
(439,490,0)
(170,31,0)
(305,41,0)
(128,159,0)
(189,291,0)
(69,128,0)
(36,450,0)
(73,240,0)
(222,382,0)
(372,320,0)
(146,132,0)
(442,312,0)
(147,443,0)
(114,398,0)
(485,9,0)
(269,463,0)
(247,320,0)
(391,497,0)
(494,219,0)
(357,395,0)
(438,117,0)
(49,497,0)
(152,332,0)
(230,176,0)
(441,132,0)
(29,471,0)
(408,219,0)
(466,497,0)
(411,264,0)
(88,111,0)
(361,50,0)
(431,421,0)
(41,441,0)
(39,353,0)
(427,299,0)
(55,132,0)
(171,104,0)
(278,224,0)
(28,120,0)
(384,439,0)
(171,380,0)
(127,132,0)
(486,275,0)
(430,377,0)
(31,277,0)
(355,132,0)
(434,204,0)
(392,440,0)
(299,427,0)
(316,468,0)
(428,54,0)
(297,145,0)
(113,261,0)
(46,332,0)
(108,312,0)
(417,215,0)
(415,194,0)
(370,190,0)
(388,233,0)
(436,120,0)
(222,479,0)
(209,79,0)
(98,452,0)
(175,440,0)
(382,263,0)
(264,345,0)
(81,14,0)
(397,135,0)
(321,300,0)
(300,378,0)
(138,442,0)
(258,219,0)
(344,54,0)
(148,306,0)
(376,188,0)
(484,23,0)
(26,128,0)
(114,410,0)
(181,376,0)
(428,173,0)
(398,1,0)
(378,300,0)
(35,378,0)
(162,229,0)
(117,229,0)
(371,309,0)
(481,471,0)
(471,219,0)
(115,229,0)
(93,440,0)
(429,42,0)
(245,225,0)
(357,292,0)
(177,64,0)
(502,51,0)
(139,414,0)
(143,115,0)
(292,357,0)
(283,348,0)
(42,229,0)
(287,85,0)
(346,219,0)
(314,176,0)
(241,117,0)
(171,370,0)
(25,167,0)
(477,93,0)
(236,93,0)
(206,345,0)
(303,61,0)
(109,98,0)
(185,261,0)
(88,35,0)
(89,332,0)
(144,173,0)
(186,456,0)
(210,202,0)
(167,64,0)
(466,46,0)
(315,379,0)
(139,465,0)
(54,219,0)
(342,134,0)
(454,219,0)
(460,240,0)
(37,217,0)
(490,369,0)
(275,134,0)
(467,116,0)
(131,231,0)
(113,346,0)
(470,466,0)
(75,174,0)
(208,423,0)
(78,219,0)
(414,332,0)
(322,65,0)
(17,414,0)
(422,231,0)
(282,401,0)
(498,114,0)
(266,247,0)
(339,113,0)
(328,117,0)
(61,222,0)
(354,442,0)
(13,79,0)
(275,147,0)
(90,216,0)
(197,283,0)
(450,332,0)
(223,134,0)
(495,134,0)
(463,72,0)
(397,254,0)
(440,377,0)
(401,223,0)
(243,45,0)
(443,147,0)
(135,64,0)
(129,435,0)
(283,203,0)
(21,376,0)
(98,109,0)
(431,427,0)
(490,497,0)
(440,219,0)
(232,247,0)
(263,382,0)
(363,490,0)
(118,398,0)
(256,378,0)
(231,131,0)
(413,382,0)
(44,483,0)
(480,356,0)
(440,93,0)
(345,206,0)
(197,441,0)
(476,264,0)
(130,219,0)
(467,351,0)
(97,478,0)
(218,88,0)
(349,51,0)
(353,465,0)
(116,117,0)
(248,148,0)
(289,409,0)
(410,114,0)
(427,431,0)
(121,134,0)
(280,456,0)
(301,397,0)
(398,114,0)
(490,439,0)
(252,217,0)
(410,202,0)
(271,427,0)
(390,132,0)
(268,148,0)
(140,466,0)
(41,377,0)
(247,425,0)
(254,64,0)
(433,341,0)
(50,72,0)
(285,54,0)
(249,79,0)
(74,497,0)
(318,27,0)
(83,190,0)
(502,239,0)
(279,369,0)
(496,145,0)
(130,87,0)
(341,373,0)
(450,412,0)
(364,78,0)
(43,132,0)
(233,119,0)
(165,365,0)
(446,9,0)
(115,14,0)
(378,79,0)
(136,490,0)
(296,202,0)
(471,205,0)
(228,452,0)
(124,72,0)
(9,225,0)
(345,264,0)
(9,229,0)
(247,261,0)
(452,332,0)
(7,273,0)
(200,492,0)
(204,188,0)
(19,131,0)
(231,219,0)
(399,65,0)
(435,219,0)
(415,219,0)
(420,225,0)
(47,412,0)
(437,463,0)
(36,202,0)
(106,28,0)
(282,196,0)
(15,281,0)
(207,273,0)
(234,495,0)
(247,266,0)
(74,14,0)
(253,202,0)
(220,425,0)
(30,494,0)
(426,44,0)
(205,343,0)
(337,410,0)
(62,410,0)
(311,35,0)
(265,25,0)
(110,395,0)
(351,467,0)
(155,216,0)
(466,287,0)
(161,142,0)
(154,38,0)
(244,494,0)
(401,497,0)
(216,134,0)
(86,115,0)
(103,317,0)
(478,219,0)
(382,222,0)
(309,1,0)
(120,134,0)
(424,31,0)
(145,219,0)
(405,75,0)
(171,43,0)
(479,222,0)
(38,379,0)
(14,79,0)
(335,454,0)
(387,334,0)
(142,64,0)
(13,291,0)
(4,287,0)
(67,225,0)
(306,64,0)
(423,468,0)
(224,373,0)
(102,497,0)
(158,478,0)
(326,37,0)
(25,219,0)
(410,134,0)
(212,44,0)
(116,64,0)
(193,292,0)
(437,219,0)
(51,502,0)
(277,31,0)
(184,98,0)
(204,32,0)
(63,79,0)
(347,236,0)
(237,499,0)
(453,132,0)
(41,305,0)
(92,78,0)
(452,163,0)
(362,236,0)
(352,50,0)
(114,219,0)
(346,113,0)
(276,91,0)
(478,125,0)
(421,431,0)
(66,408,0)
(28,396,0)
(343,91,0)
(400,258,0)
(77,46,0)
(293,418,0)
(461,55,0)
(167,240,0)
(299,65,0)
(180,164,0)
(151,275,0)
(406,139,0)
(302,10,0)
(31,336,0)
(40,206,0)
(216,263,0)
(50,352,0)
(475,142,0)
(340,437,0)
(393,416,0)
(28,261,0)
(458,258,0)
(87,130,0)
(23,128,0)
(74,282,0)
(226,277,0)
(34,74,0)
(419,393,0)
(482,10,0)
(425,414,0)
(352,261,0)
(169,365,0)
(403,336,0)
(290,25,0)
(200,261,0)
(121,164,0)
(319,166,0)
(283,197,0)
(185,142,0)
(473,401,0)
(48,116,0)
(173,428,0)
(153,459,0)
(489,272,0)
(218,13,0)
(360,210,0)
(115,219,0)
(119,233,0)
(313,281,0)
(171,270,0)
(356,272,0)
(488,114,0)
(428,71,0)
(469,309,0)
(394,345,0)
(264,219,0)
(466,219,0)
(402,273,0)
(346,377,0)
(397,219,0)
(365,369,0)
(274,181,0)
(260,15,0)
(295,397,0)
(490,282,0)
(240,167,0)
(100,423,0)
(18,130,0)
(324,462,0)
(82,334,0)
(377,132,0)
(255,462,0)
(412,450,0)
(104,336,0)
(401,219,0)
(205,336,0)
(23,134,0)
(46,466,0)
(84,223,0)
(61,134,0)
(142,185,0)
(78,108,0)
(123,435,0)
(435,393,0)
(263,216,0)
(114,497,0)
(163,452,0)
(194,159,0)
(150,164,0)
(257,51,0)
(178,346,0)
(6,450,0)
(462,398,0)
(171,333,0)
(350,221,0)
(22,464,0)
(358,365,0)
(383,300,0)
(466,309,0)
(497,132,0)
(117,254,0)
(95,119,0)
(8,223,0)
(464,52,0)
(353,139,0)
(192,332,0)
(401,282,0)
(120,28,0)
(217,219,0)
(462,1,0)
(105,343,0)
(423,219,0)
(201,415,0)
(102,502,0)
(474,36,0)
(223,225,0)
(267,134,0)
(197,219,0)
(171,124,0)
(176,132,0)
(367,185,0)
(259,467,0)
(440,334,0)
(379,483,0)
(327,459,0)
(58,492,0)
(348,377,0)
(33,52,0)
(323,163,0)
(99,45,0)
(300,219,0)
(281,160,0)
(74,229,0)
(156,55,0)
(472,218,0)
(128,23,0)
(427,271,0)
(385,132,0)
(229,79,0)
(264,306,0)
(250,159,0)
(59,495,0)
(91,134,0)
(15,219,0)
(114,219,1)
(467,259,1)
(167,240,1)
(88,218,1)
(326,217,1)
(432,280,1)
(257,349,1)
(377,346,1)
(107,298,1)
(125,457,1)
(466,140,1)
(276,471,1)
(134,342,1)
(139,497,1)
(39,20,1)
(398,114,1)
(91,76,1)
(499,235,1)
(412,47,1)
(365,369,1)
(201,126,1)
(171,370,1)
(93,440,1)
(171,43,1)
(288,323,1)
(265,290,1)
(466,287,1)
(178,454,1)
(396,28,1)
(128,261,1)
(277,226,1)
(65,134,1)
(467,351,1)
(399,31,1)
(58,432,1)
(210,360,1)
(57,204,1)
(223,134,1)
(335,113,1)
(147,443,1)
(130,18,1)
(164,261,1)
(350,145,1)
(328,241,1)
(91,134,1)
(343,91,1)
(301,295,1)
(338,369,1)
(240,460,1)
(459,327,1)
(374,125,1)
(231,198,1)
(345,394,1)
(300,219,1)
(467,116,1)
(430,317,1)
(456,87,1)
(150,37,1)
(410,202,1)
(74,497,1)
(260,236,1)
(209,115,1)
(46,466,1)
(346,113,1)
(0,66,1)
(395,261,1)
(6,287,1)
(26,69,1)
(280,456,1)
(240,219,1)
(431,421,1)
(380,206,1)
(50,352,1)
(362,347,1)
(34,81,1)
(175,477,1)
(427,271,1)
(299,427,1)
(346,219,1)
(437,219,1)
(155,90,1)
(485,446,1)
(172,210,1)
(425,414,1)
(168,260,1)
(476,411,1)
(68,502,1)
(444,340,1)
(184,494,1)
(270,224,1)
(128,23,1)
(98,452,1)
(256,209,1)
(112,356,1)
(440,219,1)
(77,36,1)
(186,389,1)
(218,13,1)
(440,334,1)
(230,134,1)
(210,202,1)
(410,134,1)
(478,219,1)
(163,288,1)
(6,215,1)
(36,202,1)
(117,229,1)
(37,217,1)
(222,479,1)
(23,134,1)
(115,14,1)
(391,49,1)
(223,8,1)
(370,102,1)
(78,92,1)
(181,219,1)
(397,135,1)
(233,219,1)
(138,206,1)
(158,97,1)
(291,455,1)
(456,261,1)
(422,497,1)
(299,65,1)
(135,365,1)
(169,358,1)
(140,199,1)
(215,417,1)
(279,167,1)
(423,219,1)
(113,339,1)
(295,381,1)
(437,444,1)
(356,480,1)
(415,219,1)
(302,236,1)
(41,404,1)
(218,472,1)
(380,108,1)
(435,129,1)
(464,219,1)
(293,176,1)
(263,382,1)
(316,423,1)
(300,209,1)
(73,25,1)
(310,282,1)
(171,380,1)
(114,497,1)
(501,321,1)
(15,168,1)
(473,491,1)
(66,94,1)
(393,419,1)
(141,228,1)
(206,345,1)
(40,345,1)
(372,425,1)
(345,264,1)
(361,180,1)
(303,216,1)
(61,134,1)
(117,219,1)
(408,0,1)
(115,219,1)
(54,219,1)
(63,35,1)
(131,19,1)
(75,405,1)
(464,195,1)
(32,191,1)
(434,396,1)
(334,82,1)
(469,371,1)
(480,272,1)
(263,216,1)
(401,497,1)
(217,252,1)
(126,75,1)
(225,420,1)
(173,428,1)
(76,276,1)
(419,435,1)
(358,338,1)
(33,464,1)
(502,51,1)
(282,401,1)
(477,119,1)
(154,359,1)
(55,156,1)
(119,233,1)
(63,393,1)
(405,408,1)
(470,77,1)
(38,154,1)
(426,212,1)
(441,41,1)
(309,462,1)
(222,61,1)
(389,107,1)
(61,308,1)
(247,320,1)
(81,107,1)
(290,142,1)
(234,65,1)
(31,277,1)
(114,410,1)
(423,208,1)
(43,348,1)
(337,62,1)
(401,53,1)
(69,125,1)
(172,202,1)
(258,458,1)
(490,219,1)
(185,261,1)
(428,71,1)
(151,415,1)
(157,375,1)
(42,429,1)
(98,109,1)
(287,4,1)
(363,439,1)
(90,128,1)
(245,225,1)
(471,219,1)
(270,173,1)
(294,266,1)
(13,291,1)
(213,335,1)
(401,223,1)
(171,289,1)
(420,67,1)
(468,316,1)
(206,116,1)
(35,88,1)
(171,104,1)
(236,377,1)
(429,162,1)
(415,201,1)
(466,219,1)
(348,93,1)
(53,223,1)
(448,378,1)
(191,262,1)
(32,261,1)
(327,153,1)
(275,134,1)
(38,219,1)
(269,437,1)
(139,406,1)
(253,296,1)
(102,502,1)
(466,309,1)
(428,54,1)
(88,111,1)
(283,203,1)
(454,213,1)
(433,173,1)
(226,424,1)
(114,287,1)
(446,245,1)
(108,242,1)
(427,431,1)
(21,181,1)
(15,219,1)
(102,497,1)
(74,219,1)
(435,219,1)
(214,263,1)
(229,42,1)
(179,301,1)
(298,258,1)
(491,9,1)
(324,255,1)
(117,438,1)
(344,285,1)
(62,488,1)
(424,170,1)
(498,410,1)
(304,13,1)
(331,433,1)
(264,306,1)
(173,144,1)
(236,93,1)
(356,272,1)
(495,134,1)
(116,117,1)
(48,254,1)
(494,219,1)
(274,57,1)
(28,120,1)
(205,343,1)
(185,367,1)
(120,436,1)
(35,378,1)
(24,37,1)
(300,383,1)
(497,391,1)
(228,46,1)
(486,151,1)
(218,219,1)
(215,414,1)
(14,74,1)
(490,439,1)
(340,50,1)
(311,88,1)
(381,135,1)
(107,258,1)
(401,282,1)
(16,441,1)
(445,58,1)
(208,100,1)
(96,247,1)
(143,386,1)
(438,328,1)
(84,473,1)
(131,231,1)
(247,261,1)
(359,44,1)
(49,55,1)
(454,219,1)
(450,412,1)
(206,40,1)
(114,498,1)
(490,363,1)
(346,178,1)
(489,24,1)
(125,478,1)
(414,17,1)
(384,493,1)
(341,331,1)
(386,14,1)
(352,261,1)
(221,350,1)
(4,294,1)
(113,261,1)
(102,68,1)
(314,230,1)
(199,470,1)
(171,124,1)
(197,219,1)
(197,3,1)
(264,476,1)
(285,325,1)
(458,400,1)
(195,22,1)
(211,215,1)
(395,357,1)
(365,165,1)
(165,169,1)
(60,361,1)
(472,304,1)
(440,392,1)
(439,384,1)
(323,141,1)
(408,219,1)
(460,73,1)
(156,461,1)
(121,134,1)
(406,211,1)
(244,452,1)
(8,84,1)
(163,46,1)
(475,102,1)
(10,219,1)
(255,398,1)
(354,138,1)
(9,229,1)
(322,399,1)
(283,197,1)
(81,395,1)
(223,225,1)
(451,143,1)
(474,172,1)
(286,110,1)
(376,21,1)
(28,261,1)
(17,112,1)
(18,251,1)
(65,322,1)
(242,78,1)
(106,450,1)
(241,48,1)
(194,147,1)
(494,30,1)
(2,34,1)
(436,487,1)
(493,136,1)
(20,139,1)
(471,29,1)
(47,6,1)
(123,459,1)
(315,38,1)
(247,425,1)
(5,232,1)
(478,158,1)
(227,9,1)
(129,123,1)
(78,219,1)
(36,450,1)
(153,35,1)
(342,267,1)
(176,314,1)
(122,266,1)
(181,274,1)
(466,497,1)
(233,329,1)
(9,485,1)
(11,2,1)
(80,456,1)
(121,238,1)
(418,70,1)
(200,261,1)
(321,256,1)
(148,219,1)
(313,15,1)
(333,194,1)
(484,26,1)
(115,229,1)
(145,219,1)
(139,414,1)
(52,33,1)
(118,36,1)
(430,131,1)
(306,467,1)
(119,95,1)
(120,134,1)
(466,353,1)
(51,219,1)
(51,257,1)
(59,234,1)
(292,193,1)
(224,278,1)
(262,434,1)
(320,176,1)
(23,484,1)
(126,263,1)
(25,219,1)
(115,86,1)
(266,247,1)
(280,80,1)
(99,341,1)
(495,59,1)
(481,379,1)
(37,326,1)
(162,180,1)
(346,454,1)
(145,297,1)
(353,139,1)
(320,372,1)
(133,60,1)
(325,98,1)
(496,499,1)
(468,423,1)
(404,10,1)
(74,11,1)
(431,495,1)
(339,430,1)
(277,134,1)
(130,219,1)
(87,130,1)
(329,388,1)
(54,344,1)
(440,377,1)
(30,244,1)
(401,219,1)
(246,376,1)
(245,310,1)
(382,222,1)
(22,492,1)
(352,133,1)
(19,231,1)
(74,229,1)
(25,265,1)
(136,279,1)
(70,293,1)
(400,395,1)
(487,106,1)
(163,219,1)
(29,481,1)
(259,148,1)
(173,452,1)
(387,175,1)
(461,418,1)
(220,5,1)
(455,157,1)
(74,282,1)
(124,463,1)
(86,451,1)
(348,377,1)
(442,354,1)
(388,377,1)
(114,353,1)
(278,45,1)
(171,246,1)
(161,475,1)
(102,282,1)
(452,163,1)
(54,325,1)
(365,219,1)
(243,99,1)
(296,396,1)
(204,32,1)
(417,122,1)
(238,447,1)
(481,299,1)
(383,501,1)
(297,496,1)
(447,150,1)
(309,469,1)
(42,261,1)
(490,497,1)
(353,39,1)
(378,300,1)
(56,283,1)
(97,468,1)
(217,219,1)
(231,219,1)
(171,333,1)
(117,254,1)
(317,103,1)
(164,121,1)
(289,52,1)
(457,478,1)
(343,105,1)
(92,364,1)
(364,442,1)
(268,116,1)
(292,219,1)
(334,219,1)
(236,362,1)
(45,243,1)
(347,93,1)
(488,118,1)
(171,270,1)
(264,219,1)
(360,309,1)
(367,161,1)
(142,185,1)
(272,219,1)
(439,219,1)
(198,422,1)
(348,283,1)
(369,490,1)
(114,309,1)
(371,462,1)
(482,302,1)
(490,282,1)
(45,219,1)
(3,16,1)
(281,313,1)
(375,448,1)
(100,131,1)
(197,441,1)
(446,225,1)
(308,303,1)
(492,200,1)
(67,229,1)
(237,348,1)
(94,500,1)
(103,356,1)
(397,219,1)
(272,489,1)
(148,248,1)
(275,486,1)
(235,237,1)
(348,56,1)
(412,261,1)
(266,96,1)
(212,299,1)
(462,324,1)
(463,269,1)
(41,377,1)
(347,119,1)
(144,428,1)
(44,426,1)
(502,239,1)
(500,214,1)
(291,189,1)
(171,63,1)
(82,387,1)
(104,205,1)
(43,221,1)
(382,413,1)
(202,253,1)
(180,164,1)
(379,315,1)
(35,311,1)
(36,474,1)
(397,179,1)
(252,374,1)
(41,305,1)
(349,280,1)
(31,261,1)
(170,468,1)
(41,93,1)
(98,184,1)
(95,233,1)
(6,353,1)
(302,281,1)
(411,306,1)
(10,482,1)
(397,229,1)
(110,227,1)
(392,334,1)
(258,219,1)
(425,220,1)
(157,219,1)
(216,134,1)
(462,398,1)
(193,286,1)
(317,12,1)
(357,292,1)
(9,225,1)
(291,378,1)
(200,445,1)
(248,268,1)
(410,337,1)
(251,186,1)
(216,155,1)
(147,275,1)
(254,397,1)
(232,414,1)
(11,107,2)
(125,478,2)
(157,395,2)
(275,134,2)
(32,261,2)
(11,395,2)
(78,206,2)
(4,266,2)
(31,468,2)
(51,280,2)
(345,264,2)
(245,9,2)
(65,134,2)
(469,36,2)
(419,35,2)
(104,468,2)
(223,225,2)
(209,115,2)
(180,164,2)
(275,125,2)
(420,180,2)
(323,396,2)
(388,356,2)
(144,396,2)
(282,9,2)
(299,65,2)
(41,131,2)
(247,320,2)
(371,36,2)
(217,219,2)
(251,107,2)
(113,261,2)
(376,396,2)
(45,219,2)
(102,282,2)
(245,225,2)
(110,180,2)
(466,353,2)
(222,479,2)
(348,377,2)
(117,102,2)
(462,398,2)
(130,219,2)
(286,180,2)
(114,309,2)
(315,299,2)
(287,266,2)
(268,102,2)
(115,107,2)
(106,356,2)
(43,356,2)
(200,280,2)
(306,102,2)
(327,35,2)
(87,107,2)
(320,176,2)
(227,180,2)
(256,107,2)
(88,111,2)
(181,219,2)
(302,356,2)
(425,414,2)
(150,37,2)
(348,356,2)
(13,395,2)
(454,219,2)
(163,219,2)
(214,263,2)
(87,130,2)
(217,125,2)
(492,280,2)
(458,395,2)
(490,282,2)
(23,125,2)
(113,131,2)
(74,282,2)
(345,394,2)
(499,348,2)
(436,356,2)
(58,280,2)
(370,102,2)
(464,219,2)
(426,299,2)
(442,206,2)
(157,219,2)
(210,202,2)
(348,93,2)
(320,356,2)
(383,107,2)
(254,397,2)
(482,131,2)
(247,425,2)
(135,365,2)
(91,134,2)
(429,180,2)
(206,102,2)
(490,219,2)
(67,180,2)
(2,395,2)
(222,61,2)
(340,180,2)
(269,180,2)
(310,9,2)
(98,396,2)
(242,206,2)
(141,396,2)
(309,36,2)
(263,125,2)
(142,185,2)
(369,102,2)
(199,396,2)
(57,396,2)
(412,261,2)
(33,280,2)
(112,356,2)
(466,497,2)
(401,282,2)
(76,468,2)
(99,173,2)
(162,180,2)
(490,439,2)
(375,107,2)
(113,356,2)
(467,102,2)
(32,396,2)
(226,468,2)
(456,107,2)
(344,396,2)
(473,9,2)
(335,131,2)
(341,173,2)
(423,131,2)
(277,134,2)
(470,396,2)
(171,104,2)
(333,125,2)
(10,131,2)
(377,346,2)
(270,396,2)
(283,203,2)
(472,395,2)
(258,219,2)
(252,125,2)
(233,356,2)
(180,37,2)
(25,102,2)
(382,125,2)
(395,180,2)
(428,396,2)
(360,36,2)
(114,497,2)
(23,134,2)
(100,131,2)
(95,131,2)
(147,443,2)
(496,348,2)
(440,334,2)
(500,263,2)
(492,200,2)
(39,215,2)
(74,395,2)
(9,225,2)
(280,107,2)
(213,131,2)
(296,396,2)
(459,35,2)
(395,261,2)
(264,102,2)
(339,131,2)
(155,125,2)
(398,114,2)
(374,125,2)
(362,356,2)
(126,125,2)
(2,107,2)
(56,356,2)
(322,468,2)
(427,431,2)
(209,107,2)
(130,107,2)
(335,356,2)
(433,173,2)
(384,102,2)
(247,261,2)
(197,356,2)
(408,219,2)
(225,180,2)
(35,88,2)
(37,217,2)
(36,396,2)
(116,102,2)
(410,134,2)
(343,91,2)
(279,102,2)
(457,468,2)
(84,9,2)
(244,396,2)
(143,395,2)
(164,37,2)
(288,396,2)
(265,102,2)
(173,428,2)
(98,452,2)
(282,401,2)
(216,125,2)
(61,125,2)
(256,395,2)
(311,395,2)
(291,189,2)
(440,219,2)
(35,378,2)
(303,125,2)
(377,131,2)
(331,173,2)
(378,107,2)
(91,468,2)
(74,219,2)
(0,263,2)
(223,134,2)
(117,254,2)
(478,468,2)
(490,102,2)
(97,468,2)
(81,107,2)
(36,450,2)
(357,292,2)
(468,423,2)
(485,9,2)
(148,219,2)
(253,396,2)
(485,180,2)
(415,125,2)
(266,356,2)
(431,495,2)
(259,102,2)
(502,280,2)
(281,236,2)
(386,395,2)
(171,246,2)
(218,13,2)
(167,240,2)
(494,219,2)
(16,356,2)
(236,377,2)
(213,356,2)
(95,356,2)
(14,395,2)
(488,36,2)
(289,280,2)
(37,125,2)
(397,229,2)
(41,377,2)
(299,427,2)
(364,206,2)
(148,102,2)
(258,395,2)
(223,9,2)
(54,325,2)
(115,14,2)
(423,219,2)
(167,102,2)
(77,396,2)
(158,468,2)
(171,43,2)
(172,396,2)
(31,277,2)
(414,356,2)
(13,107,2)
(328,102,2)
(417,266,2)
(103,356,2)
(14,107,2)
(501,107,2)
(171,370,2)
(438,102,2)
(448,107,2)
(120,134,2)
(121,134,2)
(206,345,2)
(163,46,2)
(367,102,2)
(208,131,2)
(300,395,2)
(362,131,2)
(40,102,2)
(75,263,2)
(74,229,2)
(377,356,2)
(382,413,2)
(69,125,2)
(493,102,2)
(86,107,2)
(405,263,2)
(432,280,2)
(164,121,2)
(441,41,2)
(66,263,2)
(114,219,2)
(317,12,2)
(168,236,2)
(334,219,2)
(68,280,2)
(170,468,2)
(229,180,2)
(218,107,2)
(482,356,2)
(474,36,2)
(410,202,2)
(350,348,2)
(337,36,2)
(114,36,2)
(447,37,2)
(21,396,2)
(372,356,2)
(347,356,2)
(393,35,2)
(397,102,2)
(263,382,2)
(173,396,2)
(117,229,2)
(204,32,2)
(59,468,2)
(369,490,2)
(329,131,2)
(237,348,2)
(15,219,2)
(466,287,2)
(18,107,2)
(119,356,2)
(363,102,2)
(107,395,2)
(22,280,2)
(446,180,2)
(80,107,2)
(454,356,2)
(299,468,2)
(43,131,2)
(455,107,2)
(389,107,2)
(317,356,2)
(52,280,2)
(446,9,2)
(142,102,2)
(236,131,2)
(96,356,2)
(486,125,2)
(450,412,2)
(41,356,2)
(283,197,2)
(302,131,2)
(42,261,2)
(321,395,2)
(139,414,2)
(359,299,2)
(218,219,2)
(178,131,2)
(78,219,2)
(210,36,2)
(194,125,2)
(300,219,2)
(466,219,2)
(301,102,2)
(292,219,2)
(471,468,2)
(147,125,2)
(365,102,2)
(131,231,2)
(45,173,2)
(434,396,2)
(431,468,2)
(13,291,2)
(247,356,2)
(6,356,2)
(352,180,2)
(236,93,2)
(392,119,2)
(311,107,2)
(427,468,2)
(195,280,2)
(194,147,2)
(205,343,2)
(300,209,2)
(161,102,2)
(428,54,2)
(272,219,2)
(463,180,2)
(107,258,2)
(14,74,2)
(297,348,2)
(346,454,2)
(119,131,2)
(171,380,2)
(202,396,2)
(215,266,2)
(467,351,2)
(74,497,2)
(51,219,2)
(240,219,2)
(440,119,2)
(54,219,2)
(326,125,2)
(277,468,2)
(395,357,2)
(378,300,2)
(460,102,2)
(502,239,2)
(431,421,2)
(455,395,2)
(145,219,2)
(262,396,2)
(231,219,2)
(456,87,2)
(404,131,2)
(472,107,2)
(36,202,2)
(120,356,2)
(475,102,2)
(375,395,2)
(124,180,2)
(61,134,2)
(255,36,2)
(17,356,2)
(339,356,2)
(481,468,2)
(466,396,2)
(122,266,2)
(260,236,2)
(316,131,2)
(228,396,2)
(48,102,2)
(283,356,2)
(42,180,2)
(502,51,2)
(222,125,2)
(280,456,2)
(26,125,2)
(495,468,2)
(139,497,2)
(345,102,2)
(329,356,2)
(209,395,2)
(495,134,2)
(46,466,2)
(427,271,2)
(477,119,2)
(88,395,2)
(53,9,2)
(304,395,2)
(186,107,2)
(140,396,2)
(430,356,2)
(441,131,2)
(201,125,2)
(197,131,2)
(474,396,2)
(501,395,2)
(425,356,2)
(200,261,2)
(224,173,2)
(74,107,2)
(102,502,2)
(139,215,2)
(16,131,2)
(184,396,2)
(467,116,2)
(348,283,2)
(313,236,2)
(220,356,2)
(264,219,2)
(257,280,2)
(173,452,2)
(454,131,2)
(468,131,2)
(487,356,2)
(388,131,2)
(382,222,2)
(304,107,2)
(175,119,2)
(206,116,2)
(437,219,2)
(410,36,2)
(117,219,2)
(128,261,2)
(451,107,2)
(480,37,2)
(411,102,2)
(193,180,2)
(114,287,2)
(349,280,2)
(348,131,2)
(396,28,2)
(164,261,2)
(428,71,2)
(46,396,2)
(41,93,2)
(86,395,2)
(41,305,2)
(338,102,2)
(123,35,2)
(15,236,2)
(298,395,2)
(119,233,2)
(92,206,2)
(278,173,2)
(308,125,2)
(466,309,2)
(361,180,2)
(63,107,2)
(143,107,2)
(221,348,2)
(243,173,2)
(163,396,2)
(346,219,2)
(464,280,2)
(63,395,2)
(212,299,2)
(30,396,2)
(291,378,2)
(102,280,2)
(235,348,2)
(197,441,2)
(356,37,2)
(430,131,2)
(435,35,2)
(439,219,2)
(321,107,2)
(352,261,2)
(36,36,2)
(397,219,2)
(47,356,2)
(88,218,2)
(291,395,2)
(3,131,2)
(135,102,2)
(354,206,2)
(397,135,2)
(128,23,2)
(439,102,2)
(171,124,2)
(494,396,2)
(171,270,2)
(216,134,2)
(38,299,2)
(9,9,2)
(440,377,2)
(118,36,2)
(31,261,2)
(346,356,2)
(60,180,2)
(404,356,2)
(441,356,2)
(291,107,2)
(452,163,2)
(98,109,2)
(171,63,2)
(356,272,2)
(241,102,2)
(399,468,2)
(62,36,2)
(491,9,2)
(9,180,2)
(169,102,2)
(386,107,2)
(82,119,2)
(50,180,2)
(138,206,2)
(401,497,2)
(276,468,2)
(378,395,2)
(121,37,2)
(153,35,2)
(28,356,2)
(229,42,2)
(179,102,2)
(115,229,2)
(476,102,2)
(401,223,2)
(424,468,2)
(50,352,2)
(238,37,2)
(471,219,2)
(408,263,2)
(172,36,2)
(324,36,2)
(401,219,2)
(129,35,2)
(145,348,2)
(325,98,2)
(437,180,2)
(35,395,2)
(365,369,2)
(114,353,2)
(490,497,2)
(343,468,2)
(478,219,2)
(34,107,2)
(90,125,2)
(415,219,2)
(358,102,2)
(3,356,2)
(24,37,2)
(306,467,2)
(448,395,2)
(147,275,2)
(10,356,2)
(165,102,2)
(346,131,2)
(300,107,2)
(489,37,2)
(115,395,2)
(133,180,2)
(178,356,2)
(56,131,2)
(456,261,2)
(102,497,2)
(396,356,2)
(125,468,2)
(365,219,2)
(383,395,2)
(205,468,2)
(400,395,2)
(5,356,2)
(450,356,2)
(181,396,2)
(435,219,2)
(8,9,2)
(25,219,2)
(498,36,2)
(240,102,2)
(309,462,2)
(191,396,2)
(44,299,2)
(290,102,2)
(346,113,2)
(35,107,2)
(93,440,2)
(398,36,2)
(151,125,2)
(334,119,2)
(28,261,2)
(295,102,2)
(114,410,2)
(353,215,2)
(234,468,2)
(294,266,2)
(81,395,2)
(347,131,2)
(292,180,2)
(204,396,2)
(451,395,2)
(254,102,2)
(412,356,2)
(380,102,2)
(285,396,2)
(88,107,2)
(29,468,2)
(34,395,2)
(171,333,2)
(246,396,2)
(108,206,2)
(54,396,2)
(248,102,2)
(136,102,2)
(128,125,2)
(211,215,2)
(116,117,2)
(357,180,2)
(157,107,2)
(232,356,2)
(73,102,2)
(452,396,2)
(444,180,2)
(197,219,2)
(236,356,2)
(185,102,2)
(266,247,2)
(94,263,2)
(10,219,2)
(218,395,2)
(233,131,2)
(28,120,2)
(263,216,2)
(115,219,2)
(9,229,2)
(353,139,2)
(233,219,2)
(185,261,2)
(325,396,2)
(379,299,2)
(387,119,2)
(38,219,2)
(264,306,2)
(406,215,2)
(462,36,2)
(272,37,2)
(283,131,2)
(215,414,2)
(343,105,2)
(93,119,2)
(484,125,2)
(445,280,2)
(154,299,2)
(381,102,2)
(20,215,2)
(401,9,2)
(65,468,2)
(171,289,2)
(274,396,2)
-----------------------------------
(0,t2p_error)
(1,)
(2,stripcount)
(3,tiff_datasize)
(4,2)
(5,TIFFTAG_JPEGTABLES)
(6,stripcount)
(7,if(t2p->pdf_compression == T2P_COMPRESS_ZIP)
(8,i)
(9,i<stripcount)
(10,t2p->tiff_datasize)
(11,t2p)
(12,void)
(13,t2p->tiff_datasize = (tsize_t)
(14,k = checkAdd64(k, stripcount, t2p)
(15,t2p->t2p_error)
(16,t2p)
(17,0)
(18,tiff_datasize)
(19,T2P_TRANSCODE_RAW)
(20,k)
(21,T2P_ERR_ERROR)
(22,t2p)
(23,&sbc)
(24,t2p)
(25,t2p->pdf_ojpegiflength)
(26,TIFFTAG_STRIPBYTECOUNTS)
(27,)
(28,TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)
(29,tiff_datasize)
(30,tiff_datasize)
(31,TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)
(32,TIFFFileName(input)
(33,T2P_ERR_ERROR)
(34,k)
(35,(uint64)
(36,i<stripcount)
(37,t2p->tiff_compression == COMPRESSION_OJPEG)
(38,t2p->t2p_error)
(39,2)
(40,k)
(41,(tsize_t)
(42,TIFFNumberOfStrips(input)
(43,return;)
(44,TIFFError(TIFF2PDF_MODULE, "Integer overflow")
(45,t2p->t2p_error)
(46,k = checkAdd64(k, 2, t2p)
(47,input)
(48,k)
(49,k)
(50,TIFFError(TIFF2PDF_MODULE, \n\\n\\t\\t\\t\\t\\t"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",\n\\n\\t\\t\\t\\t\\tTIFFFileName(input)
(51,t2p->tiff_datasize)
(52,t2p->t2p_error = T2P_ERR_ERROR)
(53,t2p)
(54,t2p->tiff_datasize)
(55,stripcount=0)
(56,k)
(57,t2p)
(58,"Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT")
(59,0)
(60,"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS")
(61,sbc[0])
(62,sbc)
(63,return;)
(64,)
(65,sbc[0])
(66,t2p)
(67,i)
(68,k)
(69,input)
(70,0)
(71,uint64)
(72,)
(73,t2p)
(74,checkAdd64(k, stripcount, t2p)
(75,t2p->t2p_error = T2P_ERR_ERROR)
(76,0)
(77,k)
(78,t2p->t2p_error)
(79,)
(80,0)
(81,k)
(82,tiff_samplesperpixel)
(83,if((uint64)
(84,sbc)
(85,)
(86,t2p)
(87,&(t2p->tiff_datasize)
(88,(uint64)
(89,for(i=0;i<stripcount;i++)
(90,sbc)
(91,sbc[0])
(92,t2p_error)
(93,k = checkMultiply64(k, t2p->tiff_samplesperpixel, t2p)
(94,TIFFError(TIFF2PDF_MODULE, "Integer overflow")
(95,PLANARCONFIG_SEPARATE)
(96,0)
(97,t2p)
(98,(tsize_t)
(99,t2p)
(100,t2p)
(101,if(TIFFGetField(input, TIFFTAG_JPEGTABLES, &count, &jpt)
(102,(uint64)
(103,0)
(104,return;)
(105,tmsize_t)
(106,input)
(107,t2p->tiff_dataoffset != 0)
(108,t2p->t2p_error = T2P_ERR_ERROR)
(109,tsize_t)
(110,TIFFTAG_JPEGIFOFFSET)
(111,uint64)
(112,count)
(113,TIFFScanlineSize(input)
(114,checkAdd64(k, sbc[i], t2p)
(115,checkAdd64(k, stripcount, t2p)
(116,k = checkAdd64(k, stripcount, t2p)
(117,checkAdd64(k, stripcount, t2p)
(118,k)
(119,t2p->tiff_planar==PLANARCONFIG_SEPARATE)
(120,&sbc)
(121,&sbc)
(122,count)
(123,t2p)
(124,return;)
(125,t2p->pdf_compression == T2P_COMPRESS_ZIP)
(126,t2p)
(127,sbc)
(128,TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)
(129,t2p_error)
(130,t2p->tiff_datasize)
(131,t2p->pdf_transcode == T2P_TRANSCODE_RAW)
(132,)
(133,input)
(134,* sbc=NULL)
(135,k = checkAdd64(k, 6, t2p)
(136,k)
(137,for(i=0;i<stripcount;i++)
(138,TIFF2PDF_MODULE)
(139,k += count)
(140,t2p)
(141,k)
(142,TIFFWarning(TIFF2PDF_MODULE, \n\\n\\t\\t\\t\\t\\t\\t\\t\\t"Input file %s has short JPEG interchange file byte count", \n\\n\\t\\t\\t\\t\\t\\t\\t\\tTIFFFileName(input)
(143,k)
(144,k)
(145,t2p->t2p_error)
(146,k)
(147,(tmsize_t)
(148,t2p->tiff_datasize)
(149,if(count > 4)
(150,input)
(151,sbc)
(152,count)
(153,TIFF2PDF_MODULE)
(154,t2p_error)
(155,0)
(156,0)
(157,t2p->tiff_datasize)
(158,pdf_compression)
(159,)
(160,)
(161,"Input file %s has short JPEG interchange file byte count")
(162,stripcount)
(163,checkAdd64(k, 6, t2p)
(164,TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)
(165,t2p)
(166,)
(167,t2p->pdf_ojpegiflength=t2p->tiff_datasize)
(168,t2p_error)
(169,6)
(170,input)
(171,RET)
(172,i)
(173,(uint64)
(174,)
(175,k)
(176,* jpt=NULL)
(177,if ((uint64)
(178,t2p)
(179,t2p)
(180,!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)
(181,t2p->t2p_error)
(182,if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)
(183,jpt)
(184,k)
(185,TIFFFileName(input)
(186,TIFFTAG_JPEGIFBYTECOUNT)
(187,if(t2p->tiff_planar==PLANARCONFIG_SEPARATE)
(188,)
(189,tsize_t)
(190,)
(191,input)
(192,if ((uint64)
(193,tiff_dataoffset)
(194,t2p->tiff_datasize=(tmsize_t)
(195,t2p_error)
(196,)
(197,t2p->tiff_datasize)
(198,pdf_transcode)
(199,2)
(200,TIFFFileName(input)
(201,tiff_datasize)
(202,i=0)
(203,uint64)
(204,TIFFError(TIFF2PDF_MODULE, \n\\n\\t\\t\\t\\t\\t"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS",\n\\n\\t\\t\\t\\t\\tTIFFFileName(input)
(205,t2p->tiff_datasize=(tmsize_t)
(206,(uint64)
(207,if(t2p->tiff_compression == COMPRESSION_OJPEG)
(208,pdf_compression)
(209,k = checkAdd64(k, stripcount, t2p)
(210,i++)
(211,k)
(212,TIFF2PDF_MODULE)
(213,tiff_length)
(214,TIFF2PDF_MODULE)
(215,count > 4)
(216,sbc[0])
(217,t2p->tiff_compression)
(218,t2p->tiff_datasize)
(219,T2P* t2p)
(220,count)
(221,t2p->t2p_error = T2P_ERR_ERROR)
(222,(tmsize_t)
(223,sbc[i])
(224,t2p->t2p_error = T2P_ERR_ERROR)
(225,i=0)
(226,sbc)
(227,input)
(228,k)
(229,stripcount=TIFFNumberOfStrips(input)
(230,jpt)
(231,t2p->pdf_transcode)
(232,input)
(233,t2p->tiff_planar)
(234,sbc)
(235,"Integer overflow")
(236,k == 0)
(237,TIFF2PDF_MODULE)
(238,sbc)
(239,uint64)
(240,t2p->tiff_datasize)
(241,k)
(242,T2P_ERR_ERROR)
(243,t2p_error)
(244,t2p)
(245,i++)
(246,return;)
(247,TIFFGetField(input, TIFFTAG_JPEGTABLES, &count, &jpt)
(248,tiff_datasize)
(249,if ((uint64)
(250,if (sbc[0] != (uint64)
(251,t2p)
(252,tiff_compression)
(253,0)
(254,k = checkAdd64(k, stripcount, t2p)
(255,k)
(256,k)
(257,tiff_datasize)
(258,t2p->tiff_dataoffset)
(259,k)
(260,t2p)
(261,TIFF* input)
(262,"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS")
(263,sbc[0] != (uint64)
(264,t2p->tiff_datasize)
(265,pdf_ojpegiflength)
(266,TIFFGetField(input, TIFFTAG_JPEGTABLES, &count, &jpt)
(267,sbc)
(268,t2p)
(269,T2P_ERR_ERROR)
(270,return;)
(271,uint64)
(272,t2p->tiff_compression)
(273,)
(274,t2p_error)
(275,sbc[0])
(276,sbc)
(277,&sbc)
(278,T2P_ERR_ERROR)
(279,k)
(280,TIFFGetField(input, TIFFTAG_JPEGIFBYTECOUNT, &(t2p->tiff_datasize)
(281,t2p->t2p_error = T2P_ERR_ERROR)
(282,k = checkAdd64(k, sbc[i], t2p)
(283,(uint64)
(284,)
(285,t2p)
(286,t2p)
(287,k = 2)
(288,t2p)
(289,return;)
(290,t2p)
(291,(tsize_t)
(292,t2p->tiff_dataoffset)
(293,i)
(294,k)
(295,k)
(296,i)
(297,t2p_error)
(298,0)
(299,sbc[0] != (uint64)
(300,checkAdd64(k, 2048, t2p)
(301,stripcount)
(302,t2p)
(303,sbc)
(304,t2p)
(305,tsize_t)
(306,t2p->tiff_datasize = (tsize_t)
(307,)
(308,0)
(309,k +=2)
(310,i)
(311,k)
(312,)
(313,T2P_ERR_ERROR)
(314,NULL)
(315,T2P_ERR_ERROR)
(316,T2P_COMPRESS_G4)
(317,(void)
(318,if(t2p->tiff_dataoffset != 0)
(319,if(TIFFGetField(input, TIFFTAG_JPEGIFBYTECOUNT, &(t2p->tiff_datasize)
(320,&jpt)
(321,k)
(322,0)
(323,6)
(324,2)
(325,t2p->tiff_datasize = (tsize_t)
(326,COMPRESSION_OJPEG)
(327,"Integer overflow")
(328,stripcount)
(329,tiff_planar)
(330,if(t2p->pdf_transcode == T2P_TRANSCODE_RAW)
(331,"Integer overflow")
(332,)
(333,return;)
(334,t2p->tiff_samplesperpixel)
(335,t2p)
(336,)
(337,i)
(338,k)
(339,input)
(340,t2p)
(341,TIFFError(TIFF2PDF_MODULE, "Integer overflow")
(342,NULL)
(343,(tmsize_t)
(344,tiff_datasize)
(345,(uint64)
(346,checkMultiply64(TIFFScanlineSize(input)
(347,k)
(348,(uint64)
(349,t2p)
(350,T2P_ERR_ERROR)
(351,tsize_t)
(352,TIFFFileName(input)
(353,k -= 2)
(354,"Integer overflow")
(355,i)
(356,t2p->tiff_compression == COMPRESSION_JPEG)
(357,&(t2p->tiff_dataoffset)
(358,k)
(359,t2p)
(360,i)
(361,TIFF2PDF_MODULE)
(362,0)
(363,t2p)
(364,t2p)
(365,checkAdd64(k, 6, t2p)
(366,if(!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)
(367,input)
(368,if(TIFFGetField(input, TIFFTAG_JPEGIFOFFSET, &(t2p->tiff_dataoffset)
(369,k = checkAdd64(k, t2p->tiff_datasize, t2p)
(370,return;)
(371,k)
(372,jpt)
(373,)
(374,t2p)
(375,tiff_datasize)
(376,t2p->t2p_error = T2P_ERR_ERROR)
(377,k = checkMultiply64(TIFFScanlineSize(input)
(378,k = checkAdd64(k, 2048, t2p)
(379,t2p->t2p_error = T2P_ERR_ERROR)
(380,return;)
(381,k)
(382,(uint64)
(383,t2p)
(384,tiff_datasize)
(385,if (k == 0)
(386,k)
(387,t2p)
(388,t2p)
(389,input)
(390,stripcount)
(391,0)
(392,t2p)
(393,t2p->t2p_error = T2P_ERR_ERROR)
(394,uint64)
(395,TIFFGetField(input, TIFFTAG_JPEGIFOFFSET, &(t2p->tiff_dataoffset)
(396,!TIFFGetField(input, TIFFTAG_STRIPBYTECOUNTS, &sbc)
(397,checkAdd64(k, stripcount, t2p)
(398,k = checkAdd64(k, sbc[i], t2p)
(399,sbc)
(400,t2p)
(401,checkAdd64(k, sbc[i], t2p)
(402,if(t2p->tiff_compression == COMPRESSION_JPEG)
(403,if (sbc[0] != (uint64)
(404,k)
(405,T2P_ERR_ERROR)
(406,count)
(407,)
(408,t2p->t2p_error)
(409,)
(410,sbc[i])
(411,t2p)
(412,TIFFNumberOfStrips(input)
(413,uint64)
(414,count = 0)
(415,t2p->tiff_datasize)
(416,)
(417,4)
(418,i=0)
(419,T2P_ERR_ERROR)
(420,0)
(421,tmsize_t)
(422,t2p)
(423,t2p->pdf_compression)
(424,TIFFTAG_STRIPBYTECOUNTS)
(425,&count)
(426,"Integer overflow")
(427,(uint64)
(428,(uint64)
(429,input)
(430,k)
(431,(tmsize_t)
(432,TIFF2PDF_MODULE)
(433,TIFF2PDF_MODULE)
(434,TIFF2PDF_MODULE)
(435,t2p->t2p_error)
(436,sbc)
(437,t2p->t2p_error)
(438,t2p)
(439,t2p->tiff_datasize)
(440,checkMultiply64(k, t2p->tiff_samplesperpixel, t2p)
(441,t2p->tiff_datasize = (tsize_t)
(442,TIFFError(TIFF2PDF_MODULE, "Integer overflow")
(443,tmsize_t)
(444,t2p_error)
(445,input)
(446,i)
(447,TIFFTAG_STRIPBYTECOUNTS)
(448,t2p)
(449,if(t2p->pdf_compression == T2P_COMPRESS_G4 )
(450,stripcount=TIFFNumberOfStrips(input)
(451,stripcount)
(452,k = checkAdd64(k, 6, t2p)
(453,if ((uint64)
(454,t2p->tiff_length)
(455,k)
(456,TIFFGetField(input, TIFFTAG_JPEGIFBYTECOUNT, &(t2p->tiff_datasize)
(457,T2P_COMPRESS_ZIP)
(458,tiff_dataoffset)
(459,TIFFError(TIFF2PDF_MODULE, "Integer overflow")
(460,tiff_datasize)
(461,stripcount)
(462,k -=2)
(463,t2p->t2p_error = T2P_ERR_ERROR)
(464,t2p->t2p_error)
(465,)
(466,checkAdd64(k, 2, t2p)
(467,(tsize_t)
(468,t2p->pdf_compression == T2P_COMPRESS_G4)
(469,2)
(470,k)
(471,t2p->tiff_datasize)
(472,tiff_datasize)
(473,k)
(474,stripcount)
(475,TIFF2PDF_MODULE)
(476,tiff_datasize)
(477,k)
(478,t2p->pdf_compression)
(479,tmsize_t)
(480,COMPRESSION_JPEG)
(481,t2p)
(482,tiff_datasize)
(483,)
(484,sbc)
(485,stripcount)
(486,0)
(487,TIFFTAG_STRIPBYTECOUNTS)
(488,k)
(489,tiff_compression)
(490,checkAdd64(k, t2p->tiff_datasize, t2p)
(491,k)
(492,TIFFError(TIFF2PDF_MODULE, \n\\n\\t\\t\\t\\t\\t\\t\\t"Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT",\n\\n\\t\\t\\t\\t\\t\\t\\tTIFFFileName(input)
(493,t2p)
(494,t2p->tiff_datasize)
(495,sbc[0])
(496,t2p)
(497,k = 0)
(498,t2p)
(499,TIFFError(TIFF2PDF_MODULE, "Integer overflow")
(500,"Integer overflow")
(501,2048)
(502,(uint64)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
