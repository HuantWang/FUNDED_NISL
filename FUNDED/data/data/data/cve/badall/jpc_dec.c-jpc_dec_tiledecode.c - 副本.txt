-----label-----
1
-----code-----
static int jpc_dec_tiledecode(jpc_dec_t *dec, jpc_dec_tile_t *tile)
{
	int i;
	int j;
	jpc_dec_tcomp_t *tcomp;
	jpc_dec_rlvl_t *rlvl;
	jpc_dec_band_t *band;
	int compno;
	int rlvlno;
	int bandno;
	int adjust;
	int v;
	jpc_dec_ccp_t *ccp;
	jpc_dec_cmpt_t *cmpt;

	if (jpc_dec_decodecblks(dec, tile)) {
		jas_eprintf("jpc_dec_decodecblks failed\n");
		return -1;
	}

	/* Perform dequantization. */
	for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;
	  ++compno, ++tcomp) {
		ccp = &tile->cp->ccps[compno];
		for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;
		  ++rlvlno, ++rlvl) {
			if (!rlvl->bands) {
				continue;
			}
			for (bandno = 0, band = rlvl->bands;
			  bandno < rlvl->numbands; ++bandno, ++band) {
				if (!band->data) {
					continue;
				}
				jpc_undo_roi(band->data, band->roishift, ccp->roishift -
				  band->roishift, band->numbps);
				if (tile->realmode) {
					jas_matrix_asl(band->data, JPC_FIX_FRACBITS);
					jpc_dequantize(band->data, band->absstepsize);
				}

			}
		}
	}

	/* Apply an inverse wavelet transform if necessary. */
	for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;
	  ++compno, ++tcomp) {
		ccp = &tile->cp->ccps[compno];
		jpc_tsfb_synthesize(tcomp->tsfb, tcomp->data);
	}


	/* Apply an inverse intercomponent transform if necessary. */
	switch (tile->cp->mctid) {
	case JPC_MCT_RCT:
		assert(dec->numcomps >= 3);
		jpc_irct(tile->tcomps[0].data, tile->tcomps[1].data,
		  tile->tcomps[2].data);
		break;
	case JPC_MCT_ICT:
		assert(dec->numcomps >= 3);
		jpc_iict(tile->tcomps[0].data, tile->tcomps[1].data,
		  tile->tcomps[2].data);
		break;
	}

	/* Perform rounding and convert to integer values. */
	if (tile->realmode) {
		for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;
		  ++compno, ++tcomp) {
			for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {
				for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {
					v = jas_matrix_get(tcomp->data, i, j);
					v = jpc_fix_round(v);
					jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));
				}
			}
		}
	}

	/* Perform level shift. */
	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <
	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {
		adjust = cmpt->sgnd ? 0 : (1 << (cmpt->prec - 1));
		for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {
			for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {
				*jas_matrix_getref(tcomp->data, i, j) += adjust;
			}
		}
	}

	/* Perform clipping. */
	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <
	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {
		jpc_fix_t mn;
		jpc_fix_t mx;
		mn = cmpt->sgnd ? (-(1 << (cmpt->prec - 1))) : (0);
		mx = cmpt->sgnd ? ((1 << (cmpt->prec - 1)) - 1) : ((1 <<
		  cmpt->prec) - 1);
		jas_matrix_clip(tcomp->data, mn, mx);
	}

	/* XXX need to free tsfb struct */

	/* Write the data for each component of the image. */
	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <
	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {
		if (jas_image_writecmpt(dec->image, compno, tcomp->xstart -
		  JPC_CEILDIV(dec->xstart, cmpt->hstep), tcomp->ystart -
		  JPC_CEILDIV(dec->ystart, cmpt->vstep), jas_matrix_numcols(
		  tcomp->data), jas_matrix_numrows(tcomp->data), tcomp->data)) {
			jas_eprintf("write component failed\n");
			return -4;
		}
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
18,19
19,20
19,21
21,22
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
44,45
46,47
46,48
49,50
50,51
50,52
52,53
54,55
55,56
55,57
57,58
59,60
60,61
60,62
62,63
64,65
65,66
65,67
67,68
69,70
70,71
70,72
72,73
74,75
75,76
75,77
76,77
78,79
78,80
81,82
82,83
82,84
83,84
85,86
85,87
88,89
88,90
89,90
89,91
89,92
90,91
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
108,110
109,110
112,113
112,114
113,114
115,116
115,117
116,117
119,120
119,121
120,121
122,123
122,124
123,124
126,127
126,128
127,128
128,129
130,131
131,132
133,134
133,135
134,135
135,136
135,137
136,137
138,139
139,140
139,141
140,141
140,142
141,142
141,143
142,143
146,147
148,149
148,150
148,151
148,152
149,150
150,151
150,152
151,152
151,153
152,153
155,156
155,157
156,157
158,159
158,160
159,160
162,163
162,164
163,164
165,166
165,167
166,167
169,170
169,171
170,171
171,172
173,174
174,175
176,177
176,178
177,178
177,179
178,179
179,180
179,181
180,181
183,184
185,186
185,187
185,188
185,189
186,187
187,188
187,189
188,189
188,190
189,190
192,193
192,194
193,194
195,196
195,197
196,197
199,200
199,201
200,201
202,203
202,204
203,204
206,207
206,208
207,208
208,209
210,211
211,212
213,214
213,215
213,216
214,215
214,216
215,216
216,217
216,218
217,218
220,221
222,223
223,224
223,225
223,226
223,227
223,228
224,225
226,227
226,228
227,228
230,231
230,232
231,232
234,235
234,236
235,236
235,237
236,237
239,240
239,241
240,241
243,244
243,245
244,245
247,248
247,249
248,249
248,250
249,250
252,253
252,254
253,254
254,255
254,256
254,257
255,256
257,258
257,259
258,259
261,262
263,264
264,265
264,266
264,267
265,266
267,268
267,269
268,269
271,272
271,273
272,273
275,276
275,277
275,278
275,279
276,277
277,278
277,279
278,279
278,280
279,280
282,283
282,284
283,284
285,286
285,287
286,287
289,290
289,291
290,291
292,293
292,294
293,294
296,297
296,298
297,298
298,299
300,301
301,302
303,304
303,305
304,305
305,306
305,307
306,307
308,309
309,310
309,311
310,311
310,312
311,312
311,313
312,313
316,317
318,319
319,320
319,321
319,322
320,321
322,323
322,324
323,324
326,327
326,328
327,328
330,331
330,332
331,332
331,333
332,333
332,334
333,334
337,338
337,339
337,340
337,341
337,342
337,343
337,344
337,345
338,339
339,340
341,342
342,343
342,344
343,344
345,346
345,347
346,347
346,348
347,348
351,352
352,353
352,354
352,355
352,356
353,354
355,356
355,357
356,357
356,358
357,358
357,359
358,359
363,364
363,365
364,365
364,366
365,366
365,367
366,367
371,372
371,373
372,373
372,374
373,374
373,375
374,375
380,381
381,382
383,384
384,385
384,386
385,386
387,388
387,389
388,389
388,390
389,390
393,394
394,395
394,396
394,397
394,398
395,396
397,398
397,399
398,399
398,400
399,400
399,401
400,401
405,406
405,407
406,407
406,408
407,408
407,409
408,409
413,414
413,415
414,415
414,416
415,416
415,417
416,417
422,423
422,424
423,424
423,425
424,425
427,428
428,429
428,430
428,431
428,432
429,430
430,431
430,432
431,432
431,433
432,433
435,436
435,437
436,437
438,439
438,440
439,440
442,443
442,444
443,444
445,446
445,447
446,447
449,450
449,451
450,451
451,452
453,454
454,455
456,457
457,458
457,459
457,460
457,461
458,459
459,460
459,461
460,461
463,464
463,465
464,465
466,467
466,468
467,468
469,470
469,471
470,471
473,474
474,475
476,477
477,478
477,479
477,480
477,481
478,479
479,480
479,481
480,481
483,484
483,485
484,485
486,487
486,488
487,488
489,490
489,491
490,491
493,494
494,495
496,497
496,498
496,499
497,498
498,499
498,500
499,500
501,502
501,503
501,504
501,505
502,503
504,505
504,506
505,506
508,509
510,511
512,513
513,514
513,515
514,515
516,517
516,518
517,518
519,520
521,522
522,523
522,524
522,525
522,526
522,527
523,524
525,526
525,527
526,527
529,530
531,532
533,534
533,535
534,535
536,537
538,539
538,540
538,541
538,542
539,540
540,541
540,542
540,543
541,542
541,543
542,543
545,546
545,547
546,547
548,549
548,550
549,550
552,553
552,554
553,554
555,556
555,557
556,557
559,560
559,561
560,561
562,563
562,564
563,564
566,567
566,568
566,569
567,568
568,569
570,571
571,572
573,574
574,575
576,577
576,578
577,578
578,579
578,580
579,580
581,582
581,583
581,584
582,583
582,584
583,584
587,588
588,589
588,590
590,591
591,592
591,593
592,593
592,594
593,594
597,598
597,599
597,600
597,601
598,599
599,600
599,601
600,601
603,604
603,605
604,605
606,607
606,608
607,608
609,610
609,611
610,611
613,614
614,615
616,617
617,618
617,619
617,620
617,621
618,619
619,620
619,621
620,621
623,624
623,625
624,625
626,627
626,628
627,628
629,630
629,631
630,631
633,634
634,635
636,637
637,638
638,639
638,640
639,640
640,641
640,642
640,643
640,644
641,642
643,644
643,645
644,645
647,648
649,650
651,652
653,654
653,655
653,656
653,657
654,655
655,656
655,657
655,658
656,657
656,658
657,658
660,661
660,662
661,662
663,664
663,665
664,665
667,668
667,669
668,669
670,671
670,672
671,672
674,675
674,676
675,676
677,678
677,679
678,679
681,682
681,683
681,684
682,683
683,684
685,686
686,687
688,689
689,690
691,692
691,693
691,694
691,695
691,696
692,693
693,694
693,695
694,695
696,697
698,699
699,700
699,701
700,701
702,703
704,705
705,706
705,707
706,707
708,709
708,710
708,711
709,710
709,711
710,711
713,714
714,715
715,716
716,717
716,718
718,719
719,720
719,721
720,721
720,722
721,722
725,726
727,728
728,729
728,730
729,730
731,732
731,733
731,734
732,733
732,734
733,734
736,737
737,738
737,739
738,739
739,740
739,741
741,742
742,743
742,744
743,744
743,745
744,745
749,750
750,751
750,752
751,752
752,753
752,754
754,755
754,756
755,756
759,760
760,761
760,762
760,763
760,764
761,762
763,764
763,765
764,765
767,768
769,770
771,772
771,773
771,774
771,775
772,773
773,774
773,775
773,776
774,775
774,776
775,776
778,779
778,780
779,780
781,782
781,783
782,783
785,786
785,787
786,787
788,789
788,790
789,790
792,793
792,794
793,794
795,796
795,797
796,797
799,800
799,801
799,802
800,801
801,802
803,804
804,805
806,807
807,808
809,810
810,811
810,812
811,812
811,813
811,814
811,815
811,816
811,817
811,818
811,819
812,813
814,815
814,816
815,816
818,819
820,821
820,822
821,822
821,823
822,823
825,826
825,827
825,828
826,827
828,829
828,830
829,830
832,833
832,834
833,834
836,837
836,838
837,838
837,839
838,839
841,842
841,843
841,844
842,843
844,845
844,846
845,846
848,849
848,850
849,850
852,853
852,854
853,854
855,856
855,857
856,857
859,860
859,861
860,861
862,863
862,864
863,864
866,867
866,868
867,868
870,871
870,872
871,872
872,873
872,874
873,874
876,877
877,878
879,880
-----nextToken-----

-----computeFrom-----
108,109
108,110
112,113
112,114
119,120
119,121
135,136
135,137
151,152
151,153
155,156
155,157
162,163
162,164
188,189
188,190
192,193
192,194
199,200
199,201
234,235
234,236
278,279
278,280
282,283
282,284
289,290
289,291
305,306
305,307
345,346
345,347
387,388
387,389
431,432
431,433
435,436
435,437
442,443
442,444
459,460
459,461
463,464
463,465
479,480
479,481
483,484
483,485
498,499
498,500
513,514
513,515
541,542
541,543
545,546
545,547
552,553
552,554
559,560
559,561
578,579
578,580
588,589
588,590
591,592
591,593
599,600
599,601
603,604
603,605
619,620
619,621
623,624
623,625
638,639
638,640
656,657
656,658
660,661
660,662
667,668
667,669
674,675
674,676
705,706
705,707
716,717
716,718
719,720
719,721
728,729
728,730
737,738
737,739
739,740
739,741
742,743
742,744
750,751
750,752
752,753
752,754
774,775
774,776
778,779
778,780
785,786
785,787
792,793
792,794
820,821
820,822
836,837
836,838
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;SwitchStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;Name;BreakStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static int jpc_dec_tiledecode(jpc_dec_t *dec, jpc_dec_tile_t *tile){	int i;	int j;	jpc_dec_tcomp_t *tcomp;	jpc_dec_rlvl_t *rlvl;	jpc_dec_band_t *band;	int compno;	int rlvlno;	int bandno;	int adjust;	int v;	jpc_dec_ccp_t *ccp;	jpc_dec_cmpt_t *cmpt;	if (jpc_dec_decodecblks(dec, tile)) {		jas_eprintf("jpc_dec_decodecblks failed\n");		return -1;	}	/* Perform dequantization. */	for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;	  ++compno, ++tcomp) {		ccp = &tile->cp->ccps[compno];		for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;		  ++rlvlno, ++rlvl) {			if (!rlvl->bands) {				continue;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				if (!band->data) {					continue;				}				jpc_undo_roi(band->data, band->roishift, ccp->roishift -				  band->roishift, band->numbps);				if (tile->realmode) {					jas_matrix_asl(band->data, JPC_FIX_FRACBITS);					jpc_dequantize(band->data, band->absstepsize);				}			}		}	}	/* Apply an inverse wavelet transform if necessary. */	for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;	  ++compno, ++tcomp) {		ccp = &tile->cp->ccps[compno];		jpc_tsfb_synthesize(tcomp->tsfb, tcomp->data);	}	/* Apply an inverse intercomponent transform if necessary. */	switch (tile->cp->mctid) {	case JPC_MCT_RCT:		assert(dec->numcomps >= 3);		jpc_irct(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data);		break;	case JPC_MCT_ICT:		assert(dec->numcomps >= 3);		jpc_iict(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data);		break;	}	/* Perform rounding and convert to integer values. */	if (tile->realmode) {		for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;		  ++compno, ++tcomp) {			for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {				for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {					v = jas_matrix_get(tcomp->data, i, j);					v = jpc_fix_round(v);					jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));				}			}		}	}	/* Perform level shift. */	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		adjust = cmpt->sgnd ? 0 : (1 << (cmpt->prec - 1));		for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {			for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {				*jas_matrix_getref(tcomp->data, i, j) += adjust;			}		}	}	/* Perform clipping. */	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		jpc_fix_t mn;		jpc_fix_t mx;		mn = cmpt->sgnd ? (-(1 << (cmpt->prec - 1))) : (0);		mx = cmpt->sgnd ? ((1 << (cmpt->prec - 1)) - 1) : ((1 <<		  cmpt->prec) - 1);		jas_matrix_clip(tcomp->data, mn, mx);	}	/* XXX need to free tsfb struct */	/* Write the data for each component of the image. */	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		if (jas_image_writecmpt(dec->image, compno, tcomp->xstart -		  JPC_CEILDIV(dec->xstart, cmpt->hstep), tcomp->ystart -		  JPC_CEILDIV(dec->ystart, cmpt->vstep), jas_matrix_numcols(		  tcomp->data), jas_matrix_numrows(tcomp->data), tcomp->data)) {			jas_eprintf("write component failed\n");			return -4;		}	}	return 0;}
static int
jpc_dec_tiledecode(jpc_dec_t *dec, jpc_dec_tile_t *tile)
jpc_dec_tiledecode
jpc_dec_t *dec
jpc_dec_t
jpc_dec_t
*dec
*
dec
jpc_dec_tile_t *tile
jpc_dec_tile_t
jpc_dec_tile_t
*tile
*
tile
{	int i;	int j;	jpc_dec_tcomp_t *tcomp;	jpc_dec_rlvl_t *rlvl;	jpc_dec_band_t *band;	int compno;	int rlvlno;	int bandno;	int adjust;	int v;	jpc_dec_ccp_t *ccp;	jpc_dec_cmpt_t *cmpt;	if (jpc_dec_decodecblks(dec, tile)) {		jas_eprintf("jpc_dec_decodecblks failed\n");		return -1;	}	/* Perform dequantization. */	for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;	  ++compno, ++tcomp) {		ccp = &tile->cp->ccps[compno];		for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;		  ++rlvlno, ++rlvl) {			if (!rlvl->bands) {				continue;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				if (!band->data) {					continue;				}				jpc_undo_roi(band->data, band->roishift, ccp->roishift -				  band->roishift, band->numbps);				if (tile->realmode) {					jas_matrix_asl(band->data, JPC_FIX_FRACBITS);					jpc_dequantize(band->data, band->absstepsize);				}			}		}	}	/* Apply an inverse wavelet transform if necessary. */	for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;	  ++compno, ++tcomp) {		ccp = &tile->cp->ccps[compno];		jpc_tsfb_synthesize(tcomp->tsfb, tcomp->data);	}	/* Apply an inverse intercomponent transform if necessary. */	switch (tile->cp->mctid) {	case JPC_MCT_RCT:		assert(dec->numcomps >= 3);		jpc_irct(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data);		break;	case JPC_MCT_ICT:		assert(dec->numcomps >= 3);		jpc_iict(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data);		break;	}	/* Perform rounding and convert to integer values. */	if (tile->realmode) {		for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;		  ++compno, ++tcomp) {			for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {				for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {					v = jas_matrix_get(tcomp->data, i, j);					v = jpc_fix_round(v);					jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));				}			}		}	}	/* Perform level shift. */	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		adjust = cmpt->sgnd ? 0 : (1 << (cmpt->prec - 1));		for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {			for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {				*jas_matrix_getref(tcomp->data, i, j) += adjust;			}		}	}	/* Perform clipping. */	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		jpc_fix_t mn;		jpc_fix_t mx;		mn = cmpt->sgnd ? (-(1 << (cmpt->prec - 1))) : (0);		mx = cmpt->sgnd ? ((1 << (cmpt->prec - 1)) - 1) : ((1 <<		  cmpt->prec) - 1);		jas_matrix_clip(tcomp->data, mn, mx);	}	/* XXX need to free tsfb struct */	/* Write the data for each component of the image. */	for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		if (jas_image_writecmpt(dec->image, compno, tcomp->xstart -		  JPC_CEILDIV(dec->xstart, cmpt->hstep), tcomp->ystart -		  JPC_CEILDIV(dec->ystart, cmpt->vstep), jas_matrix_numcols(		  tcomp->data), jas_matrix_numrows(tcomp->data), tcomp->data)) {			jas_eprintf("write component failed\n");			return -4;		}	}	return 0;}
int i;
int i;
int
i
i
int j;
int j;
int
j
j
jpc_dec_tcomp_t *tcomp;
jpc_dec_tcomp_t *tcomp;
jpc_dec_tcomp_t
jpc_dec_tcomp_t
*tcomp
*
tcomp
jpc_dec_rlvl_t *rlvl;
jpc_dec_rlvl_t *rlvl;
jpc_dec_rlvl_t
jpc_dec_rlvl_t
*rlvl
*
rlvl
jpc_dec_band_t *band;
jpc_dec_band_t *band;
jpc_dec_band_t
jpc_dec_band_t
*band
*
band
int compno;
int compno;
int
compno
compno
int rlvlno;
int rlvlno;
int
rlvlno
rlvlno
int bandno;
int bandno;
int
bandno
bandno
int adjust;
int adjust;
int
adjust
adjust
int v;
int v;
int
v
v
jpc_dec_ccp_t *ccp;
jpc_dec_ccp_t *ccp;
jpc_dec_ccp_t
jpc_dec_ccp_t
*ccp
*
ccp
jpc_dec_cmpt_t *cmpt;
jpc_dec_cmpt_t *cmpt;
jpc_dec_cmpt_t
jpc_dec_cmpt_t
*cmpt
*
cmpt
if (jpc_dec_decodecblks(dec, tile)) {		jas_eprintf("jpc_dec_decodecblks failed\n");		return -1;	}
jpc_dec_decodecblks(dec, tile)
jpc_dec_decodecblks
jpc_dec_decodecblks
dec
dec
tile
tile
{		jas_eprintf("jpc_dec_decodecblks failed\n");		return -1;	}
jas_eprintf("jpc_dec_decodecblks failed\n");
jas_eprintf("jpc_dec_decodecblks failed\n")
jas_eprintf
jas_eprintf
"jpc_dec_decodecblks failed\n"
return -1;
-1
1
for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;	  ++compno, ++tcomp) {		ccp = &tile->cp->ccps[compno];		for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;		  ++rlvlno, ++rlvl) {			if (!rlvl->bands) {				continue;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				if (!band->data) {					continue;				}				jpc_undo_roi(band->data, band->roishift, ccp->roishift -				  band->roishift, band->numbps);				if (tile->realmode) {					jas_matrix_asl(band->data, JPC_FIX_FRACBITS);					jpc_dequantize(band->data, band->absstepsize);				}			}		}	}
compno = 0, tcomp = tile->tcomps;
compno = 0, tcomp = tile->tcomps
compno = 0
compno
compno
0
tcomp = tile->tcomps
tcomp
tcomp
tile->tcomps
tile
tile
tcomps
compno < dec->numcomps
compno
compno
dec->numcomps
dec
dec
numcomps
++compno, ++tcomp
++compno
compno
compno
++tcomp
tcomp
tcomp
{		ccp = &tile->cp->ccps[compno];		for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;		  ++rlvlno, ++rlvl) {			if (!rlvl->bands) {				continue;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				if (!band->data) {					continue;				}				jpc_undo_roi(band->data, band->roishift, ccp->roishift -				  band->roishift, band->numbps);				if (tile->realmode) {					jas_matrix_asl(band->data, JPC_FIX_FRACBITS);					jpc_dequantize(band->data, band->absstepsize);				}			}		}	}
ccp = &tile->cp->ccps[compno];
ccp = &tile->cp->ccps[compno]
ccp
ccp
&tile->cp->ccps[compno]
tile->cp->ccps[compno]
tile->cp->ccps
tile->cp
tile
tile
cp
ccps
compno
compno
for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;		  ++rlvlno, ++rlvl) {			if (!rlvl->bands) {				continue;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				if (!band->data) {					continue;				}				jpc_undo_roi(band->data, band->roishift, ccp->roishift -				  band->roishift, band->numbps);				if (tile->realmode) {					jas_matrix_asl(band->data, JPC_FIX_FRACBITS);					jpc_dequantize(band->data, band->absstepsize);				}			}		}
rlvlno = 0, rlvl = tcomp->rlvls;
rlvlno = 0, rlvl = tcomp->rlvls
rlvlno = 0
rlvlno
rlvlno
0
rlvl = tcomp->rlvls
rlvl
rlvl
tcomp->rlvls
tcomp
tcomp
rlvls
rlvlno < tcomp->numrlvls
rlvlno
rlvlno
tcomp->numrlvls
tcomp
tcomp
numrlvls
++rlvlno, ++rlvl
++rlvlno
rlvlno
rlvlno
++rlvl
rlvl
rlvl
{			if (!rlvl->bands) {				continue;			}			for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				if (!band->data) {					continue;				}				jpc_undo_roi(band->data, band->roishift, ccp->roishift -				  band->roishift, band->numbps);				if (tile->realmode) {					jas_matrix_asl(band->data, JPC_FIX_FRACBITS);					jpc_dequantize(band->data, band->absstepsize);				}			}		}
if (!rlvl->bands) {				continue;			}
!rlvl->bands
rlvl->bands
rlvl
rlvl
bands
{				continue;			}
continue;
for (bandno = 0, band = rlvl->bands;			  bandno < rlvl->numbands; ++bandno, ++band) {				if (!band->data) {					continue;				}				jpc_undo_roi(band->data, band->roishift, ccp->roishift -				  band->roishift, band->numbps);				if (tile->realmode) {					jas_matrix_asl(band->data, JPC_FIX_FRACBITS);					jpc_dequantize(band->data, band->absstepsize);				}			}
bandno = 0, band = rlvl->bands;
bandno = 0, band = rlvl->bands
bandno = 0
bandno
bandno
0
band = rlvl->bands
band
band
rlvl->bands
rlvl
rlvl
bands
bandno < rlvl->numbands
bandno
bandno
rlvl->numbands
rlvl
rlvl
numbands
++bandno, ++band
++bandno
bandno
bandno
++band
band
band
{				if (!band->data) {					continue;				}				jpc_undo_roi(band->data, band->roishift, ccp->roishift -				  band->roishift, band->numbps);				if (tile->realmode) {					jas_matrix_asl(band->data, JPC_FIX_FRACBITS);					jpc_dequantize(band->data, band->absstepsize);				}			}
if (!band->data) {					continue;				}
!band->data
band->data
band
band
data
{					continue;				}
continue;
jpc_undo_roi(band->data, band->roishift, ccp->roishift -				  band->roishift, band->numbps);
jpc_undo_roi(band->data, band->roishift, ccp->roishift -				  band->roishift, band->numbps)
jpc_undo_roi
jpc_undo_roi
band->data
band
band
data
band->roishift
band
band
roishift
ccp->roishift -				  band->roishift
ccp->roishift
ccp
ccp
roishift
band->roishift
band
band
roishift
band->numbps
band
band
numbps
if (tile->realmode) {					jas_matrix_asl(band->data, JPC_FIX_FRACBITS);					jpc_dequantize(band->data, band->absstepsize);				}
tile->realmode
tile
tile
realmode
{					jas_matrix_asl(band->data, JPC_FIX_FRACBITS);					jpc_dequantize(band->data, band->absstepsize);				}
jas_matrix_asl(band->data, JPC_FIX_FRACBITS);
jas_matrix_asl(band->data, JPC_FIX_FRACBITS)
jas_matrix_asl
jas_matrix_asl
band->data
band
band
data
JPC_FIX_FRACBITS
JPC_FIX_FRACBITS
jpc_dequantize(band->data, band->absstepsize);
jpc_dequantize(band->data, band->absstepsize)
jpc_dequantize
jpc_dequantize
band->data
band
band
data
band->absstepsize
band
band
absstepsize
for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;	  ++compno, ++tcomp) {		ccp = &tile->cp->ccps[compno];		jpc_tsfb_synthesize(tcomp->tsfb, tcomp->data);	}
compno = 0, tcomp = tile->tcomps;
compno = 0, tcomp = tile->tcomps
compno = 0
compno
compno
0
tcomp = tile->tcomps
tcomp
tcomp
tile->tcomps
tile
tile
tcomps
compno < dec->numcomps
compno
compno
dec->numcomps
dec
dec
numcomps
++compno, ++tcomp
++compno
compno
compno
++tcomp
tcomp
tcomp
{		ccp = &tile->cp->ccps[compno];		jpc_tsfb_synthesize(tcomp->tsfb, tcomp->data);	}
ccp = &tile->cp->ccps[compno];
ccp = &tile->cp->ccps[compno]
ccp
ccp
&tile->cp->ccps[compno]
tile->cp->ccps[compno]
tile->cp->ccps
tile->cp
tile
tile
cp
ccps
compno
compno
jpc_tsfb_synthesize(tcomp->tsfb, tcomp->data);
jpc_tsfb_synthesize(tcomp->tsfb, tcomp->data)
jpc_tsfb_synthesize
jpc_tsfb_synthesize
tcomp->tsfb
tcomp
tcomp
tsfb
tcomp->data
tcomp
tcomp
data
switch (tile->cp->mctid) {	case JPC_MCT_RCT:		assert(dec->numcomps >= 3);		jpc_irct(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data);		break;	case JPC_MCT_ICT:		assert(dec->numcomps >= 3);		jpc_iict(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data);		break;	}
tile->cp->mctid
tile->cp
tile
tile
cp
mctid
{	case JPC_MCT_RCT:		assert(dec->numcomps >= 3);		jpc_irct(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data);		break;	case JPC_MCT_ICT:		assert(dec->numcomps >= 3);		jpc_iict(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data);		break;	}
case JPC_MCT_RCT:
JPC_MCT_RCT
JPC_MCT_RCT
assert(dec->numcomps >= 3);
assert(dec->numcomps >= 3)
assert
assert
dec->numcomps >= 3
dec->numcomps
dec
dec
numcomps
3
jpc_irct(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data);
jpc_irct(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data)
jpc_irct
jpc_irct
tile->tcomps[0].data
tile->tcomps[0]
tile->tcomps
tile
tile
tcomps
0
data
tile->tcomps[1].data
tile->tcomps[1]
tile->tcomps
tile
tile
tcomps
1
data
tile->tcomps[2].data
tile->tcomps[2]
tile->tcomps
tile
tile
tcomps
2
data
break;
case JPC_MCT_ICT:
JPC_MCT_ICT
JPC_MCT_ICT
assert(dec->numcomps >= 3);
assert(dec->numcomps >= 3)
assert
assert
dec->numcomps >= 3
dec->numcomps
dec
dec
numcomps
3
jpc_iict(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data);
jpc_iict(tile->tcomps[0].data, tile->tcomps[1].data,		  tile->tcomps[2].data)
jpc_iict
jpc_iict
tile->tcomps[0].data
tile->tcomps[0]
tile->tcomps
tile
tile
tcomps
0
data
tile->tcomps[1].data
tile->tcomps[1]
tile->tcomps
tile
tile
tcomps
1
data
tile->tcomps[2].data
tile->tcomps[2]
tile->tcomps
tile
tile
tcomps
2
data
break;
if (tile->realmode) {		for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;		  ++compno, ++tcomp) {			for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {				for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {					v = jas_matrix_get(tcomp->data, i, j);					v = jpc_fix_round(v);					jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));				}			}		}	}
tile->realmode
tile
tile
realmode
{		for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;		  ++compno, ++tcomp) {			for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {				for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {					v = jas_matrix_get(tcomp->data, i, j);					v = jpc_fix_round(v);					jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));				}			}		}	}
for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;		  ++compno, ++tcomp) {			for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {				for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {					v = jas_matrix_get(tcomp->data, i, j);					v = jpc_fix_round(v);					jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));				}			}		}
compno = 0, tcomp = tile->tcomps;
compno = 0, tcomp = tile->tcomps
compno = 0
compno
compno
0
tcomp = tile->tcomps
tcomp
tcomp
tile->tcomps
tile
tile
tcomps
compno < dec->numcomps
compno
compno
dec->numcomps
dec
dec
numcomps
++compno, ++tcomp
++compno
compno
compno
++tcomp
tcomp
tcomp
{			for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {				for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {					v = jas_matrix_get(tcomp->data, i, j);					v = jpc_fix_round(v);					jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));				}			}		}
for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {				for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {					v = jas_matrix_get(tcomp->data, i, j);					v = jpc_fix_round(v);					jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));				}			}
i = 0;
i = 0
i
i
0
i < jas_matrix_numrows(tcomp->data)
i
i
jas_matrix_numrows(tcomp->data)
jas_matrix_numrows
jas_matrix_numrows
tcomp->data
tcomp
tcomp
data
++i
i
i
{				for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {					v = jas_matrix_get(tcomp->data, i, j);					v = jpc_fix_round(v);					jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));				}			}
for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {					v = jas_matrix_get(tcomp->data, i, j);					v = jpc_fix_round(v);					jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));				}
j = 0;
j = 0
j
j
0
j < jas_matrix_numcols(tcomp->data)
j
j
jas_matrix_numcols(tcomp->data)
jas_matrix_numcols
jas_matrix_numcols
tcomp->data
tcomp
tcomp
data
++j
j
j
{					v = jas_matrix_get(tcomp->data, i, j);					v = jpc_fix_round(v);					jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));				}
v = jas_matrix_get(tcomp->data, i, j);
v = jas_matrix_get(tcomp->data, i, j)
v
v
jas_matrix_get(tcomp->data, i, j)
jas_matrix_get
jas_matrix_get
tcomp->data
tcomp
tcomp
data
i
i
j
j
v = jpc_fix_round(v);
v = jpc_fix_round(v)
v
v
jpc_fix_round(v)
jpc_fix_round
jpc_fix_round
v
v
jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v));
jas_matrix_set(tcomp->data, i, j, jpc_fixtoint(v))
jas_matrix_set
jas_matrix_set
tcomp->data
tcomp
tcomp
data
i
i
j
j
jpc_fixtoint(v)
jpc_fixtoint
jpc_fixtoint
v
v
for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		adjust = cmpt->sgnd ? 0 : (1 << (cmpt->prec - 1));		for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {			for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {				*jas_matrix_getref(tcomp->data, i, j) += adjust;			}		}	}
compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts;
compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts
compno = 0
compno
compno
0
tcomp = tile->tcomps
tcomp
tcomp
tile->tcomps
tile
tile
tcomps
cmpt = dec->cmpts
cmpt
cmpt
dec->cmpts
dec
dec
cmpts
compno <	  dec->numcomps
compno
compno
dec->numcomps
dec
dec
numcomps
++compno, ++tcomp, ++cmpt
++compno
compno
compno
++tcomp
tcomp
tcomp
++cmpt
cmpt
cmpt
{		adjust = cmpt->sgnd ? 0 : (1 << (cmpt->prec - 1));		for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {			for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {				*jas_matrix_getref(tcomp->data, i, j) += adjust;			}		}	}
adjust = cmpt->sgnd ? 0 : (1 << (cmpt->prec - 1));
adjust = cmpt->sgnd ? 0 : (1 << (cmpt->prec - 1))
adjust
adjust
cmpt->sgnd ? 0 : (1 << (cmpt->prec - 1))
cmpt->sgnd
cmpt
cmpt
sgnd
0
(1 << (cmpt->prec - 1))
1 << (cmpt->prec - 1)
1
(cmpt->prec - 1)
cmpt->prec - 1
cmpt->prec
cmpt
cmpt
prec
1
for (i = 0; i < jas_matrix_numrows(tcomp->data); ++i) {			for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {				*jas_matrix_getref(tcomp->data, i, j) += adjust;			}		}
i = 0;
i = 0
i
i
0
i < jas_matrix_numrows(tcomp->data)
i
i
jas_matrix_numrows(tcomp->data)
jas_matrix_numrows
jas_matrix_numrows
tcomp->data
tcomp
tcomp
data
++i
i
i
{			for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {				*jas_matrix_getref(tcomp->data, i, j) += adjust;			}		}
for (j = 0; j < jas_matrix_numcols(tcomp->data); ++j) {				*jas_matrix_getref(tcomp->data, i, j) += adjust;			}
j = 0;
j = 0
j
j
0
j < jas_matrix_numcols(tcomp->data)
j
j
jas_matrix_numcols(tcomp->data)
jas_matrix_numcols
jas_matrix_numcols
tcomp->data
tcomp
tcomp
data
++j
j
j
{				*jas_matrix_getref(tcomp->data, i, j) += adjust;			}
*jas_matrix_getref(tcomp->data, i, j) += adjust;
*jas_matrix_getref(tcomp->data, i, j) += adjust
*jas_matrix_getref(tcomp->data, i, j)
jas_matrix_getref(tcomp->data, i, j)
jas_matrix_getref
jas_matrix_getref
tcomp->data
tcomp
tcomp
data
i
i
j
j
adjust
adjust
for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		jpc_fix_t mn;		jpc_fix_t mx;		mn = cmpt->sgnd ? (-(1 << (cmpt->prec - 1))) : (0);		mx = cmpt->sgnd ? ((1 << (cmpt->prec - 1)) - 1) : ((1 <<		  cmpt->prec) - 1);		jas_matrix_clip(tcomp->data, mn, mx);	}
compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts;
compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts
compno = 0
compno
compno
0
tcomp = tile->tcomps
tcomp
tcomp
tile->tcomps
tile
tile
tcomps
cmpt = dec->cmpts
cmpt
cmpt
dec->cmpts
dec
dec
cmpts
compno <	  dec->numcomps
compno
compno
dec->numcomps
dec
dec
numcomps
++compno, ++tcomp, ++cmpt
++compno
compno
compno
++tcomp
tcomp
tcomp
++cmpt
cmpt
cmpt
{		jpc_fix_t mn;		jpc_fix_t mx;		mn = cmpt->sgnd ? (-(1 << (cmpt->prec - 1))) : (0);		mx = cmpt->sgnd ? ((1 << (cmpt->prec - 1)) - 1) : ((1 <<		  cmpt->prec) - 1);		jas_matrix_clip(tcomp->data, mn, mx);	}
jpc_fix_t mn;
jpc_fix_t mn;
jpc_fix_t
jpc_fix_t
mn
mn
jpc_fix_t mx;
jpc_fix_t mx;
jpc_fix_t
jpc_fix_t
mx
mx
mn = cmpt->sgnd ? (-(1 << (cmpt->prec - 1))) : (0);
mn = cmpt->sgnd ? (-(1 << (cmpt->prec - 1))) : (0)
mn
mn
cmpt->sgnd ? (-(1 << (cmpt->prec - 1))) : (0)
cmpt->sgnd
cmpt
cmpt
sgnd
(-(1 << (cmpt->prec - 1)))
-(1 << (cmpt->prec - 1))
(1 << (cmpt->prec - 1))
1 << (cmpt->prec - 1)
1
(cmpt->prec - 1)
cmpt->prec - 1
cmpt->prec
cmpt
cmpt
prec
1
(0)
0
mx = cmpt->sgnd ? ((1 << (cmpt->prec - 1)) - 1) : ((1 <<		  cmpt->prec) - 1);
mx = cmpt->sgnd ? ((1 << (cmpt->prec - 1)) - 1) : ((1 <<		  cmpt->prec) - 1)
mx
mx
cmpt->sgnd ? ((1 << (cmpt->prec - 1)) - 1) : ((1 <<		  cmpt->prec) - 1)
cmpt->sgnd
cmpt
cmpt
sgnd
((1 << (cmpt->prec - 1)) - 1)
(1 << (cmpt->prec - 1)) - 1
(1 << (cmpt->prec - 1))
1 << (cmpt->prec - 1)
1
(cmpt->prec - 1)
cmpt->prec - 1
cmpt->prec
cmpt
cmpt
prec
1
1
((1 <<		  cmpt->prec) - 1)
(1 <<		  cmpt->prec) - 1
(1 <<		  cmpt->prec)
1 <<		  cmpt->prec
1
cmpt->prec
cmpt
cmpt
prec
1
jas_matrix_clip(tcomp->data, mn, mx);
jas_matrix_clip(tcomp->data, mn, mx)
jas_matrix_clip
jas_matrix_clip
tcomp->data
tcomp
tcomp
data
mn
mn
mx
mx
for (compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts; compno <	  dec->numcomps; ++compno, ++tcomp, ++cmpt) {		if (jas_image_writecmpt(dec->image, compno, tcomp->xstart -		  JPC_CEILDIV(dec->xstart, cmpt->hstep), tcomp->ystart -		  JPC_CEILDIV(dec->ystart, cmpt->vstep), jas_matrix_numcols(		  tcomp->data), jas_matrix_numrows(tcomp->data), tcomp->data)) {			jas_eprintf("write component failed\n");			return -4;		}	}
compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts;
compno = 0, tcomp = tile->tcomps, cmpt = dec->cmpts
compno = 0
compno
compno
0
tcomp = tile->tcomps
tcomp
tcomp
tile->tcomps
tile
tile
tcomps
cmpt = dec->cmpts
cmpt
cmpt
dec->cmpts
dec
dec
cmpts
compno <	  dec->numcomps
compno
compno
dec->numcomps
dec
dec
numcomps
++compno, ++tcomp, ++cmpt
++compno
compno
compno
++tcomp
tcomp
tcomp
++cmpt
cmpt
cmpt
{		if (jas_image_writecmpt(dec->image, compno, tcomp->xstart -		  JPC_CEILDIV(dec->xstart, cmpt->hstep), tcomp->ystart -		  JPC_CEILDIV(dec->ystart, cmpt->vstep), jas_matrix_numcols(		  tcomp->data), jas_matrix_numrows(tcomp->data), tcomp->data)) {			jas_eprintf("write component failed\n");			return -4;		}	}
if (jas_image_writecmpt(dec->image, compno, tcomp->xstart -		  JPC_CEILDIV(dec->xstart, cmpt->hstep), tcomp->ystart -		  JPC_CEILDIV(dec->ystart, cmpt->vstep), jas_matrix_numcols(		  tcomp->data), jas_matrix_numrows(tcomp->data), tcomp->data)) {			jas_eprintf("write component failed\n");			return -4;		}
jas_image_writecmpt(dec->image, compno, tcomp->xstart -		  JPC_CEILDIV(dec->xstart, cmpt->hstep), tcomp->ystart -		  JPC_CEILDIV(dec->ystart, cmpt->vstep), jas_matrix_numcols(		  tcomp->data), jas_matrix_numrows(tcomp->data), tcomp->data)
jas_image_writecmpt
jas_image_writecmpt
dec->image
dec
dec
image
compno
compno
tcomp->xstart -		  JPC_CEILDIV(dec->xstart, cmpt->hstep)
tcomp->xstart
tcomp
tcomp
xstart
JPC_CEILDIV(dec->xstart, cmpt->hstep)
JPC_CEILDIV
JPC_CEILDIV
dec->xstart
dec
dec
xstart
cmpt->hstep
cmpt
cmpt
hstep
tcomp->ystart -		  JPC_CEILDIV(dec->ystart, cmpt->vstep)
tcomp->ystart
tcomp
tcomp
ystart
JPC_CEILDIV(dec->ystart, cmpt->vstep)
JPC_CEILDIV
JPC_CEILDIV
dec->ystart
dec
dec
ystart
cmpt->vstep
cmpt
cmpt
vstep
jas_matrix_numcols(		  tcomp->data)
jas_matrix_numcols
jas_matrix_numcols
tcomp->data
tcomp
tcomp
data
jas_matrix_numrows(tcomp->data)
jas_matrix_numrows
jas_matrix_numrows
tcomp->data
tcomp
tcomp
data
tcomp->data
tcomp
tcomp
data
{			jas_eprintf("write component failed\n");			return -4;		}
jas_eprintf("write component failed\n");
jas_eprintf("write component failed\n")
jas_eprintf
jas_eprintf
"write component failed\n"
return -4;
-4
4
return 0;
0
-----joern-----
(36,451,0)
(335,427,0)
(312,537,0)
(492,298,0)
(280,5,0)
(73,467,0)
(309,71,0)
(114,438,0)
(521,169,0)
(527,219,0)
(456,220,0)
(356,124,0)
(304,468,0)
(339,308,0)
(285,380,0)
(41,355,0)
(323,440,0)
(382,265,0)
(152,64,0)
(68,124,0)
(201,534,0)
(0,373,0)
(429,317,0)
(259,367,0)
(276,399,0)
(44,274,0)
(341,83,0)
(507,330,0)
(529,21,0)
(293,64,0)
(514,427,0)
(260,268,0)
(71,56,0)
(113,25,0)
(214,124,0)
(399,440,0)
(38,363,0)
(193,32,0)
(368,489,0)
(357,124,0)
(511,49,0)
(44,468,0)
(294,64,0)
(292,27,0)
(287,35,0)
(222,286,0)
(267,430,0)
(481,426,0)
(425,152,0)
(83,468,0)
(130,368,0)
(368,468,0)
(548,435,0)
(290,146,0)
(320,304,0)
(70,226,0)
(399,434,0)
(96,449,0)
(28,214,0)
(367,468,0)
(372,322,0)
(180,268,0)
(417,23,0)
(276,70,0)
(213,441,0)
(157,358,0)
(445,506,0)
(399,547,0)
(7,468,0)
(424,335,0)
(258,435,0)
(350,390,0)
(254,350,0)
(355,83,0)
(134,1,0)
(455,219,0)
(399,73,0)
(385,502,0)
(187,44,0)
(297,198,0)
(41,238,0)
(447,72,0)
(0,219,0)
(197,120,0)
(70,340,0)
(448,32,0)
(300,425,0)
(215,248,0)
(54,468,0)
(389,124,0)
(101,38,0)
(328,265,0)
(225,53,0)
(70,24,0)
(44,431,0)
(375,64,0)
(399,448,0)
(431,64,0)
(526,0,0)
(70,459,0)
(469,289,0)
(455,547,0)
(248,130,0)
(399,185,0)
(200,530,0)
(467,506,0)
(0,90,0)
(1,263,0)
(389,452,0)
(363,13,0)
(399,333,0)
(224,234,0)
(0,357,0)
(462,62,0)
(371,123,0)
(369,265,0)
(547,146,0)
(289,402,0)
(93,261,0)
(91,7,0)
(284,322,0)
(70,398,0)
(26,294,0)
(320,35,0)
(410,15,0)
(371,313,0)
(0,232,0)
(67,364,0)
(539,298,0)
(70,108,0)
(220,456,0)
(308,71,0)
(83,467,0)
(404,64,0)
(384,18,0)
(21,162,0)
(427,514,0)
(92,164,0)
(175,311,0)
(104,479,0)
(0,243,0)
(5,265,0)
(306,468,0)
(436,108,0)
(131,247,0)
(216,158,0)
(399,108,0)
(446,64,0)
(390,468,0)
(330,507,0)
(331,260,0)
(118,119,0)
(439,361,0)
(507,468,0)
(333,32,0)
(5,410,0)
(0,425,0)
(0,108,0)
(220,64,0)
(0,24,0)
(485,380,0)
(464,335,0)
(115,478,0)
(142,361,0)
(66,530,0)
(29,123,0)
(70,5,0)
(376,311,0)
(371,31,0)
(522,26,0)
(527,73,0)
(463,357,0)
(17,476,0)
(70,440,0)
(524,331,0)
(408,532,0)
(166,17,0)
(261,397,0)
(525,326,0)
(298,329,0)
(241,67,0)
(438,468,0)
(419,366,0)
(493,429,0)
(35,7,0)
(291,311,0)
(510,309,0)
(158,286,0)
(0,144,0)
(399,243,0)
(72,441,0)
(288,286,0)
(103,284,0)
(206,62,0)
(269,311,0)
(332,311,0)
(0,478,0)
(74,494,0)
(398,468,0)
(548,151,0)
(302,243,0)
(372,49,0)
(399,53,0)
(6,162,0)
(431,98,0)
(336,286,0)
(169,50,0)
(440,18,0)
(548,330,0)
(0,434,0)
(202,430,0)
(399,193,0)
(550,265,0)
(70,478,0)
(19,226,0)
(99,250,0)
(70,367,0)
(506,467,0)
(344,229,0)
(491,451,0)
(397,15,0)
(399,356,0)
(493,182,0)
(546,95,0)
(364,67,0)
(226,468,0)
(382,76,0)
(260,331,0)
(275,250,0)
(312,482,0)
(266,298,0)
(352,482,0)
(276,0,0)
(409,357,0)
(0,513,0)
(474,429,0)
(536,32,0)
(405,380,0)
(430,267,0)
(243,468,0)
(489,64,0)
(0,226,0)
(399,367,0)
(134,294,0)
(31,286,0)
(457,117,0)
(295,496,0)
(413,423,0)
(80,550,0)
(366,331,0)
(132,368,0)
(30,123,0)
(494,476,0)
(435,468,0)
(399,125,0)
(245,506,0)
(454,373,0)
(426,117,0)
(20,304,0)
(32,2,0)
(7,35,0)
(13,504,0)
(399,443,0)
(472,398,0)
(303,457,0)
(203,150,0)
(407,470,0)
(226,141,0)
(0,440,0)
(313,468,0)
(534,468,0)
(23,31,0)
(307,423,0)
(81,494,0)
(77,438,0)
(505,492,0)
(0,333,0)
(31,371,0)
(357,541,0)
(271,260,0)
(480,104,0)
(70,453,0)
(49,2,0)
(48,400,0)
(194,199,0)
(304,320,0)
(389,541,0)
(380,112,0)
(228,26,0)
(455,108,0)
(456,311,0)
(232,124,0)
(244,267,0)
(172,49,0)
(484,193,0)
(509,29,0)
(11,90,0)
(50,298,0)
(527,367,0)
(263,468,0)
(543,365,0)
(229,344,0)
(170,511,0)
(518,541,0)
(399,478,0)
(373,32,0)
(219,147,0)
(400,124,0)
(547,468,0)
(255,369,0)
(452,128,0)
(251,344,0)
(164,147,0)
(398,248,0)
(494,81,0)
(455,459,0)
(440,265,0)
(90,504,0)
(69,340,0)
(316,124,0)
(399,530,0)
(390,504,0)
(527,359,0)
(455,367,0)
(399,326,0)
(130,248,0)
(90,468,0)
(399,219,0)
(435,548,0)
(422,44,0)
(33,67,0)
(306,141,0)
(466,468,0)
(177,372,0)
(478,468,0)
(67,241,0)
(273,233,0)
(262,162,0)
(415,441,0)
(319,185,0)
(49,204,0)
(275,229,0)
(334,198,0)
(154,182,0)
(128,452,0)
(105,58,0)
(116,538,0)
(191,24,0)
(279,306,0)
(414,263,0)
(150,468,0)
(443,124,0)
(119,467,0)
(22,50,0)
(170,393,0)
(399,68,0)
(262,343,0)
(542,90,0)
(417,330,0)
(199,147,0)
(160,284,0)
(108,468,0)
(447,265,0)
(383,5,0)
(0,530,0)
(470,417,0)
(70,125,0)
(204,146,0)
(156,124,0)
(26,468,0)
(135,510,0)
(70,36,0)
(402,64,0)
(85,368,0)
(0,125,0)
(234,32,0)
(511,479,0)
(141,332,0)
(18,15,0)
(98,311,0)
(425,468,0)
(0,437,0)
(510,431,0)
(474,218,0)
(198,147,0)
(178,513,0)
(124,335,0)
(438,95,0)
(24,41,0)
(537,312,0)
(350,123,0)
(117,457,0)
(62,404,0)
(24,468,0)
(309,250,0)
(368,130,0)
(153,384,0)
(318,366,0)
(515,31,0)
(59,389,0)
(399,36,0)
(239,179,0)
(117,426,0)
(399,453,0)
(399,24,0)
(72,537,0)
(294,55,0)
(269,404,0)
(147,198,0)
(473,144,0)
(399,236,0)
(315,219,0)
(123,75,0)
(267,291,0)
(60,434,0)
(527,340,0)
(23,417,0)
(43,510,0)
(459,468,0)
(540,447,0)
(432,316,0)
(42,459,0)
(0,53,0)
(306,153,0)
(404,269,0)
(335,124,0)
(247,311,0)
(0,534,0)
(70,97,0)
(10,83,0)
(89,313,0)
(167,112,0)
(104,343,0)
(0,326,0)
(437,303,0)
(26,117,0)
(311,64,0)
(507,294,0)
(476,494,0)
(387,474,0)
(70,171,0)
(0,316,0)
(0,68,0)
(242,129,0)
(179,124,0)
(489,247,0)
(380,405,0)
(62,457,0)
(340,468,0)
(112,64,0)
(268,467,0)
(111,507,0)
(457,303,0)
(106,99,0)
(149,482,0)
(125,265,0)
(55,294,0)
(412,466,0)
(411,232,0)
(475,36,0)
(308,141,0)
(223,333,0)
(14,429,0)
(70,425,0)
(122,70,0)
(0,459,0)
(278,547,0)
(482,468,0)
(175,483,0)
(56,286,0)
(511,170,0)
(331,524,0)
(97,81,0)
(403,534,0)
(129,286,0)
(399,226,0)
(534,449,0)
(308,468,0)
(367,483,0)
(374,156,0)
(276,527,0)
(215,405,0)
(188,456,0)
(268,260,0)
(338,478,0)
(234,345,0)
(423,413,0)
(361,365,0)
(208,108,0)
(531,313,0)
(537,72,0)
(195,64,0)
(0,185,0)
(128,322,0)
(161,15,0)
(78,502,0)
(399,144,0)
(54,141,0)
(13,363,0)
(455,73,0)
(384,153,0)
(6,413,0)
(171,112,0)
(71,308,0)
(322,15,0)
(426,199,0)
(327,7,0)
(498,447,0)
(399,442,0)
(121,97,0)
(527,226,0)
(362,345,0)
(467,64,0)
(417,470,0)
(186,179,0)
(483,64,0)
(0,398,0)
(193,210,0)
(455,24,0)
(365,361,0)
(510,468,0)
(483,175,0)
(399,437,0)
(53,124,0)
(185,107,0)
(0,453,0)
(519,437,0)
(316,27,0)
(399,340,0)
(364,311,0)
(246,226,0)
(455,243,0)
(143,268,0)
(155,269,0)
(420,156,0)
(413,372,0)
(399,316,0)
(312,550,0)
(212,400,0)
(198,311,0)
(478,294,0)
(52,362,0)
(430,299,0)
(309,510,0)
(369,146,0)
(119,94,0)
(153,284,0)
(0,193,0)
(146,94,0)
(185,124,0)
(410,537,0)
(320,518,0)
(17,311,0)
(441,483,0)
(349,128,0)
(452,181,0)
(301,269,0)
(241,322,0)
(272,304,0)
(274,130,0)
(150,112,0)
(65,162,0)
(156,303,0)
(169,468,0)
(363,38,0)
(37,97,0)
(381,376,0)
(549,236,0)
(482,312,0)
(497,54,0)
(76,384,0)
(72,447,0)
(482,404,0)
(447,479,0)
(263,1,0)
(527,108,0)
(265,369,0)
(119,468,0)
(416,64,0)
(332,141,0)
(434,265,0)
(399,400,0)
(399,5,0)
(490,161,0)
(499,193,0)
(437,124,0)
(544,73,0)
(406,98,0)
(465,435,0)
(457,62,0)
(455,478,0)
(141,64,0)
(396,94,0)
(541,286,0)
(86,232,0)
(361,142,0)
(399,214,0)
(139,332,0)
(100,164,0)
(230,365,0)
(71,309,0)
(56,71,0)
(311,291,0)
(29,346,0)
(441,72,0)
(62,468,0)
(401,215,0)
(282,367,0)
(434,161,0)
(466,220,0)
(263,483,0)
(305,107,0)
(0,179,0)
(87,175,0)
(399,179,0)
(284,265,0)
(40,204,0)
(394,119,0)
(0,97,0)
(517,243,0)
(423,56,0)
(377,371,0)
(399,357,0)
(322,241,0)
(32,366,0)
(550,312,0)
(479,15,0)
(104,49,0)
(67,429,0)
(496,286,0)
(70,73,0)
(386,389,0)
(120,346,0)
(199,426,0)
(471,306,0)
(7,489,0)
(97,265,0)
(284,153,0)
(313,112,0)
(240,453,0)
(268,468,0)
(151,286,0)
(53,56,0)
(423,124,0)
(173,358,0)
(70,547,0)
(399,425,0)
(257,476,0)
(303,286,0)
(12,222,0)
(520,229,0)
(63,390,0)
(455,226,0)
(276,455,0)
(179,331,0)
(488,99,0)
(140,171,0)
(70,513,0)
(533,275,0)
(370,369,0)
(68,496,0)
(70,219,0)
(209,214,0)
(337,144,0)
(354,171,0)
(171,468,0)
(58,218,0)
(512,13,0)
(0,171,0)
(351,247,0)
(358,124,0)
(229,286,0)
(362,49,0)
(476,17,0)
(264,332,0)
(399,513,0)
(444,382,0)
(366,124,0)
(0,64,0)
(61,466,0)
(94,396,0)
(217,175,0)
(379,68,0)
(176,356,0)
(215,468,0)
(502,220,0)
(125,479,0)
(70,90,0)
(541,518,0)
(84,64,0)
(452,389,0)
(236,262,0)
(94,119,0)
(98,431,0)
(426,31,0)
(551,55,0)
(0,340,0)
(248,64,0)
(9,429,0)
(138,98,0)
(390,350,0)
(168,169,0)
(99,468,0)
(109,219,0)
(455,340,0)
(405,215,0)
(16,288,0)
(54,274,0)
(0,36,0)
(418,550,0)
(283,128,0)
(321,64,0)
(4,289,0)
(466,518,0)
(1,134,0)
(384,76,0)
(76,382,0)
(399,97,0)
(181,162,0)
(281,456,0)
(164,167,0)
(79,511,0)
(102,23,0)
(443,288,0)
(356,25,0)
(523,64,0)
(296,373,0)
(355,41,0)
(0,547,0)
(399,261,0)
(250,275,0)
(340,220,0)
(324,24,0)
(0,214,0)
(527,459,0)
(55,311,0)
(3,364,0)
(492,174,0)
(182,397,0)
(393,162,0)
(221,316,0)
(18,384,0)
(451,15,0)
(25,286,0)
(470,147,0)
(147,64,0)
(144,124,0)
(313,371,0)
(235,134,0)
(392,65,0)
(399,232,0)
(530,6,0)
(455,256,0)
(136,364,0)
(433,204,0)
(156,170,0)
(169,467,0)
(513,468,0)
(237,54,0)
(513,427,0)
(550,479,0)
(128,49,0)
(150,344,0)
(399,90,0)
(170,156,0)
(265,317,0)
(358,343,0)
(0,356,0)
(508,124,0)
(120,124,0)
(182,493,0)
(36,265,0)
(405,504,0)
(211,443,0)
(274,54,0)
(345,174,0)
(0,261,0)
(527,24,0)
(189,390,0)
(13,468,0)
(184,443,0)
(314,440,0)
(372,413,0)
(107,286,0)
(192,36,0)
(51,333,0)
(0,400,0)
(421,275,0)
(344,123,0)
(504,405,0)
(358,151,0)
(487,382,0)
(167,164,0)
(127,448,0)
(495,470,0)
(363,427,0)
(399,459,0)
(46,185,0)
(95,429,0)
(458,311,0)
(204,49,0)
(343,104,0)
(450,425,0)
(428,402,0)
(289,468,0)
(210,162,0)
(344,150,0)
(112,167,0)
(530,32,0)
(207,423,0)
(479,142,0)
(502,468,0)
(94,146,0)
(373,181,0)
(0,5,0)
(99,489,0)
(270,64,0)
(382,322,0)
(243,431,0)
(1,167,0)
(163,142,0)
(502,76,0)
(181,452,0)
(0,443,0)
(506,311,0)
(137,199,0)
(232,151,0)
(57,326,0)
(365,311,0)
(503,448,0)
(0,448,0)
(117,26,0)
(167,1,0)
(110,286,0)
(397,182,0)
(393,170,0)
(153,306,0)
(343,262,0)
(0,73,0)
(388,150,0)
(274,44,0)
(353,372,0)
(501,64,0)
(330,417,0)
(249,134,0)
(310,64,0)
(247,489,0)
(400,158,0)
(39,396,0)
(34,398,0)
(493,376,0)
(58,265,0)
(134,468,0)
(291,267,0)
(330,548,0)
(70,261,0)
(95,438,0)
(73,468,0)
(527,478,0)
(146,290,0)
(130,274,0)
(366,32,0)
(304,431,0)
(461,263,0)
(260,271,0)
(165,430,0)
(342,68,0)
(236,32,0)
(453,265,0)
(326,65,0)
(159,376,0)
(261,265,0)
(399,398,0)
(76,502,0)
(142,479,0)
(369,468,0)
(335,468,0)
(81,15,0)
(535,241,0)
(477,547,0)
(325,17,0)
(108,489,0)
(378,507,0)
(453,322,0)
(199,468,0)
(151,548,0)
(145,356,0)
(0,236,0)
(0,367,0)
(133,73,0)
(343,358,0)
(205,493,0)
(399,373,0)
(238,41,0)
(204,468,0)
(196,122,0)
(470,468,0)
(527,243,0)
(476,429,0)
(438,467,0)
(459,404,0)
(27,286,0)
(460,123,0)
(233,527,0)
(164,468,0)
(252,210,0)
(250,309,0)
(231,453,0)
(399,171,0)
(124,75,0)
(380,468,0)
(8,513,0)
(516,459,0)
(219,468,0)
(190,215,0)
(50,169,0)
(538,455,0)
(183,23,0)
(347,261,0)
(2,329,0)
(35,320,0)
(88,64,0)
(449,64,0)
(214,129,0)
(395,125,0)
(537,410,0)
(253,13,0)
(227,437,0)
(70,47,0)
(413,6,0)
(361,429,0)
(441,468,0)
(448,393,0)
(0,289,0)
(82,434,0)
(528,53,0)
(427,363,0)
(70,243,0)
(504,64,0)
(435,483,0)
(518,320,0)
(45,236,0)
(250,99,0)
(144,222,0)
(35,229,0)
(391,55,0)
(83,355,0)
(70,434,0)
(348,104,0)
(532,399,0)
(376,493,0)
(518,466,0)
(148,511,0)
(277,152,0)
(360,64,0)
(333,21,0)
(126,125,0)
(326,32,0)
(486,271,0)
(545,340,0)
(500,308,0)
(470,468,1)
(156,420,1)
(389,59,1)
(182,154,1)
(485,285,1)
(108,468,1)
(24,468,1)
(333,223,1)
(242,214,1)
(60,451,1)
(399,24,1)
(399,367,1)
(313,89,1)
(399,373,1)
(469,449,1)
(298,539,1)
(70,340,1)
(285,90,1)
(322,241,1)
(121,95,1)
(70,90,1)
(124,335,1)
(127,65,1)
(0,108,1)
(454,296,1)
(54,141,1)
(176,107,1)
(275,229,1)
(518,320,1)
(131,351,1)
(67,364,1)
(70,440,1)
(202,165,1)
(497,237,1)
(268,467,1)
(465,330,1)
(0,437,1)
(326,57,1)
(399,513,1)
(58,105,1)
(30,460,1)
(115,489,1)
(342,379,1)
(429,9,1)
(509,50,1)
(40,172,1)
(361,365,1)
(486,268,1)
(297,219,1)
(515,350,1)
(175,217,1)
(0,144,1)
(231,240,1)
(0,453,1)
(245,445,1)
(237,398,1)
(70,36,1)
(72,447,1)
(538,116,1)
(246,483,1)
(466,468,1)
(92,100,1)
(353,177,1)
(308,468,1)
(533,510,1)
(199,468,1)
(448,32,1)
(374,448,1)
(0,171,1)
(358,124,1)
(403,350,1)
(5,383,1)
(0,243,1)
(399,171,1)
(280,322,1)
(332,311,1)
(550,418,1)
(76,502,1)
(272,357,1)
(466,220,1)
(222,12,1)
(81,494,1)
(153,284,1)
(198,311,1)
(476,429,1)
(399,144,1)
(70,243,1)
(377,515,1)
(56,71,1)
(169,467,1)
(0,340,1)
(532,408,1)
(493,429,1)
(0,214,1)
(320,35,1)
(420,374,1)
(150,388,1)
(399,398,1)
(0,73,1)
(495,23,1)
(51,6,1)
(548,330,1)
(362,49,1)
(333,32,1)
(340,468,1)
(62,404,1)
(306,141,1)
(216,400,1)
(0,289,1)
(57,525,1)
(431,98,1)
(70,434,1)
(314,410,1)
(373,454,1)
(226,468,1)
(447,265,1)
(23,102,1)
(493,376,1)
(35,229,1)
(130,274,1)
(371,123,1)
(96,534,1)
(488,106,1)
(413,372,1)
(0,36,1)
(354,152,1)
(467,506,1)
(71,309,1)
(0,90,1)
(417,470,1)
(31,371,1)
(341,10,1)
(289,468,1)
(496,295,1)
(109,315,1)
(0,333,1)
(169,521,1)
(271,486,1)
(437,519,1)
(0,219,1)
(392,326,1)
(263,468,1)
(59,386,1)
(99,488,1)
(70,24,1)
(399,193,1)
(437,124,1)
(164,92,1)
(390,504,1)
(526,402,1)
(529,333,1)
(12,144,1)
(408,524,1)
(390,189,1)
(108,208,1)
(425,450,1)
(54,497,1)
(435,483,1)
(481,26,1)
(263,461,1)
(18,384,1)
(399,434,1)
(451,491,1)
(83,467,1)
(141,332,1)
(383,280,1)
(71,308,1)
(397,182,1)
(275,421,1)
(423,56,1)
(324,467,1)
(295,68,1)
(438,468,1)
(527,108,1)
(338,115,1)
(350,123,1)
(111,378,1)
(277,425,1)
(372,322,1)
(73,468,1)
(0,526,1)
(406,243,1)
(257,17,1)
(382,487,1)
(492,298,1)
(117,26,1)
(390,468,1)
(550,479,1)
(417,23,1)
(507,468,1)
(244,430,1)
(534,201,1)
(453,231,1)
(83,341,1)
(122,196,1)
(399,125,1)
(6,413,1)
(447,479,1)
(426,31,1)
(239,186,1)
(457,117,1)
(399,232,1)
(217,87,1)
(399,440,1)
(266,524,1)
(508,123,1)
(70,219,1)
(334,297,1)
(53,124,1)
(26,228,1)
(24,191,1)
(316,432,1)
(1,263,1)
(190,380,1)
(369,370,1)
(459,42,1)
(428,289,1)
(389,124,1)
(4,469,1)
(13,504,1)
(0,534,1)
(262,343,1)
(511,479,1)
(335,464,1)
(180,179,1)
(235,249,1)
(330,417,1)
(114,77,1)
(16,443,1)
(97,265,1)
(489,247,1)
(204,468,1)
(491,36,1)
(151,548,1)
(527,340,1)
(466,412,1)
(26,294,1)
(142,163,1)
(438,467,1)
(170,156,1)
(0,373,1)
(537,312,1)
(527,226,1)
(274,44,1)
(28,209,1)
(399,108,1)
(148,156,1)
(461,414,1)
(328,429,1)
(546,265,1)
(207,307,1)
(42,516,1)
(185,319,1)
(135,43,1)
(407,495,1)
(14,290,1)
(517,294,1)
(412,61,1)
(182,493,1)
(205,376,1)
(484,50,1)
(455,340,1)
(350,390,1)
(70,226,1)
(462,206,1)
(116,290,1)
(300,95,1)
(399,356,1)
(478,468,1)
(26,468,1)
(331,260,1)
(510,431,1)
(228,522,1)
(48,129,1)
(125,395,1)
(459,468,1)
(502,385,1)
(236,32,1)
(399,236,1)
(399,5,1)
(78,153,1)
(474,429,1)
(399,443,1)
(144,124,1)
(551,391,1)
(421,533,1)
(363,13,1)
(384,76,1)
(358,157,1)
(136,453,1)
(399,530,1)
(269,311,1)
(253,513,1)
(0,53,1)
(528,225,1)
(137,194,1)
(70,108,1)
(455,24,1)
(303,457,1)
(191,324,1)
(368,85,1)
(410,537,1)
(289,4,1)
(316,124,1)
(366,124,1)
(478,338,1)
(150,468,1)
(179,124,1)
(76,382,1)
(399,425,1)
(494,476,1)
(349,283,1)
(260,268,1)
(99,489,1)
(402,428,1)
(543,125,1)
(455,73,1)
(308,339,1)
(514,427,1)
(36,475,1)
(460,514,1)
(157,173,1)
(456,281,1)
(154,493,1)
(547,468,1)
(234,32,1)
(249,263,1)
(475,192,1)
(380,468,1)
(0,459,1)
(387,161,1)
(94,396,1)
(126,397,1)
(544,431,1)
(142,361,1)
(548,435,1)
(320,304,1)
(382,265,1)
(367,468,1)
(527,233,1)
(198,334,1)
(27,292,1)
(185,124,1)
(368,468,1)
(506,311,1)
(7,468,1)
(482,468,1)
(534,468,1)
(378,232,1)
(171,468,1)
(415,213,1)
(177,423,1)
(165,458,1)
(11,542,1)
(173,236,1)
(79,148,1)
(283,389,1)
(498,540,1)
(366,318,1)
(258,465,1)
(279,471,1)
(357,463,1)
(399,226,1)
(80,482,1)
(70,125,1)
(510,468,1)
(432,221,1)
(210,252,1)
(474,387,1)
(276,455,1)
(388,203,1)
(3,136,1)
(372,353,1)
(511,79,1)
(541,518,1)
(159,381,1)
(373,32,1)
(355,83,1)
(435,258,1)
(414,171,1)
(0,367,1)
(479,142,1)
(399,340,1)
(304,20,1)
(90,468,1)
(399,179,1)
(112,167,1)
(0,356,1)
(0,193,1)
(358,151,1)
(100,1,1)
(443,184,1)
(0,24,1)
(344,150,1)
(435,468,1)
(356,145,1)
(97,37,1)
(267,430,1)
(423,124,1)
(399,90,1)
(34,472,1)
(65,392,1)
(147,198,1)
(0,226,1)
(540,441,1)
(52,492,1)
(0,232,1)
(203,251,1)
(155,301,1)
(10,24,1)
(70,122,1)
(23,31,1)
(197,29,1)
(160,103,1)
(215,468,1)
(376,311,1)
(187,54,1)
(500,309,1)
(129,242,1)
(473,337,1)
(104,479,1)
(43,53,1)
(206,117,1)
(273,238,1)
(99,468,1)
(194,481,1)
(200,66,1)
(37,121,1)
(167,1,1)
(312,550,1)
(134,235,1)
(537,72,1)
(457,62,1)
(158,216,1)
(234,224,1)
(199,147,1)
(1,134,1)
(83,468,1)
(527,459,1)
(240,479,1)
(0,185,1)
(0,316,1)
(55,551,1)
(0,547,1)
(128,49,1)
(223,51,1)
(219,468,1)
(530,32,1)
(107,305,1)
(274,54,1)
(175,311,1)
(29,509,1)
(471,440,1)
(525,210,1)
(62,462,1)
(365,230,1)
(296,393,1)
(95,429,1)
(0,443,1)
(215,248,1)
(233,273,1)
(17,311,1)
(247,311,1)
(327,91,1)
(483,175,1)
(507,111,1)
(516,311,1)
(241,67,1)
(119,118,1)
(9,14,1)
(369,146,1)
(364,3,1)
(130,368,1)
(452,389,1)
(332,264,1)
(50,169,1)
(455,459,1)
(133,544,1)
(181,452,1)
(247,131,1)
(61,320,1)
(448,503,1)
(367,259,1)
(25,113,1)
(288,16,1)
(163,361,1)
(192,18,1)
(398,468,1)
(104,480,1)
(0,97,1)
(226,19,1)
(522,437,1)
(340,545,1)
(164,147,1)
(146,94,1)
(455,243,1)
(19,246,1)
(276,399,1)
(69,404,1)
(436,147,1)
(128,349,1)
(73,133,1)
(68,342,1)
(441,483,1)
(399,73,1)
(399,532,1)
(105,474,1)
(189,63,1)
(476,17,1)
(530,200,1)
(70,459,1)
(504,405,1)
(186,288,1)
(503,127,1)
(418,80,1)
(535,67,1)
(164,468,1)
(254,120,1)
(434,82,1)
(0,398,1)
(398,34,1)
(510,135,1)
(7,327,1)
(94,119,1)
(440,323,1)
(204,146,1)
(113,356,1)
(86,541,1)
(0,261,1)
(395,126,1)
(70,398,1)
(394,547,1)
(138,406,1)
(527,24,1)
(363,38,1)
(101,13,1)
(326,32,1)
(232,411,1)
(492,505,1)
(524,331,1)
(405,215,1)
(85,132,1)
(281,188,1)
(0,434,1)
(313,112,1)
(399,185,1)
(150,112,1)
(348,358,1)
(309,250,1)
(140,354,1)
(308,141,1)
(265,369,1)
(119,467,1)
(318,419,1)
(399,68,1)
(335,427,1)
(208,436,1)
(284,265,1)
(362,52,1)
(106,275,1)
(196,514,1)
(120,124,1)
(369,468,1)
(399,448,1)
(456,311,1)
(0,236,1)
(44,422,1)
(166,325,1)
(343,358,1)
(427,363,1)
(168,22,1)
(70,261,1)
(364,311,1)
(134,294,1)
(301,459,1)
(54,468,1)
(531,377,1)
(70,367,1)
(120,197,1)
(22,32,1)
(372,49,1)
(393,170,1)
(391,478,1)
(306,468,1)
(70,547,1)
(339,500,1)
(0,448,1)
(230,543,1)
(470,147,1)
(304,468,1)
(379,25,1)
(44,468,1)
(67,33,1)
(232,124,1)
(304,431,1)
(365,311,1)
(444,502,1)
(399,437,1)
(29,123,1)
(149,352,1)
(144,473,1)
(490,434,1)
(145,176,1)
(455,547,1)
(35,7,1)
(219,109,1)
(264,139,1)
(399,459,1)
(0,68,1)
(167,164,1)
(95,438,1)
(494,74,1)
(251,520,1)
(254,124,1)
(268,468,1)
(214,28,1)
(214,124,1)
(224,362,1)
(260,271,1)
(325,97,1)
(66,262,1)
(382,322,1)
(337,229,1)
(425,468,1)
(357,124,1)
(169,468,1)
(480,348,1)
(399,400,1)
(38,101,1)
(455,219,1)
(405,380,1)
(361,439,1)
(449,96,1)
(98,138,1)
(125,265,1)
(352,72,1)
(284,160,1)
(396,39,1)
(0,530,1)
(67,429,1)
(152,277,1)
(361,429,1)
(0,425,1)
(156,124,1)
(98,311,1)
(134,468,1)
(201,403,1)
(284,322,1)
(93,81,1)
(463,409,1)
(248,130,1)
(549,45,1)
(386,373,1)
(455,367,1)
(487,444,1)
(213,5,1)
(263,483,1)
(546,58,1)
(380,112,1)
(370,255,1)
(53,528,1)
(505,21,1)
(128,322,1)
(399,547,1)
(225,151,1)
(188,340,1)
(90,11,1)
(70,5,1)
(91,287,1)
(476,257,1)
(313,468,1)
(178,8,1)
(438,114,1)
(441,468,1)
(385,78,1)
(302,517,1)
(276,0,1)
(521,168,1)
(243,468,1)
(380,485,1)
(404,269,1)
(371,313,1)
(211,158,1)
(519,227,1)
(511,49,1)
(527,243,1)
(17,166,1)
(62,468,1)
(506,245,1)
(7,489,1)
(482,149,1)
(470,407,1)
(411,86,1)
(292,316,1)
(77,546,1)
(261,265,1)
(536,49,1)
(82,60,1)
(204,433,1)
(170,511,1)
(221,222,1)
(89,531,1)
(513,468,1)
(68,124,1)
(464,424,1)
(419,536,1)
(356,124,1)
(41,355,1)
(502,220,1)
(250,99,1)
(305,185,1)
(550,265,1)
(389,541,1)
(399,478,1)
(33,364,1)
(455,478,1)
(409,303,1)
(236,549,1)
(74,476,1)
(70,171,1)
(70,513,1)
(241,535,1)
(183,507,1)
(252,193,1)
(399,326,1)
(8,504,1)
(399,214,1)
(184,211,1)
(102,183,1)
(376,159,1)
(0,326,1)
(243,302,1)
(268,143,1)
(36,265,1)
(87,367,1)
(335,468,1)
(179,239,1)
(104,49,1)
(399,219,1)
(400,212,1)
(323,314,1)
(399,53,1)
(441,415,1)
(493,205,1)
(453,265,1)
(312,482,1)
(39,119,1)
(13,468,1)
(46,56,1)
(156,303,1)
(199,137,1)
(70,453,1)
(143,180,1)
(261,347,1)
(343,104,1)
(527,367,1)
(413,423,1)
(452,128,1)
(315,141,1)
(539,266,1)
(278,238,1)
(123,30,1)
(502,468,1)
(368,489,1)
(426,199,1)
(309,510,1)
(399,243,1)
(70,97,1)
(119,468,1)
(499,484,1)
(381,261,1)
(430,202,1)
(70,425,1)
(287,304,1)
(433,40,1)
(455,108,1)
(518,466,1)
(347,93,1)
(290,146,1)
(259,282,1)
(227,27,1)
(400,124,1)
(307,530,1)
(424,508,1)
(212,48,1)
(319,46,1)
(238,41,1)
(399,453,1)
(269,155,1)
(401,190,1)
(0,125,1)
(527,73,1)
(399,97,1)
(0,440,1)
(229,344,1)
(440,265,1)
(455,538,1)
(0,400,1)
(161,490,1)
(70,73,1)
(250,275,1)
(132,274,1)
(399,261,1)
(139,226,1)
(50,298,1)
(117,426,1)
(482,404,1)
(520,31,1)
(399,333,1)
(276,527,1)
(13,512,1)
(399,316,1)
(291,267,1)
(20,272,1)
(44,431,1)
(513,178,1)
(351,108,1)
(423,207,1)
(311,291,1)
(193,499,1)
(172,298,1)
(366,331,1)
(55,311,1)
(439,365,1)
(63,254,1)
(443,124,1)
(0,478,1)
(306,279,1)
(422,187,1)
(434,265,1)
(0,179,1)
(507,294,1)
(220,456,1)
(255,328,1)
(70,478,1)
(267,244,1)
(282,220,1)
(72,441,1)
(344,123,1)
(209,496,1)
(22,234,1)
(45,181,1)
(153,306,1)
(294,55,1)
(0,357,1)
(512,253,1)
(32,366,1)
(5,265,1)
(58,265,1)
(430,299,1)
(21,529,1)
(171,140,1)
(399,36,1)
(477,278,1)
(118,394,1)
(450,300,1)
(545,69,1)
(472,112,1)
(0,5,1)
(399,357,1)
(547,477,1)
(276,70,1)
(215,401,1)
(193,32,1)
(455,226,1)
(384,153,1)
(49,204,1)
(103,306,1)
(330,507,1)
(527,219,1)
(542,248,1)
(0,513,1)
(447,498,1)
(527,478,1)
(445,73,1)
(28,350,2)
(23,31,2)
(203,350,2)
(260,350,2)
(322,95,2)
(304,468,2)
(0,373,2)
(141,332,2)
(366,331,2)
(440,265,2)
(357,124,2)
(149,95,2)
(323,95,2)
(70,219,2)
(296,50,2)
(331,260,2)
(74,95,2)
(349,50,2)
(269,311,2)
(76,502,2)
(384,76,2)
(397,182,2)
(285,290,2)
(548,435,2)
(283,50,2)
(466,468,2)
(86,350,2)
(271,350,2)
(514,427,2)
(312,550,2)
(502,95,2)
(0,530,2)
(170,50,2)
(32,366,2)
(308,141,2)
(0,398,2)
(370,290,2)
(274,290,2)
(504,290,2)
(383,95,2)
(466,220,2)
(472,290,2)
(432,350,2)
(183,350,2)
(378,350,2)
(398,468,2)
(119,467,2)
(405,380,2)
(128,322,2)
(353,50,2)
(399,443,2)
(318,524,2)
(151,350,2)
(361,365,2)
(187,290,2)
(56,71,2)
(483,175,2)
(462,350,2)
(343,104,2)
(399,243,2)
(280,95,2)
(382,322,2)
(514,290,2)
(204,524,2)
(221,350,2)
(178,290,2)
(457,117,2)
(335,514,2)
(518,350,2)
(520,350,2)
(476,429,2)
(80,95,2)
(243,468,2)
(36,265,2)
(98,311,2)
(68,124,2)
(50,50,2)
(34,290,2)
(260,268,2)
(175,311,2)
(171,468,2)
(453,265,2)
(182,95,2)
(70,5,2)
(399,513,2)
(532,524,2)
(0,232,2)
(82,95,2)
(527,24,2)
(455,290,2)
(122,514,2)
(214,350,2)
(350,524,2)
(330,507,2)
(7,489,2)
(22,50,2)
(355,83,2)
(547,468,2)
(236,32,2)
(206,350,2)
(255,290,2)
(319,350,2)
(365,311,2)
(484,50,2)
(70,478,2)
(414,290,2)
(305,350,2)
(547,238,2)
(265,290,2)
(274,44,2)
(531,350,2)
(62,404,2)
(123,514,2)
(62,468,2)
(413,50,2)
(507,350,2)
(372,49,2)
(0,36,2)
(535,95,2)
(33,95,2)
(108,468,2)
(170,156,2)
(81,95,2)
(0,185,2)
(470,468,2)
(276,0,2)
(148,50,2)
(167,290,2)
(399,90,2)
(276,455,2)
(215,248,2)
(291,267,2)
(306,141,2)
(0,367,2)
(71,350,2)
(408,524,2)
(399,398,2)
(71,309,2)
(0,534,2)
(102,350,2)
(399,316,2)
(413,372,2)
(275,229,2)
(526,350,2)
(306,95,2)
(390,504,2)
(0,434,2)
(399,524,2)
(312,482,2)
(278,238,2)
(171,290,2)
(368,468,2)
(97,265,2)
(97,95,2)
(23,350,2)
(433,524,2)
(56,350,2)
(254,524,2)
(0,171,2)
(235,290,2)
(410,537,2)
(399,440,2)
(229,350,2)
(216,350,2)
(420,50,2)
(17,311,2)
(295,350,2)
(233,238,2)
(477,238,2)
(193,50,2)
(241,67,2)
(330,350,2)
(362,50,2)
(387,95,2)
(502,220,2)
(0,443,2)
(248,290,2)
(457,350,2)
(364,311,2)
(234,32,2)
(99,468,2)
(287,350,2)
(513,290,2)
(72,95,2)
(0,5,2)
(205,95,2)
(527,478,2)
(0,226,2)
(117,350,2)
(121,95,2)
(361,429,2)
(328,290,2)
(372,322,2)
(399,232,2)
(0,513,2)
(70,97,2)
(493,95,2)
(461,290,2)
(487,95,2)
(0,193,2)
(70,73,2)
(510,431,2)
(209,350,2)
(465,350,2)
(493,429,2)
(240,95,2)
(470,350,2)
(507,294,2)
(320,350,2)
(527,459,2)
(66,50,2)
(70,459,2)
(423,56,2)
(392,50,2)
(224,50,2)
(151,548,2)
(320,35,2)
(257,95,2)
(150,112,2)
(54,468,2)
(70,513,2)
(262,50,2)
(70,90,2)
(160,95,2)
(495,350,2)
(429,290,2)
(322,241,2)
(126,95,2)
(273,238,2)
(527,367,2)
(161,95,2)
(93,95,2)
(226,468,2)
(427,290,2)
(428,350,2)
(277,290,2)
(510,350,2)
(134,468,2)
(335,468,2)
(352,95,2)
(443,124,2)
(91,350,2)
(344,150,2)
(399,357,2)
(533,350,2)
(99,350,2)
(294,55,2)
(380,112,2)
(99,489,2)
(0,448,2)
(511,49,2)
(494,476,2)
(312,95,2)
(168,50,2)
(369,290,2)
(0,179,2)
(184,350,2)
(260,271,2)
(382,265,2)
(135,350,2)
(164,290,2)
(118,238,2)
(70,36,2)
(83,467,2)
(119,238,2)
(248,130,2)
(79,50,2)
(508,514,2)
(116,290,2)
(50,524,2)
(298,524,2)
(142,361,2)
(181,50,2)
(60,95,2)
(390,514,2)
(303,350,2)
(169,524,2)
(326,32,2)
(18,384,2)
(35,229,2)
(63,524,2)
(511,479,2)
(173,50,2)
(447,265,2)
(450,290,2)
(443,350,2)
(402,350,2)
(460,514,2)
(52,50,2)
(92,290,2)
(534,468,2)
(104,50,2)
(199,147,2)
(542,290,2)
(83,468,2)
(70,367,2)
(356,124,2)
(376,95,2)
(185,124,2)
(456,311,2)
(534,350,2)
(382,95,2)
(289,350,2)
(61,350,2)
(550,479,2)
(399,36,2)
(350,514,2)
(153,306,2)
(263,290,2)
(27,350,2)
(268,468,2)
(100,290,2)
(13,504,2)
(279,95,2)
(539,524,2)
(153,284,2)
(343,358,2)
(304,431,2)
(104,479,2)
(438,467,2)
(363,290,2)
(112,167,2)
(103,95,2)
(204,146,2)
(380,290,2)
(284,322,2)
(344,123,2)
(125,95,2)
(167,164,2)
(8,290,2)
(479,95,2)
(444,95,2)
(399,367,2)
(376,311,2)
(0,437,2)
(369,468,2)
(488,350,2)
(179,124,2)
(366,124,2)
(170,511,2)
(232,124,2)
(157,50,2)
(94,396,2)
(67,429,2)
(331,350,2)
(290,238,2)
(71,308,2)
(354,290,2)
(437,350,2)
(399,97,2)
(237,290,2)
(403,350,2)
(163,95,2)
(374,50,2)
(399,5,2)
(399,340,2)
(58,265,2)
(537,312,2)
(85,290,2)
(511,50,2)
(371,313,2)
(390,524,2)
(347,95,2)
(431,98,2)
(426,31,2)
(435,468,2)
(455,459,2)
(399,68,2)
(45,50,2)
(504,405,2)
(120,124,2)
(16,350,2)
(411,350,2)
(234,50,2)
(471,95,2)
(372,50,2)
(147,198,2)
(249,290,2)
(528,350,2)
(474,429,2)
(399,437,2)
(399,53,2)
(358,124,2)
(117,426,2)
(250,99,2)
(242,350,2)
(62,350,2)
(464,514,2)
(430,299,2)
(476,17,2)
(6,413,2)
(363,13,2)
(521,50,2)
(241,95,2)
(0,144,2)
(502,468,2)
(12,350,2)
(39,238,2)
(546,95,2)
(399,400,2)
(166,95,2)
(399,185,2)
(201,350,2)
(396,238,2)
(268,350,2)
(399,24,2)
(0,219,2)
(368,489,2)
(399,373,2)
(177,50,2)
(394,238,2)
(415,95,2)
(44,431,2)
(150,468,2)
(169,467,2)
(441,95,2)
(550,95,2)
(395,95,2)
(530,50,2)
(452,50,2)
(493,376,2)
(0,125,2)
(453,95,2)
(438,95,2)
(470,147,2)
(418,95,2)
(389,124,2)
(515,350,2)
(455,547,2)
(220,456,2)
(68,350,2)
(348,50,2)
(306,468,2)
(379,350,2)
(455,73,2)
(309,350,2)
(399,333,2)
(5,265,2)
(159,95,2)
(365,95,2)
(426,199,2)
(399,193,2)
(377,350,2)
(489,247,2)
(373,32,2)
(368,290,2)
(169,468,2)
(451,95,2)
(399,219,2)
(213,95,2)
(276,70,2)
(95,290,2)
(143,350,2)
(168,524,2)
(261,95,2)
(7,350,2)
(0,350,2)
(124,335,2)
(13,468,2)
(0,24,2)
(448,50,2)
(214,124,2)
(492,50,2)
(399,73,2)
(410,95,2)
(128,50,2)
(399,144,2)
(455,340,2)
(0,425,2)
(31,371,2)
(527,243,2)
(120,524,2)
(125,265,2)
(238,41,2)
(70,24,2)
(11,290,2)
(70,547,2)
(486,350,2)
(308,350,2)
(0,261,2)
(284,265,2)
(95,429,2)
(22,524,2)
(541,518,2)
(524,331,2)
(386,50,2)
(426,350,2)
(525,50,2)
(399,356,2)
(452,389,2)
(70,434,2)
(14,290,2)
(4,350,2)
(130,290,2)
(0,108,2)
(455,108,2)
(72,447,2)
(522,350,2)
(510,468,2)
(190,290,2)
(490,95,2)
(452,128,2)
(26,294,2)
(333,32,2)
(521,524,2)
(344,350,2)
(0,478,2)
(207,50,2)
(77,290,2)
(482,404,2)
(384,153,2)
(399,261,2)
(54,141,2)
(194,350,2)
(0,289,2)
(20,350,2)
(399,448,2)
(513,468,2)
(496,350,2)
(455,226,2)
(507,468,2)
(95,95,2)
(199,350,2)
(371,123,2)
(140,290,2)
(70,125,2)
(512,290,2)
(70,261,2)
(5,95,2)
(292,350,2)
(32,524,2)
(70,514,2)
(307,50,2)
(448,32,2)
(29,123,2)
(127,50,2)
(463,350,2)
(55,311,2)
(95,438,2)
(393,170,2)
(362,49,2)
(132,290,2)
(158,350,2)
(146,238,2)
(469,350,2)
(67,364,2)
(253,290,2)
(527,219,2)
(485,290,2)
(152,290,2)
(198,311,2)
(399,547,2)
(272,350,2)
(0,326,2)
(211,350,2)
(90,290,2)
(417,23,2)
(412,350,2)
(389,50,2)
(356,350,2)
(181,452,2)
(466,350,2)
(527,108,2)
(0,357,2)
(454,50,2)
(96,350,2)
(0,356,2)
(129,350,2)
(0,400,2)
(192,95,2)
(70,453,2)
(548,330,2)
(35,350,2)
(105,95,2)
(404,269,2)
(167,1,2)
(288,350,2)
(399,108,2)
(263,468,2)
(50,298,2)
(106,350,2)
(326,50,2)
(72,441,2)
(204,468,2)
(156,303,2)
(479,142,2)
(247,311,2)
(76,382,2)
(459,468,2)
(325,95,2)
(1,290,2)
(434,95,2)
(267,430,2)
(437,124,2)
(67,95,2)
(427,363,2)
(401,290,2)
(550,265,2)
(480,50,2)
(104,49,2)
(474,95,2)
(26,468,2)
(13,290,2)
(399,236,2)
(276,399,2)
(438,290,2)
(222,350,2)
(70,171,2)
(397,95,2)
(421,350,2)
(309,510,2)
(37,95,2)
(358,151,2)
(31,350,2)
(327,350,2)
(70,226,2)
(435,483,2)
(251,350,2)
(527,73,2)
(7,468,2)
(399,530,2)
(137,350,2)
(94,119,2)
(215,290,2)
(239,350,2)
(536,524,2)
(457,62,2)
(6,50,2)
(130,274,2)
(78,95,2)
(54,290,2)
(9,290,2)
(0,97,2)
(0,340,2)
(1,134,2)
(509,524,2)
(26,350,2)
(467,506,2)
(150,350,2)
(499,50,2)
(111,350,2)
(49,204,2)
(25,350,2)
(371,350,2)
(18,95,2)
(300,290,2)
(76,95,2)
(117,26,2)
(423,124,2)
(438,468,2)
(543,95,2)
(227,350,2)
(73,468,2)
(262,343,2)
(113,350,2)
(343,50,2)
(303,457,2)
(44,290,2)
(210,50,2)
(231,95,2)
(176,350,2)
(332,311,2)
(142,95,2)
(313,468,2)
(70,340,2)
(494,95,2)
(229,344,2)
(530,32,2)
(441,468,2)
(424,514,2)
(134,290,2)
(65,50,2)
(250,275,2)
(389,541,2)
(0,68,2)
(128,49,2)
(449,350,2)
(0,453,2)
(119,468,2)
(455,24,2)
(537,72,2)
(146,94,2)
(112,290,2)
(357,350,2)
(212,350,2)
(311,291,2)
(1,263,2)
(549,50,2)
(455,219,2)
(330,417,2)
(124,514,2)
(144,350,2)
(250,350,2)
(342,350,2)
(455,367,2)
(232,350,2)
(529,50,2)
(53,350,2)
(399,326,2)
(400,350,2)
(223,50,2)
(388,350,2)
(290,146,2)
(263,483,2)
(537,95,2)
(200,50,2)
(481,350,2)
(145,350,2)
(89,350,2)
(314,95,2)
(46,350,2)
(497,290,2)
(0,90,2)
(380,468,2)
(369,146,2)
(36,95,2)
(441,483,2)
(455,243,2)
(94,238,2)
(399,478,2)
(50,169,2)
(0,459,2)
(364,95,2)
(254,514,2)
(423,50,2)
(390,468,2)
(309,250,2)
(308,468,2)
(316,124,2)
(70,108,2)
(350,390,2)
(350,123,2)
(425,468,2)
(518,466,2)
(266,524,2)
(313,112,2)
(144,124,2)
(275,350,2)
(215,468,2)
(455,478,2)
(399,453,2)
(58,95,2)
(527,340,2)
(35,7,2)
(366,524,2)
(0,316,2)
(399,226,2)
(405,290,2)
(197,524,2)
(219,468,2)
(236,50,2)
(540,95,2)
(361,95,2)
(405,215,2)
(304,350,2)
(498,95,2)
(417,470,2)
(265,369,2)
(425,290,2)
(409,350,2)
(333,50,2)
(63,514,2)
(284,95,2)
(367,468,2)
(0,73,2)
(40,524,2)
(289,468,2)
(29,524,2)
(399,125,2)
(413,423,2)
(475,95,2)
(337,350,2)
(0,243,2)
(17,95,2)
(473,350,2)
(478,468,2)
(393,50,2)
(38,290,2)
(30,514,2)
(153,95,2)
(258,350,2)
(407,350,2)
(101,290,2)
(373,50,2)
(172,524,2)
(399,434,2)
(169,50,2)
(70,425,2)
(546,290,2)
(199,468,2)
(164,468,2)
(276,527,2)
(385,95,2)
(506,311,2)
(134,294,2)
(482,95,2)
(339,350,2)
(0,214,2)
(156,124,2)
(503,50,2)
(41,355,2)
(0,236,2)
(189,524,2)
(274,54,2)
(252,50,2)
(0,547,2)
(24,468,2)
(225,350,2)
(107,350,2)
(384,95,2)
(492,298,2)
(268,467,2)
(363,38,2)
(53,124,2)
(186,350,2)
(114,95,2)
(313,350,2)
(399,425,2)
(434,265,2)
(519,350,2)
(399,459,2)
(0,440,2)
(77,95,2)
(381,95,2)
(193,32,2)
(358,50,2)
(447,95,2)
(70,243,2)
(320,304,2)
(179,350,2)
(417,350,2)
(21,50,2)
(340,468,2)
(422,290,2)
(189,514,2)
(261,265,2)
(527,238,2)
(43,350,2)
(51,50,2)
(398,290,2)
(3,95,2)
(435,350,2)
(44,468,2)
(541,350,2)
(447,479,2)
(440,95,2)
(182,493,2)
(316,350,2)
(48,350,2)
(130,368,2)
(57,50,2)
(476,95,2)
(491,95,2)
(81,494,2)
(136,95,2)
(59,50,2)
(518,320,2)
(399,214,2)
(482,468,2)
(335,427,2)
(0,333,2)
(0,53,2)
(180,350,2)
(538,290,2)
(230,95,2)
(156,50,2)
(90,468,2)
(228,350,2)
(196,514,2)
(70,440,2)
(548,350,2)
(505,50,2)
(500,350,2)
(400,124,2)
(114,290,2)
(164,147,2)
(70,398,2)
(527,226,2)
(524,350,2)
(399,171,2)
(154,95,2)
(185,350,2)
(49,524,2)
(419,524,2)
(439,95,2)
(399,179,2)
-----------------------------------
(0,return 0;)
(1,dec->xend - dec->tilexoff)
(2,)
(3,comps)
(4,state)
(5,cmpt->width)
(6,tcomp->yend = JPC_CEILDIV(tile->yend, cmpt->vstep)
(7,dec->tileheight)
(8,dec)
(9,0)
(10,dec)
(11,numtiles)
(12,0)
(13,dec->numtiles)
(14,compno)
(15,)
(16,0)
(17,siz->comps)
(18,cmpt->height = JPC_CEILDIV(dec->yend, cmpt->vstep)
(19,yend)
(20,tileyoff)
(21,tcomp->tsfb = 0)
(22,compno)
(23,htileno + 1)
(24,dec->cp)
(25,tile->partno = 0)
(26,dec->tilexoff)
(27,tile->state = JPC_TILE_INIT)
(28,pkthdrstreampos)
(29,++tileno)
(30,0)
(31,htileno = tileno % dec->numhtiles)
(32,tcomp = tile->tcomps)
(33,compno)
(34,numvtiles)
(35,vtileno * dec->tileheight)
(36,cmpt->hsubstep)
(37,prec)
(38,sizeof(jpc_dec_tile_t)
(39,jpc_dec_cmpt_t)
(40,dec)
(41,dec->cp = jpc_dec_cp_create(dec->numcomps)
(42,xstart)
(43,dec)
(44,dec->tileyoff)
(45,tcomp)
(46,tile)
(47,)
(48,tile)
(49,cmpt = dec->cmpts)
(50,compno < dec->numcomps)
(51,tcomp)
(52,cmpt)
(53,tile->yend)
(54,dec->yend)
(55,siz->tilexoff)
(56,tile->yend = JAS_MIN(dec->tileyoff + (vtileno + 1)
(57,data)
(58,++cmpt)
(59,ystart)
(60,cmpt)
(61,dec)
(62,dec->xstart)
(63,dec)
(64,)
(65,tcomp->data = 0)
(66,tcomp)
(67,siz->comps[compno])
(68,tile->pkthdrstream)
(69,dec)
(70,return -1;)
(71,JAS_MIN(dec->tileyoff + (vtileno + 1)
(72,JPC_CEILDIV(dec->xend, cmpt->hstep)
(73,dec->numcomps)
(74,prec)
(75,)
(76,JPC_CEILDIV(dec->ystart, cmpt->vstep)
(77,dec)
(78,dec)
(79,hstep)
(80,cmpt)
(81,cmpt->prec = siz->comps[compno].prec)
(82,vsubstep)
(83,dec->numcomps)
(84,siz)
(85,tileheight)
(86,tile)
(87,siz)
(88,compno)
(89,numhtiles)
(90,dec->numtiles)
(91,dec)
(92,tilewidth)
(93,cmpt)
(94,jas_alloc2(dec->numcomps, sizeof(jpc_dec_cmpt_t)
(95,compno < dec->numcomps)
(96,0)
(97,cmpt->prec)
(98,siz->tileyoff)
(99,dec->tileheight)
(100,dec)
(101,jpc_dec_tile_t)
(102,1)
(103,cmpt)
(104,cmpt->hstep)
(105,cmpt)
(106,dec)
(107,tile->numparts = 0)
(108,dec->tileheight)
(109,tilewidth)
(110,for (compno = 0, cmpt = dec->cmpts, tcomp = tile->tcomps;\\n\\t\\t  compno < dec->numcomps; ++compno, ++cmpt, ++tcomp)
(111,tilexoff)
(112,dec->numhtiles = JPC_CEILDIV(dec->xend - dec->tilexoff, dec->tilewidth)
(113,0)
(114,numcomps)
(115,dec)
(116,1)
(117,dec->tilexoff + htileno * dec->tilewidth)
(118,numcomps)
(119,dec->numcomps)
(120,++tile)
(121,cmpt)
(122,-1)
(123,tileno = 0)
(124,tile = dec->tiles)
(125,cmpt->hstep)
(126,cmpt)
(127,tcomp)
(128,cmpt->vstep)
(129,tile->pkthdrstreampos = 0)
(130,JPC_CEILDIV(dec->yend - dec->tileyoff, dec->tileheight)
(131,tileheight)
(132,dec)
(133,numcomps)
(134,dec->tilexoff)
(135,tileyoff)
(136,siz)
(137,tilewidth)
(138,tileyoff)
(139,siz)
(140,numhtiles)
(141,dec->yend = siz->height)
(142,siz->comps[compno].hsamp)
(143,numcomps)
(144,tile->realmode)
(145,partno)
(146,dec->cmpts = jas_alloc2(dec->numcomps, sizeof(jpc_dec_cmpt_t)
(147,dec->tilewidth = siz->tilewidth)
(148,cmpt)
(149,xstart)
(150,dec->numhtiles)
(151,tile->xend = JAS_MIN(dec->tilexoff + (htileno + 1)
(152,dec->image = 0)
(153,JPC_CEILDIV(dec->yend, cmpt->vstep)
(154,sgnd)
(155,xoff)
(156,tile->xstart)
(157,xend)
(158,tile->pptstab = 0)
(159,comps)
(160,vstep)
(161,cmpt->vsubstep = 0)
(162,)
(163,hsamp)
(164,dec->tilewidth)
(165,ms)
(166,comps)
(167,JPC_CEILDIV(dec->xend - dec->tilexoff, dec->tilewidth)
(168,dec)
(169,dec->numcomps)
(170,JPC_CEILDIV(tile->xstart, cmpt->hstep)
(171,dec->numhtiles)
(172,cmpt)
(173,tile)
(174,)
(175,siz->width)
(176,tile)
(177,cmpt)
(178,tiles)
(179,tile->tcomps)
(180,dec)
(181,tcomp->ystart = JPC_CEILDIV(tile->ystart, cmpt->vstep)
(182,siz->comps[compno].sgnd)
(183,htileno)
(184,cp)
(185,tile->numparts)
(186,tile)
(187,dec)
(188,siz)
(189,numtiles)
(190,dec)
(191,cp)
(192,cmpt)
(193,tcomp->rlvls)
(194,dec)
(195,tileno)
(196,1)
(197,tile)
(198,siz->tilewidth)
(199,dec->tilewidth)
(200,yend)
(201,pkthdrstreams)
(202,parms)
(203,dec)
(204,dec->cmpts)
(205,compno)
(206,dec)
(207,yend)
(208,tileheight)
(209,tile)
(210,tcomp->rlvls = 0)
(211,tile)
(212,pptstab)
(213,dec)
(214,tile->pkthdrstreampos)
(215,dec->numvtiles)
(216,0)
(217,width)
(218,)
(219,dec->tilewidth)
(220,dec->ystart = siz->yoff)
(221,tile)
(222,tile->realmode = 0)
(223,tsfb)
(224,tcomp)
(225,tile)
(226,dec->yend)
(227,tile)
(228,tilexoff)
(229,vtileno = tileno / dec->numhtiles)
(230,comps)
(231,vstep)
(232,tile->xend)
(233,-1)
(234,++tcomp)
(235,tilexoff)
(236,tcomp->xend)
(237,dec)
(238,!(dec->cp = jpc_dec_cp_create(dec->numcomps)
(239,tcomps)
(240,cmpt)
(241,siz->comps[compno].vsamp)
(242,0)
(243,dec->tileyoff)
(244,siz)
(245,numcomps)
(246,dec)
(247,siz->tileheight)
(248,dec->numvtiles = JPC_CEILDIV(dec->yend - dec->tileyoff, dec->tileheight)
(249,dec)
(250,(vtileno + 1)
(251,tileno)
(252,0)
(253,dec)
(254,tileno)
(255,dec)
(256,)
(257,compno)
(258,xend)
(259,xend)
(260,jas_alloc2(dec->numcomps,\\n\\t\\t  sizeof(jpc_dec_tcomp_t)
(261,cmpt->sgnd)
(262,tcomp->xend = JPC_CEILDIV(tile->xend, cmpt->hstep)
(263,dec->xend)
(264,height)
(265,cmpt = dec->cmpts)
(266,compno)
(267,ms->parms.siz)
(268,dec->numcomps)
(269,siz->xoff)
(270,cmpt)
(271,sizeof(jpc_dec_tcomp_t)
(272,dec)
(273,1)
(274,dec->yend - dec->tileyoff)
(275,vtileno + 1)
(276,RET)
(277,0)
(278,dec)
(279,yend)
(280,cmpt)
(281,yoff)
(282,dec)
(283,cmpt)
(284,cmpt->vstep)
(285,dec)
(286,)
(287,vtileno)
(288,tile->cp = 0)
(289,dec->state)
(290,!(dec->cmpts = jas_alloc2(dec->numcomps, sizeof(jpc_dec_cmpt_t)
(291,&ms->parms.siz)
(292,JPC_TILE_INIT)
(293,for (tileno = 0, tile = dec->tiles; tileno < dec->numtiles; ++tileno,\\n\\t  ++tile)
(294,dec->tilexoff = siz->tilexoff)
(295,0)
(296,tcomp)
(297,siz)
(298,compno = 0)
(299,jpc_ms_t *ms)
(300,dec)
(301,siz)
(302,tileyoff)
(303,tile->xstart = JAS_MAX(dec->tilexoff + htileno * dec->tilewidth,\\n\\t\\t  dec->xstart)
(304,dec->tileyoff)
(305,0)
(306,dec->yend)
(307,tile)
(308,dec->yend)
(309,dec->tileyoff + (vtileno + 1)
(310,vtileno)
(311,*siz = &ms->parms.siz)
(312,JPC_CEILDIV(dec->xstart, cmpt->hstep)
(313,dec->numhtiles)
(314,cmpt)
(315,dec)
(316,tile->state)
(317,)
(318,tcomps)
(319,numparts)
(320,dec->tileyoff + vtileno * dec->tileheight)
(321,if (!(dec->tiles = jas_alloc2(dec->numtiles, sizeof(jpc_dec_tile_t)
(322,cmpt->vstep = siz->comps[compno].vsamp)
(323,height)
(324,dec)
(325,siz)
(326,tcomp->data)
(327,tileheight)
(328,cmpt)
(329,)
(330,dec->tilexoff + (htileno + 1)
(331,tile->tcomps = jas_alloc2(dec->numcomps,\\n\\t\\t  sizeof(jpc_dec_tcomp_t)
(332,siz->height)
(333,tcomp->tsfb)
(334,tilewidth)
(335,dec->tiles)
(336,if (!(tile->tcomps = jas_alloc2(dec->numcomps,\\n\\t\\t  sizeof(jpc_dec_tcomp_t)
(337,tile)
(338,tilexoff)
(339,yend)
(340,dec->ystart)
(341,numcomps)
(342,pkthdrstream)
(343,JPC_CEILDIV(tile->xend, cmpt->hstep)
(344,tileno / dec->numhtiles)
(345,)
(346,)
(347,sgnd)
(348,cmpt)
(349,vstep)
(350,tileno < dec->numtiles)
(351,siz)
(352,dec)
(353,vstep)
(354,dec)
(355,jpc_dec_cp_create(dec->numcomps)
(356,tile->partno)
(357,tile->ystart)
(358,tile->xend)
(359,)
(360,tcomp)
(361,siz->comps[compno])
(362,++cmpt)
(363,jas_alloc2(dec->numtiles, sizeof(jpc_dec_tile_t)
(364,siz->comps)
(365,siz->comps)
(366,tile->tcomps)
(367,dec->xend)
(368,dec->tileheight)
(369,dec->cmpts)
(370,cmpts)
(371,tileno % dec->numhtiles)
(372,cmpt->vstep)
(373,tcomp->ystart)
(374,tile)
(375,tile)
(376,siz->comps)
(377,tileno)
(378,dec)
(379,tile)
(380,dec->numhtiles)
(381,siz)
(382,cmpt->vstep)
(383,width)
(384,JPC_CEILDIV(dec->yend, cmpt->vstep)
(385,ystart)
(386,tile)
(387,compno)
(388,numhtiles)
(389,tile->ystart)
(390,dec->numtiles)
(391,siz)
(392,0)
(393,tcomp->xstart = JPC_CEILDIV(tile->xstart, cmpt->hstep)
(394,dec)
(395,hstep)
(396,sizeof(jpc_dec_cmpt_t)
(397,cmpt->sgnd = siz->comps[compno].sgnd)
(398,dec->numvtiles)
(399,return -1;)
(400,tile->pptstab)
(401,numvtiles)
(402,dec->state = JPC_MH)
(403,dec)
(404,dec->xstart = siz->xoff)
(405,dec->numhtiles * dec->numvtiles)
(406,siz)
(407,tilewidth)
(408,1)
(409,tile)
(410,cmpt->width = JPC_CEILDIV(dec->xend, cmpt->hstep)
(411,xend)
(412,ystart)
(413,JPC_CEILDIV(tile->yend, cmpt->vstep)
(414,dec)
(415,xend)
(416,if (!(dec->cp = jpc_dec_cp_create(dec->numcomps)
(417,(htileno + 1)
(418,hstep)
(419,tile)
(420,xstart)
(421,1)
(422,tileyoff)
(423,tile->yend)
(424,dec)
(425,dec->image)
(426,htileno * dec->tilewidth)
(427,dec->tiles = jas_alloc2(dec->numtiles, sizeof(jpc_dec_tile_t)
(428,JPC_MH)
(429,compno = 0)
(430,ms->parms)
(431,dec->tileyoff = siz->tileyoff)
(432,state)
(433,cmpts)
(434,cmpt->vsubstep)
(435,dec->xend)
(436,dec)
(437,tile->xstart)
(438,dec->numcomps)
(439,compno)
(440,cmpt->height)
(441,dec->xend)
(442,)
(443,tile->cp)
(444,cmpt)
(445,siz)
(446,htileno)
(447,cmpt->hstep)
(448,tcomp->xstart)
(449,dec->pkthdrstreams = 0)
(450,image)
(451,cmpt->hsubstep = 0)
(452,JPC_CEILDIV(tile->ystart, cmpt->vstep)
(453,cmpt->vstep)
(454,ystart)
(455,return -1;)
(456,siz->yoff)
(457,JAS_MAX(dec->tilexoff + htileno * dec->tilewidth,\\n\\t\\t  dec->xstart)
(458,siz)
(459,dec->xstart)
(460,tileno)
(461,xend)
(462,xstart)
(463,ystart)
(464,tiles)
(465,dec)
(466,dec->ystart)
(467,dec->numcomps = siz->numcomps)
(468,jpc_dec_t *dec)
(469,dec)
(470,dec->tilewidth)
(471,dec)
(472,dec)
(473,realmode)
(474,++compno)
(475,hsubstep)
(476,siz->comps[compno])
(477,cmpts)
(478,dec->tilexoff)
(479,cmpt->hstep = siz->comps[compno].hsamp)
(480,hstep)
(481,htileno)
(482,dec->xstart)
(483,dec->xend = siz->width)
(484,tcomp)
(485,numhtiles)
(486,jpc_dec_tcomp_t)
(487,vstep)
(488,tileheight)
(489,dec->tileheight = siz->tileheight)
(490,0)
(491,0)
(492,++compno)
(493,siz->comps[compno])
(494,siz->comps[compno].prec)
(495,dec)
(496,tile->pkthdrstream = 0)
(497,yend)
(498,hstep)
(499,rlvls)
(500,dec)
(501,if (!(dec->cmpts = jas_alloc2(dec->numcomps, sizeof(jpc_dec_cmpt_t)
(502,dec->ystart)
(503,xstart)
(504,dec->numtiles = dec->numhtiles * dec->numvtiles)
(505,compno)
(506,siz->numcomps)
(507,dec->tilexoff)
(508,tile)
(509,tileno)
(510,dec->tileyoff)
(511,cmpt->hstep)
(512,numtiles)
(513,dec->tiles)
(514,!(dec->tiles = jas_alloc2(dec->numtiles, sizeof(jpc_dec_tile_t)
(515,htileno)
(516,dec)
(517,dec)
(518,JAS_MAX(dec->tileyoff + vtileno * dec->tileheight,\\n\\t\\t  dec->ystart)
(519,xstart)
(520,vtileno)
(521,numcomps)
(522,dec)
(523,for (compno = 0, cmpt = dec->cmpts; compno < dec->numcomps; ++compno,\\n\\t  ++cmpt)
(524,!(tile->tcomps = jas_alloc2(dec->numcomps,\\n\\t\\t  sizeof(jpc_dec_tcomp_t)
(525,tcomp)
(526,0)
(527,return -1;)
(528,yend)
(529,0)
(530,tcomp->yend)
(531,dec)
(532,-1)
(533,vtileno)
(534,dec->pkthdrstreams)
(535,vsamp)
(536,tcomp)
(537,JPC_CEILDIV(dec->xend, cmpt->hstep)
(538,-1)
(539,0)
(540,cmpt)
(541,tile->ystart = JAS_MAX(dec->tileyoff + vtileno * dec->tileheight,\\n\\t\\t  dec->ystart)
(542,dec)
(543,siz)
(544,dec)
(545,ystart)
(546,compno)
(547,dec->cmpts)
(548,JAS_MIN(dec->tilexoff + (htileno + 1)
(549,xend)
(550,cmpt->hstep)
(551,tilexoff)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
