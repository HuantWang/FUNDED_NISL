-----label-----
1
-----code-----
int jas_image_ishomosamp(jas_image_t *image)
{
	jas_image_coord_t hstep;
	jas_image_coord_t vstep;
	int result;
	int i;
	hstep = jas_image_cmpthstep(image, 0);
	vstep = jas_image_cmptvstep(image, 0);
	result = 1;
	for (i = 0; i < image->numcmpts_; ++i) {
		if (jas_image_cmpthstep(image, i) != hstep ||
		  jas_image_cmptvstep(image, i) != vstep) {
			result = 0;
			break;
		}
	}
	return result;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
27,28
29,30
30,31
30,32
32,33
34,35
35,36
35,37
36,37
38,39
38,40
38,41
39,40
41,42
44,45
45,46
45,47
46,47
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
59,60
59,61
59,62
59,63
60,61
61,62
61,63
62,63
65,66
65,67
66,67
68,69
68,70
69,70
72,73
73,74
75,76
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
79,82
80,81
82,83
84,85
86,87
88,89
88,90
89,90
89,91
89,92
90,91
92,93
94,95
96,97
98,99
98,100
99,100
100,101
100,102
101,102
105,106
106,107
-----nextToken-----
2,4,7,9,10,15,17,21,23,26,28,31,33,37,40,42,43,47,50,52,53,57,58,63,64,67,70,71,74,81,83,85,87,91,93,95,97,102,103,104,107
-----computeFrom-----
35,36
35,37
45,46
45,47
55,56
55,57
61,62
61,63
65,66
65,67
77,78
77,79
78,79
78,80
88,89
88,90
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
int jas_image_ishomosamp(jas_image_t *image){	jas_image_coord_t hstep;	jas_image_coord_t vstep;	int result;	int i;	hstep = jas_image_cmpthstep(image, 0);	vstep = jas_image_cmptvstep(image, 0);	result = 1;	for (i = 0; i < image->numcmpts_; ++i) {		if (jas_image_cmpthstep(image, i) != hstep ||		  jas_image_cmptvstep(image, i) != vstep) {			result = 0;			break;		}	}	return result;}
int
jas_image_ishomosamp(jas_image_t *image)
jas_image_ishomosamp
jas_image_t *image
jas_image_t
jas_image_t
*image
*
image
{	jas_image_coord_t hstep;	jas_image_coord_t vstep;	int result;	int i;	hstep = jas_image_cmpthstep(image, 0);	vstep = jas_image_cmptvstep(image, 0);	result = 1;	for (i = 0; i < image->numcmpts_; ++i) {		if (jas_image_cmpthstep(image, i) != hstep ||		  jas_image_cmptvstep(image, i) != vstep) {			result = 0;			break;		}	}	return result;}
jas_image_coord_t hstep;
jas_image_coord_t hstep;
jas_image_coord_t
jas_image_coord_t
hstep
hstep
jas_image_coord_t vstep;
jas_image_coord_t vstep;
jas_image_coord_t
jas_image_coord_t
vstep
vstep
int result;
int result;
int
result
result
int i;
int i;
int
i
i
hstep = jas_image_cmpthstep(image, 0);
hstep = jas_image_cmpthstep(image, 0)
hstep
hstep
jas_image_cmpthstep(image, 0)
jas_image_cmpthstep
jas_image_cmpthstep
image
image
0
vstep = jas_image_cmptvstep(image, 0);
vstep = jas_image_cmptvstep(image, 0)
vstep
vstep
jas_image_cmptvstep(image, 0)
jas_image_cmptvstep
jas_image_cmptvstep
image
image
0
result = 1;
result = 1
result
result
1
for (i = 0; i < image->numcmpts_; ++i) {		if (jas_image_cmpthstep(image, i) != hstep ||		  jas_image_cmptvstep(image, i) != vstep) {			result = 0;			break;		}	}
i = 0;
i = 0
i
i
0
i < image->numcmpts_
i
i
image->numcmpts_
image
image
numcmpts_
++i
i
i
{		if (jas_image_cmpthstep(image, i) != hstep ||		  jas_image_cmptvstep(image, i) != vstep) {			result = 0;			break;		}	}
if (jas_image_cmpthstep(image, i) != hstep ||		  jas_image_cmptvstep(image, i) != vstep) {			result = 0;			break;		}
jas_image_cmpthstep(image, i) != hstep ||		  jas_image_cmptvstep(image, i) != vstep
jas_image_cmpthstep(image, i) != hstep
jas_image_cmpthstep(image, i)
jas_image_cmpthstep
jas_image_cmpthstep
image
image
i
i
hstep
hstep
jas_image_cmptvstep(image, i) != vstep
jas_image_cmptvstep(image, i)
jas_image_cmptvstep
jas_image_cmptvstep
image
image
i
i
vstep
vstep
{			result = 0;			break;		}
result = 0;
result = 0
result
result
0
break;
return result;
result
result
-----joern-----
(12,72,0)
(105,59,0)
(31,87,0)
(97,88,0)
(148,8,0)
(97,72,0)
(20,59,0)
(117,132,0)
(5,14,0)
(138,59,0)
(16,81,0)
(127,155,0)
(35,58,0)
(152,59,0)
(79,87,0)
(44,59,0)
(23,62,0)
(21,133,0)
(121,57,0)
(113,11,0)
(94,132,0)
(15,130,0)
(45,109,0)
(27,57,0)
(97,124,0)
(56,100,0)
(56,15,0)
(64,92,0)
(74,106,0)
(31,11,0)
(14,29,0)
(105,69,0)
(49,152,0)
(37,106,0)
(62,23,0)
(8,52,0)
(27,28,0)
(43,44,0)
(119,35,0)
(153,59,0)
(47,28,0)
(44,37,0)
(40,56,0)
(30,47,0)
(105,109,0)
(125,59,0)
(37,121,0)
(48,31,0)
(147,107,0)
(9,59,0)
(1,62,0)
(138,66,0)
(93,65,0)
(58,44,0)
(105,72,0)
(98,59,0)
(41,15,0)
(154,49,0)
(17,153,0)
(17,44,0)
(68,114,0)
(81,94,0)
(73,37,0)
(153,17,0)
(28,47,0)
(105,81,0)
(22,81,0)
(99,125,0)
(69,152,0)
(58,35,0)
(134,27,0)
(107,114,0)
(32,121,0)
(101,30,0)
(129,49,0)
(82,109,0)
(18,133,0)
(89,51,0)
(30,44,0)
(131,97,0)
(35,133,0)
(108,11,0)
(120,8,0)
(74,63,0)
(4,30,0)
(143,124,0)
(92,20,0)
(37,44,0)
(94,59,0)
(141,53,0)
(54,87,0)
(142,3,0)
(51,107,0)
(97,69,0)
(92,44,0)
(28,27,0)
(36,69,0)
(105,88,0)
(80,14,0)
(149,59,0)
(61,15,0)
(65,130,0)
(102,155,0)
(109,148,0)
(144,110,0)
(72,153,0)
(118,47,0)
(152,49,0)
(31,111,0)
(97,109,0)
(116,27,0)
(150,88,0)
(155,44,0)
(87,133,0)
(62,145,0)
(97,99,0)
(31,107,0)
(84,28,0)
(135,133,0)
(71,0,0)
(85,69,0)
(137,17,0)
(66,44,0)
(42,87,0)
(19,59,0)
(110,145,0)
(132,94,0)
(151,99,0)
(124,20,0)
(34,87,0)
(97,0,0)
(131,105,0)
(18,57,0)
(14,44,0)
(10,66,0)
(88,138,0)
(103,110,0)
(38,62,0)
(95,97,0)
(33,95,0)
(18,3,0)
(25,65,0)
(136,58,0)
(62,57,0)
(47,63,0)
(26,17,0)
(78,101,0)
(148,59,0)
(107,18,0)
(110,106,0)
(58,47,0)
(87,3,0)
(87,31,0)
(49,44,0)
(97,81,0)
(76,2,0)
(13,3,0)
(55,74,0)
(18,106,0)
(115,59,0)
(65,107,0)
(15,56,0)
(50,75,0)
(66,138,0)
(112,58,0)
(87,145,0)
(155,125,0)
(70,51,0)
(77,18,0)
(146,99,0)
(30,101,0)
(105,124,0)
(0,29,0)
(125,155,0)
(8,148,0)
(67,88,0)
(97,24,0)
(75,133,0)
(2,3,0)
(139,18,0)
(87,114,0)
(91,92,0)
(128,31,0)
(126,72,0)
(46,18,0)
(39,66,0)
(83,18,0)
(105,99,0)
(101,3,0)
(20,92,0)
(90,59,0)
(11,122,0)
(86,121,0)
(140,0,0)
(29,14,0)
(105,0,0)
(104,124,0)
(6,23,0)
(29,59,0)
(60,30,0)
(96,59,0)
(87,57,0)
(28,106,0)
(121,37,0)
(7,59,0)
(132,52,0)
(18,107,0)
(31,56,0)
(123,105,0)
(155,102,1)
(45,82,1)
(144,62,1)
(27,57,1)
(97,95,1)
(2,3,1)
(2,76,1)
(87,145,1)
(80,5,1)
(101,3,1)
(31,11,1)
(6,38,1)
(36,85,1)
(4,60,1)
(105,109,1)
(37,121,1)
(37,73,1)
(79,65,1)
(105,72,1)
(64,91,1)
(110,106,1)
(15,61,1)
(5,0,1)
(41,40,1)
(16,29,1)
(97,88,1)
(132,117,1)
(40,65,1)
(31,107,1)
(108,113,1)
(137,72,1)
(20,92,1)
(105,88,1)
(95,33,1)
(30,44,1)
(105,123,1)
(21,47,1)
(104,143,1)
(88,150,1)
(97,72,1)
(37,106,1)
(8,120,1)
(11,108,1)
(101,30,1)
(107,18,1)
(112,119,1)
(56,15,1)
(110,103,1)
(31,128,1)
(23,6,1)
(18,133,1)
(152,49,1)
(124,104,1)
(86,43,1)
(58,136,1)
(135,21,1)
(138,66,1)
(89,107,1)
(71,138,1)
(97,0,1)
(51,70,1)
(70,89,1)
(58,44,1)
(93,25,1)
(28,27,1)
(94,132,1)
(121,57,1)
(47,28,1)
(105,81,1)
(121,32,1)
(18,139,1)
(83,77,1)
(17,44,1)
(97,69,1)
(65,93,1)
(72,12,1)
(133,135,1)
(78,3,1)
(34,54,1)
(75,50,1)
(82,94,1)
(113,51,1)
(50,101,1)
(31,111,1)
(146,44,1)
(8,52,1)
(87,31,1)
(26,137,1)
(78,2,1)
(65,107,1)
(49,154,1)
(27,116,1)
(25,51,1)
(31,56,1)
(62,23,1)
(102,127,1)
(105,99,1)
(85,125,1)
(30,4,1)
(75,133,1)
(127,99,1)
(119,133,1)
(33,62,1)
(44,37,1)
(131,105,1)
(126,152,1)
(28,106,1)
(99,151,1)
(62,145,1)
(49,44,1)
(60,78,1)
(97,124,1)
(153,17,1)
(66,44,1)
(147,101,1)
(139,46,1)
(54,79,1)
(136,112,1)
(148,8,1)
(14,44,1)
(66,10,1)
(58,47,1)
(55,110,1)
(3,142,1)
(15,130,1)
(103,144,1)
(123,35,1)
(46,83,1)
(140,71,1)
(117,81,1)
(132,52,1)
(92,64,1)
(74,106,1)
(0,140,1)
(38,1,1)
(105,69,1)
(18,106,1)
(155,44,1)
(84,27,1)
(131,97,1)
(67,20,1)
(150,67,1)
(97,81,1)
(97,99,1)
(61,41,1)
(74,55,1)
(35,133,1)
(92,44,1)
(143,153,1)
(142,13,1)
(30,47,1)
(42,34,1)
(79,11,1)
(119,75,1)
(12,126,1)
(97,109,1)
(128,48,1)
(69,36,1)
(48,42,1)
(76,87,1)
(65,130,1)
(17,26,1)
(109,45,1)
(13,35,1)
(32,86,1)
(77,147,1)
(87,57,1)
(29,14,1)
(21,110,1)
(154,129,1)
(14,80,1)
(1,148,1)
(28,84,1)
(39,88,1)
(120,109,1)
(79,56,1)
(73,121,1)
(81,22,1)
(10,39,1)
(129,69,1)
(105,0,1)
(35,58,1)
(62,57,1)
(105,124,1)
(18,3,1)
(110,145,1)
(116,134,1)
(51,107,1)
(87,3,1)
(18,57,1)
(87,133,1)
(91,124,1)
(118,74,1)
(125,155,1)
(22,16,1)
(151,146,1)
(134,118,1)
(119,35,2)
(79,101,2)
(97,81,2)
(136,35,2)
(2,101,2)
(148,8,2)
(28,106,2)
(70,101,2)
(40,65,2)
(105,81,2)
(31,56,2)
(17,44,2)
(135,62,2)
(97,99,2)
(101,101,2)
(56,65,2)
(47,110,2)
(47,28,2)
(87,133,2)
(78,101,2)
(18,3,2)
(31,107,2)
(34,101,2)
(105,109,2)
(97,88,2)
(4,101,2)
(94,132,2)
(131,105,2)
(87,101,2)
(58,62,2)
(15,65,2)
(61,65,2)
(76,101,2)
(134,110,2)
(66,44,2)
(131,97,2)
(147,101,2)
(62,23,2)
(33,62,2)
(105,62,2)
(97,0,2)
(8,52,2)
(13,35,2)
(107,101,2)
(78,35,2)
(30,44,2)
(112,35,2)
(110,106,2)
(97,62,2)
(29,14,2)
(89,101,2)
(18,133,2)
(18,57,2)
(56,15,2)
(105,0,2)
(58,44,2)
(30,35,2)
(31,11,2)
(105,124,2)
(105,99,2)
(28,27,2)
(84,110,2)
(142,35,2)
(62,57,2)
(25,51,2)
(97,124,2)
(2,3,2)
(11,51,2)
(18,106,2)
(4,35,2)
(77,101,2)
(105,69,2)
(49,44,2)
(14,44,2)
(87,3,2)
(37,106,2)
(152,49,2)
(108,51,2)
(65,107,2)
(110,145,2)
(74,110,2)
(65,130,2)
(101,35,2)
(60,101,2)
(60,35,2)
(116,110,2)
(62,145,2)
(65,51,2)
(101,30,2)
(155,44,2)
(75,133,2)
(105,88,2)
(37,121,2)
(97,72,2)
(132,52,2)
(21,62,2)
(46,101,2)
(119,62,2)
(153,17,2)
(30,101,2)
(48,101,2)
(133,62,2)
(35,133,2)
(54,101,2)
(35,62,2)
(87,31,2)
(83,101,2)
(128,101,2)
(55,110,2)
(42,101,2)
(118,110,2)
(75,35,2)
(125,155,2)
(144,62,2)
(30,47,2)
(27,57,2)
(35,58,2)
(113,51,2)
(15,130,2)
(27,110,2)
(28,110,2)
(92,44,2)
(3,35,2)
(18,101,2)
(51,101,2)
(58,47,2)
(103,62,2)
(121,57,2)
(93,51,2)
(20,92,2)
(35,35,2)
(41,65,2)
(97,69,2)
(139,101,2)
(97,109,2)
(51,107,2)
(74,106,2)
(136,62,2)
(138,66,2)
(95,62,2)
(105,72,2)
(101,3,2)
(31,111,2)
(107,18,2)
(31,101,2)
(58,35,2)
(50,35,2)
(87,57,2)
(110,62,2)
(87,145,2)
(44,37,2)
(112,62,2)
(123,62,2)
-----------------------------------
(0,cmptparms.height)
(1,image)
(2,++i)
(3,i = 0)
(4,width_)
(5,cmpt)
(6,cmptparms)
(7,cmptparms)
(8,JAS_IMAGE_CDT_GETSGND(dtype)
(9,j)
(10,width_)
(11,v = 0)
(12,hstep)
(13,i)
(14,cmpt->height_)
(15,numlutents - 1)
(16,cmptparms)
(17,cmpt->hstep_)
(18,jas_image_readcmptsample(image, cmptno, i, j)
(19,if (jas_image_addcmpt(image, newcmptno, &cmptparms)
(20,cmptparms.vstep = cmpt->vstep_)
(21,j)
(22,prec)
(23,&cmptparms)
(24,)
(25,v)
(26,hstep_)
(27,image->cmpts_)
(28,image->cmpts_[cmptno])
(29,cmptparms.height = cmpt->height_)
(30,cmpt->width_)
(31,lutents[v])
(32,cmpts_)
(33,1)
(34,i)
(35,j < cmpt->height_)
(36,tly)
(37,image->cmpts_[cmptno])
(38,newcmptno)
(39,cmpt)
(40,v)
(41,numlutents)
(42,j)
(43,cmpt)
(44,cmpt = image->cmpts_[cmptno])
(45,sgnd)
(46,i)
(47,cmpt = image->cmpts_[cmptno])
(48,lutents)
(49,cmpt->tly_)
(50,j)
(51,v < 0)
(52,int dtype)
(53,)
(54,newcmptno)
(55,cmptno)
(56,v = numlutents - 1)
(57,jas_image_t *image)
(58,cmpt->height_)
(59,)
(60,cmpt)
(61,1)
(62,jas_image_addcmpt(image, newcmptno, &cmptparms)
(63,)
(64,vstep_)
(65,v >= numlutents)
(66,cmpt->width_)
(67,cmptparms)
(68,if (v < 0)
(69,cmptparms.tly)
(70,0)
(71,cmptparms)
(72,cmptparms.hstep)
(73,cmptno)
(74,++cmptno)
(75,++j)
(76,i)
(77,image)
(78,i)
(79,image)
(80,height_)
(81,cmptparms.prec)
(82,cmptparms)
(83,cmptno)
(84,cmptno)
(85,cmptparms)
(86,image)
(87,jas_image_writecmptsample(image, newcmptno, i, j,\\n\\t\\t\\t  lutents[v])
(88,cmptparms.width)
(89,v)
(90,v)
(91,cmpt)
(92,cmpt->vstep_)
(93,numlutents)
(94,cmptparms.prec = JAS_IMAGE_CDT_GETPREC(dtype)
(95,-1)
(96,if (newcmptno <= cmptno)
(97,return -1;)
(98,for (j = 0; j < cmpt->height_; ++j)
(99,cmptparms.tlx)
(100,)
(101,i < cmpt->width_)
(102,tlx_)
(103,cmptno)
(104,vstep)
(105,return 0;)
(106,int cmptno)
(107,v = jas_image_readcmptsample(image, cmptno, i, j)
(108,0)
(109,cmptparms.sgnd)
(110,newcmptno <= cmptno)
(111,int_fast32_t *lutents)
(112,cmpt)
(113,v)
(114,)
(115,i)
(116,cmpts_)
(117,dtype)
(118,cmpt)
(119,j)
(120,dtype)
(121,image->cmpts_)
(122,)
(123,0)
(124,cmptparms.vstep)
(125,cmptparms.tlx = cmpt->tlx_)
(126,cmptparms)
(127,cmpt)
(128,v)
(129,cmpt)
(130,int numlutents)
(131,RET)
(132,JAS_IMAGE_CDT_GETPREC(dtype)
(133,j = 0)
(134,image)
(135,0)
(136,height_)
(137,cmpt)
(138,cmptparms.width = cmpt->width_)
(139,j)
(140,height)
(141,for (i = 0; i < cmpt->width_; ++i)
(142,0)
(143,cmptparms)
(144,newcmptno)
(145,int newcmptno)
(146,cmptparms)
(147,v)
(148,cmptparms.sgnd = JAS_IMAGE_CDT_GETSGND(dtype)
(149,cmpt)
(150,width)
(151,tlx)
(152,cmptparms.tly = cmpt->tly_)
(153,cmptparms.hstep = cmpt->hstep_)
(154,tly_)
(155,cmpt->tlx_)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
