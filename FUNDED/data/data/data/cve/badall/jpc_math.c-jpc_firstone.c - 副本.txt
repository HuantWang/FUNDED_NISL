-----label-----
1
-----code-----
int jpc_firstone(int x)
{
	int n;

	/* The argument must be nonnegative. */
	assert(x >= 0);

	n = -1;
	while (x > 0) {
		x >>= 1;
		++n;
	}
	return n;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
10,11
11,12
11,13
13,14
15,16
16,17
16,18
17,18
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
34,35
34,36
35,36
36,37
36,38
37,38
40,41
41,42
42,43
44,45
45,46
-----nextToken-----
2,4,6,8,12,14,18,21,22,26,28,32,33,38,39,43,46
-----computeFrom-----
19,20
19,21
24,25
24,26
30,31
30,32
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int jpc_firstone(int x){	int n;	/* The argument must be nonnegative. */	assert(x >= 0);	n = -1;	while (x > 0) {		x >>= 1;		++n;	}	return n;}
int
jpc_firstone(int x)
jpc_firstone
int x
int
x
x
{	int n;	/* The argument must be nonnegative. */	assert(x >= 0);	n = -1;	while (x > 0) {		x >>= 1;		++n;	}	return n;}
int n;
int n;
int
n
n
assert(x >= 0);
assert(x >= 0)
assert
assert
x >= 0
x
x
0
n = -1;
n = -1
n
n
-1
1
while (x > 0) {		x >>= 1;		++n;	}
x > 0
x
x
0
{		x >>= 1;		++n;	}
x >>= 1;
x >>= 1
x
x
1
++n;
++n
n
n
return n;
n
n
-----joern-----
(22,14,0)
(2,14,0)
(14,17,0)
(15,18,0)
(14,14,0)
(9,14,0)
(10,6,0)
(12,18,0)
(11,15,0)
(2,17,0)
(14,16,0)
(1,0,0)
(19,0,0)
(23,2,0)
(20,18,0)
(0,17,0)
(8,0,0)
(13,15,0)
(6,15,0)
(6,16,0)
(1,18,0)
(15,13,0)
(4,13,0)
(3,2,0)
(5,18,0)
(21,12,0)
(0,1,0)
(12,15,0)
(7,12,0)
(6,10,1)
(1,0,1)
(12,7,1)
(12,15,1)
(6,15,1)
(22,2,1)
(15,13,1)
(4,11,1)
(14,14,1)
(0,17,1)
(11,1,1)
(2,23,1)
(3,15,1)
(8,19,1)
(13,4,1)
(10,14,1)
(21,12,1)
(14,9,1)
(3,6,1)
(2,14,1)
(14,17,1)
(7,2,1)
(9,22,1)
(23,3,1)
(2,17,1)
(0,8,1)
(3,2,2)
(9,2,2)
(0,17,2)
(22,2,2)
(14,2,2)
(14,17,2)
(2,17,2)
(6,15,2)
(12,15,2)
(2,2,2)
(1,0,2)
(6,2,2)
(21,12,2)
(14,14,2)
(15,13,2)
(23,2,2)
(10,2,2)
(2,14,2)
-----------------------------------
(0,x >= 0)
(1,assert(x >= 0)
(2,x > 0)
(3,x)
(4,1)
(5,while (x > 0)
(6,++n)
(7,n)
(8,0)
(9,1)
(10,n)
(11,n)
(12,return n;)
(13,-1)
(14,x >>= 1)
(15,n = -1)
(16,)
(17,int x)
(18,)
(19,x)
(20,n)
(21,RET)
(22,x)
(23,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
