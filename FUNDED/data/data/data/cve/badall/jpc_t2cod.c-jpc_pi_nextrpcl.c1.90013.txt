-----label-----
1
-----code-----
static int jpc_pi_nextrpcl(register jpc_pi_t *pi)
{
	int rlvlno;
	jpc_pirlvl_t *pirlvl;
	jpc_pchg_t *pchg;
	int prchind;
	int prcvind;
	int *prclyrno;
	int compno;
	jpc_picomp_t *picomp;
	int xstep;
	int ystep;
	uint_fast32_t r;
	uint_fast32_t rpx;
	uint_fast32_t rpy;
	uint_fast32_t trx0;
	uint_fast32_t try0;

	pchg = pi->pchg;
	if (!pi->prgvolfirst) {
		goto skip;
	} else {
		pi->xstep = 0;
		pi->ystep = 0;
		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;
		  ++compno, ++picomp) {
			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <
			  picomp->numrlvls; ++rlvlno, ++pirlvl) {
				xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +
				  picomp->numrlvls - rlvlno - 1));
				ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +
				  picomp->numrlvls - rlvlno - 1));
				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);
				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);
			}
		}
		pi->prgvolfirst = 0;
	}

	for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&
	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {
		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=
		  pi->ystep - (pi->y % pi->ystep)) {
			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=
			  pi->xstep - (pi->x % pi->xstep)) {
				for (pi->compno = pchg->compnostart,
				  pi->picomp = &pi->picomps[pi->compno];
				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <
				  pi->numcomps; ++pi->compno, ++pi->picomp) {
					if (pi->rlvlno >= pi->picomp->numrlvls) {
						continue;
					}
					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];
					if (pi->pirlvl->numprcs == 0) {
						continue;
					}
					r = pi->picomp->numrlvls - 1 - pi->rlvlno;
					rpx = r + pi->pirlvl->prcwidthexpn;
					rpy = r + pi->pirlvl->prcheightexpn;
					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);
					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);
					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))
					  || !(pi->x % (1 << rpx))) &&
					  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))
					  || !(pi->y % (1 << rpy)))) {
						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp
						  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,
						  pi->pirlvl->prcwidthexpn);
						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp
						  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,
						  pi->pirlvl->prcheightexpn);
						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;

						assert(pi->prcno < pi->pirlvl->numprcs);
						for (pi->lyrno = 0; pi->lyrno <
						  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {
							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];
							if (pi->lyrno >= *prclyrno) {
								++(*prclyrno);
								return 0;
							}
skip:
							;
						}
					}
				}
			}
		}
	}
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
12,13
13,14
13,15
15,16
17,18
18,19
18,20
19,20
21,22
21,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
41,42
42,43
42,44
44,45
44,46
47,48
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
59,60
60,61
60,62
62,63
64,65
65,66
65,67
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
103,105
104,105
107,108
107,109
107,110
108,109
109,110
109,111
110,111
113,114
114,115
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
119,121
120,121
124,125
125,126
125,127
126,127
126,128
127,128
131,132
131,133
131,134
131,135
132,133
133,134
133,135
134,135
134,136
135,136
138,139
138,140
139,140
141,142
141,143
142,143
145,146
145,147
146,147
148,149
148,150
149,150
152,153
152,154
153,154
154,155
156,157
157,158
159,160
160,161
160,162
160,163
160,164
161,162
162,163
162,164
163,164
163,165
164,165
167,168
167,169
168,169
170,171
170,172
171,172
174,175
174,176
175,176
177,178
177,179
178,179
181,182
181,183
182,183
183,184
185,186
186,187
188,189
188,190
188,191
188,192
189,190
190,191
190,192
191,192
193,194
193,195
194,195
194,196
195,196
198,199
199,200
199,201
201,202
202,203
202,204
203,204
203,205
204,205
204,206
205,206
205,207
206,207
209,210
209,211
210,211
213,214
216,217
217,218
217,219
218,219
220,221
220,222
221,222
221,223
222,223
225,226
226,227
226,228
228,229
229,230
229,231
230,231
230,232
231,232
231,233
232,233
232,234
233,234
236,237
236,238
237,238
240,241
243,244
244,245
244,246
245,246
245,247
246,247
249,250
249,251
249,252
250,251
251,252
252,253
252,254
253,254
256,257
258,259
258,260
258,261
259,260
261,262
261,263
262,263
265,266
267,268
268,269
268,270
269,270
269,271
270,271
273,274
273,275
273,276
274,275
275,276
276,277
276,278
277,278
280,281
282,283
282,284
282,285
283,284
285,286
285,287
286,287
289,290
291,292
292,293
292,294
293,294
293,295
294,295
298,299
298,300
298,301
298,302
299,300
300,301
300,302
301,302
301,303
302,303
305,306
305,307
306,307
309,310
309,311
310,311
310,312
311,312
311,313
312,313
315,316
315,317
316,317
319,320
319,321
320,321
320,322
321,322
324,325
324,326
325,326
328,329
329,330
329,331
330,331
333,334
334,335
334,336
334,337
334,338
335,336
336,337
336,338
337,338
337,339
338,339
341,342
341,343
342,343
345,346
345,347
346,347
346,348
347,348
350,351
350,352
351,352
354,355
354,356
355,356
355,357
356,357
359,360
359,361
360,361
360,362
361,362
364,365
365,366
365,367
366,367
366,368
367,368
370,371
370,372
371,372
374,375
375,376
375,377
375,378
375,379
376,377
377,378
377,379
378,379
378,380
379,380
382,383
382,384
383,384
386,387
386,388
387,388
387,389
388,389
391,392
391,393
392,393
395,396
395,397
396,397
396,398
397,398
400,401
400,402
401,402
401,403
402,403
405,406
406,407
406,408
407,408
407,409
408,409
411,412
411,413
412,413
415,416
415,417
415,418
415,419
416,417
417,418
418,419
418,420
419,420
420,421
420,422
421,422
424,425
425,426
425,427
426,427
429,430
430,431
431,432
-----nextToken-----
2,4,7,9,10,14,16,20,22,23,27,29,30,33,35,38,40,43,45,46,49,51,55,57,58,61,63,66,68,72,74,78,80,84,86,90,92,96,98,102,105,106,111,112,115,121,122,123,128,129,130,136,137,140,143,144,147,150,151,155,158,165,166,169,172,173,176,179,180,184,187,192,196,197,200,207,208,211,212,214,215,219,223,224,227,234,235,238,239,241,242,247,248,254,255,257,260,263,264,266,271,272,278,279,281,284,287,288,290,295,296,297,303,304,307,308,313,314,317,318,322,323,326,327,331,332,339,340,343,344,348,349,352,353,357,358,362,363,368,369,372,373,380,381,384,385,389,390,393,394,398,399,403,404,409,410,413,414,422,423,427,428,432
-----computeFrom-----
100,101
100,102
118,119
118,120
125,126
125,127
134,135
134,136
138,139
138,140
145,146
145,147
163,164
163,165
167,168
167,169
174,175
174,176
190,191
190,192
193,194
193,195
199,200
199,201
202,203
202,204
203,204
203,205
204,205
204,206
217,218
217,219
220,221
220,222
226,227
226,228
229,230
229,231
230,231
230,232
231,232
231,233
244,245
244,246
268,269
268,270
292,293
292,294
300,301
300,302
309,310
309,311
310,311
310,312
319,320
319,321
336,337
336,338
345,346
345,347
354,355
354,356
359,360
359,361
365,366
365,367
377,378
377,379
386,387
386,388
395,396
395,397
400,401
400,402
406,407
406,408
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;GotoStatement;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ProblemStatement;ExpressionStatement;ExpressionList;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ProblemStatement;ProblemStatement;ReturnStatement;LiteralExpression;
-----ast_node-----
static int jpc_pi_nextrpcl(register jpc_pi_t *pi){	int rlvlno;	jpc_pirlvl_t *pirlvl;	jpc_pchg_t *pchg;	int prchind;	int prcvind;	int *prclyrno;	int compno;	jpc_picomp_t *picomp;	int xstep;	int ystep;	uint_fast32_t r;	uint_fast32_t rpx;	uint_fast32_t rpy;	uint_fast32_t trx0;	uint_fast32_t try0;	pchg = pi->pchg;	if (!pi->prgvolfirst) {		goto skip;	} else {		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}	for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))					  || !(pi->x % (1 << rpx))) &&					  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))					  || !(pi->y % (1 << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp						  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,						  pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp						  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,						  pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}	return 1;}
static int
jpc_pi_nextrpcl(register jpc_pi_t *pi)
jpc_pi_nextrpcl
register jpc_pi_t *pi
register jpc_pi_t
jpc_pi_t
*pi
*
pi
{	int rlvlno;	jpc_pirlvl_t *pirlvl;	jpc_pchg_t *pchg;	int prchind;	int prcvind;	int *prclyrno;	int compno;	jpc_picomp_t *picomp;	int xstep;	int ystep;	uint_fast32_t r;	uint_fast32_t rpx;	uint_fast32_t rpy;	uint_fast32_t trx0;	uint_fast32_t try0;	pchg = pi->pchg;	if (!pi->prgvolfirst) {		goto skip;	} else {		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}	for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))					  || !(pi->x % (1 << rpx))) &&					  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))					  || !(pi->y % (1 << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp						  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,						  pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp						  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,						  pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}	return 1;}
int rlvlno;
int rlvlno;
int
rlvlno
rlvlno
jpc_pirlvl_t *pirlvl;
jpc_pirlvl_t *pirlvl;
jpc_pirlvl_t
jpc_pirlvl_t
*pirlvl
*
pirlvl
jpc_pchg_t *pchg;
jpc_pchg_t *pchg;
jpc_pchg_t
jpc_pchg_t
*pchg
*
pchg
int prchind;
int prchind;
int
prchind
prchind
int prcvind;
int prcvind;
int
prcvind
prcvind
int *prclyrno;
int *prclyrno;
int
*prclyrno
*
prclyrno
int compno;
int compno;
int
compno
compno
jpc_picomp_t *picomp;
jpc_picomp_t *picomp;
jpc_picomp_t
jpc_picomp_t
*picomp
*
picomp
int xstep;
int xstep;
int
xstep
xstep
int ystep;
int ystep;
int
ystep
ystep
uint_fast32_t r;
uint_fast32_t r;
uint_fast32_t
uint_fast32_t
r
r
uint_fast32_t rpx;
uint_fast32_t rpx;
uint_fast32_t
uint_fast32_t
rpx
rpx
uint_fast32_t rpy;
uint_fast32_t rpy;
uint_fast32_t
uint_fast32_t
rpy
rpy
uint_fast32_t trx0;
uint_fast32_t trx0;
uint_fast32_t
uint_fast32_t
trx0
trx0
uint_fast32_t try0;
uint_fast32_t try0;
uint_fast32_t
uint_fast32_t
try0
try0
pchg = pi->pchg;
pchg = pi->pchg
pchg
pchg
pi->pchg
pi
pi
pchg
if (!pi->prgvolfirst) {		goto skip;	} else {		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}
!pi->prgvolfirst
pi->prgvolfirst
pi
pi
prgvolfirst
{		goto skip;	}
goto skip;
skip
{		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}
pi->xstep = 0;
pi->xstep = 0
pi->xstep
pi
pi
xstep
0
pi->ystep = 0;
pi->ystep = 0
pi->ystep
pi
pi
ystep
0
for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}
compno = 0, picomp = pi->picomps;
compno = 0, picomp = pi->picomps
compno = 0
compno
compno
0
picomp = pi->picomps
picomp
picomp
pi->picomps
pi
pi
picomps
compno < pi->numcomps
compno
compno
pi->numcomps
pi
pi
numcomps
++compno, ++picomp
++compno
compno
compno
++picomp
picomp
picomp
{			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}
for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}
rlvlno = 0, pirlvl = picomp->pirlvls;
rlvlno = 0, pirlvl = picomp->pirlvls
rlvlno = 0
rlvlno
rlvlno
0
pirlvl = picomp->pirlvls
pirlvl
pirlvl
picomp->pirlvls
picomp
picomp
pirlvls
rlvlno <			  picomp->numrlvls
rlvlno
rlvlno
picomp->numrlvls
picomp
picomp
numrlvls
++rlvlno, ++pirlvl
++rlvlno
rlvlno
rlvlno
++pirlvl
pirlvl
pirlvl
{				xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}
xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1));
xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1))
xstep
xstep
picomp->hsamp * (1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1))
picomp->hsamp
picomp
picomp
hsamp
(1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1))
1 << (pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1)
1
(pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1)
pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno - 1
pirlvl->prcwidthexpn +				  picomp->numrlvls - rlvlno
pirlvl->prcwidthexpn +				  picomp->numrlvls
pirlvl->prcwidthexpn
pirlvl
pirlvl
prcwidthexpn
picomp->numrlvls
picomp
picomp
numrlvls
rlvlno
rlvlno
1
ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1));
ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1))
ystep
ystep
picomp->vsamp * (1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1))
picomp->vsamp
picomp
picomp
vsamp
(1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1))
1 << (pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1)
1
(pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1)
pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno - 1
pirlvl->prcheightexpn +				  picomp->numrlvls - rlvlno
pirlvl->prcheightexpn +				  picomp->numrlvls
pirlvl->prcheightexpn
pirlvl
pirlvl
prcheightexpn
picomp->numrlvls
picomp
picomp
numrlvls
rlvlno
rlvlno
1
pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);
pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep)
pi->xstep
pi
pi
xstep
(!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep)
(!pi->xstep)
!pi->xstep
pi->xstep
pi
pi
xstep
xstep
xstep
JAS_MIN(pi->xstep, xstep)
JAS_MIN
JAS_MIN
pi->xstep
pi
pi
xstep
xstep
xstep
pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);
pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep)
pi->ystep
pi
pi
ystep
(!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep)
(!pi->ystep)
!pi->ystep
pi->ystep
pi
pi
ystep
ystep
ystep
JAS_MIN(pi->ystep, ystep)
JAS_MIN
JAS_MIN
pi->ystep
pi
pi
ystep
ystep
ystep
pi->prgvolfirst = 0;
pi->prgvolfirst = 0
pi->prgvolfirst
pi
pi
prgvolfirst
0
for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))					  || !(pi->x % (1 << rpx))) &&					  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))					  || !(pi->y % (1 << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp						  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,						  pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp						  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,						  pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}
pi->rlvlno = pchg->rlvlnostart;
pi->rlvlno = pchg->rlvlnostart
pi->rlvlno
pi
pi
rlvlno
pchg->rlvlnostart
pchg
pchg
rlvlnostart
pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls
pi->rlvlno < pchg->rlvlnoend
pi->rlvlno
pi
pi
rlvlno
pchg->rlvlnoend
pchg
pchg
rlvlnoend
pi->rlvlno < pi->maxrlvls
pi->rlvlno
pi
pi
rlvlno
pi->maxrlvls
pi
pi
maxrlvls
++pi->rlvlno
pi->rlvlno
pi
pi
rlvlno
{		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))					  || !(pi->x % (1 << rpx))) &&					  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))					  || !(pi->y % (1 << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp						  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,						  pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp						  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,						  pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}
for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))					  || !(pi->x % (1 << rpx))) &&					  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))					  || !(pi->y % (1 << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp						  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,						  pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp						  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,						  pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}
pi->y = pi->ystart;
pi->y = pi->ystart
pi->y
pi
pi
y
pi->ystart
pi
pi
ystart
pi->y < pi->yend
pi->y
pi
pi
y
pi->yend
pi
pi
yend
pi->y +=		  pi->ystep - (pi->y % pi->ystep)
pi->y
pi
pi
y
pi->ystep - (pi->y % pi->ystep)
pi->ystep
pi
pi
ystep
(pi->y % pi->ystep)
pi->y % pi->ystep
pi->y
pi
pi
y
pi->ystep
pi
pi
ystep
{			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))					  || !(pi->x % (1 << rpx))) &&					  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))					  || !(pi->y % (1 << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp						  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,						  pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp						  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,						  pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}
for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))					  || !(pi->x % (1 << rpx))) &&					  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))					  || !(pi->y % (1 << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp						  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,						  pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp						  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,						  pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}
pi->x = pi->xstart;
pi->x = pi->xstart
pi->x
pi
pi
x
pi->xstart
pi
pi
xstart
pi->x < pi->xend
pi->x
pi
pi
x
pi->xend
pi
pi
xend
pi->x +=			  pi->xstep - (pi->x % pi->xstep)
pi->x
pi
pi
x
pi->xstep - (pi->x % pi->xstep)
pi->xstep
pi
pi
xstep
(pi->x % pi->xstep)
pi->x % pi->xstep
pi->x
pi
pi
x
pi->xstep
pi
pi
xstep
{				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))					  || !(pi->x % (1 << rpx))) &&					  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))					  || !(pi->y % (1 << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp						  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,						  pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp						  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,						  pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}
for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps;
++pi->compno, ++pi->picomp
++pi->compno, ++pi->picomp
++pi->compno
pi->compno
pi
pi
compno
++pi->picomp
pi->picomp
pi
pi
picomp
p
) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))					  || !(pi->x % (1 << rpx))) &&					  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))					  || !(pi->y % (1 << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp						  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,						  pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp						  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,						  pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}
return 1;
1
-----joern-----
(303,570,0)
(43,259,0)
(100,409,0)
(445,1,0)
(387,369,0)
(379,343,0)
(115,433,0)
(87,326,0)
(401,133,0)
(211,539,0)
(175,491,0)
(196,376,0)
(112,401,0)
(519,286,0)
(145,133,0)
(303,462,0)
(487,266,0)
(298,397,0)
(61,24,0)
(448,252,0)
(383,163,0)
(136,10,0)
(536,439,0)
(213,320,0)
(565,156,0)
(48,443,0)
(137,269,0)
(341,519,0)
(153,558,0)
(395,437,0)
(484,390,0)
(4,236,0)
(127,14,0)
(179,443,0)
(431,471,0)
(554,286,0)
(463,144,0)
(317,510,0)
(282,188,0)
(436,372,0)
(556,21,0)
(414,170,0)
(305,231,0)
(547,189,0)
(175,352,0)
(7,160,0)
(45,141,0)
(15,369,0)
(108,284,0)
(413,385,0)
(545,290,0)
(511,137,0)
(552,273,0)
(458,217,0)
(528,462,0)
(104,179,0)
(303,60,0)
(459,317,0)
(490,321,0)
(113,136,0)
(400,297,0)
(236,219,0)
(450,165,0)
(358,398,0)
(492,223,0)
(473,21,0)
(303,443,0)
(194,12,0)
(480,447,0)
(260,358,0)
(152,386,0)
(326,361,0)
(289,343,0)
(406,491,0)
(353,456,0)
(234,16,0)
(495,433,0)
(243,482,0)
(82,233,0)
(179,309,0)
(354,319,0)
(489,504,0)
(401,112,0)
(339,361,0)
(510,254,0)
(264,130,0)
(69,563,0)
(179,462,0)
(261,570,0)
(356,245,0)
(352,286,0)
(485,61,0)
(536,286,0)
(251,75,0)
(36,485,0)
(251,286,0)
(520,213,0)
(218,438,0)
(53,398,0)
(179,382,0)
(343,286,0)
(88,286,0)
(126,494,0)
(28,561,0)
(10,316,0)
(175,83,0)
(185,104,0)
(483,286,0)
(262,179,0)
(158,51,0)
(331,160,0)
(456,286,0)
(197,370,0)
(164,162,0)
(398,358,0)
(365,568,0)
(470,113,0)
(94,30,0)
(34,167,0)
(271,205,0)
(354,331,0)
(475,402,0)
(547,262,0)
(191,152,0)
(108,398,0)
(467,162,0)
(223,29,0)
(337,535,0)
(473,373,0)
(174,560,0)
(447,480,0)
(178,465,0)
(125,337,0)
(546,122,0)
(468,302,0)
(337,563,0)
(275,354,0)
(558,286,0)
(14,323,0)
(297,509,0)
(504,489,0)
(360,361,0)
(527,397,0)
(66,233,0)
(273,192,0)
(127,417,0)
(49,475,0)
(27,65,0)
(238,378,0)
(303,121,0)
(409,179,0)
(517,264,0)
(312,447,0)
(105,17,0)
(518,238,0)
(442,326,0)
(39,65,0)
(207,83,0)
(546,106,0)
(57,410,0)
(360,286,0)
(205,268,0)
(259,33,0)
(533,507,0)
(37,307,0)
(253,385,0)
(142,386,0)
(75,251,0)
(469,101,0)
(136,167,0)
(490,286,0)
(133,533,0)
(55,346,0)
(354,547,0)
(162,164,0)
(36,169,0)
(303,352,0)
(284,108,0)
(370,197,0)
(316,363,0)
(26,462,0)
(179,491,0)
(377,29,0)
(9,286,0)
(11,145,0)
(543,401,0)
(122,546,0)
(482,311,0)
(175,443,0)
(71,423,0)
(381,554,0)
(373,467,0)
(25,464,0)
(404,328,0)
(499,267,0)
(229,6,0)
(140,354,0)
(277,286,0)
(366,376,0)
(205,192,0)
(370,7,0)
(513,160,0)
(93,277,0)
(246,239,0)
(398,108,0)
(373,473,0)
(340,46,0)
(384,6,0)
(392,494,0)
(58,4,0)
(378,423,0)
(518,286,0)
(538,535,0)
(236,4,0)
(321,130,0)
(264,415,0)
(104,164,0)
(567,110,0)
(270,554,0)
(370,439,0)
(547,354,0)
(373,100,0)
(492,209,0)
(94,175,0)
(543,89,0)
(7,144,0)
(6,286,0)
(212,88,0)
(435,498,0)
(461,187,0)
(326,286,0)
(6,321,0)
(111,206,0)
(181,409,0)
(397,290,0)
(249,480,0)
(403,42,0)
(209,492,0)
(558,80,0)
(16,234,0)
(269,402,0)
(46,340,0)
(113,390,0)
(31,88,0)
(177,165,0)
(389,323,0)
(276,538,0)
(472,164,0)
(385,319,0)
(475,390,0)
(546,227,0)
(235,65,0)
(175,317,0)
(539,288,0)
(233,286,0)
(29,285,0)
(14,127,0)
(100,51,0)
(206,111,0)
(328,404,0)
(191,361,0)
(283,416,0)
(151,433,0)
(524,26,0)
(409,28,0)
(502,290,0)
(90,500,0)
(432,507,0)
(189,179,0)
(291,65,0)
(121,286,0)
(534,475,0)
(117,234,0)
(24,286,0)
(323,188,0)
(17,514,0)
(205,286,0)
(238,518,0)
(104,28,0)
(32,393,0)
(239,264,0)
(42,29,0)
(422,80,0)
(433,495,0)
(560,286,0)
(89,267,0)
(311,264,0)
(223,492,0)
(280,339,0)
(106,546,0)
(175,309,0)
(192,161,0)
(352,361,0)
(234,490,0)
(317,286,0)
(430,171,0)
(133,145,0)
(167,136,0)
(56,462,0)
(259,129,0)
(175,307,0)
(12,563,0)
(182,365,0)
(46,563,0)
(145,29,0)
(447,321,0)
(551,492,0)
(33,259,0)
(266,286,0)
(175,6,0)
(161,192,0)
(530,217,0)
(266,175,0)
(560,75,0)
(376,358,0)
(390,475,0)
(175,340,0)
(303,20,0)
(472,567,0)
(164,472,0)
(2,517,0)
(456,316,0)
(139,286,0)
(294,402,0)
(316,10,0)
(138,286,0)
(268,16,0)
(564,533,0)
(500,286,0)
(102,170,0)
(385,189,0)
(215,542,0)
(310,555,0)
(393,286,0)
(225,65,0)
(507,529,0)
(504,330,0)
(394,272,0)
(461,110,0)
(114,519,0)
(295,187,0)
(388,65,0)
(544,490,0)
(407,9,0)
(175,138,0)
(109,101,0)
(475,534,0)
(46,286,0)
(175,382,0)
(318,129,0)
(167,330,0)
(361,416,0)
(179,189,0)
(89,42,0)
(215,286,0)
(274,330,0)
(429,65,0)
(26,83,0)
(491,563,0)
(230,323,0)
(16,402,0)
(195,112,0)
(250,45,0)
(179,307,0)
(248,286,0)
(479,238,0)
(242,317,0)
(277,81,0)
(169,36,0)
(415,264,0)
(190,161,0)
(343,289,0)
(255,20,0)
(97,290,0)
(427,396,0)
(179,570,0)
(96,167,0)
(335,505,0)
(85,360,0)
(279,505,0)
(367,281,0)
(343,321,0)
(503,311,0)
(179,352,0)
(355,372,0)
(449,113,0)
(157,104,0)
(258,223,0)
(273,147,0)
(26,309,0)
(236,372,0)
(563,471,0)
(493,20,0)
(175,60,0)
(347,489,0)
(420,65,0)
(467,373,0)
(535,538,0)
(350,251,0)
(224,24,0)
(560,279,0)
(418,491,0)
(247,517,0)
(321,243,0)
(278,215,0)
(165,286,0)
(50,289,0)
(15,284,0)
(370,331,0)
(45,507,0)
(144,463,0)
(213,473,0)
(197,88,0)
(538,267,0)
(462,486,0)
(26,138,0)
(163,90,0)
(38,60,0)
(183,248,0)
(538,276,0)
(290,65,0)
(289,495,0)
(308,377,0)
(443,286,0)
(541,297,0)
(372,236,0)
(0,286,0)
(369,15,0)
(385,331,0)
(21,473,0)
(266,288,0)
(358,376,0)
(345,500,0)
(549,400,0)
(272,302,0)
(304,320,0)
(533,133,0)
(555,285,0)
(311,482,0)
(129,286,0)
(496,377,0)
(550,560,0)
(249,504,0)
(180,280,0)
(482,101,0)
(203,51,0)
(94,286,0)
(41,122,0)
(72,529,0)
(99,307,0)
(240,231,0)
(385,286,0)
(303,491,0)
(440,489,0)
(337,286,0)
(433,192,0)
(164,104,0)
(24,231,0)
(346,286,0)
(179,317,0)
(132,415,0)
(284,15,0)
(26,60,0)
(170,286,0)
(338,7,0)
(228,319,0)
(170,414,0)
(566,410,0)
(333,328,0)
(227,546,0)
(336,570,0)
(257,248,0)
(147,397,0)
(159,209,0)
(12,513,0)
(101,482,0)
(248,61,0)
(505,279,0)
(36,305,0)
(320,383,0)
(218,361,0)
(104,286,0)
(217,29,0)
(305,36,0)
(262,28,0)
(287,339,0)
(483,321,0)
(152,191,0)
(531,122,0)
(26,570,0)
(42,89,0)
(389,378,0)
(10,478,0)
(4,97,0)
(344,60,0)
(116,423,0)
(147,273,0)
(455,284,0)
(197,7,0)
(111,286,0)
(437,551,0)
(23,169,0)
(179,6,0)
(532,171,0)
(167,402,0)
(131,17,0)
(149,558,0)
(476,305,0)
(369,320,0)
(12,286,0)
(20,286,0)
(303,309,0)
(146,382,0)
(92,386,0)
(29,0,0)
(513,538,0)
(10,136,0)
(92,539,0)
(110,461,0)
(438,519,0)
(268,205,0)
(139,361,0)
(176,472,0)
(273,286,0)
(118,161,0)
(100,373,0)
(297,400,0)
(40,300,0)
(216,12,0)
(408,411,0)
(206,369,0)
(227,75,0)
(26,352,0)
(51,100,0)
(309,231,0)
(377,72,0)
(44,97,0)
(288,266,0)
(551,437,0)
(447,286,0)
(78,14,0)
(481,188,0)
(107,543,0)
(371,170,0)
(303,83,0)
(26,6,0)
(129,259,0)
(463,551,0)
(313,536,0)
(19,33,0)
(133,401,0)
(399,94,0)
(561,286,0)
(233,179,0)
(409,286,0)
(156,137,0)
(67,352,0)
(560,175,0)
(54,233,0)
(311,286,0)
(20,319,0)
(86,46,0)
(332,145,0)
(466,363,0)
(454,468,0)
(98,239,0)
(401,543,0)
(512,393,0)
(81,555,0)
(249,402,0)
(233,54,0)
(189,385,0)
(423,510,0)
(46,513,0)
(482,243,0)
(200,561,0)
(478,10,0)
(227,286,0)
(179,60,0)
(179,121,0)
(47,139,0)
(363,175,0)
(364,187,0)
(382,286,0)
(478,351,0)
(279,560,0)
(222,77,0)
(12,276,0)
(460,309,0)
(534,360,0)
(453,147,0)
(61,485,0)
(233,28,0)
(147,453,0)
(128,472,0)
(267,89,0)
(288,269,0)
(144,217,0)
(9,30,0)
(331,370,0)
(419,555,0)
(79,262,0)
(208,276,0)
(400,281,0)
(490,234,0)
(542,453,0)
(184,269,0)
(455,326,0)
(315,502,0)
(409,100,0)
(386,92,0)
(211,165,0)
(193,191,0)
(536,331,0)
(266,75,0)
(24,61,0)
(372,286,0)
(1,483,0)
(241,121,0)
(179,138,0)
(263,90,0)
(457,72,0)
(349,141,0)
(495,289,0)
(60,286,0)
(103,415,0)
(8,129,0)
(239,98,0)
(415,290,0)
(138,513,0)
(467,351,0)
(554,244,0)
(519,438,0)
(252,286,0)
(26,491,0)
(303,317,0)
(101,286,0)
(477,437,0)
(57,393,0)
(325,215,0)
(486,471,0)
(380,223,0)
(412,191,0)
(299,480,0)
(33,139,0)
(173,211,0)
(483,1,0)
(505,513,0)
(509,254,0)
(480,249,0)
(237,205,0)
(30,9,0)
(506,360,0)
(262,547,0)
(376,321,0)
(306,197,0)
(488,65,0)
(26,317,0)
(122,390,0)
(68,9,0)
(376,286,0)
(404,517,0)
(61,248,0)
(515,111,0)
(189,547,0)
(148,273,0)
(83,264,0)
(141,29,0)
(80,558,0)
(106,478,0)
(221,152,0)
(288,539,0)
(340,175,0)
(537,337,0)
(404,219,0)
(554,231,0)
(386,330,0)
(284,455,0)
(187,286,0)
(500,321,0)
(491,286,0)
(453,542,0)
(426,463,0)
(0,29,0)
(269,288,0)
(18,502,0)
(30,94,0)
(398,402,0)
(220,352,0)
(155,464,0)
(382,331,0)
(378,238,0)
(52,305,0)
(519,192,0)
(410,323,0)
(369,206,0)
(94,75,0)
(307,286,0)
(446,303,0)
(330,504,0)
(540,455,0)
(26,121,0)
(81,277,0)
(425,533,0)
(92,509,0)
(553,121,0)
(334,112,0)
(305,286,0)
(219,236,0)
(262,286,0)
(424,277,0)
(559,65,0)
(293,156,0)
(64,65,0)
(421,239,0)
(510,297,0)
(244,554,0)
(330,416,0)
(84,138,0)
(154,138,0)
(444,3,0)
(98,124,0)
(88,319,0)
(557,65,0)
(372,264,0)
(269,137,0)
(474,545,0)
(265,266,0)
(112,72,0)
(175,20,0)
(136,113,0)
(524,303,0)
(405,461,0)
(322,382,0)
(439,536,0)
(91,500,0)
(214,483,0)
(300,568,0)
(452,343,0)
(135,111,0)
(508,139,0)
(300,29,0)
(129,510,0)
(213,402,0)
(168,518,0)
(342,206,0)
(259,43,0)
(179,20,0)
(171,54,0)
(464,286,0)
(166,567,0)
(390,416,0)
(137,156,0)
(26,443,0)
(26,307,0)
(74,363,0)
(494,286,0)
(134,110,0)
(73,46,0)
(171,286,0)
(309,286,0)
(514,17,0)
(144,7,0)
(26,382,0)
(95,416,0)
(72,377,0)
(346,199,0)
(281,15,0)
(489,286,0)
(21,567,0)
(319,471,0)
(280,411,0)
(26,65,0)
(162,467,0)
(187,461,0)
(324,42,0)
(165,361,0)
(468,72,0)
(363,286,0)
(179,83,0)
(539,92,0)
(209,507,0)
(175,462,0)
(378,389,0)
(301,0,0)
(172,209,0)
(198,416,0)
(339,280,0)
(433,286,0)
(423,286,0)
(26,20,0)
(323,389,0)
(83,286,0)
(365,555,0)
(410,57,0)
(292,65,0)
(329,0,0)
(303,6,0)
(316,456,0)
(204,83,0)
(348,227,0)
(281,254,0)
(296,81,0)
(16,268,0)
(97,4,0)
(504,249,0)
(303,382,0)
(256,447,0)
(500,90,0)
(438,218,0)
(156,286,0)
(494,108,0)
(121,28,0)
(536,319,0)
(290,545,0)
(327,65,0)
(505,563,0)
(505,286,0)
(276,12,0)
(462,286,0)
(76,545,0)
(517,404,0)
(569,346,0)
(232,213,0)
(303,417,0)
(545,286,0)
(17,286,0)
(89,543,0)
(539,211,0)
(451,490,0)
(359,483,0)
(51,286,0)
(279,340,0)
(199,124,0)
(386,152,0)
(150,534,0)
(307,75,0)
(303,138,0)
(492,551,0)
(383,252,0)
(163,402,0)
(368,252,0)
(191,286,0)
(43,254,0)
(340,279,0)
(143,509,0)
(542,215,0)
(375,21,0)
(383,320,0)
(303,307,0)
(423,378,0)
(428,518,0)
(1,438,0)
(314,254,0)
(139,33,0)
(227,175,0)
(522,186,0)
(411,280,0)
(156,321,0)
(558,361,0)
(360,534,0)
(80,400,0)
(351,478,0)
(354,286,0)
(22,309,0)
(337,513,0)
(393,231,0)
(346,321,0)
(567,416,0)
(70,249,0)
(502,169,0)
(175,570,0)
(441,227,0)
(393,57,0)
(175,121,0)
(217,144,0)
(464,542,0)
(320,416,0)
(88,197,0)
(402,16,0)
(199,346,0)
(362,262,0)
(202,65,0)
(201,561,0)
(497,370,0)
(521,268,0)
(141,45,0)
(120,24,0)
(517,286,0)
(551,463,0)
(438,1,0)
(523,97,0)
(110,402,0)
(443,192,0)
(165,211,0)
(59,443,0)
(570,175,0)
(478,106,0)
(538,513,0)
(219,404,0)
(187,361,0)
(119,486,0)
(63,339,0)
(123,456,0)
(267,160,0)
(17,192,0)
(5,409,0)
(518,361,0)
(110,567,0)
(62,65,0)
(561,28,0)
(494,179,0)
(542,464,0)
(397,147,0)
(252,383,0)
(361,218,0)
(13,311,0)
(535,337,0)
(485,36,0)
(526,65,0)
(210,141,0)
(15,281,0)
(60,179,0)
(357,538,0)
(434,290,0)
(391,163,0)
(328,286,0)
(570,286,0)
(501,251,0)
(326,455,0)
(548,26,0)
(402,416,0)
(226,536,0)
(494,28,0)
(161,290,0)
(439,370,0)
(339,286,0)
(363,75,0)
(297,510,0)
(54,171,0)
(169,502,0)
(239,286,0)
(473,213,0)
(562,328,0)
(525,505,0)
(374,29,0)
(215,192,0)
(276,267,0)
(108,494,0)
(243,321,0)
(509,92,0)
(35,94,0)
(363,316,0)
(111,361,0)
(272,507,0)
(516,507,0)
(351,467,0)
(400,80,0)
(88,331,0)
(90,163,0)
(437,72,0)
(163,383,0)
(272,394,1)
(399,75,1)
(369,206,1)
(161,118,1)
(26,121,1)
(88,212,1)
(411,280,1)
(30,9,1)
(21,375,1)
(462,286,1)
(378,423,1)
(480,299,1)
(177,450,1)
(222,495,1)
(24,120,1)
(546,122,1)
(457,507,1)
(179,20,1)
(168,428,1)
(494,28,1)
(233,286,1)
(137,511,1)
(175,20,1)
(482,311,1)
(171,286,1)
(136,167,1)
(167,330,1)
(395,426,1)
(123,363,1)
(370,497,1)
(26,491,1)
(161,290,1)
(524,303,1)
(9,68,1)
(468,72,1)
(518,168,1)
(91,345,1)
(288,266,1)
(354,286,1)
(490,544,1)
(311,264,1)
(303,382,1)
(81,277,1)
(505,563,1)
(368,304,1)
(215,286,1)
(136,113,1)
(473,21,1)
(248,257,1)
(483,359,1)
(239,286,1)
(519,286,1)
(21,567,1)
(113,390,1)
(519,192,1)
(556,213,1)
(383,163,1)
(4,97,1)
(330,504,1)
(469,6,1)
(44,58,1)
(303,20,1)
(134,166,1)
(493,255,1)
(26,443,1)
(26,548,1)
(55,98,1)
(197,88,1)
(485,36,1)
(133,533,1)
(458,530,1)
(386,152,1)
(517,286,1)
(555,419,1)
(200,201,1)
(287,63,1)
(155,215,1)
(53,358,1)
(51,203,1)
(518,361,1)
(532,233,1)
(113,449,1)
(487,143,1)
(214,352,1)
(461,187,1)
(278,325,1)
(25,155,1)
(185,157,1)
(378,238,1)
(219,404,1)
(450,288,1)
(83,204,1)
(57,393,1)
(103,132,1)
(1,445,1)
(69,491,1)
(61,248,1)
(334,107,1)
(217,29,1)
(561,286,1)
(239,246,1)
(385,253,1)
(289,50,1)
(542,215,1)
(108,398,1)
(303,491,1)
(233,66,1)
(305,231,1)
(438,519,1)
(17,192,1)
(301,329,1)
(385,286,1)
(46,513,1)
(2,236,1)
(367,509,1)
(560,286,1)
(333,562,1)
(489,286,1)
(266,265,1)
(418,414,1)
(563,69,1)
(459,242,1)
(206,342,1)
(46,86,1)
(473,213,1)
(364,295,1)
(376,286,1)
(298,527,1)
(539,211,1)
(14,78,1)
(148,192,1)
(472,176,1)
(211,173,1)
(60,286,1)
(361,218,1)
(251,286,1)
(280,339,1)
(505,335,1)
(482,101,1)
(545,286,1)
(346,286,1)
(102,371,1)
(475,402,1)
(551,492,1)
(401,133,1)
(550,46,1)
(501,307,1)
(247,2,1)
(542,464,1)
(494,392,1)
(300,29,1)
(506,49,1)
(509,92,1)
(328,333,1)
(251,350,1)
(280,180,1)
(213,320,1)
(16,234,1)
(546,227,1)
(398,358,1)
(249,480,1)
(175,138,1)
(166,390,1)
(345,252,1)
(355,321,1)
(381,522,1)
(308,496,1)
(343,286,1)
(433,286,1)
(145,29,1)
(26,570,1)
(250,468,1)
(97,523,1)
(352,286,1)
(105,54,1)
(410,566,1)
(82,28,1)
(246,421,1)
(119,462,1)
(240,309,1)
(179,352,1)
(521,234,1)
(455,326,1)
(533,507,1)
(489,347,1)
(269,137,1)
(510,297,1)
(189,385,1)
(389,378,1)
(122,531,1)
(209,172,1)
(346,569,1)
(175,352,1)
(400,281,1)
(227,175,1)
(50,343,1)
(347,440,1)
(23,305,1)
(26,307,1)
(179,121,1)
(533,425,1)
(175,60,1)
(316,456,1)
(112,195,1)
(437,477,1)
(419,310,1)
(252,286,1)
(483,286,1)
(1,483,1)
(494,286,1)
(276,267,1)
(54,233,1)
(538,276,1)
(402,16,1)
(223,258,1)
(541,400,1)
(272,507,1)
(374,555,1)
(32,323,1)
(139,508,1)
(71,238,1)
(175,443,1)
(167,34,1)
(262,179,1)
(111,135,1)
(269,402,1)
(255,563,1)
(12,513,1)
(83,286,1)
(140,262,1)
(152,191,1)
(472,567,1)
(277,93,1)
(158,409,1)
(121,553,1)
(307,99,1)
(212,31,1)
(462,56,1)
(534,360,1)
(554,231,1)
(553,241,1)
(11,112,1)
(179,309,1)
(190,443,1)
(9,286,1)
(156,321,1)
(184,137,1)
(454,272,1)
(326,361,1)
(433,151,1)
(415,290,1)
(455,540,1)
(303,121,1)
(152,221,1)
(87,442,1)
(179,138,1)
(412,193,1)
(131,105,1)
(223,29,1)
(350,501,1)
(373,473,1)
(49,484,1)
(34,96,1)
(407,94,1)
(570,336,1)
(545,474,1)
(525,560,1)
(218,438,1)
(170,102,1)
(58,372,1)
(26,352,1)
(331,370,1)
(191,412,1)
(137,156,1)
(163,391,1)
(354,331,1)
(342,111,1)
(126,367,1)
(551,437,1)
(303,317,1)
(421,222,1)
(191,361,1)
(530,338,1)
(271,521,1)
(293,565,1)
(42,403,1)
(372,286,1)
(449,470,1)
(17,286,1)
(497,439,1)
(141,349,1)
(544,451,1)
(24,231,1)
(164,472,1)
(171,430,1)
(456,286,1)
(187,286,1)
(176,128,1)
(453,542,1)
(175,570,1)
(229,264,1)
(72,377,1)
(266,286,1)
(89,42,1)
(70,480,1)
(284,455,1)
(328,286,1)
(370,439,1)
(339,287,1)
(17,131,1)
(315,18,1)
(36,305,1)
(534,150,1)
(408,280,1)
(373,100,1)
(45,507,1)
(146,322,1)
(30,94,1)
(144,217,1)
(421,178,1)
(248,286,1)
(485,61,1)
(26,138,1)
(20,286,1)
(354,319,1)
(423,116,1)
(297,400,1)
(319,228,1)
(205,237,1)
(236,4,1)
(259,129,1)
(406,418,1)
(317,286,1)
(363,466,1)
(26,317,1)
(320,383,1)
(438,1,1)
(85,506,1)
(129,318,1)
(227,441,1)
(531,41,1)
(141,29,1)
(205,192,1)
(466,74,1)
(337,537,1)
(377,29,1)
(539,288,1)
(129,510,1)
(100,409,1)
(145,332,1)
(312,489,1)
(231,240,1)
(232,100,1)
(128,104,1)
(244,554,1)
(496,457,1)
(385,331,1)
(60,38,1)
(266,75,1)
(340,46,1)
(363,175,1)
(262,79,1)
(281,15,1)
(26,462,1)
(230,485,1)
(453,147,1)
(154,7,1)
(303,60,1)
(216,194,1)
(554,270,1)
(326,286,1)
(381,57,1)
(335,525,1)
(204,207,1)
(104,179,1)
(339,361,1)
(404,328,1)
(112,72,1)
(505,513,1)
(90,500,1)
(516,81,1)
(120,224,1)
(16,268,1)
(517,264,1)
(337,513,1)
(107,42,1)
(132,83,1)
(28,561,1)
(42,29,1)
(10,136,1)
(538,267,1)
(138,84,1)
(175,491,1)
(144,463,1)
(243,482,1)
(313,226,1)
(351,467,1)
(48,59,1)
(344,30,1)
(363,286,1)
(421,351,1)
(129,286,1)
(260,376,1)
(468,454,1)
(37,54,1)
(12,563,1)
(104,28,1)
(512,32,1)
(500,286,1)
(441,348,1)
(63,361,1)
(19,139,1)
(15,284,1)
(163,402,1)
(135,515,1)
(209,507,1)
(207,30,1)
(117,490,1)
(36,169,1)
(358,260,1)
(538,535,1)
(215,278,1)
(201,121,1)
(524,26,1)
(523,44,1)
(179,60,1)
(15,369,1)
(147,397,1)
(111,361,1)
(81,555,1)
(261,219,1)
(26,309,1)
(179,462,1)
(179,189,1)
(379,452,1)
(262,286,1)
(547,354,1)
(439,536,1)
(522,414,1)
(242,281,1)
(75,251,1)
(303,309,1)
(437,72,1)
(217,458,1)
(303,307,1)
(503,13,1)
(175,6,1)
(536,331,1)
(6,384,1)
(507,432,1)
(12,286,1)
(558,286,1)
(504,489,1)
(518,286,1)
(490,286,1)
(443,286,1)
(422,558,1)
(540,326,1)
(495,433,1)
(478,106,1)
(162,164,1)
(121,286,1)
(203,158,1)
(355,199,1)
(393,512,1)
(421,485,1)
(353,123,1)
(57,410,1)
(505,286,1)
(447,321,1)
(14,323,1)
(442,108,1)
(208,12,1)
(360,361,1)
(46,563,1)
(167,402,1)
(370,7,1)
(399,175,1)
(139,361,1)
(262,28,1)
(52,476,1)
(97,290,1)
(253,413,1)
(432,516,1)
(423,510,1)
(483,321,1)
(197,7,1)
(456,353,1)
(68,407,1)
(430,532,1)
(372,264,1)
(447,256,1)
(234,490,1)
(371,290,1)
(8,510,1)
(279,505,1)
(252,448,1)
(118,190,1)
(491,406,1)
(179,307,1)
(43,259,1)
(405,187,1)
(401,112,1)
(100,51,1)
(306,88,1)
(157,373,1)
(192,161,1)
(259,33,1)
(554,286,1)
(179,317,1)
(428,230,1)
(425,564,1)
(101,109,1)
(7,144,1)
(205,286,1)
(265,487,1)
(133,145,1)
(397,298,1)
(219,236,1)
(175,309,1)
(360,286,1)
(51,286,1)
(26,60,1)
(274,567,1)
(54,171,1)
(197,306,1)
(538,357,1)
(226,382,1)
(86,73,1)
(332,11,1)
(181,478,1)
(519,114,1)
(492,209,1)
(109,469,1)
(179,443,1)
(277,286,1)
(369,320,1)
(288,269,1)
(376,366,1)
(536,319,1)
(46,286,1)
(6,286,1)
(99,37,1)
(189,547,1)
(500,321,1)
(359,214,1)
(79,362,1)
(372,436,1)
(377,308,1)
(362,385,1)
(22,43,1)
(376,321,1)
(153,549,1)
(264,415,1)
(409,179,1)
(187,364,1)
(266,175,1)
(296,29,1)
(409,28,1)
(156,293,1)
(179,570,1)
(463,551,1)
(26,20,1)
(26,83,1)
(187,361,1)
(365,182,1)
(236,372,1)
(461,405,1)
(104,286,1)
(40,365,1)
(92,539,1)
(173,165,1)
(174,550,1)
(98,239,1)
(366,196,1)
(514,17,1)
(300,40,1)
(337,286,1)
(33,139,1)
(304,330,1)
(409,5,1)
(127,14,1)
(142,539,1)
(382,286,1)
(358,376,1)
(148,514,1)
(175,307,1)
(409,286,1)
(536,286,1)
(165,177,1)
(294,411,1)
(515,387,1)
(309,286,1)
(31,439,1)
(93,424,1)
(101,286,1)
(10,316,1)
(486,119,1)
(324,499,1)
(413,60,1)
(490,321,1)
(96,316,1)
(179,83,1)
(297,509,1)
(494,179,1)
(549,317,1)
(383,252,1)
(114,341,1)
(297,541,1)
(336,261,1)
(90,263,1)
(66,82,1)
(303,138,1)
(536,313,1)
(241,453,1)
(175,340,1)
(386,330,1)
(307,286,1)
(398,53,1)
(322,513,1)
(150,360,1)
(303,446,1)
(59,486,1)
(547,262,1)
(84,154,1)
(303,6,1)
(375,556,1)
(513,538,1)
(296,300,1)
(558,361,1)
(147,273,1)
(464,286,1)
(108,494,1)
(106,546,1)
(460,22,1)
(436,355,1)
(411,408,1)
(467,162,1)
(273,192,1)
(224,244,1)
(337,563,1)
(558,149,1)
(433,192,1)
(343,379,1)
(156,286,1)
(305,52,1)
(193,142,1)
(404,517,1)
(354,275,1)
(73,570,1)
(478,10,1)
(47,129,1)
(387,284,1)
(175,462,1)
(499,45,1)
(170,286,1)
(561,200,1)
(115,219,1)
(67,220,1)
(470,167,1)
(175,317,1)
(33,19,1)
(520,232,1)
(56,528,1)
(151,115,1)
(5,181,1)
(517,247,1)
(88,331,1)
(447,286,1)
(26,382,1)
(560,75,1)
(110,402,1)
(326,87,1)
(125,138,1)
(45,141,1)
(220,495,1)
(94,175,1)
(394,331,1)
(249,402,1)
(94,35,1)
(249,70,1)
(215,192,1)
(138,286,1)
(363,75,1)
(318,8,1)
(111,286,1)
(537,125,1)
(565,266,1)
(446,127,1)
(116,71,1)
(392,126,1)
(80,558,1)
(445,483,1)
(329,374,1)
(310,319,1)
(182,45,1)
(191,286,1)
(94,75,1)
(511,156,1)
(351,478,1)
(535,337,1)
(400,80,1)
(500,91,1)
(303,570,1)
(228,20,1)
(303,443,1)
(528,81,1)
(213,520,1)
(213,402,1)
(35,399,1)
(20,493,1)
(348,10,1)
(165,286,1)
(564,145,1)
(303,462,1)
(29,0,1)
(352,67,1)
(268,205,1)
(491,286,1)
(12,216,1)
(504,249,1)
(267,89,1)
(476,61,1)
(492,223,1)
(270,381,1)
(256,312,1)
(426,217,1)
(195,334,1)
(139,286,1)
(149,153,1)
(165,361,1)
(194,535,1)
(560,174,1)
(311,286,1)
(477,395,1)
(164,104,1)
(279,560,1)
(211,165,1)
(479,518,1)
(273,552,1)
(238,518,1)
(257,183,1)
(370,197,1)
(305,286,1)
(41,227,1)
(410,323,1)
(316,363,1)
(26,6,1)
(384,229,1)
(163,90,1)
(18,23,1)
(448,368,1)
(0,301,1)
(269,184,1)
(74,320,1)
(210,250,1)
(397,290,1)
(385,319,1)
(440,274,1)
(464,25,1)
(443,48,1)
(122,390,1)
(502,315,1)
(508,47,1)
(414,170,1)
(92,386,1)
(88,319,1)
(338,267,1)
(562,517,1)
(159,223,1)
(415,103,1)
(273,286,1)
(317,459,1)
(284,108,1)
(452,433,1)
(227,75,1)
(76,434,1)
(325,147,1)
(233,179,1)
(183,24,1)
(390,475,1)
(104,185,1)
(567,110,1)
(224,231,1)
(0,286,1)
(560,175,1)
(365,555,1)
(566,393,1)
(179,491,1)
(110,461,1)
(475,534,1)
(233,28,1)
(349,210,1)
(238,479,1)
(393,286,1)
(467,373,1)
(179,6,1)
(360,85,1)
(143,351,1)
(548,453,1)
(398,402,1)
(382,146,1)
(276,208,1)
(180,339,1)
(321,243,1)
(82,179,1)
(295,134,1)
(172,159,1)
(451,294,1)
(299,447,1)
(403,324,1)
(543,401,1)
(237,271,1)
(391,90,1)
(78,57,1)
(527,273,1)
(346,321,1)
(227,286,1)
(339,286,1)
(480,447,1)
(179,382,1)
(175,382,1)
(196,494,1)
(569,55,1)
(311,503,1)
(275,140,1)
(357,535,1)
(89,543,1)
(80,422,1)
(38,344,1)
(502,290,1)
(323,389,1)
(393,231,1)
(24,286,1)
(234,117,1)
(199,346,1)
(343,321,1)
(423,286,1)
(88,286,1)
(290,545,1)
(424,296,1)
(276,12,1)
(484,402,1)
(239,264,1)
(175,121,1)
(263,500,1)
(552,148,1)
(340,279,1)
(178,411,1)
(303,352,1)
(570,286,1)
(495,289,1)
(206,111,1)
(303,83,1)
(309,460,1)
(94,286,1)
(289,343,1)
(221,191,1)
(61,24,1)
(380,437,1)
(474,76,1)
(175,83,1)
(341,1,1)
(250,72,1)
(169,502,1)
(13,101,1)
(258,380,1)
(244,57,2)
(284,351,2)
(58,30,2)
(456,286,2)
(147,397,2)
(195,45,2)
(18,61,2)
(93,414,2)
(372,264,2)
(239,411,2)
(401,133,2)
(118,414,2)
(38,30,2)
(256,411,2)
(287,495,2)
(127,57,2)
(428,485,2)
(273,54,2)
(179,317,2)
(443,286,2)
(517,264,2)
(447,321,2)
(24,57,2)
(407,54,2)
(275,30,2)
(269,351,2)
(171,453,2)
(30,219,2)
(415,30,2)
(162,164,2)
(101,30,2)
(145,45,2)
(523,411,2)
(510,297,2)
(17,192,2)
(424,414,2)
(560,75,2)
(337,286,2)
(100,478,2)
(355,495,2)
(430,30,2)
(554,231,2)
(36,305,2)
(483,286,2)
(386,152,2)
(12,286,2)
(70,411,2)
(310,414,2)
(61,24,2)
(399,54,2)
(259,129,2)
(11,45,2)
(528,414,2)
(303,352,2)
(218,495,2)
(527,54,2)
(12,535,2)
(439,45,2)
(152,191,2)
(436,495,2)
(219,404,2)
(547,354,2)
(183,414,2)
(242,351,2)
(215,147,2)
(289,343,2)
(390,411,2)
(426,45,2)
(50,219,2)
(185,373,2)
(26,570,2)
(316,456,2)
(355,30,2)
(45,507,2)
(192,161,2)
(236,372,2)
(177,351,2)
(421,495,2)
(515,351,2)
(459,351,2)
(223,29,2)
(274,411,2)
(385,286,2)
(544,411,2)
(213,320,2)
(61,248,2)
(395,45,2)
(246,411,2)
(445,495,2)
(257,57,2)
(252,411,2)
(137,351,2)
(453,147,2)
(514,17,2)
(40,81,2)
(199,495,2)
(359,495,2)
(45,141,2)
(569,411,2)
(227,175,2)
(266,351,2)
(347,411,2)
(563,414,2)
(137,156,2)
(377,29,2)
(103,30,2)
(363,286,2)
(351,478,2)
(443,414,2)
(305,231,2)
(537,45,2)
(171,30,2)
(386,330,2)
(15,284,2)
(509,92,2)
(170,286,2)
(331,370,2)
(538,535,2)
(335,219,2)
(535,45,2)
(360,361,2)
(351,411,2)
(244,554,2)
(491,414,2)
(164,373,2)
(276,535,2)
(159,45,2)
(233,179,2)
(248,414,2)
(365,555,2)
(464,147,2)
(253,30,2)
(311,30,2)
(505,219,2)
(175,309,2)
(147,273,2)
(379,219,2)
(484,411,2)
(83,30,2)
(191,361,2)
(266,175,2)
(370,45,2)
(381,414,2)
(219,485,2)
(43,259,2)
(447,286,2)
(78,57,2)
(80,558,2)
(263,411,2)
(108,398,2)
(307,286,2)
(128,373,2)
(311,264,2)
(88,331,2)
(500,411,2)
(561,453,2)
(244,414,2)
(94,54,2)
(94,175,2)
(21,100,2)
(175,6,2)
(268,411,2)
(389,378,2)
(560,219,2)
(419,414,2)
(402,16,2)
(409,478,2)
(423,510,2)
(323,485,2)
(446,57,2)
(55,485,2)
(90,500,2)
(142,351,2)
(330,411,2)
(313,45,2)
(199,346,2)
(179,382,2)
(504,489,2)
(303,57,2)
(73,219,2)
(466,411,2)
(308,81,2)
(138,286,2)
(520,100,2)
(179,138,2)
(303,307,2)
(464,286,2)
(208,535,2)
(56,414,2)
(495,433,2)
(66,30,2)
(236,4,2)
(49,411,2)
(91,411,2)
(51,286,2)
(461,411,2)
(26,6,2)
(508,351,2)
(134,411,2)
(26,453,2)
(552,414,2)
(547,262,2)
(92,386,2)
(5,478,2)
(241,453,2)
(398,402,2)
(339,286,2)
(98,411,2)
(361,495,2)
(522,414,2)
(364,411,2)
(376,321,2)
(412,351,2)
(519,495,2)
(46,513,2)
(518,286,2)
(88,439,2)
(551,45,2)
(120,57,2)
(44,30,2)
(175,317,2)
(495,289,2)
(175,138,2)
(467,478,2)
(570,286,2)
(36,169,2)
(341,495,2)
(492,223,2)
(410,485,2)
(148,54,2)
(246,351,2)
(475,411,2)
(376,351,2)
(97,411,2)
(139,351,2)
(493,414,2)
(26,138,2)
(89,45,2)
(309,351,2)
(457,81,2)
(231,351,2)
(85,411,2)
(59,414,2)
(58,485,2)
(127,14,2)
(322,45,2)
(175,462,2)
(447,411,2)
(233,286,2)
(473,213,2)
(554,286,2)
(400,281,2)
(452,219,2)
(311,286,2)
(564,45,2)
(264,415,2)
(92,351,2)
(26,121,2)
(297,509,2)
(248,286,2)
(391,411,2)
(80,351,2)
(303,462,2)
(305,286,2)
(262,28,2)
(248,57,2)
(370,439,2)
(221,351,2)
(20,286,2)
(173,351,2)
(172,45,2)
(54,233,2)
(411,280,2)
(318,351,2)
(297,400,2)
(409,179,2)
(339,495,2)
(7,144,2)
(570,219,2)
(10,136,2)
(556,100,2)
(317,351,2)
(491,286,2)
(551,492,2)
(107,45,2)
(468,45,2)
(55,351,2)
(94,219,2)
(534,411,2)
(538,45,2)
(165,361,2)
(44,485,2)
(369,206,2)
(531,10,2)
(289,219,2)
(55,411,2)
(497,439,2)
(42,29,2)
(337,45,2)
(17,54,2)
(246,485,2)
(97,30,2)
(120,351,2)
(558,361,2)
(296,414,2)
(20,414,2)
(212,439,2)
(82,453,2)
(217,29,2)
(393,231,2)
(83,286,2)
(75,54,2)
(255,414,2)
(133,533,2)
(358,351,2)
(315,61,2)
(161,414,2)
(115,219,2)
(152,351,2)
(71,485,2)
(46,219,2)
(136,316,2)
(421,411,2)
(279,560,2)
(22,351,2)
(303,382,2)
(175,491,2)
(98,239,2)
(321,243,2)
(353,411,2)
(10,411,2)
(366,351,2)
(4,30,2)
(521,411,2)
(483,495,2)
(148,414,2)
(179,462,2)
(6,30,2)
(236,495,2)
(24,231,2)
(372,30,2)
(485,414,2)
(110,411,2)
(495,219,2)
(119,414,2)
(414,170,2)
(384,30,2)
(10,316,2)
(197,439,2)
(513,45,2)
(13,30,2)
(279,219,2)
(1,495,2)
(19,351,2)
(194,535,2)
(43,351,2)
(111,286,2)
(219,495,2)
(87,351,2)
(545,286,2)
(106,10,2)
(355,485,2)
(303,443,2)
(351,467,2)
(505,563,2)
(179,20,2)
(35,219,2)
(360,286,2)
(178,411,2)
(363,411,2)
(354,30,2)
(514,54,2)
(224,57,2)
(141,45,2)
(281,351,2)
(165,351,2)
(569,351,2)
(284,455,2)
(346,286,2)
(110,461,2)
(404,517,2)
(264,30,2)
(299,411,2)
(433,219,2)
(373,478,2)
(239,351,2)
(167,402,2)
(155,147,2)
(507,81,2)
(17,286,2)
(425,45,2)
(126,351,2)
(4,411,2)
(269,137,2)
(430,453,2)
(502,61,2)
(9,286,2)
(337,513,2)
(175,307,2)
(265,351,2)
(303,309,2)
(281,15,2)
(451,411,2)
(180,495,2)
(24,414,2)
(222,495,2)
(26,352,2)
(440,411,2)
(270,414,2)
(175,20,2)
(494,179,2)
(303,6,2)
(104,179,2)
(51,478,2)
(246,495,2)
(277,81,2)
(184,351,2)
(153,351,2)
(312,411,2)
(543,401,2)
(67,495,2)
(554,414,2)
(97,290,2)
(141,81,2)
(333,236,2)
(139,361,2)
(411,495,2)
(276,267,2)
(368,411,2)
(169,502,2)
(423,485,2)
(227,10,2)
(303,138,2)
(111,351,2)
(438,519,2)
(187,361,2)
(439,536,2)
(542,147,2)
(483,321,2)
(4,351,2)
(323,389,2)
(361,218,2)
(32,485,2)
(174,219,2)
(436,30,2)
(387,351,2)
(89,543,2)
(290,545,2)
(438,495,2)
(405,411,2)
(44,495,2)
(409,286,2)
(346,495,2)
(383,411,2)
(116,485,2)
(131,54,2)
(14,57,2)
(104,28,2)
(15,351,2)
(305,61,2)
(2,236,2)
(214,495,2)
(84,45,2)
(378,485,2)
(150,411,2)
(114,495,2)
(206,351,2)
(448,411,2)
(500,286,2)
(541,351,2)
(26,83,2)
(421,351,2)
(211,165,2)
(37,54,2)
(510,351,2)
(81,277,2)
(266,286,2)
(298,414,2)
(44,411,2)
(157,373,2)
(502,290,2)
(303,20,2)
(567,110,2)
(442,351,2)
(45,81,2)
(352,286,2)
(421,485,2)
(46,286,2)
(66,453,2)
(542,464,2)
(60,286,2)
(346,485,2)
(467,162,2)
(345,411,2)
(210,81,2)
(334,45,2)
(404,328,2)
(204,30,2)
(400,351,2)
(58,351,2)
(175,219,2)
(68,54,2)
(175,83,2)
(472,373,2)
(454,45,2)
(303,570,2)
(472,567,2)
(546,122,2)
(374,414,2)
(478,10,2)
(179,491,2)
(26,60,2)
(300,81,2)
(234,411,2)
(399,219,2)
(490,321,2)
(179,121,2)
(343,286,2)
(236,30,2)
(203,478,2)
(154,45,2)
(28,453,2)
(273,286,2)
(261,219,2)
(324,45,2)
(402,411,2)
(458,45,2)
(336,219,2)
(372,411,2)
(479,485,2)
(262,286,2)
(433,286,2)
(205,192,2)
(0,414,2)
(386,351,2)
(394,45,2)
(533,45,2)
(100,51,2)
(354,331,2)
(517,236,2)
(29,414,2)
(88,286,2)
(543,45,2)
(505,286,2)
(284,108,2)
(168,485,2)
(367,351,2)
(438,1,2)
(489,286,2)
(179,6,2)
(175,352,2)
(227,286,2)
(74,411,2)
(473,100,2)
(400,80,2)
(437,45,2)
(258,45,2)
(121,453,2)
(485,57,2)
(511,351,2)
(280,339,2)
(288,351,2)
(343,321,2)
(4,485,2)
(303,491,2)
(340,46,2)
(179,443,2)
(86,219,2)
(496,81,2)
(262,179,2)
(462,414,2)
(380,45,2)
(41,10,2)
(482,30,2)
(330,504,2)
(413,30,2)
(303,83,2)
(485,61,2)
(326,361,2)
(133,145,2)
(45,45,2)
(108,494,2)
(147,414,2)
(99,54,2)
(422,351,2)
(432,81,2)
(267,45,2)
(33,139,2)
(249,402,2)
(1,483,2)
(482,101,2)
(566,485,2)
(407,219,2)
(372,351,2)
(549,351,2)
(437,72,2)
(540,351,2)
(224,414,2)
(410,323,2)
(179,352,2)
(397,290,2)
(90,411,2)
(363,75,2)
(200,453,2)
(81,555,2)
(165,286,2)
(183,57,2)
(524,26,2)
(97,485,2)
(248,351,2)
(309,286,2)
(239,495,2)
(436,351,2)
(538,276,2)
(385,331,2)
(213,402,2)
(499,45,2)
(453,414,2)
(193,351,2)
(453,54,2)
(16,411,2)
(271,411,2)
(383,252,2)
(433,192,2)
(199,351,2)
(163,90,2)
(460,351,2)
(29,0,2)
(233,28,2)
(260,351,2)
(385,30,2)
(306,439,2)
(57,410,2)
(490,411,2)
(24,286,2)
(215,192,2)
(506,411,2)
(196,351,2)
(97,351,2)
(179,309,2)
(166,411,2)
(343,219,2)
(238,485,2)
(365,81,2)
(30,54,2)
(92,539,2)
(9,54,2)
(216,535,2)
(44,351,2)
(236,411,2)
(57,485,2)
(239,485,2)
(340,279,2)
(104,286,2)
(375,100,2)
(122,390,2)
(136,113,2)
(197,7,2)
(294,411,2)
(129,510,2)
(295,411,2)
(247,236,2)
(392,351,2)
(296,81,2)
(303,60,2)
(26,491,2)
(355,351,2)
(7,45,2)
(304,411,2)
(236,351,2)
(319,414,2)
(112,72,2)
(175,121,2)
(175,570,2)
(307,54,2)
(505,513,2)
(277,414,2)
(93,81,2)
(140,30,2)
(370,7,2)
(355,411,2)
(297,351,2)
(338,45,2)
(449,316,2)
(346,411,2)
(317,286,2)
(26,309,2)
(161,290,2)
(408,495,2)
(257,351,2)
(547,30,2)
(503,30,2)
(249,411,2)
(418,414,2)
(35,54,2)
(553,453,2)
(535,337,2)
(383,163,2)
(273,414,2)
(320,411,2)
(53,351,2)
(183,351,2)
(151,219,2)
(303,317,2)
(390,475,2)
(227,75,2)
(144,463,2)
(385,319,2)
(469,30,2)
(211,351,2)
(250,81,2)
(532,453,2)
(340,219,2)
(239,264,2)
(108,351,2)
(398,351,2)
(273,192,2)
(31,439,2)
(485,36,2)
(75,251,2)
(146,45,2)
(486,414,2)
(389,485,2)
(298,54,2)
(6,286,2)
(249,480,2)
(257,414,2)
(113,316,2)
(530,45,2)
(228,414,2)
(156,351,2)
(349,45,2)
(98,485,2)
(494,351,2)
(209,45,2)
(339,361,2)
(423,286,2)
(163,402,2)
(111,361,2)
(100,409,2)
(190,414,2)
(370,197,2)
(475,534,2)
(461,187,2)
(478,106,2)
(487,351,2)
(104,373,2)
(478,411,2)
(215,286,2)
(234,490,2)
(565,351,2)
(0,286,2)
(26,382,2)
(243,30,2)
(164,104,2)
(123,411,2)
(293,351,2)
(4,495,2)
(501,54,2)
(33,351,2)
(546,10,2)
(381,57,2)
(189,547,2)
(532,30,2)
(129,351,2)
(213,100,2)
(346,321,2)
(362,30,2)
(240,351,2)
(182,81,2)
(523,30,2)
(539,288,2)
(523,351,2)
(252,286,2)
(424,81,2)
(321,30,2)
(220,495,2)
(259,33,2)
(397,54,2)
(25,147,2)
(560,175,2)
(272,45,2)
(251,54,2)
(179,83,2)
(536,331,2)
(169,61,2)
(210,45,2)
(382,286,2)
(477,45,2)
(259,351,2)
(189,30,2)
(94,286,2)
(276,12,2)
(187,411,2)
(58,411,2)
(175,340,2)
(72,81,2)
(453,542,2)
(352,495,2)
(199,411,2)
(539,351,2)
(480,447,2)
(369,320,2)
(536,319,2)
(504,249,2)
(538,267,2)
(476,61,2)
(550,219,2)
(567,411,2)
(300,29,2)
(138,45,2)
(316,411,2)
(144,217,2)
(303,121,2)
(98,351,2)
(145,29,2)
(181,478,2)
(519,286,2)
(358,376,2)
(450,351,2)
(279,505,2)
(404,236,2)
(36,61,2)
(236,485,2)
(15,369,2)
(373,100,2)
(372,286,2)
(167,330,2)
(397,414,2)
(223,45,2)
(462,286,2)
(219,351,2)
(494,28,2)
(239,286,2)
(393,286,2)
(348,10,2)
(455,351,2)
(523,485,2)
(360,411,2)
(14,323,2)
(406,414,2)
(328,286,2)
(158,478,2)
(106,546,2)
(269,402,2)
(82,30,2)
(455,326,2)
(326,351,2)
(468,72,2)
(125,45,2)
(129,286,2)
(369,351,2)
(525,219,2)
(329,414,2)
(175,382,2)
(268,205,2)
(42,45,2)
(534,360,2)
(47,351,2)
(68,219,2)
(171,286,2)
(105,54,2)
(267,89,2)
(393,485,2)
(475,402,2)
(219,30,2)
(69,414,2)
(48,414,2)
(54,171,2)
(546,227,2)
(238,518,2)
(139,286,2)
(61,414,2)
(378,423,2)
(270,57,2)
(403,45,2)
(377,81,2)
(346,351,2)
(187,286,2)
(16,234,2)
(229,30,2)
(163,411,2)
(527,414,2)
(470,316,2)
(26,307,2)
(517,286,2)
(349,81,2)
(26,317,2)
(363,175,2)
(141,29,2)
(415,290,2)
(401,112,2)
(251,286,2)
(226,45,2)
(266,75,2)
(209,507,2)
(518,485,2)
(518,361,2)
(463,551,2)
(512,485,2)
(24,351,2)
(523,495,2)
(112,45,2)
(326,286,2)
(98,495,2)
(492,209,2)
(101,286,2)
(350,54,2)
(272,507,2)
(280,495,2)
(175,60,2)
(46,563,2)
(81,414,2)
(179,60,2)
(467,373,2)
(28,561,2)
(325,147,2)
(519,192,2)
(482,311,2)
(135,351,2)
(372,495,2)
(539,211,2)
(179,570,2)
(277,286,2)
(409,28,2)
(219,411,2)
(61,57,2)
(61,351,2)
(4,97,2)
(463,45,2)
(569,495,2)
(55,495,2)
(551,437,2)
(552,54,2)
(217,45,2)
(436,411,2)
(516,81,2)
(143,351,2)
(113,390,2)
(555,414,2)
(34,316,2)
(164,472,2)
(21,567,2)
(376,286,2)
(288,269,2)
(316,363,2)
(558,286,2)
(136,167,2)
(489,411,2)
(378,238,2)
(191,351,2)
(320,383,2)
(12,513,2)
(54,453,2)
(72,377,2)
(120,414,2)
(175,443,2)
(562,236,2)
(89,42,2)
(436,485,2)
(30,9,2)
(52,61,2)
(232,100,2)
(117,411,2)
(533,507,2)
(16,268,2)
(88,319,2)
(373,473,2)
(237,411,2)
(233,453,2)
(401,45,2)
(504,411,2)
(219,236,2)
(12,563,2)
(192,414,2)
(26,462,2)
(548,453,2)
(199,485,2)
(96,316,2)
(243,482,2)
(9,219,2)
(179,189,2)
(473,21,2)
(8,351,2)
(357,535,2)
(524,303,2)
(197,88,2)
(60,30,2)
(132,30,2)
(149,351,2)
(109,30,2)
(156,321,2)
(54,30,2)
(558,351,2)
(147,54,2)
(262,30,2)
(110,402,2)
(156,286,2)
(79,30,2)
(480,411,2)
(331,45,2)
(509,351,2)
(133,45,2)
(121,286,2)
(179,307,2)
(494,286,2)
(23,61,2)
(224,351,2)
(167,316,2)
(561,286,2)
(492,45,2)
(176,373,2)
(372,485,2)
(278,147,2)
(162,373,2)
(205,286,2)
(354,319,2)
(560,286,2)
(441,10,2)
(250,45,2)
(122,10,2)
(569,485,2)
(81,81,2)
(456,411,2)
(490,286,2)
(30,94,2)
(398,358,2)
(233,30,2)
(554,57,2)
(58,495,2)
(500,321,2)
(144,45,2)
(97,495,2)
(382,45,2)
(207,30,2)
(57,393,2)
(189,385,2)
(328,236,2)
(201,453,2)
(513,538,2)
(94,75,2)
(206,111,2)
(26,20,2)
(205,411,2)
(26,443,2)
(63,495,2)
(354,286,2)
(536,45,2)
(218,438,2)
(337,563,2)
(536,286,2)
(485,351,2)
(191,286,2)
(179,30,2)
(288,266,2)
(344,30,2)
(542,215,2)
(332,45,2)
(230,485,2)
(342,351,2)
(301,414,2)
-----------------------------------
(0,pi->picomps)
(1,pi->picomp->pirlvls)
(2,pi)
(3,)
(4,JAS_CAST(int, pchg->compnoend)
(5,y)
(6,pi->picomp)
(7,ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(8,pi)
(9,pi->xend)
(10,pi->x == pi->xstart && ((trx0 << r)
(11,picomp)
(12,pi->xstep)
(13,pi)
(14,*prclyrno)
(15,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(16,pi->picomp->numrlvls - 1 - pi->rlvlno)
(17,pi->rlvlno)
(18,pchg)
(19,numprcs)
(20,pi->ystep)
(21,1 << rpy)
(22,pi)
(23,int)
(24,pi->lyrno)
(25,maxrlvls)
(26,return 1;)
(27,r)
(28,pi->y = pi->ystart)
(29,picomp = pi->picomps)
(30,pi->x < pi->xend)
(31,pi)
(32,pi)
(33,pi->pirlvl->numprcs)
(34,r)
(35,x)
(36,pi->lyrno < JAS_CAST(int, pchg->lyrnoend)
(37,pi)
(38,y)
(39,rlvlno)
(40,picomp)
(41,1)
(42,picomp->hsamp)
(43,assert(pi->prcno < pi->pirlvl->numprcs)
(44,pchg)
(45,rlvlno <\\n\\t\\t\\t  picomp->numrlvls)
(46,pi->xstep)
(47,pi)
(48,rlvlno)
(49,r)
(50,numrlvls)
(51,pi->ystart)
(52,lyrno)
(53,r)
(54,pi->y < pi->yend)
(55,pi)
(56,prgvolfirst)
(57,pi->lyrno >= *prclyrno)
(58,int)
(59,pi)
(60,pi->y)
(61,pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs)
(62,pchg)
(63,pi)
(64,prcvind)
(65,)
(66,y)
(67,pirlvl)
(68,xend)
(69,0)
(70,r)
(71,pi)
(72,pirlvl = picomp->pirlvls)
(73,pi)
(74,pi)
(75,pi->x = pi->xstart)
(76,pi)
(77,)
(78,prclyrno)
(79,y)
(80,pi->pirlvl->numhprcs)
(81,compno < pi->numcomps)
(82,pi)
(83,pi->compno)
(84,xstep)
(85,pirlvl)
(86,xstep)
(87,pirlvl)
(88,pi->ystep)
(89,picomp->hsamp * (1 << (pirlvl->prcwidthexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(90,pi->picomp->vsamp)
(91,picomp)
(92,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(93,numcomps)
(94,pi->x)
(95,if (((pi->x == pi->xstart && ((trx0 << r)
(96,trx0)
(97,pchg->compnoend)
(98,++pi->compno)
(99,x)
(100,pi->y == pi->ystart)
(101,pi->picomps)
(102,prgvolfirst)
(103,compnostart)
(104,pi->y)
(105,pi)
(106,!(pi->x % (1 << rpx)
(107,1)
(108,JPC_CEILDIV(pi->y, pi->picomp->vsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(109,picomps)
(110,r + pi->pirlvl->prcheightexpn)
(111,pi->pirlvl)
(112,pirlvl->prcwidthexpn)
(113,1 << rpx)
(114,rlvlno)
(115,pi)
(116,prcno)
(117,numrlvls)
(118,rlvlnostart)
(119,0)
(120,lyrno)
(121,pi->y)
(122,1 << rpx)
(123,pi)
(124,)
(125,pi)
(126,pi)
(127,++(*prclyrno)
(128,1)
(129,pi->prcno)
(130,)
(131,rlvlno)
(132,pchg)
(133,picomp->numrlvls - rlvlno - 1)
(134,r)
(135,pirlvl)
(136,(trx0 << r)
(137,pi->picomp->hsamp)
(138,pi->xstep)
(139,pi->pirlvl)
(140,pi)
(141,picomp->numrlvls)
(142,trx0)
(143,prchind)
(144,picomp->vsamp * (1 << (pirlvl->prcheightexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(145,picomp->numrlvls)
(146,ystep)
(147,pi->rlvlno < pchg->rlvlnoend)
(148,pi)
(149,pirlvl)
(150,prcwidthexpn)
(151,rlvlno)
(152,pi->pirlvl->prcwidthexpn)
(153,pi)
(154,pi)
(155,pi)
(156,pi->picomp)
(157,pi)
(158,pi)
(159,rlvlno)
(160,)
(161,pchg->rlvlnostart)
(162,!(pi->y % (1 << rpy)
(163,pi->picomp->vsamp << r)
(164,pi->y % (1 << rpy)
(165,pi->pirlvl)
(166,rpy)
(167,trx0 << r)
(168,pirlvl)
(169,JAS_CAST(int, pchg->lyrnoend)
(170,pi->prgvolfirst)
(171,pi->yend)
(172,1)
(173,prcwidthexpn)
(174,x)
(175,pi->x +=\\n\\t\\t\\t  pi->xstep - (pi->x % pi->xstep)
(176,rpy)
(177,pirlvl)
(178,continue;)
(179,pi->y +=\\n\\t\\t  pi->ystep - (pi->y % pi->ystep)
(180,numprcs)
(181,pi)
(182,compno)
(183,pi)
(184,r)
(185,y)
(186,)
(187,pi->pirlvl)
(188,)
(189,pi->ystep - (pi->y % pi->ystep)
(190,pchg)
(191,pi->pirlvl)
(192,pi->rlvlno = pchg->rlvlnostart)
(193,pi)
(194,pi)
(195,prcwidthexpn)
(196,pi)
(197,JAS_MIN(pi->ystep, ystep)
(198,if (pi->rlvlno >= pi->picomp->numrlvls)
(199,++pi->picomp)
(200,ystart)
(201,pi)
(202,prchind)
(203,ystart)
(204,compno)
(205,pi->rlvlno)
(206,pi->pirlvl->prcheightexpn)
(207,pi)
(208,xstep)
(209,rlvlno - 1)
(210,picomp)
(211,pi->pirlvl->prcwidthexpn)
(212,ystep)
(213,try0 << r)
(214,pi)
(215,pi->rlvlno)
(216,xstep)
(217,picomp->vsamp)
(218,&pi->picomp->pirlvls[pi->rlvlno])
(219,pi->compno < JAS_CAST(int, pchg->compnoend)
(220,pi)
(221,prcwidthexpn)
(222,continue;)
(223,picomp->numrlvls)
(224,pi)
(225,rpy)
(226,pi)
(227,pi->x)
(228,0)
(229,pi)
(230,prclyrno)
(231,pi->lyrno = 0)
(232,try0)
(233,pi->y)
(234,pi->picomp->numrlvls)
(235,if (!pi->prgvolfirst)
(236,pi->compno < JAS_CAST(int, pchg->compnoend)
(237,rlvlno)
(238,pi->pirlvl->prclyrnos)
(239,pi->compno)
(240,0)
(241,pi)
(242,pi)
(243,&pi->picomps[pi->compno])
(244,++pi->lyrno)
(245,)
(246,compno)
(247,compno)
(248,pi->numlyrs)
(249,pi->picomp->hsamp << r)
(250,rlvlno)
(251,pi->xstart)
(252,pi->ystart)
(253,ystep)
(254,)
(255,pi)
(256,picomp)
(257,numlyrs)
(258,numrlvls)
(259,pi->prcno < pi->pirlvl->numprcs)
(260,vsamp)
(261,pi)
(262,pi->y)
(263,vsamp)
(264,pi->compno = pchg->compnostart)
(265,x)
(266,pi->x)
(267,xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(268,1 - pi->rlvlno)
(269,pi->picomp->hsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(270,lyrno)
(271,pi)
(272,++rlvlno)
(273,pi->rlvlno)
(274,trx0)
(275,ystep)
(276,JAS_MIN(pi->xstep, xstep)
(277,pi->numcomps)
(278,rlvlno)
(279,pi->x % pi->xstep)
(280,pi->pirlvl->numprcs)
(281,prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(282,if (pi->lyrno >= *prclyrno)
(283,if (pi->pirlvl->numprcs == 0)
(284,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(285,)
(286,register jpc_pi_t *pi)
(287,pirlvl)
(288,JPC_CEILDIV(pi->x, pi->picomp->hsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(289,pi->picomp->numrlvls)
(290,pchg = pi->pchg)
(291,trx0)
(292,compno)
(293,picomp)
(294,r)
(295,pi)
(296,compno)
(297,prcvind * pi->pirlvl->numhprcs + prchind)
(298,rlvlnoend)
(299,hsamp)
(300,++picomp)
(301,picomps)
(302,)
(303,return 0;)
(304,try0)
(305,pi->lyrno)
(306,ystep)
(307,pi->x)
(308,pirlvls)
(309,pi->lyrno)
(310,compno)
(311,pi->compno)
(312,pi)
(313,ystep)
(314,for (pi->lyrno = 0; pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend)
(315,lyrnoend)
(316,pi->x == pi->xstart)
(317,pi->prcno)
(318,prcno)
(319,pi->ystep = 0)
(320,try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r)
(321,pi->picomp = &pi->picomps[pi->compno])
(322,pi)
(323,prclyrno = &pi->pirlvl->prclyrnos[pi->prcno])
(324,picomp)
(325,pi)
(326,pi->pirlvl)
(327,pirlvl)
(328,pi->numcomps)
(329,pi)
(330,trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r)
(331,pi->ystep = (!pi->ystep)
(332,numrlvls)
(333,numcomps)
(334,pirlvl)
(335,xstep)
(336,x)
(337,pi->xstep)
(338,ystep)
(339,pi->pirlvl)
(340,pi->xstep - (pi->x % pi->xstep)
(341,pi)
(342,prcheightexpn)
(343,pi->picomp)
(344,pi)
(345,pi)
(346,pi->picomp)
(347,xstart)
(348,pi)
(349,numrlvls)
(350,xstart)
(351,((pi->x == pi->xstart && ((trx0 << r)
(352,pi->pirlvl)
(353,xstart)
(354,pi->ystep)
(355,pi)
(356,for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=\\n\\t\\t\\t  pi->xstep - (pi->x % pi->xstep)
(357,xstep)
(358,pi->picomp->vsamp)
(359,picomp)
(360,pi->pirlvl)
(361,pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno])
(362,pi)
(363,pi->x)
(364,pirlvl)
(365,++compno)
(366,picomp)
(367,prcvind)
(368,pi)
(369,JPC_FLOORDIVPOW2(try0,\\n\\t\\t\\t\\t\\t\\t  pi->pirlvl->prcheightexpn)
(370,(!pi->ystep)
(371,pi)
(372,pi->compno)
(373,pi->y == pi->ystart && ((try0 << r)
(374,picomp)
(375,rpy)
(376,pi->picomp)
(377,picomp->pirlvls)
(378,pi->pirlvl->prclyrnos[pi->prcno])
(379,picomp)
(380,picomp)
(381,pi)
(382,pi->ystep)
(383,JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r)
(384,picomp)
(385,pi->ystep)
(386,JPC_FLOORDIVPOW2(trx0,\\n\\t\\t\\t\\t\\t\\t  pi->pirlvl->prcwidthexpn)
(387,try0)
(388,prclyrno)
(389,&pi->pirlvl->prclyrnos[pi->prcno])
(390,rpx = r + pi->pirlvl->prcwidthexpn)
(391,r)
(392,y)
(393,pi->lyrno)
(394,rlvlno)
(395,pirlvl)
(396,)
(397,pchg->rlvlnoend)
(398,pi->picomp->vsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(399,pi)
(400,prcvind * pi->pirlvl->numhprcs)
(401,pirlvl->prcwidthexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(402,r = pi->picomp->numrlvls - 1 - pi->rlvlno)
(403,hsamp)
(404,pi->compno <\\n\\t\\t\\t\\t  pi->numcomps)
(405,prcheightexpn)
(406,xstep)
(407,pi)
(408,0)
(409,pi->y)
(410,*prclyrno)
(411,pi->pirlvl->numprcs == 0)
(412,pirlvl)
(413,pi)
(414,!pi->prgvolfirst)
(415,pchg->compnostart)
(416,)
(417,)
(418,pi)
(419,0)
(420,picomp)
(421,pi)
(422,numhprcs)
(423,pi->prcno)
(424,pi)
(425,1)
(426,1)
(427,for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=\\n\\t\\t  pi->ystep - (pi->y % pi->ystep)
(428,pi)
(429,xstep)
(430,yend)
(431,for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\\n\\t\\t  ++compno, ++picomp)
(432,0)
(433,pi->rlvlno)
(434,pchg)
(435,for (pi->compno = pchg->compnostart,\\n\\t\\t\\t\\t  pi->picomp = &pi->picomps[pi->compno];\\n\\t\\t\\t\\t  pi->compno < JAS_CAST(int, pchg->compnoend)
(436,compno)
(437,pirlvl->prcheightexpn)
(438,pi->picomp->pirlvls[pi->rlvlno])
(439,!pi->ystep)
(440,pi)
(441,x)
(442,pi)
(443,pi->rlvlno)
(444,for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\\n\\t\\t\\t  picomp->numrlvls; ++rlvlno, ++pirlvl)
(445,pirlvls)
(446,0)
(447,pi->picomp)
(448,ystart)
(449,rpx)
(450,pi)
(451,pi)
(452,pi)
(453,pi->rlvlno < pchg->rlvlnoend &&\\n\\t  pi->rlvlno < pi->maxrlvls)
(454,pirlvl)
(455,pi->pirlvl->prcheightexpn)
(456,pi->xstart)
(457,pirlvl)
(458,vsamp)
(459,prcno)
(460,lyrno)
(461,pi->pirlvl->prcheightexpn)
(462,pi->prgvolfirst)
(463,1 << (pirlvl->prcheightexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(464,pi->maxrlvls)
(465,)
(466,x)
(467,(pi->y == pi->ystart && ((try0 << r)
(468,++pirlvl)
(469,pi)
(470,1)
(471,)
(472,1 << rpy)
(473,(try0 << r)
(474,pchg)
(475,r + pi->pirlvl->prcwidthexpn)
(476,pi)
(477,prcheightexpn)
(478,(pi->x == pi->xstart && ((trx0 << r)
(479,prclyrnos)
(480,pi->picomp->hsamp)
(481,skip:)
(482,pi->picomps[pi->compno])
(483,pi->picomp)
(484,rpx)
(485,pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend)
(486,pi->prgvolfirst = 0)
(487,pi)
(488,for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&\\n\\t  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno)
(489,pi->xstart)
(490,pi->picomp)
(491,pi->xstep)
(492,picomp->numrlvls - rlvlno - 1)
(493,ystep)
(494,pi->y)
(495,pi->rlvlno >= pi->picomp->numrlvls)
(496,picomp)
(497,ystep)
(498,)
(499,xstep)
(500,pi->picomp)
(501,pi)
(502,pchg->lyrnoend)
(503,compno)
(504,JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r)
(505,pi->xstep)
(506,pi)
(507,rlvlno = 0)
(508,pirlvl)
(509,prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(510,pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind)
(511,hsamp)
(512,lyrno)
(513,pi->xstep = (!pi->xstep)
(514,++pi->rlvlno)
(515,pi)
(516,rlvlno)
(517,pi->compno)
(518,pi->pirlvl)
(519,pi->rlvlno)
(520,r)
(521,1)
(522,goto skip;)
(523,compnoend)
(524,RET)
(525,pi)
(526,rpx)
(527,pchg)
(528,pi)
(529,)
(530,picomp)
(531,rpx)
(532,pi)
(533,rlvlno - 1)
(534,pi->pirlvl->prcwidthexpn)
(535,!pi->xstep)
(536,pi->ystep)
(537,xstep)
(538,(!pi->xstep)
(539,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(540,prcheightexpn)
(541,prchind)
(542,pi->rlvlno < pi->maxrlvls)
(543,1 << (pirlvl->prcwidthexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(544,picomp)
(545,pi->pchg)
(546,pi->x % (1 << rpx)
(547,pi->y % pi->ystep)
(548,1)
(549,prcvind)
(550,pi)
(551,pirlvl->prcheightexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(552,rlvlno)
(553,y)
(554,pi->lyrno)
(555,compno = 0)
(556,1)
(557,try0)
(558,pi->pirlvl)
(559,ystep)
(560,pi->x)
(561,pi->ystart)
(562,pi)
(563,pi->xstep = 0)
(564,rlvlno)
(565,pi)
(566,prclyrno)
(567,rpy = r + pi->pirlvl->prcheightexpn)
(568,)
(569,picomp)
(570,pi->x)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
