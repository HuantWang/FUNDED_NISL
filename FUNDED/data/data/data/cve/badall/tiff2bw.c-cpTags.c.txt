-----label-----
1
-----code-----
static void
cpTags(TIFF* in, TIFF* out)
{
    struct cpTag *p;
    for (p = tags; p < &tags[NTAGS]; p++)
	cpTag(in, out, p->tag, p->count, p->type);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
19,20
19,21
20,21
22,23
22,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
36,37
36,38
37,38
39,40
41,42
42,43
44,45
45,46
45,47
45,48
45,49
45,50
45,51
46,47
48,49
50,51
52,53
52,54
53,54
56,57
56,58
57,58
60,61
60,62
61,62
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,29,31,34,38,40,43,47,49,51,54,55,58,59,62,63
-----computeFrom-----
27,28
27,29
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
static voidcpTags(TIFF* in, TIFF* out){    struct cpTag *p;    for (p = tags; p < &tags[NTAGS]; p++)	cpTag(in, out, p->tag, p->count, p->type);}
static void
cpTags(TIFF* in, TIFF* out)
cpTags
TIFF* in
TIFF
TIFF
* in
*
in
TIFF* out
TIFF
TIFF
* out
*
out
{    struct cpTag *p;    for (p = tags; p < &tags[NTAGS]; p++)	cpTag(in, out, p->tag, p->count, p->type);}
struct cpTag *p;
struct cpTag *p;
struct cpTag
cpTag
*p
*
p
for (p = tags; p < &tags[NTAGS]; p++)	cpTag(in, out, p->tag, p->count, p->type);
p = tags;
p = tags
p
p
tags
tags
p < &tags[NTAGS]
p
p
&tags[NTAGS]
tags[NTAGS]
tags
tags
NTAGS
NTAGS
p++
p
p
cpTag(in, out, p->tag, p->count, p->type);
cpTag(in, out, p->tag, p->count, p->type)
cpTag
cpTag
in
in
out
out
p->tag
p
p
tag
p->count
p
p
count
p->type
p
p
type
-----joern-----
(3,23,0)
(3,19,0)
(4,6,0)
(2,4,0)
(24,11,0)
(2,13,0)
(16,23,0)
(7,11,0)
(17,13,0)
(11,13,0)
(22,17,0)
(15,5,0)
(18,2,0)
(1,8,0)
(14,17,0)
(21,2,0)
(5,13,0)
(4,2,0)
(28,4,0)
(25,4,0)
(4,17,0)
(19,3,0)
(23,13,0)
(0,19,0)
(26,13,0)
(17,4,0)
(11,4,0)
(4,11,0)
(20,19,0)
(12,8,0)
(23,3,0)
(4,10,0)
(27,13,0)
(25,23,1)
(13,26,1)
(3,19,1)
(20,16,1)
(11,13,1)
(2,13,1)
(4,17,1)
(16,5,1)
(14,11,1)
(9,23,1)
(23,3,1)
(11,24,1)
(28,25,1)
(26,27,1)
(23,13,1)
(4,11,1)
(17,22,1)
(17,13,1)
(24,7,1)
(4,2,1)
(19,0,1)
(15,4,1)
(4,6,1)
(4,10,1)
(21,17,1)
(5,13,1)
(18,21,1)
(2,18,1)
(5,15,1)
(7,28,1)
(0,20,1)
(16,13,1)
(22,14,1)
(18,23,2)
(11,13,2)
(5,23,2)
(7,23,2)
(4,10,2)
(25,23,2)
(0,23,2)
(24,23,2)
(21,23,2)
(2,23,2)
(11,23,2)
(3,19,2)
(4,17,2)
(17,13,2)
(4,2,2)
(23,23,2)
(23,13,2)
(3,23,2)
(14,23,2)
(19,23,2)
(17,23,2)
(28,23,2)
(22,23,2)
(5,13,2)
(16,23,2)
(23,3,2)
(20,23,2)
(4,23,2)
(4,11,2)
(2,13,2)
(4,6,2)
(15,23,2)
-----------------------------------
(0,NTAGS)
(1,for (p = tags; p < &tags[NTAGS]; p++)
(2,p->type)
(3,&tags[NTAGS])
(4,cpTag(in, out, p->tag, p->count, p->type)
(5,p++)
(6,TIFF* in)
(7,p)
(8,)
(9,RET)
(10,TIFF* out)
(11,p->tag)
(12,p)
(13,p = tags)
(14,p)
(15,p)
(16,p)
(17,p->count)
(18,type)
(19,tags[NTAGS])
(20,tags)
(21,p)
(22,count)
(23,p < &tags[NTAGS])
(24,tag)
(25,in)
(26,tags)
(27,p)
(28,out)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
