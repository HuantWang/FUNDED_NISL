-----label-----
1
-----code-----
static int
PackBitsDecode(TIFF* tif, uint8* op, tmsize_t occ, uint16 s)
{
	static const char module[] = "PackBitsDecode";
	char *bp;
	tmsize_t cc;
	long n;
	int b;

	(void) s;
	bp = (char*) tif->tif_rawcp;
	cc = tif->tif_rawcc;
	while (cc > 0 && occ > 0) {
		n = (long) *bp++, cc--;
		/*
		 * Watch out for compilers that
		 * don't sign extend chars...
		 */
		if (n >= 128)
			n -= 256;
		if (n < 0) {		/* replicate next byte -n+1 times */
			if (n == -128)	/* nop */
				continue;
			n = -n + 1;
			if( occ < (tmsize_t)n )
			{
				TIFFWarningExt(tif->tif_clientdata, module,
				    "Discarding %lu bytes to avoid buffer overrun",
				    (unsigned long) ((tmsize_t)n - occ));
				n = (long)occ;
			}
			occ -= n;
			b = *bp++, cc--;
			while (n-- > 0)
				*op++ = (uint8) b;
		} else {		/* copy next n+1 bytes literally */
			if (occ < (tmsize_t)(n + 1))
			{
				TIFFWarningExt(tif->tif_clientdata, module,
				    "Discarding %lu bytes to avoid buffer overrun",
				    (unsigned long) ((tmsize_t)n - occ + 1));
				n = (long)occ - 1;
			}
			if (cc < (tmsize_t) (n+1)) 
			{
				TIFFWarningExt(tif->tif_clientdata, module,
					       "Terminating PackBitsDecode due to lack of data.");
				break;
			}
			_TIFFmemcpy(op, bp, ++n);
			op += n; occ -= n;
			bp += n; cc -= n;
		}
	}
	tif->tif_rawcp = (uint8*) bp;
	tif->tif_rawcc = cc;
	if (occ > 0) {
		TIFFErrorExt(tif->tif_clientdata, module,
		    "Not enough data for scanline %lu",
		    (unsigned long) tif->tif_row);
		return (0);
	}
	return (1);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
28,29
29,30
29,31
31,32
31,33
31,34
34,35
36,37
37,38
37,39
39,40
39,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
51,52
53,54
54,55
54,56
56,57
58,59
59,60
59,61
60,61
60,62
63,64
65,66
66,67
66,68
67,68
69,70
69,71
70,71
70,72
72,73
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
86,88
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
96,97
96,98
96,99
97,98
98,99
98,100
99,100
99,101
100,101
102,103
102,104
103,104
103,105
106,107
107,108
108,109
110,111
111,112
113,114
113,115
114,115
114,116
115,116
118,119
119,120
119,121
120,121
123,124
123,125
123,126
124,125
124,126
125,126
128,129
128,130
128,131
128,132
128,133
128,134
129,130
129,131
130,131
130,132
131,132
133,134
136,137
137,138
137,139
138,139
140,141
140,142
141,142
142,143
145,146
145,147
146,147
146,148
147,148
149,150
149,151
150,151
150,152
151,152
154,155
156,157
156,158
157,158
158,159
158,160
158,161
158,162
158,163
159,160
161,162
161,163
162,163
165,166
168,169
168,170
169,170
169,171
172,173
173,174
173,175
174,175
174,176
175,176
175,177
176,177
179,180
181,182
183,184
184,185
184,186
185,186
187,188
187,189
188,189
188,190
191,192
193,194
194,195
194,196
195,196
197,198
199,200
200,201
200,202
201,202
201,203
202,203
204,205
205,206
206,207
208,209
209,210
211,212
211,213
212,213
212,214
213,214
214,215
217,218
218,219
218,220
219,220
220,221
221,222
223,224
223,225
224,225
224,226
225,226
228,229
230,231
230,232
230,233
230,234
230,235
230,236
230,237
231,232
231,233
232,233
232,234
233,234
235,236
235,237
236,237
237,238
239,240
239,241
240,241
243,244
243,245
244,245
245,246
245,247
245,248
245,249
245,250
246,247
248,249
248,250
249,250
252,253
255,256
255,257
256,257
256,258
259,260
260,261
260,262
261,262
261,263
262,263
262,264
263,264
263,265
264,265
267,268
269,270
272,273
273,274
273,275
274,275
276,277
276,278
277,278
277,279
278,279
278,280
281,282
284,285
284,286
285,286
285,287
286,287
288,289
288,290
289,290
290,291
292,293
292,294
293,294
296,297
296,298
297,298
298,299
298,300
298,301
298,302
299,300
301,302
301,303
302,303
305,306
309,310
310,311
310,312
310,313
310,314
311,312
313,314
315,316
317,318
318,319
320,321
321,322
321,323
322,323
324,325
326,327
327,328
327,329
328,329
330,331
332,333
333,334
333,335
334,335
336,337
338,339
339,340
339,341
340,341
342,343
344,345
345,346
345,347
346,347
346,348
347,348
350,351
350,352
351,352
351,353
352,353
354,355
356,357
358,359
359,360
359,361
360,361
360,362
361,362
364,365
366,367
366,368
367,368
367,369
368,369
371,372
371,373
372,373
373,374
373,375
373,376
373,377
373,378
374,375
376,377
376,378
377,378
380,381
383,384
383,385
384,385
384,386
387,388
387,389
388,389
391,392
392,393
394,395
395,396
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,30,32,33,35,38,40,41,45,47,50,52,55,57,61,62,64,68,71,73,76,77,81,84,85,90,91,94,95,101,104,105,109,112,116,117,121,122,126,127,132,134,135,139,143,144,148,152,153,155,160,163,164,166,167,170,171,177,178,180,182,186,189,190,192,196,198,203,207,210,215,216,222,226,227,229,234,238,241,242,247,250,251,253,254,257,258,265,266,268,270,271,275,279,280,282,283,287,291,294,295,300,303,304,306,307,308,312,314,316,319,323,325,329,331,335,337,341,343,348,349,353,355,357,362,363,365,369,370,375,378,379,381,382,385,386,389,390,393,396
-----computeFrom-----
66,67
66,68
79,80
79,81
87,88
87,89
88,89
88,90
92,93
92,94
99,100
99,101
114,115
114,116
119,120
119,121
124,125
124,126
130,131
130,132
137,138
137,139
140,141
140,142
146,147
146,148
173,174
173,175
184,185
184,186
194,195
194,196
201,202
201,203
212,213
212,214
218,219
218,220
232,233
232,234
239,240
239,241
260,261
260,262
261,262
261,263
273,274
273,275
276,277
276,278
285,286
285,287
292,293
292,294
321,322
321,323
327,328
327,329
333,334
333,335
339,340
339,341
345,346
345,347
359,360
359,361
367,368
367,369
-----guardedBy-----
116,121
126,215
152,177
148,192
155,186
238,265
234,282
241,275
-----guardedByNegation-----
126,343
-----lastLexicalUse-----
126,343
-----jump-----
126,343
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static intPackBitsDecode(TIFF* tif, uint8* op, tmsize_t occ, uint16 s){	static const char module[] = "PackBitsDecode";	char *bp;	tmsize_t cc;	long n;	int b;	(void) s;	bp = (char*) tif->tif_rawcp;	cc = tif->tif_rawcc;	while (cc > 0 && occ > 0) {		n = (long) *bp++, cc--;		/*		 * Watch out for compilers that		 * don't sign extend chars...		 */		if (n >= 128)			n -= 256;		if (n < 0) {		/* replicate next byte -n+1 times */			if (n == -128)	/* nop */				continue;			n = -n + 1;			if( occ < (tmsize_t)n )			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ));				n = (long)occ;			}			occ -= n;			b = *bp++, cc--;			while (n-- > 0)				*op++ = (uint8) b;		} else {		/* copy next n+1 bytes literally */			if (occ < (tmsize_t)(n + 1))			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ + 1));				n = (long)occ - 1;			}			if (cc < (tmsize_t) (n+1)) 			{				TIFFWarningExt(tif->tif_clientdata, module,					       "Terminating PackBitsDecode due to lack of data.");				break;			}			_TIFFmemcpy(op, bp, ++n);			op += n; occ -= n;			bp += n; cc -= n;		}	}	tif->tif_rawcp = (uint8*) bp;	tif->tif_rawcc = cc;	if (occ > 0) {		TIFFErrorExt(tif->tif_clientdata, module,		    "Not enough data for scanline %lu",		    (unsigned long) tif->tif_row);		return (0);	}	return (1);}
static int
PackBitsDecode(TIFF* tif, uint8* op, tmsize_t occ, uint16 s)
PackBitsDecode
TIFF* tif
TIFF
TIFF
* tif
*
tif
uint8* op
uint8
uint8
* op
*
op
tmsize_t occ
tmsize_t
tmsize_t
occ
occ
uint16 s
uint16
uint16
s
s
{	static const char module[] = "PackBitsDecode";	char *bp;	tmsize_t cc;	long n;	int b;	(void) s;	bp = (char*) tif->tif_rawcp;	cc = tif->tif_rawcc;	while (cc > 0 && occ > 0) {		n = (long) *bp++, cc--;		/*		 * Watch out for compilers that		 * don't sign extend chars...		 */		if (n >= 128)			n -= 256;		if (n < 0) {		/* replicate next byte -n+1 times */			if (n == -128)	/* nop */				continue;			n = -n + 1;			if( occ < (tmsize_t)n )			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ));				n = (long)occ;			}			occ -= n;			b = *bp++, cc--;			while (n-- > 0)				*op++ = (uint8) b;		} else {		/* copy next n+1 bytes literally */			if (occ < (tmsize_t)(n + 1))			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ + 1));				n = (long)occ - 1;			}			if (cc < (tmsize_t) (n+1)) 			{				TIFFWarningExt(tif->tif_clientdata, module,					       "Terminating PackBitsDecode due to lack of data.");				break;			}			_TIFFmemcpy(op, bp, ++n);			op += n; occ -= n;			bp += n; cc -= n;		}	}	tif->tif_rawcp = (uint8*) bp;	tif->tif_rawcc = cc;	if (occ > 0) {		TIFFErrorExt(tif->tif_clientdata, module,		    "Not enough data for scanline %lu",		    (unsigned long) tif->tif_row);		return (0);	}	return (1);}
static const char module[] = "PackBitsDecode";
static const char module[] = "PackBitsDecode";
static const char
module[] = "PackBitsDecode"
module
[]
= "PackBitsDecode"
"PackBitsDecode"
char *bp;
char *bp;
char
*bp
*
bp
tmsize_t cc;
tmsize_t cc;
tmsize_t
tmsize_t
cc
cc
long n;
long n;
long
n
n
int b;
int b;
int
b
b
(void) s;
(void) s
void
void

s
s
bp = (char*) tif->tif_rawcp;
bp = (char*) tif->tif_rawcp
bp
bp
(char*) tif->tif_rawcp
char*
char
*
*
tif->tif_rawcp
tif
tif
tif_rawcp
cc = tif->tif_rawcc;
cc = tif->tif_rawcc
cc
cc
tif->tif_rawcc
tif
tif
tif_rawcc
while (cc > 0 && occ > 0) {		n = (long) *bp++, cc--;		/*		 * Watch out for compilers that		 * don't sign extend chars...		 */		if (n >= 128)			n -= 256;		if (n < 0) {		/* replicate next byte -n+1 times */			if (n == -128)	/* nop */				continue;			n = -n + 1;			if( occ < (tmsize_t)n )			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ));				n = (long)occ;			}			occ -= n;			b = *bp++, cc--;			while (n-- > 0)				*op++ = (uint8) b;		} else {		/* copy next n+1 bytes literally */			if (occ < (tmsize_t)(n + 1))			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ + 1));				n = (long)occ - 1;			}			if (cc < (tmsize_t) (n+1)) 			{				TIFFWarningExt(tif->tif_clientdata, module,					       "Terminating PackBitsDecode due to lack of data.");				break;			}			_TIFFmemcpy(op, bp, ++n);			op += n; occ -= n;			bp += n; cc -= n;		}	}
cc > 0 && occ > 0
cc > 0
cc
cc
0
occ > 0
occ
occ
0
{		n = (long) *bp++, cc--;		/*		 * Watch out for compilers that		 * don't sign extend chars...		 */		if (n >= 128)			n -= 256;		if (n < 0) {		/* replicate next byte -n+1 times */			if (n == -128)	/* nop */				continue;			n = -n + 1;			if( occ < (tmsize_t)n )			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ));				n = (long)occ;			}			occ -= n;			b = *bp++, cc--;			while (n-- > 0)				*op++ = (uint8) b;		} else {		/* copy next n+1 bytes literally */			if (occ < (tmsize_t)(n + 1))			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ + 1));				n = (long)occ - 1;			}			if (cc < (tmsize_t) (n+1)) 			{				TIFFWarningExt(tif->tif_clientdata, module,					       "Terminating PackBitsDecode due to lack of data.");				break;			}			_TIFFmemcpy(op, bp, ++n);			op += n; occ -= n;			bp += n; cc -= n;		}	}
n = (long) *bp++, cc--;
n = (long) *bp++, cc--
n = (long) *bp++
n
n
(long) *bp++
long
long

*bp++
bp++
bp
bp
cc--
cc
cc
if (n >= 128)			n -= 256;
n >= 128
n
n
128
n -= 256;
n -= 256
n
n
256
if (n < 0) {		/* replicate next byte -n+1 times */			if (n == -128)	/* nop */				continue;			n = -n + 1;			if( occ < (tmsize_t)n )			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ));				n = (long)occ;			}			occ -= n;			b = *bp++, cc--;			while (n-- > 0)				*op++ = (uint8) b;		} else {		/* copy next n+1 bytes literally */			if (occ < (tmsize_t)(n + 1))			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ + 1));				n = (long)occ - 1;			}			if (cc < (tmsize_t) (n+1)) 			{				TIFFWarningExt(tif->tif_clientdata, module,					       "Terminating PackBitsDecode due to lack of data.");				break;			}			_TIFFmemcpy(op, bp, ++n);			op += n; occ -= n;			bp += n; cc -= n;		}
n < 0
n
n
0
{		/* replicate next byte -n+1 times */			if (n == -128)	/* nop */				continue;			n = -n + 1;			if( occ < (tmsize_t)n )			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ));				n = (long)occ;			}			occ -= n;			b = *bp++, cc--;			while (n-- > 0)				*op++ = (uint8) b;		}
if (n == -128)	/* nop */				continue;
n == -128
n
n
-128
128
continue;
n = -n + 1;
n = -n + 1
n
n
-n + 1
-n
n
n
1
if( occ < (tmsize_t)n )			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ));				n = (long)occ;			}
occ < (tmsize_t)n
occ
occ
(tmsize_t)n
tmsize_t
tmsize_t
tmsize_t

n
n
{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ));				n = (long)occ;			}
TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ));
TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ))
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Discarding %lu bytes to avoid buffer overrun"
(unsigned long) ((tmsize_t)n - occ)
unsigned long
unsigned long

((tmsize_t)n - occ)
(tmsize_t)n - occ
(tmsize_t)n
tmsize_t
tmsize_t
tmsize_t

n
n
occ
occ
n = (long)occ;
n = (long)occ
n
n
(long)occ
long
long

occ
occ
occ -= n;
occ -= n
occ
occ
n
n
b = *bp++, cc--;
b = *bp++, cc--
b = *bp++
b
b
*bp++
bp++
bp
bp
cc--
cc
cc
while (n-- > 0)				*op++ = (uint8) b;
n-- > 0
n--
n
n
0
*op++ = (uint8) b;
*op++ = (uint8) b
*op++
op++
op
op
(uint8) b
uint8
uint8
uint8

b
b
{		/* copy next n+1 bytes literally */			if (occ < (tmsize_t)(n + 1))			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ + 1));				n = (long)occ - 1;			}			if (cc < (tmsize_t) (n+1)) 			{				TIFFWarningExt(tif->tif_clientdata, module,					       "Terminating PackBitsDecode due to lack of data.");				break;			}			_TIFFmemcpy(op, bp, ++n);			op += n; occ -= n;			bp += n; cc -= n;		}
if (occ < (tmsize_t)(n + 1))			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ + 1));				n = (long)occ - 1;			}
occ < (tmsize_t)(n + 1)
occ
occ
(tmsize_t)(n + 1)
(tmsize_t)
tmsize_t
tmsize_t
n + 1
n
n
1
{				TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ + 1));				n = (long)occ - 1;			}
TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ + 1));
TIFFWarningExt(tif->tif_clientdata, module,				    "Discarding %lu bytes to avoid buffer overrun",				    (unsigned long) ((tmsize_t)n - occ + 1))
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Discarding %lu bytes to avoid buffer overrun"
(unsigned long) ((tmsize_t)n - occ + 1)
unsigned long
unsigned long

((tmsize_t)n - occ + 1)
(tmsize_t)n - occ + 1
(tmsize_t)n - occ
(tmsize_t)n
tmsize_t
tmsize_t
tmsize_t

n
n
occ
occ
1
n = (long)occ - 1;
n = (long)occ - 1
n
n
(long)occ - 1
(long)occ
long
long

occ
occ
1
if (cc < (tmsize_t) (n+1)) 			{				TIFFWarningExt(tif->tif_clientdata, module,					       "Terminating PackBitsDecode due to lack of data.");				break;			}
cc < (tmsize_t) (n+1)
cc
cc
(tmsize_t) (n+1)
(tmsize_t)
tmsize_t
tmsize_t
n+1
n
n
1
{				TIFFWarningExt(tif->tif_clientdata, module,					       "Terminating PackBitsDecode due to lack of data.");				break;			}
TIFFWarningExt(tif->tif_clientdata, module,					       "Terminating PackBitsDecode due to lack of data.");
TIFFWarningExt(tif->tif_clientdata, module,					       "Terminating PackBitsDecode due to lack of data.")
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Terminating PackBitsDecode due to lack of data."
break;
_TIFFmemcpy(op, bp, ++n);
_TIFFmemcpy(op, bp, ++n)
_TIFFmemcpy
_TIFFmemcpy
op
op
bp
bp
++n
n
n
op += n;
op += n
op
op
n
n
occ -= n;
occ -= n
occ
occ
n
n
bp += n;
bp += n
bp
bp
n
n
cc -= n;
cc -= n
cc
cc
n
n
tif->tif_rawcp = (uint8*) bp;
tif->tif_rawcp = (uint8*) bp
tif->tif_rawcp
tif
tif
tif_rawcp
(uint8*) bp
uint8*
uint8
uint8
*
*
bp
bp
tif->tif_rawcc = cc;
tif->tif_rawcc = cc
tif->tif_rawcc
tif
tif
tif_rawcc
cc
cc
if (occ > 0) {		TIFFErrorExt(tif->tif_clientdata, module,		    "Not enough data for scanline %lu",		    (unsigned long) tif->tif_row);		return (0);	}
occ > 0
occ
occ
0
{		TIFFErrorExt(tif->tif_clientdata, module,		    "Not enough data for scanline %lu",		    (unsigned long) tif->tif_row);		return (0);	}
TIFFErrorExt(tif->tif_clientdata, module,		    "Not enough data for scanline %lu",		    (unsigned long) tif->tif_row);
TIFFErrorExt(tif->tif_clientdata, module,		    "Not enough data for scanline %lu",		    (unsigned long) tif->tif_row)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Not enough data for scanline %lu"
(unsigned long) tif->tif_row
unsigned long
unsigned long

tif->tif_row
tif
tif
tif_row
return (0);
(0)
0
return (1);
(1)
1
-----joern-----
(125,75,0)
(8,147,0)
(113,46,0)
(26,4,0)
(176,181,0)
(154,21,0)
(14,167,0)
(41,109,0)
(49,208,0)
(166,108,0)
(156,106,0)
(71,126,0)
(175,213,0)
(3,182,0)
(50,195,0)
(171,108,0)
(142,59,0)
(212,174,0)
(189,169,0)
(140,14,0)
(11,125,0)
(197,106,0)
(31,53,0)
(121,200,0)
(88,33,0)
(14,120,0)
(169,75,0)
(209,180,0)
(55,204,0)
(118,184,0)
(70,110,0)
(4,196,0)
(0,18,0)
(133,201,0)
(157,27,0)
(61,49,0)
(191,125,0)
(129,150,0)
(196,75,0)
(6,101,0)
(179,110,0)
(4,133,0)
(74,14,0)
(71,120,0)
(215,188,0)
(170,207,0)
(31,54,0)
(137,127,0)
(58,31,0)
(161,46,0)
(55,159,0)
(130,105,0)
(2,101,0)
(122,77,0)
(56,46,0)
(49,61,0)
(75,8,0)
(9,119,0)
(196,101,0)
(27,72,0)
(96,188,0)
(184,186,0)
(14,74,0)
(53,115,0)
(116,176,0)
(133,4,0)
(68,188,0)
(202,72,0)
(30,167,0)
(120,167,0)
(105,86,0)
(213,75,0)
(182,188,0)
(115,141,0)
(21,195,0)
(45,189,0)
(50,144,0)
(120,120,0)
(5,102,0)
(165,185,0)
(162,131,0)
(194,196,0)
(149,112,0)
(103,72,0)
(67,75,0)
(75,156,0)
(109,41,0)
(1,23,0)
(102,150,0)
(173,14,0)
(112,213,0)
(170,46,0)
(169,189,0)
(190,179,0)
(44,21,0)
(196,108,0)
(50,101,0)
(12,46,0)
(30,120,0)
(194,167,0)
(87,165,0)
(180,167,0)
(136,119,0)
(61,72,0)
(170,193,0)
(95,71,0)
(204,55,0)
(192,106,0)
(141,115,0)
(179,56,0)
(83,33,0)
(63,131,0)
(35,10,0)
(60,110,0)
(178,6,0)
(112,115,0)
(120,188,0)
(91,181,0)
(19,77,0)
(16,46,0)
(18,72,0)
(59,101,0)
(114,120,0)
(82,202,0)
(4,184,0)
(101,75,0)
(195,90,0)
(34,129,0)
(71,167,0)
(180,120,0)
(186,184,0)
(31,58,0)
(42,56,0)
(214,158,0)
(174,89,0)
(196,196,0)
(124,180,0)
(129,129,0)
(13,144,0)
(128,58,0)
(41,120,0)
(89,72,0)
(194,120,0)
(180,196,0)
(134,87,0)
(117,89,0)
(205,178,0)
(23,200,0)
(58,195,0)
(199,87,0)
(33,213,0)
(203,210,0)
(206,195,0)
(165,215,0)
(21,21,0)
(148,141,0)
(104,27,0)
(58,75,0)
(103,55,0)
(201,56,0)
(62,170,0)
(129,101,0)
(40,77,0)
(145,56,0)
(193,170,0)
(76,21,0)
(30,196,0)
(4,120,0)
(8,75,0)
(120,105,0)
(71,196,0)
(71,90,0)
(92,167,0)
(25,46,0)
(154,159,0)
(74,158,0)
(154,160,0)
(157,91,0)
(105,30,0)
(144,150,0)
(201,202,0)
(92,120,0)
(73,18,0)
(48,91,0)
(77,159,0)
(66,115,0)
(111,213,0)
(76,185,0)
(143,144,0)
(131,72,0)
(158,75,0)
(39,59,0)
(10,127,0)
(14,196,0)
(111,215,0)
(183,169,0)
(216,133,0)
(97,159,0)
(57,120,0)
(27,157,0)
(129,108,0)
(129,75,0)
(198,49,0)
(158,74,0)
(21,108,0)
(66,213,0)
(200,23,0)
(23,75,0)
(155,41,0)
(131,122,0)
(196,120,0)
(213,195,0)
(49,29,0)
(182,178,0)
(7,165,0)
(77,21,0)
(8,160,0)
(10,182,0)
(119,194,0)
(153,50,0)
(87,134,0)
(138,169,0)
(144,108,0)
(172,89,0)
(196,167,0)
(133,216,0)
(168,179,0)
(102,52,0)
(89,112,0)
(208,49,0)
(65,141,0)
(184,182,0)
(87,199,0)
(159,46,0)
(110,72,0)
(92,196,0)
(144,50,0)
(23,101,0)
(211,158,0)
(41,196,0)
(33,115,0)
(107,61,0)
(78,27,0)
(146,208,0)
(79,49,0)
(24,115,0)
(64,157,0)
(90,71,0)
(38,76,0)
(66,156,0)
(4,167,0)
(28,194,0)
(81,129,0)
(15,174,0)
(176,131,0)
(139,21,0)
(184,4,0)
(93,188,0)
(201,86,0)
(55,103,0)
(47,196,0)
(178,182,0)
(208,74,0)
(126,71,0)
(119,136,0)
(59,75,0)
(53,213,0)
(213,108,0)
(120,182,0)
(129,195,0)
(20,213,0)
(174,52,0)
(37,6,0)
(123,90,0)
(98,103,0)
(74,208,0)
(51,30,0)
(144,129,0)
(17,41,0)
(158,211,0)
(119,182,0)
(21,75,0)
(160,8,0)
(141,72,0)
(202,201,0)
(147,8,0)
(112,46,0)
(90,195,0)
(100,87,0)
(21,101,0)
(58,101,0)
(132,103,0)
(110,179,0)
(174,46,0)
(196,195,0)
(135,201,0)
(6,75,0)
(76,159,0)
(21,159,0)
(179,210,0)
(194,119,0)
(10,105,0)
(120,196,0)
(159,55,0)
(122,46,0)
(94,91,0)
(77,19,0)
(22,46,0)
(144,159,0)
(187,66,0)
(54,31,0)
(30,51,0)
(6,178,0)
(151,46,0)
(50,75,0)
(85,92,0)
(189,92,0)
(158,101,0)
(189,45,0)
(53,31,0)
(127,10,0)
(213,115,0)
(41,167,0)
(213,213,0)
(102,129,0)
(92,189,0)
(185,165,0)
(174,131,0)
(152,101,0)
(30,105,0)
(36,61,0)
(109,33,0)
(52,102,0)
(77,122,0)
(84,154,0)
(201,133,0)
(111,115,0)
(91,18,0)
(80,58,0)
(213,101,0)
(115,46,0)
(176,52,0)
(185,76,0)
(43,202,0)
(208,146,0)
(195,29,0)
(169,101,0)
(18,91,0)
(52,134,0)
(177,201,0)
(160,154,0)
(163,30,0)
(144,21,0)
(164,111,0)
(212,176,0)
(33,109,0)
(49,56,0)
(91,56,0)
(99,196,0)
(32,53,0)
(91,157,0)
(176,89,0)
(157,64,0)
(138,85,1)
(183,138,1)
(191,11,1)
(41,167,1)
(55,204,1)
(77,19,1)
(91,18,1)
(61,72,1)
(208,146,1)
(155,33,1)
(175,21,1)
(158,101,1)
(23,75,1)
(120,196,1)
(33,88,1)
(184,182,1)
(37,3,1)
(120,105,1)
(50,153,1)
(121,1,1)
(18,73,1)
(14,120,1)
(27,78,1)
(208,74,1)
(180,120,1)
(174,89,1)
(33,115,1)
(49,61,1)
(10,35,1)
(105,30,1)
(195,90,1)
(41,17,1)
(59,101,1)
(75,8,1)
(129,101,1)
(39,125,1)
(58,101,1)
(104,48,1)
(30,51,1)
(190,168,1)
(15,180,1)
(9,28,1)
(84,67,1)
(36,107,1)
(125,191,1)
(4,167,1)
(69,23,1)
(196,195,1)
(21,195,1)
(143,53,1)
(127,137,1)
(118,135,1)
(174,15,1)
(180,196,1)
(182,178,1)
(189,169,1)
(132,97,1)
(71,196,1)
(109,33,1)
(160,154,1)
(34,81,1)
(169,75,1)
(77,40,1)
(158,214,1)
(30,120,1)
(6,37,1)
(201,56,1)
(58,80,1)
(81,144,1)
(177,202,1)
(4,184,1)
(144,150,1)
(115,141,1)
(110,60,1)
(13,143,1)
(170,193,1)
(4,196,1)
(10,182,1)
(185,76,1)
(164,165,1)
(158,211,1)
(129,129,1)
(92,120,1)
(73,0,1)
(11,66,1)
(133,216,1)
(6,101,1)
(194,167,1)
(154,21,1)
(174,52,1)
(102,129,1)
(71,167,1)
(174,131,1)
(71,95,1)
(129,75,1)
(57,114,1)
(58,75,1)
(116,91,1)
(103,72,1)
(35,134,1)
(178,6,1)
(76,21,1)
(213,195,1)
(53,31,1)
(141,72,1)
(196,167,1)
(94,18,1)
(87,100,1)
(180,209,1)
(144,21,1)
(91,157,1)
(111,164,1)
(79,198,1)
(66,213,1)
(43,82,1)
(49,208,1)
(206,49,1)
(112,149,1)
(120,120,1)
(88,83,1)
(133,4,1)
(120,167,1)
(8,147,1)
(196,120,1)
(85,59,1)
(129,195,1)
(4,120,1)
(196,75,1)
(213,75,1)
(152,125,1)
(122,77,1)
(112,115,1)
(23,200,1)
(179,56,1)
(49,56,1)
(162,63,1)
(21,159,1)
(201,202,1)
(120,57,1)
(131,162,1)
(142,39,1)
(176,52,1)
(137,10,1)
(110,72,1)
(28,182,1)
(131,72,1)
(14,167,1)
(180,167,1)
(24,159,1)
(66,115,1)
(212,176,1)
(74,14,1)
(114,105,1)
(41,120,1)
(202,72,1)
(99,129,1)
(124,112,1)
(148,24,1)
(47,99,1)
(163,130,1)
(176,116,1)
(4,26,1)
(27,72,1)
(179,110,1)
(91,56,1)
(196,47,1)
(178,205,1)
(134,87,1)
(97,170,1)
(127,10,1)
(112,213,1)
(213,115,1)
(187,75,1)
(40,131,1)
(76,159,1)
(111,213,1)
(157,27,1)
(71,126,1)
(50,75,1)
(87,199,1)
(154,84,1)
(140,158,1)
(63,203,1)
(98,132,1)
(58,195,1)
(30,196,1)
(159,55,1)
(60,70,1)
(32,92,1)
(55,103,1)
(200,121,1)
(7,120,1)
(205,6,1)
(144,159,1)
(23,101,1)
(128,32,1)
(194,196,1)
(157,64,1)
(53,213,1)
(170,62,1)
(101,75,1)
(101,2,1)
(165,185,1)
(77,159,1)
(139,196,1)
(53,115,1)
(82,194,1)
(189,45,1)
(89,72,1)
(198,61,1)
(168,110,1)
(21,75,1)
(21,101,1)
(59,75,1)
(184,186,1)
(56,42,1)
(212,174,1)
(61,36,1)
(83,127,1)
(92,189,1)
(103,98,1)
(201,133,1)
(119,9,1)
(21,44,1)
(119,182,1)
(2,152,1)
(158,75,1)
(6,75,1)
(30,167,1)
(176,131,1)
(172,117,1)
(170,207,1)
(173,140,1)
(90,71,1)
(144,129,1)
(33,213,1)
(179,190,1)
(214,79,1)
(109,41,1)
(87,165,1)
(95,206,1)
(92,196,1)
(41,196,1)
(149,89,1)
(0,180,1)
(50,101,1)
(21,21,1)
(90,123,1)
(130,201,1)
(135,177,1)
(14,196,1)
(83,69,1)
(63,109,1)
(74,158,1)
(17,155,1)
(102,150,1)
(154,159,1)
(44,139,1)
(42,145,1)
(18,72,1)
(1,59,1)
(111,115,1)
(71,120,1)
(83,115,1)
(92,167,1)
(14,173,1)
(153,13,1)
(30,163,1)
(176,89,1)
(38,7,1)
(125,75,1)
(77,21,1)
(141,65,1)
(50,195,1)
(203,179,1)
(114,194,1)
(32,195,1)
(123,71,1)
(20,175,1)
(194,119,1)
(213,101,1)
(209,124,1)
(31,58,1)
(78,104,1)
(65,148,1)
(3,23,1)
(107,92,1)
(67,109,1)
(66,187,1)
(31,54,1)
(213,20,1)
(196,101,1)
(100,52,1)
(194,120,1)
(35,111,1)
(129,150,1)
(89,172,1)
(184,118,1)
(169,101,1)
(196,196,1)
(102,5,1)
(59,142,1)
(83,213,1)
(26,184,1)
(144,50,1)
(169,183,1)
(202,43,1)
(10,105,1)
(129,34,1)
(117,122,1)
(62,56,1)
(80,128,1)
(48,94,1)
(8,160,1)
(120,182,1)
(70,53,1)
(5,127,1)
(119,136,1)
(76,38,1)
(39,101,1)
(213,213,1)
(52,102,1)
(75,109,2)
(170,207,2)
(158,211,2)
(8,160,2)
(196,101,2)
(174,131,2)
(138,59,2)
(70,53,2)
(116,180,2)
(92,167,2)
(127,127,2)
(178,23,2)
(120,167,2)
(49,56,2)
(44,53,2)
(81,53,2)
(85,59,2)
(21,195,2)
(169,101,2)
(4,120,2)
(59,109,2)
(58,195,2)
(73,180,2)
(198,92,2)
(110,53,2)
(180,120,2)
(30,51,2)
(183,59,2)
(127,10,2)
(103,72,2)
(50,53,2)
(18,180,2)
(21,21,2)
(169,59,2)
(30,120,2)
(123,92,2)
(77,159,2)
(91,157,2)
(120,105,2)
(168,53,2)
(179,53,2)
(177,194,2)
(120,196,2)
(53,213,2)
(107,92,2)
(75,8,2)
(152,125,2)
(158,75,2)
(155,33,2)
(59,75,2)
(213,75,2)
(208,92,2)
(105,194,2)
(14,92,2)
(129,75,2)
(71,120,2)
(83,53,2)
(185,76,2)
(120,120,2)
(163,194,2)
(114,23,2)
(157,64,2)
(137,23,2)
(189,45,2)
(194,167,2)
(2,125,2)
(208,74,2)
(195,90,2)
(30,167,2)
(74,14,2)
(202,194,2)
(154,21,2)
(60,53,2)
(112,213,2)
(23,101,2)
(76,23,2)
(120,182,2)
(37,23,2)
(174,180,2)
(129,129,2)
(26,194,2)
(76,159,2)
(99,53,2)
(4,196,2)
(176,180,2)
(84,109,2)
(33,59,2)
(176,131,2)
(196,195,2)
(102,127,2)
(4,167,2)
(67,109,2)
(160,109,2)
(61,72,2)
(66,115,2)
(122,77,2)
(92,120,2)
(144,150,2)
(179,110,2)
(165,185,2)
(50,101,2)
(182,23,2)
(90,92,2)
(111,115,2)
(190,53,2)
(30,196,2)
(212,174,2)
(101,125,2)
(194,120,2)
(32,59,2)
(74,158,2)
(30,194,2)
(213,53,2)
(71,167,2)
(104,180,2)
(52,102,2)
(87,165,2)
(144,129,2)
(18,72,2)
(137,127,2)
(206,92,2)
(50,75,2)
(201,133,2)
(187,109,2)
(141,72,2)
(38,23,2)
(201,202,2)
(134,127,2)
(129,150,2)
(140,92,2)
(41,196,2)
(71,92,2)
(58,59,2)
(92,196,2)
(143,53,2)
(76,21,2)
(184,194,2)
(87,127,2)
(90,71,2)
(195,92,2)
(121,59,2)
(23,200,2)
(119,182,2)
(23,75,2)
(48,180,2)
(14,120,2)
(158,101,2)
(21,101,2)
(35,23,2)
(208,146,2)
(80,59,2)
(10,127,2)
(1,59,2)
(125,109,2)
(11,109,2)
(0,180,2)
(110,72,2)
(157,180,2)
(78,180,2)
(3,23,2)
(33,213,2)
(100,127,2)
(55,103,2)
(214,92,2)
(196,120,2)
(144,53,2)
(189,169,2)
(158,92,2)
(88,59,2)
(133,194,2)
(144,21,2)
(174,52,2)
(15,180,2)
(182,178,2)
(10,23,2)
(194,196,2)
(189,59,2)
(69,23,2)
(200,59,2)
(91,180,2)
(89,72,2)
(135,194,2)
(202,72,2)
(153,53,2)
(58,75,2)
(191,109,2)
(74,92,2)
(184,182,2)
(194,23,2)
(129,195,2)
(95,92,2)
(20,53,2)
(49,61,2)
(55,204,2)
(14,196,2)
(53,59,2)
(47,53,2)
(185,23,2)
(27,72,2)
(196,167,2)
(21,75,2)
(87,199,2)
(92,189,2)
(213,213,2)
(77,21,2)
(174,89,2)
(31,54,2)
(133,4,2)
(17,33,2)
(109,53,2)
(82,194,2)
(39,109,2)
(31,58,2)
(8,147,2)
(178,6,2)
(160,154,2)
(41,167,2)
(109,59,2)
(165,23,2)
(164,23,2)
(159,55,2)
(144,159,2)
(119,136,2)
(142,109,2)
(88,53,2)
(173,92,2)
(59,101,2)
(134,87,2)
(180,167,2)
(77,19,2)
(203,53,2)
(23,59,2)
(118,194,2)
(102,129,2)
(115,141,2)
(144,50,2)
(175,53,2)
(196,53,2)
(83,59,2)
(101,75,2)
(194,119,2)
(61,92,2)
(213,115,2)
(139,53,2)
(66,109,2)
(13,53,2)
(27,180,2)
(10,182,2)
(21,159,2)
(33,53,2)
(109,41,2)
(154,109,2)
(129,53,2)
(49,92,2)
(212,176,2)
(201,56,2)
(35,127,2)
(79,92,2)
(6,101,2)
(49,208,2)
(58,101,2)
(36,92,2)
(128,59,2)
(205,23,2)
(43,194,2)
(133,216,2)
(129,101,2)
(170,193,2)
(41,33,2)
(119,23,2)
(111,23,2)
(213,195,2)
(102,150,2)
(71,126,2)
(4,184,2)
(92,59,2)
(53,115,2)
(125,75,2)
(131,72,2)
(184,186,2)
(66,213,2)
(14,167,2)
(7,23,2)
(180,196,2)
(176,52,2)
(112,115,2)
(109,33,2)
(8,109,2)
(111,213,2)
(154,159,2)
(50,195,2)
(71,196,2)
(130,194,2)
(120,23,2)
(31,59,2)
(21,53,2)
(41,120,2)
(169,75,2)
(57,23,2)
(201,194,2)
(157,27,2)
(176,89,2)
(34,53,2)
(94,180,2)
(6,23,2)
(196,196,2)
(33,115,2)
(6,75,2)
(179,56,2)
(53,31,2)
(5,127,2)
(9,23,2)
(10,105,2)
(4,194,2)
(91,18,2)
(28,23,2)
(105,30,2)
(91,56,2)
(52,127,2)
(196,75,2)
(127,23,2)
(213,101,2)
-----------------------------------
(0,tif)
(1,n)
(2,256)
(3,n)
(4,(tmsize_t)
(5,op)
(6,-n)
(7,b)
(8,(long)
(9,n)
(10,n--)
(11,n)
(12,b)
(13,bp)
(14,occ + 1)
(15,1)
(16,if (occ > 0)
(17,0)
(18,tif->tif_clientdata)
(19,uint8*)
(20,n)
(21,bp += n)
(22,n)
(23,n == -128)
(24,cc)
(25,bp)
(26,occ)
(27,tif->tif_row)
(28,occ)
(29,)
(30,(long)
(31,(tmsize_t)
(32,cc)
(33,cc > 0)
(34,n)
(35,n)
(36,tif_clientdata)
(37,n)
(38,bp)
(39,n)
(40,bp)
(41,occ > 0)
(42,"PackBitsDecode")
(43,tif_clientdata)
(44,n)
(45,tmsize_t)
(46,)
(47,n)
(48,"Not enough data for scanline %lu")
(49,TIFFWarningExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t\\t    "Discarding %lu bytes to avoid buffer overrun",\n\\n\\t\\t\\t\\t    (unsigned long)
(50,++n)
(51,long)
(52,*op++)
(53,cc < (tmsize_t)
(54,tmsize_t)
(55,(char*)
(56,module[] = "PackBitsDecode")
(57,n)
(58,n+1)
(59,n < 0)
(60,tif_clientdata)
(61,tif->tif_clientdata)
(62,s)
(63,tif)
(64,unsigned long)
(65,tif_rawcc)
(66,cc--)
(67,n)
(68,if( occ < (tmsize_t)
(69,continue;)
(70,tif)
(71,(long)
(72,TIFF* tif)
(73,tif_clientdata)
(74,(tmsize_t)
(75,n = (long)
(76,bp++)
(77,(uint8*)
(78,tif_row)
(79,"Discarding %lu bytes to avoid buffer overrun")
(80,1)
(81,op)
(82,tif)
(83,cc)
(84,bp)
(85,occ)
(86,)
(87,(uint8)
(88,0)
(89,tif->tif_rawcc)
(90,(long)
(91,TIFFErrorExt(tif->tif_clientdata, module,\n\\n\\t\\t    "Not enough data for scanline %lu",\n\\n\\t\\t    (unsigned long)
(92,occ < (tmsize_t)
(93,if (n == -128)
(94,module)
(95,occ)
(96,while (n-- > 0)
(97,bp)
(98,tif_rawcp)
(99,occ)
(100,b)
(101,n -= 256)
(102,op++)
(103,tif->tif_rawcp)
(104,tif)
(105,n = (long)
(106,)
(107,tif)
(108,)
(109,cc > 0 && occ > 0)
(110,tif->tif_clientdata)
(111,cc--)
(112,tif->tif_rawcc = cc)
(113,module)
(114,occ)
(115,cc = tif->tif_rawcc)
(116,0)
(117,tif)
(118,n)
(119,(tmsize_t)
(120,occ -= n)
(121,128)
(122,tif->tif_rawcp = (uint8*)
(123,1)
(124,occ)
(125,n >= 128)
(126,long)
(127,n-- > 0)
(128,n)
(129,op += n)
(130,n)
(131,tif->tif_rawcp)
(132,tif)
(133,(unsigned long)
(134,*op++ = (uint8)
(135,"Discarding %lu bytes to avoid buffer overrun")
(136,tmsize_t)
(137,0)
(138,n)
(139,bp)
(140,occ)
(141,tif->tif_rawcc)
(142,0)
(143,op)
(144,_TIFFmemcpy(op, bp, ++n)
(145,module)
(146,unsigned long)
(147,long)
(148,tif)
(149,cc)
(150,uint8* op)
(151,cc)
(152,n)
(153,n)
(154,bp++)
(155,occ)
(156,)
(157,(unsigned long)
(158,(tmsize_t)
(159,bp = (char*)
(160,*bp++)
(161,while (cc > 0 && occ > 0)
(162,tif_rawcp)
(163,occ)
(164,cc)
(165,b = *bp++)
(166,if (cc < (tmsize_t)
(167,tmsize_t occ)
(168,module)
(169,n + 1)
(170,(void)
(171,if (occ < (tmsize_t)
(172,tif_rawcc)
(173,1)
(174,return (1)
(175,cc)
(176,return (0)
(177,module)
(178,-n + 1)
(179,TIFFWarningExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t\\t\\t       "Terminating PackBitsDecode due to lack of data.")
(180,occ > 0)
(181,)
(182,n = -n + 1)
(183,1)
(184,(tmsize_t)
(185,*bp++)
(186,tmsize_t)
(187,cc)
(188,)
(189,(tmsize_t)
(190,"Terminating PackBitsDecode due to lack of data.")
(191,128)
(192,if (n >= 128)
(193,void)
(194,occ < (tmsize_t)
(195,n = (long)
(196,occ -= n)
(197,if (n < 0)
(198,module)
(199,uint8)
(200,-128)
(201,TIFFWarningExt(tif->tif_clientdata, module,\n\\n\\t\\t\\t\\t    "Discarding %lu bytes to avoid buffer overrun",\n\\n\\t\\t\\t\\t    (unsigned long)
(202,tif->tif_clientdata)
(203,break;)
(204,char*)
(205,1)
(206,n)
(207,uint16 s)
(208,(unsigned long)
(209,0)
(210,)
(211,tmsize_t)
(212,RET)
(213,cc -= n)
(214,n)
(215,)
(216,unsigned long)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
