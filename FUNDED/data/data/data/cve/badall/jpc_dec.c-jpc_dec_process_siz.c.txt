-----label-----
1
-----code-----
static int jpc_dec_process_siz(jpc_dec_t *dec, jpc_ms_t *ms)
{
	jpc_siz_t *siz = &ms->parms.siz;
	int compno;
	int tileno;
	jpc_dec_tile_t *tile;
	jpc_dec_tcomp_t *tcomp;
	int htileno;
	int vtileno;
	jpc_dec_cmpt_t *cmpt;

	dec->xstart = siz->xoff;
	dec->ystart = siz->yoff;
	dec->xend = siz->width;
	dec->yend = siz->height;
	dec->tilewidth = siz->tilewidth;
	dec->tileheight = siz->tileheight;
	dec->tilexoff = siz->tilexoff;
	dec->tileyoff = siz->tileyoff;
	dec->numcomps = siz->numcomps;
	if (!(dec->cp = jpc_dec_cp_create(dec->numcomps))) {
		return -1;
	}

	if (!(dec->cmpts = jas_malloc(dec->numcomps * sizeof(jpc_dec_cmpt_t)))) {
		return -1;
	}

	for (compno = 0, cmpt = dec->cmpts; compno < dec->numcomps; ++compno,
	  ++cmpt) {
		cmpt->prec = siz->comps[compno].prec;
		cmpt->sgnd = siz->comps[compno].sgnd;
		cmpt->hstep = siz->comps[compno].hsamp;
		cmpt->vstep = siz->comps[compno].vsamp;
		cmpt->width = JPC_CEILDIV(dec->xend, cmpt->hstep) -
		  JPC_CEILDIV(dec->xstart, cmpt->hstep);
		cmpt->height = JPC_CEILDIV(dec->yend, cmpt->vstep) -
		  JPC_CEILDIV(dec->ystart, cmpt->vstep);
		cmpt->hsubstep = 0;
		cmpt->vsubstep = 0;
	}

	dec->image = 0;

	dec->numhtiles = JPC_CEILDIV(dec->xend - dec->tilexoff, dec->tilewidth);
	dec->numvtiles = JPC_CEILDIV(dec->yend - dec->tileyoff, dec->tileheight);
	dec->numtiles = dec->numhtiles * dec->numvtiles;
	if (!(dec->tiles = jas_malloc(dec->numtiles * sizeof(jpc_dec_tile_t)))) {
		return -1;
	}

	for (tileno = 0, tile = dec->tiles; tileno < dec->numtiles; ++tileno,
	  ++tile) {
		htileno = tileno % dec->numhtiles;
		vtileno = tileno / dec->numhtiles;
		tile->realmode = 0;
		tile->state = JPC_TILE_INIT;
		tile->xstart = JAS_MAX(dec->tilexoff + htileno * dec->tilewidth,
		  dec->xstart);
		tile->ystart = JAS_MAX(dec->tileyoff + vtileno * dec->tileheight,
		  dec->ystart);
		tile->xend = JAS_MIN(dec->tilexoff + (htileno + 1) *
		  dec->tilewidth, dec->xend);
		tile->yend = JAS_MIN(dec->tileyoff + (vtileno + 1) *
		  dec->tileheight, dec->yend);
		tile->numparts = 0;
		tile->partno = 0;
		tile->pkthdrstream = 0;
		tile->pkthdrstreampos = 0;
		tile->pptstab = 0;
		tile->cp = 0;
		if (!(tile->tcomps = jas_malloc(dec->numcomps *
		  sizeof(jpc_dec_tcomp_t)))) {
			return -1;
		}
		for (compno = 0, cmpt = dec->cmpts, tcomp = tile->tcomps;
		  compno < dec->numcomps; ++compno, ++cmpt, ++tcomp) {
			tcomp->rlvls = 0;
			tcomp->data = 0;
			tcomp->xstart = JPC_CEILDIV(tile->xstart, cmpt->hstep);
			tcomp->ystart = JPC_CEILDIV(tile->ystart, cmpt->vstep);
			tcomp->xend = JPC_CEILDIV(tile->xend, cmpt->hstep);
			tcomp->yend = JPC_CEILDIV(tile->yend, cmpt->vstep);
			tcomp->tsfb = 0;
		}
	}

	dec->pkthdrstreams = 0;

	/* We should expect to encounter other main header marker segments
	  or an SOT marker segment next. */
	dec->state = JPC_MH;

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
17,46
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
27,28
27,29
28,29
28,30
29,30
33,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
50,51
51,52
51,53
52,53
54,55
54,56
57,58
58,59
58,60
60,61
62,63
63,64
63,65
65,66
67,68
68,69
68,70
69,70
71,72
71,73
74,75
75,76
75,77
76,77
76,78
77,78
80,81
80,82
81,82
84,85
85,86
85,87
86,87
86,88
87,88
90,91
90,92
91,92
94,95
95,96
95,97
96,97
96,98
97,98
100,101
100,102
101,102
104,105
105,106
105,107
106,107
106,108
107,108
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
124,125
125,126
125,127
126,127
126,128
127,128
130,131
130,132
131,132
134,135
135,136
135,137
136,137
136,138
137,138
140,141
140,142
141,142
144,145
145,146
145,147
146,147
146,148
147,148
150,151
150,152
151,152
154,155
155,156
155,157
156,157
156,158
157,158
160,161
160,162
161,162
164,165
164,166
165,166
166,167
167,168
167,169
168,169
168,170
169,170
172,173
172,174
173,174
175,176
175,177
176,177
179,180
180,181
181,182
183,184
183,185
184,185
185,186
186,187
186,188
187,188
187,189
188,189
191,192
191,193
192,193
194,195
194,196
195,196
195,197
196,197
199,200
200,201
200,202
201,202
204,205
205,206
206,207
208,209
208,210
208,211
208,212
209,210
210,211
210,212
211,212
211,213
212,213
215,216
215,217
216,217
218,219
218,220
219,220
222,223
222,224
223,224
225,226
225,227
226,227
229,230
229,231
230,231
231,232
233,234
234,235
236,237
236,238
236,239
236,240
236,241
236,242
236,243
236,244
237,238
238,239
238,240
239,240
239,241
240,241
243,244
243,245
244,245
244,246
245,246
245,247
246,247
249,250
252,253
253,254
253,255
254,255
254,256
255,256
258,259
258,260
259,260
259,261
260,261
260,262
261,262
264,265
267,268
268,269
268,270
269,270
269,271
270,271
273,274
273,275
274,275
274,276
275,276
275,277
276,277
279,280
282,283
283,284
283,285
284,285
284,286
285,286
288,289
288,290
289,290
289,291
290,291
290,292
291,292
294,295
297,298
298,299
298,300
299,300
299,301
300,301
303,304
303,305
304,305
304,306
304,307
305,306
307,308
307,309
308,309
311,312
311,313
312,313
315,316
315,317
315,318
316,317
318,319
318,320
319,320
322,323
322,324
323,324
326,327
327,328
327,329
328,329
328,330
329,330
332,333
332,334
333,334
333,335
333,336
334,335
336,337
336,338
337,338
340,341
340,342
341,342
344,345
344,346
344,347
345,346
347,348
347,349
348,349
351,352
351,353
352,353
355,356
356,357
356,358
357,358
357,359
358,359
362,363
363,364
363,365
364,365
364,366
365,366
369,370
370,371
370,372
371,372
371,373
372,373
376,377
377,378
377,379
378,379
378,380
379,380
382,383
382,384
382,385
383,384
385,386
385,387
386,387
386,388
387,388
390,391
390,392
391,392
394,395
394,396
395,396
398,399
399,400
399,401
400,401
400,402
401,402
404,405
404,406
404,407
405,406
407,408
407,409
408,409
408,410
409,410
412,413
412,414
413,414
416,417
416,418
417,418
420,421
421,422
421,423
422,423
422,424
423,424
426,427
426,428
427,428
427,429
428,429
431,432
431,433
432,433
435,436
435,437
436,437
437,438
438,439
438,440
439,440
439,441
440,441
443,444
443,445
444,445
446,447
446,448
447,448
447,449
448,449
451,452
452,453
452,454
453,454
456,457
457,458
458,459
460,461
460,462
460,463
460,464
461,462
462,463
462,464
463,464
463,465
464,465
467,468
467,469
468,469
470,471
470,472
471,472
474,475
474,476
475,476
477,478
477,479
478,479
481,482
481,483
482,483
483,484
485,486
486,487
488,489
488,490
488,491
488,492
488,493
488,494
488,495
488,496
488,497
488,498
488,499
488,500
488,501
488,502
488,503
488,504
489,490
490,491
490,492
491,492
493,494
493,495
494,495
496,497
496,498
497,498
500,501
501,502
501,503
502,503
504,505
504,506
505,506
507,508
507,509
508,509
511,512
512,513
512,514
513,514
513,515
514,515
518,519
519,520
519,521
520,521
520,522
521,522
524,525
526,527
527,528
527,529
528,529
528,530
529,530
532,533
532,534
532,535
533,534
535,536
535,537
536,537
536,538
537,538
540,541
540,542
541,542
543,544
543,545
544,545
547,548
547,549
548,549
551,552
552,553
552,554
553,554
553,555
554,555
557,558
557,559
557,560
558,559
560,561
560,562
561,562
561,563
562,563
565,566
565,567
566,567
568,569
568,570
569,570
572,573
572,574
573,574
576,577
577,578
577,579
578,579
578,580
579,580
582,583
582,584
582,585
583,584
585,586
585,587
586,587
586,588
587,588
590,591
590,592
591,592
592,593
592,594
593,594
596,597
596,598
597,598
600,601
600,602
601,602
604,605
605,606
605,607
606,607
606,608
607,608
610,611
610,612
610,613
611,612
613,614
613,615
614,615
614,616
615,616
618,619
618,620
619,620
620,621
620,622
621,622
624,625
624,626
625,626
628,629
628,630
629,630
632,633
633,634
633,635
634,635
634,636
635,636
639,640
640,641
640,642
641,642
641,643
642,643
646,647
647,648
647,649
648,649
648,650
649,650
653,654
654,655
654,656
655,656
655,657
656,657
660,661
661,662
661,663
662,663
662,664
663,664
667,668
668,669
668,670
669,670
669,671
670,671
674,675
674,676
675,676
676,677
677,678
677,679
678,679
678,680
679,680
682,683
682,684
683,684
685,686
685,687
686,687
686,688
687,688
690,691
691,692
691,693
692,693
695,696
696,697
697,698
699,700
699,701
699,702
699,703
700,701
701,702
701,703
701,704
702,703
702,704
703,704
706,707
706,708
707,708
709,710
709,711
710,711
713,714
713,715
714,715
716,717
716,718
717,718
720,721
720,722
721,722
723,724
723,725
724,725
727,728
727,729
727,730
728,729
729,730
731,732
732,733
734,735
735,736
737,738
737,739
737,740
737,741
737,742
737,743
737,744
738,739
739,740
739,741
740,741
740,742
741,742
745,746
746,747
746,748
747,748
747,749
748,749
752,753
753,754
753,755
754,755
754,756
755,756
758,759
758,760
758,761
759,760
761,762
761,763
762,763
765,766
765,767
766,767
769,770
770,771
770,772
771,772
771,773
772,773
775,776
775,777
775,778
776,777
778,779
778,780
779,780
782,783
782,784
783,784
786,787
787,788
787,789
788,789
788,790
789,790
792,793
792,794
792,795
793,794
795,796
795,797
796,797
799,800
799,801
800,801
803,804
804,805
804,806
805,806
805,807
806,807
809,810
809,811
809,812
810,811
812,813
812,814
813,814
816,817
816,818
817,818
820,821
821,822
821,823
822,823
822,824
823,824
827,828
828,829
828,830
829,830
829,831
830,831
834,835
835,836
835,837
836,837
836,838
837,838
840,841
842,843
-----nextToken-----

-----computeFrom-----
75,76
75,77
85,86
85,87
95,96
95,97
105,106
105,107
115,116
115,117
125,126
125,127
135,136
135,137
145,146
145,147
155,156
155,157
167,168
167,169
186,187
186,188
194,195
194,196
211,212
211,213
215,216
215,217
222,223
222,224
238,239
238,240
253,254
253,255
268,269
268,270
283,284
283,285
298,299
298,300
303,304
303,305
327,328
327,329
332,333
332,334
356,357
356,358
363,364
363,365
370,371
370,372
377,378
377,379
385,386
385,387
399,400
399,401
407,408
407,409
421,422
421,423
426,427
426,428
438,439
438,440
446,447
446,448
463,464
463,465
467,468
467,469
474,475
474,476
490,491
490,492
493,494
493,495
501,502
501,503
504,505
504,506
512,513
512,514
519,520
519,521
527,528
527,529
535,536
535,537
540,541
540,542
552,553
552,554
560,561
560,562
565,566
565,567
577,578
577,579
585,586
585,587
590,591
590,592
592,593
592,594
605,606
605,607
613,614
613,615
618,619
618,620
620,621
620,622
633,634
633,635
640,641
640,642
647,648
647,649
654,655
654,656
661,662
661,663
668,669
668,670
677,678
677,679
685,686
685,687
702,703
702,704
706,707
706,708
713,714
713,715
720,721
720,722
739,740
739,741
746,747
746,748
753,754
753,755
770,771
770,772
787,788
787,789
804,805
804,806
821,822
821,823
828,829
828,830
835,836
835,837
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int jpc_dec_process_siz(jpc_dec_t *dec, jpc_ms_t *ms){	jpc_siz_t *siz = &ms->parms.siz;	int compno;	int tileno;	jpc_dec_tile_t *tile;	jpc_dec_tcomp_t *tcomp;	int htileno;	int vtileno;	jpc_dec_cmpt_t *cmpt;	dec->xstart = siz->xoff;	dec->ystart = siz->yoff;	dec->xend = siz->width;	dec->yend = siz->height;	dec->tilewidth = siz->tilewidth;	dec->tileheight = siz->tileheight;	dec->tilexoff = siz->tilexoff;	dec->tileyoff = siz->tileyoff;	dec->numcomps = siz->numcomps;	if (!(dec->cp = jpc_dec_cp_create(dec->numcomps))) {		return -1;	}	if (!(dec->cmpts = jas_malloc(dec->numcomps * sizeof(jpc_dec_cmpt_t)))) {		return -1;	}	for (compno = 0, cmpt = dec->cmpts; compno < dec->numcomps; ++compno,	  ++cmpt) {		cmpt->prec = siz->comps[compno].prec;		cmpt->sgnd = siz->comps[compno].sgnd;		cmpt->hstep = siz->comps[compno].hsamp;		cmpt->vstep = siz->comps[compno].vsamp;		cmpt->width = JPC_CEILDIV(dec->xend, cmpt->hstep) -		  JPC_CEILDIV(dec->xstart, cmpt->hstep);		cmpt->height = JPC_CEILDIV(dec->yend, cmpt->vstep) -		  JPC_CEILDIV(dec->ystart, cmpt->vstep);		cmpt->hsubstep = 0;		cmpt->vsubstep = 0;	}	dec->image = 0;	dec->numhtiles = JPC_CEILDIV(dec->xend - dec->tilexoff, dec->tilewidth);	dec->numvtiles = JPC_CEILDIV(dec->yend - dec->tileyoff, dec->tileheight);	dec->numtiles = dec->numhtiles * dec->numvtiles;	if (!(dec->tiles = jas_malloc(dec->numtiles * sizeof(jpc_dec_tile_t)))) {		return -1;	}	for (tileno = 0, tile = dec->tiles; tileno < dec->numtiles; ++tileno,	  ++tile) {		htileno = tileno % dec->numhtiles;		vtileno = tileno / dec->numhtiles;		tile->realmode = 0;		tile->state = JPC_TILE_INIT;		tile->xstart = JAS_MAX(dec->tilexoff + htileno * dec->tilewidth,		  dec->xstart);		tile->ystart = JAS_MAX(dec->tileyoff + vtileno * dec->tileheight,		  dec->ystart);		tile->xend = JAS_MIN(dec->tilexoff + (htileno + 1) *		  dec->tilewidth, dec->xend);		tile->yend = JAS_MIN(dec->tileyoff + (vtileno + 1) *		  dec->tileheight, dec->yend);		tile->numparts = 0;		tile->partno = 0;		tile->pkthdrstream = 0;		tile->pkthdrstreampos = 0;		tile->pptstab = 0;		tile->cp = 0;		if (!(tile->tcomps = jas_malloc(dec->numcomps *		  sizeof(jpc_dec_tcomp_t)))) {			return -1;		}		for (compno = 0, cmpt = dec->cmpts, tcomp = tile->tcomps;		  compno < dec->numcomps; ++compno, ++cmpt, ++tcomp) {			tcomp->rlvls = 0;			tcomp->data = 0;			tcomp->xstart = JPC_CEILDIV(tile->xstart, cmpt->hstep);			tcomp->ystart = JPC_CEILDIV(tile->ystart, cmpt->vstep);			tcomp->xend = JPC_CEILDIV(tile->xend, cmpt->hstep);			tcomp->yend = JPC_CEILDIV(tile->yend, cmpt->vstep);			tcomp->tsfb = 0;		}	}	dec->pkthdrstreams = 0;	/* We should expect to encounter other main header marker segments	  or an SOT marker segment next. */	dec->state = JPC_MH;	return 0;}
static int
jpc_dec_process_siz(jpc_dec_t *dec, jpc_ms_t *ms)
jpc_dec_process_siz
jpc_dec_t *dec
jpc_dec_t
jpc_dec_t
*dec
*
dec
jpc_ms_t *ms
jpc_ms_t
jpc_ms_t
*ms
*
ms
{	jpc_siz_t *siz = &ms->parms.siz;	int compno;	int tileno;	jpc_dec_tile_t *tile;	jpc_dec_tcomp_t *tcomp;	int htileno;	int vtileno;	jpc_dec_cmpt_t *cmpt;	dec->xstart = siz->xoff;	dec->ystart = siz->yoff;	dec->xend = siz->width;	dec->yend = siz->height;	dec->tilewidth = siz->tilewidth;	dec->tileheight = siz->tileheight;	dec->tilexoff = siz->tilexoff;	dec->tileyoff = siz->tileyoff;	dec->numcomps = siz->numcomps;	if (!(dec->cp = jpc_dec_cp_create(dec->numcomps))) {		return -1;	}	if (!(dec->cmpts = jas_malloc(dec->numcomps * sizeof(jpc_dec_cmpt_t)))) {		return -1;	}	for (compno = 0, cmpt = dec->cmpts; compno < dec->numcomps; ++compno,	  ++cmpt) {		cmpt->prec = siz->comps[compno].prec;		cmpt->sgnd = siz->comps[compno].sgnd;		cmpt->hstep = siz->comps[compno].hsamp;		cmpt->vstep = siz->comps[compno].vsamp;		cmpt->width = JPC_CEILDIV(dec->xend, cmpt->hstep) -		  JPC_CEILDIV(dec->xstart, cmpt->hstep);		cmpt->height = JPC_CEILDIV(dec->yend, cmpt->vstep) -		  JPC_CEILDIV(dec->ystart, cmpt->vstep);		cmpt->hsubstep = 0;		cmpt->vsubstep = 0;	}	dec->image = 0;	dec->numhtiles = JPC_CEILDIV(dec->xend - dec->tilexoff, dec->tilewidth);	dec->numvtiles = JPC_CEILDIV(dec->yend - dec->tileyoff, dec->tileheight);	dec->numtiles = dec->numhtiles * dec->numvtiles;	if (!(dec->tiles = jas_malloc(dec->numtiles * sizeof(jpc_dec_tile_t)))) {		return -1;	}	for (tileno = 0, tile = dec->tiles; tileno < dec->numtiles; ++tileno,	  ++tile) {		htileno = tileno % dec->numhtiles;		vtileno = tileno / dec->numhtiles;		tile->realmode = 0;		tile->state = JPC_TILE_INIT;		tile->xstart = JAS_MAX(dec->tilexoff + htileno * dec->tilewidth,		  dec->xstart);		tile->ystart = JAS_MAX(dec->tileyoff + vtileno * dec->tileheight,		  dec->ystart);		tile->xend = JAS_MIN(dec->tilexoff + (htileno + 1) *		  dec->tilewidth, dec->xend);		tile->yend = JAS_MIN(dec->tileyoff + (vtileno + 1) *		  dec->tileheight, dec->yend);		tile->numparts = 0;		tile->partno = 0;		tile->pkthdrstream = 0;		tile->pkthdrstreampos = 0;		tile->pptstab = 0;		tile->cp = 0;		if (!(tile->tcomps = jas_malloc(dec->numcomps *		  sizeof(jpc_dec_tcomp_t)))) {			return -1;		}		for (compno = 0, cmpt = dec->cmpts, tcomp = tile->tcomps;		  compno < dec->numcomps; ++compno, ++cmpt, ++tcomp) {			tcomp->rlvls = 0;			tcomp->data = 0;			tcomp->xstart = JPC_CEILDIV(tile->xstart, cmpt->hstep);			tcomp->ystart = JPC_CEILDIV(tile->ystart, cmpt->vstep);			tcomp->xend = JPC_CEILDIV(tile->xend, cmpt->hstep);			tcomp->yend = JPC_CEILDIV(tile->yend, cmpt->vstep);			tcomp->tsfb = 0;		}	}	dec->pkthdrstreams = 0;	/* We should expect to encounter other main header marker segments	  or an SOT marker segment next. */	dec->state = JPC_MH;	return 0;}
jpc_siz_t *siz = &ms->parms.siz;
jpc_siz_t *siz = &ms->parms.siz;
jpc_siz_t
jpc_siz_t
*siz = &ms->parms.siz
*
siz
= &ms->parms.siz
&ms->parms.siz
ms->parms.siz
ms->parms
ms
ms
parms
siz
int compno;
int compno;
int
compno
compno
int tileno;
int tileno;
int
tileno
tileno
jpc_dec_tile_t *tile;
jpc_dec_tile_t *tile;
jpc_dec_tile_t
jpc_dec_tile_t
*tile
*
tile
jpc_dec_tcomp_t *tcomp;
jpc_dec_tcomp_t *tcomp;
jpc_dec_tcomp_t
jpc_dec_tcomp_t
*tcomp
*
tcomp
int htileno;
int htileno;
int
htileno
htileno
int vtileno;
int vtileno;
int
vtileno
vtileno
jpc_dec_cmpt_t *cmpt;
jpc_dec_cmpt_t *cmpt;
jpc_dec_cmpt_t
jpc_dec_cmpt_t
*cmpt
*
cmpt
dec->xstart = siz->xoff;
dec->xstart = siz->xoff
dec->xstart
dec
dec
xstart
siz->xoff
siz
siz
xoff
dec->ystart = siz->yoff;
dec->ystart = siz->yoff
dec->ystart
dec
dec
ystart
siz->yoff
siz
siz
yoff
dec->xend = siz->width;
dec->xend = siz->width
dec->xend
dec
dec
xend
siz->width
siz
siz
width
dec->yend = siz->height;
dec->yend = siz->height
dec->yend
dec
dec
yend
siz->height
siz
siz
height
dec->tilewidth = siz->tilewidth;
dec->tilewidth = siz->tilewidth
dec->tilewidth
dec
dec
tilewidth
siz->tilewidth
siz
siz
tilewidth
dec->tileheight = siz->tileheight;
dec->tileheight = siz->tileheight
dec->tileheight
dec
dec
tileheight
siz->tileheight
siz
siz
tileheight
dec->tilexoff = siz->tilexoff;
dec->tilexoff = siz->tilexoff
dec->tilexoff
dec
dec
tilexoff
siz->tilexoff
siz
siz
tilexoff
dec->tileyoff = siz->tileyoff;
dec->tileyoff = siz->tileyoff
dec->tileyoff
dec
dec
tileyoff
siz->tileyoff
siz
siz
tileyoff
dec->numcomps = siz->numcomps;
dec->numcomps = siz->numcomps
dec->numcomps
dec
dec
numcomps
siz->numcomps
siz
siz
numcomps
if (!(dec->cp = jpc_dec_cp_create(dec->numcomps))) {		return -1;	}
!(dec->cp = jpc_dec_cp_create(dec->numcomps))
(dec->cp = jpc_dec_cp_create(dec->numcomps))
dec->cp = jpc_dec_cp_create(dec->numcomps)
dec->cp
dec
dec
cp
jpc_dec_cp_create(dec->numcomps)
jpc_dec_cp_create
jpc_dec_cp_create
dec->numcomps
dec
dec
numcomps
{		return -1;	}
return -1;
-1
1
if (!(dec->cmpts = jas_malloc(dec->numcomps * sizeof(jpc_dec_cmpt_t)))) {		return -1;	}
!(dec->cmpts = jas_malloc(dec->numcomps * sizeof(jpc_dec_cmpt_t)))
(dec->cmpts = jas_malloc(dec->numcomps * sizeof(jpc_dec_cmpt_t)))
dec->cmpts = jas_malloc(dec->numcomps * sizeof(jpc_dec_cmpt_t))
dec->cmpts
dec
dec
cmpts
jas_malloc(dec->numcomps * sizeof(jpc_dec_cmpt_t))
jas_malloc
jas_malloc
dec->numcomps * sizeof(jpc_dec_cmpt_t)
dec->numcomps
dec
dec
numcomps
sizeof(jpc_dec_cmpt_t)
jpc_dec_cmpt_t
jpc_dec_cmpt_t
jpc_dec_cmpt_t

{		return -1;	}
return -1;
-1
1
for (compno = 0, cmpt = dec->cmpts; compno < dec->numcomps; ++compno,	  ++cmpt) {		cmpt->prec = siz->comps[compno].prec;		cmpt->sgnd = siz->comps[compno].sgnd;		cmpt->hstep = siz->comps[compno].hsamp;		cmpt->vstep = siz->comps[compno].vsamp;		cmpt->width = JPC_CEILDIV(dec->xend, cmpt->hstep) -		  JPC_CEILDIV(dec->xstart, cmpt->hstep);		cmpt->height = JPC_CEILDIV(dec->yend, cmpt->vstep) -		  JPC_CEILDIV(dec->ystart, cmpt->vstep);		cmpt->hsubstep = 0;		cmpt->vsubstep = 0;	}
compno = 0, cmpt = dec->cmpts;
compno = 0, cmpt = dec->cmpts
compno = 0
compno
compno
0
cmpt = dec->cmpts
cmpt
cmpt
dec->cmpts
dec
dec
cmpts
compno < dec->numcomps
compno
compno
dec->numcomps
dec
dec
numcomps
++compno,	  ++cmpt
++compno
compno
compno
++cmpt
cmpt
cmpt
{		cmpt->prec = siz->comps[compno].prec;		cmpt->sgnd = siz->comps[compno].sgnd;		cmpt->hstep = siz->comps[compno].hsamp;		cmpt->vstep = siz->comps[compno].vsamp;		cmpt->width = JPC_CEILDIV(dec->xend, cmpt->hstep) -		  JPC_CEILDIV(dec->xstart, cmpt->hstep);		cmpt->height = JPC_CEILDIV(dec->yend, cmpt->vstep) -		  JPC_CEILDIV(dec->ystart, cmpt->vstep);		cmpt->hsubstep = 0;		cmpt->vsubstep = 0;	}
cmpt->prec = siz->comps[compno].prec;
cmpt->prec = siz->comps[compno].prec
cmpt->prec
cmpt
cmpt
prec
siz->comps[compno].prec
siz->comps[compno]
siz->comps
siz
siz
comps
compno
compno
prec
cmpt->sgnd = siz->comps[compno].sgnd;
cmpt->sgnd = siz->comps[compno].sgnd
cmpt->sgnd
cmpt
cmpt
sgnd
siz->comps[compno].sgnd
siz->comps[compno]
siz->comps
siz
siz
comps
compno
compno
sgnd
cmpt->hstep = siz->comps[compno].hsamp;
cmpt->hstep = siz->comps[compno].hsamp
cmpt->hstep
cmpt
cmpt
hstep
siz->comps[compno].hsamp
siz->comps[compno]
siz->comps
siz
siz
comps
compno
compno
hsamp
cmpt->vstep = siz->comps[compno].vsamp;
cmpt->vstep = siz->comps[compno].vsamp
cmpt->vstep
cmpt
cmpt
vstep
siz->comps[compno].vsamp
siz->comps[compno]
siz->comps
siz
siz
comps
compno
compno
vsamp
cmpt->width = JPC_CEILDIV(dec->xend, cmpt->hstep) -		  JPC_CEILDIV(dec->xstart, cmpt->hstep);
cmpt->width = JPC_CEILDIV(dec->xend, cmpt->hstep) -		  JPC_CEILDIV(dec->xstart, cmpt->hstep)
cmpt->width
cmpt
cmpt
width
JPC_CEILDIV(dec->xend, cmpt->hstep) -		  JPC_CEILDIV(dec->xstart, cmpt->hstep)
JPC_CEILDIV(dec->xend, cmpt->hstep)
JPC_CEILDIV
JPC_CEILDIV
dec->xend
dec
dec
xend
cmpt->hstep
cmpt
cmpt
hstep
JPC_CEILDIV(dec->xstart, cmpt->hstep)
JPC_CEILDIV
JPC_CEILDIV
dec->xstart
dec
dec
xstart
cmpt->hstep
cmpt
cmpt
hstep
cmpt->height = JPC_CEILDIV(dec->yend, cmpt->vstep) -		  JPC_CEILDIV(dec->ystart, cmpt->vstep);
cmpt->height = JPC_CEILDIV(dec->yend, cmpt->vstep) -		  JPC_CEILDIV(dec->ystart, cmpt->vstep)
cmpt->height
cmpt
cmpt
height
JPC_CEILDIV(dec->yend, cmpt->vstep) -		  JPC_CEILDIV(dec->ystart, cmpt->vstep)
JPC_CEILDIV(dec->yend, cmpt->vstep)
JPC_CEILDIV
JPC_CEILDIV
dec->yend
dec
dec
yend
cmpt->vstep
cmpt
cmpt
vstep
JPC_CEILDIV(dec->ystart, cmpt->vstep)
JPC_CEILDIV
JPC_CEILDIV
dec->ystart
dec
dec
ystart
cmpt->vstep
cmpt
cmpt
vstep
cmpt->hsubstep = 0;
cmpt->hsubstep = 0
cmpt->hsubstep
cmpt
cmpt
hsubstep
0
cmpt->vsubstep = 0;
cmpt->vsubstep = 0
cmpt->vsubstep
cmpt
cmpt
vsubstep
0
dec->image = 0;
dec->image = 0
dec->image
dec
dec
image
0
dec->numhtiles = JPC_CEILDIV(dec->xend - dec->tilexoff, dec->tilewidth);
dec->numhtiles = JPC_CEILDIV(dec->xend - dec->tilexoff, dec->tilewidth)
dec->numhtiles
dec
dec
numhtiles
JPC_CEILDIV(dec->xend - dec->tilexoff, dec->tilewidth)
JPC_CEILDIV
JPC_CEILDIV
dec->xend - dec->tilexoff
dec->xend
dec
dec
xend
dec->tilexoff
dec
dec
tilexoff
dec->tilewidth
dec
dec
tilewidth
dec->numvtiles = JPC_CEILDIV(dec->yend - dec->tileyoff, dec->tileheight);
dec->numvtiles = JPC_CEILDIV(dec->yend - dec->tileyoff, dec->tileheight)
dec->numvtiles
dec
dec
numvtiles
JPC_CEILDIV(dec->yend - dec->tileyoff, dec->tileheight)
JPC_CEILDIV
JPC_CEILDIV
dec->yend - dec->tileyoff
dec->yend
dec
dec
yend
dec->tileyoff
dec
dec
tileyoff
dec->tileheight
dec
dec
tileheight
dec->numtiles = dec->numhtiles * dec->numvtiles;
dec->numtiles = dec->numhtiles * dec->numvtiles
dec->numtiles
dec
dec
numtiles
dec->numhtiles * dec->numvtiles
dec->numhtiles
dec
dec
numhtiles
dec->numvtiles
dec
dec
numvtiles
if (!(dec->tiles = jas_malloc(dec->numtiles * sizeof(jpc_dec_tile_t)))) {		return -1;	}
!(dec->tiles = jas_malloc(dec->numtiles * sizeof(jpc_dec_tile_t)))
(dec->tiles = jas_malloc(dec->numtiles * sizeof(jpc_dec_tile_t)))
dec->tiles = jas_malloc(dec->numtiles * sizeof(jpc_dec_tile_t))
dec->tiles
dec
dec
tiles
jas_malloc(dec->numtiles * sizeof(jpc_dec_tile_t))
jas_malloc
jas_malloc
dec->numtiles * sizeof(jpc_dec_tile_t)
dec->numtiles
dec
dec
numtiles
sizeof(jpc_dec_tile_t)
jpc_dec_tile_t
jpc_dec_tile_t
jpc_dec_tile_t

{		return -1;	}
return -1;
-1
1
for (tileno = 0, tile = dec->tiles; tileno < dec->numtiles; ++tileno,	  ++tile) {		htileno = tileno % dec->numhtiles;		vtileno = tileno / dec->numhtiles;		tile->realmode = 0;		tile->state = JPC_TILE_INIT;		tile->xstart = JAS_MAX(dec->tilexoff + htileno * dec->tilewidth,		  dec->xstart);		tile->ystart = JAS_MAX(dec->tileyoff + vtileno * dec->tileheight,		  dec->ystart);		tile->xend = JAS_MIN(dec->tilexoff + (htileno + 1) *		  dec->tilewidth, dec->xend);		tile->yend = JAS_MIN(dec->tileyoff + (vtileno + 1) *		  dec->tileheight, dec->yend);		tile->numparts = 0;		tile->partno = 0;		tile->pkthdrstream = 0;		tile->pkthdrstreampos = 0;		tile->pptstab = 0;		tile->cp = 0;		if (!(tile->tcomps = jas_malloc(dec->numcomps *		  sizeof(jpc_dec_tcomp_t)))) {			return -1;		}		for (compno = 0, cmpt = dec->cmpts, tcomp = tile->tcomps;		  compno < dec->numcomps; ++compno, ++cmpt, ++tcomp) {			tcomp->rlvls = 0;			tcomp->data = 0;			tcomp->xstart = JPC_CEILDIV(tile->xstart, cmpt->hstep);			tcomp->ystart = JPC_CEILDIV(tile->ystart, cmpt->vstep);			tcomp->xend = JPC_CEILDIV(tile->xend, cmpt->hstep);			tcomp->yend = JPC_CEILDIV(tile->yend, cmpt->vstep);			tcomp->tsfb = 0;		}	}
tileno = 0, tile = dec->tiles;
tileno = 0, tile = dec->tiles
tileno = 0
tileno
tileno
0
tile = dec->tiles
tile
tile
dec->tiles
dec
dec
tiles
tileno < dec->numtiles
tileno
tileno
dec->numtiles
dec
dec
numtiles
++tileno,	  ++tile
++tileno
tileno
tileno
++tile
tile
tile
{		htileno = tileno % dec->numhtiles;		vtileno = tileno / dec->numhtiles;		tile->realmode = 0;		tile->state = JPC_TILE_INIT;		tile->xstart = JAS_MAX(dec->tilexoff + htileno * dec->tilewidth,		  dec->xstart);		tile->ystart = JAS_MAX(dec->tileyoff + vtileno * dec->tileheight,		  dec->ystart);		tile->xend = JAS_MIN(dec->tilexoff + (htileno + 1) *		  dec->tilewidth, dec->xend);		tile->yend = JAS_MIN(dec->tileyoff + (vtileno + 1) *		  dec->tileheight, dec->yend);		tile->numparts = 0;		tile->partno = 0;		tile->pkthdrstream = 0;		tile->pkthdrstreampos = 0;		tile->pptstab = 0;		tile->cp = 0;		if (!(tile->tcomps = jas_malloc(dec->numcomps *		  sizeof(jpc_dec_tcomp_t)))) {			return -1;		}		for (compno = 0, cmpt = dec->cmpts, tcomp = tile->tcomps;		  compno < dec->numcomps; ++compno, ++cmpt, ++tcomp) {			tcomp->rlvls = 0;			tcomp->data = 0;			tcomp->xstart = JPC_CEILDIV(tile->xstart, cmpt->hstep);			tcomp->ystart = JPC_CEILDIV(tile->ystart, cmpt->vstep);			tcomp->xend = JPC_CEILDIV(tile->xend, cmpt->hstep);			tcomp->yend = JPC_CEILDIV(tile->yend, cmpt->vstep);			tcomp->tsfb = 0;		}	}
htileno = tileno % dec->numhtiles;
htileno = tileno % dec->numhtiles
htileno
htileno
tileno % dec->numhtiles
tileno
tileno
dec->numhtiles
dec
dec
numhtiles
vtileno = tileno / dec->numhtiles;
vtileno = tileno / dec->numhtiles
vtileno
vtileno
tileno / dec->numhtiles
tileno
tileno
dec->numhtiles
dec
dec
numhtiles
tile->realmode = 0;
tile->realmode = 0
tile->realmode
tile
tile
realmode
0
tile->state = JPC_TILE_INIT;
tile->state = JPC_TILE_INIT
tile->state
tile
tile
state
JPC_TILE_INIT
JPC_TILE_INIT
tile->xstart = JAS_MAX(dec->tilexoff + htileno * dec->tilewidth,		  dec->xstart);
tile->xstart = JAS_MAX(dec->tilexoff + htileno * dec->tilewidth,		  dec->xstart)
tile->xstart
tile
tile
xstart
JAS_MAX(dec->tilexoff + htileno * dec->tilewidth,		  dec->xstart)
JAS_MAX
JAS_MAX
dec->tilexoff + htileno * dec->tilewidth
dec->tilexoff
dec
dec
tilexoff
htileno * dec->tilewidth
htileno
htileno
dec->tilewidth
dec
dec
tilewidth
dec->xstart
dec
dec
xstart
tile->ystart = JAS_MAX(dec->tileyoff + vtileno * dec->tileheight,		  dec->ystart);
tile->ystart = JAS_MAX(dec->tileyoff + vtileno * dec->tileheight,		  dec->ystart)
tile->ystart
tile
tile
ystart
JAS_MAX(dec->tileyoff + vtileno * dec->tileheight,		  dec->ystart)
JAS_MAX
JAS_MAX
dec->tileyoff + vtileno * dec->tileheight
dec->tileyoff
dec
dec
tileyoff
vtileno * dec->tileheight
vtileno
vtileno
dec->tileheight
dec
dec
tileheight
dec->ystart
dec
dec
ystart
tile->xend = JAS_MIN(dec->tilexoff + (htileno + 1) *		  dec->tilewidth, dec->xend);
tile->xend = JAS_MIN(dec->tilexoff + (htileno + 1) *		  dec->tilewidth, dec->xend)
tile->xend
tile
tile
xend
JAS_MIN(dec->tilexoff + (htileno + 1) *		  dec->tilewidth, dec->xend)
JAS_MIN
JAS_MIN
dec->tilexoff + (htileno + 1) *		  dec->tilewidth
dec->tilexoff
dec
dec
tilexoff
(htileno + 1) *		  dec->tilewidth
(htileno + 1)
htileno + 1
htileno
htileno
1
dec->tilewidth
dec
dec
tilewidth
dec->xend
dec
dec
xend
tile->yend = JAS_MIN(dec->tileyoff + (vtileno + 1) *		  dec->tileheight, dec->yend);
tile->yend = JAS_MIN(dec->tileyoff + (vtileno + 1) *		  dec->tileheight, dec->yend)
tile->yend
tile
tile
yend
JAS_MIN(dec->tileyoff + (vtileno + 1) *		  dec->tileheight, dec->yend)
JAS_MIN
JAS_MIN
dec->tileyoff + (vtileno + 1) *		  dec->tileheight
dec->tileyoff
dec
dec
tileyoff
(vtileno + 1) *		  dec->tileheight
(vtileno + 1)
vtileno + 1
vtileno
vtileno
1
dec->tileheight
dec
dec
tileheight
dec->yend
dec
dec
yend
tile->numparts = 0;
tile->numparts = 0
tile->numparts
tile
tile
numparts
0
tile->partno = 0;
tile->partno = 0
tile->partno
tile
tile
partno
0
tile->pkthdrstream = 0;
tile->pkthdrstream = 0
tile->pkthdrstream
tile
tile
pkthdrstream
0
tile->pkthdrstreampos = 0;
tile->pkthdrstreampos = 0
tile->pkthdrstreampos
tile
tile
pkthdrstreampos
0
tile->pptstab = 0;
tile->pptstab = 0
tile->pptstab
tile
tile
pptstab
0
tile->cp = 0;
tile->cp = 0
tile->cp
tile
tile
cp
0
if (!(tile->tcomps = jas_malloc(dec->numcomps *		  sizeof(jpc_dec_tcomp_t)))) {			return -1;		}
!(tile->tcomps = jas_malloc(dec->numcomps *		  sizeof(jpc_dec_tcomp_t)))
(tile->tcomps = jas_malloc(dec->numcomps *		  sizeof(jpc_dec_tcomp_t)))
tile->tcomps = jas_malloc(dec->numcomps *		  sizeof(jpc_dec_tcomp_t))
tile->tcomps
tile
tile
tcomps
jas_malloc(dec->numcomps *		  sizeof(jpc_dec_tcomp_t))
jas_malloc
jas_malloc
dec->numcomps *		  sizeof(jpc_dec_tcomp_t)
dec->numcomps
dec
dec
numcomps
sizeof(jpc_dec_tcomp_t)
jpc_dec_tcomp_t
jpc_dec_tcomp_t
jpc_dec_tcomp_t

{			return -1;		}
return -1;
-1
1
for (compno = 0, cmpt = dec->cmpts, tcomp = tile->tcomps;		  compno < dec->numcomps; ++compno, ++cmpt, ++tcomp) {			tcomp->rlvls = 0;			tcomp->data = 0;			tcomp->xstart = JPC_CEILDIV(tile->xstart, cmpt->hstep);			tcomp->ystart = JPC_CEILDIV(tile->ystart, cmpt->vstep);			tcomp->xend = JPC_CEILDIV(tile->xend, cmpt->hstep);			tcomp->yend = JPC_CEILDIV(tile->yend, cmpt->vstep);			tcomp->tsfb = 0;		}
compno = 0, cmpt = dec->cmpts, tcomp = tile->tcomps;
compno = 0, cmpt = dec->cmpts, tcomp = tile->tcomps
compno = 0
compno
compno
0
cmpt = dec->cmpts
cmpt
cmpt
dec->cmpts
dec
dec
cmpts
tcomp = tile->tcomps
tcomp
tcomp
tile->tcomps
tile
tile
tcomps
compno < dec->numcomps
compno
compno
dec->numcomps
dec
dec
numcomps
++compno, ++cmpt, ++tcomp
++compno
compno
compno
++cmpt
cmpt
cmpt
++tcomp
tcomp
tcomp
{			tcomp->rlvls = 0;			tcomp->data = 0;			tcomp->xstart = JPC_CEILDIV(tile->xstart, cmpt->hstep);			tcomp->ystart = JPC_CEILDIV(tile->ystart, cmpt->vstep);			tcomp->xend = JPC_CEILDIV(tile->xend, cmpt->hstep);			tcomp->yend = JPC_CEILDIV(tile->yend, cmpt->vstep);			tcomp->tsfb = 0;		}
tcomp->rlvls = 0;
tcomp->rlvls = 0
tcomp->rlvls
tcomp
tcomp
rlvls
0
tcomp->data = 0;
tcomp->data = 0
tcomp->data
tcomp
tcomp
data
0
tcomp->xstart = JPC_CEILDIV(tile->xstart, cmpt->hstep);
tcomp->xstart = JPC_CEILDIV(tile->xstart, cmpt->hstep)
tcomp->xstart
tcomp
tcomp
xstart
JPC_CEILDIV(tile->xstart, cmpt->hstep)
JPC_CEILDIV
JPC_CEILDIV
tile->xstart
tile
tile
xstart
cmpt->hstep
cmpt
cmpt
hstep
tcomp->ystart = JPC_CEILDIV(tile->ystart, cmpt->vstep);
tcomp->ystart = JPC_CEILDIV(tile->ystart, cmpt->vstep)
tcomp->ystart
tcomp
tcomp
ystart
JPC_CEILDIV(tile->ystart, cmpt->vstep)
JPC_CEILDIV
JPC_CEILDIV
tile->ystart
tile
tile
ystart
cmpt->vstep
cmpt
cmpt
vstep
tcomp->xend = JPC_CEILDIV(tile->xend, cmpt->hstep);
tcomp->xend = JPC_CEILDIV(tile->xend, cmpt->hstep)
tcomp->xend
tcomp
tcomp
xend
JPC_CEILDIV(tile->xend, cmpt->hstep)
JPC_CEILDIV
JPC_CEILDIV
tile->xend
tile
tile
xend
cmpt->hstep
cmpt
cmpt
hstep
tcomp->yend = JPC_CEILDIV(tile->yend, cmpt->vstep);
tcomp->yend = JPC_CEILDIV(tile->yend, cmpt->vstep)
tcomp->yend
tcomp
tcomp
yend
JPC_CEILDIV(tile->yend, cmpt->vstep)
JPC_CEILDIV
JPC_CEILDIV
tile->yend
tile
tile
yend
cmpt->vstep
cmpt
cmpt
vstep
tcomp->tsfb = 0;
tcomp->tsfb = 0
tcomp->tsfb
tcomp
tcomp
tsfb
0
dec->pkthdrstreams = 0;
dec->pkthdrstreams = 0
dec->pkthdrstreams
dec
dec
pkthdrstreams
0
dec->state = JPC_MH;
dec->state = JPC_MH
dec->state
dec
dec
state
JPC_MH
JPC_MH
return 0;
0
-----joern-----
(56,81,0)
(105,30,0)
(57,26,0)
(25,111,0)
(17,92,0)
(114,110,0)
(81,56,0)
(40,92,0)
(88,41,0)
(21,5,0)
(105,100,0)
(86,67,0)
(80,107,0)
(6,52,0)
(34,30,0)
(53,48,0)
(41,29,0)
(105,41,0)
(93,38,0)
(29,7,0)
(54,17,0)
(24,70,0)
(22,81,0)
(16,54,0)
(75,92,0)
(3,18,0)
(89,21,0)
(85,52,0)
(27,74,0)
(15,109,0)
(29,41,0)
(39,112,0)
(19,74,0)
(79,6,0)
(106,110,0)
(50,54,0)
(67,110,0)
(55,26,0)
(76,66,0)
(32,27,0)
(105,93,0)
(93,92,0)
(26,7,0)
(34,49,0)
(38,93,0)
(70,52,0)
(82,77,0)
(51,96,0)
(34,93,0)
(64,92,0)
(61,90,0)
(116,66,0)
(94,38,0)
(19,82,0)
(112,39,0)
(111,64,0)
(58,100,0)
(91,90,0)
(111,25,0)
(70,112,0)
(48,110,0)
(67,6,0)
(5,77,0)
(34,26,0)
(100,99,0)
(113,91,0)
(47,21,0)
(59,107,0)
(26,39,0)
(90,91,0)
(28,86,0)
(9,40,0)
(81,52,0)
(6,67,0)
(18,53,0)
(105,107,0)
(99,56,0)
(10,84,0)
(11,91,0)
(34,109,0)
(114,69,0)
(100,7,0)
(65,56,0)
(45,111,0)
(43,70,0)
(83,49,0)
(41,25,0)
(25,96,0)
(95,27,0)
(1,105,0)
(109,7,0)
(48,53,0)
(46,5,0)
(64,111,0)
(42,12,0)
(44,64,0)
(34,100,0)
(71,29,0)
(105,26,0)
(62,29,0)
(34,41,0)
(49,7,0)
(13,30,0)
(91,52,0)
(86,7,0)
(51,101,0)
(101,51,0)
(18,52,0)
(116,110,0)
(12,102,0)
(66,116,0)
(31,17,0)
(99,110,0)
(12,84,0)
(68,38,0)
(105,49,0)
(87,52,0)
(105,86,0)
(20,12,0)
(66,87,0)
(77,5,0)
(56,99,0)
(108,18,0)
(85,64,0)
(4,92,0)
(98,19,0)
(115,30,0)
(33,81,0)
(90,92,0)
(39,110,0)
(107,34,0)
(36,49,0)
(73,6,0)
(78,69,0)
(30,114,0)
(97,109,0)
(82,19,0)
(23,93,0)
(34,86,0)
(35,69,0)
(93,51,0)
(63,100,0)
(27,34,0)
(77,82,0)
(14,86,0)
(2,84,0)
(112,70,0)
(53,18,0)
(5,21,0)
(49,48,0)
(60,85,0)
(41,92,0)
(64,85,0)
(72,87,0)
(69,52,0)
(105,109,0)
(34,110,0)
(54,52,0)
(107,7,0)
(109,116,0)
(34,27,0)
(17,54,0)
(30,7,0)
(103,87,0)
(101,90,0)
(104,19,0)
(0,101,0)
(69,114,0)
(8,85,0)
(38,7,0)
(37,105,0)
(105,84,0)
(87,66,0)
(90,101,0)
(21,7,0)
(3,108,1)
(86,14,1)
(44,85,1)
(82,77,1)
(111,64,1)
(34,100,1)
(15,114,1)
(34,41,1)
(78,35,1)
(27,74,1)
(72,109,1)
(41,88,1)
(40,9,1)
(67,6,1)
(47,89,1)
(17,54,1)
(68,25,1)
(109,7,1)
(12,102,1)
(46,21,1)
(14,28,1)
(54,52,1)
(79,73,1)
(105,41,1)
(9,51,1)
(70,43,1)
(21,7,1)
(105,49,1)
(90,92,1)
(48,53,1)
(100,58,1)
(86,7,1)
(98,104,1)
(56,81,1)
(17,92,1)
(37,82,1)
(28,39,1)
(49,7,1)
(91,113,1)
(81,52,1)
(115,13,1)
(41,29,1)
(31,92,1)
(34,109,1)
(39,112,1)
(5,46,1)
(93,92,1)
(30,7,1)
(25,111,1)
(66,76,1)
(105,37,1)
(107,59,1)
(93,23,1)
(12,20,1)
(64,44,1)
(29,7,1)
(34,30,1)
(8,41,1)
(34,26,1)
(23,38,1)
(99,56,1)
(45,64,1)
(87,103,1)
(90,61,1)
(6,79,1)
(76,87,1)
(113,11,1)
(88,29,1)
(50,31,1)
(62,17,1)
(57,55,1)
(43,24,1)
(53,18,1)
(34,49,1)
(34,93,1)
(111,45,1)
(41,92,1)
(26,57,1)
(36,99,1)
(82,19,1)
(56,65,1)
(19,98,1)
(101,0,1)
(75,116,1)
(95,107,1)
(87,52,1)
(77,5,1)
(55,48,1)
(92,4,1)
(85,52,1)
(97,15,1)
(112,70,1)
(38,94,1)
(31,40,1)
(105,100,1)
(33,22,1)
(0,90,1)
(104,12,1)
(60,8,1)
(38,7,1)
(11,93,1)
(105,86,1)
(73,86,1)
(63,82,1)
(105,109,1)
(83,36,1)
(70,52,1)
(6,52,1)
(40,92,1)
(30,115,1)
(61,91,1)
(107,7,1)
(108,49,1)
(4,75,1)
(89,19,1)
(91,52,1)
(37,34,1)
(109,97,1)
(69,52,1)
(1,105,1)
(5,21,1)
(105,26,1)
(22,100,1)
(114,69,1)
(93,38,1)
(80,17,1)
(81,33,1)
(24,26,1)
(64,85,1)
(32,95,1)
(49,83,1)
(20,42,1)
(54,16,1)
(27,32,1)
(51,101,1)
(13,67,1)
(105,107,1)
(100,7,1)
(21,47,1)
(90,91,1)
(34,27,1)
(64,92,1)
(18,52,1)
(105,93,1)
(35,30,1)
(18,3,1)
(101,90,1)
(58,63,1)
(116,66,1)
(71,62,1)
(34,86,1)
(19,74,1)
(103,72,1)
(29,71,1)
(69,78,1)
(105,30,1)
(26,7,1)
(94,68,1)
(16,50,1)
(65,81,1)
(59,80,1)
(66,87,1)
(85,60,1)
(103,82,2)
(33,82,2)
(50,82,2)
(27,74,2)
(64,85,2)
(82,19,2)
(41,92,2)
(109,82,2)
(93,17,2)
(78,82,2)
(6,82,2)
(39,82,2)
(111,64,2)
(108,82,2)
(25,111,2)
(34,100,2)
(21,7,2)
(91,52,2)
(19,74,2)
(67,6,2)
(82,77,2)
(70,82,2)
(85,52,2)
(91,17,2)
(48,82,2)
(64,17,2)
(3,82,2)
(67,82,2)
(44,17,2)
(77,19,2)
(48,53,2)
(90,92,2)
(81,52,2)
(46,19,2)
(87,82,2)
(105,107,2)
(54,17,2)
(90,17,2)
(40,17,2)
(51,101,2)
(16,17,2)
(105,109,2)
(58,82,2)
(115,82,2)
(113,17,2)
(34,26,2)
(29,7,2)
(15,82,2)
(116,82,2)
(107,82,2)
(14,82,2)
(60,17,2)
(95,82,2)
(81,82,2)
(35,82,2)
(34,82,2)
(72,82,2)
(11,17,2)
(57,82,2)
(54,52,2)
(105,49,2)
(17,92,2)
(99,56,2)
(77,5,2)
(105,41,2)
(100,82,2)
(66,87,2)
(17,17,2)
(36,82,2)
(88,17,2)
(5,19,2)
(66,82,2)
(97,82,2)
(116,66,2)
(30,82,2)
(75,82,2)
(26,7,2)
(31,17,2)
(18,52,2)
(38,7,2)
(114,69,2)
(17,54,2)
(86,7,2)
(49,7,2)
(107,7,2)
(6,52,2)
(56,82,2)
(0,17,2)
(80,82,2)
(53,18,2)
(56,81,2)
(83,82,2)
(13,82,2)
(62,17,2)
(39,112,2)
(27,82,2)
(43,82,2)
(51,17,2)
(101,90,2)
(22,82,2)
(89,19,2)
(29,17,2)
(105,93,2)
(50,17,2)
(1,105,2)
(61,17,2)
(26,82,2)
(63,82,2)
(109,7,2)
(68,17,2)
(73,82,2)
(55,82,2)
(76,82,2)
(4,82,2)
(34,93,2)
(8,17,2)
(53,82,2)
(93,92,2)
(28,82,2)
(64,92,2)
(87,52,2)
(105,86,2)
(34,30,2)
(93,38,2)
(18,82,2)
(5,21,2)
(69,52,2)
(114,82,2)
(94,17,2)
(70,52,2)
(71,17,2)
(105,30,2)
(34,41,2)
(47,19,2)
(9,17,2)
(86,82,2)
(59,82,2)
(49,82,2)
(23,17,2)
(21,19,2)
(101,17,2)
(105,100,2)
(69,82,2)
(65,82,2)
(12,102,2)
(32,82,2)
(92,82,2)
(79,82,2)
(34,27,2)
(41,17,2)
(17,82,2)
(30,7,2)
(85,17,2)
(112,70,2)
(45,17,2)
(34,86,2)
(34,49,2)
(111,17,2)
(24,82,2)
(112,82,2)
(100,7,2)
(25,17,2)
(34,109,2)
(16,82,2)
(31,82,2)
(40,92,2)
(90,91,2)
(54,82,2)
(99,82,2)
(105,26,2)
(38,17,2)
(41,29,2)
-----------------------------------
(0,parheightval)
(1,RET)
(2,rlvlno)
(3,cblkwidthval)
(4,0)
(5,ccp->flags & JPC_COC)
(6,compparms->qmfbid)
(7,jpc_dec_ccp_t *ccp)
(8,compparms)
(9,rlvlno)
(10,if ((flags & JPC_COC)
(11,compparms)
(12,cp = 0)
(13,ccp)
(14,qmfbid)
(15,ccp)
(16,numrlvls)
(17,rlvlno < compparms->numrlvls)
(18,compparms->cblkwidthval)
(19,flags & JPC_COC)
(20,0)
(21,ccp->flags)
(22,compparms)
(23,rlvlno)
(24,compparms)
(25,ccp->prcwidthexpns[rlvlno] =\\n\\t\\t\\t  compparms->rlvls[rlvlno].parwidthval)
(26,ccp->cblkheightexpn)
(27,flags | JPC_CSET)
(28,ccp)
(29,ccp->prcwidthexpns)
(30,ccp->cblkctx)
(31,rlvlno)
(32,JPC_CSET)
(33,numdlvls)
(34,ccp->flags |= flags | JPC_CSET)
(35,compparms)
(36,ccp)
(37,0)
(38,ccp->prcheightexpns)
(39,ccp->cblkheightexpn = JPC_COX_GETCBLKSIZEEXPN(\\n\\t\\t  compparms->cblkheightval)
(40,++rlvlno)
(41,ccp->prcwidthexpns[rlvlno])
(42,cp)
(43,cblkheightval)
(44,rlvlno)
(45,parwidthval)
(46,JPC_COC)
(47,flags)
(48,ccp->cblkwidthexpn = JPC_COX_GETCBLKSIZEEXPN(\\n\\t\\t  compparms->cblkwidthval)
(49,ccp->cblkwidthexpn)
(50,compparms)
(51,ccp->prcheightexpns[rlvlno] =\\n\\t\\t\\t  compparms->rlvls[rlvlno].parheightval)
(52,jpc_coxcp_t *compparms)
(53,JPC_COX_GETCBLKSIZEEXPN(\\n\\t\\t  compparms->cblkwidthval)
(54,compparms->numrlvls)
(55,ccp)
(56,compparms->numdlvls + 1)
(57,cblkheightexpn)
(58,numrlvls)
(59,flags)
(60,rlvls)
(61,rlvlno)
(62,ccp)
(63,ccp)
(64,compparms->rlvls[rlvlno])
(65,1)
(66,compparms->csty & JPC_COX_PRT)
(67,ccp->qmfbid = compparms->qmfbid)
(68,ccp)
(69,compparms->cblksty)
(70,compparms->cblkheightval)
(71,prcwidthexpns)
(72,compparms)
(73,compparms)
(74,int flags)
(75,rlvlno)
(76,JPC_COX_PRT)
(77,!(ccp->flags & JPC_COC)
(78,cblksty)
(79,qmfbid)
(80,ccp)
(81,compparms->numdlvls)
(82,(flags & JPC_COC)
(83,cblkwidthexpn)
(84,)
(85,compparms->rlvls)
(86,ccp->qmfbid)
(87,compparms->csty)
(88,rlvlno)
(89,ccp)
(90,compparms->rlvls[rlvlno])
(91,compparms->rlvls)
(92,rlvlno = 0)
(93,ccp->prcheightexpns[rlvlno])
(94,prcheightexpns)
(95,flags)
(96,)
(97,csty)
(98,JPC_COC)
(99,ccp->numrlvls = compparms->numdlvls + 1)
(100,ccp->numrlvls)
(101,compparms->rlvls[rlvlno].parheightval)
(102,jpc_dec_cp_t *cp)
(103,csty)
(104,flags)
(105,return 0;)
(106,for (rlvlno = 0; rlvlno < compparms->numrlvls; ++rlvlno)
(107,ccp->flags)
(108,compparms)
(109,ccp->csty)
(110,)
(111,compparms->rlvls[rlvlno].parwidthval)
(112,JPC_COX_GETCBLKSIZEEXPN(\\n\\t\\t  compparms->cblkheightval)
(113,rlvls)
(114,ccp->cblkctx = compparms->cblksty)
(115,cblkctx)
(116,ccp->csty = compparms->csty & JPC_COX_PRT)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
